{"text": "<fim_prefix>/**\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\npackage org.apache.bookkeeper.http;\n\n/**\n * Provide the interface to start, stop bookkeeper http server.\n * It also provide the interface to inject service provider,\n * which is the implementation of services for http endpoints.\n */\n<fim_suffix>public interface HttpServer {\n\n    /**\n     * Http Status Code.\n     */\n    enum StatusCode {\n        OK(200),\n        REDIRECT(302),\n        FORBIDDEN(403),\n        NOT_FOUND(404),\n        INTERNAL_ERROR(500);\n\n        private int value;\n\n        StatusCode(int value) {\n            this.value = value;\n        }\n\n        public int getValue() {\n            return value;\n        }\n    }\n\n    /**\n     * Http Request Method.\n     */\n    enum Method {\n        GET,\n        POST,\n        PUT,\n        DELETE\n    }\n\n    /**\n     * Http ApiTypes.\n     */\n    enum ApiType {\n        HEARTBEAT,\n        SERVER_CONFIG,\n        METRICS,\n\n        // ledger\n        DELETE_LEDGER,\n        LIST_LEDGER,\n        GET_LEDGER_META,\n        READ_LEDGER_ENTRY,\n        // bookie\n        LIST_BOOKIES,\n        LIST_BOOKIE_INFO,\n        LAST_LOG_MARK,\n        LIST_DISK_FILE,\n        EXPAND_STORAGE,\n        GC,\n        GC_DETAILS,\n\n        // autorecovery\n        RECOVERY_BOOKIE,\n        LIST_UNDER_REPLICATED_LEDGER,\n        WHO_IS_AUDITOR,\n        TRIGGER_AUDIT,\n        LOST_BOOKIE_RECOVERY_DELAY,\n        DECOMMISSION\n    }\n\n    /**\n     * Initialize the HTTP server with underline service provider.\n     */\n    void initialize(HttpServiceProvider httpServiceProvider);\n\n    /**\n     * Start the HTTP server on given port.\n     */\n    boolean startServer(int port);\n\n    /**\n     * Stop the HTTP server.\n     */\n    void stopServer();\n\n    /**\n     * Check whether the HTTP server is still running.\n     */\n    boolean isRunning();\n}<fim_middle>// class below has no smell\n"}