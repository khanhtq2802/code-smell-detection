{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.jca;\n\nimport javax.jcr.Credentials;\nimport javax.jcr.LoginException;\nimport javax.jcr.NoSuchWorkspaceException;\nimport javax.jcr.Repository;\nimport javax.jcr.RepositoryException;\nimport javax.jcr.Session;\nimport javax.naming.Reference;\nimport javax.resource.Referenceable;\nimport javax.resource.ResourceException;\nimport javax.resource.spi.ConnectionManager;\n\nimport org.apache.jackrabbit.commons.repository.ProxyRepository;\nimport org.apache.jackrabbit.commons.repository.RepositoryFactory;\n\nimport java.io.Serializable;\n\n/**\n * This class implements the JCA implementation of repository.\n */\npublic final class JCARepositoryHandle extends ProxyRepository\n        implements Referenceable, Serializable {\n\n\tprivate static final long serialVersionUID = 1235867375647927916L;\n\n\t/**\n     * Managed connection factory.\n     */\n    private final JCAManagedConnectionFactory mcf;\n\n    /**\n     * Connection manager.\n     */\n    private final ConnectionManager cm;\n\n    /**\n     * Reference.\n     */\n    private Reference reference;\n\n    /**\n     * Construct the repository.\n     */\n    public JCARepositoryHandle(\n            JCAManagedConnectionFactory mcf, ConnectionManager cm) {\n        super(new JCARepositoryFactory(mcf));\n        this.mcf = mcf;\n        this.cm = cm;\n    }\n\n    /**\n     * Creates a new session.\n     */\n    @SuppressWarnings(\"deprecation\")\n    public Session login(Credentials creds, String workspace)\n            throws RepositoryException {\n        try {\n            return (Session) cm.allocateConnection(\n                    mcf, new JCAConnectionRequestInfo(creds, workspace));\n        } catch (ResourceException e) {\n            Throwable cause = e.getCause();\n            if (cause == null) {\n                cause = e.getLinkedException();\n            }\n            if (cause instanceof LoginException) {\n                throw (LoginException) cause;\n            } else if (cause instanceof NoSuchWorkspaceException) {\n                throw (NoSuchWorkspaceException) cause;\n            } else if (cause instanceof RepositoryException) {\n                throw (RepositoryException) cause;\n            } else if (cause != null) {\n                throw new RepositoryException(cause);\n            } else {\n                throw new RepositoryException(e);\n            }\n        }\n    }\n\n    /**\n     * Return the reference.\n     */\n    public Reference getReference() {\n        return reference;\n    }\n\n    /**\n     * Set the reference.\n     */\n    public void setReference(Reference reference) {\n        this.reference = reference;\n    }\n\n<fim_suffix>    private static class JCARepositoryFactory\n            implements RepositoryFactory, Serializable {\n\n\t\tprivate static final long serialVersionUID = 5364039431121341634L;\n\t\t\n\t\tprivate final JCAManagedConnectionFactory mcf;\n\n        public JCARepositoryFactory(JCAManagedConnectionFactory mcf) {\n            this.mcf = mcf;\n        }\n\n        public Repository getRepository() throws RepositoryException {\n            return mcf.getRepository();\n        }\n\n    }\n\n}<fim_middle>// class below has no smell\n"}