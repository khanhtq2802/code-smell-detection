{"text": "<fim_prefix>    {\n      send_listNamespaceDescriptors();\n      return recv_listNamespaceDescriptors();\n    }\n    public void send_listNamespaceDescriptors() throws org.apache.thrift.TException\n    {\n      listNamespaceDescriptors_args args = new listNamespaceDescriptors_args();\n      sendBase(\"listNamespaceDescriptors\", args);\n    }\n    public java.util.List<TNamespaceDescriptor> recv_listNamespaceDescriptors() throws TIOError, org.apache.thrift.TException\n    {\n      listNamespaceDescriptors_result result = new listNamespaceDescriptors_result();\n      receiveBase(result, \"listNamespaceDescriptors\");\n      if (result.isSetSuccess()) {\n        return result.success;\n      }\n      if (result.io != null) {\n        throw result.io;\n      }\n      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, \"listNamespaceDescriptors failed: unknown result\");\n    }\n  }\n  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {\n    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {\n      private org.apache.thrift.async.TAsyncClientManager clientManager;\n      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;\n      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {\n        this.clientManager = clientManager;\n        this.protocolFactory = protocolFactory;\n      }\n      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {\n        return new AsyncClient(protocolFactory, clientManager, transport);\n      }\n    }\n    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {\n      super(protocolFactory, clientManager, transport);\n    }\n    public void exists(java.nio.ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      exists_call method_call = new exists_call(table, tget, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class exists_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {\n      private java.nio.ByteBuffer table;\n      private TGet tget;\n      public exists_call(java.nio.ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.table = table;\n        this.tget = tget;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"exists\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        exists_args args = new exists_args();\n        args.setTable(table);\n        args.setTget(tget);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public java.lang.Boolean getResult() throws TIOError, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new java.lang.IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return (new Client(prot)).recv_exists();\n      }\n    }\n    public void existsAll(java.nio.ByteBuffer table, java.util.List<TGet> tgets, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Boolean>> resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      existsAll_call method_call = new existsAll_call(table, tgets, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class existsAll_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Boolean>> {\n      private java.nio.ByteBuffer table;\n      private java.util.List<TGet> tgets;\n      public existsAll_call(java.nio.ByteBuffer table, java.util.List<TGet> tgets, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Boolean>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.table = table;\n        this.tgets = tgets;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"existsAll\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        existsAll_args args = new existsAll_args();\n        args.setTable(table);\n        args.setTgets(tgets);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public java.util.List<java.lang.Boolean> getResult() throws TIOError, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new java.lang.IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return (new Client(prot)).recv_existsAll();\n      }\n    }\n    public void get(java.nio.ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      get_call method_call = new get_call(table, tget, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n<fim_suffix>    public static class get_call extends org.apache.thrift.async.TAsyncMethodCall<TResult> {\n      private java.nio.ByteBuffer table;\n      private TGet tget;\n      public get_call(java.nio.ByteBuffer table, TGet tget, org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.table = table;\n        this.tget = tget;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"get\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        get_args args = new get_args();\n        args.setTable(table);\n        args.setTget(tget);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public TResult getResult() throws TIOError, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new java.lang.IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return (new Client(prot)).recv_get();\n      }\n    }<fim_middle>// class below has no smell\n"}