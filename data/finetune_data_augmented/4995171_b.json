{"text": "<fim_prefix>/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.karaf.cellar.config.shell;\n\nimport org.apache.karaf.cellar.config.Constants;\nimport org.apache.karaf.cellar.config.shell.completers.ClusterConfigCompleter;\nimport org.apache.karaf.cellar.core.CellarSupport;\nimport org.apache.karaf.cellar.core.Configurations;\nimport org.apache.karaf.cellar.core.Group;\nimport org.apache.karaf.cellar.core.event.EventType;\nimport org.apache.karaf.cellar.core.shell.CellarCommandSupport;\nimport org.apache.karaf.cellar.core.shell.completer.AllGroupsCompleter;\nimport org.apache.karaf.shell.api.action.Argument;\nimport org.apache.karaf.shell.api.action.Command;\nimport org.apache.karaf.shell.api.action.Completion;\nimport org.apache.karaf.shell.api.action.Option;\nimport org.apache.karaf.shell.api.action.lifecycle.Service;\n\nimport java.util.Set;\n\n@Command(scope = \"cluster\", name = \"config-block\", description = \"Change the blocking policy for a bundle\")\n@Service\npublic class BlockCommand extends CellarCommandSupport {\n\n    @Argument(index = 0, name = \"group\", description = \"The cluster group name\", required = true, multiValued = false)\n    @Completion(AllGroupsCompleter.class)\n    String groupName;\n\n    @Argument(index = 1, name = \"pidPattern\", description = \"The configuration PID pattern\", required = false, multiValued = false)\n    @Completion(ClusterConfigCompleter.class)\n    String pid;\n\n    @Option(name = \"-in\", description = \"Update the inbound direction\", required = false, multiValued = false)\n    boolean in = false;\n\n    @Option(name = \"-out\", description = \"Update the outbound direction\", required = false, multiValued = false)\n    boolean out = false;\n\n    @Option(name = \"-whitelist\", description = \"Allow the feature by updating the whitelist (false by default)\", required = false, multiValued = false)\n    boolean whitelist = false;\n\n    @Option(name = \"-blacklist\", description = \"Block the feature by updating the blacklist (true by default)\", required = false, multiValued = false)\n    boolean blacklist = false;\n\n<fim_suffix>    public Object doExecute() throws Exception {\n\n        Group group = groupManager.findGroupByName(groupName);\n        if (group == null) {\n            System.err.println(\"Cluster group \" + groupName + \" doesn't exist\");\n            return null;\n        }\n\n        CellarSupport support = new CellarSupport();\n        support.setClusterManager(clusterManager);\n        support.setGroupManager(groupManager);\n        support.setConfigurationAdmin(configurationAdmin);\n\n        if (!in && !out) {\n            in = true;\n            out = true;\n        }\n        if (!whitelist && !blacklist) {\n            whitelist = true;\n            blacklist = true;\n        }\n\n        if (pid == null || pid.isEmpty()) {\n            // display mode\n            if (in) {\n                System.out.println(\"INBOUND:\");\n                if (whitelist) {\n                    System.out.print(\"\\twhitelist: \");\n                    Set<String> list = support.getListEntries(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.INBOUND);\n                    System.out.println(list.toString());\n                }\n                if (blacklist) {\n                    System.out.print(\"\\tblacklist: \");\n                    Set<String> list = support.getListEntries(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.INBOUND);\n                    System.out.println(list.toString());\n                }\n            }\n            if (out) {\n                System.out.println(\"OUTBOUND:\");\n                if (whitelist) {\n                    System.out.print(\"\\twhitelist: \");\n                    Set<String> list = support.getListEntries(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.OUTBOUND);\n                    System.out.println(list.toString());\n                }\n                if (blacklist) {\n                    System.out.print(\"\\tblacklist: \");\n                    Set<String> list = support.getListEntries(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.OUTBOUND);\n                    System.out.println(list.toString());\n                }\n            }\n        } else {\n            // edit mode\n            System.out.println(\"Updating blocking policy for \" + pid);\n            if (in) {\n                if (whitelist) {\n                    System.out.println(\"\\tinbound whitelist ...\");\n                    support.switchListEntry(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.INBOUND, pid);\n                }\n                if (blacklist) {\n                    System.out.println(\"\\tinbound blacklist ...\");\n                    support.switchListEntry(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.INBOUND, pid);\n                }\n            }\n            if (out) {\n                if (whitelist) {\n                    System.out.println(\"\\toutbound whitelist ...\");\n                    support.switchListEntry(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.OUTBOUND, pid);\n                }\n                if (blacklist) {\n                    System.out.println(\"\\toutbound blacklist ...\");\n                    support.switchListEntry(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.OUTBOUND, pid);\n                }\n            }\n        }\n\n        return null;\n    }\n\n}<fim_middle>// function below is long method and feature envy\n"}