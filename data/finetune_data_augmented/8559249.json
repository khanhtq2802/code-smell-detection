{"text": "<fim_prefix>      final TableName tableName = getTableName();\n      final String setName = getTableSetName();\n      BackupInfo.Filter tableNameFilter = new BackupInfo.Filter() {\n        @Override\n        public boolean apply(BackupInfo info) {\n          if (tableName == null) {\n            return true;\n          }\n          List<TableName> names = info.getTableNames();\n          return names.contains(tableName);\n        }\n      };\n      BackupInfo.Filter tableSetFilter = new BackupInfo.Filter() {\n        @Override\n        public boolean apply(BackupInfo info) {\n          if (setName == null) {\n            return true;\n          }\n          String backupId = info.getBackupId();\n          return backupId.startsWith(setName);\n        }\n      };\n      Path backupRootPath = getBackupRootPath();\n      List<BackupInfo> history;\n      if (backupRootPath == null) {\n        // Load from backup system table\n        super.execute();\n        try (final BackupSystemTable sysTable = new BackupSystemTable(conn)) {\n          history = sysTable.getBackupHistory(n, tableNameFilter, tableSetFilter);\n        }\n      } else {\n        // load from backup FS\n        history =\n            BackupUtils.getHistory(getConf(), n, backupRootPath, tableNameFilter, tableSetFilter);\n      }\n      for (BackupInfo info : history) {\n        System.out.println(info.getShortDescription());\n      }\n    }\n    private Path getBackupRootPath() throws IOException {\n      String value = null;\n      try {\n        value = cmdline.getOptionValue(OPTION_PATH);\n        if (value == null) {\n          return null;\n        }\n        return new Path(value);\n      } catch (IllegalArgumentException e) {\n        System.out.println(\"ERROR: Illegal argument for backup root path: \" + value);\n        printUsage();\n        throw new IOException(INCORRECT_USAGE);\n      }\n    }\n    private TableName getTableName() throws IOException {\n      String value = cmdline.getOptionValue(OPTION_TABLE);\n      if (value == null) {\n        return null;\n      }\n      try {\n        return TableName.valueOf(value);\n      } catch (IllegalArgumentException e) {\n        System.out.println(\"Illegal argument for table name: \" + value);\n        printUsage();\n        throw new IOException(INCORRECT_USAGE);\n      }\n    }\n    private String getTableSetName() {\n      return cmdline.getOptionValue(OPTION_SET);\n    }\n    private int parseHistoryLength() throws IOException {\n      String value = cmdline.getOptionValue(OPTION_RECORD_NUMBER);\n      try {\n        if (value == null) {\n          return DEFAULT_HISTORY_LENGTH;\n        }\n        return Integer.parseInt(value);\n      } catch (NumberFormatException e) {\n        System.out.println(\"Illegal argument for history length: \" + value);\n        printUsage();\n        throw new IOException(INCORRECT_USAGE);\n      }\n    }\n    @Override\n    protected void printUsage() {\n      System.out.println(HISTORY_CMD_USAGE);\n      Options options = new Options();\n      options.addOption(OPTION_RECORD_NUMBER, true, OPTION_RECORD_NUMBER_DESC);\n      options.addOption(OPTION_PATH, true, OPTION_PATH_DESC);\n      options.addOption(OPTION_TABLE, true, OPTION_TABLE_DESC);\n      options.addOption(OPTION_SET, true, OPTION_SET_DESC);\n      HelpFormatter helpFormatter = new HelpFormatter();\n      helpFormatter.setLeftPadding(2);\n      helpFormatter.setDescPadding(8);\n      helpFormatter.setWidth(100);\n      helpFormatter.setSyntaxPrefix(\"Options:\");\n      helpFormatter.printHelp(\" \", null, options, USAGE_FOOTER);\n    }\n  }\n  public static class BackupSetCommand extends Command {\n    private final static String SET_ADD_CMD = \"add\";\n    private final static String SET_REMOVE_CMD = \"remove\";\n    private final static String SET_DELETE_CMD = \"delete\";\n    private final static String SET_DESCRIBE_CMD = \"describe\";\n    private final static String SET_LIST_CMD = \"list\";\n    BackupSetCommand(Configuration conf, CommandLine cmdline) {\n      super(conf);\n      this.cmdline = cmdline;\n    }\n    @Override\n    public void execute() throws IOException {\n      // Command-line must have at least one element\n      if (cmdline == null || cmdline.getArgs() == null || cmdline.getArgs().length < 2) {\n        printUsage();\n        throw new IOException(INCORRECT_USAGE);\n      }\n      String[] args = cmdline.getArgs();\n      String cmdStr = args[1];\n      BackupCommand cmd = getCommand(cmdStr);\n      switch (cmd) {\n        case SET_ADD:\n          processSetAdd(args);\n          break;\n        case SET_REMOVE:\n          processSetRemove(args);\n          break;\n        case SET_DELETE:\n          processSetDelete(args);\n          break;\n        case SET_DESCRIBE:\n          processSetDescribe(args);\n          break;\n        case SET_LIST:\n          processSetList(args);\n          break;\n        default:\n          break;\n      }\n    }\n    private void processSetList(String[] args) throws IOException {\n      super.execute();\n      // List all backup set names\n      // does not expect any args\n      try (BackupAdminImpl admin = new BackupAdminImpl(conn)) {\n        List<BackupSet> list = admin.listBackupSets();\n        for (BackupSet bs : list) {\n          System.out.println(bs);\n        }\n      }\n    }\n    private void processSetDescribe(String[] args) throws IOException {\n      if (args == null || args.length != 3) {\n        printUsage();\n        throw new IOException(INCORRECT_USAGE);\n      }\n      super.execute();\n      String setName = args[2];\n      try (final BackupSystemTable sysTable = new BackupSystemTable(conn)) {\n        List<TableName> tables = sysTable.describeBackupSet(setName);\n        BackupSet set = tables == null ? null : new BackupSet(setName, tables);\n        if (set == null) {\n          System.out.println(\"Set '\" + setName + \"' does not exist.\");\n        } else {\n          System.out.println(set);\n        }\n      }\n    }\n    private void processSetDelete(String[] args) throws IOException {\n      if (args == null || args.length != 3) {\n        printUsage();\n        throw new IOException(INCORRECT_USAGE);\n      }\n      super.execute();\n      String setName = args[2];\n      try (final BackupAdminImpl admin = new BackupAdminImpl(conn)) {\n        boolean result = admin.deleteBackupSet(setName);\n        if (result) {\n          System.out.println(\"Delete set \" + setName + \" OK.\");\n        } else {\n          System.out.println(\"Set \" + setName + \" does not exist\");\n        }\n      }\n    }\n    private void processSetRemove(String[] args) throws IOException {\n      if (args == null || args.length != 4) {\n        printUsage();\n        throw new IOException(INCORRECT_USAGE);\n      }\n      super.execute();\n      String setName = args[2];\n      String[] tables = args[3].split(\",\");\n      TableName[] tableNames = toTableNames(tables);\n      try (final BackupAdminImpl admin = new BackupAdminImpl(conn)) {\n        admin.removeFromBackupSet(setName, tableNames);\n      }\n    }\n    private TableName[] toTableNames(String[] tables) {\n      TableName[] arr = new TableName[tables.length];\n      for (int i = 0; i < tables.length; i++) {\n        arr[i] = TableName.valueOf(tables[i]);\n      }\n      return arr;\n    }\n    private void processSetAdd(String[] args) throws IOException {\n      if (args == null || args.length != 4) {\n        printUsage();\n        throw new IOException(INCORRECT_USAGE);\n      }\n      super.execute();\n      String setName = args[2];\n      String[] tables = args[3].split(\",\");\n      TableName[] tableNames = new TableName[tables.length];\n      for (int i = 0; i < tables.length; i++) {\n        tableNames[i] = TableName.valueOf(tables[i]);\n      }\n      try (final BackupAdminImpl admin = new BackupAdminImpl(conn)) {\n        admin.addToBackupSet(setName, tableNames);\n      }\n    }\n<fim_suffix>    private BackupCommand getCommand(String cmdStr) throws IOException {\n      switch (cmdStr) {\n        case SET_ADD_CMD:\n          return BackupCommand.SET_ADD;\n        case SET_REMOVE_CMD:\n          return BackupCommand.SET_REMOVE;\n        case SET_DELETE_CMD:\n          return BackupCommand.SET_DELETE;\n        case SET_DESCRIBE_CMD:\n          return BackupCommand.SET_DESCRIBE;\n        case SET_LIST_CMD:\n          return BackupCommand.SET_LIST;\n        default:\n          System.out.println(\"ERROR: Unknown command for 'set' :\" + cmdStr);\n          printUsage();\n          throw new IOException(INCORRECT_USAGE);\n      }\n    }<fim_middle>// function below has no smell\n"}