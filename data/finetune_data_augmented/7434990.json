{"text": "<fim_prefix>/*\n * Copyright (c) 2013, 2017, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.svm.jline.subst;\n\n// Checkstyle: stop\nimport java.io.IOException;\nimport java.util.function.BooleanSupplier;\n\nimport org.graalvm.nativeimage.Feature;\nimport org.graalvm.nativeimage.ImageSingletons;\n\nimport com.oracle.svm.core.annotate.Alias;\nimport com.oracle.svm.core.annotate.AutomaticFeature;\nimport com.oracle.svm.core.annotate.Substitute;\nimport com.oracle.svm.core.annotate.TargetClass;\n\nimport jline.Terminal;\nimport jline.Terminal2;\nimport jline.UnixTerminal;\nimport jline.UnsupportedTerminal;\nimport jline.internal.Log;\nimport sun.misc.Signal;\nimport sun.misc.SignalHandler;\n//Checkstyle: resume\n\n@AutomaticFeature\nfinal class JLineFeature implements Feature {\n\n    static final class IsEnabled implements BooleanSupplier {\n        @Override\n        public boolean getAsBoolean() {\n            return ImageSingletons.contains(JLineFeature.class);\n        }\n    }\n\n    @Override\n    public boolean isInConfiguration(IsInConfigurationAccess access) {\n        return access.findClassByName(\"jline.console.ConsoleReader\") != null;\n    }\n}\n\n<fim_suffix>@TargetClass(className = \"jline.TerminalFactory\", onlyWith = JLineFeature.IsEnabled.class)\nfinal class Target_jline_TerminalFactory {\n\n    @SuppressWarnings(\"unused\")\n    @Substitute\n    public static Terminal create(String ttyDevice) {\n        Terminal t;\n        try {\n            t = new UnixTerminal();\n            t.init();\n        } catch (Exception e) {\n            Log.error(\"Failed to construct terminal; falling back to UnsupportedTerminal\", e);\n            t = new UnsupportedTerminal();\n        }\n\n        Log.debug(\"Created Terminal: \", t);\n\n        return t;\n    }\n}\n\n@TargetClass(className = \"jline.console.ConsoleReader\", onlyWith = JLineFeature.IsEnabled.class)\nfinal class Target_jline_console_ConsoleReader {\n\n    @Alias Terminal2 terminal;\n\n    @Alias\n    native void drawLine() throws IOException;\n\n    @Alias\n    native void flush() throws IOException;\n\n    @Substitute\n    private void setupSigCont() {\n        SignalHandler signalHandler = new SignalHandler() {\n            @Override\n            public void handle(Signal arg0) {\n                /* Original implementation calls this code using reflection. */\n                try {\n                    terminal.init();\n                    drawLine();\n                    flush();\n                } catch (Throwable e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n        Signal.handle(new Signal(\"CONT\"), signalHandler);\n    }\n}\n\n@TargetClass(className = \"jline.internal.TerminalLineSettings\", onlyWith = JLineFeature.IsEnabled.class)\nfinal class Target_jline_internal_TerminalLineSettings {\n    @Substitute\n    private static ProcessBuilder inheritInput(ProcessBuilder pb) throws Exception {\n        /* Original implementation calls this method using reflection. */\n        pb.redirectInput(ProcessBuilder.Redirect.INHERIT);\n        return pb;\n    }\n}\n\npublic final class JLineSubstitutions {\n}<fim_middle>// class below has no smell\n"}