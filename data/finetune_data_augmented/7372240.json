{"text": "<fim_prefix>\n<fim_suffix>public abstract class EndpointDiscoverer<E extends ExposableEndpoint<O>, O extends Operation>\n\t\timplements EndpointsSupplier<E> {\n\tprivate final ApplicationContext applicationContext;\n\tprivate final Collection<EndpointFilter<E>> filters;\n\tprivate final DiscoveredOperationsFactory<O> operationsFactory;\n\tprivate final Map<EndpointBean, E> filterEndpoints = new ConcurrentHashMap<>();\n\tprivate volatile Collection<E> endpoints;\n\t/**\n\t * Create a new {@link EndpointDiscoverer} instance.\n\t * @param applicationContext the source application context\n\t * @param parameterValueMapper the parameter value mapper\n\t * @param invokerAdvisors invoker advisors to apply\n\t * @param filters filters to apply\n\t */\n\tpublic EndpointDiscoverer(ApplicationContext applicationContext,\n\t\t\tParameterValueMapper parameterValueMapper,\n\t\t\tCollection<OperationInvokerAdvisor> invokerAdvisors,\n\t\t\tCollection<EndpointFilter<E>> filters) {\n\t\tAssert.notNull(applicationContext, \"ApplicationContext must not be null\");\n\t\tAssert.notNull(parameterValueMapper, \"ParameterValueMapper must not be null\");\n\t\tAssert.notNull(invokerAdvisors, \"InvokerAdvisors must not be null\");\n\t\tAssert.notNull(filters, \"Filters must not be null\");\n\t\tthis.applicationContext = applicationContext;\n\t\tthis.filters = Collections.unmodifiableCollection(filters);\n\t\tthis.operationsFactory = getOperationsFactory(parameterValueMapper,\n\t\t\t\tinvokerAdvisors);\n\t}\n\tprivate DiscoveredOperationsFactory<O> getOperationsFactory(\n\t\t\tParameterValueMapper parameterValueMapper,\n\t\t\tCollection<OperationInvokerAdvisor> invokerAdvisors) {\n\t\treturn new DiscoveredOperationsFactory<O>(parameterValueMapper, invokerAdvisors) {\n\t\t\t@Override\n\t\t\tprotected O createOperation(EndpointId endpointId,\n\t\t\t\t\tDiscoveredOperationMethod operationMethod, OperationInvoker invoker) {\n\t\t\t\treturn EndpointDiscoverer.this.createOperation(endpointId,\n\t\t\t\t\t\toperationMethod, invoker);\n\t\t\t}\n\t\t};\n\t}\n\t@Override\n\tpublic final Collection<E> getEndpoints() {\n\t\tif (this.endpoints == null) {\n\t\t\tthis.endpoints = discoverEndpoints();\n\t\t}\n\t\treturn this.endpoints;\n\t}\n\tprivate Collection<E> discoverEndpoints() {\n\t\tCollection<EndpointBean> endpointBeans = createEndpointBeans();\n\t\taddExtensionBeans(endpointBeans);\n\t\treturn convertToEndpoints(endpointBeans);\n\t}\n\tprivate Collection<EndpointBean> createEndpointBeans() {\n\t\tMap<EndpointId, EndpointBean> byId = new LinkedHashMap<>();\n\t\tString[] beanNames = BeanFactoryUtils.beanNamesForAnnotationIncludingAncestors(\n\t\t\t\tthis.applicationContext, Endpoint.class);\n\t\tfor (String beanName : beanNames) {\n\t\t\tif (!ScopedProxyUtils.isScopedTarget(beanName)) {\n\t\t\t\tEndpointBean endpointBean = createEndpointBean(beanName);\n\t\t\t\tEndpointBean previous = byId.putIfAbsent(endpointBean.getId(),\n\t\t\t\t\t\tendpointBean);\n\t\t\t\tAssert.state(previous == null,\n\t\t\t\t\t\t() -> \"Found two endpoints with the id '\" + endpointBean.getId()\n\t\t\t\t\t\t\t\t+ \"': '\" + endpointBean.getBeanName() + \"' and '\"\n\t\t\t\t\t\t\t\t+ previous.getBeanName() + \"'\");\n\t\t\t}\n\t\t}\n\t\treturn byId.values();\n\t}\n\tprivate EndpointBean createEndpointBean(String beanName) {\n\t\tObject bean = this.applicationContext.getBean(beanName);\n\t\treturn new EndpointBean(beanName, bean);\n\t}\n\tprivate void addExtensionBeans(Collection<EndpointBean> endpointBeans) {\n\t\tMap<EndpointId, EndpointBean> byId = endpointBeans.stream()\n\t\t\t\t.collect(Collectors.toMap(EndpointBean::getId, Function.identity()));\n\t\tString[] beanNames = BeanFactoryUtils.beanNamesForAnnotationIncludingAncestors(\n\t\t\t\tthis.applicationContext, EndpointExtension.class);\n\t\tfor (String beanName : beanNames) {\n\t\t\tExtensionBean extensionBean = createExtensionBean(beanName);\n\t\t\tEndpointBean endpointBean = byId.get(extensionBean.getEndpointId());\n\t\t\tAssert.state(endpointBean != null,\n\t\t\t\t\t() -> (\"Invalid extension '\" + extensionBean.getBeanName()\n\t\t\t\t\t\t\t+ \"': no endpoint found with id '\"\n\t\t\t\t\t\t\t+ extensionBean.getEndpointId() + \"'\"));\n\t\t\taddExtensionBean(endpointBean, extensionBean);\n\t\t}\n\t}\n\tprivate ExtensionBean createExtensionBean(String beanName) {\n\t\tObject bean = this.applicationContext.getBean(beanName);\n\t\treturn new ExtensionBean(beanName, bean);\n\t}\n\tprivate void addExtensionBean(EndpointBean endpointBean,\n\t\t\tExtensionBean extensionBean) {\n\t\tif (isExtensionExposed(endpointBean, extensionBean)) {\n\t\t\tAssert.state(\n\t\t\t\t\tisEndpointExposed(endpointBean) || isEndpointFiltered(endpointBean),\n\t\t\t\t\t() -> \"Endpoint bean '\" + endpointBean.getBeanName()\n\t\t\t\t\t\t\t+ \"' cannot support the extension bean '\"\n\t\t\t\t\t\t\t+ extensionBean.getBeanName() + \"'\");\n\t\t\tendpointBean.addExtension(extensionBean);\n\t\t}\n\t}\n\tprivate Collection<E> convertToEndpoints(Collection<EndpointBean> endpointBeans) {\n\t\tSet<E> endpoints = new LinkedHashSet<>();\n\t\tfor (EndpointBean endpointBean : endpointBeans) {\n\t\t\tif (isEndpointExposed(endpointBean)) {\n\t\t\t\tendpoints.add(convertToEndpoint(endpointBean));\n\t\t\t}\n\t\t}\n\t\treturn Collections.unmodifiableSet(endpoints);\n\t}\n\tprivate E convertToEndpoint(EndpointBean endpointBean) {\n\t\tMultiValueMap<OperationKey, O> indexed = new LinkedMultiValueMap<>();\n\t\tEndpointId id = endpointBean.getId();\n\t\taddOperations(indexed, id, endpointBean.getBean(), false);\n\t\tif (endpointBean.getExtensions().size() > 1) {\n\t\t\tString extensionBeans = endpointBean.getExtensions().stream()\n\t\t\t\t\t.map(ExtensionBean::getBeanName).collect(Collectors.joining(\", \"));\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Found multiple extensions for the endpoint bean \"\n\t\t\t\t\t\t\t+ endpointBean.getBeanName() + \" (\" + extensionBeans + \")\");\n\t\t}\n\t\tfor (ExtensionBean extensionBean : endpointBean.getExtensions()) {\n\t\t\taddOperations(indexed, id, extensionBean.getBean(), true);\n\t\t}\n\t\tassertNoDuplicateOperations(endpointBean, indexed);\n\t\tList<O> operations = indexed.values().stream().map(this::getLast)\n\t\t\t\t.filter(Objects::nonNull).collect(Collectors.collectingAndThen(\n\t\t\t\t\t\tCollectors.toList(), Collections::unmodifiableList));\n\t\treturn createEndpoint(endpointBean.getBean(), id,\n\t\t\t\tendpointBean.isEnabledByDefault(), operations);\n\t}\n\tprivate void addOperations(MultiValueMap<OperationKey, O> indexed, EndpointId id,\n\t\t\tObject target, boolean replaceLast) {\n\t\tSet<OperationKey> replacedLast = new HashSet<>();\n\t\tCollection<O> operations = this.operationsFactory.createOperations(id, target);\n\t\tfor (O operation : operations) {\n\t\t\tOperationKey key = createOperationKey(operation);\n\t\t\tO last = getLast(indexed.get(key));\n\t\t\tif (replaceLast && replacedLast.add(key) && last != null) {\n\t\t\t\tindexed.get(key).remove(last);\n\t\t\t}\n\t\t\tindexed.add(key, operation);\n\t\t}\n\t}\n\tprivate <T> T getLast(List<T> list) {\n\t\treturn CollectionUtils.isEmpty(list) ? null : list.get(list.size() - 1);\n\t}\n\tprivate void assertNoDuplicateOperations(EndpointBean endpointBean,\n\t\t\tMultiValueMap<OperationKey, O> indexed) {\n\t\tList<OperationKey> duplicates = indexed.entrySet().stream()\n\t\t\t\t.filter((entry) -> entry.getValue().size() > 1).map(Map.Entry::getKey)\n\t\t\t\t.collect(Collectors.toList());\n\t\tif (!duplicates.isEmpty()) {\n\t\t\tSet<ExtensionBean> extensions = endpointBean.getExtensions();\n\t\t\tString extensionBeanNames = extensions.stream()\n\t\t\t\t\t.map(ExtensionBean::getBeanName).collect(Collectors.joining(\", \"));\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Unable to map duplicate endpoint operations: \"\n\t\t\t\t\t\t\t+ duplicates.toString() + \" to \" + endpointBean.getBeanName()\n\t\t\t\t\t\t\t+ (extensions.isEmpty() ? \"\"\n\t\t\t\t\t\t\t\t\t: \" (\" + extensionBeanNames + \")\"));\n\t\t}\n\t}\n\tprivate boolean isExtensionExposed(EndpointBean endpointBean,\n\t\t\tExtensionBean extensionBean) {\n\t\treturn isFilterMatch(extensionBean.getFilter(), endpointBean)<fim_middle>// class below is blob\n"}