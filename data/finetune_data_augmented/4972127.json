{"text": "<fim_prefix>// ***************************************************************************************************************************\n// * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file *\n// * distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file        *\n// * to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance            *\n// * with the License.  You may obtain a copy of the License at                                                              *\n// *                                                                                                                         *\n// *  http://www.apache.org/licenses/LICENSE-2.0                                                                             *\n// *                                                                                                                         *\n// * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an  *\n// * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the        *\n// * specific language governing permissions and limitations under the License.                                              *\n// ***************************************************************************************************************************\npackage org.apache.juneau.annotation;\n\nimport java.lang.annotation.*;\n\nimport org.apache.juneau.*;\nimport org.apache.juneau.reflection.*;\n\n/**\n * Defines an invalid usage of an annotation.\n *\n */\n<fim_suffix>public class InvalidAnnotationException extends FormattedRuntimeException {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param message Message.\n\t * @param args Arguments.\n\t */\n\tpublic InvalidAnnotationException(String message, Object...args) {\n\t\tsuper(message, args);\n\t}\n\n\t/**\n\t * Throws an {@link InvalidAnnotationException} if the specified method contains any of the specified annotations.\n\t *\n\t * @param m The method to check.\n\t * @param a The annotations to check for.\n\t * @throws InvalidAnnotationException\n\t */\n\t@SafeVarargs\n\tpublic static void assertNoInvalidAnnotations(MethodInfo m, Class<? extends Annotation>...a) throws InvalidAnnotationException {\n\t\tAnnotation aa = m.getAnnotation(a);\n\t\tif (aa != null)\n\t\t\tthrow new InvalidAnnotationException(\"@{0} annotation cannot be used in a @{1} bean.  Method=''{2}''\", aa.getClass().getSimpleName(), m.getDeclaringClass().getSimpleName(), m);\n\t}\n}<fim_middle>// class below has no smell\n"}