{"text": "<fim_prefix>/**\n * Copyright (c) 2015 Bosch Software Innovations GmbH and others.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n */\npackage org.eclipse.hawkbit.repository;\n\nimport java.util.Arrays;\nimport java.util.EnumSet;\nimport java.util.Optional;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\n/**\n * Collection of regular expression characters to check strings\n */\npublic class RegexCharacterCollection {\n\n    private final EnumSet<RegexChar> characters;\n    private final Pattern findAnyCharacter;\n\n    public RegexCharacterCollection(final RegexChar... characters) {\n        this.characters = EnumSet.copyOf(Arrays.asList(characters));\n        this.findAnyCharacter = getPatternFindAnyCharacter();\n    }\n\n    public static boolean stringContainsCharacter(final String stringToCheck,\n            final RegexCharacterCollection regexCharacterCollection) {\n        return regexCharacterCollection.findAnyCharacter.matcher(stringToCheck).matches();\n    }\n\n<fim_suffix>    private Pattern getPatternFindAnyCharacter() {\n        final String regexCharacters = characters.stream().map(RegexChar::getRegExp)\n                .collect(Collectors.joining());\n        final String regularExpression = String.format(\".*[%s]+.*\", regexCharacters);\n        return Pattern.compile(regularExpression);\n    }\n\n    public enum RegexChar {\n        WHITESPACE(\"\\\\s\", \"character.whitespace\"), DIGITS(\"0-9\", \"character.digits\"), QUOTATION_MARKS(\"'\\\"\",\n                \"character.quotationMarks\"), SLASHES(\"\\\\/\\\\\\\\\", \"character.slashes\"), GREATER_THAN(\n                        \">\"), LESS_THAN(\"<\"), EQUALS_SYMBOL(\"=\"), EXCLAMATION_MARK(\"!\"), QUESTION_MARK(\"?\"), COLON(\":\");\n\n        private final String regExp;\n        private final String l18nReferenceDescription;\n\n        RegexChar(final String character) {\n            this(character, null);\n        }\n    \n        RegexChar(final String regExp, final String l18nReferenceDescription) {\n            this.regExp = regExp;\n            this.l18nReferenceDescription = l18nReferenceDescription;\n        }\n\n        public String getRegExp() {\n            return regExp;\n        }\n\n        public Optional<String> getL18nReferenceDescription() {\n            return Optional.ofNullable(l18nReferenceDescription);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}