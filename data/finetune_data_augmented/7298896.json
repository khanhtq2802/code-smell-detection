{"text": "<fim_prefix> * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.amqp.rabbit.core;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.stream.Collectors;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.amqp.AmqpException;\nimport org.springframework.amqp.core.AmqpAdmin;\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.Declarable;\nimport org.springframework.amqp.core.Declarables;\nimport org.springframework.amqp.core.Exchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory.CacheMode;\nimport org.springframework.amqp.rabbit.connection.ChannelProxy;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.beans.factory.BeanNameAware;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ApplicationEventPublisher;\nimport org.springframework.context.ApplicationEventPublisherAware;\nimport org.springframework.core.task.SimpleAsyncTaskExecutor;\nimport org.springframework.core.task.TaskExecutor;\nimport org.springframework.jmx.export.annotation.ManagedOperation;\nimport org.springframework.jmx.export.annotation.ManagedResource;\nimport org.springframework.lang.Nullable;\nimport org.springframework.retry.backoff.ExponentialBackOffPolicy;\nimport org.springframework.retry.policy.SimpleRetryPolicy;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\nimport com.rabbitmq.client.AMQP.Queue.DeclareOk;\nimport com.rabbitmq.client.AMQP.Queue.PurgeOk;\nimport com.rabbitmq.client.Channel;\n/**\n * RabbitMQ implementation of portable AMQP administrative operations for AMQP &gt;= 0.9.1.\n *\n * @author Mark Pollack\n * @author Mark Fisher\n * @author Dave Syer\n * @author Ed Scriven\n * @author Gary Russell\n * @author Artem Bilan\n */\n@ManagedResource(description = \"Admin Tasks\")\npublic class RabbitAdmin implements AmqpAdmin, ApplicationContextAware, ApplicationEventPublisherAware,\n\t\tBeanNameAware, InitializingBean {\n\tprivate static final int DECLARE_MAX_ATTEMPTS = 5;\n\tprivate static final int DECLARE_INITIAL_RETRY_INTERVAL = 1000;\n\tprivate static final int DECLARE_MAX_RETRY_INTERVAL = 5000;\n\tprivate static final double DECLARE_RETRY_MULTIPLIER = 2.0;\n\t/**\n\t * The default exchange name.\n\t */\n\tpublic static final String DEFAULT_EXCHANGE_NAME = \"\";\n\t/**\n\t * Property key for the queue name in the {@link Properties} returned by\n\t * {@link #getQueueProperties(String)}.\n\t */\n\tpublic static final Object QUEUE_NAME = \"QUEUE_NAME\";\n\t/**\n\t * Property key for the message count in the {@link Properties} returned by\n\t * {@link #getQueueProperties(String)}.\n\t */\n\tpublic static final Object QUEUE_MESSAGE_COUNT = \"QUEUE_MESSAGE_COUNT\";\n\t/**\n\t * Property key for the consumer count in the {@link Properties} returned by\n\t * {@link #getQueueProperties(String)}.\n\t */\n\tpublic static final Object QUEUE_CONSUMER_COUNT = \"QUEUE_CONSUMER_COUNT\";\n\tprivate static final String DELAYED_MESSAGE_EXCHANGE = \"x-delayed-message\";\n\t/** Logger available to subclasses. */\n\tprotected final Log logger = LogFactory.getLog(getClass()); // NOSONAR\n\tprivate final RabbitTemplate rabbitTemplate;\n\tprivate final Object lifecycleMonitor = new Object();\n\tprivate final ConnectionFactory connectionFactory;\n\tprivate String beanName;\n\tprivate RetryTemplate retryTemplate;\n\tprivate boolean retryDisabled;\n\tprivate boolean autoStartup = true;\n\tprivate ApplicationContext applicationContext;\n\tprivate boolean ignoreDeclarationExceptions;\n\tprivate ApplicationEventPublisher applicationEventPublisher;\n\tprivate boolean declareCollections = false;\n\tprivate TaskExecutor taskExecutor = new SimpleAsyncTaskExecutor();\n\tprivate volatile boolean running = false;\n\tprivate volatile DeclarationExceptionEvent lastDeclarationExceptionEvent;\n\t/**\n\t * Construct an instance using the provided {@link ConnectionFactory}.\n\t * @param connectionFactory the connection factory - must not be null.\n\t */\n\tpublic RabbitAdmin(ConnectionFactory connectionFactory) {\n\t\tAssert.notNull(connectionFactory, \"ConnectionFactory must not be null\");\n\t\tthis.connectionFactory = connectionFactory;\n\t\tthis.rabbitTemplate = new RabbitTemplate(connectionFactory);\n\t}\n\t/**\n\t * Construct an instance using the provided {@link RabbitTemplate}. Use this\n\t * constructor when, for example, you want the admin operations to be performed within\n\t * the scope of the provided template's {@code invoke()} method.\n\t * @param rabbitTemplate the template - must not be null and must have a connection\n\t * factory.\n\t * @since 2.0\n\t */\n\tpublic RabbitAdmin(RabbitTemplate rabbitTemplate) {\n\t\tAssert.notNull(rabbitTemplate, \"RabbitTemplate must not be null\");\n\t\tAssert.notNull(rabbitTemplate.getConnectionFactory(), \"RabbitTemplate's ConnectionFactory must not be null\");\n\t\tthis.connectionFactory = rabbitTemplate.getConnectionFactory();\n\t\tthis.rabbitTemplate = rabbitTemplate;\n\t}\n\tpublic void setAutoStartup(boolean autoStartup) {\n\t\tthis.autoStartup = autoStartup;\n\t}\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\t@Override\n\tpublic void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {\n\t\tthis.applicationEventPublisher = applicationEventPublisher;\n\t}\n\tpublic void setIgnoreDeclarationExceptions(boolean ignoreDeclarationExceptions) {\n\t\tthis.ignoreDeclarationExceptions = ignoreDeclarationExceptions;\n\t}\n\t/**\n\t * Set to false to disable declaring collections of {@link Declarable}.\n\t * Since the admin has to iterate over all Collection beans, this may\n\t * cause undesirable side-effects in some cases. Default true.\n\t * @param declareCollections set to false to prevent declarations of collections.\n\t * @since 1.7.7\n\t * @deprecated - users should use {@link Declarables} beans instead of collections of\n\t * {@link Declarable}.\n\t */\n\t@Deprecated\n\tpublic void setDeclareCollections(boolean declareCollections) {\n\t\tthis.declareCollections = declareCollections;\n\t}\n\t/**\n\t * @return the last {@link DeclarationExceptionEvent} that was detected in this admin.\n\t *\n\t * @since 1.6\n\t */\n\tpublic DeclarationExceptionEvent getLastDeclarationExceptionEvent() {\n\t\treturn this.lastDeclarationExceptionEvent;\n\t}\n\t/**\n\t * Set a task executor to use for async operations. Currently only used\n\t * with {@link #purgeQueue(String, boolean)}.\n\t * @param taskExecutor the executor to use.\n\t * @since 2.1\n\t */\n\tpublic void setTaskExecutor(TaskExecutor taskExecutor) {\n\t\tAssert.notNull(taskExecutor, \"'taskExecutor' cannot be null\");\n\t\tthis.taskExecutor = taskExecutor;\n\t}\n\tpublic RabbitTemplate getRabbitTemplate() {\n\t\treturn this.rabbitTemplate;\n\t}\n\t// Exchange operations\n<fim_suffix>\t@Override\n\tpublic void declareExchange(final Exchange exchange) {\n\t\ttry {\n\t\t\tthis.rabbitTemplate.execute(channel -> {\n\t\t\t\tdeclareExchanges(channel, exchange);\n\t\t\t\treturn null;\n\t\t\t});\n\t\t}\n\t\tcatch (AmqpException e) {\n\t\t\tlogOrRethrowDeclarationException(exchange, \"exchange\", e);\n\t\t}\n\t}<fim_middle>// function below has no smell\n"}