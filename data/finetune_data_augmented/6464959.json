{"text": "<fim_prefix>\t\t\"not in remembered set, new object reference\", /* J9MODRON_GCCHK_RC_REMEMBERED_SET_OLD_OBJECT (20) */\n\t\t\"pool and puddle newstore flag mismatch\", /* J9MODRON_GCCHK_RC_PUDDLE_POOL_NEWSTORE_MISMATCH (21) */\n\t\t\"puddle newstore flag invalid\", /* J9MODRON_GCCHK_RC_PUDDLE_INVALID_NEWSTORE_FLAGS (22) */\n\t\t\"heap object has remembered bit set when cardtable active\", /* J9MODRON_GCCHK_RC_HEAP_OBJECT_REMEMBERED (23) */\n\t\t\"new pointer in old object without card dirtied\", /* J9MODRON_GCCHK_RC_NEW_POINTER_NOT_REMEMBERED_IN_CARD_TABLE (24) */\n\t\t\"dead object\", /* J9MODRON_GCCHK_RC_DEAD_OBJECT (25) */\n\t\t\"class header invalid\", /* J9MODRON_GCCHK_RC_J9CLASS_HEADER_INVALID (26) */\n\t\t\"class object not java.lang.Class\", /* J9MODRON_GCCHK_RC_CLASS_OBJECT_NOT_JLCLASS (27) */\n\t\t\"scope internal pointer refers outside its scope\", /* J9MODRON_GCCHK_RC_INTERNAL_POINTER_NOT_IN_SCOPE (28) */\n\t\t\"class pointer is in an undead class segment\", /* J9MODRON_GCCHK_RC_CLASS_IS_UNDEAD (29) */\n\t\t\"class ramStatics field points to wrong object\", /* J9MODRON_GCCHK_RC_CLASS_STATICS_FIELD_POINTS_WRONG_OBJECT (30) */\n\t\t\"class ramStatics must be NULL for hot swapped class\", /* J9MODRON_GCCHK_RC_CLASS_HOT_SWAPPED_POINTS_TO_STATICS (31) */\n\t\t\"class ramStatics field points to object but out of GC scan range\", /* J9MODRON_GCCHK_RC_CLASS_STATICS_REFERENCE_IS_NOT_IN_SCANNING_RANGE (32)*/\n\t\t\"class ramStatics number of references not equal specified in ROM class\", /* J9MODRON_GCCHK_RC_CLASS_STATICS_WRONG_NUMBER_OF_REFERENCES (33) */\t\n\t\t\"obsolete code 34\", /* obsolete code (34) */\n\t\t\"obsolete code 35\", /* obsolete code (35) */\n\t\t\"obsolete code 36\", /* obsolete code (36) */\n\t\t\"obsolete code 37\", /* obsolete code (37) */\n\t\t\"class object not a subclass of java.util.concurrent.locks.AbstractOwnableSynchronizer\", /* J9MODRON_GCCHK_RC_OWNABLE_SYNCHRONIZER_INVALID_CLASS (38) */\n\t\t\"array class can not be hot swapped\", /* J9MODRON_GCCHK_RC_CLASS_HOT_SWAPPED_FOR_ARRAY (39) */\n\t\t\"replaced class has no hot swapped out flag set\", /* J9MODRON_GCCHK_RC_REPLACED_CLASS_HAS_NO_HOTSWAP_FLAG (40) */\n\t\t\"object slot appears to contain a J9Class pointer\", /* J9MODRON_GCCHK_RC_OBJECT_SLOT_POINTS_TO_J9CLASS (41) */\n\t\t\"Ownable Synchronizer Object is not attached to the list\", /* J9MODRON_GCCHK_OWNABLE_SYNCHRONIZER_OBJECT_IS_NOT_ATTACHED_TO_THE_LIST (42) */\n\t\t\"Ownable Synchronizer List has a circular reference\", /* J9MODRON_GCCHK_OWNABLE_SYNCHRONIZER_LIST_HAS_CIRCULAR_REFERENCE (43) */\n\t\t\"hole size is not aligned\", /* J9MODRON_GCCHK_RC_DEAD_OBJECT_SIZE_NOT_ALIGNED (44) */\n\t\t\"hole next is not a hole\", /* J9MODRON_GCCHK_RC_DEAD_OBJECT_NEXT_IS_NOT_HOLE (45) */\n\t\t\"hole next is outside of current region\", /* J9MODRON_GCCHK_RC_DEAD_OBJECT_NEXT_IS_NOT_IN_REGION (46) */\n\t\t\"hole next is pointed inside of the hole\", /* J9MODRON_GCCHK_RC_DEAD_OBJECT_NEXT_IS_POINTED_INSIDE (47) */\n\t\t\"class is unloaded\", /* J9MODRON_GCCHK_RC_CLASS_IS_UNLOADED (48)*/\n\t\t\"reversed forwarded pointed outside evacuate\", /* J9MODRON_GCCHK_RC_REVERSED_FORWARDED_OUTSIDE_EVACUATE (49) */\n\t};\n\tpublic CheckReporterTTY(PrintStream out)\n\t{\n\t\tthis.out = out;\n\t}\n\tpublic CheckReporterTTY()\n\t{\n\t\tthis(System.out);\n\t}\n\t@Override\n\tpublic void report(CheckError error)\n\t{\n\t\tif(!shouldReport(error)) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\t/* If slot is NULL, we are not scanning the slots of an object, but looking directly at an object/class on the heap. */\n\t\t\tif((error._slot != null) && (error._slot.notNull())) {\n\t\t\t\tVoidPointer slot = error._slot;\n\t\t\t\tUDATA slotValue;\n\t\t\t\tswitch(error._objectType)\n\t\t\t\t{\n\t\t\t\t\tcase check_type_object:\n\t\t\t\t\t\tJ9ObjectPointer fieldValue = ObjectReferencePointer.cast(slot).at(0);\n\t\t\t\t\t\tslotValue = UDATA.cast(fieldValue);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase check_type_thread:\n\t\t\t\t\t\tslotValue = UDATAPointer.cast(slot).at(0);\n\t\t\t\t\t\tslot = error._stackLocation;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase check_type_unfinalized:\n\t\t\t\t\t\t// In this case, there isn't really a \"slot\", only the value\n\t\t\t\t\t\t// TODO kmt : This probably shouldn't use the object(offset) format.  \n\t\t\t\t\t\tslotValue = UDATA.cast(slot);\n\t\t\t\t\t\tslot = VoidPointer.NULL;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tslotValue = UDATAPointer.cast(slot).at(0);\n\t\t\t\t}\n\t\t\t\tout.println(String.format(\"  <gc check (%d): %s: %s: %sslot %x(%x) -> %x: %s>\", error._errorNumber, \"from debugger\", error._check.getCheckName(), error._elementName, error._object.getAddress(), slot.getAddress(), slotValue.longValue(), getErrorType(error._errorCode)));\n\t\t\t} else {\n\t\t\t\tout.println(String.format(\"  <gc check (%d): %s: %s: %s%x: %s>\", error._errorNumber, \"from debugger\", error._check.getCheckName(), error._elementName, error._object.getAddress(), getErrorType(error._errorCode)));\n\t\t\t\t/* If the basic checks have been made (alignment, etc.) display header info. */\n\t\t\t\tif (error._objectType == check_type_object) {\n\t\t\t\t\treportObjectHeader(error, J9ObjectPointer.cast(error._object), \"\");\n\t\t\t\t}\t\n\t\t\t}\n\t\t} catch (CorruptDataException cde) {\n\t\t\tout.println(String.format(\"  <gc check (%d): %s: %s: %s%x: %s>\", error._errorNumber, \"from debugger\", error._check.getCheckName(), error._elementName, error._object.getAddress(), getErrorType(error._errorCode)));\n\t\t}\n\t}\n\tprivate String getErrorType(int errorCode)\n\t{\n\t\tif(errorCode == J9MODRON_GCCHK_RC_CORRUPT_DATA_EXCEPTION){\n\t\t\treturn \"corrupt data exception\";\n\t\t} else {\n\t\t\treturn errorTypes[errorCode];\n\t\t}\n\t}\n<fim_suffix>\t@Override\n\tpublic void reportClass(CheckError error, J9ClassPointer clazz, String prefix)\n\t{\n\t\tString prefixString = prefix == null ? \"\" : prefix;\n\t\tif(!shouldReport(error)) {\n\t\t\treturn;\n\t\t}\t\t\n\t\tout.println(String.format(\"  <gc check (%d): %sClass %x>\", error._errorNumber, prefixString, clazz.getAddress()));\n\t}<fim_middle>// function below has no smell\n"}