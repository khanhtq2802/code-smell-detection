{"text": "<fim_prefix>/*\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n *\n * Copyright 2011 Oracle and/or its affiliates. All rights reserved.\n *\n * Oracle and Java are registered trademarks of Oracle and/or its affiliates.\n * Other names may be trademarks of their respective owners.\n *\n * The contents of this file are subject to the terms of either the GNU\n * General Public License Version 2 only (\"GPL\") or the Common\n * Development and Distribution License(\"CDDL\") (collectively, the\n * \"License\"). You may not use this file except in compliance with the\n * License. You can obtain a copy of the License at\n * http://www.netbeans.org/cddl-gplv2.html\n * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the\n * specific language governing permissions and limitations under the\n * License.  When distributing the software, include this License Header\n * Notice in each file and include the License file at\n * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the GPL Version 2 section of the License file that\n * accompanied this code. If applicable, add the following below the\n * License Header, with the fields enclosed by brackets [] replaced by\n * your own identifying information:\n * \"Portions Copyrighted [year] [name of copyright owner]\"\n *\n * If you wish your version of this file to be governed by only the CDDL\n * or only the GPL Version 2, indicate your decision by adding\n * \"[Contributor] elects to include this software in this distribution\n * under the [CDDL or GPL Version 2] license.\" If you do not indicate a\n * single choice of license, a recipient has the option to distribute\n * your version of this file under either the CDDL, the GPL Version 2 or\n * to extend the choice of license to its licensees as provided above.\n * However, if you add GPL Version 2 code and therefore, elected the GPL\n * Version 2 license, then the option applies only if the new code is\n * made subject to such option by the copyright holder.\n *\n * Contributor(s):\n *\n * Portions Copyrighted 2011 Sun Microsystems, Inc.\n */\npackage org.graalvm.visualvm.lib.profiler.spi.project;\n\nimport org.graalvm.visualvm.lib.common.SessionSettings;\nimport org.graalvm.visualvm.lib.profiler.api.JavaPlatform;\nimport org.openide.filesystems.FileObject;\n\n/**\n * Provider of support for profiling projects.\n *\n * @author Jiri Sedlacek\n */\npublic abstract class ProjectProfilingSupportProvider {\n    \n    /**\n     * Returns true if profiling a project is supported.\n     * \n     * @return true if profiling a project is supported, false otherwise\n     */\n    public abstract boolean isProfilingSupported();\n    \n    /**\n     * Returns true if attaching to a running project is supported.\n     * \n     * @return true if attaching to a running project is supported, false otherwise.\n     */\n    public abstract boolean isAttachSupported();\n    \n    /**\n     * Returns true if profiling the provided file is supported.\n     * \n     * @param fo file\n     * @return true if profiling the provided file is supported, false otherwise\n     */\n    public abstract boolean isFileObjectSupported(FileObject fo);\n    \n    /**\n     * Returns true if Profiling Points can be processed by this project.\n     * \n     * @return true if Profiling Points can be processed by this project, false otherwise.\n     */\n    public abstract boolean areProfilingPointsSupported();\n    \n    /**\n     * Returns the Java platform configured for running the project.\n     * \n     * @return Java platform configured for running the project\n     */\n    public abstract JavaPlatform getProjectJavaPlatform();\n    \n    /**\n     * Returns true if the project is configured and properly set up to be profiled (e.g. main class has a main method etc.).\n     * \n     * @param profiledClassFile profiled file or null for profiling the entire project\n     * @return true if the project is configured and properly set up to be profiled, false otherwise\n     */\n    public abstract boolean checkProjectCanBeProfiled(FileObject profiledClassFile);\n    \n    /**\n     * Configures project-specific session settings.\n     * \n     * @param ss session settings\n     */\n    public abstract void setupProjectSessionSettings(SessionSettings ss);\n    \n    /**\n     * Allows to start a profiling session directly by the ProjectProfilingSupport instance.\n     * \n     * @param profiledClassFile profiled file\n     * @param isTest true if profiledClassFile is a test, false otherwise\n     * @return true if the ProjectProfilingSupport instance started a profiling session, false otherwise\n     */\n    public abstract boolean startProfilingSession(FileObject profiledClassFile, boolean isTest);\n    \n    \n<fim_suffix>    public static class Basic extends ProjectProfilingSupportProvider {\n\n        @Override\n        public boolean isProfilingSupported() {\n            return false;\n        }\n\n        @Override\n        public boolean isAttachSupported() {\n            return false;\n        }\n\n        @Override\n        public boolean isFileObjectSupported(FileObject fo) {\n            return false;\n        }\n        \n        @Override\n        public boolean areProfilingPointsSupported() {\n            return false;\n        }\n\n        @Override\n        public JavaPlatform getProjectJavaPlatform() {\n            return null;\n        }\n\n        @Override\n        public boolean checkProjectCanBeProfiled(FileObject profiledClassFile) {\n            return true;\n        }\n\n        @Override\n        public void setupProjectSessionSettings(SessionSettings ss) {\n        }\n\n        @Override\n        public boolean startProfilingSession(FileObject profiledClassFile, boolean isTest) {\n            return false;\n        }\n        \n    }\n    \n}<fim_middle>// class below has no smell\n"}