{"text": "<fim_prefix>/****************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one   *\n * or more contributor license agreements.  See the NOTICE file *\n * distributed with this work for additional information        *\n * regarding copyright ownership.  The ASF licenses this file   *\n * to you under the Apache License, Version 2.0 (the            *\n * \"License\"); you may not use this file except in compliance   *\n * with the License.  You may obtain a copy of the License at   *\n *                                                              *\n *   http://www.apache.org/licenses/LICENSE-2.0                 *\n *                                                              *\n * Unless required by applicable law or agreed to in writing,   *\n * software distributed under the License is distributed on an  *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n * KIND, either express or implied.  See the License for the    *\n * specific language governing permissions and limitations      *\n * under the License.                                           *\n ****************************************************************/\npackage org.apache.james.modules.data;\n\nimport static org.apache.james.modules.data.JPAConfiguration.Credential.NO_CREDENTIAL;\nimport static org.apache.james.modules.data.JPAConfiguration.ReadyToBuild.NO_TEST_ON_BORROW;\nimport static org.apache.james.modules.data.JPAConfiguration.ReadyToBuild.NO_VALIDATION_QUERY;\nimport static org.apache.james.modules.data.JPAConfiguration.ReadyToBuild.NO_VALIDATION_QUERY_TIMEOUT_SEC;\n\nimport java.util.Optional;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.common.base.Preconditions;\n\npublic class JPAConfiguration {\n\n    public static class Credential {\n        private static final Logger LOGGER = LoggerFactory.getLogger(Credential.class);\n        static final Optional<Credential> NO_CREDENTIAL = Optional.empty();\n\n        public static Optional<Credential> of(String username, String password) {\n            if (StringUtils.isBlank(username) && StringUtils.isBlank(password)) {\n                LOGGER.debug(\"username and password are blank, returns no credential by default\");\n                return NO_CREDENTIAL;\n            }\n\n            return Optional.of(new Credential(username, password));\n        }\n\n        private final String username;\n        private final String password;\n\n        private Credential(String username, String password) {\n            Preconditions.checkArgument(StringUtils.isNotBlank(username) && StringUtils.isNotBlank(password),\n                \"username and password for connecting to database can't be blank\");\n            this.username = username;\n            this.password = password;\n        }\n\n<fim_suffix>        public String getUsername() {\n            return username;\n        }\n\n        public String getPassword() {\n            return password;\n        }\n    }\n\n    @FunctionalInterface\n    public interface RequireDriverName {\n        RequireDriverURL driverName(String driverName);\n    }\n\n    @FunctionalInterface\n    public interface RequireDriverURL {\n        ReadyToBuild driverURL(String driverUrl);\n    }\n\n    public static class ReadyToBuild {\n        static final Optional<Boolean> NO_TEST_ON_BORROW = Optional.empty();\n        static final Optional<Integer> NO_VALIDATION_QUERY_TIMEOUT_SEC = Optional.empty();\n        static final Optional<String> NO_VALIDATION_QUERY = Optional.empty();\n\n        private final String driverName;\n        private final String driverURL;\n\n        private Optional<Credential> credential;\n        private Optional<Boolean> testOnBorrow;\n        private Optional<Integer> validationQueryTimeoutSec;\n        private Optional<String> validationQuery;\n\n\n        private ReadyToBuild(String driverName, String driverURL, Optional<Credential> credential,\n                            Optional<Boolean> testOnBorrow, Optional<Integer> validationQueryTimeoutSec,\n                            Optional<String> validationQuery) {\n            this.driverName = driverName;\n            this.driverURL = driverURL;\n            this.credential = credential;\n            this.testOnBorrow = testOnBorrow;\n            this.validationQueryTimeoutSec = validationQueryTimeoutSec;\n            this.validationQuery = validationQuery;\n        }\n\n        public JPAConfiguration build() {\n            return new JPAConfiguration(driverName, driverURL, credential, testOnBorrow, validationQueryTimeoutSec, validationQuery);\n        }\n\n        public RequirePassword username(String username) {\n            return password -> new ReadyToBuild(driverName, driverURL, Credential.of(username, password),\n                testOnBorrow, validationQueryTimeoutSec, validationQuery);\n        }\n\n        public ReadyToBuild testOnBorrow(Boolean testOnBorrow) {\n            this.testOnBorrow = Optional.ofNullable(testOnBorrow);\n            return this;\n        }\n\n        public ReadyToBuild validationQueryTimeoutSec(Integer validationQueryTimeoutSec) {\n            this.validationQueryTimeoutSec = Optional.ofNullable(validationQueryTimeoutSec);\n            return this;\n        }\n\n        public ReadyToBuild validationQuery(String validationQuery) {\n            this.validationQuery = Optional.ofNullable(validationQuery);\n            return this;\n        }\n    }\n\n    @FunctionalInterface\n    public interface RequirePassword {\n        ReadyToBuild password(String password);\n    }\n\n    public static RequireDriverName builder() {\n        return driverName -> driverURL -> new ReadyToBuild(driverName, driverURL, NO_CREDENTIAL, NO_TEST_ON_BORROW,\n            NO_VALIDATION_QUERY_TIMEOUT_SEC, NO_VALIDATION_QUERY);\n    }\n\n    private final String driverName;\n    private final String driverURL;\n    private final Optional<Boolean> testOnBorrow;\n    private final Optional<Integer> validationQueryTimeoutSec;\n    private final Optional<Credential> credential;\n    private final Optional<String> validationQuery;\n\n    @VisibleForTesting\n    JPAConfiguration(String driverName, String driverURL, Optional<Credential> credential, Optional<Boolean> testOnBorrow,\n                     Optional<Integer> validationQueryTimeoutSec, Optional<String> validationQuery) {\n        Preconditions.checkNotNull(driverName, \"driverName cannot be null\");\n        Preconditions.checkNotNull(driverURL, \"driverURL cannot be null\");\n        validationQueryTimeoutSec.ifPresent(timeoutInSec ->\n            Preconditions.checkArgument(timeoutInSec > 0, \"validationQueryTimeoutSec is required to be greater than 0\"));\n\n        this.driverName = driverName;\n        this.driverURL = driverURL;\n        this.credential = credential;\n        this.testOnBorrow = testOnBorrow;\n        this.validationQueryTimeoutSec = validationQueryTimeoutSec;\n        this.validationQuery = validationQuery;\n    }\n\n    public String getDriverName() {\n        return driverName;\n    }\n\n    public String getDriverURL() {\n        return driverURL;\n    }\n\n    public Optional<Boolean> isTestOnBorrow() {\n        return testOnBorrow;\n    }\n\n    public Optional<Integer> getValidationQueryTimeoutSec() {\n        return validationQueryTimeoutSec;\n    }\n\n    public Optional<String> getValidationQuery() {\n        return validationQuery;\n    }\n\n    public Optional<Credential> getCredential() {\n        return credential;\n    }\n}<fim_middle>// function below has no smell\n"}