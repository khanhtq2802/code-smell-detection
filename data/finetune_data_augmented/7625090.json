{"text": "<fim_prefix>\t}\n\tpublic String getCharset(boolean checkImplicit) throws CoreException {\n\t\treturn null;\n\t}\n\tpublic String getCharsetFor(Reader reader) throws CoreException {\n\t\treturn null;\n\t}\n\tpublic IContentDescription getContentDescription() throws CoreException {\n\t\treturn null;\n\t}\n\tpublic InputStream getContents() throws CoreException {\n\t\ttry {\n\t\t\tZipFile file = new ZipFile(this.file);\n\t\t\tString cleanedEntryName = entryName;\n\t\t\tif (cleanedEntryName.length() > 1 && cleanedEntryName.charAt(0) == '/') {\n\t\t\t\tcleanedEntryName = cleanedEntryName.substring(1);\n\t\t\t}\n\t\t\tZipEntry entry = file.getEntry(cleanedEntryName);\n\t\t\tif (entry == null) {\n\t\t\t\tthrow new CoreException(SpringCore.createErrorStatus(\"Invalid path '\" + cleanedEntryName + \"'\", null));\n\t\t\t}\n\t\t\treturn InputStreamUtils.getWrappedInputStream(file, entry);\n\t\t}\t\t\t\n\t\tcatch (IOException e) {\n\t\t\tthrow new CoreException(SpringCore.createErrorStatus(e.getMessage(), e));\n\t\t}\n\t}\n\tpublic InputStream getContents(boolean force) throws CoreException {\n\t\treturn getContents();\n\t}\n\tpublic int getEncoding() throws CoreException {\n\t\treturn 0;\n\t}\n\tpublic IPath getFullPath() {\n\t\treturn new Path(getFilename());\n\t}\n\tpublic IFileState[] getHistory(IProgressMonitor monitor) throws CoreException {\n\t\treturn new IFileState[0];\n\t}\n\tpublic String getName() {\n\t\treturn entryName;\n\t}\n\tpublic boolean isReadOnly() {\n\t\treturn true;\n\t}\n\tpublic void move(IPath destination, boolean force, boolean keepHistory, IProgressMonitor monitor)\n\t\t\tthrows CoreException {\n\t\t// no-op\n\t}\n\tpublic void setCharset(String newCharset) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void setCharset(String newCharset, IProgressMonitor monitor) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void setContents(InputStream source, int updateFlags, IProgressMonitor monitor) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void setContents(IFileState source, int updateFlags, IProgressMonitor monitor) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void setContents(InputStream source, boolean force, boolean keepHistory, IProgressMonitor monitor)\n\t\t\tthrows CoreException {\n\t\t// no-op\n\t}\n\tpublic void setContents(IFileState source, boolean force, boolean keepHistory, IProgressMonitor monitor)\n\t\t\tthrows CoreException {\n\t\t// no-op\n\t}\n\tpublic void accept(IResourceVisitor visitor) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void accept(IResourceProxyVisitor visitor, int memberFlags) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void accept(IResourceVisitor visitor, int depth, boolean includePhantoms) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void accept(IResourceProxyVisitor visitor, int depth, int memberFlags) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void accept(IResourceVisitor visitor, int depth, int memberFlags) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void clearHistory(IProgressMonitor monitor) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void copy(IPath destination, boolean force, IProgressMonitor monitor) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void copy(IPath destination, int updateFlags, IProgressMonitor monitor) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void copy(IProjectDescription description, boolean force, IProgressMonitor monitor) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void copy(IProjectDescription description, int updateFlags, IProgressMonitor monitor) throws CoreException {\n\t\t// no-op\n\t}\n\t@Override\n\tpublic Resource createRelative(String relativePath) throws IOException {\n\t\tString pathToUse = StringUtils.applyRelativePath(entryName, relativePath);\n\t\treturn new EclipsePathMatchingResourcePatternResolver(project).getResource(pathToUse);\n\t}\n\tpublic IMarker createMarker(String type) throws CoreException {\n\t\tlong id = markerId.incrementAndGet();\n\t\tExternalMarker marker = new ExternalMarker(id, type, this);\n\t\tmarkers.put(id, marker);\n\t\treturn marker;\n\t}\n\tpublic IResourceProxy createProxy() {\n\t\treturn null;\n\t}\n\tpublic void delete(boolean force, IProgressMonitor monitor) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void delete(int updateFlags, IProgressMonitor monitor) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic void deleteMarkers(String type, boolean includeSubtypes, int depth) throws CoreException {\n\t\t// no-op\n\t}\n\tpublic boolean exists() {\n\t\treturn file.exists();\n\t}\n\tpublic IMarker findMarker(long id) throws CoreException {\n\t\treturn markers.get(id);\n\t}\n\tpublic IMarker[] findMarkers(String type, boolean includeSubtypes, int depth) throws CoreException {\n\t\tSet<IMarker> newMarkers = new HashSet<IMarker>();\n\t\tfor (ExternalMarker marker : this.markers.values()) {\n\t\t\tif (marker.getType().equals(type) || (includeSubtypes && marker.isSubtypeOf(type))) {\n\t\t\t\tnewMarkers.add(marker);\n\t\t\t}\n\t\t}\n\t\treturn (IMarker[]) newMarkers.toArray(new IMarker[newMarkers.size()]);\n\t}\n\tpublic int findMaxProblemSeverity(String type, boolean includeSubtypes, int depth) throws CoreException {\n\t\treturn 0;\n\t}\n\tpublic String getFileExtension() {\n\t\treturn file.getName();\n\t}\n\tpublic long getLocalTimeStamp() {\n\t\treturn file.lastModified();\n\t}\n\tpublic IPath getLocation() {\n\t\treturn new Path(file.getAbsolutePath());\n\t}\n\tpublic URI getLocationURI() {\n\t\treturn file.toURI();\n\t}\n\tpublic IMarker getMarker(long id) {\n\t\treturn markers.get(id);\n\t}\n\tpublic long getModificationStamp() {\n\t\treturn file.lastModified();\n\t}\n\tpublic IContainer getParent() {\n\t\treturn project;\n\t}\n\tpublic Map getPersistentProperties() throws CoreException {\n\t\treturn Collections.EMPTY_MAP;\n\t}\n\tpublic String getPersistentProperty(QualifiedName key) throws CoreException {\n\t\treturn key.getQualifier();\n\t}\n\tpublic IProject getProject() {\n\t\treturn this.project;\n\t}\n\tpublic IPath getProjectRelativePath() {\n\t\treturn new Path(file.getAbsolutePath());\n\t}\n\tpublic IPath getRawLocation() {\n\t\treturn new Path(getFilename());\n\t}\n\tpublic URI getRawLocationURI() {\n\t\treturn file.toURI();\n\t}\n\tpublic ResourceAttributes getResourceAttributes() {\n\t\treturn null;\n\t}\n\tpublic Map getSessionProperties() throws CoreException {\n\t\treturn null;\n\t}\n\tpublic Object getSessionProperty(QualifiedName key) throws CoreException {\n\t\treturn null;\n\t}\n\tpublic int getType() {\n\t\treturn IResource.FILE;\n\t}\n\tpublic IWorkspace getWorkspace() {\n\t\treturn project.getWorkspace();\n\t}\n\tpublic boolean isAccessible() {\n\t\treturn true;\n\t}\n\tpublic boolean isDerived() {\n\t\treturn false;\n\t}\n\tpublic boolean isDerived(int options) {\n\t\treturn false;\n\t}\n\tpublic boolean isHidden() {\n\t\treturn false;\n\t}\n\tpublic boolean isLinked() {\n\t\treturn false;\n\t}\n\tpublic boolean isLinked(int options) {\n\t\treturn false;\n\t}\n\tpublic boolean isLocal(int depth) {\n\t\treturn false;\n\t}\n\tpublic boolean isPhantom() {\n\t\treturn false;\n\t}\n\tpublic boolean isSynchronized(int depth) {\n\t\treturn false;\n\t}\n<fim_suffix>\tpublic boolean isTeamPrivateMember() {\n\t\treturn false;\n\t}<fim_middle>// function below has no smell\n"}