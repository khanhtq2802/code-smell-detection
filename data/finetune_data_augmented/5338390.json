{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.nifi.processors.standard.util;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport org.apache.nifi.processor.io.InputStreamCallback;\n\nimport org.w3c.dom.Document;\nimport org.xml.sax.SAXException;\n\n<fim_suffix>public class DocumentReaderCallback implements InputStreamCallback {\n\n    private final boolean isNamespaceAware;\n    private Document document;\n\n    /**\n     * Creates a new DocumentReaderCallback .\n     *\n     * @param isNamespaceAware Whether or not the parse should consider namespaces\n     */\n    public DocumentReaderCallback(boolean isNamespaceAware) {\n        this.isNamespaceAware = isNamespaceAware;\n    }\n\n    @Override\n    public void process(final InputStream stream) throws IOException {\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setNamespaceAware(isNamespaceAware);\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            document = builder.parse(stream);\n        } catch (ParserConfigurationException pce) {\n            throw new IOException(pce.getLocalizedMessage(), pce);\n        } catch (SAXException saxe) {\n            throw new IOException(saxe.getLocalizedMessage(), saxe);\n        }\n    }\n\n    /**\n     * @return the document\n     */\n    public Document getDocument() {\n        return document;\n    }\n}<fim_middle>// class below has no smell\n"}