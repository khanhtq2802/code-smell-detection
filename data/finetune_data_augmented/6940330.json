{"text": "<fim_prefix>/* Copyright (c) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.gdata.client;\nimport com.google.api.client.auth.oauth2.Credential;\nimport com.google.gdata.util.common.base.Charsets;\nimport com.google.gdata.util.common.base.CharEscapers;\nimport com.google.gdata.util.common.base.StringUtil;\nimport com.google.gdata.client.GoogleService.AccountDeletedException;\nimport com.google.gdata.client.GoogleService.AccountDisabledException;\nimport com.google.gdata.client.GoogleService.CaptchaRequiredException;\nimport com.google.gdata.client.GoogleService.InvalidCredentialsException;\nimport com.google.gdata.client.GoogleService.NotVerifiedException;\nimport com.google.gdata.client.GoogleService.ServiceUnavailableException;\nimport com.google.gdata.client.GoogleService.SessionExpiredException;\nimport com.google.gdata.client.GoogleService.TermsNotAgreedException;\nimport com.google.gdata.client.authn.oauth.GoogleOAuthHelper;\nimport com.google.gdata.client.authn.oauth.OAuthException;\nimport com.google.gdata.client.authn.oauth.OAuthParameters;\nimport com.google.gdata.client.authn.oauth.OAuthParameters.OAuthType;\nimport com.google.gdata.client.authn.oauth.OAuthSigner;\nimport com.google.gdata.client.authn.oauth.TwoLeggedOAuthHelper;\nimport com.google.gdata.client.http.AuthSubUtil;\nimport com.google.gdata.client.http.HttpAuthToken;\nimport com.google.gdata.util.AuthenticationException;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.security.GeneralSecurityException;\nimport java.security.PrivateKey;\nimport java.util.HashMap;\nimport java.util.Map;\n/**\n * A factory for creating Google authentication tokens (ClientLogin and\n * AuthSub).\n *\n * \n */\npublic class GoogleAuthTokenFactory implements AuthTokenFactory {\n  // Name of client application accessing Google service\n  private String applicationName;\n  // Name of Google service being accessed\n  private String serviceName;\n  // Login name of the user\n  private String username;\n  // Password of the user\n  private String password;\n  // The Google domain name used for authentication\n  private String domainName;\n  // The protocol used for authentication\n  private String loginProtocol;\n  // Current auth token.\n  private HttpAuthToken authToken;\n  // Listener for token-related changes.\n  private TokenListener tokenListener;\n  /**\n   * The path name of the Google accounts management handler.\n   */\n  public static final String GOOGLE_ACCOUNTS_PATH = \"/accounts\";\n  /**\n   * The path name of the Google login handler.\n   */\n  public static final String GOOGLE_LOGIN_PATH = \"/accounts/ClientLogin\";\n  /**\n   * The UserToken encapsulates the token retrieved as a result of\n   * authenticating to Google using a user's credentials.\n   */\n<fim_suffix>  public static class UserToken implements HttpAuthToken {\n    private String token;\n    public UserToken(String token) {\n      this.token = token;\n    }\n    public String getValue() {\n      return token;\n    }\n    /**\n     * Returns an authorization header to be used for a HTTP request\n     * for the respective authentication token.\n     *\n     * @param requestUrl the URL being requested\n     * @param requestMethod the HTTP method of the request\n     * @return the \"Authorization\" header to be used for the request\n     */\n    public String getAuthorizationHeader(URL requestUrl,\n                                         String requestMethod) {\n      return \"GoogleLogin auth=\" + token;\n    }\n  }\n  /**\n   * Encapsulates the token used by web applications to login on behalf of\n   * a user.\n   */\n  public static class AuthSubToken implements HttpAuthToken {\n    private String token;\n    private PrivateKey key;\n    public AuthSubToken(String token, PrivateKey key) {\n      this.token = token;\n      this.key = key;\n    }\n    public String getValue() {\n      return token;\n    }\n    /**\n     * Returns an authorization header to be used for a HTTP request\n     * for the respective authentication token.\n     *\n     * @param requestUrl the URL being requested\n     * @param requestMethod the HTTP method of the request\n     * @return the \"Authorization\" header to be used for the request\n     */\n    public String getAuthorizationHeader(URL requestUrl,\n                                         String requestMethod) {\n      try {\n        return AuthSubUtil.formAuthorizationHeader(token, key, requestUrl,\n                                                   requestMethod);\n      } catch (GeneralSecurityException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n    }\n  }\n  /**\n   * Encapsulates the OAuth information used by applications to login on behalf\n   * of a user.  This class generates an unique authorization header for each\n   * request.\n   */\n  public static class OAuthToken implements HttpAuthToken {\n    OAuthParameters parameters;\n    final OAuthSigner signer;\n    /**\n     * Create a new {@link OAuthToken} object.  Store the\n     * {@link OAuthParameters} and {@link OAuthSigner} to use when generating\n     * the header.  The following OAuth parameters are required:\n     * <ul>\n     * <li>oauth_consumer_key\n     * <li>oauth_token\n     * </ul>\n     *\n     * @param parameters the required OAuth parameters\n     * @param signer the {@link OAuthSigner} object to use when to generate the\n     *        OAuth signature.\n     */\n    public OAuthToken(OAuthParameters parameters, OAuthSigner signer) {\n      this.parameters = parameters;\n      this.signer = signer;\n    }\n    /**\n     * Generates the OAuth authorization header using the user's OAuth\n     * parameters, the request url and the request method.\n     *\n     * @param requestUrl the URL being requested\n     * @param requestMethod the HTTP method of the request\n     * @return the authorization header to be used for the request\n     */\n    public String getAuthorizationHeader(URL requestUrl, String requestMethod) {\n      try {\n        if (parameters.getOAuthType() == OAuthType.TWO_LEGGED_OAUTH) {\n          TwoLeggedOAuthHelper twoLeggedOAuthHelper\n              = new TwoLeggedOAuthHelper(signer, parameters);\n          return twoLeggedOAuthHelper.getAuthorizationHeader(requestUrl.toString(),\n              requestMethod);\n        } else {\n          GoogleOAuthHelper oauthHelper = new GoogleOAuthHelper(signer);\n          return oauthHelper.getAuthorizationHeader(requestUrl.toString(),\n            requestMethod, parameters);\n        }\n      } catch (OAuthException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n  /**\n   * Encapsulates the OAuth 2.0 information used by applications to login on\n   * behalf of a user.\n   */\n  public static class OAuth2Token implements HttpAuthToken {\n    static final String HEADER_PREFIX = \"Bearer \";\n    final Credential credential;\n    /**\n     * Create a new {@link OAuth2Token} object.  Store the {@link Credential} to\n     * use when generating the header.\n     *\n     * @param credential the required OAuth 2.0 credentials\n     */\n    public OAuth2Token(Credential credential) {\n      this.credential = credential;\n    }\n    /**\n     * Returns the authorization header using the user's OAuth 2.0 credentials.\n     *\n     * @param requestUrl the URL being requested\n     * @param requestMethod the HTTP method of the request\n     * @return the authorization header to be used for the request\n     */\n    public String getAuthorizationHeader(URL requestUrl, String requestMethod) {\n      return HEADER_PREFIX + this.credential.getAccessToken();\n    }\n    /**\n     * Use the {@link Credential} to request a new access token from the\n     * authorization endpoint.\n     *\n     * @return whether a new access token was successfully retrieved\n     */\n    public boolean refreshToken() throws AuthenticationException {\n      try {\n        return this.credential.refreshToken();\n      } catch (IOException e) {\n        AuthenticationException ae =\n            new AuthenticationException(\"Failed to refresh access token: \" + e.getMessage());\n        ae.initCause(e);\n        throw ae;\n      }\n    }\n  }\n  /**\n   * Constructs a factory for creating authentication tokens for connecting\n   * to a Google service with name {@code serviceName} for an application\n   * with the name {@code applicationName}. The default domain\n   * (www.google.com) will be used to authenticate.\n   *<fim_middle>// class below has no smell\n"}