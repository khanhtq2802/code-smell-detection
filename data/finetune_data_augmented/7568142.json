{"text": "<fim_prefix>/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.jmx.export.assembler;\nimport java.beans.PropertyDescriptor;\nimport java.lang.reflect.Method;\nimport javax.management.Descriptor;\nimport javax.management.MBeanParameterInfo;\nimport javax.management.modelmbean.ModelMBeanNotificationInfo;\nimport org.springframework.aop.support.AopUtils;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.jmx.export.metadata.InvalidMetadataException;\nimport org.springframework.jmx.export.metadata.JmxAttributeSource;\nimport org.springframework.jmx.export.metadata.JmxMetadataUtils;\nimport org.springframework.jmx.export.metadata.ManagedAttribute;\nimport org.springframework.jmx.export.metadata.ManagedMetric;\nimport org.springframework.jmx.export.metadata.ManagedNotification;\nimport org.springframework.jmx.export.metadata.ManagedOperation;\nimport org.springframework.jmx.export.metadata.ManagedOperationParameter;\nimport org.springframework.jmx.export.metadata.ManagedResource;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StringUtils;\n/**\n * Implementation of the {@link MBeanInfoAssembler} interface that reads\n * the management interface information from source level metadata.\n *\n * <p>Uses the {@link JmxAttributeSource} strategy interface, so that\n * metadata can be read using any supported implementation. Out of the box,\n * Spring provides an implementation based on annotations:\n * {@code AnnotationJmxAttributeSource}.\n *\n * @author Rob Harrop\n * @author Juergen Hoeller\n * @author Jennifer Hickey\n * @since 1.2\n * @see #setAttributeSource\n * @see org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource\n */\npublic class MetadataMBeanInfoAssembler extends AbstractReflectiveMBeanInfoAssembler\n\t\timplements AutodetectCapableMBeanInfoAssembler, InitializingBean {\n\t@Nullable\n\tprivate JmxAttributeSource attributeSource;\n\t/**\n\t * Create a new {@code MetadataMBeanInfoAssembler} which needs to be\n\t * configured through the {@link #setAttributeSource} method.\n\t */\n\tpublic MetadataMBeanInfoAssembler() {\n\t}\n\t/**\n\t * Create a new {@code MetadataMBeanInfoAssembler} for the given\n\t * {@code JmxAttributeSource}.\n\t * @param attributeSource the JmxAttributeSource to use\n\t */\n\tpublic MetadataMBeanInfoAssembler(JmxAttributeSource attributeSource) {\n\t\tAssert.notNull(attributeSource, \"JmxAttributeSource must not be null\");\n\t\tthis.attributeSource = attributeSource;\n\t}\n\t/**\n\t * Set the {@code JmxAttributeSource} implementation to use for\n\t * reading the metadata from the bean class.\n\t * @see org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource\n\t */\n\tpublic void setAttributeSource(JmxAttributeSource attributeSource) {\n\t\tAssert.notNull(attributeSource, \"JmxAttributeSource must not be null\");\n\t\tthis.attributeSource = attributeSource;\n\t}\n\t@Override\n\tpublic void afterPropertiesSet() {\n\t\tif (this.attributeSource == null) {\n\t\t\tthrow new IllegalArgumentException(\"Property 'attributeSource' is required\");\n\t\t}\n\t}\n\tprivate JmxAttributeSource obtainAttributeSource() {\n\t\tAssert.state(this.attributeSource != null, \"No JmxAttributeSource set\");\n\t\treturn this.attributeSource;\n\t}\n\t/**\n\t * Throws an IllegalArgumentException if it encounters a JDK dynamic proxy.\n\t * Metadata can only be read from target classes and CGLIB proxies!\n\t */\n\t@Override\n\tprotected void checkManagedBean(Object managedBean) throws IllegalArgumentException {\n\t\tif (AopUtils.isJdkDynamicProxy(managedBean)) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"MetadataMBeanInfoAssembler does not support JDK dynamic proxies - \" +\n\t\t\t\t\t\"export the target beans directly or use CGLIB proxies instead\");\n\t\t}\n\t}\n\t/**\n\t * Used for autodetection of beans. Checks to see if the bean's class has a\n\t * {@code ManagedResource} attribute. If so it will add it list of included beans.\n\t * @param beanClass the class of the bean\n\t * @param beanName the name of the bean in the bean factory\n\t */\n\t@Override\n\tpublic boolean includeBean(Class<?> beanClass, String beanName) {\n\t\treturn (obtainAttributeSource().getManagedResource(getClassToExpose(beanClass)) != null);\n\t}\n\t/**\n\t * Vote on the inclusion of an attribute accessor.\n\t * @param method the accessor method\n\t * @param beanKey the key associated with the MBean in the beans map\n\t * @return whether the method has the appropriate metadata\n\t */\n\t@Override\n\tprotected boolean includeReadAttribute(Method method, String beanKey) {\n\t\treturn hasManagedAttribute(method) || hasManagedMetric(method);\n\t}\n\t/**\n\t * Votes on the inclusion of an attribute mutator.\n\t * @param method the mutator method\n\t * @param beanKey the key associated with the MBean in the beans map\n\t * @return whether the method has the appropriate metadata\n\t */\n\t@Override\n\tprotected boolean includeWriteAttribute(Method method, String beanKey) {\n\t\treturn hasManagedAttribute(method);\n\t}\n\t/**\n\t * Votes on the inclusion of an operation.\n\t * @param method the operation method\n\t * @param beanKey the key associated with the MBean in the beans map\n\t * @return whether the method has the appropriate metadata\n\t */\n<fim_suffix>\t@Override\n\tprotected boolean includeOperation(Method method, String beanKey) {\n\t\tPropertyDescriptor pd = BeanUtils.findPropertyForMethod(method);\n\t\treturn (pd != null && hasManagedAttribute(method)) || hasManagedOperation(method);\n\t}\n\t/**\n\t * Checks to see if the given Method has the {@code ManagedAttribute} attribute.\n\t */\n\tprivate boolean hasManagedAttribute(Method method) {\n\t\treturn (obtainAttributeSource().getManagedAttribute(method) != null);\n\t}\n\t/**\n\t * Checks to see if the given Method has the {@code ManagedMetric} attribute.\n\t */\n\tprivate boolean hasManagedMetric(Method method) {\n\t\treturn (obtainAttributeSource().getManagedMetric(method) != null);\n\t}\n\t/**\n\t * Checks to see if the given Method has the {@code ManagedOperation} attribute.\n\t * @param method the method to check\n\t */\n\tprivate boolean hasManagedOperation(Method method) {\n\t\treturn (obtainAttributeSource().getManagedOperation(method) != null);\n\t}\n\t/**\n\t * Reads managed resource description from the source level metadata.\n\t * Returns an empty {@code String} if no description can be found.\n\t */\n\t@Override\n\tprotected String getDescription(Object managedBean, String beanKey) {\n\t\tManagedResource mr = obtainAttributeSource().getManagedResource(getClassToExpose(managedBean));\n\t\treturn (mr != null ? mr.getDescription() : \"\");\n\t}\n\t/**\n\t * Creates a description for the attribute corresponding to this property\n\t * descriptor. Attempts to create the description using metadata from either\n\t * the getter or setter attributes, otherwise uses the property name.\n\t */\n\t@Override\n\tprotected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {\n\t\tMethod readMethod = propertyDescriptor.getReadMethod();\n\t\tMethod writeMethod = propertyDescriptor.getWriteMethod();\n\t\tManagedAttribute getter =\n\t\t\t\t(readMethod != null ? obtainAttributeSource().getManagedAttribute(readMethod) : null);\n\t\tManagedAttribute setter =\n\t\t\t\t(writeMethod != null ? obtainAttributeSource().getManagedAttribute(writeMethod) : null);\n\t\tif (getter != null && StringUtils.hasText(getter.getDescription())) {\n\t\t\treturn getter.getDescription();\n\t\t}\n\t\telse if (setter != null && StringUtils.hasText(setter.getDescription())) {\n\t\t\treturn setter.getDescription();\n\t\t}\n\t\tManagedMetric metric = (readMethod != null ? obtainAttributeSource().getManagedMetric(readMethod) : null);<fim_middle>// function below has no smell\n"}