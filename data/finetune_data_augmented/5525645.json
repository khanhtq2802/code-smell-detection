{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n package org.apache.ranger.service;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.TypeVariable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.persistence.EntityManager;\nimport javax.persistence.Query;\nimport javax.persistence.TypedQuery;\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Expression;\nimport javax.persistence.criteria.Path;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.log4j.Logger;\nimport org.apache.ranger.biz.RangerBizUtil;\nimport org.apache.ranger.common.ContextUtil;\nimport org.apache.ranger.common.DateUtil;\nimport org.apache.ranger.common.MessageEnums;\nimport org.apache.ranger.common.RESTErrorUtil;\nimport org.apache.ranger.common.RangerConfigUtil;\nimport org.apache.ranger.common.SearchCriteria;\nimport org.apache.ranger.common.SearchField;\nimport org.apache.ranger.common.SearchUtil;\nimport org.apache.ranger.common.SortField;\nimport org.apache.ranger.common.SortField.SORT_ORDER;\nimport org.apache.ranger.common.StringUtil;\nimport org.apache.ranger.common.UserSessionBase;\nimport org.apache.ranger.common.db.BaseDao;\nimport org.apache.ranger.common.view.VList;\nimport org.apache.ranger.db.RangerDaoManager;\nimport org.apache.ranger.entity.XXAuthSession;\nimport org.apache.ranger.entity.XXDBBase;\nimport org.apache.ranger.entity.XXPortalUser;\nimport org.apache.ranger.security.handler.Permission;\nimport org.apache.ranger.security.handler.RangerDomainObjectSecurityHandler;\nimport org.apache.ranger.view.VXDataObject;\nimport org.apache.ranger.view.VXLong;\nimport org.springframework.beans.factory.annotation.Autowired;\npublic abstract class AbstractBaseResourceService<T extends XXDBBase, V extends VXDataObject> {\n\tprotected static final Logger logger = Logger\n\t\t\t.getLogger(AbstractBaseResourceService.class);\n\tpublic static final int OPERATION_CREATE_CONTEXT = 1;\n\tpublic static final int OPERATION_UPDATE_CONTEXT = 2;\n\tprotected Class<T> tEntityClass;\n\tprotected Class<V> tViewClass;\n\tprotected String className;\n\tprotected String viewClassName;\n\tprotected String countQueryStr;\n\tprotected String queryStr;\n\tprotected final String distinctCountQueryStr;\n\tprotected final String distinctQueryStr;\n\tpublic List<SortField> sortFields = new ArrayList<SortField>();\n\tpublic List<SearchField> searchFields = new ArrayList<SearchField>();\n\tprotected static final HashMap<Class<?>, String> tEntityValueMap = new HashMap<Class<?>, String>();\n\tstatic {\n\t\ttEntityValueMap.put(XXAuthSession.class, \"Auth Session\");\n\t\ttEntityValueMap.put(XXDBBase.class, \"Base\");\n\t}\n\t@Autowired\n\tBaseDao<T> entityDao;\n\t@Autowired\n\tStringUtil stringUtil;\n\t@Autowired\n\tprotected RangerDaoManager daoManager;\n\t@Autowired\n\tprotected SearchUtil searchUtil;\n\t@Autowired\n\tprotected RESTErrorUtil restErrorUtil;\n\t@Autowired\n\tRangerDomainObjectSecurityHandler objectSecurityHandler;\n\t@Autowired\n\tRangerBizUtil bizUtil;\n\t@Autowired\n\tRangerConfigUtil msConfigUtil;\n\tprotected abstract void validateForCreate(V viewBaseBean);\n\tprotected abstract void validateForUpdate(V viewBaseBean, T t);\n\tprotected abstract T mapViewToEntityBean(V viewBean, T t,\n\t\t\tint OPERATION_CONTEXT);\n\tprotected abstract V mapEntityToViewBean(V viewBean, T t);\n\tprotected String getResourceName() {\n\t\tString resourceName = tEntityValueMap.get(tEntityClass);\n\t\tif (resourceName == null || resourceName.isEmpty()) {\n\t\t\tresourceName = \"Object\";\n\t\t}\n\t\treturn resourceName;\n\t\t// if (className.startsWith(\"M\")) {\n\t\t// return className.substring(1);\n\t\t// } else if (className.startsWith(\"org.apache.ranger.entity.M\")){\n\t\t// return className.substring(14);\n\t\t// }\n\t\t// return className;\n\t}\n\tprotected BaseDao<T> getDao() {\n\t\tif (entityDao == null) {\n\t\t\tthrow new NullPointerException(\"entityDao is not injected by Spring!\");\n\t\t}\n\t\treturn entityDao;\n\t}\n<fim_suffix>\tprotected T createEntityObject() {\n\t\ttry {\n\t\t\treturn tEntityClass.newInstance();\n\t\t} catch (Throwable e) {\n\t\t\tlogger.error(\"Error instantiating entity class. tEntityClass=\"\n\t\t\t\t\t+ tEntityClass.toString(), e);\n\t\t}\n\t\treturn null;\n\t}\n\tprotected V createViewObject() {\n\t\ttry {\n\t\t\treturn tViewClass.newInstance();\n\t\t} catch (Throwable e) {\n\t\t\tlogger.error(\"Error instantiating view class. tViewClass=\"\n\t\t\t\t\t+ tViewClass.toString(), e);\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * constructor\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic AbstractBaseResourceService() {\n\t\tClass klass = getClass();\n\t\tParameterizedType genericSuperclass = (ParameterizedType) klass\n\t\t\t\t.getGenericSuperclass();\n\t\tTypeVariable<Class<?>> var[] = klass.getTypeParameters();\n\t\tif (genericSuperclass.getActualTypeArguments()[0] instanceof Class) {\n\t\t\ttEntityClass = (Class<T>) genericSuperclass\n\t\t\t\t\t.getActualTypeArguments()[0];\n\t\t\ttViewClass = (Class<V>) genericSuperclass.getActualTypeArguments()[1];\n\t\t} else if (var.length > 0) {\n\t\t\ttEntityClass = (Class<T>) var[0].getBounds()[0];\n\t\t\ttViewClass = (Class<V>) var[1].getBounds()[0];\n\t\t} else {\n\t\t\tlogger.fatal(\"Cannot find class for template\", new Throwable());\n\t\t}\n\t\tif (tEntityClass != null) {\n\t\t\tclassName = tEntityClass.getName();\n\t\t}\n\t\tif (tViewClass != null) {\n\t\t\tviewClassName = tViewClass.getName();\n\t\t}\n\t\t// Get total count of the rows which meet the search criteria\n\t\tcountQueryStr = \"SELECT COUNT(obj) FROM \" + className\n\t\t\t\t+ \" obj \";\n\t\tqueryStr = \"SELECT obj FROM \" + className + \" obj \";\n\t\tdistinctCountQueryStr = \"SELECT COUNT(distinct obj.id) FROM \"\n\t\t\t\t+ className + \" obj \";\n\t\tdistinctQueryStr = \"SELECT distinct obj FROM \" + className + \" obj \";\n\t\tsortFields.add(new SortField(\"id\", \"obj.id\",true,SORT_ORDER.ASC));\n\t}\n\t// ----------------------------------------------------------------------------------\n\t// Create Operation\n\t// ----------------------------------------------------------------------------------\n\t/**\n\t * Create Entity object and populate it from view object. Used in create\n\t * operation\n\t */\n\tprotected void mapBaseAttributesToEntityBean(T resource, V viewBean) {\n\t\tif (resource.getCreateTime() == null) {\n\t\t\tresource.setCreateTime(DateUtil.getUTCDate());\n\t\t}<fim_middle>// function below has no smell\n"}