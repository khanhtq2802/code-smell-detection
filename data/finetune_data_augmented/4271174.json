{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math4.stat.descriptive.moment;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math4.exception.NullArgumentException;\nimport org.apache.commons.math4.util.MathUtils;\n\n/**\n * Computes a statistic related to the Second Central Moment.  Specifically,\n * what is computed is the sum of squared deviations from the sample mean.\n * <p>\n * The following recursive updating formula is used:</p>\n * <p>\n * Let <ul>\n * <li> dev = (current obs - previous mean) </li>\n * <li> n = number of observations (including current obs) </li>\n * </ul>\n * Then\n * <p>\n * new value = old value + dev^2 * (n -1) / n.</p>\n * <p>\n * Returns <code>Double.NaN</code> if no data values have been added and\n * returns <code>0</code> if there is just one value in the data set.\n * Note that Double.NaN may also be returned if the input includes NaN\n * and / or infinite values.</p>\n * <p>\n * <strong>Note that this implementation is not synchronized.</strong> If\n * multiple threads access an instance of this class concurrently, and at least\n * one of the threads invokes the <code>increment()</code> or\n * <code>clear()</code> method, it must be synchronized externally.</p>\n */\n<fim_suffix>public class SecondMoment extends FirstMoment implements Serializable {\n\n    /** Serializable version identifier */\n    private static final long serialVersionUID = 20150412L;\n\n    /** second moment of values that have been added */\n    protected double m2;\n\n    /**\n     * Create a SecondMoment instance.\n     */\n    public SecondMoment() {\n        super();\n        m2 = Double.NaN;\n    }\n\n    /**\n     * Copy constructor, creates a new {@code SecondMoment} identical\n     * to the {@code original}.\n     *\n     * @param original the {@code SecondMoment} instance to copy\n     * @throws NullArgumentException if original is null\n     */\n    public SecondMoment(SecondMoment original) throws NullArgumentException {\n        super(original);\n        this.m2 = original.m2;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void increment(final double d) {\n        if (n < 1) {\n            m1 = m2 = 0.0;\n        }\n        super.increment(d);\n        m2 += ((double) n - 1) * dev * nDev;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void clear() {\n        super.clear();\n        m2 = Double.NaN;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public double getResult() {\n        return m2;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public SecondMoment copy() {\n        SecondMoment result = new SecondMoment();\n        // no try-catch or advertised NAE because args are guaranteed non-null\n        copy(this, result);\n        return result;\n    }\n\n    /**\n     * Copies source to dest.\n     * <p>Neither source nor dest can be null.</p>\n     *\n     * @param source SecondMoment to copy\n     * @param dest SecondMoment to copy to\n     * @throws NullArgumentException if either source or dest is null\n     */\n    public static void copy(SecondMoment source, SecondMoment dest)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(source);\n        MathUtils.checkNotNull(dest);\n        FirstMoment.copy(source, dest);\n        dest.m2 = source.m2;\n    }\n\n}<fim_middle>// class below has no smell\n"}