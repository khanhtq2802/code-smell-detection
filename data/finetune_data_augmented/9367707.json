{"text": "<fim_prefix>\n<fim_suffix>class XPathFactoryFinder  {\n    private static final String DEFAULT_PACKAGE = \"com.sun.org.apache.xpath.internal\";\n    /** debug support code. */\n    private static boolean debug = false;\n    static {\n        // Use try/catch block to support applets\n        try {\n            debug = SecuritySupport.getSystemProperty(\"jaxp.debug\") != null;\n        } catch (Exception unused) {\n            debug = false;\n        }\n    }\n    /**\n     * <p>Cache properties for performance.</p>\n     */\n    private static final Properties cacheProps = new Properties();\n    /**\n     * <p>First time requires initialization overhead.</p>\n     */\n    private volatile static boolean firstTime = true;\n    /**\n     * <p>Conditional debug printing.</p>\n     *\n     * @param msgGen Supplier function that returns debug message\n     */\n    private static void debugPrintln(Supplier<String> msgGen) {\n        if (debug) {\n            System.err.println(\"JAXP: \" + msgGen.get());\n        }\n    }\n    /**\n     * <p><code>ClassLoader</code> to use to find <code>XPathFactory</code>.</p>\n     */\n    private final ClassLoader classLoader;\n    /**\n     * <p>Constructor that specifies <code>ClassLoader</code> to use\n     * to find <code>XPathFactory</code>.</p>\n     *\n     * @param loader\n     *      to be used to load resource and {@link XPathFactory}\n     *      implementations during the resolution process.\n     *      If this parameter is null, the default system class loader\n     *      will be used.\n     */\n    public XPathFactoryFinder(ClassLoader loader) {\n        this.classLoader = loader;\n        if( debug ) {\n            debugDisplayClassLoader();\n        }\n    }\n    private void debugDisplayClassLoader() {\n        try {\n            if( classLoader == SecuritySupport.getContextClassLoader() ) {\n                debugPrintln(() -> \"using thread context class loader (\"+classLoader+\") for search\");\n                return;\n            }\n        } catch( Throwable unused ) {\n             // getContextClassLoader() undefined in JDK1.1\n        }\n        if( classLoader==ClassLoader.getSystemClassLoader() ) {\n            debugPrintln(() -> \"using system class loader (\"+classLoader+\") for search\");\n            return;\n        }\n        debugPrintln(() -> \"using class loader (\"+classLoader+\") for search\");\n    }\n    /**\n     * <p>Creates a new {@link XPathFactory} object for the specified\n     * object model.</p>\n     *\n     * @param uri\n     *       Identifies the underlying object model.\n     *\n     * @return <code>null</code> if the callee fails to create one.\n     *\n     * @throws NullPointerException\n     *      If the parameter is null.\n     */\n    public XPathFactory newFactory(String uri) throws XPathFactoryConfigurationException {\n        if (uri == null) {\n            throw new NullPointerException();\n        }\n        XPathFactory f = _newFactory(uri);\n        if (f != null) {\n            debugPrintln(()->\"factory '\" + f.getClass().getName() + \"' was found for \" + uri);\n        } else {\n            debugPrintln(()->\"unable to find a factory for \" + uri);\n        }\n        return f;\n    }\n    /**\n     * <p>Lookup a {@link XPathFactory} for the given object model.</p>\n     *\n     * @param uri identifies the object model.\n     *\n     * @return {@link XPathFactory} for the given object model.\n     */\n    private XPathFactory _newFactory(String uri) throws XPathFactoryConfigurationException {\n        XPathFactory xpathFactory = null;\n        String propertyName = SERVICE_CLASS.getName() + \":\" + uri;\n        // system property look up\n        try {\n            debugPrintln(()->\"Looking up system property '\"+propertyName+\"'\" );\n            String r = SecuritySupport.getSystemProperty(propertyName);\n            if(r!=null) {\n                debugPrintln(()->\"The value is '\"+r+\"'\");\n                xpathFactory = createInstance(r);\n                if (xpathFactory != null) {\n                    return xpathFactory;\n                }\n            } else\n                debugPrintln(()->\"The property is undefined.\");\n        } catch( Throwable t ) {\n            if( debug ) {\n                debugPrintln(()->\"failed to look up system property '\"+propertyName+\"'\" );\n                t.printStackTrace();\n            }\n        }\n        String javah = SecuritySupport.getSystemProperty( \"java.home\" );\n        String configFile = javah + File.separator +\n        \"conf\" + File.separator + \"jaxp.properties\";\n        // try to read from $java.home/conf/jaxp.properties\n        try {\n            if(firstTime){\n                synchronized(cacheProps){\n                    if(firstTime){\n                        File f=new File( configFile );\n                        firstTime = false;\n                        if(SecuritySupport.doesFileExist(f)){\n                            debugPrintln(()->\"Read properties file \" + f);\n                            cacheProps.load(SecuritySupport.getFileInputStream(f));\n                        }\n                    }\n                }\n            }\n            final String factoryClassName = cacheProps.getProperty(propertyName);\n            debugPrintln(()->\"found \" + factoryClassName + \" in $java.home/conf/jaxp.properties\");\n            if (factoryClassName != null) {\n                xpathFactory = createInstance(factoryClassName);\n                if(xpathFactory != null){\n                    return xpathFactory;\n                }\n            }\n        } catch (Exception ex) {\n            if (debug) {\n                ex.printStackTrace();\n            }\n        }\n        // Try with ServiceLoader\n        assert xpathFactory == null;\n        xpathFactory = findServiceProvider(uri);\n        // The following assertion should always be true.\n        // Uncomment it, recompile, and run with -ea in case of doubts:\n        // assert xpathFactory == null || xpathFactory.isObjectModelSupported(uri);\n        if (xpathFactory != null) {\n            return xpathFactory;\n        }\n        // platform default\n        if(uri.equals(XPathFactory.DEFAULT_OBJECT_MODEL_URI)) {\n            debugPrintln(()->\"attempting to use the platform default W3C DOM XPath lib\");\n            return new XPathFactoryImpl();\n        }\n        debugPrintln(()->\"all things were tried, but none was found. bailing out.\");\n        return null;\n    }\n    /** <p>Create class using appropriate ClassLoader.</p>\n     *\n     * @param className Name of class to create.\n     * @return Created class or <code>null</code>.\n     */\n    private Class<?> createClass(String className) {\n        Class<?> clazz;\n        // make sure we have access to restricted packages\n        boolean internal = false;\n        if (System.getSecurityManager() != null) {\n            if (className != null && className.startsWith(DEFAULT_PACKAGE)) {\n                internal = true;\n            }\n        }\n        // use approprite ClassLoader\n        try {\n            if (classLoader != null && !internal) {\n                    clazz = Class.forName(className, false, classLoader);\n            } else {\n                    clazz = Class.forName(className);\n            }\n        } catch (Throwable t) {\n            if(debug) {\n                t.printStackTrace();\n            }\n            return null;\n        }\n        return clazz;\n    }\n    /**\n     * <p>Creates an instance of the specified and returns it.</p>\n     *\n     * @param className\n     *      fully qualified class name to be instantiated.\n     *\n     * @return null\n     *      if it fails. Error messages will be printed by this method.\n     */\n    XPathFactory createInstance(String className)\n            throws XPathFactoryConfigurationException\n    {\n        XPathFactory xPathFactory = null;\n        debugPrintln(()->\"createInstance(\" + className + \")\");\n        // get Class from className\n        Class<?> clazz = createClass(className);\n        if (clazz == null) {\n            debugPrintln(()->\"failed to getClass(\" + className + \")\");\n            return null;\n        }\n        debugPrintln(()->\"loaded \" + className + \" from \" + which(clazz));\n        // instantiate Class as a XPathFactory\n        try {\n            xPathFactory = (XPathFactory) clazz.getConstructor().newInstance();\n        } catch (ClassCastException | IllegalAccessException | IllegalArgumentException |\n            InstantiationException | InvocationTargetException | NoSuchMethodException |\n            SecurityException ex) {\n            debugPrintln(()->\"could not instantiate \" + clazz.getName());\n            if (debug) {\n                    ex.printStackTrace();\n            }\n            return null;\n        }\n        return xPathFactory;\n    }\n    // Call isObjectModelSupportedBy with initial context.\n    private boolean isObjectModelSupportedBy(final XPathFactory factory,\n            final String objectModel,\n            AccessControlContext acc) {\n        return AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n                    public Boolean run() {\n                        return factory.isObjectModelSupported(objectModel);\n                    }\n                }, acc);\n    }\n    /**\n     * Finds a service provider subclass of XPathFactory that supports the\n     * given object model using the ServiceLoader.\n     *\n     * @param objectModel URI of object model to support.\n     * @return An XPathFactory supporting the specified object model, or null\n     *         if none is found.\n     * @throws XPathFactoryConfigurationException if a configuration error is found.\n     */\n    private XPathFactory findServiceProvider(final String objectModel)\n            throws XPathFactoryConfigurationException {\n        assert objectModel != null;\n        // store current context.\n        final AccessControlContext acc = AccessController.getContext();\n        try {<fim_middle>// class below has no smell\n"}