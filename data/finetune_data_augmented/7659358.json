{"text": "<fim_prefix>/*\n * Copyright 2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.statemachine.ensemble;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.statemachine.StateMachine;\nimport org.springframework.statemachine.StateMachineContext;\nimport org.springframework.statemachine.support.LifecycleObjectSupport;\n\n/**\n * Support class for implementing {@link StateMachineEnsemble}s.\n *\n * @author Janne Valkealahti\n *\n * @param <S> the type of state\n * @param <E> the type of event\n */\npublic abstract class StateMachineEnsembleObjectSupport<S, E> extends LifecycleObjectSupport implements StateMachineEnsemble<S, E> {\n\n\tprivate final static Log log = LogFactory.getLog(StateMachineEnsembleObjectSupport.class);\n\n\tprivate final CompositeEnsembleListener<S, E> ensembleListener = new CompositeEnsembleListener<S, E>();\n\n\t@Override\n\tpublic abstract void join(StateMachine<S, E> stateMachine);\n\n\t@Override\n\tpublic abstract void leave(StateMachine<S, E> stateMachine);\n\n\t@Override\n\tpublic void addEnsembleListener(EnsembleListener<S, E> listener) {\n\t\tensembleListener.register(listener);\n\t}\n\n\t@Override\n\tpublic void removeEnsembleListener(EnsembleListener<S, E> listener) {\n\t\tensembleListener.unregister(listener);\n\t}\n\n\tprotected void notifyJoined(StateMachine<S, E> stateMachine, StateMachineContext<S, E> context) {\n\t\tensembleListener.stateMachineJoined(stateMachine, context);\n\t}\n\n\tprotected void notifyLeft(StateMachine<S, E> stateMachine, StateMachineContext<S, E> context) {\n\t\tensembleListener.stateMachineLeft(stateMachine, context);\n\t}\n\n\tprotected void notifyError(StateMachineEnsembleException exception) {\n\t\tensembleListener.ensembleError(exception);\n\t}\n\n\tprotected void notifyGranted(StateMachine<S, E> stateMachine) {\n\t\tensembleListener.ensembleLeaderGranted(stateMachine);\n\t}\n\n\tprotected void notifyRevoked(StateMachine<S, E> stateMachine) {\n\t\tensembleListener.ensembleLeaderRevoked(stateMachine);\n\t}\n\n<fim_suffix>\tprotected void notifyStateChanged(StateMachineContext<S, E> context) {\n\t\tif (log.isTraceEnabled()) {\n\t\t\tlog.trace(\"Notify notifyStateChanged \" + context);\n\t\t}\n\t\tensembleListener.stateChanged(context);\n\t}\n}<fim_middle>// function below has no smell\n"}