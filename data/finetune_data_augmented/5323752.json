{"text": "<fim_prefix>/*\n * Copyright 2015 The Apache Software Foundation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.pdfbox.debugger.fontencodingpane;\n\nimport java.awt.image.BufferedImage;\nimport org.apache.pdfbox.pdmodel.font.PDSimpleFont;\nimport org.apache.pdfbox.pdmodel.font.PDType3Font;\n\nimport javax.swing.JPanel;\nimport java.io.IOException;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.PDPageContentStream;\nimport org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;\nimport org.apache.pdfbox.pdmodel.PDResources;\nimport org.apache.pdfbox.pdmodel.common.PDRectangle;\nimport org.apache.pdfbox.pdmodel.font.PDType3CharProc;\nimport org.apache.pdfbox.rendering.PDFRenderer;\nimport org.apache.pdfbox.util.Charsets;\nimport org.apache.pdfbox.util.Matrix;\n\n/**\n * @author Khyrul Bashar\n * @author Tilman Hausherr\n * \n * A class that shows the glyph table along with unicode characters for PDType3Font.\n */\n<fim_suffix>class Type3Font extends FontPane\n{\n    public static final String NO_GLYPH = \"No glyph\";\n    private final FontEncodingView view;\n    private int totalAvailableGlyph = 0;\n    private PDRectangle fontBBox;\n    private final PDResources resources;\n\n    /**\n     * Constructor.\n     * @param font PDSimpleFont instance.\n     * @throws IOException If fails to parse unicode characters.\n     */\n    Type3Font(PDType3Font font, PDResources resources) throws IOException\n    {\n        this.resources = resources;\n\n        calcBBox(font);\n        \n        Object[][] tableData = getGlyphs(font);\n\n        Map<String, String> attributes = new LinkedHashMap<>();\n        attributes.put(\"Font\", font.getName());\n        attributes.put(\"Encoding\", getEncodingName(font));\n        attributes.put(\"Glyphs\", Integer.toString(totalAvailableGlyph));\n\n        view = new FontEncodingView(tableData, attributes, \n                new String[] {\"Code\", \"Glyph Name\", \"Unicode Character\", \"Glyph\"}, null);\n    }\n    \n    private void calcBBox(PDType3Font font) throws IOException\n    {\n        double minX = 0;\n        double maxX = 0;\n        double minY = 0;\n        double maxY = 0;\n        for (int index = 0; index <= 255; ++index)\n        {\n            PDType3CharProc charProc = font.getCharProc(index);\n            if (charProc == null)\n            {\n                continue;\n            }\n            PDRectangle glyphBBox = charProc.getGlyphBBox();\n            if (glyphBBox == null)\n            {\n                continue;\n            }\n            minX = Math.min(minX, glyphBBox.getLowerLeftX());\n            maxX = Math.max(maxX, glyphBBox.getUpperRightX());\n            minY = Math.min(minY, glyphBBox.getLowerLeftY());\n            maxY = Math.max(maxY, glyphBBox.getUpperRightY());\n        }\n        fontBBox = new PDRectangle((float) minX, (float) minY, (float) (maxX - minX), (float) (maxY - minY));\n    }\n\n    private Object[][] getGlyphs(PDType3Font font) throws IOException\n    {\n        Object[][] glyphs = new Object[256][4];\n\n        for (int index = 0; index <= 255; index++)\n        {\n            glyphs[index][0] = index;\n            if (font.getEncoding().contains(index))\n            {\n                glyphs[index][1] = font.getEncoding().getName(index);\n                glyphs[index][2] = font.toUnicode(index);\n                if (fontBBox.toGeneralPath().getBounds2D().isEmpty())\n                {\n                    glyphs[index][3] = NO_GLYPH;\n                }\n                else\n                {\n                    glyphs[index][3] = renderType3Glyph(font, index);\n                }\n                totalAvailableGlyph++;\n            }\n            else\n            {\n                glyphs[index][1] = NO_GLYPH;\n                glyphs[index][2] = NO_GLYPH;\n                glyphs[index][3] = NO_GLYPH;\n            }\n        }\n        return glyphs;\n    }\n\n    // Kindof an overkill to create a PDF for one glyph, but there is no better way at this time.\n    // Isn't called if no bounds are available\n    private BufferedImage renderType3Glyph(PDType3Font font, int index) throws IOException\n    {\n        try (PDDocument doc = new PDDocument())\n        {\n            int scale = 1;\n            if (fontBBox.getWidth() < 72 || fontBBox.getHeight() < 72)\n            {\n                // e.g. T4 font of PDFBOX-2959\n                scale = (int) (72 / Math.min(fontBBox.getWidth(), fontBBox.getHeight()));\n            }\n            PDPage page = new PDPage(new PDRectangle(fontBBox.getWidth() * scale, fontBBox.getHeight() * scale));\n            page.setResources(resources);\n\n            try (PDPageContentStream cs = new PDPageContentStream(doc, page, AppendMode.APPEND, false))\n            {\n                // any changes here must be done carefully and each file must be tested again\n                // just inverting didn't work with\n                // https://www.treasury.gov/ofac/downloads/sdnlist.pdf (has rotated matrix)\n                // also test PDFBOX-4228-type3.pdf (identity matrix)\n                // Root/Pages/Kids/[0]/Resources/XObject/X1/Resources/XObject/X3/Resources/Font/F10\n                // PDFBOX-1794-vattenfall.pdf (scale 0.001)\n                float scalingFactorX = font.getFontMatrix().getScalingFactorX();\n                float scalingFactorY = font.getFontMatrix().getScalingFactorY();\n                float translateX = scalingFactorX > 0 ? -fontBBox.getLowerLeftX() : fontBBox.getUpperRightX();\n                float translateY = scalingFactorY > 0 ? -fontBBox.getLowerLeftY() : fontBBox.getUpperRightY();\n                cs.transform(Matrix.getTranslateInstance(translateX * scale, translateY * scale));\n                cs.beginText();\n                cs.setFont(font, scale / Math.min(Math.abs(scalingFactorX), Math.abs(scalingFactorY)));\n                // can't use showText() because there's no guarantee we have the unicode\n                cs.appendRawCommands(String.format(\"<%02X> Tj\\n\", index).getBytes(Charsets.ISO_8859_1));\n                cs.endText();\n            }\n            doc.addPage(page);\n            // for debug you can save the PDF here\n            return new PDFRenderer(doc).renderImage(0);\n        }\n    }\n\n    private String getEncodingName(PDSimpleFont font)\n    {\n        return font.getEncoding().getClass().getSimpleName();\n    }\n\n    @Override\n    public JPanel getPanel()\n    {\n        return view.getPanel();\n    }\n}<fim_middle>// class below has no smell\n"}