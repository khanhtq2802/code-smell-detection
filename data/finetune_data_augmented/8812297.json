{"text": "<fim_prefix>              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, addSSHCredential_args struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.sshCredential != null) {\n          oprot.writeFieldBegin(SSH_CREDENTIAL_FIELD_DESC);\n          struct.sshCredential.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class addSSHCredential_argsTupleSchemeFactory implements SchemeFactory {\n      public addSSHCredential_argsTupleScheme getScheme() {\n        return new addSSHCredential_argsTupleScheme();\n      }\n    }\n    private static class addSSHCredential_argsTupleScheme extends TupleScheme<addSSHCredential_args> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, addSSHCredential_args struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        struct.sshCredential.write(oprot);\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, addSSHCredential_args struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        struct.sshCredential = new org.apache.airavata.model.credential.store.SSHCredential();\n        struct.sshCredential.read(iprot);\n        struct.setSshCredentialIsSet(true);\n      }\n    }\n  }\n  public static class addSSHCredential_result implements org.apache.thrift.TBase<addSSHCredential_result, addSSHCredential_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSSHCredential_result>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"addSSHCredential_result\");\n    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"success\", org.apache.thrift.protocol.TType.STRING, (short)0);\n    private static final org.apache.thrift.protocol.TField CS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(\"csException\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new addSSHCredential_resultStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new addSSHCredential_resultTupleSchemeFactory());\n    }\n    public String success; // required\n    public org.apache.airavata.credential.store.exception.CredentialStoreException csException; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      SUCCESS((short)0, \"success\"),\n      CS_EXCEPTION((short)1, \"csException\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 0: // SUCCESS\n            return SUCCESS;\n          case 1: // CS_EXCEPTION\n            return CS_EXCEPTION;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData(\"success\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n      tmpMap.put(_Fields.CS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData(\"csException\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSSHCredential_result.class, metaDataMap);\n    }\n    public addSSHCredential_result() {\n    }\n    public addSSHCredential_result(\n      String success,\n      org.apache.airavata.credential.store.exception.CredentialStoreException csException)\n    {\n      this();\n      this.success = success;\n      this.csException = csException;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public addSSHCredential_result(addSSHCredential_result other) {\n      if (other.isSetSuccess()) {\n        this.success = other.success;\n      }\n      if (other.isSetCsException()) {\n        this.csException = new org.apache.airavata.credential.store.exception.CredentialStoreException(other.csException);\n      }\n    }\n    public addSSHCredential_result deepCopy() {\n      return new addSSHCredential_result(this);\n    }\n    @Override\n    public void clear() {\n      this.success = null;\n      this.csException = null;\n    }\n    public String getSuccess() {\n      return this.success;\n    }\n    public addSSHCredential_result setSuccess(String success) {\n      this.success = success;\n      return this;\n    }\n    public void unsetSuccess() {\n      this.success = null;\n    }\n    /** Returns true if field success is set (has been assigned a value) and false otherwise */\n    public boolean isSetSuccess() {\n      return this.success != null;\n    }\n    public void setSuccessIsSet(boolean value) {\n      if (!value) {\n        this.success = null;\n      }\n    }\n    public org.apache.airavata.credential.store.exception.CredentialStoreException getCsException() {\n      return this.csException;\n    }\n    public addSSHCredential_result setCsException(org.apache.airavata.credential.store.exception.CredentialStoreException csException) {\n      this.csException = csException;\n      return this;\n    }\n    public void unsetCsException() {\n      this.csException = null;\n    }\n    /** Returns true if field csException is set (has been assigned a value) and false otherwise */\n    public boolean isSetCsException() {\n      return this.csException != null;\n    }\n    public void setCsExceptionIsSet(boolean value) {\n      if (!value) {\n        this.csException = null;\n      }\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      case SUCCESS:\n        if (value == null) {\n          unsetSuccess();\n        } else {\n          setSuccess((String)value);\n        }\n        break;\n      case CS_EXCEPTION:\n        if (value == null) {\n          unsetCsException();\n        } else {\n          setCsException((org.apache.airavata.credential.store.exception.CredentialStoreException)value);\n        }\n        break;\n      }\n    }\n<fim_suffix>    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case SUCCESS:\n        return getSuccess();\n      case CS_EXCEPTION:\n        return getCsException();\n      }\n      throw new IllegalStateException();\n    }<fim_middle>// function below has no smell\n"}