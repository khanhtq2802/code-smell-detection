{"text": "<fim_prefix>     * @param string The passed String\n     * @return A String with an upper case first letter\n     */\n    public static String upperFirstChar(String string) {\n        if (string == null) return null;\n        if (string.length() <= 1) return string.toLowerCase(Locale.getDefault());\n        StringBuilder sb = new StringBuilder(string);\n        sb.setCharAt(0, Character.toUpperCase(sb.charAt(0)));\n        return sb.toString();\n    }\n    /**\n     * Changes the first letter of the passed String to lower case.\n     *\n     * @param string The passed String\n     * @return A String with a lower case first letter\n     */\n    public static String lowerFirstChar(String string) {\n        if (string == null) return null;\n        if (string.length() <= 1) return string.toLowerCase(Locale.getDefault());\n        StringBuilder sb = new StringBuilder(string);\n        sb.setCharAt(0, Character.toLowerCase(sb.charAt(0)));\n        return sb.toString();\n    }\n    /** Converts a database name to a Java class name.\n     * The naming conventions used to allow for this are as follows: a database name (table or\n     * column) is in all capital letters, and the words are separated by an underscore\n     * (for example: NEAT_ENTITY_NAME or RANDOM_FIELD_NAME); a Java name (ejb or field) is in all\n     * lower case letters, except the letter at the beginning of each word (for example:\n     * NeatEntityName or RandomFieldName). The convention of using a capital letter at\n     * the beginning of a class name in Java, or a lower-case letter for the beginning of a\n     * variable name in Java is also used along with the Java name convention above.\n     * @param columnName The database name\n     * @return The Java class name\n     */\n    public static String dbNameToClassName(String columnName) {\n        return upperFirstChar(dbNameToVarName(columnName));\n    }\n    /** Converts a database name to a Java variable name.\n     * The naming conventions used to allow for this are as follows: a database name (table or\n     * column) is in all capital letters, and the words are separated by an underscore\n     * (for example: NEAT_ENTITY_NAME or RANDOM_FIELD_NAME); a Java name (ejb or field) is in all\n     * lower case letters, except the letter at the beginning of each word (for example:\n     * NeatEntityName or RandomFieldName). The convention of using a capital letter at\n     * the beginning of a class name in Java, or a lower-case letter for the beginning of a\n     * variable name in Java is also used along with the Java name convention above.\n     * @param columnName The database name\n     * @return The Java variable name\n     */\n    public static String dbNameToVarName(String columnName) {\n        if (columnName == null) return null;\n        StringBuilder fieldName = new StringBuilder(columnName.length());\n        boolean toUpper = false;\n        for (int i=0; i < columnName.length(); i++) {\n            char ch = columnName.charAt(i);\n            if (ch == '_') {\n                toUpper = true;\n            } else if (toUpper) {\n                fieldName.append(Character.toUpperCase(ch));\n                toUpper = false;\n            } else {\n                fieldName.append(Character.toLowerCase(ch));\n            }\n        }\n        return fieldName.toString();\n    }\n    /**\n     * Converts a Java variable name to a database name.\n     * The naming conventions used to allow for this are as follows: a database name (table or\n     * column) is in all capital letters, and the words are separated by an underscore\n     * (for example: NEAT_ENTITY_NAME or RANDOM_FIELD_NAME); a Java name (ejb or field) is in all\n     * lower case letters, except the letter at the beginning of each word (for example:\n     * NeatEntityName or RandomFieldName). The convention of using a capital letter at\n     * the beginning of a class name in Java, or a lower-case letter for the beginning of a\n     * variable name in Java is also used along with the Java name convention above.\n     * @param javaName The Java variable name\n     * @return The database name\n     */\n    public static String javaNameToDbName(String javaName) {\n        if (javaName == null) return null;\n        if (javaName.length() <= 0) return \"\";\n        StringBuilder dbName = new StringBuilder();\n        dbName.append(Character.toUpperCase(javaName.charAt(0)));\n        int namePos = 1;\n        while (namePos < javaName.length()) {\n            char curChar = javaName.charAt(namePos);\n            if (Character.isUpperCase(curChar)) dbName.append('_');\n            dbName.append(Character.toUpperCase(curChar));\n            namePos++;\n        }\n        return dbName.toString();\n    }\n    /**  Start by removing all vowels, then pull 1 letter at a time off the end of each _ separated segment, go until it is less than or equal to the desired length\n     *\n     * @param dbName\n     * @param desiredLength\n     * @return shortened String\n     */\n<fim_suffix>    public static String shortenDbName(String dbName, int desiredLength) {\n        StringBuilder dbBuf = new StringBuilder(dbName);\n        if (dbBuf.length() > desiredLength) {\n            // remove one vowel at a time, starting at beginning\n            for (int i = dbBuf.length() - 1; i > 0; i--) {\n                // don't remove vowels that are at the beginning of the string (taken care of by the i > 0) or right after an underscore\n                if (dbBuf.charAt(i - 1) == '_') {\n                    continue;\n                }\n                char curChar = dbBuf.charAt(i);\n                if (vowelBag.indexOf(curChar) > 0) {\n                    dbBuf.deleteCharAt(i);\n                }\n            }\n        }\n        // remove all double underscores\n        while (dbBuf.indexOf(\"__\") > 0) {\n            dbBuf.deleteCharAt(dbBuf.indexOf(\"__\"));\n        }\n        while (dbBuf.length() > desiredLength) {\n            boolean removedChars = false;\n            int usIndex = dbBuf.lastIndexOf(\"_\");\n            while (usIndex > 0 && dbBuf.length() > desiredLength) {\n                // if this is the first word in the group, don't pull letters off unless it is 4 letters or more\n                int prevUsIndex = dbBuf.lastIndexOf(\"_\", usIndex - 1);\n                if (prevUsIndex < 0 && usIndex < 4) {\n                    break;\n                }\n                // don't remove characters to reduce the size two less than three characters between underscores\n                if (prevUsIndex >= 0 && (usIndex - prevUsIndex) <= 4) {\n                    usIndex = prevUsIndex;\n                    continue;\n                }\n                // delete the second to last character instead of the last, better chance of being unique\n                dbBuf.deleteCharAt(usIndex - 2);\n                removedChars = true;\n                if (usIndex > 2) {\n                    usIndex = dbBuf.lastIndexOf(\"_\", usIndex - 2);\n                } else {\n                    break;\n                }\n            }\n            // now delete the char at the end of the string if necessary\n            if (dbBuf.length() > desiredLength) {\n                int removeIndex = dbBuf.length() - 1;\n                int prevRemoveIndex = dbBuf.lastIndexOf(\"_\", removeIndex - 1);\n                // don't remove characters to reduce the size two less than two characters between underscores\n                if (prevRemoveIndex < 0 || (removeIndex - prevRemoveIndex) >= 3) {\n                    // delete the second to last character instead of the last, better chance of being unique\n                    dbBuf.deleteCharAt(removeIndex - 1);\n                    removedChars = true;\n                }\n            }\n            // remove all double underscores\n            while (dbBuf.indexOf(\"__\") > 0) {\n                dbBuf.deleteCharAt(dbBuf.indexOf(\"__\"));\n                removedChars = true;\n            }\n            // if we didn't remove anything break out to avoid an infinite loop\n            if (!removedChars) {\n                break;\n            }\n        }\n        // remove all double underscores\n        while (dbBuf.indexOf(\"__\") > 0) {\n            dbBuf.deleteCharAt(dbBuf.indexOf(\"__\"));\n        }\n        while (dbBuf.length() > desiredLength) {\n            // still not short enough, get more aggressive\n            // don't remove the first segment, just remove the second over and over until we are short enough\n            int firstUs = dbBuf.indexOf(\"_\");\n            if (firstUs > 0) {\n                int nextUs = dbBuf.indexOf(\"_\", firstUs + 1);\n                if (nextUs > 0) {\n                    //Debug.logInfo(\"couldn't shorten enough normally, removing second segment from \" + dbBuf, module);\n                    dbBuf.delete(firstUs, nextUs);\n                }\n            }\n        }\n        //Debug.logInfo(\"Shortened \" + dbName + \" to \" + dbBuf.toString(), module);\n        return dbBuf.toString();\n    }<fim_middle>// function below is long method\n"}