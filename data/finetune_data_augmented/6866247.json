{"text": "<fim_prefix>/*\nCopyright 2011-2016 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.google.security.zynamics.binnavi.debug.models.memoryexpressions;\n\nimport com.google.common.collect.Iterables;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Represents a plus expression in a memory expression tree.\n */\n<fim_suffix>public class PlusExpression implements MemoryExpressionElement {\n  /**\n   * The operands of the plus expression.\n   */\n  private final List<MemoryExpressionElement> children;\n\n  /**\n   * Creates a new expression object.\n   *\n   * @param children The operands of the plus expression.\n   */\n  public PlusExpression(final List<MemoryExpressionElement> children) {\n    this.children = children;\n  }\n\n  /**\n   * Returns the children of the expression.\n   *\n   * @return The children of the expression.\n   */\n  public List<MemoryExpressionElement> getChildren() {\n    return new ArrayList<>(children);\n  }\n\n  @Override\n  public String toString() {\n    final StringBuilder ret = new StringBuilder();\n    for (final MemoryExpressionElement child : children) {\n      ret.append(child.toString());\n      if (child != Iterables.getLast(children)) {\n        ret.append('+');\n      }\n    }\n    return ret.toString();\n  }\n\n  @Override\n  public void visit(final MemoryExpressionVisitor visitor) {\n    visitor.visit(this);\n  }\n\n}<fim_middle>// class below has no smell\n"}