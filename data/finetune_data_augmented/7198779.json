{"text": "<fim_prefix>/**\n * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.\n */\npackage com.oracle.bmc.core.model;\n/**\n * A rule for allowing outbound IP packets.\n * <br/>\n * Note: Objects should always be created or deserialized using the {@link Builder}. This model distinguishes fields\n * that are {@code null} because they are unset from fields that are explicitly set to {@code null}. This is done in\n * the setter methods of the {@link Builder}, which maintain a set of all explicitly set fields called\n * {@link #__explicitlySet__}. The {@link #hashCode()} and {@link #equals(Object)} methods are implemented to take\n * {@link #__explicitlySet__} into account. The constructor, on the other hand, does not set {@link #__explicitlySet__}\n * (since the constructor cannot distinguish explicit {@code null} from unset {@code null}).\n **/\n@javax.annotation.Generated(value = \"OracleSDKGenerator\", comments = \"API Version: 20160918\")\n@lombok.AllArgsConstructor(onConstructor = @__({@Deprecated}))\n@lombok.Value\n@com.fasterxml.jackson.databind.annotation.JsonDeserialize(\n    builder = EgressSecurityRule.Builder.class\n)\n@com.fasterxml.jackson.annotation.JsonFilter(com.oracle.bmc.http.internal.ExplicitlySetFilter.NAME)\npublic class EgressSecurityRule {\n<fim_suffix>    @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(withPrefix = \"\")\n    @lombok.experimental.Accessors(fluent = true)\n    public static class Builder {\n        @com.fasterxml.jackson.annotation.JsonProperty(\"destination\")\n        private String destination;\n        public Builder destination(String destination) {\n            this.destination = destination;\n            this.__explicitlySet__.add(\"destination\");\n            return this;\n        }\n        @com.fasterxml.jackson.annotation.JsonProperty(\"destinationType\")\n        private DestinationType destinationType;\n        public Builder destinationType(DestinationType destinationType) {\n            this.destinationType = destinationType;\n            this.__explicitlySet__.add(\"destinationType\");\n            return this;\n        }\n        @com.fasterxml.jackson.annotation.JsonProperty(\"icmpOptions\")\n        private IcmpOptions icmpOptions;\n        public Builder icmpOptions(IcmpOptions icmpOptions) {\n            this.icmpOptions = icmpOptions;\n            this.__explicitlySet__.add(\"icmpOptions\");\n            return this;\n        }\n        @com.fasterxml.jackson.annotation.JsonProperty(\"isStateless\")\n        private Boolean isStateless;\n        public Builder isStateless(Boolean isStateless) {\n            this.isStateless = isStateless;\n            this.__explicitlySet__.add(\"isStateless\");\n            return this;\n        }\n        @com.fasterxml.jackson.annotation.JsonProperty(\"protocol\")\n        private String protocol;\n        public Builder protocol(String protocol) {\n            this.protocol = protocol;\n            this.__explicitlySet__.add(\"protocol\");\n            return this;\n        }\n        @com.fasterxml.jackson.annotation.JsonProperty(\"tcpOptions\")\n        private TcpOptions tcpOptions;\n        public Builder tcpOptions(TcpOptions tcpOptions) {\n            this.tcpOptions = tcpOptions;\n            this.__explicitlySet__.add(\"tcpOptions\");\n            return this;\n        }\n        @com.fasterxml.jackson.annotation.JsonProperty(\"udpOptions\")\n        private UdpOptions udpOptions;\n        public Builder udpOptions(UdpOptions udpOptions) {\n            this.udpOptions = udpOptions;\n            this.__explicitlySet__.add(\"udpOptions\");\n            return this;\n        }\n        @com.fasterxml.jackson.annotation.JsonIgnore\n        private final java.util.Set<String> __explicitlySet__ = new java.util.HashSet<String>();\n        public EgressSecurityRule build() {\n            EgressSecurityRule __instance__ =\n                    new EgressSecurityRule(\n                            destination,\n                            destinationType,\n                            icmpOptions,\n                            isStateless,\n                            protocol,\n                            tcpOptions,\n                            udpOptions);\n            __instance__.__explicitlySet__.addAll(__explicitlySet__);\n            return __instance__;\n        }\n        @com.fasterxml.jackson.annotation.JsonIgnore\n        public Builder copy(EgressSecurityRule o) {\n            Builder copiedBuilder =\n                    destination(o.getDestination())\n                            .destinationType(o.getDestinationType())\n                            .icmpOptions(o.getIcmpOptions())\n                            .isStateless(o.getIsStateless())\n                            .protocol(o.getProtocol())\n                            .tcpOptions(o.getTcpOptions())\n                            .udpOptions(o.getUdpOptions());\n            copiedBuilder.__explicitlySet__.retainAll(o.__explicitlySet__);\n            return copiedBuilder;\n        }\n    }\n    /**\n     * Create a new builder.\n     */\n    public static Builder builder() {\n        return new Builder();\n    }\n    /**\n     * Conceptually, this is the range of IP addresses that a packet originating from the instance\n     * can go to.\n     * <p>\n     * Allowed values:\n     * <p>\n     * IP address range in CIDR notation. For example: `192.168.1.0/24`\n     * <p>\n     * The `cidrBlock` value for a {@link Service}, if you're\n     *     setting up a security list rule for traffic destined for a particular service through\n     *     a service gateway. For example: `oci-phx-objectstorage`\n     *\n     **/\n    @com.fasterxml.jackson.annotation.JsonProperty(\"destination\")\n    String destination;\n    /**\n     * Type of destination for the rule. The default is `CIDR_BLOCK`.\n     * <p>\n     * Allowed values:\n     * <p>\n     * `CIDR_BLOCK`: If the rule's `destination` is an IP address range in CIDR notation.\n     * <p>\n     * `SERVICE_CIDR_BLOCK`: If the rule's `destination` is the `cidrBlock` value for a\n     *     {@link Service} (the rule is for traffic destined for a\n     *     particular service through a service gateway).\n     *\n     **/\n    @lombok.extern.slf4j.Slf4j\n    public enum DestinationType {\n        CidrBlock(\"CIDR_BLOCK\"),\n        ServiceCidrBlock(\"SERVICE_CIDR_BLOCK\"),\n        /**\n         * This value is used if a service returns a value for this enum that is not recognized by this\n         * version of the SDK.\n         */\n        UnknownEnumValue(null);\n        private final String value;\n        private static java.util.Map<String, DestinationType> map;\n        static {\n            map = new java.util.HashMap<>();\n            for (DestinationType v : DestinationType.values()) {\n                if (v != UnknownEnumValue) {\n                    map.put(v.getValue(), v);\n                }\n            }\n        }\n        DestinationType(String value) {\n            this.value = value;\n        }\n        @com.fasterxml.jackson.annotation.JsonValue\n        public String getValue() {\n            return value;\n        }\n        @com.fasterxml.jackson.annotation.JsonCreator\n        public static DestinationType create(String key) {\n            if (map.containsKey(key)) {\n                return map.get(key);\n            }\n            LOG.warn(\n                    \"Received unknown value '{}' for enum 'DestinationType', returning UnknownEnumValue\",\n                    key);\n            return UnknownEnumValue;\n        }\n    };\n    /**\n     * Type of destination for the rule. The default is `CIDR_BLOCK`.\n     * <p>\n     * Allowed values:\n     * <p>\n     * `CIDR_BLOCK`: If the rule's `destination` is an IP address range in CIDR notation.\n     * <p>\n     * `SERVICE_CIDR_BLOCK`: If the rule's `destination` is the `cidrBlock` value for a\n     *     {@link Service} (the rule is for traffic destined for a\n     *     particular service through a service gateway).\n     *\n     **/\n    @com.fasterxml.jackson.annotation.JsonProperty(\"destinationType\")\n    DestinationType destinationType;\n    /**\n     * Optional and valid only for ICMP. Use to specify a particular ICMP type and code\n     * as defined in\n     * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml).\n     * If you specify ICMP as the protocol but omit this object, then all ICMP types and\n     * codes are allowed. If you do provide this object, the type is required and the code is optional.\n     * To enable MTU negotiation for ingress internet traffic, make sure to allow type 3 (\\\"Destination\n     * Unreachable\\\") code 4 (\\\"Fragmentation Needed and Don't Fragment was Set\\\"). If you need to specify\n     * multiple codes for a single type, create a separate security list rule for each.\n     *\n     **/\n    @com.fasterxml.jackson.annotation.JsonProperty(\"icmpOptions\")\n    IcmpOptions icmpOptions;\n    /**\n     * A stateless rule allows traffic in one direction. Remember to add a corresponding\n     * stateless rule in the other direction if you need to support bidirectional traffic. For\n     * example, if egress traffic allows TCP destination port 80, there should be an ingress\n     * rule to allow TCP source port 80. Defaults to false, which means the rule is stateful\n     * and a corresponding rule is not necessary for bidirectional traffic.\n     *\n     **/<fim_middle>// class below has no smell\n"}