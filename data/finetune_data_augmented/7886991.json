{"text": "<fim_prefix>/*\n * Copyright 2014-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License. You may obtain\n * a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\npackage com.facebook.buck.event;\n\nimport java.util.OptionalInt;\n\n/** Base class for events about building up the action graph from the target graph. */\npublic abstract class ActionGraphEvent extends AbstractBuckEvent\n    implements LeafEvent, WorkAdvanceEvent {\n\n  public ActionGraphEvent(EventKey eventKey) {\n    super(eventKey);\n  }\n\n  @Override\n  protected String getValueString() {\n    return \"\";\n  }\n\n  @Override\n  public String getCategory() {\n    return \"build_action_graph\";\n  }\n\n  public static Started started() {\n    return new Started();\n  }\n\n  public static Finished finished(Started started) {\n    return new Finished(started, OptionalInt.empty());\n  }\n\n  public static Finished finished(Started started, int count) {\n    return new Finished(started, OptionalInt.of(count));\n  }\n\n  public static class Started extends ActionGraphEvent {\n\n    public Started() {\n      super(EventKey.unique());\n    }\n\n    @Override\n    public String getEventName() {\n      return \"BuildActionGraphStarted\";\n    }\n  }\n\n  public static class Finished extends ActionGraphEvent {\n    private OptionalInt nodeCount;\n\n    public Finished(Started started, OptionalInt count) {\n      super(started.getEventKey());\n      nodeCount = count;\n    }\n\n    @Override\n    public String getEventName() {\n      return \"BuildActionGraphFinished\";\n    }\n\n    public OptionalInt getNodeCount() {\n      return nodeCount;\n    }\n  }\n\n  /** Event for incremental action graph construction. * */\n  public static class IncrementalLoad extends ActionGraphEvent {\n    public int reusedNodeCount;\n\n    public IncrementalLoad(int reusedNodeCount) {\n      super(EventKey.unique());\n      this.reusedNodeCount = reusedNodeCount;\n    }\n\n    @Override\n    public String getEventName() {\n      return \"ActionGraphIncrementalLoad\";\n    }\n\n    public int getReusedNodeCount() {\n      return reusedNodeCount;\n    }\n  }\n\n  public static class Cache extends ActionGraphEvent implements BuckEvent {\n    private final String eventName;\n\n    public Cache(String eventName) {\n      super(EventKey.unique());\n      this.eventName = eventName;\n    }\n\n    public static Hit hit() {\n      return new Hit();\n    }\n\n    public static Miss miss(boolean cacheWasEmpty) {\n      return new Miss(cacheWasEmpty);\n    }\n\n    public static MissWithEmptyCache missWithEmptyCache() {\n      return new MissWithEmptyCache();\n    }\n\n    public static MissWithTargetGraphHashMatch missWithTargetGraphHashMatch() {\n      return new MissWithTargetGraphHashMatch();\n    }\n\n    public static MissWithTargetGraphDifference missWithTargetGraphDifference() {\n      return new MissWithTargetGraphDifference();\n    }\n\n    public static class Hit extends Cache {\n      public Hit() {\n        super(\"ActionGraphCacheHit\");\n      }\n    }\n\n<fim_suffix>    public static class Miss extends Cache {\n      public final boolean cacheWasEmpty;\n\n      public Miss(boolean cacheWasEmpty) {\n        super(\"ActionGraphCacheMiss\");\n        this.cacheWasEmpty = cacheWasEmpty;\n      }\n    }\n\n    public static class MissWithEmptyCache extends Cache {\n      public MissWithEmptyCache() {\n        super(\"ActionGraphCacheMissWithEmptyCache\");\n      }\n    }\n\n    public static class MissWithTargetGraphHashMatch extends Cache {\n      public MissWithTargetGraphHashMatch() {\n        super(\"ActionGraphCacheMissWithTargetGraphHashMatch\");\n      }\n    }\n\n    public static class MissWithTargetGraphDifference extends Cache {\n      public MissWithTargetGraphDifference() {\n        super(\"ActionGraphCacheMissWithTargetGraphDifference\");\n      }\n    }\n\n    @Override\n    public String getEventName() {\n      return eventName;\n    }\n  }\n}<fim_middle>// class below has no smell\n"}