{"text": "<fim_prefix>\t\t\treturn row.getMap(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for Decimal.\n\t */\n\tpublic static class DecimalConverter extends IdentityConverter<Decimal> {\n\t\tprivate static final long serialVersionUID = 3825744951173809617L;\n\t\tprivate final int precision;\n\t\tprivate final int scale;\n\t\tpublic DecimalConverter(int precision, int scale) {\n\t\t\tthis.precision = precision;\n\t\t\tthis.scale = scale;\n\t\t}\n\t\t@Override\n\t\tDecimal toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getDecimal(column, precision, scale);\n\t\t}\n\t}\n\t/**\n\t * Converter for BinaryGeneric.\n\t */\n\tpublic static class BinaryGenericConverter extends IdentityConverter<BinaryGeneric> {\n\t\tprivate static final long serialVersionUID = 1436229503920584273L;\n\t\tpublic static final BinaryGenericConverter INSTANCE = new BinaryGenericConverter();\n\t\tprivate BinaryGenericConverter() {}\n\t\t@Override\n\t\tBinaryGeneric toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getGeneric(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for String.\n\t */\n\tpublic static class StringConverter extends DataFormatConverter<BinaryString, String> {\n\t\tprivate static final long serialVersionUID = 4713165079099282774L;\n\t\tpublic static final StringConverter INSTANCE = new StringConverter();\n\t\tprivate StringConverter() {}\n\t\t@Override\n\t\tBinaryString toInternalImpl(String value) {\n\t\t\treturn BinaryString.fromString(value);\n\t\t}\n\t\t@Override\n\t\tString toExternalImpl(BinaryString value) {\n\t\t\treturn value.toString();\n\t\t}\n\t\t@Override\n\t\tString toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getString(column).toString();\n\t\t}\n\t}\n\t/**\n\t * Converter for BigDecimal.\n\t */\n\tpublic static class BigDecimalConverter extends DataFormatConverter<Decimal, BigDecimal> {\n\t\tprivate static final long serialVersionUID = -6586239704060565834L;\n\t\tprivate final int precision;\n\t\tprivate final int scale;\n\t\tpublic BigDecimalConverter(int precision, int scale) {\n\t\t\tthis.precision = precision;\n\t\t\tthis.scale = scale;\n\t\t}\n\t\t@Override\n\t\tDecimal toInternalImpl(BigDecimal value) {\n\t\t\treturn Decimal.fromBigDecimal(value, precision, scale);\n\t\t}\n\t\t@Override\n\t\tBigDecimal toExternalImpl(Decimal value) {\n\t\t\treturn value.toBigDecimal();\n\t\t}\n\t\t@Override\n\t\tBigDecimal toExternalImpl(BaseRow row, int column) {\n\t\t\treturn toExternalImpl(row.getDecimal(column, precision, scale));\n\t\t}\n\t}\n\t/**\n\t * Converter for generic.\n\t */\n\tpublic static class GenericConverter<T> extends DataFormatConverter<BinaryGeneric<T>, T> {\n\t\tprivate static final long serialVersionUID = -3611718364918053384L;\n\t\tprivate final TypeSerializer<T> serializer;\n\t\tpublic GenericConverter(TypeSerializer<T> serializer) {\n\t\t\tthis.serializer = serializer;\n\t\t}\n\t\t@Override\n\t\tBinaryGeneric<T> toInternalImpl(T value) {\n\t\t\treturn new BinaryGeneric<>(value, serializer);\n\t\t}\n\t\t@Override\n\t\tT toExternalImpl(BinaryGeneric<T> value) {\n\t\t\treturn BinaryGeneric.getJavaObjectFromBinaryGeneric(value, serializer);\n\t\t}\n\t\t@Override\n\t\tT toExternalImpl(BaseRow row, int column) {\n\t\t\treturn (T) toExternalImpl(row.getGeneric(column));\n\t\t}\n\t}\n\t/**\n\t * Converter for date.\n\t */\n\tpublic static class DateConverter extends DataFormatConverter<Integer, Date> {\n\t\tprivate static final long serialVersionUID = 1343457113582411650L;\n\t\tpublic static final DateConverter INSTANCE = new DateConverter();\n\t\tprivate DateConverter() {}\n\t\t@Override\n\t\tInteger toInternalImpl(Date value) {\n\t\t\treturn DateTimeUtils.toInt(value);\n\t\t}\n\t\t@Override\n\t\tDate toExternalImpl(Integer value) {\n\t\t\treturn DateTimeUtils.internalToDate(value);\n\t\t}\n\t\t@Override\n\t\tDate toExternalImpl(BaseRow row, int column) {\n\t\t\treturn toExternalImpl(row.getInt(column));\n\t\t}\n\t}\n\t/**\n\t * Converter for time.\n\t */\n\tpublic static class TimeConverter extends DataFormatConverter<Integer, Time> {\n\t\tprivate static final long serialVersionUID = -8061475784916442483L;\n\t\tpublic static final TimeConverter INSTANCE = new TimeConverter();\n\t\tprivate TimeConverter() {}\n\t\t@Override\n\t\tInteger toInternalImpl(Time value) {\n\t\t\treturn DateTimeUtils.toInt(value);\n\t\t}\n\t\t@Override\n\t\tTime toExternalImpl(Integer value) {\n\t\t\treturn DateTimeUtils.internalToTime(value);\n\t\t}\n\t\t@Override\n\t\tTime toExternalImpl(BaseRow row, int column) {\n\t\t\treturn toExternalImpl(row.getInt(column));\n\t\t}\n\t}\n\t/**\n\t * Converter for timestamp.\n\t */\n\tpublic static class TimestampConverter extends DataFormatConverter<Long, Timestamp> {\n\t\tprivate static final long serialVersionUID = -779956524906131757L;\n\t\tpublic static final TimestampConverter INSTANCE = new TimestampConverter();\n\t\tprivate TimestampConverter() {}\n\t\t@Override\n\t\tLong toInternalImpl(Timestamp value) {\n\t\t\treturn DateTimeUtils.toLong(value);\n\t\t}\n\t\t@Override\n\t\tTimestamp toExternalImpl(Long value) {\n\t\t\treturn DateTimeUtils.internalToTimestamp(value);\n\t\t}\n\t\t@Override\n\t\tTimestamp toExternalImpl(BaseRow row, int column) {\n\t\t\treturn toExternalImpl(row.getLong(column));\n\t\t}\n\t}\n\t/**\n\t * Converter for primitive int array.\n\t */\n\tpublic static class PrimitiveIntArrayConverter extends DataFormatConverter<BinaryArray, int[]> {\n\t\tprivate static final long serialVersionUID = 1780941126232395638L;\n\t\tpublic static final PrimitiveIntArrayConverter INSTANCE = new PrimitiveIntArrayConverter();\n\t\tprivate PrimitiveIntArrayConverter() {}\n\t\t@Override\n\t\tBinaryArray toInternalImpl(int[] value) {\n\t\t\treturn BinaryArray.fromPrimitiveArray(value);\n\t\t}\n\t\t@Override\n\t\tint[] toExternalImpl(BinaryArray value) {\n\t\t\treturn value.toIntArray();\n\t\t}\n\t\t@Override\n\t\tint[] toExternalImpl(BaseRow row, int column) {\n\t\t\treturn toExternalImpl(row.getArray(column));\n\t\t}\n\t}\n\t/**\n\t * Converter for primitive boolean array.\n\t */\n\tpublic static class PrimitiveBooleanArrayConverter extends DataFormatConverter<BinaryArray, boolean[]> {\n\t\tprivate static final long serialVersionUID = -4037693692440282141L;\n\t\tpublic static final PrimitiveBooleanArrayConverter INSTANCE = new PrimitiveBooleanArrayConverter();\n\t\tprivate PrimitiveBooleanArrayConverter() {}\n\t\t@Override\n\t\tBinaryArray toInternalImpl(boolean[] value) {\n\t\t\treturn BinaryArray.fromPrimitiveArray(value);\n\t\t}\n\t\t@Override\n\t\tboolean[] toExternalImpl(BinaryArray value) {\n\t\t\treturn value.toBooleanArray();\n\t\t}\n\t\t@Override\n\t\tboolean[] toExternalImpl(BaseRow row, int column) {\n\t\t\treturn toExternalImpl(row.getArray(column));\n\t\t}\n\t}\n\t/**\n\t * Converter for primitive byte array.\n\t */\n<fim_suffix>\tpublic static class PrimitiveByteArrayConverter extends IdentityConverter<byte[]> {\n\t\tprivate static final long serialVersionUID = -2007960927801689921L;\n\t\tpublic static final PrimitiveByteArrayConverter INSTANCE = new PrimitiveByteArrayConverter();\n\t\tprivate PrimitiveByteArrayConverter() {}\n\t\t@Override\n\t\tbyte[] toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getBinary(column);\n\t\t}\n\t}<fim_middle>// class below has no smell\n"}