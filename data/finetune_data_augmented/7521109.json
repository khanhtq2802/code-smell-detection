{"text": "<fim_prefix>/*\n * Copyright 2011 the original author or authors.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.data.hadoop.fs;\n\nimport java.net.URI;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.util.StringUtils;\n\n/**\n * FactoryBean for creating Hadoop {@link FileSystem} instances. Useful for interacting with\n * HDFS from outside a Map Reduce job. If no parameter is given, a file system using the installed\n * Hadoop defaults will be created.\n * \n * @author Costin Leau\n */\n<fim_suffix>public class FileSystemFactoryBean implements InitializingBean, DisposableBean, FactoryBean<FileSystem> {\n\n\tprivate FileSystem fs;\n\tprivate Configuration configuration;\n\tprivate URI uri;\n\tprivate String user;\n\tprivate boolean closeAll = false;\n\tprivate boolean close = true;\n\n\tpublic void afterPropertiesSet() throws Exception {\n\t\tConfiguration cfg = (configuration != null ? configuration : new Configuration(true));\n\t\tif (uri == null) {\n\t\t\turi = FileSystem.getDefaultUri(cfg);\n\t\t}\n\t\tif (StringUtils.hasText(user)) {\n\t\t\tfs = FileSystem.get(uri, cfg, user);\n\t\t}\n\t\telse {\n\t\t\tfs = FileSystem.get(uri, cfg);\n\t\t}\n\t}\n\n\tpublic void destroy() throws Exception {\n\t\tif (fs != null && close) {\n\t\t\tfs.close();\n\t\t}\n\t\tfs = null;\n\n\t\tif (closeAll) {\n\t\t\t// TODO: potentially call close all just for the current user\n\t\t\tFileSystem.closeAll();\n\t\t}\n\t}\n\n\n\tpublic FileSystem getObject() throws Exception {\n\t\treturn fs;\n\t}\n\n\tpublic Class<?> getObjectType() {\n\t\treturn (fs != null ? fs.getClass() : FileSystem.class);\n\t}\n\n\tpublic boolean isSingleton() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Sets the Hadoop configuration for this file system.\n\t * \n\t * @param configuration The configuration to set.\n\t */\n\tpublic void setConfiguration(Configuration configuration) {\n\t\tthis.configuration = configuration;\n\t}\n\n\t/**\n\t * Sets the URI (if available) for this file system.\n\t * \n\t * @param uri The uri to set.\n\t */\n\tpublic void setUri(URI uri) {\n\t\tthis.uri = uri;\n\t}\n\n\t/**\n\t * Sets the user impersonation (optional) for creating this file-system.\n\t * Should be used when running against a Hadoop Kerberos cluster. \n\t * \n\t * @param user user/group information\n\t */\n\tpublic void setUser(String user) {\n\t\tthis.user = user;\n\t}\n\n\t/**\n\t * Indicates whether all the Hadoop file systems should be closed once this factory is destroyed.\n\t * False by default - should be turned on as a safety measure when the app controls the entire lifecycle of Hadoop inside\n\t * a JVM.\n\t *\n\t * @param closeAll the close all\n\t * @see FileSystem#closeAll()\n\t */\n\tpublic void setCloseAll(boolean closeAll) {\n\t\tthis.closeAll = closeAll;\n\t}\n\n\t/**\n\t * Indicates whether the Hadoop file systems should be closed once this factory is destroyed.\n\t * True by default - should be turned off when running 'embedded' or if long running operations outlive the application context.\n\t *\n\t * @param close close\n\t * @see FileSystem#close()\n\t */\n\tpublic void setClose(boolean close) {\n\t\tthis.close = close;\n\t}\n}<fim_middle>// class below has no smell\n"}