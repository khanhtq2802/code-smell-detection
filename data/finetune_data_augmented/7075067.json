{"text": "<fim_prefix>/*\n * Copyright 2016 LinkedIn Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.linkedin.gradle.python.tasks.action;\n\nimport com.linkedin.gradle.python.extension.PythonDetails;\nimport com.linkedin.gradle.python.tasks.execution.TeeOutputContainer;\nimport com.linkedin.gradle.python.util.pip.PipConfFile;\nimport com.linkedin.gradle.python.wheel.EditablePythonAbiContainer;\nimport org.gradle.api.Project;\nimport org.gradle.api.artifacts.Configuration;\nimport org.gradle.api.logging.Logger;\nimport org.gradle.api.logging.Logging;\nimport org.gradle.process.ExecResult;\n\nimport javax.annotation.Nullable;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.UncheckedIOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.function.Consumer;\n\npublic class CreateVirtualEnvAction {\n\n    private static Logger log = Logging.getLogger(CreateVirtualEnvAction.class);\n    private final Project project;\n    private final PythonDetails pythonDetails;\n    private final EditablePythonAbiContainer editablePythonAbiContainer;\n    private final TeeOutputContainer container = new TeeOutputContainer();\n\n<fim_suffix>    public CreateVirtualEnvAction(Project project, PythonDetails pythonDetails,\n                                  EditablePythonAbiContainer editablePythonAbiContainer) {\n        this.project = project;\n        this.pythonDetails = pythonDetails;\n        this.editablePythonAbiContainer = editablePythonAbiContainer;\n    }\n\n    public void buildVenv(@Nullable Consumer<File> customize) {\n        PipConfFile pipConfFile = new PipConfFile(project, pythonDetails);\n\n        File packageDir = makeTempDir().toFile();\n        getPyGradleBootstrap(project).getFiles().forEach(file -> {\n            project.copy(copySpec -> {\n                copySpec.from(project.tarTree(file.getPath()));\n                copySpec.into(packageDir);\n                copySpec.eachFile(it -> {\n                    // Remove the virtualenv-<version> from the file.\n                    Path pathInsideTar = Paths.get(it.getPath());\n                    if (pathInsideTar.getNameCount() > 1) {\n                        it.setPath(pathInsideTar.subpath(1, pathInsideTar.getNameCount()).toString());\n                    }\n                });\n            });\n        });\n\n        if (null != customize) {\n            customize.accept(packageDir);\n        }\n\n        OutputStream outputStream = new ByteArrayOutputStream();\n        ExecResult execResult = project.exec(execSpec -> {\n            container.setOutputs(execSpec);\n            // For virtualenv >= 16.1, use and invoke via `-m virtualenv` below.\n            // execSpec.environment(\"PYTHONPATH\", new File(packageDir, \"src\"));\n            execSpec.commandLine(\n                pythonDetails.getSystemPythonInterpreter(),\n                new File(packageDir, \"virtualenv.py\"),\n                \"--never-download\",\n                \"--python\", pythonDetails.getSystemPythonInterpreter(),\n                \"--prompt\", pythonDetails.getVirtualEnvPrompt(),\n                pythonDetails.getVirtualEnv()\n            );\n            execSpec.setErrorOutput(outputStream);\n            execSpec.setStandardOutput(outputStream);\n            execSpec.setIgnoreExitValue(true);\n        });\n\n        if (log.isInfoEnabled()) {\n            log.info(outputStream.toString());\n        } else if (execResult.getExitValue() != 0) {\n            log.lifecycle(outputStream.toString());\n        }\n\n        execResult.assertNormalExitValue();\n\n        ProbeVenvInfoAction.probeVenv(project, pythonDetails, editablePythonAbiContainer);\n\n        project.delete(packageDir);\n        try {\n            pipConfFile.buildPipConfFile();\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }\n\n    private Configuration getPyGradleBootstrap(Project project) {\n        return project.getConfigurations().getByName(\"pygradleBootstrap\");\n    }\n\n    private Path makeTempDir() {\n        try {\n            return Files.createTempDirectory(\"virtualenv-dir\");\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}