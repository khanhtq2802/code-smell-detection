{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.cxf.bus.managers;\n\nimport java.util.Collection;\nimport java.util.ListIterator;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\nimport org.apache.cxf.Bus;\nimport org.apache.cxf.common.injection.NoJSR250Annotations;\nimport org.apache.cxf.configuration.ConfiguredBeanLocator;\nimport org.apache.cxf.endpoint.Client;\nimport org.apache.cxf.endpoint.ClientLifeCycleListener;\nimport org.apache.cxf.endpoint.ClientLifeCycleManager;\nimport org.apache.cxf.extension.BusExtension;\n\n@NoJSR250Annotations\npublic class ClientLifeCycleManagerImpl implements ClientLifeCycleManager, BusExtension {\n\n    private CopyOnWriteArrayList<ClientLifeCycleListener> listeners\n        = new CopyOnWriteArrayList<>();\n\n    public ClientLifeCycleManagerImpl() {\n\n    }\n\n    public ClientLifeCycleManagerImpl(Bus b) {\n        Collection<? extends ClientLifeCycleListener> l = b.getExtension(ConfiguredBeanLocator.class)\n                .getBeansOfType(ClientLifeCycleListener.class);\n        if (l != null) {\n            listeners.addAll(l);\n        }\n    }\n\n    public Class<?> getRegistrationType() {\n        return ClientLifeCycleManager.class;\n    }\n\n    public void registerListener(ClientLifeCycleListener listener) {\n        listeners.addIfAbsent(listener);\n    }\n\n<fim_suffix>    public void clientCreated(Client client) {\n        for (ClientLifeCycleListener listener : listeners) {\n            listener.clientCreated(client);\n        }\n    }\n\n    public void clientDestroyed(Client client) {\n        ListIterator<ClientLifeCycleListener> li = listeners.listIterator(listeners.size());\n        while (li.hasPrevious()) {\n            li.previous().clientDestroyed(client);\n        }\n    }\n\n    public void unRegisterListener(ClientLifeCycleListener listener) {\n        listeners.remove(listener);\n    }\n\n}<fim_middle>// function below has no smell\n"}