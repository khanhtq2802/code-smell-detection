{"text": "<fim_prefix>            }\n            // update the context\n            List<SignatureScheme> sss =\n                    SignatureScheme.getSupportedAlgorithms(\n                            shc.algorithmConstraints, shc.negotiatedProtocol,\n                            spec.signatureSchemes);\n            shc.peerRequestedSignatureSchemes = sss;\n            // If no \"signature_algorithms_cert\" extension is present, then\n            // the \"signature_algorithms\" extension also applies to\n            // signatures appearing in certificates.\n            SignatureSchemesSpec certSpec =\n                    (SignatureSchemesSpec)shc.handshakeExtensions.get(\n                            SSLExtension.CH_SIGNATURE_ALGORITHMS_CERT);\n            if (certSpec == null) {\n                shc.peerRequestedCertSignSchemes = sss;\n                shc.handshakeSession.setPeerSupportedSignatureAlgorithms(sss);\n            }\n            if (!shc.isResumption &&\n                    shc.negotiatedProtocol.useTLS13PlusSpec()) {\n                if (shc.sslConfig.clientAuthType !=\n                        ClientAuthType.CLIENT_AUTH_NONE) {\n                    shc.handshakeProducers.putIfAbsent(\n                            SSLHandshake.CERTIFICATE_REQUEST.id,\n                            SSLHandshake.CERTIFICATE_REQUEST);\n                }\n                shc.handshakeProducers.put(\n                        SSLHandshake.CERTIFICATE.id,\n                        SSLHandshake.CERTIFICATE);\n                shc.handshakeProducers.putIfAbsent(\n                        SSLHandshake.CERTIFICATE_VERIFY.id,\n                        SSLHandshake.CERTIFICATE_VERIFY);\n            }\n        }\n    }\n    /**\n     * The absence processing if a \"signature_algorithms\" extension is\n     * not present in the ClientHello handshake message.\n     */\n    private static final\n            class CHSignatureSchemesOnLoadAbsence implements HandshakeAbsence {\n        @Override\n        public void absent(ConnectionContext context,\n                HandshakeMessage message) throws IOException {\n            // The consuming happens in server side only.\n            ServerHandshakeContext shc = (ServerHandshakeContext)context;\n            // This is a mandatory extension for certificate authentication\n            // in TLS 1.3.\n            //\n            // We may support the server authentication other than X.509\n            // certificate later.\n            if (shc.negotiatedProtocol.useTLS13PlusSpec()) {\n                throw shc.conContext.fatal(Alert.MISSING_EXTENSION,\n                    \"No mandatory signature_algorithms extension in the \" +\n                    \"received CertificateRequest handshake message\");\n            }\n        }\n    }\n    /**\n     * The absence processing if a \"signature_algorithms\" extension is\n     * not present in the ClientHello handshake message.\n     */\n    private static final\n            class CHSignatureSchemesOnTradeAbsence implements HandshakeAbsence {\n        @Override\n        public void absent(ConnectionContext context,\n                HandshakeMessage message) throws IOException {\n            // The consuming happens in server side only.\n            ServerHandshakeContext shc = (ServerHandshakeContext)context;\n            if (shc.negotiatedProtocol.useTLS12PlusSpec()) {\n                // Use default hash and signature algorithm:\n                //      {sha1,rsa}\n                //      {sha1,dsa}\n                //      {sha1,ecdsa}\n                // Per RFC 5246, If the client supports only the default hash\n                // and signature algorithms, it MAY omit the\n                // signature_algorithms extension.  If the client does not\n                // support the default algorithms, or supports other hash\n                // and signature algorithms (and it is willing to use them\n                // for verifying messages sent by the server, i.e., server\n                // certificates and server key exchange), it MUST send the\n                // signature_algorithms extension, listing the algorithms it\n                // is willing to accept.\n                List<SignatureScheme> schemes = Arrays.asList(\n                        SignatureScheme.RSA_PKCS1_SHA1,\n                        SignatureScheme.DSA_SHA1,\n                        SignatureScheme.ECDSA_SHA1\n                );\n                shc.peerRequestedSignatureSchemes = schemes;\n                if (shc.peerRequestedCertSignSchemes == null ||\n                        shc.peerRequestedCertSignSchemes.isEmpty()) {\n                    shc.peerRequestedCertSignSchemes = schemes;\n                }\n                // Use the default peer signature algorithms.\n                shc.handshakeSession.setUseDefaultPeerSignAlgs();\n            }\n        }\n    }\n    /**\n     * Network data producer of a \"signature_algorithms\" extension in\n     * the CertificateRequest handshake message.\n     */\n    private static final\n            class CRSignatureSchemesProducer implements HandshakeProducer {\n        // Prevent instantiation of this class.\n        private CRSignatureSchemesProducer() {\n            // blank\n        }\n        @Override\n        public byte[] produce(ConnectionContext context,\n                HandshakeMessage message) throws IOException {\n            // The producing happens in server side only.\n            ServerHandshakeContext shc = (ServerHandshakeContext)context;\n            // Is it a supported and enabled extension?\n            //\n            // Note that this is a mandatory extension for CertificateRequest\n            // handshake message in TLS 1.3.\n            if (!shc.sslConfig.isAvailable(\n                    SSLExtension.CR_SIGNATURE_ALGORITHMS)) {\n                throw shc.conContext.fatal(Alert.MISSING_EXTENSION,\n                        \"No available signature_algorithms extension \" +\n                        \"for client certificate authentication\");\n            }\n            // Produce the extension.\n            List<SignatureScheme> sigAlgs =\n                    SignatureScheme.getSupportedAlgorithms(\n                            shc.algorithmConstraints,\n                            List.of(shc.negotiatedProtocol));\n            int vectorLen = SignatureScheme.sizeInRecord() * sigAlgs.size();\n            byte[] extData = new byte[vectorLen + 2];\n            ByteBuffer m = ByteBuffer.wrap(extData);\n            Record.putInt16(m, vectorLen);\n            for (SignatureScheme ss : sigAlgs) {\n                Record.putInt16(m, ss.id);\n            }\n            // Update the context.\n            shc.handshakeExtensions.put(\n                    SSLExtension.CR_SIGNATURE_ALGORITHMS,\n                    new SignatureSchemesSpec(shc.localSupportedSignAlgs));\n            return extData;\n        }\n    }\n    /**\n     * Network data consumer of a \"signature_algorithms\" extension in\n     * the CertificateRequest handshake message.\n     */\n    private static final\n            class CRSignatureSchemesConsumer implements ExtensionConsumer {\n        // Prevent instantiation of this class.\n        private CRSignatureSchemesConsumer() {\n            // blank\n        }\n        @Override\n        public void consume(ConnectionContext context,\n            HandshakeMessage message, ByteBuffer buffer) throws IOException {\n            // The consuming happens in client side only.\n            ClientHandshakeContext chc = (ClientHandshakeContext)context;\n            // Is it a supported and enabled extension?\n            //\n            // Note that this is a mandatory extension for CertificateRequest\n            // handshake message in TLS 1.3.\n            if (!chc.sslConfig.isAvailable(\n                    SSLExtension.CR_SIGNATURE_ALGORITHMS)) {\n                throw chc.conContext.fatal(Alert.HANDSHAKE_FAILURE,\n                        \"No available signature_algorithms extension \" +\n                        \"for client certificate authentication\");\n            }\n            // Parse the extension.\n            SignatureSchemesSpec spec;\n            try {\n                spec = new SignatureSchemesSpec(buffer);\n            } catch (IOException ioe) {\n                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n            }\n            List<SignatureScheme> knownSignatureSchemes = new LinkedList<>();\n            for (int id : spec.signatureSchemes) {\n                SignatureScheme ss = SignatureScheme.valueOf(id);\n                if (ss != null) {\n                    knownSignatureSchemes.add(ss);\n                }\n            }\n            // Update the context.\n            // chc.peerRequestedSignatureSchemes = knownSignatureSchemes;\n            chc.handshakeExtensions.put(\n                    SSLExtension.CR_SIGNATURE_ALGORITHMS, spec);\n            // No impact on session resumption.\n        }\n    }\n    /**\n     * After session creation consuming of a \"signature_algorithms\"\n     * extension in the CertificateRequest handshake message.\n     */\n<fim_suffix>    private static final class CRSignatureSchemesUpdate\n            implements HandshakeConsumer {\n        // Prevent instantiation of this class.\n        private CRSignatureSchemesUpdate() {\n            // blank\n        }\n        @Override\n        public void consume(ConnectionContext context,\n                HandshakeMessage message) throws IOException {\n            // The consuming happens in client side only.\n            ClientHandshakeContext chc = (ClientHandshakeContext)context;\n            SignatureSchemesSpec spec =\n                    (SignatureSchemesSpec)chc.handshakeExtensions.get(\n                            SSLExtension.CR_SIGNATURE_ALGORITHMS);\n            if (spec == null) {\n                // Ignore, no \"signature_algorithms\" extension requested.\n                return;\n            }\n            // update the context\n            List<SignatureScheme> sss =\n                    SignatureScheme.getSupportedAlgorithms(\n                            chc.algorithmConstraints, chc.negotiatedProtocol,\n                            spec.signatureSchemes);\n            chc.peerRequestedSignatureSchemes = sss;\n            // If no \"signature_algorithms_cert\" extension is present, then\n            // the \"signature_algorithms\" extension also applies to\n            // signatures appearing in certificates.\n            SignatureSchemesSpec certSpec =\n                    (SignatureSchemesSpec)chc.handshakeExtensions.get(\n                            SSLExtension.CR_SIGNATURE_ALGORITHMS_CERT);\n            if (certSpec == null) {\n                chc.peerRequestedCertSignSchemes = sss;\n                chc.handshakeSession.setPeerSupportedSignatureAlgorithms(sss);\n            }\n        }\n    }<fim_middle>// class below has no smell\n"}