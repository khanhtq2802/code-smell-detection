{"text": "<fim_prefix>/*\n * Copyright (c) 2017-2018 Bosch Software Innovations GmbH.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v2.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/org/documents/epl-2.0/index.php\n *\n * SPDX-License-Identifier: EPL-2.0\n */\npackage org.eclipse.ditto.model.connectivity;\n\nimport java.net.URI;\nimport java.text.MessageFormat;\n\nimport javax.annotation.Nullable;\nimport javax.annotation.concurrent.Immutable;\nimport javax.annotation.concurrent.NotThreadSafe;\n\nimport org.eclipse.ditto.json.JsonObject;\nimport org.eclipse.ditto.model.base.common.HttpStatusCode;\nimport org.eclipse.ditto.model.base.exceptions.DittoRuntimeException;\nimport org.eclipse.ditto.model.base.exceptions.DittoRuntimeExceptionBuilder;\nimport org.eclipse.ditto.model.base.headers.DittoHeaders;\nimport org.eclipse.ditto.model.base.json.JsonParsableException;\n\n/**\n * Thrown if a placeholder in the connection configuration could not be resolved.\n */\n@Immutable\n@JsonParsableException(errorCode = UnresolvedPlaceholderException.ERROR_CODE)\npublic final class UnresolvedPlaceholderException extends DittoRuntimeException\n        implements ConnectivityException {\n\n    /**\n     * Error code of this exception.\n     */\n    public static final String ERROR_CODE = ERROR_CODE_PREFIX + \"connection.placeholder.unresolved\";\n\n    private static final String MESSAGE_TEMPLATE = \"The placeholder ''{0}'' could not be resolved.\";\n\n    private static final String DEFAULT_DESCRIPTION = \"Some placeholders could not be resolved. \"\n            + \"Check the spelling of the placeholder and make sure all required headers are set.\";\n\n    private static final long serialVersionUID = 6272495302389903822L;\n\n    private UnresolvedPlaceholderException(final DittoHeaders dittoHeaders,\n            @Nullable final String message,\n            @Nullable final String description,\n            @Nullable final Throwable cause,\n            @Nullable final URI href) {\n        super(ERROR_CODE, HttpStatusCode.BAD_REQUEST, dittoHeaders, message, description, cause, href);\n    }\n\n    /**\n     * A mutable builder for a {@code {@link UnresolvedPlaceholderException}}.\n     *\n     * @return the builder.\n     */\n    public static Builder newBuilder() {\n        return new Builder();\n    }\n\n    /**\n     * A mutable builder for a {@code {@link UnresolvedPlaceholderException}}.\n     *\n     * @param unresolvedPlaceholder the unresolved placeholder.\n     * @return the builder.\n     */\n    public static Builder newBuilder(final String unresolvedPlaceholder) {\n        return new Builder(unresolvedPlaceholder);\n    }\n\n    /**\n     * Constructs a new {@code UnresolvedPlaceholderException} object with given message.\n     *\n     * @param message detail message. This message can be later retrieved by the {@link #getMessage()} method.\n     * @param dittoHeaders the headers of the command which resulted in this exception.\n     * @return the new UnresolvedPlaceholderException.\n     */\n    public static UnresolvedPlaceholderException fromMessage(final String message,\n            final DittoHeaders dittoHeaders) {\n        return new Builder()\n                .dittoHeaders(dittoHeaders)\n                .message(message)\n                .build();\n    }\n\n    /**\n     * Constructs a new {@code UnresolvedPlaceholderException} object with the exception message extracted from\n     * the given\n     * JSON object.\n     *\n     * @param jsonObject the JSON to read the {@link JsonFields#MESSAGE} field from.\n     * @param dittoHeaders the headers of the command which resulted in this exception.\n     * @return the new UnresolvedPlaceholderException.\n     * @throws org.eclipse.ditto.json.JsonMissingFieldException if the {@code jsonObject} does not have the {@link\n     * JsonFields#MESSAGE} field.\n     */\n    public static UnresolvedPlaceholderException fromJson(final JsonObject jsonObject,\n            final DittoHeaders dittoHeaders) {\n        return new Builder()\n                .dittoHeaders(dittoHeaders)\n                .message(readMessage(jsonObject))\n                .description(readDescription(jsonObject).orElse(DEFAULT_DESCRIPTION))\n                .href(readHRef(jsonObject).orElse(null))\n                .build();\n    }\n\n    /**\n     * A mutable builder with a fluent API for a {@link UnresolvedPlaceholderException}.\n     */\n    @NotThreadSafe\n    public static final class Builder extends DittoRuntimeExceptionBuilder<UnresolvedPlaceholderException> {\n\n        private Builder() {\n            description(DEFAULT_DESCRIPTION);\n        }\n\n        private Builder(final String unresolvedPlaceholder) {\n            this();\n            message(MessageFormat.format(MESSAGE_TEMPLATE, unresolvedPlaceholder));\n        }\n\n<fim_suffix>        @Override\n        protected UnresolvedPlaceholderException doBuild(final DittoHeaders dittoHeaders,\n                @Nullable final String message,\n                @Nullable final String description,\n                @Nullable final Throwable cause,\n                @Nullable final URI href) {\n            return new UnresolvedPlaceholderException(dittoHeaders, message, description, cause, href);\n        }\n\n    }\n\n}<fim_middle>// function below has no smell\n"}