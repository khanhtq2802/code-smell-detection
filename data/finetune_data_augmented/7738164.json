{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.brooklyn.core.mgmt.ha.dto;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static com.google.common.base.Preconditions.checkState;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport org.apache.brooklyn.api.mgmt.ha.ManagementNodeSyncRecord;\nimport org.apache.brooklyn.api.mgmt.ha.ManagementPlaneSyncRecord;\nimport org.apache.brooklyn.util.collections.MutableMap;\n\nimport com.google.common.base.Objects;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Maps;\n\n<fim_suffix>public class ManagementPlaneSyncRecordImpl implements ManagementPlaneSyncRecord, Serializable {\n\n    private static final long serialVersionUID = -4207907303446336973L;\n\n    public static Builder builder() {\n        return new Builder();\n    }\n    \n    public static class Builder {\n        protected String masterNodeId;\n        protected final Map<String,ManagementNodeSyncRecord> nodes = MutableMap.of();\n        \n        public Builder masterNodeId(String val) {\n            masterNodeId = val; return this;\n        }\n        public Builder nodes(Iterable<ManagementNodeSyncRecord> vals) {\n            checkState(!Iterables.contains(checkNotNull(vals, \"nodes must not be null\"), null),  \"nodes must not contain null: %s\", vals);\n            for (ManagementNodeSyncRecord val: vals) nodes.put(val.getNodeId(), val);\n            return this;\n        }\n        public Builder node(ManagementNodeSyncRecord val) {\n            checkNotNull(val, \"node must not be null\"); \n            nodes.put(val.getNodeId(), val);\n            return this;\n        }\n        public ManagementPlaneSyncRecord build() {\n            return new ManagementPlaneSyncRecordImpl(this);\n        }\n    }\n\n    private String masterNodeId;\n    private Map<String, ManagementNodeSyncRecord> managementNodes;\n    \n    private ManagementPlaneSyncRecordImpl(Builder builder) {\n        masterNodeId = builder.masterNodeId;\n        managementNodes = Maps.newLinkedHashMap();\n        for (ManagementNodeSyncRecord node : builder.nodes.values()) {\n            checkState(!managementNodes.containsKey(node.getNodeId()), \"duplicate nodeId %s\", node.getNodeId());\n            managementNodes.put(node.getNodeId(), node);\n        }\n    }\n\n    @Override\n    public String getMasterNodeId() {\n        return masterNodeId;\n    }\n    \n    @Override\n    public Map<String, ManagementNodeSyncRecord> getManagementNodes() {\n        return managementNodes;\n    }\n\n    @Override\n    public String toString() {\n        return Objects.toStringHelper(this)\n                .add(\"masterNodeId\", masterNodeId)\n                .add(\"nodes\", managementNodes.keySet())\n                .toString();\n    }\n\n    @Override\n    public String toVerboseString() {\n        return toString();\n    }\n}<fim_middle>// class below has no smell\n"}