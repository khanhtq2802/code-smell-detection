{"text": "<fim_prefix>                    pageInstance.refresh(monitor, context);\n                }\n            } catch (final CanceledException e) {\n                return Status.CANCEL_STATUS;\n            } catch (final TransportRequestHandlerCanceledException e) {\n                return Status.CANCEL_STATUS;\n            } catch (final Exception e) {\n                log.error(\"Failed to refresh Team Explorer page\", e); //$NON-NLS-1$\n                // Return a status of WARNING so that the progress monitor won't\n                // display a modal dialog for an ERROR status. We'll handle the\n                // exception in the job adapter's 'done' method.\n                return new Status(Status.WARNING, TFSCommonClientPlugin.PLUGIN_ID, null, e);\n            }\n            return monitor.isCanceled() ? Status.CANCEL_STATUS : Status.OK_STATUS;\n        }\n    }\n    private class PageRefreshJobChangeListener extends JobChangeAdapter {\n        @Override\n        public void done(final IJobChangeEvent event) {\n            final TeamExplorerNavigationItemConfig item =\n                (TeamExplorerNavigationItemConfig) event.getJob().getProperty(NAVITEM_CONFIG_DATA_NAME);\n            refreshView(item);\n        }\n    }\n    private class TitleBarMenuListener implements IMenuListener {\n        @Override\n        public void menuAboutToShow(final IMenuManager menuManager) {\n            // add the navigate to HOME page command.\n            final TeamExplorerNavigationItemConfig homeNavItem = configuration.getHomeNavigationItem();\n            final Action homeAction = new Action(configuration.getHomeNavigationItem().getTitle()) {\n                @Override\n                public void run() {\n                    navigator.navigateToItem(configuration.getHomeNavigationItem());\n                }\n            };\n            homeAction.setId(homeNavItem.getID());\n            menuManager.add(homeAction);\n            // Add navigate commands for each visible page except Settings (it\n            // goes at the end)\n            for (final TeamExplorerNavigationItemConfig navItem : configuration.getNavigationItems()) {\n                // Determine if the navigation item is visible in the current\n                // context and and create an action item if it is.\n                final ITeamExplorerNavigationItem instance = navItem.createInstance();\n                if (instance.isVisible(context)) {\n                    final Action action = new Action(navItem.getTitle()) {\n                        @Override\n                        public void run() {\n                            final String viewID = navItem.getViewID();\n                            // do specific if targetPageID is null\n                            if (navItem.getTargetPageID() == null) {\n                                instance.clicked(context);\n                            }\n                            // viewID not null -> check undocked views\n                            else if (viewID != null && TeamExplorerHelpers.isViewUndocked(viewID)) {\n                                TeamExplorerHelpers.showView(viewID);\n                            }\n                            // other cases -> navigate in Team Explorer view\n                            else {\n                                navigator.navigateToItem(navItem);\n                            }\n                        }\n                    };\n                    /*\n                     * The navigation item ID is used to determine which action\n                     * matches the currently shown navigation item so that the\n                     * menu listener can properly set the check mark on the\n                     * currently displayed navigation item.\n                     */\n                    action.setId(navItem.getID());\n                    // Add the action to the context menu.\n                    menuManager.add(action);\n                }\n            }\n            menuManager.add(new Separator());\n            // create the project/team fly out menu. \"Connect to server\" is\n            // always\n            // present so the menu won't be empty and omitted when disconnected.\n            String subMenuTitle;\n            if (TeamExplorerHelpers.supportsTeam(context)) {\n                subMenuTitle = Messages.getString(\"TeamExplorerControl.ProjectsAndMyTeamsSubMenuText\"); //$NON-NLS-1$\n            } else {\n                subMenuTitle = Messages.getString(\"TeamExplorerControl.ProjectsSubMenuText\"); //$NON-NLS-1$\n            }\n            final IMenuManager subMenu = new MenuManager(subMenuTitle);\n            subMenu.setRemoveAllWhenShown(true);\n            subMenu.addMenuListener(projectsMenuListener);\n            subMenu.add(new ConnectToServerAction());\n            menuManager.add(subMenu);\n            setCheckedItem(menuManager);\n        }\n        private void setCheckedItem(final IMenuManager menuManager) {\n            for (final IContributionItem item : menuManager.getItems()) {\n                if (item instanceof ActionContributionItem) {\n                    /*\n                     * Actions at the top level are navigation actions. Set the\n                     * check mark for the action associated with the current\n                     * navigation item. Clear the check mark for all others.\n                     */\n                    final ActionContributionItem actionContributionItem = (ActionContributionItem) item;\n                    final String actionID = actionContributionItem.getAction().getId();\n                    actionContributionItem.getAction().setChecked(\n                        actionID != null && actionID.equals(currentNavItem.getID()));\n                }\n            }\n        }\n    }\n    private class ProjectsMenuListener implements IMenuListener {\n        @Override\n        public void menuAboutToShow(final IMenuManager menuManager) {\n            if (!context.isConnected()) {\n                menuManager.add(new ConnectToServerAction());\n                return;\n            }\n            addProjectsAndTeams(menuManager);\n            if (TeamExplorerHelpers.supportsTeam(context)) {\n                menuManager.add(new Separator());\n                menuManager.add(new RefreshTeamsAction());\n            }\n            menuManager.add(new Separator());\n            menuManager.add(new ConnectToServerAction());\n        }\n        private void addProjectsAndTeams(final IMenuManager menuManager) {\n            final ProjectInfo[] projects = context.getServer().getProjectCache().getActiveTeamProjects();\n            // Sort projects alphabetically\n            Arrays.sort(projects, ProjectNameComparator.INSTANCE);\n            if (projects != null && projects.length >= 0) {\n                for (final ProjectInfo project : projects) {\n                    final TeamConfiguration[] teams = context.getServer().getProjectCache().getTeams(project);\n                    if (teams.length == 0) {\n                        // Server does not support TFS 2012 teams or for some\n                        // reason the default team got deleted (should not\n                        // happen)\n                        menuManager.add(createAction(project));\n                    } else {\n                        // Sort teams alphabetically\n                        Arrays.sort(teams, TeamNameComparator.INSTANCE);\n                        for (final TeamConfiguration team : teams) {\n                            menuManager.add(createAction(project, team));\n                        }\n                    }\n                }\n            }\n        }\n        /**\n         * Creates a menu action for a team project when TFS 2012 teams are not\n         * available.\n         */\n        private Action createAction(final ProjectInfo project) {\n            Check.notNull(project, \"project\"); //$NON-NLS-1$\n            final String projectGUID = project.getGUID();\n            final Action action = new Action(project.getName()) {\n                @Override\n                public void run() {\n                    if (!context.getCurrentProjectInfo().getGUID().equals(projectGUID)) {\n                        context.setCurrentProject(projectGUID);\n                        context.setCurrentTeam(null);\n                        final boolean tfvc = context.getCurrentProjectInfo().getSourceControlCapabilityFlags().contains(\n                            SourceControlCapabilityFlags.TFS);\n                        TFSCommonUIClientPlugin.getDefault().projectOrTeamChanged();\n                        TFSCommonUIClientPlugin.getDefault().sourceControlChanged(tfvc);\n                    }\n                }\n            };\n            if (context.getCurrentProjectInfo().getGUID().equals(projectGUID)) {\n                action.setChecked(true);\n            }\n            return action;\n        }\n        /**\n         * Creates a menu action for a team project and team. The team name is\n         * omitted if it is the default team for that project.\n         */\n<fim_suffix>        private Action createAction(final ProjectInfo project, final TeamConfiguration team) {\n            Check.notNull(project, \"project\"); //$NON-NLS-1$\n            Check.notNull(team, \"team\"); //$NON-NLS-1$\n            final String projectGUID = project.getGUID();\n            // Omit the team name for the default team\n            final String actionName = team.isDefaultTeam() ? project.getName()\n                : MessageFormat.format(\n                    Messages.getString(\"TeamExplorerControl.ProjectSlashTeamFormat\"), //$NON-NLS-1$\n                    project.getName(),\n                    team.getTeamName());\n            final Action action = new Action(actionName) {\n                @Override\n                public void run() {\n                    final String beforeChangeProjectGUID = context.getCurrentProjectInfo().getGUID();\n                    if (!projectGUID.equals(beforeChangeProjectGUID) || !team.equals(context.getCurrentTeam())) {\n                        context.setCurrentProject(projectGUID);\n                        context.setCurrentTeam(team);\n                        TFSCommonUIClientPlugin.getDefault().projectOrTeamChanged();\n                        // Only invoke this listener if team project changed\n                        if (!projectGUID.equals(beforeChangeProjectGUID)) {\n                            final boolean tfvc =\n                                context.getCurrentProjectInfo().getSourceControlCapabilityFlags().contains(\n                                    SourceControlCapabilityFlags.TFS);\n                            TFSCommonUIClientPlugin.getDefault().sourceControlChanged(tfvc);\n                        }\n                    }\n                }\n            };\n            if (projectGUID.equals(context.getCurrentProjectInfo().getGUID())\n                && team.equals(context.getCurrentTeam())) {\n                action.setChecked(true);\n            }\n            return action;\n        }<fim_middle>// function below is feature envy and long method\n"}