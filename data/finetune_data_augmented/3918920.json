{"text": "<fim_prefix>    }\n    public void addErroredExtension(\n        CachingServiceReference<?> cachingServiceReference) {\n        if (_log.isWarnEnabled()) {\n            _log.warn(\n                \"Extension {} is registered with error\",\n                cachingServiceReference);\n        }\n        _erroredExtensions.add(cachingServiceReference);\n    }\n    public void addInvalidApplication(\n        CachingServiceReference<?> serviceReference) {\n        if (_log.isWarnEnabled()) {\n            _log.warn(\n                \"Application {} is not valid\", serviceReference);\n        }\n        _invalidApplications.add(serviceReference);\n    }\n    public void addInvalidExtension(\n        CachingServiceReference<?> serviceReference) {\n        if (_log.isWarnEnabled()) {\n            _log.warn(\n                \"Extension {} is not valid\", serviceReference);\n        }\n        _invalidExtensions.add(serviceReference);\n    }\n    public void addInvalidResource(\n        CachingServiceReference<?> serviceReference) {\n        if (_log.isWarnEnabled()) {\n            _log.warn(\n                \"Resource {} is not valid\", serviceReference);\n        }\n        _invalidResources.add(serviceReference);\n    }\n    public boolean addNotGettableApplication(\n        CachingServiceReference<Application> serviceReference) {\n        if (_log.isWarnEnabled()) {\n            _log.warn(\n                \"Application from reference {} can't be got\",\n                serviceReference);\n        }\n        return _ungettableApplications.add(serviceReference);\n    }\n    public <T> boolean addNotGettableEndpoint(\n        CachingServiceReference<T> serviceReference) {\n        if (_log.isWarnEnabled()) {\n            _log.warn(\n                \"Resource from reference {} can't be got\",\n                serviceReference);\n        }\n        return _ungettableEndpoints.add(serviceReference);\n    }\n    public <T> void addNotGettableExtension(\n        CachingServiceReference<T> serviceReference) {\n        if (_log.isWarnEnabled()) {\n            _log.warn(\n                \"Extension from reference {} can't be got\",\n                serviceReference);\n        }\n        _ungettableExtensions.add(serviceReference);\n    }\n    public void addServiceForName(CachingServiceReference<?> serviceReference) {\n        _servicesForName.put(\n            getServiceName(serviceReference::getProperty), serviceReference);\n        if (_log.isDebugEnabled()) {\n            _log.debug(\n                \"Registered service {} for name {}\",\n                serviceReference,\n                getServiceName(serviceReference::getProperty));\n        }\n    }\n    public boolean addShadowedApplication(\n        CachingServiceReference<Application> serviceReference,\n        String actualBasePath) {\n        if (_log.isDebugEnabled()) {\n            ApplicationRuntimeInformation applicationRuntimeInformation =\n                _applications.get(actualBasePath);\n            if (applicationRuntimeInformation != null) {\n                _log.debug(\n                    \"Application reference {} is shadowed by {}\",\n                    serviceReference,\n                        applicationRuntimeInformation._cachingServiceReference\n                );\n            }\n        }\n        return _shadowedApplications.add(serviceReference);\n    }\n    @Override\n    public RuntimeDTO getRuntimeDTO() {\n        RuntimeDTO runtimeDTO = new RuntimeDTO();\n        if (_defaultApplicationProperties != null) {\n            runtimeDTO.defaultApplication = buildApplicationDTO(\n                _defaultApplicationProperties);\n        }\n        runtimeDTO.applicationDTOs = applicationDTOStream().\n            toArray(\n                ApplicationDTO[]::new\n            );\n        runtimeDTO.failedApplicationDTOs =\n            Stream.concat(\n                contextDependentApplicationsDTOStream(),\n                Stream.concat(\n                    invalidApplicationsDTOStream(),\n                    Stream.concat(\n                        shadowedApplicationsDTOStream(),\n                        Stream.concat(\n                            unreferenciableApplicationsDTOStream(),\n                            Stream.concat(\n                                clashingApplicationsDTOStream(),\n                                Stream.concat(\n                                    dependentApplicationsDTOStream(),\n                                    erroredApplicationsDTOStream())))))\n            ).toArray(\n                FailedApplicationDTO[]::new\n            );\n        runtimeDTO.failedResourceDTOs =\n            Stream.concat(\n                invalidResourcesDTOStream(),\n                Stream.concat(\n                    clashingResourcesDTOStream(),\n                    Stream.concat(\n                        unreferenciableEndpointsDTOStream(),\n                        Stream.concat(\n                            dependentServiceStreamDTO(),\n                            Stream.concat(\n                                applicationDependentResourcesDTOStream(),\n                                erroredEndpointsStreamDTO()))))\n            ).toArray(\n                FailedResourceDTO[]::new\n            );\n        runtimeDTO.failedExtensionDTOs =\n            Stream.concat(\n                clashingExtensionsDTOStream(),\n                Stream.concat(\n                    unreferenciableExtensionsDTOStream(),\n                    Stream.concat(\n                        applicationDependentExtensionsDTOStream(),\n                        Stream.concat(\n                            erroredExtensionsDTOStream(),\n                            Stream.concat(dependentExtensionsStreamDTO(),\n                                invalidExtensionsDTOStream()))))\n            ).toArray(\n                FailedExtensionDTO[]::new\n            );\n        ServiceReference<JaxrsServiceRuntime> serviceReference =\n            _whiteboard.getServiceReference();\n        ServiceReferenceDTO serviceDTO = new ServiceReferenceDTO();\n        serviceDTO.bundle = serviceReference.getBundle().getBundleId();\n        serviceDTO.id = (long)serviceReference.getProperty(\"service.id\");\n        serviceDTO.usingBundles = Arrays.stream(\n            serviceReference.getUsingBundles()\n        ).mapToLong(\n            Bundle::getBundleId\n        ).toArray();\n        serviceDTO.properties = Utils.getProperties(serviceReference);\n        runtimeDTO.serviceDTO = serviceDTO;\n        return runtimeDTO;\n    }\n    public void removedServiceForName(\n        CachingServiceReference<?> serviceReference) {\n        _servicesForName.remove(getServiceName(serviceReference::getProperty));\n        if (_log.isDebugEnabled()) {\n            _log.debug(\n                \"Unregistered service {} for name {}\",\n                serviceReference,\n                getServiceName(serviceReference::getProperty));\n        }\n    }\n    private ConcurrentHashMap<String, CachingServiceReference<?>>\n        _servicesForName = new ConcurrentHashMap<>();\n    private Whiteboard _whiteboard;\n    private Stream<FailedApplicationDTO>\n        contextDependentApplicationsDTOStream() {\n        return _contextDependentApplications.stream().map(\n            sr -> buildFailedApplicationDTO(\n                AriesJaxrsWhiteboardConstants.\n                    FAILURE_REASON_REQUIRED_CONTEXT_UNAVAILABLE,\n                sr)\n        );\n    }\n    public void removeApplicationDependentExtension(\n        CachingServiceReference<?> cachingServiceReference) {\n        _applicationDependentExtensions.remove(cachingServiceReference);\n    }\n    public void removeApplicationDependentResource(\n        CachingServiceReference<?> cachingServiceReference) {\n        _applicationDependentResources.remove(cachingServiceReference);\n    }\n    public void removeApplicationEndpoint(\n        PropertyHolder registratorProperties,\n        CachingServiceReference<?> cachingServiceReference) {\n        _applicationEndpoints.compute(\n            getServiceName(registratorProperties),\n            remover(\n                new EndpointRuntimeInformation(\n                cachingServiceReference, null, null)));\n        if (_log.isDebugEnabled()) {\n            _log.debug(\n                \"Endpoint {} has been removed from application {}\",\n                cachingServiceReference,\n                registratorProperties.get(\"original.service.id\"));\n        }\n    }\n    public void removeApplicationExtension(\n        PropertyHolder registratorProperties,\n        CachingServiceReference<?> extensionImmutableServiceReference) {\n        _applicationExtensions.computeIfPresent(\n            getServiceName(registratorProperties),\n            remover(\n                new ExtensionRuntimeInformation(\n                extensionImmutableServiceReference, null)));\n        if (_log.isDebugEnabled()) {\n            _log.debug(\n                \"Extension {} has been removed from application {}\",\n                extensionImmutableServiceReference,\n                registratorProperties.get(\"original.service.id\"));\n        }\n    }\n    public void removeClashingApplication(\n        CachingServiceReference<?> serviceReference) {\n        _clashingApplications.remove(serviceReference);\n        if (_log.isDebugEnabled()) {\n            _log.debug(\n                \"Application {} no longer clashes for name {}\",\n                serviceReference,\n                getServiceName(serviceReference::getProperty));\n        }\n    }\n    public void removeClashingExtension(\n        CachingServiceReference<?> serviceReference) {\n        _clashingExtensions.remove(serviceReference);\n        if (_log.isDebugEnabled()) {\n            _log.debug(\n                \"Extension {} no longer clashes for name {}\",\n                serviceReference,\n                getServiceName(serviceReference::getProperty));\n        }\n    }\n    public void removeClashingResource(\n        CachingServiceReference<?> serviceReference) {\n        _clashingResources.remove(serviceReference);\n        if (_log.isDebugEnabled()) {\n            _log.debug(\n                \"Resource {} no longer clashes for name {}\",\n                serviceReference,\n                getServiceName(serviceReference::getProperty));\n        }\n    }\n    public void removeContextDependentApplication(\n        CachingServiceReference<Application> serviceReference) {\n        _contextDependentApplications.remove(serviceReference);\n        if (_log.isDebugEnabled()) {\n            _log.debug(\n                \"Application {} no longer depends on context filter {}\",\n                serviceReference,\n                serviceReference.getProperty(HTTP_WHITEBOARD_CONTEXT_SELECT));\n        }\n    }\n    public void removeDependentApplication(\n        CachingServiceReference<Application> applicationReference) {\n        _dependentApplications.remove(applicationReference);\n    }\n    public void removeDependentExtension(\n        CachingServiceReference<?> cachingServiceReference) {\n        _dependentExtensions.remove(cachingServiceReference);\n    }\n<fim_suffix>    public void removeDependentService(\n        CachingServiceReference<?> serviceReference) {\n        _dependentServices.remove(serviceReference);\n    }<fim_middle>// function below has no smell\n"}