{"text": "<fim_prefix>/*\n * Copyright 2016,2017 Esri, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.esri.geoportal.geoportal.commons.geometry;\nimport com.esri.core.geometry.MultiPoint;\nimport com.esri.core.geometry.Point;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.util.AbstractList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.client.HttpResponseException;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\n/**\n * Geometry service.\n */\npublic class GeometryService implements Closeable {\n  private final CloseableHttpClient httpClient;\n  private final URL geometryServiceUrl;\n  private static final ObjectMapper mapper = new ObjectMapper();\n  static {\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n  }\n  public GeometryService(CloseableHttpClient client, URL geometryServiceUrl) {\n    this.httpClient = client;\n    this.geometryServiceUrl = geometryServiceUrl;\n  }\n  /**\n   * Projects the given multi-point geometry from one coordinate system to another\n   * \n   * @param mp the points to project\n   * @param fromWkid the coordinate system {@code mp}'s points are in\n   * @param toWkid the coordinate system to project into\n   * \n   * @return the re-projected points\n   * \n   * @throws java.net.URISyntaxException if invalid URL for geometry service\n   * @throws java.io.IOException if error accessing geometry service online\n   */\n  public MultiPoint project(MultiPoint mp, int fromWkid, int toWkid) throws IOException, URISyntaxException {\n    HashMap<String, String> params = new HashMap<>();\n    params.put(\"f\", \"json\");\n    params.put(\"inSR\", Integer.toString(fromWkid));\n    params.put(\"outSR\", Integer.toString(toWkid));\n    params.put(\"geometries\", createGeometries(mp));\n    return callProjectService(params);\n  }\n  /**\n   * Projects the given multi-point geometry from one coordinate system to another\n   * \n   * @param mp the points to project\n   * @param fromWkt the coordinate system {@code mp}'s points are in\n   * @param toWkid the coordinate system to project into\n   * \n   * @return the re-projected points\n   * \n   * @throws java.net.URISyntaxException if invalid URL for geometry service\n   * @throws java.io.IOException if error accessing geometry service online\n   */\n  public MultiPoint project(MultiPoint mp, String fromWkt, int toWkid) throws IOException, URISyntaxException {\n    HashMap<String, String> params = new HashMap<>();\n    params.put(\"f\", \"json\");\n    params.put(\"inSR\", String.format(\"{\\\"wkt\\\": \\\"%s\\\"}\", fromWkt.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\")));\n    params.put(\"outSR\", Integer.toString(toWkid));\n    params.put(\"geometries\", createGeometries(mp));\n    return callProjectService(params);\n  }\n  /**\n   * Calls the projection service with the given parameters\n   * \n   * @param params the parameters for the projection call\n   * \n   * @return the re-projected points\n   */\n  private MultiPoint callProjectService(HashMap<String, String> params) throws IOException, URISyntaxException {\n    HttpPost request = new HttpPost(createProjectUrl().toURI());\n    HttpEntity entrity = new UrlEncodedFormEntity(params.entrySet().stream()\n            .map(e -> new BasicNameValuePair(e.getKey(), e.getValue())).collect(Collectors.toList()), \"UTF-8\");\n    request.setEntity(entrity);\n    try (CloseableHttpResponse httpResponse = httpClient.execute(request); InputStream contentStream = httpResponse.getEntity().getContent();) {\n      if (httpResponse.getStatusLine().getStatusCode()>=400) {\n        throw new HttpResponseException(httpResponse.getStatusLine().getStatusCode(), httpResponse.getStatusLine().getReasonPhrase());\n      }\n      MultiPointGeometry geom = mapper.readValue(contentStream, MultiPointGeometry.class);\n      MultiPoint result  = new MultiPoint();\n      geom.geometries[0].points.forEach(pt->result.add(pt[0], pt[1]));\n      return result;\n    }\n  }\n  /**\n   * Translates UTM points from a string into lat lon values\n   * \n   * @param coordinateStrings the points to translate, in the format {@code <grid><hemisphere> <easting> <northing>} E.G. {@code 18N 60000 80000}\n   * @param toWkid the coordinate system to translate into\n   * \n   * @return the translated points\n   * \n   * @throws java.net.URISyntaxException if invalid URL for geometry service\n   * @throws java.io.IOException if error accessing geometry service online\n   */\n  public MultiPoint fromGeoCoordinateString(List<String> coordinateStrings, int toWkid) throws IOException, URISyntaxException {\n    HttpPost request = new HttpPost(createFromGeoCoordinateStringUrl().toURI());\n    HashMap<String, String> params = new HashMap<>();\n    params.put(\"f\", \"json\");\n    params.put(\"sr\", Integer.toString(toWkid));\n    params.put(\"strings\", String.format(\"[\\\"%s\\\"]\", String.join(\"\\\",\\\"\", coordinateStrings)));\n    params.put(\"conversionType\", \"UTM\");\n    params.put(\"coversionMode\", \"utmDefault\");\n    HttpEntity entity = new UrlEncodedFormEntity(params.entrySet().stream()\n      .map(e -> new BasicNameValuePair(e.getKey(), e.getValue())).collect(Collectors.toList()), \"UTF-8\");\n    request.setEntity(entity);\n    try (CloseableHttpResponse httpResponse = httpClient.execute(request); InputStream contentStream = httpResponse.getEntity().getContent();) {\n      if (httpResponse.getStatusLine().getStatusCode()>=400) {\n        throw new HttpResponseException(httpResponse.getStatusLine().getStatusCode(), httpResponse.getStatusLine().getReasonPhrase());\n      }\n      FromGeoCoordinateStringResponse response = mapper.readValue(contentStream, FromGeoCoordinateStringResponse.class);\n      return response.toMultipointGeometry();\n    }\n  }\n  private URL createProjectUrl() throws MalformedURLException {\n    return new URL(geometryServiceUrl.toExternalForm().replaceAll(\"/*$\", \"/project\"));\n  }\n  private URL createFromGeoCoordinateStringUrl() throws MalformedURLException {\n    return new URL(geometryServiceUrl.toExternalForm().replaceAll(\"/*$\", \"/fromGeoCoordinateString\"));\n  }\n  private static String createGeometries(MultiPoint mp) throws JsonProcessingException {\n    MultiPointGeometry result = new MultiPointGeometry();\n    result.geometries[0].points = new MultiPointList(mp).stream().map(p->new Double[]{p.getX(),p.getY()}).collect(Collectors.toList());\n    return mapper.writeValueAsString(result);\n  }\n  @Override\n  public void close() throws IOException {\n    httpClient.close();\n  }\n  /**\n   * Multi-point geometry.\n   */\n  public static final class MultiPointGeometry {\n    public String geometryType = \"esriGeometryMultipoint\";\n    public MultiPointGeometries [] geometries = new MultiPointGeometries[]{ new MultiPointGeometries() };\n  }\n  /**\n   * Array of multi-point geometries.\n   */\n  public static final class MultiPointGeometries {\n    public List<Double[]> points;\n  }\n<fim_suffix>  private static class MultiPointList extends AbstractList<Point> {\n    private final MultiPoint mp;\n    public MultiPointList(MultiPoint mp) {\n      this.mp = mp;\n    }\n    @Override\n    public Point get(int index) {\n      return mp.getPoint(index);\n    }\n    @Override\n    public int size() {\n      return mp.getPointCount();\n    }\n  }\n  private static final class FromGeoCoordinateStringResponse {\n    public List<Double[]> coordinates;<fim_middle>// class below has no smell\n"}