{"text": "<fim_prefix>/**\n * Autogenerated by Thrift Compiler (0.9.0)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage org.apache.sentry.provider.db.service.thrift;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.thrift.scheme.IScheme;\nimport org.apache.thrift.scheme.SchemeFactory;\nimport org.apache.thrift.scheme.StandardScheme;\nimport org.apache.thrift.scheme.TupleScheme;\nimport org.apache.thrift.protocol.TTupleProtocol;\nimport org.apache.thrift.protocol.TProtocolException;\nimport org.apache.thrift.EncodingUtils;\nimport org.apache.thrift.TException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.EnumMap;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.EnumSet;\nimport java.util.Collections;\nimport java.util.BitSet;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\npublic class TListSentryPrivilegesResponse implements org.apache.thrift.TBase<TListSentryPrivilegesResponse, TListSentryPrivilegesResponse._Fields>, java.io.Serializable, Cloneable {\n  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"TListSentryPrivilegesResponse\");\n  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"status\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n  private static final org.apache.thrift.protocol.TField PRIVILEGES_FIELD_DESC = new org.apache.thrift.protocol.TField(\"privileges\", org.apache.thrift.protocol.TType.SET, (short)2);\n  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n  static {\n    schemes.put(StandardScheme.class, new TListSentryPrivilegesResponseStandardSchemeFactory());\n    schemes.put(TupleScheme.class, new TListSentryPrivilegesResponseTupleSchemeFactory());\n  }\n  private org.apache.sentry.service.thrift.TSentryResponseStatus status; // required\n  private Set<TSentryPrivilege> privileges; // optional\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n    STATUS((short)1, \"status\"),\n    PRIVILEGES((short)2, \"privileges\");\n    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n    static {\n      for (_Fields field : EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // STATUS\n          return STATUS;\n        case 2: // PRIVILEGES\n          return PRIVILEGES;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final String _fieldName;\n    _Fields(short thriftId, String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  private _Fields optionals[] = {_Fields.PRIVILEGES};\n  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData(\"status\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.sentry.service.thrift.TSentryResponseStatus.class)));\n    tmpMap.put(_Fields.PRIVILEGES, new org.apache.thrift.meta_data.FieldMetaData(\"privileges\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, \n            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSentryPrivilege.class))));\n    metaDataMap = Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TListSentryPrivilegesResponse.class, metaDataMap);\n  }\n  public TListSentryPrivilegesResponse() {\n  }\n  public TListSentryPrivilegesResponse(\n    org.apache.sentry.service.thrift.TSentryResponseStatus status)\n  {\n    this();\n    this.status = status;\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public TListSentryPrivilegesResponse(TListSentryPrivilegesResponse other) {\n    if (other.isSetStatus()) {\n      this.status = new org.apache.sentry.service.thrift.TSentryResponseStatus(other.status);\n    }\n    if (other.isSetPrivileges()) {\n      Set<TSentryPrivilege> __this__privileges = new HashSet<TSentryPrivilege>();\n      for (TSentryPrivilege other_element : other.privileges) {\n        __this__privileges.add(new TSentryPrivilege(other_element));\n      }\n      this.privileges = __this__privileges;\n    }\n  }\n  public TListSentryPrivilegesResponse deepCopy() {\n    return new TListSentryPrivilegesResponse(this);\n  }\n<fim_suffix>  @Override\n  public void clear() {\n    this.status = null;\n    this.privileges = null;\n  }\n  public org.apache.sentry.service.thrift.TSentryResponseStatus getStatus() {\n    return this.status;\n  }\n  public void setStatus(org.apache.sentry.service.thrift.TSentryResponseStatus status) {\n    this.status = status;\n  }\n  public void unsetStatus() {\n    this.status = null;\n  }\n  /** Returns true if field status is set (has been assigned a value) and false otherwise */\n  public boolean isSetStatus() {\n    return this.status != null;\n  }\n  public void setStatusIsSet(boolean value) {\n    if (!value) {\n      this.status = null;\n    }\n  }\n  public int getPrivilegesSize() {\n    return (this.privileges == null) ? 0 : this.privileges.size();\n  }\n  public java.util.Iterator<TSentryPrivilege> getPrivilegesIterator() {\n    return (this.privileges == null) ? null : this.privileges.iterator();\n  }\n  public void addToPrivileges(TSentryPrivilege elem) {\n    if (this.privileges == null) {\n      this.privileges = new HashSet<TSentryPrivilege>();\n    }\n    this.privileges.add(elem);\n  }\n  public Set<TSentryPrivilege> getPrivileges() {\n    return this.privileges;\n  }\n  public void setPrivileges(Set<TSentryPrivilege> privileges) {\n    this.privileges = privileges;\n  }\n  public void unsetPrivileges() {\n    this.privileges = null;\n  }\n  /** Returns true if field privileges is set (has been assigned a value) and false otherwise */\n  public boolean isSetPrivileges() {\n    return this.privileges != null;\n  }\n  public void setPrivilegesIsSet(boolean value) {\n    if (!value) {\n      this.privileges = null;\n    }\n  }\n  public void setFieldValue(_Fields field, Object value) {\n    switch (field) {\n    case STATUS:\n      if (value == null) {\n        unsetStatus();\n      } else {\n        setStatus((org.apache.sentry.service.thrift.TSentryResponseStatus)value);\n      }\n      break;\n    case PRIVILEGES:\n      if (value == null) {\n        unsetPrivileges();\n      } else {<fim_middle>// function below has no smell\n"}