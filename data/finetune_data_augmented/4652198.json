{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\npackage org.codehaus.groovy.transform.stc;\n\nimport org.codehaus.groovy.ast.ClassNode;\nimport org.codehaus.groovy.ast.MethodNode;\nimport org.codehaus.groovy.ast.Parameter;\nimport org.codehaus.groovy.ast.stmt.Statement;\n\n/**\n * Represents method nodes which are used by the static type checker to virtually add methods\n * coming from {@link org.codehaus.groovy.runtime.DefaultGroovyMethods DGM-like} methods.\n */\n<fim_suffix>public class ExtensionMethodNode extends MethodNode {\n    private final MethodNode extensionMethodNode;\n    private final boolean isStaticExtension; // true if it's a static method\n    \n    public ExtensionMethodNode(\n            MethodNode extensionMethodNode,\n            String name, int modifiers, ClassNode returnType, Parameter[] parameters, ClassNode[] exceptions, Statement code, boolean isStaticExtension) {\n        super(name, modifiers, returnType, parameters, exceptions, code);\n        this.extensionMethodNode = extensionMethodNode;\n        this.isStaticExtension = isStaticExtension;\n    }\n\n    public ExtensionMethodNode(\n            MethodNode extensionMethodNode,\n            String name, int modifiers, ClassNode returnType, Parameter[] parameters, ClassNode[] exceptions, Statement code) {\n        this(extensionMethodNode, name, modifiers, returnType, parameters, exceptions, code, false);\n    }\n\n    public MethodNode getExtensionMethodNode() {\n        return extensionMethodNode;\n    }\n\n    public boolean isStaticExtension() {\n        return isStaticExtension;\n    }\n}<fim_middle>// class below has no smell\n"}