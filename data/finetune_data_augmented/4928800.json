{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.apache.jmeter.gui;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.swing.JTree;\n\n<fim_suffix>public interface TreeState {\n\n    /**\n     * Restore tree expanded and selected state\n     *\n     * @param guiInstance GuiPackage to be used\n     */\n    void restore(GuiPackage guiInstance);\n\n    static final TreeState NOTHING = (GuiPackage guiInstance) -> {};\n\n    /**\n     * Save tree expanded and selected state\n     *\n     * @param guiPackage {@link GuiPackage} to be used\n     * @return {@link TreeState}\n     */\n    public static TreeState from(GuiPackage guiPackage) {\n        if (guiPackage == null) {\n            return NOTHING;\n        }\n\n        MainFrame mainframe = guiPackage.getMainFrame();\n        if (mainframe != null) {\n            final JTree tree = mainframe.getTree();\n            int savedSelected = tree.getMinSelectionRow();\n            ArrayList<Integer> savedExpanded = new ArrayList<>();\n\n            for (int rowN = 0; rowN < tree.getRowCount(); rowN++) {\n                if (tree.isExpanded(rowN)) {\n                    savedExpanded.add(rowN);\n                }\n            }\n\n            return new TreeStateImpl(savedSelected, savedExpanded);\n        }\n\n        return NOTHING;\n    }\n\n    static final class TreeStateImpl implements TreeState {\n\n        // GUI tree expansion state\n        private final List<Integer> savedExpanded;\n\n        // GUI tree selected row\n        private final int savedSelected;\n\n        public TreeStateImpl(int savedSelected, List<Integer> savedExpanded) {\n            this.savedSelected = savedSelected;\n            this.savedExpanded = savedExpanded;\n        }\n\n        @Override\n        public void restore(GuiPackage guiInstance) {\n            MainFrame mainframe = guiInstance.getMainFrame();\n            if (mainframe == null) {\n                //log?\n                return;\n            }\n\n            final JTree tree = mainframe.getTree();\n\n            if (!savedExpanded.isEmpty()) {\n                savedExpanded.forEach(tree::expandRow);\n            } else {\n                tree.expandRow(0);\n            }\n            tree.setSelectionRow(savedSelected);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}