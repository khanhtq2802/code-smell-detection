{"text": "<fim_prefix>\t\tcatch (InstantiationException ex) {\n\t\t\tthrow new BeanInstantiationException(clazz, \"Is it an abstract class?\", ex);\n\t\t}\n\t\tcatch (IllegalAccessException ex) {\n\t\t\tthrow new BeanInstantiationException(clazz, \"Is the constructor accessible?\", ex);\n\t\t}\n\t}\n\t/**\n\t * Instantiate a class using its 'primary' constructor (for Kotlin classes,\n\t * potentially having default arguments declared) or its default constructor\n\t * (for regular Java classes, expecting a standard no-arg setup).\n\t * <p>Note that this method tries to set the constructor accessible\n\t * if given a non-accessible (that is, non-public) constructor.\n\t * @param clazz the class to instantiate\n\t * @return the new instance\n\t * @throws BeanInstantiationException if the bean cannot be instantiated.\n\t * The cause may notably indicate a {@link NoSuchMethodException} if no\n\t * primary/default constructor was found, a {@link NoClassDefFoundError}\n\t * or other {@link LinkageError} in case of an unresolvable class definition\n\t * (e.g. due to a missing dependency at runtime), or an exception thrown\n\t * from the constructor invocation itself.\n\t * @see Constructor#newInstance\n\t */\n\tpublic static <T> T instantiateClass(Class<T> clazz) throws BeanInstantiationException {\n\t\tAssert.notNull(clazz, \"Class must not be null\");\n\t\tif (clazz.isInterface()) {\n\t\t\tthrow new BeanInstantiationException(clazz, \"Specified class is an interface\");\n\t\t}\n\t\ttry {\n\t\t\treturn instantiateClass(clazz.getDeclaredConstructor());\n\t\t}\n\t\tcatch (NoSuchMethodException ex) {\n\t\t\tConstructor<T> ctor = findPrimaryConstructor(clazz);\n\t\t\tif (ctor != null) {\n\t\t\t\treturn instantiateClass(ctor);\n\t\t\t}\n\t\t\tthrow new BeanInstantiationException(clazz, \"No default constructor found\", ex);\n\t\t}\n\t\tcatch (LinkageError err) {\n\t\t\tthrow new BeanInstantiationException(clazz, \"Unresolvable class definition\", err);\n\t\t}\n\t}\n\t/**\n\t * Instantiate a class using its no-arg constructor and return the new instance\n\t * as the specified assignable type.\n\t * <p>Useful in cases where the type of the class to instantiate (clazz) is not\n\t * available, but the type desired (assignableTo) is known.\n\t * <p>Note that this method tries to set the constructor accessible if given a\n\t * non-accessible (that is, non-public) constructor.\n\t * @param clazz class to instantiate\n\t * @param assignableTo type that clazz must be assignableTo\n\t * @return the new instance\n\t * @throws BeanInstantiationException if the bean cannot be instantiated\n\t * @see Constructor#newInstance\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T instantiateClass(Class<?> clazz, Class<T> assignableTo) throws BeanInstantiationException {\n\t\tAssert.isAssignable(assignableTo, clazz);\n\t\treturn (T) instantiateClass(clazz);\n\t}\n\t/**\n\t * Convenience method to instantiate a class using the given constructor.\n\t * <p>Note that this method tries to set the constructor accessible if given a\n\t * non-accessible (that is, non-public) constructor, and supports Kotlin classes\n\t * with optional parameters and default values.\n\t * @param ctor the constructor to instantiate\n\t * @param args the constructor arguments to apply (use {@code null} for an unspecified\n\t * parameter, Kotlin optional parameters and Java primitive types are supported)\n\t * @return the new instance\n\t * @throws BeanInstantiationException if the bean cannot be instantiated\n\t * @see Constructor#newInstance\n\t */\n\tpublic static <T> T instantiateClass(Constructor<T> ctor, Object... args) throws BeanInstantiationException {\n\t\tAssert.notNull(ctor, \"Constructor must not be null\");\n\t\ttry {\n\t\t\tReflectionUtils.makeAccessible(ctor);\n\t\t\tif (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(ctor.getDeclaringClass())) {\n\t\t\t\treturn KotlinDelegate.instantiateClass(ctor, args);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tClass<?>[] parameterTypes = ctor.getParameterTypes();\n\t\t\t\tAssert.isTrue(args.length <= parameterTypes.length, \"Can't specify more arguments than constructor parameters\");\n\t\t\t\tObject[] argsWithDefaultValues = new Object[args.length];\n\t\t\t\tfor (int i = 0 ; i < args.length; i++) {\n\t\t\t\t\tif (args[i] == null) {\n\t\t\t\t\t\tClass<?> parameterType = parameterTypes[i];\n\t\t\t\t\t\targsWithDefaultValues[i] = (parameterType.isPrimitive() ? DEFAULT_TYPE_VALUES.get(parameterType) : null);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\targsWithDefaultValues[i] = args[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn ctor.newInstance(argsWithDefaultValues);\n\t\t\t}\n\t\t}\n\t\tcatch (InstantiationException ex) {\n\t\t\tthrow new BeanInstantiationException(ctor, \"Is it an abstract class?\", ex);\n\t\t}\n\t\tcatch (IllegalAccessException ex) {\n\t\t\tthrow new BeanInstantiationException(ctor, \"Is the constructor accessible?\", ex);\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\tthrow new BeanInstantiationException(ctor, \"Illegal arguments for constructor\", ex);\n\t\t}\n\t\tcatch (InvocationTargetException ex) {\n\t\t\tthrow new BeanInstantiationException(ctor, \"Constructor threw exception\", ex.getTargetException());\n\t\t}\n\t}\n\t/**\n\t * Return the primary constructor of the provided class. For Kotlin classes, this\n\t * returns the Java constructor corresponding to the Kotlin primary constructor\n\t * (as defined in the Kotlin specification). Otherwise, in particular for non-Kotlin\n\t * classes, this simply returns {@code null}.\n\t * @param clazz the class to check\n\t * @since 5.0\n\t * @see <a href=\"https://kotlinlang.org/docs/reference/classes.html#constructors\">Kotlin docs</a>\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\t@Nullable\n\tpublic static <T> Constructor<T> findPrimaryConstructor(Class<T> clazz) {\n\t\tAssert.notNull(clazz, \"Class must not be null\");\n\t\tif (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(clazz)) {\n\t\t\tConstructor<T> kotlinPrimaryConstructor = KotlinDelegate.findPrimaryConstructor(clazz);\n\t\t\tif (kotlinPrimaryConstructor != null) {\n\t\t\t\treturn kotlinPrimaryConstructor;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Find a method with the given method name and the given parameter types,\n\t * declared on the given class or one of its superclasses. Prefers public methods,\n\t * but will return a protected, package access, or private method too.\n\t * <p>Checks {@code Class.getMethod} first, falling back to\n\t * {@code findDeclaredMethod}. This allows to find public methods\n\t * without issues even in environments with restricted Java security settings.\n\t * @param clazz the class to check\n\t * @param methodName the name of the method to find\n\t * @param paramTypes the parameter types of the method to find\n\t * @return the Method object, or {@code null} if not found\n\t * @see Class#getMethod\n\t * @see #findDeclaredMethod\n\t */\n\t@Nullable\n\tpublic static Method findMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {\n\t\ttry {\n\t\t\treturn clazz.getMethod(methodName, paramTypes);\n\t\t}\n\t\tcatch (NoSuchMethodException ex) {\n\t\t\treturn findDeclaredMethod(clazz, methodName, paramTypes);\n\t\t}\n\t}\n\t/**\n\t * Find a method with the given method name and the given parameter types,\n\t * declared on the given class or one of its superclasses. Will return a public,\n\t * protected, package access, or private method.\n\t * <p>Checks {@code Class.getDeclaredMethod}, cascading upwards to all superclasses.\n\t * @param clazz the class to check\n\t * @param methodName the name of the method to find\n\t * @param paramTypes the parameter types of the method to find\n\t * @return the Method object, or {@code null} if not found\n\t * @see Class#getDeclaredMethod\n\t */\n<fim_suffix>\t@Nullable\n\tpublic static Method findDeclaredMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {\n\t\ttry {\n\t\t\treturn clazz.getDeclaredMethod(methodName, paramTypes);\n\t\t}\n\t\tcatch (NoSuchMethodException ex) {\n\t\t\tif (clazz.getSuperclass() != null) {\n\t\t\t\treturn findDeclaredMethod(clazz.getSuperclass(), methodName, paramTypes);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}<fim_middle>// function below has no smell\n"}