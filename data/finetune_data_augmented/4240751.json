{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.functor.core.algorithm;\n\nimport org.apache.commons.functor.BinaryFunction;\nimport org.apache.commons.functor.Function;\nimport org.apache.commons.functor.Procedure;\nimport org.apache.commons.functor.generator.Generator;\n\n/**\n * Functional left-fold algorithm against the elements of a {@link Generator}.\n * Uses the seed object (if supplied) as the initial left-side argument to the {@link BinaryFunction},\n * then uses the result of that evaluation as the next left-side argument, until the {@link Generator}'s\n * elements have been expended.\n *\n * @param <T> the returned evaluation type.\n * @version $Revision$ $Date$\n */\n<fim_suffix>public class FoldLeft<T> implements Function<Generator<T>, T>, BinaryFunction<Generator<T>, T, T> {\n\n    /**\n     * Helper procedure.\n     *\n     * @param <T> the returned evaluation type.\n     */\n    private static class FoldLeftHelper<T> implements Procedure<T> {\n        /**\n         * The wrapped function.\n         */\n        private final BinaryFunction<? super T, ? super T, ? extends T> function;\n        /**\n         * The seed object.\n         */\n        private T seed;\n        /**\n         * Flag to check the helper started or not.\n         */\n        private boolean started;\n\n        /**\n         * Create a seedless FoldLeftHelper.\n         *\n         * @param function The wrapped function\n         */\n        public FoldLeftHelper(BinaryFunction<? super T, ? super T, ? extends T> function) {\n            this(null, function);\n        }\n\n        /**\n         * Create a new FoldLeftHelper.\n         *\n         * @param seed initial left-side argument\n         * @param function The wrapped function\n         */\n        FoldLeftHelper(T seed, BinaryFunction<? super T, ? super T, ? extends T> function) {\n            this.seed = seed;\n            started = seed != null ? true : false;\n            this.function = function;\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void run(T obj) {\n            if (!started) {\n                seed = obj;\n                started = true;\n            } else {\n                seed = function.evaluate(seed, obj);\n            }\n        }\n\n        /**\n         * Get current result.\n         * @return Object\n         */\n        T getResult() {\n            return started ? seed : null;\n        }\n\n    }\n\n    /**\n     * {@link BinaryFunction} to apply to each (seed, next).\n     */\n    private final BinaryFunction<? super T, ? super T, ? extends T> function;\n\n    /**\n     * Create a new FoldLeft.\n     * @param func {@link BinaryFunction} to apply to each (seed, next)\n     */\n    public FoldLeft(BinaryFunction<? super T, ? super T, ? extends T> func) {\n        this.function = func;\n    }\n\n    /**\n     * {@inheritDoc}\n     * @param obj {@link Generator} to transform\n     */\n    public final T evaluate(Generator<T> obj) {\n        FoldLeftHelper<T> helper = new FoldLeftHelper<T>(function);\n        obj.run(helper);\n        return helper.getResult();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @param left {@link Generator} to transform\n     * @param right initial left-side seed object\n     */\n    public final T evaluate(Generator<T> left, T right) {\n        FoldLeftHelper<T> helper = new FoldLeftHelper<T>(right, function);\n        left.run(helper);\n        return helper.getResult();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof FoldLeft<?>)) {\n            return false;\n        }\n        return ((FoldLeft<?>) obj).function.equals(function);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int hashCode() {\n        return \"FoldLeft\".hashCode() << 2 ^ function.hashCode();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String toString() {\n        return \"FoldLeft<\" + function + \">\";\n    }\n\n}<fim_middle>// class below has no smell\n"}