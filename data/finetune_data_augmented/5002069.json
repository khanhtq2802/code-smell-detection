{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.knox.gateway.identityasserter.regex.filter;\n\nimport javax.security.auth.Subject;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\n\nimport org.apache.knox.gateway.identityasserter.common.filter.CommonIdentityAssertionFilter;\nimport org.apache.knox.gateway.security.principal.PrincipalMappingException;\n\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\n\n<fim_suffix>public class RegexIdentityAssertionFilter extends\n    CommonIdentityAssertionFilter {\n\n  private String input;\n  private String output;\n  private Map<String,String> dict;\n  RegexTemplate template;\n\n  @Override\n  public void init(FilterConfig filterConfig) throws ServletException {\n    super.init(filterConfig);\n    try {\n      input = filterConfig.getInitParameter( \"input\" );\n      if( input == null ) {\n        input = \"\";\n      }\n      output = filterConfig.getInitParameter( \"output\" );\n      if( output == null ) {\n        output = \"\";\n      }\n      dict = loadDictionary( filterConfig.getInitParameter( \"lookup\" ) );\n      boolean useOriginalOnLookupFailure = Boolean.parseBoolean(filterConfig.getInitParameter(\"use.original.on.lookup.failure\"));\n      template = new RegexTemplate( input, output, dict, useOriginalOnLookupFailure);\n    } catch ( PrincipalMappingException e ) {\n      throw new ServletException( e );\n    }\n  }\n\n  @Override\n  public String[] mapGroupPrincipals(String mappedPrincipalName, Subject subject) {\n    // Returning null will allow existing Subject group principals to remain the same\n    return null;\n  }\n\n  @Override\n  public String mapUserPrincipal(String principalName) {\n    return template.apply( principalName );\n  }\n\n  private Map<String, String> loadDictionary( String config ) throws PrincipalMappingException {\n    Map<String,String> dict = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n    if( config != null && !config.isEmpty() ) {\n      try {\n        StringTokenizer t = new StringTokenizer( config, \";\" );\n        while( t.hasMoreTokens() ) {\n          String nvp = t.nextToken();\n          String[] a = nvp.split( \"=\" );\n          dict.put( a[0].trim(), a[1].trim() );\n        }\n        return dict;\n      } catch( Exception e ) {\n        dict.clear();\n        throw new PrincipalMappingException(\n            \"Unable to load lookup dictionary from provided configuration: \" + config +\n                \".  No principal mapping will be provided.\", e );\n      }\n    }\n    return dict;\n  }\n\n}<fim_middle>// class below has no smell\n"}