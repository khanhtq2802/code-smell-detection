{"text": "<fim_prefix>\t\tprivate final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);\n\t\tprivate final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);\n\t\tprivate final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);\n\t\tprivate final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);\n\t\tprivate final Assignment cThenExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);\n\t\tprivate final RuleCall cThenExpressionExpressionParserRuleCall_3_0 = (RuleCall)cThenExpressionAssignment_3.eContents().get(0);\n\t\tprivate final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);\n\t\tprivate final Assignment cElseExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);\n\t\tprivate final RuleCall cElseExpressionExpressionParserRuleCall_5_0 = (RuleCall)cElseExpressionAssignment_5.eContents().get(0);\n\t\tprivate final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);\n\t\t//IfExp:\n\t\t//\t'if' condition=Expression\n\t\t//\t'then' thenExpression=Expression\n\t\t//\t'else' elseExpression=Expression\n\t\t//\t'endif';\n\t\t@Override public ParserRule getRule() { return rule; }\n\t\t//'if' condition=Expression 'then' thenExpression=Expression 'else' elseExpression=Expression 'endif'\n\t\tpublic Group getGroup() { return cGroup; }\n\t\t//'if'\n\t\tpublic Keyword getIfKeyword_0() { return cIfKeyword_0; }\n\t\t//condition=Expression\n\t\tpublic Assignment getConditionAssignment_1() { return cConditionAssignment_1; }\n\t\t//Expression\n\t\tpublic RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }\n\t\t//'then'\n\t\tpublic Keyword getThenKeyword_2() { return cThenKeyword_2; }\n\t\t//thenExpression=Expression\n\t\tpublic Assignment getThenExpressionAssignment_3() { return cThenExpressionAssignment_3; }\n\t\t//Expression\n\t\tpublic RuleCall getThenExpressionExpressionParserRuleCall_3_0() { return cThenExpressionExpressionParserRuleCall_3_0; }\n\t\t//'else'\n\t\tpublic Keyword getElseKeyword_4() { return cElseKeyword_4; }\n\t\t//elseExpression=Expression\n\t\tpublic Assignment getElseExpressionAssignment_5() { return cElseExpressionAssignment_5; }\n\t\t//Expression\n\t\tpublic RuleCall getElseExpressionExpressionParserRuleCall_5_0() { return cElseExpressionExpressionParserRuleCall_5_0; }\n\t\t//'endif'\n\t\tpublic Keyword getEndifKeyword_6() { return cEndifKeyword_6; }\n\t}\n\tpublic class LetExpElements extends AbstractParserRuleElementFinder {\n\t\tprivate final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), \"org.eclipse.xtext.ui.tests.editor.contentassist.BacktrackingContentAssistTestLanguage.LetExp\");\n\t\tprivate final Group cGroup = (Group)rule.eContents().get(1);\n\t\tprivate final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);\n\t\tprivate final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);\n\t\tprivate final RuleCall cVariableLetVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);\n\t\tprivate final Group cGroup_2 = (Group)cGroup.eContents().get(2);\n\t\tprivate final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);\n\t\tprivate final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);\n\t\tprivate final RuleCall cVariableLetVariableParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);\n\t\tprivate final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);\n\t\tprivate final Assignment cInAssignment_4 = (Assignment)cGroup.eContents().get(4);\n\t\tprivate final RuleCall cInExpressionParserRuleCall_4_0 = (RuleCall)cInAssignment_4.eContents().get(0);\n\t\t//LetExp:\n\t\t//\t'let'\n\t\t//\tvariable+=LetVariable (',' variable+=LetVariable)*\n\t\t//\t'in' in=Expression;\n\t\t@Override public ParserRule getRule() { return rule; }\n\t\t//'let' variable+=LetVariable (',' variable+=LetVariable)* 'in' in=Expression\n\t\tpublic Group getGroup() { return cGroup; }\n\t\t//'let'\n\t\tpublic Keyword getLetKeyword_0() { return cLetKeyword_0; }\n\t\t//variable+=LetVariable\n\t\tpublic Assignment getVariableAssignment_1() { return cVariableAssignment_1; }\n\t\t//LetVariable\n\t\tpublic RuleCall getVariableLetVariableParserRuleCall_1_0() { return cVariableLetVariableParserRuleCall_1_0; }\n\t\t//(',' variable+=LetVariable)*\n\t\tpublic Group getGroup_2() { return cGroup_2; }\n\t\t//','\n\t\tpublic Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }\n\t\t//variable+=LetVariable\n\t\tpublic Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }\n\t\t//LetVariable\n\t\tpublic RuleCall getVariableLetVariableParserRuleCall_2_1_0() { return cVariableLetVariableParserRuleCall_2_1_0; }\n\t\t//'in'\n\t\tpublic Keyword getInKeyword_3() { return cInKeyword_3; }\n\t\t//in=Expression\n\t\tpublic Assignment getInAssignment_4() { return cInAssignment_4; }\n\t\t//Expression\n\t\tpublic RuleCall getInExpressionParserRuleCall_4_0() { return cInExpressionParserRuleCall_4_0; }\n\t}\n\tpublic class LetVariableElements extends AbstractParserRuleElementFinder {\n\t\tprivate final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), \"org.eclipse.xtext.ui.tests.editor.contentassist.BacktrackingContentAssistTestLanguage.LetVariable\");\n\t\tprivate final Group cGroup = (Group)rule.eContents().get(1);\n\t\tprivate final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);\n\t\tprivate final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);\n\t\tprivate final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);\n\t\tprivate final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);\n\t\tprivate final RuleCall cTypeTypeExpParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);\n\t\tprivate final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);\n\t\tprivate final Assignment cInitExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);\n\t\tprivate final RuleCall cInitExpressionExpressionParserRuleCall_4_0 = (RuleCall)cInitExpressionAssignment_4.eContents().get(0);\n\t\t//LetVariable:\n\t\t//\tname=Identifier ':' type=TypeExp '=' initExpression=Expression;\n\t\t@Override public ParserRule getRule() { return rule; }\n\t\t//name=Identifier ':' type=TypeExp '=' initExpression=Expression\n\t\tpublic Group getGroup() { return cGroup; }\n\t\t//name=Identifier\n\t\tpublic Assignment getNameAssignment_0() { return cNameAssignment_0; }\n\t\t//Identifier\n\t\tpublic RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }\n\t\t//':'\n\t\tpublic Keyword getColonKeyword_1() { return cColonKeyword_1; }\n\t\t//type=TypeExp\n\t\tpublic Assignment getTypeAssignment_2() { return cTypeAssignment_2; }\n\t\t//TypeExp\n\t\tpublic RuleCall getTypeTypeExpParserRuleCall_2_0() { return cTypeTypeExpParserRuleCall_2_0; }\n\t\t//'='\n\t\tpublic Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }\n\t\t//initExpression=Expression\n\t\tpublic Assignment getInitExpressionAssignment_4() { return cInitExpressionAssignment_4; }\n\t\t//Expression\n<fim_suffix>\t\tpublic RuleCall getInitExpressionExpressionParserRuleCall_4_0() { return cInitExpressionExpressionParserRuleCall_4_0; }<fim_middle>// function below has no smell\n"}