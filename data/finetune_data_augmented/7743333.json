{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.brooklyn.rest.security.provider;\n\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.brooklyn.api.mgmt.ManagementContext;\nimport org.apache.brooklyn.config.StringConfigMap;\nimport org.apache.brooklyn.core.internal.BrooklynProperties;\nimport org.apache.brooklyn.core.mgmt.internal.ManagementContextInternal;\nimport org.apache.brooklyn.rest.BrooklynWebConfig;\nimport org.apache.brooklyn.rest.security.PasswordHasher;\n\n/**\n * Security provider which validates users against passwords according to property keys,\n * as set in {@link BrooklynWebConfig#USERS} and {@link BrooklynWebConfig#PASSWORD_FOR_USER(String)}\n */\npublic class ExplicitUsersSecurityProvider extends AbstractSecurityProvider implements SecurityProvider {\n\n    public static final Logger LOG = LoggerFactory.getLogger(ExplicitUsersSecurityProvider.class);\n    \n    protected final ManagementContext mgmt;\n    private boolean allowAnyUserWithValidPass;\n    private Set<String> allowedUsers = null;\n\n    public ExplicitUsersSecurityProvider(ManagementContext mgmt) {\n        this.mgmt = mgmt;\n        initialize();\n    }\n\n    private synchronized void initialize() {\n        if (allowedUsers != null) return;\n\n        StringConfigMap properties = mgmt.getConfig();\n\n        allowedUsers = new LinkedHashSet<String>();\n        String users = properties.getConfig(BrooklynWebConfig.USERS);\n        if (users == null) {\n            LOG.warn(\"REST has no users configured; no one will be able to log in!\");\n        } else if (\"*\".equals(users)) {\n            LOG.info(\"REST allowing any user (so long as valid password is set)\");\n            allowAnyUserWithValidPass = true;\n        } else {\n            StringTokenizer t = new StringTokenizer(users, \",\");\n            while (t.hasMoreElements()) {\n                allowedUsers.add((\"\" + t.nextElement()).trim());\n            }\n            LOG.info(\"REST allowing users: \" + allowedUsers);\n        }\n    }\n    \n    @Override\n    public boolean authenticate(HttpSession session, String user, String password) {\n        if (session==null || user==null) return false;\n        \n        if (!allowAnyUserWithValidPass) {\n            if (!allowedUsers.contains(user)) {\n                LOG.debug(\"REST rejecting unknown user \"+user);\n                return false;                \n            }\n        }\n\n        if (checkExplicitUserPassword(mgmt, user, password)) {\n            return allow(session, user);\n        }\n        return false;\n    }\n\n    /** checks the supplied candidate user and password against the\n     * expect password (or SHA-256 + SALT thereof) defined as brooklyn properties.\n     */\n<fim_suffix>    public static boolean checkExplicitUserPassword(ManagementContext mgmt, String user, String password) {\n        BrooklynProperties properties = ((ManagementContextInternal)mgmt).getBrooklynProperties();\n        String expectedPassword = properties.getConfig(BrooklynWebConfig.PASSWORD_FOR_USER(user));\n        String salt = properties.getConfig(BrooklynWebConfig.SALT_FOR_USER(user));\n        String expectedSha256 = properties.getConfig(BrooklynWebConfig.SHA256_FOR_USER(user));\n        \n        return checkPassword(password, expectedPassword, expectedSha256, salt);\n    }\n    /** \n     * checks a candidate password against the expected credential defined for a given user.\n     * the expected credentials can be supplied as an expectedPassword OR as\n     * a combination of the SHA-256 hash of the expected password plus a defined salt.\n     * the combination of the SHA+SALT allows credentials to be supplied in a non-plaintext manner.\n     */\n    public static boolean checkPassword(String candidatePassword, String expectedPassword, String expectedPasswordSha256, String salt) {\n        if (expectedPassword != null) {\n            return expectedPassword.equals(candidatePassword);\n        } else if (expectedPasswordSha256 != null) {\n            String hashedCandidatePassword = PasswordHasher.sha256(salt, candidatePassword);\n            return expectedPasswordSha256.equals(hashedCandidatePassword);\n        }\n\n        return false;\n    }\n}<fim_middle>// function below has no smell\n"}