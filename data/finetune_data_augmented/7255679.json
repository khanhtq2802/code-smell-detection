{"text": "<fim_prefix> * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage org.graalvm.visualvm.modules.jconsole;\nimport com.sun.tools.jconsole.JConsoleContext;\nimport static com.sun.tools.jconsole.JConsoleContext.*;\nimport com.sun.tools.jconsole.JConsoleContext.ConnectionState;\nimport com.sun.tools.jconsole.JConsolePlugin;\nimport org.graalvm.visualvm.application.Application;\nimport org.graalvm.visualvm.core.ui.components.Spacer;\nimport org.graalvm.visualvm.modules.jconsole.options.JConsoleSettings;\nimport org.graalvm.visualvm.tools.jmx.JmxModel;\nimport org.graalvm.visualvm.tools.jmx.JmxModelFactory;\nimport java.awt.BorderLayout;\nimport java.awt.Font;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.ServiceConfigurationError;\nimport java.util.ServiceLoader;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport javax.management.MBeanServerConnection;\nimport javax.swing.BorderFactory;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTextArea;\nimport javax.swing.SwingWorker;\nimport javax.swing.Timer;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport org.netbeans.api.options.OptionsDisplayer;\nimport org.openide.awt.Mnemonics;\nimport org.openide.util.NbBundle;\nimport org.openide.util.RequestProcessor;\nclass JConsolePluginWrapper {\n    private static final Logger LOGGER = Logger.getLogger(JConsolePluginWrapper.class.getName());\n    private ServiceLoader<JConsolePlugin> pluginService;\n    private JComponent jconsoleView;\n    private VMPanel vmPanel;\n    JConsolePluginWrapper(Application application) {\n        JmxModel jmxModel = JmxModelFactory.getJmxModelFor(application);\n        if (jmxModel == null || jmxModel.getConnectionState() != JmxModel.ConnectionState.CONNECTED) {\n            JTextArea textArea = new JTextArea();\n            textArea.setBorder(BorderFactory.createEmptyBorder(25, 9, 9, 9));\n            textArea.setEditable(false);\n            textArea.setLineWrap(true);\n            textArea.setWrapStyleWord(true);\n            textArea.setText(NbBundle.getMessage(JConsolePluginWrapper.class, \"JMX_Not_Available\")); // NOI18N\n            jconsoleView = textArea;\n        } else {\n            boolean availablePlugins = getPlugins().iterator().hasNext();\n            if (availablePlugins) {\n                vmPanel = new VMPanel(application, this, new ProxyClient(jmxModel));\n                vmPanel.connect();\n                JPanel panel = new JPanel(new BorderLayout());\n                panel.setOpaque(false);\n                panel.add(new JLabel(\" \"), BorderLayout.NORTH); // NOI18N\n                panel.add(vmPanel, BorderLayout.CENTER);\n                jconsoleView = panel;\n            } else {\n                GridBagConstraints c;\n                JPanel hintPanel = new JPanel(new GridBagLayout());\n                hintPanel.setOpaque(false);\n                hintPanel.setBorder(BorderFactory.createEmptyBorder(25, 9, 9, 9));\n                JLabel hintLabel = new JLabel(NbBundle.getMessage(\n                        JConsolePluginWrapper.class, \"NoPluginInstalled\")); // NOI18N\n                hintLabel.setFont(hintLabel.getFont().deriveFont(Font.BOLD));\n                c = new GridBagConstraints();\n                c.gridy = 0;\n                c.anchor = GridBagConstraints.WEST;\n                c.fill = GridBagConstraints.NONE;\n                c.insets = new Insets(0, 0, 0, 0);\n                hintPanel.add(hintLabel, c);\n                JTextArea hintArea = new JTextArea();\n                hintArea.setEnabled(false);\n                hintArea.setEditable(false);\n                hintArea.setLineWrap(true);\n                hintArea.setWrapStyleWord(true);\n                hintArea.setDisabledTextColor(hintArea.getForeground());\n                hintArea.setOpaque(false);\n                hintArea.setText(NbBundle.getMessage(\n                        JConsolePluginWrapper.class, \"InstallPluginHint\")); // NOI18N\n                c = new GridBagConstraints();\n                c.gridy = 1;\n                c.weightx = 1;\n                c.anchor = GridBagConstraints.WEST;\n                c.fill = GridBagConstraints.HORIZONTAL;\n                c.insets = new Insets(5, 0, 0, 0);\n                hintPanel.add(hintArea, c);\n                JButton optionsButton = new JButton() {\n                    protected void fireActionPerformed(ActionEvent event) {\n                        OptionsDisplayer.getDefault().open(\"JConsoleOptions\"); // NOI18N\n                    }\n                };\n                Mnemonics.setLocalizedText(optionsButton, NbBundle.getMessage(\n                        JConsolePluginWrapper.class, \"ConfigurePlugins\")); // NOI18N\n                c = new GridBagConstraints();\n                c.gridy = 2;\n                c.anchor = GridBagConstraints.EAST;\n                c.fill = GridBagConstraints.NONE;\n                c.insets = new Insets(10, 0, 0, 0);\n                hintPanel.add(optionsButton, c);\n                c = new GridBagConstraints();\n                c.gridy = 3;\n                c.weighty = 1;\n                c.anchor = GridBagConstraints.NORTHWEST;\n                c.fill = GridBagConstraints.BOTH;\n                c.gridwidth = GridBagConstraints.REMAINDER;\n                hintPanel.add(Spacer.create(), c);\n                jconsoleView = hintPanel;\n            }\n        }\n    }\n    JComponent getView() {\n        return jconsoleView;\n    }\n    void releasePlugins() {\n        if (vmPanel != null) {\n            vmPanel.disconnect();\n        }\n    }\n    // Return a list of newly instantiated JConsolePlugin objects\n    synchronized List<JConsolePlugin> getPlugins() {\n        if (pluginService == null) {\n            String pluginPath = JConsoleSettings.getDefault().getPluginsPath();\n            // First time loading and initializing the plugins\n            initPluginService(pluginPath == null ? \"\" : pluginPath); // NOI18N\n        } else {\n            // Reload the plugin so that new instances will be created\n            pluginService.reload();\n        }\n        List<JConsolePlugin> plugins = new ArrayList<JConsolePlugin>();\n        for (JConsolePlugin p : pluginService) {\n            plugins.add(p);\n        }\n        return plugins;\n    }\n<fim_suffix>    private void initPluginService(String pluginPath) {\n        if (pluginPath.length() > 0) {\n            try {\n                ClassLoader pluginCL = new URLClassLoader(\n                        pathToURLs(pluginPath),\n                        JConsolePluginWrapper.class.getClassLoader());\n                ServiceLoader<JConsolePlugin> plugins =\n                        ServiceLoader.load(JConsolePlugin.class, pluginCL);\n                // Validate all plugins\n                for (JConsolePlugin p : plugins) {\n                    LOGGER.finer(\"JConsole plugin \" + p.getClass().getName() + \" loaded.\"); // NOI18N\n                }\n                pluginService = plugins;\n            } catch (ServiceConfigurationError e) {\n                // Error occurs during initialization of plugin\n                LOGGER.warning(\"Fail to load JConsole plugin: \" + e.getMessage()); // NOI18N\n                LOGGER.throwing(JConsolePluginWrapper.class.getName(), \"initPluginService\", e); // NOI18N\n            } catch (MalformedURLException e) {\n                LOGGER.warning(\"Invalid JConsole plugin path: \" + e.getMessage()); // NOI18N\n                LOGGER.throwing(JConsolePluginWrapper.class.getName(), \"initPluginService\", e); // NOI18N\n            }\n        }\n        if (pluginService == null) {\n            initEmptyPlugin();\n        }\n    }<fim_middle>// function below has no smell\n"}