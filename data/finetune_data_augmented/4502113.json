{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.apache.fluo.integration.log;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Iterables;\nimport org.apache.fluo.api.client.Loader;\nimport org.apache.fluo.api.client.LoaderExecutor;\nimport org.apache.fluo.api.client.Snapshot;\nimport org.apache.fluo.api.client.Transaction;\nimport org.apache.fluo.api.client.TransactionBase;\nimport org.apache.fluo.api.client.scanner.CellScanner;\nimport org.apache.fluo.api.client.scanner.ColumnScanner;\nimport org.apache.fluo.api.client.scanner.RowScanner;\nimport org.apache.fluo.api.data.Bytes;\nimport org.apache.fluo.api.data.Column;\nimport org.apache.fluo.api.data.ColumnValue;\nimport org.apache.fluo.api.data.RowColumn;\nimport org.apache.fluo.api.data.RowColumnValue;\nimport org.apache.fluo.api.observer.Observer;\nimport org.apache.fluo.api.observer.ObserverProvider;\nimport org.apache.fluo.api.observer.StringObserver;\nimport org.apache.fluo.core.util.UtilWaitThread;\nimport org.apache.fluo.integration.ITBaseMini;\nimport org.apache.fluo.integration.TestUtil;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.PatternLayout;\nimport org.apache.log4j.WriterAppender;\nimport org.junit.Assert;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.Timeout;\nimport static org.apache.fluo.api.observer.Observer.NotificationType.WEAK;\npublic class LogIT extends ITBaseMini {\n  @Rule\n  public Timeout globalTimeout = Timeout.seconds(getTestTimeout());\n  private static final Column STAT_COUNT = new Column(\"stat\", \"count\");\n  static class SimpleLoader implements Loader {\n    @Override\n    public void load(TransactionBase tx, Context context) throws Exception {\n      TestUtil.increment(tx, \"r1\", new Column(\"a\", \"b\"), 1);\n    }\n  }\n<fim_suffix>  static class SimpleBinaryLoader implements Loader {\n    private static final Bytes ROW = Bytes.of(new byte[] {'r', '1', 13});\n    @Override\n    public void load(TransactionBase tx, Context context) throws Exception {\n      TestUtil.increment(tx, ROW, new Column(Bytes.of(\"a\"), Bytes.of(new byte[] {0, 9})), 1);\n    }\n  }\n  static class TriggerLoader implements Loader {\n    int row;\n    TriggerLoader(int row) {\n      this.row = row;\n    }\n    @Override\n    public void load(TransactionBase tx, Context context) throws Exception {\n      tx.set(row + \"\", STAT_COUNT, \"1\");\n      tx.setWeakNotification(row + \"\", STAT_COUNT);\n    }\n  }\n  private static Bytes bRow1 = Bytes.of(new byte[] {'r', 0x05, '1'});\n  private static Bytes bRow2 = Bytes.of(new byte[] {'r', 0x06, '2'});\n  private static Column bCol1 = new Column(Bytes.of(new byte[] {'c', 0x02, '1'}),\n      Bytes.of(new byte[] {'c', (byte) 0xf5, '1'}));\n  private static Column bCol2 = new Column(Bytes.of(new byte[] {'c', 0x09, '2'}),\n      Bytes.of(new byte[] {'c', (byte) 0xe5, '2'}));\n  static class BinaryLoader1 implements Loader {\n    @Override\n    public void load(TransactionBase tx, Context context) throws Exception {\n      tx.delete(bRow1, bCol1);\n      tx.get(bRow2, bCol1);\n      tx.get(bRow2, ImmutableSet.of(bCol1, bCol2));\n      tx.get(ImmutableSet.of(bRow1, bRow2), ImmutableSet.of(bCol1, bCol2));\n      tx.set(bRow1, bCol2, Bytes.of(new byte[] {'v', (byte) 0x99, '2'}));\n      tx.set(bRow2, bCol2, Bytes.of(new byte[] {'v', (byte) 0xd9, '1'}));\n      tx.setWeakNotification(bRow2, bCol2);\n    }\n  }\n  public static class BinaryObserver implements Observer {\n    @Override\n    public void process(TransactionBase tx, Bytes row, Column col) {\n      tx.get(bRow1, bCol2);\n      tx.get(bRow2, ImmutableSet.of(bCol1, bCol2));\n      tx.get(ImmutableSet.of(bRow1, bRow2), ImmutableSet.of(bCol1, bCol2));\n    }\n  }\n  public static class TestObserver implements StringObserver {\n    @Override\n    public void process(TransactionBase tx, String row, Column col) {\n      TestUtil.increment(tx, \"all\", col, Integer.parseInt(tx.gets(row, col)));\n    }\n  }\n  public static class LogItObserverProvider implements ObserverProvider {\n    @Override\n    public void provide(Registry or, Context ctx) {\n      or.forColumn(STAT_COUNT, WEAK).useStrObserver(new TestObserver());\n      or.forColumn(bCol2, WEAK).useObserver(new BinaryObserver());\n    }\n  }\n  @Override\n  protected Class<? extends ObserverProvider> getObserverProviderClass() {\n    return LogItObserverProvider.class;\n  }\n  @Test\n  public void testCollisionLogging() throws Exception {\n    Logger logger = Logger.getLogger(\"fluo.tx.collisions\");\n    StringWriter writer = new StringWriter();\n    WriterAppender appender = new WriterAppender(new PatternLayout(\"%p, %m%n\"), writer);\n    Level level = logger.getLevel();\n    boolean additivity = logger.getAdditivity();\n    try {\n      logger.setLevel(Level.TRACE);\n      logger.setAdditivity(false);\n      logger.addAppender(appender);\n      try (LoaderExecutor le = client.newLoaderExecutor()) {\n        for (int i = 0; i < 20; i++) {\n          le.execute(new SimpleBinaryLoader());\n          le.execute(new TriggerLoader(i));\n        }\n      }\n      miniFluo.waitForObservers();\n    } finally {\n      logger.removeAppender(appender);\n      logger.setAdditivity(additivity);\n      logger.setLevel(level);\n    }\n    String logMsgs = writer.toString();\n    logMsgs = logMsgs.replace('\\n', ' ');\n    Assert.assertFalse(logMsgs.contains(\"TriggerLoader\"));\n    String pattern;\n    pattern = \".*txid: (\\\\d+) class: org.apache.fluo.integration.log.LogIT\\\\$SimpleBinaryLoader\";\n    pattern += \".*txid: \\\\1 collisions: \\\\Q[r1\\\\x0d=[a \\\\x00\\\\x09 ]]\\\\E.*\";\n    Assert.assertTrue(logMsgs.matches(pattern));\n    pattern = \".*txid: (\\\\d+) trigger: \\\\d+ stat count  \\\\d+\";\n    pattern += \".*txid: \\\\1 class: org.apache.fluo.integration.log.LogIT\\\\$TestObserver\";\n    pattern += \".*txid: \\\\1 collisions: \\\\Q[all=[stat count ]]\\\\E.*\";\n    Assert.assertTrue(logMsgs.matches(pattern));\n  }\n  @Test\n  public void testSummaryLogging() throws Exception {\n    Logger logger = Logger.getLogger(\"fluo.tx.summary\");\n    StringWriter writer = new StringWriter();<fim_middle>// class below has no smell\n"}