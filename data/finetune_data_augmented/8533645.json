{"text": "<fim_prefix>// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\npackage org.apache.cloudstack.api.command.user.network;\n\nimport org.apache.log4j.Logger;\n\nimport org.apache.cloudstack.acl.RoleType;\nimport org.apache.cloudstack.acl.SecurityChecker.AccessType;\nimport org.apache.cloudstack.api.ACL;\nimport org.apache.cloudstack.api.APICommand;\nimport org.apache.cloudstack.api.ApiConstants;\nimport org.apache.cloudstack.api.ApiErrorCode;\nimport org.apache.cloudstack.api.BaseAsyncCmd;\nimport org.apache.cloudstack.api.BaseAsyncCustomIdCmd;\nimport org.apache.cloudstack.api.Parameter;\nimport org.apache.cloudstack.api.ResponseObject.ResponseView;\nimport org.apache.cloudstack.api.ServerApiException;\nimport org.apache.cloudstack.api.response.NetworkOfferingResponse;\nimport org.apache.cloudstack.api.response.NetworkResponse;\nimport org.apache.cloudstack.context.CallContext;\n\nimport com.cloud.event.EventTypes;\nimport com.cloud.exception.ConcurrentOperationException;\nimport com.cloud.exception.InsufficientCapacityException;\nimport com.cloud.exception.InvalidParameterValueException;\nimport com.cloud.network.Network;\nimport com.cloud.offering.NetworkOffering;\nimport com.cloud.user.Account;\nimport com.cloud.user.User;\n\n<fim_suffix>@APICommand(name = \"updateNetwork\", description = \"Updates a network\", responseObject = NetworkResponse.class, responseView = ResponseView.Restricted, entityType = {Network.class},\n        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\npublic class UpdateNetworkCmd extends BaseAsyncCustomIdCmd {\n    public static final Logger s_logger = Logger.getLogger(UpdateNetworkCmd.class.getName());\n\n    private static final String s_name = \"updatenetworkresponse\";\n\n    /////////////////////////////////////////////////////\n    //////////////// API parameters /////////////////////\n    /////////////////////////////////////////////////////\n    @ACL(accessType = AccessType.OperateEntry)\n    @Parameter(name=ApiConstants.ID, type=CommandType.UUID, entityType = NetworkResponse.class,\n            required=true, description=\"the ID of the network\")\n    protected Long id;\n\n    @Parameter(name = ApiConstants.NAME, type = CommandType.STRING, description = \"the new name for the network\")\n    private String name;\n\n    @Parameter(name = ApiConstants.DISPLAY_TEXT, type = CommandType.STRING, description = \"the new display text for the network\")\n    private String displayText;\n\n    @Parameter(name = ApiConstants.NETWORK_DOMAIN, type = CommandType.STRING, description = \"network domain\")\n    private String networkDomain;\n\n    @Parameter(name = ApiConstants.CHANGE_CIDR, type = CommandType.BOOLEAN, description = \"Force update even if CIDR type is different\")\n    private Boolean changeCidr;\n\n    @Parameter(name = ApiConstants.NETWORK_OFFERING_ID, type = CommandType.UUID, entityType = NetworkOfferingResponse.class, description = \"network offering ID\")\n    private Long networkOfferingId;\n\n    @Parameter(name = ApiConstants.GUEST_VM_CIDR, type = CommandType.STRING, description = \"CIDR for guest VMs, CloudStack allocates IPs to guest VMs only from this CIDR\")\n    private String guestVmCidr;\n\n    @Parameter(name =ApiConstants.Update_IN_SEQUENCE, type=CommandType.BOOLEAN, description = \"if true, we will update the routers one after the other. applicable only for redundant router based networks using virtual router as provider\")\n    private Boolean updateInSequence;\n\n    @Parameter(name = ApiConstants.DISPLAY_NETWORK,\n               type = CommandType.BOOLEAN,\n description = \"an optional field, whether to the display the network to the end user or not.\", authorized = {RoleType.Admin})\n    private Boolean displayNetwork;\n\n    @Parameter(name= ApiConstants.FORCED, type = CommandType.BOOLEAN, description = \"Setting this to true will cause a forced network update,\", authorized = {RoleType.Admin})\n    private Boolean forced;\n\n    /////////////////////////////////////////////////////\n    /////////////////// Accessors ///////////////////////\n    /////////////////////////////////////////////////////\n\n    public Long getId() {\n        return id;\n    }\n\n    public String getNetworkName() {\n        return name;\n    }\n\n    public String getDisplayText() {\n        return displayText;\n    }\n\n    public String getNetworkDomain() {\n        return networkDomain;\n    }\n\n    public Long getNetworkOfferingId() {\n        return networkOfferingId;\n    }\n\n    public Boolean getChangeCidr() {\n        if (changeCidr != null) {\n            return changeCidr;\n        }\n        return false;\n    }\n\n    public String getGuestVmCidr() {\n        return guestVmCidr;\n    }\n\n    public Boolean getDisplayNetwork() {\n        return displayNetwork;\n    }\n\n    public Boolean getUpdateInSequence(){\n        if(updateInSequence ==null)\n            return false;\n        else\n            return updateInSequence;\n    }\n\n    public boolean getForced(){\n        if(forced==null){\n            return false;\n        }\n        return forced;\n    }\n    /////////////////////////////////////////////////////\n    /////////////// API Implementation///////////////////\n    /////////////////////////////////////////////////////\n\n    @Override\n    public String getCommandName() {\n        return s_name;\n    }\n\n    @Override\n    public long getEntityOwnerId() {\n        Network network = _networkService.getNetwork(id);\n        if (network == null) {\n            throw new InvalidParameterValueException(\"Networkd ID=\" + id + \" doesn't exist\");\n        } else {\n            return _networkService.getNetwork(id).getAccountId();\n        }\n    }\n\n    @Override\n    public void execute() throws InsufficientCapacityException, ConcurrentOperationException {\n        User callerUser = _accountService.getActiveUser(CallContext.current().getCallingUserId());\n        Account callerAccount = _accountService.getActiveAccountById(callerUser.getAccountId());\n        Network network = _networkService.getNetwork(id);\n        if (network == null) {\n            throw new InvalidParameterValueException(\"Couldn't find network by ID\");\n        }\n\n        Network result =\n            _networkService.updateGuestNetwork(getId(), getNetworkName(), getDisplayText(), callerAccount, callerUser, getNetworkDomain(), getNetworkOfferingId(),\n                getChangeCidr(), getGuestVmCidr(), getDisplayNetwork(), getCustomId(), getUpdateInSequence(), getForced());\n\n        if (result != null) {\n            NetworkResponse response = _responseGenerator.createNetworkResponse(ResponseView.Restricted, result);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to update network\");\n        }\n    }\n\n    @Override\n    public String getEventDescription() {\n        StringBuilder eventMsg = new StringBuilder(\"Updating network: \" + getId());\n        if (getNetworkOfferingId() != null) {\n            Network network = _networkService.getNetwork(getId());\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Networkd ID=\" + id + \" doesn't exist\");\n            }\n            if (network.getNetworkOfferingId() != getNetworkOfferingId()) {\n                NetworkOffering oldOff = _entityMgr.findById(NetworkOffering.class, network.getNetworkOfferingId());\n                NetworkOffering newOff = _entityMgr.findById(NetworkOffering.class, getNetworkOfferingId());\n                if (newOff == null) {\n                    throw new InvalidParameterValueException(\"Networkd offering ID supplied is invalid\");\n                }\n\n                eventMsg.append(\". Original network offering ID: \" + oldOff.getUuid() + \", new network offering ID: \" + newOff.getUuid());\n            }\n        }\n\n        return eventMsg.toString();\n    }\n\n    @Override\n    public String getEventType() {\n        return EventTypes.EVENT_NETWORK_UPDATE;\n    }\n\n    @Override\n    public String getSyncObjType() {\n        return BaseAsyncCmd.networkSyncObject;\n    }\n\n    @Override\n    public Long getSyncObjId() {\n        return id;\n    }\n\n    @Override\n    public void checkUuid() {\n        if (getCustomId() != null) {\n            _uuidMgr.checkUuid(getCustomId(), Network.class);\n        }\n    }\n}<fim_middle>// class below is data class\n"}