{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.chemistry.opencmis.client.bindings.spi;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.X509TrustManager;\nimport javax.xml.ws.handler.HandlerResolver;\n\nimport org.apache.chemistry.opencmis.commons.SessionParameter;\nimport org.w3c.dom.Element;\n\n/**\n * Authentication provider class.\n */\npublic abstract class AbstractAuthenticationProvider implements SessionAwareAuthenticationProvider {\n\n    private static final long serialVersionUID = 1L;\n\n    private BindingSession session;\n\n    /**\n     * Sets the {@link BindingSession} the authentication provider lives in.\n     */\n    @Override\n    public void setSession(BindingSession session) {\n        this.session = session;\n    }\n\n    /**\n     * Returns {@link BindingSession}.\n     */\n    public BindingSession getSession() {\n        return session;\n    }\n\n    @Override\n    public Map<String, List<String>> getHTTPHeaders(String url) {\n        return null;\n    }\n\n    @Override\n    public Element getSOAPHeaders(Object portObject) {\n        return null;\n    }\n\n    @Override\n    public HandlerResolver getHandlerResolver() {\n        return null;\n    }\n\n    @Override\n    public void putResponseHeaders(String url, int statusCode, Map<String, List<String>> headers) {\n    }\n\n    @Override\n    public SSLSocketFactory getSSLSocketFactory() {\n        return null;\n    }\n\n    @Override\n    public HostnameVerifier getHostnameVerifier() {\n        return null;\n    }\n\n    /**\n     * Gets the trust manager corresponding to the SSL socket factory.\n     * \n     * @return a {@link X509TrustManager} or {@code null}\n     */\n    public X509TrustManager getTrustManager() {\n        return null;\n    }\n\n    /**\n     * Gets the user name from the session.\n     * \n     * @return the user name or {@code null} if the user name is not set\n     */\n    protected String getUser() {\n        Object userObject = getSession().get(SessionParameter.USER);\n        if (userObject instanceof String) {\n            return (String) userObject;\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets the password from the session.\n     * \n     * @return the password or {@code null} if the password is not set\n     */\n    protected String getPassword() {\n        Object passwordObject = getSession().get(SessionParameter.PASSWORD);\n        if (passwordObject instanceof String) {\n            return (String) passwordObject;\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets the bearer token from the session.\n     * \n     * @return the bearer token or {@code null} if the token is not set\n     */\n    protected String getBearerToken() {\n        Object tokenObject = getSession().get(SessionParameter.OAUTH_ACCESS_TOKEN);\n        if (tokenObject instanceof String) {\n            return (String) tokenObject;\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets the proxy user name from the session.\n     * \n     * @return the proxy user name or {@code null} if the user name is not set\n     */\n    protected String getProxyUser() {\n        Object userObject = getSession().get(SessionParameter.PROXY_USER);\n        if (userObject instanceof String) {\n            return (String) userObject;\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets the proxy password from the session.\n     * \n     * @return the proxy password or {@code null} if the password is not set\n     */\n    protected String getProxyPassword() {\n        Object passwordObject = getSession().get(SessionParameter.PROXY_PASSWORD);\n        if (passwordObject instanceof String) {\n            return (String) passwordObject;\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets the CSRF header name.\n     * \n     * @return the CSRF header name or {@code null} if the CSRF header name is\n     *         not set\n     */\n<fim_suffix>    protected String getCsrfHeader() {\n        Object csrfHeaderObject = getSession().get(SessionParameter.CSRF_HEADER);\n        if (csrfHeaderObject instanceof String) {\n            return (String) csrfHeaderObject;\n        }\n\n        return null;\n    }\n}<fim_middle>// function below has no smell\n"}