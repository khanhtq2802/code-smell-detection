{"text": "<fim_prefix>    if (prev != null) {\n      ft.remove(prev);\n    }\n    ft.addToBackStack(null);\n\t\troutingFrag.setArguments(arguments);\n\t\troutingFrag.show(ft, \"routingdialog\");\n\t}\n\t/**\n\t * Displays the Directions Dialog Fragment\n\t */\n\tprivate void showDirectionsDialogFragment() {\n\t\t// Launch a DirectionsListFragment to display list of directions\n\t\tfinal DirectionsDialogFragment frag = new DirectionsDialogFragment();\n\t\tfrag.setRoutingDirections(mRoutingDirections, new DirectionsDialogListener() {\n\t\t\t@Override\n\t\t\tpublic void onDirectionSelected(int position) {\n\t\t\t\t// User has selected a particular direction -\n\t\t\t\t// dismiss the dialog and\n\t\t\t\t// zoom to the selected direction\n\t\t\t\tfrag.dismiss();\n\t\t\t\tDirectionManeuver direction = mRoutingDirections.get(position);\n\t\t\t\t// create a viewpoint from envelope\n\t\t\t\tViewpoint vp = new Viewpoint(direction.getGeometry().getExtent());\n\t\t\t\tmMapView.setViewpoint(vp);\n\t\t\t}\n\t\t});\n\t\tgetFragmentManager().beginTransaction().add(frag, null).commit();\n\t}\n\t/**\n\t * Displays the search view layout\n\t *\n\t */\n\tprivate void showSearchBoxLayout() {\n\t\t// Inflating the layout from the xml file\n\t\tmSearchBox = mInflater.inflate(R.layout.searchview, null);\n\t\t// Inflate navigation drawer button on SearchView\n\t\tnavButton = (ImageButton) mSearchBox.findViewById(R.id.btn_nav_menu);\n\t\t// Get the navigation drawer from Activity\n\t\tmDrawerLayout = (DrawerLayout) getActivity().findViewById(R.id.maps_app_activity_drawer_layout);\n\t\tmDrawerList = (ListView) getActivity().findViewById(R.id.maps_app_activity_left_drawer);\n\t\t// Set click listener to open/close drawer\n\t\tnavButton.setOnClickListener(new OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tif (mDrawerLayout.isDrawerOpen(mDrawerList)) {\n\t\t\t\t\tmDrawerLayout.closeDrawer(mDrawerList);\n\t\t\t\t} else {\n\t\t\t\t\tmDrawerLayout.openDrawer(mDrawerList);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// Setting the layout parameters to the layout\n\t\tmSearchBox.setLayoutParams(mlayoutParams);\n\t\t// Initializing the searchview and the image view\n\t\tmSearchview = (SearchView) mSearchBox.findViewById(R.id.searchView1);\n\t\tImageView iv_route = (ImageView) mSearchBox.findViewById(R.id.imageView1);\n\t\tmSearchview.setIconifiedByDefault(false);\n\t\tmSearchview.setQueryHint(SEARCH_HINT);\n\t\tapplySuggestionCursor();\n\t\t// navButton = (Button)mSearchBox.findViewById(R.id.navbutton);\n\t\t// Adding the layout to the map conatiner\n\t\tmMapContainer.addView(mSearchBox);\n\t\t// Setup the listener for the route onclick\n\t\tiv_route.setOnClickListener(new OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tshowRoutingDialogFragment();\n\t\t\t}\n\t\t});\n\t\t// Setup the listener when the search button is pressed on the keyboard\n\t\tmSearchview.setOnQueryTextListener(new OnQueryTextListener() {\n\t\t\t@Override\n\t\t\tpublic boolean onQueryTextSubmit(String query) {\n\t\t\t\tonSearchButtonClicked(query);\n\t\t\t\tmSearchview.clearFocus();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean onQueryTextChange(String newText) {\n\t\t\t\tif (mLocator == null)\n\t\t\t\t\treturn false;\n\t\t\t\tgetSuggestions(newText);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\t// Add the compass after getting the height of the layout\n\t\tmSearchBox.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n\t\t\t@Override\n\t\t\tpublic void onGlobalLayout() {\n\t\t\t\taddCompass(mSearchBox.getHeight());\n\t\t\t\tmSearchBox.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n\t\t\t}\n\t\t});\n\t\tmSearchview.setOnSuggestionListener(new SearchView.OnSuggestionListener() {\n\t\t\t@Override\n\t\t\tpublic boolean onSuggestionSelect(int position) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean onSuggestionClick(int position) {\n\t\t\t\t// Obtain the content of the selected suggesting place via\n\t\t\t\t// cursor\n\t\t\t\tMatrixCursor cursor = (MatrixCursor) mSearchview.getSuggestionsAdapter().getItem(position);\n\t\t\t\tint indexColumnSuggestion = cursor.getColumnIndex(COLUMN_NAME_ADDRESS);\n\t\t\t\tfinal String address = cursor.getString(indexColumnSuggestion);\n\t\t\t\tsuggestionClickFlag = true;\n\t\t\t\t// Find the Location of the suggestion\n\t\t\t\tgeoCodeSuggestedLocation(address);\n\t\t\t\tcursor.close();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t * Initialize Suggestion Cursor\n\t */\n\tprivate void initSuggestionCursor() {\n\t\tString[] cols = {BaseColumns._ID, COLUMN_NAME_ADDRESS, COLUMN_NAME_X, COLUMN_NAME_Y};\n\t\tmSuggestionCursor = new MatrixCursor(cols);\n\t}\n\t/**\n\t * Set the suggestion cursor to an Adapter then set it to the search view\n\t */\n\tprivate void applySuggestionCursor() {\n\t\tString[] cols = { COLUMN_NAME_ADDRESS};\n\t\tint[] to = {R.id.suggestion_item_address};\n\t\tSimpleCursorAdapter mSuggestionAdapter = new SimpleCursorAdapter(mMapView.getContext(),\n\t\t\t\tR.layout.search_suggestion_item, mSuggestionCursor, cols, to, 0);\n\t\tmSearchview.setSuggestionsAdapter(mSuggestionAdapter);\n\t\tmSuggestionAdapter.notifyDataSetChanged();\n\t}\n\t/**\n\t * Provide a character by character suggestions for the search string\n\t *\n\t * @param query\n\t *            String typed so far by the user to fetch the suggestions\n<fim_suffix>\t */\n\tprivate void getSuggestions(final String query) {\n\t\tif (query == null || query.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\t// Initialize the locatorSugestion parameters\n\t\tlocatorParams(SUGGEST_PLACE);\n\t\t// Attach a listener to the locator task since\n\t\t// the LocatorTask may or may not be loaded the\n\t\t// the very first time a user types text into the search box.\n\t\t// If the Locator is already loaded, the following listener\n\t\t// is invoked immediately.\n\t\tmLocator.addDoneLoadingListener(new Runnable() {\n\t\t\t@Override public void run() {\n\t\t\t\t// Does this locator support suggestions?\n\t\t\t\tif (mLocator.getLoadStatus().name() != LoadStatus.LOADED.name()){\n\t\t\t\t\t//Log.i(TAG,\"##### \" + mLocator.getLoadStatus().name());\n\t\t\t\t} else if (!mLocator.getLocatorInfo().isSupportsSuggestions()){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//og.i(TAG,\"****** \" + mLocator.getLoadStatus().name());\n\t\t\t\tfinal ListenableFuture<List<SuggestResult>> suggestionsFuture = mLocator.suggestAsync(query, suggestParams);\n\t\t\t\t// Attach a done listener that executes upon completion of the async call\n\t\t\t\tsuggestionsFuture.addDoneListener(new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Get the suggestions returned from the locator task.\n\t\t\t\t\t\t\t// Store retrieved suggestions for future use (e.g. if the user\n\t\t\t\t\t\t\t// selects a retrieved suggestion, it can easily be\n\t\t\t\t\t\t\t// geocoded).\n\t\t\t\t\t\t\tmSuggestionsList = suggestionsFuture.get();\n\t\t\t\t\t\t\tshowSuggestedPlaceNames(mSuggestionsList);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\tLog.e(TAG, \"Error on getting suggestions \" + e.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\t// Initiate the asynchronous call\n\t\tmLocator.loadAsync();<fim_middle>// function below is long method\n"}