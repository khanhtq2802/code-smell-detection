{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.wicket.extensions.ajax;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.fileupload.FileUploadException;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.WicketRuntimeException;\nimport org.apache.wicket.ajax.AjaxEventBehavior;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.ajax.attributes.AjaxCallListener;\nimport org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\nimport org.apache.wicket.ajax.attributes.AjaxRequestAttributes.Method;\nimport org.apache.wicket.core.util.string.CssUtils;\nimport org.apache.wicket.markup.head.IHeaderResponse;\nimport org.apache.wicket.markup.head.JavaScriptHeaderItem;\nimport org.apache.wicket.markup.html.form.upload.FileUpload;\nimport org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest;\nimport org.apache.wicket.protocol.http.servlet.ServletWebRequest;\nimport org.apache.wicket.request.resource.PackageResourceReference;\nimport org.apache.wicket.request.resource.ResourceReference;\nimport org.apache.wicket.util.lang.Args;\nimport org.apache.wicket.util.lang.Bytes;\n\n/**\n * Uploads files from a drop event.\n *\n * @author Andrew Kondratev\n * @author svenmeier\n */\npublic class AjaxFileDropBehavior extends AjaxEventBehavior\n{\n\n\tpublic static final String DRAG_OVER_CLASS_KEY = CssUtils.key(AjaxFileDropBehavior.class, \"dragover\");\n\n\tprivate static final ResourceReference JS = new PackageResourceReference(\n\t\tAjaxFileDropBehavior.class, \"wicket-ajaxupload.js\");\n\n\t/**\n\t * Maximum size of all uploaded files in bytes in a request.\n\t */\n\tprivate Bytes maxSize;\n\n\t/**\n\t * Maximum size of file of upload in bytes (if there are more than one) in a request.\n\t */\n\tprivate Bytes fileMaxSize;\n\n\tprivate String parameterName = \"f\";\n\n\t/**\n\t * Listen for 'dragover' and 'drop' events and prevent them, only 'drop' will initiate\n\t * an Ajax request.\n\t */\n\tpublic AjaxFileDropBehavior()\n\t{\n\t\tsuper(\"dragenter dragover dragleave drop\");\n\t}\n\n\t@Override\n\tpublic void renderHead(Component component, IHeaderResponse response)\n\t{\n\t\tsuper.renderHead(component, response);\n\n\t\tresponse.render(JavaScriptHeaderItem.forReference(JS));\n\t}\n\n\t@Override\n\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes)\n\t{\n\t\tsuper.updateAjaxAttributes(attributes);\n\n\t\tattributes.setMultipart(true);\n\t\tattributes.setMethod(Method.POST);\n\t\t// default must be prevented, otherwise browser will consume the dataTransfer\n\t\tattributes.setPreventDefault(true);\n\n\t\tattributes.getAjaxCallListeners().add(new AjaxCallListener() {\n\t\t\t@Override\n\t\t\tpublic CharSequence getPrecondition(Component component)\n\t\t\t{\n\t\t\t\tString css = getComponent().getString(DRAG_OVER_CLASS_KEY);\n\t\t\t\t\n\t\t\t\treturn String.format(\"jQuery('#' + attrs.c).toggleClass('%s', attrs.event.type === 'dragover'); return (attrs.event.type === 'drop');\", css);\n\t\t\t}\n\t\t});\n\t\t\n\t\tattributes.getDynamicExtraParameters()\n\t\t\t.add(String.format(\n\t\t\t\t\"return Wicket.DataTransfer.getFilesAsParamArray(attrs.event.originalEvent, '%s');\",\n\t\t\t\tparameterName));\n\t}\n\n\t@Override\n\tprotected void onEvent(AjaxRequestTarget target)\n\t{\n\t\ttry\n\t\t{\n\t\t\tServletWebRequest request = (ServletWebRequest)getComponent().getRequest();\n\t\t\tfinal MultipartServletWebRequest multipartWebRequest = request\n\t\t\t\t.newMultipartWebRequest(getMaxSize(), getComponent().getPage().getId());\n\t\t\tmultipartWebRequest.setFileMaxSize(getFileMaxSize());\n\t\t\tmultipartWebRequest.parseFileParts();\n\n\t\t\t// TODO: Can't this be detected from header?\n\t\t\tgetComponent().getRequestCycle().setRequest(multipartWebRequest);\n\n\t\t\tArrayList<FileUpload> fileUploads = new ArrayList<>();\n\n\t\t\t// Get the item for the path\n\t\t\tfinal List<FileItem> fileItems = multipartWebRequest.getFile(parameterName);\n\n\t\t\tif (fileItems != null)\n\t\t\t{\n\t\t\t\tfor (FileItem item : fileItems)\n\t\t\t\t{\n\t\t\t\t\tfileUploads.add(new FileUpload(item));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tonFileUpload(target, fileUploads);\n\t\t}\n\t\tcatch (final FileUploadException fux)\n\t\t{\n\t\t\tonError(target, fux);\n\t\t}\n\t}\n\n\tpublic Bytes getMaxSize()\n\t{\n\t\tif (maxSize == null)\n\t\t{\n\t\t\tmaxSize = getComponent().getApplication().getApplicationSettings()\n\t\t\t\t.getDefaultMaximumUploadSize();\n\t\t}\n\t\treturn maxSize;\n\t}\n\n\t/**\n\t * Set the maximum upload size.\n\t * \n\t * @param maxSize maximum size, must not be null\n\t */\n\tpublic void setMaxSize(Bytes maxSize)\n\t{\n\t\tArgs.notNull(maxSize, \"maxSize\");\n\t\tthis.maxSize = maxSize;\n\t}\n\n<fim_suffix>\tpublic Bytes getFileMaxSize()\n\t{\n\t\treturn fileMaxSize;\n\t}\n\n\t/**\n\t * Set an optional maximum size per file.\n\t * \n\t * @param fileMaxSize maximum size for each uploaded file\n\t */\n\tpublic void setFileMaxSize(Bytes fileMaxSize)\n\t{\n\t\tthis.fileMaxSize = fileMaxSize;\n\t}\n\n\t/**\n\t * Hook method called after a file was uploaded.\n\t * <p>\n\t * Note: {@link #onError(AjaxRequestTarget, FileUploadException)} is called instead when\n\t * uploading failed\n\t * \n\t * @param target\n\t *            the current request handler\n\t * @param files\n\t *            uploaded files\n\t */\n\tprotected void onFileUpload(AjaxRequestTarget target, List<FileUpload> files)\n\t{\n\t}\n\n\t/**\n\t * Hook method called to handle any error during uploading of the file.\n\t * <p>\n\t * Default implementation re-throws the exception. \n\t *\n\t * @param target\n\t *            the current request handler\n\t * @param e\n\t *            the error that occurred\n\t */\n\tprotected void onError(AjaxRequestTarget target, FileUploadException fux)\n\t{\n\t\tthrow new WicketRuntimeException(fux);\n\t}\n}<fim_middle>// function below has no smell\n"}