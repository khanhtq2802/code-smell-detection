{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache license, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the license for the specific language governing permissions and\n * limitations under the license.\n */\npackage org.apache.logging.log4j.core.pattern;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.Objects;\nimport java.util.TimeZone;\nimport java.util.concurrent.atomic.AtomicReference;\nimport org.apache.logging.log4j.core.LogEvent;\nimport org.apache.logging.log4j.core.config.plugins.Plugin;\nimport org.apache.logging.log4j.core.util.Constants;\nimport org.apache.logging.log4j.core.time.Instant;\nimport org.apache.logging.log4j.core.time.MutableInstant;\nimport org.apache.logging.log4j.core.time.internal.format.FastDateFormat;\nimport org.apache.logging.log4j.core.time.internal.format.FixedDateFormat;\nimport org.apache.logging.log4j.core.time.internal.format.FixedDateFormat.FixedFormat;\nimport org.apache.logging.log4j.util.PerformanceSensitive;\n/**\n * Converts and formats the event's date in a StringBuilder.\n */\n@Plugin(name = \"DatePatternConverter\", category = PatternConverter.CATEGORY)\n@ConverterKeys({\"d\", \"date\"})\n@PerformanceSensitive(\"allocation\")\npublic final class DatePatternConverter extends LogEventPatternConverter implements ArrayPatternConverter {\n<fim_suffix>    private abstract static class Formatter {\n        long previousTime; // for ThreadLocal caching mode\n        int nanos;\n        abstract String format(final Instant instant);\n        abstract void formatToBuffer(final Instant instant, StringBuilder destination);\n        public String toPattern() {\n            return null;\n        }\n    }\n    private static final class PatternFormatter extends Formatter {\n        private final FastDateFormat fastDateFormat;\n        // this field is only used in ThreadLocal caching mode\n        private final StringBuilder cachedBuffer = new StringBuilder(64);\n        PatternFormatter(final FastDateFormat fastDateFormat) {\n            this.fastDateFormat = fastDateFormat;\n        }\n        @Override\n        String format(final Instant instant) {\n            return fastDateFormat.format(instant.getEpochMillisecond());\n        }\n        @Override\n        void formatToBuffer(final Instant instant, final StringBuilder destination) {\n            final long timeMillis = instant.getEpochMillisecond();\n            if (previousTime != timeMillis) {\n                cachedBuffer.setLength(0);\n                fastDateFormat.format(timeMillis, cachedBuffer);\n            }\n            destination.append(cachedBuffer);\n        }\n        @Override\n        public String toPattern() {\n            return fastDateFormat.getPattern();\n        }\n    }\n    private static final class FixedFormatter extends Formatter {\n        private final FixedDateFormat fixedDateFormat;\n        // below fields are only used in ThreadLocal caching mode\n        private final char[] cachedBuffer = new char[70]; // max length of formatted date-time in any format < 70\n        private int length = 0;\n        FixedFormatter(final FixedDateFormat fixedDateFormat) {\n            this.fixedDateFormat = fixedDateFormat;\n        }\n        @Override\n        String format(final Instant instant) {\n            return fixedDateFormat.formatInstant(instant);\n        }\n        @Override\n        void formatToBuffer(final Instant instant, final StringBuilder destination) {\n            final long epochSecond = instant.getEpochSecond();\n            final int nanoOfSecond = instant.getNanoOfSecond();\n            if (previousTime != epochSecond || nanos != nanoOfSecond) {\n                length = fixedDateFormat.formatInstant(instant, cachedBuffer, 0);\n                previousTime = epochSecond;\n                nanos = nanoOfSecond;\n            }\n            destination.append(cachedBuffer, 0, length);\n        }\n        @Override\n        public String toPattern() {\n            return fixedDateFormat.getFormat();\n        }\n    }\n    private static final class UnixFormatter extends Formatter {\n        @Override\n        String format(final Instant instant) {\n            return Long.toString(instant.getEpochSecond());\n        }\n        @Override\n        void formatToBuffer(final Instant instant, final StringBuilder destination) {\n            destination.append(instant.getEpochSecond()); // no need for caching\n        }\n    }\n    private static final class UnixMillisFormatter extends Formatter {\n        @Override\n        String format(final Instant instant) {\n            return Long.toString(instant.getEpochMillisecond());\n        }\n        @Override\n        void formatToBuffer(final Instant instant, final StringBuilder destination) {\n            destination.append(instant.getEpochMillisecond()); // no need for caching\n        }\n    }\n    private final class CachedTime {\n        public long epochSecond;\n        public int nanoOfSecond;\n        public String formatted;\n        public CachedTime(final Instant instant) {\n            this.epochSecond = instant.getEpochSecond();\n            this.nanoOfSecond = instant.getNanoOfSecond();\n            this.formatted = formatter.format(instant);\n        }\n    }\n    /**\n     * UNIX formatter in seconds (standard).\n     */\n    private static final String UNIX_FORMAT = \"UNIX\";\n    /**\n     * UNIX formatter in milliseconds\n     */\n    private static final String UNIX_MILLIS_FORMAT = \"UNIX_MILLIS\";\n    private final String[] options;\n    private final ThreadLocal<MutableInstant> threadLocalMutableInstant = new ThreadLocal<>();\n    private final ThreadLocal<Formatter> threadLocalFormatter = new ThreadLocal<>();\n    private final AtomicReference<CachedTime> cachedTime;\n    private final Formatter formatter;\n    /**\n     * Private constructor.\n     *\n     * @param options options, may be null.\n     */\n    private DatePatternConverter(final String[] options) {\n        super(\"Date\", \"date\");\n        this.options = options == null ? null : Arrays.copyOf(options, options.length);\n        this.formatter = createFormatter(options);\n        cachedTime = new AtomicReference<>(fromEpochMillis(System.currentTimeMillis()));\n    }\n    private CachedTime fromEpochMillis(long epochMillis) {\n        final MutableInstant temp = new MutableInstant();\n        temp.initFromEpochMilli(epochMillis, 0);\n        return new CachedTime(temp);\n    }\n    private Formatter createFormatter(final String[] options) {\n        final FixedDateFormat fixedDateFormat = FixedDateFormat.createIfSupported(options);\n        if (fixedDateFormat != null) {\n            return createFixedFormatter(fixedDateFormat);\n        }\n        return createNonFixedFormatter(options);\n    }\n    /**\n     * Obtains an instance of pattern converter.\n     *\n     * @param options options, may be null.\n     * @return instance of pattern converter.\n     */\n    public static DatePatternConverter newInstance(final String[] options) {\n        return new DatePatternConverter(options);\n    }\n    private static Formatter createFixedFormatter(final FixedDateFormat fixedDateFormat) {\n        return new FixedFormatter(fixedDateFormat);\n    }\n    private static Formatter createNonFixedFormatter(final String[] options) {\n        // if we get here, options is a non-null array with at least one element (first of which non-null)\n        Objects.requireNonNull(options);\n        if (options.length == 0) {\n            throw new IllegalArgumentException(\"Options array must have at least one element\");\n        }\n        Objects.requireNonNull(options[0]);\n        final String patternOption = options[0];\n        if (UNIX_FORMAT.equals(patternOption)) {\n            return new UnixFormatter();\n        }\n        if (UNIX_MILLIS_FORMAT.equals(patternOption)) {\n            return new UnixMillisFormatter();\n        }\n        // LOG4J2-1149: patternOption may be a name (if a time zone was specified)\n        final FixedDateFormat.FixedFormat fixedFormat = FixedDateFormat.FixedFormat.lookup(patternOption);\n        final String pattern = fixedFormat == null ? patternOption : fixedFormat.getPattern();\n        // if the option list contains a TZ option, then set it.\n        TimeZone tz = null;\n        if (options.length > 1 && options[1] != null) {\n            tz = TimeZone.getTimeZone(options[1]);\n        }\n        try {\n            final FastDateFormat tempFormat = FastDateFormat.getInstance(pattern, tz);\n            return new PatternFormatter(tempFormat);\n        } catch (final IllegalArgumentException e) {\n            LOGGER.warn(\"Could not instantiate FastDateFormat with pattern \" + pattern, e);\n            // default to the DEFAULT format\n            return createFixedFormatter(FixedDateFormat.create(FixedFormat.DEFAULT, tz));\n        }\n    }\n    /**\n     * Appends formatted date to string buffer.\n     *\n     * @param date date\n     * @param toAppendTo buffer to which formatted date is appended.\n     */\n    public void format(final Date date, final StringBuilder toAppendTo) {\n        format(date.getTime(), toAppendTo);\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override<fim_middle>// class below has no smell\n"}