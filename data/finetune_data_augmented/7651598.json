{"text": "<fim_prefix>/*\n * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.security.acls.model;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Provides retrieval of {@link Acl} instances.\n *\n * @author Ben Alex\n */\n<fim_suffix>public interface AclService {\n\t// ~ Methods\n\t// ========================================================================================================\n\n\t/**\n\t * Locates all object identities that use the specified parent. This is useful for\n\t * administration tools.\n\t *\n\t * @param parentIdentity to locate children of\n\t *\n\t * @return the children (or <tt>null</tt> if none were found)\n\t */\n\tList<ObjectIdentity> findChildren(ObjectIdentity parentIdentity);\n\n\t/**\n\t * Same as {@link #readAclsById(List)} except it returns only a single Acl.\n\t * <p>\n\t * This method should not be called as it does not leverage the underlying\n\t * implementation's potential ability to filter <tt>Acl</tt> entries based on a\n\t * {@link Sid} parameter.\n\t * </p>\n\t *\n\t * @param object to locate an {@link Acl} for\n\t *\n\t * @return the {@link Acl} for the requested {@link ObjectIdentity} (never\n\t * <tt>null</tt>)\n\t *\n\t * @throws NotFoundException if an {@link Acl} was not found for the requested\n\t * {@link ObjectIdentity}\n\t */\n\tAcl readAclById(ObjectIdentity object) throws NotFoundException;\n\n\t/**\n\t * Same as {@link #readAclsById(List, List)} except it returns only a single Acl.\n\t *\n\t * @param object to locate an {@link Acl} for\n\t * @param sids the security identities for which {@link Acl} information is required\n\t * (may be <tt>null</tt> to denote all entries)\n\t *\n\t * @return the {@link Acl} for the requested {@link ObjectIdentity} (never\n\t * <tt>null</tt>)\n\t *\n\t * @throws NotFoundException if an {@link Acl} was not found for the requested\n\t * {@link ObjectIdentity}\n\t */\n\tAcl readAclById(ObjectIdentity object, List<Sid> sids) throws NotFoundException;\n\n\t/**\n\t * Obtains all the <tt>Acl</tt>s that apply for the passed <tt>Object</tt>s.\n\t * <p>\n\t * The returned map is keyed on the passed objects, with the values being the\n\t * <tt>Acl</tt> instances. Any unknown objects will not have a map key.\n\t * </p>\n\t *\n\t * @param objects the objects to find {@link Acl} information for\n\t *\n\t * @return a map with exactly one element for each {@link ObjectIdentity} passed as an\n\t * argument (never <tt>null</tt>)\n\t *\n\t * @throws NotFoundException if an {@link Acl} was not found for each requested\n\t * {@link ObjectIdentity}\n\t */\n\tMap<ObjectIdentity, Acl> readAclsById(List<ObjectIdentity> objects)\n\t\t\tthrows NotFoundException;\n\n\t/**\n\t * Obtains all the <tt>Acl</tt>s that apply for the passed <tt>Object</tt>s, but only\n\t * for the security identifies passed.\n\t * <p>\n\t * Implementations <em>MAY</em> provide a subset of the ACLs via this method although\n\t * this is NOT a requirement. This is intended to allow performance optimisations\n\t * within implementations. Callers should therefore use this method in preference to\n\t * the alternative overloaded version which does not have performance optimisation\n\t * opportunities.\n\t * </p>\n\t * <p>\n\t * The returned map is keyed on the passed objects, with the values being the\n\t * <tt>Acl</tt> instances. Any unknown objects (or objects for which the interested\n\t * <tt>Sid</tt>s do not have entries) will not have a map key.\n\t * </p>\n\t *\n\t * @param objects the objects to find {@link Acl} information for\n\t * @param sids the security identities for which {@link Acl} information is required\n\t * (may be <tt>null</tt> to denote all entries)\n\t *\n\t * @return a map with exactly one element for each {@link ObjectIdentity} passed as an\n\t * argument (never <tt>null</tt>)\n\t *\n\t * @throws NotFoundException if an {@link Acl} was not found for each requested\n\t * {@link ObjectIdentity}\n\t */\n\tMap<ObjectIdentity, Acl> readAclsById(List<ObjectIdentity> objects, List<Sid> sids)\n\t\t\tthrows NotFoundException;\n}<fim_middle>// class below has no smell\n"}