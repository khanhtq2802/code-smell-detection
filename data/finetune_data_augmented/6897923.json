{"text": "<fim_prefix>/*\n * Copyright (c) 2001, 2014, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage com.sun.tools.javadoc.main;\n\nimport java.util.EnumSet;\nimport javax.tools.JavaFileObject;\n\nimport com.sun.tools.javac.code.Symbol.PackageSymbol;\nimport com.sun.tools.javac.code.ClassFinder;\nimport com.sun.tools.javac.util.Context;\nimport com.sun.tools.javac.util.Context.Factory;\n\n/** Javadoc uses an extended class finder that records package.html entries\n *\n *  <p><b>This is NOT part of any supported API.\n *  If you write code that depends on this, you do so at your own risk.\n *  This code and its internal interfaces are subject to change or\n *  deletion without notice.</b>\n *\n *  @author Neal Gafter\n */\n<fim_suffix>@Deprecated\npublic class JavadocClassFinder extends ClassFinder {\n\n    public static JavadocClassFinder instance(Context context) {\n        ClassFinder instance = context.get(classFinderKey);\n        if (instance == null)\n            instance = new JavadocClassFinder(context);\n        return (JavadocClassFinder)instance;\n    }\n\n    public static void preRegister(Context context) {\n        context.put(classFinderKey, (Factory<ClassFinder>)JavadocClassFinder::new);\n    }\n\n    private DocEnv docenv;\n    private EnumSet<JavaFileObject.Kind> all = EnumSet.of(JavaFileObject.Kind.CLASS,\n                                                          JavaFileObject.Kind.SOURCE,\n                                                          JavaFileObject.Kind.HTML);\n    private EnumSet<JavaFileObject.Kind> noSource = EnumSet.of(JavaFileObject.Kind.CLASS,\n                                                               JavaFileObject.Kind.HTML);\n\n    public JavadocClassFinder(Context context) {\n        super(context);\n        docenv = DocEnv.instance(context);\n        preferSource = true;\n    }\n\n    /**\n     * Override getPackageFileKinds to include search for package.html\n     */\n    @Override\n    protected EnumSet<JavaFileObject.Kind> getPackageFileKinds() {\n        return docenv.docClasses ? noSource : all;\n    }\n\n    /**\n     * Override extraFileActions to check for package documentation\n     */\n    @Override\n    protected void extraFileActions(PackageSymbol pack, JavaFileObject fo) {\n        if (fo.isNameCompatible(\"package\", JavaFileObject.Kind.HTML))\n            docenv.getPackageDoc(pack).setDocPath(fo);\n    }\n}<fim_middle>// class below has no smell\n"}