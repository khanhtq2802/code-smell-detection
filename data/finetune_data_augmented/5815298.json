{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.tinkerpop.gremlin.hadoop.structure.io.graphson;\n\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.NullWritable;\nimport org.apache.hadoop.io.compress.CompressionCodecFactory;\nimport org.apache.hadoop.mapreduce.InputSplit;\nimport org.apache.hadoop.mapreduce.JobContext;\nimport org.apache.hadoop.mapreduce.RecordReader;\nimport org.apache.hadoop.mapreduce.TaskAttemptContext;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.tinkerpop.gremlin.hadoop.structure.io.HadoopPoolsConfigurable;\nimport org.apache.tinkerpop.gremlin.hadoop.structure.io.VertexWritable;\n\nimport java.io.IOException;\n\n/**\n * @author Marko A. Rodriguez (http://markorodriguez.com)\n */\n<fim_suffix>public final class GraphSONInputFormat extends FileInputFormat<NullWritable, VertexWritable> implements HadoopPoolsConfigurable {\n\n    @Override\n    public RecordReader<NullWritable, VertexWritable> createRecordReader(final InputSplit split, final TaskAttemptContext context) throws IOException, InterruptedException {\n        RecordReader<NullWritable, VertexWritable> reader = new GraphSONRecordReader();\n        reader.initialize(split, context);\n        return reader;\n    }\n\n    @Override\n    protected boolean isSplitable(final JobContext context, final Path file) {\n        return null == new CompressionCodecFactory(context.getConfiguration()).getCodec(file);\n    }\n}<fim_middle>// class below has no smell\n"}