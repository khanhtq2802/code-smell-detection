{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.crunch.io.parquet;\n\nimport com.google.common.collect.Maps;\nimport org.apache.avro.Schema;\nimport org.apache.avro.generic.IndexedRecord;\nimport org.apache.crunch.SourceTarget;\nimport org.apache.crunch.Target;\nimport org.apache.crunch.io.FileNamingScheme;\nimport org.apache.crunch.io.FormatBundle;\nimport org.apache.crunch.io.OutputHandler;\nimport org.apache.crunch.io.SequentialFileNamingScheme;\nimport org.apache.crunch.io.impl.FileTargetImpl;\nimport org.apache.crunch.types.Converter;\nimport org.apache.crunch.types.PType;\nimport org.apache.crunch.types.avro.AvroType;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.parquet.avro.AvroWriteSupport;\nimport org.apache.parquet.hadoop.ParquetOutputFormat;\n\nimport java.util.Map;\n\npublic class AvroParquetFileTarget extends FileTargetImpl {\n\n  static final String PARQUET_AVRO_SCHEMA_PARAMETER = \"parquet.avro.schema\";\n\n  private Map<String, String> extraConf = Maps.newHashMap();\n\n  public AvroParquetFileTarget(String path) {\n    this(new Path(path));\n  }\n\n  public AvroParquetFileTarget(Path path) {\n    this(path, SequentialFileNamingScheme.getInstance());\n  }\n\n  public AvroParquetFileTarget(Path path, FileNamingScheme fileNamingScheme) {\n    super(path, CrunchAvroParquetOutputFormat.class, fileNamingScheme);\n  }\n\n  @Override\n  public Target outputConf(String key, String value) {\n    extraConf.put(key, value);\n    return this;\n  }\n\n  @Override\n  public String toString() {\n    return \"Parquet(\" + path.toString() + \")\";\n  }\n\n  @Override\n  public boolean accept(OutputHandler handler, PType<?> ptype) {\n    if (!(ptype instanceof AvroType)) {\n      return false;\n    }\n    handler.configure(this, ptype);\n    return true;\n  }\n\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Converter<?, ?, ?, ?> getConverter(PType<?> ptype) {\n    return new AvroParquetConverter<Object>((AvroType<Object>) ptype);\n  }\n\n  @Override\n  public void configureForMapReduce(Job job, PType<?> ptype, Path outputPath, String name) {\n    AvroType<?> atype = (AvroType<?>) ptype;\n    String schemaParam;\n    if (name == null) {\n      schemaParam = PARQUET_AVRO_SCHEMA_PARAMETER;\n    } else {\n      schemaParam = PARQUET_AVRO_SCHEMA_PARAMETER + \".\" + name;\n    }\n    FormatBundle fb = FormatBundle.forOutput(CrunchAvroParquetOutputFormat.class);\n    for (Map.Entry<String, String> e : extraConf.entrySet()) {\n      fb.set(e.getKey(), e.getValue());\n    }\n    fb.set(schemaParam, atype.getSchema().toString());\n    configureForMapReduce(job, Void.class, atype.getTypeClass(), fb, outputPath, name);\n  }\n\n  @Override\n  public <T> SourceTarget<T> asSourceTarget(PType<T> ptype) {\n    if (ptype instanceof AvroType && IndexedRecord.class.isAssignableFrom(((AvroType) ptype).getTypeClass())) {\n      return new AvroParquetFileSourceTarget(path, (AvroType<T>) ptype).fileSystem(getFileSystem());\n    }\n    return null;\n  }\n\n<fim_suffix>  public static class CrunchAvroWriteSupport extends AvroWriteSupport {\n    @Override\n    public WriteContext init(Configuration conf) {\n      String outputName = conf.get(\"crunch.namedoutput\");\n      if (outputName != null && !outputName.isEmpty()) {\n        String schema = conf.get(PARQUET_AVRO_SCHEMA_PARAMETER + \".\" + outputName);\n        setSchema(conf, new Schema.Parser().parse(schema));\n      }\n      return super.init(conf);\n    }\n  }\n\n  public static class CrunchAvroParquetOutputFormat extends ParquetOutputFormat<IndexedRecord> {\n    public CrunchAvroParquetOutputFormat() {\n      super(new CrunchAvroWriteSupport());\n    }\n  }\n\n}<fim_middle>// class below has no smell\n"}