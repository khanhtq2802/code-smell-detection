{"text": "<fim_prefix>/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements. See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership. The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License. You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied. See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\npackage org.apache.taverna.platform.execution.impl.hadoop;\n\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.lib.input.FileSplit;\n\n/**\n *\n *\n * @author Alex Nenadic\n */\n<fim_suffix>public class CrossProductInputSplit extends FileSplit {\n\t//\n\t// private long length = 0;\n\t// private String[] hosts;\n\tprivate List<Path> inputPortDirectories;\n\tprivate Path workingDirectory;\n\n\tpublic CrossProductInputSplit() {\n\t\tsuper(null,0,0,null);\n\t\tinputPortDirectories = new ArrayList<Path>();\n\t\tSystem.out.println(\"Calling default constructor for cross product split\");\n\t}\n\n\tpublic CrossProductInputSplit(Path workingDirectory, List<Path> inputPortDirectories) {\n\t\t// this.length = length;\n\t\t// this.hosts = hosts;\n\t\tsuper(workingDirectory, 0, 0, new String[0]);\n\t\tthis.workingDirectory = workingDirectory;\n\t\tthis.inputPortDirectories = inputPortDirectories;\n\t\tSystem.out.println(\"Calling non-default constructor for cross product split\");\n\t}\n\n\tpublic void addInputPortDirectory(Path path) {\n\t\tinputPortDirectories.add(path);\n\t}\n\n\tpublic List<Path> getInputPortDirectories() {\n\t\treturn inputPortDirectories;\n\t}\n\n\t@Override\n\tpublic void write(DataOutput out) throws IOException {\n\t\tsuper.write(out);\n\t\tText.writeString(out, workingDirectory.toString());\n\t\tout.writeInt(inputPortDirectories.size());\n\t\tfor (Path path : inputPortDirectories) {\n\t\t\tText.writeString(out, path.toString());\n\t\t}\n\t}\n\n\t@Override\n\tpublic void readFields(DataInput in) throws IOException {\n\t\tsuper.readFields(in);\n\t\tworkingDirectory = new Path(Text.readString(in));\n\t\tint length = in.readInt();\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tinputPortDirectories.add(new Path(Text.readString(in)));\n\t\t}\n\t}\n\n}<fim_middle>// class below has no smell\n"}