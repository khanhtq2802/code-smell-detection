{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Autogenerated by Thrift Compiler (0.12.0)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage org.apache.storm.generated;\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\", \"unused\"})\n@javax.annotation.Generated(value = \"Autogenerated by Thrift Compiler (0.12.0)\")\npublic class PrivateWorkerKey implements org.apache.storm.thrift.TBase<PrivateWorkerKey, PrivateWorkerKey._Fields>, java.io.Serializable, Cloneable, Comparable<PrivateWorkerKey> {\n  private static final org.apache.storm.thrift.protocol.TStruct STRUCT_DESC = new org.apache.storm.thrift.protocol.TStruct(\"PrivateWorkerKey\");\n  private static final org.apache.storm.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(\"key\", org.apache.storm.thrift.protocol.TType.STRING, (short)1);\n  private static final org.apache.storm.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(\"userName\", org.apache.storm.thrift.protocol.TType.STRING, (short)2);\n  private static final org.apache.storm.thrift.protocol.TField EXPIRATION_TIME_MILLIS_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(\"expirationTimeMillis\", org.apache.storm.thrift.protocol.TType.I64, (short)3);\n  private static final org.apache.storm.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PrivateWorkerKeyStandardSchemeFactory();\n  private static final org.apache.storm.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PrivateWorkerKeyTupleSchemeFactory();\n  private @org.apache.storm.thrift.annotation.Nullable java.nio.ByteBuffer key; // required\n  private @org.apache.storm.thrift.annotation.Nullable java.lang.String userName; // required\n  private long expirationTimeMillis; // required\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.storm.thrift.TFieldIdEnum {\n    KEY((short)1, \"key\"),\n    USER_NAME((short)2, \"userName\"),\n    EXPIRATION_TIME_MILLIS((short)3, \"expirationTimeMillis\");\n    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n    static {\n      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n<fim_suffix>    @org.apache.storm.thrift.annotation.Nullable\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // KEY\n          return KEY;\n        case 2: // USER_NAME\n          return USER_NAME;\n        case 3: // EXPIRATION_TIME_MILLIS\n          return EXPIRATION_TIME_MILLIS;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    @org.apache.storm.thrift.annotation.Nullable\n    public static _Fields findByName(java.lang.String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final java.lang.String _fieldName;\n    _Fields(short thriftId, java.lang.String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public java.lang.String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  private static final int __EXPIRATIONTIMEMILLIS_ISSET_ID = 0;\n  private byte __isset_bitfield = 0;\n  public static final java.util.Map<_Fields, org.apache.storm.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    java.util.Map<_Fields, org.apache.storm.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.storm.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.KEY, new org.apache.storm.thrift.meta_data.FieldMetaData(\"key\", org.apache.storm.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.storm.thrift.meta_data.FieldValueMetaData(org.apache.storm.thrift.protocol.TType.STRING        , true)));\n    tmpMap.put(_Fields.USER_NAME, new org.apache.storm.thrift.meta_data.FieldMetaData(\"userName\", org.apache.storm.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.storm.thrift.meta_data.FieldValueMetaData(org.apache.storm.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.EXPIRATION_TIME_MILLIS, new org.apache.storm.thrift.meta_data.FieldMetaData(\"expirationTimeMillis\", org.apache.storm.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.storm.thrift.meta_data.FieldValueMetaData(org.apache.storm.thrift.protocol.TType.I64)));\n    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n    org.apache.storm.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrivateWorkerKey.class, metaDataMap);\n  }\n  public PrivateWorkerKey() {\n  }\n  public PrivateWorkerKey(\n    java.nio.ByteBuffer key,\n    java.lang.String userName,\n    long expirationTimeMillis)\n  {\n    this();\n    this.key = org.apache.storm.thrift.TBaseHelper.copyBinary(key);\n    this.userName = userName;\n    this.expirationTimeMillis = expirationTimeMillis;\n    set_expirationTimeMillis_isSet(true);\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public PrivateWorkerKey(PrivateWorkerKey other) {\n    __isset_bitfield = other.__isset_bitfield;\n    if (other.is_set_key()) {\n      this.key = org.apache.storm.thrift.TBaseHelper.copyBinary(other.key);\n    }\n    if (other.is_set_userName()) {\n      this.userName = other.userName;\n    }\n    this.expirationTimeMillis = other.expirationTimeMillis;\n  }\n  public PrivateWorkerKey deepCopy() {\n    return new PrivateWorkerKey(this);\n  }\n  @Override\n  public void clear() {\n    this.key = null;\n    this.userName = null;\n    set_expirationTimeMillis_isSet(false);\n    this.expirationTimeMillis = 0;\n  }\n  public byte[] get_key() {\n    set_key(org.apache.storm.thrift.TBaseHelper.rightSize(key));\n    return key == null ? null : key.array();\n  }\n  public java.nio.ByteBuffer buffer_for_key() {\n    return org.apache.storm.thrift.TBaseHelper.copyBinary(key);\n  }\n  public void set_key(byte[] key) {\n    this.key = key == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(key.clone());\n  }\n  public void set_key(@org.apache.storm.thrift.annotation.Nullable java.nio.ByteBuffer key) {<fim_middle>// function below has no smell\n"}