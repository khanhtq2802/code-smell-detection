{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.security.protocolPB;\n\nimport java.io.Closeable;\nimport java.io.IOException;\n\nimport org.apache.hadoop.ipc.ProtobufHelper;\nimport org.apache.hadoop.ipc.ProtocolMetaInterface;\nimport org.apache.hadoop.ipc.RPC;\nimport org.apache.hadoop.ipc.RpcClientUtil;\nimport org.apache.hadoop.security.authorize.RefreshAuthorizationPolicyProtocol;\nimport org.apache.hadoop.security.proto.RefreshAuthorizationPolicyProtocolProtos.RefreshServiceAclRequestProto;\nimport org.apache.hadoop.security.protocolPB.RefreshAuthorizationPolicyProtocolPB;\n\nimport com.google.protobuf.RpcController;\nimport com.google.protobuf.ServiceException;\n\n<fim_suffix>public class RefreshAuthorizationPolicyProtocolClientSideTranslatorPB implements\n    ProtocolMetaInterface, RefreshAuthorizationPolicyProtocol, Closeable {\n\n  /** RpcController is not used and hence is set to null */\n  private final static RpcController NULL_CONTROLLER = null;\n  private final RefreshAuthorizationPolicyProtocolPB rpcProxy;\n  \n  private final static RefreshServiceAclRequestProto\n  VOID_REFRESH_SERVICE_ACL_REQUEST =\n      RefreshServiceAclRequestProto.newBuilder().build();\n\n  public RefreshAuthorizationPolicyProtocolClientSideTranslatorPB(\n      RefreshAuthorizationPolicyProtocolPB rpcProxy) {\n    this.rpcProxy = rpcProxy;\n  }\n\n  @Override\n  public void close() throws IOException {\n    RPC.stopProxy(rpcProxy);\n  }\n\n  @Override\n  public void refreshServiceAcl() throws IOException {\n    try {\n      rpcProxy.refreshServiceAcl(NULL_CONTROLLER,\n          VOID_REFRESH_SERVICE_ACL_REQUEST);\n    } catch (ServiceException se) {\n      throw ProtobufHelper.getRemoteException(se);\n    }\n  }\n\n  @Override\n  public boolean isMethodSupported(String methodName) throws IOException {\n    return RpcClientUtil.isMethodSupported(rpcProxy,\n        RefreshAuthorizationPolicyProtocolPB.class,\n        RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n        RPC.getProtocolVersion(RefreshAuthorizationPolicyProtocolPB.class),\n        methodName);\n  }\n}<fim_middle>// class below has no smell\n"}