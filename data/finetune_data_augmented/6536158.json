{"text": "<fim_prefix>/**\n * Copyright (c) 2014,2019 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\npackage org.eclipse.smarthome.binding.astro.internal.calc;\n\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.eclipse.smarthome.binding.astro.internal.model.SunZodiac;\nimport org.eclipse.smarthome.binding.astro.internal.model.ZodiacSign;\nimport org.eclipse.smarthome.binding.astro.internal.util.DateTimeUtils;\n\n/**\n * Calculates the sign and range of the current zodiac.\n *\n * @author Gerhard Riegler - Initial contribution\n */\npublic class SunZodiacCalc {\n    private Map<Integer, List<SunZodiac>> zodiacsByYear = new HashMap<Integer, List<SunZodiac>>();\n\n    /**\n     * Returns the zodiac for the specified calendar.\n     */\n<fim_suffix>    public SunZodiac getZodiac(Calendar calendar) {\n        int year = calendar.get(Calendar.YEAR);\n        List<SunZodiac> zodiacs = zodiacsByYear.get(year);\n        if (zodiacs == null) {\n            zodiacs = calculateZodiacs(year);\n            zodiacsByYear.clear();\n            zodiacsByYear.put(year, zodiacs);\n        }\n\n        for (SunZodiac zodiac : zodiacs) {\n            if (zodiac.isValid(calendar)) {\n                return zodiac;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Calculates the zodiacs for the current year.\n     */\n    private List<SunZodiac> calculateZodiacs(int year) {\n        List<SunZodiac> zodiacs = new ArrayList<SunZodiac>();\n\n        zodiacs.add(new SunZodiac(ZodiacSign.ARIES,\n                DateTimeUtils.getRange(year, Calendar.MARCH, 21, year, Calendar.APRIL, 19)));\n        zodiacs.add(new SunZodiac(ZodiacSign.TAURUS,\n                DateTimeUtils.getRange(year, Calendar.APRIL, 20, year, Calendar.MAY, 20)));\n        zodiacs.add(new SunZodiac(ZodiacSign.GEMINI,\n                DateTimeUtils.getRange(year, Calendar.MAY, 21, year, Calendar.JUNE, 20)));\n        zodiacs.add(new SunZodiac(ZodiacSign.CANCER,\n                DateTimeUtils.getRange(year, Calendar.JUNE, 21, year, Calendar.JULY, 22)));\n        zodiacs.add(new SunZodiac(ZodiacSign.LEO,\n                DateTimeUtils.getRange(year, Calendar.JULY, 23, year, Calendar.AUGUST, 22)));\n        zodiacs.add(new SunZodiac(ZodiacSign.VIRGO,\n                DateTimeUtils.getRange(year, Calendar.AUGUST, 23, year, Calendar.SEPTEMBER, 22)));\n        zodiacs.add(new SunZodiac(ZodiacSign.LIBRA,\n                DateTimeUtils.getRange(year, Calendar.SEPTEMBER, 23, year, Calendar.OCTOBER, 22)));\n        zodiacs.add(new SunZodiac(ZodiacSign.SCORPIO,\n                DateTimeUtils.getRange(year, Calendar.OCTOBER, 23, year, Calendar.NOVEMBER, 21)));\n        zodiacs.add(new SunZodiac(ZodiacSign.SAGITTARIUS,\n                DateTimeUtils.getRange(year, Calendar.NOVEMBER, 22, year, Calendar.DECEMBER, 21)));\n        zodiacs.add(new SunZodiac(ZodiacSign.CAPRICORN,\n                DateTimeUtils.getRange(year, Calendar.DECEMBER, 22, year + 1, Calendar.JANUARY, 19)));\n        zodiacs.add(new SunZodiac(ZodiacSign.CAPRICORN,\n                DateTimeUtils.getRange(year - 1, Calendar.DECEMBER, 22, year, Calendar.JANUARY, 19)));\n        zodiacs.add(new SunZodiac(ZodiacSign.AQUARIUS,\n                DateTimeUtils.getRange(year, Calendar.JANUARY, 20, year, Calendar.FEBRUARY, 18)));\n        zodiacs.add(new SunZodiac(ZodiacSign.PISCES,\n                DateTimeUtils.getRange(year, Calendar.FEBRUARY, 19, year, Calendar.MARCH, 20)));\n\n        return zodiacs;\n    }\n}<fim_middle>// function below has no smell\n"}