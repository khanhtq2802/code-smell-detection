{"text": "<fim_prefix>  InstantArticle() {\n  }\n  public InstantArticle(Long id, APIContext context) {\n    this(id.toString(), context);\n  }\n  public InstantArticle(String id, APIContext context) {\n    this.mId = id;\n    this.context = context;\n  }\n  public InstantArticle fetch() throws APIException{\n    InstantArticle newInstance = fetchById(this.getPrefixedId().toString(), this.context);\n    this.copyFrom(newInstance);\n    return this;\n  }\n  public static InstantArticle fetchById(Long id, APIContext context) throws APIException {\n    return fetchById(id.toString(), context);\n  }\n  public static ListenableFuture<InstantArticle> fetchByIdAsync(Long id, APIContext context) throws APIException {\n    return fetchByIdAsync(id.toString(), context);\n  }\n  public static InstantArticle fetchById(String id, APIContext context) throws APIException {\n    return\n      new APIRequestGet(id, context)\n      .requestAllFields()\n      .execute();\n  }\n  public static ListenableFuture<InstantArticle> fetchByIdAsync(String id, APIContext context) throws APIException {\n    return\n      new APIRequestGet(id, context)\n      .requestAllFields()\n      .executeAsync();\n  }\n  public static APINodeList<InstantArticle> fetchByIds(List<String> ids, List<String> fields, APIContext context) throws APIException {\n    return (APINodeList<InstantArticle>)(\n      new APIRequest<InstantArticle>(context, \"\", \"/\", \"GET\", InstantArticle.getParser())\n        .setParam(\"ids\", APIRequest.joinStringList(ids))\n        .requestFields(fields)\n        .execute()\n    );\n  }\n  public static ListenableFuture<APINodeList<InstantArticle>> fetchByIdsAsync(List<String> ids, List<String> fields, APIContext context) throws APIException {\n    return\n      new APIRequest(context, \"\", \"/\", \"GET\", InstantArticle.getParser())\n        .setParam(\"ids\", APIRequest.joinStringList(ids))\n        .requestFields(fields)\n        .executeAsyncBase();\n  }\n  private String getPrefixedId() {\n    return getId();\n  }\n  public String getId() {\n    return getFieldId().toString();\n  }\n  public static InstantArticle loadJSON(String json, APIContext context, String header) {\n    InstantArticle instantArticle = getGson().fromJson(json, InstantArticle.class);\n    if (context.isDebug()) {\n      JsonParser parser = new JsonParser();\n      JsonElement o1 = parser.parse(json);\n      JsonElement o2 = parser.parse(instantArticle.toString());\n      if (o1.getAsJsonObject().get(\"__fb_trace_id__\") != null) {\n        o2.getAsJsonObject().add(\"__fb_trace_id__\", o1.getAsJsonObject().get(\"__fb_trace_id__\"));\n      }\n      if (!o1.equals(o2)) {\n        context.log(\"[Warning] When parsing response, object is not consistent with JSON:\");\n        context.log(\"[JSON]\" + o1);\n        context.log(\"[Object]\" + o2);\n      };\n    }\n    instantArticle.context = context;\n    instantArticle.rawValue = json;\n    instantArticle.header = header;\n    return instantArticle;\n  }\n  public static APINodeList<InstantArticle> parseResponse(String json, APIContext context, APIRequest request, String header) throws MalformedResponseException {\n    APINodeList<InstantArticle> instantArticles = new APINodeList<InstantArticle>(request, json, header);\n    JsonArray arr;\n    JsonObject obj;\n    JsonParser parser = new JsonParser();\n    Exception exception = null;\n    try{\n      JsonElement result = parser.parse(json);\n      if (result.isJsonArray()) {\n        // First, check if it's a pure JSON Array\n        arr = result.getAsJsonArray();\n        for (int i = 0; i < arr.size(); i++) {\n          instantArticles.add(loadJSON(arr.get(i).getAsJsonObject().toString(), context, header));\n        };\n        return instantArticles;\n      } else if (result.isJsonObject()) {\n        obj = result.getAsJsonObject();\n        if (obj.has(\"data\")) {\n          if (obj.has(\"paging\")) {\n            JsonObject paging = obj.get(\"paging\").getAsJsonObject();\n            if (paging.has(\"cursors\")) {\n                JsonObject cursors = paging.get(\"cursors\").getAsJsonObject();\n                String before = cursors.has(\"before\") ? cursors.get(\"before\").getAsString() : null;\n                String after = cursors.has(\"after\") ? cursors.get(\"after\").getAsString() : null;\n                instantArticles.setCursors(before, after);\n            }\n            String previous = paging.has(\"previous\") ? paging.get(\"previous\").getAsString() : null;\n            String next = paging.has(\"next\") ? paging.get(\"next\").getAsString() : null;\n            instantArticles.setPaging(previous, next);\n            if (context.hasAppSecret()) {\n              instantArticles.setAppSecret(context.getAppSecretProof());\n            }\n          }\n          if (obj.get(\"data\").isJsonArray()) {\n            // Second, check if it's a JSON array with \"data\"\n            arr = obj.get(\"data\").getAsJsonArray();\n            for (int i = 0; i < arr.size(); i++) {\n              instantArticles.add(loadJSON(arr.get(i).getAsJsonObject().toString(), context, header));\n            };\n          } else if (obj.get(\"data\").isJsonObject()) {\n            // Third, check if it's a JSON object with \"data\"\n            obj = obj.get(\"data\").getAsJsonObject();\n            boolean isRedownload = false;\n            for (String s : new String[]{\"campaigns\", \"adsets\", \"ads\"}) {\n              if (obj.has(s)) {\n                isRedownload = true;\n                obj = obj.getAsJsonObject(s);\n                for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n                  instantArticles.add(loadJSON(entry.getValue().toString(), context, header));\n                }\n                break;\n              }\n            }\n            if (!isRedownload) {\n              instantArticles.add(loadJSON(obj.toString(), context, header));\n            }\n          }\n          return instantArticles;\n        } else if (obj.has(\"images\")) {\n          // Fourth, check if it's a map of image objects\n          obj = obj.get(\"images\").getAsJsonObject();\n          for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n              instantArticles.add(loadJSON(entry.getValue().toString(), context, header));\n          }\n          return instantArticles;\n        } else {\n          // Fifth, check if it's an array of objects indexed by id\n          boolean isIdIndexedArray = true;\n          for (Map.Entry entry : obj.entrySet()) {\n            String key = (String) entry.getKey();\n            if (key.equals(\"__fb_trace_id__\")) {\n              continue;\n            }\n            JsonElement value = (JsonElement) entry.getValue();\n            if (\n              value != null &&\n              value.isJsonObject() &&\n              value.getAsJsonObject().has(\"id\") &&\n              value.getAsJsonObject().get(\"id\") != null &&\n              value.getAsJsonObject().get(\"id\").getAsString().equals(key)\n            ) {\n              instantArticles.add(loadJSON(value.toString(), context, header));\n            } else {\n              isIdIndexedArray = false;\n              break;\n            }\n          }\n          if (isIdIndexedArray) {\n            return instantArticles;\n          }\n          // Sixth, check if it's pure JsonObject\n          instantArticles.clear();\n          instantArticles.add(loadJSON(json, context, header));\n          return instantArticles;\n        }\n      }\n    } catch (Exception e) {\n      exception = e;\n    }\n    throw new MalformedResponseException(\n      \"Invalid response string: \" + json,\n      exception\n    );\n  }\n  @Override\n  public APIContext getContext() {\n    return context;\n  }\n  @Override\n  public void setContext(APIContext context) {\n    this.context = context;\n  }\n  @Override\n  public String toString() {\n    return getGson().toJson(this);\n  }\n  public APIRequestGetInsights getInsights() {\n    return new APIRequestGetInsights(this.getPrefixedId().toString(), context);\n  }\n  public APIRequestDelete delete() {\n    return new APIRequestDelete(this.getPrefixedId().toString(), context);\n  }\n  public APIRequestGet get() {\n    return new APIRequestGet(this.getPrefixedId().toString(), context);\n  }\n  public String getFieldCanonicalUrl() {\n    return mCanonicalUrl;\n  }\n  public Boolean getFieldDevelopmentMode() {\n    return mDevelopmentMode;\n  }\n  public String getFieldHtmlSource() {\n    return mHtmlSource;\n  }\n  public String getFieldId() {\n    return mId;\n  }\n<fim_suffix>  public Object getFieldMostRecentImportStatus() {\n    return mMostRecentImportStatus;\n  }<fim_middle>// function below has no smell\n"}