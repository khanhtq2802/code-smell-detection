{"text": "<fim_prefix>import org.apache.solr.common.params.SolrParams;\nimport org.apache.solr.common.util.NamedList;\nimport org.apache.solr.common.util.Utils;\n/**\n * <p>This class offers access to the operations exposed by the Solr Schema API.</p>\n * <p>Most of the operations of this class offer a very abstract interface avoiding\n * in this manner eventual changes due to Solr Schema API updates. On the other\n * hand, the creation of request parameters for creating new fields or field types\n * can be tedious because it is not strongly typed (the user has to build on his own\n * a {@link NamedList} argument containing the field/field type properties).</p>\n * <p>The class does not currently offer explicit support for the Schema API operations exposed\n * through Managed Resources, but such operations can be built with little effort manually\n * based on this class within the client applications.</p>\n * <p>This class is experimental and it is subject to change.</p>\n *\n * @see <a href=\"https://lucene.apache.org/solr/guide/schema-api.html\">Solr Schema API</a>\n * @see <a href=\"https://lucene.apache.org/solr/guide/managed-resources.html\">Solr managed resources</a>\n * @since solr 5.3\n */\npublic class SchemaRequest extends AbstractSchemaRequest<SchemaResponse> {\n  /**\n   * Default constructor.\n   * It can be used to retrieve the entire schema.\n   *\n   * @see #process(SolrClient)\n   */\n  public SchemaRequest() {\n    this(null);\n  }\n  public SchemaRequest(SolrParams q) {\n    super(METHOD.GET, \"/schema\", q);\n  }\n  private static NamedList<Object> createAddFieldTypeNamedList(FieldTypeDefinition fieldTypeDefinition) {\n    final NamedList<Object> addFieldTypeNamedList = new NamedList<>();\n    addFieldTypeNamedList.addAll(fieldTypeDefinition.getAttributes());\n    AnalyzerDefinition analyzerDefinition = fieldTypeDefinition.getAnalyzer();\n    if (analyzerDefinition != null) {\n      NamedList<Object> analyzerNamedList = createAnalyzerNamedList(analyzerDefinition);\n      addFieldTypeNamedList.add(\"analyzer\", analyzerNamedList);\n    }\n    AnalyzerDefinition indexAnalyzerDefinition = fieldTypeDefinition.getIndexAnalyzer();\n    if (indexAnalyzerDefinition != null) {\n      NamedList<Object> indexAnalyzerNamedList = createAnalyzerNamedList(indexAnalyzerDefinition);\n      addFieldTypeNamedList.add(\"indexAnalyzer\", indexAnalyzerNamedList);\n    }\n    AnalyzerDefinition queryAnalyzerDefinition = fieldTypeDefinition.getQueryAnalyzer();\n    if (queryAnalyzerDefinition != null) {\n      NamedList<Object> queryAnalyzerNamedList = createAnalyzerNamedList(queryAnalyzerDefinition);\n      addFieldTypeNamedList.add(\"queryAnalyzer\", queryAnalyzerNamedList);\n    }\n    AnalyzerDefinition multiTermAnalyzerDefinition = fieldTypeDefinition.getMultiTermAnalyzer();\n    if (multiTermAnalyzerDefinition != null) {\n      NamedList<Object> multiTermAnalyzerNamedList = createAnalyzerNamedList(multiTermAnalyzerDefinition);\n      addFieldTypeNamedList.add(\"multiTermAnalyzer\", multiTermAnalyzerNamedList);\n    }\n    Map<String, Object> similarityAttributes = fieldTypeDefinition.getSimilarity();\n    if (similarityAttributes != null && !similarityAttributes.isEmpty()) {\n      addFieldTypeNamedList.add(\"similarity\", new NamedList<>(similarityAttributes));\n    }\n    return addFieldTypeNamedList;\n  }\n  private static NamedList<Object> createAnalyzerNamedList(AnalyzerDefinition analyzerDefinition) {\n    NamedList<Object> analyzerNamedList = new NamedList<>();\n    Map<String, Object> analyzerAttributes = analyzerDefinition.getAttributes();\n    if (analyzerAttributes != null)\n      analyzerNamedList.addAll(analyzerAttributes);\n    List<Map<String, Object>> charFiltersAttributes = analyzerDefinition.getCharFilters();\n    if (charFiltersAttributes != null) {\n      List<NamedList<Object>> charFiltersList = new LinkedList<>();\n      for (Map<String, Object> charFilterAttributes : charFiltersAttributes)\n        charFiltersList.add(new NamedList<>(charFilterAttributes));\n      analyzerNamedList.add(\"charFilters\", charFiltersList);\n    }\n    Map<String, Object> tokenizerAttributes = analyzerDefinition.getTokenizer();\n    if (tokenizerAttributes != null) {\n      analyzerNamedList.add(\"tokenizer\", new NamedList<>(tokenizerAttributes));\n    }\n    List<Map<String, Object>> filtersAttributes = analyzerDefinition.getFilters();\n    if (filtersAttributes != null) {\n      List<NamedList<Object>> filtersList = new LinkedList<>();\n      for (Map<String, Object> filterAttributes : filtersAttributes)\n        filtersList.add(new NamedList<>(filterAttributes));\n      analyzerNamedList.add(\"filters\", filtersList);\n    }\n    return analyzerNamedList;\n  }\n  private static NamedList<Object> createAddFieldNamedList(Map<String, Object> fieldAttributes) {\n    final NamedList<Object> addFieldProps = new NamedList<>();\n    if (fieldAttributes != null) addFieldProps.addAll(fieldAttributes);\n    return addFieldProps;\n  }\n  @Override\n  protected SchemaResponse createResponse(SolrClient client) {\n    return new SchemaResponse();\n  }\n  /**\n   * Schema API request class that can be used to retrieve the name of the schema.\n   */\n  public static class SchemaName extends AbstractSchemaRequest<SchemaResponse.SchemaNameResponse> {\n    public SchemaName() {\n      this(null);\n    }\n    public SchemaName(SolrParams q) {\n      super(METHOD.GET, \"/schema/name\", q);\n    }\n    @Override\n    protected SchemaResponse.SchemaNameResponse createResponse(SolrClient client) {\n      return new SchemaResponse.SchemaNameResponse();\n    }\n  }\n  /**\n   * Schema API request that can be used to retrieve the version\n   * of the schema for the specified collection.\n   */\n  public static class SchemaVersion extends AbstractSchemaRequest<SchemaResponse.SchemaVersionResponse> {\n    public SchemaVersion() {\n      this(null);\n    }\n    public SchemaVersion(SolrParams q) {\n      super(METHOD.GET, \"/schema/version\", q);\n    }\n    @Override\n    protected SchemaResponse.SchemaVersionResponse createResponse(SolrClient client) {\n      return new SchemaResponse.SchemaVersionResponse();\n    }\n  }\n  /**\n   * Schema API request class that lists the field definitions contained in the schema.\n   */\n  public static class Fields extends AbstractSchemaRequest<SchemaResponse.FieldsResponse> {\n    public Fields() {\n      this(null);\n    }\n    public Fields(SolrParams q) {\n      super(METHOD.GET, \"/schema/fields\", q);\n    }\n    @Override\n    protected SchemaResponse.FieldsResponse createResponse(SolrClient client) {\n      return new SchemaResponse.FieldsResponse();\n    }\n  }\n  /**\n   * Schema API request that lists the field definition for the specified field\n   * contained in the schema.\n   */\n  public static class Field extends AbstractSchemaRequest<SchemaResponse.FieldResponse> {\n    /**\n     * Creates a new instance of the request.\n     *\n     * @param fieldName the name of the field for which the definition is to be retrieved\n     */\n    public Field(String fieldName) {\n      this(fieldName, null);\n    }\n    public Field(String fieldName, SolrParams q) {\n      super(METHOD.GET, \"/schema/fields/\" + fieldName, q);\n    }\n    @Override\n    protected SchemaResponse.FieldResponse createResponse(SolrClient client) {\n      return new SchemaResponse.FieldResponse();\n    }\n  }\n  /**\n   * Schema API request that lists the dynamic field definitions contained in the schema.\n   */\n  public static class DynamicFields extends AbstractSchemaRequest<SchemaResponse.DynamicFieldsResponse> {\n    public DynamicFields() {\n      this(null);\n    }\n    public DynamicFields(SolrParams q) {\n      super(METHOD.GET, \"/schema/dynamicfields\", q);\n    }\n    @Override\n    protected SchemaResponse.DynamicFieldsResponse createResponse(SolrClient client) {\n      return new SchemaResponse.DynamicFieldsResponse();\n    }\n  }\n  /**\n   * Schema API request that lists the dynamic field definition for the specified field\n   * contained in the schema.\n   */\n  public static class DynamicField extends AbstractSchemaRequest<SchemaResponse.DynamicFieldResponse> {\n    /**\n     * Creates a new instance of the class.\n     *\n     * @param dynamicFieldName the name of the dynamic field for which the definition is to be retrieved\n     */\n    public DynamicField(String dynamicFieldName) {\n      this(dynamicFieldName, null);\n    }\n    public DynamicField(String dynamicFieldName, SolrParams q) {\n      super(METHOD.GET, \"/schema/dynamicfields/\" + dynamicFieldName);\n    }\n    @Override\n    protected SchemaResponse.DynamicFieldResponse createResponse(SolrClient client) {\n      return new SchemaResponse.DynamicFieldResponse();\n    }\n  }\n  /**\n   * Schema API request that lists the types definitions contained\n   * in the schema.\n   */\n<fim_suffix>  public static class FieldTypes extends AbstractSchemaRequest<SchemaResponse.FieldTypesResponse> {\n    public FieldTypes() {\n      this(null);\n    }\n    public FieldTypes(SolrParams q) {\n      super(METHOD.GET, \"/schema/fieldtypes\");\n    }\n    @Override\n    protected SchemaResponse.FieldTypesResponse createResponse(SolrClient client) {\n      return new SchemaResponse.FieldTypesResponse();\n    }\n  }<fim_middle>// class below has no smell\n"}