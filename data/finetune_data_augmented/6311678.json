{"text": "<fim_prefix>        KapuaAppsMessage tmpMsg = new KapuaAppsMessageImpl();\n        KapuaAppsChannel tmpChan = new KapuaAppsChannelImpl();\n        KapuaAppsPayload tmpPayload = prepareDefaultApplicationPayload();\n        tmpChan.setClientId(clientId);\n        tmpSemParts.add(\"part1\");\n        tmpSemParts.add(\"part2\");\n        tmpChan.setSemanticParts(tmpSemParts);\n        tmpMsg.setChannel(tmpChan);\n        tmpMsg.setPayload(tmpPayload);\n        tmpMsg.setScopeId(tmpAccount.getId());\n        tmpMsg.setId(UUID.randomUUID());\n        tmpMsg.setReceivedOn(new Date());\n        tmpMsg.setPosition(getDefaultPosition());\n        tmpDev = deviceRegistryService.findByClientId(tmpAccount.getId(), clientId);\n        if (tmpDev != null) {\n            tmpMsg.setDeviceId(tmpDev.getId());\n        } else {\n            tmpMsg.setDeviceId(null);\n        }\n        try {\n            primeException();\n            deviceLifeCycleService.applications(generateRandomId(), tmpMsg);\n        } catch (KapuaException ex) {\n            verifyException(ex);\n        }\n    }\n    @When(\"^I configure the device service$\")\n    public void setDeviceServiceConfig(List<TestConfig> testConfigs)\n            throws Exception {\n        Account tmpAccount = (Account) stepData.get(\"LastAccount\");\n        Map<String, Object> valueMap = new HashMap<>();\n        for (TestConfig config : testConfigs) {\n            config.addConfigToMap(valueMap);\n        }\n        try {\n            primeException();\n            deviceRegistryService.setConfigValues(tmpAccount.getId(), tmpAccount.getScopeId(), valueMap);\n        } catch (KapuaException ex) {\n            verifyException(ex);\n        }\n    }\n    @When(\"^I configure the tag service$\")\n    public void setTagServiceConfig(List<TestConfig> testConfigs)\n            throws Exception {\n        Account tmpAccount = (Account) stepData.get(\"LastAccount\");\n        Map<String, Object> valueMap = new HashMap<>();\n        for (TestConfig config : testConfigs) {\n            config.addConfigToMap(valueMap);\n        }\n        try {\n            primeException();\n            tagService.setConfigValues(tmpAccount.getId(), tmpAccount.getScopeId(), valueMap);\n        } catch (KapuaException ex) {\n            verifyException(ex);\n        }\n    }\n    @Given(\"^(?:A d|D)evices? such as$\")\n    public void createADevicesAsSpecified(List<CucDevice> devLst)\n            throws KapuaException {\n        KapuaSecurityUtils.doPrivileged(() -> {\n            Assert.assertNotNull(devLst);\n            Device tmpDevice = null;\n            for (CucDevice tmpCDev : devLst) {\n                tmpCDev.parse();\n                DeviceCreator devCr = prepareDeviceCreatorFromCucDevice(tmpCDev);\n                tmpDevice = deviceRegistryService.create(devCr);\n            }\n            stepData.put(\"LastDevice\", tmpDevice);\n        });\n    }\n    @When(\"^I search for the device \\\"(.+)\\\" in account \\\"(.+)\\\"$\")\n    public void searchForDeviceWithClientID(String clientId, String account)\n            throws KapuaException {\n        Account tmpAcc;\n        Device tmpDev;\n        DeviceListResult tmpList = new DeviceListResultImpl();\n        tmpAcc = KapuaLocator.getInstance().getService(AccountService.class).findByName(account);\n        Assert.assertNotNull(tmpAcc);\n        Assert.assertNotNull(tmpAcc.getId());\n        tmpDev = deviceRegistryService.findByClientId(tmpAcc.getId(), clientId);\n        if (tmpDev != null) {\n            Vector<Device> dv = new Vector<>();\n            dv.add(tmpDev);\n            tmpList.addItems(dv);\n            stepData.put(\"Device\", tmpDev);\n            stepData.put(\"DeviceList\", tmpList);\n        }\n    }\n    @And(\"^I tag device with \\\"([^\\\"]*)\\\" tag$\")\n    public void iTagDeviceWithTag(String deviceTagName) throws Throwable {\n        Account account = (Account) stepData.get(\"LastAccount\");\n        Device device = (Device) stepData.get(\"Device\");\n        TagCreator tagCreator = new TagFactoryImpl().newCreator(account.getId());\n        tagCreator.setName(deviceTagName);\n        Tag tag = tagService.create(tagCreator);\n        Set<KapuaId> tags = new HashSet<>();\n        try {\n            stepData.put(\"ExceptionCaught\", false);\n            tags.add(tag.getId());\n            device.setTagIds(tags);\n            Device updatedDevice = deviceRegistryService.update(device);\n            stepData.put(\"tag\", tag);\n            stepData.put(\"tags\", tags);\n            stepData.put(\"Device\", updatedDevice);\n        } catch (KapuaException ex) {\n            stepData.put(\"ExceptionCaught\", true);\n        }\n    }\n    @When(\"^I search for device with tag \\\"([^\\\"]*)\\\"$\")\n    public void iSearchForDeviceWithTag(String deviceTagName) throws Throwable {\n        Account lastAcc = (Account) stepData.get(\"LastAccount\");\n        DeviceQueryImpl deviceQuery = new DeviceQueryImpl(lastAcc.getId());\n        KapuaQuery<Tag> tagQuery = new TagFactoryImpl().newQuery(lastAcc.getId());\n        tagQuery.setPredicate(new AttributePredicateImpl<>(TagAttributes.NAME, deviceTagName, AttributePredicate.Operator.EQUAL));\n        TagListResult tagQueryResult = tagService.query(tagQuery);\n        Tag tag = tagQueryResult.getFirstItem();\n        deviceQuery.setPredicate(AttributePredicateImpl.attributeIsEqualTo(DeviceAttributes.TAG_IDS, tag.getId()));\n        DeviceListResult deviceList = deviceRegistryService.query(deviceQuery);\n        stepData.put(\"DeviceList\", deviceList);\n    }\n    @Then(\"^I find device \\\"([^\\\"]*)\\\"$\")\n    public void iFindDeviceWithTag(String deviceName) throws Throwable {\n        DeviceListResult deviceList = (DeviceListResult) stepData.get(\"DeviceList\");\n        Device device = deviceList.getFirstItem();\n        Assert.assertNotNull(device);\n        Assert.assertEquals(deviceName, device.getClientId());\n    }\n    @And(\"^I untag device with \\\"([^\\\"]*)\\\" tag$\")\n    public void iDeleteTag(String deviceTagName) throws Throwable {\n        Tag foundTag = (Tag) stepData.get(\"tag\");\n        Assert.assertEquals(deviceTagName, foundTag.getName());\n        Device device = (Device) stepData.get(\"Device\");\n        stepData.remove(\"tag\");\n        stepData.remove(\"tags\");\n        Set<KapuaId> tags = new HashSet<>();\n        device.setTagIds(tags);\n        Device updatedDevice = deviceRegistryService.update(device);\n        stepData.put(\"Device\", updatedDevice);\n        Assert.assertEquals(device.getTagIds().isEmpty(), true);\n    }\n    @And(\"^I verify that tag \\\"([^\\\"]*)\\\" is deleted$\")\n    public void iVerifyTagIsDeleted(String deviceTagName) throws Throwable {\n        Tag foundTag = (Tag) stepData.get(\"tag\");\n        Assert.assertEquals(null, foundTag);\n    }\n    @When(\"^I search for events from device \\\"(.+)\\\" in account \\\"(.+)\\\"$\")\n    public void searchForEventsFromDeviceWithClientID(String clientId, String account)\n            throws KapuaException {\n        DeviceEventQuery tmpQuery;\n        Device tmpDev;\n        DeviceEventListResult tmpList;\n        Account tmpAcc;\n        tmpAcc = KapuaLocator.getInstance().getService(AccountService.class).findByName(account);\n        Assert.assertNotNull(tmpAcc);\n        Assert.assertNotNull(tmpAcc.getId());\n        tmpDev = deviceRegistryService.findByClientId(tmpAcc.getId(), clientId);\n        Assert.assertNotNull(tmpDev);\n        Assert.assertNotNull(tmpDev.getId());\n        tmpQuery = new DeviceEventQueryImpl(tmpAcc.getId());\n        tmpQuery.setPredicate(AttributePredicateImpl.attributeIsEqualTo(\"deviceId\", tmpDev.getId()));\n        tmpQuery.setSortCriteria(new FieldSortCriteria(\"receivedOn\", FieldSortCriteria.SortOrder.ASCENDING));\n        tmpList = deviceEventsService.query(tmpQuery);\n        Assert.assertNotNull(tmpList);\n        stepData.put(\"DeviceEventList\", tmpList);\n    }\n    @Then(\"^I find (\\\\d+) events?$\")\n    public void checkEventListLength(int cnt) {\n        Assert.assertNotNull(stepData.get(\"DeviceEventList\"));\n        Assert.assertEquals(cnt, ((DeviceEventListResultImpl) stepData.get(\"DeviceEventList\")).getSize());\n    }\n<fim_suffix>    @Then(\"^I find (\\\\d+) devices?$\")\n    public void checkDeviceListLength(int cnt) {\n        Assert.assertNotNull(stepData.get(\"DeviceList\"));\n        Assert.assertEquals(cnt, ((DeviceListResultImpl) stepData.get(\"DeviceList\")).getSize());\n    }<fim_middle>// function below has no smell\n"}