{"text": "<fim_prefix>/*\n * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.access.vote;\n\nimport java.util.*;\n\nimport org.springframework.security.access.AccessDecisionVoter;\nimport org.springframework.security.access.AccessDeniedException;\nimport org.springframework.security.access.ConfigAttribute;\nimport org.springframework.security.core.Authentication;\n\n/**\n * Simple concrete implementation of\n * {@link org.springframework.security.access.AccessDecisionManager} that grants access if\n * any <code>AccessDecisionVoter</code> returns an affirmative response.\n */\npublic class AffirmativeBased extends AbstractAccessDecisionManager {\n\n\tpublic AffirmativeBased(List<AccessDecisionVoter<? extends Object>> decisionVoters) {\n\t\tsuper(decisionVoters);\n\t}\n\n\t// ~ Methods\n\t// ========================================================================================================\n\n\t/**\n\t * This concrete implementation simply polls all configured\n\t * {@link AccessDecisionVoter}s and grants access if any\n\t * <code>AccessDecisionVoter</code> voted affirmatively. Denies access only if there\n\t * was a deny vote AND no affirmative votes.\n\t * <p>\n\t * If every <code>AccessDecisionVoter</code> abstained from voting, the decision will\n\t * be based on the {@link #isAllowIfAllAbstainDecisions()} property (defaults to\n\t * false).\n\t * </p>\n\t *\n\t * @param authentication the caller invoking the method\n\t * @param object the secured object\n\t * @param configAttributes the configuration attributes associated with the method\n\t * being invoked\n\t *\n\t * @throws AccessDeniedException if access is denied\n\t */\n<fim_suffix>\tpublic void decide(Authentication authentication, Object object,\n\t\t\tCollection<ConfigAttribute> configAttributes) throws AccessDeniedException {\n\t\tint deny = 0;\n\n\t\tfor (AccessDecisionVoter voter : getDecisionVoters()) {\n\t\t\tint result = voter.vote(authentication, object, configAttributes);\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Voter: \" + voter + \", returned: \" + result);\n\t\t\t}\n\n\t\t\tswitch (result) {\n\t\t\tcase AccessDecisionVoter.ACCESS_GRANTED:\n\t\t\t\treturn;\n\n\t\t\tcase AccessDecisionVoter.ACCESS_DENIED:\n\t\t\t\tdeny++;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (deny > 0) {\n\t\t\tthrow new AccessDeniedException(messages.getMessage(\n\t\t\t\t\t\"AbstractAccessDecisionManager.accessDenied\", \"Access is denied\"));\n\t\t}\n\n\t\t// To get this far, every AccessDecisionVoter abstained\n\t\tcheckAllowIfAllAbstainDecisions();\n\t}\n}<fim_middle>// function below is long method\n"}