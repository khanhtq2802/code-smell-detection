{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2012 Pivotal Software, Inc.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Pivotal Software, Inc. - initial API and implementation\n *******************************************************************************/\npackage org.grails.ide.eclipse.groovy.debug.core.evaluation;\n\nimport groovy.lang.GroovyClassLoader;\n\nimport java.security.AccessController;\nimport java.security.CodeSource;\nimport java.security.PrivilegedAction;\n\nimport org.codehaus.groovy.ast.ClassNode;\nimport org.codehaus.groovy.classgen.GeneratorContext;\nimport org.codehaus.groovy.control.CompilationFailedException;\nimport org.codehaus.groovy.control.CompilationUnit;\nimport org.codehaus.groovy.control.CompilerConfiguration;\nimport org.codehaus.groovy.control.Phases;\nimport org.codehaus.groovy.control.SourceUnit;\n\n\n/**\n * A classloader for the script to be evaluated that has a different parent\n * than the currently running STS instance or the debugged.  This way\n * classes in the script do not conflict with classes in running STS instance.\n * @author Andrew Eisenberg\n * @since 2.5.1\n */\npublic class JDIGroovyClassLoader extends GroovyClassLoader {\n\n    private ClassNode theClass;\n    \n    public JDIGroovyClassLoader() {\n        super();\n    }\n\n    public JDIGroovyClassLoader(ClassLoader loader) {\n        super(loader);\n    }\n\n    class JDIClassCollector extends ClassCollector {\n\n        protected JDIClassCollector(InnerLoader cl, CompilationUnit unit, SourceUnit su) {\n            super(cl, unit, su);\n        }\n        \n<fim_suffix>        @SuppressWarnings(\"rawtypes\")\n        protected Class createClass(byte[] code, ClassNode classNode) {\n            theClass = classNode;\n            return super.createClass(code, classNode);\n        }\n        \n    }\n    \n    protected ClassCollector createCollector(CompilationUnit unit, SourceUnit su) {\n        InnerLoader loader = AccessController.doPrivileged(new PrivilegedAction<InnerLoader>() {\n            public InnerLoader run() {\n                return new InnerLoader(JDIGroovyClassLoader.this);\n            }\n        });\n        return new JDIClassCollector(loader, unit, su);\n    }\n    \n    public ClassNode getTheClass() {\n        return theClass;\n    }\n    \n    /**\n     * Override this method to add a new phase to the compilation\n     * We need to convert comparator binary expressions to using the JDIComparator instead\n     * of ScriptByteCodeAdapter.\n     */\n    @Override\n    protected CompilationUnit createCompilationUnit(\n            CompilerConfiguration config, CodeSource source) {\n        CompilationUnit compilationUnit = super.createCompilationUnit(config, source);\n        compilationUnit.addPhaseOperation(new CompilationUnit.PrimaryClassNodeOperation() {\n            \n            public void call(SourceUnit source, GeneratorContext context,\n                    ClassNode classNode) throws CompilationFailedException {\n                new JDIComparator.ComparatorVisitor().visitBlockStatement(classNode.getModule().getStatementBlock());\n            }\n        }, Phases.CANONICALIZATION);\n        return compilationUnit;\n    }\n}<fim_middle>// function below has no smell\n"}