{"text": "<fim_prefix>      static {\n        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // TABLE_NAME\n            return TABLE_NAME;\n          case 2: // ROW\n            return ROW;\n          case 3: // MUTATIONS\n            return MUTATIONS;\n          case 4: // TIMESTAMP\n            return TIMESTAMP;\n          case 5: // ATTRIBUTES\n            return ATTRIBUTES;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByName(java.lang.String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final java.lang.String _fieldName;\n      _Fields(short thriftId, java.lang.String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public java.lang.String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    private static final int __TIMESTAMP_ISSET_ID = 0;\n    private byte __isset_bitfield = 0;\n    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData(\"tableName\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , \"Text\")));\n      tmpMap.put(_Fields.ROW, new org.apache.thrift.meta_data.FieldMetaData(\"row\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , \"Text\")));\n      tmpMap.put(_Fields.MUTATIONS, new org.apache.thrift.meta_data.FieldMetaData(\"mutations\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, \n              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Mutation.class))));\n      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData(\"timestamp\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));\n      tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData(\"attributes\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, \n              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , \"Text\"), \n              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , \"Text\"))));\n      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutateRowTs_args.class, metaDataMap);\n    }\n    public mutateRowTs_args() {\n    }\n    public mutateRowTs_args(\n      java.nio.ByteBuffer tableName,\n      java.nio.ByteBuffer row,\n      java.util.List<Mutation> mutations,\n      long timestamp,\n      java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> attributes)\n    {\n      this();\n      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);\n      this.row = org.apache.thrift.TBaseHelper.copyBinary(row);\n      this.mutations = mutations;\n      this.timestamp = timestamp;\n      setTimestampIsSet(true);\n      this.attributes = attributes;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public mutateRowTs_args(mutateRowTs_args other) {\n      __isset_bitfield = other.__isset_bitfield;\n      if (other.isSetTableName()) {\n        this.tableName = org.apache.thrift.TBaseHelper.copyBinary(other.tableName);\n      }\n      if (other.isSetRow()) {\n        this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);\n      }\n      if (other.isSetMutations()) {\n        java.util.List<Mutation> __this__mutations = new java.util.ArrayList<Mutation>(other.mutations.size());\n        for (Mutation other_element : other.mutations) {\n          __this__mutations.add(new Mutation(other_element));\n        }\n        this.mutations = __this__mutations;\n      }\n      this.timestamp = other.timestamp;\n      if (other.isSetAttributes()) {\n        java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> __this__attributes = new java.util.HashMap<java.nio.ByteBuffer,java.nio.ByteBuffer>(other.attributes.size());\n        for (java.util.Map.Entry<java.nio.ByteBuffer, java.nio.ByteBuffer> other_element : other.attributes.entrySet()) {\n          java.nio.ByteBuffer other_element_key = other_element.getKey();\n          java.nio.ByteBuffer other_element_value = other_element.getValue();\n          java.nio.ByteBuffer __this__attributes_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);\n          java.nio.ByteBuffer __this__attributes_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);\n          __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);\n        }\n        this.attributes = __this__attributes;\n      }\n    }\n    public mutateRowTs_args deepCopy() {\n      return new mutateRowTs_args(this);\n    }\n    @Override\n    public void clear() {\n      this.tableName = null;\n      this.row = null;\n      this.mutations = null;\n      setTimestampIsSet(false);\n      this.timestamp = 0;\n      this.attributes = null;\n    }\n    /**\n     * name of table\n     */\n    public byte[] getTableName() {\n      setTableName(org.apache.thrift.TBaseHelper.rightSize(tableName));\n      return tableName == null ? null : tableName.array();\n    }\n    public java.nio.ByteBuffer bufferForTableName() {\n      return org.apache.thrift.TBaseHelper.copyBinary(tableName);\n    }\n    /**\n     * name of table\n     */\n    public mutateRowTs_args setTableName(byte[] tableName) {\n      this.tableName = tableName == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(tableName.clone());\n      return this;\n    }\n    public mutateRowTs_args setTableName(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer tableName) {\n      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);\n      return this;\n    }\n    public void unsetTableName() {\n      this.tableName = null;\n    }\n    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */\n    public boolean isSetTableName() {\n      return this.tableName != null;\n    }\n    public void setTableNameIsSet(boolean value) {\n      if (!value) {\n        this.tableName = null;\n      }\n    }\n    /**\n     * row key\n     */\n    public byte[] getRow() {\n      setRow(org.apache.thrift.TBaseHelper.rightSize(row));\n      return row == null ? null : row.array();\n    }\n<fim_suffix>    public java.nio.ByteBuffer bufferForRow() {\n      return org.apache.thrift.TBaseHelper.copyBinary(row);\n    }<fim_middle>// function below has no smell\n"}