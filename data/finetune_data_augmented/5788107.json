{"text": "<fim_prefix>        if (!pageSegMode.matches(\"[0-9]|10|11|12|13\")) {\n            throw new IllegalArgumentException(\"Invalid page segmentation mode\");\n        }\n        this.pageSegMode = pageSegMode;\n    }\n    /**\n     * @see #setPageSeparator(String pageSeparator)\n     */\n    public String getPageSeparator() {\n        return pageSeparator;\n    }\n    /**\n     * The page separator to use in plain text output.  This corresponds to Tesseract's page_separator config option.\n     * The default here is the empty string (i.e. no page separators).  Note that this is also the default in\n     * Tesseract 3.x, but in Tesseract 4.0 the default is to use the form feed control character.  We are overriding\n     * Tesseract 4.0's default here.\n     *\n     * @param pageSeparator\n     */\n    public void setPageSeparator(String pageSeparator) {\n        Matcher m = ALLOWABLE_PAGE_SEPARATORS_PATTERN.matcher(pageSeparator);\n        if (! m.find()) {\n            throw new IllegalArgumentException(pageSeparator + \" contains illegal characters.\\n\"+\n            \"If you trust this value, set it with setTrustedPageSeparator\");\n        }\n        setTrustedPageSeparator(pageSeparator);\n    }\n    /**\n     * Same as {@link #setPageSeparator(String)} but does not perform\n     * any checks on the string.\n     * @param pageSeparator\n     */\n    public void setTrustedPageSeparator(String pageSeparator) {\n        this.pageSeparator = pageSeparator;\n    }\n    /**\n     * Whether or not to maintain interword spacing.  Default is <code>false</code>.\n     *\n     * @param preserveInterwordSpacing\n     */\n    public void setPreserveInterwordSpacing(boolean preserveInterwordSpacing) {\n        this.preserveInterwordSpacing = preserveInterwordSpacing;\n    }\n    /**\n     *\n     * @return whether or not to maintain interword spacing.\n     */\n    public boolean getPreserveInterwordSpacing() {\n        return preserveInterwordSpacing;\n    }\n    /**\n     * @see #setMinFileSizeToOcr(long minFileSizeToOcr)\n     */\n    public long getMinFileSizeToOcr() {\n        return minFileSizeToOcr;\n    }\n    /**\n     * Set minimum file size to submit file to ocr.\n     * Default is 0.\n     */\n    public void setMinFileSizeToOcr(long minFileSizeToOcr) {\n        this.minFileSizeToOcr = minFileSizeToOcr;\n    }\n    /**\n     * @see #setMaxFileSizeToOcr(long maxFileSizeToOcr)\n     */\n    public long getMaxFileSizeToOcr() {\n        return maxFileSizeToOcr;\n    }\n    /**\n     * Set maximum file size to submit file to ocr.\n     * Default is Integer.MAX_VALUE.\n     */\n    public void setMaxFileSizeToOcr(long maxFileSizeToOcr) {\n        this.maxFileSizeToOcr = maxFileSizeToOcr;\n    }\n    /**\n     * Set maximum time (seconds) to wait for the ocring process to terminate.\n     * Default value is 120s.\n     */\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n    /**\n     * @return timeout value for Tesseract\n     * @see #setTimeout(int timeout)\n     */\n    public int getTimeout() {\n        return timeout;\n    }\n    /**\n     * Set output type from ocr process.  Default is \"txt\", but can be \"hocr\".\n     * Default value is {@link OUTPUT_TYPE#TXT}.\n     */\n    public void setOutputType(OUTPUT_TYPE outputType) {\n        this.outputType = outputType;\n    }\n    public void setOutputType(String outputType) {\n        if (outputType == null) {\n            throw new IllegalArgumentException(\"outputType must not be null\");\n        }\n        String lc = outputType.toLowerCase(Locale.US);\n        if (\"txt\".equals(lc)) {\n            setOutputType(OUTPUT_TYPE.TXT);\n        } else if (\"hocr\".equals(lc)) {\n            setOutputType(OUTPUT_TYPE.HOCR);\n        } else {\n            throw new IllegalArgumentException(\"outputType must be either 'txt' or 'hocr'\");\n        }\n    }\n    /**\n     * @see #setOutputType(OUTPUT_TYPE outputType)\n     */\n    public OUTPUT_TYPE getOutputType() {\n        return outputType;\n    }\n    /**\n     * @return image processing is enabled or not\n     * @see #setEnableImageProcessing(int)\n     */\n    public int isEnableImageProcessing() {\n        return enableImageProcessing;\n    }\n    /**\n     * Set the value to true if processing is to be enabled.\n     * Default value is false.\n     */\n    public void setEnableImageProcessing(int enableImageProcessing) {\n        this.enableImageProcessing = enableImageProcessing;\n    }\n    /**\n     * @return the density\n     */\n    public int getDensity() {\n        return density;\n    }\n    /**\n     * @param density the density to set. Valid range of values is 150-1200.\n     *                Default value is 300.\n     */\n    public void setDensity(int density) {\n        if (density < 150 || density > 1200) {\n            throw new IllegalArgumentException(\"Invalid density value. Valid range of values is 150-1200.\");\n        }\n        this.density = density;\n    }\n    /**\n     * @return the depth\n     */\n    public int getDepth() {\n        return depth;\n    }\n    /**\n     * @param depth the depth to set. Valid values are 2, 4, 8, 16, 32, 64, 256, 4096.\n     *              Default value is 4.\n     */\n    public void setDepth(int depth) {\n        int[] allowedValues = {2, 4, 8, 16, 32, 64, 256, 4096};\n        for (int i = 0; i < allowedValues.length; i++) {\n            if (depth == allowedValues[i]) {\n                this.depth = depth;\n                return;\n            }\n        }\n        throw new IllegalArgumentException(\"Invalid depth value. Valid values are 2, 4, 8, 16, 32, 64, 256, 4096.\");\n    }\n    /**\n     * @return the colorspace\n     */\n    public String getColorspace() {\n        return colorspace;\n    }\n    /**\n     * @param colorspace the colorspace to set\n     *                   Deafult value is gray.\n     */\n    public void setColorspace(String colorspace) {\n        if (colorspace == null) {\n            throw new IllegalArgumentException(\"Colorspace value cannot be null.\");\n        }\n        if (! colorspace.matches(\"(?i)^[-_A-Z0-9]+$\")) {\n            throw new IllegalArgumentException(\"colorspace must match this pattern: (?i)^[-_A-Z0-9]+$\");\n        }\n        this.colorspace = colorspace;\n    }\n    /**\n     * @return the filter\n     */\n    public String getFilter() {\n        return filter;\n    }\n    /**\n     * @param filter the filter to set. Valid values are point, hermite, cubic, box, gaussian, catrom, triangle, quadratic and mitchell.\n     *               Default value is triangle.\n     */\n    public void setFilter(String filter) {\n        if (filter.equals(null)) {\n            throw new IllegalArgumentException(\"Filter value cannot be null. Valid values are point, hermite, \"\n                    + \"cubic, box, gaussian, catrom, triangle, quadratic and mitchell.\");\n        }\n        String[] allowedFilters = {\"Point\", \"Hermite\", \"Cubic\", \"Box\", \"Gaussian\", \"Catrom\", \"Triangle\", \"Quadratic\", \"Mitchell\"};\n        for (int i = 0; i < allowedFilters.length; i++) {\n            if (filter.equalsIgnoreCase(allowedFilters[i])) {\n                this.filter = filter;\n                return;\n            }\n        }\n        throw new IllegalArgumentException(\"Invalid filter value. Valid values are point, hermite, \"\n                + \"cubic, box, gaussian, catrom, triangle, quadratic and mitchell.\");\n    }\n    /**\n     * @return the resize\n     */\n    public int getResize() {\n        return resize;\n    }\n    /**\n     * @param resize the resize to set. Valid range of values is 100-900.\n     *               Default value is 900.\n     */\n    public void setResize(int resize) {\n        for (int i = 1; i < 10; i++) {\n            if (resize == i * 100) {\n                this.resize = resize;\n                return;\n            }\n        }\n        throw new IllegalArgumentException(\"Invalid resize value. Valid range of values is 100-900.\");\n    }\n    /**\n     * @return path to ImageMagick executable directory.\n     * @see #setImageMagickPath(String imageMagickPath)\n     */\n<fim_suffix>    public String getImageMagickPath() {\n        return imageMagickPath;\n    }<fim_middle>// function below has no smell\n"}