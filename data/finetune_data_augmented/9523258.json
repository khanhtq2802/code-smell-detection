{"text": "<fim_prefix>    }\n    @Override\n    public CODE<SAMP<T>> code() {\n      closeAttrs();\n      return code_(this, true);\n    }\n    @Override\n    public SAMP<T> code(String cdata) {\n      return code()._(cdata)._();\n    }\n    @Override\n    public SAMP<T> code(String selector, String cdata) {\n      return setSelector(code(), selector)._(cdata)._();\n    }\n    @Override\n    public SAMP<T> samp(String cdata) {\n      return samp()._(cdata)._();\n    }\n    @Override\n    public SAMP<SAMP<T>> samp() {\n      closeAttrs();\n      return samp_(this, true);\n    }\n    @Override\n    public SAMP<T> samp(String selector, String cdata) {\n      return setSelector(samp(), selector)._(cdata)._();\n    }\n    @Override\n    public KBD<SAMP<T>> kbd() {\n      closeAttrs();\n      return kbd_(this, true);\n    }\n    @Override\n    public SAMP<T> kbd(String cdata) {\n      return kbd()._(cdata)._();\n    }\n    @Override\n    public SAMP<T> kbd(String selector, String cdata) {\n      return setSelector(kbd(), selector)._(cdata)._();\n    }\n    @Override\n    public VAR<SAMP<T>> var() {\n      closeAttrs();\n      return var_(this, true);\n    }\n    @Override\n    public SAMP<T> var(String cdata) {\n      return var()._(cdata)._();\n    }\n    @Override\n    public SAMP<T> var(String selector, String cdata) {\n      return setSelector(var(), selector)._(cdata)._();\n    }\n    @Override\n    public CITE<SAMP<T>> cite() {\n      closeAttrs();\n      return cite_(this, true);\n    }\n    @Override\n    public SAMP<T> cite(String cdata) {\n      return cite()._(cdata)._();\n    }\n    @Override\n    public SAMP<T> cite(String selector, String cdata) {\n      return setSelector(cite(), selector)._(cdata)._();\n    }\n    @Override\n    public ABBR<SAMP<T>> abbr() {\n      closeAttrs();\n      return abbr_(this, true);\n    }\n    @Override\n    public SAMP<T> abbr(String cdata) {\n      return abbr()._(cdata)._();\n    }\n    @Override\n    public SAMP<T> abbr(String selector, String cdata) {\n      return setSelector(abbr(), selector)._(cdata)._();\n    }\n    @Override\n    public A<SAMP<T>> a() {\n      closeAttrs();\n      return a_(this, true);\n    }\n    @Override\n    public A<SAMP<T>> a(String selector) {\n      return setSelector(a(), selector);\n    }\n    @Override\n    public SAMP<T> a(String href, String anchorText) {\n      return a().$href(href)._(anchorText)._();\n    }\n    @Override\n    public SAMP<T> a(String selector, String href, String anchorText) {\n      return setSelector(a(), selector).$href(href)._(anchorText)._();\n    }\n    @Override\n    public IMG<SAMP<T>> img() {\n      closeAttrs();\n      return img_(this, true);\n    }\n    @Override\n    public SAMP<T> img(String src) {\n      return img().$src(src)._();\n    }\n    @Override\n    public OBJECT<SAMP<T>> object() {\n      closeAttrs();\n      return object_(this, true);\n    }\n    @Override\n    public OBJECT<SAMP<T>> object(String selector) {\n      return setSelector(object(), selector);\n    }\n    @Override\n    public SUB<SAMP<T>> sub() {\n      closeAttrs();\n      return sub_(this, true);\n    }\n    @Override\n    public SAMP<T> sub(String cdata) {\n      return sub()._(cdata)._();\n    }\n    @Override\n    public SAMP<T> sub(String selector, String cdata) {\n      return setSelector(sub(), selector)._(cdata)._();\n    }\n    @Override\n    public SUP<SAMP<T>> sup() {\n      closeAttrs();\n      return sup_(this, true);\n    }\n    @Override\n    public SAMP<T> sup(String cdata) {\n      return sup()._(cdata)._();\n    }\n    @Override\n    public SAMP<T> sup(String selector, String cdata) {\n      return setSelector(sup(), selector)._(cdata)._();\n    }\n    @Override\n    public MAP<SAMP<T>> map() {\n      closeAttrs();\n      return map_(this, true);\n    }\n    @Override\n    public MAP<SAMP<T>> map(String selector) {\n      return setSelector(map(), selector);\n    }\n    @Override\n    public SAMP<T> q(String cdata) {\n      return q()._(cdata)._();\n    }\n    @Override\n    public SAMP<T> q(String selector, String cdata) {\n      return setSelector(q(), selector)._(cdata)._();\n    }\n    @Override\n    public Q<SAMP<T>> q() {\n      closeAttrs();\n      return q_(this, true);\n    }\n    @Override\n    public BR<SAMP<T>> br() {\n      closeAttrs();\n      return br_(this, true);\n    }\n    @Override\n    public SAMP<T> br(String selector) {\n      return setSelector(br(), selector)._();\n    }\n    @Override\n    public BDO<SAMP<T>> bdo() {\n      closeAttrs();\n      return bdo_(this, true);\n    }\n    @Override\n    public SAMP<T> bdo(Dir dir, String cdata) {\n      return bdo().$dir(dir)._(cdata)._();\n    }\n    @Override\n    public SPAN<SAMP<T>> span() {\n      closeAttrs();\n      return span_(this, true);\n    }\n    @Override\n    public SAMP<T> span(String cdata) {\n      return span()._(cdata)._();\n    }\n    @Override\n    public SAMP<T> span(String selector, String cdata) {\n      return setSelector(span(), selector)._(cdata)._();\n    }\n    @Override\n    public SCRIPT<SAMP<T>> script() {\n      closeAttrs();\n      return script_(this, true);\n    }\n    @Override\n    public SAMP<T> script(String src) {\n      return setScriptSrc(script(), src)._();\n    }\n    @Override\n    public INS<SAMP<T>> ins() {\n      closeAttrs();\n      return ins_(this, true);\n    }\n    @Override\n    public SAMP<T> ins(String cdata) {\n      return ins()._(cdata)._();\n    }\n    @Override\n    public DEL<SAMP<T>> del() {\n      closeAttrs();\n      return del_(this, true);\n    }\n    @Override\n    public SAMP<T> del(String cdata) {\n      return del()._(cdata)._();\n    }\n    @Override\n    public LABEL<SAMP<T>> label() {\n      closeAttrs();\n      return label_(this, true);\n    }\n    @Override\n    public SAMP<T> label(String forId, String cdata) {\n      return label().$for(forId)._(cdata)._();\n    }\n    @Override\n    public INPUT<SAMP<T>> input(String selector) {\n      return setSelector(input(), selector);\n    }\n    @Override\n    public INPUT<SAMP<T>> input() {\n      closeAttrs();\n      return input_(this, true);\n    }\n    @Override\n    public SELECT<SAMP<T>> select() {\n      closeAttrs();\n      return select_(this, true);\n    }\n    @Override\n    public SELECT<SAMP<T>> select(String selector) {\n      return setSelector(select(), selector);\n    }\n    @Override\n    public TEXTAREA<SAMP<T>> textarea(String selector) {\n      return setSelector(textarea(), selector);\n    }\n    @Override\n    public TEXTAREA<SAMP<T>> textarea() {\n      closeAttrs();\n      return textarea_(this, true);\n    }\n    @Override\n    public SAMP<T> textarea(String selector, String cdata) {\n      return setSelector(textarea(), selector)._(cdata)._();\n    }\n    @Override\n    public BUTTON<SAMP<T>> button() {\n      closeAttrs();\n      return button_(this, true);\n    }\n    @Override\n    public BUTTON<SAMP<T>> button(String selector) {\n      return setSelector(button(), selector);\n    }\n    @Override\n    public SAMP<T> button(String selector, String cdata) {\n      return setSelector(button(), selector)._(cdata)._();\n    }\n  }\n  public class CODE<T extends _> extends EImp<T> implements HamletSpec.CODE {\n    public CODE(String name, T parent, EnumSet<EOpt> opts) {\n      super(name, parent, opts);\n    }\n    @Override\n    public CODE<T> $id(String value) {\n      addAttr(\"id\", value);\n      return this;\n    }\n<fim_suffix>    @Override\n    public CODE<T> $class(String value) {\n      addAttr(\"class\", value);\n      return this;\n    }<fim_middle>// function below has no smell\n"}