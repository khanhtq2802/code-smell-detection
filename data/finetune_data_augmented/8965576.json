{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.hive.ql.lib;\n\nimport org.apache.hadoop.hive.ql.parse.SemanticException;\n\n/**\n * Graph walker this class takes list of starting nodes and walks them in pre-order.\n * If a rule fires up against a given node, we do not try to apply the rule\n * on its children.\n */\npublic class PreOrderOnceWalker extends PreOrderWalker {\n\n  public PreOrderOnceWalker(Dispatcher disp) {\n    super(disp);\n  }\n\n  /**\n   * Walk the current operator and its descendants.\n   * \n   * @param nd\n   *          current operator in the graph\n   * @throws SemanticException\n   */\n<fim_suffix>  @Override\n  public void walk(Node nd) throws SemanticException {\n    opStack.push(nd);\n    dispatch(nd, opStack);\n\n    // The rule has been applied, we bail out\n    if (retMap.get(nd) != null) {\n      opStack.pop();\n      return;\n    }\n\n    // move all the children to the front of queue\n    if (nd.getChildren() != null) {\n      for (Node n : nd.getChildren()) {\n        walk(n);\n      }\n    }\n\n    opStack.pop();\n  }\n\n}<fim_middle>// function below has no smell\n"}