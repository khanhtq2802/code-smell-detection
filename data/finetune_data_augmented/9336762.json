{"text": "<fim_prefix>/*\n * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage com.apple.laf;\n\nimport java.awt.*;\nimport java.beans.*;\n\nimport javax.swing.*;\nimport javax.swing.plaf.*;\nimport javax.swing.plaf.basic.BasicMenuItemUI;\n\nimport apple.laf.JRSUIConstants.Size;\n\n// TODO: no screen menu bar for now\npublic class AquaMenuItemUI extends BasicMenuItemUI implements AquaMenuPainter.Client/*, ScreenMenuItemUI*/ {\n    static final int kPlain = 0, kCheckBox = 1, kRadioButton = 2;\n    static final String[] sPropertyPrefixes = { \"MenuItem\", \"CheckBoxMenuItem\", \"RadioButtonMenuItem\" };\n\n    boolean fIsScreenMenuItem = false;\n    boolean fIsIndeterminate = false;\n    int fType;\n\n    AquaMenuItemUI(final int type) {\n        super();\n        fType = type;\n    }\n\n    public static ComponentUI createUI(final JComponent c) {\n        int type = kPlain;\n        if (c instanceof JCheckBoxMenuItem) type = kCheckBox;\n        if (c instanceof JRadioButtonMenuItem) type = kRadioButton;\n        return new AquaMenuItemUI(type);\n    }\n\n    // The only real difference between the three is which property prefix it returns\n    // and therefore which icons!\n    protected String getPropertyPrefix() {\n        return sPropertyPrefixes[fType];\n    }\n\n    @Override\n    protected void installListeners() {\n        super.installListeners();\n        IndeterminateListener.install(menuItem);\n    }\n\n    @Override\n    protected void uninstallListeners() {\n        IndeterminateListener.uninstall(menuItem);\n        super.uninstallListeners();\n    }\n\n    public void updateListenersForScreenMenuItem() {\n        setIsScreenMenu(true);\n    }\n\n    // Users can dynamically change the kind of menu we're on by calling JPopupMenu.setInvoker\n    // so we need to be prepared to put the listeners back on\n    protected void setIsScreenMenu(final boolean isScreenMenuItem) {\n        if (fIsScreenMenuItem != isScreenMenuItem) {\n            fIsScreenMenuItem = isScreenMenuItem;\n            if (fIsScreenMenuItem) removeListeners();\n            else addListeners();\n        }\n    }\n\n    protected void removeListeners() {\n        menuItem.removeMouseListener(mouseInputListener);\n        menuItem.removeMouseMotionListener(mouseInputListener);\n        menuItem.removeMenuDragMouseListener(menuDragMouseListener);\n    }\n\n    protected void addListeners() {\n        menuItem.addMouseListener(mouseInputListener);\n        menuItem.addMouseMotionListener(mouseInputListener);\n        menuItem.addMenuDragMouseListener(menuDragMouseListener);\n    }\n\n    protected void paintMenuItem(final Graphics g, final JComponent c, final Icon localCheckIcon, final Icon localArrowIcon, final Color background, final Color foreground, final int localDefaultTextIconGap) {\n        AquaMenuPainter.instance().paintMenuItem(this, g, c, localCheckIcon, localArrowIcon, background, foreground, disabledForeground, selectionForeground, localDefaultTextIconGap, acceleratorFont);\n    }\n\n    protected Dimension getPreferredMenuItemSize(final JComponent c, final Icon localCheckIcon, final Icon localArrowIcon, final int localDefaultTextIconGap) {\n        return AquaMenuPainter.instance().getPreferredMenuItemSize(c, localCheckIcon, localArrowIcon, localDefaultTextIconGap, acceleratorFont);\n    }\n\n    public void update(final Graphics g, final JComponent c) {\n        if (c.isOpaque()) {\n            // sja fix ((PenGraphics)g).alphaClearRect(0,0,c.getWidth(),c.getHeight());\n            final Color oldColor = g.getColor();\n            g.setColor(c.getBackground());\n            g.fillRect(0, 0, c.getWidth(), c.getHeight());\n            g.setColor(oldColor);\n        }\n\n        paint(g, c);\n    }\n\n    public void paintBackground(final Graphics g, final JComponent c, final int menuWidth, final int menuHeight) {\n        if ((c.getParent() instanceof JMenuBar)) return;\n        final Color oldColor = g.getColor();\n\n        g.setColor(c.getBackground());\n        g.fillRect(0, 0, menuWidth, menuHeight);\n        if (((JMenuItem)c).isBorderPainted()) {\n            if (((JMenuItem)c).getModel().isArmed()) {\n                AquaMenuPainter.instance().paintSelectedMenuItemBackground(g, menuWidth, menuHeight);\n            }\n            //getTheme().drawMenuItem(c, g, 0, 0, menuWidth, menuHeight);\n        } else {\n            // If selected, use black (see AquaLookAndFeel \"Menu.selectionBackground\")\n            if (((JMenuItem)c).getModel().isArmed()) {\n                final Color holdc = g.getColor();\n                g.setColor(Color.black);\n                g.fillRect(0, 0, menuWidth, menuHeight);\n                g.setColor(holdc);\n            } else {\n                g.setColor(Color.green);\n                g.fillRect(0, 0, menuWidth, menuHeight);\n                //super.paintBackground(g,c,menuWidth, menuHeight); //getTheme().drawMenuBackground((Component)c, g, (short)1, 0, 0, menuWidth, menuHeight);\n            }\n        }\n        g.setColor(oldColor);\n    }\n\n<fim_suffix>    protected void doClick(final MenuSelectionManager msm) {\n        final Dimension size = menuItem.getSize();\n        AquaUtils.blinkMenu(new AquaUtils.Selectable() {\n            public void paintSelected(final boolean selected) {\n                menuItem.setArmed(selected);\n                menuItem.paintImmediately(0, 0, size.width, size.height);\n            }\n        });\n        super.doClick(msm);\n    }\n\n    static final IndeterminateListener INDETERMINATE_LISTENER = new IndeterminateListener();\n    static class IndeterminateListener implements PropertyChangeListener {\n        static final String CLIENT_PROPERTY_KEY = \"JMenuItem.selectedState\";\n\n        static void install(final JMenuItem menuItem) {\n            menuItem.addPropertyChangeListener(CLIENT_PROPERTY_KEY, INDETERMINATE_LISTENER);\n            apply(menuItem, menuItem.getClientProperty(CLIENT_PROPERTY_KEY));\n        }\n\n        static void uninstall(final JMenuItem menuItem) {\n            menuItem.removePropertyChangeListener(CLIENT_PROPERTY_KEY, INDETERMINATE_LISTENER);\n        }\n\n        public void propertyChange(final PropertyChangeEvent evt) {\n            final String key = evt.getPropertyName();\n            if (!CLIENT_PROPERTY_KEY.equalsIgnoreCase(key)) return;\n\n            final Object source = evt.getSource();\n            if (!(source instanceof JMenuItem)) return;\n\n            final JMenuItem c = (JMenuItem)source;\n            apply(c, evt.getNewValue());\n        }\n\n        static void apply(final JMenuItem menuItem, final Object value) {\n            final ButtonUI ui = menuItem.getUI();\n            if (!(ui instanceof AquaMenuItemUI)) return;\n\n            final AquaMenuItemUI aquaUI = (AquaMenuItemUI)ui;\n\n            if (aquaUI.fIsIndeterminate = \"indeterminate\".equals(value)) {\n                aquaUI.checkIcon = UIManager.getIcon(aquaUI.getPropertyPrefix() + \".dashIcon\");\n            } else {\n                aquaUI.checkIcon = UIManager.getIcon(aquaUI.getPropertyPrefix() + \".checkIcon\");\n            }\n        }\n\n        public static boolean isIndeterminate(final JMenuItem menuItem) {\n            return \"indeterminate\".equals(menuItem.getClientProperty(CLIENT_PROPERTY_KEY));\n        }\n    }\n}<fim_middle>// function below has no smell\n"}