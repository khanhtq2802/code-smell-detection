{"text": "<fim_prefix>// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See License.txt in the repository root.\n\npackage com.microsoft.tfs.client.eclipse.ui.wizard.teamprojectwizard;\n\nimport java.net.URI;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.eclipse.jface.wizard.IWizardPage;\n\nimport com.microsoft.tfs.client.common.codemarker.CodeMarker;\nimport com.microsoft.tfs.client.common.codemarker.CodeMarkerDispatch;\nimport com.microsoft.tfs.client.common.framework.background.BackgroundTask;\nimport com.microsoft.tfs.client.common.framework.background.IBackgroundTask;\nimport com.microsoft.tfs.client.common.repository.TFSRepository;\nimport com.microsoft.tfs.client.common.server.TFSServer;\nimport com.microsoft.tfs.client.common.ui.TFSCommonUIClientPlugin;\nimport com.microsoft.tfs.client.common.ui.framework.image.ImageHelper;\nimport com.microsoft.tfs.client.common.ui.wizard.connectwizard.ConnectWizard;\nimport com.microsoft.tfs.client.common.ui.wizard.teamprojectwizard.ITeamProjectWizard;\nimport com.microsoft.tfs.client.eclipse.TFSEclipseClientPlugin;\nimport com.microsoft.tfs.client.eclipse.ui.Messages;\nimport com.microsoft.tfs.client.eclipse.ui.TFSEclipseClientUIPlugin;\nimport com.microsoft.tfs.client.eclipse.ui.wizard.connectwizard.EclipseConnectWizard;\nimport com.microsoft.tfs.core.TFSTeamProjectCollection;\nimport com.microsoft.tfs.core.clients.commonstructure.ProjectInfo;\nimport com.microsoft.tfs.core.clients.versioncontrol.SourceControlCapabilityFlags;\nimport com.microsoft.tfs.core.clients.versioncontrol.soapextensions.Workspace;\n\n<fim_suffix>public final class EclipseTeamProjectWizard extends EclipseConnectWizard implements ITeamProjectWizard {\n    public static final CodeMarker CODEMARKER_NOTIFICATION_WIZARD_FINISH =\n        new CodeMarker(\"com.microsoft.tfs.client.eclipse.ui.wizard.teamprojectwizard.EclipseTeamProjectWizard#finsh\"); //$NON-NLS-1$\n\n    private static final Log log = LogFactory.getLog(EclipseTeamProjectWizard.class);\n\n    private final static ImageHelper imageHelper = new ImageHelper(TFSCommonUIClientPlugin.PLUGIN_ID);\n\n    public EclipseTeamProjectWizard() {\n        super(\n            Messages.getString(\"EclipseTeamProjectWizard.WizardTitle\"), //$NON-NLS-1$\n            Messages.getString(\"EclipseTeamProjectWizard.WizardDescription\"), //$NON-NLS-1$\n            imageHelper.getImageDescriptor(\"images/wizard/pageheader.png\"), //$NON-NLS-1$\n            SourceControlCapabilityFlags.GIT_TFS,\n            ConnectWizard.PROJECT_SELECTION);\n\n        addConnectionPages();\n        initConnectionPages();\n\n        if (hasPageData(Workspace.class)) {\n            removePageData(Workspace.class);\n        }\n    }\n\n    @Override\n    public void setServerURI(final URI serverURI) {\n        setPageData(URI.class, serverURI);\n    }\n\n    @Override\n    public boolean enableNext(final IWizardPage currentPage) {\n        if (!enableNextConnectionPage(currentPage)) {\n            return false;\n        }\n\n        /*\n         * Override super's behavior, if the current page is the team project\n         * page, we don't want next to occur (hide the workspace page)\n         */\n        if (getSelectionPageName().equals(currentPage.getName())) {\n            return false;\n        }\n\n        return true;\n    }\n\n    @Override\n    public IWizardPage getNextPage(final IWizardPage page) {\n        final IWizardPage nextConnectionPage = getNextConnectionPage();\n\n        if (nextConnectionPage != null) {\n            return nextConnectionPage;\n        }\n\n        /*\n         * If we got to this point, then we were started from an already\n         * connected state. This means that we only show the team project page.\n         */\n        return getPage(getSelectionPageName());\n    }\n\n    @Override\n    protected boolean enableFinish(final IWizardPage currentPage) {\n        /*\n         * Finish is enabled for the team project page iff we already have a\n         * workspace.\n         */\n        if (getSelectionPageName().equals(currentPage.getName())) {\n            return true;\n        }\n\n        return false;\n    }\n\n    @Override\n    protected boolean doPerformFinish() {\n        /*\n         * Create a dummy server manager connection job for the UI - this will\n         * prevent various views from saying \"Not Connected\" while we're hooking\n         * up the various Plugin TFSServer and TFSRepository data in the\n         * background.\n         */\n        final IBackgroundTask backgroundTask =\n            new BackgroundTask(Messages.getString(\"EclipseTeamProjectWizard.InitializingConnectionMessage\")); //$NON-NLS-1$\n\n        TFSEclipseClientPlugin.getDefault().getServerManager().backgroundConnectionTaskStarted(backgroundTask);\n\n        try {\n            final TFSTeamProjectCollection connection =\n                (TFSTeamProjectCollection) getPageData(TFSTeamProjectCollection.class);\n\n            /* See if there's an existing connection to a different server */\n            final TFSServer existingServer = TFSEclipseClientPlugin.getDefault().getServerManager().getDefaultServer();\n\n            /* See if there's an existing connection to a different workspace */\n            final TFSRepository existingRepository =\n                TFSEclipseClientPlugin.getDefault().getRepositoryManager().getDefaultRepository();\n\n            final Workspace[] workspaces = getCurrentWorkspaces(connection);\n\n            /*\n             * If the user is connecting to a different server, then we prompt\n             * them to close their existing mapped projects for this to\n             * continue.\n             */\n            if ((existingServer != null && !existingServer.connectionsEquivalent(connection))) {\n                if (!TFSEclipseClientUIPlugin.getDefault().getConnectionConflictHandler().resolveServerConflict()) {\n                    CodeMarkerDispatch.dispatch(CODEMARKER_NOTIFICATION_WIZARD_FINISH);\n                    return false;\n                }\n\n                /* Ensure that the conflict was successfully resolved. */\n                if (TFSEclipseClientUIPlugin.getDefault().getServerManager().getDefaultServer() != null) {\n                    TFSEclipseClientUIPlugin.getDefault().getConnectionConflictHandler().notifyServerConflict();\n                    CodeMarkerDispatch.dispatch(CODEMARKER_NOTIFICATION_WIZARD_FINISH);\n                    return false;\n                }\n            }\n\n            /*\n             * If the user is connecting to a different workspace, prompt to\n             * close their existing mapped projects for this to continue.\n             */\n            else if (workspaces != null && existingRepository != null) {\n                boolean containsCurrentWorkspace = false;\n                final Workspace currentWorkspace = existingRepository.getWorkspace();\n                for (final Workspace ws : workspaces) {\n                    if (currentWorkspace.equals(ws)) {\n                        containsCurrentWorkspace = true;\n                    }\n                }\n                if (!containsCurrentWorkspace) {\n                    if (!TFSEclipseClientUIPlugin.getDefault().getConnectionConflictHandler().resolveRepositoryConflict()\n                        || TFSEclipseClientUIPlugin.getDefault().getRepositoryManager().getDefaultRepository() != null) {\n                        TFSEclipseClientUIPlugin.getDefault().getConnectionConflictHandler().notifyRepositoryConflict();\n                        CodeMarkerDispatch.dispatch(CODEMARKER_NOTIFICATION_WIZARD_FINISH);\n                        return false;\n                    }\n                }\n            }\n\n            finishConnection();\n\n            /* get the default workspace */\n            final Workspace workspace = getDefaultWorkspace(connection);\n\n            finishWorkspace(workspace);\n        } finally {\n            TFSEclipseClientPlugin.getDefault().getServerManager().backgroundConnectionTaskFinished(backgroundTask);\n        }\n\n        CodeMarkerDispatch.dispatch(CODEMARKER_NOTIFICATION_WIZARD_FINISH);\n        return true;\n    }\n\n    @Override\n    public TFSServer getServer() {\n        return (TFSServer) getPageData(TFSServer.class);\n    }\n\n    @Override\n    public ProjectInfo[] getSelectedProjects() {\n        return (ProjectInfo[]) getPageData(ConnectWizard.SELECTED_TEAM_PROJECTS);\n    }\n\n}<fim_middle>// class below is blob\n"}