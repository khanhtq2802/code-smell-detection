{"text": "<fim_prefix>    for (int i = 0; i < cnt; i++) {\n      sql.append(\":\" + (i + 1));\n      if (i + 1 < cnt) {\n        sql.append(\", \");\n      }\n    }\n    sql.append(\")'\");\n    if (cnt > 0) {\n      sql.append(\", \");\n    }\n    for (int i = 0; i < cnt; i++) {\n      sql.append(evalPop(ctx.func_param(i).expr()));\n      if (i + 1 < cnt) {\n        sql.append(\", \");\n      }\n    }\n    sql.append(\")\");\n    exec.stackPush(sql);\n    exec.registerUdf();\n    return true;\n  }\n  /**\n   * Execute a stored procedure as the entry point of the script (defined by -main option)\n   */\n  public boolean execProc(String name) {\n    if (trace) {\n      trace(\"EXEC PROCEDURE \" + name);\n    }\n    HplsqlParser.Create_procedure_stmtContext procCtx = procMap.get(name.toUpperCase());    \n    if (procCtx == null) {\n      trace(\"Procedure not found\");\n      return false;\n    }    \n    exec.enterScope(Scope.Type.ROUTINE);\n    exec.callStackPush(name);\n    if (procCtx.create_routine_params() != null) {\n      setCallParameters(procCtx.create_routine_params());\n    }\n    visit(procCtx.proc_block());\n    exec.callStackPop();\n    exec.leaveScope();       \n    return true;\n  }\n  /**\n   * Check if the stored procedure with the specified name is defined\n   */\n  public boolean isProc(String name) {\n    if (procMap.get(name.toUpperCase()) != null) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Execute a stored procedure using CALL or EXEC statement passing parameters\n   */\n  public boolean execProc(String name, HplsqlParser.Expr_func_paramsContext ctx, ParserRuleContext callCtx) {\n    if (trace) {\n      trace(callCtx, \"EXEC PROCEDURE \" + name);\n    }\n    HplsqlParser.Create_procedure_stmtContext procCtx = procMap.get(name.toUpperCase());    \n    if (procCtx == null) {\n      trace(callCtx, \"Procedure not found\");\n      return false;\n    }    \n    ArrayList<Var> actualParams = getActualCallParameters(ctx);\n    HashMap<String, Var> out = new HashMap<String, Var>();\n    exec.enterScope(Scope.Type.ROUTINE);\n    exec.callStackPush(name);\n    if (procCtx.declare_block_inplace() != null) {\n      visit(procCtx.declare_block_inplace());\n    }\n    if (procCtx.create_routine_params() != null) {\n      setCallParameters(ctx, actualParams, procCtx.create_routine_params(), out);\n    }\n    visit(procCtx.proc_block());\n    exec.callStackPop();\n    exec.leaveScope();       \n    for (Map.Entry<String, Var> i : out.entrySet()) {      // Set OUT parameters\n      exec.setVariable(i.getKey(), i.getValue());\n    }\n    return true;\n  }\n  /**\n   * Set parameters for user-defined function call\n   */\n  public void setCallParameters(HplsqlParser.Expr_func_paramsContext actual, ArrayList<Var> actualValues, \n                         HplsqlParser.Create_routine_paramsContext formal,\n                         HashMap<String, Var> out) {\n    if (actual == null || actual.func_param() == null || actualValues == null) {\n      return;\n    }\n    int actualCnt = actualValues.size();\n    int formalCnt = formal.create_routine_param_item().size();\n    for (int i = 0; i < actualCnt; i++) {\n      if (i >= formalCnt) {\n        break;\n      }\n      HplsqlParser.ExprContext a = actual.func_param(i).expr(); \n      HplsqlParser.Create_routine_param_itemContext p = getCallParameter(actual, formal, i);\n      String name = p.ident().getText();\n      String type = p.dtype().getText();\n      String len = null;\n      String scale = null;   \n      if (p.dtype_len() != null) {\n        len = p.dtype_len().L_INT(0).getText();\n        if (p.dtype_len().L_INT(1) != null) {\n          scale = p.dtype_len().L_INT(1).getText();\n        }\n      }\n      Var var = setCallParameter(name, type, len, scale, actualValues.get(i));\n      if (trace) {\n        trace(actual, \"SET PARAM \" + name + \" = \" + var.toString());      \n      } \n      if (out != null && a.expr_atom() != null && a.expr_atom().ident() != null &&\n          (p.T_OUT() != null || p.T_INOUT() != null)) {\n        String actualName = a.expr_atom().ident().getText();\n        if (actualName != null) {\n          out.put(actualName, var);  \n        }         \n      }\n    }\n  }\n  /**\n   * Set parameters for entry-point call (Main procedure defined by -main option)\n   */\n  void setCallParameters(HplsqlParser.Create_routine_paramsContext ctx) {\n    int cnt = ctx.create_routine_param_item().size();\n    for (int i = 0; i < cnt; i++) {\n      HplsqlParser.Create_routine_param_itemContext p = ctx.create_routine_param_item(i);\n      String name = p.ident().getText();\n      String type = p.dtype().getText();\n      String len = null;\n      String scale = null;   \n      if (p.dtype_len() != null) {\n        len = p.dtype_len().L_INT(0).getText();\n        if (p.dtype_len().L_INT(1) != null) {\n          scale = p.dtype_len().L_INT(1).getText();\n        }\n      }\n      Var value = exec.findVariable(name);\n      Var var = setCallParameter(name, type, len, scale, value);\n      if (trace) {\n        trace(ctx, \"SET PARAM \" + name + \" = \" + var.toString());      \n      }      \n    }\n  }\n  /**\n   * Create a function or procedure parameter and set its value\n   */\n  Var setCallParameter(String name, String type, String len, String scale, Var value) {\n    Var var = new Var(name, type, len, scale, null);\n    var.cast(value);\n    exec.addVariable(var);    \n    return var;\n  }\n  /**\n   * Get call parameter definition by name (if specified) or position\n   */\n  HplsqlParser.Create_routine_param_itemContext getCallParameter(HplsqlParser.Expr_func_paramsContext actual, \n      HplsqlParser.Create_routine_paramsContext formal, int pos) {\n    String named = null;\n    int out_pos = pos;\n    if (actual.func_param(pos).ident() != null) {\n      named = actual.func_param(pos).ident().getText(); \n      int cnt = formal.create_routine_param_item().size();\n      for (int i = 0; i < cnt; i++) {\n        if (named.equalsIgnoreCase(formal.create_routine_param_item(i).ident().getText())) {\n          out_pos = i;\n          break;\n        }\n      }\n    }\n    return formal.create_routine_param_item(out_pos);\n  }  \n  /**\n   * Evaluate actual call parameters\n   */\n  public ArrayList<Var> getActualCallParameters(HplsqlParser.Expr_func_paramsContext actual) {\n    if (actual == null || actual.func_param() == null) {\n      return null;\n    }\n    int cnt = actual.func_param().size();\n    ArrayList<Var> values = new ArrayList<Var>(cnt);\n    for (int i = 0; i < cnt; i++) {\n      values.add(evalPop(actual.func_param(i).expr()));\n    }\n    return values;\n  }\n  /**\n   * Add a user-defined function\n   */\n  public void addUserFunction(HplsqlParser.Create_function_stmtContext ctx) {\n    String name = ctx.ident().getText();\n    if (trace) {\n      trace(ctx, \"CREATE FUNCTION \" + name);\n    }\n    userMap.put(name.toUpperCase(), ctx);\n  }\n  /**\n   * Add a user-defined procedure\n   */\n  public void addUserProcedure(HplsqlParser.Create_procedure_stmtContext ctx) {\n    String name = ctx.ident(0).getText();\n    if (trace) {\n      trace(ctx, \"CREATE PROCEDURE \" + name);\n    }\n    procMap.put(name.toUpperCase(), ctx);\n  }\n  /**\n   * Get the number of parameters in function call\n   */\n<fim_suffix>  public int getParamCount(HplsqlParser.Expr_func_paramsContext ctx) {\n    if (ctx == null) {\n      return 0;\n    }\n    return ctx.func_param().size();\n  }<fim_middle>// function below has no smell\n"}