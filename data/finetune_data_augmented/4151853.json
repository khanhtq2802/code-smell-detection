{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.calcite.avatica;\n\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.sql.NClob;\nimport java.sql.ResultSetMetaData;\nimport java.sql.RowId;\nimport java.sql.SQLException;\nimport java.sql.SQLXML;\nimport java.util.Properties;\nimport java.util.TimeZone;\n\n/**\n * Implementation of {@link AvaticaFactory} for JDBC 4.1 (corresponds to JDK\n * 1.7).\n */\n@SuppressWarnings(\"UnusedDeclaration\")\nclass AvaticaJdbc41Factory implements AvaticaFactory {\n  private final int major;\n  private final int minor;\n\n  /** Creates a JDBC factory. */\n  // CHECKSTYLE: stop RedundantModifierCheck\n  public AvaticaJdbc41Factory() {\n    this(4, 1);\n  }\n  // CHECKSTYLE: resume RedundantModifierCheck\n\n\n  /** Creates a JDBC factory with given major/minor version number. */\n  protected AvaticaJdbc41Factory(int major, int minor) {\n    this.major = major;\n    this.minor = minor;\n  }\n\n  public int getJdbcMajorVersion() {\n    return major;\n  }\n\n  public int getJdbcMinorVersion() {\n    return minor;\n  }\n\n  public AvaticaConnection newConnection(\n      UnregisteredDriver driver,\n      AvaticaFactory factory,\n      String url,\n      Properties info) {\n    return new AvaticaJdbc41Connection(driver, factory, url, info);\n  }\n\n  public AvaticaSpecificDatabaseMetaData newDatabaseMetaData(\n      AvaticaConnection connection) {\n    return new AvaticaJdbc41DatabaseMetaData(connection);\n  }\n\n<fim_suffix>  public AvaticaStatement newStatement(AvaticaConnection connection,\n      Meta.StatementHandle h, int resultSetType, int resultSetConcurrency,\n      int resultSetHoldability) {\n    return new AvaticaJdbc41Statement(connection, h, resultSetType,\n        resultSetConcurrency, resultSetHoldability);\n  }\n\n  public AvaticaPreparedStatement newPreparedStatement(\n      AvaticaConnection connection, Meta.StatementHandle h,\n      Meta.Signature signature, int resultSetType, int resultSetConcurrency,\n      int resultSetHoldability)\n      throws SQLException {\n    return new AvaticaJdbc41PreparedStatement(connection, h, signature,\n        resultSetType, resultSetConcurrency, resultSetHoldability);\n  }\n\n  public AvaticaResultSet newResultSet(AvaticaStatement statement,\n      QueryState state, Meta.Signature signature, TimeZone timeZone, Meta.Frame firstFrame)\n      throws SQLException {\n    final ResultSetMetaData metaData =\n        newResultSetMetaData(statement, signature);\n    return new AvaticaResultSet(statement, state, signature, metaData, timeZone,\n        firstFrame);\n  }\n\n  public AvaticaResultSetMetaData newResultSetMetaData(\n      AvaticaStatement statement, Meta.Signature signature) {\n    return new AvaticaResultSetMetaData(statement, null, signature);\n  }\n\n  /** Implementation of Connection for JDBC 4.1. */\n  private static class AvaticaJdbc41Connection extends AvaticaConnection {\n    AvaticaJdbc41Connection(UnregisteredDriver driver,\n        AvaticaFactory factory,\n        String url,\n        Properties info) {\n      super(driver, factory, url, info);\n    }\n  }\n\n  /** Implementation of Statement for JDBC 4.1. */\n  private static class AvaticaJdbc41Statement extends AvaticaStatement {\n    private AvaticaJdbc41Statement(AvaticaConnection connection,\n        Meta.StatementHandle h, int resultSetType, int resultSetConcurrency,\n        int resultSetHoldability) {\n      super(connection, h, resultSetType, resultSetConcurrency,\n          resultSetHoldability);\n    }\n  }\n\n  /** Implementation of PreparedStatement for JDBC 4.1. */\n  private static class AvaticaJdbc41PreparedStatement\n      extends AvaticaPreparedStatement {\n    AvaticaJdbc41PreparedStatement(AvaticaConnection connection,\n        Meta.StatementHandle h, Meta.Signature signature, int resultSetType,\n        int resultSetConcurrency, int resultSetHoldability)\n        throws SQLException {\n      super(connection, h, signature, resultSetType, resultSetConcurrency,\n          resultSetHoldability);\n    }\n\n    public void setRowId(\n        int parameterIndex,\n        RowId x) throws SQLException {\n      getSite(parameterIndex).setRowId(x);\n    }\n\n    public void setNString(\n        int parameterIndex, String value) throws SQLException {\n      getSite(parameterIndex).setNString(value);\n    }\n\n    public void setNCharacterStream(\n        int parameterIndex,\n        Reader value,\n        long length) throws SQLException {\n      getSite(parameterIndex)\n          .setNCharacterStream(value, length);\n    }\n\n    public void setNClob(\n        int parameterIndex,\n        NClob value) throws SQLException {\n      getSite(parameterIndex).setNClob(value);\n    }\n\n    public void setClob(\n        int parameterIndex,\n        Reader reader,\n        long length) throws SQLException {\n      getSite(parameterIndex)\n          .setClob(reader, length);\n    }\n\n    public void setBlob(\n        int parameterIndex,\n        InputStream inputStream,\n        long length) throws SQLException {\n      getSite(parameterIndex)\n          .setBlob(inputStream, length);\n    }\n\n    public void setNClob(\n        int parameterIndex,\n        Reader reader,\n        long length) throws SQLException {\n      getSite(parameterIndex)\n          .setNClob(reader, length);\n    }\n\n    public void setSQLXML(\n        int parameterIndex, SQLXML xmlObject) throws SQLException {\n      getSite(parameterIndex).setSQLXML(xmlObject);\n    }\n\n    public void setAsciiStream(\n        int parameterIndex,\n        InputStream x,\n        long length) throws SQLException {\n      getSite(parameterIndex)\n          .setAsciiStream(x, length);\n    }\n\n    public void setBinaryStream(\n        int parameterIndex,\n        InputStream x,\n        long length) throws SQLException {\n      getSite(parameterIndex)\n          .setBinaryStream(x, length);\n    }\n\n    public void setCharacterStream(\n        int parameterIndex,\n        Reader reader,\n        long length) throws SQLException {\n      getSite(parameterIndex)\n          .setCharacterStream(reader, length);\n    }\n\n    public void setAsciiStream(\n        int parameterIndex, InputStream x) throws SQLException {\n      getSite(parameterIndex).setAsciiStream(x);\n    }\n\n    public void setBinaryStream(\n        int parameterIndex, InputStream x) throws SQLException {\n      getSite(parameterIndex).setBinaryStream(x);\n    }\n\n    public void setCharacterStream(\n        int parameterIndex, Reader reader) throws SQLException {\n      getSite(parameterIndex)\n          .setCharacterStream(reader);\n    }\n\n    public void setNCharacterStream(\n        int parameterIndex, Reader value) throws SQLException {\n      getSite(parameterIndex)\n          .setNCharacterStream(value);\n    }\n\n    public void setClob(\n        int parameterIndex,\n        Reader reader) throws SQLException {\n      getSite(parameterIndex).setClob(reader);\n    }\n\n    public void setBlob(\n        int parameterIndex, InputStream inputStream) throws SQLException {\n      getSite(parameterIndex).setBlob(inputStream);\n    }\n\n    public void setNClob(\n        int parameterIndex, Reader reader) throws SQLException {\n      getSite(parameterIndex).setNClob(reader);\n    }\n  }\n\n  /** Implementation of DatabaseMetaData for JDBC 4.1. */\n  private static class AvaticaJdbc41DatabaseMetaData\n      extends AvaticaDatabaseMetaData {\n    AvaticaJdbc41DatabaseMetaData(AvaticaConnection connection) {\n      super(connection);\n    }\n  }\n}\n\n// End AvaticaJdbc41Factory.java<fim_middle>// function below has no smell\n"}