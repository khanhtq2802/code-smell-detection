{"text": "<fim_prefix>/*\n * Copyright (c) 2002, 2014, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage sun.swing.plaf.synth;\nimport javax.swing.plaf.synth.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.beans.*;\nimport java.io.File;\nimport java.util.regex.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport javax.swing.event.*;\nimport javax.swing.filechooser.*;\nimport javax.swing.plaf.*;\nimport javax.swing.plaf.basic.BasicFileChooserUI;\n/**\n * Synth FileChooserUI.\n *\n * Note: This class is abstract. It does not actually create the file chooser GUI.\n * <p>\n * Note that the classes in the com.sun.java.swing.plaf.synth\n * package are not\n * part of the core Java APIs. They are a part of Sun's JDK and JRE\n * distributions. Although other licensees may choose to distribute\n * these classes, developers cannot depend on their availability in\n * non-Sun implementations. Additionally this API may change in\n * incompatible ways between releases. While this class is public, it\n * shoud be considered an implementation detail, and subject to change.\n *\n * @author Leif Samuelsson\n * @author Jeff Dinkins\n */\npublic abstract class SynthFileChooserUI extends BasicFileChooserUI implements\n                           SynthUI {\n    private JButton approveButton, cancelButton;\n    private SynthStyle style;\n    // Some generic FileChooser functions\n    private Action fileNameCompletionAction = new FileNameCompletionAction();\n    private FileFilter actualFileFilter = null;\n    private GlobFilter globFilter = null;\n    public static ComponentUI createUI(JComponent c) {\n        return new SynthFileChooserUIImpl((JFileChooser)c);\n    }\n    public SynthFileChooserUI(JFileChooser b) {\n        super(b);\n    }\n    public SynthContext getContext(JComponent c) {\n        return new SynthContext(c, Region.FILE_CHOOSER, style,\n                                getComponentState(c));\n    }\n    protected SynthContext getContext(JComponent c, int state) {\n        Region region = SynthLookAndFeel.getRegion(c);\n        return new SynthContext(c, Region.FILE_CHOOSER, style, state);\n    }\n    private Region getRegion(JComponent c) {\n        return SynthLookAndFeel.getRegion(c);\n    }\n    private int getComponentState(JComponent c) {\n        if (c.isEnabled()) {\n            if (c.isFocusOwner()) {\n                return ENABLED | FOCUSED;\n            }\n            return ENABLED;\n        }\n        return DISABLED;\n    }\n    private void updateStyle(JComponent c) {\n        SynthStyle newStyle = SynthLookAndFeel.getStyleFactory().getStyle(c,\n                                               Region.FILE_CHOOSER);\n        if (newStyle != style) {\n            if (style != null) {\n                style.uninstallDefaults(getContext(c, ENABLED));\n            }\n            style = newStyle;\n            SynthContext context = getContext(c, ENABLED);\n            style.installDefaults(context);\n            Border border = c.getBorder();\n            if (border == null || border instanceof UIResource) {\n                c.setBorder(new UIBorder(style.getInsets(context, null)));\n            }\n            directoryIcon = style.getIcon(context, \"FileView.directoryIcon\");\n            fileIcon = style.getIcon(context, \"FileView.fileIcon\");\n            computerIcon = style.getIcon(context, \"FileView.computerIcon\");\n            hardDriveIcon = style.getIcon(context, \"FileView.hardDriveIcon\");\n            floppyDriveIcon = style.getIcon(context, \"FileView.floppyDriveIcon\");\n            newFolderIcon    = style.getIcon(context, \"FileChooser.newFolderIcon\");\n            upFolderIcon     = style.getIcon(context, \"FileChooser.upFolderIcon\");\n            homeFolderIcon   = style.getIcon(context, \"FileChooser.homeFolderIcon\");\n            detailsViewIcon  = style.getIcon(context, \"FileChooser.detailsViewIcon\");\n            listViewIcon     = style.getIcon(context, \"FileChooser.listViewIcon\");\n        }\n    }\n    public void installUI(JComponent c) {\n        super.installUI(c);\n        SwingUtilities.replaceUIActionMap(c, createActionMap());\n    }\n    public void installComponents(JFileChooser fc) {\n        SynthContext context = getContext(fc, ENABLED);\n        cancelButton = new JButton(cancelButtonText);\n        cancelButton.setName(\"SynthFileChooser.cancelButton\");\n        cancelButton.setIcon(context.getStyle().getIcon(context, \"FileChooser.cancelIcon\"));\n        cancelButton.setMnemonic(cancelButtonMnemonic);\n        cancelButton.setToolTipText(cancelButtonToolTipText);\n        cancelButton.addActionListener(getCancelSelectionAction());\n        approveButton = new JButton(getApproveButtonText(fc));\n        approveButton.setName(\"SynthFileChooser.approveButton\");\n        approveButton.setIcon(context.getStyle().getIcon(context, \"FileChooser.okIcon\"));\n        approveButton.setMnemonic(getApproveButtonMnemonic(fc));\n        approveButton.setToolTipText(getApproveButtonToolTipText(fc));\n        approveButton.addActionListener(getApproveSelectionAction());\n    }\n    public void uninstallComponents(JFileChooser fc) {\n        fc.removeAll();\n    }\n    protected void installListeners(JFileChooser fc) {\n        super.installListeners(fc);\n        getModel().addListDataListener(new ListDataListener() {\n            public void contentsChanged(ListDataEvent e) {\n                // Update the selection after JList has been updated\n                new DelayedSelectionUpdater();\n            }\n            public void intervalAdded(ListDataEvent e) {\n                new DelayedSelectionUpdater();\n            }\n            public void intervalRemoved(ListDataEvent e) {\n            }\n        });\n    }\n<fim_suffix>    private class DelayedSelectionUpdater implements Runnable {\n        DelayedSelectionUpdater() {\n            SwingUtilities.invokeLater(this);\n        }\n        public void run() {\n            updateFileNameCompletion();\n        }\n    }\n    protected abstract ActionMap createActionMap();\n    protected void installDefaults(JFileChooser fc) {\n        super.installDefaults(fc);\n        updateStyle(fc);\n    }\n    protected void uninstallDefaults(JFileChooser fc) {\n        super.uninstallDefaults(fc);\n        SynthContext context = getContext(getFileChooser(), ENABLED);\n        style.uninstallDefaults(context);\n        style = null;\n    }\n    protected void installIcons(JFileChooser fc) {\n        // The icons are installed in updateStyle, not here\n    }\n    public void update(Graphics g, JComponent c) {\n        SynthContext context = getContext(c);\n        if (c.isOpaque()) {\n            g.setColor(style.getColor(context, ColorType.BACKGROUND));\n            g.fillRect(0, 0, c.getWidth(), c.getHeight());\n        }\n        style.getPainter(context).paintFileChooserBackground(context,\n                                    g, 0, 0, c.getWidth(), c.getHeight());\n        paint(context, g);\n    }\n    public void paintBorder(SynthContext context, Graphics g, int x, int y, int w, int h) {\n    }\n    public void paint(Graphics g, JComponent c) {\n        SynthContext context = getContext(c);\n        paint(context, g);\n    }\n    protected void paint(SynthContext context, Graphics g) {\n    }\n    public abstract void setFileName(String fileName);\n    public abstract String getFileName();\n    protected void doSelectedFileChanged(PropertyChangeEvent e) {\n    }\n    protected void doSelectedFilesChanged(PropertyChangeEvent e) {\n    }\n    protected void doDirectoryChanged(PropertyChangeEvent e) {\n    }\n    protected void doAccessoryChanged(PropertyChangeEvent e) {\n    }\n    protected void doFileSelectionModeChanged(PropertyChangeEvent e) {\n    }\n    protected void doMultiSelectionChanged(PropertyChangeEvent e) {<fim_middle>// class below has no smell\n"}