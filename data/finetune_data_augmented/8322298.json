{"text": "<fim_prefix>\t}\n\t// options...\n\tpublic void setLintMode(String lintMode) {\n\t\tString lintValue = null;\n\t\tthis.lintMode = lintMode;\n\t\tif (AJLINT_IGNORE.equals(lintMode)) {\n\t\t\tlintValue = AjCompilerOptions.IGNORE;\n\t\t} else if (AJLINT_WARN.equals(lintMode)) {\n\t\t\tlintValue = AjCompilerOptions.WARNING;\n\t\t} else if (AJLINT_ERROR.equals(lintMode)) {\n\t\t\tlintValue = AjCompilerOptions.ERROR;\n\t\t} else {\n\t\t\t// Possibly a name=value comma separated list of configurations\n\t\t\tif (lintMode.indexOf(\"=\")!=-1) {\n\t\t\t\tthis.lintMode = AJLINT_DEFAULT;\n\t\t\t\tlintOptionsMap = new HashMap<String,String>();\n\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(lintMode,\",\");\n\t\t\t\twhile (tokenizer.hasMoreElements()) {\n\t\t\t\t\tString option = tokenizer.nextToken();\n\t\t\t\t\tint equals = option.indexOf(\"=\");\n\t\t\t\t\tif (equals!=-1) {\n\t\t\t\t\t\tString key = option.substring(0,equals);\n\t\t\t\t\t\tString value = option.substring(equals+1);\n\t\t\t\t\t\tlintOptionsMap.put(key,value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (lintValue != null || lintOptionsMap != null ) {\n\t\t\tMap<String, String> lintOptions = new HashMap<String, String>();\n\t\t\tsetOption(AjCompilerOptions.OPTION_ReportInvalidAbsoluteTypeName, lintValue, lintOptions);\n\t\t\tsetOption(AjCompilerOptions.OPTION_ReportInvalidWildcardTypeName, lintValue, lintOptions);\n\t\t\tsetOption(AjCompilerOptions.OPTION_ReportUnresolvableMember, lintValue, lintOptions);\n\t\t\tsetOption(AjCompilerOptions.OPTION_ReportTypeNotExposedToWeaver, lintValue, lintOptions);\n\t\t\tsetOption(AjCompilerOptions.OPTION_ReportShadowNotInStructure, lintValue, lintOptions);\n\t\t\tsetOption(AjCompilerOptions.OPTION_ReportUnmatchedSuperTypeInCall, lintValue, lintOptions);\n\t\t\tsetOption(AjCompilerOptions.OPTION_ReportCannotImplementLazyTJP, lintValue, lintOptions);\n\t\t\tsetOption(AjCompilerOptions.OPTION_ReportNeedSerialVersionUIDField, lintValue, lintOptions);\n\t\t\tsetOption(AjCompilerOptions.OPTION_ReportIncompatibleSerialVersion, lintValue, lintOptions);\n\t\t\toptions.set(lintOptions);\n\t\t}\n\t}\n\tprivate void setOption(String optionKey, String lintValue, Map<String,String> lintOptionsAccumulator) {\n\t\tif (lintOptionsMap!=null && lintOptionsMap.containsKey(optionKey)) {\n\t\t\tString v = lintOptionsMap.get(lintOptionsMap);\n\t\t\tif (AJLINT_IGNORE.equals(v)) {\n\t\t\t\tlintValue = AjCompilerOptions.IGNORE;\n\t\t\t} else if (AJLINT_WARN.equals(v)) {\n\t\t\t\tlintValue = AjCompilerOptions.WARNING;\n\t\t\t} else if (AJLINT_ERROR.equals(v)) {\n\t\t\t\tlintValue = AjCompilerOptions.ERROR;\n\t\t\t}\n\t\t}\n\t\tif (lintValue != null) {\n\t\t\tlintOptionsAccumulator.put(optionKey,lintValue);\n\t\t}\n\t}\n\tpublic boolean isTerminateAfterCompilation() {\n\t\treturn options.terminateAfterCompilation;\n\t}\n\tpublic void setTerminateAfterCompilation(boolean b) {\n\t\toptions.terminateAfterCompilation = b;\n\t}\n\tpublic boolean isXserializableAspects() {\n\t\treturn options.xSerializableAspects;\n\t}\n\tpublic void setXserializableAspects(boolean xserializableAspects) {\n\t\toptions.xSerializableAspects = xserializableAspects;\n\t}\n\tpublic void setXJoinpoints(String jps) {\n\t\toptions.xOptionalJoinpoints = jps;\n\t}\n\tpublic String getXJoinpoints() {\n\t\treturn options.xOptionalJoinpoints;\n\t}\n\tpublic boolean isXnoInline() {\n\t\treturn options.xNoInline;\n\t}\n\tpublic void setXnoInline(boolean xnoInline) {\n\t\toptions.xNoInline = xnoInline;\n\t}\n\tpublic boolean isXlazyTjp() {\n\t\treturn options.xLazyThisJoinPoint;\n\t}\n\tpublic void setXlazyTjp(boolean b) {\n\t\toptions.xLazyThisJoinPoint = b;\n\t}\n\tpublic void setXnotReweavable(boolean b) {\n\t\toptions.xNotReweavable = b;\n\t}\n\tpublic void setXconfigurationInfo(String info) {\n\t\toptions.xConfigurationInfo = info;\n\t}\n\tpublic String getXconfigurationInfo() {\n\t\treturn options.xConfigurationInfo;\n\t}\n\tpublic void setXHasMemberSupport(boolean enabled) {\n\t\toptions.xHasMember = enabled;\n\t}\n\tpublic boolean isXHasMemberEnabled() {\n\t\treturn options.xHasMember;\n\t}\n\tpublic void setXdevPinpointMode(boolean enabled) {\n\t\toptions.xdevPinpoint = enabled;\n\t}\n\tpublic boolean isXdevPinpoint() {\n\t\treturn options.xdevPinpoint;\n\t}\n\tpublic void setAddSerialVerUID(boolean b) {\n\t\toptions.addSerialVerUID = b;\n\t}\n\tpublic boolean isAddSerialVerUID() {\n\t\treturn options.addSerialVerUID;\n\t}\n\tpublic void setXmlConfigured(boolean b) {\n\t\toptions.xmlConfigured = b;\n\t}\n\tpublic void setMakeReflectable(boolean b) {\n\t\toptions.makeReflectable = b;\n\t}\n\tpublic boolean isXmlConfigured() {\n\t\treturn options.xmlConfigured;\n\t}\n\tpublic boolean isMakeReflectable() {\n\t\treturn options.makeReflectable;\n\t}\n\tpublic boolean isXNotReweavable() {\n\t\treturn options.xNotReweavable;\n\t}\n\tpublic boolean isGenerateJavadocsInModelMode() {\n\t\treturn options.generateJavaDocsInModel;\n\t}\n\tpublic void setGenerateJavadocsInModelMode(boolean generateJavadocsInModelMode) {\n\t\toptions.generateJavaDocsInModel = generateJavadocsInModelMode;\n\t}\n\tpublic boolean isGenerateCrossRefsMode() {\n\t\treturn options.generateCrossRefs;\n\t}\n\tpublic void setGenerateCrossRefsMode(boolean on) {\n\t\toptions.generateCrossRefs = on;\n\t}\n\tpublic boolean isCheckRuntimeVersion() {\n\t\treturn options.checkRuntimeVersion;\n\t}\n\tpublic void setCheckRuntimeVersion(boolean on) {\n\t\toptions.checkRuntimeVersion = on;\n\t}\n\tpublic boolean isEmacsSymMode() {\n\t\treturn options.generateEmacsSymFiles;\n\t}\n\tpublic void setEmacsSymMode(boolean emacsSymMode) {\n\t\toptions.generateEmacsSymFiles = emacsSymMode;\n\t}\n\tpublic boolean isGenerateModelMode() {\n\t\treturn options.generateModel;\n\t}\n\tpublic void setGenerateModelMode(boolean structureModelMode) {\n\t\toptions.generateModel = structureModelMode;\n\t}\n\tpublic boolean isNoAtAspectJAnnotationProcessing() {\n\t\treturn options.noAtAspectJProcessing;\n\t}\n\tpublic void setNoAtAspectJAnnotationProcessing(boolean noProcess) {\n\t\toptions.noAtAspectJProcessing = noProcess;\n\t}\n\tpublic void setShowWeavingInformation(boolean b) {\n\t\toptions.showWeavingInformation = true;\n\t}\n\tpublic boolean getShowWeavingInformation() {\n\t\treturn options.showWeavingInformation;\n\t}\n<fim_suffix>\tpublic void setProceedOnError(boolean b) {\n\t\toptions.proceedOnError = b;\n\t}<fim_middle>// function below has no smell\n"}