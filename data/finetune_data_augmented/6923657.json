{"text": "<fim_prefix>/*\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.googlejavaformat.intellij;\n\nimport com.google.googlejavaformat.java.JavaFormatterOptions;\nimport com.intellij.openapi.components.PersistentStateComponent;\nimport com.intellij.openapi.components.ServiceManager;\nimport com.intellij.openapi.components.State;\nimport com.intellij.openapi.components.Storage;\nimport com.intellij.openapi.project.Project;\nimport javax.annotation.Nullable;\n\n@State(\n    name = \"GoogleJavaFormatSettings\",\n    storages = {@Storage(\"google-java-format.xml\")})\nclass GoogleJavaFormatSettings implements PersistentStateComponent<GoogleJavaFormatSettings.State> {\n\n  private State state = new State();\n\n  static GoogleJavaFormatSettings getInstance(Project project) {\n    return ServiceManager.getService(project, GoogleJavaFormatSettings.class);\n  }\n\n  @Nullable\n  @Override\n  public State getState() {\n    return state;\n  }\n\n  @Override\n  public void loadState(State state) {\n    this.state = state;\n  }\n\n  boolean isEnabled() {\n    return state.enabled.equals(EnabledState.ENABLED);\n  }\n\n  void setEnabled(boolean enabled) {\n    setEnabled(enabled ? EnabledState.ENABLED : EnabledState.DISABLED);\n  }\n\n  void setEnabled(EnabledState enabled) {\n    state.enabled = enabled;\n  }\n\n  boolean isUninitialized() {\n    return state.enabled.equals(EnabledState.UNKNOWN);\n  }\n\n  JavaFormatterOptions.Style getStyle() {\n    return state.style;\n  }\n\n  void setStyle(JavaFormatterOptions.Style style) {\n    state.style = style;\n  }\n\n  enum EnabledState {\n    UNKNOWN,\n    ENABLED,\n    DISABLED;\n  }\n\n<fim_suffix>  static class State {\n\n    private EnabledState enabled = EnabledState.UNKNOWN;\n    public JavaFormatterOptions.Style style = JavaFormatterOptions.Style.GOOGLE;\n\n    // enabled used to be a boolean so we use bean property methods for backwards compatibility\n    public void setEnabled(@Nullable String enabledStr) {\n      if (enabledStr == null) {\n        enabled = EnabledState.UNKNOWN;\n      } else if (Boolean.valueOf(enabledStr)) {\n        enabled = EnabledState.ENABLED;\n      } else {\n        enabled = EnabledState.DISABLED;\n      }\n    }\n\n    public String getEnabled() {\n      switch (enabled) {\n        case ENABLED:\n          return \"true\";\n        case DISABLED:\n          return \"false\";\n        default:\n          return null;\n      }\n    }\n  }\n}<fim_middle>// class below is data class\n"}