{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.syncope.core.provisioning.java.data;\n\nimport java.util.Iterator;\nimport java.util.stream.Collectors;\nimport org.apache.syncope.common.lib.SyncopeClientException;\nimport org.apache.syncope.common.lib.to.ApplicationTO;\nimport org.apache.syncope.common.lib.to.PrivilegeTO;\nimport org.apache.syncope.common.lib.types.ClientExceptionType;\nimport org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\nimport org.apache.syncope.core.persistence.api.entity.Application;\nimport org.apache.syncope.core.persistence.api.entity.EntityFactory;\nimport org.apache.syncope.core.persistence.api.entity.Privilege;\nimport org.apache.syncope.core.provisioning.api.data.ApplicationDataBinder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ApplicationDataBinderImpl implements ApplicationDataBinder {\n\n    private static final Logger LOG = LoggerFactory.getLogger(ApplicationDataBinder.class);\n\n    @Autowired\n    private ApplicationDAO applicationDAO;\n\n    @Autowired\n    private EntityFactory entityFactory;\n\n    @Override\n    public Application create(final ApplicationTO applicationTO) {\n        return update(entityFactory.newEntity(Application.class), applicationTO);\n    }\n\n    @Override\n    public Application update(final Application toBeUpdated, final ApplicationTO applicationTO) {\n        toBeUpdated.setKey(applicationTO.getKey());\n        Application application = applicationDAO.save(toBeUpdated);\n\n        application.setDescription(applicationTO.getDescription());\n\n        // 1. add or update all (valid) privileges from TO\n        applicationTO.getPrivileges().forEach(privilegeTO -> {\n            if (privilegeTO == null) {\n                LOG.error(\"Null {}\", PrivilegeTO.class.getSimpleName());\n            } else {\n                Privilege privilege = applicationDAO.findPrivilege(privilegeTO.getKey());\n                if (privilege == null) {\n                    privilege = entityFactory.newEntity(Privilege.class);\n                    privilege.setKey(privilegeTO.getKey());\n                    privilege.setApplication(application);\n\n                    application.add(privilege);\n                } else if (!application.equals(privilege.getApplication())) {\n                    SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPrivilege);\n                    sce.getElements().add(\n                            \"Privilege \" + privilege.getKey() + \" already owned by \" + privilege.getApplication());\n                    throw sce;\n                }\n\n                privilege.setDescription(privilegeTO.getDescription());\n                privilege.setSpec(privilegeTO.getSpec());\n            }\n        });\n\n        // 2. remove all privileges not contained in the TO\n        for (Iterator<? extends Privilege> itor = application.getPrivileges().iterator(); itor.hasNext();) {\n            Privilege privilege = itor.next();\n            if (!applicationTO.getPrivileges().stream().\n                    anyMatch(privilegeTO -> privilege.getKey().equals(privilegeTO.getKey()))) {\n\n                privilege.setApplication(null);\n                itor.remove();\n            }\n        }\n\n        return application;\n    }\n\n<fim_suffix>    @Override\n    public PrivilegeTO getPrivilegeTO(final Privilege privilege) {\n        PrivilegeTO privilegeTO = new PrivilegeTO();\n        privilegeTO.setKey(privilege.getKey());\n        privilegeTO.setDescription(privilege.getDescription());\n        privilegeTO.setApplication(privilege.getApplication().getKey());\n        privilegeTO.setSpec(privilege.getSpec());\n        return privilegeTO;\n    }\n\n    @Override\n    public ApplicationTO getApplicationTO(final Application application) {\n        ApplicationTO applicationTO = new ApplicationTO();\n\n        applicationTO.setKey(application.getKey());\n        applicationTO.setDescription(application.getDescription());\n        applicationTO.getPrivileges().addAll(\n                application.getPrivileges().stream().map(privilege -> getPrivilegeTO(privilege)).\n                        collect(Collectors.toList()));\n\n        return applicationTO;\n    }\n\n}<fim_middle>// function below has no smell\n"}