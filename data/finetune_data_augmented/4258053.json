{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.net.ftp.parser;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\n\nimport org.apache.commons.net.ftp.FTPClientConfig;\n\n/**\n * Special implementation VMSFTPEntryParser with versioning turned on.\n * This parser removes all duplicates and only leaves the version with the highest\n * version number for each filename.\n *\n * This is a sample of VMS LIST output\n *\n *  \"1-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,RE)\",\n *  \"1-JUN.LIS;2              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,RE)\",\n *  \"DATA.DIR;1               1/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,RE)\",\n * <P>\n *\n * @version $Id$\n *\n * @see org.apache.commons.net.ftp.FTPFileEntryParser FTPFileEntryParser (for usage instructions)\n */\n<fim_suffix>public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser\n{\n\n    private final Pattern _preparse_pattern_;\n    private static final String PRE_PARSE_REGEX =\n        \"(.*?);([0-9]+)\\\\s*.*\";\n\n    /**\n     * Constructor for a VMSFTPEntryParser object.\n     *\n     * @throws IllegalArgumentException\n     * Thrown if the regular expression is unparseable.  Should not be seen\n     * under normal conditions.  It it is seen, this is a sign that\n     * <code>REGEX</code> is  not a valid regular expression.\n     */\n    public VMSVersioningFTPEntryParser()\n    {\n        this(null);\n    }\n\n    /**\n     * This constructor allows the creation of a VMSVersioningFTPEntryParser\n     * object with something other than the default configuration.\n     *\n     * @param config The {@link FTPClientConfig configuration} object used to\n     * configure this parser.\n     * @throws IllegalArgumentException\n     * Thrown if the regular expression is unparseable.  Should not be seen\n     * under normal conditions.  It it is seen, this is a sign that\n     * <code>REGEX</code> is  not a valid regular expression.\n     * @since 1.4\n     */\n    public VMSVersioningFTPEntryParser(FTPClientConfig config)\n    {\n        super();\n        configure(config);\n        try\n        {\n            //_preparse_matcher_ = new Perl5Matcher();\n            _preparse_pattern_ = Pattern.compile(PRE_PARSE_REGEX);\n        }\n        catch (PatternSyntaxException pse)\n        {\n            throw new IllegalArgumentException (\n                \"Unparseable regex supplied:  \" + PRE_PARSE_REGEX);\n        }\n\n   }\n\n    /**\n     * Implement hook provided for those implementers (such as\n     * VMSVersioningFTPEntryParser, and possibly others) which return\n     * multiple files with the same name to remove the duplicates ..\n     *\n     * @param original Original list\n     *\n     * @return Original list purged of duplicates\n     */\n    @Override\n    public List<String> preParse(List<String> original) {\n        HashMap<String, Integer> existingEntries = new HashMap<String, Integer>();\n        ListIterator<String> iter = original.listIterator();\n        while (iter.hasNext()) {\n            String entry = iter.next().trim();\n            MatchResult result = null;\n            Matcher _preparse_matcher_ = _preparse_pattern_.matcher(entry);\n            if (_preparse_matcher_.matches()) {\n                result = _preparse_matcher_.toMatchResult();\n                String name = result.group(1);\n                String version = result.group(2);\n                Integer nv = Integer.valueOf(version);\n                Integer existing = existingEntries.get(name);\n                if (null != existing) {\n                    if (nv.intValue() < existing.intValue()) {\n                        iter.remove();  // removes older version from original list.\n                        continue;\n                    }\n                }\n                existingEntries.put(name, nv);\n            }\n\n        }\n        // we've now removed all entries less than with less than the largest\n        // version number for each name that were listed after the largest.\n        // we now must remove those with smaller than the largest version number\n        // for each name that were found before the largest\n        while (iter.hasPrevious()) {\n            String entry = iter.previous().trim();\n            MatchResult result = null;\n            Matcher _preparse_matcher_ = _preparse_pattern_.matcher(entry);\n            if (_preparse_matcher_.matches()) {\n                result = _preparse_matcher_.toMatchResult();\n                String name = result.group(1);\n                String version = result.group(2);\n                Integer nv = Integer.valueOf(version);\n                Integer existing = existingEntries.get(name);\n                if (null != existing) {\n                    if (nv.intValue() < existing.intValue()) {\n                        iter.remove(); // removes older version from original list.\n                    }\n                }\n            }\n\n        }\n        return original;\n    }\n\n\n    @Override\n    protected boolean isVersioning() {\n        return true;\n    }\n\n}\n\n/* Emacs configuration\n * Local variables:        **\n * mode:             java  **\n * c-basic-offset:   4     **\n * indent-tabs-mode: nil   **\n * End:                    **\n */<fim_middle>// class below has no smell\n"}