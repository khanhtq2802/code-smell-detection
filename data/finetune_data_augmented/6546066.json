{"text": "<fim_prefix>/**\n * Copyright (c) 2016 NumberFour AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   NumberFour AG - Initial API and implementation\n */\npackage org.eclipse.n4js.validation.validators;\n\nimport java.util.Iterator;\n\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.xtext.validation.Check;\nimport org.eclipse.xtext.validation.EValidatorRegistrar;\n\nimport com.google.inject.Inject;\n\nimport org.eclipse.n4js.n4JS.ArrowFunction;\nimport org.eclipse.n4js.ts.utils.LambdaUtils;\nimport org.eclipse.n4js.utils.ContainerTypesHelper;\nimport org.eclipse.n4js.validation.AbstractN4JSDeclarativeValidator;\nimport org.eclipse.n4js.validation.IssueCodes;\n\n/**\n */\n<fim_suffix>public class N4JSLambdaValidator extends AbstractN4JSDeclarativeValidator {\n\n\t@Inject\n\tContainerTypesHelper containerTypesHelper;\n\n\t/**\n\t * NEEEDED\n\t *\n\t * when removed check methods will be called twice once by N4JSValidator, and once by\n\t * AbstractDeclarativeN4JSValidator\n\t */\n\t@Override\n\tpublic void register(EValidatorRegistrar registrar) {\n\t\t// nop\n\t}\n\n\t/**\n\t * A top-level arrow function can't include uses of <code>arguments</code> and <code>this</code> as they lack an\n\t * outer lexical context that would provide bindings for them.\n\t */\n\t@Check\n\tpublic void checkTopLevelLambda(ArrowFunction arrowFun) {\n\t\tif (LambdaUtils.isTopLevelLambda(arrowFun)) {\n\t\t\trejectUsagesOfThisInTopLevelLambda(arrowFun);\n\t\t}\n\t}\n\n\t/**\n\t * Rejects uses of 'this' in top-level functions, which due to their top-level nature can't capture any 'this' from\n\t * the enclosing context (same goes for 'arguments', by the way).\n\t * <p>\n\t * Precondition: the argument is a top-level lambda.\n\t */\n\tprivate void rejectUsagesOfThisInTopLevelLambda(ArrowFunction topLevelLambda) {\n\t\tassert LambdaUtils.isLambda(topLevelLambda);\n\t\tIterator<EObject> thisUsages = LambdaUtils.thisLiterals(topLevelLambda.getBody());\n\t\twhile (thisUsages.hasNext()) {\n\t\t\tEObject thisUsage = thisUsages.next();\n\t\t\tString message = IssueCodes.getMessageForKEY_THIS_REJECTED_IN_TOP_LEVEL_LAMBDA();\n\t\t\taddIssue(message, thisUsage, IssueCodes.KEY_THIS_REJECTED_IN_TOP_LEVEL_LAMBDA);\n\t\t}\n\t}\n}<fim_middle>// class below has no smell\n"}