{"text": "<fim_prefix>\n<fim_suffix>public class DefaultHotSpotLoweringProvider extends DefaultJavaLoweringProvider implements HotSpotLoweringProvider {\n    protected final HotSpotGraalRuntimeProvider runtime;\n    protected final HotSpotRegistersProvider registers;\n    protected final HotSpotConstantReflectionProvider constantReflection;\n    protected InstanceOfSnippets.Templates instanceofSnippets;\n    protected NewObjectSnippets.Templates newObjectSnippets;\n    protected MonitorSnippets.Templates monitorSnippets;\n    protected WriteBarrierSnippets.Templates writeBarrierSnippets;\n    protected LoadExceptionObjectSnippets.Templates exceptionObjectSnippets;\n    protected UnsafeLoadSnippets.Templates unsafeLoadSnippets;\n    protected AssertionSnippets.Templates assertionSnippets;\n    protected ArrayCopySnippets.Templates arraycopySnippets;\n    protected StringToBytesSnippets.Templates stringToBytesSnippets;\n    protected HashCodeSnippets.Templates hashCodeSnippets;\n    protected ResolveConstantSnippets.Templates resolveConstantSnippets;\n    protected ProfileSnippets.Templates profileSnippets;\n    protected ObjectCloneSnippets.Templates objectCloneSnippets;\n    protected ForeignCallSnippets.Templates foreignCallSnippets;\n    public DefaultHotSpotLoweringProvider(HotSpotGraalRuntimeProvider runtime, MetaAccessProvider metaAccess, ForeignCallsProvider foreignCalls, HotSpotRegistersProvider registers,\n                    HotSpotConstantReflectionProvider constantReflection, TargetDescription target) {\n        super(metaAccess, foreignCalls, target, runtime.getVMConfig().useCompressedOops);\n        this.runtime = runtime;\n        this.registers = registers;\n        this.constantReflection = constantReflection;\n    }\n    @Override\n    public void initialize(OptionValues options, Iterable<DebugHandlersFactory> factories, HotSpotProviders providers, GraalHotSpotVMConfig config) {\n        super.initialize(options, factories, runtime, providers, providers.getSnippetReflection());\n        assert target == providers.getCodeCache().getTarget();\n        instanceofSnippets = new InstanceOfSnippets.Templates(options, factories, runtime, providers, target);\n        newObjectSnippets = new NewObjectSnippets.Templates(options, factories, runtime, providers, target, config);\n        monitorSnippets = new MonitorSnippets.Templates(options, factories, runtime, providers, target, config.useFastLocking);\n        writeBarrierSnippets = new WriteBarrierSnippets.Templates(options, factories, runtime, providers, target, config);\n        exceptionObjectSnippets = new LoadExceptionObjectSnippets.Templates(options, factories, providers, target);\n        unsafeLoadSnippets = new UnsafeLoadSnippets.Templates(options, factories, providers, target);\n        assertionSnippets = new AssertionSnippets.Templates(options, factories, providers, target);\n        arraycopySnippets = new ArrayCopySnippets.Templates(new HotSpotArraycopySnippets(), options, factories, runtime, providers, providers.getSnippetReflection(), target);\n        stringToBytesSnippets = new StringToBytesSnippets.Templates(options, factories, providers, target);\n        hashCodeSnippets = new HashCodeSnippets.Templates(options, factories, providers, target);\n        resolveConstantSnippets = new ResolveConstantSnippets.Templates(options, factories, providers, target);\n        if (!JavaVersionUtil.Java8OrEarlier) {\n            profileSnippets = new ProfileSnippets.Templates(options, factories, providers, target);\n        }\n        objectCloneSnippets = new ObjectCloneSnippets.Templates(options, factories, providers, target);\n        foreignCallSnippets = new ForeignCallSnippets.Templates(options, factories, providers, target);\n    }\n    public MonitorSnippets.Templates getMonitorSnippets() {\n        return monitorSnippets;\n    }\n    @Override\n    @SuppressWarnings(\"try\")\n    public void lower(Node n, LoweringTool tool) {\n        StructuredGraph graph = (StructuredGraph) n.graph();\n        try (DebugCloseable context = n.withNodeSourcePosition()) {\n            if (n instanceof Invoke) {\n                lowerInvoke((Invoke) n, tool, graph);\n            } else if (n instanceof LoadMethodNode) {\n                lowerLoadMethodNode((LoadMethodNode) n);\n            } else if (n instanceof GetClassNode) {\n                lowerGetClassNode((GetClassNode) n, tool, graph);\n            } else if (n instanceof StoreHubNode) {\n                lowerStoreHubNode((StoreHubNode) n, graph);\n            } else if (n instanceof OSRStartNode) {\n                lowerOSRStartNode((OSRStartNode) n);\n            } else if (n instanceof BytecodeExceptionNode) {\n                lowerBytecodeExceptionNode((BytecodeExceptionNode) n);\n            } else if (n instanceof InstanceOfNode) {\n                InstanceOfNode instanceOfNode = (InstanceOfNode) n;\n                if (graph.getGuardsStage().areDeoptsFixed()) {\n                    instanceofSnippets.lower(instanceOfNode, tool);\n                } else {\n                    if (instanceOfNode.allowsNull()) {\n                        ValueNode object = instanceOfNode.getValue();\n                        LogicNode newTypeCheck = graph.addOrUniqueWithInputs(InstanceOfNode.create(instanceOfNode.type(), object, instanceOfNode.profile(), instanceOfNode.getAnchor()));\n                        LogicNode newNode = LogicNode.or(graph.unique(IsNullNode.create(object)), newTypeCheck, GraalDirectives.UNLIKELY_PROBABILITY);\n                        instanceOfNode.replaceAndDelete(newNode);\n                    }\n                }\n            } else if (n instanceof InstanceOfDynamicNode) {\n                InstanceOfDynamicNode instanceOfDynamicNode = (InstanceOfDynamicNode) n;\n                if (graph.getGuardsStage().areDeoptsFixed()) {\n                    instanceofSnippets.lower(instanceOfDynamicNode, tool);\n                } else {\n                    ValueNode mirror = instanceOfDynamicNode.getMirrorOrHub();\n                    if (mirror.stamp(NodeView.DEFAULT).getStackKind() == JavaKind.Object) {\n                        ClassGetHubNode classGetHub = graph.unique(new ClassGetHubNode(mirror));\n                        instanceOfDynamicNode.setMirror(classGetHub);\n                    }\n                    if (instanceOfDynamicNode.allowsNull()) {\n                        ValueNode object = instanceOfDynamicNode.getObject();\n                        LogicNode newTypeCheck = graph.addOrUniqueWithInputs(\n                                        InstanceOfDynamicNode.create(graph.getAssumptions(), tool.getConstantReflection(), instanceOfDynamicNode.getMirrorOrHub(), object, false));\n                        LogicNode newNode = LogicNode.or(graph.unique(IsNullNode.create(object)), newTypeCheck, GraalDirectives.UNLIKELY_PROBABILITY);\n                        instanceOfDynamicNode.replaceAndDelete(newNode);\n                    }\n                }\n            } else if (n instanceof ClassIsAssignableFromNode) {\n                if (graph.getGuardsStage().areDeoptsFixed()) {\n                    instanceofSnippets.lower((ClassIsAssignableFromNode) n, tool);\n                }\n            } else if (n instanceof NewInstanceNode) {\n                if (graph.getGuardsStage().areFrameStatesAtDeopts()) {\n                    newObjectSnippets.lower((NewInstanceNode) n, registers, tool);\n                }\n            } else if (n instanceof DynamicNewInstanceNode) {\n                DynamicNewInstanceNode newInstanceNode = (DynamicNewInstanceNode) n;\n                if (newInstanceNode.getClassClass() == null) {\n                    JavaConstant classClassMirror = constantReflection.asJavaClass(metaAccess.lookupJavaType(Class.class));\n                    ConstantNode classClass = ConstantNode.forConstant(classClassMirror, tool.getMetaAccess(), graph);\n                    newInstanceNode.setClassClass(classClass);\n                }\n                if (graph.getGuardsStage().areFrameStatesAtDeopts()) {\n                    newObjectSnippets.lower(newInstanceNode, registers, tool);\n                }\n            } else if (n instanceof NewArrayNode) {\n                if (graph.getGuardsStage().areFrameStatesAtDeopts()) {\n                    newObjectSnippets.lower((NewArrayNode) n, registers, tool);\n                }\n            } else if (n instanceof DynamicNewArrayNode) {\n                DynamicNewArrayNode dynamicNewArrayNode = (DynamicNewArrayNode) n;\n                if (dynamicNewArrayNode.getVoidClass() == null) {\n                    JavaConstant voidClassMirror = constantReflection.asJavaClass(metaAccess.lookupJavaType(void.class));\n                    ConstantNode voidClass = ConstantNode.forConstant(voidClassMirror, tool.getMetaAccess(), graph);\n                    dynamicNewArrayNode.setVoidClass(voidClass);\n                }\n                if (graph.getGuardsStage().areFrameStatesAtDeopts()) {\n                    newObjectSnippets.lower(dynamicNewArrayNode, registers, tool);\n                }\n            } else if (n instanceof VerifyHeapNode) {\n                if (graph.getGuardsStage().areFrameStatesAtDeopts()) {\n                    newObjectSnippets.lower((VerifyHeapNode) n, registers, tool);\n                }\n            } else if (n instanceof RawMonitorEnterNode) {\n                if (graph.getGuardsStage().areFrameStatesAtDeopts()) {<fim_middle>// class below is blob\n"}