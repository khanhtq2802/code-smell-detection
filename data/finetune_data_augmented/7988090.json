{"text": "<fim_prefix>/**\n * Copyright (c) 2015, 2016 itemis AG (http://www.itemis.eu) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n */\npackage org.eclipse.xtext.xbase.validation;\n\nimport com.google.common.base.Objects;\nimport com.google.common.collect.Iterables;\nimport com.google.inject.Inject;\nimport java.util.Set;\nimport java.util.function.Consumer;\nimport org.eclipse.emf.common.util.URI;\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.emf.ecore.EStructuralFeature;\nimport org.eclipse.emf.ecore.resource.Resource;\nimport org.eclipse.xtend2.lib.StringConcatenation;\nimport org.eclipse.xtext.AbstractRule;\nimport org.eclipse.xtext.IGrammarAccess;\nimport org.eclipse.xtext.ParserRule;\nimport org.eclipse.xtext.common.types.JvmDeclaredType;\nimport org.eclipse.xtext.common.types.TypesPackage;\nimport org.eclipse.xtext.naming.IQualifiedNameProvider;\nimport org.eclipse.xtext.naming.QualifiedName;\nimport org.eclipse.xtext.resource.IEObjectDescription;\nimport org.eclipse.xtext.resource.IResourceDescriptions;\nimport org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\nimport org.eclipse.xtext.validation.AbstractDeclarativeValidator;\nimport org.eclipse.xtext.validation.Check;\nimport org.eclipse.xtext.validation.EValidatorRegistrar;\nimport org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations;\nimport org.eclipse.xtext.xbase.lib.Functions.Function1;\nimport org.eclipse.xtext.xbase.lib.IterableExtensions;\nimport org.eclipse.xtext.xbase.validation.IssueCodes;\n\n/**\n * @author Sebastian Zarnekow - Initial contribution and API\n */\n<fim_suffix>@SuppressWarnings(\"all\")\npublic class UniqueClassNameValidator extends AbstractDeclarativeValidator {\n  @Inject\n  private ResourceDescriptionsProvider resourceDescriptionsProvider;\n  \n  @Inject\n  private IQualifiedNameProvider qualifiedNameProvider;\n  \n  @Inject\n  private IJvmModelAssociations associations;\n  \n  @Override\n  public void register(final EValidatorRegistrar registrar) {\n  }\n  \n  @Inject\n  protected void register(final EValidatorRegistrar registrar, final IGrammarAccess grammarAccess) {\n    final AbstractRule entryRule = IterableExtensions.<AbstractRule>head(grammarAccess.getGrammar().getRules());\n    if ((entryRule instanceof ParserRule)) {\n      registrar.register(((ParserRule)entryRule).getType().getClassifier().getEPackage(), this);\n    }\n  }\n  \n  @Check\n  public void checkUniqueName(final EObject root) {\n    EObject _eContainer = root.eContainer();\n    boolean _tripleEquals = (_eContainer == null);\n    if (_tripleEquals) {\n      final Resource resource = root.eResource();\n      EObject _head = IterableExtensions.<EObject>head(resource.getContents());\n      boolean _equals = Objects.equal(_head, root);\n      if (_equals) {\n        final Consumer<JvmDeclaredType> _function = (JvmDeclaredType it) -> {\n          this.doCheckUniqueName(it);\n        };\n        Iterables.<JvmDeclaredType>filter(resource.getContents(), JvmDeclaredType.class).forEach(_function);\n      }\n    }\n  }\n  \n  protected void doCheckUniqueName(final JvmDeclaredType type) {\n    EObject _eContainer = type.eContainer();\n    boolean _tripleEquals = (_eContainer == null);\n    if (_tripleEquals) {\n      final QualifiedName name = this.qualifiedNameProvider.getFullyQualifiedName(type);\n      if ((name != null)) {\n        this.doCheckUniqueName(name, type);\n      }\n    }\n  }\n  \n  protected boolean doCheckUniqueName(final QualifiedName name, final JvmDeclaredType type) {\n    final IResourceDescriptions index = this.resourceDescriptionsProvider.getResourceDescriptions(type.eResource());\n    final Iterable<IEObjectDescription> others = index.getExportedObjects(TypesPackage.Literals.JVM_DECLARED_TYPE, name, false);\n    return this.checkUniqueInIndex(type, others);\n  }\n  \n  protected boolean checkUniqueInIndex(final JvmDeclaredType type, final Iterable<IEObjectDescription> descriptions) {\n    final Function1<IEObjectDescription, URI> _function = (IEObjectDescription it) -> {\n      return it.getEObjectURI().trimFragment();\n    };\n    final Set<URI> resourceURIs = IterableExtensions.<URI>toSet(IterableExtensions.<IEObjectDescription, URI>map(descriptions, _function));\n    int _size = resourceURIs.size();\n    boolean _greaterThan = (_size > 1);\n    if (_greaterThan) {\n      final Function1<URI, Boolean> _function_1 = (URI it) -> {\n        URI _uRI = type.eResource().getURI();\n        return Boolean.valueOf((!Objects.equal(it, _uRI)));\n      };\n      this.addIssue(type, IterableExtensions.<URI>head(IterableExtensions.<URI>filter(resourceURIs, _function_1)).lastSegment());\n      return false;\n    } else {\n      int _size_1 = IterableExtensions.size(descriptions);\n      boolean _greaterThan_1 = (_size_1 > 1);\n      if (_greaterThan_1) {\n        this.addIssue(type);\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Marks a type as already defined.\n   * @since 2.15\n   */\n  protected void addIssue(final JvmDeclaredType type) {\n    this.addIssue(type, null);\n  }\n  \n  /**\n   * Marks a type as already defined.\n   * \n   * @param type - the type to mark already defined.\n   * @param fileName - a file where the type is already defined.\n   * \t\t\t\t\t If fileName is null this information will not be part of the message.\n   */\n  protected void addIssue(final JvmDeclaredType type, final String fileName) {\n    StringConcatenation _builder = new StringConcatenation();\n    _builder.append(\"The type \");\n    String _simpleName = type.getSimpleName();\n    _builder.append(_simpleName);\n    _builder.append(\" is already defined\");\n    {\n      if ((fileName != null)) {\n        _builder.append(\" in \");\n        _builder.append(fileName);\n      }\n    }\n    _builder.append(\".\");\n    final String message = _builder.toString();\n    final EObject sourceElement = this.associations.getPrimarySourceElement(type);\n    if ((sourceElement == null)) {\n      this.addIssue(message, type, IssueCodes.DUPLICATE_TYPE);\n    } else {\n      final EStructuralFeature feature = sourceElement.eClass().getEStructuralFeature(\"name\");\n      this.addIssue(message, sourceElement, feature, IssueCodes.DUPLICATE_TYPE);\n    }\n  }\n}<fim_middle>// class below has no smell\n"}