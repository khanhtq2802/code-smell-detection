{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cassandra.repair.messages;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.UUID;\n\nimport org.apache.cassandra.db.TypeSizes;\nimport org.apache.cassandra.dht.Range;\nimport org.apache.cassandra.dht.Token;\nimport org.apache.cassandra.io.util.DataInputPlus;\nimport org.apache.cassandra.io.util.DataOutputPlus;\nimport org.apache.cassandra.net.MessagingService;\nimport org.apache.cassandra.schema.TableId;\nimport org.apache.cassandra.streaming.PreviewKind;\nimport org.apache.cassandra.utils.UUIDSerializer;\n\n\npublic class PrepareMessage extends RepairMessage\n{\n    public final static MessageSerializer serializer = new PrepareMessageSerializer();\n    public final List<TableId> tableIds;\n    public final Collection<Range<Token>> ranges;\n\n    public final UUID parentRepairSession;\n    public final boolean isIncremental;\n    public final long timestamp;\n    public final boolean isGlobal;\n    public final PreviewKind previewKind;\n\n    public PrepareMessage(UUID parentRepairSession, List<TableId> tableIds, Collection<Range<Token>> ranges, boolean isIncremental, long timestamp, boolean isGlobal, PreviewKind previewKind)\n    {\n        super(Type.PREPARE_MESSAGE, null);\n        this.parentRepairSession = parentRepairSession;\n        this.tableIds = tableIds;\n        this.ranges = ranges;\n        this.isIncremental = isIncremental;\n        this.timestamp = timestamp;\n        this.isGlobal = isGlobal;\n        this.previewKind = previewKind;\n    }\n\n    @Override\n    public boolean equals(Object o)\n    {\n        if (!(o instanceof PrepareMessage))\n            return false;\n        PrepareMessage other = (PrepareMessage) o;\n        return messageType == other.messageType &&\n               parentRepairSession.equals(other.parentRepairSession) &&\n               isIncremental == other.isIncremental &&\n               isGlobal == other.isGlobal &&\n               previewKind == other.previewKind &&\n               timestamp == other.timestamp &&\n               tableIds.equals(other.tableIds) &&\n               ranges.equals(other.ranges);\n    }\n\n    @Override\n    public int hashCode()\n    {\n        return Objects.hash(messageType, parentRepairSession, isGlobal, previewKind, isIncremental, timestamp, tableIds, ranges);\n    }\n\n<fim_suffix>    public static class PrepareMessageSerializer implements MessageSerializer<PrepareMessage>\n    {\n        public void serialize(PrepareMessage message, DataOutputPlus out, int version) throws IOException\n        {\n            out.writeInt(message.tableIds.size());\n            for (TableId tableId : message.tableIds)\n                tableId.serialize(out);\n            UUIDSerializer.serializer.serialize(message.parentRepairSession, out, version);\n            out.writeInt(message.ranges.size());\n            for (Range<Token> r : message.ranges)\n            {\n                MessagingService.validatePartitioner(r);\n                Range.tokenSerializer.serialize(r, out, version);\n            }\n            out.writeBoolean(message.isIncremental);\n            out.writeLong(message.timestamp);\n            out.writeBoolean(message.isGlobal);\n            out.writeInt(message.previewKind.getSerializationVal());\n        }\n\n        public PrepareMessage deserialize(DataInputPlus in, int version) throws IOException\n        {\n            int tableIdCount = in.readInt();\n            List<TableId> tableIds = new ArrayList<>(tableIdCount);\n            for (int i = 0; i < tableIdCount; i++)\n                tableIds.add(TableId.deserialize(in));\n            UUID parentRepairSession = UUIDSerializer.serializer.deserialize(in, version);\n            int rangeCount = in.readInt();\n            List<Range<Token>> ranges = new ArrayList<>(rangeCount);\n            for (int i = 0; i < rangeCount; i++)\n                ranges.add((Range<Token>) Range.tokenSerializer.deserialize(in, MessagingService.globalPartitioner(), version));\n            boolean isIncremental = in.readBoolean();\n            long timestamp = in.readLong();\n            boolean isGlobal = in.readBoolean();\n            PreviewKind previewKind = PreviewKind.deserialize(in.readInt());\n            return new PrepareMessage(parentRepairSession, tableIds, ranges, isIncremental, timestamp, isGlobal, previewKind);\n        }\n\n        public long serializedSize(PrepareMessage message, int version)\n        {\n            long size;\n            size = TypeSizes.sizeof(message.tableIds.size());\n            for (TableId tableId : message.tableIds)\n                size += tableId.serializedSize();\n            size += UUIDSerializer.serializer.serializedSize(message.parentRepairSession, version);\n            size += TypeSizes.sizeof(message.ranges.size());\n            for (Range<Token> r : message.ranges)\n                size += Range.tokenSerializer.serializedSize(r, version);\n            size += TypeSizes.sizeof(message.isIncremental);\n            size += TypeSizes.sizeof(message.timestamp);\n            size += TypeSizes.sizeof(message.isGlobal);\n            size += TypeSizes.sizeof(message.previewKind.getSerializationVal());\n            return size;\n        }\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"PrepareMessage{\" +\n               \"tableIds='\" + tableIds + '\\'' +\n               \", ranges=\" + ranges +\n               \", parentRepairSession=\" + parentRepairSession +\n               \", isIncremental=\" + isIncremental +\n               \", timestamp=\" + timestamp +\n               \", isGlobal=\" + isGlobal +\n               '}';\n    }\n}<fim_middle>// class below has no smell\n"}