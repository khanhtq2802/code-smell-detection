{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\npackage org.apache.fluo.command;\n\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.EnumSet;\nimport java.util.List;\n\nimport com.beust.jcommander.Parameter;\nimport org.apache.fluo.api.config.FluoConfiguration;\nimport org.apache.fluo.core.client.FluoAdminImpl;\nimport org.apache.fluo.core.util.ScanUtil;\nimport org.apache.fluo.core.util.ScanUtil.ScanFlags;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\n\npublic class FluoScan {\n\n<fim_suffix>  public static class ScanOptions extends CommonOpts {\n\n    @Parameter(names = \"-s\", description = \"Start row (inclusive) of scan\")\n    private String startRow;\n\n    @Parameter(names = \"-e\", description = \"End row (inclusive) of scan\")\n    private String endRow;\n\n    @Parameter(names = \"-c\", description = \"Columns of scan in comma separated format: \"\n        + \"<<columnfamily>[:<columnqualifier>]{,<columnfamily>[:<columnqualifier>]}> \")\n    private List<String> columns;\n\n    @Parameter(names = \"-r\", description = \"Exact row to scan\")\n    private String exactRow;\n\n    @Parameter(names = \"-p\", description = \"Row prefix to scan\")\n    private String rowPrefix;\n\n    @Parameter(names = {\"-esc\", \"--escape-non-ascii\"}, help = true,\n        description = \"Hex encode non ascii bytes\", arity = 1)\n    public boolean hexEncNonAscii = true;\n\n    @Parameter(names = \"--raw\", help = true,\n        description = \"Show underlying key/values stored in Accumulo. Interprets the data using Fluo \"\n            + \"internal schema, making it easier to comprehend.\")\n    public boolean scanAccumuloTable = false;\n\n    @Parameter(names = \"--json\", help = true,\n        description = \"Export key/values stored in Accumulo as JSON file.\")\n    public boolean exportAsJson = false;\n\n    @Parameter(names = \"--ntfy\", help = true, description = \"Scan active notifications\")\n    public boolean scanNtfy = false;\n\n    public String getStartRow() {\n      return startRow;\n    }\n\n    public String getEndRow() {\n      return endRow;\n    }\n\n    public String getExactRow() {\n      return exactRow;\n    }\n\n    public String getRowPrefix() {\n      return rowPrefix;\n    }\n\n    public List<String> getColumns() {\n      if (columns == null) {\n        return Collections.emptyList();\n      }\n      return columns;\n    }\n\n    /**\n     * Check if the parameters informed can be used together.\n     */\n    private void checkScanOptions() {\n      if (this.scanAccumuloTable && this.exportAsJson) {\n        throw new IllegalArgumentException(\n            \"Both \\\"--raw\\\" and \\\"--json\\\" can not be set together.\");\n      }\n\n      if (this.scanAccumuloTable && this.scanNtfy) {\n        throw new IllegalArgumentException(\n            \"Both \\\"--raw\\\" and \\\"--ntfy\\\" can not be set together.\");\n      }\n    }\n\n    public ScanUtil.ScanOpts getScanOpts() {\n      EnumSet<ScanFlags> flags = EnumSet.noneOf(ScanFlags.class);\n\n      ScanUtil.setFlag(flags, help, ScanFlags.HELP);\n      ScanUtil.setFlag(flags, hexEncNonAscii, ScanFlags.HEX);\n      ScanUtil.setFlag(flags, scanAccumuloTable, ScanFlags.ACCUMULO);\n      ScanUtil.setFlag(flags, exportAsJson, ScanFlags.JSON);\n      ScanUtil.setFlag(flags, scanNtfy, ScanFlags.NTFY);\n\n      return new ScanUtil.ScanOpts(startRow, endRow, columns, exactRow, rowPrefix, flags);\n    }\n\n    public static ScanOptions parse(String[] args) {\n      ScanOptions opts = new ScanOptions();\n      parse(\"fluo scan\", opts, args);\n      return opts;\n    }\n  }\n\n  public static void main(String[] args) {\n\n    Logger.getRootLogger().setLevel(Level.ERROR);\n    Logger.getLogger(\"org.apache.fluo\").setLevel(Level.ERROR);\n\n    ScanOptions options = ScanOptions.parse(args);\n    options.checkScanOptions();\n    FluoConfiguration config = CommandUtil.resolveFluoConfig();\n    config.setApplicationName(options.getApplicationName());\n    options.overrideFluoConfig(config);\n\n    try {\n      options.overrideFluoConfig(config);\n      if (options.scanAccumuloTable) {\n        config = FluoAdminImpl.mergeZookeeperConfig(config);\n        ScanUtil.scanAccumulo(options.getScanOpts(), config, System.out);\n      } else if (options.scanNtfy) {\n        config = FluoAdminImpl.mergeZookeeperConfig(config);\n        ScanUtil.scanNotifications(options.getScanOpts(), config, System.out);\n      } else {\n        CommandUtil.verifyAppRunning(config);\n        ScanUtil.scanFluo(options.getScanOpts(), config, System.out);\n      }\n    } catch (RuntimeException | IOException e) {\n      System.err.println(\"Scan failed - \" + e.getMessage());\n      System.exit(-1);\n    }\n  }\n\n}<fim_middle>// class below is data class\n"}