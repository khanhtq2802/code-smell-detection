{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.hdfs.server.federation.router;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport com.google.common.annotations.VisibleForTesting;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport org.apache.hadoop.classification.InterfaceAudience;\nimport org.apache.hadoop.classification.InterfaceStability;\nimport org.apache.hadoop.security.UserGroupInformation;\nimport org.apache.hadoop.security.token.Token;\nimport org.apache.hadoop.security.token.TokenIdentifier;\n\n/**\n * Identifier for a connection for a user to a namenode.\n */\n@InterfaceAudience.Private\n@InterfaceStability.Evolving\npublic class ConnectionPoolId implements Comparable<ConnectionPoolId> {\n\n  /** Namenode identifier. */\n  private final String nnId;\n  /** Information about the user. */\n  private final UserGroupInformation ugi;\n  /** Protocol for the connection. */\n  private final Class<?> protocol;\n\n  /**\n   * New connection pool identifier.\n   *\n   * @param ugi Information of the user issuing the request.\n   * @param nnId Namenode address with port.\n   * @param proto Protocol of the connection.\n   */\n<fim_suffix>  public ConnectionPoolId(final UserGroupInformation ugi, final String nnId,\n      final Class<?> proto) {\n    this.nnId = nnId;\n    this.ugi = ugi;\n    this.protocol = proto;\n  }\n\n  @Override\n  public int hashCode() {\n    int hash = new HashCodeBuilder(17, 31)\n        .append(this.nnId)\n        .append(this.ugi.toString())\n        .append(this.getTokenIds())\n        .append(this.protocol)\n        .toHashCode();\n    return hash;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (o instanceof ConnectionPoolId) {\n      ConnectionPoolId other = (ConnectionPoolId) o;\n      if (!this.nnId.equals(other.nnId)) {\n        return false;\n      }\n      if (!this.ugi.toString().equals(other.ugi.toString())) {\n        return false;\n      }\n      String thisTokens = this.getTokenIds().toString();\n      String otherTokens = other.getTokenIds().toString();\n      if (!thisTokens.equals(otherTokens)) {\n        return false;\n      }\n      return this.protocol.equals(other.protocol);\n    }\n    return false;\n  }\n\n  @Override\n  public String toString() {\n    return this.ugi + \" \" + this.getTokenIds() + \"->\" + this.nnId + \" [\" +\n        this.protocol.getSimpleName() + \"]\";\n  }\n\n  @Override\n  public int compareTo(ConnectionPoolId other) {\n    int ret = this.nnId.compareTo(other.nnId);\n    if (ret == 0) {\n      ret = this.ugi.toString().compareTo(other.ugi.toString());\n    }\n    if (ret == 0) {\n      String thisTokens = this.getTokenIds().toString();\n      String otherTokens = other.getTokenIds().toString();\n      ret = thisTokens.compareTo(otherTokens);\n    }\n    if (ret == 0) {\n      ret = this.protocol.toString().compareTo(other.protocol.toString());\n    }\n    return ret;\n  }\n\n  @VisibleForTesting\n  UserGroupInformation getUgi() {\n    return this.ugi;\n  }\n\n  /**\n   * Get the token identifiers for this connection.\n   * @return List with the token identifiers.\n   */\n  private List<String> getTokenIds() {\n    List<String> tokenIds = new ArrayList<>();\n    Collection<Token<? extends TokenIdentifier>> tokens = this.ugi.getTokens();\n    for (Token<? extends TokenIdentifier> token : tokens) {\n      byte[] tokenIdBytes = token.getIdentifier();\n      String tokenId = Arrays.toString(tokenIdBytes);\n      tokenIds.add(tokenId);\n    }\n    Collections.sort(tokenIds);\n    return tokenIds;\n  }\n}<fim_middle>// function below has no smell\n"}