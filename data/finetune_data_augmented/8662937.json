{"text": "<fim_prefix>/*******************************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *******************************************************************************/\npackage org.apache.ofbiz.content.content;\nimport java.sql.Timestamp;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.ofbiz.base.util.Debug;\nimport org.apache.ofbiz.base.util.UtilGenerics;\nimport org.apache.ofbiz.base.util.UtilHttp;\nimport org.apache.ofbiz.base.util.UtilMisc;\nimport org.apache.ofbiz.base.util.UtilValidate;\nimport org.apache.ofbiz.content.content.ContentSearch.ContentSearchConstraint;\nimport org.apache.ofbiz.content.content.ContentSearch.ResultSortOrder;\nimport org.apache.ofbiz.content.content.ContentSearch.SortKeywordRelevancy;\nimport org.apache.ofbiz.entity.Delegator;\npublic class ContentSearchSession {\n    public static final String module = ContentSearchSession.class.getName();\n    @SuppressWarnings(\"serial\")\n    public static class ContentSearchOptions implements java.io.Serializable {\n        protected List<ContentSearchConstraint> constraintList = null;\n        protected ResultSortOrder resultSortOrder = null;\n        protected Integer viewIndex = null;\n        protected Integer viewSize = null;\n        protected boolean changed = false;\n        public ContentSearchOptions() { }\n        /** Basic copy constructor */\n        public ContentSearchOptions(ContentSearchOptions contentSearchOptions) {\n            this.constraintList = UtilMisc.makeListWritable(contentSearchOptions.constraintList);\n            this.resultSortOrder = contentSearchOptions.resultSortOrder;\n            this.viewIndex = contentSearchOptions.viewIndex;\n            this.viewSize = contentSearchOptions.viewSize;\n            this.changed = contentSearchOptions.changed;\n        }\n        public List<ContentSearchConstraint> getConstraintList() {\n            return this.constraintList;\n        }\n        public static List<ContentSearchConstraint> getConstraintList(HttpSession session) {\n            return getContentSearchOptions(session).constraintList;\n        }\n        public static void addConstraint(ContentSearchConstraint contentSearchConstraint, HttpSession session) {\n            ContentSearchOptions contentSearchOptions = getContentSearchOptions(session);\n            if (contentSearchOptions.constraintList == null) {\n                contentSearchOptions.constraintList = new LinkedList<ContentSearch.ContentSearchConstraint>();\n            }\n            if (!contentSearchOptions.constraintList.contains(contentSearchConstraint)) {\n                contentSearchOptions.constraintList.add(contentSearchConstraint);\n                contentSearchOptions.changed = true;\n            }\n        }\n        public ResultSortOrder getResultSortOrder() {\n            if (this.resultSortOrder == null) {\n                this.resultSortOrder = new SortKeywordRelevancy();\n                this.changed = true;\n            }\n            return this.resultSortOrder;\n        }\n        public static ResultSortOrder getResultSortOrder(HttpServletRequest request) {\n            ContentSearchOptions contentSearchOptions = getContentSearchOptions(request.getSession());\n            return contentSearchOptions.getResultSortOrder();\n        }\n<fim_suffix>        public static void setResultSortOrder(ResultSortOrder resultSortOrder, HttpSession session) {\n            ContentSearchOptions contentSearchOptions = getContentSearchOptions(session);\n            contentSearchOptions.resultSortOrder = resultSortOrder;\n            contentSearchOptions.changed = true;\n        }\n        public static void clearSearchOptions(HttpSession session) {\n            ContentSearchOptions contentSearchOptions = getContentSearchOptions(session);\n            contentSearchOptions.constraintList = null;\n            contentSearchOptions.resultSortOrder = null;\n        }\n        public void clearViewInfo() {\n            this.viewIndex = null;\n            this.viewSize = null;\n        }\n        /**\n         * @return Returns the viewIndex.\n         */\n        public Integer getViewIndex() {\n            return viewIndex;\n        }\n        /**\n         * @param viewIndex The viewIndex to set.\n         */\n        public void setViewIndex(Integer viewIndex) {\n            this.viewIndex = viewIndex;\n        }\n        /**\n         * @return Returns the viewSize.\n         */\n        public Integer getViewSize() {\n            return viewSize;\n        }\n        /**\n         * @param viewSize The viewSize to set.\n         */\n        public void setViewSize(Integer viewSize) {\n            this.viewSize = viewSize;\n        }\n        public List<String> searchGetConstraintStrings(boolean detailed, Delegator delegator, Locale locale) {\n            List<ContentSearchConstraint> contentSearchConstraintList = this.getConstraintList();\n            List<String> constraintStrings = new LinkedList<String>();\n            if (contentSearchConstraintList == null) {\n                return constraintStrings;\n            }\n            for (ContentSearchConstraint contentSearchConstraint: contentSearchConstraintList) {\n                if (contentSearchConstraint == null) continue;\n                String constraintString = contentSearchConstraint.prettyPrintConstraint(delegator, detailed, locale);\n                if (UtilValidate.isNotEmpty(constraintString)) {\n                    constraintStrings.add(constraintString);\n                } else {\n                    constraintStrings.add(\"Description not available\");\n                }\n            }\n            return constraintStrings;\n        }\n    }\n    public static ContentSearchOptions getContentSearchOptions(HttpSession session) {\n        ContentSearchOptions contentSearchOptions = (ContentSearchOptions) session.getAttribute(\"_CONTENT_SEARCH_OPTIONS_CURRENT_\");\n        if (contentSearchOptions == null) {\n            contentSearchOptions = new ContentSearchOptions();\n            session.setAttribute(\"_CONTENT_SEARCH_OPTIONS_CURRENT_\", contentSearchOptions);\n        }\n        return contentSearchOptions;\n    }\n    public static void processSearchParameters(Map<String, Object> parameters, HttpServletRequest request) {\n        Boolean alreadyRun = (Boolean) request.getAttribute(\"processSearchParametersAlreadyRun\");\n        if (Boolean.TRUE.equals(alreadyRun)) {\n            return;\n        } else {\n            request.setAttribute(\"processSearchParametersAlreadyRun\", Boolean.TRUE);\n        }\n        HttpSession session = request.getSession();\n        boolean constraintsChanged = false;\n        // clear search? by default yes, but if the clearSearch parameter is N then don't\n        String clearSearchString = (String) parameters.get(\"clearSearch\");\n        if (!\"N\".equals(clearSearchString)) {\n            searchClear(session);\n            constraintsChanged = true;\n        } else {\n            String removeConstraint = (String) parameters.get(\"removeConstraint\");\n            if (UtilValidate.isNotEmpty(removeConstraint)) {\n                try {\n                    searchRemoveConstraint(Integer.parseInt(removeConstraint), session);\n                    constraintsChanged = true;\n                } catch (Exception e) {\n                    Debug.logError(e, \"Error removing constraint [\" + removeConstraint + \"]\", module);\n                }\n            }\n        }\n        // add a Content Assoc Type to the search\n        if (UtilValidate.isNotEmpty(parameters.get(\"SEARCH_CONTENT_ID\"))) {\n            String contentId=(String) parameters.get(\"SEARCH_CONTENT_ID\");\n            String contentAssocTypeId=(String) parameters.get(\"contentAssocTypeId\");\n            boolean includeAllSubContents =!\"N\".equalsIgnoreCase((String) parameters.get(\"SEARCH_SUB_CONTENTS\"));\n            searchAddConstraint(new ContentSearch.ContentAssocConstraint(contentId,contentAssocTypeId,includeAllSubContents), session);\n            constraintsChanged = true;\n        }\n        // add a Content fromDate thruDate to the search\n        if (UtilValidate.isNotEmpty(parameters.get(\"fromDate\")) || UtilValidate.isNotEmpty(parameters.get(\"thruDate\"))) {\n            Timestamp fromDate =null;\n            if (UtilValidate.isNotEmpty(parameters.get(\"fromDate\"))) {\n                fromDate=Timestamp.valueOf((String) parameters.get(\"fromDate\"));\n            }\n            Timestamp thruDate = null;\n            if (UtilValidate.isNotEmpty(parameters.get(\"thruDate\"))) {\n                thruDate = Timestamp.valueOf((String) parameters.get(\"thruDate\"));\n            }\n            searchAddConstraint(new ContentSearch.LastUpdatedRangeConstraint(fromDate,thruDate), session);\n            constraintsChanged = true;\n        }\n        // if keywords were specified, add a constraint for them\n        if (UtilValidate.isNotEmpty(parameters.get(\"SEARCH_STRING\"))) {\n            String keywordString = (String) parameters.get(\"SEARCH_STRING\");\n            String searchOperator = (String) parameters.get(\"SEARCH_OPERATOR\");\n            // defaults to true/Y, ie anything but N is true/Y\n            boolean anyPrefixSuffix = !\"N\".equals(parameters.get(\"SEARCH_ANYPRESUF\"));<fim_middle>// function below is feature envy\n"}