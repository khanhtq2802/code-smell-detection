{"text": "<fim_prefix>     * \"403\"(view: \"/errors/forbidden\"  // link support to the view\n     * name personList: \"/showPeople\" {\n     *     controller = 'person'  // link support to the controller\n     *     action = 'list'  // link support to the action\n     * }\n     * \"/showPeople\" {\n     *     controller = 'person'  // link support to the controller\n     *     action = 'list'  // link support to the action\n     * }\n     * \"/product/$id\"(controller:\"product\"){\n     *    action = [GET:\"show\", PUT:\"update\", DELETE:\"delete\", POST:\"save\"]\n     *  }    \n     * </pre>\n     * @param statements\n     * @param offset\n     * @return\n     */\n    private IHyperlink findLink(Statement statement, int offset, GroovyCompilationUnit unit) {\n        if (! (statement instanceof ExpressionStatement)) {\n            return null;\n        }\n        Expression expr  = ((ExpressionStatement) statement).getExpression();\n        if (expr.getStart() > offset || expr.getEnd() < offset) {\n            return null;\n        }\n        if (expr instanceof MethodCallExpression) {\n            MethodCallExpression call = (MethodCallExpression) expr;\n            Expression args = call .getArguments();\n            if (! (args instanceof TupleExpression) || ((TupleExpression) args).getExpressions().size() == 0) {\n                return null;\n            }\n            TupleExpression tuple = (TupleExpression) args;\n            Expression firstArg = tuple.getExpression(0);\n            Expression lastArg = tuple.getExpression(tuple.getExpressions().size()-1);\n            NameRegion[] components;\n            if (lastArg instanceof ClosureExpression && firstArg == lastArg) {\n                /* we have something like this:\n                 * \"/showPeople\" {\n                 *     controller = 'person'  // link support to the controller\n                 *     action = 'list'  // link support to the action\n                 * }\n                 */\n                components = findLinkComponentsInClosure((ClosureExpression) lastArg, offset);\n            } else if (firstArg instanceof MapExpression) {\n                List<MapEntryExpression> mapEntryExpressions = ((MapExpression) firstArg).getMapEntryExpressions();\n                if (mapEntryExpressions.size() > 0 && mapEntryExpressions.get(0).getValueExpression() instanceof MethodCallExpression) {\n                    MethodCallExpression innerCall = (MethodCallExpression) mapEntryExpressions.get(0).getValueExpression();\n                    if (innerCall.getArguments() instanceof ArgumentListExpression && ((ArgumentListExpression) innerCall.getArguments()).getExpressions().size() == 1 && ((ArgumentListExpression) innerCall.getArguments()).getExpression(0) instanceof ClosureExpression) {\n                        /* we have something like this:\n                         * name showPeople: \"/showPeople\" {\n                         *     controller = 'person'  // link support to the controller\n                         *     action = 'list'  // link support to the action\n                         * }\n                         */\n                        components = findLinkComponentsInClosure((ClosureExpression) ((ArgumentListExpression) innerCall.getArguments()).getExpression(0), offset);\n                    } else {\n                        components = null;\n                    }\n                } else {\n                    /* we have something like this:\n                     * \"/product\"(controller:\"product\", action:\"list\") // link support to the controller and the action\n                     */\n                    components = findLinkComponentsInCall((MapExpression) firstArg, offset);\n                    if (components != null && lastArg instanceof ClosureExpression) {\n                        /* we have something like this:\n                         * \"/product/$id\"(controller:\"product\"){\n                         *    action = [GET:\"show\", PUT:\"update\", DELETE:\"delete\", POST:\"save\"]\n                         *  }\n                         */\n                        finishComponents((ClosureExpression) lastArg, components, offset);\n                    }\n                }\n            } else {\n                components = null;\n            }\n            if (components != null) {\n                NameRegion controllerNameRegion = components[0];\n                NameRegion actionNameRegion = components[1];\n                NameRegion viewNameRegion = components[2];\n                // may as well link to all possibilities here\n                IHyperlink link = null;\n                if (controllerNameRegion != null) {\n                    IType type = findController(controllerNameRegion.name, unit.getJavaProject());\n                    if (type != null && type.exists()) {\n                        // action name should go first\n                        if (actionNameRegion != null) {\n                            IMember action = findAction(type, actionNameRegion.name);\n                            if (actionNameRegion.region != null && action != null && action.exists()) {\n                                link = new JavaElementHyperlink(actionNameRegion.region, action);\n                            }\n                        }\n                        if (controllerNameRegion.region != null) {\n                            link = new JavaElementHyperlink(controllerNameRegion.region, type);\n                        }\n                    }\n                }\n                if (viewNameRegion != null && viewNameRegion.region != null) {\n                    String viewName = viewNameRegion.name;\n                    // add a slash\n                    if (viewName.charAt(0) != '/') {\n                        viewName = \"/\" + viewName;\n                    }\n                    // add controller name\n                    if (controllerNameRegion != null && ! viewName.startsWith(\"/\" + controllerNameRegion.name + \"/\")) {\n                        viewName = \"/\" + controllerNameRegion.name + viewName;\n                    }\n                    // add prefix\n                    if (!viewName.endsWith(\".gsp\")) {\n                        viewName = viewName + \".gsp\";\n                    }\n                    IFile file = unit.getJavaProject().getProject().getFile(\"grails-app/views\" + viewName);\n                    if (file.exists()) {\n                        link = new WorkspaceFileHyperlink(viewNameRegion.region, file);\n                    }\n                }\n                return link;\n            }\n        }\n        return null;\n    }\n    /**\n     * find this kind of mapping:\n     * action = [GET:\"show\", PUT:\"update\", DELETE:\"delete\", POST:\"save\"]\n     * \n     * @param lastArg\n     * @param components\n     */\n    private void finishComponents(ClosureExpression lastArg,\n            NameRegion[] components, int offset) {\n        if (! (lastArg.getCode() instanceof BlockStatement)) {\n            return;\n        }\n        BlockStatement block = (BlockStatement) lastArg.getCode();\n        for (Statement s : block.getStatements()) {\n            if (s.getStart() < offset && s.getEnd() > offset) {\n                if (s instanceof ExpressionStatement) {\n                    Expression expr = ((ExpressionStatement) s).getExpression();\n                    if (expr instanceof BinaryExpression && ((BinaryExpression) expr).getOperation().getText().equals(\"=\")) {\n                        BinaryExpression bexpr = (BinaryExpression) expr;\n                        String mapping = null;\n                        if (bexpr.getLeftExpression().getText().equals(\"action\")) {\n                            mapping = \"action\";\n                        } else if (bexpr.getLeftExpression().getText().equals(\"view\")) {\n                            mapping = \"view\";\n                        }\n                        if (mapping != null && bexpr.getRightExpression() instanceof MapExpression) {\n                            MapExpression mexpr = (MapExpression) bexpr.getRightExpression();\n                            for (MapEntryExpression entry : mexpr.getMapEntryExpressions()) {\n                                Expression value = entry.getValueExpression();\n                                if (value.getStart() <= offset && value.getEnd() >= offset) {\n                                    NameRegion nr = new NameRegion(value.getText(), new Region(value.getStart(), value.getLength()));\n                                    if (mapping.equals(\"action\")) {\n                                        components[1] = nr;\n                                    } else {\n                                        components[2] = nr;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n<fim_suffix>    private NameRegion[] findLinkComponentsInClosure(ClosureExpression firstArg,\n            int offset) {\n        if (! (firstArg.getCode() instanceof BlockStatement)) {\n            return null;\n        }\n        BlockStatement code = (BlockStatement) firstArg.getCode();\n        if (code.getStatements() == null) {\n            return null;\n        }\n        NameRegion controllerName = null;\n        NameRegion actionName = null;\n        NameRegion viewName = null;\n        for (Statement state : code.getStatements()) {\n            if (state instanceof ExpressionStatement) {\n                if (((ExpressionStatement) state).getExpression() instanceof BinaryExpression) {\n                    BinaryExpression bexpr = (BinaryExpression) ((ExpressionStatement) state).getExpression();\n                    Expression left = bexpr.getLeftExpression();\n                    if (bexpr.getOperation().getText().equals(\"=\") && left instanceof VariableExpression) {\n                        Expression right = bexpr.getRightExpression();\n                        Region region;\n                        if (right.getStart() <= offset && right.getEnd() >= offset) {\n                            region = new Region(right.getStart(), right.getLength());\n                        } else {\n                            region = null;\n                        }\n                        String name = left.getText();\n                        if (name.equals(\"controller\")) {\n                            controllerName = new NameRegion(right.getText(), region);\n                        } else if (name.equals(\"action\")) {\n                            actionName = new NameRegion(right.getText(), region);\n                        } else if (name.equals(\"view\")) {\n                            viewName = new NameRegion(right.getText(), region);\n                        }\n                    }\n                }\n            }\n        }\n        return new NameRegion[] { controllerName, actionName, viewName };\n    }<fim_middle>// function below is long method\n"}