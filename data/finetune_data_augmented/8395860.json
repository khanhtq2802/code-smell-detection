{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.aws.ddbstream;\n\nimport java.util.Map;\nimport org.apache.camel.CamelContext;\nimport org.apache.camel.Endpoint;\n\nimport org.apache.camel.spi.Metadata;\nimport org.apache.camel.spi.annotations.Component;\nimport org.apache.camel.support.DefaultComponent;\nimport org.apache.camel.util.ObjectHelper;\n\n<fim_suffix>@Component(\"aws-ddbstream\")\npublic class DdbStreamComponent extends DefaultComponent {\n    \n    @Metadata\n    private String accessKey;\n    @Metadata\n    private String secretKey;\n    @Metadata\n    private String region;\n    @Metadata(label = \"advanced\")    \n    private DdbStreamConfiguration configuration;\n\n    public DdbStreamComponent() {\n        this(null);\n    }\n\n    public DdbStreamComponent(CamelContext context) {\n        super(context);\n        \n        this.configuration = new DdbStreamConfiguration();\n        registerExtension(new DdbStreamComponentVerifierExtension());\n    }\n\n    @Override\n    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {\n        DdbStreamConfiguration configuration = this.configuration.copy();\n        configuration.setTableName(remaining);\n        setProperties(configuration, parameters);\n        \n        if (remaining == null || remaining.trim().length() == 0) {\n            throw new IllegalArgumentException(\"Table name must be specified.\");\n        }\n        configuration.setTableName(remaining);\n        \n        if (ObjectHelper.isEmpty(configuration.getAccessKey())) {\n            setAccessKey(accessKey);\n        }\n        if (ObjectHelper.isEmpty(configuration.getSecretKey())) {\n            setSecretKey(secretKey);\n        }\n        if (ObjectHelper.isEmpty(configuration.getRegion())) {\n            setRegion(region);\n        }\n        if (configuration.getAmazonDynamoDbStreamsClient() == null && (configuration.getAccessKey() == null || configuration.getSecretKey() == null)) {\n            throw new IllegalArgumentException(\"amazonDDBStreamsClient or accessKey and secretKey must be specified\");\n        }\n        DdbStreamEndpoint endpoint = new DdbStreamEndpoint(uri, configuration, this);\n        setProperties(endpoint, parameters);\n        return endpoint;\n    }\n    \n    public DdbStreamConfiguration getConfiguration() {\n        return configuration;\n    }\n\n    /**\n     * The AWS DDB stream default configuration\n     */\n    public void setConfiguration(DdbStreamConfiguration configuration) {\n        this.configuration = configuration;\n    }\n\n    public String getAccessKey() {\n        return configuration.getAccessKey();\n    }\n\n    /**\n     * Amazon AWS Access Key\n     */\n    public void setAccessKey(String accessKey) {\n        configuration.setAccessKey(accessKey);\n    }\n\n    public String getSecretKey() {\n        return configuration.getSecretKey();\n    }\n\n    /**\n     * Amazon AWS Secret Key\n     */\n    public void setSecretKey(String secretKey) {\n        configuration.setSecretKey(secretKey);\n    }\n\n    public String getRegion() {\n        return configuration.getRegion();\n    }\n\n    /**\n     * Amazon AWS Region\n     */\n    public void setRegion(String region) {\n        configuration.setRegion(region);\n    }\n}<fim_middle>// class below is blob\n"}