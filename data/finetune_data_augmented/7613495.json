{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2006, 2014 Spring IDE Developers\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Spring IDE Developers - initial API and implementation\n *******************************************************************************/\npackage org.springframework.ide.eclipse.beans.ui.editor.util;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.eclipse.core.resources.IFile;\nimport org.eclipse.jdt.core.IType;\nimport org.eclipse.jdt.core.Signature;\nimport org.eclipse.swt.graphics.Image;\nimport org.eclipse.swt.widgets.Display;\nimport org.springframework.ide.eclipse.beans.core.internal.model.BeansModelUtils;\nimport org.springframework.ide.eclipse.beans.core.model.IBean;\nimport org.springframework.ide.eclipse.beans.ui.BeansUIImages;\nimport org.springframework.ide.eclipse.beans.ui.BeansUIPlugin;\nimport org.springframework.ide.eclipse.beans.ui.editor.contentassist.IContentAssistProposalRecorder;\nimport org.springframework.ide.eclipse.beans.ui.editor.outline.DelegatingLabelProvider;\nimport org.springframework.ide.eclipse.core.java.JdtUtils;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\n\n/**\n * Utility class for accepting bean matches and creating completion proposals for those bean matches.\n * @author Christian Dupuis\n * @author Torsten Juergeleit\n * @since 2.0\n */\n<fim_suffix>public class BeanReferenceSearchRequestor {\n\n\tpublic static final String LABEL_SEPARATOR = \" -------------------------------------------- \";\n\n\tpublic static final int TYPE_MATCHING_RELEVANCE = 20;\n\n\tpublic static final int RELEVANCE = 10;\n\n\tprotected Set<String> beans;\n\n\tprotected IContentAssistProposalRecorder recorder;\n\n\tprotected List<String> requiredTypes = null;\n\n\tprivate boolean insertedMatchingType = false;\n\t\n\tprivate boolean matchingTypeFound = false;\n\n\tpublic BeanReferenceSearchRequestor(IContentAssistProposalRecorder recorder) {\n\t\tthis(recorder, new ArrayList<String>());\n\t}\n\n\tpublic BeanReferenceSearchRequestor(IContentAssistProposalRecorder recorder, List<String> requiredTypes) {\n\t\tthis.recorder = recorder;\n\t\tthis.beans = new HashSet<String>();\n\t\tthis.requiredTypes = requiredTypes;\n\t}\n\n\tpublic void acceptSearchMatch(IBean bean, IFile file, String prefix) {\n\t\tif (bean.getElementName() != null && bean.getElementName().toLowerCase().startsWith(prefix.toLowerCase())) {\n\t\t\tString beanName = bean.getElementName();\n\t\t\tString replaceText = beanName;\n\t\t\tString fileName = bean.getElementResource().getProjectRelativePath().toString();\n\t\t\tString key = beanName + fileName;\n\t\t\tif (!beans.contains(key)) {\n\t\t\t\tStringBuffer buf = new StringBuffer();\n\t\t\t\tbuf.append(beanName);\n\t\t\t\tif (bean.getClassName() != null) {\n\t\t\t\t\tString className = bean.getClassName();\n\t\t\t\t\tbuf.append(\" [\");\n\t\t\t\t\tbuf.append(Signature.getSimpleName(className));\n\t\t\t\t\tbuf.append(\"]\");\n\t\t\t\t}\n\t\t\t\tif (bean.getParentName() != null) {\n\t\t\t\t\tbuf.append(\" <\");\n\t\t\t\t\tbuf.append(bean.getParentName());\n\t\t\t\t\tbuf.append(\">\");\n\t\t\t\t}\n\t\t\t\tbuf.append(\" - \");\n\t\t\t\tbuf.append(fileName);\n\t\t\t\tString displayText = buf.toString();\n\n\t\t\t\tImage image = null;\n\t\t\t\tif (Display.getCurrent() != null) {\n\t\t\t\t\timage = BeansUIPlugin.getLabelProvider().getImage(bean);\n\t\t\t\t}\n\n\t\t\t\tboolean matchesType = false;\n\t\t\t\tif (requiredTypes.size() > 0) {\n\t\t\t\t\tString className = BeansModelUtils.getBeanClass(bean, null);\n\t\t\t\t\tIType type = JdtUtils.getJavaType(file.getProject(), className);\n\t\t\t\t\tList<String> hierachyTypes = JdtUtils.getFlatListOfClassAndInterfaceNames(type, type);\n\t\t\t\t\tfor (String cn : hierachyTypes) {\n\t\t\t\t\t\tif (this.requiredTypes.contains(cn)) {\n\t\t\t\t\t\t\tmatchesType = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!insertedMatchingType && matchingTypeFound && !matchesType) {\n\t\t\t\t\trecorder.recordProposal(BeansUIImages.getImage(BeansUIImages.IMG_OBJS_CONTENT_ASSIST),\n\t\t\t\t\t\t\tTYPE_MATCHING_RELEVANCE - 1, LABEL_SEPARATOR, \"\");\n\t\t\t\t\tinsertedMatchingType = true;\n\t\t\t\t}\n\n\t\t\t\tif (matchesType) {\n\t\t\t\t\trecorder.recordProposal(image, TYPE_MATCHING_RELEVANCE, displayText, replaceText, null);\n\t\t\t\t\tmatchingTypeFound = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trecorder.recordProposal(image, RELEVANCE, displayText, replaceText, bean);\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\tbeans.add(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void acceptSearchMatch(String beanId, Node beanNode, IFile file, String prefix) {\n\t\tif (beanNode != null) {\n\t\t\tNamedNodeMap attributes = beanNode.getAttributes();\n\t\t\tif (beanId.toLowerCase().startsWith(prefix.toLowerCase())) {\n\t\t\t\tif (beanNode.getParentNode() != null) {\n\t\t\t\t\tString beanName = beanId;\n\t\t\t\t\tString replaceText = beanName;\n\t\t\t\t\tString fileName = file.getProjectRelativePath().toString();\n\t\t\t\t\tString key = beanName + fileName;\n\t\t\t\t\tif (!beans.contains(key)) {\n\t\t\t\t\t\tStringBuffer buf = new StringBuffer();\n\t\t\t\t\t\tbuf.append(beanName);\n\t\t\t\t\t\tif (attributes.getNamedItem(\"class\") != null) {\n\t\t\t\t\t\t\tString className = attributes.getNamedItem(\"class\").getNodeValue();\n\t\t\t\t\t\t\tbuf.append(\" [\");\n\t\t\t\t\t\t\tbuf.append(Signature.getSimpleName(className));\n\t\t\t\t\t\t\tbuf.append(\"]\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (attributes.getNamedItem(\"parent\") != null) {\n\t\t\t\t\t\t\tString parentName = attributes.getNamedItem(\"parent\").getNodeValue();\n\t\t\t\t\t\t\tbuf.append(\" <\");\n\t\t\t\t\t\t\tbuf.append(parentName);\n\t\t\t\t\t\t\tbuf.append(\">\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuf.append(\" - \");\n\t\t\t\t\t\tbuf.append(fileName);\n\t\t\t\t\t\tString displayText = buf.toString();\n\t\t\t\t\t\tImage image = null;\n\t\t\t\t\t\tif (Display.getCurrent() != null) {\n\t\t\t\t\t\t\timage = new DelegatingLabelProvider().getImage(beanNode);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tString className = BeansEditorUtils.getClassNameForBean(beanNode);\n\t\t\t\t\t\tboolean matchesType = false;\n\t\t\t\t\t\tif (requiredTypes.size() > 0) {\n\t\t\t\t\t\t\tIType type = JdtUtils.getJavaType(file.getProject(), className);\n\t\t\t\t\t\t\tList<String> hierachyTypes = JdtUtils.getFlatListOfClassAndInterfaceNames(type, type);\n\t\t\t\t\t\t\tfor (String cn : hierachyTypes) {\n\t\t\t\t\t\t\t\tif (this.requiredTypes.contains(cn)) {\n\t\t\t\t\t\t\t\t\tmatchesType = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (!insertedMatchingType && matchingTypeFound && !matchesType) {\n\t\t\t\t\t\t\trecorder.recordProposal(BeansUIImages.getImage(BeansUIImages.IMG_OBJS_CONTENT_ASSIST),\n\t\t\t\t\t\t\t\t\tTYPE_MATCHING_RELEVANCE - 1, LABEL_SEPARATOR, \"\");\n\t\t\t\t\t\t\tinsertedMatchingType = true;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (matchesType) {\n\t\t\t\t\t\t\trecorder.recordProposal(image, TYPE_MATCHING_RELEVANCE, displayText, replaceText, beanNode);\n\t\t\t\t\t\t\tmatchingTypeFound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\trecorder.recordProposal(image, RELEVANCE, displayText, replaceText, beanNode);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbeans.add(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}<fim_middle>// class below has no smell\n"}