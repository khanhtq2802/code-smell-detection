{"text": "<fim_prefix>\n<fim_suffix>public class Builder {\n\tpublic static boolean isForced(Map<?, ?> options) {\n\t\treturn Boolean.TRUE.equals(options.get(\"force\"));\n\t}\n\tprivate Properties options = new Properties();\n\tprivate BuilderExtension[] extensions = new BuilderExtension[0];\n\tprivate Logger logger = new NullLogger();\n\tprivate ConfigurationRegistry registry;\n\tprivate ConfigObject configObject = null;\n\tprivate boolean isIncremental = false;\n\tprivate boolean enabledMetadata = false;\n\tprivate File sourceDir = null;\n\t/**\n\t * The value is a String[] containing the relative paths of all of the build\n\t * files for a given sourceDir.\n\t */\n\tprivate final Map<File, String[]> buildFilesBySourceDir = new HashMap<>();\n\t/*[PR 118220] Incremental builder is not called when file is deleted in base library*/\n\tprivate final Map<File, List<String>> deleteFilesBySourceDir = new HashMap<>();\n\tprivate final Map<File, List<String>> buildResourcesBySourceDir = new HashMap<>();\n\tprivate int buildFileCount = 0;\n\tprivate int deleteFileCount = 0;\n\tprivate int builtFileCount = 0;\n\tprivate int buildResourcesCount = 0;\n\tprivate File outputDir = null;\n\tprivate boolean verdict = false;\n\tprivate boolean includeIfUnsure = false;\n\t/*[PR 117967] idea 491: Automatically create the jars required for test bootpath*/\n\tprivate boolean isTestsBootPath = false;\n\tprivate boolean noWarnIncludeIf = false;\n\tprivate boolean noWarnInvalidFlags = false;\n\tprivate boolean multipleSources = false;\n\tprivate boolean updateAllCopyrights = false;\n\t/**\n\t * J9 JCL Preprocessor builder constructor.  Initializes the needed extensions.\n\t */\n\tpublic Builder() {\n\t\taddExtension(new ExternalMessagesExtension());\n\t\taddExtension(new MacroExtension());\n\t\taddExtension(new JxeRulesExtension());\n\t\taddExtension(new EclipseMetadataExtension());\n\t\taddExtension(new JitAttributesExtension());\n\t\taddExtension(new TagExtension());\n\t}\n\t/**\n\t * Sets the preprocess options.\n\t *\n\t * @param \t\toptions\t\tthe preprocess options\n\t */\n\tpublic void setOptions(Properties options) {\n\t\tif (options != null) {\n\t\t\tthis.options.putAll(options);\n\t\t}\n\t\tthis.options = options;\n\t}\n\t/**\n\t * Returns the preprocess options for this builder.\n\t *\n\t * @return\t\tthe preprocess options\n\t */\n\tpublic Properties getOptions() {\n\t\treturn this.options;\n\t}\n\t/**\n\t * Adds an extension to the builder.\n\t *\n\t * @param \t\textension\tthe extension to add\n\t */\n\tpublic void addExtension(BuilderExtension extension) {\n\t\tif (extension == null) {\n\t\t\tthrow new NullPointerException();\n\t\t}\n\t\tBuilderExtension[] newExtensions = new BuilderExtension[extensions.length + 1];\n\t\tif (extensions.length > 0) {\n\t\t\tSystem.arraycopy(extensions, 0, newExtensions, 0, extensions.length);\n\t\t}\n\t\tnewExtensions[newExtensions.length - 1] = extension;\n\t\tthis.extensions = newExtensions;\n\t\textension.setBuilder(this);\n\t}\n\t/**\n\t * Returns the builder extensions/\n\t *\n\t * @return\t\tthe builder extensions\n\t */\n\tpublic BuilderExtension[] getExtensions() {\n\t\treturn extensions;\n\t}\n\t/**\n\t * Returns the logger associated with this builder.\n\t *\n\t * @return\t\tthe logger\n\t */\n\tpublic Logger getLogger() {\n\t\treturn logger;\n\t}\n\t/**\n\t * Sets this builder's logger.\n\t *\n\t * @param \t\tlogger\t\tthe new logger\n\t */\n\tpublic void setLogger(Logger logger) {\n\t\tthis.logger = logger;\n\t}\n\t/**\n\t * Sets whether the build is incremental or not.\n\t *\n\t * @param \t\tisIncremental\t<code>true</code> if the build is incremental, <code>false</code> otherwise\n\t */\n\tpublic void setIncremental(boolean isIncremental) {\n\t\tthis.isIncremental = isIncremental;\n\t}\n\t/**\n\t * Returns wheter or not this builder will only do an incremental build.\n\t *\n\t * @return\t\t<code>true</code> if the build is incremental, <code>false</code> otherwise\n\t */\n\tpublic boolean isIncremental() {\n\t\treturn this.isIncremental;\n\t}\n\t/**\n\t * Sets whether or not preprocessor metadata will be generated.\n\t *\n\t * @param \t\tenabledMetadata\t\t<code>true</code> if metadata is to be generated,\n\t * \t\t\t\t\t\t\t\t\t<code>false</code> otherwise\n\t */\n\tpublic void setMetadata(boolean enabledMetadata) {\n\t\tthis.enabledMetadata = enabledMetadata;\n\t}\n\t/**\n\t * Returns whether or not preprocessor metadata is enabled.\n\t *\n\t * @return\t\t<code>true</code> if metadata will be written, <code>false</code> otherwise\n\t */\n\tpublic boolean isMetadataEnabled() {\n\t\treturn this.enabledMetadata;\n\t}\n\t/**\n\t * Sets whether or not the preprocessor should include files that do not\n\t * have a INCLUDE-IF tag.\n\t *\n\t * @param \t\tinclude\t\t<code>true</code> if files with no INCLUDE-IF should\n\t * \t\t\t\t\t\t\tbe included, <code>false</code> otherwise\n\t */\n\tpublic void setIncludeIfUnsure(boolean include) {\n\t\tthis.includeIfUnsure = include;\n\t}\n\t/*[PR 117967] idea 491: Automatically create the jars required for test bootpath*/\n\t/**\n\t * Sets whether or not the preprocessor is running to generate Tests Boot Path project\n\t *\n\t * @param \tisTestsBoot\t\t<code>true</code> if preprocessor is running to generate Tests Boot Path project,\n\t * \t\t\t\t\t\t\t<code>false</code> otherwise\n\t */\n\tpublic void setIsTestsBoot(boolean isTestsBoot) {\n\t\tthis.isTestsBootPath = isTestsBoot;\n\t}\n\t/*[PR 117967] idea 491: Automatically create the jars required for test bootpath*/\n\t/**\n\t * Sets whether or not the preprocessor should give warningsor errors about the files that do not\n\t * have a INCLUDE-IF tag.\n\t *\n\t * @param \t\twarning\t\t<code>true</code> if files with no INCLUDE-IF should\n\t * \t\t\t\t\t\t\tbe marked with warning or error, <code>false</code> otherwise\n\t */\n\tpublic void setNoWarnIncludeIf(boolean warning) {\n\t\tthis.noWarnIncludeIf = warning;\n\t}\n\t/**\n\t * Sets the configuration to preprocess.\n\t *\n\t * @param \t\tconfig\t\tthe configuration to preprocess\n\t */\n\tpublic void setConfiguration(ConfigObject config) {\n\t\tif (config.isSet()) {\n\t\t\tSystem.err.println(\"Warning: Builder is using \" + config + \", a set, not a configuration.\");\n\t\t}\n\t\tthis.configObject = config;\n\t\tthis.registry = config.getRegistry();\n\t\tthis.outputDir = config.getOutputDir();\n\t}\n\t/**\n\t * Returns this builder's output directory.\n\t *\n\t * @return\t\tthe output directory\n\t */\n\tpublic File getOutputDir() {\n\t\treturn this.outputDir;\n\t}\n\t/**\n\t * Sets this builder's output directory.\n\t *\n\t * @param \t\toutputDir\tthe new output directory\n\t */\n\tpublic void setOutputDir(File outputDir) {\n\t\tif (outputDir == null) {\n\t\t\tthrow new NullPointerException();\n\t\t}\n\t\tthis.outputDir = outputDir;\n\t}\n\t/**\n\t * Returns this builder's configuration source directories.\n\t *\n\t * @return\t\tthe config's source dirs\n\t */\n\tpublic File getSourceDir() {\n\t\treturn this.sourceDir;\n\t}\n\t/**\n\t * Sets the proprocess job's source directory.\n\t *\n\t * @param \t\tsourceDir\tthe source directory to preprocess\n\t */\n\tpublic void setSourceDir(File sourceDir) {\n\t\tif (sourceDir == null) {\n\t\t\tthrow new NullPointerException();\n\t\t} else {\n\t\t\tthis.sourceDir = sourceDir;\n\t\t}\n\t}\n\t/**\n\t * Set builder aware of other sources (to be used by the ExternalMessagesExtension).\n\t *<fim_middle>// class below is blob and data class\n"}