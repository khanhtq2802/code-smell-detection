{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.pig.impl.logicalLayer.schema;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.pig.data.DataType;\nimport org.apache.pig.impl.logicalLayer.FrontendException;\n/**\n *\n * A utility class for simplify the schema creation, especially for bag and\n * tuple schema. Currently, it only support simple schema creation, nested tuple\n * and bag is not supported\n *\n */\npublic class SchemaUtil {\n    private static Set<Byte> SUPPORTED_TYPE_SET;\n    static {\n        SUPPORTED_TYPE_SET = new HashSet<Byte>();\n        SUPPORTED_TYPE_SET.add(DataType.INTEGER);\n        SUPPORTED_TYPE_SET.add(DataType.LONG);\n        SUPPORTED_TYPE_SET.add(DataType.CHARARRAY);\n        SUPPORTED_TYPE_SET.add(DataType.BOOLEAN);\n        SUPPORTED_TYPE_SET.add(DataType.BYTE);\n        SUPPORTED_TYPE_SET.add(DataType.BYTEARRAY);\n        SUPPORTED_TYPE_SET.add(DataType.DOUBLE);\n        SUPPORTED_TYPE_SET.add(DataType.FLOAT);\n        SUPPORTED_TYPE_SET.add(DataType.DATETIME);\n        SUPPORTED_TYPE_SET.add(DataType.MAP);\n        SUPPORTED_TYPE_SET.add(DataType.BIGINTEGER);\n        SUPPORTED_TYPE_SET.add(DataType.BIGDECIMAL);\n    }\n    /**\n     * Create a new tuple schema according the tuple name and two list: names of\n     * fields, types of fields\n     *\n     * @param tupleName\n     * @param fieldNames\n     * @param dataTypes\n     * @return tuple schema\n     * @throws FrontendException\n     */\n    public static Schema newTupleSchema(String tupleName,\n            List<String> fieldNames, List<Byte> dataTypes)\n            throws FrontendException {\n        checkParameters(fieldNames, dataTypes);\n        List<Schema.FieldSchema> tokenSchemas = new ArrayList<Schema.FieldSchema>();\n        for (int i = 0; i < fieldNames.size(); ++i) {\n            String name = fieldNames.get(i);\n            Byte type = dataTypes.get(i);\n            tokenSchemas.add(new Schema.FieldSchema(name, type));\n        }\n        Schema tupleSchema = new Schema(tokenSchemas);\n        Schema.FieldSchema tupleField = new Schema.FieldSchema(tupleName,\n                tupleSchema);\n        return new Schema(tupleField);\n    }\n    /**\n     * Create a new tuple schema according the tuple name and two arrays: names\n     * of fields, types of fields\n     *\n     * @param tupleName\n     * @param fieldNames\n     * @param dataTypes\n     * @return tuple schema\n     * @throws FrontendException\n     */\n    public static Schema newTupleSchema(String tupleName, String[] fieldNames,\n            Byte[] dataTypes) throws FrontendException {\n        return newTupleSchema(tupleName, Arrays.asList(fieldNames), Arrays\n                .asList(dataTypes));\n    }\n    /**\n     * Create a new tuple schema according the two list: names of fields, types\n     * of fields, the default tuple name is t.\n     *\n     * @param fieldNames\n     * @param dataTypes\n     * @return tuple schema\n     * @throws FrontendException\n     */\n    public static Schema newTupleSchema(List<String> fieldNames,\n            List<Byte> dataTypes) throws FrontendException {\n        return newTupleSchema(\"t\", fieldNames, dataTypes);\n    }\n    /**\n     * Create a new tuple schema according one list: types of fields, the\n     * default names of fields are f0,f1,f2..., and the tuple name is t.\n     *\n     * @param dataTypes\n     * @return tuple schema\n     * @throws FrontendException\n     */\n    public static Schema newTupleSchema(List<Byte> dataTypes)\n            throws FrontendException {\n        List<String> names = newNames(dataTypes.size());\n        return newTupleSchema(\"t\", names, dataTypes);\n    }\n    /**\n     * Create a new tuple schema according the two arrays: names of fields,\n     * types of fields, the default tuple name is t.\n     *\n     * @param names\n     * @param dataTypes\n     * @return tuple schema\n     * @throws FrontendException\n     */\n    public static Schema newTupleSchema(String[] names, Byte[] dataTypes)\n            throws FrontendException {\n        return newTupleSchema(\"t\", Arrays.asList(names), Arrays\n                .asList(dataTypes));\n    }\n    /**\n     * Create a new tuple schema according one array: types of fields, the\n     * default names of fields are f0,f1,f2..., and the tuple name is t.\n     *\n     * @param dataTypes\n     * @return tuple schema\n     * @throws FrontendException\n     */\n    public static Schema newTupleSchema(Byte[] dataTypes)\n            throws FrontendException {\n        return newTupleSchema(Arrays.asList(dataTypes));\n    }\n    private static List<String> newNames(int size) {\n        List<String> names = new ArrayList<String>();\n        for (int i = 0; i < size; ++i) {\n            names.add(\"f\" + i);\n        }\n        return names;\n    }\n    /**\n     * Create a bag schema according the bag name,tuple name and two list: name\n     * of fields, type of fields\n     *\n     * @param bagName\n     * @param tupleName\n     * @param fieldNames\n     * @param dataTypes\n     * @return bag schema\n     * @throws FrontendException\n     */\n<fim_suffix>    public static Schema newBagSchema(String bagName, String tupleName,\n            List<String> fieldNames, List<Byte> dataTypes)\n            throws FrontendException {\n        checkParameters(fieldNames, dataTypes);\n        Schema tupleSchema = newTupleSchema(tupleName, fieldNames, dataTypes);\n        Schema.FieldSchema bagField = new Schema.FieldSchema(bagName,\n                tupleSchema, DataType.BAG);\n        return new Schema(bagField);\n    }\n    public static Schema newBagSchema(String bagName, String tupleName,\n            String[] fieldNames, Byte[] dataTypes) throws FrontendException {\n        return newBagSchema(bagName, tupleName, Arrays.asList(fieldNames),\n                Arrays.asList(dataTypes));\n    }\n    /**\n     * Create a bag schema according two list: name of fields, type of fields,\n     * and the default bag name is b, the default tuple name is t.\n     *\n     * @param names\n     * @param dataTypes\n     * @return bag schema\n     * @throws FrontendException\n     */\n    public static Schema newBagSchema(List<String> names, List<Byte> dataTypes)\n            throws FrontendException {\n        checkParameters(names, dataTypes);\n        Schema tupleSchema = newTupleSchema(names, dataTypes);\n        Schema.FieldSchema bagField = new Schema.FieldSchema(\"b\", tupleSchema,\n                DataType.BAG);\n        return new Schema(bagField);\n    }\n    /**\n     * Create a new tuple schema according one list: types of fields, the\n     * default names of fields are f0,f1,f2..., and the tuple is t, the bag name\n     * is b.\n     *\n     * @param dataTypes\n     * @return bag schema\n     * @throws FrontendException\n     */\n    public static Schema newBagSchema(List<Byte> dataTypes)\n            throws FrontendException {\n        List<String> names = newNames(dataTypes.size());\n        return newBagSchema(names, dataTypes);\n    }\n    /**\n     * Create a new tuple schema according two arrays: names of field,types of\n     * fields. The default tuple name is t, and the bag is b.\n     *\n     * @param names\n     * @param dataTypes\n     * @return bag schema\n     * @throws FrontendException\n     */\n    public static Schema newBagSchema(String[] names, Byte[] dataTypes)\n            throws FrontendException {\n        return newBagSchema(Arrays.asList(names), Arrays.asList(dataTypes));\n    }\n    /**\n     * Create a new tuple schema according one array: the type of fields, the\n     * tuple name is t, and the bag name is b.\n     *\n     * @param dataTypes\n     * @return bag schema\n     * @throws FrontendException\n     */\n    public static Schema newBagSchema(Byte[] dataTypes)\n            throws FrontendException {\n        return newBagSchema(Arrays.asList(dataTypes));\n    }<fim_middle>// function below has no smell\n"}