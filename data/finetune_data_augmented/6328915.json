{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2017, 2018 Eurotech and/or its affiliates and others\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Eurotech - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.kapua.app.console.module.api.shared.model.session;\n\nimport org.eclipse.kapua.app.console.module.api.shared.model.KapuaBaseModel;\nimport org.eclipse.kapua.service.authorization.permission.Permission;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class GwtSession extends KapuaBaseModel implements Serializable {\n\n    private static final long serialVersionUID = -4511854889803351914L;\n\n    // Console info\n    private String version;\n    private String buildVersion;\n    private String buildNumber;\n\n    // User info\n    private String accountId;\n    private String accountPath;\n    private String rootAccountId;\n    private String rootAccountName;\n\n    private String selectedAccountId;\n    private String selectedAccountName;\n    private String selectedAccountPath;\n\n    private String userId;\n    private String userName;\n    private String userDisplayName;\n\n    private List<GwtSessionPermission> sessionPermissions = new ArrayList<GwtSessionPermission>();\n    private Map<GwtSessionPermission, Boolean> checkedPermissionsCache = new HashMap<GwtSessionPermission, Boolean>();\n\n    /**\n     * Is UI form dirty and needs save.\n     */\n    private boolean formDirty;\n\n    public GwtSession() {\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public void setVersion(String version) {\n        this.version = version;\n    }\n\n    public String getBuildVersion() {\n        return buildVersion;\n    }\n\n    public void setBuildVersion(String buildVersion) {\n        this.buildVersion = buildVersion;\n    }\n\n    public String getBuildNumber() {\n        return buildNumber;\n    }\n\n    public void setBuildNumber(String buildNumber) {\n        this.buildNumber = buildNumber;\n    }\n\n    public String getUserId() {\n        return userId;\n    }\n\n    public void setUserId(String userId) {\n        this.userId = userId;\n    }\n\n    public String getAccountId() {\n        return accountId;\n    }\n\n    public void setAccountId(String accountId) {\n        this.accountId = accountId;\n    }\n\n    public String getAccountPath() {\n        return accountPath;\n    }\n\n    public void setAccountPath(String accountPath) {\n        this.accountPath = accountPath;\n    }\n\n    public void setRootAccountId(String rootAccountId) {\n        this.rootAccountId = rootAccountId;\n    }\n\n    public String getRootAccountId() {\n        return rootAccountId;\n    }\n\n    public void setSelectedAccountId(String selectedAccountId) {\n        this.selectedAccountId = selectedAccountId;\n    }\n\n    public String getSelectedAccountId() {\n        return selectedAccountId;\n    }\n\n    public String getSelectedAccountPath() {\n        return selectedAccountPath;\n    }\n\n    public void setSelectedAccountPath(String selectedAccountPath) {\n        this.selectedAccountPath = selectedAccountPath;\n    }\n\n<fim_suffix>    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public String getUserDisplayName() {\n        return userDisplayName;\n    }\n\n    public void setUserDisplayName(String userDisplayName) {\n        this.userDisplayName = userDisplayName;\n    }\n\n    public String getRootAccountName() {\n        return rootAccountName;\n    }\n\n    public void setRootAccountName(String rootAccountName) {\n        this.rootAccountName = rootAccountName;\n    }\n\n    public String getSelectedAccountName() {\n        return selectedAccountName;\n    }\n\n    public void setSelectedAccountName(String selectedAccountName) {\n        this.selectedAccountName = selectedAccountName;\n    }\n\n    public List<GwtSessionPermission> getSessionPermissions() {\n        if (sessionPermissions == null) {\n            sessionPermissions = new ArrayList<GwtSessionPermission>();\n        }\n\n        return sessionPermissions;\n    }\n\n    public void setSessionPermissions(List<GwtSessionPermission> sessionPermissions) {\n        this.sessionPermissions = sessionPermissions;\n    }\n\n    public void addSessionPermission(GwtSessionPermission permission) {\n        getSessionPermissions().add(permission);\n    }\n\n    /**\n     * Checks that the current {@link GwtSession} has the given session.\n     * This methods uses {@link #hasPermission(GwtSessionPermission)} instantiating the actual {@link GwtSessionPermission}.\n     *\n     * @param domain      The domain to check\n     * @param action      The {@link GwtSessionPermissionAction} to check\n     * @param targetScope The {@link GwtSessionPermissionScope} to check\n     * @return {@code true} if the current {@link GwtSession} has the permission, {@false} otherwise\n     * @since 1.0.0\n     */\n    public boolean hasPermission(String domain, GwtSessionPermissionAction action, GwtSessionPermissionScope targetScope) {\n        return hasPermission(new GwtSessionPermission(domain, action, targetScope));\n    }\n\n    /**\n     * Checks that the current {@link GwtSession} has the given {@link GwtSessionPermission}.\n     * <p>\n     * This check is done simulating the permission check performed by the {@link org.eclipse.kapua.service.authorization.AuthorizationService#isPermitted(Permission)}.\n     * This does not introduces any security risk, since it will only allow to see/have access to certain elements of the UI while service access check is still performed on each call.\n     * <p>\n     * After the check, the result is cached to allow faster check for subsequent check for the same permission.\n     * </p>\n     *\n     * @param permissionToCheck The {@link GwtSessionPermission} to check\n     * @return {@code true} if the current {@link GwtSession} has the permission, {@false} otherwise\n     * @since 1.0.0\n     */\n    public boolean hasPermission(GwtSessionPermission permissionToCheck) {\n        // Check cache\n        Boolean cachedResult = checkedPermissionsCache.get(permissionToCheck);\n        if (cachedResult != null) {\n            return cachedResult.booleanValue();\n        }\n\n        // Check permission\n        boolean permitted = isPermitted(permissionToCheck);\n\n        // Set cached value\n        checkedPermissionsCache.put(permissionToCheck, permitted);\n\n        // Return it\n        return permitted;\n    }\n\n    /**\n     * Is UI form dirty and needs confirmation to switch menu.\n     *\n     * @return true if user needs to confirm menu change.\n     */\n    public boolean isFormDirty() {\n        return formDirty;\n    }\n\n    /**\n     * Set user interface into dirty state.\n     *\n     * @param formDirty true if user will need to confirm menu change.\n     */\n    public void setFormDirty(boolean formDirty) {\n        this.formDirty = formDirty;\n    }\n\n    /**\n     * This methods simulates the check that is performed by the {@link org.eclipse.kapua.service.authorization.AuthorizationService#isPermitted(Permission)}.\n     * {@link Permission#getForwardable()} property is supported in a different way, but produces the same results.\n     *\n     * @param permissionToCheck The {@link GwtSessionPermission} to check\n     * @return {@code true} if the current {@link GwtSession} has the permission, {@false} otherwise\n     * @since 1.0.0\n     */\n    private boolean isPermitted(GwtSessionPermission permissionToCheck) {\n\n        for (GwtSessionPermission gsp : getSessionPermissions()) {\n            if (gsp.getDomain() == null || gsp.getDomain().equals(permissionToCheck.getDomain())) {\n                if (gsp.getAction() == null || gsp.getAction().equals(permissionToCheck.getAction())) {\n\n                    GwtSessionPermissionScope permissionToCheckScope = permissionToCheck.getPermissionScope();\n\n                    boolean check = false;\n                    switch (gsp.getPermissionScope()) {\n                    case ALL:\n                        check = true;\n                        break;\n                    case CHILDREN:\n                        check = (GwtSessionPermissionScope.CHILDREN.equals(permissionToCheckScope) ||\n                                GwtSessionPermissionScope.SELF.equals(permissionToCheckScope));\n                        break;\n                    case SELF:\n                        check = GwtSessionPermissionScope.SELF.equals(permissionToCheckScope);\n                        break;\n                    }\n\n                    if (check) {\n                        return check;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n}<fim_middle>// function below has no smell\n"}