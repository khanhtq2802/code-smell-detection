{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License. \n *  \n */\npackage org.apache.directory.api.ldap.model.schema.syntaxCheckers;\n\n\nimport org.apache.directory.api.i18n.I18n;\nimport org.apache.directory.api.ldap.model.constants.SchemaConstants;\nimport org.apache.directory.api.ldap.model.schema.SyntaxChecker;\nimport org.apache.directory.api.util.Chars;\nimport org.apache.directory.api.util.Strings;\n\n\n/**\n * A SyntaxChecker which verifies that a value is a Boolean according to RFC 4517.\n * <br>\n * From RFC 4512 &amp; RFC 4517 :\n * <pre>\n * BitString    = SQUOTE *binary-digit SQUOTE \"B\"\n * binary-digit = \"0\" / \"1\"\n * SQUOTE       = %x27                           ; hyphen (\"'\")\n * </pre>\n *\n * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n */\n@SuppressWarnings(\"serial\")\npublic final class BitStringSyntaxChecker extends SyntaxChecker\n{\n    /**\n     * A static instance of BitStringSyntaxChecker\n     */\n    public static final BitStringSyntaxChecker INSTANCE = new BitStringSyntaxChecker( SchemaConstants.BIT_STRING_SYNTAX );\n\n    /**\n     * A static Builder for this class\n     */\n<fim_suffix>    public static final class Builder extends SCBuilder<BitStringSyntaxChecker>\n    {\n        /**\n         * The Builder constructor\n         */\n        private Builder()\n        {\n            super( SchemaConstants.BIT_STRING_SYNTAX );\n        }\n        \n        \n        /**\n         * Create a new instance of BitStringSyntaxChecker\n         * @return A new instance of BitStringSyntaxChecker\n         */\n        @Override\n        public BitStringSyntaxChecker build()\n        {\n            return new BitStringSyntaxChecker( oid );\n        }\n    }\n\n    \n    /**\n     * Creates a new instance of BitStringSyntaxChecker.\n     *\n     * @param oid The OID to use for this SyntaxChecker\n     */\n    private BitStringSyntaxChecker( String oid )\n    {\n        super( oid );\n    }\n\n\n    /**\n     * @return An instance of the Builder for this class\n     */\n    public static Builder builder()\n    {\n        return new Builder();\n    }\n\n\n    /**\n     * A shared and static method used to check that the string is a BitString.\n     * A BitString is a string of bits, between quotes and followed by a 'B' :\n     * \n     * '01010110'B for instance\n     * \n     * @param strValue The string to check\n     * @return <code>true</code> if the string is a BitString\n     */\n    public static boolean isValid( String strValue )\n    {\n        if ( strValue.length() == 0 )\n        {\n            if ( LOG.isDebugEnabled() )\n            {\n                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, strValue ) );\n            }\n            \n            return false;\n        }\n\n        int pos = 0;\n\n        // Check that the String respect the syntax : ' ([01]+) ' B\n        if ( !Strings.isCharASCII( strValue, pos++, '\\'' ) )\n        {\n            if ( LOG.isDebugEnabled() )\n            {\n                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, strValue ) );\n            }\n            \n            return false;\n        }\n\n        // We must have at least one bit\n        if ( !Chars.isBit( strValue, pos++ ) )\n        {\n            if ( LOG.isDebugEnabled() )\n            {\n                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, strValue ) );\n            }\n            \n            return false;\n        }\n\n        while ( Chars.isBit( strValue, pos ) )\n        {\n            // Loop until we get a char which is not a 0 or a 1\n            pos++;\n        }\n\n        // Now, we must have a simple quote \n        if ( !Strings.isCharASCII( strValue, pos++, '\\'' ) )\n        {\n            if ( LOG.isDebugEnabled() )\n            {\n                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, strValue ) );\n            }\n            \n            return false;\n        }\n\n        // followed by a 'B'\n        if ( !Strings.isCharASCII( strValue, pos, 'B' ) )\n        {\n            if ( LOG.isDebugEnabled() )\n            {\n                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, strValue ) );\n            }\n            \n            return false;\n        }\n\n        if ( LOG.isDebugEnabled() )\n        {\n            LOG.debug( I18n.msg( I18n.MSG_13701_SYNTAX_VALID, strValue ) );\n        }\n        \n        return true;\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isValidSyntax( Object value )\n    {\n        String strValue;\n\n        if ( value == null )\n        {\n            if ( LOG.isDebugEnabled() )\n            {\n                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, \"null\" ) );\n            }\n            \n            return false;\n        }\n\n        if ( value instanceof String )\n        {\n            strValue = ( String ) value;\n        }\n        else if ( value instanceof byte[] )\n        {\n            strValue = Strings.utf8ToString( ( byte[] ) value );\n        }\n        else\n        {\n            strValue = value.toString();\n        }\n\n        return isValid( strValue );\n    }\n}<fim_middle>// class below has no smell\n"}