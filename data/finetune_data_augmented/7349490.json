{"text": "<fim_prefix>import com.microsoft.tfs.client.common.ui.framework.helper.UIHelpers;\nimport com.microsoft.tfs.client.common.ui.helpers.TFSTeamProjectCollectionFormatter;\nimport com.microsoft.tfs.client.common.ui.helpers.UIConnectionPersistence;\nimport com.microsoft.tfs.client.common.ui.teamexplorer.helpers.PendingChangesHelpers;\nimport com.microsoft.tfs.core.clients.versioncontrol.events.WorkspaceCreatedListener;\nimport com.microsoft.tfs.core.clients.versioncontrol.events.WorkspaceDeletedListener;\nimport com.microsoft.tfs.core.clients.versioncontrol.events.WorkspaceEvent;\nimport com.microsoft.tfs.core.clients.versioncontrol.events.WorkspaceUpdatedEvent;\nimport com.microsoft.tfs.core.clients.versioncontrol.events.WorkspaceUpdatedListener;\nimport com.microsoft.tfs.core.clients.versioncontrol.soapextensions.Workspace;\nimport com.microsoft.tfs.core.clients.versioncontrol.specs.WorkspaceSpec;\nimport com.microsoft.tfs.core.exceptions.TECoreException;\nimport com.microsoft.tfs.util.Check;\npublic class WorkspaceToolbarPulldownAction extends ToolbarPulldownAction implements IDisposable {\n    private final Shell shell;\n    private final IAction manageWorkspacesAction;\n    private final WorkspaceComboConnectionListener connectionListener = new WorkspaceComboConnectionListener();\n    private final WorkspaceComboWorkspaceListener workspaceListener = new WorkspaceComboWorkspaceListener();\n    private boolean disposed = false;\n    /* Note: all fields below must only be accessed on the UI thread. */\n    private Job updateJob = null;\n    private Workspace[] workspaces;\n    private Workspace currentWorkspace;\n    public WorkspaceToolbarPulldownAction(final Shell shell) {\n        super(true);\n        this.shell = shell;\n        // Create the manage workspace action.\n        manageWorkspacesAction = new Action() {\n            @Override\n            public void run() {\n                manageWorkspaces();\n            }\n        };\n        manageWorkspacesAction.setText(Messages.getString(\"WorkspaceToolbarPulldownAction.ManageWorkspacesActionText\")); //$NON-NLS-1$\n        final TFSServer server =\n            TFSCommonUIClientPlugin.getDefault().getProductPlugin().getServerManager().getDefaultServer();\n        if (server != null) {\n            server.getConnection().getVersionControlClient().getEventEngine().addWorkspaceCreatedListener(\n                workspaceListener);\n            server.getConnection().getVersionControlClient().getEventEngine().addWorkspaceDeletedListener(\n                workspaceListener);\n            server.getConnection().getVersionControlClient().getEventEngine().addWorkspaceUpdatedListener(\n                workspaceListener);\n        }\n        TFSCommonUIClientPlugin.getDefault().getProductPlugin().getServerManager().addListener(connectionListener);\n        TFSCommonUIClientPlugin.getDefault().getProductPlugin().getRepositoryManager().addListener(connectionListener);\n        repopulate();\n    }\n    @Override\n    public void dispose() {\n        TFSCommonUIClientPlugin.getDefault().getProductPlugin().getServerManager().removeListener(connectionListener);\n        TFSCommonUIClientPlugin.getDefault().getProductPlugin().getRepositoryManager().removeListener(\n            connectionListener);\n        disposed = true;\n    }\n    public void setCurrentWorkspace(final Workspace workspace) {\n        currentWorkspace = workspace;\n        final String tooltipFormat =\n            Messages.getString(\"WorkspaceToolbarPulldownAction.WorkspaceButtonTooltipTextFormat\"); //$NON-NLS-1$\n        if (workspace != null) {\n            setText(workspace.getName());\n            setToolTipText(MessageFormat.format(tooltipFormat, workspace.getName()));\n        } else {\n            setText(Messages.getString(\"WorkspaceToolbarPulldownAction.NotConnectedMessage\")); //$NON-NLS-1$\n            setToolTipText(\n                MessageFormat.format(\n                    tooltipFormat,\n                    Messages.getString(\"WorkspaceToolbarPulldownAction.NotConnectedMessage\"))); //$NON-NLS-1$\n        }\n    }\n    @Override\n    protected Menu getSubActionMenu(final Control parent) {\n        for (final IAction action : getSubActions()) {\n            if (currentWorkspace != null && action instanceof SwitchToWorkspaceAction) {\n                final SwitchToWorkspaceAction switchAction = (SwitchToWorkspaceAction) action;\n                final boolean match =\n                    Workspace.matchName(switchAction.getWorkspace().getName(), currentWorkspace.getName());\n                action.setChecked(match);\n            }\n        }\n        return super.getSubActionMenu(parent);\n    }\n    private void manageWorkspaces() {\n        PendingChangesHelpers.manageWorkspaces(shell);\n        repopulate();\n    }\n    private void switchWorkspace(final Workspace workspace) {\n        final RepositoryManager repositoryManager =\n            TFSCommonUIClientPlugin.getDefault().getProductPlugin().getRepositoryManager();\n        final ConnectionConflictHandler connectionConflictHandler =\n            TFSCommonUIClientPlugin.getDefault().getProductPlugin().getConnectionConflictHandler();\n        /*\n         * Ensure the workspace exists. It could have been deleted by another\n         * program since it was added to this combo box.\n         */\n        try {\n            TFSCommonUIClientPlugin.getDefault().getProductPlugin().getServerManager().getDefaultServer().getConnection().getVersionControlClient().queryWorkspace(\n                workspace.getName(),\n                workspace.getOwnerName());\n        } catch (final TECoreException e) {\n            final String message =\n                MessageFormat.format(\n                    Messages.getString(\"WorkspaceToolbarPulldownAction.WorkspaceDoesNotExistFormat\"), //$NON-NLS-1$\n                    new WorkspaceSpec(workspace.getOwnerName(), workspace.getOwnerDisplayName()).toString());\n            ErrorDialog.openError(\n                shell,\n                Messages.getString(\"WorkspaceToolbarPulldownAction.WorkspaceNotFound\"), //$NON-NLS-1$\n                null,\n                new Status(Status.WARNING, TFSCommonUIClientPlugin.PLUGIN_ID, 0, message, null));\n            repopulate();\n            return;\n        }\n        /*\n         * Switch to the selected workspace.\n         */\n        try {\n            repositoryManager.getOrCreateRepository(workspace);\n        } catch (final RepositoryConflictException conflictException) {\n            /*\n             * Another connection to a server already exists: allow the product\n             * plugin's connection conflict handler to retry this.\n             */\n            if (connectionConflictHandler.resolveRepositoryConflict()) {\n                /* Retry */\n                try {\n                    repositoryManager.getOrCreateRepository(workspace);\n                } catch (final RepositoryConflictException f) {\n                    connectionConflictHandler.notifyRepositoryConflict();\n                }\n            }\n        }\n        UIConnectionPersistence.getInstance().setLastUsedWorkspace(workspace);\n    }\n    private void repopulate() {\n        if (disposed) {\n            return;\n        }\n        final TFSServer server =\n            TFSCommonUIClientPlugin.getDefault().getProductPlugin().getServerManager().getDefaultServer();\n        if (server == null) {\n            removeAll();\n        } else {\n            removeAll();\n            updateJob = new UpdateWorkspaceComboJob(server);\n            updateJob.schedule();\n        }\n    }\n    private class UpdateWorkspaceComboJob extends Job {\n        private final TFSServer server;\n        public UpdateWorkspaceComboJob(final TFSServer server) {\n            super(MessageFormat.format(\n                Messages.getString(\"UpdateWorkspaceComboJob.NameFormat\"), //$NON-NLS-1$\n                TFSTeamProjectCollectionFormatter.getLabel(server.getConnection())));\n            Check.notNull(server, \"server\"); //$NON-NLS-1$\n            this.server = server;\n        }\n        @Override\n        protected IStatus run(final IProgressMonitor monitor) {\n            final QueryLocalWorkspacesCommand queryCommand = new QueryLocalWorkspacesCommand(server.getConnection());\n            final IStatus queryStatus = new CommandExecutor().execute(queryCommand);\n            if (!queryStatus.isOK()) {\n                return queryStatus;\n            }\n            final Workspace[] workspaces = queryCommand.getWorkspaces();\n            Arrays.sort(workspaces, new Comparator<Workspace>() {\n                @Override\n                public int compare(final Workspace workspace0, final Workspace workspace1) {\n                    return String.CASE_INSENSITIVE_ORDER.compare(workspace0.getName(), workspace1.getName());\n                }\n            });\n            UIHelpers.runOnUIThread(true, new Runnable() {\n                @Override\n                public void run() {\n                    /*\n                     * Another connection could have triggered this repopulate -\n                     * make sure that we're still the most recent job running.\n                     * If not, defer this update.\n                     */\n                    if (updateJob != UpdateWorkspaceComboJob.this) {\n                        return;\n                    }\n                    WorkspaceToolbarPulldownAction.this.workspaces = workspaces;\n                    final ToolbarPulldownAction pulldownAction = WorkspaceToolbarPulldownAction.this;\n                    pulldownAction.removeAll();\n                    for (final Workspace workspace : workspaces) {\n                        final SwitchToWorkspaceAction subAction = new SwitchToWorkspaceAction(workspace);\n                        pulldownAction.addSubAction(subAction);\n                    }\n                    pulldownAction.addSubAction(manageWorkspacesAction);\n                }\n            });\n            return Status.OK_STATUS;\n        }\n    }\n<fim_suffix>    private final class SwitchToWorkspaceAction extends Action {\n        private final Workspace workspace;\n        public SwitchToWorkspaceAction(final Workspace workspace) {\n            super(workspace.getName(), IAction.AS_CHECK_BOX);\n            this.workspace = workspace;\n        }\n        public Workspace getWorkspace() {\n            return workspace;\n        }\n        @Override\n        public void run() {\n            switchWorkspace(workspace);\n        }\n    }<fim_middle>// class below has no smell\n"}