{"text": "<fim_prefix> * don't expect to be able to parse everything.\n * It can generate simple models.\n * @see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html\">Example S3 Policies</a>\n * @see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/api-permissions-reference.html\">Dynamno DB Permissions</a>\n */\n@InterfaceAudience.LimitedPrivate(\"Tests\")\n@InterfaceStability.Unstable\npublic class RoleModel {\n  public static final String VERSION = \"2012-10-17\";\n  public static final String BUCKET_RESOURCE_F = \"arn:aws:s3:::%s/%s\";\n  private static final AtomicLong SID_COUNTER = new AtomicLong(0);\n  private final JsonSerialization<Policy> serialization =\n      new JsonSerialization<>(Policy.class, false, true);\n  public RoleModel() {\n    ObjectMapper mapper = serialization.getMapper();\n    mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);\n  }\n  public String toJson(Policy policy) throws JsonProcessingException {\n    return serialization.toJson(policy);\n  }\n  /**\n   * Statement ID factory.\n   * @return a statement ID unique for this JVM's life.\n   */\n  public static String newSid() {\n    SID_COUNTER.incrementAndGet();\n    return SID_COUNTER.toString();\n  }\n  /**\n   * Map a bool to an effect.\n   * @param allowed is the statement to allow actions?\n   * @return the appropriate effect.\n   */\n  public static Effects effect(final boolean allowed) {\n    return allowed ? Effects.Allow : Effects.Deny;\n  }\n  /**\n   * Create a resource.\n   * @param bucket bucket\n   * @param key key\n   * @param addWildcard add a * to the tail of the key?\n   * @return a resource for a statement.\n   */\n  @SuppressWarnings(\"StringConcatenationMissingWhitespace\")\n  public static String resource(String bucket, String key,\n      boolean addWildcard) {\n    return String.format(BUCKET_RESOURCE_F, bucket,\n        key + (addWildcard ? \"*\" : \"\"));\n  }\n  /**\n   * Given a path, return the S3 resource to it.\n   * If {@code isDirectory} is true, a \"/\" is added to the path.\n   * This is critical when adding wildcard permissions under\n   * a directory, and also needed when locking down dir-as-file\n   * and dir-as-directory-marker access.\n   * @param path a path\n   * @param isDirectory is this a directory?\n   * @param addWildcard add a * to the tail of the key?\n   * @return a resource for a statement.\n   */\n  public static String resource(Path path,\n      final boolean isDirectory,\n      boolean addWildcard) {\n    String key = pathToKey(path);\n    if (isDirectory && !key.isEmpty()) {\n      key = key + \"/\";\n    }\n    return resource(path.toUri().getHost(), key, addWildcard);\n  }\n  /**\n   * Given a directory path, return the S3 resource to it.\n   * @param path a path\n   * @return a resource for a statement.\n   */\n  public static String[] directory(Path path) {\n    String host = path.toUri().getHost();\n    String key = pathToKey(path);\n    if (!key.isEmpty()) {\n      return new String[] {\n          resource(host, key + \"/\", true),\n          resource(host, key, false),\n          resource(host, key + \"/\", false),\n      };\n    } else {\n      return new String[]{\n          resource(host, key, true),\n      };\n    }\n  }\n  /**\n   * Variant of {@link S3AFileSystem#pathToKey(Path)} which doesn't care\n   * about working directories, so can be static and stateless.\n   * @param path path to map\n   * @return key or \"\"\n   */\n  public static String pathToKey(Path path) {\n    if (path.toUri().getScheme() != null && path.toUri().getPath().isEmpty()) {\n      return \"\";\n    }\n    return path.toUri().getPath().substring(1);\n  }\n  /**\n   * Create a statement.\n   * @param allow allow or deny\n   * @param scope scope\n   * @param actions actions\n   * @return the formatted json statement\n   */\n  public static Statement statement(boolean allow,\n      String scope,\n      String... actions) {\n    return new Statement(RoleModel.effect(allow))\n        .addActions(actions)\n        .addResources(scope);\n  }\n  /**\n   * Create a statement.\n   * @param allow allow or deny\n   * @param scope scope\n   * @param actions actions\n   * @return the formatted json statement\n   */\n  public static Statement statement(boolean allow,\n      String scope,\n      Collection<String> actions) {\n    return new Statement(RoleModel.effect(allow))\n        .addActions(actions)\n        .addResources(scope);\n  }\n  /**\n   * Create a statement.\n   * If {@code isDirectory} is true, a \"/\" is added to the path.\n   * This is critical when adding wildcard permissions under\n   * a directory, and also needed when locking down dir-as-file\n   * and dir-as-directory-marker access.\n   * @param allow allow or deny\n   * @param path path\n   * @param isDirectory is this a directory?\n   * @param wildcards add a * to the tail of the key?\n   * @param actions action\n   * @return the formatted json statement\n   */\n  public static Statement statement(\n      final boolean allow,\n      final Path path,\n      final boolean isDirectory,\n      final boolean wildcards,\n      final String... actions) {\n    return new Statement(RoleModel.effect(allow))\n        .addActions(actions)\n        .addResources(resource(path, isDirectory, wildcards));\n  }\n  /**\n   * Create a statement.\n   * If {@code isDirectory} is true, a \"/\" is added to the path.\n   * This is critical when adding wildcard permissions under\n   * a directory, and also needed when locking down dir-as-file\n   * and dir-as-directory-marker access.\n   * @param allow allow or deny\n   * @param path path\n   * @param isDirectory is this a directory?\n   * @param wildcards add a * to the tail of the key?\n   * @param actions action\n   * @return the formatted json statement\n   */\n  public static Statement statement(\n      final boolean allow,\n      final Path path,\n      final boolean isDirectory,\n      final boolean wildcards,\n      final Collection<String> actions) {\n    return new Statement(RoleModel.effect(allow))\n        .addActions(actions)\n        .addResources(resource(path, isDirectory, wildcards));\n  }\n  /**\n   * From a set of statements, create a policy.\n   * @param statements statements\n   * @return the policy\n   */\n  public static Policy policy(Statement... statements) {\n    return new Policy(statements);\n  }\n  /**\n   * From a set of statements, create a policy.\n   * @param statements statements\n   * @return the policy\n   */\n  public static Policy policy(final List<RoleModel.Statement> statements) {\n    return new Policy(statements);\n  }\n  /**\n   * Effect options.\n   */\n  public enum Effects {\n    Allow,\n    Deny\n  }\n  /**\n   * Any element in a role.\n   */\n  public static abstract class RoleElt {\n    protected RoleElt() {\n    }\n    /**\n     * validation operation.\n     */\n    public void validate() {\n    }\n  }\n  /**\n   * A single statement.\n   */\n<fim_suffix>  public static class Statement extends RoleElt {\n    @JsonProperty(\"Sid\")\n    public String sid = newSid();\n    /**\n     * Default effect is Deny; forces callers to switch on Allow.\n     */\n    @JsonProperty(\"Effect\")\n    public Effects effect;\n    @JsonProperty(\"Action\")\n    public List<String> action = new ArrayList<>(1);\n    @JsonProperty(\"Resource\")\n    public List<String> resource = new ArrayList<>(1);\n    public Statement(final Effects effect) {\n      this.effect = effect;\n    }\n    @Override\n    public void validate() {\n      requireNonNull(sid, \"Sid\");\n      requireNonNull(effect, \"Effect\");\n      checkState(!(action.isEmpty()), \"Empty Action\");\n      checkState(!(resource.isEmpty()), \"Empty Resource\");\n    }\n    public Statement setAllowed(boolean f) {\n      effect = effect(f);\n      return this;\n    }\n    public Statement addActions(String... actions) {\n      Collections.addAll(action, actions);\n      return this;\n    }\n    public Statement addActions(Collection<String> actions) {\n      action.addAll(actions);\n      return this;\n    }\n    public Statement addResources(String... resources) {\n      Collections.addAll(resource, resources);\n      return this;\n    }\n    /**\n     * Add a list of resources.\n     * @param resources resource list\n     * @return this statement.\n     */\n    public Statement addResources(Collection<String> resources) {\n      resource.addAll(resources);\n      return this;\n    }\n  }<fim_middle>// class below is data class\n"}