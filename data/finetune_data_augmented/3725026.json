{"text": "<fim_prefix>package com.alibaba.jvm.sandbox.core.enhance.weaver;\nimport com.alibaba.jvm.sandbox.api.event.*;\nimport com.alibaba.jvm.sandbox.core.util.UnsafeUtils;\nimport sun.misc.Unsafe;\nimport static com.alibaba.jvm.sandbox.core.util.SandboxReflectUtils.unCaughtSetClassDeclaredJavaFieldValue;\n/**\n * \u5355\u4f8b\u4e8b\u4ef6\u5de5\u5382\n */\nclass SingleEventFactory {\n    private static final int ILLEGAL_PROCESS_ID = -1;\n    private static final int ILLEGAL_INVOKE_ID = -1;\n    private static final Unsafe unsafe;\n    private static final long processIdFieldInInvokeEventOffset;\n    private static final long invokeIdFieldInInvokeEventOffset;\n    private static final long javaClassLoaderFieldInBeforeEventOffset;\n    private static final long javaClassNameFieldInBeforeEventOffset;\n    private static final long javaMethodNameFieldInBeforeEventOffset;\n    private static final long javaMethodDescFieldInBeforeEventOffset;\n    private static final long targetFieldInBeforeEventOffset;\n    private static final long argumentArrayFieldInBeforeEventOffset;\n    private static final long objectFieldInReturnEventOffset;\n    private static final long throwableFieldInThrowsEventOffset;\n    private static final long lineNumberFieldInLineEventOffset;\n    private static final long lineNumberFieldInCallBeforeEventOffset;\n    private static final long ownerFieldInCallBeforeEventOffset;\n    private static final long nameFieldInCallBeforeEventOffset;\n    private static final long descFieldInCallBeforeEventOffset;\n    private static final long throwExceptionFieldInCallThrowsEventOffset;\n    static {\n        try {\n            unsafe = UnsafeUtils.getUnsafe();\n            processIdFieldInInvokeEventOffset = unsafe.objectFieldOffset(InvokeEvent.class.getDeclaredField(\"processId\"));\n            invokeIdFieldInInvokeEventOffset = unsafe.objectFieldOffset(InvokeEvent.class.getDeclaredField(\"invokeId\"));\n            javaClassLoaderFieldInBeforeEventOffset = unsafe.objectFieldOffset(BeforeEvent.class.getDeclaredField(\"javaClassLoader\"));\n            javaClassNameFieldInBeforeEventOffset = unsafe.objectFieldOffset(BeforeEvent.class.getDeclaredField(\"javaClassName\"));\n            javaMethodNameFieldInBeforeEventOffset = unsafe.objectFieldOffset(BeforeEvent.class.getDeclaredField(\"javaMethodName\"));\n            javaMethodDescFieldInBeforeEventOffset = unsafe.objectFieldOffset(BeforeEvent.class.getDeclaredField(\"javaMethodDesc\"));\n            targetFieldInBeforeEventOffset = unsafe.objectFieldOffset(BeforeEvent.class.getDeclaredField(\"target\"));\n            argumentArrayFieldInBeforeEventOffset = unsafe.objectFieldOffset(BeforeEvent.class.getDeclaredField(\"argumentArray\"));\n            objectFieldInReturnEventOffset = unsafe.objectFieldOffset(ReturnEvent.class.getDeclaredField(\"object\"));\n            throwableFieldInThrowsEventOffset = unsafe.objectFieldOffset(ThrowsEvent.class.getDeclaredField(\"throwable\"));\n            lineNumberFieldInLineEventOffset = unsafe.objectFieldOffset(LineEvent.class.getDeclaredField(\"lineNumber\"));\n            lineNumberFieldInCallBeforeEventOffset = unsafe.objectFieldOffset(CallBeforeEvent.class.getDeclaredField(\"lineNumber\"));\n            ownerFieldInCallBeforeEventOffset = unsafe.objectFieldOffset(CallBeforeEvent.class.getDeclaredField(\"owner\"));\n            nameFieldInCallBeforeEventOffset = unsafe.objectFieldOffset(CallBeforeEvent.class.getDeclaredField(\"name\"));\n            descFieldInCallBeforeEventOffset = unsafe.objectFieldOffset(CallBeforeEvent.class.getDeclaredField(\"desc\"));\n            throwExceptionFieldInCallThrowsEventOffset = unsafe.objectFieldOffset(CallThrowsEvent.class.getDeclaredField(\"throwException\"));\n        } catch (Exception e) {\n            throw new Error(e);\n        }\n    }\n    private LineEvent lineEvent = null;\n    private BeforeEvent beforeEvent = null;\n    private ReturnEvent returnEvent = null;\n    private ThrowsEvent throwsEvent = null;\n    private CallBeforeEvent callBeforeEvent = null;\n    private CallReturnEvent callReturnEvent = null;\n    private CallThrowsEvent callThrowsEvent = null;\n    private ImmediatelyThrowsEvent immediatelyThrowsEvent = null;\n    private ImmediatelyReturnEvent immediatelyReturnEvent = null;\n    public BeforeEvent makeBeforeEvent(final int processId,\n                                       final int invokeId,\n                                       final ClassLoader javaClassLoader,\n                                       final String javaClassName,\n                                       final String javaMethodName,\n                                       final String javaMethodDesc,\n                                       final Object target,\n                                       final Object[] argumentArray) {\n        if (null == beforeEvent) {\n            beforeEvent = new BeforeEvent(ILLEGAL_PROCESS_ID, ILLEGAL_INVOKE_ID, null, null, null, null, null, null);\n        }\n        unsafe.putInt(beforeEvent, processIdFieldInInvokeEventOffset, processId);\n        unsafe.putInt(beforeEvent, invokeIdFieldInInvokeEventOffset, invokeId);\n        unsafe.putObject(beforeEvent, javaClassLoaderFieldInBeforeEventOffset, javaClassLoader);\n        unsafe.putObject(beforeEvent, javaClassNameFieldInBeforeEventOffset, javaClassName);\n        unsafe.putObject(beforeEvent, javaMethodNameFieldInBeforeEventOffset, javaMethodName);\n        unsafe.putObject(beforeEvent, javaMethodDescFieldInBeforeEventOffset, javaMethodDesc);\n        unsafe.putObject(beforeEvent, targetFieldInBeforeEventOffset, target);\n        unsafe.putObject(beforeEvent, argumentArrayFieldInBeforeEventOffset, argumentArray);\n        return beforeEvent;\n    }\n    public ReturnEvent makeReturnEvent(final int processId,\n                                       final int invokeId,\n                                       final Object returnObj) {\n        if (null == returnEvent) {\n            returnEvent = new ReturnEvent(ILLEGAL_PROCESS_ID, ILLEGAL_INVOKE_ID, null);\n        }\n        unsafe.putInt(returnEvent, processIdFieldInInvokeEventOffset, processId);\n        unsafe.putInt(returnEvent, invokeIdFieldInInvokeEventOffset, invokeId);\n        unsafe.putObject(returnEvent, objectFieldInReturnEventOffset, returnObj);\n        return returnEvent;\n    }\n    public ImmediatelyReturnEvent makeImmediatelyReturnEvent(final int processId,\n                                                             final int invokeId,\n                                                             final Object returnObj) {\n        if (null == immediatelyReturnEvent) {\n            immediatelyReturnEvent = new ImmediatelyReturnEvent(ILLEGAL_PROCESS_ID, ILLEGAL_INVOKE_ID, null);\n        }\n        unsafe.putInt(immediatelyReturnEvent, processIdFieldInInvokeEventOffset, processId);\n        unsafe.putInt(immediatelyReturnEvent, invokeIdFieldInInvokeEventOffset, invokeId);\n        unsafe.putObject(immediatelyReturnEvent, objectFieldInReturnEventOffset, returnObj);\n        return immediatelyReturnEvent;\n    }\n    public ThrowsEvent makeThrowsEvent(final int processId,\n                                       final int invokeId,\n                                       final Throwable throwable) {\n        if (null == throwsEvent) {\n            throwsEvent = new ThrowsEvent(ILLEGAL_PROCESS_ID, ILLEGAL_INVOKE_ID, null);\n        }\n        unsafe.putInt(throwsEvent, processIdFieldInInvokeEventOffset, processId);\n        unsafe.putInt(throwsEvent, invokeIdFieldInInvokeEventOffset, invokeId);\n        unsafe.putObject(throwsEvent, throwableFieldInThrowsEventOffset, throwable);\n        return throwsEvent;\n    }\n<fim_suffix>    public ImmediatelyThrowsEvent makeImmediatelyThrowsEvent(final int processId,\n                                                             final int invokeId,\n                                                             final Throwable throwable) {\n        if (null == immediatelyThrowsEvent) {\n            immediatelyThrowsEvent = new ImmediatelyThrowsEvent(ILLEGAL_PROCESS_ID, ILLEGAL_INVOKE_ID, null);\n        }\n        unsafe.putInt(immediatelyThrowsEvent, processIdFieldInInvokeEventOffset, processId);\n        unsafe.putInt(immediatelyThrowsEvent, invokeIdFieldInInvokeEventOffset, invokeId);\n        unsafe.putObject(immediatelyThrowsEvent, throwableFieldInThrowsEventOffset, throwable);\n        return immediatelyThrowsEvent;\n    }\n    public LineEvent makeLineEvent(final int processId,\n                                   final int invokeId,\n                                   final int lineNumber) {\n        if (null == lineEvent) {\n            lineEvent = new LineEvent(ILLEGAL_PROCESS_ID, ILLEGAL_INVOKE_ID, -1);\n        }\n        unsafe.putInt(lineEvent, processIdFieldInInvokeEventOffset, processId);\n        unsafe.putInt(lineEvent, invokeIdFieldInInvokeEventOffset, invokeId);\n        unsafe.putInt(lineEvent, lineNumberFieldInLineEventOffset, lineNumber);\n        return lineEvent;\n    }\n    public CallBeforeEvent makeCallBeforeEvent(final int processId,\n                                               final int invokeId,\n                                               final int lineNumber,\n                                               final String owner,\n                                               final String name,\n                                               final String desc) {\n        if (null == callBeforeEvent) {\n            callBeforeEvent = new CallBeforeEvent(ILLEGAL_PROCESS_ID, ILLEGAL_INVOKE_ID, -1, null, null, null);\n        }\n        unsafe.putInt(callBeforeEvent, processIdFieldInInvokeEventOffset, processId);\n        unsafe.putInt(callBeforeEvent, invokeIdFieldInInvokeEventOffset, invokeId);\n        unsafe.putInt(callBeforeEvent, lineNumberFieldInCallBeforeEventOffset, lineNumber);\n        unsafe.putObject(callBeforeEvent, ownerFieldInCallBeforeEventOffset, owner);<fim_middle>// function below has no smell\n"}