{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2011, 2018 Eurotech and/or its affiliates\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Eurotech\n *******************************************************************************/\npackage org.eclipse.kura.core.cloud;\nimport static org.eclipse.kura.core.cloud.CloudServiceLifecycleCertsPolicy.DISABLE_PUBLISHING;\nimport static org.eclipse.kura.core.cloud.CloudServiceLifecycleCertsPolicy.PUBLISH_BIRTH_CONNECT_RECONNECT;\nimport java.util.Map;\nimport org.eclipse.kura.cloud.CloudPayloadEncoding;\nimport org.eclipse.kura.system.SystemService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\npublic class CloudServiceOptions {\n    private static final Logger logger = LoggerFactory.getLogger(CloudServiceOptions.class);\n    private static final String TOPIC_SEPARATOR = \"/\";\n    private static final String TOPIC_ACCOUNT_TOKEN = \"#account-name\";\n    private static final String TOPIC_CLIENT_ID_TOKEN = \"#client-id\";\n    private static final String TOPIC_BIRTH_SUFFIX = \"MQTT/BIRTH\";\n    private static final String TOPIC_DISCONNECT_SUFFIX = \"MQTT/DC\";\n    private static final String TOPIC_APPS_SUFFIX = \"MQTT/APPS\";\n    private static final String TOPIC_CONTROL_PREFIX = \"topic.control-prefix\";\n    private static final String TOPIC_CONTROL_PREFIX_DEFAULT = \"$EDC\";\n    private static final String TOPIC_WILD_CARD = \"#\";\n    private static final String DEVICE_DISPLAY_NAME = \"device.display-name\";\n    private static final String DEVICE_CUSTOM_NAME = \"device.custom-name\";\n    private static final String ENCODE_GZIP = \"encode.gzip\";\n    private static final String REPUB_BIRTH_ON_GPS_LOCK = \"republish.mqtt.birth.cert.on.gps.lock\";\n    private static final String REPUB_BIRTH_ON_MODEM_DETECT = \"republish.mqtt.birth.cert.on.modem.detect\";\n    private static final String ENABLE_DFLT_SUBSCRIPTIONS = \"enable.default.subscriptions\";\n    private static final String BIRTH_CERT_POLICY = \"birth.cert.policy\";\n    private static final String PAYLOAD_ENCODING = \"payload.encoding\";\n    private static final int LIFECYCLE_QOS = 0;\n    private static final int LIFECYCLE_PRIORITY = 0;\n    private static final boolean LIFECYCLE_RETAIN = false;\n    private final Map<String, Object> properties;\n    private final SystemService systemService;\n    public CloudServiceOptions(Map<String, Object> properties, SystemService systemService) {\n        this.properties = properties;\n        this.systemService = systemService;\n    }\n    /**\n     * Returns the display name for the device.\n     *\n     * @return a String value.\n     */\n<fim_suffix>    public String getDeviceDisplayName() {\n        String displayName = \"\";\n        if (this.properties == null) {\n            return displayName;\n        }\n        String deviceDisplayNameOption = (String) this.properties.get(DEVICE_DISPLAY_NAME);\n        // Use the device name from SystemService. This should be kura.device.name from\n        // the properties file.\n        if (\"device-name\".equals(deviceDisplayNameOption)) {\n            displayName = this.systemService.getDeviceName();\n        }\n        // Try to get the device hostname\n        else if (\"hostname\".equals(deviceDisplayNameOption)) {\n            displayName = this.systemService.getHostname();\n        }\n        // Return the custom field defined by the user\n        else if (\"custom\".equals(deviceDisplayNameOption)\n                && this.properties.get(DEVICE_CUSTOM_NAME) instanceof String) {\n            displayName = (String) this.properties.get(DEVICE_CUSTOM_NAME);\n        }\n        // Return empty string to the server\n        else if (\"server\".equals(deviceDisplayNameOption)) {\n            displayName = \"\";\n        }\n        return displayName;\n    }\n    /**\n     * Returns true if the current CloudService configuration\n     * specifies Gzip compression enabled for outgoing payloads.\n     *\n     * @return a boolean value.\n     */\n    public boolean getEncodeGzip() {\n        boolean encodeGzip = false;\n        if (this.properties != null && this.properties.get(ENCODE_GZIP) instanceof Boolean) {\n            encodeGzip = (Boolean) this.properties.get(ENCODE_GZIP);\n        }\n        return encodeGzip;\n    }\n    /**\n     * Returns true if the current CloudService configuration\n     * specifies the cloud client should republish the MQTT birth\n     * certificate on GPS lock events.\n     *\n     * @return a boolean value.\n     */\n    public boolean getRepubBirthCertOnGpsLock() {\n        boolean repubBirth = false;\n        if (this.properties != null && this.properties.get(REPUB_BIRTH_ON_GPS_LOCK) instanceof Boolean) {\n            repubBirth = (Boolean) this.properties.get(REPUB_BIRTH_ON_GPS_LOCK);\n        }\n        return repubBirth;\n    }\n    /**\n     * Returns true if the current CloudService configuration\n     * specifies the cloud client should republish the MQTT birth\n     * certificate on modem detection events.\n     *\n     * @return a boolean value.\n     */\n    public boolean getRepubBirthCertOnModemDetection() {\n        boolean repubBirth = false;\n        if (this.properties != null && this.properties.get(REPUB_BIRTH_ON_MODEM_DETECT) instanceof Boolean) {\n            repubBirth = (Boolean) this.properties.get(REPUB_BIRTH_ON_MODEM_DETECT);\n        }\n        return repubBirth;\n    }\n    /**\n     * Returns the prefix to be used when publishing messages to control topics.\n     *\n     * @return a String value.\n     */\n    public String getTopicControlPrefix() {\n        String prefix = TOPIC_CONTROL_PREFIX_DEFAULT;\n        if (this.properties != null && this.properties.get(TOPIC_CONTROL_PREFIX) instanceof String) {\n            prefix = (String) this.properties.get(TOPIC_CONTROL_PREFIX);\n        }\n        return prefix;\n    }\n    /**\n     * Returns true if the current CloudService configuration\n     * specifies that the cloud client should perform default subscriptions.\n     *\n     * @return a boolean value.\n     */\n    public boolean getEnableDefaultSubscriptions() {\n        boolean enable = true;\n        if (this.properties != null && this.properties.get(ENABLE_DFLT_SUBSCRIPTIONS) instanceof Boolean) {\n            enable = (Boolean) this.properties.get(ENABLE_DFLT_SUBSCRIPTIONS);\n        }\n        return enable;\n    }\n    /**\n     * This method parses the Cloud Service configuration and returns true if the Cloud Service instance should\n     * not publish lifecycle messages.\n     *\n     * @return a boolean value.\n     */\n    public boolean isLifecycleCertsDisabled() {\n        boolean birthPubDisabled = false;\n        String birthPubPolicy = \"\";\n        if (this.properties != null && this.properties.get(BIRTH_CERT_POLICY) instanceof String) {\n            birthPubPolicy = (String) this.properties.get(BIRTH_CERT_POLICY);\n        }\n        if (DISABLE_PUBLISHING.getValue().equals(birthPubPolicy)) {\n            birthPubDisabled = true;\n        }\n        return birthPubDisabled;\n    }\n    /**\n     * This method parses the Cloud Service configuration and returns true if the Cloud Service instance should\n     * republish the birth message on a reconnection.\n     * By default, this method returns true.\n     *\n     * @return a boolean value.\n     */\n    public boolean getRepubBirthCertOnReconnect() {\n        boolean republishBirt = true;\n        String birthPubPolicy = \"\";\n        if (this.properties != null && this.properties.get(BIRTH_CERT_POLICY) instanceof String) {\n            birthPubPolicy = (String) this.properties.get(BIRTH_CERT_POLICY);\n        }\n        if (!PUBLISH_BIRTH_CONNECT_RECONNECT.getValue().equals(birthPubPolicy)) {\n            republishBirt = false;\n        }\n        return republishBirt;\n    }\n    /**\n     * This method parses the Cloud Service configuration and returns the selected cloud payload encoding.\n     * By default, this method returns {@link CloudPayloadEncoding} {@code KURA_PROTOBUF}.\n     *\n     * @return a boolean value.\n     */\n    public CloudPayloadEncoding getPayloadEncoding() {\n        CloudPayloadEncoding result = CloudPayloadEncoding.KURA_PROTOBUF;\n        String encodingString = \"\";\n        if (this.properties != null && this.properties.get(PAYLOAD_ENCODING) != null\n                && this.properties.get(PAYLOAD_ENCODING) instanceof String) {\n            encodingString = (String) this.properties.get(PAYLOAD_ENCODING);\n        }\n        try {\n            result = CloudPayloadEncoding.getEncoding(encodingString);\n        } catch (IllegalArgumentException e) {<fim_middle>// function below has no smell\n"}