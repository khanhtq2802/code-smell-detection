{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2008, 2011 Sonatype Inc. and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Sonatype Inc. - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.tycho.surefire.osgibooter;\n\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.IConfigurationElement;\nimport org.eclipse.core.runtime.IExtension;\nimport org.eclipse.core.runtime.Platform;\nimport org.eclipse.ui.PlatformUI;\nimport org.eclipse.ui.testing.ITestHarness;\nimport org.eclipse.ui.testing.TestableObject;\n\npublic abstract class AbstractUITestApplication implements ITestHarness {\n\n    private static final String DEFAULT_APP_3_0 = \"org.eclipse.ui.ide.workbench\"; //$NON-NLS-1$\n\n    private int fTestRunnerResult = -1;\n    private String[] fArgs = new String[0];\n    private TestableObject fTestableObject;\n\n    public void runTests() {\n        fTestableObject.testingStarting();\n        if (useUIThread(fArgs)) {\n            fTestableObject.runTest(new Runnable() {\n                public void run() {\n                    try {\n                        fTestRunnerResult = OsgiSurefireBooter.run(fArgs);\n                    } catch (Exception e) {\n                        // TODO Auto-generated catch block\n                        e.printStackTrace();\n                    }\n                }\n            });\n        } else {\n            try {\n                fTestRunnerResult = OsgiSurefireBooter.run(fArgs);\n            } catch (Exception e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n        fTestableObject.testingFinished();\n    }\n\n    private boolean useUIThread(String[] args) {\n        if (args != null) {\n            for (int i = 0; i < args.length; i++) {\n                if (\"-nouithread\".equals(args[i])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /*\n     * return the application to run, or null if not even the default application is found.\n     */\n<fim_suffix>    private Object getApplicationToRun(String[] args) throws CoreException {\n        String configuredApplication = getConfiguredApplication(args);\n        if (configuredApplication == null) {\n            configuredApplication = DEFAULT_APP_3_0;\n        } else {\n            System.out.println(\"Launching application \" + configuredApplication + \"...\");\n        }\n\n        // Assume we are in 3.0 mode.\n        // Find the name of the application as specified by the PDE JUnit launcher.\n        // If no application is specified, the 3.0 default workbench application\n        // is returned.\n        IExtension extension = Platform.getExtensionRegistry().getExtension(Platform.PI_RUNTIME,\n                Platform.PT_APPLICATIONS, configuredApplication);\n\n        // If no 3.0 extension can be found, search the registry\n        // for the pre-3.0 default workbench application, i.e. org.eclipse ui.workbench\n        // Set the deprecated flag to true\n        if (extension == null) {\n            return null;\n        }\n\n        // If the extension does not have the correct grammar, return null.\n        // Otherwise, return the application object.\n        IConfigurationElement[] elements = extension.getConfigurationElements();\n        if (elements.length > 0) {\n            IConfigurationElement[] runs = elements[0].getChildren(\"run\"); //$NON-NLS-1$\n            if (runs.length > 0) {\n                return runs[0].createExecutableExtension(\"class\"); //$NON-NLS-1$\n            }\n        }\n        return null;\n    }\n\n    private String getConfiguredApplication(String[] args) {\n        for (int i = 0; i < args.length; i++) {\n            if (args[i].equals(\"-testApplication\") && i < args.length - 1) //$NON-NLS-1$\n                return args[i + 1];\n        }\n        return null;\n    }\n\n    protected Object run(String[] args) throws Exception {\n        if (args != null)\n            fArgs = args;\n        fTestableObject = PlatformUI.getTestableObject();\n        fTestableObject.setTestHarness(this);\n        try {\n            Object application = getApplicationToRun(args);\n\n            if (application == null) {\n                return Integer.valueOf(200);\n            }\n            runApplication(application, args);\n        } catch (Exception e) {\n            if (fTestRunnerResult == -1) {\n                throw e;\n            }\n            // the exception was thrown after test runner returned. this is most likely a bug in Eclipse Platform\n            // see for example, https://bugs.eclipse.org/bugs/show_bug.cgi?id=436159\n            // there is no point to fail the build because of this, just log and ignore\n            System.err.println(\"Caught unexpected exception during test framework shutdown\");\n            e.printStackTrace();\n            // TODO funnel exceptions to LogService\n        }\n        return Integer.valueOf(fTestRunnerResult);\n    }\n\n    protected abstract void runApplication(Object application, String[] args) throws Exception;\n}<fim_middle>// function below is long method\n"}