{"text": "<fim_prefix>\n<fim_suffix>public class RabbitBusCleaner implements BusCleaner {\n\tprivate final static Logger logger = LoggerFactory.getLogger(RabbitBusCleaner.class);\n\t@Override\n\tpublic Map<String, List<String>> clean(String entity, boolean isJob) {\n\t\treturn clean(\"http://localhost:15672\", \"guest\", \"guest\", \"/\", \"xdbus.\", entity, isJob);\n\t}\n\tpublic Map<String, List<String>> clean(String adminUri, String user, String pw, String vhost,\n\t\t\tString busPrefix, String entity, boolean isJob) {\n\t\treturn doClean(\n\t\t\t\tadminUri == null ? \"http://localhost:15672\" : adminUri,\n\t\t\t\tuser == null ? \"guest\" : user,\n\t\t\t\tpw == null ? \"guest\" : pw,\n\t\t\t\tvhost == null ? \"/\" : vhost,\n\t\t\t\tbusPrefix == null ? \"xdbus.\" : busPrefix,\n\t\t\t\tentity, isJob);\n\t}\n\tprivate Map<String, List<String>> doClean(String adminUri, String user, String pw, String vhost,\n\t\t\tString busPrefix, String entity, boolean isJob) {\n\t\tRestTemplate restTemplate = RabbitManagementUtils.buildRestTemplate(adminUri, user, pw);\n\t\tList<String> removedQueues = isJob\n\t\t\t\t? findJobQueues(adminUri, vhost, busPrefix, entity, restTemplate)\n\t\t\t\t: findStreamQueues(adminUri, vhost, busPrefix, entity, restTemplate);\n\t\tExchangeCandidateCallback callback;\n\t\tif (isJob) {\n\t\t\tString pattern;\n\t\t\tif (entity.endsWith(\"*\")) {\n\t\t\t\tpattern = entity.substring(0, entity.length() - 1) + \"[^.]*\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpattern = entity;\n\t\t\t}\n\t\t\tCollection<String> exchangeNames = JobEventsListenerPlugin.getEventListenerChannels(pattern).values();\n\t\t\tfinal Set<Pattern> jobExchanges = new HashSet<>();\n\t\t\tfor (String exchange : exchangeNames) {\n\t\t\t\tjobExchanges.add(Pattern.compile(MessageBusSupport.applyPrefix(busPrefix,\n\t\t\t\t\t\tMessageBusSupport.applyPubSub(exchange))));\n\t\t\t}\n\t\t\tjobExchanges.add(Pattern.compile(MessageBusSupport.applyPrefix(busPrefix, MessageBusSupport.applyPubSub(\n\t\t\t\t\tJobEventsListenerPlugin.getEventListenerChannelName(pattern)))));\n\t\t\tcallback = new ExchangeCandidateCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCandidate(String exchangeName) {\n\t\t\t\t\tfor (Pattern pattern : jobExchanges) {\n\t\t\t\t\t\tMatcher matcher = pattern.matcher(exchangeName);\n\t\t\t\t\t\tif (matcher.matches()) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tfinal String tapPrefix = adjustPrefix(MessageBusSupport.applyPrefix(busPrefix,\n\t\t\t\t\tMessageBusSupport.applyPubSub(BusUtils.constructTapPrefix(entity))));\n\t\t\tcallback = new ExchangeCandidateCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCandidate(String exchangeName) {\n\t\t\t\t\treturn exchangeName.startsWith(tapPrefix);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tList<String> removedExchanges = findExchanges(adminUri, vhost, busPrefix, entity, restTemplate, callback);\n\t\t// Delete the queues in reverse order to enable re-running after a partial success.\n\t\t// The queue search above starts with 0 and terminates on a not found.\n\t\tfor (int i = removedQueues.size() - 1; i >= 0; i--) {\n\t\t\tString queueName = removedQueues.get(i);\n\t\t\tURI uri = UriComponentsBuilder.fromUriString(adminUri + \"/api\")\n\t\t\t\t\t.pathSegment(\"queues\", \"{vhost}\", \"{stream}\")\n\t\t\t\t\t.buildAndExpand(vhost, queueName).encode().toUri();\n\t\t\trestTemplate.delete(uri);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"deleted queue: \" + queueName);\n\t\t\t}\n\t\t}\n\t\tMap<String, List<String>> results = new HashMap<>();\n\t\tif (removedQueues.size() > 0) {\n\t\t\tresults.put(\"queues\", removedQueues);\n\t\t}\n\t\t// Fanout exchanges for taps\n\t\tfor (String exchange : removedExchanges) {\n\t\t\tURI uri = UriComponentsBuilder.fromUriString(adminUri + \"/api\")\n\t\t\t\t\t.pathSegment(\"exchanges\", \"{vhost}\", \"{name}\")\n\t\t\t\t\t.buildAndExpand(vhost, exchange).encode().toUri();\n\t\t\trestTemplate.delete(uri);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"deleted exchange: \" + exchange);\n\t\t\t}\n\t\t}\n\t\tif (removedExchanges.size() > 0) {\n\t\t\tresults.put(\"exchanges\", removedExchanges);\n\t\t}\n\t\treturn results;\n\t}\n\tprivate List<String> findStreamQueues(String adminUri, String vhost, String busPrefix, String stream,\n\t\t\tRestTemplate restTemplate) {\n\t\tString queueNamePrefix = adjustPrefix(MessageBusSupport.applyPrefix(busPrefix, stream));\n\t\tList<Map<String, Object>> queues = listAllQueues(adminUri, vhost, restTemplate);\n\t\tList<String> removedQueues = new ArrayList<>();\n\t\tfor (Map<String, Object> queue : queues) {\n\t\t\tString queueName = (String) queue.get(\"name\");\n\t\t\tif (queueName.startsWith(queueNamePrefix)) {\n\t\t\t\tcheckNoConsumers(queueName, queue);\n\t\t\t\tremovedQueues.add(queueName);\n\t\t\t}\n\t\t}\n\t\treturn removedQueues;\n\t}\n\tprivate List<String> findJobQueues(String adminUri, String vhost, String busPrefix, String job,\n\t\t\tRestTemplate restTemplate) {\n\t\tList<String> removedQueues = new ArrayList<>();\n\t\tString jobQueueName = MessageBusSupport.applyPrefix(busPrefix,\n\t\t\t\tAbstractJobPlugin.getJobChannelName(job));\n\t\tString jobRequestsQueuePrefix = adjustPrefix(MessageBusSupport.applyPrefix(busPrefix,\n\t\t\t\tAbstractJobPlugin.getJobChannelName(job)));\n\t\tList<Map<String, Object>> queues = listAllQueues(adminUri, vhost, restTemplate);\n\t\tfor (Map<String, Object> queue : queues) {\n\t\t\tString queueName = (String) queue.get(\"name\");\n\t\t\tif (job.endsWith(\"*\")) {\n\t\t\t\tif (queueName.startsWith(jobQueueName.substring(0, jobQueueName.length() - 1))) {\n\t\t\t\t\tcheckNoConsumers(queueName, queue);\n\t\t\t\t\tremovedQueues.add(queueName);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (queueName.equals(jobQueueName)) {\n\t\t\t\t\tcheckNoConsumers(queueName, queue);\n\t\t\t\t\tremovedQueues.add(queueName);\n\t\t\t\t}\n\t\t\t\telse if (queueName.startsWith(jobRequestsQueuePrefix)\n\t\t\t\t\t\t&& queueName.endsWith(MessageBusSupport.applyRequests(\"\"))) {\n\t\t\t\t\tcheckNoConsumers(queueName, queue);\n\t\t\t\t\tremovedQueues.add(queueName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn removedQueues;\n\t}\n\tprivate List<Map<String, Object>> listAllQueues(String adminUri, String vhost, RestTemplate restTemplate) {\n\t\tURI uri = UriComponentsBuilder.fromUriString(adminUri + \"/api\")\n\t\t\t\t.pathSegment(\"queues\", \"{vhost}\")\n\t\t\t\t.buildAndExpand(vhost).encode().toUri();\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Map<String, Object>> queues = restTemplate.getForObject(uri, List.class);\n\t\treturn queues;\n\t}\n\tprivate String adjustPrefix(String prefix) {\n\t\tif (prefix.endsWith(\"*\")) {\n\t\t\treturn prefix.substring(0, prefix.length() - 1);\n\t\t}\n\t\telse {\n\t\t\treturn prefix + BusUtils.GROUP_INDEX_DELIMITER;\n\t\t}\n\t}\n\tprivate void checkNoConsumers(String queueName, Map<String, Object> queue) {\n\t\tif (!queue.get(\"consumers\").equals(Integer.valueOf(0))) {\n\t\t\tthrow new RabbitAdminException(\"Queue \" + queueName + \" is in use\");\n\t\t}\n\t}\n\t@SuppressWarnings(\"unchecked\")\n\tprivate List<String> findExchanges(String adminUri, String vhost, String busPrefix, String entity,\n\t\t\tRestTemplate restTemplate, ExchangeCandidateCallback callback) {\n\t\tList<String> removedExchanges = new ArrayList<>();\n\t\tURI uri = UriComponentsBuilder.fromUriString(adminUri + \"/api\")\n\t\t\t\t.pathSegment(\"exchanges\", \"{vhost}\")\n\t\t\t\t.buildAndExpand(vhost).encode().toUri();<fim_middle>// class below is blob\n"}