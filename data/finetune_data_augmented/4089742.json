{"text": "<fim_prefix>                escaped = escaped.replace(entry.getKey().toString(), entry.getValue());\n            }\n        }\n        return escaped;\n    }\n    public static void printResults(IApplicationContext appCtx, ResultReader resultReader, SessionOutput output,\n            Stats stats, ARecordType recordType) throws HyracksDataException {\n        new ResultPrinter(appCtx, output, stats, recordType).print(resultReader);\n    }\n    public static void printResults(IApplicationContext appCtx, String record, SessionOutput output, Stats stats,\n            ARecordType recordType) throws HyracksDataException {\n        new ResultPrinter(appCtx, output, stats, recordType).print(record);\n    }\n    public static void printResultHandle(SessionOutput output, ResultHandle handle) throws HyracksDataException {\n        try {\n            final AlgebricksAppendable app = new AlgebricksAppendable(output.out());\n            output.appendHandle(app, handle.toString());\n        } catch (AlgebricksException e) {\n            LOGGER.warn(\"error printing handle\", e);\n        }\n    }\n    public static void printStatus(SessionOutput output, AbstractQueryApiServlet.ResultStatus rs) {\n        try {\n            final AlgebricksAppendable app = new AlgebricksAppendable(output.out());\n            output.appendStatus(app, rs.str());\n        } catch (AlgebricksException e) {\n            LOGGER.warn(\"error printing status\", e);\n        }\n    }\n    public static void printStatus(PrintWriter pw, AbstractQueryApiServlet.ResultStatus rs, boolean comma) {\n        printField(pw, AbstractQueryApiServlet.ResultFields.STATUS.str(), rs.str(), comma);\n    }\n    public static void printError(PrintWriter pw, Throwable e) {\n        printError(pw, e, true);\n    }\n    public static void printError(PrintWriter pw, Throwable e, boolean comma) {\n        printError(pw, e, 1, comma);\n    }\n    public static void printError(PrintWriter pw, Throwable e, int code, boolean comma) {\n        Throwable rootCause = getRootCause(e);\n        String msg = rootCause.getMessage();\n        if (!(rootCause instanceof AlgebricksException || rootCause instanceof HyracksException\n                || rootCause instanceof TokenMgrError\n                || rootCause instanceof org.apache.asterix.aqlplus.parser.TokenMgrError)) {\n            msg = rootCause.getClass().getSimpleName() + (msg == null ? \"\" : \": \" + msg);\n        }\n        printError(pw, msg, code, comma);\n    }\n    public static void printError(PrintWriter pw, String msg, int code, boolean comma) {\n        pw.print(\"\\t\\\"\");\n        pw.print(AbstractQueryApiServlet.ResultFields.ERRORS.str());\n        pw.print(\"\\\": [{ \\n\\t\");\n        printField(pw, QueryServiceServlet.ErrorField.CODE.str(), code);\n        pw.print(\"\\t\");\n        printField(pw, QueryServiceServlet.ErrorField.MSG.str(), JSONUtil.escape(msg), false);\n        pw.print(comma ? \"\\t}],\\n\" : \"\\t}]\\n\");\n    }\n    public static void printWarnings(PrintWriter pw, List<ExecutionWarning> warnings) {\n        pw.print(\"\\t\\\"\");\n        pw.print(AbstractQueryApiServlet.ResultFields.WARNINGS.str());\n        pw.print(\"\\\": [\");\n        for (int i = 0; i < warnings.size(); i++) {\n            final ExecutionWarning warning = warnings.get(i);\n            pw.print(\"{ \\n\\t\");\n            printField(pw, QueryServiceServlet.ErrorField.CODE.str(), warning.getCode());\n            pw.print(\"\\t\");\n            printField(pw, QueryServiceServlet.ErrorField.MSG.str(), JSONUtil.escape(warning.getMessage()), false);\n            pw.print(\"\\t} \\n\\t\");\n            boolean lastWarning = i == warnings.size() - 1;\n            if (!lastWarning) {\n                pw.print(\",\");\n            }\n        }\n        pw.print(\"],\\n\");\n    }\n    public static void printField(PrintWriter pw, String name, String value) {\n        printField(pw, name, value, true);\n    }\n    public static void printField(PrintWriter pw, String name, long value) {\n        printField(pw, name, value, true);\n    }\n    public static void printField(PrintWriter pw, String name, String value, boolean comma) {\n        printFieldInternal(pw, name, \"\\\"\" + value + \"\\\"\", comma);\n    }\n    public static void printField(PrintWriter pw, String name, long value, boolean comma) {\n        printFieldInternal(pw, name, String.valueOf(value), comma);\n    }\n    protected static void printFieldInternal(PrintWriter pw, String name, String value, boolean comma) {\n        pw.print(\"\\t\\\"\");\n        pw.print(name);\n        pw.print(\"\\\": \");\n        pw.print(value);\n        if (comma) {\n            pw.print(',');\n        }\n        pw.print('\\n');\n    }\n    public static ObjectNode getErrorResponse(int errorCode, String errorMessage, String errorSummary,\n            String errorStackTrace) {\n        ObjectMapper om = new ObjectMapper();\n        ObjectNode errorResp = om.createObjectNode();\n        ArrayNode errorArray = om.createArrayNode();\n        errorArray.add(errorCode);\n        errorArray.add(errorMessage);\n        errorResp.set(\"error-code\", errorArray);\n        if (!\"\".equals(errorSummary)) {\n            errorResp.put(\"summary\", errorSummary);\n        } else {\n            //parse exception\n            errorResp.put(\"summary\", errorMessage);\n        }\n        errorResp.put(\"stacktrace\", errorStackTrace);\n        return errorResp;\n    }\n    public static void webUIErrorHandler(PrintWriter out, Exception e) {\n        String errorTemplate = readTemplateFile(\"/webui/errortemplate.html\", \"%s\\n%s\\n%s\");\n        String errorOutput =\n                String.format(errorTemplate, extractErrorMessage(e), extractErrorSummary(e), extractFullStackTrace(e));\n        out.println(errorOutput);\n    }\n    public static void webUIParseExceptionHandler(PrintWriter out, Throwable e, String query) {\n        String errorTemplate = readTemplateFile(\"/webui/errortemplate_message.html\", \"<pre class=\\\"error\\\">%s\\n</pre>\");\n        String errorOutput = String.format(errorTemplate, buildParseExceptionMessage(e, query));\n        out.println(errorOutput);\n    }\n    public static void apiErrorHandler(PrintWriter out, Exception e) {\n        int errorCode = 99;\n        if (e instanceof ParseException) {\n            errorCode = 2;\n        } else if (e instanceof AlgebricksException) {\n            errorCode = 3;\n        } else if (e instanceof HyracksDataException) {\n            errorCode = 4;\n        }\n        ObjectNode errorResp = ResultUtil.getErrorResponse(errorCode, extractErrorMessage(e), extractErrorSummary(e),\n                extractFullStackTrace(e));\n        out.write(errorResp.toString());\n    }\n    public static String buildParseExceptionMessage(Throwable e, String query) {\n        StringBuilder errorMessage = new StringBuilder();\n        String message = e.getMessage();\n        message = message.replace(\"<\", \"&lt\");\n        message = message.replace(\">\", \"&gt\");\n        errorMessage.append(\"Error: \" + message + \"\\n\");\n        int pos = message.indexOf(\"line\");\n        if (pos > 0) {\n            Pattern p = Pattern.compile(\"\\\\d+\");\n            Matcher m = p.matcher(message);\n            if (m.find(pos)) {\n                int lineNo = Integer.parseInt(message.substring(m.start(), m.end()));\n                String[] lines = query.split(\"\\n\");\n                if (lineNo > lines.length) {\n                    errorMessage.append(\"===> &ltBLANK LINE&gt \\n\");\n                } else {\n                    String line = lines[lineNo - 1];\n                    errorMessage.append(\"==> \" + line);\n                }\n            }\n        }\n        return errorMessage.toString();\n    }\n    public static Throwable getRootCause(Throwable cause) {\n        Throwable currentCause = cause;\n        Throwable nextCause = cause.getCause();\n        while (nextCause != null && nextCause != currentCause) {\n            currentCause = nextCause;\n            nextCause = nextCause.getCause();\n        }\n        return currentCause;\n    }\n    /**\n     * Extract the message in the root cause of the stack trace:\n     *\n     * @param e\n     * @return error message string.\n     */\n<fim_suffix>    private static String extractErrorMessage(Throwable e) {\n        Throwable cause = getRootCause(e);\n        String fullyQualifiedExceptionClassName = cause.getClass().getName();\n        String[] hierarchySplits = fullyQualifiedExceptionClassName.split(\"\\\\.\");\n        //try returning the class without package qualification\n        String exceptionClassName = hierarchySplits[hierarchySplits.length - 1];\n        String localizedMessage = cause.getLocalizedMessage();\n        if (localizedMessage == null) {\n            localizedMessage = \"Internal error. Please check instance logs for further details.\";\n        }\n        return localizedMessage + \" [\" + exceptionClassName + \"]\";\n    }<fim_middle>// function below has no smell\n"}