{"text": "<fim_prefix>\n<fim_suffix>abstract class QueryParameterSetterFactory {\n\t@Nullable\n\tabstract QueryParameterSetter create(ParameterBinding binding, DeclaredQuery declaredQuery);\n\t/**\n\t * Creates a new {@link QueryParameterSetterFactory} for the given {@link JpaParameters}.\n\t *\n\t * @param parameters must not be {@literal null}.\n\t * @return a basic {@link QueryParameterSetterFactory} that can handle named and index parameters.\n\t */\n\tstatic QueryParameterSetterFactory basic(JpaParameters parameters) {\n\t\tAssert.notNull(parameters, \"JpaParameters must not be null!\");\n\t\treturn new BasicQueryParameterSetterFactory(parameters);\n\t}\n\t/**\n\t * Creates a new {@link QueryParameterSetterFactory} using the given {@link JpaParameters} and\n\t * {@link ParameterMetadata}.\n\t *\n\t * @param parameters must not be {@literal null}.\n\t * @param metadata must not be {@literal null}.\n\t * @return a {@link QueryParameterSetterFactory} for criteria Queries.\n\t */\n\tstatic QueryParameterSetterFactory forCriteriaQuery(JpaParameters parameters, List<ParameterMetadata<?>> metadata) {\n\t\tAssert.notNull(parameters, \"JpaParameters must not be null!\");\n\t\tAssert.notNull(metadata, \"ParameterMetadata must not be null!\");\n\t\treturn new CriteriaQueryParameterSetterFactory(parameters, metadata);\n\t}\n\t/**\n\t * Creates a new {@link QueryParameterSetterFactory} for the given {@link SpelExpressionParser},\n\t * {@link EvaluationContextProvider} and {@link Parameters}.\n\t *\n\t * @param parser must not be {@literal null}.\n\t * @param evaluationContextProvider must not be {@literal null}.\n\t * @param parameters must not be {@literal null}.\n\t * @return a {@link QueryParameterSetterFactory} that can handle\n\t *         {@link org.springframework.expression.spel.standard.SpelExpression}s.\n\t */\n\tstatic QueryParameterSetterFactory parsing(SpelExpressionParser parser,\n\t\t\tQueryMethodEvaluationContextProvider evaluationContextProvider, Parameters<?, ?> parameters) {\n\t\tAssert.notNull(parser, \"SpelExpressionParser must not be null!\");\n\t\tAssert.notNull(evaluationContextProvider, \"EvaluationContextProvider must not be null!\");\n\t\tAssert.notNull(parameters, \"Parameters must not be null!\");\n\t\treturn new ExpressionBasedQueryParameterSetterFactory(parser, evaluationContextProvider, parameters);\n\t}\n\t/**\n\t * Creates a {@link QueryParameterSetter} from a {@link JpaParameter}. Handles named and indexed parameters,\n\t * TemporalType annotations and might ignore certain exception when requested to do so.\n\t *\n\t * @param valueExtractor extracts the relevant value from an array of method parameter values.\n\t * @param binding the binding of the query parameter to be set.\n\t * @param parameter the method parameter to bind.\n\t */\n\tprivate static QueryParameterSetter createSetter(Function<Object[], Object> valueExtractor, ParameterBinding binding,\n\t\t\t@Nullable JpaParameter parameter) {\n\t\tTemporalType temporalType = parameter != null && parameter.isTemporalParameter() //\n\t\t\t\t? parameter.getRequiredTemporalType() //\n\t\t\t\t: null;\n\t\treturn new NamedOrIndexedQueryParameterSetter(valueExtractor.andThen(binding::prepare),\n\t\t\t\tParameterImpl.of(parameter, binding), temporalType);\n\t}\n\t/**\n\t * Handles bindings that are SpEL expressions by evaluating the expression to obtain a value.\n\t *\n\t * @author Jens Schauder\n\t * @author Oliver Gierke\n\t * @since 2.0\n\t */\n\tprivate static class ExpressionBasedQueryParameterSetterFactory extends QueryParameterSetterFactory {\n\t\tprivate final SpelExpressionParser parser;\n\t\tprivate final QueryMethodEvaluationContextProvider evaluationContextProvider;\n\t\tprivate final Parameters<?, ?> parameters;\n\t\t/**\n\t\t * @param parser must not be {@literal null}.\n\t\t * @param evaluationContextProvider must not be {@literal null}.\n\t\t * @param parameters must not be {@literal null}.\n\t\t */\n\t\tExpressionBasedQueryParameterSetterFactory(SpelExpressionParser parser,\n\t\t\t\tQueryMethodEvaluationContextProvider evaluationContextProvider, Parameters<?, ?> parameters) {\n\t\t\tAssert.notNull(evaluationContextProvider, \"EvaluationContextProvider must not be null!\");\n\t\t\tAssert.notNull(parser, \"SpelExpressionParser must not be null!\");\n\t\t\tAssert.notNull(parameters, \"Parameters must not be null!\");\n\t\t\tthis.evaluationContextProvider = evaluationContextProvider;\n\t\t\tthis.parser = parser;\n\t\t\tthis.parameters = parameters;\n\t\t}\n\t\t/*\n\t\t * (non-Javadoc)\n\t\t * @see org.springframework.data.jpa.repository.query.QueryParameterSetterFactory#create(org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding, java.lang.String)\n\t\t */\n\t\t@Nullable\n\t\t@Override\n\t\tpublic QueryParameterSetter create(ParameterBinding binding, DeclaredQuery declaredQuery) {\n\t\t\tif (!binding.isExpression()) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tExpression expression = parser.parseExpression(binding.getExpression());\n\t\t\treturn createSetter(values -> evaluateExpression(expression, values), binding, null);\n\t\t}\n\t\t/**\n\t\t * Evaluates the given {@link Expression} against the given values.\n\t\t *\n\t\t * @param expression must not be {@literal null}.\n\t\t * @param values must not be {@literal null}.\n\t\t * @return the result of the evaluation.\n\t\t */\n\t\t@Nullable\n\t\tprivate Object evaluateExpression(Expression expression, Object[] values) {\n\t\t\tEvaluationContext context = evaluationContextProvider.getEvaluationContext(parameters, values);\n\t\t\treturn expression.getValue(context, Object.class);\n\t\t}\n\t}\n\t/**\n\t * Extracts values for parameter bindings from method parameters. It handles named as well as indexed parameters.\n\t *\n\t * @author Jens Schauder\n\t * @author Oliver Gierke\n\t * @since 2.0\n\t */\n\tprivate static class BasicQueryParameterSetterFactory extends QueryParameterSetterFactory {\n\t\tprivate final JpaParameters parameters;\n\t\t/**\n\t\t * @param parameters must not be {@literal null}.\n\t\t */\n\t\tBasicQueryParameterSetterFactory(JpaParameters parameters) {\n\t\t\tAssert.notNull(parameters, \"JpaParameters must not be null!\");\n\t\t\tthis.parameters = parameters;\n\t\t}\n\t\t/*\n\t\t * (non-Javadoc)\n\t\t * @see org.springframework.data.jpa.repository.query.QueryParameterSetterFactory#create(org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding, java.lang.String)\n\t\t */\n\t\t@Override\n\t\tpublic QueryParameterSetter create(ParameterBinding binding, DeclaredQuery declaredQuery) {\n\t\t\tAssert.notNull(binding, \"Binding must not be null.\");\n\t\t\tJpaParameter parameter;\n\t\t\tif (declaredQuery.hasNamedParameter()) {\n\t\t\t\tparameter = findParameterForBinding(binding);\n\t\t\t} else {\n\t\t\t\tint parameterIndex = binding.getRequiredPosition() - 1;\n\t\t\t\tJpaParameters bindableParameters = parameters.getBindableParameters();\n\t\t\t\tAssert.isTrue( //\n\t\t\t\t\t\tparameterIndex < bindableParameters.getNumberOfParameters(), //\n\t\t\t\t\t\t() -> String.format( //\n\t\t\t\t\t\t\t\t\"At least %s parameter(s) provided but only %s parameter(s) present in query.\", //\n\t\t\t\t\t\t\t\tbinding.getRequiredPosition(), //\n\t\t\t\t\t\t\t\tbindableParameters.getNumberOfParameters() //\n\t\t\t\t\t\t) //\n\t\t\t\t);\n\t\t\t\tparameter = bindableParameters.getParameter(binding.getRequiredPosition() - 1);\n\t\t\t}\n\t\t\treturn parameter == null //\n\t\t\t\t\t? QueryParameterSetter.NOOP //\n\t\t\t\t\t: createSetter(values -> getValue(values, parameter), binding, parameter);\n\t\t}\n\t\t@Nullable\n\t\tprivate JpaParameter findParameterForBinding(ParameterBinding binding) {\n\t\t\treturn parameters.getBindableParameters().stream() //\n\t\t\t\t\t.filter(candidate -> binding.getRequiredName().equals(getName(candidate))) //\n\t\t\t\t\t.findFirst().orElse(null);\n\t\t}\n\t\tprivate Object getValue(Object[] values, Parameter parameter) {\n\t\t\treturn new JpaParametersParameterAccessor(parameters, values).getValue(parameter);\n\t\t}\n\t\tprivate static String getName(JpaParameter p) {\n\t\t\treturn p.getName().orElseThrow(() -> new IllegalStateException(ParameterBinder.PARAMETER_NEEDS_TO_BE_NAMED));\n\t\t}\n\t}\n\t/**\n\t * @author Jens Schauder\n\t * @author Oliver Gierke\n\t * @see QueryParameterSetterFactory\n\t */\n\tprivate static class CriteriaQueryParameterSetterFactory extends QueryParameterSetterFactory {\n\t\tprivate final JpaParameters parameters;\n\t\tprivate final List<ParameterMetadata<?>> expressions;\n\t\t/**\n\t\t * Creates a new {@link QueryParameterSetterFactory} from the given {@link JpaParameters} and\n\t\t * {@link ParameterMetadata}.\n\t\t *\n\t\t * @param parameters must not be {@literal null}.\n\t\t * @param metadata must not be {@literal null}.\n\t\t */\n\t\tCriteriaQueryParameterSetterFactory(JpaParameters parameters, List<ParameterMetadata<?>> metadata) {\n\t\t\tAssert.notNull(parameters, \"JpaParameters must not be null!\");\n\t\t\tAssert.notNull(metadata, \"Expressions must not be null!\");\n\t\t\tthis.parameters = parameters;\n\t\t\tthis.expressions = metadata;\n\t\t}\n\t\t/*<fim_middle>// class below has no smell\n"}