{"text": "<fim_prefix>     * the same name.\n     */\n    public FetchGroup addDeclaredFetchGroup(String name) {\n    \tif (StringUtil.isEmpty(name))\n    \t\tthrow new MetaDataException(_loc.get(\"empty-fg-name\", this));\n        if (_fgMap == null)\n            _fgMap = new HashMap<>();\n        FetchGroup fg = _fgMap.get(name);\n        if (fg == null) {\n        \tfg = new FetchGroup(this, name);\n        \t_fgMap.put(name, fg);\n            _fgs = null;\n            _customFGs = null;\n        }\n        return fg;\n    }\n    /**\n     * Remove a declared fetch group.\n     */\n    public boolean removeDeclaredFetchGroup(FetchGroup fg) {\n        if (fg == null)\n            return false;\n        if (_fgMap.remove(fg.getName()) != null) {\n            _fgs = null;\n            _customFGs = null;\n            return true;\n        }\n        return false;\n    }\n    /////////////////\n    // SourceTracker\n    /////////////////\n    @Override\n    public File getSourceFile() {\n        return _srcFile;\n    }\n    @Override\n    public Object getSourceScope() {\n        return null;\n    }\n    @Override\n    public int getSourceType() {\n        return _srcType;\n    }\n    public void setSource(File file, int srcType, String srcName) {\n        _srcFile = file;\n        _srcType = srcType;\n        _srcName = srcName;\n    }\n    @Override\n    public String getResourceName() {\n        return _type.getName();\n    }\n    @Override\n    public int getLineNumber() {\n        return _lineNum;\n    }\n    public void setLineNumber(int lineNum) {\n        _lineNum = lineNum;\n    }\n    @Override\n    public int getColNumber() {\n        return _colNum;\n    }\n    public void setColNumber(int colNum) {\n        _colNum = colNum;\n    }\n    /**\n     * The source mode this metadata has been loaded under.\n     */\n    public int getSourceMode() {\n        return _srcMode;\n    }\n    /**\n     * The source mode this metadata has been loaded under.\n     */\n    public void setSourceMode(int mode) {\n        _srcMode = mode;\n    }\n    /**\n     * The source mode this metadata has been loaded under.\n     */\n    public void setSourceMode(int mode, boolean on) {\n        if (mode == MODE_NONE)\n            _srcMode = mode;\n        else if (on)\n            _srcMode |= mode;\n        else\n            _srcMode &= ~mode;\n    }\n    /**\n     * The index in which this class was listed in the metadata. Defaults to\n     * <code>-1</code> if this class was not listed in the metadata.\n     */\n    public int getListingIndex() {\n        return _listIndex;\n    }\n    /**\n     * The index in which this field was listed in the metadata. Defaults to\n     * <code>-1</code> if this class was not listed in the metadata.\n     */\n    public void setListingIndex(int index) {\n        _listIndex = index;\n    }\n    ///////////////\n    // Commentable\n    ///////////////\n    @Override\n    public String[] getComments() {\n        return (_comments == null) ? EMPTY_COMMENTS : _comments;\n    }\n    @Override\n    public void setComments(String[] comments) {\n        _comments = comments;\n    }\n    //////////////\n    // State copy\n    //////////////\n    /**\n     * Copy the metadata from the given instance to this one. Do not\n     * copy mapping information.\n     */\n    public void copy(ClassMetaData meta) {\n        if (meta.getDescribedType() != _type)\n            throw new InternalException();\n        super.copy(meta);\n        // copy class-level info; use get methods to force resolution of\n        // lazy data\n        _super = meta.getPCSuperclass();\n        _objectId = meta.getObjectIdType();\n        _idClass = meta.getIdClass();\n        _extent = (meta.getRequiresExtent()) ? Boolean.TRUE : Boolean.FALSE;\n        _embedded = (meta.isEmbeddedOnly()) ? Boolean.TRUE : Boolean.FALSE;\n        _embeddable = meta._embeddable;\n        _interface = (meta.isManagedInterface()) ? Boolean.TRUE : Boolean.FALSE;\n        setIntercepting(meta.isIntercepting());\n        _abstract = meta.isAbstract();\n        _impl = meta.getInterfaceImpl();\n        _identity = meta._identity == null ? null : meta.getIdentityType();\n        _idStrategy = meta.getIdentityStrategy();\n        _seqName = meta.getIdentitySequenceName();\n        _seqMeta = null;\n        _alias = meta.getTypeAlias();\n        _accessType = meta.getAccessType();\n        // only copy this information if it wasn't set explicitly for this\n        // instance\n        if (DEFAULT_STRING.equals(_cacheName))\n            _cacheName = meta.getDataCacheName();\n        if (_cacheTimeout == Integer.MIN_VALUE)\n            _cacheTimeout = meta.getDataCacheTimeout();\n        _cacheEnabled = meta.getCacheEnabled();\n        _dataCacheEnabled = meta.getDataCacheEnabled();\n        if (_detachable == null)\n            _detachable = meta._detachable;\n        if (DEFAULT_STRING.equals(_detachState))\n            _detachState = meta.getDetachedState();\n        // synch field information; first remove extra fields\n        clearFieldCache();\n        _fieldMap.keySet().retainAll(meta._fieldMap.keySet());\n        // add copies of declared fields; other defined fields already copied\n        FieldMetaData[] fields = meta.getDeclaredFields();\n        FieldMetaData field;\n        for (int i = 0; i < fields.length; i++) {\n            field = getDeclaredField(fields[i].getName());\n            if (field == null)\n                field = addDeclaredField(fields[i].getName(),\n                    fields[i].getDeclaredType());\n            field.setDeclaredIndex(-1);\n            field.setIndex(-1);\n            field.copy(fields[i]);\n        }\n        // copy fetch groups\n        FetchGroup[] fgs = meta.getDeclaredFetchGroups();\n        FetchGroup fg;\n        for (int i = 0; i < fgs.length; i++) {\n            fg = addDeclaredFetchGroup(fgs[i].getName());\n            fg.copy(fgs[i]);\n        }\n        // copy interface re-mapping\n        _ifaceMap.clear();\n        _ifaceMap.putAll(meta._ifaceMap);\n    }\n    /**\n     * Recursive helper to copy embedded metadata.\n     */\n    private static void copy(ClassMetaData embed, ClassMetaData dec) {\n        ClassMetaData sup = dec.getPCSuperclassMetaData();\n        if (sup != null) {\n            embed.setPCSuperclass(sup.getDescribedType());\n            copy(embed.getPCSuperclassMetaData(), sup);\n        }\n        embed.copy(dec);\n    }\n    @Override\n    protected void addExtensionKeys(Collection exts) {\n        _repos.getMetaDataFactory().addClassExtensionKeys(exts);\n    }\n    /**\n     * Comparator used to put field metadata into listing order.\n     */\n    private static class ListingOrderComparator\n        implements Comparator<FieldMetaData> {\n        private static final ListingOrderComparator _instance\n            = new ListingOrderComparator();\n        /**\n         * Access singleton instance.\n         */\n        public static ListingOrderComparator getInstance() {\n            return _instance;\n        }\n        @Override\n        public int compare(FieldMetaData f1, FieldMetaData f2) {\n            if (f1 == f2)\n                return 0;\n            if (f1 == null)\n                return 1;\n            if (f2 == null)\n                return -1;\n            if (f1.getListingIndex() == f2.getListingIndex()) {\n                if (f1.getIndex() == f2.getIndex())\n                    return f1.getFullName(false).compareTo\n                        (f2.getFullName(false));\n\t\t\t\tif (f1.getIndex () == -1)\n\t\t\t\t\treturn 1;\n\t\t\t\tif (f2.getIndex () == -1)\n\t\t\t\t\treturn -1;\n\t\t\t\treturn f1.getIndex () - f2.getIndex ();\n\t\t\t}\n\t\t\tif (f1.getListingIndex () == -1)\n\t\t\t\treturn 1;\n\t\t\tif (f2.getListingIndex () == -1)\n\t\t\t\treturn -1;\n\t\t\treturn f1.getListingIndex () - f2.getListingIndex ();\n\t\t}\n\t}\n    public void registerForValueUpdate(String...values) {\n    \tif (values == null)\n    \t\treturn;\n    \tfor (String key : values) {\n    \t\tValue value = getRepository().getConfiguration()\n    \t\t\t.getValue(key);\n    \t\tif (value != null)\n    \t\t\tvalue.addListener(this);\n    \t}\n    }\n<fim_suffix>    @Override\n    public void valueChanged(Value val) {\n    \tif (val != null && val.matches(\"DataCacheTimeout\")) {\n    \t\t_cacheTimeout = Integer.MIN_VALUE;\n    \t}\n    }<fim_middle>// function below has no smell\n"}