{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.usergrid.persistence.graph;\n\n\nimport org.apache.usergrid.persistence.model.entity.Id;\n\nimport com.google.common.base.Optional;\n\n\n/**\n * Defines parameters for a search operation where searching from a source node\n * using a specific type on the edge.  This will return edges with all target types\n *\n * @author tnine */\n<fim_suffix>public interface SearchByEdgeType {\n\n    /**\n     * Get the Id of the node of this edge\n     * @return\n     */\n    Id getNode();\n\n\n    /**\n     * Get the name of the edge\n     * @return\n     */\n    String getType();\n\n    /**\n     * Get the Maximum Version of an edge we can return.\n     * This should always be a type 1 time uuid.\n     * @return\n     */\n    long getMaxTimestamp();\n\n    /**\n     * The optional start parameter.  All edges emitted with be > the specified start edge.\n     * This is useful for paging.  Simply use the last value returned in the previous call in the start parameter\n     * @return\n     */\n    Optional<Edge> last();\n\n    /**\n     * Get the direction we're seeking\n     * @return\n     */\n    Order getOrder();\n\n    /**\n     * Return true to filter marked edges from the results\n     * @return\n     */\n    boolean filterMarked();\n\n\n    /**\n     * Options for ordering.  By default, we want to perform descending for common use cases and read speed.  This is our our data\n     * is optimized in cassandra\n     */\n    enum Order {\n        DESCENDING,\n        ASCENDING\n    }\n\n}<fim_middle>// class below has no smell\n"}