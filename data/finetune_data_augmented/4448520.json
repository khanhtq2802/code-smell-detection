{"text": "<fim_prefix>          out.isSet = 1;\n        } catch (java.io.IOException e) {\n          throw new org.apache.drill.common.exceptions.DrillRuntimeException(\"Failed to get HyperLogLog output\", e);\n        }\n      } else {\n        out.isSet = 0;\n      }\n    }\n    @Override\n    public void reset() {\n      work.obj = new com.clearspring.analytics.stream.cardinality.HyperLogLog(hllAccuracy.value);\n    }\n  }\n  @FunctionTemplate(name = \"hll\", scope = FunctionTemplate.FunctionScope.POINT_AGGREGATE)\n  public static class NullableIntHLLFunction implements DrillAggFunc {\n    @Param\n    NullableIntHolder in;\n    @Workspace\n    ObjectHolder work;\n    @Output\n    NullableVarBinaryHolder out;\n    @Inject OptionManager options;\n    @Inject DrillBuf buffer;\n    @Workspace IntHolder hllAccuracy;\n    @Override\n    public void setup() {\n      work = new ObjectHolder();\n      hllAccuracy.value = (int) options.getLong(org.apache.drill.exec.ExecConstants.HLL_ACCURACY);\n      work.obj = new com.clearspring.analytics.stream.cardinality.HyperLogLog(hllAccuracy.value);\n    }\n    @Override\n    public void add() {\n      if (work.obj != null) {\n        com.clearspring.analytics.stream.cardinality.HyperLogLog hll =\n                (com.clearspring.analytics.stream.cardinality.HyperLogLog) work.obj;\n        if (in.isSet == 1) {\n          hll.offer(in.value);\n        } else {\n          hll.offer(null);\n        }\n      }\n    }\n    @Override\n    public void output() {\n      if (work.obj != null) {\n        com.clearspring.analytics.stream.cardinality.HyperLogLog hll =\n                (com.clearspring.analytics.stream.cardinality.HyperLogLog) work.obj;\n        try {\n          byte[] ba = hll.getBytes();\n          out.buffer = buffer.reallocIfNeeded(ba.length);\n          out.start = 0;\n          out.end = ba.length;\n          out.buffer.setBytes(0, ba);\n          out.isSet = 1;\n        } catch (java.io.IOException e) {\n          throw new org.apache.drill.common.exceptions.DrillRuntimeException(\"Failed to get HyperLogLog output\", e);\n        }\n      } else {\n        out.isSet = 0;\n      }\n    }\n    @Override\n    public void reset() {\n      work.obj = new com.clearspring.analytics.stream.cardinality.HyperLogLog(hllAccuracy.value);\n    }\n  }\n  @FunctionTemplate(name = \"hll\", scope = FunctionTemplate.FunctionScope.POINT_AGGREGATE)\n  public static class BigIntHLLFunction implements DrillAggFunc {\n    @Param\n    BigIntHolder in;\n    @Workspace\n    ObjectHolder work;\n    @Output\n    NullableVarBinaryHolder out;\n    @Inject OptionManager options;\n    @Inject DrillBuf buffer;\n    @Workspace IntHolder hllAccuracy;\n    @Override\n    public void setup() {\n      work = new ObjectHolder();\n      hllAccuracy.value = (int) options.getLong(org.apache.drill.exec.ExecConstants.HLL_ACCURACY);\n      work.obj = new com.clearspring.analytics.stream.cardinality.HyperLogLog(hllAccuracy.value);\n    }\n    @Override\n    public void add() {\n      if (work.obj != null) {\n        com.clearspring.analytics.stream.cardinality.HyperLogLog hll =\n                (com.clearspring.analytics.stream.cardinality.HyperLogLog) work.obj;\n        hll.offer(in.value);\n      }\n    }\n    @Override\n    public void output() {\n      if (work.obj != null) {\n        com.clearspring.analytics.stream.cardinality.HyperLogLog hll =\n                (com.clearspring.analytics.stream.cardinality.HyperLogLog) work.obj;\n        try {\n          byte[] ba = hll.getBytes();\n          out.buffer = buffer.reallocIfNeeded(ba.length);\n          out.start = 0;\n          out.end = ba.length;\n          out.buffer.setBytes(0, ba);\n          out.isSet = 1;\n        } catch (java.io.IOException e) {\n          throw new org.apache.drill.common.exceptions.DrillRuntimeException(\"Failed to get HyperLogLog output\", e);\n        }\n      } else {\n        out.isSet = 0;\n      }\n    }\n    @Override\n    public void reset() {\n      work.obj = new com.clearspring.analytics.stream.cardinality.HyperLogLog(hllAccuracy.value);\n    }\n  }\n  @FunctionTemplate(name = \"hll\", scope = FunctionTemplate.FunctionScope.POINT_AGGREGATE)\n  public static class NullableBigIntHLLFunction implements DrillAggFunc {\n    @Param\n    NullableBigIntHolder in;\n    @Workspace\n    ObjectHolder work;\n    @Output\n    NullableVarBinaryHolder out;\n    @Inject OptionManager options;\n    @Inject DrillBuf buffer;\n    @Workspace IntHolder hllAccuracy;\n    @Override\n    public void setup() {\n      work = new ObjectHolder();\n      hllAccuracy.value = (int) options.getLong(org.apache.drill.exec.ExecConstants.HLL_ACCURACY);\n      work.obj = new com.clearspring.analytics.stream.cardinality.HyperLogLog(hllAccuracy.value);\n    }\n    @Override\n    public void add() {\n      if (work.obj != null) {\n        com.clearspring.analytics.stream.cardinality.HyperLogLog hll =\n                (com.clearspring.analytics.stream.cardinality.HyperLogLog) work.obj;\n        if (in.isSet == 1) {\n          hll.offer(in.value);\n        } else {\n          hll.offer(null);\n        }\n      }\n    }\n    @Override\n    public void output() {\n      if (work.obj != null) {\n        com.clearspring.analytics.stream.cardinality.HyperLogLog hll =\n                (com.clearspring.analytics.stream.cardinality.HyperLogLog) work.obj;\n        try {\n          byte[] ba = hll.getBytes();\n          out.buffer = buffer.reallocIfNeeded(ba.length);\n          out.start = 0;\n          out.end = ba.length;\n          out.buffer.setBytes(0, ba);\n          out.isSet = 1;\n        } catch (java.io.IOException e) {\n          throw new org.apache.drill.common.exceptions.DrillRuntimeException(\"Failed to get HyperLogLog output\", e);\n        }\n      } else {\n        out.isSet = 0;\n      }\n    }\n    @Override\n    public void reset() {\n      work.obj = new com.clearspring.analytics.stream.cardinality.HyperLogLog(hllAccuracy.value);\n    }\n  }\n  @FunctionTemplate(name = \"hll\", scope = FunctionTemplate.FunctionScope.POINT_AGGREGATE)\n  public static class Float4HLLFunction implements DrillAggFunc {\n    @Param\n    Float4Holder in;\n    @Workspace\n    ObjectHolder work;\n    @Output\n    NullableVarBinaryHolder out;\n    @Inject OptionManager options;\n    @Inject DrillBuf buffer;\n    @Workspace IntHolder hllAccuracy;\n    @Override\n    public void setup() {\n      work = new ObjectHolder();\n      hllAccuracy.value = (int) options.getLong(org.apache.drill.exec.ExecConstants.HLL_ACCURACY);\n      work.obj = new com.clearspring.analytics.stream.cardinality.HyperLogLog(hllAccuracy.value);\n    }\n    @Override\n    public void add() {\n      if (work.obj != null) {\n        com.clearspring.analytics.stream.cardinality.HyperLogLog hll =\n                (com.clearspring.analytics.stream.cardinality.HyperLogLog) work.obj;\n        hll.offer(in.value);\n      }\n    }\n<fim_suffix>    @Override\n    public void output() {\n      if (work.obj != null) {\n        com.clearspring.analytics.stream.cardinality.HyperLogLog hll =\n                (com.clearspring.analytics.stream.cardinality.HyperLogLog) work.obj;\n        try {\n          byte[] ba = hll.getBytes();\n          out.buffer = buffer.reallocIfNeeded(ba.length);\n          out.start = 0;\n          out.end = ba.length;\n          out.buffer.setBytes(0, ba);\n          out.isSet = 1;\n        } catch (java.io.IOException e) {\n          throw new org.apache.drill.common.exceptions.DrillRuntimeException(\"Failed to get HyperLogLog output\", e);\n        }\n      } else {\n        out.isSet = 0;\n      }\n    }<fim_middle>// function below has no smell\n"}