{"text": "<fim_prefix>        }\n    }\n    private static final class BetweenInclusiveFrom<T extends Comparable<? super T>>\n            extends RangePredicate<T>\n    {\n        private static final long serialVersionUID = 1L;\n        private BetweenInclusiveFrom(T newCompareFrom, T newCompareTo)\n        {\n            super(newCompareFrom, newCompareTo);\n        }\n        @Override\n        public boolean accept(T o)\n        {\n            return o.compareTo(this.compareFrom) >= 0 && o.compareTo(this.compareTo) < 0;\n        }\n    }\n    private static final class BetweenExclusive<T extends Comparable<? super T>>\n            extends RangePredicate<T>\n    {\n        private static final long serialVersionUID = 1L;\n        private BetweenExclusive(T newCompareFrom, T newCompareTo)\n        {\n            super(newCompareFrom, newCompareTo);\n        }\n        @Override\n        public boolean accept(T o)\n        {\n            return o.compareTo(this.compareFrom) > 0 && o.compareTo(this.compareTo) < 0;\n        }\n    }\n    protected static class LessThanOrEqualPredicate<T extends Comparable<? super T>>\n            extends CompareToPredicate<T>\n    {\n        private static final long serialVersionUID = 1L;\n        protected LessThanOrEqualPredicate(T newCompareTo)\n        {\n            super(newCompareTo);\n        }\n        @Override\n        public boolean accept(T o)\n        {\n            return o.compareTo(this.compareTo) <= 0;\n        }\n        @Override\n        public String toString()\n        {\n            return \"Predicates.lessThanOrEqualTo(\" + this.compareTo + ')';\n        }\n    }\n    protected static class GreaterThanPredicate<T extends Comparable<? super T>>\n            extends CompareToPredicate<T>\n    {\n        private static final long serialVersionUID = 1L;\n        protected GreaterThanPredicate(T newCompareTo)\n        {\n            super(newCompareTo);\n        }\n        @Override\n        public boolean accept(T o)\n        {\n            return o.compareTo(this.compareTo) > 0;\n        }\n        @Override\n        public String toString()\n        {\n            return \"Predicates.greaterThan(\" + this.compareTo + ')';\n        }\n    }\n    protected static class GreaterThanOrEqualPredicate<T extends Comparable<? super T>>\n            extends CompareToPredicate<T>\n    {\n        private static final long serialVersionUID = 1L;\n        protected GreaterThanOrEqualPredicate(T newCompareTo)\n        {\n            super(newCompareTo);\n        }\n        @Override\n        public boolean accept(T o)\n        {\n            return o.compareTo(this.compareTo) >= 0;\n        }\n        @Override\n        public String toString()\n        {\n            return \"Predicates.greaterThanOrEqualTo(\" + this.compareTo + ')';\n        }\n    }\n    private static final class AndIterablePredicate<T>\n            extends AbstractIterablePredicate<T>\n    {\n        private static final long serialVersionUID = 1L;\n        private AndIterablePredicate(Iterable<? extends Predicate<? super T>> predicates)\n        {\n            super(predicates);\n        }\n        @Override\n        protected String getTypeName()\n        {\n            return \"and\";\n        }\n        @Override\n        public boolean accept(T anObject)\n        {\n            Predicate<Predicate<? super T>> predicate = aPredicate -> aPredicate.accept(anObject);\n            return Iterate.allSatisfy(this.predicates, predicate);\n        }\n    }\n    private static final class OrIterablePredicate<T>\n            extends AbstractIterablePredicate<T>\n    {\n        private static final long serialVersionUID = 1L;\n        private OrIterablePredicate(Iterable<? extends Predicate<? super T>> predicates)\n        {\n            super(predicates);\n        }\n        @Override\n        protected String getTypeName()\n        {\n            return \"or\";\n        }\n        @Override\n        public boolean accept(T anObject)\n        {\n            Predicate<Predicate<? super T>> predicate = aPredicate -> aPredicate.accept(anObject);\n            return Iterate.anySatisfy(this.predicates, predicate);\n        }\n    }\n    private static final class NoneOfIterablePredicate<T>\n            extends AbstractIterablePredicate<T>\n    {\n        private static final long serialVersionUID = 1L;\n        private NoneOfIterablePredicate(Iterable<? extends Predicate<? super T>> predicates)\n        {\n            super(predicates);\n        }\n        @Override\n        protected String getTypeName()\n        {\n            return \"noneOf\";\n        }\n        @Override\n        public boolean accept(T anObject)\n        {\n            Predicate<Predicate<? super T>> predicate = aPredicate -> !aPredicate.accept(anObject);\n            return Iterate.allSatisfy(this.predicates, predicate);\n        }\n    }\n    private abstract static class AbstractIterablePredicate<T>\n            extends Predicates<T>\n    {\n        private static final long serialVersionUID = 1L;\n        protected final Iterable<? extends Predicate<? super T>> predicates;\n        private AbstractIterablePredicate(Iterable<? extends Predicate<? super T>> predicates)\n        {\n            this.predicates = predicates;\n        }\n        protected abstract String getTypeName();\n        @Override\n        public String toString()\n        {\n            return \"Predicates.\" + this.getTypeName() + '(' + this.predicates + ')';\n        }\n    }\n    private static final class AndPredicate<T>\n            extends Predicates<T>\n    {\n        private static final long serialVersionUID = 1L;\n        private final Predicate<? super T> left;\n        private final Predicate<? super T> right;\n        private AndPredicate(Predicate<? super T> one, Predicate<? super T> two)\n        {\n            this.left = one;\n            this.right = two;\n        }\n        @Override\n        public boolean accept(T anObject)\n        {\n            return this.left.accept(anObject) && this.right.accept(anObject);\n        }\n        @Override\n        public String toString()\n        {\n            return this.left + \".and(\" + this.right + ')';\n        }\n    }\n    private static final class NeitherPredicate<T>\n            extends Predicates<T>\n    {\n        private static final long serialVersionUID = 1L;\n        private final Predicate<? super T> left;\n        private final Predicate<? super T> right;\n        private NeitherPredicate(Predicate<? super T> one, Predicate<? super T> two)\n        {\n            this.left = one;\n            this.right = two;\n        }\n        @Override\n        public boolean accept(T anObject)\n        {\n            return !this.left.accept(anObject) && !this.right.accept(anObject);\n        }\n        @Override\n        public String toString()\n        {\n            return \"Predicates.neither(\" + this.left + \", \" + this.right + ')';\n        }\n    }\n    private static final class OrPredicate<T>\n            extends Predicates<T>\n    {\n        private static final long serialVersionUID = 1L;\n        private final Predicate<? super T> left;\n        private final Predicate<? super T> right;\n        private OrPredicate(Predicate<? super T> one, Predicate<? super T> two)\n        {\n            this.left = one;\n            this.right = two;\n        }\n        @Override\n        public boolean accept(T anObject)\n        {\n            return this.left.accept(anObject) || this.right.accept(anObject);\n        }\n        @Override\n        public String toString()\n        {\n            return this.left + \".or(\" + this.right + ')';\n        }\n    }\n    private static final class NotPredicate<T>\n            extends Predicates<T>\n    {\n        private static final long serialVersionUID = 1L;\n        private final Predicate<T> predicate;\n        private NotPredicate(Predicate<T> newPredicate)\n        {\n            this.predicate = newPredicate;\n        }\n        @Override\n        public boolean accept(T anObject)\n        {\n            return !this.predicate.accept(anObject);\n        }\n        @Override\n        public String toString()\n        {\n            return \"Predicates.not(\" + this.predicate + ')';\n        }\n    }\n    private static final class EqualPredicate\n            extends Predicates<Object>\n    {\n        private static final long serialVersionUID = 1L;\n        private final Object compareObject;\n        private EqualPredicate(Object newCompareObject)\n        {\n            this.compareObject = newCompareObject;\n        }\n        @Override\n        public boolean accept(Object anObject)\n        {\n            return this.compareObject.equals(anObject);\n        }\n        @Override\n        public String toString()\n        {\n            return \"Predicates.equal(\" + this.compareObject + ')';\n        }\n    }\n    private static final class InCollectionPredicate\n            extends Predicates<Object>\n    {\n        private static final long serialVersionUID = 1L;\n        private final Collection<?> collection;\n        private InCollectionPredicate(Collection<?> collection)\n        {\n            this.collection = collection;\n        }\n        @Override\n        public boolean accept(Object anObject)\n        {\n            return this.collection.contains(anObject);\n        }\n        @Override\n        public String toString()\n        {\n            return \"Predicates.in(\" + this.collection + ')';\n        }\n    }\n    private static final class NotInCollectionPredicate\n            extends Predicates<Object>\n    {\n        private static final long serialVersionUID = 1L;\n        private final Collection<?> collection;\n        private NotInCollectionPredicate(Collection<?> collection)\n        {\n            this.collection = collection;\n        }\n<fim_suffix>        @Override\n        public boolean accept(Object anObject)\n        {\n            return !this.collection.contains(anObject);\n        }<fim_middle>// function below has no smell\n"}