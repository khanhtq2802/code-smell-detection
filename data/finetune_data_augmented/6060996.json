{"text": "<fim_prefix>/*\n * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage org.eclipse.ceylon.javax.lang.model.util;\n\nimport static org.eclipse.ceylon.javax.lang.model.SourceVersion.*;\n\nimport org.eclipse.ceylon.javax.annotation.processing.SupportedSourceVersion;\nimport org.eclipse.ceylon.javax.lang.model.SourceVersion;\nimport org.eclipse.ceylon.javax.lang.model.element.*;\n\n/**\n * A simple visitor of program elements with default behavior\n * appropriate for the {@link SourceVersion#RELEASE_7 RELEASE_7}\n * source version.\n *\n * Visit methods corresponding to {@code RELEASE_7} and earlier\n * language constructs call {@link #defaultAction defaultAction},\n * passing their arguments to {@code defaultAction}'s corresponding\n * parameters.\n *\n * <p> Methods in this class may be overridden subject to their\n * general contract.  Note that annotating methods in concrete\n * subclasses with {@link java.lang.Override @Override} will help\n * ensure that methods are overridden as intended.\n *\n * <p> <b>WARNING:</b> The {@code ElementVisitor} interface\n * implemented by this class may have methods added to it in the\n * future to accommodate new, currently unknown, language structures\n * added to future versions of the Java&trade; programming language.\n * Therefore, methods whose names begin with {@code \"visit\"} may be\n * added to this class in the future; to avoid incompatibilities,\n * classes which extend this class should not declare any instance\n * methods with names beginning with {@code \"visit\"}.\n *\n * <p>When such a new visit method is added, the default\n * implementation in this class will be to call the {@link\n * #visitUnknown visitUnknown} method.  A new simple element visitor\n * class will also be introduced to correspond to the new language\n * level; this visitor will have different default behavior for the\n * visit method in question.  When the new visitor is introduced, all\n * or portions of this visitor may be deprecated.\n *\n * <p>Note that adding a default implementation of a new visit method\n * in a visitor class will occur instead of adding a <em>default\n * method</em> directly in the visitor interface since a Java SE 8\n * language feature cannot be used to this version of the API since\n * this version is required to be runnable on Java SE 7\n * implementations.  Future versions of the API that are only required\n * to run on Java SE 8 and later may take advantage of default methods\n * in this situation.\n *\n * @param <R> the return type of this visitor's methods.  Use {@code Void}\n *             for visitors that do not need to return results.\n * @param <P> the type of the additional parameter to this visitor's methods.  Use {@code Void}\n *              for visitors that do not need an additional parameter.\n *\n * @see SimpleElementVisitor6\n * @see SimpleElementVisitor8\n * @since 1.7\n */\n<fim_suffix>@SupportedSourceVersion(RELEASE_7)\npublic class SimpleElementVisitor7<R, P> extends SimpleElementVisitor6<R, P> {\n    /**\n     * Constructor for concrete subclasses; uses {@code null} for the\n     * default value.\n     */\n    protected SimpleElementVisitor7(){\n        super(null);\n    }\n\n    /**\n     * Constructor for concrete subclasses; uses the argument for the\n     * default value.\n     *\n     * @param defaultValue the value to assign to {@link #DEFAULT_VALUE}\n     */\n    protected SimpleElementVisitor7(R defaultValue){\n        super(defaultValue);\n    }\n\n    /**\n     * This implementation calls {@code defaultAction}.\n     *\n     * @param e {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitVariable(VariableElement e, P p) {\n        return defaultAction(e, p);\n    }\n}<fim_middle>// class below has no smell\n"}