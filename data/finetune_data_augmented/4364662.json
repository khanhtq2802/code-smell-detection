{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.cxf.rs.security.jose.jaxrs;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Type;\n\nimport javax.ws.rs.WebApplicationException;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.MultivaluedMap;\nimport javax.ws.rs.ext.MessageBodyReader;\nimport javax.ws.rs.ext.MessageBodyWriter;\n\nimport org.apache.cxf.rs.security.jose.jwk.JsonWebKeys;\nimport org.apache.cxf.rs.security.jose.jwk.JwkUtils;\n\npublic class JsonWebKeysProvider implements MessageBodyReader<JsonWebKeys>, MessageBodyWriter<JsonWebKeys> {\n\n    @Override\n    public boolean isReadable(Class<?> cls, Type type, Annotation[] anns, MediaType mt) {\n        return cls == JsonWebKeys.class;\n    }\n\n    @Override\n    public JsonWebKeys readFrom(Class<JsonWebKeys> cls, Type t, Annotation[] anns, MediaType mt,\n                             MultivaluedMap<String, String> headers, InputStream is) throws IOException,\n        WebApplicationException {\n        return JwkUtils.readJwkSet(is);\n    }\n\n    @Override\n    public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations,\n                               MediaType mediaType) {\n        return type == JsonWebKeys.class;\n    }\n\n    @Override\n    public long getSize(JsonWebKeys t, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType) {\n        return -1;\n    }\n\n<fim_suffix>    @Override\n    public void writeTo(JsonWebKeys t, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream) throws IOException, WebApplicationException {\n        JwkUtils.jwkSetToJson(t, entityStream);\n\n    }\n\n}<fim_middle>// function below has no smell\n"}