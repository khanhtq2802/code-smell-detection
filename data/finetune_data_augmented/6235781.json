{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2017 itemis AG and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Matthias Wienand (itemis AG) - initial API and implementation\n *\n *******************************************************************************/\npackage org.eclipse.gef.mvc.tests.fx;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.eclipse.gef.common.adapt.AdapterKey;\nimport org.eclipse.gef.geometry.planar.Dimension;\nimport org.eclipse.gef.mvc.fx.MvcFxModule;\nimport org.eclipse.gef.mvc.fx.domain.IDomain;\nimport org.eclipse.gef.mvc.fx.parts.AbstractContentPart;\nimport org.eclipse.gef.mvc.fx.parts.IContentPart;\nimport org.eclipse.gef.mvc.fx.parts.IContentPartFactory;\nimport org.eclipse.gef.mvc.fx.parts.IResizableContentPart;\nimport org.eclipse.gef.mvc.fx.policies.ResizePolicy;\nimport org.eclipse.gef.mvc.fx.viewer.IViewer;\nimport org.eclipse.gef.mvc.tests.fx.rules.FXApplicationThreadRule;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\n\nimport com.google.common.collect.HashMultimap;\nimport com.google.common.collect.SetMultimap;\nimport com.google.inject.Guice;\nimport com.google.inject.Inject;\nimport com.google.inject.Injector;\nimport com.google.inject.multibindings.MapBinder;\n\nimport javafx.embed.swing.JFXPanel;\nimport javafx.scene.Node;\nimport javafx.scene.Scene;\nimport javafx.scene.layout.Region;\n\n<fim_suffix>public class ResizePolicyTests {\n\n\tstatic class DimensionPart extends AbstractContentPart<Region> implements IResizableContentPart<Region> {\n\t\tprivate Dimension size = new Dimension(0, 0);\n\n\t\t@Override\n\t\tprotected Region doCreateVisual() {\n\t\t\treturn new Region() {\n\t\t\t\t@Override\n\t\t\t\tprotected double computeMinHeight(double width) {\n\t\t\t\t\treturn 35;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected double computeMinWidth(double height) {\n\t\t\t\t\treturn 45;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t@Override\n\t\tprotected SetMultimap<? extends Object, String> doGetContentAnchorages() {\n\t\t\treturn HashMultimap.create();\n\t\t}\n\n\t\t@Override\n\t\tprotected List<? extends Object> doGetContentChildren() {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\t@Override\n\t\tprotected void doRefreshVisual(Region visual) {\n\t\t\tvisual.resize(size.width, size.height);\n\t\t}\n\n\t\t@Override\n\t\tpublic Dimension getContent() {\n\t\t\treturn size;\n\t\t}\n\n\t\t@Override\n\t\tpublic Dimension getContentSize() {\n\t\t\treturn size.getCopy();\n\t\t}\n\n\t\t@Override\n\t\tpublic void setContentSize(Dimension totalSize) {\n\t\t\tsize.setSize(totalSize);\n\t\t}\n\t}\n\n\tstatic class ResizePolicyTestsContentPartFactory implements IContentPartFactory {\n\t\t@Inject\n\t\tprivate Injector injector;\n\n\t\t@Override\n\t\tpublic IContentPart<? extends Node> createContentPart(Object content, Map<Object, Object> contextMap) {\n\t\t\tif (content instanceof Dimension) {\n\t\t\t\treturn injector.getInstance(DimensionPart.class);\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(content.getClass().toString());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate ResizePolicy resizePolicy;\n\n\t@Inject\n\tprivate IDomain domain;\n\n\t/**\n\t * Ensure all tests are executed on the JavaFX application thread (and the\n\t * JavaFX toolkit is properly initialized).\n\t */\n\t@Rule\n\tpublic FXApplicationThreadRule fxApplicationThreadRule = new FXApplicationThreadRule();\n\n\tpublic ResizePolicy createResizePolicy() {\n\t\t// create injector\n\t\tInjector injector = Guice.createInjector(new MvcFxModule() {\n\t\t\t@Override\n\t\t\tprotected void bindAbstractContentPartAdapters(MapBinder<AdapterKey<?>, Object> adapterMapBinder) {\n\t\t\t\tsuper.bindAbstractContentPartAdapters(adapterMapBinder);\n\t\t\t\tadapterMapBinder.addBinding(AdapterKey.defaultRole()).to(ResizePolicy.class);\n\t\t\t}\n\n\t\t\tprotected void bindIContentPartFactory() {\n\t\t\t\tbinder().bind(IContentPartFactory.class).to(ResizePolicyTestsContentPartFactory.class);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void configure() {\n\t\t\t\tsuper.configure();\n\t\t\t\tbindIContentPartFactory();\n\t\t\t}\n\t\t});\n\t\tinjector.injectMembers(this);\n\t\t// get viewer\n\t\tIViewer viewer = domain.getAdapter(AdapterKey.get(IViewer.class, IDomain.CONTENT_VIEWER_ROLE));\n\t\t// hook viewer to scene\n\t\tScene scene = new Scene(viewer.getCanvas(), 100, 100);\n\t\tJFXPanel panel = new JFXPanel();\n\t\tpanel.setScene(scene);\n\t\t// set viewer contents\n\t\tDimension content = new Dimension(0, 0);\n\t\tviewer.getContents().setAll(Collections.singletonList(content));\n\t\t// activate domain\n\t\tdomain.activate();\n\t\t// get content part for the content object\n\t\tIContentPart<? extends Node> contentPart = viewer.getContentPartMap().get(content);\n\t\t// get transform policy for that part\n\t\treturn contentPart.getAdapter(ResizePolicy.class);\n\t}\n\n\t@Before\n\tpublic void setUp() {\n\t\tresizePolicy = createResizePolicy();\n\t\tresizePolicy.init();\n\t}\n\n\t@Test\n\tpublic void test_minimumSize_Region() {\n\t\t/*\n\t\t * This test ensures that Bugzilla #512620 is not re-introduced by a\n\t\t * later change.\n\t\t */\n\n\t\t// check resize policy is reset\n\t\tassertEquals(0d, resizePolicy.getDeltaWidth(), 0.01);\n\t\tassertEquals(0d, resizePolicy.getDeltaHeight(), 0.01);\n\n\t\t// set region's min-size to USE_COMPUTED_SIZE\n\t\tRegion region = (Region) resizePolicy.getHost().getVisual();\n\t\tregion.setMinSize(Region.USE_COMPUTED_SIZE, Region.USE_COMPUTED_SIZE);\n\t\tassertEquals(Region.USE_COMPUTED_SIZE, region.getMinWidth(), 0.01);\n\t\tassertEquals(Region.USE_COMPUTED_SIZE, region.getMinHeight(), 0.01);\n\n\t\t// resize below minimum size using ResizePolicy\n\t\tresizePolicy.resize(region.minWidth(-1) - 5, region.minHeight(-1) - 5);\n\t\t// ensure minimum size is respected\n\t\tassertEquals(region.minWidth(-1), resizePolicy.getDeltaWidth(), 0.01);\n\t\tassertEquals(region.minHeight(-1), resizePolicy.getDeltaHeight(), 0.01);\n\t}\n}<fim_middle>// class below has no smell\n"}