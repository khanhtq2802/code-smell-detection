{"text": "<fim_prefix>    private static final String allowEditAnnotationsDefault = UtilProperties.getPropertyValue(\"fop\", \"fop.allowEditAnnotations.default\", \"true\");\n    private static final String allowFillInFormsDefault = UtilProperties.getPropertyValue(\"fop\", \"fop.allowFillInForms.default\", \"true\");\n    private static final String allowAccessContentDefault = UtilProperties.getPropertyValue(\"fop\", \"fop.allowAccessContent.default\", \"true\");\n    private static final String allowAssembleDocumentDefault = UtilProperties.getPropertyValue(\"fop\", \"fop.allowAssembleDocument.default\", \"true\");\n    private static final String allowPrintHqDefault = UtilProperties.getPropertyValue(\"fop\", \"fop.allowPrintHq.default\", \"true\");\n    private static final String encryptMetadataDefault = UtilProperties.getPropertyValue(\"fop\", \"fop.encrypt-metadata.default\", \"true\");\n    private static final String fopPath = UtilProperties.getPropertyValue(\"fop\", \"fop.path\", \"/framework/webapp/config\");\n    private static final String fopFontBaseProperty = UtilProperties.getPropertyValue(\"fop\", \"fop.font.base.url\", \"/framework/webapp/config/\");\n    private ApacheFopWorker() {}\n    /** Returns an instance of the FopFactory class. FOP documentation recommends\n     * the reuse of the factory instance because of the startup time.\n     * @return FopFactory The FopFactory instance\n     */\n    public static FopFactory getFactoryInstance() {\n        if (fopFactory == null) {\n            synchronized (ApacheFopWorker.class) {\n                if (fopFactory != null) {\n                    return fopFactory;\n                }\n                try {\n                    String ofbizHome = System.getProperty(\"ofbiz.home\");\n                    File userConfigFile = FileUtil.getFile(ofbizHome + fopPath + \"/fop.xconf\");\n                    if (userConfigFile.exists()) {\n                        fopFactory = FopFactory.newInstance(userConfigFile);\n                    } else {\n                        Debug.logWarning(\"FOP configuration file not found: \" + userConfigFile, module);\n                    }\n                    File fontBaseFile = FileUtil.getFile(ofbizHome + fopFontBaseProperty);\n                    if (fontBaseFile.isDirectory()) {\n                        fopFactory.getFontManager().setResourceResolver(ResourceResolverFactory.createDefaultInternalResourceResolver(fontBaseFile.toURI()));\n                    } else {\n                        Debug.logWarning(\"FOP font base URL not found: \" + fontBaseFile, module);\n                    }\n                    Debug.logInfo(\"FOP FontBaseURL: \" + fopFactory.getFontManager().getResourceResolver().getBaseURI(), module);\n                } catch (Exception e) {\n                    Debug.logWarning(e, \"Error reading FOP configuration: \", module);\n                }\n            }\n        }\n        return fopFactory;\n    }\n    /** Transform an xsl-fo file to the specified file format.\n     * @param srcFile The xsl-fo File instance\n     * @param destFile The target (result) File instance\n     * @param stylesheetFile Optional stylesheet File instance\n     * @param outputFormat Optional output format, defaults to \"application/pdf\"\n     */\n    public static void transform(File srcFile, File destFile, File stylesheetFile, String outputFormat) throws IOException, FOPException {\n        StreamSource src = new StreamSource(srcFile);\n        StreamSource stylesheet = stylesheetFile == null ? null : new StreamSource(stylesheetFile);\n        BufferedOutputStream dest = new BufferedOutputStream(new FileOutputStream(destFile));\n        Fop fop = createFopInstance(dest, outputFormat);\n        transform(src, stylesheet, fop);\n        dest.close();\n    }\n    /** Transform an xsl-fo InputStream to the specified OutputStream format.\n     * @param srcStream The xsl-fo InputStream instance\n     * @param destStream The target (result) OutputStream instance\n     * @param stylesheetStream Optional stylesheet InputStream instance\n     * @param outputFormat Optional output format, defaults to \"application/pdf\"\n     */\n    public static void transform(InputStream srcStream, OutputStream destStream, InputStream stylesheetStream, String outputFormat) throws FOPException {\n        StreamSource src = new StreamSource(srcStream);\n        StreamSource stylesheet = stylesheetStream == null ? null : new StreamSource(stylesheetStream);\n        Fop fop = createFopInstance(destStream, outputFormat);\n        transform(src, stylesheet, fop);\n    }\n    /** Transform an xsl-fo StreamSource to the specified output format.\n     * @param src The xsl-fo StreamSource instance\n     * @param stylesheet Optional stylesheet StreamSource instance\n     * @param fop\n     */\n    public static void transform(StreamSource src, StreamSource stylesheet, Fop fop) throws FOPException {\n        Result res = new SAXResult(fop.getDefaultHandler());\n        try {\n            TransformerFactory factory = TransformerFactory.newInstance();\n            Transformer transformer;\n            if (stylesheet == null) {\n                transformer = factory.newTransformer();\n            } else {\n                transformer = factory.newTransformer(stylesheet);\n            }\n            transformer.setURIResolver(new LocalResolver(transformer.getURIResolver()));\n            transformer.transform(src, res);\n        } catch (Exception e) {\n            throw new FOPException(e);\n        }\n    }\n    /** Returns a new Fop instance. Note: FOP documentation recommends using\n     * a Fop instance for one transform run only.\n     * @param out The target (result) OutputStream instance\n     * @param outputFormat Optional output format, defaults to \"application/pdf\"\n     * @return Fop instance\n     */\n    public static Fop createFopInstance(OutputStream out, String outputFormat) throws FOPException {\n        return createFopInstance(out, outputFormat, null);\n    }\n    /** Returns a new Fop instance. Note: FOP documentation recommends using\n     * a Fop instance for one transform run only.\n     * @param out The target (result) OutputStream instance\n     * @param outputFormat Optional output format, defaults to \"application/pdf\"\n     * @param foUserAgent FOUserAgent object which may contains encryption-params in render options\n     * @return Fop instance\n     */\n    public static Fop createFopInstance(OutputStream out, String outputFormat, FOUserAgent foUserAgent) throws FOPException {\n        if (UtilValidate.isEmpty(outputFormat)) {\n            outputFormat = MimeConstants.MIME_PDF;\n        }\n        if (UtilValidate.isEmpty(foUserAgent)) {\n            FopFactory fopFactory = getFactoryInstance();\n            foUserAgent = fopFactory.newFOUserAgent();\n        }\n        Fop fop;\n        if (out != null) {\n            fop = fopFactory.newFop(outputFormat, foUserAgent, out);\n        } else {\n            fop = fopFactory.newFop(outputFormat, foUserAgent);\n        }\n        return fop;\n    }\n    /** Returns a temporary File instance. The temporary file name starts with\n     * <a href=\"#tempFilePrefix\">tempFilePrefix</a> and ends with \".xml\".\n     * Calling methods are responsible for deleting the temporary file.<p>\n     * FOP performs transforms in memory, so if there is any chance FO output\n     * will be more than a few pages, it would be best to keep FO input in a temporary\n     * file.</p>\n     * @return File instance\n     */\n    public static File createTempFoXmlFile() throws IOException {\n        File tempXmlFile = File.createTempFile(tempFilePrefix, \".xml\");\n        tempXmlFile.deleteOnExit();\n        return tempXmlFile;\n    }\n    /** Returns a temporary File instance. The temporary file name starts with\n     * <a href=\"#tempFilePrefix\">tempFilePrefix</a> and ends with \".res\".\n     * Calling methods are responsible for deleting the temporary file.<p>\n     * FOP performs transforms in memory, so if there is any chance FO output\n     * will be more than a few pages, it would be best to keep FO output in a temporary\n     * file.</p>\n     * @return File instance\n     */\n    public static File createTempResultFile() throws IOException {\n        File tempResultFile = File.createTempFile(tempFilePrefix, \".res\");\n        tempResultFile.deleteOnExit();\n        return tempResultFile;\n    }\n    /** Local URI resolver for the Transformer class.\n     */\n    private static class LocalResolver implements URIResolver {\n        private URIResolver defaultResolver;\n        private LocalResolver() {}\n        private LocalResolver(URIResolver defaultResolver) {\n            this.defaultResolver = defaultResolver;\n        }\n        public Source resolve(String href, String base) throws TransformerException {\n            URL locationUrl = null;\n            try {\n                locationUrl = FlexibleLocation.resolveLocation(href);\n                if (locationUrl != null) {\n                    return new StreamSource(locationUrl.openStream());\n                }\n            } catch (Exception e) {\n                throw new TransformerException(e.getMessage());\n            }\n            return defaultResolver.resolve(href, base);\n        }\n    }\n    public static String getEncryptionLengthDefault() {\n        return encryptionLengthDefault;\n    }\n<fim_suffix>    public static String getUserPasswordDefault() {\n        return userPasswordDefault;\n    }<fim_middle>// function below has no smell\n"}