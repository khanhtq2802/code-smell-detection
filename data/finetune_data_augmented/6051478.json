{"text": "<fim_prefix>/*-\n *******************************************************************************\n * Copyright (c) 2015 Diamond Light Source Ltd.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * This file was auto-generated from the NXDL XML definition.\n * Generated at: 2017-06-23T10:28:44.471+01:00\n *******************************************************************************/\n\npackage org.eclipse.dawnsci.nexus.impl;\n\nimport java.util.Set;\nimport java.util.EnumSet;\nimport org.eclipse.dawnsci.analysis.api.tree.DataNode;\n\nimport org.eclipse.january.dataset.IDataset;\n\nimport org.eclipse.dawnsci.nexus.*;\n\n/**\n * A spin polarizer.\n * \n * @version 1.0\n */\npublic class NXpolarizerImpl extends NXobjectImpl implements NXpolarizer {\n\n\tprivate static final long serialVersionUID = 1L;  // no state in this class, so always compatible\n\n\n\tpublic static final Set<NexusBaseClass> PERMITTED_CHILD_GROUP_CLASSES = EnumSet.noneOf(NexusBaseClass.class);\n\n\tpublic NXpolarizerImpl() {\n\t\tsuper();\n\t}\n\n\tpublic NXpolarizerImpl(final long oid) {\n\t\tsuper(oid);\n\t}\n\t\n\t@Override\n\tpublic Class<? extends NXobject> getNXclass() {\n\t\treturn NXpolarizer.class;\n\t}\n\t\n\t@Override\n\tpublic NexusBaseClass getNexusBaseClass() {\n\t\treturn NexusBaseClass.NX_POLARIZER;\n\t}\n\t\n\t@Override\n\tpublic Set<NexusBaseClass> getPermittedChildGroupClasses() {\n\t\treturn PERMITTED_CHILD_GROUP_CLASSES;\n\t}\n\t\n\n\t@Override\n\tpublic IDataset getType() {\n\t\treturn getDataset(NX_TYPE);\n\t}\n\n\t@Override\n\tpublic String getTypeScalar() {\n\t\treturn getString(NX_TYPE);\n\t}\n\n\t@Override\n\tpublic DataNode setType(IDataset type) {\n\t\treturn setDataset(NX_TYPE, type);\n\t}\n\n\t@Override\n\tpublic DataNode setTypeScalar(String type) {\n\t\treturn setString(NX_TYPE, type);\n\t}\n\n<fim_suffix>\t@Override\n\tpublic IDataset getComposition() {\n\t\treturn getDataset(NX_COMPOSITION);\n\t}\n\n\t@Override\n\tpublic String getCompositionScalar() {\n\t\treturn getString(NX_COMPOSITION);\n\t}\n\n\t@Override\n\tpublic DataNode setComposition(IDataset composition) {\n\t\treturn setDataset(NX_COMPOSITION, composition);\n\t}\n\n\t@Override\n\tpublic DataNode setCompositionScalar(String composition) {\n\t\treturn setString(NX_COMPOSITION, composition);\n\t}\n\n\t@Override\n\tpublic IDataset getReflection() {\n\t\treturn getDataset(NX_REFLECTION);\n\t}\n\n\t@Override\n\tpublic Long getReflectionScalar() {\n\t\treturn getLong(NX_REFLECTION);\n\t}\n\n\t@Override\n\tpublic DataNode setReflection(IDataset reflection) {\n\t\treturn setDataset(NX_REFLECTION, reflection);\n\t}\n\n\t@Override\n\tpublic DataNode setReflectionScalar(Long reflection) {\n\t\treturn setField(NX_REFLECTION, reflection);\n\t}\n\n\t@Override\n\tpublic IDataset getEfficiency() {\n\t\treturn getDataset(NX_EFFICIENCY);\n\t}\n\n\t@Override\n\tpublic Double getEfficiencyScalar() {\n\t\treturn getDouble(NX_EFFICIENCY);\n\t}\n\n\t@Override\n\tpublic DataNode setEfficiency(IDataset efficiency) {\n\t\treturn setDataset(NX_EFFICIENCY, efficiency);\n\t}\n\n\t@Override\n\tpublic DataNode setEfficiencyScalar(Double efficiency) {\n\t\treturn setField(NX_EFFICIENCY, efficiency);\n\t}\n\n}<fim_middle>// function below has no smell\n"}