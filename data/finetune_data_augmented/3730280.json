{"text": "<fim_prefix>/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.alibaba.druid.support.monitor;\nimport static com.alibaba.druid.util.Utils.getBoolean;\nimport static com.alibaba.druid.util.Utils.getInteger;\nimport java.lang.management.ManagementFactory;\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport com.alibaba.druid.pool.DruidDataSource;\nimport com.alibaba.druid.pool.DruidDataSourceStatValue;\nimport com.alibaba.druid.stat.DruidDataSourceStatManager;\nimport com.alibaba.druid.stat.JdbcSqlStatValue;\nimport com.alibaba.druid.support.http.stat.WebAppStat;\nimport com.alibaba.druid.support.http.stat.WebAppStatManager;\nimport com.alibaba.druid.support.http.stat.WebAppStatValue;\nimport com.alibaba.druid.support.http.stat.WebURIStatValue;\nimport com.alibaba.druid.support.logging.Log;\nimport com.alibaba.druid.support.logging.LogFactory;\nimport com.alibaba.druid.support.monitor.dao.MonitorDao;\nimport com.alibaba.druid.support.spring.stat.SpringMethodStatValue;\nimport com.alibaba.druid.support.spring.stat.SpringStat;\nimport com.alibaba.druid.support.spring.stat.SpringStatManager;\nimport com.alibaba.druid.util.StringUtils;\nimport com.alibaba.druid.util.Utils;\nimport com.alibaba.druid.wall.WallProviderStatValue;\npublic class MonitorClient {\n    private final static Log         LOG                          = LogFactory.getLog(MonitorClient.class);\n    private final static long        DEFAULT_TIME_BETWEEN_COLLECT = 60 * 5;\n    private ScheduledExecutorService scheduler;\n    private int                      schedulerThreadSize          = 1;\n    private long                     timeBetweenSqlCollect        = DEFAULT_TIME_BETWEEN_COLLECT;\n    private long                     timeBetweenSpringCollect     = DEFAULT_TIME_BETWEEN_COLLECT;\n    private long                     timeBetweenWebUriCollect     = DEFAULT_TIME_BETWEEN_COLLECT;\n    private TimeUnit                 timeUnit                     = TimeUnit.SECONDS;\n    private boolean                  collectSqlEnable             = true;\n    private boolean                  collectSqlWallEnable         = true;\n    private boolean                  collectSpringMethodEnable    = true;\n    private boolean                  collectWebAppEnable          = true;\n    private boolean                  collectWebURIEnable          = true;\n    private MonitorDao               dao;\n    private String                   domain;\n    private String                   app;\n    private String                   cluster;\n    private String                   host;\n    private String                   ip;\n    private int                      pid;\n    public MonitorClient(){\n        String name = ManagementFactory.getRuntimeMXBean().getName();\n        String[] items = name.split(\"@\");\n        pid = Integer.parseInt(items[0]);\n        host = items[1];\n        ip = getLocalIPAddress().getHostAddress();\n        configFromProperty(System.getProperties());\n    }\n    public void configFromProperty(Properties properties) {\n        {\n            Integer value = getInteger(properties, \"druid.monitor.client.schedulerThreadSize\");\n            if (value != null) {\n                this.setSchedulerThreadSize(value);\n            }\n        }\n        {\n            Integer value = getInteger(properties, \"druid.monitor.client.timeBetweenSqlCollect\");\n            if (value != null) {\n                this.setTimeBetweenSqlCollect(value);\n            }\n        }\n        {\n            Integer value = getInteger(properties, \"druid.monitor.client.timeBetweenSpringCollect\");\n            if (value != null) {\n                this.setTimeBetweenSpringCollect(value);\n            }\n        }\n        {\n            Integer value = getInteger(properties, \"druid.monitor.client.timeBetweenWebUriCollect\");\n            if (value != null) {\n                this.setTimeBetweenWebUriCollect(value);\n            }\n        }\n        {\n            Boolean value = getBoolean(properties, \"druid.monitor.client.collectSqlEnable\");\n            if (value != null) {\n                this.setCollectSqlEnable(value);\n            }\n        }\n        {\n            Boolean value = getBoolean(properties, \"druid.monitor.client.collectSqlWallEnable\");\n            if (value != null) {\n                this.setCollectSqlWallEnable(value);\n            }\n        }\n        {\n            Boolean value = getBoolean(properties, \"druid.monitor.client.collectSpringMethodEnable\");\n            if (value != null) {\n                this.setCollectSpringMethodEnable(value);\n            }\n        }\n        {\n            Boolean value = getBoolean(properties, \"druid.monitor.client.collectWebAppEnable\");\n            if (value != null) {\n                this.setCollectWebAppEnable(value);\n            }\n        }\n        {\n            Boolean value = getBoolean(properties, \"druid.monitor.client.collectWebURIEnable\");\n            if (value != null) {\n                this.setCollectWebURIEnable(value);\n            }\n        }\n        {\n            domain = properties.getProperty(\"druid.monitor.domain\");\n            if (StringUtils.isEmpty(domain)) {\n                domain = \"default\";\n            }\n        }\n        {\n            app = properties.getProperty(\"druid.monitor.app\");\n            if (StringUtils.isEmpty(app)) {\n                app = \"default\";\n            }\n        }\n        {\n            cluster = properties.getProperty(\"druid.monitor.cluster\");\n            if (StringUtils.isEmpty(cluster)) {\n                cluster = \"default\";\n            }\n        }\n    }\n    public void stop() {\n    }\n<fim_suffix>    public void start() {\n        checkInst();\n        if (scheduler == null) {\n            scheduler = new ScheduledThreadPoolExecutor(schedulerThreadSize);\n        }\n        scheduler.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                collectSql();\n            }\n        }, timeBetweenSqlCollect, timeBetweenSqlCollect, timeUnit);\n        scheduler.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                collectSpringMethod();\n            }\n        }, timeBetweenSpringCollect, timeBetweenSpringCollect, timeUnit);\n        scheduler.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                collectWebURI();\n            }\n        }, timeBetweenWebUriCollect, timeBetweenWebUriCollect, timeUnit);\n    }\n    public ScheduledExecutorService getScheduler() {\n        return scheduler;\n    }\n    public void setScheduler(ScheduledExecutorService scheduler) {\n        this.scheduler = scheduler;\n    }\n    public void checkInst() {\n        try {\n            dao.insertAppIfNotExits(domain, app);\n            dao.insertClusterIfNotExits(domain, app, cluster);\n            dao.insertOrUpdateInstance(domain, app, cluster, host, ip, Utils.getStartTime(), pid);\n        } catch (Exception ex) {\n            LOG.error(\"checkInst error\", ex);\n        }\n    }\n    @SuppressWarnings(\"resource\")\n    public void collectSql() {\n        if ((!collectSqlEnable) && !collectSqlWallEnable) {\n            return;\n        }\n        Set<Object> dataSources = DruidDataSourceStatManager.getInstances().keySet();\n        List<DruidDataSourceStatValue> statValueList = new ArrayList<DruidDataSourceStatValue>(dataSources.size());\n        List<WallProviderStatValue> wallStatValueList = new ArrayList<WallProviderStatValue>();\n        for (Object item : dataSources) {\n            if (!(item instanceof DruidDataSource)) {\n                continue;\n            }\n            DruidDataSource dataSource = (DruidDataSource) item;\n            if (collectSqlEnable) {\n                DruidDataSourceStatValue statValue = dataSource.getStatValueAndReset();\n                statValueList.add(statValue);\n            }\n            if (collectSqlWallEnable) {\n                WallProviderStatValue wallStatValue = dataSource.getWallStatValue(true);\n                if (wallStatValue != null && wallStatValue.getCheckCount() > 0) {\n                    wallStatValueList.add(wallStatValue);\n                }\n            }\n        }\n        MonitorContext ctx = createContext();\n        if (statValueList.size() > 0) {\n            dao.saveSql(ctx, statValueList);\n        }\n        if (wallStatValueList.size() > 0) {\n            dao.saveSqlWall(ctx, wallStatValueList);\n        }\n    }\n    private MonitorContext createContext() {\n        MonitorContext ctx = new MonitorContext();<fim_middle>// function below has no smell\n"}