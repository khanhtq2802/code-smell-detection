{"text": "<fim_prefix>/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n *\n * This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n * You may not use this product except in compliance with the License.\n *\n * This product may include a number of subcomponents with separate copyright notices\n * and license terms. Your use of these subcomponents is subject to the terms and\n * conditions of the subcomponent's license, as noted in the LICENSE file.\n */\n\npackage com.vmware.admiral.common.util;\n\nimport static com.vmware.admiral.common.util.UriUtilsExtended.OFFICIAL_REGISTRY_LIST;\n\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Pattern;\n\n/**\n * Docker image name parsing utility\n */\npublic class DockerImage {\n    private static final Logger logger = Logger.getLogger(DockerImage.class.getName());\n\n    public static final String SECTION_SEPARATOR = \"/\";\n    public static final String TAG_SEPARATOR = \":\";\n    public static final String DEFAULT_NAMESPACE = \"library\";\n    public static final String DEFAULT_TAG = \"latest\";\n    private static final Pattern NAMESPACE_PATTERN =\n            Pattern.compile(\"[a-z0-9]+(?:(?:[._]|__|[-]+)[a-z0-9]+)*\");\n\n    private String host;\n    private String namespace;\n    private String repository;\n    private String tag;\n\n    /**\n     * @return the host\n     */\n<fim_suffix>    public String getHost() {\n        return host;\n    }\n\n    /**\n     * @return the namespace\n     */\n    public String getNamespace() {\n        return namespace;\n    }\n\n    /**\n     * @return the repository\n     */\n    public String getRepository() {\n        return repository;\n    }\n\n    public String getNamespaceAndRepo() {\n        if (namespace != null) {\n            return namespace + SECTION_SEPARATOR + repository;\n        } else if (isDockerHubImage()) {\n            return DEFAULT_NAMESPACE + SECTION_SEPARATOR + repository;\n        }\n\n        return repository;\n    }\n\n    /**\n     * @return the tag\n     */\n    public String getTag() {\n        return tag;\n    }\n\n    public boolean isDockerHubImage() {\n        return host == null || OFFICIAL_REGISTRY_LIST.contains(host);\n    }\n\n    /**\n     * parse a full image name (myhost:300/namespace/repo:tag) into its components\n     *\n     * @param imageName\n     * @return\n     */\n    public static DockerImage fromImageName(String imageName) {\n        AssertUtil.assertNotNullOrEmpty(imageName, \"imageName\");\n        logger.log(Level.INFO, () -> String.format(\"Parsing '%s' to DockerImage\", imageName));\n\n        String[] parts = imageName.split(SECTION_SEPARATOR);\n        switch (parts.length) {\n        case 0:\n            throw new IllegalArgumentException(\"Invalid image format: \" + imageName);\n\n        case 1:\n            // only one section - it is the repository name with optional tag\n            return fromParts(null, null, parts[0]);\n\n        case 2:\n            // since there are two sections the second one can be either a host or a namespace\n            if (isValidNamespace(parts[0])) {\n                return fromParts(null, parts[0], parts[1]);\n            } else {\n                return fromParts(parts[0], null, parts[1]);\n            }\n\n        default:\n            // three or more sections present: host, namespace and repo. According to Docker\n            // documentation, the most common case is to have two path components in the name of the\n            // repository, however, it is possible to have a different number of path segments:\n            // https://docs.docker.com/registry/spec/api/#overview\n            // We are going to treat the extra path arguments as part of the namespace, e.g. the\n            // repo name host:port/path/to/repo will have \"host:port\" for host, \"path/to\" for\n            // namespace and \"repo\" for name.\n\n            String host = parts[0];\n            String repo = parts[parts.length - 1];\n            String namespace = imageName.substring(host.length() + SECTION_SEPARATOR.length(),\n                    imageName.length() - repo.length() - SECTION_SEPARATOR.length());\n            return fromParts(host, namespace, repo);\n\n        }\n    }\n\n    public static DockerImage fromParts(String hostPart, String namespacePart, String repoAndTagPart) {\n        String[] repoParts = repoAndTagPart.split(TAG_SEPARATOR);\n        switch (repoParts.length) {\n        case 1:\n            // no tag\n            return fromParts(hostPart, namespacePart, repoParts[0], DEFAULT_TAG);\n\n        case 2:\n            // with tag\n            return fromParts(hostPart, namespacePart, repoParts[0], repoParts[1]);\n\n        default:\n            throw new IllegalArgumentException(\"Invalid repository and tag format: \"\n                    + repoAndTagPart);\n        }\n    }\n\n    public static DockerImage fromParts(String hostPart, String namespacePart, String repo,\n            String tag) {\n\n        DockerImage dockerImage = new DockerImage();\n        dockerImage.host = hostPart;\n        dockerImage.namespace = namespacePart;\n        dockerImage.repository = repo;\n        dockerImage.tag = tag;\n\n        return dockerImage;\n    }\n\n    /**\n     * When a image name part can be ambiguously either host or namespace, check which one it is\n     * based on a regex of valid characters for the namespace part\n     *\n     * @param namespaceCandidate\n     * @return\n     */\n    public static boolean isValidNamespace(String namespaceCandidate) {\n        return NAMESPACE_PATTERN.matcher(namespaceCandidate).matches();\n    }\n\n    /**\n     * Convert to a canonical single string representation\n     *\n     * @return E.g.:<p/>\n     *   registry.hub.docker.com/library/alpine -> alpine<p/>\n     *   registry.hub.docker.com/mongons/mongo -> mongons/mongo<p/>\n     *   registry.local.corp/proj/image -> registry.local.corp/proj/image\n     */\n    @Override\n    public String toString() {\n        StringBuilder imageName = new StringBuilder();\n\n        if (!isDockerHubImage()) {\n            imageName.append(host);\n            imageName.append(SECTION_SEPARATOR);\n        }\n\n        // If namespace is null, do not set the default value 'library' as not all\n        // V2 registry implementations support this convention\n        imageName.append(getNamespaceAndRepo());\n\n        if (tag != null) {\n            imageName.append(TAG_SEPARATOR);\n            imageName.append(tag);\n        }\n\n        return imageName.toString();\n    }\n}<fim_middle>// function below has no smell\n"}