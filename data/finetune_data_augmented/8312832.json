{"text": "<fim_prefix>import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\nimport org.eclipse.jdt.ls.core.internal.Messages;\nimport org.eclipse.jdt.ls.core.internal.corext.refactoring.IRefactoringSearchRequestor;\nimport org.eclipse.jdt.ls.core.internal.corext.refactoring.RefactoringCoreMessages;\nimport org.eclipse.jdt.ls.core.internal.corext.refactoring.RefactoringSearchEngine;\nimport org.eclipse.jdt.ls.core.internal.corext.refactoring.RefactoringSearchEngine2;\nimport org.eclipse.jdt.ls.core.internal.corext.refactoring.nls.changes.CreateTextFileChange;\nimport org.eclipse.jdt.ls.core.internal.corext.refactoring.rename.TypeOccurrenceCollector;\nimport org.eclipse.jdt.ls.core.internal.corext.util.JavaElementResourceMapping;\nimport org.eclipse.jdt.ls.core.internal.corext.util.JavaElementUtil;\nimport org.eclipse.jdt.ls.core.internal.corext.util.SearchUtils;\nimport org.eclipse.jdt.ls.core.internal.corext.util.TextChangeManager;\nimport org.eclipse.ltk.core.refactoring.Change;\nimport org.eclipse.ltk.core.refactoring.participants.ReorgExecutionLog;\nimport org.eclipse.text.edits.ReplaceEdit;\n<fim_suffix>public final class CreateCopyOfCompilationUnitChange extends CreateTextFileChange {\n\tprivate static TextChangeManager createChangeManager(IProgressMonitor monitor, ICompilationUnit copy, String newName) throws CoreException {\n\t\tTextChangeManager manager= new TextChangeManager();\n\t\tSearchResultGroup refs= getReferences(copy, monitor);\n\t\tif (refs == null) {\n\t\t\treturn manager;\n\t\t}\n\t\tif (refs.getCompilationUnit() == null) {\n\t\t\treturn manager;\n\t\t}\n\t\tString name= RefactoringCoreMessages.CopyRefactoring_update_ref;\n\t\tSearchMatch[] results= refs.getSearchResults();\n\t\tfor (int j= 0; j < results.length; j++) {\n\t\t\tSearchMatch searchResult= results[j];\n\t\t\tif (searchResult.getAccuracy() == SearchMatch.A_INACCURATE) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint offset= searchResult.getOffset();\n\t\t\tint length= searchResult.getLength();\n\t\t\tTextChangeCompatibility.addTextEdit(manager.get(copy), name, new ReplaceEdit(offset, length, newName));\n\t\t}\n\t\treturn manager;\n\t}\n\tprivate static SearchPattern createSearchPattern(IType type) throws JavaModelException {\n\t\tSearchPattern pattern= SearchPattern.createPattern(type, IJavaSearchConstants.ALL_OCCURRENCES, SearchUtils.GENERICS_AGNOSTIC_MATCH_RULE);\n\t\tIMethod[] constructors= JavaElementUtil.getAllConstructors(type);\n\t\tif (constructors.length == 0) {\n\t\t\treturn pattern;\n\t\t}\n\t\tSearchPattern constructorDeclarationPattern= RefactoringSearchEngine.createOrPattern(constructors, IJavaSearchConstants.DECLARATIONS);\n\t\treturn SearchPattern.createOrPattern(pattern, constructorDeclarationPattern);\n\t}\n\tprivate static String getCopiedFileSource(IProgressMonitor monitor, ICompilationUnit unit, String newTypeName) throws CoreException {\n\t\tICompilationUnit copy= unit.getPrimary().getWorkingCopy(null);\n\t\ttry {\n\t\t\tTextChangeManager manager= createChangeManager(monitor, copy, newTypeName);\n\t\t\tString result= manager.get(copy).getPreviewContent(new NullProgressMonitor());\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tcopy.discardWorkingCopy();\n\t\t}\n\t}\n\tprivate static SearchResultGroup getReferences(final ICompilationUnit copy, IProgressMonitor monitor) throws JavaModelException {\n\t\tfinal ICompilationUnit[] copies= new ICompilationUnit[] { copy};\n\t\tIJavaSearchScope scope= SearchEngine.createJavaSearchScope(copies);\n\t\tfinal IType type= copy.findPrimaryType();\n\t\tif (type == null) {\n\t\t\treturn null;\n\t\t}\n\t\tSearchPattern pattern= createSearchPattern(type);\n\t\tfinal RefactoringSearchEngine2 engine= new RefactoringSearchEngine2(pattern);\n\t\tengine.setScope(scope);\n\t\tengine.setWorkingCopies(copies);\n\t\tengine.setRequestor(new IRefactoringSearchRequestor() {\n\t\t\tTypeOccurrenceCollector fTypeOccurrenceCollector= new TypeOccurrenceCollector(type);\n\t\t\t@Override\n\t\t\tpublic SearchMatch acceptSearchMatch(SearchMatch match) {\n\t\t\t\ttry {\n\t\t\t\t\treturn fTypeOccurrenceCollector.acceptSearchMatch2(copy, match);\n\t\t\t\t} catch (CoreException e) {\n\t\t\t\t\tJavaLanguageServerPlugin.log(e);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tengine.searchPattern(monitor);\n\t\tfinal Object[] results= engine.getResults();\n\t\t// Assert.isTrue(results.length <= 1);\n\t\t// just 1 file or none, but inaccurate matches can play bad here (see\n\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=106127)\n\t\tfor (int index= 0; index < results.length; index++) {\n\t\t\tSearchResultGroup group= (SearchResultGroup) results[index];\n\t\t\tif (group.getCompilationUnit().equals(copy)) {\n\t\t\t\treturn group;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\tprivate final INewNameQuery fNameQuery;\n\tprivate final ICompilationUnit fOldCu;\n\tpublic CreateCopyOfCompilationUnitChange(IPath path, String source, ICompilationUnit oldCu, INewNameQuery nameQuery) {\n\t\tsuper(path, source, null, \"java\"); //$NON-NLS-1$\n\t\tfOldCu= oldCu;\n\t\tfNameQuery= nameQuery;\n\t\tsetEncoding(oldCu);\n\t}\n\t@Override\n\tpublic String getName() {\n\t\tString cuName= BasicElementLabels.getResourceName(fOldCu.getElementName());\n\t\tString cuContainerName= BasicElementLabels.getPathLabel(fOldCu.getParent().getPath(), false);\n\t\treturn Messages.format(RefactoringCoreMessages.CreateCopyOfCompilationUnitChange_create_copy, new String[] { cuName, cuContainerName});\n\t}\n\t@Override\n\tprotected IFile getOldFile(IProgressMonitor monitor) throws OperationCanceledException {\n\t\ttry {\n\t\t\tmonitor.beginTask(\"\", 12); //$NON-NLS-1$\n\t\t\tString oldSource= super.getSource();\n\t\t\tIPath oldPath= super.getPath();\n\t\t\tString newTypeName= fNameQuery.getNewName();\n\t\t\ttry {\n\t\t\t\tString newSource= getCopiedFileSource(new SubProgressMonitor(monitor, 9), fOldCu, newTypeName);\n\t\t\t\tsetSource(newSource);\n\t\t\t\tsetPath(fOldCu.getResource().getParent().getFullPath().append(JavaModelUtil.getRenamedCUName(fOldCu, newTypeName)));\n\t\t\t\treturn super.getOldFile(new SubProgressMonitor(monitor, 1));\n\t\t\t} catch (CoreException e) {\n\t\t\t\tsetSource(oldSource);\n\t\t\t\tsetPath(oldPath);\n\t\t\t\treturn super.getOldFile(new SubProgressMonitor(monitor, 2));\n\t\t\t}\n\t\t} finally {\n\t\t\tmonitor.done();\n\t\t}\n\t}\n\tprivate void markAsExecuted(ICompilationUnit unit, ResourceMapping mapping) {\n\t\tReorgExecutionLog log= getAdapter(ReorgExecutionLog.class);\n\t\tif (log != null) {\n\t\t\tlog.markAsProcessed(unit);\n\t\t\tlog.markAsProcessed(mapping);\n\t\t}\n\t}\n\t@Override\n\tpublic Change perform(IProgressMonitor monitor) throws CoreException {\n\t\tResourceMapping mapping= JavaElementResourceMapping.create(fOldCu);\n\t\tfinal Change result= super.perform(monitor);\n\t\tmarkAsExecuted(fOldCu, mapping);\n\t\treturn result;\n\t}\n\tprivate void setEncoding(ICompilationUnit unit) {\n\t\tIResource resource= unit.getResource();\n\t\t// no file so the encoding is taken from the target\n\t\tif (!(resource instanceof IFile)) {\n\t\t\treturn;\n\t\t}\n\t\tIFile file= (IFile) resource;\n\t\ttry {\n\t\t\tString encoding= file.getCharset(false);\n\t\t\tif (encoding != null) {\n\t\t\t\tsetEncoding(encoding, true);\n\t\t\t} else {\n\t\t\t\tencoding= file.getCharset(true);\n\t\t\t\tif (encoding != null) {\n\t\t\t\t\tsetEncoding(encoding, false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (CoreException e) {\n\t\t\t// Take encoding from target\n\t\t}\n\t}\n}<fim_middle>// class below has no smell\n"}