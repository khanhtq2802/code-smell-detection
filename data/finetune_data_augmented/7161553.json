{"text": "<fim_prefix>//\n// Copyright (c) Microsoft Corporation. All rights reserved.\n//\n\npackage com.microsoft.connecteddevices.signinhelpers;\n\nimport android.support.annotation.Keep;\nimport android.util.Log;\nimport android.util.Pair;\n\nimport com.microsoft.connecteddevices.AsyncOperation;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport javax.net.ssl.HttpsURLConnection;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\n/**\n * Encapsulates a noninteractive request for an MSA token.\n * This request may be performed multiple times.\n */\n<fim_suffix>@Keep\nfinal class MSATokenRequest {\n\n    private static final String TAG = MSATokenRequest.class.getName();\n\n    // OAuth Token Grant Type\n    public static final class GrantType {\n        public static final String CODE = \"authorization_code\";\n        public static final String REFRESH = \"refresh_token\";\n    }\n\n    /**\n     * Class encapsulating the result of an MSATokenRequest.\n     */\n    public static final class Result {\n        public static enum Status { SUCCESS, TRANSIENT_FAILURE, PERMANENT_FAILURE }\n\n        private final Status mStatus;\n        private String mAccessToken = null;\n        private String mRefreshToken = null;\n        private int mExpiresIn = 0;\n\n        Result(Status status, JSONObject responseJson) {\n            mStatus = status;\n\n            if (responseJson != null) {\n                mAccessToken = responseJson.optString(\"access_token\", null);\n                mRefreshToken = responseJson.optString(\"refresh_token\", null);\n                mExpiresIn = responseJson.optInt(\"expires_in\"); // returns 0 if this key doesn't exist\n            }\n        }\n\n        public Status getStatus() {\n            return mStatus;\n        }\n\n        public String getAccessToken() {\n            return mAccessToken;\n        }\n\n        public String getRefreshToken() {\n            return mRefreshToken;\n        }\n\n        public int getExpiresIn() {\n            return mExpiresIn;\n        }\n    }\n\n    private final String mClientId;\n    private final String mGrantType;\n    private final String mScope;\n    private final String mRedirectUri;\n\n    public MSATokenRequest(String clientId, String grantType, String scope, String redirectUri) {\n        mClientId = clientId;\n        mGrantType = grantType;\n        mScope = scope;\n        mRedirectUri = redirectUri;\n    }\n\n    /**\n     * Builds a query string from a list of name-value pairs.\n     *\n     * @param params Name-value pairs to compose the query string from\n     * @return A query string composed of the provided name-value pairs\n     * @throws UnsupportedEncodingException Thrown if encoding a name or value fails\n     */\n    private static String getQueryString(List<Pair<String, String>> params) throws UnsupportedEncodingException {\n        StringBuilder queryStringBuilder = new StringBuilder();\n        boolean isFirstParam = true;\n        for (Pair<String, String> param : params) {\n            if (isFirstParam) {\n                isFirstParam = false;\n            } else {\n                queryStringBuilder.append(\"&\");\n            }\n\n            queryStringBuilder.append(URLEncoder.encode(param.first, \"UTF-8\"));\n            queryStringBuilder.append(\"=\");\n            queryStringBuilder.append(URLEncoder.encode(param.second, \"UTF-8\"));\n        }\n\n        return queryStringBuilder.toString();\n    }\n\n    /**\n     * Fetch Token (Access or Refresh Token).\n     * @param clientId - clientId of the app's registration in the MSA portal\n     * @param grantType - one of the MSATokenRequest.GrantType constants\n     * @param scope\n     * @param redirectUri\n     * @param token - authCode for GrantType.CODE, or refresh token for GrantType.REFRESH\n     */\n    public static AsyncOperation<MSATokenRequest.Result> requestAsync(\n        final String clientId, final String grantType, final String scope, final String redirectUri, final String token) {\n        if (token == null || token.length() <= 0) {\n            Log.e(TAG, \"Refresh token or auth code for MSATokenRequest was unexpectedly empty - treating as permanent failure.\");\n            return AsyncOperation.completedFuture(new MSATokenRequest.Result(Result.Status.PERMANENT_FAILURE, null));\n        }\n\n        return AsyncOperation.supplyAsync(new AsyncOperation.Supplier<MSATokenRequest.Result>() {\n            @Override\n            public MSATokenRequest.Result get() {\n                HttpsURLConnection connection = null;\n                MSATokenRequest.Result.Status status = Result.Status.TRANSIENT_FAILURE;\n                JSONObject responseJson = null;\n\n                try {\n                    // Build the query string\n                    List<Pair<String, String>> params = new LinkedList<>();\n                    params.add(new Pair<>(\"client_id\", clientId));\n                    params.add(new Pair<>(\"grant_type\", grantType));\n\n                    if (grantType.equals(GrantType.CODE)) {\n                        params.add(new Pair<>(\"redirect_uri\", redirectUri));\n                        params.add(new Pair<>(\"code\", token));\n                    } else if (grantType.equals(GrantType.REFRESH)) {\n                        params.add(new Pair<>(\"scope\", scope));\n                        params.add(new Pair<>(grantType, token));\n                    }\n\n                    String queryString = getQueryString(params);\n\n                    // Write the query string\n                    URL url = new URL(\"https://login.live.com/oauth20_token.srf\");\n                    connection = (HttpsURLConnection)url.openConnection();\n                    connection.setDoOutput(true);\n                    connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n                    IOUtil.writeUTF8Stream(connection.getOutputStream(), queryString);\n\n                    // Parse the response\n                    int responseCode = connection.getResponseCode();\n                    if (responseCode >= 500) {\n                        status = Result.Status.TRANSIENT_FAILURE;\n                    } else if (responseCode >= 400) {\n                        status = Result.Status.PERMANENT_FAILURE;\n                    } else if ((responseCode >= 200 && responseCode < 300) || responseCode == 304) {\n                        status = Result.Status.SUCCESS;\n                    } else {\n                        status = Result.Status.TRANSIENT_FAILURE;\n                    }\n\n                    if (status == Result.Status.SUCCESS) {\n                        responseJson = new JSONObject(IOUtil.readUTF8Stream(connection.getInputStream()));\n                    } else {\n                        Log.e(TAG, \"Failed to get token with HTTP code: \" + responseCode);\n                    }\n\n                } catch (IOException | JSONException e) {\n                    Log.e(TAG, \"Failed to get token: \\\"\" + e.getLocalizedMessage() + \"\\\"\");\n                } finally {\n                    if (connection != null) {\n                        connection.disconnect();\n                    }\n                    return new MSATokenRequest.Result(status, responseJson);\n                }\n            }\n        });\n    }\n\n    /**\n     * Fetch token (Access or Refresh Token).\n     * @param token - authCode for GrantType.CODE, or refresh token for GrantType.REFRESH\n     */\n    public AsyncOperation<MSATokenRequest.Result> requestAsync(String token) {\n        return requestAsync(mClientId, mGrantType, mScope, mRedirectUri, token);\n    }\n}<fim_middle>// class below is blob\n"}