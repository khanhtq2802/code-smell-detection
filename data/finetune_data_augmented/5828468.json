{"text": "<fim_prefix>\n<fim_suffix>public class MailChimpServiceImpl implements MailChimpService {\n    private static Logger logger = LoggerFactory.getLogger(MailChimpServiceImpl.class);\n    private static final String ACCEPT = \"Accept\";\n    private static final String AUTHORIZATION = \"Authorization\";\n    private static final String LISTS = \"lists\";\n    private static final String ID = \"id\";\n    private static final String NAME = \"name\";\n    private static final String MERGE_FIELDS = \"merge_fields\";\n    private static final String EMAIL_TYPE = \"email_type\";\n    private static final String EMAIL_ADDRESS = \"email_address\";\n    private static final String EMAIL = \"email\";\n    private static final String ERRORS = \"errors\";\n    private static final String LIST_IDENTIFIER = \"listIdentifier\";\n    private static final String STATUS = \"status\";\n    private static final String SUBSCRIBED = \"subscribed\";\n    private static final String UNSUBSCRIBED = \"unsubscribed\";\n    private static final String TAG = \"tag\";\n    private static final String TYPE = \"type\";\n    private static final String UNOMI_ID = \"unomiId\";\n    private static final String MC_SUB_TAG_NAME = \"mcSubTagName\";\n    private static final String ADDR_1 = \"addr1\";\n    private static final String ADDR_2 = \"addr2\";\n    private static final String CITY = \"city\";\n    private static final String COUNTRY = \"country\";\n    private static final String STATE = \"state\";\n    private static final String ZIP = \"zip\";\n    private static final String ADDRESS = \"address\";\n    private static final String DATE_FORMAT = \"date_format\";\n    private static final String OPTIONS = \"options\";\n    private static final String DATE = \"date\";\n    private static final String MC_MM_DD_YYYY = \"MM/DD/YYYY\";\n    private static final String MM_DD_YYYY = \"MM/dd/yyyy\";\n    private static final String DD_MM_YYYY = \"dd/MM/yyyy\";\n    private static final String BIRTHDAY = \"birthday\";\n    private static final String MC_MM_DD = \"MM/DD\";\n    private static final String MM_DD = \"MM/dd\";\n    private static final String DD_MM = \"dd/MM\";\n    private static final String SEPARATOR_CHARS_PROPERTIES = \",\";\n    private static final String SEPARATOR_CHARS_PROPERTY = \"<=>\";\n    private String apiKey;\n    private String urlSubDomain;\n    private Map<String, List<Map<String, String>>> listMergeFieldMapping;\n    private Boolean isMergeFieldsActivate;\n    private CloseableHttpClient httpClient;\n    @Override\n    public List<HashMap<String, String>> getAllLists() {\n        List<HashMap<String, String>> mcLists = new ArrayList<>();\n        if (isMailChimpConnectorConfigured()) {\n            JsonNode response = HttpUtils.executeGetRequest(httpClient, getBaseUrl() + \"/lists\", getHeaders(), false);\n            if (response != null) {\n                if (response.has(LISTS) && response.get(LISTS).size() > 0) {\n                    for (JsonNode list : response.get(LISTS)) {\n                        if (list.has(ID) && list.has(NAME)) {\n                            HashMap<String, String> mcListInfo = new HashMap<>();\n                            mcListInfo.put(ID, list.get(ID).asText());\n                            mcListInfo.put(NAME, list.get(NAME).asText());\n                            mcLists.add(mcListInfo);\n                        } else {\n                            logger.warn(\"Missing mandatory information for list, {}\", list.asText());\n                        }\n                    }\n                } else {\n                    logger.debug(\"No list to return, response was {}\", response.asText());\n                }\n            }\n        }\n        return mcLists;\n    }\n    @Override\n    public MailChimpResult addToMCList(Profile profile, Action action) {\n        if (!isMailChimpConnectorConfigured() || profile.getProperty(EMAIL) == null) {\n            logger.error(\"The visitor does not have an email address\");\n            return MailChimpResult.ERROR;\n        }\n        String listIdentifier = (String) action.getParameterValues().get(LIST_IDENTIFIER);\n        JsonNode currentMember = isMemberOfMailChimpList(profile, listIdentifier);\n        JSONObject mergeFields = new JSONObject();\n        if (currentMember != null && currentMember.has(STATUS)) {\n            JSONObject body = new JSONObject();\n            if (currentMember.get(STATUS).asText().equals(UNSUBSCRIBED)) {\n                logger.debug(\"The visitor is already in the MailChimp list, his status is unsubscribed\");\n                body.put(STATUS, SUBSCRIBED);\n            }\n            if (isMergeFieldsActivate && addProfilePropertiesToMergeFieldsObject(profile, listIdentifier, mergeFields) == MailChimpResult.SUCCESS) {\n                body.put(MERGE_FIELDS, mergeFields);\n            }\n            return updateSubscription(listIdentifier, body.toString(), currentMember, true);\n        }\n        JSONObject userData = new JSONObject();\n        userData.put(EMAIL_TYPE, \"html\");\n        userData.put(EMAIL_ADDRESS, profile.getProperty(EMAIL).toString());\n        userData.put(STATUS, SUBSCRIBED);\n        if (isMergeFieldsActivate) {\n            addProfilePropertiesToMergeFieldsObject(profile, listIdentifier, mergeFields);\n        }\n        userData.put(MERGE_FIELDS, mergeFields);\n        JsonNode response = HttpUtils.executePostRequest(httpClient, getBaseUrl() + \"/lists/\" + listIdentifier + \"/members\", getHeaders(), userData.toString());\n        if (response == null || (response.has(ERRORS) && response.get(ERRORS).size() > 0)) {\n            logger.error(\"Error when adding user to MailChimp list, list identifier was {} and response was {}\", listIdentifier, response);\n            return MailChimpResult.ERROR;\n        }\n        return MailChimpResult.UPDATED;\n    }\n    @Override\n    public MailChimpResult removeFromMCList(Profile profile, Action action) {\n        if (!isMailChimpConnectorConfigured() || profile.getProperty(EMAIL) == null) {\n            return MailChimpResult.ERROR;\n        }\n        String listIdentifier = (String) action.getParameterValues().get(LIST_IDENTIFIER);\n        if (StringUtils.isBlank(listIdentifier)) {\n            logger.warn(\"Couldn't get the list identifier from Unomi\");\n            return MailChimpResult.ERROR;\n        }\n        JsonNode currentMember = isMemberOfMailChimpList(profile, listIdentifier);\n        if (currentMember == null) {\n            return MailChimpResult.NO_CHANGE;\n        }\n        JsonNode response = HttpUtils.executeDeleteRequest(httpClient, getBaseUrl() + \"/lists/\" + listIdentifier + \"/members/\" + currentMember.get(ID).asText(), getHeaders());\n        if (response == null || (response.has(ERRORS) && response.get(ERRORS).size() > 0)) {\n            logger.error(\"Couldn't remove the visitor from the MailChimp list, list identifier was {} and response was {}\", listIdentifier, response);\n            return MailChimpResult.ERROR;\n        }\n        return MailChimpResult.REMOVED;\n    }\n    @Override\n    public MailChimpResult unsubscribeFromMCList(Profile profile, Action action) {\n        if (!isMailChimpConnectorConfigured() || profile.getProperty(EMAIL) == null) {\n            return MailChimpResult.ERROR;\n        }\n        String listIdentifier = (String) action.getParameterValues().get(LIST_IDENTIFIER);\n        if (StringUtils.isBlank(listIdentifier)) {\n            logger.warn(\"Couldn't get the list identifier from Unomi\");\n            return MailChimpResult.ERROR;\n        }\n        JsonNode currentMember = isMemberOfMailChimpList(profile, listIdentifier);\n        if (currentMember == null) {\n            return MailChimpResult.REMOVED;\n        }\n        if (currentMember.get(STATUS).asText().equals(UNSUBSCRIBED)) {\n            return MailChimpResult.NO_CHANGE;\n        }\n        JSONObject body = new JSONObject();\n        body.put(STATUS, UNSUBSCRIBED);\n        return updateSubscription(listIdentifier, body.toString(), currentMember, false);\n    }\n    @Override\n    public MailChimpResult updateMCProfileProperties(Profile profile, Action action) {\n        if (!isMailChimpConnectorConfigured() || profile.getProperty(EMAIL) == null) {\n            return MailChimpResult.ERROR;\n        }\n        String listIdentifier = (String) action.getParameterValues().get(LIST_IDENTIFIER);\n        if (StringUtils.isBlank(listIdentifier)) {\n            logger.warn(\"MailChimp list identifier not found\");\n            return MailChimpResult.ERROR;\n        }\n        JsonNode currentMember = isMemberOfMailChimpList(profile, listIdentifier);\n        if (currentMember == null) {\n            logger.warn(\"The visitor was not part of the list\");\n            return MailChimpResult.NO_CHANGE;\n        }\n        JSONObject mergeFields = new JSONObject();\n        MailChimpResult result = addProfilePropertiesToMergeFieldsObject(profile, listIdentifier, mergeFields);\n        if (result != MailChimpResult.SUCCESS) {\n            return result;\n        }\n        JSONObject body = new JSONObject();\n        body.put(MERGE_FIELDS, mergeFields);<fim_middle>// class below is blob\n"}