{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache license, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the license for the specific language governing permissions and\n * limitations under the license.\n */\npackage org.apache.logging.log4j.cassandra;\n\nimport com.datastax.driver.core.BatchStatement;\nimport org.apache.logging.log4j.core.Core;\nimport org.apache.logging.log4j.core.Filter;\nimport org.apache.logging.log4j.core.appender.AbstractAppender;\nimport org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender;\nimport org.apache.logging.log4j.core.appender.db.ColumnMapping;\nimport org.apache.logging.log4j.core.config.Property;\nimport org.apache.logging.log4j.core.config.plugins.Plugin;\nimport org.apache.logging.log4j.core.config.plugins.PluginBuilderAttribute;\nimport org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;\nimport org.apache.logging.log4j.core.config.plugins.PluginElement;\nimport org.apache.logging.log4j.core.config.plugins.validation.constraints.Required;\nimport org.apache.logging.log4j.core.net.SocketAddress;\nimport org.apache.logging.log4j.core.time.Clock;\n\n/**\n * Appender plugin that uses a Cassandra database.\n *\n * @see SocketAddress\n * @see ColumnMapping\n */\n@Plugin(name = \"Cassandra\", category = Core.CATEGORY_NAME, elementType = CassandraAppender.ELEMENT_TYPE, printObject = true)\npublic class CassandraAppender extends AbstractDatabaseAppender<CassandraManager> {\n\n    private CassandraAppender(final String name, final Filter filter, final boolean ignoreExceptions,\n            Property[] properties, final CassandraManager manager) {\n        super(name, filter, null, ignoreExceptions, properties, manager);\n    }\n\n    @PluginBuilderFactory\n    public static <B extends Builder<B>> B newBuilder() {\n        return new Builder<B>().asBuilder();\n    }\n\n<fim_suffix>    public static class Builder<B extends Builder<B>> extends AbstractAppender.Builder<B>\n        implements org.apache.logging.log4j.core.util.Builder<CassandraAppender> {\n\n        /**\n         * List of Cassandra node contact points. Addresses without a port (or port set to 0) will use the default\n         * Cassandra port (9042).\n         */\n        @PluginElement(\"ContactPoints\")\n        @Required(message = \"No Cassandra servers provided\")\n        private SocketAddress[] contactPoints = new SocketAddress[]{SocketAddress.getLoopback()};\n\n        /**\n         * List of column mappings to convert a LogEvent into a database row.\n         */\n        @PluginElement(\"Columns\")\n        @Required(message = \"No Cassandra columns provided\")\n        private ColumnMapping[] columns;\n\n        @PluginBuilderAttribute\n        private boolean useTls;\n\n        @PluginBuilderAttribute\n        @Required(message = \"No cluster name provided\")\n        private String clusterName;\n\n        @PluginBuilderAttribute\n        @Required(message = \"No keyspace provided\")\n        private String keyspace;\n\n        @PluginBuilderAttribute\n        @Required(message = \"No table name provided\")\n        private String table;\n\n        @PluginBuilderAttribute\n        private String username;\n\n        @PluginBuilderAttribute(sensitive = true)\n        private String password;\n\n        /**\n         * Override the default TimestampGenerator with one based on the configured {@link Clock}.\n         */\n        @PluginBuilderAttribute\n        private boolean useClockForTimestampGenerator;\n\n        /**\n         * Number of LogEvents to buffer before writing. Can be used with or without batch statements.\n         */\n        @PluginBuilderAttribute\n        private int bufferSize;\n\n        /**\n         * Whether or not to use batch statements when inserting records.\n         */\n        @PluginBuilderAttribute\n        private boolean batched;\n\n        /**\n         * If batch statements are enabled, use this type of batch statement.\n         */\n        @PluginBuilderAttribute\n        private BatchStatement.Type batchType = BatchStatement.Type.LOGGED;\n\n        public B setContactPoints(final SocketAddress... contactPoints) {\n            this.contactPoints = contactPoints;\n            return asBuilder();\n        }\n\n        public B setColumns(final ColumnMapping... columns) {\n            this.columns = columns;\n            return asBuilder();\n        }\n\n        public B setUseTls(final boolean useTls) {\n            this.useTls = useTls;\n            return asBuilder();\n        }\n\n        public B setClusterName(final String clusterName) {\n            this.clusterName = clusterName;\n            return asBuilder();\n        }\n\n        public B setKeyspace(final String keyspace) {\n            this.keyspace = keyspace;\n            return asBuilder();\n        }\n\n        public B setTable(final String table) {\n            this.table = table;\n            return asBuilder();\n        }\n\n        public B setUsername(final String username) {\n            this.username = username;\n            return asBuilder();\n        }\n\n        public B setPassword(final String password) {\n            this.password = password;\n            return asBuilder();\n        }\n\n        public B setUseClockForTimestampGenerator(final boolean useClockForTimestampGenerator) {\n            this.useClockForTimestampGenerator = useClockForTimestampGenerator;\n            return asBuilder();\n        }\n\n        public B setBufferSize(final int bufferSize) {\n            this.bufferSize = bufferSize;\n            return asBuilder();\n        }\n\n        public B setBatched(final boolean batched) {\n            this.batched = batched;\n            return asBuilder();\n        }\n\n        public B setBatchType(final BatchStatement.Type batchType) {\n            this.batchType = batchType;\n            return asBuilder();\n        }\n\n        @Override\n        public CassandraAppender build() {\n            final CassandraManager manager = CassandraManager.getManager(getName(), contactPoints, columns, useTls,\n                clusterName, keyspace, table, username, password, useClockForTimestampGenerator, bufferSize, batched,\n                batchType);\n            return new CassandraAppender(getName(), getFilter(), isIgnoreExceptions(), getPropertyArray(), manager);\n        }\n\n    }\n\n}<fim_middle>// class below has no smell\n"}