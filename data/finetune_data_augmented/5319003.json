{"text": "<fim_prefix>        {\n            List<Float> numbers = new ArrayList<>(floatArray.size());\n            for( int i=0; i<floatArray.size(); i++ )\n            {\n                COSBase base = floatArray.getObject(i);\n                if (base instanceof COSNumber)\n                {\n                    numbers.add(((COSNumber) base).floatValue());\n                }\n                else\n                {\n                    numbers.add(null);\n                }\n            }\n            retval = new COSArrayList<>( numbers, floatArray );\n        }\n        return retval;\n    }\n    /**\n     * This will take an array of COSName and return a COSArrayList of\n     * java.lang.String values.\n     *\n     * @param nameArray The existing name Array.\n     *\n     * @return The list of String objects.\n     */\n    public static List<String> convertCOSNameCOSArrayToList( COSArray nameArray )\n    {\n        List<String> retval = null;\n        if( nameArray != null )\n        {\n            List<String>names = new ArrayList<>();\n            for( int i=0; i<nameArray.size(); i++ )\n            {\n                names.add( ((COSName)nameArray.getObject( i )).getName() );\n            }\n            retval = new COSArrayList<>( names, nameArray );\n        }\n        return retval;\n    }\n    /**\n     * This will take an array of COSString and return a COSArrayList of\n     * java.lang.String values.\n     *\n     * @param stringArray The existing name Array.\n     *\n     * @return The list of String objects.\n     */\n    public static List<String> convertCOSStringCOSArrayToList( COSArray stringArray )\n    {\n        List<String> retval = null;\n        if( stringArray != null )\n        {\n            List<String> string = new ArrayList<>();\n            for( int i=0; i<stringArray.size(); i++ )\n            {\n                string.add( ((COSString)stringArray.getObject( i )).getString() );\n            }\n            retval = new COSArrayList<>( string, stringArray );\n        }\n        return retval;\n    }\n    /**\n     * This will take an list of string objects and return a COSArray of COSName\n     * objects.\n     *\n     * @param strings A list of strings\n     *\n     * @return An array of COSName objects\n     */\n    public static COSArray convertStringListToCOSNameCOSArray( List<String> strings )\n    {\n        COSArray retval = new COSArray();\n        for (String string : strings)\n        {\n            retval.add(COSName.getPDFName(string));\n        }\n        return retval;\n    }\n    /**\n     * This will take an list of string objects and return a COSArray of COSName\n     * objects.\n     *\n     * @param strings A list of strings\n     *\n     * @return An array of COSName objects\n     */\n    public static COSArray convertStringListToCOSStringCOSArray( List<String> strings )\n    {\n        COSArray retval = new COSArray();\n        for (String string : strings)\n        {\n            retval.add(new COSString(string));\n        }\n        return retval;\n    }\n    /**\n     * This will convert a list of COSObjectables to an array list of COSBase objects.\n     *\n     * @param cosObjectableList A list of COSObjectable.\n     *\n     * @return A list of COSBase.\n     * @throws IllegalArgumentException if an object type is not supported for conversion to a\n     * COSBase object.\n     */\n    public static COSArray converterToCOSArray( List<?> cosObjectableList )\n    {\n        COSArray array = null;\n        if( cosObjectableList != null )\n        {\n            if( cosObjectableList instanceof COSArrayList )\n            {\n                //if it is already a COSArrayList then we don't want to recreate the array, we want to reuse it.\n                array = ((COSArrayList<?>)cosObjectableList).array;\n            }\n            else\n            {\n                array = new COSArray();\n                for (Object next : cosObjectableList)\n                {\n                    if( next instanceof String )\n                    {\n                        array.add( new COSString( (String)next ) );\n                    }\n                    else if( next instanceof Integer || next instanceof Long )\n                    {\n                        array.add( COSInteger.get( ((Number)next).longValue() ) );\n                    }\n                    else if( next instanceof Float || next instanceof Double )\n                    {\n                        array.add( new COSFloat( ((Number)next).floatValue() ) );\n                    }\n                    else if( next instanceof COSObjectable )\n                    {\n                        COSObjectable object = (COSObjectable)next;\n                        array.add( object.getCOSObject() );\n                    }\n                    else if( next == null )\n                    {\n                        array.add( COSNull.NULL );\n                    }\n                    else\n                    {\n                        throw new IllegalArgumentException( \"Error: Don't know how to convert type to COSBase '\" +\n                        next.getClass().getName() + \"'\" );\n                    }\n                }\n            }\n        }\n        return array;\n    }\n    private List<COSBase> toCOSObjectList( Collection<?> list )\n    {\n        List<COSBase> cosObjects = new ArrayList<>();\n        for (Object next : list)\n        {\n            if( next instanceof String )\n            {\n                cosObjects.add( new COSString( (String)next ) );\n            }\n            else\n            {\n                COSObjectable cos = (COSObjectable)next;\n                cosObjects.add( cos.getCOSObject() );\n            }\n        }\n        return cosObjects;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean removeAll(Collection<?> c)\n    {\n        array.removeAll( toCOSObjectList( c ) );\n        return actual.removeAll( c );\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean retainAll(Collection<?> c)\n    {\n        array.retainAll( toCOSObjectList( c ) );\n        return actual.retainAll( c );\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void clear()\n    {\n        //when adding if there is a parentDict then change the item\n        //in the dictionary from a single item to an array.\n        if( parentDict != null )\n        {\n            parentDict.setItem( dictKey, null );\n        }\n        actual.clear();\n        array.clear();\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean equals(Object o)\n    {\n        return actual.equals( o );\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int hashCode()\n    {\n        return actual.hashCode();\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public E get(int index)\n    {\n        return actual.get( index );\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public E set(int index, E element)\n    {\n        if( element instanceof String )\n        {\n            COSString item = new COSString( (String)element );\n            if( parentDict != null && index == 0 )\n            {\n                parentDict.setItem( dictKey, item );\n            }\n            array.set( index, item );\n        }\n        else\n        {\n            if( parentDict != null && index == 0 )\n            {\n                parentDict.setItem( dictKey, ((COSObjectable)element).getCOSObject() );\n            }\n            array.set( index, ((COSObjectable)element).getCOSObject() );\n        }\n        return actual.set( index, element );\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void add(int index, E element)\n    {\n        //when adding if there is a parentDict then change the item\n        //in the dictionary from a single item to an array.\n        if( parentDict != null )\n        {\n            parentDict.setItem( dictKey, array );\n            //clear the parent dict so it doesn't happen again, there might be\n            //a usecase for keeping the parentDict around but not now.\n            parentDict = null;\n        }\n        actual.add( index, element );\n        if( element instanceof String )\n        {\n            array.add( index, new COSString( (String)element ) );\n        }\n        else\n        {\n            array.add( index, ((COSObjectable)element).getCOSObject() );\n        }\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public E remove(int index)\n    {\n        array.remove( index );\n        return actual.remove( index );\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int indexOf(Object o)\n    {\n        return actual.indexOf( o );\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int lastIndexOf(Object o)\n    {\n        return actual.indexOf( o );\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public ListIterator<E> listIterator()\n    {\n        return actual.listIterator();\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public ListIterator<E> listIterator(int index)\n    {\n        return actual.listIterator( index );\n    }\n    /**\n     * {@inheritDoc}\n     */\n<fim_suffix>    @Override\n    public List<E> subList(int fromIndex, int toIndex)\n    {\n        return actual.subList( fromIndex, toIndex );\n    }<fim_middle>// function below has no smell\n"}