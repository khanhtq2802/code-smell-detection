{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.ide.actions;\n\nimport static com.google.common.base.Preconditions.checkState;\nimport static java.util.Collections.singletonList;\nimport static org.eclipse.che.ide.part.perspectives.project.ProjectPerspective.PROJECT_PERSPECTIVE_ID;\n\nimport com.google.inject.Inject;\nimport com.google.inject.Singleton;\nimport javax.validation.constraints.NotNull;\nimport org.eclipse.che.ide.CoreLocalizationConstant;\nimport org.eclipse.che.ide.Resources;\nimport org.eclipse.che.ide.api.action.AbstractPerspectiveAction;\nimport org.eclipse.che.ide.api.action.ActionEvent;\nimport org.eclipse.che.ide.api.app.AppContext;\nimport org.eclipse.che.ide.api.resources.Container;\nimport org.eclipse.che.ide.api.resources.Resource;\nimport org.eclipse.che.ide.upload.folder.UploadFolderFromZipPresenter;\n\n/**\n * Upload folder from zip Action\n *\n * @author Roman Nikitenko\n * @author Dmitry Shnurenko\n * @author Vlad Zhukovskyi\n */\n@Singleton\npublic class UploadFolderAction extends AbstractPerspectiveAction {\n\n  private final UploadFolderFromZipPresenter presenter;\n  private final AppContext appContext;\n\n  @Inject\n  public UploadFolderAction(\n      UploadFolderFromZipPresenter presenter,\n      CoreLocalizationConstant locale,\n      Resources resources,\n      AppContext appContext) {\n    super(\n        singletonList(PROJECT_PERSPECTIVE_ID),\n        locale.uploadFolderFromZipName(),\n        locale.uploadFolderFromZipDescription(),\n        resources.uploadFile());\n    this.presenter = presenter;\n    this.appContext = appContext;\n  }\n\n  /** {@inheritDoc} */\n<fim_suffix>  @Override\n  public void actionPerformed(ActionEvent e) {\n    final Resource[] resources = appContext.getResources();\n\n    checkState(resources != null && resources.length == 1 && resources[0] instanceof Container);\n\n    presenter.showDialog((Container) resources[0]);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public void updateInPerspective(@NotNull ActionEvent e) {\n    final Resource[] resources = appContext.getResources();\n\n    e.getPresentation().setVisible(true);\n    e.getPresentation()\n        .setEnabled(\n            resources != null && resources.length == 1 && resources[0] instanceof Container);\n  }\n}<fim_middle>// function below has no smell\n"}