{"text": "<fim_prefix>/****************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one   *\n * or more contributor license agreements.  See the NOTICE file *\n * distributed with this work for additional information        *\n * regarding copyright ownership.  The ASF licenses this file   *\n * to you under the Apache License, Version 2.0 (the            *\n * \"License\"); you may not use this file except in compliance   *\n * with the License.  You may obtain a copy of the License at   *\n *                                                              *\n *   http://www.apache.org/licenses/LICENSE-2.0                 *\n *                                                              *\n * Unless required by applicable law or agreed to in writing,   *\n * software distributed under the License is distributed on an  *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n * KIND, either express or implied.  See the License for the    *\n * specific language governing permissions and limitations      *\n * under the License.                                           *\n ****************************************************************/\npackage org.apache.james.mailbox.jpa.mail;\n\nimport javax.inject.Inject;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.PersistenceException;\n\nimport org.apache.commons.lang3.NotImplementedException;\nimport org.apache.james.mailbox.MailboxPathLocker;\nimport org.apache.james.mailbox.MailboxSession;\nimport org.apache.james.mailbox.exception.MailboxException;\nimport org.apache.james.mailbox.jpa.JPAId;\nimport org.apache.james.mailbox.jpa.mail.model.JPAMailbox;\nimport org.apache.james.mailbox.model.MailboxId;\nimport org.apache.james.mailbox.store.mail.AbstractLockingModSeqProvider;\nimport org.apache.james.mailbox.store.mail.model.Mailbox;\n\n<fim_suffix>public class JPAModSeqProvider extends AbstractLockingModSeqProvider {\n\n    private final EntityManagerFactory factory;\n\n    @Inject\n    public JPAModSeqProvider(MailboxPathLocker locker, EntityManagerFactory factory) {\n        super(locker);\n        this.factory = factory;\n    }\n\n    @Override\n    public long highestModSeq(MailboxSession session, Mailbox mailbox) throws MailboxException {\n        EntityManager manager = null;\n        try {\n            manager = factory.createEntityManager();\n            manager.getTransaction().begin();\n            JPAId mailboxId = (JPAId) mailbox.getMailboxId();\n            long highest = (Long) manager.createNamedQuery(\"findHighestModSeq\").setParameter(\"idParam\", mailboxId.getRawId()).getSingleResult();\n            manager.getTransaction().commit();\n            return highest;\n        } catch (PersistenceException e) {\n            if (manager != null && manager.getTransaction().isActive()) {\n                manager.getTransaction().rollback();\n            }\n            throw new MailboxException(\"Unable to get highest mod-sequence for mailbox \" + mailbox, e);\n        } finally {\n            if (manager != null) {\n                manager.close();\n            }\n        }\n    }\n\n    @Override\n    protected long lockedNextModSeq(MailboxSession session, Mailbox mailbox) throws MailboxException {\n        EntityManager manager = null;\n        try {\n            manager = factory.createEntityManager();\n            manager.getTransaction().begin();\n            JPAId mailboxId = (JPAId) mailbox.getMailboxId();\n            JPAMailbox m = manager.find(JPAMailbox.class, mailboxId.getRawId());\n            long modSeq = m.consumeModSeq();\n            manager.persist(m);\n            manager.getTransaction().commit();\n            return modSeq;\n        } catch (PersistenceException e) {\n            if (manager != null && manager.getTransaction().isActive()) {\n                manager.getTransaction().rollback();\n            }\n            throw new MailboxException(\"Unable to save highest mod-sequence for mailbox \" + mailbox, e);\n        } finally {\n            if (manager != null) {\n                manager.close();\n            }\n        }\n    }\n\n    @Override\n    public long highestModSeq(MailboxSession session, MailboxId mailboxId) throws MailboxException {\n        throw new NotImplementedException(\"not implemented\");\n    }\n}<fim_middle>// class below has no smell\n"}