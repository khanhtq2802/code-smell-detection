{"text": "<fim_prefix>/*\n * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage org.graalvm.compiler.core.common;\n\n// JaCoCo Exclude\n\nimport jdk.vm.ci.code.CodeUtil;\n\n/**\n * A collection of static utility functions that check ranges of numbers.\n */\n<fim_suffix>public class NumUtil {\n\n    public static boolean isShiftCount(int x) {\n        return 0 <= x && x < 32;\n    }\n\n    /**\n     * Determines if a given {@code int} value is the range of unsigned byte values.\n     */\n    public static boolean isUByte(int x) {\n        return (x & 0xff) == x;\n    }\n\n    /**\n     * Determines if a given {@code int} value is the range of signed byte values.\n     */\n    public static boolean isByte(int x) {\n        return (byte) x == x;\n    }\n\n    /**\n     * Determines if a given {@code long} value is the range of unsigned byte values.\n     */\n    public static boolean isUByte(long x) {\n        return (x & 0xffL) == x;\n    }\n\n    /**\n     * Determines if a given {@code long} value is the range of signed byte values.\n     */\n    public static boolean isByte(long l) {\n        return (byte) l == l;\n    }\n\n    /**\n     * Determines if a given {@code long} value is the range of unsigned int values.\n     */\n    public static boolean isUInt(long x) {\n        return (x & 0xffffffffL) == x;\n    }\n\n    /**\n     * Determines if a given {@code long} value is the range of signed int values.\n     */\n    public static boolean isInt(long l) {\n        return (int) l == l;\n    }\n\n    /**\n     * Determines if a given {@code int} value is the range of signed short values.\n     */\n    public static boolean isShort(int x) {\n        return (short) x == x;\n    }\n\n    /**\n     * Determines if a given {@code long} value is the range of signed short values.\n     */\n    public static boolean isShort(long x) {\n        return (short) x == x;\n    }\n\n    public static boolean isUShort(int s) {\n        return s == (s & 0xFFFF);\n    }\n\n    public static boolean isUShort(long s) {\n        return s == (s & 0xFFFF);\n    }\n\n    public static boolean is32bit(long x) {\n        return -0x80000000L <= x && x < 0x80000000L;\n    }\n\n    public static short safeToShort(int v) {\n        assert isShort(v);\n        return (short) v;\n    }\n\n    public static int safeToInt(long v) {\n        assert isInt(v);\n        return (int) v;\n    }\n\n    public static int roundUp(int number, int mod) {\n        return ((number + mod - 1) / mod) * mod;\n    }\n\n    public static long roundUp(long number, long mod) {\n        return ((number + mod - 1L) / mod) * mod;\n    }\n\n    public static int roundDown(int number, int mod) {\n        return number / mod * mod;\n    }\n\n    public static long roundDown(long number, long mod) {\n        return number / mod * mod;\n    }\n\n    public static int log2Ceil(int val) {\n        int x = 1;\n        int log2 = 0;\n        while (x < val) {\n            log2++;\n            x *= 2;\n        }\n        return log2;\n    }\n\n    public static boolean isUnsignedNbit(int n, int value) {\n        assert n > 0 && n < 32;\n        return 32 - Integer.numberOfLeadingZeros(value) <= n;\n    }\n\n    public static boolean isUnsignedNbit(int n, long value) {\n        assert n > 0 && n < 64;\n        return 64 - Long.numberOfLeadingZeros(value) <= n;\n    }\n\n    public static boolean isSignedNbit(int n, int value) {\n        assert n > 0 && n < 32;\n        int min = -(1 << (n - 1));\n        int max = (1 << (n - 1)) - 1;\n        return value >= min && value <= max;\n    }\n\n    public static boolean isSignedNbit(int n, long value) {\n        assert n > 0 && n < 64;\n        long min = -(1L << (n - 1));\n        long max = (1L << (n - 1)) - 1;\n        return value >= min && value <= max;\n    }\n\n    /**\n     *\n     * @param n Number of bits that should be set to 1. Must be between 0 and 32 (inclusive).\n     * @return A number with n bits set to 1.\n     */\n    public static int getNbitNumberInt(int n) {\n        assert n >= 0 && n <= 32 : \"0 <= n <= 32; instead: \" + n;\n        if (n < 32) {\n            return (1 << n) - 1;\n        } else {\n            return 0xFFFFFFFF;\n        }\n    }\n\n    /**\n     *\n     * @param n Number of bits that should be set to 1. Must be between 0 and 64 (inclusive).\n     * @return A number with n bits set to 1.\n     */\n    public static long getNbitNumberLong(int n) {\n        assert n >= 0 && n <= 64;\n        if (n < 64) {\n            return (1L << n) - 1;\n        } else {\n            return 0xFFFFFFFFFFFFFFFFL;\n        }\n    }\n\n    /**\n     * Get the minimum value representable in a {@code bits} bit signed integer.\n     */\n    public static long minValue(int bits) {\n        return CodeUtil.minValue(bits);\n    }\n\n    /**\n     * Get the maximum value representable in a {@code bits} bit signed integer.\n     */\n    public static long maxValue(int bits) {\n        return CodeUtil.maxValue(bits);\n    }\n\n    /**\n     * Get the maximum value representable in a {@code bits} bit unsigned integer.\n     */\n    public static long maxValueUnsigned(int bits) {\n        return getNbitNumberLong(bits);\n    }\n\n    public static long maxUnsigned(long a, long b) {\n        if (Long.compareUnsigned(a, b) < 0) {\n            return b;\n        }\n        return a;\n    }\n\n    public static long minUnsigned(long a, long b) {\n        if (Long.compareUnsigned(a, b) < 0) {\n            return a;\n        }\n        return b;\n    }\n\n    public static boolean sameSign(long a, long b) {\n        return a < 0 == b < 0;\n    }\n}<fim_middle>// class below has no smell\n"}