{"text": "<fim_prefix>      checkReady();\n      getNettyMetrics_call method_call = new getNettyMetrics_call(topologyId, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class getNettyMetrics_call extends org.apache.thrift.async.TAsyncMethodCall {\n      private String topologyId;\n      public getNettyMetrics_call(String topologyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.topologyId = topologyId;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"getNettyMetrics\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        getNettyMetrics_args args = new getNettyMetrics_args();\n        args.set_topologyId(topologyId);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public MetricInfo getResult() throws org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return (new Client(prot)).recv_getNettyMetrics();\n      }\n    }\n    public void getNettyMetricsByHost(String topologyId, String host, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      getNettyMetricsByHost_call method_call = new getNettyMetricsByHost_call(topologyId, host, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class getNettyMetricsByHost_call extends org.apache.thrift.async.TAsyncMethodCall {\n      private String topologyId;\n      private String host;\n      public getNettyMetricsByHost_call(String topologyId, String host, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.topologyId = topologyId;\n        this.host = host;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"getNettyMetricsByHost\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        getNettyMetricsByHost_args args = new getNettyMetricsByHost_args();\n        args.set_topologyId(topologyId);\n        args.set_host(host);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public MetricInfo getResult() throws org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return (new Client(prot)).recv_getNettyMetricsByHost();\n      }\n    }\n    public void getPagingNettyMetrics(String topologyId, String host, int page, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      getPagingNettyMetrics_call method_call = new getPagingNettyMetrics_call(topologyId, host, page, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class getPagingNettyMetrics_call extends org.apache.thrift.async.TAsyncMethodCall {\n      private String topologyId;\n      private String host;\n      private int page;\n      public getPagingNettyMetrics_call(String topologyId, String host, int page, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.topologyId = topologyId;\n        this.host = host;\n        this.page = page;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"getPagingNettyMetrics\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        getPagingNettyMetrics_args args = new getPagingNettyMetrics_args();\n        args.set_topologyId(topologyId);\n        args.set_host(host);\n        args.set_page(page);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public MetricInfo getResult() throws org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return (new Client(prot)).recv_getPagingNettyMetrics();\n      }\n    }\n    public void getNettyMetricSizeByHost(String topologyId, String host, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      getNettyMetricSizeByHost_call method_call = new getNettyMetricSizeByHost_call(topologyId, host, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n<fim_suffix>    public static class getNettyMetricSizeByHost_call extends org.apache.thrift.async.TAsyncMethodCall {\n      private String topologyId;\n      private String host;\n      public getNettyMetricSizeByHost_call(String topologyId, String host, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.topologyId = topologyId;\n        this.host = host;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"getNettyMetricSizeByHost\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        getNettyMetricSizeByHost_args args = new getNettyMetricSizeByHost_args();\n        args.set_topologyId(topologyId);\n        args.set_host(host);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public int getResult() throws org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return (new Client(prot)).recv_getNettyMetricSizeByHost();\n      }\n    }<fim_middle>// class below has no smell\n"}