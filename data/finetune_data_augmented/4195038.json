{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.cassandra.repair;\n\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Set;\n\nimport com.google.common.base.Preconditions;\nimport com.google.common.collect.ImmutableSet;\n\nimport org.apache.cassandra.dht.Range;\nimport org.apache.cassandra.dht.Token;\nimport org.apache.cassandra.locator.InetAddressAndPort;\n\n/**\n * Groups ranges with identical endpoints/transient endpoints\n */\npublic class CommonRange\n{\n    public final ImmutableSet<InetAddressAndPort> endpoints;\n    public final ImmutableSet<InetAddressAndPort> transEndpoints;\n    public final Collection<Range<Token>> ranges;\n\n    public CommonRange(Set<InetAddressAndPort> endpoints, Set<InetAddressAndPort> transEndpoints, Collection<Range<Token>> ranges)\n    {\n        Preconditions.checkArgument(endpoints != null && !endpoints.isEmpty(), \"Endpoints can not be empty\");\n        Preconditions.checkArgument(transEndpoints != null, \"Transient endpoints can not be null\");\n        Preconditions.checkArgument(endpoints.containsAll(transEndpoints), \"transEndpoints must be a subset of endpoints\");\n        Preconditions.checkArgument(ranges != null && !ranges.isEmpty(), \"Ranges can not be empty\");\n\n        this.endpoints = ImmutableSet.copyOf(endpoints);\n        this.transEndpoints = ImmutableSet.copyOf(transEndpoints);\n        this.ranges = new ArrayList<>(ranges);\n    }\n\n<fim_suffix>    public boolean matchesEndpoints(Set<InetAddressAndPort> endpoints, Set<InetAddressAndPort> transEndpoints)\n    {\n        // Use strict equality here, as worst thing that can happen is we generate one more stream\n        return this.endpoints.equals(endpoints) && this.transEndpoints.equals(transEndpoints);\n    }\n\n    public boolean equals(Object o)\n    {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        CommonRange that = (CommonRange) o;\n\n        if (!endpoints.equals(that.endpoints)) return false;\n        if (!transEndpoints.equals(that.transEndpoints)) return false;\n        return ranges.equals(that.ranges);\n    }\n\n    public int hashCode()\n    {\n        int result = endpoints.hashCode();\n        result = 31 * result + transEndpoints.hashCode();\n        result = 31 * result + ranges.hashCode();\n        return result;\n    }\n\n    public String toString()\n    {\n        return \"CommonRange{\" +\n               \"endpoints=\" + endpoints +\n               \", transEndpoints=\" + transEndpoints +\n               \", ranges=\" + ranges +\n               '}';\n    }\n}<fim_middle>// function below has no smell\n"}