{"text": "<fim_prefix>/*\n * Copyright 2012-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.client;\n\nimport java.util.Collections;\n\nimport org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.config.annotation.SecurityConfigurerAdapter;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer;\nimport org.springframework.security.oauth2.client.OAuth2RestOperations;\nimport org.springframework.security.oauth2.client.filter.OAuth2ClientAuthenticationProcessingFilter;\nimport org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;\nimport org.springframework.security.web.DefaultSecurityFilterChain;\nimport org.springframework.security.web.authentication.HttpStatusEntryPoint;\nimport org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;\nimport org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;\nimport org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;\nimport org.springframework.security.web.util.matcher.MediaTypeRequestMatcher;\nimport org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher;\nimport org.springframework.web.accept.ContentNegotiationStrategy;\nimport org.springframework.web.accept.HeaderContentNegotiationStrategy;\n\n/**\n * Configurer for OAuth2 Single Sign On (SSO).\n *\n * @author Dave Syer\n */\n<fim_suffix>class SsoSecurityConfigurer {\n\n\tprivate ApplicationContext applicationContext;\n\n\tSsoSecurityConfigurer(ApplicationContext applicationContext) {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\tpublic void configure(HttpSecurity http) throws Exception {\n\t\tOAuth2SsoProperties sso = this.applicationContext\n\t\t\t\t.getBean(OAuth2SsoProperties.class);\n\t\t// Delay the processing of the filter until we know the\n\t\t// SessionAuthenticationStrategy is available:\n\t\thttp.apply(new OAuth2ClientAuthenticationConfigurer(oauth2SsoFilter(sso)));\n\t\taddAuthenticationEntryPoint(http, sso);\n\t}\n\n\tprivate void addAuthenticationEntryPoint(HttpSecurity http, OAuth2SsoProperties sso)\n\t\t\tthrows Exception {\n\t\tExceptionHandlingConfigurer<HttpSecurity> exceptions = http.exceptionHandling();\n\t\tContentNegotiationStrategy contentNegotiationStrategy = http\n\t\t\t\t.getSharedObject(ContentNegotiationStrategy.class);\n\t\tif (contentNegotiationStrategy == null) {\n\t\t\tcontentNegotiationStrategy = new HeaderContentNegotiationStrategy();\n\t\t}\n\t\tMediaTypeRequestMatcher preferredMatcher = new MediaTypeRequestMatcher(\n\t\t\t\tcontentNegotiationStrategy, MediaType.APPLICATION_XHTML_XML,\n\t\t\t\tnew MediaType(\"image\", \"*\"), MediaType.TEXT_HTML, MediaType.TEXT_PLAIN);\n\t\tpreferredMatcher.setIgnoredMediaTypes(Collections.singleton(MediaType.ALL));\n\t\texceptions.defaultAuthenticationEntryPointFor(\n\t\t\t\tnew LoginUrlAuthenticationEntryPoint(sso.getLoginPath()),\n\t\t\t\tpreferredMatcher);\n\t\t// When multiple entry points are provided the default is the first one\n\t\texceptions.defaultAuthenticationEntryPointFor(\n\t\t\t\tnew HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED),\n\t\t\t\tnew RequestHeaderRequestMatcher(\"X-Requested-With\", \"XMLHttpRequest\"));\n\t}\n\n\tprivate OAuth2ClientAuthenticationProcessingFilter oauth2SsoFilter(\n\t\t\tOAuth2SsoProperties sso) {\n\t\tOAuth2RestOperations restTemplate = this.applicationContext\n\t\t\t\t.getBean(UserInfoRestTemplateFactory.class).getUserInfoRestTemplate();\n\t\tResourceServerTokenServices tokenServices = this.applicationContext\n\t\t\t\t.getBean(ResourceServerTokenServices.class);\n\t\tOAuth2ClientAuthenticationProcessingFilter filter = new OAuth2ClientAuthenticationProcessingFilter(\n\t\t\t\tsso.getLoginPath());\n\t\tfilter.setRestTemplate(restTemplate);\n\t\tfilter.setTokenServices(tokenServices);\n\t\tfilter.setApplicationEventPublisher(this.applicationContext);\n\t\treturn filter;\n\t}\n\n\tprivate static class OAuth2ClientAuthenticationConfigurer\n\t\t\textends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> {\n\n\t\tprivate OAuth2ClientAuthenticationProcessingFilter filter;\n\n\t\tOAuth2ClientAuthenticationConfigurer(\n\t\t\t\tOAuth2ClientAuthenticationProcessingFilter filter) {\n\t\t\tthis.filter = filter;\n\t\t}\n\n\t\t@Override\n\t\tpublic void configure(HttpSecurity builder) throws Exception {\n\t\t\tOAuth2ClientAuthenticationProcessingFilter ssoFilter = this.filter;\n\t\t\tssoFilter.setSessionAuthenticationStrategy(\n\t\t\t\t\tbuilder.getSharedObject(SessionAuthenticationStrategy.class));\n\t\t\tbuilder.addFilterAfter(ssoFilter,\n\t\t\t\t\tAbstractPreAuthenticatedProcessingFilter.class);\n\t\t}\n\n\t}\n\n}<fim_middle>// class below has no smell\n"}