{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *\n */\npackage org.apache.polygene.runtime.composite;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.UndeclaredThrowableException;\nimport org.apache.polygene.api.composite.CompositeInvoker;\n\npublic final class ProxyReferenceInvocationHandler\n    implements InvocationHandler, CompositeInvoker\n{\n    private Object proxy;\n\n    public Object proxy()\n    {\n        return proxy;\n    }\n\n    public void setProxy( Object proxy )\n    {\n        this.proxy = proxy;\n    }\n\n<fim_suffix>    public void clearProxy()\n    {\n        proxy = null;\n    }\n\n    @Override\n    public Object invokeComposite( Method method, Object[] args )\n        throws Throwable\n    {\n        try\n        {\n            InvocationHandler invocationHandler = Proxy.getInvocationHandler( this.proxy );\n            return invocationHandler.invoke( this.proxy, method, args );\n        }\n        catch( InvocationTargetException e )\n        {\n            throw e.getTargetException();\n        }\n        catch( UndeclaredThrowableException e )\n        {\n            throw e.getUndeclaredThrowable();\n        }\n    }\n\n    @Override\n    public Object invoke( Object proxy, Method method, Object[] args )\n        throws Throwable\n    {\n        try\n        {\n            InvocationHandler invocationHandler = Proxy.getInvocationHandler( this.proxy );\n            return invocationHandler.invoke( this.proxy, method, args );\n        }\n        catch( InvocationTargetException e )\n        {\n            throw e.getTargetException();\n        }\n        catch( UndeclaredThrowableException e )\n        {\n            throw e.getUndeclaredThrowable();\n        }\n    }\n}<fim_middle>// function below has no smell\n"}