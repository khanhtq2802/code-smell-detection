{"text": "<fim_prefix>/*\n   Derby - Class org.apache.derby.impl.services.monitor.FileMonitor\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to you under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n */\npackage org.apache.derby.impl.services.monitor;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.security.PrivilegedExceptionAction;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport org.apache.derby.shared.common.reference.Property;\nimport org.apache.derby.shared.common.i18n.MessageService;\nimport org.apache.derby.shared.common.info.ProductGenusNames;\nimport org.apache.derby.shared.common.info.ProductVersionHolder;\nimport org.apache.derby.iapi.services.io.FileUtil;\nimport org.apache.derby.shared.common.reference.MessageId;\n/**\n\tImplementation of the monitor that uses the class loader\n\tthat the its was loaded in for all class loading.\n*/\npublic final class FileMonitor extends BaseMonitor\n{\n\t/* Fields */\n\tprivate File home;\n\tprivate ProductVersionHolder engineVersion;\n\tpublic FileMonitor() {\n\t\tinitialize(true);\n\t\tapplicationProperties = readApplicationProperties();\n\t}\n\tpublic FileMonitor(Properties properties, PrintWriter log) {\n\t\trunWithState(properties, log);\n\t}\n\tprivate InputStream PBapplicationPropertiesStream()\n\t  throws IOException {\n        File sr = new File(home, Property.PROPERTIES_FILE);\n\t\tif (!sr.exists())\n\t\t\treturn null;\n\t\treturn new FileInputStream(sr);\n\t}\n\tpublic Object getEnvironment() {\n\t\treturn home;\n\t}\n    /**\n     * Create a ThreadGroup and set the daemon property to make sure\n     * the group is destroyed and garbage collected when all its\n     * members have finished (i.e., either when the driver is\n     * unloaded, or when the last database is shut down).\n     *\n     * @return the thread group \"derby.daemons\" or null if we saw\n     * a SecurityException\n     */\n<fim_suffix>    private ThreadGroup createDaemonGroup() {\n        try {\n            ThreadGroup group = new ThreadGroup(\"derby.daemons\");\n            group.setDaemon(true);\n            return group;\n        } catch (SecurityException se) {\n            // In case of a lacking privilege, issue a warning, return null and\n            // let the daemon threads be created in the default thread group.\n            // This can only happen if the current Derby thread is a part of\n            // the root thread group \"system\".\n            reportThread(se);\n            return null;\n        }\n    }\n\t/**\n\t\tSECURITY WARNING.\n\t\tThis method is run in a privileged block in a Java 2 environment.\n\t\tSet the system home directory.  Returns false if it couldn't for\n\t\tsome reason.\n\t**/\n\tprivate boolean PBinitialize(boolean lite)\n\t{\n\t\tif (!lite) {\n            daemonGroup = createDaemonGroup();\n\t\t}\n\t\tInputStream versionStream = getClass().getResourceAsStream(\"/\" + ProductGenusNames.DBMS_INFO);\n\t\tengineVersion = ProductVersionHolder.getProductVersionHolderFromMyEnv(versionStream);\n\t\tString systemHome;\n\t\t// create the system home directory if it doesn't exist\n\t\ttry {\n\t\t\t// SECURITY PERMISSION - OP2\n\t\t\tsystemHome = System.getProperty(Property.SYSTEM_HOME_PROPERTY);\n\t\t} catch (SecurityException se) {\n\t\t\t// system home will be the current directory\n            report(se, Property.SYSTEM_HOME_PROPERTY);\n\t\t\tsystemHome = null;\n\t\t}\n\t\tif (systemHome != null) {\n\t\t\thome = new File(systemHome);\n\t\t\t// SECURITY PERMISSION - OP2a\n\t\t\tif (home.exists()) {\n\t\t\t\tif (!home.isDirectory()) {\n\t\t\t\t\treport(Property.SYSTEM_HOME_PROPERTY + \"=\" + systemHome\n\t\t\t\t\t\t+ \" does not represent a directory\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (!lite) {\n                boolean created = false;\n\t\t\t\ttry {\n\t\t\t\t\t// SECURITY PERMISSION - OP2b\n                    // Attempt to create just the folder initially\n                    // which does not require read permission on\n                    // the parent folder. This is to allow a policy\n                    // file to limit file permissions for derby.jar\n                    // to be contained under derby.system.home.\n                    // If the folder cannot be created that way\n                    // due to missing parent folder(s) \n                    // then mkdir() will return false and thus\n                    // mkdirs will be called to create the\n                    // intermediate folders. This use of mkdir()\n                    // and mkdirs() retains existing (pre10.3) behaviour\n                    // but avoids requiring read permission on the parent\n                    // directory if it exists.\n                    created = home.mkdir() || home.mkdirs();\n                    if (created) {\n                        FileUtil.limitAccessToOwner(home);\n                    }\n\t\t\t\t} catch (SecurityException se) {\n                    report(se, home);\n\t\t\t\t\treturn false;\n                } catch (IOException ioe) {\n                    return false;\n                }\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t/**\n\t\tSECURITY WARNING.\n\t\tThis method is run in a privileged block in a Java 2 environment.\n\t\tReturn a property from the JVM's system set.\n\t\tIn a Java2 environment this will be executed as a privileged block\n\t\tif and only if the property starts with 'derby.'.\n\t\tIf a SecurityException occurs, null is returned.\n\t*/\n\tprivate String PBgetJVMProperty(String key) {\n\t\ttry {\n\t\t\t// SECURITY PERMISSION - OP1\n\t\t\treturn System.getProperty(key);\n\t\t} catch (SecurityException se) {\n            report(se, key);\n\t\t\treturn null;\n\t\t}\n\t}\n    private final static Map<String, Void> securityProperties =\n            new HashMap<String, Void>();\n    static {\n        securityProperties.put(\"derby.authentication.builtin.algorithm\", null);\n        securityProperties.put(\"derby.authentication.provider\", null);\n        securityProperties.put(\"derby.database.fullAccessUsers\", null);\n        securityProperties.put(\"derby.database.readOnlyAccessUsers\", null);\n        securityProperties.put(\"derby.database.sqlAuthorization\", null);\n        securityProperties.put(\"derby.connection.requireAuthentication\", null);\n        securityProperties.put(\"derby.database.defaultConnectionMode\", null);\n        securityProperties.put(\"derby.storage.useDefaultFilePermissions\", null);\n        securityProperties.put(Property.SYSTEM_HOME_PROPERTY, null);\n    };\n    private void report(SecurityException e, String key) {\n         if (securityProperties.containsKey(key)) {\n            report(MessageService.getTextMessage(\n                MessageId.CANNOT_READ_SECURITY_PROPERTY, key, e.toString()));\n         }\n    }\n    private void report(SecurityException e, File file) {\n        report(MessageService.getTextMessage(\n                MessageId.CANNOT_CREATE_FILE_OR_DIRECTORY,\n                file.toString(),\n                e.toString()));\n    }\n    private void reportThread(SecurityException e) {\n        report(MessageService.getTextMessage(\n                MessageId.CANNOT_SET_DAEMON, e.toString()));\n    }\n\t/*\n\t** Priv block code, moved out of the old Java2 version.\n\t*/\n\t/**\n\t\tInitialize the system in a privileged block.\n\t**/\n\tfinal boolean initialize(final boolean lite)\n\t{\n        // SECURITY PERMISSION - OP2, OP2a, OP2b\n        return (AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n            public Boolean run() {\n                return Boolean.valueOf(PBinitialize(lite));\n            }\n        })).booleanValue();\n\t}\n\tfinal Properties getDefaultModuleProperties() {\n        // SECURITY PERMISSION - IP1\n        return AccessController.doPrivileged(\n                new PrivilegedAction<Properties>() {\n            public Properties run() {\n                return FileMonitor.super.getDefaultModuleProperties();\n            }\n        });\n    }\n\tpublic final String getJVMProperty(final String key) {\n\t\tif (!key.startsWith(\"derby.\"))\n\t\t\treturn PBgetJVMProperty(key);\n        // SECURITY PERMISSION - OP1<fim_middle>// function below has no smell\n"}