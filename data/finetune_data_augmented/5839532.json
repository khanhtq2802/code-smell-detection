{"text": "<fim_prefix>        registerDefaultCertificate();\n        defaultCertificate.setCertificateKeyAlias(certificateKeyAlias);\n    }\n    public String getCertificateKeystoreFile() {\n        registerDefaultCertificate();\n        return defaultCertificate.getCertificateKeystoreFile();\n    }\n    public void setCertificateKeystoreFile(String certificateKeystoreFile) {\n        registerDefaultCertificate();\n        defaultCertificate.setCertificateKeystoreFile(certificateKeystoreFile);\n    }\n    public String getCertificateKeystorePassword() {\n        registerDefaultCertificate();\n        return defaultCertificate.getCertificateKeystorePassword();\n    }\n    public void setCertificateKeystorePassword(String certificateKeystorePassword) {\n        registerDefaultCertificate();\n        defaultCertificate.setCertificateKeystorePassword(certificateKeystorePassword);\n    }\n    public String getCertificateKeystoreProvider() {\n        registerDefaultCertificate();\n        return defaultCertificate.getCertificateKeystoreProvider();\n    }\n    public void setCertificateKeystoreProvider(String certificateKeystoreProvider) {\n        registerDefaultCertificate();\n        defaultCertificate.setCertificateKeystoreProvider(certificateKeystoreProvider);\n    }\n    public String getCertificateKeystoreType() {\n        registerDefaultCertificate();\n        return defaultCertificate.getCertificateKeystoreType();\n    }\n    public void setCertificateKeystoreType(String certificateKeystoreType) {\n        registerDefaultCertificate();\n        defaultCertificate.setCertificateKeystoreType(certificateKeystoreType);\n    }\n    public void setKeyManagerAlgorithm(String keyManagerAlgorithm) {\n        setProperty(\"keyManagerAlgorithm\", Type.JSSE);\n        this.keyManagerAlgorithm = keyManagerAlgorithm;\n    }\n    public String getKeyManagerAlgorithm() {\n        return keyManagerAlgorithm;\n    }\n    public void setRevocationEnabled(boolean revocationEnabled) {\n        setProperty(\"revocationEnabled\", Type.JSSE);\n        this.revocationEnabled = revocationEnabled;\n    }\n    public boolean getRevocationEnabled() {\n        return revocationEnabled;\n    }\n    public void setSslProtocol(String sslProtocol) {\n        setProperty(\"sslProtocol\", Type.JSSE);\n        this.sslProtocol = sslProtocol;\n    }\n    public String getSslProtocol() {\n        return sslProtocol;\n    }\n    public void setTrustManagerClassName(String trustManagerClassName) {\n        setProperty(\"trustManagerClassName\", Type.JSSE);\n        this.trustManagerClassName = trustManagerClassName;\n    }\n    public String getTrustManagerClassName() {\n        return trustManagerClassName;\n    }\n    public void setTruststoreAlgorithm(String truststoreAlgorithm) {\n        setProperty(\"truststoreAlgorithm\", Type.JSSE);\n        this.truststoreAlgorithm = truststoreAlgorithm;\n    }\n    public String getTruststoreAlgorithm() {\n        return truststoreAlgorithm;\n    }\n    public void setTruststoreFile(String truststoreFile) {\n        setProperty(\"truststoreFile\", Type.JSSE);\n        this.truststoreFile = truststoreFile;\n    }\n    public String getTruststoreFile() {\n        return truststoreFile;\n    }\n    public void setTruststorePassword(String truststorePassword) {\n        setProperty(\"truststorePassword\", Type.JSSE);\n        this.truststorePassword = truststorePassword;\n    }\n    public String getTruststorePassword() {\n        return truststorePassword;\n    }\n    public void setTruststoreProvider(String truststoreProvider) {\n        setProperty(\"truststoreProvider\", Type.JSSE);\n        this.truststoreProvider = truststoreProvider;\n    }\n    public String getTruststoreProvider() {\n        if (truststoreProvider == null) {\n            Set<SSLHostConfigCertificate> certificates = getCertificates();\n            if (certificates.size() == 1) {\n                return certificates.iterator().next().getCertificateKeystoreProvider();\n            }\n            return SSLHostConfigCertificate.DEFAULT_KEYSTORE_PROVIDER;\n        } else {\n            return truststoreProvider;\n        }\n    }\n    public void setTruststoreType(String truststoreType) {\n        setProperty(\"truststoreType\", Type.JSSE);\n        this.truststoreType = truststoreType;\n    }\n    public String getTruststoreType() {\n        if (truststoreType == null) {\n            Set<SSLHostConfigCertificate> certificates = getCertificates();\n            if (certificates.size() == 1) {\n                String keystoreType = certificates.iterator().next().getCertificateKeystoreType();\n                // Don't use keystore type as the default if we know it is not\n                // going to be used as a trust store type\n                if (!\"PKCS12\".equalsIgnoreCase(keystoreType)) {\n                    return keystoreType;\n                }\n            }\n            return SSLHostConfigCertificate.DEFAULT_KEYSTORE_TYPE;\n        } else {\n            return truststoreType;\n        }\n    }\n    public void setTrustStore(KeyStore truststore) {\n        this.truststore = truststore;\n    }\n    public KeyStore getTruststore() throws IOException {\n        KeyStore result = truststore;\n        if (result == null) {\n            if (truststoreFile != null){\n                try {\n                    result = SSLUtilBase.getStore(getTruststoreType(), getTruststoreProvider(),\n                            getTruststoreFile(), getTruststorePassword());\n                } catch (IOException ioe) {\n                    Throwable cause = ioe.getCause();\n                    if (cause instanceof UnrecoverableKeyException) {\n                        // Log a warning we had a password issue\n                        log.warn(sm.getString(\"jsse.invalid_truststore_password\"),\n                                cause);\n                        // Re-try\n                        result = SSLUtilBase.getStore(getTruststoreType(), getTruststoreProvider(),\n                                getTruststoreFile(), null);\n                    } else {\n                        // Something else went wrong - re-throw\n                        throw ioe;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    // ------------------------------- OpenSSL specific configuration properties\n    // TODO: These certificate setters can be removed once it is no longer\n    // necessary to support the old configuration attributes (Tomcat 10?).\n    public String getCertificateChainFile() {\n        registerDefaultCertificate();\n        return defaultCertificate.getCertificateChainFile();\n    }\n    public void setCertificateChainFile(String certificateChainFile) {\n        registerDefaultCertificate();\n        defaultCertificate.setCertificateChainFile(certificateChainFile);\n    }\n    public String getCertificateFile() {\n        registerDefaultCertificate();\n        return defaultCertificate.getCertificateFile();\n    }\n    public void setCertificateFile(String certificateFile) {\n        registerDefaultCertificate();\n        defaultCertificate.setCertificateFile(certificateFile);\n    }\n    public String getCertificateKeyFile() {\n        registerDefaultCertificate();\n        return defaultCertificate.getCertificateKeyFile();\n    }\n    public void setCertificateKeyFile(String certificateKeyFile) {\n        registerDefaultCertificate();\n        defaultCertificate.setCertificateKeyFile(certificateKeyFile);\n    }\n    public void setCertificateRevocationListPath(String certificateRevocationListPath) {\n        setProperty(\"certificateRevocationListPath\", Type.OPENSSL);\n        this.certificateRevocationListPath = certificateRevocationListPath;\n    }\n    public String getCertificateRevocationListPath() {\n        return certificateRevocationListPath;\n    }\n    public void setCaCertificateFile(String caCertificateFile) {\n        setProperty(\"caCertificateFile\", Type.OPENSSL);\n        this.caCertificateFile = caCertificateFile;\n    }\n    public String getCaCertificateFile() {\n        return caCertificateFile;\n    }\n    public void setCaCertificatePath(String caCertificatePath) {\n        setProperty(\"caCertificatePath\", Type.OPENSSL);\n        this.caCertificatePath = caCertificatePath;\n    }\n    public String getCaCertificatePath() {\n        return caCertificatePath;\n    }\n    public void setDisableCompression(boolean disableCompression) {\n        setProperty(\"disableCompression\", Type.OPENSSL);\n        this.disableCompression = disableCompression;\n    }\n    public boolean getDisableCompression() {\n        return disableCompression;\n    }\n    public void setDisableSessionTickets(boolean disableSessionTickets) {\n        setProperty(\"disableSessionTickets\", Type.OPENSSL);\n        this.disableSessionTickets = disableSessionTickets;\n    }\n    public boolean getDisableSessionTickets() {\n        return disableSessionTickets;\n    }\n    public void setInsecureRenegotiation(boolean insecureRenegotiation) {\n        setProperty(\"insecureRenegotiation\", Type.OPENSSL);\n        this.insecureRenegotiation = insecureRenegotiation;\n    }\n    public boolean getInsecureRenegotiation() {\n        return insecureRenegotiation;\n    }\n    // --------------------------------------------------------- Support methods\n<fim_suffix>    public static String adjustRelativePath(String path) throws FileNotFoundException {\n        // Empty or null path can't point to anything useful. The assumption is\n        // that the value is deliberately empty / null so leave it that way.\n        if (path == null || path.length() == 0) {\n            return path;\n        }\n        String newPath = path;\n        File f = new File(newPath);\n        if ( !f.isAbsolute()) {\n            newPath = System.getProperty(Constants.CATALINA_BASE_PROP) + File.separator + newPath;\n            f = new File(newPath);\n        }\n        if (!f.exists()) {\n            throw new FileNotFoundException(sm.getString(\"sslHostConfig.fileNotFound\", newPath));\n        }\n        return newPath;\n    }<fim_middle>// function below has no smell\n"}