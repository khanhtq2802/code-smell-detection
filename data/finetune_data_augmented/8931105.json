{"text": "<fim_prefix>            }\n            oprot.writeListEnd();\n          }\n          oprot.writeFieldEnd();\n        }\n        if (struct.o1 != null) {\n          oprot.writeFieldBegin(O1_FIELD_DESC);\n          struct.o1.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.o2 != null) {\n          oprot.writeFieldBegin(O2_FIELD_DESC);\n          struct.o2.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class get_schema_all_versions_resultTupleSchemeFactory implements SchemeFactory {\n      public get_schema_all_versions_resultTupleScheme getScheme() {\n        return new get_schema_all_versions_resultTupleScheme();\n      }\n    }\n    private static class get_schema_all_versions_resultTupleScheme extends TupleScheme<get_schema_all_versions_result> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, get_schema_all_versions_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetSuccess()) {\n          optionals.set(0);\n        }\n        if (struct.isSetO1()) {\n          optionals.set(1);\n        }\n        if (struct.isSetO2()) {\n          optionals.set(2);\n        }\n        oprot.writeBitSet(optionals, 3);\n        if (struct.isSetSuccess()) {\n          {\n            oprot.writeI32(struct.success.size());\n            for (SchemaVersion _iter1600 : struct.success)\n            {\n              _iter1600.write(oprot);\n            }\n          }\n        }\n        if (struct.isSetO1()) {\n          struct.o1.write(oprot);\n        }\n        if (struct.isSetO2()) {\n          struct.o2.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_all_versions_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        BitSet incoming = iprot.readBitSet(3);\n        if (incoming.get(0)) {\n          {\n            org.apache.thrift.protocol.TList _list1601 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());\n            struct.success = new ArrayList<SchemaVersion>(_list1601.size);\n            SchemaVersion _elem1602;\n            for (int _i1603 = 0; _i1603 < _list1601.size; ++_i1603)\n            {\n              _elem1602 = new SchemaVersion();\n              _elem1602.read(iprot);\n              struct.success.add(_elem1602);\n            }\n          }\n          struct.setSuccessIsSet(true);\n        }\n        if (incoming.get(1)) {\n          struct.o1 = new NoSuchObjectException();\n          struct.o1.read(iprot);\n          struct.setO1IsSet(true);\n        }\n        if (incoming.get(2)) {\n          struct.o2 = new MetaException();\n          struct.o2.read(iprot);\n          struct.setO2IsSet(true);\n        }\n      }\n    }\n  }\n  @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class drop_schema_version_args implements org.apache.thrift.TBase<drop_schema_version_args, drop_schema_version_args._Fields>, java.io.Serializable, Cloneable, Comparable<drop_schema_version_args>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"drop_schema_version_args\");\n    private static final org.apache.thrift.protocol.TField SCHEMA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField(\"schemaVersion\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new drop_schema_version_argsStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new drop_schema_version_argsTupleSchemeFactory());\n    }\n    private SchemaVersionDescriptor schemaVersion; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      SCHEMA_VERSION((short)1, \"schemaVersion\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // SCHEMA_VERSION\n            return SCHEMA_VERSION;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.SCHEMA_VERSION, new org.apache.thrift.meta_data.FieldMetaData(\"schemaVersion\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SchemaVersionDescriptor.class)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drop_schema_version_args.class, metaDataMap);\n    }\n    public drop_schema_version_args() {\n    }\n    public drop_schema_version_args(\n      SchemaVersionDescriptor schemaVersion)\n    {\n      this();\n      this.schemaVersion = schemaVersion;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public drop_schema_version_args(drop_schema_version_args other) {\n      if (other.isSetSchemaVersion()) {\n        this.schemaVersion = new SchemaVersionDescriptor(other.schemaVersion);\n      }\n    }\n    public drop_schema_version_args deepCopy() {\n      return new drop_schema_version_args(this);\n    }\n    @Override\n    public void clear() {\n      this.schemaVersion = null;\n    }\n    public SchemaVersionDescriptor getSchemaVersion() {\n      return this.schemaVersion;\n    }\n    public void setSchemaVersion(SchemaVersionDescriptor schemaVersion) {\n      this.schemaVersion = schemaVersion;\n    }\n    public void unsetSchemaVersion() {\n      this.schemaVersion = null;\n    }\n    /** Returns true if field schemaVersion is set (has been assigned a value) and false otherwise */\n    public boolean isSetSchemaVersion() {\n      return this.schemaVersion != null;\n    }\n    public void setSchemaVersionIsSet(boolean value) {\n      if (!value) {\n        this.schemaVersion = null;\n      }\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      case SCHEMA_VERSION:\n        if (value == null) {\n          unsetSchemaVersion();\n        } else {\n          setSchemaVersion((SchemaVersionDescriptor)value);\n        }\n        break;\n      }\n    }\n<fim_suffix>    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case SCHEMA_VERSION:\n        return getSchemaVersion();\n      }\n      throw new IllegalStateException();\n    }<fim_middle>// function below has no smell\n"}