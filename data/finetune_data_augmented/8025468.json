{"text": "<fim_prefix>\n<fim_suffix>public class ImportsAwareClipboardAction extends TextEditorAction {\n\tpublic static class Factory implements IClipboardActionFactory {\n\t\t@Inject\n\t\tprivate MembersInjector<ImportsAwareClipboardAction> injector;\n\t\t@Override\n\t\tpublic TextEditorAction create(ResourceBundle bundle, String prefix, ITextEditor editor, int operationCode) {\n\t\t\tImportsAwareClipboardAction action = new ImportsAwareClipboardAction(bundle, prefix, editor, operationCode);\n\t\t\tinjector.injectMembers(action);\n\t\t\treturn action;\n\t\t}\n\t}\n\tprivate static final XbaseClipboardTransfer TRANSFER_INSTANCE = new XbaseClipboardTransfer();\n\tprivate final int operationCode;\n\tprivate ITextOperationTarget textOperationTarget;\n\tprivate @Inject ImportsUtil importsUtil;\n\t/**\n\t * Creates the action.\n\t * \n\t * @param bundle\n\t *            the resource bundle\n\t * @param prefix\n\t *            a prefix to be prepended to the various resource keys (described in <code>ResourceAction</code>\n\t *            constructor), or <code>null</code> if none\n\t * @param editor\n\t *            the text editor. May not be <code>null</code>.\n\t * @param operationCode\n\t *            the operation code\n\t */\n\tpublic ImportsAwareClipboardAction(ResourceBundle bundle, String prefix, ITextEditor editor,\n\t\t\tfinal int operationCode) {\n\t\tsuper(bundle, prefix, editor);\n\t\tthis.operationCode = operationCode;\n\t\tif (operationCode == ITextOperationTarget.CUT) {\n\t\t\tsetHelpContextId(IAbstractTextEditorHelpContextIds.CUT_ACTION);\n\t\t\tsetActionDefinitionId(IWorkbenchCommandConstants.EDIT_CUT);\n\t\t} else if (operationCode == ITextOperationTarget.COPY) {\n\t\t\tsetHelpContextId(IAbstractTextEditorHelpContextIds.COPY_ACTION);\n\t\t\tsetActionDefinitionId(IWorkbenchCommandConstants.EDIT_COPY);\n\t\t} else if (operationCode == ITextOperationTarget.PASTE) {\n\t\t\tsetHelpContextId(IAbstractTextEditorHelpContextIds.PASTE_ACTION);\n\t\t\tsetActionDefinitionId(IWorkbenchCommandConstants.EDIT_PASTE);\n\t\t} else {\n\t\t\tAssert.isTrue(false, \"Invalid operation code\"); //$NON-NLS-1$\n\t\t}\n\t\tupdate();\n\t}\n\tprotected void internalDoOperation() {\n\t\tif (operationCode == ITextOperationTarget.PASTE) {\n\t\t\tdoPasteWithImportsOperation();\n\t\t} else {\n\t\t\tdoCutCopyWithImportsOperation();\n\t\t}\n\t}\n\tprivate void doCutCopyWithImportsOperation() {\n\t\ttry {\n\t\t\tfinal XbaseClipboardData cbData = createClipboardData();\n\t\t\tif (cbData != null ) {\n\t\t\t\tClipboardUtil.clipboardOperation(new Function<Clipboard, Boolean>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Boolean apply(Clipboard clipboard) {\n\t\t\t\t\t\tMap<Object,Transfer> payload = newLinkedHashMap();\n\t\t\t\t\t\tpayload.put(cbData, TRANSFER_INSTANCE);\n\t\t\t\t\t\tTextTransfer textTransfer = TextTransfer.getInstance();\n\t\t\t\t\t\tString textData = (String) clipboard.getContents(textTransfer);\n\t\t\t\t\t\tif (textData == null || textData.isEmpty()) {\n\t\t\t\t\t\t\t// StyledText copied any data to ClipBoard\n\t\t\t\t\t\t\treturn Boolean.FALSE;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpayload.put(textData, textTransfer);\n\t\t\t\t\t\tRTFTransfer rtfTransfer = RTFTransfer.getInstance();\n\t\t\t\t\t\tString rtfData = (String) clipboard.getContents(rtfTransfer);\n\t\t\t\t\t\tif (rtfData != null && !rtfData.isEmpty()) {\n\t\t\t\t\t\t\tpayload.put(rtfData, rtfTransfer);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tList<Object> datas = newArrayList();\n\t\t\t\t\t\tList<Transfer> dataTypes = newArrayList();\n\t\t\t\t\t\tfor (Entry<Object, Transfer> entry : payload.entrySet()) {\n\t\t\t\t\t\t\tdatas.add(entry.getKey());\n\t\t\t\t\t\t\tdataTypes.add(entry.getValue());\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tclipboard.setContents(datas.toArray(), dataTypes.toArray(new Transfer[] {}));\n\t\t\t\t\t\t\treturn Boolean.TRUE;\n\t\t\t\t\t\t} catch (SWTError e) {\n\t\t\t\t\t\t\tif (e.code != DND.ERROR_CANNOT_SET_CLIPBOARD) {\n\t\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (MessageDialog.openQuestion(getShell(), ActionMessages.CopyQualifiedNameAction_ErrorTitle, ActionMessages.CopyQualifiedNameAction_ErrorDescription)) {\n\t\t\t\t\t\t\t\tclipboard.setContents(datas.toArray(), dataTypes.toArray(new Transfer[] {}));\n\t\t\t\t\t\t\t\treturn Boolean.TRUE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn Boolean.FALSE;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} finally {\n\t\t\ttextOperationTarget.doOperation(operationCode);\n\t\t}\n\t}\n\tprivate void doPasteWithImportsOperation() {\n\t\tXbaseClipboardData xbaseClipboardData = ClipboardUtil\n\t\t\t\t.clipboardOperation(new Function<Clipboard, XbaseClipboardData>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic XbaseClipboardData apply(Clipboard input) {\n\t\t\t\t\t\tObject content = input.getContents(TRANSFER_INSTANCE);\n\t\t\t\t\t\tif (content instanceof XbaseClipboardData) {\n\t\t\t\t\t\t\treturn (XbaseClipboardData) content;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tJavaImportData javaImportsContent = ClipboardUtil.getJavaImportsContent();\n\t\tString textFromClipboard = ClipboardUtil.getTextFromClipboard();\n\t\tXtextEditor xtextEditor = EditorUtils.getXtextEditor(getTextEditor());\n\t\tboolean addImports = shouldAddImports(xtextEditor.getDocument(), caretOffset(xtextEditor));\n\t\tif (xbaseClipboardData != null && !sameTarget(xbaseClipboardData)) {\n\t\t\tdoPasteXbaseCode(xbaseClipboardData, addImports);\n\t\t} else if (javaImportsContent != null) {\n\t\t\tdoPasteJavaCode(textFromClipboard, javaImportsContent, addImports);\n\t\t} else {\n\t\t\ttextOperationTarget.doOperation(operationCode);\n\t\t}\n\t}\n\t/**\n\t * Should not add imports when pasting into a {@link XStringLiteral} or Comments (except of JavaDoc)\n\t * \n\t * @param document\n\t *            - {@link IDocument} to work with\n\t * @param caretOffset\n\t *            - current caret offset\n\t */\n\tprotected boolean shouldAddImports(IDocument document, int caretOffset) {\n\t\tif (caretOffset == 0) {\n\t\t\treturn true;\n\t\t}\n\t\tString typeRight = IDocument.DEFAULT_CONTENT_TYPE;\n\t\tString typeLeft = IDocument.DEFAULT_CONTENT_TYPE;\n\t\ttry {\n\t\t\ttypeRight = TextUtilities.getContentType(document, IDocumentExtension3.DEFAULT_PARTITIONING, caretOffset,\n\t\t\t\t\tfalse);\n\t\t\ttypeLeft = TextUtilities.getContentType(document, IDocumentExtension3.DEFAULT_PARTITIONING,\n\t\t\t\t\tcaretOffset > 0 ? caretOffset - 1 : caretOffset, false);\n\t\t} catch (BadLocationException exception) {\n\t\t\t// Should not happen\n\t\t}\n\t\tif (COMMENT_PARTITION.equals(typeRight) || STRING_LITERAL_PARTITION.equals(typeRight)\n\t\t\t\t|| SL_COMMENT_PARTITION.equals(typeRight) || \"__rich_string\".equals(typeRight)) {\n\t\t\tif (typeLeft.equals(typeRight))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\tprivate int caretOffset(final XtextEditor xtextEditor) {\n\t\tISourceViewer sourceViewer = xtextEditor.getInternalSourceViewer();\n\t\tint caretOffset = sourceViewer.getTextWidget().getCaretOffset();\n\t\tif (sourceViewer instanceof ITextViewerExtension5) {\n\t\t\tITextViewerExtension5 extension = (ITextViewerExtension5) sourceViewer;\n\t\t\tcaretOffset = extension.widgetOffset2ModelOffset(caretOffset);\n\t\t}\n\t\treturn caretOffset;\n\t}\n\tprivate void doPasteXbaseCode(XbaseClipboardData xbaseClipboardData, boolean withImports) {\n\t\tIRewriteTarget target = getTextEditor().getAdapter(IRewriteTarget.class);\n\t\tif (target != null) {\n\t\t\ttarget.beginCompoundChange();\n\t\t}\n\t\ttry {\n\t\t\ttextOperationTarget.doOperation(operationCode);\n\t\t\tif (withImports) {\n\t\t\t\timportsUtil.addImports(xbaseClipboardData.getImports(), xbaseClipboardData.getStaticImports(),\n\t\t\t\t\t\txbaseClipboardData.getExtensionImports(), getXtextDocument());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tXbaseActivator.getInstance().getLog().log(new Status(IStatus.ERROR,\n\t\t\t\t\tXbaseActivator.getInstance().getBundle().getSymbolicName(), \"Unexpected internal error: \", e));\n\t\t} finally {\n\t\t\tif (target != null) {\n\t\t\t\ttarget.endCompoundChange();\n\t\t\t}<fim_middle>// class below is blob\n"}