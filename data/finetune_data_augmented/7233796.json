{"text": "<fim_prefix>package org.robolectric.shadows;\n\nimport static android.os.Build.VERSION_CODES.P;\n\nimport android.app.slice.SliceManager;\nimport android.content.Context;\nimport android.content.pm.PackageManager;\nimport android.content.pm.PackageManager.NameNotFoundException;\nimport android.net.Uri;\nimport android.os.Handler;\nimport com.google.common.collect.ImmutableList;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.robolectric.annotation.Implementation;\nimport org.robolectric.annotation.Implements;\nimport org.robolectric.annotation.Resetter;\n\n/** Shadow of {@link SliceManager}. */\n@Implements(value = SliceManager.class, minSdk = P)\npublic class ShadowSliceManager {\n\n  private static final Map<Integer, Collection<Uri>> packageUidsToPermissionGrantedSliceUris =\n      new HashMap<>();\n  private Context context;\n\n  @Implementation\n  protected void __constructor__(Context context, Handler handler) {\n    this.context = context;\n  }\n\n  @Implementation\n  protected synchronized List<Uri> getPinnedSlices() {\n    return ImmutableList.of();\n  }\n\n  @Implementation\n  protected synchronized void grantSlicePermission(String toPackage, Uri uri) {\n    int packageUid = getUidForPackage(toPackage);\n    Collection<Uri> uris = packageUidsToPermissionGrantedSliceUris.get(packageUid);\n    if (uris == null) {\n      uris = new ArrayList<>();\n      packageUidsToPermissionGrantedSliceUris.put(packageUid, uris);\n    }\n    uris.add(uri);\n  }\n\n  @Implementation\n  protected synchronized void revokeSlicePermission(String toPackage, Uri uri) {\n    int packageUid = getUidForPackage(toPackage);\n    Collection<Uri> uris = packageUidsToPermissionGrantedSliceUris.get(packageUid);\n    if (uris != null) {\n      uris.remove(uri);\n      if (uris.isEmpty()) {\n        packageUidsToPermissionGrantedSliceUris.remove(packageUid);\n      }\n    }\n  }\n\n<fim_suffix>  @Implementation\n  protected synchronized int checkSlicePermission(Uri uri, int pid, int uid) {\n    if (uid == 0) {\n      return PackageManager.PERMISSION_GRANTED;\n    }\n    Collection<Uri> uris = packageUidsToPermissionGrantedSliceUris.get(uid);\n    if (uris != null && uris.contains(uri)) {\n      return PackageManager.PERMISSION_GRANTED;\n    }\n    return PackageManager.PERMISSION_DENIED;\n  }\n\n  private int getUidForPackage(String packageName) {\n    PackageManager packageManager = context.getPackageManager();\n    try {\n      return packageManager.getPackageUid(packageName, 0);\n    } catch (NameNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  @Resetter\n  public static synchronized void reset() {\n    packageUidsToPermissionGrantedSliceUris.clear();\n  }\n}<fim_middle>// function below has no smell\n"}