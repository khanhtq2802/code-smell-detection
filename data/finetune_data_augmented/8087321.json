{"text": "<fim_prefix>package org.eclipse.xtext.resource.parser.antlr.internal;\n\nimport org.eclipse.xtext.*;\nimport org.eclipse.xtext.parser.*;\nimport org.eclipse.xtext.parser.impl.*;\nimport org.eclipse.emf.ecore.util.EcoreUtil;\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;\nimport org.eclipse.xtext.parser.antlr.XtextTokenStream;\nimport org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;\nimport org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;\nimport org.eclipse.xtext.resource.services.LiveContainerBuilderIntegerationTestLanguageGrammarAccess;\n\n\n\nimport org.antlr.runtime.*;\nimport java.util.Stack;\nimport java.util.List;\nimport java.util.ArrayList;\n\n@SuppressWarnings(\"all\")\npublic class InternalLiveContainerBuilderIntegerationTestLanguageParser extends AbstractInternalAntlrParser {\n    public static final String[] tokenNames = new String[] {\n        \"<invalid>\", \"<EOR>\", \"<DOWN>\", \"<UP>\", \"RULE_ID\", \"RULE_INT\", \"RULE_STRING\", \"RULE_ML_COMMENT\", \"RULE_SL_COMMENT\", \"RULE_WS\", \"RULE_ANY_OTHER\"\n    };\n    public static final int RULE_ID=4;\n    public static final int RULE_WS=9;\n    public static final int RULE_STRING=6;\n    public static final int RULE_ANY_OTHER=10;\n    public static final int RULE_SL_COMMENT=8;\n    public static final int RULE_INT=5;\n    public static final int RULE_ML_COMMENT=7;\n    public static final int EOF=-1;\n\n    // delegates\n    // delegators\n\n\n        public InternalLiveContainerBuilderIntegerationTestLanguageParser(TokenStream input) {\n            this(input, new RecognizerSharedState());\n        }\n        public InternalLiveContainerBuilderIntegerationTestLanguageParser(TokenStream input, RecognizerSharedState state) {\n            super(input, state);\n             \n        }\n        \n\n    public String[] getTokenNames() { return InternalLiveContainerBuilderIntegerationTestLanguageParser.tokenNames; }\n    public String getGrammarFileName() { return \"InternalLiveContainerBuilderIntegerationTestLanguage.g\"; }\n\n\n\n     \tprivate LiveContainerBuilderIntegerationTestLanguageGrammarAccess grammarAccess;\n\n        public InternalLiveContainerBuilderIntegerationTestLanguageParser(TokenStream input, LiveContainerBuilderIntegerationTestLanguageGrammarAccess grammarAccess) {\n            this(input);\n            this.grammarAccess = grammarAccess;\n            registerRules(grammarAccess.getGrammar());\n        }\n\n        @Override\n        protected String getFirstRuleName() {\n        \treturn \"Model\";\n       \t}\n\n       \t@Override\n       \tprotected LiveContainerBuilderIntegerationTestLanguageGrammarAccess getGrammarAccess() {\n       \t\treturn grammarAccess;\n       \t}\n\n\n\n\n    // $ANTLR start \"entryRuleModel\"\n    // InternalLiveContainerBuilderIntegerationTestLanguage.g:64:1: entryRuleModel returns [EObject current=null] : iv_ruleModel= ruleModel EOF ;\n    public final EObject entryRuleModel() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleModel = null;\n\n\n        try {\n            // InternalLiveContainerBuilderIntegerationTestLanguage.g:64:46: (iv_ruleModel= ruleModel EOF )\n            // InternalLiveContainerBuilderIntegerationTestLanguage.g:65:2: iv_ruleModel= ruleModel EOF\n            {\n             newCompositeNode(grammarAccess.getModelRule()); \n            pushFollow(FollowSets000.FOLLOW_1);\n            iv_ruleModel=ruleModel();\n\n            state._fsp--;\n\n             current =iv_ruleModel; \n            match(input,EOF,FollowSets000.FOLLOW_2); \n\n            }\n\n        }\n\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"entryRuleModel\"\n\n\n    // $ANTLR start \"ruleModel\"\n    // InternalLiveContainerBuilderIntegerationTestLanguage.g:71:1: ruleModel returns [EObject current=null] : ( (lv_name_0_0= RULE_ID ) ) ;\n<fim_suffix>    public final EObject ruleModel() throws RecognitionException {\n        EObject current = null;\n\n        Token lv_name_0_0=null;\n\n\n        \tenterRule();\n\n        try {\n            // InternalLiveContainerBuilderIntegerationTestLanguage.g:77:2: ( ( (lv_name_0_0= RULE_ID ) ) )\n            // InternalLiveContainerBuilderIntegerationTestLanguage.g:78:2: ( (lv_name_0_0= RULE_ID ) )\n            {\n            // InternalLiveContainerBuilderIntegerationTestLanguage.g:78:2: ( (lv_name_0_0= RULE_ID ) )\n            // InternalLiveContainerBuilderIntegerationTestLanguage.g:79:3: (lv_name_0_0= RULE_ID )\n            {\n            // InternalLiveContainerBuilderIntegerationTestLanguage.g:79:3: (lv_name_0_0= RULE_ID )\n            // InternalLiveContainerBuilderIntegerationTestLanguage.g:80:4: lv_name_0_0= RULE_ID\n            {\n            lv_name_0_0=(Token)match(input,RULE_ID,FollowSets000.FOLLOW_2); \n\n            \t\t\t\tnewLeafNode(lv_name_0_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0());\n            \t\t\t\n\n            \t\t\t\tif (current==null) {\n            \t\t\t\t\tcurrent = createModelElement(grammarAccess.getModelRule());\n            \t\t\t\t}\n            \t\t\t\tsetWithLastConsumed(\n            \t\t\t\t\tcurrent,\n            \t\t\t\t\t\"name\",\n            \t\t\t\t\tlv_name_0_0,\n            \t\t\t\t\t\"org.eclipse.xtext.common.Terminals.ID\");\n            \t\t\t\n\n            }\n\n\n            }\n\n\n            }\n\n\n            \tleaveRule();\n\n        }\n\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"ruleModel\"\n\n    // Delegated rules\n\n\n \n\n    \n    private static class FollowSets000 {\n        public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});\n        public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});\n    }\n\n\n}<fim_middle>// function below has no smell\n"}