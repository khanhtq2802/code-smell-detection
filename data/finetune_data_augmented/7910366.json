{"text": "<fim_prefix>/*\n * Copyright 2016-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License. You may obtain\n * a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\npackage com.facebook.buck.slb;\n\nimport com.facebook.buck.core.util.log.Logger;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport org.apache.thrift.TBase;\nimport org.apache.thrift.TDeserializer;\nimport org.apache.thrift.TException;\nimport org.apache.thrift.TSerializer;\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.protocol.TCompactProtocol;\nimport org.apache.thrift.protocol.TJSONProtocol;\nimport org.apache.thrift.protocol.TProtocol;\nimport org.apache.thrift.protocol.TProtocolFactory;\nimport org.apache.thrift.protocol.TSimpleJSONProtocol;\nimport org.apache.thrift.transport.TByteBuffer;\nimport org.apache.thrift.transport.TIOStreamTransport;\nimport org.apache.thrift.transport.TTransport;\n\npublic final class ThriftUtil {\n  private static final Logger LOGGER = Logger.get(ThriftUtil.class);\n\n  private ThriftUtil() {\n    // Should not be instantiable.\n  }\n\n  public static TProtocolFactory getProtocolFactory(ThriftProtocol protocol) {\n    // TODO(ruibm): Check whether the Factories are thread safe so we can static initialize\n    // them just once.\n    switch (protocol) {\n      case JSON:\n        return new TJSONProtocol.Factory();\n\n      case COMPACT:\n        return new TCompactProtocol.Factory();\n\n      case BINARY:\n        return new TBinaryProtocol.Factory();\n\n      default:\n        throw new IllegalArgumentException(\n            String.format(\"Unknown ThriftProtocol [%s].\", protocol.toString()));\n    }\n  }\n\n<fim_suffix>  public static TProtocol newProtocolInstance(ThriftProtocol protocol, TTransport transport) {\n    return getProtocolFactory(protocol).getProtocol(transport);\n  }\n\n  public static void serialize(ThriftProtocol protocol, TBase<?, ?> source, OutputStream stream)\n      throws ThriftException {\n    try (TTransport transport = new TIOStreamTransport(stream)) {\n      TProtocol thriftProtocol = getProtocolFactory(protocol).getProtocol(transport);\n      try {\n        source.write(thriftProtocol);\n      } catch (TException e) {\n        throw new ThriftException(e);\n      }\n    }\n  }\n\n  public static byte[] serialize(ThriftProtocol protocol, TBase<?, ?> source)\n      throws ThriftException {\n    TSerializer serializer = new TSerializer(getProtocolFactory(protocol));\n    try {\n      return serializer.serialize(source);\n    } catch (TException e) {\n      throw new ThriftException(e);\n    }\n  }\n\n  public static ByteBuffer serializeToByteBuffer(ThriftProtocol protocol, TBase<?, ?> source)\n      throws ThriftException {\n    TSerializer serializer = new TSerializer(getProtocolFactory(protocol));\n    try {\n      return ByteBuffer.wrap(serializer.serialize(source));\n    } catch (TException e) {\n      throw new ThriftException(e);\n    }\n  }\n\n  public static void deserialize(ThriftProtocol protocol, byte[] source, TBase<?, ?> dest)\n      throws ThriftException {\n    TDeserializer deserializer = new TDeserializer(getProtocolFactory(protocol));\n    dest.clear();\n    try {\n      deserializer.deserialize(dest, source);\n    } catch (TException e) {\n      throw new ThriftException(e);\n    }\n  }\n\n  public static void deserialize(ThriftProtocol protocol, InputStream source, TBase<?, ?> dest)\n      throws ThriftException {\n    try (TIOStreamTransport responseTransport = new TIOStreamTransport(source)) {\n      TProtocol responseProtocol = newProtocolInstance(protocol, responseTransport);\n      dest.read(responseProtocol);\n    } catch (TException e) {\n      throw new ThriftException(e);\n    }\n  }\n\n  /** Deserialize a message from a ByteBuffer. */\n  public static void deserialize(ThriftProtocol protocol, ByteBuffer source, TBase<?, ?> dest)\n      throws ThriftException {\n    try (TTransport responseTransport = new TByteBuffer(source)) {\n      TProtocol responseProtocol = newProtocolInstance(protocol, responseTransport);\n      dest.read(responseProtocol);\n    } catch (TException e) {\n      throw new ThriftException(e);\n    }\n  }\n\n  public static String thriftToDebugJson(TBase<?, ?> thriftObject) {\n    TSerializer serializer = new TSerializer(new TSimpleJSONProtocol.Factory());\n    try {\n      return new String(serializer.serialize(thriftObject));\n    } catch (TException e) {\n      LOGGER.error(\n          e,\n          String.format(\n              \"Failed trying to serialize type [%s] to debug JSON.\",\n              thriftObject.getClass().getName()));\n      return \"FAILED_TO_DESERIALIZE\";\n    }\n  }\n}<fim_middle>// function below has no smell\n"}