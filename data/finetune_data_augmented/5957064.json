{"text": "<fim_prefix>            HttpRequestImpl mockRequest = null;\n            try {\n                mockRequest = new HttpRequestImpl(new URI(\"http://mock/\"));\n                mockRequest.parseURI(new StringTokenizer(\"mock\\n\"));  // will do http://mock/mock, we don't really care\n                mock = mockRequest;\n            } catch (final Exception e) {\n                // no-op\n            }\n        }\n        if (systemInstance.getComponent(HttpServletRequest.class) == null) {\n            systemInstance.setComponent(HttpServletRequest.class, Proxys.threadLocalProxy(HttpServletRequest.class, request, mock));\n        }\n        if (systemInstance.getComponent(HttpSession.class) == null) {\n            final javax.servlet.http.HttpSession delegate = mock != null ? mock.getSession() : null;\n            systemInstance.setComponent(javax.servlet.http.HttpSession.class, Proxys.threadLocalRequestSessionProxy(request, new ServletSessionAdapter(delegate) {\n                @Override\n                public void invalidate() {\n                    final Object web = AppFinder.findAppContextOrWeb(Thread.currentThread().getContextClassLoader(), AppFinder.AppOrWebContextTransformer.INSTANCE);\n                    if (WebContext.class.isInstance(web)) {\n                        doInvokeSpecificListeners(WebContext.class.cast(web).getContextRoot());\n                    } else if (AppContext.class.isInstance(web)) {\n                        doInvokeSpecificListeners(AppContext.class.cast(web).getId());\n                    }\n                    super.invalidate();\n                }\n                private void doInvokeSpecificListeners(final String web) {\n                    final WebAppBuilder wab = SystemInstance.get().getComponent(WebAppBuilder.class);\n                    if (LightweightWebAppBuilder.class.isInstance(wab)) {\n                        final Collection<HttpSessionListener> listeners = LightweightWebAppBuilderListenerExtractor.findByTypeForContext(web, HttpSessionListener.class);\n                        final HttpSessionEvent event = new HttpSessionEvent(this);\n                        for (final HttpSessionListener o : listeners) {\n                            try {\n                                o.sessionDestroyed(event);\n                            } catch (final Throwable th) {\n                                // ignore, may be undeployed\n                            }\n                        }\n                    }\n                }\n            }));\n        }\n        if (systemInstance.getComponent(ServletContext.class) == null) { // a poor impl but at least we set something\n            systemInstance.setComponent(ServletContext.class, new EmbeddedServletContext());\n        }\n        defaultClassLoader = ParentClassLoaderFinder.Helper.get();\n        String resourceFolderPaths = SystemInstance.get().getProperty(\"openejb.embedded.http.resources\");\n        Collection<File> resources = new LinkedList<>();\n        if (resourceFolderPaths != null) {\n            for (final String path : resourceFolderPaths.split(\" , \")) {\n                if (!path.isEmpty()) {\n                    resources.add(new File(path));\n                }\n            }\n        }\n        resourceBases = resources.toArray(new File[resources.size()]);\n        defaultContextTypes.put(\"html\", \"text/html\");\n        defaultContextTypes.put(\"html\", \"text/html\");\n        defaultContextTypes.put(\"css\", \"text/css\");\n        defaultContextTypes.put(\"txt\", \"text/plain\");\n        defaultContextTypes.put(\"xml\", \"application/xml\");\n        defaultContextTypes.put(\"xsl\", \"application/xml\");\n        defaultContextTypes.put(\"js\", \"application/javascript\");\n        defaultContextTypes.put(\"gif\", \"image/gif\");\n        defaultContextTypes.put(\"jpeg\", \"image/jpeg\");\n        defaultContextTypes.put(\"jpg\", \"image/jpeg\");\n        defaultContextTypes.put(\"png\", \"image/png\");\n        defaultContextTypes.put(\"tiff\", \"image/tiff\");\n    }\n    @Override\n    public void onMessage(final HttpRequest request, final HttpResponse response) throws Exception {\n        final String path;\n        if (!HttpRequestImpl.class.isInstance(request)) {\n            path = request.getRequestURI();\n        } else {\n            path = getRequestHandledPath(request);\n        }\n        final FilterListener currentFL = currentFilterListener.get();\n        // first look filters\n        Map<String, Collection<HttpListener>> filters;\n        synchronized (filterRegistry) {\n            filters = new HashMap<>(filterRegistry);\n        }\n        final HttpRequest registered = this.request.get();\n        final boolean reset = registered == null;\n        try {\n            if (reset) {\n                this.request.set(request);\n            }\n            boolean lastWasCurrent = false;\n            for (Map.Entry<String, Collection<HttpListener>> entry : filters.entrySet()) {\n                String pattern = entry.getKey();\n                for (HttpListener listener : entry.getValue()) {\n                    if ((lastWasCurrent || currentFL == null) && path.matches(pattern)) {\n                        listener.onMessage(request, response);\n                        return;\n                    }\n                    lastWasCurrent = listener == currentFL;\n                }\n            }\n            // then others\n            Map<String, HttpListener> listeners;\n            synchronized (registry) {\n                listeners = new HashMap<>(registry);\n            }\n            boolean found = false;\n            for (final Map.Entry<String, HttpListener> entry : listeners.entrySet()) {\n                final String pattern = entry.getKey();\n                if (path.matches(pattern) || path.equals(pattern)) {\n                    if (pattern.contains(\"/.*\\\\.\") && HttpRequestImpl.class.isInstance(request)) { // TODO: enhance it, basically servlet *.xxx\n                        HttpRequestImpl.class.cast(request).noPathInfo();\n                    }\n                    entry.getValue().onMessage(request, response);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                final String servletPath = request.getServletPath();\n                if (servletPath != null) {\n                    URL url = SystemInstance.get().getComponent(ServletContext.class).getResource(servletPath);\n                    if (url != null) {\n                        serveResource(servletPath, response, url);\n                    } else {\n                        final String pathWithoutSlash = \"/\".equals(path) || \"\".equals(servletPath) || \"/\".equals(servletPath) ? welcomeFile :\n                                (servletPath.startsWith(\"/\") ? servletPath.substring(1) : servletPath);\n                        url = defaultClassLoader.getResource(\"META-INF/resources/\" + pathWithoutSlash);\n                        if (url != null) {\n                            serveResource(servletPath, response, url);\n                        } else if (resourceBases.length > 0) {\n                            for (final File f : resourceBases) {\n                                final File file = new File(f, pathWithoutSlash);\n                                if (file.isFile()) {\n                                    url = file.toURI().toURL();\n                                    serveResource(servletPath, response, url);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (url != null) {\n                        final int dot = servletPath.lastIndexOf('.');\n                        if (dot > 0 && dot < servletPath.length() - 1) {\n                            final String ext = servletPath.substring(dot + 1);\n                            final String ct = defaultContextTypes.get(ext);\n                            if (ct != null) {\n                                response.setContentType(ct);\n                            } else {\n                                final String uct = SystemInstance.get().getProperty(\"openejb.embedded.http.content-type.\" + ext);\n                                if (uct != null) {\n                                    response.setContentType(uct);\n                                }\n                            }\n                        }\n                    }\n                } // TODO else 404\n            }\n        } finally {\n            if (currentFL == null) {\n                currentFilterListener.set(null);\n            }\n            if (reset) {\n                this.request.set(null);\n            }\n        }\n    }\n    private void serveResource(final String key, final HttpResponse response, final URL url) throws IOException {\n        if (cacheResources) {\n            byte[] value = cache.get(key);\n            if (value == null) {\n                final InputStream from = url.openStream();\n                try {\n                    ByteArrayOutputStream to = new ByteArrayOutputStream();\n                    IO.copy(from, to);\n                    value = to.toByteArray();\n                    cache.put(key, value);\n                } finally {\n                    IO.close(from);\n                }\n            }\n            response.getOutputStream().write(value);\n        } else {\n            final InputStream from = url.openStream();\n            try {\n                IO.copy(from, response.getOutputStream());\n            } finally {\n                IO.close(from);\n            }\n        }\n    }\n    private String getRequestHandledPath(final HttpRequest request) {\n        final String servletPath = request.getServletPath();\n        return request.getContextPath() + (!servletPath.startsWith(\"/\") ? \"/\" : \"\") + servletPath;\n    }\n    public void addHttpListener(HttpListener listener, String regex) {\n        synchronized (registry) {\n            registry.put(regex, listener);\n        }\n    }\n    public HttpListener removeHttpListener(String regex) {\n        HttpListener listener;\n        synchronized (registry) {\n            listener = registry.remove(regex);\n        }\n        return listener;\n    }\n<fim_suffix>    public void addHttpFilter(HttpListener listener, String regex) {\n        synchronized (filterRegistry) {\n            if (!filterRegistry.containsKey(regex)) {\n                filterRegistry.put(regex, new ArrayList<HttpListener>());\n            }\n            filterRegistry.get(regex).add(listener);\n        }\n    }<fim_middle>// function below has no smell\n"}