{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.eagle.query.aggregate;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic enum AggregateFunctionType {\n    count(\"^(count)$\"),\n    sum(\"^sum\\\\((.*)\\\\)$\"),\n    avg(\"^avg\\\\((.*)\\\\)$\"),\n    max(\"^max\\\\((.*)\\\\)$\"),\n    min(\"^min\\\\((.*)\\\\)$\");\n\n    private Pattern pattern;\n    private AggregateFunctionType(String patternString) {\n        this.pattern = Pattern.compile(patternString);\n    }\n\n    /**\n     * This method is thread safe\n     * match and retrieve back the aggregated fields, for count, aggregateFields can be null\n     * @param function\n     * @return\n     */\n    public AggregateFunctionTypeMatcher matcher(String function) {\n        Matcher m = pattern.matcher(function);\n\n        if (m.find()) {\n            return new AggregateFunctionTypeMatcher(this, true, m.group(1));\n        } else {\n            return new AggregateFunctionTypeMatcher(this, false, null);\n        }\n    }\n\n<fim_suffix>    public static AggregateFunctionTypeMatcher matchAll(String function) {\n        for (AggregateFunctionType type : values()) {\n            Matcher m = type.pattern.matcher(function);\n            if (m.find()) {\n                return new AggregateFunctionTypeMatcher(type, true, m.group(1));\n            }\n        }\n        return new AggregateFunctionTypeMatcher(null, false, null);\n    }\n\n    public static byte[] serialize(AggregateFunctionType type) {\n        return type.name().getBytes();\n    }\n\n    public static AggregateFunctionType deserialize(byte[] type) {\n        return valueOf(new String(type));\n    }\n\n    public static List<byte[]> toBytesList(List<AggregateFunctionType> types) {\n        List<byte[]> result = new ArrayList<byte[]>();\n        for (AggregateFunctionType type:types) {\n            result.add(serialize(type));\n        }\n        return result;\n    }\n\n    public static List<AggregateFunctionType> fromBytesList(List<byte[]> types) {\n        List<AggregateFunctionType> result = new ArrayList<AggregateFunctionType>();\n        for (byte[] bs:types) {\n            result.add(deserialize(bs));\n        }\n        return result;\n    }\n}<fim_middle>// function below has no smell\n"}