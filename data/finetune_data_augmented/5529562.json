{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/*\n * ===========================================================================\n *\n * (C) Copyright IBM Corp. 2003 All Rights Reserved.\n *\n * ===========================================================================\n */\n/*\n * Portions copyright 2005 Sun Microsystems, Inc. All rights reserved.\n */\n/*\n * $Id$\n */\npackage org.apache.jcp.xml.dsig.internal.dom;\n\nimport java.security.InvalidAlgorithmParameterException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport javax.xml.crypto.MarshalException;\nimport javax.xml.crypto.XMLCryptoContext;\nimport javax.xml.crypto.XMLStructure;\nimport javax.xml.crypto.dsig.Transform;\nimport javax.xml.crypto.dsig.spec.TransformParameterSpec;\nimport javax.xml.crypto.dsig.spec.XPathFilter2ParameterSpec;\nimport javax.xml.crypto.dsig.spec.XPathType;\n\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NamedNodeMap;\n\n/**\n * DOM-based implementation of XPath Filter 2.0 Transform.\n * (Uses Apache XML-Sec Transform implementation)\n *\n */\n<fim_suffix>public final class DOMXPathFilter2Transform extends ApacheTransform {\n\n    public void init(TransformParameterSpec params)\n        throws InvalidAlgorithmParameterException\n    {\n        if (params == null) {\n            throw new InvalidAlgorithmParameterException(\"params are required\");\n        } else if (!(params instanceof XPathFilter2ParameterSpec)) {\n            throw new InvalidAlgorithmParameterException\n                (\"params must be of type XPathFilter2ParameterSpec\");\n        }\n        this.params = params;\n    }\n\n    public void init(XMLStructure parent, XMLCryptoContext context)\n        throws InvalidAlgorithmParameterException\n    {\n        super.init(parent, context);\n        try {\n            unmarshalParams(DOMUtils.getFirstChildElement(transformElem));\n        } catch (MarshalException me) {\n            throw new InvalidAlgorithmParameterException(me);\n        }\n    }\n\n    private void unmarshalParams(Element curXPathElem) throws MarshalException\n    {\n        List<XPathType> list = new ArrayList<>();\n        Element currentElement = curXPathElem;\n        while (currentElement != null) {\n            String xPath = currentElement.getFirstChild().getNodeValue();\n            String filterVal = DOMUtils.getAttributeValue(currentElement,\n                                                          \"Filter\");\n            if (filterVal == null) {\n                throw new MarshalException(\"filter cannot be null\");\n            }\n            XPathType.Filter filter = null;\n            if (\"intersect\".equals(filterVal)) {\n                filter = XPathType.Filter.INTERSECT;\n            } else if (\"subtract\".equals(filterVal)) {\n                filter = XPathType.Filter.SUBTRACT;\n            } else if (\"union\".equals(filterVal)) {\n                filter = XPathType.Filter.UNION;\n            } else {\n                throw new MarshalException(\"Unknown XPathType filter type\" +\n                                           filterVal);\n            }\n            NamedNodeMap attributes = currentElement.getAttributes();\n            if (attributes != null) {\n                int length = attributes.getLength();\n                Map<String, String> namespaceMap =\n                    new HashMap<>(length);\n                for (int i = 0; i < length; i++) {\n                    Attr attr = (Attr)attributes.item(i);\n                    String prefix = attr.getPrefix();\n                    if (prefix != null && \"xmlns\".equals(prefix)) {\n                        namespaceMap.put(attr.getLocalName(), attr.getValue());\n                    }\n                }\n                list.add(new XPathType(xPath, filter, namespaceMap));\n            } else {\n                list.add(new XPathType(xPath, filter));\n            }\n\n            currentElement = DOMUtils.getNextSiblingElement(currentElement);\n        }\n        this.params = new XPathFilter2ParameterSpec(list);\n    }\n\n    public void marshalParams(XMLStructure parent, XMLCryptoContext context)\n        throws MarshalException\n    {\n        super.marshalParams(parent, context);\n        XPathFilter2ParameterSpec xp =\n            (XPathFilter2ParameterSpec)getParameterSpec();\n        String prefix = DOMUtils.getNSPrefix(context, Transform.XPATH2);\n        String qname = prefix == null || prefix.length() == 0\n                       ? \"xmlns\" : \"xmlns:\" + prefix;\n        @SuppressWarnings(\"unchecked\")\n        List<XPathType> xpathList = xp.getXPathList();\n        for (XPathType xpathType : xpathList) {\n            Element elem = DOMUtils.createElement(ownerDoc, \"XPath\",\n                                                  Transform.XPATH2, prefix);\n            elem.appendChild\n                (ownerDoc.createTextNode(xpathType.getExpression()));\n            DOMUtils.setAttribute(elem, \"Filter\",\n                                  xpathType.getFilter().toString());\n            elem.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", qname,\n                                Transform.XPATH2);\n\n            // add namespace attributes, if necessary\n            @SuppressWarnings(\"unchecked\")\n            Set<Map.Entry<String, String>> entries =\n                xpathType.getNamespaceMap().entrySet();\n            for (Map.Entry<String, String> entry : entries) {\n                elem.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:\" +\n                                    entry.getKey(),\n                                    entry.getValue());\n            }\n\n            transformElem.appendChild(elem);\n        }\n    }\n}<fim_middle>// class below is blob\n"}