{"text": "<fim_prefix> *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n *     implied, including, without limitation, any warranties or conditions\n *     of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n *     PARTICULAR PURPOSE. You are solely responsible for determining the\n *     appropriateness of using or redistributing the Work and assume any\n *     risks associated with Your exercise of permissions under this License.\n *\n *  8. Limitation of Liability. In no event and under no legal theory,\n *     whether in tort (including negligence), contract, or otherwise,\n *     unless required by applicable law (such as deliberate and grossly\n *     negligent acts) or agreed to in writing, shall any Contributor be\n *     liable to You for damages, including any direct, indirect, special,\n *     incidental, or consequential damages of any character arising as a\n *     result of this License or out of the use or inability to use the\n *     Work (including but not limited to damages for loss of goodwill,\n *     work stoppage, computer failure or malfunction, or any and all\n *     other commercial damages or losses), even if such Contributor\n *     has been advised of the possibility of such damages.\n *\n *  9. Accepting Warranty or Additional Liability. While redistributing\n *     the Work or Derivative Works thereof, You may choose to offer,\n *     and charge a fee for, acceptance of support, warranty, indemnity,\n *     or other liability obligations and/or rights consistent with this\n *     License. However, in accepting such obligations, You may act only\n *     on Your own behalf and on Your sole responsibility, not on behalf\n *     of any other Contributor, and only if You agree to indemnify,\n *     defend, and hold each Contributor harmless for any liability\n *     incurred by, or claims asserted against, such Contributor by reason\n *     of your accepting any such warranty or additional liability.\n *\n *  END OF TERMS AND CONDITIONS\n *\n *  APPENDIX: How to apply the Apache License to your work.\n *\n *     To apply the Apache License to your work, attach the following\n *     boilerplate notice, with the fields enclosed by brackets \"[]\"\n *     replaced with your own identifying information. (Don't include\n *     the brackets!)  The text should be enclosed in the appropriate\n *     comment syntax for the file format. We also recommend that a\n *     file or class name and description of purpose be included on the\n *     same \"printed page\" as the copyright notice for easier\n *     identification within third-party archives.\n *\n *  Copyright 2016 Alibaba Group\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *\n *\n */\npackage android.taobao.atlas.framework.bundlestorage;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.jar.Manifest;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\nimport android.app.PreVerifier;\nimport android.content.Context;\nimport android.os.Build;\nimport android.support.multidex.MultiDex;\nimport android.taobao.atlas.bundleInfo.AtlasBundleInfoManager;\nimport android.taobao.atlas.framework.Framework;\nimport android.taobao.atlas.hack.AtlasHacks;\nimport android.taobao.atlas.runtime.RuntimeVariables;\nimport android.taobao.atlas.util.ApkUtils;\nimport android.taobao.atlas.util.AtlasFileLock;\nimport android.taobao.atlas.util.IOUtil;\nimport android.taobao.atlas.util.StringUtils;\nimport android.taobao.atlas.util.log.impl.AtlasMonitor;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport dalvik.system.DexClassLoader;\nimport dalvik.system.DexFile;\npublic class BundleArchiveRevision {\n    final static String  BUNDLE_ODEX_FILE   = \"bundle.dex\";\n    final static String  BUNDLE_LEX_FILE    = \"bundle.lex\";\n    final static String  REFERENCE_PROTOCOL = \"reference:\";\n    final static String  FILE_PROTOCOL      = \"file:\";\n    final static String  BUNDLE_FILE_NAME   = \"bundle.zip\";\n    private DexFile patchDexFileForDebug;\n    /**\n     * the bundle revision file location.\n     */\n    private final String revisionLocation;\n    private final File   revisionDir;\n    private final String location;\n    private final File   bundleFile;\n    private ZipFile      zipFile;\n    private DexFile      dexFile;\n    private Manifest     manifest;\n    private volatile boolean isDexOptDone = false;\n    //There is no DexFile on yunos 2.x, so we use DexClassLoader;\n    private ClassLoader  dexClassLoader;\n    private boolean externalStorage = false;\n    //create\n    BundleArchiveRevision(String location, File revisionDir, InputStream inputStream) throws IOException{\n        if (Boolean.FALSE.booleanValue()){\n            String.valueOf(PreVerifier.class);\n        }\n        this.revisionDir = revisionDir;\n        this.location = location;\n        if (!this.revisionDir.exists()) {\n            this.revisionDir.mkdirs();\n        }\n        if(revisionDir.getAbsolutePath().startsWith(RuntimeVariables.androidApplication.getFilesDir().getAbsolutePath())){\n            externalStorage = false;\n        }else{\n            externalStorage = true;\n        }\n        this.revisionLocation = FILE_PROTOCOL;\n        this.bundleFile = new File(revisionDir, BUNDLE_FILE_NAME);\n        ApkUtils.copyInputStreamToFile(inputStream, bundleFile);\n        installSoLib(bundleFile);\n        updateMetadata();\n    }\n    //create\n<fim_suffix>    BundleArchiveRevision(String location, File revisionDir, File file) throws IOException{\n        this.revisionDir = revisionDir;\n        this.location = location;\n        if (!this.revisionDir.exists()) {\n            this.revisionDir.mkdirs();\n        }\n        if(revisionDir.getAbsolutePath().startsWith(RuntimeVariables.androidApplication.getFilesDir().getAbsolutePath())){\n            externalStorage = false;\n        }else{\n            externalStorage = true;\n        }\n        if(shouldCopyInstallFile(file)){\n            if (isSameDriver(revisionDir, file)) {\n                this.revisionLocation = FILE_PROTOCOL;\n                this.bundleFile = new File(revisionDir, BUNDLE_FILE_NAME);\n                boolean result = file.renameTo(bundleFile);\n                if(!result){\n                    ApkUtils.copyInputStreamToFile(new FileInputStream(file), bundleFile);\n                }\n            } else {\n                this.revisionLocation = FILE_PROTOCOL;\n                this.bundleFile = new File(revisionDir, BUNDLE_FILE_NAME);\n                ApkUtils.copyInputStreamToFile(new FileInputStream(file), bundleFile);\n            }\n            installSoLib(bundleFile);\n        }else{\n            this.revisionLocation = REFERENCE_PROTOCOL + file.getAbsolutePath();\n            this.bundleFile = file;\n            installSoLib(file);\n        }\n        updateMetadata();\n    }<fim_middle>// function below is long method\n"}