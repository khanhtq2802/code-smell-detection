{"text": "<fim_prefix>\t\t\treturn BinaryGenericConverter.INSTANCE;\n\t\t} else {\n\t\t\treturn new GenericConverter(typeInfo.createSerializer(new ExecutionConfig()));\n\t\t}\n\t}\n\t/**\n\t * Converter between internal data format and java format.\n\t *\n\t * @param <Internal> Internal data format.\n\t * @param <External> External data format.\n\t */\n\tpublic abstract static class DataFormatConverter<Internal, External> implements Serializable {\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t/**\n\t\t * Converts a external(Java) data format to its internal equivalent while automatically handling nulls.\n\t\t */\n\t\tpublic final Internal toInternal(External value) {\n\t\t\treturn value == null ? null : toInternalImpl(value);\n\t\t}\n\t\t/**\n\t\t * Converts a non-null external(Java) data format to its internal equivalent.\n\t\t */\n\t\tabstract Internal toInternalImpl(External value);\n\t\t/**\n\t\t * Convert a internal data format to its external(Java) equivalent while automatically handling nulls.\n\t\t */\n\t\tpublic final External toExternal(Internal value) {\n\t\t\treturn value == null ? null : toExternalImpl(value);\n\t\t}\n\t\t/**\n\t\t * Convert a non-null internal data format to its external(Java) equivalent.\n\t\t */\n\t\tabstract External toExternalImpl(Internal value);\n\t\t/**\n\t\t * Given a internalType row, convert the value at column `column` to its external(Java) equivalent.\n\t\t * This method will only be called on non-null columns.\n\t\t */\n\t\tabstract External toExternalImpl(BaseRow row, int column);\n\t\t/**\n\t\t * Given a internalType row, convert the value at column `column` to its external(Java) equivalent.\n\t\t */\n\t\tpublic final External toExternal(BaseRow row, int column) {\n\t\t\treturn row.isNullAt(column) ? null : toExternalImpl(row, column);\n\t\t}\n\t}\n\t/**\n\t * Identity converter.\n\t */\n\tpublic abstract static class IdentityConverter<T> extends DataFormatConverter<T, T> {\n\t\tprivate static final long serialVersionUID = 6146619729108124872L;\n\t\t@Override\n\t\tT toInternalImpl(T value) {\n\t\t\treturn value;\n\t\t}\n\t\t@Override\n\t\tT toExternalImpl(T value) {\n\t\t\treturn value;\n\t\t}\n\t}\n\t/**\n\t * Converter for boolean.\n\t */\n\tpublic static class BooleanConverter extends IdentityConverter<Boolean> {\n\t\tprivate static final long serialVersionUID = 3618373319753553272L;\n\t\tpublic static final BooleanConverter INSTANCE = new BooleanConverter();\n\t\tprivate BooleanConverter() {}\n\t\t@Override\n\t\tBoolean toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getBoolean(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for byte.\n\t */\n\tpublic static class ByteConverter extends IdentityConverter<Byte> {\n\t\tprivate static final long serialVersionUID = 1880134895918999433L;\n\t\tpublic static final ByteConverter INSTANCE = new ByteConverter();\n\t\tprivate ByteConverter() {}\n\t\t@Override\n\t\tByte toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getByte(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for short.\n\t */\n\tpublic static class ShortConverter extends IdentityConverter<Short> {\n\t\tprivate static final long serialVersionUID = 8055034507232206636L;\n\t\tpublic static final ShortConverter INSTANCE = new ShortConverter();\n\t\tprivate ShortConverter() {}\n\t\t@Override\n\t\tShort toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getShort(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for int.\n\t */\n\tpublic static class IntConverter extends IdentityConverter<Integer> {\n\t\tprivate static final long serialVersionUID = -7749307898273403416L;\n\t\tpublic static final IntConverter INSTANCE = new IntConverter();\n\t\tprivate IntConverter() {}\n\t\t@Override\n\t\tInteger toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getInt(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for long.\n\t */\n\tpublic static class LongConverter extends IdentityConverter<Long> {\n\t\tprivate static final long serialVersionUID = 7373868336730797650L;\n\t\tpublic static final LongConverter INSTANCE = new LongConverter();\n\t\tprivate LongConverter() {}\n\t\t@Override\n\t\tLong toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getLong(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for float.\n\t */\n\tpublic static class FloatConverter extends IdentityConverter<Float> {\n\t\tprivate static final long serialVersionUID = -1119035126939832966L;\n\t\tpublic static final FloatConverter INSTANCE = new FloatConverter();\n\t\tprivate FloatConverter() {}\n\t\t@Override\n\t\tFloat toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getFloat(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for double.\n\t */\n\tpublic static class DoubleConverter extends IdentityConverter<Double> {\n\t\tprivate static final long serialVersionUID = 2801171640313215040L;\n\t\tpublic static final DoubleConverter INSTANCE = new DoubleConverter();\n\t\tprivate DoubleConverter() {}\n\t\t@Override\n\t\tDouble toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getDouble(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for char.\n\t */\n\tpublic static class CharConverter extends IdentityConverter<Character> {\n\t\tprivate static final long serialVersionUID = -7631466361315237011L;\n\t\tpublic static final CharConverter INSTANCE = new CharConverter();\n\t\tprivate CharConverter() {}\n\t\t@Override\n\t\tCharacter toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getChar(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for BinaryString.\n\t */\n\tpublic static class BinaryStringConverter extends IdentityConverter<BinaryString> {\n\t\tprivate static final long serialVersionUID = 5565684451615599206L;\n\t\tpublic static final BinaryStringConverter INSTANCE = new BinaryStringConverter();\n\t\tprivate BinaryStringConverter() {}\n\t\t@Override\n\t\tBinaryString toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getString(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for BinaryArray.\n\t */\n\tpublic static class BinaryArrayConverter extends IdentityConverter<BinaryArray> {\n\t\tprivate static final long serialVersionUID = -7790350668043604641L;\n\t\tpublic static final BinaryArrayConverter INSTANCE = new BinaryArrayConverter();\n\t\tprivate BinaryArrayConverter() {}\n\t\t@Override\n\t\tBinaryArray toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getArray(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for BinaryMap.\n\t */\n\tpublic static class BinaryMapConverter extends IdentityConverter<BinaryMap> {\n\t\tprivate static final long serialVersionUID = -9114231688474126815L;\n\t\tpublic static final BinaryMapConverter INSTANCE = new BinaryMapConverter();\n\t\tprivate BinaryMapConverter() {}\n\t\t@Override\n\t\tBinaryMap toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getMap(column);\n\t\t}\n\t}\n\t/**\n\t * Converter for Decimal.\n\t */\n<fim_suffix>\tpublic static class DecimalConverter extends IdentityConverter<Decimal> {\n\t\tprivate static final long serialVersionUID = 3825744951173809617L;\n\t\tprivate final int precision;\n\t\tprivate final int scale;\n\t\tpublic DecimalConverter(int precision, int scale) {\n\t\t\tthis.precision = precision;\n\t\t\tthis.scale = scale;\n\t\t}\n\t\t@Override\n\t\tDecimal toExternalImpl(BaseRow row, int column) {\n\t\t\treturn row.getDecimal(column, precision, scale);\n\t\t}\n\t}<fim_middle>// class below has no smell\n"}