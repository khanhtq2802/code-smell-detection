{"text": "<fim_prefix>\n<fim_suffix>@IndexSubclasses\npublic class DittoRuntimeException extends RuntimeException\n        implements Jsonifiable.WithPredicate<JsonObject, JsonField>, WithDittoHeaders<DittoRuntimeException>,\n        WithManifest {\n    private static final long serialVersionUID = -7010323324132561106L;\n    private final String errorCode;\n    private final HttpStatusCode statusCode;\n    private final String description;\n    private final URI href;\n    private final transient DittoHeaders dittoHeaders; // not serializable!\n    /**\n     * Constructs a new {@code DittoRuntimeException} object.\n     *\n     * @param errorCode a code which uniquely identifies the exception.\n     * @param statusCode the HTTP status code.\n     * @param dittoHeaders the headers with which this Exception should be reported back to the user.\n     * @param message the detail message for later retrieval with {@link #getMessage()}.\n     * @param description a description with further information about the exception.\n     * @param cause the cause of the exception for later retrieval with {@link #getCause()}.\n     * @param href a link to a resource which provides further information about the exception.\n     * @throws NullPointerException if {@code errorCode}, {@code statusCode} or {@code dittoHeaders} is {@code null}.\n     */\n    protected DittoRuntimeException(final String errorCode,\n            final HttpStatusCode statusCode,\n            final DittoHeaders dittoHeaders,\n            @Nullable final String message,\n            @Nullable final String description,\n            @Nullable final Throwable cause,\n            @Nullable final URI href) {\n        super(message, cause);\n        this.errorCode = checkNotNull(errorCode, \"error code\");\n        this.statusCode = checkNotNull(statusCode, \"HTTP status\");\n        this.dittoHeaders = checkNotNull(dittoHeaders, \"Ditto headers\");\n        this.description = description;\n        this.href = href;\n    }\n    /**\n     * Each subclass should override this method to provide an implementation of {@code\n     * DittoRuntimeExceptionBuilder}.\n     * <p>\n     * Per default, an instance {@link Builder} is used, which builds a generic {@code DittoRuntimeException}.\n     *\n     * @return A builder to construct a DittoRuntimeException.\n     */\n    protected DittoRuntimeExceptionBuilder<? extends DittoRuntimeException> getEmptyBuilder() {\n        return new Builder(errorCode, statusCode);\n    }\n    /**\n     * Construct a builder {@code b} such that {@code b.build()} has identical class and fields as {@code this}.\n     * <p>\n     * A subclass should extend this method if it adds another field.\n     *\n     * @return A builder to construct an identical copy of {@code this}.\n     */\n    public DittoRuntimeExceptionBuilder<? extends DittoRuntimeException> getBuilder() {\n        return getEmptyBuilder()\n                .dittoHeaders(dittoHeaders)\n                .message(getMessage())\n                .cause(getCause())\n                .description(description)\n                .href(href);\n    }\n    /**\n     * Returns a new mutable builder for fluently creating instances of {@code DittoRuntimeException}s..\n     *\n     * @param errorCode a code which uniquely identifies the exception.\n     * @param statusCode the HTTP status code.\n     * @return the new builder.\n     * @throws NullPointerException if any argument is {@code null}.\n     * @throws IllegalArgumentException if {@code errorCode} is empty.\n     */\n    public static Builder newBuilder(final String errorCode, final HttpStatusCode statusCode) {\n        return new Builder(errorCode, statusCode);\n    }\n    /**\n     * Returns a new mutable builder with a fluent API for a {@code dittoRuntimeException}. The builder is already\n     * initialized with the properties of the given exception.\n     *\n     * @param dittoRuntimeException the exception to be copied.\n     * @return the new builder.\n     * @throws NullPointerException if {@code dittoRuntimeException} is {@code null}.\n     */\n    public static DittoRuntimeExceptionBuilder<? extends DittoRuntimeException> newBuilder(\n            final DittoRuntimeException dittoRuntimeException) {\n        checkNotNull(dittoRuntimeException, \"dittoRuntimeException to be copied\");\n        return dittoRuntimeException.getBuilder()\n                .dittoHeaders(dittoRuntimeException.dittoHeaders)\n                .message(dittoRuntimeException.getMessage())\n                .description(dittoRuntimeException.description)\n                .cause(dittoRuntimeException.getCause())\n                .href(dittoRuntimeException.href);\n    }\n    protected static Optional<URI> readHRef(final JsonObject jsonObject) {\n        checkNotNull(jsonObject, \"JSON object\");\n        return jsonObject.getValue(JsonFields.HREF).map(URI::create);\n    }\n    protected static String readMessage(final JsonObject jsonObject) {\n        checkNotNull(jsonObject, \"JSON object\");\n        return jsonObject.getValueOrThrow(JsonFields.MESSAGE);\n    }\n    protected static Optional<String> readDescription(final JsonObject jsonObject) {\n        checkNotNull(jsonObject, \"JSON object\");\n        return jsonObject.getValue(JsonFields.DESCRIPTION);\n    }\n    /**\n     * Returns the error code to uniquely identify this exception.\n     *\n     * @return the error code.\n     */\n    public String getErrorCode() {\n        return errorCode;\n    }\n    /**\n     * Retrieves the required HttpStatusCode with which this Exception should be reported back to the user.\n     *\n     * @return the HttpStatusCode.\n     */\n    public HttpStatusCode getStatusCode() {\n        return statusCode;\n    }\n    @Override\n    public DittoHeaders getDittoHeaders() {\n        return dittoHeaders;\n    }\n    @Override\n    public DittoRuntimeException setDittoHeaders(final DittoHeaders dittoHeaders) {\n        return newBuilder(this).dittoHeaders(dittoHeaders).build();\n    }\n    @Override\n    public JsonSchemaVersion getImplementedSchemaVersion() {\n        return dittoHeaders.getSchemaVersion().orElse(getLatestSchemaVersion());\n    }\n    /**\n     * Returns the description which should be reported to the user.\n     *\n     * @return the description.\n     */\n    public Optional<String> getDescription() {\n        return Optional.ofNullable(description);\n    }\n    /**\n     * Returns a link with which the user can find further information regarding this exception.\n     *\n     * @return a link to provide the user with further information about this exception.\n     */\n    public Optional<URI> getHref() { return Optional.ofNullable(href); }\n    @Override\n    public String getManifest() {\n        return getErrorCode();\n    }\n    @SuppressWarnings({\"squid:MethodCyclomaticComplexity\", \"squid:S1067\", \"OverlyComplexMethod\"})\n    @Override\n    public boolean equals(@Nullable final Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        final DittoRuntimeException that = (DittoRuntimeException) o;\n        return Objects.equals(errorCode, that.errorCode)\n                && statusCode == that.statusCode\n                && Objects.equals(description, that.description)\n                && Objects.equals(href, that.href);\n    }\n    @Override\n    public int hashCode() {\n        return Objects.hash(errorCode, statusCode, description, href);\n    }\n    /**\n     * Returns all non hidden marked fields of this exception.\n     *\n     * @return a JSON object representation of this exception including only non hidden marked fields.\n     */\n    @Override\n    public JsonObject toJson() {\n        return toJson(FieldType.notHidden());\n    }\n    @Override\n    public JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate) {\n        final Predicate<JsonField> predicate = schemaVersion.and(thePredicate);\n        final Predicate<JsonField> nonNullAndCustomDefined = predicate.and(JsonField.isValueNonNull());\n        final JsonObjectBuilder jsonObjectBuilder = JsonFactory.newObjectBuilder()\n                .set(JsonFields.STATUS, statusCode.toInt(), nonNullAndCustomDefined)\n                .set(JsonFields.ERROR_CODE, errorCode, nonNullAndCustomDefined)\n                .set(JsonFields.MESSAGE, getMessage(), nonNullAndCustomDefined)\n                .set(JsonFields.DESCRIPTION, description, nonNullAndCustomDefined)\n                .set(JsonFields.HREF, href != null ? href.toString() : null, nonNullAndCustomDefined);\n        appendToJson(jsonObjectBuilder, nonNullAndCustomDefined);\n        return jsonObjectBuilder.build();\n    }\n    /**\n     * Allows to append exception-specific fields to the passed {@code jsonObjectBuilder}.\n     *\n     * @param jsonObjectBuilder the JsonObjectBuilder to add the fields to.\n     * @param predicate the predicate to evaluate when adding the payload (already contains the schema version and that\n     * the field is not null).\n     */\n    protected void appendToJson(final JsonObjectBuilder jsonObjectBuilder, final Predicate<JsonField> predicate) {\n        // empty per default\n    }\n    /**\n     * Deserialize an error whose java class isn't known.\n     *\n     * @param jsonObject the error object.\n     * @param headers the headers.\n     * @return a generic {@code DittoRuntimeException} object if the JSON can be parsed as such; an empty optional\n     * otherwise.\n     */\n    public static Optional<DittoRuntimeException> fromUnknownErrorJson(final JsonObject jsonObject,\n            final DittoHeaders headers) {\n        return jsonObject.getValue(JsonFields.ERROR_CODE).flatMap(errorCode ->\n                jsonObject.getValue(JsonFields.STATUS).flatMap(HttpStatusCode::forInt).map(status -> {<fim_middle>// class below has no smell\n"}