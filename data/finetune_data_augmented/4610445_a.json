{"text": "<fim_prefix> *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.flink.runtime.rest.messages.checkpoints;\nimport org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\nimport org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonProperty;\nimport org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonSubTypes;\nimport org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport java.util.Objects;\n/**\n * Checkpoint statistics for a subtask.\n */\n<fim_suffix>@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n@JsonSubTypes({\n\t@JsonSubTypes.Type(value = SubtaskCheckpointStatistics.CompletedSubtaskCheckpointStatistics.class, name = \"completed\"),\n\t@JsonSubTypes.Type(value = SubtaskCheckpointStatistics.PendingSubtaskCheckpointStatistics.class, name = \"pending\")})\npublic class SubtaskCheckpointStatistics {\n\tpublic static final String FIELD_NAME_INDEX = \"index\";\n\tpublic static final String FIELD_NAME_CHECKPOINT_STATUS = \"status\";\n\t@JsonProperty(FIELD_NAME_INDEX)\n\tprivate final int index;\n\t@JsonProperty(FIELD_NAME_CHECKPOINT_STATUS)\n\tprivate final String checkpointStatus;\n\t@JsonCreator\n\tprivate SubtaskCheckpointStatistics(\n\t\t\t@JsonProperty(FIELD_NAME_INDEX) int index,\n\t\t\t@JsonProperty(FIELD_NAME_CHECKPOINT_STATUS) String checkpointStatus) {\n\t\tthis.index = index;\n\t\tthis.checkpointStatus = checkpointStatus;\n\t}\n\tpublic int getIndex() {\n\t\treturn index;\n\t}\n\tpublic String getCheckpointStatus() {\n\t\treturn checkpointStatus;\n\t}\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tSubtaskCheckpointStatistics that = (SubtaskCheckpointStatistics) o;\n\t\treturn index == that.index &&\n\t\t\tObjects.equals(checkpointStatus, that.checkpointStatus);\n\t}\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(index, checkpointStatus);\n\t}\n\t// ---------------------------------------------------------------------------------\n\t// Static inner classes\n\t// ---------------------------------------------------------------------------------\n\t/**\n\t * Checkpoint statistics for a completed subtask checkpoint.\n\t */\n\tpublic static final class CompletedSubtaskCheckpointStatistics extends SubtaskCheckpointStatistics {\n\t\tpublic static final String FIELD_NAME_ACK_TIMESTAMP = \"ack_timestamp\";\n\t\tpublic static final String FIELD_NAME_DURATION = \"end_to_end_duration\";\n\t\tpublic static final String FIELD_NAME_STATE_SIZE = \"state_size\";\n\t\tpublic static final String FIELD_NAME_CHECKPOINT_DURATION = \"checkpoint\";\n\t\tpublic static final String FIELD_NAME_ALIGNMENT = \"alignment\";\n\t\t@JsonProperty(FIELD_NAME_ACK_TIMESTAMP)\n\t\tprivate final long ackTimestamp;\n\t\t@JsonProperty(FIELD_NAME_DURATION)\n\t\tprivate final long duration;\n\t\t@JsonProperty(FIELD_NAME_STATE_SIZE)\n\t\tprivate final long stateSize;\n\t\t@JsonProperty(FIELD_NAME_CHECKPOINT_DURATION)\n\t\tprivate final CheckpointDuration checkpointDuration;\n\t\t@JsonProperty(FIELD_NAME_ALIGNMENT)\n\t\tprivate final CheckpointAlignment alignment;\n\t\t@JsonCreator\n\t\tpublic CompletedSubtaskCheckpointStatistics(\n\t\t\t\t@JsonProperty(FIELD_NAME_INDEX) int index,\n\t\t\t\t@JsonProperty(FIELD_NAME_ACK_TIMESTAMP) long ackTimestamp,\n\t\t\t\t@JsonProperty(FIELD_NAME_DURATION) long duration,\n\t\t\t\t@JsonProperty(FIELD_NAME_STATE_SIZE) long stateSize,\n\t\t\t\t@JsonProperty(FIELD_NAME_CHECKPOINT_DURATION) CheckpointDuration checkpointDuration,\n\t\t\t\t@JsonProperty(FIELD_NAME_ALIGNMENT) CheckpointAlignment alignment) {\n\t\t\tsuper(index, \"completed\");\n\t\t\tthis.ackTimestamp = ackTimestamp;\n\t\t\tthis.duration = duration;\n\t\t\tthis.stateSize = stateSize;\n\t\t\tthis.checkpointDuration = checkpointDuration;\n\t\t\tthis.alignment = alignment;\n\t\t}\n\t\tpublic long getAckTimestamp() {\n\t\t\treturn ackTimestamp;\n\t\t}\n\t\tpublic long getDuration() {\n\t\t\treturn duration;\n\t\t}\n\t\tpublic long getStateSize() {\n\t\t\treturn stateSize;\n\t\t}\n\t\tpublic CheckpointDuration getCheckpointDuration() {\n\t\t\treturn checkpointDuration;\n\t\t}\n\t\tpublic CheckpointAlignment getAlignment() {\n\t\t\treturn alignment;\n\t\t}\n\t\t@Override\n\t\tpublic boolean equals(Object o) {\n\t\t\tif (this == o) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tCompletedSubtaskCheckpointStatistics that = (CompletedSubtaskCheckpointStatistics) o;\n\t\t\treturn ackTimestamp == that.ackTimestamp &&\n\t\t\t\tduration == that.duration &&\n\t\t\t\tstateSize == that.stateSize &&\n\t\t\t\tObjects.equals(checkpointDuration, that.checkpointDuration) &&\n\t\t\t\tObjects.equals(alignment, that.alignment);\n\t\t}\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn Objects.hash(ackTimestamp, duration, stateSize, checkpointDuration, alignment);\n\t\t}\n\t\t/**\n\t\t * Duration of the checkpoint.\n\t\t */\n\t\tpublic static final class CheckpointDuration {\n\t\t\tpublic static final String FIELD_NAME_SYNC_DURATION = \"sync\";\n\t\t\tpublic static final String FIELD_NAME_ASYNC_DURATION = \"async\";\n\t\t\t@JsonProperty(FIELD_NAME_SYNC_DURATION)\n\t\t\tprivate final long syncDuration;\n\t\t\t@JsonProperty(FIELD_NAME_ASYNC_DURATION)\n\t\t\tprivate final long asyncDuration;\n\t\t\t@JsonCreator\n\t\t\tpublic CheckpointDuration(\n\t\t\t\t\t@JsonProperty(FIELD_NAME_SYNC_DURATION) long syncDuration,\n\t\t\t\t\t@JsonProperty(FIELD_NAME_ASYNC_DURATION) long asyncDuration) {\n\t\t\t\tthis.syncDuration = syncDuration;\n\t\t\t\tthis.asyncDuration = asyncDuration;\n\t\t\t}\n\t\t\tpublic long getSyncDuration() {\n\t\t\t\treturn syncDuration;\n\t\t\t}\n\t\t\tpublic long getAsyncDuration() {\n\t\t\t\treturn asyncDuration;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean equals(Object o) {\n\t\t\t\tif (this == o) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tCheckpointDuration that = (CheckpointDuration) o;\n\t\t\t\treturn syncDuration == that.syncDuration &&\n\t\t\t\t\tasyncDuration == that.asyncDuration;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic int hashCode() {\n\t\t\t\treturn Objects.hash(syncDuration, asyncDuration);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Alignment statistics of the checkpoint.\n\t\t */\n\t\tpublic static final class CheckpointAlignment {\n\t\t\tpublic static final String FIELD_NAME_ALIGNMENT_BUFFERED = \"buffered\";\n\t\t\tpublic static final String FIELD_NAME_ALIGNMENT_DURATION = \"duration\";\n\t\t\t@JsonProperty(FIELD_NAME_ALIGNMENT_BUFFERED)\n\t\t\tprivate final long alignmentBuffered;\n\t\t\t@JsonProperty(FIELD_NAME_ALIGNMENT_DURATION)\n\t\t\tprivate final long alignmentDuration;\n\t\t\t@JsonCreator\n\t\t\tpublic CheckpointAlignment(\n\t\t\t\t\t@JsonProperty(FIELD_NAME_ALIGNMENT_BUFFERED) long alignmentBuffered,\n\t\t\t\t\t@JsonProperty(FIELD_NAME_ALIGNMENT_DURATION) long alignmentDuration) {\n\t\t\t\tthis.alignmentBuffered = alignmentBuffered;\n\t\t\t\tthis.alignmentDuration = alignmentDuration;\n\t\t\t}\n\t\t\tpublic long getAlignmentBuffered() {\n\t\t\t\treturn alignmentBuffered;\n\t\t\t}\n\t\t\tpublic long getAlignmentDuration() {\n\t\t\t\treturn alignmentDuration;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean equals(Object o) {\n\t\t\t\tif (this == o) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tCheckpointAlignment that = (CheckpointAlignment) o;\n\t\t\t\treturn alignmentBuffered == that.alignmentBuffered &&\n\t\t\t\t\talignmentDuration == that.alignmentDuration;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic int hashCode() {\n\t\t\t\treturn Objects.hash(alignmentBuffered, alignmentDuration);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Checkpoint statistics for a pending subtask checkpoint.\n\t */\n\tpublic static final class PendingSubtaskCheckpointStatistics extends SubtaskCheckpointStatistics {\n\t\t@JsonCreator\n\t\tpublic PendingSubtaskCheckpointStatistics(@JsonProperty(FIELD_NAME_INDEX) int index) {\n\t\t\tsuper(index, \"pending_or_failed\");\n\t\t}\n\t}\n}<fim_middle>// class below is blob and data class\n"}