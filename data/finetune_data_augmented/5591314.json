{"text": "<fim_prefix>/* ====================================================================\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n==================================================================== */\npackage org.apache.poi.hssf.converter;\n\nimport org.apache.poi.POIDataSamples;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.util.XMLHelper;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.File;\nimport java.io.FilenameFilter;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.Assert.assertNotNull;\n\n@RunWith(Parameterized.class)\npublic class TestExcelConverterSuite\n{\n    /**\n     * YK: a quick hack to exclude failing documents from the suite.\n     */\n    @SuppressWarnings(\"ArraysAsListWithZeroOrOneArgument\")\n    private static List<String> failingFiles = Arrays.asList(\n            /* not failing, but requires more memory */\n            \"ex45698-22488.xls\" );\n\n    @Parameterized.Parameters(name=\"{index}: {0}\")\n    public static Iterable<Object[]> files() {\n        List<Object[]> files = new ArrayList<>();\n        File directory = POIDataSamples.getDocumentInstance().getFile(\n                \"../spreadsheet\" );\n        for ( final File child : directory.listFiles( new FilenameFilter()\n        {\n            @Override\n            public boolean accept( File dir, String name )\n            {\n                return name.endsWith( \".xls\" ) && !failingFiles.contains( name );\n            }\n        } ) )\n        {\n            files.add(new Object[] { child });\n        }\n\n        return files;\n    }\n\n\n    @Parameterized.Parameter\n    public File child;\n\n    @Test\n    public void testFo() throws Exception\n    {\n        HSSFWorkbook workbook;\n        try {\n            workbook = ExcelToHtmlUtils.loadXls( child );\n        } catch ( Exception exc ) {\n            // unable to parse file -- not ExcelToFoConverter fault\n            return;\n        }\n\n        ExcelToHtmlConverter excelToHtmlConverter = new ExcelToHtmlConverter(\n                XMLHelper.getDocumentBuilderFactory().newDocumentBuilder().newDocument() );\n        excelToHtmlConverter.processWorkbook( workbook );\n\n        StringWriter stringWriter = new StringWriter();\n\n        Transformer transformer = TransformerFactory.newInstance()\n                .newTransformer();\n        transformer.setOutputProperty( OutputKeys.ENCODING, \"utf-8\" );\n        transformer.setOutputProperty( OutputKeys.INDENT, \"yes\" );\n        transformer.setOutputProperty( OutputKeys.METHOD, \"xml\" );\n        transformer.transform(\n                new DOMSource( excelToHtmlConverter.getDocument() ),\n                new StreamResult( stringWriter ) );\n\n        assertNotNull(stringWriter.toString());\n    }\n\n<fim_suffix>    @Test\n    public void testHtml() throws Exception\n    {\n        HSSFWorkbook workbook;\n        try {\n            workbook = ExcelToHtmlUtils.loadXls( child );\n        } catch ( Exception exc ) {\n            // unable to parse file -- not ExcelToFoConverter fault\n            return;\n        }\n\n        ExcelToHtmlConverter excelToHtmlConverter = new ExcelToHtmlConverter(\n                XMLHelper.getDocumentBuilderFactory().newDocumentBuilder().newDocument() );\n        excelToHtmlConverter.processWorkbook( workbook );\n\n        StringWriter stringWriter = new StringWriter();\n\n        Transformer transformer = TransformerFactory.newInstance()\n                .newTransformer();\n        transformer.setOutputProperty( OutputKeys.ENCODING, \"utf-8\" );\n        transformer.setOutputProperty( OutputKeys.INDENT, \"no\" );\n        transformer.setOutputProperty( OutputKeys.METHOD, \"html\" );\n        transformer.transform(\n                new DOMSource( excelToHtmlConverter.getDocument() ),\n                new StreamResult( stringWriter ) );\n\n        assertNotNull(stringWriter.toString());\n    }\n}<fim_middle>// function below has no smell\n"}