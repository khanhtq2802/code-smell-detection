{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2017 TypeFox GmbH (http://www.typefox.io) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *******************************************************************************/\npackage org.eclipse.xtext.ide.serializer.impl;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.eclipse.emf.common.util.TreeIterator;\nimport org.eclipse.emf.common.util.URI;\nimport org.eclipse.emf.ecore.EClass;\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.emf.ecore.resource.Resource;\nimport org.eclipse.emf.ecore.util.EcoreUtil;\nimport org.eclipse.xtext.EcoreUtil2;\nimport org.eclipse.xtext.ide.serializer.hooks.IEObjectDescriptionProvider;\nimport org.eclipse.xtext.naming.IQualifiedNameProvider;\nimport org.eclipse.xtext.naming.QualifiedName;\nimport org.eclipse.xtext.resource.EObjectDescription;\nimport org.eclipse.xtext.resource.IEObjectDescription;\nimport org.eclipse.xtext.resource.IResourceDescription;\n\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Preconditions;\nimport com.google.common.collect.HashMultimap;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Multimap;\nimport com.google.inject.Inject;\n\n/**\n * @author Moritz Eysholdt - Initial contribution and API\n */\npublic class EObjectDescriptionProvider implements IEObjectDescriptionProvider {\n\n<fim_suffix>\tprotected static class SimpleNameDescription implements IEObjectDescription {\n\n\t\tprivate final EObject object;\n\t\tprivate final QualifiedName qualifiedName;\n\t\tprivate final QualifiedName simpleName;\n\t\tprivate final Map<String, String> userData;\n\n\t\tpublic SimpleNameDescription(QualifiedName qName, EObject resolvedObject, IEObjectDescription source) {\n\t\t\tthis.simpleName = qName;\n\t\t\tthis.object = resolvedObject;\n\t\t\tthis.qualifiedName = source.getQualifiedName();\n\t\t\tPreconditions.checkArgument(!this.object.eIsProxy());\n\t\t\tPreconditions.checkNotNull(this.simpleName);\n\t\t\tPreconditions.checkNotNull(this.qualifiedName);\n\t\t\tMap<String, String> userData = null;\n\t\t\tfor (final String key : source.getUserDataKeys()) {\n\t\t\t\tif (userData == null) {\n\t\t\t\t\tuserData = Maps.newHashMapWithExpectedSize(2);\n\t\t\t\t}\n\t\t\t\tuserData.put(key, source.getUserData(key));\n\t\t\t}\n\t\t\tthis.userData = userData;\n\t\t}\n\n\t\t@Override\n\t\tpublic EClass getEClass() {\n\t\t\treturn object.eClass();\n\t\t}\n\n\t\t@Override\n\t\tpublic EObject getEObjectOrProxy() {\n\t\t\treturn object;\n\t\t}\n\n\t\t@Override\n\t\tpublic URI getEObjectURI() {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic QualifiedName getName() {\n\t\t\treturn simpleName;\n\t\t}\n\n\t\t@Override\n\t\tpublic QualifiedName getQualifiedName() {\n\t\t\treturn qualifiedName;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getUserData(String key) {\n\t\t\tif (userData == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn userData.get(key);\n\t\t}\n\n\t\t@Override\n\t\tpublic String[] getUserDataKeys() {\n\t\t\tif (userData == null) {\n\t\t\t\treturn new String[0];\n\t\t\t}\n\t\t\treturn userData.keySet().toArray(new String[userData.size()]);\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tStringBuilder result = new StringBuilder();\n\t\t\tresult.append(IEObjectDescription.class.getSimpleName() + \" \" + qualifiedName);\n\t\t\tif (simpleName != null && !simpleName.equals(qualifiedName)) {\n\t\t\t\tresult.append(\" name:\" + simpleName);\n\t\t\t}\n\t\t\tif (userData != null && !userData.isEmpty()) {\n\t\t\t\tList<String> items = Lists.newArrayList();\n\t\t\t\tfor (Entry<String, String> e : userData.entrySet()) {\n\t\t\t\t\titems.add(e.getKey() + \": \" + e.getValue());\n\t\t\t\t}\n\t\t\t\tresult.append(\" userData=[\" + Joiner.on(\", \").join(items) + \"]\");\n\t\t\t}\n\t\t\treturn result.toString();\n\t\t}\n\n\t}\n\n\t@Inject\n\tprivate IQualifiedNameProvider qualifiedNameProvider;\n\n\t@Inject\n\tprivate IResourceDescription.Manager resourceDescriptionManager;\n\n\tprotected QualifiedName computeSimpleName(Multimap<EObject, IEObjectDescription> descs, IEObjectDescription desc) {\n\t\tQualifiedName name = desc.getQualifiedName();\n\t\tint segmentCount = name.getSegmentCount();\n\t\tif (segmentCount < 2) {\n\t\t\treturn name;\n\t\t}\n\t\tEObject container = desc.getEObjectOrProxy().eContainer();\n\t\twhile (container != null) {\n\t\t\tCollection<IEObjectDescription> candidates = descs.get(container);\n\t\t\tfor (IEObjectDescription cand : candidates) {\n\t\t\t\tQualifiedName candName = cand.getQualifiedName();\n\t\t\t\tint candCount = candName.getSegmentCount();\n\t\t\t\tif (candCount < segmentCount && name.startsWith(candName)) {\n\t\t\t\t\treturn name.skipFirst(candCount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontainer = container.eContainer();\n\t\t}\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic Iterable<IEObjectDescription> getEObjectDescriptions(Resource resource) {\n\t\tMultimap<EObject, IEObjectDescription> map = HashMultimap.create();\n\t\tIResourceDescription description = resourceDescriptionManager.getResourceDescription(resource);\n\t\tfor (IEObjectDescription desc : description.getExportedObjects()) {\n\t\t\tEObject object = EcoreUtil.resolve(desc.getEObjectOrProxy(), resource);\n\t\t\tmap.put(object, desc);\n\t\t}\n\t\tif (!resource.getContents().isEmpty()) {\n\t\t\tTreeIterator<EObject> it = EcoreUtil2.eAll(resource.getContents().get(0));\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tEObject next = it.next();\n\t\t\t\tif (map.containsKey(next)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tQualifiedName name = qualifiedNameProvider.getFullyQualifiedName(next);\n\t\t\t\tif (name != null) {\n\t\t\t\t\tIEObjectDescription desc = EObjectDescription.create(name, next);\n\t\t\t\t\tmap.put(next, desc);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tList<IEObjectDescription> result = Lists.newArrayList();\n\t\tfor (Map.Entry<EObject, IEObjectDescription> entry : map.entries()) {\n\t\t\tQualifiedName name = computeSimpleName(map, entry.getValue());\n\t\t\tSimpleNameDescription copy = new SimpleNameDescription(name, entry.getKey(), entry.getValue());\n\t\t\tresult.add(copy);\n\t\t}\n\t\treturn result;\n\t}\n\n}<fim_middle>// class below has no smell\n"}