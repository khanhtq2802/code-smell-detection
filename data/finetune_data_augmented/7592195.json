{"text": "<fim_prefix>package org.springframework.roo.felix;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport org.apache.felix.scr.annotations.Component;\nimport org.apache.felix.scr.annotations.Reference;\nimport org.apache.felix.scr.annotations.Service;\nimport org.apache.felix.service.command.CommandProcessor;\nimport org.apache.felix.service.command.CommandSession;\nimport org.apache.felix.service.command.Converter;\nimport org.osgi.framework.BundleContext;\nimport org.osgi.service.component.ComponentContext;\nimport org.springframework.roo.shell.CliCommand;\nimport org.springframework.roo.shell.CliOption;\nimport org.springframework.roo.shell.CommandMarker;\nimport org.springframework.roo.shell.ExitShellRequest;\nimport org.springframework.roo.shell.Shell;\nimport org.springframework.roo.shell.event.ShellStatus;\nimport org.springframework.roo.shell.event.ShellStatus.Status;\nimport org.springframework.roo.shell.event.ShellStatusListener;\nimport org.springframework.roo.support.logging.HandlerUtils;\nimport org.springframework.roo.support.logging.LoggingOutputStream;\n\n/**\n * Delegates to commands provided via Felix's Shell API.\n * <p>\n * Also monitors the Roo Shell to determine when it wishes to shutdown. This\n * shutdown request is then passed through to Felix for processing.\n *\n * @author Ben Alex\n * @author Juan Carlos Garc\u00eda\n */\n@Component\n@Service\npublic class FelixDelegator implements CommandMarker, ShellStatusListener {\n\n  private BundleContext context;\n\n  @Reference\n  private Shell rooShell;\n  @Reference\n  private CommandProcessor commandProcessor;\n\n  protected static final Logger LOGGER = HandlerUtils.getLogger(LoggingOutputStream.class);\n\n  protected void activate(final ComponentContext cContext) {\n    context = cContext.getBundleContext();\n    rooShell.addShellStatusListener(this);\n  }\n\n  protected void deactivate(final ComponentContext context) {\n    this.context = null;\n    rooShell.removeShellStatusListener(this);\n  }\n\n<fim_suffix>  @CliCommand(value = \"!g\",\n      help = \"Passes a command directly through to the Felix shell infrastructure.\")\n  public void shell(\n      @CliOption(\n          key = \"\",\n          mandatory = false,\n          specifiedDefaultValue = \"help\",\n          unspecifiedDefaultValue = \"help\",\n          help = \"The command to pass to Felix (WARNING: no validation or security checks are performed).\"\n              + \"Default: `help`.\") final String commandLine) throws Exception {\n\n    perform(commandLine);\n  }\n\n  @CliCommand(value = {\"exit\", \"quit\"}, help = \"Waits until all metadata and files are refreshed \"\n      + \"and updated, then exits the shell. You can also use `exit` command.\")\n  public ExitShellRequest quit() {\n    return ExitShellRequest.NORMAL_EXIT;\n  }\n\n  public void onShellStatusChange(final ShellStatus oldStatus, final ShellStatus newStatus) {\n    if (newStatus.getStatus().equals(Status.SHUTTING_DOWN)) {\n      try {\n        if (rooShell != null) {\n          if (rooShell.getExitShellRequest() != null) {\n            // ROO-836\n            System.setProperty(\"roo.exit\",\n                Integer.toString(rooShell.getExitShellRequest().getExitCode()));\n          }\n          System.setProperty(\"developmentMode\", Boolean.toString(rooShell.isDevelopmentMode()));\n        }\n        perform(\"shutdown\");\n      } catch (final Exception e) {\n        throw new IllegalStateException(e);\n      }\n    }\n  }\n\n  private void perform(final String commandLine) throws Exception {\n    if (\"shutdown\".equals(commandLine)) {\n      context.getBundle(0).stop();\n      return;\n    }\n\n    ByteArrayOutputStream sysOut = new ByteArrayOutputStream();\n    ByteArrayOutputStream sysErr = new ByteArrayOutputStream();\n\n    final PrintStream printStreamOut = new PrintStream(sysOut);\n    final PrintStream printErrOut = new PrintStream(sysErr);\n    try {\n      final CommandSession commandSession =\n          commandProcessor.createSession(System.in, printStreamOut, printErrOut);\n      Object result = commandSession.execute(commandLine);\n\n      if (result != null) {\n        printStreamOut.println(commandSession.format(result, Converter.INSPECT));\n      }\n\n      if (sysOut.size() > 0) {\n        LOGGER.log(Level.INFO, new String(sysOut.toByteArray()));\n      }\n\n      if (sysErr.size() > 0) {\n        LOGGER.log(Level.SEVERE, new String(sysErr.toByteArray()));\n      }\n    } catch (Throwable ex) {\n      LOGGER.log(Level.SEVERE, ex.getMessage(), ex);\n    } finally {\n      printStreamOut.close();\n      printErrOut.close();\n    }\n  }\n}<fim_middle>// function below has no smell\n"}