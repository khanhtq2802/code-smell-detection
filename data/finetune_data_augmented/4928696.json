{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.apache.jmeter.util;\n\nimport java.util.List;\n\nimport org.apache.commons.lang3.tuple.ImmutablePair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport net.sf.saxon.s9api.Processor;\nimport net.sf.saxon.s9api.XPathCompiler;\nimport net.sf.saxon.s9api.XPathExecutable;\n\nimport com.github.benmanes.caffeine.cache.CacheLoader;\n\n/**\n * load method is called when the key composed of\n * namespaces + xPathQuery is not in the cache.\n * Return the compiled XPathQuery with the associated\n * namespaces.\n */\n<fim_suffix>public class XPathQueryCacheLoader implements CacheLoader<ImmutablePair<String, String>, XPathExecutable> {\n    \n    private static final Logger log = LoggerFactory.getLogger(XPathQueryCacheLoader.class);\n\n    @Override\n    public XPathExecutable load(ImmutablePair<String, String> key) \n            throws Exception {\n        String xPathQuery = key.left;\n        String namespacesString = key.right;\n\n        Processor processor = XPathUtil.getProcessor();\n        XPathCompiler xPathCompiler = processor.newXPathCompiler();\n\n        List<String[]> namespacesList = XPathUtil.namespacesParse(namespacesString);\n        log.debug(\"Parsed namespaces:{} into list of namespaces:{}\", namespacesString, namespacesList);\n        for (String[] namespaces : namespacesList) {\n            xPathCompiler.declareNamespace(namespaces[0], namespaces[1]);\n        }\n        log.debug(\"Declared namespaces:{}, now compiling xPathQuery:{}\", namespacesList, xPathQuery);\n        return xPathCompiler.compile(xPathQuery);\n    }\n}<fim_middle>// class below has no smell\n"}