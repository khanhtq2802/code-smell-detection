{"text": "<fim_prefix>\t}\n\tprivate void updateEditorPane(DefaultMutableTreeNode selection) {\n\t\ttextArea.setEditable(false);\n\t\ttextAreaDocumentListener.setSelection(null);\n\t\tif (selection == null) {\n\t\t\ttextArea.setText(\"No selection\");\n\t\t\tif (exposedDatanature) {\n//\t\t\t\tdatatypeSpinner.setEnabled(false);\n//\t\t\t\tdatatypeSpinner.setValue(ReferencedDataNature.UNKNOWN);\n//\t\t\t\tcharsetSpinner.setEnabled(false);\n//\t\t\t\tsetCharsetSpinner(null);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (!selection.isLeaf()) {\n\t\t\ttextArea.setText(\"List selected\");\n\t\t\tif (exposedDatanature) {\n//\t\t\t\tdatatypeSpinner.setEnabled(false);\n//\t\t\t\tdatatypeSpinner.setValue(ReferencedDataNature.UNKNOWN);\n//\t\t\t\tcharsetSpinner.setEnabled(false);\n//\t\t\t\tsetCharsetSpinner(null);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tObject selectedUserObject = selection.getUserObject();\n\t\tif (selectedUserObject == null) {\n\t\t\ttextArea.setText(\"List selected\");\n\t\t\tif (exposedDatanature) {\n//\t\t\t\tdatatypeSpinner.setEnabled(false);\n//\t\t\t\tdatatypeSpinner.setValue(ReferencedDataNature.UNKNOWN);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (selectedUserObject instanceof String) {\n\t\t\ttextArea.setText((String) selection.getUserObject());\n\t\t\ttextAreaDocumentListener.setSelection(selection);\n\t\t\ttextArea.setEditable(true);\n\t\t\ttextArea.requestFocusInWindow();\n\t\t\ttextArea.selectAll();\n\t\t\tif (exposedDatanature) {\n//\t\t\t\tdatatypeSpinner.setEnabled(false);\n//\t\t\t\tdatatypeSpinner.setValue(ReferencedDataNature.TEXT);\n//\t\t\t\tcharsetSpinner.setEnabled(false);\n//\t\t\t\tsetCharsetSpinner(UTF8.name());\n\t\t\t}\n\t\t} else if (selectedUserObject instanceof File) {\n\t\t\tFile ref = (File) selectedUserObject;\n\t\t\ttextArea.setText(\"File : \" + ref);\n\t\t\tif (exposedDatanature) {\n//\t\t\t\tdatatypeSpinner.setEnabled(true);\n//\t\t\t\tdatatypeSpinner.setValue(ref.getDataNature());\n//\t\t\t\tsetCharsetSpinner(ref.getCharset());\n//\t\t\t\tif (ref.getDataNature().equals(ReferencedDataNature.TEXT)) {\n//\t\t\t\t\tcharsetSpinner.setEnabled(true);\n//\t\t\t\t} else {\n//\t\t\t\t\tcharsetSpinner.setEnabled(false);\n//\t\t\t\t}\n\t\t\t}\n\t\t} else if (selectedUserObject instanceof URL) {\n\t\t\tURL ref = (URL) selectedUserObject;\n\t\t\ttextArea.setText(\"URL : \" + ref);\n\t\t\tif (exposedDatanature) {\n//\t\t\t\tdatatypeSpinner.setEnabled(false);\n//\t\t\t\tdatatypeSpinner.setValue(ref.getDataNature());\n//\t\t\t\tcharsetSpinner.setEnabled(false);\n//\t\t\t\tsetCharsetSpinner(ref.getCharset());\n\t\t\t}\n\t\t} else\n\t\t\ttextArea.setText(selection.getUserObject().toString());\n\t}\n\tprivate final class UpdateEditorPaneOnSelection implements\n\t\t\tTreeSelectionListener {\n\t\tTreePath oldSelectionPath = null;\n\t\tpublic void setSelectionPath(TreePath selectionPath) {\n\t\t\tif (oldSelectionPath != null) {\n\t\t\t\tDefaultMutableTreeNode lastPathComponent = (DefaultMutableTreeNode) oldSelectionPath\n\t\t\t\t\t\t.getLastPathComponent();\n\t\t\t\tif (lastPathComponent != null && textArea.isEditable())\n\t\t\t\t\tlastPathComponent.setUserObject(textArea.getText());\n\t\t\t}\n\t\t\toldSelectionPath = selectionPath;\n\t\t\tDefaultMutableTreeNode selection = null;\n\t\t\tif (selectionPath != null)\n\t\t\t\tselection = (DefaultMutableTreeNode) selectionPath\n\t\t\t\t\t\t.getLastPathComponent();\n\t\t\tupdateEditorPane(selection);\n\t\t}\n\t\t@Override\n\t\tpublic void valueChanged(TreeSelectionEvent e) {\n\t\t\tsetSelectionPath(e.getNewLeadSelectionPath());\n\t\t}\n\t}\n\tpublic class NewListAction extends AbstractAction {\n\t\tprivate final int depth;\n\t\tprivate NewListAction(int depth) {\n\t\t\tsuper(\"New list (depth \" + depth + \")\", addListIcon);\n\t\t\tthis.depth = depth;\n\t\t}\n\t\t@Override\n\t\tpublic void actionPerformed(ActionEvent ae) {\n\t\t\tDefaultMutableTreeNode parent = (DefaultMutableTreeNode) treeModel\n\t\t\t\t\t.getRoot();\n\t\t\tDefaultMutableTreeNode selection = getSelectedNode();\n\t\t\tif (selection != null)\n\t\t\t\tparent = selection;\n\t\t\t@SuppressWarnings(\"unused\")\n\t\t\tDefaultMutableTreeNode added = addPojo(parent,\n\t\t\t\t\tnew ArrayList<Object>(), depth);\n\t\t\tsetStatus(\"Added new collection with depth \" + depth, null);\n\t\t}\n\t}\n\tpublic class UpdateActionsOnTreeSelection implements\n\t\t\tTreeSelectionListener {\n\t\t@Override\n\t\tpublic void valueChanged(TreeSelectionEvent e) {\n\t\t\tDefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree\n\t\t\t\t\t.getLastSelectedPathComponent();\n\t\t\tif (selectedNode == null)\n\t\t\t\t// Selection cleared\n\t\t\t\tdeleteNodeAction.setEnabled(false);\n\t\t\telse\n\t\t\t\tdeleteNodeAction.setEnabled(selectedNode != treeModel.getRoot());\n\t\t}\n\t}\n\tpublic class AddFileAction extends AbstractAction {\n\t\tpublic AddFileAction() {\n\t\t\tsuper((depth == 0 ? \"Set\" : \"Add\") + \" file location...\",\n\t\t\t\t\taddFileIcon);\n\t\t}\n\t\t@Override\n\t\t@SuppressWarnings(\"unused\")\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tJFileChooser fileChooser = new JFileChooser();\n\t\t\tPreferences prefs = Preferences.userNodeForPackage(getClass());\n\t\t\tString currentDir = prefs.get(\"currentDir\", System\n\t\t\t\t\t.getProperty(\"user.home\"));\n\t\t\tfileChooser.setDialogTitle(\"Choose files or directory\");\n\t\t\tfileChooser.setCurrentDirectory(new File(currentDir));\n\t\t\tfileChooser.setMultiSelectionEnabled(true);\n\t\t\tfileChooser.setFileSelectionMode(FILES_AND_DIRECTORIES);\n\t\t\tif (fileChooser.showOpenDialog(RegistrationPanel.this) != APPROVE_OPTION)\n\t\t\t\treturn;\n\t\t\tprefs.put(\"currentDir\", fileChooser.getCurrentDirectory()\n\t\t\t\t\t.toString());\n\t\t\tDefaultMutableTreeNode node = getSelectedNode();\n\t\t\tfor (File file : fileChooser.getSelectedFiles()) {\n\t\t\t\tif (!file.isDirectory()) {\n\t\t\t\t\tDefaultMutableTreeNode added = addPojo(node, file, 0);\n\t\t\t\t\tsetStatus(\"Added file : \" + file.getPath(), null);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (treeModel.getDepth() < 1) {\n\t\t\t\t\t// TODO add popup warning\n\t\t\t\t\tsetStatus(\"Can't add directory to single item input\", null);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t/*\n\t\t\t\t * Try to handle directories as flat lists, don't nest any\n\t\t\t\t * deeper for now.\n\t\t\t\t */\n\t\t\t\tList<File> children = new ArrayList<>();\n\t\t\t\tfor (File child : file.listFiles())\n\t\t\t\t\tif (child.isFile())\n\t\t\t\t\t\tchildren.add(child);\n\t\t\t\tDefaultMutableTreeNode added = addPojo(node, children, 1);\n\t\t\t\tsetStatus(\"Added directory : \" + file.getPath(), null);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Add a new default text string, adding to the root node (which will\n\t * cascade down until it hits the correct level through logic in the model)\n\t */\n\tpublic class AddTextAction extends AbstractAction {\n\t\tpublic AddTextAction() {\n\t\t\tsuper((depth == 0 ? \"Set\" : \"Add\") + \" value\", addTextIcon);\n\t\t}\n<fim_suffix>\t\t@Override\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tDefaultMutableTreeNode node = getSelectedNode();\n\t\t\tString newValue;\n\t\t\tif (example != null && example.length() > 0)\n\t\t\t\tnewValue = example;\n\t\t\telse\n\t\t\t\tnewValue = NEW_VALUE;\n\t\t\t@SuppressWarnings(\"unused\")\n\t\t\tDefaultMutableTreeNode added = addPojo(node, newValue, 0);\n\t\t\tsetStatus(\"Added new value.  Edit value on right.\", null);\n\t\t}<fim_middle>// function below has no smell\n"}