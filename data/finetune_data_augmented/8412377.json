{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.dataformat.xstream;\n\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamReader;\nimport javax.xml.stream.XMLStreamWriter;\n\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.io.HierarchicalStreamReader;\nimport com.thoughtworks.xstream.io.HierarchicalStreamWriter;\nimport com.thoughtworks.xstream.io.xml.QNameMap;\nimport com.thoughtworks.xstream.io.xml.StaxReader;\nimport com.thoughtworks.xstream.io.xml.StaxWriter;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.spi.ClassResolver;\nimport org.apache.camel.spi.DataFormat;\nimport org.apache.camel.spi.annotations.Dataformat;\nimport org.apache.camel.util.IOHelper;\n\n/**\n * A <a href=\"http://camel.apache.org/data-format.html\">data format</a>\n * ({@link DataFormat}) using XStream to marshal to and from XML\n */\n<fim_suffix>@Dataformat(\"xstream\")\npublic class XStreamDataFormat extends AbstractXStreamWrapper  {\n    private String encoding;\n    \n    public XStreamDataFormat() {\n    }\n\n    public XStreamDataFormat(XStream xstream) {\n        super(xstream);\n    }\n\n    @Override\n    public String getDataFormatName() {\n        return \"xstream\";\n    }\n\n    public void setEncoding(String encoding) {\n        this.encoding = encoding;\n    }\n    \n    public String getEncoding() {\n        return encoding;\n    }\n\n    @Override\n    public void marshal(Exchange exchange, Object body, OutputStream stream) throws Exception {\n        super.marshal(exchange, body, stream);\n\n        if (isContentTypeHeader()) {\n            if (exchange.hasOut()) {\n                exchange.getOut().setHeader(Exchange.CONTENT_TYPE, \"application/xml\");\n            } else {\n                exchange.getIn().setHeader(Exchange.CONTENT_TYPE, \"application/xml\");\n            }\n        }\n    }\n\n    /**\n     * A factory method which takes a collection of types to be annotated\n     */\n    @Deprecated\n    public static XStreamDataFormat processAnnotations(ClassResolver resolver, Iterable<Class<?>> types) {\n        XStreamDataFormat answer = new XStreamDataFormat();\n        XStream xstream = answer.getXStream(resolver);\n        for (Class<?> type : types) {\n            xstream.processAnnotations(type);\n        }\n        return answer;\n    }\n\n    /**\n     * A factory method which takes a number of types to be annotated\n     */\n    @Deprecated\n    public static XStreamDataFormat processAnnotations(ClassResolver resolver, Class<?>... types) {\n        XStreamDataFormat answer = new XStreamDataFormat();\n        XStream xstream = answer.getXStream(resolver);\n        for (Class<?> type : types) {\n            xstream.processAnnotations(type);\n        }\n        return answer;\n    }\n    \n    // just make sure the exchange property can override the xmlstream encoding setting\n    protected void updateCharactorEncodingInfo(Exchange exchange) {\n        if (exchange.getProperty(Exchange.CHARSET_NAME) == null && encoding != null) {\n            exchange.setProperty(Exchange.CHARSET_NAME, IOHelper.normalizeCharset(encoding));\n        }\n    }\n\n    protected HierarchicalStreamWriter createHierarchicalStreamWriter(Exchange exchange, Object body, OutputStream stream) throws XMLStreamException {\n        updateCharactorEncodingInfo(exchange);\n        if (getXstreamDriver() != null) {\n            return getXstreamDriver().createWriter(stream);\n        }\n        XMLStreamWriter xmlWriter = getStaxConverter().createXMLStreamWriter(stream, exchange);\n        return new StaxWriter(new QNameMap(), xmlWriter);\n    }\n\n    protected HierarchicalStreamReader createHierarchicalStreamReader(Exchange exchange, InputStream stream) throws XMLStreamException {\n        updateCharactorEncodingInfo(exchange);\n        if (getXstreamDriver() != null) {\n            return getXstreamDriver().createReader(stream);\n        }\n        XMLStreamReader xmlReader = getStaxConverter().createXMLStreamReader(stream, exchange);\n        return new StaxReader(new QNameMap(), xmlReader);\n    }\n}<fim_middle>// class below has no smell\n"}