{"text": "<fim_prefix>/*\n * Copyright 2014-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.integration.dsl.mail;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Properties;\nimport javax.mail.Authenticator;\nimport javax.mail.Message;\nimport javax.mail.Part;\nimport javax.mail.Session;\nimport javax.mail.internet.MimeMessage;\nimport org.springframework.expression.Expression;\nimport org.springframework.integration.dsl.core.ComponentsRegistration;\nimport org.springframework.integration.dsl.core.MessageSourceSpec;\nimport org.springframework.integration.dsl.support.Consumer;\nimport org.springframework.integration.dsl.support.Function;\nimport org.springframework.integration.dsl.support.FunctionExpression;\nimport org.springframework.integration.dsl.support.PropertiesBuilder;\nimport org.springframework.integration.mail.AbstractMailReceiver;\nimport org.springframework.integration.mail.MailReceivingMessageSource;\nimport org.springframework.integration.mapping.HeaderMapper;\nimport org.springframework.util.Assert;\n/**\n * A {@link MessageSourceSpec} for a {@link MailReceivingMessageSource}.\n *\n *\n * @param <S> the target {@link MailInboundChannelAdapterSpec} implementation type.\n * @param <R> the target {@link AbstractMailReceiver} implementation type.\n *\n * @author Gary Russell\n * @author Artem Bilan\n */\npublic abstract class\n\t\tMailInboundChannelAdapterSpec<S extends MailInboundChannelAdapterSpec<S, R>, R extends AbstractMailReceiver>\n\t\textends MessageSourceSpec<S, MailReceivingMessageSource>\n\t\timplements ComponentsRegistration {\n\tprotected final R receiver;\n\tprotected final boolean externalReceiver;\n\tprivate boolean sessionProvided;\n\tprotected MailInboundChannelAdapterSpec(R receiver) {\n\t\tthis(receiver, false);\n\t}\n\tprotected MailInboundChannelAdapterSpec(R receiver, boolean externalReceiver) {\n\t\tthis.receiver = receiver;\n\t\tthis.externalReceiver = externalReceiver;\n\t}\n\t/**\n\t * Configure a SpEL expression to select messages. The root object for the expression\n\t * evaluation is a {@link javax.mail.internet.MimeMessage} which should return a boolean\n\t * result (true means select the message).\n\t * @param selectorExpression the selectorExpression.\n\t * @return the spec.\n\t */\n\tpublic S selectorExpression(String selectorExpression) {\n\t\tassertReceiver();\n\t\tthis.receiver.setSelectorExpression(PARSER.parseExpression(selectorExpression));\n\t\treturn _this();\n\t}\n\tprotected void assertReceiver() {\n\t\tAssert.state(!this.externalReceiver, \"An external 'receiver' [\" + this.receiver + \"] can't be modified.\");\n\t}\n\t/**\n\t * Configure a SpEL expression to select messages. The root object for the expression\n\t * evaluation is a {@link javax.mail.internet.MimeMessage} which should return a boolean\n\t * result (true means select the message).\n\t * @param selectorExpression the selectorExpression.\n\t * @return the spec.\n\t * @since 1.2\n\t */\n\tpublic S selectorExpression(Expression selectorExpression) {\n\t\tassertReceiver();\n\t\tthis.receiver.setSelectorExpression(selectorExpression);\n\t\treturn _this();\n\t}\n\t/**\n\t * Configure a {@link Function} to select messages. The argument for the function\n\t * is a {@link javax.mail.internet.MimeMessage}; {@code apply} returns a boolean\n\t * result (true means select the message).\n\t * @param selectorFunction the selectorFunction.\n\t * @return the spec.\n\t * @see FunctionExpression\n\t */\n\tpublic S selector(Function<MimeMessage, Boolean> selectorFunction) {\n\t\tassertReceiver();\n\t\tthis.receiver.setSelectorExpression(new FunctionExpression<MimeMessage>(selectorFunction));\n\t\treturn _this();\n\t}\n\t/**\n\t * Provide the Java Mail {@link Session} to use.\n\t * @param session the session.\n\t * @return the spec.\n\t * @see AbstractMailReceiver#setSession(Session)\n\t */\n\tpublic S session(Session session) {\n\t\tassertReceiver();\n\t\tthis.receiver.setSession(session);\n\t\tthis.sessionProvided = true;\n\t\treturn _this();\n\t}\n\t/**\n\t * The Java Mail properties.\n\t * @param javaMailProperties the javaMailProperties.\n\t * @return the spec.\n\t * @see AbstractMailReceiver#setJavaMailProperties(Properties)\n\t */\n\tpublic S javaMailProperties(Properties javaMailProperties) {\n\t\tassertReceiver();\n\t\tassertSession();\n\t\tthis.receiver.setJavaMailProperties(javaMailProperties);\n\t\treturn _this();\n\t}\n\tprivate void assertSession() {\n\t\tAssert.state(!this.sessionProvided, \"Neither 'javaMailProperties' nor 'javaMailAuthenticator' \"\n\t\t\t\t+ \"references are allowed when a 'session' reference has been provided.\");\n\t}\n\t/**\n\t * Configure the {@code javaMailProperties} by invoking a {@link Consumer} callback which\n\t * is invoked with a {@link PropertiesBuilder}.\n\t * @param configurer the configurer.\n\t * @return the spec.\n\t * @see AbstractMailReceiver#setJavaMailProperties(Properties)\n\t */\n\tpublic S javaMailProperties(Consumer<PropertiesBuilder> configurer) {\n\t\tPropertiesBuilder properties = new PropertiesBuilder();\n\t\tconfigurer.accept(properties);\n\t\treturn javaMailProperties(properties.get());\n\t}\n\t/**\n\t * The Java Mail {@link Authenticator}.\n\t * @param javaMailAuthenticator the javaMailAuthenticator.\n\t * @return the spec.\n\t * @see AbstractMailReceiver#setJavaMailAuthenticator(Authenticator)\n\t */\n\tpublic S javaMailAuthenticator(Authenticator javaMailAuthenticator) {\n\t\tassertSession();\n\t\tassertReceiver();\n\t\tthis.receiver.setJavaMailAuthenticator(javaMailAuthenticator);\n\t\treturn _this();\n\t}\n\t/**\n\t * The maximum for fetch size.\n\t * @param maxFetchSize the maxFetchSize.\n\t * @return the spec.\n\t * @see AbstractMailReceiver#setMaxFetchSize(int)\n\t */\n\tpublic S maxFetchSize(int maxFetchSize) {\n\t\tassertReceiver();\n\t\tthis.receiver.setMaxFetchSize(maxFetchSize);\n\t\treturn _this();\n\t}\n\t/**\n\t * A flag to specify if messages should be deleted after receive.\n\t * @param shouldDeleteMessages the shouldDeleteMessages.\n\t * @return the spec.\n\t * @see AbstractMailReceiver#setShouldDeleteMessages(boolean)\n\t */\n\tpublic S shouldDeleteMessages(boolean shouldDeleteMessages) {\n\t\tassertReceiver();\n\t\tthis.receiver.setShouldDeleteMessages(shouldDeleteMessages);\n\t\treturn _this();\n\t}\n\t/**\n\t * Set the name of the flag to use to flag messages when the server does\n\t * not support \\Recent but supports user flags;\n\t * default {@value AbstractMailReceiver#DEFAULT_SI_USER_FLAG}.\n\t * @param userFlag the flag.\n\t * @return the spec.\n\t * @since 1.2\n\t * @see AbstractMailReceiver#setUserFlag(String)\n\t */\n<fim_suffix>\tpublic S userFlag(String userFlag) {\n\t\tassertReceiver();\n\t\tthis.receiver.setUserFlag(userFlag);\n\t\treturn _this();\n\t}\n\t/**\n\t * Set the header mapper; if a header mapper is not provided, the message payload is\n\t * a {@link MimeMessage}, when provided, the headers are mapped and the payload is\n\t * the {@link MimeMessage} content.\n\t * @param headerMapper the header mapper.\n\t * @return the spec.\n\t * @since 1.2\n\t * @see AbstractMailReceiver#setUserFlag(String)\n\t * @see #embeddedPartsAsBytes(boolean)\n\t */\n\tpublic S headerMapper(HeaderMapper<MimeMessage> headerMapper) {\n\t\tassertReceiver();\n\t\tthis.receiver.setHeaderMapper(headerMapper);\n\t\treturn _this();\n\t}\n\t/**\n\t * When a header mapper is provided determine whether an embedded {@link Part} (e.g\n\t * {@link Message} or {@link javax.mail.Multipart} content is rendered as a byte[] in the\n\t * payload. Otherwise, leave as a {@link Part}. These objects are not suitable for\n\t * downstream serialization. Default: true.\n\t * <p>This has no effect if there is no header mapper, in that case the payload is the\n\t * {@link MimeMessage}.<fim_middle>// function below has no smell\n"}