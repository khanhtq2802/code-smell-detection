{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.external.indexing;\n\nimport java.io.IOException;\n\nimport org.apache.asterix.external.api.IExternalIndexer;\nimport org.apache.asterix.external.api.IIndexingDatasource;\nimport org.apache.asterix.external.input.record.reader.hdfs.HDFSRecordReader;\nimport org.apache.asterix.formats.nontagged.SerializerDeserializerProvider;\nimport org.apache.asterix.om.base.AMutableInt32;\nimport org.apache.asterix.om.base.AMutableInt64;\nimport org.apache.asterix.om.base.IAObject;\nimport org.apache.asterix.om.types.BuiltinType;\nimport org.apache.hadoop.io.Writable;\nimport org.apache.hadoop.mapred.RecordReader;\nimport org.apache.hyracks.api.dataflow.value.ISerializerDeserializer;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.dataflow.common.comm.io.ArrayTupleBuilder;\n\n<fim_suffix>public class RecordColumnarIndexer implements IExternalIndexer {\n\n    private static final long serialVersionUID = 1L;\n    public static final int NUM_OF_FIELDS = 3;\n    protected final AMutableInt32 fileNumber = new AMutableInt32(0);\n    protected final AMutableInt64 offset = new AMutableInt64(0);\n    protected long nextOffset;\n    protected final AMutableInt32 rowNumber = new AMutableInt32(0);\n    protected RecordReader<?, Writable> recordReader;\n\n    @SuppressWarnings(\"unchecked\")\n    private ISerializerDeserializer<IAObject> intSerde =\n            SerializerDeserializerProvider.INSTANCE.getSerializerDeserializer(BuiltinType.AINT32);\n    @SuppressWarnings(\"unchecked\")\n    private ISerializerDeserializer<IAObject> longSerde =\n            SerializerDeserializerProvider.INSTANCE.getSerializerDeserializer(BuiltinType.AINT64);\n\n    @Override\n    public void reset(IIndexingDatasource reader) throws HyracksDataException {\n        try {\n            //TODO: Make this more generic. right now, it works because we only index hdfs files.\n            @SuppressWarnings(\"unchecked\")\n            HDFSRecordReader<?, Writable> hdfsReader = (HDFSRecordReader<?, Writable>) reader;\n            fileNumber.setValue(hdfsReader.getSnapshot().get(hdfsReader.getCurrentSplitIndex()).getFileNumber());\n            recordReader = hdfsReader.getReader();\n            offset.setValue(recordReader.getPos());\n\n            nextOffset = offset.getLongValue();\n            rowNumber.setValue(0);\n        } catch (IOException e) {\n            throw HyracksDataException.create(e);\n        }\n    }\n\n    @Override\n    public void index(ArrayTupleBuilder tb) throws HyracksDataException {\n        try {\n            if (recordReader.getPos() != nextOffset) {\n                // start of a new group\n                offset.setValue(nextOffset);\n                nextOffset = recordReader.getPos();\n                rowNumber.setValue(0);\n            }\n            tb.addField(intSerde, fileNumber);\n            tb.addField(longSerde, offset);\n            tb.addField(intSerde, rowNumber);\n            rowNumber.setValue(rowNumber.getIntegerValue() + 1);\n        } catch (IOException e) {\n            throw HyracksDataException.create(e);\n        }\n    }\n\n    @Override\n    public int getNumberOfFields() {\n        return NUM_OF_FIELDS;\n    }\n\n}<fim_middle>// class below has no smell\n"}