{"text": "<fim_prefix>    /**\n     * Expired credentials.\n     */\n    public static final int CREDENTIALS_EXPIRED  = 8;\n    /**\n     * Defective credentials.\n     *\n     */\n    public static final int DEFECTIVE_CREDENTIAL = 9;\n    /**\n     * Defective token.\n     *\n     */\n    public static final int DEFECTIVE_TOKEN = 10;\n    /**\n     * General failure, unspecified at GSS-API level.\n     */\n    public static final int FAILURE = 11;\n    /**\n     * Invalid security context.\n     */\n    public static final int NO_CONTEXT = 12;\n    /**\n     * Invalid credentials.\n     */\n    public static final int NO_CRED = 13;\n    /**\n     * Unsupported QOP value.\n     */\n    public static final int BAD_QOP = 14;\n    /**\n     * Operation unauthorized.\n     */\n    public static final int UNAUTHORIZED = 15;\n    /**\n     * Operation unavailable.\n     */\n    public static final int UNAVAILABLE = 16;\n    /**\n     * Duplicate credential element requested.\n     */\n    public static final int DUPLICATE_ELEMENT = 17;\n    /**\n     * Name contains multi-mechanism elements.\n     */\n    public static final int NAME_NOT_MN = 18;\n    /**\n     * The token was a duplicate of an earlier token.\n     * This is a fatal error code that may occur during\n     * context establishment.  It is not used to indicate\n     * supplementary status values. The MessageProp object is\n     * used for that purpose.\n     */\n    public static final int DUPLICATE_TOKEN = 19;\n    /**\n     * The token's validity period has expired.  This is a\n     * fatal error code that may occur during context establishment.\n     * It is not used to indicate supplementary status values.\n     * The MessageProp object is used for that purpose.\n     */\n    public static final int OLD_TOKEN = 20;\n    /**\n     * A later token has already been processed.  This is a\n     * fatal error code that may occur during context establishment.\n     * It is not used to indicate supplementary status values.\n     * The MessageProp object is used for that purpose.\n     */\n    public static final int UNSEQ_TOKEN = 21;\n    /**\n     * An expected per-message token was not received.  This is a\n     * fatal error code that may occur during context establishment.\n     * It is not used to indicate supplementary status values.\n     * The MessageProp object is used for that purpose.\n     */\n    public static final int GAP_TOKEN = 22;\n    private static String[] messages = {\n        \"Channel binding mismatch\", // BAD_BINDINGS\n        \"Unsupported mechanism requested\", // BAD_MECH\n        \"Invalid name provided\", // BAD_NAME\n        \"Name of unsupported type provided\", //BAD_NAMETYPE\n        \"Invalid input status selector\", // BAD_STATUS\n        \"Token had invalid integrity check\", // BAD_SIG\n        \"Specified security context expired\", // CONTEXT_EXPIRED\n        \"Expired credentials detected\", // CREDENTIALS_EXPIRED\n        \"Defective credential detected\", // DEFECTIVE_CREDENTIAL\n        \"Defective token detected\", // DEFECTIVE_TOKEN\n        \"Failure unspecified at GSS-API level\", // FAILURE\n        \"Security context init/accept not yet called or context deleted\",\n                                                // NO_CONTEXT\n        \"No valid credentials provided\", // NO_CRED\n        \"Unsupported QOP value\", // BAD_QOP\n        \"Operation unauthorized\", // UNAUTHORIZED\n        \"Operation unavailable\", // UNAVAILABLE\n        \"Duplicate credential element requested\", //DUPLICATE_ELEMENT\n        \"Name contains multi-mechanism elements\", // NAME_NOT_MN\n        \"The token was a duplicate of an earlier token\", //DUPLICATE_TOKEN\n        \"The token's validity period has expired\", //OLD_TOKEN\n        \"A later token has already been processed\", //UNSEQ_TOKEN\n        \"An expected per-message token was not received\", //GAP_TOKEN\n    };\n   /**\n    * The major code for this exception\n    *\n    * @serial\n    */\n    private int major;\n   /**\n    * The minor code for this exception\n    *\n    * @serial\n    */\n    private int minor = 0;\n   /**\n    * The text string for minor code\n    *\n    * @serial\n    */\n    private String minorMessage = null;\n   /**\n    * Alternate text string for major code\n    *\n    * @serial\n    */\n    private String majorString = null;\n    /**\n     *  Creates a GSSException object with a specified major code.\n     *\n     * @param majorCode the The GSS error code for the problem causing this\n     * exception to be thrown.\n     */\n    public GSSException (int majorCode) {\n        if (validateMajor(majorCode))\n            major = majorCode;\n        else\n            major = FAILURE;\n    }\n    /**\n     * Construct a GSSException object with a specified major code and a\n     * specific major string for it.\n     *\n     * @param majorCode the fatal error code causing this exception.\n     * @param majorString an expicit message to be included in this exception\n     */\n    GSSException (int majorCode, String majorString) {\n        if (validateMajor(majorCode))\n            major = majorCode;\n        else\n            major = FAILURE;\n        this.majorString = majorString;\n    }\n    /**\n     * Creates a GSSException object with the specified major code, minor\n     * code, and minor code textual explanation.  This constructor is to be\n     * used when the exception is originating from the underlying mechanism\n     * level. It allows the setting of both the GSS code and the mechanism\n     * code.\n     *\n     * @param majorCode the GSS error code for the problem causing this\n     * exception to be thrown.\n     * @param minorCode the mechanism level error code for the problem\n     * causing this exception to be thrown.\n     * @param minorString the textual explanation of the mechanism error\n     * code.\n     */\n    public GSSException (int majorCode, int minorCode, String minorString) {\n        if (validateMajor(majorCode))\n            major = majorCode;\n        else\n            major = FAILURE;\n        minor = minorCode;\n        minorMessage = minorString;\n    }\n    /**\n     * Returns the GSS-API level major error code for the problem causing\n     * this exception to be thrown. Major error codes are\n     * defined at the mechanism independent GSS-API level in this\n     * class. Mechanism specific error codes that might provide more\n     * information are set as the minor error code.\n     *\n     * @return int the GSS-API level major error code causing this exception\n     * @see #getMajorString\n     * @see #getMinor\n     * @see #getMinorString\n     */\n    public int getMajor() {\n        return major;\n    }\n    /**\n     * Returns the mechanism level error code for the problem causing this\n     * exception to be thrown. The minor code is set by the underlying\n     * mechanism.\n     *\n     * @return int the mechanism error code; 0 indicates that it has not\n     * been set.\n     * @see #getMinorString\n     * @see #setMinor\n     */\n    public int  getMinor(){\n        return minor;\n    }\n    /**\n     * Returns a string explaining the GSS-API level major error code in\n     * this exception.\n     *\n     * @return String explanation string for the major error code\n     * @see #getMajor\n     * @see #toString\n     */\n    public String getMajorString() {\n        if (majorString != null)\n            return majorString;\n        else\n            return messages[major - 1];\n    }\n    /**\n     * Returns a string explaining the mechanism specific error code.\n     * If the minor status code is 0, then no mechanism level error details\n     * will be available.\n     *\n     * @return String a textual explanation of mechanism error code\n     * @see #getMinor\n     * @see #getMajorString\n     * @see #toString\n     */\n    public String getMinorString() {\n        return minorMessage;\n    }\n    /**\n     * Used by the exception thrower to set the mechanism\n     * level minor error code and its string explanation.  This is used by\n     * mechanism providers to indicate error details.\n     *\n     * @param minorCode the mechanism specific error code\n     * @param message textual explanation of the mechanism error code\n     * @see #getMinor\n     */\n    public void setMinor(int minorCode, String message) {\n        minor = minorCode;\n        minorMessage = message;\n    }\n    /**\n     * Returns a textual representation of both the major and the minor\n     * status codes.\n     *\n     * @return a String with the error descriptions\n     */\n    public String toString() {\n        return (\"GSSException: \" + getMessage());\n    }\n    /**\n     * Returns a textual representation of both the major and the minor\n     * status codes.\n     *\n     * @return a String with the error descriptions\n     */\n<fim_suffix>    public String getMessage() {\n        if (minor == 0)\n            return (getMajorString());\n        return (getMajorString()\n                + \" (Mechanism level: \" + getMinorString() + \")\");\n    }<fim_middle>// function below has no smell\n"}