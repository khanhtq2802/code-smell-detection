{"text": "<fim_prefix>package org.eclipse.aether.util.graph.traverser;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *  http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport org.eclipse.aether.collection.DependencyCollectionContext;\nimport org.eclipse.aether.collection.DependencyTraverser;\nimport org.eclipse.aether.graph.Dependency;\n\n/**\n * A dependency traverser which always or never traverses children.\n */\npublic final class StaticDependencyTraverser\n    implements DependencyTraverser\n{\n\n    private final boolean traverse;\n\n    /**\n     * Creates a new traverser with the specified traversal behavior.\n     * \n     * @param traverse {@code true} to traverse all dependencies, {@code false} to never traverse.\n     */\n    public StaticDependencyTraverser( boolean traverse )\n    {\n        this.traverse = traverse;\n    }\n\n    public boolean traverseDependency( Dependency dependency )\n    {\n        return traverse;\n    }\n\n    public DependencyTraverser deriveChildTraverser( DependencyCollectionContext context )\n    {\n        return this;\n    }\n\n    @Override\n    public boolean equals( Object obj )\n    {\n        if ( this == obj )\n        {\n            return true;\n        }\n        else if ( null == obj || !getClass().equals( obj.getClass() ) )\n        {\n            return false;\n        }\n\n        StaticDependencyTraverser that = (StaticDependencyTraverser) obj;\n        return traverse == that.traverse;\n    }\n\n<fim_suffix>    @Override\n    public int hashCode()\n    {\n        int hash = getClass().hashCode();\n        hash = hash * 31 + ( traverse ? 1 : 0 );\n        return hash;\n    }\n\n}<fim_middle>// function below has no smell\n"}