{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2011, 2013 IBM Corporation and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n * \n * Contributors:\n *     IBM Corporation - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.orion.internal.server.hosting;\n\nimport org.eclipse.orion.server.core.ProtocolConstants;\n\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.orion.server.core.OrionConfiguration;\nimport org.eclipse.orion.server.core.metastore.UserInfo;\nimport org.eclipse.orion.server.core.resources.Base64Counter;\nimport org.json.*;\n\n/**\n * Configuration details for a site that can be hosted on an Orion server.\n */\npublic class SiteInfo {\n\n\tprivate String hostHint;\n\tprivate String id;\n\tprivate JSONArray mappings = new JSONArray();\n\tprivate String name;\n\tprivate String workspaceId;\n\n\t/**\n\t * Returns the object containing the current site configurations for this user.\n\t */\n\tpublic static JSONObject getSites(UserInfo user) {\n\t\t//return value is a JSONObject where key is site id, value is site object\n\t\tString sites = user.getProperty(SiteConfigurationConstants.KEY_SITE_CONFIGURATIONS);\n\t\tif (sites != null) {\n\t\t\ttry {\n\t\t\t\treturn new JSONObject(sites);\n\t\t\t} catch (JSONException e) {\n\t\t\t\t//let it fail on write\n\t\t\t}\n\t\t}\n\t\t//assume there are no sites and create a new one\n\t\treturn new JSONObject();\n\t}\n\n\tpublic static SiteInfo getSite(UserInfo user, String siteId) {\n\t\tJSONObject sites = getSites(user);\n\t\tJSONObject siteObject;\n\t\ttry {\n\t\t\tsiteObject = sites.getJSONObject(siteId);\n\t\t} catch (JSONException e) {\n\t\t\t//does not exist\n\t\t\treturn null;\n\t\t}\n\t\treturn new SiteInfo(siteObject);\n\t}\n\n\t/**\n\t * Returns a new site configuration for the given user.\n\t */\n\tpublic static SiteInfo newSiteConfiguration(UserInfo user, String name, String workspaceId) {\n\t\tSiteInfo site = new SiteInfo();\n\t\tsite.setName(name);\n\t\tsite.setWorkspace(workspaceId);\n\t\tsite.setId(nextSiteId(user));\n\t\treturn site;\n\t}\n\n\t/**\n\t * Returns a new site id that is unique for the given user.\n\t */\n\tprivate static String nextSiteId(UserInfo user) {\n\t\tBase64Counter counter = new Base64Counter();\n\t\tString userName = user.getUserName();\n\t\tJSONObject sitesObject = getSites(user);\n\t\tString candidate = userName + '-' + counter.toString();\n\t\twhile (sitesObject.has(candidate)) {\n\t\t\tcounter.increment();\n\t\t\tcandidate = userName + '-' + counter.toString();\n\t\t}\n\t\treturn candidate;\n\t}\n\n\tprivate SiteInfo() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Creates a new SiteInfo instance with information from the given input object.\n\t */\n\tpublic SiteInfo(JSONObject siteObject) {\n\t\tsuper();\n\t\tthis.id = siteObject.optString(ProtocolConstants.KEY_ID);\n\t\tthis.name = siteObject.optString(ProtocolConstants.KEY_NAME);\n\t\tthis.hostHint = siteObject.optString(SiteConfigurationConstants.KEY_HOST_HINT);\n\t\tthis.workspaceId = siteObject.optString(SiteConfigurationConstants.KEY_WORKSPACE);\n\t\tthis.mappings = siteObject.optJSONArray(SiteConfigurationConstants.KEY_MAPPINGS);\n\t}\n\n\tpublic String getHostHint() {\n\t\treturn hostHint;\n\t}\n\n\t/**\n\t * @return the id\n\t */\n\tpublic String getId() {\n\t\treturn id;\n\t}\n\n\tpublic JSONArray getMappingsJSON() {\n\t\treturn mappings;\n\t}\n\n\t/**\n\t * @return the name\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic String getWorkspace() {\n\t\treturn workspaceId;\n\t}\n\n\t/**\n\t * Saves this site configuration in the given user info.\n\t * @param user\n\t * @throws CoreException \n\t */\n\tpublic void save(UserInfo user) throws CoreException {\n\t\tJSONObject sites = getSites(user);\n\t\ttry {\n\t\t\tsites.put(getId(), toJSON());\n\t\t} catch (JSONException e) {\n\t\t\t//should never happen if metadata is well formed\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tuser.setProperty(SiteConfigurationConstants.KEY_SITE_CONFIGURATIONS, sites.toString());\n\t\tOrionConfiguration.getMetaStore().updateUser(user);\n\t}\n\n\t/**\n\t * Removes this site from the given user.\n\t * @throws CoreException \n\t */\n<fim_suffix>\tpublic void delete(UserInfo user) throws CoreException {\n\t\tJSONObject sites = getSites(user);\n\t\tif (!sites.has(getId())) {\n\t\t\t//nothing to do, site does not exist\n\t\t\treturn;\n\t\t}\n\t\tsites.remove(getId());\n\t\tuser.setProperty(SiteConfigurationConstants.KEY_SITE_CONFIGURATIONS, sites.toString());\n\t\tOrionConfiguration.getMetaStore().updateUser(user);\n\t}\n\n\tpublic void setHostHint(String hint) {\n\t\tthis.hostHint = hint;\n\t}\n\n\t/**\n\t * @param id the id to set\n\t */\n\tpublic void setId(String id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic void setMappings(JSONArray newMappings) {\n\t\tthis.mappings = newMappings == null ? new JSONArray() : newMappings;\n\t}\n\n\t/**\n\t * @param name the name to set\n\t */\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void setWorkspace(String workspace) {\n\t\tthis.workspaceId = workspace;\n\t}\n\n\t/**\n\t * Returns a JSON representation of this site configuration.\n\t */\n\tpublic JSONObject toJSON() {\n\t\tJSONObject result = new JSONObject();\n\t\ttry {\n\t\t\tresult.put(ProtocolConstants.KEY_ID, id);\n\t\t\tresult.put(ProtocolConstants.KEY_NAME, name);\n\t\t\tresult.put(SiteConfigurationConstants.KEY_HOST_HINT, hostHint);\n\t\t\tresult.put(SiteConfigurationConstants.KEY_WORKSPACE, workspaceId);\n\t\t\tresult.put(SiteConfigurationConstants.KEY_MAPPINGS, mappings);\n\t\t} catch (JSONException e) {\n\t\t\t//cannot happen because keys are well formed\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\n\t\treturn result;\n\t}\n}<fim_middle>// function below has no smell\n"}