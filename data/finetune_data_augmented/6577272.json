{"text": "<fim_prefix>            \t    // InternalEntities.g:1617:6: () ( ( ruleOpAdd ) )\n            \t    {\n            \t    // InternalEntities.g:1617:6: ()\n            \t    // InternalEntities.g:1618:7: \n            \t    {\n            \t    if ( state.backtracking==0 ) {\n            \t      \t\t\t\t\t\t\tcurrent = forceCreateModelElementAndSet(\n            \t      \t\t\t\t\t\t\t\tgrammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),\n            \t      \t\t\t\t\t\t\t\tcurrent);\n            \t    }\n            \t    }\n            \t    // InternalEntities.g:1624:6: ( ( ruleOpAdd ) )\n            \t    // InternalEntities.g:1625:7: ( ruleOpAdd )\n            \t    {\n            \t    // InternalEntities.g:1625:7: ( ruleOpAdd )\n            \t    // InternalEntities.g:1626:8: ruleOpAdd\n            \t    {\n            \t    if ( state.backtracking==0 ) {\n            \t      \t\t\t\t\t\t\t\tif (current==null) {\n            \t      \t\t\t\t\t\t\t\t\tcurrent = createModelElement(grammarAccess.getXAdditiveExpressionRule());\n            \t      \t\t\t\t\t\t\t\t}\n            \t    }\n            \t    if ( state.backtracking==0 ) {\n            \t      \t\t\t\t\t\t\t\tnewCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0());\n            \t    }\n            \t    pushFollow(FOLLOW_16);\n            \t    ruleOpAdd();\n            \t    state._fsp--;\n            \t    if (state.failed) return current;\n            \t    if ( state.backtracking==0 ) {\n            \t      \t\t\t\t\t\t\t\tafterParserOrEnumRuleCall();\n            \t    }\n            \t    }\n            \t    }\n            \t    }\n            \t    }\n            \t    // InternalEntities.g:1642:4: ( (lv_rightOperand_3_0= ruleXMultiplicativeExpression ) )\n            \t    // InternalEntities.g:1643:5: (lv_rightOperand_3_0= ruleXMultiplicativeExpression )\n            \t    {\n            \t    // InternalEntities.g:1643:5: (lv_rightOperand_3_0= ruleXMultiplicativeExpression )\n            \t    // InternalEntities.g:1644:6: lv_rightOperand_3_0= ruleXMultiplicativeExpression\n            \t    {\n            \t    if ( state.backtracking==0 ) {\n            \t      \t\t\t\t\t\tnewCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0());\n            \t    }\n            \t    pushFollow(FOLLOW_29);\n            \t    lv_rightOperand_3_0=ruleXMultiplicativeExpression();\n            \t    state._fsp--;\n            \t    if (state.failed) return current;\n            \t    if ( state.backtracking==0 ) {\n            \t      \t\t\t\t\t\tif (current==null) {\n            \t      \t\t\t\t\t\t\tcurrent = createModelElementForParent(grammarAccess.getXAdditiveExpressionRule());\n            \t      \t\t\t\t\t\t}\n            \t      \t\t\t\t\t\tset(\n            \t      \t\t\t\t\t\t\tcurrent,\n            \t      \t\t\t\t\t\t\t\"rightOperand\",\n            \t      \t\t\t\t\t\t\tlv_rightOperand_3_0,\n            \t      \t\t\t\t\t\t\t\"org.eclipse.xtext.xbase.Xbase.XMultiplicativeExpression\");\n            \t      \t\t\t\t\t\tafterParserOrEnumRuleCall();\n            \t    }\n            \t    }\n            \t    }\n            \t    }\n            \t    break;\n            \tdefault :\n            \t    break loop25;\n                }\n            } while (true);\n            }\n            }\n            if ( state.backtracking==0 ) {\n              \tleaveRule();\n            }\n        }\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"ruleXAdditiveExpression\"\n    // $ANTLR start \"entryRuleOpAdd\"\n    // InternalEntities.g:1666:1: entryRuleOpAdd returns [String current=null] : iv_ruleOpAdd= ruleOpAdd EOF ;\n    public final String entryRuleOpAdd() throws RecognitionException {\n        String current = null;\n        AntlrDatatypeRuleToken iv_ruleOpAdd = null;\n        try {\n            // InternalEntities.g:1666:45: (iv_ruleOpAdd= ruleOpAdd EOF )\n            // InternalEntities.g:1667:2: iv_ruleOpAdd= ruleOpAdd EOF\n            {\n            if ( state.backtracking==0 ) {\n               newCompositeNode(grammarAccess.getOpAddRule()); \n            }\n            pushFollow(FOLLOW_1);\n            iv_ruleOpAdd=ruleOpAdd();\n            state._fsp--;\n            if (state.failed) return current;\n            if ( state.backtracking==0 ) {\n               current =iv_ruleOpAdd.getText(); \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return current;\n            }\n        }\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"entryRuleOpAdd\"\n    // $ANTLR start \"ruleOpAdd\"\n    // InternalEntities.g:1673:1: ruleOpAdd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '+' | kw= '-' ) ;\n    public final AntlrDatatypeRuleToken ruleOpAdd() throws RecognitionException {\n        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();\n        Token kw=null;\n        \tenterRule();\n        try {\n            // InternalEntities.g:1679:2: ( (kw= '+' | kw= '-' ) )\n            // InternalEntities.g:1680:2: (kw= '+' | kw= '-' )\n            {\n            // InternalEntities.g:1680:2: (kw= '+' | kw= '-' )\n            int alt26=2;\n            int LA26_0 = input.LA(1);\n            if ( (LA26_0==45) ) {\n                alt26=1;\n            }\n            else if ( (LA26_0==46) ) {\n                alt26=2;\n            }\n            else {\n                if (state.backtracking>0) {state.failed=true; return current;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 26, 0, input);\n                throw nvae;\n            }\n            switch (alt26) {\n                case 1 :\n                    // InternalEntities.g:1681:3: kw= '+'\n                    {\n                    kw=(Token)match(input,45,FOLLOW_2); if (state.failed) return current;\n                    if ( state.backtracking==0 ) {\n                      \t\t\tcurrent.merge(kw);\n                      \t\t\tnewLeafNode(kw, grammarAccess.getOpAddAccess().getPlusSignKeyword_0());\n                    }\n                    }\n                    break;\n                case 2 :\n                    // InternalEntities.g:1687:3: kw= '-'\n                    {\n                    kw=(Token)match(input,46,FOLLOW_2); if (state.failed) return current;\n                    if ( state.backtracking==0 ) {\n                      \t\t\tcurrent.merge(kw);\n                      \t\t\tnewLeafNode(kw, grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1());\n                    }\n                    }\n                    break;\n            }\n            }\n            if ( state.backtracking==0 ) {\n              \tleaveRule();\n            }\n        }\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"ruleOpAdd\"\n    // $ANTLR start \"entryRuleXMultiplicativeExpression\"\n    // InternalEntities.g:1696:1: entryRuleXMultiplicativeExpression returns [EObject current=null] : iv_ruleXMultiplicativeExpression= ruleXMultiplicativeExpression EOF ;\n<fim_suffix>    public final EObject entryRuleXMultiplicativeExpression() throws RecognitionException {\n        EObject current = null;\n        EObject iv_ruleXMultiplicativeExpression = null;\n        try {\n            // InternalEntities.g:1696:66: (iv_ruleXMultiplicativeExpression= ruleXMultiplicativeExpression EOF )\n            // InternalEntities.g:1697:2: iv_ruleXMultiplicativeExpression= ruleXMultiplicativeExpression EOF\n            {\n            if ( state.backtracking==0 ) {\n               newCompositeNode(grammarAccess.getXMultiplicativeExpressionRule()); \n            }\n            pushFollow(FOLLOW_1);\n            iv_ruleXMultiplicativeExpression=ruleXMultiplicativeExpression();\n            state._fsp--;\n            if (state.failed) return current;\n            if ( state.backtracking==0 ) {\n               current =iv_ruleXMultiplicativeExpression; \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return current;\n            }\n        }\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }<fim_middle>// function below is long method\n"}