{"text": "<fim_prefix>            return _dom.makeNodeList(index);\n        }\n        else {\n            return super.makeNodeList(index);\n        }\n    }\n    public NodeList makeNodeList(DTMAxisIterator iter)\n    {\n        if (_dom != null) {\n            return _dom.makeNodeList(iter);\n        }\n        else {\n            return super.makeNodeList(iter);\n        }\n    }\n    public String getLanguage(int node)\n    {\n        if (_dom != null) {\n            return _dom.getLanguage(node);\n        }\n        else {\n            return super.getLanguage(node);\n        }\n    }\n    public int getSize()\n    {\n        if (_dom != null) {\n            return _dom.getSize();\n        }\n        else {\n            return super.getSize();\n        }\n    }\n    public String getDocumentURI(int node)\n    {\n        if (_dom != null) {\n            return _dom.getDocumentURI(node);\n        }\n        else {\n            return \"adaptive_rtf\" + _documentURIIndex++;\n        }\n    }\n    public void setFilter(StripFilter filter)\n    {\n        if (_dom != null) {\n            _dom.setFilter(filter);\n        }\n        else {\n            super.setFilter(filter);\n        }\n    }\n    public void setupMapping(String[] names, String[] uris, int[] types, String[] namespaces)\n    {\n        if (_dom != null) {\n            _dom.setupMapping(names, uris, types, namespaces);\n        }\n        else {\n            super.setupMapping(names, uris, types, namespaces);\n        }\n    }\n    public boolean isElement(final int node)\n    {\n        if (_dom != null) {\n            return _dom.isElement(node);\n        }\n        else {\n            return super.isElement(node);\n        }\n    }\n    public boolean isAttribute(final int node)\n    {\n        if (_dom != null) {\n            return _dom.isAttribute(node);\n        }\n        else {\n            return super.isAttribute(node);\n        }\n    }\n    public String lookupNamespace(int node, String prefix)\n        throws TransletException\n    {\n        if (_dom != null) {\n            return _dom.lookupNamespace(node, prefix);\n        }\n        else {\n            return super.lookupNamespace(node, prefix);\n        }\n    }\n    /**\n     * Return the node identity from a node handle.\n     */\n    public final int getNodeIdent(final int nodehandle)\n    {\n        if (_dom != null) {\n            return _dom.getNodeIdent(nodehandle);\n        }\n        else {\n            return super.getNodeIdent(nodehandle);\n        }\n    }\n    /**\n     * Return the node handle from a node identity.\n     */\n    public final int getNodeHandle(final int nodeId)\n    {\n        if (_dom != null) {\n            return _dom.getNodeHandle(nodeId);\n        }\n        else {\n            return super.getNodeHandle(nodeId);\n        }\n    }\n    public DOM getResultTreeFrag(int initialSize, int rtfType)\n    {\n        if (_dom != null) {\n            return _dom.getResultTreeFrag(initialSize, rtfType);\n        }\n        else {\n            return super.getResultTreeFrag(initialSize, rtfType);\n        }\n    }\n    public SerializationHandler getOutputDomBuilder()\n    {\n        return this;\n    }\n    public int getNSType(int node)\n    {\n        if (_dom != null) {\n            return _dom.getNSType(node);\n        }\n        else {\n            return super.getNSType(node);\n        }\n    }\n    public String getUnparsedEntityURI(String name)\n    {\n        if (_dom != null) {\n            return _dom.getUnparsedEntityURI(name);\n        }\n        else {\n            return super.getUnparsedEntityURI(name);\n        }\n    }\n    public Map<String, Integer> getElementsWithIDs()\n    {\n        if (_dom != null) {\n            return _dom.getElementsWithIDs();\n        }\n        else {\n            return super.getElementsWithIDs();\n        }\n    }\n    /** Implementation of the SerializationHandler interfaces **/\n    /** The code in some of the following interfaces are copied from SAXAdapter. **/\n    private void maybeEmitStartElement() throws SAXException\n    {\n        if (_openElementName != null) {\n           int index;\n           if ((index =_openElementName.indexOf(':')) < 0)\n               _dom.startElement(null, _openElementName, _openElementName, _attributes);\n           else {\n                String uri =_dom.getNamespaceURI(_openElementName.substring(0,index));\n                _dom.startElement(uri, _openElementName.substring(index+1), _openElementName, _attributes);\n           }\n            _openElementName = null;\n        }\n    }\n    // Create and initialize the wrapped SAXImpl object\n    private void prepareNewDOM() throws SAXException\n    {\n        _dom = (SAXImpl)_dtmManager.getDTM(null, true, _wsfilter,\n                                  true, false, false,\n                                  _initSize, _buildIdIndex);\n        _dom.startDocument();\n        // Flush pending Text nodes to SAXImpl\n        for (int i = 0; i < _size; i++) {\n            String str = _textArray[i];\n            _dom.characters(str.toCharArray(), 0, str.length());\n        }\n        _size = 0;\n    }\n    public void startDocument() throws SAXException\n    {\n    }\n    public void endDocument() throws SAXException\n    {\n        if (_dom != null) {\n            _dom.endDocument();\n        }\n        else {\n            super.endDocument();\n        }\n    }\n    public void characters(String str) throws SAXException\n    {\n        if (_dom != null) {\n            characters(str.toCharArray(), 0, str.length());\n        }\n        else {\n            super.characters(str);\n        }\n    }\n    public void characters(char[] ch, int offset, int length)\n        throws SAXException\n    {\n        if (_dom != null) {\n            maybeEmitStartElement();\n            _dom.characters(ch, offset, length);\n        }\n        else {\n            super.characters(ch, offset, length);\n        }\n    }\n    public boolean setEscaping(boolean escape) throws SAXException\n    {\n        if (_dom != null) {\n            return _dom.setEscaping(escape);\n        }\n        else {\n            return super.setEscaping(escape);\n        }\n    }\n    public void startElement(String elementName) throws SAXException\n    {\n        if (_dom == null) {\n            prepareNewDOM();\n        }\n        maybeEmitStartElement();\n        _openElementName = elementName;\n        _attributes.clear();\n    }\n    public void startElement(String uri, String localName, String qName)\n        throws SAXException\n    {\n        startElement(qName);\n    }\n    public void startElement(String uri, String localName, String qName, Attributes attributes)\n        throws SAXException\n    {\n        startElement(qName);\n    }\n    public void endElement(String elementName) throws SAXException\n    {\n        maybeEmitStartElement();\n        _dom.endElement(null, null, elementName);\n    }\n    public void endElement(String uri, String localName, String qName)\n        throws SAXException\n    {\n        endElement(qName);\n    }\n    public void addAttribute(String qName, String value)\n    {\n        // \"prefix:localpart\" or \"localpart\"\n        int colonpos = qName.indexOf(':');\n        String uri = EMPTY_STRING;\n        String localName = qName;\n        if (colonpos >0)\n        {\n            String prefix = qName.substring(0, colonpos);\n            localName = qName.substring(colonpos+1);\n            uri = _dom.getNamespaceURI(prefix);\n        }\n        addAttribute(uri, localName, qName, \"CDATA\", value);\n    }\n    public void addUniqueAttribute(String qName, String value, int flags)\n        throws SAXException\n    {\n        addAttribute(qName, value);\n    }\n    public void addAttribute(String uri, String localName, String qname,\n            String type, String value)\n    {\n        if (_openElementName != null) {\n            _attributes.addAttribute(uri, localName, qname, type, value);\n        }\n        else {\n            BasisLibrary.runTimeError(BasisLibrary.STRAY_ATTRIBUTE_ERR, qname);\n        }\n    }\n    public void namespaceAfterStartElement(String prefix, String uri)\n        throws SAXException\n    {\n        if (_dom == null) {\n           prepareNewDOM();\n        }\n        _dom.startPrefixMapping(prefix, uri);\n    }\n    public void comment(String comment) throws SAXException\n    {\n        if (_dom == null) {\n           prepareNewDOM();\n        }\n        maybeEmitStartElement();\n        char[] chars = comment.toCharArray();\n        _dom.comment(chars, 0, chars.length);\n    }\n<fim_suffix>    public void comment(char[] chars, int offset, int length)\n        throws SAXException\n    {\n        if (_dom == null) {\n           prepareNewDOM();\n        }\n        maybeEmitStartElement();\n        _dom.comment(chars, offset, length);\n    }<fim_middle>// function below has no smell\n"}