{"text": "<fim_prefix>                * The shop\u2019s name.\n                */\n                public String getName() {\n                    return (String) get(\"name\");\n                }\n                public Shop setName(String arg) {\n                    optimisticData.put(getKey(\"name\"), arg);\n                    return this;\n                }\n                /**\n                * Settings related to payments.\n                */\n                public PaymentSettings getPaymentSettings() {\n                    return (PaymentSettings) get(\"paymentSettings\");\n                }\n                public Shop setPaymentSettings(PaymentSettings arg) {\n                    optimisticData.put(getKey(\"paymentSettings\"), arg);\n                    return this;\n                }\n                /**\n                * The shop\u2019s primary domain.\n                */\n                public Domain getPrimaryDomain() {\n                    return (Domain) get(\"primaryDomain\");\n                }\n                public Shop setPrimaryDomain(Domain arg) {\n                    optimisticData.put(getKey(\"primaryDomain\"), arg);\n                    return this;\n                }\n                /**\n                * The shop\u2019s privacy policy.\n                */\n                public ShopPolicy getPrivacyPolicy() {\n                    return (ShopPolicy) get(\"privacyPolicy\");\n                }\n                public Shop setPrivacyPolicy(ShopPolicy arg) {\n                    optimisticData.put(getKey(\"privacyPolicy\"), arg);\n                    return this;\n                }\n                /**\n                * Find a product by its handle.\n                *\n                * @deprecated Use `QueryRoot.productByHandle` instead.\n                */\n                public Product getProductByHandle() {\n                    return (Product) get(\"productByHandle\");\n                }\n                public Shop setProductByHandle(Product arg) {\n                    optimisticData.put(getKey(\"productByHandle\"), arg);\n                    return this;\n                }\n                /**\n                * Tags added to products.\n                * Additional access scope required: unauthenticated_read_product_tags.\n                *\n                * @deprecated Use `QueryRoot.productTags` instead.\n                */\n                public StringConnection getProductTags() {\n                    return (StringConnection) get(\"productTags\");\n                }\n                public Shop setProductTags(StringConnection arg) {\n                    optimisticData.put(getKey(\"productTags\"), arg);\n                    return this;\n                }\n                /**\n                * List of the shop\u2019s product types.\n                *\n                * @deprecated Use `QueryRoot.productTypes` instead.\n                */\n                public StringConnection getProductTypes() {\n                    return (StringConnection) get(\"productTypes\");\n                }\n                public Shop setProductTypes(StringConnection arg) {\n                    optimisticData.put(getKey(\"productTypes\"), arg);\n                    return this;\n                }\n                /**\n                * List of the shop\u2019s products.\n                *\n                * @deprecated Use `QueryRoot.products` instead.\n                */\n                public ProductConnection getProducts() {\n                    return (ProductConnection) get(\"products\");\n                }\n                public Shop setProducts(ProductConnection arg) {\n                    optimisticData.put(getKey(\"products\"), arg);\n                    return this;\n                }\n                /**\n                * The shop\u2019s refund policy.\n                */\n                public ShopPolicy getRefundPolicy() {\n                    return (ShopPolicy) get(\"refundPolicy\");\n                }\n                public Shop setRefundPolicy(ShopPolicy arg) {\n                    optimisticData.put(getKey(\"refundPolicy\"), arg);\n                    return this;\n                }\n                /**\n                * Countries that the shop ships to.\n                */\n                public List<CountryCode> getShipsToCountries() {\n                    return (List<CountryCode>) get(\"shipsToCountries\");\n                }\n                public Shop setShipsToCountries(List<CountryCode> arg) {\n                    optimisticData.put(getKey(\"shipsToCountries\"), arg);\n                    return this;\n                }\n                /**\n                * The shop\u2019s Shopify Payments account id.\n                *\n                * @deprecated Use `paymentSettings` instead\n                */\n                public String getShopifyPaymentsAccountId() {\n                    return (String) get(\"shopifyPaymentsAccountId\");\n                }\n                public Shop setShopifyPaymentsAccountId(String arg) {\n                    optimisticData.put(getKey(\"shopifyPaymentsAccountId\"), arg);\n                    return this;\n                }\n                /**\n                * The shop\u2019s terms of service.\n                */\n                public ShopPolicy getTermsOfService() {\n                    return (ShopPolicy) get(\"termsOfService\");\n                }\n                public Shop setTermsOfService(ShopPolicy arg) {\n                    optimisticData.put(getKey(\"termsOfService\"), arg);\n                    return this;\n                }\n                public boolean unwrapsToObject(String key) {\n                    switch (getFieldName(key)) {\n                        case \"articles\": return true;\n                        case \"blogs\": return true;\n                        case \"collectionByHandle\": return true;\n                        case \"collections\": return true;\n                        case \"currencyCode\": return false;\n                        case \"description\": return false;\n                        case \"moneyFormat\": return false;\n                        case \"name\": return false;\n                        case \"paymentSettings\": return true;\n                        case \"primaryDomain\": return true;\n                        case \"privacyPolicy\": return true;\n                        case \"productByHandle\": return true;\n                        case \"productTags\": return true;\n                        case \"productTypes\": return true;\n                        case \"products\": return true;\n                        case \"refundPolicy\": return true;\n                        case \"shipsToCountries\": return false;\n                        case \"shopifyPaymentsAccountId\": return false;\n                        case \"termsOfService\": return true;\n                        default: return false;\n                    }\n                }\n            }\n            public interface ShopPolicyQueryDefinition {\n                void define(ShopPolicyQuery _queryBuilder);\n            }\n            /**\n            * Policy that a merchant has configured for their store, such as their refund or privacy policy.\n            */\n            public static class ShopPolicyQuery extends Query<ShopPolicyQuery> {\n                ShopPolicyQuery(StringBuilder _queryBuilder) {\n                    super(_queryBuilder);\n                    startField(\"id\");\n                }\n                /**\n                * Policy text, maximum size of 64kb.\n                */\n                public ShopPolicyQuery body() {\n                    startField(\"body\");\n                    return this;\n                }\n                /**\n                * Policy\u2019s handle.\n                */\n                public ShopPolicyQuery handle() {\n                    startField(\"handle\");\n                    return this;\n                }\n                /**\n                * Policy\u2019s title.\n                */\n                public ShopPolicyQuery title() {\n                    startField(\"title\");\n                    return this;\n                }\n                /**\n                * Public URL to the policy.\n                */\n                public ShopPolicyQuery url() {\n                    startField(\"url\");\n                    return this;\n                }\n            }\n            /**\n            * Policy that a merchant has configured for their store, such as their refund or privacy policy.\n            */\n<fim_suffix>            public static class ShopPolicy extends AbstractResponse<ShopPolicy> implements Node {\n                public ShopPolicy() {\n                }\n                public ShopPolicy(JsonObject fields) throws SchemaViolationError {\n                    for (Map.Entry<String, JsonElement> field : fields.entrySet()) {\n                        String key = field.getKey();\n                        String fieldName = getFieldName(key);\n                        switch (fieldName) {\n                            case \"body\": {\n                                responseData.put(key, jsonAsString(field.getValue(), key));\n                                break;\n                            }\n                            case \"handle\": {\n                                responseData.put(key, jsonAsString(field.getValue(), key));\n                                break;\n                            }\n                            case \"id\": {\n                                responseData.put(key, new ID(jsonAsString(field.getValue(), key)));\n                                break;\n                            }\n                            case \"title\": {\n                                responseData.put(key, jsonAsString(field.getValue(), key));\n                                break;\n                            }\n                            case \"url\": {\n                                responseData.put(key, jsonAsString(field.getValue(), key));\n                                break;\n                            }\n                            case \"__typename\": {\n                                responseData.put(key, jsonAsString(field.getValue(), key));\n                                break;\n                            }\n                            default: {\n                                throw new SchemaViolationError(this, key, field.getValue());\n                            }\n                        }\n                    }\n                }\n                public ShopPolicy(ID id) {\n                    this();\n                    optimisticData.put(\"id\", id);\n                }\n                public String getGraphQlTypeName() {\n                    return \"ShopPolicy\";\n                }\n                /**\n                * Policy text, maximum size of 64kb.\n                */\n                public String getBody() {\n                    return (String) get(\"body\");\n                }\n                public ShopPolicy setBody(String arg) {\n                    optimisticData.put(getKey(\"body\"), arg);\n                    return this;\n                }\n                /**\n                * Policy\u2019s handle.\n                */\n                public String getHandle() {\n                    return (String) get(\"handle\");\n                }\n                public ShopPolicy setHandle(String arg) {\n                    optimisticData.put(getKey(\"handle\"), arg);\n                    return this;\n                }\n                /**\n                * Globally unique identifier.\n                */\n                public ID getId() {\n                    return (ID) get(\"id\");\n                }\n                /**\n                * Policy\u2019s title.\n                */\n                public String getTitle() {\n                    return (String) get(\"title\");\n                }\n                public ShopPolicy setTitle(String arg) {\n                    optimisticData.put(getKey(\"title\"), arg);\n                    return this;\n                }\n                /**\n                * Public URL to the policy.\n                */\n                public String getUrl() {\n                    return (String) get(\"url\");\n                }\n                public ShopPolicy setUrl(String arg) {\n                    optimisticData.put(getKey(\"url\"), arg);\n                    return this;\n                }\n                public boolean unwrapsToObject(String key) {\n                    switch (getFieldName(key)) {\n                        case \"body\": return false;\n                        case \"handle\": return false;\n                        case \"id\": return false;\n                        case \"title\": return false;\n                        case \"url\": return false;\n                        default: return false;\n                    }\n                }\n            }<fim_middle>// class below has no smell\n"}