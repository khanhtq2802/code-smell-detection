{"text": "<fim_prefix>import org.osgi.service.cm.ConfigurationEvent;\nimport org.osgi.service.log.Logger;\nimport org.osgi.util.promise.Promise;\n<fim_suffix>public class ConfigurationListener extends Phase implements org.osgi.service.cm.ConfigurationListener {\n\tpublic static class Builder {\n\t\tpublic Builder(ContainerState containerState) {\n\t\t\t_containerState = containerState;\n\t\t}\n\t\tpublic Builder component(Component component) {\n\t\t\t_component = component;\n\t\t\treturn this;\n\t\t}\n\t\tpublic ConfigurationListener build() {\n\t\t\tObjects.requireNonNull(_component);\n\t\t\treturn new ConfigurationListener(_containerState, _component);\n\t\t}\n\t\tprivate Component _component;\n\t\tprivate final ContainerState _containerState;\n\t}\n\tprotected ConfigurationListener(\n\t\tContainerState containerState,\n\t\tComponent component) {\n\t\tsuper(containerState, component);\n\t\t_component = component;\n\t\t_log = containerState.containerLogs().getLogger(getClass());\n\t}\n\t@Override\n\tpublic boolean close() {\n\t\ttry (Syncro open = syncro.open()) {\n\t\t\tif (_listenerService != null) {\n\t\t\t\t_listenerService.unregister();\n\t\t\t\t_listenerService = null;\n\t\t\t}\n\t\t\treturn next.map(\n\t\t\t\tnext -> {\n\t\t\t\t\tsubmit(next.closeOp(), next::close).onFailure(\n\t\t\t\t\t\tf -> {\n\t\t\t\t\t\t\t_log.error(l -> l.error(\"CCR Failure in configuration listener close on {}\", next, f));\n\t\t\t\t\t\t\terror(f);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t).orElse(true);\n\t\t}\n\t}\n\t@Override\n\tpublic Op closeOp() {\n\t\treturn Op.of(Mode.CLOSE, Type.CONFIGURATION_LISTENER, _component.template().name);\n\t}\n\t@Override\n\tpublic void configurationEvent(ConfigurationEvent event) {\n\t\tnext.map(next -> (Component)next).ifPresent(\n\t\t\tnext -> next.configurationTemplates().stream().filter(\n\t\t\t\tt -> Predicates.isMatchingConfiguration(event).test(t)\n\t\t\t).findFirst().ifPresent(\n\t\t\t\tt -> {\n\t\t\t\t\tString eventString = Arrays.asList(event.getPid(), event.getFactoryPid(), type(event)).toString();\n\t\t\t\t\tPromise<Boolean> result = containerState.submit(\n\t\t\t\t\t\tOp.of(Mode.OPEN, Type.CONFIGURATION_EVENT, eventString),\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t_log.debug(l -> l.debug(\"CCR Event {} matched {} because of {}\", eventString, _component.template().name, _component.template().configurations));\n\t\t\t\t\t\t\tprocessEvent(next, t, event);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresult.getValue();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tThrow.exception(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\t}\n\t@Override\n\tpublic boolean open() {\n\t\ttry (Syncro open = syncro.open()) {\n\t\t\tif (containerState.bundleContext() == null) {\n\t\t\t\t// this bundle was already removed\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tDictionary<String, Object> properties = new Hashtable<>();\n\t\t\tproperties.put(\"name\", toString());\n\t\t\tproperties.put(Constants.SERVICE_DESCRIPTION, \"Aries CDI - Configuration Listener for \" + containerState.bundle());\n\t\t\tproperties.put(Constants.SERVICE_VENDOR, \"Apache Software Foundation\");\n\t\t\t_listenerService = containerState.bundleContext().registerService(\n\t\t\t\torg.osgi.service.cm.ConfigurationListener.class, this, properties);\n\t\t\treturn next.map(next -> (Component)next).map(\n\t\t\t\tcomponent -> {\n\t\t\t\t\tsubmit(component.openOp(), component::open).then(\n\t\t\t\t\t\ts -> {\n\t\t\t\t\t\t\tcomponent.configurationTemplates().stream().filter(\n\t\t\t\t\t\t\t\tct -> Objects.nonNull(ct.pid)\n\t\t\t\t\t\t\t).forEach(\n\t\t\t\t\t\t\t\ttemplate -> {\n\t\t\t\t\t\t\t\t\tif (template.maximumCardinality == MaximumCardinality.ONE) {\n\t\t\t\t\t\t\t\t\t\tcontainerState.findConfig(template.pid).ifPresent(\n\t\t\t\t\t\t\t\t\t\t\tc -> processEvent(\n\t\t\t\t\t\t\t\t\t\t\t\tcomponent,\n\t\t\t\t\t\t\t\t\t\t\t\ttemplate,\n\t\t\t\t\t\t\t\t\t\t\t\tnew ConfigurationEvent(\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontainerState.caTracker().getServiceReference(),\n\t\t\t\t\t\t\t\t\t\t\t\t\tConfigurationEvent.CM_UPDATED,\n\t\t\t\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t\t\t\tc.getPid()))\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tcontainerState.findConfigs(template.pid, true).ifPresent(\n\t\t\t\t\t\t\t\t\t\t\tarr -> Arrays.stream(arr).forEach(\n\t\t\t\t\t\t\t\t\t\t\t\tc -> processEvent(\n\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttemplate,\n\t\t\t\t\t\t\t\t\t\t\t\t\tnew ConfigurationEvent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontainerState.caTracker().getServiceReference(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tConfigurationEvent.CM_UPDATED,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tc.getFactoryPid(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tc.getPid()))\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn s;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tf -> {\n\t\t\t\t\t\t\t_log.error(l -> l.error(\"CCR Failure during configuration start on {}\", next, f.getFailure()));\n\t\t\t\t\t\t\terror(f.getFailure());\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t).orElse(true);\n\t\t}\n\t}\n\t@Override\n\tpublic Op openOp() {\n\t\treturn Op.of(Mode.OPEN, Type.CONFIGURATION_LISTENER, _component.template().name);\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn Arrays.asList(getClass().getSimpleName(), _component).toString();\n\t}\n\tprivate void processEvent(Component component, ConfigurationTemplateDTO t, ConfigurationEvent event) {\n\t\tboolean required = t.policy == ConfigurationPolicy.REQUIRED;\n\t\tboolean single = t.maximumCardinality == MaximumCardinality.ONE;\n\t\tswitch (event.getType()) {\n\t\t\tcase ConfigurationEvent.CM_DELETED:\n\t\t\t\tcomponent.instances().stream().map(\n\t\t\t\t\tExtendedComponentInstanceDTO.class::cast\n\t\t\t\t).filter(\n\t\t\t\t\tinstance -> (!single && event.getPid().equals(instance.pid)) || single\n\t\t\t\t).forEach(\n\t\t\t\t\tinstance -> {\n\t\t\t\t\t\tsubmit(instance.closeOp(), instance::close).then(\n\t\t\t\t\t\t\ts -> {\n\t\t\t\t\t\t\t\tif (!required) {\n\t\t\t\t\t\t\t\t\tinstance.configurations.removeIf(\n\t\t\t\t\t\t\t\t\t\tc -> c.template == t\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tsubmit(instance.openOp(), instance::open);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tcomponent.instances().remove(instance);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\tcase ConfigurationEvent.CM_LOCATION_CHANGED:\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationEvent.CM_UPDATED:\n\t\t\t\tif (!single &&\n\t\t\t\t\t!component.instances().stream().map(\n\t\t\t\t\t\tExtendedComponentInstanceDTO.class::cast\n\t\t\t\t\t).filter(\n\t\t\t\t\t\tinstance -> event.getPid().equals(instance.pid)\n\t\t\t\t\t).findFirst().isPresent()) {\n\t\t\t\t\tExtendedComponentInstanceDTO instance = new ExtendedComponentInstanceDTO(\n\t\t\t\t\t\tcontainerState, _component.activatorBuilder());\n\t\t\t\t\tinstance.activations = new CopyOnWriteArrayList<>();\n\t\t\t\t\tinstance.configurations = new CopyOnWriteArrayList<>();\n\t\t\t\t\tinstance.pid = event.getPid();\n\t\t\t\t\tinstance.references = new CopyOnWriteArrayList<>();\n\t\t\t\t\tinstance.template = component.template();\n\t\t\t\t\tcomponent.instances().add(instance);\n\t\t\t\t}\n\t\t\t\tcontainerState.findConfig(event.getPid()).ifPresent(\n\t\t\t\t\tconfiguration -> {\n\t\t\t\t\t\tExtendedConfigurationDTO configurationDTO = new ExtendedConfigurationDTO();\n\t\t\t\t\t\tconfigurationDTO.configuration = configuration;\n\t\t\t\t\t\tconfigurationDTO.pid = configuration.getPid();\n\t\t\t\t\t\tconfigurationDTO.properties = Maps.of(configuration.getProcessedProperties(event.getReference()));\n\t\t\t\t\t\tconfigurationDTO.template = t;\n\t\t\t\t\t\tcomponent.instances().stream().map(\n\t\t\t\t\t\t\tExtendedComponentInstanceDTO.class::cast\n\t\t\t\t\t\t).filter(\n\t\t\t\t\t\t\tinstance -> (!single && event.getPid().equals(instance.pid)) || single\n\t\t\t\t\t\t).forEach(\n\t\t\t\t\t\t\tinstance -> {\n\t\t\t\t\t\t\t\tsubmit(instance.closeOp(), instance::close).then(\n\t\t\t\t\t\t\t\t\ts -> {\n\t\t\t\t\t\t\t\t\t\tinstance.configurations.removeIf(c -> c.template == t);\n\t\t\t\t\t\t\t\t\t\tinstance.configurations.add(configurationDTO);\n\t\t\t\t\t\t\t\t\t\tsubmit(instance.openOp(), instance::open);\n\t\t\t\t\t\t\t\t\t\treturn s;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tprivate String type(ConfigurationEvent event) {\n\t\tif (event.getType() == ConfigurationEvent.CM_DELETED)\n\t\t\treturn \"DELETED\";\n\t\tif (event.getType() == ConfigurationEvent.CM_LOCATION_CHANGED)\n\t\t\treturn \"LOCATION_CHANGED\";\n\t\tif (event.getType() == ConfigurationEvent.CM_UPDATED)\n\t\t\treturn \"UPDATED\";\n\t\tthrow new IllegalArgumentException(\"CM Event type \" + event.getType());\n\t}\n\tprivate volatile ServiceRegistration<org.osgi.service.cm.ConfigurationListener> _listenerService;\n\tprivate final Component _component;\n\tprivate final Logger _log;\n}<fim_middle>// class below has no smell\n"}