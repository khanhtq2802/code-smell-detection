{"text": "<fim_prefix>/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.convert;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Set;\nimport java.util.stream.Stream;\n\nimport org.springframework.core.CollectionFactory;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalGenericConverter;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * Converts a {@link Delimiter delimited} String to a Collection.\n *\n * @author Phillip Webb\n */\n<fim_suffix>final class DelimitedStringToCollectionConverter implements ConditionalGenericConverter {\n\n\tprivate final ConversionService conversionService;\n\n\tDelimitedStringToCollectionConverter(ConversionService conversionService) {\n\t\tAssert.notNull(conversionService, \"ConversionService must not be null\");\n\t\tthis.conversionService = conversionService;\n\t}\n\n\t@Override\n\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\treturn Collections.singleton(new ConvertiblePair(String.class, Collection.class));\n\t}\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn targetType.getElementTypeDescriptor() == null || this.conversionService\n\t\t\t\t.canConvert(sourceType, targetType.getElementTypeDescriptor());\n\t}\n\n\t@Override\n\tpublic Object convert(Object source, TypeDescriptor sourceType,\n\t\t\tTypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn convert((String) source, sourceType, targetType);\n\t}\n\n\tprivate Object convert(String source, TypeDescriptor sourceType,\n\t\t\tTypeDescriptor targetType) {\n\t\tDelimiter delimiter = targetType.getAnnotation(Delimiter.class);\n\t\tString[] elements = getElements(source,\n\t\t\t\t(delimiter != null) ? delimiter.value() : \",\");\n\t\tTypeDescriptor elementDescriptor = targetType.getElementTypeDescriptor();\n\t\tCollection<Object> target = createCollection(targetType, elementDescriptor,\n\t\t\t\telements.length);\n\t\tStream<Object> stream = Arrays.stream(elements).map(String::trim);\n\t\tif (elementDescriptor != null) {\n\t\t\tstream = stream.map((element) -> this.conversionService.convert(element,\n\t\t\t\t\tsourceType, elementDescriptor));\n\t\t}\n\t\tstream.forEach(target::add);\n\t\treturn target;\n\t}\n\n\tprivate Collection<Object> createCollection(TypeDescriptor targetType,\n\t\t\tTypeDescriptor elementDescriptor, int length) {\n\t\treturn CollectionFactory.createCollection(targetType.getType(),\n\t\t\t\t(elementDescriptor != null) ? elementDescriptor.getType() : null, length);\n\t}\n\n\tprivate String[] getElements(String source, String delimiter) {\n\t\treturn StringUtils.delimitedListToStringArray(source,\n\t\t\t\tDelimiter.NONE.equals(delimiter) ? null : delimiter);\n\t}\n\n}<fim_middle>// class below has no smell\n"}