{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.salesforce.api.utils;\n\nimport java.util.List;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\nimport org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;\nimport org.apache.camel.component.salesforce.api.dto.SObjectDescription;\nimport org.apache.camel.component.salesforce.api.dto.SObjectField;\n\npublic final class QueryHelper {\n\n    private static final String[] NONE = new String[0];\n\n    private QueryHelper() {\n        // utility class\n    }\n\n    public static String[] fieldNamesOf(final AbstractDescribedSObjectBase object) {\n        if (object == null) {\n            return NONE;\n        }\n\n        final SObjectDescription description = object.description();\n        final List<SObjectField> fields = description.getFields();\n\n        return fields.stream().map(SObjectField::getName).toArray(String[]::new);\n    }\n\n<fim_suffix>    public static String[] filteredFieldNamesOf(final AbstractDescribedSObjectBase object,\n        final Predicate<SObjectField> filter) {\n        if (object == null) {\n            return NONE;\n        }\n\n        if (filter == null) {\n            return fieldNamesOf(object);\n        }\n\n        final SObjectDescription description = object.description();\n        final List<SObjectField> fields = description.getFields();\n\n        return fields.stream().filter(filter).map(SObjectField::getName).toArray(String[]::new);\n    }\n\n    public static String queryToFetchAllFieldsOf(final AbstractDescribedSObjectBase object) {\n        if (object == null) {\n            return null;\n        }\n\n        final SObjectDescription description = object.description();\n        final List<SObjectField> fields = description.getFields();\n\n        return fields.stream().map(SObjectField::getName)\n            .collect(Collectors.joining(\", \", \"SELECT \", \" FROM \" + description.getName()));\n    }\n\n    public static String queryToFetchFilteredFieldsOf(final AbstractDescribedSObjectBase object,\n        final Predicate<SObjectField> filter) {\n        if (object == null) {\n            return null;\n        }\n\n        if (filter == null) {\n            return queryToFetchAllFieldsOf(object);\n        }\n\n        final SObjectDescription description = object.description();\n        final List<SObjectField> fields = description.getFields();\n\n        return fields.stream().filter(filter).map(SObjectField::getName)\n            .collect(Collectors.joining(\", \", \"SELECT \", \" FROM \" + description.getName()));\n    }\n}<fim_middle>// function below has no smell\n"}