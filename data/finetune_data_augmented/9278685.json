{"text": "<fim_prefix>/*\n * Copyright (c) 2001, 2014, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage javax.swing.plaf.multi;\n\nimport java.util.Vector;\nimport javax.swing.plaf.SpinnerUI;\nimport javax.swing.plaf.ComponentUI;\nimport javax.swing.JComponent;\nimport java.awt.Graphics;\nimport java.awt.Dimension;\nimport javax.accessibility.Accessible;\n\n/**\n * A multiplexing UI used to combine <code>SpinnerUI</code>s.\n *\n * <p>This file was automatically generated by AutoMulti.\n *\n * @author  Otto Multey\n * @since 1.4\n */\n<fim_suffix>public class MultiSpinnerUI extends SpinnerUI {\n\n    /**\n     * The vector containing the real UIs.  This is populated\n     * in the call to <code>createUI</code>, and can be obtained by calling\n     * the <code>getUIs</code> method.  The first element is guaranteed to be the real UI\n     * obtained from the default look and feel.\n     */\n    protected Vector<ComponentUI> uis = new Vector<>();\n\n////////////////////\n// Common UI methods\n////////////////////\n\n    /**\n     * Returns the list of UIs associated with this multiplexing UI.  This\n     * allows processing of the UIs by an application aware of multiplexing\n     * UIs on components.\n     *\n     * @return an array of the UI delegates\n     */\n    public ComponentUI[] getUIs() {\n        return MultiLookAndFeel.uisToArray(uis);\n    }\n\n////////////////////\n// SpinnerUI methods\n////////////////////\n\n////////////////////\n// ComponentUI methods\n////////////////////\n\n    /**\n     * Invokes the <code>contains</code> method on each UI handled by this object.\n     *\n     * @return the value obtained from the first UI, which is\n     * the UI obtained from the default <code>LookAndFeel</code>\n     */\n    public boolean contains(JComponent a, int b, int c) {\n        boolean returnValue =\n            uis.elementAt(0).contains(a,b,c);\n        for (int i = 1; i < uis.size(); i++) {\n            uis.elementAt(i).contains(a,b,c);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Invokes the <code>update</code> method on each UI handled by this object.\n     */\n    public void update(Graphics a, JComponent b) {\n        for (int i = 0; i < uis.size(); i++) {\n            uis.elementAt(i).update(a,b);\n        }\n    }\n\n    /**\n     * Returns a multiplexing UI instance if any of the auxiliary\n     * <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the\n     * UI object obtained from the default <code>LookAndFeel</code>.\n     *\n     * @param  a the component to create the UI for\n     * @return the UI delegate created\n     */\n    public static ComponentUI createUI(JComponent a) {\n        MultiSpinnerUI mui = new MultiSpinnerUI();\n        return MultiLookAndFeel.createUIs(mui, mui.uis, a);\n    }\n\n    /**\n     * Invokes the <code>installUI</code> method on each UI handled by this object.\n     */\n    public void installUI(JComponent a) {\n        for (int i = 0; i < uis.size(); i++) {\n            uis.elementAt(i).installUI(a);\n        }\n    }\n\n    /**\n     * Invokes the <code>uninstallUI</code> method on each UI handled by this object.\n     */\n    public void uninstallUI(JComponent a) {\n        for (int i = 0; i < uis.size(); i++) {\n            uis.elementAt(i).uninstallUI(a);\n        }\n    }\n\n    /**\n     * Invokes the <code>paint</code> method on each UI handled by this object.\n     */\n    public void paint(Graphics a, JComponent b) {\n        for (int i = 0; i < uis.size(); i++) {\n            uis.elementAt(i).paint(a,b);\n        }\n    }\n\n    /**\n     * Invokes the <code>getPreferredSize</code> method on each UI handled by this object.\n     *\n     * @return the value obtained from the first UI, which is\n     * the UI obtained from the default <code>LookAndFeel</code>\n     */\n    public Dimension getPreferredSize(JComponent a) {\n        Dimension returnValue =\n            uis.elementAt(0).getPreferredSize(a);\n        for (int i = 1; i < uis.size(); i++) {\n            uis.elementAt(i).getPreferredSize(a);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Invokes the <code>getMinimumSize</code> method on each UI handled by this object.\n     *\n     * @return the value obtained from the first UI, which is\n     * the UI obtained from the default <code>LookAndFeel</code>\n     */\n    public Dimension getMinimumSize(JComponent a) {\n        Dimension returnValue =\n            uis.elementAt(0).getMinimumSize(a);\n        for (int i = 1; i < uis.size(); i++) {\n            uis.elementAt(i).getMinimumSize(a);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Invokes the <code>getMaximumSize</code> method on each UI handled by this object.\n     *\n     * @return the value obtained from the first UI, which is\n     * the UI obtained from the default <code>LookAndFeel</code>\n     */\n    public Dimension getMaximumSize(JComponent a) {\n        Dimension returnValue =\n            uis.elementAt(0).getMaximumSize(a);\n        for (int i = 1; i < uis.size(); i++) {\n            uis.elementAt(i).getMaximumSize(a);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object.\n     *\n     * @return the value obtained from the first UI, which is\n     * the UI obtained from the default <code>LookAndFeel</code>\n     */\n    public int getAccessibleChildrenCount(JComponent a) {\n        int returnValue =\n            uis.elementAt(0).getAccessibleChildrenCount(a);\n        for (int i = 1; i < uis.size(); i++) {\n            uis.elementAt(i).getAccessibleChildrenCount(a);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.\n     *\n     * @return the value obtained from the first UI, which is\n     * the UI obtained from the default <code>LookAndFeel</code>\n     */\n    public Accessible getAccessibleChild(JComponent a, int b) {\n        Accessible returnValue =\n            uis.elementAt(0).getAccessibleChild(a,b);\n        for (int i = 1; i < uis.size(); i++) {\n            uis.elementAt(i).getAccessibleChild(a,b);\n        }\n        return returnValue;\n    }\n}<fim_middle>// class below is blob\n"}