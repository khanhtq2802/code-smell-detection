{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.brooklyn.rest.domain;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport java.io.Serializable;\nimport java.util.Objects;\n\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.Response.Status;\n\nimport org.apache.brooklyn.util.exceptions.Exceptions;\nimport org.apache.brooklyn.util.text.Strings;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.google.common.base.Throwables;\n\npublic class ApiError implements Serializable {\n\n    private static final long serialVersionUID = -8244515572813244686L;\n\n    public static Builder builder() {\n        return new Builder();\n    }\n\n    public static ApiError of(Throwable t) {\n        return builderFromThrowable(t).build();\n    }\n\n    public static ApiError of(String message) {\n        return builder().message(message).build();\n    }\n\n    /**\n     * @return An {@link ApiError.Builder} whose message is initialised to either the throwable's\n     *         message or the throwable's class name if the message is null and whose details are\n     *         initialised to the throwable's stack trace.\n     */\n    public static Builder builderFromThrowable(Throwable t) {\n        checkNotNull(t, \"throwable\");\n        String message = Exceptions.collapseText(t);\n        return builder()\n                .message(message)\n                .details(Throwables.getStackTraceAsString(t));\n    }\n\n    public static class Builder {\n        private String message;\n        private String details;\n        private Object data;\n        private Integer errorCode;\n\n        public Builder message(String message) {\n            this.message = checkNotNull(message, \"message\");\n            return this;\n        }\n\n        public Builder details(String details) {\n            this.details = details;\n            return this;\n        }\n\n        public Builder data(Object data) {\n            this.data = data;\n            return this;\n        }\n\n        public Builder errorCode(Status errorCode) {\n            return errorCode(errorCode.getStatusCode());\n        }\n\n        public Builder errorCode(Integer errorCode) {\n            this.errorCode = errorCode;\n            return this;\n        }\n\n        /** as {@link #prefixMessage(String, String)} with default separator of `: ` */\n        public Builder prefixMessage(String prefix) {\n            return prefixMessage(prefix, \": \");\n        }\n\n        /** puts a prefix in front of the message, with the given separator if there is already a message;\n         * if there is no message, it simply sets the prefix as the message.\n         * if no prefix or blank, does nothing.\n         */\n        public Builder prefixMessage(String prefix, String separatorIfMessageNotBlank) {\n            if (Strings.isNonBlank(prefix)) {\n                if (Strings.isBlank(message)) message(prefix);\n                else message(prefix+separatorIfMessageNotBlank+message);\n            }\n            return this;\n        }\n\n        public ApiError build() {\n            return new ApiError(message, details, data, errorCode);\n        }\n\n        public Builder copy(ApiError error) {\n            return this\n                    .message(error.message)\n                    .details(error.details)\n                    .errorCode(error.error);\n        }\n\n        public String getMessage() {\n            return message;\n        }\n    }\n\n    private final String message;\n\n    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n    private final String details;\n    \n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    private final Object data;\n\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    private final Integer error;\n\n    public ApiError(String message) { this(message, null); }\n    public ApiError(String message, String details) { this(message, details, null, null); }\n    public ApiError(\n            @JsonProperty(\"message\") String message,\n            @JsonProperty(\"details\") String details,\n            @JsonProperty(\"data\") Object data,\n            @JsonProperty(\"error\") Integer error) {\n        this.message = checkNotNull(message, \"message\");\n        this.details = details != null ? details : \"\";\n        this.data = data;\n        this.error = error;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public String getDetails() {\n        return details;\n    }\n\n    public Object getData() {\n        return data;\n    }\n    \n    public Integer getError() {\n        return error;\n    }\n\n    public Response asBadRequestResponseJson() {\n        return asResponse(Status.BAD_REQUEST, MediaType.APPLICATION_JSON_TYPE);\n    }\n\n    public Response asResponse(Status defaultStatusIfNoErrorCodeAlready, MediaType type) {\n        boolean hasErrorAlready = this.getError()!=null && this.getError()!=0;\n        int errorCode = hasErrorAlready ? error : defaultStatusIfNoErrorCodeAlready!=null ? defaultStatusIfNoErrorCodeAlready.getStatusCode() : Status.INTERNAL_SERVER_ERROR.getStatusCode();\n        return Response.status(errorCode)\n            .type(type)\n            .entity(hasErrorAlready ? this: builder().copy(this).errorCode(errorCode).build())\n            .build();\n    }\n\n    public Response asResponse(MediaType type) {\n        return asResponse(null, type);\n    }\n\n<fim_suffix>    public Response asJsonResponse() {\n        return asResponse(MediaType.APPLICATION_JSON_TYPE);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof ApiError)) return false;\n        ApiError apiError = (ApiError) o;\n        return Objects.equals(message, apiError.message) &&\n                Objects.equals(details, apiError.details) &&\n                Objects.equals(error, apiError.error);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(message, details, error);\n    }\n\n    @Override\n    public String toString() {\n        return \"ApiError{\" +\n                \"message='\" + message + '\\'' +\n                \", details='\" + details + '\\'' +\n                \", error=\" + error +\n                '}';\n    }\n}<fim_middle>// function below has no smell\n"}