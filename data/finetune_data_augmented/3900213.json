{"text": "<fim_prefix>        } catch (AccumuloSecurityException ouch1) {\n          result.ouch1 = ouch1;\n        } catch (AccumuloException ouch2) {\n          result.ouch2 = ouch2;\n        } catch (TableNotFoundException ouch3) {\n          result.ouch3 = ouch3;\n        }\n        return result;\n      }\n    }\n    public static class clearLocatorCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearLocatorCache_args> {\n      public clearLocatorCache() {\n        super(\"clearLocatorCache\");\n      }\n      public clearLocatorCache_args getEmptyArgsInstance() {\n        return new clearLocatorCache_args();\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      @Override\n      protected boolean rethrowUnhandledExceptions() {\n        return false;\n      }\n      public clearLocatorCache_result getResult(I iface, clearLocatorCache_args args) throws org.apache.thrift.TException {\n        clearLocatorCache_result result = new clearLocatorCache_result();\n        try {\n          iface.clearLocatorCache(args.login, args.tableName);\n        } catch (TableNotFoundException ouch1) {\n          result.ouch1 = ouch1;\n        }\n        return result;\n      }\n    }\n    public static class cloneTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cloneTable_args> {\n      public cloneTable() {\n        super(\"cloneTable\");\n      }\n      public cloneTable_args getEmptyArgsInstance() {\n        return new cloneTable_args();\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      @Override\n      protected boolean rethrowUnhandledExceptions() {\n        return false;\n      }\n      public cloneTable_result getResult(I iface, cloneTable_args args) throws org.apache.thrift.TException {\n        cloneTable_result result = new cloneTable_result();\n        try {\n          iface.cloneTable(args.login, args.tableName, args.newTableName, args.flush, args.propertiesToSet, args.propertiesToExclude);\n        } catch (AccumuloException ouch1) {\n          result.ouch1 = ouch1;\n        } catch (AccumuloSecurityException ouch2) {\n          result.ouch2 = ouch2;\n        } catch (TableNotFoundException ouch3) {\n          result.ouch3 = ouch3;\n        } catch (TableExistsException ouch4) {\n          result.ouch4 = ouch4;\n        }\n        return result;\n      }\n    }\n    public static class compactTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, compactTable_args> {\n      public compactTable() {\n        super(\"compactTable\");\n      }\n      public compactTable_args getEmptyArgsInstance() {\n        return new compactTable_args();\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      @Override\n      protected boolean rethrowUnhandledExceptions() {\n        return false;\n      }\n      public compactTable_result getResult(I iface, compactTable_args args) throws org.apache.thrift.TException {\n        compactTable_result result = new compactTable_result();\n        try {\n          iface.compactTable(args.login, args.tableName, args.startRow, args.endRow, args.iterators, args.flush, args.wait, args.compactionStrategy);\n        } catch (AccumuloSecurityException ouch1) {\n          result.ouch1 = ouch1;\n        } catch (TableNotFoundException ouch2) {\n          result.ouch2 = ouch2;\n        } catch (AccumuloException ouch3) {\n          result.ouch3 = ouch3;\n        }\n        return result;\n      }\n    }\n    public static class cancelCompaction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelCompaction_args> {\n      public cancelCompaction() {\n        super(\"cancelCompaction\");\n      }\n      public cancelCompaction_args getEmptyArgsInstance() {\n        return new cancelCompaction_args();\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      @Override\n      protected boolean rethrowUnhandledExceptions() {\n        return false;\n      }\n      public cancelCompaction_result getResult(I iface, cancelCompaction_args args) throws org.apache.thrift.TException {\n        cancelCompaction_result result = new cancelCompaction_result();\n        try {\n          iface.cancelCompaction(args.login, args.tableName);\n        } catch (AccumuloSecurityException ouch1) {\n          result.ouch1 = ouch1;\n        } catch (TableNotFoundException ouch2) {\n          result.ouch2 = ouch2;\n        } catch (AccumuloException ouch3) {\n          result.ouch3 = ouch3;\n        }\n        return result;\n      }\n    }\n    public static class createTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createTable_args> {\n      public createTable() {\n        super(\"createTable\");\n      }\n      public createTable_args getEmptyArgsInstance() {\n        return new createTable_args();\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      @Override\n      protected boolean rethrowUnhandledExceptions() {\n        return false;\n      }\n      public createTable_result getResult(I iface, createTable_args args) throws org.apache.thrift.TException {\n        createTable_result result = new createTable_result();\n        try {\n          iface.createTable(args.login, args.tableName, args.versioningIter, args.type);\n        } catch (AccumuloException ouch1) {\n          result.ouch1 = ouch1;\n        } catch (AccumuloSecurityException ouch2) {\n          result.ouch2 = ouch2;\n        } catch (TableExistsException ouch3) {\n          result.ouch3 = ouch3;\n        }\n        return result;\n      }\n    }\n    public static class deleteTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTable_args> {\n      public deleteTable() {\n        super(\"deleteTable\");\n      }\n      public deleteTable_args getEmptyArgsInstance() {\n        return new deleteTable_args();\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      @Override\n      protected boolean rethrowUnhandledExceptions() {\n        return false;\n      }\n      public deleteTable_result getResult(I iface, deleteTable_args args) throws org.apache.thrift.TException {\n        deleteTable_result result = new deleteTable_result();\n        try {\n          iface.deleteTable(args.login, args.tableName);\n        } catch (AccumuloException ouch1) {\n          result.ouch1 = ouch1;\n        } catch (AccumuloSecurityException ouch2) {\n          result.ouch2 = ouch2;\n        } catch (TableNotFoundException ouch3) {\n          result.ouch3 = ouch3;\n        }\n        return result;\n      }\n    }\n    public static class deleteRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRows_args> {\n      public deleteRows() {\n        super(\"deleteRows\");\n      }\n      public deleteRows_args getEmptyArgsInstance() {\n        return new deleteRows_args();\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      @Override\n      protected boolean rethrowUnhandledExceptions() {\n        return false;\n      }\n      public deleteRows_result getResult(I iface, deleteRows_args args) throws org.apache.thrift.TException {\n        deleteRows_result result = new deleteRows_result();\n        try {\n          iface.deleteRows(args.login, args.tableName, args.startRow, args.endRow);\n        } catch (AccumuloException ouch1) {\n          result.ouch1 = ouch1;\n        } catch (AccumuloSecurityException ouch2) {\n          result.ouch2 = ouch2;\n        } catch (TableNotFoundException ouch3) {\n          result.ouch3 = ouch3;\n        }\n        return result;\n      }\n    }\n<fim_suffix>    public static class exportTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportTable_args> {\n      public exportTable() {\n        super(\"exportTable\");\n      }\n      public exportTable_args getEmptyArgsInstance() {\n        return new exportTable_args();\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      @Override\n      protected boolean rethrowUnhandledExceptions() {\n        return false;\n      }\n      public exportTable_result getResult(I iface, exportTable_args args) throws org.apache.thrift.TException {\n        exportTable_result result = new exportTable_result();\n        try {\n          iface.exportTable(args.login, args.tableName, args.exportDir);\n        } catch (AccumuloException ouch1) {\n          result.ouch1 = ouch1;\n        } catch (AccumuloSecurityException ouch2) {\n          result.ouch2 = ouch2;\n        } catch (TableNotFoundException ouch3) {\n          result.ouch3 = ouch3;\n        }\n        return result;\n      }\n    }<fim_middle>// class below has no smell\n"}