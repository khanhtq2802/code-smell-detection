{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.reef.io.network.util;\n\nimport com.google.protobuf.ByteString;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.reef.io.network.proto.ReefNetworkGroupCommProtos;\nimport org.apache.reef.wake.ComparableIdentifier;\nimport org.apache.reef.wake.Identifier;\nimport org.apache.reef.wake.IdentifierFactory;\n\nimport java.net.Inet4Address;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\n/**\n * Utility class for REEF IO network module.\n */\n<fim_suffix>public final class Utils {\n\n  private static final String DELIMITER = \"-\";\n\n  /**\n   * Parse a string of multiple IDs.\n   *\n   * @param ids A string containing multiple IDs\n   * @param factory An Identifier factory\n   * @param <T> A type\n   * @return A list of identifier\n   */\n  public static <T extends Identifier> List<T> parseList(final String ids, final IdentifierFactory factory) {\n    final List<T> result = new ArrayList<>();\n    for (final String token : ids.split(DELIMITER)) {\n      result.add((T) factory.getNewInstance(token.trim()));\n    }\n    return result;\n  }\n\n  public static String listToString(final List<ComparableIdentifier> ids) {\n    return StringUtils.join(ids, DELIMITER);\n  }\n\n  public static List<Integer> createUniformCounts(final int elemSize, final int childSize) {\n    final int remainder = elemSize % childSize;\n    final int quotient = elemSize / childSize;\n    final ArrayList<Integer> result = new ArrayList<>(childSize);\n    result.addAll(Collections.nCopies(remainder, quotient + 1));\n    result.addAll(Collections.nCopies(childSize - remainder, quotient));\n    return Collections.unmodifiableList(result);\n  }\n\n  private static class AddressComparator implements Comparator<Inet4Address> {\n    @Override\n    public int compare(final Inet4Address aa, final Inet4Address ba) {\n      final byte[] a = aa.getAddress();\n      final byte[] b = ba.getAddress();\n      // local subnet comes after all else.\n      if (a[0] == 127 && b[0] != 127) {\n        return 1;\n      }\n      if (a[0] != 127 && b[0] == 127) {\n        return -1;\n      }\n      for (int i = 0; i < 4; i++) {\n        if (a[i] < b[i]) {\n          return -1;\n        }\n        if (a[i] > b[i]) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n  }\n\n  public static ReefNetworkGroupCommProtos.GroupCommMessage bldGCM(\n      final ReefNetworkGroupCommProtos.GroupCommMessage.Type msgType,\n      final Identifier from, final Identifier to, final byte[]... elements) {\n\n    final ReefNetworkGroupCommProtos.GroupCommMessage.Builder gcmBuilder =\n        ReefNetworkGroupCommProtos.GroupCommMessage.newBuilder()\n            .setType(msgType)\n            .setSrcid(from.toString())\n            .setDestid(to.toString());\n\n    final ReefNetworkGroupCommProtos.GroupMessageBody.Builder bodyBuilder =\n        ReefNetworkGroupCommProtos.GroupMessageBody.newBuilder();\n\n    for (final byte[] element : elements) {\n      bodyBuilder.setData(ByteString.copyFrom(element));\n      gcmBuilder.addMsgs(bodyBuilder.build());\n    }\n\n    return gcmBuilder.build();\n  }\n\n  /**\n   * Empty private constructor to prohibit instantiation of utility class.\n   */\n  private Utils() {\n  }\n}<fim_middle>// class below has no smell\n"}