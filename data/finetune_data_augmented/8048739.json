{"text": "<fim_prefix>/**\n */\npackage org.eclipse.xtext.impl;\n\nimport org.eclipse.emf.common.notify.Notification;\nimport org.eclipse.emf.common.notify.NotificationChain;\n\nimport org.eclipse.emf.ecore.EClass;\nimport org.eclipse.emf.ecore.InternalEObject;\n\nimport org.eclipse.emf.ecore.impl.ENotificationImpl;\n\nimport org.eclipse.xtext.CompositeCondition;\nimport org.eclipse.xtext.Condition;\nimport org.eclipse.xtext.XtextPackage;\n\n/**\n * <!-- begin-user-doc -->\n * An implementation of the model object '<em><b>Composite Condition</b></em>'.\n * <!-- end-user-doc -->\n * <p>\n * The following features are implemented:\n * </p>\n * <ul>\n *   <li>{@link org.eclipse.xtext.impl.CompositeConditionImpl#getLeft <em>Left</em>}</li>\n *   <li>{@link org.eclipse.xtext.impl.CompositeConditionImpl#getRight <em>Right</em>}</li>\n * </ul>\n *\n * @generated\n * @noreference This class is not intended to be referenced by clients.\n * @noextend This class is not intended to be subclassed by clients.\n * @noinstantiate This class is not intended to be instantiated by clients.\n * @since 2.9\n */\npublic class CompositeConditionImpl extends ConditionImpl implements CompositeCondition {\n\t/**\n\t * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @see #getLeft()\n\t * @generated\n\t * @ordered\n\t */\n\tprotected Condition left;\n\n\t/**\n\t * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @see #getRight()\n\t * @generated\n\t * @ordered\n\t */\n\tprotected Condition right;\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tprotected CompositeConditionImpl() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@Override\n\tprotected EClass eStaticClass() {\n\t\treturn XtextPackage.Literals.COMPOSITE_CONDITION;\n\t}\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n<fim_suffix>\tpublic Condition getLeft() {\n\t\treturn left;\n\t}\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tpublic NotificationChain basicSetLeft(Condition newLeft, NotificationChain msgs) {\n\t\tCondition oldLeft = left;\n\t\tleft = newLeft;\n\t\tif (eNotificationRequired()) {\n\t\t\tENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XtextPackage.COMPOSITE_CONDITION__LEFT, oldLeft, newLeft);\n\t\t\tif (msgs == null) msgs = notification; else msgs.add(notification);\n\t\t}\n\t\treturn msgs;\n\t}\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tpublic void setLeft(Condition newLeft) {\n\t\tif (newLeft != left) {\n\t\t\tNotificationChain msgs = null;\n\t\t\tif (left != null)\n\t\t\t\tmsgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XtextPackage.COMPOSITE_CONDITION__LEFT, null, msgs);\n\t\t\tif (newLeft != null)\n\t\t\t\tmsgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XtextPackage.COMPOSITE_CONDITION__LEFT, null, msgs);\n\t\t\tmsgs = basicSetLeft(newLeft, msgs);\n\t\t\tif (msgs != null) msgs.dispatch();\n\t\t}\n\t\telse if (eNotificationRequired())\n\t\t\teNotify(new ENotificationImpl(this, Notification.SET, XtextPackage.COMPOSITE_CONDITION__LEFT, newLeft, newLeft));\n\t}\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tpublic Condition getRight() {\n\t\treturn right;\n\t}\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tpublic NotificationChain basicSetRight(Condition newRight, NotificationChain msgs) {\n\t\tCondition oldRight = right;\n\t\tright = newRight;\n\t\tif (eNotificationRequired()) {\n\t\t\tENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XtextPackage.COMPOSITE_CONDITION__RIGHT, oldRight, newRight);\n\t\t\tif (msgs == null) msgs = notification; else msgs.add(notification);\n\t\t}\n\t\treturn msgs;\n\t}\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tpublic void setRight(Condition newRight) {\n\t\tif (newRight != right) {\n\t\t\tNotificationChain msgs = null;\n\t\t\tif (right != null)\n\t\t\t\tmsgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XtextPackage.COMPOSITE_CONDITION__RIGHT, null, msgs);\n\t\t\tif (newRight != null)\n\t\t\t\tmsgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XtextPackage.COMPOSITE_CONDITION__RIGHT, null, msgs);\n\t\t\tmsgs = basicSetRight(newRight, msgs);\n\t\t\tif (msgs != null) msgs.dispatch();\n\t\t}\n\t\telse if (eNotificationRequired())\n\t\t\teNotify(new ENotificationImpl(this, Notification.SET, XtextPackage.COMPOSITE_CONDITION__RIGHT, newRight, newRight));\n\t}\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@Override\n\tpublic NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {\n\t\tswitch (featureID) {\n\t\t\tcase XtextPackage.COMPOSITE_CONDITION__LEFT:\n\t\t\t\treturn basicSetLeft(null, msgs);\n\t\t\tcase XtextPackage.COMPOSITE_CONDITION__RIGHT:\n\t\t\t\treturn basicSetRight(null, msgs);\n\t\t}\n\t\treturn super.eInverseRemove(otherEnd, featureID, msgs);\n\t}\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@Override\n\tpublic Object eGet(int featureID, boolean resolve, boolean coreType) {\n\t\tswitch (featureID) {\n\t\t\tcase XtextPackage.COMPOSITE_CONDITION__LEFT:\n\t\t\t\treturn getLeft();\n\t\t\tcase XtextPackage.COMPOSITE_CONDITION__RIGHT:\n\t\t\t\treturn getRight();\n\t\t}\n\t\treturn super.eGet(featureID, resolve, coreType);\n\t}\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@Override\n\tpublic void eSet(int featureID, Object newValue) {\n\t\tswitch (featureID) {\n\t\t\tcase XtextPackage.COMPOSITE_CONDITION__LEFT:\n\t\t\t\tsetLeft((Condition)newValue);\n\t\t\t\treturn;\n\t\t\tcase XtextPackage.COMPOSITE_CONDITION__RIGHT:\n\t\t\t\tsetRight((Condition)newValue);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eSet(featureID, newValue);\n\t}\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@Override\n\tpublic void eUnset(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase XtextPackage.COMPOSITE_CONDITION__LEFT:\n\t\t\t\tsetLeft((Condition)null);\n\t\t\t\treturn;\n\t\t\tcase XtextPackage.COMPOSITE_CONDITION__RIGHT:\n\t\t\t\tsetRight((Condition)null);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eUnset(featureID);\n\t}\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@Override\n\tpublic boolean eIsSet(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase XtextPackage.COMPOSITE_CONDITION__LEFT:\n\t\t\t\treturn left != null;\n\t\t\tcase XtextPackage.COMPOSITE_CONDITION__RIGHT:\n\t\t\t\treturn right != null;\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}\n\n} //CompositeConditionImpl<fim_middle>// function below has no smell\n"}