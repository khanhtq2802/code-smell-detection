{"text": "<fim_prefix>/**\n * Copyright (c) 2016 iSencia Belgium NV.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Erwin De Ley - initial API and implementation and/or initial documentation\n */\npackage org.eclipse.triquetrum.workflow.model.provider;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.eclipse.emf.common.notify.AdapterFactory;\nimport org.eclipse.emf.common.notify.Notification;\nimport org.eclipse.emf.edit.provider.IItemPropertyDescriptor;\nimport org.eclipse.triquetrum.workflow.model.Vertex;\n\n/**\n * This is the item provider adapter for a {@link org.eclipse.triquetrum.workflow.model.Vertex} object. <!-- begin-user-doc --> <!-- end-user-doc -->\n * \n * @generated\n */\n<fim_suffix>public class VertexItemProvider extends LocationItemProvider {\n  /**\n   * This constructs an instance from a factory and a notifier. <!-- begin-user-doc --> <!-- end-user-doc -->\n   * \n   * @generated\n   */\n  public VertexItemProvider(AdapterFactory adapterFactory) {\n    super(adapterFactory);\n  }\n\n  /**\n   * This returns the property descriptors for the adapted class. <!-- begin-user-doc --> <!-- end-user-doc -->\n   * \n   * @generated\n   */\n  @Override\n  public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {\n    if (itemPropertyDescriptors == null) {\n      super.getPropertyDescriptors(object);\n\n    }\n    return itemPropertyDescriptors;\n  }\n\n  /**\n   * This returns Vertex.gif. <!-- begin-user-doc --> <!-- end-user-doc -->\n   * \n   * @generated\n   */\n  @Override\n  public Object getImage(Object object) {\n    return overlayImage(object, getResourceLocator().getImage(\"full/obj16/Vertex\"));\n  }\n\n  /**\n   * This returns the label text for the adapted class. <!-- begin-user-doc --> <!-- end-user-doc -->\n   * \n   * @generated\n   */\n  @Override\n  public String getText(Object object) {\n    String label = ((Vertex) object).getName();\n    return label == null || label.length() == 0 ? getString(\"_UI_Vertex_type\") : getString(\"_UI_Vertex_type\") + \" \" + label;\n  }\n\n  /**\n   * This handles model notifications by calling {@link #updateChildren} to update any cached children and by creating a viewer notification, which it passes to\n   * {@link #fireNotifyChanged}. <!-- begin-user-doc --> <!-- end-user-doc -->\n   * \n   * @generated\n   */\n  @Override\n  public void notifyChanged(Notification notification) {\n    updateChildren(notification);\n    super.notifyChanged(notification);\n  }\n\n  /**\n   * This adds {@link org.eclipse.emf.edit.command.CommandParameter}s describing the children that can be created under this object. <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * \n   * @generated\n   */\n  @Override\n  protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {\n    super.collectNewChildDescriptors(newChildDescriptors, object);\n  }\n\n}<fim_middle>// class below has no smell\n"}