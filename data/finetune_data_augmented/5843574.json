{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.catalina.tribes.membership;\n\nimport java.util.Properties;\nimport java.util.concurrent.ScheduledExecutorService;\n\nimport org.apache.catalina.tribes.Member;\nimport org.apache.catalina.tribes.MembershipListener;\nimport org.apache.catalina.tribes.MembershipProvider;\nimport org.apache.catalina.tribes.MembershipService;\n\npublic abstract class MembershipProviderBase implements MembershipProvider {\n\n    protected Membership membership;\n    protected MembershipListener membershipListener;\n    protected MembershipService service;\n    // The event notification executor\n    protected ScheduledExecutorService executor;\n\n    @Override\n    public void init(Properties properties) throws Exception {\n    }\n\n<fim_suffix>    @Override\n    public boolean hasMembers() {\n        if (membership == null ) return false;\n        return membership.hasMembers();\n    }\n\n    @Override\n    public Member getMember(Member mbr) {\n        if (membership.getMembers() == null) return null;\n        return membership.getMember(mbr);\n    }\n\n    @Override\n    public Member[] getMembers() {\n        if (membership.getMembers() == null) return Membership.EMPTY_MEMBERS;\n        return membership.getMembers();\n    }\n\n    @Override\n    public void setMembershipListener(MembershipListener listener) {\n        this.membershipListener = listener;\n    }\n\n    @Override\n    public void setMembershipService(MembershipService service) {\n        this.service = service;\n        executor = service.getChannel().getUtilityExecutor();\n    }\n}<fim_middle>// function below has no smell\n"}