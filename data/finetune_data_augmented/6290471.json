{"text": "<fim_prefix>//\n//  ========================================================================\n//  Copyright (c) 1995-2019 Mort Bay Consulting Pty. Ltd.\n//  ------------------------------------------------------------------------\n//  All rights reserved. This program and the accompanying materials\n//  are made available under the terms of the Eclipse Public License v1.0\n//  and Apache License v2.0 which accompanies this distribution.\n//\n//      The Eclipse Public License is available at\n//      http://www.eclipse.org/legal/epl-v10.html\n//\n//      The Apache License v2.0 is available at\n//      http://www.opensource.org/licenses/apache2.0.php\n//\n//  You may elect to redistribute this code under either of these licenses.\n//  ========================================================================\n//\npackage org.eclipse.jetty.websocket.api;\n/**\n * Settings for WebSocket operations.\n */\npublic class WebSocketPolicy\n{\n    private static final int KB = 1024;\n    public static WebSocketPolicy newClientPolicy()\n    {\n        return new WebSocketPolicy(WebSocketBehavior.CLIENT);\n    }\n    public static WebSocketPolicy newServerPolicy()\n    {\n        return new WebSocketPolicy(WebSocketBehavior.SERVER);\n    }\n    /**\n     * The maximum size of a text message during parsing/generating.\n     * <p>\n     * Text messages over this maximum will result in a close code 1009 {@link StatusCode#MESSAGE_TOO_LARGE}\n     * <p>\n     * Default: 65536 (64 K)\n     */\n    private int maxTextMessageSize = 64 * KB;\n    /**\n     * The maximum size of a text message buffer.\n     * <p>\n     * Used ONLY for stream based message writing.\n     * <p>\n     * Default: 32768 (32 K)\n     */\n    private int maxTextMessageBufferSize = 32 * KB;\n    /**\n     * The maximum size of a binary message during parsing/generating.\n     * <p>\n     * Binary messages over this maximum will result in a close code 1009 {@link StatusCode#MESSAGE_TOO_LARGE}\n     * <p>\n     * Default: 65536 (64 K)\n     */\n    private int maxBinaryMessageSize = 64 * KB;\n    /**\n     * The maximum size of a binary message buffer\n     * <p>\n     * Used ONLY for for stream based message writing\n     * <p>\n     * Default: 32768 (32 K)\n     */\n    private int maxBinaryMessageBufferSize = 32 * KB;\n    /**\n     * The timeout in ms (milliseconds) for async write operations.\n     * <p>\n     * Negative values indicate a disabled timeout.\n     */\n    private long asyncWriteTimeout = 60000;\n    /**\n     * The time in ms (milliseconds) that a websocket may be idle before closing.\n     * <p>\n     * Default: 300000 (ms)\n     */\n    private long idleTimeout = 300000;\n    /**\n     * The size of the input (read from network layer) buffer size.\n     * <p>\n     * Default: 4096 (4 K)\n     */\n    private int inputBufferSize = 4 * KB;\n    /**\n     * Behavior of the websockets\n     */\n    private final WebSocketBehavior behavior;\n    public WebSocketPolicy(WebSocketBehavior behavior)\n    {\n        this.behavior = behavior;\n    }\n    private void assertLessThan(String name, long size, String otherName, long otherSize)\n    {\n        if (size > otherSize)\n        {\n            throw new IllegalArgumentException(String.format(\"%s [%d] must be less than %s [%d]\",name,size,otherName,otherSize));\n        }\n    }\n    private void assertGreaterThan(String name, long size, long minSize)\n    {\n        if (size < minSize)\n        {\n            throw new IllegalArgumentException(String.format(\"%s [%d] must be a greater than or equal to \" + minSize,name,size));\n        }\n    }\n    public void assertValidBinaryMessageSize(int requestedSize)\n    {\n        if (maxBinaryMessageSize > 0)\n        {\n            // validate it\n            if (requestedSize > maxBinaryMessageSize)\n            {\n                throw new MessageTooLargeException(\"Binary message size [\" + requestedSize + \"] exceeds maximum size [\" + maxBinaryMessageSize + \"]\");\n            }\n        }\n    }\n    public void assertValidTextMessageSize(int requestedSize)\n    {\n        if (maxTextMessageSize > 0)\n        {\n            // validate it\n            if (requestedSize > maxTextMessageSize)\n            {\n                throw new MessageTooLargeException(\"Text message size [\" + requestedSize + \"] exceeds maximum size [\" + maxTextMessageSize + \"]\");\n            }\n        }\n    }\n    /**\n     * Make a copy of the policy, with current values.\n     * @return the cloned copy of the policy.\n     */\n    public WebSocketPolicy clonePolicy()\n    {\n        WebSocketPolicy clone = new WebSocketPolicy(this.behavior);\n        clone.idleTimeout = this.getIdleTimeout();\n        clone.maxTextMessageSize = this.getMaxTextMessageSize();\n        clone.maxTextMessageBufferSize = this.getMaxTextMessageBufferSize();\n        clone.maxBinaryMessageSize = this.getMaxBinaryMessageSize();\n        clone.maxBinaryMessageBufferSize = this.getMaxBinaryMessageBufferSize();\n        clone.inputBufferSize = this.getInputBufferSize()   ;\n        clone.asyncWriteTimeout = this.getAsyncWriteTimeout();\n        return clone;\n    }\n    /**\n     * Make a copy of the policy, with current values, but a different behavior.\n     *\n     * @param behavior the behavior to copy/clone\n     * @return the cloned policy with a new behavior.\n     * @deprecated use {@link #delegateAs(WebSocketBehavior)} instead\n     */\n    @Deprecated\n    public WebSocketPolicy clonePolicy(WebSocketBehavior behavior)\n    {\n        return delegateAs(behavior);\n    }\n    public WebSocketPolicy delegateAs(WebSocketBehavior behavior)\n    {\n        if(behavior == this.behavior)\n            return this;\n        return new WebSocketPolicy.Delegated(this, behavior);\n    }\n    /**\n     * The timeout in ms (milliseconds) for async write operations.\n     * <p>\n     * Negative values indicate a disabled timeout.\n     * \n     * @return the timeout for async write operations. negative values indicate disabled timeout.\n     */\n    public long getAsyncWriteTimeout()\n    {\n        return asyncWriteTimeout;\n    }\n    public WebSocketBehavior getBehavior()\n    {\n        return behavior;\n    }\n    /**\n     * The time in ms (milliseconds) that a websocket connection may be idle before being closed automatically.\n     * \n     * @return the timeout in milliseconds for idle timeout.\n     */\n    public long getIdleTimeout()\n    {\n        return idleTimeout;\n    }\n    /**\n     * The size of the input (read from network layer) buffer size.\n     * <p>\n     * This is the raw read operation buffer size, before the parsing of the websocket frames.\n     * \n     * @return the raw network bytes read operation buffer size.\n     */\n    public int getInputBufferSize()\n    {\n        return inputBufferSize;\n    }\n    /**\n     * Get the maximum size of a binary message buffer (for streaming writing)\n     * \n     * @return the maximum size of a binary message buffer\n     */\n    public int getMaxBinaryMessageBufferSize()\n    {\n        return maxBinaryMessageBufferSize;\n    }\n    /**\n     * Get the maximum size of a binary message during parsing.\n     * <p>\n     *     This is a memory conservation option, memory over this limit will not be\n     *     allocated by Jetty for handling binary messages.  This applies to individual frames,\n     *     whole message handling, and partial message handling.\n     * </p>\n     * <p>\n     *     Binary messages over this maximum will result in a close code 1009 {@link StatusCode#MESSAGE_TOO_LARGE}\n     * </p>\n     * \n     * @return the maximum size of a binary message\n     */\n    public int getMaxBinaryMessageSize()\n    {\n        return maxBinaryMessageSize;\n    }\n    /**\n     * Get the maximum size of a text message buffer (for streaming writing)\n     * \n     * @return the maximum size of a text message buffer\n     */\n    public int getMaxTextMessageBufferSize()\n    {\n        return maxTextMessageBufferSize;\n    }\n    /**\n     * Get the maximum size of a text message during parsing.\n     * <p>\n     *     This is a memory conservation option, memory over this limit will not be\n     *     allocated by Jetty for handling text messages.  This applies to individual frames,\n     *     whole message handling, and partial message handling.\n     * </p>\n     * <p>\n     *     Text messages over this maximum will result in a close code 1009 {@link StatusCode#MESSAGE_TOO_LARGE}\n     * </p>\n     * \n     * @return the maximum size of a text message.\n     */\n    public int getMaxTextMessageSize()\n    {\n        return maxTextMessageSize;\n    }\n    /**\n     * The timeout in ms (milliseconds) for async write operations.\n     * <p>\n     * Negative values indicate a disabled timeout.\n     * \n     * @param ms\n     *            the timeout in milliseconds\n     */\n<fim_suffix>    public void setAsyncWriteTimeout(long ms)\n    {\n        assertLessThan(\"AsyncWriteTimeout\",ms,\"IdleTimeout\",idleTimeout);\n        this.asyncWriteTimeout = ms;\n    }\n    /**<fim_middle>// function below has no smell\n"}