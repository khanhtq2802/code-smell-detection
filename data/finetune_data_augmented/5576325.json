{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.servicecomb.swagger.converter.model;\n\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.apache.servicecomb.common.javassist.ClassConfig;\nimport org.apache.servicecomb.common.javassist.CtType;\nimport org.apache.servicecomb.common.javassist.CtTypeJavaType;\nimport org.apache.servicecomb.common.javassist.JavassistUtils;\nimport org.apache.servicecomb.swagger.converter.ConverterMgr;\nimport org.apache.servicecomb.swagger.converter.SwaggerToClassGenerator;\nimport org.apache.servicecomb.swagger.converter.property.MapPropertyConverter;\nimport org.apache.servicecomb.swagger.generator.core.utils.ClassUtils;\n\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\n\nimport io.swagger.models.ModelImpl;\nimport io.swagger.models.properties.ObjectProperty;\nimport io.swagger.models.properties.Property;\nimport javassist.CtClass;\n\n<fim_suffix>public class ModelImplConverter extends AbstractModelConverter {\n  @Override\n  public JavaType doConvert(SwaggerToClassGenerator swaggerToClassGenerator, Object model) {\n    ModelImpl modelImpl = (ModelImpl) model;\n\n    JavaType javaType = ConverterMgr.findJavaType(modelImpl.getType(), modelImpl.getFormat());\n    if (javaType != null) {\n      return javaType;\n    }\n\n    if (modelImpl.getReference() != null) {\n      return swaggerToClassGenerator.convertRef(modelImpl.getReference());\n    }\n\n    if (modelImpl.getAdditionalProperties() != null) {\n      return MapPropertyConverter.findJavaType(swaggerToClassGenerator, modelImpl.getAdditionalProperties());\n    }\n\n    if (ObjectProperty.TYPE.equals(modelImpl.getType())\n        && modelImpl.getProperties() == null\n        && modelImpl.getName() == null) {\n      return TypeFactory.defaultInstance().constructType(Object.class);\n    }\n\n    return getOrCreateType(swaggerToClassGenerator, modelImpl);\n  }\n\n  protected JavaType getOrCreateType(SwaggerToClassGenerator swaggerToClassGenerator, ModelImpl modelImpl) {\n    String clsName = ClassUtils.getClassName(findVendorExtensions(modelImpl));\n    clsName = ClassUtils.correctClassName(clsName);\n\n    return getOrCreateType(swaggerToClassGenerator, modelImpl.getProperties(), clsName);\n  }\n\n  protected JavaType getOrCreateType(SwaggerToClassGenerator swaggerToClassGenerator,\n      Map<String, Property> properties,\n      String clsName) {\n    Class<?> cls = ClassUtils.getClassByName(swaggerToClassGenerator.getClassLoader(), clsName);\n    if (cls != null) {\n      return swaggerToClassGenerator.getTypeFactory().constructType(cls);\n    }\n\n    CtClass ctClass = getOrCreateCtClass(swaggerToClassGenerator, properties, clsName);\n    return new CtTypeJavaType(new CtType(ctClass));\n  }\n\n  private CtClass getOrCreateCtClass(SwaggerToClassGenerator swaggerToClassGenerator, Map<String, Property> properties,\n      String clsName) {\n    CtClass ctClass = swaggerToClassGenerator.getClassPool().getOrNull(clsName);\n    if (ctClass != null) {\n      return ctClass;\n    }\n\n    // must ensure already create CtClass, otherwise recursive dependency class will create failed.\n    swaggerToClassGenerator.getClassPool().makeClass(clsName);\n\n    ClassConfig classConfig = new ClassConfig();\n    classConfig.setClassName(clsName);\n\n    if (null != properties) {\n      for (Entry<String, Property> entry : properties.entrySet()) {\n        JavaType propertyJavaType = swaggerToClassGenerator.convert(entry.getValue());\n        classConfig.addField(entry.getKey(), propertyJavaType);\n      }\n    }\n\n    return JavassistUtils.createCtClass(swaggerToClassGenerator.getClassLoader(), classConfig);\n  }\n}<fim_middle>// class below has no smell\n"}