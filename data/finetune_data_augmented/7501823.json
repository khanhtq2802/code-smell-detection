{"text": "<fim_prefix>/*\n * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage jdk.tools.jaotc;\n\nimport org.graalvm.compiler.code.CompilationResult;\nimport org.graalvm.compiler.core.target.Backend;\nimport org.graalvm.compiler.hotspot.HotSpotCompiledCodeBuilder;\nimport org.graalvm.compiler.options.OptionValues;\n\nimport jdk.vm.ci.hotspot.HotSpotCompiledCode;\nimport jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod;\n\nfinal class AOTHotSpotResolvedJavaMethod implements JavaMethodInfo {\n\n    private final HotSpotResolvedJavaMethod method;\n    private final Backend backend;\n    private final OptionValues options;\n\n    AOTHotSpotResolvedJavaMethod(HotSpotResolvedJavaMethod method, Backend backend, OptionValues options) {\n        this.method = method;\n        this.backend = backend;\n        this.options = options;\n    }\n\n    @Override\n    public String getSymbolName() {\n        return JavaMethodInfo.uniqueMethodName(method);\n    }\n\n<fim_suffix>    @Override\n    public String getNameAndSignature() {\n        String className = method.getDeclaringClass().getName();\n        return className + \".\" + method.getName() + method.getSignature().toMethodDescriptor();\n    }\n\n    @Override\n    public HotSpotCompiledCode compiledCode(CompilationResult result) {\n        return HotSpotCompiledCodeBuilder.createCompiledCode(backend.getCodeCache(), method, null, result, options);\n    }\n\n}<fim_middle>// function below has no smell\n"}