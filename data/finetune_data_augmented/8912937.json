{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hive.benchmark.vectorization.mapjoin;\n\nimport org.apache.hadoop.hive.ql.exec.vector.mapjoin.MapJoinTestConfig.MapJoinTestImplementation;\nimport org.apache.hadoop.hive.ql.plan.VectorMapJoinDesc.VectorMapJoinVariation;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\n/*\n * Simple one long key map join benchmarks.\n *\n * Build with \"mvn clean install -DskipTests -Pdist,itests\" at main hive directory.\n *\n * From itests/hive-jmh directory, run:\n *     java -jar target/benchmarks.jar org.apache.hive.benchmark.vectorization.mapjoin.MapJoinOneStringKeyBench\n *\n *  {INNER, INNER_BIG_ONLY, LEFT_SEMI, OUTER}\n *    X\n *  {ROW_MODE_HASH_MAP, ROW_MODE_OPTIMIZED, VECTOR_PASS_THROUGH, NATIVE_VECTOR_OPTIMIZED, NATIVE_VECTOR_FAST}\n *\n */\n@State(Scope.Benchmark)\npublic class MapJoinOneStringKeyBench extends AbstractMapJoin {\n\n  public static class MapJoinOneStringKeyInnerRowModeHashMapBench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.INNER, MapJoinTestImplementation.ROW_MODE_HASH_MAP);\n    }\n  }\n\n  public static class MapJoinOneStringKeyInnerRowModeOptimized_Bench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.INNER, MapJoinTestImplementation.ROW_MODE_OPTIMIZED);\n    }\n  }\n\n  public static class MapJoinOneStringKeyInnerVectorPassThrough_Bench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.INNER, MapJoinTestImplementation.VECTOR_PASS_THROUGH);\n    }\n  }\n\n  public static class MapJoinOneStringKeyInnerNativeVectorOptimizedBench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.INNER, MapJoinTestImplementation.NATIVE_VECTOR_OPTIMIZED);\n    }\n  }\n\n  public static class MapJoinOneStringKeyInnerNativeVectorFastBench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.INNER, MapJoinTestImplementation.NATIVE_VECTOR_FAST);\n    }\n  }\n\n  //-----------------------------------------------------------------------------------------------\n\n  public static class MapJoinOneStringKeyInnerBigOnlyRowModeHashMapBench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.INNER_BIG_ONLY, MapJoinTestImplementation.ROW_MODE_HASH_MAP);\n    }\n  }\n\n  public static class MapJoinOneStringKeyInnerBigOnlyRowModeOptimized_Bench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.INNER_BIG_ONLY, MapJoinTestImplementation.ROW_MODE_OPTIMIZED);\n    }\n  }\n\n  public static class MapJoinOneStringKeyInnerBigOnlyVectorPassThrough_Bench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.INNER_BIG_ONLY, MapJoinTestImplementation.VECTOR_PASS_THROUGH);\n    }\n  }\n\n<fim_suffix>  public static class MapJoinOneStringKeyInnerBigOnlyNativeVectorOptimizedBench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.INNER_BIG_ONLY, MapJoinTestImplementation.NATIVE_VECTOR_OPTIMIZED);\n    }\n  }\n\n  public static class MapJoinOneStringKeyInnerBigOnlyNativeVectorFastBench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.INNER_BIG_ONLY, MapJoinTestImplementation.NATIVE_VECTOR_FAST);\n    }\n  }\n\n  //-----------------------------------------------------------------------------------------------\n\n  public static class MapJoinOneStringKeyLeftSemiRowModeHashMapBench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.LEFT_SEMI, MapJoinTestImplementation.ROW_MODE_HASH_MAP);\n    }\n  }\n\n  public static class MapJoinOneStringKeyLeftSemiRowModeOptimized_Bench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.LEFT_SEMI, MapJoinTestImplementation.ROW_MODE_OPTIMIZED);\n    }\n  }\n\n  public static class MapJoinOneStringKeyLeftSemiVectorPassThrough_Bench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.LEFT_SEMI, MapJoinTestImplementation.VECTOR_PASS_THROUGH);\n    }\n  }\n\n  public static class MapJoinOneStringKeyLeftSemiNativeVectorOptimizedBench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.LEFT_SEMI, MapJoinTestImplementation.NATIVE_VECTOR_OPTIMIZED);\n    }\n  }\n\n  public static class MapJoinOneStringKeyLeftSemiNativeVectorFastBench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.LEFT_SEMI, MapJoinTestImplementation.NATIVE_VECTOR_FAST);\n    }\n  }\n\n  //-----------------------------------------------------------------------------------------------\n\n  public static class MapJoinOneStringKeyOuterRowModeHashMapBench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.OUTER, MapJoinTestImplementation.ROW_MODE_HASH_MAP);\n    }\n  }\n\n  public static class MapJoinOneStringKeyOuterRowModeOptimized_Bench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.OUTER, MapJoinTestImplementation.ROW_MODE_OPTIMIZED);\n    }\n  }\n\n  public static class MapJoinOneStringKeyOuterVectorPassThrough_Bench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.OUTER, MapJoinTestImplementation.VECTOR_PASS_THROUGH);\n    }\n  }\n\n  public static class MapJoinOneStringKeyOuterNativeVectorOptimizedBench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.OUTER, MapJoinTestImplementation.NATIVE_VECTOR_OPTIMIZED);\n    }\n  }\n\n  public static class MapJoinOneStringKeyOuterNativeVectorFastBench extends MapJoinOneStringKeyBenchBase {\n\n    @Setup\n    public void setup() throws Exception {\n      doSetup(VectorMapJoinVariation.OUTER, MapJoinTestImplementation.NATIVE_VECTOR_FAST);\n    }\n  }\n\n  //-----------------------------------------------------------------------------------------------\n\n  public static void main(String[] args) throws RunnerException {\n    Options opt = new OptionsBuilder()\n        .include(\".*\" + MapJoinOneStringKeyBench.class.getSimpleName() + \".*\")\n        .build();\n    new Runner(opt).run();\n  }\n}<fim_middle>// class below has no smell\n"}