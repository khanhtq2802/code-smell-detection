{"text": "<fim_prefix>/****************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one   *\n * or more contributor license agreements.  See the NOTICE file *\n * distributed with this work for additional information        *\n * regarding copyright ownership.  The ASF licenses this file   *\n * to you under the Apache License, Version 2.0 (the            *\n * \"License\"); you may not use this file except in compliance   *\n * with the License.  You may obtain a copy of the License at   *\n *                                                              *\n *   http://www.apache.org/licenses/LICENSE-2.0                 *\n *                                                              *\n * Unless required by applicable law or agreed to in writing,   *\n * software distributed under the License is distributed on an  *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n * KIND, either express or implied.  See the License for the    *\n * specific language governing permissions and limitations      *\n * under the License.                                           *\n ****************************************************************/\n\npackage org.apache.james.dlp.eventsourcing.aggregates;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.stream.Stream;\n\nimport org.apache.james.dlp.api.DLPConfigurationItem;\nimport org.apache.james.dlp.api.DLPRules;\nimport org.apache.james.dlp.eventsourcing.events.ConfigurationItemsAdded;\nimport org.apache.james.dlp.eventsourcing.events.ConfigurationItemsRemoved;\nimport org.apache.james.eventsourcing.Event;\nimport org.apache.james.eventsourcing.EventId;\nimport org.apache.james.eventsourcing.eventstore.History;\nimport org.apache.james.util.OptionalUtils;\n\nimport com.github.steveash.guavate.Guavate;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Sets;\n\npublic class DLPDomainConfiguration {\n\n    public static DLPDomainConfiguration load(DLPAggregateId aggregateId, History history) {\n        return new DLPDomainConfiguration(aggregateId, history);\n    }\n\n<fim_suffix>    private static class State {\n\n        static State initial() {\n            return new State(ImmutableSet.of());\n        }\n\n        final ImmutableSet<DLPConfigurationItem> rules;\n\n        private State(ImmutableSet<DLPConfigurationItem> rules) {\n            this.rules = rules;\n        }\n\n        State add(List<DLPConfigurationItem> toAdd) {\n            ImmutableSet<DLPConfigurationItem> union = Stream.concat(this.rules.stream(), toAdd.stream()).collect(Guavate.toImmutableSet());\n            return new State(union);\n        }\n\n        State remove(List<DLPConfigurationItem> toRemove) {\n            ImmutableSet<DLPConfigurationItem> filtered = rules.stream().filter(rule -> !toRemove.contains(rule)).collect(Guavate.toImmutableSet());\n            return new State(filtered);\n        }\n    }\n\n    private final DLPAggregateId aggregateId;\n    private final History history;\n    private State state;\n\n    private DLPDomainConfiguration(DLPAggregateId aggregateId, History history) {\n        this.aggregateId = aggregateId;\n        this.state = State.initial();\n        history.getEvents().forEach(this::apply);\n        this.history = history;\n    }\n\n    public DLPRules retrieveRules() {\n        return new DLPRules(ImmutableList.copyOf(state.rules));\n    }\n\n    public List<Event> clear() {\n        ImmutableList<DLPConfigurationItem> rules = retrieveRules().getItems();\n        if (!rules.isEmpty()) {\n            ImmutableList<Event> events = ImmutableList.of(new ConfigurationItemsRemoved(aggregateId, history.getNextEventId(), rules));\n            events.forEach(this::apply);\n            return events;\n        } else {\n            return ImmutableList.of();\n        }\n    }\n\n    public List<Event> store(DLPRules updatedRules) {\n        ImmutableSet<DLPConfigurationItem> existingRules = retrieveRules().getItems().stream().collect(Guavate.toImmutableSet());\n        ImmutableSet<DLPConfigurationItem> updatedRulesSet = ImmutableSet.copyOf(updatedRules);\n\n        Optional<Event> removedRulesEvent = generateRemovedRulesEvent(existingRules, updatedRulesSet);\n        Optional<Event> addedRulesEvent = generateAddedRulesEvent(existingRules, updatedRulesSet, computeNextEventId(removedRulesEvent));\n\n        ImmutableList<Event> events = Stream\n            .of(removedRulesEvent, addedRulesEvent)\n            .flatMap(OptionalUtils::toStream)\n            .collect(Guavate.toImmutableList());\n\n        events.forEach(this::apply);\n        return events;\n    }\n\n    private EventId computeNextEventId(Optional<Event> removedRulesEvent) {\n        return removedRulesEvent\n            .map(Event::eventId)\n            .map(EventId::next)\n            .orElse(history.getNextEventId());\n    }\n\n    private Optional<Event> generateRemovedRulesEvent(ImmutableSet<DLPConfigurationItem> existingRules, ImmutableSet<DLPConfigurationItem> updateRulesSet) {\n        Set<DLPConfigurationItem> removedRules = Sets.difference(existingRules, updateRulesSet);\n        if (!removedRules.isEmpty()) {\n            return Optional.of(new ConfigurationItemsRemoved(aggregateId, history.getNextEventId(), removedRules));\n        }\n        return Optional.empty();\n    }\n\n    private Optional<Event> generateAddedRulesEvent(Set<DLPConfigurationItem> existingRules, Set<DLPConfigurationItem> updateRulesSet, EventId nextEventId) {\n        Set<DLPConfigurationItem> addedRules = Sets.difference(updateRulesSet, existingRules);\n        if (!addedRules.isEmpty()) {\n            return Optional.of(new ConfigurationItemsAdded(aggregateId, nextEventId, addedRules));\n        }\n        return Optional.empty();\n    }\n\n    private void apply(Event event) {\n        if (event instanceof ConfigurationItemsAdded) {\n            state = state.add(((ConfigurationItemsAdded) event).getRules());\n        }\n        if (event instanceof ConfigurationItemsRemoved) {\n            state = state.remove(((ConfigurationItemsRemoved) event).getRules());\n        }\n    }\n\n}<fim_middle>// class below has no smell\n"}