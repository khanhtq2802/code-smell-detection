{"text": "<fim_prefix>/*\n * Copyright 2017-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.data.util;\n\nimport lombok.AccessLevel;\nimport lombok.NonNull;\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.Set;\nimport java.util.function.BiConsumer;\nimport java.util.function.BinaryOperator;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport java.util.stream.Collector;\n\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.MultiValueMap;\n\n/**\n * A {@link Collector} for building a {@link MultiValueMap} from a {@link java.util.stream.Stream}.\n *\n * @author Jens Schauder\n * @since 2.0\n */\n@RequiredArgsConstructor(access = AccessLevel.PACKAGE, staticName = \"of\")\nclass MultiValueMapCollector<T, K, V> implements Collector<T, MultiValueMap<K, V>, MultiValueMap<K, V>> {\n\n\tprivate final @NonNull Function<T, K> keyFunction;\n\tprivate final @NonNull Function<T, V> valueFunction;\n\n\t/*\n\t * (non-Javadoc)\n\t * @see java.util.stream.Collector#supplier()\n\t */\n<fim_suffix>\t@Override\n\tpublic Supplier<MultiValueMap<K, V>> supplier() {\n\t\treturn () -> CollectionUtils.toMultiValueMap(new HashMap<>());\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see java.util.stream.Collector#accumulator()\n\t */\n\t@Override\n\tpublic BiConsumer<MultiValueMap<K, V>, T> accumulator() {\n\t\treturn (map, t) -> map.add(keyFunction.apply(t), valueFunction.apply(t));\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see java.util.stream.Collector#combiner()\n\t */\n\t@Override\n\tpublic BinaryOperator<MultiValueMap<K, V>> combiner() {\n\n\t\treturn (map1, map2) -> {\n\n\t\t\tfor (K key : map2.keySet()) {\n\t\t\t\tmap1.addAll(key, map2.get(key));\n\t\t\t}\n\n\t\t\treturn map1;\n\t\t};\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see java.util.stream.Collector#finisher()\n\t */\n\t@Override\n\tpublic Function<MultiValueMap<K, V>, MultiValueMap<K, V>> finisher() {\n\t\treturn Function.identity();\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see java.util.stream.Collector#characteristics()\n\t */\n\t@Override\n\tpublic Set<Characteristics> characteristics() {\n\t\treturn EnumSet.of(Characteristics.IDENTITY_FINISH, Characteristics.UNORDERED);\n\t}\n}<fim_middle>// function below has no smell\n"}