{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.solr.handler.dataimport;\nimport org.apache.solr.core.SolrCore;\nimport org.apache.solr.handler.dataimport.config.Script;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * <p>\n * An implementation for the Context\n * </p>\n * <b>This API is experimental and subject to change</b>\n *\n * @since solr 1.3\n */\npublic class ContextImpl extends Context {\n  protected EntityProcessorWrapper epw;\n\n  private ContextImpl parent;\n\n  private VariableResolver resolver;\n\n  private DataSource ds;\n\n  private String currProcess;\n\n  private Map<String, Object> requestParams;\n\n  private DataImporter dataImporter;\n\n  private Map<String, Object> entitySession, globalSession;\n\n  private Exception lastException = null;\n\n  DocBuilder.DocWrapper doc;\n\n  DocBuilder docBuilder;\n\n\n\n  public ContextImpl(EntityProcessorWrapper epw, VariableResolver resolver,\n                     DataSource ds, String currProcess,\n                     Map<String, Object> global, ContextImpl parentContext, DocBuilder docBuilder) {\n    this.epw = epw;\n    this.docBuilder = docBuilder;\n    this.resolver = resolver;\n    this.ds = ds;\n    this.currProcess = currProcess;\n    if (docBuilder != null) {\n      this.requestParams = docBuilder.getReqParams().getRawParams();\n      dataImporter = docBuilder.dataImporter;\n    }\n    globalSession = global;\n    parent = parentContext;\n  }\n\n  @Override\n  public String getEntityAttribute(String name) {\n    return epw==null || epw.getEntity() == null ? null : epw.getEntity().getAllAttributes().get(name);\n  }\n\n  @Override\n  public String getResolvedEntityAttribute(String name) {\n    return epw==null || epw.getEntity() == null ? null : resolver.replaceTokens(epw.getEntity().getAllAttributes().get(name));\n  }\n\n  @Override\n  public List<Map<String, String>> getAllEntityFields() {\n    return epw==null || epw.getEntity() == null ? Collections.EMPTY_LIST : epw.getEntity().getAllFieldsList();\n  }\n\n  @Override\n  public VariableResolver getVariableResolver() {\n    return resolver;\n  }\n\n  @Override\n  public DataSource getDataSource() {\n    if (ds != null) return ds;\n    if(epw==null) { return null; }\n    if (epw!=null && epw.getDatasource() == null) {\n      epw.setDatasource(dataImporter.getDataSourceInstance(epw.getEntity(), epw.getEntity().getDataSourceName(), this));\n    }\n    if (epw!=null && epw.getDatasource() != null && docBuilder != null && docBuilder.verboseDebug &&\n             Context.FULL_DUMP.equals(currentProcess())) {\n      //debug is not yet implemented properly for deltas\n      epw.setDatasource(docBuilder.getDebugLogger().wrapDs(epw.getDatasource()));\n    }\n    return epw.getDatasource();\n  }\n\n  @Override\n  public DataSource getDataSource(String name) {\n    return dataImporter.getDataSourceInstance(epw==null ? null : epw.getEntity(), name, this);\n  }\n\n  @Override\n  public boolean isRootEntity() {\n    return epw==null ? false : epw.getEntity().isDocRoot();\n  }\n\n  @Override\n  public String currentProcess() {\n    return currProcess;\n  }\n\n  @Override\n  public Map<String, Object> getRequestParameters() {\n    return requestParams;\n  }\n\n  @Override\n  public EntityProcessor getEntityProcessor() {\n    return epw;\n  }\n\n  @Override\n  public void setSessionAttribute(String name, Object val, String scope) {\n    if(name == null) {\n      return;\n    }\n    if (Context.SCOPE_ENTITY.equals(scope)) {\n      if (entitySession == null) {\n        entitySession = new HashMap<>();\n      }\n      entitySession.put(name, val);\n    } else if (Context.SCOPE_GLOBAL.equals(scope)) {\n      if (globalSession != null) {\n        globalSession.put(name, val);\n      }\n    } else if (Context.SCOPE_DOC.equals(scope)) {\n      DocBuilder.DocWrapper doc = getDocument();\n      if (doc != null) {\n        doc.setSessionAttribute(name, val);\n      }\n    } else if (SCOPE_SOLR_CORE.equals(scope)){\n      if(dataImporter != null) {\n        dataImporter.putToCoreScopeSession(name, val);\n      }\n    }\n  }\n\n  @Override\n  public Object getSessionAttribute(String name, String scope) {\n    if (Context.SCOPE_ENTITY.equals(scope)) {\n      if (entitySession == null)\n        return null;\n      return entitySession.get(name);\n    } else if (Context.SCOPE_GLOBAL.equals(scope)) {\n      if (globalSession != null) {\n        return globalSession.get(name);\n      }\n    } else if (Context.SCOPE_DOC.equals(scope)) {\n      DocBuilder.DocWrapper doc = getDocument();      \n      return doc == null ? null: doc.getSessionAttribute(name);\n    } else if (SCOPE_SOLR_CORE.equals(scope)){\n       return dataImporter == null ? null : dataImporter.getFromCoreScopeSession(name);\n    }\n    return null;\n  }\n\n  @Override\n  public Context getParentContext() {\n    return parent;\n  }\n\n  private DocBuilder.DocWrapper getDocument() {\n    ContextImpl c = this;\n    while (true) {\n      if (c.doc != null)\n        return c.doc;\n      if (c.parent != null)\n        c = c.parent;\n      else\n        return null;\n    }\n  }\n\n  void setDoc(DocBuilder.DocWrapper docWrapper) {\n    this.doc = docWrapper;\n  }\n\n\n  @Override\n  public SolrCore getSolrCore() {\n    return dataImporter == null ? null : dataImporter.getCore();\n  }\n\n\n  @Override\n  public Map<String, Object> getStats() {\n    return docBuilder != null ? docBuilder.importStatistics.getStatsSnapshot() : Collections.<String, Object>emptyMap();\n  }\n\n  @Override\n  public String getScript() {\n    if (dataImporter != null) {\n      Script script = dataImporter.getConfig().getScript();\n      return script == null ? null : script.getText();\n    }\n    return null;\n  }\n  \n  @Override\n  public String getScriptLanguage() {\n    if (dataImporter != null) {\n      Script script = dataImporter.getConfig().getScript();\n      return script == null ? null : script.getLanguage();\n    }\n    return null;\n  }\n\n  @Override\n  public void deleteDoc(String id) {\n    if(docBuilder != null){\n      docBuilder.writer.deleteDoc(id);\n    }\n  }\n\n<fim_suffix>  @Override\n  public void deleteDocByQuery(String query) {\n    if(docBuilder != null){\n      docBuilder.writer.deleteByQuery(query);\n    } \n  }\n\n  DocBuilder getDocBuilder(){\n    return docBuilder;\n  }\n  @Override\n  public Object resolve(String var) {\n    return resolver.resolve(var);\n  }\n\n  @Override\n  public String replaceTokens(String template) {\n    return resolver.replaceTokens(template);\n  }\n\n  public Exception getLastException() { return lastException; }\n\n  public void setLastException(Exception lastException) {this.lastException = lastException; }\n}<fim_middle>// function below has no smell\n"}