{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.pivot.wtk;\n\nimport org.apache.pivot.collections.Sequence;\nimport org.apache.pivot.util.ListenerList;\n\n/**\n * Window action mapping listener interface.\n */\n<fim_suffix>public interface WindowActionMappingListener {\n    /**\n     * Window action mapping listeners.\n     */\n    public static class Listeners extends ListenerList<WindowActionMappingListener>\n        implements WindowActionMappingListener {\n        @Override\n        public void actionMappingAdded(Window window) {\n            forEach(listener -> listener.actionMappingAdded(window));\n        }\n\n        @Override\n        public void actionMappingsRemoved(Window window, int index,\n            Sequence<Window.ActionMapping> removed) {\n            forEach(listener -> listener.actionMappingsRemoved(window, index, removed));\n        }\n\n        @Override\n        public void keyStrokeChanged(Window.ActionMapping actionMapping,\n            Keyboard.KeyStroke previousKeyStroke) {\n            forEach(listener -> listener.keyStrokeChanged(actionMapping, previousKeyStroke));\n        }\n\n        @Override\n        public void actionChanged(Window.ActionMapping actionMapping, Action previousAction) {\n            forEach(listener -> listener.actionChanged(actionMapping, previousAction));\n        }\n    }\n\n    /**\n     * Called when an action mapping has been added to a window.\n     *\n     * @param window The source of this event.\n     */\n    public void actionMappingAdded(Window window);\n\n    /**\n     * Called when action mappings have been removed from a window.\n     *\n     * @param window  The window that is affected.\n     * @param index   Starting index of the action mappings that were removed.\n     * @param removed The sequence of action mappings that were removed.\n     */\n    public void actionMappingsRemoved(Window window, int index,\n        Sequence<Window.ActionMapping> removed);\n\n    /**\n     * Called when an action mapping's keystroke has changed.\n     *\n     * @param actionMapping     The action mapping that has changed.\n     * @param previousKeyStroke The previous keystroke (if any) associated with this mapping.\n     */\n    public void keyStrokeChanged(Window.ActionMapping actionMapping,\n        Keyboard.KeyStroke previousKeyStroke);\n\n    /**\n     * Called when an action mapping's action has changed.\n     *\n     * @param actionMapping  The action mapping that has changed.\n     * @param previousAction The action previously associated with this mapping.\n     */\n    public void actionChanged(Window.ActionMapping actionMapping, Action previousAction);\n}<fim_middle>// class below has no smell\n"}