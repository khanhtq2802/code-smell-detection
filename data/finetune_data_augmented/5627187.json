{"text": "<fim_prefix>/*\n *\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\npackage org.apache.royale.compiler.ant.config;\n\nimport org.apache.tools.ant.types.Commandline;\n\n/**\n * Extends ConfigVariable to support setting boolean configuration\n * options.  Values of \"true\", \"yes\", and \"on\" are supported.\n */\n<fim_suffix>public final class ConfigBoolean extends ConfigVariable\n{\n    public ConfigBoolean(OptionSpec spec)\n    {\n        super(spec);\n\n        this.enabled = false;\n        this.isSet = false;\n    }\n\n    public ConfigBoolean(OptionSpec spec, boolean enabled)\n    {\n        super(spec);\n        this.set(enabled);\n    }\n    \n    private boolean enabled;\n    private boolean isSet;\n\n\n    public void set(boolean value)\n    {\n        this.enabled = value;\n        this.isSet = true;\n    }\n\n    public void set(String value)\n    {\n        this.enabled = parseValue(value);\n        this.isSet = true;\n    }\n\n    public boolean isSet()\n    {\n    \treturn isSet;\n    \t}\n\n    public void addToCommandline(Commandline cmdline)\n    {\n        if (isSet)\n            cmdline.createArgument(true).setValue(\"-\" + spec.getFullName() + \"=\" + enabled);\n    }\n\n    private boolean parseValue(String value)\n    {\n        return value.toLowerCase().matches(\"\\\\s*(true|yes|on)\\\\s*\");\n    }\n}<fim_middle>// class below is data class\n"}