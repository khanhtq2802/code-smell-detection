{"text": "<fim_prefix>/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.web.servlet.resource;\n\nimport java.util.Collections;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.springframework.core.io.Resource;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * A base class for a {@code ResourceTransformer} with an optional helper method\n * for resolving public links within a transformed resource.\n *\n * @author Brian Clozel\n * @author Rossen Stoyanchev\n * @author Juergen Hoeller\n * @since 4.1\n */\npublic abstract class ResourceTransformerSupport implements ResourceTransformer {\n\n\t@Nullable\n\tprivate ResourceUrlProvider resourceUrlProvider;\n\n\n\t/**\n\t * Configure a {@link ResourceUrlProvider} to use when resolving the public\n\t * URL of links in a transformed resource (e.g. import links in a CSS file).\n\t * This is required only for links expressed as full paths and not for\n\t * relative links.\n\t */\n\tpublic void setResourceUrlProvider(@Nullable ResourceUrlProvider resourceUrlProvider) {\n\t\tthis.resourceUrlProvider = resourceUrlProvider;\n\t}\n\n\t/**\n\t * Return the configured {@code ResourceUrlProvider}.\n\t */\n\t@Nullable\n\tpublic ResourceUrlProvider getResourceUrlProvider() {\n\t\treturn this.resourceUrlProvider;\n\t}\n\n\n\t/**\n\t * A transformer can use this method when a resource being transformed\n\t * contains links to other resources. Such links need to be replaced with the\n\t * public facing link as determined by the resource resolver chain (e.g. the\n\t * public URL may have a version inserted).\n\t * @param resourcePath the path to a resource that needs to be re-written\n\t * @param request the current request\n\t * @param resource the resource being transformed\n\t * @param transformerChain the transformer chain\n\t * @return the resolved URL, or {@code} if not resolvable\n\t */\n\t@Nullable\n\tprotected String resolveUrlPath(String resourcePath, HttpServletRequest request,\n\t\t\tResource resource, ResourceTransformerChain transformerChain) {\n\n\t\tif (resourcePath.startsWith(\"/\")) {\n\t\t\t// full resource path\n\t\t\tResourceUrlProvider urlProvider = findResourceUrlProvider(request);\n\t\t\treturn (urlProvider != null ? urlProvider.getForRequestUrl(request, resourcePath) : null);\n\t\t}\n\t\telse {\n\t\t\t// try resolving as relative path\n\t\t\treturn transformerChain.getResolverChain().resolveUrlPath(\n\t\t\t\t\tresourcePath, Collections.singletonList(resource));\n\t\t}\n\t}\n\n\t/**\n\t * Transform the given relative request path to an absolute path,\n\t * taking the path of the given request as a point of reference.\n\t * The resulting path is also cleaned from sequences like \"path/..\".\n\t * @param path the relative path to transform\n\t * @param request the referer request\n\t * @return the absolute request path for the given resource path\n\t */\n\tprotected String toAbsolutePath(String path, HttpServletRequest request) {\n\t\tString absolutePath = path;\n\t\tif (!path.startsWith(\"/\")) {\n\t\t\tResourceUrlProvider urlProvider = findResourceUrlProvider(request);\n\t\t\tAssert.state(urlProvider != null, \"No ResourceUrlProvider\");\n\t\t\tString requestPath = urlProvider.getUrlPathHelper().getRequestUri(request);\n\t\t\tabsolutePath = StringUtils.applyRelativePath(requestPath, path);\n\t\t}\n\t\treturn StringUtils.cleanPath(absolutePath);\n\t}\n\n<fim_suffix>\t@Nullable\n\tprivate ResourceUrlProvider findResourceUrlProvider(HttpServletRequest request) {\n\t\tif (this.resourceUrlProvider != null) {\n\t\t\treturn this.resourceUrlProvider;\n\t\t}\n\t\treturn (ResourceUrlProvider) request.getAttribute(\n\t\t\t\tResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR);\n\t}\n\n}<fim_middle>// function below has no smell\n"}