{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.ode.bpel.compiler.wsdl;\n\nimport java.util.Map;\n\nimport javax.wsdl.Binding;\nimport javax.wsdl.BindingFault;\nimport javax.wsdl.BindingInput;\nimport javax.wsdl.BindingOperation;\nimport javax.wsdl.BindingOutput;\nimport javax.wsdl.Definition;\nimport javax.wsdl.Fault;\nimport javax.wsdl.Input;\nimport javax.wsdl.Message;\nimport javax.wsdl.Operation;\nimport javax.wsdl.Output;\nimport javax.wsdl.Part;\nimport javax.wsdl.Port;\nimport javax.wsdl.PortType;\nimport javax.wsdl.Service;\nimport javax.wsdl.Types;\nimport javax.wsdl.WSDLException;\nimport javax.wsdl.factory.WSDLFactory;\n\nimport org.w3c.dom.Element;\n\n/**\n * Little hack to solve the disfunctional WSDL4J extension mechanism. Without this,\n * WSDL4J will attempt to do Class.forName to get the WSDLFactory, which will break\n * if WSDL4J is loaded from a parent class-loader (as it often is, e.g. in ServiceMix).\n *\n * @author Maciej Szefler - m s z e f l e r @ g m a i l . c o m\n *\n */\n<fim_suffix>class WSDLReaderImpl extends com.ibm.wsdl.xml.WSDLReaderImpl {\n\n    private WSDLFactory _localFactory;\n\n    WSDLReaderImpl(WSDLFactory factory) {\n        _localFactory = factory;\n    }\n\n    @Override\n    protected WSDLFactory getWSDLFactory() throws WSDLException {\n        return _localFactory;\n    }\n\n    @Override\n    public Binding parseBinding(Element bindingEl, Definition def) throws WSDLException {\n        Binding binding = super.parseBinding(bindingEl, def);\n        binding.setDocumentationElement(null);\n        return binding;\n    }\n\n    @Override\n    public BindingFault parseBindingFault(Element bindingFaultEl, Definition def) throws WSDLException {\n        BindingFault bindingFault = super.parseBindingFault(bindingFaultEl, def);\n        bindingFault.setDocumentationElement(null);\n        return bindingFault;\n    }\n\n    @Override\n    public BindingInput parseBindingInput(Element bindingInputEl, Definition def) throws WSDLException {\n        BindingInput bindingInput = super.parseBindingInput(bindingInputEl, def);\n        bindingInput.setDocumentationElement(null);\n        return bindingInput;\n    }\n\n    @Override\n    public BindingOperation parseBindingOperation(Element bindingOperationEl, PortType portType, Definition def) throws WSDLException {\n        BindingOperation bindingOperation = super.parseBindingOperation(bindingOperationEl, portType, def);\n        bindingOperation.setDocumentationElement(null);\n        return bindingOperation;\n    }\n\n    @Override\n    public BindingOutput parseBindingOutput(Element bindingOutputEl, Definition def) throws WSDLException {\n        BindingOutput BindingOutput = super.parseBindingOutput(bindingOutputEl, def);\n        BindingOutput.setDocumentationElement(null);\n        return BindingOutput;\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    @Override\n    public Definition parseDefinitions(String documentBaseURI, Element defEl, Map importedDefs) throws WSDLException {\n        Definition definition = super.parseDefinitions(documentBaseURI, defEl, importedDefs);\n        definition.setDocumentationElement(null);\n        return definition;\n    }\n\n    @Override\n    public Fault parseFault(Element faultEl, Definition def) throws WSDLException {\n        Fault fault = super.parseFault(faultEl, def);\n        fault.setDocumentationElement(null);\n        return fault;\n    }\n\n    @Override\n    public Input parseInput(Element inputEl, Definition def) throws WSDLException {\n        Input input = super.parseInput(inputEl, def);\n        input.setDocumentationElement(null);\n        return input;\n    }\n\n    @Override\n    public Message parseMessage(Element msgEl, Definition def) throws WSDLException {\n        Message message = super.parseMessage(msgEl, def);\n        message.setDocumentationElement(null);\n        return message;\n    }\n\n    @Override\n    public Operation parseOperation(Element opEl, PortType portType, Definition def) throws WSDLException {\n        Operation operation = super.parseOperation(opEl, portType, def);\n        operation.setDocumentationElement(null);\n        return operation;\n    }\n\n    @Override\n    public Output parseOutput(Element outputEl, Definition def) throws WSDLException {\n        Output output = super.parseOutput(outputEl, def);\n        output.setDocumentationElement(null);\n        return output;\n    }\n\n    @Override\n    public Part parsePart(Element partEl, Definition def) throws WSDLException {\n        Part part = super.parsePart(partEl, def);\n        part.setDocumentationElement(null);\n        return part;\n    }\n\n    @Override\n    public Port parsePort(Element portEl, Definition def) throws WSDLException {\n        Port Port = super.parsePort(portEl, def);\n        Port.setDocumentationElement(null);\n        return Port;\n    }\n\n    @Override\n    public PortType parsePortType(Element portTypeEl, Definition def) throws WSDLException {\n        PortType portType = super.parsePortType(portTypeEl, def);\n        portType.setDocumentationElement(null);\n        return portType;\n    }\n\n    @Override\n    public Service parseService(Element serviceEl, Definition def) throws WSDLException {\n        Service service = super.parseService(serviceEl, def);\n        service.setDocumentationElement(null);\n        return service;\n    }\n\n    @Override\n    public Types parseTypes(Element typesEl, Definition def) throws WSDLException {\n        Types types = super.parseTypes(typesEl, def);\n        types.setDocumentationElement(null);\n        return types;\n    }\n}<fim_middle>// class below has no smell\n"}