{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.servicecomb.foundation.protobuf.internal.schema.serializer.repeated.impl.doubles;\n\nimport java.util.Collection;\n\nimport org.apache.servicecomb.foundation.protobuf.internal.ProtoUtils;\nimport org.apache.servicecomb.foundation.protobuf.internal.bean.PropertyDescriptor;\nimport org.apache.servicecomb.foundation.protobuf.internal.schema.serializer.repeated.AbstractPrimitiveWriters;\nimport org.apache.servicecomb.foundation.protobuf.internal.schema.serializer.repeated.RepeatedPrimitiveWriteSchemas;\n\nimport io.protostuff.OutputEx;\nimport io.protostuff.compiler.model.Field;\nimport io.protostuff.runtime.FieldSchema;\n\npublic class DoubleNotPackedWriteSchemas {\n<fim_suffix>  private static class DoubleNotPackedWriters extends AbstractPrimitiveWriters<double[], Double> {\n    public DoubleNotPackedWriters(Field protoField) {\n      super(protoField);\n\n      primitiveArrayWriter = (OutputEx output, double[] array) -> {\n        for (double element : array) {\n          output.writeDouble(tag, tagSize, element);\n        }\n      };\n\n      arrayWriter = (OutputEx output, Double[] array) -> {\n        for (Double element : array) {\n          if (element != null) {\n            output.writeDouble(tag, tagSize, element);\n            continue;\n          }\n\n          ProtoUtils.throwNotSupportNullElement(protoField);\n        }\n      };\n\n      collectionWriter = (OutputEx output, Collection<Double> collection) -> {\n        for (Double element : collection) {\n          if (element != null) {\n            output.writeDouble(tag, tagSize, element);\n            continue;\n          }\n\n          ProtoUtils.throwNotSupportNullElement(protoField);\n        }\n      };\n\n      stringArrayWriter = (OutputEx output, String[] array) -> {\n        for (String element : array) {\n          if (element != null) {\n            double parsedValue = Double.parseDouble(element);\n            output.writeDouble(tag, tagSize, parsedValue);\n            continue;\n          }\n\n          ProtoUtils.throwNotSupportNullElement(protoField);\n        }\n      };\n    }\n  }\n\n  public static <T> FieldSchema<T> create(Field protoField, PropertyDescriptor propertyDescriptor) {\n    return RepeatedPrimitiveWriteSchemas.create(protoField, propertyDescriptor, new DoubleNotPackedWriters(protoField));\n  }\n}<fim_middle>// class below has no smell\n"}