{"text": "<fim_prefix>/**\n * Autogenerated by Thrift Compiler (0.9.3)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage org.apache.hadoop.hive.metastore.api;\nimport org.apache.thrift.scheme.IScheme;\nimport org.apache.thrift.scheme.SchemeFactory;\nimport org.apache.thrift.scheme.StandardScheme;\nimport org.apache.thrift.scheme.TupleScheme;\nimport org.apache.thrift.protocol.TTupleProtocol;\nimport org.apache.thrift.protocol.TProtocolException;\nimport org.apache.thrift.EncodingUtils;\nimport org.apache.thrift.TException;\nimport org.apache.thrift.async.AsyncMethodCallback;\nimport org.apache.thrift.server.AbstractNonblockingServer.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.EnumMap;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.EnumSet;\nimport java.util.Collections;\nimport java.util.BitSet;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\nimport javax.annotation.Generated;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})\n@Generated(value = \"Autogenerated by Thrift Compiler (0.9.3)\")\n@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class AbortTxnsRequest implements org.apache.thrift.TBase<AbortTxnsRequest, AbortTxnsRequest._Fields>, java.io.Serializable, Cloneable, Comparable<AbortTxnsRequest> {\n  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"AbortTxnsRequest\");\n  private static final org.apache.thrift.protocol.TField TXN_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"txn_ids\", org.apache.thrift.protocol.TType.LIST, (short)1);\n  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n  static {\n    schemes.put(StandardScheme.class, new AbortTxnsRequestStandardSchemeFactory());\n    schemes.put(TupleScheme.class, new AbortTxnsRequestTupleSchemeFactory());\n  }\n  private List<Long> txn_ids; // required\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n    TXN_IDS((short)1, \"txn_ids\");\n    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n    static {\n      for (_Fields field : EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // TXN_IDS\n          return TXN_IDS;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final String _fieldName;\n<fim_suffix>    _Fields(short thriftId, String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.TXN_IDS, new org.apache.thrift.meta_data.FieldMetaData(\"txn_ids\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, \n            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));\n    metaDataMap = Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AbortTxnsRequest.class, metaDataMap);\n  }\n  public AbortTxnsRequest() {\n  }\n  public AbortTxnsRequest(\n    List<Long> txn_ids)\n  {\n    this();\n    this.txn_ids = txn_ids;\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public AbortTxnsRequest(AbortTxnsRequest other) {\n    if (other.isSetTxn_ids()) {\n      List<Long> __this__txn_ids = new ArrayList<Long>(other.txn_ids);\n      this.txn_ids = __this__txn_ids;\n    }\n  }\n  public AbortTxnsRequest deepCopy() {\n    return new AbortTxnsRequest(this);\n  }\n  @Override\n  public void clear() {\n    this.txn_ids = null;\n  }\n  public int getTxn_idsSize() {\n    return (this.txn_ids == null) ? 0 : this.txn_ids.size();\n  }\n  public java.util.Iterator<Long> getTxn_idsIterator() {\n    return (this.txn_ids == null) ? null : this.txn_ids.iterator();\n  }\n  public void addToTxn_ids(long elem) {\n    if (this.txn_ids == null) {\n      this.txn_ids = new ArrayList<Long>();\n    }\n    this.txn_ids.add(elem);\n  }\n  public List<Long> getTxn_ids() {\n    return this.txn_ids;\n  }\n  public void setTxn_ids(List<Long> txn_ids) {\n    this.txn_ids = txn_ids;\n  }\n  public void unsetTxn_ids() {\n    this.txn_ids = null;\n  }\n  /** Returns true if field txn_ids is set (has been assigned a value) and false otherwise */\n  public boolean isSetTxn_ids() {\n    return this.txn_ids != null;\n  }\n  public void setTxn_idsIsSet(boolean value) {\n    if (!value) {\n      this.txn_ids = null;\n    }\n  }\n  public void setFieldValue(_Fields field, Object value) {\n    switch (field) {\n    case TXN_IDS:\n      if (value == null) {\n        unsetTxn_ids();\n      } else {\n        setTxn_ids((List<Long>)value);\n      }\n      break;\n    }\n  }\n  public Object getFieldValue(_Fields field) {\n    switch (field) {\n    case TXN_IDS:\n      return getTxn_ids();\n    }\n    throw new IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new IllegalArgumentException();\n    }\n    switch (field) {\n    case TXN_IDS:\n      return isSetTxn_ids();\n    }\n    throw new IllegalStateException();\n  }\n  @Override\n  public boolean equals(Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof AbortTxnsRequest)\n      return this.equals((AbortTxnsRequest)that);\n    return false;\n  }\n  public boolean equals(AbortTxnsRequest that) {\n    if (that == null)\n      return false;\n    boolean this_present_txn_ids = true && this.isSetTxn_ids();\n    boolean that_present_txn_ids = true && that.isSetTxn_ids();\n    if (this_present_txn_ids || that_present_txn_ids) {\n      if (!(this_present_txn_ids && that_present_txn_ids))\n        return false;\n      if (!this.txn_ids.equals(that.txn_ids))\n        return false;\n    }\n    return true;\n  }\n  @Override\n  public int hashCode() {\n    List<Object> list = new ArrayList<Object>();<fim_middle>// function below has no smell\n"}