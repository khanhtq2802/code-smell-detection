{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ambari.server.agent.stomp;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.concurrent.locks.ReentrantLock;\n\nimport org.apache.ambari.server.agent.stomp.dto.HashAndTimestampIgnoreMixIn;\nimport org.apache.ambari.server.agent.stomp.dto.HashIgnoreMixIn;\nimport org.apache.ambari.server.agent.stomp.dto.Hashable;\nimport org.apache.ambari.server.events.AgentConfigsUpdateEvent;\nimport org.apache.commons.lang.StringUtils;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n * Is used to hash generating for event\n * @param <T> event with hash to control version\n */\npublic abstract class AgentDataHolder<T extends Hashable> {\n  protected final ReentrantLock updateLock = new ReentrantLock();\n  private final static ObjectMapper MAPPER = new ObjectMapper();\n  static {\n    MAPPER.addMixIn(Hashable.class, HashIgnoreMixIn.class);\n    MAPPER.addMixIn(AgentConfigsUpdateEvent.class, HashAndTimestampIgnoreMixIn.class);\n  }\n\n  protected abstract T getEmptyData();\n\n  protected void regenerateDataIdentifiers(T data) {\n    data.setHash(getHash(data));\n  }\n\n  protected boolean isIdentifierValid(T data) {\n    return StringUtils.isNotEmpty(data.getHash());\n  }\n\n  protected String getHash(T data) {\n    return getHash(data, \"\");\n  }\n\n<fim_suffix>  protected String getHash(T data, String salt) {\n    String json = null;\n    try {\n      json = MAPPER.writeValueAsString(data);\n    } catch (JsonProcessingException e) {\n      throw new RuntimeException(\"Error during mapping message to calculate hash\", e);\n    }\n    String generatedPassword = null;\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n      md.update(salt.getBytes(\"UTF-8\"));\n      byte[] bytes = md.digest(json.getBytes(\"UTF-8\"));\n      StringBuilder sb = new StringBuilder();\n      for (byte b : bytes) {\n        sb.append(Integer.toString((b & 0xff) + 0x100, 16).substring(1));\n      }\n      generatedPassword = sb.toString();\n    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n      e.printStackTrace();\n    }\n    return generatedPassword;\n  }\n}<fim_middle>// function below has no smell\n"}