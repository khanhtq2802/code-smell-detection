{"text": "<fim_prefix>\t\t@Nullable Boolean ignoreCase = null;\n\t\tPropertyValueTransformer valueTransformer = NoOpPropertyValueTransformer.INSTANCE;\n\t\t/**\n\t\t * Creates an unconfigured {@link GenericPropertyMatcher}.\n\t\t */\n\t\tpublic GenericPropertyMatcher() {}\n\t\t/**\n\t\t * Creates a new {@link GenericPropertyMatcher} with a {@link StringMatcher} and {@code ignoreCase}.\n\t\t *\n\t\t * @param stringMatcher must not be {@literal null}.\n\t\t * @param ignoreCase\n\t\t * @return\n\t\t */\n\t\tpublic static GenericPropertyMatcher of(StringMatcher stringMatcher, boolean ignoreCase) {\n\t\t\treturn new GenericPropertyMatcher().stringMatcher(stringMatcher).ignoreCase(ignoreCase);\n\t\t}\n\t\t/**\n\t\t * Creates a new {@link GenericPropertyMatcher} with a {@link StringMatcher} and {@code ignoreCase}.\n\t\t *\n\t\t * @param stringMatcher must not be {@literal null}.\n\t\t * @return\n\t\t */\n\t\tpublic static GenericPropertyMatcher of(StringMatcher stringMatcher) {\n\t\t\treturn new GenericPropertyMatcher().stringMatcher(stringMatcher);\n\t\t}\n\t\t/**\n\t\t * Sets ignores case to {@literal true}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic GenericPropertyMatcher ignoreCase() {\n\t\t\tthis.ignoreCase = true;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets ignores case to {@code ignoreCase}.\n\t\t *\n\t\t * @param ignoreCase\n\t\t * @return\n\t\t */\n\t\tpublic GenericPropertyMatcher ignoreCase(boolean ignoreCase) {\n\t\t\tthis.ignoreCase = ignoreCase;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets ignores case to {@literal false}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic GenericPropertyMatcher caseSensitive() {\n\t\t\tthis.ignoreCase = false;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets string matcher to {@link StringMatcher#CONTAINING}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic GenericPropertyMatcher contains() {\n\t\t\tthis.stringMatcher = StringMatcher.CONTAINING;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets string matcher to {@link StringMatcher#ENDING}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic GenericPropertyMatcher endsWith() {\n\t\t\tthis.stringMatcher = StringMatcher.ENDING;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets string matcher to {@link StringMatcher#STARTING}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic GenericPropertyMatcher startsWith() {\n\t\t\tthis.stringMatcher = StringMatcher.STARTING;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets string matcher to {@link StringMatcher#EXACT}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic GenericPropertyMatcher exact() {\n\t\t\tthis.stringMatcher = StringMatcher.EXACT;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets string matcher to {@link StringMatcher#DEFAULT}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic GenericPropertyMatcher storeDefaultMatching() {\n\t\t\tthis.stringMatcher = StringMatcher.DEFAULT;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets string matcher to {@link StringMatcher#REGEX}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic GenericPropertyMatcher regex() {\n\t\t\tthis.stringMatcher = StringMatcher.REGEX;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets string matcher to {@code stringMatcher}.\n\t\t *\n\t\t * @param stringMatcher must not be {@literal null}.\n\t\t * @return\n\t\t */\n\t\tpublic GenericPropertyMatcher stringMatcher(StringMatcher stringMatcher) {\n\t\t\tAssert.notNull(stringMatcher, \"StringMatcher must not be null!\");\n\t\t\tthis.stringMatcher = stringMatcher;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets the {@link PropertyValueTransformer} to {@code propertyValueTransformer}.\n\t\t *\n\t\t * @param propertyValueTransformer must not be {@literal null}.\n\t\t * @return\n\t\t */\n\t\tpublic GenericPropertyMatcher transform(PropertyValueTransformer propertyValueTransformer) {\n\t\t\tAssert.notNull(propertyValueTransformer, \"PropertyValueTransformer must not be null!\");\n\t\t\tthis.valueTransformer = propertyValueTransformer;\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * Predefined property matchers to create a {@link GenericPropertyMatcher}.\n\t *\n\t * @author Mark Paluch\n\t */\n\tclass GenericPropertyMatchers {\n\t\t/**\n\t\t * Creates a {@link GenericPropertyMatcher} that matches string case insensitive.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic static GenericPropertyMatcher ignoreCase() {\n\t\t\treturn new GenericPropertyMatcher().ignoreCase();\n\t\t}\n\t\t/**\n\t\t * Creates a {@link GenericPropertyMatcher} that matches string case sensitive.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic static GenericPropertyMatcher caseSensitive() {\n\t\t\treturn new GenericPropertyMatcher().caseSensitive();\n\t\t}\n\t\t/**\n\t\t * Creates a {@link GenericPropertyMatcher} that matches string using {@link StringMatcher#CONTAINING}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic static GenericPropertyMatcher contains() {\n\t\t\treturn new GenericPropertyMatcher().contains();\n\t\t}\n\t\t/**\n\t\t * Creates a {@link GenericPropertyMatcher} that matches string using {@link StringMatcher#ENDING}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic static GenericPropertyMatcher endsWith() {\n\t\t\treturn new GenericPropertyMatcher().endsWith();\n\t\t}\n\t\t/**\n\t\t * Creates a {@link GenericPropertyMatcher} that matches string using {@link StringMatcher#STARTING}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic static GenericPropertyMatcher startsWith() {\n\t\t\treturn new GenericPropertyMatcher().startsWith();\n\t\t}\n\t\t/**\n\t\t * Creates a {@link GenericPropertyMatcher} that matches string using {@link StringMatcher#EXACT}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic static GenericPropertyMatcher exact() {\n\t\t\treturn new GenericPropertyMatcher().exact();\n\t\t}\n\t\t/**\n\t\t * Creates a {@link GenericPropertyMatcher} that matches string using {@link StringMatcher#DEFAULT}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic static GenericPropertyMatcher storeDefaultMatching() {\n\t\t\treturn new GenericPropertyMatcher().storeDefaultMatching();\n\t\t}\n\t\t/**\n\t\t * Creates a {@link GenericPropertyMatcher} that matches string using {@link StringMatcher#REGEX}.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic static GenericPropertyMatcher regex() {\n\t\t\treturn new GenericPropertyMatcher().regex();\n\t\t}\n\t}\n\t/**\n\t * Match modes for treatment of {@link String} values.\n\t *\n\t * @author Christoph Strobl\n\t * @author Jens Schauder\n\t */\n\tenum StringMatcher {\n\t\t/**\n\t\t * Store specific default.\n\t\t */\n\t\tDEFAULT,\n\t\t/**\n\t\t * Matches the exact string\n\t\t */\n\t\tEXACT,\n\t\t/**\n\t\t * Matches string starting with pattern\n\t\t */\n\t\tSTARTING,\n\t\t/**\n\t\t * Matches string ending with pattern\n\t\t */\n\t\tENDING,\n\t\t/**\n\t\t * Matches string containing pattern\n\t\t */\n\t\tCONTAINING,\n\t\t/**\n\t\t * Treats strings as regular expression patterns\n\t\t */\n\t\tREGEX;\n\t}\n\t/**\n\t * Allows to transform the property value before it is used in the query.\n\t */\n\tinterface PropertyValueTransformer extends Function<Optional<Object>, Optional<Object>> {}\n\t/**\n\t * @author Christoph Strobl\n\t * @author Oliver Gierke\n\t * @since 1.12\n\t */\n\tenum NoOpPropertyValueTransformer implements ExampleMatcher.PropertyValueTransformer {\n\t\tINSTANCE;\n\t\t/*\n\t\t * (non-Javadoc)\n\t\t * @see java.util.function.Function#apply(java.lang.Object)\n\t\t */\n\t\t@Override\n\t\t@SuppressWarnings(\"null\")\n\t\tpublic Optional<Object> apply(Optional<Object> source) {\n\t\t\treturn source;\n\t\t}\n\t}\n\t/**\n\t * Define specific property handling for a Dot-Path.\n\t *\n\t * @author Christoph Strobl\n\t * @author Mark Paluch\n\t * @since 1.12\n\t */\n\t@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n\t@RequiredArgsConstructor(access = AccessLevel.PRIVATE)\n\t@EqualsAndHashCode\n\tclass PropertySpecifier {\n\t\tString path;\n\t\t@Nullable StringMatcher stringMatcher;\n\t\t@Nullable Boolean ignoreCase;\n\t\tPropertyValueTransformer valueTransformer;\n\t\t/**\n\t\t * Creates new {@link PropertySpecifier} for given path.\n\t\t *\n\t\t * @param path Dot-Path to the property. Must not be {@literal null}.\n\t\t */\n<fim_suffix>\t\tPropertySpecifier(String path) {\n\t\t\tAssert.hasText(path, \"Path must not be null/empty!\");\n\t\t\tthis.path = path;\n\t\t\tthis.stringMatcher = null;\n\t\t\tthis.ignoreCase = null;\n\t\t\tthis.valueTransformer = NoOpPropertyValueTransformer.INSTANCE;\n\t\t}<fim_middle>// function below has no smell\n"}