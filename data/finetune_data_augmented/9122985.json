{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2004, 2005 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *  Actuate Corporation  - initial API and implementation\n *******************************************************************************/\n\npackage org.eclipse.birt.data.engine.olap.data.impl;\n\nimport java.util.logging.Logger;\n\n/**\n * \n */\n\npublic class Traversalor\n{\n\n\tprivate int cursor = -1;\n\tprivate int length = 0;\n\tprivate int maxLength = 1;\n\tprivate boolean valid = true;\n\n\tprivate int[] positionValue;\n\tprivate int[] lengthArray;\n\tprivate int[] current;\n\n\tprivate static Logger logger = Logger.getLogger( Traversalor.class.getName( ) );\n\n\t/**\n\t * \n\t * @param lengthArray\n\t */\n\tpublic Traversalor( int[] lengthArray )\n\t{\n\t\tlogger.entering( Traversalor.class.getName( ),\n\t\t\t\t\"Traversalor\",\n\t\t\t\tlengthArray );\n\t\tthis.lengthArray = lengthArray;\n\t\tthis.length = lengthArray.length;\n\t\tthis.positionValue = new int[length];\n\t\tthis.current = new int[length];\n\n\t\tinit( );\n\t\tlogger.exiting( Traversalor.class.getName( ), \"Traversalor\" );\n\t}\n\n\t/**\n\t * \n\t *\n\t */\n\tprivate void init( )\n\t{\n\t\tcheckSyntax( );\n\t\tcomputeMaxLength( );\n\t\tcomputePositionValue( );\n\t}\n\n\t/**\n\t * \n\t *\n\t */\n\tprivate void checkSyntax( )\n\t{\n\t\tfor ( int i = 0; i < length; i++ )\n\t\t{\n\t\t\tif ( lengthArray[i] <= 0 )\n\t\t\t{\n\t\t\t\tvalid = false;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \n\t *\n\t */\n\tprivate void computeMaxLength( )\n\t{\n\t\tfor ( int i = 0; i < length; i++ )\n\t\t{\n\t\t\tmaxLength *= lengthArray[i];\n\t\t}\n\t}\n\n\t/**\n\t * \n\t *\n\t */\n\tprivate void computePositionValue( )\n\t{\n\t\tfor ( int i = length - 1; i >= 0; i-- )\n\t\t{\n\t\t\tpositionValue[i] = 1;\n\n\t\t\tif ( i != length - 1 )\n\t\t\t{\n\t\t\t\tfor ( int j = length - 1; j > i; j-- )\n\t\t\t\t{\n\t\t\t\t\tpositionValue[i] *= lengthArray[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @return\n\t */\n\tpublic boolean next( )\n\t{\n\t\tcheckValid( );\n\n\t\tif ( !valid )\n\t\t\treturn false;\n\n\t\tcursor++;\n\t\tcomputeCurrent( );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * \n\t *\n\t */\n<fim_suffix>\tprivate void checkValid( )\n\t{\n\t\tif ( !valid )\n\t\t\treturn;\n\n\t\tif ( cursor == maxLength - 1 )\n\t\t\tvalid = false;\n\t}\n\n\t/**\n\t * \n\t *\n\t */\n\tprivate void computeCurrent( )\n\t{\n\t\tint position = cursor;\n\t\tfor ( int i = 0; i < length; i++ )\n\t\t{\n\t\t\tcurrent[i] = position / positionValue[i];\n\t\t\tif ( current[i] > 0 )\n\t\t\t\tposition = position % positionValue[i];\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @return\n\t */\n\tpublic int[] getIntArray( )\n\t{\n\t\treturn current;\n\t}\n\n\tpublic int getInt( int index )\n\t{\n\t\treturn current[index];\n\t}\n\n//\tpublic static void main( String[] args )\n//\t{\n//\t\tint[] testArray = {\n//\t\t\t\t5, 3, 8\n//\t\t};\n//\t\tTraversalor testTraversalor = new Traversalor( testArray );\n//\t\tint i = 0;\n//\t\t{\n//\t\t\twhile ( testTraversalor.next( ) )\n//\t\t\t{\n//\t\t\t\tint[] test = testTraversalor.getIntArray( );\n//\t\t\t\tfor ( int j = 0; j < test.length; j++ )\n//\t\t\t\t\tSystem.out.print( test[j] + \"\\t\" );\n//\t\t\t\tSystem.out.println( i++ );\n//\t\t\t}\n//\t\t}\n//\t}\n}<fim_middle>// function below has no smell\n"}