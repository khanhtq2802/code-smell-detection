{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage org.apache.oozie.servlet;\n\nimport org.apache.oozie.util.XLog;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\n/**\n * Filter that resolves the requester hostname.\n */\n<fim_suffix>public class HostnameFilter implements Filter {\n    private static final XLog LOG = XLog.getLog(HostnameFilter.class);\n\n    static final ThreadLocal<String> HOSTNAME_TL = new ThreadLocal<String>();\n\n    /**\n     * Initializes the filter.\n     * <p>\n     * This implementation is a NOP.\n     *\n     * @param config filter configuration.\n     *\n     * @throws ServletException thrown if the filter could not be initialized.\n     */\n    @Override\n    public void init(FilterConfig config) throws ServletException {\n    }\n\n    /**\n     * Resolves the requester hostname and delegates the request to the chain.\n     * <p>\n     * The requester hostname is available via the {@link #get} method.\n     *\n     * @param request servlet request.\n     * @param response servlet response.\n     * @param chain filter chain.\n     *\n     * @throws IOException thrown if an IO error occurrs.\n     * @throws ServletException thrown if a servet error occurrs.\n     */\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n        throws IOException, ServletException {\n        try {\n            String hostname;\n            try {\n                String address = request.getRemoteAddr();\n                if (address != null) {\n                    hostname = InetAddress.getByName(address).getCanonicalHostName();\n                } else {\n                    LOG.warn(\"Request remote address is NULL\");\n                    hostname = \"???\";\n                }\n            } catch (UnknownHostException ex) {\n                LOG.warn(\"Request remote address could not be resolved, {0}\", ex.toString(), ex);\n                hostname = \"???\";\n            }\n            HOSTNAME_TL.set(hostname);\n            XLog.Info.get().clear();\n            chain.doFilter(request, response);\n        }\n        finally {\n            HOSTNAME_TL.remove();\n        }\n    }\n\n    /**\n     * Returns the requester hostname.\n     *\n     * @return the requester hostname.\n     */\n    public static String get() {\n        return HOSTNAME_TL.get();\n    }\n\n    /**\n     * Destroys the filter.\n     * <p>\n     * This implementation is a NOP.\n     */\n    @Override\n    public void destroy() {\n    }\n}<fim_middle>// class below has no smell\n"}