{"text": "<fim_prefix>/*\n * Copyright Red Hat Inc. and/or its affiliates and other contributors\n * as indicated by the authors tag. All rights reserved.\n *\n * This copyrighted material is made available to anyone wishing to use,\n * modify, copy, or redistribute it subject to the terms and conditions\n * of the GNU General Public License version 2.\n * \n * This particular file is subject to the \"Classpath\" exception as provided in the \n * LICENSE file that accompanied this code.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT A\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License,\n * along with this distribution; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n * MA  02110-1301, USA.\n */\npackage org.eclipse.ceylon.langtools.tools.javac.processing.wrappers;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.net.URI;\n\nimport org.eclipse.ceylon.javax.tools.FileObject;\n\n<fim_suffix>public class FileObjectFacade implements javax.tools.FileObject {\n\n    protected FileObject f;\n\n    public FileObjectFacade(FileObject f) {\n        this.f = f;\n    }\n\n    @Override\n    public boolean delete() {\n        return f.delete();\n    }\n\n    @Override\n    public CharSequence getCharContent(boolean arg0) throws IOException {\n        return f.getCharContent(arg0);\n    }\n\n    @Override\n    public long getLastModified() {\n        return f.getLastModified();\n    }\n\n    @Override\n    public String getName() {\n        return f.getName();\n    }\n\n    @Override\n    public InputStream openInputStream() throws IOException {\n        return f.openInputStream();\n    }\n\n    @Override\n    public OutputStream openOutputStream() throws IOException {\n        return f.openOutputStream();\n    }\n\n    @Override\n    public Reader openReader(boolean arg0) throws IOException {\n        return f.openReader(arg0);\n    }\n\n    @Override\n    public Writer openWriter() throws IOException {\n        return f.openWriter();\n    }\n\n    @Override\n    public URI toUri() {\n        return f.toUri();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if(obj instanceof FileObjectFacade == false)\n            return false;\n        return f.equals(((FileObjectFacade)obj).f);\n    }\n    \n    @Override\n    public int hashCode() {\n        return f.hashCode();\n    }\n    \n    @Override\n    public String toString() {\n        return f.toString();\n    }\n}<fim_middle>// class below has no smell\n"}