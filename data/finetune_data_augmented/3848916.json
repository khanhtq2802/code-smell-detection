{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.apache.ivy.plugins.repository.file;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.ivy.plugins.repository.AbstractRepository;\nimport org.apache.ivy.plugins.repository.RepositoryCopyProgressListener;\nimport org.apache.ivy.plugins.repository.Resource;\nimport org.apache.ivy.plugins.repository.TransferEvent;\nimport org.apache.ivy.util.Checks;\nimport org.apache.ivy.util.FileUtil;\n\npublic class FileRepository extends AbstractRepository {\n    private RepositoryCopyProgressListener progress = new RepositoryCopyProgressListener(this);\n\n    private File baseDir;\n\n    private boolean local = true;\n\n    public FileRepository() {\n        baseDir = null;\n    }\n\n    public FileRepository(File basedir) {\n        setBaseDir(basedir);\n    }\n\n    public Resource getResource(String source) throws IOException {\n        return new FileResource(this, getFile(source));\n    }\n\n    public void get(String source, File destination) throws IOException {\n        fireTransferInitiated(getResource(source), TransferEvent.REQUEST_GET);\n        copy(getFile(source), destination, true);\n    }\n\n    public void put(File source, String destination, boolean overwrite) throws IOException {\n        fireTransferInitiated(getResource(destination), TransferEvent.REQUEST_PUT);\n        copy(source, getFile(destination), overwrite);\n    }\n\n    public void move(File src, File dest) throws IOException {\n        if (!src.renameTo(dest)) {\n            throw new IOException(\"impossible to move '\" + src + \"' to '\" + dest + \"'\");\n        }\n    }\n\n    public void delete(File f) throws IOException {\n        if (!FileUtil.forceDelete(f)) {\n            throw new IOException(\"impossible to delete '\" + f + \"'\");\n        }\n    }\n\n    private void copy(File src, File destination, boolean overwrite) throws IOException {\n        try {\n            getProgressListener().setTotalLength(src.length());\n            if (!FileUtil.copy(src, destination, getProgressListener(), overwrite)) {\n                if (!overwrite && destination.exists()) {\n                    throw new IOException(\"file copy not done from \" + src + \" to \" + destination\n                            + \": destination already exists and overwrite is false\");\n                } else {\n                    throw new IOException(\"file copy not done from \" + src + \" to \" + destination);\n                }\n            }\n        } catch (IOException | RuntimeException ex) {\n            fireTransferError(ex);\n            throw ex;\n        } finally {\n            getProgressListener().setTotalLength(null);\n        }\n    }\n\n    protected RepositoryCopyProgressListener getProgressListener() {\n        return progress;\n    }\n\n    public List<String> list(String parent) throws IOException {\n        File dir = getFile(parent);\n        if (dir.exists() && dir.isDirectory()) {\n            String[] names = dir.list();\n            if (names != null) {\n                List<String> ret = new ArrayList<>(names.length);\n                for (String name : names) {\n                    ret.add(parent + getFileSeparator() + name);\n                }\n                return ret;\n            }\n        }\n        return null;\n    }\n\n    File getFile(String source) {\n        if (baseDir == null) {\n            return Checks.checkAbsolute(source, \"source\");\n        }\n        return FileUtil.resolveFile(baseDir, source);\n    }\n\n    public boolean isLocal() {\n        return local;\n    }\n\n<fim_suffix>    public void setLocal(boolean local) {\n        this.local = local;\n    }\n\n    public File getBaseDir() {\n        return baseDir;\n    }\n\n    public final void setBaseDir(File baseDir) {\n        Checks.checkAbsolute(baseDir, \"basedir\");\n        this.baseDir = baseDir;\n    }\n\n    public String standardize(String source) {\n        if (baseDir == null) {\n            return FileUtil.normalize(source).getPath();\n        }\n        return FileUtil.resolveFile(baseDir, source).getPath();\n    }\n\n    public String getFileSeparator() {\n        return File.separator;\n    }\n}<fim_middle>// function below has no smell\n"}