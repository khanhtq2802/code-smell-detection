{"text": "<fim_prefix>package org.springframework.roo.addon.cloud;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.apache.felix.scr.annotations.Component;\nimport org.apache.felix.scr.annotations.Reference;\nimport org.apache.felix.scr.annotations.ReferenceCardinality;\nimport org.apache.felix.scr.annotations.ReferencePolicy;\nimport org.apache.felix.scr.annotations.ReferenceStrategy;\nimport org.apache.felix.scr.annotations.Service;\nimport org.springframework.roo.addon.cloud.providers.CloudProvider;\nimport org.springframework.roo.addon.cloud.providers.CloudProviderId;\nimport org.springframework.roo.project.ProjectOperations;\n\n/**\n * Provides operations implementation to install Cloud Provider that provides\n * functions to deploy Spring Roo Application on Cloud Servers.\n * \n * @author Juan Carlos Garc\u00eda del Canto\n * @since 1.2.6\n */\n<fim_suffix>@Component\n@Service\n@Reference(name = \"provider\", strategy = ReferenceStrategy.EVENT, policy = ReferencePolicy.DYNAMIC,\n    referenceInterface = CloudProvider.class, cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE)\npublic class CloudOperationsImpl implements CloudOperations {\n\n  private List<CloudProvider> providers = new ArrayList<CloudProvider>();\n  private List<CloudProviderId> providersId = null;\n\n  @Reference\n  private ProjectOperations projectOperations;\n\n  @Override\n  public boolean isSetupCommandAvailable() {\n    return projectOperations.isProjectAvailable(projectOperations.getFocusedModuleName());\n  }\n\n  @Override\n  public void installProvider(CloudProviderId prov, String configuration) {\n    CloudProvider provider = null;\n    for (CloudProvider tmpProvider : providers) {\n      if (prov.is(tmpProvider)) {\n        provider = tmpProvider;\n        break;\n      }\n    }\n    if (provider == null) {\n      throw new RuntimeException(\"Provider '\".concat(prov.getId()).concat(\"' not found'\"));\n    }\n    provider.setup(configuration);\n\n  }\n\n  /**\n   * This method gets providerId using name\n   */\n  @Override\n  public CloudProviderId getProviderIdByName(String name) {\n    CloudProviderId provider = null;\n    for (CloudProvider tmpProvider : providers) {\n      if (tmpProvider.getName().equals(name)) {\n        provider = new CloudProviderId(tmpProvider);\n      }\n    }\n    return provider;\n  }\n\n  /**\n   * This method load new providers\n   * \n   * @param provider\n   */\n  protected void bindProvider(final CloudProvider provider) {\n    providers.add(provider);\n  }\n\n  /**\n   * This method remove providers\n   * \n   * @param provider\n   */\n  protected void unbindProvider(final CloudProvider provider) {\n    providers.remove(provider);\n  }\n\n  /**\n   * This method gets a List of available providers\n   */\n  @Override\n  public List<CloudProviderId> getProvidersId() {\n    if (providersId == null) {\n      providersId = new ArrayList<CloudProviderId>();\n      for (CloudProvider tmpProvider : providers) {\n        providersId.add(new CloudProviderId(tmpProvider));\n      }\n      providersId = Collections.unmodifiableList(providersId);\n    }\n    return providersId;\n  }\n}<fim_middle>// class below has no smell\n"}