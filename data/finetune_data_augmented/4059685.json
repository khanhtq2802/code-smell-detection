{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.distributedlog.util;\n\nimport com.google.common.annotations.Beta;\nimport java.util.concurrent.CompletableFuture;\n\n/**\n * Util class represents a transaction.\n */\n<fim_suffix>@Beta\npublic interface Transaction<OpResultT> {\n\n    /**\n     * An operation executed in a transaction.\n     */\n    interface Op<OpResultT> {\n\n        /**\n         * Execute after the transaction succeeds.\n         */\n        void commit(OpResultT r);\n\n        /**\n         * Execute after the transaction fails.\n         */\n        void abort(Throwable t, OpResultT r);\n\n    }\n\n    /**\n     * Listener on the result of an {@link Transaction.Op}.\n     *\n     * @param <OpResultT>\n     */\n    interface OpListener<OpResultT> {\n\n        /**\n         * Trigger on operation committed.\n         *\n         * @param r\n         *          result to return\n         */\n        void onCommit(OpResultT r);\n\n        /**\n         * Trigger on operation aborted.\n         *\n         * @param t\n         *          reason to abort\n         */\n        void onAbort(Throwable t);\n    }\n\n    /**\n     * Add the operation to current transaction.\n     *\n     * @param operation\n     *          operation to execute under current transaction\n     */\n    void addOp(Op<OpResultT> operation);\n\n    /**\n     * Execute the current transaction. If the transaction succeed, all operations will be\n     * committed (via {@link Transaction.Op#commit(Object)}.\n     * Otherwise, all operations will be aborted (via {@link Op#abort(Throwable, Object)}).\n     *\n     * @return future representing the result of transaction execution.\n     */\n    CompletableFuture<Void> execute();\n\n    /**\n     * Abort current transaction. If this is called and the transaction haven't been executed by\n     * {@link #execute()}, it would abort all operations. If the transaction has been executed,\n     * the behavior is left up to implementation - if transaction is cancellable, the {@link #abort(Throwable)}\n     * could attempt to cancel it.\n     *\n     * @param reason reason to abort the transaction\n     */\n    void abort(Throwable reason);\n\n}<fim_middle>// class below has no smell\n"}