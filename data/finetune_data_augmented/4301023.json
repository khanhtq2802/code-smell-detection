{"text": "<fim_prefix>/**\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n *\n */\npackage org.apache.kerby.kerberos.kerb.gss.impl;\n\nimport org.apache.kerby.kerberos.kerb.type.base.KrbToken;\nimport org.ietf.jgss.GSSException;\nimport org.ietf.jgss.GSSName;\n\nimport sun.security.jgss.GSSCaller;\n\nimport java.util.Set;\n\nimport javax.security.auth.kerberos.KerberosTicket;\n\n<fim_suffix>public final class GssInitCred extends GssCredElement {\n\n    private KerberosTicket ticket;\n    private KrbToken krbToken;\n\n    private GssInitCred(GSSCaller caller, GssNameElement name,\n                        KerberosTicket ticket, KrbToken krbToken, int lifeTime) {\n        super(caller, name);\n        this.ticket = ticket;\n        this.initLifeTime = lifeTime;\n        this.krbToken = krbToken;\n    }\n\n    public static GssInitCred getInstance(GSSCaller caller, GssNameElement name, int lifeTime) throws GSSException {\n        Set<KrbToken> krbTokens = CredUtils.getContextCredentials(KrbToken.class);\n        KrbToken krbToken = krbTokens != null && !krbTokens.isEmpty() ? krbTokens.iterator().next() : null;\n\n        if (name == null) {\n            KerberosTicket ticket = CredUtils.getKerberosTicketFromContext(caller, null, null);\n            GssNameElement clientName = GssNameElement.getInstance(ticket.getClient().getName(), GSSName.NT_USER_NAME);\n            return new GssInitCred(caller, clientName, ticket, krbToken, lifeTime);\n        }\n\n        KerberosTicket ticket = CredUtils.getKerberosTicketFromContext(caller, name.getPrincipalName().getName(), null);\n        return new GssInitCred(caller, name, ticket, krbToken, lifeTime);\n    }\n\n    public boolean isInitiatorCredential() throws GSSException {\n        return true;\n    }\n\n    public boolean isAcceptorCredential() throws GSSException {\n        return false;\n    }\n\n    public KerberosTicket getKerberosTicket() {\n        return ticket;\n    }\n\n    public KrbToken getKrbToken() {\n        return krbToken;\n    }\n}<fim_middle>// class below has no smell\n"}