{"text": "<fim_prefix>/* ====================================================================\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n==================================================================== */\n\npackage org.apache.poi.ddf;\n\nimport org.apache.poi.util.LittleEndian;\n\n<fim_suffix>public class EscherBitmapBlip extends EscherBlipRecord {\n    public static final short RECORD_ID_JPEG = (short) 0xF018 + 5;\n    public static final short RECORD_ID_PNG = (short) 0xF018 + 6;\n    public static final short RECORD_ID_DIB = (short) 0xF018 + 7;\n\n    private static final int HEADER_SIZE = 8;\n\n    private final byte[] field_1_UID = new byte[16];\n    private byte field_2_marker = (byte) 0xFF;\n\n    @Override\n    public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {\n        int bytesAfterHeader = readHeader( data, offset );\n        int pos = offset + HEADER_SIZE;\n\n        System.arraycopy( data, pos, field_1_UID, 0, 16 ); pos += 16;\n        field_2_marker = data[pos]; pos++;\n\n        setPictureData(data, pos, bytesAfterHeader - 17);\n\n        return bytesAfterHeader + HEADER_SIZE;\n    }\n\n    @Override\n    public int serialize( int offset, byte[] data, EscherSerializationListener listener ) {\n        listener.beforeRecordSerialize(offset, getRecordId(), this);\n\n        LittleEndian.putShort( data, offset, getOptions() );\n        LittleEndian.putShort( data, offset + 2, getRecordId() );\n        LittleEndian.putInt( data, offset + 4, getRecordSize() - HEADER_SIZE );\n        int pos = offset + HEADER_SIZE;\n\n        System.arraycopy( field_1_UID, 0, data, pos, 16 );\n        data[pos + 16] = field_2_marker;\n        byte[] pd = getPicturedata();\n        System.arraycopy( pd, 0, data, pos + 17, pd.length );\n\n        listener.afterRecordSerialize(offset + getRecordSize(), getRecordId(), getRecordSize(), this);\n        return HEADER_SIZE + 16 + 1 + pd.length;\n    }\n\n    @Override\n    public int getRecordSize() {\n        return 8 + 16 + 1 + getPicturedata().length;\n    }\n\n    /**\n     * Gets the first MD4, that specifies the unique identifier of the\n     * uncompressed blip data\n     *\n     * @return the first MD4\n     */\n    public byte[] getUID() {\n        return field_1_UID;\n    }\n\n    /**\n     * Sets the first MD4, that specifies the unique identifier of the\n     * uncompressed blip data\n     *\n     * @param field_1_UID the first MD4\n     */\n    public void setUID( byte[] field_1_UID ) {\n        if (field_1_UID == null || field_1_UID.length != 16) {\n            throw new IllegalArgumentException(\"field_1_UID must be byte[16]\");\n        }\n        System.arraycopy(field_1_UID, 0, this.field_1_UID , 0, 16);\n    }\n\n    /**\n     * Gets an unsigned integer that specifies an application-defined internal\n     * resource tag. This value MUST be 0xFF for external files.\n     *\n     * @return the marker\n     */\n    public byte getMarker() {\n        return field_2_marker;\n    }\n\n    /**\n     * Sets an unsigned integer that specifies an application-defined internal\n     * resource tag. This value MUST be 0xFF for external files.\n     *\n     * @param field_2_marker the marker\n     */\n    public void setMarker( byte field_2_marker ) {\n        this.field_2_marker = field_2_marker;\n    }\n\n    @Override\n    protected Object[][] getAttributeMap() {\n        return new Object[][] {\n            { \"Marker\", field_2_marker },\n            { \"Extra Data\", getPicturedata() }\n        };\n    }\n}<fim_middle>// class below has no smell\n"}