{"text": "<fim_prefix>              \tleaveRule();\n            }\n        }\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"ruleOpCompare\"\n    // $ANTLR start \"entryRuleXOtherOperatorExpression\"\n    // InternalXbase.g:860:1: entryRuleXOtherOperatorExpression returns [EObject current=null] : iv_ruleXOtherOperatorExpression= ruleXOtherOperatorExpression EOF ;\n    public final EObject entryRuleXOtherOperatorExpression() throws RecognitionException {\n        EObject current = null;\n        EObject iv_ruleXOtherOperatorExpression = null;\n        try {\n            // InternalXbase.g:860:65: (iv_ruleXOtherOperatorExpression= ruleXOtherOperatorExpression EOF )\n            // InternalXbase.g:861:2: iv_ruleXOtherOperatorExpression= ruleXOtherOperatorExpression EOF\n            {\n            if ( state.backtracking==0 ) {\n               newCompositeNode(grammarAccess.getXOtherOperatorExpressionRule()); \n            }\n            pushFollow(FOLLOW_1);\n            iv_ruleXOtherOperatorExpression=ruleXOtherOperatorExpression();\n            state._fsp--;\n            if (state.failed) return current;\n            if ( state.backtracking==0 ) {\n               current =iv_ruleXOtherOperatorExpression; \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return current;\n            }\n        }\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"entryRuleXOtherOperatorExpression\"\n    // $ANTLR start \"ruleXOtherOperatorExpression\"\n    // InternalXbase.g:867:1: ruleXOtherOperatorExpression returns [EObject current=null] : (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* ) ;\n<fim_suffix>    public final EObject ruleXOtherOperatorExpression() throws RecognitionException {\n        EObject current = null;\n        EObject this_XAdditiveExpression_0 = null;\n        EObject lv_rightOperand_3_0 = null;\n        \tenterRule();\n        try {\n            // InternalXbase.g:873:2: ( (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* ) )\n            // InternalXbase.g:874:2: (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* )\n            {\n            // InternalXbase.g:874:2: (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* )\n            // InternalXbase.g:875:3: this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )*\n            {\n            if ( state.backtracking==0 ) {\n              \t\t\tnewCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getXAdditiveExpressionParserRuleCall_0());\n            }\n            pushFollow(FOLLOW_14);\n            this_XAdditiveExpression_0=ruleXAdditiveExpression();\n            state._fsp--;\n            if (state.failed) return current;\n            if ( state.backtracking==0 ) {\n              \t\t\tcurrent = this_XAdditiveExpression_0;\n              \t\t\tafterParserOrEnumRuleCall();\n            }\n            // InternalXbase.g:883:3: ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )*\n            loop11:\n            do {\n                int alt11=2;\n                alt11 = dfa11.predict(input);\n                switch (alt11) {\n            \tcase 1 :\n            \t    // InternalXbase.g:884:4: ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) )\n            \t    {\n            \t    // InternalXbase.g:884:4: ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) )\n            \t    // InternalXbase.g:885:5: ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) )\n            \t    {\n            \t    // InternalXbase.g:895:5: ( () ( ( ruleOpOther ) ) )\n            \t    // InternalXbase.g:896:6: () ( ( ruleOpOther ) )\n            \t    {\n            \t    // InternalXbase.g:896:6: ()\n            \t    // InternalXbase.g:897:7: \n            \t    {\n            \t    if ( state.backtracking==0 ) {\n            \t      \t\t\t\t\t\t\tcurrent = forceCreateModelElementAndSet(\n            \t      \t\t\t\t\t\t\t\tgrammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),\n            \t      \t\t\t\t\t\t\t\tcurrent);\n            \t    }\n            \t    }\n            \t    // InternalXbase.g:903:6: ( ( ruleOpOther ) )\n            \t    // InternalXbase.g:904:7: ( ruleOpOther )\n            \t    {\n            \t    // InternalXbase.g:904:7: ( ruleOpOther )\n            \t    // InternalXbase.g:905:8: ruleOpOther\n            \t    {\n            \t    if ( state.backtracking==0 ) {\n            \t      \t\t\t\t\t\t\t\tif (current==null) {\n            \t      \t\t\t\t\t\t\t\t\tcurrent = createModelElement(grammarAccess.getXOtherOperatorExpressionRule());\n            \t      \t\t\t\t\t\t\t\t}\n            \t    }\n            \t    if ( state.backtracking==0 ) {\n            \t      \t\t\t\t\t\t\t\tnewCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0());\n            \t    }\n            \t    pushFollow(FOLLOW_4);\n            \t    ruleOpOther();\n            \t    state._fsp--;\n            \t    if (state.failed) return current;\n            \t    if ( state.backtracking==0 ) {\n            \t      \t\t\t\t\t\t\t\tafterParserOrEnumRuleCall();\n            \t    }\n            \t    }\n            \t    }\n            \t    }\n            \t    }\n            \t    // InternalXbase.g:921:4: ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) )\n            \t    // InternalXbase.g:922:5: (lv_rightOperand_3_0= ruleXAdditiveExpression )\n            \t    {\n            \t    // InternalXbase.g:922:5: (lv_rightOperand_3_0= ruleXAdditiveExpression )\n            \t    // InternalXbase.g:923:6: lv_rightOperand_3_0= ruleXAdditiveExpression\n            \t    {\n            \t    if ( state.backtracking==0 ) {\n            \t      \t\t\t\t\t\tnewCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getRightOperandXAdditiveExpressionParserRuleCall_1_1_0());\n            \t    }\n            \t    pushFollow(FOLLOW_14);\n            \t    lv_rightOperand_3_0=ruleXAdditiveExpression();\n            \t    state._fsp--;\n            \t    if (state.failed) return current;\n            \t    if ( state.backtracking==0 ) {\n            \t      \t\t\t\t\t\tif (current==null) {\n            \t      \t\t\t\t\t\t\tcurrent = createModelElementForParent(grammarAccess.getXOtherOperatorExpressionRule());\n            \t      \t\t\t\t\t\t}\n            \t      \t\t\t\t\t\tset(\n            \t      \t\t\t\t\t\t\tcurrent,\n            \t      \t\t\t\t\t\t\t\"rightOperand\",\n            \t      \t\t\t\t\t\t\tlv_rightOperand_3_0,\n            \t      \t\t\t\t\t\t\t\"org.eclipse.xtext.xbase.Xbase.XAdditiveExpression\");\n            \t      \t\t\t\t\t\tafterParserOrEnumRuleCall();\n            \t    }\n            \t    }\n            \t    }\n            \t    }\n            \t    break;\n            \tdefault :\n            \t    break loop11;\n                }\n            } while (true);\n            }\n            }\n            if ( state.backtracking==0 ) {\n              \tleaveRule();\n            }\n        }\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }<fim_middle>// function below is long method\n"}