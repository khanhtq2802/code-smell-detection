{"text": "<fim_prefix>\n<fim_suffix>public class ImportDsmlRunnable implements StudioConnectionBulkRunnableWithProgress\n{\n    /** The connection to use */\n    private IBrowserConnection browserConnection;\n    /** The DSML file to use */\n    private File dsmlFile;\n    /** The Save file to use */\n    private File responseFile;\n    /** \n     * LDAP Codec used by DSML parser\n     * @TODO by Alex - this should be removed completely\n     */\n    private LdapApiService codec = LdapApiServiceFactory.getSingleton();\n    /**\n     * Creates a new instance of ImportDsmlRunnable.\n     *\n     * @param connection\n     *          The connection to use\n     * @param dsmlFile\n     *          The DSML file to read from\n     * @param saveFile\n     *          The Save file to use\n     * @param continueOnError\n     *          The ContinueOnError flag\n     */\n    public ImportDsmlRunnable( IBrowserConnection connection, File dsmlFile, File saveFile )\n    {\n        this.browserConnection = connection;\n        this.dsmlFile = dsmlFile;\n        this.responseFile = saveFile;\n    }\n    /**\n     * Creates a new instance of ImportDsmlRunnable.\n     *\n     * @param connection\n     *          The Connection to use\n     * @param dsmlFile\n     *          The DSML file to read from\n     * @param continueOnError\n     *          The ContinueOnError flag\n     */\n    public ImportDsmlRunnable( IBrowserConnection connection, File dsmlFile )\n    {\n        this( connection, dsmlFile, null );\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public Connection[] getConnections()\n    {\n        return new Connection[]\n            { browserConnection.getConnection() };\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public String getName()\n    {\n        return BrowserCoreMessages.jobs__import_dsml_name;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public Object[] getLockedObjects()\n    {\n        List<Object> l = new ArrayList<Object>();\n        l.add( browserConnection.getUrl() + \"_\" + DigestUtils.shaHex( dsmlFile.toString() ) ); //$NON-NLS-1$\n        return l.toArray();\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public String getErrorMessage()\n    {\n        return BrowserCoreMessages.jobs__import_dsml_error;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public void run( StudioProgressMonitor monitor )\n    {\n        monitor.beginTask( BrowserCoreMessages.jobs__import_dsml_task, 2 );\n        monitor.reportProgress( \" \" ); //$NON-NLS-1$\n        monitor.worked( 1 );\n        try\n        {\n            // Parsing the file\n            Dsmlv2Grammar grammar = new Dsmlv2Grammar();\n            Dsmlv2Parser parser = new Dsmlv2Parser( grammar );\n            parser.setInput( new FileInputStream( dsmlFile ), \"UTF-8\" ); //$NON-NLS-1$\n            parser.parseAllRequests();\n            // Getting the batch request\n            BatchRequestDsml batchRequest = parser.getBatchRequest();\n            // Creating a DSML batch response (only if needed)\n            BatchResponseDsml batchResponseDsml = null;\n            if ( responseFile != null )\n            {\n                batchResponseDsml = new BatchResponseDsml();\n            }\n            // Setting the errors counter\n            int errorsCount = 0;\n            // Creating a dummy monitor that will be used to check if something\n            // went wrong when executing the request\n            StudioProgressMonitor dummyMonitor = new StudioProgressMonitor( monitor );\n            // Processing each request\n            List<DsmlDecorator<? extends Request>> requests = batchRequest.getRequests();\n            for ( DsmlDecorator<? extends Request> request : requests )\n            {\n                // Processing the request\n                processRequest( request, batchResponseDsml, dummyMonitor );\n                // Verifying if any error has been reported\n                if ( dummyMonitor.errorsReported() )\n                {\n                    errorsCount++;\n                }\n                dummyMonitor.reset();\n            }\n            // Writing the DSML response file to its final destination file.\n            if ( responseFile != null )\n            {\n                FileOutputStream fos = new FileOutputStream( responseFile );\n                OutputStreamWriter osw = new OutputStreamWriter( fos, \"UTF-8\" ); //$NON-NLS-1$\n                BufferedWriter bufferedWriter = new BufferedWriter( osw );\n                bufferedWriter.write( batchResponseDsml.toDsml() );\n                bufferedWriter.close();\n                osw.close();\n                fos.close();\n            }\n            // Displaying an error message if we've had some errors\n            if ( errorsCount > 0 )\n            {\n                monitor.reportError( BrowserCoreMessages.bind(\n                    BrowserCoreMessages.dsml__n_errors_see_responsefile, new String[]\n                        { \"\" + errorsCount } ) ); //$NON-NLS-1$\n            }\n        }\n        catch ( Exception e )\n        {\n            monitor.reportError( e );\n        }\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public void runNotification( StudioProgressMonitor monitor )\n    {\n        EventRegistry.fireEntryUpdated( new BulkModificationEvent( browserConnection ), this );\n    }\n    /**\n     * Processes the request.\n     *\n     * @param request\n     *      the request\n     * @param batchResponseDsml\n     *      the DSML batch response (can be <code>null</code>)\n     * @throws NamingException \n     * @throws org.apache.directory.api.ldap.model.exception.LdapURLEncodingException\n     * @throws LdapException\n     */\n    private void processRequest( DsmlDecorator<? extends Request> request, BatchResponseDsml batchResponseDsml,\n        StudioProgressMonitor monitor )\n        throws NamingException, LdapURLEncodingException, LdapException\n    {\n        switch ( request.getDecorated().getType() )\n        {\n            case BIND_REQUEST:\n                processBindRequest( ( BindRequest ) request, batchResponseDsml, monitor );\n                break;\n            case ADD_REQUEST:\n                processAddRequest( ( AddRequest ) request, batchResponseDsml, monitor );\n                break;\n            case COMPARE_REQUEST:\n                processCompareRequest( ( CompareRequest ) request, batchResponseDsml, monitor );\n                break;\n            case DEL_REQUEST:\n                processDelRequest( ( DeleteRequest ) request, batchResponseDsml, monitor );\n                break;\n            case EXTENDED_REQUEST:\n                processExtendedRequest( ( ExtendedRequest ) request, batchResponseDsml, monitor );\n                break;\n            case MODIFY_REQUEST:\n                processModifyRequest( ( ModifyRequest ) request, batchResponseDsml, monitor );\n                break;\n            case MODIFYDN_REQUEST:\n                processModifyDNRequest( ( ModifyDnRequest ) request, batchResponseDsml, monitor );\n                break;\n            case SEARCH_REQUEST:\n                processSearchRequest( ( SearchRequest ) request, batchResponseDsml, monitor );\n                break;\n            default:\n                throw new IllegalArgumentException(\n                    BrowserCoreMessages.dsml__should_not_be_encountering_request\n                        + request.getDecorated().getType() );\n        }\n    }\n    /**\n     * Processes an bind request.\n     * \n     * @param request\n     *      the request\n     * @param batchResponseDsml\n     *      the DSML batch response (can be <code>null</code>)\n     */\n    private void processBindRequest( BindRequest request, BatchResponseDsml batchResponseDsml,\n        StudioProgressMonitor monitor )\n    {\n        // We can not support extended requests at the moment,\n        // we need a more advanced connection wrapper.\n        // Creating the response\n        if ( batchResponseDsml != null )\n        {\n            BindResponseDsml authResponseDsml = new BindResponseDsml( codec );\n            LdapResult ldapResult = authResponseDsml.getLdapResult();\n            ldapResult.setResultCode( ResultCodeEnum.UNWILLING_TO_PERFORM );\n            ldapResult.setDiagnosticMessage( BrowserCoreMessages.dsml__kind_request_not_supported );\n            batchResponseDsml.addResponse( authResponseDsml );\n        }\n    }\n    /**\n     * Processes an add request.\n     * \n     * @param request\n     *      the request\n     * @param batchResponseDsml\n     *      the DSML batch response (can be <code>null</code>)\n     */\n    private void processAddRequest( AddRequest request, BatchResponseDsml batchResponseDsml,\n        StudioProgressMonitor monitor )\n    {\n        // Executing the add request\n        Entry entry = request.getEntry();\n        browserConnection\n            .getConnection()\n            .getConnectionWrapper()\n            .createEntry( entry.getDn().getName(), Utils.toAttributes( entry ), getControls( request ),\n                monitor, null );\n        // Creating the response\n        if ( batchResponseDsml != null )\n        {\n            AddResponseDsml addResponseDsml = new AddResponseDsml( codec );\n            LdapResult ldapResult = addResponseDsml.getLdapResult();\n            setLdapResultValuesFromMonitor( ldapResult, monitor, MessageTypeEnum.ADD_REQUEST );\n            ldapResult.setMatchedDn( entry.getDn() );\n            batchResponseDsml.addResponse( addResponseDsml );\n        }<fim_middle>// class below is blob\n"}