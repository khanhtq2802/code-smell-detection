{"text": "<fim_prefix>/*  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\npackage javax.portlet.tck.portlets;\n\nimport static javax.portlet.tck.beans.JSR286DispatcherReqRespTestCaseDetails.V2DISPATCHERREQRESPTESTS5S_SPEC2_19_FORWARDSERVLETACTIONREQUEST_GETINPUTSTREAM;\nimport static javax.portlet.tck.beans.JSR286DispatcherReqRespTestCaseDetails.V2DISPATCHERREQRESPTESTS5S_SPEC2_19_FORWARDSERVLETACTIONREQUEST_SETCHARACTERENCODING;\nimport static javax.portlet.PortletSession.APPLICATION_SCOPE;\nimport static javax.portlet.tck.constants.Constants.QUERY_STRING;\nimport static javax.portlet.tck.constants.Constants.RESULT_ATTR_PREFIX;\nimport static javax.portlet.tck.constants.Constants.SERVLET_PREFIX;\nimport static javax.portlet.tck.constants.Constants.SERVLET_SUFFIX;\nimport static javax.portlet.tck.constants.Constants.THREADID_ATTR;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.portlet.ActionRequest;\nimport javax.portlet.ActionResponse;\nimport javax.portlet.Portlet;\nimport javax.portlet.PortletConfig;\nimport javax.portlet.PortletException;\nimport javax.portlet.PortletRequestDispatcher;\nimport javax.portlet.PortletSession;\nimport javax.portlet.PortletURL;\nimport javax.portlet.RenderRequest;\nimport javax.portlet.RenderResponse;\nimport javax.portlet.ResourceRequest;\nimport javax.portlet.ResourceResponse;\nimport javax.portlet.ResourceServingPortlet;\nimport javax.portlet.tck.beans.TestButton;\n\n/**\n * This portlet implements several test cases for the JSR 362 TCK. The test case names\n * are defined in the /src/main/resources/xml-resources/additionalTCs.xml\n * file. The build process will integrate the test case names defined in the \n * additionalTCs.xml file into the complete list of test case names for execution by the driver.\n *\n * This is the main portlet for the test cases. If the test cases call for events, this portlet\n * will initiate the events, but not process them. The processing is done in the companion \n * portlet DispatcherReqRespTests5S_SPEC2_19_ForwardServletActionRequest_event\n *\n */\n<fim_suffix>public class DispatcherReqRespTests5S_SPEC2_19_ForwardServletActionRequest implements Portlet, ResourceServingPortlet {\n   \n   private PortletConfig portletConfig = null;\n\n   @Override\n   public void init(PortletConfig config) throws PortletException {\n      this.portletConfig = config;\n   }\n\n   @Override\n   public void destroy() {\n   }\n\n   @Override\n   public void processAction(ActionRequest portletReq, ActionResponse portletResp)\n         throws PortletException, IOException {\n\n      portletResp.setRenderParameters(portletReq.getParameterMap());\n      long tid = Thread.currentThread().getId();\n      portletReq.setAttribute(THREADID_ATTR, tid);\n\n      // Now do the actual dispatch\n      String target = SERVLET_PREFIX + \"DispatcherReqRespTests5S_SPEC2_19_ForwardServletActionRequest_servlet\" + SERVLET_SUFFIX + \"?\" + QUERY_STRING;\n      PortletRequestDispatcher rd = portletConfig.getPortletContext()\n            .getRequestDispatcher(target);\n      rd.forward(portletReq, portletResp);\n   }\n\n   @Override\n   public void serveResource(ResourceRequest portletReq, ResourceResponse portletResp)\n         throws PortletException, IOException {\n\n      long tid = Thread.currentThread().getId();\n      portletReq.setAttribute(THREADID_ATTR, tid);\n\n   }\n\n   @Override\n   public void render(RenderRequest portletReq, RenderResponse portletResp)\n         throws PortletException, IOException {\n\n      long tid = Thread.currentThread().getId();\n      portletReq.setAttribute(THREADID_ATTR, tid);\n\n      PrintWriter writer = portletResp.getWriter();\n\n      PortletSession ps = portletReq.getPortletSession();\n      String msg = (String) ps.getAttribute(RESULT_ATTR_PREFIX + \"DispatcherReqRespTests5S_SPEC2_19_ForwardServletActionRequest\", APPLICATION_SCOPE);\n      if (msg != null) {\n         writer.write(\"<p>\" + msg + \"</p><br/>\\n\");\n         ps.removeAttribute(RESULT_ATTR_PREFIX + \"DispatcherReqRespTests5S_SPEC2_19_ForwardServletActionRequest\", APPLICATION_SCOPE);\n      }\n\n      /* TestCase: V2DispatcherReqRespTests5S_SPEC2_19_ForwardServletActionRequest_getInputStream */\n      /* Details: \"In a target servlet of a forward in the Action phase,      */\n      /* the method HttpServletRequest.getInputStream must provide the same   */\n      /* functionality as ActionRequest.getPortletInputStream\"                */\n      {\n         PortletURL aurl = portletResp.createActionURL();\n         aurl.setParameters(portletReq.getPrivateParameterMap());\n         TestButton tb = new TestButton(V2DISPATCHERREQRESPTESTS5S_SPEC2_19_FORWARDSERVLETACTIONREQUEST_GETINPUTSTREAM, aurl);\n         tb.writeTo(writer);\n      }\n\n      /* TestCase: V2DispatcherReqRespTests5S_SPEC2_19_ForwardServletActionRequest_setCharacterEncoding */\n      /* Details: \"In a target servlet of a forward in the Action phase,      */\n      /* the method HttpServletRequest.setCharacterEncoding must provide      */\n      /* the same functionality as ActionRequest.setCharacterEncoding\"        */\n      {\n         PortletURL aurl = portletResp.createActionURL();\n         aurl.setParameters(portletReq.getPrivateParameterMap());\n         TestButton tb = new TestButton(V2DISPATCHERREQRESPTESTS5S_SPEC2_19_FORWARDSERVLETACTIONREQUEST_SETCHARACTERENCODING, aurl);\n         tb.writeTo(writer);\n      }\n\n   }\n\n}<fim_middle>// class below has no smell\n"}