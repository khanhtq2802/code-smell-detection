{"text": "<fim_prefix>            // InternalTypesLexer.g:151:7: 'new'\n            {\n            match(\"new\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"New\"\n    // $ANTLR start \"Out\"\n    public final void mOut() throws RecognitionException {\n        try {\n            int _type = Out;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:153:5: ( 'out' )\n            // InternalTypesLexer.g:153:7: 'out'\n            {\n            match(\"out\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Out\"\n    // $ANTLR start \"Set\"\n    public final void mSet() throws RecognitionException {\n        try {\n            int _type = Set;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:155:5: ( 'set' )\n            // InternalTypesLexer.g:155:7: 'set'\n            {\n            match(\"set\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Set\"\n    // $ANTLR start \"Try\"\n    public final void mTry() throws RecognitionException {\n        try {\n            int _type = Try;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:157:5: ( 'try' )\n            // InternalTypesLexer.g:157:7: 'try'\n            {\n            match(\"try\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Try\"\n    // $ANTLR start \"Var\"\n    public final void mVar() throws RecognitionException {\n        try {\n            int _type = Var;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:159:5: ( 'var' )\n            // InternalTypesLexer.g:159:7: 'var'\n            {\n            match(\"var\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Var\"\n    // $ANTLR start \"EqualsSignGreaterThanSign\"\n    public final void mEqualsSignGreaterThanSign() throws RecognitionException {\n        try {\n            int _type = EqualsSignGreaterThanSign;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:161:27: ( '=>' )\n            // InternalTypesLexer.g:161:29: '=>'\n            {\n            match(\"=>\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"EqualsSignGreaterThanSign\"\n    // $ANTLR start \"As\"\n    public final void mAs() throws RecognitionException {\n        try {\n            int _type = As;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:163:4: ( 'as' )\n            // InternalTypesLexer.g:163:6: 'as'\n            {\n            match(\"as\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"As\"\n    // $ANTLR start \"Do\"\n    public final void mDo() throws RecognitionException {\n        try {\n            int _type = Do;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:165:4: ( 'do' )\n            // InternalTypesLexer.g:165:6: 'do'\n            {\n            match(\"do\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Do\"\n    // $ANTLR start \"If\"\n    public final void mIf() throws RecognitionException {\n        try {\n            int _type = If;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:167:4: ( 'if' )\n            // InternalTypesLexer.g:167:6: 'if'\n            {\n            match(\"if\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"If\"\n    // $ANTLR start \"In\"\n    public final void mIn() throws RecognitionException {\n        try {\n            int _type = In;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:169:4: ( 'in' )\n            // InternalTypesLexer.g:169:6: 'in'\n            {\n            match(\"in\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"In\"\n    // $ANTLR start \"Of\"\n    public final void mOf() throws RecognitionException {\n        try {\n            int _type = Of;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:171:4: ( 'of' )\n            // InternalTypesLexer.g:171:6: 'of'\n            {\n            match(\"of\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Of\"\n    // $ANTLR start \"Ampersand\"\n    public final void mAmpersand() throws RecognitionException {\n        try {\n            int _type = Ampersand;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:173:11: ( '&' )\n            // InternalTypesLexer.g:173:13: '&'\n            {\n            match('&'); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Ampersand\"\n    // $ANTLR start \"LeftParenthesis\"\n    public final void mLeftParenthesis() throws RecognitionException {\n        try {\n            int _type = LeftParenthesis;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:175:17: ( '(' )\n            // InternalTypesLexer.g:175:19: '('\n            {\n            match('('); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"LeftParenthesis\"\n    // $ANTLR start \"RightParenthesis\"\n    public final void mRightParenthesis() throws RecognitionException {\n        try {\n            int _type = RightParenthesis;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:177:18: ( ')' )\n            // InternalTypesLexer.g:177:20: ')'\n            {\n            match(')'); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"RightParenthesis\"\n    // $ANTLR start \"PlusSign\"\n    public final void mPlusSign() throws RecognitionException {\n        try {\n            int _type = PlusSign;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:179:10: ( '+' )\n            // InternalTypesLexer.g:179:12: '+'\n            {\n            match('+'); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"PlusSign\"\n    // $ANTLR start \"Comma\"\n    public final void mComma() throws RecognitionException {\n        try {\n            int _type = Comma;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:181:7: ( ',' )\n            // InternalTypesLexer.g:181:9: ','\n            {\n            match(','); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Comma\"\n    // $ANTLR start \"FullStop\"\n<fim_suffix>    public final void mFullStop() throws RecognitionException {\n        try {\n            int _type = FullStop;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:183:10: ( '.' )\n            // InternalTypesLexer.g:183:12: '.'\n            {\n            match('.'); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }<fim_middle>// function below has no smell\n"}