{"text": "<fim_prefix>/*\n * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage jdk.net;\n\nimport java.net.SocketException;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport jdk.net.ExtendedSocketOptions.PlatformSocketOptions;\n\n<fim_suffix>class MacOSXSocketOptions extends PlatformSocketOptions {\n\n    public MacOSXSocketOptions() {\n    }\n\n    @Override\n    boolean keepAliveOptionsSupported() {\n        return keepAliveOptionsSupported0();\n    }\n\n    @Override\n    void setTcpkeepAliveProbes(int fd, final int value) throws SocketException {\n        setTcpkeepAliveProbes0(fd, value);\n    }\n\n    @Override\n    void setTcpKeepAliveTime(int fd, final int value) throws SocketException {\n        setTcpKeepAliveTime0(fd, value);\n    }\n\n    @Override\n    void setTcpKeepAliveIntvl(int fd, final int value) throws SocketException {\n        setTcpKeepAliveIntvl0(fd, value);\n    }\n\n    @Override\n    int getTcpkeepAliveProbes(int fd) throws SocketException {\n        return getTcpkeepAliveProbes0(fd);\n    }\n\n    @Override\n    int getTcpKeepAliveTime(int fd) throws SocketException {\n        return getTcpKeepAliveTime0(fd);\n    }\n\n    @Override\n    int getTcpKeepAliveIntvl(int fd) throws SocketException {\n        return getTcpKeepAliveIntvl0(fd);\n    }\n\n    private static native void setTcpkeepAliveProbes0(int fd, int value) throws SocketException;\n    private static native void setTcpKeepAliveTime0(int fd, int value) throws SocketException;\n    private static native void setTcpKeepAliveIntvl0(int fd, int value) throws SocketException;\n    private static native int getTcpkeepAliveProbes0(int fd) throws SocketException;\n    private static native int getTcpKeepAliveTime0(int fd) throws SocketException;\n    private static native int getTcpKeepAliveIntvl0(int fd) throws SocketException;\n    private static native boolean keepAliveOptionsSupported0();\n    static {\n        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n            System.loadLibrary(\"extnet\");\n            return null;\n        });\n    }\n}<fim_middle>// class below is data class\n"}