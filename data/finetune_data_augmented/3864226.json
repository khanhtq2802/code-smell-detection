{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.ambari.server.api.query;\n\n\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.ambari.server.controller.internal.ResourceImpl;\nimport org.apache.ambari.server.controller.predicate.AlwaysPredicate;\nimport org.apache.ambari.server.controller.predicate.ArrayPredicate;\nimport org.apache.ambari.server.controller.predicate.CategoryPredicate;\nimport org.apache.ambari.server.controller.predicate.ComparisonPredicate;\nimport org.apache.ambari.server.controller.predicate.PredicateVisitor;\nimport org.apache.ambari.server.controller.predicate.UnaryPredicate;\nimport org.apache.ambari.server.controller.spi.Predicate;\nimport org.apache.ambari.server.controller.spi.Resource;\nimport org.apache.ambari.server.controller.utilities.PredicateHelper;\n\n/**\n * A predicate visitor used to generate a new predicate so that the resources\n * referenced by the predicate will be extended to include the joined properties\n * of their sub-resources.\n */\npublic class ExtendedResourcePredicateVisitor implements PredicateVisitor {\n  /**\n   * The last visited predicate.\n   */\n  private Predicate lastVisited = null;\n\n  /**\n   * The joined resource map.\n   */\n  private final Map<Resource, Set<Map<String, Object>>> joinedResources;\n\n\n  // ----- Constructors ------------------------------------------------------\n\n  /**\n   * Constructor.\n   *\n   * @param extendedProperties the map of sets of extended properties\n   */\n  public ExtendedResourcePredicateVisitor(Map<Resource,\n      Set<Map<String, Object>>> extendedProperties) {\n    this.joinedResources = extendedProperties;\n  }\n\n  // ----- PredicateVisitor --------------------------------------------------\n\n  @Override\n  public void acceptComparisonPredicate(ComparisonPredicate predicate) {\n    lastVisited = new ExtendedResourcePredicate(predicate, joinedResources);\n  }\n\n  @Override\n  public void acceptArrayPredicate(ArrayPredicate arrayPredicate) {\n    List<Predicate> predicateList = new LinkedList<>();\n\n    Predicate[] predicates = arrayPredicate.getPredicates();\n    if (predicates.length > 0) {\n      for (Predicate predicate : predicates) {\n        PredicateHelper.visit(predicate, this);\n        predicateList.add(lastVisited);\n      }\n    }\n    lastVisited = arrayPredicate.create(predicateList.toArray(new Predicate[predicateList.size()]));\n  }\n\n  @Override\n  public void acceptUnaryPredicate(UnaryPredicate predicate) {\n    lastVisited = new ExtendedResourcePredicate(predicate, joinedResources);\n  }\n\n  @Override\n  public void acceptAlwaysPredicate(AlwaysPredicate predicate) {\n    lastVisited = predicate;\n  }\n\n  @Override\n  public void acceptCategoryPredicate(CategoryPredicate predicate) {\n    lastVisited = new ExtendedResourcePredicate(predicate, joinedResources);\n  }\n\n\n  // ----- utility methods -------------------------------------------------\n\n  /**\n   * Get the extended predicate.\n   *\n   * @return the predicate\n   */\n  public Predicate getExtendedPredicate() {\n    return lastVisited;\n  }\n\n\n  // ----- inner classes -----------------------------------------------------\n\n  // ----- ExtendedResourcePredicate -----------------------------------------\n\n  /**\n   * Predicate implementation used to replace any existing predicate and\n   * extend the resource being evaluated with an extended set of property\n   * values.\n   */\n  private static class ExtendedResourcePredicate implements Predicate {\n\n    /**\n     * The predicate being extended.\n     */\n    private final Predicate predicate;\n\n    /**\n     * The map of extended property sets keyed by resource.\n     */\n    private final Map<Resource, Set<Map<String, Object>>> joinedResources;\n\n\n    // ----- Constructors ----------------------------------------------------\n\n    /**\n     * Constructor\n     *\n     * @param predicate        the predicate being extended\n     * @param joinedResources  the map of extended sets of property values\n     */\n    public ExtendedResourcePredicate(Predicate predicate,\n                                     Map<Resource, Set<Map<String, Object>>> joinedResources) {\n      this.predicate       = predicate;\n      this.joinedResources = joinedResources;\n    }\n\n    // ----- Predicate -------------------------------------------------------\n\n<fim_suffix>    @Override\n    public boolean evaluate(Resource resource) {\n\n      Set<Map<String, Object>> extendedPropertySet = joinedResources.get(resource);\n\n      if (extendedPropertySet == null) {\n        return predicate.evaluate(resource);\n      }\n\n      for (Map<String, Object> extendedProperties : extendedPropertySet) {\n        Resource extendedResource = new ExtendedResourceImpl(resource, extendedProperties);\n\n        if (predicate.evaluate(extendedResource)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  // ----- ExtendedResourceImpl ----------------------------------------------\n\n  /**\n   * A resource that extends a given resource by copying it and adding additional\n   * properties.\n   */\n  private static class ExtendedResourceImpl extends ResourceImpl {\n\n    // ----- Constructors ----------------------------------------------------\n\n    /**\n     * Constructor\n     *\n     * @param resource            the resource to copy\n     * @param extendedProperties  the map of extended properties\n     */\n    public ExtendedResourceImpl(Resource resource, Map<String, Object> extendedProperties) {\n      super(resource);\n      initProperties(extendedProperties);\n    }\n\n    // ----- utility methods -------------------------------------------------\n\n    /**\n     *  Initialize this resource by setting the extended properties.\n     */\n    private void initProperties(Map<String, Object> extendedProperties) {\n      for (Map.Entry<String, Object> entry : extendedProperties.entrySet()) {\n        setProperty(entry.getKey(), entry.getValue());\n      }\n    }\n  }\n}<fim_middle>// function below has no smell\n"}