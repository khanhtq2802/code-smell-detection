{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.tinkerpop.gremlin.driver.ser.binary.types;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.CompositeByteBuf;\nimport org.apache.tinkerpop.gremlin.driver.ser.SerializationException;\nimport org.apache.tinkerpop.gremlin.driver.ser.binary.DataType;\nimport org.apache.tinkerpop.gremlin.driver.ser.binary.GraphBinaryReader;\nimport org.apache.tinkerpop.gremlin.driver.ser.binary.GraphBinaryWriter;\nimport org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet;\n\nimport java.util.Map;\n\n/**\n * @author Stephen Mallette (http://stephen.genoprime.com)\n */\n<fim_suffix>public class BulkSetSerializer extends SimpleTypeSerializer<BulkSet> {\n    public BulkSetSerializer() {\n        super(DataType.BULKSET);\n    }\n\n    @Override\n    protected BulkSet readValue(final ByteBuf buffer, final GraphBinaryReader context) throws SerializationException {\n        final int length = buffer.readInt();\n\n        final BulkSet result = new BulkSet();\n        for (int i = 0; i < length; i++) {\n            result.add(context.read(buffer), buffer.readLong());\n        }\n\n        return result;\n    }\n\n    @Override\n    protected void writeValue(final BulkSet value, final ByteBuf buffer, final GraphBinaryWriter context) throws SerializationException {\n        final Map<Object,Long> raw = value.asBulk();\n        buffer.writeInt(raw.size());\n\n        for (Object key : raw.keySet()) {\n            context.write(key, buffer);\n            buffer.writeLong(value.get(key));\n        }\n    }\n}<fim_middle>// class below has no smell\n"}