{"text": "<fim_prefix>// Copyright 2008-2013 The Apache Software Foundation\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage org.apache.tapestry5.internal.services;\n\nimport org.apache.tapestry5.Link;\nimport org.apache.tapestry5.LinkSecurity;\nimport org.apache.tapestry5.MetaDataConstants;\nimport org.apache.tapestry5.SymbolConstants;\nimport org.apache.tapestry5.ioc.annotations.Symbol;\nimport org.apache.tapestry5.services.*;\n\nimport java.io.IOException;\n\n<fim_suffix>public class RequestSecurityManagerImpl implements RequestSecurityManager\n{\n    private final Request request;\n\n    private final Response response;\n\n    private final MetaDataLocator locator;\n\n    private final boolean securityEnabled;\n\n    private final ComponentEventLinkEncoder componentEventLinkEncoder;\n\n    public RequestSecurityManagerImpl(Request request, Response response,\n                                      ComponentEventLinkEncoder componentEventLinkEncoder, MetaDataLocator locator, @Symbol(SymbolConstants.SECURE_ENABLED)\n    boolean securityEnabled)\n    {\n        this.request = request;\n        this.response = response;\n        this.componentEventLinkEncoder = componentEventLinkEncoder;\n        this.locator = locator;\n        this.securityEnabled = securityEnabled;\n    }\n\n    public boolean checkForInsecureComponentEventRequest(ComponentEventRequestParameters parameters) throws IOException\n    {\n        if (!needsRedirect(parameters.getActivePageName()))\n        {\n            return false;\n        }\n\n        // Page is secure but request is not, so redirect.\n        // We can safely ignore the forForm parameter since secure form requests are always done from\n        // an already secured page\n\n        Link link = componentEventLinkEncoder.createComponentEventLink(parameters, false);\n\n        response.sendRedirect(link);\n\n        return true;\n    }\n\n    public boolean checkForInsecurePageRenderRequest(PageRenderRequestParameters parameters) throws IOException\n    {\n        if (!needsRedirect(parameters.getLogicalPageName()))\n            return false;\n\n        // Page is secure but request is not, so redirect.\n\n        Link link = componentEventLinkEncoder.createPageRenderLink(parameters);\n\n        response.sendRedirect(link);\n\n        return true;\n    }\n\n    private boolean needsRedirect(String pageName)\n    {\n        if (!securityEnabled)\n        {\n            return false;\n        }\n\n        // We don't (at this time) redirect from secure to insecure, just from insecure to secure.\n\n        if (request.isSecure())\n        {\n            return false;\n        }\n\n        if (!isSecure(pageName))\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    private boolean isSecure(String pageName)\n    {\n        return locator.findMeta(MetaDataConstants.SECURE_PAGE, pageName, Boolean.class);\n    }\n\n    public LinkSecurity checkPageSecurity(String pageName)\n    {\n        if (!securityEnabled)\n        {\n            return request.isSecure() ? LinkSecurity.SECURE : LinkSecurity.INSECURE;\n        }\n\n        boolean securePage = isSecure(pageName);\n\n        if (request.isSecure() == securePage)\n        {\n            return securePage ? LinkSecurity.SECURE : LinkSecurity.INSECURE;\n        }\n\n        // Return a value that will, ultimately, force an absolute URL.\n\n        return securePage ? LinkSecurity.FORCE_SECURE : LinkSecurity.FORCE_INSECURE;\n    }\n}<fim_middle>// class below has no smell\n"}