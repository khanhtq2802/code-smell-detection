{"text": "<fim_prefix>/*\n   Copyright (c) 2014 LinkedIn Corp.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n */\n\npackage com.linkedin.restli.internal.server.filter;\n\n\nimport com.linkedin.data.DataMap;\nimport com.linkedin.data.schema.RecordDataSchema;\nimport com.linkedin.data.template.DataTemplateUtil;\nimport com.linkedin.data.transform.filter.request.MaskTree;\nimport com.linkedin.restli.common.ProtocolVersion;\nimport com.linkedin.restli.common.ResourceMethod;\nimport com.linkedin.restli.internal.server.ServerResourceContext;\nimport com.linkedin.restli.internal.server.model.ResourceMethodDescriptor;\nimport com.linkedin.restli.server.PathKeys;\nimport com.linkedin.restli.server.ProjectionMode;\nimport com.linkedin.restli.server.RestLiRequestData;\nimport com.linkedin.restli.server.annotations.ReturnEntity;\nimport com.linkedin.restli.server.filter.FilterResourceModel;\n\nimport java.lang.reflect.Method;\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\n\n/**\n * @author nshankar\n */\n@SuppressWarnings(\"deprecation\")\n// TODO: Change to implementing FilterRequestContext and rename to FilterRequestContextImpl\npublic class FilterRequestContextInternalImpl implements FilterRequestContextInternal\n{\n  private RestLiRequestData _requestData;\n  private final ServerResourceContext _context;\n  private final ResourceMethodDescriptor _resourceMethod;\n  private final Map<String, Object> _scratchPad;\n  private final FilterResourceModel _resourceModel;\n\n  // Collection specific\n  private final RecordDataSchema _collectionCustomTypeSchema;\n\n  /**\n   * @deprecated Use {@link #FilterRequestContextInternalImpl(ServerResourceContext, ResourceMethodDescriptor, RestLiRequestData)}\n   *             and pass in RestLiRequestData.\n   */\n  @Deprecated\n  // TODO: Remove this constructor once external use are removed.\n  public FilterRequestContextInternalImpl(final ServerResourceContext context,\n      final ResourceMethodDescriptor resourceMethod)\n  {\n    this(context, resourceMethod, null);\n  }\n\n  public FilterRequestContextInternalImpl(final ServerResourceContext context,\n      final ResourceMethodDescriptor resourceMethod,\n      final RestLiRequestData requestData)\n  {\n    _context = context;\n    _resourceMethod = resourceMethod;\n    _requestData = requestData;\n    _scratchPad = new HashMap<>();\n    _resourceModel = new FilterResourceModelImpl(resourceMethod.getResourceModel());\n    _collectionCustomTypeSchema = resourceMethod.getCollectionCustomMetadataType() == null ? null : (RecordDataSchema) DataTemplateUtil.getSchema(resourceMethod.getCollectionCustomMetadataType());\n  }\n\n  @Override\n  public String getResourceName()\n  {\n    return getFilterResourceModel().getResourceName();\n  }\n\n  @Override\n  public ProjectionMode getProjectionMode()\n  {\n    return _context.getProjectionMode();\n  }\n\n  @Override\n  public MaskTree getProjectionMask()\n  {\n    return _context.getProjectionMask();\n  }\n\n  @Override\n  public MaskTree getMetadataProjectionMask()\n  {\n    return _context.getMetadataProjectionMask();\n  }\n\n  @Override\n  public MaskTree getPagingProjectionMask()\n  {\n    return _context.getPagingProjectionMask();\n  }\n\n  @Override\n  public void setProjectionMask(MaskTree projectionMask)\n  {\n    _context.setProjectionMask(projectionMask);\n  }\n\n  @Override\n  public void setMetadataProjectionMask(MaskTree metadataProjectionMask)\n  {\n    _context.setMetadataProjectionMask(metadataProjectionMask);\n  }\n\n  @Override\n  public void setPagingProjectionMask(MaskTree pagingProjectionMask)\n  {\n    _context.setPagingProjectionMask(pagingProjectionMask);\n  }\n\n  @Override\n  public PathKeys getPathKeys()\n  {\n    return _context.getPathKeys();\n  }\n\n  @Override\n  public String getResourceNamespace()\n  {\n    return getFilterResourceModel().getResourceNamespace();\n  }\n\n  @Override\n  public ResourceMethod getMethodType()\n  {\n    return _resourceMethod.getMethodType();\n  }\n\n  @Override\n  public Map<String, String> getRequestHeaders()\n  {\n    return _context.getRequestHeaders();\n  }\n\n  @Override\n  public DataMap getCustomAnnotations()\n  {\n    return _resourceMethod.getCustomAnnotationData();\n  }\n\n  @Override\n  public URI getRequestURI()\n  {\n    return _context.getRequestURI();\n  }\n\n  @Override\n  public ProtocolVersion getRestliProtocolVersion()\n  {\n    return _context.getRestliProtocolVersion();\n  }\n\n  @Override\n  public DataMap getQueryParameters()\n  {\n    return _context.getParameters();\n  }\n\n  @Override\n  public RestLiRequestData getRequestData()\n  {\n    return _requestData;\n  }\n\n  @Override\n  @Deprecated\n  public void setRequestData(RestLiRequestData data)\n  {\n    _requestData = data;\n  }\n\n  @Override\n  public Map<String, Object> getFilterScratchpad()\n  {\n    return _scratchPad;\n  }\n\n  @Override\n  public String getFinderName()\n  {\n    return _resourceMethod.getFinderName();\n  }\n\n  @Override\n  public String getActionName()\n  {\n    return _resourceMethod.getActionName();\n  }\n\n  @Override\n  public FilterResourceModel getFilterResourceModel()\n  {\n    return _resourceModel;\n  }\n\n  @Override\n  public RecordDataSchema getCollectionCustomMetadataSchema()\n  {\n    return _collectionCustomTypeSchema;\n  }\n\n  @Override\n  public RecordDataSchema getActionRequestSchema()\n  {\n    return _resourceMethod.getRequestDataSchema();\n  }\n\n  @Override\n  public RecordDataSchema getActionResponseSchema()\n  {\n    return _resourceMethod.getActionReturnRecordDataSchema();\n  }\n\n  @Override\n  public Method getMethod()\n  {\n    return _resourceMethod.getMethod();\n  }\n\n<fim_suffix>  @Override\n  public Map<String, Object> getRequestContextLocalAttrs()\n  {\n    return Collections.unmodifiableMap(_context.getRawRequestContext().getLocalAttrs());\n  }\n\n  @Override\n  public Optional<Object> getCustomContextData(String key)\n  {\n    return _context.getCustomContextData(key);\n  }\n\n  @Override\n  public void putCustomContextData(String key, Object data)\n  {\n    _context.putCustomContextData(key, data);\n  }\n\n  @Override\n  public Optional<Object> removeCustomContextData(String key)\n  {\n    return _context.removeCustomContextData(key);\n  }\n\n  @Override\n  public boolean isReturnEntityMethod()\n  {\n    return _resourceMethod.getCustomAnnotationData().containsKey(ReturnEntity.NAME);\n  }\n}<fim_middle>// function below has no smell\n"}