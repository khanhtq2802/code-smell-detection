{"text": "<fim_prefix>            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveCompactions_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.success != null) {\n          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);\n          {\n            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));\n            for (ActiveCompaction _iter375 : struct.success)\n            {\n              _iter375.write(oprot);\n            }\n            oprot.writeListEnd();\n          }\n          oprot.writeFieldEnd();\n        }\n        if (struct.ouch1 != null) {\n          oprot.writeFieldBegin(OUCH1_FIELD_DESC);\n          struct.ouch1.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ouch2 != null) {\n          oprot.writeFieldBegin(OUCH2_FIELD_DESC);\n          struct.ouch2.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class getActiveCompactions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n      public getActiveCompactions_resultTupleScheme getScheme() {\n        return new getActiveCompactions_resultTupleScheme();\n      }\n    }\n    private static class getActiveCompactions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getActiveCompactions_result> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveCompactions_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n        java.util.BitSet optionals = new java.util.BitSet();\n        if (struct.isSetSuccess()) {\n          optionals.set(0);\n        }\n        if (struct.isSetOuch1()) {\n          optionals.set(1);\n        }\n        if (struct.isSetOuch2()) {\n          optionals.set(2);\n        }\n        oprot.writeBitSet(optionals, 3);\n        if (struct.isSetSuccess()) {\n          {\n            oprot.writeI32(struct.success.size());\n            for (ActiveCompaction _iter376 : struct.success)\n            {\n              _iter376.write(oprot);\n            }\n          }\n        }\n        if (struct.isSetOuch1()) {\n          struct.ouch1.write(oprot);\n        }\n        if (struct.isSetOuch2()) {\n          struct.ouch2.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveCompactions_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n        java.util.BitSet incoming = iprot.readBitSet(3);\n        if (incoming.get(0)) {\n          {\n            org.apache.thrift.protocol.TList _list377 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());\n            struct.success = new java.util.ArrayList<ActiveCompaction>(_list377.size);\n            @org.apache.thrift.annotation.Nullable ActiveCompaction _elem378;\n            for (int _i379 = 0; _i379 < _list377.size; ++_i379)\n            {\n              _elem378 = new ActiveCompaction();\n              _elem378.read(iprot);\n              struct.success.add(_elem378);\n            }\n          }\n          struct.setSuccessIsSet(true);\n        }\n        if (incoming.get(1)) {\n          struct.ouch1 = new AccumuloException();\n          struct.ouch1.read(iprot);\n          struct.setOuch1IsSet(true);\n        }\n        if (incoming.get(2)) {\n          struct.ouch2 = new AccumuloSecurityException();\n          struct.ouch2.read(iprot);\n          struct.setOuch2IsSet(true);\n        }\n      }\n    }\n    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {\n      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();\n    }\n  }\n  public static class getSiteConfiguration_args implements org.apache.thrift.TBase<getSiteConfiguration_args, getSiteConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSiteConfiguration_args>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"getSiteConfiguration_args\");\n    private static final org.apache.thrift.protocol.TField LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField(\"login\", org.apache.thrift.protocol.TType.STRING, (short)1);\n    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSiteConfiguration_argsStandardSchemeFactory();\n    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSiteConfiguration_argsTupleSchemeFactory();\n    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer login; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      LOGIN((short)1, \"login\");\n      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n      static {\n        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // LOGIN\n            return LOGIN;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByName(java.lang.String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final java.lang.String _fieldName;\n      _Fields(short thriftId, java.lang.String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public java.lang.String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.LOGIN, new org.apache.thrift.meta_data.FieldMetaData(\"login\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));\n      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSiteConfiguration_args.class, metaDataMap);\n    }\n    public getSiteConfiguration_args() {\n    }\n<fim_suffix>    public getSiteConfiguration_args(\n      java.nio.ByteBuffer login)\n    {\n      this();\n      this.login = org.apache.thrift.TBaseHelper.copyBinary(login);\n    }<fim_middle>// function below has no smell\n"}