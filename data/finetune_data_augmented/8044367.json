{"text": "<fim_prefix>\t\tprivate final RuleCall cSquareBracketExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);\n\t\tprivate final RuleCall cSelfExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);\n\t\tprivate final RuleCall cPrimitiveLiteralExpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);\n\t\tprivate final RuleCall cTupleLiteralExpParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);\n\t\tprivate final RuleCall cCollectionLiteralExpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);\n\t\tprivate final RuleCall cPreExpParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);\n\t\tprivate final RuleCall cTypeExpParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);\n\t\tprivate final RuleCall cIfExpParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);\n\t\tprivate final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);\n\t\tprivate final Keyword cLeftParenthesisKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);\n\t\tprivate final Action cNestedExpAction_9_1 = (Action)cGroup_9.eContents().get(1);\n\t\tprivate final Assignment cSourceAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);\n\t\tprivate final RuleCall cSourceExpressionParserRuleCall_9_2_0 = (RuleCall)cSourceAssignment_9_2.eContents().get(0);\n\t\tprivate final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);\n\t\t//SubNavigationExp Expression:\n\t\t//\tRoundBracketExp\n\t\t//\t| SquareBracketExp\n\t\t//\t| SelfExp\n\t\t//\t| PrimitiveLiteralExp\n\t\t//\t| TupleLiteralExp\n\t\t//\t| CollectionLiteralExp\n\t\t//\t| PreExp\n\t\t//\t| TypeExp\n\t\t//\t| IfExp\n\t\t//\t| '(' {NestedExp} source=Expression ')';\n\t\t@Override public ParserRule getRule() { return rule; }\n\t\t//RoundBracketExp | SquareBracketExp | SelfExp | PrimitiveLiteralExp | TupleLiteralExp | CollectionLiteralExp | PreExp |\n\t\t//TypeExp | IfExp | '(' {NestedExp} source=Expression ')'\n\t\tpublic Alternatives getAlternatives() { return cAlternatives; }\n\t\t//RoundBracketExp\n\t\tpublic RuleCall getRoundBracketExpParserRuleCall_0() { return cRoundBracketExpParserRuleCall_0; }\n\t\t//SquareBracketExp\n\t\tpublic RuleCall getSquareBracketExpParserRuleCall_1() { return cSquareBracketExpParserRuleCall_1; }\n\t\t//SelfExp\n\t\tpublic RuleCall getSelfExpParserRuleCall_2() { return cSelfExpParserRuleCall_2; }\n\t\t//PrimitiveLiteralExp\n\t\tpublic RuleCall getPrimitiveLiteralExpParserRuleCall_3() { return cPrimitiveLiteralExpParserRuleCall_3; }\n\t\t//TupleLiteralExp\n\t\tpublic RuleCall getTupleLiteralExpParserRuleCall_4() { return cTupleLiteralExpParserRuleCall_4; }\n\t\t//CollectionLiteralExp\n\t\tpublic RuleCall getCollectionLiteralExpParserRuleCall_5() { return cCollectionLiteralExpParserRuleCall_5; }\n\t\t//PreExp\n\t\tpublic RuleCall getPreExpParserRuleCall_6() { return cPreExpParserRuleCall_6; }\n\t\t//TypeExp\n\t\tpublic RuleCall getTypeExpParserRuleCall_7() { return cTypeExpParserRuleCall_7; }\n\t\t//IfExp\n\t\tpublic RuleCall getIfExpParserRuleCall_8() { return cIfExpParserRuleCall_8; }\n\t\t//'(' {NestedExp} source=Expression ')'\n\t\tpublic Group getGroup_9() { return cGroup_9; }\n\t\t//'('\n\t\tpublic Keyword getLeftParenthesisKeyword_9_0() { return cLeftParenthesisKeyword_9_0; }\n\t\t//{NestedExp}\n\t\tpublic Action getNestedExpAction_9_1() { return cNestedExpAction_9_1; }\n\t\t//source=Expression\n\t\tpublic Assignment getSourceAssignment_9_2() { return cSourceAssignment_9_2; }\n\t\t//Expression\n\t\tpublic RuleCall getSourceExpressionParserRuleCall_9_2_0() { return cSourceExpressionParserRuleCall_9_2_0; }\n\t\t//')'\n\t\tpublic Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }\n\t}\n\tpublic class SubNavigatingExpElements extends AbstractParserRuleElementFinder {\n\t\tprivate final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), \"org.eclipse.xtext.ui.tests.editor.contentassist.BacktrackingContentAssistTestLanguage.SubNavigatingExp\");\n\t\tprivate final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);\n\t\tprivate final RuleCall cRoundBracketExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);\n\t\tprivate final RuleCall cSquareBracketExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);\n\t\tprivate final RuleCall cPreExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);\n\t\tprivate final RuleCall cNameExpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);\n\t\t//SubNavigatingExp Expression:\n\t\t//\tRoundBracketExp\n\t\t//\t| SquareBracketExp\n\t\t//\t| PreExp\n\t\t//\t| NameExp;\n\t\t@Override public ParserRule getRule() { return rule; }\n\t\t//RoundBracketExp | SquareBracketExp | PreExp | NameExp\n\t\tpublic Alternatives getAlternatives() { return cAlternatives; }\n\t\t//RoundBracketExp\n\t\tpublic RuleCall getRoundBracketExpParserRuleCall_0() { return cRoundBracketExpParserRuleCall_0; }\n\t\t//SquareBracketExp\n\t\tpublic RuleCall getSquareBracketExpParserRuleCall_1() { return cSquareBracketExpParserRuleCall_1; }\n\t\t//PreExp\n\t\tpublic RuleCall getPreExpParserRuleCall_2() { return cPreExpParserRuleCall_2; }\n\t\t//NameExp\n\t\tpublic RuleCall getNameExpParserRuleCall_3() { return cNameExpParserRuleCall_3; }\n\t}\n<fim_suffix>\tpublic class IteratorVariableElements extends AbstractParserRuleElementFinder {\n\t\tprivate final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), \"org.eclipse.xtext.ui.tests.editor.contentassist.BacktrackingContentAssistTestLanguage.iteratorVariable\");\n\t\tprivate final Group cGroup = (Group)rule.eContents().get(1);\n\t\tprivate final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);\n\t\tprivate final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);\n\t\tprivate final Group cGroup_1 = (Group)cGroup.eContents().get(1);\n\t\tprivate final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);\n\t\tprivate final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);\n\t\tprivate final RuleCall cTypeTypeExpParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);\n\t\t//iteratorVariable:\n\t\t//\tname=Identifier (':' type=TypeExp)?;\n\t\t@Override public ParserRule getRule() { return rule; }\n\t\t//name=Identifier (':' type=TypeExp)?\n\t\tpublic Group getGroup() { return cGroup; }\n\t\t//name=Identifier\n\t\tpublic Assignment getNameAssignment_0() { return cNameAssignment_0; }\n\t\t//Identifier\n\t\tpublic RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }\n\t\t//(':' type=TypeExp)?\n\t\tpublic Group getGroup_1() { return cGroup_1; }\n\t\t//':'\n\t\tpublic Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }\n\t\t//type=TypeExp\n\t\tpublic Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }\n\t\t//TypeExp\n\t\tpublic RuleCall getTypeTypeExpParserRuleCall_1_1_0() { return cTypeTypeExpParserRuleCall_1_1_0; }\n\t}<fim_middle>// class below is data class\n"}