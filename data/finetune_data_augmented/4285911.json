{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.crunch.contrib.text;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Base class for the common case {@code Extractor} instances that construct a single\n * object from a block of text stored in a {@code String}, with support for error handling\n * and reporting. \n */\n<fim_suffix>public abstract class AbstractSimpleExtractor<T> implements Extractor<T> {\n\n  private static final Logger LOG = LoggerFactory.getLogger(AbstractSimpleExtractor.class);\n  private static final int LOG_ERROR_LIMIT = 100;\n  \n  private int errors;\n  private boolean errorOnLast;\n  private final T defaultValue;\n  private final TokenizerFactory scannerFactory;\n  \n  protected AbstractSimpleExtractor(T defaultValue) {\n    this(defaultValue, TokenizerFactory.getDefaultInstance());\n  }\n  \n  protected AbstractSimpleExtractor(T defaultValue, TokenizerFactory scannerFactory) {\n    this.defaultValue = defaultValue;\n    this.scannerFactory = scannerFactory;\n  }\n\n  @Override\n  public void initialize() {\n    this.errors = 0;\n    this.errorOnLast = false;\n  }\n  \n  @Override\n  public T extract(String input) {\n    errorOnLast = false;\n    T res = defaultValue;\n    try {\n      res = doExtract(scannerFactory.create(input));\n    } catch (Exception e) {\n      errorOnLast = true;\n      errors++;\n      if (errors < LOG_ERROR_LIMIT) {\n        LOG.error(\"Error occurred parsing input '{}' using extractor {}\", input, this);\n      }\n    }\n    return res;\n  }\n\n  @Override\n  public boolean errorOnLastRecord() {\n    return errorOnLast;\n  }\n  \n  @Override\n  public T getDefaultValue() {\n    return defaultValue;\n  }\n  \n  @Override\n  public ExtractorStats getStats() {\n    return new ExtractorStats(errors);\n  }\n  \n  /**\n   * Subclasses must override this method to return a new instance of the\n   * class that this {@code Extractor} instance is designed to parse.\n   * <p>Any runtime parsing exceptions from the given {@code Tokenizer} instance\n   * should be thrown so that they may be caught by the error handling logic\n   * inside of this class.\n   * \n   * @param tokenizer The {@code Tokenizer} instance for the current record\n   * @return A new instance of the type defined for this class\n   */\n  protected abstract T doExtract(Tokenizer tokenizer);\n}<fim_middle>// class below is blob\n"}