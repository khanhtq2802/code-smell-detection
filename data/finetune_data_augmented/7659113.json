{"text": "<fim_prefix>/*\n * Copyright 2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage demo.persist;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.messaging.Message;\nimport org.springframework.messaging.support.MessageBuilder;\nimport org.springframework.statemachine.StateMachine;\nimport org.springframework.statemachine.recipes.persist.PersistStateMachineHandler;\nimport org.springframework.statemachine.recipes.persist.PersistStateMachineHandler.PersistStateChangeListener;\nimport org.springframework.statemachine.state.State;\nimport org.springframework.statemachine.transition.Transition;\n\nimport demo.persist.Application.Order;\n\npublic class Persist {\n\n\tprivate final PersistStateMachineHandler handler;\n\n//tag::snippetA[]\n\t@Autowired\n\tprivate JdbcTemplate jdbcTemplate;\n//end::snippetA[]\n\n\tprivate final PersistStateChangeListener listener = new LocalPersistStateChangeListener();\n\n\tpublic Persist(PersistStateMachineHandler handler) {\n\t\tthis.handler = handler;\n\t\tthis.handler.addPersistStateChangeListener(listener);\n\t}\n\n\tpublic String listDbEntries() {\n\t\tList<Order> orders = jdbcTemplate.query(\n\t\t        \"select id, state from orders\",\n\t\t        new RowMapper<Order>() {\n\t\t            public Order mapRow(ResultSet rs, int rowNum) throws SQLException {\n\t\t            \treturn new Order(rs.getInt(\"id\"), rs.getString(\"state\"));\n\t\t            }\n\t\t        });\n\t\tStringBuilder buf = new StringBuilder();\n\t\tfor (Order order : orders) {\n\t\t\tbuf.append(order);\n\t\t\tbuf.append(\"\\n\");\n\t\t}\n\t\treturn buf.toString();\n\t}\n\n//tag::snippetB[]\n\tpublic void change(int order, String event) {\n\t\tOrder o = jdbcTemplate.queryForObject(\"select id, state from orders where id = ?\", new Object[] { order },\n\t\t\t\tnew RowMapper<Order>() {\n\t\t\t\t\tpublic Order mapRow(ResultSet rs, int rowNum) throws SQLException {\n\t\t\t\t\t\treturn new Order(rs.getInt(\"id\"), rs.getString(\"state\"));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\thandler.handleEventWithState(MessageBuilder.withPayload(event).setHeader(\"order\", order).build(), o.state);\n\t}\n\n\t//end::snippetB[]\n\n//tag::snippetC[]\n<fim_suffix>\tprivate class LocalPersistStateChangeListener implements PersistStateChangeListener {\n\n\t\t@Override\n\t\tpublic void onPersist(State<String, String> state, Message<String> message,\n\t\t\t\tTransition<String, String> transition, StateMachine<String, String> stateMachine) {\n\t\t\tif (message != null && message.getHeaders().containsKey(\"order\")) {\n\t\t\t\tInteger order = message.getHeaders().get(\"order\", Integer.class);\n\t\t\t\tjdbcTemplate.update(\"update orders set state = ? where id = ?\", state.getId(), order);\n\t\t\t}\n\t\t}\n\t}\n//end::snippetC[]\n\n}<fim_middle>// class below has no smell\n"}