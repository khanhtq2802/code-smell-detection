{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.nifi.controller;\n\nimport org.apache.nifi.annotation.lifecycle.OnDisabled;\nimport org.apache.nifi.annotation.lifecycle.OnEnabled;\nimport org.apache.nifi.components.AbstractConfigurableComponent;\nimport org.apache.nifi.components.PropertyDescriptor;\nimport org.apache.nifi.components.PropertyValue;\nimport org.apache.nifi.components.state.StateManager;\nimport org.apache.nifi.logging.ComponentLog;\nimport org.apache.nifi.reporting.InitializationException;\n\n<fim_suffix>public abstract class AbstractControllerService extends AbstractConfigurableComponent implements ControllerService {\n\n    private String identifier;\n    private ControllerServiceLookup serviceLookup;\n    private ComponentLog logger;\n    private StateManager stateManager;\n    private volatile ConfigurationContext configurationContext;\n    private volatile boolean enabled = false;\n\n    @Override\n    public final void initialize(final ControllerServiceInitializationContext context) throws InitializationException {\n        this.identifier = context.getIdentifier();\n        serviceLookup = context.getControllerServiceLookup();\n        logger = context.getLogger();\n        stateManager = context.getStateManager();\n        init(context);\n    }\n\n    @Override\n    public String getIdentifier() {\n        return identifier;\n    }\n\n    /**\n     * @return the {@link ControllerServiceLookup} that was passed to the\n     * {@link #init(ControllerServiceInitializationContext)} method\n     */\n    protected final ControllerServiceLookup getControllerServiceLookup() {\n        return serviceLookup;\n    }\n\n    /**\n     * Provides a mechanism by which subclasses can perform initialization of\n     * the Controller Service before it is scheduled to be run\n     *\n     * @param config of initialization context\n     * @throws InitializationException if unable to init\n     */\n    protected void init(final ControllerServiceInitializationContext config) throws InitializationException {\n    }\n\n    @OnEnabled\n    public final void enabled() {\n        this.enabled = true;\n    }\n\n    @OnDisabled\n    public final void disabled() {\n        this.enabled = false;\n    }\n\n    public boolean isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * @return the logger that has been provided to the component by the\n     * framework in its initialize method\n     */\n    protected ComponentLog getLogger() {\n        return logger;\n    }\n\n    /**\n     * @return the StateManager that can be used to store and retrieve state for this Controller Service\n     */\n    protected StateManager getStateManager() {\n        return stateManager;\n    }\n\n    @OnEnabled\n    public final void abstractStoreConfigContext(final ConfigurationContext configContext) {\n        this.configurationContext = configContext;\n    }\n\n    @OnDisabled\n    public final void abstractClearConfigContext() {\n        this.configurationContext = null;\n    }\n\n    protected ConfigurationContext getConfigurationContext() {\n        final ConfigurationContext context = this.configurationContext;\n        if (context == null) {\n            throw new IllegalStateException(\"No Configuration Context exists\");\n        }\n\n        return configurationContext;\n    }\n\n    protected PropertyValue getProperty(final PropertyDescriptor descriptor) {\n        return getConfigurationContext().getProperty(descriptor);\n    }\n}<fim_middle>// class below is data class and blob\n"}