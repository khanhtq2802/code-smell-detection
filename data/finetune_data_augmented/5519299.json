{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.broker.slave;\n\nimport java.io.IOException;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.logging.InternalLogger;\nimport org.apache.rocketmq.logging.InternalLoggerFactory;\nimport org.apache.rocketmq.common.protocol.body.ConsumerOffsetSerializeWrapper;\nimport org.apache.rocketmq.common.protocol.body.SubscriptionGroupWrapper;\nimport org.apache.rocketmq.common.protocol.body.TopicConfigSerializeWrapper;\nimport org.apache.rocketmq.store.config.StorePathConfigHelper;\n\n<fim_suffix>public class SlaveSynchronize {\n    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n    private final BrokerController brokerController;\n    private volatile String masterAddr = null;\n\n    public SlaveSynchronize(BrokerController brokerController) {\n        this.brokerController = brokerController;\n    }\n\n    public String getMasterAddr() {\n        return masterAddr;\n    }\n\n    public void setMasterAddr(String masterAddr) {\n        this.masterAddr = masterAddr;\n    }\n\n    public void syncAll() {\n        this.syncTopicConfig();\n        this.syncConsumerOffset();\n        this.syncDelayOffset();\n        this.syncSubscriptionGroupConfig();\n    }\n\n    private void syncTopicConfig() {\n        String masterAddrBak = this.masterAddr;\n        if (masterAddrBak != null && !masterAddrBak.equals(brokerController.getBrokerAddr())) {\n            try {\n                TopicConfigSerializeWrapper topicWrapper =\n                    this.brokerController.getBrokerOuterAPI().getAllTopicConfig(masterAddrBak);\n                if (!this.brokerController.getTopicConfigManager().getDataVersion()\n                    .equals(topicWrapper.getDataVersion())) {\n\n                    this.brokerController.getTopicConfigManager().getDataVersion()\n                        .assignNewOne(topicWrapper.getDataVersion());\n                    this.brokerController.getTopicConfigManager().getTopicConfigTable().clear();\n                    this.brokerController.getTopicConfigManager().getTopicConfigTable()\n                        .putAll(topicWrapper.getTopicConfigTable());\n                    this.brokerController.getTopicConfigManager().persist();\n\n                    log.info(\"Update slave topic config from master, {}\", masterAddrBak);\n                }\n            } catch (Exception e) {\n                log.error(\"SyncTopicConfig Exception, {}\", masterAddrBak, e);\n            }\n        }\n    }\n\n    private void syncConsumerOffset() {\n        String masterAddrBak = this.masterAddr;\n        if (masterAddrBak != null && !masterAddrBak.equals(brokerController.getBrokerAddr())) {\n            try {\n                ConsumerOffsetSerializeWrapper offsetWrapper =\n                    this.brokerController.getBrokerOuterAPI().getAllConsumerOffset(masterAddrBak);\n                this.brokerController.getConsumerOffsetManager().getOffsetTable()\n                    .putAll(offsetWrapper.getOffsetTable());\n                this.brokerController.getConsumerOffsetManager().persist();\n                log.info(\"Update slave consumer offset from master, {}\", masterAddrBak);\n            } catch (Exception e) {\n                log.error(\"SyncConsumerOffset Exception, {}\", masterAddrBak, e);\n            }\n        }\n    }\n\n    private void syncDelayOffset() {\n        String masterAddrBak = this.masterAddr;\n        if (masterAddrBak != null && !masterAddrBak.equals(brokerController.getBrokerAddr())) {\n            try {\n                String delayOffset =\n                    this.brokerController.getBrokerOuterAPI().getAllDelayOffset(masterAddrBak);\n                if (delayOffset != null) {\n\n                    String fileName =\n                        StorePathConfigHelper.getDelayOffsetStorePath(this.brokerController\n                            .getMessageStoreConfig().getStorePathRootDir());\n                    try {\n                        MixAll.string2File(delayOffset, fileName);\n                    } catch (IOException e) {\n                        log.error(\"Persist file Exception, {}\", fileName, e);\n                    }\n                }\n                log.info(\"Update slave delay offset from master, {}\", masterAddrBak);\n            } catch (Exception e) {\n                log.error(\"SyncDelayOffset Exception, {}\", masterAddrBak, e);\n            }\n        }\n    }\n\n    private void syncSubscriptionGroupConfig() {\n        String masterAddrBak = this.masterAddr;\n        if (masterAddrBak != null  && !masterAddrBak.equals(brokerController.getBrokerAddr())) {\n            try {\n                SubscriptionGroupWrapper subscriptionWrapper =\n                    this.brokerController.getBrokerOuterAPI()\n                        .getAllSubscriptionGroupConfig(masterAddrBak);\n\n                if (!this.brokerController.getSubscriptionGroupManager().getDataVersion()\n                    .equals(subscriptionWrapper.getDataVersion())) {\n                    SubscriptionGroupManager subscriptionGroupManager =\n                        this.brokerController.getSubscriptionGroupManager();\n                    subscriptionGroupManager.getDataVersion().assignNewOne(\n                        subscriptionWrapper.getDataVersion());\n                    subscriptionGroupManager.getSubscriptionGroupTable().clear();\n                    subscriptionGroupManager.getSubscriptionGroupTable().putAll(\n                        subscriptionWrapper.getSubscriptionGroupTable());\n                    subscriptionGroupManager.persist();\n                    log.info(\"Update slave Subscription Group from master, {}\", masterAddrBak);\n                }\n            } catch (Exception e) {\n                log.error(\"SyncSubscriptionGroup Exception, {}\", masterAddrBak, e);\n            }\n        }\n    }\n}<fim_middle>// class below has no smell\n"}