{"text": "<fim_prefix>/*\n * Copyright 2014-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.integration.expression;\n\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.expression.EvaluationContext;\nimport org.springframework.expression.EvaluationException;\nimport org.springframework.expression.Expression;\nimport org.springframework.expression.TypedValue;\nimport org.springframework.util.Assert;\n\n/**\n * A very simple hardcoded implementation of the {@link Expression} interface that represents an\n * immutable value. It is used as value holder in the context of expression evaluation.\n *\n * @param <V> - The expected value type.\n *\n * @author Artem Bilan\n * @author Gary Russell\n * @since 4.0\n */\npublic class ValueExpression<V> implements Expression {\n\n\t/** Fixed value of this expression */\n\tprivate final V value;\n\n\tprivate final Class<V> aClass;\n\n\tprivate final TypedValue typedResultValue;\n\n\tprivate final TypeDescriptor typeDescriptor;\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic ValueExpression(V value) {\n\t\tAssert.notNull(value, \"'value' must not be null\");\n\t\tthis.value = value;\n\t\tthis.aClass = (Class<V>) this.value.getClass();\n\t\tthis.typedResultValue = new TypedValue(this.value);\n\t\tthis.typeDescriptor = this.typedResultValue.getTypeDescriptor();\n\t}\n\n\t@Override\n\tpublic V getValue() throws EvaluationException {\n\t\treturn this.value;\n\t}\n\n\t@Override\n\tpublic V getValue(Object rootObject) throws EvaluationException {\n\t\treturn this.value;\n\t}\n\n\t@Override\n\tpublic V getValue(EvaluationContext context) throws EvaluationException {\n\t\treturn this.value;\n\t}\n\n\t@Override\n\tpublic V getValue(EvaluationContext context, Object rootObject) throws EvaluationException {\n\t\treturn this.value;\n\t}\n\n\t@Override\n\tpublic <T> T getValue(Object rootObject, Class<T> desiredResultType) throws EvaluationException {\n\t\treturn getValue(desiredResultType);\n\t}\n\n<fim_suffix>\t@Override\n\tpublic <T> T getValue(Class<T> desiredResultType) throws EvaluationException {\n\t\treturn org.springframework.expression.common.ExpressionUtils\n\t\t\t\t.convertTypedValue(null, this.typedResultValue, desiredResultType);\n\t}\n\n\t@Override\n\tpublic <T> T getValue(EvaluationContext context, Object rootObject, Class<T> desiredResultType) throws EvaluationException {\n\t\treturn getValue(context, desiredResultType);\n\t}\n\n\t@Override\n\tpublic <T> T getValue(EvaluationContext context, Class<T> desiredResultType) throws EvaluationException {\n\t\treturn org.springframework.expression.common.ExpressionUtils\n\t\t\t\t.convertTypedValue(context, this.typedResultValue, desiredResultType);\n\t}\n\n\t@Override\n\tpublic Class<V> getValueType() throws EvaluationException {\n\t\treturn this.aClass;\n\t}\n\n\t@Override\n\tpublic Class<V> getValueType(Object rootObject) throws EvaluationException {\n\t\treturn this.aClass;\n\t}\n\n\t@Override\n\tpublic Class<V> getValueType(EvaluationContext context) throws EvaluationException {\n\t\treturn this.aClass;\n\t}\n\n\t@Override\n\tpublic Class<V> getValueType(EvaluationContext context, Object rootObject) throws EvaluationException {\n\t\treturn this.aClass;\n\t}\n\n\t@Override\n\tpublic TypeDescriptor getValueTypeDescriptor() throws EvaluationException {\n\t\treturn this.typeDescriptor;\n\t}\n\n\t@Override\n\tpublic TypeDescriptor getValueTypeDescriptor(Object rootObject) throws EvaluationException {\n\t\treturn this.typeDescriptor;\n\t}\n\n\t@Override\n\tpublic TypeDescriptor getValueTypeDescriptor(EvaluationContext context) throws EvaluationException {\n\t\treturn this.typeDescriptor;\n\t}\n\n\t@Override\n\tpublic TypeDescriptor getValueTypeDescriptor(EvaluationContext context, Object rootObject) throws EvaluationException {\n\t\treturn this.typeDescriptor;\n\t}\n\n\t@Override\n\tpublic boolean isWritable(EvaluationContext context) throws EvaluationException {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic boolean isWritable(EvaluationContext context, Object rootObject) throws EvaluationException {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic boolean isWritable(Object rootObject) throws EvaluationException {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic void setValue(EvaluationContext context, Object value) throws EvaluationException {\n\t\tsetValue(context, null, value);\n\t}\n\n\t@Override\n\tpublic void setValue(Object rootObject, Object value) throws EvaluationException {\n\t\tsetValue(null, rootObject, value);\n\t}\n\n\t@Override\n\tpublic void setValue(EvaluationContext context, Object rootObject, Object value) throws EvaluationException {\n\t\tthrow new EvaluationException(this.value.toString(), \"Cannot call setValue() on a ValueExpression\");\n\t}\n\n\t@Override\n\tpublic String getExpressionString() {\n\t\treturn this.value.toString();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"ValueExpression [value=\" + this.value + \"]\";\n\t}\n\n}<fim_middle>// function below has no smell\n"}