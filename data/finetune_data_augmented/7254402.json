{"text": "<fim_prefix>            return PLATFORM_JAVA_50;\n        } else if (jdkVersion == Platform.JDK_16) {\n            return PLATFORM_JAVA_60;\n        } else if (jdkVersion == Platform.JDK_17) {\n            return PLATFORM_JAVA_70;\n        } else if (jdkVersion == Platform.JDK_18) {\n            return PLATFORM_JAVA_80;\n        } else if (jdkVersion == Platform.JDK_19) {\n            return PLATFORM_JAVA_90;\n        } else if (jdkVersion == Platform.JDK_100) {\n            return PLATFORM_JAVA_100;\n        } else if (jdkVersion == Platform.JDK_110) {\n            return PLATFORM_JAVA_110;\n        }\n        return null;\n    }\n    // Returns locally running OS platform\n    public static String getLocalPlatform(int architecture) {\n        if (architecture == -1) {\n            architecture = Platform.getSystemArchitecture();\n        }\n        if (architecture == Platform.ARCH_32) {\n            if (Platform.isWindows()) {\n                return PLATFORM_WINDOWS_OS;\n            } else if (Platform.isLinux()) {\n                return PLATFORM_LINUX_OS;\n            } else if (Platform.isSolarisIntel()) {\n                return PLATFORM_SOLARIS_INTEL_OS;\n            } else if (Platform.isSolarisSparc()) {\n                return PLATFORM_SOLARIS_SPARC_OS;\n            } else if (Platform.isMac()) {\n                return PLATFORM_MAC_OS;\n            }\n            return PLATFORM_SOLARIS_SPARC_OS; // Not supported platform => assume UNIX\n        } else {\n            if (Platform.isWindows()) {\n                return PLATFORM_WINDOWS_AMD64_OS;\n            } else if (Platform.isLinux()) {\n                return PLATFORM_LINUX_AMD64_OS;\n            } else if (Platform.isSolarisIntel()) {\n                return PLATFORM_SOLARIS_AMD64_OS;\n            } else if (Platform.isSolarisSparc()) {\n                return PLATFORM_SOLARIS_SPARC64_OS;\n            } else if (Platform.isMac()) {\n                return PLATFORM_MAC_OS;\n            }\n            return PLATFORM_SOLARIS_SPARC64_OS; // Not supported platform => assume UNIX\n        }\n    }\n    public static String getManualRemoteStep1(String targetOS, String targetJVM) {\n        return MessageFormat.format(MANUAL_REMOTE_STEP1_MESSAGE, new Object[] { \"JDK 5.0/6.0/7.0/8.0\", targetOS, HTML_REMOTE_STRING }); //NOI18N\n    }\n    public static String getManualRemoteStep2(String targetOS, String targetJVM) {\n        return MessageFormat.format(MANUAL_REMOTE_STEP2_MESSAGE, new Object[] { getRemoteCalibrateCommandString(targetOS, targetJVM) }); //NOI18N\n    }\n    // Returns getLibsDir()/deployed/jdk<15>/<OS> appropriate for current / selected OS\n    public static String getNativeLibrariesPath(String targetPlatform, String targetJVM, boolean isRemote) {\n        return getLibsDir(targetPlatform, isRemote) + getDirectorySeparator(targetPlatform) + \"deployed\" //NOI18N\n               + getDirectorySeparator(targetPlatform) + getJavaPlatformNativeLibrariesDirectoryName(targetJVM)\n               + getDirectorySeparator(targetPlatform) + getOSPlatformNativeLibrariesDirectoryName(targetPlatform, isRemote);\n    }\n    private static String getRemoteNativeLibrariesPath(String prefix, String targetPlatform, String targetJVM) {\n        return getRemoteLibsDir(prefix, targetPlatform) + getDirectorySeparator(targetPlatform) + \"deployed\" //NOI18N\n                + getDirectorySeparator(targetPlatform) + getJavaPlatformNativeLibrariesDirectoryName(targetJVM)\n                + getDirectorySeparator(targetPlatform) + getOSPlatformNativeLibrariesDirectoryName(targetPlatform, true);\n    }\n    // Returns name of the environment variable for system path to Profiler native libraries appropriate for current / selected OS\n    public static String getNativePathEnvVariableString(String targetPlatform) {\n        if (isWindowsPlatform(targetPlatform)) {\n            return \"Path\"; //NOI18N\n        }\n        return \"LD_LIBRARY_PATH\"; //NOI18N\n    }\n    // returns OS platform- and location-specific directory\n    public static String getOSPlatformNativeLibrariesDirectoryName(String targetPlatform, boolean isRemote) {\n        if (targetPlatform.equals(PLATFORM_WINDOWS_OS)) {\n            return \"windows\"; //NOI18N\n        } else if (targetPlatform.equals(PLATFORM_WINDOWS_AMD64_OS)) {\n            return \"windows-amd64\"; //NOI18N\n        } else if (targetPlatform.equals(PLATFORM_LINUX_OS)) {\n            return \"linux\"; //NOI18N\n        } else if (targetPlatform.equals(PLATFORM_LINUX_AMD64_OS)) {\n            return \"linux-amd64\"; //NOI18N\n        } else if (targetPlatform.equals(PLATFORM_LINUX_ARM_OS)) {\n            return \"linux-arm\"; //NOI18N\n        } else if (targetPlatform.equals(PLATFORM_LINUX_ARM_VFP_HFLT_OS)) {\n            return \"linux-arm-vfp-hflt\"; //NOI18N\n        } else if (targetPlatform.equals(PLATFORM_SOLARIS_INTEL_OS)) {\n            return \"solaris-i386\"; //NOI18N\n        } else if (targetPlatform.equals(PLATFORM_SOLARIS_AMD64_OS)) {\n            return \"solaris-amd64\"; //NOI18N\n        } else if (targetPlatform.equals(PLATFORM_SOLARIS_SPARC_OS)) {\n            return \"solaris-sparc\"; //NOI18N\n        } else if (targetPlatform.equals(PLATFORM_SOLARIS_SPARC64_OS)) {\n            return \"solaris-sparcv9\"; //NOI18N\n        } else if (targetPlatform.equals(PLATFORM_MAC_OS)) {\n            return \"mac\"; //NOI18N\n        }\n        return null;\n    }\n    /**\n     * The separator used in the classpath construction\n     * @return Returns \";\" or \":\" according to provided platform\n     */ \n    public static String getClassPathSeparator(String targetPlatform) {\n        if (isWindowsPlatform(targetPlatform)) {\n            return \";\"; //NOI18N\n        }\n        return \":\"; //NOI18N\n    }\n    // Returns extra command line arguments required when attaching on startup\n    public static String getProfilerAgentCommandLineArgs(String targetPlatform, String targetJVM, boolean isRemote, int portNumber) {\n        return getProfilerAgentCommandLineArgs(targetPlatform, targetJVM, isRemote, portNumber, true);\n    }\n    public static String getProfilerAgentCommandLineArgs(String targetPlatform, String targetJVM, boolean isRemote, int portNumber, boolean createTemp) {\n        if ((getNativeLibrariesPath(targetPlatform, targetJVM, isRemote).indexOf(' ') == -1)) {\n            return getProfilerAgentCommandLineArgsWithoutQuotes(targetPlatform, targetJVM, isRemote, portNumber); //NOI18N\n        }\n        if (!isWindowsPlatform(targetPlatform)) { \n            // Profiler is installed in directory with space on Unix (Linux, Solaris, Mac OS X)\n            // create temporary link in /tmp directory and use it instead of directory with space\n            String libsDirPath = getLibsDir(targetPlatform, isRemote);\n            String args = getProfilerAgentCommandLineArgsWithoutQuotes(targetPlatform, targetJVM, isRemote, portNumber);\n            return fixLibsDirPath(libsDirPath, args, createTemp);\n        }\n        return \"-agentpath:\" + \"\\\"\" + getNativeLibrariesPath(targetPlatform, targetJVM, isRemote)\n               + getDirectorySeparator(targetPlatform) + getProfilerAgentLibraryFile(targetPlatform) + \"=\" //NOI18N\n               + getLibsDir(targetPlatform, isRemote) + \"\\\"\" + \",\" + portNumber; //NOI18N\n    }\n    public static String fixLibsDirPath(final String libsDirPath, final String args) {\n        return fixLibsDirPath(libsDirPath, args, true);\n    }\n<fim_suffix>    public static String fixLibsDirPath(final String libsDirPath, final String args, boolean createTmp) {\n        if (createTmp) {\n            try {\n                File tmpFile = File.createTempFile(BINARIES_TMP_PREFIX, BINARIES_TMP_EXT);\n                String tmpPath = tmpFile.getAbsolutePath();\n                tmpFile.delete();\n                Runtime.getRuntime().exec(new String[]{\"/bin/ln\",\"-s\",libsDirPath,tmpPath});    // NOI18N\n                new File(tmpPath).deleteOnExit();\n                return args.replace(libsDirPath,tmpPath);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n        } else {\n            return args.replaceAll(\"agentpath:(.*?)=(.*?),(.*)\", \"agentpath:\\\"$1\\\"=\\\"$2\\\",$3\");\n        }\n    }<fim_middle>// function below has no smell\n"}