{"text": "<fim_prefix>/*****************************************************************\n *   Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n ****************************************************************/\npackage org.apache.cayenne.reflect;\n\nimport java.util.Map;\n\nimport org.apache.cayenne.ObjectId;\nimport org.apache.cayenne.Persistent;\n\n/**\n * A stateless read-only accessor of the map key value that is based on the Persistent\n * object id. For single-column ID's the accessor returns a single value (e.g. an\n * Integer). For multi-column ID's it returns the ObjectId.\n * \n * @since 3.0\n */\n<fim_suffix>public class IdMapKeyAccessor implements Accessor {\n\n    public static final Accessor SHARED_ACCESSOR = new IdMapKeyAccessor();\n\n    public String getName() {\n        return \"IdMapKeyAccessor\";\n    }\n\n    public Object getValue(Object object) throws PropertyException {\n        if (object instanceof Persistent) {\n            ObjectId id = ((Persistent) object).getObjectId();\n\n            if (id.isTemporary()) {\n                return id;\n            }\n\n            Map<?, ?> map = id.getIdSnapshot();\n            if (map.size() == 1) {\n                Map.Entry<?, ?> pkEntry = map.entrySet().iterator().next();\n                return pkEntry.getValue();\n            }\n\n            return id;\n        }\n        else {\n            throw new IllegalArgumentException(\"Object must be Persistent: \" + object);\n        }\n    }\n\n    public void setValue(Object object, Object newValue) throws PropertyException {\n        throw new UnsupportedOperationException(\"Setting map key is not supported\");\n    }\n}<fim_middle>// class below has no smell\n"}