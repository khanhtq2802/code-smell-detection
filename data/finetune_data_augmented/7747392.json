{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.brooklyn.entity.messaging.rabbit;\n\nimport java.util.Map;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.brooklyn.core.entity.AbstractEntity;\nimport org.apache.brooklyn.entity.messaging.amqp.AmqpExchange;\nimport org.apache.brooklyn.location.ssh.SshMachineLocation;\n\nimport com.google.common.base.Objects.ToStringHelper;\nimport com.google.common.base.Predicates;\nimport com.google.common.collect.Iterables;\n\npublic abstract class RabbitDestination extends AbstractEntity implements AmqpExchange {\n    public static final Logger log = LoggerFactory.getLogger(RabbitDestination.class);\n    \n    private String virtualHost;\n    private String exchange;\n    protected SshMachineLocation machine;\n    protected Map<String,String> shellEnvironment;\n\n    public RabbitDestination() {\n    }\n\n    @Override\n    public void onManagementStarting() {\n        super.onManagementStarting();\n        \n        exchange = (getConfig(EXCHANGE_NAME) != null) ? getConfig(EXCHANGE_NAME) : getDefaultExchangeName();\n        virtualHost = getConfig(RabbitBroker.VIRTUAL_HOST_NAME);\n        sensors().set(RabbitBroker.VIRTUAL_HOST_NAME, virtualHost);\n        \n        machine = (SshMachineLocation) Iterables.find(getParent().getLocations(), Predicates.instanceOf(SshMachineLocation.class));\n        shellEnvironment = getParent().getShellEnvironment();\n    }\n\n    // FIXME Should return RabbitBroker; won't work if gets a proxy rather than \"real\" entity\n<fim_suffix>    @Override\n    public RabbitBroker getParent() {\n        return (RabbitBroker) super.getParent();\n    }\n    \n    public void create() {\n        connectSensors();\n    }\n    \n    public void delete() {\n        disconnectSensors();\n    }\n\n    protected void connectSensors() { }\n\n    protected void disconnectSensors() { }\n\n    public String getVirtualHost() {\n        return virtualHost;\n    }\n    \n    @Override\n    public String getExchangeName() { \n        return exchange;\n    }\n    \n    public String getDefaultExchangeName() {\n        return AmqpExchange.DIRECT;\n    }\n\n    @Override\n    protected ToStringHelper toStringHelper() {\n        return super.toStringHelper().add(\"virtualHost\", getParent().getVirtualHost()).add(\"exchange\", getExchangeName());\n    }\n}<fim_middle>// function below has no smell\n"}