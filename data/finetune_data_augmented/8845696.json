{"text": "<fim_prefix>      }\n      if (isSetSuccess()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetIre()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetAce()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetAse()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetAe()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n      }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"registerApplicationInterface_result(\");\n      boolean first = true;\n      sb.append(\"success:\");\n      if (this.success == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.success);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"ire:\");\n      if (this.ire == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.ire);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"ace:\");\n      if (this.ace == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.ace);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"ase:\");\n      if (this.ase == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.ase);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"ae:\");\n      if (this.ae == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.ae);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class registerApplicationInterface_resultStandardSchemeFactory implements SchemeFactory {\n      public registerApplicationInterface_resultStandardScheme getScheme() {\n        return new registerApplicationInterface_resultStandardScheme();\n      }\n    }\n    private static class registerApplicationInterface_resultStandardScheme extends StandardScheme<registerApplicationInterface_result> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, registerApplicationInterface_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 0: // SUCCESS\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n                struct.success = iprot.readString();\n                struct.setSuccessIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 1: // IRE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();\n                struct.ire.read(iprot);\n                struct.setIreIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 2: // ACE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ace = new org.apache.airavata.model.error.AiravataClientException();\n                struct.ace.read(iprot);\n                struct.setAceIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 3: // ASE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();\n                struct.ase.read(iprot);\n                struct.setAseIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 4: // AE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ae = new org.apache.airavata.model.error.AuthorizationException();\n                struct.ae.read(iprot);\n                struct.setAeIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, registerApplicationInterface_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.success != null) {\n          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);\n          oprot.writeString(struct.success);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ire != null) {\n          oprot.writeFieldBegin(IRE_FIELD_DESC);\n          struct.ire.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ace != null) {\n          oprot.writeFieldBegin(ACE_FIELD_DESC);\n          struct.ace.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ase != null) {\n          oprot.writeFieldBegin(ASE_FIELD_DESC);\n          struct.ase.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ae != null) {\n          oprot.writeFieldBegin(AE_FIELD_DESC);\n          struct.ae.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n<fim_suffix>    private static class registerApplicationInterface_resultTupleSchemeFactory implements SchemeFactory {\n      public registerApplicationInterface_resultTupleScheme getScheme() {\n        return new registerApplicationInterface_resultTupleScheme();\n      }\n    }<fim_middle>// class below has no smell\n"}