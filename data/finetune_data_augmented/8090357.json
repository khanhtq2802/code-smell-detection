{"text": "<fim_prefix> * @generated\n */\npublic class ContextFinderTestSwitch<T> extends Switch<T>\n{\n  /**\n   * The cached model package\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  protected static ContextFinderTestPackage modelPackage;\n  /**\n   * Creates an instance of the switch.\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public ContextFinderTestSwitch()\n  {\n    if (modelPackage == null)\n    {\n      modelPackage = ContextFinderTestPackage.eINSTANCE;\n    }\n  }\n  /**\n   * Checks whether this is a switch for the given package.\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @param ePackage the package in question.\n   * @return whether this is a switch for the given package.\n   * @generated\n   */\n  @Override\n  protected boolean isSwitchFor(EPackage ePackage)\n  {\n    return ePackage == modelPackage;\n  }\n  /**\n   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @return the first non-null result returned by a <code>caseXXX</code> call.\n   * @generated\n   */\n  @Override\n  protected T doSwitch(int classifierID, EObject theEObject)\n  {\n    switch (classifierID)\n    {\n      case ContextFinderTestPackage.MODEL:\n      {\n        Model model = (Model)theEObject;\n        T result = caseModel(model);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.ATTRIBUTE_EXCLUSION_TEST:\n      {\n        AttributeExclusionTest attributeExclusionTest = (AttributeExclusionTest)theEObject;\n        T result = caseAttributeExclusionTest(attributeExclusionTest);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.NESTED_TYPE_TEST:\n      {\n        NestedTypeTest nestedTypeTest = (NestedTypeTest)theEObject;\n        T result = caseNestedTypeTest(nestedTypeTest);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.NESTED_TYPE_CHILD:\n      {\n        NestedTypeChild nestedTypeChild = (NestedTypeChild)theEObject;\n        T result = caseNestedTypeChild(nestedTypeChild);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.NESTED_TYPE_CHILD1:\n      {\n        NestedTypeChild1 nestedTypeChild1 = (NestedTypeChild1)theEObject;\n        T result = caseNestedTypeChild1(nestedTypeChild1);\n        if (result == null) result = caseNestedTypeChild(nestedTypeChild1);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.NESTED_TYPE_CHILD2:\n      {\n        NestedTypeChild2 nestedTypeChild2 = (NestedTypeChild2)theEObject;\n        T result = caseNestedTypeChild2(nestedTypeChild2);\n        if (result == null) result = caseNestedTypeChild(nestedTypeChild2);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.NESTED_TYPE_RECURSIVE_TEST:\n      {\n        NestedTypeRecursiveTest nestedTypeRecursiveTest = (NestedTypeRecursiveTest)theEObject;\n        T result = caseNestedTypeRecursiveTest(nestedTypeRecursiveTest);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.PARENT_REF_TEST1:\n      {\n        ParentRefTest1 parentRefTest1 = (ParentRefTest1)theEObject;\n        T result = caseParentRefTest1(parentRefTest1);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.PARENT_REF_TEST2:\n      {\n        ParentRefTest2 parentRefTest2 = (ParentRefTest2)theEObject;\n        T result = caseParentRefTest2(parentRefTest2);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.PARENT_REF_TEST_CHILD:\n      {\n        ParentRefTestChild parentRefTestChild = (ParentRefTestChild)theEObject;\n        T result = caseParentRefTestChild(parentRefTestChild);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.QUANTITY_EXCLUSION_TEST:\n      {\n        QuantityExclusionTest quantityExclusionTest = (QuantityExclusionTest)theEObject;\n        T result = caseQuantityExclusionTest(quantityExclusionTest);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.VALUE_EXCLUSION_TEST:\n      {\n        ValueExclusionTest valueExclusionTest = (ValueExclusionTest)theEObject;\n        T result = caseValueExclusionTest(valueExclusionTest);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.NODE_EXCLUSION:\n      {\n        NodeExclusion nodeExclusion = (NodeExclusion)theEObject;\n        T result = caseNodeExclusion(nodeExclusion);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.NODE_EXCLUSION_LIST:\n      {\n        NodeExclusionList nodeExclusionList = (NodeExclusionList)theEObject;\n        T result = caseNodeExclusionList(nodeExclusionList);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.NESTED_TYPE_RECURSIVE_TEST1:\n      {\n        NestedTypeRecursiveTest1 nestedTypeRecursiveTest1 = (NestedTypeRecursiveTest1)theEObject;\n        T result = caseNestedTypeRecursiveTest1(nestedTypeRecursiveTest1);\n        if (result == null) result = caseNestedTypeRecursiveTest(nestedTypeRecursiveTest1);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      case ContextFinderTestPackage.NESTED_TYPE_RECURSIVE_TEST2:\n      {\n        NestedTypeRecursiveTest2 nestedTypeRecursiveTest2 = (NestedTypeRecursiveTest2)theEObject;\n        T result = caseNestedTypeRecursiveTest2(nestedTypeRecursiveTest2);\n        if (result == null) result = caseNestedTypeRecursiveTest(nestedTypeRecursiveTest2);\n        if (result == null) result = defaultCase(theEObject);\n        return result;\n      }\n      default: return defaultCase(theEObject);\n    }\n  }\n  /**\n   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.\n   * <!-- begin-user-doc -->\n   * This implementation returns null;\n   * returning a non-null result will terminate the switch.\n   * <!-- end-user-doc -->\n   * @param object the target of the switch.\n   * @return the result of interpreting the object as an instance of '<em>Model</em>'.\n   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n   * @generated\n   */\n  public T caseModel(Model object)\n  {\n    return null;\n  }\n  /**\n   * Returns the result of interpreting the object as an instance of '<em>Attribute Exclusion Test</em>'.\n   * <!-- begin-user-doc -->\n   * This implementation returns null;\n   * returning a non-null result will terminate the switch.\n   * <!-- end-user-doc -->\n   * @param object the target of the switch.\n   * @return the result of interpreting the object as an instance of '<em>Attribute Exclusion Test</em>'.\n   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n   * @generated\n   */\n  public T caseAttributeExclusionTest(AttributeExclusionTest object)\n  {\n    return null;\n  }\n  /**\n   * Returns the result of interpreting the object as an instance of '<em>Nested Type Test</em>'.\n   * <!-- begin-user-doc -->\n   * This implementation returns null;\n   * returning a non-null result will terminate the switch.\n   * <!-- end-user-doc -->\n   * @param object the target of the switch.\n   * @return the result of interpreting the object as an instance of '<em>Nested Type Test</em>'.\n   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n   * @generated\n   */\n<fim_suffix>  public T caseNestedTypeTest(NestedTypeTest object)\n  {\n    return null;\n  }<fim_middle>// function below has no smell\n"}