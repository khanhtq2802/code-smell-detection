{"text": "<fim_prefix>      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.PATH_SEQ_NUM, new org.apache.thrift.meta_data.FieldMetaData(\"pathSeqNum\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(check_hms_seq_num_args.class, metaDataMap);\n    }\n    public check_hms_seq_num_args() {\n    }\n    public check_hms_seq_num_args(\n      long pathSeqNum)\n    {\n      this();\n      this.pathSeqNum = pathSeqNum;\n      setPathSeqNumIsSet(true);\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public check_hms_seq_num_args(check_hms_seq_num_args other) {\n      __isset_bitfield = other.__isset_bitfield;\n      this.pathSeqNum = other.pathSeqNum;\n    }\n    public check_hms_seq_num_args deepCopy() {\n      return new check_hms_seq_num_args(this);\n    }\n    @Override\n    public void clear() {\n      setPathSeqNumIsSet(false);\n      this.pathSeqNum = 0;\n    }\n    public long getPathSeqNum() {\n      return this.pathSeqNum;\n    }\n    public void setPathSeqNum(long pathSeqNum) {\n      this.pathSeqNum = pathSeqNum;\n      setPathSeqNumIsSet(true);\n    }\n    public void unsetPathSeqNum() {\n      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PATHSEQNUM_ISSET_ID);\n    }\n    /** Returns true if field pathSeqNum is set (has been assigned a value) and false otherwise */\n    public boolean isSetPathSeqNum() {\n      return EncodingUtils.testBit(__isset_bitfield, __PATHSEQNUM_ISSET_ID);\n    }\n    public void setPathSeqNumIsSet(boolean value) {\n      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PATHSEQNUM_ISSET_ID, value);\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      case PATH_SEQ_NUM:\n        if (value == null) {\n          unsetPathSeqNum();\n        } else {\n          setPathSeqNum((Long)value);\n        }\n        break;\n      }\n    }\n    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case PATH_SEQ_NUM:\n        return getPathSeqNum();\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      case PATH_SEQ_NUM:\n        return isSetPathSeqNum();\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof check_hms_seq_num_args)\n        return this.equals((check_hms_seq_num_args)that);\n      return false;\n    }\n    public boolean equals(check_hms_seq_num_args that) {\n      if (that == null)\n        return false;\n      boolean this_present_pathSeqNum = true;\n      boolean that_present_pathSeqNum = true;\n      if (this_present_pathSeqNum || that_present_pathSeqNum) {\n        if (!(this_present_pathSeqNum && that_present_pathSeqNum))\n          return false;\n        if (this.pathSeqNum != that.pathSeqNum)\n          return false;\n      }\n      return true;\n    }\n    @Override\n    public int hashCode() {\n      List<Object> list = new ArrayList<Object>();\n      boolean present_pathSeqNum = true;\n      list.add(present_pathSeqNum);\n      if (present_pathSeqNum)\n        list.add(pathSeqNum);\n      return list.hashCode();\n    }\n    @Override\n    public int compareTo(check_hms_seq_num_args other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      lastComparison = Boolean.valueOf(isSetPathSeqNum()).compareTo(other.isSetPathSeqNum());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetPathSeqNum()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pathSeqNum, other.pathSeqNum);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n    }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"check_hms_seq_num_args(\");\n      boolean first = true;\n      sb.append(\"pathSeqNum:\");\n      sb.append(this.pathSeqNum);\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.\n        __isset_bitfield = 0;\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class check_hms_seq_num_argsStandardSchemeFactory implements SchemeFactory {\n      public check_hms_seq_num_argsStandardScheme getScheme() {\n        return new check_hms_seq_num_argsStandardScheme();\n      }\n    }\n<fim_suffix>    private static class check_hms_seq_num_argsStandardScheme extends StandardScheme<check_hms_seq_num_args> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, check_hms_seq_num_args struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 1: // PATH_SEQ_NUM\n              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {\n                struct.pathSeqNum = iprot.readI64();\n                struct.setPathSeqNumIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, check_hms_seq_num_args struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        oprot.writeFieldBegin(PATH_SEQ_NUM_FIELD_DESC);\n        oprot.writeI64(struct.pathSeqNum);\n        oprot.writeFieldEnd();\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }<fim_middle>// class below has no smell\n"}