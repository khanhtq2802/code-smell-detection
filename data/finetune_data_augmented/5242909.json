{"text": "<fim_prefix>// Licensed to the Apache Software Foundation (ASF) under one or more contributor\n// license agreements.  See the NOTICE.txt file distributed with this work for\n// additional information regarding copyright ownership.  The ASF licenses this\n// file to you under the Apache License, Version 2.0 (the \"License\"); you may not\n// use this file except in compliance with the License.  You may obtain a copy of\n// the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n// License for the specific language governing permissions and limitations under\n// the License.\n\npackage org.apache.oodt.commons.util;\n\nimport java.beans.PropertyChangeEvent;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.oodt.commons.io.LogEvent;\nimport org.apache.oodt.commons.io.LogListener;\n\n/** Multiplexer for logging events.\n *\n * @author Kelly\n */\npublic class LogEventMultiplexer implements LogListener {\n\t/** Add an event listener.\n\t *\n\t * @param listener Listener to add.\n\t */\n\tpublic void addListener(LogListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\t/** Remove an event listener.\n\t *\n\t * @param listener Listener to remove.\n\t */\n\tpublic void removeListener(LogListener listener) {\n\t\tlisteners.remove(listener);\n\t}\n\n\tpublic void messageLogged(LogEvent event) {\n\t  for (Object listener1 : listeners) {\n\t\tLogListener listener = (LogListener) listener1;\n\t\tlistener.messageLogged(event);\n\t  }\n\t}\n\n<fim_suffix>\tpublic void streamStarted(LogEvent event) {\n\t  for (Object listener1 : listeners) {\n\t\tLogListener listener = (LogListener) listener1;\n\t\tlistener.streamStarted(event);\n\t  }\n\t}\n\n\tpublic void streamStopped(LogEvent event) {\n\t  for (Object listener1 : listeners) {\n\t\tLogListener listener = (LogListener) listener1;\n\t\tlistener.streamStopped(event);\n\t  }\n\t}\n\n\tpublic void propertyChange(PropertyChangeEvent event) {\n\t  for (Object listener1 : listeners) {\n\t\tLogListener listener = (LogListener) listener1;\n\t\tlistener.propertyChange(event);\n\t  }\n\t}\n\n\t/** List of listeners to which I multiplex events. */\n\tprivate List listeners = new ArrayList();\n}<fim_middle>// function below has no smell\n"}