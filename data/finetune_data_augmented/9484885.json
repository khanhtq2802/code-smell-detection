{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.registry.server.dns;\n\nimport org.apache.hadoop.fs.PathNotFoundException;\nimport org.apache.hadoop.registry.client.types.ServiceRecord;\nimport org.apache.hadoop.registry.client.types.yarn.YarnRegistryAttributes;\nimport org.xbill.DNS.Name;\nimport org.xbill.DNS.TextParseException;\nimport org.xbill.DNS.Type;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * A processor for generating container DNS records from registry service\n * records.\n */\npublic class ContainerServiceRecordProcessor extends\n    BaseServiceRecordProcessor {\n\n  /**\n   * Create a container service record processor.\n   * @param record the service record\n   * @param path the service record registry node path\n   * @param domain the DNS zone/domain name\n   * @param zoneSelector returns the zone associated with the provided name.\n   * @throws Exception if an issue is generated during instantiation.\n   */\n  public ContainerServiceRecordProcessor(\n      ServiceRecord record, String path, String domain,\n      ZoneSelector zoneSelector) throws Exception {\n    super(record, path, domain, zoneSelector);\n  }\n\n  /**\n   * Initializes the DNS record type to descriptor mapping based on the\n   * provided service record.\n   * @param serviceRecord  the registry service record.\n   * @throws Exception if an issue arises.\n   */\n  @Override public void initTypeToInfoMapping(ServiceRecord serviceRecord)\n      throws Exception {\n    if (serviceRecord.get(YarnRegistryAttributes.YARN_IP) != null) {\n      for (int type : getRecordTypes()) {\n        switch (type) {\n        case Type.A:\n          createAInfo(serviceRecord);\n          break;\n        case Type.AAAA:\n          createAAAAInfo(serviceRecord);\n          break;\n        case Type.PTR:\n          createPTRInfo(serviceRecord);\n          break;\n        case Type.TXT:\n          createTXTInfo(serviceRecord);\n          break;\n        default:\n          throw new IllegalArgumentException(\"Unknown type \" + type);\n\n        }\n      }\n    }\n  }\n\n  /**\n   * Create a container TXT record descriptor.\n   * @param serviceRecord the service record.\n   * @throws Exception if the descriptor creation yields an issue.\n   */\n  protected void createTXTInfo(ServiceRecord serviceRecord) throws Exception {\n    TXTContainerRecordDescriptor txtInfo =\n        new TXTContainerRecordDescriptor(getPath(), serviceRecord);\n    registerRecordDescriptor(Type.TXT, txtInfo);\n  }\n\n  /**\n   * Creates a container PTR record descriptor.\n   * @param record the service record.\n   * @throws Exception if the descriptor creation yields an issue.\n   */\n  protected void createPTRInfo(ServiceRecord record) throws Exception {\n    PTRContainerRecordDescriptor\n        ptrInfo = new PTRContainerRecordDescriptor(getPath(), record);\n    registerRecordDescriptor(Type.PTR, ptrInfo);\n  }\n\n  /**\n   * Creates a container AAAA (IPv6) record descriptor.\n   * @param record the service record\n   * @throws Exception if the descriptor creation yields an issue.\n   */\n  protected void createAAAAInfo(ServiceRecord record)\n      throws Exception {\n    AAAAContainerRecordDescriptor\n        recordInfo = new AAAAContainerRecordDescriptor(\n        getPath(), record);\n    registerRecordDescriptor(Type.AAAA, recordInfo);\n  }\n\n  /**\n   * Creates a container A (IPv4) record descriptor.\n   * @param record service record.\n   * @throws Exception if the descriptor creation yields an issue.\n   */\n<fim_suffix>  protected void createAInfo(ServiceRecord record) throws Exception {\n    AContainerRecordDescriptor recordInfo = new AContainerRecordDescriptor(\n        getPath(), record);\n    registerRecordDescriptor(Type.A, recordInfo);\n  }\n\n  /**\n   * Returns the record types associated with a container service record.\n   * @return the record type array\n   */\n  @Override public int[] getRecordTypes() {\n    return new int[] {Type.A, Type.AAAA, Type.PTR, Type.TXT};\n  }\n\n  /**\n   * A container TXT record descriptor.\n   */\n  class TXTContainerRecordDescriptor\n      extends ContainerRecordDescriptor<List<String>> {\n\n    /**\n     * Creates a container TXT record descriptor.\n     * @param path registry path for service record\n     * @param record service record\n     * @throws Exception\n     */\n    public TXTContainerRecordDescriptor(String path,\n        ServiceRecord record) throws Exception {\n      super(path, record);\n    }\n\n    /**\n     * Initializes the descriptor parameters.\n     * @param serviceRecord  the service record.\n     */\n    @Override protected void init(ServiceRecord serviceRecord) {\n      try {\n        this.setNames(new Name[] {getContainerName()});\n      } catch (TextParseException e) {\n        // log\n      } catch (PathNotFoundException e) {\n        // log\n      }\n      List<String> txts = new ArrayList<>();\n      txts.add(\"id=\" + serviceRecord.get(YarnRegistryAttributes.YARN_ID));\n      this.setTarget(txts);\n    }\n\n  }\n\n  /**\n   * A container PTR record descriptor.\n   */\n  class PTRContainerRecordDescriptor extends ContainerRecordDescriptor<Name> {\n\n    /**\n     * Creates a container PTR record descriptor.\n     * @param path registry path for service record\n     * @param record service record\n     * @throws Exception\n     */\n    public PTRContainerRecordDescriptor(String path,\n        ServiceRecord record) throws Exception {\n      super(path, record);\n    }\n\n    /**\n     * Initializes the descriptor parameters.\n     * @param serviceRecord  the service record.\n     */\n    @Override protected void init(ServiceRecord serviceRecord) {\n      String host = serviceRecord.get(YarnRegistryAttributes.YARN_HOSTNAME);\n      String ip = serviceRecord.get(YarnRegistryAttributes.YARN_IP);\n      Name reverseLookupName = null;\n      if (host != null && ip != null) {\n        try {\n          reverseLookupName = reverseIP(ip);\n        } catch (UnknownHostException e) {\n          //LOG\n        }\n      }\n      this.setNames(new Name[] {reverseLookupName});\n      try {\n        this.setTarget(getContainerName());\n      } catch (TextParseException e) {\n        //LOG\n      } catch (PathNotFoundException e) {\n        //LOG\n      }\n    }\n\n  }\n\n\n  /**\n   * A container A record descriptor.\n   */\n  class AContainerRecordDescriptor\n      extends ContainerRecordDescriptor<InetAddress> {\n\n    /**\n     * Creates a container A record descriptor.\n     * @param path registry path for service record\n     * @param record service record\n     * @throws Exception\n     */\n    public AContainerRecordDescriptor(String path,\n        ServiceRecord record) throws Exception {\n      super(path, record);\n    }\n\n    /**\n     * Initializes the descriptor parameters.\n     * @param serviceRecord  the service record.\n     */\n    @Override protected void init(ServiceRecord serviceRecord) {\n      String ip = serviceRecord.get(YarnRegistryAttributes.YARN_IP);\n      if (ip == null) {\n        throw new IllegalArgumentException(\"No IP specified\");\n      }\n      try {\n        this.setTarget(InetAddress.getByName(ip));\n        this.setNames(new Name[] {getContainerName(), getContainerIDName(),\n            getComponentName()});\n      } catch (Exception e) {\n        throw new IllegalStateException(e);\n      }\n\n    }\n\n  }\n\n  /**\n   * A container AAAA record descriptor.\n   */\n  class AAAAContainerRecordDescriptor extends AContainerRecordDescriptor {\n\n    /**\n     * Creates a container AAAA record descriptor.\n     * @param path registry path for service record\n     * @param record service record\n     * @throws Exception\n     */\n    public AAAAContainerRecordDescriptor(String path,\n        ServiceRecord record) throws Exception {\n      super(path, record);\n    }\n\n    /**\n     * Initializes the descriptor parameters.\n     * @param serviceRecord  the service record.\n     */\n    @Override protected void init(ServiceRecord serviceRecord) {\n      super.init(serviceRecord);\n      try {\n        this.setTarget(getIpv6Address(getTarget()));\n      } catch (UnknownHostException e) {\n        throw new IllegalStateException(e);\n      }\n    }\n  }\n}<fim_middle>// function below has no smell\n"}