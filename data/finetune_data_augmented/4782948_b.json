{"text": "<fim_prefix>  }\n  @Override\n  public List<HiveRoleGrant> getRoleGrantInfoForPrincipal(HivePrincipal principal)\n      throws HiveAccessControlException, HiveAuthzPluginException {\n    List<HiveRoleGrant> hiveRoleGrants = new ArrayList<HiveRoleGrant>();\n    try {\n      sentryClient = getSentryClient();\n      if (principal.getType() != HivePrincipalType.GROUP) {\n        String msg =\n            SentryHiveConstants.GRANT_REVOKE_NOT_SUPPORTED_FOR_PRINCIPAL + principal.getType();\n        throw new HiveAuthzPluginException(msg);\n      }\n      Set<TSentryRole> roles =\n          sentryClient.listRolesByGroupName(authenticator.getUserName(), principal.getName());\n      if (roles != null && !roles.isEmpty()) {\n        for (TSentryRole role : roles) {\n          hiveRoleGrants.add(SentryAuthorizerUtil.convert2HiveRoleGrant(role));\n        }\n      }\n    } catch (SentryAccessDeniedException e) {\n      HiveOperation hiveOp = HiveOperation.SHOW_ROLE_GRANT;\n      executeOnFailureHooks(hiveOp, e);\n    } catch (SentryUserException e) {\n      String msg = \"Error when sentryClient listRolesByGroupName: \" + e.getMessage();\n      executeOnErrorHooks(msg, e);\n    } finally {\n      if (sentryClient != null) {\n        sentryClient.close();\n      }\n    }\n    return hiveRoleGrants;\n  }\n  @Override\n  public void applyAuthorizationConfigPolicy(HiveConf hiveConf) throws HiveAuthzPluginException {\n    // Apply rest of the configuration only to HiveServer2\n    if (ctx.getClientType() != CLIENT_TYPE.HIVESERVER2\n        || !hiveConf.getBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED)) {\n      throw new HiveAuthzPluginException(\"Sentry just support for hiveserver2\");\n    }\n  }\n  /**\n   * Grant(isGrant is true) or revoke(isGrant is false) db privileges to/from role via sentryClient,\n   * which is a instance of SentryPolicyServiceClientV2\n   *\n   * @param hivePrincipals\n   * @param hivePrivileges\n   * @param hivePrivObject\n   * @param grantOption\n   * @param isGrant\n   */\n  private void grantOrRevokePrivlegeOnRole(List<HivePrincipal> hivePrincipals,\n      List<HivePrivilege> hivePrivileges, HivePrivilegeObject hivePrivObject, boolean grantOption,\n      boolean isGrant) throws HiveAuthzPluginException, HiveAccessControlException {\n    try {\n      sentryClient = getSentryClient();\n      for (HivePrincipal principal : hivePrincipals) {\n        // Sentry only support grant privilege to ROLE\n        if (principal.getType() != HivePrincipalType.ROLE) {\n          String msg =\n              SentryHiveConstants.GRANT_REVOKE_NOT_SUPPORTED_FOR_PRINCIPAL + principal.getType();\n          throw new HiveAuthzPluginException(msg);\n        }\n        for (HivePrivilege privilege : hivePrivileges) {\n          String grantorName = authenticator.getUserName();\n          String roleName = principal.getName();\n          String action = SentryAuthorizerUtil.convert2SentryAction(privilege);\n          List<String> columnNames = privilege.getColumns();\n          Boolean grantOp = null;\n          if (isGrant) {\n            grantOp = grantOption;\n          }\n          switch (hivePrivObject.getType()) {\n            case GLOBAL:\n              if (isGrant) {\n                sentryClient.grantServerPrivilege(grantorName, roleName,\n                    hivePrivObject.getObjectName(), action, grantOp);\n              } else {\n                sentryClient.revokeServerPrivilege(grantorName, roleName,\n                    hivePrivObject.getObjectName(), action, grantOp);\n              }\n              break;\n            case DATABASE:\n              if (isGrant) {\n                sentryClient.grantDatabasePrivilege(grantorName, roleName, serverName,\n                    hivePrivObject.getDbname(), action, grantOp);\n              } else {\n                sentryClient.revokeDatabasePrivilege(grantorName, roleName, serverName,\n                    hivePrivObject.getDbname(), action, grantOp);\n              }\n              break;\n            case TABLE_OR_VIEW:\n              // For column level security\n              if (columnNames != null && !columnNames.isEmpty()) {\n                if (action.equalsIgnoreCase(AccessConstants.INSERT)\n                    || action.equalsIgnoreCase(AccessConstants.ALL)) {\n                  String msg =\n                      SentryHiveConstants.PRIVILEGE_NOT_SUPPORTED + privilege.getName()\n                          + \" on Column\";\n                  throw new HiveAuthzPluginException(msg);\n                }\n                if (isGrant) {\n                  sentryClient.grantColumnsPrivileges(grantorName, roleName, serverName,\n                      hivePrivObject.getDbname(), hivePrivObject.getObjectName(), columnNames,\n                      action, grantOp);\n                } else {\n                  sentryClient.revokeColumnsPrivilege(grantorName, roleName, serverName,\n                      hivePrivObject.getDbname(), hivePrivObject.getObjectName(), columnNames,\n                      action, grantOp);\n                }\n              } else {\n                if (isGrant) {\n                  sentryClient.grantTablePrivilege(grantorName, roleName, serverName,\n                      hivePrivObject.getDbname(), hivePrivObject.getObjectName(), action, grantOp);\n                } else {\n                  sentryClient.revokeTablePrivilege(grantorName, roleName, serverName,\n                      hivePrivObject.getDbname(), hivePrivObject.getObjectName(), action, grantOp);\n                }\n              }\n              break;\n            case LOCAL_URI:\n            case DFS_URI:\n              String uRIString = hivePrivObject.getObjectName().replace(\"'\", \"\").replace(\"\\\"\", \"\");\n              if (isGrant) {\n                sentryClient.grantURIPrivilege(grantorName, roleName, serverName,\n                    uRIString, grantOp);\n              } else {\n                sentryClient.revokeURIPrivilege(grantorName, roleName, serverName,\n                    uRIString, grantOp);\n              }\n              break;\n            case FUNCTION:\n            case PARTITION:\n            case COLUMN:\n            case COMMAND_PARAMS:\n              // not support these type\n              throw new HiveAuthzPluginException(hivePrivObject.getType().name()\n                  + \" are not supported in sentry\");\n            default:\n              break;\n          }\n        }\n      }\n    } catch (SentryAccessDeniedException e) {\n      HiveOperation hiveOp =\n          isGrant ? HiveOperation.GRANT_PRIVILEGE : HiveOperation.REVOKE_PRIVILEGE;\n      executeOnFailureHooks(hiveOp, e);\n    } catch (SentryUserException e) {\n      String msg = \"Error when sentryClient grant/revoke privilege:\" + e.getMessage();\n      executeOnErrorHooks(msg, e);\n    } finally {\n      if (sentryClient != null) {\n        sentryClient.close();\n      }\n    }\n  }\n  /**\n   * Grant(isGrant is true) or revoke(isGrant is false) role to/from group via sentryClient, which\n   * is a instance of SentryPolicyServiceClientV2\n   *\n   * @param hivePrincipals\n   * @param roles\n   * @param grantorPrinc\n   * @param isGrant\n   */\n<fim_suffix>  private void grantOrRevokeRoleOnGroup(List<HivePrincipal> hivePrincipals, List<String> roles,\n      HivePrincipal grantorPrinc, boolean isGrant) throws HiveAuthzPluginException,\n      HiveAccessControlException {\n    try {\n      sentryClient = getSentryClient();\n      // get principals\n      Set<String> groups = Sets.newHashSet();\n      for (HivePrincipal principal : hivePrincipals) {\n        if (principal.getType() != HivePrincipalType.GROUP) {\n          String msg =\n              SentryHiveConstants.GRANT_REVOKE_NOT_SUPPORTED_FOR_PRINCIPAL + principal.getType();\n          throw new HiveAuthzPluginException(msg);\n        }\n        groups.add(principal.getName());\n      }\n      // grant/revoke role to/from principals\n      for (String roleName : roles) {\n        if (isGrant) {\n          sentryClient.grantRoleToGroups(grantorPrinc.getName(), roleName, groups);\n        } else {\n          sentryClient.revokeRoleFromGroups(grantorPrinc.getName(), roleName, groups);\n        }\n      }\n    } catch (SentryAccessDeniedException e) {\n      HiveOperation hiveOp = isGrant ? HiveOperation.GRANT_ROLE : HiveOperation.REVOKE_ROLE;\n      executeOnFailureHooks(hiveOp, e);\n    } catch (SentryUserException e) {\n      String msg = \"Error when sentryClient grant/revoke role:\" + e.getMessage();\n      executeOnErrorHooks(msg, e);\n    } finally {\n      if (sentryClient != null) {\n        sentryClient.close();\n      }\n    }\n  }<fim_middle>// function below is long method and feature envy\n"}