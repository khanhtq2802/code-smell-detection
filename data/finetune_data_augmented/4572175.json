{"text": "<fim_prefix>            }\n        }\n        private class MainStructureTreeHandler extends StructureTreeHandler {\n            private final Locale pageSequenceLanguage;\n            MainStructureTreeHandler(StructureTreeEventHandler structureTreeEventHandler,\n                    Locale pageSequenceLanguage) throws SAXException {\n                super(structureTreeEventHandler);\n                this.pageSequenceLanguage = pageSequenceLanguage;\n            }\n            @Override\n            void startStructureTree(String type) {\n                structureTreeEventHandler.startPageSequence(pageSequenceLanguage, type);\n            }\n            public void endDocument() throws SAXException {\n                startIFElement(EL_PAGE_SEQUENCE, pageSequenceAttributes);\n                pageSequenceAttributes = null;\n            }\n        }\n        public Handler(IFDocumentHandler documentHandler, FOUserAgent userAgent,\n                ElementMappingRegistry elementMappingRegistry) {\n            this.documentHandler = documentHandler;\n            this.userAgent = userAgent;\n            this.elementMappingRegistry = elementMappingRegistry;\n            elementHandlers.put(EL_DOCUMENT, new DocumentHandler());\n            elementHandlers.put(EL_HEADER, new DocumentHeaderHandler());\n            elementHandlers.put(EL_LOCALE, new LocaleHandler());\n            elementHandlers.put(EL_TRAILER, new DocumentTrailerHandler());\n            elementHandlers.put(EL_PAGE_SEQUENCE, new PageSequenceHandler());\n            elementHandlers.put(EL_PAGE, new PageHandler());\n            elementHandlers.put(EL_PAGE_HEADER, new PageHeaderHandler());\n            elementHandlers.put(EL_PAGE_CONTENT, new PageContentHandler());\n            elementHandlers.put(EL_PAGE_TRAILER, new PageTrailerHandler());\n            //Page content\n            elementHandlers.put(EL_VIEWPORT, new ViewportHandler());\n            elementHandlers.put(EL_GROUP, new GroupHandler());\n            elementHandlers.put(EL_ID, new IDHandler());\n            elementHandlers.put(EL_FONT, new FontHandler());\n            elementHandlers.put(EL_TEXT, new TextHandler());\n            elementHandlers.put(EL_CLIP_RECT, new ClipRectHandler());\n            elementHandlers.put(EL_RECT, new RectHandler());\n            elementHandlers.put(EL_LINE, new LineHandler());\n            elementHandlers.put(EL_BORDER_RECT, new BorderRectHandler());\n            elementHandlers.put(EL_IMAGE, new ImageHandler());\n        }\n        private void establishForeignAttributes(Map<QName, String> foreignAttributes) {\n            documentHandler.getContext().setForeignAttributes(foreignAttributes);\n        }\n        private void resetForeignAttributes() {\n            documentHandler.getContext().resetForeignAttributes();\n        }\n        /** {@inheritDoc} */\n        public void startElement(String uri, String localName, String qName, Attributes attributes)\n                    throws SAXException {\n            if (delegate != null) {\n                delegateDepth++;\n                delegate.startElement(uri, localName, qName, attributes);\n            } else {\n                boolean handled = true;\n                if (NAMESPACE.equals(uri)) {\n                    if (localName.equals(EL_PAGE_SEQUENCE) && userAgent.isAccessibilityEnabled()) {\n                        pageSequenceAttributes = new AttributesImpl(attributes);\n                        Locale language = getLanguage(attributes);\n                        structureTreeHandler = new MainStructureTreeHandler(\n                                userAgent.getStructureTreeEventHandler(), language);\n                    } else if (localName.equals(EL_STRUCTURE_TREE)) {\n                        if (userAgent.isAccessibilityEnabled()) {\n                            String type = attributes.getValue(\"type\");\n                            structureTreeHandler.startStructureTree(type);\n                            delegate = structureTreeHandler;\n                        } else {\n                            /* Delegate to a handler that does nothing */\n                            delegate = new DefaultHandler();\n                        }\n                        delegateDepth++;\n                        delegate.startDocument();\n                        delegate.startElement(uri, localName, qName, attributes);\n                    } else {\n                        if (pageSequenceAttributes != null) {\n                            /*\n                             * This means that no structure-element tag was\n                             * found in the XML, otherwise a\n                             * StructureTreeBuilderWrapper object would have\n                             * been created, which would have reset the\n                             * pageSequenceAttributes field.\n                             */\n                            AccessibilityEventProducer.Provider\n                                    .get(userAgent.getEventBroadcaster())\n                                    .noStructureTreeInXML(this);\n                        }\n                        handled = startIFElement(localName, attributes);\n                    }\n                } else if (DocumentNavigationExtensionConstants.NAMESPACE.equals(uri)) {\n                    if (this.navParser == null) {\n                        this.navParser = new DocumentNavigationHandler(\n                                this.documentHandler.getDocumentNavigationHandler(),\n                                        structureTreeElements);\n                    }\n                    delegate = this.navParser;\n                    delegateDepth++;\n                    delegate.startDocument();\n                    delegate.startElement(uri, localName, qName, attributes);\n                } else {\n                    ContentHandlerFactoryRegistry registry\n                            = userAgent.getContentHandlerFactoryRegistry();\n                    ContentHandlerFactory factory = registry.getFactory(uri);\n                    if (factory == null) {\n                        DOMImplementation domImplementation\n                            = elementMappingRegistry.getDOMImplementationForNamespace(uri);\n                        if (domImplementation == null) {\n                            domImplementation = ElementMapping.getDefaultDOMImplementation();\n                            /*\n                            throw new SAXException(\"No DOMImplementation could be\"\n                                    + \" identified to handle namespace: \" + uri);\n                                    */\n                        }\n                        factory = new DOMBuilderContentHandlerFactory(uri, domImplementation);\n                    }\n                    delegate = factory.createContentHandler();\n                    delegateDepth++;\n                    delegate.startDocument();\n                    delegate.startElement(uri, localName, qName, attributes);\n                }\n                if (!handled) {\n                    if (uri == null || uri.length() == 0) {\n                        throw new SAXException(\"Unhandled element \" + localName\n                                + \" in namespace: \" + uri);\n                    } else {\n                        log.warn(\"Unhandled element \" + localName\n                                + \" in namespace: \" + uri);\n                    }\n                }\n            }\n        }\n        private static Locale getLanguage(Attributes attributes) {\n            String xmllang = attributes.getValue(XML_NAMESPACE, \"lang\");\n            return (xmllang == null) ? null : LanguageTags.toLocale(xmllang);\n        }\n        private boolean startIFElement(String localName, Attributes attributes)\n                throws SAXException {\n            lastAttributes = new AttributesImpl(attributes);\n            ElementHandler elementHandler = elementHandlers.get(localName);\n            content.setLength(0);\n            ignoreCharacters = true;\n            if (elementHandler != null) {\n                ignoreCharacters = elementHandler.ignoreCharacters();\n                try {\n                    elementHandler.startElement(attributes);\n                } catch (IFException ife) {\n                    handleIFException(ife);\n                }\n                return true;\n            } else {\n                return false;\n            }\n        }\n        private void handleIFException(IFException ife) throws SAXException {\n            Throwable cause = ife.getCause();\n            if (cause instanceof SAXException) {\n                //unwrap\n                throw (SAXException) cause;\n            } else {\n                //wrap\n                throw new SAXException(ife);\n            }\n        }\n        /** {@inheritDoc} */\n        public void endElement(String uri, String localName, String qName) throws SAXException {\n            if (delegate != null) {\n                delegate.endElement(uri, localName, qName);\n                delegateDepth--;\n                if (delegateDepth == 0) {\n                    delegate.endDocument();\n                    if (delegate instanceof ContentHandlerFactory.ObjectSource) {\n                        Object obj = ((ContentHandlerFactory.ObjectSource)delegate).getObject();\n                        if (inForeignObject) {\n                            this.foreignObject = (Document)obj;\n                        } else {\n                            handleExternallyGeneratedObject(obj);\n                        }\n                    }\n                    delegate = null; //Sub-document is processed, return to normal processing\n                }\n            } else {\n                if (NAMESPACE.equals(uri)) {\n                    ElementHandler elementHandler = elementHandlers.get(localName);\n                    if (elementHandler != null) {\n                        try {\n                            elementHandler.endElement();\n                        } catch (IFException ife) {\n                            handleIFException(ife);\n                        }\n                        content.setLength(0);\n                    }\n                    ignoreCharacters = true;\n                } else {\n                    if (log.isTraceEnabled()) {\n                        log.trace(\"Ignoring \" + localName + \" in namespace: \" + uri);\n                    }\n                }\n            }\n        }\n        // ============== Element handlers for the intermediate format =============\n        private interface ElementHandler {\n            void startElement(Attributes attributes) throws IFException, SAXException;\n            void endElement() throws IFException;\n            boolean ignoreCharacters();\n        }\n        private abstract class AbstractElementHandler implements ElementHandler {\n            public void startElement(Attributes attributes) throws IFException, SAXException {\n                //nop\n            }\n            public void endElement() throws IFException {\n                //nop\n            }\n            public boolean ignoreCharacters() {\n                return true;\n            }\n        }\n        private class DocumentHandler extends AbstractElementHandler {\n            public void startElement(Attributes attributes) throws IFException {\n                documentHandler.startDocument();\n            }\n            public void endElement() throws IFException {\n                documentHandler.endDocument();\n            }\n        }\n<fim_suffix>        private class DocumentHeaderHandler extends AbstractElementHandler {\n            public void startElement(Attributes attributes) throws IFException {\n                documentHandler.startDocumentHeader();\n            }\n            public void endElement() throws IFException {\n                documentHandler.endDocumentHeader();\n            }\n        }<fim_middle>// class below has no smell\n"}