{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.hyracks.storage.am.lsm.invertedindex.api;\n\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.dataflow.common.data.accessors.ITupleReference;\nimport org.apache.hyracks.storage.am.common.api.IIndexOperationContext;\nimport org.apache.hyracks.storage.am.lsm.invertedindex.search.InvertedIndexSearchPredicate;\nimport org.apache.hyracks.storage.common.IIndexCursor;\n\n/**\n * Inverted index search cursor class that conducts the actual inverted index traversal\n *\n */\n<fim_suffix>public interface IInvertedIndexSearcher {\n    /**\n     * Searches the given inverted index using the search predicate and initializes the result cursor.\n     */\n    public void search(IIndexCursor resultCursor, InvertedIndexSearchPredicate searchPred, IIndexOperationContext ictx)\n            throws HyracksDataException;\n\n    /**\n     * Continues the search process if it is paused. (e.g., output buffer full)\n     *\n     * @return true only if all search process is done.\n     *         false otherwise.\n     */\n    public boolean continueSearch() throws HyracksDataException;\n\n    public boolean hasNext() throws HyracksDataException;\n\n    public void next() throws HyracksDataException;\n\n    public void destroy() throws HyracksDataException;\n\n    public ITupleReference getTuple();\n}<fim_middle>// class below has no smell\n"}