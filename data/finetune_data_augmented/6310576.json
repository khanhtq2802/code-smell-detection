{"text": "<fim_prefix> *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Eurotech - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.kapua.app.console.module.api.client.ui.dialog;\nimport com.extjs.gxt.ui.client.event.BaseEvent;\nimport com.extjs.gxt.ui.client.event.ButtonEvent;\nimport com.extjs.gxt.ui.client.event.ComponentEvent;\nimport com.extjs.gxt.ui.client.event.Events;\nimport com.extjs.gxt.ui.client.event.Listener;\nimport com.extjs.gxt.ui.client.event.SelectionListener;\nimport com.extjs.gxt.ui.client.util.KeyNav;\nimport com.extjs.gxt.ui.client.widget.Status;\nimport com.extjs.gxt.ui.client.widget.button.Button;\nimport com.extjs.gxt.ui.client.widget.form.FormPanel;\nimport com.extjs.gxt.ui.client.widget.form.FormPanel.Encoding;\nimport com.extjs.gxt.ui.client.widget.form.FormPanel.Method;\nimport com.extjs.gxt.ui.client.widget.layout.FormLayout;\nimport com.extjs.gxt.ui.client.widget.toolbar.FillToolItem;\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.event.dom.client.KeyCodes;\nimport com.google.gwt.user.client.Element;\nimport com.google.gwt.user.client.Event;\nimport com.google.gwt.user.client.Timer;\nimport com.google.gwt.user.client.rpc.AsyncCallback;\nimport org.eclipse.kapua.app.console.module.api.client.GwtKapuaErrorCode;\nimport org.eclipse.kapua.app.console.module.api.client.GwtKapuaException;\nimport org.eclipse.kapua.app.console.module.api.client.messages.ConsoleMessages;\nimport org.eclipse.kapua.app.console.module.api.client.util.FailureHandler;\nimport org.eclipse.kapua.app.console.module.api.shared.model.GwtXSRFToken;\nimport org.eclipse.kapua.app.console.module.api.shared.service.GwtSecurityTokenService;\nimport org.eclipse.kapua.app.console.module.api.shared.service.GwtSecurityTokenServiceAsync;\npublic abstract class ActionDialog extends KapuaDialog {\n    protected static final ConsoleMessages MSGS = GWT.create(ConsoleMessages.class);\n    protected final GwtSecurityTokenServiceAsync gwtXSRFService = GWT.create(GwtSecurityTokenService.class);\n    protected GwtXSRFToken xsrfToken;\n    protected static final int FORM_LABEL_WIDTH = 120;\n    protected FormPanel formPanel;\n    protected Button submitButton;\n    protected Button cancelButton;\n    protected Status status;\n    protected Boolean exitStatus;\n    protected String exitMessage;\n    private Boolean dateValueNotNull = false;\n    private Boolean disabledFormPanelEvents = false;\n    public ActionDialog() {\n        super();\n    }\n    @Override\n    protected void onRender(Element parent, int pos) {\n        super.onRender(parent, pos);\n        FormLayout formLayout = new FormLayout();\n        formLayout.setLabelWidth(FORM_LABEL_WIDTH);\n        formPanel = new FormPanel();\n        formPanel.setPadding(0);\n        formPanel.setFrame(false);\n        formPanel.setHeaderVisible(false);\n        formPanel.setBodyBorder(false);\n        formPanel.setBorders(false);\n        formPanel.setLayout(formLayout);\n        formPanel.setEncoding(Encoding.MULTIPART);\n        formPanel.setMethod(Method.POST);\n        addListeners();\n        add(formPanel);\n        Listener<BaseEvent> listener = new Listener<BaseEvent>() {\n            @Override\n            public void handleEvent(BaseEvent be) {\n                setSubmitButtonState();\n            }\n        };\n        final Listener<BaseEvent> pasteEventListener = new Listener<BaseEvent>() {\n            @Override\n            public void handleEvent(BaseEvent be) {\n                if (be.getType() == Events.OnPaste) {\n                    final Timer timer = new Timer() {\n                        @Override\n                        public void run() {\n                            setSubmitButtonState();\n                        }\n                    };\n                    timer.schedule(100);\n                };\n            }\n        };\n        KeyNav<ComponentEvent> keyNav = new KeyNav<ComponentEvent>(formPanel) {\n            public void onKeyPress(ComponentEvent ce) {\n                if (ce.getKeyCode() == KeyCodes.KEY_TAB || ce.getKeyCode() == KeyCodes.KEY_ENTER ) {\n                    setSubmitButtonState();\n                }\n            }\n        };\n        formPanel.addListener(Events.OnMouseUp, listener);\n        formPanel.addListener(Events.OnClick, listener);\n        formPanel.addListener(Events.OnKeyUp, listener);\n        formPanel.addListener(Events.OnPaste, pasteEventListener);\n        sinkEvents(Event.ONPASTE);\n        if (disabledFormPanelEvents) {\n            formPanel.disableEvents(true);\n        }\n        //\n        // Buttons setup\n        createButtons();\n    }\n    /**\n     * \n     * Add the form listeners\n     * \n     */\n    protected abstract void addListeners();\n    @Override\n    public void createButtons() {\n        super.createButtons();\n        status = new Status();\n        status.setBusy(MSGS.waitMsg());\n        status.hide();\n        status.setAutoWidth(true);\n        getButtonBar().add(status);\n        getButtonBar().add(new FillToolItem());\n        submitButton = new Button(getSubmitButtonText());\n        submitButton.setSize(60, 25);\n        submitButton.setStyleAttribute(\"margin-right\", \"2px\");\n        submitButton.addSelectionListener(new SelectionListener<ButtonEvent>() {\n            @Override\n            public void componentSelected(ButtonEvent ce) {\n                preSubmit();\n            }\n        });\n        cancelButton = new Button(getCancelButtonText());\n        cancelButton.setSize(60, 25);\n        cancelButton.setStyleAttribute(\"margin-left\", \"3px\");\n        cancelButton.addSelectionListener(new SelectionListener<ButtonEvent>() {\n            @Override\n            public void componentSelected(ButtonEvent ce) {\n                exitStatus = null;\n                hide();\n            }\n        });\n        addButton(submitButton);\n        addButton(cancelButton);\n    }\n    protected String getSubmitButtonText() {\n        return MSGS.submitButton();\n    }\n    protected String getCancelButtonText() {\n        return MSGS.cancelButton();\n    }\n    protected void preSubmit() {\n        gwtXSRFService.generateSecurityToken(new AsyncCallback<GwtXSRFToken>() {\n            @Override\n            public void onFailure(Throwable ex) {\n                FailureHandler.handle(ex);\n            }\n            @Override\n            public void onSuccess(GwtXSRFToken xsrfToken) {\n                setXsrfToken(xsrfToken);\n                mask();\n                submitButton.disable();\n                cancelButton.disable();\n                status.show();\n                submit();\n            }\n        });\n    }\n    public void setXsrfToken(GwtXSRFToken xsrfToken) {\n        this.xsrfToken = xsrfToken;\n    }\n    public abstract void submit();\n    public Boolean getExitStatus() {\n        return exitStatus;\n    }\n    public String getExitMessage() {\n        return exitMessage;\n    }\n    public void maskDialog() {\n        formPanel.mask(MSGS.loading());\n    }\n    public void unmaskDialog() {\n        formPanel.unmask();\n    }\n    public void setSubmitButtonState() {\n        if (formPanel.isDirty() || dateValueNotNull) {\n            submitButton.enable();\n        } else {\n            submitButton.disable();\n        }\n    }\n    public void setDateValueNotNull(Boolean dateValueNotNull) {\n        this.dateValueNotNull = dateValueNotNull;\n    }\n    public void setDisabledFormPanelEvents(Boolean disabledFormPanelEvents) {\n        this.disabledFormPanelEvents = disabledFormPanelEvents;\n    }\n    /**\n     * Method for checking the thrown exception for the SUBJECT_UNAUTHORIZED error code.\n     * @param caught The exception thrown\n     * @return In case of the SUBJECT_UNAUTHORIZED error code the returned value is true \n     * and the exitMessage is set. For every other case the returned value is false.\n     */\n<fim_suffix>    public boolean isPermissionErrorMessage(Throwable caught) {\n        if ((caught instanceof GwtKapuaException)\n                && GwtKapuaErrorCode.SUBJECT_UNAUTHORIZED.equals(((GwtKapuaException) caught).getCode())) {\n            exitMessage = caught.getLocalizedMessage();\n            return true;\n        } else {\n            return false;\n        }\n    }<fim_middle>// function below has no smell\n"}