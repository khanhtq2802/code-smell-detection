{"text": "<fim_prefix>/*\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.example.android.agera.basicsample;\n\nimport com.google.android.agera.Observable;\nimport com.google.android.agera.Updatable;\nimport com.google.android.agera.UpdateDispatcher;\n\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.content.ContextCompat;\nimport android.support.v4.widget.SwipeRefreshLayout;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ArrayAdapter;\nimport android.widget.ListAdapter;\nimport android.widget.ListView;\nimport android.widget.Toast;\n\n/**\n * The MainFragment contains a {@link ListView} that displays a list of usernames. The usernames\n * are loaded in {@link Fragment#onResume()} and there is a {@link SwipeRefreshLayout} allowing the\n * user to manually refresh the list of usernames.\n * <P >\n * This is set up as an {@link Updatable} as changes in the {@link UsernamesRepository} should\n * trigger the MainFragment to redraw itself.\n */\n<fim_suffix>public class MainFragment extends Fragment implements Updatable {\n\n  /**\n   * The {@link SwipeRefreshLayout.OnRefreshListener} is also an {@link Observable}. It is\n   * observed by the {@link UsernamesRepository}, an update is triggered whenever\n   * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh()} is fired.\n   */\n  private OnRefreshObservable refreshObservable;\n\n  /**\n   * The {@link UsernamesRepository} takes care of providing the data to this fragment. It is an\n   * {@link Updatable} because changes in the {@link OnRefreshObservable} require that it updates\n   * its list of usernames. It is also an {@link Observable} and is observed by this MainFragment.\n   */\n  private UsernamesRepository usernamesRepository;\n\n  private ListAdapter listAdapter;\n\n  private ListView listView;\n\n  private SwipeRefreshLayout swipeRefreshLayout;\n\n  @Override\n  public View onCreateView(LayoutInflater inflater, ViewGroup container,\n      Bundle savedInstanceState) {\n    View root = inflater.inflate(R.layout.main_frag, container, false);\n\n    listView = (ListView) root.findViewById(R.id.list);\n\n    // Set pull to refresh as an observable and attach it to the view\n    refreshObservable = new OnRefreshObservable();\n    swipeRefreshLayout = (SwipeRefreshLayout) root.findViewById(R.id.refresh_layout);\n    swipeRefreshLayout.setColorSchemeColors(\n        ContextCompat.getColor(getActivity(), R.color.colorPrimary),\n        ContextCompat.getColor(getActivity(), R.color.colorAccent),\n        ContextCompat.getColor(getActivity(), R.color.colorPrimaryDark));\n    swipeRefreshLayout.setOnRefreshListener(refreshObservable);\n\n    // Initialise the repository\n    usernamesRepository = new UsernamesRepository(new UsernamesFetcher());\n\n    return root;\n  }\n\n  @Override\n  public void onResume() {\n    super.onResume();\n\n    // We make sure the repository observes the refresh listener\n    refreshObservable.addUpdatable(usernamesRepository);\n\n    /**\n     * We make sure the main fragment observes the repository. This will also trigger the\n     * repository to update itself, via\n     * {@link UsernamesRepository#firstUpdatableAdded(UpdateDispatcher)}.\n     */\n    usernamesRepository.addUpdatable(this);\n\n    /**\n     * We update the UI to show the data is being updated. We need to wait for the\n     * {@link swipeRefreshLayout} to be ready before asking it to show itself as refreshing.\n     */\n    swipeRefreshLayout.post(new Runnable() {\n      @Override\n      public void run() {\n        swipeRefreshLayout.setRefreshing(true);\n      }\n    });\n  }\n\n  @Override\n  public void onPause() {\n    super.onPause();\n    // We remove the observations to avoid triggering updates when they aren't needed\n    refreshObservable.removeUpdatable(usernamesRepository);\n    usernamesRepository.removeUpdatable(this);\n  }\n\n  /**\n   * As this MainFragment is observing the {@link UsernamesRepository}, this is triggered\n   * whenever the {@link UsernamesRepository} updates itself.\n   */\n  @Override\n  public void update() {\n    /**\n     * We update the UI to show the data has been updated. We need to wait for the\n     * {@link swipeRefreshLayout} to be ready before asking it to show itself as not refreshing.\n     */\n    swipeRefreshLayout.post(new Runnable() {\n      @Override\n      public void run() {\n        swipeRefreshLayout.setRefreshing(false);\n      }\n    });\n\n    // Check error status\n    if (usernamesRepository.isError()) {\n      // Show error message, do not update list as we still want to show the last known list of\n      // usernames\n      Toast.makeText(getContext(), getResources().getString(R.string.error),\n          Toast.LENGTH_LONG).show();\n    } else {\n      // Update the list of usernames\n      listAdapter = new ArrayAdapter<String>(getContext(),\n          android.R.layout.simple_list_item_1, usernamesRepository.get());\n      listView.setAdapter(listAdapter);\n    }\n  }\n}<fim_middle>// class below has no smell\n"}