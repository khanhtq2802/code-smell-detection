{"text": "<fim_prefix>/*-\n *******************************************************************************\n * Copyright (c) 2015 Diamond Light Source Ltd.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * This file was auto-generated from the NXDL XML definition.\n * Generated at: 2017-06-23T10:28:44.471+01:00\n *******************************************************************************/\npackage org.eclipse.dawnsci.nexus.impl;\nimport java.util.Set;\nimport java.util.EnumSet;\nimport java.util.Map;\nimport org.eclipse.dawnsci.analysis.api.tree.DataNode;\nimport org.eclipse.january.dataset.IDataset;\nimport org.eclipse.dawnsci.nexus.*;\n/**\n * A beamline mirror or supermirror.\n * \n * @version 1.0\n */\npublic class NXmirrorImpl extends NXobjectImpl implements NXmirror {\n\tprivate static final long serialVersionUID = 1L;  // no state in this class, so always compatible\n\tpublic static final Set<NexusBaseClass> PERMITTED_CHILD_GROUP_CLASSES = EnumSet.of(\n\t\tNexusBaseClass.NX_GEOMETRY,\n\t\tNexusBaseClass.NX_DATA,\n\t\tNexusBaseClass.NX_SHAPE,\n\t\tNexusBaseClass.NX_DATA);\n\tpublic NXmirrorImpl() {\n\t\tsuper();\n\t}\n\tpublic NXmirrorImpl(final long oid) {\n\t\tsuper(oid);\n\t}\n\t@Override\n\tpublic Class<? extends NXobject> getNXclass() {\n\t\treturn NXmirror.class;\n\t}\n\t@Override\n\tpublic NexusBaseClass getNexusBaseClass() {\n\t\treturn NexusBaseClass.NX_MIRROR;\n\t}\n\t@Override\n\tpublic Set<NexusBaseClass> getPermittedChildGroupClasses() {\n\t\treturn PERMITTED_CHILD_GROUP_CLASSES;\n\t}\n\t@Override\n\tpublic NXgeometry getGeometry() {\n\t\treturn getChild(\"geometry\", NXgeometry.class);\n\t}\n\t@Override\n\tpublic void setGeometry(NXgeometry geometry) {\n\t\tputChild(\"geometry\", geometry);\n\t}\n\t@Override\n\tpublic NXgeometry getGeometry(String name) {\n\t\treturn getChild(name, NXgeometry.class);\n\t}\n\t@Override\n\tpublic void setGeometry(String name, NXgeometry geometry) {\n\t\tputChild(name, geometry);\n\t}\n\t@Override\n\tpublic Map<String, NXgeometry> getAllGeometry() {\n\t\treturn getChildren(NXgeometry.class);\n\t}\n\t@Override\n\tpublic void setAllGeometry(Map<String, NXgeometry> geometry) {\n\t\tsetChildren(geometry);\n\t}\n\t@Override\n\tpublic IDataset getType() {\n\t\treturn getDataset(NX_TYPE);\n\t}\n\t@Override\n\tpublic String getTypeScalar() {\n\t\treturn getString(NX_TYPE);\n\t}\n\t@Override\n\tpublic DataNode setType(IDataset type) {\n\t\treturn setDataset(NX_TYPE, type);\n\t}\n\t@Override\n\tpublic DataNode setTypeScalar(String type) {\n\t\treturn setString(NX_TYPE, type);\n\t}\n\t@Override\n\tpublic IDataset getDescription() {\n\t\treturn getDataset(NX_DESCRIPTION);\n\t}\n\t@Override\n\tpublic String getDescriptionScalar() {\n\t\treturn getString(NX_DESCRIPTION);\n\t}\n\t@Override\n\tpublic DataNode setDescription(IDataset description) {\n\t\treturn setDataset(NX_DESCRIPTION, description);\n\t}\n\t@Override\n\tpublic DataNode setDescriptionScalar(String description) {\n\t\treturn setString(NX_DESCRIPTION, description);\n\t}\n\t@Override\n\tpublic IDataset getIncident_angle() {\n\t\treturn getDataset(NX_INCIDENT_ANGLE);\n\t}\n\t@Override\n\tpublic Double getIncident_angleScalar() {\n\t\treturn getDouble(NX_INCIDENT_ANGLE);\n\t}\n\t@Override\n\tpublic DataNode setIncident_angle(IDataset incident_angle) {\n\t\treturn setDataset(NX_INCIDENT_ANGLE, incident_angle);\n\t}\n\t@Override\n\tpublic DataNode setIncident_angleScalar(Double incident_angle) {\n\t\treturn setField(NX_INCIDENT_ANGLE, incident_angle);\n\t}\n\t@Override\n\tpublic NXdata getReflectivity() {\n\t\treturn getChild(\"reflectivity\", NXdata.class);\n\t}\n\t@Override\n\tpublic void setReflectivity(NXdata reflectivity) {\n\t\tputChild(\"reflectivity\", reflectivity);\n\t}\n\t@Override\n\tpublic IDataset getBend_angle_x() {\n\t\treturn getDataset(NX_BEND_ANGLE_X);\n\t}\n\t@Override\n\tpublic Double getBend_angle_xScalar() {\n\t\treturn getDouble(NX_BEND_ANGLE_X);\n\t}\n<fim_suffix>\t@Override\n\tpublic DataNode setBend_angle_x(IDataset bend_angle_x) {\n\t\treturn setDataset(NX_BEND_ANGLE_X, bend_angle_x);\n\t}\n\t@Override\n\tpublic DataNode setBend_angle_xScalar(Double bend_angle_x) {\n\t\treturn setField(NX_BEND_ANGLE_X, bend_angle_x);\n\t}\n\t@Override\n\tpublic IDataset getBend_angle_y() {\n\t\treturn getDataset(NX_BEND_ANGLE_Y);\n\t}\n\t@Override\n\tpublic Double getBend_angle_yScalar() {\n\t\treturn getDouble(NX_BEND_ANGLE_Y);\n\t}\n\t@Override\n\tpublic DataNode setBend_angle_y(IDataset bend_angle_y) {\n\t\treturn setDataset(NX_BEND_ANGLE_Y, bend_angle_y);\n\t}\n\t@Override\n\tpublic DataNode setBend_angle_yScalar(Double bend_angle_y) {\n\t\treturn setField(NX_BEND_ANGLE_Y, bend_angle_y);\n\t}\n\t@Override\n\tpublic IDataset getInterior_atmosphere() {\n\t\treturn getDataset(NX_INTERIOR_ATMOSPHERE);\n\t}\n\t@Override\n\tpublic String getInterior_atmosphereScalar() {\n\t\treturn getString(NX_INTERIOR_ATMOSPHERE);\n\t}\n\t@Override\n\tpublic DataNode setInterior_atmosphere(IDataset interior_atmosphere) {\n\t\treturn setDataset(NX_INTERIOR_ATMOSPHERE, interior_atmosphere);\n\t}\n\t@Override\n\tpublic DataNode setInterior_atmosphereScalar(String interior_atmosphere) {\n\t\treturn setString(NX_INTERIOR_ATMOSPHERE, interior_atmosphere);\n\t}\n\t@Override\n\tpublic IDataset getExternal_material() {\n\t\treturn getDataset(NX_EXTERNAL_MATERIAL);\n\t}\n\t@Override\n\tpublic String getExternal_materialScalar() {\n\t\treturn getString(NX_EXTERNAL_MATERIAL);\n\t}\n\t@Override\n\tpublic DataNode setExternal_material(IDataset external_material) {\n\t\treturn setDataset(NX_EXTERNAL_MATERIAL, external_material);\n\t}\n\t@Override\n\tpublic DataNode setExternal_materialScalar(String external_material) {\n\t\treturn setString(NX_EXTERNAL_MATERIAL, external_material);\n\t}\n\t@Override\n\tpublic IDataset getM_value() {\n\t\treturn getDataset(NX_M_VALUE);\n\t}\n\t@Override\n\tpublic Double getM_valueScalar() {\n\t\treturn getDouble(NX_M_VALUE);\n\t}\n\t@Override\n\tpublic DataNode setM_value(IDataset m_value) {\n\t\treturn setDataset(NX_M_VALUE, m_value);\n\t}\n\t@Override\n\tpublic DataNode setM_valueScalar(Double m_value) {<fim_middle>// function below has no smell\n"}