{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.qpid.proton.engine.impl.ssl;\n\nimport javax.net.ssl.SSLContext;\nimport org.apache.qpid.proton.engine.ProtonJSslDomain;\nimport org.apache.qpid.proton.engine.SslDomain;\nimport org.apache.qpid.proton.engine.SslPeerDetails;\n\npublic class SslDomainImpl implements SslDomain, ProtonSslEngineProvider, ProtonJSslDomain\n{\n    private Mode _mode;\n    private VerifyMode _verifyMode;\n    private String _certificateFile;\n    private String _privateKeyFile;\n    private String _privateKeyPassword;\n    private String _trustedCaDb;\n    private boolean _allowUnsecuredClient;\n    private SSLContext _sslContext;\n\n    private final SslEngineFacadeFactory _sslEngineFacadeFactory = new SslEngineFacadeFactory();\n\n    /**\n     * Application code should use {@link org.apache.qpid.proton.engine.SslDomain.Factory#create()} instead.\n     */\n    public SslDomainImpl()\n    {\n    }\n\n    @Override\n    public void init(Mode mode)\n    {\n        _sslEngineFacadeFactory.resetCache();\n        _mode = mode;\n    }\n\n    @Override\n    public Mode getMode()\n    {\n        return _mode;\n    }\n\n    @Override\n    public void setCredentials(String certificateFile, String privateKeyFile, String privateKeyPassword)\n    {\n        _certificateFile = certificateFile;\n        _privateKeyFile = privateKeyFile;\n        _privateKeyPassword = privateKeyPassword;\n        _sslEngineFacadeFactory.resetCache();\n    }\n\n    @Override\n    public void setTrustedCaDb(String certificateDb)\n    {\n        _trustedCaDb = certificateDb;\n        _sslEngineFacadeFactory.resetCache();\n    }\n\n<fim_suffix>    @Override\n    public String getTrustedCaDb()\n    {\n        return _trustedCaDb;\n    }\n\n    @Override\n    public void setSslContext(SSLContext sslContext)\n    {\n        _sslContext = sslContext;\n    }\n\n    @Override\n    public SSLContext getSslContext()\n    {\n        return _sslContext;\n    }\n\n    @Override\n    public void setPeerAuthentication(VerifyMode verifyMode)\n    {\n        _verifyMode = verifyMode;\n        _sslEngineFacadeFactory.resetCache();\n    }\n\n    @Override\n    public VerifyMode getPeerAuthentication()\n    {\n        if(_verifyMode == null)\n        {\n           return _mode == Mode.SERVER ? VerifyMode.ANONYMOUS_PEER : VerifyMode.VERIFY_PEER_NAME;\n        }\n\n        return _verifyMode;\n    }\n\n    @Override\n    public String getPrivateKeyFile()\n    {\n        return _privateKeyFile;\n    }\n\n    @Override\n    public String getPrivateKeyPassword()\n    {\n        return _privateKeyPassword;\n    }\n\n    @Override\n    public String getCertificateFile()\n    {\n        return _certificateFile;\n    }\n\n    @Override\n    public void allowUnsecuredClient(boolean allowUnsecured)\n    {\n        _allowUnsecuredClient = allowUnsecured;\n        _sslEngineFacadeFactory.resetCache();\n    }\n\n    @Override\n    public boolean allowUnsecuredClient()\n    {\n        return _allowUnsecuredClient;\n    }\n\n    @Override\n    public ProtonSslEngine createSslEngine(SslPeerDetails peerDetails)\n    {\n        return _sslEngineFacadeFactory.createProtonSslEngine(this, peerDetails);\n    }\n\n    @Override\n    public String toString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"SslDomainImpl [_mode=\").append(_mode)\n            .append(\", _verifyMode=\").append(_verifyMode)\n            .append(\", _certificateFile=\").append(_certificateFile)\n            .append(\", _privateKeyFile=\").append(_privateKeyFile)\n            .append(\", _trustedCaDb=\").append(_trustedCaDb)\n            .append(\", _allowUnsecuredClient=\").append(_allowUnsecuredClient)\n            .append(\"]\");\n        return builder.toString();\n    }\n}<fim_middle>// function below has no smell\n"}