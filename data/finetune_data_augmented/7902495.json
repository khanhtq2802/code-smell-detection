{"text": "<fim_prefix>/*\n * Copyright 2016-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License. You may obtain\n * a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\npackage com.facebook.buck.log;\nimport com.facebook.buck.core.model.BuildId;\nimport com.facebook.buck.core.util.log.Logger;\nimport com.facebook.buck.io.file.MorePaths;\nimport com.facebook.buck.io.windowsfs.WindowsFS;\nimport com.facebook.buck.util.DirectoryCleaner;\nimport com.facebook.buck.util.Verbosity;\nimport com.facebook.buck.util.concurrent.CommonThreadFactoryState;\nimport com.facebook.buck.util.concurrent.ThreadIdToCommandIdMapper;\nimport com.facebook.buck.util.environment.Platform;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.Lists;\nimport java.io.Closeable;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.logging.Level;\nimport javax.annotation.Nullable;\npublic class GlobalStateManager {\n  private static final Logger LOG = Logger.get(GlobalStateManager.class);\n  private static final GlobalStateManager SINGLETON = new GlobalStateManager();\n  private static final String DEFAULT_LOG_FILE_WRITER_KEY = \"DEFAULT\";\n  private static final DirectoryCleaner LOG_FILE_DIR_CLEANER = LogFileHandler.newCleaner();\n  // Shared global state.\n  private final ConcurrentMap<Long, String> threadIdToCommandId;\n  // Global state required by the ConsoleHandler.\n  private final ConcurrentMap<String, ConsoleHandlerState.Writer> commandIdToConsoleHandlerWriter;\n  private final ConcurrentMap<String, Level> commandIdToConsoleHandlerLevel;\n  // Global state required by the LogFileHandler.\n  private final ConcurrentMap<String, java.io.Writer> commandIdToLogFileHandlerWriter;\n  private final ConcurrentMap<String, Boolean> commandIdToIsSuperconsoleEnabled;\n  private final ConcurrentMap<String, Boolean> commandIdToIsDaemon;\n  private final ConcurrentMap<String, Boolean> commandIdToIsRemoteExecution;\n  public static GlobalStateManager singleton() {\n    return SINGLETON;\n  }\n  public GlobalStateManager() {\n    this.threadIdToCommandId = new ConcurrentHashMap<>();\n    this.commandIdToConsoleHandlerWriter = new ConcurrentHashMap<>();\n    this.commandIdToConsoleHandlerLevel = new ConcurrentHashMap<>();\n    this.commandIdToLogFileHandlerWriter = new ConcurrentHashMap<>();\n    this.commandIdToIsSuperconsoleEnabled = new ConcurrentHashMap<>();\n    this.commandIdToIsDaemon = new ConcurrentHashMap<>();\n    this.commandIdToIsRemoteExecution = new ConcurrentHashMap<>();\n    ReferenceCountedWriter defaultWriter =\n        createReferenceCountedWriter(\n            InvocationInfo.of(\n                    new BuildId(),\n                    false,\n                    false,\n                    \"launch\",\n                    ImmutableList.of(),\n                    ImmutableList.of(),\n                    LogConfigSetup.DEFAULT_SETUP.getLogDir(),\n                    false)\n                .getLogFilePath());\n    putReferenceCountedWriter(DEFAULT_LOG_FILE_WRITER_KEY, defaultWriter);\n  }\n  public LoggerIsMappedToThreadScope setupLoggers(\n      InvocationInfo info,\n      OutputStream consoleHandlerStream,\n      OutputStream consoleHandlerOriginalStream,\n      Verbosity consoleHandlerVerbosity) {\n    long threadId = Thread.currentThread().getId();\n    String commandId = info.getCommandId();\n    ReferenceCountedWriter defaultWriter = createReferenceCountedWriter(info.getLogFilePath());\n    ReferenceCountedWriter newWriter = defaultWriter.newReference();\n    // Put defaultWriter to map only after newWriter has been created. Otherwise defaultWriter may\n    // get closed before newWriter was created due to concurrency.\n    putReferenceCountedWriter(DEFAULT_LOG_FILE_WRITER_KEY, defaultWriter);\n    putReferenceCountedWriter(commandId, newWriter);\n    createUserFriendlySymLink(info);\n    // Setup the shared state.\n    threadIdToCommandId.putIfAbsent(threadId, commandId);\n    // Setup the ConsoleHandler state.\n    commandIdToConsoleHandlerWriter.put(\n        commandId, ConsoleHandler.utf8OutputStreamWriter(consoleHandlerStream));\n    if (Verbosity.ALL.equals(consoleHandlerVerbosity)) {\n      commandIdToConsoleHandlerLevel.put(commandId, Level.ALL);\n    }\n    commandIdToIsSuperconsoleEnabled.put(commandId, info.getSuperConsoleEnabled());\n    commandIdToIsDaemon.put(commandId, info.getIsDaemon());\n    commandIdToIsRemoteExecution.put(commandId, info.getIsRemoteExecution());\n    return new LoggerIsMappedToThreadScope() {\n      @Override\n      public Closeable setWriter(ConsoleHandlerState.Writer writer) {\n        ConsoleHandlerState.Writer previousWriter = commandIdToConsoleHandlerWriter.get(commandId);\n        commandIdToConsoleHandlerWriter.put(commandId, writer);\n        return () -> commandIdToConsoleHandlerWriter.put(commandId, previousWriter);\n      }\n      @Override\n      public void close() {\n        // Tear down the LogFileHandler state.\n        removeReferenceCountedWriter(commandId);\n        // Tear down the ConsoleHandler state.\n        commandIdToConsoleHandlerWriter.put(\n            commandId, ConsoleHandler.utf8OutputStreamWriter(consoleHandlerOriginalStream));\n        commandIdToConsoleHandlerLevel.remove(commandId);\n        commandIdToIsSuperconsoleEnabled.remove(commandId);\n        commandIdToIsDaemon.remove(commandId);\n        commandIdToIsRemoteExecution.remove(commandId);\n        // Tear down the shared state.\n        // NOTE: Avoid iterator in case there's a concurrent change to this map.\n        List<Long> allKeys = Lists.newArrayList(threadIdToCommandId.keySet());\n        for (Long threadId1 : allKeys) {\n          if (commandId.equals(threadIdToCommandId.get(threadId1))) {\n            threadIdToCommandId.remove(threadId1);\n          }\n        }\n        try {\n          LOG_FILE_DIR_CLEANER.clean(info.getLogDirectoryPath().getParent());\n        } catch (IOException e) {\n          LOG.info(\n              \"Failed cleaning log directory. It's possible another concurrent buck command \"\n                  + \"removed the file. Error: %s\",\n              e.getMessage());\n          LOG.debug(e, \"From exception\");\n        }\n      }\n    };\n  }\n  private void createUserFriendlySymLink(InvocationInfo info) {\n    try {\n      String symlinkName = \"last_\" + info.getSubCommand();\n      Path symlinkPath = info.getBuckLogDir().resolve(symlinkName);\n      Files.deleteIfExists(symlinkPath);\n      if (Platform.detect() != Platform.WINDOWS) {\n        MorePaths.createSymLink(\n            new WindowsFS(), symlinkPath, info.getLogDirectoryPath().toAbsolutePath());\n      }\n    } catch (IOException e) {\n      LOG.info(e, \"Failed to create a user friendly symlink to logs dir for the last command.\");\n    }\n  }\n  private void removeReferenceCountedWriter(String commandId) {\n    putReferenceCountedWriter(commandId, null);\n  }\n  private void putReferenceCountedWriter(\n      String commandId, @Nullable ReferenceCountedWriter newWriter) {\n    try {\n      java.io.Writer oldWriter;\n      if (newWriter == null) {\n        oldWriter = commandIdToLogFileHandlerWriter.remove(commandId);\n      } else {\n        oldWriter = commandIdToLogFileHandlerWriter.put(commandId, newWriter);\n      }\n      if (oldWriter != null) {\n        oldWriter.close();\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(String.format(\"Exception closing writer [%s].\", commandId), e);\n    }\n  }\n<fim_suffix>  private ReferenceCountedWriter createReferenceCountedWriter(Path logFilePath) {\n    try {\n      Files.createDirectories(logFilePath.getParent());\n      return new ReferenceCountedWriter(\n          new OutputStreamWriter(\n              new FileOutputStream(logFilePath.toString()), StandardCharsets.UTF_8));\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(String.format(\"Could not create file [%s].\", logFilePath), e);\n    } catch (IOException e) {\n      throw new RuntimeException(String.format(\"Exception wrapping file [%s].\", logFilePath), e);\n    }\n  }<fim_middle>// function below has no smell\n"}