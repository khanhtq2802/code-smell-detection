{"text": "<fim_prefix>/****************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one   *\n * or more contributor license agreements.  See the NOTICE file *\n * distributed with this work for additional information        *\n * regarding copyright ownership.  The ASF licenses this file   *\n * to you under the Apache License, Version 2.0 (the            *\n * \"License\"); you may not use this file except in compliance   *\n * with the License.  You may obtain a copy of the License at   *\n *                                                              *\n *   http://www.apache.org/licenses/LICENSE-2.0                 *\n *                                                              *\n * Unless required by applicable law or agreed to in writing,   *\n * software distributed under the License is distributed on an  *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n * KIND, either express or implied.  See the License for the    *\n * specific language governing permissions and limitations      *\n * under the License.                                           *\n ****************************************************************/\n\npackage org.apache.james.mailbox.cassandra.mail;\n\nimport static com.datastax.driver.core.querybuilder.QueryBuilder.bindMarker;\nimport static com.datastax.driver.core.querybuilder.QueryBuilder.eq;\nimport static com.datastax.driver.core.querybuilder.QueryBuilder.insertInto;\nimport static com.datastax.driver.core.querybuilder.QueryBuilder.select;\nimport static org.apache.james.mailbox.cassandra.table.CassandraAttachmentV2Table.BLOB_ID;\nimport static org.apache.james.mailbox.cassandra.table.CassandraAttachmentV2Table.FIELDS;\nimport static org.apache.james.mailbox.cassandra.table.CassandraAttachmentV2Table.ID;\nimport static org.apache.james.mailbox.cassandra.table.CassandraAttachmentV2Table.ID_AS_UUID;\nimport static org.apache.james.mailbox.cassandra.table.CassandraAttachmentV2Table.SIZE;\nimport static org.apache.james.mailbox.cassandra.table.CassandraAttachmentV2Table.TABLE_NAME;\nimport static org.apache.james.mailbox.cassandra.table.CassandraAttachmentV2Table.TYPE;\n\nimport java.util.Objects;\n\nimport javax.inject.Inject;\n\nimport org.apache.james.backends.cassandra.utils.CassandraAsyncExecutor;\nimport org.apache.james.blob.api.BlobId;\nimport org.apache.james.mailbox.model.Attachment;\nimport org.apache.james.mailbox.model.AttachmentId;\n\nimport com.datastax.driver.core.PreparedStatement;\nimport com.datastax.driver.core.Row;\nimport com.datastax.driver.core.Session;\nimport com.google.common.base.Preconditions;\nimport reactor.core.publisher.Mono;\n\npublic class CassandraAttachmentDAOV2 {\n<fim_suffix>    public static class DAOAttachment {\n        private final AttachmentId attachmentId;\n        private final BlobId blobId;\n        private final String type;\n        private final long size;\n\n        private DAOAttachment(AttachmentId attachmentId, BlobId blobId, String type, long size) {\n            this.attachmentId = attachmentId;\n            this.blobId = blobId;\n            this.type = type;\n            this.size = size;\n        }\n\n        public AttachmentId getAttachmentId() {\n            return attachmentId;\n        }\n\n        public BlobId getBlobId() {\n            return blobId;\n        }\n\n        public String getType() {\n            return type;\n        }\n\n        public long getSize() {\n            return size;\n        }\n\n        public Attachment toAttachment(byte[] data) {\n            return Attachment.builder()\n                .attachmentId(attachmentId)\n                .type(type)\n                .bytes(data)\n                .build();\n        }\n\n        @Override\n        public final boolean equals(Object o) {\n            if (o instanceof DAOAttachment) {\n                DAOAttachment that = (DAOAttachment) o;\n\n                return Objects.equals(this.size, that.size)\n                    && Objects.equals(this.attachmentId, that.attachmentId)\n                    && Objects.equals(this.blobId, that.blobId)\n                    && Objects.equals(this.type, that.type);\n            }\n            return false;\n        }\n\n        @Override\n        public final int hashCode() {\n            return Objects.hash(attachmentId, blobId, type, size);\n        }\n    }\n\n    public static DAOAttachment from(Attachment attachment, BlobId blobId) {\n        return new DAOAttachment(\n            attachment.getAttachmentId(),\n            blobId,\n            attachment.getType(),\n            attachment.getSize());\n    }\n\n    private static DAOAttachment fromRow(Row row, BlobId.Factory blobIfFactory) {\n        return new DAOAttachment(\n            AttachmentId.from(row.getString(ID)),\n            blobIfFactory.from(row.getString(BLOB_ID)),\n            row.getString(TYPE),\n            row.getLong(SIZE));\n    }\n\n    private final BlobId.Factory blobIdFactory;\n    private final CassandraAsyncExecutor cassandraAsyncExecutor;\n    private final PreparedStatement insertStatement;\n    private final PreparedStatement selectStatement;\n\n    @Inject\n    public CassandraAttachmentDAOV2(BlobId.Factory blobIdFactory, Session session) {\n        this.blobIdFactory = blobIdFactory;\n        this.cassandraAsyncExecutor = new CassandraAsyncExecutor(session);\n\n        this.selectStatement = prepareSelect(session);\n        this.insertStatement = prepareInsert(session);\n    }\n\n    private PreparedStatement prepareInsert(Session session) {\n        return session.prepare(\n            insertInto(TABLE_NAME)\n                .value(ID_AS_UUID, bindMarker(ID_AS_UUID))\n                .value(ID, bindMarker(ID))\n                .value(BLOB_ID, bindMarker(BLOB_ID))\n                .value(TYPE, bindMarker(TYPE))\n                .value(SIZE, bindMarker(SIZE)));\n    }\n\n    private PreparedStatement prepareSelect(Session session) {\n        return session.prepare(select(FIELDS)\n            .from(TABLE_NAME)\n            .where(eq(ID_AS_UUID, bindMarker(ID_AS_UUID))));\n    }\n\n    public Mono<DAOAttachment> getAttachment(AttachmentId attachmentId) {\n        Preconditions.checkArgument(attachmentId != null);\n        return cassandraAsyncExecutor.executeSingleRow(\n            selectStatement.bind()\n                .setUUID(ID_AS_UUID, attachmentId.asUUID()))\n            .map(row -> CassandraAttachmentDAOV2.fromRow(row, blobIdFactory));\n    }\n\n    public Mono<Void> storeAttachment(DAOAttachment attachment) {\n        return cassandraAsyncExecutor.executeVoid(\n            insertStatement.bind()\n                .setUUID(ID_AS_UUID, attachment.getAttachmentId().asUUID())\n                .setString(ID, attachment.getAttachmentId().getId())\n                .setLong(SIZE, attachment.getSize())\n                .setString(TYPE, attachment.getType())\n                .setString(BLOB_ID, attachment.getBlobId().asString()));\n    }\n\n}<fim_middle>// class below is data class\n"}