{"text": "<fim_prefix>/*\n * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\npackage software.amazon.awssdk.protocols.query.internal.unmarshall;\n\nimport static software.amazon.awssdk.awscore.util.AwsHeader.AWS_REQUEST_ID;\n\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.function.Function;\nimport software.amazon.awssdk.annotations.SdkInternalApi;\nimport software.amazon.awssdk.awscore.AwsResponse;\nimport software.amazon.awssdk.awscore.AwsResponseMetadata;\nimport software.amazon.awssdk.awscore.DefaultAwsResponseMetadata;\nimport software.amazon.awssdk.core.SdkPojo;\nimport software.amazon.awssdk.core.SdkStandardLogger;\nimport software.amazon.awssdk.core.http.HttpResponseHandler;\nimport software.amazon.awssdk.core.interceptor.ExecutionAttributes;\nimport software.amazon.awssdk.http.SdkHttpFullResponse;\nimport software.amazon.awssdk.http.SdkHttpResponse;\nimport software.amazon.awssdk.utils.Logger;\nimport software.amazon.awssdk.utils.Pair;\n\n/**\n * Response handler for AWS/Query services and Amazon EC2 which is a dialect of the Query protocol.\n *\n * @param <T> Indicates the type being unmarshalled by this response handler.\n */\n<fim_suffix>@SdkInternalApi\npublic final class AwsQueryResponseHandler<T extends AwsResponse> implements HttpResponseHandler<T> {\n\n    private static final Logger log = Logger.loggerFor(AwsQueryResponseHandler.class);\n\n    private final QueryProtocolUnmarshaller unmarshaller;\n    private final Function<SdkHttpFullResponse, SdkPojo> pojoSupplier;\n\n\n    public AwsQueryResponseHandler(QueryProtocolUnmarshaller unmarshaller,\n                                   Function<SdkHttpFullResponse, SdkPojo> pojoSupplier) {\n        this.unmarshaller = unmarshaller;\n        this.pojoSupplier = pojoSupplier;\n    }\n\n    @Override\n    public T handle(SdkHttpFullResponse response, ExecutionAttributes executionAttributes) throws Exception {\n        try {\n            return unmarshallResponse(response);\n        } finally {\n            response.content().ifPresent(i -> {\n                try {\n                    i.close();\n                } catch (IOException e) {\n                    log.warn(() -> \"Error closing HTTP content.\", e);\n                }\n            });\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private T unmarshallResponse(SdkHttpFullResponse response) throws Exception {\n        SdkStandardLogger.REQUEST_LOGGER.trace(() -> \"Parsing service response XML.\");\n        Pair<T, Map<String, String>> result = unmarshaller.unmarshall(pojoSupplier.apply(response), response);\n        SdkStandardLogger.REQUEST_LOGGER.trace(() -> \"Done parsing service response.\");\n        AwsResponseMetadata responseMetadata = generateResponseMetadata(response, result.right());\n        return (T) result.left().toBuilder().responseMetadata(responseMetadata).build();\n    }\n\n    /**\n     * Create the default {@link AwsResponseMetadata}. This might be wrapped by a service\n     * specific metadata object to provide modeled access to additional metadata. (See S3 and Kinesis).\n     */\n    private AwsResponseMetadata generateResponseMetadata(SdkHttpResponse response, Map<String, String> metadata) {\n        if (!metadata.containsKey(AWS_REQUEST_ID)) {\n            metadata.put(AWS_REQUEST_ID,\n                         response.firstMatchingHeader(X_AMZN_REQUEST_ID_HEADER).orElse(null));\n        }\n\n        response.headers().forEach((key, value) -> metadata.put(key, value.get(0)));\n        return DefaultAwsResponseMetadata.create(metadata);\n    }\n\n    @Override\n    public boolean needsConnectionLeftOpen() {\n        // Query doesn't support streaming so this is always false\n        return false;\n    }\n\n}<fim_middle>// class below has no smell\n"}