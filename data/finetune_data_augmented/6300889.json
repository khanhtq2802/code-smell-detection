{"text": "<fim_prefix>//\n//  ========================================================================\n//  Copyright (c) 1995-2019 Mort Bay Consulting Pty. Ltd.\n//  ------------------------------------------------------------------------\n//  All rights reserved. This program and the accompanying materials\n//  are made available under the terms of the Eclipse Public License v1.0\n//  and Apache License v2.0 which accompanies this distribution.\n//\n//      The Eclipse Public License is available at\n//      http://www.eclipse.org/legal/epl-v10.html\n//\n//      The Apache License v2.0 is available at\n//      http://www.opensource.org/licenses/apache2.0.php\n//\n//  You may elect to redistribute this code under either of these licenses.\n//  ========================================================================\n//\npackage org.eclipse.jetty.websocket.common;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\nimport org.eclipse.jetty.util.BufferUtil;\nimport org.eclipse.jetty.websocket.api.extensions.Frame;\nimport org.eclipse.jetty.websocket.common.frames.BinaryFrame;\nimport org.eclipse.jetty.websocket.common.frames.CloseFrame;\nimport org.eclipse.jetty.websocket.common.frames.ContinuationFrame;\nimport org.eclipse.jetty.websocket.common.frames.PingFrame;\nimport org.eclipse.jetty.websocket.common.frames.PongFrame;\nimport org.eclipse.jetty.websocket.common.frames.TextFrame;\n/**\n * A Base Frame as seen in <a href=\"https://tools.ietf.org/html/rfc6455#section-5.2\">RFC 6455. Sec 5.2</a>\n * \n * <pre>\n *    0                   1                   2                   3\n *    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n *   +-+-+-+-+-------+-+-------------+-------------------------------+\n *   |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n *   |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n *   |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n *   | |1|2|3|       |K|             |                               |\n *   +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n *   |     Extended payload length continued, if payload len == 127  |\n *   + - - - - - - - - - - - - - - - +-------------------------------+\n *   |                               |Masking-key, if MASK set to 1  |\n *   +-------------------------------+-------------------------------+\n *   | Masking-key (continued)       |          Payload Data         |\n *   +-------------------------------- - - - - - - - - - - - - - - - +\n *   :                     Payload Data continued ...                :\n *   + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n *   |                     Payload Data continued ...                |\n *   +---------------------------------------------------------------+\n * </pre>\n */\npublic abstract class WebSocketFrame implements Frame\n{\n    public static WebSocketFrame copy(Frame original)\n    {\n        WebSocketFrame copy;\n        switch (original.getOpCode())\n        {\n            case OpCode.BINARY:\n                copy = new BinaryFrame();\n                break;\n            case OpCode.TEXT:\n                copy = new TextFrame();\n                break;\n            case OpCode.CLOSE:\n                copy = new CloseFrame();\n                break;\n            case OpCode.CONTINUATION:\n                copy = new ContinuationFrame();\n                break;\n            case OpCode.PING:\n                copy = new PingFrame();\n                break;\n            case OpCode.PONG:\n                copy = new PongFrame();\n                break;\n            default:\n                throw new IllegalArgumentException(\"Cannot copy frame with opcode \" + original.getOpCode() + \" - \" + original);\n        }\n        copy.copyHeaders(original);\n        ByteBuffer payload = original.getPayload();\n        if (payload != null)\n        {\n            ByteBuffer payloadCopy = ByteBuffer.allocate(payload.remaining());\n            payloadCopy.put(payload.slice()).flip();\n            copy.setPayload(payloadCopy);\n        }\n        return copy;\n    }\n    /**\n     * Combined FIN + RSV1 + RSV2 + RSV3 + OpCode byte.\n     * \n     * <pre>\n     *   1000_0000 (0x80) = fin\n     *   0100_0000 (0x40) = rsv1\n     *   0010_0000 (0x20) = rsv2\n     *   0001_0000 (0x10) = rsv3\n     *   0000_1111 (0x0F) = opcode\n     * </pre>\n     */\n    protected byte finRsvOp;\n    protected boolean masked = false;\n    protected byte mask[];\n    /**\n     * The payload data.\n     * <p>\n     * It is assumed to always be in FLUSH mode (ready to read) in this object.\n     */\n    protected ByteBuffer data;\n    /**\n     * Construct form opcode\n     * @param opcode the opcode the frame is based on\n     */\n    protected WebSocketFrame(byte opcode)\n    {\n        reset();\n        setOpCode(opcode);\n    }\n    public abstract void assertValid();\n    protected void copyHeaders(Frame frame)\n    {\n        finRsvOp = 0x00;\n        finRsvOp |= frame.isFin()?0x80:0x00;\n        finRsvOp |= frame.isRsv1()?0x40:0x00;\n        finRsvOp |= frame.isRsv2()?0x20:0x00;\n        finRsvOp |= frame.isRsv3()?0x10:0x00;\n        finRsvOp |= frame.getOpCode() & 0x0F;\n        masked = frame.isMasked();\n        if (masked)\n        {\n            mask = frame.getMask();\n        }\n        else\n        {\n            mask = null;\n        }\n    }\n<fim_suffix>    protected void copyHeaders(WebSocketFrame copy)\n    {\n        finRsvOp = copy.finRsvOp;\n        masked = copy.masked;\n        mask = null;\n        if (copy.mask != null)\n            mask = Arrays.copyOf(copy.mask, copy.mask.length);\n    }\n    @Override\n    public boolean equals(Object obj)\n    {\n        if (this == obj)\n        {\n            return true;\n        }\n        if (obj == null)\n        {\n            return false;\n        }\n        if (getClass() != obj.getClass())\n        {\n            return false;\n        }\n        WebSocketFrame other = (WebSocketFrame)obj;\n        if (data == null)\n        {\n            if (other.data != null)\n            {\n                return false;\n            }\n        }\n        else if (!data.equals(other.data))\n        {\n            return false;\n        }\n        if (finRsvOp != other.finRsvOp)\n        {\n            return false;\n        }\n        if (!Arrays.equals(mask,other.mask))\n        {\n            return false;\n        }\n        if (masked != other.masked)\n        {\n            return false;\n        }\n        return true;\n    }\n    @Override\n    public byte[] getMask()\n    {\n        return mask;\n    }\n    @Override\n    public final byte getOpCode()\n    {\n        return (byte)(finRsvOp & 0x0F);\n    }\n    /**\n     * Get the payload ByteBuffer. possible null.\n     */\n    @Override\n    public ByteBuffer getPayload()\n    {\n        return data;\n    }\n    public String getPayloadAsUTF8()\n    {\n        return BufferUtil.toUTF8String(getPayload());\n    }\n    @Override\n    public int getPayloadLength()\n    {\n        if (data == null)\n        {\n            return 0;\n        }\n        return data.remaining();\n    }\n    @Override\n    public Type getType()\n    {\n        return Type.from(getOpCode());\n    }\n    @Override\n    public int hashCode()\n    {\n        final int prime = 31;\n        int result = 1;\n        result = (prime * result) + ((data == null)?0:data.hashCode());\n        result = (prime * result) + finRsvOp;\n        result = (prime * result) + Arrays.hashCode(mask);\n        return result;\n    }\n    @Override\n    public boolean hasPayload()\n    {\n        return ((data != null) && data.hasRemaining());\n    }\n    public abstract boolean isControlFrame();\n    public abstract boolean isDataFrame();\n    @Override\n    public boolean isFin()\n    {<fim_middle>// function below has no smell\n"}