{"text": "<fim_prefix>\n<fim_suffix>public class StandardMetadataFormat extends IIOMetadataFormatImpl {\n    // Utility method for nodes with a single attribute named \"value\"\n    private void addSingleAttributeElement(String elementName,\n                                           String parentName,\n                                           int dataType) {\n        addElement(elementName, parentName, CHILD_POLICY_EMPTY);\n        addAttribute(elementName, \"value\", dataType, true, null);\n    }\n    public StandardMetadataFormat() {\n        super(standardMetadataFormatName, CHILD_POLICY_SOME);\n        List<String> values;\n        // root -> Chroma\n        addElement(\"Chroma\", standardMetadataFormatName,\n                   CHILD_POLICY_SOME);\n        // root -> Chroma -> ColorSpaceType\n        addElement(\"ColorSpaceType\", \"Chroma\",\n                   CHILD_POLICY_EMPTY);\n        values = new ArrayList<>();\n        values.add(\"XYZ\");\n        values.add(\"Lab\");\n        values.add(\"Luv\");\n        values.add(\"YCbCr\");\n        values.add(\"Yxy\");\n        values.add(\"YCCK\");\n        values.add(\"PhotoYCC\");\n        values.add(\"RGB\");\n        values.add(\"GRAY\");\n        values.add(\"HSV\");\n        values.add(\"HLS\");\n        values.add(\"CMYK\");\n        values.add(\"CMY\");\n        values.add(\"2CLR\");\n        values.add(\"3CLR\");\n        values.add(\"4CLR\");\n        values.add(\"5CLR\");\n        values.add(\"6CLR\");\n        values.add(\"7CLR\");\n        values.add(\"8CLR\");\n        values.add(\"9CLR\");\n        values.add(\"ACLR\");\n        values.add(\"BCLR\");\n        values.add(\"CCLR\");\n        values.add(\"DCLR\");\n        values.add(\"ECLR\");\n        values.add(\"FCLR\");\n        addAttribute(\"ColorSpaceType\",\n                     \"name\",\n                     DATATYPE_STRING,\n                     true,\n                     null,\n                     values);\n        // root -> Chroma -> NumChannels\n        addElement(\"NumChannels\", \"Chroma\",\n                   CHILD_POLICY_EMPTY);\n        addAttribute(\"NumChannels\", \"value\",\n                     DATATYPE_INTEGER,\n                     true,\n                     0, Integer.MAX_VALUE);\n        // root -> Chroma -> Gamma\n        addElement(\"Gamma\", \"Chroma\", CHILD_POLICY_EMPTY);\n        addAttribute(\"Gamma\", \"value\",\n                     DATATYPE_FLOAT, true, null);\n        // root -> Chroma -> BlackIsZero\n        addElement(\"BlackIsZero\", \"Chroma\", CHILD_POLICY_EMPTY);\n        addBooleanAttribute(\"BlackIsZero\", \"value\", true, true);\n        // root -> Chroma -> Palette\n        addElement(\"Palette\", \"Chroma\", 0, Integer.MAX_VALUE);\n        // root -> Chroma -> PaletteEntry\n        addElement(\"PaletteEntry\", \"Palette\", CHILD_POLICY_EMPTY);\n        addAttribute(\"PaletteEntry\", \"index\", DATATYPE_INTEGER,\n                     true, null);\n        addAttribute(\"PaletteEntry\", \"red\", DATATYPE_INTEGER,\n                     true, null);\n        addAttribute(\"PaletteEntry\", \"green\", DATATYPE_INTEGER,\n                     true, null);\n        addAttribute(\"PaletteEntry\", \"blue\", DATATYPE_INTEGER,\n                     true, null);\n        addAttribute(\"PaletteEntry\", \"alpha\", DATATYPE_INTEGER,\n                     false, \"255\");\n        // root -> Chroma -> BackgroundIndex\n        addElement(\"BackgroundIndex\", \"Chroma\", CHILD_POLICY_EMPTY);\n        addAttribute(\"BackgroundIndex\", \"value\", DATATYPE_INTEGER,\n                     true, null);\n        // root -> Chroma -> BackgroundColor\n        addElement(\"BackgroundColor\", \"Chroma\", CHILD_POLICY_EMPTY);\n        addAttribute(\"BackgroundColor\", \"red\", DATATYPE_INTEGER,\n                     true, null);\n        addAttribute(\"BackgroundColor\", \"green\", DATATYPE_INTEGER,\n                     true, null);\n        addAttribute(\"BackgroundColor\", \"blue\", DATATYPE_INTEGER,\n                     true, null);\n        // root -> Compression\n        addElement(\"Compression\", standardMetadataFormatName,\n                   CHILD_POLICY_SOME);\n        // root -> Compression -> CompressionTypeName\n        addSingleAttributeElement(\"CompressionTypeName\",\n                                  \"Compression\",\n                                  DATATYPE_STRING);\n        // root -> Compression -> Lossless\n        addElement(\"Lossless\", \"Compression\", CHILD_POLICY_EMPTY);\n        addBooleanAttribute(\"Lossless\", \"value\", true, true);\n        // root -> Compression -> NumProgressiveScans\n        addSingleAttributeElement(\"NumProgressiveScans\",\n                                  \"Compression\",\n                                  DATATYPE_INTEGER);\n        // root -> Compression -> BitRate\n        addSingleAttributeElement(\"BitRate\",\n                                  \"Compression\",\n                                  DATATYPE_FLOAT);\n        // root -> Data\n        addElement(\"Data\", standardMetadataFormatName,\n                   CHILD_POLICY_SOME);\n        // root -> Data -> PlanarConfiguration\n        addElement(\"PlanarConfiguration\", \"Data\", CHILD_POLICY_EMPTY);\n        values = new ArrayList<>();\n        values.add(\"PixelInterleaved\");\n        values.add(\"PlaneInterleaved\");\n        values.add(\"LineInterleaved\");\n        values.add(\"TileInterleaved\");\n        addAttribute(\"PlanarConfiguration\", \"value\",\n                     DATATYPE_STRING,\n                     true,\n                     null,\n                     values);\n        // root -> Data -> SampleFormat\n        addElement(\"SampleFormat\", \"Data\", CHILD_POLICY_EMPTY);\n        values = new ArrayList<>();\n        values.add(\"SignedIntegral\");\n        values.add(\"UnsignedIntegral\");\n        values.add(\"Real\");\n        values.add(\"Index\");\n        addAttribute(\"SampleFormat\", \"value\",\n                     DATATYPE_STRING,\n                     true,\n                     null,\n                     values);\n        // root -> Data -> BitsPerSample\n        addElement(\"BitsPerSample\", \"Data\",\n                   CHILD_POLICY_EMPTY);\n        addAttribute(\"BitsPerSample\", \"value\",\n                     DATATYPE_INTEGER,\n                     true,\n                     1, Integer.MAX_VALUE);\n        // root -> Data -> SignificantBitsPerSample\n        addElement(\"SignificantBitsPerSample\", \"Data\", CHILD_POLICY_EMPTY);\n        addAttribute(\"SignificantBitsPerSample\", \"value\",\n                     DATATYPE_INTEGER,\n                     true,\n                     1, Integer.MAX_VALUE);\n        // root -> Data -> SampleMSB\n        addElement(\"SampleMSB\", \"Data\",\n                   CHILD_POLICY_EMPTY);\n        addAttribute(\"SampleMSB\", \"value\",\n                     DATATYPE_INTEGER,\n                     true,\n                     1, Integer.MAX_VALUE);\n        // root -> Dimension\n        addElement(\"Dimension\", standardMetadataFormatName,\n                   CHILD_POLICY_SOME);\n        // root -> Dimension -> PixelAspectRatio\n        addSingleAttributeElement(\"PixelAspectRatio\",\n                                  \"Dimension\",\n                                  DATATYPE_FLOAT);\n        // root -> Dimension -> ImageOrientation\n        addElement(\"ImageOrientation\", \"Dimension\",\n                   CHILD_POLICY_EMPTY);\n        values = new ArrayList<>();\n        values.add(\"Normal\");\n        values.add(\"Rotate90\");\n        values.add(\"Rotate180\");\n        values.add(\"Rotate270\");\n        values.add(\"FlipH\");\n        values.add(\"FlipV\");\n        values.add(\"FlipHRotate90\");\n        values.add(\"FlipVRotate90\");\n        addAttribute(\"ImageOrientation\", \"value\",\n                     DATATYPE_STRING,\n                     true,\n                     null,\n                     values);\n        // root -> Dimension -> HorizontalPixelSize\n        addSingleAttributeElement(\"HorizontalPixelSize\",\n                                  \"Dimension\",\n                                  DATATYPE_FLOAT);\n        // root -> Dimension -> VerticalPixelSize\n        addSingleAttributeElement(\"VerticalPixelSize\",\n                                  \"Dimension\",\n                                  DATATYPE_FLOAT);\n        // root -> Dimension -> HorizontalPhysicalPixelSpacing\n        addSingleAttributeElement(\"HorizontalPhysicalPixelSpacing\",\n                                  \"Dimension\",\n                                  DATATYPE_FLOAT);\n        // root -> Dimension -> VerticalPhysicalPixelSpacing\n        addSingleAttributeElement(\"VerticalPhysicalPixelSpacing\",\n                                  \"Dimension\",\n                                  DATATYPE_FLOAT);\n        // root -> Dimension -> HorizontalPosition\n        addSingleAttributeElement(\"HorizontalPosition\",\n                                  \"Dimension\",\n                                  DATATYPE_FLOAT);\n        // root -> Dimension -> VerticalPosition\n        addSingleAttributeElement(\"VerticalPosition\",\n                                  \"Dimension\",\n                                  DATATYPE_FLOAT);\n        // root -> Dimension -> HorizontalPixelOffset\n        addSingleAttributeElement(\"HorizontalPixelOffset\",\n                                  \"Dimension\",\n                                  DATATYPE_INTEGER);\n        // root -> Dimension -> VerticalPixelOffset\n        addSingleAttributeElement(\"VerticalPixelOffset\",\n                                  \"Dimension\",\n                                  DATATYPE_INTEGER);\n        // root -> Dimension -> HorizontalScreenSize\n        addSingleAttributeElement(\"HorizontalScreenSize\",\n                                  \"Dimension\",\n                                  DATATYPE_INTEGER);\n        // root -> Dimension -> VerticalScreenSize\n        addSingleAttributeElement(\"VerticalScreenSize\",\n                                  \"Dimension\",\n                                  DATATYPE_INTEGER);\n        // root -> Document\n        addElement(\"Document\", standardMetadataFormatName,\n                   CHILD_POLICY_SOME);\n        // root -> Document -> FormatVersion\n        addElement(\"FormatVersion\", \"Document\",\n                   CHILD_POLICY_EMPTY);\n        addAttribute(\"FormatVersion\", \"value\",\n                     DATATYPE_STRING,\n                     true,\n                     null);\n        // root -> Document -> SubimageInterpretation\n        addElement(\"SubimageInterpretation\", \"Document\",\n                   CHILD_POLICY_EMPTY);\n        values = new ArrayList<>();<fim_middle>// class below has no smell\n"}