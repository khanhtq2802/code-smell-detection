{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage spell.gui;\n\nimport org.apache.felix.ipojo.annotations.*;\nimport spell.services.SpellChecker;\n\nimport javax.swing.*;\n\n/**\n * A very simple Gui interacting with the CheckSpeller service\n */\n@Component // It's a component\n@Instantiate // We declarare an instance\npublic class SpellCheckerGui extends JFrame {\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * Swing component where the user write the passage to check.\n     */\n    private JTextField passage = null;\n\n    /**\n     * Area where the result is displayed.\n     */\n    private JLabel result = null;\n\n    /**\n     * Service dependency on the SpellChecker.\n     */\n    @Requires // It's a service dependency\n    private SpellChecker checker;\n\n    /**\n     * Constructor.\n     * Initialize the GUI.\n     */\n<fim_suffix>    public SpellCheckerGui() {\n        super();\n        initComponents();\n        this.setTitle(\"Spellchecker Gui\");\n    }\n\n    /**\n     * Initialize the Swing Gui.\n     */\n    private void initComponents() {\n        java.awt.GridBagConstraints gridBagConstraints;\n\n        // The check button\n        JButton checkButton = new JButton();\n        result = new JLabel();\n        passage = new JTextField();\n\n        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); // Stop Felix...\n        getContentPane().setLayout(new java.awt.GridBagLayout());\n\n        checkButton.setText(\"Check\");\n        checkButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent e) {\n                check();\n            }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        getContentPane().add(checkButton, gridBagConstraints);\n\n        result.setPreferredSize(new java.awt.Dimension(175, 20));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        getContentPane().add(result, gridBagConstraints);\n\n        passage.setPreferredSize(new java.awt.Dimension(175, 20));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        getContentPane().add(passage, gridBagConstraints);\n\n        pack();\n    }\n\n    /**\n     * Check Button action.\n     * Collects the user input and checks it.\n     */\n    private void check() {\n        // TODO\n    }\n\n    /**\n     * Start callback.\n     * This method will be called when the instance becomes valid.\n     * It set the Gui visibility to true.\n     */\n    @Validate\n    public void start() {\n        // TODO\n    }\n\n    /**\n     * Stop callback.\n     * This method will be called when the instance becomes invalid or stops.\n     * It deletes the Gui.\n     */\n    @Invalidate\n    public void stop() {\n        // TODO\n    }\n}<fim_middle>// function below has no smell\n"}