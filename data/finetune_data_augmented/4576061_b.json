{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* $Id$ */\n\npackage org.apache.fop.fo.flow;\n\nimport java.util.Stack;\n\nimport org.xml.sax.Locator;\n\nimport org.apache.fop.apps.FOPException;\nimport org.apache.fop.complexscripts.bidi.DelimitedTextRange;\nimport org.apache.fop.datatypes.Length;\nimport org.apache.fop.fo.FONode;\nimport org.apache.fop.fo.PropertyList;\nimport org.apache.fop.fo.ValidationException;\nimport org.apache.fop.fo.properties.LengthRangeProperty;\nimport org.apache.fop.util.CharUtilities;\n\n/**\n * Class modelling the <a href=\"http://www.w3.org/TR/xsl/#fo_leader\">\n * <code>fo:leader</code></a> object.\n * The main property of <code>fo:leader</code> is leader-pattern.\n * The following patterns are treated: rule, space, dots and use-content.\n */\npublic class Leader extends InlineLevel {\n    // The value of properties relevant for fo:leader.\n    // See also superclass InlineLevel\n    private Length alignmentAdjust;\n    private int alignmentBaseline;\n    private Length baselineShift;\n    private int dominantBaseline;\n    private int leaderAlignment;\n    private LengthRangeProperty leaderLength;\n    private int leaderPattern;\n    private Length leaderPatternWidth;\n    private int ruleStyle;\n    private Length ruleThickness;\n    // private ToBeImplementedProperty letterSpacing;\n    // private ToBeImplementedProperty textShadow;\n    // Unused but valid items, commented out for performance:\n    //     private CommonRelativePosition commonRelativePosition;\n    //     private Length textDepth;\n    //     private Length textAltitude;\n    // End of property values\n\n    /**\n     * Base constructor\n     *\n     * @param parent {@link FONode} that is the parent of this object\n     */\n    public Leader(FONode parent) {\n        super(parent);\n    }\n\n    /** {@inheritDoc} */\n<fim_suffix>    public void bind(PropertyList pList) throws FOPException {\n        super.bind(pList);\n        alignmentAdjust = pList.get(PR_ALIGNMENT_ADJUST).getLength();\n        alignmentBaseline = pList.get(PR_ALIGNMENT_BASELINE).getEnum();\n        baselineShift = pList.get(PR_BASELINE_SHIFT).getLength();\n        dominantBaseline = pList.get(PR_DOMINANT_BASELINE).getEnum();\n        leaderAlignment = pList.get(PR_LEADER_ALIGNMENT).getEnum();\n        leaderLength = pList.get(PR_LEADER_LENGTH).getLengthRange();\n        leaderPattern = pList.get(PR_LEADER_PATTERN).getEnum();\n        leaderPatternWidth = pList.get(PR_LEADER_PATTERN_WIDTH).getLength();\n        // use default rule thickness as a default\n        ruleThickness = getPropertyMakerFor(PR_RULE_THICKNESS).make(pList).getLength();\n        switch(leaderPattern) {\n        case EN_SPACE:\n            // use Space\n            break;\n        case EN_RULE:\n            // the following properties only apply\n            // for leader-pattern = \"rule\"\n            ruleStyle = pList.get(PR_RULE_STYLE).getEnum();\n            // use specified rule thickness to override default (established above)\n            ruleThickness = pList.get(PR_RULE_THICKNESS).getLength();\n            break;\n        case EN_DOTS:\n            break;\n        case EN_USECONTENT:\n            // use inline layout manager to create inline areas\n            // add the inline parent multiple times until leader full\n            break;\n        default:\n            throw new RuntimeException(\"Invalid leader pattern: \" + leaderPattern);\n        }\n        // letterSpacing = pList.get(PR_LETTER_SPACING);\n        // textShadow = pList.get(PR_TEXT_SHADOW);\n    }\n\n    /**\n     * {@inheritDoc}\n     * <br>XSL Content Model: (#PCDATA|%inline;)*\n     * <br><i>Additionally: \"The content must not contain an\n     * fo:leader, fo:inline-container, fo:block-container, fo:float,\n     * fo:footnote, or fo:marker either as a direct child or as a\n     * descendant.\"</i>\n     */\n    protected void validateChildNode(Locator loc, String nsURI, String localName)\n        throws ValidationException {\n        if (FO_URI.equals(nsURI)) {\n            if (localName.equals(\"leader\")\n                 || localName.equals(\"inline-container\")\n                 || localName.equals(\"block-container\")\n                 || localName.equals(\"float\")\n                 || localName.equals(\"marker\")\n                 || !isInlineItem(nsURI, localName)) {\n                invalidChildError(loc, nsURI, localName);\n            }\n        }\n    }\n\n    /** @return the \"rule-style\" property */\n    public int getRuleStyle() {\n        return ruleStyle;\n    }\n\n    /** @return the \"rule-thickness\" property */\n    public Length getRuleThickness() {\n        return ruleThickness;\n    }\n\n    /** @return the \"leader-alignment\" property */\n    public int getLeaderAlignment() {\n        return leaderAlignment;\n    }\n\n    /** @return the \"leader-length\" property */\n    public LengthRangeProperty getLeaderLength() {\n        return leaderLength;\n    }\n\n    /** @return the \"leader-pattern\" property */\n    public int getLeaderPattern() {\n        return leaderPattern;\n    }\n\n    /** @return the \"leader-pattern-width\" property */\n    public Length getLeaderPatternWidth() {\n        return leaderPatternWidth;\n    }\n\n    /** @return the \"alignment-adjust\" property */\n    public Length getAlignmentAdjust() {\n        return alignmentAdjust;\n    }\n\n    /** @return the \"alignment-baseline\" property */\n    public int getAlignmentBaseline() {\n        return alignmentBaseline;\n    }\n\n    /** @return the \"baseline-shift\" property */\n    public Length getBaselineShift() {\n        return baselineShift;\n    }\n\n    /** @return the \"dominant-baseline\" property */\n    public int getDominantBaseline() {\n        return dominantBaseline;\n    }\n\n    /** {@inheritDoc} */\n    public String getLocalName() {\n        return \"leader\";\n    }\n\n    /**\n     * {@inheritDoc}\n     * @return {@link org.apache.fop.fo.Constants#FO_LEADER}\n     */\n    public int getNameId() {\n        return FO_LEADER;\n    }\n\n    @Override\n    public void startOfNode() throws FOPException {\n        super.startOfNode();\n        getFOEventHandler().startLeader(this);\n    }\n\n    @Override\n    public void endOfNode() throws FOPException {\n        super.endOfNode();\n        getFOEventHandler().endLeader(this);\n    }\n\n    @Override\n    protected Stack<DelimitedTextRange> collectDelimitedTextRanges(Stack<DelimitedTextRange> ranges,\n        DelimitedTextRange currentRange) {\n        if (currentRange != null) {\n            if (leaderPattern == EN_USECONTENT) {\n                ranges = super.collectDelimitedTextRanges(ranges, currentRange);\n            } else {\n                currentRange.append(CharUtilities.OBJECT_REPLACEMENT_CHARACTER, this);\n            }\n        }\n        return ranges;\n    }\n\n}<fim_middle>// function below is long method and feature envy\n"}