{"text": "<fim_prefix>\n<fim_suffix>public class JmxSupport {\n    private final static Logger LOGGER = Logger.getLogger(JmxSupport.class.getName());\n    private static final String HOTSPOT_DIAGNOSTIC_MXBEAN_NAME =\n            \"com.sun.management:type=HotSpotDiagnostic\";    // NOI18N\n    private static final String DIAGNOSTIC_COMMAND_MXBEAN_NAME =\n            \"com.sun.management:type=DiagnosticCommand\";    // NOI18N\n    private static final String ALL_OBJECTS_OPTION = \"-all\";    // NOI18N\n    private static final String HISTOGRAM_COMMAND = \"gcClassHistogram\";       // NOI18N\n    private JvmMXBeans mxbeans;\n    private JmxModel jmxModel;\n    // HotspotDiagnostic\n    private boolean hotspotDiagnosticInitialized;\n    private final Object hotspotDiagnosticLock = new Object();\n    private HotSpotDiagnosticMXBean hotspotDiagnosticMXBean;\n    private final Object readOnlyConnectionLock = new Object();\n    private Boolean readOnlyConnection;\n    private Boolean hasDumpAllThreads;\n    private final Object hasDumpAllThreadsLock = new Object();\n    JmxSupport(JmxModel jmx) {\n        jmxModel = jmx;\n    }\n    private RuntimeMXBean getRuntime() {\n        JvmMXBeans jmx = getJvmMXBeans();\n        if (jmx != null) {\n            return jmx.getRuntimeMXBean();\n        }\n        return null;\n    }\n    private synchronized JvmMXBeans getJvmMXBeans() {\n        if (mxbeans == null) {\n            if (jmxModel.getConnectionState() == ConnectionState.CONNECTED) {\n                mxbeans = JvmMXBeansFactory.getJvmMXBeans(jmxModel);\n            }\n        }\n        return mxbeans;\n    }\n    Properties getSystemProperties() {\n        try {\n            RuntimeMXBean runtime = getRuntime();\n            if (runtime != null) {\n                Properties prop = new Properties();\n                prop.putAll(runtime.getSystemProperties());\n                return prop;\n            }\n            return null;\n        } catch (Exception e) {\n            LOGGER.throwing(JmxSupport.class.getName(), \"getSystemProperties\", e); // NOI18N\n            return null;\n        }\n    }\n    synchronized boolean isReadOnlyConnection() {\n        synchronized (readOnlyConnectionLock) {\n            if (readOnlyConnection == null) {\n                readOnlyConnection = Boolean.FALSE;\n                ThreadMXBean threads = getThreadBean();\n                if (threads != null) {\n                    try {\n                        threads.getThreadInfo(1);\n                    } catch (SecurityException ex) {\n                        readOnlyConnection = Boolean.TRUE;\n                    }\n                }\n            }\n            return readOnlyConnection.booleanValue();\n        }\n    }\n    ThreadMXBean getThreadBean() {\n        JvmMXBeans jmx = getJvmMXBeans();\n        if (jmx != null) {\n            return jmx.getThreadMXBean();\n        }\n        return null;\n    }\n    HotSpotDiagnosticMXBean getHotSpotDiagnostic() {\n        synchronized (hotspotDiagnosticLock) {\n            if (hotspotDiagnosticInitialized) {\n                return hotspotDiagnosticMXBean;\n            }\n            JvmMXBeans jmx = getJvmMXBeans();\n            if (jmx != null) {\n                try {\n                    hotspotDiagnosticMXBean = jmx.getMXBean(\n                            ObjectName.getInstance(HOTSPOT_DIAGNOSTIC_MXBEAN_NAME),\n                            HotSpotDiagnosticMXBean.class);\n                } catch (MalformedObjectNameException e) {\n                    ErrorManager.getDefault().log(ErrorManager.WARNING,\n                            \"Couldn't find HotSpotDiagnosticMXBean: \" + // NOI18N\n                            e.getLocalizedMessage());\n                } catch (IllegalArgumentException ex) {\n                    ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);\n                }\n            }\n            hotspotDiagnosticInitialized = true;\n            return hotspotDiagnosticMXBean;\n        }\n    }\n    String takeThreadDump(long[] threadIds) {\n        ThreadMXBean threadMXBean = getThreadBean();\n        if (threadMXBean == null) {\n            return null;\n        }\n        ThreadInfo[] threads;\n        StringBuilder sb = new StringBuilder(4096);\n        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");  // NOI18N\n        if (hasDumpAllThreads()) {\n            threads = threadMXBean.getThreadInfo(threadIds, true, true);\n        } else {\n            threads = threadMXBean.getThreadInfo(threadIds, Integer.MAX_VALUE);\n        }\n        sb.append(df.format(new Date()) + \"\\n\");  // NOI18N\n        printThreads(sb, threadMXBean, threads);\n        return sb.toString();\n    }\n    String takeThreadDump() {\n        try {\n            ThreadMXBean threadMXBean = getThreadBean();\n            if (threadMXBean == null) {\n                return null;\n            }\n            ThreadInfo[] threads;\n            Properties prop = getSystemProperties();\n            StringBuilder sb = new StringBuilder(4096);\n            SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");  // NOI18N\n            sb.append(df.format(new Date()) + \"\\n\");\n            sb.append(\"Full thread dump \" + prop.getProperty(\"java.vm.name\") + // NOI18N\n                    \" (\" + prop.getProperty(\"java.vm.version\") + \" \" + // NOI18N\n                    prop.getProperty(\"java.vm.info\") + \"):\\n\");  // NOI18N\n            if (hasDumpAllThreads()) {\n                threads = threadMXBean.dumpAllThreads(true, true);\n            } else {\n                long[] threadIds = threadMXBean.getAllThreadIds();\n                threads = threadMXBean.getThreadInfo(threadIds, Integer.MAX_VALUE);\n            }\n            printThreads(sb, threadMXBean, threads);\n            return sb.toString();\n        } catch (Exception e) {\n            LOGGER.log(Level.INFO,\"takeThreadDump\", e); // NOI18N\n            return null;\n        }\n    }\n    private void printThreads(final StringBuilder sb, final ThreadMXBean threadMXBean, ThreadInfo[] threads) {\n        boolean jdk16 = hasDumpAllThreads();\n        for (ThreadInfo thread : threads) {\n            if (thread != null) {\n                if (jdk16) {\n                    print16Thread(sb, threadMXBean, thread);\n                } else {\n                    print15Thread(sb, thread);\n                }\n            }\n        }\n    }\n    private void print16Thread(final StringBuilder sb, final ThreadMXBean threadMXBean, final ThreadInfo thread) {\n        MonitorInfo[] monitors = null;\n        if (threadMXBean.isObjectMonitorUsageSupported()) {\n            monitors = thread.getLockedMonitors();\n        }\n        sb.append(\"\\n\\\"\" + thread.getThreadName() + // NOI18N\n                \"\\\" - Thread t@\" + thread.getThreadId() + \"\\n\");    // NOI18N\n        sb.append(\"   java.lang.Thread.State: \" + thread.getThreadState()); // NOI18N\n        sb.append(\"\\n\");   // NOI18N\n        int index = 0;\n        for (StackTraceElement st : thread.getStackTrace()) {\n            LockInfo lock = thread.getLockInfo();\n            String lockOwner = thread.getLockOwnerName();\n            sb.append(\"\\tat \" + st.toString() + \"\\n\");    // NOI18N\n            if (index == 0) {\n                if (\"java.lang.Object\".equals(st.getClassName()) &&     // NOI18N\n                        \"wait\".equals(st.getMethodName())) {                // NOI18N\n                    if (lock != null) {\n                        sb.append(\"\\t- waiting on \");    // NOI18N\n                        printLock(sb,lock);\n                        sb.append(\"\\n\");    // NOI18N\n                    }\n                } else if (lock != null) {\n                    if (lockOwner == null) {\n                        sb.append(\"\\t- parking to wait for \");      // NOI18N\n                        printLock(sb,lock);\n                        sb.append(\"\\n\");            // NOI18N\n                    } else {\n                        sb.append(\"\\t- waiting to lock \");      // NOI18N\n                        printLock(sb,lock);\n                        sb.append(\" owned by \\\"\"+lockOwner+\"\\\" t@\"+thread.getLockOwnerId()+\"\\n\");   // NOI18N\n                    }\n                }\n            }\n            printMonitors(sb, monitors, index);\n            index++;\n        }\n        StringBuilder jnisb = new StringBuilder();\n        printMonitors(jnisb, monitors, -1);\n        if (jnisb.length() > 0) {\n            sb.append(\"   JNI locked monitors:\\n\");\n            sb.append(jnisb);\n        }\n        if (threadMXBean.isSynchronizerUsageSupported()) {\n            sb.append(\"\\n   Locked ownable synchronizers:\");    // NOI18N\n            LockInfo[] synchronizers = thread.getLockedSynchronizers();\n            if (synchronizers == null || synchronizers.length == 0) {\n                sb.append(\"\\n\\t- None\\n\");  // NOI18N\n            } else {<fim_middle>// class below is blob\n"}