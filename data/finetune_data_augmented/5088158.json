{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.mahout.cf.taste.impl.common;\n\nimport java.io.Serializable;\n\nimport com.google.common.base.Preconditions;\n\n<fim_suffix>public class WeightedRunningAverage implements RunningAverage, Serializable {\n\n  private double totalWeight;\n  private double average;\n\n  public WeightedRunningAverage() {\n    totalWeight = 0.0;\n    average = Double.NaN;\n  }\n\n  @Override\n  public synchronized void addDatum(double datum) {\n    addDatum(datum, 1.0);\n  }\n\n  public synchronized void addDatum(double datum, double weight) {\n    double oldTotalWeight = totalWeight;\n    totalWeight += weight;\n    if (oldTotalWeight <= 0.0) {\n      average = datum;\n    } else {\n      average = average * oldTotalWeight / totalWeight + datum * weight / totalWeight;\n    }\n  }\n\n  @Override\n  public synchronized void removeDatum(double datum) {\n    removeDatum(datum, 1.0);\n  }\n\n  public synchronized void removeDatum(double datum, double weight) {\n    double oldTotalWeight = totalWeight;\n    totalWeight -= weight;\n    if (totalWeight <= 0.0) {\n      average = Double.NaN;\n      totalWeight = 0.0;\n    } else {\n      average = average * oldTotalWeight / totalWeight - datum * weight / totalWeight;\n    }\n  }\n\n  @Override\n  public synchronized void changeDatum(double delta) {\n    changeDatum(delta, 1.0);\n  }\n\n  public synchronized void changeDatum(double delta, double weight) {\n    Preconditions.checkArgument(weight <= totalWeight, \"weight must be <= totalWeight\");\n    average += delta * weight / totalWeight;\n  }\n\n  public synchronized double getTotalWeight() {\n    return totalWeight;\n  }\n\n  /** @return {@link #getTotalWeight()} */\n  @Override\n  public synchronized int getCount() {\n    return (int) totalWeight;\n  }\n\n  @Override\n  public synchronized double getAverage() {\n    return average;\n  }\n\n  @Override\n  public RunningAverage inverse() {\n    return new InvertedRunningAverage(this);\n  }\n\n  @Override\n  public synchronized String toString() {\n    return String.valueOf(average);\n  }\n\n}<fim_middle>// class below has no smell\n"}