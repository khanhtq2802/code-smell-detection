{"text": "<fim_prefix>      scheme(iprot).read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      scheme(oprot).write(oprot, this);\n      }\n    @Override\n    public java.lang.String toString() {\n      java.lang.StringBuilder sb = new java.lang.StringBuilder(\"getNamespaceIteratorSetting_result(\");\n      boolean first = true;\n      sb.append(\"success:\");\n      if (this.success == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.success);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"ouch1:\");\n      if (this.ouch1 == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.ouch1);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"ouch2:\");\n      if (this.ouch2 == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.ouch2);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"ouch3:\");\n      if (this.ouch3 == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.ouch3);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n      if (success != null) {\n        success.validate();\n      }\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class getNamespaceIteratorSetting_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n      public getNamespaceIteratorSetting_resultStandardScheme getScheme() {\n        return new getNamespaceIteratorSetting_resultStandardScheme();\n      }\n    }\n    private static class getNamespaceIteratorSetting_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNamespaceIteratorSetting_result> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, getNamespaceIteratorSetting_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 0: // SUCCESS\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.success = new IteratorSetting();\n                struct.success.read(iprot);\n                struct.setSuccessIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 1: // OUCH1\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ouch1 = new AccumuloException();\n                struct.ouch1.read(iprot);\n                struct.setOuch1IsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 2: // OUCH2\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ouch2 = new AccumuloSecurityException();\n                struct.ouch2.read(iprot);\n                struct.setOuch2IsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 3: // OUCH3\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ouch3 = new NamespaceNotFoundException();\n                struct.ouch3.read(iprot);\n                struct.setOuch3IsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, getNamespaceIteratorSetting_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.success != null) {\n          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);\n          struct.success.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ouch1 != null) {\n          oprot.writeFieldBegin(OUCH1_FIELD_DESC);\n          struct.ouch1.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ouch2 != null) {\n          oprot.writeFieldBegin(OUCH2_FIELD_DESC);\n          struct.ouch2.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ouch3 != null) {\n          oprot.writeFieldBegin(OUCH3_FIELD_DESC);\n          struct.ouch3.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class getNamespaceIteratorSetting_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n      public getNamespaceIteratorSetting_resultTupleScheme getScheme() {\n        return new getNamespaceIteratorSetting_resultTupleScheme();\n      }\n    }\n    private static class getNamespaceIteratorSetting_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNamespaceIteratorSetting_result> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, getNamespaceIteratorSetting_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n        java.util.BitSet optionals = new java.util.BitSet();\n        if (struct.isSetSuccess()) {\n          optionals.set(0);\n        }\n        if (struct.isSetOuch1()) {\n          optionals.set(1);\n        }\n        if (struct.isSetOuch2()) {\n          optionals.set(2);\n        }\n        if (struct.isSetOuch3()) {\n          optionals.set(3);\n        }\n        oprot.writeBitSet(optionals, 4);\n        if (struct.isSetSuccess()) {\n          struct.success.write(oprot);\n        }\n        if (struct.isSetOuch1()) {\n          struct.ouch1.write(oprot);\n        }\n        if (struct.isSetOuch2()) {\n          struct.ouch2.write(oprot);\n        }\n        if (struct.isSetOuch3()) {\n          struct.ouch3.write(oprot);\n        }\n      }\n<fim_suffix>      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, getNamespaceIteratorSetting_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n        java.util.BitSet incoming = iprot.readBitSet(4);\n        if (incoming.get(0)) {\n          struct.success = new IteratorSetting();\n          struct.success.read(iprot);\n          struct.setSuccessIsSet(true);\n        }\n        if (incoming.get(1)) {\n          struct.ouch1 = new AccumuloException();\n          struct.ouch1.read(iprot);\n          struct.setOuch1IsSet(true);\n        }\n        if (incoming.get(2)) {\n          struct.ouch2 = new AccumuloSecurityException();\n          struct.ouch2.read(iprot);\n          struct.setOuch2IsSet(true);\n        }\n        if (incoming.get(3)) {\n          struct.ouch3 = new NamespaceNotFoundException();\n          struct.ouch3.read(iprot);\n          struct.setOuch3IsSet(true);\n        }\n      }<fim_middle>// function below is long method and feature envy\n"}