{"text": "<fim_prefix>\n<fim_suffix>        private final class FindInMethod extends MethodVisitor {\n            private final String name;\n            private final String desc;\n            private final int access;\n            private FindInAnno fia;\n            private boolean bodyGenerated;\n            public FindInMethod(int access, String name, String desc, MethodVisitor mv) {\n                super(Opcodes.ASM5, mv);\n                this.access = access;\n                this.name = name;\n                this.desc = desc;\n            }\n            @Override\n            public AnnotationVisitor visitAnnotation(String desc, boolean visible) {\n                if (\"Lnet/java/html/js/JavaScriptBody;\".equals(desc)) { // NOI18N\n                    found++;\n                    return new FindInAnno();\n                }\n                return super.visitAnnotation(desc, visible);\n            }\n            private void generateJSBody(FindInAnno fia) {\n                this.fia = fia;\n            }\n            @Override\n            public void visitCode() {\n                if (fia == null) {\n                    return;\n                }\n                generateBody(true);\n            }\n            private boolean generateBody(boolean hasCode) {\n                if (bodyGenerated) {\n                    return false;\n                }\n                bodyGenerated = true;\n                if (mv != null) {\n                    AnnotationVisitor va = super.visitAnnotation(\"Lnet/java/html/js/JavaScriptBody;\", false);\n                    AnnotationVisitor varr = va.visitArray(\"args\");\n                    for (String argName : fia.args) {\n                        varr.visit(null, argName);\n                    }\n                    varr.visitEnd();\n                    va.visit(\"javacall\", fia.javacall);\n                    va.visit(\"body\", fia.body);\n                    va.visitEnd();\n                }\n                String body;\n                List<String> args;\n                if (fia.javacall) {\n                    body = callback(fia.body);\n                    args = new ArrayList<String>(fia.args);\n                    args.add(\"vm\");\n                } else {\n                    body = fia.body;\n                    args = fia.args;\n                }\n                super.visitFieldInsn(\n                        Opcodes.GETSTATIC, FindInClass.this.name,\n                        \"$$fn$$\" + name + \"_\" + found,\n                        \"Lorg/netbeans/html/boot/spi/Fn;\"\n                );\n                super.visitInsn(Opcodes.DUP);\n                super.visitMethodInsn(\n                        Opcodes.INVOKESTATIC,\n                        \"org/netbeans/html/boot/spi/Fn\", \"isValid\",\n                        \"(Lorg/netbeans/html/boot/spi/Fn;)Z\"\n                );\n                Label ifNotNull = new Label();\n                super.visitJumpInsn(Opcodes.IFNE, ifNotNull);\n                // init Fn\n                super.visitInsn(Opcodes.POP);\n                super.visitLdcInsn(Type.getObjectType(FindInClass.this.name));\n                super.visitInsn(fia.keepAlive ? Opcodes.ICONST_1 : Opcodes.ICONST_0);\n                super.visitLdcInsn(body);\n                super.visitIntInsn(Opcodes.SIPUSH, args.size());\n                super.visitTypeInsn(Opcodes.ANEWARRAY, \"java/lang/String\");\n                boolean needsVM = false;\n                for (int i = 0; i < args.size(); i++) {\n                    assert !needsVM;\n                    String argName = args.get(i);\n                    needsVM = \"vm\".equals(argName);\n                    super.visitInsn(Opcodes.DUP);\n                    super.visitIntInsn(Opcodes.BIPUSH, i);\n                    super.visitLdcInsn(argName);\n                    super.visitInsn(Opcodes.AASTORE);\n                }\n                super.visitMethodInsn(Opcodes.INVOKESTATIC,\n                        \"org/netbeans/html/boot/spi/Fn\", \"define\",\n                        \"(Ljava/lang/Class;ZLjava/lang/String;[Ljava/lang/String;)Lorg/netbeans/html/boot/spi/Fn;\"\n                );\n                Label noPresenter = new Label();\n                super.visitInsn(Opcodes.DUP);\n                super.visitJumpInsn(Opcodes.IFNULL, noPresenter);\n                int cnt = resourcesCnt;\n                while (cnt > 0) {\n                    String resource = resources[--cnt];\n                    if (resource == null) {\n                        continue;\n                    }\n                    super.visitLdcInsn(Type.getObjectType(FindInClass.this.name));\n                    super.visitLdcInsn(resource);\n                    super.visitMethodInsn(Opcodes.INVOKESTATIC,\n                            \"org/netbeans/html/boot/spi/Fn\", \"preload\",\n                            \"(Lorg/netbeans/html/boot/spi/Fn;Ljava/lang/Class;Ljava/lang/String;)Lorg/netbeans/html/boot/spi/Fn;\"\n                    );\n                }\n                super.visitInsn(Opcodes.DUP);\n                super.visitFieldInsn(\n                        Opcodes.PUTSTATIC, FindInClass.this.name,\n                        \"$$fn$$\" + name + \"_\" + found,\n                        \"Lorg/netbeans/html/boot/spi/Fn;\"\n                );\n                // end of Fn init\n                super.visitLabel(ifNotNull);\n                final int offset;\n                if ((access & Opcodes.ACC_STATIC) == 0) {\n                    offset = 1;\n                    super.visitIntInsn(Opcodes.ALOAD, 0);\n                } else {\n                    offset = 0;\n                    super.visitInsn(Opcodes.ACONST_NULL);\n                }\n                super.visitIntInsn(Opcodes.SIPUSH, args.size());\n                super.visitTypeInsn(Opcodes.ANEWARRAY, \"java/lang/Object\");\n                class SV extends SignatureVisitor {\n                    private boolean nowReturn;\n                    private Type returnType;\n                    private int index;\n                    private int loadIndex = offset;\n                    public SV() {\n                        super(Opcodes.ASM5);\n                    }\n                    @Override\n                    public void visitBaseType(char descriptor) {\n                        final Type t = Type.getType(\"\" + descriptor);\n                        if (nowReturn) {\n                            returnType = t;\n                            return;\n                        }\n                        FindInMethod.super.visitInsn(Opcodes.DUP);\n                        FindInMethod.super.visitIntInsn(Opcodes.SIPUSH, index++);\n                        FindInMethod.super.visitVarInsn(t.getOpcode(Opcodes.ILOAD), loadIndex++);\n                        String factory;\n                        switch (descriptor) {\n                            case 'I':\n                                factory = \"java/lang/Integer\";\n                                break;\n                            case 'J':\n                                factory = \"java/lang/Long\";\n                                loadIndex++;\n                                break;\n                            case 'S':\n                                factory = \"java/lang/Short\";\n                                break;\n                            case 'F':\n                                factory = \"java/lang/Float\";\n                                break;\n                            case 'D':\n                                factory = \"java/lang/Double\";\n                                loadIndex++;\n                                break;\n                            case 'Z':\n                                factory = \"java/lang/Boolean\";\n                                break;\n                            case 'C':\n                                factory = \"java/lang/Character\";\n                                break;\n                            case 'B':\n                                factory = \"java/lang/Byte\";\n                                break;\n                            default:\n                                throw new IllegalStateException(t.toString());\n                        }\n                        FindInMethod.super.visitMethodInsn(Opcodes.INVOKESTATIC,\n                                factory, \"valueOf\", \"(\" + descriptor + \")L\" + factory + \";\"\n                        );\n                        FindInMethod.super.visitInsn(Opcodes.AASTORE);\n                    }\n                    @Override\n                    public SignatureVisitor visitArrayType() {\n                        if (nowReturn) {\n                            return new SignatureVisitor(Opcodes.ASM5) {\n                                @Override\n                                public void visitClassType(String name) {\n                                    returnType = Type.getType(\"[\" + Type.getObjectType(name).getDescriptor());\n                                }\n                                @Override\n                                public void visitBaseType(char descriptor) {\n                                    returnType = Type.getType(\"[\" + descriptor);\n                                }\n                            };\n                        }\n                        loadObject();\n                        return new SignatureWriter();\n                    }\n                    @Override\n                    public void visitClassType(String name) {\n                        if (nowReturn) {\n                            returnType = Type.getObjectType(name);\n                            return;\n                        }\n                        loadObject();\n                    }\n                    @Override\n                    public SignatureVisitor visitReturnType() {\n                        nowReturn = true;\n                        return this;\n                    }\n                    private void loadObject() {\n                        FindInMethod.super.visitInsn(Opcodes.DUP);\n                        FindInMethod.super.visitIntInsn(Opcodes.SIPUSH, index++);\n                        FindInMethod.super.visitVarInsn(Opcodes.ALOAD, loadIndex++);\n                        FindInMethod.super.visitInsn(Opcodes.AASTORE);\n                    }\n                }\n                SV sv = new SV();\n                SignatureReader sr = new SignatureReader(desc);\n                sr.accept(sv);\n                if (needsVM) {\n                    FindInMethod.super.visitInsn(Opcodes.DUP);\n                    FindInMethod.super.visitIntInsn(Opcodes.SIPUSH, sv.index);\n                    int lastSlash = FindInClass.this.name.lastIndexOf('/');\n                    String jsCallbacks = FindInClass.this.name.substring(0, lastSlash + 1) + \"$JsCallbacks$\";<fim_middle>// class below is blob\n"}