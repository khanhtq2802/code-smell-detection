{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.vxquery.runtime.functions.type;\n\nimport org.apache.vxquery.datamodel.accessors.SequencePointable;\nimport org.apache.vxquery.datamodel.accessors.TaggedValuePointable;\nimport org.apache.vxquery.datamodel.accessors.nodes.NodeTreePointable;\nimport org.apache.vxquery.datamodel.accessors.nodes.PINodePointable;\nimport org.apache.vxquery.datamodel.values.ValueTag;\nimport org.apache.vxquery.types.AnyItemType;\nimport org.apache.vxquery.types.AtomicType;\nimport org.apache.vxquery.types.AttributeType;\nimport org.apache.vxquery.types.BuiltinTypeRegistry;\nimport org.apache.vxquery.types.DocumentType;\nimport org.apache.vxquery.types.ElementType;\nimport org.apache.vxquery.types.ItemType;\nimport org.apache.vxquery.types.NodeKind;\nimport org.apache.vxquery.types.NodeType;\nimport org.apache.vxquery.types.ProcessingInstructionType;\nimport org.apache.vxquery.types.Quantifier;\nimport org.apache.vxquery.types.SchemaType;\nimport org.apache.vxquery.types.SequenceType;\n\nimport org.apache.hyracks.data.std.primitive.UTF8StringPointable;\n\npublic class SequenceTypeMatcher {\n    private final NodeTreePointable ntp = (NodeTreePointable) NodeTreePointable.FACTORY.createPointable();\n    private final TaggedValuePointable tempTVP1 = (TaggedValuePointable) TaggedValuePointable.FACTORY.createPointable();\n    private final PINodePointable pinp = (PINodePointable) PINodePointable.FACTORY.createPointable();\n    private final UTF8StringPointable utf8sp = (UTF8StringPointable) UTF8StringPointable.FACTORY.createPointable();\n    private final SequencePointable seqp = (SequencePointable) SequencePointable.FACTORY.createPointable();\n    private final TaggedValuePointable tempTVP2 = (TaggedValuePointable) TaggedValuePointable.FACTORY.createPointable();\n\n    private SequenceType sequenceType;\n\n    public boolean sequenceTypeMatch(TaggedValuePointable tvp) {\n        byte tag = tvp.getTag();\n        Quantifier stq = sequenceType.getQuantifier();\n        ItemType it = sequenceType.getItemType();\n        if (tag == ValueTag.SEQUENCE_TAG) {\n            tvp.getValue(seqp);\n            Quantifier vq = getSequenceQuantifier(seqp);\n            if (stq.isSubQuantifier(vq)) {\n                if (it instanceof AnyItemType) {\n                    return true;\n                } else {\n                    int n = seqp.getEntryCount();\n                    for (int i = 0; i < n; ++i) {\n                        seqp.getEntry(i, tempTVP2);\n                        if (!itemSequenceTypeMatch(tempTVP2, it)) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n            }\n        } else {\n            if (stq.isSubQuantifier(Quantifier.QUANT_ONE)) {\n                return itemSequenceTypeMatch(tvp, it);\n            }\n        }\n        return false;\n    }\n\n    private boolean itemSequenceTypeMatch(TaggedValuePointable tvp, ItemType it) {\n        byte tag = tvp.getTag();\n        if (it instanceof AnyItemType) {\n            return true;\n        } else if (it.isAtomicType()) {\n            AtomicType ait = (AtomicType) it;\n            if (BuiltinTypeRegistry.INSTANCE.isBuiltinTypeId(tag)) {\n                SchemaType vType = BuiltinTypeRegistry.INSTANCE.getSchemaTypeById(tag);\n                while (vType != null && vType.getTypeId() != ait.getTypeId()) {\n                    vType = vType.getBaseType();\n                }\n                return vType != null;\n            }\n        } else if (it instanceof NodeType && tag == ValueTag.NODE_TREE_TAG) {\n            NodeType nt = (NodeType) it;\n            NodeKind kind = nt.getNodeKind();\n            if (kind == NodeKind.ANY) {\n                return true;\n            } else {\n                tvp.getValue(ntp);\n                ntp.getRootNode(tempTVP1);\n                switch (tempTVP1.getTag()) {\n                    case ValueTag.ATTRIBUTE_NODE_TAG:\n                        if (kind == NodeKind.ATTRIBUTE) {\n                            if (nt.equals(AttributeType.ANYATTRIBUTE)) {\n                                return true;\n                            } else {\n\n                            }\n                        }\n                        break;\n\n                    case ValueTag.COMMENT_NODE_TAG:\n                        return kind == NodeKind.ATTRIBUTE;\n\n                    case ValueTag.DOCUMENT_NODE_TAG:\n                        if (kind == NodeKind.DOCUMENT) {\n                            if (nt.equals(DocumentType.ANYDOCUMENT)) {\n                                return true;\n                            } else {\n\n                            }\n                        }\n                        break;\n\n                    case ValueTag.ELEMENT_NODE_TAG:\n                        if (kind == NodeKind.ELEMENT) {\n                            if (nt.equals(ElementType.ANYELEMENT)) {\n                                return true;\n                            } else {\n\n                            }\n                        }\n                        break;\n\n                    case ValueTag.PI_NODE_TAG:\n                        if (kind == NodeKind.PI) {\n                            if (nt.equals(ProcessingInstructionType.ANYPI)) {\n                                return true;\n                            } else {\n                                ProcessingInstructionType pit = (ProcessingInstructionType) nt;\n                                tempTVP1.getValue(pinp);\n                                pinp.getTarget(ntp, utf8sp);\n                                byte[] target = pit.getTarget();\n                                return utf8sp.compareTo(target, 0, target.length) == 0;\n                            }\n                        }\n                        break;\n\n                    case ValueTag.TEXT_NODE_TAG:\n                        return kind == NodeKind.TEXT;\n                }\n            }\n        }\n        return false;\n    }\n\n<fim_suffix>    public boolean matchesAllInstances(SequenceType testST) {\n        Quantifier stq = sequenceType.getQuantifier();\n        ItemType it = sequenceType.getItemType();\n        if (stq.isSubQuantifier(testST.getQuantifier())) {\n            if (it instanceof AnyItemType) {\n                return true;\n            } else if (it.isAtomicType() && testST.getItemType().isAtomicType()) {\n                AtomicType ait = (AtomicType) it;\n                AtomicType testIT = (AtomicType) testST.getItemType();\n                if (BuiltinTypeRegistry.INSTANCE.isBuiltinTypeId(testIT.getTypeId())) {\n                    SchemaType vType = BuiltinTypeRegistry.INSTANCE.getSchemaTypeById(testIT.getTypeId());\n                    while (vType != null && vType.getTypeId() != ait.getTypeId()) {\n                        vType = vType.getBaseType();\n                    }\n                    return vType != null;\n                }\n            } else if (it instanceof NodeType && testST.getItemType() instanceof NodeType) {\n                NodeType nt = (NodeType) it;\n                NodeKind kind = nt.getNodeKind();\n                NodeType testNT = (NodeType) testST.getItemType();\n                NodeKind testKind = testNT.getNodeKind();\n                if (kind == NodeKind.ANY || kind == testKind) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return false;\n    }\n\n    private Quantifier getSequenceQuantifier(SequencePointable seqp) {\n        switch (seqp.getEntryCount()) {\n            case 0:\n                return Quantifier.QUANT_ZERO;\n\n            case 1:\n                return Quantifier.QUANT_ONE;\n        }\n        return Quantifier.QUANT_PLUS;\n    }\n\n    public void setSequenceType(SequenceType sType) {\n        this.sequenceType = sType;\n    }\n\n    public String toString() {\n        return \"sequenceMatcher[\" + this.sequenceType + \"]\";\n    }\n}<fim_middle>// function below is long method\n"}