{"text": "<fim_prefix>/*\n * Copyright 2015-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.statemachine.support;\n\nimport java.util.Collection;\n\nimport org.springframework.messaging.Message;\nimport org.springframework.messaging.MessageHeaders;\nimport org.springframework.statemachine.ExtendedState;\nimport org.springframework.statemachine.StateContext;\nimport org.springframework.statemachine.StateMachine;\nimport org.springframework.statemachine.state.State;\nimport org.springframework.statemachine.transition.Transition;\n\n/**\n * Default implementation of a {@link StateContext}.\n *\n * @author Janne Valkealahti\n *\n * @param <S> the type of state\n * @param <E> the type of event\n */\npublic class DefaultStateContext<S, E> implements StateContext<S, E> {\n\n\tprivate final Stage stage;\n\tprivate final Message<E> message;\n\tprivate final MessageHeaders messageHeaders;\n\tprivate final ExtendedState extendedState;\n\tprivate final Transition<S,E> transition;\n\tprivate final StateMachine<S, E> stateMachine;\n\tprivate final State<S, E> source;\n\tprivate final State<S, E> target;\n\tprivate final Collection<State<S, E>> sources;\n\tprivate final Collection<State<S, E>> targets;\n\tprivate final Exception exception;\n\n\t/**\n\t * Instantiates a new default state context.\n\t *\n\t * @param stage the stage\n\t * @param message the message\n\t * @param messageHeaders the message headers\n\t * @param extendedState the extended state\n\t * @param transition the transition\n\t * @param stateMachine the state machine\n\t * @param source the source\n\t * @param target the target\n\t * @param exception the exception\n\t */\n\tpublic DefaultStateContext(Stage stage, Message<E> message, MessageHeaders messageHeaders, ExtendedState extendedState,\n\t\t\tTransition<S, E> transition, StateMachine<S, E> stateMachine, State<S, E> source, State<S, E> target, Exception exception) {\n\t\tthis.stage = stage;\n\t\tthis.message = message;\n\t\tthis.messageHeaders = messageHeaders;\n\t\tthis.extendedState = extendedState;\n\t\tthis.transition = transition;\n\t\tthis.stateMachine = stateMachine;\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t\tthis.exception = exception;\n\t\tthis.sources = null;\n\t\tthis.targets = null;\n\t}\n\n\t/**\n\t * Instantiates a new default state context.\n\t *\n\t * @param stage the stage\n\t * @param message the message\n\t * @param messageHeaders the message headers\n\t * @param extendedState the extended state\n\t * @param transition the transition\n\t * @param stateMachine the state machine\n\t * @param source the source\n\t * @param target the target\n\t * @param sources the sources\n\t * @param targets the targets\n\t * @param exception the exception\n\t */\n\tpublic DefaultStateContext(Stage stage, Message<E> message, MessageHeaders messageHeaders, ExtendedState extendedState,\n\t\t\tTransition<S, E> transition, StateMachine<S, E> stateMachine, State<S, E> source, State<S, E> target,\n\t\t\tCollection<State<S, E>> sources, Collection<State<S, E>> targets, Exception exception) {\n\t\tthis.stage = stage;\n\t\tthis.message = message;\n\t\tthis.messageHeaders = messageHeaders;\n\t\tthis.extendedState = extendedState;\n\t\tthis.transition = transition;\n\t\tthis.stateMachine = stateMachine;\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t\tthis.sources = sources;\n\t\tthis.targets = targets;\n\t\tthis.exception = exception;\n\t}\n\n\t@Override\n\tpublic Stage getStage() {\n\t\treturn stage;\n\t}\n\n\t@Override\n\tpublic E getEvent() {\n\t\treturn message != null ? message.getPayload() : null;\n\t}\n\n\t@Override\n\tpublic Message<E> getMessage() {\n\t\treturn message;\n\t}\n\n\t@Override\n\tpublic MessageHeaders getMessageHeaders() {\n\t\treturn messageHeaders;\n\t}\n\n\t@Override\n\tpublic Object getMessageHeader(Object header) {\n\t\tif (header instanceof String) {\n\t\t\treturn messageHeaders.get((String)header);\n\t\t} else if (header instanceof Enum<?>) {\n\t\t\treturn messageHeaders.get(((Enum<?>)header).toString());\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic ExtendedState getExtendedState() {\n\t\treturn extendedState;\n\t}\n\n\t@Override\n\tpublic Transition<S, E> getTransition() {\n\t\treturn transition;\n\t}\n\n\t@Override\n\tpublic StateMachine<S, E> getStateMachine() {\n\t\treturn stateMachine;\n\t}\n\n\t@Override\n\tpublic State<S, E> getSource() {\n\t\treturn source != null ? source : (transition != null ? transition.getSource() : null);\n\t}\n\n\t@Override\n\tpublic Collection<State<S, E>> getSources() {\n\t\treturn sources;\n\t}\n\n\t@Override\n\tpublic State<S, E> getTarget() {\n\t\treturn target != null ? target : (transition != null ? transition.getTarget() : null);\n\t}\n\n\t@Override\n\tpublic Collection<State<S, E>> getTargets() {\n\t\treturn targets;\n\t}\n\n\t@Override\n\tpublic Exception getException() {\n\t\treturn exception;\n\t}\n\n<fim_suffix>\t@Override\n\tpublic String toString() {\n\t\treturn \"DefaultStateContext [stage=\" + stage + \", message=\" + message + \", messageHeaders=\" + messageHeaders + \", extendedState=\"\n\t\t\t\t+ extendedState + \", transition=\" + transition + \", stateMachine=\" + stateMachine + \", source=\" + source + \", target=\"\n\t\t\t\t+ target + \", sources=\" + sources + \", targets=\" + targets + \", exception=\" + exception + \"]\";\n\t}\n}<fim_middle>// function below has no smell\n"}