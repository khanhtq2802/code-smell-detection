{"text": "<fim_prefix>\t * @return an {@link Object} of the specified {@link Class type} converted from the PDX bytes.\n\t * @see org.apache.geode.pdx.PdxReader\n\t * @see java.lang.Object\n\t * @see java.lang.Class\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tObject doFromData(Class<?> type, PdxReader reader) {\n\t\tGemfirePersistentEntity<?> entity = getPersistentEntity(type);\n\t\tObject instance = resolveEntityInstantiator(entity)\n\t\t\t.createInstance(entity, new PersistentEntityParameterValueProvider<>(entity,\n\t\t\t\tnew GemfirePropertyValueProvider(reader), null));\n\t\tPersistentPropertyAccessor propertyAccessor =\n\t\t\tnew ConvertingPropertyAccessor(entity.getPropertyAccessor(instance), getConversionService());\n\t\tentity.doWithProperties((PropertyHandler<GemfirePersistentProperty>) persistentProperty -> {\n\t\t\tif (isWritable(entity, persistentProperty)) {\n\t\t\t\tPdxSerializer customPdxSerializer = resolveCustomPdxSerializer(persistentProperty);\n\t\t\t\tObject value = null;\n\t\t\t\ttry {\n\t\t\t\t\tif (getLogger().isDebugEnabled()) {\n\t\t\t\t\t\tgetLogger().debug(String.format(\"Setting property [%1$s] for entity [%2$s] of type [%3$s] from PDX%4$s\",\n\t\t\t\t\t\t\tpersistentProperty.getName(), instance, type, (customPdxSerializer != null\n\t\t\t\t\t\t\t\t? String.format(\" using custom PdxSerializer [%s]\", customPdxSerializer) : \"\")));\n\t\t\t\t\t}\n\t\t\t\t\tvalue = (customPdxSerializer != null\n\t\t\t\t\t\t? customPdxSerializer.fromData(persistentProperty.getType(), reader)\n\t\t\t\t\t\t: reader.readField(persistentProperty.getName()));\n\t\t\t\t\tif (getLogger().isDebugEnabled()) {\n\t\t\t\t\t\tgetLogger().debug(String.format(\"... with value [%s]\", value));\n\t\t\t\t\t}\n\t\t\t\t\tpropertyAccessor.setProperty(persistentProperty, value);\n\t\t\t\t}\n\t\t\t\tcatch (Exception cause) {\n\t\t\t\t\tthrow new MappingException(\n\t\t\t\t\t\tString.format(\"While setting value [%1$s] of property [%2$s] for entity of type [%3$s] from PDX%4$s\",\n\t\t\t\t\t\tvalue, persistentProperty.getName(), type, (customPdxSerializer != null\n\t\t\t\t\t\t\t? String.format(\" using custom PdxSerializer [%s]\", customPdxSerializer) : \"\")), cause);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn propertyAccessor.getBean();\n\t}\n\t/**\n\t * Determines whether the {@link PersistentProperty persistent property}\n\t * of the given {@link PersistentEntity entity } is writable.\n\t *\n\t * The {@link PersistentProperty persistent property} is considered {@literal writable} if the property\n\t * is not a constructor parameter of the {@link PersistentEntity entity's} {@link Class type}, the property\n\t * has a {@literal setter} method and the property is not {@literal transient}.\n\t *\n\t * @param entity {@link GemfirePersistentEntity} containing the {@link GemfirePersistentProperty property}.\n\t * @param persistentProperty {@link GemfirePersistentProperty} to evaluate.\n\t * @return a boolean value indicating whether the {@link PersistentProperty persistent property}\n\t * of the given {@link PersistentEntity entity } is writable.\n\t * @see org.springframework.data.gemfire.mapping.GemfirePersistentEntity\n\t * @see org.springframework.data.gemfire.mapping.GemfirePersistentProperty\n\t */\n\tboolean isWritable(GemfirePersistentEntity<?> entity, GemfirePersistentProperty persistentProperty) {\n\t\treturn !entity.isConstructorArgument(persistentProperty)\n\t\t\t&& persistentProperty.isWritable()\n\t\t\t&& !persistentProperty.isTransient();\n\t}\n\t@Override\n\tpublic boolean toData(Object value, PdxWriter writer) {\n\t\treturn getTypeFilters().test(resolveType(value)) && doToData(value, writer);\n\t}\n\t/**\n\t * Converts the given {@link Object} into a stream of PDX bytes.\n\t *\n\t * @param value {@link Object} to convert.\n\t * @param writer {@link PdxWriter} used to stream the given {@link Object} into a stream of PDX bytes.\n\t * @return a boolean value indicating whether this {@link MappingPdxSerializer PDX serializer} was able to\n\t * write the given {@link Object} as a stream of PDX bytes.\n\t * @see org.apache.geode.pdx.PdxWriter\n\t * @see java.lang.Object\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tboolean doToData(Object value, PdxWriter writer) {\n\t\tGemfirePersistentEntity<?> entity = getPersistentEntity(value);\n\t\t// Entity will be null for simple types (e.g. int, Long, String, etc).\n\t\tif (entity != null) {\n\t\t\tPersistentPropertyAccessor propertyAccessor =\n\t\t\t\tnew ConvertingPropertyAccessor(entity.getPropertyAccessor(value), getConversionService());\n\t\t\tentity.doWithProperties((PropertyHandler<GemfirePersistentProperty>) persistentProperty -> {\n\t\t\t\tif (isReadable(persistentProperty)) {\n\t\t\t\t\tPdxSerializer customPdxSerializer = resolveCustomPdxSerializer(persistentProperty);\n\t\t\t\t\tObject propertyValue = null;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpropertyValue = propertyAccessor.getProperty(persistentProperty);\n\t\t\t\t\t\tif (getLogger().isDebugEnabled()) {\n\t\t\t\t\t\t\tgetLogger().debug(String.format(\"Serializing entity [%1$s] property [%2$s] value [%3$s] of type [%4$s] to PDX%5$s\",\n\t\t\t\t\t\t\t\tentity.getType().getName(), persistentProperty.getName(), propertyValue,\n\t\t\t\t\t\t\t\tObjectUtils.nullSafeClassName(propertyValue), (customPdxSerializer != null\n\t\t\t\t\t\t\t\t\t? String.format(\" using custom PdxSerializer [%s]\", customPdxSerializer) : \"\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (customPdxSerializer != null) {\n\t\t\t\t\t\t\tcustomPdxSerializer.toData(propertyValue, writer);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\twriter.writeField(persistentProperty.getName(), propertyValue,\n\t\t\t\t\t\t\t\t(Class<Object>) persistentProperty.getType());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception cause) {\n\t\t\t\t\t\tthrow new MappingException(String.format(\n\t\t\t\t\t\t\t\"While serializing entity [%1$s] property [%2$s] value [%3$s] of type [%4$s] to PDX%5$s\",\n\t\t\t\t\t\t\tentity.getType().getName(), persistentProperty.getName(), propertyValue,\n\t\t\t\t\t\t\tObjectUtils.nullSafeClassName(propertyValue), (customPdxSerializer != null\n\t\t\t\t\t\t\t\t? String.format(\" using custom PdxSerializer [%1$s].\",\n\t\t\t\t\t\t\t\t\tcustomPdxSerializer.getClass().getName()) : \"\")), cause);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tGemfirePersistentProperty idProperty = entity.getIdProperty();\n\t\t\tif (idProperty != null) {\n\t\t\t\twriter.markIdentityField(idProperty.getName());\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Determines whether the given {@link PersistentProperty persistent property} is readable.\n\t *\n\t * The {@link PersistentProperty persistent property} is considered {@literal readable}\n\t * if the property is not {@literal transient}.\n\t *\n\t * @param persistentProperty {@link GemfirePersistentProperty} to evaluate.\n\t * @return a boolean value indicating whether the {@link PersistentProperty persistent property}\n\t * is readable.\n\t * @see org.springframework.data.gemfire.mapping.GemfirePersistentProperty\n\t */\n\tboolean isReadable(GemfirePersistentProperty persistentProperty) {\n\t\treturn !persistentProperty.isTransient();\n\t}\n\t/**\n\t * Returns a custom PDX serializer for the given {@link PersistentProperty entity persistent property}.\n\t *\n\t * @param property {@link PersistentProperty} of the entity used to lookup the custom PDX serializer.\n\t * @return a custom {@link PdxSerializer} for the given entity {@link PersistentProperty},\n\t * or {@literal null} if no custom {@link PdxSerializer} could be found.\n\t * @see org.apache.geode.pdx.PdxSerializer\n\t */\n<fim_suffix>\t@Nullable\n\tprotected PdxSerializer resolveCustomPdxSerializer(@NonNull PersistentProperty<?> property) {\n\t\tMap<?, PdxSerializer> customPdxSerializers = getCustomPdxSerializers();\n\t\treturn this.pdxSerializerResolvers.stream()\n\t\t\t.map(it -> it.resolve(customPdxSerializers, property))\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.findFirst()\n\t\t\t.orElse(null);\n\t}<fim_middle>// function below has no smell\n"}