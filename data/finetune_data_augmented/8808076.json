{"text": "<fim_prefix>      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData(\"success\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(maintenanceStatus_result.class, metaDataMap);\n    }\n    public maintenanceStatus_result() {\n    }\n    public maintenanceStatus_result(\n      Response success)\n    {\n      this();\n      this.success = success;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public maintenanceStatus_result(maintenanceStatus_result other) {\n      if (other.isSetSuccess()) {\n        this.success = new Response(other.success);\n      }\n    }\n    public maintenanceStatus_result deepCopy() {\n      return new maintenanceStatus_result(this);\n    }\n    @Override\n    public void clear() {\n      this.success = null;\n    }\n    public Response getSuccess() {\n      return this.success;\n    }\n    public maintenanceStatus_result setSuccess(Response success) {\n      this.success = success;\n      return this;\n    }\n    public void unsetSuccess() {\n      this.success = null;\n    }\n    /** Returns true if field success is set (has been assigned a value) and false otherwise */\n    public boolean isSetSuccess() {\n      return this.success != null;\n    }\n    public void setSuccessIsSet(boolean value) {\n      if (!value) {\n        this.success = null;\n      }\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      case SUCCESS:\n        if (value == null) {\n          unsetSuccess();\n        } else {\n          setSuccess((Response)value);\n        }\n        break;\n      }\n    }\n    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case SUCCESS:\n        return getSuccess();\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      case SUCCESS:\n        return isSetSuccess();\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof maintenanceStatus_result)\n        return this.equals((maintenanceStatus_result)that);\n      return false;\n    }\n    public boolean equals(maintenanceStatus_result that) {\n      if (that == null)\n        return false;\n      boolean this_present_success = true && this.isSetSuccess();\n      boolean that_present_success = true && that.isSetSuccess();\n      if (this_present_success || that_present_success) {\n        if (!(this_present_success && that_present_success))\n          return false;\n        if (!this.success.equals(that.success))\n          return false;\n      }\n      return true;\n    }\n    @Override\n    public int hashCode() {\n      List<Object> list = new ArrayList<Object>();\n      boolean present_success = true && (isSetSuccess());\n      list.add(present_success);\n      if (present_success)\n        list.add(success);\n      return list.hashCode();\n    }\n    @Override\n    public int compareTo(maintenanceStatus_result other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetSuccess()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n      }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"maintenanceStatus_result(\");\n      boolean first = true;\n      sb.append(\"success:\");\n      if (this.success == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.success);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n      if (success != null) {\n        success.validate();\n      }\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class maintenanceStatus_resultStandardSchemeFactory implements SchemeFactory {\n      public maintenanceStatus_resultStandardScheme getScheme() {\n        return new maintenanceStatus_resultStandardScheme();\n      }\n    }\n    private static class maintenanceStatus_resultStandardScheme extends StandardScheme<maintenanceStatus_result> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, maintenanceStatus_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 0: // SUCCESS\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.success = new Response();\n                struct.success.read(iprot);\n                struct.setSuccessIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, maintenanceStatus_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.success != null) {\n          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);\n          struct.success.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class maintenanceStatus_resultTupleSchemeFactory implements SchemeFactory {\n      public maintenanceStatus_resultTupleScheme getScheme() {\n        return new maintenanceStatus_resultTupleScheme();\n      }\n    }\n<fim_suffix>    private static class maintenanceStatus_resultTupleScheme extends TupleScheme<maintenanceStatus_result> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, maintenanceStatus_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetSuccess()) {\n          optionals.set(0);\n        }\n        oprot.writeBitSet(optionals, 1);\n        if (struct.isSetSuccess()) {\n          struct.success.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, maintenanceStatus_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        BitSet incoming = iprot.readBitSet(1);\n        if (incoming.get(0)) {\n          struct.success = new Response();\n          struct.success.read(iprot);\n          struct.setSuccessIsSet(true);\n        }\n      }\n    }<fim_middle>// class below has no smell\n"}