{"text": "<fim_prefix>/*\n * Copyright 2017 The Error Prone Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.errorprone.util;\n\nimport com.google.auto.value.AutoValue;\nimport com.google.common.collect.ImmutableList;\nimport com.sun.source.tree.Tree;\nimport com.sun.tools.javac.parser.Tokens.Comment;\n\n/** Class to hold AST nodes annotated with the comments that are associated with them */\n@AutoValue\npublic abstract class Commented<T extends Tree> {\n\n  /** Identifies the position of a comment relative to the associated treenode. */\n  public enum Position {\n    BEFORE,\n    AFTER,\n    ANY\n  }\n\n  public abstract T tree();\n\n  public abstract ImmutableList<Comment> beforeComments();\n\n  public abstract ImmutableList<Comment> afterComments();\n\n  static <T extends Tree> Builder<T> builder() {\n    return new AutoValue_Commented.Builder<T>();\n  }\n\n  @AutoValue.Builder\n  abstract static class Builder<T extends Tree> {\n\n    abstract Builder<T> setTree(T tree);\n\n    protected abstract ImmutableList.Builder<Comment> beforeCommentsBuilder();\n\n    protected abstract ImmutableList.Builder<Comment> afterCommentsBuilder();\n\n    Builder<T> addComment(\n        Comment comment, int nodePosition, int tokenizingOffset, Position position) {\n      OffsetComment offsetComment = new OffsetComment(comment, tokenizingOffset);\n\n      if (comment.getSourcePos(0) < nodePosition) {\n        if (position.equals(Position.BEFORE) || position.equals(Position.ANY)) {\n          beforeCommentsBuilder().add(offsetComment);\n        }\n      } else {\n        if (position.equals(Position.AFTER) || position.equals(Position.ANY)) {\n          afterCommentsBuilder().add(offsetComment);\n        }\n      }\n      return this;\n    }\n\n    Builder<T> addAllComment(\n        Iterable<? extends Comment> comments,\n        int nodePosition,\n        int tokenizingOffset,\n        Position position) {\n      for (Comment comment : comments) {\n        addComment(comment, nodePosition, tokenizingOffset, position);\n      }\n      return this;\n    }\n\n    abstract Commented<T> build();\n  }\n\n  private static final class OffsetComment implements Comment {\n\n    private final Comment wrapped;\n    private final int offset;\n\n    private OffsetComment(Comment wrapped, int offset) {\n      this.wrapped = wrapped;\n      this.offset = offset;\n    }\n\n    @Override\n    public String getText() {\n      return wrapped.getText();\n    }\n\n<fim_suffix>    @Override\n    public int getSourcePos(int i) {\n      return wrapped.getSourcePos(i) + offset;\n    }\n\n    @Override\n    public CommentStyle getStyle() {\n      return wrapped.getStyle();\n    }\n\n    @Override\n    public boolean isDeprecated() {\n      return false;\n    }\n  }\n}<fim_middle>// function below has no smell\n"}