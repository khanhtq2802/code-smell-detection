{"text": "<fim_prefix>/*\n * Copyright 2014-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.facebook.litho.testing.assertj;\n\nimport com.facebook.litho.LithoView;\nimport com.facebook.litho.testing.subcomponents.InspectableComponent;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Stack;\nimport org.assertj.core.api.Condition;\nimport org.assertj.core.api.iterable.Extractor;\nimport org.assertj.core.util.Preconditions;\n\n/**\n * Recursively extracts sub components from a LithoView holding one or more Components, wrapping\n * them in an {@link InspectableComponent}.\n *\n * <p>Components are extracted in a depth-first way so that they match the hierarchy indices when\n * going from top to bottom.\n */\n<fim_suffix>public final class LithoViewSubComponentDeepExtractor\n    implements Extractor<LithoView, List<InspectableComponent>> {\n\n  private LithoViewSubComponentDeepExtractor() {}\n\n  @Override\n  public List<InspectableComponent> extract(LithoView lithoView) {\n    final List<InspectableComponent> res = new LinkedList<>();\n    final Stack<InspectableComponent> stack = new Stack<>();\n\n    final InspectableComponent rootInstance = InspectableComponent.getRootInstance(lithoView);\n    Preconditions.checkNotNull(\n        rootInstance,\n        \"Could not obtain DebugComponent. \"\n            + \"Please ensure that ComponentsConfiguration.IS_INTERNAL_BUILD is enabled.\");\n    stack.add(rootInstance);\n\n    while (!stack.isEmpty()) {\n      final InspectableComponent inspectableComponent = stack.pop();\n      res.add(inspectableComponent);\n\n      for (InspectableComponent child : inspectableComponent.getChildComponents()) {\n        stack.push(child);\n      }\n    }\n\n    return res;\n  }\n\n  public static LithoViewSubComponentDeepExtractor subComponentsDeeply() {\n    return new LithoViewSubComponentDeepExtractor();\n  }\n\n  public static Condition<LithoView> deepSubComponentWith(\n      final Condition<InspectableComponent> inner) {\n    return new Condition<LithoView>() {\n      @Override\n      public boolean matches(LithoView lithoView) {\n        as(\"deep sub component with <%s>\", inner);\n        for (InspectableComponent component : subComponentsDeeply().extract(lithoView)) {\n          if (inner.matches(component)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    };\n  }\n}<fim_middle>// class below has no smell\n"}