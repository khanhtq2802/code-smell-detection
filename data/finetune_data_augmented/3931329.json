{"text": "<fim_prefix> * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.accumulo.monitor.rest.master;\nimport java.lang.management.ManagementFactory;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport org.apache.accumulo.core.gc.thrift.GCStatus;\nimport org.apache.accumulo.core.master.thrift.DeadServer;\nimport org.apache.accumulo.core.master.thrift.MasterMonitorInfo;\nimport org.apache.accumulo.core.master.thrift.TabletServerStatus;\nimport org.apache.accumulo.core.util.AddressUtil;\nimport org.apache.accumulo.monitor.Monitor;\nimport org.apache.accumulo.monitor.rest.logs.DeadLoggerInformation;\nimport org.apache.accumulo.monitor.rest.logs.DeadLoggerList;\nimport org.apache.accumulo.monitor.rest.tservers.BadTabletServerInformation;\nimport org.apache.accumulo.monitor.rest.tservers.BadTabletServers;\nimport org.apache.accumulo.monitor.rest.tservers.DeadServerInformation;\nimport org.apache.accumulo.monitor.rest.tservers.DeadServerList;\nimport org.apache.accumulo.monitor.rest.tservers.ServerShuttingDownInformation;\nimport org.apache.accumulo.monitor.rest.tservers.ServersShuttingDown;\nimport org.apache.accumulo.server.master.state.TabletServerState;\n/**\n * Responsible for generating a new Master information JSON object\n *\n * @since 2.0.0\n */\n@Path(\"/master\")\n@Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\npublic class MasterResource {\n  public static final String NO_MASTERS = \"No Masters running\";\n  /**\n   * Gets the MasterMonitorInfo, allowing for mocking frameworks for testability\n   */\n  protected static MasterMonitorInfo getMmi() {\n    return Monitor.getMmi();\n  }\n  /**\n   * Generates a master information JSON object\n   *\n   * @return master JSON object\n   */\n  @GET\n  public static MasterInformation getTables() {\n    MasterInformation masterInformation;\n    MasterMonitorInfo mmi = Monitor.getMmi();\n    if (mmi != null) {\n      GCStatus gcStatusObj = Monitor.getGcStatus();\n      String gcStatus = \"Waiting\";\n      String label = \"\";\n      if (gcStatusObj != null) {\n        long start = 0;\n        if (gcStatusObj.current.started != 0 || gcStatusObj.currentLog.started != 0) {\n          start = Math.max(gcStatusObj.current.started, gcStatusObj.currentLog.started);\n          label = \"Running\";\n        } else if (gcStatusObj.lastLog.finished != 0) {\n          start = gcStatusObj.lastLog.finished;\n        }\n        if (start != 0) {\n          gcStatus = String.valueOf(start);\n        }\n      } else {\n        gcStatus = \"Down\";\n      }\n      List<String> tservers = new ArrayList<>();\n      for (TabletServerStatus up : mmi.tServerInfo) {\n        tservers.add(up.name);\n      }\n      for (DeadServer down : mmi.deadTabletServers) {\n        tservers.add(down.server);\n      }\n      List<String> masters = Monitor.getContext().getMasterLocations();\n      String master = masters.size() == 0 ? \"Down\"\n          : AddressUtil.parseAddress(masters.get(0), false).getHost();\n      int onlineTabletServers = mmi.tServerInfo.size();\n      int totalTabletServers = tservers.size();\n      int tablets = Monitor.getTotalTabletCount();\n      int unassignedTablets = mmi.unassignedTablets;\n      long entries = Monitor.getTotalEntries();\n      double ingest = Monitor.getTotalIngestRate();\n      double entriesRead = Monitor.getTotalScanRate();\n      double entriesReturned = Monitor.getTotalQueryRate();\n      long holdTime = Monitor.getTotalHoldTime();\n      double osLoad = ManagementFactory.getOperatingSystemMXBean().getSystemLoadAverage();\n      int tables = Monitor.getTotalTables();\n      int deadTabletServers = mmi.deadTabletServers.size();\n      long lookups = Monitor.getTotalLookups();\n      long uptime = System.currentTimeMillis() - Monitor.getStartTime();\n      masterInformation = new MasterInformation(master, onlineTabletServers, totalTabletServers,\n          gcStatus, tablets, unassignedTablets, entries, ingest, entriesRead, entriesReturned,\n          holdTime, osLoad, tables, deadTabletServers, lookups, uptime, label, getGoalState(),\n          getState(), getNumBadTservers(), getServersShuttingDown(), getDeadTservers(),\n          getDeadLoggers());\n    } else {\n      masterInformation = new MasterInformation();\n    }\n    return masterInformation;\n  }\n  /**\n   * Returns the current state of the master\n   *\n   * @return master state\n   */\n  public static String getState() {\n    MasterMonitorInfo mmi = getMmi();\n    if (mmi == null) {\n      return NO_MASTERS;\n    }\n    return mmi.state.toString();\n  }\n  /**\n   * Returns the goal state of the master\n   *\n   * @return master goal state\n   */\n  public static String getGoalState() {\n    MasterMonitorInfo mmi = getMmi();\n    if (mmi == null) {\n      return NO_MASTERS;\n    }\n    return mmi.goalState.name();\n  }\n  /**\n   * Generates a dead server list as a JSON object\n   *\n   * @return dead server list\n   */\n  public static DeadServerList getDeadTservers() {\n    MasterMonitorInfo mmi = getMmi();\n    if (mmi == null) {\n      return new DeadServerList();\n    }\n    DeadServerList deadServers = new DeadServerList();\n    // Add new dead servers to the list\n    for (DeadServer dead : mmi.deadTabletServers) {\n      deadServers\n          .addDeadServer(new DeadServerInformation(dead.server, dead.lastStatus, dead.status));\n    }\n    return deadServers;\n  }\n  /**\n   * Generates a dead logger list as a JSON object\n   *\n   * @return dead logger list\n   */\n  public static DeadLoggerList getDeadLoggers() {\n    MasterMonitorInfo mmi = getMmi();\n    if (mmi == null) {\n      return new DeadLoggerList();\n    }\n    DeadLoggerList deadLoggers = new DeadLoggerList();\n    // Add new dead loggers to the list\n    for (DeadServer dead : mmi.deadTabletServers) {\n      deadLoggers\n          .addDeadLogger(new DeadLoggerInformation(dead.server, dead.lastStatus, dead.status));\n    }\n    return deadLoggers;\n  }\n  /**\n   * Generates bad tserver lists as a JSON object\n   *\n   * @return bad tserver list\n   */\n  public static BadTabletServers getNumBadTservers() {\n    MasterMonitorInfo mmi = getMmi();\n    if (mmi == null) {\n      return new BadTabletServers();\n    }\n    Map<String,Byte> badServers = mmi.getBadTServers();\n    if (badServers == null || badServers.isEmpty()) {\n      return new BadTabletServers();\n    }\n    BadTabletServers readableBadServers = new BadTabletServers();\n    // Add new bad tservers to the list\n    for (Entry<String,Byte> badServer : badServers.entrySet()) {\n      try {\n        TabletServerState state = TabletServerState.getStateById(badServer.getValue());\n        readableBadServers\n            .addBadServer(new BadTabletServerInformation(badServer.getKey(), state.name()));\n      } catch (IndexOutOfBoundsException e) {\n        readableBadServers\n            .addBadServer(new BadTabletServerInformation(badServer.getKey(), \"Unknown state\"));\n      }\n    }\n    return readableBadServers;\n  }\n  /**\n   * Generates a JSON object of a list of servers shutting down\n   *\n   * @return servers shutting down list\n   */\n<fim_suffix>  public static ServersShuttingDown getServersShuttingDown() {\n    ServersShuttingDown servers = new ServersShuttingDown();\n    // Add new servers to the list\n    for (String server : Monitor.getMmi().serversShuttingDown) {\n      servers.addServerShuttingDown(new ServerShuttingDownInformation(server));\n    }\n    return servers;\n  }<fim_middle>// function below has no smell\n"}