{"text": "<fim_prefix>    }\n    /**\n     * Return next 16-bit signed int from buffer. (little-endian)\n     * \n     * @see mysql-5.1.60/include/my_global.h - sint2korr\n     */\n    public final int getInt16() {\n        if (position + 1 >= origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                               + (position - origin + 1));\n        byte[] buf = buffer;\n        return (0xff & buf[position++]) | ((buf[position++]) << 8);\n    }\n    /**\n     * Return 16-bit unsigned int from buffer. (little-endian)\n     * \n     * @see mysql-5.1.60/include/my_global.h - uint2korr\n     */\n    public final int getUint16(final int pos) {\n        final int position = origin + pos;\n        if (pos + 1 >= limit || pos < 0) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                            + (pos < 0 ? pos : (pos + 1)));\n        byte[] buf = buffer;\n        return (0xff & buf[position]) | ((0xff & buf[position + 1]) << 8);\n    }\n    /**\n     * Return next 16-bit unsigned int from buffer. (little-endian)\n     * \n     * @see mysql-5.1.60/include/my_global.h - uint2korr\n     */\n    public final int getUint16() {\n        if (position + 1 >= origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                               + (position - origin + 1));\n        byte[] buf = buffer;\n        return (0xff & buf[position++]) | ((0xff & buf[position++]) << 8);\n    }\n    /**\n     * Return 16-bit signed int from buffer. (big-endian)\n     * \n     * @see mysql-5.6.10/include/myisampack.h - mi_sint2korr\n     */\n    public final int getBeInt16(final int pos) {\n        final int position = origin + pos;\n        if (pos + 1 >= limit || pos < 0) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                            + (pos < 0 ? pos : (pos + 1)));\n        byte[] buf = buffer;\n        return (0xff & buf[position + 1]) | ((buf[position]) << 8);\n    }\n    /**\n     * Return next 16-bit signed int from buffer. (big-endian)\n     * \n     * @see mysql-5.1.60/include/my_global.h - mi_sint2korr\n     */\n    public final int getBeInt16() {\n        if (position + 1 >= origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                               + (position - origin + 1));\n        byte[] buf = buffer;\n        return (buf[position++] << 8) | (0xff & buf[position++]);\n    }\n    /**\n     * Return 16-bit unsigned int from buffer. (big-endian)\n     * \n     * @see mysql-5.6.10/include/myisampack.h - mi_usint2korr\n     */\n    public final int getBeUint16(final int pos) {\n        final int position = origin + pos;\n        if (pos + 1 >= limit || pos < 0) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                            + (pos < 0 ? pos : (pos + 1)));\n        byte[] buf = buffer;\n        return (0xff & buf[position + 1]) | ((0xff & buf[position]) << 8);\n    }\n    /**\n     * Return next 16-bit unsigned int from buffer. (big-endian)\n     * \n     * @see mysql-5.6.10/include/myisampack.h - mi_usint2korr\n     */\n    public final int getBeUint16() {\n        if (position + 1 >= origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                               + (position - origin + 1));\n        byte[] buf = buffer;\n        return ((0xff & buf[position++]) << 8) | (0xff & buf[position++]);\n    }\n    /**\n     * Return 24-bit signed int from buffer. (little-endian)\n     * \n     * @see mysql-5.1.60/include/my_global.h - sint3korr\n     */\n    public final int getInt24(final int pos) {\n        final int position = origin + pos;\n        if (pos + 2 >= limit || pos < 0) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                            + (pos < 0 ? pos : (pos + 2)));\n        byte[] buf = buffer;\n        return (0xff & buf[position]) | ((0xff & buf[position + 1]) << 8) | ((buf[position + 2]) << 16);\n    }\n    /**\n     * Return next 24-bit signed int from buffer. (little-endian)\n     * \n     * @see mysql-5.1.60/include/my_global.h - sint3korr\n     */\n    public final int getInt24() {\n        if (position + 2 >= origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                               + (position - origin + 2));\n        byte[] buf = buffer;\n        return (0xff & buf[position++]) | ((0xff & buf[position++]) << 8) | ((buf[position++]) << 16);\n    }\n    /**\n     * Return 24-bit signed int from buffer. (big-endian)\n     * \n     * @see mysql-5.6.10/include/myisampack.h - mi_usint3korr\n     */\n    public final int getBeInt24(final int pos) {\n        final int position = origin + pos;\n        if (pos + 2 >= limit || pos < 0) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                            + (pos < 0 ? pos : (pos + 2)));\n        byte[] buf = buffer;\n        return (0xff & buf[position + 2]) | ((0xff & buf[position + 1]) << 8) | ((buf[position]) << 16);\n    }\n    /**\n     * Return next 24-bit signed int from buffer. (big-endian)\n     * \n     * @see mysql-5.6.10/include/myisampack.h - mi_usint3korr\n     */\n    public final int getBeInt24() {\n        if (position + 2 >= origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                               + (position - origin + 2));\n        byte[] buf = buffer;\n        return ((buf[position++]) << 16) | ((0xff & buf[position++]) << 8) | (0xff & buf[position++]);\n    }\n    /**\n     * Return 24-bit unsigned int from buffer. (little-endian)\n     * \n     * @see mysql-5.1.60/include/my_global.h - uint3korr\n     */\n    public final int getUint24(final int pos) {\n        final int position = origin + pos;\n        if (pos + 2 >= limit || pos < 0) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                            + (pos < 0 ? pos : (pos + 2)));\n        byte[] buf = buffer;\n        return (0xff & buf[position]) | ((0xff & buf[position + 1]) << 8) | ((0xff & buf[position + 2]) << 16);\n    }\n    /**\n     * Return next 24-bit unsigned int from buffer. (little-endian)\n     * \n     * @see mysql-5.1.60/include/my_global.h - uint3korr\n     */\n    public final int getUint24() {\n        if (position + 2 >= origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                               + (position - origin + 2));\n        byte[] buf = buffer;\n        return (0xff & buf[position++]) | ((0xff & buf[position++]) << 8) | ((0xff & buf[position++]) << 16);\n    }\n    /**\n     * Return 24-bit unsigned int from buffer. (big-endian)\n     * \n     * @see mysql-5.6.10/include/myisampack.h - mi_usint3korr\n     */\n<fim_suffix>    public final int getBeUint24(final int pos) {\n        final int position = origin + pos;\n        if (pos + 2 >= limit || pos < 0) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                            + (pos < 0 ? pos : (pos + 2)));\n        byte[] buf = buffer;\n        return (0xff & buf[position + 2]) | ((0xff & buf[position + 1]) << 8) | ((0xff & buf[position]) << 16);\n    }<fim_middle>// function below has no smell\n"}