{"text": "<fim_prefix>                tableData = table.getDataAt(i);\n                assert tableData instanceof CharSXPWrapper;\n                if (RRuntime.isNA(((CharSXPWrapper) tableData).getContents())) {\n                    foundProfile.enter();\n                    return i + 1;\n                }\n            }\n        } else {\n            for (int i = 0; i < length; i++) {\n                tableData = table.getDataAt(i);\n                assert tableData instanceof CharSXPWrapper;\n                if (element.equals(((CharSXPWrapper) tableData).getContents())) {\n                    foundProfile.enter();\n                    return i + 1;\n                }\n            }\n        }\n        notFoundProfile.enter();\n        return nomatch;\n    }\n    @Specialization(guards = {\"x.getLength() != 1\", \"isCharSXP(x)\", \"isCharSXP(table)\"})\n    @CompilerDirectives.TruffleBoundary\n    protected RIntVector match(RList x, RList table, int nomatch) {\n        int[] result = initResult(x.getLength(), nomatch);\n        Object element;\n        boolean matchAll = true;\n        NonRecursiveHashMapCharacter hashTable;\n        if (bigTableProfile.profile(table.getLength() > (x.getLength() * TABLE_SIZE_FACTOR))) {\n            hashTable = new NonRecursiveHashMapCharacter(x.getLength());\n            NonRecursiveHashSetCharacter hashSet = new NonRecursiveHashSetCharacter(x.getLength());\n            for (int i = 0; i < result.length; i++) {\n                element = x.getDataAt(i);\n                assert element instanceof CharSXPWrapper;\n                hashSet.add(((CharSXPWrapper) element).getContents());\n            }\n            for (int i = table.getLength() - 1; i >= 0; i--) {\n                element = table.getDataAt(i);\n                assert element instanceof CharSXPWrapper;\n                String val = ((CharSXPWrapper) element).getContents();\n                if (hashSet.contains(val)) {\n                    hashTable.put(val, i);\n                }\n            }\n        } else {\n            hashTable = new NonRecursiveHashMapCharacter(table.getLength());\n            for (int i = table.getLength() - 1; i >= 0; i--) {\n                element = table.getDataAt(i);\n                assert element instanceof CharSXPWrapper;\n                hashTable.put(((CharSXPWrapper) element).getContents(), i);\n            }\n        }\n        for (int i = 0; i < result.length; i++) {\n            element = x.getDataAt(i);\n            assert element instanceof CharSXPWrapper;\n            String xx = ((CharSXPWrapper) element).getContents();\n            int index = hashTable.get(xx);\n            if (index != -1) {\n                result[i] = index + 1;\n            } else {\n                matchAll = false;\n            }\n        }\n        return RDataFactory.createIntVector(result, setCompleteState(matchAll, nomatch));\n    }\n    @Specialization\n    protected RIntVector match(RAbstractDoubleVector x, RAbstractComplexVector table, int nomatch,\n                    @Cached(\"createBinaryProfile()\") ConditionProfile isNAProfile) {\n        return match((RAbstractComplexVector) x.castSafe(RType.Complex, isNAProfile), table, nomatch);\n    }\n    @Specialization\n    protected RIntVector match(RAbstractLogicalVector x, RAbstractIntVector table, int nomatch,\n                    @Cached(\"createBinaryProfile()\") ConditionProfile isNAProfile) {\n        return match((RAbstractIntVector) x.castSafe(RType.Integer, isNAProfile), table, nomatch);\n    }\n    @Specialization\n    protected RIntVector match(RAbstractLogicalVector x, RAbstractDoubleVector table, int nomatch,\n                    @Cached(\"createBinaryProfile()\") ConditionProfile isNAProfile) {\n        return match((RAbstractDoubleVector) x.castSafe(RType.Double, isNAProfile), table, nomatch);\n    }\n    @Specialization\n    protected RIntVector match(RAbstractLogicalVector x, RAbstractComplexVector table, int nomatch,\n                    @Cached(\"createBinaryProfile()\") ConditionProfile isNAProfile) {\n        return match((RAbstractComplexVector) x.castSafe(RType.Complex, isNAProfile), table, nomatch);\n    }\n    @Specialization\n    protected RIntVector match(RAbstractLogicalVector x, RAbstractStringVector table, int nomatch,\n                    @Cached(\"createBinaryProfile()\") ConditionProfile isNAProfile) {\n        return match((RAbstractStringVector) x.castSafe(RType.Character, isNAProfile), table, nomatch);\n    }\n    @Specialization\n    protected RIntVector match(RAbstractIntVector x, RAbstractComplexVector table, int nomatch,\n                    @Cached(\"createBinaryProfile()\") ConditionProfile isNAProfile) {\n        return match((RAbstractComplexVector) x.castSafe(RType.Complex, isNAProfile), table, nomatch);\n    }\n    @Specialization(guards = \"x.getLength() == 1\")\n    @CompilerDirectives.TruffleBoundary\n    protected int matchSizeOne(RAbstractRawVector x, RAbstractRawVector table, int nomatch,\n                    @Cached(\"create()\") BranchProfile foundProfile,\n                    @Cached(\"create()\") BranchProfile notFoundProfile) {\n        byte element = x.getRawDataAt(0);\n        int length = table.getLength();\n        for (int i = 0; i < length; i++) {\n            if (element == table.getRawDataAt(i)) {\n                foundProfile.enter();\n                return i + 1;\n            }\n        }\n        notFoundProfile.enter();\n        return nomatch;\n    }\n    @Specialization(guards = \"x.getLength() != 1\")\n    protected RIntVector match(RAbstractRawVector x, RAbstractRawVector table, int nomatch) {\n        int[] result = initResult(x.getLength(), nomatch);\n        boolean matchAll = true;\n        NonRecursiveHashMapRaw hashTable;\n        if (bigTableProfile.profile(table.getLength() > (x.getLength() * TABLE_SIZE_FACTOR))) {\n            hashTable = new NonRecursiveHashMapRaw();\n            NonRecursiveHashSetRaw hashSet = new NonRecursiveHashSetRaw();\n            for (int i = 0; i < result.length; i++) {\n                hashSet.add(x.getRawDataAt(i));\n            }\n            for (int i = table.getLength() - 1; i >= 0; i--) {\n                byte val = table.getRawDataAt(i);\n                if (hashSet.contains(val)) {\n                    hashTable.put(val, i);\n                }\n            }\n        } else {\n            hashTable = new NonRecursiveHashMapRaw();\n            for (int i = table.getLength() - 1; i >= 0; i--) {\n                hashTable.put(table.getRawDataAt(i), i);\n            }\n        }\n        for (int i = 0; i < result.length; i++) {\n            byte xx = x.getRawDataAt(i);\n            int index = hashTable.get(xx);\n            if (index != -1) {\n                result[i] = index + 1;\n            } else {\n                matchAll = false;\n            }\n        }\n        return RDataFactory.createIntVector(result, setCompleteState(matchAll, nomatch));\n    }\n    @Specialization\n    protected RIntVector match(RAbstractRawVector x, RAbstractIntVector table, int nomatch,\n                    @Cached(\"createBinaryProfile()\") ConditionProfile isNAProfile) {\n        return match((RAbstractStringVector) x.castSafe(RType.Character, isNAProfile), (RAbstractStringVector) table.castSafe(RType.Character, isNAProfile), nomatch);\n    }\n    @Specialization\n    protected RIntVector match(RAbstractRawVector x, RAbstractDoubleVector table, int nomatch,\n                    @Cached(\"createBinaryProfile()\") ConditionProfile isNAProfile) {\n        return match((RAbstractStringVector) x.castSafe(RType.Character, isNAProfile), (RAbstractStringVector) table.castSafe(RType.Character, isNAProfile), nomatch);\n    }\n    @Specialization\n    protected RIntVector match(RAbstractRawVector x, RAbstractStringVector table, int nomatch,\n                    @Cached(\"createBinaryProfile()\") ConditionProfile isNAProfile) {\n        return match((RAbstractStringVector) x.castSafe(RType.Character, isNAProfile), table, nomatch);\n    }\n    @Specialization\n    protected RIntVector match(RAbstractRawVector x, @SuppressWarnings(\"unused\") RAbstractLogicalVector table, @SuppressWarnings(\"unused\") int nomatch) {\n        return RDataFactory.createIntVector(x.getLength(), true);\n    }\n<fim_suffix>    @Specialization\n    protected RIntVector match(RAbstractRawVector x, @SuppressWarnings(\"unused\") RAbstractComplexVector table, @SuppressWarnings(\"unused\") int nomatch) {\n        return RDataFactory.createIntVector(x.getLength(), true);\n    }<fim_middle>// function below has no smell\n"}