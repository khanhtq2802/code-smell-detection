{"text": "<fim_prefix>/*******************************************************************************\n* Copyright (c) 2009-2011 Luaj.org. All rights reserved.\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n* \n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n* THE SOFTWARE.\n******************************************************************************/\npackage org.luaj.vm2.lib;\n\nimport org.luaj.vm2.LuaValue;\nimport org.luaj.vm2.Varargs;\n\n/** Abstract base class for Java function implementations that take one argument and \n * return one value. \n * <p>\n * Subclasses need only implement {@link LuaValue#call(LuaValue)} to complete this class, \n * simplifying development.  \n * All other uses of {@link #call()}, {@link #invoke(Varargs)},etc, \n * are routed through this method by this class, \n * dropping or extending arguments with {@code nil} values as required.\n * <p>\n * If more than one argument are required, or no arguments are required, \n * or variable argument or variable return values, \n * then use one of the related function\n * {@link ZeroArgFunction}, {@link TwoArgFunction}, {@link ThreeArgFunction}, or {@link VarArgFunction}.\n * <p>\n * See {@link LibFunction} for more information on implementation libraries and library functions.\n * @see #call(LuaValue)\n * @see LibFunction\n * @see ZeroArgFunction\n * @see TwoArgFunction\n * @see ThreeArgFunction\n * @see VarArgFunction\n */\n<fim_suffix>abstract public class OneArgFunction extends LibFunction {\n\n\tabstract public LuaValue call(LuaValue arg);\n\t\n\t/** Default constructor */\n\tpublic OneArgFunction() {\n\t}\n\t\t\n\tpublic final LuaValue call() {\n\t\treturn call(NIL);\n\t}\n\n\tpublic final LuaValue call(LuaValue arg1, LuaValue arg2) {\n\t\treturn call(arg1);\n\t}\n\n\tpublic LuaValue call(LuaValue arg1, LuaValue arg2, LuaValue arg3) {\n\t\treturn call(arg1);\n\t}\n\n\tpublic Varargs invoke(Varargs varargs) {\n\t\treturn call(varargs.arg1());\n\t}\n} <fim_middle>// class below has no smell\n"}