{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.io;\n\nimport java.io.IOException;\nimport java.io.Serializable;\n\n/**\n * An {@link IOException} decorator that adds a serializable tag to the\n * wrapped exception. Both the tag and the original exception can be used\n * to determine further processing when this exception is caught.\n *\n * @since 2.0\n */\n@SuppressWarnings(\"deprecation\") // needs to extend deprecated IOExceptionWithCause to preserve binary compatibility\npublic class TaggedIOException extends IOExceptionWithCause {\n\n    /**\n     * Generated serial version UID.\n     */\n    private static final long serialVersionUID = -6994123481142850163L;\n\n    /**\n     * Checks whether the given throwable is tagged with the given tag.\n     * <p>\n     * This check can only succeed if the throwable is a\n     * {@link TaggedIOException} and the tag is {@link Serializable}, but\n     * the argument types are intentionally more generic to make it easier\n     * to use this method without type casts.\n     * <p>\n     * A typical use for this method is in a <code>catch</code> block to\n     * determine how a caught exception should be handled:\n     * <pre>\n     * Serializable tag = ...;\n     * try {\n     *     ...;\n     * } catch (Throwable t) {\n     *     if (TaggedIOExcepton.isTaggedWith(t, tag)) {\n     *         // special processing for tagged exception\n     *     } else {\n     *         // handling of other kinds of exceptions\n     *     }\n     * }\n     * </pre>\n     *\n     * @param throwable The Throwable object to check\n     * @param tag tag object\n     * @return {@code true} if the throwable has the specified tag,\n     * otherwise {@code false}\n     */\n    public static boolean isTaggedWith(final Throwable throwable, final Object tag) {\n        return tag != null\n            && throwable instanceof TaggedIOException\n            && tag.equals(((TaggedIOException) throwable).tag);\n    }\n\n    /**\n     * Throws the original {@link IOException} if the given throwable is\n     * a {@link TaggedIOException} decorator the given tag. Does nothing\n     * if the given throwable is of a different type or if it is tagged\n     * with some other tag.\n     * <p>\n     * This method is typically used in a <code>catch</code> block to\n     * selectively rethrow tagged exceptions.\n     * <pre>\n     * Serializable tag = ...;\n     * try {\n     *     ...;\n     * } catch (Throwable t) {\n     *     TaggedIOExcepton.throwCauseIfTagged(t, tag);\n     *     // handle other kinds of exceptions\n     * }\n     * </pre>\n     *\n     * @param throwable an exception\n     * @param tag tag object\n     * @throws IOException original exception from the tagged decorator, if any\n     */\n<fim_suffix>    public static void throwCauseIfTaggedWith(final Throwable throwable, final Object tag)\n            throws IOException {\n        if (isTaggedWith(throwable, tag)) {\n            throw ((TaggedIOException) throwable).getCause();\n        }\n    }\n\n    /**\n     * The tag of this exception.\n     */\n    private final Serializable tag;\n\n    /**\n     * Creates a tagged wrapper for the given exception.\n     *\n     * @param original the exception to be tagged\n     * @param tag tag of this exception\n     */\n    public TaggedIOException(final IOException original, final Serializable tag) {\n        super(original.getMessage(), original);\n        this.tag = tag;\n    }\n\n    /**\n     * Returns the serializable tag object.\n     *\n     * @return tag object\n     */\n    public Serializable getTag() {\n        return tag;\n    }\n\n    /**\n     * Returns the wrapped exception. The only difference to the overridden\n     * {@link Throwable#getCause()} method is the narrower return type.\n     *\n     * @return wrapped exception\n     */\n    @Override\n    public IOException getCause() {\n        return (IOException) super.getCause();\n    }\n\n}<fim_middle>// function below has no smell\n"}