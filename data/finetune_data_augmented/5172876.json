{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.kylin.source.jdbc.extensible;\n\n\nimport java.io.IOException;\n\nimport org.apache.kylin.common.KylinConfig;\nimport org.apache.kylin.engine.mr.IMRInput;\nimport org.apache.kylin.engine.spark.ISparkInput;\nimport org.apache.kylin.metadata.model.IBuildable;\nimport org.apache.kylin.metadata.model.TableDesc;\nimport org.apache.kylin.sdk.datasource.framework.JdbcConnector;\nimport org.apache.kylin.sdk.datasource.framework.SourceConnectorFactory;\nimport org.apache.kylin.source.IReadableTable;\nimport org.apache.kylin.source.ISampleDataDeployer;\nimport org.apache.kylin.source.ISource;\nimport org.apache.kylin.source.ISourceMetadataExplorer;\nimport org.apache.kylin.source.SourcePartition;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n<fim_suffix>public class JdbcSource implements ISource {\n    private static final Logger logger = LoggerFactory.getLogger(JdbcSource.class);\n\n    public static final int SOURCE_ID = 16;\n\n    private JdbcConnector dataSource;\n\n    //used by reflection\n    public JdbcSource(KylinConfig config) {\n        try {\n            dataSource = SourceConnectorFactory.getJdbcConnector(config);\n        } catch (Throwable e) {\n            logger.warn(\"DataSource cannot be connected. This may not be required in a MapReduce job.\", e);\n        }\n    }\n\n    @Override\n    public ISourceMetadataExplorer getSourceMetadataExplorer() {\n        return new JdbcExplorer(dataSource);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <I> I adaptToBuildEngine(Class<I> engineInterface) {\n        if (engineInterface == IMRInput.class) {\n            return (I) new JdbcHiveMRInput(dataSource);\n        } else if (engineInterface == ISparkInput.class) {\n            return (I) new JdbcHiveSparkInput(dataSource);\n        } else {\n            throw new RuntimeException(\"Cannot adapt to \" + engineInterface);\n        }\n    }\n\n    @Override\n    public IReadableTable createReadableTable(TableDesc tableDesc, String uuid) {\n        return new JdbcTable(dataSource, tableDesc);\n    }\n\n    @Override\n    public SourcePartition enrichSourcePartitionBeforeBuild(IBuildable buildable, SourcePartition srcPartition) {\n        SourcePartition result = SourcePartition.getCopyOf(srcPartition);\n        result.setSegRange(null);\n        return result;\n    }\n\n    @Override\n    public ISampleDataDeployer getSampleDataDeployer() {\n        return new JdbcExplorer(dataSource);\n    }\n\n    @Override\n    public void unloadTable(String tableName, String project) throws IOException{\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (dataSource != null)\n            dataSource.close();\n    }\n}<fim_middle>// class below has no smell\n"}