{"text": "<fim_prefix>        finally\n        {\n            actionStorageFile = null;\n            actionToStorageFile = null;\n        }\n    }\n    private synchronized String[] privList(final StorageFile file)\n    {\n        actionCode = STORAGE_FILE_LIST_DIRECTORY_ACTION;\n        actionStorageFile = file;\n        try\n        {\n            return (String[]) AccessController.doPrivileged( this);\n        }\n        catch( PrivilegedActionException pae) { return null;} // does not throw an exception\n        finally\n        {\n            actionStorageFile = null;\n        }\n    }\n    private synchronized String privGetCanonicalPath(final StorageFile file)\n    {\n        actionCode = STORAGE_FILE_GET_CANONICALPATH_ACTION;\n        actionStorageFile = file;\n        try\n        {\n            return (String) AccessController.doPrivileged( this);\n        }\n        catch( PrivilegedActionException pae) {\n            return null;\n        } // does not throw an exception\n        catch(SecurityException se) {\n            // there are no permission to get canonical path \n            // just return null.\n            return null;\n        }\n        finally\n        {\n            actionStorageFile = null;\n        }\n    }\n    private synchronized String privGetCanonicalPath(final File file)\n    {\n        actionCode = REGULAR_FILE_GET_CANONICALPATH_ACTION;\n        actionRegularFile = file;\n        try\n        {\n            return (String) AccessController.doPrivileged( this);\n        }\n        catch( PrivilegedActionException pae) {\n            return null;\n        } // does not throw an exception\n        catch(SecurityException se) { \n            // there are no permission to get canonical path \n            // just return null.\n            return null;\n        }\n        finally\n        {\n            actionRegularFile = null;\n        }\n    }\n    // PrivilegedExceptionAction method\n    public final Object run() throws IOException, StandardException\n    {\n        switch(actionCode)\n        {\n        case FILE_WRITER_ACTION:\n            // SECURITY PERMISSION - MP1\n            return new OutputStreamWriter( actionStorageFile.getOutputStream( actionAppend));\n        case REGULAR_FILE_EXISTS_ACTION:\n            return actionRegularFile.exists();\n        case STORAGE_FILE_EXISTS_ACTION:\n            return actionStorageFile.exists();\n        case REGULAR_FILE_DELETE_ACTION:\n            return actionRegularFile.delete();\n        case STORAGE_FILE_DELETE_ACTION:\n            return actionStorageFile.delete();\n        case REGULAR_FILE_MKDIRS_ACTION:\n            // SECURITY PERMISSION - OP4\n            boolean created = actionRegularFile.mkdirs();\n            FileUtil.limitAccessToOwner(actionRegularFile);\n            return created;\n        case REGULAR_FILE_IS_DIRECTORY_ACTION:\n            // SECURITY PERMISSION - MP1\n            return actionRegularFile.isDirectory();\n        case REGULAR_FILE_REMOVE_DIRECTORY_ACTION:\n            // SECURITY PERMISSION - MP1, OP5\n            return FileUtil.removeDirectory(actionRegularFile);\n        case REGULAR_FILE_RENAME_TO_ACTION:\n            // SECURITY PERMISSION - OP4\n            return actionRegularFile.renameTo(actionRegularFile2);\n        case COPY_STORAGE_DIRECTORY_TO_REGULAR_ACTION:\n            // SECURITY PERMISSION - MP1, OP4\n            return FileUtil.copyDirectory(\n                    storageFactory, actionStorageFile, actionRegularFile,\n                    actionBuffer, actionFilter, actionCopySubDirs);\n        case COPY_REGULAR_DIRECTORY_TO_STORAGE_ACTION:\n            // SECURITY PERMISSION - MP1, OP4\n            return FileUtil.copyDirectory(\n                    (WritableStorageFactory) storageFactory, actionRegularFile,\n                    actionStorageFile, actionBuffer, actionFilter);\n        case COPY_REGULAR_FILE_TO_STORAGE_ACTION:\n            // SECURITY PERMISSION - MP1, OP4\n            return FileUtil.copyFile((WritableStorageFactory) storageFactory,\n                    actionRegularFile, actionStorageFile);\n        case REGULAR_FILE_LIST_DIRECTORY_ACTION:\n            // SECURITY PERMISSION - MP1\n            return (String[])(actionRegularFile.list());\n        case STORAGE_FILE_LIST_DIRECTORY_ACTION:\n            // SECURITY PERMISSION - MP1\n            return (String[])(actionStorageFile.list());\n        case COPY_STORAGE_FILE_TO_REGULAR_ACTION:\n            // SECURITY PERMISSION - MP1, OP4\n            return FileUtil.copyFile((WritableStorageFactory) storageFactory,\n                    actionStorageFile, actionRegularFile);\n        case COPY_STORAGE_FILE_TO_STORAGE_ACTION:\n            // SECURITY PERMISSION - MP1, OP4\n            return FileUtil.copyFile((WritableStorageFactory) storageFactory,\n                    actionStorageFile, actionToStorageFile);\n        case REGULAR_FILE_GET_CANONICALPATH_ACTION:\n            // SECURITY PERMISSION - MP1\n            return (String)(actionRegularFile.getCanonicalPath());\n        case STORAGE_FILE_GET_CANONICALPATH_ACTION:\n            // SECURITY PERMISSION - MP1\n            return (String)(actionStorageFile.getCanonicalPath());\n        case README_FILE_OUTPUTSTREAM_WRITER_ACTION:\n        \treturn(new OutputStreamWriter(actionStorageFile.getOutputStream(),\"UTF8\"));\n        }\n        return null;\n    } // end of run\n    /** Tells if the attribute/property has been specified. */\n    private static boolean isSet(Properties p, String attribute) {\n        return p.getProperty(attribute) != null;\n    }\n    /** Tells if the attribute/property has been set to {@code true}. */\n    private static boolean isTrue(Properties p, String attribute) {\n        return Boolean.valueOf(p.getProperty(attribute)).booleanValue();\n    }\n    /** @see RawStoreFactory#createDataWarningFile */\n    public void createDataWarningFile() throws StandardException {\n        StorageFile fileReadMe = storageFactory.newStorageFile(\n            \"seg0\",\n            PersistentService.DB_README_FILE_NAME);\n        OutputStreamWriter osw = null;\n        if (!privExists(fileReadMe)) {\n            try {\n                osw = privGetOutputStreamWriter(fileReadMe);\n                osw.write(MessageService.getTextMessage(\n                    MessageId.README_AT_SEG_LEVEL));\n            }\n            catch (IOException ioe)\n            {\n            }\n            finally\n            {\n                if (osw != null)\n                {\n                    try\n                    {\n                        osw.close();\n                    }\n                    catch (IOException ioe)\n                    {\n                        // Ignore exception on close\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Privileged lookup of the ContextService. Private so that user code\n     * can't call this entry point.\n     */\n    private static  ContextService    getContextService()\n    {\n        if ( System.getSecurityManager() == null )\n        {\n            return ContextService.getFactory();\n        }\n        else\n        {\n            return AccessController.doPrivileged\n                (\n                 new PrivilegedAction<ContextService>()\n                 {\n                     public ContextService run()\n                     {\n                         return ContextService.getFactory();\n                     }\n                 }\n                 );\n        }\n    }\n    /**\n     * Privileged lookup of a Context. Must be private so that user code\n     * can't call this entry point.\n     */\n    private  static  Context    getContextOrNull( final String contextID )\n    {\n        return AccessController.doPrivileged\n            (\n             new PrivilegedAction<Context>()\n             {\n                 public Context run()\n                 {\n                     return ContextService.getContextOrNull( contextID );\n                 }\n             }\n             );\n    }\n    /**\n     * Privileged Monitor lookup. Must be private so that user code\n     * can't call this entry point.\n     */\n    private  static  ModuleFactory  getMonitor()\n    {\n        return AccessController.doPrivileged\n            (\n             new PrivilegedAction<ModuleFactory>()\n             {\n                 public ModuleFactory run()\n                 {\n                     return Monitor.getMonitor();\n                 }\n             }\n             );\n    }\n    /**\n     * Privileged service name lookup. Must be private so that user code\n     * can't call this entry point.\n     */\n    private  static  String getServiceName( final Object serviceModule )\n    {\n        return AccessController.doPrivileged\n            (\n             new PrivilegedAction<String>()\n             {\n                 public String run()\n                 {\n                     return Monitor.getServiceName( serviceModule );\n                 }\n             }\n             );\n    }\n    /**\n     * Privileged startup. Must be private so that user code\n     * can't call this entry point.\n     */\n    private  static  Object  startSystemModule( final String factoryInterface )\n        throws StandardException\n    {\n        try {\n            return AccessController.doPrivileged\n                (\n                 new PrivilegedExceptionAction<Object>()\n                 {\n                     public Object run()\n                         throws StandardException\n                     {\n                         return Monitor.startSystemModule( factoryInterface );\n                     }\n                 }\n                 );\n        } catch (PrivilegedActionException pae)\n        {\n            throw StandardException.plainWrapException( pae );\n        }\n    }\n    /**\n     * Privileged startup. Must be private so that user code\n     * can't call this entry point.\n     */\n<fim_suffix>    private  static  Object bootServiceModule\n        (\n         final boolean create, final Object serviceModule,\n         final String factoryInterface, final Properties properties\n         )\n        throws StandardException\n    {\n        try {\n            return AccessController.doPrivileged\n                (\n                 new PrivilegedExceptionAction<Object>()\n                 {\n                     public Object run()\n                         throws StandardException\n                     {\n                         return Monitor.bootServiceModule( create, serviceModule, factoryInterface, properties );\n                     }\n                 }\n                 );\n        } catch (PrivilegedActionException pae)\n        {\n            throw StandardException.plainWrapException( pae );\n        }\n    }<fim_middle>// function below has no smell\n"}