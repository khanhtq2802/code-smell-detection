{"text": "<fim_prefix>            pushFollow(FOLLOW_2);\n            norm1_AnnotatedExpression__Group_1_0__2();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_AnnotatedExpression__Group_1_0__1__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1()); \n            }\n            match(input,Class,FOLLOW_2); if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_AnnotatedExpression__Group_1_0__2() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_17);\n            norm1_AnnotatedExpression__Group_1_0__2__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            pushFollow(FOLLOW_2);\n            norm1_AnnotatedExpression__Group_1_0__3();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_AnnotatedExpression__Group_1_0__2__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2()); \n            }\n            int alt240=2;\n            int LA240_0 = input.LA(1);\n            if ( ((LA240_0>=Intersection && LA240_0<=Constructor)||(LA240_0>=Promisify && LA240_0<=Abstract)||LA240_0==External||(LA240_0>=Private && LA240_0<=Project)||LA240_0==Public||LA240_0==Static||LA240_0==Target||(LA240_0>=Async && LA240_0<=Await)||LA240_0==Union||LA240_0==This||LA240_0==From||LA240_0==Type||(LA240_0>=Get && LA240_0<=Let)||(LA240_0>=Out && LA240_0<=Set)||LA240_0==As||LA240_0==Of||LA240_0==RULE_IDENTIFIER) ) {\n                alt240=1;\n            }\n            else if ( (LA240_0==Implements) ) {\n                int LA240_2 = input.LA(2);\n                if ( (LA240_2==Implements||LA240_2==Extends||LA240_2==LeftCurlyBracket) ) {\n                    alt240=1;\n                }\n            }\n            switch (alt240) {\n                case 1 :\n                    {\n                    pushFollow(FOLLOW_2);\n                    norm1_AnnotatedExpression__NameAssignment_1_0_2();\n                    state._fsp--;\n                    if (state.failed) return ;\n                    }\n                    break;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_AnnotatedExpression__Group_1_0__3() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_17);\n            norm1_AnnotatedExpression__Group_1_0__3__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            pushFollow(FOLLOW_2);\n            norm1_AnnotatedExpression__Group_1_0__4();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_AnnotatedExpression__Group_1_0__3__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3()); \n            }\n            int alt241=2;\n            int LA241_0 = input.LA(1);\n            if ( (LA241_0==Implements||LA241_0==Extends) ) {\n                alt241=1;\n            }\n            switch (alt241) {\n                case 1 :\n                    {\n                    pushFollow(FOLLOW_2);\n                    norm1_ClassExtendsImplements();\n                    state._fsp--;\n                    if (state.failed) return ;\n                    }\n                    break;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_AnnotatedExpression__Group_1_0__4() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_2);\n            norm1_AnnotatedExpression__Group_1_0__4__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_AnnotatedExpression__Group_1_0__4__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); \n            }\n            pushFollow(FOLLOW_2);\n            norm1_Members();\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_AnnotatedExpression__Group_1_1__0() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_50);\n            norm1_AnnotatedExpression__Group_1_1__0__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            pushFollow(FOLLOW_2);\n            norm1_AnnotatedExpression__Group_1_1__1();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n<fim_suffix>    public final void norm1_AnnotatedExpression__Group_1_1__0__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0()); \n            }\n            {\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0()); \n            }\n            }\n            }\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }<fim_middle>// function below has no smell\n"}