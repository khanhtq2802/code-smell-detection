{"text": "<fim_prefix>// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See License.txt in the repository root.\n\npackage com.microsoft.tfs.client.common.ui.dialogs.vc.candidates;\n\nimport org.eclipse.jface.viewers.IStructuredSelection;\n\nimport com.microsoft.tfs.client.common.framework.command.ICommandExecutor;\nimport com.microsoft.tfs.client.common.ui.Messages;\nimport com.microsoft.tfs.client.common.ui.controls.vc.changes.ChangeItem;\nimport com.microsoft.tfs.client.common.ui.dialogs.vc.PromoteCandidateChangesDialog;\nimport com.microsoft.tfs.client.common.ui.framework.command.UICommandExecutorFactory;\nimport com.microsoft.tfs.client.common.ui.framework.helper.SelectionUtils;\nimport com.microsoft.tfs.core.clients.versioncontrol.soapextensions.ChangeType;\n\npublic class RestoreAction extends CandidateAction {\n    public RestoreAction(final PromoteCandidateChangesDialog dialog) {\n        super(dialog);\n        // Text is set when enablement changes\n    }\n\n    @Override\n    public void doRun() {\n        final ChangeItem[] changes = (ChangeItem[]) SelectionUtils.selectionToArray(getSelection(), ChangeItem.class);\n\n        final RestoreItemsCommand command = new RestoreItemsCommand(repository.getWorkspace(), changes);\n        final ICommandExecutor executor = UICommandExecutorFactory.newUICommandExecutor(dialog.getShell());\n        executor.execute(command);\n\n        dialog.refreshCandidateTable(changes);\n    }\n\n    @Override\n    protected boolean computeEnablement(final IStructuredSelection selection) {\n        final ChangeItem[] changes = (ChangeItem[]) SelectionUtils.selectionToArray(getSelection(), ChangeItem.class);\n\n        if (changes.length == 1) {\n            setText(Messages.getString(\"RestoreAction.RestoreActionSingleItemText\")); //$NON-NLS-1$\n        } else {\n            setText(Messages.getString(\"RestoreAction.RestoreActionMultipleItemsText\")); //$NON-NLS-1$\n        }\n\n        // Ensure all are deletes\n        boolean nonDelete = false;\n        for (final ChangeItem change : changes) {\n            if (!change.getChangeType().contains(ChangeType.DELETE)) {\n                nonDelete = true;\n                break;\n            }\n        }\n\n        return !nonDelete;\n    }\n\n<fim_suffix>    public boolean isVisible(final IStructuredSelection selection) {\n        final ChangeItem[] changes = (ChangeItem[]) SelectionUtils.selectionToArray(getSelection(), ChangeItem.class);\n\n        // Enable for any delete\n        for (final ChangeItem change : changes) {\n            if (change.getChangeType().contains(ChangeType.DELETE)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}<fim_middle>// function below has no smell\n"}