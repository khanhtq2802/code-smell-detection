{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.om.types.EnumDeserializer;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.api.exceptions.SourceLocation;\nimport org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference;\n\n<fim_suffix>public class SerializableGlobalSumAggregateFunction extends AbstractSerializableSumAggregateFunction {\n\n    public SerializableGlobalSumAggregateFunction(IScalarEvaluatorFactory[] args, IHyracksTaskContext context,\n            SourceLocation sourceLoc) throws HyracksDataException {\n        super(args, context, sourceLoc);\n    }\n\n    // Called for each incoming tuple\n    @Override\n    public void step(IFrameTupleReference tuple, byte[] state, int start, int len) throws HyracksDataException {\n        super.step(tuple, state, start, len);\n    }\n\n    // Finish calculation\n    @Override\n    public void finish(byte[] state, int start, int len, DataOutput out) throws HyracksDataException {\n        super.finish(state, start, len, out);\n    }\n\n    // Is skip\n    @Override\n    protected boolean skipStep(byte[] state, int start) {\n        ATypeTag aggType = EnumDeserializer.ATYPETAGDESERIALIZER.deserialize(state[start + AGG_TYPE_OFFSET]);\n        return aggType == ATypeTag.NULL;\n    }\n\n    // Handle NULL step\n    @Override\n    protected void processNull(byte[] state, int start) {\n        state[start + AGG_TYPE_OFFSET] = ATypeTag.SERIALIZED_NULL_TYPE_TAG;\n    }\n\n    // Handle SYSTEM_NULL step\n    @Override\n    protected void processSystemNull() {\n        // Do nothing\n    }\n\n    // Handle NULL finish\n    @Override\n    protected void finishNull(DataOutput out) throws IOException {\n        out.writeByte(ATypeTag.SERIALIZED_NULL_TYPE_TAG);\n    }\n\n    // Handle SYSTEM_NULL finish\n    @Override\n    protected void finishSystemNull(DataOutput out) throws IOException {\n        out.writeByte(ATypeTag.SERIALIZED_NULL_TYPE_TAG);\n    }\n}<fim_middle>// class below has no smell\n"}