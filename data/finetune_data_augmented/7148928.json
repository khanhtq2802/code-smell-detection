{"text": "<fim_prefix>\n<fim_suffix>public class DockerRunDialog extends AzureTitleAreaDialogWrapper {\n    private final String basePath;\n    // TODO: move to util\n    private static final String MISSING_ARTIFACT = \"A web archive (.war) artifact has not been configured.\";\n    private static final String MISSING_IMAGE_WITH_TAG = \"Please specify Image and Tag.\";\n    private static final String INVALID_DOCKER_FILE = \"Please specify a valid docker file.\";\n    private static final String INVALID_CERT_PATH = \"Please specify a valid certificate path.\";\n    private static final String INVALID_ARTIFACT_FILE = \"The artifact name %s is invalid. \"\n            + \"An artifact name may contain only the ASCII letters 'a' through 'z' (case-insensitive), \"\n            + \"and the digits '0' through '9', '.', '-' and '_'.\";\n    private static final String REPO_LENGTH_INVALID = \"The length of repository name must be at least one character \"\n            + \"and less than 256 characters\";\n    private static final String CANNOT_END_WITH_SLASH = \"The repository name should not end with '/'\";\n    private static final String REPO_COMPONENT_INVALID = \"Invalid repository component: %s, should follow: %s\";\n    private static final String TAG_LENGTH_INVALID = \"The length of tag name must be no more than 128 characters\";\n    private static final String TAG_INVALID = \"Invalid tag: %s, should follow: %s\";\n    private static final String MISSING_MODEL = \"Configuration data model not initialized.\";\n    private static final String ARTIFACT_NAME_REGEX = \"^[.A-Za-z0-9_-]+\\\\.(war|jar)$\";\n    private static final String REPO_COMPONENTS_REGEX = \"[a-z0-9]+(?:[._-][a-z0-9]+)*\";\n    private static final String TAG_REGEX = \"^[\\\\w]+[\\\\w.-]*$\";\n    private static final int TAG_LENGTH = 128;\n    private static final int REPO_LENGTH = 255;\n    private static final String IMAGE_NAME_PREFIX = \"localimage\";\n    private static final String DEFAULT_TAG_NAME = \"latest\";\n    private static final String SELECT_DOCKER_FILE = \"Browse...\";\n    private DockerHostRunSetting dataModel;\n    private Text txtDockerHost;\n    private Text txtImageName;\n    private Text txtTagName;\n    private Button btnTlsEnabled;\n    private FileSelector dockerFileSelector;\n    private FileSelector certPathSelector;\n    /**\n     * Create the dialog.\n     */\n    public DockerRunDialog(Shell parentShell, String basePath, String targetPath) {\n        super(parentShell);\n        setShellStyle(SWT.RESIZE | SWT.TITLE);\n        this.basePath = basePath;\n        dataModel = new DockerHostRunSetting();\n        dataModel.setTargetPath(targetPath);\n        dataModel.setTargetName(FilenameUtils.getName(targetPath));\n    }\n    /**\n     * Create contents of the dialog.\n     */\n    @Override\n    protected Control createDialogArea(Composite parent) {\n        Composite area = (Composite) super.createDialogArea(parent);\n        Composite composite = new Composite(area, SWT.NONE);\n        composite.setLayout(new GridLayout(5, false));\n        composite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));\n        dockerFileSelector = new FileSelector(composite, SWT.NONE, false, SELECT_DOCKER_FILE, basePath, \"Docker File\");\n        dockerFileSelector.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 5, 1));\n        Label lblDockerHost = new Label(composite, SWT.NONE);\n        lblDockerHost.setText(\"Docker Host\");\n        txtDockerHost = new Text(composite, SWT.BORDER);\n        txtDockerHost.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 4, 1));\n        btnTlsEnabled = new Button(composite, SWT.CHECK);\n        btnTlsEnabled.addListener(SWT.Selection, event -> onBtnTlsEnabledSelection());\n        btnTlsEnabled.setText(\"Enable TLS\");\n        certPathSelector = new FileSelector(composite, SWT.NONE, true, \"Browse...\", null, \"Cert Path\");\n        certPathSelector.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 4, 1));\n        Label lblImage = new Label(composite, SWT.NONE);\n        lblImage.setText(\"Image Name\");\n        txtImageName = new Text(composite, SWT.BORDER);\n        txtImageName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));\n        Label lblTagName = new Label(composite, SWT.NONE);\n        lblTagName.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));\n        lblTagName.setText(\"Tag Name\");\n        txtTagName = new Text(composite, SWT.BORDER);\n        txtTagName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));\n        setTitle(\"Run on Docker Host\");\n        setMessage(\"\"); // TOOD: specify the message.\n        reset();\n        return area;\n    }\n    private void reset() {\n        // set default dockerHost value\n        if (Utils.isEmptyString(txtDockerHost.getText())) {\n            try {\n                txtDockerHost.setText(DefaultDockerClient.fromEnv().uri().toString());\n            } catch (DockerCertificateException e) {\n                e.printStackTrace();\n            }\n        }\n        // set default Dockerfile path\n        String defaultDockerFilePath = DockerUtil.getDefaultDockerFilePathIfExist(basePath);\n        dockerFileSelector.setFilePath(defaultDockerFilePath);\n        // set default image and tag\n        DateFormat df = new SimpleDateFormat(\"yyMMddHHmmss\");\n        String date = df.format(new Date());\n        if (Utils.isEmptyString(txtImageName.getText())) {\n            txtImageName.setText(String.format(\"%s-%s\", IMAGE_NAME_PREFIX, date));\n        }\n        if (Utils.isEmptyString(txtTagName.getText())) {\n            txtTagName.setText(DEFAULT_TAG_NAME);\n        }\n        updateCertPathVisibility();\n    }\n    private void onBtnTlsEnabledSelection() {\n        updateCertPathVisibility();\n    }\n    private void updateCertPathVisibility() {\n        certPathSelector.setVisible(btnTlsEnabled.getSelection());\n    }\n    /**\n     * Create contents of the button bar.\n     */\n    @Override\n    protected void createButtonsForButtonBar(Composite parent) {\n        createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL, true);\n        createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);\n    }\n    /**\n     * Return the initial size of the dialog.\n     */\n    @Override\n    protected Point getInitialSize() {\n        this.getShell().layout(true, true);\n        return this.getShell().computeSize(SWT.DEFAULT, SWT.DEFAULT, true);\n    }\n    @Override\n    protected boolean isResizable() {\n        return true;\n    }\n    @Override\n    public boolean isHelpAvailable() {\n        return false;\n    }\n    @Override\n    protected void okPressed() {\n        apply();\n        try {\n            validate();\n            execute();\n            super.okPressed();\n        } catch (InvalidFormDataException e) {\n            showErrorMessage(\"Error\", e.getMessage());\n        }\n    }\n    private void apply() {\n        dataModel.setTlsEnabled(btnTlsEnabled.getSelection());\n        dataModel.setDockerFilePath(dockerFileSelector.getFilePath());\n        dataModel.setDockerCertPath(certPathSelector.getFilePath());\n        dataModel.setDockerHost(txtDockerHost.getText());\n        dataModel.setImageName(txtImageName.getText());\n        dataModel.setTagName(txtTagName.getText());\n    }\n    private void validate() throws InvalidFormDataException {\n        if (dataModel == null) {\n            throw new InvalidFormDataException(MISSING_MODEL);\n        }\n        // docker file\n        if (Utils.isEmptyString(dataModel.getDockerFilePath())) {\n            throw new InvalidFormDataException(INVALID_DOCKER_FILE);\n        }\n        File dockerFile = Paths.get(dataModel.getDockerFilePath()).toFile();\n        if (!dockerFile.exists() || !dockerFile.isFile()) {\n            throw new InvalidFormDataException(INVALID_DOCKER_FILE);\n        }\n        // cert path\n        if (dataModel.isTlsEnabled()) {\n            if (Utils.isEmptyString(dataModel.getDockerCertPath())) {\n                throw new InvalidFormDataException(INVALID_CERT_PATH);\n            }\n            File certPath = Paths.get(dataModel.getDockerCertPath()).toFile();\n            if (!certPath.exists() || !certPath.isDirectory()) {\n                throw new InvalidFormDataException(INVALID_CERT_PATH);\n            }\n        }\n        String imageName = dataModel.getImageName();\n        String tagName = dataModel.getTagName();<fim_middle>// class below is blob\n"}