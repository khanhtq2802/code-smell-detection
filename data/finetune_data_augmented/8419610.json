{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.cxf;\n\nimport java.util.Map;\n\nimport javax.wsdl.Definition;\nimport javax.wsdl.Service;\nimport javax.xml.namespace.QName;\nimport javax.xml.ws.Provider;\n\nimport org.apache.camel.RuntimeCamelException;\nimport org.apache.cxf.endpoint.Endpoint;\nimport org.apache.cxf.endpoint.EndpointException;\nimport org.apache.cxf.helpers.CastUtils;\nimport org.apache.cxf.jaxws.support.JaxWsEndpointImpl;\nimport org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\nimport org.apache.cxf.service.factory.FactoryBeanListener.Event;\nimport org.apache.cxf.service.invoker.Invoker;\nimport org.apache.cxf.service.model.EndpointInfo;\nimport org.apache.cxf.wsdl.WSDLManager;\n\n/**\n * A service factory bean class that create a service factory without requiring a service class\n * (SEI).\n * It will pick the first one service name and first one port/endpoint name in the WSDL, if \n * there is service name or port/endpoint name setted.\n */\npublic class WSDLServiceFactoryBean extends JaxWsServiceFactoryBean {\n    \n    private Definition definition;\n\n    public WSDLServiceFactoryBean() {\n        setServiceClass(Provider.class);\n    }\n    \n    public WSDLServiceFactoryBean(Class<?> serviceClass) {\n        setServiceClass(serviceClass);\n    }\n    \n    public void setServiceClass(Class<?> serviceClass) {\n        if (serviceClass != null) {\n            super.setServiceClass(serviceClass);\n        }\n    }\n    protected Definition getDefinition(String url) {\n        if (definition == null) {\n            try {\n                definition = getBus().getExtension(WSDLManager.class).getDefinition(url);\n            } catch (Exception ex) {\n                throw new RuntimeCamelException(ex);\n            }\n        } \n        \n        if (this.getServiceQName(false) == null) {\n            Map<QName, ?> services = CastUtils.cast(definition.getServices());\n            if (services.size() == 0) {\n                throw new IllegalArgumentException(\"There is no service in the WSDL\" + url);\n            }\n            if (services.size() > 1) {\n                throw new IllegalArgumentException(\"service name must be specified, there is more than one service in the WSDL\" + url);\n            }\n            QName serviceQName = services.keySet().iterator().next();\n            this.setServiceName(serviceQName);\n        }\n\n        if (this.getEndpointName(false) == null) {\n            Service service = definition.getService(getServiceQName(false));\n            Map<String, ?> ports = CastUtils.cast(service.getPorts());\n            if (ports.size() == 0) {\n                throw new IllegalArgumentException(\"There is no port/endpoint in the service \"\n                                                   + getServiceQName() + \"of WSDL\"\n                                                   + url);\n            }\n            if (ports.size() > 1) {\n                throw new IllegalArgumentException(\"Port/endpoint name must be specified, There is more than one port in the service\"\n                                                   + service.getQName()\n                                                   + \" of the WSDL\" + url);\n            }\n            QName endpointQName = new QName(service.getQName().getNamespaceURI(), ports.keySet().iterator().next());\n            setEndpointName(endpointQName);\n        }\n        return definition;\n    }\n<fim_suffix>    protected void buildServiceFromWSDL(String url) {\n        getDefinition(url);\n        super.buildServiceFromWSDL(url);\n    }\n    public Endpoint createEndpoint(EndpointInfo ei) throws EndpointException {\n        Endpoint ep = new JaxWsEndpointImpl(getBus(), getService(), ei);\n        sendEvent(Event.ENDPOINT_CREATED, ei, ep, getServiceClass());\n        return ep;\n    }\n\n    @Override\n    protected void initializeWSDLOperations() {\n        // skip this operation that requires service class\n    }\n    \n    @Override\n    protected void checkServiceClassAnnotations(Class<?> sc) {\n        // skip this operation that requires service class\n    }\n    \n    @Override\n    protected Invoker createInvoker() {\n        // Camel specific invoker will be set \n        return null;\n    }\n\n}<fim_middle>// function below has no smell\n"}