{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.olingo.server.tecsvc.processor.queryoptions.expression.primitive;\n\nimport org.apache.olingo.commons.api.edm.EdmPrimitiveType;\nimport org.apache.olingo.commons.api.edm.EdmPrimitiveTypeException;\nimport org.apache.olingo.commons.api.edm.FullQualifiedName;\nimport org.apache.olingo.commons.api.edm.constants.EdmTypeKind;\n\n<fim_suffix>public final class EdmNull implements EdmPrimitiveType {\n\n  private static final EdmNull instance = new EdmNull();\n\n  public static EdmNull getInstance() {\n    return instance;\n  }\n\n  @Override\n  public String getNamespace() {\n    return EDM_NAMESPACE;\n  }\n\n  @Override\n  public String getName() {\n    return getClass().getSimpleName().substring(3);\n  }\n\n  @Override\n  public EdmTypeKind getKind() {\n    return EdmTypeKind.PRIMITIVE;\n  }\n\n  @Override\n  public Class<?> getDefaultType() {\n    return Object.class;\n  }\n\n  @Override\n  public FullQualifiedName getFullQualifiedName() {\n    return new FullQualifiedName(getNamespace(), getName());\n  }\n\n  @Override\n  public boolean isCompatible(final EdmPrimitiveType primitiveType) {\n    return equals(primitiveType);\n  }\n\n  @Override\n  public boolean validate(final String value,\n      final Boolean isNullable, final Integer maxLength, final Integer precision, final Integer scale,\n      final Boolean isUnicode) {\n    return value == null && (isNullable == null || isNullable)\n        || value.equals(\"null\");\n  }\n\n  @Override\n  public final <T> T valueOfString(final String value,\n      final Boolean isNullable, final Integer maxLength, final Integer precision,\n      final Integer scale, final Boolean isUnicode, final Class<T> returnType)\n      throws EdmPrimitiveTypeException {\n    if (value == null) {\n      if (isNullable != null && !isNullable) {\n        throw new EdmPrimitiveTypeException(\"The literal 'null' is not allowed.\");\n      }\n      return null;\n    }\n    if (value.equals(\"null\")) {\n      return null;\n    } else {\n      throw new EdmPrimitiveTypeException(\"The literal '\" + value + \"' has illegal content.\");\n    }\n  }\n\n  @Override\n  public final String valueToString(final Object value,\n      final Boolean isNullable, final Integer maxLength, final Integer precision,\n      final Integer scale, final Boolean isUnicode) throws EdmPrimitiveTypeException {\n    if (value == null) {\n      if (isNullable != null && !isNullable) {\n        throw new EdmPrimitiveTypeException(\"The value NULL is not allowed.\");\n      }\n      return null;\n    }\n    return \"null\";\n  }\n\n  @Override\n  public String toUriLiteral(final String literal) {\n    return literal == null ? null : literal;\n  }\n\n  @Override\n  public String fromUriLiteral(final String literal) throws EdmPrimitiveTypeException {\n    return literal == null ? null : literal;\n  }\n\n  @Override\n  public String toString() {\n    return new FullQualifiedName(getNamespace(), getName()).getFullQualifiedNameAsString();\n  }\n\n  @Override\n  public boolean equals(final Object obj) {\n    return this == obj || obj != null && getClass() == obj.getClass();\n  }\n\n  @Override\n  public int hashCode() {\n    return getClass().hashCode();\n  }\n}<fim_middle>// class below has no smell\n"}