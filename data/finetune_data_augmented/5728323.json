{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\npackage org.apache.storm.starter.bolt;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.apache.log4j.Logger;\nimport org.apache.storm.Config;\nimport org.apache.storm.starter.tools.Rankings;\nimport org.apache.storm.topology.BasicOutputCollector;\nimport org.apache.storm.topology.OutputFieldsDeclarer;\nimport org.apache.storm.topology.base.BaseBasicBolt;\nimport org.apache.storm.tuple.Fields;\nimport org.apache.storm.tuple.Tuple;\nimport org.apache.storm.tuple.Values;\nimport org.apache.storm.utils.TupleUtils;\n\n/**\n * This abstract bolt provides the basic behavior of bolts that rank objects according to their count.\n * <p/>\n * It uses a template method design pattern for {@link AbstractRankerBolt#execute(Tuple, BasicOutputCollector)} to allow\n * actual bolt implementations to specify how incoming tuples are processed, i.e. how the objects embedded within those\n * tuples are retrieved and counted.\n */\n<fim_suffix>public abstract class AbstractRankerBolt extends BaseBasicBolt {\n\n    private static final long serialVersionUID = 4931640198501530202L;\n    private static final int DEFAULT_EMIT_FREQUENCY_IN_SECONDS = 2;\n    private static final int DEFAULT_COUNT = 10;\n\n    private final int emitFrequencyInSeconds;\n    private final int count;\n    private final Rankings rankings;\n\n    public AbstractRankerBolt() {\n        this(DEFAULT_COUNT, DEFAULT_EMIT_FREQUENCY_IN_SECONDS);\n    }\n\n    public AbstractRankerBolt(int topN) {\n        this(topN, DEFAULT_EMIT_FREQUENCY_IN_SECONDS);\n    }\n\n    public AbstractRankerBolt(int topN, int emitFrequencyInSeconds) {\n        if (topN < 1) {\n            throw new IllegalArgumentException(\"topN must be >= 1 (you requested \" + topN + \")\");\n        }\n        if (emitFrequencyInSeconds < 1) {\n            throw new IllegalArgumentException(\n                \"The emit frequency must be >= 1 seconds (you requested \" + emitFrequencyInSeconds + \" seconds)\");\n        }\n        count = topN;\n        this.emitFrequencyInSeconds = emitFrequencyInSeconds;\n        rankings = new Rankings(count);\n    }\n\n    protected Rankings getRankings() {\n        return rankings;\n    }\n\n    /**\n     * This method functions as a template method (design pattern).\n     */\n    @Override\n    public final void execute(Tuple tuple, BasicOutputCollector collector) {\n        if (TupleUtils.isTick(tuple)) {\n            getLogger().debug(\"Received tick tuple, triggering emit of current rankings\");\n            emitRankings(collector);\n        } else {\n            updateRankingsWithTuple(tuple);\n        }\n    }\n\n    abstract void updateRankingsWithTuple(Tuple tuple);\n\n    private void emitRankings(BasicOutputCollector collector) {\n        collector.emit(new Values(rankings.copy()));\n        getLogger().debug(\"Rankings: \" + rankings);\n    }\n\n    @Override\n    public void declareOutputFields(OutputFieldsDeclarer declarer) {\n        declarer.declare(new Fields(\"rankings\"));\n    }\n\n    @Override\n    public Map<String, Object> getComponentConfiguration() {\n        Map<String, Object> conf = new HashMap<String, Object>();\n        conf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, emitFrequencyInSeconds);\n        return conf;\n    }\n\n    abstract Logger getLogger();\n}<fim_middle>// class below has no smell\n"}