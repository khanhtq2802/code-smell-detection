{"text": "<fim_prefix>     * @param month the value used to set the {@link #MONTH MONTH} time field in the calendar.\n     *              Note that the month value is 0-based. e.g., 0 for Farvardin.\n     * @param date  the value used to set the {@link #DATE DATE} time field in the calendar.\n     * @param hour  the value used to set the {@link #HOUR_OF_DAY HOUR_OF_DAY} time field\n     *              in the calendar.\n     * @param minute the value used to set the {@link #MINUTE MINUTE} time field\n     *              in the calendar.\n     * @param second the value used to set the {@link #SECOND SECOND} time field\n     *              in the calendar.\n     * @see Category#FORMAT\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     */\n    @Deprecated\n    public PersianCalendar(int year, int month, int date, int hour,\n                           int minute, int second)\n    {\n        super(TimeZone.getDefault(), ULocale.getDefault(Category.FORMAT));\n        this.set(Calendar.YEAR, year);\n        this.set(Calendar.MONTH, month);\n        this.set(Calendar.DATE, date);\n        this.set(Calendar.HOUR_OF_DAY, hour);\n        this.set(Calendar.MINUTE, minute);\n        this.set(Calendar.SECOND, second);\n    }\n    //-------------------------------------------------------------------------\n    // Minimum / Maximum access functions\n    //-------------------------------------------------------------------------\n    private static final int LIMITS[][] = {\n        // Minimum  Greatest     Least   Maximum\n        //           Minimum   Maximum\n        {        0,        0,        0,        0}, // ERA\n        { -5000000, -5000000,  5000000,  5000000}, // YEAR\n        {        0,        0,       11,       11}, // MONTH\n        {        1,        1,       52,       53}, // WEEK_OF_YEAR\n        {/*                                   */}, // WEEK_OF_MONTH\n        {        1,        1,       29,       31}, // DAY_OF_MONTH\n        {        1,        1,      365,      366}, // DAY_OF_YEAR\n        {/*                                   */}, // DAY_OF_WEEK\n        {       -1,       -1,        5,        5}, // DAY_OF_WEEK_IN_MONTH\n        {/*                                   */}, // AM_PM\n        {/*                                   */}, // HOUR\n        {/*                                   */}, // HOUR_OF_DAY\n        {/*                                   */}, // MINUTE\n        {/*                                   */}, // SECOND\n        {/*                                   */}, // MILLISECOND\n        {/*                                   */}, // ZONE_OFFSET\n        {/*                                   */}, // DST_OFFSET\n        { -5000000, -5000000,  5000000,  5000000}, // YEAR_WOY\n        {/*                                   */}, // DOW_LOCAL\n        { -5000000, -5000000,  5000000,  5000000}, // EXTENDED_YEAR\n        {/*                                   */}, // JULIAN_DAY\n        {/*                                   */}, // MILLISECONDS_IN_DAY\n    };\n    /**\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     */\n    @Deprecated\n    protected int handleGetLimit(int field, int limitType) {\n        return LIMITS[field][limitType];\n    }\n    //-------------------------------------------------------------------------\n    // Assorted calculation utilities\n    //\n    /**\n     * Determine whether a year is a leap year in the Persian calendar\n     */\n    private final static boolean isLeapYear(int year)\n    {\n        int[] remainder = new int[1];\n        floorDivide(25 * year + 11, 33, remainder);\n        return remainder[0] < 8;\n    }\n    //----------------------------------------------------------------------\n    // Calendar framework\n    //----------------------------------------------------------------------\n    /**\n     * Return the length (in days) of the given month.\n     *\n     * @param extendedYear  The Persian year\n     * @param month The Persian month, 0-based\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     */\n    @Deprecated\n    protected int handleGetMonthLength(int extendedYear, int month) {\n        // If the month is out of range, adjust it into range, and\n        // modify the extended year value accordingly.\n        if (month < 0 || month > 11) {\n            int[] rem = new int[1];\n            extendedYear += floorDivide(month, 12, rem);\n            month = rem[0];\n        }\n        return MONTH_COUNT[month][isLeapYear(extendedYear)?1:0];\n    }\n    /**\n     * Return the number of days in the given Persian year\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     */\n    @Deprecated\n    protected int handleGetYearLength(int extendedYear) {\n        return isLeapYear(extendedYear) ? 366 : 365;\n    }\n    //-------------------------------------------------------------------------\n    // Functions for converting from field values to milliseconds....\n    //-------------------------------------------------------------------------\n    /**\n     * Return JD of start of given month/year\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     */\n    @Deprecated\n    protected int handleComputeMonthStart(int eyear, int month, boolean useMonth) {\n        // If the month is out of range, adjust it into range, and\n        // modify the extended year value accordingly.\n        if (month < 0 || month > 11) {\n            int[] rem = new int[1];\n            eyear += floorDivide(month, 12, rem);\n            month = rem[0];\n        }\n        int julianDay = PERSIAN_EPOCH - 1 + 365 * (eyear - 1) + floorDivide(8 * eyear + 21, 33);\n        if (month != 0) {\n            julianDay += MONTH_COUNT[month][2];\n        }\n        return julianDay;\n    }    \n    //-------------------------------------------------------------------------\n    // Functions for converting from milliseconds to field values\n    //-------------------------------------------------------------------------\n    /**\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     */\n    @Deprecated\n    protected int handleGetExtendedYear() {\n        int year;\n        if (newerField(EXTENDED_YEAR, YEAR) == EXTENDED_YEAR) {\n            year = internalGet(EXTENDED_YEAR, 1); // Default to year 1\n        } else {\n            year = internalGet(YEAR, 1); // Default to year 1\n        }\n        return year;\n    }\n    /**\n     * Override Calendar to compute several fields specific to the Persian\n     * calendar system.  These are:\n     *\n     * <ul><li>ERA\n     * <li>YEAR\n     * <li>MONTH\n     * <li>DAY_OF_MONTH\n     * <li>DAY_OF_YEAR\n     * <li>EXTENDED_YEAR</ul>\n     * \n     * The DAY_OF_WEEK and DOW_LOCAL fields are already set when this\n     * method is called.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     */\n<fim_suffix>    @Deprecated\n    protected void handleComputeFields(int julianDay) {\n        int year, month, dayOfMonth, dayOfYear;\n        long daysSinceEpoch = julianDay - PERSIAN_EPOCH;\n        year = 1 + (int) floorDivide(33 * daysSinceEpoch + 3, 12053);\n        long farvardin1 = 365L * (year - 1L) + floorDivide(8L * year + 21, 33L);\n        dayOfYear = (int)(daysSinceEpoch - farvardin1); // 0-based\n        if (dayOfYear < 216) { // Compute 0-based month\n            month = dayOfYear / 31;\n        } else {\n            month = (dayOfYear - 6) / 30;\n        }\n        dayOfMonth = dayOfYear - MONTH_COUNT[month][2] + 1;\n        ++dayOfYear; // Make it 1-based now\n        internalSet(ERA, 0);\n        internalSet(YEAR, year);\n        internalSet(EXTENDED_YEAR, year);\n        internalSet(MONTH, month);\n        internalSet(DAY_OF_MONTH, dayOfMonth);\n        internalSet(DAY_OF_YEAR, dayOfYear);       \n    }    <fim_middle>// function below has no smell\n"}