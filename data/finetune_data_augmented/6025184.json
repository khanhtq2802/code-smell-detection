{"text": "<fim_prefix>/*\n * Copyright (c) 2015 the original author or authors.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Etienne Studer & Don\u00e1t Csik\u00f3s (Gradle Inc.) - initial API and implementation and initial documentation\n */\n\npackage org.eclipse.buildship.ui.internal.view.task;\n\nimport java.io.File;\nimport java.util.List;\n\nimport com.google.common.base.Optional;\nimport com.google.common.base.Preconditions;\nimport com.google.common.collect.ImmutableList;\n\nimport org.eclipse.core.resources.IProject;\n\nimport org.eclipse.buildship.core.internal.CorePlugin;\nimport org.eclipse.buildship.core.internal.GradlePluginsRuntimeException;\nimport org.eclipse.buildship.core.internal.configuration.BuildConfiguration;\nimport org.eclipse.buildship.core.internal.launch.GradleRunConfigurationAttributes;\nimport org.eclipse.buildship.core.internal.util.gradle.HierarchicalElementUtils;\nimport org.eclipse.buildship.core.internal.util.variable.ExpressionUtils;\nimport org.eclipse.buildship.ui.internal.util.nodeselection.NodeSelection;\n\n/**\n * Utility class related to the node selection in the {@link TaskView}.\n */\n<fim_suffix>public final class TaskNodeSelectionUtils {\n\n    private TaskNodeSelectionUtils() {\n    }\n\n    /**\n     * Checks whether the given selection can be mapped to a Gradle run configuration.\n     *\n     * @param selection the selection to investigate\n     * @return {@code true} if the the selection can be mapped to a run configuration\n     */\n    public static boolean isValidRunConfiguration(NodeSelection selection) {\n        return TaskViewActionStateRules.taskScopedTaskExecutionActionsEnablement(selection).asBoolean() ||\n                TaskViewActionStateRules.projectScopedTaskExecutionActionsEnabledFor(selection);\n    }\n\n    /**\n     * Tries to map the given selection to a Gradle run configuration.\n     *\n     * @param selection the selection to map\n     * @return the mapped run configuration, if possible\n     */\n    public static Optional<GradleRunConfigurationAttributes> tryGetRunConfigurationAttributes(NodeSelection selection) {\n        if (isValidRunConfiguration(selection)) {\n            return Optional.of(getRunConfigurationAttributes(selection));\n        } else {\n            return Optional.absent();\n        }\n    }\n\n    /**\n     * Maps the given selection to a Gradle run configuration.\n     *\n     * @param selection the selection to map\n     * @return the mapped run configuration\n     */\n    @SuppressWarnings(\"ConstantConditions\")\n    public static GradleRunConfigurationAttributes getRunConfigurationAttributes(NodeSelection selection) {\n        Preconditions.checkNotNull(selection);\n        List<String> tasks = getTaskPathStrings(selection);\n\n        if (TaskViewActionStateRules.taskScopedTaskExecutionActionsEnablement(selection).asBoolean()) {\n            return runConfigAttributesForTask(selection, tasks);\n        } else if (TaskViewActionStateRules.projectScopedTaskExecutionActionsEnabledFor(selection)) {\n            return runConfigAttributesForProject(selection, tasks);\n        } else {\n            throw new IllegalStateException(\"Unsupported selection: \" + selection);\n        }\n    }\n\n    private static GradleRunConfigurationAttributes runConfigAttributesForTask(NodeSelection selection, List<String> tasks) {\n        TaskNode taskNode = selection.getFirstElement(TaskNode.class);\n        File rootDir = HierarchicalElementUtils.getRoot(taskNode.getParentProjectNode().getEclipseProject()).getProjectDirectory();\n        File workingDir = workingDirForTask(taskNode, rootDir);\n        return createARunConfigAttributes(rootDir, workingDir, tasks);\n    }\n\n    private static File workingDirForTask(TaskNode taskNode, File rootDir) {\n        if (taskNode instanceof ProjectTaskNode) {\n            return rootDir;\n        } else if (taskNode instanceof TaskSelectorNode) {\n            return taskNode.getParentProjectNode().getEclipseProject().getProjectDirectory();\n        } else {\n            throw new GradlePluginsRuntimeException(\"Unrecognized task type \" + taskNode.getClass().getName());\n        }\n    }\n\n    private static GradleRunConfigurationAttributes runConfigAttributesForProject(NodeSelection selection, List<String> tasks) {\n        ProjectNode projectNode = selection.getFirstElement(ProjectNode.class);\n        File rootDir = HierarchicalElementUtils.getRoot(projectNode.getEclipseProject()).getProjectDirectory();\n        return createARunConfigAttributes(rootDir, rootDir, tasks);\n    }\n\n    private static GradleRunConfigurationAttributes createARunConfigAttributes(File rootDir, File workingDir, List<String> tasks) {\n        BuildConfiguration buildConfig = CorePlugin.configurationManager().loadBuildConfiguration(rootDir);\n        return new GradleRunConfigurationAttributes(tasks,\n                                                    projectDirectoryExpression(workingDir),\n                                                    buildConfig.getGradleDistribution().toString(),\n                                                    gradleUserHomeExpression(buildConfig.getGradleUserHome()),\n                                                    javaHomeExpression(buildConfig.getJavaHome()),\n                                                    buildConfig.getJvmArguments(),\n                                                    buildConfig.getArguments(),\n                                                    buildConfig.isShowExecutionsView(),\n                                                    buildConfig.isShowExecutionsView(),\n                                                    buildConfig.isOverrideWorkspaceSettings(),\n                                                    buildConfig.isOfflineMode(),\n                                                    buildConfig.isBuildScansEnabled());\n    }\n\n    private static String projectDirectoryExpression(File rootProjectDir) {\n        // return the directory as an expression if the project is part of the workspace, otherwise\n        // return the absolute path of the project directory available on the Eclipse project model\n        Optional<IProject> project = CorePlugin.workspaceOperations().findProjectByLocation(rootProjectDir);\n        if (project.isPresent()) {\n            return ExpressionUtils.encodeWorkspaceLocation(project.get());\n        } else {\n            return rootProjectDir.getAbsolutePath();\n        }\n    }\n\n    private static String gradleUserHomeExpression(File gradleUserHome) {\n        return gradleUserHome == null ? \"\" : gradleUserHome.getAbsolutePath();\n    }\n\n    private static String javaHomeExpression(File javaHome) {\n        return javaHome == null ? \"\" : javaHome.getAbsolutePath();\n    }\n\n    private static ImmutableList<String> getTaskPathStrings(NodeSelection selection) {\n        if (TaskViewActionStateRules.taskScopedTaskExecutionActionsEnablement(selection).asBoolean()) {\n            // running the set of project tasks and task selectors\n            ImmutableList.Builder<String> taskStrings = ImmutableList.builder();\n            for (TaskNode node : selection.toList(TaskNode.class)) {\n                TaskNode.TaskNodeType type = node.getType();\n                switch (type) {\n                    case PROJECT_TASK_NODE:\n                        taskStrings.add(((ProjectTaskNode) node).getPath());\n                        break;\n                    case TASK_SELECTOR_NODE:\n                        taskStrings.add(((TaskSelectorNode) node).getName());\n                        break;\n                    default:\n                        throw new IllegalStateException(\"Unsupported Task node type: \" + type);\n                }\n            }\n            return taskStrings.build();\n        } else if (TaskViewActionStateRules.projectScopedTaskExecutionActionsEnabledFor(selection)) {\n            // running the project default tasks means running an empty list of tasks\n            return ImmutableList.of();\n        } else {\n            throw new IllegalStateException(\"Unsupported selection: \" + selection);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}