{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.cxf.tools.validator.internal;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport javax.wsdl.Binding;\nimport javax.wsdl.BindingOperation;\nimport javax.wsdl.Definition;\nimport javax.wsdl.extensions.ExtensibilityElement;\nimport javax.wsdl.extensions.mime.MIMEContent;\nimport javax.wsdl.extensions.mime.MIMEMultipartRelated;\nimport javax.wsdl.extensions.mime.MIMEPart;\n\nimport org.apache.cxf.binding.soap.SOAPBindingUtil;\nimport org.apache.cxf.helpers.CastUtils;\n\n<fim_suffix>public class MIMEBindingValidator\n    extends AbstractDefinitionValidator {\n\n    public MIMEBindingValidator(Definition def) {\n        super(def);\n    }\n\n    public boolean isValid() {\n        Collection<Binding> bindings = CastUtils.cast(def.getBindings().values());\n        for (Binding binding : bindings) {\n            Collection<BindingOperation> bindingOps = CastUtils.cast(binding.getBindingOperations());\n            for (BindingOperation bindingOperation : bindingOps) {\n                if (bindingOperation.getBindingInput() == null) {\n                    continue;\n                }\n                Collection<ExtensibilityElement> exts = CastUtils.cast(bindingOperation\n                                                                           .getBindingInput()\n                                                                           .getExtensibilityElements());\n                for (ExtensibilityElement extElement : exts) {\n                    if (extElement instanceof MIMEMultipartRelated\n                        && !doValidate((MIMEMultipartRelated)extElement,\n                                       bindingOperation.getName())) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    private boolean doValidate(MIMEMultipartRelated mimeExt, String operationName) {\n        boolean gotRootPart = false;\n        List<MIMEPart> parts = CastUtils.cast(mimeExt.getMIMEParts());\n        for (MIMEPart mPart : parts) {\n            List<MIMEContent> mimeContents = new ArrayList<>();\n            List<ExtensibilityElement> extns = CastUtils.cast(mPart.getExtensibilityElements());\n            for (ExtensibilityElement extElement : extns) {\n                if (SOAPBindingUtil.isSOAPBody(extElement)) {\n                    if (gotRootPart) {\n                        addErrorMessage(\"Operation(\"\n                                        + operationName\n                                        + \"): There's more than one soap body mime part\"\n                                        + \" in its binding input\");\n                        return false;\n                    }\n                    gotRootPart = true;\n                } else if (extElement instanceof MIMEContent) {\n                    mimeContents.add((MIMEContent)extElement);\n                }\n            }\n            if (!doValidateMimeContentPartNames(mimeContents, operationName)) {\n                return false;\n            }\n        }\n        if (!gotRootPart) {\n            addErrorMessage(\"Operation(\"\n                            + operationName\n                            + \"): There's no soap body in mime part\"\n                            + \" in its binding input\");\n            return false;\n        }\n        return true;\n    }\n\n    private boolean doValidateMimeContentPartNames(List<MIMEContent> mimeContents,\n                                                   String operationName) {\n        // validate mime:content(s) in the mime:part as per R2909\n        String partName = null;\n        for (MIMEContent mimeContent : mimeContents) {\n            String mimeContnetPart = mimeContent.getPart();\n            if (mimeContnetPart == null) {\n                addErrorMessage(\"Operation(\"\n                                + operationName\n                                + \"): Must provide part attribute value for meme:content elements\");\n                return false;\n            }\n            if (partName == null) {\n                partName = mimeContnetPart;\n            } else {\n                if (!partName.equals(mimeContnetPart)) {\n                    addErrorMessage(\"Operation(\"\n                                    + operationName\n                                    + \"): Part attribute value for meme:content \"\n                                    + \"elements are different\");\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}<fim_middle>// class below has no smell\n"}