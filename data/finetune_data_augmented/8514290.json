{"text": "<fim_prefix>// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\npackage com.cloud.cluster;\n\nimport java.rmi.RemoteException;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.inject.Inject;\nimport javax.naming.ConfigurationException;\n\nimport org.apache.log4j.Logger;\nimport org.apache.cloudstack.framework.config.ConfigDepot;\n\nimport com.cloud.cluster.dao.ManagementServerHostDao;\nimport com.cloud.utils.NumbersUtil;\nimport com.cloud.utils.component.AdapterBase;\nimport com.cloud.utils.component.ComponentLifecycle;\nimport com.cloud.utils.db.DbProperties;\n\npublic class ClusterServiceServletAdapter extends AdapterBase implements ClusterServiceAdapter {\n\n    private static final Logger s_logger = Logger.getLogger(ClusterServiceServletAdapter.class);\n    private static final int DEFAULT_SERVICE_PORT = 9090;\n    private static final int DEFAULT_REQUEST_TIMEOUT = 300;            // 300 seconds\n\n    @Inject\n    private ClusterManager _manager;\n\n    @Inject\n    private ManagementServerHostDao _mshostDao;\n    @Inject\n    protected ConfigDepot _configDepot;\n\n    private ClusterServiceServletContainer _servletContainer;\n\n    private int _clusterServicePort = DEFAULT_SERVICE_PORT;\n\n    public ClusterServiceServletAdapter() {\n        setRunLevel(ComponentLifecycle.RUN_LEVEL_FRAMEWORK);\n    }\n\n    @Override\n    public ClusterService getPeerService(String strPeer) throws RemoteException {\n        try {\n            init();\n        } catch (ConfigurationException e) {\n            s_logger.error(\"Unable to init ClusterServiceServletAdapter\");\n            throw new RemoteException(\"Unable to init ClusterServiceServletAdapter\");\n        }\n\n        String serviceUrl = getServiceEndpointName(strPeer);\n        if (serviceUrl == null)\n            return null;\n\n        return new ClusterServiceServletImpl(serviceUrl);\n    }\n\n    @Override\n    public String getServiceEndpointName(String strPeer) {\n        try {\n            init();\n        } catch (ConfigurationException e) {\n            s_logger.error(\"Unable to init ClusterServiceServletAdapter\");\n            return null;\n        }\n\n        long msid = Long.parseLong(strPeer);\n\n        ManagementServerHostVO mshost = _mshostDao.findByMsid(msid);\n        if (mshost == null)\n            return null;\n\n        return composeEndpointName(mshost.getServiceIP(), mshost.getServicePort());\n    }\n\n    @Override\n    public int getServicePort() {\n        return _clusterServicePort;\n    }\n\n    private String composeEndpointName(String nodeIP, int port) {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"http://\").append(nodeIP).append(\":\").append(port).append(\"/clusterservice\");\n        return sb.toString();\n    }\n\n    @Override\n    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        init();\n        return true;\n    }\n\n    @Override\n    public boolean start() {\n        _servletContainer = new ClusterServiceServletContainer();\n        _servletContainer.start(new ClusterServiceServletHttpHandler(_manager), _clusterServicePort);\n        return true;\n    }\n\n    @Override\n    public boolean stop() {\n        if (_servletContainer != null)\n            _servletContainer.stop();\n        return true;\n    }\n\n<fim_suffix>    private void init() throws ConfigurationException {\n        if (_mshostDao != null)\n            return;\n\n        Properties dbProps = DbProperties.getDbProperties();\n\n        _clusterServicePort = NumbersUtil.parseInt(dbProps.getProperty(\"cluster.servlet.port\"), DEFAULT_SERVICE_PORT);\n        if (s_logger.isInfoEnabled())\n            s_logger.info(\"Cluster servlet port : \" + _clusterServicePort);\n    }\n}<fim_middle>// function below has no smell\n"}