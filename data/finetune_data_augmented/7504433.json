{"text": "<fim_prefix>/*\n * Copyright 2014-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.data.redis.core;\n\nimport java.io.IOException;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\n\n/**\n * {@link ConvertingCursor} wraps a given cursor and applies given {@link Converter} to items prior to returning them.\n * This allows to easily perform required conversion whereas the underlying implementation may still work with its\n * native types.\n *\n * @author Christoph Strobl\n * @param <S>\n * @param <T>\n * @since 1.4\n */\npublic class ConvertingCursor<S, T> implements Cursor<T> {\n\n\tprivate Cursor<S> delegate;\n\tprivate Converter<S, T> converter;\n\n\t/**\n\t * @param cursor Cursor must not be {@literal null}.\n\t * @param converter Converter must not be {@literal null}.\n\t */\n\tpublic ConvertingCursor(Cursor<S> cursor, Converter<S, T> converter) {\n\n\t\tAssert.notNull(cursor, \"Cursor delegate must not be 'null'.\");\n\t\tAssert.notNull(cursor, \"Converter must not be 'null'.\");\n\t\tthis.delegate = cursor;\n\t\tthis.converter = converter;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see java.util.Iterator#hasNext()\n\t */\n\t@Override\n\tpublic boolean hasNext() {\n\t\treturn delegate.hasNext();\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see java.util.Iterator#next()\n\t */\n\t@Override\n\t@Nullable\n\tpublic T next() {\n\t\treturn converter.convert(delegate.next());\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see java.util.Iterator#remove()\n\t */\n\t@Override\n\tpublic void remove() {\n\t\tdelegate.remove();\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see java.io.Closeable#close()\n\t */\n\t@Override\n\tpublic void close() throws IOException {\n\t\tdelegate.close();\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.core.Cursor#getCursorId()\n\t */\n\t@Override\n\tpublic long getCursorId() {\n\t\treturn delegate.getCursorId();\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.core.Cursor#isClosed()\n\t */\n\t@Override\n\tpublic boolean isClosed() {\n\t\treturn delegate.isClosed();\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.core.Cursor#open()\n\t */\n<fim_suffix>\t@Override\n\tpublic Cursor<T> open() {\n\t\tthis.delegate = delegate.open();\n\t\treturn this;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.core.Cursor#getPosition()\n\t */\n\t@Override\n\tpublic long getPosition() {\n\t\treturn delegate.getPosition();\n\t}\n\n}<fim_middle>// function below has no smell\n"}