{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dubbo.rpc.protocol.dubbo;\n\nimport org.apache.dubbo.remoting.exchange.ResponseCallback;\nimport org.apache.dubbo.remoting.exchange.ResponseFuture;\nimport org.apache.dubbo.rpc.Result;\nimport org.apache.dubbo.rpc.RpcException;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * FutureAdapter\n */\npublic class FutureAdapter<V> extends CompletableFuture<V> {\n\n    private final ResponseFuture future;\n    private CompletableFuture<Result> resultFuture;\n\n    public FutureAdapter(ResponseFuture future) {\n        this.future = future;\n        this.resultFuture = new CompletableFuture<>();\n        future.setCallback(new ResponseCallback() {\n            @Override\n            public void done(Object response) {\n                Result result = (Result) response;\n                FutureAdapter.this.resultFuture.complete(result);\n                V value = null;\n                try {\n                    value = (V) result.recreate();\n                } catch (Throwable t) {\n                    FutureAdapter.this.completeExceptionally(t);\n                }\n                FutureAdapter.this.complete(value);\n            }\n\n            @Override\n            public void caught(Throwable exception) {\n                FutureAdapter.this.completeExceptionally(exception);\n            }\n        });\n    }\n\n    public ResponseFuture getFuture() {\n        return future;\n    }\n\n    @Override\n    public boolean cancel(boolean mayInterruptIfRunning) {\n        return false;\n    }\n\n    @Override\n    public boolean isCancelled() {\n        return false;\n    }\n\n<fim_suffix>    @Override\n    public boolean isDone() {\n        return super.isDone();\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public V get() throws InterruptedException, ExecutionException {\n        try {\n            return super.get();\n        } catch (ExecutionException | InterruptedException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw new RpcException(e);\n        }\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n        try {\n            return super.get(timeout, unit);\n        } catch (TimeoutException | ExecutionException | InterruptedException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw new RpcException(e);\n        }\n    }\n\n    /**\n     * FIXME\n     * This method has no need open to the the end user.\n     * Mostly user use RpcContext.getFuture() to refer the instance of this class, so the user will get a CompletableFuture, this method will rarely be noticed.\n     *\n     * @return\n     */\n    public CompletableFuture<Result> getResultFuture() {\n        return resultFuture;\n    }\n\n}<fim_middle>// function below has no smell\n"}