{"text": "<fim_prefix>package com.esri.arcgisruntime.sample.sketcheditor;\nimport android.os.Bundle;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.widget.ImageButton;\nimport android.widget.TextView;\nimport com.esri.arcgisruntime.geometry.Geometry;\nimport com.esri.arcgisruntime.geometry.GeometryType;\nimport com.esri.arcgisruntime.mapping.ArcGISMap;\nimport com.esri.arcgisruntime.mapping.Basemap;\nimport com.esri.arcgisruntime.mapping.view.Graphic;\nimport com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\nimport com.esri.arcgisruntime.mapping.view.MapView;\nimport com.esri.arcgisruntime.mapping.view.SketchCreationMode;\nimport com.esri.arcgisruntime.mapping.view.SketchEditor;\nimport com.esri.arcgisruntime.symbology.SimpleFillSymbol;\nimport com.esri.arcgisruntime.symbology.SimpleLineSymbol;\nimport com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\npublic class MainActivity extends AppCompatActivity {\n  private final String TAG = MainActivity.class.getSimpleName();\n  private SimpleMarkerSymbol mPointSymbol;\n  private SimpleLineSymbol mLineSymbol;\n  private SimpleFillSymbol mFillSymbol;\n  private MapView mMapView;\n  private SketchEditor mSketchEditor;\n  private GraphicsOverlay mGraphicsOverlay;\n  private ImageButton mPointButton;\n  private ImageButton mMultiPointButton;\n  private ImageButton mPolylineButton;\n  private ImageButton mPolygonButton;\n  private ImageButton mFreehandLineButton;\n  private ImageButton mFreehandPolygonButton;\n<fim_suffix>  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    // define symbols\n    mPointSymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.SQUARE, 0xFFFF0000, 20);\n    mLineSymbol = new SimpleLineSymbol(SimpleLineSymbol.Style.SOLID, 0xFFFF8800, 4);\n    mFillSymbol = new SimpleFillSymbol(SimpleFillSymbol.Style.CROSS, 0x40FFA9A9, mLineSymbol);\n    // inflate map view from layout\n    mMapView = findViewById(R.id.mapView);\n    // create a map with the Basemap Type topographic\n    ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS, 34.056295, -117.195800, 16);\n    // set the map to be displayed in this view\n    mMapView.setMap(map);\n    mGraphicsOverlay = new GraphicsOverlay();\n    mMapView.getGraphicsOverlays().add(mGraphicsOverlay);\n    // create a new sketch editor and add it to the map view\n    mSketchEditor = new SketchEditor();\n    mMapView.setSketchEditor(mSketchEditor);\n    // get buttons from layouts\n    mPointButton = findViewById(R.id.pointButton);\n    mMultiPointButton = findViewById(R.id.pointsButton);\n    mPolylineButton = findViewById(R.id.polylineButton);\n    mPolygonButton = findViewById(R.id.polygonButton);\n    mFreehandLineButton = findViewById(R.id.freehandLineButton);\n    mFreehandPolygonButton = findViewById(R.id.freehandPolygonButton);\n    // add click listeners\n    mPointButton.setOnClickListener(view -> createModePoint());\n    mMultiPointButton.setOnClickListener(view -> createModeMultipoint());\n    mPolylineButton.setOnClickListener(view -> createModePolyline());\n    mPolygonButton.setOnClickListener(view -> createModePolygon());\n    mFreehandLineButton.setOnClickListener(view -> createModeFreehandLine());\n    mFreehandPolygonButton.setOnClickListener(view -> createModeFreehandPolygon());\n  }\n  /**\n   * When the point button is clicked, reset other buttons, show the point button as selected, and start point\n   * drawing mode.\n   */\n  private void createModePoint() {\n    resetButtons();\n    mPointButton.setSelected(true);\n    mSketchEditor.start(SketchCreationMode.POINT);\n  }\n  /**\n   * When the multipoint button is clicked, reset other buttons, show the multipoint button as selected, and start\n   * multipoint drawing mode.\n   */\n  private void createModeMultipoint() {\n    resetButtons();\n    mMultiPointButton.setSelected(true);\n    mSketchEditor.start(SketchCreationMode.MULTIPOINT);\n  }\n  /**\n   * When the polyline button is clicked, reset other buttons, show the polyline button as selected, and start\n   * polyline drawing mode.\n   */\n  private void createModePolyline() {\n    resetButtons();\n    mPolylineButton.setSelected(true);\n    mSketchEditor.start(SketchCreationMode.POLYLINE);\n  }\n  /**\n   * When the polygon button is clicked, reset other buttons, show the polygon button as selected, and start polygon\n   * drawing mode.\n   */\n  private void createModePolygon() {\n    resetButtons();\n    mPolygonButton.setSelected(true);\n    mSketchEditor.start(SketchCreationMode.POLYGON);\n  }\n  /**\n   * When the freehand line button is clicked, reset other buttons, show the freehand line button as selected, and\n   * start freehand line drawing mode.\n   */\n  private void createModeFreehandLine() {\n    resetButtons();\n    mFreehandLineButton.setSelected(true);\n    mSketchEditor.start(SketchCreationMode.FREEHAND_LINE);\n  }\n  /**\n   * When the freehand polygon button is clicked, reset other buttons, show the freehand polygon button as selected,\n   * and enable freehand polygon drawing mode.\n   */\n  private void createModeFreehandPolygon() {\n    resetButtons();\n    mFreehandPolygonButton.setSelected(true);\n    mSketchEditor.start(SketchCreationMode.FREEHAND_POLYGON);\n  }\n  /**\n   * When the undo button is clicked, undo the last event on the SketchEditor.\n   */\n  private void undo() {\n    if (mSketchEditor.canUndo()) {\n      mSketchEditor.undo();\n    }\n  }\n  /**\n   * When the redo button is clicked, redo the last undone event on the SketchEditor.\n   */\n  private void redo() {\n    if (mSketchEditor.canRedo()) {\n      mSketchEditor.redo();\n    }\n  }\n  /**\n   * When the stop button is clicked, check that sketch is valid. If so, get the geometry from the sketch, set its\n   * symbol and add it to the graphics overlay.\n   */\n  private void stop() {\n    if (!mSketchEditor.isSketchValid()) {\n      reportNotValid();\n      mSketchEditor.stop();\n      resetButtons();\n      return;\n    }\n    // get the geometry from sketch editor\n    Geometry sketchGeometry = mSketchEditor.getGeometry();\n    mSketchEditor.stop();\n    resetButtons();\n    if (sketchGeometry != null) {\n      // create a graphic from the sketch editor geometry\n      Graphic graphic = new Graphic(sketchGeometry);\n      // assign a symbol based on geometry type\n      if (graphic.getGeometry().getGeometryType() == GeometryType.POLYGON) {\n        graphic.setSymbol(mFillSymbol);\n      } else if (graphic.getGeometry().getGeometryType() == GeometryType.POLYLINE) {\n        graphic.setSymbol(mLineSymbol);\n      } else if (graphic.getGeometry().getGeometryType() == GeometryType.POINT ||\n          graphic.getGeometry().getGeometryType() == GeometryType.MULTIPOINT) {\n        graphic.setSymbol(mPointSymbol);\n      }\n      // add the graphic to the graphics overlay\n      mGraphicsOverlay.getGraphics().add(graphic);\n    }\n  }\n  /**\n   * Called if sketch is invalid. Reports to user why the sketch was invalid.\n   */\n  private void reportNotValid() {\n    String validIf;\n    if (mSketchEditor.getSketchCreationMode() == SketchCreationMode.POINT) {\n      validIf = \"Point only valid if it contains an x & y coordinate.\";\n    } else if (mSketchEditor.getSketchCreationMode() == SketchCreationMode.MULTIPOINT) {\n      validIf = \"Multipoint only valid if it contains at least one vertex.\";\n    } else if (mSketchEditor.getSketchCreationMode() == SketchCreationMode.POLYLINE\n        || mSketchEditor.getSketchCreationMode() == SketchCreationMode.FREEHAND_LINE) {\n      validIf = \"Polyline only valid if it contains at least one part of 2 or more vertices.\";\n    } else if (mSketchEditor.getSketchCreationMode() == SketchCreationMode.POLYGON\n        || mSketchEditor.getSketchCreationMode() == SketchCreationMode.FREEHAND_POLYGON) {\n      validIf = \"Polygon only valid if it contains at least one part of 3 or more vertices which form a closed ring.\";\n    } else {\n      validIf = \"No sketch creation mode selected.\";\n    }\n    String report = \"Sketch geometry invalid:\\n\" + validIf;<fim_middle>// function below is feature envy and long method\n"}