{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.lucene.queryparser.flexible.standard.processors;\n\nimport java.util.List;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.queryparser.flexible.core.QueryNodeException;\nimport org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;\nimport org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl;\nimport org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler.ConfigurationKeys;\nimport org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;\n\n/** Processor for Regexp queries. */\n<fim_suffix>public class RegexpQueryNodeProcessor extends QueryNodeProcessorImpl {\n\n  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n    return node;\n  }\n\n  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    if (node instanceof RegexpQueryNode) {\n      RegexpQueryNode regexpNode = (RegexpQueryNode) node;\n      Analyzer analyzer = getQueryConfigHandler().get(ConfigurationKeys.ANALYZER);\n      if (analyzer != null) {\n        String text = regexpNode.getText().toString();\n        // because we call utf8ToString, this will only work with the default TermToBytesRefAttribute\n        text = analyzer.normalize(regexpNode.getFieldAsString(), text).utf8ToString();\n        regexpNode.setText(text);\n      }\n    }\n    return node;\n  }\n\n  @Override\n  protected List<QueryNode> setChildrenOrder(List<QueryNode> children) throws QueryNodeException {\n    return children;\n  }\n\n}<fim_middle>// class below has no smell\n"}