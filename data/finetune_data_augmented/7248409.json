{"text": "<fim_prefix>/*\n * Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n * \n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n * \n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n * \n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n * \n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage org.graalvm.visualvm.core.ui.actions;\n\nimport org.graalvm.visualvm.core.datasource.DataSource;\nimport org.graalvm.visualvm.core.datasupport.Utils;\nimport org.graalvm.visualvm.core.explorer.ExplorerSelectionListener;\nimport org.graalvm.visualvm.core.explorer.ExplorerSupport;\nimport java.beans.PropertyChangeListener;\nimport java.util.Collections;\nimport java.util.Set;\nimport javax.swing.AbstractAction;\nimport org.openide.DialogDisplayer;\nimport org.openide.NotifyDescriptor;\nimport org.openide.util.NbBundle;\n\n/**\n * Abstract Action which can be used as a basis for any DataSource-aware action.\n *\n * @author Jiri Sedlacek\n */\npublic abstract class DataSourceAction<X extends DataSource> extends AbstractAction {\n\n    private final Class<X> scope;\n    private boolean initialized = false;\n\n\n    /**\n     * Creates new instance of DataSourceAction available for defined DataSource type.\n     * \n     * @param scope DataSource type for the action.\n     */\n    public DataSourceAction(Class<X> scope) {\n        this.scope = scope;\n    }\n    \n    \n    /**\n     * Updates enabled state based on currently selected DataSources in Applications window.\n     * \n     * @param selectedDataSources currently selected DataSources in Applications window.\n     */\n    protected abstract void updateState(Set<X> selectedDataSources);\n\n    /**\n     * Displays a dialog that the action cannot be invoked in current context.\n     */\n<fim_suffix>    protected void notifyCannotPerform() {\n        DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.Message(\n                NbBundle.getMessage(DataSourceAction.class,\n                \"MSG_Cannot_perform_action_in_this_context\"), // NOI18N\n                NotifyDescriptor.ERROR_MESSAGE));\n    }\n    \n    /**\n     * Initializes the action. By default registers selection listener which invokes updateState(Set<DataSource>) on selection change.\n     */\n    protected void initialize() {\n        ExplorerSupport.sharedInstance().addSelectionListener(new ExplorerSelectionListener() {\n            public void selectionChanged(Set<DataSource> selected) {\n                Set<X> selectedFiltered = Utils.getFilteredSet(selected, getScope());\n                if (selectedFiltered.size() == selected.size()) DataSourceAction.this.updateState(selectedFiltered);\n                else updateState(Collections.EMPTY_SET);\n            }\n        });\n        \n        updateState(ActionUtils.getSelectedDataSources(getScope()));\n    }\n    \n    public final Object getValue(String key) {\n        doInitialize();\n        return super.getValue(key);\n    }\n    \n    public final boolean isEnabled() {\n        doInitialize();\n        return super.isEnabled();\n    }\n    \n    public final void addPropertyChangeListener(PropertyChangeListener listener) {\n        doInitialize();\n        super.addPropertyChangeListener(listener);\n    }\n\n\n    /**\n     * Returns DataSource type for this action.\n     * \n     * @return DataSource type for this action.\n     */\n    public final Class<X> getScope() {\n        return scope;\n    }\n    \n    \n    private synchronized void doInitialize() {\n        if (initialized) return;\n        initialized = true;\n        initialize();\n    }\n    \n}<fim_middle>// function below has no smell\n"}