{"text": "<fim_prefix>/**\n * Autogenerated by Thrift Compiler (0.11.0)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage com.facebook.buck.log.thrift.rulekeys;\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\", \"unused\"})\n@javax.annotation.Generated(value = \"Autogenerated by Thrift Compiler (0.11.0)\")\npublic class NonHashedPath implements org.apache.thrift.TBase<NonHashedPath, NonHashedPath._Fields>, java.io.Serializable, Cloneable, Comparable<NonHashedPath> {\n  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"NonHashedPath\");\n  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField(\"path\", org.apache.thrift.protocol.TType.STRING, (short)1);\n  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NonHashedPathStandardSchemeFactory();\n  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NonHashedPathTupleSchemeFactory();\n  public java.lang.String path; // required\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n    PATH((short)1, \"path\");\n    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n    static {\n      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // PATH\n          return PATH;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(java.lang.String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final java.lang.String _fieldName;\n    _Fields(short thriftId, java.lang.String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public java.lang.String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData(\"path\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NonHashedPath.class, metaDataMap);\n  }\n  public NonHashedPath() {\n  }\n  public NonHashedPath(\n    java.lang.String path)\n  {\n    this();\n    this.path = path;\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public NonHashedPath(NonHashedPath other) {\n    if (other.isSetPath()) {\n      this.path = other.path;\n    }\n  }\n  public NonHashedPath deepCopy() {\n    return new NonHashedPath(this);\n  }\n<fim_suffix>  @Override\n  public void clear() {\n    this.path = null;\n  }\n  public java.lang.String getPath() {\n    return this.path;\n  }\n  public NonHashedPath setPath(java.lang.String path) {\n    this.path = path;\n    return this;\n  }\n  public void unsetPath() {\n    this.path = null;\n  }\n  /** Returns true if field path is set (has been assigned a value) and false otherwise */\n  public boolean isSetPath() {\n    return this.path != null;\n  }\n  public void setPathIsSet(boolean value) {\n    if (!value) {\n      this.path = null;\n    }\n  }\n  public void setFieldValue(_Fields field, java.lang.Object value) {\n    switch (field) {\n    case PATH:\n      if (value == null) {\n        unsetPath();\n      } else {\n        setPath((java.lang.String)value);\n      }\n      break;\n    }\n  }\n  public java.lang.Object getFieldValue(_Fields field) {\n    switch (field) {\n    case PATH:\n      return getPath();\n    }\n    throw new java.lang.IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new java.lang.IllegalArgumentException();\n    }\n    switch (field) {\n    case PATH:\n      return isSetPath();\n    }\n    throw new java.lang.IllegalStateException();\n  }\n  @Override\n  public boolean equals(java.lang.Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof NonHashedPath)\n      return this.equals((NonHashedPath)that);\n    return false;\n  }\n  public boolean equals(NonHashedPath that) {\n    if (that == null)\n      return false;\n    if (this == that)\n      return true;\n    boolean this_present_path = true && this.isSetPath();\n    boolean that_present_path = true && that.isSetPath();\n    if (this_present_path || that_present_path) {\n      if (!(this_present_path && that_present_path))\n        return false;\n      if (!this.path.equals(that.path))\n        return false;\n    }\n    return true;\n  }\n  @Override\n  public int hashCode() {\n    int hashCode = 1;\n    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);\n    if (isSetPath())\n      hashCode = hashCode * 8191 + path.hashCode();\n    return hashCode;\n  }\n  @Override\n  public int compareTo(NonHashedPath other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetPath()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    scheme(iprot).read(iprot, this);\n  }\n  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n    scheme(oprot).write(oprot, this);\n  }\n  @Override\n  public java.lang.String toString() {\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(\"NonHashedPath(\");\n    boolean first = true;\n    sb.append(\"path:\");\n    if (this.path == null) {\n      sb.append(\"null\");\n    } else {\n      sb.append(this.path);\n    }\n    first = false;\n    sb.append(\")\");\n    return sb.toString();\n  }\n  public void validate() throws org.apache.thrift.TException {\n    // check for required fields\n    // check for sub-struct validity\n  }\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    try {<fim_middle>// function below has no smell\n"}