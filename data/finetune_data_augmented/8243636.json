{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cocoon.template.instruction;\n\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Stack;\n\nimport org.apache.cocoon.el.objectmodel.ObjectModel;\nimport org.apache.cocoon.el.parsing.Subst;\nimport org.apache.cocoon.template.environment.ErrorHolder;\nimport org.apache.cocoon.template.environment.ExecutionContext;\nimport org.apache.cocoon.template.environment.ParsingContext;\nimport org.apache.cocoon.template.script.Invoker;\nimport org.apache.cocoon.template.script.event.AttributeEvent;\nimport org.apache.cocoon.template.script.event.Characters;\nimport org.apache.cocoon.template.script.event.Event;\nimport org.apache.cocoon.template.script.event.IgnorableWhitespace;\nimport org.apache.cocoon.template.script.event.StartElement;\nimport org.apache.cocoon.template.script.event.TextEvent;\nimport org.apache.cocoon.xml.XMLConsumer;\nimport org.apache.cocoon.xml.util.NamespacesTable;\nimport org.apache.commons.lang.StringUtils;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.Locator;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\n\n/**\n * @version $Id$\n */\npublic class Call extends Instruction {\n\n    private Object macro;\n    private Subst targetNamespace;\n    private Map parameters;\n    private Event body;\n\n    public Call(Define definition, StartElement startElement)\n            throws SAXException {\n        super(startElement);\n        this.parameters = new HashMap();\n        setBody(startElement);\n        setNext(startElement.getNext());\n        setDefinition(definition);\n\n        Iterator i = startElement.getAttributeEvents().iterator();\n        while (i.hasNext()) {\n            AttributeEvent attrEvent = (AttributeEvent) i.next();\n            addParameterInstance(attrEvent);\n        }\n    }\n\n<fim_suffix>    public Call(ParsingContext parsingContext, StartElement raw, Attributes attrs, Stack stack)\n            throws SAXException {\n        super(raw);\n        this.parameters = new HashMap();\n        Locator locator = getLocation();\n\n        String name = attrs.getValue(\"macro\");\n        if (name == null) {\n            throw new SAXParseException(\"if: \\\"test\\\" is required\", locator,\n                    null);\n        }\n        this.macro = parsingContext.getStringTemplateParser().compileExpr(name, \"call: \\\"macro\\\": \",\n                locator);\n\n        String namespace = StringUtils.defaultString(attrs\n                .getValue(\"targetNamespace\"));\n        this.targetNamespace = parsingContext.getStringTemplateParser().compileExpr(namespace,\n                \"call: \\\"targetNamespace\\\": \", locator);\n    }\n\n    public void setDefinition(Define definition) {\n        this.macro = definition;\n    }\n\n    public void addParameterInstance(AttributeEvent attributeEvent)\n            throws SAXException {\n        ParameterInstance parameter = new ParameterInstance(\n                attributeEvent);\n        this.parameters.put(parameter.getName(), parameter);\n    }\n\n    public Event execute(XMLConsumer consumer,\n            ObjectModel objectModel,\n            ExecutionContext executionContext, MacroContext macroContext,\n            NamespacesTable namespaces, Event startEvent, Event endEvent) throws SAXException {\n        Map attributeMap = new HashMap();\n        Iterator i = parameters.keySet().iterator();\n        while (i.hasNext()) {\n            String parameterName = (String) i.next();\n            ParameterInstance parameter = (ParameterInstance) parameters\n                    .get(parameterName);\n            Object parameterValue = parameter.getValue(objectModel);\n            attributeMap.put(parameterName, parameterValue);\n        }\n        objectModel.markLocalContext();\n        HashMap macro = new HashMap();\n        macro.put(\"body\", this.body);\n        macro.put(\"arguments\", attributeMap);\n        objectModel.put(\"macro\", macro);\n\n        Define definition = resolveMacroDefinition(objectModel,\n                executionContext);\n        Iterator iter = definition.getParameters().entrySet().iterator();\n        while (iter.hasNext()) {\n            Map.Entry e = (Map.Entry) iter.next();\n            String key = (String) e.getKey();\n            Parameter startParam = (Parameter) e.getValue();\n            Object default_ = startParam.getDefaultValue();\n            Object val = attributeMap.get(key);\n            if (val == null) {\n                val = default_;\n            }\n            objectModel.put(key, val);\n        }\n\n        Event macroBodyStart = getNext();\n        Event macroBodyEnd = null;\n\n        if (getEndInstruction() != null)\n            macroBodyEnd = getEndInstruction();\n        else\n            macroBodyEnd = getStartElement().getEndElement();\n        \n        MacroContext newMacroContext = new MacroContext(definition.getQname(),\n                macroBodyStart, macroBodyEnd);\n        try {\n            Invoker.execute(consumer, objectModel, executionContext,\n                    newMacroContext, namespaces,definition.getBody(), definition.getEndInstruction());\n        } catch (SAXParseException exc) {\n            throw new SAXParseException(newMacroContext.getMacroQName() + \": \"\n                    + exc.getMessage(), location, exc);\n        }\n        objectModel.cleanupLocalContext();\n\n        if (getEndInstruction() != null)\n            return getEndInstruction().getNext();\n        else\n            return getStartElement().getEndElement().getNext();\n    }\n\n    /**\n     * @param executionContext\n     * @throws SAXParseException\n     */\n    private Define resolveMacroDefinition(\n            ObjectModel objectModel,\n            ExecutionContext executionContext) throws SAXParseException {\n        if (this.macro instanceof Define)\n            return (Define) macro;\n\n        Object macroName;\n        Object namespace;\n        Subst macroNameExpression = (Subst) macro;\n        try {\n            macroName = macroNameExpression.getValue(objectModel);\n            namespace = targetNamespace.getValue(objectModel);\n            if (namespace == null)\n                namespace = \"\";\n        } catch (Exception e) {\n            throw new SAXParseException(e.getMessage(), getLocation(), e);\n        } catch (Error err) {\n            throw new SAXParseException(err.getMessage(), getLocation(),\n                    new ErrorHolder(err));\n        }\n        Define definition = (Define) executionContext\n                .getDefinitions()\n                .get(\"{\" + namespace.toString() + \"}\" + macroName.toString());\n        if (definition == null)\n            throw new SAXParseException(\"no macro definition: \" + macroName,\n                    getLocation());\n        return definition;\n    }\n\n    /**\n     * @param body\n     */\n    public void setBody(Event body) {\n        this.body = body;\n\n    }\n\n    public void endNotify() throws SAXException {\n        // FIXME: copy/pasted from StartDefine (almost)\n        Event e = next;\n        boolean params = true;\n        while (e != this.getEndInstruction()) {\n            if (e instanceof ParameterInstance) {\n                ParameterInstance startParamInstance = (ParameterInstance) e;\n                if (!params) {\n                    throw new SAXParseException(\n                            \"<parameter value> not allowed here: \\\"\"\n                                    + startParamInstance.name + \"\\\"\",\n                            startParamInstance.getLocation(), null);\n                }\n                Object prev = this.parameters.put(startParamInstance.name,\n                        startParamInstance);\n                if (prev != null) {\n                    throw new SAXParseException(\"duplicate parameter value: \\\"\"\n                            + startParamInstance.name + \"\\\"\", location, null);\n                }\n                e = startParamInstance.getEndInstruction();\n            } else if (e instanceof IgnorableWhitespace) {\n                // EMPTY\n            } else if (e instanceof Characters) {\n                // check for whitespace\n                char[] ch = ((TextEvent) e).getRaw();\n                int len = ch.length;\n                for (int i = 0; i < len; i++) {\n                    if (!Character.isWhitespace(ch[i])) {\n                        if (params) {\n                            params = false;\n                            this.body = e;\n                        }\n                        break;\n                    }\n                }\n            } else {\n                if (params) {\n                    params = false;\n                    this.body = e;\n                }\n            }\n            e = e.getNext();\n        }\n        if (this.body == null) {\n            this.body = this.getEndInstruction();\n        }\n        setNext(this.body);\n    }\n}<fim_middle>// function below has no smell\n"}