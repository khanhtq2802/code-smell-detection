{"text": "<fim_prefix>/*\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n *\n * Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.\n *\n * Oracle and Java are registered trademarks of Oracle and/or its affiliates.\n * Other names may be trademarks of their respective owners.\n *\n * The contents of this file are subject to the terms of either the GNU\n * General Public License Version 2 only (\"GPL\") or the Common\n * Development and Distribution License(\"CDDL\") (collectively, the\n * \"License\"). You may not use this file except in compliance with the\n * License. You can obtain a copy of the License at\n * http://www.netbeans.org/cddl-gplv2.html\n * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the\n * specific language governing permissions and limitations under the\n * License.  When distributing the software, include this License Header\n * Notice in each file and include the License file at\n * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the GPL Version 2 section of the License file that\n * accompanied this code. If applicable, add the following below the\n * License Header, with the fields enclosed by brackets [] replaced by\n * your own identifying information:\n * \"Portions Copyrighted [year] [name of copyright owner]\"\n *\n * Contributor(s):\n * The Original Software is NetBeans. The Initial Developer of the Original\n * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun\n * Microsystems, Inc. All Rights Reserved.\n *\n * If you wish your version of this file to be governed by only the CDDL\n * or only the GPL Version 2, indicate your decision by adding\n * \"[Contributor] elects to include this software in this distribution\n * under the [CDDL or GPL Version 2] license.\" If you do not indicate a\n * single choice of license, a recipient has the option to distribute\n * your version of this file under either the CDDL, the GPL Version 2 or\n * to extend the choice of license to its licensees as provided above.\n * However, if you add GPL Version 2 code and therefore, elected the GPL\n * Version 2 license, then the option applies only if the new code is\n * made subject to such option by the copyright holder.\n */\npackage org.graalvm.visualvm.lib.ui.components;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport javax.swing.*;\nimport org.graalvm.visualvm.lib.jfluid.global.Platform;\npublic class CellTipManager implements MouseListener, MouseMotionListener, MouseWheelListener {\n    //~ Inner Classes ------------------------------------------------------------------------------------------------------------\n    private class MoveBeforeEnterListener extends MouseMotionAdapter {\n        //~ Methods --------------------------------------------------------------------------------------------------------------\n        public void mouseMoved(MouseEvent e) {\n            initiateCellTip(e);\n        }\n    }\n<fim_suffix>    private class UniversalCellTipListener implements ComponentListener, KeyListener, FocusListener, PropertyChangeListener,\n                                                      HierarchyListener, HierarchyBoundsListener {\n        //~ Methods --------------------------------------------------------------------------------------------------------------\n        public void ancestorMoved(HierarchyEvent e) {\n            hideCellTipForOwner(e.getSource());\n        }\n        public void ancestorResized(HierarchyEvent e) {\n            hideCellTipForOwner(e.getSource());\n        }\n        public void componentHidden(ComponentEvent e) {\n            hideCellTipForOwner(e.getSource());\n        }\n        public void componentMoved(ComponentEvent e) {\n            hideCellTipForOwner(e.getSource());\n        }\n        public void componentResized(ComponentEvent e) {\n            hideCellTipForOwner(e.getSource());\n        }\n        public void componentShown(ComponentEvent e) {\n            hideCellTipForOwner(e.getSource());\n        }\n        public void focusGained(FocusEvent e) {\n            //\n        }\n        public void focusLost(FocusEvent e) {\n            hideCellTipForOwner(e.getSource());\n        }\n        public void hierarchyChanged(HierarchyEvent e) {\n            hideCellTipForOwner(e.getSource());\n        }\n        public void keyPressed(KeyEvent e) {\n            hideCellTipAlways();\n        }\n        public void keyReleased(KeyEvent e) {\n            //\n        }\n        public void keyTyped(KeyEvent e) {\n            //\n        }\n        public void propertyChange(PropertyChangeEvent e) {\n            hideCellTipForOwner(e.getSource());\n        }\n        void registerForComponent(JComponent component) {\n            if (component == null) {\n                return;\n            }\n            component.addComponentListener(this);\n            component.addKeyListener(this);\n            component.addFocusListener(this);\n            component.addPropertyChangeListener(this);\n            component.addHierarchyListener(this);\n            component.addHierarchyBoundsListener(this);\n        }\n        void unregisterForComponent(JComponent component) {\n            if (component == null) {\n                return;\n            }\n            component.removeComponentListener(this);\n            component.removeKeyListener(this);\n            component.removeFocusListener(this);\n            component.removePropertyChangeListener(this);\n            component.removeHierarchyListener(this);\n            component.removeHierarchyBoundsListener(this);\n        }\n        private void hideCellTipAlways() {\n            hideCellTip();\n        }\n        private void hideCellTipForOwner(Object owner) {\n            if (cellTipComponent == owner) {\n                hideCellTip();\n            }\n        }\n    }\n    //~ Static fields/initializers -----------------------------------------------------------------------------------------------\n    private static final CellTipManager sharedInstance = new CellTipManager();\n    //~ Instance fields ----------------------------------------------------------------------------------------------------------\n    private JComponent cellTipComponent;\n    private JToolTip cellTip;\n    private transient Popup cellTipPopup;\n    private MouseMotionListener moveBeforeEnterListener = new MoveBeforeEnterListener();\n    private Rectangle popupFrameRect;\n    private Rectangle popupRect;\n    private UniversalCellTipListener universalCellTipListener = new UniversalCellTipListener();\n    private Window cellTipWindow;\n    private boolean enabled = true;\n    private boolean heavyweightPopupClosed = false;\n    private boolean internalMousePressed = false;\n    //~ Methods ------------------------------------------------------------------------------------------------------------------\n    // --- Public interface ------------------------------------------------------\n    public static CellTipManager sharedInstance() {\n        return sharedInstance;\n    }\n    public void setEnabled(boolean enabled) {\n        this.enabled = enabled;\n        if (!enabled) {\n            hideCellTip();\n        }\n    }\n    public boolean isEnabled() {\n        return enabled;\n    }\n    public void hideCellTip() {\n        hideCellTipWindow();\n        cellTipComponent = null;\n    }\n    public void mouseClicked(MouseEvent event) {\n    }\n    public void mouseDragged(MouseEvent event) {\n    }\n    public void mouseEntered(MouseEvent event) {\n        initiateCellTip(event);\n    }\n    public void mouseExited(MouseEvent event) {\n        boolean shouldHide = true;\n        if ((cellTipWindow != null) && (event.getSource() == cellTipWindow)) {\n            Container cellTipComponentWindow = cellTipComponent.getTopLevelAncestor();\n            Point location = event.getPoint();\n            SwingUtilities.convertPointToScreen(location, cellTipWindow);\n            location.x -= cellTipComponentWindow.getX();\n            location.y -= cellTipComponentWindow.getY();\n            location = SwingUtilities.convertPoint(null, location, cellTipComponent);\n            if ((location.x >= 0) && (location.x < cellTipComponent.getWidth()) && (location.y >= 0)\n                    && (location.y < cellTipComponent.getHeight())) {\n                shouldHide = false;\n            } else {\n                shouldHide = true;\n            }\n        } else if ((event.getSource() == cellTipComponent) && (cellTipPopup != null)) {\n            Window win = SwingUtilities.getWindowAncestor(cellTipComponent);\n            if (win != null) {\n                Point location = SwingUtilities.convertPoint(cellTipComponent, event.getPoint(), win);\n                Rectangle bounds = cellTipComponent.getTopLevelAncestor().getBounds();\n                location.x += bounds.x;\n                location.y += bounds.y;\n                Point loc = new Point(0, 0);\n                SwingUtilities.convertPointToScreen(loc, cellTip);\n                bounds.x = loc.x;\n                bounds.y = loc.y;\n                bounds.width = cellTip.getWidth();\n                bounds.height = cellTip.getHeight();\n                if ((location.x >= bounds.x) && (location.x < (bounds.x + bounds.width)) && (location.y >= bounds.y)\n                        && (location.y < (bounds.y + bounds.height))) {\n                    shouldHide = false;\n                } else {\n                    shouldHide = true;\n                }\n            }\n        }\n        if (shouldHide) {\n            if (cellTipComponent != null) {\n                cellTipComponent.removeMouseMotionListener(this);\n            }\n            hideCellTip();\n        }\n    }\n    public void mouseMoved(MouseEvent event) {\n        if (heavyweightPopupClosed) {\n            heavyweightPopupClosed = false;\n            return;\n        }\n        JComponent component = (JComponent) event.getSource();\n        cellTipComponent = component;\n        showCellTipWindow();\n    }<fim_middle>// class below has no smell\n"}