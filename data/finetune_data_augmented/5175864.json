{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.metron.parsers.lancope;\n\nimport java.lang.invoke.MethodHandles;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.metron.parsers.BasicParser;\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n<fim_suffix>@SuppressWarnings(\"serial\")\npublic class BasicLancopeParser extends BasicParser {\n\t// Sample Lancope Message\n\t// {\"message\":\"<131>Jul 17 15:59:01 smc-01 StealthWatch[12365]: 2014-07-17T15:58:30Z 10.40.10.254 0.0.0.0 Minor High Concern Index The host's concern index has either exceeded the CI threshold or rapidly increased. Observed 36.55M points. Policy maximum allows up to 20M points.\",\"@version\":\"1\",\"@timestamp\":\"2014-07-17T15:56:05.992Z\",\"type\":\"syslog\",\"host\":\"10.122.196.201\"}\n\n\tprivate static final Logger _LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n\n\t@Override\n\tpublic void configure(Map<String, Object> parserConfig) {\n\n\t}\n\n\t@Override\n\tpublic void init() {\n\n\t}\n\n\t//@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic List<JSONObject> parse(byte[] msg) {\n\n\t\tJSONObject payload = null;\n\t\tList<JSONObject> messages = new ArrayList<>();\n\t\ttry {\n\t\t\t\n\t\t\tString raw_message = new String(msg, \"UTF-8\");\n\t\t\t\n\t\t\tpayload = (JSONObject) JSONValue.parse(raw_message);\n\t\t\t\n\t\t\t\n\n\t\t\tString message = payload.get(\"message\").toString();\n\t\t\tString[] parts = message.split(\" \");\n\t\t\tpayload.put(\"ip_src_addr\", parts[6]);\n\t\t\tpayload.put(\"ip_dst_addr\", parts[7]);\n\n\t\t\tString fixed_date = parts[5].replace('T', ' ');\n\t\t\tfixed_date = fixed_date.replace('Z', ' ').trim();\n\n\t\t\tSimpleDateFormat formatter = new SimpleDateFormat(\n\t\t\t\t\t\"yyyy-MM-dd HH:mm:ss\");\n\n\t\t\tDate date;\n\n\t\t\tdate = formatter.parse(fixed_date);\n\t\t\tlong timestamp = date.getTime();\n\t\t\tpayload.put(\"timestamp\", timestamp);\n\n\t\t\tpayload.remove(\"@timestamp\");\n\t\t\tpayload.remove(\"message\");\n\t\t\tpayload.put(\"original_string\", message);\n\n\t\t\tmessages.add(payload);\n\t\t\treturn messages;\n\t\t} catch (Exception e) {\n\n\t\t\t_LOG.error(\"Unable to parse message: {}\", payload.toJSONString());\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t\n}<fim_middle>// class below has no smell\n"}