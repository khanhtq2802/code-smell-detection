{"text": "<fim_prefix>\n<fim_suffix>@Mojo(name = \"cgen\", defaultPhase = LifecyclePhase.GENERATE_SOURCES)\npublic class CayenneGeneratorMojo extends AbstractMojo {\n    public static final File[] NO_FILES = new File[0];\n    /**\n\t * Path to additional DataMap XML files to use for class generation.\n\t */\n    @Parameter\n\tprivate File additionalMaps;\n\t/**\n\t * Whether we are generating classes for the client tier in a Remote Object\n\t * Persistence application. Default is <code>false</code>.\n\t */\n\t@Parameter\n\tprivate Boolean client;\n\t/**\n\t * Default destination directory for Java classes (ignoring their package names).\n\t */\n\t@Parameter(defaultValue = \"${project.build.sourceDirectory}\")\n\tprivate File defaultDir;\n\t/**\n\t * Destination directory for Java classes (ignoring their package names).\n\t */\n\t@Parameter\n\tprivate File destDir;\n\t/**\n\t * Specify generated file encoding if different from the default on current\n\t * platform. Target encoding must be supported by the JVM running Maven\n\t * build. Standard encodings supported by Java on all platforms are\n\t * US-ASCII, ISO-8859-1, UTF-8, UTF-16BE, UTF-16LE, UTF-16. See Sun Java\n\t * Docs for java.nio.charset.Charset for more information.\n\t */\n\t@Parameter\n\tprivate String encoding;\n\t/**\n\t * Entities (expressed as a perl5 regex) to exclude from template\n\t * generation. (Default is to include all entities in the DataMap).\n\t */\n\t@Parameter\n\tprivate String excludeEntities;\n\t/**\n\t * Entities (expressed as a perl5 regex) to include in template generation.\n\t * (Default is to include all entities in the DataMap).\n\t */\n\t@Parameter\n\tprivate String includeEntities;\n\t/**\n\t * @since 4.1\n\t * Embeddables (expressed as a perl5 regex) to exclude from template\n\t * generation. (Default is to include all embeddables in the DataMap).\n\t */\n\t@Parameter\n\tprivate String excludeEmbeddables;\n\t/**\n\t * If set to <code>true</code>, will generate subclass/superclass pairs,\n\t * with all generated code included in superclass (default is\n\t * <code>true</code>).\n\t */\n\t@Parameter\n\tprivate Boolean makePairs;\n\t/**\n\t * DataMap XML file to use as a base for class generation.\n\t */\n\t@Parameter(required = true)\n\tprivate File map;\n\t/**\n\t * Specifies generator iteration target. &quot;entity&quot; performs one\n\t * iteration for each selected entity. &quot;datamap&quot; performs one\n\t * iteration per datamap (This is always one iteration since cgen currently\n\t * supports specifying one-and-only-one datamap). (Default is &quot;entity&quot;)\n\t */\n\t@Parameter\n\tprivate String mode;\n\t/**\n\t * Name of file for generated output. (Default is &quot;*.java&quot;)\n\t */\n\t@Parameter\n\tprivate String outputPattern;\n\t/**\n\t * If set to <code>true</code>, will overwrite older versions of generated\n\t * classes. Ignored unless makepairs is set to <code>false</code>.\n\t */\n\t@Parameter\n\tprivate Boolean overwrite;\n\t/**\n\t * Java package name of generated superclasses. Ignored unless\n\t * <code>makepairs</code> set to <code>true</code>. If omitted, each\n\t * superclass will be assigned the same package as subclass. Note that\n\t * having superclass in a different package would only make sense when\n\t * <code>usepkgpath</code> is set to <code>true</code>. Otherwise classes\n\t * from different packages will end up in the same directory.\n\t */\n\t@Parameter\n\tprivate String superPkg;\n\t/**\n\t * Location of Velocity template file for Entity superclass generation.\n\t * Ignored unless <code>makepairs</code> set to <code>true</code>. If\n\t * omitted, default template is used.\n\t */\n\t@Parameter\n\tprivate String superTemplate;\n\t/**\n\t * Location of Velocity template file for Entity class generation. If\n\t * omitted, default template is used.\n\t */\n\t@Parameter\n\tprivate String template;\n\t/**\n\t * Location of Velocity template file for Embeddable superclass generation.\n\t * Ignored unless <code>makepairs</code> set to <code>true</code>. If\n\t * omitted, default template is used.\n\t */\n\t@Parameter\n\tprivate String embeddableSuperTemplate;\n\t/**\n\t * Location of Velocity template file for Embeddable class generation. If\n\t * omitted, default template is used.\n\t */\n\t@Parameter\n\tprivate String embeddableTemplate;\n\t/**\n\t * If set to <code>true</code> (default), a directory tree will be generated\n\t * in \"destDir\" corresponding to the class package structure, if set to\n\t * <code>false</code>, classes will be generated in &quot;destDir&quot;\n\t * ignoring their package.\n\t */\n\t@Parameter\n\tprivate Boolean usePkgPath;\n    /**\n     * If set to <code>true</code>, will generate String Property names.\n     * Default is <code>false</code>.\n     */\n    @Parameter\n    private Boolean createPropertyNames;\n\t/**\n\t * If set to <code>true</code>, will skip file modification time validation and regenerate all.\n\t * Default is <code>false</code>.\n\t *\n\t * @since 4.1\n\t */\n\t@Parameter(defaultValue = \"false\", property = \"force\")\n\tprivate boolean force;\n\t@Parameter\n\tprivate String queryTemplate;\n\t@Parameter\n\tprivate String querySuperTemplate;\n    /**\n     * If set to <code>true</code>, will generate PK attributes as Properties.\n     * Default is <code>false</code>.\n     * @since 4.1\n     */\n    @Parameter\n    private Boolean createPKProperties;\n    private transient Injector injector;\n    private static final Logger logger = LoggerFactory.getLogger(CayenneGeneratorMojo.class);\n    private boolean useConfigFromDataMap;\n\tpublic void execute() throws MojoExecutionException, MojoFailureException {\n\t\t// Create the destination directory if necessary.\n\t\t// TODO: (KJM 11/2/06) The destDir really should be added as a\n\t\t// compilation resource for maven.\n\t\tinjector = new ToolsInjectorBuilder()\n\t\t\t\t.addModule(new ToolsModule(LoggerFactory.getLogger(CayenneGeneratorMojo.class)))\n\t\t\t\t.create();\n\t\tLogger logger = new MavenLogger(this);\n\t\tCayenneGeneratorMapLoaderAction loaderAction = new CayenneGeneratorMapLoaderAction(injector);\n\t\tloaderAction.setMainDataMapFile(map);\n\t\ttry {\n\t\t\tloaderAction.setAdditionalDataMapFiles(convertAdditionalDataMaps());\n\t\t\tDataMap dataMap = loaderAction.getMainDataMap();\n\t\t\tClassGenerationAction generator = createGenerator(dataMap);\n\t\t\tCayenneGeneratorEntityFilterAction filterEntityAction = new CayenneGeneratorEntityFilterAction();\n\t\t\tfilterEntityAction.setNameFilter(NamePatternMatcher.build(logger, includeEntities, excludeEntities));\n\t\t\tCayenneGeneratorEmbeddableFilterAction filterEmbeddableAction = new CayenneGeneratorEmbeddableFilterAction();\n\t\t\tfilterEmbeddableAction.setNameFilter(NamePatternMatcher.build(logger, null, excludeEmbeddables));\n\t\t\tfilterEntityAction.setClient(generator.getCgenConfiguration().isClient());\n\t\t\tgenerator.setLogger(logger);\n\t\t\tif(force) {\n\t\t\t\t// will (re-)generate all files\n\t\t\t\tgenerator.getCgenConfiguration().setForce(true);\n\t\t\t}\n\t\t\tgenerator.getCgenConfiguration().setTimestamp(map.lastModified());\n\t\t\tif(!hasConfig() && useConfigFromDataMap) {\n\t\t\t\tgenerator.prepareArtifacts();\n\t\t\t} else {\n\t\t\t\tgenerator.addEntities(filterEntityAction.getFilteredEntities(dataMap));\n\t\t\t\tgenerator.addEmbeddables(filterEmbeddableAction.getFilteredEmbeddables(dataMap));\n\t\t\t\tgenerator.addQueries(dataMap.getQueryDescriptors());\n\t\t\t}\n\t\t\tgenerator.execute();\n\t\t} catch (Exception e) {\n\t\t\tthrow new MojoExecutionException(\"Error generating classes: \", e);\n\t\t}\n\t}\n\t/**\n\t * Loads and returns DataMap based on <code>cgenConfiguration</code> attribute.\n\t */\n\tprotected File[] convertAdditionalDataMaps() throws Exception {\n\t\tif (additionalMaps == null) {\n\t\t\treturn NO_FILES;\n\t\t}\n\t\tif (!additionalMaps.isDirectory()) {\n\t\t\tthrow new MojoFailureException(\"'additionalMaps' must be a directory.\");\n\t\t}\n        return additionalMaps.listFiles(\n        \t\t(dir, name) -> name != null && name.toLowerCase().endsWith(\".map.xml\")\n\t\t);\n\t}\n\tprivate boolean hasConfig() {<fim_middle>// class below is blob\n"}