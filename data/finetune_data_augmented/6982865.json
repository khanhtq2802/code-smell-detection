{"text": "<fim_prefix>/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.j2cl.transpiler.readable.jsconstructor;\n\nimport jsinterop.annotations.JsConstructor;\nimport jsinterop.annotations.JsType;\n\n/**\n * Restrictions on JsConstructor:\n *\n * <p>1. A class can have only one JsConstructor.\n * <p>2. Other constructors must delegate to the JsConstructor.\n *\n * <p>Restrictions on subclass that extends a class with JsConstructor:\n *\n * <p>(Including the implicit default constructor and default super call)\n * <p>1. There is one and only one constructor that does not delegate to any other constructor.\n * <p>2. The super() call in the delegated constructor must invoke the delegated constructor in its\n * super class.\n * <p>3. Other constructors must delegate to the delegated constructor.\n *\n * <p>Test scenarios:\n * ChildClass\\ParentClass   RegularClass    JsConstructorSubClass       JsConstructorClass\n * RegularClass                normal case      N/A                         N/A\n * JsConstructorSubClass        N/A             class E                     class C\n * JsConstructorClass           class B         class F                     class D\n */\npublic class JsConstructorClass {\n  /**\n   * A regular class (no JsConstructor), with two constructors.\n   */\n  public static class A {\n    public int fA = 1;\n\n    public A(int x) {\n      this.fA = x;\n    }\n\n    public A() {}\n  }\n\n  /**\n   * A class with JsConstructor, which extends a regular class.\n   */\n  public static class B extends A {\n    public int fB = 2;\n\n    @JsConstructor\n    public B(int x) {\n      super(x + 1);\n      this.fB = 3;\n    }\n\n    public B() {\n      this(10); // must call this(int).\n      this.fB = 4;\n    }\n\n    public B(int x, int y) {\n      this(x + y);\n      this.fB = x * y;\n    }\n  }\n\n  /**\n   * A regular class (no JsConstructor), which extends a JsConstructor class.\n   */\n<fim_suffix>  public static class C extends B {\n    public int fC = 1;\n\n    @JsConstructor\n    public C(int x) {\n      super(x * 2); // must call super(int), cannot call super().\n      this.fC = 6;\n    }\n\n    public C(int x, int y) {\n      this(x + y); // must call this(int);\n      this.fC = 7;\n    }\n  }\n\n  /**\n   * A class with JsConstructor, which extends a JsConstructor class.\n   */\n  public static class D extends B {\n    public int fD = 8;\n\n    @JsConstructor\n    public D() {\n      super(9); // must call super(int), cannot call super().\n      this.fD = 10;\n    }\n\n    public D(int x) {\n      this(); // must call this().\n      this.fD = x;\n    }\n  }\n\n  /**\n   * A regular class (no JsConstructor), which extends a subclass of a JsConstructor class.\n   */\n  public static class E extends C {\n    public int fE = 11;\n\n    @JsConstructor\n    public E() {\n      super(10); // must call super(int), cannot call super(int, int).\n      this.fE = 12;\n    }\n  }\n\n  /**\n   * A JsConstructor class, which extends a subclass of a JsConstructor class.\n   */\n  public static class F extends C {\n    public int fF = 13;\n\n    @JsConstructor\n    public F(int x) {\n      super(x + 2); // must call super(int), cannot call super(int, int).\n      this.fF = x + 3;\n    }\n  }\n\n  /**\n   * JsType class with default constructor.\n   */\n  @JsType\n  public static class G {}\n\n  /** Subclass of a JsType class with default constructor. */\n  public static class H extends G {\n    @JsConstructor\n    public H() {}\n  }\n\n  public static class Varargs extends A {\n    @JsConstructor\n    public Varargs(int... args) {\n      super(args[1]);\n    }\n  }\n\n  public static class SubVarargs extends Varargs {\n    @JsConstructor\n    public SubVarargs(Object i, int... args) {\n      super(args);\n    }\n\n    public SubVarargs(int j) {\n      this(new Object(), j);\n    }\n\n    static void subNativeInvocation() {\n      SubVarargs unusedS1 = new SubVarargs(2);\n      SubVarargs unusedS2 = new SubVarargs(new Object(), 1, 2, 3);\n    }\n  }\n\n  @SuppressWarnings(\"ClassCanBeStatic\")\n  public class InstanceVarargs extends A {\n    @JsConstructor\n    public InstanceVarargs(int... args) {\n      super(args[1]);\n    }\n  }\n\n  public static class RegularType {\n    public RegularType(Object b) {}\n  }\n\n  public static class JsConstructorSubtypeOfRegularType extends RegularType {\n    @JsConstructor\n    public JsConstructorSubtypeOfRegularType(Object object) {\n      super(object);\n    }\n\n    public JsConstructorSubtypeOfRegularType() {\n      this(new Object());\n    }\n  }\n}<fim_middle>// class below has no smell\n"}