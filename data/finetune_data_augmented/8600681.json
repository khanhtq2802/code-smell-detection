{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hbase.master;\n\nimport org.apache.hadoop.hbase.metrics.BaseSourceImpl;\nimport org.apache.hadoop.hbase.metrics.OperationMetrics;\nimport org.apache.hadoop.metrics2.MetricHistogram;\nimport org.apache.hadoop.metrics2.lib.MutableFastCounter;\nimport org.apache.hadoop.metrics2.lib.MutableGaugeLong;\nimport org.apache.yetus.audience.InterfaceAudience;\n\n<fim_suffix>@InterfaceAudience.Private\npublic class MetricsAssignmentManagerSourceImpl\n    extends BaseSourceImpl\n    implements MetricsAssignmentManagerSource {\n\n  private MutableGaugeLong ritGauge;\n  private MutableGaugeLong ritCountOverThresholdGauge;\n  private MutableGaugeLong ritOldestAgeGauge;\n  private MetricHistogram ritDurationHisto;\n\n  private MutableFastCounter operationCounter;\n\n  private OperationMetrics assignMetrics;\n  private OperationMetrics unassignMetrics;\n  private OperationMetrics moveMetrics;\n  private OperationMetrics reopenMetrics;\n  private OperationMetrics openMetrics;\n  private OperationMetrics closeMetrics;\n  private OperationMetrics splitMetrics;\n  private OperationMetrics mergeMetrics;\n\n  public MetricsAssignmentManagerSourceImpl() {\n    this(METRICS_NAME, METRICS_DESCRIPTION, METRICS_CONTEXT, METRICS_JMX_CONTEXT);\n  }\n\n  public MetricsAssignmentManagerSourceImpl(String metricsName,\n                                            String metricsDescription,\n                                            String metricsContext, String metricsJmxContext) {\n    super(metricsName, metricsDescription, metricsContext, metricsJmxContext);\n  }\n\n  public void init() {\n    ritGauge = metricsRegistry.newGauge(RIT_COUNT_NAME, RIT_COUNT_DESC, 0L);\n    ritCountOverThresholdGauge = metricsRegistry.newGauge(RIT_COUNT_OVER_THRESHOLD_NAME,\n        RIT_COUNT_OVER_THRESHOLD_DESC,0L);\n    ritOldestAgeGauge = metricsRegistry.newGauge(RIT_OLDEST_AGE_NAME, RIT_OLDEST_AGE_DESC, 0L);\n    ritDurationHisto = metricsRegistry.newTimeHistogram(RIT_DURATION_NAME, RIT_DURATION_DESC);\n    operationCounter = metricsRegistry.getCounter(OPERATION_COUNT_NAME, 0L);\n\n    /**\n     * NOTE: Please refer to HBASE-9774 and HBASE-14282. Based on these two issues, HBase is\n     * moving away from using Hadoop's metric2 to having independent HBase specific Metrics. Use\n     * {@link BaseSourceImpl#registry} to register the new metrics.\n     */\n    assignMetrics = new OperationMetrics(registry, ASSIGN_METRIC_PREFIX);\n    unassignMetrics = new OperationMetrics(registry, UNASSIGN_METRIC_PREFIX);\n    moveMetrics = new OperationMetrics(registry, MOVE_METRIC_PREFIX);\n    reopenMetrics = new OperationMetrics(registry, REOPEN_METRIC_PREFIX);\n    openMetrics = new OperationMetrics(registry, OPEN_METRIC_PREFIX);\n    closeMetrics = new OperationMetrics(registry, CLOSE_METRIC_PREFIX);\n    splitMetrics = new OperationMetrics(registry, SPLIT_METRIC_PREFIX);\n    mergeMetrics = new OperationMetrics(registry, MERGE_METRIC_PREFIX);\n  }\n\n  @Override\n  public void setRIT(final int ritCount) {\n    ritGauge.set(ritCount);\n  }\n\n  @Override\n  public void setRITCountOverThreshold(final int ritCount) {\n    ritCountOverThresholdGauge.set(ritCount);\n  }\n\n  @Override\n  public void setRITOldestAge(final long ritOldestAge) {\n    ritOldestAgeGauge.set(ritOldestAge);\n  }\n\n  @Override\n  public void incrementOperationCounter() {\n    operationCounter.incr();\n  }\n\n  @Override\n  public void updateRitDuration(long duration) {\n    ritDurationHisto.add(duration);\n  }\n\n  @Override\n  public OperationMetrics getAssignMetrics() {\n    return assignMetrics;\n  }\n\n  @Override\n  public OperationMetrics getUnassignMetrics() {\n    return unassignMetrics;\n  }\n\n  @Override\n  public OperationMetrics getSplitMetrics() {\n    return splitMetrics;\n  }\n\n  @Override\n  public OperationMetrics getMergeMetrics() {\n    return mergeMetrics;\n  }\n\n  @Override\n  public OperationMetrics getMoveMetrics() {\n    return moveMetrics;\n  }\n\n  @Override\n  public OperationMetrics getReopenMetrics() {\n    return reopenMetrics;\n  }\n\n  @Override\n  public OperationMetrics getOpenMetrics() {\n    return openMetrics;\n  }\n\n  @Override\n  public OperationMetrics getCloseMetrics() {\n    return closeMetrics;\n  }\n}<fim_middle>// class below is data class\n"}