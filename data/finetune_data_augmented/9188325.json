{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2007 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *  Actuate Corporation  - initial API and implementation\n *******************************************************************************/\n\npackage org.eclipse.birt.chart.examples.view.models;\n\nimport org.eclipse.birt.chart.model.Chart;\nimport org.eclipse.birt.chart.model.ChartWithAxes;\nimport org.eclipse.birt.chart.model.attribute.AxisType;\nimport org.eclipse.birt.chart.model.attribute.IntersectionType;\nimport org.eclipse.birt.chart.model.attribute.LegendItemType;\nimport org.eclipse.birt.chart.model.attribute.Position;\nimport org.eclipse.birt.chart.model.attribute.RiserType;\nimport org.eclipse.birt.chart.model.attribute.TickStyle;\nimport org.eclipse.birt.chart.model.attribute.impl.ColorDefinitionImpl;\nimport org.eclipse.birt.chart.model.component.Axis;\nimport org.eclipse.birt.chart.model.component.Series;\nimport org.eclipse.birt.chart.model.component.impl.SeriesImpl;\nimport org.eclipse.birt.chart.model.data.BaseSampleData;\nimport org.eclipse.birt.chart.model.data.DataFactory;\nimport org.eclipse.birt.chart.model.data.NumberDataSet;\nimport org.eclipse.birt.chart.model.data.OrthogonalSampleData;\nimport org.eclipse.birt.chart.model.data.SampleData;\nimport org.eclipse.birt.chart.model.data.SeriesDefinition;\nimport org.eclipse.birt.chart.model.data.TextDataSet;\nimport org.eclipse.birt.chart.model.data.impl.NumberDataSetImpl;\nimport org.eclipse.birt.chart.model.data.impl.SeriesDefinitionImpl;\nimport org.eclipse.birt.chart.model.data.impl.TextDataSetImpl;\nimport org.eclipse.birt.chart.model.impl.ChartWithAxesImpl;\nimport org.eclipse.birt.chart.model.layout.Legend;\nimport org.eclipse.birt.chart.model.layout.Plot;\nimport org.eclipse.birt.chart.model.type.BarSeries;\nimport org.eclipse.birt.chart.model.type.impl.BarSeriesImpl;\n\n/**\n * \n */\n\n<fim_suffix>public class Tube\n{\n\n\tpublic static final Chart createTube( )\n\t{\n\t\tChartWithAxes cwaTube = ChartWithAxesImpl.create( );\n\t\tcwaTube.setType( \"Tube Chart\" ); //$NON-NLS-1$\n\t\tcwaTube.setSubType( \"Side-by-side\" ); //$NON-NLS-1$\n\t\t// Plot\n\t\tcwaTube.getBlock( ).setBackground( ColorDefinitionImpl.WHITE( ) );\n\t\tcwaTube.getBlock( ).getOutline( ).setVisible( true );\n\t\tPlot p = cwaTube.getPlot( );\n\t\tp.getClientArea( ).setBackground( ColorDefinitionImpl.create( 255,\n\t\t\t\t255,\n\t\t\t\t225 ) );\n\n\t\t// Title\n\t\tcwaTube.getTitle( )\n\t\t\t\t.getLabel( )\n\t\t\t\t.getCaption( )\n\t\t\t\t.setValue( \"Side-by-side Tube Chart\" ); //$NON-NLS-1$\n\n\t\t// Legend\n\t\tLegend lg = cwaTube.getLegend( );\n\t\tlg.setItemType( LegendItemType.CATEGORIES_LITERAL );\n\n\t\t// X-Axis\n\t\tAxis xAxisPrimary = cwaTube.getPrimaryBaseAxes( )[0];\n\n\t\txAxisPrimary.setType( AxisType.TEXT_LITERAL );\n\t\txAxisPrimary.getMajorGrid( ).setTickStyle( TickStyle.BELOW_LITERAL );\n\t\txAxisPrimary.getOrigin( ).setType( IntersectionType.MIN_LITERAL );\n\n\t\t// Y-Axis\n\t\tAxis yAxisPrimary = cwaTube.getPrimaryOrthogonalAxis( xAxisPrimary );\n\t\tyAxisPrimary.getMajorGrid( ).setTickStyle( TickStyle.LEFT_LITERAL );\n\t\tyAxisPrimary.setType( AxisType.LINEAR_LITERAL );\n\t\tyAxisPrimary.getLabel( ).getCaption( ).getFont( ).setRotation( 90 );\n\n\t\t// Data Set\n\t\tTextDataSet categoryValues = TextDataSetImpl.create( new String[]{\n\t\t\t\t\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"} ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$\n\t\tNumberDataSet orthoValues1 = NumberDataSetImpl.create( new double[]{\n\t\t\t\t25, 35, 15, 5, 20\n\t\t} );\n\t\tNumberDataSet orthoValues2 = NumberDataSetImpl.create( new double[]{\n\t\t\t\t5, 10, 25, 10, 5\n\t\t} );\n\n\t\tSampleData sd = DataFactory.eINSTANCE.createSampleData( );\n\t\tBaseSampleData sdBase = DataFactory.eINSTANCE.createBaseSampleData( );\n\t\tsdBase.setDataSetRepresentation( \"\" );//$NON-NLS-1$\n\t\tsd.getBaseSampleData( ).add( sdBase );\n\n\t\tOrthogonalSampleData sdOrthogonal1 = DataFactory.eINSTANCE.createOrthogonalSampleData( );\n\t\tsdOrthogonal1.setDataSetRepresentation( \"\" );//$NON-NLS-1$\n\t\tsdOrthogonal1.setSeriesDefinitionIndex( 0 );\n\t\tsd.getOrthogonalSampleData( ).add( sdOrthogonal1 );\n\n\t\tOrthogonalSampleData sdOrthogonal2 = DataFactory.eINSTANCE.createOrthogonalSampleData( );\n\t\tsdOrthogonal2.setDataSetRepresentation( \"\" );//$NON-NLS-1$\n\t\tsdOrthogonal2.setSeriesDefinitionIndex( 1 );\n\t\tsd.getOrthogonalSampleData( ).add( sdOrthogonal2 );\n\n\t\tcwaTube.setSampleData( sd );\n\n\t\t// X-Series\n\t\tSeries seCategory = SeriesImpl.create( );\n\t\tseCategory.setDataSet( categoryValues );\n\n\t\tSeriesDefinition sdX = SeriesDefinitionImpl.create( );\n\t\tsdX.getSeriesPalette( ).shift( 0 );\n\t\txAxisPrimary.getSeriesDefinitions( ).add( sdX );\n\t\tsdX.getSeries( ).add( seCategory );\n\n\t\t// Y-Series\n\t\tBarSeries bs1 = (BarSeries) BarSeriesImpl.create( );\n\t\tbs1.setRiser( RiserType.TUBE_LITERAL );\n\t\tbs1.setDataSet( orthoValues1 );\n\t\tbs1.getLabel( ).setVisible( true );\n\t\tbs1.setLabelPosition( Position.INSIDE_LITERAL );\n\n\t\tBarSeries bs2 = (BarSeries) BarSeriesImpl.create( );\n\t\tbs2.setRiser( RiserType.TUBE_LITERAL );\n\t\tbs2.setDataSet( orthoValues2 );\n\t\tbs2.getLabel( ).setVisible( true );\n\t\tbs2.setLabelPosition( Position.INSIDE_LITERAL );\n\n\t\tSeriesDefinition sdY = SeriesDefinitionImpl.create( );\n\t\tyAxisPrimary.getSeriesDefinitions( ).add( sdY );\n\t\tsdY.getSeries( ).add( bs1 );\n\t\tsdY.getSeries( ).add( bs2 );\n\n\t\treturn cwaTube;\n\t}\n}<fim_middle>// class below has no smell\n"}