{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.pluto.container.impl;\n\nimport static javax.portlet.MimeResponse.Copy.PUBLIC;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Locale;\n\nimport javax.portlet.ActionURL;\nimport javax.portlet.RenderURL;\nimport javax.portlet.ResourceResponse;\nimport javax.portlet.ResourceURL;\n\nimport org.apache.pluto.container.PortletResourceResponseContext;\n\npublic class ResourceResponseImpl extends MimeResponseImpl implements ResourceResponse\n{\n    \n    private static final String DEFAULT_CONTAINER_CHARSET = \"UTF-8\";\n    \n    private boolean canSetLocaleEncoding = true;\n    private String charset;\n    private String requestCacheLevel;\n    private PortletResourceResponseContext responseContext;\n    \n    public ResourceResponseImpl(PortletResourceResponseContext responseContext, String requestCacheLevel)\n    {\n        super(responseContext);\n        this.responseContext = responseContext;\n        this.requestCacheLevel = requestCacheLevel == null ? ResourceURL.PAGE : requestCacheLevel;\n    }\n\t\n    @Override\n    public ActionURL createActionURL(Copy option) {\n       if (ResourceURL.PAGE.equals(requestCacheLevel)) {\n          return new ActionURLImpl(responseContext, option);\n       } else {\n          throw new IllegalStateException(\"Not allowed to create an ActionURL with current request cacheability level \"+requestCacheLevel);\n       }\n    }\n\n    @Override\n    public RenderURL createRenderURL(Copy option) {\n       if (ResourceURL.PAGE.equals(requestCacheLevel)) {\n          return new RenderURLImpl(responseContext, option);\n       } else {\n          throw new IllegalStateException(\"Not allowed to create a RenderURL with current request cacheability level \"+requestCacheLevel);\n       }\n    }\n   \n    @SuppressWarnings(\"unchecked\")\n   @Override\n    public ActionURL createActionURL()\n    {\n        if (ResourceURL.PAGE.equals(requestCacheLevel))\n        {\n            return new ActionURLImpl(responseContext, PUBLIC);\n        }\n        throw new IllegalStateException(\"Not allowed to create an ActionURL with current request cacheability level \"+requestCacheLevel);\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n   @Override\n    public RenderURL createRenderURL()\n    {\n        if (ResourceURL.PAGE.equals(requestCacheLevel))\n        {\n            return new RenderURLImpl(responseContext, PUBLIC);\n        }\n        throw new IllegalStateException(\"Not allowed to create a RenderURL with current request cacheability level \"+requestCacheLevel);\n    }\n\n    @Override\n    public ResourceURL createResourceURL()\n    {\n        return new ResourceURLImpl(responseContext, requestCacheLevel);\n    }\n    \n    @Override\n    public PrintWriter getWriter()\n    throws IllegalStateException, IOException\n    {\n        if (charset == null)\n        {\n            // enforce the default Container encoding == UTF-8 if encoding hasn't been set yet.\n            setCharacterEncoding(DEFAULT_CONTAINER_CHARSET);\n        }\n        return super.getWriter();\n    }\n    \n    @Override\n    public String getCharacterEncoding()\n    {\n        return charset != null ? charset : DEFAULT_CONTAINER_CHARSET;\n    }\n    \n\tpublic void setCharacterEncoding(String encoding)\n\t{\n        // ensure client hasn't passed us the full name/value pair; i.e\n        // charset=utf-8\n        int index = encoding.indexOf('=');\n        if (index != -1 && index < encoding.length()-1)\n        {\n          encoding = encoding.substring(index+1).trim();\n        }\n            \n\t    if (encoding != null && encoding.length() > 0)\n\t    {\n\t        this.charset = encoding;\n\t        responseContext.setCharacterEncoding(charset);\n\t        canSetLocaleEncoding = false;\n\t    }\n\t}\n\t\n\t@Override\n\tpublic void setContentType(String contentType)\n\t{\n\t    if (contentType != null)\n\t    {\n\t        int index = contentType.indexOf(';');\n\t        if (index != -1 && index < contentType.length()-1) \n\t        {\n\t            String encoding = contentType.substring(index+1).trim();\n\t            if (encoding.length() > 0)\n\t            {\n\t                setCharacterEncoding(encoding);\n\t            }\n\t        }\n\t        super.setContentType(contentType);\n\t    }\n\t}\n\n\tpublic void setContentLength(int len)\n\t{\n\t    responseContext.setContentLength(len);\n\t}\n\n<fim_suffix>\tpublic void setLocale(Locale locale)\n\t{\n\t    if (locale != null)\n\t    {\n            responseContext.setLocale(locale);\n\t        if (canSetLocaleEncoding)\n\t        {\n\t            String encoding = getPortletWindow().getPortletDefinition().getApplication().getLocaleEncodingMappings().get(locale);\n\t            if (encoding != null)\n\t            {\n\t                setCharacterEncoding(encoding);\n\t                // allow repeated setLocale usage for characterEncoding\n\t                canSetLocaleEncoding = true;\n\t            }\n\t        }\n\t    }\n\t}\n\n\t@Override\n   public void setStatus(int sc) {\n      responseContext.setStatus(sc);\n   }\n\t\n\t@Override\n\tpublic int getStatus() {\n\t   return responseContext.getStatus();\n\t}\n\t\n\t@Override\n\tpublic void setContentLengthLong(long len) {\n      responseContext.setContentLengthLong(len);\n\t}\n}<fim_middle>// function below has no smell\n"}