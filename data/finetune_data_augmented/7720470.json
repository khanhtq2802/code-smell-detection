{"text": "<fim_prefix>import static com.vmware.admiral.common.SwaggerDocumentation.DataTypes.DATA_TYPE_STRING;\nimport static com.vmware.admiral.common.SwaggerDocumentation.LINE_BREAK;\nimport static com.vmware.admiral.common.SwaggerDocumentation.ParamTypes.PARAM_TYPE_QUERY;\nimport static com.vmware.admiral.common.SwaggerDocumentation.Tags.PKS_CLUSTER_LIST_TAG;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiResponse;\nimport io.swagger.annotations.ApiResponses;\nimport com.vmware.admiral.adapter.common.AdapterRequest;\nimport com.vmware.admiral.adapter.pks.PKSOperationType;\nimport com.vmware.admiral.adapter.pks.entities.PKSCluster;\nimport com.vmware.admiral.common.ManagementUriParts;\nimport com.vmware.admiral.common.util.AssertUtil;\nimport com.vmware.admiral.common.util.PropertyUtils;\nimport com.vmware.admiral.common.util.QueryUtil;\nimport com.vmware.admiral.common.util.ReflectionUtils;\nimport com.vmware.admiral.common.util.ReflectionUtils.CustomPath;\nimport com.vmware.admiral.common.util.ServiceDocumentQuery;\nimport com.vmware.admiral.service.common.ServiceTaskCallback;\nimport com.vmware.photon.controller.model.resources.ComputeService.ComputeState;\nimport com.vmware.photon.controller.model.resources.ResourceState;\nimport com.vmware.xenon.common.Operation;\nimport com.vmware.xenon.common.StatelessService;\nimport com.vmware.xenon.common.UriUtils;\nimport com.vmware.xenon.common.Utils;\nimport com.vmware.xenon.services.common.QueryTask;\nimport com.vmware.xenon.services.common.QueryTask.QuerySpecification;\n/**\n * Help service to retrieve existing Kubernetes clusters for a given PKS endpoint.\n * A flag indicates whether each cluster has been added to Admiral.\n */\n<fim_suffix>@Api(tags = {PKS_CLUSTER_LIST_TAG})\n@Path(\"\")\npublic class PKSClusterListService extends StatelessService {\n    public static final String SELF_LINK = ManagementUriParts.PKS_CLUSTERS;\n    static {\n        ReflectionUtils.setAnnotation(PKSClusterListService.class, Path.class,\n                new CustomPath(SELF_LINK));\n    }\n    @Override\n    public void handleRequest(Operation op) {\n        if (op.getAction() != Action.GET) {\n            Operation.failActionNotSupported(op);\n            return;\n        }\n        handleGet(op);\n    }\n    @Override\n    @GET\n    @Path(BASE_PATH)\n    @ApiOperation(\n            value = \"List one or all PKS clusters\",\n            notes = \"Retrieves all PKS clusters if no endpoint link is supplied.\" + LINE_BREAK + LINE_BREAK +\n                    \"Retrieves a single PKS cluster when an enpoint link is supplied.\",\n            nickname = \"getSingleOrAll\",\n            response = PKSCluster.class,\n            responseContainer = \"List\")\n    @ApiResponses({\n            @ApiResponse(code = Operation.STATUS_CODE_OK, message = \"\"),\n            @ApiResponse(code = Operation.STATUS_CODE_NOT_FOUND, message = \"\")})\n    @ApiImplicitParams({\n            @ApiImplicitParam(\n                    name = PKS_ENDPOINT_QUERY_PARAM_NAME,\n                    value = \"The endpoint link from which to retrieve the PKS cluster/s.\",\n                    dataType = DATA_TYPE_STRING,\n                    paramType = PARAM_TYPE_QUERY,\n                    required = true),\n            @ApiImplicitParam(\n                    name = PKS_CLUSTER_QUERY_PARAM_NAME,\n                    value = \"The name of the cluster to retrieve. If supplied, retrieves only the specified cluster.\",\n                    dataType = DATA_TYPE_STRING,\n                    paramType = PARAM_TYPE_QUERY)})\n    public void handleGet(Operation op) {\n        try {\n            Map<String, String> queryParams = UriUtils.parseUriQueryParams(op.getUri());\n            String endpointLink = queryParams.get(PKS_ENDPOINT_QUERY_PARAM_NAME);\n            AssertUtil.assertNotNullOrEmpty(endpointLink, PKS_ENDPOINT_QUERY_PARAM_NAME);\n            String clusterName = queryParams.get(PKS_CLUSTER_QUERY_PARAM_NAME);\n            if (clusterName != null && !clusterName.isEmpty()) {\n                handleGetRequest(op, endpointLink, clusterName);\n            } else {\n                handleListRequest(op, endpointLink);\n            }\n        } catch (Exception x) {\n            logSevere(x);\n            op.fail(x);\n        }\n    }\n    private void handleGetRequest(Operation op, String endpointLink, String clusterName) {\n        AdapterRequest request = new AdapterRequest();\n        request.operationTypeId = PKSOperationType.GET_CLUSTER.id;\n        request.serviceTaskCallback = ServiceTaskCallback.createEmpty();\n        request.resourceReference = UriUtils.buildUri(getHost(), endpointLink);\n        request.customProperties = new HashMap<>(2);\n        request.customProperties.put(PKS_CLUSTER_NAME_PROP_NAME, clusterName);\n        sendRequest(Operation.createPatch(getHost(), ManagementUriParts.ADAPTER_PKS)\n                .setBodyNoCloning(request)\n                .setCompletion((o, ex) -> {\n                    if (ex != null) {\n                        logSevere(\"Adapter request for get PKS cluster failed. Error: %s\",\n                                Utils.toString(ex));\n                        op.fail(ex);\n                    } else {\n                        PKSCluster pksCluster = o.getBody(PKSCluster.class);\n                        PKSCluster[] pksClusters = new PKSCluster[] { pksCluster };\n                        queryComputes(op, pksClusters, endpointLink);\n                    }\n                }));\n    }\n    private void handleListRequest(Operation op, String endpointLink) {\n        AdapterRequest request = new AdapterRequest();\n        request.operationTypeId = PKSOperationType.LIST_CLUSTERS.id;\n        request.serviceTaskCallback = ServiceTaskCallback.createEmpty();\n        request.resourceReference = UriUtils.buildUri(getHost(), endpointLink);\n        sendRequest(Operation.createPatch(getHost(), ManagementUriParts.ADAPTER_PKS)\n                .setBodyNoCloning(request)\n                .setCompletion((o, ex) -> {\n                    if (ex != null) {\n                        logSevere(\"Adapter request for listing PKS clusters failed. Error: %s\",\n                                Utils.toString(ex));\n                        op.fail(ex);\n                    } else {\n                        PKSCluster[] pksClusters = o.getBody(PKSCluster[].class);\n                        queryComputes(op, pksClusters, endpointLink);\n                    }\n                }));\n    }\n    private void queryComputes(Operation op, PKSCluster[] pksClusters, String endpointLink) {\n        QueryTask.Query endpointClause = new QueryTask.Query()\n                .setTermPropertyName(QuerySpecification.buildCompositeFieldName(\n                        ResourceState.FIELD_NAME_CUSTOM_PROPERTIES,\n                        PKS_ENDPOINT_PROP_NAME))\n                .setTermMatchValue(endpointLink);\n        QueryTask queryTask = QueryUtil.buildQuery(ComputeState.class, true, endpointClause);\n        QueryUtil.addExpandOption(queryTask);\n        Set<String> uuids = new HashSet<>();\n        new ServiceDocumentQuery<>(getHost(), ComputeState.class)\n                .query(queryTask, (r) -> {\n                    if (r.hasException()) {\n                        logSevere(\"Failed to query for compute states with endpoint link [%s]: %s\",\n                                endpointLink, Utils.toString(r.getException()));\n                        op.fail(r.getException());\n                    } else if (r.hasResult()) {\n                        String uuid = PropertyUtils.getPropertyString(\n                                r.getResult().customProperties, PKS_CLUSTER_UUID_PROP_NAME)\n                                .orElse(null);\n                        if (uuid != null) {\n                            uuids.add(uuid);\n                        }\n                    } else {\n                        processHosts(op, uuids, pksClusters);\n                    }\n                });\n    }\n    private void processHosts(Operation op, Set<String> uuids, PKSCluster[] pksClusters) {\n        for (PKSCluster cluster: pksClusters) {\n            if (uuids.contains(cluster.uuid)) {\n                if (cluster.parameters == null) {\n                    cluster.parameters = new HashMap<>();\n                }\n                cluster.parameters.put(PKS_CLUSTER_EXISTS_PROP_NAME, Boolean.TRUE.toString());\n            }\n        }\n        op.setBody(pksClusters);\n        op.complete();\n    }\n}<fim_middle>// class below has no smell\n"}