{"text": "<fim_prefix>\t\t}\n\t\tpublic Integer getAcceptors() {\n\t\t\treturn this.acceptors;\n\t\t}\n\t\tpublic void setAcceptors(Integer acceptors) {\n\t\t\tthis.acceptors = acceptors;\n\t\t}\n\t\tpublic Integer getSelectors() {\n\t\t\treturn this.selectors;\n\t\t}\n\t\tpublic void setSelectors(Integer selectors) {\n\t\t\tthis.selectors = selectors;\n\t\t}\n\t\t/**\n\t\t * Jetty access log properties.\n\t\t */\n\t\tpublic static class Accesslog {\n\t\t\t/**\n\t\t\t * Enable access log.\n\t\t\t */\n\t\t\tprivate boolean enabled = false;\n\t\t\t/**\n\t\t\t * Log filename. If not specified, logs redirect to \"System.err\".\n\t\t\t */\n\t\t\tprivate String filename;\n\t\t\t/**\n\t\t\t * Date format to place in log file name.\n\t\t\t */\n\t\t\tprivate String fileDateFormat;\n\t\t\t/**\n\t\t\t * Number of days before rotated log files are deleted.\n\t\t\t */\n\t\t\tprivate int retentionPeriod = 31; // no days\n\t\t\t/**\n\t\t\t * Append to log.\n\t\t\t */\n\t\t\tprivate boolean append;\n\t\t\t/**\n\t\t\t * Enable extended NCSA format.\n\t\t\t */\n\t\t\tprivate boolean extendedFormat;\n\t\t\t/**\n\t\t\t * Timestamp format of the request log.\n\t\t\t */\n\t\t\tprivate String dateFormat = \"dd/MMM/yyyy:HH:mm:ss Z\";\n\t\t\t/**\n\t\t\t * Locale of the request log.\n\t\t\t */\n\t\t\tprivate Locale locale;\n\t\t\t/**\n\t\t\t * Timezone of the request log.\n\t\t\t */\n\t\t\tprivate TimeZone timeZone = TimeZone.getTimeZone(\"GMT\");\n\t\t\t/**\n\t\t\t * Enable logging of the request cookies.\n\t\t\t */\n\t\t\tprivate boolean logCookies;\n\t\t\t/**\n\t\t\t * Enable logging of the request hostname.\n\t\t\t */\n\t\t\tprivate boolean logServer;\n\t\t\t/**\n\t\t\t * Enable logging of request processing time.\n\t\t\t */\n\t\t\tprivate boolean logLatency;\n\t\t\tpublic boolean isEnabled() {\n\t\t\t\treturn this.enabled;\n\t\t\t}\n\t\t\tpublic void setEnabled(boolean enabled) {\n\t\t\t\tthis.enabled = enabled;\n\t\t\t}\n\t\t\tpublic String getFilename() {\n\t\t\t\treturn this.filename;\n\t\t\t}\n\t\t\tpublic void setFilename(String filename) {\n\t\t\t\tthis.filename = filename;\n\t\t\t}\n\t\t\tpublic String getFileDateFormat() {\n\t\t\t\treturn this.fileDateFormat;\n\t\t\t}\n\t\t\tpublic void setFileDateFormat(String fileDateFormat) {\n\t\t\t\tthis.fileDateFormat = fileDateFormat;\n\t\t\t}\n\t\t\tpublic int getRetentionPeriod() {\n\t\t\t\treturn this.retentionPeriod;\n\t\t\t}\n\t\t\tpublic void setRetentionPeriod(int retentionPeriod) {\n\t\t\t\tthis.retentionPeriod = retentionPeriod;\n\t\t\t}\n\t\t\tpublic boolean isAppend() {\n\t\t\t\treturn this.append;\n\t\t\t}\n\t\t\tpublic void setAppend(boolean append) {\n\t\t\t\tthis.append = append;\n\t\t\t}\n\t\t\tpublic boolean isExtendedFormat() {\n\t\t\t\treturn this.extendedFormat;\n\t\t\t}\n\t\t\tpublic void setExtendedFormat(boolean extendedFormat) {\n\t\t\t\tthis.extendedFormat = extendedFormat;\n\t\t\t}\n\t\t\tpublic String getDateFormat() {\n\t\t\t\treturn this.dateFormat;\n\t\t\t}\n\t\t\tpublic void setDateFormat(String dateFormat) {\n\t\t\t\tthis.dateFormat = dateFormat;\n\t\t\t}\n\t\t\tpublic Locale getLocale() {\n\t\t\t\treturn this.locale;\n\t\t\t}\n\t\t\tpublic void setLocale(Locale locale) {\n\t\t\t\tthis.locale = locale;\n\t\t\t}\n\t\t\tpublic TimeZone getTimeZone() {\n\t\t\t\treturn this.timeZone;\n\t\t\t}\n\t\t\tpublic void setTimeZone(TimeZone timeZone) {\n\t\t\t\tthis.timeZone = timeZone;\n\t\t\t}\n\t\t\tpublic boolean isLogCookies() {\n\t\t\t\treturn this.logCookies;\n\t\t\t}\n\t\t\tpublic void setLogCookies(boolean logCookies) {\n\t\t\t\tthis.logCookies = logCookies;\n\t\t\t}\n\t\t\tpublic boolean isLogServer() {\n\t\t\t\treturn this.logServer;\n\t\t\t}\n\t\t\tpublic void setLogServer(boolean logServer) {\n\t\t\t\tthis.logServer = logServer;\n\t\t\t}\n\t\t\tpublic boolean isLogLatency() {\n\t\t\t\treturn this.logLatency;\n\t\t\t}\n\t\t\tpublic void setLogLatency(boolean logLatency) {\n\t\t\t\tthis.logLatency = logLatency;\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Undertow properties.\n\t */\n<fim_suffix>\tpublic static class Undertow {\n\t\t/**\n\t\t * Maximum size of the HTTP post content. When the value is -1, the default, the\n\t\t * size is unlimited.\n\t\t */\n\t\tprivate DataSize maxHttpPostSize = DataSize.ofBytes(-1);\n\t\t/**\n\t\t * Size of each buffer. The default is derived from the maximum amount of memory\n\t\t * that is available to the JVM.\n\t\t */\n\t\tprivate DataSize bufferSize;\n\t\t/**\n\t\t * Number of I/O threads to create for the worker. The default is derived from the\n\t\t * number of available processors.\n\t\t */\n\t\tprivate Integer ioThreads;\n\t\t/**\n\t\t * Number of worker threads. The default is 8 times the number of I/O threads.\n\t\t */\n\t\tprivate Integer workerThreads;\n\t\t/**\n\t\t * Whether to allocate buffers outside the Java heap. The default is derived from\n\t\t * the maximum amount of memory that is available to the JVM.\n\t\t */\n\t\tprivate Boolean directBuffers;\n\t\t/**\n\t\t * Whether servlet filters should be initialized on startup.\n\t\t */\n\t\tprivate boolean eagerFilterInit = true;\n\t\tprivate final Accesslog accesslog = new Accesslog();\n\t\tpublic DataSize getMaxHttpPostSize() {\n\t\t\treturn this.maxHttpPostSize;\n\t\t}\n\t\tpublic void setMaxHttpPostSize(DataSize maxHttpPostSize) {\n\t\t\tthis.maxHttpPostSize = maxHttpPostSize;\n\t\t}\n\t\tpublic DataSize getBufferSize() {\n\t\t\treturn this.bufferSize;\n\t\t}\n\t\tpublic void setBufferSize(DataSize bufferSize) {\n\t\t\tthis.bufferSize = bufferSize;\n\t\t}\n\t\tpublic Integer getIoThreads() {\n\t\t\treturn this.ioThreads;\n\t\t}\n\t\tpublic void setIoThreads(Integer ioThreads) {\n\t\t\tthis.ioThreads = ioThreads;\n\t\t}\n\t\tpublic Integer getWorkerThreads() {\n\t\t\treturn this.workerThreads;\n\t\t}\n\t\tpublic void setWorkerThreads(Integer workerThreads) {\n\t\t\tthis.workerThreads = workerThreads;\n\t\t}\n\t\tpublic Boolean getDirectBuffers() {\n\t\t\treturn this.directBuffers;\n\t\t}\n\t\tpublic void setDirectBuffers(Boolean directBuffers) {\n\t\t\tthis.directBuffers = directBuffers;\n\t\t}\n\t\tpublic boolean isEagerFilterInit() {\n\t\t\treturn this.eagerFilterInit;\n\t\t}\n\t\tpublic void setEagerFilterInit(boolean eagerFilterInit) {\n\t\t\tthis.eagerFilterInit = eagerFilterInit;\n\t\t}\n\t\tpublic Accesslog getAccesslog() {\n\t\t\treturn this.accesslog;\n\t\t}\n\t\t/**\n\t\t * Undertow access log properties.\n\t\t */\n\t\tpublic static class Accesslog {\n\t\t\t/**\n\t\t\t * Whether to enable the access log.\n\t\t\t */\n\t\t\tprivate boolean enabled = false;\n\t\t\t/**\n\t\t\t * Format pattern for access logs.\n\t\t\t */\n\t\t\tprivate String pattern = \"common\";\n\t\t\t/**\n\t\t\t * Log file name prefix.\n\t\t\t */\n\t\t\tprotected String prefix = \"access_log.\";\n\t\t\t/**\n\t\t\t * Log file name suffix.\n\t\t\t */\n\t\t\tprivate String suffix = \"log\";\n\t\t\t/**\n\t\t\t * Undertow access log directory.\n\t\t\t */\n\t\t\tprivate File dir = new File(\"logs\");\n\t\t\t/**\n\t\t\t * Whether to enable access log rotation.\n\t\t\t */\n\t\t\tprivate boolean rotate = true;\n\t\t\tpublic boolean isEnabled() {\n\t\t\t\treturn this.enabled;\n\t\t\t}\n\t\t\tpublic void setEnabled(boolean enabled) {\n\t\t\t\tthis.enabled = enabled;\n\t\t\t}\n\t\t\tpublic String getPattern() {\n\t\t\t\treturn this.pattern;\n\t\t\t}\n\t\t\tpublic void setPattern(String pattern) {\n\t\t\t\tthis.pattern = pattern;\n\t\t\t}\n\t\t\tpublic String getPrefix() {\n\t\t\t\treturn this.prefix;\n\t\t\t}\n\t\t\tpublic void setPrefix(String prefix) {\n\t\t\t\tthis.prefix = prefix;\n\t\t\t}\n\t\t\tpublic String getSuffix() {\n\t\t\t\treturn this.suffix;\n\t\t\t}\n\t\t\tpublic void setSuffix(String suffix) {\n\t\t\t\tthis.suffix = suffix;\n\t\t\t}\n\t\t\tpublic File getDir() {\n\t\t\t\treturn this.dir;\n\t\t\t}\n\t\t\tpublic void setDir(File dir) {\n\t\t\t\tthis.dir = dir;\n\t\t\t}\n\t\t\tpublic boolean isRotate() {\n\t\t\t\treturn this.rotate;\n\t\t\t}\n\t\t\tpublic void setRotate(boolean rotate) {\n\t\t\t\tthis.rotate = rotate;\n\t\t\t}\n\t\t}\n\t}<fim_middle>// class below is data class\n"}