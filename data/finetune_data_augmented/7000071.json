{"text": "<fim_prefix>/*\n * Copyright (c) 2011 Google Inc.\n *\n * All rights reserved. This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License v1.0 which\n * accompanies this distribution, and is available at\n *\n * http://www.eclipse.org/legal/epl-v10.html\n */\npackage com.google.eclipse.protobuf.ui.resource;\n\nimport static java.util.Collections.singletonMap;\n\nimport static org.eclipse.emf.common.util.URI.createURI;\nimport static org.eclipse.emf.ecore.resource.ContentHandler.UNSPECIFIED_CONTENT_TYPE;\nimport static org.eclipse.xtext.EcoreUtil2.resolveLazyCrossReferences;\nimport static org.eclipse.xtext.resource.XtextResource.OPTION_ENCODING;\nimport static org.eclipse.xtext.util.CancelIndicator.NullImpl;\n\nimport static com.google.eclipse.protobuf.util.Encodings.UTF_8;\n\nimport java.io.IOException;\n\nimport org.eclipse.emf.common.util.URI;\nimport org.eclipse.emf.ecore.resource.ResourceSet;\nimport org.eclipse.xtext.resource.XtextResource;\nimport org.eclipse.xtext.ui.resource.IResourceSetProvider;\nimport org.eclipse.xtext.util.StringInputStream;\n\nimport com.google.eclipse.protobuf.ui.util.IProjects;\nimport com.google.inject.Inject;\nimport com.google.inject.Singleton;\n\n/**\n * Factory of <code>{@link XtextResource}</code>s.\n *\n * @author alruiz@google.com (Alex Ruiz)\n */\n<fim_suffix>@Singleton public class XtextResourceFactory {\n  @Inject private IResourceSetProvider resourceSetProvider;\n  @Inject private IProjects projects;\n\n  /**\n   * Creates a new <code>{@link XtextResource}</code>.\n   * @param uri the URI of the file containing the EMF model.\n   * @param contents the contents of the file.\n   * @return the created {@code XtextResource}.\n   * @throws IOException if something goes wrong.\n   */\n  public XtextResource createResource(String uri, String contents) throws IOException {\n    return createResource(createURI(uri), contents);\n  }\n\n  /**\n   * Creates a new <code>{@link XtextResource}</code>.\n   * @param uri the URI of the file containing the EMF model.\n   * @param contents the contents of the file.\n   * @return the created {@code XtextResource}.\n   * @throws IOException if something goes wrong.\n   */\n  public XtextResource createResource(URI uri, String contents) throws IOException {\n    // TODO get project from URI.\n    ResourceSet resourceSet = resourceSetProvider.get(projects.activeProject());\n    XtextResource resource = (XtextResource) resourceSet.createResource(uri, UNSPECIFIED_CONTENT_TYPE);\n    resource.load(new StringInputStream(contents), singletonMap(OPTION_ENCODING, UTF_8));\n    resolveLazyCrossReferences(resource, NullImpl);\n    return resource;\n  }\n}<fim_middle>// class below has no smell\n"}