{"text": "<fim_prefix>package org.apache.velocity.tools.view.jsp.jspimpl;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\n\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.tagext.BodyContent;\n\nimport org.apache.velocity.context.InternalContextAdapter;\nimport org.apache.velocity.exception.MethodInvocationException;\nimport org.apache.velocity.exception.ParseErrorException;\nimport org.apache.velocity.exception.ResourceNotFoundException;\nimport org.apache.velocity.runtime.parser.node.ASTBlock;\n\n/**\n * Publishes a block inside a Velocity directive as a {@link BodyContent}.\n *\n */\npublic class VelocityBodyContent extends BodyContent\n{\n\n    /**\n     * The block to expose.\n     */\n    private ASTBlock block;\n\n    /**\n     * The directive context.\n     */\n    private InternalContextAdapter context;\n\n    /**\n     * Constructor.\n     *\n     * @param jspWriter The JSP writer to be used by default.\n     * @param block The block to wrap.\n     * @param context The directive context.\n     */\n    public VelocityBodyContent(JspWriter jspWriter, ASTBlock block,\n            InternalContextAdapter context)\n    {\n        super(jspWriter);\n        this.block = block;\n        this.context = context;\n    }\n\n    @Override\n    public Reader getReader()\n    {\n        return new StringReader(getString());\n    }\n\n    @Override\n    public String getString()\n    {\n        StringWriter stringWriter = new StringWriter();\n        try\n        {\n            block.render(context, stringWriter);\n            stringWriter.close();\n            return stringWriter.toString();\n        } catch (MethodInvocationException e)\n        {\n            throw new VelocityToolsJspException(\n                    \"Cannot invoke a method while rendering a body\", e);\n        } catch (ResourceNotFoundException e)\n        {\n            throw new VelocityToolsJspException(\n                    \"Cannot find a resource while rendering a body\", e);\n        } catch (ParseErrorException e)\n        {\n            throw new VelocityToolsJspException(\n                    \"Cannot parse while rendering a body\", e);\n        } catch (IOException e)\n        {\n            throw new VelocityToolsJspException(\n                    \"I/O exception while rendering a body\", e);\n        }\n    }\n\n    @Override\n    public void writeOut(Writer out) throws IOException\n    {\n        block.render(context, out);\n    }\n\n    @Override\n    public void newLine() throws IOException\n    {\n        getEnclosingWriter().newLine();\n    }\n\n    @Override\n    public void print(boolean b) throws IOException\n    {\n        getEnclosingWriter().print(b);\n    }\n\n    @Override\n    public void print(char c) throws IOException\n    {\n        getEnclosingWriter().print(c);\n    }\n\n    @Override\n    public void print(int i) throws IOException\n    {\n        getEnclosingWriter().print(i);\n    }\n\n    @Override\n    public void print(long l) throws IOException\n    {\n        getEnclosingWriter().print(l);\n    }\n\n    @Override\n    public void print(float f) throws IOException\n    {\n        getEnclosingWriter().print(f);\n    }\n\n    @Override\n    public void print(double d) throws IOException\n    {\n        getEnclosingWriter().print(d);\n    }\n\n    @Override\n    public void print(char[] s) throws IOException\n    {\n        getEnclosingWriter().print(s);\n    }\n\n    @Override\n    public void print(String s) throws IOException\n    {\n        getEnclosingWriter().print(s);\n    }\n\n    @Override\n    public void print(Object obj) throws IOException\n    {\n        getEnclosingWriter().print(obj);\n    }\n\n    @Override\n    public void println() throws IOException\n    {\n        getEnclosingWriter().println();\n    }\n\n    @Override\n    public void println(boolean x) throws IOException\n    {\n        getEnclosingWriter().println(x);\n    }\n\n<fim_suffix>    @Override\n    public void println(char x) throws IOException\n    {\n        getEnclosingWriter().println(x);\n    }\n\n    @Override\n    public void println(int x) throws IOException\n    {\n        getEnclosingWriter().println(x);\n    }\n\n    @Override\n    public void println(long x) throws IOException\n    {\n        getEnclosingWriter().println(x);\n    }\n\n    @Override\n    public void println(float x) throws IOException\n    {\n        getEnclosingWriter().println(x);\n    }\n\n    @Override\n    public void println(double x) throws IOException\n    {\n        getEnclosingWriter().println(x);\n    }\n\n    @Override\n    public void println(char[] x) throws IOException\n    {\n        getEnclosingWriter().println(x);\n    }\n\n    @Override\n    public void println(String x) throws IOException\n    {\n        getEnclosingWriter().println(x);\n    }\n\n    @Override\n    public void println(Object x) throws IOException\n    {\n        getEnclosingWriter().println(x);\n    }\n\n    @Override\n    public void clear() throws IOException\n    {\n        getEnclosingWriter().clear();\n    }\n\n    @Override\n    public void clearBuffer() throws IOException\n    {\n        getEnclosingWriter().clearBuffer();\n    }\n\n    @Override\n    public void close() throws IOException\n    {\n        getEnclosingWriter().close();\n    }\n\n    @Override\n    public int getRemaining()\n    {\n        return getEnclosingWriter().getRemaining();\n    }\n\n    @Override\n    public void write(char[] cbuf, int off, int len) throws IOException\n    {\n        getEnclosingWriter().write(cbuf, off, len);\n    }\n\n}<fim_middle>// function below has no smell\n"}