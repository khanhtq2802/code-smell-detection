{"text": "<fim_prefix>/*\n * Copyright 2015 the original author or authors.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.data.hadoop.batch.sqoop2;\n\nimport org.apache.sqoop.client.SqoopClient;\nimport org.apache.sqoop.client.SubmissionCallback;\nimport org.apache.sqoop.model.MSubmission;\nimport org.apache.sqoop.submission.counter.Counter;\nimport org.apache.sqoop.submission.counter.CounterGroup;\nimport org.apache.sqoop.submission.counter.Counters;\nimport org.springframework.batch.core.ExitStatus;\nimport org.springframework.batch.core.StepContribution;\nimport org.springframework.batch.core.StepExecution;\nimport org.springframework.batch.core.StepExecutionListener;\nimport org.springframework.batch.core.scope.context.ChunkContext;\nimport org.springframework.batch.core.step.tasklet.Tasklet;\nimport org.springframework.batch.repeat.RepeatStatus;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.util.Assert;\n\nimport java.util.Iterator;\n\n/**\n * Sqoop2 tasklet running Sqoop2 jobs on demand.\n * \n * @author Thomas Risberg\n */\npublic class Sqoop2Tasklet implements InitializingBean, Tasklet, StepExecutionListener {\n\n\tprivate String sqoopUrl;\n\n\tprivate Long jobId;\n\n\tprivate Long pollTime = 5000L;\n\n\tprivate boolean complete = false;\n\n\tpublic void setSqoopUrl(String sqoopUrl) {\n\t\tthis.sqoopUrl = sqoopUrl;\n\t}\n\n\tpublic void setJobId(Long jobId) {\n\t\tthis.jobId = jobId;\n\t}\n\n\tpublic void setPollTime(Long pollTime) {\n\t\tthis.pollTime = pollTime;\n\t}\n\n\tpublic RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {\n\t\t// TODO\n\t\tSqoopClient client = new SqoopClient(sqoopUrl);\n\t\tfinal StepExecution stepExecution = chunkContext.getStepContext().getStepExecution();\n\t\tclient.startJob(jobId,\n\t\t\t\tnew SubmissionCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void submitted(MSubmission mSubmission) {\n\t\t\t\t\t\tstepExecution.getExecutionContext().putString(\"sqoop2.job.id\", String.valueOf(mSubmission.getJobId()));\n\t\t\t\t\t\tstepExecution.getExecutionContext().putString(\"sqoop2.external.job.id\", mSubmission.getExternalJobId());\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void updated(MSubmission mSubmission) {\n\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void finished(MSubmission mSubmission) {\n\t\t\t\t\t\tif (mSubmission.getStatus().isFailure()) {\n\t\t\t\t\t\t\tstepExecution.getExecutionContext().putString(\"sqoop2.job.status\", mSubmission.getStatus().toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tcomplete = true;\n\t\t\t\t\t\t\tstepExecution.getExecutionContext().putString(\"sqoop2.job.status\", mSubmission.getStatus().toString());\n\t\t\t\t\t\t\tStringBuilder counterInfo = new StringBuilder();\n\t\t\t\t\t\t\tCounters counters = mSubmission.getCounters();\n\t\t\t\t\t\t\tIterator<CounterGroup> cgIter = counters.iterator();\n\t\t\t\t\t\t\twhile (cgIter.hasNext()) {\n\t\t\t\t\t\t\t\tCounterGroup cg = cgIter.next();\n\t\t\t\t\t\t\t\tcounterInfo.append(cg.getName()+\":\\n\");\n\t\t\t\t\t\t\t\tIterator<Counter> cIter = cg.iterator();\n\t\t\t\t\t\t\t\twhile (cIter.hasNext()) {\n\t\t\t\t\t\t\t\t\tCounter c = cIter.next();\n\t\t\t\t\t\t\t\t\tcounterInfo.append(\"    \" + c.getName() + \"=\" + c.getValue() + \"\\n\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstepExecution.getExecutionContext().putString(\"sqoop2.job.counters\", counterInfo.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, pollTime);\n\t\treturn RepeatStatus.FINISHED;\n\t}\n\n<fim_suffix>\t@Override\n\tpublic void beforeStep(StepExecution stepExecution) {\n\n\t}\n\n\t@Override\n\tpublic ExitStatus afterStep(StepExecution stepExecution) {\n\t\tif (complete) {\n\t\t\treturn ExitStatus.COMPLETED;\n\t\t}\n\t\telse {\n\t\t\treturn ExitStatus.FAILED;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void afterPropertiesSet() throws Exception {\n\t\tAssert.hasLength(sqoopUrl, \"The 'sqoopUrl' property must be set\");\n\t\tAssert.notNull(jobId, \"The 'jobId' property must be set\");\n\t}\n}<fim_middle>// function below has no smell\n"}