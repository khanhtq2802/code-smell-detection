{"text": "<fim_prefix>/****************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one   *\n * or more contributor license agreements.  See the NOTICE file *\n * distributed with this work for additional information        *\n * regarding copyright ownership.  The ASF licenses this file   *\n * to you under the Apache License, Version 2.0 (the            *\n * \"License\"); you may not use this file except in compliance   *\n * with the License.  You may obtain a copy of the License at   *\n *                                                              *\n *   http://www.apache.org/licenses/LICENSE-2.0                 *\n *                                                              *\n * Unless required by applicable law or agreed to in writing,   *\n * software distributed under the License is distributed on an  *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n * KIND, either express or implied.  See the License for the    *\n * specific language governing permissions and limitations      *\n * under the License.                                           *\n ****************************************************************/\n\npackage org.apache.james.blob.mail;\n\nimport static org.apache.commons.io.output.NullOutputStream.NULL_OUTPUT_STREAM;\nimport static org.apache.james.blob.mail.MimeMessagePartsId.BODY_BLOB_TYPE;\nimport static org.apache.james.blob.mail.MimeMessagePartsId.HEADER_BLOB_TYPE;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.SequenceInputStream;\nimport java.nio.ByteBuffer;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.stream.Stream;\n\nimport javax.inject.Inject;\nimport javax.mail.MessagingException;\nimport javax.mail.Session;\nimport javax.mail.internet.MimeMessage;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.james.blob.api.BlobStore;\nimport org.apache.james.blob.api.Store;\nimport org.apache.james.blob.api.Store.BlobType;\nimport org.apache.james.util.BodyOffsetInputStream;\n\nimport com.google.common.base.Preconditions;\nimport com.google.common.collect.ImmutableMap;\n\npublic class MimeMessageStore {\n\n    public static class Factory {\n        private final BlobStore blobStore;\n\n        @Inject\n        public Factory(BlobStore blobStore) {\n            this.blobStore = blobStore;\n        }\n\n        public Store<MimeMessage, MimeMessagePartsId> mimeMessageStore() {\n            return new Store.Impl<>(\n                new MimeMessagePartsId.Factory(),\n                new MimeMessageEncoder(),\n                new MimeMessageDecoder(),\n                blobStore);\n        }\n    }\n\n    static class MimeMessageEncoder implements Store.Impl.Encoder<MimeMessage> {\n        @Override\n        public Stream<Pair<BlobType, Store.FixedLengthInputStream>> encode(MimeMessage message) {\n            try {\n                byte[] messageAsArray = messageToArray(message);\n                int bodyStartOctet = computeBodyStartOctet(messageAsArray);\n                byte[] headerBytes = getHeaderBytes(messageAsArray, bodyStartOctet);\n                byte[] bodyBytes = getBodyBytes(messageAsArray, bodyStartOctet);\n                return Stream.of(\n                    Pair.of(HEADER_BLOB_TYPE, new Store.FixedLengthInputStream(new ByteArrayInputStream(headerBytes), headerBytes.length)),\n                    Pair.of(BODY_BLOB_TYPE, new Store.FixedLengthInputStream(new ByteArrayInputStream(bodyBytes), bodyBytes.length)));\n            } catch (MessagingException | IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        \n        private static byte[] messageToArray(MimeMessage message) throws IOException, MessagingException {\n            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n            message.writeTo(byteArrayOutputStream);\n            return byteArrayOutputStream.toByteArray();\n        }\n\n        private static byte[] getHeaderBytes(byte[] messageContentAsArray, int bodyStartOctet) {\n            ByteBuffer headerContent = ByteBuffer.wrap(messageContentAsArray, 0, bodyStartOctet);\n            byte[] headerBytes = new byte[bodyStartOctet];\n            headerContent.get(headerBytes);\n            return headerBytes;\n        }\n\n        private static byte[] getBodyBytes(byte[] messageContentAsArray, int bodyStartOctet) {\n            if (bodyStartOctet < messageContentAsArray.length) {\n                ByteBuffer bodyContent = ByteBuffer.wrap(messageContentAsArray,\n                    bodyStartOctet,\n                    messageContentAsArray.length - bodyStartOctet);\n                byte[] bodyBytes = new byte[messageContentAsArray.length - bodyStartOctet];\n                bodyContent.get(bodyBytes);\n                return bodyBytes;\n            } else {\n                return new byte[] {};\n            }\n        }\n\n        private static int computeBodyStartOctet(byte[] messageAsArray) throws IOException {\n            try (BodyOffsetInputStream bodyOffsetInputStream =\n                     new BodyOffsetInputStream(new ByteArrayInputStream(messageAsArray))) {\n                consume(bodyOffsetInputStream);\n\n                if (bodyOffsetInputStream.getBodyStartOffset() == -1) {\n                    return 0;\n                }\n                return (int) bodyOffsetInputStream.getBodyStartOffset();\n            }\n        }\n\n        private static void consume(InputStream in) throws IOException {\n            IOUtils.copy(in, NULL_OUTPUT_STREAM);\n        }\n    }\n\n<fim_suffix>    static class MimeMessageDecoder implements Store.Impl.Decoder<MimeMessage> {\n        @Override\n        public MimeMessage decode(Stream<Pair<BlobType, byte[]>> streams) {\n            Preconditions.checkNotNull(streams);\n            Map<BlobType,byte[]> pairs = streams.collect(ImmutableMap.toImmutableMap(Pair::getLeft, Pair::getRight));\n            Preconditions.checkArgument(pairs.containsKey(HEADER_BLOB_TYPE));\n            Preconditions.checkArgument(pairs.containsKey(BODY_BLOB_TYPE));\n\n            return toMimeMessage(\n                new SequenceInputStream(\n                    new ByteArrayInputStream(pairs.get(HEADER_BLOB_TYPE)),\n                    new ByteArrayInputStream(pairs.get(BODY_BLOB_TYPE))));\n        }\n\n        private MimeMessage toMimeMessage(InputStream inputStream) {\n            try {\n                return new MimeMessage(Session.getInstance(new Properties()), inputStream);\n            } catch (MessagingException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    public static Factory factory(BlobStore blobStore) {\n        return new Factory(blobStore);\n    }\n}<fim_middle>// class below has no smell\n"}