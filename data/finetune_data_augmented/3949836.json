{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.atlas.repository.graphdb.janus;\n\nimport java.util.Iterator;\n\nimport com.google.common.base.Preconditions;\nimport org.apache.atlas.repository.graphdb.AtlasIndexQuery;\nimport org.apache.atlas.repository.graphdb.AtlasVertex;\n\nimport com.google.common.base.Function;\nimport com.google.common.collect.Iterators;\nimport org.janusgraph.core.JanusGraphIndexQuery;\nimport org.janusgraph.core.JanusGraphVertex;\n\n/**\n * Janus implementation of AtlasIndexQuery.\n */\npublic class AtlasJanusIndexQuery implements AtlasIndexQuery<AtlasJanusVertex, AtlasJanusEdge> {\n    private AtlasJanusGraph      graph;\n    private JanusGraphIndexQuery query;\n\n    public AtlasJanusIndexQuery(AtlasJanusGraph graph, JanusGraphIndexQuery query) {\n        this.query = query;\n        this.graph = graph;\n    }\n\n    @Override\n    public Iterator<Result<AtlasJanusVertex, AtlasJanusEdge>> vertices() {\n        Iterator<JanusGraphIndexQuery.Result<JanusGraphVertex>> results = query.vertices().iterator();\n\n        Function<JanusGraphIndexQuery.Result<JanusGraphVertex>, Result<AtlasJanusVertex, AtlasJanusEdge>> function =\n            new Function<JanusGraphIndexQuery.Result<JanusGraphVertex>, Result<AtlasJanusVertex, AtlasJanusEdge>>() {\n\n                @Override\n                public Result<AtlasJanusVertex, AtlasJanusEdge> apply(JanusGraphIndexQuery.Result<JanusGraphVertex> source) {\n                    return new ResultImpl(source);\n                }\n            };\n\n        return Iterators.transform(results, function);\n    }\n\n    @Override\n    public Iterator<Result<AtlasJanusVertex, AtlasJanusEdge>> vertices(int offset, int limit) {\n        Preconditions.checkArgument(offset >=0, \"Index offset should be greater than or equals to 0\");\n        Preconditions.checkArgument(limit >=0, \"Index limit should be greater than or equals to 0\");\n        Iterator<JanusGraphIndexQuery.Result<JanusGraphVertex>> results = query\n                .offset(offset)\n                .limit(limit)\n                .vertices().iterator();\n\n        Function<JanusGraphIndexQuery.Result<JanusGraphVertex>, Result<AtlasJanusVertex, AtlasJanusEdge>> function =\n                new Function<JanusGraphIndexQuery.Result<JanusGraphVertex>, Result<AtlasJanusVertex, AtlasJanusEdge>>() {\n\n                    @Override\n                    public Result<AtlasJanusVertex, AtlasJanusEdge> apply(JanusGraphIndexQuery.Result<JanusGraphVertex> source) {\n                        return new ResultImpl(source);\n                    }\n                };\n\n        return Iterators.transform(results, function);\n    }\n\n    @Override\n    public Long vertexTotals() {\n        return query.vertexTotals();\n    }\n\n    /**\n     * Janus implementation of AtlasIndexQuery.Result.\n     */\n<fim_suffix>    public final class ResultImpl implements AtlasIndexQuery.Result<AtlasJanusVertex, AtlasJanusEdge> {\n        private JanusGraphIndexQuery.Result<JanusGraphVertex> source;\n\n        public ResultImpl(JanusGraphIndexQuery.Result<JanusGraphVertex> source) {\n            this.source = source;\n        }\n\n        @Override\n        public AtlasVertex<AtlasJanusVertex, AtlasJanusEdge> getVertex() {\n            return GraphDbObjectFactory.createVertex(graph, source.getElement());\n        }\n\n        @Override\n        public double getScore() {\n            return source.getScore();\n        }\n    }\n}<fim_middle>// class below has no smell\n"}