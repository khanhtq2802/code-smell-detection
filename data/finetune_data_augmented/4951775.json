{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jclouds.atmos.options;\n\nimport org.jclouds.http.options.BaseHttpRequestOptions;\n\n/**\n * Contains options supported in the REST API for the PUT operations.\n * <p/>\n * <h2>\n * Usage</h2> The recommended way to instantiate a PutOptions object is to statically import\n * PutOptions.Builder.* and invoke a static creation method followed by an instance mutator (if\n * needed):\n * <p/>\n * <code>\n * import org.jclouds.atmos.options.PutOptions.Builder.*\n * import org.jclouds.atmos.AtmosClient;\n * \n * AtmosClient connection = // get connection\n *  connection.createDirectory(\"directory\", publicRead());\n * <code>\n */\n<fim_suffix>public class PutOptions extends BaseHttpRequestOptions {\n   public static final PutOptions NONE = new PutOptions();\n\n   /**\n    * Add public access to all users\n    * \n    */\n   public PutOptions publicRead() {\n      this.replaceHeader(\"x-emc-useracl\", \"root=FULL_CONTROL\");\n      this.replaceHeader(\"x-emc-groupacl\", \"other=READ\");\n      return this;\n   }\n\n   public PutOptions publicNone() {\n      this.replaceHeader(\"x-emc-useracl\", \"root=FULL_CONTROL\");\n      this.replaceHeader(\"x-emc-groupacl\", \"other=NONE\");\n      return this;\n   }\n\n   /**\n    * By default Atmos does not allow overwriting objects.\n    *\n    * Note: older versions of Atmos do not support this header.\n    */\n   public PutOptions overwrite() {\n      this.replaceHeader(\"x-emc-force-overwrite\", \"true\");\n      return this;\n   }\n\n   public static class Builder {\n\n      /**\n       * @see PutOptions#publicRead\n       */\n      public static PutOptions publicRead() {\n         PutOptions options = new PutOptions();\n         return options.publicRead();\n      }\n\n      public static PutOptions publicNone() {\n         PutOptions options = new PutOptions();\n         return options.publicNone();\n      }\n\n      public static PutOptions overwrite() {\n         PutOptions options = new PutOptions();\n         return options.overwrite();\n      }\n   }\n}<fim_middle>// class below has no smell\n"}