{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.rya.indexing.smarturi.duplication;\n\nimport org.apache.rya.indexing.smarturi.SmartUriException;\nimport org.eclipse.rdf4j.model.IRI;\n\n/**\n * Interface for detecting if two objects of type {@code T} are considered\n * approximately equal to each other.\n * @param <T> the type of object the implementation of\n * {@link ApproxEqualsDetector} handles.\n */\n<fim_suffix>public interface ApproxEqualsDetector<T> {\n    /**\n     * Checks if two objects are approximately equal.\n     * @param lhs the left hand side object.\n     * @param rhs the right hand side object.\n     * @return {@code true} if the two objects are considered approximately\n     * equals. {@code false} otherwise.\n     */\n    public boolean areObjectsApproxEquals(final T lhs, final T rhs);\n\n    /**\n     * @return the default tolerance for the type.\n     */\n    public Tolerance getDefaultTolerance();\n\n    /**\n     * Converts a string representation of the object into the object\n     * represented by the class {@link #getTypeClass()}.\n     * @param string the {@link String} to convert to an object.\n     * @return the object.\n     * @throws SmartUriException\n     */\n    public T convertStringToObject(final String string) throws SmartUriException;\n\n    /**\n     * @return the object {@link Class} this detector is used for.\n     */\n    public Class<?> getTypeClass();\n\n    /**\n     * @return the {@link IRI} for the XML schema type this detector is used\n     * for.\n     */\n    public IRI getXmlSchemaUri();\n\n    /**\n     * Checks if two string representations of objects are approximately equal.\n     * @param lhs the left hand side string object representation.\n     * @param rhs the right hand side string object representation.\n     * @return {@code true} if the two string object representations are\n     * considered approximately equals. {@code false} otherwise.\n     * @throws SmartUriException\n     */\n    public default boolean areApproxEquals(final String lhs, final String rhs) throws SmartUriException {\n        final T object1 = convertStringToObject(lhs);\n        final T object2 = convertStringToObject(rhs);\n        return areObjectsApproxEquals(object1, object2);\n    }\n}<fim_middle>// class below has no smell\n"}