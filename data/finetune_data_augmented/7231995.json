{"text": "<fim_prefix>package org.robolectric.shadows;\nimport static android.os.Build.VERSION_CODES.JELLY_BEAN;\nimport static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;\nimport static android.os.Build.VERSION_CODES.LOLLIPOP;\nimport static android.os.Build.VERSION_CODES.M;\nimport android.content.ContentResolver;\nimport android.content.Context;\nimport android.os.Build;\nimport android.provider.Settings;\nimport android.text.TextUtils;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.WeakHashMap;\nimport org.robolectric.RuntimeEnvironment;\nimport org.robolectric.annotation.Implementation;\nimport org.robolectric.annotation.Implements;\nimport org.robolectric.annotation.Resetter;\nimport org.robolectric.shadow.api.Shadow;\nimport org.robolectric.util.ReflectionHelpers.ClassParameter;\n@SuppressWarnings({\"UnusedDeclaration\"})\n@Implements(Settings.class)\npublic class ShadowSettings {\n  @Implements(value = Settings.System.class)\n  public static class ShadowSystem {\n    private static final WeakHashMap<ContentResolver, Map<String, Object>> dataMap = new WeakHashMap<ContentResolver, Map<String, Object>>();\n    @Implementation\n    protected static boolean putInt(ContentResolver cr, String name, int value) {\n      get(cr).put(name, value);\n      return true;\n    }\n    @Implementation\n    protected static int getInt(ContentResolver cr, String name, int def) {\n      if (get(cr).get(name) instanceof Integer) {\n        return (Integer) get(cr).get(name);\n      } else {\n        return def;\n      }\n    }\n    @Implementation\n    protected static int getInt(ContentResolver cr, String name)\n        throws Settings.SettingNotFoundException {\n      if (get(cr).get(name) instanceof Integer) {\n        return (Integer) get(cr).get(name);\n      } else {\n        throw new Settings.SettingNotFoundException(name);\n      }\n    }\n    @Implementation\n    protected static boolean putString(ContentResolver cr, String name, String value) {\n      get(cr).put(name, value);\n      return true;\n    }\n    @Implementation\n    protected static String getString(ContentResolver cr, String name) {\n      if (get(cr).get(name) instanceof String) {\n        return (String) get(cr).get(name);\n      } else {\n        return null;\n      }\n    }\n    @Implementation(minSdk = JELLY_BEAN_MR1)\n    protected static String getStringForUser(ContentResolver cr, String name, int userHandle) {\n      return getString(cr, name);\n    }\n    @Implementation\n    protected static boolean putLong(ContentResolver cr, String name, long value) {\n      get(cr).put(name, value);\n      return true;\n    }\n    @Implementation\n    protected static long getLong(ContentResolver cr, String name, long def) {\n      if (get(cr).get(name) instanceof Long) {\n        return (Long) get(cr).get(name);\n      } else {\n        return def;\n      }\n    }\n    @Implementation\n    protected static long getLong(ContentResolver cr, String name)\n        throws Settings.SettingNotFoundException {\n      if (get(cr).get(name) instanceof Long) {\n        return (Long) get(cr).get(name);\n      } else {\n        throw new Settings.SettingNotFoundException(name);\n      }\n    }\n    @Implementation\n    protected static boolean putFloat(ContentResolver cr, String name, float value) {\n      get(cr).put(name, value);\n      return true;\n    }\n    @Implementation\n    protected static float getFloat(ContentResolver cr, String name, float def) {\n      if (get(cr).get(name) instanceof Float) {\n        return (Float) get(cr).get(name);\n      } else {\n        return def;\n      }\n    }\n    @Implementation\n    protected static float getFloat(ContentResolver cr, String name)\n        throws Settings.SettingNotFoundException {\n      if (get(cr).get(name) instanceof Float) {\n        return (Float) get(cr).get(name);\n      } else {\n        throw new Settings.SettingNotFoundException(name);\n      }\n    }\n    private static Map<String, Object> get(ContentResolver cr) {\n      Map<String, Object> map = dataMap.get(cr);\n      if (map == null) {\n        map = new HashMap<>();\n        dataMap.put(cr, map);\n      }\n      return map;\n    }\n  }\n  @Implements(value = Settings.Secure.class)\n  public static class ShadowSecure {\n    private static final WeakHashMap<ContentResolver, Map<String, Object>> dataMap =\n        new WeakHashMap<ContentResolver, Map<String, Object>>();\n<fim_suffix>    @Implementation(minSdk = JELLY_BEAN_MR1)\n    @SuppressWarnings(\"robolectric.ShadowReturnTypeMismatch\")\n    protected static boolean setLocationProviderEnabledForUser(\n        ContentResolver cr, String provider, boolean enabled, int uid) {\n      return updateEnabledProviders(cr, provider, enabled);\n    }\n    @Implementation(maxSdk = JELLY_BEAN)\n    protected static void setLocationProviderEnabled(\n        ContentResolver cr, String provider, boolean enabled) {\n      updateEnabledProviders(cr, provider, enabled);\n    }\n    private static boolean updateEnabledProviders(\n        ContentResolver cr, String provider, boolean enabled) {\n      Set<String> providers = new HashSet<>();\n      String oldProviders =\n          Settings.Secure.getString(cr, Settings.Secure.LOCATION_PROVIDERS_ALLOWED);\n      if (!TextUtils.isEmpty(oldProviders)) {\n        providers.addAll(Arrays.asList(oldProviders.split(\",\")));\n      }\n      if (enabled) {\n        providers.add(provider);\n      } else {\n        providers.remove(provider);\n      }\n      String newProviders = TextUtils.join(\",\", providers.toArray());\n      return Settings.Secure.putString(\n          cr, Settings.Secure.LOCATION_PROVIDERS_ALLOWED, newProviders);\n    }\n    @Implementation\n    protected static boolean putInt(ContentResolver resolver, String name, int value) {\n      if (Settings.Secure.LOCATION_MODE.equals(name)\n          && RuntimeEnvironment.getApiLevel() >= LOLLIPOP) {\n        // Map LOCATION_MODE to underlying location provider storage API\n        return Shadow.directlyOn(\n            Settings.Secure.class,\n            \"setLocationModeForUser\",\n            ClassParameter.from(ContentResolver.class, resolver),\n            ClassParameter.from(int.class, value),\n            ClassParameter.from(int.class, 0));\n      }\n      get(resolver).put(name, value);\n      return true;\n    }\n    @Implementation(minSdk = LOLLIPOP)\n    protected static boolean putIntForUser(\n        ContentResolver cr, String name, int value, int userHandle) {\n      putInt(cr, name, value);\n      return true;\n    }\n    @Implementation\n    protected static int getInt(ContentResolver resolver, String name)\n        throws Settings.SettingNotFoundException {\n      if (Settings.Secure.LOCATION_MODE.equals(name)\n          && RuntimeEnvironment.getApiLevel() >= LOLLIPOP) {\n        // Map from to underlying location provider storage API to location mode\n        return Shadow.directlyOn(\n            Settings.Secure.class,\n            \"getLocationModeForUser\",\n            ClassParameter.from(ContentResolver.class, resolver),\n            ClassParameter.from(int.class, 0));\n      }\n      if (get(resolver).get(name) instanceof Integer) {\n        return (Integer) get(resolver).get(name);\n      } else {\n        throw new Settings.SettingNotFoundException(name);\n      }\n    }\n    @Implementation\n    protected static int getInt(ContentResolver resolver, String name, int def) {\n      if (Settings.Secure.LOCATION_MODE.equals(name)\n          && RuntimeEnvironment.getApiLevel() >= LOLLIPOP) {\n        // Map from to underlying location provider storage API to location mode\n        return Shadow.directlyOn(\n            Settings.Secure.class,\n            \"getLocationModeForUser\",\n            ClassParameter.from(ContentResolver.class, resolver),\n            ClassParameter.from(int.class, 0));\n      }\n      Integer v = (Integer) get(resolver).get(name);\n      try {\n        return v != null ? v : def;\n      } catch (NumberFormatException e) {\n        return def;\n      }\n    }\n    @Implementation\n    protected static boolean putString(ContentResolver cr, String name, String value) {\n      get(cr).put(name, value);\n      return true;\n    }\n    @Implementation\n    protected static String getString(ContentResolver cr, String name) {\n      if (get(cr).get(name) instanceof String) {\n        return (String) get(cr).get(name);\n      } else {\n        return null;\n      }\n    }\n    @Implementation(minSdk = JELLY_BEAN_MR1)\n    protected static String getStringForUser(ContentResolver cr, String name, int userHandle) {\n      return getString(cr, name);\n    }\n    @Implementation<fim_middle>// function below has no smell\n"}