{"text": "<fim_prefix>// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////////\n\npackage com.google.crypto.tink.integration.gcpkms;\n\nimport com.google.api.services.cloudkms.v1.CloudKMS;\nimport com.google.api.services.cloudkms.v1.model.DecryptRequest;\nimport com.google.api.services.cloudkms.v1.model.DecryptResponse;\nimport com.google.api.services.cloudkms.v1.model.EncryptRequest;\nimport com.google.api.services.cloudkms.v1.model.EncryptResponse;\nimport com.google.crypto.tink.Aead;\nimport java.io.IOException;\nimport java.security.GeneralSecurityException;\n\n/**\n * A {@link Aead} that forwards encryption/decryption requests to a key in <a\n * href=\"https://cloud.google.com/kms/\">Google Cloud KMS</a>.\n *\n * <p>As of August 2017, Google Cloud KMS supports only AES-256-GCM keys.\n *\n * @since 1.0.0\n */\n<fim_suffix>public final class GcpKmsAead implements Aead {\n\n  /** This client knows how to talk to Google Cloud KMS. */\n  private final CloudKMS kmsClient;\n\n  // The location of a CryptoKey in Google Cloud KMS.\n  // Valid values have this format: projects/*/locations/*/keyRings/*/cryptoKeys/*.\n  // See https://cloud.google.com/kms/docs/object-hierarchy.\n  private final String kmsKeyUri;\n\n  public GcpKmsAead(CloudKMS kmsClient, String keyUri) throws GeneralSecurityException {\n    this.kmsClient = kmsClient;\n    this.kmsKeyUri = keyUri;\n  }\n\n  @Override\n  public byte[] encrypt(final byte[] plaintext, final byte[] aad) throws GeneralSecurityException {\n    try {\n      EncryptRequest request =\n          new EncryptRequest().encodePlaintext(plaintext).encodeAdditionalAuthenticatedData(aad);\n      EncryptResponse response =\n          this.kmsClient\n              .projects()\n              .locations()\n              .keyRings()\n              .cryptoKeys()\n              .encrypt(this.kmsKeyUri, request)\n              .execute();\n      return response.decodeCiphertext();\n    } catch (IOException e) {\n      throw new GeneralSecurityException(\"encryption failed\", e);\n    }\n  }\n\n  @Override\n  public byte[] decrypt(final byte[] ciphertext, final byte[] aad) throws GeneralSecurityException {\n    try {\n      DecryptRequest request =\n          new DecryptRequest().encodeCiphertext(ciphertext).encodeAdditionalAuthenticatedData(aad);\n      DecryptResponse response =\n          this.kmsClient\n              .projects()\n              .locations()\n              .keyRings()\n              .cryptoKeys()\n              .decrypt(this.kmsKeyUri, request)\n              .execute();\n      return response.decodePlaintext();\n    } catch (IOException e) {\n      throw new GeneralSecurityException(\"decryption failed\", e);\n    }\n  }\n}<fim_middle>// class below has no smell\n"}