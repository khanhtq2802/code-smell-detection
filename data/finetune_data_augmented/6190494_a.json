{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.api.languageserver;\n\nimport static org.eclipse.che.api.fs.server.WsPathUtils.ROOT;\n\nimport com.google.inject.Singleton;\nimport java.lang.management.ManagementFactory;\nimport java.net.URI;\nimport java.nio.file.Paths;\nimport java.util.Collections;\nimport javax.inject.Inject;\nimport org.eclipse.che.api.fs.server.PathTransformer;\nimport org.eclipse.che.api.languageserver.RegistryContainer.Registry;\nimport org.eclipse.lsp4j.ClientCapabilities;\nimport org.eclipse.lsp4j.CodeActionCapabilities;\nimport org.eclipse.lsp4j.CodeLensCapabilities;\nimport org.eclipse.lsp4j.CompletionCapabilities;\nimport org.eclipse.lsp4j.CompletionItemCapabilities;\nimport org.eclipse.lsp4j.DefinitionCapabilities;\nimport org.eclipse.lsp4j.DidChangeConfigurationCapabilities;\nimport org.eclipse.lsp4j.DidChangeWatchedFilesCapabilities;\nimport org.eclipse.lsp4j.DocumentHighlightCapabilities;\nimport org.eclipse.lsp4j.DocumentLinkCapabilities;\nimport org.eclipse.lsp4j.DocumentSymbolCapabilities;\nimport org.eclipse.lsp4j.ExecuteCommandCapabilities;\nimport org.eclipse.lsp4j.FormattingCapabilities;\nimport org.eclipse.lsp4j.HoverCapabilities;\nimport org.eclipse.lsp4j.InitializeParams;\nimport org.eclipse.lsp4j.MarkupKind;\nimport org.eclipse.lsp4j.OnTypeFormattingCapabilities;\nimport org.eclipse.lsp4j.RangeFormattingCapabilities;\nimport org.eclipse.lsp4j.ReferencesCapabilities;\nimport org.eclipse.lsp4j.RenameCapabilities;\nimport org.eclipse.lsp4j.SignatureHelpCapabilities;\nimport org.eclipse.lsp4j.SymbolCapabilities;\nimport org.eclipse.lsp4j.SynchronizationCapabilities;\nimport org.eclipse.lsp4j.TextDocumentClientCapabilities;\nimport org.eclipse.lsp4j.WorkspaceClientCapabilities;\nimport org.eclipse.lsp4j.WorkspaceEditCapabilities;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Utility class that simplifies creation of a language server initialize parameters.\n *\n * @author Dmytro Kulieshov\n */\n@Singleton\nclass InitializeParamsProvider {\n  private static final Logger LOG = LoggerFactory.getLogger(InitializeParamsProvider.class);\n\n  private final Registry<Boolean> localityRegistry;\n  private final Registry<String> projectsRootRegistry;\n  private final URI rootUri;\n\n  @Inject\n  InitializeParamsProvider(PathTransformer pathTransformer, RegistryContainer registryContainer) {\n    this.rootUri = pathTransformer.transform(ROOT).toUri();\n    this.localityRegistry = registryContainer.localityRegistry;\n    this.projectsRootRegistry = registryContainer.projectsRootRegistry;\n  }\n\n<fim_suffix>  InitializeParams get(String id) throws LanguageServerException {\n    InitializeParams initializeParams = new InitializeParams();\n    LOG.debug(\"Initialize params constructing: started\");\n\n    Boolean locality = localityRegistry.get(id);\n    LOG.debug(\"Locality: {}\", locality);\n\n    Integer processId = locality ? ProcessIdProvider.get() : null;\n    initializeParams.setProcessId(processId);\n    LOG.debug(\"Process id: {}\", processId);\n\n    String projectsRoot = projectsRootRegistry.getOrNull(id);\n\n    String rootPath;\n    if (projectsRoot != null) {\n      rootPath = projectsRoot;\n    } else {\n      rootPath = Paths.get(rootUri).toAbsolutePath().toString();\n    }\n    initializeParams.setRootPath(rootPath);\n    LOG.debug(\"Root path: {}\", rootPath);\n\n    String rootUri;\n    if (projectsRoot != null) {\n      rootUri = Paths.get(projectsRoot).toUri().toString();\n    } else {\n      rootUri = this.rootUri.toString();\n    }\n    initializeParams.setRootUri(rootUri);\n    LOG.debug(\"Root URI: {}\", rootUri);\n\n    ClientCapabilities capabilities = ClientCapabilitiesProvider.get();\n    initializeParams.setCapabilities(capabilities);\n    LOG.debug(\"Client capabilities: {}\", capabilities);\n\n    String clientName = ClientCapabilitiesProvider.CLIENT_NAME;\n    initializeParams.setClientName(clientName);\n    LOG.debug(\"Client name: {}\", clientName);\n\n    LOG.debug(\"Initialize params constructing: finished\");\n    return initializeParams;\n  }\n\n  /** Provides the id of current process */\n  private static class ProcessIdProvider {\n    private static Integer processId;\n\n    private static int get() {\n      if (processId == null) {\n        String name = ManagementFactory.getRuntimeMXBean().getName();\n        int prefixEnd = name.indexOf('@');\n        if (prefixEnd != -1) {\n          String prefix = name.substring(0, prefixEnd);\n          try {\n            processId = Integer.parseInt(prefix);\n          } catch (NumberFormatException e) {\n            LOG.error(\"Failed to recognize the pid of the process\", e);\n          }\n        } else {\n          LOG.error(\"Failed to recognize the pid of the process\");\n        }\n      }\n\n      return processId;\n    }\n  }\n\n  /** Provides client capabilities */\n  private static class ClientCapabilitiesProvider {\n    private static final String CLIENT_NAME = \"EclipseChe\";\n\n    private static ClientCapabilities clientCapabilities;\n\n    private static ClientCapabilities get() {\n      if (clientCapabilities == null) {\n        clientCapabilities = new ClientCapabilities();\n\n        WorkspaceClientCapabilities workspace = new WorkspaceClientCapabilities();\n        workspace.setApplyEdit(false);\n        workspace.setDidChangeConfiguration(new DidChangeConfigurationCapabilities());\n        workspace.setDidChangeWatchedFiles(new DidChangeWatchedFilesCapabilities());\n        workspace.setExecuteCommand(new ExecuteCommandCapabilities());\n        workspace.setSymbol(new SymbolCapabilities());\n        workspace.setWorkspaceEdit(new WorkspaceEditCapabilities());\n        clientCapabilities.setWorkspace(workspace);\n\n        TextDocumentClientCapabilities textDocument = new TextDocumentClientCapabilities();\n        textDocument.setCodeAction(new CodeActionCapabilities());\n        textDocument.setCodeLens(new CodeLensCapabilities());\n        CompletionItemCapabilities ciCaps = new CompletionItemCapabilities(true);\n        ciCaps.setDocumentationFormat(Collections.singletonList(MarkupKind.MARKDOWN));\n        textDocument.setCompletion(new CompletionCapabilities(ciCaps));\n        textDocument.setDefinition(new DefinitionCapabilities());\n        textDocument.setDocumentHighlight(new DocumentHighlightCapabilities());\n        textDocument.setDocumentLink(new DocumentLinkCapabilities());\n        textDocument.setDocumentSymbol(new DocumentSymbolCapabilities());\n        textDocument.setFormatting(new FormattingCapabilities());\n        textDocument.setHover(new HoverCapabilities());\n        textDocument.setOnTypeFormatting(new OnTypeFormattingCapabilities());\n        textDocument.setRangeFormatting(new RangeFormattingCapabilities());\n        textDocument.setReferences(new ReferencesCapabilities());\n        textDocument.setRename(new RenameCapabilities());\n        textDocument.setSignatureHelp(new SignatureHelpCapabilities());\n        textDocument.setSynchronization(new SynchronizationCapabilities(true, false, true));\n        clientCapabilities.setTextDocument(textDocument);\n      }\n\n      return clientCapabilities;\n    }\n  }\n}<fim_middle>// function below is feature envy and long method\n"}