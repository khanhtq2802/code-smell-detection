{"text": "<fim_prefix>        _xifexpression_1 = ((JvmGenericType)context);\n      } else {\n        _xifexpression_1 = this.containerType(context.eContainer());\n      }\n      _xifexpression = _xifexpression_1;\n    }\n    return _xifexpression;\n  }\n  protected String makeJavaIdentifier(final String name) {\n    String _xifexpression = null;\n    if ((name == null)) {\n      return \"__unknown__\";\n    } else {\n      String _xifexpression_1 = null;\n      boolean _isJavaKeyword = this.keywords.isJavaKeyword(name);\n      if (_isJavaKeyword) {\n        _xifexpression_1 = (name + \"_\");\n      } else {\n        _xifexpression_1 = name;\n      }\n      _xifexpression = _xifexpression_1;\n    }\n    return _xifexpression;\n  }\n  protected Iterable<JvmMember> _getMembersToBeCompiled(final JvmEnumerationType type) {\n    Iterable<JvmMember> _xblockexpression = null;\n    {\n      String _identifier = type.getIdentifier();\n      String _plus = (_identifier + \".\");\n      String _plus_1 = (_plus + \"valueOf(java.lang.String)\");\n      String _identifier_1 = type.getIdentifier();\n      String _plus_2 = (_identifier_1 + \".\");\n      String _plus_3 = (_plus_2 + \"values()\");\n      final Set<String> syntheticEnumMethods = Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet(_plus_1, _plus_3));\n      final Function1<JvmMember, Boolean> _function = (JvmMember it) -> {\n        return Boolean.valueOf((!((it instanceof JvmOperation) && syntheticEnumMethods.contains(it.getIdentifier()))));\n      };\n      _xblockexpression = IterableExtensions.<JvmMember>filter(type.getMembers(), _function);\n    }\n    return _xblockexpression;\n  }\n  protected Iterable<JvmMember> _getMembersToBeCompiled(final JvmDeclaredType it) {\n    final Function1<JvmMember, Boolean> _function = (JvmMember it_1) -> {\n      return Boolean.valueOf((!((it_1 instanceof JvmConstructor) && this._jvmTypeExtensions.isSingleSyntheticDefaultConstructor(((JvmConstructor) it_1)))));\n    };\n    return IterableExtensions.<JvmMember>filter(it.getMembers(), _function);\n  }\n  protected Iterable<JvmMember> _getMembersToBeCompiled(final JvmGenericType it) {\n    Iterable<JvmMember> _xifexpression = null;\n    boolean _isAnonymous = it.isAnonymous();\n    if (_isAnonymous) {\n      final Function1<JvmMember, Boolean> _function = (JvmMember it_1) -> {\n        return Boolean.valueOf((!(it_1 instanceof JvmConstructor)));\n      };\n      _xifexpression = IterableExtensions.<JvmMember>filter(it.getMembers(), _function);\n    } else {\n      _xifexpression = this._getMembersToBeCompiled(((JvmDeclaredType) it));\n    }\n    return _xifexpression;\n  }\n  protected Set<EObject> getSourceElements(final EObject jvmElement) {\n    return this.jvmModelAssociations.getSourceElements(jvmElement);\n  }\n  public void internalDoGenerate(final EObject type, final IFileSystemAccess fsa) {\n    if (type instanceof JvmDeclaredType) {\n      _internalDoGenerate((JvmDeclaredType)type, fsa);\n      return;\n    } else if (type != null) {\n      _internalDoGenerate(type, fsa);\n      return;\n    } else {\n      throw new IllegalArgumentException(\"Unhandled parameter types: \" +\n        Arrays.<Object>asList(type, fsa).toString());\n    }\n  }\n  public ITreeAppendable generateBody(final JvmDeclaredType it, final ITreeAppendable appendable, final GeneratorConfig config) {\n    if (it instanceof JvmAnnotationType) {\n      return _generateBody((JvmAnnotationType)it, appendable, config);\n    } else if (it instanceof JvmEnumerationType) {\n      return _generateBody((JvmEnumerationType)it, appendable, config);\n    } else if (it instanceof JvmGenericType) {\n      return _generateBody((JvmGenericType)it, appendable, config);\n    } else {\n      throw new IllegalArgumentException(\"Unhandled parameter types: \" +\n        Arrays.<Object>asList(it, appendable, config).toString());\n    }\n  }\n  public ITreeAppendable generateModifier(final JvmMember it, final ITreeAppendable appendable, final GeneratorConfig config) {\n    if (it instanceof JvmConstructor) {\n      return _generateModifier((JvmConstructor)it, appendable, config);\n    } else if (it instanceof JvmOperation) {\n      return _generateModifier((JvmOperation)it, appendable, config);\n    } else if (it instanceof JvmField) {\n      return _generateModifier((JvmField)it, appendable, config);\n    } else if (it instanceof JvmGenericType) {\n      return _generateModifier((JvmGenericType)it, appendable, config);\n    } else if (it instanceof JvmDeclaredType) {\n      return _generateModifier((JvmDeclaredType)it, appendable, config);\n    } else {\n      throw new IllegalArgumentException(\"Unhandled parameter types: \" +\n        Arrays.<Object>asList(it, appendable, config).toString());\n    }\n  }\n  public ITreeAppendable generateMember(final JvmMember it, final ITreeAppendable appendable, final GeneratorConfig config) {\n    if (it instanceof JvmConstructor) {\n      return _generateMember((JvmConstructor)it, appendable, config);\n    } else if (it instanceof JvmOperation) {\n      return _generateMember((JvmOperation)it, appendable, config);\n    } else if (it instanceof JvmField) {\n      return _generateMember((JvmField)it, appendable, config);\n    } else if (it instanceof JvmDeclaredType) {\n      return _generateMember((JvmDeclaredType)it, appendable, config);\n    } else if (it != null) {\n      return _generateMember(it, appendable, config);\n    } else {\n      throw new IllegalArgumentException(\"Unhandled parameter types: \" +\n        Arrays.<Object>asList(it, appendable, config).toString());\n    }\n  }\n  public void toJavaLiteral(final JvmAnnotationValue value, final ITreeAppendable appendable, final GeneratorConfig config) {\n    if (value instanceof JvmAnnotationAnnotationValue) {\n      _toJavaLiteral((JvmAnnotationAnnotationValue)value, appendable, config);\n      return;\n    } else if (value instanceof JvmBooleanAnnotationValue) {\n      _toJavaLiteral((JvmBooleanAnnotationValue)value, appendable, config);\n      return;\n    } else if (value instanceof JvmByteAnnotationValue) {\n      _toJavaLiteral((JvmByteAnnotationValue)value, appendable, config);\n      return;\n    } else if (value instanceof JvmCharAnnotationValue) {\n      _toJavaLiteral((JvmCharAnnotationValue)value, appendable, config);\n      return;\n    } else if (value instanceof JvmCustomAnnotationValue) {\n      _toJavaLiteral((JvmCustomAnnotationValue)value, appendable, config);\n      return;\n    } else if (value instanceof JvmDoubleAnnotationValue) {\n      _toJavaLiteral((JvmDoubleAnnotationValue)value, appendable, config);\n      return;\n    } else if (value instanceof JvmEnumAnnotationValue) {\n      _toJavaLiteral((JvmEnumAnnotationValue)value, appendable, config);\n      return;\n    } else if (value instanceof JvmFloatAnnotationValue) {\n      _toJavaLiteral((JvmFloatAnnotationValue)value, appendable, config);\n      return;\n    } else if (value instanceof JvmIntAnnotationValue) {\n      _toJavaLiteral((JvmIntAnnotationValue)value, appendable, config);\n      return;\n    } else if (value instanceof JvmLongAnnotationValue) {\n      _toJavaLiteral((JvmLongAnnotationValue)value, appendable, config);\n      return;\n    } else if (value instanceof JvmShortAnnotationValue) {\n      _toJavaLiteral((JvmShortAnnotationValue)value, appendable, config);\n      return;\n    } else if (value instanceof JvmStringAnnotationValue) {\n      _toJavaLiteral((JvmStringAnnotationValue)value, appendable, config);\n      return;\n    } else if (value instanceof JvmTypeAnnotationValue) {\n      _toJavaLiteral((JvmTypeAnnotationValue)value, appendable, config);\n      return;\n    } else {\n      throw new IllegalArgumentException(\"Unhandled parameter types: \" +\n        Arrays.<Object>asList(value, appendable, config).toString());\n    }\n  }\n<fim_suffix>  public Iterable<JvmMember> getMembersToBeCompiled(final JvmDeclaredType type) {\n    if (type instanceof JvmEnumerationType) {\n      return _getMembersToBeCompiled((JvmEnumerationType)type);\n    } else if (type instanceof JvmGenericType) {\n      return _getMembersToBeCompiled((JvmGenericType)type);\n    } else if (type != null) {\n      return _getMembersToBeCompiled(type);\n    } else {\n      throw new IllegalArgumentException(\"Unhandled parameter types: \" +\n        Arrays.<Object>asList(type).toString());\n    }\n  }<fim_middle>// function below has no smell\n"}