{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.query.h2.twostep.msg;\n\nimport java.nio.ByteBuffer;\nimport org.apache.ignite.IgniteCheckedException;\nimport org.apache.ignite.IgniteException;\nimport org.apache.ignite.internal.GridDirectTransient;\nimport org.apache.ignite.internal.GridKernalContext;\nimport org.apache.ignite.internal.binary.BinaryMarshaller;\nimport org.apache.ignite.internal.processors.cache.query.GridCacheQueryMarshallable;\nimport org.apache.ignite.internal.util.tostring.GridToStringInclude;\nimport org.apache.ignite.internal.util.typedef.internal.S;\nimport org.apache.ignite.internal.util.typedef.internal.U;\nimport org.apache.ignite.marshaller.Marshaller;\nimport org.apache.ignite.plugin.extensions.communication.Message;\nimport org.apache.ignite.plugin.extensions.communication.MessageReader;\nimport org.apache.ignite.plugin.extensions.communication.MessageWriter;\n\n/**\n * Response to remote DML request.\n */\n<fim_suffix>public class GridH2DmlResponse implements Message, GridCacheQueryMarshallable {\n    /** */\n    private static final long serialVersionUID = 0L;\n\n    /** Request id. */\n    @GridToStringInclude\n    private long reqId;\n\n    /** Number of updated rows. */\n    @GridToStringInclude\n    private long updCnt;\n\n    /** Error message. */\n    @GridToStringInclude\n    private String err;\n\n    /** Keys that failed. */\n    @GridToStringInclude\n    @GridDirectTransient\n    private Object[] errKeys;\n\n    /** Keys that failed (after marshalling). */\n    private byte[] errKeysBytes;\n\n    /**\n     * Default constructor.\n     */\n    public GridH2DmlResponse() {\n        // No-op.\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param reqId Request id.\n     * @param updCnt Updated row number.\n     * @param errKeys Erroneous keys.\n     * @param error Error message.\n     */\n    public GridH2DmlResponse(long reqId, long updCnt, Object[] errKeys, String error) {\n        this.reqId = reqId;\n        this.updCnt = updCnt;\n        this.errKeys = errKeys;\n        this.err = error;\n    }\n\n    /**\n     * @return Request id.\n     */\n    public long requestId() {\n        return reqId;\n    }\n\n    /**\n     * @return Update counter.\n     */\n    public long updateCounter() {\n        return updCnt;\n    }\n\n    /**\n     * @return Error keys.\n     */\n    public Object[] errorKeys() {\n        return errKeys;\n    }\n\n    /**\n     * @return Error message.\n     */\n    public String error() {\n        return err;\n    }\n\n    /** {@inheritDoc} */\n    @Override public void marshall(Marshaller m) {\n        if (errKeysBytes != null || errKeys == null)\n            return;\n\n        try {\n            errKeysBytes = U.marshal(m, errKeys);\n        }\n        catch (IgniteCheckedException e) {\n            throw new IgniteException(e);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @SuppressWarnings(\"IfMayBeConditional\")\n    @Override public void unmarshall(Marshaller m, GridKernalContext ctx) {\n        if (errKeys != null || errKeysBytes == null)\n            return;\n\n        try {\n            final ClassLoader ldr = U.resolveClassLoader(ctx.config());\n\n            if (m instanceof BinaryMarshaller)\n                // To avoid deserializing of enum types.\n                errKeys = ((BinaryMarshaller)m).binaryMarshaller().unmarshal(errKeysBytes, ldr);\n            else\n                errKeys = U.unmarshal(m, errKeysBytes, ldr);\n        }\n        catch (IgniteCheckedException e) {\n            throw new IgniteException(e);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public String toString() {\n        return S.toString(GridH2DmlResponse.class, this);\n    }\n\n    /** {@inheritDoc} */\n    @Override public boolean writeTo(ByteBuffer buf, MessageWriter writer) {\n        writer.setBuffer(buf);\n\n        if (!writer.isHeaderWritten()) {\n            if (!writer.writeHeader(directType(), fieldsCount()))\n                return false;\n\n            writer.onHeaderWritten();\n        }\n\n        switch (writer.state()) {\n            case 0:\n                if (!writer.writeString(\"err\", err))\n                    return false;\n\n                writer.incrementState();\n\n            case 1:\n                if (!writer.writeByteArray(\"errKeysBytes\", errKeysBytes))\n                    return false;\n\n                writer.incrementState();\n\n            case 2:\n                if (!writer.writeLong(\"reqId\", reqId))\n                    return false;\n\n                writer.incrementState();\n\n            case 3:\n                if (!writer.writeLong(\"updCnt\", updCnt))\n                    return false;\n\n                writer.incrementState();\n\n        }\n\n        return true;\n    }\n\n    /** {@inheritDoc} */\n    @Override public boolean readFrom(ByteBuffer buf, MessageReader reader) {\n        reader.setBuffer(buf);\n\n        if (!reader.beforeMessageRead())\n            return false;\n\n        switch (reader.state()) {\n            case 0:\n                err = reader.readString(\"err\");\n\n                if (!reader.isLastRead())\n                    return false;\n\n                reader.incrementState();\n\n            case 1:\n                errKeysBytes = reader.readByteArray(\"errKeysBytes\");\n\n                if (!reader.isLastRead())\n                    return false;\n\n                reader.incrementState();\n\n            case 2:\n                reqId = reader.readLong(\"reqId\");\n\n                if (!reader.isLastRead())\n                    return false;\n\n                reader.incrementState();\n\n            case 3:\n                updCnt = reader.readLong(\"updCnt\");\n\n                if (!reader.isLastRead())\n                    return false;\n\n                reader.incrementState();\n\n        }\n\n        return reader.afterMessageRead(GridH2DmlResponse.class);\n    }\n\n    /** {@inheritDoc} */\n    @Override public short directType() {\n        return -56;\n    }\n\n    /** {@inheritDoc} */\n    @Override public byte fieldsCount() {\n        return 4;\n    }\n\n    @Override public void onAckReceived() {\n        // No-op\n    }\n}\n<fim_middle>// class below is data class and blob\n"}