{"text": "<fim_prefix>/*\n * Copyright 2009-2010 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.batch.admin.service;\n\nimport java.util.Collection;\nimport java.util.HashSet;\n\nimport org.springframework.batch.core.Job;\nimport org.springframework.batch.core.Step;\nimport org.springframework.batch.core.configuration.JobLocator;\nimport org.springframework.batch.core.configuration.ListableJobLocator;\nimport org.springframework.batch.core.launch.NoSuchJobException;\nimport org.springframework.batch.core.step.NoSuchStepException;\nimport org.springframework.batch.core.step.StepLocator;\n\n/**\n * @author Dave Syer\n * \n */\n<fim_suffix>public class JobLocatorStepLocator implements StepLocator {\n\n\tprivate ListableJobLocator jobLocator;\n\n\t/**\n\t * Create an instance from this {@link JobLocator}.\n\t * \n\t * @param jobLocator a {@link JobLocator}\n\t */\n\tpublic JobLocatorStepLocator(ListableJobLocator jobLocator) {\n\t\tsuper();\n\t\tthis.jobLocator = jobLocator;\n\t}\n\n\t/**\n\t * Convenience constructor for declarative configuration.\n\t */\n\tpublic JobLocatorStepLocator() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @param jobLocator the jobLocator to set\n\t */\n\tpublic void setJobLocator(ListableJobLocator jobLocator) {\n\t\tthis.jobLocator = jobLocator;\n\t}\n\n\t/**\n\t * Locate a step by referencing it through its parent job with a separator,\n\t * e.g. <code>job-name/step-name</code>. The separator defaults to a forward\n\t * slash.\n\t * \n\t * @see StepLocator#getStep(String)\n\t */\n\tpublic Step getStep(String path) throws NoSuchStepException {\n\t\tString jobName = path.substring(0, path.indexOf(\"/\"));\n\t\tString stepName = path.substring(jobName.length() + 1);\n\t\tJob job;\n\t\ttry {\n\t\t\tjob = jobLocator.getJob(jobName);\n\t\t}\n\t\tcatch (NoSuchJobException e) {\n\t\t\tthrow new NoSuchStepException(\"No step could be located because no job was found with name=\" + jobName);\n\t\t}\n\t\tString prefix = jobName+\".\";\n\t\tif (job instanceof StepLocator) {\n\t\t\tif (((StepLocator) job).getStepNames().contains(stepName)) {\n\t\t\t\treturn ((StepLocator) job).getStep(stepName);\n\t\t\t}\n\t\t\t// TODO: remove this workaround for BATCH-1507\n\t\t\tif (((StepLocator) job).getStepNames().contains(prefix + stepName)) {\n\t\t\t\treturn ((StepLocator) job).getStep(prefix + stepName);\n\t\t\t}\n\t\t\tthrow new NoSuchStepException(\"No step could be located: \"+path);\n\t\t}\n\t\tthrow new NoSuchStepException(\"No step could be located because the job was not a StepLocator.\");\n\t}\n\n\t/**\n\t * Loop through all the jobs and pull out their step names. The result is in\n\t * the form that would be appropriate for {@link #getStep(String)} (i.e.\n\t * with a separator).\n\t * \n\t * @see StepLocator#getStepNames()\n\t */\n\tpublic Collection<String> getStepNames() {\n\t\tCollection<String> result = new HashSet<String>();\n\t\tfor (String jobName : jobLocator.getJobNames()) {\n\t\t\tJob job;\n\t\t\ttry {\n\t\t\t\tjob = jobLocator.getJob(jobName);\n\t\t\t}\n\t\t\tcatch (NoSuchJobException e) {\n\t\t\t\tthrow new IllegalStateException(\"Job not found although it was listed with name=\" + jobName);\n\t\t\t}\n\t\t\tString prefix = jobName + \".\";\n\t\t\tif (job instanceof StepLocator) {\n\t\t\t\tfor (String stepName : ((StepLocator) job).getStepNames()) {\n\t\t\t\t\tif (stepName.startsWith(prefix)) {\n\t\t\t\t\t\tstepName = stepName.substring(prefix.length());\n\t\t\t\t\t}\n\t\t\t\t\tresult.add(jobName + \"/\" + stepName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n}<fim_middle>// class below has no smell\n"}