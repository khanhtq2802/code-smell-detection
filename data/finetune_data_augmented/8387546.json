{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.dataformat.beanio;\n\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.util.Iterator;\n\nimport org.beanio.BeanReader;\n\n<fim_suffix>public class BeanIOIterator implements Iterator<Object>, Closeable {\n\n    private BeanReader reader;\n    private transient Object next;\n    private transient Object forceNext;\n\n    public BeanIOIterator(BeanReader reader) {\n        this.reader = reader;\n        this.next = next();\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (reader != null) {\n            reader.close();\n            reader = null;\n        }\n    }\n\n    @Override\n    public boolean hasNext() {\n        return next != null;\n    }\n\n    @Override\n    public Object next() {\n        Object answer = next;\n        if (answer == null) {\n            answer = reader.read();\n            // after read we may force a next\n            if (forceNext != null) {\n                answer = forceNext;\n                forceNext = null;\n            }\n        } else {\n            next = reader.read();\n            // after read we may force a next\n            if (forceNext != null) {\n                next = forceNext;\n                forceNext = null;\n            }\n        }\n        return answer;\n    }\n\n    @Override\n    public void remove() {\n        // noop\n    }\n\n    /**\n     * Sets a custom object as the next, such as from a custom error handler\n     */\n    public void setNext(Object next) {\n        this.forceNext = next;\n    }\n}<fim_middle>// class below has no smell\n"}