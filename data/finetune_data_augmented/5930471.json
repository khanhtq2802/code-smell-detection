{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.openejb.cdi;\nimport org.apache.openejb.AppContext;\nimport org.apache.openejb.assembler.classic.AppInfo;\nimport org.apache.openejb.assembler.classic.EjbJarInfo;\nimport org.apache.openejb.cdi.transactional.TransactionContext;\nimport org.apache.openejb.core.ThreadContext;\nimport org.apache.openejb.loader.SystemInstance;\nimport org.apache.openejb.loader.event.ComponentAdded;\nimport org.apache.openejb.loader.event.ComponentRemoved;\nimport org.apache.openejb.observer.Observes;\nimport org.apache.openejb.threads.impl.ManagedExecutorServiceImpl;\nimport org.apache.openejb.threads.impl.ManagedThreadFactoryImpl;\nimport org.apache.openejb.util.AppFinder;\nimport org.apache.openejb.util.ExecutorBuilder;\nimport org.apache.openejb.util.LogCategory;\nimport org.apache.openejb.util.Logger;\nimport org.apache.openejb.util.classloader.MultipleClassLoader;\nimport org.apache.webbeans.config.OpenWebBeansConfiguration;\nimport org.apache.webbeans.config.WebBeansContext;\nimport org.apache.webbeans.container.BeanManagerImpl;\nimport org.apache.webbeans.corespi.se.DefaultApplicationBoundaryService;\nimport org.apache.webbeans.intercept.ApplicationScopedBeanInterceptorHandler;\nimport org.apache.webbeans.intercept.NormalScopedBeanInterceptorHandler;\nimport org.apache.webbeans.intercept.RequestScopedBeanInterceptorHandler;\nimport org.apache.webbeans.intercept.SessionScopedBeanInterceptorHandler;\nimport org.apache.webbeans.spi.ApplicationBoundaryService;\nimport org.apache.webbeans.spi.BeanArchiveService;\nimport org.apache.webbeans.spi.ContainerLifecycle;\nimport org.apache.webbeans.spi.ContextsService;\nimport org.apache.webbeans.spi.ConversationService;\nimport org.apache.webbeans.spi.JNDIService;\nimport org.apache.webbeans.spi.LoaderService;\nimport org.apache.webbeans.spi.ResourceInjectionService;\nimport org.apache.webbeans.spi.ScannerService;\nimport org.apache.webbeans.spi.SecurityService;\nimport org.apache.webbeans.spi.TransactionService;\nimport org.apache.webbeans.spi.adaptor.ELAdaptor;\nimport javax.enterprise.inject.spi.DeploymentException;\nimport javax.transaction.Transactional;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.atomic.AtomicReference;\n/**\n * @version $Rev:$ $Date:$\n */\npublic class ThreadSingletonServiceImpl implements ThreadSingletonService {\n    public static final Logger logger = Logger.getInstance(LogCategory.OPENEJB_STARTUP, ThreadSingletonServiceImpl.class);\n    private Object lazyInit;\n    private volatile boolean cachedApplicationScoped;\n    private volatile boolean cachedRequestScoped;\n    private volatile boolean cachedSessionScoped;\n    //this needs to be static because OWB won't tell us what the existing SingletonService is and you can't set it twice.\n    private static final ThreadLocal<WebBeansContext> contexts = new ThreadLocal<WebBeansContext>();\n    private static final Map<ClassLoader, WebBeansContext> contextByClassLoader = new ConcurrentHashMap<ClassLoader, WebBeansContext>();\n    private OWBContextThreadListener contextThreadListener;\n<fim_suffix>    public void threadSingletonServiceAdded(@Observes ComponentAdded<ThreadSingletonService> componentAdded) {\n        if (componentAdded.getComponent() != this) {\n            return;\n        }\n        contextThreadListener = new OWBContextThreadListener();\n        ThreadContext.addThreadContextListener(contextThreadListener);\n    }\n    public void threadSingletonServiceRemoved(@Observes ComponentRemoved componentRemoved) {\n        if (componentRemoved.getComponent() != this) {\n            return;\n        }\n        ThreadContext.removeThreadContextListener(contextThreadListener);\n    }\n    @Override\n    public void initialize(final StartupObject startupObject) {\n        if (lazyInit == null) { // done here cause Cdibuilder trigger this class loading and that's from Warmup so we can't init too early config\n            synchronized (this) {\n                if (lazyInit == null) {\n                    lazyInit = new Object();\n                    cachedApplicationScoped = \"true\".equalsIgnoreCase(SystemInstance.get().getProperty(\"openejb.cdi.applicationScope.cached\", \"true\").trim());\n                    cachedRequestScoped = \"true\".equalsIgnoreCase(SystemInstance.get().getProperty(\"openejb.cdi.requestScope.cached\", \"true\").trim());\n                    cachedSessionScoped = \"true\".equalsIgnoreCase(SystemInstance.get().getProperty(\"openejb.cdi.sessionScope.cached\", \"true\").trim());\n                }\n            }\n        }\n        final AppContext appContext = startupObject.getAppContext();\n        appContext.setCdiEnabled(hasBeans(startupObject.getAppInfo()));\n        //initialize owb context, cf geronimo's OpenWebBeansGBean\n        final Properties properties = new Properties();\n        properties.setProperty(OpenWebBeansConfiguration.APPLICATION_IS_JSP, \"true\");\n        properties.setProperty(OpenWebBeansConfiguration.USE_EJB_DISCOVERY, \"true\");\n        //from CDI builder\n        properties.setProperty(OpenWebBeansConfiguration.INTERCEPTOR_FORCE_NO_CHECKED_EXCEPTIONS, \"false\");\n        properties.setProperty(SecurityService.class.getName(), ManagedSecurityService.class.getName());\n        properties.setProperty(OpenWebBeansConfiguration.CONVERSATION_PERIODIC_DELAY, \"1800000\");\n        properties.setProperty(OpenWebBeansConfiguration.APPLICATION_SUPPORTS_CONVERSATION, \"true\");\n        properties.setProperty(OpenWebBeansConfiguration.IGNORED_INTERFACES, \"org.apache.aries.proxy.weaving.WovenProxy\");\n        final boolean tomee = SystemInstance.get().getProperty(\"openejb.loader\", \"foo\").startsWith(\"tomcat\");\n        final String defaultNormalScopeHandlerClass = NormalScopedBeanInterceptorHandler.class.getName();\n        properties.setProperty(\"org.apache.webbeans.proxy.mapping.javax.enterprise.context.ApplicationScoped\",\n                cachedApplicationScoped ? ApplicationScopedBeanInterceptorHandler.class.getName() : defaultNormalScopeHandlerClass);\n        properties.setProperty(\"org.apache.webbeans.proxy.mapping.javax.enterprise.context.RequestScoped\",\n            tomee && cachedRequestScoped ? RequestScopedBeanInterceptorHandler.class.getName() : defaultNormalScopeHandlerClass);\n        properties.setProperty(\"org.apache.webbeans.proxy.mapping.javax.enterprise.context.SessionScoped\",\n            tomee && cachedSessionScoped ? SessionScopedBeanInterceptorHandler.class.getName() : defaultNormalScopeHandlerClass);\n        properties.put(OpenWebBeansConfiguration.PRODUCER_INTERCEPTION_SUPPORT, SystemInstance.get().getProperty(\"openejb.cdi.producer.interception\", \"true\"));\n        properties.putAll(appContext.getProperties());\n        // services needing WBC as constructor param\n        properties.put(ContextsService.class.getName(), CdiAppContextsService.class.getName());\n        properties.put(ResourceInjectionService.class.getName(), CdiResourceInjectionService.class.getName());\n        properties.put(TransactionService.class.getName(), OpenEJBTransactionService.class.getName());\n        properties.put(\"org.apache.webbeans.component.PrincipalBean.proxy\", \"false\");\n        // NOTE: ensure user can extend/override all the services = set it only if not present in properties, see WebBeansContext#getService()\n        final Map<Class<?>, Object> services = new HashMap<>();\n        services.put(AppContext.class, appContext);\n        if (!properties.containsKey(Executor.class.getName())) {\n            services.put(Executor.class, new Executor() {\n                // lazy to create threads only for apps requiring it\n                private final AtomicReference<Executor> delegate = new AtomicReference<>();\n                @Override\n                public void execute(final Runnable command) {\n                    Executor executor = delegate.get();\n                    if (executor == null) {\n                        synchronized (this) {<fim_middle>// function below has no smell\n"}