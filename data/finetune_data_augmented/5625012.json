{"text": "<fim_prefix>            if (contextStack.size() == 0)\n            {\n                if (!qname.equals(rootElement))\n                {\n                    throw new SAXConfigurationException(\n                            new ConfigurationException.IncorrectElement(rootElement, qname, this.source, locator.getLineNumber()),\n                            locator);\n                }                \n                contextStack.push(qname);\n                applicationPath = attributes.getValue(\"mainApplicationPath\");\n                outputFileName = applicationPath.substring(0, applicationPath.lastIndexOf('.'));\n                return;\n            }\n            else\n            {\n                if (qname.equals(\"compiler\"))\n                {\n                    String extras = attributes.getValue(\"additionalCompilerArguments\");\n                    if (extras != null && extras.length() > 0)\n                    {\n                        additionalCompilerArguments = extras;\n                    }\n                    String srcPath = attributes.getValue(\"sourceFolderPath\");\n                    if (srcPath != null && srcPath.length() > 0)\n                    {\n                        applicationPath = contextPath + \"/\" + srcPath + \"/\" + applicationPath;\n                        sourcePath = contextPath + \"/\" + srcPath;\n                        fbArgs.add(\"-source-path+=\" + contextPath + \"/\" + srcPath);\n                    }\n                    String isApollo = attributes.getValue(\"useApolloConfig\");\n                    if (isApollo != null && isApollo.length() > 0)\n                    {\n                        if (isApollo.equals(\"true\"))\n                        {\n                            fbArgs.add(\"+configname=air\");\n                        }\n                    }\n                    String isAccessible = attributes.getValue(\"generateAccessible\");\n                    if (isAccessible != null && isAccessible.length() > 0)\n                    {\n                        if (isAccessible.equals(\"true\"))\n                        {\n                            fbArgs.add(\"-compiler.accessible=true\");\n                        }\n                    }\n                    String outputFolder = attributes.getValue(\"outputFolderPath\");\n                    if (outputFolder != null && outputFolder.length() > 0)\n                    {\n                        // swap bin-debug for bin-release if not debug swf\n                        if (!isDebug)\n                            outputFolder = outputFolder.replace(\"debug\", \"release\");\n                        String outFile = \"-output=\";\n                        if (!outputFolder.startsWith(\"/\"))\n                            outFile += contextPath + \"/\";\n                        fbArgs.add(outFile + outputFolder +  \"/\" + outputFileName + suffix);\n                    }\n                }\n                else if (qname.equals(\"sourcePathEntry\"))\n                {\n                    String kind = attributes.getValue(\"kind\");\n                    if (kind.equals(\"1\"))\n                    {\n                        String path = attributes.getValue(\"path\");\n                        fbArgs.add(\"-source-path+=\" + contextPath + \"/\" + path);\n                    }\n                }\n                else if (qname.equals(\"libraryPathEntry\"))\n                {\n                    if (!inExclude)\n                    {\n                        String kind = attributes.getValue(\"kind\");\n                        String linkType = attributes.getValue(\"linkType\");\n                        String path = attributes.getValue(\"path\");\n                        if (!kind.equals(\"4\")) // not an sdk reference\n                        {\n                            if (path.contains(\"${DOCUMENTS}\"))\n                            {\n                                if (workspacePath == null)\n                                {\n                                    workspacePath = source;\n                                    File workspaceFile = new File(source);\n                                    workspacePath = workspaceFile.getParent();\n                                    while (workspacePath != null && workspacePath.length() > 0)\n                                    {\n                                        workspaceFile = new File(workspacePath + \"/.metadata\");\n                                        if (workspaceFile.exists())\n                                            break;\n                                        workspacePath = workspaceFile.getParentFile().getParent();\n                                    }\n                                }\n                                path = path.replace(\"${DOCUMENTS}\", workspacePath);\n                                fbArgs.add(linkType.equals(\"2\") ? \"-external-library-path+=\" + path : \"-library-path+=\" + path);\n                            }\n                            else if (path.contains(\"${PROJECT_FRAMEWORKS}\"))\n                            {\n                                path = path.replace(\"${PROJECT_FRAMEWORKS}\", sdkdir);\n                                fbArgs.add(linkType.equals(\"2\") ? \"-external-library-path+=\" + path : \"-library-path+=\" + path);\n                            }\n                            else\n                            {\n                                if (path.startsWith(\"/\"))\n                                {\n                                    File f = new File(contextPath);\n                                    // FB puts a \"/\" in front of references to other projects\n                                    String parentPath = f.getParent();\n                                    f = new File(parentPath + path);\n                                    if (f.exists())\n                                        fbArgs.add(linkType.equals(\"2\") ? \"-external-library-path+=\" + parentPath + path : \"-library-path+=\" + parentPath + path);\n                                    else\n                                        fbArgs.add(linkType.equals(\"2\") ? \"-external-library-path+=\" + path : \"-library-path+=\" + path);\n                                }\n                                else\n                                    fbArgs.add(linkType.equals(\"2\") ? \"-external-library-path+=\" + contextPath + \"/\" + path : \"-library-path+=\" + contextPath + \"/\" + path);\n                            }\n                        }\n                    }\n                }\n                else if (qname.equals(\"excludedEntries\"))\n                    inExclude = true;\n            }\n        }\n        @Override\n        public void endElement(String uri, String localName, String qname) throws SAXException\n        {\n            if (qname.equals(\"excludedEntries\"))\n                inExclude = false;\n        }\n        @Override\n        public void characters(char ch[], int start, int length)\n        {\n        }\n        @Override\n        public void setDocumentLocator(Locator locator)\n        {\n            this.locator = locator;\n        }\n    }\n    private static class RoyaleLibPropertiesReader\n    {        \n        public void read(ArrayList<String> fbArgs, String fbFolder) throws ConfigurationException\n        {\n            String path = fbFolder + \"/\" + \".royaleLibProperties\";\n            final RoyaleLibPropertiesHandler h = new RoyaleLibPropertiesHandler(fbArgs, path, fbFolder, \"royaleLibProperties\");\n            final SAXParserFactory factory = SAXParserFactory.newInstance();\n            Reader reader = null;\n            try\n            {\n                FileSpecification fs = new FileSpecification(path);\n                reader = fs.createReader();\n                final SAXParser parser = factory.newSAXParser();\n                final InputSource source = new InputSource(reader);\n                parser.parse(source, h);\n                if (h.allClasses)\n                {\n                    // may need to find and list all classes\n                    fbArgs.add(\"-include-sources=\" + fbFolder + \"/src\");\n                }\n                else\n                {\n                    StringBuilder classList = new StringBuilder();\n                    boolean first = true;\n                    for (String cname : h.includedClasses)\n                    {\n                        if (!first)\n                            classList.append(\", \");\n                        first = false;\n                        classList.append(cname);\n                    }\n                    fbArgs.add(\"-include-classes=\" + classList.toString());\n                }\n            }\n            catch (SAXConfigurationException e)\n            {\n                throw e.innerException;\n            }\n            catch (SAXParseException e)\n            {\n                throw new ConfigurationException.OtherThrowable(e, null, path, e.getLineNumber());\n            }\n            catch (Exception e)\n            {\n                throw new ConfigurationException.OtherThrowable(e, null, path, -1);\n            }\n            finally\n            {\n                IOUtils.closeQuietly(reader);\n            }\n        }\n    }\n    /**\n     * SAX handler for .royaleLibProperties XML.\n     */\n    private static class RoyaleLibPropertiesHandler extends DefaultHandler\n    {\n        public RoyaleLibPropertiesHandler(ArrayList<String> fbArgs,\n                       String source,\n                       String contextPath,\n                       String rootElement)\n        {\n            this.fbArgs = fbArgs;\n            this.source = source;\n            this.contextPath = contextPath;\n            this.rootElement = rootElement;\n        }\n        private Stack<String> contextStack = new Stack<String>();\n        private ArrayList<String> fbArgs;\n        private final String source;\n        private final String contextPath;\n        private final String rootElement;\n        private Locator locator;\n        public boolean allClasses;\n        public ArrayList<String> includedClasses = new ArrayList<String>();\n<fim_suffix>        @Override\n        public void startElement(final String uri, final String localName, final String qname, final Attributes attributes) throws SAXException\n        {\n            // Verify and initialize the context stack at root element.\n            if (contextStack.size() == 0)\n            {\n                if (!qname.equals(rootElement))\n                {\n                    throw new SAXConfigurationException(\n                            new ConfigurationException.IncorrectElement(rootElement, qname, this.source, locator.getLineNumber()),\n                            locator);\n                }                \n                String all = attributes.getValue(\"includeAllClasses\");\n                if (\"true\".equals(all))\n                    allClasses = true;\n                contextStack.push(qname);\n                return;\n            }\n            else\n            {\n                if (qname.equals(\"classEntry\"))\n                {\n                    String path = attributes.getValue(\"path\");\n                    includedClasses.add(path);\n                }\n                else if (qname.equals(\"namespaceManifestEntry\"))\n                {\n                    String manifest = attributes.getValue(\"manifest\");\n                    String namespace = attributes.getValue(\"namespace\");\n                    fbArgs.add(\"-namespace\");\n                    fbArgs.add(namespace);\n                    String mf = contextPath + \"/\" + manifest;\n                    File f = new File(mf);\n                    if (!f.exists())\n                    {\n                        mf = contextPath + \"/src/\" + manifest;\n                    }\n                    fbArgs.add(mf);\n                    fbArgs.add(\"-include-namespaces\");\n                    fbArgs.add(namespace);                    \n                }\n            }\n        }<fim_middle>// function below is long method\n"}