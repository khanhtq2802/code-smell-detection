{"text": "<fim_prefix> * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.brooklyn.rest.resources;\nimport static com.google.common.collect.Iterables.filter;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.brooklyn.api.entity.Entity;\nimport org.apache.brooklyn.api.sensor.AttributeSensor;\nimport org.apache.brooklyn.api.sensor.Sensor;\nimport org.apache.brooklyn.core.entity.EntityInternal;\nimport org.apache.brooklyn.core.mgmt.entitlement.Entitlements;\nimport org.apache.brooklyn.core.mgmt.entitlement.Entitlements.EntityAndItem;\nimport org.apache.brooklyn.core.sensor.BasicAttributeSensor;\nimport org.apache.brooklyn.rest.api.SensorApi;\nimport org.apache.brooklyn.rest.domain.SensorSummary;\nimport org.apache.brooklyn.rest.filter.HaHotStateRequired;\nimport org.apache.brooklyn.rest.transform.SensorTransformer;\nimport org.apache.brooklyn.rest.util.WebResourceUtils;\nimport org.apache.brooklyn.util.text.Strings;\nimport org.apache.brooklyn.util.time.Duration;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n<fim_suffix>@HaHotStateRequired\npublic class SensorResource extends AbstractBrooklynRestResource implements SensorApi {\n    private static final Logger log = LoggerFactory.getLogger(SensorResource.class);\n    @Override\n    public List<SensorSummary> list(final String application, final String entityToken) {\n        final Entity entity = brooklyn().getEntity(application, entityToken);\n        if (!Entitlements.isEntitled(mgmt().getEntitlementManager(), Entitlements.SEE_ENTITY, entity)) {\n            throw WebResourceUtils.forbidden(\"User '%s' is not authorized to see entity '%s'\",\n                    Entitlements.getEntitlementContext().user(), entity);\n        }\n        List<SensorSummary> result = Lists.newArrayList();\n        for (AttributeSensor<?> sensor : filter(entity.getEntityType().getSensors(), AttributeSensor.class)) {\n            // Exclude config that user is not allowed to see\n            if (!Entitlements.isEntitled(mgmt().getEntitlementManager(), Entitlements.SEE_SENSOR, new EntityAndItem<String>(entity, sensor.getName()))) {\n                log.trace(\"User {} not authorized to see sensor {} of entity {}; excluding from AttributeSensor list results\", \n                        new Object[] {Entitlements.getEntitlementContext().user(), sensor.getName(), entity});\n                continue;\n            }\n            result.add(SensorTransformer.sensorSummary(entity, sensor, ui.getBaseUriBuilder()));\n        }\n        return result;\n    }\n    @Override\n    public Map<String, Object> batchSensorRead(final String application, final String entityToken, final Boolean raw) {\n        final Entity entity = brooklyn().getEntity(application, entityToken);\n        if (!Entitlements.isEntitled(mgmt().getEntitlementManager(), Entitlements.SEE_ENTITY, entity)) {\n            throw WebResourceUtils.forbidden(\"User '%s' is not authorized to see entity '%s'\",\n                    Entitlements.getEntitlementContext().user(), entity);\n        }\n        Map<String, Object> sensorMap = Maps.newHashMap();\n        @SuppressWarnings(\"rawtypes\")\n        Iterable<AttributeSensor> sensors = filter(entity.getEntityType().getSensors(), AttributeSensor.class);\n        for (AttributeSensor<?> sensor : sensors) {\n            // Exclude sensors that user is not allowed to see\n            if (!Entitlements.isEntitled(mgmt().getEntitlementManager(), Entitlements.SEE_SENSOR, new EntityAndItem<String>(entity, sensor.getName()))) {\n                log.trace(\"User {} not authorized to see sensor {} of entity {}; excluding from current-state results\", \n                        new Object[] {Entitlements.getEntitlementContext().user(), sensor.getName(), entity});\n                continue;\n            }\n            Object value = entity.getAttribute(findSensor(entity, sensor.getName()));\n            sensorMap.put(sensor.getName(), \n                resolving(value).preferJson(true).asJerseyOutermostReturnValue(false).raw(raw).context(entity).timeout(Duration.ZERO).renderAs(sensor).resolve());\n        }\n        return sensorMap;\n    }\n    protected Object get(boolean preferJson, String application, String entityToken, String sensorName, Boolean raw) {\n        final Entity entity = brooklyn().getEntity(application, entityToken);\n        AttributeSensor<?> sensor = findSensor(entity, sensorName);\n        if (!Entitlements.isEntitled(mgmt().getEntitlementManager(), Entitlements.SEE_ENTITY, entity)) {\n            throw WebResourceUtils.forbidden(\"User '%s' is not authorized to see entity '%s'\",\n                    Entitlements.getEntitlementContext().user(), entity);\n        }\n        if (!Entitlements.isEntitled(mgmt().getEntitlementManager(), Entitlements.SEE_SENSOR, new EntityAndItem<String>(entity, sensor.getName()))) {\n            throw WebResourceUtils.forbidden(\"User '%s' is not authorized to see entity '%s' sensor '%s'\",\n                    Entitlements.getEntitlementContext().user(), entity, sensor.getName());\n        }\n        Object value = entity.getAttribute(sensor);\n        return resolving(value).preferJson(preferJson).asJerseyOutermostReturnValue(true).raw(raw).context(entity).immediately(true).renderAs(sensor).resolve();\n    }\n    @Override\n    public String getPlain(String application, String entityToken, String sensorName, final Boolean raw) {\n        return (String) get(false, application, entityToken, sensorName, raw);\n    }\n    @Override\n    public Object get(final String application, final String entityToken, String sensorName, final Boolean raw) {\n        return get(true, application, entityToken, sensorName, raw);\n    }\n    private AttributeSensor<?> findSensor(Entity entity, String name) {\n        Sensor<?> s = entity.getEntityType().getSensor(name);\n        if (s instanceof AttributeSensor) return (AttributeSensor<?>) s;\n        return new BasicAttributeSensor<Object>(Object.class, name);\n    }\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Override\n    public void setFromMap(String application, String entityToken, Map newValues) {\n        final Entity entity = brooklyn().getEntity(application, entityToken);\n        if (!Entitlements.isEntitled(mgmt().getEntitlementManager(), Entitlements.MODIFY_ENTITY, entity)) {\n            throw WebResourceUtils.forbidden(\"User '%s' is not authorized to modify entity '%s'\",\n                Entitlements.getEntitlementContext().user(), entity);\n        }\n        if (log.isDebugEnabled())\n            log.debug(\"REST user \"+Entitlements.getEntitlementContext()+\" setting sensors \"+newValues);\n        for (Object entry: newValues.entrySet()) {\n            String sensorName = Strings.toString(((Map.Entry)entry).getKey());\n            Object newValue = ((Map.Entry)entry).getValue();\n            AttributeSensor sensor = findSensor(entity, sensorName);\n            entity.sensors().set(sensor, newValue);\n        }\n    }\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Override\n    public void set(String application, String entityToken, String sensorName, Object newValue) {\n        final Entity entity = brooklyn().getEntity(application, entityToken);\n        if (!Entitlements.isEntitled(mgmt().getEntitlementManager(), Entitlements.MODIFY_ENTITY, entity)) {\n            throw WebResourceUtils.forbidden(\"User '%s' is not authorized to modify entity '%s'\",\n                Entitlements.getEntitlementContext().user(), entity);\n        }\n        AttributeSensor sensor = findSensor(entity, sensorName);\n        if (log.isDebugEnabled())\n            log.debug(\"REST user \"+Entitlements.getEntitlementContext()+\" setting sensor \"+sensorName+\" to \"+newValue);\n        entity.sensors().set(sensor, newValue);\n    }\n    @Override\n    public void delete(String application, String entityToken, String sensorName) {\n        final Entity entity = brooklyn().getEntity(application, entityToken);\n        if (!Entitlements.isEntitled(mgmt().getEntitlementManager(), Entitlements.MODIFY_ENTITY, entity)) {\n            throw WebResourceUtils.forbidden(\"User '%s' is not authorized to modify entity '%s'\",\n                Entitlements.getEntitlementContext().user(), entity);\n        }\n        AttributeSensor<?> sensor = findSensor(entity, sensorName);\n        if (log.isDebugEnabled())\n            log.debug(\"REST user \"+Entitlements.getEntitlementContext()+\" deleting sensor \"+sensorName);\n        ((EntityInternal)entity).sensors().remove(sensor);\n    }\n}<fim_middle>// class below is blob\n"}