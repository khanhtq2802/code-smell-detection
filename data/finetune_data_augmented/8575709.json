{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.hbase.client.metrics;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicLong;\n\nimport org.apache.yetus.audience.InterfaceAudience;\n\nimport org.apache.hbase.thirdparty.com.google.common.collect.ImmutableMap;\n\n/**\n * Provides server side metrics related to scan operations.\n */\n<fim_suffix>@InterfaceAudience.Public\npublic class ServerSideScanMetrics {\n  /**\n   * Hash to hold the String -&gt; Atomic Long mappings for each metric\n   */\n  private final Map<String, AtomicLong> counters = new HashMap<>();\n\n  /**\n   * Create a new counter with the specified name\n   * @param counterName\n   * @return {@link AtomicLong} instance for the counter with counterName\n   */\n  protected AtomicLong createCounter(String counterName) {\n    AtomicLong c = new AtomicLong(0);\n    counters.put(counterName, c);\n    return c;\n  }\n\n  public static final String COUNT_OF_ROWS_SCANNED_KEY_METRIC_NAME = \"ROWS_SCANNED\";\n  public static final String COUNT_OF_ROWS_FILTERED_KEY_METRIC_NAME = \"ROWS_FILTERED\";\n\n  /**\n   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0\n   *             (<a href=\"https://issues.apache.org/jira/browse/HBASE-17886\">HBASE-17886</a>).\n   *             Use {@link #COUNT_OF_ROWS_SCANNED_KEY_METRIC_NAME}.\n   */\n  @Deprecated\n  public static final String COUNT_OF_ROWS_SCANNED_KEY = COUNT_OF_ROWS_SCANNED_KEY_METRIC_NAME;\n\n  /**\n   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0\n   *             (<a href=\"https://issues.apache.org/jira/browse/HBASE-17886\">HBASE-17886</a>).\n   *             Use {@link #COUNT_OF_ROWS_FILTERED_KEY_METRIC_NAME}.\n   */\n  @Deprecated\n  public static final String COUNT_OF_ROWS_FILTERED_KEY = COUNT_OF_ROWS_FILTERED_KEY_METRIC_NAME;\n\n  /**\n   * number of rows filtered during scan RPC\n   */\n  public final AtomicLong countOfRowsFiltered = createCounter(COUNT_OF_ROWS_FILTERED_KEY_METRIC_NAME);\n\n  /**\n   * number of rows scanned during scan RPC. Not every row scanned will be returned to the client\n   * since rows may be filtered.\n   */\n  public final AtomicLong countOfRowsScanned = createCounter(COUNT_OF_ROWS_SCANNED_KEY_METRIC_NAME);\n\n  /**\n   * @param counterName\n   * @param value\n   */\n  public void setCounter(String counterName, long value) {\n    AtomicLong c = this.counters.get(counterName);\n    if (c != null) {\n      c.set(value);\n    }\n  }\n\n  /**\n   * @param counterName\n   * @return true if a counter exists with the counterName\n   */\n  public boolean hasCounter(String counterName) {\n    return this.counters.containsKey(counterName);\n  }\n\n  /**\n   * @param counterName\n   * @return {@link AtomicLong} instance for this counter name, null if counter does not exist.\n   */\n  public AtomicLong getCounter(String counterName) {\n    return this.counters.get(counterName);\n  }\n\n  /**\n   * @param counterName\n   * @param delta\n   */\n  public void addToCounter(String counterName, long delta) {\n    AtomicLong c = this.counters.get(counterName);\n    if (c != null) {\n      c.addAndGet(delta);\n    }\n  }\n\n  /**\n   * Get all of the values since the last time this function was called. Calling this function will\n   * reset all AtomicLongs in the instance back to 0.\n   * @return A Map of String -&gt; Long for metrics\n   */\n  public Map<String, Long> getMetricsMap() {\n    return getMetricsMap(true);\n  }\n\n  /**\n   * Get all of the values. If reset is true, we will reset the all AtomicLongs back to 0.\n   * @param reset whether to reset the AtomicLongs to 0.\n   * @return A Map of String -&gt; Long for metrics\n   */\n  public Map<String, Long> getMetricsMap(boolean reset) {\n    // Create a builder\n    ImmutableMap.Builder<String, Long> builder = ImmutableMap.builder();\n    for (Map.Entry<String, AtomicLong> e : this.counters.entrySet()) {\n      long value = reset ? e.getValue().getAndSet(0) : e.getValue().get();\n      builder.put(e.getKey(), value);\n    }\n    // Build the immutable map so that people can't mess around with it.\n    return builder.build();\n  }\n}<fim_middle>// class below has no smell\n"}