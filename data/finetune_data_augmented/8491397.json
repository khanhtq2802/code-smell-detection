{"text": "<fim_prefix>// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\npackage com.cloud.vm.dao;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport com.cloud.utils.Pair;\nimport com.cloud.utils.db.GenericDao;\nimport com.cloud.utils.fsm.StateDao;\nimport com.cloud.vm.VMInstanceVO;\nimport com.cloud.vm.VirtualMachine;\nimport com.cloud.vm.VirtualMachine.State;\n\n/*\n * Data Access Object for vm_instance table\n */\n<fim_suffix>public interface VMInstanceDao extends GenericDao<VMInstanceVO, Long>, StateDao<State, VirtualMachine.Event, VirtualMachine> {\n    /**\n     * What are the vms running on this host?\n     * @param hostId host.\n     * @return list of VMInstanceVO running on that host.\n     */\n    List<VMInstanceVO> listByHostId(long hostId);\n\n    /**\n     * List VMs by zone ID\n     * @param zoneId\n     * @return list of VMInstanceVO in the specified zone\n     */\n    List<VMInstanceVO> listByZoneId(long zoneId);\n\n    /**\n     * List VMs by pod ID\n     * @param podId\n     * @return list of VMInstanceVO in the specified pod\n     */\n    List<VMInstanceVO> listByPodId(long podId);\n\n    /**\n     * Lists non-expunged VMs by  templateId\n     * @param templateId\n     * @return list of VMInstanceVO deployed from the specified template, that are not expunged\n     */\n    public List<VMInstanceVO> listNonExpungedByTemplate(long templateId);\n\n\n    /**\n     * Lists non-expunged VMs by zone ID and templateId\n     * @param zoneId\n     * @return list of VMInstanceVO in the specified zone, deployed from the specified template, that are not expunged\n     */\n    public List<VMInstanceVO> listNonExpungedByZoneAndTemplate(long zoneId, long templateId);\n\n    /**\n     * Find vm instance with names like.\n     *\n     * @param name name that fits SQL like.\n     * @return list of VMInstanceVO\n     */\n    List<VMInstanceVO> findVMInstancesLike(String name);\n\n    List<VMInstanceVO> findVMInTransition(Date time, State... states);\n\n    List<VMInstanceVO> listByHostAndState(long hostId, State... states);\n\n    List<VMInstanceVO> listByTypes(VirtualMachine.Type... types);\n\n    VMInstanceVO findByIdTypes(long id, VirtualMachine.Type... types);\n\n    VMInstanceVO findVMByInstanceName(String name);\n\n    VMInstanceVO findVMByHostName(String hostName);\n\n    void updateProxyId(long id, Long proxyId, Date time);\n\n    List<VMInstanceVO> listByHostIdTypes(long hostid, VirtualMachine.Type... types);\n\n    List<VMInstanceVO> listUpByHostIdTypes(long hostid, VirtualMachine.Type... types);\n\n    List<VMInstanceVO> listByZoneIdAndType(long zoneId, VirtualMachine.Type type);\n\n    List<VMInstanceVO> listUpByHostId(Long hostId);\n\n    List<VMInstanceVO> listByLastHostId(Long hostId);\n\n    List<VMInstanceVO> listByTypeAndState(VirtualMachine.Type type, State state);\n\n    List<VMInstanceVO> listByAccountId(long accountId);\n\n    public List<Long> findIdsOfAllocatedVirtualRoutersForAccount(long accountId);\n\n    List<VMInstanceVO> listByClusterId(long clusterId);  // this does not pull up VMs which are starting\n\n    List<VMInstanceVO> listLHByClusterId(long clusterId);  // get all the VMs even starting one on this cluster\n\n    List<VMInstanceVO> listVmsMigratingFromHost(Long hostId);\n\n    public Long countActiveByHostId(long hostId);\n\n    Pair<List<Long>, Map<Long, Double>> listClusterIdsInZoneByVmCount(long zoneId, long accountId);\n\n    Pair<List<Long>, Map<Long, Double>> listClusterIdsInPodByVmCount(long podId, long accountId);\n\n    Pair<List<Long>, Map<Long, Double>> listPodIdsInZoneByVmCount(long dataCenterId, long accountId);\n\n    List<Long> listHostIdsByVmCount(long dcId, Long podId, Long clusterId, long accountId);\n\n    Long countRunningByAccount(long accountId);\n\n    Long countByZoneAndState(long zoneId, State state);\n\n    List<VMInstanceVO> listNonRemovedVmsByTypeAndNetwork(long networkId, VirtualMachine.Type... types);\n\n    /**\n     * @param networkId\n     * @param types\n     * @return\n     */\n    List<String> listDistinctHostNames(long networkId, VirtualMachine.Type... types);\n\n    List<VMInstanceVO> findByHostInStates(Long hostId, State... states);\n\n    List<VMInstanceVO> listStartingWithNoHostId();\n\n    boolean updatePowerState(long instanceId, long powerHostId, VirtualMachine.PowerState powerState);\n\n    void resetVmPowerStateTracking(long instanceId);\n\n    void resetHostPowerStateTracking(long hostId);\n\n    HashMap<String, Long> countVgpuVMs(Long dcId, Long podId, Long clusterId);\n\n    VMInstanceVO findVMByHostNameInZone(String hostName, long zoneId);\n\n    boolean isPowerStateUpToDate(long instanceId);\n\n    List<VMInstanceVO> listNonMigratingVmsByHostEqualsLastHost(long hostId);\n}<fim_middle>// class below is blob\n"}