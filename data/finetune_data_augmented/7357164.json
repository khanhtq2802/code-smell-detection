{"text": "<fim_prefix>import com.microsoft.tfs.client.common.ui.teamexplorer.ProjectAndTeamListener;\nimport com.microsoft.tfs.client.common.ui.teamexplorer.internal.pendingchanges.PendingChangesViewModel;\nimport com.microsoft.tfs.client.common.util.ExtensionLoader;\nimport com.microsoft.tfs.core.clients.versioncontrol.Workstation;\nimport com.microsoft.tfs.core.config.persistence.DefaultPersistenceStoreProvider;\nimport com.microsoft.tfs.core.product.ProductInformation;\nimport com.microsoft.tfs.core.product.ProductName;\nimport com.microsoft.tfs.core.util.notifications.MessageWindowNotificationManager;\nimport com.microsoft.tfs.util.Check;\nimport com.microsoft.tfs.util.Platform;\nimport com.microsoft.tfs.util.listeners.SingleListenerFacade;\n/**\n * The activator class controls the plug-in life cycle.\n */\npublic class TFSCommonUIClientPlugin extends AbstractUIPlugin implements TFSConsoleProvider {\n    // The plug-in ID\n    public static final String PLUGIN_ID = \"com.microsoft.tfs.client.common.ui\"; //$NON-NLS-1$\n    /**\n     * Extension point which product plug-ins (Explorer, Team Explorer\n     * Everywhere) hook into so this class can detect configuration information.\n     */\n    public static final String PRODUCT_PLUGIN_PROVIDER_EXTENSION_POINT_ID =\n        \"com.microsoft.tfs.client.common.ui.productPluginProvider\"; //$NON-NLS-1$\n    private static final Log log = LogFactory.getLog(TFSCommonUIClientPlugin.class);\n    // The shared instance\n    private static TFSCommonUIClientPlugin plugin;\n    private ServiceTracker proxyServiceTracker;\n    /* The TFS Console */\n    private TFSConsole console;\n    private ConsoleCoreEventListener consoleCoreEventListener;\n    private final Object consoleLock = new Object();\n    /* The product plugin provider for this application */\n    private TFSProductPluginProvider productPluginProvider;\n    private final Object productPluginProviderLock = new Object();\n    /* The Build manager */\n    private BuildManager buildManager;\n    private final Object buildManagerLock = new Object();\n    /* The pending changes view model */\n    private PendingChangesViewModel pendingChangesViewModel;\n    private final Object pendingChangesViewModelLock = new Object();\n    /**\n     * The constructor\n     */\n    public TFSCommonUIClientPlugin() {\n        ProductInformation.initialize(ProductName.PLUGIN);\n        TELoggingConfiguration.configure();\n    }\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.\n     * BundleContext )\n     */\n    @Override\n    public void start(final BundleContext context) throws Exception {\n        super.start(context);\n        plugin = this;\n        /*\n         * This Class.forName call is necessary because the org.eclipse.core.net\n         * bundle has the Eclipse-LazyStart header set to true. This means that\n         * the bundle does not start (and register its IProxyService) until some\n         * other bundle attempts to load a class it provides. Normally this is\n         * not an issue because the code that creates the service tracker would\n         * pass IProxyService.class when creating the ServiceTracker, which\n         * would lazily start the org.eclipse.core.net bundle, which would\n         * register the IProxyService. However, we don't reference\n         * IProxyService.class directly when we create the ServiceTracker\n         * because of backwards compatibility reasons. Therefore, we must\n         * attempt a class load here to lazily start the org.eclipse.core.net\n         * bundle.\n         */\n        try {\n            Class.forName(\"org.eclipse.core.net.proxy.IProxyService\"); //$NON-NLS-1$\n        } catch (final ClassNotFoundException e) {\n        }\n        proxyServiceTracker = new ServiceTracker(context, \"org.eclipse.core.net.proxy.IProxyService\", null); //$NON-NLS-1$\n        proxyServiceTracker.open();\n        /*\n         * Create the console once the user-interface is fully formed (ie, on a\n         * background thread that will run once the Workbench is started.) This\n         * will ensure that we don't try to start it too early.\n         */\n        WorkbenchHelper.runOnWorkbenchStartup(\n            Messages.getString(\"TFSCommonUiClientPlugin.CreatingTfsConsoleJobTitle\"), //$NON-NLS-1$\n            new Runnable() {\n                @Override\n                public void run() {\n                    Display.getDefault().asyncExec(new Runnable() {\n                        @Override\n                        public void run() {\n                            createConsole();\n                        }\n                    });\n                }\n            });\n        /*\n         * Run as an interactive job to guarantee the windowing system is ready\n         * to use.\n         */\n        WorkbenchHelper.runOnWorkbenchStartup(\n            Messages.getString(\"TFSCommonUIClientPlugin.InitializingNotificationManagerJobTitle\"), //$NON-NLS-1$\n            new Runnable() {\n                @Override\n                public void run() {\n                    Display.getDefault().asyncExec(new Runnable() {\n                        @Override\n                        public void run() {\n                            /*\n                             * Messages received by the manager we construct\n                             * will be routed to the Workstation for dispatch\n                             * through any VersionControlClients' EventEngines\n                             * in use.\n                             */\n                            if (Platform.isCurrentPlatform(Platform.WINDOWS)) {\n                                Workstation.getCurrent(DefaultPersistenceStoreProvider.INSTANCE).setNotificationManager(\n                                    new MessageWindowNotificationManager());\n                            } else {\n                                // TODO implement other mechanisms for other\n                                // platforms\n                            }\n                        }\n                    });\n                }\n            });\n    }\n    private void createConsole() {\n        synchronized (consoleLock) {\n            console = new TFSConsole();\n            consoleCoreEventListener = new ConsoleCoreEventListener(console);\n            consoleCoreEventListener.attach(getProductPlugin().getServerManager());\n        }\n    }\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.\n     * BundleContext )\n     */\n    @Override\n    public void stop(final BundleContext context) throws Exception {\n        proxyServiceTracker.close();\n        /*\n         * Call detachAll() instead of detach(getServerManager()).\n         * getServerManager() may return a null server manager when the plugin\n         * is stopping, because it may need to query a server manager provider\n         * in a plugin (for example, the Explorer application) which has already\n         * stopped.\n         */\n        if (consoleCoreEventListener != null) {\n            consoleCoreEventListener.detachAll();\n        }\n        Workstation.getCurrent(DefaultPersistenceStoreProvider.INSTANCE).setNotificationManager(null);\n        plugin = null;\n        super.stop(context);\n    }\n    public ServiceTracker getProxyServiceTracker() {\n        return proxyServiceTracker;\n    }\n    /**\n     * Gets the currently running {@link TFSProductPlugin} (Team Explorer\n     * Everywhere or Explorer).\n     *\n     * @return the currently running {@link TFSProductPlugin} (never\n     *         <code>null</code>)\n     */\n    public TFSProductPlugin getProductPlugin() {\n        /*\n         * If we do not yet know the product plugin, query the extensions\n         * available.\n         */\n        synchronized (productPluginProviderLock) {\n            if (productPluginProvider == null) {\n                productPluginProvider = (TFSProductPluginProvider) ExtensionLoader.loadSingleExtensionClass(\n                    PRODUCT_PLUGIN_PROVIDER_EXTENSION_POINT_ID);\n            }\n            final TFSProductPlugin productPlugin = productPluginProvider.getProductPlugin();\n            Check.notNull(productPlugin, \"productPlugin\"); //$NON-NLS-1$\n            return productPlugin;\n        }\n    }\n    @Override\n    public TFSConsole getConsole() {\n        synchronized (consoleLock) {\n            if (console == null) {\n                createConsole();\n            }\n            return console;\n        }\n    }\n    public BuildManager getBuildManager() {\n        synchronized (buildManagerLock) {\n            if (buildManager == null) {\n                buildManager = new BuildManager();\n            }\n            return buildManager;\n        }\n    }\n    public PendingChangesViewModel getPendingChangesViewModel() {\n        synchronized (pendingChangesViewModelLock) {\n            if (pendingChangesViewModel == null) {\n                pendingChangesViewModel = new PendingChangesViewModel(ShellUtils.getWorkbenchShell());\n            }\n            return pendingChangesViewModel;\n        }\n    }\n    /**\n     * Returns the shared instance\n     *\n     * @return the shared instance\n     */\n    public static TFSCommonUIClientPlugin getDefault() {\n        return plugin;\n    }\n    private final SingleListenerFacade sourceControlProviderChangedListeners =\n        new SingleListenerFacade(SourceControlListener.class);\n    public void addSourceControlListener(final SourceControlListener listener) {\n        sourceControlProviderChangedListeners.addListener(listener);\n    }\n    public void removeSourceControlListener(final SourceControlListener listener) {\n        sourceControlProviderChangedListeners.removeListener(listener);\n    }\n    private SourceControlListener getSourceControlListener() {\n        return (SourceControlListener) sourceControlProviderChangedListeners.getListener();\n    }\n<fim_suffix>    public void sourceControlChanged(final boolean tfvc) {\n        getSourceControlListener().onSourceControlChanged(tfvc);\n    }<fim_middle>// function below has no smell\n"}