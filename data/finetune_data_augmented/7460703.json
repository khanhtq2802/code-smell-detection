{"text": "<fim_prefix>/*\n * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage org.graalvm.compiler.hotspot.amd64;\n\nimport static org.graalvm.compiler.lir.LIRInstruction.OperandFlag.REG;\nimport static jdk.vm.ci.code.ValueUtil.asRegister;\n\nimport org.graalvm.compiler.asm.amd64.AMD64MacroAssembler;\nimport org.graalvm.compiler.hotspot.GraalHotSpotVMConfig;\nimport org.graalvm.compiler.lir.LIRFrameState;\nimport org.graalvm.compiler.lir.LIRInstructionClass;\nimport org.graalvm.compiler.lir.Opcode;\nimport org.graalvm.compiler.lir.amd64.AMD64Call;\nimport org.graalvm.compiler.lir.amd64.AMD64Call.IndirectCallOp;\nimport org.graalvm.compiler.lir.asm.CompilationResultBuilder;\n\nimport jdk.vm.ci.amd64.AMD64;\nimport jdk.vm.ci.code.Register;\nimport jdk.vm.ci.meta.ResolvedJavaMethod;\nimport jdk.vm.ci.meta.Value;\n\n/**\n * A register indirect call that complies with the extra conventions for such calls in HotSpot. In\n * particular, the metaspace Method of the callee must be in RBX for the case where a vtable entry's\n * _from_compiled_entry is the address of an C2I adapter. Such adapters expect the target method to\n * be in RBX.\n */\n<fim_suffix>@Opcode(\"CALL_INDIRECT\")\nfinal class AMD64IndirectCallOp extends IndirectCallOp {\n    public static final LIRInstructionClass<AMD64IndirectCallOp> TYPE = LIRInstructionClass.create(AMD64IndirectCallOp.class);\n\n    /**\n     * Vtable stubs expect the metaspace Method in RBX.\n     */\n    public static final Register METHOD = AMD64.rbx;\n\n    @Use({REG}) protected Value metaspaceMethod;\n\n    private final GraalHotSpotVMConfig config;\n\n    AMD64IndirectCallOp(ResolvedJavaMethod targetMethod, Value result, Value[] parameters, Value[] temps, Value metaspaceMethod, Value targetAddress, LIRFrameState state,\n                    GraalHotSpotVMConfig config) {\n        super(TYPE, targetMethod, result, parameters, temps, targetAddress, state);\n        this.metaspaceMethod = metaspaceMethod;\n        this.config = config;\n    }\n\n    @Override\n    public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler masm) {\n        crb.recordMark(config.MARKID_INLINE_INVOKE);\n        Register callReg = asRegister(targetAddress);\n        assert !callReg.equals(METHOD);\n        int pcOffset = AMD64Call.indirectCall(crb, masm, callReg, callTarget, state);\n        crb.recordInlineInvokeCallOp(pcOffset, getPosition());\n    }\n\n    @Override\n    public void verify() {\n        super.verify();\n        assert asRegister(metaspaceMethod).equals(METHOD);\n    }\n}<fim_middle>// class below has no smell\n"}