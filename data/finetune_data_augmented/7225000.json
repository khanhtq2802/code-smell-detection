{"text": "<fim_prefix>/*\n * Copyright (c) 2011-2017 Pivotal Software Inc, All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage reactor.core.publisher;\n\n\nimport org.reactivestreams.Subscription;\nimport reactor.core.CoreSubscriber;\nimport reactor.util.annotation.Nullable;\n\n/**\n * Ignores normal values and passes only the terminal signals along.\n *\n * @param <T> the value type\n * @see <a href=\"https://github.com/reactor/reactive-streams-commons\">Reactive-Streams-Commons</a>\n */\nfinal class MonoIgnoreElements<T> extends MonoFromFluxOperator<T, T> {\n\n\tMonoIgnoreElements(Flux<? extends T> source) {\n\t\tsuper(source);\n\t}\n\n\t@Override\n\tpublic void subscribe(CoreSubscriber<? super T> actual) {\n\t\tsource.subscribe(new IgnoreElementsSubscriber<>(actual));\n\t}\n\n\tstatic final class IgnoreElementsSubscriber<T> implements InnerOperator<T, T> {\n\t\tfinal CoreSubscriber<? super T> actual;\n\n\t\tSubscription s;\n\n\t\tIgnoreElementsSubscriber(CoreSubscriber<? super T> actual) {\n\t\t\tthis.actual = actual;\n\t\t}\n\n<fim_suffix>\t\t@Override\n\t\t@Nullable\n\t\tpublic Object scanUnsafe(Attr key) {\n\t\t\tif (key == Attr.PARENT) return s;\n\n\t\t\treturn InnerOperator.super.scanUnsafe(key);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onSubscribe(Subscription s) {\n\t\t\tif (Operators.validate(this.s, s)) {\n\t\t\t\tthis.s = s;\n\n\t\t\t\tactual.onSubscribe(this);\n\n\t\t\t\ts.request(Long.MAX_VALUE);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void onNext(T t) {\n\t\t\t// deliberately ignored\n\t\t\tOperators.onDiscard(t, actual.currentContext()); //FIXME cache context\n\t\t}\n\n\t\t@Override\n\t\tpublic void onError(Throwable t) {\n\t\t\tactual.onError(t);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onComplete() {\n\t\t\tactual.onComplete();\n\t\t}\n\n\t\t@Override\n\t\tpublic CoreSubscriber<? super T> actual() {\n\t\t\treturn actual;\n\t\t}\n\n\t\t@Override\n\t\tpublic void request(long n) {\n\t\t\t// requests Long.MAX_VALUE anyway\n\t\t}\n\n\t\t@Override\n\t\tpublic void cancel() {\n\t\t\ts.cancel();\n\t\t}\n\t}\n}<fim_middle>// function below has no smell\n"}