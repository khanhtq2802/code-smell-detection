{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.nifi.processors.aws.credentials.provider.factory.strategies;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.nifi.components.PropertyDescriptor;\nimport org.apache.nifi.components.ValidationContext;\nimport org.apache.nifi.components.ValidationResult;\nimport org.apache.nifi.processors.aws.credentials.provider.factory.CredentialsStrategy;\n\n\n/**\n * Partial implementation of CredentialsStrategy to provide support for credential strategies specified by\n * a single boolean property.\n */\npublic abstract class AbstractBooleanCredentialsStrategy extends AbstractCredentialsStrategy {\n\n    private PropertyDescriptor strategyProperty;\n\n    public AbstractBooleanCredentialsStrategy(String name, PropertyDescriptor strategyProperty) {\n        super(\"Default Credentials\", new PropertyDescriptor[]{\n            strategyProperty\n        });\n        this.strategyProperty = strategyProperty;\n    }\n\n    @Override\n    public boolean canCreatePrimaryCredential(Map<PropertyDescriptor, String> properties) {\n        String useStrategyString = properties.get(strategyProperty);\n        Boolean useStrategy = Boolean.parseBoolean(useStrategyString);\n        return useStrategy;\n    }\n\n<fim_suffix>    @Override\n    public Collection<ValidationResult> validate(final ValidationContext validationContext,\n                                                 final CredentialsStrategy primaryStrategy) {\n        boolean thisIsSelectedStrategy = this == primaryStrategy;\n        Boolean useStrategy = validationContext.getProperty(strategyProperty).asBoolean();\n        if (!thisIsSelectedStrategy && useStrategy) {\n            String failureFormat = \"property %1$s cannot be used with %2$s\";\n            Collection<ValidationResult> validationFailureResults = new ArrayList<ValidationResult>();\n            String message = String.format(failureFormat, strategyProperty.getDisplayName(),\n                    primaryStrategy.getName());\n            validationFailureResults.add(new ValidationResult.Builder()\n                    .subject(strategyProperty.getDisplayName())\n                    .valid(false)\n                    .explanation(message).build());\n            return  validationFailureResults;\n        }\n        return null;\n    }\n\n}<fim_middle>// function below is long method\n"}