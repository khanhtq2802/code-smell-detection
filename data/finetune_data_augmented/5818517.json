{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.tinkerpop.gremlin.server;\n\nimport io.netty.channel.ChannelHandler;\nimport org.apache.tinkerpop.gremlin.server.util.ServerGremlinExecutor;\n\n/**\n * An interface that makes it possible to plugin different Netty pipelines to Gremlin Server, enabling the use of\n * different protocols, mapper security and other such functions.  A {@code Channelizer} implementation can be\n * configured in Gremlin Server with the {@code channelizer} setting in the configuration file.\n *\n * @author Stephen Mallette (http://stephen.genoprime.com)\n * @see org.apache.tinkerpop.gremlin.server.AbstractChannelizer\n */\n<fim_suffix>public interface Channelizer extends ChannelHandler {\n\n    /**\n     * This method is called just after the {@code Channelizer} is initialized.\n     */\n    public void init(final ServerGremlinExecutor serverGremlinExecutor);\n\n    /**\n     * Create a message to send to seemingly dead clients to see if they respond back. The message sent will be\n     * dependent on the implementation. For example, a websocket implementation would create a \"ping\" message.\n     * This method will only be used if {@link #supportsIdleMonitor()} is {@code true}.\n     */\n    public default Object createIdleDetectionMessage() {\n        return null;\n    }\n\n    /**\n     * Determines if the channelizer supports a method for keeping the connection alive and auto-closing zombie\n     * channels.\n     */\n    public default boolean supportsIdleMonitor() {\n        return false;\n    }\n}<fim_middle>// class below has no smell\n"}