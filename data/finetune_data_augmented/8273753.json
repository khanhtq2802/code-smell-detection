{"text": "<fim_prefix>/****************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one   *\n * or more contributor license agreements.  See the NOTICE file *\n * distributed with this work for additional information        *\n * regarding copyright ownership.  The ASF licenses this file   *\n * to you under the Apache License, Version 2.0 (the            *\n * \"License\"); you may not use this file except in compliance   *\n * with the License.  You may obtain a copy of the License at   *\n *                                                              *\n *   http://www.apache.org/licenses/LICENSE-2.0                 *\n *                                                              *\n * Unless required by applicable law or agreed to in writing,   *\n * software distributed under the License is distributed on an  *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n * KIND, either express or implied.  See the License for the    *\n * specific language governing permissions and limitations      *\n * under the License.                                           *\n ****************************************************************/\n\npackage org.apache.james.junit;\n\nimport java.io.File;\n\nimport org.apache.commons.io.FileUtils;\nimport org.junit.jupiter.api.extension.AfterEachCallback;\nimport org.junit.jupiter.api.extension.BeforeEachCallback;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.api.extension.ParameterContext;\nimport org.junit.jupiter.api.extension.ParameterResolutionException;\nimport org.junit.jupiter.api.extension.ParameterResolver;\n\nimport com.google.common.io.Files;\n\n<fim_suffix>public class TemporaryFolderExtension implements ParameterResolver, BeforeEachCallback, AfterEachCallback {\n\n    private TemporaryFolder temporaryFolder;\n\n    @Override\n    public void beforeEach(ExtensionContext context) throws Exception {\n        temporaryFolder = new TemporaryFolder(Files.createTempDir());\n    }\n\n    @Override\n    public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n        return (parameterContext.getParameter().getType() == TemporaryFolder.class);\n    }\n\n    @Override\n    public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n        return temporaryFolder;\n    }\n\n    @Override\n    public void afterEach(ExtensionContext context) throws Exception {\n        FileUtils.deleteDirectory(temporaryFolder.getTempDir());\n    }\n\n    public TemporaryFolder getTemporaryFolder() {\n        return temporaryFolder;\n    }\n\n    public static class TemporaryFolder {\n        private final File tempDir;\n        private final String folderPath;\n\n        public TemporaryFolder(File tempDir) {\n            this.tempDir = tempDir;\n            this.folderPath = tempDir.getPath() + \"/\";\n        }\n\n        public File getTempDir() {\n            return tempDir;\n        }\n\n        public String getFolderPath() {\n            return folderPath;\n        }\n    }\n}<fim_middle>// class below is data class\n"}