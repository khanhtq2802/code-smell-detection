{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.brooklyn.util.core.json;\nimport java.io.IOException;\nimport java.util.Map;\nimport org.apache.brooklyn.api.entity.Entity;\nimport org.apache.brooklyn.api.location.Location;\nimport org.apache.brooklyn.api.mgmt.ManagementContext;\nimport org.apache.brooklyn.api.mgmt.Task;\nimport org.apache.brooklyn.api.objs.BrooklynObject;\nimport org.apache.brooklyn.api.objs.EntityAdjunct;\nimport org.apache.brooklyn.api.policy.Policy;\nimport org.apache.brooklyn.api.sensor.Enricher;\nimport org.apache.brooklyn.api.sensor.Feed;\nimport org.apache.brooklyn.core.entity.EntityInternal;\nimport org.apache.brooklyn.core.objs.AbstractEntityAdjunct;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.JsonDeserializer;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport com.google.common.base.Optional;\npublic class BidiSerialization {\n    protected final static ThreadLocal<Boolean> STRICT_SERIALIZATION = new ThreadLocal<Boolean>(); \n    /**\n     * Sets strict serialization on, or off (the default), for the current thread.\n     * Recommended to be used in a <code>try { ... } finally { ... }</code> block\n     * with {@link #clearStrictSerialization()} at the end.\n     * <p>\n     * With strict serialization, classes must have public fields or annotated fields, else they will not be serialized.\n     */\n    public static void setStrictSerialization(Boolean value) {\n        STRICT_SERIALIZATION.set(value);\n    }\n    public static void clearStrictSerialization() {\n        STRICT_SERIALIZATION.remove();\n    }\n    public static boolean isStrictSerialization() {\n        Boolean result = STRICT_SERIALIZATION.get();\n        if (result!=null) return result;\n        return false;\n    }\n    public abstract static class AbstractWithManagementContextSerialization<T> {\n        protected class Serializer extends JsonSerializer<T> {\n            @Override\n            public void serialize(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n                AbstractWithManagementContextSerialization.this.serialize(value, jgen, provider);\n            }\n        }\n        protected class Deserializer extends JsonDeserializer<T> {\n            @Override\n            public T deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n                return AbstractWithManagementContextSerialization.this.deserialize(jp, ctxt);\n            }\n        }\n        protected final Serializer serializer = new Serializer();\n        protected final Deserializer deserializer = new Deserializer();\n        protected final Class<T> type;\n        protected final ManagementContext mgmt;\n        public AbstractWithManagementContextSerialization(Class<T> type, ManagementContext mgmt) {\n            this.type = type;\n            this.mgmt = mgmt;\n        }\n        public JsonSerializer<T> getSerializer() {\n            return serializer;\n        }\n        public JsonDeserializer<T> getDeserializer() {\n            return deserializer;\n        }\n        public void serialize(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n            jgen.writeStartObject();\n            writeBody(value, jgen, provider);\n            jgen.writeEndObject();\n        }\n        protected void writeBody(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n            jgen.writeStringField(\"type\", customType(value));\n            customWriteBody(value, jgen, provider);\n        }\n        protected String customType(T value) throws IOException {\n            return value.getClass().getCanonicalName();\n        }\n        public abstract void customWriteBody(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException;\n        public T deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n            @SuppressWarnings(\"unchecked\")\n            Map<Object,Object> values = jp.readValueAs(Map.class);\n            String type = (String) values.get(\"type\");\n            return customReadBody(type, values, jp, ctxt);\n        }\n        protected abstract T customReadBody(String type, Map<Object, Object> values, JsonParser jp, DeserializationContext ctxt) throws IOException;\n        public void install(SimpleModule module) {\n            module.addSerializer(type, serializer);\n            module.addDeserializer(type, deserializer);\n        }\n    }\n    public static class ManagementContextSerialization extends AbstractWithManagementContextSerialization<ManagementContext> {\n        public ManagementContextSerialization(ManagementContext mgmt) { super(ManagementContext.class, mgmt); }\n        @Override\n        protected String customType(ManagementContext value) throws IOException {\n            return type.getCanonicalName();\n        }\n        @Override\n        public void customWriteBody(ManagementContext value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n        }\n        @Override\n        protected ManagementContext customReadBody(String type, Map<Object, Object> values, JsonParser jp, DeserializationContext ctxt) throws IOException {\n            return mgmt;\n        }\n    }\n    public abstract static class AbstractBrooklynObjectSerialization<T extends BrooklynObject> extends AbstractWithManagementContextSerialization<T> {\n        public AbstractBrooklynObjectSerialization(Class<T> type, ManagementContext mgmt) { \n            super(type, mgmt);\n        }\n        @Override\n        protected String customType(T value) throws IOException {\n            return type.getCanonicalName();\n        }\n        @Override\n        public void customWriteBody(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n            jgen.writeStringField(\"id\", value.getId());\n        }\n        @Override\n        protected T customReadBody(String type, Map<Object, Object> values, JsonParser jp, DeserializationContext ctxt) throws IOException {\n            return getInstanceFromId((String) values.get(\"id\"));\n        }\n        protected abstract T getInstanceFromId(String id);\n    }\n<fim_suffix>    public abstract static class AbstractBrooklynAdjunctSerialization<T extends BrooklynObject & EntityAdjunct> extends AbstractWithManagementContextSerialization<T> {\n        public AbstractBrooklynAdjunctSerialization(Class<T> type, ManagementContext mgmt) { \n            super(type, mgmt);\n        }\n        @Override\n        protected String customType(T value) throws IOException {\n            return type.getCanonicalName();\n        }\n        @Override\n        public void customWriteBody(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n            Optional<String> entityId = getEntityId(value);\n            jgen.writeStringField(\"id\", value.getId());\n            if (entityId.isPresent()) jgen.writeStringField(\"entityId\", entityId.get());\n        }\n        @Override\n        protected T customReadBody(String type, Map<Object, Object> values, JsonParser jp, DeserializationContext ctxt) throws IOException {\n            Optional<String> entityId = Optional.fromNullable((String) values.get(\"entityId\"));\n            Optional<Entity> entity = Optional.fromNullable(entityId.isPresent() ? null: mgmt.getEntityManager().getEntity(entityId.get()));\n            String id = (String) values.get(\"id\");\n            return getInstanceFromId(entity, id);\n        }\n        protected Optional<String> getEntityId(T value) {\n            if (value instanceof AbstractEntityAdjunct) {\n                Entity entity = ((AbstractEntityAdjunct)value).getEntity();\n                return Optional.fromNullable(entity == null ? null : entity.getId());\n            }\n            return Optional.absent();\n        }\n        protected abstract T getInstanceFromId(Optional<Entity> entity, String id);\n    }\n    public static class EntitySerialization extends AbstractBrooklynObjectSerialization<Entity> {\n        public EntitySerialization(ManagementContext mgmt) { super(Entity.class, mgmt); }\n        @Override protected Entity getInstanceFromId(String id) { return mgmt.getEntityManager().getEntity(id); }\n    }\n    public static class LocationSerialization extends AbstractBrooklynObjectSerialization<Location> {\n        public LocationSerialization(ManagementContext mgmt) { super(Location.class, mgmt); }\n        @Override protected Location getInstanceFromId(String id) { return mgmt.getLocationManager().getLocation(id); }\n    }<fim_middle>// class below has no smell\n"}