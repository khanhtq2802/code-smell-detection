{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2019 Microsoft Corporation and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Microsoft Corporation - initial API and implementation\n *******************************************************************************/\n\npackage com.microsoft.java.debug.plugin.internal;\n\nimport java.nio.charset.StandardCharsets;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport com.microsoft.java.debug.core.adapter.handler.LaunchRequestHandler;\nimport com.microsoft.java.debug.core.protocol.Requests.CONSOLE;\nimport com.microsoft.java.debug.core.protocol.Requests.LaunchArguments;\n\n<fim_suffix>public class LaunchCommandHandler {\n\n    /**\n     * Get the approximate command line length based on the launch arguments.\n     * @param launchArguments - the launch arguments\n     * @return the approximate command line length\n     */\n    public static int getLaunchCommandLength(LaunchArguments launchArguments) {\n        String encoding = StringUtils.isBlank(launchArguments.encoding) ? StandardCharsets.UTF_8.name() : launchArguments.encoding;\n        launchArguments.vmArgs += String.format(\" -Dfile.encoding=%s\", encoding);\n        String address = launchArguments.noDebug ? \"\" : \"888888\";\n        String[] commands = LaunchRequestHandler.constructLaunchCommands(launchArguments, false, address);\n        int cwdLength = launchArguments.console == CONSOLE.internalConsole ? 0 : StringUtils.length(\"cd \" + launchArguments.cwd + \" && \");\n        return cwdLength + String.join(\" \", commands).length();\n    }\n\n}<fim_middle>// class below has no smell\n"}