{"text": "<fim_prefix>package org.eclipse.ice.demo.visualization.model;\n\nimport java.io.IOException;\n\nimport javax.xml.bind.annotation.XmlRootElement;\n\nimport org.eclipse.core.resources.IFile;\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.core.resources.IResource;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.ice.datastructures.ICEObject.Component;\nimport org.eclipse.ice.datastructures.form.*;\nimport org.eclipse.ice.datastructures.entry.*;\nimport org.eclipse.ice.datastructures.form.AllowedValueType;\nimport org.eclipse.ice.datastructures.form.FormStatus;\nimport org.eclipse.ice.io.serializable.IIOService;\nimport org.eclipse.ice.io.serializable.IOService;\nimport org.eclipse.ice.io.serializable.IReader;\nimport org.eclipse.ice.io.serializable.IWriter;\nimport org.eclipse.ice.item.model.Model;\nimport org.eclipse.core.resources.ResourcesPlugin;\nimport org.eclipse.eavp.viz.modeling.ShapeController;\nimport org.eclipse.eavp.viz.modeling.Shape;\nimport org.eclipse.eavp.viz.modeling.base.BasicView;\nimport org.eclipse.ice.datastructures.form.GeometryComponent;\nimport org.eclipse.ice.datastructures.form.MeshComponent;\nimport org.eclipse.ice.datastructures.form.ResourceComponent;\nimport org.eclipse.ice.datastructures.resource.VizResource;\n\n<fim_suffix>@XmlRootElement(name = \"VisualizationModel\")\npublic class VisualizationModel extends Model {\n\n\t// TODO: \n\t//   These need to be filled in before using this item\n\t//   They can be set in the setupItemInfo() method\n\tprivate String writerName;\n\tprivate String readerName;\n\tprivate String outputName;\n\t// End required variables\n\t\n    private String exportString;\n\tprivate IIOService ioService;\n    private IReader reader;\n    private IWriter writer;\n    \n    /**\n     * The Constructor\n     */\n\tpublic VisualizationModel() {\n\t\tthis(null);\n\t}\n\n\t/**\n\t * The Constructor, takes an IProject reference. \n\t * \n\t * @param project The project space this Item will be in.\n\t */\n\tpublic VisualizationModel(IProject project) {\n\t\tsuper(project);\n\t}\n\n\t/**\n\t * Sets the name, description, and custom action name \n\t * for the item.\n\t */\n\t@Override\n\tprotected void setupItemInfo() {\n\t\tsetName(\"Visualization Model\");\n\t\tsetDescription(\"Specify information about Visualization\");\n\t\twriterName = \"VisualizationDefaultWriterName\";\n\t\treaderName = \"VisualizationDefaultReaderName\";     \t\n\t\toutputName = \"VisualizationDefaultOutputName\";   \n\t\texportString = \"Export to Visualization input format\";\n\t\tallowedActions.add(0, exportString);\n\t}\n\n\t/**\n\t * Adds relevant information that specify the ui provided\n\t * to the user when they create the Visualization Model Item\n\t * in ICE.  \n\t */\n\t@Override\n\tpublic void setupForm() {\n\t\tform = new Form();\n\t\t\n\t\t// Get reference to the IOService\n\t\t// This will let us get IReader/IWriters for \n\t\t// our specific Model\n\t\tioService = getIOService();\n\n\t}\n\t\n\t/**\n\t * The reviewEntries method is used to ensure that the form is \n\t * in an acceptable state before processing the information it\n\t * contains.  If the form is not ready to process it is advisable\n\t * to have this method return FormStatus.InfoError.\n\t * \n\t * @param preparedForm\n\t *\t\tthe form to validate \n\t * @return whether the form was correctly set up\n\t */\n\t@Override\n\tprotected FormStatus reviewEntries(Form preparedForm) {\n\t\tFormStatus retStatus = FormStatus.ReadyToProcess;\n\t\t\n\t\t// Here you can add code that checks the Entries in the Form \n\t\t// after the user clicks Save. If there are any errors in the \n\t\t// Entry values, return FormStatus.InfoError. Otherwise \n\t\t// return FormStatus.ReadyToProcess.\n\t\t\n\t\treturn retStatus;\n\t}\n\n\t/**\n\t * Use this method to process the data that has been \n\t * specified in the form. \n\t * \n\t * @param actionName\n\t * \t\ta string representation of the action to perform\n\t * @return whether the form was processed successfully\n\t */\n\t@Override\n\tpublic FormStatus process(String actionName) {\n\t\tFormStatus retStatus = FormStatus.ReadyToProcess;\n\t\t\n\t\t// This action occurs only when the default processing option is chosen\n\t\t// The default processing option is defined in the last line of the \n\t\t// setupItemInfo() method defined above.\n\t\tif (actionName == exportString) {\n\t\t\tIFile outputFile = project.getFile(outputName);\n\t\t\twriter = ioService.getWriter(writerName);\n\t\t\tretStatus = FormStatus.Processing;\n\t\t\twriter.write(form, outputFile);\n\t\t\trefreshProjectSpace();\n\t\t\tretStatus = FormStatus.Processed;\n\t\t} else {\n\t\t\tretStatus = super.process(actionName);\n\t\t}\n\t\t\n\t\treturn retStatus;\n\t}\n\n\t/**\n\t * This method is called when loading a new item either via the item \n\t * creation button or through importing a file associated with this\n\t * item.  It is responsible for setting up the form for user interaction.\n\t *  \n\t * @param fileName\n\t * \t\tthe file to load\n\t */\n\t@Override\n\tpublic void loadInput(String fileName) {\n\n\t\t// Read in the file and set up the form\n\t\tIFile inputFile = project.getFile(fileName);\n\t\treader = ioService.getReader(readerName);\n\t\tform = reader.read(inputFile);\n\t\tform.setName(getName());\n\t\tform.setDescription(getDescription());\n\t\tform.setId(getId());\n\t\tform.setItemID(getId());\n\n\t}\n}<fim_middle>// class below is blob\n"}