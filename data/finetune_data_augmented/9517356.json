{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.streaming.io;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\n\nimport org.apache.hadoop.io.BytesWritable;\nimport org.apache.hadoop.io.Writable;\nimport org.apache.hadoop.streaming.PipeMapRed;\n\n/**\n * InputWriter that writes the client's input as raw bytes.\n */\npublic class RawBytesInputWriter extends InputWriter<Writable, Writable> {\n\n  private DataOutput clientOut;\n  private ByteArrayOutputStream bufferOut;\n  private DataOutputStream bufferDataOut;\n\n  @Override\n  public void initialize(PipeMapRed pipeMapRed) throws IOException {\n    super.initialize(pipeMapRed);\n    clientOut = pipeMapRed.getClientOutput();\n    bufferOut = new ByteArrayOutputStream();\n    bufferDataOut = new DataOutputStream(bufferOut);\n  }\n  \n  @Override\n  public void writeKey(Writable key) throws IOException {\n    writeRawBytes(key);\n  }\n\n  @Override\n  public void writeValue(Writable value) throws IOException {\n    writeRawBytes(value);\n  }\n\n<fim_suffix>  private void writeRawBytes(Writable writable) throws IOException {\n    if (writable instanceof BytesWritable) {\n      BytesWritable bw = (BytesWritable) writable;\n      byte[] bytes = bw.getBytes();\n      int length = bw.getLength();\n      clientOut.writeInt(length);\n      clientOut.write(bytes, 0, length);\n    } else {\n      bufferOut.reset();\n      writable.write(bufferDataOut);\n      byte[] bytes = bufferOut.toByteArray();\n      clientOut.writeInt(bytes.length);\n      clientOut.write(bytes);\n    }\n  }\n  \n}<fim_middle>// function below has no smell\n"}