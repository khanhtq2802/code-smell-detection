{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.apache.geode.internal.cache.partitioned.fixed;\n\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Properties;\nimport java.util.Set;\n\nimport org.apache.geode.DataSerializable;\nimport org.apache.geode.DataSerializer;\nimport org.apache.geode.cache.EntryOperation;\nimport org.apache.geode.cache.FixedPartitionResolver;\nimport org.apache.geode.cache.PartitionAttributes;\nimport org.apache.geode.internal.cache.xmlcache.Declarable2;\n\npublic class SingleHopQuarterPartitionResolver\n    implements FixedPartitionResolver, Declarable2, DataSerializable {\n  private Properties resolveProps;\n  Object[][] months = new Object[12][12];\n\n  public SingleHopQuarterPartitionResolver() {\n    this.resolveProps = new Properties();\n    this.resolveProps.setProperty(\"routingType\", \"key\");\n  }\n\n  int numBuckets;\n\n  @Override\n  public String getPartitionName(EntryOperation opDetails, Set allAvailablePartitions) {\n    Date date = (Date) opDetails.getKey();\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(date);\n    int month = cal.get(Calendar.MONTH);\n    if (month == 0 || month == 1 || month == 2) {\n      return \"Q1\";\n    } else if (month == 3 || month == 4 || month == 5) {\n      return \"Q2\";\n    } else if (month == 6 || month == 7 || month == 8) {\n      return \"Q3\";\n    } else if (month == 9 || month == 10 || month == 11) {\n      return \"Q4\";\n    } else {\n      return \"Invalid Quarter\";\n    }\n  }\n\n  @Override\n  public String getName() {\n    return \"QuarterPartitionResolver\";\n  }\n\n<fim_suffix>  @Override\n  public Serializable getRoutingObject(EntryOperation opDetails) {\n    Date date = (Date) opDetails.getKey();\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(date);\n    int month = cal.get(Calendar.MONTH);\n    // if(true){\n    // return month;\n    // }\n    switch (month) {\n      case 0:\n        return \"January\";\n      case 1:\n        return \"February\";\n      case 2:\n        return \"March\";\n      case 3:\n        return \"April\";\n      case 4:\n        return \"May\";\n      case 5:\n        return \"June\";\n      case 6:\n        return \"July\";\n      case 7:\n        return \"August\";\n      case 8:\n        return \"September\";\n      case 9:\n        return \"October\";\n      case 10:\n        return \"November\";\n      case 11:\n        return \"December\";\n      default:\n        return null;\n    }\n\n  }\n\n  @Override\n  public void close() {\n    // TODO Auto-generated method stub\n\n  }\n\n  public void setnumBuckets(int numBukcets) {\n    this.numBuckets = numBukcets;\n  }\n\n  public int getNumBuckets(String partitionName, String regionName,\n      PartitionAttributes partitionAttributes) {\n    return this.numBuckets;\n  }\n\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (!obj.getClass().equals(this.getClass())) {\n      return false;\n    }\n    QuarterPartitionResolver other = (QuarterPartitionResolver) obj;\n    if (!this.resolveProps.equals(other.getConfig())) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.geode.internal.cache.xmlcache.Declarable2#getConfig()\n   */\n  @Override\n  public Properties getConfig() {\n    return this.resolveProps;\n  }\n\n  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.geode.cache.Declarable#init(java.util.Properties)\n   */\n  @Override\n  public void init(Properties props) {\n    this.resolveProps.putAll(props);\n  }\n\n  @Override\n  public void fromData(DataInput in) throws IOException, ClassNotFoundException {\n    this.resolveProps = DataSerializer.readProperties(in);\n    this.numBuckets = in.readInt();\n  }\n\n  @Override\n  public void toData(DataOutput out) throws IOException {\n    DataSerializer.writeProperties(this.resolveProps, out);\n    out.writeInt(this.numBuckets);\n  }\n\n}<fim_middle>// function below is long method\n"}