{"text": "<fim_prefix>                struct.ouch2 = new AccumuloSecurityException();\n                struct.ouch2.read(iprot);\n                struct.setOuch2IsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 3: // OUCH3\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ouch3 = new NamespaceNotFoundException();\n                struct.ouch3.read(iprot);\n                struct.setOuch3IsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 4: // OUCH4\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ouch4 = new NamespaceNotEmptyException();\n                struct.ouch4.read(iprot);\n                struct.setOuch4IsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteNamespace_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.ouch1 != null) {\n          oprot.writeFieldBegin(OUCH1_FIELD_DESC);\n          struct.ouch1.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ouch2 != null) {\n          oprot.writeFieldBegin(OUCH2_FIELD_DESC);\n          struct.ouch2.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ouch3 != null) {\n          oprot.writeFieldBegin(OUCH3_FIELD_DESC);\n          struct.ouch3.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ouch4 != null) {\n          oprot.writeFieldBegin(OUCH4_FIELD_DESC);\n          struct.ouch4.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class deleteNamespace_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n      public deleteNamespace_resultTupleScheme getScheme() {\n        return new deleteNamespace_resultTupleScheme();\n      }\n    }\n    private static class deleteNamespace_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteNamespace_result> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, deleteNamespace_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n        java.util.BitSet optionals = new java.util.BitSet();\n        if (struct.isSetOuch1()) {\n          optionals.set(0);\n        }\n        if (struct.isSetOuch2()) {\n          optionals.set(1);\n        }\n        if (struct.isSetOuch3()) {\n          optionals.set(2);\n        }\n        if (struct.isSetOuch4()) {\n          optionals.set(3);\n        }\n        oprot.writeBitSet(optionals, 4);\n        if (struct.isSetOuch1()) {\n          struct.ouch1.write(oprot);\n        }\n        if (struct.isSetOuch2()) {\n          struct.ouch2.write(oprot);\n        }\n        if (struct.isSetOuch3()) {\n          struct.ouch3.write(oprot);\n        }\n        if (struct.isSetOuch4()) {\n          struct.ouch4.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, deleteNamespace_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n        java.util.BitSet incoming = iprot.readBitSet(4);\n        if (incoming.get(0)) {\n          struct.ouch1 = new AccumuloException();\n          struct.ouch1.read(iprot);\n          struct.setOuch1IsSet(true);\n        }\n        if (incoming.get(1)) {\n          struct.ouch2 = new AccumuloSecurityException();\n          struct.ouch2.read(iprot);\n          struct.setOuch2IsSet(true);\n        }\n        if (incoming.get(2)) {\n          struct.ouch3 = new NamespaceNotFoundException();\n          struct.ouch3.read(iprot);\n          struct.setOuch3IsSet(true);\n        }\n        if (incoming.get(3)) {\n          struct.ouch4 = new NamespaceNotEmptyException();\n          struct.ouch4.read(iprot);\n          struct.setOuch4IsSet(true);\n        }\n      }\n    }\n    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {\n      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();\n    }\n  }\n  public static class renameNamespace_args implements org.apache.thrift.TBase<renameNamespace_args, renameNamespace_args._Fields>, java.io.Serializable, Cloneable, Comparable<renameNamespace_args>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"renameNamespace_args\");\n    private static final org.apache.thrift.protocol.TField LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField(\"login\", org.apache.thrift.protocol.TType.STRING, (short)1);\n    private static final org.apache.thrift.protocol.TField OLD_NAMESPACE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(\"oldNamespaceName\", org.apache.thrift.protocol.TType.STRING, (short)2);\n    private static final org.apache.thrift.protocol.TField NEW_NAMESPACE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(\"newNamespaceName\", org.apache.thrift.protocol.TType.STRING, (short)3);\n    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new renameNamespace_argsStandardSchemeFactory();\n    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new renameNamespace_argsTupleSchemeFactory();\n    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer login; // required\n    public @org.apache.thrift.annotation.Nullable java.lang.String oldNamespaceName; // required\n    public @org.apache.thrift.annotation.Nullable java.lang.String newNamespaceName; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      LOGIN((short)1, \"login\"),\n      OLD_NAMESPACE_NAME((short)2, \"oldNamespaceName\"),\n      NEW_NAMESPACE_NAME((short)3, \"newNamespaceName\");\n      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n      static {\n        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // LOGIN\n            return LOGIN;\n          case 2: // OLD_NAMESPACE_NAME\n            return OLD_NAMESPACE_NAME;\n          case 3: // NEW_NAMESPACE_NAME\n            return NEW_NAMESPACE_NAME;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n<fim_suffix>      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByName(java.lang.String name) {\n        return byName.get(name);\n      }<fim_middle>// function below has no smell\n"}