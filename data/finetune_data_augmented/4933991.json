{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jclouds.glesys.functions.internal;\n\nimport java.io.IOException;\n\nimport org.jclouds.glesys.domain.GleSYSBoolean;\nimport org.jclouds.glesys.domain.Server;\n\nimport com.google.common.base.Objects;\nimport com.google.gson.TypeAdapter;\nimport com.google.gson.stream.JsonReader;\nimport com.google.gson.stream.JsonToken;\nimport com.google.gson.stream.JsonWriter;\n\npublic class GleSYSTypeAdapters {\n\n   public static class ServerStateAdapter extends TypeAdapter<Server.State> {\n      @Override\n      public void write(JsonWriter writer, Server.State value) throws IOException {\n         writer.value(value.value());\n      }\n\n      @Override\n      public Server.State read(JsonReader reader) throws IOException {\n         if (reader.peek() == JsonToken.NULL) {\n            reader.nextNull();\n            return Server.State.UNRECOGNIZED;\n         }\n         return Server.State.fromValue(reader.nextString());\n      }\n   }\n\n<fim_suffix>   public static class GleSYSBooleanAdapter extends TypeAdapter<GleSYSBoolean> {\n\n      @Override\n      public void write(JsonWriter writer, GleSYSBoolean value) throws IOException {\n         writer.value(value.getValue() ? \"yes\" : \"no\");\n      }\n\n      @Override\n      public GleSYSBoolean read(JsonReader in) throws IOException {\n         if (in.peek() == JsonToken.BOOLEAN) {\n            return new GleSYSBoolean(in.nextBoolean());\n         } else if (in.peek() == JsonToken.NULL) {\n            return GleSYSBoolean.FALSE;\n         } else {\n            return new GleSYSBoolean(Objects.equal(in.nextString(), \"yes\"));\n         }\n      }\n\n   }\n\n}<fim_middle>// class below has no smell\n"}