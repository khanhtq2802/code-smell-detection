{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2011, 2018 Eurotech and/or its affiliates and others\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Eurotech - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.kapua.service.authorization.group.shiro;\nimport org.eclipse.kapua.KapuaDuplicateNameException;\nimport org.eclipse.kapua.KapuaEntityNotFoundException;\nimport org.eclipse.kapua.KapuaException;\nimport org.eclipse.kapua.KapuaMaxNumberOfItemsReachedException;\nimport org.eclipse.kapua.commons.configuration.AbstractKapuaConfigurableResourceLimitedService;\nimport org.eclipse.kapua.commons.model.query.predicate.AndPredicateImpl;\nimport org.eclipse.kapua.commons.model.query.predicate.AttributePredicateImpl;\nimport org.eclipse.kapua.commons.util.ArgumentValidator;\nimport org.eclipse.kapua.event.ServiceEvent;\nimport org.eclipse.kapua.locator.KapuaLocator;\nimport org.eclipse.kapua.locator.KapuaProvider;\nimport org.eclipse.kapua.model.domain.Actions;\nimport org.eclipse.kapua.model.id.KapuaId;\nimport org.eclipse.kapua.model.query.KapuaQuery;\nimport org.eclipse.kapua.model.query.predicate.AttributePredicate.Operator;\nimport org.eclipse.kapua.service.authorization.AuthorizationDomains;\nimport org.eclipse.kapua.service.authorization.AuthorizationService;\nimport org.eclipse.kapua.service.authorization.group.Group;\nimport org.eclipse.kapua.service.authorization.group.GroupCreator;\nimport org.eclipse.kapua.service.authorization.group.GroupFactory;\nimport org.eclipse.kapua.service.authorization.group.GroupListResult;\nimport org.eclipse.kapua.service.authorization.group.GroupAttributes;\nimport org.eclipse.kapua.service.authorization.group.GroupQuery;\nimport org.eclipse.kapua.service.authorization.group.GroupService;\nimport org.eclipse.kapua.service.authorization.permission.PermissionFactory;\nimport org.eclipse.kapua.service.authorization.shiro.AuthorizationEntityManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n/**\n * {@link GroupService} implementation.\n *\n * @since 1.0.0\n */\n@KapuaProvider\npublic class GroupServiceImpl extends AbstractKapuaConfigurableResourceLimitedService<Group, GroupCreator, GroupService, GroupListResult, GroupQuery, GroupFactory> implements GroupService {\n    private static final Logger LOG = LoggerFactory.getLogger(GroupServiceImpl.class);\n    private static final KapuaLocator LOCATOR = KapuaLocator.getInstance();\n    private static final AuthorizationService AUTHORIZATION_SERVICE = LOCATOR.getService(AuthorizationService.class);\n    private static final PermissionFactory PERMISSION_FACTORY = LOCATOR.getFactory(PermissionFactory.class);\n    public GroupServiceImpl() {\n        super(GroupService.class.getName(), AuthorizationDomains.GROUP_DOMAIN, AuthorizationEntityManagerFactory.getInstance(), GroupService.class, GroupFactory.class);\n    }\n    @Override\n    public Group create(GroupCreator groupCreator) throws KapuaException {\n        //\n        // Argument validation\n        ArgumentValidator.notNull(groupCreator, \"groupCreator\");\n        ArgumentValidator.notNull(groupCreator.getScopeId(), \"roleCreator.scopeId\");\n        ArgumentValidator.notEmptyOrNull(groupCreator.getName(), \"groupCreator.name\");\n        //\n        // Check Access\n        AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(AuthorizationDomains.GROUP_DOMAIN, Actions.write, groupCreator.getScopeId()));\n        //\n        // Check limits\n        if (allowedChildEntities(groupCreator.getScopeId()) <= 0) {\n            throw new KapuaMaxNumberOfItemsReachedException(\"Groups\");\n        }\n        //\n        // Check duplicate name\n        GroupQuery query = new GroupQueryImpl(groupCreator.getScopeId());\n        query.setPredicate(new AttributePredicateImpl<>(GroupAttributes.NAME, groupCreator.getName()));\n        if (count(query) > 0) {\n            throw new KapuaDuplicateNameException(groupCreator.getName());\n        }\n        //\n        // Do create\n        return entityManagerSession.onTransactedInsert(em -> GroupDAO.create(em, groupCreator));\n    }\n    @Override\n    public Group update(Group group) throws KapuaException {\n        //\n        // Argument validator\n        ArgumentValidator.notNull(group, \"group\");\n        ArgumentValidator.notNull(group.getScopeId(), \"group.scopeId\");\n        ArgumentValidator.notNull(group.getId(), \"group.id\");\n        ArgumentValidator.notEmptyOrNull(group.getName(), \"group.name\");\n        //\n        // Check Access\n        AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(AuthorizationDomains.GROUP_DOMAIN, Actions.write, group.getScopeId()));\n        //\n        // Check existence\n        if (find(group.getScopeId(), group.getId()) == null) {\n            throw new KapuaEntityNotFoundException(Group.TYPE, group.getId());\n        }\n        //\n        // Check duplicate name\n        GroupQuery query = new GroupQueryImpl(group.getScopeId());\n        query.setPredicate(\n                new AndPredicateImpl(\n                        new AttributePredicateImpl<>(GroupAttributes.NAME, group.getName()),\n                        new AttributePredicateImpl<>(GroupAttributes.ENTITY_ID, group.getId(), Operator.NOT_EQUAL)\n                )\n        );\n        if (count(query) > 0) {\n            throw new KapuaDuplicateNameException(group.getName());\n        }\n        //\n        // Do update\n        return entityManagerSession.onTransactedResult(em -> GroupDAO.update(em, group));\n    }\n<fim_suffix>    @Override\n    public void delete(KapuaId scopeId, KapuaId groupId) throws KapuaException {\n        //\n        // Argument validation\n        ArgumentValidator.notNull(scopeId, \"scopeId\");\n        ArgumentValidator.notNull(groupId, \"groupId\");\n        //\n        // Check Access\n        AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(AuthorizationDomains.GROUP_DOMAIN, Actions.delete, scopeId));\n        //\n        // Check existence\n        if (find(scopeId, groupId) == null) {\n            throw new KapuaEntityNotFoundException(Group.TYPE, groupId);\n        }\n        //\n        // Do delete\n        entityManagerSession.onTransactedAction(em -> GroupDAO.delete(em, scopeId, groupId));\n    }\n    @Override\n    public Group find(KapuaId scopeId, KapuaId groupId) throws KapuaException {\n        //\n        // Argument validation\n        ArgumentValidator.notNull(scopeId, \"scopeId\");\n        ArgumentValidator.notNull(groupId, \"groupId\");\n        //\n        // Check Access\n        AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(AuthorizationDomains.GROUP_DOMAIN, Actions.read, scopeId));\n        //\n        // Do find\n        return entityManagerSession.onResult(em -> GroupDAO.find(em, scopeId, groupId));\n    }\n    @Override\n    public GroupListResult query(KapuaQuery<Group> query) throws KapuaException {\n        //\n        // Argument validation\n        ArgumentValidator.notNull(query, \"query\");\n        ArgumentValidator.notNull(query.getScopeId(), \"query.scopeId\");\n        //\n        // Check Access\n        AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(AuthorizationDomains.GROUP_DOMAIN, Actions.read, query.getScopeId()));\n        //\n        // Do query\n        return entityManagerSession.onResult(em -> GroupDAO.query(em, query));\n    }\n    @Override\n    public long count(KapuaQuery<Group> query) throws KapuaException {\n        //\n        // Argument validation\n        ArgumentValidator.notNull(query, \"query\");\n        ArgumentValidator.notNull(query.getScopeId(), \"query.scopeId\");\n        //\n        // Check Access\n        AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(AuthorizationDomains.GROUP_DOMAIN, Actions.read, query.getScopeId()));\n        //\n        // Do count\n        return entityManagerSession.onResult(em -> GroupDAO.count(em, query));\n    }\n    //@ListenServiceEvent(fromAddress=\"account\")\n    public void onKapuaEvent(ServiceEvent kapuaEvent) throws KapuaException {\n        if (kapuaEvent == null) {\n            //service bus error. Throw some exception?\n        }\n        LOG.info(\"GroupService: received kapua event from {}, operation {}\", kapuaEvent.getService(), kapuaEvent.getOperation());\n        if (\"account\".equals(kapuaEvent.getService()) && \"delete\".equals(kapuaEvent.getOperation())) {\n            deleteGroupByAccountId(kapuaEvent.getScopeId(), kapuaEvent.getEntityId());\n        }\n    }<fim_middle>// function below has no smell\n"}