{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2011, 2016 itemis AG and others.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Matthias Wienand (itemis AG) - initial API and implementation\n *\n *******************************************************************************/\npackage org.eclipse.gef.geometry.projective;\n\nimport org.eclipse.gef.geometry.planar.Point;\n\n/**\n * The Vector3D class implements a three dimensional vector (components x, y, z)\n * with its standard operations: addition and multiplication (scalar,\n * dot-product, cross-product).\n *\n * It is used to represent planar lines and planar points which are represented\n * by three dimensional planes and three dimensional lines through the origin,\n * respectively.\n *\n * @author mwienand\n *\n */\npublic final class Vector3D {\n\t/**\n\t * the x-coordinate of this {@link Vector3D}.\n\t */\n\tpublic double x;\n\n\t/**\n\t * the y-coordinate of this {@link Vector3D}.\n\t */\n\tpublic double y;\n\n\t/**\n\t * the homogeneous coordinate of this {@link Vector3D}.\n\t */\n\tpublic double z;\n\n\t/**\n\t * Constructs a new {@link Vector3D} object with the given component values.\n\t *\n\t * @param px\n\t *            The x-coordinate of the new {@link Vector3D}.\n\t * @param py\n\t *            The y-coordinate of the new {@link Vector3D}.\n\t * @param pz\n\t *            The z-coordinate of the new {@link Vector3D}.\n\t */\n\tpublic Vector3D(double px, double py, double pz) {\n\t\tx = px;\n\t\ty = py;\n\t\tz = pz;\n\t}\n\n\t/**\n\t * Constructs a new {@link Vector3D} from the given {@link Point}, setting z\n\t * to 1.\n\t *\n\t * @param p\n\t *            The {@link Point} which determines the new {@link Vector3D}'s\n\t *            x- and y-coordinate.\n\t */\n\tpublic Vector3D(Point p) {\n\t\tthis(p.x, p.y, 1);\n\t}\n\n<fim_suffix>\t@Override\n\tpublic boolean equals(Object other) {\n\t\tif (other instanceof Vector3D) {\n\t\t\tVector3D o = (Vector3D) other;\n\t\t\tPoint tmp = this.toPoint();\n\t\t\tif (tmp == null) {\n\t\t\t\treturn o.toPoint() == null;\n\t\t\t}\n\t\t\treturn tmp.equals(o.toPoint());\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns a new {@link Vector3D} object with its components set to the sum\n\t * of the individual x, y and z components of this {@link Vector3D} and the\n\t * given other {@link Vector3D}.\n\t *\n\t * @param other\n\t *            The {@link Vector3D} which is added to this {@link Vector3D}.\n\t * @return a new {@link Vector3D} object representing the sum of this\n\t *         {@link Vector3D} and the given other {@link Vector3D}\n\t */\n\tpublic Vector3D getAdded(Vector3D other) {\n\t\treturn new Vector3D(this.x + other.x, this.y + other.y,\n\t\t\t\tthis.z + other.z);\n\t}\n\n\t/**\n\t * Returns a copy of this {@link Vector3D}.\n\t *\n\t * @return a copy of this {@link Vector3D}\n\t */\n\tpublic Vector3D getCopy() {\n\t\treturn new Vector3D(x, y, z);\n\t}\n\n\t/**\n\t * Returns a new {@link Vector3D} object that is the cross product of this\n\t * and the given other {@link Vector3D}.\n\t *\n\t * @param other\n\t *            The {@link Vector3D} to which the cross product is computed.\n\t * @return a new {@link Vector3D} object that is the cross product of this\n\t *         and the given other {@link Vector3D}\n\t */\n\tpublic Vector3D getCrossProduct(Vector3D other) {\n\t\treturn new Vector3D(this.y * other.z - this.z * other.y,\n\t\t\t\tthis.z * other.x - this.x * other.z,\n\t\t\t\tthis.x * other.y - this.y * other.x);\n\t}\n\n\t/**\n\t * Returns the dot-product of this and the given other {@link Vector3D}.\n\t *\n\t * @param other\n\t *            The {@link Vector3D} to which the dot product is computed.\n\t * @return the dot-product of this and the given other {@link Vector3D}\n\t */\n\tpublic double getDotProduct(Vector3D other) {\n\t\treturn this.x * other.x + this.y * other.y + this.z * other.z;\n\t}\n\n\t/**\n\t * Returns a new {@link Vector3D} object with its components set to the\n\t * given ratio between this {@link Vector3D} and the given other\n\t * {@link Vector3D}.\n\t *\n\t * @param other\n\t *            The other {@link Vector3D}.\n\t * @param t\n\t *            The ratio.\n\t * @return a new {@link Vector3D} object with its components set to the\n\t *         given ratio between this {@link Vector3D} and the given other\n\t *         {@link Vector3D}\n\t */\n\tpublic Vector3D getRatio(Vector3D other, double t) {\n\t\treturn getAdded(other.getSubtracted(this).getScaled(t));\n\t}\n\n\t/**\n\t * Returns a new {@link Vector3D} object with its components set to the x, y\n\t * and z components of this {@link Vector3D} scaled by the given factor.\n\t *\n\t * @param f\n\t *            The scaling factor.\n\t * @return a new {@link Vector3D} object with its components set to the x, y\n\t *         and z components of this {@link Vector3D} scaled by the given\n\t *         factor\n\t */\n\tpublic Vector3D getScaled(double f) {\n\t\treturn new Vector3D(x * f, y * f, z * f);\n\t}\n\n\t/**\n\t * Returns a new {@link Vector3D} object with its components set to the\n\t * difference of the individual x, y and z components of this\n\t * {@link Vector3D} and the given other {@link Vector3D}.\n\t *\n\t * @param other\n\t *            The {@link Vector3D} which is subtracted from this\n\t *            {@link Vector3D}.\n\t * @return a new {@link Vector3D} object representing the difference of this\n\t *         {@link Vector3D} and the given other {@link Vector3D}\n\t */\n\tpublic Vector3D getSubtracted(Vector3D other) {\n\t\treturn new Vector3D(this.x - other.x, this.y - other.y,\n\t\t\t\tthis.z - other.z);\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\t// cannot generate a good hash-code because of the imprecise\n\t\t// comparisons\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Returns a new {@link Point} object that is represented by this\n\t * {@link Vector3D}.\n\t *\n\t * @return a new {@link Point} object that is represented by this\n\t *         {@link Vector3D}\n\t */\n\tpublic Point toPoint() {\n\t\tif (this.z == 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Point(this.x / this.z, this.y / this.z);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Vector3D(\" + x + \", \" + y + \", \" + z + \")\";\n\t}\n}<fim_middle>// function below has no smell\n"}