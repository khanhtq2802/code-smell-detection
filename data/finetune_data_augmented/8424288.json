{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.dns;\n\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.support.DefaultProducer;\nimport org.xbill.DNS.DClass;\nimport org.xbill.DNS.Message;\nimport org.xbill.DNS.Name;\nimport org.xbill.DNS.Record;\nimport org.xbill.DNS.SimpleResolver;\nimport org.xbill.DNS.Type;\n\n/**\n * A producer for dig-like operations over DNS adresses.\n * <p/>\n * Inspired from Dig.java coming with the distribution of dnsjava,\n * though most if not all options are unsupported.\n */\npublic class DnsDigProducer extends DefaultProducer {\n\n<fim_suffix>    public DnsDigProducer(Endpoint endpoint) {\n        super(endpoint);\n    }\n\n    @Override\n    public void process(Exchange exchange) throws Exception {\n        String server = exchange.getIn().getHeader(DnsConstants.DNS_SERVER, String.class);\n\n        SimpleResolver resolver = new SimpleResolver(server);\n        int type = Type.value(exchange.getIn().getHeader(DnsConstants.DNS_TYPE, String.class));\n        if (type == -1) {\n            // default: if unparsable value given, use A.\n            type = Type.A;\n        }\n\n        String dclassValue = exchange.getIn().getHeader(DnsConstants.DNS_CLASS, String.class);\n        if (dclassValue == null) {\n            dclassValue = \"\";\n        }\n\n        int dclass = DClass.value(dclassValue);\n        if (dclass == -1) {\n            // by default, value is IN.\n            dclass = DClass.IN;\n        }\n\n        Name name = Name.fromString(exchange.getIn().getHeader(DnsConstants.DNS_NAME, String.class), Name.root);\n        Record rec = Record.newRecord(name, type, dclass);\n        Message query = Message.newQuery(rec);\n        Message response = resolver.send(query);\n        exchange.getIn().setBody(response);\n    }\n}<fim_middle>// function below has no smell\n"}