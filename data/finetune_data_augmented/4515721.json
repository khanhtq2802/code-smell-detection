{"text": "<fim_prefix>\n<fim_suffix>public class Main\n{\n    /**\n     * Switch for specifying bundle directory.\n    **/\n    public static final String BUNDLE_DIR_SWITCH = \"-b\";\n    /**\n     * The property name used to specify whether the launcher should\n     * install a shutdown hook.\n    **/\n    public static final String SHUTDOWN_HOOK_PROP = \"felix.shutdown.hook\";\n    /**\n     * The property name used to specify an URL to the system\n     * property file.\n    **/\n    public static final String SYSTEM_PROPERTIES_PROP = \"felix.system.properties\";\n    /**\n     * The default name used for the system properties file.\n    **/\n    public static final String SYSTEM_PROPERTIES_FILE_VALUE = \"system.properties\";\n    /**\n     * The property name used to specify an URL to the configuration\n     * property file to be used for the created the framework instance.\n    **/\n    public static final String CONFIG_PROPERTIES_PROP = \"felix.config.properties\";\n    /**\n     * The default name used for the configuration properties file.\n    **/\n    public static final String CONFIG_PROPERTIES_FILE_VALUE = \"config.properties\";\n    /**\n     * Name of the configuration directory.\n     */\n    public static final String CONFIG_DIRECTORY = \"conf\";\n    private static Framework m_fwk = null;\n    /**\n     * <p>\n     * This method performs the main task of constructing an framework instance\n     * and starting its execution. The following functions are performed\n     * when invoked:\n     * </p>\n     * <ol>\n     *   <li><i><b>Examine and verify command-line arguments.</b></i> The launcher\n     *       accepts a \"<tt>-b</tt>\" command line switch to set the bundle auto-deploy\n     *       directory and a single argument to set the bundle cache directory.\n     *   </li>\n     *   <li><i><b>Read the system properties file.</b></i> This is a file\n     *       containing properties to be pushed into <tt>System.setProperty()</tt>\n     *       before starting the framework. This mechanism is mainly shorthand\n     *       for people starting the framework from the command line to avoid having\n     *       to specify a bunch of <tt>-D</tt> system property definitions.\n     *       The only properties defined in this file that will impact the framework's\n     *       behavior are the those concerning setting HTTP proxies, such as\n     *       <tt>http.proxyHost</tt>, <tt>http.proxyPort</tt>, and\n     *       <tt>http.proxyAuth</tt>. Generally speaking, the framework does\n     *       not use system properties at all.\n     *   </li>\n     *   <li><i><b>Read the framework's configuration property file.</b></i> This is\n     *       a file containing properties used to configure the framework\n     *       instance and to pass configuration information into\n     *       bundles installed into the framework instance. The configuration\n     *       property file is called <tt>config.properties</tt> by default\n     *       and is located in the <tt>conf/</tt> directory of the Felix\n     *       installation directory, which is the parent directory of the\n     *       directory containing the <tt>felix.jar</tt> file. It is possible\n     *       to use a different location for the property file by specifying\n     *       the desired URL using the <tt>felix.config.properties</tt>\n     *       system property; this should be set using the <tt>-D</tt> syntax\n     *       when executing the JVM. If the <tt>config.properties</tt> file\n     *       cannot be found, then default values are used for all configuration\n     *       properties. Refer to the\n     *       <a href=\"Felix.html#Felix(java.util.Map)\"><tt>Felix</tt></a>\n     *       constructor documentation for more information on framework\n     *       configuration properties.\n     *   </li>\n     *   <li><i><b>Copy configuration properties specified as system properties\n     *       into the set of configuration properties.</b></i> Even though the\n     *       Felix framework does not consult system properties for configuration\n     *       information, sometimes it is convenient to specify them on the command\n     *       line when launching Felix. To make this possible, the Felix launcher\n     *       copies any configuration properties specified as system properties\n     *       into the set of configuration properties passed into Felix.\n     *   </li>\n     *   <li><i><b>Add shutdown hook.</b></i> To make sure the framework shutdowns\n     *       cleanly, the launcher installs a shutdown hook; this can be disabled\n     *       with the <tt>felix.shutdown.hook</tt> configuration property.\n     *   </li>\n     *   <li><i><b>Create and initialize a framework instance.</b></i> The OSGi standard\n     *       <tt>FrameworkFactory</tt> is retrieved from <tt>META-INF/services</tt>\n     *       and used to create a framework instance with the configuration properties.\n     *   </li>\n     *   <li><i><b>Auto-deploy bundles.</b></i> All bundles in the auto-deploy\n     *       directory are deployed into the framework instance.\n     *   </li>\n     *   <li><i><b>Start the framework.</b></i> The framework is started and\n     *       the launcher thread waits for the framework to shutdown.\n     *   </li>\n     * </ol>\n     * <p>\n     * It should be noted that simply starting an instance of the framework is not\n     * enough to create an interactive session with it. It is necessary to install\n     * and start bundles that provide a some means to interact with the framework;\n     * this is generally done by bundles in the auto-deploy directory or specifying\n     * an \"auto-start\" property in the configuration property file. If no bundles\n     * providing a means to interact with the framework are installed or if the\n     * configuration property file cannot be found, the framework will appear to\n     * be hung or deadlocked. This is not the case, it is executing correctly,\n     * there is just no way to interact with it.\n     * </p>\n     * <p>\n     * The launcher provides two ways to deploy bundles into a framework at\n     * startup, which have associated configuration properties:\n     * </p>\n     * <ul>\n     *   <li>Bundle auto-deploy - Automatically deploys all bundles from a\n     *       specified directory, controlled by the following configuration\n     *       properties:\n     *     <ul>\n     *       <li><tt>felix.auto.deploy.dir</tt> - Specifies the auto-deploy directory\n     *           from which bundles are automatically deploy at framework startup.\n     *           The default is the <tt>bundle/</tt> directory of the current directory.\n     *       </li>\n     *       <li><tt>felix.auto.deploy.action</tt> - Specifies the auto-deploy actions\n     *           to be found on bundle JAR files found in the auto-deploy directory.\n     *           The possible actions are <tt>install</tt>, <tt>update</tt>,\n     *           <tt>start</tt>, and <tt>uninstall</tt>. If no actions are specified,\n     *           then the auto-deploy directory is not processed. There is no default\n     *           value for this property.\n     *       </li>\n     *     </ul>\n     *   </li>\n     *   <li>Bundle auto-properties - Configuration properties which specify URLs\n     *       to bundles to install/start:\n     *     <ul>\n     *       <li><tt>felix.auto.install.N</tt> - Space-delimited list of bundle\n     *           URLs to automatically install when the framework is started,\n     *           where <tt>N</tt> is the start level into which the bundle will be\n     *           installed (e.g., felix.auto.install.2).\n     *       </li>\n     *       <li><tt>felix.auto.start.N</tt> - Space-delimited list of bundle URLs\n     *           to automatically install and start when the framework is started,\n     *           where <tt>N</tt> is the start level into which the bundle will be\n     *           installed (e.g., felix.auto.start.2).\n     *       </li>\n     *     </ul>\n     *   </li>\n     * </ul>\n     * <p>\n     * These properties should be specified in the <tt>config.properties</tt>\n     * so that they can be processed by the launcher during the framework\n     * startup process.\n     * </p>\n     * @param args Accepts arguments to set the auto-deploy directory and/or\n     *        the bundle cache directory.\n     * @throws Exception If an error occurs.\n    **/\n    public static void main(String[] args) throws Exception\n    {\n        // Look for bundle directory and/or cache directory.\n        // We support at most one argument, which is the bundle\n        // cache directory.\n        String bundleDir = null;\n        String cacheDir = null;\n        boolean expectBundleDir = false;<fim_middle>// class below has no smell\n"}