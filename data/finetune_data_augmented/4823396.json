{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.taverna.workbench.ui.views.contextualviews;\n\nimport static java.awt.BorderLayout.CENTER;\n\nimport java.awt.BorderLayout;\nimport java.awt.Frame;\n\nimport javax.swing.Action;\nimport javax.swing.JComponent;\nimport javax.swing.JPanel;\n\n/**\n * An abstract class defining the base container to hold a contextual view over\n * Dataflow element.\n * <p>\n * The specific implementation of this class to support a given dataflow element\n * needs to implement the {@link #getMainFrame()} and {@link #getViewTitle()}.\n * <p>\n * If a view is associated with an action handler to configure this component,\n * then the {@link #getConfigureAction(Frame) getConfigureAction} handler must\n * be over-ridden. If this returns null then the configure button is left\n * disabled and it is not possible to configure the element.\n * \n * @author Stuart Owen\n * @author Ian Dunlop\n * @author Alan R Williams\n */\n<fim_suffix>@SuppressWarnings(\"serial\")\npublic abstract class ContextualView extends JPanel {\n\t/**\n\t * When implemented, this method should define the main frame that is placed\n\t * in this container, and provides a static view of the Dataflow element.\n\t * \n\t * @return a JComponent that represents the dataflow element.\n\t */\n\tpublic abstract JComponent getMainFrame();\n\n\t/**\n\t * @return a String providing a title for the view\n\t */\n\tpublic abstract String getViewTitle();\n\n\t/**\n\t * Allows the item to be configured, but returning an action handler that\n\t * will be invoked when selecting to configure. By default this is provided\n\t * by a button.\n\t * <p>\n\t * If there is no ability to configure the given item, then this should\n\t * return null.\n\t * \n\t * @param owner\n\t *            the owning dialog to be used when displaying dialogues for\n\t *            configuration options\n\t * @return an action that allows the element being viewed to be configured.\n\t */\n\tpublic Action getConfigureAction(Frame owner) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * This <i>must</i> be called by any sub-classes after they have initialised\n\t * their own view since it gets their main panel and adds it to the main\n\t * contextual view. If you don't do this you will get a very empty frame\n\t * popping up!\n\t */\n\tpublic void initView() {\n\t\tsetLayout(new BorderLayout());\n\t\tadd(getMainFrame(), CENTER);\n\t\tsetName(getViewTitle());\n\t}\n\n\tpublic abstract void refreshView();\n\n\tpublic abstract int getPreferredPosition();\n\n\tpublic static String getTextFromDepth(String kind, Integer depth) {\n\t\tString labelText = \"The last prediction said the \" + kind;\n\t\tif (depth == null) {\n\t\t\tlabelText += \" would not transmit a value\";\n\t\t} else if (depth == -1) {\n\t\t\tlabelText += \" was invalid/unpredicted\";\n\t\t} else if (depth == 0) {\n\t\t\tlabelText += \" would carry a single value\";\n\t\t} else {\n\t\t\tlabelText += \" would carry a list of depth \" + depth;\n\t\t}\n\t\treturn labelText;\n\t}\n}<fim_middle>// class below has no smell\n"}