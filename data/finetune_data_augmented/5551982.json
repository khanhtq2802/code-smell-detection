{"text": "<fim_prefix>/**\n * Autogenerated by Thrift Compiler (0.9.3)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage org.apache.sentry.hdfs.service.thrift;\nimport org.apache.thrift.scheme.IScheme;\nimport org.apache.thrift.scheme.SchemeFactory;\nimport org.apache.thrift.scheme.StandardScheme;\nimport org.apache.thrift.scheme.TupleScheme;\nimport org.apache.thrift.protocol.TTupleProtocol;\nimport org.apache.thrift.protocol.TProtocolException;\nimport org.apache.thrift.EncodingUtils;\nimport org.apache.thrift.TException;\nimport org.apache.thrift.async.AsyncMethodCallback;\nimport org.apache.thrift.server.AbstractNonblockingServer.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.EnumMap;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.EnumSet;\nimport java.util.Collections;\nimport java.util.BitSet;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\nimport javax.annotation.Generated;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})\n@Generated(value = \"Autogenerated by Thrift Compiler (0.9.3)\")\npublic class TPrivilegePrincipal implements org.apache.thrift.TBase<TPrivilegePrincipal, TPrivilegePrincipal._Fields>, java.io.Serializable, Cloneable, Comparable<TPrivilegePrincipal> {\n  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"TPrivilegePrincipal\");\n  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"type\", org.apache.thrift.protocol.TType.I32, (short)1);\n  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"value\", org.apache.thrift.protocol.TType.STRING, (short)2);\n  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n  static {\n    schemes.put(StandardScheme.class, new TPrivilegePrincipalStandardSchemeFactory());\n    schemes.put(TupleScheme.class, new TPrivilegePrincipalTupleSchemeFactory());\n  }\n  private TPrivilegePrincipalType type; // required\n  private String value; // required\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n    /**\n     * \n     * @see TPrivilegePrincipalType\n     */\n    TYPE((short)1, \"type\"),\n    VALUE((short)2, \"value\");\n    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n    static {\n      for (_Fields field : EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // TYPE\n          return TYPE;\n        case 2: // VALUE\n          return VALUE;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final String _fieldName;\n    _Fields(short thriftId, String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData(\"type\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPrivilegePrincipalType.class)));\n    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData(\"value\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    metaDataMap = Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPrivilegePrincipal.class, metaDataMap);\n  }\n  public TPrivilegePrincipal() {\n  }\n  public TPrivilegePrincipal(\n    TPrivilegePrincipalType type,\n    String value)\n  {\n    this();\n    this.type = type;\n    this.value = value;\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public TPrivilegePrincipal(TPrivilegePrincipal other) {\n    if (other.isSetType()) {\n      this.type = other.type;\n    }\n    if (other.isSetValue()) {\n      this.value = other.value;\n    }\n  }\n  public TPrivilegePrincipal deepCopy() {\n    return new TPrivilegePrincipal(this);\n  }\n  @Override\n  public void clear() {\n    this.type = null;\n    this.value = null;\n  }\n  /**\n   * \n   * @see TPrivilegePrincipalType\n   */\n  public TPrivilegePrincipalType getType() {\n    return this.type;\n  }\n  /**\n   * \n   * @see TPrivilegePrincipalType\n   */\n  public void setType(TPrivilegePrincipalType type) {\n    this.type = type;\n  }\n  public void unsetType() {\n    this.type = null;\n  }\n  /** Returns true if field type is set (has been assigned a value) and false otherwise */\n  public boolean isSetType() {\n    return this.type != null;\n  }\n  public void setTypeIsSet(boolean value) {\n    if (!value) {\n      this.type = null;\n    }\n  }\n  public String getValue() {\n    return this.value;\n  }\n  public void setValue(String value) {\n    this.value = value;\n  }\n  public void unsetValue() {\n    this.value = null;\n  }\n  /** Returns true if field value is set (has been assigned a value) and false otherwise */\n  public boolean isSetValue() {\n    return this.value != null;\n  }\n  public void setValueIsSet(boolean value) {\n    if (!value) {\n      this.value = null;\n    }\n  }\n<fim_suffix>  public void setFieldValue(_Fields field, Object value) {\n    switch (field) {\n    case TYPE:\n      if (value == null) {\n        unsetType();\n      } else {\n        setType((TPrivilegePrincipalType)value);\n      }\n      break;\n    case VALUE:\n      if (value == null) {\n        unsetValue();\n      } else {\n        setValue((String)value);\n      }\n      break;\n    }\n  }\n  public Object getFieldValue(_Fields field) {\n    switch (field) {\n    case TYPE:\n      return getType();\n    case VALUE:\n      return getValue();\n    }\n    throw new IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new IllegalArgumentException();\n    }\n    switch (field) {\n    case TYPE:\n      return isSetType();\n    case VALUE:\n      return isSetValue();\n    }\n    throw new IllegalStateException();\n  }\n  @Override\n  public boolean equals(Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof TPrivilegePrincipal)\n      return this.equals((TPrivilegePrincipal)that);\n    return false;\n  }\n  public boolean equals(TPrivilegePrincipal that) {\n    if (that == null)\n      return false;\n    boolean this_present_type = true && this.isSetType();\n    boolean that_present_type = true && that.isSetType();<fim_middle>// function below has no smell\n"}