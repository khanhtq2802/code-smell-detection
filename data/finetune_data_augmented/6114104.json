{"text": "<fim_prefix>/*\n * Copyright (c) 2017 Goldman Sachs and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v. 1.0 which accompany this distribution.\n * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n * http://www.eclipse.org/org/documents/edl-v10.php.\n */\n\npackage org.eclipse.collections.impl;\n\nimport java.io.Externalizable;\nimport java.io.IOException;\nimport java.io.ObjectInput;\nimport java.io.ObjectOutput;\nimport java.io.Serializable;\n\nimport org.eclipse.collections.api.RichIterable;\nimport org.eclipse.collections.impl.collection.AbstractSynchronizedRichIterable;\n\n/**\n * A synchronized view of a RichIterable.\n *\n * @since 5.0\n */\npublic class SynchronizedRichIterable<T>\n        extends AbstractSynchronizedRichIterable<T>\n        implements Serializable\n{\n    private static final long serialVersionUID = 2L;\n\n    protected SynchronizedRichIterable(RichIterable<T> iterable)\n    {\n        this(iterable, null);\n    }\n\n    protected SynchronizedRichIterable(RichIterable<T> iterable, Object newLock)\n    {\n        super(iterable, newLock);\n    }\n\n    /**\n     * This method will take a RichIterable and wrap it directly in a SynchronizedRichIterable.\n     */\n    public static <E> SynchronizedRichIterable<E> of(RichIterable<E> iterable)\n    {\n        return new SynchronizedRichIterable<>(iterable);\n    }\n\n    protected Object writeReplace()\n    {\n        return new SynchronizedRichIterableSerializationProxy<>(this.getDelegate());\n    }\n\n    /**\n     * This method will take a RichIterable and wrap it directly in a SynchronizedRichIterable. Additionally,\n     * a developer specifies which lock to use with the collection.\n     */\n    public static <E> SynchronizedRichIterable<E> of(RichIterable<E> iterable, Object lock)\n    {\n        return new SynchronizedRichIterable<>(iterable, lock);\n    }\n\n<fim_suffix>    public static class SynchronizedRichIterableSerializationProxy<T> implements Externalizable\n    {\n        private static final long serialVersionUID = 1L;\n\n        private RichIterable<T> richIterable;\n\n        @SuppressWarnings(\"UnusedDeclaration\")\n        public SynchronizedRichIterableSerializationProxy()\n        {\n            // Empty constructor for Externalizable class\n        }\n\n        public SynchronizedRichIterableSerializationProxy(RichIterable<T> iterable)\n        {\n            this.richIterable = iterable;\n        }\n\n        @Override\n        public void writeExternal(ObjectOutput out) throws IOException\n        {\n            out.writeObject(this.richIterable);\n        }\n\n        @Override\n        public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException\n        {\n            this.richIterable = (RichIterable<T>) in.readObject();\n        }\n\n        protected Object readResolve()\n        {\n            return new SynchronizedRichIterable<>(this.richIterable);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}