{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.pinot.core.query.aggregation.groupby;\n\nimport com.google.common.base.Preconditions;\nimport java.util.Arrays;\n\n\n/**\n * Result Holder implemented using DoubleArray.\n */\n<fim_suffix>public class DoubleGroupByResultHolder implements GroupByResultHolder {\n  private final int _maxCapacity;\n  private final double _defaultValue;\n\n  private int _resultHolderCapacity;\n  private double[] _resultArray;\n\n  /**\n   * Constructor for the class.\n   *\n   * @param initialCapacity Initial capacity of the result holder\n   * @param maxCapacity Maximum capacity of the result holder\n   * @param defaultValue Default value of un-initialized results\n   */\n  public DoubleGroupByResultHolder(int initialCapacity, int maxCapacity, double defaultValue) {\n    _maxCapacity = maxCapacity;\n    _defaultValue = defaultValue;\n\n    _resultHolderCapacity = initialCapacity;\n    _resultArray = new double[initialCapacity];\n    if (defaultValue != 0.0) {\n      Arrays.fill(_resultArray, defaultValue);\n    }\n  }\n\n  @Override\n  public void ensureCapacity(int capacity) {\n    Preconditions.checkArgument(capacity <= _maxCapacity);\n\n    if (capacity > _resultHolderCapacity) {\n      int copyLength = _resultHolderCapacity;\n      _resultHolderCapacity = Math.max(_resultHolderCapacity * 2, capacity);\n\n      // Cap the growth to maximum possible number of group keys\n      _resultHolderCapacity = Math.min(_resultHolderCapacity, _maxCapacity);\n\n      double[] current = _resultArray;\n      _resultArray = new double[_resultHolderCapacity];\n      System.arraycopy(current, 0, _resultArray, 0, copyLength);\n\n      if (_defaultValue != 0.0) {\n        Arrays.fill(_resultArray, copyLength, _resultHolderCapacity, _defaultValue);\n      }\n    }\n  }\n\n  @Override\n  public double getDoubleResult(int groupKey) {\n    if (groupKey == GroupKeyGenerator.INVALID_ID) {\n      return _defaultValue;\n    } else {\n      return _resultArray[groupKey];\n    }\n  }\n\n  @Override\n  public <T> T getResult(int groupKey) {\n    throw new UnsupportedOperationException();\n  }\n\n  @Override\n  public void setValueForKey(int groupKey, double newValue) {\n    if (groupKey != GroupKeyGenerator.INVALID_ID) {\n      _resultArray[groupKey] = newValue;\n    }\n  }\n\n  @Override\n  public void setValueForKey(int groupKey, Object newValue) {\n    throw new UnsupportedOperationException();\n  }\n}<fim_middle>// class below has no smell\n"}