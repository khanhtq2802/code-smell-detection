{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.accumulo.testing.randomwalk.bulk;\n\nimport java.util.Arrays;\nimport java.util.Random;\n\nimport org.apache.accumulo.testing.randomwalk.RandWalkEnv;\nimport org.apache.accumulo.testing.randomwalk.State;\nimport org.apache.hadoop.io.Text;\n\npublic class Merge extends SelectiveBulkTest {\n\n<fim_suffix>  @Override\n  protected void runLater(State state, RandWalkEnv env) throws Exception {\n    Text[] points = getRandomTabletRange(state);\n    log.info(\"merging \" + rangeToString(points));\n    env.getAccumuloClient().tableOperations().merge(Setup.getTableName(), points[0], points[1]);\n    log.info(\"merging \" + rangeToString(points) + \" complete\");\n  }\n\n  public static String rangeToString(Text[] points) {\n    return \"(\" + (points[0] == null ? \"-inf\" : points[0]) + \" -> \"\n        + (points[1] == null ? \"+inf\" : points[1]) + \"]\";\n  }\n\n  public static Text getRandomRow(Random rand) {\n    return new Text(\n        String.format(BulkPlusOne.FMT, (rand.nextLong() & 0x7fffffffffffffffl) % BulkPlusOne.LOTS));\n  }\n\n  public static Text[] getRandomTabletRange(State state) {\n    Random rand = (Random) state.get(\"rand\");\n    Text points[] = {getRandomRow(rand), getRandomRow(rand),};\n    Arrays.sort(points);\n    if (rand.nextInt(10) == 0) {\n      points[0] = null;\n    }\n    if (rand.nextInt(10) == 0) {\n      points[1] = null;\n    }\n    if (rand.nextInt(20) == 0) {\n      points[0] = null;\n      points[1] = null;\n    }\n    return points;\n  }\n\n}<fim_middle>// function below has no smell\n"}