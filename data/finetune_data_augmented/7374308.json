{"text": "<fim_prefix>// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See License.txt in the repository root.\npackage com.microsoft.tfs.client.common.ui.dialogs.connect;\nimport java.net.URI;\nimport java.text.MessageFormat;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.eclipse.jface.dialogs.IDialogConstants;\nimport org.eclipse.jface.dialogs.MessageDialog;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.SelectionAdapter;\nimport org.eclipse.swt.events.SelectionEvent;\nimport org.eclipse.swt.graphics.Point;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Button;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Label;\nimport org.eclipse.swt.widgets.Shell;\nimport org.eclipse.swt.widgets.Text;\nimport org.eclipse.ui.ISharedImages;\nimport org.eclipse.ui.PlatformUI;\nimport com.microsoft.tfs.client.common.ui.Messages;\nimport com.microsoft.tfs.client.common.ui.controls.connect.ConnectionErrorControl;\nimport com.microsoft.tfs.client.common.ui.framework.helper.SWTUtil;\nimport com.microsoft.tfs.client.common.ui.framework.helper.ShellUtils;\nimport com.microsoft.tfs.client.common.ui.framework.layout.GridDataBuilder;\nimport com.microsoft.tfs.client.common.ui.framework.validation.ButtonValidatorBinding;\nimport com.microsoft.tfs.client.common.ui.framework.validation.TextControlValidator;\nimport com.microsoft.tfs.client.common.ui.helpers.AutomationIDHelper;\nimport com.microsoft.tfs.core.config.persistence.DefaultPersistenceStoreProvider;\nimport com.microsoft.tfs.core.credentials.CachedCredentials;\nimport com.microsoft.tfs.core.credentials.CredentialsManagerFactory;\nimport com.microsoft.tfs.core.httpclient.Credentials;\nimport com.microsoft.tfs.core.httpclient.UsernamePasswordCredentials;\nimport com.microsoft.tfs.core.httpclient.UsernamePasswordCredentials.PatCredentials;\nimport com.microsoft.tfs.util.Check;\nimport com.microsoft.tfs.util.StringUtil;\nimport com.microsoft.tfs.util.listeners.SingleListenerFacade;\npublic class CredentialsDialog extends CredentialsCompleteDialog {\n    public static final String USERNAME_TEXT_ID = \"CredentialsDialog.userText\"; //$NON-NLS-1$\n    public static final String PASSWORD_TEXT_ID = \"CredentialsDialog.passwordText\"; //$NON-NLS-1$\n    public static final String SAVE_PASSWORD_BUTTON_ID = \"CredentialsDialog.savePasswordButton\"; //$NON-NLS-1$\n    private static final Log log = LogFactory.getLog(CredentialsDialog.class);\n    private final URI serverURI;\n    private String savedUserName = StringUtil.EMPTY;\n    private Credentials credentials;\n    private String errorMessage;\n    private Text usernameText;\n    private Text passwordText;\n    private Button savePasswordButton;\n    private Button userpasswordButton;\n    private Button patButton;\n    private Composite insecureComposite;\n    private Label insecureSaveSpacer;\n    private Label insecureSaveImageLabel;\n    private Label insecureSaveTextLabel;\n    private boolean allowSavePassword = false;\n    private boolean alwaysSavePassword = false;\n    private volatile boolean isSavePasswordChecked = false;\n    private final SingleListenerFacade credentialsCompleteListeners =\n        new SingleListenerFacade(CredentialsCompleteListener.class);\n    public CredentialsDialog(final Shell parent, final URI serverURI) {\n        super(parent);\n        Check.notNull(serverURI, \"serverURI\"); //$NON-NLS-1$\n        this.serverURI = serverURI;\n        setOptionPersistGeometry(false);\n    }\n    public void setCredentials(final Credentials credentials) {\n        this.credentials = credentials;\n    }\n    @Override\n    public Credentials getCredentials() {\n        return credentials;\n    }\n    public void setErrorMessage(final String errorMessage) {\n        this.errorMessage = errorMessage;\n    }\n    public String getError() {\n        return errorMessage;\n    }\n    public void setAllowSavePassword(final boolean allowSavePassword) {\n        this.allowSavePassword = allowSavePassword;\n    }\n<fim_suffix>    public void setAlwaysSavePassword(final boolean alwaysSavePassword) {\n        this.alwaysSavePassword = alwaysSavePassword;\n    }\n    @Override\n    protected String provideDialogTitle() {\n        return Messages.getString(\"CredentialsDialog.DialogTitle\"); //$NON-NLS-1$\n    }\n    @Override\n    protected void hookAddToDialogArea(final Composite dialogArea) {\n        final GridLayout layout = new GridLayout(2, false);\n        layout.marginWidth = getHorizontalMargin();\n        layout.marginHeight = getVerticalMargin();\n        layout.horizontalSpacing = getHorizontalSpacing();\n        layout.verticalSpacing = getVerticalSpacing();\n        dialogArea.setLayout(layout);\n        if (errorMessage != null) {\n            String profileMessage = \"\"; //$NON-NLS-1$\n            if (serverURI != null) {\n                final String subMessageFormat = Messages.getString(\"CredentialsDialog.EnterPasswordFormat\"); //$NON-NLS-1$\n                profileMessage = MessageFormat.format(subMessageFormat, serverURI.toString());\n            }\n            final String message = (serverURI == null) ? errorMessage : errorMessage + \"\\n\\n\" + profileMessage; //$NON-NLS-1$\n            final ConnectionErrorControl errorControl = new ConnectionErrorControl(dialogArea, SWT.NONE);\n            errorControl.setServerURI(serverURI);\n            errorControl.setMessage(message);\n            errorControl.setMessageWidthHint(\n                convertHorizontalDLUsToPixels(IDialogConstants.MINIMUM_MESSAGE_AREA_WIDTH));\n            GridDataBuilder.newInstance().hSpan(2).hGrab().hFill().applyTo(errorControl);\n            final Label spacerLabel = new Label(dialogArea, SWT.NONE);\n            spacerLabel.setText(\"\"); //$NON-NLS-1$\n            GridDataBuilder.newInstance().hSpan(2).applyTo(spacerLabel);\n        } else {\n            final String messageFormat = Messages.getString(\"CredentialsDialog.EnterPasswordFormat\"); //$NON-NLS-1$\n            final String message = MessageFormat.format(messageFormat, serverURI.toString());\n            final Label promptLabel = new Label(dialogArea, SWT.NONE);\n            promptLabel.setText(message);\n            GridDataBuilder.newInstance().hSpan(2).hGrab().hFill().wHint(\n                convertHorizontalDLUsToPixels(IDialogConstants.MINIMUM_MESSAGE_AREA_WIDTH)).applyTo(promptLabel);\n            final Label spacerLabel = new Label(dialogArea, SWT.NONE);\n            spacerLabel.setText(\"\"); //$NON-NLS-1$\n            GridDataBuilder.newInstance().hSpan(2).applyTo(spacerLabel);\n        }\n        final Label credentialsTypeLabel = new Label(dialogArea, SWT.NONE);\n        credentialsTypeLabel.setText(Messages.getString(\"CredentialsDialog.CredentialsTypeLabel\")); //$NON-NLS-1$\n        final Composite buttonComposite = new Composite(dialogArea, SWT.NONE);\n        final GridLayout buttonCompositeLayout = new GridLayout(2, false);\n        buttonCompositeLayout.horizontalSpacing = getHorizontalSpacing();\n        buttonCompositeLayout.verticalSpacing = getVerticalSpacing();\n        buttonCompositeLayout.marginWidth = 0;\n        buttonCompositeLayout.marginHeight = 0;\n        buttonComposite.setLayout(buttonCompositeLayout);\n        userpasswordButton = new Button(buttonComposite, SWT.RADIO);\n        userpasswordButton.setText(Messages.getString(\"CredentialsDialog.UserPasswordTypeLabel\")); //$NON-NLS-1$\n        userpasswordButton.setSelection(true);\n        patButton = new Button(buttonComposite, SWT.RADIO);\n        patButton.setText(Messages.getString(\"CredentialsDialog.PatTypeLabel\")); //$NON-NLS-1$\n        patButton.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(final SelectionEvent e) {\n                onCredentialTypeSelected();\n            }\n        });\n        final Label usernameLabel = new Label(dialogArea, SWT.NONE);\n        usernameLabel.setText(Messages.getString(\"CredentialsDialog.UserNameLabelText\")); //$NON-NLS-1$\n        usernameText = new Text(dialogArea, SWT.BORDER);\n        AutomationIDHelper.setWidgetID(usernameText, USERNAME_TEXT_ID);\n        GridDataBuilder.newInstance().hGrab().hFill().applyTo(usernameText);\n        if (credentials != null && credentials instanceof UsernamePasswordCredentials) {\n            final String username = ((UsernamePasswordCredentials) credentials).getUsername();\n            usernameText.setText(username);\n        }\n        final Label passwordLabel = new Label(dialogArea, SWT.NONE);\n        passwordLabel.setText(Messages.getString(\"CredentialsDialog.PasswordLabelText\")); //$NON-NLS-1$\n        passwordText = new Text(dialogArea, SWT.PASSWORD | SWT.BORDER);\n        AutomationIDHelper.setWidgetID(passwordText, PASSWORD_TEXT_ID);<fim_middle>// function below has no smell\n"}