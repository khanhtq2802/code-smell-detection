{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.uima.examples.xmi;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\nimport org.apache.uima.cas.CAS;\nimport org.apache.uima.cas.CASException;\nimport org.apache.uima.cas.FSIterator;\nimport org.apache.uima.cas.impl.XmiCasSerializer;\nimport org.apache.uima.collection.CasConsumer_ImplBase;\nimport org.apache.uima.examples.SourceDocumentInformation;\nimport org.apache.uima.jcas.JCas;\nimport org.apache.uima.resource.ResourceInitializationException;\nimport org.apache.uima.resource.ResourceProcessException;\nimport org.apache.uima.util.XMLSerializer;\nimport org.xml.sax.SAXException;\n\n/**\n * A simple CAS consumer that writes the CAS to XMI format.\n * <p>\n * This CAS Consumer takes one parameter:\n * <ul>\n * <li><code>OutputDirectory</code> - path to directory into which output files will be written</li>\n * </ul>\n */\n<fim_suffix>public class XmiWriterCasConsumer extends CasConsumer_ImplBase {\n  /**\n   * Name of configuration parameter that must be set to the path of a directory into which the\n   * output files will be written.\n   */\n  public static final String PARAM_OUTPUTDIR = \"OutputDirectory\";\n\n  private File mOutputDir;\n\n  private int mDocNum;\n\n  public void initialize() throws ResourceInitializationException {\n    mDocNum = 0;\n    mOutputDir = new File((String) getConfigParameterValue(PARAM_OUTPUTDIR));\n    if (!mOutputDir.exists()) {\n      mOutputDir.mkdirs();\n    }\n  }\n\n  /**\n   * Processes the CAS which was populated by the TextAnalysisEngines. <br>\n   * In this case, the CAS is converted to XMI and written into the output file .\n   * \n   * @param aCAS\n   *          a CAS which has been populated by the TAEs\n   * \n   * @throws ResourceProcessException\n   *           if there is an error in processing the Resource\n   * \n   * @see org.apache.uima.collection.base_cpm.CasObjectProcessor#processCas(org.apache.uima.cas.CAS)\n   */\n  public void processCas(CAS aCAS) throws ResourceProcessException {\n    String modelFileName = null;\n\n    JCas jcas;\n    try {\n      jcas = aCAS.getJCas();\n    } catch (CASException e) {\n      throw new ResourceProcessException(e);\n    }\n\n    // retrieve the filename of the input file from the CAS\n    FSIterator it = jcas.getAnnotationIndex(SourceDocumentInformation.type).iterator();\n    File outFile = null;\n    if (it.hasNext()) {\n      SourceDocumentInformation fileLoc = (SourceDocumentInformation) it.next();\n      File inFile;\n      try {\n        inFile = new File(new URL(fileLoc.getUri()).getPath());\n        String outFileName = inFile.getName();\n        if (fileLoc.getOffsetInSource() > 0) {\n          outFileName += (\"_\" + fileLoc.getOffsetInSource());\n        }\n        outFileName += \".xmi\";\n        outFile = new File(mOutputDir, outFileName);\n        modelFileName = mOutputDir.getAbsolutePath() + \"/\" + inFile.getName() + \".ecore\";\n      } catch (MalformedURLException e1) {\n        // invalid URL, use default processing below\n      }\n    }\n    if (outFile == null) {\n      outFile = new File(mOutputDir, \"doc\" + mDocNum++ + \".xmi\");     \n    }\n    // serialize XCAS and write to output file\n    try {\n      writeXmi(jcas.getCas(), outFile, modelFileName);\n    } catch (IOException e) {\n      throw new ResourceProcessException(e);\n    } catch (SAXException e) {\n      throw new ResourceProcessException(e);\n    }\n  }\n\n  /**\n   * Serialize a CAS to a file in XMI format\n   * \n   * @param aCas\n   *          CAS to serialize\n   * @param name\n   *          output file\n   * @throws SAXException -\n   * @throws Exception -\n   * \n   * @throws ResourceProcessException -\n   */\n  private void writeXmi(CAS aCas, File name, String modelFileName) throws IOException, SAXException {\n    FileOutputStream out = null;\n\n    try {\n      // write XMI\n      out = new FileOutputStream(name);\n      XmiCasSerializer ser = new XmiCasSerializer(aCas.getTypeSystem());\n      XMLSerializer xmlSer = new XMLSerializer(out, false);\n      ser.serialize(aCas, xmlSer.getContentHandler());\n    } finally {\n      if (out != null) {\n        out.close();\n      }\n    }\n  }\n}<fim_middle>// class below is blob\n"}