{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.sshd.git;\n\nimport java.io.IOException;\nimport java.nio.file.FileSystem;\nimport java.nio.file.Path;\nimport java.util.Objects;\n\nimport org.apache.sshd.server.session.ServerSession;\n\n/**\n * Used by the GIT command(s) to resolve the root directory of the GIT repository\n *\n * @author <a href=\"mailto:dev@mina.apache.org\">Apache MINA SSHD Project</a>\n */\n<fim_suffix>public interface GitLocationResolver {\n    /**\n     * @param command The complete received command\n     * @param args The command split into arguments - {@code args[0]} is the\n     * &quot;pure&quot; command itself without any other arguments. <B>Note:</B>\n     * changing the content of the arguments array may affect command execution\n     * in undetermined ways, due to invocation code changes without prior notice,\n     * so <U>highly recommended to avoid it</U>.\n     * @param session The {@link ServerSession} through which the command was received\n     * @param fs The {@link FileSystem} associated with the server session\n     * @return The local GIT repository root path\n     * @throws IOException If failed to resolve\n     */\n    Path resolveRootDirectory(String command, String[] args, ServerSession session, FileSystem fs) throws IOException;\n\n    /**\n     * Creates a resolver that returns the same root directory for any invocation of\n     * {@link #resolveRootDirectory(String, String[], ServerSession, FileSystem) resolveRootDirectory}\n     *\n     * @param rootDir The (never {@code null}) root directory to return\n     * @return The wrapper resolver\n     */\n    static GitLocationResolver constantPath(Path rootDir) {\n        Objects.requireNonNull(rootDir, \"No root directory provided\");\n        return (cmd, args, session, fs) -> rootDir;\n    }\n}<fim_middle>// class below has no smell\n"}