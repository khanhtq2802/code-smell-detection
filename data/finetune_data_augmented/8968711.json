{"text": "<fim_prefix>              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_master_key_args struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        oprot.writeFieldBegin(KEY_SEQ_FIELD_DESC);\n        oprot.writeI32(struct.key_seq);\n        oprot.writeFieldEnd();\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class remove_master_key_argsTupleSchemeFactory implements SchemeFactory {\n      public remove_master_key_argsTupleScheme getScheme() {\n        return new remove_master_key_argsTupleScheme();\n      }\n    }\n    private static class remove_master_key_argsTupleScheme extends TupleScheme<remove_master_key_args> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, remove_master_key_args struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetKey_seq()) {\n          optionals.set(0);\n        }\n        oprot.writeBitSet(optionals, 1);\n        if (struct.isSetKey_seq()) {\n          oprot.writeI32(struct.key_seq);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, remove_master_key_args struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        BitSet incoming = iprot.readBitSet(1);\n        if (incoming.get(0)) {\n          struct.key_seq = iprot.readI32();\n          struct.setKey_seqIsSet(true);\n        }\n      }\n    }\n  }\n  @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class remove_master_key_result implements org.apache.thrift.TBase<remove_master_key_result, remove_master_key_result._Fields>, java.io.Serializable, Cloneable, Comparable<remove_master_key_result>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"remove_master_key_result\");\n    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"success\", org.apache.thrift.protocol.TType.BOOL, (short)0);\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new remove_master_key_resultStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new remove_master_key_resultTupleSchemeFactory());\n    }\n    private boolean success; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      SUCCESS((short)0, \"success\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 0: // SUCCESS\n            return SUCCESS;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    private static final int __SUCCESS_ISSET_ID = 0;\n    private byte __isset_bitfield = 0;\n    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData(\"success\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_master_key_result.class, metaDataMap);\n    }\n    public remove_master_key_result() {\n    }\n    public remove_master_key_result(\n      boolean success)\n    {\n      this();\n      this.success = success;\n      setSuccessIsSet(true);\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public remove_master_key_result(remove_master_key_result other) {\n      __isset_bitfield = other.__isset_bitfield;\n      this.success = other.success;\n    }\n    public remove_master_key_result deepCopy() {\n      return new remove_master_key_result(this);\n    }\n    @Override\n    public void clear() {\n      setSuccessIsSet(false);\n      this.success = false;\n    }\n    public boolean isSuccess() {\n      return this.success;\n    }\n    public void setSuccess(boolean success) {\n      this.success = success;\n      setSuccessIsSet(true);\n    }\n    public void unsetSuccess() {\n      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);\n    }\n    /** Returns true if field success is set (has been assigned a value) and false otherwise */\n    public boolean isSetSuccess() {\n      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);\n    }\n    public void setSuccessIsSet(boolean value) {\n      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      case SUCCESS:\n        if (value == null) {\n          unsetSuccess();\n        } else {\n          setSuccess((Boolean)value);\n        }\n        break;\n      }\n    }\n    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case SUCCESS:\n        return isSuccess();\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      case SUCCESS:\n        return isSetSuccess();\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof remove_master_key_result)\n        return this.equals((remove_master_key_result)that);\n      return false;\n    }\n    public boolean equals(remove_master_key_result that) {\n      if (that == null)\n        return false;\n      boolean this_present_success = true;\n      boolean that_present_success = true;\n      if (this_present_success || that_present_success) {\n        if (!(this_present_success && that_present_success))\n          return false;\n        if (this.success != that.success)\n          return false;\n      }\n      return true;\n    }\n<fim_suffix>    @Override\n    public int hashCode() {\n      List<Object> list = new ArrayList<Object>();\n      boolean present_success = true;\n      list.add(present_success);\n      if (present_success)\n        list.add(success);\n      return list.hashCode();\n    }<fim_middle>// function below has no smell\n"}