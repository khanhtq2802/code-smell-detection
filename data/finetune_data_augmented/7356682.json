{"text": "<fim_prefix>// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See License.txt in the repository root.\n\npackage com.microsoft.tfs.jni.internal.negotiate;\n\nimport com.microsoft.tfs.jni.Messages;\nimport com.microsoft.tfs.jni.Negotiate;\n\n/**\n * An implementation of {@link Negotiate} that throws a runtime exception for\n * most methods.\n *\n * @threadsafety immutable\n */\npublic class UnavailableNegotiate implements Negotiate {\n    private static String MESSAGE = Messages.getString(\"UnavailableNegotiate.Message\"); //$NON-NLS-1$\n\n    @Override\n    public boolean supportsCredentialsDefault() {\n        return false;\n    }\n\n    @Override\n    public boolean supportsCredentialsSpecified() {\n        return false;\n    }\n\n    @Override\n    public String getCredentialsDefault() {\n        throw new RuntimeException(MESSAGE);\n    }\n\n<fim_suffix>    @Override\n    public NegotiateState initialize() throws NegotiateException {\n        throw new RuntimeException(MESSAGE);\n    }\n\n    @Override\n    public void setCredentialsDefault(final NegotiateState state) throws NegotiateException {\n        throw new RuntimeException(MESSAGE);\n    }\n\n    @Override\n    public void setCredentialsSpecified(\n        final NegotiateState state,\n        final String username,\n        final String domain,\n        final String password) throws NegotiateException {\n        throw new RuntimeException(MESSAGE);\n    }\n\n    @Override\n    public void setTarget(final NegotiateState state, final String target) throws NegotiateException {\n        throw new RuntimeException(MESSAGE);\n    }\n\n    @Override\n    public void setLocalhost(final NegotiateState state, final String localhost) throws NegotiateException {\n        throw new RuntimeException(MESSAGE);\n    }\n\n    @Override\n    public byte[] getToken(final NegotiateState state, final byte[] inputToken) throws NegotiateException {\n        throw new RuntimeException(MESSAGE);\n    }\n\n    @Override\n    public boolean isComplete(final NegotiateState state) throws NegotiateException {\n        throw new RuntimeException(MESSAGE);\n    }\n\n    @Override\n    public String getErrorMessage(final NegotiateState state) {\n        throw new RuntimeException(MESSAGE);\n    }\n\n    @Override\n    public void dispose(final NegotiateState state) throws NegotiateException {\n        throw new RuntimeException(MESSAGE);\n    }\n}<fim_middle>// function below has no smell\n"}