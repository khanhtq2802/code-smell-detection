{"text": "<fim_prefix>import org.apache.poi.poifs.filesystem.DirectoryNode;\nimport org.apache.poi.poifs.filesystem.Entry;\nimport org.apache.poi.poifs.filesystem.POIFSFileSystem;\nimport org.apache.tika.exception.EncryptedDocumentException;\nimport org.apache.tika.exception.TikaException;\nimport org.apache.tika.io.TikaInputStream;\nimport org.apache.tika.metadata.Metadata;\nimport org.apache.tika.metadata.TikaCoreProperties;\nimport org.apache.tika.parser.ParseContext;\nimport org.apache.tika.sax.XHTMLContentHandler;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.AttributesImpl;\npublic class WordExtractor extends AbstractPOIFSExtractor {\n    private static final char UNICODECHAR_NONBREAKING_HYPHEN = '\\u2011';\n    private static final char UNICODECHAR_ZERO_WIDTH_SPACE = '\\u200b';\n    // could be improved by using the real delimiter in xchFollow [MS-DOC], v20140721, 2.4.6.3, Part 3, Step 3\n    private static final String LIST_DELIMITER = \" \";\n    private static final Map<String, TagAndStyle> fixedParagraphStyles = new HashMap<String, TagAndStyle>();\n    private static final TagAndStyle defaultParagraphStyle = new TagAndStyle(\"p\", null);\n    static {\n        fixedParagraphStyles.put(\"Default\", defaultParagraphStyle);\n        fixedParagraphStyles.put(\"Normal\", defaultParagraphStyle);\n        fixedParagraphStyles.put(\"heading\", new TagAndStyle(\"h1\", null));\n        fixedParagraphStyles.put(\"Heading\", new TagAndStyle(\"h1\", null));\n        fixedParagraphStyles.put(\"Title\", new TagAndStyle(\"h1\", \"title\"));\n        fixedParagraphStyles.put(\"Subtitle\", new TagAndStyle(\"h2\", \"subtitle\"));\n        fixedParagraphStyles.put(\"HTML Preformatted\", new TagAndStyle(\"pre\", null));\n    }\n    // True if we are currently in the named style tag:\n    private boolean curStrikeThrough;\n    private boolean curBold;\n    private boolean curItalic;\n    private boolean curUnderline;\n    private final Metadata metadata;\n    public WordExtractor(ParseContext context, Metadata metadata) {\n        super(context);\n        this.metadata = metadata;\n    }\n    private static int countParagraphs(Range... ranges) {\n        int count = 0;\n        for (Range r : ranges) {\n            if (r != null) {\n                count += r.numParagraphs();\n            }\n        }\n        return count;\n    }\n    /**\n     * Given a style name, return what tag should be used, and\n     * what style should be applied to it.\n     */\n    public static TagAndStyle buildParagraphTagAndStyle(String styleName, boolean isTable) {\n        if (styleName == null || styleName.length() < 2) {\n            return defaultParagraphStyle;\n        }\n        TagAndStyle tagAndStyle = fixedParagraphStyles.get(styleName);\n        if (tagAndStyle != null) {\n            return tagAndStyle;\n        }\n        if (styleName.equals(\"Table Contents\") && isTable) {\n            return defaultParagraphStyle;\n        }\n        String tag = \"p\";\n        String styleClass = null;\n        if (styleName.startsWith(\"heading\") || styleName.startsWith(\"Heading\")) {\n            // \"Heading 3\" or \"Heading2\" or \"heading 4\"\n            int num = 1;\n            try {\n                num = Integer.parseInt(\n                        styleName.substring(styleName.length() - 1)\n                );\n            } catch (NumberFormatException e) {\n            }\n            // Turn it into a H1 - H6 (H7+ isn't valid!)\n            tag = \"h\" + Math.min(num, 6);\n        } else {\n            styleClass = styleName.replace(' ', '_');\n            styleClass = styleClass.substring(0, 1).toLowerCase(Locale.ROOT) +\n                    styleClass.substring(1);\n        }\n        return new TagAndStyle(tag, styleClass);\n    }\n    protected void parse(\n            POIFSFileSystem filesystem, XHTMLContentHandler xhtml)\n            throws IOException, SAXException, TikaException {\n        parse(filesystem.getRoot(), xhtml);\n    }\n    protected void parse(\n            DirectoryNode root, XHTMLContentHandler xhtml)\n            throws IOException, SAXException, TikaException {\n        HWPFDocument document;\n        try {\n            document = new HWPFDocument(root);\n        } catch (org.apache.poi.EncryptedDocumentException e) {\n                throw new EncryptedDocumentException(e);\n        } catch (OldWordFileFormatException e) {\n            parseWord6(root, xhtml);\n            return;\n        }\n        extractSavedByMetadata(document);\n        org.apache.poi.hwpf.extractor.WordExtractor wordExtractor =\n                new org.apache.poi.hwpf.extractor.WordExtractor(document);\n        // Grab the list of pictures. As far as we can tell,\n        //  the pictures should be in order, and may be directly\n        //  placed or referenced from an anchor\n        PicturesTable pictureTable = document.getPicturesTable();\n        PicturesSource pictures = new PicturesSource(document);\n        HeaderStories headerFooter = null;\n        // Do any headers, if present\n        if (officeParserConfig.getIncludeHeadersAndFooters()) {\n            headerFooter = new HeaderStories(document);\n            Range[] headers = new Range[]{headerFooter.getFirstHeaderSubrange(),\n                    headerFooter.getEvenHeaderSubrange(), headerFooter.getOddHeaderSubrange()};\n            handleHeaderFooter(headers, \"header\", document, pictures, pictureTable, xhtml);\n        }\n        // Do the main paragraph text\n        Range r = document.getRange();\n        ListManager listManager = new ListManager(document);\n        for (int i = 0; i < r.numParagraphs(); i++) {\n            Paragraph p = r.getParagraph(i);\n            i += handleParagraph(p, 0, r, document, FieldsDocumentPart.MAIN, pictures, pictureTable, listManager, xhtml);\n        }\n        if (officeParserConfig.getIncludeShapeBasedContent()) {\n            // Do everything else\n            for (String paragraph : wordExtractor.getMainTextboxText()) {\n                xhtml.element(\"p\", paragraph);\n            }\n        }\n        for (String paragraph : wordExtractor.getFootnoteText()) {\n            xhtml.element(\"p\", paragraph);\n        }\n        for (String paragraph : wordExtractor.getCommentsText()) {\n            xhtml.element(\"p\", paragraph);\n        }\n        for (String paragraph : wordExtractor.getEndnoteText()) {\n            xhtml.element(\"p\", paragraph);\n        }\n        if (officeParserConfig.getIncludeHeadersAndFooters()) {\n            // Do any footers, if present\n            Range[] footers = new Range[]{headerFooter.getFirstFooterSubrange(),\n                    headerFooter.getEvenFooterSubrange(), headerFooter.getOddFooterSubrange()};\n            handleHeaderFooter(footers, \"footer\", document, pictures, pictureTable, xhtml);\n        }\n        // Handle any pictures that we haven't output yet\n        for (Picture p = pictures.nextUnclaimed(); p != null; ) {\n            handlePictureCharacterRun(\n                    null, p, pictures, xhtml\n            );\n            p = pictures.nextUnclaimed();\n        }\n        // Handle any embeded office documents\n        try {\n            DirectoryEntry op = (DirectoryEntry) root.getEntry(\"ObjectPool\");\n            for (Entry entry : op) {\n                if (entry.getName().startsWith(\"_\")\n                        && entry instanceof DirectoryEntry) {\n                    handleEmbeddedOfficeDoc((DirectoryEntry) entry, xhtml);\n                }\n            }\n        } catch (FileNotFoundException e) {\n        }\n    }\n    private void extractSavedByMetadata(HWPFDocument document) {\n        SavedByTable savedByTable = document.getSavedByTable();\n        if (savedByTable == null) {\n            return;\n        }\n        for (SavedByEntry sbe : savedByTable.getEntries()) {\n            metadata.add(TikaCoreProperties.ORIGINAL_RESOURCE_NAME, sbe.getSaveLocation());\n        }\n    }\n<fim_suffix>    private void handleHeaderFooter(Range[] ranges, String type, HWPFDocument document,\n                                    PicturesSource pictures, PicturesTable pictureTable, XHTMLContentHandler xhtml)\n            throws SAXException, IOException, TikaException {\n        if (countParagraphs(ranges) > 0) {\n            xhtml.startElement(\"div\", \"class\", type);\n            ListManager listManager = new ListManager(document);\n            for (Range r : ranges) {\n                if (r != null) {\n                    for (int i = 0; i < r.numParagraphs(); i++) {\n                        Paragraph p = r.getParagraph(i);\n                        i += handleParagraph(p, 0, r, document,\n                                FieldsDocumentPart.HEADER, pictures, pictureTable, listManager, xhtml);\n                    }\n                }\n            }\n            xhtml.endElement(\"div\");\n        }\n    }<fim_middle>// function below has no smell\n"}