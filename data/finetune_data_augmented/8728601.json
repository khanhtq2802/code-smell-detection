{"text": "<fim_prefix>            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n              return;\n            } catch (Exception ex) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n            }\n            fb.close();\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, addCloudJobSubmissionDetails_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {\n        iface.addCloudJobSubmissionDetails(args.computeResourceId, args.priorityOrder, args.cloudSubmission,resultHandler);\n      }\n    }\n    public static class getCloudJobSubmission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCloudJobSubmission_args, org.apache.airavata.model.appcatalog.computeresource.CloudJobSubmission> {\n      public getCloudJobSubmission() {\n        super(\"getCloudJobSubmission\");\n      }\n      public getCloudJobSubmission_args getEmptyArgsInstance() {\n        return new getCloudJobSubmission_args();\n      }\n      public AsyncMethodCallback<org.apache.airavata.model.appcatalog.computeresource.CloudJobSubmission> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.thrift.AsyncProcessFunction fcall = this;\n        return new AsyncMethodCallback<org.apache.airavata.model.appcatalog.computeresource.CloudJobSubmission>() { \n          public void onComplete(org.apache.airavata.model.appcatalog.computeresource.CloudJobSubmission o) {\n            getCloudJobSubmission_result result = new getCloudJobSubmission_result();\n            result.success = o;\n            try {\n              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);\n              return;\n            } catch (Exception e) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", e);\n            }\n            fb.close();\n          }\n          public void onError(Exception e) {\n            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;\n            org.apache.thrift.TBase msg;\n            getCloudJobSubmission_result result = new getCloudJobSubmission_result();\n            if (e instanceof org.apache.airavata.registry.api.exception.RegistryServiceException) {\n                        result.rse = (org.apache.airavata.registry.api.exception.RegistryServiceException) e;\n                        result.setRseIsSet(true);\n                        msg = result;\n            }\n             else \n            {\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n              return;\n            } catch (Exception ex) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n            }\n            fb.close();\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, getCloudJobSubmission_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.appcatalog.computeresource.CloudJobSubmission> resultHandler) throws TException {\n        iface.getCloudJobSubmission(args.jobSubmissionId,resultHandler);\n      }\n    }\n    public static class updateSSHJobSubmissionDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSSHJobSubmissionDetails_args, Boolean> {\n      public updateSSHJobSubmissionDetails() {\n        super(\"updateSSHJobSubmissionDetails\");\n      }\n      public updateSSHJobSubmissionDetails_args getEmptyArgsInstance() {\n        return new updateSSHJobSubmissionDetails_args();\n      }\n      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.thrift.AsyncProcessFunction fcall = this;\n        return new AsyncMethodCallback<Boolean>() { \n          public void onComplete(Boolean o) {\n            updateSSHJobSubmissionDetails_result result = new updateSSHJobSubmissionDetails_result();\n            result.success = o;\n            result.setSuccessIsSet(true);\n            try {\n              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);\n              return;\n            } catch (Exception e) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", e);\n            }\n            fb.close();\n          }\n          public void onError(Exception e) {\n            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;\n            org.apache.thrift.TBase msg;\n            updateSSHJobSubmissionDetails_result result = new updateSSHJobSubmissionDetails_result();\n            if (e instanceof org.apache.airavata.registry.api.exception.RegistryServiceException) {\n                        result.rse = (org.apache.airavata.registry.api.exception.RegistryServiceException) e;\n                        result.setRseIsSet(true);\n                        msg = result;\n            }\n             else \n            {\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n              return;\n            } catch (Exception ex) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n            }\n            fb.close();\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, updateSSHJobSubmissionDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {\n        iface.updateSSHJobSubmissionDetails(args.jobSubmissionInterfaceId, args.sshJobSubmission,resultHandler);\n      }\n    }\n    public static class updateCloudJobSubmissionDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCloudJobSubmissionDetails_args, Boolean> {\n      public updateCloudJobSubmissionDetails() {\n        super(\"updateCloudJobSubmissionDetails\");\n      }\n      public updateCloudJobSubmissionDetails_args getEmptyArgsInstance() {\n        return new updateCloudJobSubmissionDetails_args();\n      }\n      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.thrift.AsyncProcessFunction fcall = this;\n        return new AsyncMethodCallback<Boolean>() { \n          public void onComplete(Boolean o) {\n            updateCloudJobSubmissionDetails_result result = new updateCloudJobSubmissionDetails_result();\n            result.success = o;\n            result.setSuccessIsSet(true);\n            try {\n              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);\n              return;\n            } catch (Exception e) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", e);\n            }\n            fb.close();\n          }\n          public void onError(Exception e) {\n            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;\n            org.apache.thrift.TBase msg;\n            updateCloudJobSubmissionDetails_result result = new updateCloudJobSubmissionDetails_result();\n            if (e instanceof org.apache.airavata.registry.api.exception.RegistryServiceException) {\n                        result.rse = (org.apache.airavata.registry.api.exception.RegistryServiceException) e;\n                        result.setRseIsSet(true);\n                        msg = result;\n            }\n             else \n            {\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n              return;\n            } catch (Exception ex) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n            }\n            fb.close();\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, updateCloudJobSubmissionDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {\n        iface.updateCloudJobSubmissionDetails(args.jobSubmissionInterfaceId, args.sshJobSubmission,resultHandler);\n      }\n    }\n    public static class updateUnicoreJobSubmissionDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUnicoreJobSubmissionDetails_args, Boolean> {\n      public updateUnicoreJobSubmissionDetails() {\n        super(\"updateUnicoreJobSubmissionDetails\");\n      }\n<fim_suffix>      public updateUnicoreJobSubmissionDetails_args getEmptyArgsInstance() {\n        return new updateUnicoreJobSubmissionDetails_args();\n      }<fim_middle>// function below has no smell\n"}