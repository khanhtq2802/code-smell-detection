{"text": "<fim_prefix>                    dropShipQuantity = itemQuantity;\n                } else if (\"PRODRQM_DSATP\".equals(requirementMethodEnumId)) {\n                    // Drop ship the quantity not available in inventory if the product is marked drop-ship on low inventory\n                    try {\n                        // Get ATP for the product\n                        Map<String, Object> getProductInventoryAvailableResult = dispatcher.runSync(\"getInventoryAvailableByFacility\", UtilMisc.toMap(\"productId\", productId, \"facilityId\", facilityId));\n                        BigDecimal availableToPromise = (BigDecimal) getProductInventoryAvailableResult.get(\"availableToPromiseTotal\");\n                        if (itemQuantity.compareTo(availableToPromise) <= 0) {\n                            dropShipQuantity = BigDecimal.ZERO;\n                        } else {\n                            dropShipQuantity = itemQuantity.subtract(availableToPromise);\n                        }\n                    } catch (GenericServiceException gee) {\n                        Debug.logWarning(UtilProperties.getMessage(resource_error,\"OrderRunServiceGetInventoryAvailableByFacilityError\", locale) + gee.getMessage(), module);\n                    } catch (Exception e) {\n                        Debug.logWarning(UtilProperties.getMessage(resource_error,\"OrderRunServiceGetInventoryAvailableByFacilityError\", locale) + e.getMessage(), module);\n                    }\n                } else {\n                    // Don't drop ship anything if the product isn't so marked\n                    dropShipQuantity = BigDecimal.ZERO;\n                }\n                if (dropShipQuantity.compareTo(BigDecimal.ZERO) <= 0) continue;\n                // Find a supplier for the product\n                String supplierPartyId = null;\n                try {\n                    Map<String, Object> getSuppliersForProductResult = dispatcher.runSync(\"getSuppliersForProduct\", UtilMisc.<String, Object>toMap(\"productId\", productId, \"quantity\", dropShipQuantity, \"canDropShip\", \"Y\", \"currencyUomId\", getCurrency()));\n                    List<GenericValue> supplierProducts = UtilGenerics.checkList(getSuppliersForProductResult.get(\"supplierProducts\"));\n                    // Order suppliers by supplierPrefOrderId so that preferred suppliers are used first\n                    supplierProducts = EntityUtil.orderBy(supplierProducts, UtilMisc.toList(\"supplierPrefOrderId\"));\n                    GenericValue supplierProduct = EntityUtil.getFirst(supplierProducts);\n                    if (! UtilValidate.isEmpty(supplierProduct)) {\n                        supplierPartyId = supplierProduct.getString(\"partyId\");\n                    }\n                } catch (GenericServiceException e) {\n                    Debug.logWarning(UtilProperties.getMessage(resource_error,\"OrderRunServiceGetSuppliersForProductError\", locale) + e.getMessage(), module);\n                }\n                // Leave the items untouched if we couldn't find a supplier\n                if (UtilValidate.isEmpty(supplierPartyId)) continue;\n                if (! dropShipItems.containsKey(supplierPartyId)) dropShipItems.put(supplierPartyId, new HashMap<ShoppingCartItem, Map<Integer, BigDecimal>>());\n                Map<ShoppingCartItem, Map<Integer, BigDecimal>> supplierCartItems = UtilGenerics.checkMap(dropShipItems.get(supplierPartyId));\n                if (! supplierCartItems.containsKey(cartItem)) supplierCartItems.put(cartItem, new HashMap<Integer, BigDecimal>());\n                Map<Integer, BigDecimal> cartItemGroupQuantities = UtilGenerics.checkMap(supplierCartItems.get(cartItem));\n                cartItemGroupQuantities.put(Integer.valueOf(shipGroupIndex), dropShipQuantity);\n            }\n        }\n        // Reassign the drop-shippable item quantities to new or existing drop-ship groups\n        for (String supplierPartyId : dropShipItems.keySet()) {\n            CartShipInfo shipInfo = null;\n            int newShipGroupIndex = -1 ;\n            // Attempt to get the first ship group for the supplierPartyId\n            TreeMap<Integer, CartShipInfo> supplierShipGroups = this.getShipGroupsBySupplier(supplierPartyId);\n            if (! UtilValidate.isEmpty(supplierShipGroups)) {\n                newShipGroupIndex = (supplierShipGroups.firstKey()).intValue();\n                shipInfo = supplierShipGroups.get(supplierShipGroups.firstKey());\n            }\n            if (newShipGroupIndex == -1) {\n                newShipGroupIndex = addShipInfo();\n                shipInfo = this.shipInfo.get(newShipGroupIndex);\n            }\n            shipInfo.supplierPartyId = supplierPartyId;\n            Map<ShoppingCartItem, Map<Integer, BigDecimal>> supplierCartItems = UtilGenerics.checkMap(dropShipItems.get(supplierPartyId));\n            for (ShoppingCartItem cartItem : supplierCartItems.keySet()) {\n                Map<Integer, BigDecimal> cartItemGroupQuantities = UtilGenerics.checkMap(supplierCartItems.get(cartItem));\n                for (Integer previousShipGroupIndex : cartItemGroupQuantities.keySet()) {\n                    BigDecimal dropShipQuantity = cartItemGroupQuantities.get(previousShipGroupIndex);\n                    positionItemToGroup(cartItem, dropShipQuantity, previousShipGroupIndex.intValue(), newShipGroupIndex, true);\n                }\n            }\n        }\n    }\n    static class BasePriceOrderComparator implements Comparator<Object>, Serializable {\n        private boolean ascending = false;\n        BasePriceOrderComparator(boolean ascending) {\n            this.ascending = ascending;\n        }\n        @Override\n        public int compare(java.lang.Object obj, java.lang.Object obj1) {\n            ShoppingCartItem cartItem = (ShoppingCartItem) obj;\n            ShoppingCartItem cartItem1 = (ShoppingCartItem) obj1;\n            int compareValue = cartItem.getBasePrice().compareTo(cartItem1.getBasePrice());\n            if (this.ascending) {\n                return compareValue;\n            } else {\n                return -compareValue;\n            }\n        }\n        @Override\n        public boolean equals(java.lang.Object obj) {\n            if (obj instanceof BasePriceOrderComparator) {\n                return this.ascending == ((BasePriceOrderComparator) obj).ascending;\n            } else {\n                return false;\n            }\n        }\n    }\n    public static class ShoppingCartItemGroup implements Serializable {\n        private String groupNumber;\n        private String groupName;\n        private ShoppingCartItemGroup parentGroup;\n        // don't allow empty constructor\n        @SuppressWarnings(\"unused\")\n        private ShoppingCartItemGroup() {}\n        protected ShoppingCartItemGroup(long groupNumber, String groupName) {\n            this(groupNumber, groupName, null);\n        }\n        /** Note that to avoid foreign key issues when the groups are created a parentGroup should have a lower number than the child group. */\n        protected ShoppingCartItemGroup(long groupNumber, String groupName, ShoppingCartItemGroup parentGroup) {\n            this(UtilFormatOut.formatPaddedNumber(groupNumber, 2), groupName, parentGroup);\n        }\n        protected ShoppingCartItemGroup(String groupNumber, String groupName, ShoppingCartItemGroup parentGroup) {\n            this.groupNumber = groupNumber;\n            this.groupName = groupName;\n            this.parentGroup = parentGroup;\n        }\n        protected ShoppingCartItemGroup(ShoppingCartItemGroup itemGroup, ShoppingCartItemGroup parentGroup) {\n            this.groupNumber = itemGroup.groupNumber;\n            this.groupName = itemGroup.groupName;\n            this.parentGroup = parentGroup;\n        }\n        public String getGroupNumber() {\n            return this.groupNumber;\n        }\n        public String getGroupName() {\n            return this.groupName;\n        }\n        public void setGroupName(String str) {\n            this.groupName = str;\n        }\n        public ShoppingCartItemGroup getParentGroup () {\n            return this.parentGroup;\n        }\n        protected GenericValue makeOrderItemGroup(Delegator delegator) {\n            GenericValue orderItemGroup = delegator.makeValue(\"OrderItemGroup\");\n            orderItemGroup.set(\"orderItemGroupSeqId\", this.getGroupNumber());\n            orderItemGroup.set(\"groupName\", this.getGroupName());\n            if (this.parentGroup != null) {\n                orderItemGroup.set(\"parentGroupSeqId\", this.parentGroup.getGroupNumber());\n            }\n            return orderItemGroup;\n        }\n        public void inheritParentsParent() {\n            if (this.parentGroup != null) {\n                this.parentGroup = this.parentGroup.getParentGroup();\n            }\n        }\n        @Override\n        public boolean equals(Object obj) {\n            if (obj == null) return false;\n            ShoppingCartItemGroup that = (ShoppingCartItemGroup) obj;\n            if (that.groupNumber.equals(this.groupNumber)) {\n                return true;\n            }\n            return false;\n        }\n    }\n    public static class ProductPromoUseInfo implements Serializable, Comparable<ProductPromoUseInfo> {\n        public String productPromoId = null;\n        public String productPromoCodeId = null;\n        public BigDecimal totalDiscountAmount = BigDecimal.ZERO;\n        public BigDecimal quantityLeftInActions = BigDecimal.ZERO;\n        private Map<ShoppingCartItem,BigDecimal> usageInfoMap = null;\n<fim_suffix>        public ProductPromoUseInfo(String productPromoId, String productPromoCodeId, BigDecimal totalDiscountAmount, BigDecimal quantityLeftInActions, Map<ShoppingCartItem,BigDecimal> usageInfoMap) {\n            this.productPromoId = productPromoId;\n            this.productPromoCodeId = productPromoCodeId;\n            this.totalDiscountAmount = totalDiscountAmount;\n            this.quantityLeftInActions = quantityLeftInActions;\n            this.usageInfoMap = usageInfoMap;\n        }<fim_middle>// function below has no smell\n"}