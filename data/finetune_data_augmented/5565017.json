{"text": "<fim_prefix>      System.out.println(\"Warning: \" + warnMsg);\n    }\n  }\n  // extract the authorization errors from config property and print\n  private void printMissingPerms(String errMsg) {\n    if (errMsg == null || errMsg.isEmpty()) {\n      return;\n    }\n    System.out.println(\"*** Query compilation failed ***\");\n    String perms[] = errMsg.replaceFirst(\n        \".*\" + HiveAuthzConf.HIVE_SENTRY_PRIVILEGE_ERROR_MESSAGE, \"\")\n        .split(\";\");\n    System.out.println(\"Required privileges for given query:\");\n    for (int count = 0; count < perms.length; count++) {\n      System.out.println(\" \\t \" + perms[count]);\n    }\n  }\n  // print usage\n  private void usage(Options sentryOptions) {\n    HelpFormatter formatter = new HelpFormatter();\n    formatter.printHelp(\"sentry --command config-tool\", sentryOptions);\n    System.exit(-1);\n  }\n  /**\n   * parse arguments\n   *\n   * <pre>\n   *   -d,--debug                  Enable debug output\n   *   -e,--query <arg>            Query privilege verification, requires -u\n   *   -h,--help                   Print usage\n   *   -i,--policyIni <arg>        Policy file path\n   *   -j,--jdbcURL <arg>          JDBC URL\n   *   -l,--listPrivs,--listPerms  List privilges for given user, requires -u\n   *   -p,--password <arg>         Password\n   *   -s,--sentry-site <arg>      sentry-site file path\n   *   -u,--user <arg>             user name\n   *   -v,--validate               Validate policy file\n   *   -I,--import                 Import policy file\n   *   -E,--export                 Export policy file\n   *   -o,--overwrite              Overwrite the exist role data when do the import\n   *   -b,--objectPath             The path of the object whose privileges will be exported\n   * </pre>\n   *\n   * @param args\n   */\n  private void parseArgs(String[] args) {\n    boolean enableDebug = false;\n    Options sentryOptions = new Options();\n    Option helpOpt = new Option(\"h\", \"help\", false, \"Print usage\");\n    helpOpt.setRequired(false);\n    Option validateOpt = new Option(\"v\", \"validate\", false,\n        \"Validate policy file\");\n    validateOpt.setRequired(false);\n    Option queryOpt = new Option(\"e\", \"query\", true,\n        \"Query privilege verification, requires -u\");\n    queryOpt.setRequired(false);\n    Option listPermsOpt = new Option(\"l\", \"listPerms\", false,\n        \"list permissions for given user, requires -u\");\n    listPermsOpt.setRequired(false);\n    Option listPrivsOpt = new Option(\"listPrivs\", false,\n        \"list privileges for given user, requires -u\");\n    listPrivsOpt.setRequired(false);\n    Option importOpt = new Option(\"I\", \"import\", true,\n        \"Import policy file\");\n    importOpt.setRequired(false);\n    Option exportOpt = new Option(\"E\", \"export\", true, \"Export policy file\");\n    exportOpt.setRequired(false);\n    // required args\n    OptionGroup sentryOptGroup = new OptionGroup();\n    sentryOptGroup.addOption(helpOpt);\n    sentryOptGroup.addOption(validateOpt);\n    sentryOptGroup.addOption(queryOpt);\n    sentryOptGroup.addOption(listPermsOpt);\n    sentryOptGroup.addOption(listPrivsOpt);\n    sentryOptGroup.addOption(importOpt);\n    sentryOptGroup.addOption(exportOpt);\n    sentryOptGroup.setRequired(true);\n    sentryOptions.addOptionGroup(sentryOptGroup);\n    // optional args\n    Option jdbcArg = new Option(\"j\", \"jdbcURL\", true, \"JDBC URL\");\n    jdbcArg.setRequired(false);\n    sentryOptions.addOption(jdbcArg);\n    Option sentrySitePath = new Option(\"s\", \"sentry-site\", true,\n        \"sentry-site file path\");\n    sentrySitePath.setRequired(false);\n    sentryOptions.addOption(sentrySitePath);\n    Option globalPolicyPath = new Option(\"i\", \"policyIni\", true,\n        \"Policy file path\");\n    globalPolicyPath.setRequired(false);\n    sentryOptions.addOption(globalPolicyPath);\n    Option userOpt = new Option(\"u\", \"user\", true, \"user name\");\n    userOpt.setRequired(false);\n    sentryOptions.addOption(userOpt);\n    Option passWordOpt = new Option(\"p\", \"password\", true, \"Password\");\n    userOpt.setRequired(false);\n    sentryOptions.addOption(passWordOpt);\n    Option debugOpt = new Option(\"d\", \"debug\", false, \"enable debug output\");\n    debugOpt.setRequired(false);\n    sentryOptions.addOption(debugOpt);\n    Option overwriteOpt = new Option(\"o\", \"overwrite\", false, \"enable import overwrite\");\n    overwriteOpt.setRequired(false);\n    sentryOptions.addOption(overwriteOpt);\n    Option objectPathOpt = new Option(\"b\", \"objectPath\",\n        false, \"The path of the object whose privileges will be exported\");\n    objectPathOpt.setRequired(false);\n    sentryOptions.addOption(objectPathOpt);\n    try {\n      Parser parser = new GnuParser();\n      CommandLine cmd = parser.parse(sentryOptions, args);\n      for (Option opt : cmd.getOptions()) {\n        if (opt.getOpt().equals(\"s\")) {\n          setSentrySiteFile(opt.getValue());\n        } else if (opt.getOpt().equals(\"i\")) {\n          setPolicyFile(opt.getValue());\n        } else if (opt.getOpt().equals(\"e\")) {\n          setQuery(opt.getValue());\n        } else if (opt.getOpt().equals(\"j\")) {\n          setJdbcURL(opt.getValue());\n        } else if (opt.getOpt().equals(\"u\")) {\n          setUser(opt.getValue());\n        } else if (opt.getOpt().equals(\"p\")) {\n          setPassWord(opt.getValue());\n        } else if (opt.getOpt().equals(\"l\") || opt.getOpt().equals(\"listPrivs\")) {\n          setListPrivs(true);\n        } else if (opt.getOpt().equals(\"v\")) {\n          setValidate(true);\n        } else if (opt.getOpt().equals(\"I\")) {\n          setImportPolicyFilePath(opt.getValue());\n        } else if (opt.getOpt().equals(\"E\")) {\n          setExportPolicyFilePath(opt.getValue());\n        } else if (opt.getOpt().equals(\"h\")) {\n          usage(sentryOptions);\n        } else if (opt.getOpt().equals(\"d\")) {\n          enableDebug = true;\n        } else if (opt.getOpt().equals(\"o\")) {\n          setImportOverwriteRole(true);\n        } else if (opt.getOpt().equals(\"b\")) {\n          setObjectPath(opt.getValue());\n        }\n      }\n      if (isListPrivs() && getUser() == null) {\n        throw new ParseException(\"Can't use -l without -u \");\n      }\n      if (getQuery() != null && getUser() == null) {\n        throw new ParseException(\"Must use -u with -e \");\n      }\n    } catch (ParseException e1) {\n      usage(sentryOptions);\n    }\n    if (!enableDebug) {\n      // turn off log\n      LogManager.getRootLogger().setLevel(Level.OFF);\n    }\n  }\n<fim_suffix>  public static class CommandImpl implements Command {\n    @Override\n    public void run(String[] args) throws Exception {\n      SentryConfigTool sentryTool = new SentryConfigTool();\n      try {\n        // parse arguments\n        sentryTool.parseArgs(args);\n        // load configuration\n        sentryTool.setupConfig();\n        // validate configuration\n        if (sentryTool.isValidate()) {\n          sentryTool.validatePolicy();\n        }\n        if (!StringUtils.isEmpty(sentryTool.getImportPolicyFilePath())) {\n          sentryTool.importPolicy();\n        }\n        if (!StringUtils.isEmpty(sentryTool.getExportPolicyFilePath())) {\n          sentryTool.exportPolicy();\n        }\n        // list permissions for give user\n        if (sentryTool.isListPrivs()) {\n          sentryTool.listPrivs();\n        }\n        // verify given query\n        if (sentryTool.getQuery() != null) {\n          if (sentryTool.getJdbcURL() != null) {\n            sentryTool.verifyRemoteQuery(sentryTool.getQuery());\n          } else {\n            sentryTool.verifyLocalQuery(sentryTool.getQuery());\n          }\n        }\n      } catch (Exception e) {\n        System.out.println(\"Sentry tool reported Errors: \" + e.getMessage());\n        e.printStackTrace(System.out);\n        System.exit(1);\n      }\n    }\n  }<fim_middle>// class below has no smell\n"}