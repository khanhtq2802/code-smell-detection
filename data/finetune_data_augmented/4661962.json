{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.api.common.typeutils;\n\nimport org.apache.flink.annotation.Internal;\nimport org.apache.flink.core.memory.DataInputView;\nimport org.apache.flink.core.memory.DataOutputView;\nimport org.apache.flink.util.Preconditions;\n\nimport javax.annotation.Nonnull;\n\nimport java.io.IOException;\n\n/**\n * A utility {@link TypeSerializerConfigSnapshot} that is used for backwards compatibility purposes.\n *\n * <p>In older versions of Flink (<= 1.2), we only wrote serializers and not their corresponding snapshots.\n * This class serves as a wrapper around the restored serializer instances.\n *\n * @param <T> the data type that the wrapped serializer instance serializes.\n */\n@Internal\npublic class BackwardsCompatibleSerializerSnapshot<T> implements TypeSerializerSnapshot<T> {\n\n\t/**\n\t * The serializer instance written in savepoints.\n\t */\n\t@Nonnull\n\tprivate TypeSerializer<T> serializerInstance;\n\n\tpublic BackwardsCompatibleSerializerSnapshot(TypeSerializer<T> serializerInstance) {\n\t\tthis.serializerInstance = Preconditions.checkNotNull(serializerInstance);\n\t}\n\n<fim_suffix>\t@Override\n\tpublic void writeSnapshot(DataOutputView out) throws IOException {\n\t\tthrow new UnsupportedOperationException(\n\t\t\t\"This is a dummy config snapshot used only for backwards compatibility.\");\n\t}\n\n\t@Override\n\tpublic void readSnapshot(int version, DataInputView in, ClassLoader userCodeClassLoader) throws IOException {\n\t\tthrow new UnsupportedOperationException(\n\t\t\t\"This is a dummy config snapshot used only for backwards compatibility.\");\n\t}\n\n\t@Override\n\tpublic int getCurrentVersion() {\n\t\tthrow new UnsupportedOperationException(\n\t\t\t\"This is a dummy config snapshot used only for backwards compatibility.\");\n\t}\n\n\t@Override\n\tpublic TypeSerializer<T> restoreSerializer() {\n\t\treturn serializerInstance;\n\t}\n\n\t@Override\n\tpublic TypeSerializerSchemaCompatibility<T> resolveSchemaCompatibility(TypeSerializer<T> newSerializer) {\n\t\t// if there is no configuration snapshot to check against,\n\t\t// then we can only assume that the new serializer is compatible as is\n\t\treturn TypeSerializerSchemaCompatibility.compatibleAsIs();\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn serializerInstance.hashCode();\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tBackwardsCompatibleSerializerSnapshot<?> that = (BackwardsCompatibleSerializerSnapshot<?>) o;\n\n\t\treturn that.serializerInstance.equals(serializerInstance);\n\t}\n}<fim_middle>// function below has no smell\n"}