{"text": "<fim_prefix>/*\n * Copyright 2011-2012 Amazon Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at:\n *\n *    http://aws.amazon.com/apache2.0\n *\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.amazonaws.eclipse.core.ui.swt;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Composite;\n\n/**\n * A builder for Composites, which group together several widgets with some\n * rules for how to lay them out relative to each other.\n */\n<fim_suffix>public final class CompositeBuilder\n    extends AbstractWidgetBuilder<CompositeBuilder> {\n\n    private final ArrayList<WidgetBuilder> children;\n    private GridLayout layout;\n\n    public CompositeBuilder() {\n        children = new ArrayList<>();\n    }\n\n    public GridLayout getLayout() {\n        return layout;\n    }\n\n    public GridLayout getOrCreateLayout() {\n        if (layout == null) {\n            layout = new GridLayout();\n        }\n        return layout;\n    }\n\n    public CompositeBuilder withLayout(final GridLayout value) {\n        layout = value;\n        return this;\n    }\n\n    public CompositeBuilder withColumns(final int value) {\n        getOrCreateLayout().numColumns = value;\n        return this;\n    }\n\n    public CompositeBuilder withEqualWidthColumns(final boolean value) {\n        getOrCreateLayout().makeColumnsEqualWidth = value;\n        return this;\n    }\n\n    public CompositeBuilder withMarginWidth(final int value) {\n        getOrCreateLayout().marginWidth = value;\n        return this;\n    }\n\n    public CompositeBuilder withMarginHeight(final int value) {\n        getOrCreateLayout().marginHeight = value;\n        return this;\n    }\n\n    public CompositeBuilder withLeftMargin(final int value) {\n        getOrCreateLayout().marginLeft = value;\n        return this;\n    }\n\n    public CompositeBuilder withRightMargin(final int value) {\n        getOrCreateLayout().marginRight = value;\n        return this;\n    }\n\n    public CompositeBuilder withTopMargin(final int value) {\n        getOrCreateLayout().marginTop = value;\n        return this;\n    }\n\n    public CompositeBuilder withBottomMargin(final int value) {\n        getOrCreateLayout().marginBottom = value;\n        return this;\n    }\n\n    public CompositeBuilder withMargins(final int width, final int height) {\n        return withMarginWidth(width).withMarginHeight(height);\n    }\n\n    public CompositeBuilder withoutMargins() {\n        return withMargins(0, 0);\n    }\n\n    public CompositeBuilder withHorizontalSpacing(final int value) {\n        getOrCreateLayout().horizontalSpacing = value;\n        return this;\n    }\n\n    public CompositeBuilder withVerticalSpacing(final int value) {\n        getOrCreateLayout().verticalSpacing = value;\n        return this;\n    }\n\n    public CompositeBuilder withChild(final WidgetBuilder value) {\n        if (value == null) {\n            throw new IllegalArgumentException(\"value cannot be null\");\n        }\n        children.add(value);\n        return this;\n    }\n\n    public CompositeBuilder withChildren(\n        final WidgetBuilder... values\n    ) {\n        children.addAll(Arrays.asList(values));\n        return this;\n    }\n\n    @Override\n    public Composite build(final Composite parent) {\n        Composite composite = new Composite(parent, getStyle());\n\n        if (layout != null) {\n            composite.setLayout(layout);\n        }\n\n        if (getLayoutData() != null) {\n            composite.setLayoutData(getLayoutData());\n        }\n\n        for (WidgetBuilder child : children) {\n            child.build(composite);\n        }\n\n        return composite;\n    }\n}<fim_middle>// class below has no smell\n"}