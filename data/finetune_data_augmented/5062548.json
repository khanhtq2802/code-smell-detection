{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.jena.iri.impl;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.jena.iri.impl.ViolationCodeInfo.InSpec ;\n\n\n<fim_suffix>public class Specification extends IRIExamples {\n    \n    static public final Map<String, Specification> iris = new HashMap<>();\n    static final public Map<String, Specification> schemes = new HashMap<>();\n    static final private Map<String, Specification> other = new HashMap<>();\n    static public final Map<String, Specification> all = new HashMap<>();\n\n    private final String uri;\n    private final String name;\n    private final String title;\n    private final String section;\n    private final String rfc;\n    \n    private final boolean isScheme;\n    private final boolean isIri;\n    \n    protected long violations[] = new long[Force.SIZE];\n    \n    public Specification(String name, \n            String type, \n            String rfc,\n            String uri, \n            String title, \n            String section, String[] bad, String[] good) {\n        super(bad,good);\n        this.rfc = rfc;\n        if (type.equals(\"iri\")) {\n            isScheme = false;\n            isIri = true;\n            iris.put(name,this);\n        } else if (type.equals(\"scheme\")) {\n            isScheme = true;\n            isIri = false;\n            schemes.put(name,this);\n        } else if (type.equals(\"other\")) {\n            isScheme = false;\n            isIri = false;\n            other.put(name,this);\n        } else\n            throw new IllegalArgumentException(\"type must be 'iri', 'other' or 'scheme'\");\n        this.uri = uri;\n        this.name = name;\n        this.section = section.equals(\"\")?null:section;\n        this.title = title;\n        if (all.containsKey(name))\n            throw new IllegalArgumentException(\"two specifications named: \"+name);\n        all.put(name,this);\n\n//        this.badExamples = bad;\n//        this.goodExamples = good;\n    }\n\n//    public String[] getBadExamples() {\n//        return badExamples;\n//    }\n//\n//    public String[] getGoodExamples() {\n//        return goodExamples;\n//    }\n//    final private String badExamples[];\n//    final private String goodExamples[];\n    \n    public static Specification get(String name) {\n        \n        Specification rslt = all.get(name);\n        if (rslt==null)\n            throw new IllegalArgumentException(\"Unknown spec: \"+name);\n        return rslt;\n    }\n\n    public String getUri() {\n        return uri;\n    }\n\n    public void add(InSpec spec, ViolationCodeInfo info) {\n        long mask = 1l << info.getCode();\n        int force = info.getForce();\n        for (int i=0; i<Force.SIZE;i++)\n            if ((force & (1<<i)) != 0) {\n                violations[i] |= mask;\n            }\n    }\n\n    public long getErrors(int i) {\n        return violations[i];\n    }\n\n    public String name() {\n        return name;\n    }\n\n    public void addDefinition(String string, String string2, String string3) {\n        throw new IllegalStateException(\"addDefinition() applies to SchemeSpecification, not Specification\");\n    }\n\n    public void setDNS(boolean b) {\n        throw new IllegalStateException(\"setDNS() applies to SchemeSpecification, not Specification\");\n        \n    }\n\n    public void port(int i) {\n        throw new IllegalStateException(\"port() applies to SchemeSpecification, not Specification\");\n    }\n    private int required;\n    private int prohibited;\n    public void prohibit(int component) {\n        prohibited |= 1<<component;\n    }\n\n    public void require(int component) {\n        required |= 1<<component;\n    }\n\n    public void setPattern(int component, String string) {\n        throw new IllegalStateException(\"setPattern() applies to SchemeSpecification, not Specification\");\n              \n    }\n\n    public void setReserved(int component, String string) {\n        throw new IllegalStateException(\"setReserved() applies to SchemeSpecification, not Specification\");\n               \n    }\n\n    public int getProhibited() {\n        return prohibited;\n    }\n\n    public int getRequired() {\n        return required;\n    }\n\n    public boolean isIRISpec() {\n        return this.isIri;\n    }\n\n    public boolean isSchemeSpec() {\n        return this.isScheme;\n    }\n\n\tpublic boolean applies(String scheme) {\n\t\treturn true;\n\t}\n\n}<fim_middle>// class below has no smell\n"}