{"text": "<fim_prefix>        final Long domainId = domainIdRecursiveListProject.first();\n        final Boolean isRecursive = domainIdRecursiveListProject.second();\n        final ListProjectResourcesCriteria listProjectResourcesCriteria = domainIdRecursiveListProject.third();\n        final SearchBuilder<SSHKeyPairVO> sb = _sshKeyPairDao.createSearchBuilder();\n        _accountMgr.buildACLSearchBuilder(sb, domainId, isRecursive, permittedAccounts, listProjectResourcesCriteria);\n        final Filter searchFilter = new Filter(SSHKeyPairVO.class, \"id\", false, cmd.getStartIndex(), cmd.getPageSizeVal());\n        final SearchCriteria<SSHKeyPairVO> sc = sb.create();\n        _accountMgr.buildACLSearchCriteria(sc, domainId, isRecursive, permittedAccounts, listProjectResourcesCriteria);\n        if (name != null) {\n            sc.addAnd(\"name\", SearchCriteria.Op.EQ, name);\n        }\n        if (fingerPrint != null) {\n            sc.addAnd(\"fingerprint\", SearchCriteria.Op.EQ, fingerPrint);\n        }\n        if (keyword != null) {\n            sc.addOr(\"name\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            sc.addOr(\"fingerprint\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n        }\n        final Pair<List<SSHKeyPairVO>, Integer> result = _sshKeyPairDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends SSHKeyPair>, Integer>(result.first(), result.second());\n    }\n    @Override\n    @ActionEvent(eventType = EventTypes.EVENT_REGISTER_SSH_KEYPAIR, eventDescription = \"registering ssh keypair\", async = true)\n    public SSHKeyPair registerSSHKeyPair(final RegisterSSHKeyPairCmd cmd) {\n        final Account owner = getOwner(cmd);\n        checkForKeyByName(cmd, owner);\n        checkForKeyByPublicKey(cmd, owner);\n        final String name = cmd.getName();\n        String key = cmd.getPublicKey();\n        final String publicKey = getPublicKeyFromKeyKeyMaterial(key);\n        final String fingerprint = getFingerprint(publicKey);\n        return createAndSaveSSHKeyPair(name, fingerprint, publicKey, null, owner);\n    }\n    /**\n     * @param cmd\n     * @param owner\n     * @throws InvalidParameterValueException\n     */\n    private void checkForKeyByPublicKey(final RegisterSSHKeyPairCmd cmd, final Account owner) throws InvalidParameterValueException {\n        final SSHKeyPairVO existingPair = _sshKeyPairDao.findByPublicKey(owner.getAccountId(), owner.getDomainId(), getPublicKeyFromKeyKeyMaterial(cmd.getPublicKey()));\n        if (existingPair != null) {\n            throw new InvalidParameterValueException(\"A key pair with key '\" + cmd.getPublicKey() + \"' already exists for this account.\");\n        }\n    }\n    /**\n     * @param cmd\n     * @param owner\n     * @throws InvalidParameterValueException\n     */\n    protected void checkForKeyByName(final RegisterSSHKeyPairCmd cmd, final Account owner) throws InvalidParameterValueException {\n        final SSHKeyPairVO existingPair = _sshKeyPairDao.findByName(owner.getAccountId(), owner.getDomainId(), cmd.getName());\n        if (existingPair != null) {\n            throw new InvalidParameterValueException(\"A key pair with name '\" + cmd.getName() + \"' already exists for this account.\");\n        }\n    }\n    /**\n     * @param publicKey\n     * @return\n     */\n    private String getFingerprint(final String publicKey) {\n        final String fingerprint = SSHKeysHelper.getPublicKeyFingerprint(publicKey);\n        return fingerprint;\n    }\n    /**\n     * @param key\n     * @return\n     * @throws InvalidParameterValueException\n     */\n    protected String getPublicKeyFromKeyKeyMaterial(final String key) throws InvalidParameterValueException {\n        final String publicKey = SSHKeysHelper.getPublicKeyFromKeyMaterial(key);\n        if (publicKey == null) {\n            throw new InvalidParameterValueException(\"Public key is invalid\");\n        }\n        return publicKey;\n    }\n    /**\n     * @param cmd\n     * @return\n     */\n    protected Account getOwner(final RegisterSSHKeyPairCmd cmd) {\n        final Account caller = getCaller();\n        final Account owner = _accountMgr.finalizeOwner(caller, cmd.getAccountName(), cmd.getDomainId(), cmd.getProjectId());\n        return owner;\n    }\n    /**\n     * @return\n     */\n    protected Account getCaller() {\n        final Account caller = CallContext.current().getCallingAccount();\n        return caller;\n    }\n    private SSHKeyPair createAndSaveSSHKeyPair(final String name, final String fingerprint, final String publicKey, final String privateKey, final Account owner) {\n        final SSHKeyPairVO newPair = new SSHKeyPairVO();\n        newPair.setAccountId(owner.getAccountId());\n        newPair.setDomainId(owner.getDomainId());\n        newPair.setName(name);\n        newPair.setFingerprint(fingerprint);\n        newPair.setPublicKey(publicKey);\n        newPair.setPrivateKey(privateKey); // transient; not saved.\n        _sshKeyPairDao.persist(newPair);\n        return newPair;\n    }\n<fim_suffix>    @Override\n    public String getVMPassword(final GetVMPasswordCmd cmd) {\n        final Account caller = getCaller();\n        final UserVmVO vm = _userVmDao.findById(cmd.getId());\n        if (vm == null) {\n            final InvalidParameterValueException ex = new InvalidParameterValueException(\"No VM with specified id found.\");\n            ex.addProxyObject(cmd.getId().toString(), \"vmId\");\n            throw ex;\n        }\n        // make permission check\n        _accountMgr.checkAccess(caller, null, true, vm);\n        _userVmDao.loadDetails(vm);\n        final String password = vm.getDetail(\"Encrypted.Password\");\n        if (password == null || password.equals(\"\")) {\n            final InvalidParameterValueException ex = new InvalidParameterValueException(\n                    \"No password for VM with specified id found. \" + \"If VM is created from password enabled template and SSH keypair is assigned to VM then only password can be retrieved.\");\n            ex.addProxyObject(vm.getUuid(), \"vmId\");\n            throw ex;\n        }\n        return password;\n    }<fim_middle>// function below is long method\n"}