{"text": "<fim_prefix>\n<fim_suffix>public final class Files {\n    // buffer size used for reading and writing\n    private static final int BUFFER_SIZE = 8192;\n    private Files() { }\n    /**\n     * Returns the {@code FileSystemProvider} to delegate to.\n     */\n    private static FileSystemProvider provider(Path path) {\n        return path.getFileSystem().provider();\n    }\n    /**\n     * Convert a Closeable to a Runnable by converting checked IOException\n     * to UncheckedIOException\n     */\n    private static Runnable asUncheckedRunnable(Closeable c) {\n        return () -> {\n            try {\n                c.close();\n            } catch (IOException e) {\n                throw new UncheckedIOException(e);\n            }\n        };\n    }\n    // -- File contents --\n    /**\n     * Opens a file, returning an input stream to read from the file. The stream\n     * will not be buffered, and is not required to support the {@link\n     * InputStream#mark mark} or {@link InputStream#reset reset} methods. The\n     * stream will be safe for access by multiple concurrent threads. Reading\n     * commences at the beginning of the file. Whether the returned stream is\n     * <i>asynchronously closeable</i> and/or <i>interruptible</i> is highly\n     * file system provider specific and therefore not specified.\n     *\n     * <p> The {@code options} parameter determines how the file is opened.\n     * If no options are present then it is equivalent to opening the file with\n     * the {@link StandardOpenOption#READ READ} option. In addition to the {@code\n     * READ} option, an implementation may also support additional implementation\n     * specific options.\n     *\n     * @param   path\n     *          the path to the file to open\n     * @param   options\n     *          options specifying how the file is opened\n     *\n     * @return  a new input stream\n     *\n     * @throws  IllegalArgumentException\n     *          if an invalid combination of options is specified\n     * @throws  UnsupportedOperationException\n     *          if an unsupported option is specified\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    public static InputStream newInputStream(Path path, OpenOption... options)\n        throws IOException\n    {\n        return provider(path).newInputStream(path, options);\n    }\n    /**\n     * Opens or creates a file, returning an output stream that may be used to\n     * write bytes to the file. The resulting stream will not be buffered. The\n     * stream will be safe for access by multiple concurrent threads. Whether\n     * the returned stream is <i>asynchronously closeable</i> and/or\n     * <i>interruptible</i> is highly file system provider specific and\n     * therefore not specified.\n     *\n     * <p> This method opens or creates a file in exactly the manner specified\n     * by the {@link #newByteChannel(Path,Set,FileAttribute[]) newByteChannel}\n     * method with the exception that the {@link StandardOpenOption#READ READ}\n     * option may not be present in the array of options. If no options are\n     * present then this method works as if the {@link StandardOpenOption#CREATE\n     * CREATE}, {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING},\n     * and {@link StandardOpenOption#WRITE WRITE} options are present. In other\n     * words, it opens the file for writing, creating the file if it doesn't\n     * exist, or initially truncating an existing {@link #isRegularFile\n     * regular-file} to a size of {@code 0} if it exists.\n     *\n     * <p> <b>Usage Examples:</b>\n     * <pre>\n     *     Path path = ...\n     *\n     *     // truncate and overwrite an existing file, or create the file if\n     *     // it doesn't initially exist\n     *     OutputStream out = Files.newOutputStream(path);\n     *\n     *     // append to an existing file, fail if the file does not exist\n     *     out = Files.newOutputStream(path, APPEND);\n     *\n     *     // append to an existing file, create file if it doesn't initially exist\n     *     out = Files.newOutputStream(path, CREATE, APPEND);\n     *\n     *     // always create new file, failing if it already exists\n     *     out = Files.newOutputStream(path, CREATE_NEW);\n     * </pre>\n     *\n     * @param   path\n     *          the path to the file to open or create\n     * @param   options\n     *          options specifying how the file is opened\n     *\n     * @return  a new output stream\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code options} contains an invalid combination of options\n     * @throws  UnsupportedOperationException\n     *          if an unsupported option is specified\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to the file. The {@link\n     *          SecurityManager#checkDelete(String) checkDelete} method is\n     *          invoked to check delete access if the file is opened with the\n     *          {@code DELETE_ON_CLOSE} option.\n     */\n    public static OutputStream newOutputStream(Path path, OpenOption... options)\n        throws IOException\n    {\n        return provider(path).newOutputStream(path, options);\n    }\n    /**\n     * Opens or creates a file, returning a seekable byte channel to access the\n     * file.\n     *\n     * <p> The {@code options} parameter determines how the file is opened.\n     * The {@link StandardOpenOption#READ READ} and {@link\n     * StandardOpenOption#WRITE WRITE} options determine if the file should be\n     * opened for reading and/or writing. If neither option (or the {@link\n     * StandardOpenOption#APPEND APPEND} option) is present then the file is\n     * opened for reading. By default reading or writing commence at the\n     * beginning of the file.\n     *\n     * <p> In the addition to {@code READ} and {@code WRITE}, the following\n     * options may be present:\n     *\n     * <table class=\"striped\">\n     * <caption style=\"display:none\">Options</caption>\n     * <thead>\n     * <tr> <th scope=\"col\">Option</th> <th scope=\"col\">Description</th> </tr>\n     * </thead>\n     * <tbody>\n     * <tr>\n     *   <th scope=\"row\"> {@link StandardOpenOption#APPEND APPEND} </th>\n     *   <td> If this option is present then the file is opened for writing and\n     *     each invocation of the channel's {@code write} method first advances\n     *     the position to the end of the file and then writes the requested\n     *     data. Whether the advancement of the position and the writing of the\n     *     data are done in a single atomic operation is system-dependent and\n     *     therefore unspecified. This option may not be used in conjunction\n     *     with the {@code READ} or {@code TRUNCATE_EXISTING} options. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\"> {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING} </th>\n     *   <td> If this option is present then the existing file is truncated to\n     *   a size of 0 bytes. This option is ignored when the file is opened only\n     *   for reading. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\"> {@link StandardOpenOption#CREATE_NEW CREATE_NEW} </th>\n     *   <td> If this option is present then a new file is created, failing if\n     *   the file already exists or is a symbolic link. When creating a file the\n     *   check for the existence of the file and the creation of the file if it\n     *   does not exist is atomic with respect to other file system operations.\n     *   This option is ignored when the file is opened only for reading. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\" > {@link StandardOpenOption#CREATE CREATE} </th>\n     *   <td> If this option is present then an existing file is opened if it\n     *   exists, otherwise a new file is created. This option is ignored if the\n     *   {@code CREATE_NEW} option is also present or the file is opened only\n     *   for reading. </td>\n     * </tr>\n     * <tr><fim_middle>// class below is blob\n"}