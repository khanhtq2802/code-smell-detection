{"text": "<fim_prefix>import org.osgi.xmlns.rsa.v1_0.ObjectFactory;\nimport org.osgi.xmlns.rsa.v1_0.PropertyType;\nimport org.osgi.xmlns.rsa.v1_0.ValueType;\nimport org.osgi.xmlns.rsa.v1_0.XmlType;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nclass PropertiesMapper {\n    private static final Logger LOG = LoggerFactory.getLogger(PropertiesMapper.class);\n    public Map<String, Object> toProps(List<PropertyType> properties) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        for (PropertyType prop : properties) {\n            map.put(prop.getName(), getValue(prop));\n        }\n        return map;\n    }\n    private Object getValue(PropertyType prop) {\n        Object value = null;\n        String type = getTypeName(prop);\n        Object content = getFirstNonText(prop.getContent());\n        if (content instanceof JAXBElement<?>) {\n            JAXBElement<?> el = (JAXBElement<?>)content;\n            if (el.getDeclaredType() == ArrayType.class) {\n                String elName = el.getName().getLocalPart();\n                ArrayType inValue = (ArrayType)el.getValue();\n                if (\"array\".equals(elName)) {\n                    value = getArray(inValue, type);\n                } else if (\"set\".equals(elName)) {\n                    value = handleCollection(inValue, new HashSet<Object>(), type);\n                } else if (\"list\".equals(elName)) {\n                    value = handleCollection(inValue, new ArrayList<Object>(), type);\n                }\n            } else if (el.getDeclaredType() == XmlType.class) {\n                value = readXML((XmlType)el.getValue(), type);\n            }\n        } else {\n            if (prop.getValue() != null) {\n                value = instantiate(type, prop.getValue());\n            } else {\n                if (prop.getContent().size() > 0) {\n                    value = instantiate(type, prop.getContent().get(0).toString());\n                }\n            }\n        }\n        return value;\n    }\n    private Object getFirstNonText(List<Serializable> contentList) {\n        for (Object content : contentList) {\n            if (content instanceof JAXBElement<?>) {\n                return content;\n            }\n        }\n        return null;\n    }\n    private static String getTypeName(PropertyType prop) {\n        String type = prop.getValueType();\n        return type == null ? \"String\" : type;\n    }\n    private Object getArray(ArrayType arrayEl, String type) {\n        List<ValueType> values = arrayEl.getValue();\n        Class<?> cls = null;\n        if (\"long\".equals(type)) {\n            cls = long.class;\n        } else if (\"double\".equals(type)) {\n            cls = double.class;\n        } else if (\"float\".equals(type)) {\n            cls = float.class;\n        } else if (\"int\".equals(type)) {\n            cls = int.class;\n        } else if (\"byte\".equals(type)) {\n            cls = byte.class;\n        } else if (\"boolean\".equals(type)) {\n            cls = boolean.class;\n        } else if (\"short\".equals(type)) {\n            cls = short.class;\n        }\n        try {\n            if (cls == null) {\n                cls = ClassLoader.getSystemClassLoader().loadClass(\"java.lang.\" + type);\n            }\n            Object array = Array.newInstance(cls, values.size());\n            for (int i = 0; i < values.size(); i++) {\n                Object val = getValue(values.get(i), type);\n                Array.set(array, i, val);\n            }\n            return array;\n        } catch (Exception e) {\n            LOG.warn(\"Could not create array for Endpoint Description\", e);\n            return null;\n        }\n    }\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    private Collection handleCollection(ArrayType el, Collection value, String type) {\n        List<ValueType> values = el.getValue();\n        for (ValueType val : values) {\n            Object obj = getValue(val, type);\n            value.add(obj);\n        }\n        return value;\n    }\n    private Object getValue(ValueType value, String type) {\n        if (value.getContent().size() == 1 && value.getContent().get(0) instanceof String) {\n            return handleValue((String)value.getContent().get(0), type);\n        }\n        JAXBElement<?> valueContent = (JAXBElement<?>)getFirstNonText(value.getContent());\n        if (valueContent.getDeclaredType() == XmlType.class) {\n            return readXML((XmlType)valueContent.getValue(), type);\n        }\n        return \"\";\n    }\n    private String readXML(XmlType el, String type) {\n        if (el == null) {\n            return null;\n        }\n        if (!\"String\".equals(type)) {\n            LOG.warn(\"Embedded XML must be of type String, found: \" + type);\n            return null;\n        }\n        Node xmlContent = (Node)el.getAny();\n        xmlContent.normalize();\n        try {\n            TransformerFactory transFactory = TransformerFactory.newInstance();\n            Transformer transformer = transFactory.newTransformer();\n            StringWriter buffer = new StringWriter();\n            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n            transformer.transform(new DOMSource(xmlContent), new StreamResult(buffer));\n            return buffer.toString();\n        } catch (Exception e) {\n            return \"\";\n        }\n    }\n    private static Object handleValue(String val, String type) {\n        return instantiate(type, val);\n    }\n    private static Object instantiate(String type, String value) {\n        if (\"String\".equals(type)) {\n            return value;\n        }\n        value = value.trim();\n        String boxedType = null;\n        if (\"long\".equals(type)) {\n            boxedType = \"Long\";\n        } else if (\"double\".equals(type)) {\n            boxedType = \"Double\";\n        } else if (\"float\".equals(type)) {\n            boxedType = \"Float\";\n        } else if (\"int\".equals(type)) {\n            boxedType = \"Integer\";\n        } else if (\"byte\".equals(type)) {\n            boxedType = \"Byte\";\n        } else if (\"char\".equals(type)) {\n            boxedType = \"Character\";\n        } else if (\"boolean\".equals(type)) {\n            boxedType = \"Boolean\";\n        } else if (\"short\".equals(type)) {\n            boxedType = \"Short\";\n        }\n        if (boxedType == null) {\n            boxedType = type;\n        }\n        String javaType = \"java.lang.\" + boxedType;\n        try {\n            if (\"Character\".equals(boxedType)) {\n                return new Character(value.charAt(0));\n            } else {\n                Class<?> cls = ClassLoader.getSystemClassLoader().loadClass(javaType);\n                Constructor<?> ctor = cls.getConstructor(String.class);\n                return ctor.newInstance(value);\n            }\n        } catch (Exception e) {\n            LOG.warn(\"Could not create Endpoint Property of type \" + type + \" and value \" + value);\n            return null;\n        }\n    }\n<fim_suffix>    public List<PropertyType> fromProps(Map<String, Object> m) {\n        List<PropertyType> props = new ArrayList<PropertyType>();\n        for (Map.Entry<String, Object> entry : m.entrySet()) {\n            String key = entry.getKey();\n            Object val = entry.getValue();\n            PropertyType propEl = new PropertyType();\n            propEl.setName(key);\n            ObjectFactory factory = new ObjectFactory();\n            if (val.getClass().isArray()) {\n                ArrayType arrayEl = new ArrayType();\n                propEl.getContent().add(factory.createArray(arrayEl));\n                for (Object o : normalizeArray(val)) {\n                    setValueType(propEl, o);\n                    ValueType valueType =  new ValueType();\n                    valueType.getContent().add(o.toString());\n                    arrayEl.getValue().add(valueType);\n                }\n            } else if (val instanceof List) {\n                ArrayType listEl = new ArrayType();\n                propEl.getContent().add(factory.createList(listEl));\n                handleCollectionValue((Collection<?>) val, propEl, listEl);\n            } else if (val instanceof Set) {\n                ArrayType setEl = new ArrayType();\n                propEl.getContent().add(factory.createSet(setEl));\n                handleCollectionValue((Collection<?>) val, propEl, setEl);\n            } else if (val instanceof String\n                    || val instanceof Character\n                    || val instanceof Boolean\n                    || val instanceof Byte) {\n                setValueType(propEl, val);\n                propEl.setValue(val.toString());\n            } else if (val instanceof Long\n                    || val instanceof Double\n                    || val instanceof Float\n                    || val instanceof Integer\n                    || val instanceof Short) {\n                // various numbers..   maybe \"val instanceof Number\"?\n                setValueType(propEl, val);\n                propEl.setValue(val.toString());\n            } else {\n                // Don't add this property as the value type is not supported\n                continue;\n            }\n            props.add(propEl);\n        }\n        return props;\n    }<fim_middle>// function below is long method\n"}