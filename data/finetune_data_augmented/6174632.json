{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.ide.ext.git.client.compare;\n\nimport org.eclipse.che.ide.api.resources.Project;\nimport org.eclipse.che.ide.ext.git.client.compare.FileStatus.Status;\n\n/**\n * Describes changed in any way project files. Supports adding and removing items dynamically.\n *\n * @author Mykola Morhun\n */\n<fim_suffix>public class MutableAlteredFiles extends AlteredFiles {\n\n  /**\n   * Parses raw git diff string and creates advanced representation.\n   *\n   * @param project the project under diff operation\n   * @param diff plain result of git diff operation\n   */\n  public MutableAlteredFiles(Project project, String diff) {\n    super(project, diff);\n  }\n\n  /**\n   * Creates mutable altered files list based on changes from another project.\n   *\n   * @param project the project under diff operation\n   * @param alteredFiles changes from another project\n   */\n  public MutableAlteredFiles(Project project, AlteredFiles alteredFiles) {\n    super(project, \"\");\n    this.alteredFilesStatuses.putAll(alteredFiles.alteredFilesStatuses);\n    this.alteredFilesList.addAll(alteredFiles.alteredFilesList);\n  }\n\n  /**\n   * Creates an empty list of altered files.\n   *\n   * @param project the project under diff operation\n   */\n  public MutableAlteredFiles(Project project) {\n    super(project, \"\");\n  }\n\n  /**\n   * Adds or updates a file in altered file list. If given file is already exists does nothing.\n   *\n   * @param file full path to file and its name relatively to project root\n   * @param status git status of the file\n   * @return true if file was added or updated and false if the file is already exists in this list\n   */\n  public boolean addFile(String file, Status status) {\n    if (status.equals(alteredFilesStatuses.get(file))) {\n      return false;\n    }\n\n    if (alteredFilesStatuses.put(file, status) == null) {\n      // it's not a status change, new file was added\n      alteredFilesList.add(file);\n    }\n    return true;\n  }\n\n  /**\n   * Removes given file from the altered files list. If given file isn't present does nothing.\n   *\n   * @param file full path to file and its name relatively to project root\n   * @return true if the file was deleted and false otherwise\n   */\n  public boolean removeFile(String file) {\n    alteredFilesStatuses.remove(file);\n    return alteredFilesList.remove(file);\n  }\n}<fim_middle>// class below has no smell\n"}