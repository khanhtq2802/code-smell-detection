{"text": "<fim_prefix>\t */\n\tpublic static ICompilationUnit getCompilationUnit(IJavaElement javaElement){\n\t\tif (javaElement instanceof ICompilationUnit) {\n\t\t\treturn (ICompilationUnit) javaElement;\n\t\t}\n\t\treturn (ICompilationUnit) javaElement.getAncestor(IJavaElement.COMPILATION_UNIT);\n\t}\n\t/*\n\t * some of the returned elements may be <code>null</code>.\n\t */\n\tpublic static ICompilationUnit[] getCompilationUnits(IJavaElement[] javaElements){\n\t\tICompilationUnit[] result= new ICompilationUnit[javaElements.length];\n\t\tfor (int i= 0; i < javaElements.length; i++) {\n\t\t\tresult[i]= getCompilationUnit(javaElements[i]);\n\t\t}\n\t\treturn result;\n\t}\n\tpublic static IResource getResource(IJavaElement element){\n\t\tif (element instanceof ICompilationUnit) {\n\t\t\treturn ((ICompilationUnit)element).getPrimary().getResource();\n\t\t} else {\n\t\t\treturn element.getResource();\n\t\t}\n\t}\n\tpublic static IResource[] getResources(IJavaElement[] elements) {\n\t\tIResource[] result= new IResource[elements.length];\n\t\tfor (int i= 0; i < elements.length; i++) {\n\t\t\tresult[i]= ReorgUtils.getResource(elements[i]);\n\t\t}\n\t\treturn result;\n\t}\n\tpublic static String getName(IResource resource) {\n\t\tString resourceLabel= BasicElementLabels.getResourceName(resource);\n\t\tswitch (resource.getType()){\n\t\t\tcase IResource.FILE:\n\t\t\t\treturn Messages.format(RefactoringCoreMessages.ReorgUtils_0, resourceLabel);\n\t\t\tcase IResource.FOLDER:\n\t\t\t\treturn Messages.format(RefactoringCoreMessages.ReorgUtils_1, resourceLabel);\n\t\t\tcase IResource.PROJECT:\n\t\t\t\treturn Messages.format(RefactoringCoreMessages.ReorgUtils_2, resourceLabel);\n\t\t\tdefault:\n\t\t\t\tAssert.isTrue(false);\n\t\t\t\treturn null;\n\t\t}\n\t}\n\tpublic static String getName(IJavaElement element) throws JavaModelException {\n\t\tString pattern= createNamePattern(element);\n\t\tString arg= JavaElementLabels.getElementLabel(element, JavaElementLabels.ALL_DEFAULT);\n\t\treturn Messages.format(pattern, arg);\n\t}\n\tprivate static String createNamePattern(IJavaElement element) throws JavaModelException {\n\t\tswitch(element.getElementType()){\n\t\t\tcase IJavaElement.CLASS_FILE:\n\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_3;\n\t\t\tcase IJavaElement.COMPILATION_UNIT:\n\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_4;\n\t\t\tcase IJavaElement.FIELD:\n\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_5;\n\t\t\tcase IJavaElement.IMPORT_CONTAINER:\n\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_6;\n\t\t\tcase IJavaElement.IMPORT_DECLARATION:\n\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_7;\n\t\t\tcase IJavaElement.INITIALIZER:\n\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_8;\n\t\t\tcase IJavaElement.JAVA_PROJECT:\n\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_9;\n\t\t\tcase IJavaElement.METHOD:\n\t\t\t\tif (((IMethod)element).isConstructor()) {\n\t\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_10;\n\t\t\t\t} else {\n\t\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_11;\n\t\t\t\t}\n\t\t\tcase IJavaElement.PACKAGE_DECLARATION:\n\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_12;\n\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\n\t\t\t\tif (JavaElementUtil.isDefaultPackage(element)) {\n\t\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_13;\n\t\t\t\t} else {\n\t\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_14;\n\t\t\t\t}\n\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\n\t\t\t\tif (((IPackageFragmentRoot) element).isArchive()) {\n\t\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_21;\n\t\t\t\t}\n\t\t\t\tif (isSourceFolder(element)) {\n\t\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_15;\n\t\t\t\t}\n\t\t\t\tif (isClassFolder(element)) {\n\t\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_16;\n\t\t\t\t}\n\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_17;\n\t\t\tcase IJavaElement.TYPE:\n\t\t\t\tIType type= (IType)element;\n\t\t\t\tif (type.isAnonymous()) {\n\t\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_20;\n\t\t\t\t}\n\t\t\t\treturn RefactoringCoreMessages.ReorgUtils_18;\n\t\t\tdefault:\n\t\t\t\tAssert.isTrue(false);\n\t\t\t\treturn null;\n\t\t}\n\t}\n\tpublic static IResource[] getResources(List<?> elements) {\n\t\tList<IResource> resources= new ArrayList<>(elements.size());\n\t\tfor (Iterator<?> iter= elements.iterator(); iter.hasNext();) {\n\t\t\tObject element= iter.next();\n\t\t\tif (element instanceof IResource) {\n\t\t\t\tresources.add((IResource) element);\n\t\t\t}\n\t\t}\n\t\treturn resources.toArray(new IResource[resources.size()]);\n\t}\n\tpublic static IJavaElement[] getJavaElements(List<?> elements) {\n\t\tList<IJavaElement> resources= new ArrayList<>(elements.size());\n\t\tfor (Iterator<?> iter= elements.iterator(); iter.hasNext();) {\n\t\t\tObject element= iter.next();\n\t\t\tif (element instanceof IJavaElement) {\n\t\t\t\tresources.add((IJavaElement) element);\n\t\t\t}\n\t\t}\n\t\treturn resources.toArray(new IJavaElement[resources.size()]);\n\t}\n\t/**\n\t * Returns the jar entry resources from the list of elements.\n\t *\n\t * @param elements the list of elements\n\t * @return the array of jar entry resources\n\t * @since 3.6\n\t */\n\tpublic static IJarEntryResource[] getJarEntryResources(List<?> elements) {\n\t\tList<IJarEntryResource> resources= new ArrayList<>(elements.size());\n\t\tfor (Iterator<?> iter= elements.iterator(); iter.hasNext();) {\n\t\t\tObject element= iter.next();\n\t\t\tif (element instanceof IJarEntryResource) {\n\t\t\t\tresources.add((IJarEntryResource) element);\n\t\t\t}\n\t\t}\n\t\treturn resources.toArray(new IJarEntryResource[resources.size()]);\n\t}\n\t//\tpublic static IWorkingSet[] getWorkingSets(List<?> elements) {\n\t//\t\tList<IWorkingSet> result= new ArrayList<>(1);\n\t//\t\tfor (Iterator<?> iter= elements.iterator(); iter.hasNext();) {\n\t//\t\t\tObject element= iter.next();\n\t//\t\t\tif (element instanceof IWorkingSet) {\n\t//\t\t\t\tresult.add((IWorkingSet) element);\n\t//\t\t\t}\n\t//\t\t}\n\t//\t\treturn result.toArray(new IWorkingSet[result.size()]);\n\t//\t}\n\tpublic static boolean hasSourceAvailable(IMember member) throws JavaModelException{\n\t\treturn ! member.isBinary() ||\n\t\t\t\t(member.getSourceRange() != null && ! fgUnknownRange.equals(member.getSourceRange()));\n\t}\n\tpublic static IResource[] setMinus(IResource[] setToRemoveFrom, IResource[] elementsToRemove) {\n\t\tSet<IResource> setMinus= new HashSet<>(setToRemoveFrom.length - setToRemoveFrom.length);\n\t\tsetMinus.addAll(Arrays.asList(setToRemoveFrom));\n\t\tsetMinus.removeAll(Arrays.asList(elementsToRemove));\n\t\treturn setMinus.toArray(new IResource[setMinus.size()]);\n\t}\n<fim_suffix>\tpublic static IJavaElement[] setMinus(IJavaElement[] setToRemoveFrom, IJavaElement[] elementsToRemove) {\n\t\tSet<IJavaElement> setMinus= new HashSet<>(setToRemoveFrom.length - setToRemoveFrom.length);\n\t\tsetMinus.addAll(Arrays.asList(setToRemoveFrom));\n\t\tsetMinus.removeAll(Arrays.asList(elementsToRemove));\n\t\treturn setMinus.toArray(new IJavaElement[setMinus.size()]);\n\t}<fim_middle>// function below has no smell\n"}