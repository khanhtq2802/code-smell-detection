{"text": "<fim_prefix>                    Object end = request.getAttribute(\n                            Globals.SENDFILE_FILE_END_ATTR);\n                    if (end instanceof Long) {\n                        length = ((Long) end).longValue() -\n                                ((Long) start).longValue();\n                    }\n                }\n            }\n            if (length <= 0 && conversion) {\n                buf.append('-');\n            } else {\n                buf.append(Long.toString(length));\n            }\n        }\n    }\n    /**\n     * write request method (GET, POST, etc.) - %m\n     */\n    protected static class MethodElement implements AccessLogElement {\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request,\n                Response response, long time) {\n            if (request != null) {\n                buf.append(request.getMethod());\n            }\n        }\n    }\n    /**\n     * write time taken to process the request - %D, %T\n     */\n    protected static class ElapsedTimeElement implements AccessLogElement {\n        private final boolean millis;\n        /**\n         * @param millis <code>true</code>, write time in millis - %D,\n         * if <code>false</code>, write time in seconds - %T\n         */\n        public ElapsedTimeElement(boolean millis) {\n            this.millis = millis;\n        }\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request,\n                Response response, long time) {\n            if (millis) {\n                buf.append(Long.toString(time));\n            } else {\n                // second\n                buf.append(Long.toString(time / 1000));\n                buf.append('.');\n                int remains = (int) (time % 1000);\n                buf.append(Long.toString(remains / 100));\n                remains = remains % 100;\n                buf.append(Long.toString(remains / 10));\n                buf.append(Long.toString(remains % 10));\n            }\n        }\n    }\n    /**\n     * write time until first byte is written (commit time) in millis - %F\n     */\n    protected static class FirstByteTimeElement implements AccessLogElement {\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request, Response response, long time) {\n            long commitTime = response.getCoyoteResponse().getCommitTime();\n            if (commitTime == -1) {\n                buf.append('-');\n            } else {\n                long delta = commitTime - request.getCoyoteRequest().getStartTime();\n                buf.append(Long.toString(delta));\n            }\n        }\n    }\n    /**\n     * write Query string (prepended with a '?' if it exists) - %q\n     */\n    protected static class QueryElement implements AccessLogElement {\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request,\n                Response response, long time) {\n            String query = null;\n            if (request != null) {\n                query = request.getQueryString();\n            }\n            if (query != null) {\n                buf.append('?');\n                buf.append(query);\n            }\n        }\n    }\n    /**\n     * write user session ID - %S\n     */\n    protected static class SessionIdElement implements AccessLogElement {\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request,\n                Response response, long time) {\n            if (request == null) {\n                buf.append('-');\n            } else {\n                Session session = request.getSessionInternal(false);\n                if (session == null) {\n                    buf.append('-');\n                } else {\n                    buf.append(session.getIdInternal());\n                }\n            }\n        }\n    }\n    /**\n     * write requested URL path - %U\n     */\n    protected static class RequestURIElement implements AccessLogElement {\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request,\n                Response response, long time) {\n            if (request != null) {\n                buf.append(request.getRequestURI());\n            } else {\n                buf.append('-');\n            }\n        }\n    }\n    /**\n     * write local server name - %v\n     */\n    protected class LocalServerNameElement implements AccessLogElement {\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request,\n                Response response, long time) {\n            if (ipv6Canonical) {\n                buf.append(IPv6Utils.canonize(request.getServerName()));\n            } else {\n                buf.append(request.getServerName());\n            }\n        }\n    }\n    /**\n     * write any string\n     */\n    protected static class StringElement implements AccessLogElement {\n        private final String str;\n        public StringElement(String str) {\n            this.str = str;\n        }\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request,\n                Response response, long time) {\n            buf.append(str);\n        }\n    }\n    /**\n     * write incoming headers - %{xxx}i\n     */\n    protected static class HeaderElement implements AccessLogElement {\n        private final String header;\n        public HeaderElement(String header) {\n            this.header = header;\n        }\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request,\n                Response response, long time) {\n            Enumeration<String> iter = request.getHeaders(header);\n            if (iter.hasMoreElements()) {\n                buf.append(iter.nextElement());\n                while (iter.hasMoreElements()) {\n                    buf.append(',').append(iter.nextElement());\n                }\n                return;\n            }\n            buf.append('-');\n        }\n    }\n    /**\n     * write a specific cookie - %{xxx}c\n     */\n    protected static class CookieElement implements AccessLogElement {\n        private final String header;\n        public CookieElement(String header) {\n            this.header = header;\n        }\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request,\n                Response response, long time) {\n            String value = \"-\";\n            Cookie[] c = request.getCookies();\n            if (c != null) {\n                for (int i = 0; i < c.length; i++) {\n                    if (header.equals(c[i].getName())) {\n                        value = c[i].getValue();\n                        break;\n                    }\n                }\n            }\n            buf.append(value);\n        }\n    }\n    /**\n     * write a specific response header - %{xxx}o\n     */\n    protected static class ResponseHeaderElement implements AccessLogElement {\n        private final String header;\n        public ResponseHeaderElement(String header) {\n            this.header = header;\n        }\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request,\n                Response response, long time) {\n            if (null != response) {\n                Iterator<String> iter = response.getHeaders(header).iterator();\n                if (iter.hasNext()) {\n                    buf.append(iter.next());\n                    while (iter.hasNext()) {\n                        buf.append(',').append(iter.next());\n                    }\n                    return;\n                }\n            }\n            buf.append('-');\n        }\n    }\n    /**\n     * write an attribute in the ServletRequest - %{xxx}r\n     */\n    protected static class RequestAttributeElement implements AccessLogElement {\n        private final String header;\n        public RequestAttributeElement(String header) {\n            this.header = header;\n        }\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request,\n                Response response, long time) {\n            Object value = null;\n            if (request != null) {\n                value = request.getAttribute(header);\n            } else {\n                value = \"??\";\n            }\n            if (value != null) {\n                if (value instanceof String) {\n                    buf.append((String) value);\n                } else {\n                    buf.append(value.toString());\n                }\n            } else {\n                buf.append('-');\n            }\n        }\n    }\n    /**\n     * write an attribute in the HttpSession - %{xxx}s\n     */\n<fim_suffix>    protected static class SessionAttributeElement implements AccessLogElement {\n        private final String header;\n        public SessionAttributeElement(String header) {\n            this.header = header;\n        }\n        @Override\n        public void addElement(CharArrayWriter buf, Date date, Request request,\n                Response response, long time) {\n            Object value = null;\n            if (null != request) {\n                HttpSession sess = request.getSession(false);\n                if (null != sess) {\n                    value = sess.getAttribute(header);\n                }\n            } else {\n                value = \"??\";\n            }\n            if (value != null) {\n                if (value instanceof String) {\n                    buf.append((String) value);\n                } else {\n                    buf.append(value.toString());\n                }\n            } else {\n                buf.append('-');\n            }\n        }\n    }<fim_middle>// class below has no smell\n"}