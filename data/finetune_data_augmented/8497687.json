{"text": "<fim_prefix>// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\npackage com.cloud.network;\n\nimport java.util.List;\n\nimport com.cloud.agent.api.to.LoadBalancerTO;\nimport com.cloud.exception.InsufficientCapacityException;\nimport com.cloud.exception.ResourceUnavailableException;\nimport com.cloud.host.Host;\nimport com.cloud.network.dao.ExternalLoadBalancerDeviceVO;\nimport com.cloud.network.lb.LoadBalancingRule;\nimport com.cloud.resource.ServerResource;\nimport com.cloud.utils.component.Manager;\n\n/* ExternalLoadBalancerDeviceManager provides a abstract implementation for managing a external load balancer in device agnostic manner.\n * Device specific managers for external load balancers (like F5 and Netscaler) should be implemented as pluggable service extending\n * ExternalLoadBalancerDeviceManager implementation. An implementation of device specific manager can override default behaviour if needed.\n */\n\n<fim_suffix>public interface ExternalLoadBalancerDeviceManager extends Manager {\n\n    public static final int DEFAULT_LOAD_BALANCER_CAPACITY = 50;\n\n    /**\n     * adds a load balancer device in to a physical network\n     * @param physicalNetworkId physical network id of the network in to which device to be added\n     * @param url url encoding device IP and device configuration parameter\n     * @param username username\n     * @param password password\n     * @param deviceName device name\n     * @param server resource that will handle the commands specific to this device\n     * @return Host object for the device added\n     */\n    public ExternalLoadBalancerDeviceVO addExternalLoadBalancer(long physicalNetworkId, String url, String username, String password, String deviceName,\n        ServerResource resource, boolean gslbProvider, boolean exclusiveGslbProvider, String gslbSitePublicIp, String gslbSitePrivateIp);\n\n    /**\n     * deletes load balancer device added in to a physical network\n     * @param hostId\n     * @return true if device successfully deleted\n     */\n    public boolean deleteExternalLoadBalancer(long hostId);\n\n    /**\n     * list external load balancers of given device name type added in to a physical network\n     * @param physicalNetworkId\n     * @param deviceName\n     * @return list of host objects for the external load balancers added in to the physical network\n     */\n    public List<Host> listExternalLoadBalancers(long physicalNetworkId, String deviceName);\n\n    /**\n     * finds a suitable load balancer device which can be used by this network\n     * @param network guest network\n     * @param dedicatedLb true if a dedicated load balancer is needed for this guest network\n     * @return ExternalLoadBalancerDeviceVO corresponding to the suitable device\n     * @throws InsufficientCapacityException\n     */\n    public ExternalLoadBalancerDeviceVO findSuitableLoadBalancerForNetwork(Network network, boolean dedicatedLb) throws InsufficientCapacityException;\n\n    /**\n     * returns the load balancer device allocated for the guest network\n     * @param network guest network id\n     * @return ExternalLoadBalancerDeviceVO object corresponding the load balancer device assigned for this guest network\n     */\n    public ExternalLoadBalancerDeviceVO getExternalLoadBalancerForNetwork(Network network);\n\n    /**\n     * applies load balancer rules\n     * @param network guest network if\n     * @param rules load balancer rules\n     * @return true if successfully applied rules\n     * @throws ResourceUnavailableException\n     */\n    public boolean applyLoadBalancerRules(Network network, List<LoadBalancingRule> rules) throws ResourceUnavailableException;\n\n    /**\n     * implements or shutdowns guest network on the load balancer device assigned to the guest network\n     * @param add\n     * @param guestConfig\n     * @return\n     * @throws ResourceUnavailableException\n     * @throws InsufficientCapacityException\n     */\n    public boolean manageGuestNetworkWithExternalLoadBalancer(boolean add, Network guestConfig) throws ResourceUnavailableException, InsufficientCapacityException;\n\n    public List<LoadBalancerTO> getLBHealthChecks(Network network, List<LoadBalancingRule> rules) throws ResourceUnavailableException;\n}<fim_middle>// class below is blob\n"}