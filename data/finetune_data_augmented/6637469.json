{"text": "<fim_prefix> * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npackage com.facebook.share.internal;\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport com.facebook.FacebookException;\nimport com.facebook.FacebookSdk;\nimport com.facebook.internal.Utility;\nimport com.facebook.internal.Validate;\nimport com.facebook.share.model.ShareCameraEffectContent;\nimport com.facebook.share.model.ShareContent;\nimport com.facebook.share.model.ShareLinkContent;\nimport com.facebook.share.model.ShareMedia;\nimport com.facebook.share.model.ShareMediaContent;\nimport com.facebook.share.model.ShareOpenGraphAction;\nimport com.facebook.share.model.ShareOpenGraphContent;\nimport com.facebook.share.model.ShareOpenGraphObject;\nimport com.facebook.share.model.ShareOpenGraphValueContainer;\nimport com.facebook.share.model.ShareMessengerGenericTemplateContent;\nimport com.facebook.share.model.ShareMessengerOpenGraphMusicTemplateContent;\nimport com.facebook.share.model.ShareMessengerMediaTemplateContent;\nimport com.facebook.share.model.ShareMessengerActionButton;\nimport com.facebook.share.model.ShareMessengerURLActionButton;\nimport com.facebook.share.model.SharePhoto;\nimport com.facebook.share.model.SharePhotoContent;\nimport com.facebook.share.model.ShareStoryContent;\nimport com.facebook.share.model.ShareVideo;\nimport com.facebook.share.model.ShareVideoContent;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Set;\n/**\n * com.facebook.share.internal is solely for the use of other packages within the\n * Facebook SDK for Android. Use of any of the classes in this package is\n * unsupported, and they may be modified or removed without warning at any time.\n */\npublic class ShareContentValidation {\n    private static Validator WebShareValidator;\n    private static Validator DefaultValidator;\n    private static Validator ApiValidator;\n    private static Validator StoryValidator;\n    public static void validateForMessage(ShareContent content) {\n        validate(content, getDefaultValidator());\n    }\n    public static void validateForNativeShare(ShareContent content) {\n        validate(content, getDefaultValidator());\n    }\n    public static void validateForWebShare(ShareContent content) {\n        validate(content, getWebShareValidator());\n    }\n    public static void validateForApiShare(ShareContent content) {\n        validate(content, getApiValidator());\n    }\n    public static void validateForStoryShare(ShareContent content){\n        validate(content, getStoryValidator());\n    }\n    private static Validator getStoryValidator(){\n        if(StoryValidator == null){\n            StoryValidator = new StoryShareValidator();\n        }\n        return StoryValidator;\n    }\n    private static Validator getDefaultValidator() {\n        if (DefaultValidator == null) {\n            DefaultValidator = new Validator();\n        }\n        return DefaultValidator;\n    }\n    private static Validator getApiValidator() {\n        if (ApiValidator == null) {\n            ApiValidator = new ApiValidator();\n        }\n        return ApiValidator;\n    }\n    private static Validator getWebShareValidator() {\n        if (WebShareValidator == null) {\n            WebShareValidator = new WebShareValidator();\n        }\n        return WebShareValidator;\n    }\n    private static void validate(ShareContent content, Validator validator)\n        throws FacebookException {\n        if (content == null) {\n            throw new FacebookException(\"Must provide non-null content to share\");\n        }\n        if (content instanceof ShareLinkContent) {\n            validator.validate((ShareLinkContent) content);\n        } else if (content instanceof SharePhotoContent) {\n            validator.validate((SharePhotoContent) content);\n        } else if (content instanceof ShareVideoContent) {\n            validator.validate((ShareVideoContent) content);\n        } else if (content instanceof ShareOpenGraphContent) {\n            validator.validate((ShareOpenGraphContent) content);\n        } else if (content instanceof ShareMediaContent) {\n            validator.validate((ShareMediaContent) content);\n        } else if (content instanceof ShareCameraEffectContent) {\n            validator.validate((ShareCameraEffectContent) content);\n        } else if (content instanceof ShareMessengerOpenGraphMusicTemplateContent) {\n            validator.validate((ShareMessengerOpenGraphMusicTemplateContent) content);\n        } else if (content instanceof ShareMessengerMediaTemplateContent) {\n            validator.validate((ShareMessengerMediaTemplateContent) content);\n        } else if (content instanceof ShareMessengerGenericTemplateContent) {\n            validator.validate((ShareMessengerGenericTemplateContent) content);\n        } else if (content instanceof ShareStoryContent){\n            validator.validate((ShareStoryContent) content);\n        }\n    }\n    private static void validateStoryContent(\n        ShareStoryContent storyContent, Validator validator){\n        if(storyContent == null ||\n            (storyContent.getBackgroundAsset() == null &&\n                storyContent.getStickerAsset() == null))\n            throw new FacebookException(\n                \"Must pass the Facebook app a background asset, a sticker asset, or both\");\n        if (storyContent.getBackgroundAsset() != null)\n            validator.validate(storyContent.getBackgroundAsset());\n        if (storyContent.getStickerAsset() != null)\n            validator.validate(storyContent.getStickerAsset());\n    }\n    private static void validateLinkContent(\n        ShareLinkContent linkContent, Validator validator) {\n        Uri imageUrl = linkContent.getImageUrl();\n        if (imageUrl != null && !Utility.isWebUri(imageUrl)) {\n            throw new FacebookException(\"Image Url must be an http:// or https:// url\");\n        }\n    }\n    private static void validatePhotoContent(\n        SharePhotoContent photoContent, Validator validator) {\n        List<SharePhoto> photos = photoContent.getPhotos();\n        if (photos == null || photos.isEmpty()) {\n            throw new FacebookException(\"Must specify at least one Photo in SharePhotoContent.\");\n        }\n        if (photos.size() > ShareConstants.MAXIMUM_PHOTO_COUNT) {\n            throw new FacebookException(\n                String.format(\n                    Locale.ROOT,\n                    \"Cannot add more than %d photos.\",\n                    ShareConstants.MAXIMUM_PHOTO_COUNT));\n        }\n        for (SharePhoto photo : photos) {\n            validator.validate(photo);\n        }\n    }\n    private static void validatePhoto(SharePhoto photo) {\n        if (photo == null) {\n            throw new FacebookException(\"Cannot share a null SharePhoto\");\n        }\n        Bitmap photoBitmap = photo.getBitmap();\n        Uri photoUri = photo.getImageUrl();\n        if (photoBitmap == null && photoUri == null) {\n            throw new FacebookException(\"SharePhoto does not have a Bitmap or ImageUrl specified\");\n        }\n    }\n    private static void validatePhotoForApi(SharePhoto photo, Validator validator) {\n        validatePhoto(photo);\n        Bitmap photoBitmap = photo.getBitmap();\n        Uri photoUri = photo.getImageUrl();\n        if (photoBitmap == null && Utility.isWebUri(photoUri) && !validator.isOpenGraphContent()) {\n            throw new FacebookException(\n                \"Cannot set the ImageUrl of a SharePhoto to the Uri of an image on the \" +\n                    \"web when sharing SharePhotoContent\");\n        }\n    }\n    private static void validatePhotoForNativeDialog(SharePhoto photo, Validator validator) {\n        validatePhotoForApi(photo, validator);\n        if (photo.getBitmap() != null || !Utility.isWebUri(photo.getImageUrl())) {\n            Validate.hasContentProvider(FacebookSdk.getApplicationContext());\n        }\n    }\n    private static void validatePhotoForWebDialog(SharePhoto photo, Validator validator) {\n        validatePhoto(photo);\n    }\n    private static void validateVideoContent(\n        ShareVideoContent videoContent, Validator validator) {\n        validator.validate(videoContent.getVideo());\n        SharePhoto previewPhoto = videoContent.getPreviewPhoto();\n        if (previewPhoto != null) {\n            validator.validate(previewPhoto);\n        }\n    }\n<fim_suffix>    private static void validateVideo(ShareVideo video, Validator validator) {\n        if (video == null) {\n            throw new FacebookException(\"Cannot share a null ShareVideo\");\n        }\n        Uri localUri = video.getLocalUrl();\n        if (localUri == null) {\n            throw new FacebookException(\"ShareVideo does not have a LocalUrl specified\");\n        }\n        if (!Utility.isContentUri(localUri) && !Utility.isFileUri(localUri)) {\n            throw new FacebookException(\"ShareVideo must reference a video that is on the device\");\n        }\n    }<fim_middle>// function below has no smell\n"}