{"text": "<fim_prefix>        if (definedClassesMode != null) definedClassesMode.confirmSettings();\n    }\n    private void settingsChanged() {\n        configurationChanged();\n    }\n    private void selectionChanged() {\n        configurationChanged();\n        if (getSession().inProgress() || getSession().isAttach()) checkArrays();\n    }\n    private void checkArrays() {\n        HashSet<ClientUtils.SourceCodeSelection> sel = selectedClassesMode.getSelection();\n        for (ClientUtils.SourceCodeSelection s : sel)\n            if (s.getClassName().endsWith(\"[]\")) { // NOI18N\n                ProfilerDialogs.displayWarningDNSA(Bundle.ObjectsFeature_arrayWarningMsg(),\n                                                   Bundle.ObjectsFeature_arrayWarningCaption(),\n                                                   null, \"ObjectsFeature.arraysDNSA\", true); // NOI18N\n                break;\n            }\n    }\n    // --- Settings UI ---------------------------------------------------------\n    private static final String SETTINGS_FLAG = \"SETTINGS_FLAG\"; // NOI18N\n    private JPanel settingsUI;\n    private JButton modeButton;\n    private JPanel settingsContainer;\n    private JButton applyButton;\n    public JPanel getSettingsUI() {\n        if (settingsUI == null) {\n            settingsUI = new JPanel(new GridBagLayout()) {\n                public void setVisible(boolean visible) {\n                    if (visible && getComponentCount() == 0) populateSettingsUI();\n                    super.setVisible(visible);\n                    storeFlag(SETTINGS_FLAG, visible ? Boolean.TRUE.toString() : null);\n                }\n                public Dimension getPreferredSize() {\n                    if (getComponentCount() == 0) return new Dimension();\n                    else return super.getPreferredSize();\n                }\n            };\n            String _vis = readFlag(SETTINGS_FLAG, null);\n            boolean vis = _vis == null ? false : Boolean.parseBoolean(_vis);\n            settingsUI.setVisible(vis || currentMode != allClassesMode);\n//            settingsUI.setVisible(false);\n        }\n        return settingsUI;\n    }\n    private void populateSettingsUI() {\n        settingsUI.setOpaque(false);\n        settingsUI.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n        GridBagConstraints c;\n        JPanel profilePanel = new SettingsPanel();\n        profilePanel.add(new JLabel(Bundle.ObjectsFeature_profileMode()));\n        profilePanel.add(Box.createHorizontalStrut(5));\n        // Mode button\n        modeButton = new PopupButton(currentMode.getName()) {\n            protected void populatePopup(JPopupMenu popup) {\n                popup.add(new TitledMenuSeparator(Bundle.ObjectsFeature_samplingModes()));\n                popup.add(new JRadioButtonMenuItem(allClassesMode.getName(), currentMode == allClassesMode) {\n                    protected void fireActionPerformed(ActionEvent e) { setMode(allClassesMode); }\n                });\n                if (projectClassesMode != null) popup.add(new JRadioButtonMenuItem(projectClassesMode.getName(), currentMode == projectClassesMode) {\n                    protected void fireActionPerformed(ActionEvent e) { setMode(projectClassesMode); }\n                });\n                popup.add(new TitledMenuSeparator(Bundle.ObjectsFeature_instrModes()));\n                popup.add(new JRadioButtonMenuItem(selectedClassesMode.getName(), currentMode == selectedClassesMode) {\n                    protected void fireActionPerformed(ActionEvent e) { setMode(selectedClassesMode); }\n                });\n                if (definedClassesMode != null) popup.add(new JRadioButtonMenuItem(definedClassesMode.getName(), currentMode == definedClassesMode) {\n                    protected void fireActionPerformed(ActionEvent e) { setMode(definedClassesMode); }\n                });\n            }\n        };\n        profilePanel.add(modeButton);\n        c = new GridBagConstraints();\n        c.gridx = 0;\n        c.gridy = 0;\n        c.fill = GridBagConstraints.NONE;\n        c.insets = new Insets(0, 0, 0, 0);\n        c.anchor = GridBagConstraints.NORTHWEST;\n        settingsUI.add(profilePanel, c);\n        // Settings container\n        settingsContainer = new JPanel(new BorderLayout());\n        settingsContainer.setOpaque(false);\n        c = new GridBagConstraints();\n        c.gridx = 1;\n        c.gridy = 0;\n        c.weightx = 1;\n        c.weighty = 1;\n        c.fill = GridBagConstraints.VERTICAL;\n        c.insets = new Insets(0, 10, 0, 0);\n        c.anchor = GridBagConstraints.NORTHWEST;\n        settingsUI.add(settingsContainer, c);\n        JPanel buttonsPanel = new SettingsPanel();\n        final Component space = Box.createHorizontalStrut(10);\n        buttonsPanel.add(space);\n        // Apply button\n        applyButton = new SmallButton(Bundle.ObjectsFeature_applyButton()) {\n            protected void fireActionPerformed(ActionEvent e) {\n                stopResults();\n                resetResults();\n                submitChanges();\n                unpauseResults();\n            }\n            public void setVisible(boolean visible) {\n                super.setVisible(visible);\n                space.setVisible(visible);\n            }\n        };\n        buttonsPanel.add(applyButton);\n        c = new GridBagConstraints();\n        c.gridx = 2;\n        c.gridy = 0;\n        c.fill = GridBagConstraints.NONE;\n        c.insets = new Insets(0, 0, 0, 0);\n        c.anchor = GridBagConstraints.NORTHEAST;\n        settingsUI.add(buttonsPanel, c);\n        updateModeUI();\n        updateApplyButton(getSession().getState());\n    }\n    private void updateModeName() {\n        if (modeButton != null) modeButton.setText(currentMode.getName());\n    }\n    private void updateModeUI() {\n        if (settingsContainer != null) {\n            settingsContainer.removeAll();\n            JComponent modeUI = currentMode.getUI();\n            if (modeUI != null) settingsContainer.add(modeUI);\n            settingsContainer.doLayout();\n            settingsContainer.repaint();\n        }\n    }\n    private void updateApplyButton(int state) {\n        if (applyButton != null) {\n            boolean visible = state != Profiler.PROFILING_INACTIVE;\n            applyButton.setVisible(visible);\n            if (visible) applyButton.setEnabled(currentSettingsValid() && pendingChanges());\n        }\n    }\n    // --- Toolbar & Results UI ------------------------------------------------\n    private ObjectsFeatureUI ui;\n    public JPanel getResultsUI() {\n        return getUI().getResultsUI();\n    }\n    public ProfilerToolbar getToolbar() {\n        return getUI().getToolbar();\n    }\n    private ObjectsFeatureUI getUI() {\n        if (ui == null) ui = new ObjectsFeatureUI() {\n            Set<ClientUtils.SourceCodeSelection> getSelection() {\n                return selectedClassesMode.getSelection();\n            }\n            void selectForProfiling(ClientUtils.SourceCodeSelection value) {\n                ObjectsFeature.this.selectForProfiling(value);\n            }\n            Lookup.Provider getProject() {\n                return ObjectsFeature.this.getSession().getProject();\n            }\n            ProfilerClient getProfilerClient() {\n                Profiler profiler = ObjectsFeature.this.getSession().getProfiler();\n                return profiler.getTargetAppRunner().getProfilerClient();\n            }\n            int getSessionState() {\n                return ObjectsFeature.this.getSessionState();\n            }\n            void refreshResults() {\n                ObjectsFeature.this.refreshResults();\n            }\n        };\n        return ui;\n    }\n    // --- Live results --------------------------------------------------------\n    private Runnable refresher;\n    private volatile boolean running;\n    private void startResults() {\n        if (running) return;\n        running = true;\n        refresher = new Runnable() {\n            public void run() {\n                if (running) {\n                    refreshView();\n                    refreshResults(1500);\n                }\n            }\n        };\n        refreshResults(1000);\n    }\n    private void refreshView() {\n        if (ui != null && ResultsManager.getDefault().resultsAvailable()) try {\n            // NOTE: might check ProfilerClient.getCurrentInstrType() here if #247827 still occurs\n            ui.refreshData();\n        } catch (ClientUtils.TargetAppOrVMTerminated ex) {\n            stopResults();\n        }\n    }\n    private void refreshResults() {\n        if (running) processor.post(new Runnable() {\n            public void run() {\n                if (ui != null) ui.setForceRefresh();\n                refreshView();\n            }\n        });\n    }\n    private void refreshResults(int delay) {\n        if (running && refresher != null) processor.post(refresher, delay);\n    }\n    private void resetResults() {\n        if (ui != null) ui.resetData();\n    }\n    private void stopResults() {\n        if (refresher != null) {\n            running = false;\n            refresher = null;\n        }\n    }\n    private void unpauseResults() {\n        if (ui != null) ui.resetPause();\n    }\n    // --- Session lifecycle ---------------------------------------------------\n    private ObjectsResetter resetter;\n<fim_suffix>    public void notifyActivated() {\n        resetResults();\n        resetter = Lookup.getDefault().lookup(ObjectsResetter.class);\n        resetter.controller = this;\n        if (getSession().inProgress() && !currentMode.currentSettingsValid()) {\n            final String oldMode = currentMode.getName();\n            final String newMode = allClassesMode.getName();\n            setMode(allClassesMode);\n            SwingUtilities.invokeLater(new Runnable() {\n                public void run() {\n                    ProfilerDialogs.displayInfo(Bundle.MethodsFeature_modeReset(\n                                                oldMode, newMode));\n                }\n            });\n        }\n    }<fim_middle>// function below has no smell\n"}