{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.usergrid.persistence.collection.serialization;\n\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.UUID;\n\nimport org.apache.usergrid.persistence.collection.MvccLogEntry;\nimport org.apache.usergrid.persistence.collection.VersionSet;\nimport org.apache.usergrid.persistence.core.migration.data.VersionedData;\nimport org.apache.usergrid.persistence.core.migration.schema.Migration;\nimport org.apache.usergrid.persistence.core.scope.ApplicationScope;\nimport org.apache.usergrid.persistence.model.entity.Id;\n\nimport com.netflix.astyanax.MutationBatch;\n\n\n/**\n * The interface that allows us to serialize a log entry to disk\n */\n<fim_suffix>public interface MvccLogEntrySerializationStrategy extends Migration, VersionedData {\n\n    /**\n     * Serialize the entity to the data store with the given collection context\n     *\n     * @param applicationScope The applicationscope of the entrye\n     * @param entry the entry to write\n     *\n     * @return The mutation batch with the mutation operations for this write.\n     */\n    MutationBatch write( final ApplicationScope applicationScope, MvccLogEntry entry );\n\n    /**\n     * Load and return the stage with the given id and a version that is <= the version provided\n     *\n     * @param applicationScope The applicationScope to persist the entity into\n     * @param entityIds The entity id to load\n     * @param version The max version to load.  This will return the first version <= the given version\n     *\n     * @return The deserialized version of the log entry\n     */\n    VersionSet load( final ApplicationScope applicationScope, final Collection<Id> entityIds, final UUID version );\n\n    /**\n     * Load a list, from highest to lowest of the stage with versions <= version up to maxSize elements\n     *\n     * @param applicationScope The applicationScope to load the entity from\n     * @param entityId The entity id to load\n     * @param version The max version to seek from\n     * @param maxSize The maximum size to return.  If you receive this size, there may be more versions to load.\n     *\n     * @return A list of entities up to max size ordered from max(UUID)=> min(UUID)\n     */\n    List<MvccLogEntry> load( ApplicationScope applicationScope, Id entityId, UUID version, int maxSize );\n\n\n\n    /**\n     * Load a list, from lowest to highest of the stage with versions <= version up to maxSize elements\n     *\n     * @param applicationScope The applicationScope to load the entity from\n     * @param entityId The entity id to load\n     * @param minVersion The min version to seek from.  Null is allowed\n     * @param maxSize The maximum size to return.  If you receive this size, there may be more versions to load.\n     *\n     * @return A list of entities up to max size ordered from max(UUID)=> min(UUID)\n     */\n    List<MvccLogEntry> loadReversed( ApplicationScope applicationScope, Id entityId, UUID minVersion, int maxSize );\n\n    /**\n     * MarkCommit the stage from the applicationScope with the given entityId and version\n     *\n     * @param applicationScope The applicationScope that contains the entity\n     * @param entityId The entity id to delete\n     * @param version The version to delete\n     */\n    MutationBatch delete( ApplicationScope applicationScope, Id entityId, UUID version );\n}<fim_middle>// class below has no smell\n"}