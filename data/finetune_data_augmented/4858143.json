{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.pinot.common.utils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.TimeUnit;\nimport org.I0Itec.zkclient.ZkClient;\nimport org.apache.zookeeper.server.ServerConfig;\nimport org.apache.zookeeper.server.ZooKeeperServerMain;\nimport org.apache.zookeeper.server.quorum.QuorumPeerConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\npublic class ZkStarter {\n  private static final Logger LOGGER = LoggerFactory.getLogger(ZkStarter.class);\n  public static final int DEFAULT_ZK_TEST_PORT = 2191;\n  public static final String DEFAULT_ZK_STR = \"localhost:\" + DEFAULT_ZK_TEST_PORT;\n\n  public static class ZookeeperInstance {\n    private PublicZooKeeperServerMain _serverMain;\n    private String _dataDirPath;\n\n    private ZookeeperInstance(PublicZooKeeperServerMain serverMain, String dataDirPath) {\n      _serverMain = serverMain;\n      _dataDirPath = dataDirPath;\n    }\n  }\n\n  /**\n   * Silly class to make protected methods public.\n   */\n<fim_suffix>  static class PublicZooKeeperServerMain extends ZooKeeperServerMain {\n    @Override\n    public void initializeAndRun(String[] args)\n        throws QuorumPeerConfig.ConfigException, IOException {\n      super.initializeAndRun(args);\n    }\n\n    @Override\n    public void runFromConfig(final ServerConfig config)\n        throws IOException {\n      ServerConfig newServerConfig = new ServerConfig() {\n\n        public void parse(String[] args) {\n          config.parse(args);\n        }\n\n        public void parse(String path)\n            throws QuorumPeerConfig.ConfigException {\n          config.parse(path);\n        }\n\n        public void readFrom(QuorumPeerConfig otherConfig) {\n          config.readFrom(otherConfig);\n        }\n\n        public InetSocketAddress getClientPortAddress() {\n          return config.getClientPortAddress();\n        }\n\n        public String getDataDir() {\n          return config.getDataDir();\n        }\n\n        public String getDataLogDir() {\n          return config.getDataLogDir();\n        }\n\n        public int getTickTime() {\n          return config.getTickTime();\n        }\n\n        public int getMaxClientCnxns() {\n          dataDir = getDataDir();\n          dataLogDir = getDataLogDir();\n          tickTime = getTickTime();\n          minSessionTimeout = getMinSessionTimeout();\n          maxSessionTimeout = getMaxSessionTimeout();\n          maxClientCnxns = 0;\n          return 0;\n        }\n\n        public int getMinSessionTimeout() {\n          return config.getMinSessionTimeout();\n        }\n\n        public int getMaxSessionTimeout() {\n          return config.getMaxSessionTimeout();\n        }\n      };\n\n      newServerConfig.getMaxClientCnxns();\n\n      super.runFromConfig(newServerConfig);\n    }\n\n    @Override\n    public void shutdown() {\n      super.shutdown();\n    }\n  }\n\n  /**\n   * Starts an empty local Zk instance on the default port\n   */\n  public static ZookeeperInstance startLocalZkServer() {\n    return startLocalZkServer(DEFAULT_ZK_TEST_PORT);\n  }\n\n  /**\n   * Starts a local Zk instance with a generated empty data directory\n   * @param port The port to listen on\n   */\n  public static ZookeeperInstance startLocalZkServer(final int port) {\n    return startLocalZkServer(port,\n        org.apache.commons.io.FileUtils.getTempDirectoryPath() + File.separator + \"test-\" + System.currentTimeMillis());\n  }\n\n  /**\n   * Starts a local Zk instance\n   * @param port The port to listen on\n   * @param dataDirPath The path for the Zk data directory\n   */\n  public synchronized static ZookeeperInstance startLocalZkServer(final int port, final String dataDirPath) {\n    // Start the local ZK server\n    try {\n      final PublicZooKeeperServerMain zookeeperServerMain = new PublicZooKeeperServerMain();\n      final String[] args = new String[]{Integer.toString(port), dataDirPath};\n      new Thread() {\n        @Override\n        public void run() {\n          try {\n            zookeeperServerMain.initializeAndRun(args);\n          } catch (QuorumPeerConfig.ConfigException e) {\n            LOGGER.warn(\"Caught exception while starting ZK\", e);\n          } catch (IOException e) {\n            LOGGER.warn(\"Caught exception while starting ZK\", e);\n          }\n        }\n      }.start();\n\n      // Wait until the ZK server is started\n      ZkClient client = new ZkClient(\"localhost:\" + port, 10000);\n      client.waitUntilConnected(10L, TimeUnit.SECONDS);\n      client.close();\n\n      return new ZookeeperInstance(zookeeperServerMain, dataDirPath);\n    } catch (Exception e) {\n      LOGGER.warn(\"Caught exception while starting ZK\", e);\n      throw new RuntimeException(e);\n    }\n  }\n\n  /**\n   * Stops a local Zk instance, deleting its data directory\n   */\n  public static void stopLocalZkServer(final ZookeeperInstance instance) {\n    stopLocalZkServer(instance, true);\n  }\n\n  /**\n   * Stops a local Zk instance.\n   * @param deleteDataDir Whether or not to delete the data directory\n   */\n  public synchronized static void stopLocalZkServer(final ZookeeperInstance instance, final boolean deleteDataDir) {\n    if (instance._serverMain != null) {\n      try {\n        // Shut down ZK\n        instance._serverMain.shutdown();\n        instance._serverMain = null;\n\n        // Delete the data dir\n        if (deleteDataDir) {\n          org.apache.commons.io.FileUtils.deleteDirectory(new File(instance._dataDirPath));\n        }\n      } catch (Exception e) {\n        LOGGER.warn(\"Caught exception while stopping ZK server\", e);\n        throw new RuntimeException(e);\n      }\n    }\n  }\n}<fim_middle>// class below has no smell\n"}