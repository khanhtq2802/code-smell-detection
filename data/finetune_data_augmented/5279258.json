{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.webbeans.util;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Set;\n\n/**\n * This is a special 'Set' which actually is no Collection but\n * only contains a very single item.\n * This way we keep mem low and also are pretty fast ;)\n */\npublic class SingleItemSet<T> implements Set<T>\n{\n\n    private T instance;\n\n\n    public SingleItemSet(T instance)\n    {\n        this.instance = instance;\n    }\n\n    @Override\n    public int size()\n    {\n        return 1;\n    }\n\n    @Override\n    public boolean isEmpty()\n    {\n        return false;\n    }\n\n    @Override\n    public boolean contains(Object o)\n    {\n        return instance.equals(o);\n    }\n\n    @Override\n    public Iterator<T> iterator()\n    {\n        return new SingleItemIterator(instance);\n    }\n\n    @Override\n    public Object[] toArray()\n    {\n        Object[] array = new Object[1];\n        array[0] = instance;\n        return array;\n    }\n\n    @Override\n    public <T1> T1[] toArray(T1[] a)\n    {\n        if (a.length > 0)\n        {\n            a[0] = (T1) instance;\n            return a;\n        }\n        return (T1[]) toArray();\n    }\n\n    @Override\n    public boolean add(T t)\n    {\n        throw new IllegalArgumentException(\"not supported operation\");\n    }\n\n    @Override\n    public boolean remove(Object o)\n    {\n        throw new IllegalArgumentException(\"not supported operation\");\n    }\n\n    @Override\n    public boolean containsAll(Collection<?> c)\n    {\n        return false;\n    }\n\n    @Override\n    public boolean addAll(Collection<? extends T> c)\n    {\n        throw new IllegalArgumentException(\"not supported operation\");\n    }\n\n    @Override\n    public boolean retainAll(Collection<?> c)\n    {\n        throw new IllegalArgumentException(\"not supported operation\");\n    }\n\n    @Override\n    public boolean removeAll(Collection<?> c)\n    {\n        return false;\n    }\n\n    @Override\n    public void clear()\n    {\n        instance = null;\n    }\n\n<fim_suffix>    public class SingleItemIterator implements Iterator<T>\n    {\n        private T instance;\n\n        public SingleItemIterator(T instance)\n        {\n            this.instance = instance;\n        }\n\n        @Override\n        public boolean hasNext()\n        {\n            return instance != null;\n        }\n\n        @Override\n        public T next()\n        {\n            T oldInstance = instance;\n            this.instance = null;\n            return oldInstance;\n        }\n\n        @Override\n        public void remove()\n        {\n            // do nothing...\n        }\n    }\n}<fim_middle>// class below has no smell\n"}