{"text": "<fim_prefix>/*\n * Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage java.sql;\n\n/**\n * The subclass of {@link SQLException} thrown when the SQLState class value\n * is '<i>28</i>', or under vendor-specified conditions. This indicates that\n * the authorization credentials presented during connection establishment\n * are not valid.\n * <p>\n * Please consult your driver vendor documentation for the vendor-specified\n * conditions for which this <code>Exception</code> may be thrown.\n * @since 1.6\n */\n<fim_suffix>public class SQLInvalidAuthorizationSpecException extends SQLNonTransientException {\n\n        /**\n         * Constructs a <code>SQLInvalidAuthorizationSpecException</code> object.\n         * The <code>reason</code>, <code>SQLState</code> are initialized\n         * to <code>null</code> and the vendor code is initialized to 0.\n         *\n         * The <code>cause</code> is not initialized, and may subsequently be\n         * initialized by a call to the\n         * {@link Throwable#initCause(java.lang.Throwable)} method.\n         *\n         * @since 1.6\n         */\n        public SQLInvalidAuthorizationSpecException() {\n                super();\n        }\n\n        /**\n         * Constructs a <code>SQLInvalidAuthorizationSpecException</code> object\n         *  with a given <code>reason</code>. The <code>SQLState</code>\n         * is initialized to <code>null</code> and the vendor code is initialized\n         * to 0.\n         *\n         * The <code>cause</code> is not initialized, and may subsequently be\n         * initialized by a call to the\n         * {@link Throwable#initCause(java.lang.Throwable)} method.\n         *\n         * @param reason a description of the exception\n         * @since 1.6\n         */\n        public SQLInvalidAuthorizationSpecException(String reason) {\n                super(reason);\n        }\n\n        /**\n         * Constructs a <code>SQLInvalidAuthorizationSpecException</code> object\n         * with a given <code>reason</code> and <code>SQLState</code>.\n         *\n         * The <code>cause</code> is not initialized, and may subsequently be\n         * initialized by a call to the\n         * {@link Throwable#initCause(java.lang.Throwable)} method. The vendor code\n         * is initialized to 0.\n         *\n         * @param reason a description of the exception\n         * @param SQLState an XOPEN or SQL:2003 code identifying the exception\n         * @since 1.6\n         */\n        public SQLInvalidAuthorizationSpecException(String reason, String SQLState) {\n                super(reason,SQLState);\n        }\n\n        /**\n         * Constructs a <code>SQLInvalidAuthorizationSpecException</code> object\n         * with a given <code>reason</code>, <code>SQLState</code>  and\n         * <code>vendorCode</code>.\n         *\n         * The <code>cause</code> is not initialized, and may subsequently be\n         * initialized by a call to the\n         * {@link Throwable#initCause(java.lang.Throwable)} method.\n         *\n         * @param reason a description of the exception\n         * @param SQLState an XOPEN or SQL:2003 code identifying the exception\n         * @param vendorCode a database vendor specific exception code\n         * @since 1.6\n         */\n        public SQLInvalidAuthorizationSpecException(String reason, String SQLState, int vendorCode) {\n                  super(reason,SQLState,vendorCode);\n        }\n\n    /**\n     * Constructs a <code>SQLInvalidAuthorizationSpecException</code> object\n     * with a given  <code>cause</code>.\n     * The <code>SQLState</code> is initialized\n     * to <code>null</code> and the vendor code is initialized to 0.\n     * The <code>reason</code>  is initialized to <code>null</code> if\n     * <code>cause==null</code> or to <code>cause.toString()</code> if\n     * <code>cause!=null</code>.\n     *\n     * @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     *     the cause is non-existent or unknown.\n     * @since 1.6\n     */\n    public SQLInvalidAuthorizationSpecException(Throwable cause) {\n        super(cause);\n    }\n\n    /**\n     * Constructs a <code>SQLInvalidAuthorizationSpecException</code> object\n     *  with a given\n     * <code>reason</code> and  <code>cause</code>.\n     * The <code>SQLState</code> is  initialized to <code>null</code>\n     * and the vendor code is initialized to 0.\n     *\n     * @param reason a description of the exception.\n     * @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     *     the cause is non-existent or unknown.\n     * @since 1.6\n     */\n    public SQLInvalidAuthorizationSpecException(String reason, Throwable cause) {\n        super(reason,cause);\n    }\n\n    /**\n     * Constructs a <code>SQLInvalidAuthorizationSpecException</code> object\n     *  with a given\n     * <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.\n     * The vendor code is initialized to 0.\n     *\n     * @param reason a description of the exception.\n     * @param SQLState an XOPEN or SQL:2003 code identifying the exception\n     * @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code>  method); may be null indicating\n     *     the cause is non-existent or unknown.\n     * @since 1.6\n     */\n    public SQLInvalidAuthorizationSpecException(String reason, String SQLState, Throwable cause) {\n        super(reason,SQLState,cause);\n    }\n\n    /**\n     *  Constructs a <code>SQLInvalidAuthorizationSpecException</code> object\n     * with a given\n     * <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>\n     * and  <code>cause</code>.\n     *\n     * @param reason a description of the exception\n     * @param SQLState an XOPEN or SQL:2003 code identifying the exception\n     * @param vendorCode a database vendor-specific exception code\n     * @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     *     the cause is non-existent or unknown.\n     * @since 1.6\n     */\n    public SQLInvalidAuthorizationSpecException(String reason, String SQLState, int vendorCode, Throwable cause) {\n        super(reason,SQLState,vendorCode,cause);\n    }\n\n   private static final long serialVersionUID = -64105250450891498L;\n}<fim_middle>// class below has no smell\n"}