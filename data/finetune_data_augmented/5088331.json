{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.mahout.classifier.naivebayes;\n\nimport java.io.IOException;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FSDataInputStream;\nimport org.apache.hadoop.fs.FSDataOutputStream;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.mahout.math.DenseVector;\nimport org.apache.mahout.math.Matrix;\nimport org.apache.mahout.math.SparseRowMatrix;\nimport org.apache.mahout.math.Vector;\nimport org.apache.mahout.math.VectorWritable;\n\nimport com.google.common.base.Preconditions;\n\n/** NaiveBayesModel holds the weight matrix, the feature and label sums and the weight normalizer vectors.*/\n<fim_suffix>public class NaiveBayesModel {\n\n  private final Vector weightsPerLabel;\n  private final Vector perlabelThetaNormalizer;\n  private final Vector weightsPerFeature;\n  private final Matrix weightsPerLabelAndFeature;\n  private final float alphaI;\n  private final double numFeatures;\n  private final double totalWeightSum;\n  private final boolean isComplementary;  \n   \n  public final static String COMPLEMENTARY_MODEL = \"COMPLEMENTARY_MODEL\";\n\n  public NaiveBayesModel(Matrix weightMatrix, Vector weightsPerFeature, Vector weightsPerLabel, Vector thetaNormalizer,\n                         float alphaI, boolean isComplementary) {\n    this.weightsPerLabelAndFeature = weightMatrix;\n    this.weightsPerFeature = weightsPerFeature;\n    this.weightsPerLabel = weightsPerLabel;\n    this.perlabelThetaNormalizer = thetaNormalizer;\n    this.numFeatures = weightsPerFeature.getNumNondefaultElements();\n    this.totalWeightSum = weightsPerLabel.zSum();\n    this.alphaI = alphaI;\n    this.isComplementary=isComplementary;\n  }\n\n  public double labelWeight(int label) {\n    return weightsPerLabel.getQuick(label);\n  }\n\n  public double thetaNormalizer(int label) {\n    return perlabelThetaNormalizer.get(label); \n  }\n\n  public double featureWeight(int feature) {\n    return weightsPerFeature.getQuick(feature);\n  }\n\n  public double weight(int label, int feature) {\n    return weightsPerLabelAndFeature.getQuick(label, feature);\n  }\n\n  public float alphaI() {\n    return alphaI;\n  }\n\n  public double numFeatures() {\n    return numFeatures;\n  }\n\n  public double totalWeightSum() {\n    return totalWeightSum;\n  }\n  \n  public int numLabels() {\n    return weightsPerLabel.size();\n  }\n\n  public Vector createScoringVector() {\n    return weightsPerLabel.like();\n  }\n  \n  public boolean isComplemtary(){\n      return isComplementary;\n  }\n  \n  public static NaiveBayesModel materialize(Path output, Configuration conf) throws IOException {\n    FileSystem fs = output.getFileSystem(conf);\n\n    Vector weightsPerLabel;\n    Vector perLabelThetaNormalizer = null;\n    Vector weightsPerFeature;\n    Matrix weightsPerLabelAndFeature;\n    float alphaI;\n    boolean isComplementary;\n\n    try (FSDataInputStream in = fs.open(new Path(output, \"naiveBayesModel.bin\"))) {\n      alphaI = in.readFloat();\n      isComplementary = in.readBoolean();\n      weightsPerFeature = VectorWritable.readVector(in);\n      weightsPerLabel = new DenseVector(VectorWritable.readVector(in));\n      if (isComplementary){\n        perLabelThetaNormalizer = new DenseVector(VectorWritable.readVector(in));\n      }\n      weightsPerLabelAndFeature = new SparseRowMatrix(weightsPerLabel.size(), weightsPerFeature.size());\n      for (int label = 0; label < weightsPerLabelAndFeature.numRows(); label++) {\n        weightsPerLabelAndFeature.assignRow(label, VectorWritable.readVector(in));\n      }\n    }\n\n    NaiveBayesModel model = new NaiveBayesModel(weightsPerLabelAndFeature, weightsPerFeature, weightsPerLabel,\n        perLabelThetaNormalizer, alphaI, isComplementary);\n    model.validate();\n    return model;\n  }\n\n  public void serialize(Path output, Configuration conf) throws IOException {\n    FileSystem fs = output.getFileSystem(conf);\n    try (FSDataOutputStream out = fs.create(new Path(output, \"naiveBayesModel.bin\"))) {\n      out.writeFloat(alphaI);\n      out.writeBoolean(isComplementary);\n      VectorWritable.writeVector(out, weightsPerFeature);\n      VectorWritable.writeVector(out, weightsPerLabel); \n      if (isComplementary){\n        VectorWritable.writeVector(out, perlabelThetaNormalizer);\n      }\n      for (int row = 0; row < weightsPerLabelAndFeature.numRows(); row++) {\n        VectorWritable.writeVector(out, weightsPerLabelAndFeature.viewRow(row));\n      }\n    }\n  }\n  \n  public void validate() {\n    Preconditions.checkState(alphaI > 0, \"alphaI has to be greater than 0!\");\n    Preconditions.checkArgument(numFeatures > 0, \"the vocab count has to be greater than 0!\");\n    Preconditions.checkArgument(totalWeightSum > 0, \"the totalWeightSum has to be greater than 0!\");\n    Preconditions.checkNotNull(weightsPerLabel, \"the number of labels has to be defined!\");\n    Preconditions.checkArgument(weightsPerLabel.getNumNondefaultElements() > 0,\n        \"the number of labels has to be greater than 0!\");\n    Preconditions.checkNotNull(weightsPerFeature, \"the feature sums have to be defined\");\n    Preconditions.checkArgument(weightsPerFeature.getNumNondefaultElements() > 0,\n        \"the feature sums have to be greater than 0!\");\n    if (isComplementary){\n        Preconditions.checkArgument(perlabelThetaNormalizer != null, \"the theta normalizers have to be defined\");\n        Preconditions.checkArgument(perlabelThetaNormalizer.getNumNondefaultElements() > 0,\n            \"the number of theta normalizers has to be greater than 0!\");    \n        Preconditions.checkArgument(Math.signum(perlabelThetaNormalizer.minValue()) \n                == Math.signum(perlabelThetaNormalizer.maxValue()), \n           \"Theta normalizers do not all have the same sign\");            \n        Preconditions.checkArgument(perlabelThetaNormalizer.getNumNonZeroElements() \n                == perlabelThetaNormalizer.size(), \n           \"Theta normalizers can not have zero value.\");\n    }\n    \n  }\n}<fim_middle>// class below has no smell\n"}