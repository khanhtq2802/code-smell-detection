{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\npackage org.apache.storm.stats;\n\nimport com.codahale.metrics.Counter;\nimport java.util.List;\nimport org.apache.storm.generated.BoltStats;\nimport org.apache.storm.generated.ExecutorSpecificStats;\nimport org.apache.storm.generated.ExecutorStats;\nimport org.apache.storm.metric.internal.MultiCountStatAndMetric;\nimport org.apache.storm.metric.internal.MultiLatencyStatAndMetric;\nimport org.apache.storm.shade.com.google.common.collect.Lists;\n\n<fim_suffix>@SuppressWarnings(\"unchecked\")\npublic class BoltExecutorStats extends CommonStats {\n    MultiCountStatAndMetric executedStats;\n    MultiLatencyStatAndMetric processLatencyStats;\n    MultiLatencyStatAndMetric executeLatencyStats;\n\n    public BoltExecutorStats(int rate, int numStatBuckets) {\n        super(rate, numStatBuckets);\n        this.executedStats = new MultiCountStatAndMetric(numStatBuckets);\n        this.processLatencyStats = new MultiLatencyStatAndMetric(numStatBuckets);\n        this.executeLatencyStats = new MultiLatencyStatAndMetric(numStatBuckets);\n    }\n\n    public MultiCountStatAndMetric getExecuted() {\n        return executedStats;\n    }\n\n    public MultiLatencyStatAndMetric getProcessLatencies() {\n        return processLatencyStats;\n    }\n\n    public MultiLatencyStatAndMetric getExecuteLatencies() {\n        return executeLatencyStats;\n    }\n\n    @Override\n    public void cleanupStats() {\n        executedStats.close();\n        processLatencyStats.close();\n        executeLatencyStats.close();\n        super.cleanupStats();\n    }\n\n    public void boltExecuteTuple(String component, String stream, long latencyMs) {\n        List key = Lists.newArrayList(component, stream);\n        this.getExecuted().incBy(key, this.rate);\n        this.getExecuteLatencies().record(key, latencyMs);\n    }\n\n    public void boltAckedTuple(String component, String stream, long latencyMs, Counter ackedCounter) {\n        List key = Lists.newArrayList(component, stream);\n        this.getAcked().incBy(key, this.rate);\n        ackedCounter.inc(this.rate);\n        this.getProcessLatencies().record(key, latencyMs);\n    }\n\n    public void boltFailedTuple(String component, String stream, long latencyMs, Counter failedCounter) {\n        List key = Lists.newArrayList(component, stream);\n        this.getFailed().incBy(key, this.rate);\n        failedCounter.inc(this.rate);\n    }\n\n    @Override\n    public ExecutorStats renderStats() {\n        ExecutorStats ret = new ExecutorStats();\n        // common stats\n        ret.set_emitted(valueStat(getEmitted()));\n        ret.set_transferred(valueStat(getTransferred()));\n        ret.set_rate(this.rate);\n\n        // bolt stats\n        BoltStats boltStats = new BoltStats(\n            ClientStatsUtil.windowSetConverter(valueStat(getAcked()), ClientStatsUtil.TO_GSID, ClientStatsUtil.IDENTITY),\n            ClientStatsUtil.windowSetConverter(valueStat(getFailed()), ClientStatsUtil.TO_GSID, ClientStatsUtil.IDENTITY),\n            ClientStatsUtil.windowSetConverter(valueStat(processLatencyStats), ClientStatsUtil.TO_GSID, ClientStatsUtil.IDENTITY),\n            ClientStatsUtil.windowSetConverter(valueStat(executedStats), ClientStatsUtil.TO_GSID, ClientStatsUtil.IDENTITY),\n            ClientStatsUtil.windowSetConverter(valueStat(executeLatencyStats), ClientStatsUtil.TO_GSID, ClientStatsUtil.IDENTITY));\n        ret.set_specific(ExecutorSpecificStats.bolt(boltStats));\n\n        return ret;\n    }\n}<fim_middle>// class below is blob and data class\n"}