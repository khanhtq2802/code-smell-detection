{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.artemis.jms.example;\n\nimport javax.transaction.xa.Xid;\n\nimport org.apache.activemq.artemis.utils.Base64;\n\npublic class DummyXid implements Xid {\n\n   private static final long serialVersionUID = 407053232840068514L;\n\n   private final byte[] branchQualifier;\n\n   private final int formatId;\n\n   private final byte[] globalTransactionId;\n\n   private int hash;\n\n   private boolean hashCalculated;\n\n   // Static --------------------------------------------------------\n\n   public static String toBase64String(final Xid xid) {\n      return Base64.encodeBytes(DummyXid.toByteArray(xid));\n   }\n\n   private static byte[] toByteArray(final Xid xid) {\n      byte[] branchQualifier = xid.getBranchQualifier();\n      byte[] globalTransactionId = xid.getGlobalTransactionId();\n      int formatId = xid.getFormatId();\n\n      byte[] hashBytes = new byte[branchQualifier.length + globalTransactionId.length + 4];\n      System.arraycopy(branchQualifier, 0, hashBytes, 0, branchQualifier.length);\n      System.arraycopy(globalTransactionId, 0, hashBytes, branchQualifier.length, globalTransactionId.length);\n      byte[] intBytes = new byte[4];\n      for (int i = 0; i < 4; i++) {\n         intBytes[i] = (byte) ((formatId >> i * 8) % 0xFF);\n      }\n      System.arraycopy(intBytes, 0, hashBytes, branchQualifier.length + globalTransactionId.length, 4);\n      return hashBytes;\n   }\n\n   // Constructors --------------------------------------------------\n\n   /**\n    * Standard constructor\n    *\n    * @param branchQualifier\n    * @param formatId\n    * @param globalTransactionId\n    */\n   public DummyXid(final byte[] branchQualifier, final int formatId, final byte[] globalTransactionId) {\n      this.branchQualifier = branchQualifier;\n      this.formatId = formatId;\n      this.globalTransactionId = globalTransactionId;\n   }\n\n   /**\n    * Copy constructor\n    *\n    * @param other\n    */\n   public DummyXid(final Xid other) {\n      branchQualifier = copyBytes(other.getBranchQualifier());\n      formatId = other.getFormatId();\n      globalTransactionId = copyBytes(other.getGlobalTransactionId());\n   }\n\n   // Xid implementation ------------------------------------------------------------------\n\n   @Override\n   public byte[] getBranchQualifier() {\n      return branchQualifier;\n   }\n\n   @Override\n   public int getFormatId() {\n      return formatId;\n   }\n\n   @Override\n   public byte[] getGlobalTransactionId() {\n      return globalTransactionId;\n   }\n\n   // Public -------------------------------------------------------------------------------\n\n   @Override\n   public int hashCode() {\n      if (!hashCalculated) {\n         calcHash();\n      }\n      return hash;\n   }\n\n<fim_suffix>   @Override\n   public boolean equals(final Object other) {\n      if (this == other) {\n         return true;\n      }\n      if (!(other instanceof Xid)) {\n         return false;\n      }\n      Xid xother = (Xid) other;\n      if (xother.getFormatId() != formatId) {\n         return false;\n      }\n      if (xother.getBranchQualifier().length != branchQualifier.length) {\n         return false;\n      }\n      if (xother.getGlobalTransactionId().length != globalTransactionId.length) {\n         return false;\n      }\n      for (int i = 0; i < branchQualifier.length; i++) {\n         byte[] otherBQ = xother.getBranchQualifier();\n         if (branchQualifier[i] != otherBQ[i]) {\n            return false;\n         }\n      }\n      for (int i = 0; i < globalTransactionId.length; i++) {\n         byte[] otherGtx = xother.getGlobalTransactionId();\n         if (globalTransactionId[i] != otherGtx[i]) {\n            return false;\n         }\n      }\n      return true;\n   }\n\n   @Override\n   public String toString() {\n      return \"XidImpl (\" + System.identityHashCode(this) +\n         \" bq:\" +\n         stringRep(branchQualifier) +\n         \" formatID:\" +\n         formatId +\n         \" gtxid:\" +\n         stringRep(globalTransactionId);\n   }\n\n   // Private -------------------------------------------------------------------------------\n\n   private String stringRep(final byte[] bytes) {\n      StringBuilder buff = new StringBuilder();\n      for (int i = 0; i < bytes.length; i++) {\n         byte b = bytes[i];\n\n         buff.append(b);\n\n         if (i != bytes.length - 1) {\n            buff.append('.');\n         }\n      }\n\n      return buff.toString();\n   }\n\n   private void calcHash() {\n      byte[] hashBytes = org.apache.activemq.artemis.jms.example.DummyXid.toByteArray(this);\n      String s = new String(hashBytes);\n      hash = s.hashCode();\n      hashCalculated = true;\n   }\n\n   private byte[] copyBytes(final byte[] other) {\n      byte[] bytes = new byte[other.length];\n\n      System.arraycopy(other, 0, bytes, 0, other.length);\n\n      return bytes;\n   }\n}<fim_middle>// function below has no smell\n"}