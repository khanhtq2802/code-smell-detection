{"text": "<fim_prefix>// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage org.apache.tapestry5;\n\nimport java.io.BufferedInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\n/**\n * Utility methods related to managing framework version numbers.\n */\n<fim_suffix>public class VersionUtils\n{\n\n    /**\n     * Reads a version number from a properties file on the classpath.  These files are generally created by Gradle.  For\n     * example, tapestry-core's properties file is <code>META-INF/gradle/org.apache.tapestry/tapestry-core/pom.properties</code>.\n     * The Gradle generated properties files include the version and possibly others properties.\n     *\n     * The resource is located using the Thread's context class loader.\n     *\n     * @param resourcePath the complete path to the resource, including a leading slash.\n     * @return the version number read from the properties file, or \"UNKNOWN\" if the version number is not present or\n     *         the file can not be opened\n     */\n    public static String readVersionNumber(String resourcePath)\n    {\n        String result = \"UNKNOWN\";\n\n        InputStream stream = Thread.currentThread().getContextClassLoader().getResourceAsStream(\n                resourcePath);\n\n\n        if (stream != null)\n        {\n            Properties properties = new Properties();\n\n\n            try\n            {\n                stream = new BufferedInputStream(stream);\n\n                properties.load(stream);\n\n                stream.close();\n            }\n            catch (IOException ex)\n            {\n                // Just ignore it.\n            }\n\n            String version = properties.getProperty(\"version\");\n\n            // Since the file, if it exists, is created by Gradle and will have the key, I can't see\n            // how version would EVER be null, unless there's a problem reading the properties.\n\n            if (version != null) result = version;\n        }\n\n        return result;\n    }\n}<fim_middle>// class below has no smell\n"}