{"text": "<fim_prefix>/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See LICENSE in the project root for license information.\n */\n\npackage com.microsoft.embeddedsocial.ui.adapter.viewholder;\n\nimport com.microsoft.embeddedsocial.account.UserAccount;\nimport com.microsoft.embeddedsocial.autorest.models.PublisherType;\nimport com.microsoft.embeddedsocial.base.event.EventBus;\nimport com.microsoft.embeddedsocial.base.utils.debug.DebugLog;\nimport com.microsoft.embeddedsocial.data.Preferences;\nimport com.microsoft.embeddedsocial.event.click.OpenUserProfileEvent;\nimport com.microsoft.embeddedsocial.image.ImageViewContentLoader;\nimport com.microsoft.embeddedsocial.image.UserPhotoLoader;\nimport com.microsoft.embeddedsocial.sdk.R;\nimport com.microsoft.embeddedsocial.sdk.ui.AppProfile;\nimport com.microsoft.embeddedsocial.server.model.view.ReplyView;\nimport com.microsoft.embeddedsocial.server.model.view.TopicView;\nimport com.microsoft.embeddedsocial.server.model.view.UserCompactView;\nimport com.microsoft.embeddedsocial.ui.util.ContentUpdateHelper;\nimport com.microsoft.embeddedsocial.ui.util.TimeUtils;\n\nimport android.content.res.Resources;\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport androidx.annotation.DrawableRes;\nimport androidx.fragment.app.Fragment;\n\n/**\n * ViewHolder part with user info layout\n */\npublic abstract class UserHeaderViewHolder extends BaseViewHolder {\n    protected final int profileImageWidth;\n    private final Fragment fragment;\n\n    private ImageView profileImage;\n    private ImageViewContentLoader profileContentLoader;\n    private TextView profileName;\n    protected TextView elapsedTime;\n    protected View contextMenuButton;\n\n    private View userHeaderButton;\n    private static AppProfile appProfile;\n\n    public UserHeaderViewHolder(Fragment fragment, View view) {\n        super(view);\n        this.fragment = fragment;\n        this.profileImageWidth = view.getResources().getDimensionPixelSize(R.dimen.es_user_icon_size);\n        initViews(view);\n    }\n\n    public static void setAppProfile(AppProfile customAppProfile) {\n        appProfile = customAppProfile;\n    }\n\n    private void initViews(View view) {\n        userHeaderButton = view.findViewById(R.id.es_userHeaderButton);\n        profileImage = (ImageView) view.findViewById(R.id.es_profileImage);\n        profileContentLoader = new UserPhotoLoader(profileImage);\n        profileName = (TextView) view.findViewById(R.id.es_profileName);\n        elapsedTime = (TextView) view.findViewById(R.id.es_postTime);\n\n        contextMenuButton = view.findViewById(R.id.es_contextMenuButton);\n    }\n\n    protected void renderUserHeader(TopicView topic) {\n        if (topic.getPublisherType() == PublisherType.USER) {\n            setName(topic.getUser().getFirstName(), topic.getUser().getLastName());\n            setProfileImage(topic.getUser().getUserPhotoUrl());\n            contextMenuButton.setTag(R.id.es_keyIsOwnContent,\n                    topic.getUser().getHandle().equals(Preferences.getInstance().getUserHandle()));\n            contextMenuButton.setTag(R.id.es_keyFollowerStatus, topic.getUser().getFollowerStatus());\n            contextMenuButton.setTag(R.id.es_keyUser, topic.getUser());\n            userHeaderButton.setTag(R.id.es_keyUser, topic.getUser());\n        } else if (appProfile != null) { // PublisherType.APP\n            try {\n                profileName.setText(getContext().getString(appProfile.getName()));\n            } catch (Resources.NotFoundException e) {\n                DebugLog.logException(e);\n            }\n            try {\n                int imageId = appProfile.getImage();\n                // Test to ensure the resource exists\n                getResources().getResourceName(imageId);\n                setProfileImage(imageId);\n            } catch (Resources.NotFoundException e) {\n                DebugLog.logException(e);\n            }\n        }\n        setTime(topic.getElapsedSeconds());\n\n        contextMenuButton.setTag(R.id.es_keyTopic, topic);\n    }\n\n    protected void renderUserHeader(ReplyView reply) {\n        UserCompactView user = reply.getUser();\n        setName(user.getFirstName(), user.getLastName());\n        setTime(reply.getElapsedSeconds());\n        setProfileImage(user.getUserPhotoUrl());\n\n        contextMenuButton.setTag(R.id.es_keyHandle, reply.getHandle());\n        contextMenuButton.setTag(R.id.es_keyIsOwnContent,\n            user.getHandle().equals(Preferences.getInstance().getUserHandle()));\n        contextMenuButton.setTag(R.id.es_keyFollowerStatus, user.getFollowerStatus());\n        contextMenuButton.setTag(R.id.es_keyUser, user);\n        userHeaderButton.setTag(R.id.es_keyUser, user);\n    }\n\n    protected void renderUserHeader(UserCompactView user, String topicHandle, long elapsedTime) {\n        setName(user.getFirstName(), user.getLastName());\n        setTime(elapsedTime);\n        setProfileImage(user.getUserPhotoUrl());\n\n        contextMenuButton.setTag(R.id.es_keyHandle, topicHandle);\n        contextMenuButton.setTag(R.id.es_keyIsOwnContent, UserAccount.getInstance().isCurrentUser(user.getHandle()));\n        contextMenuButton.setTag(R.id.es_keyFollowerStatus, user.getFollowerStatus());\n        contextMenuButton.setTag(R.id.es_keyUser, user);\n        userHeaderButton.setTag(R.id.es_keyUser, user);\n    }\n\n    protected void setContextMenuClickListener(View.OnClickListener contextMenuClickListener) {\n        contextMenuButton.setOnClickListener(contextMenuClickListener);\n    }\n\n    protected void setHeaderClickable(boolean clickable) {\n        userHeaderButton.setOnClickListener(clickable ? new UserHeaderClickListener(fragment) : null);\n        userHeaderButton.setClickable(clickable);\n    }\n\n    private void setName(String firstName, String lastName) {\n        profileName.setText(String.format(\"%s %s\", firstName, lastName));\n    }\n\n    private void setTime(long elapsedSeconds) {\n        this.elapsedTime.setText(TimeUtils.secondsToText(this.elapsedTime.getResources(), elapsedSeconds));\n    }\n\n    private void setProfileImage(String photoUrl) {\n        ContentUpdateHelper.setProfileImage(getContext(), profileContentLoader, photoUrl);\n    }\n\n    private void setProfileImage(@DrawableRes int imageResId) {\n        ContentUpdateHelper.setProfileImage(profileContentLoader, imageResId);\n    }\n\n<fim_suffix>    private static class UserHeaderClickListener implements View.OnClickListener {\n        private final Fragment fragment;\n\n        public UserHeaderClickListener(Fragment fragment) {\n            this.fragment = fragment;\n        }\n\n        @Override\n        public void onClick(View view) {\n            UserCompactView user = (UserCompactView) view.getTag(R.id.es_keyUser);\n            EventBus.post(new OpenUserProfileEvent(fragment, user));\n        }\n    }\n\n    public enum HolderType {\n        /**\n         * For the main page content (top of the page)\n         */\n        CONTENT,\n        /**\n         * for feed content\n         */\n        FEED\n    }\n}<fim_middle>// class below has no smell\n"}