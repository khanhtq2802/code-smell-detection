{"text": "<fim_prefix>            case JDK_16: return JDK_16_STRING;\n            case JDK_17: return JDK_17_STRING;\n            case JDK_18: return JDK_18_STRING;\n            case JDK_19: return JDK_19_STRING;\n            case JDK_100: return JDK_100_STRING;\n            case JDK_110: return JDK_110_STRING;\n            case JDK_CVM: return JDK_CVM_STRING;\n            case JDK_UNSUPPORTED: return JDK_UNSUPPORTED_STRING;\n        }\n        System.err.println(\"Unsupported java \"+javaVersionString);\n        return JDK_UNSUPPORTED_STRING;\n    }\n    /**\n     * Returns the string for, essentially, JFluid directory corresponding to a particular JDK version the TA runs on.\n     * Currently it's \"jdk15\" for JDK 1.5 version, \"jdk16\" for JDK 1.6 version, \"jdk17\" for JDK 1.7 version,\n     * \"jdk18\" for JDK 1.8 version, \"jdk19\" for JDK 1.9 version and \"cvm\" for CVM\n     */\n    public static String getJDKVersionString() {\n        if (jdkDenoteString == null) {\n            jdkDenoteString = getJDKVersionString(getJavaVersionString());\n        }\n        return jdkDenoteString;\n    }\n    public static String getJavaVersionString() {\n        // This is ugly hack for CVM. CVM cannot be identified using java.version\n        // system property and we have to use java.vm.name which is hardcoded\n        // to \"CVM\"\n        String vmVersion = System.getProperty(\"java.vm.name\");   // NOI18N\n        if (\"CVM\".equals(vmVersion)) {\n            return vmVersion;\n        }\n        return System.getProperty(\"java.version\");  // NOI18N\n    }\n    public static String getJFluidNativeLibDirName(String fullJFluidPath, String jdkString, int architecture) {\n        String jFluidNativeLibFullName = getAgentNativeLibFullName(fullJFluidPath, false, jdkString, architecture);\n        return jFluidNativeLibFullName.substring(0, jFluidNativeLibFullName.lastIndexOf('/')); // NOI18N\n    }\n    /**\n     * Test whether we are running on Linux\n     */\n    public static boolean isLinux() {\n        return (getOperatingSystem() == OS_LINUX);\n    }\n    /**\n     * Test whether the supplied OS name is Linux\n     */\n    public static boolean isLinux(String osName) {\n        return (getOperatingSystem(osName) == OS_LINUX);\n    }\n    public static boolean isMac() {\n        return (getOperatingSystem() == OS_MAC);\n    }\n    public static boolean isHpux() {\n        return (getOperatingSystem() == OS_HP);\n    }\n    /**\n     * Get the operating system on which we are is running.\n     * Returns one of the <code>OS_*</code> constants (such as {@link #OS_WINNT})\n     */\n    public static int getOperatingSystem() {\n        if (operatingSystem == -1) {\n            String osName = System.getProperty(\"os.name\"); // NOI18N\n            operatingSystem = getOperatingSystem(osName);\n        }\n        return operatingSystem;\n    }\n    public static int getOperatingSystem(String osName) {\n        if (\"Windows NT\".equals(osName)) { // NOI18N\n            return OS_WINNT;\n        } else if (\"Windows 95\".equals(osName)) { // NOI18N\n            return OS_WIN95;\n        } else if (\"Windows 98\".equals(osName)) { // NOI18N\n            return OS_WIN98;\n        } else if (\"Windows 2000\".equals(osName)) { // NOI18N\n            return OS_WIN2000;\n        } else if (osName.startsWith(\"Windows \")) { // NOI18N\n            return OS_WIN_OTHER;\n        } else if (\"Solaris\".equals(osName)) { // NOI18N\n            return OS_SOLARIS;\n        } else if (osName.startsWith(\"SunOS\")) { // NOI18N\n            return OS_SOLARIS;\n        } else if (osName.endsWith(\"Linux\")) { // NOI18N\n            return OS_LINUX;\n        } else if (\"HP-UX\".equals(osName)) { // NOI18N\n            return OS_HP;\n        } else if (\"AIX\".equals(osName)) { // NOI18N\n            return OS_AIX;\n        } else if (\"Irix\".equals(osName)) { // NOI18N\n            return OS_IRIX;\n        } else if (\"SunOS\".equals(osName)) { // NOI18N\n            return OS_SOLARIS;\n        } else if (\"Digital UNIX\".equals(osName)) { // NOI18N\n            return OS_TRU64;\n        } else if (\"OS/2\".equals(osName)) { // NOI18N\n            return OS_OS2;\n        } else if (\"OpenVMS\".equals(osName)) { // NOI18N\n            return OS_VMS;\n        } else if (osName.equalsIgnoreCase(\"mac os x\")) { // NOI18N\n            return OS_MAC;\n        } else if (osName.startsWith(\"Darwin\")) { // NOI18N\n            return OS_MAC;\n        } else {\n            return OS_OTHER;\n        }\n    }\n    public static String getProfilerUserDir() throws IOException {\n        String customDir = System.getProperty(\"nbprofiler.home\"); // NOI18N\n        if (customDir != null) {\n            File d = new File(customDir);\n            if (!d.exists()) {\n                if (!d.mkdir()) {\n                    throw new IOException(\"Could not create directory \" + customDir); // NOI18N\n                }\n            }\n            return customDir;\n        } else {\n            // use default location\n            String dir = System.getProperty(\"user.home\") + File.separator + \".nbprofiler\"; // NOI18N\n            File d = new File(dir);\n            if (!d.exists()) {\n                if (!d.mkdir()) {\n                    throw new IOException(\"Could not create directory \" + dir); // NOI18N\n                }\n            }\n            return dir;\n        }\n    }\n    /**\n     * Test whether we are running on Solaris\n     */\n    public static boolean isSolaris() {\n        return (getOperatingSystem() == OS_SOLARIS);\n    }\n    /**\n     * Test whether we are running on Solaris on Intel processor\n     */\n    public static boolean isSolarisIntel() {\n        String procArch = System.getProperty(\"os.arch\"); // NOI18N\n        return isSolaris() && (procArch.endsWith(\"86\") || procArch.equals(\"amd64\")); // NOI18N\n    }\n    /**\n     * Test whether we are running on Solaris on SPARC processor\n     */\n    public static boolean isSolarisSparc() {\n        String procArch = System.getProperty(\"os.arch\"); // NOI18N\n        return isSolaris() && procArch.startsWith(\"sparc\"); // NOI18N\n    }\n    /**\n     * Test whether we are running on Linux on ARM processor\n     */\n    public static boolean isLinuxArm() {\n        String procArch = System.getProperty(\"os.arch\"); // NOI18N\n        return isLinux() && procArch.startsWith(\"arm\"); // NOI18N\n    }\n    /**\n     * Test whether we are running on Linux on ARM processor with Hard float ABI\n     */\n    public static boolean isLinuxArmVfpHflt() {\n        String procArch = System.getProperty(\"sun.arch.abi\"); // NOI18N\n        return isLinux() && isLinuxArm() && \"gnueabihf\".equals(procArch); // NOI18N\n    }\n    /**\n     * Returns system architecture: 32/64bit\n     */\n    public static int getSystemArchitecture() {\n        if (sysArch == 0) {\n            String architecture = System.getProperty(\"sun.arch.data.model\"); // NOI18N\n            sysArch = getSystemArchitecture(architecture);\n        }\n        return sysArch;\n    }\n    public static int getSystemArchitecture(String arch) {\n        return \"64\".equals(arch) ? ARCH_64 : ARCH_32;\n    }\n    /**\n     * Test whether we are running on some variant of Unix. Linux is included as well as the commercial vendors.\n     */\n    public static boolean isUnix() {\n        return (getOperatingSystem() & OS_UNIX_MASK) != 0;\n    }\n    /**\n     * Test whether we are is running on some variant of Windows\n     */\n    public static boolean isWindows() {\n        return (getOperatingSystem() & OS_WINDOWS_MASK) != 0;\n    }\n    /**\n     * Test whether the supplied OS name is some variant of Windows\n     */\n<fim_suffix>    public static boolean isWindows(String osName) {\n        return (getOperatingSystem(osName) & OS_WINDOWS_MASK) != 0;\n    }<fim_middle>// function below has no smell\n"}