{"text": "<fim_prefix>\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof StellarListener ) ((StellarListener)listener).exitArithExpr_minus(this);\n\t\t}\n\t}\n\tpublic static class ArithExpr_plusContext extends Arithmetic_exprContext {\n\t\tpublic Arithmetic_exprContext arithmetic_expr() {\n\t\t\treturn getRuleContext(Arithmetic_exprContext.class,0);\n\t\t}\n\t\tpublic TerminalNode PLUS() { return getToken(StellarParser.PLUS, 0); }\n\t\tpublic Arithmetic_expr_mulContext arithmetic_expr_mul() {\n\t\t\treturn getRuleContext(Arithmetic_expr_mulContext.class,0);\n\t\t}\n\t\tpublic ArithExpr_plusContext(Arithmetic_exprContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof StellarListener ) ((StellarListener)listener).enterArithExpr_plus(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof StellarListener ) ((StellarListener)listener).exitArithExpr_plus(this);\n\t\t}\n\t}\n\tpublic final Arithmetic_exprContext arithmetic_expr() throws RecognitionException {\n\t\treturn arithmetic_expr(0);\n\t}\n\tprivate Arithmetic_exprContext arithmetic_expr(int _p) throws RecognitionException {\n\t\tParserRuleContext _parentctx = _ctx;\n\t\tint _parentState = getState();\n\t\tArithmetic_exprContext _localctx = new Arithmetic_exprContext(_ctx, _parentState);\n\t\tArithmetic_exprContext _prevctx = _localctx;\n\t\tint _startState = 34;\n\t\tenterRecursionRule(_localctx, 34, RULE_arithmetic_expr, _p);\n\t\ttry {\n\t\t\tint _alt;\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\t{\n\t\t\t_localctx = new ArithExpr_soloContext(_localctx);\n\t\t\t_ctx = _localctx;\n\t\t\t_prevctx = _localctx;\n\t\t\tsetState(227);\n\t\t\tarithmetic_expr_mul(0);\n\t\t\t}\n\t\t\t_ctx.stop = _input.LT(-1);\n\t\t\tsetState(237);\n\t\t\t_errHandler.sync(this);\n\t\t\t_alt = getInterpreter().adaptivePredict(_input,17,_ctx);\n\t\t\twhile ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n\t\t\t\tif ( _alt==1 ) {\n\t\t\t\t\tif ( _parseListeners!=null ) triggerExitRuleEvent();\n\t\t\t\t\t_prevctx = _localctx;\n\t\t\t\t\t{\n\t\t\t\t\tsetState(235);\n\t\t\t\t\tswitch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new ArithExpr_plusContext(new Arithmetic_exprContext(_parentctx, _parentState));\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);\n\t\t\t\t\t\tsetState(229);\n\t\t\t\t\t\tif (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, \"precpred(_ctx, 2)\");\n\t\t\t\t\t\tsetState(230);\n\t\t\t\t\t\tmatch(PLUS);\n\t\t\t\t\t\tsetState(231);\n\t\t\t\t\t\tarithmetic_expr_mul(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new ArithExpr_minusContext(new Arithmetic_exprContext(_parentctx, _parentState));\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);\n\t\t\t\t\t\tsetState(232);\n\t\t\t\t\t\tif (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, \"precpred(_ctx, 1)\");\n\t\t\t\t\t\tsetState(233);\n\t\t\t\t\t\tmatch(MINUS);\n\t\t\t\t\t\tsetState(234);\n\t\t\t\t\t\tarithmetic_expr_mul(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tsetState(239);\n\t\t\t\t_errHandler.sync(this);\n\t\t\t\t_alt = getInterpreter().adaptivePredict(_input,17,_ctx);\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\tunrollRecursionContexts(_parentctx);\n\t\t}\n\t\treturn _localctx;\n\t}\n\tpublic static class Arithmetic_expr_mulContext extends ParserRuleContext {\n\t\tpublic Arithmetic_expr_mulContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_arithmetic_expr_mul; }\n\t\tpublic Arithmetic_expr_mulContext() { }\n\t\tpublic void copyFrom(Arithmetic_expr_mulContext ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\t}\n\tpublic static class ArithExpr_divContext extends Arithmetic_expr_mulContext {\n\t\tpublic List<Arithmetic_expr_mulContext> arithmetic_expr_mul() {\n\t\t\treturn getRuleContexts(Arithmetic_expr_mulContext.class);\n\t\t}\n\t\tpublic Arithmetic_expr_mulContext arithmetic_expr_mul(int i) {\n\t\t\treturn getRuleContext(Arithmetic_expr_mulContext.class,i);\n\t\t}\n\t\tpublic TerminalNode DIV() { return getToken(StellarParser.DIV, 0); }\n\t\tpublic ArithExpr_divContext(Arithmetic_expr_mulContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof StellarListener ) ((StellarListener)listener).enterArithExpr_div(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof StellarListener ) ((StellarListener)listener).exitArithExpr_div(this);\n\t\t}\n\t}\n\tpublic static class ArithExpr_mul_soloContext extends Arithmetic_expr_mulContext {\n\t\tpublic Arithmetic_operandsContext arithmetic_operands() {\n\t\t\treturn getRuleContext(Arithmetic_operandsContext.class,0);\n\t\t}\n\t\tpublic ArithExpr_mul_soloContext(Arithmetic_expr_mulContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof StellarListener ) ((StellarListener)listener).enterArithExpr_mul_solo(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof StellarListener ) ((StellarListener)listener).exitArithExpr_mul_solo(this);\n\t\t}\n\t}\n<fim_suffix>\tpublic static class ArithExpr_mulContext extends Arithmetic_expr_mulContext {\n\t\tpublic List<Arithmetic_expr_mulContext> arithmetic_expr_mul() {\n\t\t\treturn getRuleContexts(Arithmetic_expr_mulContext.class);\n\t\t}\n\t\tpublic Arithmetic_expr_mulContext arithmetic_expr_mul(int i) {\n\t\t\treturn getRuleContext(Arithmetic_expr_mulContext.class,i);\n\t\t}\n\t\tpublic TerminalNode MUL() { return getToken(StellarParser.MUL, 0); }\n\t\tpublic ArithExpr_mulContext(Arithmetic_expr_mulContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof StellarListener ) ((StellarListener)listener).enterArithExpr_mul(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof StellarListener ) ((StellarListener)listener).exitArithExpr_mul(this);\n\t\t}\n\t}<fim_middle>// class below has no smell\n"}