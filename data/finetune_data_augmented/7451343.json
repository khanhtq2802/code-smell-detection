{"text": "<fim_prefix>/*\n * Copyright (c) 2017, 2018, Oracle and/or its affiliates.\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this list of\n * conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other materials provided\n * with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n * endorse or promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.oracle.truffle.llvm.nodes.asm;\n\nimport com.oracle.truffle.api.dsl.NodeChild;\nimport com.oracle.truffle.api.dsl.Specialization;\nimport com.oracle.truffle.api.frame.VirtualFrame;\nimport com.oracle.truffle.llvm.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPAZSOFlagsNode;\nimport com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode;\nimport com.oracle.truffle.llvm.runtime.nodes.api.LLVMStatementNode;\n\n@NodeChild(value = \"left\", type = LLVMExpressionNode.class)\n@NodeChild(value = \"right\", type = LLVMExpressionNode.class)\npublic abstract class LLVMAMD64CmpNode extends LLVMStatementNode {\n    @Child protected LLVMAMD64UpdateCPAZSOFlagsNode flags;\n\n    public LLVMAMD64CmpNode(LLVMAMD64UpdateCPAZSOFlagsNode flags) {\n        this.flags = flags;\n    }\n\n    public abstract static class LLVMAMD64CmpbNode extends LLVMAMD64CmpNode {\n<fim_suffix>        public LLVMAMD64CmpbNode(LLVMAMD64UpdateCPAZSOFlagsNode flags) {\n            super(flags);\n        }\n\n        @Specialization\n        protected void doOp(VirtualFrame frame, byte left, byte right) {\n            int result = left - right;\n            boolean overflow = (byte) ((left ^ right) & (left ^ result)) < 0;\n            boolean carry = Byte.toUnsignedInt(left) < Byte.toUnsignedInt(right);\n            boolean adjust = (((left ^ right) ^ result) & 0x10) != 0;\n            flags.execute(frame, overflow, carry, adjust, result);\n        }\n    }\n\n    public abstract static class LLVMAMD64CmpwNode extends LLVMAMD64CmpNode {\n        public LLVMAMD64CmpwNode(LLVMAMD64UpdateCPAZSOFlagsNode flags) {\n            super(flags);\n        }\n\n        @Specialization\n        protected void doOp(VirtualFrame frame, short left, short right) {\n            int result = left - right;\n            boolean overflow = (short) ((left ^ right) & (left ^ result)) < 0;\n            boolean carry = Short.toUnsignedInt(left) < Short.toUnsignedInt(right);\n            boolean adjust = (((left ^ right) ^ result) & 0x10) != 0;\n            flags.execute(frame, overflow, carry, adjust, result);\n        }\n    }\n\n    public abstract static class LLVMAMD64CmplNode extends LLVMAMD64CmpNode {\n        public LLVMAMD64CmplNode(LLVMAMD64UpdateCPAZSOFlagsNode flags) {\n            super(flags);\n        }\n\n        @Specialization\n        protected void doOp(VirtualFrame frame, int left, int right) {\n            int result = left - right;\n            boolean overflow = ((left ^ right) & (left ^ result)) < 0;\n            boolean carry = Integer.compareUnsigned(left, right) < 0;\n            boolean adjust = (((left ^ right) ^ result) & 0x10) != 0;\n            flags.execute(frame, overflow, carry, adjust, result);\n        }\n    }\n\n    public abstract static class LLVMAMD64CmpqNode extends LLVMAMD64CmpNode {\n        public LLVMAMD64CmpqNode(LLVMAMD64UpdateCPAZSOFlagsNode flags) {\n            super(flags);\n        }\n\n        @Specialization\n        protected void doOp(VirtualFrame frame, long left, long right) {\n            long result = left - right;\n            boolean overflow = ((left ^ right) & (left ^ result)) < 0;\n            boolean carry = Long.compareUnsigned(left, right) < 0;\n            boolean adjust = (((left ^ right) ^ result) & 0x10) != 0;\n            flags.execute(frame, overflow, carry, adjust, result);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}