{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.apache.skywalking.oap.server.library.buffer;\n\nimport java.io.*;\nimport java.nio.charset.Charset;\nimport java.util.concurrent.*;\nimport lombok.Getter;\nimport org.apache.commons.io.*;\nimport org.apache.commons.io.filefilter.PrefixFileFilter;\nimport org.apache.commons.io.input.ReversedLinesFileReader;\nimport org.apache.skywalking.apm.util.RunnableWithExceptionProtection;\nimport org.slf4j.*;\n\n/**\n * @author peng-yongsheng\n */\n<fim_suffix>class OffsetStream {\n\n    private static final Logger logger = LoggerFactory.getLogger(OffsetStream.class);\n\n    private final File directory;\n    private final int offsetFileMaxSize;\n\n    @Getter private final Offset offset;\n    private File offsetFile;\n    private boolean initialized = false;\n    private String lastOffsetRecord = \"\";\n\n    OffsetStream(File directory, int offsetFileMaxSize) {\n        this.directory = directory;\n        this.offsetFileMaxSize = offsetFileMaxSize;\n        this.offset = new Offset();\n    }\n\n    void clean() throws IOException {\n        String[] fileNames = directory.list(new PrefixFileFilter(BufferFileUtils.OFFSET_FILE_PREFIX));\n        if (fileNames != null) {\n            for (String fileName : fileNames) {\n                File file = new File(directory, fileName);\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Delete buffer offset file: {}\", file.getAbsolutePath());\n                }\n                FileUtils.forceDelete(new File(directory, fileName));\n            }\n        }\n    }\n\n    synchronized void initialize() throws IOException {\n        if (!initialized) {\n            String[] fileNames = directory.list(new PrefixFileFilter(BufferFileUtils.OFFSET_FILE_PREFIX));\n            if (fileNames != null && fileNames.length > 0) {\n                BufferFileUtils.sort(fileNames);\n                offsetFile = new File(directory, fileNames[0]);\n            } else {\n                offsetFile = newFile();\n            }\n            offset.deserialize(readLastLine());\n            initialized = true;\n\n            Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(\n                new RunnableWithExceptionProtection(this::flush,\n                    t -> logger.error(\"Flush offset file in background failure.\", t)\n                ), 2, 1, TimeUnit.SECONDS);\n        }\n    }\n\n    void flush() {\n        try {\n            String offsetRecord = offset.serialize();\n            if (!lastOffsetRecord.equals(offsetRecord)) {\n                logger.debug(\"flush offset, record: {}\", offsetRecord);\n                if (offsetFile.length() >= FileUtils.ONE_MB * offsetFileMaxSize) {\n                    nextFile();\n                }\n\n                try (OutputStream out = new BufferedOutputStream(FileUtils.openOutputStream(offsetFile, true))) {\n                    IOUtils.write(offsetRecord, out, Charset.forName(BufferFileUtils.CHARSET));\n                    IOUtils.write(System.lineSeparator(), out, Charset.forName(BufferFileUtils.CHARSET));\n                }\n                lastOffsetRecord = offsetRecord;\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    private void nextFile() throws IOException {\n        File newOffsetFile = newFile();\n        if (!offsetFile.delete()) {\n            logger.warn(\"Offset file {} delete failure.\", newOffsetFile.getAbsolutePath());\n        }\n        offsetFile = newOffsetFile;\n        this.flush();\n    }\n\n    private File newFile() throws IOException {\n        String fileName = BufferFileUtils.buildFileName(BufferFileUtils.OFFSET_FILE_PREFIX);\n        File file = new File(directory, fileName);\n        if (file.createNewFile()) {\n            logger.info(\"Create a new offset file {}\", fileName);\n        }\n        return file;\n    }\n\n    private String readLastLine() throws IOException {\n        ReversedLinesFileReader reader = new ReversedLinesFileReader(offsetFile, Charset.forName(BufferFileUtils.CHARSET));\n        return reader.readLine();\n    }\n}<fim_middle>// class below has no smell\n"}