{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.druid.timeline.partition;\n\n<fim_suffix>public class LinearPartitionChunk<T> implements PartitionChunk<T>\n{\n  private final int chunkNumber;\n  private final T object;\n\n  public LinearPartitionChunk(\n      int chunkNumber,\n      T object\n  )\n  {\n    this.chunkNumber = chunkNumber;\n    this.object = object;\n  }\n\n  @Override\n  public T getObject()\n  {\n    return object;\n  }\n\n  @Override\n  public boolean abuts(PartitionChunk<T> chunk)\n  {\n    return true; // always complete\n  }\n\n  @Override\n  public boolean isStart()\n  {\n    return true; // always complete\n  }\n\n  @Override\n\n  public boolean isEnd()\n  {\n    return true; // always complete\n  }\n\n  @Override\n  public int getChunkNumber()\n  {\n    return chunkNumber;\n  }\n\n  @Override\n  public int compareTo(PartitionChunk<T> chunk)\n  {\n    if (chunk instanceof LinearPartitionChunk) {\n      LinearPartitionChunk<T> linearChunk = (LinearPartitionChunk<T>) chunk;\n\n      return Integer.compare(chunkNumber, linearChunk.chunkNumber);\n    }\n    throw new IllegalArgumentException(\"Cannot compare against something that is not a LinearPartitionChunk.\");\n  }\n\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    return compareTo((LinearPartitionChunk<T>) o) == 0;\n  }\n\n  @Override\n  public int hashCode()\n  {\n    return chunkNumber;\n  }\n}<fim_middle>// class below has no smell\n"}