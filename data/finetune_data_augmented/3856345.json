{"text": "<fim_prefix>import org.apache.ivy.core.module.descriptor.Configuration;\nimport org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;\nimport org.apache.ivy.core.module.descriptor.DependencyArtifactDescriptor;\nimport org.apache.ivy.core.module.descriptor.DependencyDescriptor;\nimport org.apache.ivy.core.module.descriptor.DependencyDescriptorMediator;\nimport org.apache.ivy.core.module.descriptor.ExcludeRule;\nimport org.apache.ivy.core.module.descriptor.ExtendsDescriptor;\nimport org.apache.ivy.core.module.descriptor.ExtraInfoHolder;\nimport org.apache.ivy.core.module.descriptor.IncludeRule;\nimport org.apache.ivy.core.module.descriptor.License;\nimport org.apache.ivy.core.module.descriptor.ModuleDescriptor;\nimport org.apache.ivy.core.module.descriptor.OverrideDependencyDescriptorMediator;\nimport org.apache.ivy.core.module.id.ModuleRevisionId;\nimport org.apache.ivy.plugins.matcher.MapMatcher;\nimport org.apache.ivy.util.DateUtil;\nimport org.apache.ivy.util.Message;\nimport org.apache.ivy.util.XMLHelper;\nimport org.apache.ivy.util.extendable.ExtendableItem;\nimport static org.apache.ivy.util.StringUtils.isNullOrEmpty;\nimport static org.apache.ivy.util.StringUtils.joinArray;\n/**\n *\n */\npublic final class XmlModuleDescriptorWriter {\n    private XmlModuleDescriptorWriter() {\n        // Utility class\n    }\n    public static void write(ModuleDescriptor md, File output) throws IOException {\n        write(md, null, output);\n    }\n    public static void write(ModuleDescriptor md, String licenseHeader, File output)\n            throws IOException {\n        if (output.getParentFile() != null) {\n            output.getParentFile().mkdirs();\n        }\n        try (PrintWriter out = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output),\n                StandardCharsets.UTF_8))) {\n            out.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n            if (licenseHeader != null) {\n                out.print(licenseHeader);\n            }\n            StringBuilder xmlNamespace = new StringBuilder();\n            Map<String, String> namespaces = md.getExtraAttributesNamespaces();\n            for (Map.Entry<String, String> ns : namespaces.entrySet()) {\n                xmlNamespace.append(\" xmlns:\").append(ns.getKey()).append(\"=\\\"\")\n                        .append(ns.getValue()).append(\"\\\"\");\n            }\n            String version = \"2.0\";\n            if (md.getInheritedDescriptors().length > 0) {\n                version = \"2.2\";\n            }\n            out.println(\"<ivy-module version=\\\"\" + version + \"\\\"\" + xmlNamespace + \">\");\n            printInfoTag(md, out);\n            printConfigurations(md, out);\n            printPublications(md, out);\n            printDependencies(md, out);\n            out.println(\"</ivy-module>\");\n        }\n    }\n    private static void printDependencies(ModuleDescriptor md, PrintWriter out) {\n        DependencyDescriptor[] dds = md.getDependencies();\n        if (dds.length > 0) {\n            out.println(\"\\t<dependencies>\");\n            for (DependencyDescriptor dep : dds) {\n                out.print(\"\\t\\t\");\n                printDependency(md, dep, out);\n            }\n            printAllExcludes(md, out);\n            printAllMediators(md, out);\n            out.println(\"\\t</dependencies>\");\n        }\n    }\n    protected static void printDependency(ModuleDescriptor md, DependencyDescriptor dep,\n            PrintWriter out) {\n        final ModuleRevisionId dependencyRevisionId = dep.getDependencyRevisionId();\n        out.print(String.format(\"<dependency org=\\\"%s\\\" name=\\\"%s\\\"\",\n                XMLHelper.escape(dependencyRevisionId.getOrganisation()),\n                XMLHelper.escape(dependencyRevisionId.getName())));\n        if (dependencyRevisionId.getBranch() != null) {\n            out.print(\" branch=\\\"\" + XMLHelper.escape(dependencyRevisionId.getBranch()) + \"\\\"\");\n        }\n        out.print(\" rev=\\\"\" + XMLHelper.escape(dependencyRevisionId.getRevision()) + \"\\\"\");\n        final ModuleRevisionId dynamicConstraintDependencyRevisionId =\n                dep.getDynamicConstraintDependencyRevisionId();\n        if (!dynamicConstraintDependencyRevisionId.equals(dependencyRevisionId)) {\n            if (dynamicConstraintDependencyRevisionId.getBranch() != null) {\n                out.print(\" branchConstraint=\\\"\"\n                        + XMLHelper.escape(dynamicConstraintDependencyRevisionId.getBranch())\n                        + \"\\\"\");\n            }\n            out.print(\" revConstraint=\\\"\"\n                    + XMLHelper.escape(dynamicConstraintDependencyRevisionId.getRevision())\n                    + \"\\\"\");\n        }\n        if (dep.isForce()) {\n            out.print(\" force=\\\"\" + dep.isForce() + \"\\\"\");\n        }\n        if (dep.isChanging()) {\n            out.print(\" changing=\\\"\" + dep.isChanging() + \"\\\"\");\n        }\n        if (!dep.isTransitive()) {\n            out.print(\" transitive=\\\"\" + dep.isTransitive() + \"\\\"\");\n        }\n        StringBuilder sb = new StringBuilder();\n        for (String modConf : dep.getModuleConfigurations()) {\n            if (sb.length() > 0) {\n                sb.append(\";\");\n            }\n            sb.append(XMLHelper.escape(modConf)).append(\n                    listToPrefixedString(dep.getDependencyConfigurations(modConf), \"->\"));\n        }\n        out.print(\" conf=\\\"\" + sb + \"\\\"\");\n        printExtraAttributes(dep, out, \" \");\n        DependencyArtifactDescriptor[] depArtifacts = dep.getAllDependencyArtifacts();\n        if (depArtifacts.length > 0) {\n            out.println(\">\");\n        }\n        printDependencyArtefacts(md, out, depArtifacts);\n        IncludeRule[] includes = dep.getAllIncludeRules();\n        if (includes.length > 0 && depArtifacts.length == 0) {\n            out.println(\">\");\n        }\n        printDependencyIncludeRules(md, out, includes);\n        ExcludeRule[] excludes = dep.getAllExcludeRules();\n        if (excludes.length > 0 && includes.length == 0 && depArtifacts.length == 0) {\n            out.println(\">\");\n        }\n        printDependencyExcludeRules(md, out, excludes);\n        if (includes.length + excludes.length + depArtifacts.length == 0) {\n            out.println(\"/>\");\n        } else {\n            out.println(\"\\t\\t</dependency>\");\n        }\n    }\n    private static void printAllMediators(ModuleDescriptor md, PrintWriter out) {\n        Map<MapMatcher, DependencyDescriptorMediator> mediators = md\n                .getAllDependencyDescriptorMediators().getAllRules();\n        for (Map.Entry<MapMatcher, DependencyDescriptorMediator> mediatorRule : mediators.entrySet()) {\n            MapMatcher matcher = mediatorRule.getKey();\n            DependencyDescriptorMediator mediator = mediatorRule.getValue();\n            if (mediator instanceof OverrideDependencyDescriptorMediator) {\n                OverrideDependencyDescriptorMediator oddm = (OverrideDependencyDescriptorMediator) mediator;\n                out.print(String.format(\"\\t\\t<override org=\\\"%s\\\" module=\\\"%s\\\" matcher=\\\"%s\\\"\",\n                        XMLHelper.escape(matcher.getAttributes().get(IvyPatternHelper.ORGANISATION_KEY)),\n                        XMLHelper.escape(matcher.getAttributes().get(IvyPatternHelper.MODULE_KEY)),\n                        XMLHelper.escape(matcher.getPatternMatcher().getName())\n                ));\n                if (oddm.getBranch() != null) {\n                    out.print(\" branch=\\\"\" + XMLHelper.escape(oddm.getBranch()) + \"\\\"\");\n                }\n                if (oddm.getVersion() != null) {\n                    out.print(\" rev=\\\"\" + XMLHelper.escape(oddm.getVersion()) + \"\\\"\");\n                }\n                out.println(\"/>\");\n            } else {\n                Message.verbose(\"ignoring unhandled DependencyDescriptorMediator: \"\n                        + mediator.getClass());\n            }\n        }\n    }\n<fim_suffix>    private static void printAllExcludes(ModuleDescriptor md, PrintWriter out) {\n        ExcludeRule[] excludes = md.getAllExcludeRules();\n        if (excludes.length > 0) {\n            for (ExcludeRule exclude : excludes) {\n                out.print(String.format(\"\\t\\t<exclude org=\\\"%s\\\" module=\\\"%s\\\" artifact=\\\"%s\\\" type=\\\"%s\\\" ext=\\\"%s\\\"\",\n                        XMLHelper.escape(exclude.getId().getModuleId().getOrganisation()),\n                        XMLHelper.escape(exclude.getId().getModuleId().getName()),\n                        XMLHelper.escape(exclude.getId().getName()),\n                        XMLHelper.escape(exclude.getId().getType()),\n                        XMLHelper.escape(exclude.getId().getExt())));\n                String[] ruleConfs = exclude.getConfigurations();\n                if (!Arrays.asList(ruleConfs).equals(Arrays.asList(md.getConfigurationsNames()))) {\n                    out.print(listToPrefixedString(ruleConfs, \" conf=\\\"\"));\n                }\n                out.print(\" matcher=\\\"\" + XMLHelper.escape(exclude.getMatcher().getName()) + \"\\\"\");\n                out.println(\"/>\");\n            }\n        }\n    }<fim_middle>// function below is feature envy\n"}