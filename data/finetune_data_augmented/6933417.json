{"text": "<fim_prefix>/* Copyright (c) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage com.google.gdata.data.photos;\n\nimport com.google.gdata.data.AbstractExtension;\nimport com.google.gdata.data.AttributeGenerator;\nimport com.google.gdata.data.AttributeHelper;\nimport com.google.gdata.data.ExtensionDescription;\nimport com.google.gdata.util.ParseException;\n\n/**\n * If viewer starred the photo and total number of stars.\n *\n * \n */\n@ExtensionDescription.Default(\n    nsAlias = Namespaces.PHOTOS_ALIAS,\n    nsUri = Namespaces.PHOTOS,\n    localName = GphotoStarred.XML_NAME)\npublic class GphotoStarred extends AbstractExtension {\n\n  /** XML element name */\n  static final String XML_NAME = \"starred\";\n\n  /** XML \"total\" attribute name */\n  private static final String TOTAL = \"total\";\n\n  /** Number of stars */\n  private Integer total = null;\n\n  /** Viewer starred photo */\n  private Boolean value = null;\n\n  /**\n   * Default mutable constructor.\n   */\n  public GphotoStarred() {\n    super();\n  }\n\n  /**\n   * Immutable constructor.\n   *\n   * @param total number of stars.\n   * @param value viewer starred photo.\n   */\n  public GphotoStarred(Integer total, Boolean value) {\n    super();\n    setTotal(total);\n    setValue(value);\n    setImmutable(true);\n  }\n\n  /**\n   * Returns the number of stars.\n   *\n   * @return number of stars\n   */\n  public Integer getTotal() {\n    return total;\n  }\n\n  /**\n   * Sets the number of stars.\n   *\n   * @param total number of stars or <code>null</code> to reset\n   */\n  public void setTotal(Integer total) {\n    throwExceptionIfImmutable();\n    this.total = total;\n  }\n\n  /**\n   * Returns whether it has the number of stars.\n   *\n   * @return whether it has the number of stars\n   */\n  public boolean hasTotal() {\n    return getTotal() != null;\n  }\n\n  /**\n   * Returns the viewer starred photo.\n   *\n   * @return viewer starred photo\n   */\n  public Boolean getValue() {\n    return value;\n  }\n\n  /**\n   * Sets the viewer starred photo.\n   *\n   * @param value viewer starred photo or <code>null</code> to reset\n   */\n  public void setValue(Boolean value) {\n    throwExceptionIfImmutable();\n    this.value = value;\n  }\n\n  /**\n   * Returns whether it has the viewer starred photo.\n   *\n   * @return whether it has the viewer starred photo\n   */\n  public boolean hasValue() {\n    return getValue() != null;\n  }\n\n  @Override\n  protected void validate() {\n  }\n\n  /**\n   * Returns the extension description, specifying whether it is required, and\n   * whether it is repeatable.\n   *\n   * @param required   whether it is required\n   * @param repeatable whether it is repeatable\n   * @return extension description\n   */\n  public static ExtensionDescription getDefaultDescription(boolean required,\n      boolean repeatable) {\n    ExtensionDescription desc =\n        ExtensionDescription.getDefaultDescription(GphotoStarred.class);\n    desc.setRequired(required);\n    desc.setRepeatable(repeatable);\n    return desc;\n  }\n\n  @Override\n  protected void putAttributes(AttributeGenerator generator) {\n    generator.put(TOTAL, total);\n    generator.setContent(value.toString());\n  }\n\n<fim_suffix>  @Override\n  protected void consumeAttributes(AttributeHelper helper) throws ParseException\n      {\n    total = helper.consumeInteger(TOTAL, false);\n    value = helper.consumeBoolean(null, false);\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (!sameClassAs(obj)) {\n      return false;\n    }\n    GphotoStarred other = (GphotoStarred) obj;\n    return eq(total, other.total)\n        && eq(value, other.value);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = getClass().hashCode();\n    if (total != null) {\n      result = 37 * result + total.hashCode();\n    }\n    if (value != null) {\n      result = 37 * result + value.hashCode();\n    }\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"{GphotoStarred total=\" + total + \" value=\" + value + \"}\";\n  }\n\n}<fim_middle>// function below has no smell\n"}