{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.junit;\n\nimport java.io.Serializable;\nimport java.net.URI;\nimport java.util.Map;\nimport javax.jms.BytesMessage;\nimport javax.jms.JMSException;\nimport javax.jms.MapMessage;\nimport javax.jms.Message;\nimport javax.jms.MessageProducer;\nimport javax.jms.ObjectMessage;\nimport javax.jms.TextMessage;\n\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\n<fim_suffix>public abstract class AbstractActiveMQProducerResource extends AbstractActiveMQClientResource {\n    MessageProducer producer;\n\n    public AbstractActiveMQProducerResource(ActiveMQConnectionFactory connectionFactory) {\n        super(connectionFactory);\n    }\n\n    public AbstractActiveMQProducerResource(URI brokerURI) {\n        super(brokerURI);\n    }\n\n    public AbstractActiveMQProducerResource(EmbeddedActiveMQBroker embeddedActiveMQBroker) {\n        super(embeddedActiveMQBroker);\n    }\n\n    public AbstractActiveMQProducerResource(URI brokerURI, String userName, String password) {\n        super(brokerURI, userName, password);\n    }\n\n    public AbstractActiveMQProducerResource(String destinationName, ActiveMQConnectionFactory connectionFactory) {\n        super(destinationName, connectionFactory);\n    }\n\n    public AbstractActiveMQProducerResource(String destinationName, URI brokerURI) {\n        super(destinationName, brokerURI);\n    }\n\n    public AbstractActiveMQProducerResource(String destinationName, EmbeddedActiveMQBroker embeddedActiveMQBroker) {\n        super(destinationName, embeddedActiveMQBroker);\n    }\n\n    public AbstractActiveMQProducerResource(String destinationName, URI brokerURI, String userName, String password) {\n        super(destinationName, brokerURI, userName, password);\n    }\n\n    @Override\n    public String getDestinationName() {\n        try {\n            if (producer != null && producer.getDestination() != null) {\n                return producer.getDestination().toString();\n            }\n        } catch (JMSException e) {\n            // eat this\n        }\n\n        return null;\n    }\n\n    public void sendMessage(Message message) throws JMSException {\n        producer.send(message);\n    }\n\n    public BytesMessage sendMessage(byte[] body) throws JMSException {\n        BytesMessage message = this.createMessage(body);\n        sendMessage(message);\n        return message;\n    }\n\n    public TextMessage sendMessage(String body) throws JMSException {\n        TextMessage message = this.createMessage(body);\n        sendMessage(message);\n        return message;\n    }\n\n    public MapMessage sendMessage(Map<String, Object> body) throws JMSException {\n        MapMessage message = this.createMessage(body);\n        sendMessage(message);\n        return message;\n    }\n\n    public ObjectMessage sendMessage(Serializable body) throws JMSException {\n        ObjectMessage message = this.createMessage(body);\n        sendMessage(message);\n        return message;\n    }\n\n    public BytesMessage sendMessageWithProperties(byte[] body, Map<String, Object> properties) throws JMSException {\n        BytesMessage message = this.createMessage(body, properties);\n        sendMessage(message);\n        return message;\n    }\n\n    public TextMessage sendMessageWithProperties(String body, Map<String, Object> properties) throws JMSException {\n        TextMessage message = this.createMessage(body, properties);\n        sendMessage(message);\n        return message;\n    }\n\n    public MapMessage sendMessageWithProperties(Map<String, Object> body, Map<String, Object> properties) throws JMSException {\n        MapMessage message = this.createMessage(body, properties);\n        sendMessage(message);\n        return message;\n    }\n\n    public ObjectMessage sendMessageWithProperties(Serializable body, Map<String, Object> properties) throws JMSException {\n        ObjectMessage message = this.createMessage(body, properties);\n        sendMessage(message);\n        return message;\n    }\n\n}<fim_middle>// class below has no smell\n"}