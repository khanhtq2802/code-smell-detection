{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.ambari.server.security.encryption;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport java.security.interfaces.RSAPublicKey;\n\nimport org.apache.commons.io.FileUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Utility class containing methods to works with certificates\n */\npublic class CertificateUtils {\n  private static final Logger LOG = LoggerFactory.getLogger(CertificateUtils.class);\n\n  /**\n   * Get RSA public key from X.509 certificate file\n   * @param filePath path to certificate file\n   * @return RSA public key\n   * @throws IOException\n   * @throws CertificateException\n   */\n<fim_suffix>  public static RSAPublicKey getPublicKeyFromFile(String filePath) throws IOException, CertificateException {\n    String pemString = FileUtils.readFileToString(new File(filePath));\n    return getPublicKeyFromString(pemString);\n  }\n\n  /**\n   * Get RSA public key from X.509 certificate string (full crt file content, including header and footer)\n   * @param certificateString certificate string\n   * @return RSA public key\n   * @throws CertificateException\n   * @throws UnsupportedEncodingException\n   */\n  public static RSAPublicKey getPublicKeyFromString(String certificateString)\n    throws CertificateException, UnsupportedEncodingException {\n\n    CertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\n    ByteArrayInputStream is = new ByteArrayInputStream(\n      certificateString.getBytes(\"UTF8\"));\n\n    X509Certificate cer = (X509Certificate) fact.generateCertificate(is);\n    return (RSAPublicKey)cer.getPublicKey();\n  }\n}<fim_middle>// function below has no smell\n"}