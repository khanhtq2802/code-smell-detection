{"text": "<fim_prefix>/*\n * Copyright 2015 The SageTV Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage sage;\nimport jtux.*;\n/**\n *\n * @author  Jean-Francois based on IVTV by Narflex\n */\npublic class FirewireCaptureDevice extends CaptureDevice implements Runnable\n{\n  private int getFirewireInputType(int x, int y)\n  {\n    return 0;\n  }\n  /** Creates a new instance of IVTVCaptureDevice */\n  public FirewireCaptureDevice()\n  {\n    super();\n    captureFeatureBits = MMC.MPEG_AV_CAPTURE_MASK;\n  }\n  public FirewireCaptureDevice(int inID)\n  {\n    super(inID);\n    captureFeatureBits = MMC.MPEG_AV_CAPTURE_MASK;\n  }\n  public boolean isDynamicFormatEncoder()\n  {\n    return true;\n  }\n  public void freeDevice()\n  {\n    if (Sage.DBG) System.out.println(\"Freeing Firewire capture device\");\n    try { activateInput(null); } catch (EncodingException e){}\n    writePrefs();\n    stopEncoding();\n    destroyEncoder0(pHandle);\n    pHandle = 0;\n  }\n  public long getRecordedBytes()\n  {\n    synchronized (caplock)\n    {\n      return currRecordedBytes;\n    }\n  }\n  public boolean isLoaded()\n  {\n    return pHandle != 0;\n  }\n  public void loadDevice() throws EncodingException\n  {\n    if (Sage.DBG) System.out.println(\"Loading Firewire capture device \"+captureDeviceName);\n    pHandle = createEncoder0(captureDeviceName);\n    if (Sage.DBG) System.out.println(\"Loaded Firewire capture device\");\n    // this is to clear the current crossbar so activate actually sets it\n    activateInput(null);\n    activateInput(getDefaultInput());\n    Sage.put(MMC.MMC_KEY + '/' + MMC.LAST_ENCODER_NAME, getName());\n  }\n  public void startEncoding(CaptureDeviceInput cdi, String encodeFile, String channel) throws EncodingException\n  {\n    if (Sage.DBG) System.out.println(\"startEncoding for Firewire capture device file=\" + encodeFile + \" chan=\" + channel);\n    currRecordedBytes = 0;\n    if (cdi != null)\n      activateInput(cdi);\n    if (channel != null)\n    {\n      // If the channel is nothing, then use the last one. This happens with default live.\n      if (channel.length() == 0)\n        channel = activeSource.getChannel();\n      tuneToChannel(channel);\n      long tuneWaitDelay = getPostTuningDelay();\n      if (tuneWaitDelay > 0)\n      {\n        try {\n          Thread.sleep(tuneWaitDelay);\n        } catch (Exception e) {}\n      }\n    }\n    if (encodeParams == null)\n      setEncodingQuality(currQuality);\n    setEncoding0(pHandle, currQuality, (encodeParams == null) ? null : encodeParams.getOptionsMap());\n    currentlyRecordingBufferSize = recordBufferSize;\n    // new file\n    setupEncoding0(pHandle, encodeFile, currentlyRecordingBufferSize);\n    recFilename = encodeFile;\n    recStart = Sage.time();\n    // Start the encoding thread\n    stopCapture = false;\n    capThread = new Thread(this, \"Firewire-Encoder\" + captureDeviceNum);\n    capThread.setPriority(Thread.MAX_PRIORITY);\n    capThread.start();\n    // Initially this may not be set so do so now.\n    if ((activeSource.getChannel() != null && activeSource.getChannel().length() == 0) ||\n        activeSource.getChannel().equals(\"0\"))\n    {\n      activeSource.setLastChannel(getChannel());\n      activeSource.writePrefs();\n    }\n  }\n  public void stopEncoding()\n  {\n    if (Sage.DBG) System.out.println(\"stopEncoding for Firewire capture device\");\n    recFilename = null;\n    recStart = 0;\n    stopCapture = true;\n    if (capThread != null)\n    {\n      if (Sage.DBG) System.out.println(\"Waiting for Firewire capture thread to terminate\");\n      try\n      {\n        capThread.join(5000);\n      }catch (Exception e){}\n    }\n    capThread = null;\n  }\n  public void switchEncoding(String switchFile, String channel) throws EncodingException\n  {\n    if (Sage.DBG) System.out.println(\"switchEncoding for IVTV capture device file=\" + switchFile + \" chan=\" + channel);\n    if (channel != null)\n      tuneToChannel(channel);\n    synchronized (caplock)\n    {\n      nextRecFilename = switchFile;\n      while (nextRecFilename != null)\n      {\n        // Wait for the new filename to be switched to and then return after that\n        try{caplock.wait(10);}catch (Exception e){}\n      }\n    }\n  }\n  public void run()\n  {\n    boolean logCapture = Sage.getBoolean(\"debug_capture_progress\", false);\n    if (Sage.DBG) System.out.println(\"Starting Firewire capture thread\");\n    long addtlBytes;\n    while (!stopCapture)\n    {\n      if (nextRecFilename != null)\n      {\n        try\n        {\n          switchEncoding0(pHandle, nextRecFilename);\n        }\n        catch (EncodingException e)\n        {\n          System.out.println(\"ERROR Switching encoder file:\" + e.getMessage());\n        }\n        synchronized (caplock)\n        {\n          recFilename = nextRecFilename;\n          nextRecFilename = null;\n          recStart = Sage.time();\n          currRecordedBytes = 0;\n          // There may be a thread waiting on this state change to occur\n          caplock.notifyAll();\n        }\n      }\n      try\n      {\n        addtlBytes = eatEncoderData0(pHandle);\n      }\n      catch (EncodingException e)\n      {\n        System.out.println(\"ERROR Eating encoder data:\" + e.getMessage());\n        addtlBytes = 0;\n      }\n      synchronized (caplock)\n      {\n        currRecordedBytes += addtlBytes;\n      }\n      if (logCapture)\n        System.out.println(\"FirewireCap \" + recFilename + \" \" + currRecordedBytes);\n    }\n    closeEncoding0(pHandle);\n    if (Sage.DBG) System.out.println(\"Firewire capture thread terminating\");\n  }\n<fim_suffix>  public CaptureDeviceInput activateInput(CaptureDeviceInput activateMe) throws EncodingException\n  {\n    // NOTE: This was removed so we always set the input before we start capture. There was a bug where the audio was\n    // getting cut out of some recordings due to the audio standard not being set correctly. This will hopefully\n    // resolve that.\n    // if (activeSource == activateMe) return activeSource;\n    super.activateInput(activateMe);\n    if (activeSource != null && isLoaded())\n    {\n      boolean savePrefsAfter = (activeSource.getBrightness() < 0) || (activeSource.getContrast() < 0) ||\n          (activeSource.getHue() < 0) || (activeSource.getSaturation() < 0) || (activeSource.getSharpness() < 0);\n      synchronized (devlock)\n      {\n        setChannel0(pHandle, Integer.toString(activeSource.getIndex()));\n      }\n      int[] defaultColors = updateColors();\n      activeSource.setDefaultColors(defaultColors[0], defaultColors[1], defaultColors[2], defaultColors[3],\n          defaultColors[4]);\n      if (savePrefsAfter)\n        writePrefs();\n    }\n    return activeSource;\n  }\n  public int[] updateColors()\n  {\n    synchronized (devlock)\n    {\n      return updateColors0(pHandle, activeSource.getBrightness(), activeSource.getContrast(),\n          activeSource.getHue(), activeSource.getSaturation(), activeSource.getSharpness());\n    }\n  }\n  protected boolean doTuneChannel(String tuneString, boolean autotune)\n  {\n    // Clean any bad chars from the tuneString\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < tuneString.length(); i++)\n    {\n      char c = tuneString.charAt(i);\n      if ((c >= '0' && c <= '9') || c == '.' || c == '-')\n        sb.append(c);\n    }\n    tuneString = sb.toString();\n    boolean rv = false;\n    try\n    {\n      synchronized (devlock)\n      {\n        try\n        {\n          if (autotune)\n            rv = setChannel0(pHandle, tuneString);\n          else\n            setChannel0(pHandle, tuneString);\n        }\n        catch (EncodingException e)\n        {\n          System.out.println(\"ERROR setting channel for Firewire tuner:\" + e.getMessage());\n        }<fim_middle>// function below has no smell\n"}