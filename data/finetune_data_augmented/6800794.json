{"text": "<fim_prefix>\n<fim_suffix>final class ArrowType extends JSType {\n  private static final long serialVersionUID = 1L;\n  final Node parameters;\n  JSType returnType;\n  // Whether the return type is inferred.\n  final boolean returnTypeInferred;\n  ArrowType(JSTypeRegistry registry, Node parameters, JSType returnType) {\n    this(registry, parameters, returnType, false);\n  }\n  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred) {\n    super(registry);\n    this.parameters = parameters == null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;\n    this.returnType = returnType == null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;\n    this.returnTypeInferred = returnTypeInferred;\n  }\n  @Override\n  public boolean isSubtype(JSType that) {\n    return isSubtype(that, ImplCache.create(), SubtypingMode.NORMAL);\n  }\n  @Override\n  protected boolean isSubtype(JSType other,\n      ImplCache implicitImplCache, SubtypingMode subtypingMode) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n    ArrowType that = (ArrowType) other;\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType, implicitImplCache, subtypingMode)) {\n      return false;\n    }\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don't have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g < f, but f !< g\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n      if (thisParamType != null) {\n        if (thatParamType == null ||\n            !thatParamType.isSubtype(thisParamType, implicitImplCache, subtypingMode)) {\n          return false;\n        }\n      }\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n      // \"that\" can't be a supertype, because it's missing a required argument.\n      if (!thisIsOptional && thatIsOptional) {\n        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n        // {function(...NoType)} to to indicate that arity should not be\n        // checked. Strictly speaking, this is not a correct formulation,\n        // because now a sub-function can required arguments that are var_args\n        // in the super-function. So we special-case this.\n        boolean isTopFunction =\n            thatIsVarArgs &&\n            (thatParamType == null ||\n             thatParamType.isUnknownType() ||\n             thatParamType.isNoType());\n        if (!isTopFunction) {\n          return false;\n        }\n      }\n      // don't advance if we have variable arguments\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n      // both var_args indicates the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      }\n    }\n    // \"that\" can't be a supertype, because it's missing a required argument.\n    return thisParam == null || thisParam.isOptionalArg() || thisParam.isVarArgs()\n        || thatParam != null;\n  }\n  /**\n   * @return True if our parameter spec is equal to {@code that}'s parameter\n   *     spec.\n   */\n  boolean hasEqualParameters(ArrowType that, EquivalenceMethod eqMethod, EqCache eqCache) {\n    Node thisParam = parameters.getFirstChild();\n    Node otherParam = that.parameters.getFirstChild();\n    while (thisParam != null && otherParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType otherParamType = otherParam.getJSType();\n      if (thisParamType != null) {\n        // Both parameter lists give a type for this param, it should be equal\n        if (otherParamType != null &&\n            !thisParamType.checkEquivalenceHelper(otherParamType, eqMethod, eqCache)) {\n          return false;\n        }\n      } else {\n        if (otherParamType != null) {\n          return false;\n        }\n      }\n      // Check var_args/optionality\n      if (thisParam.isOptionalArg() != otherParam.isOptionalArg()) {\n        return false;\n      }\n      if (thisParam.isVarArgs() != otherParam.isVarArgs()) {\n        return false;\n      }\n      thisParam = thisParam.getNext();\n      otherParam = otherParam.getNext();\n    }\n    // One of the parameters is null, so the types are only equal if both\n    // parameter lists are null (they are equal).\n    return thisParam == otherParam;\n  }\n  boolean checkArrowEquivalenceHelper(\n      ArrowType that, EquivalenceMethod eqMethod, EqCache eqCache) {\n    // Please keep this method in sync with the hashCode() method below.\n    if (!returnType.checkEquivalenceHelper(\n        that.returnType, eqMethod, eqCache)) {\n      return false;\n    }\n    return hasEqualParameters(that, eqMethod, eqCache);\n  }\n  @Override\n  int recursionUnsafeHashCode() {\n    int hashCode = Objects.hashCode(returnType);\n    if (parameters != null) {\n      Node param = parameters.getFirstChild();\n      while (param != null) {\n        hashCode = hashCode * 31 + Objects.hashCode(param.getJSType());\n        param = param.getNext();\n      }\n    }\n    return hashCode;\n  }\n  @Override\n  public JSType getLeastSupertype(JSType that) {\n    throw new UnsupportedOperationException();\n  }\n  @Override\n  public JSType getGreatestSubtype(JSType that) {\n    throw new UnsupportedOperationException();\n  }\n  @Override\n  public TernaryValue testForEquality(JSType that) {\n    throw new UnsupportedOperationException();\n  }\n  @Override\n  public <T> T visit(Visitor<T> visitor) {\n    throw new UnsupportedOperationException();\n  }\n  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n    throw new UnsupportedOperationException();\n  }\n  @Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    return BooleanLiteralSet.TRUE;\n  }\n  @Override\n  JSType resolveInternal(ErrorReporter reporter) {\n    returnType = safeResolve(returnType, reporter);\n    if (parameters != null) {\n      for (Node paramNode = parameters.getFirstChild();\n           paramNode != null; paramNode = paramNode.getNext()) {\n        paramNode.setJSType(paramNode.getJSType().resolve(reporter));\n      }\n    }\n    return this;\n  }\n  boolean hasUnknownParamsOrReturn() {\n    if (parameters != null) {\n      for (Node paramNode = parameters.getFirstChild();\n           paramNode != null; paramNode = paramNode.getNext()) {\n        JSType type = paramNode.getJSType();\n        if (type == null || type.isUnknownType()) {\n          return true;\n        }\n      }\n    }\n    return returnType == null || returnType.isUnknownType();\n  }\n  @Override\n  StringBuilder appendTo(StringBuilder sb, boolean forAnnotations) {\n    return sb.append(\"[ArrowType]\");\n  }\n  @Override\n  public boolean hasAnyTemplateTypesInternal() {\n    return returnType.hasAnyTemplateTypes()\n        || hasTemplatedParameterType();\n  }\n  private boolean hasTemplatedParameterType() {\n    if (parameters != null) {\n      for (Node paramNode = parameters.getFirstChild();\n           paramNode != null; paramNode = paramNode.getNext()) {\n        JSType type = paramNode.getJSType();<fim_middle>// class below is blob\n"}