{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2007 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *  Actuate Corporation  - initial API and implementation\n *******************************************************************************/\n\npackage org.eclipse.birt.report.debug.internal.ui.script.launcher;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.eclipse.birt.report.debug.internal.core.launcher.IReportLaunchConstants;\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.debug.core.ILaunch;\nimport org.eclipse.debug.core.ILaunchConfiguration;\nimport org.eclipse.debug.core.ILaunchManager;\nimport org.eclipse.jdt.launching.IVMRunner;\nimport org.eclipse.pde.ui.launcher.EclipseApplicationLaunchConfiguration;\n\n/**\n * ReportOSGiLaunchDelegate\n */\n<fim_suffix>public class ReportOSGiLaunchDelegate extends\n\t\tEclipseApplicationLaunchConfiguration implements IReportLaunchConstants\n{\n\n\tReportLaunchHelper helper;\n\tpublic static final String APP_NAME = \"application name\";//$NON-NLS-1$\n\n\tpublic ReportOSGiLaunchDelegate( )\n\t{\n\t\thelper = new ReportLaunchHelper( );\n\t}\n\n\tpublic void launch( ILaunchConfiguration configuration, String mode,\n\t\t\tILaunch launch, IProgressMonitor monitor ) throws CoreException\n\t{\n\t\thelper.init( configuration );\n\n\t\tsuper.launch( configuration, mode, launch, monitor );\n\t}\n\n\tpublic String[] getVMArguments( ILaunchConfiguration configuration )\n\t\t\tthrows CoreException\n\t{\n\t\tString[] args = super.getVMArguments( configuration );\n\n\t\tList arguments = new ArrayList( );\n\n\t\tfor ( int i = 0; i < args.length; i++ )\n\t\t{\n\t\t\targuments.add( args[i] );\n\t\t}\n\n\t\thelper.addPortArgs( arguments );\n\t\thelper.addUserClassPath( arguments, configuration );\n\t\thelper.addFileNameArgs( arguments );\n\t\thelper.addEngineHomeArgs( arguments );\n\t\thelper.addResourceFolder( arguments );\n\t\thelper.addTempFolder( arguments );\n\t\thelper.addTypeArgs( arguments );\n\t\thelper.addDataLimitArgs(arguments);\n\t\thelper.addParameterArgs( arguments );\n\n\t\treturn (String[]) arguments.toArray( new String[arguments.size( )] );\n\t}\n\n\tpublic String[] getProgramArguments( ILaunchConfiguration configuration )\n\t\t\tthrows CoreException\n\t{\n\t\tString[] args = super.getProgramArguments( configuration );\n\n\t\tList list = new ArrayList( );\n\n\t\tfor ( int i = 0; i < args.length; i++ )\n\t\t{\n\t\t\tlist.add( args[i] );\n\t\t}\n\n\t\tint idx = list.indexOf( \"-application\" ); //$NON-NLS-1$\n\n\t\tif ( idx != -1 && ( idx + 1 ) < list.size( ) )\n\t\t{\n\t\t\tlist.set( idx + 1,\n\t\t\t\t\tgetApplicationName( ) ); //$NON-NLS-1$\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlist.add( \"-application\" ); //$NON-NLS-1$\n\t\t\tlist.add( getApplicationName( ) ); //$NON-NLS-1$\n\t\t}\n\n\t\tlist.add( \"-nosplash\" ); //$NON-NLS-1$\n\n\t\treturn (String[]) list.toArray( new String[list.size( )] );\n\t}\n\t\n\tprivate String getApplicationName()\n\t{\n\t\tString name = System.getProperty( APP_NAME );\n\t\tif (name == null || name.length( ) == 0)\n\t\t{\n\t\t\tname = \"org.eclipse.birt.report.debug.core.ReportDebugger\";\n\t\t}\n\t\treturn name;\n\t}\n\n\tpublic IVMRunner getVMRunner( ILaunchConfiguration configuration,\n\t\t\tString mode ) throws CoreException\n\t{\n\t\tif ( ( helper.debugType & DEBUG_TYPE_JAVA_CLASS ) == DEBUG_TYPE_JAVA_CLASS )\n\t\t{\n\t\t\tmode = ILaunchManager.DEBUG_MODE;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmode = ILaunchManager.RUN_MODE;\n\t\t}\n\n\t\treturn new ReportDebuggerVMRunner( super.getVMRunner( configuration,\n\t\t\t\tmode ),\n\t\t\t\t( helper.debugType & DEBUG_TYPE_JAVA_SCRIPT ) == DEBUG_TYPE_JAVA_SCRIPT,\n\t\t\t\tthis );\n\t}\n\n\tprotected IProject[] getBuildOrder( ILaunchConfiguration configuration,\n\t\t\tString mode ) throws CoreException\n\t{\n\t\treturn super.getBuildOrder( configuration, mode );\n\t}\n\n\tpublic boolean finalLaunchCheck( final ILaunchConfiguration configuration,\n\t\t\tString mode, IProgressMonitor monitor ) throws CoreException\n\t{\n\n\t\tboolean bool = super.finalLaunchCheck( configuration, mode, monitor );\n\n\t\tif ( !bool )\n\t\t{\n\t\t\treturn bool;\n\t\t}\n\n\t\treturn helper.finalLaunchCheck( configuration, mode, monitor );\n\t}\n\n}<fim_middle>// class below is data class\n"}