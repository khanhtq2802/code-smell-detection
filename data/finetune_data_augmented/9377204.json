{"text": "<fim_prefix>/*\n * Copyright (c) 2001, 2014, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.sun.java.swing.plaf.windows;\nimport sun.swing.SwingUtilities2;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport javax.swing.UIManager;\nimport javax.swing.plaf.*;\nimport javax.swing.plaf.basic.BasicInternalFrameTitlePane;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyVetoException;\nimport static com.sun.java.swing.plaf.windows.TMSchema.*;\nimport static com.sun.java.swing.plaf.windows.XPStyle.Skin;\n@SuppressWarnings(\"serial\") // Superclass is not serializable across versions\npublic class WindowsInternalFrameTitlePane extends BasicInternalFrameTitlePane {\n    private Color selectedTitleGradientColor;\n    private Color notSelectedTitleGradientColor;\n    private JPopupMenu systemPopupMenu;\n    private JLabel systemLabel;\n    private Font titleFont;\n    private int titlePaneHeight;\n    private int buttonWidth, buttonHeight;\n    private boolean hotTrackingOn;\n    public WindowsInternalFrameTitlePane(JInternalFrame f) {\n        super(f);\n    }\n    protected void addSubComponents() {\n        add(systemLabel);\n        add(iconButton);\n        add(maxButton);\n        add(closeButton);\n    }\n    protected void installDefaults() {\n        super.installDefaults();\n        titlePaneHeight = UIManager.getInt(\"InternalFrame.titlePaneHeight\");\n        buttonWidth     = UIManager.getInt(\"InternalFrame.titleButtonWidth\")  - 4;\n        buttonHeight    = UIManager.getInt(\"InternalFrame.titleButtonHeight\") - 4;\n        Object obj      = UIManager.get(\"InternalFrame.titleButtonToolTipsOn\");\n        hotTrackingOn = (obj instanceof Boolean) ? (Boolean)obj : true;\n        if (XPStyle.getXP() != null) {\n            // Fix for XP bug where sometimes these sizes aren't updated properly\n            // Assume for now that height is correct and derive width using the\n            // ratio from the uxtheme part\n            buttonWidth = buttonHeight;\n            Dimension d = XPStyle.getPartSize(Part.WP_CLOSEBUTTON, State.NORMAL);\n            if (d != null && d.width != 0 && d.height != 0) {\n                buttonWidth = (int) ((float) buttonWidth * d.width / d.height);\n            }\n        } else {\n            buttonWidth += 2;\n            Color activeBorderColor =\n                    UIManager.getColor(\"InternalFrame.activeBorderColor\");\n            setBorder(BorderFactory.createLineBorder(activeBorderColor, 1));\n        }\n        // JDK-8039383: initialize these colors because getXP() may return null when theme is changed\n        selectedTitleGradientColor =\n                UIManager.getColor(\"InternalFrame.activeTitleGradient\");\n        notSelectedTitleGradientColor =\n                UIManager.getColor(\"InternalFrame.inactiveTitleGradient\");\n    }\n    protected void uninstallListeners() {\n        // Get around protected method in superclass\n        super.uninstallListeners();\n    }\n    protected void createButtons() {\n        super.createButtons();\n        if (XPStyle.getXP() != null) {\n            iconButton.setContentAreaFilled(false);\n            maxButton.setContentAreaFilled(false);\n            closeButton.setContentAreaFilled(false);\n        }\n    }\n    protected void setButtonIcons() {\n        super.setButtonIcons();\n        if (!hotTrackingOn) {\n            iconButton.setToolTipText(null);\n            maxButton.setToolTipText(null);\n            closeButton.setToolTipText(null);\n        }\n    }\n<fim_suffix>    public void paintComponent(Graphics g)  {\n        XPStyle xp = XPStyle.getXP();\n        paintTitleBackground(g);\n        String title = frame.getTitle();\n        if (title != null) {\n            boolean isSelected = frame.isSelected();\n            Font oldFont = g.getFont();\n            Font newFont = (titleFont != null) ? titleFont : getFont();\n            g.setFont(newFont);\n            // Center text vertically.\n            FontMetrics fm = SwingUtilities2.getFontMetrics(frame, g, newFont);\n            int baseline = (getHeight() + fm.getAscent() - fm.getLeading() -\n                    fm.getDescent()) / 2;\n            Rectangle lastIconBounds = new Rectangle(0, 0, 0, 0);\n            if (frame.isIconifiable()) {\n                lastIconBounds = iconButton.getBounds();\n            } else if (frame.isMaximizable()) {\n                lastIconBounds = maxButton.getBounds();\n            } else if (frame.isClosable()) {\n                lastIconBounds = closeButton.getBounds();\n            }\n            int titleX;\n            int titleW;\n            int gap = 2;\n            if (WindowsGraphicsUtils.isLeftToRight(frame)) {\n                if (lastIconBounds.x == 0) { // There are no icons\n                    lastIconBounds.x = frame.getWidth() - frame.getInsets().right;\n                }\n                titleX = systemLabel.getX() + systemLabel.getWidth() + gap;\n                if (xp != null) {\n                    titleX += 2;\n                }\n                titleW = lastIconBounds.x - titleX - gap;\n            } else {\n                if (lastIconBounds.x == 0) { // There are no icons\n                    lastIconBounds.x = frame.getInsets().left;\n                }\n                titleW = SwingUtilities2.stringWidth(frame, fm, title);\n                int minTitleX = lastIconBounds.x + lastIconBounds.width + gap;\n                if (xp != null) {\n                    minTitleX += 2;\n                }\n                int availableWidth = systemLabel.getX() - gap - minTitleX;\n                if (availableWidth > titleW) {\n                    titleX = systemLabel.getX() - gap - titleW;\n                } else {\n                    titleX = minTitleX;\n                    titleW = availableWidth;\n                }\n            }\n            title = getTitle(frame.getTitle(), fm, titleW);\n            if (xp != null) {\n                String shadowType = null;\n                if (isSelected) {\n                    shadowType = xp.getString(this, Part.WP_CAPTION,\n                                              State.ACTIVE, Prop.TEXTSHADOWTYPE);\n                }\n                if (\"single\".equalsIgnoreCase(shadowType)) {\n                    Point shadowOffset = xp.getPoint(this, Part.WP_WINDOW, State.ACTIVE,\n                                                     Prop.TEXTSHADOWOFFSET);\n                    Color shadowColor  = xp.getColor(this, Part.WP_WINDOW, State.ACTIVE,\n                                                     Prop.TEXTSHADOWCOLOR, null);\n                    if (shadowOffset != null && shadowColor != null) {\n                        g.setColor(shadowColor);\n                        SwingUtilities2.drawString(frame, g, title,\n                                     titleX + shadowOffset.x,\n                                     baseline + shadowOffset.y);\n                    }\n                }\n            }\n            g.setColor(isSelected ? selectedTextColor : notSelectedTextColor);\n            SwingUtilities2.drawString(frame, g, title, titleX, baseline);\n            g.setFont(oldFont);\n        }\n    }\n    public Dimension getPreferredSize() {\n        return getMinimumSize();\n    }\n    public Dimension getMinimumSize() {\n        Dimension d = new Dimension(super.getMinimumSize());\n        d.height = titlePaneHeight + 2;\n        XPStyle xp = XPStyle.getXP();\n        if (xp != null) {\n            // Note: Don't know how to calculate height on XP,\n            // the captionbarheight is 25 but native caption is 30 (maximized 26)\n            if (frame.isMaximum()) {\n                d.height -= 1;\n            } else {\n                d.height += 3;\n            }\n        }\n        return d;\n    }\n    protected void paintTitleBackground(Graphics g) {\n        XPStyle xp = XPStyle.getXP();\n        if (xp != null) {<fim_middle>// function below is long method\n"}