{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hbase.procedure2;\n\nimport java.util.Collections;\nimport java.util.List;\nimport org.apache.yetus.audience.InterfaceAudience;\nimport org.apache.yetus.audience.InterfaceStability;\n\nimport org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n\n/**\n * Simple scheduler for procedures\n */\n@InterfaceAudience.Private\n@InterfaceStability.Evolving\npublic class SimpleProcedureScheduler extends AbstractProcedureScheduler {\n  private final ProcedureDeque runnables = new ProcedureDeque();\n\n<fim_suffix>  @Override\n  protected void enqueue(final Procedure procedure, final boolean addFront) {\n    if (addFront) {\n      runnables.addFirst(procedure);\n    } else {\n      runnables.addLast(procedure);\n    }\n  }\n\n  @Override\n  protected Procedure dequeue() {\n    return runnables.poll();\n  }\n\n  @VisibleForTesting\n  @Override\n  public void clear() {\n    schedLock();\n    try {\n      runnables.clear();\n    } finally {\n      schedUnlock();\n    }\n  }\n\n  @Override\n  public void yield(final Procedure proc) {\n    addBack(proc);\n  }\n\n  @Override\n  public boolean queueHasRunnables() {\n    return runnables.size() > 0;\n  }\n\n  @Override\n  public int queueSize() {\n    return runnables.size();\n  }\n\n  @Override\n  public void completionCleanup(Procedure proc) {\n  }\n\n  @Override\n  public List<LockedResource> getLocks() {\n    return Collections.emptyList();\n  }\n\n  @Override\n  public LockedResource getLockResource(LockedResourceType resourceType,\n      String resourceName) {\n    return null;\n  }\n}<fim_middle>// function below has no smell\n"}