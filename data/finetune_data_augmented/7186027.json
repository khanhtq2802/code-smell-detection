{"text": "<fim_prefix>\n<fim_suffix>@javax.annotation.Generated(value = \"OracleSDKGenerator\", comments = \"API Version: 20181116\")\n@lombok.RequiredArgsConstructor\npublic class WaasWaiters {\n    private final java.util.concurrent.ExecutorService executorService;\n    private final Waas client;\n    /**\n     * Creates a new {@link Waiter} using default configuration.\n     *\n     * @param request the request to send\n     * @param targetState the desired states to wait for. If multiple states are provided then the waiter will return once the resource reaches any of the provided states\n     * @return a new {@code Waiter} instance\n     */\n    public com.oracle.bmc.waiter.Waiter<GetCertificateRequest, GetCertificateResponse>\n            forCertificate(\n                    GetCertificateRequest request,\n                    com.oracle.bmc.waas.model.LifecycleStates... targetStates) {\n        org.apache.commons.lang3.Validate.notEmpty(\n                targetStates, \"At least one targetState must be provided\");\n        org.apache.commons.lang3.Validate.noNullElements(\n                targetStates, \"Null targetState values are not permitted\");\n        return forCertificate(\n                com.oracle.bmc.waiter.Waiters.DEFAULT_POLLING_WAITER, request, targetStates);\n    }\n    /**\n     * Creates a new {@link Waiter} using the provided configuration.\n     *\n     * @param request the request to send\n     * @param targetState the desired state to wait for\n     * @param terminationStrategy the {@link TerminationStrategy} to use\n     * @param delayStrategy the {@link DelayStrategy} to use\n     * @return a new {@code Waiter} instance\n     */\n    public com.oracle.bmc.waiter.Waiter<GetCertificateRequest, GetCertificateResponse>\n            forCertificate(\n                    GetCertificateRequest request,\n                    com.oracle.bmc.waas.model.LifecycleStates targetState,\n                    com.oracle.bmc.waiter.TerminationStrategy terminationStrategy,\n                    com.oracle.bmc.waiter.DelayStrategy delayStrategy) {\n        org.apache.commons.lang3.Validate.notNull(targetState, \"The targetState cannot be null\");\n        return forCertificate(\n                com.oracle.bmc.waiter.Waiters.newWaiter(terminationStrategy, delayStrategy),\n                request,\n                targetState);\n    }\n    /**\n     * Creates a new {@link Waiter} using the provided configuration.\n     *\n     * @param request the request to send\n     * @param terminationStrategy the {@link TerminationStrategy} to use\n     * @param delayStrategy the {@link DelayStrategy} to use\n     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states\n     * @return a new {@code Waiter} instance\n     */\n    public com.oracle.bmc.waiter.Waiter<GetCertificateRequest, GetCertificateResponse>\n            forCertificate(\n                    GetCertificateRequest request,\n                    com.oracle.bmc.waiter.TerminationStrategy terminationStrategy,\n                    com.oracle.bmc.waiter.DelayStrategy delayStrategy,\n                    com.oracle.bmc.waas.model.LifecycleStates... targetStates) {\n        org.apache.commons.lang3.Validate.notEmpty(\n                targetStates, \"At least one targetState must be provided\");\n        org.apache.commons.lang3.Validate.noNullElements(\n                targetStates, \"Null targetState values are not permitted\");\n        return forCertificate(\n                com.oracle.bmc.waiter.Waiters.newWaiter(terminationStrategy, delayStrategy),\n                request,\n                targetStates);\n    }\n    // Helper method to create a new Waiter for Certificate.\n    private com.oracle.bmc.waiter.Waiter<GetCertificateRequest, GetCertificateResponse>\n            forCertificate(\n                    com.oracle.bmc.waiter.BmcGenericWaiter waiter,\n                    final GetCertificateRequest request,\n                    final com.oracle.bmc.waas.model.LifecycleStates... targetStates) {\n        final java.util.Set<com.oracle.bmc.waas.model.LifecycleStates> targetStatesSet =\n                new java.util.HashSet<>(java.util.Arrays.asList(targetStates));\n        return new com.oracle.bmc.waiter.internal.SimpleWaiterImpl<>(\n                executorService,\n                waiter.toCallable(\n                        com.google.common.base.Suppliers.ofInstance(request),\n                        new com.google.common.base.Function<\n                                GetCertificateRequest, GetCertificateResponse>() {\n                            @Override\n                            public GetCertificateResponse apply(GetCertificateRequest request) {\n                                return client.getCertificate(request);\n                            }\n                        },\n                        new com.google.common.base.Predicate<GetCertificateResponse>() {\n                            @Override\n                            public boolean apply(GetCertificateResponse response) {\n                                return targetStatesSet.contains(\n                                        response.getCertificate().getLifecycleState());\n                            }\n                        },\n                        targetStatesSet.contains(\n                                com.oracle.bmc.waas.model.LifecycleStates.Deleted)),\n                request);\n    }\n    /**\n     * Creates a new {@link Waiter} using default configuration.\n     *\n     * @param request the request to send\n     * @param targetState the desired states to wait for. If multiple states are provided then the waiter will return once the resource reaches any of the provided states\n     * @return a new {@code Waiter} instance\n     */\n    public com.oracle.bmc.waiter.Waiter<GetWaasPolicyRequest, GetWaasPolicyResponse> forWaasPolicy(\n            GetWaasPolicyRequest request,\n            com.oracle.bmc.waas.model.LifecycleStates... targetStates) {\n        org.apache.commons.lang3.Validate.notEmpty(\n                targetStates, \"At least one targetState must be provided\");\n        org.apache.commons.lang3.Validate.noNullElements(\n                targetStates, \"Null targetState values are not permitted\");\n        return forWaasPolicy(\n                com.oracle.bmc.waiter.Waiters.DEFAULT_POLLING_WAITER, request, targetStates);\n    }\n    /**\n     * Creates a new {@link Waiter} using the provided configuration.\n     *\n     * @param request the request to send\n     * @param targetState the desired state to wait for\n     * @param terminationStrategy the {@link TerminationStrategy} to use\n     * @param delayStrategy the {@link DelayStrategy} to use\n     * @return a new {@code Waiter} instance\n     */\n    public com.oracle.bmc.waiter.Waiter<GetWaasPolicyRequest, GetWaasPolicyResponse> forWaasPolicy(\n            GetWaasPolicyRequest request,\n            com.oracle.bmc.waas.model.LifecycleStates targetState,\n            com.oracle.bmc.waiter.TerminationStrategy terminationStrategy,\n            com.oracle.bmc.waiter.DelayStrategy delayStrategy) {\n        org.apache.commons.lang3.Validate.notNull(targetState, \"The targetState cannot be null\");\n        return forWaasPolicy(\n                com.oracle.bmc.waiter.Waiters.newWaiter(terminationStrategy, delayStrategy),\n                request,\n                targetState);\n    }\n    /**\n     * Creates a new {@link Waiter} using the provided configuration.\n     *\n     * @param request the request to send\n     * @param terminationStrategy the {@link TerminationStrategy} to use\n     * @param delayStrategy the {@link DelayStrategy} to use\n     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states\n     * @return a new {@code Waiter} instance\n     */\n    public com.oracle.bmc.waiter.Waiter<GetWaasPolicyRequest, GetWaasPolicyResponse> forWaasPolicy(\n            GetWaasPolicyRequest request,\n            com.oracle.bmc.waiter.TerminationStrategy terminationStrategy,\n            com.oracle.bmc.waiter.DelayStrategy delayStrategy,\n            com.oracle.bmc.waas.model.LifecycleStates... targetStates) {\n        org.apache.commons.lang3.Validate.notEmpty(\n                targetStates, \"At least one targetState must be provided\");\n        org.apache.commons.lang3.Validate.noNullElements(\n                targetStates, \"Null targetState values are not permitted\");\n        return forWaasPolicy(\n                com.oracle.bmc.waiter.Waiters.newWaiter(terminationStrategy, delayStrategy),\n                request,\n                targetStates);\n    }\n    // Helper method to create a new Waiter for WaasPolicy.\n    private com.oracle.bmc.waiter.Waiter<GetWaasPolicyRequest, GetWaasPolicyResponse> forWaasPolicy(\n            com.oracle.bmc.waiter.BmcGenericWaiter waiter,\n            final GetWaasPolicyRequest request,\n            final com.oracle.bmc.waas.model.LifecycleStates... targetStates) {\n        final java.util.Set<com.oracle.bmc.waas.model.LifecycleStates> targetStatesSet =\n                new java.util.HashSet<>(java.util.Arrays.asList(targetStates));<fim_middle>// class below has no smell\n"}