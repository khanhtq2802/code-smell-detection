{"text": "<fim_prefix>import java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Stack;\nimport org.apache.ivy.core.report.ResolveReport;\nimport org.apache.ivyde.eclipse.cp.IvyClasspathContainer;\nimport org.apache.ivyde.eclipse.resolvevisualizer.label.ILabelDecoratorAlgorithm;\nimport org.apache.ivyde.eclipse.resolvevisualizer.model.IvyNodeElement;\nimport org.apache.ivyde.eclipse.resolvevisualizer.model.IvyNodeElementAdapter;\nimport org.apache.ivyde.eclipse.resolvevisualizer.model.IvyNodeElementFilterAdapter;\nimport org.eclipse.jface.action.Action;\nimport org.eclipse.jface.action.IMenuListener;\nimport org.eclipse.jface.action.IMenuManager;\nimport org.eclipse.jface.action.IToolBarManager;\nimport org.eclipse.jface.action.MenuManager;\nimport org.eclipse.jface.action.Separator;\nimport org.eclipse.jface.viewers.DoubleClickEvent;\nimport org.eclipse.jface.viewers.IDoubleClickListener;\nimport org.eclipse.jface.viewers.ISelectionChangedListener;\nimport org.eclipse.jface.viewers.IStructuredSelection;\nimport org.eclipse.jface.viewers.SelectionChangedEvent;\nimport org.eclipse.jface.viewers.StructuredSelection;\nimport org.eclipse.jface.viewers.ViewerFilter;\nimport org.eclipse.jface.window.Window;\nimport org.eclipse.swt.events.ModifyEvent;\nimport org.eclipse.swt.events.ModifyListener;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Menu;\nimport org.eclipse.ui.IActionBars;\nimport org.eclipse.ui.ISharedImages;\nimport org.eclipse.ui.PlatformUI;\nimport org.eclipse.ui.forms.widgets.FormToolkit;\nimport org.eclipse.ui.part.ViewPart;\nimport org.eclipse.zest.core.viewers.AbstractZoomableViewer;\nimport org.eclipse.zest.core.viewers.EntityConnectionData;\nimport org.eclipse.zest.core.viewers.GraphViewer;\nimport org.eclipse.zest.core.viewers.IZoomableWorkbenchPart;\nimport org.eclipse.zest.core.viewers.ZoomContributionViewItem;\nimport org.eclipse.zest.core.widgets.Graph;\nimport org.eclipse.zest.core.widgets.GraphItem;\nimport org.eclipse.zest.core.widgets.GraphNode;\nimport org.eclipse.zest.core.widgets.ZestStyles;\nimport org.eclipse.zest.layouts.LayoutAlgorithm;\nimport org.eclipse.zest.layouts.LayoutStyles;\nimport org.eclipse.zest.layouts.algorithms.CompositeLayoutAlgorithm;\nimport org.eclipse.zest.layouts.algorithms.DirectedGraphLayoutAlgorithm;\nimport org.eclipse.zest.layouts.algorithms.HorizontalShift;\npublic class ResolveVisualizerView extends ViewPart implements IZoomableWorkbenchPart {\n    private GraphViewer viewer;\n    private Action focusDialogAction;\n    private Action focusDialogActionToolbar;\n    private Action focusOnSelectionAction;\n    private Action hideSelectionAction;\n    private Action showHiddenAction;\n    private Action applyDefaultLayoutAction;\n    private Action historyAction;\n    private Action forwardAction;\n    private Action refreshAction;\n    private ZoomContributionViewItem contextZoomContributionViewItem;\n    private ZoomContributionViewItem toolbarZoomContributionViewItem;\n    private final Stack<IvyNodeElement> historyStack;\n    private final Stack<IvyNodeElement> forwardStack;\n    private IvyNodeElement currentRoot;\n    private IvyNodeElement currentSelection;\n    private IvyClasspathContainer currentContainer;\n    private final ResolveVisualizerContentProvider contentProvider = new ResolveVisualizerContentProvider();\n    private final MessageContentProvider messageContentProvider = new MessageContentProvider();\n    private IvyNodeLabelProvider labelProvider;\n    private ResolveVisualizerForm visualizationForm;\n    private final ForceHiddenFilter forceHiddenFilter;\n    public ResolveVisualizerView() {\n        historyStack = new Stack<>();\n        forwardStack = new Stack<>();\n        forceHiddenFilter = new ForceHiddenFilter();\n        forceHiddenFilter.setEnabled(true);\n        contentProvider.addFilter(forceHiddenFilter);\n    }\n    /**\n     * This is a callback that will allow us to create the viewer and initialize it.\n     *\n     * @param parent Composite\n     */\n    public void createPartControl(Composite parent) {\n        FormToolkit toolKit = new FormToolkit(parent.getDisplay());\n        visualizationForm = new ResolveVisualizerForm(parent, toolKit, this);\n        viewer = visualizationForm.getGraphViewer();\n        this.labelProvider = new IvyNodeLabelProvider(this.viewer);\n        viewer.setLabelProvider(labelProvider);\n        viewer.setContentProvider(contentProvider);\n        viewer.setInput(null);\n        viewer.setConnectionStyle(ZestStyles.CONNECTIONS_DIRECTED);\n        viewer.setLayoutAlgorithm(new CompositeLayoutAlgorithm(LayoutStyles.NO_LAYOUT_NODE_RESIZING,\n                new LayoutAlgorithm[] { new DirectedGraphLayoutAlgorithm(LayoutStyles.NO_LAYOUT_NODE_RESIZING),\n                                        new HorizontalShift(LayoutStyles.NO_LAYOUT_NODE_RESIZING) }));\n        viewer.addSelectionChangedListener(new ISelectionChangedListener() {\n            public void selectionChanged(SelectionChangedEvent event) {\n                Object selectedElement = ((IStructuredSelection) event.getSelection()).getFirstElement();\n                if (selectedElement instanceof EntityConnectionData) {\n                    return;\n                }\n                ResolveVisualizerView.this.selectionChanged((IvyNodeElement) selectedElement);\n            }\n        });\n        viewer.addDoubleClickListener(new IDoubleClickListener() {\n            public void doubleClick(DoubleClickEvent event) {\n                focusOnSelectionAction.run();\n            }\n        });\n        visualizationForm.getSearchBox().addModifyListener(new ModifyListener() {\n            @SuppressWarnings(\"unchecked\")\n            public void modifyText(ModifyEvent e) {\n                String textString = visualizationForm.getSearchBox().getText();\n                Map<String, GraphItem> figureListing = new HashMap<>();\n                List<GraphItem> list = (List<GraphItem>) viewer.getGraphControl().getNodes();\n                for (GraphItem item : list) {\n                    figureListing.put(item.getText(), item);\n                }\n                list.clear();\n                if (textString.length() > 0) {\n                    for (Map.Entry<String, GraphItem> figure : figureListing.entrySet()) {\n                        if (figure.getKey().toLowerCase().contains(textString.toLowerCase())) {\n                            list.add(figure.getValue());\n                        }\n                    }\n                }\n                viewer.getGraphControl().setSelection(list.toArray(new GraphItem[list.size()]));\n            }\n        });\n        messageContentProvider.setMessageManager(visualizationForm.getManagedForm().getMessageManager());\n        contextZoomContributionViewItem = new ZoomContributionViewItem(this);\n        toolbarZoomContributionViewItem = new ZoomContributionViewItem(this);\n        // Create the help context id for the viewer's control\n        makeActions();\n        hookContextMenu();\n        contributeToActionBars();\n    }\n    private void hookContextMenu() {\n        MenuManager menuMgr = new MenuManager(\"#PopupMenu\");\n        menuMgr.setRemoveAllWhenShown(true);\n        menuMgr.addMenuListener(new IMenuListener() {\n            public void menuAboutToShow(IMenuManager manager) {\n                ResolveVisualizerView.this.fillContextMenu(manager);\n            }\n        });\n        Menu menu = menuMgr.createContextMenu(viewer.getControl());\n        viewer.getControl().setMenu(menu);\n        getSite().registerContextMenu(menuMgr, viewer);\n    }\n    private void contributeToActionBars() {\n        IActionBars bars = getViewSite().getActionBars();\n        bars.getMenuManager().add(toolbarZoomContributionViewItem);\n        fillLocalPullDown(bars.getMenuManager());\n        fillLocalToolBar(bars.getToolBarManager());\n    }\n    private void fillLocalPullDown(IMenuManager manager) {\n    }\n    private void fillContextMenu(IMenuManager manager) {\n        manager.add(new Separator());\n        manager.add(focusDialogAction);\n        manager.add(focusOnSelectionAction);\n        manager.add(new Separator());\n        manager.add(historyAction);\n        manager.add(forwardAction);\n        manager.add(new Separator());\n        manager.add(hideSelectionAction);\n        manager.add(showHiddenAction);\n        manager.add(new Separator());\n        manager.add(refreshAction);\n        manager.add(applyDefaultLayoutAction);\n        manager.add(new Separator());\n        manager.add(contextZoomContributionViewItem);\n    }\n<fim_suffix>    private void fillLocalToolBar(IToolBarManager toolBarManager) {\n        toolBarManager.add(refreshAction);\n        toolBarManager.add(focusDialogActionToolbar);\n        toolBarManager.add(new Separator());\n        toolBarManager.add(historyAction);\n        toolBarManager.add(forwardAction);\n    }<fim_middle>// function below has no smell\n"}