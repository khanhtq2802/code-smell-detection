{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.yarn.sls.nodemanager;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.hadoop.classification.InterfaceAudience.Private;\nimport org.apache.hadoop.classification.InterfaceStability.Unstable;\nimport org.apache.hadoop.net.Node;\nimport org.apache.hadoop.yarn.api.records.ApplicationId;\nimport org.apache.hadoop.yarn.api.records.ContainerExitStatus;\nimport org.apache.hadoop.yarn.api.records.ContainerId;\nimport org.apache.hadoop.yarn.api.records.ContainerState;\nimport org.apache.hadoop.yarn.api.records.ContainerStatus;\nimport org.apache.hadoop.yarn.api.records.NodeId;\nimport org.apache.hadoop.yarn.api.records.NodeState;\nimport org.apache.hadoop.yarn.api.records.Resource;\nimport org.apache.hadoop.yarn.api.records.ResourceOption;\nimport org.apache.hadoop.yarn.server.api.protocolrecords.NodeHeartbeatResponse;\nimport org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\nimport org.apache.hadoop.yarn.server.resourcemanager.rmnode\n        .UpdatedContainerInfo;\n\n@Private\n@Unstable\npublic class NodeInfo {\n  private static int NODE_ID = 0;\n\n  public static NodeId newNodeID(String host, int port) {\n    return NodeId.newInstance(host, port);\n  }\n\n  @Private\n  @Unstable\n  private static class FakeRMNodeImpl implements RMNode {\n    private NodeId nodeId;\n    private String hostName;\n    private String nodeAddr;\n    private String httpAddress;\n    private int cmdPort;\n    private volatile ResourceOption perNode;\n    private String rackName;\n    private String healthReport;\n    private NodeState state;\n    private List<ContainerId> toCleanUpContainers;\n    private List<ApplicationId> toCleanUpApplications;\n    \n    public FakeRMNodeImpl(NodeId nodeId, String nodeAddr, String httpAddress,\n        ResourceOption perNode, String rackName, String healthReport,\n        int cmdPort, String hostName, NodeState state) {\n      this.nodeId = nodeId;\n      this.nodeAddr = nodeAddr;\n      this.httpAddress = httpAddress;\n      this.perNode = perNode;\n      this.rackName = rackName;\n      this.healthReport = healthReport;\n      this.cmdPort = cmdPort;\n      this.hostName = hostName;\n      this.state = state;\n      toCleanUpApplications = new ArrayList<ApplicationId>();\n      toCleanUpContainers = new ArrayList<ContainerId>();\n    }\n\n    public NodeId getNodeID() {\n      return nodeId;\n    }\n    \n    public String getHostName() {\n      return hostName;\n    }\n    \n    public int getCommandPort() {\n      return cmdPort;\n    }\n    \n    public int getHttpPort() {\n      return 0;\n    }\n\n    public String getNodeAddress() {\n      return nodeAddr;\n    }\n\n    public String getHttpAddress() {\n      return httpAddress;\n    }\n\n    public String getHealthReport() {\n      return healthReport;\n    }\n\n    public long getLastHealthReportTime() {\n      return 0; \n    }\n\n    public Resource getTotalCapability() {\n      return perNode.getResource();\n    }\n    \n    public ResourceOption getResourceOption() {\n      return perNode;\n    }\n\n    public String getRackName() {\n      return rackName;\n    }\n\n    public Node getNode() {\n      throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public NodeState getState() {\n      return state;\n    }\n\n    public List<ContainerId> getContainersToCleanUp() {\n      return toCleanUpContainers;\n    }\n\n    public List<ApplicationId> getAppsToCleanup() {\n      return toCleanUpApplications;\n    }\n\n    public void updateNodeHeartbeatResponseForCleanup(\n            NodeHeartbeatResponse response) {\n    }\n\n    public NodeHeartbeatResponse getLastNodeHeartBeatResponse() {\n      return null;\n    }\n\n    public List<UpdatedContainerInfo> pullContainerUpdates() {\n      ArrayList<UpdatedContainerInfo> list = new ArrayList<UpdatedContainerInfo>();\n      \n      ArrayList<ContainerStatus> list2 = new ArrayList<ContainerStatus>();\n      for(ContainerId cId : this.toCleanUpContainers) {\n        list2.add(ContainerStatus.newInstance(cId, ContainerState.RUNNING, \"\", \n          ContainerExitStatus.SUCCESS));\n      }\n      list.add(new UpdatedContainerInfo(new ArrayList<ContainerStatus>(), \n        list2));\n      return list;\n    }\n\n\t@Override\n\tpublic String getNodeManagerVersion() {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n    @Override\n    public void setResourceOption(ResourceOption resourceOption) {\n      perNode = resourceOption;\n    }\n  }\n\n<fim_suffix>  public static RMNode newNodeInfo(String rackName, String hostName,\n                              final ResourceOption resourceOption, int port) {\n    final NodeId nodeId = newNodeID(hostName, port);\n    final String nodeAddr = hostName + \":\" + port;\n    final String httpAddress = hostName;\n    \n    return new FakeRMNodeImpl(nodeId, nodeAddr, httpAddress,\n        resourceOption, rackName, \"Me good\",\n        port, hostName, null);\n  }\n  \n  public static RMNode newNodeInfo(String rackName, String hostName,\n                              final Resource resource) {\n    return newNodeInfo(rackName, hostName, ResourceOption.newInstance(resource,\n        RMNode.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT), NODE_ID++);\n  }\n}<fim_middle>// function below has no smell\n"}