{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.hbase.master.assignment;\n\nimport java.io.IOException;\nimport org.apache.hadoop.hbase.ServerName;\nimport org.apache.hadoop.hbase.exceptions.UnexpectedStateException;\nimport org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv;\nimport org.apache.hadoop.hbase.master.procedure.RSProcedureDispatcher.RegionOpenOperation;\nimport org.apache.hadoop.hbase.procedure2.ProcedureMetrics;\nimport org.apache.hadoop.hbase.procedure2.ProcedureStateSerializer;\nimport org.apache.hadoop.hbase.procedure2.ProcedureSuspendedException;\nimport org.apache.hadoop.hbase.procedure2.RemoteProcedureDispatcher.RemoteOperation;\nimport org.apache.yetus.audience.InterfaceAudience;\n\nimport org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil;\nimport org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.AssignRegionStateData;\nimport org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.RegionTransitionState;\nimport org.apache.hadoop.hbase.shaded.protobuf.generated.RegionServerStatusProtos.RegionStateTransition.TransitionCode;\n\n/**\n * Leave here only for checking if we can successfully start the master.\n * @deprecated Do not use any more.\n * @see TransitRegionStateProcedure\n */\n// TODO: Add being able to assign a region to open read-only.\n@Deprecated\n@InterfaceAudience.Private\npublic class AssignProcedure extends RegionTransitionProcedure {\n\n  private boolean forceNewPlan = false;\n\n  protected volatile ServerName targetServer;\n\n  public AssignProcedure() {\n  }\n\n  @Override\n  public TableOperationType getTableOperationType() {\n    return TableOperationType.REGION_ASSIGN;\n  }\n\n  @Override\n  protected boolean isRollbackSupported(final RegionTransitionState state) {\n    switch (state) {\n      case REGION_TRANSITION_QUEUE:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  @Override\n  protected void serializeStateData(ProcedureStateSerializer serializer) throws IOException {\n    final AssignRegionStateData.Builder state =\n      AssignRegionStateData.newBuilder().setTransitionState(getTransitionState())\n        .setRegionInfo(ProtobufUtil.toRegionInfo(getRegionInfo()));\n    if (forceNewPlan) {\n      state.setForceNewPlan(true);\n    }\n    if (this.targetServer != null) {\n      state.setTargetServer(ProtobufUtil.toServerName(this.targetServer));\n    }\n    if (getAttempt() > 0) {\n      state.setAttempt(getAttempt());\n    }\n    serializer.serialize(state.build());\n  }\n\n  @Override\n  protected void deserializeStateData(ProcedureStateSerializer serializer) throws IOException {\n    final AssignRegionStateData state = serializer.deserialize(AssignRegionStateData.class);\n    setTransitionState(state.getTransitionState());\n    setRegionInfo(ProtobufUtil.toRegionInfo(state.getRegionInfo()));\n    forceNewPlan = state.getForceNewPlan();\n    if (state.hasTargetServer()) {\n      this.targetServer = ProtobufUtil.toServerName(state.getTargetServer());\n    }\n    if (state.hasAttempt()) {\n      setAttempt(state.getAttempt());\n    }\n  }\n\n<fim_suffix>  @Override\n  protected boolean startTransition(final MasterProcedureEnv env, final RegionStateNode regionNode)\n      throws IOException {\n    return true;\n  }\n\n  @Override\n  protected boolean updateTransition(final MasterProcedureEnv env, final RegionStateNode regionNode)\n      throws IOException, ProcedureSuspendedException {\n    return true;\n  }\n\n  @Override\n  protected void finishTransition(final MasterProcedureEnv env, final RegionStateNode regionNode)\n      throws IOException {\n  }\n\n  @Override\n  protected void reportTransition(final MasterProcedureEnv env, final RegionStateNode regionNode,\n      final TransitionCode code, final long openSeqNum) throws UnexpectedStateException {\n  }\n\n  @Override\n  public RemoteOperation remoteCallBuild(final MasterProcedureEnv env,\n      final ServerName serverName) {\n    assert serverName.equals(getRegionState(env).getRegionLocation());\n    return new RegionOpenOperation(this, getRegionInfo(),\n      env.getAssignmentManager().getFavoredNodes(getRegionInfo()), false);\n  }\n\n  @Override\n  protected boolean remoteCallFailed(final MasterProcedureEnv env, final RegionStateNode regionNode,\n      final IOException exception) {\n    return true;\n  }\n\n  @Override\n  public void toStringClassDetails(StringBuilder sb) {\n    super.toStringClassDetails(sb);\n    if (this.targetServer != null) sb.append(\", target=\").append(this.targetServer);\n  }\n\n  @Override\n  protected ProcedureMetrics getProcedureMetrics(MasterProcedureEnv env) {\n    return env.getAssignmentManager().getAssignmentManagerMetrics().getAssignProcMetrics();\n  }\n}<fim_middle>// function below has no smell\n"}