{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2017 Red Hat Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *  Lucas Bullen (Red Hat Inc.) - Initial implementation\n *******************************************************************************/\n\npackage org.eclipse.acute.SWTBotTests.dotnettest;\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.List;\n\nimport org.eclipse.acute.SWTBotTests.AbstractDotnetTest;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.NullProgressMonitor;\nimport org.eclipse.swt.widgets.Tree;\nimport org.eclipse.swtbot.eclipse.finder.widgets.SWTBotEditor;\nimport org.eclipse.swtbot.eclipse.finder.widgets.SWTBotView;\nimport org.eclipse.swtbot.swt.finder.SWTBot;\nimport org.eclipse.swtbot.swt.finder.finders.ChildrenControlFinder;\nimport org.eclipse.swtbot.swt.finder.matchers.WidgetOfType;\nimport org.eclipse.swtbot.swt.finder.waits.ICondition;\nimport org.eclipse.swtbot.swt.finder.widgets.SWTBotTree;\nimport org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\nimport org.junit.Test;\n\n<fim_suffix>public class TestRun extends AbstractDotnetTest {\n\n\t@Override\n\tpublic void setup() throws CoreException {\n\t\tsuper.buildEmptyProject();\n\t\tcsprojFile = this.project.getFile(\"Project2.Tests.csproj\");\n\t\tcsprojFile.create(getClass().getResourceAsStream(csprojFile.getName()), true, new NullProgressMonitor());\n\t}\n\n\t@Test\n\tpublic void testDotnetRunSuccessful() throws CoreException {\n\t\tint exitCode = runTest(\"ProjectTestsPass.cs\");\n\t\tassertTrue(\"Test's exit code was incorrect; expected: 0, actual: \" + exitCode, exitCode == 0);\n\t}\n\n\t@Test\n\tpublic void testDotnetRunFailure() throws CoreException {\n\t\tint exitCode = runTest(\"ProjectTestsFail.cs\");\n\t\tassertTrue(\"Test's exit code was incorrect; expected: 1, actual: \" + exitCode, exitCode == 1);\n\t}\n\n\tprivate int runTest(String csharpSourceFileName) throws CoreException {\n\t\tcsharpSourceFile = this.project.getFile(csharpSourceFileName);\n\t\tcsharpSourceFile.create(getClass().getResourceAsStream(csharpSourceFile.getName()), true,\n\t\t\t\tnew NullProgressMonitor());\n\n\t\tSWTBotView view = bot.viewByTitle(\"Project Explorer\");\n\t\tList<Tree> explorerControls = new ChildrenControlFinder(view.getWidget())\n\t\t\t\t.findControls(WidgetOfType.widgetOfType(Tree.class));\n\t\tSWTBotTree explorerTree = new SWTBotTree(explorerControls.get(0));\n\t\tSWTBotTreeItem projectItem = explorerTree.getTreeItem(project.getName());\n\t\tSWTBotTreeItem fileItem = projectItem.expand().getNode(csharpSourceFile.getName());\n\t\tfileItem.select().contextMenu(\"Open\").click();\n\t\tSWTBotEditor editor = bot.editorByTitle(csharpSourceFile.getName());\n\t\teditor.setFocus();\n\t\teditor.toTextEditor().contextMenu(\"Run As\").menu(\"2 .NET Core Test\").click();\n\t\tSWTBotView debugView = bot.viewByTitle(\"Debug\");\n\t\tList<Tree> debugControls = new ChildrenControlFinder(debugView.getWidget())\n\t\t\t\t.findControls(WidgetOfType.widgetOfType(Tree.class));\n\t\tSWTBotTree debugTree = new SWTBotTree(debugControls.get(0));\n\n\t\tbot.waitUntil(new ICondition() {\n\t\t\t@Override\n\t\t\tpublic boolean test() throws Exception {\n\t\t\t\tfor (SWTBotTreeItem item : debugTree.getAllItems()) {\n\t\t\t\t\tfor (String node : item.expand().getNodes()) {\n\t\t\t\t\t\tif (node.matches(\"<terminated, exit value: \\\\d>dotnet test\")) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void init(SWTBot bot) {\n\t\t\t\tdebugView.setFocus();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getFailureMessage() {\n\t\t\t\tSWTBotView consoleView = bot.viewByPartName(\"Console\");\n\t\t\t\treturn \"Test program failed: \" + consoleView.bot().styledText().getText();\n\t\t\t}\n\t\t}, 30000);\n\n\t\tfor (SWTBotTreeItem item : debugTree.getAllItems()) {\n\t\t\tfor (String node : item.expand().getNodes()) {\n\t\t\t\tif (node.matches(\"<terminated, exit value: \\\\d>dotnet test\")) {\n\t\t\t\t\treturn Integer.parseInt(node.replace(\"<terminated, exit value: \", \"\").replace(\">dotnet test\", \"\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}<fim_middle>// class below has no smell\n"}