{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.pluto.container.impl;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.util.Collection;\n\nimport javax.portlet.ClientDataRequest;\nimport javax.portlet.PortletException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.Part;\n\nimport org.apache.pluto.container.PortletRequestContext;\nimport org.apache.pluto.container.PortletResponseContext;\n\n/**\n * Implementation of the <code>javax.portlet.ClientDataRequest</code> interface.\n */\npublic abstract class ClientDataRequestImpl extends PortletRequestImpl implements ClientDataRequest\n{\n    /** Flag indicating if the HTTP body reader has been accessed. */\n    protected boolean readerAccessed = false;\n\n    public ClientDataRequestImpl(PortletRequestContext requestContext, PortletResponseContext responseContext, String lifecyclePhase)\n    {\n        super(requestContext, responseContext, lifecyclePhase);\n    }\n\n<fim_suffix>    private void checkPostedFormData() \n    {\n        if (getMethod().equals(\"POST\"))\n        {\n            String contentType = getContentType();\n            if (contentType == null || contentType.equals(\"application/x-www-form-urlencoded\"))\n            {\n                throw new IllegalStateException(\"User request HTTP POST data is of type \"\n                                                + \"application/x-www-form-urlencoded. \"\n                                                + \"This data has been already processed \"\n                                                + \"by the portlet-container and is available \"\n                                                + \"as request parameters.\");\n            }\n        }\n    }\n        \n    public java.lang.String getCharacterEncoding()\n    {\n        return getServletRequest().getCharacterEncoding();\n    }\n\n    public int getContentLength()\n    {\n        return getServletRequest().getContentLength();\n    }\n\n    @Override\n    public long getContentLengthLong()\n    {\n        return getServletRequest().getContentLengthLong();\n    }\n\n    @Override\n    public Part getPart(String name) throws IOException, PortletException\n    {\n       try {\n          return getServletRequest().getPart(name);\n       } catch (ServletException e) {\n          throw new PortletException(e);\n       }\n    }\n\n    @Override\n    public Collection<Part> getParts() throws IOException, PortletException\n    {\n       try {\n          return getServletRequest().getParts();\n       } catch (ServletException e) {\n          throw new PortletException(e);\n       }\n    }\n\n    public java.lang.String getContentType()\n    {\n        return getServletRequest().getContentType();\n    }\n    \n    public String getMethod()\n    {\n        return getServletRequest().getMethod();\n    }\n\n    public InputStream getPortletInputStream() throws IOException\n    {\n        checkPostedFormData();\n        // the HttpServletRequest will ensure that a IllegalStateException is thrown\n        //   if getReader() was called earlier        \n        return getServletRequest().getInputStream();\n    }\n\n    public BufferedReader getReader()\n    throws UnsupportedEncodingException, IOException \n    {\n        checkPostedFormData();\n        // the HttpServletRequest will ensure that a IllegalStateException is thrown\n        //   if getInputStream() was called earlier\n        BufferedReader reader = getServletRequest().getReader();\n        readerAccessed = true;\n        return reader;\n\n    }\n    \n    public void setCharacterEncoding(String encoding)\n    throws UnsupportedEncodingException \n    {\n        if (readerAccessed) \n        {\n            throw new IllegalStateException(\"Cannot set character encoding \"\n                    + \"after HTTP body reader is accessed.\");\n        }\n        getServletRequest().setCharacterEncoding(encoding);\n    }\n}<fim_middle>// function below has no smell\n"}