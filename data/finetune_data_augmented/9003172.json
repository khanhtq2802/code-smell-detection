{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.lucene.payloads;\n\nimport org.apache.lucene.index.PostingsEnum;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.search.spans.SpanCollector;\nimport org.apache.lucene.util.BytesRef;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\n\n/**\n * SpanCollector for collecting payloads\n */\n<fim_suffix>public class PayloadSpanCollector implements SpanCollector {\n\n  private final Collection<byte[]> payloads = new ArrayList<>();\n\n  @Override\n  public void collectLeaf(PostingsEnum postings, int position, Term term) throws IOException {\n    BytesRef payload = postings.getPayload();\n    if (payload == null)\n      return;\n    final byte[] bytes = new byte[payload.length];\n    System.arraycopy(payload.bytes, payload.offset, bytes, 0, payload.length);\n    payloads.add(bytes);\n  }\n\n  @Override\n  public void reset() {\n    payloads.clear();\n  }\n\n  /**\n   * @return the collected payloads\n   */\n  public Collection<byte[]> getPayloads() {\n    return payloads;\n  }\n}<fim_middle>// class below has no smell\n"}