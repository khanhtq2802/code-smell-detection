{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.shardingsphere.core.parse.parser.dialect;\n\nimport lombok.AccessLevel;\nimport lombok.NoArgsConstructor;\nimport org.apache.shardingsphere.core.parse.lexer.LexerEngine;\nimport org.apache.shardingsphere.core.parse.parser.clause.expression.AliasExpressionParser;\nimport org.apache.shardingsphere.core.parse.parser.clause.expression.BasicExpressionParser;\nimport org.apache.shardingsphere.core.parse.parser.dialect.mysql.clause.expression.MySQLAliasExpressionParser;\nimport org.apache.shardingsphere.core.parse.parser.dialect.oracle.clause.expression.OracleAliasExpressionParser;\nimport org.apache.shardingsphere.core.parse.parser.dialect.postgresql.clause.expression.PostgreSQLAliasExpressionParser;\nimport org.apache.shardingsphere.core.parse.parser.dialect.sqlserver.clause.expression.SQLServerAliasExpressionParser;\n\n/**\n * Expression parser factory.\n *\n * @author zhangliang\n */\n<fim_suffix>@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic final class ExpressionParserFactory {\n    \n    /**\n     * Create alias parser instance.\n     * \n     * @param lexerEngine lexical analysis engine.\n     * @return alias parser instance\n     */\n    public static AliasExpressionParser createAliasExpressionParser(final LexerEngine lexerEngine) {\n        switch (lexerEngine.getDatabaseType()) {\n            case H2:\n                return new MySQLAliasExpressionParser(lexerEngine);\n            case MySQL:\n                return new MySQLAliasExpressionParser(lexerEngine);\n            case Oracle:\n                return new OracleAliasExpressionParser(lexerEngine);\n            case SQLServer:\n                return new SQLServerAliasExpressionParser(lexerEngine);\n            case PostgreSQL:\n                return new PostgreSQLAliasExpressionParser(lexerEngine);\n            default:\n                throw new UnsupportedOperationException(String.format(\"Cannot support database type: %s\", lexerEngine.getDatabaseType()));\n        }\n    }\n    \n    /**\n     * Create expression parser instance.\n     *\n     * @param lexerEngine lexical analysis engine.\n     * @return expression parser instance\n     */\n    public static BasicExpressionParser createBasicExpressionParser(final LexerEngine lexerEngine) {\n        return new BasicExpressionParser(lexerEngine);\n    }\n}<fim_middle>// class below has no smell\n"}