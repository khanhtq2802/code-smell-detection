{"text": "<fim_prefix>/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\npackage org.apache.qpid.qmf2.common;\n\n// Misc Imports\nimport java.util.List;\n\n/**\n * A class to create and evaluate the BooleanLessEqual Expression\n *\n * @author Fraser Adams\n */\npublic final class BooleanLessEqual extends BooleanExpression\n{\n    /**\n     * Factory method to create an instance of BooleanLessEqual\n     * @param expr the List of Expressions extracted by parsing the Query predicate\n     * @return an instance of the concrete BooleanExpression\n     */\n    public Expression create(final List expr) throws QmfException\n    {\n        return new BooleanLessEqual(expr);\n    }\n\n    /**\n     * Basic Constructor primarily used by the prototype instance of each concrete BooleanExpression\n     */\n    public BooleanLessEqual()\n    {\n    }\n\n    /**\n     * Main Constructor, uses base class constructor to populate unevaluated operands\n     * @param expr the List of Expressions extracted by parsing the Query predicate\n     */\n<fim_suffix>    public BooleanLessEqual(final List expr) throws QmfException\n    {\n        super(2, expr);\n    }\n    \n    /**\n     * Evaluate \"less than or equal to\" expression against a QmfData instance.\n     * N.B. to avoid complexities with types this class treats operands as Strings performing an appropriate evaluation\n     * of the String that makes sense for a given expression e.g. parsing as a double for {@literal >, >=, <, <= }\n     *\n     * @param data the object to evaluate the expression against\n     * @return true if query matches the QmfData instance, else false.\n     */\n    public boolean evaluate(final QmfData data)\n    {\n        populateOperands(data);\n\n        if (_operands[0] == null || _operands[1] == null)\n        {\n            return false;\n        }\n\n        try\n        {\n            double l = Double.parseDouble(_operands[0]);\n            double r = Double.parseDouble(_operands[1]);\n            return l <= r;\n        }\n        catch (NumberFormatException nfe)\n        {\n            // If converting to double fails try a lexicographic comparison\n            return _operands[0].compareTo(_operands[1]) <= 0;\n        }\n    }\n}\n<fim_middle>// function below has no smell\n"}