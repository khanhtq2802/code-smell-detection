{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.avro;\n\nimport java.net.URI;\nimport java.util.Map;\n\nimport org.apache.avro.Protocol;\nimport org.apache.camel.RuntimeCamelException;\nimport org.apache.camel.spi.Metadata;\nimport org.apache.camel.spi.UriParam;\nimport org.apache.camel.spi.UriParams;\nimport org.apache.camel.spi.UriPath;\nimport org.apache.commons.lang.StringUtils;\n\nimport static org.apache.camel.component.avro.AvroConstants.AVRO_MESSAGE_NAME_SEPARATOR;\n\n@UriParams\npublic class AvroConfiguration implements Cloneable {\n\n    @UriPath @Metadata(required = true)\n    private AvroTransport transport;\n    @UriPath @Metadata(required = true)\n    private String host;\n    @UriPath @Metadata(required = true)\n    private int port;\n    @UriPath\n    private String messageName;\n    @UriParam\n    private String protocolLocation;\n    @UriParam\n    private Protocol protocol;\n    @UriParam\n    private String protocolClassName;\n    @UriParam\n    private String uriAuthority;\n    @UriParam\n    private boolean reflectionProtocol;\n    @UriParam\n    private boolean singleParameter;\n\n    public AvroConfiguration copy() {\n        try {\n            AvroConfiguration answer = (AvroConfiguration)clone();\n            return answer;\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeCamelException(e);\n        }\n    }\n\n    public void parseURI(URI uri, Map<String, Object> parameters, AvroComponent component) throws Exception {\n        transport = AvroTransport.valueOf(uri.getScheme());\n\n        setHost(uri.getHost());\n        setPort(uri.getPort());\n        \n        if ((uri.getPath() != null)\n            && (StringUtils.indexOf(uri.getPath(), AVRO_MESSAGE_NAME_SEPARATOR) != -1)) {\n            String path = StringUtils.substringAfter(uri.getPath(), AVRO_MESSAGE_NAME_SEPARATOR);\n            if (!path.contains(AVRO_MESSAGE_NAME_SEPARATOR)) {\n                setMessageName(path);\n            } else {\n                throw new IllegalArgumentException(\"Unrecognized Avro message name: \" + path + \" for uri: \" + uri);\n            }\n        }\n        \n        setUriAuthority(uri.getAuthority());\n    }\n\n    public String getHost() {\n        return host;\n    }\n\n    /**\n     * Hostname to use\n     */\n    public void setHost(String host) {\n        this.host = host;\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    /**\n     * Port number to use\n     */\n    public void setPort(int port) {\n        this.port = port;\n    }\n\n    public Protocol getProtocol() {\n        return protocol;\n    }\n\n    /**\n     * Avro protocol to use\n     */\n    public void setProtocol(Protocol protocol) {\n        this.protocol = protocol;\n    }\n\n    public AvroTransport getTransport() {\n        return transport;\n    }\n\n    /**\n     * Transport to use, can be either http or netty\n     */\n    public void setTransport(String transport) {\n        this.transport = AvroTransport.valueOf(transport);\n    }\n\n    /**\n     * Transport to use, can be either http or netty\n     */\n    public void setTransport(AvroTransport transport) {\n        this.transport = transport;\n    }\n\n    public String getProtocolLocation() {\n        return protocolLocation;\n    }\n\n    /**\n     * Avro protocol location\n     */\n    public void setProtocolLocation(String protocolLocation) {\n        this.protocolLocation = protocolLocation;\n    }\n\n    public String getProtocolClassName() {\n        return protocolClassName;\n    }\n\n    /**\n     * Avro protocol to use defined by the FQN class name\n     */\n    public void setProtocolClassName(String protocolClassName) {\n        this.protocolClassName = protocolClassName;\n    }\n\n    public String getMessageName() {\n        return messageName;\n    }\n\n    /**\n     * The name of the message to send.\n     */\n    public void setMessageName(String messageName) {\n        this.messageName = messageName;\n    }\n\n<fim_suffix>    public String getUriAuthority() {\n        return uriAuthority;\n    }\n\n    /**\n     * Authority to use (username and password)\n     */\n    public void setUriAuthority(String uriAuthority) {\n        this.uriAuthority = uriAuthority;\n    }\n\n    public boolean isReflectionProtocol() {\n        return reflectionProtocol;\n    }\n\n    /**\n     * If protocol object provided is reflection protocol. Should be used only with protocol parameter because for protocolClassName protocol type will be auto detected\n     */\n    public void setReflectionProtocol(boolean isReflectionProtocol) {\n        this.reflectionProtocol = isReflectionProtocol;\n    }\n\n    public boolean isSingleParameter() {\n        return singleParameter;\n    }\n\n    /**\n     * If true, consumer parameter won't be wrapped into array. Will fail if protocol specifies more then 1 parameter for the message\n     */\n    public void setSingleParameter(boolean singleParameter) {\n        this.singleParameter = singleParameter;\n    }\n}<fim_middle>// function below has no smell\n"}