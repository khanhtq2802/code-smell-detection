{"text": "<fim_prefix>package org.apache.maven.plugins.ear;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.plugins.ear.util.ArtifactTypeMappingService;\nimport org.apache.maven.plugins.ear.util.JavaEEVersion;\n\n/**\n * Builds an {@link EarModule} based on an <tt>Artifact</tt>.\n * \n * @author <a href=\"snicoll@apache.org\">Stephane Nicoll</a>\n * @version $Id: EarModuleFactory.java 1755538 2016-08-08 20:32:12Z rfscholte $\n */\npublic final class EarModuleFactory\n{\n    /**\n     * The list of artifact types.\n     */\n    public static final List<String> STANDARD_ARTIFACT_TYPE =\n        Collections.unmodifiableList( Arrays.asList( \"jar\", \"ejb\", \"par\", \"ejb-client\", \"app-client\", \"rar\", \"war\",\n                                                     \"sar\", \"wsr\", \"har\" ) );\n\n    /**\n     * Creates a new {@link EarModule} based on the specified {@link Artifact} and the specified execution\n     * configuration.\n     * \n     * @param artifact the artifact\n     * @param javaEEVersion the javaEE version to use\n     * @param defaultLibBundleDir the default bundle dir for {@link org.apache.maven.plugins.ear.JarModule}\n     * @param includeInApplicationXml should {@link org.apache.maven.plugins.ear.JarModule} be included in application\n     *            Xml\n     * @param typeMappingService The artifact type mapping service\n     * @return an ear module for this artifact\n     * @throws UnknownArtifactTypeException if the artifact is not handled\n     */\n<fim_suffix>    public static EarModule newEarModule( Artifact artifact, JavaEEVersion javaEEVersion, String defaultLibBundleDir,\n                                          Boolean includeInApplicationXml,\n                                          ArtifactTypeMappingService typeMappingService )\n        throws UnknownArtifactTypeException\n    {\n        // Get the standard artifact type based on default config and user-defined mapping(s)\n        final String artifactType;\n        try\n        {\n            artifactType = typeMappingService.getStandardType( artifact.getType() );\n        }\n        catch ( UnknownArtifactTypeException e )\n        {\n            throw new UnknownArtifactTypeException( e.getMessage() + \" for \" + artifact.getArtifactId() );\n        }\n\n        if ( \"jar\".equals( artifactType ) )\n        {\n            return new JarModule( artifact, defaultLibBundleDir, includeInApplicationXml );\n        }\n        else if ( \"ejb\".equals( artifactType ) )\n        {\n            return new EjbModule( artifact );\n        }\n        else if ( \"par\".equals( artifactType ) )\n        {\n            return new ParModule( artifact );\n        }\n        else if ( \"ejb-client\".equals( artifactType ) )\n        {\n            // Somewhat weird way to tackle the problem described in MEAR-85\n            if ( javaEEVersion.le( JavaEEVersion.ONE_DOT_FOUR ) )\n            {\n                return new EjbClientModule( artifact, null );\n            }\n            else\n            {\n                return new EjbClientModule( artifact, defaultLibBundleDir );\n            }\n        }\n        else if ( \"app-client\".equals( artifactType ) )\n        {\n            return new AppClientModule( artifact );\n        }\n        else if ( \"rar\".equals( artifactType ) )\n        {\n            return new RarModule( artifact );\n        }\n        else if ( \"war\".equals( artifactType ) )\n        {\n            return new WebModule( artifact );\n        }\n        else if ( \"sar\".equals( artifactType ) )\n        {\n            return new SarModule( artifact );\n        }\n        else if ( \"wsr\".equals( artifactType ) )\n        {\n            return new WsrModule( artifact );\n        }\n        else if ( \"har\".equals( artifactType ) )\n        {\n            return new HarModule( artifact );\n        }\n        else\n        {\n            throw new IllegalStateException( \"Could not handle artifact type[\" + artifactType + \"]\" );\n        }\n    }\n\n    /**\n     * Returns a list of standard artifact types.\n     * \n     * @return the standard artifact types\n     */\n    public static List<String> getStandardArtifactTypes()\n    {\n        return STANDARD_ARTIFACT_TYPE;\n    }\n\n    /**\n     * Specify whether the specified type is standard artifact type.\n     * \n     * @param type the type to check\n     * @return true if the specified type is a standard artifact type\n     */\n    public static boolean isStandardArtifactType( final String type )\n    {\n        return STANDARD_ARTIFACT_TYPE.contains( type );\n    }\n\n}<fim_middle>// function below has no smell\n"}