{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sis.internal.shapefile.jdbc.resultset;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.math.BigDecimal;\nimport java.net.URL;\nimport java.sql.*;\nimport java.util.Calendar;\nimport java.util.Map;\nimport org.apache.sis.internal.shapefile.jdbc.AbstractJDBC;\n/**\n * Holds all the unimplemented feature of a {@code ResultSet}.\n * This is in order to avoid having a ResultSet implementation of thousand lines and unreadable.\n *\n * <table class=\"sis\">\n *   <caption>Connection default values</caption>\n *   <tr><th>Property</th>                           <th>Value</th></tr>\n *   <tr><td>{@link #getType()}</td>                 <td>{@link Statement#getResultSetType()}</td></tr>\n *   <tr><td>{@link #getConcurrency()}</td>          <td>{@link Statement#getResultSetConcurrency()}</td></tr>\n *   <tr><td>{@link #getHoldability()}</td>          <td>{@link Statement#getResultSetHoldability()}</td></tr>\n *   <tr><td>{@link #getFetchDirection()}</td>       <td>{@link Statement#getFetchDirection()}</td></tr>\n *   <tr><td>{@link #getFetchSize()}</td>            <td>{@link Statement#getFetchSize()}</td></tr>\n *   <tr><td>{@link #isBeforeFirst()}</td>           <td>Compute from {@link #getRow()}</td></tr>\n *   <tr><td>{@link #isFirst()}</td>                 <td>Compute from {@link #getRow()}</td></tr>\n *   <tr><td>{@link #relative(int)}</td>             <td>Use {@link #absolute(int)}</td></tr>\n *   <tr><td>{@link #beforeFirst()}</td>             <td>Use {@link #absolute(int)}</td></tr>\n *   <tr><td>{@link #first()}</td>                   <td>Use {@link #absolute(int)}</td></tr>\n *   <tr><td>{@link #last()}</td>                    <td>Use {@link #absolute(int)}</td></tr>\n *   <tr><td>{@link #afterLast()}</td>               <td>Use {@link #absolute(int)}</td></tr>\n *   <tr><td>{@link #previous()}</td>                <td>Use {@link #relative(int)}</td></tr>\n *   <tr><td>{@link #getNString(int)}</td>           <td>{@link #getString(int)}</td></tr>\n *   <tr><td>{@link #getNCharacterStream(int)}</td>  <td>{@link #getCharacterStream(int)}</td></tr>\n *   <tr><td>{@link #getWarnings()}</td>             <td>{@code null}</td></tr>\n *   <tr><td>{@link #clearWarnings()}</td>           <td>Ignored</td></tr>\n * </table>\n *\n * Furthermore, most methods expecting a column label of type {@code String} first invoke {@link #findColumn(String)},\n * then invoke the method of the same name expecting a column index as an {@code int}.\n *\n * @author  Marc Le Bihan\n * @version 0.5\n * @since   0.5\n * @module\n */\npublic abstract class AbstractResultSet extends AbstractJDBC implements ResultSet {\n    /*\n     * Note to developers : this class only offers methods that return unsupported exceptions : methods that are not implemented anywhere.\n     * if any implementation is done, even a redirection to another class or method, please move the implementation on the next subclass.\n     */\n    /**\n     * Constructs a new {@code ResultSet} instance.\n     */\n    public AbstractResultSet() {\n    }\n    /**\n     * @see java.sql.ResultSet#getBoolean(java.lang.String)\n     */\n    @Override\n    public boolean getBoolean(String columnLabel) throws SQLException {\n        throw unsupportedOperation(\"getBoolean\", columnLabel);\n    }\n    /**\n     * @see java.sql.ResultSet#getByte(java.lang.String)\n     */\n    @Override\n    public byte getByte(String columnLabel) throws SQLException {\n        throw unsupportedOperation(\"getByte\", columnLabel);\n    }\n    /**\n     * @see java.sql.ResultSet#getBytes(java.lang.String)\n     */\n    @Override\n    public byte[] getBytes(String columnLabel) throws SQLException {\n        throw unsupportedOperation(\"getBytes\", columnLabel);\n    }\n    /**\n     * @see java.sql.ResultSet#getTime(java.lang.String)\n     */\n    @Override\n    public Time getTime(String columnLabel) throws SQLException {\n        throw unsupportedOperation(\"getTime\", columnLabel);\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public void setFetchDirection(int direction) throws SQLException {\n        throw unsupportedOperation(\"setFetchDirection\", direction);\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public void setFetchSize(int rows) throws SQLException {\n        throw unsupportedOperation(\"setFetchSize\", rows);\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public String getCursorName() throws SQLException {\n        throw unsupportedOperation(\"getCursorName\");\n    }\n    /**\n     * Retrieves the current row number (first row is 1). This method is unsupported by default.\n     * Implementing this method will allow {@link #relative(int)} and other methods to work with\n     * their default implementation.\n     */\n    @Override\n    public int getRow() throws SQLException {\n        throw unsupportedOperation(\"getRow\");\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public boolean isLast() throws SQLException {\n        throw unsupportedOperation(\"isLast\");\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public boolean isAfterLast() throws SQLException {\n        throw unsupportedOperation(\"isAfterLast\");\n    }\n    /**\n     * Moves the cursor to the given row number (first row is 1).\n     * Special cases:\n     * <ul>\n     *   <li>Negative numbers move to an absolute row position with respect to the end of the result set.</li>\n     *   <li>-1 moves on the last row.</li>\n     *   <li> 0 moves the cursor before the first row.</li>\n     * </ul>\n     *\n     * This method is unsupported by default. Implementing this method will allow\n     * {@link #relative(int)} and other methods to work with their default implementation.\n     *\n     * @return {@code true} if the cursor is on a row.\n     */\n    @Override\n    public boolean absolute(int row) throws SQLException {\n        throw unsupportedOperation(\"absolute\", row);\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public RowId getRowId(int columnIndex) throws SQLException {\n        throw unsupportedOperation(\"getRowId\", columnIndex);\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public boolean getBoolean(int columnIndex) throws SQLException {\n        throw unsupportedOperation(\"getBoolean\", columnIndex);\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public byte getByte(int columnIndex) throws SQLException {\n        throw unsupportedOperation(\"getByte\", columnIndex);\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public byte[] getBytes(int columnIndex) throws SQLException {\n        throw unsupportedOperation(\"getBytes\", columnIndex);\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public Date getDate(int columnIndex, Calendar cal) throws SQLException {\n        throw unsupportedOperation(\"getDate\", columnIndex, cal);\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public Time getTime(int columnIndex) throws SQLException {\n        throw unsupportedOperation(\"getTime\", columnIndex);\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public Time getTime(int columnIndex, Calendar cal) throws SQLException {\n        throw unsupportedOperation(\"getTime\", columnIndex, cal);\n    }\n    /**\n     * Unsupported by default.\n     */\n<fim_suffix>    @Override\n    public Timestamp getTimestamp(int columnIndex) throws SQLException {\n        throw unsupportedOperation(\"getTimestamp\", columnIndex);\n    }\n    /**\n     * Unsupported by default.\n     */\n    @Override\n    public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {\n        throw unsupportedOperation(\"getTimestamp\", columnIndex, cal);\n    }\n    /**<fim_middle>// function below has no smell\n"}