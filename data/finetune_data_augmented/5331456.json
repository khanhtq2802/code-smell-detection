{"text": "<fim_prefix>                .map(ap -> createAccessPolicySummaryEntity(ap)).collect(Collectors.toSet());\n        final UserGroupDTO newUserGroupDto = dtoFactory.createUserGroupDto(newUserGroup, tenantEntities, policyEntities);\n        final PermissionsDTO permissions = dtoFactory.createPermissionsDto(authorizableLookup.getTenant());\n        return entityFactory.createUserGroupEntity(newUserGroupDto, dtoFactory.createRevisionDTO(new FlowModification(revision, creator)), permissions);\n    }\n    private void validateSnippetContents(final FlowSnippetDTO flow) {\n        // validate any processors\n        if (flow.getProcessors() != null) {\n            for (final ProcessorDTO processorDTO : flow.getProcessors()) {\n                final ProcessorNode processorNode = processorDAO.getProcessor(processorDTO.getId());\n                processorDTO.setValidationStatus(processorNode.getValidationStatus().name());\n                final Collection<ValidationResult> validationErrors = processorNode.getValidationErrors();\n                if (validationErrors != null && !validationErrors.isEmpty()) {\n                    final List<String> errors = new ArrayList<>();\n                    for (final ValidationResult validationResult : validationErrors) {\n                        errors.add(validationResult.toString());\n                    }\n                    processorDTO.setValidationErrors(errors);\n                }\n            }\n        }\n        if (flow.getInputPorts() != null) {\n            for (final PortDTO portDTO : flow.getInputPorts()) {\n                final Port port = inputPortDAO.getPort(portDTO.getId());\n                final Collection<ValidationResult> validationErrors = port.getValidationErrors();\n                if (validationErrors != null && !validationErrors.isEmpty()) {\n                    final List<String> errors = new ArrayList<>();\n                    for (final ValidationResult validationResult : validationErrors) {\n                        errors.add(validationResult.toString());\n                    }\n                    portDTO.setValidationErrors(errors);\n                }\n            }\n        }\n        if (flow.getOutputPorts() != null) {\n            for (final PortDTO portDTO : flow.getOutputPorts()) {\n                final Port port = outputPortDAO.getPort(portDTO.getId());\n                final Collection<ValidationResult> validationErrors = port.getValidationErrors();\n                if (validationErrors != null && !validationErrors.isEmpty()) {\n                    final List<String> errors = new ArrayList<>();\n                    for (final ValidationResult validationResult : validationErrors) {\n                        errors.add(validationResult.toString());\n                    }\n                    portDTO.setValidationErrors(errors);\n                }\n            }\n        }\n        // get any remote process group issues\n        if (flow.getRemoteProcessGroups() != null) {\n            for (final RemoteProcessGroupDTO remoteProcessGroupDTO : flow.getRemoteProcessGroups()) {\n                final RemoteProcessGroup remoteProcessGroup = remoteProcessGroupDAO.getRemoteProcessGroup(remoteProcessGroupDTO.getId());\n                if (remoteProcessGroup.getAuthorizationIssue() != null) {\n                    remoteProcessGroupDTO.setAuthorizationIssues(Arrays.asList(remoteProcessGroup.getAuthorizationIssue()));\n                }\n            }\n        }\n    }\n    @Override\n    public FlowEntity copySnippet(final String groupId, final String snippetId, final Double originX, final Double originY, final String idGenerationSeed) {\n        // create the new snippet\n        final FlowSnippetDTO snippet = snippetDAO.copySnippet(groupId, snippetId, originX, originY, idGenerationSeed);\n        // save the flow\n        controllerFacade.save();\n        // drop the snippet\n        snippetDAO.dropSnippet(snippetId);\n        // post process new flow snippet\n        final FlowDTO flowDto = postProcessNewFlowSnippet(groupId, snippet);\n        final FlowEntity flowEntity = new FlowEntity();\n        flowEntity.setFlow(flowDto);\n        return flowEntity;\n    }\n    @Override\n    public SnippetEntity createSnippet(final SnippetDTO snippetDTO) {\n        // add the component\n        final Snippet snippet = snippetDAO.createSnippet(snippetDTO);\n        // save the flow\n        controllerFacade.save();\n        final SnippetDTO dto = dtoFactory.createSnippetDto(snippet);\n        final RevisionUpdate<SnippetDTO> snapshot = new StandardRevisionUpdate<>(dto, null);\n        return entityFactory.createSnippetEntity(snapshot.getComponent());\n    }\n    @Override\n    public PortEntity createInputPort(final Revision revision, final String groupId, final PortDTO inputPortDTO) {\n        final RevisionUpdate<PortDTO> snapshot = createComponent(\n                revision,\n                inputPortDTO,\n                () -> inputPortDAO.createPort(groupId, inputPortDTO),\n                port -> dtoFactory.createPortDto(port));\n        final Port port = inputPortDAO.getPort(inputPortDTO.getId());\n        final PermissionsDTO permissions = dtoFactory.createPermissionsDto(port);\n        final PermissionsDTO operatePermissions = dtoFactory.createPermissionsDto(new OperationAuthorizable(port));\n        final PortStatusDTO status = dtoFactory.createPortStatusDto(controllerFacade.getInputPortStatus(port.getIdentifier()));\n        final List<BulletinDTO> bulletins = dtoFactory.createBulletinDtos(bulletinRepository.findBulletinsForSource(port.getIdentifier()));\n        final List<BulletinEntity> bulletinEntities = bulletins.stream().map(bulletin -> entityFactory.createBulletinEntity(bulletin, permissions.getCanRead())).collect(Collectors.toList());\n        return entityFactory.createPortEntity(snapshot.getComponent(), dtoFactory.createRevisionDTO(snapshot.getLastModification()), permissions, operatePermissions, status, bulletinEntities);\n    }\n    @Override\n    public PortEntity createOutputPort(final Revision revision, final String groupId, final PortDTO outputPortDTO) {\n        final RevisionUpdate<PortDTO> snapshot = createComponent(\n                revision,\n                outputPortDTO,\n                () -> outputPortDAO.createPort(groupId, outputPortDTO),\n                port -> dtoFactory.createPortDto(port));\n        final Port port = outputPortDAO.getPort(outputPortDTO.getId());\n        final PermissionsDTO permissions = dtoFactory.createPermissionsDto(port);\n        final PermissionsDTO operatePermissions = dtoFactory.createPermissionsDto(new OperationAuthorizable(port));\n        final PortStatusDTO status = dtoFactory.createPortStatusDto(controllerFacade.getOutputPortStatus(port.getIdentifier()));\n        final List<BulletinDTO> bulletins = dtoFactory.createBulletinDtos(bulletinRepository.findBulletinsForSource(port.getIdentifier()));\n        final List<BulletinEntity> bulletinEntities = bulletins.stream().map(bulletin -> entityFactory.createBulletinEntity(bulletin, permissions.getCanRead())).collect(Collectors.toList());\n        return entityFactory.createPortEntity(snapshot.getComponent(), dtoFactory.createRevisionDTO(snapshot.getLastModification()), permissions, operatePermissions, status, bulletinEntities);\n    }\n<fim_suffix>    @Override\n    public ProcessGroupEntity createProcessGroup(final Revision revision, final String parentGroupId, final ProcessGroupDTO processGroupDTO) {\n        final RevisionUpdate<ProcessGroupDTO> snapshot = createComponent(\n                revision,\n                processGroupDTO,\n                () -> processGroupDAO.createProcessGroup(parentGroupId, processGroupDTO),\n                processGroup -> dtoFactory.createProcessGroupDto(processGroup));\n        final ProcessGroup processGroup = processGroupDAO.getProcessGroup(processGroupDTO.getId());\n        final PermissionsDTO permissions = dtoFactory.createPermissionsDto(processGroup);\n        final ProcessGroupStatusDTO status = dtoFactory.createConciseProcessGroupStatusDto(controllerFacade.getProcessGroupStatus(processGroup.getIdentifier()));\n        final List<BulletinDTO> bulletins = dtoFactory.createBulletinDtos(bulletinRepository.findBulletinsForSource(processGroup.getIdentifier()));\n        final List<BulletinEntity> bulletinEntities = bulletins.stream().map(bulletin -> entityFactory.createBulletinEntity(bulletin, permissions.getCanRead())).collect(Collectors.toList());\n        return entityFactory.createProcessGroupEntity(snapshot.getComponent(), dtoFactory.createRevisionDTO(snapshot.getLastModification()), permissions, status, bulletinEntities);\n    }<fim_middle>// function below has no smell\n"}