{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.pdfbox.multipdf;\n\nimport java.io.IOException;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\n\n/**\n * This class will extract one or more sequential pages and create a new document.\n * @author Adam Nichols (adam@apache.org)\n */\n<fim_suffix>public class PageExtractor\n{\n    private PDDocument sourceDocument;\n    \n    // first page to extract is page 1 (by default)\n    private int startPage = 1;\n    \n    private int endPage = 0;\n    \n    /** \n     * Creates a new instance of PageExtractor\n     * @param sourceDocument The document to split.\n     */\n    public PageExtractor(PDDocument sourceDocument)\n    {\n        this.sourceDocument = sourceDocument;\n        endPage = sourceDocument.getNumberOfPages();\n    }\n    \n    /** \n     * Creates a new instance of PageExtractor\n     * @param sourceDocument The document to split.\n     * @param startPage The first page you want extracted (inclusive)\n     * @param endPage The last page you want extracted (inclusive)\n     */\n    public PageExtractor(PDDocument sourceDocument, int startPage, int endPage)\n    {\n        this(sourceDocument);\n        this.startPage = startPage;\n        this.endPage = endPage;\n    }\n    \n    /**\n     * This will take a document and extract the desired pages into a new \n     * document.  Both startPage and endPage are included in the extracted \n     * document.  If the endPage is greater than the number of pages in the \n     * source document, it will go to the end of the document.  If startPage is\n     * less than 1, it'll start with page 1.  If startPage is greater than \n     * endPage or greater than the number of pages in the source document, a \n     * blank document will be returned.\n     * \n     * @return The extracted document\n     * @throws IOException If there is an IOError\n     */\n    public PDDocument extract() throws IOException\n    {\n        PDDocument extractedDocument = new PDDocument();\n        extractedDocument.setDocumentInformation(sourceDocument.getDocumentInformation());\n        extractedDocument.getDocumentCatalog().setViewerPreferences(\n                sourceDocument.getDocumentCatalog().getViewerPreferences());\n        \n        for (int i = startPage; i <= endPage; i++)\n        {\n            PDPage page = sourceDocument.getPage(i - 1);\n            PDPage imported = extractedDocument.importPage(page);\n            imported.setCropBox(page.getCropBox());\n            imported.setMediaBox(page.getMediaBox());\n            imported.setResources(page.getResources());\n            imported.setRotation(page.getRotation());\n        }\n            \n        return extractedDocument;\n    }\n\n    /**\n     * Gets the first page number to be extracted.\n     * @return the first page number which should be extracted\n     */\n    public int getStartPage()\n    {\n        return startPage;\n    }\n\n    /**\n     * Sets the first page number to be extracted.\n     * @param startPage the first page number which should be extracted\n     */\n    public void setStartPage(int startPage)\n    {\n        this.startPage = startPage;\n    }\n\n    /**\n     * Gets the last page number (inclusive) to be extracted.\n     * @return the last page number which should be extracted\n     */\n    public int getEndPage()\n    {\n        return endPage;\n    }\n\n    /**\n     * Sets the last page number to be extracted.\n     * @param endPage the last page number which should be extracted\n     */\n    public void setEndPage(int endPage)\n    {\n        this.endPage = endPage;\n    }\n}<fim_middle>// class below is data class\n"}