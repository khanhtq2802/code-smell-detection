{"text": "<fim_prefix>/*\n * Copyright (c) 2013, 2017, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.svm.core.genscavenge;\nimport org.graalvm.compiler.options.Option;\nimport org.graalvm.compiler.word.Word;\nimport org.graalvm.nativeimage.Platform;\nimport org.graalvm.nativeimage.Platforms;\nimport org.graalvm.word.Pointer;\nimport org.graalvm.word.UnsignedWord;\nimport com.oracle.svm.core.annotate.AlwaysInline;\nimport com.oracle.svm.core.heap.ObjectHeader;\nimport com.oracle.svm.core.heap.ObjectReferenceVisitor;\nimport com.oracle.svm.core.heap.ReferenceAccess;\nimport com.oracle.svm.core.hub.LayoutEncoding;\nimport com.oracle.svm.core.log.Log;\nimport com.oracle.svm.core.option.HostedOptionKey;\n/**\n * This visitor is handed *Pointers to Object references* and if necessary it promotes the\n * referenced Object and replaces the Object reference with a forwarding pointer.\n *\n * This turns an individual Object reference from grey to black.\n *\n * Since this visitor is used during collection, one instance of it is constructed during native\n * image generation.\n *\n * The vanilla visitObjectReference method is not inlined, but there is a visitObjectReferenceInline\n * available for performance critical code.\n */\npublic class GreyToBlackObjRefVisitor implements ObjectReferenceVisitor {\n    @Platforms(Platform.HOSTED_ONLY.class)\n    public static GreyToBlackObjRefVisitor factory() {\n        return new GreyToBlackObjRefVisitor();\n    }\n<fim_suffix>    @Override\n    public boolean visitObjectReference(final Pointer objRef, boolean compressed) {\n        return visitObjectReferenceInline(objRef, 0, compressed);\n    }\n    /**\n     * This visitor is deals in *Pointers to Object references*. As such it uses Pointer.readObject\n     * and Pointer.writeObject on the Pointer, not Pointer.toObject and Word.fromObject(o).\n     */\n    @Override\n    @AlwaysInline(\"GC performance\")\n    public boolean visitObjectReferenceInline(final Pointer objRef, final int innerOffset, boolean compressed) {\n        assert innerOffset >= 0;\n        getCounters().noteObjRef();\n        final Log trace = Log.noopLog().string(\"[GreyToBlackObjRefVisitor.visitObjectReferenceInline:\").string(\"  objRef: \").hex(objRef);\n        if (objRef.isNull()) {\n            getCounters().noteNullObjRef();\n            trace.string(\" null objRef \").hex(objRef).string(\"]\").newline();\n            return true;\n        }\n        // Read the referenced Object, carefully.\n        final Pointer offsetP = ReferenceAccess.singleton().readObjectAsUntrackedPointer(objRef, compressed);\n        assert offsetP.isNonNull() || innerOffset == 0;\n        final Pointer p = offsetP.subtract(innerOffset);\n        trace.string(\"  p: \").hex(p);\n        // It might be null.\n        if (p.isNull()) {\n            getCounters().noteNullReferent();\n            // Nothing to do.\n            trace.string(\" null\").string(\"]\").newline();\n            return true;\n        }\n        final UnsignedWord header = ObjectHeader.readHeaderFromPointer(p);\n        final ObjectHeader ohi = HeapImpl.getHeapImpl().getObjectHeader();\n        // It might be a forwarding pointer.\n        if (ohi.isForwardedHeader(header)) {\n            getCounters().noteForwardedReferent();\n            trace.string(\"  forwards to \");\n            // Update the reference to point to the forwarded Object.\n            final Object obj = ohi.getForwardedObject(p);\n            final Object offsetObj = (innerOffset == 0) ? obj : Word.objectToUntrackedPointer(obj).add(innerOffset).toObject();\n            ReferenceAccess.singleton().writeObjectAt(objRef, offsetObj, compressed);\n            trace.object(obj);\n            if (trace.isEnabled()) {\n                trace.string(\"  objectHeader: \").string(ohi.toStringFromObject(obj)).string(\"]\").newline();\n            }\n            return true;\n        }\n        // It might be a real Object.\n        final Object obj = p.toObject();\n        assert innerOffset < LayoutEncoding.getSizeFromObject(obj).rawValue();\n        // If the object is not a heap object there's nothing to do.\n        if (ohi.isNonHeapAllocatedHeader(header)) {\n            getCounters().noteNonHeapReferent();\n            // Non-heap objects do not get promoted.\n            trace.string(\"  Non-heap obj: \").object(obj);\n            if (trace.isEnabled()) {\n                trace.string(\"  objectHeader: \").string(ohi.toStringFromObject(obj)).string(\"]\").newline();\n            }\n            return true;\n        }\n        // Otherwise, promote it if necessary, and update the Object reference.\n        trace.string(\" \").object(obj);\n        if (trace.isEnabled()) {\n            trace.string(\"  objectHeader: \").string(ohi.toStringFromObject(obj)).newline();\n        }\n        // Promote the Object if necessary, making it at least grey, and ...\n        final Object copy = HeapImpl.getHeapImpl().promoteObject(obj, objRef, innerOffset, compressed);\n        trace.string(\"  copy: \").object(copy);\n        if (trace.isEnabled()) {\n            trace.string(\"  objectHeader: \").string(ohi.toStringFromObject(copy));\n        }\n        // ... update the reference to point to the copy, making the reference black.\n        if (copy != obj) {\n            getCounters().noteCopiedReferent();\n            trace.string(\" updating objRef: \").hex(objRef).string(\" with copy: \").object(copy);\n            final Object offsetCopy = (innerOffset == 0) ? copy : Word.objectToUntrackedPointer(copy).add(innerOffset).toObject();\n            ReferenceAccess.singleton().writeObjectAt(objRef, offsetCopy, compressed);\n        } else {\n            getCounters().noteUnmodifiedReference();\n        }\n        trace.string(\"]\").newline();\n        return true;\n    }\n    protected Counters getCounters() {\n        return counters;\n    }\n    public Counters openCounters() {\n        return getCounters().open();\n    }\n    public static class Options {\n        @Option(help = \"Develop demographics of the object references visited.\")//\n        public static final HostedOptionKey<Boolean> GreyToBlackObjRefDemographics = new HostedOptionKey<>(false);\n    }\n    @Platforms(Platform.HOSTED_ONLY.class)\n    protected GreyToBlackObjRefVisitor() {\n        super();\n        if (Options.GreyToBlackObjRefDemographics.getValue()) {\n            counters = RealCounters.factory();\n        } else {\n            counters = NoopCounters.factory();\n        }\n    }\n    // Immutable state.\n    protected final Counters counters;\n    /** A set of counters. The default implementation is a noop. */\n    public interface Counters extends AutoCloseable {\n        Counters open();\n        @Override\n        void close();\n        boolean isOpen();\n        void noteObjRef();\n        void noteNullObjRef();\n        void noteNullReferent();\n        void noteForwardedReferent();\n        void noteNonHeapReferent();\n        void noteCopiedReferent();\n        void noteUnmodifiedReference();\n        void toLog();\n        void reset();\n    }\n    public static class RealCounters implements Counters {\n        public static RealCounters factory() {\n            return new RealCounters();\n        }\n        @Override\n        public RealCounters open() {\n            reset();\n            isOpened = true;\n            return this;\n        }\n        @Override\n        public void close() {\n            toLog();\n            reset();\n        }\n        @Override\n        public boolean isOpen() {\n            return isOpened;\n        }\n        @Override\n        public void noteObjRef() {\n            objRef += 1L;\n        }\n        @Override\n        public void noteNullObjRef() {\n            nullObjRef += 1L;<fim_middle>// function below has no smell\n"}