{"text": "<fim_prefix>            (requestedVersion == 1 && latest == -1 ) )\n        {\n            return -1;\n        }\n        else if( requestedVersion <= 0 || requestedVersion > latest )\n        {\n            throw new NoSuchVersionException(\"Requested version \"+requestedVersion+\", but latest is \"+latest );\n        }\n        return requestedVersion;\n    }\n    /**\n     *  {@inheritDoc}\n     */\n    @Override\n    public synchronized String getPageText( String page, int version )\n        throws ProviderException\n    {\n        File dir = findOldPageDir( page );\n        version = realVersion( page, version );\n        if( version == -1 )\n        {\n            // We can let the FileSystemProvider take care\n            // of these requests.\n            return super.getPageText( page, WikiPageProvider.LATEST_VERSION );\n        }\n        File pageFile = new File( dir, \"\"+version+FILE_EXT );\n        if( !pageFile.exists() )\n            throw new NoSuchVersionException(\"Version \"+version+\"does not exist.\");\n        return readFile( pageFile );\n    }\n    // FIXME: Should this really be here?\n    private String readFile( File pagedata )\n        throws ProviderException\n    {\n        String      result = null;\n        InputStream in     = null;\n        if( pagedata.exists() )\n        {\n            if( pagedata.canRead() )\n            {\n                try\n                {\n                    in = new FileInputStream( pagedata );\n                    result = FileUtil.readContents( in, m_encoding );\n                }\n                catch( IOException e )\n                {\n                    log.error(\"Failed to read\", e);\n                    throw new ProviderException(\"I/O error: \"+e.getMessage());\n                }\n                finally\n                {\n                \tIOUtils.closeQuietly( in );\n                }\n            }\n            else\n            {\n                log.warn(\"Failed to read page from '\"+pagedata.getAbsolutePath()+\"', possibly a permissions problem\");\n                throw new ProviderException(\"I cannot read the requested page.\");\n            }\n        }\n        else\n        {\n            // This is okay.\n            // FIXME: is it?\n            log.info(\"New page\");\n        }\n        return result;\n    }\n    // FIXME: This method has no rollback whatsoever.\n    /*\n      This is how the page directory should look like:\n         version    pagedir       olddir\n          none       empty         empty\n           1         Main.txt (1)  empty\n           2         Main.txt (2)  1.txt\n           3         Main.txt (3)  1.txt, 2.txt\n    */\n    /**\n     *  {@inheritDoc}\n     */\n    @Override\n    public synchronized void putPageText( WikiPage page, String text )\n        throws ProviderException\n    {\n        //\n        //  This is a bit complicated.  We'll first need to\n        //  copy the old file to be the newest file.\n        //\n        File pageDir = findOldPageDir( page.getName() );\n        if( !pageDir.exists() )\n        {\n            pageDir.mkdirs();\n        }\n        int  latest  = findLatestVersion( page.getName() );\n        try\n        {\n            //\n            // Copy old data to safety, if one exists.\n            //\n            File oldFile = findPage( page.getName() );\n            // Figure out which version should the old page be?\n            // Numbers should always start at 1.\n            // \"most recent\" = -1 ==> 1\n            // \"first\"       = 1  ==> 2\n            int versionNumber = (latest > 0) ? latest : 1;\n            boolean firstUpdate = (versionNumber == 1);\n            if( oldFile != null && oldFile.exists() )\n            {\n                InputStream in = null;\n                OutputStream out = null;\n                try\n                {\n                    in = new BufferedInputStream( new FileInputStream( oldFile ) );\n                    File pageFile = new File( pageDir, Integer.toString( versionNumber )+FILE_EXT );\n                    out = new BufferedOutputStream( new FileOutputStream( pageFile ) );\n                    FileUtil.copyContents( in, out );\n                    //\n                    // We need also to set the date, since we rely on this.\n                    //\n                    pageFile.setLastModified( oldFile.lastModified() );\n                    //\n                    // Kludge to make the property code to work properly.\n                    //\n                    versionNumber++;\n                }\n                finally\n                {\n                \tIOUtils.closeQuietly( out );\n                \tIOUtils.closeQuietly( in );\n                }\n            }\n            //\n            //  Let superclass handler writing data to a new version.\n            //\n            super.putPageText( page, text );\n            //\n            //  Finally, write page version data.\n            //\n            // FIXME: No rollback available.\n            Properties props = getPageProperties( page.getName() );\n            String authorFirst = null;\n            // if the following file exists, we are NOT migrating from FileSystemProvider\n            File pagePropFile = new File(getPageDirectory() + File.separator + PAGEDIR + File.separator + mangleName(page.getName()) + File.separator + \"page\" + FileSystemProvider.PROP_EXT);\n            if ( firstUpdate && ! pagePropFile.exists())\n            {\n                // we might not yet have a versioned author because the\n                // old page was last maintained by FileSystemProvider\n                Properties props2 = getHeritagePageProperties( page.getName() );\n                // remember the simulated original author (or something)\n                // in the new properties\n                authorFirst = props2.getProperty( \"1.author\", \"unknown\" );\n                props.setProperty( \"1.author\", authorFirst );\n            }\n            String newAuthor = page.getAuthor();\n            if ( newAuthor == null )\n            {\n                newAuthor = ( authorFirst != null ) ? authorFirst : \"unknown\";\n            }\n            page.setAuthor(newAuthor);\n            props.setProperty( versionNumber + \".author\", newAuthor );\n            String changeNote = (String) page.getAttribute(WikiPage.CHANGENOTE);\n            if( changeNote != null )\n            {\n                props.setProperty( versionNumber+\".changenote\", changeNote );\n            }\n            // Get additional custom properties from page and add to props\n            getCustomProperties(page, props);\n            putPageProperties( page.getName(), props );\n        }\n        catch( IOException e )\n        {\n            log.error( \"Saving failed\", e );\n            throw new ProviderException(\"Could not save page text: \"+e.getMessage());\n        }\n    }\n    /**\n     *  {@inheritDoc}\n     */\n<fim_suffix>    @Override\n    public WikiPage getPageInfo( String page, int version )\n        throws ProviderException\n    {\n        int latest = findLatestVersion(page);\n        int realVersion;\n        WikiPage p = null;\n        if( version == WikiPageProvider.LATEST_VERSION ||\n            version == latest ||\n            (version == 1 && latest == -1) )\n        {\n            //\n            // Yes, we need to talk to the top level directory\n            // to get this version.\n            //\n            // I am listening to Press Play On Tape's guitar version of\n            // the good old C64 \"Wizardry\" -tune at this moment.\n            // Oh, the memories...\n            //\n            realVersion = (latest >= 0) ? latest : 1;\n            p = super.getPageInfo( page, WikiPageProvider.LATEST_VERSION );\n            if( p != null )\n            {\n                p.setVersion( realVersion );\n            }\n        }\n        else\n        {\n            //\n            //  The file is not the most recent, so we'll need to\n            //  find it from the deep trenches of the \"OLD\" directory\n            //  structure.\n            //\n            realVersion = version;\n            File dir = findOldPageDir( page );\n            if( !dir.exists() || !dir.isDirectory() )\n            {\n                return null;\n            }\n            File file = new File( dir, version+FILE_EXT );\n            if( file.exists() )\n            {\n                p = new WikiPage( m_engine, page );\n                p.setLastModified( new Date(file.lastModified()) );\n                p.setVersion( version );\n            }\n        }\n        //\n        //  Get author and other metadata information\n        //  (Modification date has already been set.)\n        //\n        if( p != null )\n        {\n            try\n            {\n                Properties props = getPageProperties( page );\n                String author = props.getProperty( realVersion+\".author\" );\n                if ( author == null )\n                {\n                    // we might not have a versioned author because the\n                    // old page was last maintained by FileSystemProvider\n                    Properties props2 = getHeritagePageProperties( page );\n                    author = props2.getProperty( WikiPage.AUTHOR );\n                }\n                if ( author != null )\n                {\n                    p.setAuthor( author );\n                }\n                String changenote = props.getProperty( realVersion+\".changenote\" );\n                if( changenote != null ) p.setAttribute( WikiPage.CHANGENOTE, changenote );\n                // Set the props values to the page attributes\n                setCustomProperties(p, props);\n            }\n            catch( IOException e )\n            {\n                log.error( \"Cannot get author for page\"+page+\": \", e );\n            }\n        }\n        return p;\n    }<fim_middle>// function below is long method and feature envy\n"}