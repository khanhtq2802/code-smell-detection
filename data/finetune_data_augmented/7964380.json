{"text": "<fim_prefix>                input.consume();\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null,input);\n                recover(mse);\n                throw mse;}\n            // InternalXImportSectionTestLang.g:6433:44: ( 'a' .. 'z' | 'A' .. 'Z' | '$' | '_' | '0' .. '9' )*\n            loop10:\n            do {\n                int alt10=2;\n                int LA10_0 = input.LA(1);\n                if ( (LA10_0=='$'||(LA10_0>='0' && LA10_0<='9')||(LA10_0>='A' && LA10_0<='Z')||LA10_0=='_'||(LA10_0>='a' && LA10_0<='z')) ) {\n                    alt10=1;\n                }\n                switch (alt10) {\n            \tcase 1 :\n            \t    // InternalXImportSectionTestLang.g:\n            \t    {\n            \t    if ( input.LA(1)=='$'||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {\n            \t        input.consume();\n            \t    }\n            \t    else {\n            \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n            \t        recover(mse);\n            \t        throw mse;}\n            \t    }\n            \t    break;\n            \tdefault :\n            \t    break loop10;\n                }\n            } while (true);\n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"RULE_ID\"\n    // $ANTLR start \"RULE_STRING\"\n<fim_suffix>    public final void mRULE_STRING() throws RecognitionException {\n        try {\n            int _type = RULE_STRING;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalXImportSectionTestLang.g:6435:13: ( ( '\\\"' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\"' ) ) )* ( '\\\"' )? | '\\\\'' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\\'' ) ) )* ( '\\\\'' )? ) )\n            // InternalXImportSectionTestLang.g:6435:15: ( '\\\"' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\"' ) ) )* ( '\\\"' )? | '\\\\'' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\\'' ) ) )* ( '\\\\'' )? )\n            {\n            // InternalXImportSectionTestLang.g:6435:15: ( '\\\"' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\"' ) ) )* ( '\\\"' )? | '\\\\'' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\\'' ) ) )* ( '\\\\'' )? )\n            int alt15=2;\n            int LA15_0 = input.LA(1);\n            if ( (LA15_0=='\\\"') ) {\n                alt15=1;\n            }\n            else if ( (LA15_0=='\\'') ) {\n                alt15=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 15, 0, input);\n                throw nvae;\n            }\n            switch (alt15) {\n                case 1 :\n                    // InternalXImportSectionTestLang.g:6435:16: '\\\"' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\"' ) ) )* ( '\\\"' )?\n                    {\n                    match('\\\"'); \n                    // InternalXImportSectionTestLang.g:6435:20: ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\"' ) ) )*\n                    loop11:\n                    do {\n                        int alt11=3;\n                        int LA11_0 = input.LA(1);\n                        if ( (LA11_0=='\\\\') ) {\n                            alt11=1;\n                        }\n                        else if ( ((LA11_0>='\\u0000' && LA11_0<='!')||(LA11_0>='#' && LA11_0<='[')||(LA11_0>=']' && LA11_0<='\\uFFFF')) ) {\n                            alt11=2;\n                        }\n                        switch (alt11) {\n                    \tcase 1 :\n                    \t    // InternalXImportSectionTestLang.g:6435:21: '\\\\\\\\' .\n                    \t    {\n                    \t    match('\\\\'); \n                    \t    matchAny(); \n                    \t    }\n                    \t    break;\n                    \tcase 2 :\n                    \t    // InternalXImportSectionTestLang.g:6435:28: ~ ( ( '\\\\\\\\' | '\\\"' ) )\n                    \t    {\n                    \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\\uFFFF') ) {\n                    \t        input.consume();\n                    \t    }\n                    \t    else {\n                    \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n                    \t        recover(mse);\n                    \t        throw mse;}\n                    \t    }\n                    \t    break;\n                    \tdefault :\n                    \t    break loop11;\n                        }\n                    } while (true);\n                    // InternalXImportSectionTestLang.g:6435:44: ( '\\\"' )?\n                    int alt12=2;\n                    int LA12_0 = input.LA(1);\n                    if ( (LA12_0=='\\\"') ) {\n                        alt12=1;\n                    }\n                    switch (alt12) {\n                        case 1 :\n                            // InternalXImportSectionTestLang.g:6435:44: '\\\"'\n                            {\n                            match('\\\"'); \n                            }\n                            break;\n                    }\n                    }\n                    break;\n                case 2 :\n                    // InternalXImportSectionTestLang.g:6435:49: '\\\\'' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\\'' ) ) )* ( '\\\\'' )?\n                    {\n                    match('\\''); \n                    // InternalXImportSectionTestLang.g:6435:54: ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\\'' ) ) )*\n                    loop13:\n                    do {\n                        int alt13=3;\n                        int LA13_0 = input.LA(1);\n                        if ( (LA13_0=='\\\\') ) {\n                            alt13=1;\n                        }\n                        else if ( ((LA13_0>='\\u0000' && LA13_0<='&')||(LA13_0>='(' && LA13_0<='[')||(LA13_0>=']' && LA13_0<='\\uFFFF')) ) {\n                            alt13=2;\n                        }\n                        switch (alt13) {\n                    \tcase 1 :\n                    \t    // InternalXImportSectionTestLang.g:6435:55: '\\\\\\\\' .\n                    \t    {\n                    \t    match('\\\\'); \n                    \t    matchAny(); \n                    \t    }\n                    \t    break;\n                    \tcase 2 :\n                    \t    // InternalXImportSectionTestLang.g:6435:62: ~ ( ( '\\\\\\\\' | '\\\\'' ) )\n                    \t    {\n                    \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\\uFFFF') ) {\n                    \t        input.consume();\n                    \t    }\n                    \t    else {\n                    \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n                    \t        recover(mse);\n                    \t        throw mse;}\n                    \t    }\n                    \t    break;\n                    \tdefault :\n                    \t    break loop13;\n                        }\n                    } while (true);\n                    // InternalXImportSectionTestLang.g:6435:79: ( '\\\\'' )?\n                    int alt14=2;\n                    int LA14_0 = input.LA(1);\n                    if ( (LA14_0=='\\'') ) {\n                        alt14=1;\n                    }\n                    switch (alt14) {\n                        case 1 :\n                            // InternalXImportSectionTestLang.g:6435:79: '\\\\''\n                            {\n                            match('\\''); \n                            }\n                            break;\n                    }\n                    }\n                    break;\n            }\n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }<fim_middle>// function below is long method\n"}