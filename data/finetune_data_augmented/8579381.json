{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.hbase.ipc;\n\nimport org.apache.yetus.audience.InterfaceAudience;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\n\n@InterfaceAudience.Private\npublic class CallQueueInfo {\n  private final Map<String, Map<String, Long>> callQueueMethodCountsSummary;\n  private final Map<String, Map<String, Long>> callQueueMethodSizeSummary;\n\n  CallQueueInfo() {\n    callQueueMethodCountsSummary = new HashMap<>();\n    callQueueMethodSizeSummary = new HashMap<>();\n  }\n\n  public Set<String> getCallQueueNames() {\n    return callQueueMethodCountsSummary.keySet();\n  }\n\n  public Set<String> getCalledMethodNames(String callQueueName) {\n    return callQueueMethodCountsSummary.get(callQueueName).keySet();\n  }\n\n<fim_suffix>  public long getCallMethodCount(String callQueueName, String methodName) {\n    long methodCount;\n\n    Map<String, Long> methodCountMap = callQueueMethodCountsSummary.getOrDefault(callQueueName, null);\n\n    if (null != methodCountMap) {\n      methodCount = methodCountMap.getOrDefault(methodName, 0L);\n    } else {\n      methodCount = 0L;\n    }\n\n    return methodCount;\n  }\n\n  void setCallMethodCount(String callQueueName, Map<String, Long> methodCountMap) {\n    callQueueMethodCountsSummary.put(callQueueName, methodCountMap);\n  }\n\n  public long getCallMethodSize(String callQueueName, String methodName) {\n    long methodSize;\n\n    Map<String, Long> methodSizeMap = callQueueMethodSizeSummary.getOrDefault(callQueueName, null);\n\n    if (null != methodSizeMap) {\n      methodSize = methodSizeMap.getOrDefault(methodName, 0L);\n    } else {\n      methodSize = 0L;\n    }\n\n    return methodSize;\n  }\n\n  void setCallMethodSize(String callQueueName, Map<String, Long> methodSizeMap) {\n    callQueueMethodSizeSummary.put(callQueueName, methodSizeMap);\n  }\n\n}<fim_middle>// function below has no smell\n"}