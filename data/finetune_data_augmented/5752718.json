{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\npackage org.apache.storm.streams;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.storm.shade.com.google.common.collect.Multimap;\nimport org.apache.storm.shade.org.jgrapht.DirectedGraph;\nimport org.apache.storm.streams.windowing.SlidingWindows;\nimport org.apache.storm.streams.windowing.TumblingWindows;\nimport org.apache.storm.streams.windowing.Window;\nimport org.apache.storm.task.OutputCollector;\nimport org.apache.storm.task.TopologyContext;\nimport org.apache.storm.topology.OutputFieldsDeclarer;\nimport org.apache.storm.topology.base.BaseWindowedBolt;\nimport org.apache.storm.tuple.Tuple;\nimport org.apache.storm.windowing.TupleWindow;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport static org.apache.storm.streams.WindowNode.PUNCTUATION;\n\n/**\n * Stream bolt that executes windowing operations.\n */\n<fim_suffix>class WindowedProcessorBolt extends BaseWindowedBolt implements StreamBolt {\n    private static final Logger LOG = LoggerFactory.getLogger(WindowedProcessorBolt.class);\n    private final ProcessorBoltDelegate delegate;\n    private final Window<?, ?> window;\n\n    WindowedProcessorBolt(String id, DirectedGraph<Node, Edge> graph,\n                          List<ProcessorNode> nodes,\n                          Window<?, ?> window) {\n        delegate = new ProcessorBoltDelegate(id, graph, nodes);\n        this.window = window;\n        setWindowConfig();\n    }\n\n    @Override\n    public void prepare(Map<String, Object> topoConf, TopologyContext context, OutputCollector collector) {\n        delegate.prepare(topoConf, context, collector);\n    }\n\n    @Override\n    public void execute(TupleWindow inputWindow) {\n        LOG.trace(\"Window triggered at {}, inputWindow {}\", new Date(), inputWindow);\n        if (delegate.isEventTimestamp()) {\n            delegate.setEventTimestamp(inputWindow.getEndTimestamp());\n        }\n        for (Tuple tuple : inputWindow.get()) {\n            Pair<Object, String> valueAndStream = delegate.getValueAndStream(tuple);\n            if (!StreamUtil.isPunctuation(valueAndStream.getFirst())) {\n                delegate.process(valueAndStream.getFirst(), valueAndStream.getSecond());\n            }\n        }\n        for (String stream : delegate.getInitialStreams()) {\n            delegate.process(PUNCTUATION, stream);\n        }\n    }\n\n    @Override\n    public void declareOutputFields(OutputFieldsDeclarer declarer) {\n        delegate.declareOutputFields(declarer);\n    }\n\n    @Override\n    public void setTimestampField(String fieldName) {\n        delegate.setTimestampField(fieldName);\n    }\n\n    @Override\n    public String getId() {\n        return delegate.getId();\n    }\n\n    private void setWindowConfig() {\n        if (window instanceof SlidingWindows) {\n            setSlidingWindowParams(window.getWindowLength(), window.getSlidingInterval());\n        } else if (window instanceof TumblingWindows) {\n            setTumblingWindowParams(window.getWindowLength());\n        }\n        if (window.getTimestampField() != null) {\n            withTimestampField(window.getTimestampField());\n        }\n        if (window.getLag() != null) {\n            withLag(window.getLag());\n        }\n        if (window.getLateTupleStream() != null) {\n            withLateTupleStream(window.getLateTupleStream());\n        }\n    }\n\n    private void setSlidingWindowParams(Object windowLength, Object slidingInterval) {\n        if (windowLength instanceof Count) {\n            if (slidingInterval instanceof Count) {\n                withWindow((Count) windowLength, (Count) slidingInterval);\n            } else if (slidingInterval instanceof Duration) {\n                withWindow((Count) windowLength, (Duration) slidingInterval);\n            }\n        } else if (windowLength instanceof Duration) {\n            if (slidingInterval instanceof Count) {\n                withWindow((Duration) windowLength, (Count) slidingInterval);\n            } else if (slidingInterval instanceof Duration) {\n                withWindow((Duration) windowLength, (Duration) slidingInterval);\n            }\n        }\n    }\n\n    private void setTumblingWindowParams(Object windowLength) {\n        if (windowLength instanceof Count) {\n            withTumblingWindow((Count) windowLength);\n        } else if (windowLength instanceof Duration) {\n            withTumblingWindow((Duration) windowLength);\n        }\n    }\n\n    void setStreamToInitialProcessors(Multimap<String, ProcessorNode> streamToInitialProcessors) {\n        delegate.setStreamToInitialProcessors(streamToInitialProcessors);\n    }\n}<fim_middle>// class below has no smell\n"}