{"text": "<fim_prefix>\n<fim_suffix>public interface Cell {\n    /**\n     * Returns column index of this cell\n     *\n     * @return zero-based column index of a column in a sheet.\n     */\n    int getColumnIndex();\n    /**\n     * Returns row index of a row in the sheet that contains this cell\n     *\n     * @return zero-based row index of a row in the sheet that contains this cell\n     */\n    int getRowIndex();\n    /**\n     * Returns the sheet this cell belongs to\n     *\n     * @return the sheet this cell belongs to\n     */\n    Sheet getSheet();\n    /**\n     * Returns the Row this cell belongs to\n     *\n     * @return the Row that owns this cell\n     */\n     Row getRow();\n    /**\n     * Set the cells type (blank, numeric, boolean, error or string).\n     * <p>If the cell currently contains a value, the value will\n     *  be converted to match the new type, if possible. Formatting\n     *  is generally lost in the process however.</p>\n     * <p>Conversion rules:</p>\n     * <p>to NUMERIC: numeric value is left as is. True converts to 1.0, false converts to 0. otherwise, the\n     * value is set to 0. Formula is removed.</p>\n     * <p>If what you want to do is get a String value for your\n     *  numeric cell, <i>stop!</i> This is not the way to do it.\n     *  Instead, for fetching the string value of a numeric or boolean\n     *  or date cell, use {@link DataFormatter} instead.</p>\n     * <p>If cell is a member of an array formula group containing more than 1 cell, an {@link IllegalStateException}\n     * is thrown. If the array formula group contains only this cell, it is removed.</p>\n     * <p>Passing {@link CellType#FORMULA} is illegal and will result in an {@link IllegalArgumentException}.</p>\n     *\n     * @deprecated This method is deprecated and will be removed in POI 5.0.\n     * Use explicit {@link #setCellFormula(String)}, <code>setCellValue(...)</code> or {@link #setBlank()}\n     * to get the desired result.\n     * @throws IllegalArgumentException if the specified cell type is invalid (null, _NONE or FORMULA)\n     * @throws IllegalStateException if the current value cannot be converted to the new type or\n     * if the cell is a part of an array formula group containing other cells\n     */\n    @Deprecated\n    @Removal(version = \"5.0\")\n    void setCellType(CellType cellType);\n    /**\n     * Removes formula and value from the cell, and sets its type to {@link CellType#BLANK}.\n     * Preserves comments and hyperlinks.\n     * While {@link #setCellType(CellType)} exists, is an alias for {@code setCellType(CellType.BLANK)}.\n     */\n    void setBlank();\n    /**\n     * Return the cell type.\n     *\n     * @return the cell type\n     */\n    CellType getCellType();\n    /**\n     * Return the cell type.  Tables in an array formula return\n     * {@link CellType#FORMULA} for all cells, even though the formula is only defined\n     * in the OOXML file for the top left cell of the array.\n     * <p>\n     * NOTE: POI does not support data table formulas.\n     * Cells in a data table appear to POI as plain cells typed from their cached value.\n     *\n     * @return the cell type\n     * @since POI 3.15 beta 3\n     * @deprecated will be removed in 4.2\n     * Will be renamed to <code>getCellType()</code> when we make the CellType enum transition in POI 4.0. See bug 59791.\n     */\n    @Deprecated\n    @Removal(version=\"4.2\")\n    CellType getCellTypeEnum();\n    /**\n     * Only valid for formula cells\n     *\n     * Will return {@link CellType} in a future version of POI.\n     * For forwards compatibility, do not hard-code cell type literals in your code.\n     *\n     * @return one of ({@link CellType#NUMERIC}, {@link CellType#STRING},\n     *     {@link CellType#BOOLEAN}, {@link CellType#ERROR}) depending\n     * on the cached value of the formula\n     */\n    CellType getCachedFormulaResultType();\n    /**\n     * Only valid for formula cells\n     * @return one of ({@link CellType#NUMERIC}, {@link CellType#STRING},\n     *     {@link CellType#BOOLEAN}, {@link CellType#ERROR}) depending\n     * on the cached value of the formula\n     * @since POI 3.15 beta 3\n     * @deprecated will be removed in 4.2\n     * Will be renamed to <code>getCachedFormulaResultType()</code> when we make the CellType enum transition in POI 4.0. See bug 59791.\n     */\n    @Deprecated\n    @Removal(version = \"4.2\")\n    CellType getCachedFormulaResultTypeEnum();\n    /**\n     * Set a numeric value for the cell.\n     *\n     * @param value the numeric value to set this cell to.  For formulas we'll set the\n     *        precalculated value, for numerics we'll set its value. For other types we\n     *        will change the cell to a numeric cell and set its value.\n     */\n    void setCellValue(double value);\n    /**\n     * <p>Converts the supplied date to its equivalent Excel numeric value and sets\n     * that into the cell.</p>\n     *\n     * <p><b>Note</b> - There is actually no 'DATE' cell type in Excel. In many\n     * cases (when entering date values), Excel automatically adjusts the\n     * <i>cell style</i> to some date format, creating the illusion that the cell\n     * data type is now something besides {@link CellType#NUMERIC}.  POI\n     * does not attempt to replicate this behaviour.  To make a numeric cell\n     * display as a date, use {@link #setCellStyle(CellStyle)} etc.</p>\n     *\n     * @param value the numeric value to set this cell to.  For formulas we'll set the\n     *        precalculated value, for numerics we'll set its value. For other types we\n     *        will change the cell to a numerics cell and set its value.\n     */\n    void setCellValue(Date value);\n    /**\n     * <p>Set a date value for the cell. Excel treats dates as numeric so you will need to format the cell as\n     * a date.</p>\n     * <p>\n     * This will set the cell value based on the Calendar's timezone. As Excel\n     * does not support timezones this means that both 20:00+03:00 and\n     * 20:00-03:00 will be reported as the same value (20:00) even that there\n     * are 6 hours difference between the two times. This difference can be\n     * preserved by using <code>setCellValue(value.getTime())</code> which will\n     * automatically shift the times to the default timezone.\n     * </p>\n     *\n     * @param value  the date value to set this cell to.  For formulas we'll set the\n     *        precalculated value, for numerics we'll set its value. For othertypes we\n     *        will change the cell to a numeric cell and set its value.\n     */\n    void setCellValue(Calendar value);\n    /**\n     * Set a rich string value for the cell.\n     *\n     * @param value  value to set the cell to.  For formulas we'll set the formula\n     * string, for String cells we'll set its value.  For other types we will\n     * change the cell to a string cell and set its value.\n     * If value is null then we will change the cell to a Blank cell.\n     */\n    void setCellValue(RichTextString value);\n    /**\n     * Set a string value for the cell.\n     *\n     * @param value  value to set the cell to.  For formulas we'll set the formula\n     * string, for String cells we'll set its value.  For other types we will\n     * change the cell to a string cell and set its value.\n     * If value is null then we will change the cell to a Blank cell.\n     */\n    void setCellValue(String value);\n    /**\n     * Sets formula for this cell.\n     * <p>If {@code formula} is not null, sets or updates the formula. If {@code formula} is null, removes the formula.\n     * Or use {@link #removeFormula()} to remove the formula.</p>\n     *\n     * <p>Note, this method only sets the formula string and does not calculate the formula value.\n     * To set the precalculated value use {@link #setCellValue}.</p>\n     *\n     * <p>If the cell was blank, sets value to 0. Otherwise, preserves the value as precalculated.</p>\n     *\n     * @param formula the formula to set, e.g. <code>\"SUM(C4:E4)\"</code>.<fim_middle>// class below has no smell\n"}