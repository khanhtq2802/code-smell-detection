{"text": "<fim_prefix>/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.integration.handler.advice;\n\nimport org.springframework.integration.support.ErrorMessageUtils;\nimport org.springframework.messaging.Message;\nimport org.springframework.messaging.MessagingException;\nimport org.springframework.retry.RecoveryCallback;\nimport org.springframework.retry.RetryCallback;\nimport org.springframework.retry.RetryContext;\nimport org.springframework.retry.RetryListener;\nimport org.springframework.retry.RetryState;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.springframework.util.Assert;\n\n/**\n * Uses spring-retry to perform stateless or stateful retry.\n * Stateless retry means the retries are performed internally\n * by the {@link RetryTemplate}; stateful retry means the\n * exception is thrown but state is maintained to support\n * the retry policies. Stateful retry requires a\n * {@link RetryStateGenerator}.\n *\n * @author Gary Russell\n * @author Artem Bilan\n * @since 2.2\n */\n<fim_suffix>public class RequestHandlerRetryAdvice extends AbstractRequestHandlerAdvice\n\t\timplements RetryListener {\n\n\tprivate RetryTemplate retryTemplate = new RetryTemplate();\n\n\tprivate RecoveryCallback<Object> recoveryCallback;\n\n\tprivate static final ThreadLocal<Message<?>> messageHolder = new ThreadLocal<Message<?>>();\n\n\t// Stateless unless a state generator is provided\n\tprivate volatile RetryStateGenerator retryStateGenerator = message -> null;\n\n\t/**\n\t * Set the retry template. Cause traversal should be enabled in the retry policy\n\t * because user exceptions may be wrapped in a {@link MessagingException}.\n\t * @param retryTemplate the retry template.\n\t */\n\tpublic void setRetryTemplate(RetryTemplate retryTemplate) {\n\t\tAssert.notNull(retryTemplate, \"'retryTemplate' cannot be null\");\n\t\tthis.retryTemplate = retryTemplate;\n\t}\n\n\tpublic void setRecoveryCallback(RecoveryCallback<Object> recoveryCallback) {\n\t\tthis.recoveryCallback = recoveryCallback;\n\t}\n\n\tpublic void setRetryStateGenerator(RetryStateGenerator retryStateGenerator) {\n\t\tAssert.notNull(retryStateGenerator, \"'retryStateGenerator' cannot be null\");\n\t\tthis.retryStateGenerator = retryStateGenerator;\n\t}\n\n\t@Override\n\tprotected void onInit() {\n\t\tsuper.onInit();\n\t\tthis.retryTemplate.registerListener(this);\n\t}\n\n\t@Override\n\tprotected Object doInvoke(final ExecutionCallback callback, Object target, final Message<?> message) {\n\t\tRetryState retryState = null;\n\t\tretryState = this.retryStateGenerator.determineRetryState(message);\n\t\tmessageHolder.set(message);\n\n\t\ttry {\n\t\t\treturn this.retryTemplate.execute(context -> callback.cloneAndExecute(), this.recoveryCallback, retryState);\n\t\t}\n\t\tcatch (MessagingException e) {\n\t\t\tif (e.getFailedMessage() == null) {\n\t\t\t\tthrow new MessagingException(message, \"Failed to invoke handler\", e);\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t\tcatch (ThrowableHolderException e) { // NOSONAR catch and rethrow\n\t\t\tthrow e;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new ThrowableHolderException(e);\n\t\t}\n\t\tfinally {\n\t\t\tmessageHolder.remove();\n\t\t}\n\t}\n\n\t@Override\n\tpublic <T, E extends Throwable> boolean open(RetryContext context, RetryCallback<T, E> callback) {\n\t\tcontext.setAttribute(ErrorMessageUtils.FAILED_MESSAGE_CONTEXT_KEY, messageHolder.get());\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic <T, E extends Throwable> void close(RetryContext context, RetryCallback<T, E> callback,\n\t\t\tThrowable throwable) {\n\t}\n\n\t@Override\n\tpublic <T, E extends Throwable> void onError(RetryContext context, RetryCallback<T, E> callback,\n\t\t\tThrowable throwable) {\n\t}\n\n}<fim_middle>// class below has no smell\n"}