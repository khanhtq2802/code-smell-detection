{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jclouds.atmos.util;\nimport static com.google.common.base.Preconditions.checkState;\nimport static org.jclouds.util.Predicates2.retry;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.net.URI;\n\nimport javax.inject.Inject;\nimport javax.inject.Provider;\n\nimport org.jclouds.atmos.AtmosClient;\nimport org.jclouds.atmos.blobstore.functions.BlobToObject;\nimport org.jclouds.atmos.domain.AtmosError;\nimport org.jclouds.atmos.domain.AtmosObject;\nimport org.jclouds.atmos.filters.SignRequest;\nimport org.jclouds.atmos.options.PutOptions;\nimport org.jclouds.atmos.reference.AtmosErrorCode;\nimport org.jclouds.atmos.xml.ErrorHandler;\nimport org.jclouds.blobstore.ContainerNotFoundException;\nimport org.jclouds.blobstore.KeyAlreadyExistsException;\nimport org.jclouds.blobstore.domain.Blob;\nimport org.jclouds.crypto.Crypto;\nimport org.jclouds.http.HttpCommand;\nimport org.jclouds.http.HttpException;\nimport org.jclouds.http.HttpResponse;\nimport org.jclouds.http.functions.ParseSax;\n\nimport com.google.common.base.Predicate;\n\n/**\n * Encryption, Hashing, and IO Utilities needed to sign and verify Atmos Storage requests and\n * responses.\n */\n<fim_suffix>public class AtmosUtils {\n\n   @Inject\n   SignRequest signer;\n\n   @Inject\n   ParseSax.Factory factory;\n\n   @Inject\n   Provider<ErrorHandler> errorHandlerProvider;\n\n   public AtmosError parseAtmosErrorFromContent(HttpCommand command, HttpResponse response, InputStream content)\n            throws HttpException {\n      AtmosError error = factory.create(errorHandlerProvider.get()).parse(content);\n      if (error.getCode() == AtmosErrorCode.SIGNATURE_MISMATCH.getCode()) {\n         error.setStringSigned(signer.createStringToSign(command.getCurrentRequest()));\n      }\n      return error;\n\n   }\n\n   public static String putBlob(final AtmosClient sync, Crypto crypto, BlobToObject blob2Object, String container,\n            Blob blob, PutOptions options) {\n      final String path = container + \"/\" + blob.getMetadata().getName();\n      final AtmosObject object = blob2Object.apply(blob);\n\n      URI uri;\n      try {\n         uri = sync.createFile(container, object, options);\n      } catch (KeyAlreadyExistsException e) {\n         deletePathAndEnsureGone(sync, path);\n         uri = sync.createFile(container, object, options);\n      }\n\n      // return object ID as the ETag\n      String objectId = uri.getPath();\n      String prefix = \"/rest/objects/\";\n      checkState(objectId.startsWith(prefix), objectId);\n      return objectId.substring(prefix.length());\n   }\n   \n   public static void deletePathAndEnsureGone(final AtmosClient sync, String path) {\n      checkState(retry(new Predicate<String>() {\n         public boolean apply(String in) {\n            try {\n               sync.deletePath(in);\n               return !sync.pathExists(in);\n            } catch (ContainerNotFoundException e) {\n               return true;\n            }\n         }\n      }, 3000).apply(path), \"%s still exists after deleting!\", path);\n   }\n\n   public AtmosError parseAtmosErrorFromContent(HttpCommand command, HttpResponse response, String content)\n            throws HttpException {\n      return parseAtmosErrorFromContent(command, response, new ByteArrayInputStream(content.getBytes()));\n   }\n\n   public static String adjustContainerIfDirOptionPresent(String container,\n            org.jclouds.blobstore.options.ListContainerOptions options) {\n      if (options != org.jclouds.blobstore.options.ListContainerOptions.NONE) {\n         // if (options.isRecursive()) {\n         // throw new UnsupportedOperationException(\"recursive not currently supported in emcsaas\");\n         // }\n         if (options.getDir() != null) {\n            container = container + \"/\" + options.getDir();\n         }\n      }\n      return container;\n   }\n}<fim_middle>// class below has no smell\n"}