{"text": "<fim_prefix>/* \n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed  under the  License is distributed on an \"AS IS\" BASIS,\n * WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or\n * implied.\n * \n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cocoon.xsp.handler;\n\nimport org.apache.cocoon.core.container.spring.avalon.ComponentInfo;\n\n/**\n * The ThreadSafeComponentHandler to make sure components are initialized\n * and destroyed correctly.\n *\n * @since 2.2\n * @version $Id$\n */\npublic class ThreadSafeComponentHandler extends AbstractFactoryHandler {\n    \n    private Object instance;\n\n    /**\n     * Create a ThreadSafeComponentHandler which manages a single instance\n     * of an object return by the component factory.\n     *\n     * @param factory The factory object which is responsible for creating the components\n     *                managed by the handler.\n     */\n    public ThreadSafeComponentHandler(final ComponentInfo info,\n                                      final ComponentFactory factory) {\n        super(info, factory);\n    }\n\n    public boolean isSingleton() {\n        return true;\n    }\n\n    public void doInitialize() throws Exception {\n        if( this.instance == null ) {\n            this.instance = this.factory.newInstance();\n        }\n    }\n\n    /**\n     * Get a reference of the desired Component\n     */\n    protected Object doGet()\n    throws Exception {\n        return this.instance;\n    }\n\n    /**\n     * Return a reference of the desired Component\n     */\n    protected void doPut( final Object component ) {\n        // nothing to do\n    }\n\n    /**\n     * Dispose of the ComponentHandler and any associated Pools and Factories.\n     */\n<fim_suffix>    public void dispose() {\n        this.decommission( this.instance );\n        this.instance = null;\n\n        super.dispose();\n    }\n}<fim_middle>// function below has no smell\n"}