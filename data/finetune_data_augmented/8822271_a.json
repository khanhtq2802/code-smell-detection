{"text": "<fim_prefix>\n<fim_suffix>  public static class getAllApplicationInterfaceNames_args implements org.apache.thrift.TBase<getAllApplicationInterfaceNames_args, getAllApplicationInterfaceNames_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllApplicationInterfaceNames_args>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"getAllApplicationInterfaceNames_args\");\n    private static final org.apache.thrift.protocol.TField GATEWAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(\"gatewayId\", org.apache.thrift.protocol.TType.STRING, (short)1);\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new getAllApplicationInterfaceNames_argsStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new getAllApplicationInterfaceNames_argsTupleSchemeFactory());\n    }\n    public String gatewayId; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      GATEWAY_ID((short)1, \"gatewayId\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // GATEWAY_ID\n            return GATEWAY_ID;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.GATEWAY_ID, new org.apache.thrift.meta_data.FieldMetaData(\"gatewayId\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllApplicationInterfaceNames_args.class, metaDataMap);\n    }\n    public getAllApplicationInterfaceNames_args() {\n    }\n    public getAllApplicationInterfaceNames_args(\n      String gatewayId)\n    {\n      this();\n      this.gatewayId = gatewayId;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public getAllApplicationInterfaceNames_args(getAllApplicationInterfaceNames_args other) {\n      if (other.isSetGatewayId()) {\n        this.gatewayId = other.gatewayId;\n      }\n    }\n    public getAllApplicationInterfaceNames_args deepCopy() {\n      return new getAllApplicationInterfaceNames_args(this);\n    }\n    @Override\n    public void clear() {\n      this.gatewayId = null;\n    }\n    public String getGatewayId() {\n      return this.gatewayId;\n    }\n    public getAllApplicationInterfaceNames_args setGatewayId(String gatewayId) {\n      this.gatewayId = gatewayId;\n      return this;\n    }\n    public void unsetGatewayId() {\n      this.gatewayId = null;\n    }\n    /** Returns true if field gatewayId is set (has been assigned a value) and false otherwise */\n    public boolean isSetGatewayId() {\n      return this.gatewayId != null;\n    }\n    public void setGatewayIdIsSet(boolean value) {\n      if (!value) {\n        this.gatewayId = null;\n      }\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      case GATEWAY_ID:\n        if (value == null) {\n          unsetGatewayId();\n        } else {\n          setGatewayId((String)value);\n        }\n        break;\n      }\n    }\n    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case GATEWAY_ID:\n        return getGatewayId();\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      case GATEWAY_ID:\n        return isSetGatewayId();\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof getAllApplicationInterfaceNames_args)\n        return this.equals((getAllApplicationInterfaceNames_args)that);\n      return false;\n    }\n    public boolean equals(getAllApplicationInterfaceNames_args that) {\n      if (that == null)\n        return false;\n      boolean this_present_gatewayId = true && this.isSetGatewayId();\n      boolean that_present_gatewayId = true && that.isSetGatewayId();\n      if (this_present_gatewayId || that_present_gatewayId) {\n        if (!(this_present_gatewayId && that_present_gatewayId))\n          return false;\n        if (!this.gatewayId.equals(that.gatewayId))\n          return false;\n      }\n      return true;\n    }\n    @Override\n    public int hashCode() {\n      List<Object> list = new ArrayList<Object>();\n      boolean present_gatewayId = true && (isSetGatewayId());\n      list.add(present_gatewayId);\n      if (present_gatewayId)\n        list.add(gatewayId);\n      return list.hashCode();\n    }\n    @Override\n    public int compareTo(getAllApplicationInterfaceNames_args other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      lastComparison = Boolean.valueOf(isSetGatewayId()).compareTo(other.isSetGatewayId());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetGatewayId()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gatewayId, other.gatewayId);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n    }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"getAllApplicationInterfaceNames_args(\");\n      boolean first = true;\n      sb.append(\"gatewayId:\");\n      if (this.gatewayId == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.gatewayId);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      if (gatewayId == null) {\n        throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'gatewayId' was not present! Struct: \" + toString());\n      }\n      // check for sub-struct validity\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);<fim_middle>// class below is blob and data class\n"}