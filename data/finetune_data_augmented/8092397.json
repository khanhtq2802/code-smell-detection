{"text": "<fim_prefix>/*\n * generated by Xtext\n */\npackage org.eclipse.xtext.valueconverter.serializer;\n\nimport com.google.inject.Inject;\nimport java.util.Set;\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.emf.ecore.EPackage;\nimport org.eclipse.xtext.Action;\nimport org.eclipse.xtext.Parameter;\nimport org.eclipse.xtext.ParserRule;\nimport org.eclipse.xtext.serializer.ISerializationContext;\nimport org.eclipse.xtext.serializer.acceptor.SequenceFeeder;\nimport org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;\nimport org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;\nimport org.eclipse.xtext.valueconverter.bug250313.Bug250313Package;\nimport org.eclipse.xtext.valueconverter.bug250313.Child1;\nimport org.eclipse.xtext.valueconverter.bug250313.Child2;\nimport org.eclipse.xtext.valueconverter.bug250313.Model;\nimport org.eclipse.xtext.valueconverter.services.Bug250313GrammarAccess;\n\n@SuppressWarnings(\"all\")\npublic class Bug250313SemanticSequencer extends AbstractDelegatingSemanticSequencer {\n\n\t@Inject\n\tprivate Bug250313GrammarAccess grammarAccess;\n\t\n<fim_suffix>\t@Override\n\tpublic void sequence(ISerializationContext context, EObject semanticObject) {\n\t\tEPackage epackage = semanticObject.eClass().getEPackage();\n\t\tParserRule rule = context.getParserRule();\n\t\tAction action = context.getAssignedAction();\n\t\tSet<Parameter> parameters = context.getEnabledBooleanParameters();\n\t\tif (epackage == Bug250313Package.eINSTANCE)\n\t\t\tswitch (semanticObject.eClass().getClassifierID()) {\n\t\t\tcase Bug250313Package.CHILD1:\n\t\t\t\tsequence_Child1(context, (Child1) semanticObject); \n\t\t\t\treturn; \n\t\t\tcase Bug250313Package.CHILD2:\n\t\t\t\tsequence_Child2(context, (Child2) semanticObject); \n\t\t\t\treturn; \n\t\t\tcase Bug250313Package.MODEL:\n\t\t\t\tsequence_Model(context, (Model) semanticObject); \n\t\t\t\treturn; \n\t\t\t}\n\t\tif (errorAcceptor != null)\n\t\t\terrorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));\n\t}\n\t\n\t/**\n\t * Contexts:\n\t *     Child returns Child1\n\t *     Child1 returns Child1\n\t *\n\t * Constraint:\n\t *     name=ID\n\t */\n\tprotected void sequence_Child1(ISerializationContext context, Child1 semanticObject) {\n\t\tif (errorAcceptor != null) {\n\t\t\tif (transientValues.isValueTransient(semanticObject, Bug250313Package.Literals.CHILD__NAME) == ValueTransient.YES)\n\t\t\t\terrorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug250313Package.Literals.CHILD__NAME));\n\t\t}\n\t\tSequenceFeeder feeder = createSequencerFeeder(context, semanticObject);\n\t\tfeeder.accept(grammarAccess.getChild1Access().getNameIDTerminalRuleCall_0(), semanticObject.getName());\n\t\tfeeder.finish();\n\t}\n\t\n\t\n\t/**\n\t * Contexts:\n\t *     Child returns Child2\n\t *     Child2 returns Child2\n\t *\n\t * Constraint:\n\t *     name=STRING\n\t */\n\tprotected void sequence_Child2(ISerializationContext context, Child2 semanticObject) {\n\t\tif (errorAcceptor != null) {\n\t\t\tif (transientValues.isValueTransient(semanticObject, Bug250313Package.Literals.CHILD__NAME) == ValueTransient.YES)\n\t\t\t\terrorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Bug250313Package.Literals.CHILD__NAME));\n\t\t}\n\t\tSequenceFeeder feeder = createSequencerFeeder(context, semanticObject);\n\t\tfeeder.accept(grammarAccess.getChild2Access().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());\n\t\tfeeder.finish();\n\t}\n\t\n\t\n\t/**\n\t * Contexts:\n\t *     Model returns Model\n\t *\n\t * Constraint:\n\t *     (\n\t *         value='mykeyword1' | \n\t *         value=STRING | \n\t *         value=NestedDatatype | \n\t *         value=Datatype | \n\t *         value=ID | \n\t *         multiValue+='mykeyword1' | \n\t *         multiValue+=STRING | \n\t *         multiValue+=NestedDatatype | \n\t *         multiValue+=Datatype | \n\t *         multiValue+=ID | \n\t *         value=STRING | \n\t *         multiValue+=STRING | \n\t *         value=Datatype | \n\t *         multiValue+=Datatype | \n\t *         value=NestedDatatype | \n\t *         multiValue+=NestedDatatype | \n\t *         children=Child\n\t *     )\n\t */\n\tprotected void sequence_Model(ISerializationContext context, Model semanticObject) {\n\t\tgenericSequencer.createSequence(context, semanticObject);\n\t}\n\t\n\t\n}<fim_middle>// function below has no smell\n"}