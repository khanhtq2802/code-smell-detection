{"text": "<fim_prefix>/**\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n *\n */\npackage org.apache.kerby.xdr.type;\n\nimport org.apache.kerby.xdr.EnumType;\nimport org.apache.kerby.xdr.XdrDataType;\n\nimport java.math.BigInteger;\nimport java.nio.ByteBuffer;\n\npublic abstract class XdrEnumerated<T extends EnumType> extends XdrSimple<T> {\n    /**\n     * Default constructor, generally for decoding as a container\n     */\n    public XdrEnumerated() {\n        this(null);\n    }\n\n    /**\n     * Constructor with a value, generally for encoding of the value\n     * @param value The Enum value\n     */\n    public XdrEnumerated(T value) {\n        super(XdrDataType.ENUM, value);\n    }\n\n<fim_suffix>    protected void toBytes() {\n        byte[] bytes = ByteBuffer.allocate(4).putInt(getValue().getValue()).array();\n        setBytes(bytes);\n    }\n\n    protected void toValue() {\n        if (getBytes().length != 4) {\n            byte[] intBytes = ByteBuffer.allocate(4).put(getBytes(), 0, 4).array();\n            /**reset bytes in case the enum type is in a struct or union*/\n            setBytes(intBytes);\n        }\n        BigInteger biVal = new BigInteger(getBytes());\n        int iVal = biVal.intValue();\n        EnumType[] allValues = getAllEnumValues();\n        for (EnumType val : allValues) {\n            if (val.getValue() == iVal) {\n                setValue((T) val);\n            }\n        }\n    }\n\n    protected abstract EnumType[] getAllEnumValues();\n}<fim_middle>// function below has no smell\n"}