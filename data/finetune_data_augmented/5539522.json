{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.sentry.tests.e2e.kafka;\n\nimport kafka.server.KafkaServerStartable;\nimport org.apache.sentry.kafka.conf.KafkaAuthConf;\n\nimport org.apache.curator.test.TestingServer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Properties;\n\n<fim_suffix>public class KafkaTestServer {\n    public static final int CACHE_TTL_MS = 1;\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(KafkaTestServer.class);\n\n    private int kafkaPort = -1;\n    private TestingServer zkServer;\n    private KafkaServerStartable kafkaServer = null;\n    private File sentrySitePath = null;\n\n    public KafkaTestServer(File sentrySitePath) throws Exception {\n        this.sentrySitePath = sentrySitePath;\n        createZkServer();\n        this.kafkaPort = TestUtils.getFreePort();\n        createKafkaServer();\n    }\n\n    public void start() throws Exception {\n        kafkaServer.startup();\n        LOGGER.info(\"Started Kafka broker.\");\n    }\n\n    public void shutdown() {\n        if (kafkaServer != null) {\n            kafkaServer.shutdown();\n            kafkaServer.awaitShutdown();\n            LOGGER.info(\"Stopped Kafka server.\");\n        }\n\n        if (zkServer != null) {\n            try {\n                zkServer.stop();\n                LOGGER.info(\"Stopped ZK server.\");\n            } catch (IOException e) {\n                LOGGER.error(\"Failed to shutdown ZK server.\", e);\n            }\n        }\n    }\n\n    private Path getTempDirectory() {\n        Path tempDirectory = null;\n        try {\n            tempDirectory = Files.createTempDirectory(\"kafka-sentry-\");\n        } catch (IOException e) {\n            LOGGER.error(\"Failed to create temp dir for Kafka's log dir.\");\n            throw new RuntimeException(e);\n        }\n        return tempDirectory;\n    }\n\n    private void setupKafkaProps(Properties props) throws UnknownHostException {\n        props.put(\"listeners\", \"SSL://\" + InetAddress.getLocalHost().getHostAddress() + \":\" + kafkaPort);\n        props.put(\"log.dir\", getTempDirectory().toAbsolutePath().toString());\n        props.put(\"zookeeper.connect\", zkServer.getConnectString());\n        props.put(\"replica.socket.timeout.ms\", \"1500\");\n        props.put(\"controller.socket.timeout.ms\", \"1500\");\n        props.put(\"controlled.shutdown.enable\", true);\n        props.put(\"delete.topic.enable\", false);\n        props.put(\"controlled.shutdown.retry.backoff.ms\", \"100\");\n        props.put(\"port\", kafkaPort);\n        props.put(\"offsets.topic.replication.factor\", \"1\");\n        props.put(\"authorizer.class.name\", \"org.apache.sentry.kafka.authorizer.SentryKafkaAuthorizer\");\n        props.put(\"sentry.kafka.site.url\", \"file://\" + sentrySitePath.getAbsolutePath());\n        props.put(\"allow.everyone.if.no.acl.found\", \"true\");\n        props.put(\"ssl.keystore.location\", KafkaTestServer.class.getResource(\"/test.keystore.jks\").getPath());\n        props.put(\"ssl.keystore.password\", \"test-ks-passwd\");\n        props.put(\"ssl.key.password\", \"test-key-passwd\");\n        props.put(\"ssl.truststore.location\", KafkaTestServer.class.getResource(\"/test.truststore.jks\").getPath());\n        props.put(\"ssl.truststore.password\", \"test-ts-passwd\");\n        props.put(\"security.inter.broker.protocol\", \"SSL\");\n        props.put(\"ssl.client.auth\", \"required\");\n        props.put(KafkaAuthConf.KAFKA_SUPER_USERS, \"User:CN=superuser;User:CN=superuser1; User:CN=Superuser2 \");\n        props.put(KafkaAuthConf.SENTRY_KAFKA_CACHING_ENABLE_NAME, \"true\");\n        props.put(KafkaAuthConf.SENTRY_KAFKA_CACHING_TTL_MS_NAME, String.valueOf(CACHE_TTL_MS));\n    }\n\n    private void createKafkaServer() throws UnknownHostException {\n        Properties props = new Properties();\n        setupKafkaProps(props);\n        kafkaServer = KafkaServerStartable.fromProps(props);\n    }\n\n    private void createZkServer() throws Exception {\n        try {\n            zkServer = new TestingServer();\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to create testing zookeeper server.\");\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String getBootstrapServers() throws UnknownHostException {\n        return InetAddress.getLocalHost().getHostAddress() + \":\" + kafkaPort;\n    }\n}<fim_middle>// class below is blob\n"}