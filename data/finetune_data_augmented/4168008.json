{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.clerezza.ontologiesplugin;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.net.MalformedURLException;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.clerezza.rdf.schemagen.SchemaGen;\nimport org.apache.clerezza.rdf.schemagen.SchemaGenArguments;\n\n/**\n * Generates java source code out of an ontology described in various RDF\n * formats. The generated java file contains constants for rdf classes and\n * properties described by the ontology.\n *\n *\n * @goal generate\n *\n * @phase generate-sources\n */\n<fim_suffix>public class OntologyJavaClassCreatorMojo extends AbstractMojo {\n\n    /**\n     * Path to the root directory\n     *\n     * @parameter expression=\"${basedir}\"\n     */\n    private String baseDir;\n\n    /**\n     * Path to the root dir of the RDF+XML files. Default is\n     * src/main/ontologies.\n     *\n     * @parameter optional\n     */\n    private String resourcePath;\n\n    /**\n     * Namespace of ontologies\n     *\n     * @parameter optional\n     */\n    private Properties namespaceOfOntology;\n\n    /**\n     * Additional source directories.\n     *\n     * @parameter optional\n     */\n    private File [] sources;\n\n    /**\n     * @parameter expression=\"${project}\"\n     * @required\n     * @readonly\n     */\n    private MavenProject project;\n\n    private Map<String, String> supportedFormats = new HashMap<String, String>();\n\n    @Override\n    public void execute() throws MojoExecutionException {\n        supportedFormats.put(\".nt\", \"application/n-triples\");\n        supportedFormats.put(\".n3\", \"text/rdf+n3\");\n        supportedFormats.put(\".rdf\", \"application/rdf+xml\");\n        supportedFormats.put(\".ttl\", \"text/turtle\");\n        supportedFormats.put(\".turtle\", \"text/turtle\");\n        File file = null;\n\n        if (resourcePath == null) {\n            resourcePath = baseDir + File.separator + \"src\" + File.separator\n                    + \"main\" + File.separator + \"ontologies\";\n        } else if (resourcePath.contains(\"/\")) {\n            resourcePath = resourcePath.replace(\"/\", File.separator);\n        } else if (resourcePath.contains(\"\\\\\")) {\n            resourcePath = resourcePath.replace(\"\\\\\", File.separator);\n        }\n        file = new File(resourcePath);\n        checkDir(file);\n        if(sources != null) {\n            for ( int i = 0; i < sources.length; ++i ) {\n                project.addCompileSourceRoot( this.sources[i].getAbsolutePath() );\n                getLog().info( \"Source directory: \" + this.sources[i] + \" added.\" );\n            }\n        }\n    }\n\n    private void checkDir(File ontologiesDir) {\n        for (File file : ontologiesDir.listFiles()) {\n            if (file.isDirectory()) {\n                checkDir(file);\n            } else {\n                String fileName = file.getName();\n                int indexOfLastDot = fileName.lastIndexOf(\".\");\n                if (indexOfLastDot != -1) {\n                    String fileEnding = fileName.substring(indexOfLastDot);\n                    if (supportedFormats.containsKey(fileEnding)) {\n                        createJavaClassFile(file, fileEnding);\n                    }\n                }\n            }\n        }\n    }\n\n    private void createJavaClassFile(final File file, final String fileEnding) {\n        final String fileName = file.getName();\n        final String absolutePath = file.getAbsolutePath();\n        final String className = fileName.replace(fileEnding, \"\").toUpperCase();\n        final String pathToJavaClass = absolutePath.substring(\n                absolutePath.indexOf(resourcePath) + resourcePath.length() + 1)\n                .replace(fileName, \"\");\n        final String packageName = pathToJavaClass.replace(File.separator, \".\")\n                + className;\n        SchemaGenArguments arguments = new SchemaGenArguments() {\n\n            public URL getSchemaUrl() {\n                try {\n                    return file.toURI().toURL();\n                } catch (MalformedURLException e) {\n                    getLog().error(e.getMessage(), e);\n                }\n                return null;\n            }\n\n            public String getNamespace() {\n                if (namespaceOfOntology != null\n                        && namespaceOfOntology.containsKey(fileName)) {\n                    return namespaceOfOntology.getProperty(fileName);\n                }\n                return null;\n            }\n\n            public String getFormatIdentifier() {\n                return supportedFormats.get(fileEnding);\n            }\n\n            public String getClassName() {\n                return packageName;\n            }\n        };\n\n        SchemaGen schemaGen;\n        try {\n            schemaGen = new SchemaGen(arguments);\n        } catch (IOException e) {\n            getLog().error(e.getMessage(), e);\n            return;\n        } catch (URISyntaxException e) {\n            getLog().error(e.getMessage(), e);\n            return;\n        }\n        String rootPath = baseDir + File.separator + \"target\"\n                + File.separator + \"generated-sources\" + File.separator\n                + \"main\" + File.separator + \"java\" + File.separator;\n        File dir = new File(rootPath + pathToJavaClass);\n        dir.mkdirs();\n        PrintWriter out = null;\n        try {\n            out = new PrintWriter(new File(rootPath + pathToJavaClass + className + \".java\"), \"utf-8\");\n        } catch (FileNotFoundException e) {\n            getLog().error(e.getMessage(), e);\n            return;\n        } catch (UnsupportedEncodingException e) {\n            getLog().error(e.getMessage(), e);\n            throw new RuntimeException(\"utf-8 not supported!\");\n        }\n        try {\n            schemaGen.writeClass(out);\n        } finally {\n            out.flush();\n        }\n    }\n}<fim_middle>// class below has no smell\n"}