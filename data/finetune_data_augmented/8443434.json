{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.openstack.keystone.producer;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Message;\nimport org.apache.camel.component.openstack.common.OpenstackConstants;\nimport org.apache.camel.component.openstack.keystone.KeystoneConstants;\nimport org.apache.camel.component.openstack.keystone.KeystoneEndpoint;\nimport org.apache.camel.util.StringHelper;\nimport org.openstack4j.api.Builders;\nimport org.openstack4j.api.OSClient;\nimport org.openstack4j.model.common.ActionResponse;\nimport org.openstack4j.model.identity.v3.Region;\nimport org.openstack4j.model.identity.v3.builder.RegionBuilder;\n\npublic class RegionProducer extends AbstractKeystoneProducer {\n\n    public RegionProducer(KeystoneEndpoint endpoint, OSClient client) {\n        super(endpoint, client);\n    }\n\n    @Override\n    public void process(Exchange exchange) throws Exception {\n        final String operation = getOperation(exchange);\n        switch (operation) {\n        case OpenstackConstants.CREATE:\n            doCreate(exchange);\n            break;\n        case OpenstackConstants.GET:\n            doGet(exchange);\n            break;\n        case OpenstackConstants.GET_ALL:\n            doGetAll(exchange);\n            break;\n        case OpenstackConstants.UPDATE:\n            doUpdate(exchange);\n            break;\n        case OpenstackConstants.DELETE:\n            doDelete(exchange);\n            break;\n        default:\n            throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n        }\n    }\n\n    private void doCreate(Exchange exchange) {\n        final Region in = messageToRegion(exchange.getIn());\n        final Region out = osV3Client.identity().regions().create(in);\n        exchange.getIn().setBody(out);\n    }\n\n    private void doGet(Exchange exchange) {\n        final String id = exchange.getIn().getHeader(OpenstackConstants.ID, String.class);\n        StringHelper.notEmpty(id, \"Region ID\");\n        final Region out = osV3Client.identity().regions().get(id);\n        exchange.getIn().setBody(out);\n    }\n\n    private void doGetAll(Exchange exchange) {\n        final List<? extends Region> out = osV3Client.identity().regions().list();\n        exchange.getIn().setBody(out);\n    }\n\n    private void doUpdate(Exchange exchange) {\n        final Message msg = exchange.getIn();\n        final Region in = messageToRegion(msg);\n        final Region out = osV3Client.identity().regions().update(in);\n        msg.setBody(out);\n    }\n\n    private void doDelete(Exchange exchange) {\n        final Message msg = exchange.getIn();\n        final String id = msg.getHeader(OpenstackConstants.ID, String.class);\n        StringHelper.notEmpty(id, \"Region ID\");\n        final ActionResponse response = osV3Client.identity().regions().delete(id);\n        checkFailure(response, msg, \"Delete network\" + id);\n    }\n\n<fim_suffix>    private Region messageToRegion(Message message) {\n        Region region = message.getBody(Region.class);\n        if (region == null) {\n            Map headers = message.getHeaders();\n            RegionBuilder builder = Builders.region();\n\n            if (headers.containsKey(KeystoneConstants.DESCRIPTION)) {\n                builder.description(message.getHeader(KeystoneConstants.DESCRIPTION, String.class));\n            }\n\n            region = builder.build();\n        }\n\n        return region;\n    }\n}<fim_middle>// function below has no smell\n"}