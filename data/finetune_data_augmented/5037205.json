{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.jena.sparql.engine.binding;\n\nimport java.util.Iterator ;\n\nimport org.apache.jena.atlas.iterator.Iter ;\nimport org.apache.jena.graph.Node ;\nimport org.apache.jena.sparql.core.Var ;\n\n/** Special purpose binding for nothing. Surprisingly useful.\n */\n\n<fim_suffix>public class Binding0 extends BindingBase\n{\n    /* package */ Binding0() { super(null) ; }\n    /* package */ Binding0(Binding parent) { super(parent) ; }\n\n    /** Iterate over all the names of variables.\n     */\n    @Override\n    public Iterator<Var> vars1() { return Iter.nullIterator() ; }\n\n    @Override\n    protected int size1() { return 0 ; }\n    \n    @Override\n    protected boolean isEmpty1() { return true ; }\n    \n    @Override\n    public boolean contains1(Var var) { return false ; }\n    \n    @Override\n    public Node get1(Var var) { return null ; }\n}<fim_middle>// class below has no smell\n"}