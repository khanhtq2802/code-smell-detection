{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2016 itemis AG and others.\n * \n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Tamas Miklossy (itemis AG) - initial API and implementation (bug #461506)\n *     \n *******************************************************************************/\npackage org.eclipse.gef.dot.internal.language.validation;\n\nimport org.eclipse.gef.dot.internal.language.color.ColorPackage;\nimport org.eclipse.gef.dot.internal.language.color.DotColors;\nimport org.eclipse.gef.dot.internal.language.color.StringColor;\nimport org.eclipse.xtext.validation.Check;\n\n/**\n * This class contains custom validation rules.\n *\n * See\n * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation\n */\n<fim_suffix>public class DotColorJavaValidator extends\n\t\torg.eclipse.gef.dot.internal.language.validation.AbstractDotColorJavaValidator {\n\n\t/**\n\t * Represents the color scheme that is defined in the DOT ast. If this color\n\t * scheme is not defined, the default color scheme should be used in the\n\t * validation.\n\t */\n\tstatic String globalColorScheme = null;\n\n\t// TODO: eliminate this field and find a clear solution how to check if the\n\t// used color corresponds to the default color scheme or to the globally\n\t// defined color scheme. This issue is related to validation calls coming\n\t// from either the DotJavaValidator or from the DotImport.\n\tstatic boolean considerDefaultColorScheme = false;\n\n\tprivate final String defaultColorScheme = \"x11\";\n\n\t/**\n\t * Checks that the color scheme defined within the given <i>color</i> value\n\t * is a valid dot color scheme and that the color name also defined within\n\t * the given <i>color</i> value are consistent to the defined color scheme.\n\t * \n\t * @param color\n\t *            The StringColor element to check.\n\t */\n\t@Check\n\tpublic void checkConsistentColorSchemeAndColorName(StringColor color) {\n\t\tString colorScheme = null;\n\n\t\t// start with the default color scheme if desired\n\t\tif (considerDefaultColorScheme) {\n\t\t\tcolorScheme = defaultColorScheme;\n\t\t}\n\n\t\tString localColorScheme = color.getScheme();\n\t\tif (localColorScheme != null && !localColorScheme.isEmpty()) {\n\t\t\t// check if the localColorScheme is a valid colorScheme\n\t\t\t// (case insensitively)\n\t\t\tif (!DotColors.getColorSchemes()\n\t\t\t\t\t.contains(localColorScheme.toLowerCase())) {\n\t\t\t\terror(\"'\" + localColorScheme + \"' is not a valid color scheme.\",\n\t\t\t\t\t\tColorPackage.Literals.STRING_COLOR__SCHEME);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcolorScheme = localColorScheme;\n\t\t} else if (globalColorScheme != null) {\n\t\t\tcolorScheme = globalColorScheme;\n\t\t}\n\n\t\tif (colorScheme == null) {\n\t\t\treturn;\n\t\t}\n\n\t\t// check if the color is valid in the colorScheme\n\t\tString colorName = color.getName();\n\t\tif (colorName != null && !colorName.isEmpty()\n\t\t\t\t&& !DotColors.getColorNames(colorScheme.toLowerCase())\n\t\t\t\t\t\t.contains(colorName.toLowerCase())) {\n\t\t\terror(\"The '\" + colorName + \"' color is not valid within the '\"\n\t\t\t\t\t+ colorScheme + \"' color scheme.\",\n\t\t\t\t\tColorPackage.Literals.STRING_COLOR__SCHEME);\n\t\t}\n\t}\n\n}<fim_middle>// class below has no smell\n"}