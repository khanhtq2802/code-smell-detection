{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.cxf.testutil.recorders;\n\nimport java.io.OutputStream;\nimport java.util.List;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.logging.Logger;\n\nimport org.apache.cxf.common.logging.LogUtils;\nimport org.apache.cxf.interceptor.Fault;\nimport org.apache.cxf.interceptor.MessageSenderInterceptor;\nimport org.apache.cxf.io.CachedOutputStream;\nimport org.apache.cxf.io.CachedOutputStreamCallback;\nimport org.apache.cxf.io.WriteOnCloseOutputStream;\nimport org.apache.cxf.message.Message;\nimport org.apache.cxf.phase.AbstractPhaseInterceptor;\nimport org.apache.cxf.phase.Phase;\n\n\n/**\n *\n */\npublic class OutMessageRecorder extends AbstractPhaseInterceptor<Message> {\n\n    private static final Logger LOG = LogUtils.getLogger(OutMessageRecorder.class);\n    private List<byte[]> outbound;\n\n    public OutMessageRecorder() {\n        super(Phase.PREPARE_SEND);\n        outbound = new CopyOnWriteArrayList<>();\n        addAfter(MessageSenderInterceptor.class.getName());\n    }\n\n    public void handleMessage(Message message) throws Fault {\n\n        OutputStream os = message.getContent(OutputStream.class);\n        if (null == os) {\n            return;\n        }\n\n        WriteOnCloseOutputStream stream = createCachedStream(message, os);\n        stream.registerCallback(new RecorderCallback());\n    }\n\n\n    public static WriteOnCloseOutputStream createCachedStream(Message message, OutputStream os) {\n        // We need to ensure that we have an output stream which won't start writing the\n        // message until we have a chance to send a createsequence\n        if (!(os instanceof WriteOnCloseOutputStream)) {\n            WriteOnCloseOutputStream cached = new WriteOnCloseOutputStream(os);\n            message.setContent(OutputStream.class, cached);\n            os = cached;\n        }\n        return (WriteOnCloseOutputStream) os;\n    }\n    public List<byte[]> getOutboundMessages() {\n        return outbound;\n    }\n\n    class RecorderCallback implements CachedOutputStreamCallback {\n\n        public void onFlush(CachedOutputStream cos) {\n\n        }\n\n<fim_suffix>        public void onClose(CachedOutputStream cos) {\n            // bytes were already copied after flush\n            try {\n                byte[] bytes = cos.getBytes();\n                synchronized (outbound) {\n                    outbound.add(bytes);\n                }\n            } catch (Exception e) {\n                LOG.fine(\"Can't record message from output stream class: \"\n                         + cos.getOut().getClass().getName());\n            }\n        }\n\n    }\n\n}<fim_middle>// function below has no smell\n"}