{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.uima.tools.cpm;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.awt.Toolkit;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.SwingUtilities;\nimport javax.swing.UIManager;\nimport javax.swing.WindowConstants;\n\nimport org.apache.uima.tools.images.Images;\nimport org.apache.uima.tools.util.gui.FileChooserBugWorkarounds;\nimport org.apache.uima.tools.util.gui.AboutDialog;\n\n<fim_suffix>public class CpmFrame extends JFrame implements ActionListener {\n  private static final long serialVersionUID = 756368351780483658L;\n\n  private CpmPanel cpmPanel;\n\n  private JMenuBar menuBar;\n\n  private JMenuItem exitMenuItem;\n\n  private JMenuItem aboutMenuItem;\n\n  private JMenuItem helpMenuItem;\n\n  private JDialog aboutDialog;\n\n  public CpmFrame() {\n    super(\"Collection Processing Engine Configurator\");\n\n    try {\n      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n    } catch (Exception e) {\n      // I don't think this should ever happen, but if it does just print error and continue\n      // with defalt look and feel\n      System.err.println(\"Could not set look and feel: \" + e.getMessage());\n    }\n    // UIManager.put(\"Panel.background\",Color.WHITE);\n    // Need to set other colors as well\n\n    // Workaround for bug #4711700\n    FileChooserBugWorkarounds.fix();\n\n    // Set frame icon image\n    try {\n      this.setIconImage(Images.getImage(Images.MICROSCOPE));\n      // new ImageIcon(getClass().getResource(FRAME_ICON_IMAGE)).getImage());\n    } catch (IOException e) {\n      System.err.println(\"Image could not be loaded: \" + e.getMessage());\n    }\n\n    this.getContentPane().setBackground(Color.WHITE);\n    this.getContentPane().setLayout(new BorderLayout());\n\n    JLabel banner = new JLabel(Images.getImageIcon(Images.BANNER));\n    this.getContentPane().add(banner, BorderLayout.NORTH);\n\n    cpmPanel = new CpmPanel();\n    this.getContentPane().add(cpmPanel, BorderLayout.CENTER);\n\n    setJMenuBar(createMenuBar());\n\n    aboutDialog = new AboutDialog(this, \"About Collection Processing Engine Configurator\");\n\n    this.setSize(800, 600);\n    this.pack();\n  }\n\n  private JMenuBar createMenuBar() {\n    menuBar = new JMenuBar();\n\n    JMenu fileMenu = new JMenu(\"File\");\n    List fileMenuItems = cpmPanel.createFileMenuItems();\n    Iterator iter = fileMenuItems.iterator();\n    while (iter.hasNext()) {\n      fileMenu.add((JMenuItem) iter.next());\n    }\n\n    exitMenuItem = new JMenuItem(\"Exit\");\n    exitMenuItem.addActionListener(this);\n    fileMenu.add(exitMenuItem);\n    \n    JMenu viewMenu = new JMenu(\"View\");\n    List viewMenuItems = cpmPanel.createViewMenuItems();\n    iter = viewMenuItems.iterator();\n    while (iter.hasNext()) {\n      viewMenu.add((JMenuItem) iter.next());\n    }\n\n    JMenu helpMenu = new JMenu(\"Help\");\n    aboutMenuItem = new JMenuItem(\"About\");\n    aboutMenuItem.addActionListener(this);\n    helpMenuItem = new JMenuItem(\"Help\");\n    helpMenuItem.addActionListener(this);\n    helpMenu.add(aboutMenuItem);\n    helpMenu.add(helpMenuItem);\n    menuBar.add(fileMenu);\n    menuBar.add(viewMenu);\n    menuBar.add(helpMenu);\n\n    return menuBar;\n  }\n\n  public void actionPerformed(ActionEvent ev) {\n    Object source = ev.getSource();\n\n    if (source == aboutMenuItem) {\n      aboutDialog.setVisible(true);\n    } else if (source == helpMenuItem) {\n      JOptionPane.showMessageDialog(CpmFrame.this, CpmPanel.HELP_MESSAGE,\n              \"Collection Processing Engine Configurator Help\", JOptionPane.PLAIN_MESSAGE);\n    } else if (source == exitMenuItem) {\n      this.processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n    }\n  }\n\n  public Dimension getPreferredSize() {\n    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n    return new Dimension(screenSize.width, (screenSize.height - 65));\n  }\n\n  /**\n   * Runs the application.\n   */\n  public static void main(String[] args) {\n    //GUI creation must be done in the event handler thread, because Swing is\n    //not thread-safe.  This is particularly important for the CPE Configurator\n    //because it's initialization can be quite complex (it loads the last known    \n    //CPE descriptor).\n    SwingUtilities.invokeLater(new Runnable() {\n      public void run() {\n        initGUI();        \n      }\n    });    \n  }\n\n  /**\n   * Creates and shows the GUI.\n   */\n  private static void initGUI() {\n    try {\n      final CpmFrame frame = new CpmFrame();\n      frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\n\n      frame.addWindowListener(new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n          if (frame.cpmPanel.confirmExit())\n            System.exit(0);\n        }\n\n        public void windowActivated(WindowEvent e) {\n          frame.cpmPanel.checkForOutOfSyncFiles();\n        }\n      });\n      frame.pack();\n      frame.setVisible(true);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}<fim_middle>// class below has no smell\n"}