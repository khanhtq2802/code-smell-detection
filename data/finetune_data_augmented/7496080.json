{"text": "<fim_prefix>\t */\n\tpublic byte[] randomKey(RedisClusterNode node) {\n\t\tAssert.notNull(node, \"RedisClusterNode must not be null!\");\n\t\treturn connection.getClusterCommandExecutor()\n\t\t\t\t.executeCommandOnSingleNode((JedisClusterCommandCallback<byte[]>) client -> client.randomBinaryKey(), node)\n\t\t\t\t.getValue();\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#rename(byte[], byte[])\n\t */\n\t@Override\n\tpublic void rename(byte[] sourceKey, byte[] targetKey) {\n\t\tAssert.notNull(sourceKey, \"Source key must not be null!\");\n\t\tAssert.notNull(targetKey, \"Target key must not be null!\");\n\t\tif (ClusterSlotHashUtil.isSameSlotForAllKeys(sourceKey, targetKey)) {\n\t\t\ttry {\n\t\t\t\tconnection.getCluster().rename(sourceKey, targetKey);\n\t\t\t\treturn;\n\t\t\t} catch (Exception ex) {\n\t\t\t\tthrow convertJedisAccessException(ex);\n\t\t\t}\n\t\t}\n\t\tbyte[] value = dump(sourceKey);\n\t\tif (value != null && value.length > 0) {\n\t\t\trestore(targetKey, 0, value);\n\t\t\tdel(sourceKey);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#renameNX(byte[], byte[])\n\t */\n\t@Override\n\tpublic Boolean renameNX(byte[] sourceKey, byte[] targetKey) {\n\t\tAssert.notNull(sourceKey, \"Source key must not be null!\");\n\t\tAssert.notNull(targetKey, \"Target key must not be null!\");\n\t\tif (ClusterSlotHashUtil.isSameSlotForAllKeys(sourceKey, targetKey)) {\n\t\t\ttry {\n\t\t\t\treturn JedisConverters.toBoolean(connection.getCluster().renamenx(sourceKey, targetKey));\n\t\t\t} catch (Exception ex) {\n\t\t\t\tthrow convertJedisAccessException(ex);\n\t\t\t}\n\t\t}\n\t\tbyte[] value = dump(sourceKey);\n\t\tif (value != null && value.length > 0 && !exists(targetKey)) {\n\t\t\trestore(targetKey, 0, value);\n\t\t\tdel(sourceKey);\n\t\t\treturn Boolean.TRUE;\n\t\t}\n\t\treturn Boolean.FALSE;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#expire(byte[], long)\n\t */\n\t@Override\n\tpublic Boolean expire(byte[] key, long seconds) {\n\t\tAssert.notNull(key, \"Key must not be null!\");\n\t\tif (seconds > Integer.MAX_VALUE) {\n\t\t\tthrow new UnsupportedOperationException(\"Jedis does not support seconds exceeding Integer.MAX_VALUE.\");\n\t\t}\n\t\ttry {\n\t\t\treturn JedisConverters.toBoolean(connection.getCluster().expire(key, Long.valueOf(seconds).intValue()));\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertJedisAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#pExpire(byte[], long)\n\t */\n\t@Override\n\tpublic Boolean pExpire(byte[] key, long millis) {\n\t\tAssert.notNull(key, \"Key must not be null!\");\n\t\ttry {\n\t\t\treturn JedisConverters.toBoolean(connection.getCluster().pexpire(key, millis));\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertJedisAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#expireAt(byte[], long)\n\t */\n\t@Override\n\tpublic Boolean expireAt(byte[] key, long unixTime) {\n\t\tAssert.notNull(key, \"Key must not be null!\");\n\t\ttry {\n\t\t\treturn JedisConverters.toBoolean(connection.getCluster().expireAt(key, unixTime));\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertJedisAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#pExpireAt(byte[], long)\n\t */\n\t@Override\n\tpublic Boolean pExpireAt(byte[] key, long unixTimeInMillis) {\n\t\tAssert.notNull(key, \"Key must not be null!\");\n\t\ttry {\n\t\t\treturn JedisConverters.toBoolean(connection.getCluster().pexpireAt(key, unixTimeInMillis));\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertJedisAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#persist(byte[])\n\t */\n\t@Override\n\tpublic Boolean persist(byte[] key) {\n\t\tAssert.notNull(key, \"Key must not be null!\");\n\t\ttry {\n\t\t\treturn JedisConverters.toBoolean(connection.getCluster().persist(key));\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertJedisAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#move(byte[], int)\n\t */\n\t@Override\n\tpublic Boolean move(byte[] key, int dbIndex) {\n\t\tthrow new UnsupportedOperationException(\"Cluster mode does not allow moving keys.\");\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#ttl(byte[])\n\t */\n\t@Override\n\tpublic Long ttl(byte[] key) {\n\t\tAssert.notNull(key, \"Key must not be null!\");\n\t\ttry {\n\t\t\treturn connection.getCluster().ttl(key);\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertJedisAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#ttl(byte[], java.util.concurrent.TimeUnit)\n\t */\n\t@Override\n\tpublic Long ttl(byte[] key, TimeUnit timeUnit) {\n\t\tAssert.notNull(key, \"Key must not be null!\");\n\t\ttry {\n\t\t\treturn Converters.secondsToTimeUnit(connection.getCluster().ttl(key), timeUnit);\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertJedisAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#pTtl(byte[])\n\t */\n\t@Override\n\tpublic Long pTtl(byte[] key) {\n\t\tAssert.notNull(key, \"Key must not be null!\");\n\t\treturn connection.getClusterCommandExecutor()\n\t\t\t\t.executeCommandOnSingleNode((JedisClusterCommandCallback<Long>) client -> client.pttl(key),\n\t\t\t\t\t\tconnection.getTopologyProvider().getTopology().getKeyServingMasterNode(key))\n\t\t\t\t.getValue();\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#pTtl(byte[], java.util.concurrent.TimeUnit)\n\t */\n\t@Override\n\tpublic Long pTtl(byte[] key, TimeUnit timeUnit) {\n\t\tAssert.notNull(key, \"Key must not be null!\");\n\t\treturn connection.getClusterCommandExecutor()\n\t\t\t\t.executeCommandOnSingleNode(\n\t\t\t\t\t\t(JedisClusterCommandCallback<Long>) client -> Converters.millisecondsToTimeUnit(client.pttl(key), timeUnit),\n\t\t\t\t\t\tconnection.getTopologyProvider().getTopology().getKeyServingMasterNode(key))\n\t\t\t\t.getValue();\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisKeyCommands#dump(byte[])\n\t */\n<fim_suffix>\t@Override\n\tpublic byte[] dump(byte[] key) {\n\t\tAssert.notNull(key, \"Key must not be null!\");\n\t\treturn connection.getClusterCommandExecutor()\n\t\t\t\t.executeCommandOnSingleNode((JedisClusterCommandCallback<byte[]>) client -> client.dump(key),\n\t\t\t\t\t\tconnection.getTopologyProvider().getTopology().getKeyServingMasterNode(key))\n\t\t\t\t.getValue();\n\t}<fim_middle>// function below has no smell\n"}