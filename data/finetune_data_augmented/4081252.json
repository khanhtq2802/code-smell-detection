{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.hyracks.storage.am.lsm.rtree.dataflow;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.hyracks.api.application.INCServiceContext;\nimport org.apache.hyracks.api.dataflow.value.IBinaryComparatorFactory;\nimport org.apache.hyracks.api.dataflow.value.ILinearizeComparatorFactory;\nimport org.apache.hyracks.api.dataflow.value.ITypeTraits;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.api.io.FileReference;\nimport org.apache.hyracks.api.io.IIOManager;\nimport org.apache.hyracks.api.io.IJsonSerializable;\nimport org.apache.hyracks.api.io.IPersistedResourceRegistry;\nimport org.apache.hyracks.storage.am.common.api.IMetadataPageManagerFactory;\nimport org.apache.hyracks.storage.am.common.api.IPrimitiveValueProviderFactory;\nimport org.apache.hyracks.storage.am.lsm.common.api.ILSMIOOperationCallbackFactory;\nimport org.apache.hyracks.storage.am.lsm.common.api.ILSMIOOperationSchedulerProvider;\nimport org.apache.hyracks.storage.am.lsm.common.api.ILSMIndex;\nimport org.apache.hyracks.storage.am.lsm.common.api.ILSMMergePolicyFactory;\nimport org.apache.hyracks.storage.am.lsm.common.api.ILSMOperationTrackerFactory;\nimport org.apache.hyracks.storage.am.lsm.common.api.IVirtualBufferCache;\nimport org.apache.hyracks.storage.am.lsm.common.api.IVirtualBufferCacheProvider;\nimport org.apache.hyracks.storage.am.lsm.common.dataflow.LsmResource;\nimport org.apache.hyracks.storage.am.lsm.rtree.utils.LSMRTreeUtils;\nimport org.apache.hyracks.storage.am.rtree.frames.RTreePolicyType;\nimport org.apache.hyracks.storage.common.IStorageManager;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\npublic class LSMRTreeWithAntiMatterLocalResource extends LsmResource {\n    private static final long serialVersionUID = 1L;\n    protected final IBinaryComparatorFactory[] btreeCmpFactories;\n    protected final IPrimitiveValueProviderFactory[] valueProviderFactories;\n    protected final RTreePolicyType rtreePolicyType;\n    protected final ILinearizeComparatorFactory linearizeCmpFactory;\n    protected final int[] rtreeFields;\n    protected final boolean isPointMBR;\n    public LSMRTreeWithAntiMatterLocalResource(String path, IStorageManager storageManager, ITypeTraits[] typeTraits,\n            IBinaryComparatorFactory[] rtreeCmpFactories, ITypeTraits[] filterTypeTraits,\n            IBinaryComparatorFactory[] filterCmpFactories, int[] filterFields,\n            ILSMOperationTrackerFactory opTrackerProvider, ILSMIOOperationCallbackFactory ioOpCallbackFactory,\n            IMetadataPageManagerFactory metadataPageManagerFactory, IVirtualBufferCacheProvider vbcProvider,\n            ILSMIOOperationSchedulerProvider ioSchedulerProvider, ILSMMergePolicyFactory mergePolicyFactory,\n            Map<String, String> mergePolicyProperties, IBinaryComparatorFactory[] btreeCmpFactories,\n            IPrimitiveValueProviderFactory[] valueProviderFactories, RTreePolicyType rtreePolicyType,\n            ILinearizeComparatorFactory linearizeCmpFactory, int[] rtreeFields, boolean isPointMBR, boolean durable) {\n        super(path, storageManager, typeTraits, rtreeCmpFactories, filterTypeTraits, filterCmpFactories, filterFields,\n                opTrackerProvider, ioOpCallbackFactory, metadataPageManagerFactory, vbcProvider, ioSchedulerProvider,\n                mergePolicyFactory, mergePolicyProperties, durable);\n        this.btreeCmpFactories = btreeCmpFactories;\n        this.valueProviderFactories = valueProviderFactories;\n        this.rtreePolicyType = rtreePolicyType;\n        this.linearizeCmpFactory = linearizeCmpFactory;\n        this.rtreeFields = rtreeFields;\n        this.isPointMBR = isPointMBR;\n    }\n    private LSMRTreeWithAntiMatterLocalResource(IPersistedResourceRegistry registry, JsonNode json,\n            IBinaryComparatorFactory[] btreeCmpFactories, IPrimitiveValueProviderFactory[] valueProviderFactories,\n            RTreePolicyType rtreePolicyType, ILinearizeComparatorFactory linearizeCmpFactory, int[] rtreeFields,\n            boolean isPointMBR) throws HyracksDataException {\n        super(registry, json);\n        this.btreeCmpFactories = btreeCmpFactories;\n        this.valueProviderFactories = valueProviderFactories;\n        this.rtreePolicyType = rtreePolicyType;\n        this.linearizeCmpFactory = linearizeCmpFactory;\n        this.rtreeFields = rtreeFields;\n        this.isPointMBR = isPointMBR;\n    }\n<fim_suffix>    @Override\n    public ILSMIndex createInstance(INCServiceContext serviceCtx) throws HyracksDataException {\n        IIOManager ioManager = serviceCtx.getIoManager();\n        FileReference file = ioManager.resolve(path);\n        List<IVirtualBufferCache> virtualBufferCaches = vbcProvider.getVirtualBufferCaches(serviceCtx, file);\n        ioOpCallbackFactory.initialize(serviceCtx, this);\n        return LSMRTreeUtils.createLSMTreeWithAntiMatterTuples(ioManager, virtualBufferCaches, file,\n                storageManager.getBufferCache(serviceCtx), typeTraits, cmpFactories, btreeCmpFactories,\n                valueProviderFactories, rtreePolicyType,\n                mergePolicyFactory.createMergePolicy(mergePolicyProperties, serviceCtx),\n                opTrackerProvider.getOperationTracker(serviceCtx, this), ioSchedulerProvider.getIoScheduler(serviceCtx),\n                ioOpCallbackFactory, linearizeCmpFactory, rtreeFields, filterTypeTraits, filterCmpFactories,\n                filterFields, durable, isPointMBR, metadataPageManagerFactory);\n    }\n    @Override\n    public JsonNode toJson(IPersistedResourceRegistry registry) throws HyracksDataException {\n        ObjectNode jsonObject = registry.getClassIdentifier(getClass(), serialVersionUID);\n        super.appendToJson(jsonObject, registry);\n        ArrayNode btreeCmpFactoriesArray = OBJECT_MAPPER.createArrayNode();\n        for (IBinaryComparatorFactory factory : btreeCmpFactories) {\n            btreeCmpFactoriesArray.add(factory.toJson(registry));\n        }\n        jsonObject.set(\"btreeCmpFactories\", btreeCmpFactoriesArray);\n        jsonObject.set(\"linearizeCmpFactory\", linearizeCmpFactory.toJson(registry));\n        final ArrayNode valueProviderFactoriesArray = OBJECT_MAPPER.createArrayNode();\n        for (IPrimitiveValueProviderFactory factory : valueProviderFactories) {\n            valueProviderFactoriesArray.add(factory.toJson(registry));\n        }\n        jsonObject.set(\"valueProviderFactories\", valueProviderFactoriesArray);\n        jsonObject.set(\"rtreePolicyType\", rtreePolicyType.toJson(registry));\n        jsonObject.putPOJO(\"rtreeFields\", rtreeFields);\n        jsonObject.put(\"isPointMBR\", isPointMBR);\n        return jsonObject;\n    }\n    public static IJsonSerializable fromJson(IPersistedResourceRegistry registry, JsonNode json)\n            throws HyracksDataException {\n        final int[] rtreeFields = OBJECT_MAPPER.convertValue(json.get(\"rtreeFields\"), int[].class);\n        final boolean isPointMBR = json.get(\"isPointMBR\").asBoolean();\n        final RTreePolicyType rtreePolicyType = (RTreePolicyType) registry.deserialize(json.get(\"rtreePolicyType\"));\n        final ILinearizeComparatorFactory linearizeCmpFactory =\n                (ILinearizeComparatorFactory) registry.deserialize(json.get(\"linearizeCmpFactory\"));\n        final List<IBinaryComparatorFactory> btreeCmpFactoriesList = new ArrayList<>();\n        final ArrayNode jsonBtreeCmpFactories = (ArrayNode) json.get(\"btreeCmpFactories\");\n        for (JsonNode cf : jsonBtreeCmpFactories) {<fim_middle>// function below is feature envy\n"}