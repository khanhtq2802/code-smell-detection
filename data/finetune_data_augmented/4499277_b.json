{"text": "<fim_prefix>\n<fim_suffix>public class GangliaServer implements MonitorService {\n  /*\n   * The Ganglia protocol specific stuff: the xdr_* methods\n   * and the sendToGanglia* methods have been shamelessly ripped off\n   * from Hadoop. All hail the yellow elephant!\n   */\n  private static final Logger logger =\n          LoggerFactory.getLogger(GangliaServer.class);\n  public static final int BUFFER_SIZE = 1500; // as per libgmond.c\n  protected byte[] buffer = new byte[BUFFER_SIZE];\n  protected int offset;\n  private final List<SocketAddress> addresses = new ArrayList<SocketAddress>();\n  private DatagramSocket socket = null;\n  private ScheduledExecutorService service =\n          Executors.newSingleThreadScheduledExecutor();\n  private List<HostInfo> hosts;\n  protected final GangliaCollector collectorRunnable;\n  private int pollFrequency = 60;\n  public static final String DEFAULT_UNITS = \"\";\n  public static final int DEFAULT_TMAX = 60;\n  public static final int DEFAULT_DMAX = 0;\n  public static final int DEFAULT_SLOPE = 3;\n  public static final String GANGLIA_DOUBLE_TYPE = \"double\";\n  private volatile boolean isGanglia3 = false;\n  private String hostname;\n  public final String CONF_POLL_FREQUENCY = \"pollFrequency\";\n  public final int DEFAULT_POLL_FREQUENCY = 60;\n  public final String CONF_HOSTS = \"hosts\";\n  public final String CONF_ISGANGLIA3 = \"isGanglia3\";\n  private static final String GANGLIA_CONTEXT = \"flume.\";\n  public GangliaServer() throws FlumeException {\n    collectorRunnable = new GangliaCollector();\n  }\n  /**\n   * Puts a string into the buffer by first writing the size of the string as an\n   * int, followed by the bytes of the string, padded if necessary to a multiple\n   * of 4.\n   *\n   * @param s the string to be written to buffer at offset location\n   */\n  protected void xdr_string(String s) {\n    byte[] bytes = s.getBytes();\n    int len = bytes.length;\n    xdr_int(len);\n    System.arraycopy(bytes, 0, buffer, offset, len);\n    offset += len;\n    pad();\n  }\n  /**\n   * Pads the buffer with zero bytes up to the nearest multiple of 4.\n   */\n  private void pad() {\n    int newOffset = ((offset + 3) / 4) * 4;\n    while (offset < newOffset) {\n      buffer[offset++] = 0;\n    }\n  }\n  /**\n   * Puts an integer into the buffer as 4 bytes, big-endian.\n   */\n  protected void xdr_int(int i) {\n    buffer[offset++] = (byte) ((i >> 24) & 0xff);\n    buffer[offset++] = (byte) ((i >> 16) & 0xff);\n    buffer[offset++] = (byte) ((i >> 8) & 0xff);\n    buffer[offset++] = (byte) (i & 0xff);\n  }\n  public synchronized void sendToGangliaNodes() {\n    DatagramPacket packet;\n    for (SocketAddress addr : addresses) {\n      try {\n        packet = new DatagramPacket(buffer, offset, addr);\n        socket.send(packet);\n      } catch (Exception ex) {\n        logger.warn(\"Could not send metrics to metrics server: \"\n                + addr.toString(), ex);\n      }\n    }\n    offset = 0;\n  }\n  /**\n   * Start this server, causing it to poll JMX at the configured frequency.\n   */\n  @Override\n  public void start() {\n    try {\n      socket = new DatagramSocket();\n      hostname = InetAddress.getLocalHost().getHostName();\n    } catch (SocketException ex) {\n      logger.error(\"Could not create socket for metrics collection.\");\n      throw new FlumeException(\n              \"Could not create socket for metrics collection.\", ex);\n    } catch (Exception ex2) {\n      logger.warn(\"Unknown error occured\", ex2);\n    }\n    for (HostInfo host : hosts) {\n      addresses.add(new InetSocketAddress(\n              host.getHostName(), host.getPortNumber()));\n    }\n    collectorRunnable.server = this;\n    if (service.isShutdown() || service.isTerminated()) {\n      service = Executors.newSingleThreadScheduledExecutor();\n    }\n    service.scheduleWithFixedDelay(collectorRunnable, 0,\n            pollFrequency, TimeUnit.SECONDS);\n  }\n  /**\n   * Stop this server.\n   */\n  @Override\n  public void stop() {\n    service.shutdown();\n    while (!service.isTerminated()) {\n      try {\n        logger.warn(\"Waiting for ganglia service to stop\");\n        service.awaitTermination(500, TimeUnit.MILLISECONDS);\n      } catch (InterruptedException ex) {\n        logger.warn(\"Interrupted while waiting\"\n                + \" for ganglia monitor to shutdown\", ex);\n        service.shutdownNow();\n      }\n    }\n    addresses.clear();\n  }\n  /**\n   *\n   * @param pollFrequency Seconds between consecutive JMX polls.\n   */\n  public void setPollFrequency(int pollFrequency) {\n    this.pollFrequency = pollFrequency;\n  }\n  /**\n   *\n   * @return Seconds between consecutive JMX polls\n   */\n  public int getPollFrequency() {\n    return pollFrequency;\n  }\n  /**\n   *\n   * @param isGanglia3 When true, ganglia 3 messages will be sent, else Ganglia\n   * 3.1 formatted messages are sent.\n   */\n  public void setIsGanglia3(boolean isGanglia3) {\n    this.isGanglia3 = isGanglia3;\n  }\n  /**\n   *\n   * @return True if the server is currently sending ganglia 3 formatted msgs.\n   * False if the server returns Ganglia 3.1\n   */\n  public boolean isGanglia3() {\n    return this.isGanglia3;\n  }\n  protected void createGangliaMessage(String name, String value) {\n    logger.debug(\"Sending ganglia3 formatted message.\"\n            + name + \": \" + value);\n    name = hostname + \".\" + name;\n    xdr_int(0);\n    String type = \"string\";\n    try {\n      Float.parseFloat(value);\n      type = \"float\";\n    } catch (NumberFormatException ex) {\n      // The param is a string, and so leave the type as is.\n    }\n    xdr_string(type); // metric type\n    xdr_string(name);\n    xdr_string(value);\n    xdr_string(DEFAULT_UNITS);\n    xdr_int(DEFAULT_SLOPE);\n    xdr_int(DEFAULT_TMAX);\n    xdr_int(DEFAULT_DMAX);\n  }\n  protected void createGangliaMessage31(String name, String value) {\n    logger.debug(\"Sending ganglia 3.1 formatted message: \"\n            + name + \": \" + value);\n    xdr_int(128); // metric_id = metadata_msg\n    xdr_string(hostname); // hostname\n    xdr_string(name); // metric name\n    xdr_int(0); // spoof = False\n    String type = \"string\";\n    try {\n      Float.parseFloat(value);\n      type = \"float\";\n    } catch (NumberFormatException ex) {\n      // The param is a string, and so leave the type as is.\n    }\n    xdr_string(type); // metric type\n    xdr_string(name); // metric name\n    xdr_string(DEFAULT_UNITS); // units\n    xdr_int(DEFAULT_SLOPE); // slope\n    xdr_int(DEFAULT_TMAX); // tmax, the maximum time between metrics\n    xdr_int(DEFAULT_DMAX); // dmax, the maximum data value\n    xdr_int(1); /*Num of the entries in extra_value field for Ganglia 3.1.x*/\n    xdr_string(\"GROUP\"); /*Group attribute*/\n    xdr_string(\"flume\"); /*Group value*/\n    this.sendToGangliaNodes();\n    // Now we send out a message with the actual value.\n    // Technically, we only need to send out the metadata message once for\n    // each metric, but I don't want to have to record which metrics we did and\n    // did not send.\n    xdr_int(133); // we are sending a string value\n    xdr_string(hostname); // hostName\n    xdr_string(name); // metric name\n    xdr_int(0); // spoof = False\n    xdr_string(\"%s\"); // format field\n    xdr_string(value); // metric value\n  }\n  @Override\n  public void configure(Context context) {\n    this.pollFrequency = context.getInteger(this.CONF_POLL_FREQUENCY, 60);\n    String localHosts = context.getString(this.CONF_HOSTS);<fim_middle>// class below is data class and blob\n"}