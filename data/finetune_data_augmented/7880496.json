{"text": "<fim_prefix>/**\n * Autogenerated by Thrift Compiler (0.11.0)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage com.facebook.buck.distributed.thrift;\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\", \"unused\"})\n@javax.annotation.Generated(value = \"Autogenerated by Thrift Compiler (0.11.0)\")\npublic class AppendBuildSlaveEventsResponse implements org.apache.thrift.TBase<AppendBuildSlaveEventsResponse, AppendBuildSlaveEventsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<AppendBuildSlaveEventsResponse> {\n  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"AppendBuildSlaveEventsResponse\");\n  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AppendBuildSlaveEventsResponseStandardSchemeFactory();\n  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AppendBuildSlaveEventsResponseTupleSchemeFactory();\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n;\n    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n    static {\n      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(java.lang.String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final java.lang.String _fieldName;\n    _Fields(short thriftId, java.lang.String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public java.lang.String getFieldName() {\n      return _fieldName;\n    }\n  }\n  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppendBuildSlaveEventsResponse.class, metaDataMap);\n  }\n  public AppendBuildSlaveEventsResponse() {\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public AppendBuildSlaveEventsResponse(AppendBuildSlaveEventsResponse other) {\n  }\n  public AppendBuildSlaveEventsResponse deepCopy() {\n    return new AppendBuildSlaveEventsResponse(this);\n  }\n  @Override\n  public void clear() {\n  }\n  public void setFieldValue(_Fields field, java.lang.Object value) {\n    switch (field) {\n    }\n  }\n  public java.lang.Object getFieldValue(_Fields field) {\n    switch (field) {\n    }\n    throw new java.lang.IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new java.lang.IllegalArgumentException();\n    }\n    switch (field) {\n    }\n    throw new java.lang.IllegalStateException();\n  }\n  @Override\n  public boolean equals(java.lang.Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof AppendBuildSlaveEventsResponse)\n      return this.equals((AppendBuildSlaveEventsResponse)that);\n    return false;\n  }\n  public boolean equals(AppendBuildSlaveEventsResponse that) {\n    if (that == null)\n      return false;\n    if (this == that)\n      return true;\n    return true;\n  }\n  @Override\n  public int hashCode() {\n    int hashCode = 1;\n    return hashCode;\n  }\n  @Override\n  public int compareTo(AppendBuildSlaveEventsResponse other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    return 0;\n  }\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    scheme(iprot).read(iprot, this);\n  }\n  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n    scheme(oprot).write(oprot, this);\n  }\n  @Override\n  public java.lang.String toString() {\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(\"AppendBuildSlaveEventsResponse(\");\n    boolean first = true;\n    sb.append(\")\");\n    return sb.toString();\n  }\n  public void validate() throws org.apache.thrift.TException {\n    // check for required fields\n    // check for sub-struct validity\n  }\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    try {\n      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {\n    try {\n      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private static class AppendBuildSlaveEventsResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n    public AppendBuildSlaveEventsResponseStandardScheme getScheme() {\n      return new AppendBuildSlaveEventsResponseStandardScheme();\n    }\n  }\n  private static class AppendBuildSlaveEventsResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<AppendBuildSlaveEventsResponse> {\n    public void read(org.apache.thrift.protocol.TProtocol iprot, AppendBuildSlaveEventsResponse struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TField schemeField;\n      iprot.readStructBegin();\n      while (true)\n      {\n        schemeField = iprot.readFieldBegin();\n        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n          break;\n        }\n        switch (schemeField.id) {\n          default:\n            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n        }\n        iprot.readFieldEnd();\n      }\n      iprot.readStructEnd();\n      // check for required fields of primitive type, which can't be checked in the validate method\n      struct.validate();\n    }\n<fim_suffix>    public void write(org.apache.thrift.protocol.TProtocol oprot, AppendBuildSlaveEventsResponse struct) throws org.apache.thrift.TException {\n      struct.validate();\n      oprot.writeStructBegin(STRUCT_DESC);\n      oprot.writeFieldStop();\n      oprot.writeStructEnd();\n    }\n  }\n  private static class AppendBuildSlaveEventsResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n    public AppendBuildSlaveEventsResponseTupleScheme getScheme() {\n      return new AppendBuildSlaveEventsResponseTupleScheme();\n    }\n  }\n  private static class AppendBuildSlaveEventsResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<AppendBuildSlaveEventsResponse> {\n    @Override\n    public void write(org.apache.thrift.protocol.TProtocol prot, AppendBuildSlaveEventsResponse struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n    }\n    @Override<fim_middle>// function below has no smell\n"}