{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.jdt.ls.extension.core.internal.pom;\n\nimport static org.eclipse.che.jdt.ls.extension.core.internal.Utils.ensureNotCancelled;\nimport static org.eclipse.jdt.ls.core.internal.handlers.WorkspaceDiagnosticsHandler.toDiagnosticsArray;\n\nimport com.google.common.base.Preconditions;\nimport java.util.List;\nimport org.eclipse.core.resources.IFile;\nimport org.eclipse.core.resources.IMarker;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.jdt.ls.core.internal.JDTUtils;\nimport org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\nimport org.eclipse.jdt.ls.core.internal.ResourceUtils;\nimport org.eclipse.jdt.ls.core.internal.handlers.JsonRpcHelpers;\nimport org.eclipse.jface.text.IDocument;\nimport org.eclipse.lsp4j.PublishDiagnosticsParams;\n\n/**\n * Command to recompute diagnostics.\n *\n * @author Valeriy Svydenko\n */\n<fim_suffix>public class RecomputePomDiagnosticsCommand {\n  /**\n   * Recomputes diagnostics for the pom.xml.\n   *\n   * @param arguments contains uri of pom.xml\n   * @param pm progress monitor\n   * @return true if diagnostics were published otherwise returns false\n   */\n  public static Boolean execute(List<Object> arguments, IProgressMonitor pm) {\n    Preconditions.checkArgument(arguments.size() >= 1, \"Resource uri is expected\");\n\n    ensureNotCancelled(pm);\n\n    final String fileUri = (String) arguments.get(0);\n\n    PublishDiagnosticsParams diagnostics = computeDiagnostics(fileUri);\n    if (diagnostics == null) {\n      return false;\n    }\n\n    JavaLanguageServerPlugin.getInstance().getClientConnection().publishDiagnostics(diagnostics);\n\n    return true;\n  }\n\n  static PublishDiagnosticsParams computeDiagnostics(String fileUri) {\n    IFile file = JDTUtils.findFile(fileUri);\n    if (file == null) {\n      return null;\n    }\n\n    IMarker[] markers = null;\n\n    try {\n      markers = file.findMarkers(null, true, 1);\n    } catch (CoreException e) {\n      JavaLanguageServerPlugin.logException(\"Can't find markers for: \" + fileUri, e);\n    }\n    IDocument document = JsonRpcHelpers.toDocument(file);\n\n    return new PublishDiagnosticsParams(\n        ResourceUtils.toClientUri(fileUri), toDiagnosticsArray(document, markers));\n  }\n}<fim_middle>// class below has no smell\n"}