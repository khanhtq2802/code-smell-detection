{"text": "<fim_prefix>/**\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.airavata.common.utils;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\n\n/**\n * An abstraction for database specific test classes. This will create a database and provides methods to execute SQLs.\n */\n<fim_suffix>public class DatabaseTestCases {\n\n    private static final Logger logger = LoggerFactory.getLogger(DatabaseTestCases.class);\n\n    protected static String hostAddress = \"localhost\";\n    protected static int port = 20000;\n    protected static String userName = \"admin\";\n    protected static String password = \"admin\";\n    protected static String driver = \"org.apache.derby.jdbc.ClientDriver\";\n\n    public static String getHostAddress() {\n        return hostAddress;\n    }\n\n    public static int getPort() {\n        return port;\n    }\n\n    public static String getUserName() {\n        return userName;\n    }\n\n    public static String getPassword() {\n        return password;\n    }\n\n    public static String getDriver() {\n        return driver;\n    }\n\n    public static String getJDBCUrl() {\n        return new StringBuilder().append(\"jdbc:derby://\").append(getHostAddress()).append(\":\").append(getPort())\n                .append(\"/experiment_catalog;create=true;user=\").append(getUserName()).append(\";password=\")\n                .append(getPassword()).toString();\n    }\n\n    public static void waitTillServerStarts() {\n        DBUtil dbUtil = null;\n\n        try {\n            dbUtil = new DBUtil(getJDBCUrl(), getUserName(), getPassword(), getDriver());\n        } catch (Exception e) {\n           // ignore\n        }\n\n        Connection connection = null;\n        try {\n            if (dbUtil != null) {\n                connection = dbUtil.getConnection();\n            }\n        } catch (Throwable e) {\n            // ignore\n        }\n\n        while (connection == null) {\n            try {\n                Thread.sleep(1000);\n                try {\n                    if (dbUtil != null) {\n                        connection = dbUtil.getConnection();\n                    }\n                } catch (SQLException e) {\n                    // ignore\n                }\n            } catch (InterruptedException e) {\n                // ignore\n            }\n        }\n\n    }\n\n    public static void executeSQL(String sql) throws Exception {\n        DBUtil dbUtil = new DBUtil(getJDBCUrl(), getUserName(), getPassword(), getDriver());\n        dbUtil.executeSQL(sql);\n    }\n\n    public DBUtil getDbUtil () throws Exception {\n        return new DBUtil(getJDBCUrl(), getUserName(), getPassword(), getDriver());\n\n    }\n\n    public Connection getConnection() throws Exception {\n\n        DBUtil dbUtil =  getDbUtil ();\n        Connection connection = dbUtil.getConnection();\n        connection.setAutoCommit(true);\n        return connection;\n\n    }\n\n}<fim_middle>// class below has no smell\n"}