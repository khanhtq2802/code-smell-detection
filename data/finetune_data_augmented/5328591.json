{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.nifi.controller.repository;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Encapsulates the status of the processor data transfers as stored in the repository.\n */\npublic class StandardRepositoryStatusReport implements RepositoryStatusReport {\n\n    public StandardRepositoryStatusReport() {\n    }\n\n    /**\n     * Returns a map where the key is the processor ID and the value is the status entry for the processor.\n     *\n     * @return a map of report entries\n     */\n<fim_suffix>    @Override\n    public Map<String, FlowFileEvent> getReportEntries() {\n        return Collections.unmodifiableMap(entries);\n    }\n\n    /**\n     * Returns a particular entry for a given processor ID. If the processor ID does not exist, then null is returned.\n     *\n     * @param componentId the ID of a component; that component may be a Processor, a Connection, a ProcessGroup, etc.\n     *\n     * @return a status entry\n     */\n    @Override\n    public FlowFileEvent getReportEntry(final String componentId) {\n        return entries.get(componentId);\n    }\n\n    /**\n     * Adds an entry to the report.\n     *\n     * @param entry an entry\n     * @param componentId the id of the component that the entry belongs to\n     */\n    @Override\n    public void addReportEntry(FlowFileEvent entry, final String componentId) {\n        if (entry == null) {\n            throw new NullPointerException(\"report entry may not be null\");\n        }\n        this.entries.put(componentId, entry);\n    }\n\n    @Override\n    public String toString() {\n        final StringBuilder strb = new StringBuilder();\n        for (final String key : this.entries.keySet()) {\n            final FlowFileEvent entry = this.entries.get(key);\n            strb.append(\"[\")\n                    .append(key).append(\", \")\n                    .append(entry.getFlowFilesIn()).append(\", \")\n                    .append(entry.getContentSizeIn()).append(\", \")\n                    .append(entry.getFlowFilesOut()).append(\", \")\n                    .append(entry.getContentSizeOut()).append(\", \")\n                    .append(entry.getBytesRead()).append(\", \")\n                    .append(entry.getBytesWritten()).append(\"]\\n\");\n        }\n        return strb.toString();\n    }\n\n    private final Map<String, FlowFileEvent> entries = new HashMap<>();\n}<fim_middle>// function below has no smell\n"}