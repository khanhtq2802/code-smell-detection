{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.http.common;\n\nimport org.apache.camel.Exchange;\n\n<fim_suffix>public class HttpRestHeaderFilterStrategy extends HttpHeaderFilterStrategy {\n\n    private final String templateUri;\n    private final String queryParameters;\n\n    public HttpRestHeaderFilterStrategy(String templateUri, String queryParameters) {\n        super();\n        this.templateUri = templateUri;\n        this.queryParameters = queryParameters;\n    }\n\n    @Override\n    public boolean applyFilterToCamelHeaders(String headerName, Object headerValue, Exchange exchange) {\n        boolean answer = super.applyFilterToCamelHeaders(headerName, headerValue, exchange);\n        // using rest producer then headers are mapping to uri and query parameters using {key} syntax\n        // if there is a match to an existing Camel Message header, then we should filter (=true) this\n        // header as its already been mapped by the RestProducer from camel-core, and we do not want\n        // the header to included as HTTP header also (eg as duplicate value)\n        if (!answer) {\n            if (templateUri != null) {\n                String token = \"{\" + headerName + \"}\";\n                if (templateUri.contains(token)) {\n                    answer = true;\n                }\n            }\n            if (!answer && queryParameters != null) {\n                String token = \"=%7B\" + headerName + \"%7D\"; // encoded values for { }\n                if (queryParameters.contains(token)) {\n                    answer = true;\n                }\n            }\n        }\n        return answer;\n    }\n\n}<fim_middle>// class below has no smell\n"}