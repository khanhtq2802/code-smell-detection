{"text": "<fim_prefix>/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n */\n\npackage com.microsoft.azure.maven.function;\n\nimport com.microsoft.azure.maven.function.handlers.CommandHandler;\nimport com.microsoft.azure.maven.function.handlers.CommandHandlerImpl;\nimport com.microsoft.azure.maven.function.utils.CommandUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugins.annotations.Mojo;\nimport org.apache.maven.plugins.annotations.Parameter;\n\nimport java.io.File;\n\n/**\n * Run Azure Java Functions locally. Azure Functions Core Tools is required to be installed first.\n */\n@Mojo(name = \"run\")\npublic class RunMojo extends AbstractFunctionMojo {\n    public static final String STAGE_DIR_FOUND = \"Azure Function App's staging directory found at: \";\n    public static final String STAGE_DIR_NOT_FOUND =\n            \"Stage directory not found. Please run mvn package first.\";\n    public static final String RUNTIME_FOUND = \"Azure Functions Core Tools found.\";\n    public static final String RUNTIME_NOT_FOUND = \"Azure Functions Core Tools not found. \" +\n            \"Please go to https://aka.ms/azfunc-install to install Azure Functions Core Tools first.\";\n    public static final String RUN_FUNCTIONS_FAILURE = \"Failed to run Azure Functions. Please checkout console output.\";\n    \n    public static final String FUNC_HOST_START_CMD = \"func host start\";\n    public static final String FUNC_HOST_START_WITH_DEBUG_CMD = \"func host start --language-worker -- \" +\n            \"\\\"-agentlib:jdwp=%s\\\"\";\n    public static final String FUNC_CMD = \"func\";\n\n    /**\n     * Config String for local debug\n     *\n     * @since 1.0.0-beta-7\n     */\n    @Parameter(property = \"localDebugConfig\", defaultValue = \"transport=dt_socket,server=y,suspend=n,address=5005\")\n    protected String localDebugConfig;\n\n    //region Getter\n\n    public String getLocalDebugConfig() {\n        return localDebugConfig;\n    }\n\n    public void setLocalDebugConfig(String localDebugConfig) {\n        this.localDebugConfig = localDebugConfig;\n    }\n\n    //endregion\n\n    //region Entry Point\n\n    @Override\n    protected void doExecute() throws Exception {\n        final CommandHandler commandHandler = new CommandHandlerImpl(this.getLog());\n\n        checkStageDirectoryExistence();\n\n        checkRuntimeExistence(commandHandler);\n\n        runFunctions(commandHandler);\n    }\n\n    protected void checkStageDirectoryExistence() throws Exception {\n        final File file = new File(getDeploymentStagingDirectoryPath());\n        if (!file.exists() || !file.isDirectory()) {\n            throw new MojoExecutionException(STAGE_DIR_NOT_FOUND);\n        }\n        info(STAGE_DIR_FOUND + getDeploymentStagingDirectoryPath());\n    }\n\n    protected void checkRuntimeExistence(final CommandHandler handler) throws Exception {\n        handler.runCommandWithReturnCodeCheck(\n                getCheckRuntimeCommand(),\n                false, /* showStdout */\n                null, /* workingDirectory */\n                CommandUtils.getDefaultValidReturnCodes(),\n                RUNTIME_NOT_FOUND\n        );\n        info(RUNTIME_FOUND);\n    }\n\n<fim_suffix>    protected void runFunctions(final CommandHandler handler) throws Exception {        \n        handler.runCommandWithReturnCodeCheck(\n                getStartFunctionHostCommand(),\n                true, /* showStdout */\n                getDeploymentStagingDirectoryPath(),\n                CommandUtils.getValidReturnCodes(),\n                RUN_FUNCTIONS_FAILURE\n        );\n    }\n\n    //endregion\n\n    //region Build commands\n\n    protected String getCheckRuntimeCommand() {\n        return FUNC_CMD;\n    }\n\n    protected String getStartFunctionHostCommand() {\n        final String enableDebug = System.getProperty(\"enableDebug\");\n        if (StringUtils.isNotEmpty(enableDebug) && enableDebug.equalsIgnoreCase(\"true\")) {\n            return getStartFunctionHostWithDebugCommand();\n        } else {\n            return FUNC_HOST_START_CMD;\n        }\n    }\n\n    protected String getStartFunctionHostWithDebugCommand() {\n        final String localDebugConfig = this.getLocalDebugConfig();\n        return String.format(FUNC_HOST_START_WITH_DEBUG_CMD, localDebugConfig);\n    }\n\n    //endregion\n}<fim_middle>// function below has no smell\n"}