{"text": "<fim_prefix>/*\n *\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\npackage org.apache.royale.compiler.config;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.royale.compiler.filespecs.IFileSpecification;\n\n/**\n * The runtime RSL settings for a given library. The specified library will \n * have all of its symbols removed from the application. The runtime RSL\n * settings are written in the root class of the application and read in \n * frame1 of application.\n */\n<fim_suffix>public class RSLSettings\n{\n    /**\n     * A RSL URL and a policy file URL.\n     */\n    public static class RSLAndPolicyFileURLPair\n    {\n        /**\n         * Create a new RSL URL and Policy File URL pair.\n         * \n         * @param rslURL THe URL of the runtime shared library.\n         * @param policyFileURL The URL of the policy file.\n         */\n        public RSLAndPolicyFileURLPair(String rslURL, String policyFileURL)\n        {\n            this.rslURL = rslURL;\n            this.policyFileURL = policyFileURL;\n        }\n\n        private String rslURL;\n        private String policyFileURL;\n        \n        /**\n         * @return the url of the RSL to load.\n         */\n        public String getRSLURL()\n        {\n            return rslURL;\n        }\n\n        /**\n         * @return the url of the policy file.\n         */\n        public String getPolicyFileURL()\n        {\n            return policyFileURL;\n        }\n    }\n\n    /**\n     * The extension given to a signed RLS that is assumed to be signed.\n     * Unsigned RSLs should use the standard \"swf\" extension.\n     */\n    private static final String SIGNED_RSL_URL_EXTENSION = \"swz\";\n    private static final String SIGNED_RSL_URL_DOT_EXTENSION = \".\" + SIGNED_RSL_URL_EXTENSION;\n    \n    /**\n     * Test if the url is a signed RSL. Signed RSL have a .swz extension.\n     * \n     * @param url url to test, the file specified by the url does not \n     *            need to exist.\n     * @return true if the url specifies a signed rsl, false otherwise.\n     */\n    public static boolean isSignedRSL(String url)\n    {\n        if (url == null)\n            return false;\n        \n        return url.endsWith(SIGNED_RSL_URL_DOT_EXTENSION);\n    }\n\n    /**\n     * Create RSLSettings with:\n     *  - a default {@link ApplicationDomainTarget}\n     *  - verify digest set to true \n     *  \n     *  @param libraryFile the library whose classes will be removed\n     *  from the application. May not be null.\n     *  @throws NullPointerException if libraryFile is null.\n     */\n    RSLSettings(IFileSpecification libraryFile)\n    {\n        if (libraryFile == null)\n            throw new NullPointerException(\"libraryFile may not be null\");\n        \n        this.libraryFile = new File(libraryFile.getPath());\n        rslURLs = new ArrayList<RSLAndPolicyFileURLPair>();\n        setApplicationDomain(ApplicationDomainTarget.DEFAULT);\n        setVerifyDigest(true);\n    }\n\n    /**\n     * Create RSLSettings with:\n     *  - a default {@link ApplicationDomainTarget}\n     *  - verify digest set to true \n     *  \n     *  @param libraryFile the library whose classes will be removed\n     *  from the application. May not be null.\n     *  @throws NullPointerException if libraryFile is null.\n     */\n    public RSLSettings(File libraryFile)\n    {\n        if (libraryFile == null)\n            throw new NullPointerException(\"libraryFile may not be null\");\n        \n        this.libraryFile = libraryFile;\n        rslURLs = new ArrayList<RSLAndPolicyFileURLPair>();\n        setApplicationDomain(ApplicationDomainTarget.DEFAULT);\n        setVerifyDigest(true);\n    }\n\n    private File libraryFile;   // the library whose definitions are externed\n    private List<RSLAndPolicyFileURLPair> rslURLs; // list of rsls and failovers\n    private ApplicationDomainTarget applicationDomain;  \n    private boolean verifyDigest;   // if true the digest will be verified at runtime\n    private boolean forceLoad;      // true if the RSL should be forced to load regardless of its use\n    \n    /**\n     * @return true if the RSL should be force loaded, false otherwise.\n     */\n    public boolean isForceLoad()\n    {\n        return forceLoad;\n    }\n\n    /**\n     * Sets a flag on the RSL so the compiler is not allowed to remove it when\n     * the \"remove unused RSLs\" feature is on. \n     * \n     * @param forceLoad true to force the RSL to be loaded at runtime, false otherwise.\n     */\n    public void setForceLoad(boolean forceLoad)\n    {\n        this.forceLoad = forceLoad;\n    }\n\n    /**\n     * @return a List of {@link RSLAndPolicyFileURLPair}\n     */\n    public List<RSLAndPolicyFileURLPair> getRSLURLs()\n    {\n        return rslURLs;\n    }\n\n    /**\n     * Add a new RSL URL and Policy file URL. This first pair is the primary\n     * RSL and the following RSLs are failover RSLs.\n     * \n     * @param rslURL A String representing the URL to load the RSL from. May\n     * not be null. \n     * @param policyFileURL A String representing the URL to load a policy file\n     * from. This is optional and may be null to indicate there is no policy \n     * file.\n     * @throws NullPointerException if rslURL is null.\n     */\n    public void addRSLURLAndPolicyFileURL(String rslURL, String policyFileURL)\n    {\n       if (rslURL == null)\n           throw new NullPointerException(\"rslURL may not be null\");\n       \n       rslURLs.add(new RSLAndPolicyFileURLPair(rslURL, policyFileURL)); \n    }\n    \n    /**\n     * @return the libraryFile\n     */\n    public File getLibraryFile()\n    {\n        return libraryFile;\n    }\n\n    /**\n     * @param applicationDomain the new value of the applicationDomain.\n     */\n    public void setApplicationDomain(ApplicationDomainTarget applicationDomain)\n    {\n        this.applicationDomain = applicationDomain;\n    }\n\n    /**\n     * One of {@link ApplicationDomainTarget} that control which domain an RSL\n     * is loaded into.\n     * \n     * @return the applicationDomain\n     */\n    public ApplicationDomainTarget getApplicationDomain()\n    {\n        return applicationDomain;\n    }\n\n    /**\n     * Change the value of the verify digests flag.\n     * \n     * @param verifyDigest The new value of the verify digests flag.\n     */\n    public void setVerifyDigest(boolean verifyDigest)\n    {\n        this.verifyDigest = verifyDigest;\n    }\n\n    /**\n     * @return if true, the RSL's digest must be verified at runtime.\n     */\n    public boolean getVerifyDigest()\n    {\n        return verifyDigest;\n    }\n    \n    \n}<fim_middle>// class below is blob\n"}