{"text": "<fim_prefix>/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.web.reactive.function.server;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.function.Consumer;\n\nimport org.springframework.http.codec.HttpMessageReader;\nimport org.springframework.http.codec.HttpMessageWriter;\nimport org.springframework.http.codec.ServerCodecConfigurer;\nimport org.springframework.util.Assert;\nimport org.springframework.web.reactive.handler.WebFluxResponseStatusExceptionHandler;\nimport org.springframework.web.reactive.result.view.ViewResolver;\nimport org.springframework.web.server.WebExceptionHandler;\nimport org.springframework.web.server.WebFilter;\nimport org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver;\nimport org.springframework.web.server.i18n.LocaleContextResolver;\n\n/**\n * Default implementation of {@link HandlerStrategies.Builder}.\n *\n * @author Arjen Poutsma\n * @since 5.0\n */\nclass DefaultHandlerStrategiesBuilder implements HandlerStrategies.Builder {\n\n\tprivate final ServerCodecConfigurer codecConfigurer = ServerCodecConfigurer.create();\n\n\tprivate final List<ViewResolver> viewResolvers = new ArrayList<>();\n\n\tprivate final List<WebFilter> webFilters = new ArrayList<>();\n\n\tprivate final List<WebExceptionHandler> exceptionHandlers = new ArrayList<>();\n\n\tprivate LocaleContextResolver localeContextResolver = new AcceptHeaderLocaleContextResolver();\n\n\n\tpublic DefaultHandlerStrategiesBuilder() {\n\t\tthis.codecConfigurer.registerDefaults(false);\n\t}\n\n\n\tpublic void defaultConfiguration() {\n\t\tthis.codecConfigurer.registerDefaults(true);\n\t\tthis.exceptionHandlers.add(new WebFluxResponseStatusExceptionHandler());\n\t\tthis.localeContextResolver = new AcceptHeaderLocaleContextResolver();\n\t}\n\n\t@Override\n\tpublic HandlerStrategies.Builder codecs(Consumer<ServerCodecConfigurer> consumer) {\n\t\tconsumer.accept(this.codecConfigurer);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic HandlerStrategies.Builder viewResolver(ViewResolver viewResolver) {\n\t\tAssert.notNull(viewResolver, \"ViewResolver must not be null\");\n\t\tthis.viewResolvers.add(viewResolver);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic HandlerStrategies.Builder webFilter(WebFilter filter) {\n\t\tAssert.notNull(filter, \"WebFilter must not be null\");\n\t\tthis.webFilters.add(filter);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic HandlerStrategies.Builder exceptionHandler(WebExceptionHandler exceptionHandler) {\n\t\tAssert.notNull(exceptionHandler, \"WebExceptionHandler must not be null\");\n\t\tthis.exceptionHandlers.add(exceptionHandler);\n\t\treturn this;\n\t}\n\n<fim_suffix>\t@Override\n\tpublic HandlerStrategies.Builder localeContextResolver(LocaleContextResolver localeContextResolver) {\n\t\tAssert.notNull(localeContextResolver, \"LocaleContextResolver must not be null\");\n\t\tthis.localeContextResolver = localeContextResolver;\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic HandlerStrategies build() {\n\t\treturn new DefaultHandlerStrategies(this.codecConfigurer.getReaders(),\n\t\t\t\tthis.codecConfigurer.getWriters(), this.viewResolvers, this.webFilters,\n\t\t\t\tthis.exceptionHandlers, this.localeContextResolver);\n\t}\n\n\n\tprivate static class DefaultHandlerStrategies implements HandlerStrategies {\n\n\t\tprivate final List<HttpMessageReader<?>> messageReaders;\n\n\t\tprivate final List<HttpMessageWriter<?>> messageWriters;\n\n\t\tprivate final List<ViewResolver> viewResolvers;\n\n\t\tprivate final List<WebFilter> webFilters;\n\n\t\tprivate final List<WebExceptionHandler> exceptionHandlers;\n\n\t\tprivate final LocaleContextResolver localeContextResolver;\n\n\t\tpublic DefaultHandlerStrategies(\n\t\t\t\tList<HttpMessageReader<?>> messageReaders,\n\t\t\t\tList<HttpMessageWriter<?>> messageWriters,\n\t\t\t\tList<ViewResolver> viewResolvers,\n\t\t\t\tList<WebFilter> webFilters,\n\t\t\t\tList<WebExceptionHandler> exceptionHandlers,\n\t\t\t\tLocaleContextResolver localeContextResolver) {\n\n\t\t\tthis.messageReaders = unmodifiableCopy(messageReaders);\n\t\t\tthis.messageWriters = unmodifiableCopy(messageWriters);\n\t\t\tthis.viewResolvers = unmodifiableCopy(viewResolvers);\n\t\t\tthis.webFilters = unmodifiableCopy(webFilters);\n\t\t\tthis.exceptionHandlers = unmodifiableCopy(exceptionHandlers);\n\t\t\tthis.localeContextResolver = localeContextResolver;\n\t\t}\n\n\t\tprivate static <T> List<T> unmodifiableCopy(List<? extends T> list) {\n\t\t\treturn Collections.unmodifiableList(new ArrayList<>(list));\n\t\t}\n\n\t\t@Override\n\t\tpublic List<HttpMessageReader<?>> messageReaders() {\n\t\t\treturn this.messageReaders;\n\t\t}\n\n\t\t@Override\n\t\tpublic List<HttpMessageWriter<?>> messageWriters() {\n\t\t\treturn this.messageWriters;\n\t\t}\n\n\t\t@Override\n\t\tpublic List<ViewResolver> viewResolvers() {\n\t\t\treturn this.viewResolvers;\n\t\t}\n\n\t\t@Override\n\t\tpublic List<WebFilter> webFilters() {\n\t\t\treturn this.webFilters;\n\t\t}\n\n\t\t@Override\n\t\tpublic List<WebExceptionHandler> exceptionHandlers() {\n\t\t\treturn this.exceptionHandlers;\n\t\t}\n\n\t\t@Override\n\t\tpublic LocaleContextResolver localeContextResolver() {\n\t\t\treturn this.localeContextResolver;\n\t\t}\n\t}\n\n}<fim_middle>// function below has no smell\n"}