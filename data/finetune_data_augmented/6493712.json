{"text": "<fim_prefix>import org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.FocusAdapter;\nimport org.eclipse.swt.events.FocusEvent;\nimport org.eclipse.swt.events.KeyAdapter;\nimport org.eclipse.swt.events.KeyEvent;\nimport org.eclipse.swt.events.ModifyEvent;\nimport org.eclipse.swt.events.ModifyListener;\nimport org.eclipse.swt.events.MouseAdapter;\nimport org.eclipse.swt.events.MouseEvent;\nimport org.eclipse.swt.events.SelectionAdapter;\nimport org.eclipse.swt.events.SelectionEvent;\nimport org.eclipse.swt.widgets.Button;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Control;\nimport org.eclipse.swt.widgets.FileDialog;\nimport org.eclipse.swt.widgets.Text;\n/**\n * Cell editor that combines functionality of DialogCellEditor and TextCellEditor\n * @author rawagner\n *\n */\n<fim_suffix>public class DialogTextEditor extends DialogCellEditor{\n\t /**\n     * State information for updating action enablement\n     */\n    private boolean isSelection = false;\n    private boolean isDeleteable = false;\n    private boolean isSelectable = false;\n    private ModifyListener modifyListener;\n\tprivate Text text;\n\tpublic DialogTextEditor(Composite parent) {\n\t\tsuper(parent);\n\t}\n\t@Override\n\tprotected Object openDialogBox(Control cellEditorWindow) {\n\t\tFileDialog dialog = new FileDialog(cellEditorWindow.getShell(), SWT.OPEN);\n\t\treturn dialog.open();\n\t}\n\t@Override\n    protected Button createButton(Composite parent) {\n           Button button = super.createButton(parent);\n           button.setText(\"Browse...\");\n           return button;\n    }\n\t@Override\n\tprotected Control createContents(Composite cell) {\n\t\ttext = new Text(cell, getStyle());\n        text.addSelectionListener(new SelectionAdapter() {\n            @Override\n\t\t\tpublic void widgetDefaultSelected(SelectionEvent e) {\n                handleDefaultSelection(e);\n            }\n        });\n        text.addKeyListener(new KeyAdapter() {\n            // hook key pressed - see PR 14201\n            @Override\n\t\t\tpublic void keyPressed(KeyEvent e) {\n                keyReleaseOccured(e);\n                // as a result of processing the above call, clients may have\n                // disposed this cell editor\n                if ((getControl() == null) || getControl().isDisposed()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n                checkSelection(); // see explanation below\n                checkDeleteable();\n                checkSelectable();\n            }\n        });\n        text.addTraverseListener(e -> {\n\t\t    if (e.detail == SWT.TRAVERSE_ESCAPE\n\t\t            || e.detail == SWT.TRAVERSE_RETURN) {\n\t\t        e.doit = false;\n\t\t    }\n\t\t});\n        // We really want a selection listener but it is not supported so we\n        // use a key listener and a mouse listener to know when selection changes\n        // may have occurred\n        text.addMouseListener(new MouseAdapter() {\n            @Override\n\t\t\tpublic void mouseUp(MouseEvent e) {\n                checkSelection();\n                checkDeleteable();\n                checkSelectable();\n            }\n        });\n        text.addFocusListener(new FocusAdapter() {\n            @Override\n\t\t\tpublic void focusLost(FocusEvent e) {\n            \tdoSetValue(text.getText());\n            }\n        });\n        text.setFont(cell.getFont());\n        text.setBackground(cell.getBackground());\n        text.setText(\"\");//$NON-NLS-1$\n        text.addModifyListener(getModifyListener());\n        return text;\n\t}\n\t@Override\n\tprotected void doSetFocus() {\n        if (text != null) {\n            text.selectAll();\n            text.setFocus();\n            checkSelection();\n            checkDeleteable();\n            checkSelectable();\n        }\n    }\n\t/**\n     * Checks to see if the selection state (selection /\n     * no selection) has changed and if so fire an\n     * enablement changed notification.\n     */\n    private void checkSelection() {\n        boolean oldIsSelection = isSelection;\n        isSelection = text.getSelectionCount() > 0;\n        if (oldIsSelection != isSelection) {\n            fireEnablementChanged(COPY);\n            fireEnablementChanged(CUT);\n        }\n    }\n    /**\n     * Checks to see if the \"deletable\" state (can delete/\n     * nothing to delete) has changed and if so fire an\n     * enablement changed notification.\n     */\n    private void checkDeleteable() {\n        boolean oldIsDeleteable = isDeleteable;\n        isDeleteable = isDeleteEnabled();\n        if (oldIsDeleteable != isDeleteable) {\n            fireEnablementChanged(DELETE);\n        }\n    }\n    /**\n     * Checks to see if the \"selectable\" state (can select)\n     * has changed and if so fire an enablement changed notification.\n     */\n    private void checkSelectable() {\n        boolean oldIsSelectable = isSelectable;\n        isSelectable = isSelectAllEnabled();\n        if (oldIsSelectable != isSelectable) {\n            fireEnablementChanged(SELECT_ALL);\n        }\n    }\n    /**\n     * Handles a default selection event from the text control by applying the editor\n     * value and deactivating this cell editor.\n     *\n     * @param event the selection event\n     *\n     * @since 3.0\n     */\n    protected void handleDefaultSelection(SelectionEvent event) {\n        // same with enter-key handling code in keyReleaseOccured(e);\n        fireApplyEditorValue();\n        deactivate();\n    }\n    /**\n     * Return the modify listener.\n     */\n    private ModifyListener getModifyListener() {\n        if (modifyListener == null) {\n\t\t\tmodifyListener = this::editOccured;\n        }\n        return modifyListener;\n    }\n    /**\n     * Processes a modify event that occurred in this text cell editor.\n     * This framework method performs validation and sets the error message\n     * accordingly, and then reports a change via <code>fireEditorValueChanged</code>.\n     * Subclasses should call this method at appropriate times. Subclasses\n     * may extend or reimplement.\n     *\n     * @param e the SWT modify event\n     */\n    protected void editOccured(ModifyEvent e) {\n        String value = text.getText();\n        if (value == null) {\n\t\t\tvalue = \"\";//$NON-NLS-1$\n\t\t}\n        Object typedValue = value;\n        boolean oldValidState = isValueValid();\n        boolean newValidState = isCorrect(typedValue);\n        if (!newValidState) {\n            // try to insert the current value into the error message.\n            setErrorMessage(MessageFormat.format(getErrorMessage(),\n                    new Object[] { value }));\n        }\n        valueChanged(oldValidState, newValidState);\n    }\n    /**\n     * Processes a key release event that occurred in this cell editor.\n     * <p>\n     * The <code>TextCellEditor</code> implementation of this framework method\n     * ignores when the RETURN key is pressed since this is handled in\n     * <code>handleDefaultSelection</code>.\n     * An exception is made for Ctrl+Enter for multi-line texts, since\n     * a default selection event is not sent in this case.\n     * </p>\n     *\n     * @param keyEvent the key event\n     */\n    @Override\n\tprotected void keyReleaseOccured(KeyEvent keyEvent) {\n        if (keyEvent.character == '\\r') { // Return key\n            // Enter is handled in handleDefaultSelection.\n            // Do not apply the editor value in response to an Enter key event\n            // since this can be received from the IME when the intent is -not-\n            // to apply the value.\n            // See bug 39074 [CellEditors] [DBCS] canna input mode fires bogus event from Text Control\n            //\n            // An exception is made for Ctrl+Enter for multi-line texts, since\n            // a default selection event is not sent in this case.\n            if (text != null && !text.isDisposed()\n                    && (text.getStyle() & SWT.MULTI) != 0) {\n                if ((keyEvent.stateMask & SWT.CTRL) != 0) {\n                    super.keyReleaseOccured(keyEvent);\n                }\n            }\n            return;\n        }\n        super.keyReleaseOccured(keyEvent);\n    }\n    /**\n     * Updates the controls showing the value of this cell editor.\n     * <p>\n     * The default implementation of this framework method just converts\n     * the passed object to a string using <code>toString</code> and\n     * sets this as the text of the label widget.\n     * </p>\n     * <p>\n     * Subclasses may reimplement.  If you reimplement this method, you\n     * should also reimplement <code>createContents</code>.\n     * </p>\n     *\n     * @param value the new value of this cell editor\n     */\n    protected void updateContents(Object value) {\n        if (text == null) {\n\t\t\treturn;\n\t\t}\n        String val = \"\";//$NON-NLS-1$\n        if (value != null) {\n\t\t\tval = value.toString();\n\t\t}\n        text.setText(val);\n        Assert.isTrue(text != null && (val instanceof String));\n        text.removeModifyListener(getModifyListener());\n        text.setText((String) val);\n        text.addModifyListener(getModifyListener());\n    }\n}<fim_middle>// class below has no smell\n"}