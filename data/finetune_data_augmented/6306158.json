{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2017 Sierra Wireless and others.\n * \n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n * \n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *    http://www.eclipse.org/org/documents/edl-v10.html.\n * \n * Contributors:\n *     Sierra Wireless - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.leshan.server.californium;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.eclipse.californium.core.coap.Request;\nimport org.eclipse.leshan.core.node.LwM2mPath;\nimport org.eclipse.leshan.core.observation.Observation;\nimport org.eclipse.leshan.core.request.ContentFormat;\nimport org.eclipse.leshan.core.request.ObserveRequest;\n\n/**\n * Utility functions to help to handle observation in Leshan. Those helper functions are only needed if you're\n * implementing your own {@link CaliforniumRegistrationStore}.\n */\n<fim_suffix>public class ObserveUtil {\n\n    /* keys used to populate the request context */\n    public static final String CTX_ENDPOINT = \"leshan-endpoint\";\n    public static final String CTX_REGID = \"leshan-regId\";\n    public static final String CTX_LWM2M_PATH = \"leshan-path\";\n\n    /**\n     * Create a LWM2M observation from a CoAP request.\n     */\n    public static Observation createLwM2mObservation(Request request) {\n        String regId = null;\n        String lwm2mPath = null;\n        Map<String, String> context = null;\n\n        for (Entry<String, String> ctx : request.getUserContext().entrySet()) {\n            switch (ctx.getKey()) {\n            case CTX_REGID:\n                regId = ctx.getValue();\n                break;\n            case CTX_LWM2M_PATH:\n                lwm2mPath = ctx.getValue();\n                break;\n            case CTX_ENDPOINT:\n                break;\n            default:\n                if (context == null) {\n                    context = new HashMap<>();\n                }\n                context.put(ctx.getKey(), ctx.getValue());\n            }\n        }\n\n        ContentFormat contentFormat = null;\n        if (request.getOptions().hasAccept()) {\n            contentFormat = ContentFormat.fromCode(request.getOptions().getAccept());\n        }\n        return new Observation(request.getToken().getBytes(), regId, new LwM2mPath(lwm2mPath), contentFormat, context);\n    }\n\n    /**\n     * Create a CoAP observe request context with specific keys needed for internal Leshan working.\n     */\n    public static Map<String, String> createCoapObserveRequestContext(String endpoint, String registrationId,\n            ObserveRequest request) {\n        Map<String, String> context = new HashMap<>();\n        context.put(CTX_ENDPOINT, endpoint);\n        context.put(CTX_REGID, registrationId);\n        context.put(CTX_LWM2M_PATH, request.getPath().toString());\n        for (Entry<String, String> ctx : request.getContext().entrySet()) {\n            context.put(ctx.getKey(), ctx.getValue());\n        }\n        return context;\n    }\n\n    public static String extractRegistrationId(org.eclipse.californium.core.observe.Observation observation) {\n        return observation.getRequest().getUserContext().get(CTX_REGID);\n    }\n\n    public static String extractLwm2mPath(org.eclipse.californium.core.observe.Observation observation) {\n        return observation.getRequest().getUserContext().get(CTX_LWM2M_PATH);\n    }\n\n    public static String extractEndpoint(org.eclipse.californium.core.observe.Observation observation) {\n        return observation.getRequest().getUserContext().get(CTX_ENDPOINT);\n    }\n\n    /**\n     * Validate the Californium observation. It is valid if it contains all necessary context for Leshan.\n     */\n    public static String validateCoapObservation(org.eclipse.californium.core.observe.Observation observation) {\n        if (!observation.getRequest().getUserContext().containsKey(CTX_REGID))\n            throw new IllegalStateException(\"missing registrationId info in the request context\");\n        if (!observation.getRequest().getUserContext().containsKey(CTX_LWM2M_PATH))\n            throw new IllegalStateException(\"missing lwm2m path info in the request context\");\n\n        String endpoint = observation.getRequest().getUserContext().get(CTX_ENDPOINT);\n        if (endpoint == null)\n            throw new IllegalStateException(\"missing endpoint info in the request context\");\n\n        return endpoint;\n    }\n}<fim_middle>// class below is blob\n"}