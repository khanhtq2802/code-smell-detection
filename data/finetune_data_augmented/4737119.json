{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage hivemall.tools.math;\n\nimport org.apache.hadoop.hive.ql.exec.Description;\nimport org.apache.hadoop.hive.ql.exec.UDAF;\nimport org.apache.hadoop.hive.ql.exec.UDAFEvaluator;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.io.DoubleWritable;\n\n// @formatter:off\n@SuppressWarnings(\"deprecation\")\n@Description(name = \"l2_norm\",\n        value = \"_FUNC_(double x) - Return a L2 norm of the given input x.\",\n        extended = \"WITH input as (\\n\" + \n                \"  select generate_series(1,3) as v\\n\" + \n                \")\\n\" + \n                \"select l2_norm(v) as l2norm\\n\" + \n                \"from input;\\n\" + \n                \"> 3.7416573867739413 = sqrt(1^2+2^2+3^2))\")\n// @formatter:on\npublic final class L2NormUDAF extends UDAF {\n\n    public static class Evaluator implements UDAFEvaluator {\n\n        private PartialResult partial;\n\n        public Evaluator() {}\n\n        @Override\n        public void init() {\n            this.partial = null;\n        }\n\n<fim_suffix>        public boolean iterate(DoubleWritable xi) throws HiveException {\n            if (xi == null) {// skip\n                return true;\n            }\n            if (partial == null) {\n                this.partial = new PartialResult();\n            }\n            partial.iterate(xi.get());\n            return true;\n        }\n\n        public PartialResult terminatePartial() {\n            return partial;\n        }\n\n        public boolean merge(PartialResult other) throws HiveException {\n            if (other == null) {\n                return true;\n            }\n            if (partial == null) {\n                this.partial = new PartialResult();\n            }\n            partial.merge(other);\n            return true;\n        }\n\n        public double terminate() {\n            if (partial == null) {\n                return 0.d;\n            }\n            return partial.get();\n        }\n    }\n\n    public static class PartialResult {\n\n        double squaredSum;\n\n        PartialResult() {\n            this.squaredSum = 0.d;\n        }\n\n        void iterate(double xi) {\n            squaredSum += xi * xi;\n        }\n\n        void merge(PartialResult other) {\n            squaredSum += other.squaredSum;\n        }\n\n        double get() {\n            return Math.sqrt(squaredSum);\n        }\n\n    }\n\n}<fim_middle>// function below has no smell\n"}