{"text": "<fim_prefix>import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;\nimport com.google.android.exoplayer2.trackselection.DefaultTrackSelector.Parameters;\nimport com.google.android.exoplayer2.util.ConditionVariable;\nimport com.google.android.exoplayer2.util.HandlerWrapper;\nimport com.google.android.exoplayer2.util.Log;\n/**\n * Base class for actions to perform during playback tests.\n */\npublic abstract class Action {\n  private final String tag;\n  private final @Nullable String description;\n  /**\n   * @param tag A tag to use for logging.\n   * @param description A description to be logged when the action is executed, or null if no\n   *     logging is required.\n   */\n  public Action(String tag, @Nullable String description) {\n    this.tag = tag;\n    this.description = description;\n  }\n  /**\n   * Executes the action and schedules the next.\n   *\n   * @param player The player to which the action should be applied.\n   * @param trackSelector The track selector to which the action should be applied.\n   * @param surface The surface to use when applying actions.\n   * @param handler The handler to use to pass to the next action.\n   * @param nextAction The next action to schedule immediately after this action finished.\n   */\n  public final void doActionAndScheduleNext(\n      SimpleExoPlayer player,\n      DefaultTrackSelector trackSelector,\n      Surface surface,\n      HandlerWrapper handler,\n      ActionNode nextAction) {\n    if (description != null) {\n      Log.i(tag, description);\n    }\n    doActionAndScheduleNextImpl(player, trackSelector, surface, handler, nextAction);\n  }\n  /**\n   * Called by {@link #doActionAndScheduleNext(SimpleExoPlayer, DefaultTrackSelector, Surface,\n   * HandlerWrapper, ActionNode)} to perform the action and to schedule the next action node.\n   *\n   * @param player The player to which the action should be applied.\n   * @param trackSelector The track selector to which the action should be applied.\n   * @param surface The surface to use when applying actions.\n   * @param handler The handler to use to pass to the next action.\n   * @param nextAction The next action to schedule immediately after this action finished.\n   */\n  protected void doActionAndScheduleNextImpl(\n      SimpleExoPlayer player,\n      DefaultTrackSelector trackSelector,\n      Surface surface,\n      HandlerWrapper handler,\n      ActionNode nextAction) {\n    doActionImpl(player, trackSelector, surface);\n    if (nextAction != null) {\n      nextAction.schedule(player, trackSelector, surface, handler);\n    }\n  }\n  /**\n   * Called by {@link #doActionAndScheduleNextImpl(SimpleExoPlayer, DefaultTrackSelector, Surface,\n   * HandlerWrapper, ActionNode)} to perform the action.\n   *\n   * @param player The player to which the action should be applied.\n   * @param trackSelector The track selector to which the action should be applied.\n   * @param surface The surface to use when applying actions.\n   */\n  protected abstract void doActionImpl(\n      SimpleExoPlayer player, DefaultTrackSelector trackSelector, Surface surface);\n  /**\n   * Calls {@link Player#seekTo(long)} or {@link Player#seekTo(int, long)}.\n   */\n  public static final class Seek extends Action {\n    private final Integer windowIndex;\n    private final long positionMs;\n    /**\n     * Action calls {@link Player#seekTo(long)}.\n     *\n     * @param tag A tag to use for logging.\n     * @param positionMs The seek position.\n     */\n    public Seek(String tag, long positionMs) {\n      super(tag, \"Seek:\" + positionMs);\n      this.windowIndex = null;\n      this.positionMs = positionMs;\n    }\n    /**\n     * Action calls {@link Player#seekTo(int, long)}.\n     *\n     * @param tag A tag to use for logging.\n     * @param windowIndex The window to seek to.\n     * @param positionMs The seek position.\n     */\n    public Seek(String tag, int windowIndex, long positionMs) {\n      super(tag, \"Seek:\" + positionMs);\n      this.windowIndex = windowIndex;\n      this.positionMs = positionMs;\n    }\n    @Override\n    protected void doActionImpl(\n        SimpleExoPlayer player, DefaultTrackSelector trackSelector, Surface surface) {\n      if (windowIndex == null) {\n        player.seekTo(positionMs);\n      } else {\n        player.seekTo(windowIndex, positionMs);\n      }\n    }\n  }\n  /**\n   * Calls {@link Player#stop()} or {@link Player#stop(boolean)}.\n   */\n  public static final class Stop extends Action {\n    private static final String STOP_ACTION_TAG = \"Stop\";\n    private final Boolean reset;\n    /**\n     * Action will call {@link Player#stop()}.\n     *\n     * @param tag A tag to use for logging.\n     */\n    public Stop(String tag) {\n      super(tag, STOP_ACTION_TAG);\n      this.reset = null;\n    }\n    /**\n     * Action will call {@link Player#stop(boolean)}.\n     *\n     * @param tag A tag to use for logging.\n     * @param reset The value to pass to {@link Player#stop(boolean)}.\n     */\n    public Stop(String tag, boolean reset) {\n      super(tag, STOP_ACTION_TAG);\n      this.reset = reset;\n    }\n    @Override\n    protected void doActionImpl(\n        SimpleExoPlayer player, DefaultTrackSelector trackSelector, Surface surface) {\n      if (reset == null) {\n        player.stop();\n      } else {\n        player.stop(reset);\n      }\n    }\n  }\n  /**\n   * Calls {@link Player#setPlayWhenReady(boolean)}.\n   */\n  public static final class SetPlayWhenReady extends Action {\n    private final boolean playWhenReady;\n    /**\n     * @param tag A tag to use for logging.\n     * @param playWhenReady The value to pass.\n     */\n    public SetPlayWhenReady(String tag, boolean playWhenReady) {\n      super(tag, playWhenReady ? \"Play\" : \"Pause\");\n      this.playWhenReady = playWhenReady;\n    }\n    @Override\n    protected void doActionImpl(\n        SimpleExoPlayer player, DefaultTrackSelector trackSelector, Surface surface) {\n      player.setPlayWhenReady(playWhenReady);\n    }\n  }\n  /**\n   * Updates the {@link Parameters} of a {@link DefaultTrackSelector} to specify whether the\n   * renderer at a given index should be disabled.\n   */\n  public static final class SetRendererDisabled extends Action {\n    private final int rendererIndex;\n    private final boolean disabled;\n    /**\n     * @param tag A tag to use for logging.\n     * @param rendererIndex The index of the renderer.\n     * @param disabled Whether the renderer should be disabled.\n     */\n    public SetRendererDisabled(String tag, int rendererIndex, boolean disabled) {\n      super(tag, \"SetRendererDisabled:\" + rendererIndex + \":\" + disabled);\n      this.rendererIndex = rendererIndex;\n      this.disabled = disabled;\n    }\n    @Override\n    protected void doActionImpl(\n        SimpleExoPlayer player, DefaultTrackSelector trackSelector, Surface surface) {\n      trackSelector.setParameters(\n          trackSelector.buildUponParameters().setRendererDisabled(rendererIndex, disabled));\n    }\n  }\n  /**\n   * Calls {@link SimpleExoPlayer#clearVideoSurface()}.\n   */\n  public static final class ClearVideoSurface extends Action {\n    /**\n     * @param tag A tag to use for logging.\n     */\n    public ClearVideoSurface(String tag) {\n      super(tag, \"ClearVideoSurface\");\n    }\n    @Override\n    protected void doActionImpl(\n        SimpleExoPlayer player, DefaultTrackSelector trackSelector, Surface surface) {\n      player.clearVideoSurface();\n    }\n  }\n  /**\n   * Calls {@link SimpleExoPlayer#setVideoSurface(Surface)}.\n   */\n  public static final class SetVideoSurface extends Action {\n    /**\n     * @param tag A tag to use for logging.\n     */\n    public SetVideoSurface(String tag) {\n      super(tag, \"SetVideoSurface\");\n    }\n    @Override\n    protected void doActionImpl(\n        SimpleExoPlayer player, DefaultTrackSelector trackSelector, Surface surface) {\n      player.setVideoSurface(surface);\n    }\n  }\n  /**\n   * Calls {@link ExoPlayer#prepare(MediaSource)}.\n   */\n  public static final class PrepareSource extends Action {\n    private final MediaSource mediaSource;\n    private final boolean resetPosition;\n    private final boolean resetState;\n    /**\n     * @param tag A tag to use for logging.\n     */\n    public PrepareSource(String tag, MediaSource mediaSource) {\n      this(tag, mediaSource, true, true);\n    }\n    /**\n     * @param tag A tag to use for logging.\n     */\n<fim_suffix>    public PrepareSource(String tag, MediaSource mediaSource, boolean resetPosition,\n        boolean resetState) {\n      super(tag, \"PrepareSource\");\n      this.mediaSource = mediaSource;\n      this.resetPosition = resetPosition;\n      this.resetState = resetState;\n    }<fim_middle>// function below has no smell\n"}