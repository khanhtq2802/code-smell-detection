{"text": "<fim_prefix>            }\n        };\n        final HashMap<String, String> sqlStatementSignatures = new HashMap<String, String>();\n        sqlStatementSignatures.put(\"executeBatch\", \"()[I\");\n        sqlStatementSignatures.put(\"execute\", \"()Z\");\n        sqlStatementSignatures.put(\"executeUpdate\", \"()I\");\n        sqlStatementSignatures.put(\"executeQuery\", \"()Ljava/sql/ResultSet;\");\n        sqlStatementSignatures.put(\"clearParameters\", \"()V\");\n        sqlStatementSignatures.put(\"clearBatch\", \"()V\");\n        sqlStatementSignatures.put(\"addBatch\", \"()V\");\n        ClassInstrumentationData data =\n                new ClassInstrumentationData(className, InstrumentedClassType.SQL, classVisitorFactory)\n                        .setReportCaughtExceptions(false)\n                        .setReportExecutionTime(true);\n        for (Map.Entry<String, String> methodAndSignature : sqlStatementSignatures.entrySet()) {\n            data.addMethod(methodAndSignature.getKey(), methodAndSignature.getValue(), false, true, 0, methodVisitorFactory);\n        }\n        classesToInstrument.put(className, data);\n        final HashMap<String, List<String>> sqlSignatures = new HashMap<String, List<String>>();\n        ArrayList<String> signatures = new ArrayList<String>();\n        signatures.add(\"(Ljava/lang/String;)Ljava/sql/ResultSet;\");\n        sqlSignatures.put(\"executeQuery\", signatures);\n        signatures = new ArrayList<String>();\n        signatures.add(\"(Ljava/lang/String;I)I\");\n        signatures.add(\"(Ljava/lang/String;[I)I\");\n        signatures.add(\"(Ljava/lang/String;[Ljava/lang/String;)I\");\n        sqlSignatures.put(\"executeUpdate\", signatures);\n        signatures = new ArrayList<String>();\n        signatures.add(\"(Ljava/lang/String;)Z\");\n        signatures.add(\"((Ljava/lang/String;I)Z\");\n        signatures.add(\"(Ljava/lang/String;[I)Z\");\n        signatures.add(\"(Ljava/lang/String;[Ljava/lang/String;)Z\");\n        sqlSignatures.put(\"execute\", signatures);\n        for (Map.Entry<String, List<String>> methodAndSignature : sqlSignatures.entrySet()) {\n            for (String signature : methodAndSignature.getValue()) {\n                data.addMethod(methodAndSignature.getKey(), signature, false, true, 0, methodVisitorFactory);\n            }\n        }\n    }\n    private ClassVisitorFactory classFactoryForHSQLDB() {\n        ClassVisitorFactory classVisitorFactory = new ClassVisitorFactory() {\n            @Override\n            public ClassVisitor create(ClassInstrumentationData classInstrumentationData, ClassWriter classWriter) {\n                HashSet<String> ctorSignatures = new HashSet<String>();\n                ctorSignatures.add(\"(Lorg/hsqldb/jdbc/JDBCConnection;Ljava/lang/String;IIII[I[Ljava/lang/String;)V\");\n                final PreparedStatementMetaData metaData = new PreparedStatementMetaData(ctorSignatures);\n                metaData.sqlStringInCtor = 2;\n                return new PreparedStatementClassVisitor(classInstrumentationData, classWriter, metaData);\n            }\n        };\n        return classVisitorFactory;\n    }\n    private ClassVisitorFactory classFactoryForDerbyDB() {\n        ClassVisitorFactory classVisitorFactory = new ClassVisitorFactory() {\n            @Override\n            public ClassVisitor create(ClassInstrumentationData classInstrumentationData, ClassWriter classWriter) {\n                HashSet<String> ctorSignatures = new HashSet<String>();\n                ctorSignatures.add(\"(Lorg/apache/derby/client/am/Agent;Lorg/apache/derby/client/am/Connection;Ljava/lang/String;Lorg/apache/derby/client/am/Section;Lorg/apache/derby/client/ClientPooledConnection;)V\");\n                ctorSignatures.add(\"(Lorg/apache/derby/client/am/Agent;Lorg/apache/derby/client/am/Connection;Ljava/lang/String;IIII[Ljava/lang/String;[ILorg/apache/derby/client/ClientPooledConnection;)V\");\n                final PreparedStatementMetaData metaData = new PreparedStatementMetaData(ctorSignatures);\n                metaData.sqlStringInCtor = 3;\n                return new PreparedStatementClassVisitor(classInstrumentationData, classWriter, metaData);\n            }\n        };\n        return classVisitorFactory;\n    }\n    private ClassVisitorFactory classFactoryForMySql() {\n        ClassVisitorFactory classVisitorFactory = new ClassVisitorFactory() {\n            @Override\n            public ClassVisitor create(ClassInstrumentationData classInstrumentationData, ClassWriter classWriter) {\n                HashSet<String> ctorSignatures = new HashSet<String>();\n                ctorSignatures.add(\"(Lcom/mysql/jdbc/MySQLConnection;Ljava/lang/String;)V\");\n                ctorSignatures.add(\"(Lcom/mysql/jdbc/MySQLConnection;Ljava/lang/String;Ljava/lang/String;)V\");\n                final PreparedStatementMetaData metaData1 = new PreparedStatementMetaData(ctorSignatures);\n                metaData1.sqlStringInCtor = 2;\n                return new PreparedStatementClassVisitor(classInstrumentationData, classWriter, metaData1);\n            }\n        };\n        return classVisitorFactory;\n    }\n    private ClassVisitorFactory classFactoryForJdbc2PostgreSql() {\n        return new ClassVisitorFactory() {\n            @Override\n            public ClassVisitor create(ClassInstrumentationData classInstrumentationData, ClassWriter classWriter) {\n                Set<String> ctorSignatures = new HashSet<String>();\n                ctorSignatures.add(\"(Lorg/postgresql/jdbc2/AbstractJdbc2Connection;Ljava/lang/String;ZII)V\");\n                final PreparedStatementMetaData metaData1 = new PreparedStatementMetaData(ctorSignatures);\n                metaData1.sqlStringInCtor = 2;\n                return new PreparedStatementClassVisitor(classInstrumentationData, classWriter, metaData1);\n            }\n        };\n    }\n    private ClassVisitorFactory classFactoryForJdbc4PostgreSql() {\n        return new ClassVisitorFactory() {\n            @Override\n            public ClassVisitor create(ClassInstrumentationData classInstrumentationData, ClassWriter classWriter) {\n                Set<String> ctorSignatures = new HashSet<String>();\n                ctorSignatures.add(\"(Lorg/postgresql/jdbc/PgConnection;Ljava/lang/String;III)V\");\n                final PreparedStatementMetaData metaData1 = new PreparedStatementMetaData(ctorSignatures);\n                metaData1.sqlStringInCtor = 2;\n                return new PreparedStatementClassVisitor(classInstrumentationData, classWriter, metaData1);\n            }\n        };\n    }\n    private ClassVisitorFactory classFactoryForOracle() {\n        ClassVisitorFactory classVisitorFactory = new ClassVisitorFactory() {\n            @Override\n            public ClassVisitor create(ClassInstrumentationData classInstrumentationData, ClassWriter classWriter) {\n                HashSet<String> ctorSignatures = new HashSet<String>();\n                ctorSignatures.add(\"(Loracle/jdbc/driver/PhysicalConnection;Ljava/lang/String;II)V\");\n                ctorSignatures.add(\"(Loracle/jdbc/driver/PhysicalConnection;Ljava/lang/String;IIII)V\");\n                final PreparedStatementMetaData metaData1 = new PreparedStatementMetaData(ctorSignatures);\n                metaData1.sqlStringInCtor = 2;\n                return new PreparedStatementClassVisitor(classInstrumentationData, classWriter, metaData1);\n            }\n        };\n        return classVisitorFactory;\n    }\n    private ClassVisitorFactory classFactoryForSqlServer() {\n        ClassVisitorFactory classVisitorFactory = new ClassVisitorFactory() {\n            @Override\n            public ClassVisitor create(ClassInstrumentationData classInstrumentationData, ClassWriter classWriter) {\n                HashSet<String> ctorSignatures = new HashSet<String>();\n                ctorSignatures.add(\"(Lcom/microsoft/sqlserver/jdbc/SQLServerConnection;Ljava/lang/String;\" +\n                        \"IILcom/microsoft/sqlserver/jdbc/SQLServerStatementColumnEncryptionSetting;)V\");\n                final PreparedStatementMetaData metaData1 = new PreparedStatementMetaData(ctorSignatures);\n                metaData1.sqlStringInCtor = 2;\n                return new PreparedStatementClassVisitor(classInstrumentationData, classWriter, metaData1);\n            }\n        };\n        return classVisitorFactory;\n    }\n<fim_suffix>    private void addSqlite() {\n        ClassVisitorFactory classVisitorFactory = new ClassVisitorFactory() {\n            @Override\n            public ClassVisitor create(ClassInstrumentationData classInstrumentationData, ClassWriter classWriter) {\n                HashSet<String> ctorSignatures = new HashSet<String>();\n                ctorSignatures.add(\"(Lorg/sqlite/SQLiteConnection;Ljava/lang/String;)V\");\n                final PreparedStatementMetaData metaData1 = new PreparedStatementMetaData(ctorSignatures);\n                metaData1.sqlStringInCtor = 2;\n                return new PreparedStatementClassVisitor(classInstrumentationData, classWriter, metaData1);\n            }\n        };\n        String className = \"org/sqlite/core/CorePreparedStatement\";\n        ClassInstrumentationData data =\n                new ClassInstrumentationData(className, InstrumentedClassType.SQL, classVisitorFactory)\n                        .setReportCaughtExceptions(false)\n                        .setReportExecutionTime(true);\n        data.addMethod(\"executeBatch\", \"()[I\", false, true, 0, new MethodVisitorFactory() {\n            @Override\n            public MethodVisitor create(MethodInstrumentationDecision decision, int access, String desc, String owner, String methodName, MethodVisitor methodVisitor, ClassToMethodTransformationData additionalData) {\n                return new PreparedStatementMethodForExecuteBatchVisitor(access, desc, owner, methodName, methodVisitor, null);\n            }\n        });\n        classesToInstrument.put(className, data);\n        doAdd(null, \"org/sqlite/jdbc3/JDBC3PreparedStatement\");\n    }<fim_middle>// function below has no smell\n"}