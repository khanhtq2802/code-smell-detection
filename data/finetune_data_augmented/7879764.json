{"text": "<fim_prefix>/*\n * Copyright 2012-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License. You may obtain\n * a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\npackage com.facebook.buck.android;\n\nimport com.google.common.collect.ImmutableMap;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/** Parser for ProGuard-generated mapping files. Currently only handles class mapping. */\npublic class ProguardMapping {\n\n  /** Utility class: do not instantiate. */\n  private ProguardMapping() {}\n\n  private static final Pattern CLASS_LINE_PATTERN = Pattern.compile(\"([-\\\\w.$]+) -> ([-\\\\w.$]+):\");\n\n<fim_suffix>  public static ImmutableMap<String, String> readClassMapping(Iterable<String> lines) {\n    ImmutableMap.Builder<String, String> classMappingBuilder = ImmutableMap.builder();\n\n    for (String line : lines) {\n      if (line.charAt(0) == ' ') {\n        // This is a member mapping, which we don't handle yet.\n        continue;\n      }\n\n      Matcher matcher = CLASS_LINE_PATTERN.matcher(line);\n      if (!matcher.matches()) {\n        throw new IllegalArgumentException(\"Invalid line in proguard mapping: \" + line);\n      }\n\n      classMappingBuilder.put(matcher.group(1), matcher.group(2));\n    }\n\n    return classMappingBuilder.build();\n  }\n}<fim_middle>// function below has no smell\n"}