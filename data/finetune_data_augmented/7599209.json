{"text": "<fim_prefix>/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.http.client;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.util.Assert;\nimport org.springframework.util.concurrent.ListenableFuture;\n\n/**\n * Abstract base for {@link AsyncClientHttpRequest} that makes sure that headers and body\n * are not written multiple times.\n *\n * @author Arjen Poutsma\n * @since 4.0\n * @deprecated as of Spring 5.0, in favor of {@link org.springframework.http.client.reactive.AbstractClientHttpRequest}\n */\n<fim_suffix>@Deprecated\nabstract class AbstractAsyncClientHttpRequest implements AsyncClientHttpRequest {\n\n\tprivate final HttpHeaders headers = new HttpHeaders();\n\n\tprivate boolean executed = false;\n\n\n\t@Override\n\tpublic final HttpHeaders getHeaders() {\n\t\treturn (this.executed ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);\n\t}\n\n\t@Override\n\tpublic final OutputStream getBody() throws IOException {\n\t\tassertNotExecuted();\n\t\treturn getBodyInternal(this.headers);\n\t}\n\n\t@Override\n\tpublic ListenableFuture<ClientHttpResponse> executeAsync() throws IOException {\n\t\tassertNotExecuted();\n\t\tListenableFuture<ClientHttpResponse> result = executeInternal(this.headers);\n\t\tthis.executed = true;\n\t\treturn result;\n\t}\n\n\t/**\n\t * Asserts that this request has not been {@linkplain #executeAsync() executed} yet.\n\t * @throws IllegalStateException if this request has been executed\n\t */\n\tprotected void assertNotExecuted() {\n\t\tAssert.state(!this.executed, \"ClientHttpRequest already executed\");\n\t}\n\n\n\t/**\n\t * Abstract template method that returns the body.\n\t * @param headers the HTTP headers\n\t * @return the body output stream\n\t */\n\tprotected abstract OutputStream getBodyInternal(HttpHeaders headers) throws IOException;\n\n\t/**\n\t * Abstract template method that writes the given headers and content to the HTTP request.\n\t * @param headers the HTTP headers\n\t * @return the response object for the executed request\n\t */\n\tprotected abstract ListenableFuture<ClientHttpResponse> executeInternal(HttpHeaders headers)\n\t\t\tthrows IOException;\n\n}<fim_middle>// class below has no smell\n"}