{"text": "<fim_prefix>package org.eclipse.xtext.parser.unorderedGroups.idea.parser.antlr.internal;\nimport org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;\nimport org.eclipse.xtext.parser.unorderedGroups.idea.lang.ExBacktrackingBug325745TestLanguageElementTypeProvider;\nimport org.eclipse.xtext.idea.parser.TokenTypeProvider;\nimport org.eclipse.xtext.parser.antlr.XtextTokenStream;\nimport org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;\nimport org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;\nimport org.eclipse.xtext.parser.unorderedGroups.services.ExBacktrackingBug325745TestLanguageGrammarAccess;\nimport com.intellij.lang.PsiBuilder;\nimport org.antlr.runtime.*;\nimport java.util.Stack;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\n@SuppressWarnings(\"all\")\npublic class PsiInternalExBacktrackingBug325745TestLanguageParser extends AbstractPsiAntlrParser {\n    public static final String[] tokenNames = new String[] {\n        \"<invalid>\", \"<EOR>\", \"<DOWN>\", \"<UP>\", \"RULE_ID\", \"RULE_STRING\", \"RULE_INT\", \"RULE_ML_COMMENT\", \"RULE_SL_COMMENT\", \"RULE_WS\", \"RULE_ANY_OTHER\", \"'.'\", \"':='\", \"'['\", \"']'\", \"'*'\", \"'!'\"\n    };\n    public static final int RULE_ID=4;\n    public static final int RULE_STRING=5;\n    public static final int T__16=16;\n    public static final int T__15=15;\n    public static final int T__12=12;\n    public static final int T__11=11;\n    public static final int T__14=14;\n    public static final int T__13=13;\n    public static final int RULE_ANY_OTHER=10;\n    public static final int RULE_INT=6;\n    public static final int RULE_WS=9;\n    public static final int RULE_SL_COMMENT=8;\n    public static final int EOF=-1;\n    public static final int RULE_ML_COMMENT=7;\n    // delegates\n    // delegators\n        public PsiInternalExBacktrackingBug325745TestLanguageParser(TokenStream input) {\n            this(input, new RecognizerSharedState());\n        }\n<fim_suffix>        public PsiInternalExBacktrackingBug325745TestLanguageParser(TokenStream input, RecognizerSharedState state) {\n            super(input, state);\n        }\n    public String[] getTokenNames() { return PsiInternalExBacktrackingBug325745TestLanguageParser.tokenNames; }\n    public String getGrammarFileName() { return \"PsiInternalExBacktrackingBug325745TestLanguage.g\"; }\n    /*\n      This grammar contains a lot of empty actions to work around a bug in ANTLR.\n      Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.\n    */\n    \tprotected ExBacktrackingBug325745TestLanguageGrammarAccess grammarAccess;\n    \tprotected ExBacktrackingBug325745TestLanguageElementTypeProvider elementTypeProvider;\n    \tpublic PsiInternalExBacktrackingBug325745TestLanguageParser(PsiBuilder builder, TokenStream input, ExBacktrackingBug325745TestLanguageElementTypeProvider elementTypeProvider, ExBacktrackingBug325745TestLanguageGrammarAccess grammarAccess) {\n    \t\tthis(input);\n    \t\tsetPsiBuilder(builder);\n        \tthis.grammarAccess = grammarAccess;\n    \t\tthis.elementTypeProvider = elementTypeProvider;\n    \t}\n    \t@Override\n    \tprotected String getFirstRuleName() {\n    \t\treturn \"DelegateModel\";\n    \t}\n    // $ANTLR start \"entryRuleDelegateModel\"\n    // PsiInternalExBacktrackingBug325745TestLanguage.g:59:1: entryRuleDelegateModel returns [Boolean current=false] : iv_ruleDelegateModel= ruleDelegateModel EOF ;\n    public final Boolean entryRuleDelegateModel() throws RecognitionException {\n        Boolean current = false;\n        Boolean iv_ruleDelegateModel = null;\n        try {\n            // PsiInternalExBacktrackingBug325745TestLanguage.g:59:55: (iv_ruleDelegateModel= ruleDelegateModel EOF )\n            // PsiInternalExBacktrackingBug325745TestLanguage.g:60:2: iv_ruleDelegateModel= ruleDelegateModel EOF\n            {\n            if ( state.backtracking==0 ) {\n               markComposite(elementTypeProvider.getDelegateModelElementType()); \n            }\n            pushFollow(FollowSets000.FOLLOW_1);\n            iv_ruleDelegateModel=ruleDelegateModel();\n            state._fsp--;\n            if (state.failed) return current;\n            if ( state.backtracking==0 ) {\n               current =iv_ruleDelegateModel; \n            }\n            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"entryRuleDelegateModel\"\n    // $ANTLR start \"ruleDelegateModel\"\n    // PsiInternalExBacktrackingBug325745TestLanguage.g:66:1: ruleDelegateModel returns [Boolean current=false] : this_Model_0= ruleModel ;\n    public final Boolean ruleDelegateModel() throws RecognitionException {\n        Boolean current = false;\n        Boolean this_Model_0 = null;\n        try {\n            // PsiInternalExBacktrackingBug325745TestLanguage.g:67:1: (this_Model_0= ruleModel )\n            // PsiInternalExBacktrackingBug325745TestLanguage.g:68:2: this_Model_0= ruleModel\n            {\n            if ( state.backtracking==0 ) {\n              \t\t/* */\n            }\n            if ( state.backtracking==0 ) {\n              \t\tmarkComposite(elementTypeProvider.getDelegateModel_ModelParserRuleCallElementType());\n            }\n            pushFollow(FollowSets000.FOLLOW_2);\n            this_Model_0=ruleModel();\n            state._fsp--;\n            if (state.failed) return current;\n            if ( state.backtracking==0 ) {\n              \t\tcurrent = this_Model_0;\n              \t\tdoneComposite();\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"ruleDelegateModel\"\n    // $ANTLR start \"entryRuleModel\"\n    // PsiInternalExBacktrackingBug325745TestLanguage.g:82:1: entryRuleModel returns [Boolean current=false] : iv_ruleModel= ruleModel EOF ;\n    public final Boolean entryRuleModel() throws RecognitionException {\n        Boolean current = false;\n        Boolean iv_ruleModel = null;\n        try {\n            // PsiInternalExBacktrackingBug325745TestLanguage.g:82:47: (iv_ruleModel= ruleModel EOF )\n            // PsiInternalExBacktrackingBug325745TestLanguage.g:83:2: iv_ruleModel= ruleModel EOF\n            {\n            if ( state.backtracking==0 ) {\n               markComposite(elementTypeProvider.getModelElementType()); \n            }\n            pushFollow(FollowSets000.FOLLOW_1);\n            iv_ruleModel=ruleModel();\n            state._fsp--;\n            if (state.failed) return current;\n            if ( state.backtracking==0 ) {\n               current =iv_ruleModel; \n            }\n            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return current;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"entryRuleModel\"\n    // $ANTLR start \"ruleModel\"\n    // PsiInternalExBacktrackingBug325745TestLanguage.g:89:1: ruleModel returns [Boolean current=false] : ( () ( (lv_fields_1_0= ruleElement ) )+ ) ;\n    public final Boolean ruleModel() throws RecognitionException {\n        Boolean current = false;\n        Boolean lv_fields_1_0 = null;\n        try {\n            // PsiInternalExBacktrackingBug325745TestLanguage.g:90:1: ( ( () ( (lv_fields_1_0= ruleElement ) )+ ) )\n            // PsiInternalExBacktrackingBug325745TestLanguage.g:91:2: ( () ( (lv_fields_1_0= ruleElement ) )+ )\n            {<fim_middle>// function below has no smell\n"}