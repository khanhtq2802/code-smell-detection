{"text": "<fim_prefix>/*\n * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage com.sun.tools.jdeprscan.scan;\n\nimport com.sun.tools.classfile.ConstantPool;\n\n/**\n * A visitor that selects constant pool entries by type and adds\n * them to the given CPEntries object.\n */\nclass CPSelector implements ConstantPool.Visitor<Void,CPEntries> {\n    @Override\n    public Void visitClass(ConstantPool.CONSTANT_Class_info info, CPEntries p) {\n        p.classes.add(info);\n        return null;\n    }\n\n    @Override\n    public Void visitDouble(ConstantPool.CONSTANT_Double_info info, CPEntries p) {\n        return null;\n    }\n\n    @Override\n    public Void visitFieldref(ConstantPool.CONSTANT_Fieldref_info info, CPEntries p) {\n        p.fieldRefs.add(info);\n        return null;\n    }\n\n    @Override\n    public Void visitFloat(ConstantPool.CONSTANT_Float_info info, CPEntries p) {\n        return null;\n    }\n\n    @Override\n    public Void visitInteger(ConstantPool.CONSTANT_Integer_info info, CPEntries p) {\n        return null;\n    }\n\n    @Override\n    public Void visitInterfaceMethodref(ConstantPool.CONSTANT_InterfaceMethodref_info info, CPEntries p) {\n        p.intfMethodRefs.add(info);\n        return null;\n    }\n\n<fim_suffix>    @Override\n    public Void visitInvokeDynamic(ConstantPool.CONSTANT_InvokeDynamic_info info, CPEntries p) {\n        return null;\n    }\n\n    @Override\n    public Void visitLong(ConstantPool.CONSTANT_Long_info info, CPEntries p) {\n        return null;\n    }\n\n    @Override\n    public Void visitMethodref(ConstantPool.CONSTANT_Methodref_info info, CPEntries p) {\n        p.methodRefs.add(info);\n        return null;\n    }\n\n    @Override\n    public Void visitMethodHandle(ConstantPool.CONSTANT_MethodHandle_info info, CPEntries p) {\n        return null;\n    }\n\n    @Override\n    public Void visitMethodType(ConstantPool.CONSTANT_MethodType_info info, CPEntries p) {\n        return null;\n    }\n\n    @Override\n    public Void visitModule(ConstantPool.CONSTANT_Module_info info, CPEntries p) {\n        return null;\n    }\n\n    @Override\n    public Void visitNameAndType(ConstantPool.CONSTANT_NameAndType_info info, CPEntries p) {\n        return null;\n    }\n\n    @Override\n    public Void visitPackage(ConstantPool.CONSTANT_Package_info info, CPEntries p) {\n        return null;\n    }\n\n    @Override\n    public Void visitString(ConstantPool.CONSTANT_String_info info, CPEntries p) {\n        return null;\n    }\n\n    @Override\n    public Void visitUtf8(ConstantPool.CONSTANT_Utf8_info info, CPEntries p) {\n        return null;\n    }\n}<fim_middle>// function below has no smell\n"}