{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.formats.parquet.utils;\n\nimport org.apache.flink.api.common.typeinfo.TypeInformation;\nimport org.apache.flink.types.Row;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.parquet.hadoop.api.InitContext;\nimport org.apache.parquet.hadoop.api.ReadSupport;\nimport org.apache.parquet.io.api.RecordMaterializer;\nimport org.apache.parquet.schema.MessageType;\n\nimport java.util.Map;\n\nimport static org.apache.flink.util.Preconditions.checkNotNull;\n\n/**\n * A Parquet {@link ReadSupport} implementation for reading Parquet record as {@link Row}.\n */\n<fim_suffix>public class RowReadSupport extends ReadSupport<Row> {\n\n\tprivate TypeInformation<?> returnTypeInfo;\n\n\t@Override\n\tpublic ReadContext init(InitContext initContext) {\n\t\tcheckNotNull(initContext, \"initContext\");\n\t\treturnTypeInfo = ParquetSchemaConverter.fromParquetType(initContext.getFileSchema());\n\t\treturn new ReadContext(initContext.getFileSchema());\n\t}\n\n\t@Override\n\tpublic RecordMaterializer<Row> prepareForRead(\n\t\tConfiguration configuration, Map<String, String> keyValueMetaData,\n\t\tMessageType fileSchema, ReadContext readContext) {\n\t\treturn new RowMaterializer(readContext.getRequestedSchema(), returnTypeInfo);\n\t}\n}<fim_middle>// class below has no smell\n"}