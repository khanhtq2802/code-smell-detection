{"text": "<fim_prefix>/*\n * Copyright (c) 2016 Goldman Sachs.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v. 1.0 which accompany this distribution.\n * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n * http://www.eclipse.org/org/documents/edl-v10.php.\n */\npackage org.eclipse.collections.impl.block.factory;\nimport org.eclipse.collections.impl.block.predicate.CodePointPredicate;\nimport org.eclipse.collections.impl.utility.StringIterate;\n/**\n * The StringPredicates class is a factory that produces Predicates that work with Strings.\n */\npublic final class StringPredicates\n{\n    private static final Predicates<String> EMPTY = new Empty();\n    private static final Predicates<String> NOT_EMPTY = new NotEmpty();\n    private static final Predicates<String> HAS_LETTERS = new HasLetters();\n    private static final Predicates<String> HAS_DIGITS = new HasDigits();\n    private static final Predicates<String> HAS_LETTERS_OR_DIGITS = new HasLettersOrDigits();\n    private static final Predicates<String> HAS_LETTERS_AND_DIGITS = new HasLettersAndDigits();\n    private static final Predicates<String> HAS_SPACES = new HasSpaces();\n    private static final Predicates<String> HAS_UPPERCASE = new HasUppercase();\n    private static final Predicates<String> HAS_LOWERCASE = new HasLowercase();\n    private static final Predicates<String> HAS_UNDEFINED = new HasUndefined();\n    private static final Predicates<String> IS_NUMERIC = new IsNumeric();\n    private static final Predicates<String> IS_ALPHANUMERIC = new IsAlphanumeric();\n    private static final Predicates<String> IS_BLANK = new IsBlank();\n    private static final Predicates<String> NOT_BLANK = new NotBlank();\n    private static final Predicates<String> IS_ALPHA = new IsAlpha();\n    private StringPredicates()\n    {\n        throw new AssertionError(\"Suppress default constructor for noninstantiability\");\n    }\n    public static Predicates<String> empty()\n    {\n        return EMPTY;\n    }\n    public static Predicates<String> notEmpty()\n    {\n        return NOT_EMPTY;\n    }\n    /**\n     * Returns true if a String specified on the predicate is contained within a String passed to the the accept\n     * method.\n     */\n    public static Predicates<String> contains(String otherString)\n    {\n        return new ContainsString(otherString);\n    }\n    /**\n     * Returns true if a String specified on the predicate is contained within a String passed to the the accept\n     * method.\n     *\n     * @since 5.0\n     */\n    public static Predicates<String> notContains(String otherString)\n    {\n        return new NotContainsString(otherString);\n    }\n    /**\n     * Returns true if a char specified on the predicate is contained within a String passed to the the accept\n     * method.\n     */\n    public static Predicates<String> contains(char character)\n    {\n        return new ContainsCharacter(character);\n    }\n    /**\n     * Returns true if a String passed to the the accept method starts with the string specified on the predicate.\n     */\n    public static Predicates<String> startsWith(String substring)\n    {\n        return new StartsWith(substring);\n    }\n    /**\n     * Returns true if a String passed to the the accept method ends with the string specified on the predicate.\n     */\n    public static Predicates<String> endsWith(String substring)\n    {\n        return new EndsWith(substring);\n    }\n    public static Predicates<String> size(int size)\n    {\n        return new Size(size);\n    }\n    public static Predicates<String> equalsIgnoreCase(String otherString)\n    {\n        return new EqualsIgnoreCase(otherString);\n    }\n    public static Predicates<String> matches(String regex)\n    {\n        return new MatchesRegex(regex);\n    }\n    public static Predicates<String> lessThan(String string)\n    {\n        return new LessThan(string);\n    }\n    public static Predicates<String> lessThanOrEqualTo(String string)\n    {\n        return new LessThanOrEqualTo(string);\n    }\n    public static Predicates<String> greaterThan(String string)\n    {\n        return new GreaterThan(string);\n    }\n    public static Predicates<String> greaterThanOrEqualTo(String string)\n    {\n        return new GreaterThanOrEqualTo(string);\n    }\n    public static Predicates<String> hasLetters()\n    {\n        return HAS_LETTERS;\n    }\n    public static Predicates<String> hasDigits()\n    {\n        return HAS_DIGITS;\n    }\n    public static Predicates<String> hasLettersOrDigits()\n    {\n        return HAS_LETTERS_OR_DIGITS;\n    }\n    public static Predicates<String> hasLettersAndDigits()\n    {\n        return HAS_LETTERS_AND_DIGITS;\n    }\n    public static Predicates<String> hasSpaces()\n    {\n        return HAS_SPACES;\n    }\n    public static Predicates<String> hasUpperCase()\n    {\n        return HAS_UPPERCASE;\n    }\n    public static Predicates<String> hasLowerCase()\n    {\n        return HAS_LOWERCASE;\n    }\n    public static Predicates<String> hasUndefined()\n    {\n        return HAS_UNDEFINED;\n    }\n    public static Predicates<String> isNumeric()\n    {\n        return IS_NUMERIC;\n    }\n    public static Predicates<String> isAlphanumeric()\n    {\n        return IS_ALPHANUMERIC;\n    }\n    public static Predicates<String> isBlank()\n    {\n        return IS_BLANK;\n    }\n    public static Predicates<String> notBlank()\n    {\n        return NOT_BLANK;\n    }\n    public static Predicates<String> isAlpha()\n    {\n        return IS_ALPHA;\n    }\n<fim_suffix>    private static class Empty extends Predicates<String>\n    {\n        private static final long serialVersionUID = 1L;\n        @Override\n        public boolean accept(String anObject)\n        {\n            return anObject != null && anObject.length() == 0;\n        }\n        @Override\n        public String toString()\n        {\n            return \"StringPredicates.empty()\";\n        }\n    }\n    private static class NotEmpty extends Predicates<String>\n    {\n        private static final long serialVersionUID = 1L;\n        @Override\n        public boolean accept(String anObject)\n        {\n            return anObject != null && anObject.length() > 0;\n        }\n        @Override\n        public String toString()\n        {\n            return \"StringPredicates.notEmpty()\";\n        }\n    }\n    private static class HasLetters extends Predicates<String>\n    {\n        private static final long serialVersionUID = 1L;\n        @Override\n        public boolean accept(String anObject)\n        {\n            return StringIterate.anySatisfy(anObject, CodePointPredicate.IS_LETTER);\n        }\n        @Override\n        public String toString()\n        {\n            return \"StringPredicates.hasLetters()\";\n        }\n    }\n    private static class HasDigits extends Predicates<String>\n    {\n        private static final long serialVersionUID = 1L;\n        @Override\n        public boolean accept(String anObject)\n        {\n            return StringIterate.anySatisfy(anObject, CodePointPredicate.IS_DIGIT);\n        }\n        @Override\n        public String toString()\n        {\n            return \"StringPredicates.hasDigits()\";\n        }\n    }\n    private static class HasLettersOrDigits extends Predicates<String>\n    {\n        private static final long serialVersionUID = 1L;\n        @Override\n        public boolean accept(String anObject)\n        {\n            return StringIterate.anySatisfy(anObject, CodePointPredicate.IS_LETTER_OR_DIGIT);\n        }\n        @Override\n        public String toString()\n        {\n            return \"StringPredicates.hasLettersOrDigits()\";\n        }\n    }\n    private static class HasLettersAndDigits extends Predicates<String>\n    {\n        private static final long serialVersionUID = 1L;\n        @Override\n        public boolean accept(String string)\n        {\n            boolean hasLetter = false;\n            boolean hasDigit = false;\n            for (int i = 0; i < string.length(); i++)\n            {\n                if (Character.isLetter(string.codePointAt(i)))\n                {\n                    hasLetter = true;\n                }\n                if (Character.isDigit(string.codePointAt(i)))\n                {\n                    hasDigit = true;\n                }\n                if (hasLetter && hasDigit)\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n        @Override\n        public String toString()\n        {\n            return \"StringPredicates.hasLettersAndDigits()\";\n        }\n    }\n    private static class HasSpaces extends Predicates<String>\n    {\n        private static final long serialVersionUID = 1L;\n        @Override\n        public boolean accept(String anObject)\n        {\n            return StringIterate.anySatisfy(anObject, CodePointPredicate.IS_WHITESPACE);\n        }\n        @Override\n        public String toString()\n        {\n            return \"StringPredicates.hasSpaces()\";\n        }\n    }\n    private static class HasUppercase extends Predicates<String>\n    {<fim_middle>// class below has no smell\n"}