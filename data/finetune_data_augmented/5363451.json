{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.nifi.processors.jolt.record.util;\n\nimport java.lang.reflect.Constructor;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport com.bazaarvoice.jolt.CardinalityTransform;\nimport com.bazaarvoice.jolt.Chainr;\nimport com.bazaarvoice.jolt.Defaultr;\nimport com.bazaarvoice.jolt.JoltTransform;\nimport com.bazaarvoice.jolt.Modifier;\nimport com.bazaarvoice.jolt.Removr;\nimport com.bazaarvoice.jolt.Shiftr;\nimport com.bazaarvoice.jolt.Sortr;\nimport com.bazaarvoice.jolt.SpecDriven;\nimport com.bazaarvoice.jolt.chainr.spec.ChainrEntry;\nimport com.bazaarvoice.jolt.exception.SpecException;\n\n<fim_suffix>public class TransformFactory {\n\n    public static JoltTransform getTransform(final ClassLoader classLoader,final String transformType, final Object specJson) throws Exception {\n\n        if (transformType.equals(\"jolt-transform-default\")) {\n            return new Defaultr(specJson);\n        } else if (transformType.equals(\"jolt-transform-shift\")) {\n            return new Shiftr(specJson);\n        } else if (transformType.equals(\"jolt-transform-remove\")) {\n            return new Removr(specJson);\n        } else if (transformType.equals(\"jolt-transform-card\")) {\n            return new CardinalityTransform(specJson);\n        } else if(transformType.equals(\"jolt-transform-sort\")){\n            return new Sortr();\n        } else if(transformType.equals(\"jolt-transform-modify-default\")){\n          return new Modifier.Defaultr(specJson);\n        } else if(transformType.equals(\"jolt-transform-modify-overwrite\")){\n            return new Modifier.Overwritr(specJson);\n        } else if(transformType.equals(\"jolt-transform-modify-define\")){\n            return new Modifier.Definr(specJson);\n        } else{\n            return new Chainr(getChainrJoltTransformations(classLoader,specJson));\n        }\n\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static JoltTransform getCustomTransform(final ClassLoader classLoader, final String customTransformType, final Object specJson) throws Exception {\n        final Class clazz = classLoader.loadClass(customTransformType);\n        if(SpecDriven.class.isAssignableFrom(clazz)){\n            final Constructor constructor = clazz.getConstructor(Object.class);\n            return (JoltTransform)constructor.newInstance(specJson);\n\n        }else{\n            return (JoltTransform)clazz.newInstance();\n        }\n    }\n\n\n    protected static List<JoltTransform> getChainrJoltTransformations(ClassLoader classLoader, Object specJson) throws Exception{\n        if(!(specJson instanceof List)) {\n            throw new SpecException(\"JOLT Chainr expects a JSON array of objects - Malformed spec.\");\n        } else {\n\n            List operations = (List)specJson;\n\n            if(operations.isEmpty()) {\n                throw new SpecException(\"JOLT Chainr passed an empty JSON array.\");\n            } else {\n\n                ArrayList<JoltTransform> entries = new ArrayList<>(operations.size());\n\n                for(Object chainrEntryObj : operations) {\n\n                    if(!(chainrEntryObj instanceof Map)) {\n                        throw new SpecException(\"JOLT ChainrEntry expects a JSON map - Malformed spec\");\n                    } else {\n                        Map chainrEntryMap = (Map)chainrEntryObj;\n                        String opString = (String) chainrEntryMap.get(\"operation\");\n                        String operationClassName;\n\n                        if(opString == null) {\n                            throw new SpecException(\"JOLT Chainr \\'operation\\' must implement Transform or ContextualTransform\");\n                        } else {\n\n                            operationClassName = ChainrEntry.STOCK_TRANSFORMS.getOrDefault(opString, opString);\n\n                            entries.add(getCustomTransform(classLoader,operationClassName,chainrEntryMap.get(\"spec\")));\n                        }\n                    }\n                }\n\n                return entries;\n            }\n        }\n\n    }\n\n\n\n\n}<fim_middle>// class below has no smell\n"}