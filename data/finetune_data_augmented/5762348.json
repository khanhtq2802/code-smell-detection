{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.syncope.core.logic;\n\nimport java.lang.reflect.Method;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.syncope.common.lib.SyncopeClientException;\nimport org.apache.syncope.common.lib.to.ReportTemplateTO;\nimport org.apache.syncope.common.lib.types.ClientExceptionType;\nimport org.apache.syncope.common.lib.types.ReportTemplateFormat;\nimport org.apache.syncope.common.lib.types.StandardEntitlement;\nimport org.apache.syncope.core.persistence.api.dao.NotFoundException;\nimport org.apache.syncope.core.persistence.api.dao.DuplicateException;\nimport org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\nimport org.apache.syncope.core.persistence.api.dao.ReportDAO;\nimport org.apache.syncope.core.persistence.api.entity.Entity;\nimport org.apache.syncope.core.persistence.api.entity.EntityFactory;\nimport org.apache.syncope.core.persistence.api.entity.ReportTemplate;\nimport org.apache.syncope.core.persistence.api.entity.Report;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Component\npublic class ReportTemplateLogic extends AbstractTransactionalLogic<ReportTemplateTO> {\n\n    @Autowired\n    private ReportTemplateDAO reportTemplateDAO;\n\n    @Autowired\n    private ReportDAO reportDAO;\n\n    @Autowired\n    private EntityFactory entityFactory;\n\n    private ReportTemplateTO getReportTemplateTO(final String key) {\n        ReportTemplateTO reportTemplateTO = new ReportTemplateTO();\n        reportTemplateTO.setKey(key);\n        return reportTemplateTO;\n    }\n\n    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_READ + \"')\")\n    @Transactional(readOnly = true)\n    public ReportTemplateTO read(final String key) {\n        ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n        if (reportTemplate == null) {\n            LOG.error(\"Could not find report template '\" + key + \"'\");\n\n            throw new NotFoundException(key);\n        }\n\n        return getReportTemplateTO(key);\n    }\n\n    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_LIST + \"')\")\n    @Transactional(readOnly = true)\n    public List<ReportTemplateTO> list() {\n        return reportTemplateDAO.findAll().stream().\n                map(template -> getReportTemplateTO(template.getKey())).collect(Collectors.toList());\n    }\n\n    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_CREATE + \"')\")\n    public ReportTemplateTO create(final String key) {\n        if (reportTemplateDAO.find(key) != null) {\n            throw new DuplicateException(key);\n        }\n        ReportTemplate reportTemplate = entityFactory.newEntity(ReportTemplate.class);\n        reportTemplate.setKey(key);\n        reportTemplateDAO.save(reportTemplate);\n\n        return getReportTemplateTO(key);\n    }\n\n    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_READ + \"')\")\n    public String getFormat(final String key, final ReportTemplateFormat format) {\n        ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n        if (reportTemplate == null) {\n            LOG.error(\"Could not find report template '\" + key + \"'\");\n\n            throw new NotFoundException(key);\n        }\n\n        String template = format == ReportTemplateFormat.HTML\n                ? reportTemplate.getHTMLTemplate()\n                : format == ReportTemplateFormat.CSV\n                        ? reportTemplate.getCSVTemplate()\n                        : reportTemplate.getFOTemplate();\n        if (StringUtils.isBlank(template)) {\n            LOG.error(\"Could not find report template '\" + key + \"' in \" + format + \" format\");\n\n            throw new NotFoundException(key + \" in \" + format);\n        }\n\n        return template;\n    }\n\n    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_UPDATE + \"')\")\n    public void setFormat(final String key, final ReportTemplateFormat format, final String template) {\n        ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n        if (reportTemplate == null) {\n            LOG.error(\"Could not find report template '\" + key + \"'\");\n\n            throw new NotFoundException(key);\n        }\n\n        switch (format) {\n            case CSV:\n                reportTemplate.setCSVTemplate(template);\n                break;\n\n            case FO:\n                reportTemplate.setFOTemplate(template);\n                break;\n\n            case HTML:\n                reportTemplate.setHTMLTemplate(template);\n                break;\n\n            default:\n        }\n\n        reportTemplateDAO.save(reportTemplate);\n    }\n\n<fim_suffix>    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_DELETE + \"')\")\n    public ReportTemplateTO delete(final String key) {\n        ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n        if (reportTemplate == null) {\n            LOG.error(\"Could not find report template '\" + key + \"'\");\n\n            throw new NotFoundException(key);\n        }\n\n        List<Report> reports = reportDAO.findByTemplate(reportTemplate);\n        if (!reports.isEmpty()) {\n            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUse);\n            sce.getElements().addAll(reports.stream().map(Entity::getKey).collect(Collectors.toList()));\n            throw sce;\n        }\n\n        ReportTemplateTO deleted = getReportTemplateTO(key);\n        reportTemplateDAO.delete(key);\n        return deleted;\n    }\n\n    @Override\n    protected ReportTemplateTO resolveReference(final Method method, final Object... args)\n            throws UnresolvedReferenceException {\n\n        String key = null;\n\n        if (ArrayUtils.isNotEmpty(args)) {\n            for (int i = 0; key == null && i < args.length; i++) {\n                if (args[i] instanceof String) {\n                    key = ((String) args[i]);\n                } else if (args[i] instanceof ReportTemplateTO) {\n                    key = ((ReportTemplateTO) args[i]).getKey();\n                }\n            }\n        }\n\n        if (key != null) {\n            try {\n                return getReportTemplateTO(key);\n            } catch (Throwable ignore) {\n                LOG.debug(\"Unresolved reference\", ignore);\n                throw new UnresolvedReferenceException(ignore);\n            }\n        }\n\n        throw new UnresolvedReferenceException();\n    }\n}<fim_middle>// function below has no smell\n"}