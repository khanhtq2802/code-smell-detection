{"text": "<fim_prefix>        JsonWebKeys jwkSet = loadJwkSet(m, props, cb);\n        String kid = KeyManagementUtils.getKeyId(m, props, JoseConstants.RSSEC_KEY_STORE_ALIAS, keyOper);\n        if (kid != null) {\n            return Collections.singletonList(jwkSet.getKey(kid));\n        }\n        String kids = KeyManagementUtils.getKeyId(m, props, JoseConstants.RSSEC_KEY_STORE_ALIASES, keyOper);\n        if (kids != null) {\n            String[] values = kids.split(\",\");\n            List<JsonWebKey> keys = new ArrayList<>(values.length);\n            for (String value : values) {\n                keys.add(jwkSet.getKey(value));\n            }\n            return keys;\n        }\n        if (keyOper != null) {\n            List<JsonWebKey> keys = jwkSet.getKeyOperationMap().get(keyOper);\n            if (keys != null && keys.size() == 1) {\n                return Collections.singletonList(keys.get(0));\n            }\n        }\n        return null;\n    }\n    public static RSAPublicKey toRSAPublicKey(JsonWebKey jwk) {\n        return toRSAPublicKey(jwk, false);\n    }\n    public static RSAPublicKey toRSAPublicKey(JsonWebKey jwk, boolean checkX509) {\n        String encodedModulus = (String)jwk.getProperty(JsonWebKey.RSA_MODULUS);\n        String encodedPublicExponent = (String)jwk.getProperty(JsonWebKey.RSA_PUBLIC_EXP);\n        if (encodedModulus != null) {\n            return CryptoUtils.getRSAPublicKey(encodedModulus, encodedPublicExponent);\n        } else if (checkX509) {\n            List<X509Certificate> chain = toX509CertificateChain(jwk);\n            return (RSAPublicKey)chain.get(0).getPublicKey();\n        }\n        return null;\n    }\n    public static List<X509Certificate> toX509CertificateChain(JsonWebKey jwk) {\n        List<String> base64EncodedChain = jwk.getX509Chain();\n        return KeyManagementUtils.toX509CertificateChain(base64EncodedChain);\n    }\n    public static JsonWebKey fromECPublicKey(ECPublicKey pk, String curve) {\n        return fromECPublicKey(pk, curve, null);\n    }\n    public static JsonWebKey fromECPublicKey(ECPublicKey pk, String curve, String kid) {\n        JsonWebKey jwk = prepareECJwk(curve, kid);\n        jwk.setProperty(JsonWebKey.EC_X_COORDINATE,\n                        Base64UrlUtility.encode(pk.getW().getAffineX().toByteArray()));\n        jwk.setProperty(JsonWebKey.EC_Y_COORDINATE,\n                        Base64UrlUtility.encode(pk.getW().getAffineY().toByteArray()));\n        return jwk;\n    }\n    public static JsonWebKey fromECPrivateKey(ECPrivateKey pk, String curve) {\n        return fromECPrivateKey(pk, curve, null);\n    }\n    public static JsonWebKey fromECPrivateKey(ECPrivateKey pk, String curve, String kid) {\n        JsonWebKey jwk = prepareECJwk(curve, kid);\n        jwk.setProperty(JsonWebKey.EC_PRIVATE_KEY,\n                        Base64UrlUtility.encode(pk.getS().toByteArray()));\n        return jwk;\n    }\n    public static JsonWebKey fromRSAPublicKey(RSAPublicKey pk, String algo) {\n        return fromRSAPublicKey(pk, algo, null);\n    }\n    public static JsonWebKey fromRSAPublicKey(RSAPublicKey pk, String algo, String kid) {\n        JsonWebKey jwk = prepareRSAJwk(pk.getModulus(), algo, kid);\n        String encodedPublicExponent = Base64UrlUtility.encode(pk.getPublicExponent().toByteArray());\n        jwk.setProperty(JsonWebKey.RSA_PUBLIC_EXP, encodedPublicExponent);\n        return jwk;\n    }\n    public static JsonWebKey fromPublicKey(PublicKey key, Properties props, String algoProp) {\n        JsonWebKey jwk = null;\n        if (key instanceof RSAPublicKey) {\n            String algo = props.getProperty(algoProp);\n            jwk = JwkUtils.fromRSAPublicKey((RSAPublicKey)key, algo);\n        } else {\n            jwk = JwkUtils.fromECPublicKey((ECPublicKey)key,\n                                           props.getProperty(JoseConstants.RSSEC_EC_CURVE));\n        }\n        String kid = props.getProperty(JoseConstants.RSSEC_KEY_STORE_ALIAS);\n        if (kid != null) {\n            jwk.setKeyId(kid);\n        }\n        return jwk;\n    }\n    public static JsonWebKey fromX509CertificateChain(List<X509Certificate> chain, String algo) {\n        JsonWebKey jwk = new JsonWebKey();\n        jwk.setAlgorithm(algo);\n        List<String> encodedChain = KeyManagementUtils.encodeX509CertificateChain(chain);\n        jwk.setX509Chain(encodedChain);\n        return jwk;\n    }\n    public static RSAPrivateKey toRSAPrivateKey(JsonWebKey jwk) {\n        String encodedModulus = (String)jwk.getProperty(JsonWebKey.RSA_MODULUS);\n        String encodedPrivateExponent = (String)jwk.getProperty(JsonWebKey.RSA_PRIVATE_EXP);\n        String encodedPrimeP = (String)jwk.getProperty(JsonWebKey.RSA_FIRST_PRIME_FACTOR);\n        if (encodedPrimeP == null) {\n            return CryptoUtils.getRSAPrivateKey(encodedModulus, encodedPrivateExponent);\n        }\n        String encodedPublicExponent = (String)jwk.getProperty(JsonWebKey.RSA_PUBLIC_EXP);\n        if (encodedPublicExponent == null) {\n            throw new JoseException(\"JWK without the public exponent can not be converted to RSAPrivateKey\");\n        }\n        String encodedPrimeQ = (String)jwk.getProperty(JsonWebKey.RSA_SECOND_PRIME_FACTOR);\n        String encodedPrimeExpP = (String)jwk.getProperty(JsonWebKey.RSA_FIRST_PRIME_CRT);\n        String encodedPrimeExpQ = (String)jwk.getProperty(JsonWebKey.RSA_SECOND_PRIME_CRT);\n        String encodedCrtCoefficient = (String)jwk.getProperty(JsonWebKey.RSA_FIRST_CRT_COEFFICIENT);\n        return CryptoUtils.getRSAPrivateKey(encodedModulus,\n                                            encodedPublicExponent,\n                                            encodedPrivateExponent,\n                                            encodedPrimeP,\n                                            encodedPrimeQ,\n                                            encodedPrimeExpP,\n                                            encodedPrimeExpQ,\n                                            encodedCrtCoefficient);\n    }\n    public static JsonWebKey fromRSAPrivateKey(RSAPrivateKey pk, String algo) {\n        return fromRSAPrivateKey(pk, algo, null);\n    }\n<fim_suffix>    public static JsonWebKey fromRSAPrivateKey(RSAPrivateKey pk, String algo, String kid) {\n        JsonWebKey jwk = prepareRSAJwk(pk.getModulus(), algo, kid);\n        String encodedPrivateExponent = Base64UrlUtility.encode(pk.getPrivateExponent().toByteArray());\n        jwk.setProperty(JsonWebKey.RSA_PRIVATE_EXP, encodedPrivateExponent);\n        if (pk instanceof RSAPrivateCrtKey) {\n            RSAPrivateCrtKey pkCrt = (RSAPrivateCrtKey)pk;\n            jwk.setProperty(JsonWebKey.RSA_PUBLIC_EXP,\n                            Base64UrlUtility.encode(pkCrt.getPublicExponent().toByteArray()));\n            jwk.setProperty(JsonWebKey.RSA_FIRST_PRIME_FACTOR,\n                            Base64UrlUtility.encode(pkCrt.getPrimeP().toByteArray()));\n            jwk.setProperty(JsonWebKey.RSA_SECOND_PRIME_FACTOR,\n                            Base64UrlUtility.encode(pkCrt.getPrimeQ().toByteArray()));\n            jwk.setProperty(JsonWebKey.RSA_FIRST_PRIME_CRT,\n                            Base64UrlUtility.encode(pkCrt.getPrimeExponentP().toByteArray()));\n            jwk.setProperty(JsonWebKey.RSA_SECOND_PRIME_CRT,\n                            Base64UrlUtility.encode(pkCrt.getPrimeExponentQ().toByteArray()));\n            jwk.setProperty(JsonWebKey.RSA_FIRST_CRT_COEFFICIENT,\n                            Base64UrlUtility.encode(pkCrt.getCrtCoefficient().toByteArray()));\n        }\n        // \"oth\" can be populated too if needed\n        return jwk;\n    }<fim_middle>// function below is feature envy\n"}