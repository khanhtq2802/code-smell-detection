{"text": "<fim_prefix>\n<fim_suffix>public class InternalCacheBuilder {\n  private static final Logger logger = LogService.getLogger();\n  private static final String USE_ASYNC_EVENT_LISTENERS_PROPERTY =\n      GEMFIRE_PREFIX + \"Cache.ASYNC_EVENT_LISTENERS\";\n  private static final boolean IS_EXISTING_OK_DEFAULT = true;\n  private static final boolean IS_CLIENT_DEFAULT = false;\n  private final Properties configProperties;\n  private final CacheConfig cacheConfig;\n  private final CompositeMeterRegistryFactory compositeMeterRegistryFactory;\n  private final Consumer<CompositeMeterRegistry> metricsSessionInitializer;\n  private final Supplier<InternalDistributedSystem> singletonSystemSupplier;\n  private final Supplier<InternalCache> singletonCacheSupplier;\n  private final InternalDistributedSystemConstructor internalDistributedSystemConstructor;\n  private final InternalCacheConstructor internalCacheConstructor;\n  private boolean isExistingOk = IS_EXISTING_OK_DEFAULT;\n  private boolean isClient = IS_CLIENT_DEFAULT;\n  /**\n   * Setting useAsyncEventListeners to true will invoke event listeners in asynchronously.\n   *\n   * <p>\n   * Default is specified by system property {@code gemfire.Cache.ASYNC_EVENT_LISTENERS}.\n   */\n  private boolean useAsyncEventListeners = Boolean.getBoolean(USE_ASYNC_EVENT_LISTENERS_PROPERTY);\n  private PoolFactory poolFactory;\n  private TypeRegistry typeRegistry;\n  /**\n   * Creates a cache factory with default configuration properties.\n   */\n  public InternalCacheBuilder() {\n    this(new Properties(), new CacheConfig());\n  }\n  /**\n   * Create a cache factory initialized with the given configuration properties. For a list of valid\n   * configuration properties and their meanings see {@link ConfigurationProperties}.\n   *\n   * @param configProperties the configuration properties to initialize the factory with.\n   */\n  public InternalCacheBuilder(Properties configProperties) {\n    this(configProperties == null ? new Properties() : configProperties, new CacheConfig());\n  }\n  /**\n   * Creates a cache factory with default configuration properties.\n   */\n  public InternalCacheBuilder(CacheConfig cacheConfig) {\n    this(new Properties(), cacheConfig);\n  }\n  private InternalCacheBuilder(Properties configProperties, CacheConfig cacheConfig) {\n    this(configProperties,\n        cacheConfig,\n        new CacheMeterRegistryFactory(),\n        CacheLifecycleMetricsSession.builder()::build,\n        InternalDistributedSystem::getConnectedInstance,\n        InternalDistributedSystem::connectInternal,\n        GemFireCacheImpl::getInstance,\n        GemFireCacheImpl::new);\n  }\n  @VisibleForTesting\n  InternalCacheBuilder(Properties configProperties,\n      CacheConfig cacheConfig,\n      CompositeMeterRegistryFactory compositeMeterRegistryFactory,\n      Consumer<CompositeMeterRegistry> metricsSessionInitializer,\n      Supplier<InternalDistributedSystem> singletonSystemSupplier,\n      InternalDistributedSystemConstructor internalDistributedSystemConstructor,\n      Supplier<InternalCache> singletonCacheSupplier,\n      InternalCacheConstructor internalCacheConstructor) {\n    this.configProperties = configProperties;\n    this.cacheConfig = cacheConfig;\n    this.compositeMeterRegistryFactory = compositeMeterRegistryFactory;\n    this.metricsSessionInitializer = metricsSessionInitializer;\n    this.singletonSystemSupplier = singletonSystemSupplier;\n    this.internalDistributedSystemConstructor = internalDistributedSystemConstructor;\n    this.internalCacheConstructor = internalCacheConstructor;\n    this.singletonCacheSupplier = singletonCacheSupplier;\n  }\n  /**\n   * @see CacheFactory#create()\n   *\n   * @throws CacheXmlException If a problem occurs while parsing the declarative caching XML file.\n   * @throws TimeoutException If a {@link Region#put(Object, Object)} times out while initializing\n   *         the cache.\n   * @throws CacheWriterException If a {@code CacheWriterException} is thrown while initializing the\n   *         cache.\n   * @throws GatewayException If a {@code GatewayException} is thrown while initializing the cache.\n   * @throws RegionExistsException If the declarative caching XML file describes a region that\n   *         already exists (including the root region).\n   * @throws IllegalStateException if cache already exists and is not compatible with the new\n   *         configuration.\n   * @throws AuthenticationFailedException if authentication fails.\n   * @throws AuthenticationRequiredException if the distributed system is in secure mode and this\n   *         new member is not configured with security credentials.\n   */\n  public InternalCache create()\n      throws TimeoutException, CacheWriterException, GatewayException, RegionExistsException {\n    synchronized (InternalCacheBuilder.class) {\n      InternalDistributedSystem internalDistributedSystem = findInternalDistributedSystem()\n          .orElseGet(() -> createInternalDistributedSystem());\n      return create(internalDistributedSystem);\n    }\n  }\n  /**\n   * @see CacheFactory#create(DistributedSystem)\n   *\n   * @throws IllegalArgumentException If {@code system} is not {@link DistributedSystem#isConnected\n   *         connected}.\n   * @throws CacheExistsException If an open cache already exists.\n   * @throws CacheXmlException If a problem occurs while parsing the declarative caching XML file.\n   * @throws TimeoutException If a {@link Region#put(Object, Object)} times out while initializing\n   *         the cache.\n   * @throws CacheWriterException If a {@code CacheWriterException} is thrown while initializing the\n   *         cache.\n   * @throws GatewayException If a {@code GatewayException} is thrown while initializing the cache.\n   * @throws RegionExistsException If the declarative caching XML file describes a region that\n   *         already exists (including the root region).\n   */\n  public InternalCache create(InternalDistributedSystem internalDistributedSystem)\n      throws TimeoutException, CacheWriterException, GatewayException, RegionExistsException {\n    requireNonNull(internalDistributedSystem, \"internalDistributedSystem\");\n    try {\n      synchronized (InternalCacheBuilder.class) {\n        synchronized (GemFireCacheImpl.class) {\n          InternalCache cache =\n              existingCache(internalDistributedSystem::getCache, singletonCacheSupplier);\n          if (cache == null) {\n            int systemId = internalDistributedSystem.getConfig().getDistributedSystemId();\n            String memberName = internalDistributedSystem.getName();\n            String hostName = internalDistributedSystem.getDistributedMember().getHost();\n            CompositeMeterRegistry compositeMeterRegistry = compositeMeterRegistryFactory\n                .create(systemId, memberName, hostName);\n            metricsSessionInitializer.accept(compositeMeterRegistry);\n            cache =\n                internalCacheConstructor.construct(isClient, poolFactory, internalDistributedSystem,\n                    cacheConfig, useAsyncEventListeners, typeRegistry, compositeMeterRegistry);\n            internalDistributedSystem.setCache(cache);\n            cache.initialize();\n          } else {\n            internalDistributedSystem.setCache(cache);\n          }\n          return cache;\n        }\n      }\n    } catch (CacheXmlException | IllegalArgumentException e) {\n      logger.error(e.getLocalizedMessage());\n      throw e;\n    } catch (Error | RuntimeException e) {\n      logger.error(e);\n      throw e;\n    }\n  }\n  /**\n   * @see CacheFactory#set(String, String)\n   */\n  public InternalCacheBuilder set(String name, String value) {\n    configProperties.setProperty(name, value);\n    return this;\n  }\n  /**\n   * @see CacheFactory#setPdxReadSerialized(boolean)\n   */\n  public InternalCacheBuilder setPdxReadSerialized(boolean readSerialized) {\n    cacheConfig.setPdxReadSerialized(readSerialized);\n    return this;\n  }\n  /**\n   * @see CacheFactory#setSecurityManager(SecurityManager)\n   */\n  public InternalCacheBuilder setSecurityManager(SecurityManager securityManager) {\n    cacheConfig.setSecurityManager(securityManager);\n    return this;\n  }\n  /**\n   * @see CacheFactory#setPostProcessor(PostProcessor)\n   */\n  public InternalCacheBuilder setPostProcessor(PostProcessor postProcessor) {\n    cacheConfig.setPostProcessor(postProcessor);\n    return this;\n  }\n  /**\n   * @see CacheFactory#setPdxSerializer(PdxSerializer)\n   */\n  public InternalCacheBuilder setPdxSerializer(PdxSerializer serializer) {\n    cacheConfig.setPdxSerializer(serializer);\n    return this;\n  }\n  /**\n   * @see CacheFactory#setPdxDiskStore(String)\n   */\n  public InternalCacheBuilder setPdxDiskStore(String diskStoreName) {\n    cacheConfig.setPdxDiskStore(diskStoreName);\n    return this;\n  }\n  /**\n   * @see CacheFactory#setPdxPersistent(boolean)\n   */\n  public InternalCacheBuilder setPdxPersistent(boolean isPersistent) {\n    cacheConfig.setPdxPersistent(isPersistent);\n    return this;\n  }\n  /**\n   * @see CacheFactory#setPdxIgnoreUnreadFields(boolean)\n   */\n  public InternalCacheBuilder setPdxIgnoreUnreadFields(boolean ignore) {\n    cacheConfig.setPdxIgnoreUnreadFields(ignore);\n    return this;\n  }\n  public InternalCacheBuilder setCacheXMLDescription(String cacheXML) {\n    if (cacheXML != null) {\n      cacheConfig.setCacheXMLDescription(cacheXML);\n    }\n    return this;\n  }\n  /**\n   * @param isExistingOk default is true.\n   */\n  public InternalCacheBuilder setIsExistingOk(boolean isExistingOk) {\n    this.isExistingOk = isExistingOk;\n    return this;\n  }\n  /**\n   * @param isClient default is false.\n   */\n  public InternalCacheBuilder setIsClient(boolean isClient) {\n    this.isClient = isClient;\n    return this;<fim_middle>// class below is blob and data class\n"}