{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.jena.atlas.json.io;\n\nimport java.util.ArrayDeque ;\nimport java.util.Deque ;\n\nimport org.apache.jena.atlas.json.* ;\nimport org.apache.jena.atlas.lib.InternalErrorException ;\nimport org.apache.jena.atlas.logging.Log ;\n\n\n/** Build a JSON structure */\n<fim_suffix>public class JSONMaker implements JSONHandler\n{\n    public JSONMaker() {}\n    \n    private JsonValue value = null ;\n    \n    private Deque<JsonArray> arrays = new ArrayDeque<>();\n    private Deque<JsonObject> objects = new ArrayDeque<>();\n\n    // The depth of this stack is the object depth.\n    private Deque<String> keys = new ArrayDeque<>();\n\n    public JsonValue jsonValue()\n    {\n        return value ;\n    }\n\n    @Override\n    public void startParse(long currLine, long currCol)\n    {}\n\n    @Override\n    public void finishParse(long currLine, long currCol)\n    {}\n    \n    @Override\n    public void startObject(long currLine, long currCol)\n    {\n        objects.push(new JsonObject()) ; \n    }\n\n    @Override\n    public void finishObject(long currLine, long currCol)\n    {\n        value = objects.pop() ; \n    }\n\n    @Override\n    public void startArray(long currLine, long currCol)\n    {\n        arrays.push(new JsonArray()) ;\n    }\n\n    @Override\n    public void element(long currLine, long currCol)\n    {\n        arrays.peek().add(value) ;\n        value = null ;\n    }\n\n    @Override\n    public void finishArray(long currLine, long currCol)\n    {\n        value = arrays.pop() ;\n    }\n\n    @Override\n    public void startPair(long currLine, long currCol)\n    { \n    }\n\n\n    @Override\n    public void keyPair(long currLine, long currCol)\n    {\n        keys.push(value.getAsString().value()) ;\n    }\n\n    @Override\n    public void finishPair(long currLine, long currCol)\n    {\n        if ( value == null )\n            throw new InternalErrorException(\"null for 'value' (bad finishPair() allignment)\") ;\n        \n        String k = keys.pop();\n        JsonObject obj = objects.peek() ;\n        if ( obj.hasKey(k) )\n            Log.warn(\"JSON\", \"Duplicate key '\"+k+\"' for object [\"+currLine+\",\"+currCol+\"]\") ;\n        obj.put(k, value) ;\n        value = null ;\n    }\n\n    @Override\n    public void valueBoolean(boolean b, long currLine, long currCol)\n    { \n        value = new JsonBoolean(b) ;\n    }\n\n    @Override\n    public void valueDecimal(String image, long currLine, long currCol)\n    {\n        value = JsonNumber.valueDecimal(image) ;\n    }\n\n    @Override\n    public void valueDouble(String image, long currLine, long currCol)\n    {\n        value = JsonNumber.valueDouble(image) ;\n    }\n\n    @Override\n    public void valueInteger(String image, long currLine, long currCol)\n    {\n        value = JsonNumber.valueInteger(image) ;\n    }\n\n    @Override\n    public void valueNull(long currLine, long currCol)\n    {\n        value = JsonNull.instance ;\n    }\n\n    @Override\n    public void valueString(String image, long currLine, long currCol)\n    {\n        value = new JsonString(image) ;\n    }\n}<fim_middle>// class below has no smell\n"}