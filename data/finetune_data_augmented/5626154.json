{"text": "<fim_prefix>\tprivate static final String FLASH_PREFIX = \"$flash_\"; //$NON-NLS-1$\n\tPlayerSession(Socket s, DProtocol proto, DManager manager, IDebuggerCallbacks debuggerCallbacks)\n\t{\n\t\tm_isConnected = false;\n\t\tm_isHalted = false;\n\t\tm_socket = s;\n\t\tm_protocol = proto;\n\t\tm_manager = manager;\n\t\tm_prefs = Collections.synchronizedMap(new HashMap<String, Object>());\n\t\tm_incoming = false;\n\t\tm_debugMsgOn = false;\n\t\tm_debugMsgSize = 16;\n\t\tm_debugMsgFileOn = false;\n\t\tm_debugMsgFileSize = 128;\n\t\tm_watchTransactionTag = 1;  // number that is sent for each watch transaction that occurs\n\t\tm_playerCanCallFunctions = null;\n\t\tm_debuggerCallbacks = debuggerCallbacks;\n\t\tm_isolateSessions = Collections.synchronizedMap(new HashMap<Integer, IsolateSession>());\n\t}\n\tprivate static PlayerSession createFromSocketHelper(Socket s, IDebuggerCallbacks debuggerCallbacks, DProtocol proto) throws IOException\n\t{\n\t\t// let the manager hear incoming messages\n\t\tDManager manager = new DManager();\n\t\tPlayerSession session = new PlayerSession(s, proto, manager, debuggerCallbacks);\n\t\treturn session;\n\t}\n\t/**\n\t * @deprecated Use createFromSocketWithOptions\n\t * @param s\n\t * @param debuggerCallbacks\n\t * @return\n\t * @throws IOException\n\t */\n\tpublic static PlayerSession createFromSocket(Socket s, IDebuggerCallbacks debuggerCallbacks) throws IOException\n\t{\n\t\tDProtocol proto = DProtocol.createFromSocket(s);\n\t\treturn createFromSocketHelper(s, debuggerCallbacks, proto);\n\t}\n\t/**\n\t * Creates a session from the socket. Sets session specific \n\t * socket settings and stores the callback object.\n\t * @param s\n\t * @param debuggerCallbacks\n\t * @param sessionManager\n\t * @return\n\t * @throws IOException\n\t */\n\tpublic static PlayerSession createFromSocketWithOptions(Socket s, IDebuggerCallbacks debuggerCallbacks, SessionManager sessionManager) throws IOException\n\t{\n\t\tDProtocol proto = DProtocol.createFromSocket(s, sessionManager);\n\t\treturn createFromSocketHelper(s, debuggerCallbacks, proto);\n\t}\n\t/* getter */\n\tpublic DMessageCounter\t\tgetMessageCounter()\t\t{ return m_protocol.getMessageCounter(); }\n\tpublic String\t\t\t\tgetURI()\t\t\t\t{ return m_manager.getURI(); }\n\tpublic boolean\t\t\t\tplayerSupportsGet()\t\t{ return m_manager.isGetSupported(); }\n    public int                  playerVersion()         { return m_manager.getVersion(); }\n    public SourceLocator        getSourceLocator()      { return m_manager.getSourceLocator(); }\n\t/*\n\t * @see flash.tools.debugger.Session#setSourceLocator(flash.tools.debugger.SourceLocator)\n\t */\n\tpublic void setSourceLocator(SourceLocator sourceLocator)\n\t{\n\t\tm_manager.setSourceLocator(sourceLocator);\n\t}\n\t/**\n\t * If the manager started the process for us, then note it here. We will attempt to kill\n\t * it when we go down\n\t */\n\tvoid setProcess(Process proc)\n\t{\n\t\tm_process = proc;\n\t}\n\t/*\n\t * @see flash.tools.debugger.Session#getLaunchProcess()\n\t */\n\tpublic Process getLaunchProcess()\n\t{\n\t\treturn m_process;\n\t}\n\t/**\n\t * Set preference\n\t * If an invalid preference is passed, it will be silently ignored.\n\t */\n\tpublic void\t\t\tsetPreferences(Map<String, ? extends Object> map)\t{ m_prefs.putAll(map); mapBack(); }\n\tpublic Set<String>\tkeySet()\t\t\t\t\t\t\t\t{ return m_prefs.keySet(); }\n\tpublic Object\t\tgetPreferenceAsObject(String pref)\t\t{ return m_prefs.get(pref); }\n\t/**\n\t * Set a property. Special logic for debug message boolean\n\t */\n\tpublic void setPreference(String pref, int value)\n\t{\n\t\tm_prefs.put(pref, new Integer(value));\n\t\tmapBack();\n\t\t// change in console messages?\n\t\tif (pref.equals(CONSOLE_ERRORS))\n\t\t\tsendConsoleErrorsAsTrace(value == 1);\n\t\t// generic message for flash player wherein \"$flash_xxx\" causes \"xxx\" to be sent\n\t\tif (pref.startsWith(FLASH_PREFIX))\n\t\t\tsendOptionMessage(pref.substring(FLASH_PREFIX.length()), Integer.toString(value));\n\t}\n\t// helper for mapBack()\n\tprivate int mapBackOnePreference(String preferenceName, int defaultValue)\n\t{\n\t\tObject prefValue = getPreferenceAsObject(preferenceName);\n\t\tif (prefValue != null)\n\t\t\treturn ((Integer)prefValue).intValue();\n\t\telse\n\t\t\treturn defaultValue;\n\t}\n\t// helper for mapBack()\n\tprivate boolean mapBackOnePreference(String preferenceName, boolean defaultValue)\n\t{\n\t\tObject prefValue = getPreferenceAsObject(preferenceName);\n\t\tif (prefValue != null)\n\t\t\treturn ((Integer)prefValue).intValue() != 0 ? true : false;\n\t\telse\n\t\t\treturn defaultValue;\n\t}\n\t// look for preferences, that map back to variables\n\tprivate void mapBack()\n\t{\n\t\tm_debugMsgOn = mapBackOnePreference(DEBUG_MESSAGES, m_debugMsgOn);\n\t\tm_debugMsgSize = mapBackOnePreference(DEBUG_MESSAGE_SIZE, m_debugMsgSize);\n\t\tm_debugMsgFileOn = mapBackOnePreference(DEBUG_MESSAGE_FILE, m_debugMsgFileOn);\n\t\tm_debugMsgFileSize = mapBackOnePreference(DEBUG_MESSAGE_FILE_SIZE, m_debugMsgFileSize);\n\t}\n\tpublic int getPreference(String pref)\n\t{\n\t\tint val = 0;\n\t\tInteger i = (Integer)m_prefs.get(pref);\n\t\tif (i == null)\n\t\t\tthrow new NullPointerException();\n\t\telse\n\t\t\tval = i.intValue();\n\t\treturn val;\n\t}\n\t/*\n\t * @see flash.tools.debugger.Session#isConnected()\n\t */\n\tpublic boolean isConnected()\n\t{\n\t\treturn m_isConnected;\n\t}\n\t/*\n\t * @see flash.tools.debugger.Session#isSuspended()\n\t */\n<fim_suffix>\tpublic boolean isSuspended() throws NotConnectedException\n\t{\n\t\tif (!isConnected())\n\t\t\tthrow new NotConnectedException();\n\t\treturn m_isHalted;\n\t}<fim_middle>// function below has no smell\n"}