{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.apex.malhar.contrib.kinesis;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * An shard manager interface used by  AbstractPartitionableKinesisInputOperator to define the customized initial positions and periodically update the current shard positions of all the operators\n * Ex. you could write shardManager to hdfs and load it back when restart the application\n *\n * @since 2.0.0\n */\n<fim_suffix>public class ShardManager\n{\n\n  protected final Map<String, String> shardPos = new HashMap<String, String>();\n  /**\n   * Load initial positions for all kinesis Shards\n   * The method is called at the first attempt of creating shards and the return value is used as initial positions for simple consumer\n   *\n   * @return Map of Kinesis shard id as key and sequence id as value\n   */\n  public Map<String, String> loadInitialShardPositions()\n  {\n    return shardPos;\n  }\n\n  /**\n   * @param shardPositions positions for specified shards, it is reported by individual operator instances\n   * The method is called every AbstractPartitionableKinesisInputOperator.getRepartitionCheckInterval() to update the current positions\n   */\n  public void updatePositions(Map<String, String> shardPositions)\n  {\n    shardPos.putAll(shardPositions);\n  }\n}<fim_middle>// class below has no smell\n"}