{"text": "<fim_prefix>    assertEquals(0, dv.nextDoc());\n    assertEquals(1, dv.docValueCount());\n    assertEquals(5, dv.nextValue());\n    assertEquals(NO_MORE_DOCS, dv.nextDoc());\n    reader.close();\n    directory.close();\n  }\n  public void testNumberMergeAwayAllValues() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"0\", Field.Store.NO));\n    iwriter.addDocument(doc);    \n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    doc.add(new NumericDocValuesField(\"field\", 5));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    iwriter.deleteDocuments(new Term(\"id\", \"1\"));\n    iwriter.forceMerge(1);\n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n    NumericDocValues dv = getOnlyLeafReader(ireader).getNumericDocValues(\"field\");\n    assertEquals(NO_MORE_DOCS, dv.nextDoc());\n    ireader.close();\n    directory.close();\n  }\n  public void testTwoSortedNumber() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    doc.add(new SortedNumericDocValuesField(\"dv\", -5));\n    writer.addDocument(doc);\n    writer.close();\n    // Now search the index:\n    IndexReader reader = DirectoryReader.open(directory);\n    assert reader.leaves().size() == 1;\n    SortedNumericDocValues dv = reader.leaves().get(0).reader().getSortedNumericDocValues(\"dv\");\n    assertEquals(0, dv.nextDoc());\n    assertEquals(2, dv.docValueCount());\n    assertEquals(-5, dv.nextValue());\n    assertEquals(11, dv.nextValue());\n    reader.close();\n    directory.close();\n  }\n  public void testTwoSortedNumberSameValue() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    writer.addDocument(doc);\n    writer.close();\n    // Now search the index:\n    IndexReader reader = DirectoryReader.open(directory);\n    assert reader.leaves().size() == 1;\n    SortedNumericDocValues dv = reader.leaves().get(0).reader().getSortedNumericDocValues(\"dv\");\n    assertEquals(0, dv.nextDoc());\n    assertEquals(2, dv.docValueCount());\n    assertEquals(11, dv.nextValue());\n    assertEquals(11, dv.nextValue());\n    reader.close();\n    directory.close();\n  }\n  public void testTwoSortedNumberOneMissing() throws IOException {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    doc.add(new SortedNumericDocValuesField(\"dv\", -5));\n    writer.addDocument(doc);\n    writer.addDocument(new Document());\n    writer.close();\n    // Now search the index:\n    IndexReader reader = DirectoryReader.open(directory);\n    assert reader.leaves().size() == 1;\n    SortedNumericDocValues dv = reader.leaves().get(0).reader().getSortedNumericDocValues(\"dv\");\n    assertEquals(0, dv.nextDoc());\n    assertEquals(2, dv.docValueCount());\n    assertEquals(-5, dv.nextValue());\n    assertEquals(11, dv.nextValue());\n    assertEquals(NO_MORE_DOCS, dv.nextDoc());\n    reader.close();\n    directory.close();\n  }\n  public void testSortedNumberMerge() throws IOException {\n    Directory directory = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    writer.addDocument(doc);\n    writer.commit();\n    doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", -5));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n    // Now search the index:\n    IndexReader reader = DirectoryReader.open(directory);\n    assert reader.leaves().size() == 1;\n    SortedNumericDocValues dv = reader.leaves().get(0).reader().getSortedNumericDocValues(\"dv\");\n    assertEquals(0, dv.nextDoc());\n    assertEquals(1, dv.docValueCount());\n    assertEquals(11, dv.nextValue());\n    assertEquals(1, dv.nextDoc());\n    assertEquals(1, dv.docValueCount());\n    assertEquals(-5, dv.nextValue());\n    reader.close();\n    directory.close();\n  }\n  public void testSortedNumberMergeAwayAllValues() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"0\", Field.Store.NO));\n    iwriter.addDocument(doc);    \n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    doc.add(new SortedNumericDocValuesField(\"field\", 5));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    iwriter.deleteDocuments(new Term(\"id\", \"1\"));\n    iwriter.forceMerge(1);\n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n    SortedNumericDocValues dv = getOnlyLeafReader(ireader).getSortedNumericDocValues(\"field\");\n    assertEquals(NO_MORE_DOCS, dv.nextDoc());\n    ireader.close();\n    directory.close();\n  }\n  public void testSortedEnumAdvanceIndependently() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    Document doc = new Document();\n    SortedDocValuesField field = new SortedDocValuesField(\"field\", new BytesRef(\"2\"));\n    doc.add(field);\n    iwriter.addDocument(doc);\n    field.setBytesValue(new BytesRef(\"1\"));\n    iwriter.addDocument(doc);\n    field.setBytesValue(new BytesRef(\"3\"));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    iwriter.forceMerge(1);\n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n    SortedDocValues dv = getOnlyLeafReader(ireader).getSortedDocValues(\"field\");\n    doTestSortedSetEnumAdvanceIndependently(DocValues.singleton(dv));\n    ireader.close();\n    directory.close();\n  }\n<fim_suffix>  public void testSortedSetEnumAdvanceIndependently() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    Document doc = new Document();\n    SortedSetDocValuesField field1 = new SortedSetDocValuesField(\"field\", new BytesRef(\"2\"));\n    SortedSetDocValuesField field2 = new SortedSetDocValuesField(\"field\", new BytesRef(\"3\"));\n    doc.add(field1);\n    doc.add(field2);\n    iwriter.addDocument(doc);\n    field1.setBytesValue(new BytesRef(\"1\"));\n    iwriter.addDocument(doc);\n    field2.setBytesValue(new BytesRef(\"2\"));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    iwriter.forceMerge(1);\n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n    SortedSetDocValues dv = getOnlyLeafReader(ireader).getSortedSetDocValues(\"field\");\n    doTestSortedSetEnumAdvanceIndependently(dv);\n    ireader.close();\n    directory.close();\n  }<fim_middle>// function below has no smell\n"}