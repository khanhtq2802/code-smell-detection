{"text": "<fim_prefix>/*\n * Copyright 2011-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.security.cas.web.authentication;\n\nimport java.net.MalformedURLException;\nimport java.util.regex.Pattern;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.springframework.security.authentication.AuthenticationDetailsSource;\nimport org.springframework.security.cas.ServiceProperties;\nimport org.springframework.util.Assert;\n\n/**\n * The {@code AuthenticationDetailsSource} that is set on the\n * {@code CasAuthenticationFilter} should return a value that implements\n * {@code ServiceAuthenticationDetails} if the application needs to authenticate dynamic\n * service urls. The\n * {@code ServiceAuthenticationDetailsSource#buildDetails(HttpServletRequest)} creates a\n * default {@code ServiceAuthenticationDetails}.\n *\n * @author Rob Winch\n */\n<fim_suffix>public class ServiceAuthenticationDetailsSource implements\n\t\tAuthenticationDetailsSource<HttpServletRequest, ServiceAuthenticationDetails> {\n\t// ~ Instance fields\n\t// ================================================================================================\n\n\tprivate final Pattern artifactPattern;\n\n\tprivate ServiceProperties serviceProperties;\n\n\t// ~ Constructors\n\t// ===================================================================================================\n\n\t/**\n\t * Creates an implementation that uses the specified ServiceProperites and the default\n\t * CAS artifactParameterName.\n\t *\n\t * @param serviceProperties The ServiceProperties to use to construct the serviceUrl.\n\t */\n\tpublic ServiceAuthenticationDetailsSource(ServiceProperties serviceProperties) {\n\t\tthis(serviceProperties, ServiceProperties.DEFAULT_CAS_ARTIFACT_PARAMETER);\n\t}\n\n\t/**\n\t * Creates an implementation that uses the specified artifactParameterName\n\t *\n\t * @param serviceProperties The ServiceProperties to use to construct the serviceUrl.\n\t * @param artifactParameterName the artifactParameterName that is removed from the\n\t * current URL. The result becomes the service url. Cannot be null and cannot be an\n\t * empty String.\n\t */\n\tpublic ServiceAuthenticationDetailsSource(ServiceProperties serviceProperties,\n\t\t\tString artifactParameterName) {\n\t\tAssert.notNull(serviceProperties, \"serviceProperties cannot be null\");\n\t\tthis.serviceProperties = serviceProperties;\n\t\tthis.artifactPattern = DefaultServiceAuthenticationDetails\n\t\t\t\t.createArtifactPattern(artifactParameterName);\n\t}\n\n\t// ~ Methods\n\t// ========================================================================================================\n\n\t/**\n\t * @param context the {@code HttpServletRequest} object.\n\t * @return the {@code ServiceAuthenticationDetails} containing information about the\n\t * current request\n\t */\n\tpublic ServiceAuthenticationDetails buildDetails(HttpServletRequest context) {\n\t\ttry {\n\t\t\treturn new DefaultServiceAuthenticationDetails(\n\t\t\t\t\tserviceProperties.getService(), context, artifactPattern);\n\t\t}\n\t\tcatch (MalformedURLException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n}<fim_middle>// class below has no smell\n"}