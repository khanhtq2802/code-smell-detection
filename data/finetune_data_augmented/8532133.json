{"text": "<fim_prefix>// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\npackage org.apache.cloudstack.network.contrail.management;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.concurrent.locks.ReentrantLock;\nimport javax.inject.Inject;\nimport net.juniper.contrail.api.ApiConnector;\nimport net.juniper.contrail.api.ApiObjectBase;\nimport net.juniper.contrail.api.ApiPropertyBase;\nimport net.juniper.contrail.api.ObjectReference;\nimport net.juniper.contrail.api.types.FloatingIp;\nimport net.juniper.contrail.api.types.FloatingIpPool;\nimport net.juniper.contrail.api.types.NetworkPolicy;\nimport net.juniper.contrail.api.types.InstanceIp;\nimport net.juniper.contrail.api.types.ServiceInstance;\nimport net.juniper.contrail.api.types.VirtualMachine;\nimport net.juniper.contrail.api.types.VirtualMachineInterface;\nimport net.juniper.contrail.api.types.VirtualNetwork;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.springframework.stereotype.Component;\nimport org.apache.cloudstack.network.contrail.model.FloatingIpModel;\nimport org.apache.cloudstack.network.contrail.model.FloatingIpPoolModel;\nimport org.apache.cloudstack.network.contrail.model.NetworkPolicyModel;\nimport org.apache.cloudstack.network.contrail.model.ServiceInstanceModel;\nimport org.apache.cloudstack.network.contrail.model.VMInterfaceModel;\nimport org.apache.cloudstack.network.contrail.model.VirtualMachineModel;\nimport org.apache.cloudstack.network.contrail.model.VirtualNetworkModel;\nimport com.cloud.dc.dao.VlanDao;\nimport com.cloud.domain.DomainVO;\nimport com.cloud.domain.dao.DomainDao;\nimport com.cloud.exception.InternalErrorException;\nimport com.cloud.network.IpAddress;\nimport com.cloud.network.Networks.TrafficType;\nimport com.cloud.network.addr.PublicIp;\nimport com.cloud.network.dao.IPAddressVO;\nimport com.cloud.network.dao.NetworkDao;\nimport com.cloud.network.dao.NetworkVO;\nimport com.cloud.network.dao.PhysicalNetworkDao;\nimport com.cloud.network.dao.PhysicalNetworkServiceProviderDao;\nimport com.cloud.network.vpc.NetworkACLItemDao;\nimport com.cloud.network.vpc.NetworkACLItemVO;\nimport com.cloud.network.vpc.NetworkACLVO;\nimport com.cloud.network.vpc.dao.NetworkACLDao;\nimport com.cloud.network.vpc.VpcVO;\nimport com.cloud.network.vpc.dao.VpcDao;\nimport com.cloud.projects.ProjectVO;\nimport com.cloud.projects.dao.ProjectDao;\nimport com.cloud.vm.NicVO;\nimport com.cloud.vm.VMInstanceVO;\nimport com.cloud.vm.dao.NicDao;\nimport com.cloud.vm.dao.VMInstanceDao;\n@Component\npublic class ServerDBSyncImpl implements ServerDBSync {\n    @Inject\n    DomainDao _domainDao;\n    @Inject\n    ProjectDao _projectDao;\n    @Inject\n    NetworkDao _networksDao;\n    @Inject\n    VMInstanceDao _vmInstanceDao;\n    @Inject\n    NicDao _nicDao;\n    @Inject\n    VlanDao _vlanDao;\n    @Inject\n    PhysicalNetworkDao _physicalNetworkDao;\n    @Inject\n    PhysicalNetworkServiceProviderDao _physProviderDao;\n    @Inject\n    ContrailManager _manager;\n    @Inject\n    VpcDao _vpcDao;\n    @Inject\n    NetworkACLItemDao _networkACLItemDao;\n    @Inject\n    NetworkACLDao _networkACLDao;\n    DBSyncGeneric _dbSync;\n    Class<?>[] _vncClasses;\n    // Read-Write (true) or Read-Only mode.\n    boolean _rwMode;\n    private final ReentrantLock _lockSyncMode = new ReentrantLock();\n    ServerDBSyncImpl() {\n        _vncClasses =\n            new Class[] {net.juniper.contrail.api.types.Domain.class, net.juniper.contrail.api.types.Project.class, NetworkPolicy.class, VirtualNetwork.class,\n                VirtualMachine.class, ServiceInstance.class, FloatingIp.class};\n        _dbSync = new DBSyncGeneric(this);\n    }\n    private static final Logger s_logger = Logger.getLogger(ServerDBSync.class);\n    /*\n     * API for syncing all classes of vnc objects with cloudstack\n     *\n     * Sync cloudstack and vnc objects.\n     * Order has to be maintained\n     */\n<fim_suffix>    @Override\n    public short syncAll(short syncMode) {\n        short syncState = SYNC_STATE_IN_SYNC;\n        /* vnc classes need to be synchronized with cloudstack */\n        s_logger.debug(\"syncing cloudstack db with vnc\");\n        try {\n            for (Class<?> cls : _vncClasses) {\n                /* lock the sync mode*/\n                _lockSyncMode.lock();\n                _rwMode = syncMode == DBSyncGeneric.SYNC_MODE_UPDATE;\n                _dbSync.setSyncMode(syncMode);\n                if (_dbSync.getSyncMode() == DBSyncGeneric.SYNC_MODE_CHECK) {\n                    s_logger.debug(\"sync check start: \" + DBSyncGeneric.getClassName(cls));\n                } else {\n                    s_logger.debug(\"sync start: \" + DBSyncGeneric.getClassName(cls));\n                }\n                if (_dbSync.sync(cls) == false) {\n                    if (_dbSync.getSyncMode() == DBSyncGeneric.SYNC_MODE_CHECK) {\n                        s_logger.info(\"out of sync detected: \" + DBSyncGeneric.getClassName(cls));\n                    } else {\n                        s_logger.info(\"out of sync detected and re-synced: \" + DBSyncGeneric.getClassName(cls));\n                    }\n                    syncState = SYNC_STATE_OUT_OF_SYNC;\n                }\n                if (_dbSync.getSyncMode() == DBSyncGeneric.SYNC_MODE_CHECK) {\n                    s_logger.debug(\"sync check finish: \" + DBSyncGeneric.getClassName(cls));\n                } else {\n                    s_logger.debug(\"sync finish: \" + DBSyncGeneric.getClassName(cls));\n                }\n                /* unlock the sync mode */\n                _lockSyncMode.unlock();\n            }\n        } catch (Exception ex) {\n            s_logger.warn(\"DB Synchronization\", ex);\n            syncState = SYNC_STATE_UNKNOWN;\n            if (_lockSyncMode.isLocked()) {\n                _lockSyncMode.unlock();\n            }\n        }\n        return syncState;\n    }\n    @Override\n    public void syncClass(Class<?> cls) {\n        s_logger.debug(\"syncClass: \" + cls.getName());\n        try {\n            s_logger.debug(\"sync start: \" + DBSyncGeneric.getClassName(cls));\n            _lockSyncMode.lock();\n            _dbSync.setSyncMode(DBSyncGeneric.SYNC_MODE_UPDATE);\n            _dbSync.sync(cls);\n            _lockSyncMode.unlock();\n            s_logger.debug(\"sync finish: \" + DBSyncGeneric.getClassName(cls));\n        } catch (Exception ex) {\n            s_logger.warn(\"Sync error: \" + cls.getName(), ex);\n            if (_lockSyncMode.isLocked()) {\n                _lockSyncMode.unlock();\n            }\n        }\n    }\n    public <T extends ApiPropertyBase> void deleteChildren(List<ObjectReference<T>> childs, Class<?> childCls, StringBuffer syncLogMesg) throws Exception {\n        final ApiConnector api = _manager.getApiConnector();\n        if (childs == null) {\n            syncLogMesg.append(\"no children of type: \" + childCls.getName() + \"\\n\");<fim_middle>// function below is long method\n"}