{"text": "<fim_prefix>/*\n * Tencent is pleased to support the open source community by making QMUI_Android available.\n *\n * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the MIT License (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * http://opensource.org/licenses/MIT\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.qmuiteam.qmuidemo.fragment;\nimport android.animation.Animator;\nimport android.animation.AnimatorListenerAdapter;\nimport android.animation.ObjectAnimator;\nimport android.graphics.Bitmap;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.webkit.DownloadListener;\nimport android.webkit.WebChromeClient;\nimport android.webkit.WebView;\nimport android.widget.FrameLayout;\nimport android.widget.ProgressBar;\nimport android.widget.ZoomButtonsController;\nimport com.qmuiteam.qmui.util.QMUILangHelper;\nimport com.qmuiteam.qmui.util.QMUIResHelper;\nimport com.qmuiteam.qmui.widget.QMUITopBarLayout;\nimport com.qmuiteam.qmui.widget.dialog.QMUIDialog;\nimport com.qmuiteam.qmui.widget.dialog.QMUIDialogAction;\nimport com.qmuiteam.qmui.widget.webview.QMUIWebView;\nimport com.qmuiteam.qmui.widget.webview.QMUIWebViewClient;\nimport com.qmuiteam.qmui.widget.webview.QMUIWebViewContainer;\nimport com.qmuiteam.qmuidemo.R;\nimport com.qmuiteam.qmuidemo.base.BaseFragment;\nimport com.qmuiteam.qmuidemo.view.QDWebView;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.reflect.Field;\nimport java.net.URLDecoder;\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\n/**\n * Created by cgspine on 2017/12/4.\n */\npublic class QDWebExplorerFragment extends BaseFragment {\n    public static final String EXTRA_URL = \"EXTRA_URL\";\n    public static final String EXTRA_TITLE = \"EXTRA_TITLE\";\n    public static final String EXTRA_NEED_DECODE = \"EXTRA_NEED_DECODE\";\n    private final static int PROGRESS_PROCESS = 0;\n    private final static int PROGRESS_GONE = 1;\n    @BindView(R.id.topbar) protected QMUITopBarLayout mTopBarLayout;\n    @BindView(R.id.webview_container) QMUIWebViewContainer mWebViewContainer;\n    @BindView(R.id.progress_bar) ProgressBar mProgressBar;\n    private QDWebView mWebView;\n    private String mUrl;\n    private String mTitle;\n    private ProgressHandler mProgressHandler;\n    private boolean mIsPageFinished = false;\n    private boolean mNeedDecodeUrl = false;\n    @Override\n    protected View onCreateView() {\n        Bundle bundle = getArguments();\n        if (bundle != null) {\n            String url = bundle.getString(EXTRA_URL);\n            mTitle = bundle.getString(EXTRA_TITLE);\n            mNeedDecodeUrl = bundle.getBoolean(EXTRA_NEED_DECODE, false);\n            if (url != null && url.length() > 0) {\n                handleUrl(url);\n            }\n        }\n        mProgressHandler = new ProgressHandler();\n        View view = LayoutInflater.from(getContext()).inflate(R.layout.fragment_webview_explorer, null);\n        ButterKnife.bind(this, view);\n        initTopbar();\n        initWebView();\n        return view;\n    }\n    protected void initTopbar() {\n        mTopBarLayout.addLeftBackImageButton().setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                popBackStack();\n            }\n        });\n        updateTitle(mTitle);\n    }\n    private void updateTitle(String title) {\n        if (title != null && !title.equals(\"\")) {\n            mTitle = title;\n            mTopBarLayout.setTitle(mTitle);\n        }\n    }\n    protected boolean needDispatchSafeAreaInset() {\n        return false;\n    }\n    protected void initWebView() {\n        mWebView = new QDWebView(getContext());\n        boolean needDispatchSafeAreaInset = needDispatchSafeAreaInset();\n        mWebViewContainer.addWebView(mWebView, needDispatchSafeAreaInset);\n        mWebViewContainer.setCustomOnScrollChangeListener(new QMUIWebView.OnScrollChangeListener() {\n            @Override\n            public void onScrollChange(WebView v, int scrollX, int scrollY, int oldScrollX, int oldScrollY) {\n                onScrollWebContent(scrollX, scrollY, oldScrollX, oldScrollY);\n            }\n        });\n        FrameLayout.LayoutParams containerLp = (FrameLayout.LayoutParams) mWebViewContainer.getLayoutParams();\n        mWebViewContainer.setFitsSystemWindows(!needDispatchSafeAreaInset);\n        containerLp.topMargin = needDispatchSafeAreaInset ? 0 : QMUIResHelper.getAttrDimen(getContext(), R.attr.qmui_topbar_height);\n        mWebViewContainer.setLayoutParams(containerLp);\n        mWebView.setDownloadListener(new DownloadListener() {\n            @Override\n            public void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {\n                boolean needConfirm = !url.startsWith(\"http://qmuiteam.com\") && !url.startsWith(\"https://qmuiteam.com\");\n                if (needConfirm) {\n                    final String finalURL = url;\n                    new QMUIDialog.MessageDialogBuilder(getContext())\n                            .setMessage(\"\u786e\u8ba4\u4e0b\u8f7d\u6b64\u6587\u4ef6\uff1f\")\n                            .addAction(R.string.cancel, new QMUIDialogAction.ActionListener() {\n                                @Override\n                                public void onClick(QMUIDialog dialog, int index) {\n                                    dialog.dismiss();\n                                    popBackStack();\n                                }\n                            })\n                            .addAction(R.string.ok, new QMUIDialogAction.ActionListener() {\n                                @Override\n                                public void onClick(QMUIDialog dialog, int index) {\n                                    dialog.dismiss();\n                                    doDownload(finalURL);\n                                    popBackStack();\n                                }\n                            })\n                            .show();\n                } else {\n                    doDownload(url);\n                }\n            }\n            private void doDownload(String url) {\n            }\n        });\n        mWebView.setWebChromeClient(getWebViewChromeClient());\n        mWebView.setWebViewClient(getWebViewClient());\n        mWebView.requestFocus(View.FOCUS_DOWN);\n        setZoomControlGone(mWebView);\n        configWebView(mWebViewContainer, mWebView);\n        mWebView.loadUrl(mUrl);\n    }\n<fim_suffix>    protected void configWebView(QMUIWebViewContainer webViewContainer, QMUIWebView webView) {\n    }\n    protected void onScrollWebContent(int scrollX, int scrollY, int oldScrollX, int oldScrollY) {\n    }\n    private void handleUrl(String url) {\n        if (mNeedDecodeUrl) {\n            String decodeURL;\n            try {\n                decodeURL = URLDecoder.decode(url, \"utf-8\");\n            } catch (UnsupportedEncodingException ignored) {\n                decodeURL = url;\n            }\n            mUrl = decodeURL;\n        } else {\n            mUrl = url;\n        }\n    }\n    protected WebChromeClient getWebViewChromeClient() {\n        return new ExplorerWebViewChromeClient(this);\n    }\n    protected QMUIWebViewClient getWebViewClient() {\n        return new ExplorerWebViewClient(needDispatchSafeAreaInset());\n    }\n    private void sendProgressMessage(int progressType, int newProgress, int duration) {\n        Message msg = new Message();\n        msg.what = progressType;\n        msg.arg1 = newProgress;\n        msg.arg2 = duration;\n        mProgressHandler.sendMessage(msg);\n    }\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        mWebViewContainer.destroy();\n        mWebView = null;\n    }\n    public static void setZoomControlGone(WebView webView) {\n        webView.getSettings().setDisplayZoomControls(false);\n        @SuppressWarnings(\"rawtypes\")\n        Class classType;\n        Field field;\n        try {\n            classType = WebView.class;\n            field = classType.getDeclaredField(\"mZoomButtonsController\");\n            field.setAccessible(true);\n            ZoomButtonsController zoomButtonsController = new ZoomButtonsController(\n                    webView);\n            zoomButtonsController.getZoomControls().setVisibility(View.GONE);\n            try {\n                field.set(webView, zoomButtonsController);\n            } catch (IllegalArgumentException | IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        } catch (SecurityException | NoSuchFieldException e) {<fim_middle>// function below has no smell\n"}