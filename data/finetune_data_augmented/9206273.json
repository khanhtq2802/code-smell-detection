{"text": "<fim_prefix>\t\t\t\"MAX\", //$NON-NLS-1$\n\t\t\t\"MIN\", //$NON-NLS-1$\n\t\t\t\"FIRST\", //$NON-NLS-1$\n\t\t\t\"LAST\", //$NON-NLS-1$\n\t\t\t\"COUNT\" //$NON-NLS-1$\n//\t\t\t\"RANGE\", //$NON-NLS-1$\n//\t\t\t\"COUNTDISTINCT\"//$NON-NLS-1$\t// Temporarily remove count distinct aggregation function. \n\t};\n\tprivate static List allAggrNames = new ArrayList( );\n\t/**\n\t * Return a shared instance of AggregationManager.\n\t * \n\t * @return\n\t * @throws DataException\n\t */\n\tpublic static AggregationManager getInstance( ) throws DataException\n\t{\n\t\tif ( instance == null )\n\t\t{\n\t\t\tsynchronized ( AggregationManager.class )\n\t\t\t{\n\t\t\t\tif ( instance == null )\n\t\t\t\t{\n\t\t\t\t\taggrMap = new HashMap( );\n\t\t\t\t\tinstance = new AggregationManager( );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n\t/**\n\t * \n\t */\n\tprivate AggregationManager( ) throws DataException\n\t{\n\t\tpopulateAggregations( );\n\t}\n\t/**\n\t * \n\t * @throws DataException\n\t */\n\tprivate void populateAggregations( ) throws DataException\n\t{\n\t\tIExtensionRegistry extReg = Platform.getExtensionRegistry( );\n\t\tIExtensionPoint extPoint = extReg.getExtensionPoint( EXTENSION_POINT );\n\t\tif ( extPoint == null )\n\t\t\treturn;\n\t\tIExtension[] exts = extPoint.getExtensions( );\n\t\tif ( exts == null )\n\t\t\treturn;\n\t\tfor ( int e = 0; e < exts.length; e++ )\n\t\t{\n\t\t\tIConfigurationElement[] configElems = exts[e].getConfigurationElements( );\n\t\t\tif ( configElems == null )\n\t\t\t\tcontinue;\n\t\t\tfor ( int i = 0; i < configElems.length; i++ )\n\t\t\t{\n\t\t\t\tif ( configElems[i].getName( ).equals( ELEMENT_AGGREGATIONS ) )\n\t\t\t\t{\n\t\t\t\t\tIConfigurationElement[] subElems = configElems[i].getChildren( ELEMENT_AGGREGATION_FACTORY );\n\t\t\t\t\tpopulateFactoryAggregations( subElems );\n\t\t\t\t\tsubElems = configElems[i].getChildren( ELEMENT_AGGREGATION );\n\t\t\t\t\tpopulateDeprecatedAggregations( subElems );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * \n\t * @param subElems\n\t * @throws DataException\n\t */\n\tprivate void populateFactoryAggregations( IConfigurationElement[] subElems )\n\t\t\tthrows DataException\n\t{\n\t\tif ( subElems == null )\n\t\t\treturn;\n\t\tfor ( int j = 0; j < subElems.length; j++ )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIAggregationFactory factory = (IAggregationFactory) subElems[j].createExecutableExtension( \"class\" );\n\t\t\t\tList functions = factory.getAggregations( );\n\t\t\t\tfor ( Iterator itr = functions.iterator( ); itr.hasNext( ); )\n\t\t\t\t{\n\t\t\t\t\tIAggrFunction aggrFunc = (IAggrFunction) itr.next( );\n\t\t\t\t\tString name = aggrFunc.getName( ).toUpperCase( );\n\t\t\t\t\tif ( aggrMap.put( name, aggrFunc ) != null )\n\t\t\t\t\t\tthrow new DataException( ResourceConstants.DUPLICATE_AGGREGATION_NAME,\n\t\t\t\t\t\t\t\tname );\n\t\t\t\t\tallAggrNames.add( name );\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch ( FrameworkException exception )\n\t\t\t{\n\t\t\t\t// TODO: log this exception or provide public\n\t\t\t\t// interface for the user to get uninstantiated\n\t\t\t\t// function names\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * \n\t * @param subElems\n\t * @throws DataException\n\t */\n\tprivate void populateDeprecatedAggregations(\n\t\t\tIConfigurationElement[] subElems ) throws DataException\n\t{\n\t\tif ( subElems == null )\n\t\t\treturn;\n\t\tfor ( int j = 0; j < subElems.length; j++ )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIAggregation aggrFunc = (IAggregation) subElems[j].createExecutableExtension( ATTRIBUTE_AGGREGATION_CLASS );\n\t\t\t\tString name = aggrFunc.getName( ).toUpperCase( );\n\t\t\t\tAggrFunctionWrapper aggrWrapper = new AggrFunctionWrapper( aggrFunc );\n\t\t\t\tpopulateExtendedAggrInfo( name,\n\t\t\t\t\t\taggrFunc,\n\t\t\t\t\t\tsubElems[j],\n\t\t\t\t\t\taggrWrapper );\n\t\t\t\tif ( aggrMap.put( name, aggrWrapper ) != null )\n\t\t\t\t\tthrow new DataException( ResourceConstants.DUPLICATE_AGGREGATION_NAME,\n\t\t\t\t\t\t\tname );\n\t\t\t\tallAggrNames.add( name );\n\t\t\t}\n\t\t\tcatch ( Exception e )\n\t\t\t{\n\t\t\t\tlogger.logp( Level.WARNING,\n\t\t\t\t\t\tAggrFunctionWrapper.class.getName( ),\n\t\t\t\t\t\t\"populateDeprecatedAggregations\",\n\t\t\t\t\t\t\"Exception in aggregation extension loading.\",\n\t\t\t\t\t\te );\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * populate the extended extensions information.\n\t * \n\t * @param name\n\t * @param aggrFunc\n\t * @param elem\n\t * @param aggrWrapper \n\t */\n\tprivate void populateExtendedAggrInfo( String name, IAggregation aggrFunc,\n\t\t\tIConfigurationElement elem, AggrFunctionWrapper aggrWrapper ) throws DataException\n\t{\n\t\tIConfigurationElement[] uiInfo = elem.getChildren( ELEMENT_UIINFO );\n\t\tassert ( uiInfo != null && uiInfo.length == 1 );\n\t\tString paramInfo = uiInfo[0].getAttribute( ATTRIBUTE_PARAMETER_META_INFO );\n\t\tString textInfo = uiInfo[0].getAttribute( ATTRIBUTE_TEXT_DATA );\n\t\taggrWrapper.setDisplayName( textInfo );\n\t\t// populate parameters to the aggrWrapper\n\t\tList paramList = new ArrayList( );\n\t\tString[] paramInfos = paramInfo.split( \",\" );//$NON-NLS-1$\n\t\tboolean[] paramFlags = aggrFunc.getParameterDefn( );\n\t\tif ( paramInfos != null && paramInfos.length > 0 && paramFlags != null )\n\t\t{\n\t\t\tif( paramInfos.length != paramFlags.length )\n\t\t\t\tthrow new DataException( ResourceConstants.INCONSISTENT_AGGREGATION_ARGUMENT_DEFINITION );\n\t\t\t//populateDataFiledParameterDefn( paramList );\n\t\t\tfor ( int k = 0; k < paramInfos.length; k++ )\n\t\t\t{\n\t\t\t\tfinal String s = paramInfos[k].trim( );\n\t\t\t\tint index = s.indexOf( ' ' );\n\t\t\t\tString paramName = null;\n\t\t\t\tif ( index > 0 )\n\t\t\t\t{\n\t\t\t\t\tparamName = s.substring( index + 1 ).trim( );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparamName = paramInfos[k];\n\t\t\t\t}\n\t\t\t\tParameterDefn paramDefn = new ParameterDefn( paramName,\n\t\t\t\t\t\tparamName,\n\t\t\t\t\t\t!paramFlags[k],\n\t\t\t\t\t\ttrue );\n\t\t\t\tparamList.add( paramDefn );\n\t\t\t}\n\t\t}\n\t\tIParameterDefn[] params = new IParameterDefn[paramList.size( )];\n\t\tparamList.toArray( params );\n\t\taggrWrapper.setParameterDefn( params );\n\t}\n\t/**\n\t * populate the default expression parameter definition to the paramList.\n\t * \n\t * @param paramList\n\t */\n\tprivate void populateDataFiledParameterDefn( List paramList )\n\t{\n\t\tString expression = DataResourceHandle.getInstance( )\n\t\t\t\t.getMessage( ResourceConstants.AGGREGATION_EXPRESSION_DISPLAY_NAME );\n\t\tParameterDefn expressionDefn = new ParameterDefn( \"Expression\",//$NON-NLS-1$\n\t\t\t\texpression,\n\t\t\t\tfalse,\n\t\t\t\ttrue );\n\t\tparamList.add( expressionDefn );\n\t}\n\t/**\n\t * Destroy shared instance of AggregationManager.\n\t * \n\t */\n\tpublic static void destroyInstance( )\n\t{\n\t\tinstance = null;\n\t\taggrMap = null;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.birt.data.engine.api.aggregation.IAggregationManager#getAggrFunction(java.lang.String)\n\t */\n<fim_suffix>\tpublic IAggrFunction getAggregation( String name )\n\t{\n\t\treturn name != null ? (IAggrFunction) aggrMap.get( name.toUpperCase( ) )\n\t\t\t\t: null;\n\t}<fim_middle>// function below has no smell\n"}