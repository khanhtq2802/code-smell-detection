{"text": "<fim_prefix>     * the iterable.\n     */\n    public static Predicates<Object> notIn(Iterable<?> iterable)\n    {\n        if (iterable instanceof SetIterable<?>)\n        {\n            return new NotInSetIterablePredicate((SetIterable<?>) iterable);\n        }\n        if (iterable instanceof Set<?>)\n        {\n            return new NotInSetPredicate((Set<?>) iterable);\n        }\n        if (iterable instanceof Collection<?> && ((Collection<?>) iterable).size() <= SMALL_COLLECTION_THRESHOLD)\n        {\n            return new NotInCollectionPredicate((Collection<?>) iterable);\n        }\n        return new NotInSetIterablePredicate(UnifiedSet.newSet(iterable));\n    }\n    public static Predicates<Object> notIn(Object... array)\n    {\n        if (array.length <= SMALL_COLLECTION_THRESHOLD)\n        {\n            return new NotInCollectionPredicate(Arrays.asList(array));\n        }\n        return new NotInSetIterablePredicate(UnifiedSet.newSetWith(array));\n    }\n    /**\n     * Creates a predicate which returns true if an attribute selected from an object passed to accept method\n     * is not contained in the iterable.\n     */\n    public static <T> Predicates<T> attributeNotIn(\n            Function<? super T, ?> function,\n            Iterable<?> iterable)\n    {\n        return new AttributePredicate<>(function, Predicates.notIn(iterable));\n    }\n    public static <T extends Comparable<? super T>> Predicates<T> lessThan(T object)\n    {\n        return new LessThanPredicate<>(object);\n    }\n    public static <T, V extends Comparable<? super V>> Predicates<T> attributeLessThan(\n            Function<? super T, ? extends V> function,\n            V object)\n    {\n        return new AttributePredicate<>(function, new LessThanPredicate<>(object));\n    }\n    public static <T extends Comparable<? super T>> Predicates<T> lessThanOrEqualTo(T object)\n    {\n        return new LessThanOrEqualPredicate<>(object);\n    }\n    public static <T, V extends Comparable<? super V>> Predicates<T> attributeLessThanOrEqualTo(\n            Function<? super T, ? extends V> function,\n            V object)\n    {\n        return new AttributePredicate<>(function, new LessThanOrEqualPredicate<>(object));\n    }\n    public static <T extends Comparable<? super T>> Predicates<T> greaterThan(T object)\n    {\n        return new GreaterThanPredicate<>(object);\n    }\n    public static <T, V extends Comparable<? super V>> Predicates<T> attributeGreaterThan(\n            Function<? super T, ? extends V> function,\n            V object)\n    {\n        return new AttributePredicate<>(function, new GreaterThanPredicate<>(object));\n    }\n    public static <T extends Comparable<? super T>> Predicates<T> greaterThanOrEqualTo(T object)\n    {\n        return new GreaterThanOrEqualPredicate<>(object);\n    }\n    public static <T, V extends Comparable<? super V>> Predicates<T> attributeGreaterThanOrEqualTo(\n            Function<? super T, ? extends V> function,\n            V object)\n    {\n        return new AttributePredicate<>(function, new GreaterThanOrEqualPredicate<>(object));\n    }\n    public static <T, V> Predicates<T> attributePredicate(\n            Function<? super T, ? extends V> function,\n            Predicate<? super V> predicate)\n    {\n        return new AttributePredicate<>(function, predicate);\n    }\n    public static <T> Predicates<T> attributeEqual(\n            Function<? super T, ?> function,\n            Object object)\n    {\n        return new AttributePredicate<>(function, Predicates.equal(object));\n    }\n    public static <T> Predicates<Iterable<T>> anySatisfy(Predicate<? super T> predicate)\n    {\n        return new AnySatisfy<>(predicate);\n    }\n    public static <T> Predicates<Iterable<T>> allSatisfy(Predicate<? super T> predicate)\n    {\n        return new AllSatisfy<>(predicate);\n    }\n    public static <T> Predicates<Iterable<T>> noneSatisfy(Predicate<? super T> predicate)\n    {\n        return new NoneSatisfy<>(predicate);\n    }\n    public static <T, V> Predicates<T> attributeAnySatisfy(\n            Function<? super T, ? extends Iterable<V>> function,\n            Predicate<? super V> predicate)\n    {\n        return Predicates.attributePredicate(function, Predicates.anySatisfy(predicate));\n    }\n    public static <T, V> Predicates<T> attributeAllSatisfy(\n            Function<? super T, ? extends Iterable<V>> function,\n            Predicate<? super V> predicate)\n    {\n        return Predicates.attributePredicate(function, Predicates.allSatisfy(predicate));\n    }\n    public static <T, V> Predicates<T> attributeNoneSatisfy(\n            Function<? super T, ? extends Iterable<V>> function,\n            Predicate<? super V> predicate)\n    {\n        return Predicates.attributePredicate(function, Predicates.noneSatisfy(predicate));\n    }\n    public static Predicates<Object> notEqual(Object object)\n    {\n        if (object == null)\n        {\n            return Predicates.notNull();\n        }\n        return new NotEqualPredicate(object);\n    }\n    public static <T> Predicates<T> ifTrue(Function<? super T, Boolean> function)\n    {\n        return new AttributeTrue<>(function);\n    }\n    public static <T> Predicates<T> ifFalse(Function<? super T, Boolean> function)\n    {\n        return new AttributeFalse<>(function);\n    }\n    public static <T> Predicates<T> attributeNotEqual(\n            Function<? super T, ?> function,\n            Object object)\n    {\n        return new AttributePredicate<>(function, Predicates.notEqual(object));\n    }\n    public static Predicates<Object> isNull()\n    {\n        return IS_NULL;\n    }\n    public static <T> Predicates<T> attributeIsNull(Function<? super T, ?> function)\n    {\n        return new AttributePredicate<>(function, Predicates.isNull());\n    }\n    public static Predicates<Object> notNull()\n    {\n        return NOT_NULL;\n    }\n    public static <T> Predicates<T> attributeNotNull(Function<? super T, ?> function)\n    {\n        return new AttributePredicate<>(function, Predicates.notNull());\n    }\n    public static Predicates<Object> sameAs(Object object)\n    {\n        return new IdentityPredicate(object);\n    }\n    public static Predicates<Object> notSameAs(Object object)\n    {\n        return new NotIdentityPredicate(object);\n    }\n    public static Predicates<Object> instanceOf(Class<?> clazz)\n    {\n        return new InstanceOfPredicate(clazz);\n    }\n    public static Predicates<Object> assignableFrom(Class<?> clazz)\n    {\n        return new AssignableFromPredicate(clazz);\n    }\n    public static Predicates<Object> notInstanceOf(Class<?> clazz)\n    {\n        return new NotInstanceOfPredicate(clazz);\n    }\n    public static Predicates<Object> alwaysTrue()\n    {\n        return ALWAYS_TRUE;\n    }\n    public static Predicates<Object> alwaysFalse()\n    {\n        return ALWAYS_FALSE;\n    }\n    public Predicates<T> and(Predicate<? super T> op)\n    {\n        return Predicates.and(this, op);\n    }\n    public Predicates<T> or(Predicate<? super T> op)\n    {\n        return Predicates.or(this, op);\n    }\n    public static Predicates<Class<?>> subClass(Class<?> aClass)\n    {\n        return new SubclassPredicate(aClass);\n    }\n    public static Predicates<Class<?>> superClass(Class<?> aClass)\n    {\n        return new SuperclassPredicate(aClass);\n    }\n    private static final class PredicateAdapter<T>\n            extends Predicates<T>\n    {\n        private static final long serialVersionUID = 1L;\n        private final Predicate<T> predicate;\n        private PredicateAdapter(Predicate<T> newPredicate)\n        {\n            this.predicate = newPredicate;\n        }\n        @Override\n        public boolean accept(T o)\n        {\n            return this.predicate.accept(o);\n        }\n        @Override\n        public String toString()\n        {\n            return \"Predicates.adapt(\" + this.predicate + ')';\n        }\n    }\n    protected static class AttributePredicate<T, V> extends Predicates<T>\n    {\n        private static final long serialVersionUID = 1L;\n        protected final Function<? super T, ? extends V> function;\n        protected final Predicate<? super V> predicate;\n        protected AttributePredicate(\n                Function<? super T, ? extends V> newFunction,\n                Predicate<? super V> newPredicate)\n        {\n            this.function = newFunction;\n            this.predicate = newPredicate;\n        }\n        @Override\n        public boolean accept(T anObject)\n        {\n            return this.predicate.accept(this.function.valueOf(anObject));\n        }\n        @Override\n        public String toString()\n        {\n            return \"Predicates.attributePredicate(\"\n                    + this.function\n                    + \", \"\n                    + this.predicate\n                    + ')';\n        }\n    }\n<fim_suffix>    private static class FalseEquals implements Predicate<Boolean>\n    {\n        private static final long serialVersionUID = 1L;\n        @Override\n        public boolean accept(Boolean anObject)\n        {\n            return Boolean.FALSE.equals(anObject);\n        }\n    }<fim_middle>// class below has no smell\n"}