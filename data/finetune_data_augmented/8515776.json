{"text": "<fim_prefix>\n<fim_suffix>@Component\npublic class UsageServiceImpl extends ManagerBase implements UsageService, Manager {\n    public static final Logger s_logger = Logger.getLogger(UsageServiceImpl.class);\n    //ToDo: Move implementation to ManagaerImpl\n    @Inject\n    private AccountDao _accountDao;\n    @Inject\n    private DomainDao _domainDao;\n    @Inject\n    private UsageDao _usageDao;\n    @Inject\n    private UsageJobDao _usageJobDao;\n    @Inject\n    private ConfigurationDao _configDao;\n    @Inject\n    private ProjectManager _projectMgr;\n    private TimeZone _usageTimezone;\n    @Inject\n    private AccountService _accountService;\n    @Inject\n    private VMInstanceDao _vmDao;\n    @Inject\n    private SnapshotDao _snapshotDao;\n    @Inject\n    private SecurityGroupDao _sgDao;\n    @Inject\n    private VpnUserDao _vpnUserDao;\n    @Inject\n    private PortForwardingRulesDao _pfDao;\n    @Inject\n    private LoadBalancerDao _lbDao;\n    @Inject\n    private VMTemplateDao _vmTemplateDao;\n    @Inject\n    private VolumeDao _volumeDao;\n    @Inject\n    private IPAddressDao _ipDao;\n    @Inject\n    private HostDao _hostDao;\n    public UsageServiceImpl() {\n    }\n    @Override\n    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        super.configure(name, params);\n        String timeZoneStr = _configDao.getValue(Config.UsageAggregationTimezone.toString());\n        if (timeZoneStr == null) {\n           timeZoneStr = \"GMT\";\n        }\n        _usageTimezone = TimeZone.getTimeZone(timeZoneStr);\n        return true;\n    }\n    @Override\n    public boolean generateUsageRecords(GenerateUsageRecordsCmd cmd) {\n        TransactionLegacy txn = TransactionLegacy.open(TransactionLegacy.USAGE_DB);\n        try {\n            UsageJobVO immediateJob = _usageJobDao.getNextImmediateJob();\n            if (immediateJob == null) {\n                UsageJobVO job = _usageJobDao.getLastJob();\n                String host = null;\n                int pid = 0;\n                if (job != null) {\n                    host = job.getHost();\n                    pid = ((job.getPid() == null) ? 0 : job.getPid().intValue());\n                }\n                _usageJobDao.createNewJob(host, pid, UsageJobVO.JOB_TYPE_SINGLE);\n            }\n        } finally {\n            txn.close();\n            // switch back to VMOPS_DB\n            TransactionLegacy swap = TransactionLegacy.open(TransactionLegacy.CLOUD_DB);\n            swap.close();\n        }\n        return true;\n    }\n    @Override\n    public Pair<List<? extends Usage>, Integer> getUsageRecords(GetUsageRecordsCmd cmd) {\n        Long accountId = cmd.getAccountId();\n        Long domainId = cmd.getDomainId();\n        String accountName = cmd.getAccountName();\n        Account userAccount = null;\n        Account caller = CallContext.current().getCallingAccount();\n        Long usageType = cmd.getUsageType();\n        Long projectId = cmd.getProjectId();\n        String usageId = cmd.getUsageId();\n        if (projectId != null) {\n            if (accountId != null) {\n                throw new InvalidParameterValueException(\"Projectid and accountId can't be specified together\");\n            }\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throw new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n            }\n            accountId = project.getProjectAccountId();\n        }\n        //if accountId is not specified, use accountName and domainId\n        if ((accountId == null) && (accountName != null) && (domainId != null)) {\n            if (_domainDao.isChildDomain(caller.getDomainId(), domainId)) {\n                Filter filter = new Filter(AccountVO.class, \"id\", Boolean.FALSE, null, null);\n                List<AccountVO> accounts = _accountDao.listAccounts(accountName, domainId, filter);\n                if (accounts.size() > 0) {\n                    userAccount = accounts.get(0);\n                }\n                if (userAccount != null) {\n                    accountId = userAccount.getId();\n                } else {\n                    throw new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in domain \" + domainId);\n                }\n            } else {\n                throw new PermissionDeniedException(\"Invalid Domain Id or Account\");\n            }\n        }\n        boolean isAdmin = false;\n        boolean isDomainAdmin = false;\n        //If accountId couldn't be found using accountName and domainId, get it from userContext\n        if (accountId == null) {\n            accountId = caller.getId();\n            //List records for all the accounts if the caller account is of type admin.\n            //If account_id or account_name is explicitly mentioned, list records for the specified account only even if the caller is of type admin\n            if (_accountService.isRootAdmin(caller.getId())) {\n                isAdmin = true;\n            } else if (_accountService.isDomainAdmin(caller.getId())) {\n                isDomainAdmin = true;\n            }\n            s_logger.debug(\"Account details not available. Using userContext accountId: \" + accountId);\n        }\n        Date startDate = cmd.getStartDate();\n        Date endDate = cmd.getEndDate();\n        if (startDate.after(endDate)) {\n            throw new InvalidParameterValueException(\"Incorrect Date Range. Start date: \" + startDate + \" is after end date:\" + endDate);\n        }\n        TimeZone usageTZ = getUsageTimezone();\n        Date adjustedStartDate = computeAdjustedTime(startDate, usageTZ);\n        Date adjustedEndDate = computeAdjustedTime(endDate, usageTZ);\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"getting usage records for account: \" + accountId + \", domainId: \" + domainId + \", between \" + adjustedStartDate + \" and \" + adjustedEndDate +\n                \", using pageSize: \" + cmd.getPageSizeVal() + \" and startIndex: \" + cmd.getStartIndex());\n        }\n        Filter usageFilter = new Filter(UsageVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        SearchCriteria<UsageVO> sc = _usageDao.createSearchCriteria();\n        if (accountId != -1 && accountId != Account.ACCOUNT_ID_SYSTEM && !isAdmin && !isDomainAdmin) {\n            sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, accountId);\n        }\n        if (isDomainAdmin) {\n            SearchCriteria<DomainVO> sdc = _domainDao.createSearchCriteria();\n            sdc.addOr(\"path\", SearchCriteria.Op.LIKE, _domainDao.findById(caller.getDomainId()).getPath() + \"%\");\n            List<DomainVO> domains = _domainDao.search(sdc, null);\n            List<Long> domainIds = new ArrayList<Long>();\n            for (DomainVO domain : domains)\n                domainIds.add(domain.getId());\n            sc.addAnd(\"domainId\", SearchCriteria.Op.IN, domainIds.toArray());\n        }\n        if (domainId != null) {\n            sc.addAnd(\"domainId\", SearchCriteria.Op.EQ, domainId);\n        }\n        if (usageType != null) {\n            sc.addAnd(\"usageType\", SearchCriteria.Op.EQ, usageType);\n        }\n        if (usageId != null) {\n            if (usageType == null) {\n                throw new InvalidParameterValueException(\"Usageid must be specified together with usageType\");\n            }\n            Long usageDbId = null;\n            switch (usageType.intValue()) {\n                case UsageTypes.NETWORK_BYTES_RECEIVED:\n                case UsageTypes.NETWORK_BYTES_SENT:\n                case UsageTypes.RUNNING_VM:\n                case UsageTypes.ALLOCATED_VM:\n                case UsageTypes.VM_SNAPSHOT:\n                    VMInstanceVO vm = _vmDao.findByUuidIncludingRemoved(usageId);\n                    if (vm != null) {\n                        usageDbId = vm.getId();\n                    }\n                    if (vm == null && (usageType == UsageTypes.NETWORK_BYTES_RECEIVED || usageType == UsageTypes.NETWORK_BYTES_SENT)) {\n                        HostVO host = _hostDao.findByUuidIncludingRemoved(usageId);\n                        if (host != null) {\n                            usageDbId = host.getId();\n                        }\n                    }\n                    break;\n                case UsageTypes.SNAPSHOT:\n                    SnapshotVO snap = _snapshotDao.findByUuidIncludingRemoved(usageId);\n                    if (snap != null) {\n                        usageDbId = snap.getId();\n                    }\n                    break;\n                case UsageTypes.TEMPLATE:\n                case UsageTypes.ISO:\n                    VMTemplateVO tmpl = _vmTemplateDao.findByUuidIncludingRemoved(usageId);\n                    if (tmpl != null) {\n                        usageDbId = tmpl.getId();\n                    }\n                    break;\n                case UsageTypes.LOAD_BALANCER_POLICY:\n                    LoadBalancerVO lb = _lbDao.findByUuidIncludingRemoved(usageId);\n                    if (lb != null) {\n                        usageDbId = lb.getId();\n                    }\n                    break;\n                case UsageTypes.PORT_FORWARDING_RULE:<fim_middle>// class below is blob\n"}