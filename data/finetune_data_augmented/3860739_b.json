{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.ambari.scom.utilities;\n\nimport org.apache.ambari.server.controller.internal.PropertyInfo;\nimport org.apache.ambari.server.controller.spi.Resource;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.codehaus.jackson.type.TypeReference;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Utility class that provides Property helper methods.\n */\n<fim_suffix>public class SCOMMetricHelper {\n  private static final String SQLSERVER_PROPERTIES_FILE = \"sqlserver_properties.json\";\n  private static final String JMX_PROPERTIES_FILE = \"jmx_properties.json\";\n\n  private static final Map<Resource.InternalType, Map<String, Map<String, PropertyInfo>>> JMX_PROPERTY_IDS = readPropertyProviderIds(JMX_PROPERTIES_FILE);\n  private static final Map<Resource.InternalType, Map<String, Map<String, PropertyInfo>>> SQLSERVER_PROPERTY_IDS = readPropertyProviderIds(SQLSERVER_PROPERTIES_FILE);\n\n  public static Map<String, Map<String, PropertyInfo>> getSqlServerPropertyIds(Resource.Type resourceType) {\n    return SQLSERVER_PROPERTY_IDS.get(resourceType.getInternalType());\n  }\n\n  public static Map<String, Map<String, PropertyInfo>> getJMXPropertyIds(Resource.Type resourceType) {\n    return JMX_PROPERTY_IDS.get(resourceType.getInternalType());\n  }\n\n  protected static class Metric {\n    private String metric;\n    private boolean pointInTime;\n    private boolean temporal;\n\n    private Metric() {\n    }\n\n    protected Metric(String metric, boolean pointInTime, boolean temporal) {\n      this.metric = metric;\n      this.pointInTime = pointInTime;\n      this.temporal = temporal;\n    }\n\n    public String getMetric() {\n      return metric;\n    }\n\n    public void setMetric(String metric) {\n      this.metric = metric;\n    }\n\n    public boolean isPointInTime() {\n      return pointInTime;\n    }\n\n    public void setPointInTime(boolean pointInTime) {\n      this.pointInTime = pointInTime;\n    }\n\n    public boolean isTemporal() {\n      return temporal;\n    }\n\n    public void setTemporal(boolean temporal) {\n      this.temporal = temporal;\n    }\n  }\n\n  private static Map<Resource.InternalType, Map<String, Map<String, PropertyInfo>>> readPropertyProviderIds(String filename) {\n    ObjectMapper mapper = new ObjectMapper();\n\n    try {\n      Map<Resource.InternalType, Map<String, Map<String, Metric>>> resourceMetricMap =\n              mapper.readValue(ClassLoader.getSystemResourceAsStream(filename),\n                      new TypeReference<Map<Resource.InternalType, Map<String, Map<String, Metric>>>>() {});\n\n      Map<Resource.InternalType, Map<String, Map<String, PropertyInfo>>> resourceMetrics =\n              new HashMap<Resource.InternalType, Map<String, Map<String, PropertyInfo>>>();\n\n      for (Map.Entry<Resource.InternalType, Map<String, Map<String, Metric>>> resourceEntry : resourceMetricMap.entrySet()) {\n        Map<String, Map<String, PropertyInfo>> componentMetrics = new HashMap<String, Map<String, PropertyInfo>>();\n\n        for (Map.Entry<String, Map<String, Metric>> componentEntry : resourceEntry.getValue().entrySet()) {\n          Map<String, PropertyInfo> metrics = new HashMap<String, PropertyInfo>();\n\n          for (Map.Entry<String, Metric> metricEntry : componentEntry.getValue().entrySet()) {\n            String property = metricEntry.getKey();\n            Metric metric = metricEntry.getValue();\n\n            metrics.put(property, new PropertyInfo(metric.getMetric(), metric.isTemporal(), metric.isPointInTime()));\n          }\n          componentMetrics.put(componentEntry.getKey(), metrics);\n        }\n        resourceMetrics.put(resourceEntry.getKey(), componentMetrics);\n      }\n      return resourceMetrics;\n    }\n    catch (IOException e) {\n      throw new IllegalStateException(\"Can't read properties file \" + filename, e);\n    }\n  }\n}<fim_middle>// class below is data class and blob\n"}