{"text": "<fim_prefix>/* Copyright (c) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage sample.contacts;\n\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\n/**\n * Keeps structured command line parameters for ContactsExample program.\n * \n * \n * \n */\n\npublic class ContactsExampleParameters {\n  /**\n   * Actions that can be executed with the sample application.\n   * They are all lowercase because they are passed as parameters\n   * and then converted using valueOf() method.\n   */\n  public enum Actions  {\n    LIST,\n    QUERY,\n    ADD,\n    DELETE,\n    UPDATE;\n  }\n\n  private static final String DEFAULT_FEED = \"https://www.google.com/m8/feeds/\";\n  private static final String DEFAULT_PROJECTION = \"thin\";\n\n  /**\n   * Keeps map of parameter -> value.\n   * Note! Tree Map is used to keep sequence of fields.\n   */\n  private SortedMap<String, String> parameterValueMap =\n    new TreeMap<String,String>();\n\n  /**\n   * List of command line parameters likely to be the description of an\n   * element.\n   * Those parameters are added to the list, what are not recognized as a valid \n   * command line argument (nor an action or option).\n   * These parameters are later parsed by {@link ElementParser} and processed by \n   * {@link ElementHelper}. \n   */\n  private List<String> elementDesc = new LinkedList<String>();\n\n  /**\n   * Stores names of parameters.\n   */\n  public enum ParameterNames {\n    SCRIPT(\"script\"),\n    ACTION(\"action\"),\n    BASE_URL(\"base-url\"),\n    USERNAME(\"username\"),\n    PASSWORD(\"password\"),\n    CONTACTFEED(\"contactfeed\"),\n    GROUPFEED(\"groupfeed\"),\n    SHOWDELETED(\"showdeleted\"),\n    REQUIRE_ALL_DELETED(\"require-all-deleted\"),\n    UPDATED_MIN(\"updated-min\"),\n    OREDERBY(\"orderby\"),\n    SORTORDER(\"sortorder\"),\n    MAX_RESULTS(\"max-results\"),\n    START_INDEX(\"start-index\"),\n    HELP(\"help\"),\n    PROJECTION(\"projection\"),\n    VERBOSE(\"verbose\"),\n    ID(\"id\"),\n    GROUP(\"querygroupid\"),\n    ;\n\n    private final String parameterName;\n\n    ParameterNames(String parameterName) {\n      this.parameterName = parameterName;\n    }\n\n    public String getParameterName() {\n      return parameterName;\n    }\n\n  }\n\n  /**\n   * Constructor used in case script parameter is used.\n   *\n   * @param commandLineParams command line parameters\n   * @param scriptLine line read from a file\n   */\n  public ContactsExampleParameters(ContactsExampleParameters commandLineParams,\n      String scriptLine) {\n    parameterValueMap.putAll(commandLineParams.parameterValueMap);\n    elementDesc.addAll(commandLineParams.elementDesc);\n    fillFromArguments(scriptLine.split(\" \"));\n  }\n\n  /**\n   * Constructor used when no script is passed at command line\n   * only the command line parameters are used.\n   *\n   * @param arguments arguments in form of array\n   */\n  public ContactsExampleParameters(String arguments[]) {\n    fillFromArguments(arguments);\n  }\n\n  /**\n   * Parse arguments.\n   * \n   * @param arguments arguments in form of array\n   */\n  private void fillFromArguments(String[] arguments) {\n    for (String string : arguments) {\n      if (!string.startsWith(\"--\")) {\n        throw new IllegalArgumentException(\"illegal parameter: \" + string);\n      }\n      String param = string.substring(2);\n      String params[] = param.split(\"=\", 2);\n      boolean found = false;\n      for (ParameterNames parameterName : ParameterNames.values()) {\n        String name = parameterName.getParameterName().toLowerCase();\n        if (name.equals(params[0])) {\n          if (params.length == 1) {\n            parameterValueMap.put(params[0], \"\");\n          } else {\n            parameterValueMap.put(params[0], params[1]);\n          }\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        elementDesc.add(string);\n      }\n    }\n    verifyAllParameters();    \n  }\n\n  /**\n   * Verify if we understand all parameters.\n   *\n   * @throws IllegalArgumentException in case there\n   * is a parameter which is not expected.\n   */\n<fim_suffix>  private void verifyAllParameters() {\n    for (String parameter : parameterValueMap.keySet()) {\n      verifyParameter(parameter);\n    }\n  }\n\n  private void verifyParameter(String name) {\n    for (ParameterNames parameter : ParameterNames.values()) {\n      if (name.equals(parameter.getParameterName())) {\n        return;\n      }\n    }\n    throw new IllegalArgumentException(\n        \"Parameter \" + name + \" is not correct.\");\n  }\n  \n  String getParameter(ParameterNames parameters) {\n    return parameterValueMap.get(parameters.getParameterName());\n  }\n\n  String getScript() {\n    return getParameter(ParameterNames.SCRIPT);\n  }\n\n  Actions getAction() {\n    String actionString = getParameter(ParameterNames.ACTION);\n    if (actionString == null) {\n      return null;\n    }\n    return Actions.valueOf(actionString.toUpperCase());\n  }\n\n  String getBaseUrl() {\n    String url = getParameter(ParameterNames.BASE_URL);\n    if (url == null) {\n      url = DEFAULT_FEED;\n    }\n    return url;\n  }\n\n  String getUserName() {\n    return getParameter(ParameterNames.USERNAME);\n  }\n\n  String getPassword() {\n    return getParameter(ParameterNames.PASSWORD);\n  }\n  \n  boolean isContactFeed() {\n    return getParameter(ParameterNames.CONTACTFEED) != null;\n  }\n\n  boolean isGroupFeed() {\n    return getParameter(ParameterNames.GROUPFEED) != null;\n  }\n  \n  boolean isShowDeleted() {\n    return getParameter(ParameterNames.SHOWDELETED) != null;\n  }\n\n  String getRequireAllDeleted() {\n    return getParameter(ParameterNames.REQUIRE_ALL_DELETED);\n  }\n\n  String getUpdatedMin() {\n    return getParameter(ParameterNames.UPDATED_MIN);\n  }\n\n  String getOrderBy() {\n    return getParameter(ParameterNames.OREDERBY);\n  }\n\n  String getSortorder() {\n    return getParameter(ParameterNames.SORTORDER);\n  }\n\n  Integer getMaxResults() {\n    String maxResString = getParameter(ParameterNames.MAX_RESULTS);\n    if (maxResString != null) {\n      Integer val = Integer.parseInt(maxResString);\n      if (val.intValue() < 1) {\n        throw new RuntimeException(\n            ParameterNames.MAX_RESULTS + \" should be > 0\" );\n      }\n      return val;\n    }\n    return null;\n  }\n\n  Integer getStartIndex() {\n    String startIndexString = getParameter(ParameterNames.START_INDEX);\n    if (startIndexString != null) {\n      Integer val = Integer.parseInt(startIndexString);\n      if (val.intValue() < 1) {\n        throw new RuntimeException(\n            ParameterNames.START_INDEX + \" should be > 0\" );\n      }\n      return val;\n    }\n    return null;\n  }\n\n  boolean isHelp() {\n    return (getParameter(ParameterNames.HELP) != null);\n  }\n\n  boolean isVerbose() {\n    return (getParameter(ParameterNames.VERBOSE) != null);\n  }\n\n  String getId() {\n    return getParameter(ParameterNames.ID);\n  }\n\n  void setId(String id) {\n    parameterValueMap.put(ParameterNames.ID.getParameterName(), id);\n  }\n  \n  String getProjection() {\n    String projection = getParameter(ParameterNames.PROJECTION);\n    if (projection == null) {\n      projection = DEFAULT_PROJECTION;\n    }\n    return projection;\n  }\n  \n  String getGroup() {\n    return getParameter(ParameterNames.GROUP);\n  }\n\n  List<String> getElementDesc() {\n    return elementDesc;\n  }\n  \n  int numberOfParameters() {\n    return parameterValueMap.size();\n  }\n}<fim_middle>// function below has no smell\n"}