{"text": "<fim_prefix>              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, append_partition_with_environment_context_args struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.db_name != null) {\n          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);\n          oprot.writeString(struct.db_name);\n          oprot.writeFieldEnd();\n        }\n        if (struct.tbl_name != null) {\n          oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);\n          oprot.writeString(struct.tbl_name);\n          oprot.writeFieldEnd();\n        }\n        if (struct.part_vals != null) {\n          oprot.writeFieldBegin(PART_VALS_FIELD_DESC);\n          {\n            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));\n            for (String _iter1245 : struct.part_vals)\n            {\n              oprot.writeString(_iter1245);\n            }\n            oprot.writeListEnd();\n          }\n          oprot.writeFieldEnd();\n        }\n        if (struct.environment_context != null) {\n          oprot.writeFieldBegin(ENVIRONMENT_CONTEXT_FIELD_DESC);\n          struct.environment_context.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class append_partition_with_environment_context_argsTupleSchemeFactory implements SchemeFactory {\n      public append_partition_with_environment_context_argsTupleScheme getScheme() {\n        return new append_partition_with_environment_context_argsTupleScheme();\n      }\n    }\n    private static class append_partition_with_environment_context_argsTupleScheme extends TupleScheme<append_partition_with_environment_context_args> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, append_partition_with_environment_context_args struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetDb_name()) {\n          optionals.set(0);\n        }\n        if (struct.isSetTbl_name()) {\n          optionals.set(1);\n        }\n        if (struct.isSetPart_vals()) {\n          optionals.set(2);\n        }\n        if (struct.isSetEnvironment_context()) {\n          optionals.set(3);\n        }\n        oprot.writeBitSet(optionals, 4);\n        if (struct.isSetDb_name()) {\n          oprot.writeString(struct.db_name);\n        }\n        if (struct.isSetTbl_name()) {\n          oprot.writeString(struct.tbl_name);\n        }\n        if (struct.isSetPart_vals()) {\n          {\n            oprot.writeI32(struct.part_vals.size());\n            for (String _iter1246 : struct.part_vals)\n            {\n              oprot.writeString(_iter1246);\n            }\n          }\n        }\n        if (struct.isSetEnvironment_context()) {\n          struct.environment_context.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, append_partition_with_environment_context_args struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        BitSet incoming = iprot.readBitSet(4);\n        if (incoming.get(0)) {\n          struct.db_name = iprot.readString();\n          struct.setDb_nameIsSet(true);\n        }\n        if (incoming.get(1)) {\n          struct.tbl_name = iprot.readString();\n          struct.setTbl_nameIsSet(true);\n        }\n        if (incoming.get(2)) {\n          {\n            org.apache.thrift.protocol.TList _list1247 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());\n            struct.part_vals = new ArrayList<String>(_list1247.size);\n            String _elem1248;\n            for (int _i1249 = 0; _i1249 < _list1247.size; ++_i1249)\n            {\n              _elem1248 = iprot.readString();\n              struct.part_vals.add(_elem1248);\n            }\n          }\n          struct.setPart_valsIsSet(true);\n        }\n        if (incoming.get(3)) {\n          struct.environment_context = new EnvironmentContext();\n          struct.environment_context.read(iprot);\n          struct.setEnvironment_contextIsSet(true);\n        }\n      }\n    }\n  }\n  @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class append_partition_with_environment_context_result implements org.apache.thrift.TBase<append_partition_with_environment_context_result, append_partition_with_environment_context_result._Fields>, java.io.Serializable, Cloneable, Comparable<append_partition_with_environment_context_result>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"append_partition_with_environment_context_result\");\n    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"success\", org.apache.thrift.protocol.TType.STRUCT, (short)0);\n    private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField(\"o1\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n    private static final org.apache.thrift.protocol.TField O2_FIELD_DESC = new org.apache.thrift.protocol.TField(\"o2\", org.apache.thrift.protocol.TType.STRUCT, (short)2);\n    private static final org.apache.thrift.protocol.TField O3_FIELD_DESC = new org.apache.thrift.protocol.TField(\"o3\", org.apache.thrift.protocol.TType.STRUCT, (short)3);\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new append_partition_with_environment_context_resultStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new append_partition_with_environment_context_resultTupleSchemeFactory());\n    }\n    private Partition success; // required\n    private InvalidObjectException o1; // required\n    private AlreadyExistsException o2; // required\n    private MetaException o3; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      SUCCESS((short)0, \"success\"),\n      O1((short)1, \"o1\"),\n      O2((short)2, \"o2\"),\n      O3((short)3, \"o3\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 0: // SUCCESS\n            return SUCCESS;\n          case 1: // O1\n            return O1;\n          case 2: // O2\n            return O2;\n          case 3: // O3\n            return O3;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n<fim_suffix>      public short getThriftFieldId() {\n        return _thriftId;\n      }<fim_middle>// function below has no smell\n"}