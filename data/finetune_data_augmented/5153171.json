{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.meecrowave.oauth2.resource;\n\nimport static javax.ws.rs.core.MediaType.APPLICATION_FORM_URLENCODED;\nimport static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n\nimport java.util.List;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.enterprise.context.RequestScoped;\nimport javax.enterprise.inject.Typed;\nimport javax.inject.Inject;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MultivaluedMap;\nimport javax.ws.rs.core.Response;\n\nimport org.apache.cxf.rs.security.oauth2.common.Client;\nimport org.apache.cxf.rs.security.oauth2.services.AccessTokenService;\nimport org.apache.meecrowave.oauth2.configuration.OAuth2Configurer;\n\n<fim_suffix>@Path(\"token\")\n@ApplicationScoped\npublic class OAuth2TokenService extends AccessTokenService implements OAuth2Application.Defaults {\n    @Inject\n    private OAuth2Configurer configurer;\n\n    @Inject\n    private LazyImpl delegate;\n\n    @POST\n    @Consumes(APPLICATION_FORM_URLENCODED)\n    @Produces(APPLICATION_JSON)\n    public Response handleTokenRequest(final MultivaluedMap<String, String> params) {\n        return getDelegate().handleTokenRequest(params);\n    }\n\n    private AccessTokenService getDelegate() {\n        delegate.setMessageContext(getMessageContext());\n        configurer.accept(delegate);\n        return delegate;\n    }\n\n    @RequestScoped\n    @Typed(LazyImpl.class)\n    static class LazyImpl extends AccessTokenService implements OAuth2Application.Defaults {\n        @Inject\n        private OAuth2Configurer configurer;\n\n        @Override // don't fail without a client\n        protected Client getClientFromBasicAuthScheme(final MultivaluedMap<String, String> params) {\n            final List<String> authorization = getMessageContext().getHttpHeaders().getRequestHeader(\"Authorization\");\n            if (authorization == null || authorization.isEmpty()) {\n                if (!configurer.getConfiguration().isForceClient()) {\n                    return DEFAULT_CLIENT;\n                }\n            }\n            return super.getClientFromBasicAuthScheme(params);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}