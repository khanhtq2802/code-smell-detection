{"text": "<fim_prefix>/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.boot.web.embedded.jetty;\nimport java.net.InetSocketAddress;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.eclipse.jetty.server.AbstractConnector;\nimport org.eclipse.jetty.server.ConnectionFactory;\nimport org.eclipse.jetty.server.Handler;\nimport org.eclipse.jetty.server.HttpConfiguration;\nimport org.eclipse.jetty.server.HttpConnectionFactory;\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.eclipse.jetty.server.handler.HandlerWrapper;\nimport org.eclipse.jetty.servlet.ServletContextHandler;\nimport org.eclipse.jetty.servlet.ServletHolder;\nimport org.eclipse.jetty.util.thread.ThreadPool;\nimport org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactory;\nimport org.springframework.boot.web.reactive.server.ReactiveWebServerFactory;\nimport org.springframework.boot.web.server.WebServer;\nimport org.springframework.http.client.reactive.JettyResourceFactory;\nimport org.springframework.http.server.reactive.HttpHandler;\nimport org.springframework.http.server.reactive.JettyHttpHandlerAdapter;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n/**\n * {@link ReactiveWebServerFactory} that can be used to create {@link JettyWebServer}s.\n *\n * @author Brian Clozel\n * @since 2.0.0\n */\npublic class JettyReactiveWebServerFactory extends AbstractReactiveWebServerFactory\n\t\timplements ConfigurableJettyWebServerFactory {\n\tprivate static final Log logger = LogFactory\n\t\t\t.getLog(JettyReactiveWebServerFactory.class);\n\t/**\n\t * The number of acceptor threads to use.\n\t */\n\tprivate int acceptors = -1;\n\t/**\n\t * The number of selector threads to use.\n\t */\n\tprivate int selectors = -1;\n\tprivate boolean useForwardHeaders;\n\tprivate List<JettyServerCustomizer> jettyServerCustomizers = new ArrayList<>();\n\tprivate JettyResourceFactory resourceFactory;\n\tprivate ThreadPool threadPool;\n\t/**\n\t * Create a new {@link JettyServletWebServerFactory} instance.\n\t */\n\tpublic JettyReactiveWebServerFactory() {\n\t}\n\t/**\n\t * Create a new {@link JettyServletWebServerFactory} that listens for requests using\n\t * the specified port.\n\t * @param port the port to listen on\n\t */\n\tpublic JettyReactiveWebServerFactory(int port) {\n\t\tsuper(port);\n\t}\n\t@Override\n\tpublic void setUseForwardHeaders(boolean useForwardHeaders) {\n\t\tthis.useForwardHeaders = useForwardHeaders;\n\t}\n\t@Override\n\tpublic void setAcceptors(int acceptors) {\n\t\tthis.acceptors = acceptors;\n\t}\n\t@Override\n\tpublic WebServer getWebServer(HttpHandler httpHandler) {\n\t\tJettyHttpHandlerAdapter servlet = new JettyHttpHandlerAdapter(httpHandler);\n\t\tServer server = createJettyServer(servlet);\n\t\treturn new JettyWebServer(server, getPort() >= 0);\n\t}\n\t@Override\n\tpublic void addServerCustomizers(JettyServerCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\tthis.jettyServerCustomizers.addAll(Arrays.asList(customizers));\n\t}\n\t/**\n\t * Sets {@link JettyServerCustomizer}s that will be applied to the {@link Server}\n\t * before it is started. Calling this method will replace any existing customizers.\n\t * @param customizers the Jetty customizers to apply\n\t */\n\tpublic void setServerCustomizers(\n\t\t\tCollection<? extends JettyServerCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\tthis.jettyServerCustomizers = new ArrayList<>(customizers);\n\t}\n\t/**\n\t * Returns a mutable collection of Jetty {@link JettyServerCustomizer}s that will be\n\t * applied to the {@link Server} before it is created.\n\t * @return the Jetty customizers\n\t */\n\tpublic Collection<JettyServerCustomizer> getServerCustomizers() {\n\t\treturn this.jettyServerCustomizers;\n\t}\n\t/**\n\t * Returns a Jetty {@link ThreadPool} that should be used by the {@link Server}.\n\t * @return a Jetty {@link ThreadPool} or {@code null}\n\t */\n\tpublic ThreadPool getThreadPool() {\n\t\treturn this.threadPool;\n\t}\n\t/**\n\t * Set a Jetty {@link ThreadPool} that should be used by the {@link Server}. If set to\n\t * {@code null} (default), the {@link Server} creates a {@link ThreadPool} implicitly.\n\t * @param threadPool a Jetty ThreadPool to be used\n\t */\n\tpublic void setThreadPool(ThreadPool threadPool) {\n\t\tthis.threadPool = threadPool;\n\t}\n\t@Override\n\tpublic void setSelectors(int selectors) {\n\t\tthis.selectors = selectors;\n\t}\n\t/**\n\t * Set the {@link JettyResourceFactory} to get the shared resources from.\n\t * @param resourceFactory the server resources\n\t * @since 2.1.0\n\t */\n\tpublic void setResourceFactory(JettyResourceFactory resourceFactory) {\n\t\tthis.resourceFactory = resourceFactory;\n\t}\n\tprotected JettyResourceFactory getResourceFactory() {\n\t\treturn this.resourceFactory;\n\t}\n<fim_suffix>\tprotected Server createJettyServer(JettyHttpHandlerAdapter servlet) {\n\t\tint port = (getPort() >= 0) ? getPort() : 0;\n\t\tInetSocketAddress address = new InetSocketAddress(getAddress(), port);\n\t\tServer server = new Server(getThreadPool());\n\t\tserver.addConnector(createConnector(address, server));\n\t\tServletHolder servletHolder = new ServletHolder(servlet);\n\t\tservletHolder.setAsyncSupported(true);\n\t\tServletContextHandler contextHandler = new ServletContextHandler(server, \"\",\n\t\t\t\tfalse, false);\n\t\tcontextHandler.addServlet(servletHolder, \"/\");\n\t\tserver.setHandler(addHandlerWrappers(contextHandler));\n\t\tJettyReactiveWebServerFactory.logger\n\t\t\t\t.info(\"Server initialized with port: \" + port);\n\t\tif (getSsl() != null && getSsl().isEnabled()) {\n\t\t\tcustomizeSsl(server, address);\n\t\t}\n\t\tfor (JettyServerCustomizer customizer : getServerCustomizers()) {\n\t\t\tcustomizer.customize(server);\n\t\t}\n\t\tif (this.useForwardHeaders) {\n\t\t\tnew ForwardHeadersCustomizer().customize(server);\n\t\t}\n\t\treturn server;\n\t}\n\tprivate AbstractConnector createConnector(InetSocketAddress address, Server server) {\n\t\tServerConnector connector;\n\t\tJettyResourceFactory resourceFactory = getResourceFactory();\n\t\tif (resourceFactory != null) {\n\t\t\tconnector = new ServerConnector(server, resourceFactory.getExecutor(),\n\t\t\t\t\tresourceFactory.getScheduler(), resourceFactory.getByteBufferPool(),\n\t\t\t\t\tthis.acceptors, this.selectors, new HttpConnectionFactory());\n\t\t}\n\t\telse {\n\t\t\tconnector = new ServerConnector(server, this.acceptors, this.selectors);\n\t\t}\n\t\tconnector.setHost(address.getHostString());\n\t\tconnector.setPort(address.getPort());\n\t\tfor (ConnectionFactory connectionFactory : connector.getConnectionFactories()) {\n\t\t\tif (connectionFactory instanceof HttpConfiguration.ConnectionFactory) {\n\t\t\t\t((HttpConfiguration.ConnectionFactory) connectionFactory)\n\t\t\t\t\t\t.getHttpConfiguration().setSendServerVersion(false);\n\t\t\t}\n\t\t}\n\t\treturn connector;\n\t}\n\tprivate Handler addHandlerWrappers(Handler handler) {\n\t\tif (getCompression() != null && getCompression().getEnabled()) {\n\t\t\thandler = applyWrapper(handler,\n\t\t\t\t\tJettyHandlerWrappers.createGzipHandlerWrapper(getCompression()));\n\t\t}\n\t\tif (StringUtils.hasText(getServerHeader())) {\n\t\t\thandler = applyWrapper(handler, JettyHandlerWrappers\n\t\t\t\t\t.createServerHeaderHandlerWrapper(getServerHeader()));\n\t\t}\n\t\treturn handler;\n\t}\n\tprivate Handler applyWrapper(Handler handler, HandlerWrapper wrapper) {<fim_middle>// function below has no smell\n"}