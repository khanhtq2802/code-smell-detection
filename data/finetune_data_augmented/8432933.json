{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.spring.boot.cloud;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.camel.cloud.ServiceDefinition;\nimport org.apache.camel.cloud.ServiceDiscovery;\nimport org.apache.camel.impl.cloud.CachingServiceDiscovery;\nimport org.apache.camel.impl.cloud.CombinedServiceDiscovery;\n\npublic class CamelCloudServiceDiscovery implements ServiceDiscovery {\n    private ServiceDiscovery delegate;\n\n<fim_suffix>    public CamelCloudServiceDiscovery(Long timeout, List<ServiceDiscovery> serviceDiscoveryList) {\n        // Created a chained service discovery that collects services from multiple\n        // ServiceDiscovery\n        this.delegate = new CombinedServiceDiscovery(serviceDiscoveryList);\n\n        // If a timeout is provided, wrap the serviceDiscovery with a caching\n        // strategy so the discovery implementations are not queried for each\n        // discovery request\n        if (timeout != null && timeout > 0) {\n            this.delegate = CachingServiceDiscovery.wrap(this.delegate, timeout, TimeUnit.MILLISECONDS);\n        }\n    }\n\n    @Override\n    public List<ServiceDefinition> getServices(String name) {\n        return delegate.getServices(name);\n    }\n}<fim_middle>// function below has no smell\n"}