{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.wicket.guice;\n\nimport com.google.inject.Guice;\nimport com.google.inject.ImplementedBy;\nimport com.google.inject.Injector;\nimport com.google.inject.Module;\nimport com.google.inject.Stage;\nimport org.apache.wicket.Application;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.IBehaviorInstantiationListener;\nimport org.apache.wicket.Session;\nimport org.apache.wicket.application.IComponentInstantiationListener;\nimport org.apache.wicket.behavior.Behavior;\nimport org.apache.wicket.injection.IFieldValueFactory;\nimport org.apache.wicket.model.Model;\n\n/**\n * Injects field members of components and behaviors using Guice.\n * <p>\n * Add this to your application in its {@link Application#init()} method like so:\n * \n * <pre>\n * getComponentInstantiationListeners().add(new GuiceComponentInjector(this));\n * </pre>\n * \n * <p>\n * There are different constructors for this object depending on how you want to wire things. See\n * the javadoc for the constructors for more information.\n * </p>\n * <p>\n * Only Wicket {@link Component}s and {@link Behavior}s are automatically injected, other classes\n * such as {@link Session}, {@link Model}, and any other POJO can be injected by calling\n * <code>Injector.get().inject(this)</code> in their constructor.\n * </p>\n * \n * @author Alastair Maw\n */\n<fim_suffix>public class GuiceComponentInjector extends org.apache.wicket.injection.Injector\n\timplements\n\t\tIComponentInstantiationListener,\n\t\tIBehaviorInstantiationListener\n{\n\tprivate final IFieldValueFactory fieldValueFactory;\n\n\t/**\n\t * Creates a new Wicket GuiceComponentInjector instance.\n\t * <p>\n\t * Internally this will create a new Guice {@link Injector} instance, with no {@link Module}\n\t * instances. This is only useful if your beans have appropriate {@link ImplementedBy}\n\t * annotations on them so that they can be automatically picked up with no extra configuration\n\t * code.\n\t * \n\t * @param app\n\t */\n\tpublic GuiceComponentInjector(final Application app)\n\t{\n\t\tthis(app, new Module[0]);\n\t}\n\n\t/**\n\t * Creates a new Wicket GuiceComponentInjector instance, using the supplied Guice {@link Module}\n\t * instances to create a new Guice {@link Injector} instance internally.\n\t * \n\t * @param app\n\t * @param modules\n\t */\n\tpublic GuiceComponentInjector(final Application app, final Module... modules)\n\t{\n\t\tthis(app, Guice.createInjector(app.usesDeploymentConfig() ? Stage.PRODUCTION\n\t\t\t: Stage.DEVELOPMENT, modules), true);\n\t}\n\n\t/**\n\t * Constructor\n\t * \n\t * @param app\n\t * @param injector\n\t */\n\tpublic GuiceComponentInjector(final Application app, final Injector injector)\n\t{\n\t\tthis(app, injector, true);\n\t}\n\n\t/**\n\t * Creates a new Wicket GuiceComponentInjector instance, using the provided Guice\n\t * {@link Injector} instance.\n\t * \n\t * @param app\n\t * @param injector\n\t * @param wrapInProxies\n\t *            whether or not wicket should wrap dependencies with specialized proxies that can\n\t *            be safely serialized. in most cases this should be set to true.\n\t */\n\tpublic GuiceComponentInjector(final Application app, final Injector injector,\n\t\tfinal boolean wrapInProxies)\n\t{\n\t\tapp.setMetaData(GuiceInjectorHolder.INJECTOR_KEY, new GuiceInjectorHolder(injector));\n\t\tfieldValueFactory = new GuiceFieldValueFactory(wrapInProxies);\n\t\tapp.getBehaviorInstantiationListeners().add(this);\n\t\tbind(app);\n\t}\n\n\t@Override\n\tpublic void inject(final Object object)\n\t{\n\t\tinject(object, fieldValueFactory);\n\t}\n\n\t@Override\n\tpublic void onInstantiation(final Component component)\n\t{\n\t\tinject(component);\n\t}\n\n\t@Override\n\tpublic void onInstantiation(Behavior behavior)\n\t{\n\t\tinject(behavior);\n\t}\n}<fim_middle>// class below has no smell\n"}