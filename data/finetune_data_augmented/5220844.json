{"text": "<fim_prefix>                } else if (\"bpws\".equals(prefix)) {\n                    declarations.declareNamespace(\"bpws\", \"java:\" + Constants.XQUERY_FUNCTION_HANDLER_COMPILER);\n                } else {\n                    declarations.declareNamespace(prefix, uri);\n                }\n            }\n            declarations.declareVariable(\n                    getQName(nsContext, Namespaces.ODE_EXTENSION_NS, \"pid\"),\n                    getQName(nsContext, Namespaces.XML_SCHEMA, \"integer\"));\n//            Map<URI, Source> schemaDocuments = _compilerContext.getSchemaSources();\n//            for (URI schemaUri : schemaDocuments.keySet()) {\n//            \tSource schemaSource = schemaDocuments.get(schemaUri);\n//            \t// Don't add schema sources, since our Saxon library is not schema-aware.\n//            \t// configuration.addSchemaSource(schemaSource);\n//            }\n            configuration.setSchemaValidationMode(Validation.SKIP);\n            List<OScope.Variable> variables = _compilerContext.getAccessibleVariables();\n            Map<QName, QName> variableTypes = new HashMap<QName, QName>();\n            for (String variableName : getVariableNames(xqueryStr)) {\n                OScope.Variable variable = getVariable(variables, variableName);\n                if (variable == null) {\n                    continue;\n                }\n                OVarType type = variable.getType();\n                QName nameQName = getNameQName(variableName);\n                QName typeQName = getTypeQName(variableName, type);\n                variableTypes.put(nameQName, typeQName);\n                String prefix = typeQName.getPrefix();\n                if (prefix == null || \"\".equals(prefix.trim())) {\n                    prefix = getPrefixForUri(nsContext, typeQName.getNamespaceURI());\n                }\n                // don't declare typed variables, as our engine is not schema-aware\n                // declarations.declareVariable(variable.name, typeQName);\n                declarations.declareVariable(variableName);\n            }\n            // Add implicit declarations as prolog to the user-defined XQuery\n            out.setXquery((declarations.toString()) + xqueryStr);\n            // Check the XQuery for compilation errors\n            xqconn.setStaticContext(staticContext);\n            XQPreparedExpression exp = xqconn.prepareExpression(out.getXquery());\n            // Pre-evaluate variables and functions by executing query\n            node.setUserData(XQuery10BpelFunctions.USER_DATA_KEY_FUNCTION_RESOLVER,\n                    funcResolver, null);\n            exp.bindItem(XQConstants.CONTEXT_ITEM,\n                    xqconn.createItemFromNode(node, xqconn.createNodeType()));\n            // Bind external variables to dummy runtime values\n            for (QName variable : exp.getAllUnboundExternalVariables()) {\n                QName typeQName = variableTypes.get(variable);\n                Object value = variableResolver.resolveVariable(variable);\n                if (typeQName != null) {\n                    if (value.getClass().getName().startsWith(\"java.lang\")) {\n                        exp.bindAtomicValue(variable, value.toString(),\n                                xqconn.createAtomicType(XQItemType.XQBASETYPE_ANYATOMICTYPE));\n                    } else if (value instanceof Node) {\n                        exp.bindNode(variable, (Node) value, xqconn.createNodeType());\n                    } else if (value instanceof NodeList) {\n                        NodeList nodeList = (NodeList) value;\n                        ArrayList nodeArray = new ArrayList();\n                        for (int i = 0; i < nodeList.getLength(); i++) {\n                            nodeArray.add(nodeList.item(i));\n                        }\n                        XQSequence sequence = xqconn.createSequence(nodeArray.iterator());\n                        exp.bindSequence(variable, sequence);\n                    }\n                }\n            }\n            // evaluate the expression so as to initialize the variables\n            try {\n                exp.executeQuery();\n            } catch (XQException xpee) {\n                // swallow errors caused by uninitialized variables\n            } finally {\n                // reset the expression's user data, in order to avoid\n                // serializing the function resolver in the compiled bpel file.\n                if (node != null) {\n                    node.setUserData(XQuery10BpelFunctions.USER_DATA_KEY_FUNCTION_RESOLVER, null, null);\n                }\n            }\n        } catch (XQException xqe) {\n            __log.debug(\"\",xqe);\n            __log.info(\"Couldn't validate properly expression \" + xqueryStr);\n            throw new CompilationException(__msgs.errXQuery10Syntax(xqueryStr, \"Couldn't validate XQuery expression\"));\n        } catch (WrappedResolverException wre) {\n            if (wre._compilationMsg != null)\n                throw new CompilationException(wre._compilationMsg, wre);\n            if (wre.getCause() instanceof CompilationException)\n                throw (CompilationException) wre.getCause();\n            throw wre;\n        }\n    }\n    public Map<String, String> getProperties() {\n        return _properties;\n    }\n    private String getQName(NSContext nsContext, String uri, String localPart) {\n        String prefix = getPrefixForUri(nsContext, uri);\n        return (prefix == null ? localPart : (prefix + \":\" + localPart));\n    }\n    private String getPrefixForUri(NSContext nsContext, String uri) {\n        Set<String> prefixes = nsContext.getPrefixes();\n        for (String prefix : prefixes) {\n            String anUri = (nsContext.getNamespaceURI(prefix));\n            if (anUri != null && anUri.equals(uri)) {\n                return prefix;\n            }\n        }\n        return null;\n    }\n    protected static Collection<String> getVariableNames(String xquery) {\n        Collection<String> variableNames = new LinkedHashSet<String>();\n        for (int index = xquery.indexOf(\"$\"); index != -1; index = xquery.indexOf(\"$\")) {\n            StringBuilder variableName = new StringBuilder();\n            index++;\n            while(index < xquery.length() && XMLChar.isNCName(xquery.charAt(index))) {\n                variableName.append(xquery.charAt(index++));\n            }\n            variableNames.add(variableName.toString());\n            xquery = xquery.substring(index);\n        }\n        return variableNames;\n    }\n    private OScope.Variable getVariable(List<OScope.Variable> variables, String variableName) {\n        String declaredVariable = getVariableDeclaredName(variableName);\n        for (OScope.Variable variable : variables) {\n            if (variable.getName().equals(declaredVariable)) {\n                return variable;\n            }\n        }\n        return null;\n    }\n    private String getVariableDeclaredName(String variableReference) {\n        int dotIndex = variableReference.indexOf(\".\");\n        return dotIndex >= 0 ? variableReference.substring(0, dotIndex) : variableReference;\n    }\n    private String getVariablePartName(String variableReference) {\n        int dotIndex = variableReference.indexOf(\".\");\n        return dotIndex >= 0 ? variableReference.substring(dotIndex + 1) : \"\";\n    }\n    private QName getNameQName(String variableName) {\n        String prefix = null, localName = null;;\n        int colonIndex = variableName.indexOf(\":\");\n        if (colonIndex >= 0) {\n            prefix = variableName.substring(0, colonIndex);\n            localName = variableName.substring(colonIndex + 1);\n        } else {\n            prefix = \"\";\n            localName = variableName;\n        }\n        return new QName(prefix, localName);\n    }\n    private QName getTypeQName(String variableName, OVarType type) {\n        QName typeQName = null;\n        if (type instanceof OConstantVarType) {\n            typeQName = new QName(Namespaces.XML_SCHEMA, \"string\", \"xs\");\n        } else if (type instanceof OElementVarType) {\n            typeQName = ((OElementVarType) type).getElementType();\n        } else if (type instanceof OMessageVarType) {\n            Part part = ((OMessageVarType) type).getParts().get(getVariablePartName(variableName));\n            if (part != null) {\n                typeQName = getTypeQName(variableName, part.getType());\n            }\n        } else if (type instanceof OXsdTypeVarType) {\n            typeQName = ((OXsdTypeVarType) type).getXsdType();\n        }\n        return typeQName;\n    }\n    private static class XQueryDeclarations {\n        StringBuffer declarations = new StringBuffer();\n        public XQueryDeclarations() {}\n        public void declareVariable(String name, QName type) {\n            declareVariable(name, type.getPrefix() + \":\" + type.getLocalPart());\n        }\n        public void declareVariable(String name, String type) {\n            declarations.append(\"declare variable \")\n                .append(\"$\")\n                .append(name)\n                .append(\" as \")\n                .append(type)\n                .append(\" external \")\n                .append(\";\\n\");\n        }\n<fim_suffix>        public void declareVariable(String name) {\n            declarations.append(\"declare variable \")\n                .append(\"$\")\n                .append(name)\n                .append(\" external \")\n                .append(\";\\n\");\n        }<fim_middle>// function below has no smell\n"}