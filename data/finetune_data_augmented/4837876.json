{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\npackage org.apache.isis.core.metamodel.facets.object.ignore.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\n\nimport com.google.common.eventbus.Subscribe;\n\nimport org.apache.isis.applib.annotation.Ignore;\nimport org.apache.isis.applib.annotation.Programmatic;\nimport org.apache.isis.core.commons.lang.ClassUtil;\nimport org.apache.isis.core.metamodel.facetapi.FeatureType;\nimport org.apache.isis.core.metamodel.facetapi.MethodRemover;\nimport org.apache.isis.core.metamodel.facets.Annotations;\nimport org.apache.isis.core.metamodel.facets.FacetFactoryAbstract;\n\npublic class RemoveAnnotatedMethodsFacetFactory extends FacetFactoryAbstract {\n\n    private Class<? extends Annotation> eventHandlerClass;\n\n    public RemoveAnnotatedMethodsFacetFactory() {\n        super(FeatureType.OBJECTS_ONLY);\n\n        try {\n            // doing this reflectively so that don't bring in a dependency on axon.\n            Class cls = (Class) ClassUtil.forName(\"org.axonframework.eventhandling.annotation.EventHandler\");\n            eventHandlerClass = cls;\n\n        } catch(Exception ignore) {\n            // ignore\n            eventHandlerClass = null;\n        }\n    }\n\n<fim_suffix>    @Override\n    public void process(final ProcessClassContext processClassContext) {\n        removeIgnoredMethods(processClassContext.getCls(), processClassContext);\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    private void removeIgnoredMethods(final Class<?> cls, final MethodRemover methodRemover) {\n        if (cls == null) {\n            return;\n        }\n\n        final Method[] methods = cls.getMethods();\n        for (final Method method : methods) {\n            removeAnnotatedMethods(methodRemover, method, PreDestroy.class);\n            removeAnnotatedMethods(methodRemover, method, PostConstruct.class);\n            removeAnnotatedMethods(methodRemover, method, Ignore.class);\n            removeAnnotatedMethods(methodRemover, method, Programmatic.class);\n            removeAnnotatedMethods(methodRemover, method, Subscribe.class);\n            if(eventHandlerClass != null) {\n                removeAnnotatedMethods(methodRemover, method, eventHandlerClass);\n            }\n        }\n    }\n\n    private static <T extends Annotation> void removeAnnotatedMethods(final MethodRemover methodRemover, final Method method, Class<T> annotationClass) {\n        if (!Annotations.isAnnotationPresent(method, annotationClass)) {\n            return;\n        }\n        methodRemover.removeMethod(method);\n    }\n\n\n}<fim_middle>// function below has no smell\n"}