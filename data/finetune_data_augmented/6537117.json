{"text": "<fim_prefix>            case ELECTRIC_METER:\n                return (String[]) powerSensorRefresh[REFRESH_ELECTRIC_METER_ARRAY_FIELD];\n            case POWER_CONSUMPTION:\n                return (String[]) powerSensorRefresh[REFRESH_POWER_CONSUMPTION_ARRAY_FIELD];\n            default:\n                return null;\n        }\n    }\n    private boolean checkPriority(String priority) {\n        switch (priority) {\n            case Config.REFRESH_PRIORITY_HIGH:\n            case Config.REFRESH_PRIORITY_MEDIUM:\n            case Config.REFRESH_PRIORITY_LOW:\n            case Config.REFRESH_PRIORITY_NEVER:\n                return true;\n            default:\n                logger.error(\"Sensor data update priority do not exist! Please check the input!\");\n                return false;\n        }\n    }\n    @Override\n    public boolean isDeviceUpToDate() {\n        isSensorDataUpToDate();\n        return this.deviceStateUpdates.isEmpty();\n    }\n    @Override\n    public DeviceStateUpdate getNextDeviceUpdateState() {\n        return !this.deviceStateUpdates.isEmpty() ? this.deviceStateUpdates.remove(0) : null;\n    }\n    private int internalSetOutputValue(int value) {\n        if (isShade()) {\n            slatPosition = value;\n            if (slatPosition <= 0) {\n                slatPosition = 0;\n                isOpen = false;\n            } else {\n                isOpen = true;\n            }\n            return slatPosition;\n        } else {\n            outputValue = (short) value;\n            if (outputValue <= 0) {\n                internalSetOff();\n            } else {\n                if (isSwitch()) {\n                    if (outputValue < switchPercentOff) {\n                        internalSetOff();\n                        isOn = false;\n                    } else {\n                        isOn = true;\n                        setCachedMeterData();\n                    }\n                } else {\n                    isOn = true;\n                    setCachedMeterData();\n                }\n            }\n            return outputValue;\n        }\n    }\n    private void internalSetOff() {\n        this.isOn = false;\n        logger.debug(\"internal set OFF \");\n        if (!checkPowerSensorRefreshPriorityNever(SensorEnum.ACTIVE_POWER)) {\n            if (getSensorDataReadingInitialized(SensorEnum.ACTIVE_POWER)) {\n                deviceStateUpdates.add(new DeviceStateUpdateImpl(SensorEnum.ACTIVE_POWER, -1));\n                logger.debug(\"internal set sensor to 0\");\n            }\n            setDsSensorValue(SensorEnum.ACTIVE_POWER, 0);\n        }\n        if (!checkPowerSensorRefreshPriorityNever(SensorEnum.OUTPUT_CURRENT)) {\n            if (getSensorDataReadingInitialized(SensorEnum.OUTPUT_CURRENT)) {\n                deviceStateUpdates.add(new DeviceStateUpdateImpl(SensorEnum.OUTPUT_CURRENT, -1));\n            }\n            setDsSensorValue(SensorEnum.OUTPUT_CURRENT, 0);\n        }\n        if (!checkPowerSensorRefreshPriorityNever(SensorEnum.POWER_CONSUMPTION)) {\n            if (getSensorDataReadingInitialized(SensorEnum.POWER_CONSUMPTION)) {\n                deviceStateUpdates.add(new DeviceStateUpdateImpl(SensorEnum.POWER_CONSUMPTION, -1));\n            }\n            setDsSensorValue(SensorEnum.POWER_CONSUMPTION, 0);\n        }\n    }\n    private short internalSetAngleValue(int value) {\n        if (value < 0) {\n            slatAngle = 0;\n        }\n        if (value > maxSlatAngle) {\n            slatAngle = maxSlatAngle;\n        } else {\n            slatAngle = (short) value;\n        }\n        return slatAngle;\n    }\n    // Device sensors\n    @Override\n    public List<SensorEnum> getSensorTypes() {\n        List<SensorEnum> list = new ArrayList<SensorEnum>(devicePowerSensorTypes);\n        list.addAll(deviceClimateSensorTypes);\n        return list;\n    }\n    @Override\n    public List<SensorEnum> getPowerSensorTypes() {\n        return devicePowerSensorTypes;\n    }\n    @Override\n    public List<SensorEnum> getClimateSensorTypes() {\n        return deviceClimateSensorTypes;\n    }\n    @Override\n    public List<DeviceSensorValue> getDeviceSensorValues() {\n        return deviceSensorValues;\n    }\n    @Override\n    public boolean supportsSensorType(SensorEnum sensorType) {\n        if (sensorType != null) {\n            return getSensorTypes().contains(sensorType);\n        }\n        return false;\n    }\n    @Override\n    public void setDeviceSensorValue(DeviceSensorValue deviceSensorValue) {\n        if (deviceSensorValue != null) {\n            int index = deviceSensorValues.indexOf(deviceSensorValue);\n            if (index < 0) {\n                deviceSensorValues.add(deviceSensorValue);\n                if (SensorEnum.isPowerSensor(deviceSensorValue.getSensorType())) {\n                    devicePowerSensorTypes.add(deviceSensorValue.getSensorType());\n                } else {\n                    deviceClimateSensorTypes.add(deviceSensorValue.getSensorType());\n                }\n            } else {\n                if (deviceSensorValue.getTimestamp().after(deviceSensorValues.get(index).getTimestamp())) {\n                    logger.debug(\"set deviceSeneorValue, new deviceSensorValue is: {}\", deviceSensorValue.toString());\n                    deviceSensorValues.set(index, deviceSensorValue);\n                    checkSensorValueSet(deviceSensorValue, true);\n                }\n            }\n        }\n    }\n    @Override\n    public void setDeviceSensorByEvent(EventItem event) {\n        DeviceSensorValue devSenVal = new DeviceSensorValue(event.getProperties());\n        SensorEnum sensorType = devSenVal.getSensorType();\n        if (!isEchoSensor(sensorType)) {\n            logger.debug(\"Event is no echo, set values {} for sensorType {}\", devSenVal, devSenVal.getSensorType());\n            if (SensorEnum.isPowerSensor(sensorType) && getSensorDataReadingInitialized(sensorType)) {\n                logger.debug(\"SensorJob was initialized, remove sensorjob for sensorType: {}\",\n                        devSenVal.getSensorType());\n                deviceStateUpdates.add(new DeviceStateUpdateImpl(sensorType, -1));\n            }\n            setDeviceSensorValue(devSenVal);\n        } else {\n            logger.debug(\"Event is echo remove sensorType {} from echoBox\", devSenVal.getSensorType());\n            sensorEchoBox.remove(devSenVal.getSensorType());\n        }\n    }\n    private boolean isEchoSensor(SensorEnum sensorType) {\n        return sensorEchoBox != null ? sensorEchoBox.contains(sensorType) : false;\n    }\n    private List<SensorEnum> sensorEchoBox = Collections.synchronizedList(new LinkedList<SensorEnum>());\n    @Override\n    public void setDeviceSensorDsValueBySensorJob(SensorEnum sensorType, Integer value) {\n        logger.debug(\"sensorJob for device {} is executet\", dsid.getValue());\n        if (isSensorEchoBoxEnabled()) {\n            // temperature resolution is not correct, so waiting for device sensor-event\n            if (!sensorType.toString().contains(\"TEMPERATURE\")) {\n                logger.debug(\"echoBox is enabled, add sensorType {} to echoBox\", sensorType);\n                sensorEchoBox.add(sensorType);\n            } else {\n                logger.debug(\"echoBox is enabled, ignoring temperation update and wait for sensor Event\");\n                return;\n            }\n        }\n        setDsSensorValue(sensorType, value);\n    }\n    @Override\n    public void enableSensorEchoBox() {\n        if (sensorEchoBox == null) {\n            sensorEchoBox = Collections.synchronizedList(new LinkedList<SensorEnum>());\n        }\n    }\n    @Override\n    public void disableSensorEchoBox() {\n        sensorEchoBox = null;\n    }\n    @Override\n    public boolean isSensorEchoBoxEnabled() {\n        return sensorEchoBox != null;\n    }\n    @Override\n    public DeviceSensorValue getDeviceSensorValue(SensorEnum sensorType) {\n        if (sensorType != null) {\n            for (DeviceSensorValue devSenVal : deviceSensorValues) {\n                if (devSenVal.getSensorType().equals(sensorType)) {\n                    return devSenVal;\n                }\n            }\n        }\n        return null;\n    }\n    @Override\n    public DeviceSensorValue getDeviceSensorValue(Short sensorIndex) {\n        if (sensorIndex != null) {\n            for (DeviceSensorValue devSenVal : deviceSensorValues) {\n                if (devSenVal.getSensorIndex().equals(sensorIndex)) {\n                    return devSenVal;\n                }\n            }\n        }\n        return null;\n    }\n    @Override\n    public Short getSensorIndex(SensorEnum sensorType) {\n        if (sensorType != null) {\n            DeviceSensorValue devSenVal = getDeviceSensorValue(sensorType);\n            return devSenVal != null ? devSenVal.getSensorIndex() : null;\n        }\n        return null;\n    }\n<fim_suffix>    @Override\n    public SensorEnum getSensorType(Short sensorIndex) {\n        if (sensorIndex != null) {\n            DeviceSensorValue devSenVal = getDeviceSensorValue(sensorIndex);\n            return devSenVal != null ? devSenVal.getSensorType() : null;\n        }\n        return null;\n    }<fim_middle>// function below has no smell\n"}