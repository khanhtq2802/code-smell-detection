{"text": "<fim_prefix>/*\n * Copyright 2013-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.data.rest.core.mapping;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.data.repository.core.RepositoryMetadata;\nimport org.springframework.data.rest.core.Path;\nimport org.springframework.data.rest.core.annotation.RepositoryRestResource;\nimport org.springframework.data.rest.core.annotation.RestResource;\nimport org.springframework.hateoas.LinkRelation;\nimport org.springframework.hateoas.server.LinkRelationProvider;\nimport org.springframework.hateoas.server.core.EvoInflectorLinkRelationProvider;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link CollectionResourceMapping} to be built from repository interfaces. Will inspect {@link RestResource}\n * annotations on the repository interface but fall back to the mapping information of the managed domain type for\n * defaults.\n *\n * @author Oliver Gierke\n */\nclass RepositoryCollectionResourceMapping implements CollectionResourceMapping {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(RepositoryCollectionResourceMapping.class);\n\tprivate static final boolean EVO_INFLECTOR_IS_PRESENT = ClassUtils.isPresent(\"org.atteo.evo.inflector.English\", null);\n\n\tprivate final RestResource annotation;\n\tprivate final RepositoryRestResource repositoryAnnotation;\n\tprivate final CollectionResourceMapping domainTypeMapping;\n\tprivate final boolean repositoryExported;\n\tprivate final RepositoryMetadata metadata;\n\n\tpublic RepositoryCollectionResourceMapping(RepositoryMetadata metadata, RepositoryDetectionStrategy strategy) {\n\t\tthis(metadata, strategy, new EvoInflectorLinkRelationProvider());\n\t}\n\n\t/**\n\t * Creates a new {@link RepositoryCollectionResourceMapping} for the given repository using the given\n\t * {@link RelProvider}.\n\t *\n\t * @param strategy must not be {@literal null}.\n\t * @param relProvider must not be {@literal null}.\n\t * @param repositoryType must not be {@literal null}.\n\t */\n\tRepositoryCollectionResourceMapping(RepositoryMetadata metadata, RepositoryDetectionStrategy strategy,\n\t\t\tLinkRelationProvider relProvider) {\n\n\t\tAssert.notNull(metadata, \"Repository metadata must not be null!\");\n\t\tAssert.notNull(relProvider, \"LinkRelationProvider must not be null!\");\n\t\tAssert.notNull(strategy, \"RepositoryDetectionStrategy must not be null!\");\n\n\t\tClass<?> repositoryType = metadata.getRepositoryInterface();\n\n\t\tthis.metadata = metadata;\n\t\tthis.annotation = AnnotationUtils.findAnnotation(repositoryType, RestResource.class);\n\t\tthis.repositoryAnnotation = AnnotationUtils.findAnnotation(repositoryType, RepositoryRestResource.class);\n\t\tthis.repositoryExported = strategy.isExported(metadata);\n\n\t\tClass<?> domainType = metadata.getDomainType();\n\t\tthis.domainTypeMapping = EVO_INFLECTOR_IS_PRESENT\n\t\t\t\t? new EvoInflectorTypeBasedCollectionResourceMapping(domainType, relProvider)\n\t\t\t\t: new TypeBasedCollectionResourceMapping(domainType, relProvider);\n\n\t\tif (annotation != null) {\n\t\t\tLOGGER.warn(\n\t\t\t\t\t\"@RestResource detected to customize the repository resource for {}! Use @RepositoryRestResource instead!\",\n\t\t\t\t\tmetadata.getRepositoryInterface().getName());\n\t\t}\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.rest.core.mapping.ResourceMapping#getPath()\n\t */\n\t@Override\n\tpublic Path getPath() {\n\n\t\tPath fallback = domainTypeMapping.getPath();\n\n\t\tif (repositoryAnnotation != null) {\n\t\t\tString path = repositoryAnnotation.path();\n\t\t\treturn StringUtils.hasText(path) ? new Path(path) : fallback;\n\t\t}\n\n\t\tif (annotation != null) {\n\t\t\tString path = annotation.path();\n\t\t\treturn StringUtils.hasText(path) ? new Path(path) : fallback;\n\t\t}\n\n\t\treturn fallback;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.rest.core.mapping.ResourceMapping#getRel()\n\t */\n\t@Override\n\tpublic LinkRelation getRel() {\n\n\t\tLinkRelation fallback = domainTypeMapping.getRel();\n\n\t\tif (repositoryAnnotation != null) {\n\t\t\tString rel = repositoryAnnotation.collectionResourceRel();\n\t\t\treturn StringUtils.hasText(rel) ? LinkRelation.of(rel) : fallback;\n\t\t}\n\n\t\tif (annotation != null) {\n\t\t\tString rel = annotation.rel();\n\t\t\treturn StringUtils.hasText(rel) ? LinkRelation.of(rel) : fallback;\n\t\t}\n\n\t\treturn fallback;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.rest.core.mapping.CollectionResourceMapping#getSingleResourceRel()\n\t */\n<fim_suffix>\t@Override\n\tpublic LinkRelation getItemResourceRel() {\n\n\t\tLinkRelation fallback = domainTypeMapping.getItemResourceRel();\n\n\t\tif (repositoryAnnotation != null) {\n\t\t\tString rel = repositoryAnnotation.itemResourceRel();\n\t\t\treturn StringUtils.hasText(rel) ? LinkRelation.of(rel) : fallback;\n\t\t}\n\n\t\treturn fallback;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.rest.core.mapping.ResourceMapping#isExported()\n\t */\n\t@Override\n\tpublic boolean isExported() {\n\t\treturn repositoryExported;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.rest.core.mapping.CollectionResourceMapping#isPagingResource()\n\t */\n\t@Override\n\tpublic boolean isPagingResource() {\n\t\treturn metadata.isPagingRepository();\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.rest.core.mapping.ResourceMapping#getDescription()\n\t */\n\t@Override\n\tpublic ResourceDescription getDescription() {\n\n\t\tResourceDescription fallback = SimpleResourceDescription.defaultFor(getRel());\n\n\t\tif (repositoryAnnotation != null) {\n\t\t\treturn new AnnotationBasedResourceDescription(repositoryAnnotation.collectionResourceDescription(), fallback);\n\t\t}\n\n\t\treturn fallback;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.rest.core.mapping.CollectionResourceMapping#getItemResourceDescription()\n\t */\n\t@Override\n\tpublic ResourceDescription getItemResourceDescription() {\n\n\t\tResourceDescription fallback = SimpleResourceDescription.defaultFor(getItemResourceRel());\n\n\t\tif (repositoryAnnotation != null) {\n\t\t\treturn new AnnotationBasedResourceDescription(repositoryAnnotation.itemResourceDescription(), fallback);\n\t\t}\n\n\t\treturn fallback;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.rest.core.mapping.CollectionResourceMapping#getExcerptProjection()\n\t */\n\t@Override\n\tpublic Class<?> getExcerptProjection() {\n\n\t\tif (repositoryAnnotation == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tClass<?> excerptProjection = repositoryAnnotation.excerptProjection();\n\n\t\treturn excerptProjection.equals(RepositoryRestResource.None.class) ? null : excerptProjection;\n\t}\n}<fim_middle>// function below has no smell\n"}