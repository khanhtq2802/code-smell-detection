{"text": "<fim_prefix>\n<fim_suffix>public class BookKeeper implements org.apache.bookkeeper.client.api.BookKeeper {\n    private static final Logger LOG = LoggerFactory.getLogger(BookKeeper.class);\n    final EventLoopGroup eventLoopGroup;\n    private final ByteBufAllocator allocator;\n    // The stats logger for this client.\n    private final StatsLogger statsLogger;\n    private final BookKeeperClientStats clientStats;\n    // whether the event loop group is one we created, or is owned by whoever\n    // instantiated us\n    boolean ownEventLoopGroup = false;\n    final BookieClient bookieClient;\n    final BookieWatcherImpl bookieWatcher;\n    final OrderedExecutor mainWorkerPool;\n    final OrderedScheduler scheduler;\n    final HashedWheelTimer requestTimer;\n    final boolean ownTimer;\n    final FeatureProvider featureProvider;\n    final ScheduledExecutorService bookieInfoScheduler;\n    final MetadataClientDriver metadataDriver;\n    // Ledger manager responsible for how to store ledger meta data\n    final LedgerManagerFactory ledgerManagerFactory;\n    final LedgerManager ledgerManager;\n    final LedgerIdGenerator ledgerIdGenerator;\n    // Ensemble Placement Policy\n    final EnsemblePlacementPolicy placementPolicy;\n    BookieInfoReader bookieInfoReader;\n    final ClientConfiguration conf;\n    final ClientInternalConf internalConf;\n    // Close State\n    boolean closed = false;\n    final ReentrantReadWriteLock closeLock = new ReentrantReadWriteLock();\n    /**\n     * BookKeeper Client Builder to build client instances.\n     *\n     * @see BookKeeperBuilder\n     */\n    public static class Builder {\n        final ClientConfiguration conf;\n        ZooKeeper zk = null;\n        EventLoopGroup eventLoopGroup = null;\n        ByteBufAllocator allocator = null;\n        StatsLogger statsLogger = NullStatsLogger.INSTANCE;\n        DNSToSwitchMapping dnsResolver = null;\n        HashedWheelTimer requestTimer = null;\n        FeatureProvider featureProvider = null;\n        Builder(ClientConfiguration conf) {\n            this.conf = conf;\n        }\n        /**\n         * Configure the bookkeeper client with a provided {@link EventLoopGroup}.\n         *\n         * @param f an external {@link EventLoopGroup} to use by the bookkeeper client.\n         * @return client builder.\n         * @deprecated since 4.5, use {@link #eventLoopGroup(EventLoopGroup)}\n         * @see #eventLoopGroup(EventLoopGroup)\n         */\n        @Deprecated\n        public Builder setEventLoopGroup(EventLoopGroup f) {\n            eventLoopGroup = f;\n            return this;\n        }\n        /**\n         * Configure the bookkeeper client with a provided {@link ZooKeeper} client.\n         *\n         * @param zk an external {@link ZooKeeper} client to use by the bookkeeper client.\n         * @return client builder.\n         * @deprecated since 4.5, use {@link #zk(ZooKeeper)}\n         * @see #zk(ZooKeeper)\n         */\n        @Deprecated\n        public Builder setZookeeper(ZooKeeper zk) {\n            this.zk = zk;\n            return this;\n        }\n        /**\n         * Configure the bookkeeper client with a provided {@link StatsLogger}.\n         *\n         * @param statsLogger an {@link StatsLogger} to use by the bookkeeper client to collect stats generated\n         *                    by the client.\n         * @return client builder.\n         * @deprecated since 4.5, use {@link #statsLogger(StatsLogger)}\n         * @see #statsLogger(StatsLogger)\n         */\n        @Deprecated\n        public Builder setStatsLogger(StatsLogger statsLogger) {\n            this.statsLogger = statsLogger;\n            return this;\n        }\n        /**\n         * Configure the bookkeeper client with a provided {@link EventLoopGroup}.\n         *\n         * @param f an external {@link EventLoopGroup} to use by the bookkeeper client.\n         * @return client builder.\n         * @since 4.5\n         */\n        public Builder eventLoopGroup(EventLoopGroup f) {\n            eventLoopGroup = f;\n            return this;\n        }\n        /**\n         * Configure the bookkeeper client with a provided {@link ByteBufAllocator}.\n         *\n         * @param allocator an external {@link ByteBufAllocator} to use by the bookkeeper client.\n         * @return client builder.\n         * @since 4.9\n         */\n        public Builder allocator(ByteBufAllocator allocator) {\n            this.allocator = allocator;\n            return this;\n        }\n        /**\n         * Configure the bookkeeper client with a provided {@link ZooKeeper} client.\n         *\n         * @param zk an external {@link ZooKeeper} client to use by the bookkeeper client.\n         * @return client builder.\n         * @since 4.5\n         */\n        @Deprecated\n        public Builder zk(ZooKeeper zk) {\n            this.zk = zk;\n            return this;\n        }\n        /**\n         * Configure the bookkeeper client with a provided {@link StatsLogger}.\n         *\n         * @param statsLogger an {@link StatsLogger} to use by the bookkeeper client to collect stats generated\n         *                    by the client.\n         * @return client builder.\n         * @since 4.5\n         */\n        public Builder statsLogger(StatsLogger statsLogger) {\n            this.statsLogger = statsLogger;\n            return this;\n        }\n        /**\n         * Configure the bookkeeper client to use the provided dns resolver {@link DNSToSwitchMapping}.\n         *\n         * @param dnsResolver dns resolver for placement policy to use for resolving network locations.\n         * @return client builder\n         * @since 4.5\n         */\n        public Builder dnsResolver(DNSToSwitchMapping dnsResolver) {\n            this.dnsResolver = dnsResolver;\n            return this;\n        }\n        /**\n         * Configure the bookkeeper client to use a provided {@link HashedWheelTimer}.\n         *\n         * @param requestTimer request timer for client to manage timer related tasks.\n         * @return client builder\n         * @since 4.5\n         */\n        public Builder requestTimer(HashedWheelTimer requestTimer) {\n            this.requestTimer = requestTimer;\n            return this;\n        }\n        /**\n         * Feature Provider.\n         *\n         * @param featureProvider\n         * @return\n         */\n        public Builder featureProvider(FeatureProvider featureProvider) {\n            this.featureProvider = featureProvider;\n            return this;\n        }\n        public BookKeeper build() throws IOException, InterruptedException, BKException {\n            checkNotNull(statsLogger, \"No stats logger provided\");\n            return new BookKeeper(conf, zk, eventLoopGroup, allocator, statsLogger, dnsResolver, requestTimer,\n                    featureProvider);\n        }\n    }\n    public static Builder forConfig(final ClientConfiguration conf) {\n        return new Builder(conf);\n    }\n    /**\n     * Create a bookkeeper client. A zookeeper client and a client event loop group\n     * will be instantiated as part of this constructor.\n     *\n     * @param servers\n     *          A list of one of more servers on which zookeeper is running. The\n     *          client assumes that the running bookies have been registered with\n     *          zookeeper under the path\n     *          {@link AbstractConfiguration#getZkAvailableBookiesPath()}\n     * @throws IOException\n     * @throws InterruptedException\n     */\n    public BookKeeper(String servers) throws IOException, InterruptedException,\n        BKException {\n        this(new ClientConfiguration().setMetadataServiceUri(\"zk+null://\" + servers + \"/ledgers\"));\n    }\n    /**\n     * Create a bookkeeper client using a configuration object.\n     * A zookeeper client and a client event loop group will be\n     * instantiated as part of this constructor.\n     *\n     * @param conf\n     *          Client Configuration object\n     * @throws IOException\n     * @throws InterruptedException\n     */\n    public BookKeeper(final ClientConfiguration conf)\n            throws IOException, InterruptedException, BKException {\n        this(conf, null, null, null, NullStatsLogger.INSTANCE,\n                null, null, null);\n    }\n    private static ZooKeeper validateZooKeeper(ZooKeeper zk) throws NullPointerException, IOException {\n        checkNotNull(zk, \"No zookeeper instance provided\");\n        if (!zk.getState().isConnected()) {\n            LOG.error(\"Unconnected zookeeper handle passed to bookkeeper\");\n            throw new IOException(KeeperException.create(KeeperException.Code.CONNECTIONLOSS));\n        }\n        return zk;\n    }\n    private static EventLoopGroup validateEventLoopGroup(EventLoopGroup eventLoopGroup)\n            throws NullPointerException {\n        checkNotNull(eventLoopGroup, \"No Event Loop Group provided\");\n        return eventLoopGroup;\n    }\n    /**\n     * Create a bookkeeper client but use the passed in zookeeper client instead\n     * of instantiating one.\n     *\n     * @param conf\n     *          Client Configuration object\n     *          {@link ClientConfiguration}\n     * @param zk\n     *          Zookeeper client instance connected to the zookeeper with which\n     *          the bookies have registered\n     * @throws IOException\n     * @throws InterruptedException\n     */\n    public BookKeeper(ClientConfiguration conf, ZooKeeper zk)\n            throws IOException, InterruptedException, BKException {\n        this(conf, validateZooKeeper(zk), null, null, NullStatsLogger.INSTANCE, null, null, null);\n    }\n    /**<fim_middle>// class below has no smell\n"}