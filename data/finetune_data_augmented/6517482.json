{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2008, 2011 Sonatype Inc. and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Sonatype Inc. - initial API and implementation\n *******************************************************************************/\npackage PluginC.extra.views;\n\n\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.ui.part.*;\nimport org.eclipse.jface.viewers.*;\nimport org.eclipse.swt.graphics.Image;\nimport org.eclipse.jface.action.*;\nimport org.eclipse.jface.dialogs.MessageDialog;\nimport org.eclipse.ui.*;\nimport org.eclipse.swt.widgets.Menu;\nimport org.eclipse.swt.SWT;\n\n\n/**\n * This sample class demonstrates how to plug-in a new\n * workbench view. The view shows data obtained from the\n * model. The sample creates a dummy model on the fly,\n * but a real implementation would connect to the model\n * available either in this or another plug-in (e.g. the workspace).\n * The view is connected to the model using a content provider.\n * <p>\n * The view uses a label provider to define how model\n * objects should be presented in the view. Each\n * view can present the same model objects using\n * different labels and icons, if needed. Alternatively,\n * a single label provider can be shared between views\n * in order to ensure that objects of the same type are\n * presented in the same way everywhere.\n * <p>\n */\n\npublic class SampleView extends ViewPart {\n\tprivate TableViewer viewer;\n\tprivate Action action1;\n\tprivate Action action2;\n\tprivate Action doubleClickAction;\n\n\t/*\n\t * The content provider class is responsible for\n\t * providing objects to the view. It can wrap\n\t * existing objects in adapters or simply return\n\t * objects as-is. These objects may be sensitive\n\t * to the current input of the view, or ignore\n\t * it and always show the same content \n\t * (like Task List, for example).\n\t */\n\t \n\tclass ViewContentProvider implements IStructuredContentProvider {\n\t\tpublic void inputChanged(Viewer v, Object oldInput, Object newInput) {\n\t\t}\n\t\tpublic void dispose() {\n\t\t}\n\t\tpublic Object[] getElements(Object parent) {\n\t\t\treturn new String[] { \"One\", \"Two\", \"Three\" };\n\t\t}\n\t}\n\tclass ViewLabelProvider extends LabelProvider implements ITableLabelProvider {\n\t\tpublic String getColumnText(Object obj, int index) {\n\t\t\treturn getText(obj);\n\t\t}\n\t\tpublic Image getColumnImage(Object obj, int index) {\n\t\t\treturn getImage(obj);\n\t\t}\n<fim_suffix>\t\tpublic Image getImage(Object obj) {\n\t\t\treturn PlatformUI.getWorkbench().\n\t\t\t\t\tgetSharedImages().getImage(ISharedImages.IMG_OBJ_ELEMENT);\n\t\t}\n\t}\n\tclass NameSorter extends ViewerSorter {\n\t}\n\n\t/**\n\t * The constructor.\n\t */\n\tpublic SampleView() {\n\t}\n\n\t/**\n\t * This is a callback that will allow us\n\t * to create the viewer and initialize it.\n\t */\n\tpublic void createPartControl(Composite parent) {\n\t\tviewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);\n\t\tviewer.setContentProvider(new ViewContentProvider());\n\t\tviewer.setLabelProvider(new ViewLabelProvider());\n\t\tviewer.setSorter(new NameSorter());\n\t\tviewer.setInput(getViewSite());\n\t\tmakeActions();\n\t\thookContextMenu();\n\t\thookDoubleClickAction();\n\t\tcontributeToActionBars();\n\t}\n\n\tprivate void hookContextMenu() {\n\t\tMenuManager menuMgr = new MenuManager(\"#PopupMenu\");\n\t\tmenuMgr.setRemoveAllWhenShown(true);\n\t\tmenuMgr.addMenuListener(new IMenuListener() {\n\t\t\tpublic void menuAboutToShow(IMenuManager manager) {\n\t\t\t\tSampleView.this.fillContextMenu(manager);\n\t\t\t}\n\t\t});\n\t\tMenu menu = menuMgr.createContextMenu(viewer.getControl());\n\t\tviewer.getControl().setMenu(menu);\n\t\tgetSite().registerContextMenu(menuMgr, viewer);\n\t}\n\n\tprivate void contributeToActionBars() {\n\t\tIActionBars bars = getViewSite().getActionBars();\n\t\tfillLocalPullDown(bars.getMenuManager());\n\t\tfillLocalToolBar(bars.getToolBarManager());\n\t}\n\n\tprivate void fillLocalPullDown(IMenuManager manager) {\n\t\tmanager.add(action1);\n\t\tmanager.add(new Separator());\n\t\tmanager.add(action2);\n\t}\n\n\tprivate void fillContextMenu(IMenuManager manager) {\n\t\tmanager.add(action1);\n\t\tmanager.add(action2);\n\t\t// Other plug-ins can contribute there actions here\n\t\tmanager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));\n\t}\n\t\n\tprivate void fillLocalToolBar(IToolBarManager manager) {\n\t\tmanager.add(action1);\n\t\tmanager.add(action2);\n\t}\n\n\tprivate void makeActions() {\n\t\taction1 = new Action() {\n\t\t\tpublic void run() {\n\t\t\t\tshowMessage(\"Action 1 executed\");\n\t\t\t}\n\t\t};\n\t\taction1.setText(\"Action 1\");\n\t\taction1.setToolTipText(\"Action 1 tooltip\");\n\t\taction1.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().\n\t\t\tgetImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));\n\t\t\n\t\taction2 = new Action() {\n\t\t\tpublic void run() {\n\t\t\t\tshowMessage(\"Action 2 executed\");\n\t\t\t}\n\t\t};\n\t\taction2.setText(\"Action 2\");\n\t\taction2.setToolTipText(\"Action 2 tooltip\");\n\t\taction2.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().\n\t\t\t\tgetImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));\n\t\tdoubleClickAction = new Action() {\n\t\t\tpublic void run() {\n\t\t\t\tISelection selection = viewer.getSelection();\n\t\t\t\tObject obj = ((IStructuredSelection)selection).getFirstElement();\n\t\t\t\tshowMessage(\"Double-click detected on \"+obj.toString());\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate void hookDoubleClickAction() {\n\t\tviewer.addDoubleClickListener(new IDoubleClickListener() {\n\t\t\tpublic void doubleClick(DoubleClickEvent event) {\n\t\t\t\tdoubleClickAction.run();\n\t\t\t}\n\t\t});\n\t}\n\tprivate void showMessage(String message) {\n\t\tMessageDialog.openInformation(\n\t\t\tviewer.getControl().getShell(),\n\t\t\t\"Sample View\",\n\t\t\tmessage);\n\t}\n\n\t/**\n\t * Passing the focus request to the viewer's control.\n\t */\n\tpublic void setFocus() {\n\t\tviewer.getControl().setFocus();\n\t}\n}<fim_middle>// function below has no smell\n"}