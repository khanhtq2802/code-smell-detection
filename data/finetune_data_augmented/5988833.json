{"text": "<fim_prefix>/*\n * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\npackage software.amazon.awssdk.codegen.lite.regions.model;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.List;\nimport software.amazon.awssdk.annotations.SdkInternalApi;\n\n/**\n * Endpoint configuration.\n */\n@SdkInternalApi\npublic final class Endpoint implements Cloneable {\n\n    private static final String HTTP = \"http\";\n\n    private static final String HTTPS = \"https\";\n\n    /**\n     * endpoint string.\n     */\n    private String hostname;\n\n    /**\n     * credential scope for the endpoint.\n     */\n    private CredentialScope credentialScope;\n\n    /**\n     * supported schemes for the endpoint.\n     */\n    private List<String> protocols;\n\n    /**\n     * supported signature versions of the endpoint.\n     */\n    private List<String> signatureVersions;\n\n    /**\n     * ssl common name for the endpoint.\n     */\n    private String sslCommonName;\n\n    public Endpoint() {}\n\n    /**\n     * Merges the given endpoints and returns the merged one.\n     */\n    public Endpoint merge(Endpoint higher) {\n        if (higher == null) {\n            higher = new Endpoint();\n        }\n\n        Endpoint merged = this.clone();\n\n        merged.setCredentialScope(higher.getCredentialScope() != null\n                                          ? higher.getCredentialScope()\n                                          : merged.getCredentialScope());\n\n        merged.setHostname(higher.getHostname() != null\n                                   ? higher.getHostname()\n                                   : merged.getHostname());\n\n        merged.setSslCommonName(higher.getSslCommonName() != null\n                                        ? higher.getSslCommonName()\n                                        : merged.getSslCommonName());\n\n        merged.setProtocols(higher.getProtocols() != null\n                                    ? higher.getProtocols()\n                                    : merged.getProtocols());\n\n        merged.setSignatureVersions(higher.getSignatureVersions() != null\n                                            ? higher.getSignatureVersions()\n                                            : merged.getSignatureVersions());\n\n        return merged;\n    }\n\n    /**\n     * returns the endpoint string.\n     */\n    public String getHostname() {\n        return hostname;\n    }\n\n    /**\n     * sets the endpoint string.\n     */\n    @JsonProperty(value = \"hostname\")\n    public void setHostname(String hostname) {\n        this.hostname = hostname;\n    }\n\n    /**\n     * returns credential scope for the endpoint.\n     */\n    public CredentialScope getCredentialScope() {\n        return credentialScope;\n    }\n\n    /**\n     * sets the credential scope for the endpoint.\n     */\n<fim_suffix>    @JsonProperty(value = \"credentialScope\")\n    public void setCredentialScope(CredentialScope credentialScope) {\n        this.credentialScope = credentialScope;\n    }\n\n    /**\n     * returns the supported schemes for the endpoint.\n     */\n    public List<String> getProtocols() {\n        return protocols;\n    }\n\n    /**\n     * sets the supported schemes for the endpoint.\n     */\n    public void setProtocols(List<String> protocols) {\n        this.protocols = protocols;\n    }\n\n    /**\n     * returns the supported signature versions of the endpoint.\n     */\n    public List<String> getSignatureVersions() {\n        return signatureVersions;\n    }\n\n    /**\n     * returns the supported signature versions of the endpoint.\n     */\n    @JsonProperty(value = \"signatureVersions\")\n    public void setSignatureVersions(List<String> signatureVersions) {\n        this.signatureVersions = signatureVersions;\n    }\n\n    /**\n     * returns the ssl common name for the endpoint.\n     */\n    public String getSslCommonName() {\n        return sslCommonName;\n    }\n\n    /**\n     * sets the ssl common name for the endpoint.\n     */\n    @JsonProperty(value = \"sslCommonName\")\n    public void setSslCommonName(String sslCommonName) {\n        this.sslCommonName = sslCommonName;\n    }\n\n    /**\n     * A convenient method that returns true if the endpoint support HTTPS\n     * scheme. Returns false otherwise.\n     */\n    public boolean hasHttpsSupport() {\n        return isProtocolSupported(HTTPS);\n    }\n\n    /**\n     * A convenient method that returns true if the endpoint support HTTP\n     * scheme. Returns false otherwise.\n     */\n    public boolean hasHttpSupport() {\n        return isProtocolSupported(HTTP);\n    }\n\n    private boolean isProtocolSupported(String protocol) {\n        return protocols != null && protocols.contains(protocol);\n    }\n\n    @Override\n    protected Endpoint clone() {\n        try {\n            return (Endpoint) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new IllegalStateException(\n                    \"Got a CloneNotSupportedException from Object.clone() even though we're Cloneable!\", e);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}