{"text": "<fim_prefix>package org.robolectric.plugins;\n\nimport static android.os.Build.VERSION_CODES.JELLY_BEAN;\nimport static android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;\nimport static android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;\nimport static android.os.Build.VERSION_CODES.KITKAT;\nimport static android.os.Build.VERSION_CODES.LOLLIPOP;\nimport static android.os.Build.VERSION_CODES.LOLLIPOP_MR1;\nimport static android.os.Build.VERSION_CODES.M;\nimport static android.os.Build.VERSION_CODES.N;\nimport static android.os.Build.VERSION_CODES.N_MR1;\nimport static android.os.Build.VERSION_CODES.O;\nimport static android.os.Build.VERSION_CODES.O_MR1;\nimport static android.os.Build.VERSION_CODES.P;\nimport static android.os.Build.VERSION_CODES.Q;\n\nimport com.google.auto.service.AutoService;\nimport com.google.common.base.Preconditions;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Locale;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport javax.annotation.Priority;\nimport javax.inject.Inject;\nimport org.robolectric.internal.dependency.DependencyJar;\nimport org.robolectric.internal.dependency.DependencyResolver;\nimport org.robolectric.pluginapi.Sdk;\nimport org.robolectric.pluginapi.SdkProvider;\nimport org.robolectric.util.Util;\n\n/**\n * Robolectric's default {@link SdkProvider}.\n *\n * The list of SDKs is hard-coded. SDKs are obtained from the provided {@link DependencyResolver}.\n */\n@SuppressWarnings(\"NewApi\")\n@AutoService(SdkProvider.class)\n@Priority(Integer.MIN_VALUE)\npublic class DefaultSdkProvider implements SdkProvider {\n\n  private static final int RUNNING_JAVA_VERSION = Util.getJavaVersion();\n\n  private final DependencyResolver dependencyResolver;\n\n  private final SortedMap<Integer, Sdk> knownSdks;\n\n  @Inject\n  public DefaultSdkProvider(DependencyResolver dependencyResolver) {\n    this.dependencyResolver = Preconditions.checkNotNull(dependencyResolver);\n    TreeMap<Integer, Sdk> tmpKnownSdks = new TreeMap<>();\n    populateSdks(tmpKnownSdks);\n\n    this.knownSdks = Collections.unmodifiableSortedMap(tmpKnownSdks);\n  }\n\n  protected void populateSdks(TreeMap<Integer, Sdk> knownSdks) {\n    knownSdks.put(JELLY_BEAN, new DefaultSdk(JELLY_BEAN, \"4.1.2_r1\", \"r1\", \"REL\", 8));\n    knownSdks.put(JELLY_BEAN_MR1, new DefaultSdk(JELLY_BEAN_MR1, \"4.2.2_r1.2\", \"r1\", \"REL\", 8));\n    knownSdks.put(JELLY_BEAN_MR2, new DefaultSdk(JELLY_BEAN_MR2, \"4.3_r2\", \"r1\", \"REL\", 8));\n    knownSdks.put(KITKAT, new DefaultSdk(KITKAT, \"4.4_r1\", \"r2\", \"REL\", 8));\n    knownSdks.put(LOLLIPOP, new DefaultSdk(LOLLIPOP, \"5.0.2_r3\", \"r0\", \"REL\", 8));\n    knownSdks.put(LOLLIPOP_MR1, new DefaultSdk(LOLLIPOP_MR1, \"5.1.1_r9\", \"r2\", \"REL\", 8));\n    knownSdks.put(M, new DefaultSdk(M, \"6.0.1_r3\", \"r1\", \"REL\", 8));\n    knownSdks.put(N, new DefaultSdk(N, \"7.0.0_r1\", \"r1\", \"REL\", 8));\n    knownSdks.put(N_MR1, new DefaultSdk(N_MR1, \"7.1.0_r7\", \"r1\", \"REL\", 8));\n    knownSdks.put(O, new DefaultSdk(O, \"8.0.0_r4\", \"r1\", \"REL\", 8));\n    knownSdks.put(O_MR1, new DefaultSdk(O_MR1, \"8.1.0\", \"4611349\", \"REL\", 8));\n    knownSdks.put(P, new DefaultSdk(P, \"9\", \"4913185-2\", \"REL\", 8));\n    knownSdks.put(Q, new DefaultSdk(Q, \"Q\", \"5283294\", \"Q\", 9));\n  }\n\n  @Override\n  public Collection<Sdk> getSdks() {\n    return Collections.unmodifiableCollection(knownSdks.values());\n  }\n\n  /** Represents an Android SDK stored at Maven Central. */\n<fim_suffix>  public class DefaultSdk extends Sdk {\n\n    private final String androidVersion;\n    private final String robolectricVersion;\n    private final String codeName;\n    private final int requiredJavaVersion;\n    private Path jarPath;\n\n    public DefaultSdk(\n        int apiLevel,\n        String androidVersion,\n        String robolectricVersion,\n        String codeName,\n        int requiredJavaVersion) {\n      super(apiLevel);\n      this.androidVersion = androidVersion;\n      this.robolectricVersion = robolectricVersion;\n      this.codeName = codeName;\n      this.requiredJavaVersion = requiredJavaVersion;\n      Preconditions.checkNotNull(dependencyResolver);\n    }\n\n    @Override\n    public String getAndroidVersion() {\n      return androidVersion;\n    }\n\n    @Override\n    public String getAndroidCodeName() {\n      return codeName;\n    }\n\n    private DependencyJar getAndroidSdkDependency() {\n      if (!isSupported()) {\n        throw new UnsupportedClassVersionError(getUnsupportedMessage());\n      }\n\n      return new DependencyJar(\"org.robolectric\",\n          \"android-all\",\n          getAndroidVersion() + \"-robolectric-\" + robolectricVersion, null);\n    }\n\n    @Override\n    public synchronized Path getJarPath() {\n      if (jarPath == null) {\n        URL url = dependencyResolver.getLocalArtifactUrl(getAndroidSdkDependency());\n        jarPath = Util.pathFrom(url);\n\n        if (!Files.exists(jarPath)) {\n          throw new RuntimeException(\"SDK \" + getApiLevel() + \" jar not present at \" + jarPath);\n        }\n      }\n      return jarPath;\n    }\n\n    @Override\n    public boolean isSupported() {\n      return requiredJavaVersion <= RUNNING_JAVA_VERSION;\n    }\n\n    @Override\n    public String getUnsupportedMessage() {\n      return String.format(\n          Locale.getDefault(),\n          \"Android SDK %d requires Java %d (have Java %d)\",\n          getApiLevel(),\n          requiredJavaVersion,\n          RUNNING_JAVA_VERSION);\n    }\n  }\n}<fim_middle>// class below has no smell\n"}