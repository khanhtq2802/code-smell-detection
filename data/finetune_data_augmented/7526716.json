{"text": "<fim_prefix>/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.hateoas.server.mvc;\n\nimport static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.hateoas.CollectionModel;\nimport org.springframework.hateoas.RepresentationModel;\nimport org.springframework.hateoas.server.RepresentationModelAssembler;\nimport org.springframework.util.Assert;\n\n/**\n * Base class to implement {@link RepresentationModelAssembler}s. Will automate {@link RepresentationModel} instance\n * creation and make sure a self-link is always added.\n *\n * @author Oliver Gierke\n * @author Greg Turnquist\n */\npublic abstract class RepresentationModelAssemblerSupport<T, D extends RepresentationModel<D>>\n\t\timplements RepresentationModelAssembler<T, D> {\n\n\tprivate final Class<?> controllerClass;\n\tprivate final Class<D> resourceType;\n\n\t/**\n\t * Creates a new {@link RepresentationModelAssemblerSupport} using the given controller class and resource type.\n\t *\n\t * @param controllerClass must not be {@literal null}.\n\t * @param resourceType must not be {@literal null}.\n\t */\n\tpublic RepresentationModelAssemblerSupport(Class<?> controllerClass, Class<D> resourceType) {\n\n\t\tAssert.notNull(controllerClass, \"ControllerClass must not be null!\");\n\t\tAssert.notNull(resourceType, \"ResourceType must not be null!\");\n\n\t\tthis.controllerClass = controllerClass;\n\t\tthis.resourceType = resourceType;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.hateoas.server.RepresentationModelAssembler#toCollectionModel(java.lang.Iterable)\n\t */\n\t@Override\n\tpublic CollectionModel<D> toCollectionModel(Iterable<? extends T> entities) {\n\t\treturn this.map(entities).toResources();\n\t}\n\n\tpublic Builder<T, D> map(Iterable<? extends T> entities) {\n\t\treturn new Builder<>(entities, this);\n\t}\n\n\t/**\n\t * Creates a new resource with a self link to the given id.\n\t *\n\t * @param entity must not be {@literal null}.\n\t * @param id must not be {@literal null}.\n\t * @return\n\t */\n<fim_suffix>\tprotected D createModelWithId(Object id, T entity) {\n\t\treturn createModelWithId(id, entity, new Object[0]);\n\t}\n\n\tprotected D createModelWithId(Object id, T entity, Object... parameters) {\n\n\t\tAssert.notNull(entity, \"Entity must not be null!\");\n\t\tAssert.notNull(id, \"Id must not be null!\");\n\n\t\tD instance = instantiateModel(entity);\n\t\tinstance.add(linkTo(this.controllerClass, parameters).slash(id).withSelfRel());\n\t\treturn instance;\n\t}\n\n\t/**\n\t * Instantiates the resource object. Default implementation will assume a no-arg constructor and use reflection but\n\t * can be overridden to manually set up the object instance initially (e.g. to improve performance if this becomes an\n\t * issue).\n\t *\n\t * @param entity\n\t * @return\n\t */\n\tprotected D instantiateModel(T entity) {\n\t\treturn BeanUtils.instantiateClass(this.resourceType);\n\t}\n\n\tstatic class Builder<T, D extends RepresentationModel<D>> {\n\n\t\tprivate final Iterable<? extends T> entities;\n\t\tprivate final RepresentationModelAssemblerSupport<T, D> resourceAssembler;\n\n\t\tBuilder(Iterable<? extends T> entities, RepresentationModelAssemblerSupport<T, D> resourceAssembler) {\n\n\t\t\tthis.entities = Objects.requireNonNull(entities, \"entities must not null!\");\n\t\t\tthis.resourceAssembler = resourceAssembler;\n\t\t}\n\n\t\t/**\n\t\t * Transform a list of {@code T}s into a list of {@link RepresentationModel}s.\n\t\t *\n\t\t * @see #toListOfResources() if you need this transformed list rendered as hypermedia\n\t\t * @return\n\t\t */\n\t\tpublic List<D> toListOfResources() {\n\n\t\t\tList<D> result = new ArrayList<>();\n\n\t\t\tfor (T entity : this.entities) {\n\t\t\t\tresult.add(this.resourceAssembler.toModel(entity));\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\t * Converts all given entities into resources and wraps the result in a {@link CollectionModel}\n\t\t * instance.\n\t\t *\n\t\t * @see #toListOfResources() and {@link RepresentationModelAssembler#toModel(Object)}\n\t\t * @return\n\t\t */\n\t\tpublic CollectionModel<D> toResources() {\n\t\t\treturn new CollectionModel<>(toListOfResources());\n\t\t}\n\t}\n}<fim_middle>// function below has no smell\n"}