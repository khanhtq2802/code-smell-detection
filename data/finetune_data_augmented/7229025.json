{"text": "<fim_prefix>/*\n * Copyright (c) 2011-2019 Pivotal Software Inc, All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage reactor.netty.http.client;\n\nimport java.util.Objects;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\n\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\nimport reactor.netty.ByteBufFlux;\nimport reactor.netty.http.websocket.WebsocketInbound;\nimport reactor.netty.http.websocket.WebsocketOutbound;\nimport reactor.netty.tcp.TcpClient;\n\n/**\n * @author Stephane Maldini\n */\n<fim_suffix>final class WebsocketFinalizer extends HttpClient implements HttpClient.WebsocketSender {\n\n\tfinal TcpClient cachedConfiguration;\n\n\tWebsocketFinalizer(TcpClient parent) {\n\t\tthis.cachedConfiguration = parent;\n\t}\n\n\t// UriConfiguration methods\n\n\t@Override\n\tpublic WebsocketSender uri(String uri) {\n\t\treturn new WebsocketFinalizer(cachedConfiguration.bootstrap(b -> HttpClientConfiguration.uri(b, uri)));\n\t}\n\n\t@Override\n\tpublic WebsocketSender uri(Mono<String> uri) {\n\t\treturn new WebsocketFinalizer(cachedConfiguration.bootstrap(b -> HttpClientConfiguration.deferredConf(b, conf -> uri.map(conf::uri))));\n\t}\n\n\t// WebsocketSender methods\n\t@Override\n\tpublic WebsocketFinalizer send(Function<? super HttpClientRequest, ? extends Publisher<Void>> sender) {\n\t\tObjects.requireNonNull(sender, \"requestBody\");\n\t\treturn new WebsocketFinalizer(cachedConfiguration.bootstrap(b -> HttpClientConfiguration.body(b, (req, out) -> sender.apply(req))));\n\t}\n\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic Mono<WebsocketClientOperations> connect() {\n\t\treturn (Mono<WebsocketClientOperations>)cachedConfiguration.connect();\n\t}\n\n\t@Override\n\tpublic ByteBufFlux receive() {\n\t\treturn HttpClientFinalizer.content(cachedConfiguration, HttpClientFinalizer.contentReceiver);\n\t}\n\n\t@Override\n\tpublic <V> Flux<V> handle(BiFunction<? super WebsocketInbound, ? super WebsocketOutbound, ? extends Publisher<V>> receiver) {\n\t\treturn connect().flatMapMany(c -> Flux.from(receiver.apply(c, c))\n\t\t                                      .doFinally(s -> HttpClientFinalizer.discard(c)));\n\t}\n}\n<fim_middle>// class below has no smell\n"}