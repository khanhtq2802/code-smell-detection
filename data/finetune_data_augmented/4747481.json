{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.gobblin.source.workunit;\n\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.primitives.Longs;\n\n\n/**\n * Helper class that distributes {@link WorkUnit}s amongst a series of {@link MultiWorkUnit}s. When a WorkUnit is added\n * to this queue, it is added along with a weight which indicates how much effort it will take to process this WorkUnit.\n * For example, a larger weight means that this WorkUnit will take longer to process. For files this can simply be the\n * file size.\n *\n * <p>\n *\n * The constructor {@link MultiWorkUnitWeightedQueue(int maxMultiWorkUnits)} sets a maximum size for the queue. This\n * means that when more than maxMultiWorkUnits are added to the queue, WorkUnits will start to be paired together into\n * MultiWorkUnits.\n *\n * @see MultiWorkUnit\n */\npublic class MultiWorkUnitWeightedQueue {\n\n  private final Queue<WeightedMultiWorkUnit> weightedWorkUnitQueue;\n\n  private int maxMultiWorkUnits = Integer.MAX_VALUE;\n  private int numMultiWorkUnits = 0;\n\n  /**\n   * The default constructor sets the limit on the queue to size to be {@link Integer#MAX_VALUE}. This means that until\n   * Integer.MAX_VALUE + 1 WorkUnits are added to the queue, no WorkUnits will be paired together.\n   */\n  public MultiWorkUnitWeightedQueue() {\n    this.weightedWorkUnitQueue = new PriorityQueue<>();\n  }\n\n  public MultiWorkUnitWeightedQueue(int maxMultiWorkUnits) {\n    this.weightedWorkUnitQueue = new PriorityQueue<>(maxMultiWorkUnits);\n    this.maxMultiWorkUnits = maxMultiWorkUnits;\n  }\n\n  /**\n   * Adds a {@link WorkUnit} to this queue, along with an associated weight for that WorkUnit.\n   */\n  public void addWorkUnit(WorkUnit workUnit, long weight) {\n\n    WeightedMultiWorkUnit weightMultiWorkUnit;\n\n    if (this.numMultiWorkUnits < this.maxMultiWorkUnits) {\n      weightMultiWorkUnit = new WeightedMultiWorkUnit();\n      this.numMultiWorkUnits++;\n\n    } else {\n\n      weightMultiWorkUnit = this.weightedWorkUnitQueue.poll();\n    }\n\n    weightMultiWorkUnit.addWorkUnit(weight, workUnit);\n    this.weightedWorkUnitQueue.offer(weightMultiWorkUnit);\n\n  }\n\n  /**\n   * Returns the a list of WorkUnits that have been added to this queue via the {@link #addWorkUnit(WorkUnit, long)}\n   * method.\n   */\n  public List<WorkUnit> getQueueAsList() {\n    return ImmutableList.<WorkUnit> builder().addAll(this.weightedWorkUnitQueue).build();\n  }\n\n  /**\n   * This class defines the weighted multiWorkUnit. It extends {@link MultiWorkUnit}. Each weightedMultiworkUnit has a\n   * weight, which is the sum of the file sizes assigned to it. It also implements Comparable, based on the weight value.\n   *\n   * @author ydai\n   */\n<fim_suffix>  private static class WeightedMultiWorkUnit extends MultiWorkUnit implements Comparable<WeightedMultiWorkUnit> {\n\n    private long weight = 0l;\n\n    /**\n     * Add a new single workUnit to the current workUnits list. Update the weight by adding the weight of the new workUnit.\n     *\n     * @param weight the weight of the newWorkUnit.\n     * @param newWorkUnit the new work unit.\n     */\n    private void addWorkUnit(long weight, WorkUnit newWorkUnit) {\n      this.addWorkUnit(newWorkUnit);\n      this.weight += weight;\n    }\n\n    /**\n     * Compare with the other weightedMultiWorkUnit based on weight.\n     */\n    @Override\n    public int compareTo(WeightedMultiWorkUnit weightedMultiWorkUnit) {\n      return Longs.compare(this.weight, weightedMultiWorkUnit.getWeight());\n    }\n\n    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      result = prime * result + (int) (this.weight ^ (this.weight >>> 32));\n      return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n      if (!(obj instanceof WeightedMultiWorkUnit)) {\n        return false;\n      }\n      WeightedMultiWorkUnit weightedMultiWorkUnit = (WeightedMultiWorkUnit) obj;\n      return this.weight == weightedMultiWorkUnit.getWeight();\n    }\n\n    public long getWeight() {\n      return this.weight;\n    }\n  }\n}<fim_middle>// class below has no smell\n"}