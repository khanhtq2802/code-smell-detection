{"text": "<fim_prefix>// ***************************************************************************************************************************\n// * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file *\n// * distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file        *\n// * to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance            *\n// * with the License.  You may obtain a copy of the License at                                                              *\n// *                                                                                                                         *\n// *  http://www.apache.org/licenses/LICENSE-2.0                                                                             *\n// *                                                                                                                         *\n// * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an  *\n// * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the        *\n// * specific language governing permissions and limitations under the License.                                              *\n// ***************************************************************************************************************************\npackage org.apache.juneau.internal;\n\nimport static org.apache.juneau.internal.ThrowableUtils.*;\n\nimport java.util.*;\n\n/**\n * Utility class for defining an iterator over one or more iterables.\n *\n * @param <E> The element class type.\n */\n<fim_suffix>public class MultiIterable<E> implements Iterable<E> {\n\n\tfinal List<Iterator<E>> iterators = new LinkedList<>();\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param iterators The list of iterators to iterate over.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic MultiIterable(Iterator<E>...iterators) {\n\t\tfor (Iterator<E> i : iterators)\n\t\t\tappend(i);\n\t}\n\n\t/**\n\t * Appends the specified iterator to this list of iterators.\n\t *\n\t * @param iterator The iterator to append.\n\t * @return This object (for method chaining).\n\t */\n\tpublic MultiIterable<E> append(Iterator<E> iterator) {\n\t\tassertFieldNotNull(iterator, \"iterator\");\n\t\tthis.iterators.add(iterator);\n\t\treturn this;\n\t}\n\n\t@Override /* Iterable */\n\tpublic Iterator<E> iterator() {\n\t\treturn new Iterator<E>() {\n\t\t\tIterator<Iterator<E>> i1 = iterators.iterator();\n\t\t\tIterator<E> i2 = i1.hasNext() ? i1.next() : null;\n\n\t\t\t@Override /* Iterator */\n\t\t\tpublic boolean hasNext() {\n\t\t\t\twhile (i2 != null && ! i2.hasNext())\n\t\t\t\t\ti2 = (i1.hasNext() ? i1.next() : null);\n\t\t\t\treturn (i2 != null);\n\t\t\t}\n\n\t\t\t@Override /* Iterator */\n\t\t\tpublic E next() {\n\t\t\t\thasNext();\n\t\t\t\tif (i2 == null)\n\t\t\t\t\tthrow new NoSuchElementException();\n\t\t\t\treturn i2.next();\n\t\t\t}\n\n\t\t\t@Override /* Iterator */\n\t\t\tpublic void remove() {\n\t\t\t\tif (i2 == null)\n\t\t\t\t\tthrow new NoSuchElementException();\n\t\t\t\ti2.remove();\n\t\t\t}\n\t\t};\n\t}\n}<fim_middle>// class below has no smell\n"}