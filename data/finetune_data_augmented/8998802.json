{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.solr.common.util;\n\nimport org.slf4j.Logger;\n\nimport org.xml.sax.ErrorHandler;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\nimport javax.xml.transform.ErrorListener;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.stream.Location;\nimport javax.xml.stream.XMLReporter;\n\n<fim_suffix>public final class XMLErrorLogger implements ErrorHandler,ErrorListener,XMLReporter {\n\n  private final Logger log;\n\n  public XMLErrorLogger(Logger log) {\n    this.log = log;\n  }\n\n  // ErrorHandler\n\n  @Override\n  public void warning(SAXParseException e) {\n    log.warn(\"XML parse warning in \\\"\"+e.getSystemId()+\"\\\", line \"+e.getLineNumber()+\", column \"+e.getColumnNumber()+\": \"+e.getMessage());\n  }\n\n  @Override\n  public void error(SAXParseException e) throws SAXException {\n    throw e;\n  }\n\n  @Override\n  public void fatalError(SAXParseException e) throws SAXException {\n    throw e;\n  }\n\n  // ErrorListener\n\n  @Override\n  public void warning(TransformerException e) {\n    log.warn(e.getMessageAndLocation());\n  }\n\n  @Override\n  public void error(TransformerException e) throws TransformerException {\n    throw e;\n  }\n\n  @Override\n  public void fatalError(TransformerException e) throws TransformerException {\n    throw e;\n  }\n\n  // XMLReporter\n\n  @Override\n  public void report(String message, String errorType, Object relatedInformation, Location loc) {\n    final StringBuilder sb = new StringBuilder(\"XML parser reported \").append(errorType);\n    if (loc !=  null) {\n      sb.append(\" in \\\"\").append(loc.getSystemId()).append(\"\\\", line \")\n        .append(loc.getLineNumber()).append(\", column \").append(loc.getColumnNumber());\n    }\n    log.warn(sb.append(\": \").append(message).toString());\n  }\n\n}<fim_middle>// class below has no smell\n"}