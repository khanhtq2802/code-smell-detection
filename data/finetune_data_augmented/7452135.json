{"text": "<fim_prefix>/*\n * Copyright (c) 2019, 2019, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.svm.core;\n\nimport java.io.CharConversionException;\nimport java.nio.ByteBuffer;\n\nimport org.graalvm.nativeimage.Platform;\nimport org.graalvm.nativeimage.Platforms;\nimport org.graalvm.nativeimage.c.type.CCharPointer;\nimport org.graalvm.nativeimage.c.type.CTypeConversion;\n\nimport com.oracle.svm.core.c.CGlobalData;\nimport com.oracle.svm.core.c.CGlobalDataFactory;\nimport com.oracle.svm.core.util.Utf8;\nimport com.oracle.svm.core.util.VMError;\n\n<fim_suffix>public final class VM {\n    private static final String valueSeparator = \"\\t\";\n    private static final String versionValue = getVersionValue();\n\n    @Platforms(Platform.HOSTED_ONLY.class)\n    private static String getVersionValue() {\n        String version = System.getProperty(\"org.graalvm.version\");\n        VMError.guarantee(version != null);\n        version = VM.class.getName() + valueSeparator + \"GraalVM \" + version;\n        String config = System.getProperty(\"org.graalvm.config\", \"\");\n        if (!config.isEmpty()) {\n            version += \" \" + config;\n        }\n        return version;\n    }\n\n    private static final String VERSION_INFO_SYMBOL_NAME = \"__svm_version_info\";\n\n    private static final CGlobalData<CCharPointer> VERSION_INFO = CGlobalDataFactory.createCString(versionValue, VERSION_INFO_SYMBOL_NAME);\n\n    public static String getVersion() {\n        try {\n            CCharPointer versionInfoBytes = VERSION_INFO.get();\n            ByteBuffer buffer = CTypeConversion.asByteBuffer(versionInfoBytes, Math.toIntExact(SubstrateUtil.strlen(versionInfoBytes).rawValue()));\n            String version = Utf8.utf8ToString(true, buffer);\n            VMError.guarantee(versionValue.equals(version), \"Version info mismatch: \" + VERSION_INFO_SYMBOL_NAME + \" contains \" + version + \" (expected \" + versionValue + \")\");\n            return SubstrateUtil.split(version, valueSeparator)[1];\n        } catch (CharConversionException ignore) {\n            throw VMError.shouldNotReachHere(\"Invalid version info in \" + VERSION_INFO_SYMBOL_NAME);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}