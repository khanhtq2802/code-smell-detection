{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.beam.runners.dataflow.worker.util.common.worker;\n\n/**\n * Implements a group of linked {@link ProgressTracker ProgressTrackers} that collectively track how\n * far a processing loop has gotten through the elements it's processing. Individual {@code\n * ProgressTracker} instances may be copied, capturing an independent view of the progress of the\n * system; this turns out to be useful for some non-trivial processing loops. The furthest point\n * reached by any {@code ProgressTracker} is the one reported.\n *\n * <p>This class is abstract. Its single extension point is {@link #report}, which should be\n * overridden to provide a function that handles the reporting of the supplied element, as\n * appropriate.\n *\n * @param <T> the type of elements being tracked\n */\npublic abstract class ProgressTrackerGroup<T> {\n  // TODO: Instead of an abstract class, strongly consider adding an\n  // interface like Receiver to the SDK, so that this class can be final and all\n  // that good stuff.\n  private long nextIndexToReport = 0;\n\n  public ProgressTrackerGroup() {}\n\n  public final ProgressTracker<T> start() {\n    return new Tracker(0);\n  }\n\n  /** Reports the indicated element. */\n  protected abstract void report(T element);\n\n  private final class Tracker implements ProgressTracker<T> {\n    private long nextElementIndex;\n\n    private Tracker(long nextElementIndex) {\n      this.nextElementIndex = nextElementIndex;\n    }\n\n    @Override\n    public ProgressTracker<T> copy() {\n      return new Tracker(nextElementIndex);\n    }\n\n<fim_suffix>    @Override\n    public void saw(T element) {\n      long thisElementIndex = nextElementIndex;\n      nextElementIndex++;\n      if (thisElementIndex == nextIndexToReport) {\n        nextIndexToReport = nextElementIndex;\n        report(element);\n      }\n    }\n  }\n}<fim_middle>// function below has no smell\n"}