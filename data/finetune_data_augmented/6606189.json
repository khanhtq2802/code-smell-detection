{"text": "<fim_prefix>/*\n * MIT License\n *\n * Copyright (c) 2016 EPAM Systems\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npackage com.epam.catgenome.entity.track;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport com.epam.catgenome.component.MessageHelper;\n\n/**\n * Source:      Track.java\n * Created:     10/8/15, 5:35 PM\n * Project:     CATGenome Browser\n * Make:        IntelliJ IDEA 14.1.4, JDK 1.8\n * <p>\n * {@code Track} represents a general business entity used to manage data which is required\n * to present on UI a diverse collection of datasets, including reference sequence, variants,\n * genes etc.\n * <p>\n * The certain type of item in a dataset is defined through corresponded generic parameter\n * which should extend base {@code Block} entity.\n */\npublic class Track<T extends Block> extends AbstractTrack {\n    private static final String HASH_DELIMITER = \"_\";\n\n    /**\n     * {@code List} specifies list of blocks that are defined by <tt>window</tt> coordinates\n     * and should be displayed on visible area.\n     */\n    private List<T> blocks;\n\n    public Track() {\n        blocks = new ArrayList<>();\n    }\n\n    public Track(final Track track) {\n        this.setId(track.getId());\n        this.chromosome = track.getChromosome();\n        this.endIndex = track.getEndIndex();\n        this.scaleFactor = track.getScaleFactor();\n        this.startIndex = track.getStartIndex();\n        this.type = track.getType();\n        this.mode = track.getMode();\n    }\n\n    public Track(final TrackType type) {\n        this();\n        this.type = type;\n    }\n\n    public final List<T> getBlocks() {\n        return blocks;\n    }\n\n    public final void setBlocks(final List<T> blocks) {\n        this.blocks = blocks;\n    }\n\n<fim_suffix>    public String myCacheKey() {\n        if (getChromosome() == null || getChromosome().getId() == null ||\n                getStartIndex() == null || getEndIndex() == null || getId() == null) {\n            throw new IllegalArgumentException(MessageHelper.getMessage(\"error.hash\"));\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb = sb.append(getId())\n                .append(HASH_DELIMITER)\n                .append(getChromosome().getId())\n                .append(HASH_DELIMITER)\n                .append(getStartIndex())\n                .append(HASH_DELIMITER)\n                .append(getEndIndex());\n        return sb.toString();\n    }\n\n    public String proteinCacheKey(final Long referenceId) {\n        String myCacheKey = myCacheKey();\n        if (StringUtils.isEmpty(myCacheKey) || referenceId == null) {\n            return null;\n        }\n        return myCacheKey + referenceId.toString();\n    }\n}<fim_middle>// function below has no smell\n"}