{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\npackage org.apache.storm.utils;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Take a version string and parse out a Major.Minor version\n */\n<fim_suffix>public class SimpleVersion implements Comparable<SimpleVersion> {\n    private static final Pattern VERSION_PATTERN = Pattern.compile(\"^(\\\\d+)[\\\\.\\\\-\\\\_]+(\\\\d+).*$\");\n    private final int _major;\n    private final int _minor;\n\n    public SimpleVersion(String version) {\n        Matcher m = VERSION_PATTERN.matcher(version);\n        int maj = -1;\n        int min = -1;\n        if (!m.matches()) {\n            //Unknown should only happen during compilation or some unit tests.\n            if (!\"Unknown\".equals(version)) {\n                throw new IllegalArgumentException(\"Cannot parse '\" + version + \"'\");\n            }\n        } else {\n            maj = Integer.valueOf(m.group(1));\n            min = Integer.valueOf(m.group(2));\n        }\n        _major = maj;\n        _minor = min;\n    }\n\n    public int getMajor() {\n        return _major;\n    }\n\n    public int getMinor() {\n        return _minor;\n    }\n\n    @Override\n    public int hashCode() {\n        return (Integer.hashCode(_major) * 17) & Integer.hashCode(_minor);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (o == this) {\n            return true;\n        }\n\n        if (!(o instanceof SimpleVersion)) {\n            return false;\n        }\n\n        return compareTo((SimpleVersion) o) == 0;\n    }\n\n    @Override\n    public int compareTo(SimpleVersion o) {\n        int ret = Integer.compare(_major, o._major);\n        if (ret == 0) {\n            ret = Integer.compare(_minor, o._minor);\n        }\n        return ret;\n    }\n\n    @Override\n    public String toString() {\n        return _major + \".\" + _minor;\n    }\n}<fim_middle>// class below has no smell\n"}