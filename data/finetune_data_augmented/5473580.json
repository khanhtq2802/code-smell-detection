{"text": "<fim_prefix>import org.apache.qpid.server.protocol.v1_0.type.messaging.Source;\nimport org.apache.qpid.server.protocol.v1_0.type.messaging.Target;\nimport org.apache.qpid.server.protocol.v1_0.type.messaging.TerminusDurability;\nimport org.apache.qpid.server.protocol.v1_0.type.transport.Role;\nimport org.apache.qpid.server.store.StoreException;\nimport org.apache.qpid.server.store.jdbc.JDBCContainer;\nimport org.apache.qpid.server.store.jdbc.JDBCDetails;\nimport org.apache.qpid.server.store.jdbc.JdbcUtils;\nimport org.apache.qpid.server.util.Action;\npublic class JDBCLinkStore extends AbstractLinkStore\n{\n    private static final Logger LOGGER = LoggerFactory.getLogger(JDBCLinkStore.class);\n    private static final String LINKS_TABLE_NAME_SUFFIX = \"AMQP_1_0_LINKS\";\n    private static final String VERSION_TABLE_NAME_SUFFIX = \"AMQP_1_0_LINKS_VERSION\";\n    private final JDBCContainer _jdbcContainer;\n    private final String _tableNamePrefix;\n    private final String _sqlBlobType;\n    private final String _sqlTimestampType;\n    private final boolean _isUseBytesMethodsForBlob;\n    private final Action<Connection> _cleanUpAction;\n    JDBCLinkStore(final JDBCContainer jdbcContainer)\n    {\n        _jdbcContainer = jdbcContainer;\n        _tableNamePrefix = jdbcContainer.getTableNamePrefix();\n        JDBCDetails jdbcDetails = jdbcContainer.getJDBCDetails();\n        _sqlBlobType = jdbcDetails.getBlobType();\n        _sqlTimestampType = jdbcDetails.getTimestampType();\n        _isUseBytesMethodsForBlob = jdbcDetails.isUseBytesMethodsForBlob();\n        _cleanUpAction = this::cleanUp;\n        jdbcContainer.addDeleteAction(_cleanUpAction);\n    }\n    @Override\n    protected Collection<LinkDefinition<Source, Target>> doOpenAndLoad(final LinkStoreUpdater updater) throws StoreException\n    {\n        Collection<LinkDefinition<Source, Target>> linkDefinitions;\n        try\n        {\n            checkTransactionIsolationLevel();\n            createOrOpenStoreDatabase();\n            linkDefinitions = getLinks();\n            ModelVersion storedVersion = getStoredVersion();\n            ModelVersion currentVersion =\n                    new ModelVersion(BrokerModel.MODEL_MAJOR_VERSION, BrokerModel.MODEL_MINOR_VERSION);\n            if (storedVersion.lessThan(currentVersion))\n            {\n                linkDefinitions = performUpdate(updater, linkDefinitions, storedVersion, currentVersion);\n            }\n            else if (currentVersion.lessThan(storedVersion))\n            {\n                throw new StoreException(String.format(\"Cannot downgrade the store from %s to %s\",\n                                                       storedVersion,\n                                                       currentVersion));\n            }\n        }\n        catch (SQLException e)\n        {\n            throw new StoreException(\"Cannot open link store\", e);\n        }\n        return linkDefinitions;\n    }\n    @Override\n    protected void doClose() throws StoreException\n    {\n    }\n    @Override\n    protected void doSaveLink(final LinkDefinition<Source, Target> link) throws StoreException\n    {\n        String linkKey = generateLinkKey(link);\n        Connection connection = getConnection();\n        try\n        {\n            connection.setAutoCommit(false);\n            connection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n            try (PreparedStatement preparedStatement = connection.prepareStatement(\n                    String.format(\n                            \"SELECT remote_container_id, link_name, link_role, source, target FROM %s WHERE link_key = ?\",\n                            getLinksTableName())))\n            {\n                preparedStatement.setString(1, linkKey);\n                try (ResultSet resultSet = preparedStatement.executeQuery())\n                {\n                    if (resultSet.next())\n                    {\n                        update(connection, linkKey, link);\n                    }\n                    else\n                    {\n                        insert(connection, linkKey, link);\n                    }\n                }\n            }\n            connection.commit();\n        }\n        catch (SQLException e)\n        {\n            try\n            {\n                connection.rollback();\n            }\n            catch (SQLException re)\n            {\n                LOGGER.debug(\"Rollback failed on rolling back saving link transaction\", re);\n            }\n            throw new StoreException(String.format(\"Cannot save link %s\", new LinkKey(link)), e);\n        }\n        finally\n        {\n            JdbcUtils.closeConnection(connection, LOGGER);\n        }\n    }\n    @Override\n    protected void doDeleteLink(final LinkDefinition<Source, Target> link) throws StoreException\n    {\n        try (Connection connection = getConnection();\n             PreparedStatement preparedStatement = connection.prepareStatement(\n                     String.format(\"DELETE FROM %s WHERE link_key = ?\", getLinksTableName())))\n        {\n            preparedStatement.setString(1, generateLinkKey(link));\n            preparedStatement.execute();\n        }\n        catch (SQLException e)\n        {\n            throw new StoreException(String.format(\"Cannot delete link %s\", new LinkKey(link)), e);\n        }\n    }\n    @Override\n    protected void doDelete()\n    {\n        _jdbcContainer.removeDeleteAction(_cleanUpAction);\n        try (Connection connection = getConnection())\n        {\n            cleanUp(connection);\n        }\n        catch (IllegalStateException e)\n        {\n            LOGGER.warn(\"Could not delete Link store: {}\", e.getMessage());\n        }\n        catch (SQLException e)\n        {\n            throw new StoreException(\"Error deleting Link store\", e);\n        }\n    }\n    private void cleanUp(final Connection connection)\n    {\n        JdbcUtils.dropTables(connection, LOGGER, Arrays.asList(getLinksTableName(), getVersionTableName()));\n    }\n    @Override\n    public TerminusDurability getHighestSupportedTerminusDurability()\n    {\n        return TerminusDurability.CONFIGURATION;\n    }\n    private void checkTransactionIsolationLevel() throws SQLException\n    {\n        try (Connection connection = getConnection())\n        {\n            DatabaseMetaData metaData = connection.getMetaData();\n            if (!metaData.supportsTransactionIsolationLevel(Connection.TRANSACTION_SERIALIZABLE))\n            {\n                throw new StoreException(String.format(\n                        \"The RDBMS '%s' does not support required transaction isolation level 'serializable'\",\n                        metaData.getDatabaseProductName()));\n            }\n        }\n    }\n    private Connection getConnection()\n    {\n        return _jdbcContainer.getConnection();\n    }\n    private void createOrOpenStoreDatabase() throws SQLException\n    {\n        try (Connection conn = getConnection())\n        {\n            conn.setAutoCommit(true);\n            createLinksTable(conn);\n            createVersionTable(conn);\n        }\n    }\n    private void createVersionTable(final Connection conn) throws SQLException\n    {\n        String versionTableName = getVersionTableName();\n        if (!JdbcUtils.tableExists(versionTableName, conn))\n        {\n            try (Statement stmt = conn.createStatement())\n            {\n                stmt.execute(String.format(\"CREATE TABLE %s\"\n                                           + \" (version varchar(10) PRIMARY KEY ,\"\n                                           + \" version_time %s)\", versionTableName, _sqlTimestampType));\n            }\n            updateVersion(conn, ModelVersion.fromString(BrokerModel.MODEL_VERSION));\n        }\n    }\n    private void createLinksTable(final Connection conn) throws SQLException\n    {\n        if (!JdbcUtils.tableExists(getLinksTableName(), conn))\n        {\n            try (Statement stmt = conn.createStatement())\n            {\n                stmt.execute(String.format(\"CREATE TABLE %1$s\"\n                                           + \" ( link_key varchar(44) PRIMARY KEY ,\"\n                                           + \" remote_container_id %2$s, \"\n                                           + \" link_name %2$s,\"\n                                           + \" link_role INTEGER,\"\n                                           + \" source %2$s,\"\n                                           + \" target %2$s )\", getLinksTableName(), _sqlBlobType));\n            }\n        }\n    }\n    private String getLinksTableName()\n    {\n        return _tableNamePrefix + LINKS_TABLE_NAME_SUFFIX;\n    }\n    private String getVersionTableName()\n    {\n        return _tableNamePrefix + VERSION_TABLE_NAME_SUFFIX;\n    }\n<fim_suffix>    private Collection<LinkDefinition<Source, Target>> performUpdate(final LinkStoreUpdater updater,\n                                                                     Collection<LinkDefinition<Source, Target>> linkDefinitions,\n                                                                     final ModelVersion storedVersion,\n                                                                     final ModelVersion currentVersion)\n            throws SQLException\n    {\n        linkDefinitions = updater.update(storedVersion.toString(), linkDefinitions);\n        Connection connection = getConnection();\n        try\n        {\n            connection.setAutoCommit(false);\n            try (Statement statement = connection.createStatement())\n            {\n                statement.execute(\"DELETE FROM \" + getLinksTableName());\n            }\n            for (LinkDefinition<? extends BaseSource, ? extends BaseTarget> linkDefinition : linkDefinitions)\n            {\n                insert(connection, generateLinkKey(linkDefinition), linkDefinition);\n            }\n            updateVersion(connection, currentVersion);\n            connection.commit();\n        }\n        catch (SQLException e)\n        {\n            try\n            {\n                connection.rollback();\n            }\n            catch (SQLException re)\n            {\n                LOGGER.debug(\"Cannot rollback transaction\", re);\n            }\n            throw e;\n        }\n        finally\n        {\n            JdbcUtils.closeConnection(connection, LOGGER);\n        }\n        return linkDefinitions;\n    }<fim_middle>// function below has no smell\n"}