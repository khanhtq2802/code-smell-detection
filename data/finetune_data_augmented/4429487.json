{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\npackage org.apache.eagle.alert.metadata;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\nimport org.apache.eagle.alert.coordination.model.ScheduleState;\nimport org.apache.eagle.alert.coordination.model.internal.PolicyAssignment;\nimport org.apache.eagle.alert.engine.coordinator.StreamDefinition;\nimport org.apache.eagle.alert.engine.model.AlertPublishEvent;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.typesafe.config.Config;\n\n<fim_suffix>public class MetadataUtils {\n\n    private static final Logger LOG = LoggerFactory.getLogger(MetadataUtils.class);\n    public static final String META_DATA = \"metadata\";\n    public static final String ALERT_META_DATA_DAO = \"metadataDao\";\n    public static final String JDBC_USERNAME_PATH = \"jdbc.username\";\n    public static final String JDBC_PASSWORD_PATH = \"jdbc.password\";\n    public static final String JDBC_DRIVER_PATH = \"jdbc.driverClassName\";\n    public static final String JDBC_DATABASE_PATH = \"jdbc.database\";\n    public static final String JDBC_CONNECTION_PATH = \"jdbc.connection\";\n    public static final String JDBC_CONNECTION_PROPERTIES_PATH = \"jdbc.connectionProperties\";\n    public static final String MONGO_CONNECTION_PATH = \"mongo.connection\";\n    public static final String MONGO_DATABASE = \"mongo.database\";\n\n    public static <T> String getKey(T t) {\n        if (t instanceof StreamDefinition) {\n            return ((StreamDefinition) t).getStreamId();\n        }\n        if (t instanceof PolicyAssignment) {\n            return ((PolicyAssignment) t).getPolicyName();\n        }\n        if (t instanceof ScheduleState) {\n            return ((ScheduleState) t).getVersion();\n        }\n        if (t instanceof AlertPublishEvent) {\n            return ((AlertPublishEvent) t).getAlertId();\n        }\n\n        try {\n            Method m = t.getClass().getMethod(\"getName\");\n            return (String) m.invoke(t);\n        } catch (NoSuchMethodException | SecurityException | InvocationTargetException | IllegalAccessException\n            | IllegalArgumentException e) {\n            LOG.error(\" getName not found on given class :\" + t.getClass().getName());\n        }\n        throw new RuntimeException(String.format(\"no getName() found on target class %s for matching\", t.getClass()\n            .getName()));\n    }\n\n    public static Connection getJdbcConnection(Config config) {\n\n        Connection connection = null;\n        try {\n            if (config.hasPath(JDBC_USERNAME_PATH)) {\n                connection = DriverManager.getConnection(\n                        config.getString(JDBC_CONNECTION_PATH),\n                        config.getString(JDBC_USERNAME_PATH),\n                        config.getString(JDBC_PASSWORD_PATH));\n            } else {\n                connection = DriverManager.getConnection(config.getString(JDBC_CONNECTION_PATH));\n            }\n        } catch (SQLException e) {\n            LOG.error(e.getMessage(), e);\n        }\n        return connection;\n    }\n}<fim_middle>// class below has no smell\n"}