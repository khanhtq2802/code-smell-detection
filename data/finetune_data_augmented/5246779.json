{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.olingo.samples.client.core.http;\n\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.net.ConnectException;\nimport java.net.URI;\nimport java.net.UnknownHostException;\nimport javax.net.ssl.SSLException;\nimport org.apache.http.HttpEntityEnclosingRequest;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.client.HttpRequestRetryHandler;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.protocol.ExecutionContext;\nimport org.apache.http.protocol.HttpContext;\nimport org.apache.olingo.commons.api.http.HttpMethod;\nimport org.apache.olingo.client.core.http.DefaultHttpClientFactory;\n\n/**\n * Shows how to install a custom exception recovery mechanism.\n * <a\n * href=\"http://svn.apache.org/repos/asf/httpcomponents/site/httpcomponents-client-4.2.x/tutorial/html/fundamentals.html#d5e281\">More\n * information</a>.\n */\n<fim_suffix>public class RequestRetryHttpClientFactory extends DefaultHttpClientFactory {\n\n  @Override\n  public DefaultHttpClient create(final HttpMethod method, final URI uri) {\n    final HttpRequestRetryHandler myRetryHandler = new HttpRequestRetryHandler() {\n\n      @Override\n      public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context) {\n        if (executionCount >= 5) {\n          // Do not retry if over max retry count\n          return false;\n        }\n        if (exception instanceof InterruptedIOException) {\n          // Timeout\n          return false;\n        }\n        if (exception instanceof UnknownHostException) {\n          // Unknown host\n          return false;\n        }\n        if (exception instanceof ConnectException) {\n          // Connection refused\n          return false;\n        }\n        if (exception instanceof SSLException) {\n          // SSL handshake exception\n          return false;\n        }\n        final HttpRequest request = (HttpRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST);\n        boolean idempotent = !(request instanceof HttpEntityEnclosingRequest);\n        if (idempotent) {\n          // Retry if the request is considered idempotent \n          return true;\n        }\n        return false;\n      }\n\n    };\n\n    final DefaultHttpClient httpClient = super.create(method, uri);\n    httpClient.setHttpRequestRetryHandler(myRetryHandler);\n    return httpClient;\n  }\n\n}<fim_middle>// class below has no smell\n"}