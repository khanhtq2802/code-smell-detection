{"text": "<fim_prefix>          unsetSre();\n        } else {\n          setSre((org.apache.airavata.sharing.registry.models.SharingRegistryException)value);\n        }\n        break;\n      }\n    }\n    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case SUCCESS:\n        return getSuccess();\n      case SRE:\n        return getSre();\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      case SUCCESS:\n        return isSetSuccess();\n      case SRE:\n        return isSetSre();\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof getEntity_result)\n        return this.equals((getEntity_result)that);\n      return false;\n    }\n    public boolean equals(getEntity_result that) {\n      if (that == null)\n        return false;\n      boolean this_present_success = true && this.isSetSuccess();\n      boolean that_present_success = true && that.isSetSuccess();\n      if (this_present_success || that_present_success) {\n        if (!(this_present_success && that_present_success))\n          return false;\n        if (!this.success.equals(that.success))\n          return false;\n      }\n      boolean this_present_sre = true && this.isSetSre();\n      boolean that_present_sre = true && that.isSetSre();\n      if (this_present_sre || that_present_sre) {\n        if (!(this_present_sre && that_present_sre))\n          return false;\n        if (!this.sre.equals(that.sre))\n          return false;\n      }\n      return true;\n    }\n    @Override\n    public int hashCode() {\n      List<Object> list = new ArrayList<Object>();\n      boolean present_success = true && (isSetSuccess());\n      list.add(present_success);\n      if (present_success)\n        list.add(success);\n      boolean present_sre = true && (isSetSre());\n      list.add(present_sre);\n      if (present_sre)\n        list.add(sre);\n      return list.hashCode();\n    }\n    @Override\n    public int compareTo(getEntity_result other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetSuccess()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetSre()).compareTo(other.isSetSre());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetSre()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sre, other.sre);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n      }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"getEntity_result(\");\n      boolean first = true;\n      sb.append(\"success:\");\n      if (this.success == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.success);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"sre:\");\n      if (this.sre == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.sre);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n      if (success != null) {\n        success.validate();\n      }\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class getEntity_resultStandardSchemeFactory implements SchemeFactory {\n      public getEntity_resultStandardScheme getScheme() {\n        return new getEntity_resultStandardScheme();\n      }\n    }\n    private static class getEntity_resultStandardScheme extends StandardScheme<getEntity_result> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntity_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 0: // SUCCESS\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.success = new org.apache.airavata.sharing.registry.models.Entity();\n                struct.success.read(iprot);\n                struct.setSuccessIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 1: // SRE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.sre = new org.apache.airavata.sharing.registry.models.SharingRegistryException();\n                struct.sre.read(iprot);\n                struct.setSreIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntity_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.success != null) {\n          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);\n          struct.success.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.sre != null) {\n          oprot.writeFieldBegin(SRE_FIELD_DESC);\n          struct.sre.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class getEntity_resultTupleSchemeFactory implements SchemeFactory {\n      public getEntity_resultTupleScheme getScheme() {\n        return new getEntity_resultTupleScheme();\n      }\n    }\n    private static class getEntity_resultTupleScheme extends TupleScheme<getEntity_result> {\n<fim_suffix>      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, getEntity_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetSuccess()) {\n          optionals.set(0);\n        }\n        if (struct.isSetSre()) {\n          optionals.set(1);\n        }\n        oprot.writeBitSet(optionals, 2);\n        if (struct.isSetSuccess()) {\n          struct.success.write(oprot);\n        }\n        if (struct.isSetSre()) {\n          struct.sre.write(oprot);\n        }\n      }<fim_middle>// function below has no smell\n"}