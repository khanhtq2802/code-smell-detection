{"text": "<fim_prefix>    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      O1((short)1, \"o1\"),\n      O2((short)2, \"o2\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // O1\n            return O1;\n          case 2: // O2\n            return O2;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData(\"o1\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));\n      tmpMap.put(_Fields.O2, new org.apache.thrift.meta_data.FieldMetaData(\"o2\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alter_table_result.class, metaDataMap);\n    }\n    public alter_table_result() {\n    }\n    public alter_table_result(\n      InvalidOperationException o1,\n      MetaException o2)\n    {\n      this();\n      this.o1 = o1;\n      this.o2 = o2;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public alter_table_result(alter_table_result other) {\n      if (other.isSetO1()) {\n        this.o1 = new InvalidOperationException(other.o1);\n      }\n      if (other.isSetO2()) {\n        this.o2 = new MetaException(other.o2);\n      }\n    }\n    public alter_table_result deepCopy() {\n      return new alter_table_result(this);\n    }\n    @Override\n    public void clear() {\n      this.o1 = null;\n      this.o2 = null;\n    }\n    public InvalidOperationException getO1() {\n      return this.o1;\n    }\n    public void setO1(InvalidOperationException o1) {\n      this.o1 = o1;\n    }\n    public void unsetO1() {\n      this.o1 = null;\n    }\n    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */\n    public boolean isSetO1() {\n      return this.o1 != null;\n    }\n    public void setO1IsSet(boolean value) {\n      if (!value) {\n        this.o1 = null;\n      }\n    }\n    public MetaException getO2() {\n      return this.o2;\n    }\n    public void setO2(MetaException o2) {\n      this.o2 = o2;\n    }\n    public void unsetO2() {\n      this.o2 = null;\n    }\n    /** Returns true if field o2 is set (has been assigned a value) and false otherwise */\n    public boolean isSetO2() {\n      return this.o2 != null;\n    }\n    public void setO2IsSet(boolean value) {\n      if (!value) {\n        this.o2 = null;\n      }\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      case O1:\n        if (value == null) {\n          unsetO1();\n        } else {\n          setO1((InvalidOperationException)value);\n        }\n        break;\n      case O2:\n        if (value == null) {\n          unsetO2();\n        } else {\n          setO2((MetaException)value);\n        }\n        break;\n      }\n    }\n    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case O1:\n        return getO1();\n      case O2:\n        return getO2();\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      case O1:\n        return isSetO1();\n      case O2:\n        return isSetO2();\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof alter_table_result)\n        return this.equals((alter_table_result)that);\n      return false;\n    }\n    public boolean equals(alter_table_result that) {\n      if (that == null)\n        return false;\n      boolean this_present_o1 = true && this.isSetO1();\n      boolean that_present_o1 = true && that.isSetO1();\n      if (this_present_o1 || that_present_o1) {\n        if (!(this_present_o1 && that_present_o1))\n          return false;\n        if (!this.o1.equals(that.o1))\n          return false;\n      }\n      boolean this_present_o2 = true && this.isSetO2();\n      boolean that_present_o2 = true && that.isSetO2();\n      if (this_present_o2 || that_present_o2) {\n        if (!(this_present_o2 && that_present_o2))\n          return false;\n        if (!this.o2.equals(that.o2))\n          return false;\n      }\n      return true;\n    }\n    @Override\n    public int hashCode() {\n      List<Object> list = new ArrayList<Object>();\n      boolean present_o1 = true && (isSetO1());\n      list.add(present_o1);\n      if (present_o1)\n        list.add(o1);\n      boolean present_o2 = true && (isSetO2());\n      list.add(present_o2);\n      if (present_o2)\n        list.add(o2);\n      return list.hashCode();\n    }\n    @Override\n    public int compareTo(alter_table_result other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      lastComparison = Boolean.valueOf(isSetO1()).compareTo(other.isSetO1());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetO1()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, other.o1);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetO2()).compareTo(other.isSetO2());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetO2()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o2, other.o2);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n<fim_suffix>    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }<fim_middle>// function below has no smell\n"}