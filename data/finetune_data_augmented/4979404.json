{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jclouds.profitbricks.domain;\n\nimport static org.jclouds.profitbricks.util.Preconditions.checkInvalidChars;\n\nimport java.util.List;\n\nimport org.jclouds.javax.annotation.Nullable;\n\nimport com.google.auto.value.AutoValue;\nimport com.google.common.collect.ImmutableList;\n\n@AutoValue\npublic abstract class DataCenter {\n\n   public abstract String id();\n\n   @Nullable\n   public abstract String name();\n\n   public abstract int version();\n\n   @Nullable\n   public abstract ProvisioningState state();\n\n   @Nullable\n   public abstract Location location();\n\n   @Nullable\n   public abstract List<Server> servers();\n\n   @Nullable\n   public abstract List<Storage> storages();\n\n   public static Builder builder() {\n      return new AutoValue_DataCenter.Builder()\n              .servers(ImmutableList.<Server>of())\n              .storages(ImmutableList.<Storage>of());\n   }\n\n   public abstract Builder toBuilder();\n\n   @AutoValue.Builder\n   public abstract static class Builder {\n\n      public abstract Builder id(String id);\n\n      public abstract Builder name(String name);\n\n      public abstract Builder version(int version);\n\n      public abstract Builder state(ProvisioningState state);\n\n      public abstract Builder location(Location location);\n\n      public abstract Builder servers(List<Server> servers);\n\n      public abstract Builder storages(List<Storage> storages);\n\n      abstract DataCenter autoBuild();\n      \n      public DataCenter build(){\n         DataCenter built = autoBuild();\n         return built.toBuilder()\n                 .servers(ImmutableList.copyOf(built.servers()))\n                 .storages(ImmutableList.copyOf(built.storages()))\n                 .autoBuild();\n      }\n\n   }\n\n   public static final class Request {\n\n      public static CreatePayload creatingPayload(String name, Location location) {\n         CreatePayload payload = new AutoValue_DataCenter_Request_CreatePayload(name, location);\n         checkInvalidChars(payload.name());\n\n         return payload;\n      }\n\n      public static UpdatePayload updatingPayload(String id, String name) {\n         UpdatePayload payload = new AutoValue_DataCenter_Request_UpdatePayload(id, name);\n         checkInvalidChars(payload.name());\n\n         return payload;\n      }\n\n<fim_suffix>      @AutoValue\n      public abstract static class CreatePayload {\n\n         public abstract String name();\n\n         public abstract Location location();\n\n      }\n\n      @AutoValue\n      public abstract static class UpdatePayload {\n\n         public abstract String id();\n\n         public abstract String name();\n\n      }\n   }\n}<fim_middle>// class below is data class\n"}