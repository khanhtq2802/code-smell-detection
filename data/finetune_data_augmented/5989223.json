{"text": "<fim_prefix>/*\n * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\npackage software.amazon.awssdk.services.s3;\n\nimport org.junit.BeforeClass;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.s3.model.BucketLocationConstraint;\nimport software.amazon.awssdk.services.s3.model.CreateBucketConfiguration;\nimport software.amazon.awssdk.services.s3.model.CreateBucketRequest;\nimport software.amazon.awssdk.services.s3.model.S3Exception;\nimport software.amazon.awssdk.testutils.service.AwsTestBase;\nimport software.amazon.awssdk.services.s3.utils.S3TestUtils;\n\n/**\n * Base class for S3 integration tests. Loads AWS credentials from a properties\n * file and creates an S3 client for callers to use.\n */\npublic class S3IntegrationTestBase extends AwsTestBase {\n\n    protected static final Region DEFAULT_REGION = Region.US_WEST_2;\n    /**\n     * The S3 client for all tests to use.\n     */\n    protected static S3Client s3;\n\n    protected static S3AsyncClient s3Async;\n\n    /**\n     * Loads the AWS account info for the integration tests and creates an S3\n     * client for tests to use.\n     */\n<fim_suffix>    @BeforeClass\n    public static void setUp() throws Exception {\n        s3 = s3ClientBuilder().build();\n        s3Async = s3AsyncClientBuilder().build();\n    }\n\n    protected static S3ClientBuilder s3ClientBuilder() {\n        return S3Client.builder()\n                       .region(DEFAULT_REGION)\n                       .credentialsProvider(CREDENTIALS_PROVIDER_CHAIN);\n    }\n\n    protected static S3AsyncClientBuilder s3AsyncClientBuilder() {\n        return S3AsyncClient.builder()\n                            .region(DEFAULT_REGION)\n                            .credentialsProvider(CREDENTIALS_PROVIDER_CHAIN);\n    }\n\n    protected static void createBucket(String bucketName) {\n        createBucket(bucketName, 0);\n    }\n\n    private static void createBucket(String bucketName, int retryCount) {\n        try {\n            s3.createBucket(\n                    CreateBucketRequest.builder()\n                                       .bucket(bucketName)\n                                       .createBucketConfiguration(\n                                               CreateBucketConfiguration.builder()\n                                                                        .locationConstraint(BucketLocationConstraint.US_WEST_2)\n                                                                        .build())\n                                       .build());\n        } catch (S3Exception e) {\n            System.err.println(\"Error attempting to create bucket: \" + bucketName);\n            if (e.awsErrorDetails().errorCode().equals(\"BucketAlreadyOwnedByYou\")) {\n                System.err.printf(\"%s bucket already exists, likely leaked by a previous run\\n\", bucketName);\n            } else if (e.awsErrorDetails().errorCode().equals(\"TooManyBuckets\")) {\n                System.err.println(\"Printing all buckets for debug:\");\n                s3.listBuckets().buckets().forEach(System.err::println);\n                if (retryCount < 2) {\n                    System.err.println(\"Retrying...\");\n                    createBucket(bucketName, retryCount + 1);\n                } else {\n                    throw e;\n                }\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    protected static void deleteBucketAndAllContents(String bucketName) {\n        S3TestUtils.deleteBucketAndAllContents(s3, bucketName);\n    }\n}<fim_middle>// function below has no smell\n"}