{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.knox.gateway.filter.rewrite.impl;\n\nimport org.apache.knox.gateway.filter.rewrite.api.UrlRewriteEnvironment;\nimport org.apache.knox.gateway.filter.rewrite.api.UrlRewriter;\nimport org.apache.knox.gateway.filter.rewrite.i18n.UrlRewriteMessages;\nimport org.apache.knox.gateway.filter.rewrite.spi.UrlRewriteContext;\nimport org.apache.knox.gateway.filter.rewrite.spi.UrlRewriteFunctionProcessor;\nimport org.apache.knox.gateway.i18n.messages.MessagesFactory;\nimport org.apache.knox.gateway.util.urltemplate.Evaluator;\nimport org.apache.knox.gateway.util.urltemplate.Params;\nimport org.apache.knox.gateway.util.urltemplate.Resolver;\nimport org.apache.knox.gateway.util.urltemplate.Template;\n\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class UrlRewriteContextImpl implements UrlRewriteContext {\n\n  private static final UrlRewriteMessages LOG = MessagesFactory.get( UrlRewriteMessages.class );\n\n  private UrlRewriteEnvironment environment;\n  private Resolver resolver;\n  private Evaluator evaluator;\n  private Map<String,UrlRewriteFunctionProcessor> functions;\n  private ContextParameters params;\n  private UrlRewriter.Direction direction;\n  private Template originalUrl;\n  private Template currentUrl;\n\n<fim_suffix>  public UrlRewriteContextImpl(\n      UrlRewriteEnvironment environment,\n      Resolver resolver,\n      Map<String,UrlRewriteFunctionProcessor> functions,\n      UrlRewriter.Direction direction,\n      Template url ) {\n    this.environment = environment;\n    this.resolver = resolver;\n    this.functions = functions;\n    this.params = new ContextParameters();\n    this.evaluator = new ContextEvaluator();\n    this.direction = direction;\n    this.originalUrl = url;\n    this.currentUrl = url;\n  }\n\n  @Override\n  public UrlRewriter.Direction getDirection() {\n    return direction;\n  }\n\n  @Override\n  public Template getOriginalUrl() {\n    return originalUrl;\n  }\n\n  @Override\n  public Template getCurrentUrl() {\n    return currentUrl;\n  }\n\n  @Override\n  public void setCurrentUrl( Template url ) {\n    currentUrl = url;\n  }\n\n  @Override\n  public void addParameters( Params parameters ) {\n    params.add( parameters );\n  }\n\n  @Override\n  public Params getParameters() {\n    return params;\n  }\n\n  @Override\n  public Evaluator getEvaluator() {\n    return evaluator;\n  }\n\n  private class ContextParameters implements Params {\n    Map<String,List<String>> map = new LinkedHashMap<>();\n\n    @Override\n    public Set<String> getNames() {\n      return map.keySet();\n    }\n\n    @Override\n    public List<String> resolve( String name ) {\n      List<String> values = map.get( name ); // Try to find the name in the context map.\n      if( values == null ) {\n        try {\n          values = resolver.resolve( name );\n          if( values == null ) {\n            values = environment.resolve( name ); // Try to find the name in the environment.\n          }\n        } catch( Exception e ) {\n          LOG.failedToFindValuesByParameter( name, e );\n          // Ignore it and return null.\n        }\n      }\n      return values;\n    }\n\n    public void add( Params params ) {\n      for( String name : params.getNames() ) {\n        map.put( name, params.resolve( name ) );\n      }\n    }\n\n  }\n\n  private class ContextEvaluator implements Evaluator {\n\n    @Override\n    public List<String> evaluate( String function, List<String> parameters ) {\n      List<String> results = null;\n      UrlRewriteFunctionProcessor processor = functions.get( function );\n      if( processor != null ) {\n        try {\n          results = processor.resolve( UrlRewriteContextImpl.this, parameters );\n        } catch( Exception e ) {\n          LOG.failedToInvokeRewriteFunction( function, e );\n          results = null;\n        }\n      }\n      return results;\n    }\n  }\n\n}<fim_middle>// function below has no smell\n"}