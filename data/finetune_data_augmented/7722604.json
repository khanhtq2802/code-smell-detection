{"text": "<fim_prefix>package ru.yandex.clickhouse.response;\n\nimport ru.yandex.clickhouse.ClickHouseStatement;\nimport ru.yandex.clickhouse.settings.ClickHouseProperties;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.*;\nimport java.util.*;\n\n\n<fim_suffix>public class ClickHouseScrollableResultSet extends ClickHouseResultSet {\n    \n    private List<ByteFragment[]> lines;\n\n    public ClickHouseScrollableResultSet(InputStream is, int bufferSize, String db, String table, boolean usesWithTotals, ClickHouseStatement statement, TimeZone timezone, ClickHouseProperties properties) throws IOException {\n        super(is, bufferSize, db, table, usesWithTotals, statement, timezone, properties);\n        lines = new ArrayList<ByteFragment[]>();\n    }\n\n    public boolean hasNext() throws SQLException {\n    \tif(rowNumber < lines.size()) {\n    \t\treturn true;\n    \t}\n        return super.hasNext();\n    }\n\n    @Override\n    public boolean next() throws SQLException {\n    \tif(rowNumber < lines.size()) {\n    \t\tvalues = lines.get(rowNumber);\n    \t\tnextLine = null;\n            rowNumber += 1;\n    \t\treturn true;\n    \t}\n        if (hasNext()) {\n            super.next();\n            lines.add(values);\n            return true;\n        } else {\n        \trowNumber += 1;\n        \tvalues = null;\n        \tnextLine = null;\n        \treturn false;\n        }\n    }\n\n    //////\n\n    @Override\n    public int getType() throws SQLException {\n        return TYPE_SCROLL_INSENSITIVE;\n    }\n\n    @Override\n    public int getRow() throws SQLException {\n        return rowNumber;\n    }\n\n\t@Override\n\tpublic boolean isBeforeFirst() throws SQLException {\n\t\treturn getRow() == 0;\n\t}\n\n\t@Override\n\tpublic boolean isAfterLast() throws SQLException {\n\t\treturn getRow() > lines.size();\n\t}\n\n\t@Override\n\tpublic boolean isFirst() throws SQLException {\n\t\treturn getRow() == 1;\n\t}\n\n\t@Override\n\tpublic void beforeFirst() throws SQLException {\n\t\tabsolute(0);\n\t}\n\n\t@Override\n\tpublic void afterLast() throws SQLException {\n\t\tabsolute(-1);\n\t\tnext();\n\t}\n\n\t@Override\n\tpublic boolean first() throws SQLException {\n\t\treturn absolute(1);\n\t}\n\n\n\t@Override\n\tpublic boolean last() throws SQLException {\n\t\treturn absolute(-1);\n\t}\n\n\t@Override\n\tpublic boolean absolute(int row) throws SQLException {\n\t\tif(row == 0) {\n\t\t\trowNumber = 0;\n\t\t\tvalues = null;\n\t\t\treturn false;\n\t\t} else if(row > 0) {\n\t\t\tif(row <= lines.size()) {\n\t\t\t\trowNumber = row;\n\t\t\t\tvalues = lines.get(row-1);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tabsolute(lines.size());\n\t\t\twhile(getRow() < row && hasNext()) {\n\t\t\t\tnext();\n\t\t\t}\n\t\t\tif(row == getRow()) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tnext();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t// We have to check the number of total rows\n\t\t\twhile(hasNext()) {\n\t\t\t\tnext();\n\t\t\t}\n\t\t\tif(-row > lines.size()) {\n\t\t\t\t// there is not so many rows\n\t\t\t\t// Put the cursor before the first row\n\t\t\t\treturn absolute(0);\n\t\t\t}\n\t\t\treturn absolute(lines.size()+1+row);\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean relative(int rows) throws SQLException {\n\t\tint r = getRow()+rows;\n\t\tif(r < 0) {\n\t\t\tr = 0;\n\t\t}\n\t\treturn absolute(r);\n\t}\n\n\t@Override\n\tpublic boolean previous() throws SQLException {\n\t\treturn relative(-1);\n\t}\n}<fim_middle>// class below is blob\n"}