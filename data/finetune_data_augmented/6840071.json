{"text": "<fim_prefix>\t *     LogicalANDExpression.BinaryLogicalExpression_1_0_0_0<AssignmentExpression.Yield> returns JSXElement\n\t *     LogicalANDExpression.BinaryLogicalExpression_1_0_0_0<AssignmentExpression.In,AssignmentExpression.Yield> returns JSXElement\n\t *     LogicalANDExpression.BinaryLogicalExpression_1_0_0_0<Expression.In> returns JSXElement\n\t *     LogicalANDExpression.BinaryLogicalExpression_1_0_0_0<Expression.Yield> returns JSXElement\n\t *     LogicalANDExpression.BinaryLogicalExpression_1_0_0_0<Expression.In,Expression.Yield> returns JSXElement\n\t *     LogicalANDExpression.BinaryLogicalExpression_1_0_0_0 returns JSXElement\n\t *     LogicalORExpression<In,Yield> returns JSXElement\n\t *     LogicalORExpression<In> returns JSXElement\n\t *     LogicalORExpression<Yield> returns JSXElement\n\t *     LogicalORExpression returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0<In,Yield> returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0<In> returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0<Yield> returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0<ConditionalExpression.In> returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0<ConditionalExpression.Yield> returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0<ConditionalExpression.In,ConditionalExpression.Yield> returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0<AssignmentExpression.In> returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0<AssignmentExpression.Yield> returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0<AssignmentExpression.In,AssignmentExpression.Yield> returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0<Expression.In> returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0<Expression.Yield> returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0<Expression.In,Expression.Yield> returns JSXElement\n\t *     LogicalORExpression.BinaryLogicalExpression_1_0_0_0 returns JSXElement\n\t *     ConditionalExpression<In,Yield> returns JSXElement\n\t *     ConditionalExpression<In> returns JSXElement\n\t *     ConditionalExpression<Yield> returns JSXElement\n\t *     ConditionalExpression returns JSXElement\n\t *     ConditionalExpression.ConditionalExpression_1_0_0_0<In,Yield> returns JSXElement\n\t *     ConditionalExpression.ConditionalExpression_1_0_0_0<In> returns JSXElement\n\t *     ConditionalExpression.ConditionalExpression_1_0_0_0<Yield> returns JSXElement\n\t *     ConditionalExpression.ConditionalExpression_1_0_0_0<AssignmentExpression.In> returns JSXElement\n\t *     ConditionalExpression.ConditionalExpression_1_0_0_0<AssignmentExpression.Yield> returns JSXElement\n\t *     ConditionalExpression.ConditionalExpression_1_0_0_0<AssignmentExpression.In,AssignmentExpression.Yield> returns JSXElement\n\t *     ConditionalExpression.ConditionalExpression_1_0_0_0<Expression.In> returns JSXElement\n\t *     ConditionalExpression.ConditionalExpression_1_0_0_0<Expression.Yield> returns JSXElement\n\t *     ConditionalExpression.ConditionalExpression_1_0_0_0<Expression.In,Expression.Yield> returns JSXElement\n\t *     ConditionalExpression.ConditionalExpression_1_0_0_0 returns JSXElement\n\t *     AssignmentExpression<In,Yield> returns JSXElement\n\t *     AssignmentExpression<In> returns JSXElement\n\t *     AssignmentExpression<Yield> returns JSXElement\n\t *     AssignmentExpression returns JSXElement\n\t *     AssignmentExpression.AssignmentExpression_4_1_0_0_0<In,Yield> returns JSXElement\n\t *     AssignmentExpression.AssignmentExpression_4_1_0_0_0<In> returns JSXElement\n\t *     AssignmentExpression.AssignmentExpression_4_1_0_0_0<Yield> returns JSXElement\n\t *     AssignmentExpression.AssignmentExpression_4_1_0_0_0<Expression.In> returns JSXElement\n\t *     AssignmentExpression.AssignmentExpression_4_1_0_0_0<Expression.Yield> returns JSXElement\n\t *     AssignmentExpression.AssignmentExpression_4_1_0_0_0<Expression.In,Expression.Yield> returns JSXElement\n\t *     AssignmentExpression.AssignmentExpression_4_1_0_0_0 returns JSXElement\n\t *     Expression<In,Yield> returns JSXElement\n\t *     Expression<In> returns JSXElement\n\t *     Expression<Yield> returns JSXElement\n\t *     Expression returns JSXElement\n\t *     Expression.CommaExpression_1_0<In,Yield> returns JSXElement\n\t *     Expression.CommaExpression_1_0<In> returns JSXElement\n\t *     Expression.CommaExpression_1_0<Yield> returns JSXElement\n\t *     Expression.CommaExpression_1_0 returns JSXElement\n\t *     JSXElement returns JSXElement\n\t *     JSXChild returns JSXElement\n\t *\n\t * Constraint:\n\t *     (jsxElementName=JSXElementName jsxAttributes+=JSXAttribute* (jsxChildren+=JSXChild* jsxClosingName=JSXElementName)?)\n\t */\n\tprotected void sequence_JSXAttributes_JSXClosingElement_JSXElement(ISerializationContext context, JSXElement semanticObject) {\n\t\tgenericSequencer.createSequence(context, semanticObject);\n\t}\n\t/**\n\t * Contexts:\n\t *     JSXElementName returns JSXElementName\n\t *\n\t * Constraint:\n\t *     expression=JSXElementNameExpression\n\t */\n\tprotected void sequence_JSXElementName(ISerializationContext context, JSXElementName semanticObject) {\n\t\tif (errorAcceptor != null) {\n\t\t\tif (transientValues.isValueTransient(semanticObject, N4JSPackage.Literals.JSX_ELEMENT_NAME__EXPRESSION) == ValueTransient.YES)\n\t\t\t\terrorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, N4JSPackage.Literals.JSX_ELEMENT_NAME__EXPRESSION));\n\t\t}\n\t\tSequenceFeeder feeder = createSequencerFeeder(context, semanticObject);\n\t\tfeeder.accept(grammarAccess.getJSXElementNameAccess().getExpressionJSXElementNameExpressionParserRuleCall_0(), semanticObject.getExpression());\n\t\tfeeder.finish();\n\t}\n\t/**\n\t * Contexts:\n\t *     JSXChild returns JSXExpression\n\t *     JSXExpression returns JSXExpression\n\t *\n\t * Constraint:\n\t *     expression=AssignmentExpression\n\t */\n\tprotected void sequence_JSXExpression(ISerializationContext context, JSXExpression semanticObject) {\n\t\tif (errorAcceptor != null) {\n\t\t\tif (transientValues.isValueTransient(semanticObject, N4JSPackage.Literals.JSX_EXPRESSION__EXPRESSION) == ValueTransient.YES)\n\t\t\t\terrorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, N4JSPackage.Literals.JSX_EXPRESSION__EXPRESSION));\n\t\t}\n\t\tSequenceFeeder feeder = createSequencerFeeder(context, semanticObject);\n\t\tfeeder.accept(grammarAccess.getJSXExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0(), semanticObject.getExpression());\n\t\tfeeder.finish();\n\t}\n\t/**\n\t * Contexts:\n\t *     JSXAttribute returns JSXPropertyAttribute\n\t *     JSXPropertyAttribute returns JSXPropertyAttribute\n\t *\n\t * Constraint:\n\t *     (property=[IdentifiableElement|IdentifierName] (jsxAttributeValue=StringLiteral | jsxAttributeValue=AssignmentExpression)?)\n\t */\n\tprotected void sequence_JSXPropertyAttribute(ISerializationContext context, JSXPropertyAttribute semanticObject) {\n\t\tgenericSequencer.createSequence(context, semanticObject);\n\t}\n\t/**\n\t * Contexts:\n\t *     JSXAttribute returns JSXSpreadAttribute\n\t *     JSXSpreadAttribute returns JSXSpreadAttribute\n\t *\n\t * Constraint:\n\t *     expression=AssignmentExpression\n\t */\n<fim_suffix>\tprotected void sequence_JSXSpreadAttribute(ISerializationContext context, JSXSpreadAttribute semanticObject) {\n\t\tif (errorAcceptor != null) {\n\t\t\tif (transientValues.isValueTransient(semanticObject, N4JSPackage.Literals.JSX_SPREAD_ATTRIBUTE__EXPRESSION) == ValueTransient.YES)\n\t\t\t\terrorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, N4JSPackage.Literals.JSX_SPREAD_ATTRIBUTE__EXPRESSION));\n\t\t}\n\t\tSequenceFeeder feeder = createSequencerFeeder(context, semanticObject);\n\t\tfeeder.accept(grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignmentExpressionParserRuleCall_2_0(), semanticObject.getExpression());\n\t\tfeeder.finish();\n\t}<fim_middle>// function below has no smell\n"}