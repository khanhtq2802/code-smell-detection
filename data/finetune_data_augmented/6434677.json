{"text": "<fim_prefix>/*\n * Copyright (c) 2019 the Eclipse Milo Authors\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\npackage org.eclipse.milo.opcua.sdk.server.model.methods;\n\nimport org.eclipse.milo.opcua.sdk.core.ValueRanks;\nimport org.eclipse.milo.opcua.sdk.server.api.methods.AbstractMethodInvocationHandler;\nimport org.eclipse.milo.opcua.sdk.server.api.methods.Out;\nimport org.eclipse.milo.opcua.sdk.server.nodes.UaMethodNode;\nimport org.eclipse.milo.opcua.stack.core.UaException;\nimport org.eclipse.milo.opcua.stack.core.types.builtin.ByteString;\nimport org.eclipse.milo.opcua.stack.core.types.builtin.LocalizedText;\nimport org.eclipse.milo.opcua.stack.core.types.builtin.NodeId;\nimport org.eclipse.milo.opcua.stack.core.types.builtin.Variant;\nimport org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.UInteger;\nimport org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.Unsigned;\nimport org.eclipse.milo.opcua.stack.core.types.structured.Argument;\n\n<fim_suffix>public abstract class GetRejectedListMethod extends AbstractMethodInvocationHandler {\n    public static final Argument CERTIFICATES = new Argument(\n        \"Certificates\",\n        NodeId.parse(\"ns=0;i=15\"),\n        ValueRanks.OneDimension,\n        new UInteger[]{Unsigned.uint(0)},\n        new LocalizedText(\"\", \"\")\n    );\n\n    public GetRejectedListMethod(UaMethodNode node) {\n        super(node);\n    }\n\n    @Override\n    public Argument[] getInputArguments() {\n        return new Argument[]{};\n    }\n\n    @Override\n    public Argument[] getOutputArguments() {\n        return new Argument[]{CERTIFICATES};\n    }\n\n    @Override\n    protected Variant[] invoke(InvocationContext context,\n                               Variant[] inputValues) throws UaException {\n        Out<ByteString[]> certificates = new Out<ByteString[]>();\n        invoke(context, certificates);\n        return new Variant[]{new Variant(certificates.get())};\n    }\n\n    protected abstract void invoke(InvocationContext context,\n                                   Out<ByteString[]> certificates) throws UaException;\n}<fim_middle>// class below has no smell\n"}