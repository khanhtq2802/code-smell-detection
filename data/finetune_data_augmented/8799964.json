{"text": "<fim_prefix>      tmpMap.put(_Fields.PERMISSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData(\"permissionType\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.sharing.registry.models.PermissionType.class)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPermissionType_args.class, metaDataMap);\n    }\n    public createPermissionType_args() {\n    }\n    public createPermissionType_args(\n      org.apache.airavata.sharing.registry.models.PermissionType permissionType)\n    {\n      this();\n      this.permissionType = permissionType;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public createPermissionType_args(createPermissionType_args other) {\n      if (other.isSetPermissionType()) {\n        this.permissionType = new org.apache.airavata.sharing.registry.models.PermissionType(other.permissionType);\n      }\n    }\n    public createPermissionType_args deepCopy() {\n      return new createPermissionType_args(this);\n    }\n    @Override\n    public void clear() {\n      this.permissionType = null;\n    }\n    public org.apache.airavata.sharing.registry.models.PermissionType getPermissionType() {\n      return this.permissionType;\n    }\n    public createPermissionType_args setPermissionType(org.apache.airavata.sharing.registry.models.PermissionType permissionType) {\n      this.permissionType = permissionType;\n      return this;\n    }\n    public void unsetPermissionType() {\n      this.permissionType = null;\n    }\n    /** Returns true if field permissionType is set (has been assigned a value) and false otherwise */\n    public boolean isSetPermissionType() {\n      return this.permissionType != null;\n    }\n    public void setPermissionTypeIsSet(boolean value) {\n      if (!value) {\n        this.permissionType = null;\n      }\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      case PERMISSION_TYPE:\n        if (value == null) {\n          unsetPermissionType();\n        } else {\n          setPermissionType((org.apache.airavata.sharing.registry.models.PermissionType)value);\n        }\n        break;\n      }\n    }\n    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case PERMISSION_TYPE:\n        return getPermissionType();\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      case PERMISSION_TYPE:\n        return isSetPermissionType();\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof createPermissionType_args)\n        return this.equals((createPermissionType_args)that);\n      return false;\n    }\n    public boolean equals(createPermissionType_args that) {\n      if (that == null)\n        return false;\n      boolean this_present_permissionType = true && this.isSetPermissionType();\n      boolean that_present_permissionType = true && that.isSetPermissionType();\n      if (this_present_permissionType || that_present_permissionType) {\n        if (!(this_present_permissionType && that_present_permissionType))\n          return false;\n        if (!this.permissionType.equals(that.permissionType))\n          return false;\n      }\n      return true;\n    }\n    @Override\n    public int hashCode() {\n      List<Object> list = new ArrayList<Object>();\n      boolean present_permissionType = true && (isSetPermissionType());\n      list.add(present_permissionType);\n      if (present_permissionType)\n        list.add(permissionType);\n      return list.hashCode();\n    }\n    @Override\n    public int compareTo(createPermissionType_args other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      lastComparison = Boolean.valueOf(isSetPermissionType()).compareTo(other.isSetPermissionType());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetPermissionType()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissionType, other.permissionType);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n    }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"createPermissionType_args(\");\n      boolean first = true;\n      sb.append(\"permissionType:\");\n      if (this.permissionType == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.permissionType);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      if (permissionType == null) {\n        throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'permissionType' was not present! Struct: \" + toString());\n      }\n      // check for sub-struct validity\n      if (permissionType != null) {\n        permissionType.validate();\n      }\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class createPermissionType_argsStandardSchemeFactory implements SchemeFactory {\n      public createPermissionType_argsStandardScheme getScheme() {\n        return new createPermissionType_argsStandardScheme();\n      }\n    }\n    private static class createPermissionType_argsStandardScheme extends StandardScheme<createPermissionType_args> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, createPermissionType_args struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 1: // PERMISSION_TYPE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.permissionType = new org.apache.airavata.sharing.registry.models.PermissionType();\n                struct.permissionType.read(iprot);\n                struct.setPermissionTypeIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, createPermissionType_args struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.permissionType != null) {\n          oprot.writeFieldBegin(PERMISSION_TYPE_FIELD_DESC);\n          struct.permissionType.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n<fim_suffix>    private static class createPermissionType_argsTupleSchemeFactory implements SchemeFactory {\n      public createPermissionType_argsTupleScheme getScheme() {\n        return new createPermissionType_argsTupleScheme();\n      }\n    }<fim_middle>// class below has no smell\n"}