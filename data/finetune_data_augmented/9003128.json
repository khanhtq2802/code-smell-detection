{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.solr.search;\n\nimport org.apache.lucene.queries.function.FunctionQuery;\nimport org.apache.lucene.queries.function.FunctionScoreQuery;\nimport org.apache.lucene.queries.function.ValueSource;\nimport org.apache.lucene.queries.function.valuesource.QueryValueSource;\nimport org.apache.lucene.search.Query;\nimport org.apache.solr.common.params.SolrParams;\nimport org.apache.solr.common.util.NamedList;\nimport org.apache.solr.request.SolrQueryRequest;\n\n/**\n * Create a boosted query from the input value.  The main value is the query to be boosted.\n * <br>Other parameters: <code>b</code>, the function query to use as the boost.\n * <p>Example: <code>{!boost b=log(popularity)}foo</code> creates a query \"foo\"\n * which is boosted (scores are multiplied) by the function query <code>log(popularity)</code>.\n * The query to be boosted may be of any type.\n *\n * <p>Example: <code>{!boost b=recip(ms(NOW,mydatefield),3.16e-11,1,1)}foo</code> creates a query \"foo\"\n * which is boosted by the date boosting function referenced in\n * {@link org.apache.lucene.queries.function.valuesource.ReciprocalFloatFunction}\n */\n<fim_suffix>public class BoostQParserPlugin extends QParserPlugin {\n  public static final String NAME = \"boost\";\n  public static String BOOSTFUNC = \"b\";\n\n  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource());\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n}<fim_middle>// class below has no smell\n"}