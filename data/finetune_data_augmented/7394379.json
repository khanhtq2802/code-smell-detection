{"text": "<fim_prefix>/*\n * Copyright (c) 2016, 2018, Oracle and/or its affiliates.\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this list of\n * conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other materials provided\n * with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n * endorse or promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.oracle.truffle.llvm.parser.model.symbols.instructions;\n\nimport com.oracle.truffle.llvm.parser.model.IRScope;\nimport com.oracle.truffle.llvm.parser.model.SymbolImpl;\nimport com.oracle.truffle.llvm.parser.model.attributes.AttributesCodeEntry;\nimport com.oracle.truffle.llvm.parser.model.attributes.AttributesGroup;\nimport com.oracle.truffle.llvm.parser.model.visitors.SymbolVisitor;\n\n<fim_suffix>public final class VoidCallInstruction extends VoidInstruction implements FunctionStart {\n\n    private SymbolImpl target;\n\n    private final SymbolImpl[] arguments;\n\n    private final AttributesCodeEntry paramAttr;\n\n    private VoidCallInstruction(AttributesCodeEntry paramAtt, int argCount) {\n        this.arguments = argCount == 0 ? NO_ARGS : new SymbolImpl[argCount];\n        this.paramAttr = paramAtt;\n    }\n\n    @Override\n    public void accept(SymbolVisitor visitor) {\n        visitor.visit(this);\n    }\n\n    @Override\n    public SymbolImpl[] getArguments() {\n        return arguments;\n    }\n\n    @Override\n    public SymbolImpl getCallTarget() {\n        return target;\n    }\n\n    @Override\n    public AttributesGroup getFunctionAttributesGroup() {\n        return paramAttr.getFunctionAttributesGroup();\n    }\n\n    @Override\n    public AttributesGroup getReturnAttributesGroup() {\n        return paramAttr.getReturnAttributesGroup();\n    }\n\n    @Override\n    public AttributesGroup getParameterAttributesGroup(int idx) {\n        return paramAttr.getParameterAttributesGroup(idx);\n    }\n\n    @Override\n    public void replace(SymbolImpl original, SymbolImpl replacement) {\n        if (target == original) {\n            target = replacement;\n        }\n        for (int i = 0; i < arguments.length; i++) {\n            if (arguments[i] == original) {\n                arguments[i] = replacement;\n            }\n        }\n    }\n\n    public static VoidCallInstruction fromSymbols(IRScope scope, int targetIndex, int[] arguments, AttributesCodeEntry paramAttr) {\n        final VoidCallInstruction inst = new VoidCallInstruction(paramAttr, arguments.length);\n        inst.target = scope.getSymbols().getForwardReferenced(targetIndex, inst);\n        FunctionStart.parseArguments(scope, inst.target, inst, inst.arguments, arguments);\n        return inst;\n    }\n\n    @Override\n    public String toString() {\n        return FunctionStart.asString(target, arguments);\n    }\n}<fim_middle>// class below has no smell\n"}