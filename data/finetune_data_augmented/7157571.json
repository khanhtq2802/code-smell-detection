{"text": "<fim_prefix>/**\n * Copyright (c) Microsoft Corporation\n * <p/>\n * All rights reserved.\n * <p/>\n * MIT License\n * <p/>\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n * to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n * <p/>\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n * the Software.\n * <p/>\n * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n * THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage com.microsoft.intellij.helpers.storage;\n\nimport com.intellij.openapi.fileEditor.FileEditor;\nimport com.intellij.openapi.fileEditor.FileEditorPolicy;\nimport com.intellij.openapi.fileEditor.FileEditorProvider;\nimport com.intellij.openapi.fileEditor.FileEditorState;\nimport com.intellij.openapi.project.DumbAware;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.util.Disposer;\nimport com.intellij.openapi.util.Key;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport com.microsoft.azure.management.storage.StorageAccount;\nimport com.microsoft.intellij.helpers.UIHelperImpl;\nimport com.microsoft.tooling.msservices.helpers.azure.sdk.StorageClientSDKManager;\nimport com.microsoft.tooling.msservices.model.storage.BlobContainer;\nimport com.microsoft.tooling.msservices.model.storage.ClientStorageAccount;\nimport org.jdom.Element;\nimport org.jetbrains.annotations.NotNull;\n\n<fim_suffix>public class BlobExplorerFileEditorProvider implements FileEditorProvider, DumbAware {\n    public static Key<BlobContainer> CONTAINER_KEY = new Key<BlobContainer>(\"blobContainer\");\n\n    @Override\n    public boolean accept(@NotNull Project project, @NotNull VirtualFile virtualFile) {\n        StorageAccount storageAccount = virtualFile.getUserData(UIHelperImpl.STORAGE_KEY);\n        ClientStorageAccount clientStorageAccount = virtualFile.getUserData(UIHelperImpl.CLIENT_STORAGE_KEY);\n        BlobContainer blobContainer = virtualFile.getUserData(CONTAINER_KEY);\n\n        return ((storageAccount != null || clientStorageAccount != null )&& blobContainer != null);\n    }\n\n    @NotNull\n    @Override\n    public FileEditor createEditor(@NotNull Project project, @NotNull VirtualFile virtualFile) {\n        BlobExplorerFileEditor blobExplorerFileEditor = new BlobExplorerFileEditor(project);\n\n        StorageAccount storageAccount = virtualFile.getUserData(UIHelperImpl.STORAGE_KEY);\n        BlobContainer blobContainer = virtualFile.getUserData(CONTAINER_KEY);\n\n        blobExplorerFileEditor.setBlobContainer(blobContainer);\n        if (storageAccount != null) {\n            blobExplorerFileEditor.setConnectionString(StorageClientSDKManager.getConnectionString(storageAccount));\n            blobExplorerFileEditor.setStorageAccount(storageAccount.name());\n        } else {\n            blobExplorerFileEditor.setConnectionString(virtualFile.getUserData(UIHelperImpl.CLIENT_STORAGE_KEY).getConnectionString());\n            blobExplorerFileEditor.setStorageAccount(virtualFile.getUserData(UIHelperImpl.CLIENT_STORAGE_KEY).getName());\n        }\n\n        blobExplorerFileEditor.fillGrid();\n\n        return blobExplorerFileEditor;\n    }\n\n    @Override\n    public void disposeEditor(@NotNull FileEditor fileEditor) {\n        Disposer.dispose(fileEditor);\n    }\n\n    @NotNull\n    @Override\n    public FileEditorState readState(@NotNull Element element, @NotNull Project project, @NotNull VirtualFile virtualFile) {\n        return FileEditorState.INSTANCE;\n    }\n\n    @Override\n    public void writeState(@NotNull FileEditorState fileEditorState, @NotNull Project project, @NotNull Element element) {\n    }\n\n    @NotNull\n    @Override\n    public String getEditorTypeId() {\n        return \"Azure-Storage-Blob-Editor\";\n    }\n\n    @NotNull\n    @Override\n    public FileEditorPolicy getPolicy() {\n        return FileEditorPolicy.HIDE_DEFAULT_EDITOR;\n    }\n}<fim_middle>// class below has no smell\n"}