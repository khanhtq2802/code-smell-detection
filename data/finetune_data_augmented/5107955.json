{"text": "<fim_prefix> * @author Alejandro Abdelnur\n *\n */\npublic class DCModuleImpl extends ModuleImpl implements DCModule {\n    private ObjectBean _objBean;\n    private List<String> _title;\n    private List<String> _creator;\n    private List<DCSubject> _subject;\n    private List<String> _description;\n    private List<String> _publisher;\n    private List<String> _contributors;\n    private List<Date> _date;\n    private List<String> _type;\n    private List<String> _format;\n    private List<String> _identifier;\n    private List<String> _source;\n    private List<String> _language;\n    private List<String> _relation;\n    private List<String> _coverage;\n    private List<String> _rights;\n    /**\n     * Properties to be ignored when cloning.\n     */\n    private static final Set IGNORE_PROPERTIES = new HashSet();\n    /**\n     * Unmodifiable Set containing the convenience properties of this class.\n     * <p>\n     * Convenience properties are mapped to Modules, for cloning the convenience\n     * properties can be ignored as the will be copied as part of the module\n     * cloning.\n     */\n    public static final Set CONVENIENCE_PROPERTIES = Collections.unmodifiableSet(IGNORE_PROPERTIES);\n    static {\n        IGNORE_PROPERTIES.add(\"title\");\n        IGNORE_PROPERTIES.add(\"creator\");\n        IGNORE_PROPERTIES.add(\"subject\");\n        IGNORE_PROPERTIES.add(\"description\");\n        IGNORE_PROPERTIES.add(\"publisher\");\n        IGNORE_PROPERTIES.add(\"contributor\");\n        IGNORE_PROPERTIES.add(\"date\");\n        IGNORE_PROPERTIES.add(\"type\");\n        IGNORE_PROPERTIES.add(\"format\");\n        IGNORE_PROPERTIES.add(\"identifier\");\n        IGNORE_PROPERTIES.add(\"source\");\n        IGNORE_PROPERTIES.add(\"language\");\n        IGNORE_PROPERTIES.add(\"relation\");\n        IGNORE_PROPERTIES.add(\"coverage\");\n        IGNORE_PROPERTIES.add(\"rights\");\n    }\n    /**\n     * Default constructor. All properties are set to <b>null</b>.\n     * <p>\n     *\n     */\n    public DCModuleImpl() {\n        super(DCModule.class, URI);\n        _objBean = new ObjectBean(DCModule.class, this, CONVENIENCE_PROPERTIES);\n    }\n    /**\n     * Returns the DublinCore module titles.\n     * <p>\n     * @return a list of Strings representing the DublinCore module title,\n     *         an empty list if none.\n     *\n     */\n    public List getTitles() {\n        return (_title == null) ? (_title = new ArrayList()) : _title;\n    }\n    /**\n     * Sets the DublinCore module titles.\n     * <p>\n     * @param titles the list of String representing the DublinCore module\n     * \t\ttitles to set, an empty list or <b>null</b> if none.\n     *\n     */\n    public void setTitles(List titles) {\n    \t\t_title = titles;\n    }\n    /**\n     * Gets the DublinCore module title. Convenience method that can be used to\n     * obtain the first item, <b>null</b> if none.\n     * <p>\n     * @return the first DublinCore module title, <b>null</b> if none.\n     */\n    public String getTitle() {\n        return ((_title != null) && (_title.size() > 0)) ? (String) _title.get(0) : null;\n    }\n    /**\n     * Sets the DublinCore module title. Convenience method that can be used\n     * when there is only one title to set.\n     * <p>\n     * @param title the DublinCore module title to set, <b>null</b> if none.\n     *\n     */\n    public void setTitle(String title) {\n    \t\t_title = new ArrayList();\n    \t\t_title.add(title);\n    }\n    /**\n     * Returns the DublinCore module creator.\n     * <p>\n     * @return a list of Strings representing the DublinCore module creator,\n     *         an empty list if none.\n     *\n     */\n    public List getCreators() {\n        return (_creator == null) ? (_creator = new ArrayList()) : _creator;\n    }\n    /**\n     * Sets the DublinCore module creators.\n     * <p>\n     * @param creators the list of String representing the DublinCore module\n     * \t\tcreators to set, an empty list or <b>null</b> if none.\n     *\n     */\n    public void setCreators(List creators) {\n        _creator = creators;\n    }\n    /**\n     * Gets the DublinCore module title. Convenience method that can be used\n     * to obtain the first item, <b>null</b> if none.\n     * <p>\n     * @return the first DublinCore module title, <b>null</b> if none.\n     */\n    public String getCreator() {\n        return ((_creator != null) && (_creator.size() > 0)) ? (String) _creator.get(0) : null;\n    }\n    /**\n     * Sets the DublinCore module creator. Convenience method that can be used\n     * when there is only one creator to set.\n     * <p>\n     * @param creator the DublinCore module creator to set, <b>null</b> if none.\n     *\n     */\n    public void setCreator(String creator) {\n        _creator = new ArrayList();\n        _creator.add(creator);\n    }\n    /**\n     * Returns the DublinCore module subjects.\n     * <p>\n     * @return a list of DCSubject elements with the DublinCore module subjects,\n     *         an empty list if none.\n     *\n     */\n    public List getSubjects() {\n        return (_subject == null) ? (_subject = new ArrayList()) : _subject;\n    }\n    /**\n     * Sets the DublinCore module subjects.\n     * <p>\n     * @param subjects the list of DCSubject elements with the DublinCore\n     * \t\tmodule subjects to set, an empty list or <b>null</b> if none.\n     *\n     */\n    public void setSubjects(List subjects) {\n        _subject = subjects;\n    }\n    /**\n     * Gets the DublinCore module subject. Convenience method that can be used\n     * to obtain the first item, <b>null</b> if none.\n     * <p>\n     * @return the first DublinCore module subject, <b>null</b> if none. \n     */\n    public DCSubject getSubject() {\n        return ((_subject != null) && (_subject.size() > 0)) ?\n                (DCSubject) _subject.get(0) : null;\n    }\n    /**\n     * Sets the DCSubject element. Convenience method that can be used when\n     * there is only one subject to set.\n     * <p>\n     * @param subject the DublinCore module subject to set, <b>null</b> if none.\n     *\n     */\n    public void setSubject(DCSubject subject) {\n        _subject = new ArrayList();\n        _subject.add(subject);\n    }\n    /**\n     * Returns the DublinCore module description.\n     * <p>\n     * @return a list of Strings representing the DublinCore module\n     * \t\tdescription, an empty list if none.\n     *\n     */\n    public List getDescriptions() {\n        return (_description == null) ? (_description = new ArrayList()) : _description;\n    }\n    /**\n     * Sets the DublinCore module descriptions.\n     * <p>\n     * @param descriptions the list of String representing the DublinCore\n     * \t\tmodule descriptions to set, an empty list or <b>null</b> if none.\n     *\n     */\n    public void setDescriptions(List descriptions) {\n        _description = descriptions;\n    }\n    /**\n     * Gets the DublinCore module description. Convenience method that can be\n     * used to obtain the first item, <b>null</b> if none.\n     * <p>\n     * @return the first DublinCore module description, <b>null</b> if none.\n     */\n    public String getDescription() {\n        return ((_description != null) && (_description.size() > 0)) ?\n                (String) _description.get(0) : null;\n    }\n    /**\n     * Sets the DublinCore module description. Convenience method that can be\n     * used when there is only one description to set.\n     * <p>\n     * @param description the DublinCore module description to set, <b>null</b> if none.\n     *\n     */\n    public void setDescription(String description) {\n        _description = new ArrayList();\n        _description.add(description);\n    }\n    /**\n     * Returns the DublinCore module publisher.\n     * <p>\n     * @return a list of Strings representing the DublinCore module publisher,\n     *         an empty list if none.\n     *\n     */\n<fim_suffix>    public List getPublishers() {\n        return (_publisher == null) ? (_publisher = new ArrayList()) : _publisher;\n    }<fim_middle>// function below has no smell\n"}