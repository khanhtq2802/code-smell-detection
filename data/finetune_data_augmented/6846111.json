{"text": "<fim_prefix>/**\n * Copyright (c) 2016 NumberFour AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   NumberFour AG - Initial API and implementation\n */\npackage org.eclipse.n4js.jsdoc2spec;\n\nimport java.util.function.Consumer;\n\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.core.runtime.NullProgressMonitor;\nimport org.eclipse.core.runtime.SubMonitor;\n\n/**\n * This class is a {@link SubMonitor} that also relays the task names to a given callback method.<br>\n * Note: Unfortunately a {@link SubMonitor} is final.\n */\npublic class SubMonitorMsg implements IProgressMonitor {\n\tprivate final IProgressMonitor monitor;\n\tprivate final SubMonitor subMonitor;\n\tprivate final Consumer<String> callbackMsg;\n\tprivate final Consumer<String> callbackErr;\n\tprivate final CheckCanceled checkCanceled;\n\n\t/**\n\t * get a NullProgressMonitor here!\n\t */\n\tstatic public SubMonitorMsg nullProgressMonitor() {\n\t\treturn new SubMonitorMsg();\n\t}\n\n\t/**\n\t * Wraps a {@link SubMonitor}\n\t */\n\tprivate SubMonitorMsg() {\n\t\tthis.subMonitor = null;\n\t\tthis.monitor = new NullProgressMonitor();\n\t\tthis.callbackMsg = this::devNull;\n\t\tthis.callbackErr = this::devNull;\n\t\tthis.checkCanceled = this::noCheck;\n\t}\n\n\tvoid devNull(@SuppressWarnings(\"unused\") String str) {\n\t\t// for Null constructor only\n\t}\n\n\tvoid noCheck(@SuppressWarnings(\"unused\") IProgressMonitor m) {\n\t\t// for Null constructor only\n\t}\n\n\t/**\n\t * Wraps a {@link SubMonitor}\n\t */\n\tpublic SubMonitorMsg(SubMonitor subMonitor, Consumer<String> callbackMsg, CheckCanceled checkCanceled) {\n\t\tthis(subMonitor, callbackMsg, callbackMsg, checkCanceled);\n\t}\n\n\t/**\n\t * Wraps a {@link SubMonitor}\n\t */\n\tpublic SubMonitorMsg(SubMonitor subMonitor, Consumer<String> callbackMsg, Consumer<String> callbackErr,\n\t\t\tCheckCanceled checkCanceled) {\n\n\t\tthis.subMonitor = subMonitor;\n\t\tthis.monitor = subMonitor;\n\t\tthis.callbackMsg = callbackMsg;\n\t\tthis.callbackErr = callbackErr;\n\t\tthis.checkCanceled = checkCanceled;\n\t}\n\n\t/**\n\t * c.f. {@link SubMonitor#newChild(int)}\n\t */\n\tpublic SubMonitorMsg newChild(int i) {\n\t\tSubMonitor child = subMonitor.newChild(i);\n\t\treturn new SubMonitorMsg(child, callbackMsg, callbackErr, checkCanceled);\n\t}\n\n\t/**\n\t * c.f. {@link SubMonitor#convert(org.eclipse.core.runtime.IProgressMonitor, int)}\n\t */\n\tpublic SubMonitorMsg convert(int i) {\n\t\tSubMonitor sub = SubMonitor.convert(subMonitor, i);\n\t\treturn new SubMonitorMsg(sub, callbackMsg, callbackErr, checkCanceled);\n\t}\n\n<fim_suffix>\t@Override\n\tpublic void beginTask(String name, int totalWork) {\n\t\tmonitor.beginTask(name, totalWork);\n\t\tfireMsgString(name);\n\t}\n\n\t@Override\n\tpublic void done() {\n\t\tmonitor.done();\n\t}\n\n\t@Override\n\tpublic void internalWorked(double work) {\n\t\tmonitor.internalWorked(work);\n\t}\n\n\t@Override\n\tpublic boolean isCanceled() {\n\t\treturn monitor.isCanceled();\n\t}\n\n\t@Override\n\tpublic void setCanceled(boolean value) {\n\t\tmonitor.setCanceled(value);\n\t}\n\n\t@Override\n\tpublic void setTaskName(String name) {\n\t\tmonitor.setTaskName(name);\n\t\tfireMsgString(name);\n\t}\n\n\t@Override\n\tpublic void subTask(String name) {\n\t\tmonitor.subTask(name);\n\t\tfireMsgString(name);\n\t}\n\n\t@Override\n\tpublic void worked(int work) {\n\t\tmonitor.worked(work);\n\t}\n\n\tprivate void fireMsgString(String msg) {\n\t\tcallbackMsg.accept(msg);\n\t}\n\n\tprivate void fireErrString(String msg) {\n\t\tcallbackErr.accept(msg);\n\t}\n\n\t/**\n\t * Relays the message to the callback function. The subtask name is not modified.\n\t */\n\tpublic String pushMessage(String msg) {\n\t\tfireMsgString(msg);\n\t\treturn msg;\n\t}\n\n\t/**\n\t * Relays the message to the callback function. The subtask name is not modified.\n\t */\n\tpublic String pushError(String msg) {\n\t\tfireErrString(msg);\n\t\treturn msg;\n\t}\n\n\t/**\n\t * Relays the check for cancellation events.\n\t */\n\tpublic void checkCanceled() throws InterruptedException {\n\t\tcheckCanceled.check(monitor);\n\t}\n}<fim_middle>// function below has no smell\n"}