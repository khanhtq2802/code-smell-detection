{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2005, 2009 Cognos Incorporated, IBM Corporation and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n * \n * Contributors:\n *     Cognos Incorporated - initial API and implementation\n *     IBM Corporation - bug fixes and enhancements\n *******************************************************************************/\npackage org.eclipse.equinox.internal.jsp.jasper;\n\nimport org.osgi.framework.Bundle;\nimport org.osgi.framework.BundleActivator;\nimport org.osgi.framework.BundleContext;\nimport org.osgi.framework.ServiceReference;\nimport org.osgi.service.packageadmin.ExportedPackage;\nimport org.osgi.service.packageadmin.PackageAdmin;\nimport org.osgi.util.tracker.ServiceTracker;\nimport org.osgi.util.tracker.ServiceTrackerCustomizer;\n\npublic class Activator implements BundleActivator, ServiceTrackerCustomizer {\n\n\tprivate ServiceTracker packageAdminTracker;\n\tprivate static PackageAdmin packageAdmin;\n\tprivate volatile static Bundle thisBundle;\n\tprivate BundleContext context;\n\n\tpublic void start(BundleContext context) throws Exception {\n\t\t//disable the JSR99 compiler that does not work in OSGi;\n\t\t//This will convince jasper to use the JDTCompiler that invokes ecj (see JSP-21 on the glassfish bug-tracker)\n\t\tSystem.setProperty(\"org.apache.jasper.compiler.disablejsr199\", Boolean.TRUE.toString());\n\t\tthis.context = context;\n\t\tthisBundle = context.getBundle();\n\t\tpackageAdminTracker = new ServiceTracker(context, PackageAdmin.class.getName(), this);\n\t\tpackageAdminTracker.open();\n\t}\n\n\tpublic void stop(BundleContext context) throws Exception {\n\t\tpackageAdminTracker.close();\n\t\tpackageAdminTracker = null;\n\t\tthisBundle = null;\n\t\tthis.context = null;\n\t}\n\n\tpublic Object addingService(ServiceReference reference) {\n\t\tsynchronized (Activator.class) {\n\t\t\tpackageAdmin = (PackageAdmin) context.getService(reference);\n\t\t}\n\t\treturn packageAdmin;\n\t}\n\n\tpublic void modifiedService(ServiceReference reference, Object service) {\n\t}\n\n\tpublic void removedService(ServiceReference reference, Object service) {\n\t\tsynchronized (Activator.class) {\n\t\t\tcontext.ungetService(reference);\n\t\t\tpackageAdmin = null;\n\t\t}\n\t}\n\n\tpublic static synchronized Bundle getBundle(Class clazz) {\n\t\tif (packageAdmin == null)\n\t\t\tthrow new IllegalStateException(\"Not started\"); //$NON-NLS-1$\n\n\t\treturn packageAdmin.getBundle(clazz);\n\t}\n\n<fim_suffix>\tpublic static Bundle[] getFragments(Bundle bundle) {\n\t\tif (packageAdmin == null)\n\t\t\tthrow new IllegalStateException(\"Not started\"); //$NON-NLS-1$\n\n\t\treturn packageAdmin.getFragments(bundle);\n\t}\n\n\tpublic static Bundle getJasperBundle() {\n\t\tBundle bundle = getBundle(org.apache.jasper.servlet.JspServlet.class);\n\t\tif (bundle != null)\n\t\t\treturn bundle;\n\n\t\tif (thisBundle == null)\n\t\t\tthrow new IllegalStateException(\"Not started\"); //$NON-NLS-1$\n\n\t\tExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(\"org.apache.jasper.servlet\"); //$NON-NLS-1$\n\t\tfor (int i = 0; i < exportedPackages.length; i++) {\n\t\t\tBundle[] importingBundles = exportedPackages[i].getImportingBundles();\n\t\t\tfor (int j = 0; j < importingBundles.length; j++) {\n\t\t\t\tif (thisBundle.equals(importingBundles[j]))\n\t\t\t\t\treturn exportedPackages[i].getExportingBundle();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}<fim_middle>// function below has no smell\n"}