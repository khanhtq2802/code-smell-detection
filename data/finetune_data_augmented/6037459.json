{"text": "<fim_prefix>/*********************************************************************\n * Copyright (c) 2017 Red Hat Inc. and others.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *  Lucas Bullen   (Red Hat Inc.) - Initial implementation\n *******************************************************************************/\npackage org.eclipse.corrosion.tests;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\n\nimport java.io.IOException;\n\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.core.resources.ResourcesPlugin;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.NullProgressMonitor;\nimport org.eclipse.corrosion.run.CargoRunDelegate;\nimport org.eclipse.debug.core.DebugPlugin;\nimport org.eclipse.debug.core.ILaunch;\nimport org.eclipse.debug.core.ILaunchConfiguration;\nimport org.eclipse.debug.core.ILaunchConfigurationType;\nimport org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;\nimport org.eclipse.debug.core.ILaunchManager;\nimport org.eclipse.debug.core.model.IProcess;\nimport org.eclipse.jface.viewers.StructuredSelection;\nimport org.eclipse.swt.widgets.Display;\nimport org.eclipse.swt.widgets.Shell;\nimport org.eclipse.ui.tests.harness.util.DisplayHelper;\nimport org.junit.After;\nimport org.junit.Test;\n\n<fim_suffix>public class TestRunConfiguration extends AbstractCorrosionTest {\n\n\t@After\n\tpublic void testErrorPopup() {\n\t\tShell errorPopup = getErrorPopup();\n\t\tif (errorPopup != null) {\n\t\t\terrorPopup.close();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void testBasicRun() throws IOException, CoreException, InterruptedException {\n\t\tCargoRunDelegate delegate = new CargoRunDelegate();\n\t\tIProject project = getProject(BASIC_PROJECT_NAME);\n\t\tdelegate.launch(new StructuredSelection(project), \"run\");\n\t\tnew DisplayHelper() {\n\t\t\t@Override\n\t\t\tprotected boolean condition() {\n\t\t\t\treturn DebugPlugin.getDefault().getLaunchManager().getProcesses().length != 0 || getErrorPopup() != null;\n\t\t\t}\n\t\t}.waitForCondition(Display.getCurrent(), 15000);\n\t\tassertNull(getErrorPopup());\n\t\tassertTrue(DebugPlugin.getDefault().getLaunchManager().getProcesses().length != 0);\n\t\tfor (IProcess process : DebugPlugin.getDefault().getLaunchManager().getProcesses()) {\n\t\t\tif (process.getLabel().equals(\"cargo run\")) {\n\t\t\t\twhile (!process.isTerminated()) {\n\t\t\t\t\tThread.sleep(50);\n\t\t\t\t}\n\t\t\t\tassertEquals(0, process.getExitValue());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t@Test\n\tpublic void testFailOnFakeProjectName() throws IOException, CoreException {\n\t\tIProject project = getProject(BASIC_PROJECT_NAME);\n\t\tILaunchConfigurationWorkingCopy launchConfiguration = createLaunchConfiguration(project);\n\t\tlaunchConfiguration.setAttribute(\"PROJECT\", \"fakeProjectName\");\n\t\tconfirmErrorPopup(launchConfiguration);\n\t}\n\n\t@Test\n\tpublic void testFailOnDeletedProject() throws IOException, CoreException {\n\t\tIProject project = getProject(BASIC_PROJECT_NAME);\n\t\tILaunchConfigurationWorkingCopy launchConfiguration = createLaunchConfiguration(project);\n\t\tproject.delete(true, new NullProgressMonitor());\n\t\tconfirmErrorPopup(launchConfiguration);\n\t}\n\n\t@Test\n\tpublic void testFailOnNonCargoProject() throws IOException, CoreException {\n\t\tIProject project = getProject(NOT_CARGO_PROJECT_NAME);\n\t\tILaunchConfigurationWorkingCopy launchConfiguration = createLaunchConfiguration(project);\n\t\tconfirmErrorPopup(launchConfiguration);\n\t}\n\n\t@Test\n\tpublic void testTranslateVariablesInBuildCommand() throws InterruptedException, IOException, CoreException {\n\t\tIProject project = getProject(BASIC_PROJECT_NAME);\n\t\tILaunchConfigurationWorkingCopy launchConfiguration = createLaunchConfiguration(project);\n\t\tlaunchConfiguration.setAttribute(\"BUILD_COMMAND\", \"-- ${workspace_loc}\");\n\t\tILaunch launch = launchConfiguration.launch(ILaunchManager.RUN_MODE, new NullProgressMonitor());\n\n\t\tnew DisplayHelper() {\n\t\t\t@Override\n\t\t\tprotected boolean condition() {\n\t\t\t\treturn launch.getProcesses().length != 0;\n\t\t\t}\n\t\t}.waitForCondition(Display.getDefault(), 15000);\n\n\t\tfor (IProcess process : launch.getProcesses()) {\n\t\t\tif (process.getLabel().equals(\"cargo run\")) {\n\t\t\t\twhile (!process.isTerminated()) {\n\t\t\t\t\tThread.sleep(50);\n\t\t\t\t}\n\t\t\t\tString command = process.getAttribute(IProcess.ATTR_CMDLINE);\n\t\t\t\t// confirm ${workspace_loc} has been replaced with its actual value\n\t\t\t\tassertTrue(command\n\t\t\t\t\t\t.matches(\".*\" + ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + \".*\"));\n\t\t\t\tassertEquals(0, process.getExitValue());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfail();\n\t}\n\n\tprivate static ILaunchConfigurationWorkingCopy createLaunchConfiguration(IProject project) throws CoreException {\n\t\tILaunchManager launchManager = DebugPlugin.getDefault().getLaunchManager();\n\t\tILaunchConfigurationType configType = launchManager\n\t\t\t\t.getLaunchConfigurationType(\"org.eclipse.corrosion.run.CargoRunDelegate\");\n\t\tILaunchConfigurationWorkingCopy wc = configType.newInstance(project, \"launch\");\n\t\twc.setAttribute(\"PROJECT\", project.getName());\n\t\treturn wc;\n\t}\n\n\tprivate static void confirmErrorPopup(ILaunchConfiguration configuration) throws CoreException {\n\t\tconfiguration.launch(ILaunchManager.RUN_MODE, new NullProgressMonitor());\n\t\tnew DisplayHelper() {\n\t\t\t@Override\n\t\t\tprotected boolean condition() {\n\t\t\t\treturn getErrorPopup() != null;\n\t\t\t}\n\t\t}.waitForCondition(Display.getDefault(), 15000);\n\n\t\tassertNotNull(getErrorPopup());\n\t}\n\n\tprivate static Shell getErrorPopup() {\n\t\tfor (Shell shell : Display.getDefault().getShells()) {\n\t\t\tif (shell.getText().equals(\"Unable to Launch\")) {\n\t\t\t\treturn shell;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}<fim_middle>// class below has no smell\n"}