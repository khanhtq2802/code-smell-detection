{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2018 Eurotech and/or its affiliates and others\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n *******************************************************************************/\npackage org.eclipse.kura.core.cloud.subscriber;\n\nimport static java.util.Objects.nonNull;\nimport static org.eclipse.kura.core.message.MessageConstants.APP_ID;\nimport static org.eclipse.kura.core.message.MessageConstants.APP_TOPIC;\nimport static org.eclipse.kura.core.message.MessageConstants.CONTROL;\nimport static org.eclipse.kura.core.message.MessageConstants.QOS;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.CopyOnWriteArraySet;\n\nimport org.eclipse.kura.cloudconnection.CloudConnectionManager;\nimport org.eclipse.kura.cloudconnection.listener.CloudConnectionListener;\nimport org.eclipse.kura.cloudconnection.message.KuraMessage;\nimport org.eclipse.kura.cloudconnection.subscriber.CloudSubscriber;\nimport org.eclipse.kura.cloudconnection.subscriber.listener.CloudSubscriberListener;\nimport org.eclipse.kura.configuration.ConfigurableComponent;\nimport org.eclipse.kura.core.cloud.CloudServiceImpl;\nimport org.eclipse.kura.core.message.MessageType;\nimport org.osgi.framework.BundleContext;\nimport org.osgi.framework.Constants;\nimport org.osgi.framework.Filter;\nimport org.osgi.framework.InvalidSyntaxException;\nimport org.osgi.framework.ServiceReference;\nimport org.osgi.service.component.ComponentContext;\nimport org.osgi.util.tracker.ServiceTracker;\nimport org.osgi.util.tracker.ServiceTrackerCustomizer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class CloudSubscriberImpl\n        implements CloudSubscriber, ConfigurableComponent, CloudConnectionListener, CloudSubscriberListener {\n\n    private final class CloudServiceTrackerCustomizer\n            implements ServiceTrackerCustomizer<CloudConnectionManager, CloudConnectionManager> {\n\n        @Override\n        public CloudConnectionManager addingService(final ServiceReference<CloudConnectionManager> reference) {\n            CloudConnectionManager tempCloudService = CloudSubscriberImpl.this.bundleContext.getService(reference);\n\n            if (tempCloudService instanceof CloudServiceImpl) {\n                CloudSubscriberImpl.this.cloudService = (CloudServiceImpl) tempCloudService;\n\n                Map<String, Object> subscriptionProps = new HashMap<>();\n                subscriptionProps.put(APP_ID.name(), CloudSubscriberImpl.this.cloudSubscriberOptions.getAppId());\n                subscriptionProps.put(APP_TOPIC.name(), CloudSubscriberImpl.this.cloudSubscriberOptions.getAppTopic());\n                subscriptionProps.put(QOS.name(), CloudSubscriberImpl.this.cloudSubscriberOptions.getQos());\n                subscriptionProps.put(CONTROL.name(),\n                        MessageType.CONTROL.equals(CloudSubscriberImpl.this.cloudSubscriberOptions.getMessageType()));\n\n                CloudSubscriberImpl.this.cloudService.registerSubscriber(subscriptionProps, CloudSubscriberImpl.this);\n                CloudSubscriberImpl.this.cloudService.registerCloudConnectionListener(CloudSubscriberImpl.this);\n                return tempCloudService;\n            } else {\n                CloudSubscriberImpl.this.bundleContext.ungetService(reference);\n            }\n\n            return null;\n        }\n\n        @Override\n        public void removedService(final ServiceReference<CloudConnectionManager> reference,\n                final CloudConnectionManager service) {\n\n            CloudSubscriberImpl.this.cloudService.unregisterSubscriber(CloudSubscriberImpl.this);\n            CloudSubscriberImpl.this.cloudService.unregisterCloudConnectionListener(CloudSubscriberImpl.this);\n            CloudSubscriberImpl.this.cloudService = null;\n        }\n\n        @Override\n        public void modifiedService(ServiceReference<CloudConnectionManager> reference,\n                CloudConnectionManager service) {\n            // Not needed\n        }\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(CloudSubscriberImpl.class);\n\n    private ServiceTrackerCustomizer<CloudConnectionManager, CloudConnectionManager> cloudServiceTrackerCustomizer;\n    private ServiceTracker<CloudConnectionManager, CloudConnectionManager> cloudServiceTracker;\n\n    private CloudSubscriberOptions cloudSubscriberOptions;\n    private CloudServiceImpl cloudService;\n    private BundleContext bundleContext;\n\n    private final Set<CloudSubscriberListener> subscribers = new CopyOnWriteArraySet<>();\n    private final Set<CloudConnectionListener> cloudConnectionListeners = new CopyOnWriteArraySet<>();\n\n    protected void activate(ComponentContext componentContext, Map<String, Object> properties) {\n        logger.debug(\"Activating Cloud Publisher...\");\n        this.bundleContext = componentContext.getBundleContext();\n\n        this.cloudServiceTrackerCustomizer = new CloudServiceTrackerCustomizer();\n\n        doUpdate(properties);\n\n        logger.debug(\"Activating Cloud Publisher... Done\");\n    }\n\n<fim_suffix>    public void updated(Map<String, Object> properties) {\n        logger.debug(\"Updating Cloud Publisher...\");\n\n        doUpdate(properties);\n\n        logger.debug(\"Updating Cloud Publisher... Done\");\n    }\n\n    protected void deactivate(ComponentContext componentContext) {\n        logger.debug(\"Deactivating Cloud Publisher...\");\n\n        if (nonNull(this.cloudServiceTracker)) {\n            this.cloudServiceTracker.close();\n        }\n        logger.debug(\"Deactivating Cloud Publisher... Done\");\n    }\n\n    private void doUpdate(Map<String, Object> properties) {\n        this.cloudSubscriberOptions = new CloudSubscriberOptions(properties);\n\n        if (nonNull(this.cloudServiceTracker)) {\n            this.cloudServiceTracker.close();\n        }\n        initCloudServiceTracking();\n    }\n\n    private void initCloudServiceTracking() {\n        String selectedCloudServicePid = this.cloudSubscriberOptions.getCloudServicePid();\n        String filterString = String.format(\"(&(%s=%s)(kura.service.pid=%s))\", Constants.OBJECTCLASS,\n                CloudConnectionManager.class.getName(), selectedCloudServicePid);\n        Filter filter = null;\n        try {\n            filter = this.bundleContext.createFilter(filterString);\n        } catch (InvalidSyntaxException e) {\n            logger.error(\"Filter setup exception \", e);\n        }\n        this.cloudServiceTracker = new ServiceTracker<>(this.bundleContext, filter, this.cloudServiceTrackerCustomizer);\n        this.cloudServiceTracker.open();\n    }\n\n    @Override\n    public void registerCloudSubscriberListener(CloudSubscriberListener listener) {\n        this.subscribers.add(listener);\n    }\n\n    @Override\n    public void unregisterCloudSubscriberListener(CloudSubscriberListener listener) {\n        this.subscribers.remove(listener);\n    }\n\n    @Override\n    public void onConnectionEstablished() {\n        this.cloudConnectionListeners.forEach(CloudConnectionListener::onConnectionEstablished);\n    }\n\n    @Override\n    public void onConnectionLost() {\n        this.cloudConnectionListeners.forEach(CloudConnectionListener::onConnectionLost);\n    }\n\n    @Override\n    public void onDisconnected() {\n        this.cloudConnectionListeners.forEach(CloudConnectionListener::onDisconnected);\n    }\n\n    @Override\n    public void registerCloudConnectionListener(CloudConnectionListener cloudConnectionListener) {\n        this.cloudConnectionListeners.add(cloudConnectionListener);\n    }\n\n    @Override\n    public void unregisterCloudConnectionListener(CloudConnectionListener cloudConnectionListener) {\n        this.cloudConnectionListeners.remove(cloudConnectionListener);\n    }\n\n    @Override\n    public void onMessageArrived(KuraMessage message) {\n        this.subscribers.forEach(subscriber -> subscriber.onMessageArrived(message));\n    }\n}<fim_middle>// function below has no smell\n"}