{"text": "<fim_prefix>\n<fim_suffix>public abstract class AbstractPmdReport\n    extends AbstractMavenReport\n{\n    /**\n     * The output directory for the intermediate XML report.\n     */\n    @Parameter( property = \"project.build.directory\", required = true )\n    protected File targetDirectory;\n    /**\n     * The output directory for the final HTML report. Note that this parameter is only evaluated if the goal is run\n     * directly from the command line or during the default lifecycle. If the goal is run indirectly as part of a site\n     * generation, the output directory configured in the Maven Site Plugin is used instead.\n     */\n    @Parameter( property = \"project.reporting.outputDirectory\", required = true )\n    protected File outputDirectory;\n    /**\n     * Site rendering component for generating the HTML report.\n     */\n    @Component\n    private Renderer siteRenderer;\n    /**\n     * The project to analyse.\n     */\n    @Parameter( defaultValue = \"${project}\", readonly = true, required = true )\n    protected MavenProject project;\n    /**\n     * Set the output format type, in addition to the HTML report. Must be one of: \"none\", \"csv\", \"xml\", \"txt\" or the\n     * full class name of the PMD renderer to use. See the net.sourceforge.pmd.renderers package javadoc for available\n     * renderers. XML is required if the pmd:check goal is being used.\n     */\n    @Parameter( property = \"format\", defaultValue = \"xml\" )\n    protected String format = \"xml\";\n    /**\n     * Link the violation line numbers to the source xref. Links will be created automatically if the jxr plugin is\n     * being used.\n     */\n    @Parameter( property = \"linkXRef\", defaultValue = \"true\" )\n    private boolean linkXRef;\n    /**\n     * Location of the Xrefs to link to.\n     */\n    @Parameter( defaultValue = \"${project.reporting.outputDirectory}/xref\" )\n    private File xrefLocation;\n    /**\n     * Location of the Test Xrefs to link to.\n     */\n    @Parameter( defaultValue = \"${project.reporting.outputDirectory}/xref-test\" )\n    private File xrefTestLocation;\n    /**\n     * A list of files to exclude from checking. Can contain Ant-style wildcards and double wildcards. Note that these\n     * exclusion patterns only operate on the path of a source file relative to its source root directory. In other\n     * words, files are excluded based on their package and/or class name. If you want to exclude entire source root\n     * directories, use the parameter <code>excludeRoots</code> instead.\n     *\n     * @since 2.2\n     */\n    @Parameter\n    private List<String> excludes;\n    /**\n     * A list of files to include from checking. Can contain Ant-style wildcards and double wildcards. Defaults to\n     * **\\/*.java.\n     *\n     * @since 2.2\n     */\n    @Parameter\n    private List<String> includes;\n    /**\n     * Specifies the location of the source directories to be used for PMD.\n     * Defaults to <code>project.compileSourceRoots</code>.\n     * @since 3.7\n     */\n    @Parameter( defaultValue = \"${project.compileSourceRoots}\" )\n    private List<String> compileSourceRoots;\n    /**\n     * The directories containing the test-sources to be used for PMD.\n     * Defaults to <code>project.testCompileSourceRoots</code>\n     * @since 3.7\n     */\n    @Parameter( defaultValue = \"${project.testCompileSourceRoots}\" )\n    private List<String> testSourceRoots;\n    /**\n     * The project source directories that should be excluded.\n     *\n     * @since 2.2\n     */\n    @Parameter\n    private File[] excludeRoots;\n    /**\n     * Run PMD on the tests.\n     *\n     * @since 2.2\n     */\n    @Parameter( defaultValue = \"false\" )\n    protected boolean includeTests;\n    /**\n     * Whether to build an aggregated report at the root, or build individual reports.\n     *\n     * @since 2.2\n     */\n    @Parameter( property = \"aggregate\", defaultValue = \"false\" )\n    protected boolean aggregate;\n    /**\n     * The file encoding to use when reading the Java sources.\n     *\n     * @since 2.3\n     */\n    @Parameter( property = \"encoding\", defaultValue = \"${project.build.sourceEncoding}\" )\n    private String sourceEncoding;\n    /**\n     * The file encoding when writing non-HTML reports.\n     *\n     * @since 2.5\n     */\n    @Parameter( property = \"outputEncoding\", defaultValue = \"${project.reporting.outputEncoding}\" )\n    private String outputEncoding;\n    /**\n     * The projects in the reactor for aggregation report.\n     */\n    @Parameter( property = \"reactorProjects\", readonly = true )\n    protected List<MavenProject> reactorProjects;\n    /**\n     * Whether to include the xml files generated by PMD/CPD in the site.\n     *\n     * @since 3.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    protected boolean includeXmlInSite;\n    /**\n     * Skip the PMD/CPD report generation if there are no violations or duplications found. Defaults to\n     * <code>true</code>.\n     *\n     * @since 3.1\n     */\n    @Parameter( defaultValue = \"true\" )\n    protected boolean skipEmptyReport;\n    /**\n     * File that lists classes and rules to be excluded from failures.\n     * For PMD, this is a properties file. For CPD, this\n     * is a text file that contains comma-separated lists of classes\n     * that are allowed to duplicate.\n     *\n     * @since 3.7\n     */\n    @Parameter( property = \"pmd.excludeFromFailureFile\", defaultValue = \"\" )\n    protected String excludeFromFailureFile;\n    /** The files that are being analyzed. */\n    protected Map<File, PmdFileInfo> filesToProcess;\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected MavenProject getProject()\n    {\n        return project;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Renderer getSiteRenderer()\n    {\n        return siteRenderer;\n    }\n    protected String constructXRefLocation( boolean test )\n    {\n        String location = null;\n        if ( linkXRef )\n        {\n            File xrefLoc = test ? xrefTestLocation : xrefLocation;\n            String relativePath =\n                PathTool.getRelativePath( outputDirectory.getAbsolutePath(), xrefLoc.getAbsolutePath() );\n            if ( StringUtils.isEmpty( relativePath ) )\n            {\n                relativePath = \".\";\n            }\n            relativePath = relativePath + \"/\" + xrefLoc.getName();\n            if ( xrefLoc.exists() )\n            {\n                // XRef was already generated by manual execution of a lifecycle binding\n                location = relativePath;\n            }\n            else\n            {\n                // Not yet generated - check if the report is on its way\n                @SuppressWarnings( \"unchecked\" )\n                List<ReportPlugin> reportPlugins = project.getReportPlugins();\n                for ( ReportPlugin plugin : reportPlugins )\n                {\n                    String artifactId = plugin.getArtifactId();\n                    if ( \"maven-jxr-plugin\".equals( artifactId ) || \"jxr-maven-plugin\".equals( artifactId ) )\n                    {\n                        location = relativePath;\n                    }\n                }\n            }\n            if ( location == null )\n            {\n                getLog().warn( \"Unable to locate Source XRef to link to - DISABLED\" );\n            }\n        }\n        return location;\n    }\n    /**\n     * Convenience method to get the list of files where the PMD tool will be executed\n     *\n     * @return a List of the files where the PMD tool will be executed\n     * @throws IOException If an I/O error occurs during construction of the\n     *                     canonical pathnames of the files\n     */\n    protected Map<File, PmdFileInfo> getFilesToProcess()\n        throws IOException\n    {\n        if ( aggregate && !project.isExecutionRoot() )\n        {\n            return Collections.emptyMap();\n        }\n        if ( excludeRoots == null )\n        {\n            excludeRoots = new File[0];\n        }\n        Collection<File> excludeRootFiles = new HashSet<>( excludeRoots.length );\n        for ( File file : excludeRoots )\n        {\n            if ( file.isDirectory() )\n            {\n                excludeRootFiles.add( file );\n            }\n        }\n        List<PmdFileInfo> directories = new ArrayList<>();\n        if ( null == compileSourceRoots )\n        {\n            compileSourceRoots = project.getCompileSourceRoots();\n        }\n        if ( compileSourceRoots != null )\n        {\n            for ( String root : compileSourceRoots )\n            {\n                File sroot = new File( root );\n                if ( sroot.exists() )\n                {\n                    String sourceXref = constructXRefLocation( false );\n                    directories.add( new PmdFileInfo( project, sroot, sourceXref ) );\n                }\n            }\n        }\n        if ( null == testSourceRoots )\n        {\n            testSourceRoots = project.getTestCompileSourceRoots();\n        }\n        if ( includeTests )\n        {\n            if ( testSourceRoots != null )\n            {\n                for ( String root : testSourceRoots )\n                {\n                    File sroot = new File( root );\n                    if ( sroot.exists() )\n                    {<fim_middle>// class below is data class\n"}