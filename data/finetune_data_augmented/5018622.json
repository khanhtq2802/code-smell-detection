{"text": "<fim_prefix>\n<fim_suffix>@Slf4j\npublic class LensJdbcStatement implements Statement {\n  /** The connection. */\n  private final LensJdbcConnection connection;\n  /** The statement. */\n  private final LensStatement statement;\n  /** The closed. */\n  private boolean closed;\n  /**\n   * Instantiates a new lens jdbc statement.\n   *\n   * @param connection the connection\n   */\n  public LensJdbcStatement(LensJdbcConnection connection) {\n    this.connection = connection;\n    statement = new LensStatement(connection.getConnection());\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#executeQuery(java.lang.String)\n   */\n  @Override\n  public ResultSet executeQuery(String s) throws SQLException {\n    try {\n      statement.executeQuery(s, true, null, new LensConf());\n    } catch (LensAPIException e) {\n      log.error(\"Execution Failed for Statement:{}\", s, e);\n    }\n    return new LensJdbcResultSet(statement.getResultSet(), statement.getResultSetMetaData(), this);\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#close()\n   */\n  @Override\n  public void close() throws SQLException {\n    killUnderlyingLensQuery();\n    this.closed = true;\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#cancel()\n   */\n  @Override\n  public void cancel() throws SQLException {\n    killUnderlyingLensQuery();\n  }\n  /**\n   * Kill underlying lens query.\n   *\n   * @throws SQLException the SQL exception\n   */\n  private void killUnderlyingLensQuery() throws SQLException {\n    if (closed) {\n      return;\n    }\n    if (statement.isIdle()) {\n      return;\n    }\n    boolean status = statement.kill();\n    if (!status) {\n      throw new SQLException(\"Unable to close the Statement on lens server\");\n    }\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#execute(java.lang.String)\n   */\n  @Override\n  public boolean execute(String s) throws SQLException {\n    if (closed) {\n      throw new SQLException(\"Cannot execute statemes on closed statements\");\n    }\n    try {\n      statement.executeQuery(s, true, null, new LensConf());\n    } catch (Throwable t) {\n      throw new SQLException(t);\n    }\n    return statement.wasQuerySuccessful();\n  }\n  @Override\n  public ResultSet getResultSet() throws SQLException {\n    if (closed) {\n      throw new SQLException(\"Cannot get resultset for closed statements\");\n    }\n    return new LensJdbcResultSet(statement.getResultSet(), statement.getResultSetMetaData(), this);\n  }\n  @Override\n  public boolean isClosed() throws SQLException {\n    return closed;\n  }\n  @Override\n  public int getFetchDirection() throws SQLException {\n    return ResultSet.FETCH_FORWARD;\n  }\n  @Override\n  public int getResultSetConcurrency() throws SQLException {\n    return ResultSet.CONCUR_READ_ONLY;\n  }\n  @Override\n  public int getResultSetType() throws SQLException {\n    return ResultSet.TYPE_FORWARD_ONLY;\n  }\n  @Override\n  public Connection getConnection() throws SQLException {\n    return this.connection;\n  }\n  /**\n   * Close result set.\n   */\n  void closeResultSet() {\n    this.statement.closeResultSet();\n  }\n  @Override\n  public SQLWarning getWarnings() throws SQLException {\n    return null;\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#clearWarnings()\n   */\n  @Override\n  public void clearWarnings() throws SQLException {\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Wrapper#unwrap(java.lang.Class)\n   */\n  @Override\n  public <T> T unwrap(Class<T> tClass) throws SQLException {\n    return null;\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Wrapper#isWrapperFor(java.lang.Class)\n   */\n  @Override\n  public boolean isWrapperFor(Class<?> aClass) throws SQLException {\n    return false;\n  }\n  @Override\n  public void setCursorName(String s) throws SQLException {\n    throw new SQLException(\"Operation not supported!!!!\");\n  }\n  @Override\n  public int getUpdateCount() throws SQLException {\n    throw new SQLException(\"Operation not supported!!!!\");\n  }\n  @Override\n  public boolean getMoreResults() throws SQLException {\n    throw new SQLException(\"Operation not supported!!!!\");\n  }\n  @Override\n  public void setFetchDirection(int i) throws SQLException {\n    throw new SQLException(\"Operation not supported!!!!\");\n  }\n  @Override\n  public void setFetchSize(int i) throws SQLException {\n    throw new SQLException(\"Operation not supported!!!!\");\n  }\n  @Override\n  public int getFetchSize() throws SQLException {\n    throw new SQLException(\"Operation not supported!!!!\");\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#executeUpdate(java.lang.String)\n   */\n  @Override\n  public int executeUpdate(String s) throws SQLException {\n    throw new SQLException(\"Operation not supported\");\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#addBatch(java.lang.String)\n   */\n  @Override\n  public void addBatch(String s) throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#clearBatch()\n   */\n  @Override\n  public void clearBatch() throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#executeBatch()\n   */\n  @Override\n  public int[] executeBatch() throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#getMoreResults(int)\n   */\n  @Override\n  public boolean getMoreResults(int i) throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  @Override\n  public ResultSet getGeneratedKeys() throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#executeUpdate(java.lang.String, int)\n   */\n  @Override\n  public int executeUpdate(String s, int i) throws SQLException {\n    throw new SQLException(\"Operation not supported\");\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#executeUpdate(java.lang.String, int[])\n   */\n  @Override\n  public int executeUpdate(String s, int[] ints) throws SQLException {\n    throw new SQLException(\"Operation not supported\");\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#executeUpdate(java.lang.String, java.lang.String[])\n   */\n  @Override\n  public int executeUpdate(String s, String[] strings) throws SQLException {\n    throw new SQLException(\"Operation not supported\");\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#execute(java.lang.String, int)\n   */\n  @Override\n  public boolean execute(String s, int i) throws SQLException {\n    throw new SQLException(\"Operation not supported\");\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#execute(java.lang.String, int[])\n   */\n  @Override\n  public boolean execute(String s, int[] ints) throws SQLException {\n    throw new SQLException(\"Operation not supported\");\n  }\n  /*\n   * (non-Javadoc)\n   *\n   * @see java.sql.Statement#execute(java.lang.String, java.lang.String[])\n   */\n  @Override\n  public boolean execute(String s, String[] strings) throws SQLException {\n    throw new SQLException(\"Operation not supported\");\n  }\n  @Override\n  public int getResultSetHoldability() throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  @Override\n  public void setPoolable(boolean b) throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  @Override\n  public boolean isPoolable() throws SQLException {\n    return false;\n  }\n  /**\n   * Close on completion.\n   *\n   * @throws SQLException the SQL exception\n   */\n  public void closeOnCompletion() throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  public boolean isCloseOnCompletion() throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  @Override\n  public int getMaxFieldSize() throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  @Override\n  public void setMaxFieldSize(int i) throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  @Override\n  public int getMaxRows() throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  @Override\n  public void setMaxRows(int i) throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  @Override\n  public void setEscapeProcessing(boolean b) throws SQLException {\n    throw new SQLException(\"Operation not supported!!!\");\n  }\n  @Override<fim_middle>// class below has no smell\n"}