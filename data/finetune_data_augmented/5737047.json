{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\npackage org.apache.storm.hdfs.bolt.format;\n\nimport java.net.UnknownHostException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Map;\nimport org.apache.storm.task.TopologyContext;\nimport org.apache.storm.utils.Utils;\n\npublic class SimpleFileNameFormat implements FileNameFormat {\n\n    private static final long serialVersionUID = 1L;\n\n    private String componentId;\n    private int taskId;\n    private String host;\n    private String path = \"/storm\";\n    private String name = \"$TIME.$NUM.txt\";\n    private String timeFormat = \"yyyyMMddHHmmss\";\n\n    @Override\n    public String getName(long rotation, long timeStamp) {\n        // compile parameters\n        SimpleDateFormat dateFormat = new SimpleDateFormat(timeFormat);\n        String ret = name\n            .replace(\"$TIME\", dateFormat.format(new Date(timeStamp)))\n            .replace(\"$NUM\", String.valueOf(rotation))\n            .replace(\"$HOST\", host)\n            .replace(\"$COMPONENT\", componentId)\n            .replace(\"$TASK\", String.valueOf(taskId));\n        return ret;\n    }\n\n    @Override\n    public String getPath() {\n        return path;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void prepare(Map<String, Object> conf, TopologyContext topologyContext) {\n        this.componentId = topologyContext.getThisComponentId();\n        this.taskId = topologyContext.getThisTaskId();\n        try {\n            this.host = Utils.localHostname();\n        } catch (UnknownHostException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public SimpleFileNameFormat withPath(String path) {\n        this.path = path;\n        return this;\n    }\n\n    /**\n     * support parameters:<br/>\n     * $TIME - current time. use <code>withTimeFormat</code> to format.<br/>\n     * $NUM - rotation number<br/>\n     * $HOST - local host name<br/>\n     * $COMPONENT - component id<br/>\n     * $TASK - task id<br/>\n     *\n     * @param name\n     *            file name\n     * @return\n     */\n    public SimpleFileNameFormat withName(String name) {\n        this.name = name;\n        return this;\n    }\n\n<fim_suffix>    public SimpleFileNameFormat withTimeFormat(String timeFormat) {\n        //check format\n        try {\n            new SimpleDateFormat(timeFormat);\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"invalid timeFormat: \" + e.getMessage());\n        }\n        this.timeFormat = timeFormat;\n        return this;\n    }\n\n}<fim_middle>// function below has no smell\n"}