{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sis.internal.jaxb.geometry;\n\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.annotation.XmlElementRef;\nimport javax.xml.bind.annotation.adapters.XmlAdapter;\nimport org.opengis.geometry.Geometry;\nimport org.apache.sis.xml.Namespaces;\n\n\n/**\n * JAXB adapter for {@link Geometry}, in order to integrate the value in an element complying with OGC/ISO standard.\n * The geometry element names are usually prefixed by {@code gml:}.\n *\n * <p>The default implementation does almost nothing. The geometry objects will <strong>not</strong>\n * create the expected {@link JAXBElement} type. This class is only a hook to be extended by more\n * specialized subclasses in GML modules.</p>\n *\n * @author  Guilhem Legal (Geomatys)\n * @version 0.3\n * @since   0.3\n * @module\n */\n<fim_suffix>public class GM_Object extends XmlAdapter<GM_Object, Geometry> {\n    /**\n     * The Geometry value covered by a {@code gml:**} element.\n     */\n    @XmlElementRef(name = \"AbstractGeometry\", namespace = Namespaces.GML, type = JAXBElement.class)\n    protected JAXBElement<? extends Geometry> geometry;\n\n    /**\n     * Empty constructor for JAXB and subclasses only.\n     */\n    public GM_Object() {\n    }\n\n    /**\n     * Converts an adapter read from an XML stream to the GeoAPI interface which will\n     * contains this value. JAXB calls automatically this method at unmarshalling time.\n     *\n     * @param  value  the adapter for a geometry value.\n     * @return an instance of the GeoAPI interface which represents the geometry value.\n     */\n    @Override\n    public final Geometry unmarshal(final GM_Object value) {\n        if (value != null) {\n            final JAXBElement<? extends Geometry> g = value.geometry;\n            if (g != null) {\n                return g.getValue();\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Converts a GeoAPI interface to the appropriate adapter for the way it will be\n     * marshalled into an XML file or stream. JAXB calls automatically this method at\n     * marshalling time.\n     *\n     * @param  value  the geometry value, here the interface.\n     * @return the adapter for the given value.\n     */\n    @Override\n    public final GM_Object marshal(final Geometry value) {\n        if (value == null) {\n            return null;\n        }\n        return wrap(value);\n    }\n\n    /**\n     * Returns the geometry value to be covered by a {@code gml:**} element.\n     * The default implementation returns {@code null} if all cases. Subclasses\n     * must override this method in order to provide useful marshalling.\n     *\n     * @param  value  the value to marshal.\n     * @return the adapter which covers the geometry value.\n     */\n    protected GM_Object wrap(Geometry value) {\n        return null;\n    }\n}<fim_middle>// class below has no smell\n"}