{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.kafka.common;\n\n/**\n * This is used to describe per-partition state in the MetadataResponse.\n */\npublic class PartitionInfo {\n    private final String topic;\n    private final int partition;\n    private final Node leader;\n    private final Node[] replicas;\n    private final Node[] inSyncReplicas;\n    private final Node[] offlineReplicas;\n\n    // Used only by tests\n    public PartitionInfo(String topic, int partition, Node leader, Node[] replicas, Node[] inSyncReplicas) {\n        this(topic, partition, leader, replicas, inSyncReplicas, new Node[0]);\n    }\n\n    public PartitionInfo(String topic,\n                         int partition,\n                         Node leader,\n                         Node[] replicas,\n                         Node[] inSyncReplicas,\n                         Node[] offlineReplicas) {\n        this.topic = topic;\n        this.partition = partition;\n        this.leader = leader;\n        this.replicas = replicas;\n        this.inSyncReplicas = inSyncReplicas;\n        this.offlineReplicas = offlineReplicas;\n    }\n\n    /**\n     * The topic name\n     */\n    public String topic() {\n        return topic;\n    }\n\n    /**\n     * The partition id\n     */\n    public int partition() {\n        return partition;\n    }\n\n    /**\n     * The node id of the node currently acting as a leader for this partition or null if there is no leader\n     */\n    public Node leader() {\n        return leader;\n    }\n\n    /**\n     * The complete set of replicas for this partition regardless of whether they are alive or up-to-date\n     */\n    public Node[] replicas() {\n        return replicas;\n    }\n\n    /**\n     * The subset of the replicas that are in sync, that is caught-up to the leader and ready to take over as leader if\n     * the leader should fail\n     */\n    public Node[] inSyncReplicas() {\n        return inSyncReplicas;\n    }\n\n    /**\n     * The subset of the replicas that are offline\n     */\n    public Node[] offlineReplicas() {\n        return offlineReplicas;\n    }\n\n<fim_suffix>    @Override\n    public String toString() {\n        return String.format(\"Partition(topic = %s, partition = %d, leader = %s, replicas = %s, isr = %s, offlineReplicas = %s)\",\n                             topic,\n                             partition,\n                             leader == null ? \"none\" : leader.idString(),\n                             formatNodeIds(replicas),\n                             formatNodeIds(inSyncReplicas),\n                             formatNodeIds(offlineReplicas));\n    }\n\n    /* Extract the node ids from each item in the array and format for display */\n    private String formatNodeIds(Node[] nodes) {\n        StringBuilder b = new StringBuilder(\"[\");\n        if (nodes != null) {\n            for (int i = 0; i < nodes.length; i++) {\n                b.append(nodes[i].idString());\n                if (i < nodes.length - 1)\n                    b.append(',');\n            }\n        }\n        b.append(\"]\");\n        return b.toString();\n    }\n\n}<fim_middle>// function below has no smell\n"}