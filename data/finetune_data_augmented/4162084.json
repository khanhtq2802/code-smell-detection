{"text": "<fim_prefix>    public void deleteObject(String objectId, Boolean allVersions, String user) {\n        StoredObject obj = fStoredObjectMap.get(objectId);\n        if (null == obj) {\n            throw new CmisObjectNotFoundException(\"Cannot delete object with id  \" + objectId\n                    + \". Object does not exist.\");\n        }\n        if (obj instanceof FolderImpl) {\n            deleteFolder(objectId, user);\n        } else if (obj instanceof DocumentVersion) {\n            DocumentVersion vers = (DocumentVersion) obj;\n            VersionedDocument parentDoc = vers.getParentDocument();\n            boolean otherVersionsExists;\n            if (allVersions != null && allVersions) {\n                otherVersionsExists = false;\n                List<DocumentVersion> allVers = parentDoc.getAllVersions();\n                for (DocumentVersion ver : allVers) {\n                    fStoredObjectMap.remove(ver.getId());\n                }\n            } else {\n                fStoredObjectMap.remove(objectId);\n                otherVersionsExists = parentDoc.deleteVersion(vers);\n            }\n            if (!otherVersionsExists) {\n                fStoredObjectMap.remove(parentDoc.getId());\n            }\n        } else {\n            fStoredObjectMap.remove(objectId);\n        }\n    }\n    public String storeObject(StoredObject so) {\n        String id = so.getId();\n        // check if update or create\n        if (null == id) {\n            id = getNextId().toString();\n        }\n        fStoredObjectMap.put(id, so);\n        return id;\n    }\n    StoredObject getObject(String id) {\n        return fStoredObjectMap.get(id);\n    }\n    void removeObject(String id) {\n        fStoredObjectMap.remove(id);\n    }\n    public Set<String> getIds() {\n        Set<String> entries = fStoredObjectMap.keySet();\n        return entries;\n    }\n    /**\n     * Clear repository and remove all data.\n     */\n    @Override\n    public void clear() {\n        lock();\n        fStoredObjectMap.clear();\n        storeObject(fRootFolder);\n        unlock();\n    }\n    @Override\n    public long getObjectCount() {\n        return fStoredObjectMap.size();\n    }\n    // /////////////////////////////////////////\n    // private helper methods\n    private void createRootFolder() {\n        FolderImpl rootFolder = new FolderImpl();\n        rootFolder.setName(\"RootFolder\");\n        rootFolder.setParentId(null);\n        rootFolder.setTypeId(BaseTypeId.CMIS_FOLDER.value());\n        rootFolder.setCreatedBy(\"Admin\");\n        rootFolder.setModifiedBy(\"Admin\");\n        rootFolder.setModifiedAtNow();\n        rootFolder.setRepositoryId(fRepositoryId);\n        rootFolder.setAclId(addAcl(InMemoryAcl.getDefaultAcl()));\n        String id = storeObject(rootFolder);\n        rootFolder.setId(id);\n        fRootFolder = rootFolder;\n    }\n    @Override\n    public Document createDocument(Map<String, PropertyData<?>> propMap, String user, Folder folder,\n            ContentStream contentStream, List<String> policies, Acl addACEs, Acl removeACEs) {\n        String name = (String) propMap.get(PropertyIds.NAME).getFirstValue();\n        DocumentImpl doc = new DocumentImpl();\n        doc.createSystemBasePropertiesWhenCreated(propMap, user);\n        doc.setCustomProperties(propMap);\n        doc.setRepositoryId(fRepositoryId);\n        doc.setName(name);\n        if (null != folder) {\n            if (hasChild(folder, name)) {\n                throw new CmisNameConstraintViolationException(\"Cannot create document an object with name \" + name\n                        + \" already exists in folder \" + getFolderPath(folder.getId()));\n            }\n            doc.addParentId(folder.getId());\n        }\n        ContentStream content = setContent(doc, contentStream);\n        doc.setContent(content);\n        int aclId = getAclId(((FolderImpl) folder), addACEs, removeACEs);\n        doc.setAclId(aclId);\n        if (null != policies) {\n            doc.setAppliedPolicies(policies);\n        }\n        String id = storeObject(doc);\n        doc.setId(id);\n        applyAcl(doc, addACEs, removeACEs);\n        return doc;\n    }\n    @Override\n    public StoredObject createItem(String name, Map<String, PropertyData<?>> propMap, String user, Folder folder,\n            List<String> policies, Acl addACEs, Acl removeACEs) {\n        ItemImpl item = new ItemImpl();\n        item.createSystemBasePropertiesWhenCreated(propMap, user);\n        item.setCustomProperties(propMap);\n        item.setRepositoryId(fRepositoryId);\n        item.setName(name);\n        if (null != folder) {\n            if (hasChild(folder, name)) {\n                throw new CmisNameConstraintViolationException(\"Cannot create document an object with name \" + name\n                        + \" already exists in folder \" + getFolderPath(folder.getId()));\n            }\n            item.addParentId(folder.getId());\n        }\n        if (null != policies) {\n            item.setAppliedPolicies(policies);\n        }\n        int aclId = getAclId(((FolderImpl) folder), addACEs, removeACEs);\n        item.setAclId(aclId);\n        String id = storeObject(item);\n        item.setId(id);\n        applyAcl(item, addACEs, removeACEs);\n        return item;\n    }\n    @Override\n    public DocumentVersion createVersionedDocument(String name, Map<String, PropertyData<?>> propMap, String user,\n            Folder folder, List<String> policies, Acl addACEs, Acl removeACEs, ContentStream contentStream,\n            VersioningState versioningState) {\n        VersionedDocumentImpl doc = new VersionedDocumentImpl();\n        doc.createSystemBasePropertiesWhenCreated(propMap, user);\n        doc.setCustomProperties(propMap);\n        doc.setRepositoryId(fRepositoryId);\n        doc.setName(name);\n        String id = storeObject(doc);\n        doc.setId(id);\n        DocumentVersion version = doc.addVersion(versioningState, user);\n        setContent(version, contentStream);\n        version.createSystemBasePropertiesWhenCreated(propMap, user);\n        version.setCustomProperties(propMap);\n        if (null != folder) {\n            if (hasChild(folder, name)) {\n                throw new CmisNameConstraintViolationException(\"Cannot create document an object with name \" + name\n                        + \" already exists in folder \" + getFolderPath(folder.getId()));\n            }\n            doc.addParentId(folder.getId());\n        }\n        int aclId = getAclId(((FolderImpl) folder), addACEs, removeACEs);\n        doc.setAclId(aclId);\n        if (null != policies) {\n            doc.setAppliedPolicies(policies);\n        }\n        id = storeObject(version);\n        version.setId(id);\n        applyAcl(doc, addACEs, removeACEs);\n        return version;\n    }\n    @Override\n    public Folder createFolder(String name, Map<String, PropertyData<?>> propMap, String user, Folder parent,\n            List<String> policies, Acl addACEs, Acl removeACEs) {\n        if (null == parent) {\n            throw new CmisInvalidArgumentException(\"Cannot create root folder.\");\n        } else if (hasChild(parent, name)) {\n            throw new CmisNameConstraintViolationException(\n                    \"Cannot create folder, this name already exists in parent folder.\");\n        }\n        FolderImpl folder = new FolderImpl(name, parent.getId());\n        if (null != propMap) {\n            folder.createSystemBasePropertiesWhenCreated(propMap, user);\n            folder.setCustomProperties(propMap);\n        }\n        folder.setRepositoryId(fRepositoryId);\n        int aclId = getAclId(((FolderImpl) parent), addACEs, removeACEs);\n        folder.setAclId(aclId);\n        if (null != policies) {\n            folder.setAppliedPolicies(policies);\n        }\n        String id = storeObject(folder);\n        folder.setId(id);\n        applyAcl(folder, addACEs, removeACEs);\n        return folder;\n    }\n    public Folder createFolder(String name) {\n        Folder folder = new FolderImpl(name, null);\n        folder.setRepositoryId(fRepositoryId);\n        return folder;\n    }\n<fim_suffix>    @Override\n    public StoredObject createPolicy(String name, String policyText, Map<String, PropertyData<?>> propMap, String user,\n            Acl addACEs, Acl removeACEs) {\n        PolicyImpl policy = new PolicyImpl();\n        policy.createSystemBasePropertiesWhenCreated(propMap, user);\n        policy.setCustomProperties(propMap);\n        policy.setRepositoryId(fRepositoryId);\n        policy.setName(name);\n        policy.setPolicyText(policyText);\n        String id = storeObject(policy);\n        policy.setId(id);\n        applyAcl(policy, addACEs, removeACEs);\n        return policy;\n    }<fim_middle>// function below has no smell\n"}