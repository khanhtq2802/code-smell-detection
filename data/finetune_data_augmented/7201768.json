{"text": "<fim_prefix>                client.post(\n                        ib,\n                        interceptedRequest.getFailoverDataGuardAssociationDetails(),\n                        interceptedRequest,\n                        onSuccess,\n                        onError);\n        if (this.authenticationDetailsProvider\n                instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {\n            return new com.oracle.bmc.util.internal.RefreshAuthTokenTransformingFuture<\n                    javax.ws.rs.core.Response, FailoverDataGuardAssociationResponse>(\n                    responseFuture,\n                    transformer,\n                    (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)\n                            this.authenticationDetailsProvider,\n                    new com.google.common.base.Supplier<\n                            java.util.concurrent.Future<javax.ws.rs.core.Response>>() {\n                        @Override\n                        public java.util.concurrent.Future<javax.ws.rs.core.Response> get() {\n                            return client.post(\n                                    ib,\n                                    interceptedRequest.getFailoverDataGuardAssociationDetails(),\n                                    interceptedRequest,\n                                    onSuccess,\n                                    onError);\n                        }\n                    });\n        } else {\n            return new com.oracle.bmc.util.internal.TransformingFuture<>(\n                    responseFuture, transformer);\n        }\n    }\n    @Override\n    public java.util.concurrent.Future<GenerateAutonomousDataWarehouseWalletResponse>\n            generateAutonomousDataWarehouseWallet(\n                    final GenerateAutonomousDataWarehouseWalletRequest request,\n                    final com.oracle.bmc.responses.AsyncHandler<\n                                    GenerateAutonomousDataWarehouseWalletRequest,\n                                    GenerateAutonomousDataWarehouseWalletResponse>\n                            handler) {\n        LOG.trace(\"Called async generateAutonomousDataWarehouseWallet\");\n        final GenerateAutonomousDataWarehouseWalletRequest interceptedRequest =\n                GenerateAutonomousDataWarehouseWalletConverter.interceptRequest(request);\n        final com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                GenerateAutonomousDataWarehouseWalletConverter.fromRequest(\n                        client, interceptedRequest);\n        final com.google.common.base.Function<\n                        javax.ws.rs.core.Response, GenerateAutonomousDataWarehouseWalletResponse>\n                transformer = GenerateAutonomousDataWarehouseWalletConverter.fromResponse();\n        com.oracle.bmc.responses.AsyncHandler<\n                        GenerateAutonomousDataWarehouseWalletRequest,\n                        GenerateAutonomousDataWarehouseWalletResponse>\n                handlerToUse = handler;\n        if (handler != null\n                && this.authenticationDetailsProvider\n                        instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {\n            handlerToUse =\n                    new com.oracle.bmc.util.internal.RefreshAuthTokenWrappingAsyncHandler<\n                            GenerateAutonomousDataWarehouseWalletRequest,\n                            GenerateAutonomousDataWarehouseWalletResponse>(\n                            (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)\n                                    this.authenticationDetailsProvider,\n                            handler) {\n                        @Override\n                        public void retryCall() {\n                            final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response>\n                                    onSuccess =\n                                            new com.oracle.bmc.http.internal.SuccessConsumer<>(\n                                                    this, transformer, interceptedRequest);\n                            final com.oracle.bmc.util.internal.Consumer<Throwable> onError =\n                                    new com.oracle.bmc.http.internal.ErrorConsumer<>(\n                                            this, interceptedRequest);\n                            client.post(\n                                    ib,\n                                    interceptedRequest\n                                            .getGenerateAutonomousDataWarehouseWalletDetails(),\n                                    interceptedRequest,\n                                    onSuccess,\n                                    onError);\n                        }\n                    };\n        }\n        final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response> onSuccess =\n                (handler == null)\n                        ? null\n                        : new com.oracle.bmc.http.internal.SuccessConsumer<>(\n                                handlerToUse, transformer, interceptedRequest);\n        final com.oracle.bmc.util.internal.Consumer<Throwable> onError =\n                (handler == null)\n                        ? null\n                        : new com.oracle.bmc.http.internal.ErrorConsumer<>(\n                                handlerToUse, interceptedRequest);\n        java.util.concurrent.Future<javax.ws.rs.core.Response> responseFuture =\n                client.post(\n                        ib,\n                        interceptedRequest.getGenerateAutonomousDataWarehouseWalletDetails(),\n                        interceptedRequest,\n                        onSuccess,\n                        onError);\n        if (this.authenticationDetailsProvider\n                instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {\n            return new com.oracle.bmc.util.internal.RefreshAuthTokenTransformingFuture<\n                    javax.ws.rs.core.Response, GenerateAutonomousDataWarehouseWalletResponse>(\n                    responseFuture,\n                    transformer,\n                    (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)\n                            this.authenticationDetailsProvider,\n                    new com.google.common.base.Supplier<\n                            java.util.concurrent.Future<javax.ws.rs.core.Response>>() {\n                        @Override\n                        public java.util.concurrent.Future<javax.ws.rs.core.Response> get() {\n                            return client.post(\n                                    ib,\n                                    interceptedRequest\n                                            .getGenerateAutonomousDataWarehouseWalletDetails(),\n                                    interceptedRequest,\n                                    onSuccess,\n                                    onError);\n                        }\n                    });\n        } else {\n            return new com.oracle.bmc.util.internal.TransformingFuture<>(\n                    responseFuture, transformer);\n        }\n    }\n<fim_suffix>    @Override\n    public java.util.concurrent.Future<GenerateAutonomousDatabaseWalletResponse>\n            generateAutonomousDatabaseWallet(\n                    final GenerateAutonomousDatabaseWalletRequest request,\n                    final com.oracle.bmc.responses.AsyncHandler<\n                                    GenerateAutonomousDatabaseWalletRequest,\n                                    GenerateAutonomousDatabaseWalletResponse>\n                            handler) {\n        LOG.trace(\"Called async generateAutonomousDatabaseWallet\");\n        final GenerateAutonomousDatabaseWalletRequest interceptedRequest =\n                GenerateAutonomousDatabaseWalletConverter.interceptRequest(request);\n        final com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                GenerateAutonomousDatabaseWalletConverter.fromRequest(client, interceptedRequest);\n        final com.google.common.base.Function<\n                        javax.ws.rs.core.Response, GenerateAutonomousDatabaseWalletResponse>\n                transformer = GenerateAutonomousDatabaseWalletConverter.fromResponse();\n        com.oracle.bmc.responses.AsyncHandler<\n                        GenerateAutonomousDatabaseWalletRequest,\n                        GenerateAutonomousDatabaseWalletResponse>\n                handlerToUse = handler;\n        if (handler != null\n                && this.authenticationDetailsProvider\n                        instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {\n            handlerToUse =\n                    new com.oracle.bmc.util.internal.RefreshAuthTokenWrappingAsyncHandler<\n                            GenerateAutonomousDatabaseWalletRequest,\n                            GenerateAutonomousDatabaseWalletResponse>(\n                            (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)\n                                    this.authenticationDetailsProvider,\n                            handler) {\n                        @Override\n                        public void retryCall() {\n                            final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response>\n                                    onSuccess =\n                                            new com.oracle.bmc.http.internal.SuccessConsumer<>(\n                                                    this, transformer, interceptedRequest);\n                            final com.oracle.bmc.util.internal.Consumer<Throwable> onError =\n                                    new com.oracle.bmc.http.internal.ErrorConsumer<>(\n                                            this, interceptedRequest);\n                            client.post(\n                                    ib,\n                                    interceptedRequest.getGenerateAutonomousDatabaseWalletDetails(),\n                                    interceptedRequest,\n                                    onSuccess,\n                                    onError);\n                        }\n                    };\n        }\n        final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response> onSuccess =\n                (handler == null)\n                        ? null\n                        : new com.oracle.bmc.http.internal.SuccessConsumer<>(\n                                handlerToUse, transformer, interceptedRequest);\n        final com.oracle.bmc.util.internal.Consumer<Throwable> onError =\n                (handler == null)\n                        ? null\n                        : new com.oracle.bmc.http.internal.ErrorConsumer<>(\n                                handlerToUse, interceptedRequest);\n        java.util.concurrent.Future<javax.ws.rs.core.Response> responseFuture =\n                client.post(\n                        ib,\n                        interceptedRequest.getGenerateAutonomousDatabaseWalletDetails(),\n                        interceptedRequest,\n                        onSuccess,\n                        onError);\n        if (this.authenticationDetailsProvider\n                instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {\n            return new com.oracle.bmc.util.internal.RefreshAuthTokenTransformingFuture<\n                    javax.ws.rs.core.Response, GenerateAutonomousDatabaseWalletResponse>(\n                    responseFuture,\n                    transformer,\n                    (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)\n                            this.authenticationDetailsProvider,\n                    new com.google.common.base.Supplier<\n                            java.util.concurrent.Future<javax.ws.rs.core.Response>>() {\n                        @Override\n                        public java.util.concurrent.Future<javax.ws.rs.core.Response> get() {\n                            return client.post(\n                                    ib,\n                                    interceptedRequest.getGenerateAutonomousDatabaseWalletDetails(),\n                                    interceptedRequest,\n                                    onSuccess,\n                                    onError);\n                        }\n                    });\n        } else {\n            return new com.oracle.bmc.util.internal.TransformingFuture<>(\n                    responseFuture, transformer);\n        }\n    }<fim_middle>// function below is long method\n"}