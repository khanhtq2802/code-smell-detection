{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.jackrabbit.oak.spi.commit;\n\nimport static org.apache.jackrabbit.oak.commons.PathUtils.concat;\n\nimport com.google.common.base.Function;\nimport org.apache.jackrabbit.oak.api.CommitFailedException;\nimport org.apache.jackrabbit.oak.api.PropertyState;\nimport org.apache.jackrabbit.oak.spi.state.NodeState;\nimport org.jetbrains.annotations.Nullable;\nimport org.slf4j.Logger;\n\n/**\n * This {@code Editor} instance logs invocations to the logger\n * passed to its constructor after each 10000 calls to it\n * {@code enter()} method.\n */\npublic class ProgressNotificationEditor implements Editor {\n    private final Editor editor;\n    private final String path;\n    private final Function<String, Void> onProgress;\n\n    @Nullable\n    public static Editor wrap(@Nullable Editor editor, final Logger logger, final String message) {\n        if (editor != null && !(editor instanceof ProgressNotificationEditor)) {\n            return new ProgressNotificationEditor(editor, \"/\", new Function<String, Void>() {\n                int count;\n\n                @Nullable\n                @Override\n                public Void apply(String path) {\n                    if (++count % 10000 == 0) {\n                        logger.info(message + \" Traversed #\" + count + ' ' + path);\n                    }\n                    return null;\n                }\n            });\n        }\n        return editor;\n    }\n\n<fim_suffix>    private ProgressNotificationEditor(Editor editor, String path, Function<String, Void> onProgress) {\n        this.editor = editor;\n        this.path = path;\n        this.onProgress = onProgress;\n    }\n\n    @Override\n    public void enter(NodeState before, NodeState after) throws CommitFailedException {\n        onProgress.apply(path);\n        editor.enter(before, after);\n    }\n\n    @Override\n    public void leave(NodeState before, NodeState after) throws CommitFailedException {\n        editor.leave(before, after);\n    }\n\n    @Override\n    public void propertyAdded(PropertyState after) throws CommitFailedException {\n        editor.propertyAdded(after);\n    }\n\n    @Override\n    public void propertyChanged(PropertyState before, PropertyState after) throws CommitFailedException {\n        editor.propertyChanged(before, after);\n    }\n\n    @Override\n    public void propertyDeleted(PropertyState before) throws CommitFailedException {\n        editor.propertyDeleted(before);\n    }\n\n    @Override\n    public Editor childNodeAdded(String name, NodeState after) throws CommitFailedException {\n        return createChildEditor(editor.childNodeAdded(name, after), name);\n    }\n\n    @Override\n    public Editor childNodeChanged(String name, NodeState before, NodeState after) throws CommitFailedException {\n        return createChildEditor(editor.childNodeChanged(name, before, after), name);\n    }\n\n    @Override\n    public Editor childNodeDeleted(String name, NodeState before) throws CommitFailedException {\n        return createChildEditor(editor.childNodeDeleted(name, before), name);\n    }\n\n    private ProgressNotificationEditor createChildEditor(Editor editor, String name) {\n        if (editor == null) {\n            return null;\n        } else {\n            return new ProgressNotificationEditor(editor, concat(path, name), onProgress);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}