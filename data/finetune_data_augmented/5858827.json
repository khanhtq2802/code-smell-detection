{"text": "<fim_prefix>package org.apache.velocity.util.introspection;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport java.lang.reflect.Method;\n\n/**\n * Chainable Uberspector that checks for deprecated method calls. It does that by checking if the returned\n * method has a Deprecated annotation. Because this is a chainable uberspector, it has to re-get the method using a\n * default introspector, which is not safe; future uberspectors might not be able to return a precise method name, or a\n * method of the original target object.\n *\n * Borrowed from the XWiki project.\n *\n * @since 2.0\n * @version $Id:$\n * @see ChainableUberspector\n */\npublic class DeprecatedCheckUberspector extends AbstractChainableUberspector implements Uberspect\n{\n<fim_suffix>    @Override\n    public void init()\n    {\n        super.init();\n        this.introspector = new Introspector(this.log);\n    }\n\n    @Override\n    public VelMethod getMethod(Object obj, String methodName, Object[] args, Info i)\n    {\n        VelMethod method = super.getMethod(obj, methodName, args, i);\n        if (method != null) {\n            Method m = this.introspector.getMethod(obj.getClass(), method.getMethodName(), args);\n            if (m != null\n                && (m.isAnnotationPresent(Deprecated.class)\n                    || m.getDeclaringClass().isAnnotationPresent(Deprecated.class)\n                    || obj.getClass().isAnnotationPresent(Deprecated.class))) {\n                logWarning(\"method\", obj, method.getMethodName(), i);\n            }\n        }\n\n        return method;\n    }\n\n    @Override\n    public VelPropertyGet getPropertyGet(Object obj, String identifier, Info i)\n    {\n        VelPropertyGet method = super.getPropertyGet(obj, identifier, i);\n        if (method != null) {\n            Method m = this.introspector.getMethod(obj.getClass(), method.getMethodName(), new Object[] {});\n            if (m != null\n                && (m.isAnnotationPresent(Deprecated.class)\n                    || m.getDeclaringClass().isAnnotationPresent(Deprecated.class)\n                    || obj.getClass().isAnnotationPresent(Deprecated.class))) {\n                logWarning(\"getter\", obj, method.getMethodName(), i);\n            }\n        }\n\n        return method;\n    }\n\n    @Override\n    public VelPropertySet getPropertySet(Object obj, String identifier, Object arg, Info i)\n    {\n        // TODO Auto-generated method stub\n        VelPropertySet method = super.getPropertySet(obj, identifier, arg, i);\n        if (method != null) {\n            Method m = this.introspector.getMethod(obj.getClass(), method.getMethodName(), new Object[] { arg });\n            if (m != null\n                && (m.isAnnotationPresent(Deprecated.class)\n                    || m.getDeclaringClass().isAnnotationPresent(Deprecated.class)\n                    || obj.getClass().isAnnotationPresent(Deprecated.class))) {\n                logWarning(\"setter\", obj, method.getMethodName(), i);\n            }\n        }\n\n        return method;\n    }\n\n    /**\n     * Helper method to log a warning when a deprecation has been found.\n     *\n     * @param deprecationType the type of deprecation (eg \"getter\", \"setter\", \"method\")\n     * @param object the object that has a deprecation\n     * @param methodName the deprecated method's name\n     * @param info a Velocity {@link org.apache.velocity.util.introspection.Info} object containing information about\n     *            where the deprecation was located in the Velocity template file\n     */\n    private void logWarning(String deprecationType, Object object, String methodName, Info info)\n    {\n        this.log.warn(\"Deprecated usage of {} [{}] in {}@{},{}\", deprecationType, object.getClass()\n            .getCanonicalName() + \".\" + methodName, info.getTemplateName(), info.getLine(), info.getColumn());\n    }\n}<fim_middle>// function below has no smell\n"}