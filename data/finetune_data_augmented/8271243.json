{"text": "<fim_prefix>            // PsiInternalSDomain.g:195:2: ( ( (lv_name_0_0= ruleQualifiedName ) ) otherlv_1= '{' ( (lv_elements_2_0= ruleElement ) )* otherlv_3= '}' )\n            {\n            // PsiInternalSDomain.g:195:2: ( ( (lv_name_0_0= ruleQualifiedName ) ) otherlv_1= '{' ( (lv_elements_2_0= ruleElement ) )* otherlv_3= '}' )\n            // PsiInternalSDomain.g:196:3: ( (lv_name_0_0= ruleQualifiedName ) ) otherlv_1= '{' ( (lv_elements_2_0= ruleElement ) )* otherlv_3= '}'\n            {\n            // PsiInternalSDomain.g:196:3: ( (lv_name_0_0= ruleQualifiedName ) )\n            // PsiInternalSDomain.g:197:4: (lv_name_0_0= ruleQualifiedName )\n            {\n            // PsiInternalSDomain.g:197:4: (lv_name_0_0= ruleQualifiedName )\n            // PsiInternalSDomain.g:198:5: lv_name_0_0= ruleQualifiedName\n            {\n            \t\t\t\t\tmarkComposite(elementTypeProvider.getNamespace_NameQualifiedNameParserRuleCall_0_0ElementType());\n            pushFollow(FOLLOW_7);\n            lv_name_0_0=ruleQualifiedName();\n            state._fsp--;\n            \t\t\t\t\tdoneComposite();\n            \t\t\t\t\tif(!current) {\n            \t\t\t\t\t\tassociateWithSemanticElement();\n            \t\t\t\t\t\tcurrent = true;\n            \t\t\t\t\t}\n            }\n            }\n            \t\t\tmarkLeaf(elementTypeProvider.getNamespace_LeftCurlyBracketKeyword_1ElementType());\n            otherlv_1=(Token)match(input,14,FOLLOW_8); \n            \t\t\tdoneLeaf(otherlv_1);\n            // PsiInternalSDomain.g:218:3: ( (lv_elements_2_0= ruleElement ) )*\n            loop4:\n            do {\n                int alt4=2;\n                int LA4_0 = input.LA(1);\n                if ( (LA4_0==RULE_ID||LA4_0==11||(LA4_0>=16 && LA4_0<=17)) ) {\n                    alt4=1;\n                }\n                switch (alt4) {\n            \tcase 1 :\n            \t    // PsiInternalSDomain.g:219:4: (lv_elements_2_0= ruleElement )\n            \t    {\n            \t    // PsiInternalSDomain.g:219:4: (lv_elements_2_0= ruleElement )\n            \t    // PsiInternalSDomain.g:220:5: lv_elements_2_0= ruleElement\n            \t    {\n            \t    \t\t\t\t\tmarkComposite(elementTypeProvider.getNamespace_ElementsElementParserRuleCall_2_0ElementType());\n            \t    pushFollow(FOLLOW_8);\n            \t    lv_elements_2_0=ruleElement();\n            \t    state._fsp--;\n            \t    \t\t\t\t\tdoneComposite();\n            \t    \t\t\t\t\tif(!current) {\n            \t    \t\t\t\t\t\tassociateWithSemanticElement();\n            \t    \t\t\t\t\t\tcurrent = true;\n            \t    \t\t\t\t\t}\n            \t    }\n            \t    }\n            \t    break;\n            \tdefault :\n            \t    break loop4;\n                }\n            } while (true);\n            \t\t\tmarkLeaf(elementTypeProvider.getNamespace_RightCurlyBracketKeyword_3ElementType());\n            otherlv_3=(Token)match(input,15,FOLLOW_2); \n            \t\t\tdoneLeaf(otherlv_3);\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"ruleNamespace\"\n    // $ANTLR start \"entryRuleElement\"\n    // PsiInternalSDomain.g:244:1: entryRuleElement returns [Boolean current=false] : iv_ruleElement= ruleElement EOF ;\n    public final Boolean entryRuleElement() throws RecognitionException {\n        Boolean current = false;\n        Boolean iv_ruleElement = null;\n        try {\n            // PsiInternalSDomain.g:244:49: (iv_ruleElement= ruleElement EOF )\n            // PsiInternalSDomain.g:245:2: iv_ruleElement= ruleElement EOF\n            {\n             markComposite(elementTypeProvider.getElementElementType()); \n            pushFollow(FOLLOW_1);\n            iv_ruleElement=ruleElement();\n            state._fsp--;\n             current =iv_ruleElement; \n            match(input,EOF,FOLLOW_2); \n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"entryRuleElement\"\n    // $ANTLR start \"ruleElement\"\n    // PsiInternalSDomain.g:251:1: ruleElement returns [Boolean current=false] : (this_Namespace_0= ruleNamespace | this_Type_1= ruleType | this_Import_2= ruleImport ) ;\n    public final Boolean ruleElement() throws RecognitionException {\n        Boolean current = false;\n        Boolean this_Namespace_0 = null;\n        Boolean this_Type_1 = null;\n        Boolean this_Import_2 = null;\n        try {\n            // PsiInternalSDomain.g:252:1: ( (this_Namespace_0= ruleNamespace | this_Type_1= ruleType | this_Import_2= ruleImport ) )\n            // PsiInternalSDomain.g:253:2: (this_Namespace_0= ruleNamespace | this_Type_1= ruleType | this_Import_2= ruleImport )\n            {\n            // PsiInternalSDomain.g:253:2: (this_Namespace_0= ruleNamespace | this_Type_1= ruleType | this_Import_2= ruleImport )\n            int alt5=3;\n            switch ( input.LA(1) ) {\n            case RULE_ID:\n                {\n                alt5=1;\n                }\n                break;\n            case 16:\n            case 17:\n                {\n                alt5=2;\n                }\n                break;\n            case 11:\n                {\n                alt5=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 5, 0, input);\n                throw nvae;\n            }\n            switch (alt5) {\n                case 1 :\n                    // PsiInternalSDomain.g:254:3: this_Namespace_0= ruleNamespace\n                    {\n                    \t\t\tmarkComposite(elementTypeProvider.getElement_NamespaceParserRuleCall_0ElementType());\n                    pushFollow(FOLLOW_2);\n                    this_Namespace_0=ruleNamespace();\n                    state._fsp--;\n                    \t\t\tcurrent = this_Namespace_0;\n                    \t\t\tdoneComposite();\n                    }\n                    break;\n                case 2 :\n                    // PsiInternalSDomain.g:263:3: this_Type_1= ruleType\n                    {\n                    \t\t\tmarkComposite(elementTypeProvider.getElement_TypeParserRuleCall_1ElementType());\n                    pushFollow(FOLLOW_2);\n                    this_Type_1=ruleType();\n                    state._fsp--;\n                    \t\t\tcurrent = this_Type_1;\n                    \t\t\tdoneComposite();\n                    }\n                    break;\n                case 3 :\n                    // PsiInternalSDomain.g:272:3: this_Import_2= ruleImport\n                    {\n                    \t\t\tmarkComposite(elementTypeProvider.getElement_ImportParserRuleCall_2ElementType());\n                    pushFollow(FOLLOW_2);\n                    this_Import_2=ruleImport();\n                    state._fsp--;\n                    \t\t\tcurrent = this_Import_2;\n                    \t\t\tdoneComposite();\n                    }\n                    break;\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"ruleElement\"\n    // $ANTLR start \"entryRuleType\"\n    // PsiInternalSDomain.g:284:1: entryRuleType returns [Boolean current=false] : iv_ruleType= ruleType EOF ;\n<fim_suffix>    public final Boolean entryRuleType() throws RecognitionException {\n        Boolean current = false;\n        Boolean iv_ruleType = null;\n        try {\n            // PsiInternalSDomain.g:284:46: (iv_ruleType= ruleType EOF )\n            // PsiInternalSDomain.g:285:2: iv_ruleType= ruleType EOF\n            {\n             markComposite(elementTypeProvider.getTypeElementType()); \n            pushFollow(FOLLOW_1);\n            iv_ruleType=ruleType();\n            state._fsp--;\n             current =iv_ruleType; \n            match(input,EOF,FOLLOW_2); \n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return current;\n    }<fim_middle>// function below has no smell\n"}