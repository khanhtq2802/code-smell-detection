{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.apex.malhar.lib.db;\n\nimport java.io.IOException;\n\nimport com.datatorrent.api.Context.OperatorContext;\nimport com.datatorrent.api.DefaultInputPort;\nimport com.datatorrent.api.annotation.InputPortFieldAnnotation;\nimport com.datatorrent.common.util.BaseOperator;\n\n/**\n * This is the base implementation of an output operator,\n * which writes to a non-transactional store.&nbsp;\n * This operator does not provide the exactly once guarantee.&nbsp;\n * A concrete operator should be created from this skeleton implementation.\n * <p></p>\n * @displayName Abstract Store Output\n * @category Output\n *\n * @param <T> The tuple type\n * @param <S> The store type\n * @since 0.9.3\n */\n<fim_suffix>@org.apache.hadoop.classification.InterfaceStability.Evolving\npublic abstract class AbstractStoreOutputOperator<T, S extends Connectable> extends BaseOperator\n{\n  protected S store;\n\n  /**\n   * The input port on which tuples are received for writing.\n   */\n  @InputPortFieldAnnotation(optional = true)\n  public final transient DefaultInputPort<T> input = new DefaultInputPort<T>()\n  {\n    @Override\n    public void process(T t)\n    {\n      processTuple(t);\n    }\n\n  };\n\n  /**\n   * Gets the store.\n   * @return the store.\n   */\n  public S getStore()\n  {\n    return store;\n  }\n\n  /**\n   * Sets the store.\n   * @param store a {@link Connectable}.\n   */\n  public void setStore(S store)\n  {\n    this.store = store;\n  }\n\n  @Override\n  public void setup(OperatorContext context)\n  {\n    try {\n      store.connect();\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n  @Override\n  public void beginWindow(long windowId)\n  {\n  }\n\n  @Override\n  public void teardown()\n  {\n    try {\n      store.disconnect();\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n  /**\n   * Processes the incoming tuple, presumably store the data in the tuple to the store\n   *\n   * @param tuple a tuple.\n   */\n  public abstract void processTuple(T tuple);\n\n}<fim_middle>// class below is data class\n"}