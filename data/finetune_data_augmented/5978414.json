{"text": "<fim_prefix>/*\n * Copyright 2008-2012 Amazon Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at:\n *\n *    http://aws.amazon.com/apache2.0\n *\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.amazonaws.eclipse.ec2.ui.securitygroups;\nimport java.util.List;\nimport org.eclipse.core.runtime.Status;\nimport org.eclipse.jface.action.Action;\nimport org.eclipse.jface.action.IMenuManager;\nimport org.eclipse.jface.action.Separator;\nimport org.eclipse.jface.dialogs.Dialog;\nimport org.eclipse.jface.viewers.StructuredSelection;\nimport org.eclipse.jface.viewers.Viewer;\nimport org.eclipse.jface.viewers.ViewerComparator;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Display;\nimport org.eclipse.swt.widgets.TreeItem;\nimport org.eclipse.ui.statushandlers.StatusManager;\nimport com.amazonaws.eclipse.core.AwsToolkitCore;\nimport com.amazonaws.eclipse.core.mobileanalytics.AwsToolkitMetricType;\nimport com.amazonaws.eclipse.ec2.Ec2Plugin;\nimport com.amazonaws.eclipse.ec2.ui.SelectionTable;\nimport com.amazonaws.eclipse.explorer.AwsAction;\nimport com.amazonaws.services.ec2.AmazonEC2;\nimport com.amazonaws.services.ec2.model.CreateSecurityGroupRequest;\nimport com.amazonaws.services.ec2.model.DeleteSecurityGroupRequest;\nimport com.amazonaws.services.ec2.model.SecurityGroup;\n/**\n * Selection table containing a list of security groups.\n */\npublic class SecurityGroupSelectionComposite extends SelectionTable {\n    private Action createSecurityGroupAction;\n    private Action deleteSecurityGroupAction;\n    private Action refreshSecurityGroupsAction;\n    private SecurityGroupTableProvider securityGroupTableProvider = new SecurityGroupTableProvider();\n    private PermissionsComposite permissionsComposite;\n    /**\n     * Creates a new security group selection table parented by the specified\n     * composite.\n     *\n     * @param parent\n     *            The parent of this new selection table.\n     */\n    public SecurityGroupSelectionComposite(Composite parent) {\n        super(parent);\n        viewer.setContentProvider(securityGroupTableProvider);\n        viewer.setLabelProvider(securityGroupTableProvider);\n        viewer.setComparator(new SecurityGroupComparator());\n        refreshSecurityGroups();\n    }\n    /**\n     * Sets the optional security group permissions selection table that can be\n     * linked with this security group selection table.\n     *\n     * @param permissionsComposite\n     *            The security group permissions selection table that is linked\n     *            with this security group selection table.\n     */\n    public void setPermissionsComposite(PermissionsComposite permissionsComposite) {\n        this.permissionsComposite = permissionsComposite;\n    }\n    /**\n     * Returns the currently selected security group.\n     *\n     * @return The currently selected security group.\n     */\n    public SecurityGroup getSelectedSecurityGroup() {\n        StructuredSelection selection = (StructuredSelection)viewer.getSelection();\n        return (SecurityGroup)selection.getFirstElement();\n    }\n    /*\n     * Action Accessors\n     */\n    public Action getRefreshSecurityGroupsAction() {\n        return refreshSecurityGroupsAction;\n    }\n    public Action getCreateSecurityGroupAction() {\n        return createSecurityGroupAction;\n    }\n    public Action getDeleteSecurityGroupAction() {\n        return deleteSecurityGroupAction;\n    }\n    /*\n     * SelectionTable Interface\n     */\n    /* (non-Javadoc)\n     * @see com.amazonaws.eclipse.ec2.ui.SelectionTable#createColumns()\n     */\n    @Override\n    protected void createColumns() {\n        newColumn(\"Name\", 20);\n        newColumn(\"Description\", 80);\n    }\n    /* (non-Javadoc)\n     * @see com.amazonaws.eclipse.ec2.ui.SelectionTable#fillContextMenu(org.eclipse.jface.action.IMenuManager)\n     */\n    @Override\n    protected void fillContextMenu(IMenuManager manager) {\n        deleteSecurityGroupAction.setEnabled(getSelectedSecurityGroup() != null);\n        manager.add(refreshSecurityGroupsAction);\n        manager.add(new Separator());\n        manager.add(createSecurityGroupAction);\n        manager.add(deleteSecurityGroupAction);\n    }\n    /* (non-Javadoc)\n     * @see com.amazonaws.eclipse.ec2.ui.SelectionTable#makeActions()\n     */\n    @Override\n    protected void makeActions() {\n        createSecurityGroupAction = new AwsAction(AwsToolkitMetricType.EXPLORER_EC2_NEW_SECURITY_GROUP) {\n            @Override\n            public void doRun() {\n                final CreateSecurityGroupDialog dialog = new CreateSecurityGroupDialog(Display.getCurrent().getActiveShell());\n                if (dialog.open() != Dialog.OK) {\n                    actionCanceled();\n                } else {\n                    new CreateSecurityGroupThread(dialog.getSecurityGroupName(), dialog.getSecurityGroupDescription()).start();\n                    actionSucceeded();\n                }\n                actionFinished();\n            }\n        };\n        createSecurityGroupAction.setText(\"New Group...\");\n        createSecurityGroupAction.setToolTipText(\"Create a new security group\");\n        createSecurityGroupAction.setImageDescriptor(Ec2Plugin.getDefault().getImageRegistry().getDescriptor(\"add\"));\n        deleteSecurityGroupAction = new AwsAction(AwsToolkitMetricType.EXPLORER_EC2_DELETE_SECURITY_GROUP) {\n            @Override\n            public void doRun() {\n                new DeleteSecurityGroupThread(getSelectedSecurityGroup()).start();\n                actionFinished();\n            }\n        };\n        deleteSecurityGroupAction.setText(\"Delete Group\");\n        deleteSecurityGroupAction.setToolTipText(\"Delete security group\");\n        deleteSecurityGroupAction.setImageDescriptor(Ec2Plugin.getDefault().getImageRegistry().getDescriptor(\"remove\"));\n        refreshSecurityGroupsAction = new AwsAction(AwsToolkitMetricType.EXPLORER_EC2_REFRESH_SECURITY_GROUP) {\n            @Override\n            public void doRun() {\n                refreshSecurityGroups();\n                actionFinished();\n            }\n        };\n        refreshSecurityGroupsAction.setText(\"Refresh\");\n        refreshSecurityGroupsAction.setToolTipText(\"Refresh security groups\");\n        refreshSecurityGroupsAction.setImageDescriptor(Ec2Plugin.getDefault().getImageRegistry().getDescriptor(\"refresh\"));\n    }\n    /*\n     * Private Interface\n     */\n<fim_suffix>    private void refreshSecurityGroups() {\n        new RefreshSecurityGroupsThread().start();\n    }\n    private class SecurityGroupComparator extends ViewerComparator {\n        /* (non-Javadoc)\n         * @see org.eclipse.jface.viewers.ViewerComparator#compare(org.eclipse.jface.viewers.Viewer, java.lang.Object, java.lang.Object)\n         */\n        @Override\n        public int compare(Viewer viewer, Object e1, Object e2) {\n            if (!(e1 instanceof SecurityGroup && e2 instanceof SecurityGroup)) {\n                return 0;\n            }\n            SecurityGroup securityGroup1 = (SecurityGroup)e1;\n            SecurityGroup securityGroup2 = (SecurityGroup)e2;\n            return (securityGroup1.getGroupName().compareTo(securityGroup2.getGroupName()));\n        }\n    }\n    /**\n     * Sets the list of security groups to display in the security group table.\n     *\n     * @param securityGroups\n     *            The security groups to display.\n     */\n    private void setInput(final List<SecurityGroup> securityGroups) {\n        Display.getDefault().asyncExec(new Runnable() {\n            @Override\n            public void run() {\n                final SecurityGroup previouslySelectedGroup = getSelectedSecurityGroup();\n                viewer.setInput(securityGroups);\n                if (previouslySelectedGroup != null) {\n                    for (int index = 0; index < viewer.getTree().getItemCount(); index++) {\n                        TreeItem treeItem = viewer.getTree().getItem(index);\n                        SecurityGroup groupDescription = (SecurityGroup)treeItem.getData();\n                        if (groupDescription.getGroupName().equals(previouslySelectedGroup.getGroupName())) {\n                            viewer.getTree().select(treeItem);\n                        }\n                    }\n                }\n                viewer.getTree().getColumn(0).pack();\n                viewer.getTree().layout();\n                layout();\n            }\n        });\n    }\n    /*\n     * Private Thread subclasses for making EC2 service calls\n     */\n    /**\n     * Thread for making an EC2 service call to create a new security group.\n     */\n    private class CreateSecurityGroupThread extends Thread {\n        /** The requested name of the group */\n        private final String name;\n        /** The requested description of the group */\n        private final String description;\n        /**\n         * Creates a new thread ready to be started to create the specified\n         * security group.\n         *\n         * @param name\n         *            The requested name for the new security group.\n         * @param description\n         *            The requested description for the new security group.\n         */\n        public CreateSecurityGroupThread(final String name, final String description) {\n            this.name = name;\n            this.description = description;\n        }\n        /* (non-Javadoc)\n         * @see java.lang.Thread#run()\n         */\n        @Override\n        public void run() {\n            try {\n                AmazonEC2 ec2 = getAwsEc2Client();<fim_middle>// function below has no smell\n"}