{"text": "<fim_prefix>            } catch (org.apache.storm.thrift.transport.TTransportException e) {\n              _LOGGER.error(\"TTransportException writing to internal frame buffer\", e);\n              fb.close();\n            } catch (java.lang.Exception e) {\n              _LOGGER.error(\"Exception writing to internal frame buffer\", e);\n              onError(e);\n            }\n          }\n          public void onError(java.lang.Exception e) {\n            byte msgType = org.apache.storm.thrift.protocol.TMessageType.REPLY;\n            org.apache.storm.thrift.TSerializable msg;\n            cancelBlobUpload_result result = new cancelBlobUpload_result();\n            if (e instanceof AuthorizationException) {\n              result.aze = (AuthorizationException) e;\n              result.set_aze_isSet(true);\n              msg = result;\n            } else if (e instanceof org.apache.storm.thrift.transport.TTransportException) {\n              _LOGGER.error(\"TTransportException inside handler\", e);\n              fb.close();\n              return;\n            } else if (e instanceof org.apache.storm.thrift.TApplicationException) {\n              _LOGGER.error(\"TApplicationException inside handler\", e);\n              msgType = org.apache.storm.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.storm.thrift.TApplicationException)e;\n            } else {\n              _LOGGER.error(\"Exception inside handler\", e);\n              msgType = org.apache.storm.thrift.protocol.TMessageType.EXCEPTION;\n              msg = new org.apache.storm.thrift.TApplicationException(org.apache.storm.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n            } catch (java.lang.Exception ex) {\n              _LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n              fb.close();\n            }\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, cancelBlobUpload_args args, org.apache.storm.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.storm.thrift.TException {\n        iface.cancelBlobUpload(args.session,resultHandler);\n      }\n    }\n    public static class getBlobMeta<I extends AsyncIface> extends org.apache.storm.thrift.AsyncProcessFunction<I, getBlobMeta_args, ReadableBlobMeta> {\n      public getBlobMeta() {\n        super(\"getBlobMeta\");\n      }\n      public getBlobMeta_args getEmptyArgsInstance() {\n        return new getBlobMeta_args();\n      }\n      public org.apache.storm.thrift.async.AsyncMethodCallback<ReadableBlobMeta> getResultHandler(final org.apache.storm.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.storm.thrift.AsyncProcessFunction fcall = this;\n        return new org.apache.storm.thrift.async.AsyncMethodCallback<ReadableBlobMeta>() { \n          public void onComplete(ReadableBlobMeta o) {\n            getBlobMeta_result result = new getBlobMeta_result();\n            result.success = o;\n            try {\n              fcall.sendResponse(fb, result, org.apache.storm.thrift.protocol.TMessageType.REPLY,seqid);\n            } catch (org.apache.storm.thrift.transport.TTransportException e) {\n              _LOGGER.error(\"TTransportException writing to internal frame buffer\", e);\n              fb.close();\n            } catch (java.lang.Exception e) {\n              _LOGGER.error(\"Exception writing to internal frame buffer\", e);\n              onError(e);\n            }\n          }\n          public void onError(java.lang.Exception e) {\n            byte msgType = org.apache.storm.thrift.protocol.TMessageType.REPLY;\n            org.apache.storm.thrift.TSerializable msg;\n            getBlobMeta_result result = new getBlobMeta_result();\n            if (e instanceof AuthorizationException) {\n              result.aze = (AuthorizationException) e;\n              result.set_aze_isSet(true);\n              msg = result;\n            } else if (e instanceof KeyNotFoundException) {\n              result.knf = (KeyNotFoundException) e;\n              result.set_knf_isSet(true);\n              msg = result;\n            } else if (e instanceof org.apache.storm.thrift.transport.TTransportException) {\n              _LOGGER.error(\"TTransportException inside handler\", e);\n              fb.close();\n              return;\n            } else if (e instanceof org.apache.storm.thrift.TApplicationException) {\n              _LOGGER.error(\"TApplicationException inside handler\", e);\n              msgType = org.apache.storm.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.storm.thrift.TApplicationException)e;\n            } else {\n              _LOGGER.error(\"Exception inside handler\", e);\n              msgType = org.apache.storm.thrift.protocol.TMessageType.EXCEPTION;\n              msg = new org.apache.storm.thrift.TApplicationException(org.apache.storm.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n            } catch (java.lang.Exception ex) {\n              _LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n              fb.close();\n            }\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, getBlobMeta_args args, org.apache.storm.thrift.async.AsyncMethodCallback<ReadableBlobMeta> resultHandler) throws org.apache.storm.thrift.TException {\n        iface.getBlobMeta(args.key,resultHandler);\n      }\n    }\n<fim_suffix>    public static class setBlobMeta<I extends AsyncIface> extends org.apache.storm.thrift.AsyncProcessFunction<I, setBlobMeta_args, Void> {\n      public setBlobMeta() {\n        super(\"setBlobMeta\");\n      }\n      public setBlobMeta_args getEmptyArgsInstance() {\n        return new setBlobMeta_args();\n      }\n      public org.apache.storm.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.storm.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.storm.thrift.AsyncProcessFunction fcall = this;\n        return new org.apache.storm.thrift.async.AsyncMethodCallback<Void>() { \n          public void onComplete(Void o) {\n            setBlobMeta_result result = new setBlobMeta_result();\n            try {\n              fcall.sendResponse(fb, result, org.apache.storm.thrift.protocol.TMessageType.REPLY,seqid);\n            } catch (org.apache.storm.thrift.transport.TTransportException e) {\n              _LOGGER.error(\"TTransportException writing to internal frame buffer\", e);\n              fb.close();\n            } catch (java.lang.Exception e) {\n              _LOGGER.error(\"Exception writing to internal frame buffer\", e);\n              onError(e);\n            }\n          }\n          public void onError(java.lang.Exception e) {\n            byte msgType = org.apache.storm.thrift.protocol.TMessageType.REPLY;\n            org.apache.storm.thrift.TSerializable msg;\n            setBlobMeta_result result = new setBlobMeta_result();\n            if (e instanceof AuthorizationException) {\n              result.aze = (AuthorizationException) e;\n              result.set_aze_isSet(true);\n              msg = result;\n            } else if (e instanceof KeyNotFoundException) {\n              result.knf = (KeyNotFoundException) e;\n              result.set_knf_isSet(true);\n              msg = result;\n            } else if (e instanceof org.apache.storm.thrift.transport.TTransportException) {\n              _LOGGER.error(\"TTransportException inside handler\", e);\n              fb.close();\n              return;\n            } else if (e instanceof org.apache.storm.thrift.TApplicationException) {\n              _LOGGER.error(\"TApplicationException inside handler\", e);\n              msgType = org.apache.storm.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.storm.thrift.TApplicationException)e;\n            } else {\n              _LOGGER.error(\"Exception inside handler\", e);\n              msgType = org.apache.storm.thrift.protocol.TMessageType.EXCEPTION;\n              msg = new org.apache.storm.thrift.TApplicationException(org.apache.storm.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n            } catch (java.lang.Exception ex) {\n              _LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n              fb.close();\n            }\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, setBlobMeta_args args, org.apache.storm.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.storm.thrift.TException {\n        iface.setBlobMeta(args.key, args.meta,resultHandler);\n      }\n    }<fim_middle>// class below is blob\n"}