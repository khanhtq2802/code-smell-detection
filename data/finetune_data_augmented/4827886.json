{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\npackage org.apache.isis.core.metamodel.facets.collections.clear;\n\nimport java.lang.reflect.Method;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.isis.core.metamodel.adapter.ObjectAdapter;\nimport org.apache.isis.core.metamodel.facetapi.FacetHolder;\nimport org.apache.isis.core.metamodel.facets.ImperativeFacet;\nimport org.apache.isis.core.metamodel.facets.collections.modify.CollectionClearFacetAbstract;\n\n<fim_suffix>public class CollectionClearFacetViaClearMethod extends CollectionClearFacetAbstract implements ImperativeFacet {\n\n    private final Method method;\n\n    public CollectionClearFacetViaClearMethod(final Method method, final FacetHolder holder) {\n        super(holder);\n        this.method = method;\n    }\n\n    /**\n     * Returns a singleton list of the {@link Method} provided in the\n     * constructor.\n     */\n    @Override\n    public List<Method> getMethods() {\n        return Collections.singletonList(method);\n    }\n\n    @Override\n    public Intent getIntent(final Method method) {\n        return Intent.MODIFY_COLLECTION_ADD;\n    }\n\n    @Override\n    public void clear(final ObjectAdapter owningAdapter) {\n        ObjectAdapter.InvokeUtils.invoke(method, owningAdapter);\n    }\n\n    @Override\n    protected String toStringValues() {\n        return \"method=\" + method;\n    }\n\n    @Override public void appendAttributesTo(final Map<String, Object> attributeMap) {\n        super.appendAttributesTo(attributeMap);\n        ImperativeFacet.Util.appendAttributesTo(this, attributeMap);\n    }\n\n}<fim_middle>// class below has no smell\n"}