{"text": "<fim_prefix>/**\n * Copyright (c) 2018 TypeFox and others.\n * \n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0,\n * or the Eclipse Distribution License v. 1.0 which is available at\n * http://www.eclipse.org/org/documents/edl-v10.php.\n * \n * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause\n */\npackage org.eclipse.lsp4j.adapters;\n\nimport com.google.gson.Gson;\nimport com.google.gson.TypeAdapter;\nimport com.google.gson.TypeAdapterFactory;\nimport com.google.gson.reflect.TypeToken;\nimport com.google.gson.stream.JsonReader;\nimport com.google.gson.stream.JsonToken;\nimport com.google.gson.stream.JsonWriter;\nimport java.io.IOException;\nimport org.eclipse.lsp4j.VersionedTextDocumentIdentifier;\nimport org.eclipse.lsp4j.generator.TypeAdapterImpl;\n\n/**\n * A type adapter for the VersionedTextDocumentIdentifier protocol type.\n */\n@TypeAdapterImpl(VersionedTextDocumentIdentifier.class)\n@SuppressWarnings(\"all\")\npublic class VersionedTextDocumentIdentifierTypeAdapter extends TypeAdapter<VersionedTextDocumentIdentifier> {\n  public static class Factory implements TypeAdapterFactory {\n    public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {\n      if (!VersionedTextDocumentIdentifier.class.isAssignableFrom(typeToken.getRawType())) {\n      \treturn null;\n      }\n      return (TypeAdapter<T>) new VersionedTextDocumentIdentifierTypeAdapter(gson);\n    }\n  }\n  \n<fim_suffix>  protected void writeVersion(final JsonWriter out, final Integer value) throws IOException {\n    if ((value == null)) {\n      final boolean previousSerializeNulls = out.getSerializeNulls();\n      out.setSerializeNulls(true);\n      out.nullValue();\n      out.setSerializeNulls(previousSerializeNulls);\n    } else {\n      out.value(value);\n    }\n  }\n  \n  private final Gson gson;\n  \n  public VersionedTextDocumentIdentifierTypeAdapter(final Gson gson) {\n    this.gson = gson;\n  }\n  \n  public VersionedTextDocumentIdentifier read(final JsonReader in) throws IOException {\n    JsonToken nextToken = in.peek();\n    if (nextToken == JsonToken.NULL) {\n    \treturn null;\n    }\n    \n    VersionedTextDocumentIdentifier result = new VersionedTextDocumentIdentifier();\n    in.beginObject();\n    while (in.hasNext()) {\n    \tString name = in.nextName();\n    \tswitch (name) {\n    \tcase \"version\":\n    \t\tresult.setVersion(readVersion(in));\n    \t\tbreak;\n    \tcase \"uri\":\n    \t\tresult.setUri(readUri(in));\n    \t\tbreak;\n    \tdefault:\n    \t\tin.skipValue();\n    \t}\n    }\n    in.endObject();\n    return result;\n  }\n  \n  protected Integer readVersion(final JsonReader in) throws IOException {\n    return gson.fromJson(in, Integer.class);\n  }\n  \n  protected String readUri(final JsonReader in) throws IOException {\n    return gson.fromJson(in, String.class);\n  }\n  \n  public void write(final JsonWriter out, final VersionedTextDocumentIdentifier value) throws IOException {\n    if (value == null) {\n    \tout.nullValue();\n    \treturn;\n    }\n    \n    out.beginObject();\n    out.name(\"version\");\n    writeVersion(out, value.getVersion());\n    out.name(\"uri\");\n    writeUri(out, value.getUri());\n    out.endObject();\n  }\n  \n  protected void writeUri(final JsonWriter out, final String value) throws IOException {\n    out.value(value);\n  }\n}<fim_middle>// function below has no smell\n"}