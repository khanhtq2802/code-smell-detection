{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.tez.dag.utils;\n\nimport java.lang.reflect.Field;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * A utility class which allows one to dynamically update/change Environment variables\n */\npublic class EnvironmentUpdateUtils {\n\n  /**\n   * Allows dynamic update to the environment variables. After calling put,\n   * System.getenv(key) will then return value.\n   *\n   * @param key System environment variable\n   * @param value Value to assign to system environment variable\n   */\n  public static void put(String key, String value){\n    Map<String, String> environment = new HashMap<String, String>(System.getenv());\n    environment.put(key, value);\n    updateEnvironment(environment);\n  }\n\n  /**\n   * Allows dynamic update to a collection of environment variables. After\n   * calling putAll, System.getenv(key) will then return value for each entry\n   * in the map\n   *\n   * @param additionalEnvironment Collection where the key is the System\n   * environment variable and the value is the value to assign the system\n   * environment variable\n   */\n<fim_suffix>  public static void putAll(Map<String, String> additionalEnvironment) {\n    Map<String, String> environment = new HashMap<String, String>(System.getenv());\n    environment.putAll(additionalEnvironment);\n    updateEnvironment(environment);\n  }\n\n  /**\n   * Finds and modifies internal storage for system environment variables using\n   * reflection\n   *\n   * @param environment Collection where the key is the System\n   * environment variable and the value is the value to assign the system\n   * environment variable\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static void updateEnvironment(Map<String, String> environment) {\n    try {\n      Class<?>[] classes = Collections.class.getDeclaredClasses();\n      for (Class<?> clazz : classes) {\n        if (\"java.util.Collections$UnmodifiableMap\".equals(clazz.getName())) {\n          Field field = clazz.getDeclaredField(\"m\");\n          field.setAccessible(true);\n          Object obj = field.get(System.getenv());\n          Map<String, String> map = (Map<String, String>)obj;\n          map.clear();\n          map.putAll(environment);\n        }\n      }\n    }\n    catch (NoSuchFieldException e) {\n      throw new IllegalStateException(\"Failed to update Environment variables\", e);\n    }\n    catch (IllegalAccessException e) {\n      throw new IllegalStateException(\"Failed to update Environment variables\", e);\n    }\n  }\n}<fim_middle>// function below has no smell\n"}