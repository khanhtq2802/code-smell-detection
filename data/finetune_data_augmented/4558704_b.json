{"text": "<fim_prefix>\n<fim_suffix>public final class TemplateConfiguration extends Configurable implements ParserConfiguration {\n    private boolean parentConfigurationSet;\n    private Integer tagSyntax;\n    private Integer interpolationSyntax;\n    private Integer namingConvention;\n    private Boolean whitespaceStripping;\n    private Boolean strictSyntaxMode;\n    private Integer autoEscapingPolicy;\n    private Boolean recognizeStandardFileExtensions;\n    private OutputFormat outputFormat;\n    private String encoding;\n    private Integer tabSize;\n    /**\n     * Creates a new instance. The parent will be {@link Configuration#getDefaultConfiguration()} initially, but it will\n     * be changed to the real parent {@link Configuration} when this object is added to the {@link Configuration}. (It's\n     * not allowed to add the same instance to multiple {@link Configuration}-s).\n     */\n    public TemplateConfiguration() {\n        super(Configuration.getDefaultConfiguration());\n    }\n    /**\n     * Same as {@link #setParentConfiguration(Configuration)}.\n     */\n    @Override\n    void setParent(Configurable cfg) {\n        NullArgumentException.check(\"cfg\", cfg);\n        if (!(cfg instanceof Configuration)) {\n            throw new IllegalArgumentException(\"The parent of a TemplateConfiguration can only be a Configuration\");\n        }\n        if (parentConfigurationSet) {\n            if (getParent() != cfg) {\n                throw new IllegalStateException(\n                        \"This TemplateConfiguration is already associated with a different Configuration instance.\");\n            }\n            return;\n        }\n        if (((Configuration) cfg).getIncompatibleImprovements().intValue() < _TemplateAPI.VERSION_INT_2_3_22\n                && hasAnyConfigurableSet()) {\n            throw new IllegalStateException(\n                    \"This TemplateConfiguration can't be associated to a Configuration that has \"\n                    + \"incompatibleImprovements less than 2.3.22, because it changes non-parser settings.\");\n        }\n        super.setParent(cfg);\n        parentConfigurationSet = true;\n    }\n    /**\n     * Associates this instance with a {@link Configuration}; usually you don't call this, as it's called internally\n     * when this instance is added to a {@link Configuration}. This method can be called only once (except with the same\n     * {@link Configuration} parameter again, as that changes nothing anyway).\n     * \n     * @throws IllegalArgumentException\n     *             if the argument is {@code null} or not a {@link Configuration}\n     * @throws IllegalStateException\n     *             if this object is already associated to a different {@link Configuration} object,\n     *             or if the {@code Configuration} has {@code #getIncompatibleImprovements()} less than 2.3.22 and\n     *             this object tries to change any non-parser settings  \n     */\n    public void setParentConfiguration(Configuration cfg) {\n        setParent(cfg);\n    }\n    /**\n     * Returns the parent {@link Configuration}, or {@code null} if none was associated yet.\n     */\n    public Configuration getParentConfiguration() {\n        return parentConfigurationSet ? (Configuration) getParent() : null;\n    }\n    private Configuration getNonNullParentConfiguration() {\n        checkParentConfigurationSet();\n        return (Configuration) getParent();\n    }\n    /**\n     * Set all settings in this {@link TemplateConfiguration} that were set in the parameter\n     * {@link TemplateConfiguration}, possibly overwriting the earlier value in this object. (A setting is said to be\n     * set in a {@link TemplateConfiguration} if it was explicitly set via a setter method, as opposed to be inherited.)\n     */\n    public void merge(TemplateConfiguration tc) {\n        if (tc.isAPIBuiltinEnabledSet()) {\n            setAPIBuiltinEnabled(tc.isAPIBuiltinEnabled());\n        }\n        if (tc.isArithmeticEngineSet()) {\n            setArithmeticEngine(tc.getArithmeticEngine());\n        }\n        if (tc.isAutoEscapingPolicySet()) {\n            setAutoEscapingPolicy(tc.getAutoEscapingPolicy());\n        }\n        if (tc.isAutoFlushSet()) {\n            setAutoFlush(tc.getAutoFlush());\n        }\n        if (tc.isBooleanFormatSet()) {\n            setBooleanFormat(tc.getBooleanFormat());\n        }\n        if (tc.isClassicCompatibleSet()) {\n            setClassicCompatibleAsInt(tc.getClassicCompatibleAsInt());\n        }\n        if (tc.isCustomDateFormatsSet()) {\n            setCustomDateFormats(mergeMaps(getCustomDateFormats(), tc.getCustomDateFormats(), false));\n        }\n        if (tc.isCustomNumberFormatsSet()) {\n            setCustomNumberFormats(mergeMaps(getCustomNumberFormats(), tc.getCustomNumberFormats(), false));\n        }\n        if (tc.isDateFormatSet()) {\n            setDateFormat(tc.getDateFormat());\n        }\n        if (tc.isDateTimeFormatSet()) {\n            setDateTimeFormat(tc.getDateTimeFormat());\n        }\n        if (tc.isEncodingSet()) {\n            setEncoding(tc.getEncoding());\n        }\n        if (tc.isLocaleSet()) {\n            setLocale(tc.getLocale());\n        }\n        if (tc.isLogTemplateExceptionsSet()) {\n            setLogTemplateExceptions(tc.getLogTemplateExceptions());\n        }\n        if (tc.isWrapUncheckedExceptionsSet()) {\n            setWrapUncheckedExceptions(tc.getWrapUncheckedExceptions());\n        }\n        if (tc.isNamingConventionSet()) {\n            setNamingConvention(tc.getNamingConvention());\n        }\n        if (tc.isNewBuiltinClassResolverSet()) {\n            setNewBuiltinClassResolver(tc.getNewBuiltinClassResolver());\n        }\n        if (tc.isTruncateBuiltinAlgorithmSet()) {\n            setTruncateBuiltinAlgorithm(tc.getTruncateBuiltinAlgorithm());\n        }\n        if (tc.isNumberFormatSet()) {\n            setNumberFormat(tc.getNumberFormat());\n        }\n        if (tc.isObjectWrapperSet()) {\n            setObjectWrapper(tc.getObjectWrapper());\n        }\n        if (tc.isOutputEncodingSet()) {\n            setOutputEncoding(tc.getOutputEncoding());\n        }\n        if (tc.isOutputFormatSet()) {\n            setOutputFormat(tc.getOutputFormat());\n        }\n        if (tc.isRecognizeStandardFileExtensionsSet()) {\n            setRecognizeStandardFileExtensions(tc.getRecognizeStandardFileExtensions());\n        }\n        if (tc.isShowErrorTipsSet()) {\n            setShowErrorTips(tc.getShowErrorTips());\n        }\n        if (tc.isSQLDateAndTimeTimeZoneSet()) {\n            setSQLDateAndTimeTimeZone(tc.getSQLDateAndTimeTimeZone());\n        }\n        if (tc.isStrictSyntaxModeSet()) {\n            setStrictSyntaxMode(tc.getStrictSyntaxMode());\n        }\n        if (tc.isTagSyntaxSet()) {\n            setTagSyntax(tc.getTagSyntax());\n        }\n        if (tc.isInterpolationSyntaxSet()) {\n            setInterpolationSyntax(tc.getInterpolationSyntax());\n        }\n        if (tc.isTemplateExceptionHandlerSet()) {\n            setTemplateExceptionHandler(tc.getTemplateExceptionHandler());\n        }\n        if (tc.isAttemptExceptionReporterSet()) {\n            setAttemptExceptionReporter(tc.getAttemptExceptionReporter());\n        }\n        if (tc.isTimeFormatSet()) {\n            setTimeFormat(tc.getTimeFormat());\n        }\n        if (tc.isTimeZoneSet()) {\n            setTimeZone(tc.getTimeZone());\n        }\n        if (tc.isURLEscapingCharsetSet()) {\n            setURLEscapingCharset(tc.getURLEscapingCharset());\n        }\n        if (tc.isWhitespaceStrippingSet()) {\n            setWhitespaceStripping(tc.getWhitespaceStripping());\n        }\n        if (tc.isTabSizeSet()) {\n            setTabSize(tc.getTabSize());\n        }\n        if (tc.isLazyImportsSet()) {\n            setLazyImports(tc.getLazyImports());\n        }\n        if (tc.isLazyAutoImportsSet()) {\n            setLazyAutoImports(tc.getLazyAutoImports());\n        }\n        if (tc.isAutoImportsSet()) {\n            setAutoImports(mergeMaps(getAutoImportsWithoutFallback(), tc.getAutoImportsWithoutFallback(), true));\n        }\n        if (tc.isAutoIncludesSet()) {\n            setAutoIncludes(mergeLists(getAutoIncludesWithoutFallback(), tc.getAutoIncludesWithoutFallback()));\n        }\n        tc.copyDirectCustomAttributes(this, true);\n    }\n    /**\n     * Sets those settings of the {@link Template} which aren't yet set in the {@link Template} and are set in this\n     * {@link TemplateConfiguration}, leaves the other settings as is. A setting is said to be set in a\n     * {@link TemplateConfiguration} or {@link Template} if it was explicitly set via a setter method on that object, as\n     * opposed to be inherited from the {@link Configuration}.\n     * \n     * <p>\n     * Note that this method doesn't deal with settings that influence the parser, as those are already baked in at this\n     * point via the {@link ParserConfiguration}. \n     * \n     * <p>\n     * Note that the {@code encoding} setting of the {@link Template} counts as unset if it's {@code null},\n     * even if {@code null} was set via {@link Template#setEncoding(String)}.\n     *\n     * @throws IllegalStateException\n     *             If the parent configuration wasn't yet set.\n     */\n    public void apply(Template template) {\n        Configuration cfg = getNonNullParentConfiguration();\n        if (template.getConfiguration() != cfg) {\n            // This is actually not a problem right now, but for future BC we enforce this.\n            throw new IllegalArgumentException(<fim_middle>// class below is data class and blob\n"}