{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License. \n *  \n */\npackage org.apache.directory.studio.ldapbrowser.ui.wizards;\nimport java.util.ArrayList;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.directory.api.ldap.model.exception.LdapInvalidDnException;\nimport org.apache.directory.api.ldap.model.name.Dn;\nimport org.apache.directory.studio.common.ui.widgets.BaseWidgetUtils;\nimport org.apache.directory.studio.common.ui.widgets.WidgetModifyEvent;\nimport org.apache.directory.studio.common.ui.widgets.WidgetModifyListener;\nimport org.apache.directory.studio.connection.core.Connection;\nimport org.apache.directory.studio.ldapbrowser.common.actions.BrowserSelectionUtils;\nimport org.apache.directory.studio.ldapbrowser.common.widgets.search.SearchPageWrapper;\nimport org.apache.directory.studio.ldapbrowser.core.model.IAttribute;\nimport org.apache.directory.studio.ldapbrowser.core.model.IBookmark;\nimport org.apache.directory.studio.ldapbrowser.core.model.IEntry;\nimport org.apache.directory.studio.ldapbrowser.core.model.ISearch;\nimport org.apache.directory.studio.ldapbrowser.core.model.ISearchResult;\nimport org.apache.directory.studio.ldapbrowser.core.model.IValue;\nimport org.eclipse.jface.viewers.ISelection;\nimport org.eclipse.jface.wizard.WizardPage;\nimport org.eclipse.osgi.util.NLS;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.ModifyEvent;\nimport org.eclipse.swt.events.ModifyListener;\nimport org.eclipse.swt.events.SelectionAdapter;\nimport org.eclipse.swt.events.SelectionEvent;\nimport org.eclipse.swt.layout.GridData;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Button;\nimport org.eclipse.swt.widgets.Combo;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.ui.PlatformUI;\npublic class BatchOperationApplyOnWizardPage extends WizardPage\n{\n    private String[] initCurrentSelectionTexts;\n    private Dn[][] initCurrentSelectionDns;\n    private ISearch initSearch;\n    private Button currentSelectionButton;\n    private Combo currentSelectionCombo;\n    private Button searchButton;\n    private SearchPageWrapper spw;\n    public BatchOperationApplyOnWizardPage( String pageName, BatchOperationWizard wizard )\n    {\n        super( pageName );\n        super.setTitle( Messages.getString( \"BatchOperationApplyOnWizardPage.SelectApplicationEntries\" ) ); //$NON-NLS-1$\n        super.setDescription( Messages.getString( \"BatchOperationApplyOnWizardPage.PleaseSelectEntries\" ) ); //$NON-NLS-1$\n        super.setPageComplete( false );\n        this.prepareCurrentSelection();\n        this.prepareSearch();\n    }\n<fim_suffix>    private void validate()\n    {\n        setPageComplete( getApplyOnDns() != null || spw.isValid() );\n        setErrorMessage( searchButton.getSelection() ? spw.getErrorMessage() : null );\n    }\n    public void createControl( Composite parent )\n    {\n        Composite composite = new Composite( parent, SWT.NONE );\n        GridLayout gl = new GridLayout( 1, false );\n        composite.setLayout( gl );\n        composite.setLayoutData( new GridData( GridData.FILL_BOTH ) );\n        Composite applyOnGroup = composite;\n        this.currentSelectionButton = BaseWidgetUtils.createRadiobutton( applyOnGroup, Messages\n            .getString( \"BatchOperationApplyOnWizardPage.CurrentSelection\" ), 1 ); //$NON-NLS-1$\n        this.currentSelectionButton.addSelectionListener( new SelectionAdapter()\n        {\n            public void widgetSelected( SelectionEvent e )\n            {\n                enableCurrentSelectionWidgets( currentSelectionButton.getSelection() );\n                validate();\n            }\n        } );\n        Composite currentSelectionComposite = BaseWidgetUtils.createColumnContainer( applyOnGroup, 2, 1 );\n        BaseWidgetUtils.createRadioIndent( currentSelectionComposite, 1 );\n        this.currentSelectionCombo = BaseWidgetUtils.createReadonlyCombo( currentSelectionComposite,\n            this.initCurrentSelectionTexts, 0, 1 );\n        this.currentSelectionCombo.addModifyListener( new ModifyListener()\n        {\n            public void modifyText( ModifyEvent e )\n            {\n                validate();\n            }\n        } );\n        BaseWidgetUtils.createSpacer( applyOnGroup, 1 );\n        BaseWidgetUtils.createSpacer( applyOnGroup, 1 );\n        this.searchButton = BaseWidgetUtils.createRadiobutton( applyOnGroup, Messages\n            .getString( \"BatchOperationApplyOnWizardPage.ResultsOfSearch\" ), 1 ); //$NON-NLS-1$\n        this.searchButton.addSelectionListener( new SelectionAdapter()\n        {\n            public void widgetSelected( SelectionEvent e )\n            {\n                enableSearchWidgets( searchButton.getSelection() );\n                validate();\n            }\n        } );\n        Composite searchComposite = BaseWidgetUtils.createColumnContainer( applyOnGroup, 2, 1 );\n        BaseWidgetUtils.createRadioIndent( searchComposite, 1 );\n        Composite innerSearchComposite = BaseWidgetUtils.createColumnContainer( searchComposite, 3, 1 );\n        this.spw = new SearchPageWrapper( SearchPageWrapper.NAME_INVISIBLE\n            | SearchPageWrapper.REFERRALOPTIONS_FOLLOW_MANUAL_INVISIBLE\n            | SearchPageWrapper.RETURNINGATTRIBUTES_INVISIBLE | SearchPageWrapper.REFERRALOPTIONS_READONLY );\n        this.spw.createContents( innerSearchComposite );\n        this.spw.loadFromSearch( this.initSearch );\n        this.spw.addWidgetModifyListener( new WidgetModifyListener()\n        {\n            public void widgetModified( WidgetModifyEvent event )\n            {\n                validate();\n            }\n        } );\n        this.currentSelectionButton.setSelection( this.currentSelectionCombo.getItemCount() > 0 );\n        this.currentSelectionButton.setEnabled( this.currentSelectionCombo.getItemCount() > 0 );\n        this.searchButton.setSelection( this.currentSelectionCombo.getItemCount() == 0 );\n        this.enableCurrentSelectionWidgets( this.currentSelectionButton.getSelection() );\n        this.enableSearchWidgets( this.searchButton.getSelection() );\n        validate();\n        setControl( composite );\n    }\n    public Dn[] getApplyOnDns()\n    {\n        if ( currentSelectionButton.getSelection() )\n        {\n            int index = currentSelectionCombo.getSelectionIndex();\n            return initCurrentSelectionDns[index];\n        }\n        else\n        {\n            return null;\n        }\n    }\n    public ISearch getApplyOnSearch()\n    {\n        if ( searchButton.getSelection() )\n        {\n            return this.initSearch;\n        }\n        else\n        {\n            return null;\n        }\n    }\n    private void enableCurrentSelectionWidgets( boolean b )\n    {\n        currentSelectionCombo.setEnabled( b );\n    }\n    private void enableSearchWidgets( boolean b )\n    {\n        spw.setEnabled( b );\n    }\n    private void prepareSearch()\n    {\n        ISelection selection = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getSelectionService()\n            .getSelection();\n        this.initSearch = BrowserSelectionUtils.getExampleSearch( selection );\n        this.initSearch.setName( null );\n        // never follow referrals for a batch operation!\n        this.initSearch.setReferralsHandlingMethod( Connection.ReferralHandlingMethod.IGNORE );\n    }\n    private void prepareCurrentSelection()\n    {\n        ISelection selection = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getSelectionService()\n            .getSelection();\n        ISearch[] searches = BrowserSelectionUtils.getSearches( selection );\n        IEntry[] entries = BrowserSelectionUtils.getEntries( selection );\n        ISearchResult[] searchResults = BrowserSelectionUtils.getSearchResults( selection );\n        IBookmark[] bookmarks = BrowserSelectionUtils.getBookmarks( selection );\n        IAttribute[] attributes = BrowserSelectionUtils.getAttributes( selection );\n        IValue[] values = BrowserSelectionUtils.getValues( selection );\n        List<String> textList = new ArrayList<String>();\n        List<Dn[]> dnsList = new ArrayList<Dn[]>();<fim_middle>// function below has no smell\n"}