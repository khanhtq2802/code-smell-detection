{"text": "<fim_prefix>/*\n * Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage org.graalvm.visualvm.coredump.impl;\nimport org.graalvm.visualvm.core.datasource.DataSourceRepository;\nimport org.graalvm.visualvm.core.datasource.Storage;\nimport org.graalvm.visualvm.core.snapshot.Snapshot;\nimport org.graalvm.visualvm.core.datasupport.Utils;\nimport org.graalvm.visualvm.core.explorer.ExplorerSupport;\nimport org.graalvm.visualvm.core.datasource.descriptor.DataSourceDescriptor;\nimport org.graalvm.visualvm.core.datasource.descriptor.DataSourceDescriptorFactory;\nimport org.graalvm.visualvm.coredump.CoreDumpSupport;\nimport org.graalvm.visualvm.coredump.CoreDumpsContainer;\nimport org.graalvm.visualvm.tools.sa.SaModel;\nimport org.graalvm.visualvm.tools.sa.SaModelFactory;\nimport java.awt.BorderLayout;\nimport java.io.File;\nimport java.io.FilenameFilter;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.SwingUtilities;\nimport org.netbeans.api.progress.ProgressHandle;\nimport org.netbeans.api.progress.ProgressHandleFactory;\nimport org.graalvm.visualvm.lib.ui.SwingWorker;\nimport org.openide.DialogDisplayer;\nimport org.openide.NotifyDescriptor;\nimport org.openide.util.NbBundle;\nimport org.openide.util.RequestProcessor;\nimport org.openide.windows.WindowManager;\n/**\n *\n * @author Tomas Hurka\n * @author Jiri Sedlacek\n */\npublic class CoreDumpProvider {\n    private static final Logger LOGGER = Logger.getLogger(CoreDumpProvider.class.getName());\n    private static final String SNAPSHOT_VERSION = \"snapshot_version\";  // NOI18N\n    private static final String SNAPSHOT_VERSION_DIVIDER = \".\"; // NOI18N\n    private static final String CURRENT_SNAPSHOT_VERSION_MAJOR = \"1\";   // NOI18N\n    private static final String CURRENT_SNAPSHOT_VERSION_MINOR = \"0\";   // NOI18N\n    private static final String CURRENT_SNAPSHOT_VERSION = CURRENT_SNAPSHOT_VERSION_MAJOR + SNAPSHOT_VERSION_DIVIDER + CURRENT_SNAPSHOT_VERSION_MINOR;\n    private static final String PROPERTY_JAVA_HOME = \"prop_java_home\";  // NOI18N\n<fim_suffix>    private static class CoreDumpAdder extends SwingWorker {\n        volatile private ProgressHandle ph = null;\n        volatile private boolean success = false;\n        private CoreDumpImpl newCoreDump;\n        private Storage storage;\n        private String[] propNames, propValues;\n        public CoreDumpAdder(CoreDumpImpl newCoreDump, Storage storage, String[] propNames, String[] propValues) {\n            this.newCoreDump = newCoreDump;\n            this.storage = storage;\n            this.propValues = propValues;\n            this.propNames = propNames;\n        }\n        @Override\n        protected void doInBackground() {\n            SaModel model = SaModelFactory.getSAAgentFor(newCoreDump);\n            if (model != null) {\n                storage.setCustomProperties(propNames, propValues);\n                CoreDumpsContainer.sharedInstance().getRepository().addDataSource(newCoreDump);\n                success = true;\n            }\n        }\n        @Override\n        protected void nonResponding() {\n            ph = ProgressHandleFactory.createHandle(NbBundle.getMessage(CoreDumpProvider.class, \"LBL_Inspecting_core_dump\"));   // NOI18N\n            ph.start();\n        }\n        @Override\n        protected void done() {\n            if (ph != null) {\n                ph.finish();\n            }\n            if (!success) {\n                DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(NbBundle.getMessage(CoreDumpProvider.class, \"MSG_not_valid_core_dump\", newCoreDump.getFile().getAbsolutePath())));  // NOI18N\n            }\n        }\n    }\n    static void createCoreDump(final String coreDumpFile, final String displayName, final String jdkHome, final boolean deleteCoreDump) {\n        RequestProcessor.getDefault().post(new Runnable() {\n            public void run() {\n                createCoreDumpImpl(coreDumpFile, displayName, jdkHome, deleteCoreDump);\n            }\n        });\n    }\n    private static void createCoreDumpImpl(String coreDumpFile, final String displayName, String jdkHome, boolean deleteCoreDump) {\n        // TODO: check if the same coredump isn't already imported (can happen for moved coredumps)\n        final CoreDumpImpl knownCoreDump = getCoreDumpByFile(new File(coreDumpFile));\n        if (knownCoreDump != null) {\n            SwingUtilities.invokeLater(new Runnable() {\n                public void run() {\n                    ExplorerSupport.sharedInstance().selectDataSource(knownCoreDump);\n                    DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.\n                            Message(NbBundle.getMessage(CoreDumpProvider.class,\n                            \"MSG_Core_dump_already_added\", new Object[] {displayName, // NOI18N\n                            DataSourceDescriptorFactory.getDescriptor(knownCoreDump).\n                            getName()}), NotifyDescriptor.ERROR_MESSAGE));\n                }\n            });\n            return;\n        }\n        if (deleteCoreDump) {\n            ProgressHandle pHandle = null;\n            try {\n                pHandle = ProgressHandleFactory.createHandle(NbBundle.getMessage(CoreDumpProvider.class, \"MSG_Adding\", displayName));   // NOI18N\n                pHandle.setInitialDelay(0);\n                pHandle.start();\n                File file = new File(coreDumpFile);\n                File copy = Utils.getUniqueFile(CoreDumpSupport.getStorageDirectory(), file.getName());\n                if (Utils.copyFile(file, copy)) {\n                    coreDumpFile = copy.getAbsolutePath();\n                    if (!file.delete()) file.deleteOnExit();\n                }\n            } finally {\n                final ProgressHandle pHandleF = pHandle;\n                SwingUtilities.invokeLater(new Runnable() {\n                    public void run() { if (pHandleF != null) pHandleF.finish(); }\n                });\n            }\n        }\n        final String[] propNames = new String[] {\n            SNAPSHOT_VERSION,\n            Snapshot.PROPERTY_FILE,\n            DataSourceDescriptor.PROPERTY_NAME,\n            PROPERTY_JAVA_HOME };\n        final String[] propValues = new String[] {\n            CURRENT_SNAPSHOT_VERSION,\n            coreDumpFile,\n            displayName,\n            jdkHome\n        };\n        File customPropertiesStorage = Utils.getUniqueFile(CoreDumpSupport.getStorageDirectory(), new File(coreDumpFile).getName(), Storage.DEFAULT_PROPERTIES_EXT);\n        Storage storage = new Storage(customPropertiesStorage.getParentFile(), customPropertiesStorage.getName());\n        try {\n            CoreDumpImpl newCoreDump = new CoreDumpImpl(new File(coreDumpFile), new File(jdkHome), storage);\n            if (newCoreDump != null) {\n                new CoreDumpAdder(newCoreDump, storage, propNames, propValues).execute();\n            }\n        } catch (Exception e) {\n            LOGGER.log(Level.SEVERE, \"Error creating coredump\", e); // NOI18N\n            return;\n        }\n    }\n    private static CoreDumpImpl getCoreDumpByFile(File file) {\n        if (!file.isFile()) return null;\n        Set<CoreDumpImpl> knownCoredumps = DataSourceRepository.sharedInstance().getDataSources(CoreDumpImpl.class);<fim_middle>// class below has no smell\n"}