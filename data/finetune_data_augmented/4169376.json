{"text": "<fim_prefix>/*****************************************************************\n *   Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n ****************************************************************/\npackage org.apache.cayenne.di.spi;\n\nimport org.apache.cayenne.di.DIRuntimeException;\nimport org.apache.cayenne.di.Key;\nimport org.apache.cayenne.di.Provider;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @since 3.1\n */\n<fim_suffix>class ListProvider<T> implements Provider<List<T>> {\n\n    private Map<Key<? extends T>, Provider<? extends T>> providers;\n    private DIGraph<Key<? extends T>> graph;\n\n    public ListProvider() {\n        this.providers = new HashMap<>();\n        this.graph = new DIGraph<>();\n    }\n\n    @Override\n    public List<T> get() throws DIRuntimeException {\n        List<Key<? extends T>> insertOrder = graph.topSort();\n\n        if (insertOrder.size() != providers.size()) {\n            List<Key<? extends T>> emptyKeys = new ArrayList<>();\n\n            for (Key<? extends T> key : insertOrder) {\n                if (!providers.containsKey(key)) {\n                    emptyKeys.add(key);\n                }\n            }\n\n            throw new DIRuntimeException(\"DI list has no providers for keys: %s\", emptyKeys);\n        }\n\n        List<T> list = new ArrayList<>(insertOrder.size());\n        for (Key<? extends T> key : insertOrder) {\n            list.add(providers.get(key).get());\n        }\n\n        return list;\n    }\n\n    void add(Key<? extends T> key, Provider<? extends T> provider) {\n        providers.put(key, provider);\n        graph.add(key);\n    }\n\n    void addAfter(Key<? extends T> key, Provider<? extends T> provider, Key<? extends T> after) {\n        providers.put(key, provider);\n        graph.add(key, after);\n    }\n\n    void insertBefore(Key<? extends T> key, Provider<? extends T> provider, Key<? extends T> before) {\n        providers.put(key, provider);\n        graph.add(before, key);\n    }\n\n    void addAll(Map<Key<? extends T>, Provider<? extends T>> keyProviderMap) {\n        providers.putAll(keyProviderMap);\n        graph.addAll(keyProviderMap.keySet());\n    }\n\n    void addAllAfter(Map<Key<? extends T>, Provider<? extends T>> keyProviderMap, Key<? extends T> after) {\n        providers.putAll(keyProviderMap);\n        for (Key<? extends T> key : keyProviderMap.keySet()) {\n            graph.add(key, after);\n        }\n    }\n\n    void insertAllBefore(Map<Key<? extends T>, Provider<? extends T>> keyProviderMap, Key<? extends T> before) {\n        providers.putAll(keyProviderMap);\n        for (Key<? extends T> key : keyProviderMap.keySet()) {\n            graph.add(before, key);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}