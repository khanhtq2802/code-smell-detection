{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.builder;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport org.apache.camel.CamelContext;\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.RoutesBuilder;\nimport org.apache.camel.model.FromDefinition;\nimport org.apache.camel.model.InterceptDefinition;\nimport org.apache.camel.model.InterceptFromDefinition;\nimport org.apache.camel.model.InterceptSendToEndpointDefinition;\nimport org.apache.camel.model.ModelCamelContext;\nimport org.apache.camel.model.OnCompletionDefinition;\nimport org.apache.camel.model.OnExceptionDefinition;\nimport org.apache.camel.model.RouteDefinition;\nimport org.apache.camel.model.RoutesDefinition;\nimport org.apache.camel.model.rest.RestConfigurationDefinition;\nimport org.apache.camel.model.rest.RestDefinition;\nimport org.apache.camel.model.rest.RestsDefinition;\nimport org.apache.camel.spi.PropertiesComponent;\nimport org.apache.camel.spi.RestConfiguration;\nimport org.apache.camel.util.ObjectHelper;\nimport org.apache.camel.util.StringHelper;\nimport org.apache.camel.util.function.ThrowingConsumer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n/**\n * A <a href=\"http://camel.apache.org/dsl.html\">Java DSL</a> which is\n * used to build {@link org.apache.camel.impl.DefaultRoute} instances in a {@link CamelContext} for smart routing.\n */\npublic abstract class RouteBuilder extends BuilderSupport implements RoutesBuilder {\n    protected Logger log = LoggerFactory.getLogger(getClass());\n    private AtomicBoolean initialized = new AtomicBoolean(false);\n    private RestsDefinition restCollection = new RestsDefinition();\n    private Map<String, RestConfigurationDefinition> restConfigurations;\n    private List<TransformerBuilder> transformerBuilders = new ArrayList<>();\n    private List<ValidatorBuilder> validatorBuilders = new ArrayList<>();\n    private RoutesDefinition routeCollection = new RoutesDefinition();\n    public RouteBuilder() {\n        this(null);\n    }\n    public RouteBuilder(CamelContext context) {\n        super(context);\n    }\n    /**\n     * Add routes to a context using a lambda expression.\n     * It can be used as following:\n     * <pre>\n     * RouteBuilder.addRoutes(context, rb ->\n     *     rb.from(\"direct:inbound\").bean(ProduceTemplateBean.class)));\n     * </pre>\n     *\n     * @param context the camel context to add routes\n     * @param rbc a lambda expression receiving the {@code RouteBuilder} to use to create routes\n     * @throws Exception if an error occurs\n     */\n    public static void addRoutes(CamelContext context, ThrowingConsumer<RouteBuilder, Exception> rbc) throws Exception {\n        context.addRoutes(new RouteBuilder(context) {\n            @Override\n            public void configure() throws Exception {\n                rbc.accept(this);\n            }\n        });\n    }\n    @Override\n    public String toString() {\n        return getRouteCollection().toString();\n    }\n    /**\n     * <b>Called on initialization to build the routes using the fluent builder syntax.</b>\n     * <p/>\n     * This is a central method for RouteBuilder implementations to implement\n     * the routes using the Java fluent builder syntax.\n     *\n     * @throws Exception can be thrown during configuration\n     */\n    public abstract void configure() throws Exception;\n    /**\n     * Binds the bean to the repository (if possible).\n     *\n     * @param id   the id of the bean\n     * @param bean the bean\n     */\n    public void bindToRegistry(String id, Object bean) {\n        getContext().getRegistry().bind(id, bean);\n    }\n    /**\n     * Binds the bean to the repository (if possible).\n     *\n     * @param id   the id of the bean\n     * @param type the type of the bean to associate the binding\n     * @param bean the bean\n     */\n    public void bindToRegistry(String id, Class<?> type, Object bean) {\n        getContext().getRegistry().bind(id, type, bean);\n    }\n    /**\n     * Configures the REST services\n     *\n     * @return the builder\n     */\n    public RestConfigurationDefinition restConfiguration() {\n        return restConfiguration(\"\");\n    }\n    /**\n     * Configures the REST service for the given component\n     *\n     * @return the builder\n     */\n    public RestConfigurationDefinition restConfiguration(String component) {\n        if (restConfigurations == null) {\n            restConfigurations = new HashMap<>();\n        }\n        RestConfigurationDefinition restConfiguration = restConfigurations.get(component);\n        if (restConfiguration == null) {\n            restConfiguration = new RestConfigurationDefinition();\n            if (!component.isEmpty()) {\n                restConfiguration.component(component);\n            }\n            restConfigurations.put(component, restConfiguration);\n        }\n        return restConfiguration;\n    }\n    /**\n     * Creates a new REST service\n     *\n     * @return the builder\n     */\n    public RestDefinition rest() {\n        getRestCollection().setCamelContext(getContext());\n        RestDefinition answer = getRestCollection().rest();\n        configureRest(answer);\n        return answer;\n    }\n    /**\n     * Creates a new REST service\n     *\n     * @param path  the base path\n     * @return the builder\n     */\n    public RestDefinition rest(String path) {\n        getRestCollection().setCamelContext(getContext());\n        RestDefinition answer = getRestCollection().rest(path);\n        configureRest(answer);\n        return answer;\n    }\n    /**\n     * Create a new {@code TransformerBuilder}.\n     * \n     * @return the builder\n     */\n    public TransformerBuilder transformer() {\n        TransformerBuilder tdb = new TransformerBuilder();\n        transformerBuilders.add(tdb);\n        return tdb;\n    }\n    /**\n     * Create a new {@code ValidatorBuilder}.\n     * \n     * @return the builder\n     */\n    public ValidatorBuilder validator() {\n        ValidatorBuilder vb = new ValidatorBuilder();\n        validatorBuilders.add(vb);\n        return vb;\n    }\n    /**\n     * Creates a new route from the given URI input\n     *\n     * @param uri  the from uri\n     * @return the builder\n     */\n<fim_suffix>    public RouteDefinition from(String uri) {\n        getRouteCollection().setCamelContext(getContext());\n        RouteDefinition answer = getRouteCollection().from(uri);\n        configureRoute(answer);\n        return answer;\n    }\n    /**\n     * Creates a new route from the given URI input\n     *\n     * @param uri  the String formatted from uri\n     * @param args arguments for the string formatting of the uri\n     * @return the builder\n     */\n    public RouteDefinition fromF(String uri, Object... args) {\n        getRouteCollection().setCamelContext(getContext());\n        RouteDefinition answer = getRouteCollection().from(String.format(uri, args));\n        configureRoute(answer);\n        return answer;\n    }\n    /**\n     * Creates a new route from the given endpoint\n     *\n     * @param endpoint  the from endpoint\n     * @return the builder\n     */\n    public RouteDefinition from(Endpoint endpoint) {\n        getRouteCollection().setCamelContext(getContext());\n        RouteDefinition answer = getRouteCollection().from(endpoint);\n        configureRoute(answer);\n        return answer;\n    }\n    /**\n     * Installs the given <a href=\"http://camel.apache.org/error-handler.html\">error handler</a> builder\n     *\n     * @param errorHandlerBuilder  the error handler to be used by default for all child routes\n     */\n    public void errorHandler(ErrorHandlerBuilder errorHandlerBuilder) {\n        if (!getRouteCollection().getRoutes().isEmpty()) {\n            throw new IllegalArgumentException(\"errorHandler must be defined before any routes in the RouteBuilder\");\n        }\n        getRouteCollection().setCamelContext(getContext());\n        setErrorHandlerBuilder(errorHandlerBuilder);\n    }\n    /**\n     * Injects a property placeholder value with the given key converted to the given type.\n     *\n     * @param key  the property key\n     * @param type the type to convert the value as\n     * @return the value, or <tt>null</tt> if value is empty\n     * @throws Exception is thrown if property with key not found or error converting to the given type.\n     */\n    public <T> T propertyInject(String key, Class<T> type) throws Exception {\n        StringHelper.notEmpty(key, \"key\");<fim_middle>// function below has no smell\n"}