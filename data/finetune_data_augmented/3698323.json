{"text": "<fim_prefix>/*\n* Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file\n* except in compliance with the License. A copy of the License is located at\n*\n* http://aws.amazon.com/apache2.0/\n*\n* or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for\n* the specific language governing permissions and limitations under the License.\n*/\n\npackage com.amazon.ask.dispatcher.request.handler.impl;\n\nimport com.amazon.ask.dispatcher.request.handler.HandlerInput;\nimport com.amazon.ask.dispatcher.request.handler.RequestHandler;\nimport com.amazon.ask.model.interfaces.audioplayer.PlaybackNearlyFinishedRequest;\nimport com.amazon.ask.model.Response;\n\nimport java.util.Optional;\n\n/**\n * Request handler for PlaybackNearlyFinishedRequest requests.\n */\n<fim_suffix>public interface PlaybackNearlyFinishedRequestHandler extends RequestHandler {\n\n    /**\n     * Returns true if the handler can dispatch the current request\n     *\n     * @param input input to the request handler\n     * @param playbackNearlyFinishedRequest PlaybackNearlyFinishedRequest request\n     * @return true if the handler is capable of handling the current request and/or state\n     */\n    boolean canHandle(HandlerInput input, PlaybackNearlyFinishedRequest playbackNearlyFinishedRequest);\n\n    /**\n     * Handles the request.\n     *\n     * @param input input to the request handler\n     * @param playbackNearlyFinishedRequest PlaybackNearlyFinishedRequest request\n     * @return output from the handler.\n     */\n    Optional<Response> handle(HandlerInput input, PlaybackNearlyFinishedRequest playbackNearlyFinishedRequest);\n\n    @Override\n    default boolean canHandle(HandlerInput handlerInput) {\n        if (handlerInput.getRequest() instanceof PlaybackNearlyFinishedRequest) {\n            return canHandle(handlerInput, (PlaybackNearlyFinishedRequest)handlerInput.getRequest());\n        }\n        return false;\n    }\n\n    @Override\n    default Optional<Response> handle(HandlerInput handlerInput) {\n        return handle(handlerInput, (PlaybackNearlyFinishedRequest)handlerInput.getRequest());\n    }\n\n}<fim_middle>// class below has no smell\n"}