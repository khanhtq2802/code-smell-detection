{"text": "<fim_prefix>/*\n * Copyright 2017-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License. You may obtain\n * a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\npackage com.facebook.buck.event.listener;\n\nimport com.facebook.buck.distributed.thrift.BuildSlaveStatus;\nimport com.facebook.buck.event.listener.stats.cache.CacheRateStatsKeeper;\nimport com.facebook.buck.util.Ansi;\nimport com.facebook.buck.util.types.Pair;\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Preconditions;\nimport com.google.common.collect.ImmutableList;\nimport java.util.Comparator;\nimport java.util.stream.IntStream;\n\n<fim_suffix>public class DistBuildSlaveStateRenderer implements MultiStateRenderer {\n  private final Ansi ansi;\n  private final long currentTimeMs;\n  private final ImmutableList<BuildSlaveStatus> slaveStatuses;\n\n  private final Comparator<Pair<Integer, BuildSlaveStatus>> serverComparator =\n      (indexAndSlave1, indexAndSlave2) -> {\n        BuildSlaveStatus status1 = indexAndSlave1.getSecond();\n        BuildSlaveStatus status2 = indexAndSlave2.getSecond();\n\n        int buildingDifference =\n            Integer.compare(status1.getRulesBuildingCount(), status2.getRulesBuildingCount());\n        if (buildingDifference != 0) {\n          return -buildingDifference; // Servers with higher value at the top.\n        }\n\n        int totalRulesDifference =\n            Integer.compare(status1.getTotalRulesCount(), status2.getTotalRulesCount());\n        if (totalRulesDifference != 0) {\n          return -totalRulesDifference; // Servers with higher value at the top.\n        }\n\n        int failureDifference =\n            Integer.compare(status1.getRulesFailureCount(), status2.getRulesFailureCount());\n        if (failureDifference != 0) {\n          return -failureDifference; // Servers with higher value at the top.\n        }\n\n        int materializedFilesDifference =\n            Integer.compare(\n                status1.getFilesMaterializedCount(), status2.getFilesMaterializedCount());\n        if (materializedFilesDifference != 0) {\n          return -materializedFilesDifference; // Servers with higher value at the top.\n        }\n\n        // If nothing else, preserve the ordering based on recorded indices.\n        return Integer.compare(indexAndSlave1.getFirst(), indexAndSlave2.getFirst());\n      };\n\n  public DistBuildSlaveStateRenderer(\n      Ansi ansi, long currentTimeMs, ImmutableList<BuildSlaveStatus> slaveStatuses) {\n    this.ansi = ansi;\n    this.currentTimeMs = currentTimeMs;\n    this.slaveStatuses = slaveStatuses;\n  }\n\n  @Override\n  public String getExecutorCollectionLabel() {\n    return \"Servers\";\n  }\n\n  private boolean isSlaveIdle(BuildSlaveStatus status) {\n    return status.getTotalRulesCount() != 0 && status.getRulesBuildingCount() == 0;\n  }\n\n  @Override\n  public int getExecutorCount() {\n    return (int) slaveStatuses.stream().filter(status -> !isSlaveIdle(status)).count();\n  }\n\n  @Override\n  public ImmutableList<Long> getSortedExecutorIds(boolean sortByTime) {\n    return IntStream.range(0, slaveStatuses.size())\n        .boxed()\n        .map(i -> new Pair<>(i, slaveStatuses.get(i)))\n        .filter(pair -> !isSlaveIdle(pair.getSecond()))\n        .sorted(serverComparator)\n        .map(pair -> (long) pair.getFirst())\n        .collect(ImmutableList.toImmutableList());\n  }\n\n  @Override\n  public String renderStatusLine(long slaveID, StringBuilder lineBuilder) {\n    Preconditions.checkArgument(slaveID >= 0 && slaveID < slaveStatuses.size());\n    BuildSlaveStatus status = slaveStatuses.get((int) slaveID);\n    lineBuilder.append(\" - \");\n\n    if (status.getTotalRulesCount() == 0) {\n      ImmutableList.Builder<String> columns = new ImmutableList.Builder<>();\n      columns.add(\"creating action graph\");\n\n      if (status.getFilesMaterializedCount() > 0) {\n        columns.add(\n            String.format(\"materializing source files [%d]\", status.getFilesMaterializedCount()));\n      }\n\n      lineBuilder.append(String.format(\"Preparing: %s ...\", Joiner.on(\", \").join(columns.build())));\n    } else {\n      String prefix = \"Idle\";\n      if (status.getRulesBuildingCount() != 0) {\n        prefix = String.format(\"Building %d jobs\", status.getRulesBuildingCount());\n      }\n\n      ImmutableList.Builder<String> columns = new ImmutableList.Builder<>();\n      columns.add(\n          String.format(\n              \"built %d/%d jobs\", status.getRulesFinishedCount(), status.getTotalRulesCount()));\n\n      if (status.getRulesFailureCount() != 0) {\n        columns.add(String.format(\"%d jobs failed\", status.getRulesFailureCount()));\n      }\n\n      if (status.isSetCacheRateStats()) {\n        CacheRateStatsKeeper.CacheRateStatsUpdateEvent cacheStats =\n            CacheRateStatsKeeper.getCacheRateStatsUpdateEventFromSerializedStats(\n                status.getCacheRateStats());\n        columns.add(String.format(\"%.1f%% cache miss\", cacheStats.getCacheMissRate()));\n\n        if (cacheStats.getCacheErrorCount() != 0) {\n          columns.add(\n              String.format(\n                  \"%d [%.1f%%] cache errors\",\n                  cacheStats.getCacheErrorCount(), cacheStats.getCacheErrorRate()));\n        }\n      }\n\n      if (status.getHttpArtifactUploadsScheduledCount() > 0) {\n        columns.add(\n            String.format(\n                \"%d/%d uploaded\",\n                status.getHttpArtifactUploadsSuccessCount(),\n                status.getHttpArtifactUploadsScheduledCount()));\n\n        if (status.getHttpArtifactUploadsFailureCount() > 0) {\n          columns.add(\n              String.format(\"%d upload errors\", status.getHttpArtifactUploadsFailureCount()));\n        }\n      }\n\n      lineBuilder.append(String.format(\"%s... %s\", prefix, Joiner.on(\", \").join(columns.build())));\n    }\n\n    if (status.getRulesFailureCount() != 0) {\n      return ansi.asErrorText(lineBuilder.toString());\n    } else {\n      return lineBuilder.toString();\n    }\n  }\n\n  @Override\n  public String renderShortStatus(long slaveID) {\n    Preconditions.checkArgument(slaveID >= 0 && slaveID < slaveStatuses.size());\n    BuildSlaveStatus status = slaveStatuses.get((int) slaveID);\n\n    String animationFrames = \":':.\";\n    int offset = (int) ((currentTimeMs / 400) % animationFrames.length());\n    String glyph = \"[\" + animationFrames.charAt(offset) + \"]\";\n\n    if (status.getRulesBuildingCount() == 0) {\n      if (status.getRulesFailureCount() != 0) {\n        glyph = \"[X]\";\n      } else {\n        glyph = \"[ ]\";\n      }\n    }\n\n    if (status.getRulesFailureCount() != 0) {\n      return ansi.asErrorText(glyph);\n    } else if (status.getTotalRulesCount() != 0\n        && status.getRulesFinishedCount() == status.getTotalRulesCount()) {\n      return ansi.asSuccessText(glyph);\n    } else {\n      return glyph;\n    }\n  }\n}<fim_middle>// class below has no smell\n"}