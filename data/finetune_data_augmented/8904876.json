{"text": "<fim_prefix>    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n      }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"mark_cleaned_result(\");\n      boolean first = true;\n      sb.append(\"o1:\");\n      if (this.o1 == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.o1);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class mark_cleaned_resultStandardSchemeFactory implements SchemeFactory {\n      public mark_cleaned_resultStandardScheme getScheme() {\n        return new mark_cleaned_resultStandardScheme();\n      }\n    }\n    private static class mark_cleaned_resultStandardScheme extends StandardScheme<mark_cleaned_result> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, mark_cleaned_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 1: // O1\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.o1 = new MetaException();\n                struct.o1.read(iprot);\n                struct.setO1IsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, mark_cleaned_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.o1 != null) {\n          oprot.writeFieldBegin(O1_FIELD_DESC);\n          struct.o1.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class mark_cleaned_resultTupleSchemeFactory implements SchemeFactory {\n      public mark_cleaned_resultTupleScheme getScheme() {\n        return new mark_cleaned_resultTupleScheme();\n      }\n    }\n    private static class mark_cleaned_resultTupleScheme extends TupleScheme<mark_cleaned_result> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, mark_cleaned_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetO1()) {\n          optionals.set(0);\n        }\n        oprot.writeBitSet(optionals, 1);\n        if (struct.isSetO1()) {\n          struct.o1.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, mark_cleaned_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        BitSet incoming = iprot.readBitSet(1);\n        if (incoming.get(0)) {\n          struct.o1 = new MetaException();\n          struct.o1.read(iprot);\n          struct.setO1IsSet(true);\n        }\n      }\n    }\n  }\n  @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class mark_compacted_args implements org.apache.thrift.TBase<mark_compacted_args, mark_compacted_args._Fields>, java.io.Serializable, Cloneable, Comparable<mark_compacted_args>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"mark_compacted_args\");\n    private static final org.apache.thrift.protocol.TField CR_FIELD_DESC = new org.apache.thrift.protocol.TField(\"cr\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new mark_compacted_argsStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new mark_compacted_argsTupleSchemeFactory());\n    }\n    private CompactionInfoStruct cr; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      CR((short)1, \"cr\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // CR\n            return CR;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.CR, new org.apache.thrift.meta_data.FieldMetaData(\"cr\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompactionInfoStruct.class)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mark_compacted_args.class, metaDataMap);\n    }\n    public mark_compacted_args() {\n    }\n    public mark_compacted_args(\n      CompactionInfoStruct cr)\n    {\n      this();\n      this.cr = cr;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public mark_compacted_args(mark_compacted_args other) {\n      if (other.isSetCr()) {\n        this.cr = new CompactionInfoStruct(other.cr);\n      }\n    }\n    public mark_compacted_args deepCopy() {\n      return new mark_compacted_args(this);\n    }\n<fim_suffix>    @Override\n    public void clear() {\n      this.cr = null;\n    }<fim_middle>// function below has no smell\n"}