{"text": "<fim_prefix>/*\n* Licensed to the Apache Software Foundation (ASF) under one or more\n* contributor license agreements.  See the NOTICE file distributed with\n* this work for additional information regarding copyright ownership.\n* The ASF licenses this file to You under the Apache License, Version 2.0\n* (the \"License\"); you may not use this file except in compliance with\n* the License.  You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\npackage org.apache.vxquery.types;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n<fim_suffix>public final class SequenceType implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    public static final Map<ItemType, SequenceType[]> BUILTIN_SEQ_TYPES;\n\n    private ItemType itemType;\n    private Quantifier quantifier;\n\n    static {\n        Map<ItemType, SequenceType[]> types = new LinkedHashMap<>();\n\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_ANY_ATOMIC);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_STRING);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_NORMALIZED_STRING);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_TOKEN);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_LANGUAGE);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_NMTOKEN);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_NAME);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_NCNAME);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_ID);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_IDREF);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_ENTITY);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_UNTYPED_ATOMIC);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_DATETIME);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_DATE);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_TIME);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_DURATION);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_YEAR_MONTH_DURATION);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_DAY_TIME_DURATION);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XSEXT_NUMERIC);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_FLOAT);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_DOUBLE);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_DECIMAL);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_INTEGER);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_NON_POSITIVE_INTEGER);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_NEGATIVE_INTEGER);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_LONG);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_LONG);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_INT);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_SHORT);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_BYTE);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_NON_NEGATIVE_INTEGER);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_UNSIGNED_LONG);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_UNSIGNED_INT);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_UNSIGNED_SHORT);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_UNSIGNED_BYTE);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_POSITIVE_INTEGER);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_G_YEAR_MONTH);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_G_YEAR);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_G_MONTH_DAY);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_G_DAY);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_G_MONTH);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_BOOLEAN);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_BASE64_BINARY);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_HEX_BINARY);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_ANY_URI);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_QNAME);\n        createBuiltinEntry(types, BuiltinTypeRegistry.XS_NOTATION);\n        createBuiltinEntry(types, BuiltinTypeRegistry.JS_NULL);\n\n        createBuiltinEntry(types, AnyItemType.INSTANCE);\n        createBuiltinEntry(types, AnyNodeType.INSTANCE);\n        createBuiltinEntry(types, DocumentType.ANYDOCUMENT);\n        createBuiltinEntry(types, ElementType.ANYELEMENT);\n        createBuiltinEntry(types, AttributeType.ANYATTRIBUTE);\n        createBuiltinEntry(types, CommentType.INSTANCE);\n        createBuiltinEntry(types, ProcessingInstructionType.ANYPI);\n\n        createBuiltinEntry(types, ArrayType.INSTANCE);\n        createBuiltinEntry(types, ObjectType.INSTANCE);\n\n        BUILTIN_SEQ_TYPES = Collections.unmodifiableMap(types);\n    }\n\n    private SequenceType(ItemType itemType, Quantifier quantifier) {\n        this.itemType = itemType;\n        this.quantifier = quantifier;\n    }\n\n    private static void createBuiltinEntry(Map<ItemType, SequenceType[]> types, ItemType itemType) {\n        types.put(itemType,\n                new SequenceType[] { new SequenceType(itemType, Quantifier.QUANT_ZERO),\n                        new SequenceType(itemType, Quantifier.QUANT_ONE),\n                        new SequenceType(itemType, Quantifier.QUANT_QUESTION),\n                        new SequenceType(itemType, Quantifier.QUANT_STAR),\n                        new SequenceType(itemType, Quantifier.QUANT_PLUS), });\n    }\n\n    public static SequenceType create(ItemType itemType, Quantifier quantifier) {\n        SequenceType[] types = BUILTIN_SEQ_TYPES.get(itemType);\n        if (types == null) {\n            return new SequenceType(itemType, quantifier);\n        }\n        return types[quantifier.ordinal()];\n    }\n\n    public ItemType getItemType() {\n        return itemType;\n    }\n\n    public Quantifier getQuantifier() {\n        return quantifier;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((itemType == null) ? 0 : itemType.hashCode());\n        result = prime * result + ((quantifier == null) ? 0 : quantifier.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        SequenceType other = (SequenceType) obj;\n        if (itemType == null) {\n            if (other.itemType != null)\n                return false;\n        } else if (!itemType.equals(other.itemType))\n            return false;\n        if (quantifier != other.quantifier)\n            return false;\n        return true;\n    }\n\n    public String toString() {\n        return String.valueOf(itemType) + Quantifier.toString(quantifier);\n    }\n}<fim_middle>// class below has no smell\n"}