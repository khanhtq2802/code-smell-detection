{"text": "<fim_prefix>      break;\n    }\n  }\n  public Object getFieldValue(_Fields field) {\n    switch (field) {\n    case REWRITE_COMMANDS:\n      return getRewriteCommands();\n    }\n    throw new IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new IllegalArgumentException();\n    }\n    switch (field) {\n    case REWRITE_COMMANDS:\n      return isSetRewriteCommands();\n    }\n    throw new IllegalStateException();\n  }\n  @Override\n  public boolean equals(Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof RewriteConfigsRequest)\n      return this.equals((RewriteConfigsRequest)that);\n    return false;\n  }\n  public boolean equals(RewriteConfigsRequest that) {\n    if (that == null)\n      return false;\n    boolean this_present_rewriteCommands = true && this.isSetRewriteCommands();\n    boolean that_present_rewriteCommands = true && that.isSetRewriteCommands();\n    if (this_present_rewriteCommands || that_present_rewriteCommands) {\n      if (!(this_present_rewriteCommands && that_present_rewriteCommands))\n        return false;\n      if (!this.rewriteCommands.equals(that.rewriteCommands))\n        return false;\n    }\n    return true;\n  }\n  @Override\n  public int hashCode() {\n    List<Object> list = new ArrayList<Object>();\n    boolean present_rewriteCommands = true && (isSetRewriteCommands());\n    list.add(present_rewriteCommands);\n    if (present_rewriteCommands)\n      list.add(rewriteCommands);\n    return list.hashCode();\n  }\n  @Override\n  public int compareTo(RewriteConfigsRequest other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    lastComparison = Boolean.valueOf(isSetRewriteCommands()).compareTo(other.isSetRewriteCommands());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetRewriteCommands()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewriteCommands, other.rewriteCommands);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n  }\n  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n  }\n  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder(\"RewriteConfigsRequest(\");\n    boolean first = true;\n    sb.append(\"rewriteCommands:\");\n    if (this.rewriteCommands == null) {\n      sb.append(\"null\");\n    } else {\n      sb.append(this.rewriteCommands);\n    }\n    first = false;\n    sb.append(\")\");\n    return sb.toString();\n  }\n  public void validate() throws org.apache.thrift.TException {\n    // check for required fields\n    // check for sub-struct validity\n  }\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    try {\n      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n    try {\n      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private static class RewriteConfigsRequestStandardSchemeFactory implements SchemeFactory {\n    public RewriteConfigsRequestStandardScheme getScheme() {\n      return new RewriteConfigsRequestStandardScheme();\n    }\n  }\n  private static class RewriteConfigsRequestStandardScheme extends StandardScheme<RewriteConfigsRequest> {\n    public void read(org.apache.thrift.protocol.TProtocol iprot, RewriteConfigsRequest struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TField schemeField;\n      iprot.readStructBegin();\n      while (true)\n      {\n        schemeField = iprot.readFieldBegin();\n        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n          break;\n        }\n        switch (schemeField.id) {\n          case 1: // REWRITE_COMMANDS\n            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {\n              {\n                org.apache.thrift.protocol.TList _list400 = iprot.readListBegin();\n                struct.rewriteCommands = new ArrayList<ConfigRewrite>(_list400.size);\n                ConfigRewrite _elem401;\n                for (int _i402 = 0; _i402 < _list400.size; ++_i402)\n                {\n                  _elem401 = new ConfigRewrite();\n                  _elem401.read(iprot);\n                  struct.rewriteCommands.add(_elem401);\n                }\n                iprot.readListEnd();\n              }\n              struct.setRewriteCommandsIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          default:\n            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n        }\n        iprot.readFieldEnd();\n      }\n      iprot.readStructEnd();\n      // check for required fields of primitive type, which can't be checked in the validate method\n      struct.validate();\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot, RewriteConfigsRequest struct) throws org.apache.thrift.TException {\n      struct.validate();\n      oprot.writeStructBegin(STRUCT_DESC);\n      if (struct.rewriteCommands != null) {\n        oprot.writeFieldBegin(REWRITE_COMMANDS_FIELD_DESC);\n        {\n          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rewriteCommands.size()));\n          for (ConfigRewrite _iter403 : struct.rewriteCommands)\n          {\n            _iter403.write(oprot);\n          }\n          oprot.writeListEnd();\n        }\n        oprot.writeFieldEnd();\n      }\n      oprot.writeFieldStop();\n      oprot.writeStructEnd();\n    }\n  }\n  private static class RewriteConfigsRequestTupleSchemeFactory implements SchemeFactory {\n    public RewriteConfigsRequestTupleScheme getScheme() {\n      return new RewriteConfigsRequestTupleScheme();\n    }\n  }\n<fim_suffix>  private static class RewriteConfigsRequestTupleScheme extends TupleScheme<RewriteConfigsRequest> {\n    @Override\n    public void write(org.apache.thrift.protocol.TProtocol prot, RewriteConfigsRequest struct) throws org.apache.thrift.TException {\n      TTupleProtocol oprot = (TTupleProtocol) prot;\n      BitSet optionals = new BitSet();\n      if (struct.isSetRewriteCommands()) {\n        optionals.set(0);\n      }\n      oprot.writeBitSet(optionals, 1);\n      if (struct.isSetRewriteCommands()) {\n        {\n          oprot.writeI32(struct.rewriteCommands.size());\n          for (ConfigRewrite _iter404 : struct.rewriteCommands)\n          {\n            _iter404.write(oprot);\n          }\n        }\n      }\n    }\n    @Override\n    public void read(org.apache.thrift.protocol.TProtocol prot, RewriteConfigsRequest struct) throws org.apache.thrift.TException {\n      TTupleProtocol iprot = (TTupleProtocol) prot;\n      BitSet incoming = iprot.readBitSet(1);\n      if (incoming.get(0)) {\n        {\n          org.apache.thrift.protocol.TList _list405 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());\n          struct.rewriteCommands = new ArrayList<ConfigRewrite>(_list405.size);\n          ConfigRewrite _elem406;\n          for (int _i407 = 0; _i407 < _list405.size; ++_i407)\n          {\n            _elem406 = new ConfigRewrite();\n            _elem406.read(iprot);\n            struct.rewriteCommands.add(_elem406);\n          }\n        }\n        struct.setRewriteCommandsIsSet(true);\n      }\n    }\n  }<fim_middle>// class below has no smell\n"}