{"text": "<fim_prefix>import org.eclipse.xtext.common.types.JvmMember;\nimport org.eclipse.xtext.common.types.JvmOperation;\nimport org.eclipse.xtext.common.types.JvmTypeParameter;\nimport org.eclipse.xtext.common.types.JvmTypeParameterDeclarator;\nimport org.eclipse.xtext.common.types.JvmTypeReference;\nimport org.eclipse.xtext.common.types.JvmVisibility;\nimport org.eclipse.xtext.common.types.access.IMirror;\nimport org.eclipse.xtext.common.types.access.IMirrorExtension;\nimport org.eclipse.xtext.common.types.access.TypeResource;\nimport org.eclipse.xtext.resource.IEObjectDescription;\nimport org.eclipse.xtext.resource.IResourceDescription;\nimport org.eclipse.xtext.util.IResourceScopeCache;\nimport org.eclipse.xtext.util.Tuples;\nimport com.google.inject.Inject;\nimport com.google.inject.Provider;\nimport com.google.inject.Singleton;\n/**\n * Calculates the hash of the signature of a {@link JvmDeclaredType}.\n * The signature spans relevant information that could change the linking of clients.\n * The hash is stored in the {@link IEObjectDescription} of the type to allow fast calculation of \n * {@link org.eclipse.xtext.resource.IResourceDescription.Manager#isAffected(org.eclipse.xtext.resource.IResourceDescription.Delta, IResourceDescription)}.\n *\n * @author Jan Koehnlein - Initial contribution and API\n */\n@Singleton\npublic class JvmDeclaredTypeSignatureHashProvider {\n\tprivate static final Logger LOG = Logger.getLogger(JvmDeclaredTypeSignatureHashProvider.class);\n\t@Inject\n\tprivate IResourceScopeCache cache;\n\t@Inject\n\tprivate Provider<SignatureHashBuilder> signatureBuilderProvider;\n\tprivate static final String HASH_CACHE_KEY = \"SignatureHash\";\n\tpublic String getHash(final JvmDeclaredType type) {\n\t\tif(type.eResource() instanceof TypeResource) {\n\t\t\tIMirror mirror = ((TypeResource)type.eResource()).getMirror();\n\t\t\tif(mirror instanceof IMirrorExtension && ((IMirrorExtension) mirror).isSealed())\n\t\t\t\treturn type.getIdentifier();\n\t\t}\n\t\treturn cache.get(Tuples.create(HASH_CACHE_KEY, type), type.eResource(), new Provider<String>() {\n\t\t\t@Override\n\t\t\tpublic String get() {\n\t\t\t\treturn signatureBuilderProvider.get().appendSignature(type).hash();\n\t\t\t}\n\t\t});\n\t}\n<fim_suffix>\tpublic static class SignatureHashBuilder {\n\t\t@Inject\n\t\tprivate JvmDeclaredTypeSignatureHashProvider hashProvider;\n\t\t@Inject\n\t\tprivate AnnotationSignatureRelevanceUtil annotationRelevance;\n\t\tprivate MessageDigest digest;\n\t\tprivate StringBuilder builder;\n\t\tpublic SignatureHashBuilder() {\n\t\t\tdigest = createDigest();\n\t\t\tif(digest == null)\n\t\t\t\tbuilder = new StringBuilder();\n\t\t}\n\t\tprotected MessageDigest createDigest() {\n\t\t\ttry {\n\t\t\t\treturn MessageDigest.getInstance(\"MD5\");\n\t\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\t\tLOG.error(\"Error creating message digest\", e);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tprotected SignatureHashBuilder append(String s) {\n\t\t\tif(digest != null)\n\t\t\t\ttry {\n\t\t\t\t\tdigest.update(s.getBytes(\"UTF8\"));\n\t\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\t\tLOG.error(\"Error encoding String\", e);\n\t\t\t\t}\n\t\t\tif(builder != null)\n\t\t\t\tbuilder.append(s);\n\t\t\treturn this;\n\t\t}\n\t\tpublic SignatureHashBuilder appendSignature(JvmDeclaredType type) {\n\t\t\tif (type.getVisibility() != JvmVisibility.PRIVATE) {\n\t\t\t\tappendAnnotationReferences(type);\n\t\t\t\tappendVisibility(type.getVisibility()).append(\" \");\n\t\t\t\tif (type.isAbstract())\n\t\t\t\t\tappend(\"abstract \");\n\t\t\t\tif (type.isStatic())\n\t\t\t\t\tappend(\"static \");\n\t\t\t\tif (type.isFinal())\n\t\t\t\t\tappend(\"final \");\n\t\t\t\tappend(\"class \").append(type.getIdentifier());\n\t\t\t\tif (type instanceof JvmTypeParameterDeclarator)\n\t\t\t\t\tappendTypeParameters((JvmTypeParameterDeclarator) type);\n\t\t\t\tappend(\"\\n\").appendSuperTypeSignatures(type).appendMemberSignatures(type, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tprotected SignatureHashBuilder appendMemberSignatures(JvmDeclaredType type, boolean innerTypesOnly) {\n\t\t\tIterable<? extends JvmMember> members = type.getMembers();\n\t\t\tif(innerTypesOnly)\n\t\t\t\tmembers = filter(members, JvmDeclaredType.class);\n\t\t\tfor (JvmMember member : members) {\n\t\t\t\tif (member.getSimpleName() != null) {\n\t\t\t\t\tappendAnnotationReferences(member);\n\t\t\t\t\tif (member instanceof JvmOperation) \n\t\t\t\t\t\tappendSignature((JvmOperation) member);\n\t\t\t\t\telse if (member instanceof JvmConstructor) \n\t\t\t\t\t\tappendSignature((JvmConstructor) member);\n\t\t\t\t\telse if (member instanceof JvmField) \n\t\t\t\t\t\tappendSignature((JvmField) member);\n\t\t\t\t\telse if (member instanceof JvmDeclaredType) {\n\t\t\t\t\t\tappend(member.getQualifiedName());\n\t\t\t\t\t\tappendMemberSignatures((JvmDeclaredType) member, true);\n\t\t\t\t\t}\n\t\t\t\t\tappend(\"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tprotected void appendAnnotationReferences(JvmAnnotationTarget target) {\n\t\t\tfor(JvmAnnotationReference annotationReference: target.getAnnotations()) {\n\t\t\t\tif(annotationRelevance.isRelevant(annotationReference)) \n\t\t\t\t\tappend(hashProvider.getHash(annotationReference.getAnnotation()))\n\t\t\t\t\t\t.append(\" \");\n\t\t\t}\n\t\t}\n\t\tprotected SignatureHashBuilder appendSuperTypeSignatures(JvmDeclaredType type) {\n\t\t\tfor(JvmTypeReference superType: type.getSuperTypes()) {\n\t\t\t\tappend(\"super \");\n\t\t\t\tappend(superType.getIdentifier());\n\t\t\t\tappend(\"\\n\");\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tprotected SignatureHashBuilder appendSignature(JvmOperation operation) {\n\t\t\tappendVisibility(operation.getVisibility()).append(\" \");\n\t\t\tif (operation.isAbstract())\n\t\t\t\tappend(\"abstract \");\n\t\t\tif (operation.isStatic())\n\t\t\t\tappend(\"static \");\n\t\t\tif (operation.isFinal())\n\t\t\t\tappend(\"final \");\n\t\t\tappendType(operation.getReturnType()).appendTypeParameters(operation).append(\" \")\n\t\t\t\t\t.append(operation.getSimpleName()).append(\"(\");\n\t\t\tfor (JvmFormalParameter p : operation.getParameters()) {\n\t\t\t\tappendType(p.getParameterType());\n\t\t\t\tappend(\" \");\n\t\t\t}\n\t\t\tappend(\") \");\n\t\t\tfor (JvmTypeReference ex : operation.getExceptions()) {\n\t\t\t\tappendType(ex).append(\" \");\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tprotected SignatureHashBuilder appendSignature(JvmField field) {\n\t\t\tappendVisibility(field.getVisibility()).append(\" \");\n\t\t\tif (field.isStatic())\n\t\t\t\tappend(\"static \");\n\t\t\tif (field.isFinal())\n\t\t\t\tappend(\"final \");\n\t\t\treturn appendType(field.getType()).append(\" \").append(field.getSimpleName());\n\t\t}\n\t\tprotected SignatureHashBuilder appendSignature(JvmConstructor operation) {\n\t\t\tappendVisibility(operation.getVisibility()).appendTypeParameters(operation).append(\"(\");\n\t\t\tfor (JvmFormalParameter p : operation.getParameters()) {\n\t\t\t\tappendType(p.getParameterType()).append(\" \");\n\t\t\t}\n\t\t\tappend(\") \");\n\t\t\tfor (JvmTypeReference ex : operation.getExceptions()) {\n\t\t\t\tappendType(ex).append(\" \");\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tprotected SignatureHashBuilder appendTypeParameters(JvmTypeParameterDeclarator decl) {\n\t\t\tappend(\"<\");\n\t\t\tfor (JvmTypeParameter tp : decl.getTypeParameters()) {\n\t\t\t\tappendTypeParameter(tp).append(\",\");\n\t\t\t}\n\t\t\tappend(\">\");\n\t\t\treturn this;\n\t\t}\n\t\tprotected SignatureHashBuilder appendType(JvmTypeReference ref) {\n\t\t\tif (ref != null && ref.getIdentifier() != null) {\n\t\t\t\tappend(ref.getIdentifier());\n\t\t\t} else {\n\t\t\t\tappend(\"*unresolved*\");\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tprotected SignatureHashBuilder appendVisibility(JvmVisibility v) {\n\t\t\tappend(v.getLiteral());\n\t\t\treturn this;\n\t\t}\n\t\tprotected SignatureHashBuilder appendTypeParameter(JvmTypeParameter p) {\n\t\t\tif (p != null && p.getIdentifier() != null) {\n\t\t\t\tappend(p.getIdentifier());\n\t\t\t} else {\n\t\t\t\tappend(\"*unresolved*\");\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tpublic String hash() {\n\t\t\ttry {\n\t\t\t\tif(digest != null) {\n\t\t\t\t\tbyte[] digestBytes = digest.digest();\n\t\t\t\t\treturn new BigInteger(digestBytes).toString(16);\n\t\t\t\t} else {\n\t\t\t\t\treturn builder.toString();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLOG.error(\"Error hashing JvmDeclaredType signature\", e);\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t}\n\t}<fim_middle>// class below is blob\n"}