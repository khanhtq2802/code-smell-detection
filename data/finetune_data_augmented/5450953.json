{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.pulsar.io.docs;\n\nimport com.beust.jcommander.JCommander;\nimport com.beust.jcommander.Parameter;\nimport com.google.common.base.Strings;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Set;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.pulsar.io.core.annotations.Connector;\nimport org.apache.pulsar.io.core.annotations.FieldDoc;\nimport org.reflections.Reflections;\nimport org.reflections.util.ConfigurationBuilder;\n\n<fim_suffix>@Slf4j\npublic class ConnectorDocGenerator {\n\n    private static final String INDENT = \"  \";\n\n    private static Reflections newReflections() throws Exception {\n        List<URL> urls = new ArrayList<>();\n        ClassLoader[] classLoaders = new ClassLoader[] {\n            ConnectorDocGenerator.class.getClassLoader(),\n            Thread.currentThread().getContextClassLoader()\n        };\n        for (int i = 0; i < classLoaders.length; i++) {\n            if (classLoaders[i] instanceof URLClassLoader) {\n                urls.addAll(Arrays.asList(((URLClassLoader) classLoaders[i]).getURLs()));\n            } else {\n                throw new RuntimeException(\"ClassLoader '\" + classLoaders[i] + \" is not an instance of URLClassLoader\");\n            }\n        }\n        ConfigurationBuilder confBuilder = new ConfigurationBuilder();\n        confBuilder.setUrls(urls);\n        return new Reflections(confBuilder);\n    }\n\n    private final Reflections reflections;\n\n    public ConnectorDocGenerator() throws Exception {\n        this.reflections = newReflections();\n    }\n\n    private void generateConnectorYaml(Class configClass, PrintWriter writer) {\n        log.info(\"Processing connector config class : {}\", configClass);\n\n        writer.println(\"configs:\");\n\n        Field[] fields = configClass.getDeclaredFields();\n        for (Field field : fields) {\n            if (Modifier.isStatic(field.getModifiers())) {\n                continue;\n            }\n            FieldDoc fieldDoc = field.getDeclaredAnnotation(FieldDoc.class);\n            if (null == fieldDoc) {\n                throw new RuntimeException(\"Missing `FieldDoc` for field '\" + field.getName() + \"'\");\n            }\n            writer.println(INDENT + \"# \" + fieldDoc.help());\n            String fieldPrefix = \"\";\n            if (!fieldDoc.required()) {\n                fieldPrefix = \"# \";\n            }\n            if (Strings.isNullOrEmpty(fieldDoc.defaultValue())) {\n                writer.println(INDENT + fieldPrefix + field.getName() + \":\");\n            } else {\n                writer.println(INDENT + fieldPrefix + field.getName() + \": \" + fieldDoc.defaultValue());\n            }\n            writer.println();\n        }\n        writer.flush();\n    }\n\n    private void generateConnectorYaml(Class connectorClass, Connector connectorDef, PrintWriter writer) {\n        log.info(\"Processing connector definition : {}\", connectorDef);\n        writer.println(\"# \" + connectorDef.type() + \" connector : \" + connectorClass.getName());\n        writer.println();\n        writer.println(\"# \" + connectorDef.help());\n        writer.println();\n        generateConnectorYaml(connectorDef.configClass(), writer);\n    }\n\n    private void generatorConnectorYamls(String outputDir) throws IOException  {\n        Set<Class<?>> connectorClasses = reflections.getTypesAnnotatedWith(Connector.class);\n        log.info(\"Retrieve all `Connector` annotated classes : {}\", connectorClasses);\n\n        for (Class<?> connectorClass : connectorClasses) {\n            Connector connectorDef = connectorClass.getDeclaredAnnotation(Connector.class);\n            try (FileWriter fileWriter = new FileWriter(\n                Paths.get(\n                    outputDir,\n                    \"pulsar-io-\" + connectorDef.name()\n                        + \"-\" + connectorDef.type().name().toLowerCase()).toString() + \".yml\")) {\n                PrintWriter pw = new PrintWriter(fileWriter);\n                generateConnectorYaml(connectorClass, connectorDef, pw);\n                pw.flush();\n            }\n        }\n    }\n\n    /**\n     * Args for stats generator.\n     */\n    private static class MainArgs {\n\n        @Parameter(\n            names = {\n                \"-o\", \"--output-dir\"\n            },\n            description = \"The output dir to dump connector docs\",\n            required = true\n        )\n        String outputDir = null;\n\n        @Parameter(\n            names = {\n                \"-h\", \"--help\"\n            },\n            description = \"Show this help message\")\n        boolean help = false;\n\n    }\n\n    public static void main(String[] args) throws Exception {\n        MainArgs mainArgs = new MainArgs();\n\n        JCommander commander = new JCommander();\n        try {\n            commander.setProgramName(\"connector-doc-gen\");\n            commander.addObject(mainArgs);\n            commander.parse(args);\n            if (mainArgs.help) {\n                commander.usage();\n                Runtime.getRuntime().exit(0);\n                return;\n            }\n        } catch (Exception e) {\n            commander.usage();\n            Runtime.getRuntime().exit(-1);\n            return;\n        }\n\n        ConnectorDocGenerator docGen = new ConnectorDocGenerator();\n        docGen.generatorConnectorYamls(mainArgs.outputDir);\n    }\n\n}<fim_middle>// class below has no smell\n"}