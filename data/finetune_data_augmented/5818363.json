{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.tinkerpop.gremlin.structure;\n\nimport org.apache.tinkerpop.gremlin.structure.util.empty.EmptyProperty;\n\nimport java.util.NoSuchElementException;\nimport java.util.function.Consumer;\nimport java.util.function.Supplier;\n\n/**\n * A {@link Property} denotes a key/value pair associated with an {@link Edge}. A property is much like a Java8\n * {@link java.util.Optional} in that a property can be not present (i.e. empty). The key of a property is always a\n * String and the value of a property is an arbitrary Java object. Each underlying graph engine will typically have\n * constraints on what Java objects are allowed to be used as values.\n *\n * @author Marko A. Rodriguez (http://markorodriguez.com)\n * @author Stephen Mallette (http://stephen.genoprime.com)\n */\npublic interface Property<V> {\n\n    /**\n     * The key of the property.\n     *\n     * @return The property key\n     */\n    public String key();\n\n    /**\n     * The value of the property.\n     *\n     * @return The property value\n     * @throws NoSuchElementException thrown if the property is empty\n     */\n    public V value() throws NoSuchElementException;\n\n    /**\n     * Whether the property is empty or not.\n     *\n     * @return True if the property exists, else false\n     */\n    public boolean isPresent();\n\n    /**\n     * If the property is present, the consume the value as specified by the {@link Consumer}.\n     *\n     * @param consumer The consumer to process the existing value.\n     */\n    public default void ifPresent(final Consumer<? super V> consumer) {\n        if (this.isPresent())\n            consumer.accept(this.value());\n    }\n\n    /**\n     * If the value is present, return the value, else return the provided value.\n     *\n     * @param otherValue The value to return if the property is not present\n     * @return A value\n     */\n    public default V orElse(final V otherValue) {\n        return this.isPresent() ? this.value() : otherValue;\n    }\n\n    /**\n     * If the value is present, return the value, else generate a value given the {@link Supplier}.\n     *\n     * @param valueSupplier The supplier to use to generate a value if the property is not present\n     * @return A value\n     */\n    public default V orElseGet(final Supplier<? extends V> valueSupplier) {\n        return this.isPresent() ? this.value() : valueSupplier.get();\n    }\n\n    /**\n     * If the value is present, return the value, else throw the exception generated by the {@link Supplier}.\n     *\n     * @param exceptionSupplier The supplier to generate an exception if the property is not present\n     * @param <E>               The exception type\n     * @return A value\n     * @throws E if the property is not present, the exception is thrown\n     */\n    public default <E extends Throwable> V orElseThrow(final Supplier<? extends E> exceptionSupplier) throws E {\n        if (this.isPresent()) return this.value();\n        else\n            throw exceptionSupplier.get();\n    }\n\n    /**\n     * Get the element that this property is associated with.\n     *\n     * @return The element associated with this property (i.e. {@link Vertex}, {@link Edge}, or {@link VertexProperty}).\n     */\n    public Element element();\n\n    /**\n     * Remove the property from the associated element.\n     */\n    public void remove();\n\n    /**\n     * Create an empty property that is not present.\n     *\n     * @param <V> The value class of the empty property\n     * @return A property that is not present\n     */\n    public static <V> Property<V> empty() {\n        return EmptyProperty.instance();\n    }\n\n    /**\n     * Common exceptions to use with a property.\n     */\n<fim_suffix>    public static class Exceptions {\n\n        private Exceptions() {\n        }\n\n        public static IllegalArgumentException propertyKeyCanNotBeEmpty() {\n            return new IllegalArgumentException(\"Property key can not be the empty string\");\n        }\n\n        public static IllegalArgumentException propertyKeyCanNotBeNull() {\n            return new IllegalArgumentException(\"Property key can not be null\");\n        }\n\n        public static IllegalArgumentException propertyValueCanNotBeNull() {\n            return new IllegalArgumentException(\"Property value can not be null\");\n        }\n\n        public static IllegalArgumentException propertyKeyCanNotBeAHiddenKey(final String key) {\n            return new IllegalArgumentException(\"Property key can not be a hidden key: \" + key);\n        }\n\n        public static IllegalStateException propertyDoesNotExist() {\n            return new IllegalStateException(\"The property does not exist as it has no key, value, or associated element\");\n        }\n\n        public static IllegalStateException propertyDoesNotExist(final Element element, final String key) {\n            return new IllegalStateException(\"The property does not exist as the key has no associated value for the provided element: \" + element + \":\" + key);\n        }\n\n        public static IllegalArgumentException dataTypeOfPropertyValueNotSupported(final Object val) {\n        \treturn dataTypeOfPropertyValueNotSupported(val, null);\n        }\n\n        public static IllegalArgumentException dataTypeOfPropertyValueNotSupported(final Object val, final Exception rootCause) {\n            return new IllegalArgumentException(String.format(\"Property value [%s] is of type %s is not supported\", val, val.getClass()), rootCause);\n        }\n\n        public static IllegalStateException propertyRemovalNotSupported() {\n            return new IllegalStateException(\"Property removal is not supported\");\n        }\n    }\n\n}<fim_middle>// class below has no smell\n"}