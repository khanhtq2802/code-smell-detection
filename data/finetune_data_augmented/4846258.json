{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.standalone.cli.info;\n\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\n\nimport javax.jcr.NodeIterator;\nimport javax.jcr.PropertyIterator;\n\nimport org.apache.commons.chain.Command;\nimport org.apache.commons.chain.Context;\nimport org.apache.jackrabbit.standalone.cli.CommandHelper;\n\n/**\n * Ls superclass\n */\n<fim_suffix>public abstract class AbstractLs implements Command {\n    /** bundle */\n    private static ResourceBundle bundle = CommandHelper.getBundle();\n\n    /** long width */\n    protected int longWidth = 9;\n\n    /** max items to list */\n    private int defaultMaxItems = 100;\n\n    /** max number of items */\n    private String maxItemsKey = \"maxItems\";\n\n    /** show path flag */\n    private boolean path;\n\n    /**\n     * Print the footer\n     * @param ctx\n     *        the <code>Context</code>\n     * @param iter\n     *        the <code>Iterator</code>\n     */\n    protected void printFooter(Context ctx, Iterator iter) {\n        CommandHelper.getOutput(ctx).println();\n        CommandHelper.getOutput(ctx).println(bundle.getString(\"word.total\"));\n        if (iter instanceof NodeIterator) {\n            printFooter(ctx, (NodeIterator) iter);\n        } else if (iter instanceof PropertyIterator) {\n            printFooter(ctx, (PropertyIterator) iter);\n        }\n    }\n\n    /**\n     * Print footer\n     * @param ctx\n     *        the <code>Context</code>\n     * @param iter\n     *        the <code>Iterator</code>\n     */\n    private void printFooter(Context ctx, NodeIterator iter) {\n        CommandHelper.getOutput(ctx).println(\n            iter.getSize() + \" \" + bundle.getString(\"word.nodes\"));\n    }\n\n    /**\n     * Print footer\n     * @param ctx\n     *        the <code>Context</code>\n     * @param iter\n     *        the <code>Iterator</code>\n     */\n    private void printFooter(Context ctx, PropertyIterator iter) {\n        CommandHelper.getOutput(ctx).println(\n            iter.getSize() + \" \" + bundle.getString(\"word.properties\"));\n    }\n\n    /**\n     * @return the default max number of <code>Items</code> s to show\n     */\n    public int getDefaultMaxItems() {\n        return defaultMaxItems;\n    }\n\n    /**\n     * @param maxItems\n     *        the default max number of <code>Items</code> s to set\n     */\n    public void setDefaultMaxItems(int maxItems) {\n        this.defaultMaxItems = maxItems;\n    }\n\n    /**\n     * @return the path\n     */\n    public boolean isPath() {\n        return path;\n    }\n\n    /**\n     * @param path\n     *        the path to set\n     */\n    public void setPath(boolean path) {\n        this.path = path;\n    }\n\n    /**\n     * @return the max number of items key\n     */\n    public String getMaxItemsKey() {\n        return maxItemsKey;\n    }\n\n    /**\n     * @param maxItemsKey\n     *        the max number of items key to set\n     */\n    public void setMaxItemsKey(String maxItemsKey) {\n        this.maxItemsKey = maxItemsKey;\n    }\n\n    /**\n     * @param ctx\n     *        the <code>Context</code>\n     * @return the max number of <code>Item</code> s to show\n     */\n    protected int getMaxItems(Context ctx) {\n        String maxItems = (String) ctx.get(this.maxItemsKey);\n        if (maxItems == null) {\n            maxItems = new Integer(this.defaultMaxItems).toString();\n        }\n        return Integer.valueOf(maxItems).intValue();\n    }\n\n}<fim_middle>// class below has no smell\n"}