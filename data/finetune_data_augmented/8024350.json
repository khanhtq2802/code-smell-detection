{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2010, 2017 itemis AG (http://www.itemis.eu) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *******************************************************************************/\npackage org.eclipse.xtext.ui.editor.quickfix;\n\nimport java.util.List;\n\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.xtext.ui.editor.model.edit.CompositeModificationWrapper;\nimport org.eclipse.xtext.ui.editor.model.edit.ICompositeModification;\nimport org.eclipse.xtext.ui.editor.model.edit.IModification;\nimport org.eclipse.xtext.ui.editor.model.edit.IMultiModification;\nimport org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;\nimport org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext;\nimport org.eclipse.xtext.ui.editor.model.edit.MultiModificationWrapper;\nimport org.eclipse.xtext.ui.editor.model.edit.SemanticModificationWrapper;\nimport org.eclipse.xtext.validation.Issue;\n\nimport com.google.common.collect.Lists;\nimport com.google.inject.Inject;\n\n/**\n * @author Jan Koehnlein - Initial contribution and API\n */\n<fim_suffix>public class IssueResolutionAcceptor {\n\n\tprivate List<IssueResolution> issueResolutions = Lists.newArrayList();\n\n\tprivate IssueModificationContext.Factory modificationContextFactory;\n\n\t@Inject\n\tpublic IssueResolutionAcceptor(IssueModificationContext.Factory modificationContextFactory) {\n\t\tthis.modificationContextFactory = modificationContextFactory;\n\t}\n\n\tpublic void accept(Issue issue, String label, String description, String image, IModification modification) {\n\t\tissueResolutions.add(new IssueResolution(label, description, image, modificationContextFactory.createModificationContext(issue),\n\t\t\t\tmodification));\n\t}\n\n\tpublic void accept(Issue issue, String label, String description, String image, ISemanticModification semanticModification) {\n\t\tSemanticModificationWrapper modificationWrapper = new SemanticModificationWrapper(issue.getUriToProblem(), semanticModification);\n\t\tissueResolutions.add(new IssueResolution(label, description, image, modificationContextFactory.createModificationContext(issue),\n\t\t\t\tmodificationWrapper));\n\t}\n\t\n\t/**\n\t * @since 2.4\n\t */\n\tpublic void accept(Issue issue, String label, String description, String image, IModification modification, int relevance) {\n\t\tissueResolutions.add(new IssueResolution(label, description, image, modificationContextFactory.createModificationContext(issue),\n\t\t\t\tmodification, relevance));\n\t}\n\t\n\t/**\n\t * @since 2.4\n\t */\n\tpublic void accept(Issue issue, String label, String description, String image, ISemanticModification semanticModification, int relevance) {\n\t\tSemanticModificationWrapper modificationWrapper = new SemanticModificationWrapper(issue.getUriToProblem(), semanticModification);\n\t\tissueResolutions.add(new IssueResolution(label, description, image, modificationContextFactory.createModificationContext(issue),\n\t\t\t\tmodificationWrapper, relevance));\n\t}\n\n\t/**\n\t * Use as for a multi-quickfix methods.<br>\n\t * This method will be called multiple times if more than one issue was selected to fix.\n\t * \n\t * @see IMultiModification\n\t * \n\t * @since 2.13\n\t */\n\tpublic <T extends EObject> void acceptMulti(Issue issue, String label, String description, String image,\n\t\t\tIMultiModification<T> modification) {\n\t\tacceptMulti(issue, label, description, image, modification, 0);\n\t}\n\t\n\t/**\n\t * Use as for a multi-quickfix methods.<br>\n\t * This method will be called multiple times if more than one issue was selected to fix.\n\t * \n\t * @see IMultiModification\n\t * \n\t * @since 2.13\n\t */\n\tpublic <T extends EObject> void acceptMulti(Issue issue, String label, String description, String image,\n\t\t\tIMultiModification<T> modification, int relevance) {\n\t\tMultiModificationWrapper wrapper = new MultiModificationWrapper(issue, modification);\n\t\tissueResolutions.add(new IssueResolution(label, description, image, modificationContextFactory.createModificationContext(issue), wrapper, relevance));\n\t}\n\n\t/**\n\t * Use as for a multi-quickfix methods.<br>\n\t * This method will be called multiple times if more than one issue was selected to fix.\n\t * \n\t * @see ICompositeModification\n\t * \n\t * @since 2.13\n\t */\n\tpublic  <T extends EObject> void acceptMulti(Issue issue, String label, String description, String image, ICompositeModification<T> modification) {\n\t\tacceptMulti(issue, label, description, image, modification, 0);\n\t}\n\n\t/**\n\t * Use as for a multi-quickfix methods.<br>\n\t * This method will be called multiple times if more than one issue was selected to fix.\n\t * \n\t * @see ICompositeModification\n\t * \n\t * @since 2.13\n\t */\n\tpublic <T extends EObject> void acceptMulti(Issue issue, String label, String description, String image, ICompositeModification<T> modification,\n\t\t\tint relevance) {\n\t\tCompositeModificationWrapper wrapper = new CompositeModificationWrapper(issue, modification);\n\t\tissueResolutions.add(new IssueResolution(label, description, image, modificationContextFactory.createModificationContext(issue), wrapper, relevance));\n\t}\n\n\tpublic List<IssueResolution> getIssueResolutions() {\n\t\treturn issueResolutions;\n\t}\n\n}<fim_middle>// class below has no smell\n"}