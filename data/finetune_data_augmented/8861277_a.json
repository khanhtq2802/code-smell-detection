{"text": "<fim_prefix>                        ComputeResourcePreference preference = (ComputeResourcePreference) result;\n                        if (preference.getComputeHostResource()!=null) {\n\t                        ComputeHostPreferenceResource preferenceResource =\n\t                                (ComputeHostPreferenceResource) AppCatalogJPAUtils.getResource(AppCatalogResourceType.COMPUTE_RESOURCE_PREFERENCE, preference);\n\t                        preferenceResourceList.add(preferenceResource);\n                        }\n                    }\n                }\n            } else if (fieldName.equals(ComputeResourcePreferenceConstants.PREFERED_JOB_SUB_PROTOCOL)) {\n                generator.setParameter(ComputeResourcePreferenceConstants.PREFERED_JOB_SUB_PROTOCOL, value);\n                q = generator.selectQuery(em);\n                results = q.getResultList();\n                if (results.size() != 0) {\n                    for (Object result : results) {\n                        ComputeResourcePreference preference = (ComputeResourcePreference) result;\n                        if (preference.getComputeHostResource()!=null) {\n\t\t\t\t\t\t\tComputeHostPreferenceResource preferenceResource = (ComputeHostPreferenceResource) AppCatalogJPAUtils\n\t\t\t\t\t\t\t\t\t.getResource(\n\t\t\t\t\t\t\t\t\t\t\tAppCatalogResourceType.COMPUTE_RESOURCE_PREFERENCE,\n\t\t\t\t\t\t\t\t\t\t\tpreference);\n\t\t\t\t\t\t\tpreferenceResourceList.add(preferenceResource);\n\t\t\t\t\t\t}\n                    }\n                }\n            } else if (fieldName.equals(ComputeResourcePreferenceConstants.PREFERED_DATA_MOVE_PROTOCOL)) {\n                generator.setParameter(ComputeResourcePreferenceConstants.PREFERED_DATA_MOVE_PROTOCOL, value);\n                q = generator.selectQuery(em);\n                results = q.getResultList();\n                if (results.size() != 0) {\n                    for (Object result : results) {\n                        ComputeResourcePreference preference = (ComputeResourcePreference) result;\n                        if (preference.getResourceId()!=null) {\n\t\t\t\t\t\t\tComputeHostPreferenceResource preferenceResource = (ComputeHostPreferenceResource) AppCatalogJPAUtils\n\t\t\t\t\t\t\t\t\t.getResource(\n\t\t\t\t\t\t\t\t\t\t\tAppCatalogResourceType.COMPUTE_RESOURCE_PREFERENCE,\n\t\t\t\t\t\t\t\t\t\t\tpreference);\n\t\t\t\t\t\t\tpreferenceResourceList.add(preferenceResource);\n\t\t\t\t\t\t}\n                    }\n                }\n            } else {\n                em.getTransaction().commit();\n                if (em.isOpen()) {\n                    if (em.getTransaction().isActive()){\n                        em.getTransaction().rollback();\n                    }\n                    em.close();\n                }\n                logger.error(\"Unsupported field name for Compute host preference Resource.\", new IllegalArgumentException());\n                throw new IllegalArgumentException(\"Unsupported field name for Compute host preference Resource.\");\n            }\n            em.getTransaction().commit();\n            if (em.isOpen()) {\n                if (em.getTransaction().isActive()){\n                    em.getTransaction().rollback();\n                }\n                em.close();\n            }\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            throw new AppCatalogException(e);\n        } finally {\n            if (em != null && em.isOpen()) {\n                if (em.getTransaction().isActive()) {\n                    em.getTransaction().rollback();\n                }\n                em.close();\n            }\n        }\n        return preferenceResourceList;\n    }\n    @Override\n    public List<AppCatalogResource> getAll() throws AppCatalogException {\n        return null;\n    }\n    @Override\n    public List<String> getAllIds() throws AppCatalogException {\n        return null;\n    }\n    @Override\n    public List<String> getIds(String fieldName, Object value) throws AppCatalogException {\n        logger.error(\"Unsupported for objects with a composite identifier\");\n        throw new AppCatalogException(\"Unsupported for objects with a composite identifier\");\n    }\n    @Override\n    public void save() throws AppCatalogException {\n        EntityManager em = null;\n        try {\n            em = AppCatalogJPAUtils.getEntityManager();\n            ComputeResourcePreference existingPreference = em.find(ComputeResourcePreference.class, new ComputeResourcePreferencePK(gatewayId, resourceId));\n            em.getTransaction().begin();\n            ComputeResource computeResource = em.find(ComputeResource.class, resourceId);\n            GatewayProfile gatewayProf = em.find(GatewayProfile.class, gatewayId);\n            if (existingPreference != null) {\n                existingPreference.setResourceId(resourceId);\n                existingPreference.setGatewayId(gatewayId);\n                existingPreference.setComputeHostResource(computeResource);\n                existingPreference.setGatewayProfile(gatewayProf);\n                existingPreference.setOverrideByAiravata(overrideByAiravata);\n                existingPreference.setPreferedJobSubmissionProtocol(preferredJobProtocol);\n                existingPreference.setPreferedDataMoveProtocol(preferedDMProtocol);\n                existingPreference.setScratchLocation(scratchLocation);\n                existingPreference.setProjectNumber(projectNumber);\n                existingPreference.setBatchQueue(batchQueue);\n                existingPreference.setLoginUserName(loginUserName);\n                existingPreference.setComputeResourceCSToken(resourceCSToken);\n                existingPreference.setUsageReportingGWId(usageReportingGatewayId);\n                existingPreference.setQualityOfService(qualityOfService);\n                existingPreference.setReservation(reservation);\n                existingPreference.setReservationStartTime(reservationStartTime);\n                existingPreference.setReservationEndTime(reservationEndTime);\n                existingPreference.setSshAccountProvisioner(sshAccountProvisioner);\n                if (sshAccountProvisionerConfigurations != null && !sshAccountProvisionerConfigurations.isEmpty()) {\n                    List<SSHAccountProvisionerConfiguration> configurations = new ArrayList<>();\n                    for (String sshAccountProvisionerConfigName : sshAccountProvisionerConfigurations.keySet()) {\n                        String value = sshAccountProvisionerConfigurations.get(sshAccountProvisionerConfigName);\n                        configurations.add(new SSHAccountProvisionerConfiguration(sshAccountProvisionerConfigName, value, existingPreference));\n                    }\n                    existingPreference.setSshAccountProvisionerConfigurations(configurations);\n                } else {\n                    existingPreference.setSshAccountProvisionerConfigurations(null);\n                }\n                existingPreference.setSshAccountProvisionerAdditionalInfo(sshAccountProvisionerAdditionalInfo);\n                em.merge(existingPreference);\n            } else {\n                ComputeResourcePreference resourcePreference = new ComputeResourcePreference();\n                resourcePreference.setResourceId(resourceId);\n                resourcePreference.setGatewayId(gatewayId);\n                resourcePreference.setComputeHostResource(computeResource);\n                resourcePreference.setGatewayProfile(gatewayProf);\n                resourcePreference.setOverrideByAiravata(overrideByAiravata);\n                resourcePreference.setPreferedJobSubmissionProtocol(preferredJobProtocol);\n                resourcePreference.setPreferedDataMoveProtocol(preferedDMProtocol);\n                resourcePreference.setScratchLocation(scratchLocation);\n                resourcePreference.setProjectNumber(projectNumber);\n                resourcePreference.setBatchQueue(batchQueue);\n                resourcePreference.setLoginUserName(loginUserName);\n                resourcePreference.setComputeResourceCSToken(resourceCSToken);\n                resourcePreference.setUsageReportingGWId(usageReportingGatewayId);\n                resourcePreference.setQualityOfService(qualityOfService);\n                resourcePreference.setReservation(reservation);\n                resourcePreference.setReservationStartTime(reservationStartTime);\n                resourcePreference.setReservationEndTime(reservationEndTime);\n                resourcePreference.setSshAccountProvisioner(sshAccountProvisioner);\n                if (sshAccountProvisionerConfigurations != null && !sshAccountProvisionerConfigurations.isEmpty()){\n                    List<SSHAccountProvisionerConfiguration> configurations = new ArrayList<>();\n                    for (String sshAccountProvisionerConfigName : sshAccountProvisionerConfigurations.keySet()) {\n                        String value = sshAccountProvisionerConfigurations.get(sshAccountProvisionerConfigName);\n                        configurations.add(new SSHAccountProvisionerConfiguration(sshAccountProvisionerConfigName, value, resourcePreference));\n                    }\n                    resourcePreference.setSshAccountProvisionerConfigurations(configurations);\n                }\n                resourcePreference.setSshAccountProvisionerAdditionalInfo(sshAccountProvisionerAdditionalInfo);\n                em.persist(resourcePreference);\n            }\n            em.getTransaction().commit();\n            if (em.isOpen()) {\n                if (em.getTransaction().isActive()){\n                    em.getTransaction().rollback();\n                }\n                em.close();\n            }\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            throw new AppCatalogException(e);\n        } finally {\n            if (em != null && em.isOpen()) {\n                if (em.getTransaction().isActive()) {\n                    em.getTransaction().rollback();\n                }\n                em.close();\n            }\n        }\n    }\n<fim_suffix>    @Override\n    public boolean isExists(Object identifier) throws AppCatalogException {\n        HashMap<String, String> ids;\n        if (identifier instanceof Map) {\n            ids = (HashMap) identifier;\n        } else {\n            logger.error(\"Identifier should be a map with the field name and it's value\");\n            throw new AppCatalogException(\"Identifier should be a map with the field name and it's value\");\n        }\n        EntityManager em = null;\n        try {\n            em = AppCatalogJPAUtils.getEntityManager();\n            ComputeResourcePreference existingPreference = em.find(ComputeResourcePreference.class,\n                    new ComputeResourcePreferencePK(ids.get(ComputeResourcePreferenceConstants.GATEWAY_ID),\n                            ids.get(ComputeResourcePreferenceConstants.RESOURCE_ID)));\n            if (em.isOpen()) {\n                if (em.getTransaction().isActive()){\n                    em.getTransaction().rollback();\n                }\n                em.close();\n            }\n            return existingPreference != null;\n        }catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            throw new AppCatalogException(e);\n        } finally {\n            if (em != null && em.isOpen()) {\n                if (em.getTransaction().isActive()) {\n                    em.getTransaction().rollback();\n                }\n                em.close();\n            }\n        }\n    }<fim_middle>// function below is feature envy and long method\n"}