{"text": "<fim_prefix> * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.cxf.ws.rm;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.management.JMException;\nimport javax.management.MBeanException;\nimport javax.management.MBeanServer;\nimport javax.management.ObjectName;\nimport javax.management.RuntimeOperationsException;\nimport javax.management.modelmbean.InvalidTargetObjectTypeException;\nimport javax.management.modelmbean.ModelMBeanInfo;\nimport javax.management.modelmbean.RequiredModelMBean;\nimport javax.wsdl.extensions.ExtensibilityElement;\nimport javax.xml.XMLConstants;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.namespace.QName;\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.validation.Schema;\nimport javax.xml.validation.SchemaFactory;\nimport org.apache.cxf.binding.soap.SoapVersion;\nimport org.apache.cxf.binding.soap.model.SoapBindingInfo;\nimport org.apache.cxf.binding.soap.model.SoapOperationInfo;\nimport org.apache.cxf.common.logging.LogUtils;\nimport org.apache.cxf.common.util.PackageUtils;\nimport org.apache.cxf.databinding.DataBinding;\nimport org.apache.cxf.endpoint.Endpoint;\nimport org.apache.cxf.jaxb.JAXBDataBinding;\nimport org.apache.cxf.management.InstrumentationManager;\nimport org.apache.cxf.management.jmx.export.runtime.ModelMBeanAssembler;\nimport org.apache.cxf.message.Message;\nimport org.apache.cxf.service.Service;\nimport org.apache.cxf.service.factory.ServiceConstructionException;\nimport org.apache.cxf.service.model.BindingInfo;\nimport org.apache.cxf.service.model.BindingOperationInfo;\nimport org.apache.cxf.service.model.EndpointInfo;\nimport org.apache.cxf.service.model.InterfaceInfo;\nimport org.apache.cxf.service.model.MessageInfo;\nimport org.apache.cxf.service.model.MessagePartInfo;\nimport org.apache.cxf.service.model.OperationInfo;\nimport org.apache.cxf.service.model.ServiceInfo;\nimport org.apache.cxf.transport.Conduit;\nimport org.apache.cxf.ws.addressing.EndpointReferenceType;\nimport org.apache.cxf.ws.addressing.JAXWSAConstants;\nimport org.apache.cxf.ws.addressing.MAPAggregator;\nimport org.apache.cxf.ws.addressing.Names;\nimport org.apache.cxf.ws.policy.EffectivePolicyImpl;\nimport org.apache.cxf.ws.policy.EndpointPolicy;\nimport org.apache.cxf.ws.policy.PolicyEngine;\nimport org.apache.cxf.ws.rm.manager.SequenceTerminationPolicyType;\nimport org.apache.cxf.ws.rm.manager.SourcePolicyType;\nimport org.apache.cxf.ws.rm.v200702.CloseSequenceResponseType;\nimport org.apache.cxf.ws.rm.v200702.CloseSequenceType;\nimport org.apache.cxf.ws.security.SecurityConstants;\npublic class RMEndpoint {\n    private static final Logger LOG = LogUtils.getL7dLogger(RMEndpoint.class);\n    private static final String SERVICE_NAME = \"SequenceAbstractService\";\n    private static final String INTERFACE_NAME = \"SequenceAbstractPortType\";\n    private static final String BINDING_NAME = \"SequenceAbstractSoapBinding\";\n    private static final String CREATE_PART_NAME = \"create\";\n    private static final String CREATE_RESPONSE_PART_NAME = \"createResponse\";\n    private static final String TERMINATE_PART_NAME = \"terminate\";\n    private static final String TERMINATE_RESPONSE_PART_NAME = \"terminateResponse\";\n    private static final String CLOSE_PART_NAME = \"close\";\n    private static final String CLOSE_RESPONSE_PART_NAME = \"closeResponse\";\n    private static Schema rmSchema;\n    private RMManager manager;\n    private Endpoint applicationEndpoint;\n    private Conduit conduit;\n    private EndpointReferenceType replyTo;\n    private Source source;\n    private Destination destination;\n    private Map<ProtocolVariation, WrappedService> services;\n    private Map<ProtocolVariation, Endpoint> endpoints;\n    private Object tokenStore;\n    private Proxy proxy;\n    private Servant servant;\n    private long lastApplicationMessage;\n    private long lastControlMessage;\n    private AtomicInteger applicationMessageCount;\n    private AtomicInteger controlMessageCount;\n    private InstrumentationManager instrumentationManager;\n    private RMConfiguration configuration;\n    private ManagedRMEndpoint managedEndpoint;\n    private RequiredModelMBean modelMBean;\n    private AtomicInteger acknowledgementSequence;\n    /**\n     * Constructor.\n     *\n     * @param m\n     * @param ae\n     * @param pv\n     */\n    public RMEndpoint(RMManager m, Endpoint ae) {\n        manager = m;\n        applicationEndpoint = ae;\n        source = new Source(this);\n        destination = new Destination(this);\n        proxy = new Proxy(this);\n        servant = new Servant(this);\n        services = new HashMap<>();\n        endpoints = new HashMap<>();\n        applicationMessageCount = new AtomicInteger();\n        controlMessageCount = new AtomicInteger();\n        acknowledgementSequence = new AtomicInteger();\n        tokenStore = ae.getEndpointInfo().getProperty(SecurityConstants.TOKEN_STORE_CACHE_INSTANCE);\n    }\n    /**\n     * @return Returns the bus.\n     */\n    public RMManager getManager() {\n        return manager;\n    }\n    /**\n     * @return Returns the application endpoint.\n     */\n    public Endpoint getApplicationEndpoint() {\n        return applicationEndpoint;\n    }\n    /**\n     * @return Returns the RM protocol endpoint.\n     */\n    public Endpoint getEndpoint(ProtocolVariation protocol) {\n        return endpoints.get(protocol);\n    }\n    /**\n     * @return Returns the RM protocol service.\n     */\n    public Service getService(ProtocolVariation protocol) {\n        return services.get(protocol);\n    }\n    /**\n     * @return Returns the RM protocol binding info.\n     */\n    public BindingInfo getBindingInfo(ProtocolVariation protocol) {\n        final QName bindingQName = new QName(protocol.getWSRMNamespace(), BINDING_NAME);\n        return services.get(protocol).getServiceInfo().getBinding(bindingQName);\n    }\n    /**\n     * @return Returns the proxy.\n     */\n    public Proxy getProxy() {\n        return proxy;\n    }\n    /**\n     * @return Returns the servant.\n     */\n    public Servant getServant() {\n        return servant;\n    }\n    /**\n     * @return Returns the destination.\n     */\n    public Destination getDestination() {\n        return destination;\n    }\n    /**\n     * @param destination The destination to set.\n     */\n    public void setDestination(Destination destination) {\n        this.destination = destination;\n    }\n    /**\n     * @return Returns the source.\n     */\n    public Source getSource() {\n        return source;\n    }\n    /**\n     * @param source The source to set.\n     */\n    public void setSource(Source source) {\n        this.source = source;\n    }\n    /**\n     * @return The time when last application message was received.\n     */\n    public long getLastApplicationMessage() {\n        return lastApplicationMessage;\n    }\n    /**\n     * @return The number of times when last application message was received.\n     */\n    public int getApplicationMessageCount() {\n        return applicationMessageCount.get();\n    }\n    /**\n     * Indicates that an application message has been received.\n     */\n    public void receivedApplicationMessage() {\n        lastApplicationMessage = System.currentTimeMillis();\n        applicationMessageCount.incrementAndGet();\n    }\n    /**\n     * @return The time when last RM protocol message was received.\n     */\n    public long getLastControlMessage() {\n        return lastControlMessage;\n    }\n    /**\n     * @return The number of times when RM protocol message was received.\n     */\n    public int getControlMessageCount() {\n        return controlMessageCount.get();\n    }\n    /**\n     * Indicates that an RM protocol message has been received.\n     */\n    public void receivedControlMessage() {\n        lastControlMessage = System.currentTimeMillis();\n        controlMessageCount.incrementAndGet();\n    }\n    /**\n     * @return Returns the conduit.\n     */\n    public Conduit getConduit() {\n        return conduit;\n    }\n    /**\n     * Get the RM configuration applied to this endpoint.\n     *\n     * @return configuration\n     */\n<fim_suffix>    public RMConfiguration getConfiguration() {\n        return configuration;\n    }<fim_middle>// function below has no smell\n"}