{"text": "<fim_prefix>            setTo(null);\n            setFrom(null);\n        }\n        @JsonIgnore\n        public RValue getFrom() {\n            Object o = fieldContainer.get(FROM);\n            return o == null ? null : (RValue) o;\n        }\n        @JsonIgnore\n        public boolean isIgnoreMissingFromData() {\n            Object o = fieldContainer.get(IGNOREMISSINGFROMDATA);\n            return o == null ? false : (Boolean) o;\n        }\n        @JsonIgnore\n        public boolean isIgnoreUninitializedFromVariable() {\n            return (Boolean) fieldContainer.get(IGNOREUNINITIALIZEDFROMVARIABLE);\n        }\n        @JsonIgnore\n        public boolean isInsertMissingToData() {\n            Object o = fieldContainer.get(INSERTMISSINGTODATA);\n            return o == null ? false : (Boolean) o;\n        }\n        @JsonIgnore\n        public boolean isKeepSrcElementName() {\n            Object o = fieldContainer.get(KEEPSRCELEMENTNAME);\n            return o == null ? false : (Boolean) o;\n        }\n        @JsonIgnore\n        public LValue getTo() {\n            Object o = fieldContainer.get(TO);\n            return o == null ? null : (LValue) o;\n        }\n        public void setFrom(RValue from) {\n            fieldContainer.put(FROM, from);\n        }\n        public void setIgnoreMissingFromData(boolean ignoreMissingFromData) {\n            fieldContainer.put(IGNOREMISSINGFROMDATA, ignoreMissingFromData);\n        }\n        public void setIgnoreUninitializedFromVariable(boolean ignoreUninitializedFromVariable) {\n            fieldContainer.put(IGNOREUNINITIALIZEDFROMVARIABLE, ignoreUninitializedFromVariable);\n        }\n        public void setInsertMissingToData(boolean insertMissingToData) {\n            fieldContainer.put(INSERTMISSINGTODATA, insertMissingToData);\n        }\n        public void setKeepSrcElementName(boolean keepSrcElementName) {\n            fieldContainer.put(KEEPSRCELEMENTNAME, keepSrcElementName);\n        }\n        public void setTo(LValue to) {\n            fieldContainer.put(TO, to);\n        }\n        public String toString() {\n            return \"{OCopy \" + getTo() + \"=\" + getFrom() + \"}\";\n        }\n        @JsonIgnore\n        public Type getType() {\n            return Type.Copy;\n        }\n    }\n    /**\n     * Assignment extension operation entry, i.e. what the assignment consists of.\n     */\n    public static class ExtensionAssignOperation extends OAssignOperation {\n        private static final long serialVersionUID = 1L;\n        private static final String EXTENSIONNAME = \"extensionName\";\n        private static final String NESTEDELEMENT = \"nestedElement\";\n        @JsonCreator\n        public ExtensionAssignOperation() {}\n        public ExtensionAssignOperation(OProcess owner) {\n            super(owner);\n        }\n        @JsonIgnore\n        public QName getExtensionName() {\n            Object o = fieldContainer.get(EXTENSIONNAME);\n            return o == null ? null : (QName) o;\n        }\n        @JsonIgnore\n        public String getNestedElement() {\n            Object o = fieldContainer.get(NESTEDELEMENT);\n            return o == null ? null : (String) o;\n        }\n        public void setExtensionName(QName extensionName) {\n            fieldContainer.put(EXTENSIONNAME, extensionName);\n        }\n        public void setNestedElement(String nestedElement) {\n            fieldContainer.put(NESTEDELEMENT, nestedElement);\n        }\n        public String toString() {\n            return \"{OExtensionAssignOperation; \" + getExtensionName() + \"}\";\n        }\n        @Override\n        public void dehydrate() {\n            super.dehydrate();\n            setExtensionName(null);\n            setNestedElement(null);\n        }\n        public Type getType() {\n            return Type.ExtensionOperation;\n        }\n    }\n    /**\n     * Direct reference: selects named child of the message document element. This is used for\n     * access to extensions (SOAP headers for example).\n     * \n     * @author mszefler\n     */\n    public static class DirectRef extends OBase implements RValue, LValue, Serializable {\n        public static final long serialVersionUID = -1L;\n        /** Referenced Variable */\n        private static final String VARIABLE = \"variable\";\n        /** Name of the element referenced. */\n        private static final String ELNAME = \"elName\";\n        @JsonCreator\n        public DirectRef() {}\n        public DirectRef(OProcess owner) {\n            super(owner);\n        }\n        @JsonIgnore\n        public QName getElName() {\n            Object o = fieldContainer.get(ELNAME);\n            return o == null ? null : (QName) o;\n        }\n        @JsonIgnore\n        public OScope.Variable getVariable() {\n            Object o = fieldContainer.get(VARIABLE);\n            return o == null ? null : (OScope.Variable) o;\n        }\n        public void setElName(QName elName) {\n            fieldContainer.put(ELNAME, elName);\n        }\n        public void setVariable(Variable variable) {\n            fieldContainer.put(VARIABLE, variable);\n        }\n    }\n    public static class Expression extends OBase implements RValue, Serializable {\n        public static final long serialVersionUID = -1L;\n        private static final String EXPRESSION = \"expression\";\n        @JsonCreator\n        public Expression() {}\n        public Expression(OProcess owner, OExpression compiledExpression) {\n            super(owner);\n            setExpression(compiledExpression);\n        }\n        @JsonIgnore\n        public OExpression getExpression() {\n            Object o = fieldContainer.get(EXPRESSION);\n            return o == null ? null : (OExpression) o;\n        }\n        public void setExpression(OExpression expression) {\n            fieldContainer.put(EXPRESSION, expression);\n        }\n        public String toString() {\n            return getExpression().toString();\n        }\n    }\n    public static class Literal extends OBase implements RValue, Serializable {\n        public static final long serialVersionUID = -1L;\n        private static final String XMLLITERAL = \"xmlLiteral\";\n        @JsonCreator\n        public Literal() {}\n        public Literal(OProcess owner, Document xmlLiteral) {\n            super(owner);\n            if (xmlLiteral == null)\n                throw new IllegalArgumentException(\"null xmlLiteral!\");\n            setXmlLiteral(org.apache.ode.utils.DOMUtils.domToString(xmlLiteral));\n        }\n        @JsonIgnore\n        public String getXmlLiteral() {\n            Object o = fieldContainer.get(XMLLITERAL);\n            return o == null ? null : (String) o;\n        }\n        public void setXmlLiteral(String xmlLiteral) {\n            fieldContainer.put(XMLLITERAL, xmlLiteral);\n        }\n        public String toString() {\n            return \"{Literal \" + getXmlLiteral() + \"}\";\n        }\n    }\n    public interface LValue {\n        OScope.Variable getVariable();\n    }\n    public static class LValueExpression extends OBase implements LValue, Serializable {\n        public static final long serialVersionUID = -1L;\n        private static final String EXPRESSION = \"expression\";\n        @JsonCreator\n        public LValueExpression() {}\n        public LValueExpression(OProcess owner, OLValueExpression compiledExpression) {\n            super(owner);\n            setExpression(compiledExpression);\n        }\n        @JsonIgnore\n        public OLValueExpression getExpression() {\n            Object o = fieldContainer.get(EXPRESSION);\n            return o == null ? null : (OLValueExpression) o;\n        }\n        /**\n         * @see org.apache.ode.bpel.obj.OAssign.LValue#getVariable()\n         */\n        @JsonIgnore\n        public Variable getVariable() {\n            return getExpression().getVariable();\n        }\n        @JsonIgnore\n        public boolean isInsertMissingToData() {\n            return getExpression().isInsertMissingData();\n        }\n        public void setExpression(OLValueExpression expression) {\n            fieldContainer.put(EXPRESSION, expression);\n        }\n        public void setInsertMissingToData(boolean insertMissingToData) {\n            getExpression().setInsertMissingData(insertMissingToData);\n        }\n        public String toString() {\n            return getExpression().toString();\n        }\n    }\n<fim_suffix>    public static class PartnerLinkRef extends OBase implements RValue, LValue, Serializable {\n        public static final long serialVersionUID = -1L;\n        private static final String PARTNERLINK = \"partnerLink\";\n        private static final String ISMYENDPOINTREFERENCE = \"isMyEndpointReference\";\n        @JsonCreator\n        public PartnerLinkRef() {\n            setIsMyEndpointReference(false);\n        }\n        public PartnerLinkRef(OProcess owner) {\n            super(owner);\n            setIsMyEndpointReference(false);\n        }\n        @JsonIgnore\n        public boolean isIsMyEndpointReference() {\n            Object o = fieldContainer.get(ISMYENDPOINTREFERENCE);\n            return o == null ? false : (Boolean) o;\n        }\n        @JsonIgnore\n        public OPartnerLink getPartnerLink() {\n            Object o = fieldContainer.get(PARTNERLINK);\n            return o == null ? null : (OPartnerLink) o;\n        }\n        // Must fit in a LValue even if it's not variable based\n        @JsonIgnore\n        public Variable getVariable() {\n            return null;\n        }\n        public void setIsMyEndpointReference(boolean isMyEndpointReference) {\n            fieldContainer.put(ISMYENDPOINTREFERENCE, isMyEndpointReference);\n        }\n        public void setPartnerLink(OPartnerLink partnerLink) {\n            fieldContainer.put(PARTNERLINK, partnerLink);\n        }\n        public String toString() {\n            return \"{PLinkRef \" + getPartnerLink() + \"!\" + isIsMyEndpointReference() + \"}\";\n        }\n    }<fim_middle>// class below is blob\n"}