{"text": "<fim_prefix>    return handleRequest(headers, body, ui, Request.Type.GET,\n        createStackServiceComponentDependencyResource(stackName, stackVersion, serviceName, componentName, null));\n  }\n  @GET\n  @Path(\"{stackName}/versions/{stackVersion}/services/{serviceName}/components/{componentName}/dependencies/{dependencyName}\")\n  @Produces(MediaType.TEXT_PLAIN)\n  @ApiOperation(value = \"Get a stack service component dependency\",\n      nickname = \"StacksService#getServiceComponentDependency\",\n      notes = \"Returns a stack service component dependency.\",\n      response = ComponentDependencyResponse.class\n  )\n  @ApiImplicitParams({\n      @ApiImplicitParam(name = QUERY_FIELDS, value = \"Filter returned attributes\",\n          defaultValue = \"Dependencies/*\",\n          dataType = DATA_TYPE_STRING, paramType = PARAM_TYPE_QUERY)\n  })\n  @ApiResponses(value = {\n      @ApiResponse(code = HttpStatus.SC_OK, message = MSG_SUCCESSFUL_OPERATION),\n      @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = MSG_RESOURCE_NOT_FOUND),\n      @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = MSG_SERVER_ERROR)\n  })\n  public Response getServiceComponentDependency(String body, @Context HttpHeaders headers,\n                                      @Context UriInfo ui,\n                                      @ApiParam @PathParam(\"stackName\") String stackName,\n                                      @ApiParam @PathParam(\"stackVersion\") String stackVersion,\n                                      @ApiParam @PathParam(\"serviceName\") String serviceName,\n                                      @ApiParam @PathParam(\"componentName\") String componentName,\n                                      @ApiParam @PathParam(\"dependencyName\") String dependencyName) {\n    return handleRequest(headers, body, ui, Request.Type.GET,\n        createStackServiceComponentDependencyResource(stackName, stackVersion, serviceName, componentName, dependencyName));\n  }\n  @GET\n  @Path(\"{stackName}/versions/{stackVersion}/services/{serviceName}/components/{componentName}\")\n  @Produces(MediaType.TEXT_PLAIN)\n  @ApiOperation(value = \"Get details for a stack service component\",\n      nickname = \"StacksService#getServiceComponent\",\n      notes = \"Returns details for a stack service component.\",\n      response = StackServiceComponentResponse.StackServiceComponentResponseSwagger.class)\n  @ApiImplicitParams({\n      @ApiImplicitParam(name = QUERY_FIELDS, value = \"Filter returned attributes\",\n          defaultValue = \"StackServiceComponents/*\",\n          dataType = DATA_TYPE_STRING, paramType = PARAM_TYPE_QUERY)\n  })\n  @ApiResponses(value = {\n      @ApiResponse(code = HttpStatus.SC_OK, message = MSG_SUCCESSFUL_OPERATION),\n      @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = MSG_RESOURCE_NOT_FOUND),\n      @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = MSG_SERVER_ERROR)\n  })\n  public Response getServiceComponent(String body, @Context HttpHeaders headers,\n                                      @Context UriInfo ui,\n                                      @ApiParam @PathParam(\"stackName\") String stackName,\n                                      @ApiParam @PathParam(\"stackVersion\") String stackVersion,\n                                      @ApiParam @PathParam(\"serviceName\") String serviceName,\n                                      @ApiParam @PathParam(\"componentName\") String componentName) {\n    return handleRequest(headers, body, ui, Request.Type.GET,\n        createStackServiceComponentResource(stackName, stackVersion, serviceName, componentName));\n  }\n  /**\n   * Handles ANY /{stackName}/versions/{stackVersion}/operating_systems.\n   *\n   * @param stackName stack name\n   * @param stackVersion stack version\n   * @return operating system service\n   */\n  // TODO: find a way to handle this with Swagger (refactor or custom annotation?)\n  @Path(\"{stackName}/versions/{stackVersion}/operating_systems\")\n  public OperatingSystemService getOperatingSystemsHandler(@ApiParam @PathParam(\"stackName\") String stackName,\n                                                           @ApiParam @PathParam(\"stackVersion\") String stackVersion) {\n    final Map<Resource.Type, String> stackProperties = new HashMap<>();\n    stackProperties.put(Resource.Type.Stack, stackName);\n    stackProperties.put(Resource.Type.StackVersion, stackVersion);\n    return new OperatingSystemService(stackProperties);\n  }\n  /**\n   * Handles ANY /{stackName}/versions/{stackVersion}/repository_versions.\n   *\n   * @param stackName stack name\n   * @param stackVersion stack version\n   * @return repository version service\n   */\n  // TODO: find a way to handle this with Swagger (refactor or custom annotation?)\n  @Path(\"{stackName}/versions/{stackVersion}/repository_versions\")\n  public RepositoryVersionService getRepositoryVersionHandler(@ApiParam @PathParam(\"stackName\") String stackName,\n                                                              @ApiParam @PathParam(\"stackVersion\") String stackVersion) {\n    final Map<Resource.Type, String> stackProperties = new HashMap<>();\n    stackProperties.put(Resource.Type.Stack, stackName);\n    stackProperties.put(Resource.Type.StackVersion, stackVersion);\n    return new RepositoryVersionService(stackProperties);\n  }\n  /**\n   * Handles ANY /{stackName}/versions/{stackVersion}/compatible_repository_versions.\n   *\n   * @param stackName stack name\n   * @param stackVersion stack version\n   * @return repository version service\n   */\n  // TODO: find a way to handle this with Swagger (refactor or custom annotation?)\n  @Path(\"{stackName}/versions/{stackVersion}/compatible_repository_versions\")\n  public CompatibleRepositoryVersionService getCompatibleRepositoryVersionHandler(\n      @ApiParam @PathParam(\"stackName\") String stackName,\n      @ApiParam @PathParam(\"stackVersion\") String stackVersion) {\n    final Map<Resource.Type, String> stackProperties = new HashMap<>();\n    stackProperties.put(Resource.Type.Stack, stackName);\n    stackProperties.put(Resource.Type.StackVersion, stackVersion);\n    return new CompatibleRepositoryVersionService(stackProperties);\n  }\n  ResourceInstance createStackServiceComponentResource(\n      String stackName, String stackVersion, String serviceName, String componentName) {\n    Map<Resource.Type, String> mapIds = new HashMap<>();\n    mapIds.put(Resource.Type.Stack, stackName);\n    mapIds.put(Resource.Type.StackVersion, stackVersion);\n    mapIds.put(Resource.Type.StackService, serviceName);\n    mapIds.put(Resource.Type.StackServiceComponent, componentName);\n    return createResource(Resource.Type.StackServiceComponent, mapIds);\n  }\n  ResourceInstance createStackServiceComponentDependencyResource(\n      String stackName, String stackVersion, String serviceName, String componentName, String dependencyName) {\n    Map<Resource.Type, String> mapIds = new HashMap<>();\n    mapIds.put(Resource.Type.Stack, stackName);\n    mapIds.put(Resource.Type.StackVersion, stackVersion);\n    mapIds.put(Resource.Type.StackService, serviceName);\n    mapIds.put(Resource.Type.StackServiceComponent, componentName);\n    mapIds.put(Resource.Type.StackServiceComponentDependency, dependencyName);\n    return createResource(Resource.Type.StackServiceComponentDependency, mapIds);\n  }\n  ResourceInstance createStackConfigurationResource(String stackName,\n                                                    String stackVersion, String serviceName, String propertyName) {\n    Map<Resource.Type, String> mapIds = new HashMap<>();\n    mapIds.put(Resource.Type.Stack, stackName);\n    mapIds.put(Resource.Type.StackVersion, stackVersion);\n    mapIds.put(Resource.Type.StackService, serviceName);\n    mapIds.put(Resource.Type.StackConfiguration, propertyName);\n    return createResource(Resource.Type.StackConfiguration, mapIds);\n  }\n  ResourceInstance createStackConfigurationDependencyResource(String stackName,\n                                                              String stackVersion, String serviceName, String propertyName) {\n    Map<Resource.Type, String> mapIds = new HashMap<>();\n    mapIds.put(Resource.Type.Stack, stackName);\n    mapIds.put(Resource.Type.StackVersion, stackVersion);\n    mapIds.put(Resource.Type.StackService, serviceName);\n    mapIds.put(Resource.Type.StackConfiguration, propertyName);\n    return createResource(Resource.Type.StackConfigurationDependency, mapIds);\n  }\n  ResourceInstance createStackServiceResource(String stackName,\n                                              String stackVersion, String serviceName) {\n    Map<Resource.Type, String> mapIds = new HashMap<>();\n    mapIds.put(Resource.Type.Stack, stackName);\n    mapIds.put(Resource.Type.StackVersion, stackVersion);\n    mapIds.put(Resource.Type.StackService, serviceName);\n    return createResource(Resource.Type.StackService, mapIds);\n  }\n<fim_suffix>  ResourceInstance createStackVersionResource(String stackName,\n                                              String stackVersion) {\n    Map<Resource.Type, String> mapIds = new HashMap<>();\n    mapIds.put(Resource.Type.Stack, stackName);\n    mapIds.put(Resource.Type.StackVersion, stackVersion);\n    return createResource(Resource.Type.StackVersion, mapIds);\n  }<fim_middle>// function below has no smell\n"}