{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.sysml.runtime.instructions.cp;\n\nimport org.apache.sysml.lops.MMTSJ.MMTSJType;\nimport org.apache.sysml.runtime.DMLRuntimeException;\nimport org.apache.sysml.runtime.controlprogram.context.ExecutionContext;\nimport org.apache.sysml.runtime.instructions.InstructionUtils;\nimport org.apache.sysml.runtime.matrix.data.MatrixBlock;\nimport org.apache.sysml.runtime.matrix.operators.Operator;\n\n<fim_suffix>public class MMTSJCPInstruction extends UnaryCPInstruction {\n\tprivate final MMTSJType _type;\n\tprivate final int _numThreads;\n\n\tprivate MMTSJCPInstruction(Operator op, CPOperand in1, MMTSJType type, CPOperand out, int k, String opcode,\n\t\t\tString istr) {\n\t\tsuper(CPType.MMTSJ, op, in1, out, opcode, istr);\n\t\t_type = type;\n\t\t_numThreads = k;\n\t}\n\n\tpublic static MMTSJCPInstruction parseInstruction ( String str ) {\n\t\tString[] parts = InstructionUtils.getInstructionPartsWithValueType(str);\n\t\tInstructionUtils.checkNumFields ( parts, 4 );\n\t\t\n\t\tString opcode = parts[0];\n\t\tCPOperand in1 = new CPOperand(parts[1]);\n\t\tCPOperand out = new CPOperand(parts[2]);\n\t\tMMTSJType titype = MMTSJType.valueOf(parts[3]);\n\t\tint k = Integer.parseInt(parts[4]);\n\t\t\n\t\tif(!opcode.equalsIgnoreCase(\"tsmm\"))\n\t\t\tthrow new DMLRuntimeException(\"Unknown opcode while parsing an MMTSJCPInstruction: \" + str);\n\t\telse\n\t\t\treturn new MMTSJCPInstruction(new Operator(true), in1, titype, out, k, opcode, str);\n\t}\n\t\n\t@Override\n\tpublic void processInstruction(ExecutionContext ec) {\n\t\t//get inputs\n\t\tMatrixBlock matBlock1 = ec.getMatrixInput(input1.getName(), getExtendedOpcode());\n\n\t\t//execute operations \n\t\tMatrixBlock ret = (MatrixBlock) matBlock1.transposeSelfMatrixMultOperations(new MatrixBlock(), _type, _numThreads );\n\t\t\n\t\t//set output and release inputs\n\t\tec.setMatrixOutput(output.getName(), ret, getExtendedOpcode());\n\t\tec.releaseMatrixInput(input1.getName(), getExtendedOpcode());\n\t}\n\t\n\tpublic MMTSJType getMMTSJType()\n\t{\n\t\treturn _type;\n\t}\n}<fim_middle>// class below has no smell\n"}