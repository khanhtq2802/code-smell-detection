{"text": "<fim_prefix>/* ====================================================================\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n==================================================================== */\n\npackage org.apache.poi.ss.usermodel;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.TimeZone;\n\nimport org.apache.poi.util.LocaleUtil;\nimport org.junit.Test;\n\n<fim_suffix>public class TestDateUtil {\n\n    @Test\n    public void getJavaDate_InvalidValue() {\n        double dateValue = -1;\n        TimeZone tz = LocaleUtil.getUserTimeZone();\n        boolean use1904windowing = false;\n        boolean roundSeconds = false;\n\n        assertEquals(null, DateUtil.getJavaDate(dateValue));\n        assertEquals(null, DateUtil.getJavaDate(dateValue, tz));\n        assertEquals(null, DateUtil.getJavaDate(dateValue, use1904windowing));\n        assertEquals(null, DateUtil.getJavaDate(dateValue, use1904windowing, tz));\n        assertEquals(null, DateUtil.getJavaDate(dateValue, use1904windowing, tz, roundSeconds));\n    }\n\n    @Test\n    public void getJavaDate_ValidValue() {\n        double dateValue = 0;\n        TimeZone tz = LocaleUtil.getUserTimeZone();\n        boolean use1904windowing = false;\n        boolean roundSeconds = false;\n\n        Calendar calendar = LocaleUtil.getLocaleCalendar(1900, 0, 0);\n        Date date = calendar.getTime();\n\n        assertEquals(date, DateUtil.getJavaDate(dateValue));\n        assertEquals(date, DateUtil.getJavaDate(dateValue, tz));\n        assertEquals(date, DateUtil.getJavaDate(dateValue, use1904windowing));\n        assertEquals(date, DateUtil.getJavaDate(dateValue, use1904windowing, tz));\n        assertEquals(date, DateUtil.getJavaDate(dateValue, use1904windowing, tz, roundSeconds));\n    }\n\n    @Test\n    public void getJavaCalendar_InvalidValue() {\n        double dateValue = -1;\n        TimeZone tz = LocaleUtil.getUserTimeZone();\n        boolean use1904windowing = false;\n        boolean roundSeconds = false;\n\n        assertEquals(null, DateUtil.getJavaCalendar(dateValue));\n        assertEquals(null, DateUtil.getJavaCalendar(dateValue, use1904windowing));\n        assertEquals(null, DateUtil.getJavaCalendar(dateValue, use1904windowing, tz));\n        assertEquals(null, DateUtil.getJavaCalendar(dateValue, use1904windowing, tz, roundSeconds));\n    }\n\n    @Test\n    public void getJavaCalendar_ValidValue() {\n        double dateValue = 0;\n        TimeZone tz = LocaleUtil.getUserTimeZone();\n        boolean use1904windowing = false;\n        boolean roundSeconds = false;\n\n        Calendar expCal = LocaleUtil.getLocaleCalendar(1900, 0, 0);\n\n        Calendar[] actCal = {\n                DateUtil.getJavaCalendar(dateValue),\n                DateUtil.getJavaCalendar(dateValue, use1904windowing),\n                DateUtil.getJavaCalendar(dateValue, use1904windowing, tz),\n                DateUtil.getJavaCalendar(dateValue, use1904windowing, tz, roundSeconds)\n        };\n        assertEquals(expCal, actCal[0]);\n        assertEquals(expCal, actCal[1]);\n        assertEquals(expCal, actCal[2]);\n        assertEquals(expCal, actCal[3]);\n    }\n    \n    @Test\n    public void isADateFormat() {\n        // Cell content 2016-12-8 as an example\n        // Cell show \"12/8/2016\"\n        assertTrue(DateUtil.isADateFormat(14, \"m/d/yy\"));\n        // Cell show \"Thursday, December 8, 2016\"\n        assertTrue(DateUtil.isADateFormat(182, \"[$-F800]dddd\\\\,\\\\ mmmm\\\\ dd\\\\,\\\\ yyyy\"));\n        // Cell show \"12/8\"\n        assertTrue(DateUtil.isADateFormat(183, \"m/d;@\"));\n        // Cell show \"12/08/16\"\n        assertTrue(DateUtil.isADateFormat(184, \"mm/dd/yy;@\"));\n        // Cell show \"8-Dec-16\"\n        assertTrue(DateUtil.isADateFormat(185, \"[$-409]d\\\\-mmm\\\\-yy;@\"));\n        // Cell show \"D-16\"\n        assertTrue(DateUtil.isADateFormat(186, \"[$-409]mmmmm\\\\-yy;@\"));\n\n        // Cell show \"2016\u5e7412\u67088\u65e5\"\n        assertTrue(DateUtil.isADateFormat(165, \"yyyy\\\"\\u5e74\\\"m\\\"\\u6708\\\"d\\\"\\u65e5\\\";@\"));\n        // Cell show \"2016\u5e7412\u6708\"\n        assertTrue(DateUtil.isADateFormat(164, \"yyyy\\\"\\u5e74\\\"m\\\"\\u6708\\\";@\"));\n        // Cell show \"12\u67088\u65e5\"\n        assertTrue(DateUtil.isADateFormat(168, \"m\\\"\\u6708\\\"d\\\"\\u65e5\\\";@\"));\n        // Cell show \"\u5341\u4e8c\u6708\u516b\u65e5\"\n        assertTrue(DateUtil.isADateFormat(181, \"[DBNum1][$-404]m\\\"\\u6708\\\"d\\\"\\u65e5\\\";@\"));\n        // Cell show \"\u8d30\u96f6\u58f9\u9646\u5e74\u58f9\u62fe\u8d30\u6708\u634c\u65e5\"\n        assertTrue(DateUtil.isADateFormat(177, \"[DBNum2][$-804]yyyy\\\"\\u5e74\\\"m\\\"\\u6708\\\"d\\\"\\u65e5\\\";@\"));\n        // Cell show \"\uff12\uff10\uff11\uff16\u5e74\uff11\uff12\u6708\uff18\u65e5\"\n        assertTrue(DateUtil.isADateFormat(178, \"[DBNum3][$-804]yyyy\\\"\\u5e74\\\"m\\\"\\u6708\\\"d\\\"\\u65e5\\\";@\"));\n    }\n}<fim_middle>// class below has no smell\n"}