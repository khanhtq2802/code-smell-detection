{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.tinkerpop.gremlin.driver.ser;\n\nimport org.apache.tinkerpop.gremlin.driver.message.RequestMessage;\nimport org.apache.tinkerpop.gremlin.driver.message.ResponseMessage;\nimport org.apache.tinkerpop.gremlin.driver.message.ResponseStatusCode;\nimport org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper;\nimport org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion;\nimport org.apache.tinkerpop.gremlin.structure.io.graphson.TypeInfo;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.nio.ByteBuffer;\nimport java.util.Map;\nimport java.util.UUID;\n\n/**\n * Serialize results to JSON with version 1.0.x schema.\n *\n * @author Stephen Mallette (http://stephen.genoprime.com)\n */\npublic final class GraphSONMessageSerializerV1d0 extends AbstractGraphSONMessageSerializerV1d0 implements MessageTextSerializer {\n    private static final Logger logger = LoggerFactory.getLogger(GraphSONMessageSerializerV1d0.class);\n    private static final String MIME_TYPE = SerTokens.MIME_JSON;\n\n    private static byte[] header;\n\n    static {\n        final ByteBuffer buffer = ByteBuffer.allocate(MIME_TYPE.length() + 1);\n        buffer.put((byte) MIME_TYPE.length());\n        buffer.put(MIME_TYPE.getBytes());\n        header = buffer.array();\n    }\n\n    public GraphSONMessageSerializerV1d0() {\n        super();\n    }\n\n    public GraphSONMessageSerializerV1d0(final GraphSONMapper mapper) {\n        super(mapper);\n    }\n\n    @Override\n    public String[] mimeTypesSupported() {\n        return new String[]{MIME_TYPE};\n    }\n\n<fim_suffix>    @Override\n    GraphSONMapper.Builder configureBuilder(final GraphSONMapper.Builder builder) {\n        // already set to 1.0 in AbstractGraphSONMessageSerializerV1d0\n        return builder.addCustomModule(new GremlinServerModule())\n                .typeInfo(TypeInfo.NO_TYPES);\n    }\n\n    @Override\n    byte[] obtainHeader() {\n        return header;\n    }\n\n    @Override\n    public ResponseMessage deserializeResponse(final String msg) throws SerializationException {\n        try {\n            final Map<String, Object> responseData = mapper.readValue(msg, mapTypeReference);\n            final Map<String, Object> status = (Map<String, Object>) responseData.get(SerTokens.TOKEN_STATUS);\n            final Map<String, Object> result = (Map<String, Object>) responseData.get(SerTokens.TOKEN_RESULT);\n            return ResponseMessage.build(UUID.fromString(responseData.get(SerTokens.TOKEN_REQUEST).toString()))\n                    .code(ResponseStatusCode.getFromValue((Integer) status.get(SerTokens.TOKEN_CODE)))\n                    .statusMessage(status.get(SerTokens.TOKEN_MESSAGE).toString())\n                    .statusAttributes((Map<String, Object>) status.get(SerTokens.TOKEN_ATTRIBUTES))\n                    .result(result.get(SerTokens.TOKEN_DATA))\n                    .responseMetaData((Map<String, Object>) result.get(SerTokens.TOKEN_META))\n                    .create();\n        } catch (Exception ex) {\n            logger.warn(\"Response [{}] could not be deserialized by {}.\", msg, AbstractGraphSONMessageSerializerV1d0.class.getName());\n            throw new SerializationException(ex);\n        }\n    }\n\n    @Override\n    public String serializeResponseAsString(final ResponseMessage responseMessage) throws SerializationException {\n        try {\n            return mapper.writeValueAsString(responseMessage);\n        } catch (Exception ex) {\n            logger.warn(\"Response [{}] could not be serialized by {}.\", responseMessage.toString(), AbstractGraphSONMessageSerializerV1d0.class.getName());\n            throw new SerializationException(ex);\n        }\n    }\n\n    @Override\n    public RequestMessage deserializeRequest(final String msg) throws SerializationException {\n        try {\n            return mapper.readValue(msg, RequestMessage.class);\n        } catch (Exception ex) {\n            logger.warn(\"Request [{}] could not be deserialized by {}.\", msg, AbstractGraphSONMessageSerializerV1d0.class.getName());\n            throw new SerializationException(ex);\n        }\n    }\n\n    @Override\n    public String serializeRequestAsString(final RequestMessage requestMessage) throws SerializationException {\n        try {\n            return mapper.writeValueAsString(requestMessage);\n        } catch (Exception ex) {\n            logger.warn(\"Request [{}] could not be serialized by {}.\", requestMessage.toString(), AbstractGraphSONMessageSerializerV1d0.class.getName());\n            throw new SerializationException(ex);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}