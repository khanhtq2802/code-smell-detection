{"text": "<fim_prefix>        validateAdminAccessForTenant(tenant);\n        validateNamespaceName(tenant, namespace);\n        return internalGetNamespaceReplicationClusters();\n    }\n    @POST\n    @Path(\"/{tenant}/{namespace}/replication\")\n    @ApiOperation(value = \"Set the replication clusters for a namespace.\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace doesn't exist\"),\n            @ApiResponse(code = 409, message = \"Peer-cluster can't be part of replication-cluster\"),\n            @ApiResponse(code = 412, message = \"Namespace is not global or invalid cluster ids\") })\n    public void setNamespaceReplicationClusters(@PathParam(\"tenant\") String tenant,\n            @PathParam(\"namespace\") String namespace, List<String> clusterIds) {\n        validateNamespaceName(tenant, namespace);\n        internalSetNamespaceReplicationClusters(clusterIds);\n    }\n    @GET\n    @Path(\"/{tenant}/{namespace}/messageTTL\")\n    @ApiOperation(value = \"Get the message TTL for the namespace\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace doesn't exist\") })\n    public int getNamespaceMessageTTL(@PathParam(\"tenant\") String tenant,\n            @PathParam(\"namespace\") String namespace) {\n        validateAdminAccessForTenant(tenant);\n        validateNamespaceName(tenant, namespace);\n        Policies policies = getNamespacePolicies(namespaceName);\n        return policies.message_ttl_in_seconds;\n    }\n    @POST\n    @Path(\"/{tenant}/{namespace}/messageTTL\")\n    @ApiOperation(value = \"Set message TTL in seconds for namespace\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace doesn't exist\"),\n            @ApiResponse(code = 412, message = \"Invalid TTL\") })\n    public void setNamespaceMessageTTL(@PathParam(\"tenant\") String tenant, @PathParam(\"namespace\") String namespace,\n            int messageTTL) {\n        validateNamespaceName(tenant, namespace);\n        internalSetNamespaceMessageTTL(messageTTL);\n    }\n    @POST\n    @Path(\"/{tenant}/{namespace}/deduplication\")\n    @ApiOperation(value = \"Enable or disable broker side deduplication for all topics in a namespace\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace doesn't exist\") })\n    public void modifyDeduplication(@PathParam(\"tenant\") String tenant, @PathParam(\"namespace\") String namespace,\n            boolean enableDeduplication) {\n        validateNamespaceName(tenant, namespace);\n        internalModifyDeduplication(enableDeduplication);\n    }\n    @GET\n    @Path(\"/{tenant}/{namespace}/bundles\")\n    @ApiOperation(value = \"Get the bundles split data.\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace doesn't exist\"),\n            @ApiResponse(code = 412, message = \"Namespace is not setup to split in bundles\") })\n    public BundlesData getBundlesData(@PathParam(\"tenant\") String tenant,\n            @PathParam(\"namespace\") String namespace) {\n        validateAdminAccessForTenant(tenant);\n        validatePoliciesReadOnlyAccess();\n        validateNamespaceName(tenant, namespace);\n        Policies policies = getNamespacePolicies(namespaceName);\n        return policies.bundles;\n    }\n    @PUT\n    @Path(\"/{tenant}/{namespace}/unload\")\n    @ApiOperation(value = \"Unload namespace\", notes = \"Unload an active namespace from the current broker serving it. Performing this operation will let the broker\"\n            + \"removes all producers, consumers, and connections using this namespace, and close all topics (including\"\n            + \"their persistent store). During that operation, the namespace is marked as tentatively unavailable until the\"\n            + \"broker completes the unloading action. This operation requires strictly super user privileges, since it would\"\n            + \"result in non-persistent message loss and unexpected connection closure to the clients.\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n            @ApiResponse(code = 404, message = \"Tenant or namespace doesn't exist\"),\n            @ApiResponse(code = 412, message = \"Namespace is already unloaded or Namespace has bundles activated\") })\n    public void unloadNamespace(@PathParam(\"tenant\") String tenant, @PathParam(\"namespace\") String namespace) {\n        validateNamespaceName(tenant, namespace);\n        internalUnloadNamespace();\n    }\n    @PUT\n    @Path(\"/{tenant}/{namespace}/{bundle}/unload\")\n    @ApiOperation(value = \"Unload a namespace bundle\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\") })\n    public void unloadNamespaceBundle(@PathParam(\"tenant\") String tenant, @PathParam(\"namespace\") String namespace,\n            @PathParam(\"bundle\") String bundleRange,\n            @QueryParam(\"authoritative\") @DefaultValue(\"false\") boolean authoritative) {\n        validateNamespaceName(tenant, namespace);\n        internalUnloadNamespaceBundle(bundleRange, authoritative);\n    }\n    @PUT\n    @Path(\"/{tenant}/{namespace}/{bundle}/split\")\n    @ApiOperation(value = \"Split a namespace bundle\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\") })\n    public void splitNamespaceBundle(@PathParam(\"tenant\") String tenant, @PathParam(\"namespace\") String namespace,\n            @PathParam(\"bundle\") String bundleRange,\n            @QueryParam(\"authoritative\") @DefaultValue(\"false\") boolean authoritative,\n            @QueryParam(\"unload\") @DefaultValue(\"false\") boolean unload) {\n        validateNamespaceName(tenant, namespace);\n        internalSplitNamespaceBundle(bundleRange, authoritative, unload);\n    }\n    @POST\n    @Path(\"/{tenant}/{namespace}/dispatchRate\")\n    @ApiOperation(value = \"Set dispatch-rate throttling for all topics of the namespace\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\") })\n    public void setDispatchRate(@PathParam(\"tenant\") String tenant, @PathParam(\"namespace\") String namespace,\n            DispatchRate dispatchRate) {\n        validateNamespaceName(tenant, namespace);\n        internalSetDispatchRate(dispatchRate);\n    }\n    @GET\n    @Path(\"/{tenant}/{namespace}/dispatchRate\")\n    @ApiOperation(value = \"Get dispatch-rate configured for the namespace, -1 represents not configured yet\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n            @ApiResponse(code = 404, message = \"Namespace does not exist\") })\n    public DispatchRate getDispatchRate(@PathParam(\"tenant\") String tenant,\n            @PathParam(\"namespace\") String namespace) {\n        validateNamespaceName(tenant, namespace);\n        return internalGetDispatchRate();\n    }\n    @POST\n    @Path(\"/{tenant}/{namespace}/subscriptionDispatchRate\")\n    @ApiOperation(value = \"Set Subscription dispatch-rate throttling for all topics of the namespace\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\") })\n    public void setSubscriptionDispatchRate(@PathParam(\"tenant\") String tenant,\n                                            @PathParam(\"namespace\") String namespace,\n                                            DispatchRate dispatchRate) {\n        validateNamespaceName(tenant, namespace);\n        internalSetSubscriptionDispatchRate(dispatchRate);\n    }\n    @GET\n    @Path(\"/{tenant}/{namespace}/subscriptionDispatchRate\")\n    @ApiOperation(value = \"Get Subscription dispatch-rate configured for the namespace, -1 represents not configured yet\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n        @ApiResponse(code = 404, message = \"Namespace does not exist\") })\n    public DispatchRate getSubscriptionDispatchRate(@PathParam(\"tenant\") String tenant,\n                                                    @PathParam(\"namespace\") String namespace) {\n        validateNamespaceName(tenant, namespace);\n        return internalGetSubscriptionDispatchRate();\n    }\n<fim_suffix>    @POST\n    @Path(\"/{tenant}/{namespace}/subscribeRate\")\n    @ApiOperation(value = \"Set subscribe-rate throttling for all topics of the namespace\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\") })\n    public void setSubscribeRate(@PathParam(\"tenant\") String tenant, @PathParam(\"namespace\") String namespace,\n                                SubscribeRate subscribeRate) {\n        validateNamespaceName(tenant, namespace);\n        internalSetSubscribeRate(subscribeRate);\n    }<fim_middle>// function below has no smell\n"}