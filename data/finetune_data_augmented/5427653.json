{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.pivot.wtk;\n\nimport org.apache.pivot.util.ListenerList;\nimport org.apache.pivot.util.Vote;\nimport org.apache.pivot.util.VoteResult;\n\n/**\n * Defines event listener methods that pertain to rollup state. Developers\n * register for such events by adding themselves to a rollup's list of \"rollup\n * state listeners\" (see {@link Rollup#getRollupStateListeners()}).\n */\npublic interface RollupStateListener {\n    /**\n     * Rollup state listeners.\n     */\n<fim_suffix>    public static class Listeners extends ListenerList<RollupStateListener> implements RollupStateListener {\n        @Override\n        public Vote previewExpandedChange(Rollup rollup) {\n            VoteResult result = new VoteResult();\n\n            forEach(listener -> result.tally(listener.previewExpandedChange(rollup)));\n\n            return result.get();\n        }\n\n        @Override\n        public void expandedChangeVetoed(Rollup rollup, Vote reason) {\n            forEach(listener -> listener.expandedChangeVetoed(rollup, reason));\n        }\n\n        @Override\n        public void expandedChanged(Rollup rollup) {\n            forEach(listener -> listener.expandedChanged(rollup));\n        }\n    }\n\n    /**\n     * Rollup state listener adapter.\n     * @deprecated Since 2.1 and Java 8 the interface itself has default implementations.\n     */\n    @Deprecated\n    public static class Adapter implements RollupStateListener {\n        @Override\n        public Vote previewExpandedChange(Rollup rollup) {\n            return Vote.APPROVE;\n        }\n\n        @Override\n        public void expandedChangeVetoed(Rollup rollup, Vote reason) {\n            // empty block\n        }\n\n        @Override\n        public void expandedChanged(Rollup rollup) {\n            // empty block\n        }\n    }\n\n    /**\n     * Called to preview a rollup expansion event.\n     *\n     * @param rollup The rollup that might change.\n     * @return The result of this listener voting on the expansion.\n     */\n    default Vote previewExpandedChange(Rollup rollup) {\n        return Vote.APPROVE;\n    }\n\n    /**\n     * Called when a rollup expansion event has been vetoed.\n     *\n     * @param rollup The rollup that didn't change.\n     * @param reason The reason the expansion was vetoed.\n     */\n    default void expandedChangeVetoed(Rollup rollup, Vote reason) {\n    }\n\n    /**\n     * Called when a rollup's expanded state changed.\n     *\n     * @param rollup The rollup that did change.\n     */\n    default void expandedChanged(Rollup rollup) {\n    }\n}<fim_middle>// class below has no smell\n"}