{"text": "<fim_prefix> *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\npackage org.apache.qpid.server.security.access.config;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.io.StreamTokenizer;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Stack;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.qpid.server.configuration.IllegalConfigurationException;\nimport org.apache.qpid.server.logging.EventLoggerProvider;\nimport org.apache.qpid.server.security.Result;\nimport org.apache.qpid.server.security.access.plugins.RuleOutcome;\npublic final class AclFileParser\n{\n    private static final Logger LOGGER = LoggerFactory.getLogger(AclFileParser.class);\n    public static final String DEFAULT_ALLOW = \"defaultallow\";\n    public static final String DEFAULT_DEFER = \"defaultdefer\";\n    public static final String DEFAULT_DENY = \"defaultdeny\";\n    private static final Character COMMENT = '#';\n    private static final Character CONTINUATION = '\\\\';\n    public static final String ACL = \"acl\";\n    private static final String CONFIG = \"config\";\n    private static final String UNRECOGNISED_INITIAL_MSG = \"Unrecognised initial token '%s' at line %d\";\n    static final String NOT_ENOUGH_TOKENS_MSG = \"Not enough tokens at line %d\";\n    private static final String NUMBER_NOT_ALLOWED_MSG = \"Number not allowed before '%s' at line %d\";\n    private static final String CANNOT_LOAD_MSG = \"I/O Error while reading configuration\";\n    static final String PREMATURE_CONTINUATION_MSG = \"Premature continuation character at line %d\";\n    private static final String PREMATURE_EOF_MSG = \"Premature end of file reached at line %d\";\n    static final String PARSE_TOKEN_FAILED_MSG = \"Failed to parse token at line %d\";\n    static final String NOT_ENOUGH_ACL_MSG = \"Not enough data for an acl at line %d\";\n    private static final String NOT_ENOUGH_CONFIG_MSG = \"Not enough data for config at line %d\";\n    private static final String BAD_ACL_RULE_NUMBER_MSG = \"Invalid rule number at line %d\";\n    static final String PROPERTY_KEY_ONLY_MSG = \"Incomplete property (key only) at line %d\";\n    static final String PROPERTY_NO_EQUALS_MSG = \"Incomplete property (no equals) at line %d\";\n    static final String PROPERTY_NO_VALUE_MSG = \"Incomplete property (no value) at line %d\";\n    private AclFileParser()\n    {\n    }\n    private static Reader getReaderFromURLString(String urlString)\n    {\n        try\n        {\n            URL url;\n            try\n            {\n                url = new URL(urlString);\n            }\n            catch (MalformedURLException e)\n            {\n                File file = new File(urlString);\n                try\n                {\n                    url = file.toURI().toURL();\n                }\n                catch (MalformedURLException notAFile)\n                {\n                    throw new IllegalConfigurationException(\"Cannot convert \" + urlString + \" to a readable resource\", notAFile);\n                }\n            }\n            return new InputStreamReader(url.openStream());\n        }\n        catch (IOException e)\n        {\n            throw new IllegalConfigurationException(\"Cannot convert \" + urlString + \" to a readable resource\", e);\n        }\n    }\n    public static RuleSet parse(String name, EventLoggerProvider eventLoggerProvider)\n    {\n        return parse(getReaderFromURLString(name), eventLoggerProvider);\n    }\n<fim_suffix>    public static RuleSet parse(final Reader configReader, EventLoggerProvider eventLogger)\n    {\n        RuleSetCreator ruleSetCreator = new RuleSetCreator();\n        int line = 0;\n        try(Reader fileReader = configReader)\n        {\n            LOGGER.debug(\"About to load ACL file\");\n            StreamTokenizer tokenizer = new StreamTokenizer(new BufferedReader(fileReader));\n            tokenizer.resetSyntax(); // setup the tokenizer\n            tokenizer.commentChar(COMMENT); // single line comments\n            tokenizer.eolIsSignificant(true); // return EOL as a token\n            tokenizer.ordinaryChar('='); // equals is a token\n            tokenizer.ordinaryChar(CONTINUATION); // continuation character (when followed by EOL)\n            tokenizer.quoteChar('\"'); // double quote\n            tokenizer.quoteChar('\\''); // single quote\n            tokenizer.whitespaceChars('\\u0000', '\\u0020'); // whitespace (to be ignored) TODO properly\n            tokenizer.wordChars('a', 'z'); // unquoted token characters [a-z]\n            tokenizer.wordChars('A', 'Z'); // [A-Z]\n            tokenizer.wordChars('0', '9'); // [0-9]\n            tokenizer.wordChars('_', '_'); // underscore\n            tokenizer.wordChars('-', '-'); // dash\n            tokenizer.wordChars('.', '.'); // dot\n            tokenizer.wordChars('*', '*'); // star\n            tokenizer.wordChars('@', '@'); // at\n            tokenizer.wordChars(':', ':'); // colon\n            // parse the acl file lines\n            Stack<String> stack = new Stack<>();\n            int current;\n            do {\n                current = tokenizer.nextToken();\n                line = tokenizer.lineno()-1;\n                switch (current)\n                {\n                    case StreamTokenizer.TT_EOF:\n                    case StreamTokenizer.TT_EOL:\n                        if (stack.isEmpty())\n                        {\n                            break; // blank line\n                        }\n                        // pull out the first token from the bottom of the stack and check arguments exist\n                        String first = stack.firstElement();\n                        stack.removeElementAt(0);\n                        if (stack.isEmpty())\n                        {\n                            throw new IllegalConfigurationException(String.format(NOT_ENOUGH_TOKENS_MSG, line));\n                        }\n                        // check for and parse optional initial number for ACL lines\n                        Integer number = null;\n                        if (first != null && first.matches(\"\\\\d+\"))\n                        {\n                            // set the acl number and get the next element\n                            number = Integer.valueOf(first);\n                            first = stack.firstElement();\n                            stack.removeElementAt(0);\n                        }\n                        if (ACL.equalsIgnoreCase(first))\n                        {\n                            parseAcl(number, stack, ruleSetCreator, line);\n                        }\n                        else if (number == null)\n                        {\n                            if(\"GROUP\".equalsIgnoreCase(first))\n                            {\n                                throw new IllegalConfigurationException(String.format(\"GROUP keyword not supported at \"\n                                                                                      + \"line %d. Groups should defined \"\n                                                                                      + \"via a Group Provider, not in \"\n                                                                                      + \"the ACL file.\",\n                                                                                      line));\n                            }\n                            else if (CONFIG.equalsIgnoreCase(first))\n                            {\n                                parseConfig(stack, ruleSetCreator, line);\n                            }\n                            else\n                            {\n                                throw new IllegalConfigurationException(String.format(UNRECOGNISED_INITIAL_MSG, first, line));\n                            }\n                        }\n                        else\n                        {\n                            throw new IllegalConfigurationException(String.format(NUMBER_NOT_ALLOWED_MSG, first, line));\n                        }\n                        // reset stack, start next line\n                        stack.clear();\n                        break;\n                    case StreamTokenizer.TT_NUMBER:\n                        stack.push(Integer.toString(Double.valueOf(tokenizer.nval).intValue()));\n                        break;\n                    case StreamTokenizer.TT_WORD:\n                        stack.push(tokenizer.sval); // token\n                        break;\n                    default:\n                        if (tokenizer.ttype == CONTINUATION)\n                        {\n                            int next = tokenizer.nextToken();\n                            line = tokenizer.lineno()-1;\n                            if (next == StreamTokenizer.TT_EOL)\n                            {\n\t                            break; // continue reading next line\n                            }\n                            // invalid location for continuation character (add one to line because we ate the EOL)\n                            throw new IllegalConfigurationException(String.format(PREMATURE_CONTINUATION_MSG, line + 1));\n                        }\n                        else if (tokenizer.ttype == '\\'' || tokenizer.ttype == '\"')\n                        {\n                            stack.push(tokenizer.sval); // quoted token\n                        }\n                        else\n                        {\n                            stack.push(Character.toString((char) tokenizer.ttype)); // single character\n                        }\n                }\n            } while (current != StreamTokenizer.TT_EOF);\n            if (!stack.isEmpty())\n            {\n                throw new IllegalConfigurationException(String.format(PREMATURE_EOF_MSG, line));\n            }\n        }\n        catch (IllegalArgumentException iae)\n        {\n            throw new IllegalConfigurationException(String.format(PARSE_TOKEN_FAILED_MSG, line), iae);\n        }\n        catch (IOException ioe)\n        {\n            throw new IllegalConfigurationException(CANNOT_LOAD_MSG, ioe);\n        }\n        return ruleSetCreator.createRuleSet(eventLogger);\n    }<fim_middle>// function below is long method\n"}