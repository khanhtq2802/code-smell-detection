{"text": "<fim_prefix>/********************************************************************************\n * Copyright (c) 2011-2017 Red Hat Inc. and/or its affiliates and others\n *\n * This program and the accompanying materials are made available under the \n * terms of the Apache License, Version 2.0 which is available at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * SPDX-License-Identifier: Apache-2.0 \n ********************************************************************************/\npackage ceylon.modules.api.runtime;\n\nimport java.lang.reflect.Modifier;\n\nimport org.eclipse.ceylon.common.JVMModuleUtil;\n\nimport ceylon.modules.CeylonRuntimeException;\nimport ceylon.modules.Configuration;\nimport ceylon.modules.spi.Constants;\nimport ceylon.modules.spi.runtime.ClassLoaderHolder;\n\n/**\n * Abstract Ceylon Modules runtime.\n * Useful for potential extension.\n *\n * @author <a href=\"mailto:ales.justin@jboss.org\">Ales Justin</a>\n */\n<fim_suffix>public abstract class AbstractRuntime implements ceylon.modules.spi.runtime.Runtime {\n\n    public static final String MODULE_INFO_CLASS = \".$module_\";\n    public static final String OLD_MODULE_INFO_CLASS = \".module_\";\n    \n\n    protected static void invokeRun(ClassLoaderHolder clh, String moduleName, String ceylonRunnableName, final String[] args) throws Exception {\n        final Class<?> runClass;\n        ClassLoader cl = clh.getClassLoader();\n        ClassLoader oldClassLoader = SecurityActions.setContextClassLoader(cl);\n        try {\n            try {\n                String javaClassName = JVMModuleUtil.javaClassNameFromCeylon(moduleName, ceylonRunnableName);\n                if (ceylonRunnableName == null) {\n                    ceylonRunnableName = moduleName + \"::\" + JVMModuleUtil.RUN_INFO_CLASS;\n                }\n                runClass = cl.loadClass(javaClassName);\n            } catch (ClassNotFoundException cnfe) {\n                String type = Character.isUpperCase(ceylonRunnableName.charAt(0)) ? \"class\" : \"function\";\n                String msg = String.format(\"Could not find toplevel %s '%s'.\", type, ceylonRunnableName);\n                if (!moduleName.equals(Constants.DEFAULT.toString()) && !ceylonRunnableName.contains(\".\") && !ceylonRunnableName.contains(\"::\")) {\n                    msg += String.format(\" Class and method names need to be fully qualified, maybe you meant '%s'?\", moduleName + \"::\" + ceylonRunnableName);\n                }\n                //msg += \" [\" + clh + \"]\";\n                throw new CeylonRuntimeException(msg);\n            }\n            \n            if ((runClass.getModifiers()&Modifier.PUBLIC) == 0) {\n                String type = Character.isUpperCase(ceylonRunnableName.charAt(0)) ? \"class\" : \"function\";\n                String msg = String.format(\"Cannot run toplevel %s '%s': it should be shared.\", type, ceylonRunnableName);\n                throw new CeylonRuntimeException(msg);\n            }\n            try {\n                SecurityActions.invokeRun(runClass, args);\n            } catch (NoSuchMethodException ex) {\n                String type = Character.isUpperCase(ceylonRunnableName.charAt(0)) ? \"class\" : \"function\";\n                String msg = String.format(\"Cannot run toplevel %s '%s': it should have no parameters or they should all have default values.\", type, ceylonRunnableName);\n                throw new CeylonRuntimeException(msg);\n            }\n        } finally {\n            SecurityActions.setContextClassLoader(oldClassLoader);\n        }\n    }\n    \n \n\n    public void execute(Configuration conf) throws Exception {\n        String exe = conf.module;\n        // FIXME: argument checks could be done earlier\n        if (exe == null) {\n            throw new CeylonRuntimeException(\"No initial module defined\");\n        }\n\n        int p = exe.indexOf(\"/\");\n        if (p == 0) {\n            throw new CeylonRuntimeException(\"Missing runnable info: \" + exe);\n        }\n        if (p == exe.length() - 1) {\n            throw new CeylonRuntimeException(\"Missing version info: \" + exe);\n        }\n\n        String name = exe.substring(0, p > 0 ? p : exe.length());\n        String mv = (p > 0 ? exe.substring(p + 1) : null);\n\n        final ClassLoaderHolder clh = createClassLoader(name, mv, conf);\n\n        execute(conf, name, clh);\n    }\n\n    protected void execute(Configuration conf, String name, ClassLoaderHolder clh) throws Exception {\n        invokeRun(clh, name, conf.run, conf.arguments);\n    }\n\n\n}<fim_middle>// class below has no smell\n"}