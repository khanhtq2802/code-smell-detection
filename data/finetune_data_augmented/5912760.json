{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the  \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * $Id$\n */\npackage org.apache.xalan.templates;\n\nimport org.apache.xpath.ExpressionOwner;\nimport org.apache.xpath.XPathVisitor;\nimport org.apache.xpath.axes.LocPathIterator;\nimport org.apache.xpath.functions.FuncCurrent;\nimport org.apache.xpath.functions.FuncExtFunction;\nimport org.apache.xpath.functions.Function;\nimport org.apache.xpath.operations.Variable;\n\n/**\n * This class runs over a path expression that is assumed to be absolute, and \n * checks for variables and the like that may make it context dependent.\n */\n<fim_suffix>public class AbsPathChecker extends XPathVisitor\n{\n\tprivate boolean m_isAbs = true;\n\t\n\t/**\n\t * Process the LocPathIterator to see if it contains variables \n\t * or functions that may make it context dependent.\n\t * @param path LocPathIterator that is assumed to be absolute, but needs checking.\n\t * @return true if the path is confirmed to be absolute, false if it \n\t * may contain context dependencies.\n\t */\n\tpublic boolean checkAbsolute(LocPathIterator path)\n\t{\n\t\tm_isAbs = true;\n\t\tpath.callVisitors(null, this);\n\t\treturn m_isAbs;\n\t}\n\t\n\t/**\n\t * Visit a function.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param func The function reference object.\n\t * @return true if the sub expressions should be traversed.\n\t */\n\tpublic boolean visitFunction(ExpressionOwner owner, Function func)\n\t{\n\t\tif((func instanceof FuncCurrent) ||\n\t\t   (func instanceof FuncExtFunction))\n\t\t\tm_isAbs = false;\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Visit a variable reference.\n\t * @param owner The owner of the expression, to which the expression can \n\t *              be reset if rewriting takes place.\n\t * @param var The variable reference object.\n\t * @return true if the sub expressions should be traversed.\n\t */\n\tpublic boolean visitVariableRef(ExpressionOwner owner, Variable var)\n\t{\n\t\tm_isAbs = false;\n\t\treturn true;\n\t}\n}\n<fim_middle>// class below has no smell\n"}