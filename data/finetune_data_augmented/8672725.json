{"text": "<fim_prefix>                return res;\n            }\n            return super.remove(key);\n        }\n        /** {@inheritDoc} */\n        @Override public int size() {\n            return super.size() + (k3 != null ? 1 : 0);\n        }\n        /** {@inheritDoc} */\n        @Override public boolean containsKey(Object k) {\n            return super.containsKey(k) || (k3 != null && F.eq(k, k3));\n        }\n        /** {@inheritDoc} */\n        @Override public boolean containsValue(Object v) {\n            return super.containsValue(v) || (k3 != null && F.eq(v, v3));\n        }\n        /** {@inheritDoc} */\n        @Nullable @Override public V get(Object k) {\n            V v = super.get(k);\n            return v != null ? v : (k3 != null && F.eq(k, k3)) ? v3 : null;\n        }\n        /**\n         * Puts key-value pair into map only if given key is already contained in the map\n         * or there are free slots.\n         * Note that this implementation of {@link Map#put(Object, Object)} does not match\n         * general contract of {@link Map} interface and serves only for internal purposes.\n         *\n         * @param key Key.\n         * @param val Value.\n         * @return Previous value associated with given key.\n         */\n        @Nullable @Override public V put(K key, V val) throws NullPointerException {\n            V oldVal = get(key);\n            if (k1 == null || F.eq(k1, key)) {\n                k1 = key;\n                v1 = val;\n            }\n            else if (k2 == null || F.eq(k2, key)) {\n                k2 = key;\n                v2 = val;\n            }\n            else if (k3 == null || F.eq(k3, key)) {\n                k3 = key;\n                v3 = val;\n            }\n            return oldVal;\n        }\n        /** {@inheritDoc} */\n        @Override public Set<Entry<K, V>> entrySet() {\n            return new AbstractSet<Entry<K, V>>() {\n                @Override public Iterator<Entry<K, V>> iterator() {\n                    return new Iterator<Entry<K, V>>() {\n                        private int idx;\n                        private Entry<K, V> next;\n                        {\n                            if (k1 != null) {\n                                idx = 1;\n                                next = e(k1, v1);\n                            }\n                            else if (k2 != null) {\n                                idx = 2;\n                                next = e(k2, v2);\n                            }\n                            else if (k3 != null) {\n                                idx = 3;\n                                next = e(k3, v3);\n                            }\n                        }\n                        @Override public boolean hasNext() {\n                            return next != null;\n                        }\n                        @SuppressWarnings(\"fallthrough\")\n                        @Override public Entry<K, V> next() {\n                            if (!hasNext())\n                                throw new NoSuchElementException();\n                            Entry<K, V> old = next;\n                            next = null;\n                            switch (idx) {\n                                case 1:\n                                    if (k2 != null) {\n                                        idx = 2;\n                                        next = e(k2, v2);\n                                        break;\n                                    }\n                                case 2:\n                                    if (k3 != null) {\n                                        idx = 3;\n                                        next = e(k3, v3);\n                                        break;\n                                    }\n                            }\n                            return old;\n                        }\n                        @Override public void remove() {\n                            throw new UnsupportedOperationException();\n                        }\n                    };\n                }\n                @Override public int size() {\n                    return Map3.this.size();\n                }\n            };\n        }\n    }\n    /**\n     * Map for four entries.\n     */\n<fim_suffix>    private static class Map4<K, V> extends Map3<K, V> {\n        /** */\n        private static final long serialVersionUID = 0L;\n        /** */\n        protected K k4;\n        /** */\n        protected V v4;\n        /**\n         * Constructs map.\n         */\n        Map4() {\n            // No-op.\n        }\n        /**\n         * Constructs map.\n         *\n         * @param k1 Key1.\n         * @param v1 Value1.\n         * @param k2 Key2.\n         * @param v2 Value2.\n         * @param k3 Key3.\n         * @param v3 Value3.\n         * @param k4 Key4.\n         * @param v4 Value4.\n         */\n        Map4(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4) {\n            super(k1, v1, k2, v2, k3, v3);\n            this.k4 = k4;\n            this.v4 = v4;\n        }\n        /** {@inheritDoc} */\n        @Override public boolean isFull() {\n            return size() == 4;\n        }\n        /** {@inheritDoc} */\n        @Nullable @Override public V remove(Object key) {\n            if (F.eq(key, k4)) {\n                V res = v4;\n                v4 = null;\n                k4 = null;\n                return res;\n            }\n            return super.remove(key);\n        }\n        /** {@inheritDoc} */\n        @Override public int size() {\n            return super.size() + (k4 != null ? 1 : 0);\n        }\n        /** {@inheritDoc} */\n        @Override public boolean containsKey(Object k) {\n            return super.containsKey(k) || (k4 != null && F.eq(k, k4));\n        }\n        /** {@inheritDoc} */\n        @Override public boolean containsValue(Object v) {\n            return super.containsValue(v) || (k4 != null && F.eq(v, v4));\n        }\n        /** {@inheritDoc} */\n        @Nullable @Override public V get(Object k) {\n            V v = super.get(k);\n            return v != null ? v : (k4 != null && F.eq(k, k4)) ? v4 : null;\n        }\n        /**\n         * Puts key-value pair into map only if given key is already contained in the map\n         * or there are free slots.\n         * Note that this implementation of {@link Map#put(Object, Object)} does not match\n         * general contract of {@link Map} interface and serves only for internal purposes.\n         *\n         * @param key Key.\n         * @param val Value.\n         * @return Previous value associated with given key.\n         */\n        @Nullable @Override public V put(K key, V val) throws NullPointerException {\n            V oldVal = get(key);\n            if (k1 == null || F.eq(k1, key)) {\n                k1 = key;\n                v1 = val;\n            }\n            else if (k2 == null || F.eq(k2, key)) {\n                k2 = key;\n                v2 = val;\n            }\n            else if (k3 == null || F.eq(k3, key)) {\n                k3 = key;\n                v3 = val;\n            }\n            else if (k4 == null || F.eq(k4, key)) {\n                k4 = key;\n                v4 = val;\n            }\n            return oldVal;\n        }\n        /** {@inheritDoc} */\n        @Override public Set<Entry<K, V>> entrySet() {\n            return new AbstractSet<Entry<K, V>>() {\n                @Override public Iterator<Entry<K, V>> iterator() {\n                    return new Iterator<Entry<K, V>>() {\n                        private int idx;\n                        private Entry<K, V> next;\n                        {\n                            if (k1 != null) {\n                                idx = 1;\n                                next = e(k1, v1);\n                            }\n                            else if (k2 != null) {\n                                idx = 2;\n                                next = e(k2, v2);\n                            }\n                            else if (k3 != null) {\n                                idx = 3;\n                                next = e(k3, v3);\n                            }\n                            else if (k4 != null) {\n                                idx = 4;\n                                next = e(k4, v4);\n                            }\n                        }\n                        @Override public boolean hasNext() {\n                            return next != null;\n                        }\n                        @SuppressWarnings(\"fallthrough\")\n                        @Override public Entry<K, V> next() {\n                            if (!hasNext())\n                                throw new NoSuchElementException();\n                            Entry<K, V> old = next;\n                            next = null;\n                            switch (idx) {\n                                case 1:\n                                    if (k2 != null) {\n                                        idx = 2;\n                                        next = e(k2, v2);\n                                        break;\n                                    }\n                                case 2:\n                                    if (k3 != null) {\n                                        idx = 3;\n                                        next = e(k3, v3);\n                                        break;\n                                    }\n                                case 3:\n                                    if (k4 != null) {\n                                        idx = 4;\n                                        next = e(k4, v4);\n                                        break;\n                                    }\n                            }\n                            return old;\n                        }\n                        @Override public void remove() {\n                            throw new UnsupportedOperationException();\n                        }\n                    };\n                }\n                @Override public int size() {\n                    return Map4.this.size();\n                }\n            };\n        }\n    }<fim_middle>// class below has no smell\n"}