{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.bookkeeper.mledger.offload.jcloud;\n\nimport java.io.Closeable;\nimport java.io.FilterInputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport org.apache.bookkeeper.client.api.LedgerMetadata;\nimport org.apache.bookkeeper.common.annotation.InterfaceStability.Unstable;\n\n/**\n *\n * The Index block abstraction used for offload a ledger to long term storage.\n *\n */\n<fim_suffix>@Unstable\npublic interface OffloadIndexBlock extends Closeable {\n\n    /**\n     * Get the content of the index block as InputStream.\n     * Read out in format:\n     *   | index_magic_header | index_block_len | index_entry_count |\n     *   | data_object_size | segment_metadata_length | segment metadata | index entries ... |\n     */\n    IndexInputStream toStream() throws IOException;\n\n    /**\n     * Get the related OffloadIndexEntry that contains the given messageEntryId.\n     *\n     * @param messageEntryId\n     *                      the entry id of message\n     * @return the offload index entry\n     */\n    OffloadIndexEntry getIndexEntryForEntry(long messageEntryId) throws IOException;\n\n    /**\n     * Get the entry count that contained in this index Block.\n     */\n    int getEntryCount();\n\n    /**\n     * Get LedgerMetadata.\n     */\n    LedgerMetadata getLedgerMetadata();\n\n    /**\n     * Get the total size of the data object.\n     */\n    long getDataObjectLength();\n\n    /**\n     * Get the length of the header in the blocks in the data object.\n     */\n    long getDataBlockHeaderLength();\n\n    /**\n     * An input stream which knows the size of the stream upfront.\n     */\n    public static class IndexInputStream extends FilterInputStream {\n        final long streamSize;\n\n        public IndexInputStream(InputStream in, long streamSize) {\n            super(in);\n            this.streamSize = streamSize;\n        }\n\n        /**\n         * @return the number of bytes in the stream.\n         */\n        public long getStreamSize() {\n            return streamSize;\n        }\n    }\n}\n<fim_middle>// class below has no smell\n"}