{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.mapreduce.lib.map;\n\nimport java.io.IOException;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.apache.hadoop.classification.InterfaceAudience;\nimport org.apache.hadoop.classification.InterfaceStability;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Mapper;\n\n\n/** A {@link Mapper} that extracts text matching a regular expression. */\n<fim_suffix>@InterfaceAudience.Public\n@InterfaceStability.Stable\npublic class RegexMapper<K> extends Mapper<K, Text, Text, LongWritable> {\n\n  public static String PATTERN = \"mapreduce.mapper.regex\";\n  public static String GROUP = \"mapreduce.mapper.regexmapper..group\";\n  private Pattern pattern;\n  private int group;\n\n  public void setup(Context context) {\n    Configuration conf = context.getConfiguration();\n    pattern = Pattern.compile(conf.get(PATTERN));\n    group = conf.getInt(GROUP, 0);\n  }\n\n  public void map(K key, Text value,\n                  Context context)\n    throws IOException, InterruptedException {\n    String text = value.toString();\n    Matcher matcher = pattern.matcher(text);\n    while (matcher.find()) {\n      context.write(new Text(matcher.group(group)), new LongWritable(1));\n    }\n  }\n}<fim_middle>// class below has no smell\n"}