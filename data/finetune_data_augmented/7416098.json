{"text": "<fim_prefix>\t * @see #getCacheXml()\n\t * @see #configureHeapPercentages(org.apache.geode.cache.GemFireCache)\n\t * @see #registerJndiDataSources()\n\t * @see #registerTransactionListeners(org.apache.geode.cache.GemFireCache)\n\t * @see #registerTransactionWriter(org.apache.geode.cache.GemFireCache)\n\t */\n\t@SuppressWarnings(\"all\")\n\tprotected <T extends GemFireCache> T postProcess(T cache) {\n\t\tloadCacheXml(cache);\n\t\tOptional.ofNullable(getCopyOnRead()).ifPresent(cache::setCopyOnRead);\n\t\tif (cache instanceof Cache) {\n\t\t\tOptional.ofNullable(getGatewayConflictResolver()).ifPresent(((Cache) cache)::setGatewayConflictResolver);\n\t\t\tOptional.ofNullable(getLockLease()).ifPresent(((Cache) cache)::setLockLease);\n\t\t\tOptional.ofNullable(getLockTimeout()).ifPresent(((Cache) cache)::setLockTimeout);\n\t\t\tOptional.ofNullable(getMessageSyncInterval()).ifPresent(((Cache) cache)::setMessageSyncInterval);\n\t\t\tOptional.ofNullable(getSearchTimeout()).ifPresent(((Cache) cache)::setSearchTimeout);\n\t\t}\n\t\tconfigureHeapPercentages(cache);\n\t\tconfigureOffHeapPercentages(cache);\n\t\tregisterJndiDataSources(cache);\n\t\tregisterTransactionListeners(cache);\n\t\tregisterTransactionWriter(cache);\n\t\treturn cache;\n\t}\n\tprivate <T extends GemFireCache> T loadCacheXml(T cache) {\n\t\t// Load cache.xml Resource and initialize the cache\n\t\tOptional.ofNullable(getCacheXml()).ifPresent(cacheXml -> {\n\t\t\ttry {\n\t\t\t\tlogDebug(\"Initializing cache with [%s]\", cacheXml);\n\t\t\t\tcache.loadCacheXml(cacheXml.getInputStream());\n\t\t\t}\n\t\t\tcatch (IOException cause) {\n\t\t\t\tthrow newRuntimeException(cause, \"Failed to load cache.xml [%s]\", cacheXml);\n\t\t\t}\n\t\t});\n\t\treturn cache;\n\t}\n\tprivate boolean isHeapPercentageValid(Float heapPercentage) {\n\t\treturn heapPercentage >= 0.0f && heapPercentage <= 100.0f;\n\t}\n\tprivate GemFireCache configureHeapPercentages(GemFireCache cache) {\n\t\tOptional.ofNullable(getCriticalHeapPercentage()).ifPresent(criticalHeapPercentage -> {\n\t\t\tAssert.isTrue(isHeapPercentageValid(criticalHeapPercentage), String.format(\n\t\t\t\t\"criticalHeapPercentage [%s] is not valid; must be >= 0.0 and <= 100.0\", criticalHeapPercentage));\n\t\t\tcache.getResourceManager().setCriticalHeapPercentage(criticalHeapPercentage);\n\t\t});\n\t\tOptional.ofNullable(getEvictionHeapPercentage()).ifPresent(evictionHeapPercentage -> {\n\t\t\tAssert.isTrue(isHeapPercentageValid(evictionHeapPercentage), String.format(\n\t\t\t\t\"evictionHeapPercentage [%s] is not valid; must be >= 0.0 and <= 100.0\", evictionHeapPercentage));\n\t\t\tcache.getResourceManager().setEvictionHeapPercentage(evictionHeapPercentage);\n\t\t});\n\t\treturn cache;\n\t}\n\tprivate GemFireCache configureOffHeapPercentages(GemFireCache cache) {\n\t\tOptional.ofNullable(getCriticalOffHeapPercentage()).ifPresent(criticalOffHeapPercentage -> {\n\t\t\tAssert.isTrue(isHeapPercentageValid(criticalOffHeapPercentage), String.format(\n\t\t\t\t\"criticalOffHeapPercentage [%s] is not valid; must be >= 0.0 and <= 100.0\", criticalOffHeapPercentage));\n\t\t\tcache.getResourceManager().setCriticalOffHeapPercentage(criticalOffHeapPercentage);\n\t\t});\n\t\tOptional.ofNullable(getEvictionOffHeapPercentage()).ifPresent(evictionOffHeapPercentage -> {\n\t\t\tAssert.isTrue(isHeapPercentageValid(evictionOffHeapPercentage), String.format(\n\t\t\t\t\"evictionOffHeapPercentage [%s] is not valid; must be >= 0.0 and <= 100.0\", evictionOffHeapPercentage));\n\t\t\tcache.getResourceManager().setEvictionOffHeapPercentage(evictionOffHeapPercentage);\n\t\t});\n\t\treturn cache;\n\t}\n\tprivate GemFireCache registerJndiDataSources(GemFireCache cache) {\n\t\tnullSafeCollection(getJndiDataSources()).forEach(jndiDataSource -> {\n\t\t\tString type = jndiDataSource.getAttributes().get(\"type\");\n\t\t\tJndiDataSourceType jndiDataSourceType = JndiDataSourceType.valueOfIgnoreCase(type);\n\t\t\tAssert.notNull(jndiDataSourceType,\n\t\t\t\tString.format(\"'jndi-binding' 'type' [%1$s] is invalid; 'type' must be one of %2$s\",\n\t\t\t\t\ttype, Arrays.toString(JndiDataSourceType.values())));\n\t\t\tjndiDataSource.getAttributes().put(\"type\", jndiDataSourceType.getName());\n\t\t\tSpringUtils.safeRunOperation(() ->\n\t\t\t\tJNDIInvoker.mapDatasource(jndiDataSource.getAttributes(), jndiDataSource.getProps()));\n\t\t});\n\t\treturn cache;\n\t}\n\tprivate GemFireCache registerTransactionListeners(GemFireCache cache) {\n\t\tnullSafeCollection(getTransactionListeners())\n\t\t\t.forEach(transactionListener -> cache.getCacheTransactionManager().addListener(transactionListener));\n\t\treturn cache;\n\t}\n\tprivate GemFireCache registerTransactionWriter(GemFireCache cache) {\n\t\tOptional.ofNullable(getTransactionWriter()).ifPresent(it -> cache.getCacheTransactionManager().setWriter(it));\n\t\treturn cache;\n\t}\n\t/**\n\t * Null-safe internal method used to close the {@link GemFireCache} and calling {@link GemFireCache#close()}\n\t * iff the cache {@link GemFireCache#isClosed() is not already closed}.\n\t *\n\t * @param cache {@link GemFireCache} to close.\n\t * @see org.apache.geode.cache.GemFireCache#isClosed()\n\t * @see org.apache.geode.cache.GemFireCache#close()\n\t */\n\tprotected void close(GemFireCache cache) {\n\t\tOptional.ofNullable(cache)\n\t\t\t.filter(it -> !it.isClosed())\n\t\t\t.ifPresent(RegionService::close);\n\t\tsetCache(null);\n\t}\n\t/**\n\t * Destroys the {@link Cache} bean on Spring container shutdown.\n\t *\n\t * @throws Exception if an error occurs while closing the cache.\n\t * @see org.springframework.beans.factory.DisposableBean#destroy()\n\t * @see #destroyBeanFactoryLocator()\n\t * @see #close(GemFireCache)\n\t * @see #isClose()\n\t */\n\t@Override\n\tpublic void destroy() throws Exception {\n\t\tif (isClose()) {\n\t\t\tclose(fetchCache());\n\t\t\tdestroyBeanFactoryLocator();\n\t\t}\n\t}\n\t/**\n\t * Destroys the {@link GemfireBeanFactoryLocator}.\n\t *\n\t * @see org.springframework.data.gemfire.support.GemfireBeanFactoryLocator#destroy()\n\t */\n<fim_suffix>\tprivate void destroyBeanFactoryLocator() {\n\t\tOptional.ofNullable(getBeanFactoryLocator()).ifPresent(GemfireBeanFactoryLocator::destroy);\n\t\tthis.beanFactoryLocator = null;\n\t}<fim_middle>// function below has no smell\n"}