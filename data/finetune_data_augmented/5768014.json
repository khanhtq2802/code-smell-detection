{"text": "<fim_prefix>        metadataModal.size(Modal.Size.Large);\n        templateModal = new BaseModal<Serializable>(\"outer\") {\n            private static final long serialVersionUID = 5787433530654262016L;\n            @Override\n            protected void onConfigure() {\n                super.onConfigure();\n                setFooterVisible(false);\n            }\n        };\n        templateModal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n            private static final long serialVersionUID = 8804221891699487139L;\n            @Override\n            public void onClose(final AjaxRequestTarget target) {\n                templateModal.show(false);\n            }\n        });\n        templateModal.size(Modal.Size.Large);\n        addOuterObject(templateModal);\n        initResultTable();\n        final ImportMetadata importMetadata = new ImportMetadata(\"importMetadata\", container, pageRef);\n        addInnerObject(importMetadata);\n        AjaxLink<Void> importMetadataLink = new AjaxLink<Void>(\"add\") {\n            private static final long serialVersionUID = -7978723352517770644L;\n            @Override\n            public void onClick(final AjaxRequestTarget target) {\n                importMetadata.toggle(target, true);\n            }\n        };\n        ((WebMarkupContainer) get(\"container:content\")).addOrReplace(importMetadataLink);\n    }\n    @Override\n    protected SAML2IdPsProvider dataProvider() {\n        return new SAML2IdPsProvider(rows);\n    }\n    @Override\n    protected String paginatorRowsKey() {\n        return PREF_SAML2_IDPS_PAGINATOR_ROWS;\n    }\n    @Override\n    protected Collection<ActionLink.ActionType> getBatches() {\n        return Collections.<ActionLink.ActionType>emptyList();\n    }\n    @Override\n    protected List<IColumn<SAML2IdPTO, String>> getColumns() {\n        List<IColumn<SAML2IdPTO, String>> columns = new ArrayList<>();\n        columns.add(new KeyPropertyColumn<>(new ResourceModel(\"key\"), \"key\", \"key\"));\n        columns.add(new PropertyColumn<>(new ResourceModel(\"name\"), \"name\", \"name\"));\n        columns.add(new PropertyColumn<>(new ResourceModel(\"entityID\"), \"entityID\", \"entityID\"));\n        columns.add(new BooleanPropertyColumn<>(\n                new ResourceModel(\"useDeflateEncoding\"), \"useDeflateEncoding\", \"useDeflateEncoding\"));\n        columns.add(new BooleanPropertyColumn<>(\n                new ResourceModel(\"supportUnsolicited\"), \"supportUnsolicited\", \"supportUnsolicited\"));\n        columns.add(new PropertyColumn<>(\n                new ResourceModel(\"bindingType\"), \"bindingType\", \"bindingType\"));\n        columns.add(new BooleanPropertyColumn<>(\n                new ResourceModel(\"logoutSupported\"), \"logoutSupported\", \"logoutSupported\"));\n        return columns;\n    }\n    @Override\n    public ActionsPanel<SAML2IdPTO> getActions(final IModel<SAML2IdPTO> model) {\n        final ActionsPanel<SAML2IdPTO> panel = super.getActions(model);\n        panel.add(new ActionLink<SAML2IdPTO>() {\n            private static final long serialVersionUID = -7978723352517770645L;\n            @Override\n            public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n                SAML2IdPTO object = restClient.read(model.getObject().getKey());\n                metadataModal.header(Model.of(object.getName() + \" - Metadata\"));\n                metadataModal.setContent(new XMLEditorPanel(\n                        metadataModal,\n                        Model.of(new String(Base64.getMimeDecoder().decode(object.getMetadata()))),\n                        true,\n                        pageRef));\n                metadataModal.show(true);\n                target.add(metadataModal);\n            }\n        }, ActionLink.ActionType.HTML, SAML2SPEntitlement.IDP_READ);\n        panel.add(new ActionLink<SAML2IdPTO>() {\n            private static final long serialVersionUID = -3722207913631435501L;\n            @Override\n            public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n                SAML2IdPTO object = restClient.read(model.getObject().getKey());\n                send(SAML2IdPsDirectoryPanel.this, Broadcast.EXACT,\n                        new AjaxWizard.EditItemActionEvent<>(object, target));\n            }\n        }, ActionLink.ActionType.EDIT, SAML2SPEntitlement.IDP_UPDATE);\n        panel.add(new ActionLink<SAML2IdPTO>() {\n            private static final long serialVersionUID = -3722207913631435501L;\n            @Override\n            public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n                final SAML2IdPTO object = restClient.read(model.getObject().getKey());\n                UserTemplateWizardBuilder builder = new UserTemplateWizardBuilder(\n                        object.getUserTemplate(),\n                        new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses(),\n                        new UserFormLayoutInfo(),\n                        pageRef) {\n                    private static final long serialVersionUID = -7978723352517770634L;\n                    @Override\n                    protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n                        object.setUserTemplate(modelObject.getInnerObject());\n                        restClient.update(object);\n                        return modelObject;\n                    }\n                };\n                templateModal.header(Model.of(StringUtils.capitalize(\n                        new StringResourceModel(\"template.title\", SAML2IdPsDirectoryPanel.this).getString())));\n                templateModal.setContent(builder.build(BaseModal.CONTENT_ID));\n                templateModal.show(true);\n                target.add(templateModal);\n            }\n        }, ActionLink.ActionType.TEMPLATE, SAML2SPEntitlement.IDP_UPDATE);\n        panel.add(new ActionLink<SAML2IdPTO>() {\n            private static final long serialVersionUID = -5467832321897812767L;\n            @Override\n            public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n                try {\n                    restClient.delete(model.getObject().getKey());\n                    SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                    target.add(container);\n                } catch (SyncopeClientException e) {\n                    LOG.error(\"While deleting object {}\", model.getObject().getKey(), e);\n                    SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())\n                            ? e.getClass().getName() : e.getMessage());\n                }\n                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n            }\n        }, ActionLink.ActionType.DELETE, SAML2SPEntitlement.IDP_DELETE, true);\n        return panel;\n    }\n    @Override\n    public void onEvent(final IEvent<?> event) {\n        super.onEvent(event);\n        if (event.getPayload() instanceof AjaxWizard.NewItemEvent) {\n            AjaxWizard.NewItemEvent<?> newItemEvent = AjaxWizard.NewItemEvent.class.cast(event.getPayload());\n            WizardModalPanel<?> modalPanel = newItemEvent.getModalPanel();\n            if (event.getPayload() instanceof AjaxWizard.NewItemActionEvent && modalPanel != null) {\n                final IModel<Serializable> model = new CompoundPropertyModel<>(modalPanel.getItem());\n                templateModal.setFormModel(model);\n                templateModal.header(newItemEvent.getResourceModel());\n                newItemEvent.getTarget().add(templateModal.setContent(modalPanel));\n                templateModal.show(true);\n            } else if (event.getPayload() instanceof AjaxWizard.NewItemCancelEvent) {\n                templateModal.close(newItemEvent.getTarget());\n            } else if (event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {\n                templateModal.close(newItemEvent.getTarget());\n            }\n        }\n    }\n    protected final class SAML2IdPsProvider extends DirectoryDataProvider<SAML2IdPTO> {\n        private static final long serialVersionUID = -185944053385660794L;\n        private final SortableDataProviderComparator<SAML2IdPTO> comparator;\n        private SAML2IdPsProvider(final int paginatorRows) {\n            super(paginatorRows);\n            setSort(\"name\", SortOrder.ASCENDING);\n            comparator = new SortableDataProviderComparator<>(this);\n        }\n<fim_suffix>        @Override\n        public Iterator<SAML2IdPTO> iterator(final long first, final long count) {\n            List<SAML2IdPTO> list = restClient.list();\n            Collections.sort(list, comparator);\n            return list.subList((int) first, (int) first + (int) count).iterator();\n        }<fim_middle>// function below has no smell\n"}