{"text": "<fim_prefix>/*\n * Copyright (c) 2018, 2019, Oracle and/or its affiliates.\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this list of\n * conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other materials provided\n * with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n * endorse or promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.oracle.truffle.llvm.runtime.interop;\n\nimport com.oracle.truffle.api.dsl.Fallback;\nimport com.oracle.truffle.api.dsl.NodeChild;\nimport com.oracle.truffle.api.dsl.Specialization;\nimport com.oracle.truffle.api.frame.VirtualFrame;\nimport com.oracle.truffle.api.interop.TruffleObject;\nimport com.oracle.truffle.llvm.runtime.LLVMBoxedPrimitive;\nimport com.oracle.truffle.llvm.runtime.except.LLVMPolyglotException;\nimport com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode;\nimport com.oracle.truffle.llvm.runtime.nodes.api.LLVMNode;\nimport com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer;\n\n@NodeChild(type = LLVMExpressionNode.class)\npublic abstract class LLVMAsForeignNode extends LLVMNode {\n\n    final boolean allowNonForeign;\n\n    protected LLVMAsForeignNode(boolean allowNonForeign) {\n        this.allowNonForeign = allowNonForeign;\n    }\n\n    public abstract TruffleObject execute(VirtualFrame frame);\n\n    public abstract TruffleObject execute(LLVMManagedPointer pointer);\n\n    public static LLVMAsForeignNode create() {\n        return LLVMAsForeignNodeGen.create(false, null);\n    }\n\n    public static LLVMAsForeignNode create(LLVMExpressionNode arg) {\n        return LLVMAsForeignNodeGen.create(false, arg);\n    }\n\n    public static LLVMAsForeignNode createOptional() {\n        return LLVMAsForeignNodeGen.create(true, null);\n    }\n\n    @Specialization(guards = \"isForeign(pointer)\")\n    TruffleObject doForeign(LLVMManagedPointer pointer) {\n        LLVMTypedForeignObject foreign = (LLVMTypedForeignObject) pointer.getObject();\n        return foreign.getForeign();\n    }\n\n    @Specialization\n    TruffleObject doBoxed(LLVMBoxedPrimitive boxed) {\n        return boxed;\n    }\n\n<fim_suffix>    @Fallback\n    TruffleObject doOther(@SuppressWarnings(\"unused\") Object pointer) {\n        if (allowNonForeign) {\n            return null;\n        } else {\n            throw new LLVMPolyglotException(this, \"Pointer does not point to a polyglot value.\");\n        }\n    }\n\n    protected static boolean isForeign(LLVMManagedPointer pointer) {\n        return pointer.getOffset() == 0 && pointer.getObject() instanceof LLVMTypedForeignObject;\n    }\n}<fim_middle>// function below has no smell\n"}