{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.drill.exec.planner.sql;\n\nimport org.apache.calcite.sql.fun.SqlBetweenOperator;\nimport org.apache.calcite.sql.SqlCallBinding;\nimport org.apache.calcite.sql.SqlOperator;\n\nimport org.apache.drill.common.types.TypeProtos;\nimport org.apache.drill.exec.resolver.TypeCastRules;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * This class serves as a wrapper class for SqlBetweenOperator. The motivation is to plug-in the return type inference and operand\n * type check algorithms of Drill into Calcite's sql validation procedure.\n *\n * Except for the methods which are relevant to the return type inference and operand type check algorithms, the wrapper\n * simply forwards the method calls to the wrapped SqlOperator.\n *\n * Note that SqlBetweenOperator cannot be wrapped in {@link DrillCalciteSqlOperatorWrapper}. The reason is when RexNode\n * conversion is happening, StandardConvertletTable.convertBetween expects the SqlOperator to be a subclass of SqlBetweenOperator.\n */\n<fim_suffix>public class DrillCalciteSqlBetweenOperatorWrapper extends SqlBetweenOperator implements DrillCalciteSqlWrapper  {\n  private final SqlBetweenOperator operator;\n\n  public DrillCalciteSqlBetweenOperatorWrapper(SqlBetweenOperator sqlBetweenOperator) {\n    super(sqlBetweenOperator.flag, sqlBetweenOperator.isNegated());\n    operator = sqlBetweenOperator;\n  }\n\n  @Override\n  public SqlOperator getOperator() {\n    return operator;\n  }\n\n  /**\n   * Since Calcite has its rule for type compatibility\n   * (see {@link org.apache.calcite.sql.type.SqlTypeUtil#isComparable(org.apache.calcite.rel.type.RelDataType,\n   * org.apache.calcite.rel.type.RelDataType)}), which is usually different from Drill's, this method is overridden here to avoid\n   * Calcite early terminating the queries.\n   */\n  @Override\n  public boolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure) {\n    final List<TypeProtos.MinorType> types = new ArrayList<>();\n    for (int i = 0; i < callBinding.getOperandCount(); i++) {\n      final TypeProtos.MinorType inMinorType = TypeInferenceUtils.getDrillTypeFromCalciteType(callBinding.getOperandType(i));\n      if (inMinorType == TypeProtos.MinorType.LATE) {\n        return true;\n      }\n      types.add(inMinorType);\n    }\n\n    final boolean isCompatible = TypeCastRules.getLeastRestrictiveType(types) != null;\n    if (!isCompatible && throwOnFailure) {\n      throw callBinding.newValidationSignatureError();\n    }\n    return isCompatible;\n  }\n}<fim_middle>// class below has no smell\n"}