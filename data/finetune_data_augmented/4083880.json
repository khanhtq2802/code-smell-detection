{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.dataflow.data.nontagged.hash;\n\nimport org.apache.hyracks.api.dataflow.value.IBinaryHashFunction;\nimport org.apache.hyracks.api.dataflow.value.IBinaryHashFunctionFactory;\nimport org.apache.hyracks.data.std.primitive.IntegerPointable;\n\npublic class LongBinaryHashFunctionFactory implements IBinaryHashFunctionFactory {\n\n    private static final long serialVersionUID = 1L;\n\n    public static final LongBinaryHashFunctionFactory INSTANCE = new LongBinaryHashFunctionFactory();\n\n    private LongBinaryHashFunctionFactory() {\n    }\n\n<fim_suffix>    @Override\n    public IBinaryHashFunction createBinaryHashFunction() {\n\n        return new IBinaryHashFunction() {\n\n            @Override\n            public int hash(byte[] bytes, int offset, int length) {\n                return IntegerPointable.getInteger(bytes, offset + 4);\n            }\n        };\n    }\n\n}<fim_middle>// function below has no smell\n"}