{"text": "<fim_prefix>/*\n *   Licensed to the Apache Software Foundation (ASF) under one\n *   or more contributor license agreements.  See the NOTICE file\n *   distributed with this work for additional information\n *   regarding copyright ownership.  The ASF licenses this file\n *   to you under the Apache License, Version 2.0 (the\n *   \"License\"); you may not use this file except in compliance\n *   with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing,\n *   software distributed under the License is distributed on an\n *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *   KIND, either express or implied.  See the License for the\n *   specific language governing permissions and limitations\n *   under the License.\n *\n */\npackage org.apache.directory.fortress.core.ldap;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.pool.PoolableObjectFactory;\nimport org.apache.commons.pool.impl.GenericObjectPool;\nimport org.apache.directory.api.ldap.codec.api.LdapApiService;\nimport org.apache.directory.api.ldap.codec.api.LdapApiServiceFactory;\nimport org.apache.directory.api.ldap.codec.standalone.StandaloneLdapApiService;\nimport org.apache.directory.api.ldap.model.exception.LdapException;\nimport org.apache.directory.fortress.core.CfgRuntimeException;\nimport org.apache.directory.fortress.core.GlobalErrIds;\nimport org.apache.directory.fortress.core.GlobalIds;\nimport org.apache.directory.fortress.core.util.Config;\nimport org.apache.directory.fortress.core.util.EncryptUtil;\nimport org.apache.directory.ldap.client.api.LdapConnection;\nimport org.apache.directory.ldap.client.api.LdapConnectionConfig;\nimport org.apache.directory.ldap.client.api.LdapConnectionPool;\nimport org.apache.directory.ldap.client.api.ValidatingPoolableLdapConnectionFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n/**\n * This utility manages the LDAP connection pools and provides methods for adding / removing connections from the three pools.\n * <ul>\n *   <li>Admin Connections - bound with ldap service account creds</li>\n *   <li>User Connections - unbound used for authentication</li>\n *   <li>Audit Log Connections - bound with slapo access log service account creds (OpenLDAP only)</li>\n * </ul>\n *\n * Each connection pool is initialized on first invocation of getInstance() which stores a reference to self used by subsequent callers.\n * <p>\n * This class is not thread safe.\n *\n * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n */\npublic class LdapConnectionProvider\n{\n    private static final String CLS_NM = LdapConnectionProvider.class.getName();\n    private static final Logger LOG = LoggerFactory.getLogger( CLS_NM );\n    private static final String ENABLE_LDAP_STARTTLS = \"enable.ldap.starttls\";\n    private boolean IS_SSL;\n    /**\n     * The Admin connection pool\n     */\n    private static LdapConnectionPool adminPool;\n    /**\n     * The Log connection pool\n     */\n    private static LdapConnectionPool logPool;\n    /**\n     * The User connection pool\n     */\n    private static LdapConnectionPool userPool;\n    private static volatile LdapConnectionProvider sINSTANCE = null;\n    /**\n     * Synchronized getter guards access to reference to self which is a singleton and only be created the first time invoked.\n     *\n     * @return reference to self.\n     */\n    public static LdapConnectionProvider getInstance()\n    {\n        if ( sINSTANCE == null )\n        {\n            synchronized ( LdapConnectionProvider.class )\n            {\n                if ( sINSTANCE == null )\n                {\n                    sINSTANCE = new LdapConnectionProvider();\n                }\n            }\n        }\n        return sINSTANCE;\n    }\n    /**\n     * Private constructor calls the init method which initializes the connection pools.\n     *\n     */\n<fim_suffix>    private LdapConnectionProvider()\n    {\n        init();\n    }\n    /**\n     * Initialize the three connection pools using settings and coordinates contained in the config.\n     */\n    private void init()\n    {\n        IS_SSL = ( Config.getInstance().getProperty( GlobalIds.ENABLE_LDAP_SSL ) != null &&\n            Config.getInstance().getProperty( GlobalIds.ENABLE_LDAP_SSL ).equalsIgnoreCase( \"true\" ) &&\n            Config.getInstance().getProperty( GlobalIds.TRUST_STORE ) != null &&\n            Config.getInstance().getProperty( GlobalIds.TRUST_STORE_PW, true ) != null );\n        String host = Config.getInstance().getProperty( GlobalIds.LDAP_HOST, \"localhost\" );\n        int port = Config.getInstance().getInt( GlobalIds.LDAP_PORT, 389 );\n        int min = Config.getInstance().getInt( GlobalIds.LDAP_ADMIN_POOL_MIN, 1 );\n        int max = Config.getInstance().getInt( GlobalIds.LDAP_ADMIN_POOL_MAX, 10 );\n        int logmin = Config.getInstance().getInt( GlobalIds.LDAP_LOG_POOL_MIN, 1 );\n        int logmax = Config.getInstance().getInt( GlobalIds.LDAP_LOG_POOL_MAX, 10 );\n        boolean testWhileIdle = Config.getInstance().getBoolean( GlobalIds.LDAP_ADMIN_POOL_TEST_IDLE, true );\n        boolean logTestWhileIdle = Config.getInstance().getBoolean( GlobalIds.LDAP_LOG_POOL_TEST_IDLE, true );\n        int timeBetweenEvictionRunMillis = Config.getInstance().getInt( GlobalIds.LDAP_ADMIN_POOL_EVICT_RUN_MILLIS, 1000 * 60 * 30 );\n        int logTimeBetweenEvictionRunMillis = Config.getInstance().getInt( GlobalIds.LDAP_LOG_POOL_EVICT_RUN_MILLIS, 1000 * 60 * 30 );\n        LOG.info( \"LDAP POOL:  host=[{}], port=[{}], min=[{}], max=[{}]\", host, port, min, max );\n        LdapConnectionConfig config = new LdapConnectionConfig();\n        config.setLdapHost( host );\n        config.setLdapPort( port );\n        config.setName( Config.getInstance().getProperty( GlobalIds.LDAP_ADMIN_POOL_UID, \"\" ) );\n        config.setUseSsl( IS_SSL );\n        //config.setTrustManagers( new NoVerificationTrustManager() );\n        if ( Config.getInstance().getBoolean( ENABLE_LDAP_STARTTLS, false ) )\n        {\n            config.setUseTls( true );\n        }\n        if ( IS_SSL && StringUtils.isNotEmpty( Config.getInstance().getProperty( GlobalIds.TRUST_STORE ) ) &&\n            StringUtils.isNotEmpty( Config.getInstance().getProperty( GlobalIds.TRUST_STORE_PW ) ) )\n        {\n            // validate certificates but allow self-signed certs if within this truststore:\n            config.setTrustManagers( new LdapClientTrustStoreManager( Config.getInstance().getProperty( GlobalIds\n                .TRUST_STORE ), Config.getInstance().getProperty( GlobalIds.TRUST_STORE_PW ).toCharArray(), null,\n                true ) );\n        }\n        String adminPw;\n        if ( EncryptUtil.isEnabled() )\n        {\n            adminPw = EncryptUtil.getInstance().decrypt( Config.getInstance().getProperty( GlobalIds\n                .LDAP_ADMIN_POOL_PW, true ) );\n        }\n        else\n        {\n            adminPw = Config.getInstance().getProperty( GlobalIds.LDAP_ADMIN_POOL_PW, true );\n        }\n        config.setCredentials( adminPw );\n        try\n        {\n            List<String> listExOps = new ArrayList<>();\n            listExOps.add( \"org.openldap.accelerator.impl.createSession.RbacCreateSessionFactory\" );\n            listExOps.add( \"org.openldap.accelerator.impl.checkAccess.RbacCheckAccessFactory\" );\n            listExOps.add( \"org.openldap.accelerator.impl.addRole.RbacAddRoleFactory\" );\n            listExOps.add( \"org.openldap.accelerator.impl.dropRole.RbacDropRoleFactory\" );\n            listExOps.add( \"org.openldap.accelerator.impl.deleteSession.RbacDeleteSessionFactory\" );\n            listExOps.add( \"org.openldap.accelerator.impl.sessionRoles.RbacSessionRolesFactory\" );\n            LdapApiService ldapApiService = new StandaloneLdapApiService( new ArrayList<String>(), listExOps );\n            if ( !LdapApiServiceFactory.isInitialized() )\n            {\n                LdapApiServiceFactory.initialize( ldapApiService );\n            }\n            config.setLdapApiService( ldapApiService );\n        }\n        catch ( Exception ex )\n        {\n            String error = \"Exception caught initializing Admin Pool: \" + ex;<fim_middle>// function below has no smell\n"}