{"text": "<fim_prefix>/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.metrics.export.influx;\n\nimport io.micrometer.influx.InfluxConsistency;\n\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.properties.StepRegistryProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n/**\n * {@link ConfigurationProperties} for configuring Influx metrics export.\n *\n * @author Jon Schneider\n * @author Stephane Nicoll\n * @since 2.0.0\n */\n@ConfigurationProperties(prefix = \"management.metrics.export.influx\")\npublic class InfluxProperties extends StepRegistryProperties {\n\n\t/**\n\t * Tag that will be mapped to \"host\" when shipping metrics to Influx.\n\t */\n\tprivate String db = \"mydb\";\n\n\t/**\n\t * Write consistency for each point.\n\t */\n\tprivate InfluxConsistency consistency = InfluxConsistency.ONE;\n\n\t/**\n\t * Login user of the Influx server.\n\t */\n\tprivate String userName;\n\n\t/**\n\t * Login password of the Influx server.\n\t */\n\tprivate String password;\n\n\t/**\n\t * Retention policy to use (Influx writes to the DEFAULT retention policy if one is\n\t * not specified).\n\t */\n\tprivate String retentionPolicy;\n\n\t/**\n\t * Time period for which Influx should retain data in the current database. For\n\t * instance 7d, check the influx documentation for more details on the duration\n\t * format.\n\t */\n\tprivate String retentionDuration;\n\n\t/**\n\t * How many copies of the data are stored in the cluster. Must be 1 for a single node\n\t * instance.\n\t */\n\tprivate Integer retentionReplicationFactor;\n\n\t/**\n\t * Time range covered by a shard group. For instance 2w, check the influx\n\t * documentation for more details on the duration format.\n\t */\n\tprivate String retentionShardDuration;\n\n\t/**\n\t * URI of the Influx server.\n\t */\n\tprivate String uri = \"http://localhost:8086\";\n\n\t/**\n\t * Whether to enable GZIP compression of metrics batches published to Influx.\n\t */\n\tprivate boolean compressed = true;\n\n\t/**\n\t * Whether to create the Influx database if it does not exist before attempting to\n\t * publish metrics to it.\n\t */\n\tprivate boolean autoCreateDb = true;\n\n\tpublic String getDb() {\n\t\treturn this.db;\n\t}\n\n\tpublic void setDb(String db) {\n\t\tthis.db = db;\n\t}\n\n\tpublic InfluxConsistency getConsistency() {\n\t\treturn this.consistency;\n\t}\n\n\tpublic void setConsistency(InfluxConsistency consistency) {\n\t\tthis.consistency = consistency;\n\t}\n\n\tpublic String getUserName() {\n\t\treturn this.userName;\n\t}\n\n\tpublic void setUserName(String userName) {\n\t\tthis.userName = userName;\n\t}\n\n\tpublic String getPassword() {\n\t\treturn this.password;\n\t}\n\n\tpublic void setPassword(String password) {\n\t\tthis.password = password;\n\t}\n\n\tpublic String getRetentionPolicy() {\n\t\treturn this.retentionPolicy;\n\t}\n\n\tpublic void setRetentionPolicy(String retentionPolicy) {\n\t\tthis.retentionPolicy = retentionPolicy;\n\t}\n\n\tpublic String getRetentionDuration() {\n\t\treturn this.retentionDuration;\n\t}\n\n<fim_suffix>\tpublic void setRetentionDuration(String retentionDuration) {\n\t\tthis.retentionDuration = retentionDuration;\n\t}\n\n\tpublic Integer getRetentionReplicationFactor() {\n\t\treturn this.retentionReplicationFactor;\n\t}\n\n\tpublic void setRetentionReplicationFactor(Integer retentionReplicationFactor) {\n\t\tthis.retentionReplicationFactor = retentionReplicationFactor;\n\t}\n\n\tpublic String getRetentionShardDuration() {\n\t\treturn this.retentionShardDuration;\n\t}\n\n\tpublic void setRetentionShardDuration(String retentionShardDuration) {\n\t\tthis.retentionShardDuration = retentionShardDuration;\n\t}\n\n\tpublic String getUri() {\n\t\treturn this.uri;\n\t}\n\n\tpublic void setUri(String uri) {\n\t\tthis.uri = uri;\n\t}\n\n\tpublic boolean isCompressed() {\n\t\treturn this.compressed;\n\t}\n\n\tpublic void setCompressed(boolean compressed) {\n\t\tthis.compressed = compressed;\n\t}\n\n\tpublic boolean isAutoCreateDb() {\n\t\treturn this.autoCreateDb;\n\t}\n\n\tpublic void setAutoCreateDb(boolean autoCreateDb) {\n\t\tthis.autoCreateDb = autoCreateDb;\n\t}\n\n}<fim_middle>// function below has no smell\n"}