{"text": "<fim_prefix>      checkReady();\n      cloneTable_call method_call = new cloneTable_call(login, tableName, newTableName, flush, propertiesToSet, propertiesToExclude, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class cloneTable_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {\n      private java.nio.ByteBuffer login;\n      private java.lang.String tableName;\n      private java.lang.String newTableName;\n      private boolean flush;\n      private java.util.Map<java.lang.String,java.lang.String> propertiesToSet;\n      private java.util.Set<java.lang.String> propertiesToExclude;\n      public cloneTable_call(java.nio.ByteBuffer login, java.lang.String tableName, java.lang.String newTableName, boolean flush, java.util.Map<java.lang.String,java.lang.String> propertiesToSet, java.util.Set<java.lang.String> propertiesToExclude, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.login = login;\n        this.tableName = tableName;\n        this.newTableName = newTableName;\n        this.flush = flush;\n        this.propertiesToSet = propertiesToSet;\n        this.propertiesToExclude = propertiesToExclude;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"cloneTable\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        cloneTable_args args = new cloneTable_args();\n        args.setLogin(login);\n        args.setTableName(tableName);\n        args.setNewTableName(newTableName);\n        args.setFlush(flush);\n        args.setPropertiesToSet(propertiesToSet);\n        args.setPropertiesToExclude(propertiesToExclude);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public Void getResult() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, TableExistsException, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new java.lang.IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return null;\n      }\n    }\n    public void compactTable(java.nio.ByteBuffer login, java.lang.String tableName, java.nio.ByteBuffer startRow, java.nio.ByteBuffer endRow, java.util.List<IteratorSetting> iterators, boolean flush, boolean wait, CompactionStrategyConfig compactionStrategy, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      compactTable_call method_call = new compactTable_call(login, tableName, startRow, endRow, iterators, flush, wait, compactionStrategy, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class compactTable_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {\n      private java.nio.ByteBuffer login;\n      private java.lang.String tableName;\n      private java.nio.ByteBuffer startRow;\n      private java.nio.ByteBuffer endRow;\n      private java.util.List<IteratorSetting> iterators;\n      private boolean flush;\n      private boolean wait;\n      private CompactionStrategyConfig compactionStrategy;\n      public compactTable_call(java.nio.ByteBuffer login, java.lang.String tableName, java.nio.ByteBuffer startRow, java.nio.ByteBuffer endRow, java.util.List<IteratorSetting> iterators, boolean flush, boolean wait, CompactionStrategyConfig compactionStrategy, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.login = login;\n        this.tableName = tableName;\n        this.startRow = startRow;\n        this.endRow = endRow;\n        this.iterators = iterators;\n        this.flush = flush;\n        this.wait = wait;\n        this.compactionStrategy = compactionStrategy;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"compactTable\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        compactTable_args args = new compactTable_args();\n        args.setLogin(login);\n        args.setTableName(tableName);\n        args.setStartRow(startRow);\n        args.setEndRow(endRow);\n        args.setIterators(iterators);\n        args.setFlush(flush);\n        args.setWait(wait);\n        args.setCompactionStrategy(compactionStrategy);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public Void getResult() throws AccumuloSecurityException, TableNotFoundException, AccumuloException, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new java.lang.IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return null;\n      }\n    }\n    public void cancelCompaction(java.nio.ByteBuffer login, java.lang.String tableName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      cancelCompaction_call method_call = new cancelCompaction_call(login, tableName, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n<fim_suffix>    public static class cancelCompaction_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {\n      private java.nio.ByteBuffer login;\n      private java.lang.String tableName;\n      public cancelCompaction_call(java.nio.ByteBuffer login, java.lang.String tableName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.login = login;\n        this.tableName = tableName;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"cancelCompaction\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        cancelCompaction_args args = new cancelCompaction_args();\n        args.setLogin(login);\n        args.setTableName(tableName);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public Void getResult() throws AccumuloSecurityException, TableNotFoundException, AccumuloException, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new java.lang.IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return null;\n      }\n    }<fim_middle>// class below has no smell\n"}