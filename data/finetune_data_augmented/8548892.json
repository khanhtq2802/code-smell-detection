{"text": "<fim_prefix>            resources = hostDao.findByClusterId(partition.getId());\n        } else if (partition.partitionType() == Partition.PartitionType.Zone) {\n            resources = hostDao.findByDataCenterId(partition.getId());\n        } else {\n            return true;\n        }\n        boolean result = true;\n        for (final HAResource resource: resources) {\n            result = result && transitionHAState(HAConfig.Event.Disabled,\n                    haConfigDao.findHAResource(resource.getId(), resource.resourceType()));\n        }\n        return result;\n    }\n    private boolean checkHAOwnership(final HAConfig haConfig) {\n        // Skip for resources not owned by this mgmt server\n        return !(haConfig.getManagementServerId() != null\n                && haConfig.getManagementServerId() != ManagementServerNode.getManagementServerId());\n    }\n    private HAResource validateAndFindHAResource(final HAConfig haConfig) {\n        HAResource resource = null;\n        if (haConfig == null) {\n            return null;\n        }\n        if (haConfig.getResourceType() == HAResource.ResourceType.Host) {\n            final Host host = hostDao.findById(haConfig.getResourceId());\n            if (host != null && host.getRemoved() != null) {\n                return null;\n            }\n            resource = host;\n            if (haConfig.getState() == null || (resource == null && haConfig.getState() != HAConfig.HAState.Disabled)) {\n                disableHA(haConfig.getResourceId(), haConfig.getResourceType());\n                return null;\n            }\n        }\n        if (!haConfig.isEnabled() || !isHAEnabledForZone(resource) || !isHAEnabledForCluster(resource)) {\n            if (haConfig.getState() != HAConfig.HAState.Disabled) {\n                if (transitionHAState(HAConfig.Event.Disabled, haConfig) ) {\n                    purgeHACounter(haConfig.getResourceId(), haConfig.getResourceType());\n                }\n            }\n            return null;\n        } else if (haConfig.getState() == HAConfig.HAState.Disabled) {\n            transitionHAState(HAConfig.Event.Enabled, haConfig);\n        }\n        return resource;\n    }\n    private HAProvider<HAResource> validateAndFindHAProvider(final HAConfig haConfig, final HAResource resource) {\n        if (haConfig == null) {\n            return null;\n        }\n        final HAProvider<HAResource> haProvider = haProviderMap.get(haConfig.getHaProvider());\n        if (haProvider != null && !haProvider.isEligible(resource)) {\n            if (haConfig.getState() != HAConfig.HAState.Ineligible) {\n                transitionHAState(HAConfig.Event.Ineligible, haConfig);\n            }\n            return null;\n        } else if (haConfig.getState() == HAConfig.HAState.Ineligible) {\n            transitionHAState(HAConfig.Event.Eligible, haConfig);\n        }\n        return haProvider;\n    }\n    public boolean isHAEnabledForZone(final HAResource resource) {\n        if (resource == null || resource.getDataCenterId() < 1L) {\n            return true;\n        }\n        final DataCenterDetailVO zoneDetails = dataCenterDetailsDao.findDetail(resource.getDataCenterId(), HA_ENABLED_DETAIL);\n        return zoneDetails == null || Strings.isNullOrEmpty(zoneDetails.getValue()) || Boolean.valueOf(zoneDetails.getValue());\n    }\n    private boolean isHAEnabledForCluster(final HAResource resource) {\n        if (resource == null || resource.getClusterId() == null) {\n            return true;\n        }\n        final ClusterDetailsVO clusterDetails = clusterDetailsDao.findDetail(resource.getClusterId(), HA_ENABLED_DETAIL);\n        return clusterDetails == null || Strings.isNullOrEmpty(clusterDetails.getValue()) || Boolean.valueOf(clusterDetails.getValue());\n    }\n    private boolean isHAEligibleForResource(final HAResource resource) {\n        if (resource == null || resource.getId() < 1L) {\n            return false;\n        }\n        HAResource.ResourceType resourceType = null;\n        if (resource instanceof Host) {\n            resourceType = HAResource.ResourceType.Host;\n        }\n        if (resourceType == null) {\n            return false;\n        }\n        final HAConfig haConfig = haConfigDao.findHAResource(resource.getId(), resourceType);\n        return haConfig != null && haConfig.isEnabled()\n                && haConfig.getState() != HAConfig.HAState.Disabled\n                && haConfig.getState() != HAConfig.HAState.Ineligible;\n    }\n    public boolean isHAEligible(final HAResource resource) {\n        return resource != null && isHAEnabledForZone(resource)\n                && isHAEnabledForCluster(resource)\n                && isHAEligibleForResource(resource);\n    }\n    public void validateHAProviderConfigForResource(final Long resourceId, final HAResource.ResourceType resourceType, final HAProvider<HAResource> haProvider) {\n        if (HAResource.ResourceType.Host.equals(resourceType)) {\n            final Host host = hostDao.findById(resourceId);\n            if (host.getHypervisorType() == null || haProvider.resourceSubType() == null || !host.getHypervisorType().toString().equals(haProvider.resourceSubType().toString())) {\n                throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Incompatible haprovider provided for the resource of hypervisor type:\" + host.getHypervisorType());\n            }\n        }\n    }\n    ////////////////////////////////////////////////////////////////////\n    //////////////// HA Investigator wrapper for Old HA ////////////////\n    ////////////////////////////////////////////////////////////////////\n    public Boolean isVMAliveOnHost(final Host host) throws Investigator.UnknownVM {\n        final HAConfig haConfig = haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host);\n        if (haConfig != null) {\n            if (haConfig.getState() == HAConfig.HAState.Fenced) {\n                if (LOG.isDebugEnabled()){\n                    LOG.debug(\"HA: Host is fenced \" + host.getId());\n                }\n                return false;\n            }\n            if (LOG.isDebugEnabled()){\n                LOG.debug(\"HA: HOST is alive \" + host.getId());\n            }\n            return true;\n        }\n        throw new Investigator.UnknownVM();\n    }\n    public Status getHostStatus(final Host host) {\n        final HAConfig haConfig = haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host);\n        if (haConfig != null) {\n            if (haConfig.getState() == HAConfig.HAState.Fenced) {\n                if (LOG.isDebugEnabled()){\n                    LOG.debug(\"HA: Agent is available/suspect/checking Up \" + host.getId());\n                }\n                return Status.Down;\n            } else if (haConfig.getState() == HAConfig.HAState.Degraded || haConfig.getState() == HAConfig.HAState.Recovering || haConfig.getState() == HAConfig.HAState.Fencing) {\n                if (LOG.isDebugEnabled()){\n                    LOG.debug(\"HA: Agent is disconnected \" + host.getId());\n                }\n                return Status.Disconnected;\n            }\n            return Status.Up;\n        }\n        return Status.Unknown;\n    }\n    //////////////////////////////////////////////////////\n    //////////////// HA API handlers /////////////////////\n    //////////////////////////////////////////////////////\n<fim_suffix>    private boolean configureHA(final Long resourceId, final HAResource.ResourceType resourceType, final Boolean enable, final String haProvider) {\n        return Transaction.execute(new TransactionCallback<Boolean>() {\n            @Override\n            public Boolean doInTransaction(TransactionStatus status) {\n                HAConfigVO haConfig = (HAConfigVO) haConfigDao.findHAResource(resourceId, resourceType);\n                if (haConfig == null) {\n                    haConfig = new HAConfigVO();\n                    if (haProvider != null) {\n                        haConfig.setHaProvider(haProvider);\n                    }\n                    if (enable != null) {\n                        haConfig.setEnabled(enable);\n                        haConfig.setManagementServerId(ManagementServerNode.getManagementServerId());\n                    }\n                    haConfig.setResourceId(resourceId);\n                    haConfig.setResourceType(resourceType);\n                    if (Strings.isNullOrEmpty(haConfig.getHaProvider())) {\n                        throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"HAProvider is not provided for the resource, failing configuration.\");\n                    }\n                    if (haConfigDao.persist(haConfig) != null) {\n                        return true;\n                    }\n                } else {\n                    if (enable != null) {\n                        haConfig.setEnabled(enable);\n                    }\n                    if (haProvider != null) {\n                        haConfig.setHaProvider(haProvider);\n                    }\n                    if (Strings.isNullOrEmpty(haConfig.getHaProvider())) {\n                        throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"HAProvider is not provided for the resource, failing configuration.\");\n                    }\n                    return haConfigDao.update(haConfig.getId(), haConfig);\n                }\n                return false;\n            }\n        });\n    }<fim_middle>// function below is long method\n"}