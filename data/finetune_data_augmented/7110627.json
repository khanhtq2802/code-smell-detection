{"text": "<fim_prefix>/*\n* ApplicationInsights-Java\n* Copyright (c) Microsoft Corporation\n* All rights reserved.\n*\n* MIT License\n* Permission is hereby granted, free of charge, to any person obtaining a copy of this\n* software and associated documentation files (the \"\"Software\"\"), to deal in the Software\n* without restriction, including without limitation the rights to use, copy, modify, merge,\n* publish, distribute, sublicense, and/or sell copies of the Software, and to permit\n* persons to whom the Software is furnished to do so, subject to the following conditions:\n* The above copyright notice and this permission notice shall be included in all copies or\n* substantial portions of the Software.\n* THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n* PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\n* FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n* OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n* DEALINGS IN THE SOFTWARE.\n*/\n/*\n * Generated from AvailabilityData.bond (https://github.com/Microsoft/bond)\n*/\npackage com.microsoft.applicationinsights.internal.schemav2;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport com.microsoft.applicationinsights.telemetry.JsonSerializable;\nimport com.microsoft.applicationinsights.telemetry.Duration;\nimport com.microsoft.applicationinsights.telemetry.JsonTelemetryDataSerializer;\nimport com.google.common.base.Preconditions;\n\n/**\n * Data contract class AvailabilityData.\n */\npublic class AvailabilityData extends Domain\n{\n    /**\n     * Backing field for property Ver.\n     */\n    private int ver = 2;\n    \n    /**\n     * Backing field for property Id.\n     */\n    private String id;\n    \n    /**\n     * Backing field for property Name.\n     */\n    private String name;\n    \n    /**\n     * Backing field for property Duration.\n     */\n    private Duration duration = new Duration(0);\n    \n    /**\n     * Backing field for property Success.\n     */\n    private boolean success;\n    \n    /**\n     * Backing field for property RunLocation.\n     */\n    private String runLocation;\n    \n    /**\n     * Backing field for property Message.\n     */\n    private String message;\n    \n    /**\n     * Backing field for property Properties.\n     */\n    private ConcurrentMap<String, String> properties;\n    \n    /**\n     * Backing field for property Measurements.\n     */\n    private ConcurrentMap<String, Double> measurements;\n    \n    /**\n     * Initializes a new instance of the AvailabilityData class.\n     */\n    public AvailabilityData()\n    {\n        this.InitializeFields();\n    }\n    \n    /**\n     * Gets the Ver property.\n     */\n    public int getVer() {\n        return this.ver;\n    }\n    \n    /**\n     * Sets the Ver property.\n     */\n    public void setVer(int value) {\n        this.ver = value;\n    }\n    \n    /**\n     * Gets the Id property.\n     */\n    public String getId() {\n        return this.id;\n    }\n    \n    /**\n     * Sets the Id property.\n     */\n    public void setId(String value) {\n        this.id = value;\n    }\n    \n    /**\n     * Gets the Name property.\n     */\n    public String getName() {\n        return this.name;\n    }\n    \n    /**\n     * Sets the Name property.\n     */\n    public void setName(String value) {\n        this.name = value;\n    }\n    \n    /**\n     * Gets the Duration property.\n     */\n    public Duration getDuration() {\n        return this.duration;\n    }\n    \n    /**\n     * Sets the Duration property.\n     */\n    public void setDuration(Duration value) {\n        this.duration = value;\n    }\n    \n    /**\n     * Gets the Success property.\n     */\n    public boolean getSuccess() {\n        return this.success;\n    }\n    \n    /**\n     * Sets the Success property.\n     */\n    public void setSuccess(boolean value) {\n        this.success = value;\n    }\n    \n    /**\n     * Gets the RunLocation property.\n     */\n    public String getRunLocation() {\n        return this.runLocation;\n    }\n    \n    /**\n     * Sets the RunLocation property.\n     */\n    public void setRunLocation(String value) {\n        this.runLocation = value;\n    }\n    \n    /**\n     * Gets the Message property.\n     */\n    public String getMessage() {\n        return this.message;\n    }\n    \n    /**\n     * Sets the Message property.\n     */\n    public void setMessage(String value) {\n        this.message = value;\n    }\n    \n    /**\n     * Gets the Properties property.\n     */\n    public ConcurrentMap<String, String> getProperties() {\n        if (this.properties == null) {\n            this.properties = new ConcurrentHashMap<String, String>();\n        }\n        return this.properties;\n    }\n    \n    /**\n     * Sets the Properties property.\n     */\n    public void setProperties(ConcurrentMap<String, String> value) {\n        this.properties = value;\n    }\n    \n    /**\n     * Gets the Measurements property.\n     */\n<fim_suffix>    public ConcurrentMap<String, Double> getMeasurements() {\n        if (this.measurements == null) {\n            this.measurements = new ConcurrentHashMap<String, Double>();\n        }\n        return this.measurements;\n    }\n    \n    /**\n     * Sets the Measurements property.\n     */\n    public void setMeasurements(ConcurrentMap<String, Double> value) {\n        this.measurements = value;\n    }\n    \n\n    /**\n     * Serializes the beginning of this object to the passed in writer.\n     * @param writer The writer to serialize this object to.\n     */\n    protected void serializeContent(JsonTelemetryDataSerializer writer) throws IOException\n    {\n        super.serializeContent(writer);\n        writer.write(\"ver\", ver);\n        writer.writeRequired(\"id\", id, 64);\n        writer.writeRequired(\"name\", name, 1024);\n        writer.write(\"duration\", duration);\n        writer.write(\"success\", success);\n        writer.write(\"runLocation\", runLocation, 1024);\n        writer.write(\"message\", message, 8192);\n        writer.write(\"properties\", properties);\n        writer.write(\"measurements\", measurements);\n    }\n    \n    /**\n     * Optionally initializes fields for the current context.\n     */\n    protected void InitializeFields() {\n        \n    }\n}<fim_middle>// function below has no smell\n"}