{"text": "<fim_prefix>/**\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage org.apache.isis.schema.services.jaxb;\n\nimport java.util.Map;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\nimport org.apache.isis.applib.NonRecoverableException;\nimport org.apache.isis.applib.annotation.DomainService;\nimport org.apache.isis.applib.annotation.NatureOfService;\nimport org.apache.isis.applib.domain.DomainObjectList;\nimport org.apache.isis.applib.services.jaxb.JaxbService;\nimport org.apache.isis.applib.services.metamodel.MetaModelService5;\nimport org.apache.isis.applib.services.registry.ServiceRegistry;\nimport org.apache.isis.schema.utils.jaxbadapters.PersistentEntitiesAdapter;\nimport org.apache.isis.schema.utils.jaxbadapters.PersistentEntityAdapter;\n\n@DomainService(\n        nature = NatureOfService.DOMAIN,\n        menuOrder = \"\" + Integer.MAX_VALUE\n)\npublic class JaxbServiceDefault extends JaxbService.Simple {\n\n    @Override\n    public Object fromXml(final JAXBContext jaxbContext, final String xml, final Map<String, Object> unmarshallerProperties) {\n        try {\n            Object pojo = internalFromXml(jaxbContext, xml, unmarshallerProperties);\n\n            if(pojo instanceof DomainObjectList) {\n\n                // go around the loop again, so can properly deserialize the contents\n                DomainObjectList list = (DomainObjectList) pojo;\n                JAXBContext jaxbContextForList = jaxbContextFor(list);\n                \n                return internalFromXml(jaxbContextForList, xml, unmarshallerProperties);\n            }\n\n            return pojo;\n\n        } catch (final JAXBException ex) {\n            throw new NonRecoverableException(\"Error unmarshalling XML\", ex);\n        }\n    }\n\n    @Override\n    protected JAXBContext jaxbContextFor(final Object domainObject) {\n        final Class<?> domainClass = domainObject.getClass();\n        if(domainObject instanceof DomainObjectList) {\n            DomainObjectList list = (DomainObjectList) domainObject;\n            try {\n                final String elementObjectType = list.getElementObjectType();\n                final Class<?> elementType = metaModelService5.fromObjectType(elementObjectType);\n                if (elementType.getAnnotation(XmlJavaTypeAdapter.class) == null) {\n                    return JAXBContext.newInstance(domainClass, elementType);\n                } else {\n                    return JAXBContext.newInstance(domainClass);\n                }\n            } catch (JAXBException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return super.jaxbContextFor(domainObject);\n    }\n\n\n    @Override\n    protected void configure(final Unmarshaller unmarshaller) {\n        unmarshaller.setAdapter(PersistentEntityAdapter.class,\n                serviceRegistry.injectServicesInto(new PersistentEntityAdapter()));\n        unmarshaller.setAdapter(PersistentEntitiesAdapter.class,\n                serviceRegistry.injectServicesInto(new PersistentEntitiesAdapter()));\n    }\n\n<fim_suffix>    @Override\n    protected void configure(final Marshaller marshaller) {\n        marshaller.setAdapter(PersistentEntityAdapter.class,\n                serviceRegistry.injectServicesInto(new PersistentEntityAdapter()));\n        marshaller.setAdapter(PersistentEntitiesAdapter.class,\n                serviceRegistry.injectServicesInto(new PersistentEntitiesAdapter()));\n    }\n\n\n    @javax.inject.Inject\n    ServiceRegistry serviceRegistry;\n\n    @javax.inject.Inject\n    MetaModelService5 metaModelService5;\n}\n<fim_middle>// function below is feature envy\n"}