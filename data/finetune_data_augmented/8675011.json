{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache.affinity;\n\nimport java.io.Externalizable;\nimport java.io.IOException;\nimport java.io.ObjectInput;\nimport java.io.ObjectOutput;\nimport java.io.ObjectStreamException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.ignite.cache.affinity.Affinity;\nimport org.apache.ignite.cluster.ClusterNode;\nimport org.apache.ignite.internal.processors.cache.CacheOperationContext;\nimport org.apache.ignite.internal.processors.cache.GridCacheContext;\nimport org.apache.ignite.internal.processors.cache.GridCacheGateway;\nimport org.jetbrains.annotations.Nullable;\n\n/**\n * Affinity interface implementation.\n */\npublic class GridCacheAffinityProxy<K, V> implements Affinity<K>, Externalizable {\n    /** */\n    private static final long serialVersionUID = 0L;\n\n    /** Cache gateway. */\n    private GridCacheGateway<K, V> gate;\n\n    /** Affinity delegate. */\n    private Affinity<K> delegate;\n\n    /** Context. */\n    private GridCacheContext<K, V> cctx;\n\n    /**\n     * Required by {@link Externalizable}.\n     */\n    public GridCacheAffinityProxy() {\n        // No-op.\n    }\n\n    /**\n     * @param cctx Context.\n     * @param delegate Delegate object.\n     */\n    public GridCacheAffinityProxy(GridCacheContext<K, V> cctx, Affinity<K> delegate) {\n        gate = cctx.gate();\n        this.delegate = delegate;\n        this.cctx = cctx;\n    }\n\n    /** {@inheritDoc} */\n    @Override public int partitions() {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.partitions();\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public int partition(K key) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.partition(key);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public boolean isPrimary(ClusterNode n, K key) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.isPrimary(n, key);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public boolean isBackup(ClusterNode n, K key) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.isBackup(n, key);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public boolean isPrimaryOrBackup(ClusterNode n, K key) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.isPrimaryOrBackup(n, key);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public int[] primaryPartitions(ClusterNode n) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.primaryPartitions(n);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public int[] backupPartitions(ClusterNode n) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.backupPartitions(n);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public int[] allPartitions(ClusterNode n) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.allPartitions(n);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public ClusterNode mapPartitionToNode(int part) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.mapPartitionToNode(part);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public Map<Integer, ClusterNode> mapPartitionsToNodes(Collection<Integer> parts) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.mapPartitionsToNodes(parts);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public Object affinityKey(K key) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.affinityKey(key);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n\n    /** {@inheritDoc} */\n    @Override @Nullable public ClusterNode mapKeyToNode(K key) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.mapKeyToNode(key);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public Map<ClusterNode, Collection<K>> mapKeysToNodes(@Nullable Collection<? extends K> keys) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.mapKeysToNodes(keys);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public Collection<ClusterNode> mapKeyToPrimaryAndBackups(K key) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.mapKeyToPrimaryAndBackups(key);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n<fim_suffix>    @Override public Collection<ClusterNode> mapPartitionToPrimaryAndBackups(int part) {\n        CacheOperationContext old = gate.enter(null);\n\n        try {\n            return delegate.mapPartitionToPrimaryAndBackups(part);\n        }\n        finally {\n            gate.leave(old);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public void writeExternal(ObjectOutput out) throws IOException {\n        out.writeObject(cctx);\n    }\n\n    /** {@inheritDoc} */\n    @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n        cctx = (GridCacheContext<K, V>)in.readObject();\n    }\n\n    /**\n     * Reconstructs object on unmarshalling.\n     *\n     * @return Reconstructed object.\n     * @throws ObjectStreamException Thrown in case of unmarshalling error.\n     */\n    private Object readResolve() throws ObjectStreamException {\n        return cctx.grid().affinity(cctx.cache().name());\n    }\n}<fim_middle>// function below has no smell\n"}