{"text": "<fim_prefix>        }\n        @Override\n        public FieldInfo copy(ModelFormField modelFormField) {\n            return new DropDownField(this, modelFormField);\n        }\n        public boolean getAllowMulti() {\n            return allowMulti;\n        }\n        public AutoComplete getAutoComplete() {\n            return this.autoComplete;\n        }\n        public String getCurrent() {\n            if (UtilValidate.isEmpty(this.current)) {\n                return \"first-in-list\";\n            }\n            return this.current;\n        }\n        public FlexibleStringExpander getCurrentDescription() {\n            return currentDescription;\n        }\n        public String getCurrentDescription(Map<String, Object> context) {\n            if (this.currentDescription == null) {\n                return null;\n            }\n            return this.currentDescription.expandString(context);\n        }\n        public int getOtherFieldSize() {\n            return this.otherFieldSize;\n        }\n        /**\n         * Get the name to use for the parameter for this field in the form interpreter.\n         * For HTML forms this is the request parameter name.\n         * @param context the context\n         * @return returns the name to use for the parameter for this field in the form interpreter.\n         */\n        public String getParameterNameOther(Map<String, Object> context) {\n            String baseName;\n            if (UtilValidate.isNotEmpty(getModelFormField().parameterName)) {\n                baseName = getModelFormField().parameterName;\n            } else {\n                baseName = getModelFormField().name;\n            }\n            baseName += \"_OTHER\";\n            Integer itemIndex = (Integer) context.get(\"itemIndex\");\n            if (itemIndex != null && \"multi\".equals(getModelFormField().modelForm.getType())) {\n                return baseName + getModelFormField().modelForm.getItemIndexSeparator() + itemIndex;\n            }\n            return baseName;\n        }\n        public String getSize() {\n            return this.size;\n        }\n        public SubHyperlink getSubHyperlink() {\n            return this.subHyperlink;\n        }\n        public String getTextSize() {\n            return this.textSize;\n        }\n        public boolean getAllowEmpty() {\n            return this.allowEmpty;\n        }\n        public boolean getAllowMultiple() {\n            return this.allowMulti;\n        }\n        @Override\n        public void renderFieldString(Appendable writer, Map<String, Object> context, FormStringRenderer formStringRenderer)\n                throws IOException {\n            formStringRenderer.renderDropDownField(writer, context, this);\n        }\n    }\n    /**\n     * Models the &lt;entity-options&gt; element.\n     *\n     * @see <code>widget-form.xsd</code>\n     */\n    public static class EntityOptions extends OptionSource {\n        private final boolean cache;\n        private final List<EntityFinderUtil.ConditionExpr> constraintList;\n        private final FlexibleStringExpander description;\n        private final String entityName;\n        private final String filterByDate;\n        private final String keyFieldName;\n        private final List<String> orderByList;\n        public EntityOptions(Element entityOptionsElement, ModelFormField modelFormField) {\n            super(modelFormField);\n            this.cache = !\"false\".equals(entityOptionsElement.getAttribute(\"cache\"));\n            List<? extends Element> constraintElements = UtilXml.childElementList(entityOptionsElement, \"entity-constraint\");\n            if (!constraintElements.isEmpty()) {\n                List<EntityFinderUtil.ConditionExpr> constraintList = new ArrayList<>(\n                        constraintElements.size());\n                for (Element constraintElement : constraintElements) {\n                    constraintList.add(new EntityFinderUtil.ConditionExpr(constraintElement));\n                }\n                this.constraintList = Collections.unmodifiableList(constraintList);\n            } else {\n                this.constraintList = Collections.emptyList();\n            }\n            this.description = FlexibleStringExpander.getInstance(entityOptionsElement.getAttribute(\"description\"));\n            this.entityName = entityOptionsElement.getAttribute(\"entity-name\");\n            this.filterByDate = entityOptionsElement.getAttribute(\"filter-by-date\");\n            this.keyFieldName = entityOptionsElement.getAttribute(\"key-field-name\");\n            List<? extends Element> orderByElements = UtilXml.childElementList(entityOptionsElement, \"entity-order-by\");\n            if (!orderByElements.isEmpty()) {\n                List<String> orderByList = new ArrayList<>(orderByElements.size());\n                for (Element orderByElement : orderByElements) {\n                    orderByList.add(orderByElement.getAttribute(\"field-name\"));\n                }\n                this.orderByList = Collections.unmodifiableList(orderByList);\n            } else {\n                this.orderByList = Collections.emptyList();\n            }\n        }\n        private EntityOptions(EntityOptions original, ModelFormField modelFormField) {\n            super(modelFormField);\n            this.cache = original.cache;\n            this.constraintList = original.constraintList;\n            this.description = original.description;\n            this.entityName = original.entityName;\n            this.filterByDate = original.filterByDate;\n            this.keyFieldName = original.keyFieldName;\n            this.orderByList = original.orderByList;\n        }\n        public EntityOptions(ModelFormField modelFormField) {\n            super(modelFormField);\n            this.cache = true;\n            this.constraintList = Collections.emptyList();\n            this.description = FlexibleStringExpander.getInstance(\"\");\n            this.entityName = \"\";\n            this.filterByDate = \"\";\n            this.keyFieldName = \"\";\n            this.orderByList = Collections.emptyList();\n        }\n<fim_suffix>        @Override\n        public void addOptionValues(List<OptionValue> optionValues, Map<String, Object> context, Delegator delegator) {\n            // first expand any conditions that need expanding based on the current context\n            EntityCondition findCondition = null;\n            if (UtilValidate.isNotEmpty(this.constraintList)) {\n                List<EntityCondition> expandedConditionList = new LinkedList<>();\n                for (EntityFinderUtil.Condition condition : constraintList) {\n                    ModelEntity modelEntity = delegator.getModelEntity(this.entityName);\n                    if (modelEntity == null) {\n                        throw new IllegalArgumentException(\"Error in entity-options: could not find entity [\" + this.entityName\n                                + \"]\");\n                    }\n                    EntityCondition createdCondition = condition.createCondition(context, modelEntity,\n                            delegator.getModelFieldTypeReader(modelEntity));\n                    if (createdCondition != null) {\n                        expandedConditionList.add(createdCondition);\n                    }\n                }\n                findCondition = EntityCondition.makeCondition(expandedConditionList);\n            }\n            try {\n                Locale locale = UtilMisc.ensureLocale(context.get(\"locale\"));\n                ModelEntity modelEntity = delegator.getModelEntity(this.entityName);\n                Boolean localizedOrderBy = UtilValidate.isNotEmpty(this.orderByList)\n                        && ModelUtil.isPotentialLocalizedFields(modelEntity, this.orderByList);\n                List<GenericValue> values = null;\n                if (!localizedOrderBy) {\n                    values = delegator.findList(this.entityName, findCondition, null, this.orderByList, null, this.cache);\n                } else {\n                    //if entity has localized label\n                    values = delegator.findList(this.entityName, findCondition, null, null, null, this.cache);\n                    values = EntityUtil.localizedOrderBy(values, this.orderByList, locale);\n                }\n                // filter-by-date if requested\n                if (\"true\".equals(this.filterByDate)) {\n                    values = EntityUtil.filterByDate(values, true);\n                } else if (!\"false\".equals(this.filterByDate)) {\n                    // not explicitly true or false, check to see if has fromDate and thruDate, if so do the filter\n                    if (modelEntity != null && modelEntity.isField(\"fromDate\") && modelEntity.isField(\"thruDate\")) {\n                        values = EntityUtil.filterByDate(values, true);\n                    }\n                }\n                for (GenericValue value : values) {\n                    // add key and description with string expansion, ie expanding ${} stuff, passing locale explicitly to expand value string because it won't be found in the Entity\n                    MapStack<String> localContext = MapStack.create(context);\n                    // Rendering code might try to modify the GenericEntity instance,\n                    // so we make a copy of it.\n                    Map<String, Object> genericEntityClone = UtilGenerics.cast(value.clone());\n                    localContext.push(genericEntityClone);\n                    // expand with the new localContext, which is locale aware\n                    String optionDesc = this.description.expandString(localContext, locale);\n                    Object keyFieldObject = value.get(this.getKeyFieldName());\n                    if (keyFieldObject == null) {\n                        throw new IllegalArgumentException(\n                                \"The entity-options identifier (from key-name attribute, or default to the field name) [\"\n                                        + this.getKeyFieldName() + \"], may not be a valid key field name for the entity [\"\n                                        + this.entityName + \"].\");\n                    }\n                    String keyFieldValue = keyFieldObject.toString();\n                    optionValues.add(new OptionValue(keyFieldValue, optionDesc));\n                }\n            } catch (GenericEntityException e) {\n                Debug.logError(e, \"Error getting entity options in form\", module);\n            }\n        }<fim_middle>// function below is long method and feature envy\n"}