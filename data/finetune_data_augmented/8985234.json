{"text": "<fim_prefix>      }\n    }\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\nclass ValueIfFunction extends AbstractAnalyticsValue {\n  private final BooleanValue ifExpr;\n  private final AnalyticsValue thenExpr;\n  private final AnalyticsValue elseExpr;\n  public static final String name = IfFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public ValueIfFunction(BooleanValue ifExpr, AnalyticsValue thenExpr, AnalyticsValue elseExpr) throws SolrException {\n    this.ifExpr = ifExpr;\n    this.thenExpr = thenExpr;\n    this.elseExpr = elseExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,ifExpr,thenExpr,elseExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,ifExpr,thenExpr,elseExpr);\n  }\n  private boolean exists = false;\n  @Override\n  public Object getObject() {\n    exists = false;\n    Object value = null;\n    boolean ifValue = ifExpr.getBoolean();\n    if (ifExpr.exists()) {\n      if (ifValue) {\n        value = thenExpr.getObject();\n        exists = thenExpr.exists();\n      }\n      else {\n        value = elseExpr.getObject();\n        exists = elseExpr.exists();\n      }\n    }\n    return value;\n  }\n  @Override\n  public boolean exists() {\n    return exists;\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\nclass BooleanStreamIfFunction extends AbstractBooleanValueStream {\n  private final BooleanValue ifExpr;\n  private final BooleanValueStream thenExpr;\n  private final BooleanValueStream elseExpr;\n  public static final String name = IfFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public BooleanStreamIfFunction(BooleanValue ifExpr, BooleanValueStream thenExpr, BooleanValueStream elseExpr) throws SolrException {\n    this.ifExpr = ifExpr;\n    this.thenExpr = thenExpr;\n    this.elseExpr = elseExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,ifExpr,thenExpr,elseExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,ifExpr,thenExpr,elseExpr);\n  }\n  @Override\n  public void streamBooleans(BooleanConsumer cons) {\n    boolean ifValue = ifExpr.getBoolean();\n    if (ifExpr.exists()) {\n      if (ifValue) {\n        thenExpr.streamBooleans(cons);\n      }\n      else {\n        elseExpr.streamBooleans(cons);\n      }\n    }\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\nclass BooleanIfFunction extends AbstractBooleanValue {\n  private final BooleanValue ifExpr;\n  private final BooleanValue thenExpr;\n  private final BooleanValue elseExpr;\n  public static final String name = IfFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public BooleanIfFunction(BooleanValue ifExpr, BooleanValue thenExpr, BooleanValue elseExpr) throws SolrException {\n    this.ifExpr = ifExpr;\n    this.thenExpr = thenExpr;\n    this.elseExpr = elseExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,ifExpr,thenExpr,elseExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,ifExpr,thenExpr,elseExpr);\n  }\n  private boolean exists = false;\n  @Override\n  public boolean getBoolean() {\n    exists = false;\n    boolean value = false;\n    boolean ifValue = ifExpr.getBoolean();\n    if (ifExpr.exists()) {\n      if (ifValue) {\n        value = thenExpr.getBoolean();\n        exists = thenExpr.exists();\n      }\n      else {\n        value = elseExpr.getBoolean();\n        exists = elseExpr.exists();\n      }\n    }\n    return value;\n  }\n  @Override\n  public boolean exists() {\n    return exists;\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\nclass IntStreamIfFunction extends AbstractIntValueStream {\n  private final BooleanValue ifExpr;\n  private final IntValueStream thenExpr;\n  private final IntValueStream elseExpr;\n  public static final String name = IfFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public IntStreamIfFunction(BooleanValue ifExpr, IntValueStream thenExpr, IntValueStream elseExpr) throws SolrException {\n    this.ifExpr = ifExpr;\n    this.thenExpr = thenExpr;\n    this.elseExpr = elseExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,ifExpr,thenExpr,elseExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,ifExpr,thenExpr,elseExpr);\n  }\n  @Override\n  public void streamInts(IntConsumer cons) {\n    boolean ifValue = ifExpr.getBoolean();\n    if (ifExpr.exists()) {\n      if (ifValue) {\n        thenExpr.streamInts(cons);\n      }\n      else {\n        elseExpr.streamInts(cons);\n      }\n    }\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\nclass IntIfFunction extends AbstractIntValue {\n  private final BooleanValue ifExpr;\n  private final IntValue thenExpr;\n  private final IntValue elseExpr;\n  public static final String name = IfFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public IntIfFunction(BooleanValue ifExpr, IntValue thenExpr, IntValue elseExpr) throws SolrException {\n    this.ifExpr = ifExpr;\n    this.thenExpr = thenExpr;\n    this.elseExpr = elseExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,ifExpr,thenExpr,elseExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,ifExpr,thenExpr,elseExpr);\n  }\n  private boolean exists = false;\n  @Override\n  public int getInt() {\n    exists = false;\n    int value = 0;\n    boolean ifValue = ifExpr.getBoolean();\n    if (ifExpr.exists()) {\n      if (ifValue) {\n        value = thenExpr.getInt();\n        exists = thenExpr.exists();\n      }\n      else {\n        value = elseExpr.getInt();\n        exists = elseExpr.exists();\n      }\n    }\n    return value;\n  }\n  @Override\n  public boolean exists() {\n    return exists;\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\n<fim_suffix>class LongStreamIfFunction extends AbstractLongValueStream {\n  private final BooleanValue ifExpr;\n  private final LongValueStream thenExpr;\n  private final LongValueStream elseExpr;\n  public static final String name = IfFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public LongStreamIfFunction(BooleanValue ifExpr, LongValueStream thenExpr, LongValueStream elseExpr) throws SolrException {\n    this.ifExpr = ifExpr;\n    this.thenExpr = thenExpr;\n    this.elseExpr = elseExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,ifExpr,thenExpr,elseExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,ifExpr,thenExpr,elseExpr);\n  }\n  @Override\n  public void streamLongs(LongConsumer cons) {\n    boolean ifValue = ifExpr.getBoolean();\n    if (ifExpr.exists()) {\n      if (ifValue) {\n        thenExpr.streamLongs(cons);\n      }\n      else {\n        elseExpr.streamLongs(cons);\n      }\n    }\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}<fim_middle>// class below has no smell\n"}