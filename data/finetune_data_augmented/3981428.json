{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *\n */\n\npackage org.apache.polygene.runtime.composite;\n\nimport java.lang.annotation.Annotation;\nimport org.apache.polygene.api.common.ConstructionException;\nimport org.apache.polygene.api.constraint.Constraint;\n\n/**\n * JAVADOC\n */\npublic final class ConstraintModel\n    extends AbstractConstraintModel\n{\n    private final Class<? extends Constraint<?, ?>> constraintClass;\n\n<fim_suffix>    public ConstraintModel( Annotation annotation, Class<? extends Constraint<?, ?>> constraintClass )\n    {\n        super( annotation );\n        this.constraintClass = constraintClass;\n    }\n\n    @Override\n    @SuppressWarnings( \"unchecked\" )\n    public ConstraintInstance<?, ?> newInstance()\n    {\n        try\n        {\n            Constraint<?, ?> constraint = constraintClass.newInstance();\n            return new ConstraintInstance( constraint, annotation );\n        }\n        catch( Exception e )\n        {\n            throw new ConstructionException( \"Could not instantiate constraint implementation\", e );\n        }\n    }\n}<fim_middle>// function below has no smell\n"}