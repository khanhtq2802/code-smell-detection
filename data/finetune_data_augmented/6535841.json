{"text": "<fim_prefix>/**\n * Copyright (c) 2014,2019 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\npackage org.eclipse.smarthome.io.net.http;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.time.Duration;\nimport java.util.Properties;\n\nimport org.eclipse.jdt.annotation.NonNullByDefault;\nimport org.eclipse.jdt.annotation.Nullable;\n\n/**\n * Builder class to construct http requests\n *\n * @author Martin van Wingerden - Initial contribution\n */\n<fim_suffix>@NonNullByDefault\npublic class HttpRequestBuilder {\n    private final String method;\n    private final String url;\n\n    private Duration timeout = Duration.ofSeconds(5);\n\n    private @Nullable Properties headers;\n    private @Nullable InputStream inputStream;\n    private @Nullable String contentType;\n\n    /**\n     * Private constructor, to hide away the construction behind some factory methods\n     *\n     * @param method Http method to be used\n     * @param url url to fetch or post data to\n     */\n    private HttpRequestBuilder(String method, String url) {\n        this.method = method;\n        this.url = url;\n    }\n\n    /**\n     * Construct an http request builder to get data from an <code>url</code>\n     *\n     * @param url to fetch the data from\n     * @return a request builder to construct and complete the request\n     */\n    public static HttpRequestBuilder getFrom(String url) {\n        return new HttpRequestBuilder(\"GET\", url);\n    }\n\n    /**\n     * Construct an http request builder to post data to a <code>url</code>\n     *\n     * @param url to post data to\n     * @return a request builder to construct and complete the request\n     */\n    public static HttpRequestBuilder postTo(String url) {\n        return new HttpRequestBuilder(\"POST\", url);\n    }\n\n    /**\n     * Add a timeout for this request\n     *\n     * @param timeout the timeout for this http request as a <code>Duration</code>\n     * @return a request builder to construct and complete the request\n     */\n    public HttpRequestBuilder withTimeout(Duration timeout) {\n        this.timeout = timeout;\n        return this;\n    }\n\n    /**\n     * Add an additional header to the request\n     *\n     * @param header name of the header, eg. Content-Type\n     * @param value value of the header, eg. \"application/json\"\n     * @return a request builder to construct and complete the request\n     */\n    public HttpRequestBuilder withHeader(String header, String value) {\n        Properties localHeaders = headers;\n\n        if (localHeaders == null) {\n            headers = new Properties();\n            localHeaders = headers;\n        }\n\n        localHeaders.put(header, value);\n        return this;\n    }\n\n    /**\n     * Add content to this request\n     *\n     * @param content a string containing the data to be pushed to the <code>url</code>\n     * @return a request builder to construct and complete the request\n     */\n    public HttpRequestBuilder withContent(String content) {\n        this.inputStream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n        return this;\n    }\n\n    /**\n     * Add content with a specific type to this request\n     *\n     * @param content a string containing the data to be pushed to the <code>url</code>\n     * @param contentType the content type of the given <code>content</code>\n     * @return a request builder to construct and complete the request\n     */\n    public HttpRequestBuilder withContent(String content, String contentType) {\n        withContent(content);\n        this.contentType = contentType;\n        return this;\n    }\n\n    /**\n     * Executes the build request\n     *\n     * @return the response body or <code>null</code> when the request went wrong\n     * @throws IOException when the request execution failed, timed out or it was interrupted\n     */\n    public String getContentAsString() throws IOException {\n        // this cast should be okay, a requested timeout should normally not exceed a long\n        int timeoutMillis = (int) timeout.toMillis();\n        return HttpUtil.executeUrl(method, url, headers, inputStream, contentType, timeoutMillis);\n    }\n}<fim_middle>// class below has no smell\n"}