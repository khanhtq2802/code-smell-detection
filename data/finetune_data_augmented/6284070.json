{"text": "<fim_prefix>/*\n *\n *  Copyright (c) 2017 Ot\u00e1vio Santana and others\n *   All rights reserved. This program and the accompanying materials\n *   are made available under the terms of the Eclipse Public License v1.0\n *   and Apache License v2.0 which accompanies this distribution.\n *   The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html\n *   and the Apache License v2.0 is available at http://www.opensource.org/licenses/apache2.0.php.\n *\n *   You may elect to redistribute this code under either of these licenses.\n *\n *   Contributors:\n *\n *   Otavio Santana\n *\n */\n\npackage org.jnosql.diana.api.document;\n\n\nimport org.jnosql.diana.api.Value;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Set;\n\nimport static java.util.Collections.singletonMap;\nimport static java.util.Collections.unmodifiableSet;\nimport static java.util.Comparator.comparing;\nimport static java.util.Objects.requireNonNull;\nimport static java.util.Optional.ofNullable;\nimport static java.util.stream.Collectors.collectingAndThen;\nimport static java.util.stream.Collectors.toList;\n\n/**\n * A default implementation of {@link DocumentEntity}\n */\nfinal class DefaultDocumentEntity implements DocumentEntity {\n\n    private final Map<String, Document> documents = new HashMap<>();\n\n    private final String name;\n\n\n    DefaultDocumentEntity(String name) {\n        this.name = requireNonNull(name, \"name name is required\");\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public boolean remove(String documentName) {\n        requireNonNull(documentName, \"documentName is required\");\n        return documents.remove(documentName) != null;\n    }\n\n    @Override\n    public List<Document> getDocuments() {\n        return documents.entrySet()\n                .stream()\n                .map(Map.Entry::getValue)\n                .collect(collectingAndThen(toList(), Collections::unmodifiableList));\n    }\n\n    @Override\n    public void add(Document document) {\n        requireNonNull(document, \"Document is required\");\n        documents.put(document.getName(), document);\n    }\n\n    @Override\n    public void add(String documentName, Object value) {\n        requireNonNull(documentName, \"documentName is required\");\n        requireNonNull(value, \"value is required\");\n        this.add(Document.of(documentName, value));\n    }\n\n    @Override\n    public void add(String documentName, Value value) {\n        requireNonNull(documentName, \"documentName is required\");\n        requireNonNull(value, \"value is required\");\n        remove(documentName);\n        this.add(Document.of(documentName, value));\n    }\n\n    @Override\n    public void addAll(Iterable<Document> documents) {\n        requireNonNull(documents, \"documents are required\");\n        documents.forEach(this::add);\n    }\n\n    @Override\n    public Optional<Document> find(String documentName) {\n        requireNonNull(documentName, \"documentName is required\");\n        Document document = documents.get(documentName);\n        return ofNullable(document);\n    }\n\n    @Override\n    public int size() {\n        return documents.size();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return documents.isEmpty();\n    }\n\n    @Override\n    public DocumentEntity copy() {\n        DefaultDocumentEntity entity = new DefaultDocumentEntity(this.name);\n        entity.documents.putAll(new HashMap<>(this.documents));\n        return entity;\n    }\n\n    @Override\n    public void clear() {\n        this.documents.clear();\n    }\n\n    @Override\n    public Set<String> getDocumentNames() {\n        return unmodifiableSet(documents.keySet());\n    }\n\n    @Override\n    public Collection<Value> getValues() {\n        return documents.values().stream()\n                .map(Document::getValue)\n                .collect(toList());\n    }\n\n<fim_suffix>    @Override\n    public boolean contains(String documentName) {\n        requireNonNull(documentName, \"documentName is required\");\n        return documents.containsKey(documentName);\n    }\n\n    @Override\n    public Map<String, Object> toMap() {\n        Map<String, Object> map = new HashMap<>();\n        for (Map.Entry<String, Document> entry : documents.entrySet()) {\n            Document value = entry.getValue();\n            map.put(value.getName(), convert(value.get()));\n        }\n        return Collections.unmodifiableMap(map);\n    }\n\n    private Object convert(Object value) {\n        if (value instanceof Document) {\n            Document column = Document.class.cast(value);\n            return singletonMap(column.getName(), convert(column.get()));\n        } else if (value instanceof Iterable) {\n            List<Object> list = new ArrayList<>();\n            Iterable.class.cast(value).forEach(e -> list.add(convert(e)));\n            return list;\n        }\n        return value;\n    }\n\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (!(o instanceof DocumentEntity)) {\n            return false;\n        }\n        DocumentEntity that = (DocumentEntity) o;\n        return Objects.equals(this.getDocuments().stream().sorted(comparing(Document::getName)).collect(toList()),\n                that.getDocuments().stream().sorted(comparing(Document::getName)).collect(toList())) &&\n                Objects.equals(name, that.getName());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(documents, name);\n    }\n\n    @Override\n    public String toString() {\n        return  \"DefaultDocumentEntity{\" + \"documents=\" + toMap() +\n                \", name='\" + name + '\\'' +\n                '}';\n    }\n}<fim_middle>// function below has no smell\n"}