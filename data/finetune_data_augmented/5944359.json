{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.openejb.config.sys;\nimport org.apache.openejb.config.SystemProperty;\nimport org.apache.openejb.loader.SystemInstance;\nimport org.apache.openejb.util.LogCategory;\nimport org.apache.openejb.util.Logger;\nimport org.apache.openejb.util.Saxs;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.DefaultHandler;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParser;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n/**\n * Plain Java code for parsing a tomee.xml or openejb.xml file\n * as JAXB loading is so slow.\n *\n * @version $Rev$ $Date$\n */\nclass SaxOpenejb extends StackHandler {\n    public static Logger logger = Logger.getInstance(LogCategory.OPENEJB, \"org.apache.openejb.config\");\n    public static final String HOME_VAR = \"$home\";\n    private final Openejb openejb = new Openejb();\n    public static Openejb parse(final InputSource source) throws SAXException, ParserConfigurationException, IOException {\n        final SAXParser parser = Saxs.factory().newSAXParser();\n        final SaxOpenejb sax = new SaxOpenejb();\n        parser.parse(source, sax);\n        return sax.openejb;\n    }\n    @Override\n    public void startDocument() throws SAXException {\n        push(new Document());\n    }\n    Openejb getOpenejb() {\n        return openejb;\n    }\n    public class Root extends DefaultHandler {\n        @Override\n        public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException {\n            switch (localName) {\n                case \"Container\":\n                    push(new ContainerElement());\n                    break;\n                case \"JndiProvider\":\n                    push(new JndiProviderElement());\n                    break;\n                case \"SecurityService\":\n                    push(new SecurityServiceElement());\n                    break;\n                case \"TransactionManager\":\n                    push(new TransactionManagerElement());\n                    break;\n                case \"ConnectionManager\":\n                    push(new ConnectionManagerElement());\n                    break;\n                case \"ProxyFactory\":\n                    push(new ProxyFactoryElement());\n                    break;\n                case \"Resource\":\n                    push(new ResourceElement(openejb.getResource()));\n                    break;\n                case \"Connector\":\n                    push(new ResourceElement(openejb.getResource()));\n                    break;\n                case \"Deployments\":\n                    push(new DeploymentsElement());\n                    break;\n                case \"Import\":\n                    push(new ImportElement());\n                    break;\n                case \"Service\":\n                    push(new DeclaredServiceElement(openejb.getServices()));\n                    break;\n                case \"System-Property\":\n                    push(new SystemPropertyElement(openejb.getSystemProperties()));\n                    break;\n                default:\n                    throw new IllegalStateException(\"Unsupported Element: \" + localName);\n            }\n            get().startElement(uri, localName, qName, attributes);\n        }\n    }\n    private class Document extends DefaultHandler {\n        @Override\n        public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException {\n            if (localName.equals(\"openejb\")) {\n                push(new Root());\n            } else if (localName.equals(\"tomee\")) {\n                push(new Root());\n            } else {\n                throw new SAXException(\"Unsupported Element: \" + localName);\n            }\n            checkAttributes(attributes);\n        }\n    }\n    private class DeploymentsElement extends DefaultHandler {\n        private final Deployments deployments = new Deployments();\n        @Override\n        public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException {\n            deployments.setDir(attributes.getValue(\"dir\"));\n            String jar = attributes.getValue(\"jar\");\n            String file = attributes.getValue(\"file\");\n            if (jar != null && jar.length() > 0 && file != null && file.length() > 0) {\n                logger.warning(\"configureApplication.ambiguousDeploymentJarFile\", file);\n            }\n            deployments.setFile(jar);\n            if (file != null && file.length() > 0) {\n                deployments.setFile(file);\n            }\n            deployments.setAutoDeploy(\"true\".equalsIgnoreCase(attributes.getValue(\"autoDeploy\")));\n            checkAttributes(attributes, \"dir\", \"jar\", \"file\", \"autoDeploy\");\n        }\n        @Override\n        public void endElement(final String uri, final String localName, final String qName) throws SAXException {\n            openejb.getDeployments().add(deployments);\n        }\n    }\n<fim_suffix>    public class ContainerElement extends ServiceElement<Container> {\n        public ContainerElement() {\n            super(new Container());\n        }\n        @Override\n        public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException {\n            super.startElement(uri, localName, qName, attributes);\n            final String ctype = attributes.getValue(\"ctype\");\n            if (ctype != null) {\n                service.setType(ctype);\n            }\n        }\n        @Override\n        public void endElement(final String uri, final String localName, final String qName) {\n            openejb.getContainer().add(service);\n            super.endElement(uri, localName, qName);\n        }\n        @Override\n        protected List<String> getAttributes() {\n            final List<String> attributes = new ArrayList<>(super.getAttributes());\n            attributes.add(\"ctype\");\n            return attributes;\n        }\n    }\n    public class SecurityServiceElement extends ServiceElement<SecurityService> {\n        public SecurityServiceElement() {\n            super(new SecurityService());\n        }\n        @Override\n        public void endElement(final String uri, final String localName, final String qName) {\n            openejb.setSecurityService(service);\n            super.endElement(uri, localName, qName);\n        }\n    }\n    public class ConnectionManagerElement extends ServiceElement<ConnectionManager> {\n        public ConnectionManagerElement() {\n            super(new ConnectionManager());\n        }\n        @Override\n        public void endElement(final String uri, final String localName, final String qName) {\n            openejb.setConnectionManager(service);\n            super.endElement(uri, localName, qName);\n        }\n    }\n    public class ProxyFactoryElement extends ServiceElement<ProxyFactory> {\n        public ProxyFactoryElement() {\n            super(new ProxyFactory());\n        }\n        @Override\n        public void endElement(final String uri, final String localName, final String qName) {\n            openejb.setProxyFactory(service);\n            super.endElement(uri, localName, qName);\n        }\n    }\n    public class TransactionManagerElement extends ServiceElement<TransactionManager> {\n        public TransactionManagerElement() {\n            super(new TransactionManager());\n        }\n        @Override\n        public void endElement(final String uri, final String localName, final String qName) {\n            openejb.setTransactionManager(service);\n            super.endElement(uri, localName, qName);\n        }\n    }\n    public class JndiProviderElement extends ServiceElement<JndiProvider> {\n        public JndiProviderElement() {\n            super(new JndiProvider());\n        }\n        @Override\n        public void endElement(final String uri, final String localName, final String qName) {\n            openejb.getJndiProvider().add(service);\n            super.endElement(uri, localName, qName);\n        }\n    }\n    private class ImportElement extends DefaultHandler {\n        private String path;\n        @Override\n        public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException {\n            path = attributes.getValue(\"path\");\n            checkAttributes(attributes, \"path\");\n        }\n        @Override\n        public void endElement(final String uri, final String localName, final String qName) throws SAXException {\n            if (path != null) {\n                updatePath();\n                InputStream is;\n                try {<fim_middle>// class below has no smell\n"}