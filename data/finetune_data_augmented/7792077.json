{"text": "<fim_prefix>\t * @param pageParameters\n\t * @param renderCount\n\t *            optional argument\n\t */\n\tpublic PageProvider(final Integer pageId, final Class<? extends IRequestablePage> pageClass,\n\t\tfinal PageParameters pageParameters, final Integer renderCount)\n\t{\n\t\tthis.pageId = pageId;\n\t\tsetPageClass(pageClass);\n\t\tsetPageParameters(pageParameters);\n\t\tthis.renderCount = renderCount;\n\t}\n\t/**\n\t * Creates a new page provider object. Upon calling of {@link #getPageInstance()} this provider\n\t * will return new instance of page with specified class.\n\t * \n\t * @param pageClass\n\t * @param pageParameters\n\t */\n\tpublic PageProvider(final Class<? extends IRequestablePage> pageClass,\n\t\tfinal PageParameters pageParameters)\n\t{\n\t\tsetPageClass(pageClass);\n\t\tif (pageParameters != null)\n\t\t{\n\t\t\tsetPageParameters(pageParameters);\n\t\t}\n\t\tpageId = null;\n\t\trenderCount = null;\n\t}\n\t/**\n\t * Creates a new page provider object. Upon calling of {@link #getPageInstance()} this provider\n\t * will return new instance of page with specified class.\n\t * \n\t * @param pageClass\n\t */\n\tpublic PageProvider(Class<? extends IRequestablePage> pageClass)\n\t{\n\t\tthis(pageClass, null);\n\t}\n\t/**\n\t * Creates a new page provider object. Upon calling of {@link #getPageInstance()} this provider\n\t * will return the given page instance.\n\t * \n\t * @param page\n\t */\n\tpublic PageProvider(IRequestablePage page)\n\t{\n\t\tArgs.notNull(page, \"page\");\n\t\tprovision = new Provision().resolveTo(page);\n\t\tpageId = page.getPageId();\n\t\trenderCount = page.getRenderCount();\n\t}\n\tprivate Provision getProvision()\n\t{\n\t\tif (provision == null)\n\t\t{\n\t\t\tprovision = new Provision().resolve();\n\t\t}\n\t\treturn provision;\n\t}\n\t@Override\n\tpublic IRequestablePage getPageInstance() throws PageExpiredException\n\t{\n\t\tIRequestablePage page = getProvision().getPage();\n\t\tif (page == null && wasExpired()) \n\t\t{\n\t\t\tthrow new PageExpiredException(\"Page with id '\" + pageId + \"' has expired.\");\n\t\t}\n\t\treturn page;\n\t}\n\t@Override\n\tpublic PageParameters getPageParameters() throws PageExpiredException\n\t{\n\t\tif (pageParameters != null)\n\t\t{\n\t\t\treturn pageParameters;\n\t\t}\n\t\telse if (hasPageInstance())\n\t\t{\n\t\t\treturn getPageInstance().getPageParameters();\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n\t/**\n\t * If this provider returns existing page, regardless if it was already created by PageProvider\n\t * itself or is or can be found in the data store. The only guarantee is that by calling\n\t * {@link PageProvider#getPageInstance()} this provider will return an existing instance and no\n\t * page will be created.\n\t * \n\t * @return if provides an existing page\n\t */\n\t@Override\n\tpublic final boolean hasPageInstance()\n\t{\n\t\tif (provision != null || pageId != null)\n\t\t{\n\t\t\treturn getProvision().didResolveToPage();\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t/**\n\t * Returns whether or not the page instance held by this provider has been instantiated by the\n\t * provider.\n\t * \n\t * @return {@code true} iff the page instance held by this provider was instantiated by the\n\t *         provider\n\t */\n\t@Override\n\tpublic final boolean doesProvideNewPage()\n\t{\n\t\treturn getProvision().doesProvideNewPage();\n\t}\n\t@Override\n\tpublic boolean wasExpired()\n\t{\n\t\treturn pageId != null && getProvision().didFailToFindStoredPage();\n\t}\n\t@Override\n\tpublic Class<? extends IRequestablePage> getPageClass() throws PageExpiredException\n\t{\n\t\tif (pageClass != null)\n\t\t{\n\t\t\treturn pageClass;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn getPageInstance().getClass();\n\t\t}\n\t}\n\tprotected IPageSource getPageSource()\n\t{\n\t\tif (pageSource != null)\n\t\t{\n\t\t\treturn pageSource;\n\t\t}\n\t\tif (Application.exists())\n\t\t{\n\t\t\treturn Application.get().getMapperContext();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\"No application is bound to current thread. Call setPageSource() to manually assign pageSource to this provider.\");\n\t\t}\n\t}\n\t/**\n\t * Detaches the page if it has been loaded (that means either\n\t * {@link #PageProvider(IRequestablePage)} constructor has been used or\n\t * {@link #getPageInstance()} has been called).\n\t */\n\t@Override\n\tpublic void detach()\n\t{\n\t\tif (provision != null)\n\t\t{\n\t\t\tprovision.detach();\n\t\t\tprovision = null;\n\t\t}\n\t}\n\t/**\n\t * If the {@link PageProvider} is used outside request thread (thread that does not have\n\t * application instance assigned) it is necessary to specify a {@link IPageSource} instance so\n\t * that {@link PageProvider} knows how to get a page instance.\n\t * \n\t * @param pageSource\n\t */\n\tpublic void setPageSource(IPageSource pageSource)\n\t{\n\t\tif (provision != null)\n\t\t{\n\t\t\tthrow new IllegalStateException(\"A page was already provided.\");\n\t\t}\n\t\tthis.pageSource = pageSource;\n\t}\n\t/**\n\t * \n\t * @param pageClass\n\t */\n\tprivate void setPageClass(Class<? extends IRequestablePage> pageClass)\n\t{\n\t\tArgs.notNull(pageClass, \"pageClass\");\n\t\tthis.pageClass = pageClass;\n\t}\n\t/**\n\t * \n\t * @param pageParameters\n\t */\n\tprotected void setPageParameters(PageParameters pageParameters)\n\t{\n\t\tthis.pageParameters = pageParameters;\n\t}\n\t/**\n\t * \n\t * @return page id\n\t */\n\t@Override\n\tpublic Integer getPageId()\n\t{\n\t\treturn pageId;\n\t}\n\t@Override\n\tpublic Integer getRenderCount()\n\t{\n\t\treturn renderCount;\n\t}\n\t@Override\n\tpublic String toString()\n\t{\n\t\treturn \"PageProvider{\" + \"renderCount=\" + renderCount + \", pageId=\" + pageId\n\t\t\t+ \", pageClass=\" + pageClass + \", pageParameters=\" + pageParameters + '}';\n\t}\n\t/**\n\t * A provision is the work necessary to provide a page. It includes to resolve parameters to a\n\t * page, to track the resolution metadata and to keep a reference of the resolved page.\n\t * \n\t * The logic based on {@link PageProvider}'s parameters:\n\t * \n\t * - having an stored page id, the stored page is provided\n\t * \n\t * - having only a page class, a new instance of it is provided\n\t * \n\t * - having non stored page id plus page class, a new instance of the page class is provided\n\t * \n\t * - having non stored page id and no page class, no page is provided\n\t * \n\t * - being a page instance, the instance itself will be the provided page\n\t *\n\t * @author pedro\n\t */\n\tprivate class Provision\n\t{\n\t\ttransient IRequestablePage page;\n\t\tboolean failedToFindStoredPage;\n\t\tIRequestablePage getPage()\n\t\t{\n\t\t\tif (page == null && doesProvideNewPage())\n\t\t\t{\n\t\t\t\tpage = getPageSource().newPageInstance(pageClass, pageParameters);\n\t\t\t}\n\t\t\treturn page;\n\t\t}\n\t\tboolean didResolveToPage()\n\t\t{\n\t\t\treturn page != null;\n\t\t}\n\t\tboolean doesProvideNewPage()\n\t\t{\n\t\t\treturn (pageId == null || failedToFindStoredPage) && pageClass != null;\n\t\t}\n\t\tboolean didFailToFindStoredPage()\n\t\t{\n\t\t\treturn failedToFindStoredPage;\n\t\t}\n\t\tProvision resolveTo(IRequestablePage page)\n\t\t{\n\t\t\tthis.page = page;\n\t\t\treturn this;\n\t\t}\n<fim_suffix>\t\tProvision resolve()\n\t\t{\n\t\t\tif (pageId != null)\n\t\t\t{\n\t\t\t\tIRequestablePage stored = getPageSource().getPageInstance(pageId);\n\t\t\t\tif (stored != null && (pageClass == null || pageClass.equals(stored.getClass())))\n\t\t\t\t{\n\t\t\t\t\tpage = stored;\n\t\t\t\t\tif (renderCount != null && page.getRenderCount() != renderCount)\n\t\t\t\t\t\tthrow new StalePageException(page);\n\t\t\t\t}\n\t\t\t\tfailedToFindStoredPage = page == null;\n\t\t\t}\n\t\t\treturn this;\n\t\t}<fim_middle>// function below has no smell\n"}