{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.artemis.jms.example.ldap;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport net.sf.ehcache.CacheManager;\nimport net.sf.ehcache.config.CacheConfiguration;\nimport net.sf.ehcache.config.Configuration;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.directory.api.ldap.model.constants.SchemaConstants;\nimport org.apache.directory.api.ldap.model.schema.LdapComparator;\nimport org.apache.directory.api.ldap.model.schema.SchemaManager;\nimport org.apache.directory.api.ldap.model.schema.comparators.NormalizingComparator;\nimport org.apache.directory.api.ldap.model.schema.registries.ComparatorRegistry;\nimport org.apache.directory.api.ldap.model.schema.registries.SchemaLoader;\nimport org.apache.directory.api.ldap.schema.loader.JarLdifSchemaLoader;\nimport org.apache.directory.api.ldap.schema.manager.impl.DefaultSchemaManager;\nimport org.apache.directory.api.util.exception.Exceptions;\nimport org.apache.directory.server.constants.ServerDNConstants;\nimport org.apache.directory.server.core.DefaultDirectoryService;\nimport org.apache.directory.server.core.api.CacheService;\nimport org.apache.directory.server.core.api.DirectoryService;\nimport org.apache.directory.server.core.api.InstanceLayout;\nimport org.apache.directory.server.core.api.partition.Partition;\nimport org.apache.directory.server.core.api.schema.SchemaPartition;\nimport org.apache.directory.server.core.factory.AvlPartitionFactory;\nimport org.apache.directory.server.core.factory.DirectoryServiceFactory;\nimport org.apache.directory.server.core.factory.PartitionFactory;\nimport org.apache.directory.server.i18n.I18n;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Factory for a fast (mostly in-memory-only) ApacheDS DirectoryService. Use only for tests!!\n */\npublic class InMemoryDirectoryServiceFactory implements DirectoryServiceFactory {\n\n   private static Logger LOG = LoggerFactory.getLogger(InMemoryDirectoryServiceFactory.class);\n\n   private final DirectoryService directoryService;\n   private final PartitionFactory partitionFactory;\n\n   /**\n    * Default constructor which creates {@link DefaultDirectoryService} instance and configures {@link AvlPartitionFactory} as\n    * the {@link PartitionFactory} implementation.\n    */\n<fim_suffix>   public InMemoryDirectoryServiceFactory() {\n      try {\n         directoryService = new DefaultDirectoryService();\n      } catch (Exception e) {\n         throw new RuntimeException(e);\n      }\n      directoryService.setShutdownHookEnabled(false);\n      partitionFactory = new AvlPartitionFactory();\n   }\n\n   /**\n    * Constructor which uses provided {@link DirectoryService} and {@link PartitionFactory} implementations.\n    *\n    * @param directoryService must be not-<code>null</code>\n    * @param partitionFactory must be not-<code>null</code>\n    */\n   public InMemoryDirectoryServiceFactory(DirectoryService directoryService, PartitionFactory partitionFactory) {\n      this.directoryService = directoryService;\n      this.partitionFactory = partitionFactory;\n   }\n\n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public void init(String name) throws Exception {\n      if ((directoryService == null) || directoryService.isStarted()) {\n         return;\n      }\n\n      directoryService.setInstanceId(name);\n\n      // instance layout\n      InstanceLayout instanceLayout = new InstanceLayout(System.getProperty(\"java.io.tmpdir\") + \"/server-work-\" + name);\n      if (instanceLayout.getInstanceDirectory().exists()) {\n         try {\n            FileUtils.deleteDirectory(instanceLayout.getInstanceDirectory());\n         } catch (IOException e) {\n            LOG.warn(\"couldn't delete the instance directory before initializing the DirectoryService\", e);\n         }\n      }\n      directoryService.setInstanceLayout(instanceLayout);\n\n      // EhCache in disabled-like-mode\n      Configuration ehCacheConfig = new Configuration();\n      CacheConfiguration defaultCache = new CacheConfiguration(\"default\", 1).eternal(false).timeToIdleSeconds(30).timeToLiveSeconds(30).overflowToDisk(false);\n      ehCacheConfig.addDefaultCache(defaultCache);\n      CacheService cacheService = new CacheService(new CacheManager(ehCacheConfig));\n      directoryService.setCacheService(cacheService);\n\n      // Init the schema\n      // SchemaLoader loader = new SingleLdifSchemaLoader();\n      SchemaLoader loader = new JarLdifSchemaLoader();\n      SchemaManager schemaManager = new DefaultSchemaManager(loader);\n      schemaManager.loadAllEnabled();\n      ComparatorRegistry comparatorRegistry = schemaManager.getComparatorRegistry();\n      for (LdapComparator<?> comparator : comparatorRegistry) {\n         if (comparator instanceof NormalizingComparator) {\n            ((NormalizingComparator) comparator).setOnServer();\n         }\n      }\n      directoryService.setSchemaManager(schemaManager);\n      InMemorySchemaPartition inMemorySchemaPartition = new InMemorySchemaPartition(schemaManager);\n\n      SchemaPartition schemaPartition = new SchemaPartition(schemaManager);\n      schemaPartition.setWrappedPartition(inMemorySchemaPartition);\n      directoryService.setSchemaPartition(schemaPartition);\n      List<Throwable> errors = schemaManager.getErrors();\n      if (errors.size() != 0) {\n         throw new Exception(I18n.err(I18n.ERR_317, Exceptions.printErrors(errors)));\n      }\n\n      // Init system partition\n      Partition systemPartition = partitionFactory.createPartition(directoryService.getSchemaManager(), directoryService.getDnFactory(), \"system\", ServerDNConstants.SYSTEM_DN, 500, new File(directoryService.getInstanceLayout().getPartitionsDirectory(), \"system\"));\n      systemPartition.setSchemaManager(directoryService.getSchemaManager());\n      partitionFactory.addIndex(systemPartition, SchemaConstants.OBJECT_CLASS_AT, 100);\n      directoryService.setSystemPartition(systemPartition);\n\n      directoryService.startup();\n   }\n\n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public DirectoryService getDirectoryService() throws Exception {\n      return directoryService;\n   }\n\n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public PartitionFactory getPartitionFactory() throws Exception {\n      return partitionFactory;\n   }\n\n}<fim_middle>// function below has no smell\n"}