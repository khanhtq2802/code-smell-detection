{"text": "<fim_prefix>            throw new InvalidParameterValueException(\"Unable to resolve \" + cmd.getHypervisor() + \" to a supported \");\n        }\n        if (zone.isSecurityGroupEnabled() && zone.getNetworkType().equals(NetworkType.Advanced)) {\n            if (hypervisorType != HypervisorType.KVM && hypervisorType != HypervisorType.XenServer\n                    && hypervisorType != HypervisorType.LXC && hypervisorType != HypervisorType.Simulator) {\n                throw new InvalidParameterValueException(\"Don't support hypervisor type \" + hypervisorType + \" in advanced security enabled zone\");\n            }\n        }\n        Cluster.ClusterType clusterType = null;\n        if (cmd.getClusterType() != null && !cmd.getClusterType().isEmpty()) {\n            clusterType = Cluster.ClusterType.valueOf(cmd.getClusterType());\n        }\n        if (clusterType == null) {\n            clusterType = Cluster.ClusterType.CloudManaged;\n        }\n        Grouping.AllocationState allocationState = null;\n        if (cmd.getAllocationState() != null && !cmd.getAllocationState().isEmpty()) {\n            try {\n                allocationState = Grouping.AllocationState.valueOf(cmd.getAllocationState());\n            } catch (final IllegalArgumentException ex) {\n                throw new InvalidParameterValueException(\"Unable to resolve Allocation State '\" + cmd.getAllocationState() + \"' to a supported state\");\n            }\n        }\n        if (allocationState == null) {\n            allocationState = Grouping.AllocationState.Enabled;\n        }\n        final Discoverer discoverer = getMatchingDiscover(hypervisorType);\n        if (discoverer == null) {\n            throw new InvalidParameterValueException(\"Could not find corresponding resource manager for \" + cmd.getHypervisor());\n        }\n        if (hypervisorType == HypervisorType.VMware) {\n            final Map<String, String> allParams = cmd.getFullUrlParams();\n            discoverer.putParam(allParams);\n        }\n        final List<ClusterVO> result = new ArrayList<ClusterVO>();\n        ClusterVO cluster = new ClusterVO(dcId, podId, clusterName);\n        cluster.setHypervisorType(hypervisorType.toString());\n        cluster.setClusterType(clusterType);\n        cluster.setAllocationState(allocationState);\n        try {\n            cluster = _clusterDao.persist(cluster);\n        } catch (final Exception e) {\n            // no longer tolerate exception during the cluster creation phase\n            final CloudRuntimeException ex = new CloudRuntimeException(\"Unable to create cluster \" + clusterName + \" in pod and data center with specified ids\", e);\n            // Get the pod VO object's table name.\n            ex.addProxyObject(pod.getUuid(), \"podId\");\n            ex.addProxyObject(zone.getUuid(), \"dcId\");\n            throw ex;\n        }\n        result.add(cluster);\n        if (clusterType == Cluster.ClusterType.CloudManaged) {\n            final Map<String, String> details = new HashMap<String, String>();\n            // should do this nicer perhaps ?\n            if (hypervisorType == HypervisorType.Ovm3) {\n                final Map<String, String> allParams = cmd.getFullUrlParams();\n                details.put(\"ovm3vip\", allParams.get(\"ovm3vip\"));\n                details.put(\"ovm3pool\", allParams.get(\"ovm3pool\"));\n                details.put(\"ovm3cluster\", allParams.get(\"ovm3cluster\"));\n            }\n            details.put(\"cpuOvercommitRatio\", CapacityManager.CpuOverprovisioningFactor.value().toString());\n            details.put(\"memoryOvercommitRatio\", CapacityManager.MemOverprovisioningFactor.value().toString());\n            _clusterDetailsDao.persist(cluster.getId(), details);\n            return result;\n        }\n        // save cluster details for later cluster/host cross-checking\n        final Map<String, String> details = new HashMap<String, String>();\n        details.put(\"url\", url);\n        details.put(\"username\", username);\n        details.put(\"password\", password);\n        details.put(\"cpuOvercommitRatio\", CapacityManager.CpuOverprovisioningFactor.value().toString());\n        details.put(\"memoryOvercommitRatio\", CapacityManager.MemOverprovisioningFactor.value().toString());\n        _clusterDetailsDao.persist(cluster.getId(), details);\n        boolean success = false;\n        try {\n            try {\n                uri = new URI(UriUtils.encodeURIComponent(url));\n                if (uri.getScheme() == null) {\n                    throw new InvalidParameterValueException(\"uri.scheme is null \" + url + \", add http:// as a prefix\");\n                } else if (uri.getScheme().equalsIgnoreCase(\"http\")) {\n                    if (uri.getHost() == null || uri.getHost().equalsIgnoreCase(\"\") || uri.getPath() == null || uri.getPath().equalsIgnoreCase(\"\")) {\n                        throw new InvalidParameterValueException(\"Your host and/or path is wrong.  Make sure it's of the format http://hostname/path\");\n                    }\n                }\n            } catch (final URISyntaxException e) {\n                throw new InvalidParameterValueException(url + \" is not a valid uri\");\n            }\n            final List<HostVO> hosts = new ArrayList<HostVO>();\n            Map<? extends ServerResource, Map<String, String>> resources = null;\n            resources = discoverer.find(dcId, podId, cluster.getId(), uri, username, password, null);\n            if (resources != null) {\n                for (final Map.Entry<? extends ServerResource, Map<String, String>> entry : resources.entrySet()) {\n                    final ServerResource resource = entry.getKey();\n                    final HostVO host = (HostVO)createHostAndAgent(resource, entry.getValue(), true, null, false);\n                    if (host != null) {\n                        hosts.add(host);\n                    }\n                    discoverer.postDiscovery(hosts, _nodeId);\n                }\n                s_logger.info(\"External cluster has been successfully discovered by \" + discoverer.getName());\n                success = true;\n                return result;\n            }\n            s_logger.warn(\"Unable to find the server resources at \" + url);\n            throw new DiscoveryException(\"Unable to add the external cluster\");\n        } finally {\n            if (!success) {\n                _clusterDetailsDao.deleteDetails(cluster.getId());\n                _clusterDao.remove(cluster.getId());\n            }\n        }\n    }\n    @Override\n    public Discoverer getMatchingDiscover(final Hypervisor.HypervisorType hypervisorType) {\n        for (final Discoverer discoverer : _discoverers) {\n            if (discoverer.getHypervisorType() == hypervisorType) {\n                return discoverer;\n            }\n        }\n        return null;\n    }\n<fim_suffix>    @Override\n    public List<? extends Host> discoverHosts(final AddHostCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {\n        Long dcId = cmd.getZoneId();\n        final Long podId = cmd.getPodId();\n        final Long clusterId = cmd.getClusterId();\n        String clusterName = cmd.getClusterName();\n        final String url = cmd.getUrl();\n        final String username = cmd.getUsername();\n        final String password = cmd.getPassword();\n        final List<String> hostTags = cmd.getHostTags();\n        dcId = _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), dcId);\n        // this is for standalone option\n        if (clusterName == null && clusterId == null) {\n            clusterName = \"Standalone-\" + url;\n        }\n        if (clusterId != null) {\n            final ClusterVO cluster = _clusterDao.findById(clusterId);\n            if (cluster == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"can not find cluster for specified clusterId\");\n                ex.addProxyObject(clusterId.toString(), \"clusterId\");\n                throw ex;\n            } else {\n                if (cluster.getGuid() == null) {\n                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);\n                    if (!hosts.isEmpty()) {\n                        final CloudRuntimeException ex =\n                                new CloudRuntimeException(\"Guid is not updated for cluster with specified cluster id; need to wait for hosts in this cluster to come up\");\n                        ex.addProxyObject(cluster.getUuid(), \"clusterId\");\n                        throw ex;\n                    }\n                }\n            }\n        }\n        return discoverHostsFull(dcId, podId, clusterId, clusterName, url, username, password, cmd.getHypervisor(), hostTags, cmd.getFullUrlParams(), false);\n    }<fim_middle>// function below is feature envy and long method\n"}