{"text": "<fim_prefix>                    }\n                }\n            }\n        } catch (OozieClientException e) {\n            throw new FalconException(e);\n        }\n        return filteredJobs;\n    }\n    //Return all bundles for the entity for each cluster\n    private Map<String, List<BundleJob>> findBundles(Entity entity) throws FalconException {\n        Set<String> clusters = EntityUtil.getClustersDefinedInColos(entity);\n        Map<String, List<BundleJob>> jobMap = new HashMap<String, List<BundleJob>>();\n        for (String cluster : clusters) {\n            jobMap.put(cluster, findBundles(entity, cluster));\n        }\n        return jobMap;\n    }\n    //Return latest bundle(last created) for the entity for each cluster\n    private Map<String, BundleJob> findLatestBundle(Entity entity) throws FalconException {\n        Set<String> clusters = EntityUtil.getClustersDefinedInColos(entity);\n        Map<String, BundleJob> jobMap = new HashMap<String, BundleJob>();\n        for (String cluster : clusters) {\n            BundleJob bundleJob = findLatestBundle(entity, cluster);\n            jobMap.put(cluster, bundleJob);\n        }\n        return jobMap;\n    }\n    //Return latest bundle(last created) for the entity in the requested cluster\n    private BundleJob findLatestBundle(Entity entity, String cluster) throws FalconException {\n        List<BundleJob> bundles = findBundles(entity, cluster);\n        if (bundles == null || bundles.isEmpty()) {\n            return MISSING;\n        }\n        return Collections.max(bundles, new Comparator<BundleJob>() {\n            @Override\n            public int compare(BundleJob o1, BundleJob o2) {\n                return o1.getCreatedTime().compareTo(o2.getCreatedTime());\n            }\n        });\n    }\n    @Override\n    public String suspend(Entity entity) throws FalconException {\n        return doBundleAction(entity, BundleAction.SUSPEND);\n    }\n    @Override\n    public String resume(Entity entity) throws FalconException {\n        return doBundleAction(entity, BundleAction.RESUME);\n    }\n    @Override\n    public String delete(Entity entity) throws FalconException {\n        return doBundleAction(entity, BundleAction.KILL);\n    }\n    @Override\n    public String delete(Entity entity, String cluster) throws FalconException {\n        return doBundleAction(entity, BundleAction.KILL, cluster);\n    }\n    private enum BundleAction {\n        SUSPEND, RESUME, KILL\n    }\n    private String doBundleAction(Entity entity, BundleAction action) throws FalconException {\n        if (StartupProperties.isServerInSafeMode() && !action.equals(BundleAction.SUSPEND)) {\n            throwSafemodeException(action.name());\n        }\n        Set<String> clusters = EntityUtil.getClustersDefinedInColos(entity);\n        String result = null;\n        for (String cluster : clusters) {\n            result = doBundleAction(entity, action, cluster);\n        }\n        return result;\n    }\n    private String doBundleAction(Entity entity, BundleAction action, String cluster) throws FalconException {\n        List<BundleJob> jobs = findBundles(entity, cluster);\n        beforeAction(entity, action, cluster);\n        for (BundleJob job : jobs) {\n            switch (action) {\n            case SUSPEND:\n                // not already suspended and preconditions are true\n                if (!BUNDLE_SUSPENDED_STATUS.contains(job.getStatus()) && BUNDLE_SUSPEND_PRECOND.contains(\n                    job.getStatus())) {\n                    suspend(cluster, job.getId());\n                }\n                break;\n            case RESUME:\n                // not already running and preconditions are true\n                if (!BUNDLE_RUNNING_STATUS.contains(job.getStatus()) && BUNDLE_RESUME_PRECOND.contains(\n                    job.getStatus())) {\n                    resume(cluster, job.getId());\n                }\n                break;\n            case KILL:\n                // not already killed and preconditions are true\n                killBundle(cluster, job);\n                break;\n            default:\n            }\n        }\n        afterAction(entity, action, cluster);\n        return \"SUCCESS\";\n    }\n    private void killBundle(String clusterName, BundleJob job) throws FalconException {\n        OozieClient client = OozieClientFactory.get(clusterName);\n        try {\n            //kill all coords\n            for (CoordinatorJob coord : job.getCoordinators()) {\n                client.kill(coord.getId());\n                LOG.debug(\"Killed coord {} on cluster {}\", coord.getId(), clusterName);\n            }\n            //kill bundle\n            client.kill(job.getId());\n            LOG.debug(\"Killed bundle {} on cluster {}\", job.getId(), clusterName);\n        } catch (OozieClientException e) {\n            throw new FalconException(e);\n        }\n    }\n    private void beforeAction(Entity entity, BundleAction action, String cluster) throws FalconException {\n        for (WorkflowEngineActionListener listener : listeners) {\n            switch (action) {\n            case SUSPEND:\n                listener.beforeSuspend(entity, cluster);\n                break;\n            case RESUME:\n                listener.beforeResume(entity, cluster);\n                break;\n            case KILL:\n                listener.beforeDelete(entity, cluster);\n                break;\n            default:\n            }\n        }\n    }\n    private void afterAction(Entity entity, BundleAction action, String cluster) throws FalconException {\n        for (WorkflowEngineActionListener listener : listeners) {\n            switch (action) {\n            case SUSPEND:\n                listener.afterSuspend(entity, cluster);\n                break;\n            case RESUME:\n                listener.afterResume(entity, cluster);\n                break;\n            case KILL:\n                listener.afterDelete(entity, cluster);\n                break;\n            default:\n            }\n        }\n    }\n    @Override\n    public InstancesResult getRunningInstances(Entity entity, List<LifeCycle> lifeCycles) throws FalconException {\n        try {\n            Set<String> clusters = EntityUtil.getClustersDefinedInColos(entity);\n            List<Instance> runInstances = new ArrayList<Instance>();\n            for (String cluster : clusters) {\n                OozieClient client = OozieClientFactory.get(cluster);\n                List<String> wfNames = EntityUtil.getWorkflowNames(entity);\n                List<WorkflowJob> wfs = getRunningWorkflows(cluster, wfNames);\n                if (wfs != null) {\n                    for (WorkflowJob job : wfs) {\n                        WorkflowJob wf = client.getJobInfo(job.getId());\n                        if (StringUtils.isEmpty(wf.getParentId())) {\n                            continue;\n                        }\n                        CoordinatorAction action = client.getCoordActionInfo(wf.getParentId());\n                        String nominalTimeStr = SchemaHelper.formatDateUTC(action.getNominalTime());\n                        Instance instance = new Instance(cluster, nominalTimeStr, WorkflowStatus.RUNNING);\n                        instance.startTime = wf.getStartTime();\n                        if (entity.getEntityType() == EntityType.FEED) {\n                            instance.sourceCluster = getSourceCluster(cluster, action, entity);\n                        }\n                        runInstances.add(instance);\n                    }\n                }\n            }\n            InstancesResult result = new InstancesResult(APIResult.Status.SUCCEEDED, \"Running Instances\");\n            result.setInstances(runInstances.toArray(new Instance[runInstances.size()]));\n            return result;\n        } catch (OozieClientException e) {\n            throw new FalconException(e);\n        }\n    }\n    @Override\n    public InstancesResult killInstances(Entity entity, Date start, Date end,\n                                         Properties props, List<LifeCycle> lifeCycles) throws FalconException {\n        return doJobAction(JobAction.KILL, entity, start, end, props, lifeCycles);\n    }\n    @Override\n    public InstancesResult ignoreInstances(Entity entity, Date start, Date end, Properties props,\n                                           List<LifeCycle> lifeCycles) throws FalconException {\n        return doJobAction(JobAction.IGNORE, entity, start, end, props, lifeCycles);\n    }\n    @Override\n    public InstancesResult reRunInstances(Entity entity, Date start, Date end,\n                                          Properties props, List<LifeCycle> lifeCycles,\n                                          Boolean isForced) throws FalconException {\n        if (isForced == null) {\n            isForced = false;\n        }\n        return doJobAction(JobAction.RERUN, entity, start, end, props, lifeCycles, false, isForced);\n    }\n    @Override\n    public InstancesResult suspendInstances(Entity entity, Date start, Date end,\n                                            Properties props, List<LifeCycle> lifeCycles) throws FalconException {\n        return doJobAction(JobAction.SUSPEND, entity, start, end, props, lifeCycles);\n    }\n<fim_suffix>    @Override\n    public InstancesResult resumeInstances(Entity entity, Date start, Date end,\n                                           Properties props, List<LifeCycle> lifeCycles) throws FalconException {\n        return doJobAction(JobAction.RESUME, entity, start, end, props, lifeCycles);\n    }<fim_middle>// function below has no smell\n"}