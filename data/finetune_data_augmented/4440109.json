{"text": "<fim_prefix>    final String scanIdentifier = scan.getIdentifier();\n    this.mockMvc.perform(delete(\"/customers/\" + customerIdentifier + \"/identifications/\"\n            + identificationCardNumber + \"/scans/\" + scanIdentifier)\n            .accept(MediaType.ALL_VALUE)\n            .contentType(MediaType.APPLICATION_JSON_VALUE))\n            .andExpect(status().isAccepted())\n            .andDo(document(\"document-delete-id-card-with-scan\", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint())));\n  }\n  @Test\n  public void documentFetchScans ( ) throws Exception {\n    final Customer customerOne = CustomerGenerator.createRandomCustomer();\n    customerOne.setIdentifier(\"ato'oh\");\n    final String customerIdentifier = customerOne.getIdentifier();\n    this.customerManager.createCustomer(customerOne);\n    this.eventRecorder.wait(CustomerEventConstants.POST_CUSTOMER, customerIdentifier);\n    final IdentificationCard identificationCard = IdentificationCardGenerator.createRandomIdentificationCard();\n    identificationCard.setNumber(\"CT13B0987\");\n    this.customerManager.createIdentificationCard(customerIdentifier, identificationCard);\n    this.eventRecorder.wait(CustomerEventConstants.POST_IDENTIFICATION_CARD, identificationCard.getNumber());\n    final String identificationCardNumber = identificationCard.getNumber();\n    IdentificationCardScan iDCardOne = this.createScan(customerIdentifier, identificationCardNumber, \"ScanOne\", \"First Scan\");\n    IdentificationCardScan iDCardTwo = this.createScan(customerIdentifier, identificationCardNumber, \"ScanTwo\", \"Second Scan\");\n    IdentificationCardScan iDCardThree = this.createScan(customerIdentifier, identificationCardNumber, \"ScanThree\", \"Three Scan\");\n    final List <IdentificationCardScan> cardScans = this.customerManager.fetchIdentificationCardScans(customerIdentifier, identificationCardNumber);\n    Gson gson = new Gson();\n    this.mockMvc.perform(get(\"/customers/\" + customerIdentifier + \"/identifications/\" + identificationCardNumber + \"/scans\")\n            .contentType(MediaType.APPLICATION_JSON_VALUE)\n            .content(gson.toJson(cardScans))\n            .accept(MediaType.ALL_VALUE))\n            .andExpect(status().isOk())\n            .andDo(document(\"document-fetch-scans\", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint()),\n                    responseFields(\n                            fieldWithPath(\"[].identifier\").description(\"First scan's identifier\"),\n                            fieldWithPath(\"[].description\").description(\"First scan's description\"),\n                            fieldWithPath(\"[1].identifier\").description(\"Second scan's identifier\"),\n                            fieldWithPath(\"[1].description\").description(\"Second scan's description\"),\n                            fieldWithPath(\"[2].identifier\").description(\"Third scan's identifier\"),\n                            fieldWithPath(\"[2].description\").description(\"Third scan's description\"))));\n  }\n  @Test\n  public void documentFindScan ( ) throws Exception {\n    final Customer customer = CustomerGenerator.createRandomCustomer();\n    customer.setIdentifier(\"checko\");\n    this.customerManager.createCustomer(customer);\n    this.eventRecorder.wait(CustomerEventConstants.POST_CUSTOMER, customer.getIdentifier());\n    final String customerIdentifier = customer.getIdentifier();\n    final IdentificationCard identificationCard = IdentificationCardGenerator.createRandomIdentificationCard();\n    identificationCard.setNumber(\"SM23A4321\");\n    this.customerManager.createIdentificationCard(customerIdentifier, identificationCard);\n    this.eventRecorder.wait(CustomerEventConstants.POST_IDENTIFICATION_CARD, identificationCard.getNumber());\n    final String identificationCardNumber = identificationCard.getNumber();\n    final IdentificationCardScan scan = this.createScan(customerIdentifier, identificationCardNumber, \"soughtOut\", \"Found Scan\");\n    Gson gson = new Gson();\n    this.mockMvc.perform(get(\"/customers/\" + customerIdentifier\n            + \"/identifications/\" + identificationCardNumber + \"/scans/\" + scan.getIdentifier())\n            .contentType(MediaType.APPLICATION_JSON_VALUE)\n            .content(gson.toJson(scan))\n            .accept(MediaType.ALL_VALUE))\n            .andExpect(status().isOk())\n            .andDo(document(\"document-find-scan\", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint()),\n                    responseFields(\n                            fieldWithPath(\"identifier\").description(\"scan's identifier\"),\n                            fieldWithPath(\"description\").description(\"scan's description\"))));\n  }\n  @Test\n  public void documentFindScanWithImage ( ) throws Exception {\n    final Customer customer = CustomerGenerator.createRandomCustomer();\n    customer.setIdentifier(\"akong\");\n    this.customerManager.createCustomer(customer);\n    this.eventRecorder.wait(CustomerEventConstants.POST_CUSTOMER, customer.getIdentifier());\n    final String customerIdentifier = customer.getIdentifier();\n    final IdentificationCard identificationCard = IdentificationCardGenerator.createRandomIdentificationCard();\n    identificationCard.setNumber(\"SC18C0999\");\n    this.customerManager.createIdentificationCard(customerIdentifier, identificationCard);\n    this.eventRecorder.wait(CustomerEventConstants.POST_IDENTIFICATION_CARD, identificationCard.getNumber());\n    final String identificationCardNumber = identificationCard.getNumber();\n    final IdentificationCardScan scan = ScanGenerator.createRandomScan(null);\n    scan.setIdentifier(\"scanIdentity\");\n    scan.setDescription(\"scanDescription\");\n    final byte[] imageInBytes = \"iCareAboutImage\".getBytes();\n    final MockMultipartFile image = new MockMultipartFile(\"image\", \"test.png\", MediaType.IMAGE_PNG_VALUE, imageInBytes);\n    this.customerManager.postIdentificationCardScan(customerIdentifier, identificationCardNumber, scan.getIdentifier(), scan.getDescription(), image);\n    this.eventRecorder.wait(CustomerEventConstants.POST_IDENTIFICATION_CARD_SCAN, new ScanEvent(identificationCardNumber, scan.getIdentifier()));\n    this.mockMvc.perform(get(\"/customers/\" + customerIdentifier + \"/identifications/\"\n            + identificationCardNumber + \"/scans/\" + scan.getIdentifier() + \"/image\")\n            .contentType(MediaType.APPLICATION_JSON_VALUE)\n            .content(imageInBytes)\n            .accept(MediaType.ALL_VALUE))\n            .andExpect(status().isOk())\n            .andDo(document(\"document-find-scan-with-image\", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint())));\n  }\n  @Test\n  public void documentDeleteIdCardScan ( ) throws Exception {\n    final Customer customer = CustomerGenerator.createRandomCustomer();\n    customer.setIdentifier(\"wabah\");\n    this.customerManager.createCustomer(customer);\n    this.eventRecorder.wait(CustomerEventConstants.POST_CUSTOMER, customer.getIdentifier());\n    final String customerIdentifier = customer.getIdentifier();\n    final IdentificationCard identificationCard = IdentificationCardGenerator.createRandomIdentificationCard();\n    identificationCard.setNumber(\"SC012A001\");\n    this.customerManager.createIdentificationCard(customerIdentifier, identificationCard);\n    this.eventRecorder.wait(CustomerEventConstants.POST_IDENTIFICATION_CARD, identificationCard.getNumber());\n    final String identificationCardNumber = identificationCard.getNumber();\n    final IdentificationCardScan createdScan = ScanGenerator.createRandomScan(null);\n    this.postIdentificationCardScan(customerIdentifier, identificationCardNumber, createdScan);\n    createdScan.setIdentifier(\"justScan\");\n    createdScan.setDescription(\"Just Scan\");\n    Assert.assertNotNull(createdScan);\n    this.mockMvc.perform(delete(\"/customers/\" + customerIdentifier + \"/identifications/\"\n            + identificationCardNumber + \"/scans/\" + createdScan.getIdentifier())\n            .accept(MediaType.ALL_VALUE)\n            .contentType(MediaType.APPLICATION_JSON_VALUE))\n            .andExpect(status().isAccepted())\n            .andDo(document(\"document-delete-id-card-scan\", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint())));\n  }\n  private String createCustomer ( ) throws Exception {\n    final Customer customer = CustomerGenerator.createRandomCustomer();\n    this.customerManager.createCustomer(customer);\n    this.eventRecorder.wait(CustomerEventConstants.POST_CUSTOMER, customer.getIdentifier());\n    return customer.getIdentifier();\n  }\n  private String createIdentificationCard (final String customerIdentifier) throws Exception {\n    final IdentificationCard identificationCard = IdentificationCardGenerator.createRandomIdentificationCard();\n    this.customerManager.createIdentificationCard(customerIdentifier, identificationCard);\n    this.eventRecorder.wait(CustomerEventConstants.POST_IDENTIFICATION_CARD, identificationCard.getNumber());\n    return identificationCard.getNumber();\n  }\n  private IdentificationCardScan createScan (final String customerIdentifier, final String cardNumber, String scanIdentifier, String scanDescription) throws Exception {\n    final IdentificationCardScan scan = ScanGenerator.createRandomScan(null);\n    scan.setIdentifier(scanIdentifier);\n    scan.setDescription(scanDescription);\n    this.postIdentificationCardScan(customerIdentifier, cardNumber, scan);\n    return scan;\n  }\n<fim_suffix>  private IdentificationCardScan createScan (final String customerIdentifier, final String cardNumber) throws Exception {\n    final IdentificationCardScan scan = ScanGenerator.createRandomScan(null);\n    this.postIdentificationCardScan(customerIdentifier, cardNumber, scan);\n    return scan;\n  }<fim_middle>// function below has no smell\n"}