{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ratis.logservice.server;\n\nimport com.beust.jcommander.JCommander;\nimport org.apache.ratis.conf.RaftProperties;\nimport org.apache.ratis.grpc.GrpcConfigKeys;\nimport org.apache.ratis.logservice.util.LogServiceUtils;\nimport org.apache.ratis.netty.NettyConfigKeys;\nimport org.apache.ratis.protocol.*;\nimport org.apache.ratis.server.RaftServer;\nimport org.apache.ratis.server.RaftServerConfigKeys;\nimport org.apache.ratis.statemachine.StateMachine;\nimport org.apache.ratis.util.FileUtils;\nimport org.apache.ratis.util.LifeCycle;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.Set;\n\nimport static org.apache.ratis.logservice.common.Constants.META_GROUP_ID;\nimport static org.apache.ratis.logservice.util.LogServiceUtils.getPeersFromQuorum;\n\n/**\n * Master quorum is responsible for tracking all available quorum members\n */\npublic class MetadataServer extends BaseServer {\n    private static final Logger LOG = LoggerFactory.getLogger(MetadataServer.class);\n\n    // RaftServer internal server. Has meta raft group and MetaStateMachine\n    private  RaftServer server;\n\n    private String id;\n\n    private StateMachine metaStateMachine;\n\n    private LifeCycle lifeCycle;\n\n    public MetadataServer(ServerOpts opts) {\n      super(opts);\n      LOG.debug(\"Metadata Server options: {}\", opts);\n      this.id = opts.getHost() + \"_\" + opts.getPort();\n      this.lifeCycle = new LifeCycle(this.id);\n    }\n\n    public void start() throws IOException  {\n        final ServerOpts opts = getServerOpts();\n        if (opts.getHost() == null) {\n            opts.setHost(LogServiceUtils.getHostName());\n        }\n        this.lifeCycle = new LifeCycle(this.id);\n        RaftProperties properties = new RaftProperties();\n        if(opts.getWorkingDir() != null) {\n            RaftServerConfigKeys.setStorageDirs(properties, Collections.singletonList(new File(opts.getWorkingDir())));\n        }\n        GrpcConfigKeys.Server.setPort(properties, opts.getPort());\n        NettyConfigKeys.Server.setPort(properties, opts.getPort());\n        Set<RaftPeer> peers = getPeersFromQuorum(opts.getMetaQuorum());\n        RaftGroupId raftMetaGroupId = RaftGroupId.valueOf(opts.getMetaGroupId());\n        RaftGroup metaGroup = RaftGroup.valueOf(raftMetaGroupId, peers);\n        metaStateMachine = new MetaStateMachine(raftMetaGroupId, RaftGroupId.valueOf(opts.getLogServerGroupId()));\n        server = RaftServer.newBuilder()\n                .setGroup(metaGroup)\n                .setServerId(RaftPeerId.valueOf(id))\n                .setStateMachineRegistry(raftGroupId -> {\n                    if(raftGroupId.equals(META_GROUP_ID)) {\n                        return metaStateMachine;\n                    }\n                    return null;\n                })\n                .setProperties(properties).build();\n        lifeCycle.startAndTransition(() -> {\n            server.start();\n        }, IOException.class);\n    }\n\n    public static void main(String[] args) throws IOException {\n        ServerOpts opts = new ServerOpts();\n        JCommander.newBuilder()\n                .addObject(opts)\n                .build()\n                .parse(args);\n\n        try (MetadataServer master = new MetadataServer(opts)) {\n          master.start();\n          while (true) {\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              return;\n            }\n          }\n        }\n    }\n\n    public static MetadataServer.Builder newBuilder() {\n        return new MetadataServer.Builder();\n    }\n\n    @Override\n    public void close() throws IOException {\n        server.close();\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getAddress() {\n        return getServerOpts().getHost() + \":\" + getServerOpts().getPort();\n    }\n\n    public void cleanUp() throws IOException {\n        FileUtils.deleteFully(new File(getServerOpts().getWorkingDir()));\n    }\n\n<fim_suffix>    public static class Builder extends BaseServer.Builder<MetadataServer> {\n        /**\n         * @return a {@link MetadataServer} object.\n         */\n        public MetadataServer build()  {\n            validate();\n            return new MetadataServer(getOpts());\n        }\n    }\n}<fim_middle>// class below has no smell\n"}