{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.cxf.tools.corba.processors.idl;\n\nimport javax.wsdl.Definition;\n\nimport antlr.collections.AST;\n\nimport org.apache.ws.commons.schema.XmlSchema;\n\npublic class TypeDclVisitor extends VisitorBase {\n\n    public TypeDclVisitor(Scope scope,\n                          Definition defn,\n                          XmlSchema schemaRef,\n                          WSDLASTVisitor wsdlVisitor) {\n        super(scope, defn, schemaRef, wsdlVisitor);\n    }\n\n<fim_suffix>    public static boolean accept(AST node) {\n        return TypedefVisitor.accept(node)\n            || StructVisitor.accept(node)\n            || UnionVisitor.accept(node)\n            || EnumVisitor.accept(node);\n    }\n\n    public void visit(AST node) {\n        // <type_dcl> ::= \"typedef\" <type_declarator>\n        //              | <struct_type>\n        //              | <union_type>\n        //              | <enum_type>\n        //              | \"native\" <simple_declarator>\n        //              | <constr_forward_decl>\n\n        Visitor visitor = null;\n\n        if (TypedefVisitor.accept(node)) {\n            // \"typedef\" <type_declarator>\n            visitor = new TypedefVisitor(getScope(), definition, schema, wsdlVisitor);\n        } else if (StructVisitor.accept(node)) {\n            // <struct_type>\n            visitor = new StructVisitor(getScope(), definition, schema, wsdlVisitor);\n        } else if (UnionVisitor.accept(node)) {\n            // <union_type>\n            visitor = new UnionVisitor(getScope(), definition, schema, wsdlVisitor);\n        } else if (EnumVisitor.accept(node)) {\n            // <enum_type>\n            visitor = new EnumVisitor(getScope(), definition, schema, wsdlVisitor);\n        } else if (node.getType() == IDLTokenTypes.LITERAL_native) {\n            // \"native\" <simple_declarator>\n            //\n            // native type not supported\n            throw new RuntimeException(\"[TypeDclVisitor: native type not supported!]\");\n        }  else if (node.getType() == IDLTokenTypes.LITERAL_typeprefix) {\n            // typeprefix <scoped_name> <string_literal>\n            // typeprefix not supported\n            // keyword since CORBA 3.0\n            throw new RuntimeException(\"[TypeDclVisitor: typeprefix not supported!]\");\n        }\n\n        // TODO forward declaration <constr_forward_declaration>\n\n        if (visitor != null) {\n            visitor.visit(node);\n        }\n    }\n\n}<fim_middle>// function below has no smell\n"}