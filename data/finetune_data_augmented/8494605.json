{"text": "<fim_prefix>// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\npackage org.apache.cloudstack.api.command.user.firewall;\n\nimport org.apache.log4j.Logger;\n\nimport org.apache.cloudstack.acl.SecurityChecker.AccessType;\nimport org.apache.cloudstack.api.ACL;\nimport org.apache.cloudstack.api.APICommand;\nimport org.apache.cloudstack.api.ApiCommandJobType;\nimport org.apache.cloudstack.api.ApiConstants;\nimport org.apache.cloudstack.api.ApiErrorCode;\nimport org.apache.cloudstack.api.BaseAsyncCmd;\nimport org.apache.cloudstack.api.Parameter;\nimport org.apache.cloudstack.api.ServerApiException;\nimport org.apache.cloudstack.api.response.AccountResponse;\nimport org.apache.cloudstack.api.response.FirewallRuleResponse;\nimport org.apache.cloudstack.api.response.SuccessResponse;\nimport org.apache.cloudstack.context.CallContext;\n\nimport com.cloud.event.EventTypes;\nimport com.cloud.exception.InvalidParameterValueException;\nimport com.cloud.exception.ResourceUnavailableException;\nimport com.cloud.network.rules.FirewallRule;\n\n<fim_suffix>@APICommand(name = \"deleteFirewallRule\", description = \"Deletes a firewall rule\", responseObject = SuccessResponse.class, entityType = {FirewallRule.class},\n        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\npublic class DeleteFirewallRuleCmd extends BaseAsyncCmd {\n    public static final Logger s_logger = Logger.getLogger(DeleteFirewallRuleCmd.class.getName());\n    private static final String s_name = \"deletefirewallruleresponse\";\n\n    /////////////////////////////////////////////////////\n    //////////////// API parameters /////////////////////\n    /////////////////////////////////////////////////////\n    @ACL(accessType = AccessType.OperateEntry)\n    @Parameter(name = ApiConstants.ID, type = CommandType.UUID, entityType = FirewallRuleResponse.class, required = true, description = \"the ID of the firewall rule\")\n    private Long id;\n\n    // unexposed parameter needed for events logging\n    @Parameter(name = ApiConstants.ACCOUNT_ID, type = CommandType.UUID, entityType = AccountResponse.class, expose = false)\n    private Long ownerId;\n\n    /////////////////////////////////////////////////////\n    /////////////////// Accessors ///////////////////////\n    /////////////////////////////////////////////////////\n\n    public Long getId() {\n        return id;\n    }\n\n    /////////////////////////////////////////////////////\n    /////////////// API Implementation///////////////////\n    /////////////////////////////////////////////////////\n    @Override\n    public String getCommandName() {\n        return s_name;\n    }\n\n    @Override\n    public String getEventType() {\n        return EventTypes.EVENT_FIREWALL_CLOSE;\n    }\n\n    @Override\n    public String getEventDescription() {\n        return (\"Deleting firewall rule ID=\" + id);\n    }\n\n    @Override\n    public long getEntityOwnerId() {\n        if (ownerId == null) {\n            FirewallRule rule = _entityMgr.findById(FirewallRule.class, id);\n            if (rule == null) {\n                throw new InvalidParameterValueException(\"Unable to find firewall rule by ID=\" + id);\n            } else {\n                ownerId = _entityMgr.findById(FirewallRule.class, id).getAccountId();\n            }\n        }\n        return ownerId;\n    }\n\n    @Override\n    public void execute() throws ResourceUnavailableException {\n        CallContext.current().setEventDetails(\"Rule Id: \" + id);\n        boolean result = _firewallService.revokeIngressFwRule(id, true);\n\n        if (result) {\n            SuccessResponse response = new SuccessResponse(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to delete firewall rule\");\n        }\n    }\n\n    @Override\n    public String getSyncObjType() {\n        return BaseAsyncCmd.networkSyncObject;\n    }\n\n    @Override\n    public Long getSyncObjId() {\n        FirewallRule fwlrule = _firewallService.getFirewallRule(id);\n        if (fwlrule != null)\n            return fwlrule.getNetworkId();\n        return null;\n    }\n\n    @Override\n    public ApiCommandJobType getInstanceType() {\n        return ApiCommandJobType.FirewallRule;\n    }\n}<fim_middle>// class below has no smell\n"}