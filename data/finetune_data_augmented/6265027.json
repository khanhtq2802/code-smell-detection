{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2014 UT-Battelle, LLC.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   Initial API and implementation and/or initial documentation - Jay Jay Billings,\n *   Jordan H. Deyton, Dasha Gorin, Alexander J. McCaskey, Taylor Patterson,\n *   Claire Saunders, Matthew Wang, Anna Wojtowicz\n *******************************************************************************/\npackage org.eclipse.ice.tests.reactor.plant;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport javax.xml.bind.JAXBException;\nimport org.eclipse.ice.datastructures.ICEObject.Component;\nimport org.eclipse.ice.datastructures.ICEObject.ICEJAXBHandler;\nimport org.eclipse.ice.datastructures.componentVisitor.IReactorComponent;\nimport org.eclipse.ice.datastructures.componentVisitor.SelectiveComponentVisitor;\nimport org.eclipse.ice.reactor.plant.HeatExchanger;\nimport org.eclipse.ice.reactor.plant.Pipe;\nimport org.eclipse.ice.reactor.plant.PlantComponent;\nimport org.eclipse.ice.reactor.plant.SelectivePlantComponentVisitor;\nimport org.junit.Ignore;\nimport org.junit.Test;\n/**\n * \n * @author Anna Wojtowicz\n */\npublic class HeatExchangerTester {\n\t/**\n\t * <p>\n\t * Boolean flag to mark if the PlantComponent was successfully visited.\n\t * </p>\n\t * \n\t */\n\tprivate boolean wasVisited = false;\n\t/**\n\t * <p>\n\t * Checks the getting and setting of the component's attributes.\n\t * </p>\n\t * \n\t */\n\t@Test\n\tpublic void checkProperties() {\n\t\t// Create a new component.\n\t\tHeatExchanger component = new HeatExchanger();\n\t\t// Check the default values.\n\t\tassertEquals(\"Heat Exchanger\", component.getName());\n\t\tassertEquals(\"A heat exchanger for plants\", component.getDescription());\n\t\tassertEquals(1, component.getId());\n\t\tassertEquals(0.1, component.getInnerRadius(), 0.001);\n\t\tassertEquals(1.0, component.getLength(), 0.001);\n\t\tassertEquals(1, component.getNumElements());\n\t\tassertNotNull(component.getPrimaryPipe());\n\t\tassertNotNull(component.getSecondaryPipe());\n\t\tassertEquals(2, component.getComponents().size());\n\t\t// Check the inner radius\n\t\tcomponent.setInnerRadius(2.0);\n\t\tassertEquals(2.0, component.getInnerRadius(), 0.001);\n\t\t// Check the length\n\t\tcomponent.setLength(3.0);\n\t\tassertEquals(3.0, component.getLength(), 0.001);\n\t\t// Check the number of elements\n\t\tcomponent.setNumElements(4);\n\t\tassertEquals(4, component.getNumElements());\n\t\t// Check that the list of components has the correct size and contents.\n\t\tassertEquals(2, component.getComponents().size());\n\t\tassertEquals(component.getPrimaryPipe(),\n\t\t\t\tcomponent.getComponents().get(0));\n\t\tassertEquals(component.getSecondaryPipe(), component.getComponents()\n\t\t\t\t.get(1));\n\t\treturn;\n\t}\n\t/**\n\t * <p>\n\t * Checks the hashCode and equality methods of the component.\n\t * </p>\n\t * \n\t */\n<fim_suffix>\t@Test\n\tpublic void checkEquality() {\n\t\t// Construct a component to test against.\n\t\tHeatExchanger component = new HeatExchanger();\n\t\tcomponent.setInnerRadius(2.0);\n\t\tcomponent.setLength(3.0);\n\t\tcomponent.setNumElements(4);\n\t\t// Construct a component equal to the first.\n\t\tHeatExchanger equalComponent = new HeatExchanger();\n\t\tequalComponent.setInnerRadius(2.0);\n\t\tequalComponent.setLength(3.0);\n\t\tequalComponent.setNumElements(4);\n\t\t// Construct a component equal to the first for checking transitivity\n\t\tHeatExchanger transComponent = new HeatExchanger();\n\t\ttransComponent.setInnerRadius(2.0);\n\t\ttransComponent.setLength(3.0);\n\t\ttransComponent.setNumElements(4);\n\t\t// Construct a component not equal to the first.\n\t\tHeatExchanger unequalComponent = new HeatExchanger();\n\t\t// Check that component and unequalComponet are not the same.\n\t\tassertFalse(component.equals(unequalComponent));\n\t\tassertFalse(unequalComponent.equals(component));\n\t\t// Check that equality also fails with illegal values\n\t\tassertFalse(component == null);\n\t\tassertFalse(component.equals(11));\n\t\tassertFalse(\"House Lannister\".equals(component));\n\t\t// Check is equals() is reflexive and symmetric.\n\t\tassertTrue(component.equals(component));\n\t\tassertTrue(component.equals(equalComponent)\n\t\t\t\t&& equalComponent.equals(component));\n\t\t// Check equals() is transitive.\n\t\tif (component.equals(transComponent)\n\t\t\t\t&& transComponent.equals(equalComponent)) {\n\t\t\tassertTrue(component.equals(equalComponent));\n\t\t} else {\n\t\t\tfail();\n\t\t}\n\t\t// Check the hashCode values.\n\t\tassertEquals(component.hashCode(), component.hashCode());\n\t\tassertEquals(component.hashCode(), equalComponent.hashCode());\n\t\tassertFalse(component.hashCode() == unequalComponent.hashCode());\n\t\treturn;\n\t}\n\t/**\n\t * <p>\n\t * Checks the copy and clone methods of the component.\n\t * </p>\n\t * \n\t */\n\t@Test\n\tpublic void checkCopying() {\n\t\t// Construct a component to test against.\n\t\tHeatExchanger component = new HeatExchanger();\n\t\tcomponent.setInnerRadius(2.0);\n\t\tcomponent.setLength(3.0);\n\t\tcomponent.setNumElements(4);\n\t\tcomponent.setOrientation(new double[] { 1, 2, 5 });\n\t\t/* ---- Check copying ---- */\n\t\t// Construct an empty component to copy to.\n\t\tHeatExchanger componentCopy = new HeatExchanger();\n\t\t// Check that component and componentCopy are not identical yet.\n\t\tassertFalse(component == componentCopy);\n\t\tassertFalse(component.equals(componentCopy));\n\t\t// Copy contents over.\n\t\tcomponentCopy.copy(component);\n\t\t// Check component and componentCopy are identical.\n\t\tassertTrue(component.equals(componentCopy));\n\t\t// Try to copy contents of an invalid component.\n\t\tcomponentCopy.copy(null);\n\t\t// Check that componentCopy remains unchanged.\n\t\tassertTrue(component.equals(componentCopy));\n\t\t// Make sure they are still different references!\n\t\tassertFalse(component == componentCopy);\n\t\t/* ---- Check cloning ---- */\n\t\t// Get a clone of the original component.\n\t\tObject objectClone = component.clone();\n\t\t// Make sure it's not null!\n\t\tassertNotNull(objectClone);\n\t\t// Make sure the reference is different but the contents are equal.\n\t\tassertFalse(component == objectClone);\n\t\tassertTrue(component.equals(objectClone));\n\t\tassertFalse(componentCopy == objectClone);\n\t\tassertTrue(componentCopy.equals(objectClone));\n\t\t// Make sure the object is an instance of HeatExchanger.\n\t\tassertTrue(objectClone instanceof HeatExchanger);\n\t\t// Cast the component.\n\t\tHeatExchanger componentClone = (HeatExchanger) component.clone();\n\t\t// Check the components one last time for good measure.\n\t\tassertFalse(component == componentClone);\n\t\tassertTrue(component.equals(componentClone));\n\t\treturn;\n\t}\n\t/**\n\t * <p>\n\t * Checks for persistence in the component.\n\t * </p>\n\t * @throws IOException \n\t * @throws JAXBException \n\t * @throws NullPointerException \n\t * \n\t */\n\t@Ignore\n\t@Test\n\tpublic void checkPersistence() throws NullPointerException, JAXBException, IOException {\n\t\t// Local Declarations\n\t\tICEJAXBHandler xmlHandler = new ICEJAXBHandler();\n\t\tArrayList<Class> classList = new ArrayList<Class>();\n\t\tclassList.add(HeatExchanger.class);\n\t\t// Construct a component to test against.\n\t\tHeatExchanger writeComponent = new HeatExchanger();\n\t\twriteComponent.setInnerRadius(2.0);<fim_middle>// function below has no smell\n"}