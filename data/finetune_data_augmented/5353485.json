{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.openejb.builder;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.core.resources.IProjectDescription;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.ui.plugin.AbstractUIPlugin;\nimport org.osgi.framework.BundleContext;\n\npublic class Activator extends AbstractUIPlugin {\n\n\tpublic static final String OPENEJB_NATURE = \"org.apache.openejb.builder.nature\";\n\tpublic static final String OPENEJB_BUILDER = \"org.apache.openejb.builder\";\n\tprivate static Activator instance;\n\t\n\tpublic Activator() {\n\t\tinstance = this;\n\t}\n\n\tpublic void addOpenEJBNature(IProject project) {\n\t\ttry {\n\t\t\tif (project.hasNature(OPENEJB_NATURE)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tIProjectDescription description = project.getDescription();\n\t\t\tString[] currentNatures = description.getNatureIds();\n\t\t\tString[] newNatures = new String[currentNatures.length + 1];\n\t\t\tSystem.arraycopy(currentNatures, 0, newNatures, 0, currentNatures.length);\n\t\t\tnewNatures[currentNatures.length] = OPENEJB_NATURE;\n\t\t\tdescription.setNatureIds(newNatures);\n\t\t\tproject.setDescription(description, null);\n\n\t\t} catch (CoreException e) {\n\t\t}\n\t}\n\n\tpublic static Activator getPlugin() {\n\t\treturn instance;\n\t}\n\n\t@Override\n\tpublic void start(BundleContext context) throws Exception {\n\t\tsuper.start(context);\n\t}\n\n<fim_suffix>\t@Override\n\tpublic void stop(BundleContext context) throws Exception {\n\t\tinstance = null;\n\t\tsuper.stop(context);\n\t}\n\n\tpublic boolean projectHasOpenEJBNature(IProject project) {\n\t\ttry {\n\t\t\treturn project.hasNature(OPENEJB_NATURE);\n\t\t} catch (CoreException e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic void removeOpenEJBNature(IProject project) {\n\t\ttry {\n\t\t\tif (! project.hasNature(OPENEJB_NATURE)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tIProjectDescription description = project.getDescription();\n\t\t\tString[] currentNatures = description.getNatureIds();\n\t\t\tList<String> newNatures = new ArrayList<String>();\n\t\t\t\n\t\t\tfor (String nature : currentNatures) {\n\t\t\t\tif (! nature.equals(OPENEJB_NATURE)) {\n\t\t\t\t\tnewNatures.add(nature);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tdescription.setNatureIds(newNatures.toArray(new String[newNatures.size()]));\n\t\t\tproject.setDescription(description, null);\n\t\t\t\n\t\t} catch (CoreException e) {\n\t\t}\n\t}\n\n\tpublic Model getModel() {\n\t\treturn new Model();\n\t}\n}<fim_middle>// function below has no smell\n"}