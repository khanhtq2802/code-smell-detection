{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.ide.actions;\n\nimport com.google.inject.Inject;\nimport com.google.inject.Singleton;\nimport java.util.List;\nimport org.eclipse.che.ide.CoreLocalizationConstant;\nimport org.eclipse.che.ide.api.action.ActionEvent;\nimport org.eclipse.che.ide.api.action.ProjectAction;\nimport org.eclipse.che.ide.part.explorer.project.ProjectExplorerPresenter;\nimport org.eclipse.che.ide.ui.smartTree.data.Node;\n\n/**\n * Sets \"Go Into\" mode on node which is supports that mode.\n *\n * @author Vlad Zhukovskiy\n * @see Node#supportGoInto()\n */\n<fim_suffix>@Singleton\npublic class GoIntoAction extends ProjectAction {\n\n  private final ProjectExplorerPresenter projectExplorer;\n  private final CoreLocalizationConstant localizationConstant;\n\n  @Inject\n  public GoIntoAction(\n      ProjectExplorerPresenter projectExplorer, CoreLocalizationConstant localizationConstant) {\n    super(localizationConstant.goIntoActionText());\n\n    this.projectExplorer = projectExplorer;\n    this.localizationConstant = localizationConstant;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  protected void updateProjectAction(ActionEvent e) {\n    if (projectExplorer.isGoIntoActivated()) {\n      e.getPresentation().setText(localizationConstant.goBackActionText());\n      e.getPresentation().setEnabledAndVisible(true);\n      return;\n    }\n\n    e.getPresentation().setText(localizationConstant.goIntoActionText());\n\n    List<?> selection = projectExplorer.getSelection().getAllElements();\n\n    e.getPresentation()\n        .setEnabledAndVisible(\n            !projectExplorer.isGoIntoActivated()\n                && selection.size() == 1\n                && isNodeSupportGoInto(selection.get(0)));\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public void actionPerformed(ActionEvent e) {\n    if (projectExplorer.isGoIntoActivated()) {\n      projectExplorer.goBack();\n      return;\n    }\n\n    List<?> selection = projectExplorer.getSelection().getAllElements();\n\n    if (selection.isEmpty() || selection.size() > 1) {\n      throw new IllegalArgumentException(\"Node isn't selected\");\n    }\n\n    Object node = selection.get(0);\n\n    if (isNodeSupportGoInto(node)) {\n      projectExplorer.goInto((Node) node);\n    }\n  }\n\n  private boolean isNodeSupportGoInto(Object node) {\n    return node instanceof Node && ((Node) node).supportGoInto();\n  }\n}<fim_middle>// class below is blob\n"}