{"text": "<fim_prefix>      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"sre:\");\n      if (this.sre == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.sre);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class getDomains_resultStandardSchemeFactory implements SchemeFactory {\n      public getDomains_resultStandardScheme getScheme() {\n        return new getDomains_resultStandardScheme();\n      }\n    }\n    private static class getDomains_resultStandardScheme extends StandardScheme<getDomains_result> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, getDomains_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 0: // SUCCESS\n              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {\n                {\n                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();\n                  struct.success = new ArrayList<org.apache.airavata.sharing.registry.models.Domain>(_list0.size);\n                  org.apache.airavata.sharing.registry.models.Domain _elem1;\n                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)\n                  {\n                    _elem1 = new org.apache.airavata.sharing.registry.models.Domain();\n                    _elem1.read(iprot);\n                    struct.success.add(_elem1);\n                  }\n                  iprot.readListEnd();\n                }\n                struct.setSuccessIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 1: // SRE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.sre = new org.apache.airavata.sharing.registry.models.SharingRegistryException();\n                struct.sre.read(iprot);\n                struct.setSreIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, getDomains_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.success != null) {\n          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);\n          {\n            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));\n            for (org.apache.airavata.sharing.registry.models.Domain _iter3 : struct.success)\n            {\n              _iter3.write(oprot);\n            }\n            oprot.writeListEnd();\n          }\n          oprot.writeFieldEnd();\n        }\n        if (struct.sre != null) {\n          oprot.writeFieldBegin(SRE_FIELD_DESC);\n          struct.sre.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class getDomains_resultTupleSchemeFactory implements SchemeFactory {\n      public getDomains_resultTupleScheme getScheme() {\n        return new getDomains_resultTupleScheme();\n      }\n    }\n    private static class getDomains_resultTupleScheme extends TupleScheme<getDomains_result> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, getDomains_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetSuccess()) {\n          optionals.set(0);\n        }\n        if (struct.isSetSre()) {\n          optionals.set(1);\n        }\n        oprot.writeBitSet(optionals, 2);\n        if (struct.isSetSuccess()) {\n          {\n            oprot.writeI32(struct.success.size());\n            for (org.apache.airavata.sharing.registry.models.Domain _iter4 : struct.success)\n            {\n              _iter4.write(oprot);\n            }\n          }\n        }\n        if (struct.isSetSre()) {\n          struct.sre.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, getDomains_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        BitSet incoming = iprot.readBitSet(2);\n        if (incoming.get(0)) {\n          {\n            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());\n            struct.success = new ArrayList<org.apache.airavata.sharing.registry.models.Domain>(_list5.size);\n            org.apache.airavata.sharing.registry.models.Domain _elem6;\n            for (int _i7 = 0; _i7 < _list5.size; ++_i7)\n            {\n              _elem6 = new org.apache.airavata.sharing.registry.models.Domain();\n              _elem6.read(iprot);\n              struct.success.add(_elem6);\n            }\n          }\n          struct.setSuccessIsSet(true);\n        }\n        if (incoming.get(1)) {\n          struct.sre = new org.apache.airavata.sharing.registry.models.SharingRegistryException();\n          struct.sre.read(iprot);\n          struct.setSreIsSet(true);\n        }\n      }\n    }\n  }\n  public static class createUser_args implements org.apache.thrift.TBase<createUser_args, createUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<createUser_args>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"createUser_args\");\n    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField(\"user\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new createUser_argsStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new createUser_argsTupleSchemeFactory());\n    }\n    public org.apache.airavata.sharing.registry.models.User user; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      USER((short)1, \"user\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n<fim_suffix>      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // USER\n            return USER;\n          default:\n            return null;\n        }\n      }<fim_middle>// function below has no smell\n"}