{"text": "<fim_prefix>  }\n  public static final int ORIENTATION_ANY  = ACONFIGURATION_ORIENTATION_ANY;\n  public static final int ORIENTATION_PORT = ACONFIGURATION_ORIENTATION_PORT;\n  public static final int ORIENTATION_LAND = ACONFIGURATION_ORIENTATION_LAND;\n  public static final int ORIENTATION_SQUARE = ACONFIGURATION_ORIENTATION_SQUARE;\n  static final int ORIENTATION_PORTRAIT  = 0x01;\n  static final int ORIENTATION_LANDSCAPE = 0x02;\n  private static final Map<Integer, String> ORIENTATION_VALUES;\n  static {\n    Map<Integer, String> map = new HashMap<>();\n    map.put(ORIENTATION_PORTRAIT, \"port\");\n    map.put(ORIENTATION_LANDSCAPE, \"land\");\n    ORIENTATION_VALUES = Collections.unmodifiableMap(map);\n  }\n  static final int SCREENLAYOUT_LAYOUTDIR_MASK = 0xC0;\n  static final int SCREENLAYOUT_LAYOUTDIR_LTR  = 0x40;\n  static final int SCREENLAYOUT_LAYOUTDIR_RTL  = 0x80;\n  private static final Map<Integer, String> SCREENLAYOUT_LAYOUTDIR_VALUES;\n  static {\n    Map<Integer, String> map = new HashMap<>();\n    map.put(SCREENLAYOUT_LAYOUTDIR_LTR, \"ldltr\");\n    map.put(SCREENLAYOUT_LAYOUTDIR_RTL, \"ldrtl\");\n    SCREENLAYOUT_LAYOUTDIR_VALUES = Collections.unmodifiableMap(map);\n  }\n  // screenLayout bits for wide/long screen variation.\n  public static final int MASK_SCREENLONG = 0x30;\n  public static final int SHIFT_SCREENLONG = 4;\n  public static final int SCREENLONG_ANY = ACONFIGURATION_SCREENLONG_ANY << SHIFT_SCREENLONG;\n  public static final int SCREENLONG_NO = ACONFIGURATION_SCREENLONG_NO << SHIFT_SCREENLONG;\n  public static final int SCREENLONG_YES = ACONFIGURATION_SCREENLONG_YES << SHIFT_SCREENLONG;\n  static final int SCREENLAYOUT_LONG_MASK = 0x30;\n  static final int SCREENLAYOUT_LONG_NO   = 0x10;\n  static final int SCREENLAYOUT_LONG_YES  = 0x20;\n  private static final Map<Integer, String> SCREENLAYOUT_LONG_VALUES;\n  static {\n    Map<Integer, String> map = new HashMap<>();\n    map.put(SCREENLAYOUT_LONG_NO, \"notlong\");\n    map.put(SCREENLAYOUT_LONG_YES, \"long\");\n    SCREENLAYOUT_LONG_VALUES = Collections.unmodifiableMap(map);\n  }\n  // screenLayout2 bits for round/notround.\n  static final int MASK_SCREENROUND = 0x03;\n  public static final int SCREENROUND_ANY = ACONFIGURATION_SCREENROUND_ANY;\n  public static final int SCREENROUND_NO = ACONFIGURATION_SCREENROUND_NO;\n  public static final int SCREENROUND_YES = ACONFIGURATION_SCREENROUND_YES;\n  static final int SCREENLAYOUT_ROUND_MASK = 0x03;\n  static final int SCREENLAYOUT_ROUND_NO   = 0x01;\n  static final int SCREENLAYOUT_ROUND_YES  = 0x02;\n  private static final Map<Integer, String> SCREENLAYOUT_ROUND_VALUES;\n  static {\n    Map<Integer, String> map = new HashMap<>();\n    map.put(SCREENLAYOUT_ROUND_NO, \"notround\");\n    map.put(SCREENLAYOUT_ROUND_YES, \"round\");\n    SCREENLAYOUT_ROUND_VALUES = Collections.unmodifiableMap(map);\n  }\n  static final int SCREENLAYOUT_SIZE_MASK   = 0x0F;\n  static final int SCREENLAYOUT_SIZE_SMALL  = 0x01;\n  static final int SCREENLAYOUT_SIZE_NORMAL = 0x02;\n  static final int SCREENLAYOUT_SIZE_LARGE  = 0x03;\n  static final int SCREENLAYOUT_SIZE_XLARGE = 0x04;\n  private static final Map<Integer, String> SCREENLAYOUT_SIZE_VALUES;\n  static {\n    Map<Integer, String> map = new HashMap<>();\n    map.put(SCREENLAYOUT_SIZE_SMALL, \"small\");\n    map.put(SCREENLAYOUT_SIZE_NORMAL, \"normal\");\n    map.put(SCREENLAYOUT_SIZE_LARGE, \"large\");\n    map.put(SCREENLAYOUT_SIZE_XLARGE, \"xlarge\");\n    SCREENLAYOUT_SIZE_VALUES = Collections.unmodifiableMap(map);\n  }\n  static final int TOUCHSCREEN_NOTOUCH = 1;\n  @Deprecated static final int TOUCHSCREEN_STYLUS  = 2;\n  public static final int TOUCHSCREEN_FINGER  = 3;\n  private static final Map<Integer, String> TOUCHSCREEN_VALUES;\n  static {\n    Map<Integer, String> map = new HashMap<>();\n    map.put(TOUCHSCREEN_NOTOUCH, \"notouch\");\n    map.put(TOUCHSCREEN_FINGER, \"finger\");\n    TOUCHSCREEN_VALUES = Collections.unmodifiableMap(map);\n  }\n  static final int UI_MODE_NIGHT_MASK = 0x30;\n  public static final int UI_MODE_NIGHT_NO   = 0x10;\n  static final int UI_MODE_NIGHT_YES  = 0x20;\n  private static final Map<Integer, String> UI_MODE_NIGHT_VALUES;\n  static {\n    Map<Integer, String> map = new HashMap<>();\n    map.put(UI_MODE_NIGHT_NO, \"notnight\");\n    map.put(UI_MODE_NIGHT_YES, \"night\");\n    UI_MODE_NIGHT_VALUES = Collections.unmodifiableMap(map);\n  }\n  static final int UI_MODE_TYPE_MASK       = 0x0F;\n  static final int UI_MODE_TYPE_DESK       = 0x02;\n  static final int UI_MODE_TYPE_CAR        = 0x03;\n  static final int UI_MODE_TYPE_TELEVISION = 0x04;\n  static final int UI_MODE_TYPE_APPLIANCE  = 0x05;\n  static final int UI_MODE_TYPE_WATCH      = 0x06;\n  static final int UI_MODE_TYPE_VR_HEADSET = 0x07;\n  private static final Map<Integer, String> UI_MODE_TYPE_VALUES;\n  static {\n    Map<Integer, String> map = new HashMap<>();\n    map.put(UI_MODE_TYPE_DESK, \"desk\");\n    map.put(UI_MODE_TYPE_CAR, \"car\");\n    map.put(UI_MODE_TYPE_TELEVISION, \"television\");\n    map.put(UI_MODE_TYPE_APPLIANCE, \"appliance\");\n    map.put(UI_MODE_TYPE_WATCH, \"watch\");\n    map.put(UI_MODE_TYPE_VR_HEADSET, \"vrheadset\");\n    UI_MODE_TYPE_VALUES = Collections.unmodifiableMap(map);\n  }\n  /** The number of bytes that this resource configuration takes up. */\n  int size;\n  public int mcc;\n  public int mnc;\n  /** Returns a packed 2-byte language code. */\n  @SuppressWarnings(\"mutable\")\n  public final byte[] language;\n  /** Returns {@link #language} as an unpacked string representation. */\n  @Nonnull\n  public final String languageString() {\n    return unpackLanguage();\n  }\n  /** Returns the {@link #localeScript} as a string. */\n  public final String localeScriptString() {\n    return byteArrayToString(localeScript);\n  }\n  /** Returns the {@link #localeVariant} as a string. */\n  public final String localeVariantString() {\n    return byteArrayToString(localeVariant);\n  }\n  private String byteArrayToString(byte[] data) {\n    int length = Bytes.indexOf(data, (byte) 0);\n    return new String(data, 0, length >= 0 ? length : data.length, Charsets.US_ASCII);\n  }\n  /** Returns the wide color gamut section of {@link #colorMode}. */\n<fim_suffix>  public final int colorModeWideColorGamut() {\n    return colorMode & COLOR_MODE_WIDE_COLOR_GAMUT_MASK;\n  }<fim_middle>// function below has no smell\n"}