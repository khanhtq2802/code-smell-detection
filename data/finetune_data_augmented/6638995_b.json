{"text": "<fim_prefix>/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npackage com.facebook.share.model;\n\nimport android.net.Uri;\nimport android.os.Parcel;\nimport android.support.annotation.Nullable;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * Provides the base class for content to be shared. Contains all common methods for\n * the different types of content.\n */\n<fim_suffix>public abstract class ShareContent<P extends ShareContent, E extends ShareContent.Builder>\n        implements ShareModel {\n    private final Uri contentUrl;\n    private final List<String> peopleIds;\n    private final String placeId;\n    private final String pageId;\n    private final String ref;\n    private final ShareHashtag hashtag;\n\n    protected ShareContent(final Builder builder) {\n        super();\n        this.contentUrl = builder.contentUrl;\n        this.peopleIds = builder.peopleIds;\n        this.placeId = builder.placeId;\n        this.pageId = builder.pageId;\n        this.ref = builder.ref;\n        this.hashtag = builder.hashtag;\n    }\n\n    protected ShareContent(final Parcel in) {\n        this.contentUrl = in.readParcelable(Uri.class.getClassLoader());\n        this.peopleIds = readUnmodifiableStringList(in);\n        this.placeId = in.readString();\n        this.pageId = in.readString();\n        this.ref = in.readString();\n        this.hashtag = new ShareHashtag.Builder().readFrom(in).build();\n    }\n\n    /**\n     * URL for the content being shared.  This URL will be checked for app link meta tags for\n     * linking in platform specific ways.\n     * <p/>\n     * See documentation for <a href=\"https://developers.facebook.com/docs/applinks/\">App Links</a>.\n     *\n     * @return {@link android.net.Uri} representation of the content link.\n     */\n    @Nullable\n    public Uri getContentUrl() {\n        return this.contentUrl;\n    }\n\n    /**\n     * List of Ids for taggable people to tag with this content.\n     * <p/>\n     * See documentation for\n     * <a href=\"https://developers.facebook.com/docs/graph-api/reference/user/taggable_friends\">\n     * Taggable Friends</a>.\n     *\n     * @return {@link java.util.List} of Ids for people to tag.\n     */\n    @Nullable\n    public List<String> getPeopleIds() {\n        return this.peopleIds;\n    }\n\n    /**\n     * The Id for a place to tag with this content.\n     *\n     * @return The Id for the place to tag.\n     */\n    @Nullable\n    public String getPlaceId() {\n        return this.placeId;\n    }\n\n    /**\n     * For shares into Messenger, this pageID will be used to map the app to page and attach\n     * attribution to the share.\n     *\n     * @return The ID of the Facebook page this share is associated with.\n     */\n    @Nullable\n    public String getPageId() {\n        return this.pageId;\n    }\n\n    /**\n     * A value to be added to the referrer URL when a person follows a link from this shared\n     * content on feed.\n     *\n     * @return The ref for the content.\n     */\n    @Nullable\n    public String getRef() {\n        return this.ref;\n    }\n\n    /**\n     * Gets the ShareHashtag, if one has been set, for this content.\n     *\n     * @return The hashtag\n     */\n    @Nullable\n    public ShareHashtag getShareHashtag() {\n        return this.hashtag;\n    }\n\n    public int describeContents() {\n        return 0;\n    }\n\n    public void writeToParcel(final Parcel out, final int flags) {\n        out.writeParcelable(this.contentUrl, 0);\n        out.writeStringList(this.peopleIds);\n        out.writeString(this.placeId);\n        out.writeString(this.pageId);\n        out.writeString(this.ref);\n        out.writeParcelable(this.hashtag, 0);\n    }\n\n    private List<String> readUnmodifiableStringList(final Parcel in) {\n        final List<String> list = new ArrayList<String>();\n        in.readStringList(list);\n        return (list.size() == 0 ? null : Collections.unmodifiableList(list));\n    }\n\n    /**\n     * Abstract builder for {@link com.facebook.share.model.ShareContent}\n     */\n    public abstract static class Builder<P extends ShareContent, E extends Builder>\n            implements ShareModelBuilder<P, E> {\n        private Uri contentUrl;\n        private List<String> peopleIds;\n        private String placeId;\n        private String pageId;\n        private String ref;\n        private ShareHashtag hashtag;\n\n        /**\n         * Set the URL for the content being shared.\n         *\n         * @param contentUrl {@link android.net.Uri} representation of the content link.\n         * @return The builder.\n         */\n        public E setContentUrl(@Nullable final Uri contentUrl) {\n            this.contentUrl = contentUrl;\n            return (E) this;\n        }\n\n        /**\n         * Set the list of Ids for taggable people to tag with this content.\n         *\n         * @param peopleIds {@link java.util.List} of Ids for people to tag.\n         * @return The builder.\n         */\n        public E setPeopleIds(@Nullable final List<String> peopleIds) {\n            this.peopleIds = (peopleIds == null ? null : Collections.unmodifiableList(peopleIds));\n            return (E) this;\n        }\n\n        /**\n         * Set the Id for a place to tag with this content.\n         *\n         * @param placeId The Id for the place to tag.\n         * @return The builder.\n         */\n        public E setPlaceId(@Nullable final String placeId) {\n            this.placeId = placeId;\n            return (E) this;\n        }\n\n        /**\n         * Set the Id of the Facebook page this share is associated with.\n         *\n         * @param pageId The Id for the Page\n         * @return The builder\n         */\n        public E setPageId(@Nullable final String pageId) {\n            this.pageId = pageId;\n            return (E) this;\n        }\n\n        /**\n         * Set the value to be added to the referrer URL when a person follows a link from this\n         * shared content on feed.\n         *\n         * @param ref The ref for the content.\n         * @return The builder.\n         */\n        public E setRef(@Nullable final String ref) {\n            this.ref = ref;\n            return (E) this;\n        }\n\n        /**\n         * Set the ShareHashtag for this content\n         *\n         * @param shareHashtag The hashtag for this content\n         * @return The builder\n         */\n        public E setShareHashtag(@Nullable final ShareHashtag shareHashtag) {\n            this.hashtag = shareHashtag;\n            return (E) this;\n        }\n\n        @Override\n        public E readFrom(final P content) {\n            if (content == null) {\n                return (E) this;\n            }\n            return (E) this\n                    .setContentUrl(content.getContentUrl())\n                    .setPeopleIds(content.getPeopleIds())\n                    .setPlaceId(content.getPlaceId())\n                    .setPageId(content.getPageId())\n                    .setRef(content.getRef());\n        }\n    }\n}<fim_middle>// class below is data class and blob\n"}