{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2012 VMWare, Inc.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     VMWare, Inc. - initial API and implementation\n *******************************************************************************/\npackage org.grails.ide.eclipse.runonserver;\n\nimport org.eclipse.core.expressions.PropertyTester;\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.core.runtime.IAdaptable;\nimport org.grails.ide.eclipse.core.internal.GrailsNature;\n\n\n/**\n * A property tester that test some grails-project related properties.\n * <p>\n * TODO: KDV: (cleanup) This is more generally useable/useful than just for \"RunOnServer\". \n * This class and its accompanying snippet of xml in plugin.xml should be moved to grails core plugin. \n * @author Kris De Volder\n * @author Andrew Eisenberg\n * @author Christian Dupuis\n * @since 2.5.1\n */\npublic class GrailsProjectPropertyTester extends PropertyTester {\n\t\n\tprivate static final boolean DEBUG = false;\n\t\n\tprivate static final String IS_GRAILS_APP = \"isGrailsApp\";\n\tprivate void debug(String string) {\n\t\tif (DEBUG) {\n\t\t\tSystem.out.println(string);\n\t\t}\n\t}\n\n\tpublic GrailsProjectPropertyTester() {\n\t}\n\n<fim_suffix>\tpublic boolean test(Object receiver, String property, Object[] args,\n\t\t\tObject expectedValue) {\n\t\tif (property.equals(IS_GRAILS_APP)) {\n\t\t\tdebug(\"isGrailsApp? \"+receiver.getClass() +\" = \"+receiver);\n\t\t\tIProject project = toProject(receiver);\n\t\t\tdebug(\"adapted to IProject = \"+project);\n\t\t\tboolean result = project!=null && GrailsNature.isGrailsAppProject(project);\n\t\t\tdebug(\"isGrailsApp? => \"+result);\n\t\t\treturn result;\n\t\t} \n\t\treturn false;\n\t}\n\n\tprivate IProject toProject(Object receiver) {\n\t\tif (receiver instanceof IProject)\n\t\t\treturn (IProject) receiver;\n\t\telse if (receiver instanceof IAdaptable) {\n\t\t\tIAdaptable adapable = (IAdaptable) receiver;\n\t\t\treturn (IProject) adapable.getAdapter(IProject.class);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}<fim_middle>// function below has no smell\n"}