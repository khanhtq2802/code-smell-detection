{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.builder;\n\nimport org.apache.camel.CamelExecutionException;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Expression;\nimport org.apache.camel.Predicate;\nimport org.apache.camel.language.simple.SimpleLanguage;\n\n/**\n * Creates an {@link org.apache.camel.language.Simple} language builder.\n * <p/>\n * This builder is available in the Java DSL from the {@link RouteBuilder} which means that using\n * simple language for {@link Expression}s or {@link Predicate}s is very easy with the help of this builder.\n */\npublic class SimpleBuilder implements Predicate, Expression {\n\n    private final String text;\n    private Class<?> resultType;\n    // cache the expression/predicate\n    private volatile Expression expression;\n    private volatile Predicate predicate;\n\n    public SimpleBuilder(String text) {\n        this.text = text;\n    }\n\n    public static SimpleBuilder simple(String text) {\n        return new SimpleBuilder(text);\n    }\n\n    public static SimpleBuilder simple(String text, Class<?> resultType) {\n        SimpleBuilder answer = simple(text);\n        answer.setResultType(resultType);\n        return answer;\n    }\n\n    public static SimpleBuilder simpleF(String formatText, Object...values) {\n        return simple(String.format(formatText, values));\n    }\n\n    public static SimpleBuilder simpleF(String formatText, Class<?> resultType, Object...values) {\n        return simple(String.format(formatText, values), resultType);\n    }\n\n    public String getText() {\n        return text;\n    }\n\n    public Class<?> getResultType() {\n        return resultType;\n    }\n\n    public void setResultType(Class<?> resultType) {\n        this.resultType = resultType;\n    }\n\n    public SimpleBuilder resultType(Class<?> resultType) {\n        setResultType(resultType);\n        return this;\n    }\n\n<fim_suffix>    public boolean matches(Exchange exchange) {\n        if (predicate == null) {\n            predicate = createPredicate(exchange);\n        }\n        return predicate.matches(exchange);\n    }\n\n    public <T> T evaluate(Exchange exchange, Class<T> type) {\n        if (expression == null) {\n            expression = createExpression(exchange);\n        }\n        return expression.evaluate(exchange, type);\n    }\n\n    private Predicate createPredicate(Exchange exchange) {\n        SimpleLanguage simple = (SimpleLanguage) exchange.getContext().resolveLanguage(\"simple\");\n        try {\n            // resolve property placeholders\n            String resolve = exchange.getContext().resolvePropertyPlaceholders(text);\n            // and optional it be refer to an external script on the file/classpath\n            resolve = ScriptHelper.resolveOptionalExternalScript(exchange.getContext(), exchange, resolve);\n            return simple.createPredicate(resolve);\n        } catch (Exception e) {\n            throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n        }\n    }\n\n    private Expression createExpression(Exchange exchange) {\n        SimpleLanguage simple = (SimpleLanguage) exchange.getContext().resolveLanguage(\"simple\");\n        try {\n            // resolve property placeholders\n            String resolve = exchange.getContext().resolvePropertyPlaceholders(text);\n            // and optional it be refer to an external script on the file/classpath\n            resolve = ScriptHelper.resolveOptionalExternalScript(exchange.getContext(), exchange, resolve);\n            return simple.createExpression(resolve, resultType);\n        } catch (Exception e) {\n            throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n        }\n    }\n\n    public String toString() {\n        return \"Simple: \" + text;\n    }\n\n}<fim_middle>// function below has no smell\n"}