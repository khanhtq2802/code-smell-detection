{"text": "<fim_prefix>    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final String _fieldName;\n    _Fields(short thriftId, String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  private static final int __ENVPATHORDER_ISSET_ID = 0;\n  private byte __isset_bitfield = 0;\n  private static final _Fields optionals[] = {_Fields.ENV_PATH_ORDER};\n  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData(\"name\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData(\"value\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.ENV_PATH_ORDER, new org.apache.thrift.meta_data.FieldMetaData(\"envPathOrder\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));\n    metaDataMap = Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetEnvPaths.class, metaDataMap);\n  }\n  public SetEnvPaths() {\n  }\n  public SetEnvPaths(\n    String name,\n    String value)\n  {\n    this();\n    this.name = name;\n    this.value = value;\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public SetEnvPaths(SetEnvPaths other) {\n    __isset_bitfield = other.__isset_bitfield;\n    if (other.isSetName()) {\n      this.name = other.name;\n    }\n    if (other.isSetValue()) {\n      this.value = other.value;\n    }\n    this.envPathOrder = other.envPathOrder;\n  }\n  public SetEnvPaths deepCopy() {\n    return new SetEnvPaths(this);\n  }\n  @Override\n  public void clear() {\n    this.name = null;\n    this.value = null;\n    setEnvPathOrderIsSet(false);\n    this.envPathOrder = 0;\n  }\n  public String getName() {\n    return this.name;\n  }\n  public void setName(String name) {\n    this.name = name;\n  }\n  public void unsetName() {\n    this.name = null;\n  }\n  /** Returns true if field name is set (has been assigned a value) and false otherwise */\n  public boolean isSetName() {\n    return this.name != null;\n  }\n  public void setNameIsSet(boolean value) {\n    if (!value) {\n      this.name = null;\n    }\n  }\n  public String getValue() {\n    return this.value;\n  }\n  public void setValue(String value) {\n    this.value = value;\n  }\n  public void unsetValue() {\n    this.value = null;\n  }\n  /** Returns true if field value is set (has been assigned a value) and false otherwise */\n  public boolean isSetValue() {\n    return this.value != null;\n  }\n  public void setValueIsSet(boolean value) {\n    if (!value) {\n      this.value = null;\n    }\n  }\n  public int getEnvPathOrder() {\n    return this.envPathOrder;\n  }\n  public void setEnvPathOrder(int envPathOrder) {\n    this.envPathOrder = envPathOrder;\n    setEnvPathOrderIsSet(true);\n  }\n  public void unsetEnvPathOrder() {\n    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENVPATHORDER_ISSET_ID);\n  }\n  /** Returns true if field envPathOrder is set (has been assigned a value) and false otherwise */\n  public boolean isSetEnvPathOrder() {\n    return EncodingUtils.testBit(__isset_bitfield, __ENVPATHORDER_ISSET_ID);\n  }\n  public void setEnvPathOrderIsSet(boolean value) {\n    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENVPATHORDER_ISSET_ID, value);\n  }\n  public void setFieldValue(_Fields field, Object value) {\n    switch (field) {\n    case NAME:\n      if (value == null) {\n        unsetName();\n      } else {\n        setName((String)value);\n      }\n      break;\n    case VALUE:\n      if (value == null) {\n        unsetValue();\n      } else {\n        setValue((String)value);\n      }\n      break;\n    case ENV_PATH_ORDER:\n      if (value == null) {\n        unsetEnvPathOrder();\n      } else {\n        setEnvPathOrder((Integer)value);\n      }\n      break;\n    }\n  }\n  public Object getFieldValue(_Fields field) {\n    switch (field) {\n    case NAME:\n      return getName();\n    case VALUE:\n      return getValue();\n    case ENV_PATH_ORDER:\n      return getEnvPathOrder();\n    }\n    throw new IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new IllegalArgumentException();\n    }\n    switch (field) {\n    case NAME:\n      return isSetName();\n    case VALUE:\n      return isSetValue();\n    case ENV_PATH_ORDER:\n      return isSetEnvPathOrder();\n    }\n    throw new IllegalStateException();\n  }\n  @Override\n  public boolean equals(Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof SetEnvPaths)\n      return this.equals((SetEnvPaths)that);\n    return false;\n  }\n  public boolean equals(SetEnvPaths that) {\n    if (that == null)\n      return false;\n    boolean this_present_name = true && this.isSetName();\n    boolean that_present_name = true && that.isSetName();\n    if (this_present_name || that_present_name) {\n      if (!(this_present_name && that_present_name))\n        return false;\n      if (!this.name.equals(that.name))\n        return false;\n    }\n    boolean this_present_value = true && this.isSetValue();\n    boolean that_present_value = true && that.isSetValue();\n    if (this_present_value || that_present_value) {\n      if (!(this_present_value && that_present_value))\n        return false;\n      if (!this.value.equals(that.value))\n        return false;\n    }\n    boolean this_present_envPathOrder = true && this.isSetEnvPathOrder();\n    boolean that_present_envPathOrder = true && that.isSetEnvPathOrder();\n    if (this_present_envPathOrder || that_present_envPathOrder) {\n      if (!(this_present_envPathOrder && that_present_envPathOrder))\n        return false;\n      if (this.envPathOrder != that.envPathOrder)\n        return false;\n    }\n    return true;\n  }\n<fim_suffix>  @Override\n  public int hashCode() {\n    List<Object> list = new ArrayList<Object>();\n    boolean present_name = true && (isSetName());\n    list.add(present_name);\n    if (present_name)\n      list.add(name);\n    boolean present_value = true && (isSetValue());\n    list.add(present_value);\n    if (present_value)\n      list.add(value);\n    boolean present_envPathOrder = true && (isSetEnvPathOrder());\n    list.add(present_envPathOrder);\n    if (present_envPathOrder)\n      list.add(envPathOrder);\n    return list.hashCode();\n  }<fim_middle>// function below has no smell\n"}