{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.solr.client.solrj.request;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.apache.solr.client.solrj.SolrClient;\nimport org.apache.solr.client.solrj.SolrRequest;\nimport org.apache.solr.client.solrj.response.FieldAnalysisResponse;\nimport org.apache.solr.common.params.AnalysisParams;\nimport org.apache.solr.common.params.ModifiableSolrParams;\nimport org.apache.solr.common.params.SolrParams;\n\n/**\n * A request for the org.apache.solr.handler.FieldAnalysisRequestHandler.\n *\n *\n * @since solr.14\n */\npublic class FieldAnalysisRequest extends SolrRequest<FieldAnalysisResponse> {\n\n  private String fieldValue;\n  private String query;\n  private boolean showMatch;\n  private List<String> fieldNames;\n  private List<String> fieldTypes;\n\n  /**\n   * Constructs a new FieldAnalysisRequest with a default uri of \"/fieldanalysis\".\n   */\n  public FieldAnalysisRequest() {\n    super(METHOD.GET, \"/analysis/field\");\n  }\n\n  /**\n   * Constructs a new FieldAnalysisRequest with a given uri.\n   *\n   * @param uri the uri of the request handler.\n   */\n  public FieldAnalysisRequest(String uri) {\n    super(METHOD.GET, uri);\n  }\n\n\n  @Override\n  protected FieldAnalysisResponse createResponse(SolrClient client) {\n    if (fieldTypes == null && fieldNames == null) {\n      throw new IllegalStateException(\"At least one field type or field name need to be specified\");\n    }\n    if (fieldValue == null) {\n      throw new IllegalStateException(\"The field value must be set\");\n    }\n    return new FieldAnalysisResponse();\n  }\n\n  @Override\n  public SolrParams getParams() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(AnalysisParams.FIELD_VALUE, fieldValue);\n    if (query != null) {\n      params.add(AnalysisParams.QUERY, query);\n      params.add(AnalysisParams.SHOW_MATCH, String.valueOf(showMatch));\n    }\n    if (fieldNames != null) {\n      String fieldNameValue = listToCommaDelimitedString(fieldNames);\n      params.add(AnalysisParams.FIELD_NAME, fieldNameValue);\n    }\n    if (fieldTypes != null) {\n      String fieldTypeValue = listToCommaDelimitedString(fieldTypes);\n      params.add(AnalysisParams.FIELD_TYPE, fieldTypeValue);\n    }\n    return params;\n  }\n\n  //================================================ Helper Methods ==================================================\n\n  /**\n   * Convers the given list of string to a comma-separated string.\n   *\n   * @param list The list of string.\n   *\n   * @return The comma-separated string.\n   */\n  static String listToCommaDelimitedString(List<String> list) {\n    StringBuilder result = new StringBuilder();\n    for (String str : list) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(str);\n    }\n    return result.toString();\n  }\n\n\n  //============================================ Setter/Getter Methods ===============================================\n\n  /**\n   * Sets the field value to be analyzed.\n   *\n   * @param fieldValue The field value to be analyzed.\n   *\n   * @return This FieldAnalysisRequest (fluent interface support).\n   */\n  public FieldAnalysisRequest setFieldValue(String fieldValue) {\n    this.fieldValue = fieldValue;\n    return this;\n  }\n\n  /**\n   * Returns the field value that will be analyzed when this request is processed.\n   *\n   * @return The field value that will be analyzed when this request is processed.\n   */\n  public String getFieldValue() {\n    return fieldValue;\n  }\n\n  /**\n   * Sets the query to be analyzed. May be {@code null} indicated that no query analysis should take place.\n   *\n   * @param query The query to be analyzed.\n   *\n   * @return This FieldAnalysisRequest (fluent interface support).\n   */\n  public FieldAnalysisRequest setQuery(String query) {\n    this.query = query;\n    return this;\n  }\n\n  /**\n   * Returns the query that will be analyzed. May return {@code null} indicating that no query analysis will be\n   * performed.\n   *\n   * @return The query that will be analyzed. May return {@code null} indicating that no query analysis will be\n   *         performed.\n   */\n  public String getQuery() {\n    return query;\n  }\n\n  /**\n   * Sets whether index time tokens that match query time tokens should be marked as a \"match\". By default this is set\n   * to {@code false}. Obviously, this flag is ignored if when the query is set to {@code null}.\n   *\n   * @param showMatch Sets whether index time tokens that match query time tokens should be marked as a \"match\".\n   *\n   * @return This FieldAnalysisRequest (fluent interface support).\n   */\n  public FieldAnalysisRequest setShowMatch(boolean showMatch) {\n    this.showMatch = showMatch;\n    return this;\n  }\n\n  /**\n   * Returns whether index time tokens that match query time tokens should be marked as a \"match\".\n   *\n   * @return Whether index time tokens that match query time tokens should be marked as a \"match\".\n   *\n   * @see #setShowMatch(boolean)\n   */\n  public boolean isShowMatch() {\n    return showMatch;\n  }\n\n  /**\n   * Adds the given field name for analysis.\n   *\n   * @param fieldName A field name on which the analysis should be performed.\n   *\n   * @return this FieldAnalysisRequest (fluent interface support).\n   */\n  public FieldAnalysisRequest addFieldName(String fieldName) {\n    if (fieldNames == null) {\n      fieldNames = new LinkedList<>();\n    }\n    fieldNames.add(fieldName);\n    return this;\n  }\n\n  /**\n     * Sets the field names on which the analysis should be performed.\n     *\n     * @param fieldNames The field names on which the analysis should be performed.\n     *\n     * @return this FieldAnalysisRequest (fluent interface support).\n     */\n  public FieldAnalysisRequest setFieldNames(List<String> fieldNames) {\n    this.fieldNames = fieldNames;\n    return this;\n  }\n\n  /**\n   * Returns a list of field names the analysis should be performed on. May return {@code null} indicating that no\n   * analysis will be performed on field names.\n   *\n   * @return The field names the analysis should be performed on.\n   */\n  public List<String> getFieldNames() {\n    return fieldNames;\n  }\n\n  /**\n   * Adds the given field type for analysis.\n   *\n   * @param fieldTypeName A field type name on which analysis should be performed.\n   *\n   * @return This FieldAnalysisRequest (fluent interface support).\n   */\n  public FieldAnalysisRequest addFieldType(String fieldTypeName) {\n    if (fieldTypes == null) {\n      fieldTypes = new LinkedList<>();\n    }\n    fieldTypes.add(fieldTypeName);\n    return this;\n  }\n\n/**\n   * Sets the field types on which analysis should be performed.\n   *\n   * @param fieldTypes The field type names on which analysis should be performed.\n   *\n   * @return This FieldAnalysisRequest (fluent interface support).\n   */\n<fim_suffix>  public FieldAnalysisRequest setFieldTypes(List<String> fieldTypes) {\n    this.fieldTypes = fieldTypes;\n    return this;\n  }\n\n\n  /**\n   * Returns a list of field types the analysis should be performed on. May return {@code null} indicating that no\n   * analysis will be peformed on field types.\n   *\n   * @return The field types the analysis should be performed on.\n   */\n  public List<String> getFieldTypes() {\n    return fieldTypes;\n  }\n\n}<fim_middle>// function below has no smell\n"}