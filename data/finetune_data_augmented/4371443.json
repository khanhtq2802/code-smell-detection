{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.cxf.rs.security.oidc.utils;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.ws.rs.core.MultivaluedMap;\nimport org.apache.cxf.common.util.Base64UrlUtility;\nimport org.apache.cxf.common.util.StringUtils;\nimport org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\nimport org.apache.cxf.rs.security.jose.jws.JwsException;\nimport org.apache.cxf.rs.security.jose.jwt.JwtToken;\nimport org.apache.cxf.rs.security.oauth2.common.ClientAccessToken;\nimport org.apache.cxf.rs.security.oauth2.common.OAuthRedirectionState;\nimport org.apache.cxf.rs.security.oauth2.provider.OAuthServiceException;\nimport org.apache.cxf.rs.security.oidc.common.AbstractUserInfo;\nimport org.apache.cxf.rs.security.oidc.common.IdToken;\nimport org.apache.cxf.rt.security.crypto.MessageDigestUtils;\npublic final class OidcUtils {\n    public static final String ID_TOKEN_RESPONSE_TYPE = \"id_token\";\n    public static final String ID_TOKEN_AT_RESPONSE_TYPE = \"id_token token\";\n    public static final String CODE_AT_RESPONSE_TYPE = \"code token\";\n    public static final String CODE_ID_TOKEN_RESPONSE_TYPE = \"code id_token\";\n    public static final String CODE_ID_TOKEN_AT_RESPONSE_TYPE = \"code id_token token\";\n    public static final String ID_TOKEN = \"id_token\";\n    public static final String OPENID_SCOPE = \"openid\";\n    public static final String PROFILE_SCOPE = \"profile\";\n    public static final String EMAIL_SCOPE = \"email\";\n    public static final String ADDRESS_SCOPE = \"address\";\n    public static final String PHONE_SCOPE = \"phone\";\n    public static final List<String> PROFILE_CLAIMS =\n        Collections.unmodifiableList(Arrays.asList(AbstractUserInfo.NAME_CLAIM,\n                                                   AbstractUserInfo.FAMILY_NAME_CLAIM,\n                                                   AbstractUserInfo.GIVEN_NAME_CLAIM,\n                                                   AbstractUserInfo.MIDDLE_NAME_CLAIM,\n                                                   AbstractUserInfo.NICKNAME_CLAIM,\n                                                   AbstractUserInfo.PREFERRED_USERNAME_CLAIM,\n                                                   AbstractUserInfo.PROFILE_CLAIM,\n                                                   AbstractUserInfo.PICTURE_CLAIM,\n                                                   AbstractUserInfo.WEBSITE_CLAIM,\n                                                   AbstractUserInfo.GENDER_CLAIM,\n                                                   AbstractUserInfo.BIRTHDATE_CLAIM,\n                                                   AbstractUserInfo.ZONEINFO_CLAIM,\n                                                   AbstractUserInfo.LOCALE_CLAIM,\n                                                   AbstractUserInfo.UPDATED_AT_CLAIM));\n    public static final List<String> EMAIL_CLAIMS =\n        Collections.unmodifiableList(Arrays.asList(AbstractUserInfo.EMAIL_CLAIM,\n                                                   AbstractUserInfo.EMAIL_VERIFIED_CLAIM));\n    public static final List<String> ADDRESS_CLAIMS =\n        Collections.unmodifiableList(Arrays.asList(AbstractUserInfo.ADDRESS_CLAIM));\n    public static final List<String> PHONE_CLAIMS =\n        Collections.unmodifiableList(Arrays.asList(AbstractUserInfo.PHONE_CLAIM));\n    public static final String CLAIMS_PARAM = \"claims\";\n    public static final String CLAIM_NAMES_PROPERTY = \"_claim_names\";\n    public static final String CLAIM_SOURCES_PROPERTY = \"_claim_sources\";\n    public static final String JWT_CLAIM_SOURCE_PROPERTY = \"JWT\";\n    public static final String ENDPOINT_CLAIM_SOURCE_PROPERTY = \"endpoint\";\n    public static final String TOKEN_CLAIM_SOURCE_PROPERTY = \"access_token\";\n    public static final String PROMPT_PARAMETER = \"prompt\";\n    public static final String PROMPT_NONE_VALUE = \"none\";\n    public static final String PROMPT_CONSENT_VALUE = \"consent\";\n    public static final String CONSENT_REQUIRED_ERROR = \"consent_required\";\n    private static final Map<String, List<String>> SCOPES_MAP;\n    static {\n        SCOPES_MAP = new HashMap<>();\n        SCOPES_MAP.put(PHONE_SCOPE, PHONE_CLAIMS);\n        SCOPES_MAP.put(EMAIL_SCOPE, EMAIL_CLAIMS);\n        SCOPES_MAP.put(ADDRESS_SCOPE, ADDRESS_CLAIMS);\n        SCOPES_MAP.put(PROFILE_SCOPE, PROFILE_CLAIMS);\n    }\n    private OidcUtils() {\n    }\n    public static List<String> getPromptValues(MultivaluedMap<String, String> params) {\n        String prompt = params.getFirst(PROMPT_PARAMETER);\n        if (prompt != null) {\n            return Arrays.asList(prompt.trim().split(\" \"));\n        }\n        return Collections.emptyList();\n    }\n<fim_suffix>    public static String getOpenIdScope() {\n        return OPENID_SCOPE;\n    }\n    public static String getProfileScope() {\n        return getScope(OPENID_SCOPE, PROFILE_SCOPE);\n    }\n    public static String getEmailScope() {\n        return getScope(OPENID_SCOPE, EMAIL_SCOPE);\n    }\n    public static String getAddressScope() {\n        return getScope(OPENID_SCOPE, ADDRESS_SCOPE);\n    }\n    public static String getPhoneScope() {\n        return getScope(OPENID_SCOPE, PHONE_SCOPE);\n    }\n    public static String getAllScopes() {\n        return getScope(OPENID_SCOPE, PROFILE_SCOPE, EMAIL_SCOPE, ADDRESS_SCOPE, PHONE_SCOPE);\n    }\n    public static List<String> getScopeClaims(String... scope) {\n        List<String> claims = new ArrayList<>();\n        if (scope != null) {\n            for (String s : scope) {\n                if (SCOPES_MAP.containsKey(s)) {\n                    claims.addAll(SCOPES_MAP.get(s));\n                }\n            }\n        }\n        return claims;\n    }\n    private static String getScope(String... scopes) {\n        return String.join(\" \", scopes);\n    }\n    public static void validateAccessTokenHash(ClientAccessToken at, JwtToken jwt) {\n        validateAccessTokenHash(at, jwt, true);\n    }\n    public static void validateAccessTokenHash(ClientAccessToken at, JwtToken jwt, boolean required) {\n        validateAccessTokenHash(at.getTokenKey(), jwt, required);\n    }\n    public static void validateAccessTokenHash(String accessToken, JwtToken jwt, boolean required) {\n        if (required) {\n            validateHash(accessToken,\n                         (String)jwt.getClaims().getClaim(IdToken.ACCESS_TOKEN_HASH_CLAIM),\n                         jwt.getJwsHeaders().getSignatureAlgorithm());\n        }\n    }\n    public static void validateCodeHash(String code, JwtToken jwt) {\n        validateCodeHash(code, jwt, true);\n    }\n    public static void validateCodeHash(String code, JwtToken jwt, boolean required) {\n        if (required) {\n            validateHash(code,\n                         (String)jwt.getClaims().getClaim(IdToken.AUTH_CODE_HASH_CLAIM),\n                         jwt.getJwsHeaders().getSignatureAlgorithm());\n        }\n    }\n    private static void validateHash(String value, String theHash, SignatureAlgorithm joseAlgo) {\n        String hash = calculateHash(value, joseAlgo);\n        if (!hash.equals(theHash)) {\n            throw new OAuthServiceException(\"Invalid hash\");\n        }\n    }\n    public static String calculateAccessTokenHash(String value, SignatureAlgorithm sigAlgo) {\n        return calculateHash(value, sigAlgo);\n    }\n    public static String calculateAuthorizationCodeHash(String value, SignatureAlgorithm sigAlgo) {\n        return calculateHash(value, sigAlgo);\n    }\n    private static String calculateHash(String value, SignatureAlgorithm sigAlgo) {\n        if (sigAlgo == SignatureAlgorithm.NONE) {\n            throw new JwsException(JwsException.Error.INVALID_ALGORITHM);\n        }\n        String algoShaSizeString = sigAlgo.getJwaName().substring(2);\n        String javaShaAlgo = \"SHA-\" + algoShaSizeString;\n        int algoShaSize = Integer.parseInt(algoShaSizeString);<fim_middle>// function below has no smell\n"}