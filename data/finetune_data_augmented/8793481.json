{"text": "<fim_prefix>      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetSuccess()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetRse()).compareTo(other.isSetRse());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetRse()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rse, other.rse);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetEnf()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n      }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"getDetailedExperimentTree_result(\");\n      boolean first = true;\n      sb.append(\"success:\");\n      if (this.success == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.success);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"rse:\");\n      if (this.rse == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.rse);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"enf:\");\n      if (this.enf == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.enf);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n      if (success != null) {\n        success.validate();\n      }\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class getDetailedExperimentTree_resultStandardSchemeFactory implements SchemeFactory {\n      public getDetailedExperimentTree_resultStandardScheme getScheme() {\n        return new getDetailedExperimentTree_resultStandardScheme();\n      }\n    }\n    private static class getDetailedExperimentTree_resultStandardScheme extends StandardScheme<getDetailedExperimentTree_result> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, getDetailedExperimentTree_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 0: // SUCCESS\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.success = new org.apache.airavata.model.experiment.ExperimentModel();\n                struct.success.read(iprot);\n                struct.setSuccessIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 1: // RSE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.rse = new org.apache.airavata.registry.api.exception.RegistryServiceException();\n                struct.rse.read(iprot);\n                struct.setRseIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 2: // ENF\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();\n                struct.enf.read(iprot);\n                struct.setEnfIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, getDetailedExperimentTree_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.success != null) {\n          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);\n          struct.success.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.rse != null) {\n          oprot.writeFieldBegin(RSE_FIELD_DESC);\n          struct.rse.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.enf != null) {\n          oprot.writeFieldBegin(ENF_FIELD_DESC);\n          struct.enf.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class getDetailedExperimentTree_resultTupleSchemeFactory implements SchemeFactory {\n      public getDetailedExperimentTree_resultTupleScheme getScheme() {\n        return new getDetailedExperimentTree_resultTupleScheme();\n      }\n    }\n<fim_suffix>    private static class getDetailedExperimentTree_resultTupleScheme extends TupleScheme<getDetailedExperimentTree_result> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, getDetailedExperimentTree_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetSuccess()) {\n          optionals.set(0);\n        }\n        if (struct.isSetRse()) {\n          optionals.set(1);\n        }\n        if (struct.isSetEnf()) {\n          optionals.set(2);\n        }\n        oprot.writeBitSet(optionals, 3);\n        if (struct.isSetSuccess()) {\n          struct.success.write(oprot);\n        }\n        if (struct.isSetRse()) {\n          struct.rse.write(oprot);\n        }\n        if (struct.isSetEnf()) {\n          struct.enf.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, getDetailedExperimentTree_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        BitSet incoming = iprot.readBitSet(3);\n        if (incoming.get(0)) {\n          struct.success = new org.apache.airavata.model.experiment.ExperimentModel();\n          struct.success.read(iprot);\n          struct.setSuccessIsSet(true);\n        }\n        if (incoming.get(1)) {\n          struct.rse = new org.apache.airavata.registry.api.exception.RegistryServiceException();\n          struct.rse.read(iprot);\n          struct.setRseIsSet(true);\n        }\n        if (incoming.get(2)) {\n          struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();\n          struct.enf.read(iprot);\n          struct.setEnfIsSet(true);\n        }\n      }\n    }<fim_middle>// class below has no smell\n"}