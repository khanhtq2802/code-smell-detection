{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.client.marshaller.jdk;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInput;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.ObjectStreamClass;\nimport java.nio.ByteBuffer;\nimport org.apache.ignite.internal.client.marshaller.GridClientMarshaller;\nimport org.apache.ignite.internal.util.io.GridByteArrayOutputStream;\nimport org.apache.ignite.lang.IgnitePredicate;\n\n/**\n * Simple marshaller that utilize JDK serialization features.\n */\n<fim_suffix>public class GridClientJdkMarshaller implements GridClientMarshaller {\n    /** ID. */\n    public static final byte ID = 2;\n\n    /** Class name filter. */\n    private final IgnitePredicate<String> clsFilter;\n\n    /**\n     * Default constructor.\n     */\n    public GridClientJdkMarshaller() {\n        this(null);\n    }\n\n    /**\n     * @param clsFilter Class filter.\n     */\n    public GridClientJdkMarshaller(IgnitePredicate<String> clsFilter) {\n        this.clsFilter = clsFilter;\n    }\n\n    /** {@inheritDoc} */\n    @Override public ByteBuffer marshal(Object obj, int off) throws IOException {\n        GridByteArrayOutputStream bOut = new GridByteArrayOutputStream();\n\n        ObjectOutput out = new ObjectOutputStream(bOut);\n\n        out.writeObject(obj);\n\n        out.flush();\n\n        ByteBuffer buf = ByteBuffer.allocate(off + bOut.size());\n\n        buf.position(off);\n\n        buf.put(bOut.internalArray(), 0, bOut.size());\n\n        buf.flip();\n\n        return buf;\n    }\n\n    /** {@inheritDoc} */\n    @Override public <T> T unmarshal(byte[] bytes) throws IOException {\n        ByteArrayInputStream tmp = new ByteArrayInputStream(bytes);\n\n        ObjectInput in = new ClientJdkInputStream(tmp, clsFilter);\n\n        try {\n            return (T)in.readObject();\n        }\n        catch (ClassNotFoundException e) {\n            throw new IOException(\"Failed to unmarshal target object: \" + e.getMessage(), e);\n        }\n    }\n\n    /**\n     * Wrapper with class resolving control.\n     */\n    private static class ClientJdkInputStream extends ObjectInputStream {\n        /** Class name filter. */\n        private final IgnitePredicate<String> clsFilter;\n\n\n        /**\n         * @param in Input stream.\n         * @param clsFilter Class filter.\n         */\n        public ClientJdkInputStream(InputStream in, IgnitePredicate<String> clsFilter) throws IOException {\n            super(in);\n\n            this.clsFilter = clsFilter;\n        }\n\n        /** {@inheritDoc} */\n        @Override protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n            String clsName = desc.getName();\n\n            if (clsFilter != null && !clsFilter.apply(clsName))\n                throw new RuntimeException(\"Deserialization of class \" + clsName + \" is disallowed.\");\n\n            return super.resolveClass(desc);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}