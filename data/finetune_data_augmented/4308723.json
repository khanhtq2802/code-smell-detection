{"text": "<fim_prefix>        // Get the schema\n        if ( !schemaManager.isSchemaLoaded( schemaName ) )\n        {\n            // The schema is not loaded. We can't create the requested Normalizer\n            String msg = I18n.err( I18n.ERR_16019_CANNOT_ADD_SC, entry.getDn().getName(), schemaName );\n            if ( LOG.isWarnEnabled() )\n            {\n                LOG.warn( msg );\n            }\n            throw new LdapUnwillingToPerformException( ResultCodeEnum.UNWILLING_TO_PERFORM, msg );\n        }\n        Schema schema = getSchema( schemaName, targetRegistries );\n        if ( schema == null )\n        {\n            // The schema is disabled. We still have to update the backend\n            if ( LOG.isInfoEnabled() )\n            {\n                LOG.info( I18n.err( I18n.ERR_16020_CANNOT_ADD_SC_IN_REGISTRY, entry.getDn().getName(), schemaName ) );\n            }\n            schema = schemaManager.getLoadedSchema( schemaName );\n        }\n        // The FQCN\n        String className = getFqcn( entry, SchemaConstants.SYNTAX_CHECKER );\n        // The ByteCode\n        Attribute byteCode = entry.get( MetaSchemaConstants.M_BYTECODE_AT );\n        try\n        {\n            // Class load the syntaxChecker\n            SyntaxChecker syntaxChecker = classLoadSyntaxChecker( schemaManager, oid, className, byteCode );\n            // Update the common fields\n            setSchemaObjectProperties( syntaxChecker, entry, schema );\n            // return the resulting syntaxChecker\n            return syntaxChecker;\n        }\n        catch ( Exception e )\n        {\n            throw new LdapUnwillingToPerformException( ResultCodeEnum.UNWILLING_TO_PERFORM, e.getMessage(), e );\n        }\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public SyntaxChecker getSyntaxChecker( SchemaManager schemaManager,\n        SyntaxCheckerDescription syntaxCheckerDescription, Registries targetRegistries, String schemaName )\n        throws LdapException\n    {\n        checkDescription( syntaxCheckerDescription, SchemaConstants.SYNTAX_CHECKER );\n        // The Comparator OID\n        String oid = getOid( syntaxCheckerDescription, SchemaConstants.SYNTAX_CHECKER );\n        // Get the schema\n        Schema schema = getSchema( schemaName, targetRegistries );\n        if ( schema == null )\n        {\n            // The schema is not loaded. We can't create the requested SyntaxChecker\n            String msg = I18n.err( I18n.ERR_16019_CANNOT_ADD_SC, syntaxCheckerDescription.getName(), schemaName );\n            if ( LOG.isWarnEnabled() )\n            {\n                LOG.warn( msg );\n            }\n            throw new LdapUnwillingToPerformException( ResultCodeEnum.UNWILLING_TO_PERFORM, msg );\n        }\n        // The FQCN\n        String fqcn = getFqcn( syntaxCheckerDescription, SchemaConstants.SYNTAX_CHECKER );\n        // get the byteCode\n        Attribute byteCode = getByteCode( syntaxCheckerDescription, SchemaConstants.SYNTAX_CHECKER );\n        // Class load the SyntaxChecker\n        SyntaxChecker syntaxChecker = classLoadSyntaxChecker( schemaManager, oid, fqcn, byteCode );\n        // Update the common fields\n        setSchemaObjectProperties( syntaxChecker, syntaxCheckerDescription, schema );\n        return syntaxChecker;\n    }\n    /**\n     * Class load a comparator instances\n     * \n     * @param schemaManager The SchemaManager\n     * @param oid The comparator OID\n     * @param className The class name associated with the comparator\n     * @param byteCode The comparator class bytecode\n     * @return The loaded comparator\n     * @throws LdapException If the comparator cannot be loaded\n     */\n<fim_suffix>    private LdapComparator<?> classLoadComparator( SchemaManager schemaManager, String oid, String className,\n        Attribute byteCode ) throws LdapException\n    {\n        // Try to class load the comparator\n        LdapComparator<?> comparator;\n        Class<?> clazz;\n        String byteCodeStr = StringConstants.EMPTY;\n        if ( byteCode == null )\n        {\n            try\n            {\n                clazz = Class.forName( className );\n            }\n            catch ( ClassNotFoundException cnfe )\n            {\n                LOG.error( I18n.err( I18n.ERR_16056_CANNOT_FIND_CMP_CTOR, className ) );\n                throw new LdapSchemaException( I18n.err( I18n.ERR_16057_CANNOT_FIND_CMP_CLASS, cnfe.getMessage() ) );\n            }\n        }\n        else\n        {\n            classLoader.setAttribute( byteCode );\n            try\n            {\n                clazz = classLoader.loadClass( className );\n            }\n            catch ( ClassNotFoundException cnfe )\n            {\n                LOG.error( I18n.err( I18n.ERR_16058_CANNOT_LOAD_CMP_CTOR, className ) );\n                throw new LdapSchemaException( I18n.err( I18n.ERR_16059_CANNOT_LOAD_CMP_CLASS, cnfe.getMessage() ) );\n            }\n            byteCodeStr = new String( Base64.encode( byteCode.getBytes() ) );\n        }\n        // Create the comparator instance. Either we have a no argument constructor,\n        // or we have one which takes an OID. Lets try the one with an OID argument first\n        try\n        {\n            Constructor<?> constructor = clazz.getConstructor( new Class[]\n                { String.class } );\n            try\n            {\n                comparator = ( LdapComparator<?> ) constructor.newInstance( oid );\n            }\n            catch ( InvocationTargetException ite )\n            {\n                LOG.error( I18n.err( I18n.ERR_16060_CANNOT_INVOKE_CMP_CTOR, className ) );\n                throw new LdapSchemaException( I18n.err( I18n.ERR_16061_CANNOT_INVOKE_CMP_CLASS, ite.getMessage() ) );\n            }\n            catch ( InstantiationException ie )\n            {\n                LOG.error( I18n.err( I18n.ERR_16062_CANNOT_INST_CMP_CTOR_CLASS, className ) );\n                throw new LdapSchemaException( I18n.err( I18n.ERR_16063_CANNOT_INST_CMP_CLASS, ie.getMessage() ) );\n            }\n            catch ( IllegalAccessException ie )\n            {\n                LOG.error( I18n.err( I18n.ERR_16064_CANNOT_ACCESS_CMP_CTOR, className ) );\n                throw new LdapSchemaException( I18n.err( I18n.ERR_16065_CANNOT_ACCESS_CMP_CLASS, ie.getMessage() ) );\n            }\n        }\n        catch ( NoSuchMethodException nsme )\n        {\n            // Ok, let's try with the constructor without argument.\n            // In this case, we will have to check that the OID is the same than\n            // the one we got in the Comparator entry\n            try\n            {\n                clazz.getConstructor();\n            }\n            catch ( NoSuchMethodException nsme2 )\n            {\n                LOG.error( I18n.err( I18n.ERR_16066_CANNOT_FIND_CMP_CTOR_METH_CLASS, className ) );\n                throw new LdapSchemaException( I18n.err( I18n.ERR_16067_CANNOT_FIND_CMP_CTOR_METH, nsme2.getMessage() ) );\n            }\n            try\n            { \n                comparator = ( LdapComparator<?> ) clazz.newInstance();\n            }\n            catch ( InstantiationException ie )\n            {\n                LOG.error( I18n.err( I18n.ERR_16062_CANNOT_INST_CMP_CTOR_CLASS, className ) );\n                throw new LdapSchemaException( I18n.err( I18n.ERR_16063_CANNOT_INST_CMP_CLASS, ie.getMessage() ) );\n            }\n            catch ( IllegalAccessException iae )\n            {\n                LOG.error( I18n.err( I18n.ERR_16064_CANNOT_ACCESS_CMP_CTOR, className ) );\n                throw new LdapSchemaException( I18n.err( I18n.ERR_16065_CANNOT_ACCESS_CMP_CLASS, iae.getMessage() ) );\n            }\n            if ( !comparator.getOid().equals( oid ) )\n            {\n                String msg = I18n.err( I18n.ERR_16021_DIFFERENT_COMPARATOR_OID, oid, comparator.getOid() );\n                throw new LdapInvalidAttributeValueException( ResultCodeEnum.UNWILLING_TO_PERFORM, msg, nsme );\n            }\n        }\n        // Update the loadable fields\n        comparator.setBytecode( byteCodeStr );\n        comparator.setFqcn( className );\n        // Inject the SchemaManager for the comparator who needs it\n        comparator.setSchemaManager( schemaManager );\n        return comparator;\n    }<fim_middle>// function below is long method\n"}