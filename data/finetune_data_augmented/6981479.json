{"text": "<fim_prefix>/*\n * Copyright (c) 2011 Google, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.devtools.moe.client.testing;\n\nimport static com.google.devtools.moe.client.project.ProjectConfig.parse;\n\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.devtools.moe.client.Ui;\nimport com.google.devtools.moe.client.codebase.ExpressionEngine;\nimport com.google.devtools.moe.client.project.InvalidProject;\nimport com.google.devtools.moe.client.project.ProjectConfig;\nimport com.google.devtools.moe.client.project.ProjectContextFactory;\nimport com.google.devtools.moe.client.repositories.Repositories;\nimport com.google.devtools.moe.client.translation.editors.Editors;\nimport dagger.Binds;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.inject.Inject;\nimport javax.inject.Singleton;\n\n/**\n * A project context factory maintains a set of project configurations in memory.\n */\npublic class InMemoryProjectContextFactory extends ProjectContextFactory {\n  // TODO(cgruber): Stop with the visible non-final property.\n  @VisibleForTesting public Map<String, String> projectConfigs;\n\n  @Inject\n  public InMemoryProjectContextFactory(\n      ExpressionEngine expressionEngine, Ui ui, Repositories repositories) {\n    super(expressionEngine, ui, repositories, new Editors.Fake());\n    projectConfigs = new HashMap<>();\n  }\n\n<fim_suffix>  @Override\n  public ProjectConfig loadConfiguration(String configFilename) throws InvalidProject {\n    return parse(projectConfigs.get(configFilename));\n  }\n\n  @Override\n  public void loadUsernamesFiles(ProjectConfig config) {\n    // no tests using this factory currently use this feature, no-op for now\n    return;\n  }\n\n  /** A Dagger module for binding this implementation of {@link ProjectContextFactory}. */\n  @dagger.Module\n  public abstract static class Module {\n    @Binds\n    @Singleton\n    public abstract ProjectContextFactory factory(InMemoryProjectContextFactory impl);\n  }\n}<fim_middle>// function below has no smell\n"}