{"text": "<fim_prefix>/*\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npackage com.facebook.login.widget;\nimport android.app.AlertDialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.res.Resources;\nimport android.content.res.TypedArray;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.os.Bundle;\nimport android.support.v7.content.res.AppCompatResources;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport com.facebook.AccessToken;\nimport com.facebook.AccessTokenTracker;\nimport com.facebook.CallbackManager;\nimport com.facebook.FacebookButtonBase;\nimport com.facebook.FacebookCallback;\nimport com.facebook.FacebookSdk;\nimport com.facebook.Profile;\nimport com.facebook.appevents.AppEventsLogger;\nimport com.facebook.internal.AnalyticsEvents;\nimport com.facebook.internal.CallbackManagerImpl;\nimport com.facebook.internal.FetchedAppSettings;\nimport com.facebook.internal.FetchedAppSettingsManager;\nimport com.facebook.internal.LoginAuthorizationType;\nimport com.facebook.internal.ServerProtocol;\nimport com.facebook.internal.Utility;\nimport com.facebook.login.DefaultAudience;\nimport com.facebook.login.LoginBehavior;\nimport com.facebook.login.LoginManager;\nimport com.facebook.login.LoginResult;\nimport com.facebook.login.R;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n/**\n * A Log In/Log Out button that maintains login state and logs in/out for the app.\n * <p/>\n * This control requires the app ID to be specified in the AndroidManifest.xml.\n */\npublic class LoginButton extends FacebookButtonBase {\n    // ***\n    // Keep all the enum values in sync with attrs.xml\n    // ***\n    /**\n     * The display modes for the login button tool tip.\n     */\n    public enum ToolTipMode {\n        /**\n         * Default display mode. A server query will determine if the tool tip should be displayed\n         * and, if so, what the string shown to the user should be.\n         */\n        AUTOMATIC(\"automatic\", 0),\n        /**\n         * Display the tool tip with a local string--regardless of what the server returns\n         */\n        DISPLAY_ALWAYS(\"display_always\", 1),\n        /**\n         * Never display the tool tip--regardless of what the server says\n         */\n        NEVER_DISPLAY(\"never_display\", 2);\n        public static ToolTipMode DEFAULT = AUTOMATIC;\n        public static ToolTipMode fromInt(int enumValue) {\n            for (ToolTipMode mode : values()) {\n                if (mode.getValue() == enumValue) {\n                    return mode;\n                }\n            }\n            return null;\n        }\n        private String stringValue;\n        private int intValue;\n        ToolTipMode(String stringValue, int value) {\n            this.stringValue = stringValue;\n            this.intValue = value;\n        }\n        @Override\n        public String toString() {\n            return stringValue;\n        }\n        public int getValue() {\n            return intValue;\n        }\n    }\n    private static final String TAG = LoginButton.class.getName();\n    private boolean confirmLogout;\n    private String loginText;\n    private String logoutText;\n    private LoginButtonProperties properties = new LoginButtonProperties();\n    private String loginLogoutEventName = AnalyticsEvents.EVENT_LOGIN_VIEW_USAGE;\n    private boolean toolTipChecked;\n    private ToolTipPopup.Style toolTipStyle = ToolTipPopup.Style.BLUE;\n    private ToolTipMode toolTipMode;\n    private long toolTipDisplayTime = ToolTipPopup.DEFAULT_POPUP_DISPLAY_TIME;\n    private ToolTipPopup toolTipPopup;\n    private AccessTokenTracker accessTokenTracker;\n    private LoginManager loginManager;\n    static class LoginButtonProperties {\n        private DefaultAudience defaultAudience = DefaultAudience.FRIENDS;\n        private List<String> permissions = Collections.emptyList();\n        private LoginAuthorizationType authorizationType = null;\n        private LoginBehavior loginBehavior = LoginBehavior.NATIVE_WITH_FALLBACK;\n        private String authType = ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE;\n        public void setDefaultAudience(DefaultAudience defaultAudience) {\n            this.defaultAudience = defaultAudience;\n        }\n        public DefaultAudience getDefaultAudience() {\n            return defaultAudience;\n        }\n        public void setReadPermissions(List<String> permissions) {\n            if (LoginAuthorizationType.PUBLISH.equals(authorizationType)) {\n                throw new UnsupportedOperationException(\"Cannot call setReadPermissions after \" +\n                        \"setPublishPermissions has been called.\");\n            }\n            this.permissions = permissions;\n            authorizationType = LoginAuthorizationType.READ;\n        }\n        public void setPublishPermissions(List<String> permissions) {\n            if (LoginAuthorizationType.READ.equals(authorizationType)) {\n                throw new UnsupportedOperationException(\"Cannot call setPublishPermissions after \" +\n                        \"setReadPermissions has been called.\");\n            }\n            if (Utility.isNullOrEmpty(permissions)) {\n                throw new IllegalArgumentException(\n                        \"Permissions for publish actions cannot be null or empty.\");\n            }\n            this.permissions = permissions;\n            authorizationType = LoginAuthorizationType.PUBLISH;\n        }\n        List<String> getPermissions() {\n            return permissions;\n        }\n        public void clearPermissions() {\n            permissions = null;\n            authorizationType = null;\n        }\n        public void setLoginBehavior(LoginBehavior loginBehavior) {\n            this.loginBehavior = loginBehavior;\n        }\n        public LoginBehavior getLoginBehavior() {\n            return loginBehavior;\n        }\n        public String getAuthType() {\n            return authType;\n        }\n        public void setAuthType(final String authType) {\n            this.authType = authType;\n        }\n    }\n    /**\n     * Create the LoginButton by inflating from XML\n     *\n     * @see View#View(Context, AttributeSet)\n     */\n<fim_suffix>    public LoginButton(Context context) {\n        super(\n                context,\n                null,\n                0,\n                0,\n                AnalyticsEvents.EVENT_LOGIN_BUTTON_CREATE,\n                AnalyticsEvents.EVENT_LOGIN_BUTTON_DID_TAP);\n    }\n    /**\n     * Create the LoginButton by inflating from XML\n     *\n     * @see View#View(Context, AttributeSet)\n     */\n    public LoginButton(Context context, AttributeSet attrs) {\n        super(\n                context,\n                attrs,\n                0,\n                0,\n                AnalyticsEvents.EVENT_LOGIN_BUTTON_CREATE,\n                AnalyticsEvents.EVENT_LOGIN_BUTTON_DID_TAP);\n    }\n    /**\n     * Create the LoginButton by inflating from XML and applying a style.\n     *\n     * @see View#View(Context, AttributeSet, int)\n     */\n    public LoginButton(Context context, AttributeSet attrs, int defStyle) {\n        super(\n                context,\n                attrs,\n                defStyle,\n                0,\n                AnalyticsEvents.EVENT_LOGIN_BUTTON_CREATE,\n                AnalyticsEvents.EVENT_LOGIN_BUTTON_DID_TAP);\n    }\n    public void setLoginText(String loginText) {\n        this.loginText = loginText;\n        setButtonText();\n    }\n    public void setLogoutText(String logoutText) {\n        this.logoutText = logoutText;\n        setButtonText();\n    }\n    /**\n     * Sets the default audience to use when the user logs in.\n     * This value is only useful when specifying publish permissions for the native\n     * login dialog.\n     *\n     * @param defaultAudience the default audience value to use\n     */\n    public void setDefaultAudience(DefaultAudience defaultAudience) {\n        properties.setDefaultAudience(defaultAudience);\n    }\n    /**\n     * Gets the default audience to use when the user logs in.\n     * This value is only useful when specifying publish permissions for the native\n     * login dialog.\n     *\n     * @return the default audience value to use\n     */\n    public DefaultAudience getDefaultAudience() {\n        return properties.getDefaultAudience();\n    }\n    /**\n     * Set the permissions to use when the user logs in. The permissions here\n     * can only be read permissions. If any publish permissions are included, the login\n     * attempt by the user will fail. The LoginButton can only be associated with either<fim_middle>// function below has no smell\n"}