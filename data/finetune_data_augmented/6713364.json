{"text": "<fim_prefix>  // When this flag is set, onRequestSendAccessibilityEventHandler was explicitly set on this node.\n  private static final int PFLAG_ON_REQUEST_SEND_ACCESSIBILITY_EVENT_HANDLER_IS_SET = 1 << 10;\n  // When this flag is set, performAccessibilityActionHandler was explicitly set on this node.\n  private static final int PFLAG_PERFORM_ACCESSIBILITY_ACTION_HANDLER_IS_SET = 1 << 11;\n  // When this flag is set, sendAccessibilityEventHandler was explicitly set on this node.\n  private static final int PFLAG_SEND_ACCESSIBILITY_EVENT_HANDLER_IS_SET = 1 << 12;\n  // When this flag is set, sendAccessibilityEventUncheckedHandler was explicitly set on this node.\n  private static final int PFLAG_SEND_ACCESSIBILITY_EVENT_UNCHECKED_HANDLER_IS_SET = 1 << 13;\n  // When this flag is set, shadowElevation was explicitly set on this node.\n  private static final int PFLAG_SHADOW_ELEVATION_IS_SET = 1 << 14;\n  // When this flag is set, outlineProvider was explicitly set on this node.\n  private static final int PFLAG_OUTINE_PROVIDER_IS_SET = 1 << 15;\n  // When this flag is set, clipToOutline was explicitly set on this node.\n  private static final int PFLAG_CLIP_TO_OUTLINE_IS_SET = 1 << 16;\n  // When this flag is set, focusChangeHandler was explicitly set on this code.\n  private static final int PFLAG_FOCUS_CHANGE_HANDLER_IS_SET = 1 << 17;\n  // When this flag is set, interceptTouchHandler was explicitly set on this node.\n  private static final int PFLAG_INTERCEPT_TOUCH_HANDLER_IS_SET = 1 << 18;\n  private static final int PFLAG_SCALE_IS_SET = 1 << 19;\n  private static final int PFLAG_ALPHA_IS_SET = 1 << 20;\n  private static final int PFLAG_ROTATION_IS_SET = 1 << 21;\n  private static final int PFLAG_ACCESSIBILITY_ROLE_IS_SET = 1 << 22;\n  // When this flag is set, clipChildren was explicitly set on this node.\n  private static final int PFLAG_CLIP_CHILDREN_IS_SET = 1 << 23;\n  private static final int PFLAG_ACCESSIBILITY_ROLE_DESCRIPTION_IS_SET = 1 << 24;\n  private static final int PFLAG_ROTATION_X_IS_SET = 1 << 25;\n  private static final int PFLAG_ROTATION_Y_IS_SET = 1 << 26;\n  private @Nullable CharSequence mContentDescription;\n  private @Nullable Object mViewTag;\n  private @Nullable SparseArray<Object> mViewTags;\n  private float mShadowElevation;\n  private @Nullable ViewOutlineProvider mOutlineProvider;\n  private boolean mClipToOutline;\n  // Default value for ViewGroup\n  private boolean mClipChildren = true;\n  private float mScale = 1;\n  private float mAlpha = 1;\n  private float mRotation = 0;\n  private float mRotationX = 0;\n  private float mRotationY = 0;\n  private @Nullable EventHandler<ClickEvent> mClickHandler;\n  private @Nullable EventHandler<FocusChangedEvent> mFocusChangeHandler;\n  private @Nullable EventHandler<LongClickEvent> mLongClickHandler;\n  private @Nullable EventHandler<TouchEvent> mTouchHandler;\n  private @Nullable EventHandler<InterceptTouchEvent> mInterceptTouchHandler;\n  private @Nullable @AccessibilityRoleType String mAccessibilityRole;\n  private @Nullable CharSequence mAccessibilityRoleDescription;\n  private @Nullable EventHandler<DispatchPopulateAccessibilityEventEvent>\n      mDispatchPopulateAccessibilityEventHandler;\n  private @Nullable EventHandler<OnInitializeAccessibilityEventEvent>\n      mOnInitializeAccessibilityEventHandler;\n  private @Nullable EventHandler<OnPopulateAccessibilityEventEvent>\n      mOnPopulateAccessibilityEventHandler;\n  private @Nullable EventHandler<OnInitializeAccessibilityNodeInfoEvent>\n      mOnInitializeAccessibilityNodeInfoHandler;\n  private @Nullable EventHandler<OnRequestSendAccessibilityEventEvent>\n      mOnRequestSendAccessibilityEventHandler;\n  private @Nullable EventHandler<PerformAccessibilityActionEvent>\n      mPerformAccessibilityActionHandler;\n  private @Nullable EventHandler<SendAccessibilityEventEvent> mSendAccessibilityEventHandler;\n  private @Nullable EventHandler<SendAccessibilityEventUncheckedEvent>\n      mSendAccessibilityEventUncheckedHandler;\n  private @FocusState int mFocusState = FOCUS_UNSET;\n  private @ClickableState int mClickableState = CLICKABLE_UNSET;\n  private @EnabledState int mEnabledState = ENABLED_UNSET;\n  private @SelectedState int mSelectedState = SELECTED_UNSET;\n  private int mPrivateFlags;\n  @Override\n  public void setContentDescription(@Nullable CharSequence contentDescription) {\n    mPrivateFlags |= PFLAG_CONTENT_DESCRIPTION_IS_SET;\n    mContentDescription = contentDescription;\n  }\n  @Override\n  public @Nullable CharSequence getContentDescription() {\n    return mContentDescription;\n  }\n  @Override\n  public void setViewTag(@Nullable Object viewTag) {\n    mPrivateFlags |= PFLAG_VIEW_TAG_IS_SET;\n    mViewTag = viewTag;\n  }\n  @Override\n  public @Nullable Object getViewTag() {\n    return mViewTag;\n  }\n  @Override\n  public void setViewTags(@Nullable SparseArray<Object> viewTags) {\n    mPrivateFlags |= PFLAG_VIEW_TAGS_IS_SET;\n    mViewTags = viewTags;\n  }\n  @Override\n  public float getShadowElevation() {\n    return mShadowElevation;\n  }\n  @Override\n  public void setShadowElevation(float shadowElevation) {\n    mPrivateFlags |= PFLAG_SHADOW_ELEVATION_IS_SET;\n    mShadowElevation = shadowElevation;\n  }\n  @Override\n  public @Nullable ViewOutlineProvider getOutlineProvider() {\n    return mOutlineProvider;\n  }\n  @Override\n  public void setOutlineProvider(@Nullable ViewOutlineProvider outlineProvider) {\n    mPrivateFlags |= PFLAG_OUTINE_PROVIDER_IS_SET;\n    mOutlineProvider = outlineProvider;\n  }\n  @Override\n  public boolean getClipToOutline() {\n    return mClipToOutline;\n  }\n  @Override\n  public void setClipToOutline(boolean clipToOutline) {\n    mPrivateFlags |= PFLAG_CLIP_TO_OUTLINE_IS_SET;\n    mClipToOutline = clipToOutline;\n  }\n  @Override\n  public void setClipChildren(boolean clipChildren) {\n    mPrivateFlags |= PFLAG_CLIP_CHILDREN_IS_SET;\n    mClipChildren = clipChildren;\n  }\n  @Override\n  public boolean getClipChildren() {\n    return mClipChildren;\n  }\n  @Override\n  public boolean isClipChildrenSet() {\n    return (mPrivateFlags & PFLAG_CLIP_CHILDREN_IS_SET) != 0;\n  }\n  @Override\n  public @Nullable SparseArray<Object> getViewTags() {\n    return mViewTags;\n  }\n  @Override\n  public void setClickHandler(@Nullable EventHandler<ClickEvent> clickHandler) {\n    mPrivateFlags |= PFLAG_CLICK_HANDLER_IS_SET;\n    mClickHandler = clickHandler;\n  }\n  @Override\n  public @Nullable EventHandler<ClickEvent> getClickHandler() {\n    return mClickHandler;\n  }\n  @Override\n  public void setLongClickHandler(@Nullable EventHandler<LongClickEvent> longClickHandler) {\n    mPrivateFlags |= PFLAG_LONG_CLICK_HANDLER_IS_SET;\n    mLongClickHandler = longClickHandler;\n  }\n  @Override\n  public @Nullable EventHandler<LongClickEvent> getLongClickHandler() {\n    return mLongClickHandler;\n  }\n  @Override\n  public void setFocusChangeHandler(@Nullable EventHandler<FocusChangedEvent> focusChangedHandler) {\n    mPrivateFlags |= PFLAG_FOCUS_CHANGE_HANDLER_IS_SET;\n    mFocusChangeHandler = focusChangedHandler;\n  }\n  @Override\n  public @Nullable EventHandler<FocusChangedEvent> getFocusChangeHandler() {\n    return mFocusChangeHandler;\n  }\n  @Override\n  public boolean hasFocusChangeHandler() {\n    return mFocusChangeHandler != null;\n  }\n  @Override\n  public void setTouchHandler(@Nullable EventHandler<TouchEvent> touchHandler) {\n    mPrivateFlags |= PFLAG_TOUCH_HANDLER_IS_SET;\n    mTouchHandler = touchHandler;\n  }\n  @Override\n  public @Nullable EventHandler<TouchEvent> getTouchHandler() {\n    return mTouchHandler;\n  }\n  @Override\n  public void setInterceptTouchHandler(\n      @Nullable EventHandler<InterceptTouchEvent> interceptTouchHandler) {\n    mPrivateFlags |= PFLAG_INTERCEPT_TOUCH_HANDLER_IS_SET;\n    mInterceptTouchHandler = interceptTouchHandler;\n  }\n<fim_suffix>  @Override\n  public @Nullable EventHandler<InterceptTouchEvent> getInterceptTouchHandler() {\n    return mInterceptTouchHandler;\n  }<fim_middle>// function below has no smell\n"}