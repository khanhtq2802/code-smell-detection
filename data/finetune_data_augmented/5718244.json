{"text": "<fim_prefix>\t\tBroadcast<PartitionedBlock<MatrixBlock>> _pmb = sec.getSparkContext().broadcast(pmb);\t\n\t\t//sort data with broadcast index vector\n\t\tJavaPairRDD<MatrixIndexes, RowMatrixBlock> ret = data\n\t\t\t\t.mapPartitionsToPair(new ShuffleMatrixBlockRowsInMemFunction(rlen, brlen, _pmb));\n\t\treturn RDDAggregateUtils.mergeRowsByKey(ret);\n\t}\n\tprivate static class ExtractDoubleValuesFunction implements FlatMapFunction<MatrixBlock,Double> \n\t{\n\t\tprivate static final long serialVersionUID = 6888003502286282876L;\n\t\t@Override\n\t\tpublic Iterator<Double> call(MatrixBlock arg0) \n\t\t\tthrows Exception {\n\t\t\treturn DataConverter.convertToDoubleList(arg0).iterator();\n\t\t}\n\t}\n\tprivate static class ExtractRowsFunction implements FlatMapFunction<MatrixBlock,MatrixBlock> \n\t{\n\t\tprivate static final long serialVersionUID = -2786968469468554974L;\n\t\t@Override\n\t\tpublic Iterator<MatrixBlock> call(MatrixBlock arg0) \n\t\t\tthrows Exception {\n\t\t\tArrayList<MatrixBlock> rows = new ArrayList<>();\n\t\t\tfor(int i=0; i<arg0.getNumRows(); i++)\n\t\t\t\trows.add(arg0.slice(i, i));\n\t\t\treturn rows.iterator();\n\t\t}\n\t}\n\tprivate static class ExtractDoubleValuesFunction2 implements FlatMapFunction<Tuple2<MatrixBlock,MatrixBlock>,DoublePair> \n\t{\n\t\tprivate static final long serialVersionUID = 2132672563825289022L;\n\t\t@Override\n\t\tpublic Iterator<DoublePair> call(Tuple2<MatrixBlock,MatrixBlock> arg0) \n\t\t\tthrows Exception \n\t\t{\n\t\t\tArrayList<DoublePair> ret = new ArrayList<>(); \n\t\t\tMatrixBlock mb1 = arg0._1();\n\t\t\tMatrixBlock mb2 = arg0._2();\n\t\t\tfor( int i=0; i<mb1.getNumRows(); i++) {\n\t\t\t\tret.add(new DoublePair(\n\t\t\t\t\t\tmb1.quickGetValue(i, 0),\n\t\t\t\t\t\tmb2.quickGetValue(i, 0)));\n\t\t\t}\n\t\t\treturn ret.iterator();\n\t\t}\t\t\n\t}\n\tprivate static class ExtractDoubleValuesWithIndexFunction implements PairFlatMapFunction<Tuple2<MatrixIndexes,MatrixBlock>,ValueIndexPair,Double> \n\t{\n\t\tprivate static final long serialVersionUID = -3976735381580482118L;\n\t\tprivate int _brlen = -1;\n\t\tpublic ExtractDoubleValuesWithIndexFunction(int brlen)\n\t\t{\n\t\t\t_brlen = brlen;\n\t\t}\n\t\t@Override\n\t\tpublic Iterator<Tuple2<ValueIndexPair,Double>> call(Tuple2<MatrixIndexes,MatrixBlock> arg0) \n\t\t\tthrows Exception \n\t\t{\n\t\t\tArrayList<Tuple2<ValueIndexPair,Double>> ret = new ArrayList<>(); \n\t\t\tMatrixIndexes ix = arg0._1();\n\t\t\tMatrixBlock mb = arg0._2();\n\t\t\tlong ixoffset = (ix.getRowIndex()-1)*_brlen;\n\t\t\tfor( int i=0; i<mb.getNumRows(); i++) {\n\t\t\t\tdouble val = mb.quickGetValue(i, 0);\n\t\t\t\tret.add(new Tuple2<>(new ValueIndexPair(val,ixoffset+i+1), val));\n\t\t\t}\n\t\t\treturn ret.iterator();\n\t\t}\n\t}\n\tprivate static class ExtractDoubleValuesWithIndexFunction2 implements PairFlatMapFunction<Tuple2<MatrixIndexes,MatrixBlock>,ValuesIndexPair,double[]> \n\t{\n\t\tprivate static final long serialVersionUID = 8358254634903633283L;\n\t\tprivate final int _brlen;\n\t\tpublic ExtractDoubleValuesWithIndexFunction2(int brlen) {\n\t\t\t_brlen = brlen;\n\t\t}\n\t\t@Override\n\t\tpublic Iterator<Tuple2<ValuesIndexPair,double[]>> call(Tuple2<MatrixIndexes,MatrixBlock> arg0) \n\t\t\tthrows Exception \n\t\t{\n\t\t\tArrayList<Tuple2<ValuesIndexPair,double[]>> ret = new ArrayList<>(); \n\t\t\tMatrixIndexes ix = arg0._1();\n\t\t\tMatrixBlock mb = arg0._2();\n\t\t\tlong ixoffset = (ix.getRowIndex()-1)*_brlen;\n\t\t\tfor( int i=0; i<mb.getNumRows(); i++) {\n\t\t\t\tdouble[] vals = DataConverter.convertToDoubleVector(\n\t\t\t\t\tmb.slice(i, i));\n\t\t\t\tret.add(new Tuple2<>(new ValuesIndexPair(vals,ixoffset+i+1), vals));\n\t\t\t}\n\t\t\treturn ret.iterator();\n\t\t}\n\t}\n\tprivate static class CreateDoubleKeyFunction implements Function<Double,Double> \n\t{\n\t\tprivate static final long serialVersionUID = 2021786334763247835L;\n\t\t@Override\n\t\tpublic Double call(Double arg0) \n\t\t\tthrows Exception \n\t\t{\n\t\t\treturn arg0;\n\t\t}\n\t}\n\tprivate static class CreateDoubleKeyFunction2 implements Function<DoublePair,Double> \n\t{\n\t\tprivate static final long serialVersionUID = -7954819651274239592L;\n\t\t@Override\n\t\tpublic Double call(DoublePair arg0) \n\t\t\tthrows Exception \n\t\t{\n\t\t\treturn arg0.val1;\n\t\t}\n\t}\n\tprivate static class CreateDoubleKeysFunction implements Function<MatrixBlock,double[]> \n\t{\n\t\tprivate static final long serialVersionUID = 4316858496746520340L;\n\t\t@Override\n\t\tpublic double[] call(MatrixBlock row) throws Exception {\n\t\t\treturn DataConverter.convertToDoubleVector(row);\n\t\t}\n\t}\n\tprivate static class ExtractIndexFunction implements PairFunction<Tuple2<ValueIndexPair,Long>,Long,Long> {\n\t\tprivate static final long serialVersionUID = -4553468724131249535L;\n\t\t@Override\n\t\tpublic Tuple2<Long, Long> call(Tuple2<ValueIndexPair,Long> arg0) throws Exception {\n\t\t\treturn new Tuple2<>(arg0._1().ix, arg0._2());\n\t\t}\n\t}\n\tprivate static class ExtractIndexFunction2 implements PairFunction<Tuple2<ValuesIndexPair,Long>,Long,Long> {\n\t\tprivate static final long serialVersionUID = -1366455446597907270L;\n\t\t@Override\n\t\tpublic Tuple2<Long, Long> call(Tuple2<ValuesIndexPair,Long> arg0) throws Exception {\n\t\t\treturn new Tuple2<>(arg0._1().ix, arg0._2());\n\t\t}\n\t}\n<fim_suffix>\tprivate static class ConvertToBinaryBlockFunction implements PairFlatMapFunction<Iterator<Tuple2<Double,Long>>,MatrixIndexes,MatrixBlock> \n\t{\n\t\tprivate static final long serialVersionUID = 5000298196472931653L;\n\t\tprivate long _rlen = -1;\n\t\tprivate int _brlen = -1;\n\t\tpublic ConvertToBinaryBlockFunction(long rlen, int brlen)\n\t\t{\n\t\t\t_rlen = rlen;\n\t\t\t_brlen = brlen;\n\t\t}\n\t\tpublic Iterator<Tuple2<MatrixIndexes, MatrixBlock>> call(Iterator<Tuple2<Double,Long>> arg0) \n\t\t\tthrows Exception \n\t\t{\n\t\t\tArrayList<Tuple2<MatrixIndexes,MatrixBlock>> ret = new ArrayList<>();\n\t\t\tMatrixIndexes ix = null;\n\t\t\tMatrixBlock mb = null;\n\t\t\twhile( arg0.hasNext() ) \n\t\t\t{\n\t\t\t\tTuple2<Double,Long> val = arg0.next();\n\t\t\t\tlong valix = val._2 + 1;\n\t\t\t\tlong rix = UtilFunctions.computeBlockIndex(valix, _brlen);\n\t\t\t\tint pos = UtilFunctions.computeCellInBlock(valix, _brlen);\n\t\t\t\tif( ix == null || ix.getRowIndex() != rix )\n\t\t\t\t{\n\t\t\t\t\tif( ix !=null )\n\t\t\t\t\t\tret.add(new Tuple2<>(ix,mb));\n\t\t\t\t\tlong len = UtilFunctions.computeBlockSize(_rlen, rix, _brlen);\n\t\t\t\t\tix = new MatrixIndexes(rix,1);\n\t\t\t\t\tmb = new MatrixBlock((int)len, 1, false);\t\n\t\t\t\t}\n\t\t\t\tmb.quickSetValue(pos, 0, val._1);\n\t\t\t}\n\t\t\t//flush last block\n\t\t\tif( mb!=null && mb.getNonZeros() != 0 )\n\t\t\t\tret.add(new Tuple2<>(ix,mb));\n\t\t\treturn ret.iterator();\n\t\t}\n\t}<fim_middle>// class below has no smell\n"}