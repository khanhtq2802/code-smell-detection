{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2012 Spring IDE Developers\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Spring IDE Developers - initial API and implementation\n *******************************************************************************/\npackage org.springframework.ide.eclipse.data.jdt.core;\n\nimport java.util.List;\n\nimport org.eclipse.core.resources.IFile;\nimport org.eclipse.core.resources.IMarker;\nimport org.eclipse.core.resources.IResource;\nimport org.eclipse.jdt.core.ICompilationUnit;\nimport org.eclipse.jdt.core.IJavaElement;\nimport org.eclipse.jdt.core.JavaCore;\nimport org.eclipse.jdt.core.dom.ASTNode;\nimport org.eclipse.jdt.core.dom.MethodDeclaration;\nimport org.eclipse.jdt.core.dom.SingleVariableDeclaration;\nimport org.eclipse.jdt.internal.ui.text.correction.AssistContext;\nimport org.eclipse.ui.IMarkerResolution;\nimport org.eclipse.ui.IMarkerResolutionGenerator2;\nimport org.springframework.ide.eclipse.data.internal.validation.InvalidParameterTypeRule;\n\n<fim_suffix>@SuppressWarnings(\"restriction\")\npublic class InvalidParameterTypeMarkerResolutionGenerator implements IMarkerResolutionGenerator2 {\n\n\tpublic IMarkerResolution[] getResolutions(IMarker marker) {\n\t\tif (! hasResolutions(marker)) {\n\t\t\treturn new IMarkerResolution[0];\n\t\t}\n\t\t\n\t\tIResource resource = marker.getResource();\n\t\tICompilationUnit cu = null;\n\t\tif (resource instanceof IFile && resource.isAccessible()) {\n\t\t\tIJavaElement element = JavaCore.create((IFile) resource);\n\t\t\tif (! (element instanceof ICompilationUnit)) {\n\t\t\t\treturn new IMarkerResolution[0];\n\t\t\t}\n\t\t\tcu = (ICompilationUnit) element;\n\t\t}\n\t\t\n\t\tint startPos = marker.getAttribute(IMarker.CHAR_START, 0);\n\t\tint endPos = marker.getAttribute(IMarker.CHAR_END, 0);\n\t\tAssistContext assistContext = new AssistContext(cu, startPos, endPos - startPos);\n\t\tASTNode astNode = assistContext.getCoveringNode();\n\t\tMethodDeclaration methodDecl = getSurroundingMethod(astNode);\n\t\tif (methodDecl == null) {\n\t\t\treturn new IMarkerResolution[0];\n\t\t}\n\t\t\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<SingleVariableDeclaration> parameters = methodDecl.parameters();\n\t\tif (parameters.size() != 1) {\n\t\t\treturn new IMarkerResolution[0];\n\t\t}\n\t\t\n\t\tString propertyTypeName = marker.getAttribute(InvalidParameterTypeRule.PROPERTY_TYPE_ATTR, null);\n\t\tString propertyTypePackage = marker.getAttribute(InvalidParameterTypeRule.PROPERTY_TYPE_PACKAGE_ATTR, null);\n\t\treturn new IMarkerResolution[] { new ChangeParameterTypeResolution(parameters.get(0), propertyTypeName, propertyTypePackage, cu) };\n\t}\n\t\n\tprivate MethodDeclaration getSurroundingMethod(ASTNode astNode) {\n\t\tif (astNode instanceof MethodDeclaration || astNode == null) {\n\t\t\treturn (MethodDeclaration) astNode;\n\t\t}\n\t\treturn getSurroundingMethod(astNode.getParent());\n\t}\n\n\tpublic boolean hasResolutions(IMarker marker) {\n\t\tString problemId = marker.getAttribute(IMarker.PROBLEM, null);\n\t\tString propertyTypeName = marker.getAttribute(InvalidParameterTypeRule.PROPERTY_TYPE_ATTR, null);\n\t\tString propertyTypePackage = marker.getAttribute(InvalidParameterTypeRule.PROPERTY_TYPE_PACKAGE_ATTR, null);\n\t\treturn InvalidParameterTypeRule.PROBLEM_ID.equals(problemId) \n\t\t\t\t&& propertyTypeName != null && propertyTypePackage != null;\n\t}\n\n}<fim_middle>// class below has no smell\n"}