{"text": "<fim_prefix>    if (isSetRuleKeys())\n      hashCode = hashCode * 8191 + ruleKeys.hashCode();\n    hashCode = hashCode * 8191 + ((isSetRepository()) ? 131071 : 524287);\n    if (isSetRepository())\n      hashCode = hashCode * 8191 + repository.hashCode();\n    hashCode = hashCode * 8191 + ((isSetScheduleType()) ? 131071 : 524287);\n    if (isSetScheduleType())\n      hashCode = hashCode * 8191 + scheduleType.hashCode();\n    hashCode = hashCode * 8191 + ((isSetDistributedBuildModeEnabled()) ? 131071 : 524287);\n    if (isSetDistributedBuildModeEnabled())\n      hashCode = hashCode * 8191 + ((distributedBuildModeEnabled) ? 131071 : 524287);\n    return hashCode;\n  }\n  @Override\n  public int compareTo(FetchRuleKeyLogsRequest other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    lastComparison = java.lang.Boolean.valueOf(isSetRuleKeys()).compareTo(other.isSetRuleKeys());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetRuleKeys()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleKeys, other.ruleKeys);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    lastComparison = java.lang.Boolean.valueOf(isSetRepository()).compareTo(other.isSetRepository());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetRepository()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repository, other.repository);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    lastComparison = java.lang.Boolean.valueOf(isSetScheduleType()).compareTo(other.isSetScheduleType());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetScheduleType()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduleType, other.scheduleType);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    lastComparison = java.lang.Boolean.valueOf(isSetDistributedBuildModeEnabled()).compareTo(other.isSetDistributedBuildModeEnabled());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetDistributedBuildModeEnabled()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distributedBuildModeEnabled, other.distributedBuildModeEnabled);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    scheme(iprot).read(iprot, this);\n  }\n  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n    scheme(oprot).write(oprot, this);\n  }\n  @Override\n  public java.lang.String toString() {\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(\"FetchRuleKeyLogsRequest(\");\n    boolean first = true;\n    if (isSetRuleKeys()) {\n      sb.append(\"ruleKeys:\");\n      if (this.ruleKeys == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.ruleKeys);\n      }\n      first = false;\n    }\n    if (isSetRepository()) {\n      if (!first) sb.append(\", \");\n      sb.append(\"repository:\");\n      if (this.repository == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.repository);\n      }\n      first = false;\n    }\n    if (isSetScheduleType()) {\n      if (!first) sb.append(\", \");\n      sb.append(\"scheduleType:\");\n      if (this.scheduleType == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.scheduleType);\n      }\n      first = false;\n    }\n    if (isSetDistributedBuildModeEnabled()) {\n      if (!first) sb.append(\", \");\n      sb.append(\"distributedBuildModeEnabled:\");\n      sb.append(this.distributedBuildModeEnabled);\n      first = false;\n    }\n    sb.append(\")\");\n    return sb.toString();\n  }\n  public void validate() throws org.apache.thrift.TException {\n    // check for required fields\n    // check for sub-struct validity\n  }\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    try {\n      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {\n    try {\n      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.\n      __isset_bitfield = 0;\n      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private static class FetchRuleKeyLogsRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n    public FetchRuleKeyLogsRequestStandardScheme getScheme() {\n      return new FetchRuleKeyLogsRequestStandardScheme();\n    }\n  }\n  private static class FetchRuleKeyLogsRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<FetchRuleKeyLogsRequest> {\n<fim_suffix>    public void read(org.apache.thrift.protocol.TProtocol iprot, FetchRuleKeyLogsRequest struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TField schemeField;\n      iprot.readStructBegin();\n      while (true)\n      {\n        schemeField = iprot.readFieldBegin();\n        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n          break;\n        }\n        switch (schemeField.id) {\n          case 1: // RULE_KEYS\n            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {\n              {\n                org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();\n                struct.ruleKeys = new java.util.ArrayList<java.lang.String>(_list184.size);\n                java.lang.String _elem185;\n                for (int _i186 = 0; _i186 < _list184.size; ++_i186)\n                {\n                  _elem185 = iprot.readString();\n                  struct.ruleKeys.add(_elem185);\n                }\n                iprot.readListEnd();\n              }\n              struct.setRuleKeysIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 2: // REPOSITORY\n            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n              struct.repository = iprot.readString();\n              struct.setRepositoryIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 3: // SCHEDULE_TYPE\n            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n              struct.scheduleType = iprot.readString();\n              struct.setScheduleTypeIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 4: // DISTRIBUTED_BUILD_MODE_ENABLED\n            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {\n              struct.distributedBuildModeEnabled = iprot.readBool();\n              struct.setDistributedBuildModeEnabledIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          default:\n            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n        }\n        iprot.readFieldEnd();\n      }\n      iprot.readStructEnd();\n      // check for required fields of primitive type, which can't be checked in the validate method\n      struct.validate();\n    }<fim_middle>// function below is long method\n"}