{"text": "<fim_prefix>/**\n * This class contains simple data validation utilities.  The data validations include null, length\n * and simple reasonability checking.  All utilities will throw {@link ValidationException} for failures.\n */\npublic final class VUtil implements ConstraintValidator\n{\n    /**\n     * enum specifies what type of constraint is being targeted - User or Role.\n     */\n    public enum ConstraintType\n    {\n        /**\n         * Specifies {@link org.apache.directory.fortress.core.model.User}\n         */\n        USER,\n        /**\n         * Specifies {@link org.apache.directory.fortress.core.model.Role}\n         */\n        ROLE\n    }\n    private static final String CLS_NM = VUtil.class.getName();\n    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger( CLS_NM );\n    private static int maximumFieldLen = 130;\n    private static final String VALIDATE_LENGTH = \"field.length\";\n    private static final int MAXIMUM_FIELD_LEN = maximumFieldLen;\n    private static final int maxFieldLength = MAXIMUM_FIELD_LEN;\n    private static final int TIME_LEN = 4;\n    private static final int DATE_LEN = 8;\n    private static final int DAYMASK_LEN = 7;\n    private static final String TIME_FORMAT = \"HHmm\";\n    private static final String DATE_FORMAT = \"yyyyMMdd\";\n    private static final char SUNDAY = '1';\n    private static final char SATURDAY = '7';\n    private static final SimpleDateFormat TIME_FORMATER = getLenientFormat( TIME_FORMAT );\n    private static final SimpleDateFormat DATE_FORMATER = getLenientFormat( DATE_FORMAT );\n    private static volatile VUtil sINSTANCE = null;\n    private List<Validator> validators;\n    private String DSDVALIDATOR;\n    public static VUtil getInstance()\n    {\n        if(sINSTANCE == null)\n        {\n            synchronized (VUtil.class)\n            {\n                if(sINSTANCE == null)\n                {\n        \t        sINSTANCE = new VUtil();\n                }\n            }\n        }\n        return sINSTANCE;\n    }\n    /**\n     * static initializer retrieves Validators names from config and constructs for later processing.\n     */\n    private void init()\n    {\n        try\n        {\n            validators = getValidators();\n        }\n        catch ( org.apache.directory.fortress.core.SecurityException ex )\n        {\n            LOG.error( \"static initialzier caught SecurityException=\" + ex.getMessage(), ex );\n        }\n        DSDVALIDATOR = Config.getInstance().getProperty( GlobalIds.DSD_VALIDATOR_PROP );\n        String lengthProp = Config.getInstance().getProperty( VALIDATE_LENGTH );\n        if ( lengthProp != null )\n        {\n            maximumFieldLen = Integer.parseInt( lengthProp );\n        }\n    }\n    /**\n     * Private constructor\n     */\n    private VUtil()\n    {\n    \tinit();\n    }\n    /**\n     * This class is an implementation of ConstraintValidator.\n     *\n     * @return reference to newly constructed self.\n     */\n    public static ConstraintValidator getConstraintValidator()\n    {\n        return new VUtil();\n    }\n    /**\n     * Simple length check on orgunit that uses {@link org.apache.directory.fortress.core.GlobalIds#OU_LEN}.\n     *\n     * @param orgUnitId contains the ou name.\n     * @throws ValidationException in the event of failure, {@link org.apache.directory.fortress.core.GlobalErrIds#ORG_LEN_INVLD}.\n     */\n    public static void orgUnit( String orgUnitId ) throws ValidationException\n    {\n        if ( StringUtils.isEmpty( orgUnitId ) )\n        {\n            String error = \"orgUnit is null\";\n            throw new ValidationException( GlobalErrIds.ORG_NULL, error );\n        }\n        int length = orgUnitId.length();\n        if ( length > maxFieldLength )\n        {\n            String error = \"orgUnit value [\" + orgUnitId + \"] invalid length [\" + length + \"]\";\n            throw new ValidationException( GlobalErrIds.ORG_LEN_INVLD, error );\n        }\n    }\n    /**\n     * Simple length check on User password that uses {@link org.apache.directory.fortress.core.GlobalIds#PASSWORD_LEN}.\n     * @param password contains the User's password.\n     * @throws ValidationException in the event of failure, {@link org.apache.directory.fortress.core.GlobalErrIds#USER_PW_INVLD_LEN}.\n     */\n    public static void password( char[] password ) throws ValidationException\n    {\n        int length = password.length;\n        if ( length > GlobalIds.PASSWORD_LEN )\n        {\n            String error = \"password invalid length [\" + length + \"]\";\n            throw new ValidationException( GlobalErrIds.USER_PW_INVLD_LEN, error );\n        }\n    }\n    /**\n     * Simple length check and safe text validation on description field that uses {@link org.apache.directory.fortress.core.GlobalIds#DESC_LEN}.\n     *\n     * @param value contains the entity description.\n     * @throws org.apache.directory.fortress.core.ValidationException\n     *          in the event of failure, {@link org.apache.directory.fortress.core.GlobalErrIds#CONST_DESC_LEN_INVLD}.\n     */\n    public static void description( String value ) throws ValidationException\n    {\n        int length = value.length();\n        if ( length > GlobalIds.DESC_LEN )\n        {\n            String error = \"description value [\" + value + \"] invalid length [\" + length + \"]\";\n            throw new ValidationException( GlobalErrIds.CONST_DESC_LEN_INVLD, error );\n        }\n        RegExUtil.getInstance().safeText( value );\n    }\n    /**\n     * Perform a simple length and safe text validation.\n     *\n     * @param value contains the attribute to check.\n     * @param validLen contains the length to use.\n     * @throws ValidationException in the event of length {@link org.apache.directory.fortress.core.GlobalErrIds#CONST_INVLD_FIELD_LEN} or regex failure.\n     */\n    public static void safeText( String value, int validLen ) throws ValidationException\n    {\n        if ( StringUtils.isEmpty( value ) )\n        {\n            String error = \"safeText null value\";\n            throw new ValidationException( GlobalErrIds.CONST_NULL_TEXT, error );\n        }\n        int length = value.length();\n        if ( length > validLen )\n        {\n            String error = \"safeText value [\" + value + \"] invalid length [\" + length + \"]\";\n            throw new ValidationException( GlobalErrIds.CONST_INVLD_FIELD_LEN, error );\n        }\n        RegExUtil.getInstance().safeText( value );\n    }\n    /**\n     * Simple null, {@link org.apache.directory.fortress.core.GlobalErrIds#USER_ID_NULL}, and length checks, {@link org.apache.directory.fortress.core.GlobalErrIds#CONST_INVLD_FIELD_LEN}, on userId.\n     *\n     * @param userId contains the userId, maps to {@link org.apache.directory.fortress.core.model.User#userId}.\n     * @throws ValidationException in the event of failure, {@link GlobalErrIds#CONST_INVLD_FIELD_LEN}.\n     */\n    public static void userId( String userId ) throws ValidationException\n    {\n        if ( StringUtils.isEmpty( userId ) )\n        {\n            String error = \"userId validation failed, null or empty value\";\n            throw new ValidationException( GlobalErrIds.USER_ID_NULL, error );\n        }\n        int length = userId.length();\n        if ( length > GlobalIds.USERID_LEN )\n        {\n            String error = \"safeText value [\" + userId + \"] invalid length [\" + length + \"]\";\n            throw new ValidationException( GlobalErrIds.CONST_INVLD_FIELD_LEN, error );\n        }\n    }\n    /**\n     * Perform simple length and safe text validations on collection of name-value pairs.\n     *\n     * @param props contains name-value pairs in {@code name:value} format.\n     * @throws ValidationException in the event of failure.\n     */\n    public static void properties( Properties props ) throws ValidationException\n    {\n        if ( PropUtil.isNotEmpty( props ) )\n        {\n            for ( Enumeration<?> e = props.propertyNames(); e.hasMoreElements(); )\n            {\n                String key = ( String ) e.nextElement();\n                String val = props.getProperty( key );\n                safeText( key, GlobalIds.PROP_LEN );\n                safeText( val, GlobalIds.PROP_LEN );\n            }\n        }\n    }\n    /**\n     * Perform simple reasonability check on contraint timeout value.\n     *\n     * @param timeout must be greater than 0 and less than max value for {@link Integer#MAX_VALUE}\n     * @throws org.apache.directory.fortress.core.ValidationException\n     *          in the event value falls out of range.\n     */\n<fim_suffix>    public void timeout( Integer timeout ) throws ValidationException\n    {\n        if ( ( timeout < 0 ) || ( timeout >= Integer.MAX_VALUE ) )\n        {\n            String error = \"timeout - invalid timeout value [\" + timeout + \"]\";\n            throw new ValidationException( GlobalErrIds.CONST_TIMEOUT_INVLD, error );\n        }\n    }<fim_middle>// function below has no smell\n"}