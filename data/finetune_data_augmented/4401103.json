{"text": "<fim_prefix>\n<fim_suffix>public class PasswordPolicyDetailsPage implements IDetailsPage\n{\n    /** The associated Master Details Block */\n    private PasswordPoliciesMasterDetailsBlock masterDetailsBlock;\n    /** The Managed Form */\n    private IManagedForm mform;\n    /** The input password policy */\n    private PasswordPolicyBean passwordPolicy;\n    // UI Widgets\n    private Button enabledCheckbox;\n    private Text idText;\n    private Text descriptionText;\n    private ComboViewer checkQualityComboViewer;\n    private Text validatorText;\n    private Button minimumLengthCheckbox;\n    private Text minimumLengthText;\n    private Button maximumLengthCheckbox;\n    private Text maximumLengthText;\n    private Text minimumAgeText;\n    private Text maximumAgeText;\n    private Button expireWarningCheckbox;\n    private Text expireWarningText;\n    private Button graceAuthenticationLimitCheckbox;\n    private Text graceAuthenticationLimitText;\n    private Button graceExpireCheckbox;\n    private Text graceExpireText;\n    private Button mustChangeCheckbox;\n    private Button allowUserChangeCheckbox;\n    private Button safeModifyCheckbox;\n    private Button lockoutCheckbox;\n    private Text lockoutDurationText;\n    private Text maxFailureText;\n    private Text failureCountIntervalText;\n    private Button inHistoryCheckbox;\n    private Text inHistoryText;\n    private Button maxIdleCheckbox;\n    private Text maxIdleText;\n    private Text minimumDelayText;\n    private Text maximumDelayText;\n    // Listeners\n    /** The Text Modify Listener */\n    private ModifyListener textModifyListener = new ModifyListener()\n    {\n        public void modifyText( ModifyEvent e )\n        {\n            commit( true );\n            masterDetailsBlock.setEditorDirty();\n        }\n    };\n    /** The button Selection Listener */\n    private SelectionListener buttonSelectionListener = new SelectionAdapter()\n    {\n        public void widgetSelected( SelectionEvent e )\n        {\n            commit( true );\n            masterDetailsBlock.setEditorDirty();\n        }\n    };\n    /** The viewer Selection Changed Listener */\n    private ISelectionChangedListener viewerSelectionChangedListener = new ISelectionChangedListener()\n    {\n        public void selectionChanged( SelectionChangedEvent event )\n        {\n            commit( true );\n            masterDetailsBlock.setEditorDirty();\n        }\n    };\n    private VerifyListener integerVerifyListener = new VerifyListener()\n    {\n        public void verifyText( VerifyEvent e )\n        {\n            if ( !e.text.matches( \"[0-9]*\" ) ) //$NON-NLS-1$\n            {\n                e.doit = false;\n            }\n        }\n    };\n    private ISelectionChangedListener checkQualityComboViewerSelectionChangedListener = new ISelectionChangedListener()\n    {\n        public void selectionChanged( SelectionChangedEvent event )\n        {\n            StructuredSelection selection = ( StructuredSelection ) checkQualityComboViewer.getSelection();\n            if ( !selection.isEmpty() )\n            {\n                CheckQuality checkQuality = ( CheckQuality ) selection.getFirstElement();\n                if ( checkQuality == CheckQuality.DISABLED )\n                {\n                    minimumLengthCheckbox.setEnabled( false );\n                    minimumLengthText.setEnabled( false );\n                    maximumLengthCheckbox.setEnabled( false );\n                    maximumLengthText.setEnabled( false );\n                }\n                else\n                {\n                    int minimumLength = 0;\n                    int maximumLength = 0;\n                    try\n                    {\n                        minimumLength = Integer.parseInt( minimumLengthText.getText() );\n                    }\n                    catch ( NumberFormatException e )\n                    {\n                        // Nothing to do.\n                    }\n                    try\n                    {\n                        maximumLength = Integer.parseInt( maximumLengthText.getText() );\n                    }\n                    catch ( NumberFormatException e )\n                    {\n                        // Nothing to do.\n                    }\n                    minimumLengthCheckbox.setEnabled( true );\n                    minimumLengthText.setEnabled( minimumLength != 0 );\n                    maximumLengthCheckbox.setEnabled( true );\n                    maximumLengthText.setEnabled( maximumLength != 0 );\n                }\n            }\n        }\n    };\n    private SelectionListener minimumLengthCheckboxSelectionListener = new SelectionAdapter()\n    {\n        public void widgetSelected( SelectionEvent e )\n        {\n            minimumLengthText.setEnabled( minimumLengthCheckbox.getSelection() );\n        }\n    };\n    private SelectionListener maximumLengthCheckboxSelectionListener = new SelectionAdapter()\n    {\n        public void widgetSelected( SelectionEvent e )\n        {\n            maximumLengthText.setEnabled( maximumLengthCheckbox.getSelection() );\n        }\n    };\n    private SelectionListener expireWarningCheckboxSelectionListener = new SelectionAdapter()\n    {\n        public void widgetSelected( SelectionEvent e )\n        {\n            expireWarningText.setEnabled( expireWarningCheckbox.getSelection() );\n        }\n    };\n    private SelectionListener graceAuthenticationLimitCheckboxSelectionListener = new SelectionAdapter()\n    {\n        public void widgetSelected( SelectionEvent e )\n        {\n            graceAuthenticationLimitText.setEnabled( graceAuthenticationLimitCheckbox.getSelection() );\n        }\n    };\n    private SelectionListener graceExpireCheckboxSelectionListener = new SelectionAdapter()\n    {\n        public void widgetSelected( SelectionEvent e )\n        {\n            graceExpireText.setEnabled( graceExpireCheckbox.getSelection() );\n        }\n    };\n    private SelectionListener maxIdleCheckboxSelectionListener = new SelectionAdapter()\n    {\n        public void widgetSelected( SelectionEvent e )\n        {\n            maxIdleText.setEnabled( maxIdleCheckbox.getSelection() );\n        }\n    };\n    private SelectionListener inHistoryCheckboxSelectionListener = new SelectionAdapter()\n    {\n        public void widgetSelected( SelectionEvent e )\n        {\n            inHistoryText.setEnabled( inHistoryCheckbox.getSelection() );\n        }\n    };\n    /**\n     * Creates a new instance of PartitionDetailsPage.\n     *\n     * @param pmdb\n     *      the associated Master Details Block\n     */\n    public PasswordPolicyDetailsPage( PasswordPoliciesMasterDetailsBlock pmdb )\n    {\n        masterDetailsBlock = pmdb;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public void createContents( Composite parent )\n    {\n        FormToolkit toolkit = mform.getToolkit();\n        TableWrapLayout layout = new TableWrapLayout();\n        layout.topMargin = 5;\n        layout.leftMargin = 5;\n        layout.rightMargin = 2;\n        layout.bottomMargin = 2;\n        parent.setLayout( layout );\n        // Depending on if the PP is enabled or disabled, we will\n        // expose the configuration\n        createDetailsSection( toolkit, parent );\n        createQualitySection( toolkit, parent );\n        createExpirationSection( toolkit, parent );\n        createOptionsSection( toolkit, parent );\n        createLockoutSection( toolkit, parent );\n    }\n    /**\n     * Creates the Details Section\n     *\n     * @param parent\n     *      the parent composite\n     * @param toolkit\n     *      the toolkit to use\n     */\n    private void createDetailsSection( FormToolkit toolkit, Composite parent )\n    {\n        // Creation of the section\n        Section section = toolkit.createSection( parent, Section.DESCRIPTION | Section.TITLE_BAR );\n        section.marginWidth = 10;\n        section.setText( \"Password Policy Details\" );\n        section.setDescription( \"Set the properties of the password policy.\" );\n        TableWrapData td = new TableWrapData( TableWrapData.FILL, TableWrapData.TOP );\n        td.grabHorizontal = true;\n        section.setLayoutData( td );\n        Composite client = toolkit.createComposite( section );\n        toolkit.paintBordersFor( client );\n        GridLayout glayout = new GridLayout( 2, false );\n        client.setLayout( glayout );\n        section.setClient( client );\n        // Enabled Checkbox\n        enabledCheckbox = toolkit.createButton( client, \"Enabled\", SWT.CHECK );\n        enabledCheckbox.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false, 2, 1 ) );\n        // ID Text\n        toolkit.createLabel( client, \"ID:\" );\n        idText = toolkit.createText( client, \"\" );\n        idText.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );\n        // Description Text\n        toolkit.createLabel( client, \"Description:\" );\n        descriptionText = toolkit.createText( client, \"\" );\n        descriptionText.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );\n    }\n    /**\n     * Creates the Quality section.\n     *\n     * @param toolkit the toolkit to use\n     * @param parent the parent composite\n     */\n    private void createQualitySection( FormToolkit toolkit, Composite parent )\n    {\n        // Creation of the section\n        Section section = toolkit.createSection( parent, Section.TITLE_BAR );\n        section.marginWidth = 10;\n        section.setText( \"Quality\" );\n        TableWrapData td = new TableWrapData( TableWrapData.FILL, TableWrapData.TOP );\n        td.grabHorizontal = true;\n        section.setLayoutData( td );\n        Composite composite = toolkit.createComposite( section );\n        toolkit.paintBordersFor( composite );\n        GridLayout gridLayout = new GridLayout( 2, false );\n        gridLayout.marginHeight = gridLayout.marginWidth = 0;\n        composite.setLayout( gridLayout );\n        section.setClient( composite );\n        // Check Quality (pwdCheckQuality)\n        toolkit.createLabel( composite, \"Check Quality:\" );\n        checkQualityComboViewer = new ComboViewer( composite );\n        checkQualityComboViewer.setContentProvider( new ArrayContentProvider() );<fim_middle>// class below is blob\n"}