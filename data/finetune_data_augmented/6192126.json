{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.ide.ext.java.client.refactoring.preview;\nimport static java.util.stream.Collectors.toList;\nimport com.google.common.base.Optional;\nimport com.google.common.base.Strings;\nimport com.google.gwt.dom.client.Document;\nimport com.google.inject.Inject;\nimport com.google.inject.Singleton;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.eclipse.che.api.promises.client.Promise;\nimport org.eclipse.che.ide.api.app.AppContext;\nimport org.eclipse.che.ide.api.resources.Container;\nimport org.eclipse.che.ide.api.resources.File;\nimport org.eclipse.che.ide.dto.DtoFactory;\nimport org.eclipse.che.ide.ext.java.client.refactoring.RefactorInfo;\nimport org.eclipse.che.ide.ext.java.client.refactoring.RefactoringActionDelegate;\nimport org.eclipse.che.ide.resource.Path;\nimport org.eclipse.che.jdt.ls.extension.api.dto.CheResourceChange;\nimport org.eclipse.che.jdt.ls.extension.api.dto.CheWorkspaceEdit;\nimport org.eclipse.che.plugin.languageserver.ide.editor.quickassist.ApplyWorkspaceEditAction;\nimport org.eclipse.lsp4j.ResourceChange;\nimport org.eclipse.lsp4j.TextEdit;\nimport org.eclipse.lsp4j.jsonrpc.messages.Either;\n/**\n * @author Dmitry Shnurenko\n * @author Valeriy Svydenko\n */\n@Singleton\npublic class PreviewPresenter implements PreviewView.ActionDelegate {\n  private final PreviewView view;\n  private final AppContext appContext;\n  private final ApplyWorkspaceEditAction applyWorkspaceEditAction;\n  private final DtoFactory dtoFactory;\n  private Map<String, PreviewNode> fileNodes;\n  private CheWorkspaceEdit workspaceEdit;\n  private RefactoringActionDelegate refactoringActionDelegate;\n  @Inject\n  public PreviewPresenter(\n      PreviewView view,\n      AppContext appContext,\n      ApplyWorkspaceEditAction applyWorkspaceEditAction,\n      DtoFactory dtoFactory) {\n    this.view = view;\n    this.appContext = appContext;\n    this.applyWorkspaceEditAction = applyWorkspaceEditAction;\n    this.dtoFactory = dtoFactory;\n    this.view.setDelegate(this);\n    fileNodes = new LinkedHashMap<>();\n  }\n  public void show(String refactoringSessionId, RefactorInfo refactorInfo) {\n    view.showDialog();\n  }\n  /**\n   * Set a title of the window.\n   *\n   * @param title the name of the preview window\n   */\n  public void setTitle(String title) {\n    view.setTitleCaption(title);\n  }\n  /** {@inheritDoc} */\n  @Override\n  public void onCancelButtonClicked() {\n    view.close();\n  }\n  /** {@inheritDoc} */\n  @Override\n  public void onAcceptButtonClicked() {\n    updateFinalEdits();\n    applyWorkspaceEditAction.applyWorkspaceEdit(workspaceEdit);\n    view.close();\n    refactoringActionDelegate.closeWizard();\n  }\n  /** {@inheritDoc} */\n  @Override\n  public void onBackButtonClicked() {\n    view.close();\n  }\n<fim_suffix>  @Override\n  public void onSelectionChanged(PreviewNode selectedNode) {\n    Either<ResourceChange, TextEdit> data = selectedNode.getData();\n    if (data != null && data.isLeft()) {\n      view.showDiff(null);\n      return;\n    }\n    List<TextEdit> edits = collectTextEditsForSelectedNode(selectedNode);\n    updateContentInCompareWidget(selectedNode, edits);\n  }\n  private void updateContentInCompareWidget(PreviewNode selectedNode, List<TextEdit> edits) {\n    String path = selectedNode.getUri();\n    Container workspaceRoot = appContext.getWorkspaceRoot();\n    Promise<Optional<File>> file = workspaceRoot.getFile(path);\n    file.then(\n        fileOptional -> {\n          if (!fileOptional.isPresent()) {\n            return;\n          }\n          File existingFile = fileOptional.get();\n          existingFile\n              .getContent()\n              .then(\n                  content -> {\n                    ChangePreview changePreview = new ChangePreview();\n                    changePreview.setFileName(existingFile.getName());\n                    changePreview.setOldContent(content);\n                    // apply all related TextEdit to show new content in compare widget\n                    StringBuilder output = new StringBuilder();\n                    new StringStreamEditor(edits, content, output).transform();\n                    String result = output.toString();\n                    changePreview.setNewContent(result);\n                    view.showDiff(changePreview);\n                  });\n        });\n  }\n  /**\n   * Finds all enabled TextEdit changes which are children of the selected node and collect them to\n   * the list.\n   *\n   * @param selectedNode the node which was selected\n   * @return list of the enabled changes\n   */\n  private List<TextEdit> collectTextEditsForSelectedNode(PreviewNode selectedNode) {\n    Either<ResourceChange, TextEdit> data = selectedNode.getData();\n    PreviewNode node = fileNodes.get(selectedNode.getUri());\n    List<TextEdit> edits = new ArrayList<>();\n    if (node.getId().equals(selectedNode.getId())) {\n      for (PreviewNode child : node.getChildren()) {\n        TextEdit right = child.getData().getRight();\n        if (child.isEnable()) {\n          edits.add(right);\n        }\n      }\n    } else if (data != null && selectedNode.isEnable()) {\n      edits.add(data.getRight());\n    }\n    return edits;\n  }\n  @Override\n  public void onEnabledStateChanged(PreviewNode change) {\n    Either<ResourceChange, TextEdit> data = change.getData();\n    if (data != null && data.isLeft()) {\n      ResourceChange left = data.getLeft();\n      fileNodes.get(left.getNewUri()).setEnable(change.isEnable());\n    } else {\n      PreviewNode previewNode = fileNodes.get(change.getUri());\n      if (previewNode.getId().equals(change.getId())) {\n        previewNode.setEnable(change.isEnable());\n        for (PreviewNode node : previewNode.getChildren()) {\n          node.setEnable(change.isEnable());\n        }\n      } else {\n        for (PreviewNode node : previewNode.getChildren()) {\n          if (node.getId().equals(change.getId())) {\n            node.setEnable(change.isEnable());\n          }\n        }\n      }\n    }\n  }\n  public void show(\n      CheWorkspaceEdit workspaceEdit, RefactoringActionDelegate refactoringActionDelegate) {\n    this.workspaceEdit = workspaceEdit;\n    this.refactoringActionDelegate = refactoringActionDelegate;\n    prepareNodes(workspaceEdit);\n    view.setTreeOfChanges(fileNodes);\n    view.showDialog();\n  }\n  private void prepareNodes(CheWorkspaceEdit workspaceEdit) {\n    fileNodes.clear();\n    prepareTextEditNodes(workspaceEdit.getChanges());\n    prepareResourceChangeNodes(workspaceEdit.getCheResourceChanges());\n  }\n  private void prepareResourceChangeNodes(List<CheResourceChange> resourceChanges) {\n    for (CheResourceChange resourceChange : resourceChanges) {\n      PreviewNode node = new PreviewNode();\n      node.setData(Either.forLeft(resourceChange));\n      node.setEnable(true);\n      String uniqueId = Document.get().createUniqueId();\n      node.setId(uniqueId);\n      String current = resourceChange.getCurrent();\n      String newUri = resourceChange.getNewUri();\n      node.setUri(newUri);\n      if (current != null && newUri != null) {\n        if (!Strings.isNullOrEmpty(resourceChange.getDescription())) {\n          node.setDescription(resourceChange.getDescription());\n        } else if (Path.valueOf(current)\n            .removeLastSegments(1)\n            .equals(Path.valueOf(newUri).removeLastSegments(1))) {\n          node.setDescription(\n              \"Rename resource '\"\n                  + Path.valueOf(current).lastSegment()\n                  + \"' to '\"\n                  + Path.valueOf(newUri).lastSegment()\n                  + \"'\");\n        } else {\n          node.setDescription(\n              \"Move resource '\"\n                  + Path.valueOf(current).lastSegment()\n                  + \"' to '\"\n                  + Path.valueOf(newUri).removeLastSegments(1)\n                  + \"'\");\n        }\n        fileNodes.put(newUri, node);\n      } else if (current == null && newUri != null) {\n        node.setDescription(\"Create resource: '\" + Path.valueOf(newUri) + \"'\");\n        fileNodes.put(newUri, node);\n      }\n    }\n  }\n  private void prepareTextEditNodes(Map<String, List<TextEdit>> changes) {<fim_middle>// function below has no smell\n"}