{"text": "<fim_prefix>\n<fim_suffix>public class TezClientUtils {\n  private static Log LOG = LogFactory.getLog(TezClientUtils.class);\n  private static final int UTF8_CHUNK_SIZE = 16 * 1024;\n  /**\n   * Setup LocalResource map for Tez jars based on provided Configuration\n   * \n   * @param conf\n   *          Configuration to use to access Tez jars' locations\n   * @param credentials\n   *          a credentials instance into which tokens for the Tez local\n   *          resources will be populated\n   * @return Map of LocalResources to use when launching Tez AM\n   * @throws IOException\n   */\n  static Map<String, LocalResource> setupTezJarsLocalResources(\n      TezConfiguration conf, Credentials credentials)\n      throws IOException {\n    Preconditions.checkNotNull(credentials, \"A non-null credentials object should be specified\");\n    Map<String, LocalResource> tezJarResources = new HashMap<String, LocalResource>();\n    if (conf.getBoolean(TezConfiguration.TEZ_IGNORE_LIB_URIS, false)){\n      LOG.info(\"Ignoring '\" + TezConfiguration.TEZ_LIB_URIS + \"' since  '\" + \n            TezConfiguration.TEZ_IGNORE_LIB_URIS + \"' is set to true\");\n    } else {\n      // Add tez jars to local resource\n      String[] tezJarUris = conf.getStrings(TezConfiguration.TEZ_LIB_URIS);\n      if (tezJarUris == null || tezJarUris.length == 0) {\n        throw new TezUncheckedException(\"Invalid configuration of tez jars\"\n            + \", \" + TezConfiguration.TEZ_LIB_URIS\n            + \" is not defined in the configurartion\");\n      }\n      List<Path> tezJarPaths = Lists.newArrayListWithCapacity(tezJarUris.length);\n      for (String tezJarUri : tezJarUris) {\n        URI uri;\n        try {\n          uri = new URI(tezJarUri.trim());\n        } catch (URISyntaxException e) {\n          String message = \"Invalid URI defined in configuration for\"\n              + \" location of TEZ jars. providedURI=\" + tezJarUri;\n          LOG.error(message);\n          throw new TezUncheckedException(message, e);\n        }\n        if (!uri.isAbsolute()) {\n          String message = \"Non-absolute URI defined in configuration for\"\n              + \" location of TEZ jars. providedURI=\" + tezJarUri;\n          LOG.error(message);\n          throw new TezUncheckedException(message);\n        }\n        Path p = new Path(uri);\n        FileSystem pathfs = p.getFileSystem(conf);\n        p = pathfs.makeQualified(p);\n        tezJarPaths.add(p);\n        RemoteIterator<LocatedFileStatus> iter = pathfs.listFiles(p, false);\n        while (iter.hasNext()) {\n          LocatedFileStatus fStatus = iter.next();\n          String rsrcName = fStatus.getPath().getName();\n          // FIXME currently not checking for duplicates due to quirks\n          // in assembly generation\n          if (tezJarResources.containsKey(rsrcName)) {\n            String message = \"Duplicate resource found\"\n                + \", resourceName=\" + rsrcName\n                + \", existingPath=\" +\n                tezJarResources.get(rsrcName).getResource().toString()\n                + \", newPath=\" + fStatus.getPath();\n            LOG.warn(message);\n            // throw new TezUncheckedException(message);\n          }\n          tezJarResources.put(rsrcName,\n              LocalResource.newInstance(\n                  ConverterUtils.getYarnUrlFromPath(fStatus.getPath()),\n                  LocalResourceType.FILE,\n                  LocalResourceVisibility.PUBLIC,\n                  fStatus.getLen(),\n                  fStatus.getModificationTime()));\n        }\n      }\n      if (tezJarResources.isEmpty()) {\n        throw new TezUncheckedException(\n            \"No files found in locations specified in \"\n                + TezConfiguration.TEZ_LIB_URIS + \" . Locations: \"\n                + StringUtils.join(tezJarUris, ','));\n      } else {\n        // Obtain credentials.\n        TokenCache.obtainTokensForFileSystems(credentials,\n            tezJarPaths.toArray(new Path[tezJarPaths.size()]), conf);\n      }\n    }\n    return tezJarResources;\n  }\n  static void processTezLocalCredentialsFile(Credentials credentials, Configuration conf)\n      throws IOException {\n    String path = conf.get(TezJobConfig.TEZ_CREDENTIALS_PATH);\n    if (path == null) {\n      return;\n    } else {\n      TokenCache.mergeBinaryTokens(credentials, conf, path);\n    }\n  }\n  /**\n   * Verify or create the Staging area directory on the configured Filesystem\n   * @param stagingArea Staging area directory path\n   * @return the FileSytem for the staging area directory\n   * @throws IOException\n   */\n  public static FileSystem ensureStagingDirExists(Configuration conf,\n      Path stagingArea)\n      throws IOException {\n    FileSystem fs = stagingArea.getFileSystem(conf);\n    String realUser;\n    String currentUser;\n    UserGroupInformation ugi = UserGroupInformation.getLoginUser();\n    realUser = ugi.getShortUserName();\n    currentUser = UserGroupInformation.getCurrentUser().getShortUserName();\n    if (fs.exists(stagingArea)) {\n      FileStatus fsStatus = fs.getFileStatus(stagingArea);\n      String owner = fsStatus.getOwner();\n      if (!(owner.equals(currentUser) || owner.equals(realUser))) {\n        throw new IOException(\"The ownership on the staging directory \"\n            + stagingArea + \" is not as expected. \" + \"It is owned by \" + owner\n            + \". The directory must \" + \"be owned by the submitter \"\n            + currentUser + \" or \" + \"by \" + realUser);\n      }\n      if (!fsStatus.getPermission().equals(TezCommonUtils.TEZ_AM_DIR_PERMISSION)) {\n        LOG.info(\"Permissions on staging directory \" + stagingArea + \" are \"\n            + \"incorrect: \" + fsStatus.getPermission()\n            + \". Fixing permissions \" + \"to correct value \"\n            + TezCommonUtils.TEZ_AM_DIR_PERMISSION);\n        fs.setPermission(stagingArea, TezCommonUtils.TEZ_AM_DIR_PERMISSION);\n      }\n    } else {\n      TezCommonUtils.mkDirForAM(fs, stagingArea);\n    }\n    return fs;\n  }\n  /**\n   * Obtains tokens for the DAG based on the list of URIs setup in the DAG. The\n   * fetched credentials are populated back into the DAG and can be retrieved\n   * via dag.getCredentials\n   * \n   * @param dag\n   *          the dag for which credentials need to be setup\n   * @param sessionCredentials\n   *          session credentials which have already been obtained, and will be\n   *          required for the DAG\n   * @param conf\n   * @throws IOException\n   */\n  @Private\n  static void setupDAGCredentials(DAG dag, Credentials sessionCredentials,\n      Configuration conf) throws IOException {\n    Preconditions.checkNotNull(sessionCredentials);\n    LogUtils.logCredentials(LOG, sessionCredentials, \"session\");\n    Credentials dagCredentials = dag.getCredentials();\n    if (dagCredentials == null) {\n      dagCredentials = new Credentials();\n      dag.setCredentials(dagCredentials);\n    }\n    // All session creds are required for the DAG.\n    dagCredentials.mergeAll(sessionCredentials);\n    // Add additional credentials based on any URIs that the user may have specified.\n    // Obtain Credentials for any paths that the user may have configured.\n    Collection<URI> uris = dag.getURIsForCredentials();\n    if (uris != null && !uris.isEmpty()) {\n      Iterator<Path> pathIter = Iterators.transform(uris.iterator(), new Function<URI, Path>() {\n        @Override\n        public Path apply(URI input) {\n          return new Path(input);\n        }\n      });\n      Path[] paths = Iterators.toArray(pathIter, Path.class);\n      TokenCache.obtainTokensForFileSystems(dagCredentials, paths, conf);\n    }\n    // Obtain Credentials for the local resources configured on the DAG\n    try {\n      Set<Path> lrPaths = new HashSet<Path>();\n      for (Vertex v: dag.getVertices()) {\n        for (LocalResource lr: v.getTaskLocalFiles().values()) {\n          lrPaths.add(ConverterUtils.getPathFromYarnURL(lr.getResource()));\n        }\n      }\n      Path[] paths = lrPaths.toArray(new Path[lrPaths.size()]);\n      TokenCache.obtainTokensForFileSystems(dagCredentials, paths, conf);\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n  }\n  /**\n   * Create an ApplicationSubmissionContext to launch a Tez AM\n   * @param conf TezConfiguration\n   * @param appId Application Id\n   * @param dag DAG to be submitted\n   * @param amName Name for the application<fim_middle>// class below is blob\n"}