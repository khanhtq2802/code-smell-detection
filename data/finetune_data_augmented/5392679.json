{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage org.apache.openejb.jee.sun;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.ValidationEventHandler;\nimport javax.xml.bind.ValidationEvent;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.transform.sax.SAXSource;\n\nimport org.xml.sax.SAXException;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.XMLFilterImpl;\nimport org.apache.openejb.jee.JAXBContextFactory;\n\n/**\n * @version $Rev$ $Date$\n */\npublic class JaxbSun {\n\n    public static <T>String marshal(Class<T> type, Object object) throws JAXBException {\n        JAXBContext ctx2 = JAXBContextFactory.newInstance(type);\n        Marshaller marshaller = ctx2.createMarshaller();\n\n        marshaller.setProperty(\"jaxb.formatted.output\", true);\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        marshaller.marshal(object, baos);\n\n        return new String(baos.toByteArray());\n    }\n\n    public static <T>Object unmarshal(Class<T> type, InputStream in) throws ParserConfigurationException, SAXException, JAXBException {\n        return JaxbSun.unmarshal(type, in, true);\n    }\n\n    public static <T>Object unmarshal(Class<T> type, InputStream in, final boolean logErrors) throws ParserConfigurationException, SAXException, JAXBException {\n        // create a parser with validation disabled\n        SAXParserFactory factory = SAXParserFactory.newInstance();\n        factory.setNamespaceAware(true);\n        factory.setValidating(false);\n        SAXParser parser = factory.newSAXParser();\n\n        // Get the JAXB context -- this should be cached\n        JAXBContext ctx = JAXBContextFactory.newInstance(type);\n\n        // get the unmarshaller\n        Unmarshaller unmarshaller = ctx.createUnmarshaller();\n\n        // log errors?\n        unmarshaller.setEventHandler(new ValidationEventHandler(){\n            public boolean handleEvent(ValidationEvent validationEvent) {\n                if (logErrors) {\n                    System.out.println(validationEvent);\n                }\n                return false;\n            }\n        });\n\n        // add our XMLFilter which disables dtd downloading\n        NamespaceFilter xmlFilter = new NamespaceFilter(parser.getXMLReader());\n        xmlFilter.setContentHandler(unmarshaller.getUnmarshallerHandler());\n\n        // Wrap the input stream with our filter\n        SAXSource source = new SAXSource(xmlFilter, new InputSource(in));\n\n        // unmarshal the document\n        return unmarshaller.unmarshal(source);\n    }\n\n    // todo Inject the proper namespace\n<fim_suffix>    public static class NamespaceFilter extends XMLFilterImpl {\n        private static final InputSource EMPTY_INPUT_SOURCE = new InputSource(new ByteArrayInputStream(new byte[0]));\n\n        public NamespaceFilter(XMLReader xmlReader) {\n            super(xmlReader);\n        }\n\n        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {\n            return EMPTY_INPUT_SOURCE;\n        }\n    }\n}<fim_middle>// class below has no smell\n"}