{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.vfs2.provider;\nimport java.io.File;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.commons.vfs2.CacheStrategy;\nimport org.apache.commons.vfs2.Capability;\nimport org.apache.commons.vfs2.FileListener;\nimport org.apache.commons.vfs2.FileName;\nimport org.apache.commons.vfs2.FileObject;\nimport org.apache.commons.vfs2.FileSelector;\nimport org.apache.commons.vfs2.FileSystem;\nimport org.apache.commons.vfs2.FileSystemConfigBuilder;\nimport org.apache.commons.vfs2.FileSystemException;\nimport org.apache.commons.vfs2.FileSystemManager;\nimport org.apache.commons.vfs2.FileSystemOptions;\nimport org.apache.commons.vfs2.FilesCache;\nimport org.apache.commons.vfs2.VfsLog;\nimport org.apache.commons.vfs2.cache.OnCallRefreshFileObject;\nimport org.apache.commons.vfs2.events.AbstractFileChangeEvent;\nimport org.apache.commons.vfs2.events.ChangedEvent;\nimport org.apache.commons.vfs2.events.CreateEvent;\nimport org.apache.commons.vfs2.events.DeleteEvent;\nimport org.apache.commons.vfs2.impl.DefaultFileSystemConfigBuilder;\nimport org.apache.commons.vfs2.util.Messages;\n/**\n * A partial {@link org.apache.commons.vfs2.FileSystem} implementation.\n */\npublic abstract class AbstractFileSystem extends AbstractVfsComponent implements FileSystem {\n    private static final Log LOG = LogFactory.getLog(AbstractFileSystem.class);\n    /**\n     * The \"root\" of the file system. This is always \"/\" so it isn't always the \"real\" root.\n     */\n    private final FileName rootName;\n    /**\n     * The root URI of the file system. The base path specified as a file system option when the file system was\n     * created.\n     */\n    private final String rootURI;\n    private final Collection<Capability> caps = new HashSet<>();\n    private FileObject parentLayer;\n    /**\n     * Map from FileName to an ArrayList of listeners for that file.\n     */\n    private final Map<FileName, ArrayList<FileListener>> listenerMap = new HashMap<>();\n    /**\n     * FileSystemOptions used for configuration\n     */\n    private final FileSystemOptions fileSystemOptions;\n    /**\n     * How many fileObjects are handed out\n     */\n    private final AtomicLong useCount = new AtomicLong(0);\n    private FileSystemKey cacheKey;\n    /**\n     * open streams counter for this filesystem\n     */\n    private final AtomicInteger openStreams = new AtomicInteger(0);\n    protected AbstractFileSystem(final FileName rootName, final FileObject parentLayer,\n            final FileSystemOptions fileSystemOptions) {\n        this.parentLayer = parentLayer;\n        this.rootName = rootName;\n        this.fileSystemOptions = fileSystemOptions;\n        final FileSystemConfigBuilder builder = DefaultFileSystemConfigBuilder.getInstance();\n        String uri = builder.getRootURI(fileSystemOptions);\n        if (uri == null) {\n            uri = rootName.getURI();\n        }\n        this.rootURI = uri;\n    }\n    /**\n     * Initializes this component.\n     *\n     * @throws FileSystemException if an error occurs.\n     */\n<fim_suffix>    @Override\n    public void init() throws FileSystemException {\n        addCapabilities(caps);\n    }\n    /**\n     * Closes this component.\n     */\n    @Override\n    public void close() {\n        closeCommunicationLink();\n        parentLayer = null;\n    }\n    /**\n     * Close the underlying link used to access the files.\n     */\n    public void closeCommunicationLink() {\n        synchronized (this) {\n            doCloseCommunicationLink();\n        }\n    }\n    /**\n     * Close the underlying link used to access the files\n     */\n    protected void doCloseCommunicationLink() {\n    }\n    /**\n     * Creates a file object.\n     * <p>\n     * This method is called only if the requested file is not cached.\n     *\n     * @param name name referencing the new file.\n     * @return new created FileObject.\n     * @throws Exception might throw an Exception, which is then wrapped in FileSystemException.\n     */\n    protected abstract FileObject createFile(final AbstractFileName name) throws Exception;\n    /**\n     * Adds the capabilities of this file system.\n     *\n     * @param caps collections of Capabilities, can be immutable.\n     */\n    protected abstract void addCapabilities(Collection<Capability> caps);\n    /**\n     * Returns the name of the root of this file system.\n     *\n     * @return the root FileName.\n     */\n    @Override\n    public FileName getRootName() {\n        return rootName;\n    }\n    /**\n     * Returns the root URI specified for this file System.\n     *\n     * @return The root URI used in this file system.\n     * @since 2.0\n     */\n    @Override\n    public String getRootURI() {\n        return rootURI;\n    }\n    /**\n     * Adds a file object to the cache.\n     *\n     * @param file the file to add.\n     */\n    protected void putFileToCache(final FileObject file) {\n        getCache().putFile(file);\n    }\n    private FilesCache getCache() {\n        FilesCache files;\n        files = getContext().getFileSystemManager().getFilesCache();\n        if (files == null) {\n            throw new RuntimeException(Messages.getString(\"vfs.provider/files-cache-missing.error\"));\n        }\n        return files;\n    }\n    /**\n     * Returns a cached file.\n     *\n     * @param name name to search for.\n     * @return file object or null if not found.\n     */\n    protected FileObject getFileFromCache(final FileName name) {\n        return getCache().getFile(this, name);\n    }\n    /**\n     * Remove a cached file.\n     *\n     * @param name The file name to remove.\n     */\n    protected void removeFileFromCache(final FileName name) {\n        getCache().removeFile(this, name);\n    }\n    /**\n     * Determines if this file system has a particular capability.\n     *\n     * @param capability the Capability to check for.\n     * @return true if the FileSystem has the Capability, false otherwise.\n     */\n    @Override\n    public boolean hasCapability(final Capability capability) {\n        return caps.contains(capability);\n    }\n    /**\n     * Retrieves the attribute with the specified name. The default implementation simply throws an exception.\n     *\n     * @param attrName The name of the attribute.\n     * @return the Object associated with the attribute or null if no object is.\n     * @throws FileSystemException if an error occurs.\n     */\n    @Override\n    public Object getAttribute(final String attrName) throws FileSystemException {\n        throw new FileSystemException(\"vfs.provider/get-attribute-not-supported.error\");\n    }\n    /**\n     * Sets the attribute with the specified name. The default implementation simply throws an exception.\n     *\n     * @param attrName the attribute name.\n     * @param value The object to associate with the attribute.\n     * @throws FileSystemException if an error occurs.\n     */\n    @Override\n    public void setAttribute(final String attrName, final Object value) throws FileSystemException {\n        throw new FileSystemException(\"vfs.provider/set-attribute-not-supported.error\");\n    }\n    /**\n     * Returns the parent layer if this is a layered file system.\n     *\n     * @return The FileObject for the parent layer.\n     * @throws FileSystemException if an error occurs.\n     */\n    @Override\n    public FileObject getParentLayer() throws FileSystemException {\n        return parentLayer;\n    }\n    /**\n     * Returns the root file of this file system.\n     *\n     * @return The root FileObject of the FileSystem\n     * @throws FileSystemException if an error occurs.\n     */\n    @Override\n    public FileObject getRoot() throws FileSystemException {\n        return resolveFile(rootName);\n    }\n    /**\n     * Finds a file in this file system.\n     *\n     * @param nameStr The name of the file to resolve.\n     * @return The located FileObject or null if none could be located.\n     * @throws FileSystemException if an error occurs.\n     */<fim_middle>// function below has no smell\n"}