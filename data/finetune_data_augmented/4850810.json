{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.jcr2spi.hierarchy;\n\nimport javax.jcr.InvalidItemStateException;\nimport javax.jcr.ItemNotFoundException;\nimport javax.jcr.RepositoryException;\n\nimport org.apache.jackrabbit.jcr2spi.operation.Operation;\nimport org.apache.jackrabbit.jcr2spi.operation.SetPropertyValue;\nimport org.apache.jackrabbit.jcr2spi.state.ItemState;\nimport org.apache.jackrabbit.jcr2spi.state.PropertyState;\nimport org.apache.jackrabbit.jcr2spi.state.Status;\nimport org.apache.jackrabbit.spi.Name;\nimport org.apache.jackrabbit.spi.Path;\nimport org.apache.jackrabbit.spi.PropertyId;\n\n/**\n * <code>PropertyEntryImpl</code> implements a reference to a property state.\n */\npublic class PropertyEntryImpl extends HierarchyEntryImpl implements PropertyEntry {\n\n    /**\n     * Creates a new <code>PropertyEntryImpl</code>.\n     *\n     * @param parent    the parent <code>NodeEntry</code> where the property\n     *                  belongs to.\n     * @param name      the name of the property.\n     * @param factory\n     */\n    private PropertyEntryImpl(NodeEntryImpl parent, Name name, EntryFactory factory) {\n        super(parent, name, factory);\n    }\n\n    /**\n     * Creates a new <code>PropertyEntry</code>.\n     *\n     * @param parent\n     * @param name\n     * @param factory\n     * @return new <code>PropertyEntry</code>\n     */\n    static PropertyEntry create(NodeEntryImpl parent, Name name, EntryFactory factory) {\n        return new PropertyEntryImpl(parent, name, factory);\n    }\n\n    //------------------------------------------------------< HierarchyEntryImpl >---\n    /**\n     * @see HierarchyEntryImpl#doResolve()\n     * <p>\n     * Returns a <code>PropertyState</code>.\n     */\n    @Override\n    ItemState doResolve() throws ItemNotFoundException, RepositoryException {\n        return getItemStateFactory().createPropertyState(getWorkspaceId(), this);\n    }\n\n    /**\n     * @see HierarchyEntryImpl#buildPath(boolean)\n     */\n<fim_suffix>    @Override\n    Path buildPath(boolean workspacePath) throws RepositoryException {\n        Path parentPath = parent.buildPath(workspacePath);\n        return getPathFactory().create(parentPath, getName(), true);\n    }\n\n    //------------------------------------------------------< PropertyEntry >---\n    /**\n     * @see PropertyEntry#getId()\n     */\n    public PropertyId getId() throws InvalidItemStateException, RepositoryException {\n        return getIdFactory().createPropertyId(parent.getId(), getName());\n    }\n\n    /**\n     * @see PropertyEntry#getWorkspaceId()\n     */\n    public PropertyId getWorkspaceId() throws InvalidItemStateException, RepositoryException {\n        return getIdFactory().createPropertyId(parent.getWorkspaceId(), getName());\n    }\n\n    /**\n     * @see PropertyEntry#getPropertyState()\n     */\n    public PropertyState getPropertyState() throws ItemNotFoundException, RepositoryException {\n        return (PropertyState) getItemState();\n    }\n\n    //-----------------------------------------------------< HierarchyEntry >---\n    /**\n     * Returns false.\n     *\n     * @see HierarchyEntry#denotesNode()\n     */\n    public boolean denotesNode() {\n        return false;\n    }\n\n    /**\n     * @see HierarchyEntry#complete(Operation)\n     */\n    public void complete(Operation operation) throws RepositoryException {\n        if (!(operation instanceof SetPropertyValue)) {\n            throw new IllegalArgumentException();\n        }\n        SetPropertyValue op = (SetPropertyValue) operation;\n        if (op.getPropertyState().getHierarchyEntry() != this) {\n            throw new IllegalArgumentException();\n        }\n        switch (operation.getStatus()) {\n            case Operation.STATUS_PERSISTED:\n                // Property can only be the change log target if it was existing\n                // and has been modified. This includes the case where a property\n                // was changed and then removed by removing its parent. See JCR-2462.\n                // Removal, add and implicit modification of protected\n                // properties must be persisted by save on parent.\n                PropertyState state = op.getPropertyState();\n                if (state.getStatus() != Status.REMOVED) {\n                    state.setStatus(Status.EXISTING);\n                }\n                break;\n            case Operation.STATUS_UNDO:\n                revert();\n                break;\n            default:\n                // ignore\n        }\n    }\n\n}<fim_middle>// function below has no smell\n"}