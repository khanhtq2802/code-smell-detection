{"text": "<fim_prefix>                */\n                public ID getId() {\n                    return (ID) get(\"id\");\n                }\n                /**\n                * The product option\u2019s name.\n                */\n                public String getName() {\n                    return (String) get(\"name\");\n                }\n                public ProductOption setName(String arg) {\n                    optimisticData.put(getKey(\"name\"), arg);\n                    return this;\n                }\n                /**\n                * The corresponding value to the product option name.\n                */\n                public List<String> getValues() {\n                    return (List<String>) get(\"values\");\n                }\n                public ProductOption setValues(List<String> arg) {\n                    optimisticData.put(getKey(\"values\"), arg);\n                    return this;\n                }\n                public boolean unwrapsToObject(String key) {\n                    switch (getFieldName(key)) {\n                        case \"id\": return false;\n                        case \"name\": return false;\n                        case \"values\": return false;\n                        default: return false;\n                    }\n                }\n            }\n            public interface ProductPriceRangeQueryDefinition {\n                void define(ProductPriceRangeQuery _queryBuilder);\n            }\n            /**\n            * The price range of the product.\n            */\n            public static class ProductPriceRangeQuery extends Query<ProductPriceRangeQuery> {\n                ProductPriceRangeQuery(StringBuilder _queryBuilder) {\n                    super(_queryBuilder);\n                }\n                /**\n                * The highest variant's price.\n                */\n                public ProductPriceRangeQuery maxVariantPrice(MoneyV2QueryDefinition queryDef) {\n                    startField(\"maxVariantPrice\");\n                    _queryBuilder.append('{');\n                    queryDef.define(new MoneyV2Query(_queryBuilder));\n                    _queryBuilder.append('}');\n                    return this;\n                }\n                /**\n                * The lowest variant's price.\n                */\n                public ProductPriceRangeQuery minVariantPrice(MoneyV2QueryDefinition queryDef) {\n                    startField(\"minVariantPrice\");\n                    _queryBuilder.append('{');\n                    queryDef.define(new MoneyV2Query(_queryBuilder));\n                    _queryBuilder.append('}');\n                    return this;\n                }\n            }\n            /**\n            * The price range of the product.\n            */\n            public static class ProductPriceRange extends AbstractResponse<ProductPriceRange> {\n                public ProductPriceRange() {\n                }\n                public ProductPriceRange(JsonObject fields) throws SchemaViolationError {\n                    for (Map.Entry<String, JsonElement> field : fields.entrySet()) {\n                        String key = field.getKey();\n                        String fieldName = getFieldName(key);\n                        switch (fieldName) {\n                            case \"maxVariantPrice\": {\n                                responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));\n                                break;\n                            }\n                            case \"minVariantPrice\": {\n                                responseData.put(key, new MoneyV2(jsonAsObject(field.getValue(), key)));\n                                break;\n                            }\n                            case \"__typename\": {\n                                responseData.put(key, jsonAsString(field.getValue(), key));\n                                break;\n                            }\n                            default: {\n                                throw new SchemaViolationError(this, key, field.getValue());\n                            }\n                        }\n                    }\n                }\n                public String getGraphQlTypeName() {\n                    return \"ProductPriceRange\";\n                }\n                /**\n                * The highest variant's price.\n                */\n                public MoneyV2 getMaxVariantPrice() {\n                    return (MoneyV2) get(\"maxVariantPrice\");\n                }\n                public ProductPriceRange setMaxVariantPrice(MoneyV2 arg) {\n                    optimisticData.put(getKey(\"maxVariantPrice\"), arg);\n                    return this;\n                }\n                /**\n                * The lowest variant's price.\n                */\n                public MoneyV2 getMinVariantPrice() {\n                    return (MoneyV2) get(\"minVariantPrice\");\n                }\n                public ProductPriceRange setMinVariantPrice(MoneyV2 arg) {\n                    optimisticData.put(getKey(\"minVariantPrice\"), arg);\n                    return this;\n                }\n                public boolean unwrapsToObject(String key) {\n                    switch (getFieldName(key)) {\n                        case \"maxVariantPrice\": return true;\n                        case \"minVariantPrice\": return true;\n                        default: return false;\n                    }\n                }\n            }\n            /**\n            * The set of valid sort keys for the products query.\n            */\n            public enum ProductSortKeys {\n                /**\n                * Sort by the `best_selling` value.\n                */\n                BEST_SELLING,\n                /**\n                * Sort by the `created_at` value.\n                */\n                CREATED_AT,\n                /**\n                * Sort by the `id` value.\n                */\n                ID,\n                /**\n                * Sort by the `price` value.\n                */\n                PRICE,\n                /**\n                * Sort by the `product_type` value.\n                */\n                PRODUCT_TYPE,\n                /**\n                * During a search (i.e. when the `query` parameter has been specified on the connection) this sorts\n                * the\n                * results by relevance to the search term(s). When no search query is specified, this sort key is not\n                * deterministic and should not be used.\n                */\n                RELEVANCE,\n                /**\n                * Sort by the `title` value.\n                */\n                TITLE,\n                /**\n                * Sort by the `updated_at` value.\n                */\n                UPDATED_AT,\n                /**\n                * Sort by the `vendor` value.\n                */\n                VENDOR,\n                UNKNOWN_VALUE;\n                public static ProductSortKeys fromGraphQl(String value) {\n                    if (value == null) {\n                        return null;\n                    }\n                    switch (value) {\n                        case \"BEST_SELLING\": {\n                            return BEST_SELLING;\n                        }\n                        case \"CREATED_AT\": {\n                            return CREATED_AT;\n                        }\n                        case \"ID\": {\n                            return ID;\n                        }\n                        case \"PRICE\": {\n                            return PRICE;\n                        }\n                        case \"PRODUCT_TYPE\": {\n                            return PRODUCT_TYPE;\n                        }\n                        case \"RELEVANCE\": {\n                            return RELEVANCE;\n                        }\n                        case \"TITLE\": {\n                            return TITLE;\n                        }\n                        case \"UPDATED_AT\": {\n                            return UPDATED_AT;\n                        }\n                        case \"VENDOR\": {\n                            return VENDOR;\n                        }\n                        default: {\n                            return UNKNOWN_VALUE;\n                        }\n                    }\n                }\n                public String toString() {\n                    switch (this) {\n                        case BEST_SELLING: {\n                            return \"BEST_SELLING\";\n                        }\n                        case CREATED_AT: {\n                            return \"CREATED_AT\";\n                        }\n                        case ID: {\n                            return \"ID\";\n                        }\n                        case PRICE: {\n                            return \"PRICE\";\n                        }\n                        case PRODUCT_TYPE: {\n                            return \"PRODUCT_TYPE\";\n                        }\n                        case RELEVANCE: {\n                            return \"RELEVANCE\";\n                        }\n                        case TITLE: {\n                            return \"TITLE\";\n                        }\n                        case UPDATED_AT: {\n                            return \"UPDATED_AT\";\n                        }\n                        case VENDOR: {\n                            return \"VENDOR\";\n                        }\n                        default: {\n                            return \"\";\n                        }\n                    }\n                }\n            }\n            public interface ProductVariantQueryDefinition {\n                void define(ProductVariantQuery _queryBuilder);\n            }\n            /**\n            * A product variant represents a different version of a product, such as differing sizes or differing\n            * colors.\n            */\n            public static class ProductVariantQuery extends Query<ProductVariantQuery> {\n                ProductVariantQuery(StringBuilder _queryBuilder) {\n                    super(_queryBuilder);\n                    startField(\"id\");\n                }\n                /**\n                * Indicates if the product variant is in stock.\n                *\n                * @deprecated Use `availableForSale` instead\n                */\n                @Deprecated\n                public ProductVariantQuery available() {\n                    startField(\"available\");\n                    return this;\n                }\n                /**\n                * Indicates if the product variant is available for sale.\n                */\n                public ProductVariantQuery availableForSale() {\n                    startField(\"availableForSale\");\n                    return this;\n                }\n                /**\n                * The compare at price of the variant. This can be used to mark a variant as on sale, when\n                * `compareAtPrice` is higher than `price`.\n                */\n                public ProductVariantQuery compareAtPrice() {\n                    startField(\"compareAtPrice\");\n                    return this;\n                }\n                public class ImageArguments extends Arguments {\n                    ImageArguments(StringBuilder _queryBuilder) {\n                        super(_queryBuilder, true);\n                    }\n                    /**\n                    * Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on\n                    * `Image.transformedSrc` instead.\n                    */\n                    public ImageArguments maxWidth(Integer value) {\n                        if (value != null) {\n                            startArgument(\"maxWidth\");\n                            _queryBuilder.append(value);\n                        }\n                        return this;\n                    }\n                    /**\n                    * Image height in pixels between 1 and 2048. This argument is deprecated: Use `maxHeight` on\n                    * `Image.transformedSrc` instead.\n                    */\n                    public ImageArguments maxHeight(Integer value) {\n                        if (value != null) {\n                            startArgument(\"maxHeight\");\n                            _queryBuilder.append(value);\n                        }\n                        return this;\n                    }\n                    /**\n                    * Crops the image according to the specified region. This argument is deprecated: Use `crop` on\n                    * `Image.transformedSrc` instead.\n                    */\n<fim_suffix>                    public ImageArguments crop(CropRegion value) {\n                        if (value != null) {\n                            startArgument(\"crop\");\n                            _queryBuilder.append(value.toString());\n                        }\n                        return this;\n                    }<fim_middle>// function below has no smell\n"}