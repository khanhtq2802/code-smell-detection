{"text": "<fim_prefix>/*\n *   Licensed to the Apache Software Foundation (ASF) under one\n *   or more contributor license agreements.  See the NOTICE file\n *   distributed with this work for additional information\n *   regarding copyright ownership.  The ASF licenses this file\n *   to you under the Apache License, Version 2.0 (the\n *   \"License\"); you may not use this file except in compliance\n *   with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing,\n *   software distributed under the License is distributed on an\n *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *   KIND, either express or implied.  See the License for the\n *   specific language governing permissions and limitations\n *   under the License.\n *\n */\npackage org.apache.directory.server.ldap;\n\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.directory.api.ldap.model.csn.Csn;\nimport org.apache.directory.api.ldap.model.message.Request;\nimport org.apache.directory.api.ldap.model.message.Response;\nimport org.apache.directory.api.util.Strings;\nimport org.apache.directory.server.core.api.interceptor.context.OperationContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Utility methods used by the LDAP protocol service.\n *\n * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n */\n<fim_suffix>public final class LdapProtocolUtils\n{\n    /** A delimiter for the replicaId */\n    public static final String COOKIE_DELIM = \",\";\n\n    /** the prefix for replicaId value */\n    public static final String REPLICA_ID_PREFIX = \"rid=\";\n\n    public static final int REPLICA_ID_PREFIX_LEN = REPLICA_ID_PREFIX.length();\n\n    /** the prefix for Csn value */\n    public static final String CSN_PREFIX = \"csn=\";\n\n    private static final int CSN_PREFIX_LEN = CSN_PREFIX.length();\n\n    private static final Logger LOG = LoggerFactory.getLogger( LdapProtocolUtils.class );\n\n\n    private LdapProtocolUtils()\n    {\n    }\n\n\n    /**\n     * Extracts request controls from a request to populate into an\n     * OperationContext.\n     *\n     * @param opContext the context to populate with request controls\n     * @param request the request to extract controls from\n     */\n    public static void setRequestControls( OperationContext opContext, Request request )\n    {\n        if ( request.getControls() != null )\n        {\n            opContext\n                .addRequestControls( request.getControls().values().toArray( LdapProtocolConstants.EMPTY_CONTROLS ) );\n        }\n    }\n\n\n    /**\n     * Extracts response controls from a an OperationContext to populate into\n     * a Response object.\n     *\n     * @param opContext the context to extract controls from\n     * @param response the response to populate with response controls\n     */\n    public static void setResponseControls( OperationContext opContext, Response response )\n    {\n        response.addAllControls( opContext.getResponseControls() );\n    }\n\n\n    public static byte[] createCookie( int replicaId, String csn )\n    {\n        // the syncrepl cookie format (compatible with OpenLDAP)\n        // rid=nn,csn=xxxz\n        String replicaIdStr = StringUtils.leftPad( Integer.toString( replicaId ), 3, '0' );\n        return Strings.getBytesUtf8( REPLICA_ID_PREFIX + replicaIdStr + COOKIE_DELIM + CSN_PREFIX + csn );\n    }\n\n\n    /**\n     * Check the cookie syntax. A cookie must have the following syntax :\n     * { rid={replicaId},csn={CSN} }\n     *\n     * @param cookieString The cookie\n     * @return <tt>true</tt> if the cookie is valid\n     */\n    public static boolean isValidCookie( String cookieString )\n    {\n        if ( ( cookieString == null ) || ( cookieString.trim().length() == 0 ) )\n        {\n            return false;\n        }\n\n        int pos = cookieString.indexOf( COOKIE_DELIM );\n\n        // position should start from REPLICA_ID_PREFIX_LEN or higher cause a cookie can be\n        // like \"rid=0,csn={csn}\" or \"rid=11,csn={csn}\"\n        if ( pos <= REPLICA_ID_PREFIX_LEN )\n        {\n            return false;\n        }\n\n        String replicaId = cookieString.substring( REPLICA_ID_PREFIX_LEN, pos );\n\n        try\n        {\n            Integer.parseInt( replicaId );\n        }\n        catch ( NumberFormatException e )\n        {\n            LOG.debug( \"Failed to parse the replica id {}\", replicaId );\n            return false;\n        }\n\n        if ( pos == cookieString.length() )\n        {\n            return false;\n        }\n\n        String csnString = cookieString.substring( pos + 1 + CSN_PREFIX_LEN );\n\n        return Csn.isValid( csnString );\n    }\n\n\n    /**\n     * returns the CSN present in cookie\n     *\n     * @param cookieString the cookie\n     * @return The CSN\n     */\n    public static String getCsn( String cookieString )\n    {\n        int pos = cookieString.indexOf( COOKIE_DELIM );\n        return cookieString.substring( pos + 1 + CSN_PREFIX_LEN );\n    }\n\n\n    /**\n     * returns the replica id present in cookie\n     *\n     * @param cookieString  the cookie\n     * @return The replica Id\n     */\n    public static int getReplicaId( String cookieString )\n    {\n        String replicaId = cookieString.substring( REPLICA_ID_PREFIX_LEN, cookieString.indexOf( COOKIE_DELIM ) );\n\n        return Integer.parseInt( replicaId );\n    }\n}<fim_middle>// class below is blob\n"}