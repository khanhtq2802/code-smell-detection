{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\npackage org.apache.groovy.json.internal;\n\npublic class Chr {\n\n    public static char[] array(final char... array) {\n        return array;\n    }\n\n    public static char[] chars(final String array) {\n        return array.toCharArray();\n    }\n\n    public static boolean in(char value, char[] array) {\n        for (char currentValue : array) {\n            if (currentValue == value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static boolean in(int value, char[] array) {\n        for (int currentValue : array) {\n            if (currentValue == value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static boolean in(char value, int offset, char[] array) {\n        for (int index = offset; index < array.length; index++) {\n            char currentValue = array[index];\n            if (currentValue == value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static boolean in(char value, int offset, int end, char[] array) {\n        for (int index = offset; index < end; index++) {\n            char currentValue = array[index];\n            if (currentValue == value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static char[] grow(char[] array, final int size) {\n        char[] newArray = new char[array.length + size];\n        arraycopy(array, 0, newArray, 0, array.length);\n        return newArray;\n    }\n\n    public static char[] grow(char[] array) {\n        char[] newArray = new char[array.length * 2];\n        arraycopy(array, 0, newArray, 0, array.length);\n        return newArray;\n    }\n\n    public static char[] copy(char[] array) {\n        char[] newArray = new char[array.length];\n        arraycopy(array, 0, newArray, 0, array.length);\n        return newArray;\n    }\n\n    public static char[] copy(char[] array, int offset, int length) {\n        char[] newArray = new char[length];\n        arraycopy(array, offset, newArray, 0, length);\n        return newArray;\n    }\n\n    public static char[] add(char[] array, char v) {\n        char[] newArray = new char[array.length + 1];\n        arraycopy(array, 0, newArray, 0, array.length);\n        newArray[array.length] = v;\n        return newArray;\n    }\n\n    public static char[] add(char[] array, String str) {\n        return add(array, str.toCharArray());\n    }\n\n<fim_suffix>    public static char[] add(char[] array, StringBuilder stringBuilder) {\n        return add(array, getCharsFromStringBuilder(stringBuilder));\n    }\n\n    public static char[] add(char[] array, char[] array2) {\n        char[] newArray = new char[array.length + array2.length];\n        arraycopy(array, 0, newArray, 0, array.length);\n        arraycopy(array2, 0, newArray, array.length, array2.length);\n        return newArray;\n    }\n\n    /* End universal methods. */\n\n    private static char[] getCharsFromStringBuilder(StringBuilder sbuf) {\n        final int length = sbuf.length();\n        char[] array2 = new char[length];\n        sbuf.getChars(0, length, array2, 0);\n        return array2;\n    }\n\n    public static char[] lpad(final char[] in, final int size, char pad) {\n        if (in.length >= size) {\n            return in;\n        }\n\n        int delta = size - in.length;\n        int index = 0;\n        char[] newArray = new char[size];\n\n        for (; index < delta; index++) {\n            newArray[index] = pad;\n        }\n\n        for (int index2 = 0; index2 < in.length; index++, index2++) {\n            newArray[index] = in[index2];\n        }\n\n        return newArray;\n    }\n\n    public static boolean contains(char[] chars, char c, int start, final int length) {\n        final int to = length + start;\n        for (int index = start; index < to; index++) {\n            char ch = chars[index];\n            if (ch == c) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void _idx(char[] buffer, int location, byte[] chars) {\n        int index2 = 0;\n        int endLocation = (location + chars.length);\n        for (int index = location; index < endLocation; index++, index2++) {\n            buffer[index] = (char) chars[index2];\n        }\n    }\n\n    public static void _idx(final char[] array, int startIndex, char[] input) {\n        try {\n            arraycopy(input, 0, array, startIndex, input.length);\n        } catch (Exception ex) {\n            Exceptions.handle(String.format(\"array size %d, startIndex %d, input length %d\",\n                    array.length, startIndex, input.length), ex);\n        }\n    }\n\n    private static void arraycopy(final char[] src, final int srcPos, final char[] dest, final int destPos, final int length) {\n        System.arraycopy(src, srcPos, dest, destPos, length);\n    }\n\n    public static void _idx(final char[] array, int startIndex, char[] input, final int inputLength) {\n        try {\n            arraycopy(input, 0, array, startIndex, inputLength);\n        } catch (Exception ex) {\n            Exceptions.handle(String.format(\"array size %d, startIndex %d, input length %d\",\n                    array.length, startIndex, input.length), ex);\n        }\n    }\n\n    public static void _idx(char[] buffer, int location, byte[] chars, int start, int end) {\n        int index2 = start;\n        int endLocation = (location + (end - start));\n        for (int index = location; index < endLocation; index++, index2++) {\n            buffer[index] = (char) chars[index2];\n        }\n    }\n\n    public static char[] add(char[]... strings) {\n        int length = 0;\n        for (char[] str : strings) {\n            if (str == null) {\n                continue;\n            }\n            length += str.length;\n        }\n        CharBuf builder = CharBuf.createExact(length);\n        for (char[] str : strings) {\n            if (str == null) {\n                continue;\n            }\n            builder.add(str);\n        }\n        return builder.toCharArray();\n    }\n}<fim_middle>// function below has no smell\n"}