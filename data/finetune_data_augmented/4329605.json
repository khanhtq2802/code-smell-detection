{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License. \n *  \n */\npackage org.apache.directory.kerberos.credentials.cache;\n\n\nimport org.apache.directory.api.util.Base64;\n\n\n/**\n * This is a sample credentials cache generated using MIT KRB5 kinit command.\n * SAMPLE_CACHE_CONTENT is the content of the sample cache encoded in base64.\n * It's not just for unit test, but also for development, so better to maintain it here,\n * instead of just as resource file.\n * \n * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n */\n<fim_suffix>public class SampleCredentialsCacheResource\n{\n    /**\n     * klist\n     * Ticket cache: FILE:/tmp/krb5cc_0\n     * Default principal: apacheds@SH.INTEL.COM\n     *\n     * Valid starting     Expires            Service principal\n     * 09/06/13 01:54:10  09/06/13 11:54:10  krbtgt/SH.INTEL.COM@SH.INTEL.COM\n     * renew until 09/07/13 01:54:07\n     * 09/06/13 01:54:11  09/06/13 11:54:10  host/hadoop-nn.sh.intel.com@SH.INTEL.COM\n     * renew until 09/07/13 01:54:07\n     */\n    private static final String SAMPLE_CACHE_CONTENT = \"BQQADAABAAgAAAAAAAAAAAAAAAEAAAABAAAADFNILklOVEVMLkNPTQAAAAhhcGFjaGVkcwAAAAEA\"\n        +\n        \"AAABAAAADFNILklOVEVMLkNPTQAAAAhhcGFjaGVkcwAAAAIAAAACAAAADFNILklOVEVMLkNPTQAA\" +\n        \"AAZrcmJ0Z3QAAAAMU0guSU5URUwuQ09NAAEAAAAI3H/4OE/NpCpSKGeiUihnolIo9EJSKbkfAEDh\" +\n        \"AAAAAAAAAAAAAAAAAUFhggE9MIIBOaADAgEFoQ4bDFNILklOVEVMLkNPTaIhMB+gAwIBAqEYMBYb\" +\n        \"BmtyYnRndBsMU0guSU5URUwuQ09No4H+MIH7oAMCARehAwIBAaKB7gSB6/v51fFhnp/E2uto2e9I\" +\n        \"9+RUk2grlKW9pYQUc4lAV602hdP6I80s1KU1rNtezbmf8plmxdZ48yogt0KwzAoGoFWCiZk4S1dR\" +\n        \"zzvl/TmNtk9q1gFuVycoP1EvScPYWhdTPAR4/t1Si1DKrYY19eegYmv6PfKoisdAADatLOjqJsVc\" +\n        \"Ntl/cUU4qUJfm181X1b+mguIdAX4jKzWbEc52pYQr8UIDl3TNT8OIzmQC0Wjn93ocOpKwOGsclbN\" +\n        \"OoxSfqpxvARjg+uE5HSm5tX7nUsccjhKMJ76Uy78CEULXkg6ySPYiim5wKVvgwxI7/AAAAAAAAAA\" +\n        \"AQAAAAEAAAAMU0guSU5URUwuQ09NAAAACGFwYWNoZWRzAAAAAAAAAAMAAAAMWC1DQUNIRUNPTkY6\" +\n        \"AAAAFWtyYjVfY2NhY2hlX2NvbmZfZGF0YQAAAApmYXN0X2F2YWlsAAAAIGtyYnRndC9TSC5JTlRF\" +\n        \"TC5DT01AU0guSU5URUwuQ09NAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD\" +\n        \"eWVzAAAAAAAAAAEAAAABAAAADFNILklOVEVMLkNPTQAAAAhhcGFjaGVkcwAAAAMAAAACAAAADFNI\" +\n        \"LklOVEVMLkNPTQAAAARob3N0AAAAFmhhZG9vcC1ubi5zaC5pbnRlbC5jb20AAQAAAAgsx5ub9wI0\" +\n        \"01IoZ6JSKGemUij0QlIpuR8AQKkAAAAAAAAAAAAAAAABX2GCAVswggFXoAMCAQWhDhsMU0guSU5U\" +\n        \"RUwuQ09NoikwJ6ADAgEDoSAwHhsEaG9zdBsWaGFkb29wLW5uLnNoLmludGVsLmNvbaOCARMwggEP\" +\n        \"oAMCARehAwIBB6KCAQEEgf7Z6Xz1bYJ9uE4e2Buyrp2aflcqgVoh9YUVAZyIiqpsrMa71wMuZFUl\" +\n        \"FD+S58Q3T39pZ9vIfXENNoKje1Y5kyImPHC1D/eHIeUN9v5kmDPJP9U31di8dOi3TbHUQWWLbB6k\" +\n        \"+uQE25GAP2hQg0vm5WtU3Fjo0ysXQTMpe+FSwe9ca9V3soPSbDhmlEt8WjAY05iXD8Fe6o/aY/PJ\" +\n        \"nElmCwQayRT87vENJI9LeMVEzhIjxBmg124G4nGnjUCaf++G03kJ04mLFZDB9kS8sA7V8AT1IF00\" +\n        \"ehpt7c9KbUM1Iz/S3Ni5hq8IfdOTSWMjGdNIsUMhJmivYFzQ0PRBzSBxbAAAAAA=\";\n\n    private static final String SAMPLE_PRINCIPAL = \"apacheds\";\n    private static final String SAMPLE_REALM = \"SH.INTEL.COM\";\n    private static final String[] SAMPLE_SERVERS = new String[]\n        { \"krbtgt/SH.INTEL.COM\", \"host/hadoop-nn.sh.intel.com\" };\n\n\n    public static byte[] getCacheContent()\n    {\n        return Base64.decode( SampleCredentialsCacheResource.SAMPLE_CACHE_CONTENT.toCharArray() );\n    }\n\n\n    /**\n     * @return the primary principal name contained in the sample cache\n     */\n    public static String getSamplePrincipal()\n    {\n        return SAMPLE_PRINCIPAL;\n    }\n\n\n    /**\n     * @return the realm contained in the sample cache\n     */\n    public static String getSampleRealm()\n    {\n        return SAMPLE_REALM;\n    }\n\n\n    /**\n     * Get the servers in the tickets contained in the sample cache\n     * \n     * @return The sample servers\n     */\n    public static String[] getSampleServers()\n    {\n        return SAMPLE_SERVERS;\n    }\n\n\n    /**\n     * Get the tickets count in the sample cache\n     * \n     * @return Always 2\n     */\n    public static int getSampleTicketsCount()\n    {\n        return 2;\n    }\n}<fim_middle>// class below has no smell\n"}