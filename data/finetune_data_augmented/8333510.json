{"text": "<fim_prefix>\t\tsuper(Constants.ATTR_MODULE, nameIndex, length, cp);\n\t}\n\tModule(int nameIndex, int length, DataInputStream stream, ConstantPool cp) throws IOException {\n\t\tthis(nameIndex, length, (byte[])null, cp);\n\t\tmoduleInfo = new byte[length];\n\t\tstream.read(moduleInfo);\n\t\tunpacked = false;\n\t}\n\tpublic class Require {\n\t\tprivate final int moduleIndex;\n\t\tprivate final int flags;\n\t\tprivate final int versionIndex;\n\t\tpublic Require(int moduleIndex, int flags, int versionIndex) {\n\t\t\tthis.moduleIndex = moduleIndex;\n\t\t\tthis.flags = flags;\n\t\t\tthis.versionIndex = versionIndex;\n\t\t}\n\t\tpublic String getModuleName() {\n\t\t\treturn cpool.getModuleName(moduleIndex);\n\t\t}\n\t\tpublic int getFlags() {\n\t\t\treturn flags;\n\t\t}\n\t\tpublic int getVersionIndex() {\n\t\t\treturn versionIndex;\n\t\t}\n\t\tpublic String getVersionString() {\n\t\t\tif (versionIndex == 0) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn cpool.getConstantUtf8(versionIndex).getValue();\n\t\t\t}\n\t\t}\n\t\tpublic String getFlagsAsString() {\n\t\t\tStringBuilder s = new StringBuilder();\n\t\t\tif ((flags & Constants.MODULE_ACC_TRANSITIVE)!=0) {\n\t\t\t\ts.append(\" transitive\");\n\t\t\t}\n\t\t\tif ((flags & Constants.MODULE_ACC_STATIC_PHASE)!=0) {\n\t\t\t\ts.append(\" static\");\n\t\t\t}\n\t\t\tif ((flags & Constants.MODULE_ACC_SYNTHETIC)!=0) {\n\t\t\t\ts.append(\" synthetic\");\n\t\t\t}\n\t\t\tif ((flags & Constants.MODULE_ACC_MANDATED)!=0) {\n\t\t\t\ts.append(\" mandated\");\n\t\t\t}\n\t\t\treturn s.toString();\n\t\t}\n\t\tpublic String toString() {\n\t\t\treturn \"requires\"+getFlagsAsString()+\" \"+getModuleName()+(versionIndex==0?\"\":\" \"+getVersionString());\n\t\t}\n\t}\n\tpublic class Export {\n\t\tprivate final int packageIndex;\n\t\tprivate final int flags;\n\t\tprivate final int[] toModuleIndices;\n\t\tpublic Export(int packageIndex, int flags, int[] toModuleIndices) {\n\t\t\tthis.packageIndex = packageIndex;\n\t\t\tthis.flags = flags;\n\t\t\tthis.toModuleIndices = toModuleIndices;\n\t\t}\n\t\tpublic int getPackageIndex() {\n\t\t\treturn packageIndex;\n\t\t}\n\t\tpublic int getFlags() {\n\t\t\treturn flags;\n\t\t}\n\t\tpublic int[] getToModuleIndices() {\n\t\t\treturn toModuleIndices;\n\t\t}\n\t\tpublic String getPackage() {\n\t\t\treturn cpool.getPackageName(packageIndex);\n\t\t}\t\t\n\t\tpublic String getFlagsAsString() {\n\t\t\tStringBuilder s = new StringBuilder();\n\t\t\tif ((flags & Constants.MODULE_ACC_SYNTHETIC)!=0) {\n\t\t\t\ts.append(\" synthetic\");\n\t\t\t}\n\t\t\tif ((flags & Constants.MODULE_ACC_MANDATED)!=0) {\n\t\t\t\ts.append(\" synthetic\");\n\t\t\t}\n\t\t\treturn s.toString();\n\t\t}\n\t\tpublic String[] getToModuleNames() {\n\t\t\tif (toModuleIndices==null) {\n\t\t\t\treturn NO_MODULE_NAMES;\n\t\t\t}\n\t\t\tString[] toModuleNames = new String[toModuleIndices.length];\n\t\t\tfor (int i=0;i<toModuleIndices.length;i++) {\n\t\t\t\ttoModuleNames[i] = cpool.getModuleName(toModuleIndices[i]);\n\t\t\t}\n\t\t\treturn toModuleNames;\n\t\t}\n\t\tpublic String toString() {\n\t\t\tStringBuilder s =new StringBuilder();\n\t\t\ts.append(\"exports\").append(getFlagsAsString()).append(\" \").append(getPackage().replace('/', '.'));\n\t\t\tString[] toModules = getToModuleNames();\n\t\t\tif (toModules.length!=0) {\n\t\t\t\ts.append(\" to \");\n\t\t\t\tfor (int i=0;i<toModules.length;i++) {\n\t\t\t\t\tif (i>0) {\n\t\t\t\t\t\ts.append(\", \");\n\t\t\t\t\t}\n\t\t\t\t\ts.append(toModules[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s.toString().trim();\n\t\t}\n\t}\n\tpublic class Open {\n\t\tprivate final int packageIndex;\n\t\tprivate final int flags;\n\t\tprivate final int[] toModuleIndices;\n\t\tpublic Open(int packageIndex, int flags, int[] toModuleIndices) {\n\t\t\tthis.packageIndex = packageIndex;\n\t\t\tthis.flags = flags;\n\t\t\tthis.toModuleIndices = toModuleIndices;\n\t\t}\n\t\tpublic int getPackageIndex() {\n\t\t\treturn packageIndex;\n\t\t}\n\t\tpublic int getFlags() {\n\t\t\treturn flags;\n\t\t}\n\t\tpublic int[] getToModuleIndices() {\n\t\t\treturn toModuleIndices;\n\t\t}\n\t\tpublic String getPackage() {\n\t\t\treturn cpool.getPackageName(packageIndex);\n\t\t}\t\t\n\t\tpublic String getFlagsAsString() {\n\t\t\tStringBuilder s = new StringBuilder();\n\t\t\tif ((flags & Constants.MODULE_ACC_SYNTHETIC)!=0) {\n\t\t\t\ts.append(\" synthetic\");\n\t\t\t}\n\t\t\tif ((flags & Constants.MODULE_ACC_MANDATED)!=0) {\n\t\t\t\ts.append(\" synthetic\");\n\t\t\t}\n\t\t\treturn s.toString();\n\t\t}\n\t\tpublic String[] getToModuleNames() {\n\t\t\tif (toModuleIndices==null) {\n\t\t\t\treturn NO_MODULE_NAMES;\n\t\t\t}\n\t\t\tString[] toModuleNames = new String[toModuleIndices.length];\n\t\t\tfor (int i=0;i<toModuleIndices.length;i++) {\n\t\t\t\ttoModuleNames[i] = cpool.getModuleName(toModuleIndices[i]);\n\t\t\t}\n\t\t\treturn toModuleNames;\n\t\t}\n\t\tpublic String toString() {\n\t\t\tStringBuilder s =new StringBuilder();\n\t\t\ts.append(\"opens\").append(getFlagsAsString()).append(\" \").append(getPackage().replace('/', '.'));\n\t\t\tString[] toModules = getToModuleNames();\n\t\t\tif (toModules.length!=0) {\n\t\t\t\ts.append(\" to \");\n\t\t\t\tfor (int i=0;i<toModules.length;i++) {\n\t\t\t\t\tif (i>0) {\n\t\t\t\t\t\ts.append(\", \");\n\t\t\t\t\t}\n\t\t\t\t\ts.append(toModules[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s.toString().trim();\n\t\t}\n\t}\n\tpublic class Provide {\n\t\tprivate final int providedTypeIndex;\n\t\tprivate final int[] withTypeIndices;\n\t\tpublic Provide(int providedTypeIndex, int[] withTypeIndices) {\n\t\t\tthis.providedTypeIndex = providedTypeIndex;\n\t\t\tthis.withTypeIndices = withTypeIndices;\n\t\t}\n\t\tpublic String getProvidedType() {\n\t\t\treturn cpool.getConstantString_CONSTANTClass(providedTypeIndex);\n\t\t}\n\t\tpublic int getProvidedTypeIndex() {\n\t\t\treturn providedTypeIndex;\n\t\t}\n\t\tpublic String[] getWithTypeStrings() {\n\t\t\tString[] result = new String[withTypeIndices.length];\n\t\t\tfor (int i=0;i<withTypeIndices.length;i++) {\n\t\t\t\tresult[i] = cpool.getConstantString_CONSTANTClass(withTypeIndices[i]);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\tpublic int[] getWithTypeIndices() {\n\t\t\treturn withTypeIndices;\n\t\t}\n\t\tpublic String toString() {\n\t\t\tStringBuilder s =new StringBuilder();\n\t\t\ts.append(\"provides \").append(getProvidedType().replace('/', '.'));\n\t\t\ts.append(\" with \");\n\t\t\tString[] withtypes = getWithTypeStrings();\n\t\t\tfor (int i=0;i< withtypes.length;i++) {\n\t\t\t\tif (i>0) s.append(\",\");\n\t\t\t\ts.append(withtypes[i].replace('/','.'));\n\t\t\t}\n\t\t\treturn s.toString();\n\t\t}\n\t}\n<fim_suffix>\tpublic class Uses {\n\t\tprivate final int typeNameIndex;\n\t\tpublic Uses(int typeNameIndex) {\n\t\t\tthis.typeNameIndex = typeNameIndex;\n\t\t}\n\t\tpublic String getTypeName() {\n\t\t\treturn  cpool.getConstantString_CONSTANTClass(typeNameIndex);\n\t\t}\n\t\tpublic int getTypeNameIndex() {\n\t\t\treturn typeNameIndex;\n\t\t}\n\t\tpublic String toString() {\n\t\t\tStringBuilder s =new StringBuilder();\n\t\t\ts.append(\"uses \").append(getTypeName().replace('/', '.'));\n\t\t\treturn s.toString().trim();\n\t\t}\n\t}<fim_middle>// class below is data class\n"}