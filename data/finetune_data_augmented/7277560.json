{"text": "<fim_prefix>package com.sap.olingo.jpa.processor.core.serializer;\n\nimport java.util.List;\n\nimport org.apache.olingo.commons.api.data.Annotatable;\nimport org.apache.olingo.commons.api.data.ComplexValue;\nimport org.apache.olingo.commons.api.data.ContextURL;\nimport org.apache.olingo.commons.api.data.EntityCollection;\nimport org.apache.olingo.commons.api.data.Property;\nimport org.apache.olingo.commons.api.edm.EdmComplexType;\nimport org.apache.olingo.commons.api.edm.EdmEntitySet;\nimport org.apache.olingo.commons.api.edm.EdmType;\nimport org.apache.olingo.commons.api.format.ContentType;\nimport org.apache.olingo.server.api.ODataRequest;\nimport org.apache.olingo.server.api.ServiceMetadata;\nimport org.apache.olingo.server.api.serializer.ComplexSerializerOptions;\nimport org.apache.olingo.server.api.serializer.ODataSerializer;\nimport org.apache.olingo.server.api.serializer.SerializerException;\nimport org.apache.olingo.server.api.serializer.SerializerResult;\nimport org.apache.olingo.server.api.uri.UriHelper;\nimport org.apache.olingo.server.api.uri.UriInfo;\nimport org.apache.olingo.server.api.uri.UriResource;\nimport org.apache.olingo.server.api.uri.UriResourceEntitySet;\nimport org.apache.olingo.server.api.uri.UriResourceKind;\nimport org.apache.olingo.server.api.uri.UriResourceNavigation;\nimport org.apache.olingo.server.api.uri.UriResourceProperty;\n\nimport com.sap.olingo.jpa.processor.core.exception.ODataJPASerializerException;\nimport com.sap.olingo.jpa.processor.core.query.Util;\n\n<fim_suffix>final class JPASerializeComplex implements JPAOperationSerializer {\n  private final ServiceMetadata serviceMetadata;\n  private final UriInfo uriInfo;\n  private final UriHelper uriHelper;\n  private final ODataSerializer serializer;\n  private final ContentType responseFormat;\n\n  JPASerializeComplex(final ServiceMetadata serviceMetadata, final ODataSerializer serializer,\n      final UriHelper uriHelper, final UriInfo uriInfo, final ContentType responseFormat) {\n\n    this.uriInfo = uriInfo;\n    this.serializer = serializer;\n    this.serviceMetadata = serviceMetadata;\n    this.uriHelper = uriHelper;\n    this.responseFormat = responseFormat;\n  }\n\n  @Override\n  public SerializerResult serialize(final ODataRequest request, final EntityCollection result)\n      throws SerializerException {\n\n    final EdmEntitySet targetEdmEntitySet = Util.determineTargetEntitySet(uriInfo.getUriResourceParts());\n    final List<UriResource> resourceParts = uriInfo.getUriResourceParts();\n    final UriResourceProperty uriProperty = (UriResourceProperty) resourceParts.get(resourceParts.size() - 1);\n    final EdmComplexType edmPropertyType = (EdmComplexType) uriProperty.getProperty().getType();\n\n    final String selectList = uriHelper.buildContextURLSelectList(targetEdmEntitySet.getEntityType(),\n        uriInfo.getExpandOption(), uriInfo.getSelectOption());\n\n    final ContextURL contextUrl = ContextURL.with()\n        .entitySet(targetEdmEntitySet)\n        .navOrPropertyPath(Util.determineProptertyNavigationPath(uriInfo.getUriResourceParts()))\n        .selectList(selectList)\n        .build();\n    final ComplexSerializerOptions options = ComplexSerializerOptions.with()\n        .contextURL(contextUrl)\n        .select(uriInfo.getSelectOption())\n        .expand(uriInfo.getExpandOption())\n        .build();\n\n    if (uriProperty.getProperty().isCollection()) {\n      return serializer.complexCollection(serviceMetadata, edmPropertyType, determineProperty(targetEdmEntitySet,\n          result), options);\n    } else {\n      return serializer.complex(serviceMetadata, edmPropertyType, determineProperty(targetEdmEntitySet, result),\n          options);\n    }\n  }\n\n  @Override\n  public SerializerResult serialize(Annotatable result, EdmType complexType) throws SerializerException,\n      ODataJPASerializerException {\n\n    final ContextURL contextUrl = ContextURL.with().build();\n    final ComplexSerializerOptions options = ComplexSerializerOptions.with().contextURL(contextUrl).build();\n\n    return serializer.complex(serviceMetadata, (EdmComplexType) complexType, (Property) result,\n        options);\n  }\n\n  @Override\n  public ContentType getContentType() {\n    return responseFormat;\n  }\n\n  private Property determineProperty(final EdmEntitySet targetEdmEntitySet, final EntityCollection result) {\n    UriResourceProperty uriProperty = null;\n    Property property = null;\n\n    boolean found = false;\n    List<Property> properties = result.getEntities().get(0).getProperties();\n\n    for (UriResource hop : uriInfo.getUriResourceParts()) {\n      if (hop.getKind().equals(UriResourceKind.entitySet)\n          && ((UriResourceEntitySet) hop).getEntitySet() == targetEdmEntitySet\n          || hop.getKind().equals(UriResourceKind.navigationProperty)\n              && ((UriResourceNavigation) hop).getType() == targetEdmEntitySet.getEntityType())\n        found = true;\n      if (found && hop.getKind().equals(UriResourceKind.complexProperty)) {\n        uriProperty = (UriResourceProperty) hop;\n        property = getProperty(uriProperty.getProperty().getName(), properties);\n        if (!uriProperty.isCollection() && property != null)// Here it is assumed that the collection is the last hop\n                                                            // anyhow\n          properties = ((ComplexValue) property.getValue()).getValue();\n      }\n    }\n    return property;\n  }\n\n  private Property getProperty(final String name, final List<Property> properties) {\n    for (Property p : properties)\n      if (p.getName().equals(name) && p.isComplex())\n        return p;\n    return null;\n  }\n\n}<fim_middle>// class below has no smell\n"}