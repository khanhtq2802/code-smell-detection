{"text": "<fim_prefix>/*\n * Copyright 2010-2014 Amazon Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at:\n *\n *    http://aws.amazon.com/apache2.0\n *\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.amazonaws.eclipse.core.preferences;\n\nimport java.util.List;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.core.runtime.IStatus;\nimport org.eclipse.core.runtime.Status;\nimport org.eclipse.core.runtime.jobs.Job;\nimport org.eclipse.jface.util.IPropertyChangeListener;\nimport org.eclipse.jface.util.PropertyChangeEvent;\n\nimport com.amazonaws.eclipse.core.AwsToolkitCore;\n\n/**\n * Abstract base class for monitors for changes on a set of preference properties and\n * notifying listeners.\n */\n<fim_suffix>public abstract class AbstractPreferencePropertyMonitor implements IPropertyChangeListener {\n\n    private List<PreferencePropertyChangeListener> listeners = new CopyOnWriteArrayList<>();\n\n    private final long notificationDelay;\n    private NotifyListenersJob job = null;\n\n    /**\n     * Create a preference monitor with the given notification delay\n     * \n     * @param notificationDelay\n     *            If it's a positive value, then all notifications on the\n     *            registered listeners will be executed asynchronously after the\n     *            specified delay. Otherwise, the notification happens\n     *            synchronously right after change events\n     */\n    public AbstractPreferencePropertyMonitor(long notificationDelay) {\n        this.notificationDelay = notificationDelay;\n        if (notificationDelay > 0) {\n            job = new NotifyListenersJob();\n        }\n    }\n\n    /**\n     * Override this method to determine whether changes to the given preference\n     * key should be watched by this monitor.\n     */\n    protected abstract boolean watchPreferenceProperty(String preferenceKey);\n\n    public void addChangeListener(PreferencePropertyChangeListener listener) {\n        listeners.add(listener);\n    }\n\n    public void removeChangeListener(PreferencePropertyChangeListener listener) {\n        listeners.remove(listener);\n    }\n\n    @Override\n    public void propertyChange(PropertyChangeEvent event) {\n        String property = event.getProperty();\n\n        if (watchPreferenceProperty(property)) {\n            if (job == null) {\n                notifyListeners();\n            } else {\n                job.schedule(notificationDelay);\n            }\n        }\n    }\n    \n    private void notifyListeners() {\n        for ( PreferencePropertyChangeListener listener : listeners ) {\n            try {\n                listener.watchedPropertyChanged();\n            } catch ( Exception e ) {\n                AwsToolkitCore.getDefault().logError(\n                        \"Couldn't notify listener of preferece property change: \" + listener.getClass(), e);\n            }\n        }\n    }\n    \n    private final class NotifyListenersJob extends Job {\n        private NotifyListenersJob() {\n            super(\"AWS preference property update\");\n            this.setSystem(true);\n        }\n\n        @Override\n        protected IStatus run(IProgressMonitor monitor) {\n            AbstractPreferencePropertyMonitor.this.notifyListeners();\n            return Status.OK_STATUS;\n        }\n    }\n}<fim_middle>// class below has no smell\n"}