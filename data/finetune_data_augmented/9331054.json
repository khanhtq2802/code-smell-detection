{"text": "<fim_prefix>/*\n * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.\n */\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.sun.org.apache.bcel.internal.classfile;\n\nimport java.io.DataInput;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\n\nimport com.sun.org.apache.bcel.internal.Const;\n\n/**\n * This class is derived from the abstract {@link Constant}\n * and represents a reference to an int object.\n *\n * @version $Id: ConstantInteger.java 1747278 2016-06-07 17:28:43Z britter $\n * @see     Constant\n */\n<fim_suffix>public final class ConstantInteger extends Constant implements ConstantObject {\n\n    private int bytes;\n\n\n    /**\n     * @param bytes Data\n     */\n    public ConstantInteger(final int bytes) {\n        super(Const.CONSTANT_Integer);\n        this.bytes = bytes;\n    }\n\n\n    /**\n     * Initialize from another object.\n     */\n    public ConstantInteger(final ConstantInteger c) {\n        this(c.getBytes());\n    }\n\n\n    /**\n     * Initialize instance from file data.\n     *\n     * @param file Input stream\n     * @throws IOException\n     */\n    ConstantInteger(final DataInput file) throws IOException {\n        this(file.readInt());\n    }\n\n\n    /**\n     * Called by objects that are traversing the nodes of the tree implicitely\n     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n     * fields, attributes, etc. spawns a tree of objects.\n     *\n     * @param v Visitor object\n     */\n    @Override\n    public void accept( final Visitor v ) {\n        v.visitConstantInteger(this);\n    }\n\n\n    /**\n     * Dump constant integer to file stream in binary format.\n     *\n     * @param file Output file stream\n     * @throws IOException\n     */\n    @Override\n    public final void dump( final DataOutputStream file ) throws IOException {\n        file.writeByte(super.getTag());\n        file.writeInt(bytes);\n    }\n\n\n    /**\n     * @return data, i.e., 4 bytes.\n     */\n    public final int getBytes() {\n        return bytes;\n    }\n\n\n    /**\n     * @param bytes the raw bytes that represent this integer\n     */\n    public final void setBytes( final int bytes ) {\n        this.bytes = bytes;\n    }\n\n\n    /**\n     * @return String representation.\n     */\n    @Override\n    public final String toString() {\n        return super.toString() + \"(bytes = \" + bytes + \")\";\n    }\n\n\n    /** @return Integer object\n     */\n    @Override\n    public Object getConstantValue( final ConstantPool cp ) {\n        return Integer.valueOf(bytes);\n    }\n}<fim_middle>// class below has no smell\n"}