{"text": "<fim_prefix>   * Linux or <code>%key%</code> on Windows.\n   * \n   * Example:\n   * <ul>\n   *   <li> A=foo - This will set the env variable A to foo. </li>\n   * </ul>\n   *\n   * You can also add environment variables individually by appending\n   * <code>.VARNAME</code> to this configuration key, where VARNAME is\n   * the name of the environment variable.\n   *\n   * Example:\n   * <ul>\n   *   <li>mapreduce.map.env.VARNAME=value</li>\n   * </ul>\n   */\n  public static final String MAPRED_MAP_TASK_ENV = JobContext.MAP_ENV;\n  /**\n   * Configuration key to set the environment of the child reduce tasks.\n   * \n   * The format of the value is <code>k1=v1,k2=v2</code>. Further it can \n   * reference existing environment variables via <code>$key</code> on\n   * Linux or <code>%key%</code> on Windows.\n   * \n   * Example:\n   * <ul>\n   *   <li> A=foo - This will set the env variable A to foo. </li>\n   * </ul>\n   *\n   * You can also add environment variables individually by appending\n   * <code>.VARNAME</code> to this configuration key, where VARNAME is\n   * the name of the environment variable.\n   *\n   * Example:\n   * <ul>\n   *   <li>mapreduce.reduce.env.VARNAME=value</li>\n   * </ul>\n   */\n  public static final String MAPRED_REDUCE_TASK_ENV = JobContext.REDUCE_ENV;\n  private Credentials credentials = new Credentials();\n  /**\n   * Configuration key to set the logging level for the map task.\n   *\n   * The allowed logging levels are:\n   * OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE and ALL.\n   */\n  public static final String MAPRED_MAP_TASK_LOG_LEVEL = \n    JobContext.MAP_LOG_LEVEL;\n  /**\n   * Configuration key to set the logging level for the reduce task.\n   *\n   * The allowed logging levels are:\n   * OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE and ALL.\n   */\n  public static final String MAPRED_REDUCE_TASK_LOG_LEVEL = \n    JobContext.REDUCE_LOG_LEVEL;\n  /**\n   * Default logging level for map/reduce tasks.\n   */\n  public static final String DEFAULT_LOG_LEVEL = JobContext.DEFAULT_LOG_LEVEL;\n  /**\n   * The variable is kept for M/R 1.x applications, M/R 2.x applications should\n   * use {@link MRJobConfig#WORKFLOW_ID} instead\n   */\n  @Deprecated\n  public static final String WORKFLOW_ID = MRJobConfig.WORKFLOW_ID;\n  /**\n   * The variable is kept for M/R 1.x applications, M/R 2.x applications should\n   * use {@link MRJobConfig#WORKFLOW_NAME} instead\n   */\n  @Deprecated\n  public static final String WORKFLOW_NAME = MRJobConfig.WORKFLOW_NAME;\n  /**\n   * The variable is kept for M/R 1.x applications, M/R 2.x applications should\n   * use {@link MRJobConfig#WORKFLOW_NODE_NAME} instead\n   */\n  @Deprecated\n  public static final String WORKFLOW_NODE_NAME =\n      MRJobConfig.WORKFLOW_NODE_NAME;\n  /**\n   * The variable is kept for M/R 1.x applications, M/R 2.x applications should\n   * use {@link MRJobConfig#WORKFLOW_ADJACENCY_PREFIX_STRING} instead\n   */\n  @Deprecated\n  public static final String WORKFLOW_ADJACENCY_PREFIX_STRING =\n      MRJobConfig.WORKFLOW_ADJACENCY_PREFIX_STRING;\n  /**\n   * The variable is kept for M/R 1.x applications, M/R 2.x applications should\n   * use {@link MRJobConfig#WORKFLOW_ADJACENCY_PREFIX_PATTERN} instead\n   */\n  @Deprecated\n  public static final String WORKFLOW_ADJACENCY_PREFIX_PATTERN =\n      MRJobConfig.WORKFLOW_ADJACENCY_PREFIX_PATTERN;\n  /**\n   * The variable is kept for M/R 1.x applications, M/R 2.x applications should\n   * use {@link MRJobConfig#WORKFLOW_TAGS} instead\n   */\n  @Deprecated\n  public static final String WORKFLOW_TAGS = MRJobConfig.WORKFLOW_TAGS;\n  /**\n   * The variable is kept for M/R 1.x applications, M/R 2.x applications should\n   * not use it\n   */\n  @Deprecated\n  public static final String MAPREDUCE_RECOVER_JOB =\n      \"mapreduce.job.restart.recover\";\n  /**\n   * The variable is kept for M/R 1.x applications, M/R 2.x applications should\n   * not use it\n   */\n  @Deprecated\n  public static final boolean DEFAULT_MAPREDUCE_RECOVER_JOB = true;\n  /**\n   * Construct a map/reduce job configuration.\n   */\n  public JobConf() {\n    checkAndWarnDeprecation();\n  }\n  /** \n   * Construct a map/reduce job configuration.\n   * \n   * @param exampleClass a class whose containing jar is used as the job's jar.\n   */\n  public JobConf(Class exampleClass) {\n    setJarByClass(exampleClass);\n    checkAndWarnDeprecation();\n  }\n  /**\n   * Construct a map/reduce job configuration.\n   * \n   * @param conf a Configuration whose settings will be inherited.\n   */\n  public JobConf(Configuration conf) {\n    super(conf);\n    if (conf instanceof JobConf) {\n      JobConf that = (JobConf)conf;\n      credentials = that.credentials;\n    }\n    checkAndWarnDeprecation();\n  }\n  /** Construct a map/reduce job configuration.\n   * \n   * @param conf a Configuration whose settings will be inherited.\n   * @param exampleClass a class whose containing jar is used as the job's jar.\n   */\n  public JobConf(Configuration conf, Class exampleClass) {\n    this(conf);\n    setJarByClass(exampleClass);\n  }\n  /** Construct a map/reduce configuration.\n   *\n   * @param config a Configuration-format XML job description file.\n   */\n  public JobConf(String config) {\n    this(new Path(config));\n  }\n  /** Construct a map/reduce configuration.\n   *\n   * @param config a Configuration-format XML job description file.\n   */\n  public JobConf(Path config) {\n    super();\n    addResource(config);\n    checkAndWarnDeprecation();\n  }\n  /** A new map/reduce configuration where the behavior of reading from the\n   * default resources can be turned off.\n   * <p>\n   * If the parameter {@code loadDefaults} is false, the new instance\n   * will not load resources from the default files.\n   *\n   * @param loadDefaults specifies whether to load from the default files\n   */\n  public JobConf(boolean loadDefaults) {\n    super(loadDefaults);\n    checkAndWarnDeprecation();\n  }\n  /**\n   * Get credentials for the job.\n   * @return credentials for the job\n   */\n  public Credentials getCredentials() {\n    return credentials;\n  }\n  @Private\n  public void setCredentials(Credentials credentials) {\n    this.credentials = credentials;\n  }\n  /**\n   * Get the user jar for the map-reduce job.\n   * \n   * @return the user jar for the map-reduce job.\n   */\n  public String getJar() { return get(JobContext.JAR); }\n  /**\n   * Set the user jar for the map-reduce job.\n   * \n   * @param jar the user jar for the map-reduce job.\n   */\n  public void setJar(String jar) { set(JobContext.JAR, jar); }\n  /**\n   * Get the pattern for jar contents to unpack on the tasktracker\n   */\n  public Pattern getJarUnpackPattern() {\n    return getPattern(JobContext.JAR_UNPACK_PATTERN, UNPACK_JAR_PATTERN_DEFAULT);\n  }\n  /**\n   * Set the job's jar file by finding an example class location.\n   * \n   * @param cls the example class.\n   */\n  public void setJarByClass(Class cls) {\n    String jar = ClassUtil.findContainingJar(cls);\n    if (jar != null) {\n      setJar(jar);\n    }   \n  }\n  public String[] getLocalDirs() throws IOException {\n    return getTrimmedStrings(MRConfig.LOCAL_DIR);\n  }\n  /**\n   * Use MRAsyncDiskService.moveAndDeleteAllVolumes instead.\n   */\n  @Deprecated\n  public void deleteLocalFiles() throws IOException {\n    String[] localDirs = getLocalDirs();\n    for (int i = 0; i < localDirs.length; i++) {\n      FileSystem.getLocal(this).delete(new Path(localDirs[i]), true);\n    }\n  }\n<fim_suffix>  public void deleteLocalFiles(String subdir) throws IOException {\n    String[] localDirs = getLocalDirs();\n    for (int i = 0; i < localDirs.length; i++) {\n      FileSystem.getLocal(this).delete(new Path(localDirs[i], subdir), true);\n    }\n  }<fim_middle>// function below has no smell\n"}