{"text": "<fim_prefix>/**\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License. \n *  \n */\npackage org.apache.kerby.asn1.type;\n\nimport org.apache.kerby.asn1.UniversalTag;\nimport org.apache.kerby.asn1.parse.Asn1ParseResult;\n\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\n\n/**\n * To represent Asn1 End Of Content type\n */\npublic final class Asn1Eoc extends Asn1Simple<Object> {\n    public static final Asn1Eoc INSTANCE = new Asn1Eoc();\n    private static final byte[]  EMPTY_BYTES = new byte[0];\n\n    private Asn1Eoc() {\n        super(UniversalTag.EOC, null);\n    }\n\n    @Override\n    public void encode(ByteBuffer buffer) {\n        buffer.put((byte) 0);\n        buffer.put((byte) 0);\n    }\n\n    @Override\n    protected byte[] encodeBody() {\n        return EMPTY_BYTES;\n    }\n\n    @Override\n    protected int encodingBodyLength() {\n        return 0;\n    }\n\n    @Override\n    protected void decodeBody(Asn1ParseResult parseResult) throws IOException {\n        if (parseResult.getBodyLength() != 0) {\n            throw new IOException(\"Unexpected bytes found for EOC\");\n        }\n    }\n\n<fim_suffix>    @Override\n    public String toString() {\n        String typeStr = tag().typeStr() + \" [\"\n            + \"tag=\" + tag()\n            + \", len=\" + getHeaderLength() + \"+\" + getBodyLength()\n            + \"] \";\n        return typeStr + \"eoc\";\n    }\n}<fim_middle>// function below has no smell\n"}