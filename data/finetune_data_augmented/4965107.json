{"text": "<fim_prefix>// ***************************************************************************************************************************\n// * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file *\n// * distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file        *\n// * to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance            *\n// * with the License.  You may obtain a copy of the License at                                                              *\n// *                                                                                                                         *\n// *  http://www.apache.org/licenses/LICENSE-2.0                                                                             *\n// *                                                                                                                         *\n// * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an  *\n// * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the        *\n// * specific language governing permissions and limitations under the License.                                              *\n// ***************************************************************************************************************************\npackage org.apache.juneau.jena;\n\nimport java.util.*;\n\nimport org.apache.juneau.*;\nimport org.apache.juneau.jena.annotation.*;\nimport org.apache.juneau.xml.*;\n\n/**\n * Utility classes.\n */\n<fim_suffix>public class RdfUtils {\n\n\t/**\n\t * Find the namespace given a list of <ja>@Rdf</ja> and <ja>@RdfSchema</ja> annotations.\n\t *\n\t * <p>\n\t * The annotations should be a child-to-parent ordering of annotations found on a class or method.\n\t *\n\t * @param rdfs The <code>@Rdf</code> annotations to search.\n\t * @param schemas The list of known RDF schemas.\n\t * @return The resolved namespace, or <jk>null</jk> if the namespace could not be resolved.\n\t */\n\tpublic static Namespace findNamespace(List<Rdf> rdfs, List<RdfSchema> schemas) {\n\n\t\tfor (Rdf rdf : rdfs) {\n\t\t\tNamespace ns = findNamespace(rdf.prefix(), rdf.namespace(), rdfs, schemas);\n\t\t\tif (ns != null)\n\t\t\t\treturn ns;\n\t\t}\n\n\t\tfor (RdfSchema schema : schemas) {\n\t\t\tNamespace ns = findNamespace(schema.prefix(), schema.namespace(), null, schemas);\n\t\t\tif (ns != null)\n\t\t\t\treturn ns;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static Namespace findNamespace(String prefix, String ns, List<Rdf> rdfs, List<RdfSchema> schemas) {\n\n\t\t// If both prefix and namespace specified, use that Namespace mapping.\n\t\tif (! (prefix.isEmpty() || ns.isEmpty()))\n\t\t\treturn Namespace.create(prefix, ns);\n\n\t\t// If only prefix specified, need to search for namespaceURI.\n\t\tif (! prefix.isEmpty()) {\n\t\t\tif (rdfs != null)\n\t\t\t\tfor (Rdf rdf2 : rdfs)\n\t\t\t\t\tif (rdf2.prefix().equals(prefix) && ! rdf2.namespace().isEmpty())\n\t\t\t\t\t\treturn Namespace.create(prefix, rdf2.namespace());\n\t\t\tfor (RdfSchema schema : schemas) {\n\t\t\t\tif (schema.prefix().equals(prefix) && ! schema.namespace().isEmpty())\n\t\t\t\t\treturn Namespace.create(prefix, schema.namespace());\n\t\t\t\tfor (RdfNs rdfNs : schema.rdfNs())\n\t\t\t\t\tif (rdfNs.prefix().equals(prefix))\n\t\t\t\t\t\treturn Namespace.create(prefix, rdfNs.namespaceURI());\n\t\t\t}\n\t\t\tthrow new BeanRuntimeException(\"Found @Rdf.prefix annotation with no matching URI.  prefix='\"+prefix+\"'\");\n\t\t}\n\n\t\t// If only namespaceURI specified, need to search for prefix.\n\t\tif (! ns.isEmpty()) {\n\t\t\tif (rdfs != null)\n\t\t\t\tfor (Rdf rdf2 : rdfs)\n\t\t\t\t\tif (rdf2.namespace().equals(ns) && ! rdf2.prefix().isEmpty())\n\t\t\t\t\t\treturn Namespace.create(rdf2.prefix(), ns);\n\t\t\tfor (RdfSchema schema : schemas) {\n\t\t\t\tif (schema.namespace().equals(ns) && ! schema.prefix().isEmpty())\n\t\t\t\t\treturn Namespace.create(schema.prefix(), ns);\n\t\t\t\tfor (RdfNs rdfNs : schema.rdfNs())\n\t\t\t\t\tif (rdfNs.namespaceURI().equals(ns))\n\t\t\t\t\t\treturn Namespace.create(rdfNs.prefix(), ns);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}<fim_middle>// class below has no smell\n"}