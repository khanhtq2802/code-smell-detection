{"text": "<fim_prefix>/*\n * $Header:\n * /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons\n * //httpclient\n * /src/java/org/apache/commons/httpclient/UsernamePasswordCredentials.java,v\n * 1.14 2004/04/18 23:51:35 jsdever Exp $ $Revision: 480424 $ $Date: 2006-11-29\n * 06:56:49 +0100 (Wed, 29 Nov 2006) $\n *\n * ====================================================================\n *\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with this\n * work for additional information regarding copyright ownership. The ASF\n * licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many individuals on\n * behalf of the Apache Software Foundation. For more information on the Apache\n * Software Foundation, please see <http://www.apache.org/>.\n */\n\npackage com.microsoft.tfs.core.httpclient;\n\nimport com.microsoft.tfs.core.httpclient.util.LangUtils;\nimport com.microsoft.tfs.util.StringUtil;\n\n/**\n * <p>\n * Username and password {@link Credentials}.\n * </p>\n *\n * @author <a href=\"mailto:remm@apache.org\">Remy Maucherat</a>\n * @author Sean C. Sullivan\n * @author <a href=\"mailto:mbowler@GargoyleSoftware.com\">Mike Bowler</a>\n * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n *\n * @version $Revision: 480424 $ $Date: 2006-11-29 06:56:49 +0100 (Wed, 29 Nov\n *          2006) $\n *\n */\npublic class UsernamePasswordCredentials extends Credentials {\n    /**\n     * User name.\n     */\n    private final String username;\n\n    /**\n     * Password, plus synchronization object.\n     */\n    private String password;\n    private final Object passwordLock = new Object();\n\n    /**\n     * The constructor with the username and password arguments.\n     *\n     * @param username\n     *        the user name\n     * @param password\n     *        the password\n     */\n<fim_suffix>    public UsernamePasswordCredentials(final String username, final String password) {\n        super();\n\n        if (username == null) {\n            throw new IllegalArgumentException(\"Username may not be null\");\n        }\n\n        this.username = username;\n        this.password = password;\n    }\n\n    /**\n     * User name property getter.\n     *\n     * @return the userName\n     * @see #setUserName(String)\n     */\n    public String getUsername() {\n        return username;\n    }\n\n    public void setPassword(final String password) {\n        synchronized (passwordLock) {\n            this.password = password;\n        }\n    }\n\n    /**\n     * Password property getter.\n     *\n     * @return the password\n     * @see #setPassword(String)\n     */\n    public String getPassword() {\n        synchronized (passwordLock) {\n            return password;\n        }\n    }\n\n    /**\n     * Get this object string.\n     *\n     * @return the username:password formed string\n     */\n    @Override\n    public String toString() {\n        final StringBuffer result = new StringBuffer();\n        result.append(username);\n        result.append(\":\");\n        result.append((password == null) ? \"null\" : password);\n        return result.toString();\n    }\n\n    /**\n     * Does a hash of both user name and password.\n     *\n     * @return The hash code including user name and password.\n     */\n    @Override\n    public int hashCode() {\n        int hash = LangUtils.HASH_SEED;\n        hash = LangUtils.hashCode(hash, username);\n        hash = LangUtils.hashCode(hash, password);\n        return hash;\n    }\n\n    /**\n     * These credentials are assumed equal if the username and password are the\n     * same.\n     *\n     * @param o\n     *        The other object to compare with.\n     *\n     * @return <code>true</code> if the object is equivalent.\n     */\n    @Override\n    public boolean equals(final Object o) {\n        if (o == null) {\n            return false;\n        }\n        if (this == o) {\n            return true;\n        }\n\n        if (o instanceof UsernamePasswordCredentials) {\n            final UsernamePasswordCredentials that = (UsernamePasswordCredentials) o;\n\n            if (LangUtils.equals(username, that.username) && LangUtils.equals(password, that.password)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static class PatCredentials extends UsernamePasswordCredentials {\n        public static final String USERNAME_FOR_CODE_ACCESS_PAT = \"_VSTS_Code_Access_Token_\"; //$NON-NLS-1$\n        public static final String TOKEN_DESCRIPTION = \"TEE: {0} on: {1}\"; //$NON-NLS-1$\n\n        public PatCredentials(final String pat) {\n            super(USERNAME_FOR_CODE_ACCESS_PAT, pat == null ? StringUtil.EMPTY : pat);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}