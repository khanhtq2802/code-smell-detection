{"text": "<fim_prefix>/*\n * Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage org.graalvm.visualvm.core.explorer;\n\nimport org.graalvm.visualvm.core.datasource.DataSource;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.JTree;\nimport javax.swing.event.TreeExpansionEvent;\nimport javax.swing.event.TreeExpansionListener;\nimport javax.swing.event.TreeSelectionEvent;\nimport javax.swing.event.TreeSelectionListener;\nimport javax.swing.tree.TreePath;\nimport org.openide.windows.WindowManager;\n\n/**\n * Class for accessing the explorer tree.\n *\n * @author Jiri Sedlacek\n */\npublic final class ExplorerSupport {\n\n    private static ExplorerSupport sharedInstance;\n\n    private JTree mainTree;\n    \n    private Set<ExplorerSelectionListener> selectionListeners = Collections.synchronizedSet(new HashSet());\n    private Set<ExplorerExpansionListener> expansionListeners = Collections.synchronizedSet(new HashSet());\n\n\n    /**\n     * Returns singleton instance of ExplorerSupport.\n     * \n     * @return singleton instance of ExplorerSupport.\n     */\n    public static synchronized ExplorerSupport sharedInstance() {\n        if (sharedInstance == null) sharedInstance = new ExplorerSupport();\n        return sharedInstance;\n    }\n\n    \n    /**\n     * Returns current DataSource position within its owner DataSource in explorer tree or -1 if the position cannot be determined.\n     * \n     * @param dataSource DataSource for which to get the position.\n     * @return current DataSource position within its owner DataSource in explorer tree or -1 if the position cannot be determined.\n     */\n    public int getDataSourcePosition(DataSource dataSource) {\n        ExplorerNode node = getNode(dataSource);\n        if (node == null) return -1;\n        ExplorerNode parentNode = (ExplorerNode)node.getParent();\n        if (parentNode == null) return -1;\n        return parentNode.getIndex(node);\n    }\n\n    /**\n     * Selects DataSource in explorer tree.\n     * \n     * @param dataSource DataSource to be selected.\n     */\n    public void selectDataSource(final DataSource dataSource) {\n        if (dataSource == null) return;\n        selectDataSources(Collections.singleton(dataSource));\n    }\n    \n    /**\n     * Selects multiple DataSources in explorer tree.\n     * \n     * @param dataSources DataSources to be selected.\n     */\n    public void selectDataSources(final Set<DataSource> dataSources) {\n        if (dataSources.isEmpty()) return;\n        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {\n            public void run() {\n                List<TreePath> selectedPaths = new ArrayList();\n                for (DataSource dataSource : dataSources) {\n                    ExplorerNode node = getNode(dataSource);\n                    if (node != null) selectedPaths.add(getPath(node));\n                }\n                mainTree.setSelectionPaths(selectedPaths.isEmpty() ? null : selectedPaths.toArray(new TreePath[selectedPaths.size()]));\n            } \n        });\n    }\n    \n    /**\n     * Clears selection of explorer tree.\n     */\n    public void clearSelection() {\n        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {\n            public void run() { mainTree.clearSelection(); } \n        });\n    }\n    \n    /**\n     * Returns selected DataSources in explorer tree.\n     * \n     * @return selected DataSources in explorer tree.\n     */\n    public Set<DataSource> getSelectedDataSources() {\n        if (mainTree == null) return Collections.EMPTY_SET;\n        \n        TreePath[] selectedPaths = mainTree.getSelectionPaths();\n        if (selectedPaths == null) return Collections.EMPTY_SET;\n        \n        Set<DataSource> selectedDataSources = new HashSet();\n        for (TreePath treePath : selectedPaths) {\n            DataSource dataSource = getDataSource(treePath);\n            if (dataSource != null) selectedDataSources.add(dataSource);\n        }\n        return selectedDataSources;\n    }\n    \n    /**\n     * Adds a listener to receive notifications about explorer tree selection change.\n     * \n     * @param listener listener to add.\n     */\n    public void addSelectionListener(ExplorerSelectionListener listener) {\n        selectionListeners.add(listener);\n    }\n    \n    /**\n     * Removes explorer tree selection listener.\n     * @param listener listener to remove.\n     */\n    public void removeSelectionListener(ExplorerSelectionListener listener) {\n        selectionListeners.remove(listener);\n    }\n    \n    /**\n     * Expands DataSource if displayed and collapsed in explorer tree.\n     * \n     * @param dataSource DataSource to expand.\n     */\n    public void expandDataSource(DataSource dataSource) {\n        expandNode(getNode(dataSource));\n    }\n    \n    void expandNode(final ExplorerNode node) {\n        if (node == null) return;\n        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {\n            public void run() { \n                TreePath path = getPath(node);\n                // For some reason expanding the path doesn't always work for a single invocation,\n                // invoking twice to be sure\n                mainTree.expandPath(path);\n                mainTree.expandPath(path);\n            } \n        });\n    }\n    \n    /**\n     * Collapses DataSource if displayed and expanded in explorer tree.\n     * \n     * @param dataSource DataSource to collapse.\n     */\n    public void collapseDataSource(DataSource dataSource) {\n        collapseNode(getNode(dataSource));\n    }\n    \n    void collapseNode(final ExplorerNode node) {\n        if (node == null) return;\n        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {\n            public void run() { mainTree.collapsePath(getPath(node)); } \n        });\n    }\n    \n    /**\n     * Adds a listener to receive notifications about expanded/collapsed explorer tree nodes.\n     * \n     * @param listener listener to add.\n     */\n    public void addExpansionListener(ExplorerExpansionListener listener) {\n        expansionListeners.add(listener);\n    }\n    \n    /**\n     * Removes explorer tree expansion listener.\n     * \n     * @param listener listener to remove.\n     */\n    public void removeExpansionListener(ExplorerExpansionListener listener) {\n        expansionListeners.remove(listener);\n    }\n    \n    \n    DataSource getDataSource(TreePath path) {\n        if (path == null) return null;\n        ExplorerNode node = (ExplorerNode)path.getLastPathComponent();\n        return node.getUserObject();\n    }\n    \n    ExplorerNode getNode(DataSource dataSource) {\n        return ExplorerModelBuilder.getInstance().getNodeFor(dataSource);\n    }\n    \n    TreePath getPath(ExplorerNode node) {\n        return new TreePath(node.getPath());\n    }\n            \n    \n    private ExplorerSupport() {\n        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {\n            public void run() {\n                mainTree = ExplorerComponent.instance().getTree();\n                mainTree.addTreeSelectionListener(new ExplorerTreeSelectionListener());\n                mainTree.addTreeExpansionListener(new ExplorerTreeExpansionListener());\n            }\n        });\n    }\n    \n    \n<fim_suffix>    private class ExplorerTreeSelectionListener implements TreeSelectionListener {\n\n        public void valueChanged(TreeSelectionEvent e) {\n            Set<DataSource> selectedDataSources = getSelectedDataSources();\n            Set<ExplorerSelectionListener> listeners = new HashSet(selectionListeners);\n            for (ExplorerSelectionListener listener : listeners) listener.selectionChanged(selectedDataSources);\n        }\n        \n    }\n    \n    private class ExplorerTreeExpansionListener implements TreeExpansionListener {\n\n        public void treeExpanded(TreeExpansionEvent event) {\n            DataSource expandedDataSource = getDataSource(event.getPath());\n            if (expandedDataSource != null) {\n                Set<ExplorerExpansionListener> listeners = new HashSet(expansionListeners);\n                for (ExplorerExpansionListener listener : listeners) listener.dataSourceExpanded(expandedDataSource);\n            }\n        }\n\n        public void treeCollapsed(TreeExpansionEvent event) {\n            DataSource collapsedDataSource = getDataSource(event.getPath());\n            if (collapsedDataSource != null) {\n                Set<ExplorerExpansionListener> listeners = new HashSet(expansionListeners);\n                for (ExplorerExpansionListener listener : listeners) listener.dataSourceCollapsed(collapsedDataSource);\n            }\n        }\n        \n    }\n\n}<fim_middle>// class below has no smell\n"}