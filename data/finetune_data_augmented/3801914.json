{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.alipay.dw.jstorm.example.userdefined.scheduler;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicLong;\n\nimport backtype.storm.utils.Utils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.alibaba.jstorm.callback.Callback;\nimport com.alibaba.jstorm.client.ConfigExtension;\nimport com.alibaba.jstorm.metric.MetaType;\nimport com.alibaba.jstorm.metric.MetricDef;\nimport com.alibaba.starter.utils.Assert;\nimport com.alibaba.starter.utils.JStormHelper;\nimport com.alibaba.jstorm.utils.JStormUtils;\n\nimport backtype.storm.Config;\nimport backtype.storm.task.OutputCollector;\nimport backtype.storm.task.TopologyContext;\nimport backtype.storm.testing.TestWordSpout;\nimport backtype.storm.topology.OutputFieldsDeclarer;\nimport backtype.storm.topology.TopologyBuilder;\nimport backtype.storm.topology.base.BaseRichBolt;\nimport backtype.storm.tuple.Fields;\nimport backtype.storm.tuple.Tuple;\n\n/**\n * This is a basic example to check whether all workers run on the user-defined\n * host\n */\npublic class TaskInDifferentNodeTopology {\n    static List<AtomicLong>     counters  = new ArrayList<>();\n    private static final String BOLT_NAME = \"bolt\";\n    \n    public static class ExclamationLoggingBolt extends BaseRichBolt {\n        OutputCollector _collector;\n        Logger          _rootLogger = LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n        // ensure the loggers are configured in the worker.xml before\n        // trying to use them here\n        Logger          _logger     = LoggerFactory.getLogger(\"com.myapp\");\n        Logger          _subLogger  = LoggerFactory.getLogger(\"com.myapp.sub\");\n        \n        AtomicLong counter;\n        \n        @Override\n        public void prepare(Map conf, TopologyContext context, OutputCollector collector) {\n            _collector = collector;\n            counter = new AtomicLong(0);\n            counters.add(counter);\n        }\n        \n        @Override\n        public void execute(Tuple tuple) {\n            \n            _collector.ack(tuple);\n            \n        }\n        \n        @Override\n        public void declareOutputFields(OutputFieldsDeclarer declarer) {\n            declarer.declare(new Fields(\"word\"));\n        }\n    }\n    \n    static boolean      isLocal     = true;\n    static List<String> hosts;\n    static boolean      spoutSingle = true;\n    static Config       conf        = JStormHelper.getConfig(null);\n    \n    public static void test() throws Exception {\n        JStormHelper.cleanCluster();\n        hosts = JStormHelper.getSupervisorHosts();\n        \n        TopologyBuilder builder = new TopologyBuilder();\n        \n        builder.setSpout(\"word\", new TestWordSpout(), 1);\n        /*********\n         * \n         * This make sure the tasks will run on different nodes\n         * \n         * \n         * \n         */\n        Map<String, Object> componentMap = new HashMap<>();\n        ConfigExtension.setTaskOnDifferentNode(componentMap, true);\n        builder.setBolt(BOLT_NAME, new ExclamationLoggingBolt(), hosts.size()).localFirstGrouping(\"word\")\n                .addConfigurations(componentMap);\n                \n        if (isLocal == false) {\n            \n            if (spoutSingle == true) {\n                conf.setNumWorkers(hosts.size() + 3);\n            } else {\n                conf.setNumWorkers(hosts.size());\n            }\n            \n        }\n        \n        String[] className = Thread.currentThread().getStackTrace()[1].getClassName().split(\"\\\\.\");\n        String topologyName = className[className.length - 1];\n        try {\n            JStormHelper.runTopology(builder.createTopology(), topologyName, conf, 180,\n                    new Validator(conf), isLocal);\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n            Assert.fail(\"Failed\");\n        }\n    }\n    \n<fim_suffix>    public static void main(String[] args) throws Exception {\n        isLocal = false;\n        conf = JStormHelper.getConfig(args);\n        if (args.length != 0) {\n            spoutSingle = false;\n        }\n        test();\n    }\n    \n    public static class Validator implements Callback {\n        \n        private Config conf = new Config();\n        private String topologyName;\n        \n        public Validator(Config conf) {\n            this.conf.putAll(Utils.readStormConfig());\n            this.conf.putAll(conf);\n        }\n        \n        public void verifyAssignment() {\n            Map<String, Double> workerMetrics = JStormUtils.getMetrics(conf, topologyName, MetaType.WORKER, null);\n            \n            Set<String> boltHosts = new HashSet<String>();\n            for (String key : workerMetrics.keySet()) {\n                String[] tags = key.split(\"@\");\n                boltHosts.add(tags[2]);\n            }\n            \n            if (boltHosts.size() != hosts.size()) {\n                Assert.fail(\"Failed to do task in different node\");\n            }\n        }\n        \n        public void verifyNumber() {\n            Map<String, Double> taskMetrics = JStormUtils.getMetrics(conf, topologyName, null, null);\n            \n            boolean receivedTuple = false;\n            for (Entry<String, Double> entry : taskMetrics.entrySet()) {\n                String key = entry.getKey();\n                Double value = entry.getValue();\n                \n                if (key.indexOf(MetricDef.ACKED_NUM) <= 0) {\n                    continue;\n                }\n                \n                if (key.indexOf(BOLT_NAME) <= 0) {\n                    continue;\n                }\n                \n                if (spoutSingle) {\n                    \n                    Assert.assertTrue(key + \" should receive tuples \", value > 0.0);\n                    receivedTuple = true;\n                } else {\n                    if (value > 0.0) {\n                        if (receivedTuple == false) {\n                            receivedTuple = true;\n                        } else {\n                            Assert.fail(\"Should only one task can receive tuple\");\n                        }\n                    }\n                }\n            }\n            \n            Assert.assertTrue(BOLT_NAME + \" should receive tuple \", receivedTuple);\n        }\n        \n        @Override\n        public <T> Object execute(T... args) {\n            // TODO Auto-generated method stub\n            \n            topologyName = (String) args[0];\n            \n            if (isLocal == true) {\n                Callback callback = new JStormHelper.CheckAckedFail(conf);\n                callback.execute(args);\n                return null;\n            }\n            \n            \n            verifyAssignment();\n            \n            verifyNumber();\n            \n            return null;\n            \n        }\n        \n    }\n}<fim_middle>// function below has no smell\n"}