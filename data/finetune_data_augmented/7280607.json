{"text": "<fim_prefix>            startField(\"altText\");\n            return this;\n        }\n        /**\n        * A unique identifier for the image.\n        */\n        public ImageQuery id() {\n            startField(\"id\");\n            return this;\n        }\n        /**\n        * The location of the original image as a URL.\n        * If there are any existing transformations in the original source URL, they will remain and not be\n        * stripped.\n        */\n        public ImageQuery originalSrc() {\n            startField(\"originalSrc\");\n            return this;\n        }\n        /**\n        * The location of the image as a URL.\n        *\n        * @deprecated Previously an image had a single `src` field. This could either return the original image\n        location or a URL that contained transformations such as sizing or scale.\n        These transformations were specified by arguments on the parent field.\n        Now an image has two distinct URL fields: `originalSrc` and `transformedSrc`.\n        * `originalSrc` - the original unmodified image URL\n        * `transformedSrc` - the image URL with the specified transformations included\n        To migrate to the new fields, image transformations should be moved from the parent field to `transformedSrc`.\n        Before:\n        ```graphql\n        {\n            shop {\n                productImages(maxWidth: 200, scale: 2) {\n                    edges {\n                        node {\n                            src\n                        }\n                    }\n                }\n            }\n        }\n        ```\n        After:\n        ```graphql\n        {\n            shop {\n                productImages {\n                    edges {\n                        node {\n                            transformedSrc(maxWidth: 200, scale: 2)\n                        }\n                    }\n                }\n            }\n        }\n        ```\n        */\n        @Deprecated\n        public ImageQuery src() {\n            startField(\"src\");\n            return this;\n        }\n        public class TransformedSrcArguments extends Arguments {\n            TransformedSrcArguments(StringBuilder _queryBuilder) {\n                super(_queryBuilder, true);\n            }\n            /**\n            * Image width in pixels between 1 and 5760.\n            */\n            public TransformedSrcArguments maxWidth(Integer value) {\n                if (value != null) {\n                    startArgument(\"maxWidth\");\n                    _queryBuilder.append(value);\n                }\n                return this;\n            }\n            /**\n            * Image height in pixels between 1 and 5760.\n            */\n            public TransformedSrcArguments maxHeight(Integer value) {\n                if (value != null) {\n                    startArgument(\"maxHeight\");\n                    _queryBuilder.append(value);\n                }\n                return this;\n            }\n            /**\n            * Crops the image according to the specified region.\n            */\n            public TransformedSrcArguments crop(CropRegion value) {\n                if (value != null) {\n                    startArgument(\"crop\");\n                    _queryBuilder.append(value.toString());\n                }\n                return this;\n            }\n            /**\n            * Image size multiplier for high-resolution retina displays. Must be between 1 and 3.\n            */\n            public TransformedSrcArguments scale(Integer value) {\n                if (value != null) {\n                    startArgument(\"scale\");\n                    _queryBuilder.append(value);\n                }\n                return this;\n            }\n            /**\n            * Best effort conversion of image into content type (SVG -> PNG, Anything -> JGP, Anything -> WEBP are\n            * supported).\n            */\n            public TransformedSrcArguments preferredContentType(ImageContentType value) {\n                if (value != null) {\n                    startArgument(\"preferredContentType\");\n                    _queryBuilder.append(value.toString());\n                }\n                return this;\n            }\n        }\n        public interface TransformedSrcArgumentsDefinition {\n            void define(TransformedSrcArguments args);\n        }\n        /**\n        * The location of the transformed image as a URL.\n        * All transformation arguments are considered \"best-effort\". If they can be applied to an image, they\n        * will be.\n        * Otherwise any transformations which an image type does not support will be ignored.\n        */\n        public ImageQuery transformedSrc() {\n            return transformedSrc(args -> {});\n        }\n        /**\n        * The location of the transformed image as a URL.\n        * All transformation arguments are considered \"best-effort\". If they can be applied to an image, they\n        * will be.\n        * Otherwise any transformations which an image type does not support will be ignored.\n        */\n        public ImageQuery transformedSrc(TransformedSrcArgumentsDefinition argsDef) {\n            startField(\"transformedSrc\");\n            TransformedSrcArguments args = new TransformedSrcArguments(_queryBuilder);\n            argsDef.define(args);\n            TransformedSrcArguments.end(args);\n            return this;\n        }\n    }\n    /**\n    * Represents an image resource.\n    */\n<fim_suffix>    public static class Image extends AbstractResponse<Image> {\n        public Image() {\n        }\n        public Image(JsonObject fields) throws SchemaViolationError {\n            for (Map.Entry<String, JsonElement> field : fields.entrySet()) {\n                String key = field.getKey();\n                String fieldName = getFieldName(key);\n                switch (fieldName) {\n                    case \"altText\": {\n                        String optional1 = null;\n                        if (!field.getValue().isJsonNull()) {\n                            optional1 = jsonAsString(field.getValue(), key);\n                        }\n                        responseData.put(key, optional1);\n                        break;\n                    }\n                    case \"id\": {\n                        ID optional1 = null;\n                        if (!field.getValue().isJsonNull()) {\n                            optional1 = new ID(jsonAsString(field.getValue(), key));\n                        }\n                        responseData.put(key, optional1);\n                        break;\n                    }\n                    case \"originalSrc\": {\n                        responseData.put(key, jsonAsString(field.getValue(), key));\n                        break;\n                    }\n                    case \"src\": {\n                        responseData.put(key, jsonAsString(field.getValue(), key));\n                        break;\n                    }\n                    case \"transformedSrc\": {\n                        responseData.put(key, jsonAsString(field.getValue(), key));\n                        break;\n                    }\n                    case \"__typename\": {\n                        responseData.put(key, jsonAsString(field.getValue(), key));\n                        break;\n                    }\n                    default: {\n                        throw new SchemaViolationError(this, key, field.getValue());\n                    }\n                }\n            }\n        }\n        public String getGraphQlTypeName() {\n            return \"Image\";\n        }\n        /**\n        * A word or phrase to share the nature or contents of an image.\n        */\n        public String getAltText() {\n            return (String) get(\"altText\");\n        }\n        public Image setAltText(String arg) {\n            optimisticData.put(getKey(\"altText\"), arg);\n            return this;\n        }\n        /**\n        * A unique identifier for the image.\n        */\n        public ID getId() {\n            return (ID) get(\"id\");\n        }\n        public Image setId(ID arg) {\n            optimisticData.put(getKey(\"id\"), arg);\n            return this;\n        }\n        /**\n        * The location of the original image as a URL.\n        * If there are any existing transformations in the original source URL, they will remain and not be\n        * stripped.\n        */\n        public String getOriginalSrc() {\n            return (String) get(\"originalSrc\");\n        }\n        public Image setOriginalSrc(String arg) {\n            optimisticData.put(getKey(\"originalSrc\"), arg);\n            return this;\n        }\n        /**\n        * The location of the image as a URL.\n        *\n        * @deprecated Previously an image had a single `src` field. This could either return the original image\n        location or a URL that contained transformations such as sizing or scale.\n        These transformations were specified by arguments on the parent field.\n        Now an image has two distinct URL fields: `originalSrc` and `transformedSrc`.\n        * `originalSrc` - the original unmodified image URL\n        * `transformedSrc` - the image URL with the specified transformations included\n        To migrate to the new fields, image transformations should be moved from the parent field to `transformedSrc`.\n        Before:\n        ```graphql\n        {\n            shop {\n                productImages(maxWidth: 200, scale: 2) {\n                    edges {\n                        node {\n                            src\n                        }\n                    }\n                }\n            }\n        }\n        ```\n        After:\n        ```graphql\n        {\n            shop {\n                productImages {\n                    edges {\n                        node {\n                            transformedSrc(maxWidth: 200, scale: 2)\n                        }\n                    }\n                }\n            }\n        }\n        ```\n        */\n        public String getSrc() {\n            return (String) get(\"src\");\n        }\n        public Image setSrc(String arg) {\n            optimisticData.put(getKey(\"src\"), arg);\n            return this;\n        }\n        /**\n        * The location of the transformed image as a URL.\n        * All transformation arguments are considered \"best-effort\". If they can be applied to an image, they\n        * will be.\n        * Otherwise any transformations which an image type does not support will be ignored.\n        */\n        public String getTransformedSrc() {\n            return (String) get(\"transformedSrc\");\n        }\n        public Image setTransformedSrc(String arg) {\n            optimisticData.put(getKey(\"transformedSrc\"), arg);\n            return this;\n        }\n        public boolean unwrapsToObject(String key) {\n            switch (getFieldName(key)) {\n                case \"altText\": return false;\n                case \"id\": return false;\n                case \"originalSrc\": return false;\n                case \"src\": return false;\n                case \"transformedSrc\": return false;\n                default: return false;\n            }\n        }\n    }<fim_middle>// class below has no smell\n"}