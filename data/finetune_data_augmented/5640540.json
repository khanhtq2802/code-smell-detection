{"text": "<fim_prefix>/*\n *\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\npackage org.apache.royale.compiler.internal.fxg.types;\n\nimport org.apache.royale.compiler.internal.fxg.dom.transforms.MatrixNode;\n\nimport org.apache.royale.swf.ISWFConstants;\nimport org.apache.royale.swf.types.Matrix;\n\n/**\n * Utility class to help with matrix transformation for coordinate transformation.\n */\n<fim_suffix>public class FXGMatrix\n{\n\n\tpublic double a; //x-axis scaling\n    public double b; //x-axis skew\n    public double c; //y-axis skew\n    public double d; //y-axis scaling\n    public double tx; //x-axis translation\n    public double ty; //y-axis translation\n    \n    //constructor\n    public FXGMatrix(double a, double b, double c, double d, double tx, double ty)\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n    }\n    \n    //constructor - intializes matrix to identity matrix\n    public FXGMatrix()\n    {\n        this.identity();\n    }\n\n    public FXGMatrix(MatrixNode m)\n    {\n        this.a = m.a;\n        this.b = m.b;\n        this.c = m.c;\n        this.d = m.d;\n        this.tx = m.tx;\n        this.ty = m.ty;\n    }\n\n    public void identity() \n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;        \n    }\n    \n    //concatenates matrix m to the current matrix\n    public void concat(FXGMatrix m)\n    {\n        // Matrix multiplication \n        double new_a = a * m.a + b * m.c;\n        double new_b = a * m.b + b * m.d;\n        double new_c = c * m.a + d * m.c;\n        double new_d = c * m.b + d * m.d;\n        double new_tx = tx * m.a + ty * m.c + m.tx;\n        double new_ty = tx * m.b + ty * m.d + m.ty;\n\n        a  = new_a;\n        b  = new_b;\n        c  = new_c;\n        d  = new_d;\n        tx = new_tx;\n        ty = new_ty;        \n    }\n    \n    //concatenates a rotation matrix with rotation angle to the current matrix\n    public void rotate(double angle)\n    {\n        double cos = Math.cos(angle*Math.PI/180.0);\n        double sin = Math.sin(angle*Math.PI/180.0);\n        FXGMatrix newM = new FXGMatrix(cos, sin, -sin, cos, 0, 0);\n        this.concat (newM);\n    }\n    \n    //concatenates a scaling matrix with scale factors scaleX and scaleY to the current matrix\n    public void scale(double scaleX, double scaleY)\n    {\n        FXGMatrix newM = new FXGMatrix(scaleX, 0, 0, scaleY, 0, 0);\n        this.concat (newM);     \n    }\n    \n    //concatenates a transaltion matrix with translations (dx, dy) to the current matrix\n    public void translate(double dx, double dy)\n    {\n        tx += dx;\n        ty += dy;\n    }\n    \n    //creates a matrix from the discrete transform parameters\n    public static FXGMatrix convertToMatrix(double scaleX, double scaleY, double rotation, double tx, double ty)\n    {\n        FXGMatrix m = new FXGMatrix();\n        m.scale (scaleX, scaleY);\n        m.rotate (rotation);\n        m.translate(tx, ty);        \n        return m;\n    }\n\n    //returns a SWF Matrix data type that is equivalent to the current matrix\n    public Matrix toSWFMatrix()\n    {\n        \n        /*SWF matrices need to be invertible - check if it is invertible\n         * disabled it for now - other apps seem to allow it\n        FXGMatrix newm = new FXGMatrix(a, b, c, d, tx, ty);\n        if (!newm.invert())\n            throw new FXGException(\"MatrixNotInvertible\");\n        */\n        \n        Matrix sm = new Matrix();\n        if (b != 0 || c != 0)\n            sm.setRotate(b, c);        \n        if (a != 0 || d != 0)\n            sm.setScale(a, d);\n        \n        sm.setTranslate((int)(tx*ISWFConstants.TWIPS_PER_PIXEL), (int)(ty*ISWFConstants.TWIPS_PER_PIXEL));\n        \n        return sm;        \n    }\n    \n    /**\n     * Set matrix attribute values with values in this FXGMatrix object.\n     * @param node - the matrix node whose attribute values will be updated.\n     */\n    public void setMatrixNodeValue(MatrixNode node)\n    {\n        node.a = this.a;\n        node.b = this.b;\n        node.c = this.c;\n        node.d = this.d;\n        node.tx = this.tx;\n        node.ty = this.ty;\n    }\n    \n}<fim_middle>// class below has no smell\n"}