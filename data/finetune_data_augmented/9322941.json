{"text": "<fim_prefix>\n<fim_suffix>public class XMLDOMWriterImpl implements XMLStreamWriterBase  {\n    private Document ownerDoc = null;\n    private Node currentNode = null;\n    private Node node = null;\n    private NamespaceSupport namespaceContext = null;\n    private boolean [] needContextPop = null;\n    private StringBuffer stringBuffer = null;\n    private int resizeValue = 20;\n    private int depth = 0;\n    /**\n     * Creates a new instance of XMLDOMwriterImpl\n     * @param result DOMResult object @javax.xml.transform.dom.DOMResult\n     */\n    public XMLDOMWriterImpl(DOMResult result) {\n        node = result.getNode();\n        if( node.getNodeType() == Node.DOCUMENT_NODE){\n            ownerDoc = (Document)node;\n            currentNode = ownerDoc;\n        }else{\n            ownerDoc = node.getOwnerDocument();\n            currentNode = node;\n        }\n        stringBuffer = new StringBuffer();\n        needContextPop = new boolean[resizeValue];\n        namespaceContext = new NamespaceSupport();\n    }\n    /**\n     * This method has no effect when called.\n     * @throws javax.xml.stream.XMLStreamException {@inheritDoc}\n     */\n    public void close() throws XMLStreamException {\n        //no-op\n    }\n    /**\n     * This method has no effect when called.\n     * @throws javax.xml.stream.XMLStreamException {@inheritDoc}\n     */\n    public void flush() throws XMLStreamException {\n        //no-op\n    }\n    /**\n     * {@inheritDoc}\n     * @return {@inheritDoc}\n     */\n    public javax.xml.namespace.NamespaceContext getNamespaceContext() {\n        return null;\n    }\n    /**\n     * {@inheritDoc}\n     * @param namespaceURI {@inheritDoc}\n     * @throws javax.xml.stream.XMLStreamException {@inheritDoc}\n     * @return {@inheritDoc}\n     */\n    public String getPrefix(String namespaceURI) throws XMLStreamException {\n        String prefix = null;\n        if(this.namespaceContext != null){\n            prefix = namespaceContext.getPrefix(namespaceURI);\n        }\n        return prefix;\n    }\n    /**\n     * Is not supported in this implementation.\n     * @param str {@inheritDoc}\n     * @throws java.lang.IllegalArgumentException {@inheritDoc}\n     * @return {@inheritDoc}\n     */\n    public Object getProperty(String str) throws IllegalArgumentException {\n        throw new UnsupportedOperationException();\n    }\n    /**\n     * Is not supported in this version of the implementation.\n     * @param uri {@inheritDoc}\n     * @throws javax.xml.stream.XMLStreamException {@inheritDoc}\n     */\n    public void setDefaultNamespace(String uri) throws XMLStreamException {\n        namespaceContext.declarePrefix(XMLConstants.DEFAULT_NS_PREFIX, uri);\n        if(!needContextPop[depth]){\n            needContextPop[depth] = true;\n        }\n    }\n    /**\n     * {@inheritDoc}\n     * @param namespaceContext {@inheritDoc}\n     * @throws javax.xml.stream.XMLStreamException {@inheritDoc}\n     */\n    public void setNamespaceContext(javax.xml.namespace.NamespaceContext namespaceContext) throws XMLStreamException {\n        throw new UnsupportedOperationException();\n    }\n    /**\n     * Is not supported in this version of the implementation.\n     * @param prefix {@inheritDoc}\n     * @param uri {@inheritDoc}\n     * @throws javax.xml.stream.XMLStreamException {@inheritDoc}\n     */\n    public void setPrefix(String prefix, String uri) throws XMLStreamException {\n        if(prefix == null){\n            throw new XMLStreamException(\"Prefix cannot be null\");\n        }\n        namespaceContext.declarePrefix(prefix, uri);\n        if(!needContextPop[depth]){\n            needContextPop[depth] = true;\n        }\n    }\n    /**\n     * Creates a DOM Atrribute @see org.w3c.dom.Node and associates it with the current DOM element @see org.w3c.dom.Node.\n     * @param localName {@inheritDoc}\n     * @param value {@inheritDoc}\n     * @throws javax.xml.stream.XMLStreamException {@inheritDoc}\n     */\n    public void writeAttribute(String localName, String value) throws XMLStreamException {\n        if(currentNode.getNodeType() == Node.ELEMENT_NODE){\n            Attr attr = ownerDoc.createAttribute(localName);\n            attr.setValue(value);\n            ((Element)currentNode).setAttributeNode(attr);\n        }else{\n            //Convert node type to String\n            throw new IllegalStateException(\"Current DOM Node type  is \"+ currentNode.getNodeType() +\n                    \"and does not allow attributes to be set \");\n        }\n    }\n    /**\n     * Creates a DOM Atrribute @see org.w3c.dom.Node and associates it with the current DOM element @see org.w3c.dom.Node.\n     * @param namespaceURI {@inheritDoc}\n     * @param localName {@inheritDoc}\n     * @param value {@inheritDoc}\n     * @throws javax.xml.stream.XMLStreamException {@inheritDoc}\n     */\n    public void writeAttribute(String namespaceURI,String localName,String value)throws XMLStreamException {\n        if(currentNode.getNodeType() == Node.ELEMENT_NODE){\n            String prefix = null;\n            if(namespaceURI == null ){\n                throw new XMLStreamException(\"NamespaceURI cannot be null\");\n            }\n            if(localName == null){\n                throw new XMLStreamException(\"Local name cannot be null\");\n            }\n            if(namespaceContext != null){\n                prefix = namespaceContext.getPrefix(namespaceURI);\n            }\n            if(prefix == null){\n                throw new XMLStreamException(\"Namespace URI \"+namespaceURI +\n                        \"is not bound to any prefix\" );\n            }\n            String qualifiedName = null;\n            if(prefix.isEmpty()){\n                qualifiedName = localName;\n            }else{\n                qualifiedName = getQName(prefix,localName);\n            }\n            Attr attr = ownerDoc.createAttributeNS(namespaceURI, qualifiedName);\n            attr.setValue(value);\n            ((Element)currentNode).setAttributeNode(attr);\n        }else{\n            //Convert node type to String\n            throw new IllegalStateException(\"Current DOM Node type  is \"+ currentNode.getNodeType() +\n                    \"and does not allow attributes to be set \");\n        }\n    }\n    /**\n     * Creates a DOM Atrribute @see org.w3c.dom.Node and associates it with the current DOM element @see org.w3c.dom.Node.\n     * @param prefix {@inheritDoc}\n     * @param namespaceURI {@inheritDoc}\n     * @param localName {@inheritDoc}\n     * @param value {@inheritDoc}\n     * @throws javax.xml.stream.XMLStreamException {@inheritDoc}\n     */\n    public void writeAttribute(String prefix,String namespaceURI,String localName,String value)throws XMLStreamException {\n        if(currentNode.getNodeType() == Node.ELEMENT_NODE){\n            if(namespaceURI == null ){\n                throw new XMLStreamException(\"NamespaceURI cannot be null\");\n            }\n            if(localName == null){\n                throw new XMLStreamException(\"Local name cannot be null\");\n            }\n            if(prefix == null){\n                throw new XMLStreamException(\"prefix cannot be null\");\n            }\n            String qualifiedName = null;\n            if(prefix.isEmpty()){\n                qualifiedName = localName;\n            }else{\n                qualifiedName = getQName(prefix,localName);\n            }\n            Attr attr = ownerDoc.createAttributeNS(namespaceURI, qualifiedName);\n            attr.setValue(value);\n            ((Element)currentNode).setAttributeNodeNS(attr);\n        }else{\n            //Convert node type to String\n            throw new IllegalStateException(\"Current DOM Node type  is \"+ currentNode.getNodeType() +\n                    \"and does not allow attributes to be set \");\n        }\n    }\n    /**\n     * Creates a CDATA object @see org.w3c.dom.CDATASection.\n     * @param data {@inheritDoc}\n     * @throws javax.xml.stream.XMLStreamException {@inheritDoc}\n     */\n    public void writeCData(String data) throws XMLStreamException {\n        if(data == null){\n            throw new XMLStreamException(\"CDATA cannot be null\");\n        }\n        CDATASection cdata = ownerDoc.createCDATASection(data);\n        getNode().appendChild(cdata);\n    }\n    /**\n     * Creates a character object @see org.w3c.dom.Text and appends it to the current\n     * element in the DOM tree.\n     * @param charData {@inheritDoc}\n     * @throws javax.xml.stream.XMLStreamException {@inheritDoc}\n     */\n    public void writeCharacters(String charData) throws XMLStreamException {\n        Text text = ownerDoc.createTextNode(charData);\n        currentNode.appendChild(text);\n    }\n    /**\n     * Creates a character object @see org.w3c.dom.Text and appends it to the current\n     * element in the DOM tree.\n     * @param values {@inheritDoc}\n     * @param param {@inheritDoc}\n     * @param param2 {@inheritDoc}\n     * @throws javax.xml.stream.XMLStreamException {@inheritDoc}\n     */\n    public void writeCharacters(char[] values, int param, int param2) throws XMLStreamException {\n        Text text = ownerDoc.createTextNode(new String(values,param,param2));\n        currentNode.appendChild(text);\n    }\n    /**<fim_middle>// class below is blob\n"}