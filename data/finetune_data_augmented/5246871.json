{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.oozie.command;\n\nimport org.apache.oozie.client.Job;\n\n/**\n * Base class for submit transition command. The derived class has to override these following functions:\n * <p>\n * loadState() : load the job's and/or actions' state\n * submit() : submit the job\n * notifyParent() : update the status to upstream if any\n */\n<fim_suffix>public abstract class SubmitTransitionXCommand extends TransitionXCommand<String> {\n\n    /**\n     * The constructor for abstract class {@link SubmitTransitionXCommand}\n     *\n     * @param name the command name\n     * @param type the command type\n     * @param priority the command priority\n     */\n    public SubmitTransitionXCommand(String name, String type, int priority) {\n        super(name, type, priority);\n    }\n\n    /**\n     * The constructor for abstract class {@link SubmitTransitionXCommand}\n     *\n     * @param name the command name\n     * @param type the command type\n     * @param priority the command priority\n     * @param dryrun true if dryrun is enable\n     */\n    public SubmitTransitionXCommand(String name, String type, int priority, boolean dryrun) {\n        super(name, type, priority, dryrun);\n    }\n\n    /**\n     * Submit the job\n     *\n     * @return the id\n     * @throws CommandException thrown if unable to submit\n     */\n    protected abstract String submit() throws CommandException;\n\n    @Override\n    public void transitToNext() {\n        if (job == null) {\n            job = this.getJob();\n        }\n        job.setStatus(Job.Status.PREP);\n        job.resetPending();\n    }\n\n    @Override\n    protected String execute() throws CommandException {\n        try {\n            transitToNext();\n            String jobId = submit();\n            return jobId;\n        }\n        finally {\n            notifyParent();\n        }\n    }\n}<fim_middle>// class below has no smell\n"}