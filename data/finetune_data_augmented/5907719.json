{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the  \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * $Id$\n */\n\npackage org.apache.xalan.xsltc.compiler;\n\nimport java.util.Vector;\n\nimport org.apache.bcel.generic.InstructionList;\nimport org.apache.xalan.xsltc.compiler.util.ClassGenerator;\nimport org.apache.xalan.xsltc.compiler.util.MethodGenerator;\nimport org.apache.xalan.xsltc.compiler.util.Type;\nimport org.apache.xalan.xsltc.compiler.util.TypeCheckError;\n\n/**\n * @author Jacek Ambroziak\n * @author Santiago Pericas-Geertsen\n */\nfinal class NumberCall extends FunctionCall {\n\n    public NumberCall(QName fname, Vector arguments) {\n\tsuper(fname, arguments);\n    }\n\n<fim_suffix>    public Type typeCheck(SymbolTable stable) throws TypeCheckError {\n\tif (argumentCount() > 0) {\n\t    argument().typeCheck(stable);\n\t}\n\treturn _type = Type.Real;\n    }\n\n    public void translate(ClassGenerator classGen, MethodGenerator methodGen) {\n\tfinal InstructionList il = methodGen.getInstructionList();\n\tType targ;\n\t\n\tif (argumentCount() == 0) {\n\t    il.append(methodGen.loadContextNode());\n\t    targ = Type.Node;\n\t}\n\telse {\n\t    final Expression arg = argument();\n\t    arg.translate(classGen, methodGen);\n\t    arg.startIterator(classGen, methodGen);\n\t    targ = arg.getType();\n\t}\n\n\tif (!targ.identicalTo(Type.Real)) {\n\t    targ.translateTo(classGen, methodGen, Type.Real);\n\t}\n    }\n}<fim_middle>// function below has no smell\n"}