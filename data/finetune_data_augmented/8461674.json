{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.jcache.policy;\n\nimport java.util.Set;\nimport javax.cache.Cache;\nimport javax.cache.CacheManager;\nimport javax.cache.Caching;\nimport javax.cache.configuration.Configuration;\nimport javax.cache.configuration.MutableConfiguration;\n\nimport org.apache.camel.Expression;\nimport org.apache.camel.NamedNode;\nimport org.apache.camel.Processor;\nimport org.apache.camel.spi.Policy;\nimport org.apache.camel.spi.RouteContext;\nimport org.apache.camel.util.ObjectHelper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Policy for routes. It caches the final body of a route and next time takes it from the cache instead of executing the route.\n * The cache key is determined by the keyExpression (message body by default).\n * If there is an object in the cache under that key the rest of the route is not executed, but the cached object is added to the Exchange.\n *\n * Fields:\n * cache: JCache to use\n * cacheManager: If cache is not set, a new one is get or created using this cacheManager. If cacheManager is not set, we try to lookup one from CamelContext.\n * cacheName: Name of the cache to use or create. RouteId is used by default.\n * cacheConfiguration: CacheConfiguration used if a new cache is created. Using default MutableConfiguration if not set.\n * keyExpression: The Expression to generate the key for the cache. E.g simple(\"${header.username}\")\n * enabled: If JCachePolicy is not enabled, no policy is added to the route. Has an impact only during startup.\n */\npublic class JCachePolicy implements Policy {\n    private static final Logger LOG = LoggerFactory.getLogger(JCachePolicy.class);\n\n    private Cache cache;\n    private CacheManager cacheManager;\n    private String cacheName;\n    private Configuration cacheConfiguration;\n    private Expression keyExpression;\n    private boolean enabled = true;\n\n    @Override\n    public void beforeWrap(RouteContext routeContext, NamedNode namedNode) {\n\n    }\n\n    @Override\n    public Processor wrap(RouteContext routeContext, Processor processor) {\n        //Don't add JCachePolicyProcessor if JCachePolicy is disabled. This means enable/disable has impact only during startup\n        if (!isEnabled()) {\n            return processor;\n        }\n\n        Cache cache = this.cache;\n        if (cache == null) {\n            //Create cache based on given configuration\n\n            //Find CacheManager\n            CacheManager cacheManager = this.cacheManager;\n\n            //Lookup CacheManager from CamelContext if it's not set\n            if (cacheManager == null) {\n                Set<CacheManager> lookupResult = routeContext.getCamelContext().getRegistry().findByType(CacheManager.class);\n                if (ObjectHelper.isNotEmpty(lookupResult)) {\n\n                    //Use the first cache manager found\n                    cacheManager = lookupResult.iterator().next();\n                    LOG.debug(\"CacheManager from CamelContext registry: {}\", cacheManager);\n                }\n            }\n\n            //Lookup CacheManager the standard way\n            if (cacheManager == null) {\n                cacheManager = Caching.getCachingProvider().getCacheManager();\n                LOG.debug(\"CacheManager from CachingProvider: {}\", cacheManager);\n            }\n\n            //Use routeId as cacheName if it's not set\n            String cacheName = ObjectHelper.isNotEmpty(this.cacheName) ? this.cacheName : routeContext.getRoute().getId();\n            LOG.debug(\"Getting cache:{}\", cacheName);\n\n            //Get cache or create a new one using the cacheConfiguration\n            cache = cacheManager.getCache(cacheName);\n            if (cache == null) {\n                LOG.debug(\"Create cache:{}\", cacheName);\n                cache = cacheManager.createCache(cacheName,\n                        cacheConfiguration != null ? this.cacheConfiguration : (Configuration) new MutableConfiguration());\n            }\n\n        }\n\n        //Create processor\n        return new JCachePolicyProcessor(cache, keyExpression, processor);\n\n\n    }\n\n    public Cache getCache() {\n        return cache;\n    }\n\n    public void setCache(Cache cache) {\n        this.cache = cache;\n    }\n\n    public CacheManager getCacheManager() {\n        return cacheManager;\n    }\n\n    public void setCacheManager(CacheManager cacheManager) {\n        this.cacheManager = cacheManager;\n    }\n\n    public Configuration getCacheConfiguration() {\n        return cacheConfiguration;\n    }\n\n    public void setCacheConfiguration(Configuration cacheConfiguration) {\n        this.cacheConfiguration = cacheConfiguration;\n    }\n\n    public String getCacheName() {\n        return cacheName;\n    }\n\n    public void setCacheName(String cacheName) {\n        this.cacheName = cacheName;\n    }\n\n    public Expression getKeyExpression() {\n        return keyExpression;\n    }\n\n    public void setKeyExpression(Expression keyExpression) {\n        this.keyExpression = keyExpression;\n    }\n\n    public boolean isEnabled() {\n        return enabled;\n    }\n\n    public void setEnabled(boolean enabled) {\n        this.enabled = enabled;\n    }\n\n<fim_suffix>    @Override\n    public String toString() {\n        return \"JCachePolicy{\"\n                + \"keyExpression=\" + keyExpression\n                + \", enabled=\" + enabled\n                + '}';\n    }\n}<fim_middle>// function below has no smell\n"}