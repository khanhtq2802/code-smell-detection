{"text": "<fim_prefix> * <p/>\n * This class is automatically instantiated by the Eclipse runtime and wired through the\n * <tt>Bundle-Activator</tt> entry in the <tt>META-INF/MANIFEST.MF</tt> file. The registered\n * instance can be obtained during runtime through the {@link CorePlugin#getInstance()} method.\n * <p/>\n * Moreover, this is the entry point for accessing associated services. All service references\n * are accessible via static methods on this class.\n * <p/>\n * The {@link #start(BundleContext)} and {@link #stop(BundleContext)} methods' responsibility is to\n * assign and free the managed services along the plugin runtime lifecycle.\n */\n<fim_suffix>@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic final class CorePlugin extends Plugin {\n    public static final String PLUGIN_ID = \"org.eclipse.buildship.core\"; //$NON-NLS-1$\n    public static final String GRADLE_JOB_FAMILY = PLUGIN_ID + \".jobs\";\n    private static CorePlugin plugin;\n    // do not use generics-aware signature since this causes compilation troubles (JDK, Spock)\n    // search the web for -target jsr14 to find out more about this obscurity\n    private ServiceRegistration loggerService;\n    private ServiceRegistration publishedGradleVersionsService;\n    private ServiceRegistration workspaceOperationsService;\n    private ServiceRegistration internalGradleWorkspaceService;\n    private ServiceRegistration processStreamsProviderService;\n    private ServiceRegistration gradleLaunchConfigurationService;\n    private ServiceRegistration listenerRegistryService;\n    // service tracker for each service to allow to register other service implementations of the\n    // same type but with higher prioritization, useful for testing\n    private ServiceTracker loggerServiceTracker;\n    private ServiceTracker publishedGradleVersionsServiceTracker;\n    private ServiceTracker workspaceOperationsServiceTracker;\n    private ServiceTracker internalGradleWorkspaceServiceTracker;\n    private ServiceTracker processStreamsProviderServiceTracker;\n    private ServiceTracker gradleLaunchConfigurationServiceTracker;\n    private ServiceTracker listenerRegistryServiceTracker;\n    private DefaultModelPersistence modelPersistence;\n    private ProjectChangeListener projectChangeListener;\n    private SynchronizingBuildScriptUpdateListener buildScriptUpdateListener;\n    private InvocationCustomizer invocationCustomizer;\n    private ConfigurationManager configurationManager;\n    private DefaultExternalLaunchConfigurationManager externalLaunchConfigurationManager;\n    private ToolingApiOperationManager operationManager;\n    private ExtensionManager extensionManager;\n    @Override\n    public void start(BundleContext bundleContext) throws Exception {\n        super.start(bundleContext);\n        plugin = this;\n        ensureProxySettingsApplied();\n        registerServices(bundleContext);\n    }\n    @Override\n    public void stop(BundleContext context) throws Exception {\n        unregisterServices();\n        plugin = null;\n        super.stop(context);\n    }\n    private void ensureProxySettingsApplied() throws Exception {\n        // the proxy settings are set when the core.net plugin is started\n        Platform.getBundle(\"org.eclipse.core.net\").start(Bundle.START_TRANSIENT);\n    }\n    private void registerServices(BundleContext context) {\n        // store services with low ranking such that they can be overridden\n        // during testing or the like\n        Dictionary<String, Object> preferences = new Hashtable<>();\n        preferences.put(Constants.SERVICE_RANKING, 1);\n        // initialize service trackers before the services are created\n        this.loggerServiceTracker = createServiceTracker(context, Logger.class);\n        this.publishedGradleVersionsServiceTracker = createServiceTracker(context, PublishedGradleVersionsWrapper.class);\n        this.workspaceOperationsServiceTracker = createServiceTracker(context, WorkspaceOperations.class);\n        this.internalGradleWorkspaceServiceTracker = createServiceTracker(context, InternalGradleWorkspace.class);\n        this.processStreamsProviderServiceTracker = createServiceTracker(context, ProcessStreamsProvider.class);\n        this.gradleLaunchConfigurationServiceTracker = createServiceTracker(context, GradleLaunchConfigurationManager.class);\n        this.listenerRegistryServiceTracker = createServiceTracker(context, ListenerRegistry.class);\n        // register all services\n        this.loggerService = registerService(context, Logger.class, createLogger(), preferences);\n        this.publishedGradleVersionsService = registerService(context, PublishedGradleVersionsWrapper.class, createPublishedGradleVersions(), preferences);\n        this.workspaceOperationsService = registerService(context, WorkspaceOperations.class, createWorkspaceOperations(), preferences);\n        this.internalGradleWorkspaceService = registerService(context, InternalGradleWorkspace.class, createGradleWorkspace(), preferences);\n        this.processStreamsProviderService = registerService(context, ProcessStreamsProvider.class, createProcessStreamsProvider(), preferences);\n        this.gradleLaunchConfigurationService = registerService(context, GradleLaunchConfigurationManager.class, createGradleLaunchConfigurationManager(), preferences);\n        this.listenerRegistryService = registerService(context, ListenerRegistry.class, createListenerRegistry(), preferences);\n        this.modelPersistence = DefaultModelPersistence.createAndRegister();\n        this.projectChangeListener = ProjectChangeListener.createAndRegister();\n        this.buildScriptUpdateListener = SynchronizingBuildScriptUpdateListener.createAndRegister();\n        this.invocationCustomizer = new InvocationCustomizerCollector();\n        this.configurationManager = new DefaultConfigurationManager();\n        this.externalLaunchConfigurationManager = DefaultExternalLaunchConfigurationManager.createAndRegister();\n        this.operationManager = new DefaultToolingApiOperationManager();\n        this.extensionManager = new DefaultExtensionManager();\n    }\n    private ServiceTracker createServiceTracker(BundleContext context, Class<?> clazz) {\n        ServiceTracker serviceTracker = new ServiceTracker(context, clazz.getName(), null);\n        serviceTracker.open();\n        return serviceTracker;\n    }\n    private <T> ServiceRegistration registerService(BundleContext context, Class<T> clazz, T service, Dictionary<String, Object> properties) {\n        return context.registerService(clazz.getName(), service, properties);\n    }\n    private EclipseLogger createLogger() {\n        Map<TraceScope, Boolean> tracingEnablement = Maps.newHashMap();\n        for (TraceScope scope : CoreTraceScopes.values()) {\n            String option = Platform.getDebugOption(\"org.eclipse.buildship.core/trace/\" + scope.getScopeKey());\n            tracingEnablement.put(scope, \"true\".equalsIgnoreCase(option));\n        }\n        return new EclipseLogger(getLog(), PLUGIN_ID, tracingEnablement);\n    }\n    private PublishedGradleVersionsWrapper createPublishedGradleVersions() {\n        return new PublishedGradleVersionsWrapper();\n    }\n    private WorkspaceOperations createWorkspaceOperations() {\n        return new DefaultWorkspaceOperations();\n    }\n    private InternalGradleWorkspace createGradleWorkspace() {\n        return new DefaultGradleWorkspace();\n    }\n    private ProcessStreamsProvider createProcessStreamsProvider() {\n        return new StdProcessStreamsProvider();\n    }\n    private GradleLaunchConfigurationManager createGradleLaunchConfigurationManager() {\n        return new DefaultGradleLaunchConfigurationManager();\n    }\n    private ListenerRegistry createListenerRegistry() {\n        return new DefaultListenerRegistry();\n    }\n    private void unregisterServices() {\n        this.externalLaunchConfigurationManager.unregister();\n        this.buildScriptUpdateListener.close();\n        this.projectChangeListener.close();\n        this.modelPersistence.close();\n        this.listenerRegistryService.unregister();\n        this.gradleLaunchConfigurationService.unregister();\n        this.processStreamsProviderService.unregister();\n        this.internalGradleWorkspaceService.unregister();\n        this.workspaceOperationsService.unregister();\n        this.publishedGradleVersionsService.unregister();\n        this.loggerService.unregister();\n        this.listenerRegistryServiceTracker.close();\n        this.gradleLaunchConfigurationServiceTracker.close();\n        this.processStreamsProviderServiceTracker.close();\n        this.internalGradleWorkspaceServiceTracker.close();\n        this.workspaceOperationsServiceTracker.close();\n        this.publishedGradleVersionsServiceTracker.close();\n        this.loggerServiceTracker.close();\n    }\n    public static CorePlugin getInstance() {\n        return plugin;\n    }\n    public static Logger logger() {\n        return (Logger) getInstance().loggerServiceTracker.getService();\n    }\n    public static PublishedGradleVersionsWrapper publishedGradleVersions() {\n        return (PublishedGradleVersionsWrapper) getInstance().publishedGradleVersionsServiceTracker.getService();\n    }\n    public static WorkspaceOperations workspaceOperations() {\n        return (WorkspaceOperations) getInstance().workspaceOperationsServiceTracker.getService();\n    }\n    public static InternalGradleWorkspace internalGradleWorkspace() {\n        return (InternalGradleWorkspace) getInstance().internalGradleWorkspaceServiceTracker.getService();\n    }\n    public static ProcessStreamsProvider processStreamsProvider() {\n        return (ProcessStreamsProvider) getInstance().processStreamsProviderServiceTracker.getService();\n    }\n    public static GradleLaunchConfigurationManager gradleLaunchConfigurationManager() {\n        return (GradleLaunchConfigurationManager) getInstance().gradleLaunchConfigurationServiceTracker.getService();\n    }\n    public static ListenerRegistry listenerRegistry() {\n        return (ListenerRegistry) getInstance().listenerRegistryServiceTracker.getService();\n    }\n    public static ModelPersistence modelPersistence() {\n        return getInstance().modelPersistence;\n    }\n    public static InvocationCustomizer invocationCustomizer() {\n        return getInstance().invocationCustomizer;\n    }\n    public static ConfigurationManager configurationManager() {\n        return getInstance().configurationManager;\n    }\n    public static ExternalLaunchConfigurationManager externalLaunchConfigurationManager() {\n        return getInstance().externalLaunchConfigurationManager;\n    }\n    public static ToolingApiOperationManager operationManager() {\n        return getInstance().operationManager;\n    }\n    public static ExtensionManager extensionManager() {\n        return getInstance().extensionManager;\n    }\n}<fim_middle>// class below is blob\n"}