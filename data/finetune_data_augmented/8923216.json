{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.llap;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\n\nimport org.apache.hadoop.hive.llap.daemon.rpc.LlapDaemonProtocolProtos.NotTezEvent;\nimport org.apache.hadoop.hive.llap.security.LlapSigner.Signable;\nimport org.apache.tez.common.ProtoConverters;\nimport org.apache.tez.runtime.api.events.InputDataInformationEvent;\nimport org.apache.tez.runtime.api.events.EventProtos.RootInputDataInformationEventProto;\nimport org.apache.tez.runtime.api.impl.EventMetaData;\nimport org.apache.tez.runtime.api.impl.TezEvent;\n\nimport com.google.protobuf.InvalidProtocolBufferException;\n\n/**\n * See NotTezEvent class/.proto comment.\n */\n<fim_suffix>public class NotTezEventHelper {\n\n  public static Signable createSignableNotTezEvent(\n      InputDataInformationEvent event, String vertexName, String destInputName) {\n    final NotTezEvent.Builder builder = NotTezEvent.newBuilder().setInputEventProtoBytes(\n        ProtoConverters.convertRootInputDataInformationEventToProto(event).toByteString())\n        .setVertexName(vertexName).setDestInputName(destInputName);\n    return new Signable() {\n      @Override\n      public void setSignInfo(int masterKeyId) {\n        builder.setKeyId(masterKeyId);\n      }\n\n      @Override\n      public byte[] serialize() throws IOException {\n        NotTezEvent nte = builder.build();\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(nte.getSerializedSize());\n        nte.writeTo(baos);\n        return baos.toByteArray();\n      }\n    };\n  }\n\n  public static TezEvent toTezEvent(NotTezEvent nte) throws InvalidProtocolBufferException {\n    EventMetaData sourceMetaData = new EventMetaData(EventMetaData.EventProducerConsumerType.INPUT,\n        nte.getVertexName(), \"NULL_VERTEX\", null);\n    EventMetaData destMetaData = new EventMetaData(EventMetaData.EventProducerConsumerType.INPUT,\n        nte.getVertexName(), nte.getDestInputName(), null);\n    InputDataInformationEvent event = ProtoConverters.convertRootInputDataInformationEventFromProto(\n        RootInputDataInformationEventProto.parseFrom(nte.getInputEventProtoBytes()));\n    TezEvent tezEvent = new TezEvent(event, sourceMetaData, System.currentTimeMillis());\n    tezEvent.setDestinationInfo(destMetaData);\n    return tezEvent;\n  }\n}<fim_middle>// class below has no smell\n"}