{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.beam.runners.dataflow.worker;\n\nimport static org.apache.beam.runners.dataflow.util.Structs.getBytes;\nimport static org.apache.beam.vendor.guava.v20_0.com.google.common.base.Preconditions.checkState;\n\nimport com.google.api.services.dataflow.model.SideInputInfo;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport javax.annotation.Nullable;\nimport org.apache.beam.runners.dataflow.util.CloudObject;\nimport org.apache.beam.runners.dataflow.util.PropertyNames;\nimport org.apache.beam.runners.dataflow.worker.util.common.worker.ParDoFn;\nimport org.apache.beam.runners.dataflow.worker.util.common.worker.Receiver;\nimport org.apache.beam.sdk.options.PipelineOptions;\nimport org.apache.beam.sdk.transforms.windowing.BoundedWindow;\nimport org.apache.beam.sdk.transforms.windowing.WindowFn;\nimport org.apache.beam.sdk.util.WindowedValue;\nimport org.apache.beam.sdk.values.TupleTag;\nimport org.apache.beam.sdk.values.WindowingStrategy;\nimport org.apache.beam.vendor.guava.v20_0.com.google.common.collect.Iterables;\nimport org.joda.time.Instant;\n\n/**\n * A {@link ParDoFnFactory} to create instances of AssignWindowsDoFn according to specifications\n * from the Dataflow service.\n */\nclass AssignWindowsParDoFnFactory implements ParDoFnFactory {\n  @Override\n  public ParDoFn create(\n      PipelineOptions options,\n      CloudObject cloudUserFn,\n      List<SideInputInfo> sideInputInfos,\n      TupleTag<?> mainOutputTag,\n      Map<TupleTag<?>, Integer> outputTupleTagsToReceiverIndices,\n      DataflowExecutionContext<?> executionContext,\n      DataflowOperationContext operationContext)\n      throws Exception {\n\n    byte[] encodedWindowingStrategy = getBytes(cloudUserFn, PropertyNames.SERIALIZED_FN);\n\n    WindowingStrategy<?, ?> deserializedWindowingStrategy =\n        GroupAlsoByWindowParDoFnFactory.deserializeWindowingStrategy(encodedWindowingStrategy);\n\n    @SuppressWarnings(\"unchecked\")\n    WindowingStrategy<Object, BoundedWindow> windowingStrategy =\n        (WindowingStrategy<Object, BoundedWindow>) deserializedWindowingStrategy;\n\n    return new AssignWindowsParDoFn<>(\n        windowingStrategy.getWindowFn(), executionContext.getStepContext(operationContext));\n  }\n\n  private static class AssignWindowsParDoFn<T, W extends BoundedWindow> implements ParDoFn {\n    private final DataflowExecutionContext.DataflowStepContext stepContext;\n    private final WindowFn<T, W> windowFn;\n\n    @Nullable private Receiver receiver;\n\n    AssignWindowsParDoFn(\n        WindowFn<T, W> windowFn, DataflowExecutionContext.DataflowStepContext stepContext) {\n      this.stepContext = stepContext;\n      this.windowFn = windowFn;\n    }\n\n    @Override\n    public void startBundle(Receiver... receivers) throws Exception {\n      checkState(\n          receivers.length == 1,\n          \"%s.startBundle() called with %s receivers, expected exactly 1. \"\n              + \"This is a bug in the Dataflow service\",\n          getClass().getSimpleName(),\n          receivers.length);\n      receiver = receivers[0];\n    }\n\n<fim_suffix>    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void processElement(Object untypedElem) throws Exception {\n      WindowedValue<T> elem = (WindowedValue<T>) untypedElem;\n\n      Collection<W> windows =\n          windowFn.assignWindows(\n              windowFn.new AssignContext() {\n                @Override\n                public T element() {\n                  return elem.getValue();\n                }\n\n                @Override\n                public Instant timestamp() {\n                  return elem.getTimestamp();\n                }\n\n                @Override\n                public BoundedWindow window() {\n                  return Iterables.getOnlyElement(elem.getWindows());\n                }\n              });\n\n      WindowedValue<T> res =\n          WindowedValue.of(elem.getValue(), elem.getTimestamp(), windows, elem.getPane());\n      receiver.process(res);\n    }\n\n    @Override\n    public void processTimers() throws Exception {\n      // Nothing.\n    }\n\n    @Override\n    public void finishBundle() throws Exception {\n      receiver = null;\n    }\n\n    @Override\n    public void abort() throws Exception {\n      receiver = null;\n    }\n  }\n}<fim_middle>// function below has no smell\n"}