{"text": "<fim_prefix>// Copyright 2017 The Nomulus Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage google.registry.tools;\n\nimport com.beust.jcommander.Parameter;\nimport com.beust.jcommander.Parameters;\nimport google.registry.bigquery.BigqueryConnection;\nimport java.util.concurrent.Executors;\nimport org.joda.time.Duration;\n\n/** Parameter delegate class to handle flag settings for a command's BigqueryConnection object. */\n<fim_suffix>@Parameters(separators = \" =\")\nfinal class BigqueryParameters {\n\n  /**\n   * Default to 20 threads to stay within Bigquery's rate limit of 20 concurrent queries.\n   *\n   * @see <a href=\"https://cloud.google.com/bigquery/quota-policy\">BigQuery Quota Policy</a>\n   */\n  private static final int DEFAULT_NUM_THREADS = 20;\n\n  @Parameter(\n      names = \"--bigquery_dataset\",\n      description = \"Name of the default dataset to use, for reading and writing.\")\n  private String bigqueryDataset = BigqueryConnection.DEFAULT_DATASET_NAME;\n\n  @Parameter(\n      names = \"--bigquery_overwrite\",\n      description = \"Whether to automatically overwrite existing tables and views.\")\n  private boolean bigqueryOverwrite;\n\n  @Parameter(\n      names = \"--bigquery_poll_interval\",\n      description = \"Interval in milliseconds to wait between polls for job status.\")\n  private Duration bigqueryPollInterval = Duration.standardSeconds(1);\n\n  @Parameter(\n      names = \"--bigquery_num_threads\",\n      description = \"Number of threads for running simultaneous BigQuery operations.\")\n  private int bigqueryNumThreads = DEFAULT_NUM_THREADS;\n\n  /** Returns a new BigqueryConnection constructed according to the delegate's flag settings. */\n  BigqueryConnection newConnection(BigqueryConnection.Builder connectionBuilder) throws Exception {\n    BigqueryConnection connection =\n        connectionBuilder\n            .setExecutorService(Executors.newFixedThreadPool(bigqueryNumThreads))\n            .setDatasetId(bigqueryDataset)\n            .setOverwrite(bigqueryOverwrite)\n            .setPollInterval(bigqueryPollInterval)\n            .build();\n    return connection;\n  }\n}<fim_middle>// class below has no smell\n"}