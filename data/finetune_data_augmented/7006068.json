{"text": "<fim_prefix>package google.registry.testing;\n\n/**\n * A testing utility class that contains backports of useful but not yet released JUnit methods.\n *\n * <p>All of this code was taken directly from\n * https://github.com/junit-team/junit4/blob/a832c5afe5b0e7c2590d057a1a49a344d207f8a0/src/main/java/org/junit/Assert.java\n */\n<fim_suffix>public class JUnitBackports {\n  // TODO(b/68257761): Delete these and switch over to JUnit 4.13 methods upon release.\n\n  /**\n   * This interface facilitates the use of assertThrows from Java 8. It allows method references to\n   * void methods (that declare checked exceptions) to be passed directly into assertThrows without\n   * wrapping. It is not meant to be implemented directly.\n   *\n   * @since 4.13\n   */\n  public interface ThrowingRunnable {\n    void run() throws Throwable;\n  }\n\n  /**\n   * Asserts that {@code runnable} throws an exception of type {@code expectedThrowable} when\n   * executed. If it does, the exception object is returned. If it does not throw an exception, an\n   * {@link AssertionError} is thrown. If it throws the wrong type of exception, an {@code\n   * AssertionError} is thrown describing the mismatch; the exception that was actually thrown can\n   * be obtained by calling {@link AssertionError#getCause}.\n   *\n   * @param expectedThrowable the expected type of the exception\n   * @param runnable a function that is expected to throw an exception when executed\n   * @return the exception thrown by {@code runnable}\n   * @since 4.13\n   */\n  public static <T extends Throwable> T assertThrows(\n      Class<T> expectedThrowable, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable actualThrown) {\n      if (expectedThrowable.isInstance(actualThrown)) {\n        @SuppressWarnings(\"unchecked\")\n        T retVal = (T) actualThrown;\n        return retVal;\n      } else {\n        String expected = formatClass(expectedThrowable);\n        Class<? extends Throwable> actualThrowable = actualThrown.getClass();\n        String actual = formatClass(actualThrowable);\n        if (expected.equals(actual)) {\n          // There must be multiple class loaders. Add the identity hash code so the message\n          // doesn't say \"expected: java.lang.String<my.package.MyException> ...\"\n          expected += \"@\" + Integer.toHexString(System.identityHashCode(expectedThrowable));\n          actual += \"@\" + Integer.toHexString(System.identityHashCode(actualThrowable));\n        }\n        String mismatchMessage = format(\"unexpected exception type thrown;\", expected, actual);\n\n        // The AssertionError(String, Throwable) ctor is only available on JDK7.\n        AssertionError assertionError = new AssertionError(mismatchMessage);\n        assertionError.initCause(actualThrown);\n        throw assertionError;\n      }\n    }\n    String message =\n        String.format(\n            \"expected %s to be thrown, but nothing was thrown\", formatClass(expectedThrowable));\n    throw new AssertionError(message);\n  }\n\n  static String format(String message, Object expected, Object actual) {\n    String formatted = \"\";\n    if (message != null && !\"\".equals(message)) {\n      formatted = message + \" \";\n    }\n    String expectedString = String.valueOf(expected);\n    String actualString = String.valueOf(actual);\n    if (equalsRegardingNull(expectedString, actualString)) {\n      return formatted\n          + \"expected: \"\n          + formatClassAndValue(expected, expectedString)\n          + \" but was: \"\n          + formatClassAndValue(actual, actualString);\n    } else {\n      return formatted + \"expected:<\" + expectedString + \"> but was:<\" + actualString + \">\";\n    }\n  }\n\n  private static String formatClass(Class<?> value) {\n    String className = value.getCanonicalName();\n    return className == null ? value.getName() : className;\n  }\n\n  private static String formatClassAndValue(Object value, String valueString) {\n    String className = value == null ? \"null\" : value.getClass().getName();\n    return className + \"<\" + valueString + \">\";\n  }\n\n  private static boolean equalsRegardingNull(Object expected, Object actual) {\n    if (expected == null) {\n      return actual == null;\n    }\n\n    return isEquals(expected, actual);\n  }\n\n  private static boolean isEquals(Object expected, Object actual) {\n    return expected.equals(actual);\n  }\n}<fim_middle>// class below has no smell\n"}