{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.gobblin.metadata.types;\n\nimport java.io.IOException;\n\nimport org.apache.gobblin.metadata.MetadataMerger;\nimport org.apache.gobblin.writer.FsWriterMetrics;\n\n\n/**\n * Merges a set of GlobalMetadata objects that have been serialized as JSON together to\n * create a final output.\n */\n<fim_suffix>public class GlobalMetadataJsonMerger implements MetadataMerger<String> {\n  private GlobalMetadata mergedMetadata;\n\n  public GlobalMetadataJsonMerger() {\n    mergedMetadata = new GlobalMetadata();\n  }\n\n  @Override\n  public void update(String metadata) {\n    try {\n      GlobalMetadata parsedMetadata = GlobalMetadata.fromJson(metadata);\n      mergedMetadata.addAll(parsedMetadata);\n    } catch (IOException e) {\n      throw new IllegalArgumentException(\"Error parsing metadata\", e);\n    }\n  }\n\n  @Override\n  public void update(FsWriterMetrics metrics) {\n    long numRecords = mergedMetadata.getNumRecords();\n    int numFiles = mergedMetadata.getNumFiles();\n\n    for (FsWriterMetrics.FileInfo fileInfo: metrics.getFileInfos()) {\n      numRecords += fileInfo.getNumRecords();\n      numFiles += 1;\n\n      mergedMetadata.setFileMetadata(fileInfo.getFileName(), GlobalMetadata.NUM_RECORDS_KEY,\n          Long.valueOf(fileInfo.getNumRecords()));\n    }\n\n    mergedMetadata.setNumRecords(numRecords);\n    mergedMetadata.setNumOutputFiles(numFiles);\n  }\n\n  @Override\n  public String getMergedMetadata() {\n    try {\n      return mergedMetadata.toJson();\n    } catch (IOException e) {\n      throw new AssertionError(\"Unexpected IOException serializing to JSON\", e);\n    }\n  }\n}<fim_middle>// class below has no smell\n"}