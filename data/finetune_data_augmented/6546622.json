{"text": "<fim_prefix>\t//\tcommitISH=ALPHA_NUMERIC_CHARS;\n\tpublic URLVersionSpecifierElements getURLVersionSpecifierAccess() {\n\t\treturn pURLVersionSpecifier;\n\t}\n\tpublic ParserRule getURLVersionSpecifierRule() {\n\t\treturn getURLVersionSpecifierAccess().getRule();\n\t}\n\t//URLSemver:\n\t//\t{URLSemver} withSemverTag?=SEMVER_TAG?\n\t//\tsimpleVersion=SimpleVersion;\n\tpublic URLSemverElements getURLSemverAccess() {\n\t\treturn pURLSemver;\n\t}\n\tpublic ParserRule getURLSemverRule() {\n\t\treturn getURLSemverAccess().getRule();\n\t}\n\t////URLCommitISH:\n\t////\tcommitISH=ALPHA_NUMERIC_CHARS\n\t////;\n\t//TagVersionRequirement:\n\t//\ttagName=TAG;\n\tpublic TagVersionRequirementElements getTagVersionRequirementAccess() {\n\t\treturn pTagVersionRequirement;\n\t}\n\tpublic ParserRule getTagVersionRequirementRule() {\n\t\treturn getTagVersionRequirementAccess().getRule();\n\t}\n\t//GitHubVersionRequirement:\n\t//\tgithubUrl=URL_NO_VX ('#' commitISH=ALPHA_NUMERIC_CHARS)?;\n\tpublic GitHubVersionRequirementElements getGitHubVersionRequirementAccess() {\n\t\treturn pGitHubVersionRequirement;\n\t}\n\tpublic ParserRule getGitHubVersionRequirementRule() {\n\t\treturn getGitHubVersionRequirementAccess().getRule();\n\t}\n\t//VersionRangeSetRequirement:\n\t//\t{VersionRangeSetRequirement} (ranges+=VersionRange (WS* '||' WS* ranges+=VersionRange)* WS*)?;\n\tpublic VersionRangeSetRequirementElements getVersionRangeSetRequirementAccess() {\n\t\treturn pVersionRangeSetRequirement;\n\t}\n\tpublic ParserRule getVersionRangeSetRequirementRule() {\n\t\treturn getVersionRangeSetRequirementAccess().getRule();\n\t}\n\t//VersionRange:\n\t//\tVersionRangeContraint | HyphenVersionRange;\n\tpublic VersionRangeElements getVersionRangeAccess() {\n\t\treturn pVersionRange;\n\t}\n\tpublic ParserRule getVersionRangeRule() {\n\t\treturn getVersionRangeAccess().getRule();\n\t}\n\t//HyphenVersionRange VersionRange:\n\t//\t{HyphenVersionRange} from=VersionNumber WS+ '-' WS+ to=VersionNumber;\n\tpublic HyphenVersionRangeElements getHyphenVersionRangeAccess() {\n\t\treturn pHyphenVersionRange;\n\t}\n\tpublic ParserRule getHyphenVersionRangeRule() {\n\t\treturn getHyphenVersionRangeAccess().getRule();\n\t}\n\t//VersionRangeContraint VersionRange:\n\t//\t{VersionRangeConstraint} versionConstraints+=SimpleVersion (WS+ versionConstraints+=SimpleVersion)*;\n\tpublic VersionRangeContraintElements getVersionRangeContraintAccess() {\n\t\treturn pVersionRangeContraint;\n\t}\n\tpublic ParserRule getVersionRangeContraintRule() {\n\t\treturn getVersionRangeContraintAccess().getRule();\n\t}\n\t//SimpleVersion:\n\t//\t(comparators+=VersionComparator WS*)* withLetterV?=LETTER_V? number=VersionNumber;\n\tpublic SimpleVersionElements getSimpleVersionAccess() {\n\t\treturn pSimpleVersion;\n\t}\n\tpublic ParserRule getSimpleVersionRule() {\n\t\treturn getSimpleVersionAccess().getRule();\n\t}\n\t//VersionNumber:\n\t//\tmajor=VersionPart ('.' minor=VersionPart ('.' patch=VersionPart ('.' extended+=VersionPart)*)?)?\n\t//\tqualifier=Qualifier?;\n\tpublic VersionNumberElements getVersionNumberAccess() {\n\t\treturn pVersionNumber;\n\t}\n\tpublic ParserRule getVersionNumberRule() {\n\t\treturn getVersionNumberAccess().getRule();\n\t}\n\t//VersionPart:\n\t//\twildcard?=WILDCARD | numberRaw=DIGITS;\n\tpublic VersionPartElements getVersionPartAccess() {\n\t\treturn pVersionPart;\n\t}\n\tpublic ParserRule getVersionPartRule() {\n\t\treturn getVersionPartAccess().getRule();\n\t}\n\t//Qualifier:\n\t//\t'-' preRelease=QualifierTag | '+' buildMetadata=QualifierTag | '-' preRelease=QualifierTag '+'\n\t//\tbuildMetadata=QualifierTag;\n\tpublic QualifierElements getQualifierAccess() {\n\t\treturn pQualifier;\n\t}\n\tpublic ParserRule getQualifierRule() {\n\t\treturn getQualifierAccess().getRule();\n\t}\n\t//QualifierTag:\n\t//\tparts+=ALPHA_NUMERIC_CHARS ('.' parts+=ALPHA_NUMERIC_CHARS)*;\n\tpublic QualifierTagElements getQualifierTagAccess() {\n\t\treturn pQualifierTag;\n\t}\n\tpublic ParserRule getQualifierTagRule() {\n\t\treturn getQualifierTagAccess().getRule();\n\t}\n\t//FILE_TAG:\n\t//\tLETTER_F LETTER_I LETTER_L LETTER_E ':';\n\tpublic FILE_TAGElements getFILE_TAGAccess() {\n\t\treturn pFILE_TAG;\n\t}\n\tpublic ParserRule getFILE_TAGRule() {\n\t\treturn getFILE_TAGAccess().getRule();\n\t}\n\t//SEMVER_TAG:\n\t//\tLETTER_S LETTER_E LETTER_M LETTER_V LETTER_E LETTER_R ':';\n\tpublic SEMVER_TAGElements getSEMVER_TAGAccess() {\n\t\treturn pSEMVER_TAG;\n\t}\n\tpublic ParserRule getSEMVER_TAGRule() {\n\t\treturn getSEMVER_TAGAccess().getRule();\n\t}\n\t//PATH:\n\t//\t('/' | '.' | '@' | '-' | '_' | DIGITS | LETTER)+;\n\tpublic PATHElements getPATHAccess() {\n\t\treturn pPATH;\n\t}\n\tpublic ParserRule getPATHRule() {\n\t\treturn getPATHAccess().getRule();\n\t}\n\t//URL_PROTOCOL:\n\t//\tLETTER_NO_VX (LETTER | '+')+;\n\tpublic URL_PROTOCOLElements getURL_PROTOCOLAccess() {\n\t\treturn pURL_PROTOCOL;\n\t}\n\tpublic ParserRule getURL_PROTOCOLRule() {\n\t\treturn getURL_PROTOCOLAccess().getRule();\n\t}\n\t//URL:\n\t//\t('-' | '_' | DIGITS | LETTER)* ('/' | '.' | ':' | '@') ('/' | '.' | ':' | '@' | '-' | '_' | DIGITS | LETTER)*;\n\tpublic URLElements getURLAccess() {\n\t\treturn pURL;\n\t}\n\tpublic ParserRule getURLRule() {\n\t\treturn getURLAccess().getRule();\n\t}\n\t//URL_NO_VX:\n\t//\t('-' | '_' | LETTER_NO_VX) ('-' | '_' | DIGITS | LETTER)* ('/' | '.' | ':' | '@') ('/' | '.' | ':' | '@' | '-' | '_' |\n\t//\tDIGITS | LETTER)*;\n\tpublic URL_NO_VXElements getURL_NO_VXAccess() {\n\t\treturn pURL_NO_VX;\n\t}\n\tpublic ParserRule getURL_NO_VXRule() {\n\t\treturn getURL_NO_VXAccess().getRule();\n\t}\n\t//TAG:\n\t//\tLETTER_NO_VX /*| LETTER_X*/ ('-' | DIGITS | LETTER)+;\n\tpublic TAGElements getTAGAccess() {\n\t\treturn pTAG;\n\t}\n\tpublic ParserRule getTAGRule() {\n\t\treturn getTAGAccess().getRule();\n\t}\n\t//ALPHA_NUMERIC_CHARS:\n\t//\t('-' | DIGITS | LETTER)+;\n\tpublic ALPHA_NUMERIC_CHARSElements getALPHA_NUMERIC_CHARSAccess() {\n\t\treturn pALPHA_NUMERIC_CHARS;\n\t}\n\tpublic ParserRule getALPHA_NUMERIC_CHARSRule() {\n\t\treturn getALPHA_NUMERIC_CHARSAccess().getRule();\n\t}\n\t//ALPHA_NUMERIC_CHARS_START_WITH_DIGITS:\n\t//\tDIGITS ('-' | DIGITS | LETTER)+;\n\tpublic ALPHA_NUMERIC_CHARS_START_WITH_DIGITSElements getALPHA_NUMERIC_CHARS_START_WITH_DIGITSAccess() {\n\t\treturn pALPHA_NUMERIC_CHARS_START_WITH_DIGITS;\n\t}\n\tpublic ParserRule getALPHA_NUMERIC_CHARS_START_WITH_DIGITSRule() {\n\t\treturn getALPHA_NUMERIC_CHARS_START_WITH_DIGITSAccess().getRule();\n\t}\n\t//WILDCARD:\n\t//\tLETTER_X | ASTERIX;\n<fim_suffix>\tpublic WILDCARDElements getWILDCARDAccess() {\n\t\treturn pWILDCARD;\n\t}<fim_middle>// function below has no smell\n"}