{"text": "<fim_prefix>package org.cloudfoundry.identity.uaa.account;\n\nimport org.cloudfoundry.identity.uaa.authentication.UaaAuthentication;\nimport org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetails;\nimport org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\nimport org.cloudfoundry.identity.uaa.constants.OriginKeys;\nimport org.cloudfoundry.identity.uaa.error.UaaException;\nimport org.cloudfoundry.identity.uaa.user.UaaUser;\nimport org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\nimport org.hibernate.validator.constraints.Email;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.authentication.AnonymousAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.validation.Valid;\nimport java.util.Map;\n\n\n@Controller\npublic class ChangeEmailController {\n\n    private final ChangeEmailService changeEmailService;\n\n    private UaaUserDatabase uaaUserDatabase;\n\n    public void setUaaUserDatabase(UaaUserDatabase uaaUserDatabase) {\n        this.uaaUserDatabase = uaaUserDatabase;\n    }\n\n    public ChangeEmailController(ChangeEmailService changeEmailService) {\n        this.changeEmailService = changeEmailService;\n    }\n\n    @RequestMapping(value = \"/change_email\", method = RequestMethod.GET)\n    public String changeEmailPage(Model model, @RequestParam(value = \"client_id\", required = false) String clientId,\n                                  @RequestParam(value = \"redirect_uri\", required = false) String redirectUri) {\n        SecurityContext securityContext = SecurityContextHolder.getContext();\n        model.addAttribute(\"email\", ((UaaPrincipal)securityContext.getAuthentication().getPrincipal()).getEmail());\n        model.addAttribute(\"client_id\", clientId);\n        model.addAttribute(\"redirect_uri\", redirectUri);\n        return \"change_email\";\n    }\n\n    @RequestMapping(value = \"/change_email.do\", method = RequestMethod.POST)\n    public String changeEmail(Model model, @Valid @ModelAttribute(\"newEmail\") ValidEmail newEmail, BindingResult result,\n                              @RequestParam(required = false, value = \"client_id\") String clientId,\n                              @RequestParam(required = false, value = \"redirect_uri\") String redirectUri,\n                              RedirectAttributes redirectAttributes, HttpServletResponse response) {\n        SecurityContext securityContext = SecurityContextHolder.getContext();\n\n        if(result.hasErrors()) {\n            model.addAttribute(\"error_message_code\", \"invalid_email\");\n            model.addAttribute(\"email\", ((UaaPrincipal)securityContext.getAuthentication().getPrincipal()).getEmail());\n            response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());\n            return \"change_email\";\n        }\n        String origin = ((UaaPrincipal)securityContext.getAuthentication().getPrincipal()).getOrigin();\n        if (!origin.equals(OriginKeys.UAA)) {\n            redirectAttributes.addAttribute(\"error_message_code\", \"email_change.non-uaa-origin\");\n            return \"redirect:profile\";\n        }\n\n        String userId = ((UaaPrincipal)securityContext.getAuthentication().getPrincipal()).getId();\n        String userEmail = ((UaaPrincipal)securityContext.getAuthentication().getPrincipal()).getName();\n\n        try {\n            changeEmailService.beginEmailChange(userId, userEmail, newEmail.getNewEmail(), clientId, redirectUri);\n        } catch (UaaException e) {\n            if (e.getHttpStatus() == 409) {\n                model.addAttribute(\"error_message_code\", \"username_exists\");\n                model.addAttribute(\"email\", ((UaaPrincipal)securityContext.getAuthentication().getPrincipal()).getEmail());\n                response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());\n                return \"change_email\";\n            }\n        }\n\n        return \"redirect:email_sent?code=email_change\";\n    }\n\n    @RequestMapping(value = \"/verify_email\", method = RequestMethod.GET)\n    public String verifyEmail(Model model, @RequestParam(\"code\") String code, RedirectAttributes redirectAttributes,\n                              HttpServletResponse httpServletResponse, HttpServletRequest request) {\n        Map<String,String> response;\n\n        try {\n            response = changeEmailService.completeVerification(code);\n        } catch (UaaException e) {\n            return handleExceptionConsideringAuthentication(model, httpServletResponse);\n        }\n\n        UaaUser user;\n        try {\n            user = uaaUserDatabase.retrieveUserById(response.get(\"userId\"));\n        } catch (UsernameNotFoundException e) {\n            return handleExceptionConsideringAuthentication(model, httpServletResponse);\n        }\n\n\n        String redirectLocation = response.get(\"redirect_url\");\n\n        if (SecurityContextHolder.getContext().getAuthentication() instanceof UaaAuthentication) {\n            UaaAuthentication oldAuthentication = (UaaAuthentication)SecurityContextHolder.getContext().getAuthentication();\n            String authenticatedId = oldAuthentication.getPrincipal().getId();\n            if (authenticatedId.equals(user.getId())) {\n                UaaAuthenticationDetails details = new UaaAuthenticationDetails(request);\n                UaaAuthentication success = new UaaAuthentication(new UaaPrincipal(user), user.getAuthorities(), details);\n                success.setAuthenticationMethods(oldAuthentication.getAuthenticationMethods());\n                SecurityContextHolder.getContext().setAuthentication(success);\n            }\n            if (redirectLocation == null) {\n                redirectLocation = \"profile\";\n                redirectAttributes.addAttribute(\"success_message_code\", \"email_change.success\");\n            }\n            return \"redirect:\" + redirectLocation;\n        } else {\n            if (redirectLocation == null) {\n                return \"redirect:login?success=change_email_success\";\n            } else {\n                return \"redirect:login?success=change_email_success&form_redirect_uri=\" + redirectLocation;\n            }\n        }\n    }\n\n    private String handleExceptionConsideringAuthentication(Model model, HttpServletResponse httpServletResponse) {\n        if (SecurityContextHolder.getContext().getAuthentication() instanceof AnonymousAuthenticationToken) {\n            model.addAttribute(\"error_message_code\", \"email_change.invalid_code\");\n            httpServletResponse.setStatus(422);\n            return \"error\";\n        }\n        else {\n            return \"redirect:profile?error_message_code=email_change.invalid_code\";\n        }\n    }\n\n<fim_suffix>    public static class ValidEmail {\n        @Email\n        String newEmail;\n\n        public String getNewEmail() {\n            return newEmail;\n        }\n\n        public void setNewEmail(String email) {\n            this.newEmail = email;\n        }\n    }\n}<fim_middle>// class below is data class\n"}