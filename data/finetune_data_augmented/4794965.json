{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.shardingsphere.core.execute.sql.execute.result;\nimport com.google.common.base.Optional;\nimport lombok.SneakyThrows;\nimport org.apache.shardingsphere.core.strategy.encrypt.ShardingEncryptorEngine;\nimport org.apache.shardingsphere.spi.encrypt.ShardingEncryptor;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.math.BigDecimal;\nimport java.net.URL;\nimport java.sql.Blob;\nimport java.sql.Clob;\nimport java.sql.Date;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.SQLXML;\nimport java.sql.Time;\nimport java.sql.Timestamp;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport java.util.Map;\n/**\n * Query result for stream loading.\n *\n * @author zhangliang\n * @author panjuan\n */\npublic final class StreamQueryResult implements QueryResult {\n    private final QueryResultMetaData metaData;\n    private final ResultSet resultSet;\n    @SneakyThrows\n    public StreamQueryResult(final ResultSet resultSet, final Map<String, Collection<String>> logicAndActualTables, final ShardingEncryptorEngine shardingEncryptorEngine) {\n        this.resultSet = resultSet;\n        metaData = new QueryResultMetaData(resultSet.getMetaData(), logicAndActualTables, shardingEncryptorEngine);\n    }\n    @SneakyThrows\n    public StreamQueryResult(final ResultSet resultSet) {\n        this.resultSet = resultSet;\n        metaData = new QueryResultMetaData(resultSet.getMetaData());\n    }\n    @Override\n    public boolean next() throws SQLException {\n        return resultSet.next();\n    }\n    @Override\n    public Object getValue(final int columnIndex, final Class<?> type) throws SQLException {\n        Object result;\n        if (Object.class == type) {\n            result = decrypt(columnIndex, resultSet.getObject(columnIndex));\n        } else if (boolean.class == type) {\n            result = decrypt(columnIndex, resultSet.getBoolean(columnIndex));\n        } else if (byte.class == type) {\n            result = decrypt(columnIndex, resultSet.getByte(columnIndex));\n        } else if (short.class == type) {\n            result = decrypt(columnIndex, resultSet.getShort(columnIndex));\n        } else if (int.class == type) {\n            result = decrypt(columnIndex, resultSet.getInt(columnIndex));\n        } else if (long.class == type) {\n            result = decrypt(columnIndex, resultSet.getLong(columnIndex));\n        } else if (float.class == type) {\n            result = decrypt(columnIndex, resultSet.getFloat(columnIndex));\n        } else if (double.class == type) {\n            result = decrypt(columnIndex, resultSet.getDouble(columnIndex));\n        } else if (String.class == type) {\n            result = decrypt(columnIndex, resultSet.getString(columnIndex));\n        } else if (BigDecimal.class == type) {\n            result = decrypt(columnIndex, resultSet.getBigDecimal(columnIndex));\n        } else if (byte[].class == type) {\n            result = resultSet.getBytes(columnIndex);\n        } else if (Date.class == type) {\n            result = resultSet.getDate(columnIndex);\n        } else if (Time.class == type) {\n            result = resultSet.getTime(columnIndex);\n        } else if (Timestamp.class == type) {\n            result = resultSet.getTimestamp(columnIndex);\n        } else if (URL.class == type) {\n            result = resultSet.getURL(columnIndex);\n        } else if (Blob.class == type) {\n            result = resultSet.getBlob(columnIndex);\n        } else if (Clob.class == type) {\n            result = resultSet.getClob(columnIndex);\n        } else if (SQLXML.class == type) {\n            result = resultSet.getSQLXML(columnIndex);\n        } else if (Reader.class == type) {\n            result = resultSet.getCharacterStream(columnIndex);\n        } else {\n            result = decrypt(columnIndex, resultSet.getObject(columnIndex));\n        }\n        return result;\n    }\n<fim_suffix>    @Override\n    public Object getValue(final String columnLabel, final Class<?> type) throws SQLException {\n        Object result;\n        if (Object.class == type) {\n            result = decrypt(columnLabel, resultSet.getObject(columnLabel));\n        } else if (boolean.class == type) {\n            result = decrypt(columnLabel, resultSet.getBoolean(columnLabel));\n        } else if (byte.class == type) {\n            result = decrypt(columnLabel, resultSet.getByte(columnLabel));\n        } else if (short.class == type) {\n            result = decrypt(columnLabel, resultSet.getShort(columnLabel));\n        } else if (int.class == type) {\n            result = decrypt(columnLabel, resultSet.getInt(columnLabel));\n        } else if (long.class == type) {\n            result = decrypt(columnLabel, resultSet.getLong(columnLabel));\n        } else if (float.class == type) {\n            result = decrypt(columnLabel, resultSet.getFloat(columnLabel));\n        } else if (double.class == type) {\n            result = decrypt(columnLabel, resultSet.getDouble(columnLabel));\n        } else if (String.class == type) {\n            result = decrypt(columnLabel, resultSet.getString(columnLabel));\n        } else if (BigDecimal.class == type) {\n            result = decrypt(columnLabel, resultSet.getBigDecimal(columnLabel));\n        } else if (byte[].class == type) {\n            result = resultSet.getBytes(columnLabel);\n        } else if (Date.class == type) {\n            result = resultSet.getDate(columnLabel);\n        } else if (Time.class == type) {\n            result = resultSet.getTime(columnLabel);\n        } else if (Timestamp.class == type) {\n            result = resultSet.getTimestamp(columnLabel);\n        } else if (URL.class == type) {\n            result = resultSet.getURL(columnLabel);\n        } else if (Blob.class == type) {\n            result = resultSet.getBlob(columnLabel);\n        } else if (Clob.class == type) {\n            result = resultSet.getClob(columnLabel);\n        } else if (SQLXML.class == type) {\n            result = resultSet.getSQLXML(columnLabel);\n        } else if (Reader.class == type) {\n            result = resultSet.getCharacterStream(columnLabel);\n        } else {\n            result = decrypt(columnLabel, resultSet.getObject(columnLabel));\n        }\n        return result;\n    }\n    @Override\n    public Object getCalendarValue(final int columnIndex, final Class<?> type, final Calendar calendar) throws SQLException {\n        if (Date.class == type) {\n            return resultSet.getDate(columnIndex, calendar);\n        }\n        if (Time.class == type) {\n            return resultSet.getTime(columnIndex, calendar);\n        }\n        if (Timestamp.class == type) {\n            return resultSet.getTimestamp(columnIndex, calendar);\n        }\n        throw new SQLException(String.format(\"Unsupported type: %s\", type));\n    }\n    @Override\n    public Object getCalendarValue(final String columnLabel, final Class<?> type, final Calendar calendar) throws SQLException {\n        if (Date.class == type) {\n            return resultSet.getDate(columnLabel, calendar);\n        }\n        if (Time.class == type) {\n            return resultSet.getTime(columnLabel, calendar);\n        }\n        if (Timestamp.class == type) {\n            return resultSet.getTimestamp(columnLabel, calendar);\n        }\n        throw new SQLException(String.format(\"Unsupported type: %s\", type));\n    }\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public InputStream getInputStream(final int columnIndex, final String type) throws SQLException {\n        switch (type) {\n            case \"Ascii\":\n                return resultSet.getAsciiStream(columnIndex);\n            case \"Unicode\":\n                return resultSet.getUnicodeStream(columnIndex);\n            case \"Binary\":\n                return resultSet.getBinaryStream(columnIndex);\n            default:\n                throw new SQLException(String.format(\"Unsupported type: %s\", type));\n        }\n    }\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public InputStream getInputStream(final String columnLabel, final String type) throws SQLException {\n        switch (type) {\n            case \"Ascii\":\n                return resultSet.getAsciiStream(columnLabel);\n            case \"Unicode\":\n                return resultSet.getUnicodeStream(columnLabel);\n            case \"Binary\":<fim_middle>// function below is long method\n"}