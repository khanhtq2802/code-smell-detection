{"text": "<fim_prefix>\n<fim_suffix>public class StringFunctions {\n    /** @deprecated since 0.9.0 kept only to allow conversion of anonymous inner classes */\n    @SuppressWarnings(\"unused\") @Deprecated \n    private static Function<String,String> appendOld(final String suffix) {\n        // TODO PERSISTENCE WORKAROUND\n        return new Function<String, String>() {\n            @Override\n            @Nullable\n            public String apply(@Nullable String input) {\n                if (input==null) return null;\n                return input + suffix;\n            }\n        };\n    }\n    /** @deprecated since 0.9.0 kept only to allow conversion of anonymous inner classes */\n    @SuppressWarnings(\"unused\") @Deprecated \n    private static Function<String,String> prependOld(final String prefix) {\n        // TODO PERSISTENCE WORKAROUND\n        return new Function<String, String>() {\n            @Override\n            @Nullable\n            public String apply(@Nullable String input) {\n                if (input==null) return null;\n                return prefix + input;\n            }\n        };\n    }\n    /** @deprecated since 0.9.0 kept only to allow conversion of anonymous inner classes */\n    @SuppressWarnings(\"unused\") @Deprecated \n    private static Function<Object, String> formatterOld(final String pattern) {\n        // TODO PERSISTENCE WORKAROUND\n        return new Function<Object, String>() {\n            public String apply(@Nullable Object input) {\n                return String.format(pattern, input);\n            }\n        };\n    }\n    /** @deprecated since 0.9.0 kept only to allow conversion of anonymous inner classes */\n    @SuppressWarnings(\"unused\") @Deprecated \n    private static Function<Object[], String> formatterForArrayOld(final String pattern) {\n        // TODO PERSISTENCE WORKAROUND\n        return new Function<Object[], String>() {\n            public String apply(@Nullable Object[] input) {\n                return String.format(pattern, input);\n            }\n        };\n    }\n    /** @deprecated since 0.9.0 kept only to allow conversion of anonymous inner classes */\n    @SuppressWarnings(\"unused\") @Deprecated \n    private static Function<Iterable<?>, String> joinerOld(final String separator) {\n        // TODO PERSISTENCE WORKAROUND\n        return new Function<Iterable<?>, String>() {\n            public String apply(@Nullable Iterable<?> input) {\n                return Strings.join(input, separator);\n            }\n        };\n    }\n    /** @deprecated since 0.9.0 kept only to allow conversion of anonymous inner classes */\n    @SuppressWarnings(\"unused\") @Deprecated \n    private static Function<Object[], String> joinerForArrayOld(final String separator) {\n        // TODO PERSISTENCE WORKAROUND\n        return new Function<Object[], String>() {\n            public String apply(@Nullable Object[] input) {\n                if (input == null) return Strings.EMPTY;\n                return Strings.join(input, separator);\n            }\n        };\n    }\n    /** @deprecated since 0.9.0 kept only to allow conversion of anonymous inner classes */\n    @SuppressWarnings(\"unused\") @Deprecated \n    private static Function<String,Integer> lengthOld() {\n        // TODO PERSISTENCE WORKAROUND\n        return new Function<String,Integer>() {\n            @Override\n            public Integer apply(@Nullable String input) {\n                if (input == null) return -1;\n                return input.length();\n            }\n        };\n    }\n    /** @deprecated since 0.9.0 kept only to allow conversion of anonymous inner classes */\n    @SuppressWarnings(\"unused\") @Deprecated \n    private static Function<String,String> surroundOld(final String prefix, final String suffix) {\n        // TODO PERSISTENCE WORKAROUND\n        return new Function<String,String>() {\n            @Override\n            public String apply(@Nullable String input) {\n                if (input == null) return null;\n                return prefix+input+suffix;\n            }\n        };\n    }\n    /** @deprecated since 0.9.0 kept only to allow conversion of anonymous inner classes */\n    @SuppressWarnings(\"unused\") @Deprecated \n    private static Function<String, String> trimOld() {\n        // TODO PERSISTENCE WORKAROUND\n        return new Function<String, String>() {\n            @Override\n            public String apply(@Nullable String input) {\n                if (input == null) return null;\n                if (Strings.isBlank(input)) return Strings.EMPTY;\n                return CharMatcher.BREAKING_WHITESPACE.trimFrom(input);\n            }\n        };\n    }\n    /** @deprecated since 0.9.0 kept only to allow conversion of anonymous inner classes */\n    @SuppressWarnings(\"unused\") @Deprecated \n    private static Function<String, String> toLowerCaseOld() {\n        // TODO PERSISTENCE WORKAROUND\n        return new Function<String, String>() {\n            @Override\n            public String apply(String input) {\n                return input.toLowerCase();\n            }\n        };\n    }\n    /** @deprecated since 0.9.0 kept only to allow conversion of anonymous inner classes */\n    @SuppressWarnings(\"unused\") @Deprecated \n    private static Function<String, String> toUpperCaseOld() {\n        // TODO PERSISTENCE WORKAROUND\n        return new Function<String, String>() {\n            @Override\n            public String apply(String input) {\n                return input.toUpperCase();\n            }\n        };\n    }\n    /** @deprecated since 0.9.0 kept only to allow conversion of anonymous inner classes */\n    @SuppressWarnings(\"unused\") @Deprecated \n    private static Function<String, String> convertCaseOld(final CaseFormat src, final CaseFormat target) {\n        // TODO PERSISTENCE WORKAROUND\n        return new Function<String, String>() {\n            @Override\n            public String apply(String input) {\n                return src.to(target, input);\n            }\n        };\n    }\n    public static Function<String,String> append(final String suffix) {\n        return new AppendFunction(checkNotNull(suffix, \"suffix\"));\n    }\n    private static class AppendFunction implements Function<String, String> {\n        private final String suffix;\n        public AppendFunction(String suffix) {\n            this.suffix = suffix;\n        }\n        @Override\n        @Nullable\n        public String apply(@Nullable String input) {\n            if (input==null) return null;\n            return input + suffix;\n        }\n    };\n    public static Function<String,String> prepend(final String prefix) {\n        return new PrependFunction(checkNotNull(prefix, \"prefix\"));\n    }\n    protected static class PrependFunction implements Function<String, String> {\n        private final String prefix;\n        public PrependFunction(String prefix) {\n            this.prefix = prefix;\n        }\n        @Override\n        @Nullable\n        public String apply(@Nullable String input) {\n            if (input==null) return null;\n            return prefix + input;\n        }\n    }\n    /** given e.g. \"hello %s\" returns a function which will insert a string into that pattern */\n    public static Function<Object, String> formatter(final String pattern) {\n        return new FormatterFunction(pattern);\n    }\n    protected static class FormatterFunction implements Function<Object, String> {\n        private final String pattern;\n        FormatterFunction(String pattern) {\n            this.pattern = pattern;\n        }\n        public String apply(@Nullable Object input) {\n            return String.format(pattern, input);\n        }\n    };\n    /** given e.g. \"hello %s %s\" returns a function which will insert an array of two strings into that pattern */\n    public static Function<Object[], String> formatterForArray(final String pattern) {\n        return new FormatterForArrayFunction(checkNotNull(pattern, \"pattern\"));\n    }\n    protected static class FormatterForArrayFunction implements Function<Object[], String> {\n        private final String pattern;\n        public FormatterForArrayFunction(String pattern) {\n            this.pattern = pattern;\n        }\n        public String apply(@Nullable Object[] input) {\n            return String.format(pattern, input);\n        }\n    }\n    /** \n     * Given e.g. \"hello %s %s\" returns a function which will insert an Iterable of two strings into that pattern\n     * \n     * @since 0.9.0\n     */\n    public static Function<Iterable<?>, String> formatterForIterable(final String pattern) {\n        return new FormatterForIterableFunction(pattern);\n    }\n    protected static class FormatterForIterableFunction implements Function<Iterable<?>, String> {\n        final String pattern;\n        public FormatterForIterableFunction(String pattern) {\n            this.pattern = pattern;\n        }\n        public String apply(@Nullable Iterable<?> input) {\n            Object[] arr = (input == null) ? null : Iterables.toArray(input, Object.class);\n            return String.format(pattern, arr);\n        }\n    }\n    /** joins the given objects in a collection as a toString with the given separator */\n    public static Function<Iterable<?>, String> joiner(final String separator) {\n        return new JoinerFunction(separator);\n    }\n    private static class JoinerFunction implements Function<Iterable<?>, String> {\n        private final String separator;\n        public JoinerFunction(String separator) {\n            this.separator = separator;\n        }\n        public String apply(@Nullable Iterable<?> input) {\n            return Strings.join(input, separator);\n        }\n    }\n    /** joins the given objects as a toString with the given separator, but expecting an array of objects, not a collection */\n    public static Function<Object[], String> joinerForArray(final String separator) {\n        return new JoinerForArrayFunction(checkNotNull(separator, \"separator\"));\n    }\n    private static class JoinerForArrayFunction implements Function<Object[], String> {<fim_middle>// class below is blob\n"}