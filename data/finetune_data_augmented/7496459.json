{"text": "<fim_prefix>\t\t\tthrow convertLettuceAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisServerCommands#flushDb()\n\t */\n\t@Override\n\tpublic void flushDb() {\n\t\ttry {\n\t\t\tif (isPipelined()) {\n\t\t\t\tpipeline(connection.newLettuceStatusResult(getAsyncConnection().flushdb()));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (isQueueing()) {\n\t\t\t\ttransaction(connection.newLettuceStatusResult(getAsyncConnection().flushdb()));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgetConnection().flushdb();\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertLettuceAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisServerCommands#flushAll()\n\t */\n\t@Override\n\tpublic void flushAll() {\n\t\ttry {\n\t\t\tif (isPipelined()) {\n\t\t\t\tpipeline(connection.newLettuceStatusResult(getAsyncConnection().flushall()));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (isQueueing()) {\n\t\t\t\ttransaction(connection.newLettuceResult(getAsyncConnection().flushall()));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgetConnection().flushall();\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertLettuceAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisServerCommands#info()\n\t */\n\t@Override\n\tpublic Properties info() {\n\t\ttry {\n\t\t\tif (isPipelined()) {\n\t\t\t\tpipeline(connection.newLettuceResult(getAsyncConnection().info(), LettuceConverters.stringToProps()));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (isQueueing()) {\n\t\t\t\ttransaction(connection.newLettuceResult(getAsyncConnection().info(), LettuceConverters.stringToProps()));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn LettuceConverters.toProperties(getConnection().info());\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertLettuceAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisServerCommands#info(java.lang.String)\n\t */\n\t@Override\n\tpublic Properties info(String section) {\n\t\tAssert.hasText(section, \"Section must not be null or empty!\");\n\t\ttry {\n\t\t\tif (isPipelined()) {\n\t\t\t\tpipeline(connection.newLettuceResult(getAsyncConnection().info(section), LettuceConverters.stringToProps()));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (isQueueing()) {\n\t\t\t\ttransaction(connection.newLettuceResult(getAsyncConnection().info(section), LettuceConverters.stringToProps()));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn LettuceConverters.toProperties(getConnection().info(section));\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertLettuceAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisServerCommands#shutdown()\n\t */\n\t@Override\n\tpublic void shutdown() {\n\t\ttry {\n\t\t\tif (isPipelined()) {\n\t\t\t\tgetAsyncConnection().shutdown(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgetConnection().shutdown(true);\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertLettuceAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisServerCommands#shutdown(org.springframework.data.redis.connection.RedisServerCommands.ShutdownOption)\n\t */\n\t@Override\n\tpublic void shutdown(ShutdownOption option) {\n\t\tif (option == null) {\n\t\t\tshutdown();\n\t\t\treturn;\n\t\t}\n\t\tboolean save = ShutdownOption.SAVE.equals(option);\n\t\ttry {\n\t\t\tif (isPipelined()) {\n\t\t\t\tgetAsyncConnection().shutdown(save);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgetConnection().shutdown(save);\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertLettuceAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisServerCommands#getConfig(java.lang.String)\n\t */\n\t@Override\n\tpublic Properties getConfig(String pattern) {\n\t\tAssert.hasText(pattern, \"Pattern must not be null or empty!\");\n\t\ttry {\n\t\t\tif (isPipelined()) {\n\t\t\t\tpipeline(connection.newLettuceResult(getAsyncConnection().configGet(pattern),\n\t\t\t\t\t\tConverters.mapToPropertiesConverter()));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (isQueueing()) {\n\t\t\t\ttransaction(connection.newLettuceResult(getAsyncConnection().configGet(pattern),\n\t\t\t\t\t\tConverters.mapToPropertiesConverter()));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn Converters.toProperties(getConnection().configGet(pattern));\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertLettuceAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisServerCommands#setConfig(java.lang.String, java.lang.String)\n\t */\n\t@Override\n\tpublic void setConfig(String param, String value) {\n\t\tAssert.hasText(param, \"Parameter must not be null or empty!\");\n\t\tAssert.hasText(value, \"Value must not be null or empty!\");\n\t\ttry {\n\t\t\tif (isPipelined()) {\n\t\t\t\tpipeline(connection.newLettuceStatusResult(getAsyncConnection().configSet(param, value)));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (isQueueing()) {\n\t\t\t\ttransaction(connection.newLettuceStatusResult(getAsyncConnection().configSet(param, value)));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgetConnection().configSet(param, value);\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertLettuceAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisServerCommands#resetConfigStats()\n\t */\n\t@Override\n\tpublic void resetConfigStats() {\n\t\ttry {\n\t\t\tif (isPipelined()) {\n\t\t\t\tpipeline(connection.newLettuceStatusResult(getAsyncConnection().configResetstat()));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (isQueueing()) {\n\t\t\t\ttransaction(connection.newLettuceStatusResult(getAsyncConnection().configResetstat()));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgetConnection().configResetstat();\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertLettuceAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisServerCommands#time()\n\t */\n\t@Override\n\tpublic Long time() {\n\t\ttry {\n\t\t\tif (isPipelined()) {\n\t\t\t\tpipeline(connection.newLettuceResult(getAsyncConnection().time(), LettuceConverters.toTimeConverter()));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (isQueueing()) {\n\t\t\t\ttransaction(connection.newLettuceResult(getAsyncConnection().time(), LettuceConverters.toTimeConverter()));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn LettuceConverters.toTimeConverter().convert(getConnection().time());\n\t\t} catch (Exception ex) {\n\t\t\tthrow convertLettuceAccessException(ex);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.data.redis.connection.RedisServerCommands#killClient(java.lang.String, int)\n\t */\n<fim_suffix>\t@Override\n\tpublic void killClient(String host, int port) {\n\t\tAssert.hasText(host, \"Host for 'CLIENT KILL' must not be 'null' or 'empty'.\");\n\t\tString client = String.format(\"%s:%s\", host, port);\n\t\ttry {\n\t\t\tif (isPipelined()) {\n\t\t\t\tpipeline(connection.newLettuceStatusResult(getAsyncConnection().clientKill(client)));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgetConnection().clientKill(client);\n\t\t} catch (Exception e) {\n\t\t\tthrow convertLettuceAccessException(e);\n\t\t}\n\t}<fim_middle>// function below has no smell\n"}