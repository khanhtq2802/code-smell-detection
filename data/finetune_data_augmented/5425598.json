{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.phoenix.iterate;\n\nimport java.io.IOException;\nimport java.util.AbstractQueue;\nimport java.util.Iterator;\nimport java.util.Queue;\n\n<fim_suffix>public abstract class SizeBoundQueue<T> extends AbstractQueue<T> implements SizeAwareQueue<T> {\n\n    private long maxSizeBytes;\n    private Queue<T> delegate;\n    private long currentSize;\n\n    public SizeBoundQueue(long maxSizeBytes, Queue<T> delegate) {\n        assert maxSizeBytes > 0;\n        this.maxSizeBytes = maxSizeBytes;\n        this.delegate = delegate;\n    }\n\n    abstract public long sizeOf(T e);\n\n    @Override\n    public boolean offer(T e) {\n        boolean success = false;\n        long elementSize = sizeOf(e);\n        if ((currentSize + elementSize) < maxSizeBytes) {\n            success = delegate.offer(e);\n            if (success) {\n                currentSize += elementSize;\n            }\n        }\n        return success;\n    }\n\n    @Override\n    public boolean add(T e) {\n        try {\n            return super.add(e);\n        } catch (IllegalStateException ex) {\n            throw new IllegalStateException(\n                    \"Queue full. Consider increasing memory threshold or spooling to disk\", ex);\n        }\n    }\n\n    @Override\n    public T poll() {\n        T e = delegate.poll();\n        if (e != null) {\n            currentSize -= sizeOf(e);\n        }\n        return e;\n    }\n\n    @Override\n    public T peek() {\n        return delegate.peek();\n    }\n\n    @Override\n    public void close() throws IOException {\n        delegate.clear();\n    }\n\n    @Override\n    public long getByteSize() {\n        return currentSize;\n    }\n\n    @Override\n    public Iterator<T> iterator() {\n        return delegate.iterator();\n    }\n\n    @Override\n    public int size() {\n        return delegate.size();\n    }\n\n}<fim_middle>// class below has no smell\n"}