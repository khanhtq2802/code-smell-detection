{"text": "<fim_prefix>/**\n * Autogenerated by Thrift Compiler (0.9.3)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage org.apache.hive.service.rpc.thrift;\nimport org.apache.thrift.scheme.IScheme;\nimport org.apache.thrift.scheme.SchemeFactory;\nimport org.apache.thrift.scheme.StandardScheme;\nimport org.apache.thrift.scheme.TupleScheme;\nimport org.apache.thrift.protocol.TTupleProtocol;\nimport org.apache.thrift.protocol.TProtocolException;\nimport org.apache.thrift.EncodingUtils;\nimport org.apache.thrift.TException;\nimport org.apache.thrift.async.AsyncMethodCallback;\nimport org.apache.thrift.server.AbstractNonblockingServer.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.EnumMap;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.EnumSet;\nimport java.util.Collections;\nimport java.util.BitSet;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\nimport javax.annotation.Generated;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})\n@Generated(value = \"Autogenerated by Thrift Compiler (0.9.3)\")\n@org.apache.hadoop.hive.common.classification.InterfaceAudience.Public @org.apache.hadoop.hive.common.classification.InterfaceStability.Stable public class TRenewDelegationTokenReq implements org.apache.thrift.TBase<TRenewDelegationTokenReq, TRenewDelegationTokenReq._Fields>, java.io.Serializable, Cloneable, Comparable<TRenewDelegationTokenReq> {\n  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"TRenewDelegationTokenReq\");\n  private static final org.apache.thrift.protocol.TField SESSION_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"sessionHandle\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n  private static final org.apache.thrift.protocol.TField DELEGATION_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField(\"delegationToken\", org.apache.thrift.protocol.TType.STRING, (short)2);\n  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n  static {\n    schemes.put(StandardScheme.class, new TRenewDelegationTokenReqStandardSchemeFactory());\n    schemes.put(TupleScheme.class, new TRenewDelegationTokenReqTupleSchemeFactory());\n  }\n  private TSessionHandle sessionHandle; // required\n  private String delegationToken; // required\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n    SESSION_HANDLE((short)1, \"sessionHandle\"),\n    DELEGATION_TOKEN((short)2, \"delegationToken\");\n    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n    static {\n      for (_Fields field : EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // SESSION_HANDLE\n          return SESSION_HANDLE;\n        case 2: // DELEGATION_TOKEN\n          return DELEGATION_TOKEN;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final String _fieldName;\n    _Fields(short thriftId, String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.SESSION_HANDLE, new org.apache.thrift.meta_data.FieldMetaData(\"sessionHandle\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSessionHandle.class)));\n    tmpMap.put(_Fields.DELEGATION_TOKEN, new org.apache.thrift.meta_data.FieldMetaData(\"delegationToken\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    metaDataMap = Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRenewDelegationTokenReq.class, metaDataMap);\n  }\n  public TRenewDelegationTokenReq() {\n  }\n  public TRenewDelegationTokenReq(\n    TSessionHandle sessionHandle,\n    String delegationToken)\n  {\n    this();\n    this.sessionHandle = sessionHandle;\n    this.delegationToken = delegationToken;\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public TRenewDelegationTokenReq(TRenewDelegationTokenReq other) {\n    if (other.isSetSessionHandle()) {\n      this.sessionHandle = new TSessionHandle(other.sessionHandle);\n    }\n    if (other.isSetDelegationToken()) {\n      this.delegationToken = other.delegationToken;\n    }\n  }\n  public TRenewDelegationTokenReq deepCopy() {\n    return new TRenewDelegationTokenReq(this);\n  }\n  @Override\n  public void clear() {\n    this.sessionHandle = null;\n    this.delegationToken = null;\n  }\n  public TSessionHandle getSessionHandle() {\n    return this.sessionHandle;\n  }\n  public void setSessionHandle(TSessionHandle sessionHandle) {\n    this.sessionHandle = sessionHandle;\n  }\n  public void unsetSessionHandle() {\n    this.sessionHandle = null;\n  }\n  /** Returns true if field sessionHandle is set (has been assigned a value) and false otherwise */\n  public boolean isSetSessionHandle() {\n    return this.sessionHandle != null;\n  }\n  public void setSessionHandleIsSet(boolean value) {\n    if (!value) {\n      this.sessionHandle = null;\n    }\n  }\n  public String getDelegationToken() {\n    return this.delegationToken;\n  }\n<fim_suffix>  public void setDelegationToken(String delegationToken) {\n    this.delegationToken = delegationToken;\n  }\n  public void unsetDelegationToken() {\n    this.delegationToken = null;\n  }\n  /** Returns true if field delegationToken is set (has been assigned a value) and false otherwise */\n  public boolean isSetDelegationToken() {\n    return this.delegationToken != null;\n  }\n  public void setDelegationTokenIsSet(boolean value) {\n    if (!value) {\n      this.delegationToken = null;\n    }\n  }\n  public void setFieldValue(_Fields field, Object value) {\n    switch (field) {\n    case SESSION_HANDLE:\n      if (value == null) {\n        unsetSessionHandle();\n      } else {\n        setSessionHandle((TSessionHandle)value);\n      }\n      break;\n    case DELEGATION_TOKEN:\n      if (value == null) {\n        unsetDelegationToken();\n      } else {\n        setDelegationToken((String)value);\n      }\n      break;\n    }\n  }\n  public Object getFieldValue(_Fields field) {\n    switch (field) {\n    case SESSION_HANDLE:\n      return getSessionHandle();\n    case DELEGATION_TOKEN:\n      return getDelegationToken();\n    }\n    throw new IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new IllegalArgumentException();\n    }\n    switch (field) {\n    case SESSION_HANDLE:<fim_middle>// function below has no smell\n"}