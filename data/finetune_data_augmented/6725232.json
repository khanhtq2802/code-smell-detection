{"text": "<fim_prefix>    ProductFeedRule productFeedRule = getGson().fromJson(json, ProductFeedRule.class);\n    if (context.isDebug()) {\n      JsonParser parser = new JsonParser();\n      JsonElement o1 = parser.parse(json);\n      JsonElement o2 = parser.parse(productFeedRule.toString());\n      if (o1.getAsJsonObject().get(\"__fb_trace_id__\") != null) {\n        o2.getAsJsonObject().add(\"__fb_trace_id__\", o1.getAsJsonObject().get(\"__fb_trace_id__\"));\n      }\n      if (!o1.equals(o2)) {\n        context.log(\"[Warning] When parsing response, object is not consistent with JSON:\");\n        context.log(\"[JSON]\" + o1);\n        context.log(\"[Object]\" + o2);\n      };\n    }\n    productFeedRule.context = context;\n    productFeedRule.rawValue = json;\n    productFeedRule.header = header;\n    return productFeedRule;\n  }\n  public static APINodeList<ProductFeedRule> parseResponse(String json, APIContext context, APIRequest request, String header) throws MalformedResponseException {\n    APINodeList<ProductFeedRule> productFeedRules = new APINodeList<ProductFeedRule>(request, json, header);\n    JsonArray arr;\n    JsonObject obj;\n    JsonParser parser = new JsonParser();\n    Exception exception = null;\n    try{\n      JsonElement result = parser.parse(json);\n      if (result.isJsonArray()) {\n        // First, check if it's a pure JSON Array\n        arr = result.getAsJsonArray();\n        for (int i = 0; i < arr.size(); i++) {\n          productFeedRules.add(loadJSON(arr.get(i).getAsJsonObject().toString(), context, header));\n        };\n        return productFeedRules;\n      } else if (result.isJsonObject()) {\n        obj = result.getAsJsonObject();\n        if (obj.has(\"data\")) {\n          if (obj.has(\"paging\")) {\n            JsonObject paging = obj.get(\"paging\").getAsJsonObject();\n            if (paging.has(\"cursors\")) {\n                JsonObject cursors = paging.get(\"cursors\").getAsJsonObject();\n                String before = cursors.has(\"before\") ? cursors.get(\"before\").getAsString() : null;\n                String after = cursors.has(\"after\") ? cursors.get(\"after\").getAsString() : null;\n                productFeedRules.setCursors(before, after);\n            }\n            String previous = paging.has(\"previous\") ? paging.get(\"previous\").getAsString() : null;\n            String next = paging.has(\"next\") ? paging.get(\"next\").getAsString() : null;\n            productFeedRules.setPaging(previous, next);\n            if (context.hasAppSecret()) {\n              productFeedRules.setAppSecret(context.getAppSecretProof());\n            }\n          }\n          if (obj.get(\"data\").isJsonArray()) {\n            // Second, check if it's a JSON array with \"data\"\n            arr = obj.get(\"data\").getAsJsonArray();\n            for (int i = 0; i < arr.size(); i++) {\n              productFeedRules.add(loadJSON(arr.get(i).getAsJsonObject().toString(), context, header));\n            };\n          } else if (obj.get(\"data\").isJsonObject()) {\n            // Third, check if it's a JSON object with \"data\"\n            obj = obj.get(\"data\").getAsJsonObject();\n            boolean isRedownload = false;\n            for (String s : new String[]{\"campaigns\", \"adsets\", \"ads\"}) {\n              if (obj.has(s)) {\n                isRedownload = true;\n                obj = obj.getAsJsonObject(s);\n                for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n                  productFeedRules.add(loadJSON(entry.getValue().toString(), context, header));\n                }\n                break;\n              }\n            }\n            if (!isRedownload) {\n              productFeedRules.add(loadJSON(obj.toString(), context, header));\n            }\n          }\n          return productFeedRules;\n        } else if (obj.has(\"images\")) {\n          // Fourth, check if it's a map of image objects\n          obj = obj.get(\"images\").getAsJsonObject();\n          for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n              productFeedRules.add(loadJSON(entry.getValue().toString(), context, header));\n          }\n          return productFeedRules;\n        } else {\n          // Fifth, check if it's an array of objects indexed by id\n          boolean isIdIndexedArray = true;\n          for (Map.Entry entry : obj.entrySet()) {\n            String key = (String) entry.getKey();\n            if (key.equals(\"__fb_trace_id__\")) {\n              continue;\n            }\n            JsonElement value = (JsonElement) entry.getValue();\n            if (\n              value != null &&\n              value.isJsonObject() &&\n              value.getAsJsonObject().has(\"id\") &&\n              value.getAsJsonObject().get(\"id\") != null &&\n              value.getAsJsonObject().get(\"id\").getAsString().equals(key)\n            ) {\n              productFeedRules.add(loadJSON(value.toString(), context, header));\n            } else {\n              isIdIndexedArray = false;\n              break;\n            }\n          }\n          if (isIdIndexedArray) {\n            return productFeedRules;\n          }\n          // Sixth, check if it's pure JsonObject\n          productFeedRules.clear();\n          productFeedRules.add(loadJSON(json, context, header));\n          return productFeedRules;\n        }\n      }\n    } catch (Exception e) {\n      exception = e;\n    }\n    throw new MalformedResponseException(\n      \"Invalid response string: \" + json,\n      exception\n    );\n  }\n  @Override\n  public APIContext getContext() {\n    return context;\n  }\n  @Override\n  public void setContext(APIContext context) {\n    this.context = context;\n  }\n  @Override\n  public String toString() {\n    return getGson().toJson(this);\n  }\n  public APIRequestDelete delete() {\n    return new APIRequestDelete(this.getPrefixedId().toString(), context);\n  }\n  public APIRequestGet get() {\n    return new APIRequestGet(this.getPrefixedId().toString(), context);\n  }\n  public APIRequestUpdate update() {\n    return new APIRequestUpdate(this.getPrefixedId().toString(), context);\n  }\n  public String getFieldAttribute() {\n    return mAttribute;\n  }\n  public String getFieldId() {\n    return mId;\n  }\n  public Map<String, String> getFieldParams() {\n    return mParams;\n  }\n  public String getFieldRuleType() {\n    return mRuleType;\n  }\n  public static class APIRequestDelete extends APIRequest<APINode> {\n    APINode lastResponse = null;\n    @Override\n    public APINode getLastResponse() {\n      return lastResponse;\n    }\n    public static final String[] PARAMS = {\n    };\n    public static final String[] FIELDS = {\n    };\n    @Override\n    public APINode parseResponse(String response, String header) throws APIException {\n      return APINode.parseResponse(response, getContext(), this, header).head();\n    }\n    @Override\n    public APINode execute() throws APIException {\n      return execute(new HashMap<String, Object>());\n    }\n    @Override\n    public APINode execute(Map<String, Object> extraParams) throws APIException {\n      ResponseWrapper rw = executeInternal(extraParams);\n      lastResponse = parseResponse(rw.getBody(), rw.getHeader());\n      return lastResponse;\n    }\n    public ListenableFuture<APINode> executeAsync() throws APIException {\n      return executeAsync(new HashMap<String, Object>());\n    };\n    public ListenableFuture<APINode> executeAsync(Map<String, Object> extraParams) throws APIException {\n      return Futures.transform(\n        executeAsyncInternal(extraParams),\n        new Function<ResponseWrapper, APINode>() {\n           public APINode apply(ResponseWrapper result) {\n             try {\n               return APIRequestDelete.this.parseResponse(result.getBody(), result.getHeader());\n             } catch (Exception e) {\n               throw new RuntimeException(e);\n             }\n           }\n         }\n      );\n    };\n    public APIRequestDelete(String nodeId, APIContext context) {\n      super(context, nodeId, \"/\", \"DELETE\", Arrays.asList(PARAMS));\n    }\n    @Override\n    public APIRequestDelete setParam(String param, Object value) {\n      setParamInternal(param, value);\n      return this;\n    }\n    @Override\n    public APIRequestDelete setParams(Map<String, Object> params) {\n      setParamsInternal(params);\n      return this;\n    }\n    public APIRequestDelete requestAllFields () {\n      return this.requestAllFields(true);\n    }\n<fim_suffix>    public APIRequestDelete requestAllFields (boolean value) {\n      for (String field : FIELDS) {\n        this.requestField(field, value);\n      }\n      return this;\n    }<fim_middle>// function below has no smell\n"}