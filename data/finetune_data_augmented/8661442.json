{"text": "<fim_prefix>/*******************************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *******************************************************************************/\npackage org.apache.ofbiz.minilang.method.conditional;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.ServiceLoader;\n\nimport org.apache.ofbiz.base.util.Debug;\nimport org.apache.ofbiz.base.util.UtilGenerics;\nimport org.apache.ofbiz.minilang.MiniLangException;\nimport org.apache.ofbiz.minilang.SimpleMethod;\nimport org.w3c.dom.Element;\n\n/**\n * An abstract factory class for creating &lt;if&gt; element sub-element implementations.\n * <p>Mini-language can be extended to support additional condition elements\n * by extending this class to provide custom conditional element implementations.\n * </p>\n */\n<fim_suffix>public abstract class ConditionalFactory<C extends Conditional> {\n\n    public static final String module = ConditionalFactory.class.getName();\n    private static final Map<String, ConditionalFactory<?>> conditionalFactories;\n\n    static {\n        Map<String, ConditionalFactory<?>> factories = new HashMap<String, ConditionalFactory<?>>();\n        Iterator<ConditionalFactory<?>> it = UtilGenerics.cast(ServiceLoader.load(ConditionalFactory.class, ConditionalFactory.class.getClassLoader()).iterator());\n        while (it.hasNext()) {\n            ConditionalFactory<?> factory = it.next();\n            factories.put(factory.getName(), factory);\n        }\n        conditionalFactories = Collections.unmodifiableMap(factories);\n    }\n\n    public static Conditional makeConditional(Element element, SimpleMethod simpleMethod) throws MiniLangException {\n        String tagName = element.getTagName();\n        ConditionalFactory<?> factory = conditionalFactories.get(tagName);\n        if (factory != null) {\n            return factory.createCondition(element, simpleMethod);\n        } else {\n            Debug.logWarning(\"Found an unknown if condition: \" + tagName, module);\n            return null;\n        }\n    }\n\n    public abstract C createCondition(Element element, SimpleMethod simpleMethod) throws MiniLangException;\n\n    public abstract String getName();\n}<fim_middle>// class below has no smell\n"}