{"text": "<fim_prefix>        }\n        String[] registeredTypes = ModelerUtil.getRegisteredTypeNames();\n        Collections.addAll(typeNames, registeredTypes);\n        typeNames.addAll(embeddableNames);\n        TableColumn typeColumn = table.getColumnModel().getColumn(ObjAttributeTableModel.OBJ_ATTRIBUTE_TYPE);\n        JComboBox javaTypesCombo = Application.getWidgetFactory().createComboBox(typeNames.toArray(), false);\n        AutoCompletion.enable(javaTypesCombo, false, true);\n        typeColumn.setCellEditor(Application.getWidgetFactory().createCellEditor(javaTypesCombo));\n    }\n    /**\n     * Selects a specified attribute.\n     */\n    public void selectAttributes(ObjAttribute[] attrs) {\n        ObjAttributeTableModel model = (ObjAttributeTableModel) table.getModel();\n        List<ObjAttributeWrapper> listAttrs = model.getObjectList();\n        int[] newSel = new int[attrs.length];\n        parentPanel.updateActions(attrs);\n        // search for attributes to select from attributes that model has\n        for (int i = 0; i < attrs.length; i++) {\n            for (int j = 0; j < listAttrs.size(); j++) {\n                if (listAttrs.get(j).getValue() == attrs[i]) {\n                    newSel[i] = j;\n                    break;\n                }\n            }\n        }\n        table.select(newSel);\n        parentPanel.getResolve().removeActionListener(getResolver());\n        parentPanel.getResolve().addActionListener(getResolver());\n    }\n    public void objAttributeChanged(AttributeEvent e) {\n        ObjAttributeTableModel model = (ObjAttributeTableModel) table.getModel();\n        if (!model.isValid()) {\n            model.resetModel();\n        }\n        model.fireTableDataChanged();\n        int ind = -1;\n        List<ObjAttributeWrapper> list = model.getObjectList();\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i).getValue() == e.getAttribute()) {\n                ind = i;\n            }\n        }\n        table.select(ind);\n        if (e.getOldName() != null) {\n            removeDuplicateAttribute(e);\n        }\n    }\n    public void objAttributeAdded(AttributeEvent e) {\n        ObjAttributeTableModel model = (ObjAttributeTableModel) table.getModel();\n        if (!model.isValid()) {\n            model.resetModel();\n        }\n        model.addRow(new ObjAttributeWrapper((ObjAttribute) e.getAttribute()));\n        model.fireTableDataChanged();\n        int ind = -1;\n        List<ObjAttributeWrapper> list = model.getObjectList();\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i).getValue() == e.getAttribute()) {\n                ind = i;\n            }\n        }\n        table.select(ind);\n    }\n    public void objAttributeRemoved(AttributeEvent e) {\n        ObjAttributeTableModel model = (ObjAttributeTableModel) table.getModel();\n        int ind = -1;\n        List<ObjAttributeWrapper> list = model.getObjectList();\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i).getValue() == e.getAttribute()) {\n                ind = i;\n            }\n        }\n        if (!model.isValid()) {\n            model.resetModel();\n        }\n        if (ind >= 0) {\n            model.removeRow(list.get(ind));\n            model.fireTableDataChanged();\n            table.select(ind);\n        }\n    }\n    public void removeDuplicateAttribute(AttributeEvent e) {\n        Collection<ObjEntity> objEntities = ProjectUtil.getCollectionOfChildren((ObjEntity) e.getEntity());\n        for (ObjEntity objEntity: objEntities) {\n            if (objEntity.getDeclaredAttribute(e.getAttribute().getName()) != null) {\n                JOptionPane pane = new JOptionPane(\n                        String.format(\"'%s' and '%s' can't have attribute '%s' together. \" +\n                                        \"Would you like to delete this attribute from the '%s' class?\",\n                                objEntity.getName(), e.getEntity().getName(), e.getAttribute().getName(), objEntity.getName()),\n                        JOptionPane.QUESTION_MESSAGE,\n                        JOptionPane.YES_NO_OPTION);\n                JDialog dialog = pane.createDialog(Application.getFrame(), \"Confirm Remove\");\n                dialog.setVisible(true);\n                boolean shouldDelete;\n                Object selectedValue = pane.getValue();\n                shouldDelete = selectedValue != null && selectedValue.equals(JOptionPane.YES_OPTION);\n                if (shouldDelete) {\n                    objEntity.removeAttribute(e.getAttribute().getName());\n                    objEntity.removeAttributeOverride(e.getAttribute().getName());\n                }\n            }\n        }\n    }\n    public void currentObjEntityChanged(EntityDisplayEvent e) {\n        if (e.getSource() == this) {\n            return;\n        }\n        ObjEntity entity = (ObjEntity) e.getEntity();\n        // Important: process event even if this is the same entity,\n        // since the inheritance structure might have changed\n        if (entity != null) {\n            rebuildTable(entity);\n        }\n        // if an entity was selected on a tree,\n        // unselect currently selected row\n        if (e.isUnselectAttributes()) {\n            table.clearSelection();\n        }\n    }\n    protected void rebuildTable(ObjEntity entity) {\n        if (table.getEditingRow() != -1 && table.getEditingColumn() != -1) {\n            TableCellEditor cellEditor = table.getCellEditor(table.getEditingRow(), table.getEditingColumn());\n            cellEditor.stopCellEditing();\n        }\n        ObjAttributeTableModel model = new ObjAttributeTableModel(entity, mediator, this);\n        table.setModel(model);\n        table.setRowHeight(25);\n        table.setRowMargin(3);\n        setUpTableStructure();\n    }\n    protected void setUpTableStructure() {\n        Map<Integer, Integer> minSizes = new HashMap<>();\n        minSizes.put(ObjAttributeTableModel.OBJ_ATTRIBUTE, 150);\n        initComboBoxes();\n        table.getColumnModel().getColumn(ObjAttributeTableModel.DB_ATTRIBUTE).setCellRenderer(new DbAttributePathComboBoxRenderer());\n        table.getColumnModel().getColumn(ObjAttributeTableModel.DB_ATTRIBUTE).setCellEditor(new DbAttributePathComboBoxEditor());\n        tablePreferences.bind(\n                table,\n                minSizes,\n                null,\n                null,\n                ObjAttributeTableModel.OBJ_ATTRIBUTE,\n                true);\n    }\n    /**\n     * Refreshes attributes view for the updated entity\n     */\n    public void objEntityChanged(EntityEvent e) {\n        if (e.getSource() == this) {\n            return;\n        }\n        if (!(table.getModel() instanceof ObjAttributeTableModel)) {\n            // probably means this panel hasn't been loaded yet...\n            return;\n        }\n        ObjAttributeTableModel model = (ObjAttributeTableModel) table.getModel();\n        if (model.getDbEntity() != ((ObjEntity) e.getEntity()).getDbEntity()) {\n            model.resetDbEntity();\n            setUpTableStructure();\n        }\n    }\n    public void objEntityAdded(EntityEvent e) {\n        if (e.getSource() == this) {\n            return;\n        }\n        this.rebuildTable((ObjEntity) e.getEntity());\n    }\n    public void objEntityRemoved(EntityEvent e) {\n    }\n    // custom renderer used for inherited attributes highlighting\n<fim_suffix>    final class CellRenderer extends DefaultTableCellRenderer {\n        @Override\n        public Component getTableCellRendererComponent(\n                JTable table,\n                Object value,\n                boolean isSelected,\n                boolean hasFocus,\n                int row,\n                int column) {\n            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n            ObjAttributeTableModel model = (ObjAttributeTableModel) table.getModel();\n            column = table.getColumnModel().getColumn(column).getModelIndex();\n            ObjAttribute attribute = model.getAttribute(row).getValue();\n            if (!model.isCellEditable(row, column)) {\n                setForeground(isSelected ? new Color(0xEEEEEE) : Color.GRAY);\n            } else {\n                setForeground(isSelected && !hasFocus ? table.getSelectionForeground() : table.getForeground());\n            }\n            setIcon(null);\n            if (attribute.isInherited()) {\n                Font font = getFont();\n                Font newFont = font.deriveFont(Font.ITALIC);\n                setFont(newFont);\n                if(column == ObjAttributeTableModel.OBJ_ATTRIBUTE) {\n                    setIcon(INHERITANCE_ICON);\n                }\n            }\n            setFont(UIManager.getFont(\"Label.font\"));\n            setBorder(BorderFactory.createEmptyBorder(0,5,0,0));\n            return this;\n        }\n        public void mouseClicked(MouseEvent event, int x) {\n            Point point = event.getPoint();\n            if(point.x - x <= INHERITANCE_ICON.getIconWidth()) {\n                ActionManager actionManager = Application.getInstance().getActionManager();\n                actionManager.getAction(ObjEntityToSuperEntityAction.class).performAction(null);\n            }\n        }\n    }<fim_middle>// class below has no smell\n"}