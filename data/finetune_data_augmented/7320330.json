{"text": "<fim_prefix>// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See License.txt in the repository root.\n\npackage com.microsoft.tfs.client.common.ui.dialogs.generic;\n\nimport org.eclipse.jface.dialogs.IDialogConstants;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.ModifyEvent;\nimport org.eclipse.swt.events.ModifyListener;\nimport org.eclipse.swt.layout.FormAttachment;\nimport org.eclipse.swt.layout.FormData;\nimport org.eclipse.swt.layout.FormLayout;\nimport org.eclipse.swt.widgets.Button;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Control;\nimport org.eclipse.swt.widgets.Label;\nimport org.eclipse.swt.widgets.Shell;\nimport org.eclipse.swt.widgets.Text;\n\nimport com.microsoft.tfs.client.common.ui.framework.dialog.BaseDialog;\nimport com.microsoft.tfs.client.common.ui.framework.helper.FormHelper;\nimport com.microsoft.tfs.client.common.ui.framework.sizing.ControlSize;\nimport com.microsoft.tfs.client.common.ui.helpers.AutomationIDHelper;\n\n/**\n * A simple Dialog that prompts the user to input a String.\n *\n * The String is required by default, so to change to non-required behavior call\n * setRequired(false).\n */\npublic class StringInputDialog extends BaseDialog {\n    private final String label;\n    private String text;\n    private final String dialogTitle;\n    private boolean required = true;\n    private Text inputText;\n    private int selectionStart = -1;\n    private int selectionEnd = -1;\n\n    public static final String INPUT_TEXT_ID = \"StringInputDialog.inputText\"; //$NON-NLS-1$\n\n    /**\n     * Create a new Dialog.\n     *\n     * @param parentShell\n     *        the Shell to use\n     * @param label\n     *        the label that appears by the Text input box\n     * @param initialValue\n     *        the initial value to populate the input box with, or null\n     * @param dialogTitle\n     *        the title of the Dialog\n     * @param purpose\n     *        a key for this dialog usage, used for persistent settings, never\n     *        seen by the user\n     */\n<fim_suffix>    public StringInputDialog(\n        final Shell parentShell,\n        final String label,\n        final String initialValue,\n        final String dialogTitle,\n        final String purpose) {\n        super(parentShell);\n        this.label = label;\n        text = initialValue;\n        this.dialogTitle = dialogTitle;\n\n        /*\n         * Set the dialog settings key to be \"purpose\" This allows different\n         * uses of the generic DlgInputString to have different settings\n         */\n        setOptionDialogSettingsKey(StringInputDialog.class.getName() + \".\" + purpose); //$NON-NLS-1$\n    }\n\n    public void setRequired(final boolean required) {\n        this.required = required;\n    }\n\n    @Override\n    protected Control createDialogArea(final Composite parent) {\n        final Composite container = (Composite) super.createDialogArea(parent);\n\n        final FormLayout formLayout = new FormLayout();\n        formLayout.spacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);\n        formLayout.marginWidth = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);\n        formLayout.marginHeight = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);\n        container.setLayout(formLayout);\n\n        final Label inputLabel = new Label(container, SWT.NONE);\n\n        inputText = new Text(container, SWT.BORDER);\n        AutomationIDHelper.setWidgetID(inputText, INPUT_TEXT_ID);\n\n        inputLabel.setText(label);\n        final FormData fd1 = new FormData();\n        fd1.left = new FormAttachment(0, 0);\n        fd1.top = new FormAttachment(0, FormHelper.VerticalOffset(inputLabel, inputText));\n        inputLabel.setLayoutData(fd1);\n\n        if (text != null) {\n            inputText.setText(text);\n        }\n\n        if (text != null && selectionStart >= 0 && selectionEnd >= 0) {\n            inputText.setSelection(selectionStart, selectionEnd);\n        } else if (text != null) {\n            inputText.setSelection(text.length());\n        }\n\n        final FormData fd2 = new FormData();\n        fd2.left = new FormAttachment(inputLabel, 0, SWT.RIGHT);\n        fd2.top = new FormAttachment(0, 0);\n        fd2.right = new FormAttachment(100, 0);\n        inputText.setLayoutData(fd2);\n\n        inputText.addModifyListener(new ModifyListener() {\n            @Override\n            public void modifyText(final ModifyEvent e) {\n                processInput();\n            }\n        });\n\n        ControlSize.setCharWidthHint(inputText, 60);\n\n        return container;\n    }\n\n    public void setSelection(final int start) {\n        this.selectionStart = start;\n        this.selectionEnd = start;\n    }\n\n    public void setSelection(final int start, final int end) {\n        this.selectionStart = start;\n        this.selectionEnd = end;\n    }\n\n    public String getInput() {\n        return text;\n    }\n\n    private void processInput() {\n        final Button okButton = getButton(IDialogConstants.OK_ID);\n\n        /*\n         * sanity check\n         */\n        if (okButton == null) {\n            return;\n        }\n\n        text = inputText.getText() != null ? inputText.getText().trim() : \"\"; //$NON-NLS-1$\n\n        okButton.setEnabled(required ? (text.length() > 0) : true);\n    }\n\n    @Override\n    protected void hookAfterButtonsCreated() {\n        processInput();\n    }\n\n    @Override\n    protected String provideDialogTitle() {\n        return dialogTitle;\n    }\n}<fim_middle>// function below has no smell\n"}