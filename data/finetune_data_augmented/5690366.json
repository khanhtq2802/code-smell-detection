{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.struts2.osgi;\n\nimport com.opensymphony.xwork2.FileManagerFactory;\nimport com.opensymphony.xwork2.ObjectFactory;\nimport com.opensymphony.xwork2.config.Configuration;\nimport com.opensymphony.xwork2.config.ConfigurationException;\nimport com.opensymphony.xwork2.config.entities.PackageConfig;\nimport com.opensymphony.xwork2.config.impl.DefaultConfiguration;\nimport com.opensymphony.xwork2.config.providers.XmlConfigurationProvider;\nimport org.apache.logging.log4j.Logger;\nimport org.apache.logging.log4j.LogManager;\nimport org.osgi.framework.Bundle;\nimport org.osgi.framework.BundleContext;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Package loader implementation that loads resources from a bundle\n */\npublic class BundlePackageLoader implements PackageLoader {\n\n    private static final Logger LOG = LogManager.getLogger(BundlePackageLoader.class);\n\n    public List<PackageConfig> loadPackages(Bundle bundle, BundleContext bundleContext, ObjectFactory objectFactory,\n                                            FileManagerFactory fileManagerFactory, Map<String, PackageConfig> pkgConfigs) throws ConfigurationException {\n        Configuration config = new DefaultConfiguration(\"struts.xml\");\n        BundleConfigurationProvider prov = new BundleConfigurationProvider(\"struts.xml\", bundle, bundleContext);\n        for (PackageConfig pkg : pkgConfigs.values()) {\n            config.addPackageConfig(pkg.getName(), pkg);\n        }\n        prov.setObjectFactory(objectFactory);\n        prov.setFileManagerFactory(fileManagerFactory);\n        prov.init(config);\n        prov.loadPackages();\n\n        List<PackageConfig> list = new ArrayList<PackageConfig>(config.getPackageConfigs().values());\n        list.removeAll(pkgConfigs.values());\n\n        return list;\n    }\n\n    static class BundleConfigurationProvider extends XmlConfigurationProvider {\n        private Bundle bundle;\n        private BundleContext bundleContext;\n\n<fim_suffix>        public BundleConfigurationProvider(String filename, Bundle bundle, BundleContext bundleContext) {\n            super(filename, false);\n            this.bundle = bundle;\n            this.bundleContext = bundleContext;\n        }\n\n        public BundleConfigurationProvider(String filename) {\n            super(filename);\n        }\n\n        @Override\n        protected Iterator<URL> getConfigurationUrls(String fileName) throws IOException {\n            Enumeration<URL> e = bundle.getResources(\"struts.xml\");\n            return e.hasMoreElements() ? new EnumeratorIterator<URL>(e) : null;\n        }\n    }\n\n    static class EnumeratorIterator<E> implements Iterator<E> {\n        Enumeration<E> e = null;\n\n        public EnumeratorIterator(Enumeration<E> e) {\n            this.e = e;\n        }\n\n        public boolean hasNext() {\n            return e.hasMoreElements();\n        }\n\n        public E next() {\n            return e.nextElement();\n        }\n\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n    }\n\n}<fim_middle>// function below has no smell\n"}