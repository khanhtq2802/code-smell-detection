{"text": "<fim_prefix>/*\n * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.svm.core.posix;\n\nimport static com.oracle.svm.core.posix.headers.Mman.MAP_ANON;\nimport static com.oracle.svm.core.posix.headers.Mman.MAP_FAILED;\nimport static com.oracle.svm.core.posix.headers.Mman.MAP_FIXED;\nimport static com.oracle.svm.core.posix.headers.Mman.MAP_NORESERVE;\nimport static com.oracle.svm.core.posix.headers.Mman.MAP_PRIVATE;\nimport static com.oracle.svm.core.posix.headers.Mman.PROT_EXEC;\nimport static com.oracle.svm.core.posix.headers.Mman.PROT_NONE;\nimport static com.oracle.svm.core.posix.headers.Mman.PROT_READ;\nimport static com.oracle.svm.core.posix.headers.Mman.PROT_WRITE;\nimport static com.oracle.svm.core.posix.headers.Mman.NoTransitions.mmap;\nimport static com.oracle.svm.core.posix.headers.Mman.NoTransitions.mprotect;\nimport static com.oracle.svm.core.posix.headers.Mman.NoTransitions.munmap;\nimport static com.oracle.svm.core.posix.headers.Unistd._SC_PAGE_SIZE;\nimport static com.oracle.svm.core.posix.headers.UnistdNoTransitions.sysconf;\nimport static org.graalvm.word.WordFactory.nullPointer;\n\nimport org.graalvm.compiler.word.Word;\nimport org.graalvm.nativeimage.Feature;\nimport org.graalvm.nativeimage.ImageSingletons;\nimport org.graalvm.nativeimage.Platform;\nimport org.graalvm.nativeimage.Platforms;\nimport org.graalvm.nativeimage.c.type.WordPointer;\nimport org.graalvm.word.Pointer;\nimport org.graalvm.word.PointerBase;\nimport org.graalvm.word.UnsignedWord;\nimport org.graalvm.word.WordBase;\nimport org.graalvm.word.WordFactory;\n\nimport com.oracle.svm.core.annotate.AutomaticFeature;\nimport com.oracle.svm.core.annotate.Uninterruptible;\nimport com.oracle.svm.core.c.CGlobalData;\nimport com.oracle.svm.core.c.CGlobalDataFactory;\nimport com.oracle.svm.core.os.VirtualMemoryProvider;\n\n@AutomaticFeature\n@Platforms({Platform.LINUX_AND_JNI.class, Platform.DARWIN_AND_JNI.class})\nclass PosixVirtualMemoryProviderFeature implements Feature {\n    @Override\n    public void beforeAnalysis(BeforeAnalysisAccess access) {\n        ImageSingletons.add(VirtualMemoryProvider.class, new PosixVirtualMemoryProvider());\n    }\n}\n\npublic class PosixVirtualMemoryProvider implements VirtualMemoryProvider {\n    protected static final int NO_FD = -1;\n    protected static final int NO_FD_OFFSET = 0;\n\n    private static final CGlobalData<WordPointer> CACHED_PAGE_SIZE = CGlobalDataFactory.createWord();\n\n    @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n    public static UnsignedWord getPageSize() {\n        Word value = CACHED_PAGE_SIZE.get().read();\n        if (value.equal(WordFactory.zero())) {\n            long queried = sysconf(_SC_PAGE_SIZE());\n            value = WordFactory.unsigned(queried);\n            CACHED_PAGE_SIZE.get().write(value);\n        }\n        return value;\n    }\n\n    @Uninterruptible(reason = \"May be called from uninterruptible code.\", mayBeInlined = true)\n    protected static int accessAsProt(int access) {\n        int prot = 0;\n        if ((access & Access.READ) != 0) {\n            prot |= PROT_READ();\n        }\n        if ((access & Access.WRITE) != 0) {\n            prot |= PROT_WRITE();\n        }\n        if ((access & Access.EXECUTE) != 0) {\n            prot |= PROT_EXEC();\n        }\n        return prot;\n    }\n\n    @Override\n    @Uninterruptible(reason = \"May be called from uninterruptible code.\", mayBeInlined = true)\n    public UnsignedWord getGranularity() {\n        return getPageSize();\n    }\n\n    @Override\n    @Uninterruptible(reason = \"May be called from uninterruptible code.\", mayBeInlined = true)\n    public Pointer reserve(UnsignedWord nbytes) {\n        final Pointer result = mmap(nullPointer(), nbytes, PROT_NONE(), MAP_ANON() | MAP_PRIVATE() | MAP_NORESERVE(), NO_FD, NO_FD_OFFSET);\n        return result.equal(MAP_FAILED()) ? nullPointer() : result;\n    }\n\n<fim_suffix>    @Override\n    @Uninterruptible(reason = \"May be called from uninterruptible code.\", mayBeInlined = true)\n    public Pointer mapFile(PointerBase start, UnsignedWord nbytes, WordBase fileHandle, UnsignedWord offset, int access) {\n        int flags = MAP_PRIVATE();\n        if (start.isNonNull()) {\n            flags |= MAP_FIXED();\n        }\n        int fd = (int) fileHandle.rawValue();\n        Pointer result = mmap(start, nbytes, accessAsProt(access), flags, fd, offset.rawValue());\n        return result.notEqual(MAP_FAILED()) ? result : WordFactory.nullPointer();\n    }\n\n    @Override\n    @Uninterruptible(reason = \"May be called from uninterruptible code.\", mayBeInlined = true)\n    public Pointer commit(PointerBase start, UnsignedWord nbytes, int access) {\n        int flags = MAP_ANON() | MAP_PRIVATE();\n        if (start.isNonNull()) {\n            flags |= MAP_FIXED();\n        }\n        final Pointer result = mmap(start, nbytes, accessAsProt(access), flags, NO_FD, NO_FD_OFFSET);\n        return result.notEqual(MAP_FAILED()) ? result : nullPointer();\n    }\n\n    @Override\n    @Uninterruptible(reason = \"May be called from uninterruptible code.\", mayBeInlined = true)\n    public int protect(PointerBase start, UnsignedWord nbytes, int access) {\n        return mprotect(start, nbytes, accessAsProt(access));\n    }\n\n    @Override\n    @Uninterruptible(reason = \"May be called from uninterruptible code.\", mayBeInlined = true)\n    public int uncommit(PointerBase start, UnsignedWord nbytes) {\n        final Pointer result = mmap(start, nbytes, PROT_NONE(), MAP_ANON() | MAP_PRIVATE() | MAP_NORESERVE(), NO_FD, NO_FD_OFFSET);\n        return result.notEqual(MAP_FAILED()) ? 0 : -1;\n    }\n\n    @Override\n    @Uninterruptible(reason = \"May be called from uninterruptible code.\", mayBeInlined = true)\n    public int free(PointerBase start, UnsignedWord nbytes) {\n        return munmap(start, nbytes);\n    }\n}<fim_middle>// function below has no smell\n"}