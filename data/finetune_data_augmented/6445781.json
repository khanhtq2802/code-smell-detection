{"text": "<fim_prefix>/*\n * Copyright (c) 2019 the Eclipse Milo Authors\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\npackage org.eclipse.milo.opcua.stack.core.util;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.util.Collections;\nimport java.util.Enumeration;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.jar.Attributes;\nimport java.util.jar.Manifest;\n\nimport com.google.common.collect.Maps;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ManifestUtil {\n\n    private static final Logger logger = LoggerFactory.getLogger(ManifestUtil.class);\n    private static final Map<String, String> attributes = load();\n\n    public static Optional<String> read(String name) {\n        return Optional.ofNullable(attributes.get(name));\n    }\n\n    public static boolean exists(String name) {\n        return attributes.containsKey(name);\n    }\n\n<fim_suffix>    private static Map<String, String> load() {\n        Map<String, String> attributes = Maps.newConcurrentMap();\n\n        for (URI uri : uris()) {\n            try {\n                attributes.putAll(load(uri.toURL()));\n            } catch (Throwable t) {\n                logger.error(\"load(): '{}' failed\", uri, t);\n            }\n        }\n\n        return attributes;\n    }\n\n    private static Map<String, String> load(URL url) throws IOException {\n        return load(url.openStream());\n    }\n\n    private static Map<String, String> load(InputStream stream) {\n        Map<String, String> props = Maps.newConcurrentMap();\n\n        try {\n            Manifest manifest = new Manifest(stream);\n            Attributes attributes = manifest.getMainAttributes();\n\n            for (Object key : attributes.keySet()) {\n                String value = attributes.getValue((Attributes.Name) key);\n                props.put(key.toString(), value);\n            }\n        } catch (Throwable t) {\n            logger.error(\"#load(): failed\", t);\n        } finally {\n            try {\n                stream.close();\n            } catch (IOException e) {\n                // ignored\n            }\n        }\n\n        return props;\n    }\n\n    private static Set<URI> uris() {\n        try {\n            Enumeration<URL> resources = ManifestUtil.class\n                .getClassLoader()\n                .getResources(\"META-INF/MANIFEST.MF\");\n\n            Set<URI> uris = new HashSet<>();\n            while (resources.hasMoreElements()) {\n                uris.add(resources.nextElement().toURI());\n            }\n\n            return uris;\n        } catch (Throwable t) {\n            logger.error(\"uris() failed\", t);\n            return Collections.emptySet();\n        }\n    }\n\n}<fim_middle>// function below has no smell\n"}