{"text": "<fim_prefix>  }\n  public Object getFieldFrom() {\n    return mFrom;\n  }\n  public String getFieldFullPicture() {\n    return mFullPicture;\n  }\n  public Long getFieldHeight() {\n    return mHeight;\n  }\n  public String getFieldIcon() {\n    return mIcon;\n  }\n  public String getFieldId() {\n    return mId;\n  }\n  public String getFieldInstagramEligibility() {\n    return mInstagramEligibility;\n  }\n  public Boolean getFieldIsAppShare() {\n    return mIsAppShare;\n  }\n  public Boolean getFieldIsExpired() {\n    return mIsExpired;\n  }\n  public Boolean getFieldIsHidden() {\n    return mIsHidden;\n  }\n  public Boolean getFieldIsInstagramEligible() {\n    return mIsInstagramEligible;\n  }\n  public Boolean getFieldIsPopular() {\n    return mIsPopular;\n  }\n  public Boolean getFieldIsPublished() {\n    return mIsPublished;\n  }\n  public Boolean getFieldIsSpherical() {\n    return mIsSpherical;\n  }\n  public String getFieldLink() {\n    return mLink;\n  }\n  public String getFieldMessage() {\n    return mMessage;\n  }\n  public JsonArray getFieldMessageTags() {\n    return mMessageTags;\n  }\n  public Boolean getFieldMultiShareEndCard() {\n    return mMultiShareEndCard;\n  }\n  public Boolean getFieldMultiShareOptimized() {\n    return mMultiShareOptimized;\n  }\n  public String getFieldName() {\n    return mName;\n  }\n  public String getFieldObjectId() {\n    return mObjectId;\n  }\n  public String getFieldParentId() {\n    return mParentId;\n  }\n  public Object getFieldPermalinkUrl() {\n    return mPermalinkUrl;\n  }\n  public String getFieldPicture() {\n    return mPicture;\n  }\n  public Place getFieldPlace() {\n    if (mPlace != null) {\n      mPlace.context = getContext();\n    }\n    return mPlace;\n  }\n  public Privacy getFieldPrivacy() {\n    return mPrivacy;\n  }\n  public String getFieldPromotableId() {\n    return mPromotableId;\n  }\n  public String getFieldPromotionStatus() {\n    return mPromotionStatus;\n  }\n  public JsonArray getFieldProperties() {\n    return mProperties;\n  }\n  public Double getFieldScheduledPublishTime() {\n    return mScheduledPublishTime;\n  }\n  public Object getFieldShares() {\n    return mShares;\n  }\n  public String getFieldSource() {\n    return mSource;\n  }\n  public String getFieldStatusType() {\n    return mStatusType;\n  }\n  public String getFieldStory() {\n    return mStory;\n  }\n  public JsonArray getFieldStoryTags() {\n    return mStoryTags;\n  }\n  public Boolean getFieldSubscribed() {\n    return mSubscribed;\n  }\n  public Profile getFieldTarget() {\n    if (mTarget != null) {\n      mTarget.context = getContext();\n    }\n    return mTarget;\n  }\n  public Object getFieldTargeting() {\n    return mTargeting;\n  }\n  public String getFieldTimelineVisibility() {\n    return mTimelineVisibility;\n  }\n  public String getFieldType() {\n    return mType;\n  }\n  public String getFieldUpdatedTime() {\n    return mUpdatedTime;\n  }\n  public Object getFieldVia() {\n    return mVia;\n  }\n  public List<String> getFieldVideoBuyingEligibility() {\n    return mVideoBuyingEligibility;\n  }\n  public Long getFieldWidth() {\n    return mWidth;\n  }\n  public static class APIRequestGetAttachments extends APIRequest<APINode> {\n    APINodeList<APINode> lastResponse = null;\n    @Override\n    public APINodeList<APINode> getLastResponse() {\n      return lastResponse;\n    }\n    public static final String[] PARAMS = {\n    };\n    public static final String[] FIELDS = {\n    };\n    @Override\n    public APINodeList<APINode> parseResponse(String response, String header) throws APIException {\n      return APINode.parseResponse(response, getContext(), this, header);\n    }\n    @Override\n    public APINodeList<APINode> execute() throws APIException {\n      return execute(new HashMap<String, Object>());\n    }\n    @Override\n    public APINodeList<APINode> execute(Map<String, Object> extraParams) throws APIException {\n      ResponseWrapper rw = executeInternal(extraParams);\n      lastResponse = parseResponse(rw.getBody(),rw.getHeader());\n      return lastResponse;\n    }\n    public ListenableFuture<APINodeList<APINode>> executeAsync() throws APIException {\n      return executeAsync(new HashMap<String, Object>());\n    };\n    public ListenableFuture<APINodeList<APINode>> executeAsync(Map<String, Object> extraParams) throws APIException {\n      return Futures.transform(\n        executeAsyncInternal(extraParams),\n        new Function<ResponseWrapper, APINodeList<APINode>>() {\n           public APINodeList<APINode> apply(ResponseWrapper result) {\n             try {\n               return APIRequestGetAttachments.this.parseResponse(result.getBody(), result.getHeader());\n             } catch (Exception e) {\n               throw new RuntimeException(e);\n             }\n           }\n         }\n      );\n    };\n    public APIRequestGetAttachments(String nodeId, APIContext context) {\n      super(context, nodeId, \"/attachments\", \"GET\", Arrays.asList(PARAMS));\n    }\n    @Override\n    public APIRequestGetAttachments setParam(String param, Object value) {\n      setParamInternal(param, value);\n      return this;\n    }\n    @Override\n    public APIRequestGetAttachments setParams(Map<String, Object> params) {\n      setParamsInternal(params);\n      return this;\n    }\n    public APIRequestGetAttachments requestAllFields () {\n      return this.requestAllFields(true);\n    }\n    public APIRequestGetAttachments requestAllFields (boolean value) {\n      for (String field : FIELDS) {\n        this.requestField(field, value);\n      }\n      return this;\n    }\n    @Override\n    public APIRequestGetAttachments requestFields (List<String> fields) {\n      return this.requestFields(fields, true);\n    }\n    @Override\n    public APIRequestGetAttachments requestFields (List<String> fields, boolean value) {\n      for (String field : fields) {\n        this.requestField(field, value);\n      }\n      return this;\n    }\n    @Override\n    public APIRequestGetAttachments requestField (String field) {\n      this.requestField(field, true);\n      return this;\n    }\n    @Override\n    public APIRequestGetAttachments requestField (String field, boolean value) {\n      this.requestFieldInternal(field, value);\n      return this;\n    }\n  }\n  public static class APIRequestGetComments extends APIRequest<Comment> {\n    APINodeList<Comment> lastResponse = null;\n    @Override\n    public APINodeList<Comment> getLastResponse() {\n      return lastResponse;\n    }\n    public static final String[] PARAMS = {\n      \"filter\",\n      \"order\",\n      \"live_filter\",\n      \"since\",\n    };\n    public static final String[] FIELDS = {\n      \"admin_creator\",\n      \"application\",\n      \"attachment\",\n      \"can_comment\",\n      \"can_hide\",\n      \"can_like\",\n      \"can_remove\",\n      \"comment_count\",\n      \"created_time\",\n      \"from\",\n      \"id\",\n      \"is_hidden\",\n      \"is_private\",\n      \"like_count\",\n      \"live_broadcast_timestamp\",\n      \"message\",\n      \"message_tags\",\n      \"object\",\n      \"parent\",\n      \"permalink_url\",\n      \"user_likes\",\n    };\n    @Override\n    public APINodeList<Comment> parseResponse(String response, String header) throws APIException {\n      return Comment.parseResponse(response, getContext(), this, header);\n    }\n    @Override\n    public APINodeList<Comment> execute() throws APIException {\n      return execute(new HashMap<String, Object>());\n    }\n    @Override\n    public APINodeList<Comment> execute(Map<String, Object> extraParams) throws APIException {\n      ResponseWrapper rw = executeInternal(extraParams);\n      lastResponse = parseResponse(rw.getBody(),rw.getHeader());\n      return lastResponse;\n    }\n    public ListenableFuture<APINodeList<Comment>> executeAsync() throws APIException {\n      return executeAsync(new HashMap<String, Object>());\n    };\n<fim_suffix>    public ListenableFuture<APINodeList<Comment>> executeAsync(Map<String, Object> extraParams) throws APIException {\n      return Futures.transform(\n        executeAsyncInternal(extraParams),\n        new Function<ResponseWrapper, APINodeList<Comment>>() {\n           public APINodeList<Comment> apply(ResponseWrapper result) {\n             try {\n               return APIRequestGetComments.this.parseResponse(result.getBody(), result.getHeader());\n             } catch (Exception e) {\n               throw new RuntimeException(e);\n             }\n           }\n         }\n      );\n    };<fim_middle>// function below has no smell\n"}