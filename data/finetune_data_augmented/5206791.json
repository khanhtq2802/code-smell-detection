{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.myfaces.tobago.internal.renderkit.renderer;\n\nimport org.apache.myfaces.tobago.component.Attributes;\nimport org.apache.myfaces.tobago.context.Markup;\nimport org.apache.myfaces.tobago.internal.component.AbstractUIBadge;\nimport org.apache.myfaces.tobago.internal.component.AbstractUIButton;\nimport org.apache.myfaces.tobago.internal.component.AbstractUICommand;\nimport org.apache.myfaces.tobago.renderkit.css.BootstrapClass;\nimport org.apache.myfaces.tobago.renderkit.css.CssItem;\nimport org.apache.myfaces.tobago.renderkit.css.TobagoClass;\nimport org.apache.myfaces.tobago.util.ComponentUtils;\n\nimport javax.faces.component.UIComponent;\nimport javax.faces.context.FacesContext;\nimport java.io.IOException;\n\npublic class ButtonRenderer extends CommandRendererBase {\n\n  @Override\n  protected TobagoClass getRendererCssClass() {\n    return TobagoClass.BUTTON;\n  }\n\n  @Override\n  protected CssItem[] getCssItems(final FacesContext facesContext, final AbstractUICommand command) {\n    final boolean defaultCommand = ComponentUtils.getBooleanAttribute(command, Attributes.defaultCommand);\n    final Markup markup = command.getMarkup() != null ? command.getMarkup() : Markup.NULL;\n\n    return new CssItem[]{\n        BootstrapClass.BTN,\n        getButtonColor(command.getMarkup(), defaultCommand),\n        markup.contains(Markup.BADGE) ? BootstrapClass.BADGE : null,\n        markup.contains(Markup.BADGE) && markup.contains(Markup.PILL) ? BootstrapClass.BADGE_PILL : null,\n    };\n  }\n\n  private BootstrapClass getButtonColor(final Markup markup, final boolean defaultCommand) {\n    if (markup != null) {\n      if (markup.contains(Markup.NONE)) {\n        return null;\n      } else if (markup.contains(Markup.PRIMARY)) {\n        return BootstrapClass.BTN_PRIMARY;\n      } else if (markup.contains(Markup.SECONDARY)) {\n        return BootstrapClass.BTN_SECONDARY;\n      } else if (markup.contains(Markup.SUCCESS)) {\n        return BootstrapClass.BTN_SUCCESS;\n      } else if (markup.contains(Markup.DANGER)) {\n        return BootstrapClass.BTN_DANGER;\n      } else if (markup.contains(Markup.WARNING)) {\n        return BootstrapClass.BTN_WARNING;\n      } else if (markup.contains(Markup.INFO)) {\n        return BootstrapClass.BTN_INFO;\n      } else if (markup.contains(Markup.LIGHT)) {\n        return BootstrapClass.BTN_LIGHT;\n      } else if (markup.contains(Markup.DARK)) {\n        return BootstrapClass.BTN_DARK;\n      }\n    }\n    return defaultCommand ? BootstrapClass.BTN_PRIMARY : BootstrapClass.BTN_SECONDARY;\n  }\n\n<fim_suffix>  @Override\n  protected void encodeBadge(FacesContext facesContext, AbstractUICommand command) throws IOException {\n    final AbstractUIButton button = (AbstractUIButton) command;\n\n    for (final UIComponent child : button.getChildren()) {\n      if (child instanceof AbstractUIBadge) {\n        child.encodeAll(facesContext);\n      }\n    }\n  }\n}<fim_middle>// function below has no smell\n"}