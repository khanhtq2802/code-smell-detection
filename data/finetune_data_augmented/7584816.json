{"text": "<fim_prefix>/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.orm;\n\nimport org.springframework.dao.DataRetrievalFailureException;\nimport org.springframework.lang.Nullable;\n\n/**\n * Exception thrown if a mapped object could not be retrieved via its identifier.\n * Provides information about the persistent class and the identifier.\n *\n * @author Juergen Hoeller\n * @since 13.10.2003\n */\n<fim_suffix>@SuppressWarnings(\"serial\")\npublic class ObjectRetrievalFailureException extends DataRetrievalFailureException {\n\n\t@Nullable\n\tprivate final Object persistentClass;\n\n\t@Nullable\n\tprivate final Object identifier;\n\n\n\t/**\n\t * Create a general ObjectRetrievalFailureException with the given message,\n\t * without any information on the affected object.\n\t * @param msg the detail message\n\t * @param cause the source exception\n\t */\n\tpublic ObjectRetrievalFailureException(String msg, Throwable cause) {\n\t\tsuper(msg, cause);\n\t\tthis.persistentClass = null;\n\t\tthis.identifier = null;\n\t}\n\n\t/**\n\t * Create a new ObjectRetrievalFailureException for the given object,\n\t * with the default \"not found\" message.\n\t * @param persistentClass the persistent class\n\t * @param identifier the ID of the object that should have been retrieved\n\t */\n\tpublic ObjectRetrievalFailureException(Class<?> persistentClass, Object identifier) {\n\t\tthis(persistentClass, identifier,\n\t\t\t\t\"Object of class [\" + persistentClass.getName() + \"] with identifier [\" + identifier + \"]: not found\",\n\t\t\t\tnull);\n\t}\n\n\t/**\n\t * Create a new ObjectRetrievalFailureException for the given object,\n\t * with the given explicit message and exception.\n\t * @param persistentClass the persistent class\n\t * @param identifier the ID of the object that should have been retrieved\n\t * @param msg the detail message\n\t * @param cause the source exception\n\t */\n\tpublic ObjectRetrievalFailureException(\n\t\t\tClass<?> persistentClass, Object identifier, String msg, @Nullable Throwable cause) {\n\n\t\tsuper(msg, cause);\n\t\tthis.persistentClass = persistentClass;\n\t\tthis.identifier = identifier;\n\t}\n\n\t/**\n\t * Create a new ObjectRetrievalFailureException for the given object,\n\t * with the default \"not found\" message.\n\t * @param persistentClassName the name of the persistent class\n\t * @param identifier the ID of the object that should have been retrieved\n\t */\n\tpublic ObjectRetrievalFailureException(String persistentClassName, Object identifier) {\n\t\tthis(persistentClassName, identifier,\n\t\t\t\t\"Object of class [\" + persistentClassName + \"] with identifier [\" + identifier + \"]: not found\",\n\t\t\t\tnull);\n\t}\n\n\t/**\n\t * Create a new ObjectRetrievalFailureException for the given object,\n\t * with the given explicit message and exception.\n\t * @param persistentClassName the name of the persistent class\n\t * @param identifier the ID of the object that should have been retrieved\n\t * @param msg the detail message\n\t * @param cause the source exception\n\t */\n\tpublic ObjectRetrievalFailureException(\n\t\t\tString persistentClassName, Object identifier, String msg, @Nullable Throwable cause) {\n\n\t\tsuper(msg, cause);\n\t\tthis.persistentClass = persistentClassName;\n\t\tthis.identifier = identifier;\n\t}\n\n\n\t/**\n\t * Return the persistent class of the object that was not found.\n\t * If no Class was specified, this method returns null.\n\t */\n\t@Nullable\n\tpublic Class<?> getPersistentClass() {\n\t\treturn (this.persistentClass instanceof Class ? (Class<?>) this.persistentClass : null);\n\t}\n\n\t/**\n\t * Return the name of the persistent class of the object that was not found.\n\t * Will work for both Class objects and String names.\n\t */\n\t@Nullable\n\tpublic String getPersistentClassName() {\n\t\tif (this.persistentClass instanceof Class) {\n\t\t\treturn ((Class<?>) this.persistentClass).getName();\n\t\t}\n\t\treturn (this.persistentClass != null ? this.persistentClass.toString() : null);\n\t}\n\n\t/**\n\t * Return the identifier of the object that was not found.\n\t */\n\t@Nullable\n\tpublic Object getIdentifier() {\n\t\treturn this.identifier;\n\t}\n\n}<fim_middle>// class below is data class\n"}