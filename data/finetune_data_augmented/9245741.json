{"text": "<fim_prefix>                    g.setColor(lead);\n                    g.drawLine(x, y, x, y);\n                    if (x <= 2) {\n                        g.drawLine(x - 1, y, x - 1, y + dy + 1);\n                    }\n                    g.setColor(fill);\n                    g.drawLine(x, y + 1, x, y + dy);\n                    if (x > 2) {\n                        g.drawLine(x - 1, y, x - 1, y + dy + 1);\n                    }\n                    g.setColor(trail);\n                    g.drawLine(x, y + dy + 1, x, y + dy + 1);\n                    dy += 2;\n                    y -= 1;\n                }\n                break;\n            case WEST:\n                g.setColor(trail);\n                g.drawLine(0, cy, 0, cy);\n                for (int y = cy - 1, x = 1, dy = 1; x <= s - 2; x += 2) {\n                    g.setColor(lead);\n                    g.drawLine(x, y, x, y);\n                    if (x >= (s - 2)) {\n                        g.drawLine(x + 1, y, x + 1, y);\n                    }\n                    g.setColor(fill);\n                    g.drawLine(x, y + 1, x, y + dy);\n                    if (x < (s - 2)) {\n                        g.drawLine(x + 1, y, x + 1, y + dy + 1);\n                    }\n                    g.setColor(trail);\n                    g.drawLine(x, y + dy + 1, x, y + dy + 1);\n                    if (x >= (s - 2)) {\n                        g.drawLine(x + 1, y + 1, x + 1, y + dy + 1);\n                    }\n                    dy += 2;\n                    y -= 1;\n                }\n                break;\n            }\n        }\n    }\n    final class XAWTScrollBarUI extends BasicScrollBarUI {\n        @Override\n        protected void installDefaults()\n        {\n            super.installDefaults();\n            scrollbar.setBorder(new BevelBorder(false,SystemColor.controlDkShadow,SystemColor.controlLtHighlight) );\n        }\n        @Override\n        protected void configureScrollBarColors() {\n            UIDefaults uidefaults = XToolkit.getUIDefaults();\n            Color bg = scrollbar.getBackground();\n            if (bg == null || bg instanceof UIResource) {\n                scrollbar.setBackground(uidefaults.getColor(\"ScrollBar.background\"));\n            }\n            Color fg = scrollbar.getForeground();\n            if (fg == null || fg instanceof UIResource) {\n                scrollbar.setForeground(uidefaults.getColor(\"ScrollBar.foreground\"));\n            }\n            thumbHighlightColor = uidefaults.getColor(\"ScrollBar.thumbHighlight\");\n            thumbLightShadowColor = uidefaults.getColor(\"ScrollBar.thumbShadow\");\n            thumbDarkShadowColor = uidefaults.getColor(\"ScrollBar.thumbDarkShadow\");\n            thumbColor = uidefaults.getColor(\"ScrollBar.thumb\");\n            trackColor = uidefaults.getColor(\"ScrollBar.track\");\n            trackHighlightColor = uidefaults.getColor(\"ScrollBar.trackHighlight\");\n        }\n        @Override\n        protected JButton createDecreaseButton(int orientation) {\n            JButton b = new XAWTScrollBarButton(orientation);\n            return b;\n        }\n        @Override\n        protected JButton createIncreaseButton(int orientation) {\n            JButton b = new XAWTScrollBarButton(orientation);\n            return b;\n        }\n        public JButton getDecreaseButton(){\n            return decrButton;\n        }\n        public JButton getIncreaseButton(){\n            return incrButton;\n        }\n        @Override\n        public void paint(Graphics g, JComponent c) {\n            paintTrack(g, c, getTrackBounds());\n            Rectangle thumbBounds = getThumbBounds();\n            paintThumb(g, c, thumbBounds);\n        }\n        @Override\n        public void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)\n        {\n            if(!scrollbar.isEnabled()) {\n                return;\n            }\n            if (thumbBounds.isEmpty())\n                thumbBounds = getTrackBounds();\n            int w = thumbBounds.width;\n            int h = thumbBounds.height;\n            g.translate(thumbBounds.x, thumbBounds.y);\n            g.setColor(thumbColor);\n            g.fillRect(0, 0, w-1, h-1);\n            g.setColor(thumbHighlightColor);\n            g.drawLine(0, 0, 0, h-1);\n            g.drawLine(1, 0, w-1, 0);\n            g.setColor(thumbLightShadowColor);\n            g.drawLine(1, h-1, w-1, h-1);\n            g.drawLine(w-1, 1, w-1, h-2);\n            g.translate(-thumbBounds.x, -thumbBounds.y);\n        }\n    }\n    @SuppressWarnings(\"serial\") // JDK-implementation class\n    final class AWTTextArea extends JTextArea implements DocumentListener {\n        private boolean isFocused = false;\n        private final XTextAreaPeer peer;\n        AWTTextArea(String text, XTextAreaPeer peer) {\n            super(text);\n            setFocusable(false);\n            this.peer = peer;\n        }\n        @Override\n        public void insertUpdate(DocumentEvent e) {\n            if (peer != null) {\n                peer.postEvent(new TextEvent(peer.target,\n                                             TextEvent.TEXT_VALUE_CHANGED));\n            }\n        }\n        @Override\n        public void removeUpdate(DocumentEvent e) {\n            if (peer != null) {\n                peer.postEvent(new TextEvent(peer.target,\n                                             TextEvent.TEXT_VALUE_CHANGED));\n            }\n        }\n        @Override\n        public void changedUpdate(DocumentEvent e) {\n            if (peer != null) {\n                peer.postEvent(new TextEvent(peer.target,\n                                             TextEvent.TEXT_VALUE_CHANGED));\n            }\n        }\n        void forwardFocusGained( FocusEvent e) {\n            isFocused = true;\n            FocusEvent fe = new FocusEvent(this, e.getID(), e.isTemporary(),\n                    e.getOppositeComponent(), e.getCause());\n            super.processFocusEvent(fe);\n        }\n        void forwardFocusLost( FocusEvent e) {\n            isFocused = false;\n            FocusEvent fe = new FocusEvent(this, e.getID(), e.isTemporary(),\n                    e.getOppositeComponent(), e.getCause());\n            super.processFocusEvent(fe);\n        }\n        @Override\n        public boolean hasFocus() {\n            return isFocused;\n        }\n        public void repaintNow() {\n            paintImmediately(getBounds());\n        }\n        public void processMouseEventPublic(MouseEvent e) {\n            processMouseEvent(e);\n        }\n        public void processMouseMotionEventPublic(MouseEvent e) {\n            processMouseMotionEvent(e);\n        }\n        public void processInputMethodEventPublic(InputMethodEvent e) {\n            processInputMethodEvent(e);\n        }\n        @Override\n        public void updateUI() {\n            ComponentUI ui = new AWTTextAreaUI();\n            setUI(ui);\n        }\n        // Fix for 4915454 - override the default implementation to avoid\n        // loading SystemFlavorMap and associated classes.\n        @Override\n        public void setTransferHandler(TransferHandler newHandler) {\n            TransferHandler oldHandler = (TransferHandler)\n                getClientProperty(AWTAccessor.getClientPropertyKeyAccessor()\n                                      .getJComponent_TRANSFER_HANDLER());\n            putClientProperty(AWTAccessor.getClientPropertyKeyAccessor()\n                                  .getJComponent_TRANSFER_HANDLER(),\n                              newHandler);\n            firePropertyChange(\"transferHandler\", oldHandler, newHandler);\n        }\n    }\n    final class XAWTScrollPaneUI extends BasicScrollPaneUI {\n        private final Border vsbMarginBorderR = new EmptyBorder(0, 2, 0, 0);\n        private final Border vsbMarginBorderL = new EmptyBorder(0, 0, 0, 2);\n        private final Border hsbMarginBorder = new EmptyBorder(2, 0, 0, 0);\n        private Border vsbBorder;\n        private Border hsbBorder;\n        private PropertyChangeListener propertyChangeHandler;\n        @Override\n        protected void installListeners(JScrollPane scrollPane) {\n            super.installListeners(scrollPane);\n            propertyChangeHandler = createPropertyChangeHandler();\n            scrollPane.addPropertyChangeListener(propertyChangeHandler);\n        }\n        @Override\n        public void paint(Graphics g, JComponent c) {\n            Border vpBorder = scrollpane.getViewportBorder();\n            if (vpBorder != null) {\n                Rectangle r = scrollpane.getViewportBorderBounds();\n                vpBorder.paintBorder(scrollpane, g, r.x, r.y, r.width, r.height);\n            }\n        }\n<fim_suffix>        @Override\n        protected void uninstallListeners(JComponent scrollPane) {\n            super.uninstallListeners(scrollPane);\n            scrollPane.removePropertyChangeListener(propertyChangeHandler);\n        }<fim_middle>// function below has no smell\n"}