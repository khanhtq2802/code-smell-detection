{"text": "<fim_prefix>     *\n     * @param c The character to check.\n     */\n    public static boolean isSupplemental(int c) {\n        return (c >= 0x10000 && c <= 0x10FFFF);\n    }\n    /**\n     * Returns true the supplemental character corresponding to the given\n     * surrogates.\n     *\n     * @param h The high surrogate.\n     * @param l The low surrogate.\n     */\n    public static int supplemental(char h, char l) {\n        return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;\n    }\n    /**\n     * Returns the high surrogate of a supplemental character\n     *\n     * @param c The supplemental character to \"split\".\n     */\n    public static char highSurrogate(int c) {\n        return (char) (((c - 0x00010000) >> 10) + 0xD800);\n    }\n    /**\n     * Returns the low surrogate of a supplemental character\n     *\n     * @param c The supplemental character to \"split\".\n     */\n    public static char lowSurrogate(int c) {\n        return (char) (((c - 0x00010000) & 0x3FF) + 0xDC00);\n    }\n    /**\n     * Returns whether the given character is a high surrogate\n     *\n     * @param c The character to check.\n     */\n    public static boolean isHighSurrogate(int c) {\n        return (0xD800 <= c && c <= 0xDBFF);\n    }\n    /**\n     * Returns whether the given character is a low surrogate\n     *\n     * @param c The character to check.\n     */\n    public static boolean isLowSurrogate(int c) {\n        return (0xDC00 <= c && c <= 0xDFFF);\n    }\n    /**\n     * Returns true if the specified character is valid. This method\n     * also checks the surrogate character range from 0x10000 to 0x10FFFF.\n     * <p>\n     * If the program chooses to apply the mask directly to the\n     * <code>CHARS</code> array, then they are responsible for checking\n     * the surrogate character range.\n     *\n     * @param c The character to check.\n     */\n    public static boolean isValid(int c) {\n        return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) ||\n               (0x10000 <= c && c <= 0x10FFFF);\n    } // isValid(int):boolean\n    /**\n     * Returns true if the specified character is invalid.\n     *\n     * @param c The character to check.\n     */\n    public static boolean isInvalid(int c) {\n        return !isValid(c);\n    } // isInvalid(int):boolean\n    /**\n     * Returns true if the specified character can be considered content.\n     *\n     * @param c The character to check.\n     */\n    public static boolean isContent(int c) {\n        return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) ||\n               (0x10000 <= c && c <= 0x10FFFF);\n    } // isContent(int):boolean\n    /**\n     * Returns true if the specified character can be considered markup.\n     * Markup characters include '&lt;', '&amp;', and '%'.\n     *\n     * @param c The character to check.\n     */\n    public static boolean isMarkup(int c) {\n        return c == '<' || c == '&' || c == '%';\n    } // isMarkup(int):boolean\n    /**\n     * Returns true if the specified character is a space character\n     * as defined by production [3] in the XML 1.0 specification.\n     *\n     * @param c The character to check.\n     */\n    public static boolean isSpace(int c) {\n        return c <= 0x20 && (CHARS[c] & MASK_SPACE) != 0;\n    } // isSpace(int):boolean\n    /**\n     * Returns true if the specified character is a valid name start\n     * character as defined by production [5] in the XML 1.0\n     * specification.\n     *\n     * @param c The character to check.\n     */\n    public static boolean isNameStart(int c) {\n        return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;\n    } // isNameStart(int):boolean\n    /**\n     * Returns true if the specified character is a valid name\n     * character as defined by production [4] in the XML 1.0\n     * specification.\n     *\n     * @param c The character to check.\n     */\n    public static boolean isName(int c) {\n        return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;\n    } // isName(int):boolean\n    /**\n     * Returns true if the specified character is a valid NCName start\n     * character as defined by production [4] in Namespaces in XML\n     * recommendation.\n     *\n     * @param c The character to check.\n     */\n    public static boolean isNCNameStart(int c) {\n        return c < 0x10000 && (CHARS[c] & MASK_NCNAME_START) != 0;\n    } // isNCNameStart(int):boolean\n    /**\n     * Returns true if the specified character is a valid NCName\n     * character as defined by production [5] in Namespaces in XML\n     * recommendation.\n     *\n     * @param c The character to check.\n     */\n    public static boolean isNCName(int c) {\n        return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;\n    } // isNCName(int):boolean\n    /**\n     * Returns true if the specified character is a valid Pubid\n     * character as defined by production [13] in the XML 1.0\n     * specification.\n     *\n     * @param c The character to check.\n     */\n    public static boolean isPubid(int c) {\n        return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;\n    } // isPubid(int):boolean\n    /*\n     * [5] Name ::= (Letter | '_' | ':') (NameChar)*\n     */\n    /**\n     * Check to see if a string is a valid Name according to [5]\n     * in the XML 1.0 Recommendation\n     *\n     * @param name string to check\n     * @return true if name is a valid Name\n     */\n    public static boolean isValidName(String name) {\n        if (name.length() == 0)\n            return false;\n        char ch = name.charAt(0);\n        if( isNameStart(ch) == false)\n           return false;\n        for (int i = 1; i < name.length(); i++ ) {\n           ch = name.charAt(i);\n           if( isName( ch ) == false ){\n              return false;\n           }\n        }\n        return true;\n    } // isValidName(String):boolean\n    /*\n     * from the namespace rec\n     * [4] NCName ::= (Letter | '_') (NCNameChar)*\n     */\n    /**\n     * Check to see if a string is a valid NCName according to [4]\n     * from the XML Namespaces 1.0 Recommendation\n     *\n     * @param ncName string to check\n     * @return true if name is a valid NCName\n     */\n    public static boolean isValidNCName(String ncName) {\n        if (ncName.length() == 0)\n            return false;\n        char ch = ncName.charAt(0);\n        if( isNCNameStart(ch) == false)\n           return false;\n        for (int i = 1; i < ncName.length(); i++ ) {\n           ch = ncName.charAt(i);\n           if( isNCName( ch ) == false ){\n              return false;\n           }\n        }\n        return true;\n    } // isValidNCName(String):boolean\n    /*\n     * [7] Nmtoken ::= (NameChar)+\n     */\n    /**\n     * Check to see if a string is a valid Nmtoken according to [7]\n     * in the XML 1.0 Recommendation\n     *\n     * @param nmtoken string to check\n     * @return true if nmtoken is a valid Nmtoken \n     */\n<fim_suffix>    public static boolean isValidNmtoken(String nmtoken) {\n        if (nmtoken.length() == 0)\n            return false;\n        for (int i = 0; i < nmtoken.length(); i++ ) {\n           char ch = nmtoken.charAt(i);\n           if(  ! isName( ch ) ){\n              return false;\n           }\n        }\n        return true;\n    } // isValidName(String):boolean<fim_middle>// function below has no smell\n"}