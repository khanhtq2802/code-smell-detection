{"text": "<fim_prefix>/*\n * Copyright 2014-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License. You may obtain\n * a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\npackage com.facebook.buck.features.python;\nimport com.facebook.buck.core.cell.CellPathResolver;\nimport com.facebook.buck.core.description.arg.CommonDescriptionArg;\nimport com.facebook.buck.core.description.arg.HasDeclaredDeps;\nimport com.facebook.buck.core.description.arg.HasTests;\nimport com.facebook.buck.core.description.attr.ImplicitDepsInferringDescription;\nimport com.facebook.buck.core.exceptions.HumanReadableException;\nimport com.facebook.buck.core.model.BuildTarget;\nimport com.facebook.buck.core.model.Flavor;\nimport com.facebook.buck.core.model.FlavorDomain;\nimport com.facebook.buck.core.model.InternalFlavor;\nimport com.facebook.buck.core.model.impl.BuildTargetPaths;\nimport com.facebook.buck.core.model.targetgraph.BuildRuleCreationContextWithTargetGraph;\nimport com.facebook.buck.core.model.targetgraph.DescriptionWithTargetGraph;\nimport com.facebook.buck.core.rules.ActionGraphBuilder;\nimport com.facebook.buck.core.rules.BuildRuleParams;\nimport com.facebook.buck.core.rules.SourcePathRuleFinder;\nimport com.facebook.buck.core.rules.impl.SymlinkTree;\nimport com.facebook.buck.core.sourcepath.SourcePath;\nimport com.facebook.buck.core.sourcepath.resolver.SourcePathResolver;\nimport com.facebook.buck.core.sourcepath.resolver.impl.DefaultSourcePathResolver;\nimport com.facebook.buck.core.toolchain.ToolchainProvider;\nimport com.facebook.buck.core.util.immutables.BuckStyleImmutable;\nimport com.facebook.buck.core.util.log.Logger;\nimport com.facebook.buck.cxx.toolchain.CxxBuckConfig;\nimport com.facebook.buck.cxx.toolchain.CxxPlatform;\nimport com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;\nimport com.facebook.buck.cxx.toolchain.UnresolvedCxxPlatform;\nimport com.facebook.buck.cxx.toolchain.linker.WindowsLinker;\nimport com.facebook.buck.features.python.PythonBuckConfig.PackageStyle;\nimport com.facebook.buck.features.python.toolchain.PexToolProvider;\nimport com.facebook.buck.features.python.toolchain.PythonPlatform;\nimport com.facebook.buck.features.python.toolchain.PythonPlatformsProvider;\nimport com.facebook.buck.file.WriteFile;\nimport com.facebook.buck.io.filesystem.ProjectFilesystem;\nimport com.facebook.buck.rules.coercer.PatternMatchedCollection;\nimport com.facebook.buck.rules.macros.StringWithMacros;\nimport com.facebook.buck.rules.macros.StringWithMacrosConverter;\nimport com.facebook.buck.util.Optionals;\nimport com.facebook.buck.versions.HasVersionUniverse;\nimport com.facebook.buck.versions.VersionRoot;\nimport com.google.common.collect.ImmutableCollection;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableMultimap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.ImmutableSortedSet;\nimport java.nio.file.Path;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport org.immutables.value.Value;\npublic class PythonBinaryDescription\n    implements DescriptionWithTargetGraph<PythonBinaryDescriptionArg>,\n        ImplicitDepsInferringDescription<\n            PythonBinaryDescription.AbstractPythonBinaryDescriptionArg>,\n        VersionRoot<PythonBinaryDescriptionArg> {\n  private static final Logger LOG = Logger.get(PythonBinaryDescription.class);\n  private final ToolchainProvider toolchainProvider;\n  private final PythonBuckConfig pythonBuckConfig;\n  private final CxxBuckConfig cxxBuckConfig;\n  public PythonBinaryDescription(\n      ToolchainProvider toolchainProvider,\n      PythonBuckConfig pythonBuckConfig,\n      CxxBuckConfig cxxBuckConfig) {\n    this.toolchainProvider = toolchainProvider;\n    this.pythonBuckConfig = pythonBuckConfig;\n    this.cxxBuckConfig = cxxBuckConfig;\n  }\n  @Override\n  public Class<PythonBinaryDescriptionArg> getConstructorArgType() {\n    return PythonBinaryDescriptionArg.class;\n  }\n  public static BuildTarget getEmptyInitTarget(BuildTarget baseTarget) {\n    return baseTarget.withAppendedFlavors(InternalFlavor.of(\"__init__\"));\n  }\n<fim_suffix>  public static SourcePath createEmptyInitModule(\n      BuildTarget buildTarget,\n      ProjectFilesystem projectFilesystem,\n      ActionGraphBuilder graphBuilder) {\n    BuildTarget emptyInitTarget = getEmptyInitTarget(buildTarget);\n    Path emptyInitPath =\n        BuildTargetPaths.getGenPath(projectFilesystem, buildTarget, \"%s/__init__.py\");\n    WriteFile rule =\n        graphBuilder.addToIndex(\n            new WriteFile(\n                emptyInitTarget, projectFilesystem, \"\", emptyInitPath, /* executable */ false));\n    return rule.getSourcePathToOutput();\n  }\n  public static ImmutableMap<Path, SourcePath> addMissingInitModules(\n      ImmutableMap<Path, SourcePath> modules, SourcePath emptyInit) {\n    Map<Path, SourcePath> initModules = new LinkedHashMap<>();\n    // Insert missing `__init__.py` modules.\n    Set<Path> packages = new HashSet<>();\n    for (Path module : modules.keySet()) {\n      Path pkg = module;\n      while ((pkg = pkg.getParent()) != null && !packages.contains(pkg)) {\n        Path init = pkg.resolve(\"__init__.py\");\n        if (!modules.containsKey(init)) {\n          initModules.put(init, emptyInit);\n        }\n        packages.add(pkg);\n      }\n    }\n    return ImmutableMap.<Path, SourcePath>builder().putAll(modules).putAll(initModules).build();\n  }\n  private PythonInPlaceBinary createInPlaceBinaryRule(\n      BuildTarget buildTarget,\n      ProjectFilesystem projectFilesystem,\n      BuildRuleParams params,\n      ActionGraphBuilder graphBuilder,\n      SourcePathRuleFinder ruleFinder,\n      PythonPlatform pythonPlatform,\n      CxxPlatform cxxPlatform,\n      String mainModule,\n      Optional<String> extension,\n      PythonPackageComponents components,\n      ImmutableSet<String> preloadLibraries,\n      PackageStyle packageStyle) {\n    // We don't currently support targeting Windows.\n    if (cxxPlatform.getLd().resolve(graphBuilder) instanceof WindowsLinker) {\n      throw new HumanReadableException(\n          \"%s: cannot build in-place python binaries for Windows (%s)\",\n          buildTarget, cxxPlatform.getFlavor());\n    }\n    // Add in any missing init modules into the python components.\n    SourcePath emptyInit = createEmptyInitModule(buildTarget, projectFilesystem, graphBuilder);\n    components = components.withModules(addMissingInitModules(components.getModules(), emptyInit));\n    BuildTarget linkTreeTarget = buildTarget.withAppendedFlavors(InternalFlavor.of(\"link-tree\"));\n    Path linkTreeRoot = BuildTargetPaths.getGenPath(projectFilesystem, linkTreeTarget, \"%s\");\n    SymlinkTree linkTree =\n        graphBuilder.addToIndex(\n            new SymlinkTree(\n                \"python_in_place_binary\",\n                linkTreeTarget,\n                projectFilesystem,\n                linkTreeRoot,\n                ImmutableMap.<Path, SourcePath>builder()\n                    .putAll(components.getModules())\n                    .putAll(components.getResources())\n                    .putAll(components.getNativeLibraries())\n                    .build(),\n                components.getModuleDirs(),\n                ruleFinder));\n    return new PythonInPlaceBinary(\n        buildTarget,\n        projectFilesystem,\n        graphBuilder,\n        params.getDeclaredDeps(),\n        cxxPlatform,\n        pythonPlatform,\n        mainModule,\n        components,\n        extension.orElse(pythonBuckConfig.getPexExtension()),\n        preloadLibraries,\n        pythonBuckConfig.legacyOutputPath(),\n        linkTree,\n        pythonPlatform.getEnvironment(),\n        packageStyle);\n  }\n  PythonBinary createPackageRule(\n      BuildTarget buildTarget,\n      ProjectFilesystem projectFilesystem,\n      BuildRuleParams params,\n      ActionGraphBuilder graphBuilder,\n      SourcePathRuleFinder ruleFinder,\n      PythonPlatform pythonPlatform,\n      CxxPlatform cxxPlatform,\n      String mainModule,\n      Optional<String> extension,\n      PythonPackageComponents components,<fim_middle>// function below has no smell\n"}