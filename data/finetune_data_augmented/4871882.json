{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.oak.spi.security.authentication;\n\nimport java.security.Principal;\nimport javax.jcr.Credentials;\nimport javax.security.auth.login.LoginException;\n\nimport org.jetbrains.annotations.Nullable;\nimport org.osgi.annotation.versioning.ProviderType;\n\n/**\n * The {@code Authentication} interface defines methods to validate\n * {@link javax.jcr.Credentials Credentials} during the\n * {@link javax.security.auth.spi.LoginModule#login() login step} of the\n * authentication process. The validation depends on the authentication\n * mechanism in place.<p>\n *\n * A given implementation may only handle certain types of {@code Credentials}\n * as the authentication process is tightly coupled to the semantics of the\n * {@code Credentials}.<p>\n *\n * For example a implementation may only be able to validate UserID/password\n * pairs such as passed with {@link javax.jcr.SimpleCredentials}, while another\n * might be responsible for validating login token issued by the repository or\n * an external access token generation mechanism.\n */\n<fim_suffix>@ProviderType\npublic interface Authentication {\n\n    /**\n     * Validates the specified {@code Credentials} and returns {@code true} if\n     * the validation was successful.\n     *\n     * @param credentials to verify\n     * @return {@code true} if the validation was successful; {@code false}\n     * if the specified credentials are not supported and this authentication\n     * implementation cannot verify their validity.\n     * @throws LoginException if the authentication failed.\n     */\n    boolean authenticate(@Nullable Credentials credentials) throws LoginException;\n\n    /**\n     * Optional method that return the userID extracted upon {@link #authenticate(Credentials)}.\n     * It is expected to return {@code null} if the implementation doesn't support this.\n     *\n     * An {@link IllegalStateException} may be thrown if called prior to {@link #authenticate(Credentials)}.\n     *\n     * @return a user identifier or {@code null}\n     */\n    @Nullable\n    String getUserId();\n\n    /**\n     * Optional method that return the {@link Principal} of the authenticating user\n     * extracted upon {@link #authenticate(Credentials)}. It is expected to return\n     * {@code null} if the implementation doesn't support this.\n     *\n     * An {@link IllegalStateException} may be thrown if called prior to {@link #authenticate(Credentials)}.\n     *\n     * @return a valid {@code Principal} or {@code null}\n     */\n    @Nullable\n    Principal getUserPrincipal();\n}<fim_middle>// class below has no smell\n"}