{"text": "<fim_prefix>        public ClassLiteral(TypeMirror literal) {\n            this.literal = literal;\n        }\n        public TypeMirror getLiteral() {\n            return literal;\n        }\n        @Override\n        public boolean equals(Object obj) {\n            if (!(obj instanceof ClassLiteral)) {\n                return false;\n            }\n            return ElementUtils.typeEquals(literal, ((ClassLiteral) obj).literal);\n        }\n        @Override\n        public int hashCode() {\n            return Objects.hash(literal);\n        }\n        @Override\n        public TypeMirror getResolvedType() {\n            return ProcessorContext.getInstance().getType(Class.class);\n        }\n        @Override\n        public void accept(DSLExpressionVisitor visitor) {\n            visitor.visitClassLiteral(this);\n        }\n        @Override\n        public DSLExpression reduce(DSLExpressionReducer visitor) {\n            return this;\n        }\n    }\n    public static final class Call extends DSLExpression {\n        private final DSLExpression receiver;\n        private final String name;\n        private final List<DSLExpression> parameters;\n        private ExecutableElement resolvedMethod;\n        public Call(DSLExpression receiver, String name, List<DSLExpression> parameters) {\n            this.receiver = receiver;\n            this.name = name;\n            this.parameters = parameters;\n            for (DSLExpression parameter : parameters) {\n                if (parameter == null) {\n                    throw new NullPointerException();\n                }\n            }\n        }\n        @Override\n        public boolean equals(Object obj) {\n            if (obj instanceof Call) {\n                Call other = (Call) obj;\n                return Objects.equals(receiver, other.receiver) && name.equals(other.name) && parameters.equals(other.parameters);\n            }\n            return false;\n        }\n        @Override\n        public int hashCode() {\n            return Objects.hash(receiver, name, parameters);\n        }\n        public DSLExpression getReceiver() {\n            return receiver;\n        }\n        public String getName() {\n            return name;\n        }\n        public List<DSLExpression> getParameters() {\n            return parameters;\n        }\n        @Override\n        public void accept(DSLExpressionVisitor visitor) {\n            if (receiver != null) {\n                receiver.accept(visitor);\n            }\n            for (DSLExpression parameter : getParameters()) {\n                parameter.accept(visitor);\n            }\n            visitor.visitCall(this);\n        }\n        @Override\n        public DSLExpression reduce(DSLExpressionReducer reducer) {\n            DSLExpression newReceiver = null;\n            if (receiver != null) {\n                newReceiver = receiver.reduceImpl(reducer);\n            }\n            boolean parameterChanged = false;\n            List<DSLExpression> newParameters = new ArrayList<>();\n            for (DSLExpression param : getParameters()) {\n                DSLExpression newParam = param.reduceImpl(reducer);\n                if (newParam != param) {\n                    parameterChanged = true;\n                    newParameters.add(newParam);\n                } else {\n                    newParameters.add(param);\n                }\n            }\n            Call c = this;\n            if (newReceiver != receiver || parameterChanged) {\n                c = new Call(newReceiver, getName(), newParameters);\n                c.setResolvedMethod(getResolvedMethod());\n                c.setResolvedTargetType(getResolvedTargetType());\n            }\n            return reducer.visitCall(c);\n        }\n        @Override\n        public TypeMirror getResolvedType() {\n            if (resolvedMethod == null) {\n                return null;\n            }\n            if (resolvedMethod.getKind() == ElementKind.CONSTRUCTOR) {\n                return resolvedMethod.getEnclosingElement().asType();\n            } else {\n                return resolvedMethod.getReturnType();\n            }\n        }\n        public ExecutableElement getResolvedMethod() {\n            return resolvedMethod;\n        }\n        public void setResolvedMethod(ExecutableElement resolvedMethod) {\n            this.resolvedMethod = resolvedMethod;\n        }\n        @Override\n        public String toString() {\n            return \"Call [receiver=\" + receiver + \", name=\" + name + \", parameters=\" + parameters + \", resolvedMethod=\" + resolvedMethod + \"]\";\n        }\n    }\n    public static final class Variable extends DSLExpression {\n        private final DSLExpression receiver;\n        private final String name;\n        private VariableElement resolvedVariable;\n        public Variable(DSLExpression receiver, String name) {\n            this.receiver = receiver;\n            this.name = name;\n        }\n        @Override\n        public boolean equals(Object obj) {\n            if (obj instanceof Variable) {\n                Variable other = (Variable) obj;\n                return ElementUtils.variableEquals(resolvedVariable, other.resolvedVariable) && Objects.equals(receiver, other.receiver);\n            }\n            return false;\n        }\n        @Override\n        public int hashCode() {\n            return Objects.hash(resolvedVariable, receiver);\n        }\n        public DSLExpression getReceiver() {\n            return receiver;\n        }\n        public String getName() {\n            return name;\n        }\n        @Override\n        public void accept(DSLExpressionVisitor visitor) {\n            if (receiver != null) {\n                receiver.accept(visitor);\n            }\n            visitor.visitVariable(this);\n        }\n        @Override\n        public DSLExpression reduce(DSLExpressionReducer reducer) {\n            DSLExpression newReceiver = null;\n            if (receiver != null) {\n                newReceiver = receiver.reduceImpl(reducer);\n            }\n            Variable c = this;\n            if (newReceiver != receiver) {\n                c = new Variable(newReceiver, getName());\n                c.setResolvedTargetType(getResolvedTargetType());\n                c.setResolvedVariable(getResolvedVariable());\n            }\n            return reducer.visitVariable(c);\n        }\n        @Override\n        public TypeMirror getResolvedType() {\n            return resolvedVariable != null ? resolvedVariable.asType() : null;\n        }\n        public void setResolvedVariable(VariableElement resolvedVariable) {\n            this.resolvedVariable = resolvedVariable;\n        }\n        public VariableElement getResolvedVariable() {\n            return resolvedVariable;\n        }\n        @Override\n        public String toString() {\n            return \"Variable [receiver=\" + receiver + \", name=\" + name + \", resolvedVariable=\" + resolvedVariable + \"]\";\n        }\n    }\n    public static final class IntLiteral extends DSLExpression {\n        private final String literal;\n        private int resolvedValueInt;\n        private TypeMirror resolvedType;\n        public IntLiteral(String literal) {\n            this.literal = literal;\n        }\n        @Override\n        public boolean equals(Object obj) {\n            if (obj instanceof IntLiteral) {\n                IntLiteral other = (IntLiteral) obj;\n                return resolvedValueInt == other.resolvedValueInt;\n            }\n            return false;\n        }\n        @Override\n        public Object resolveConstant() {\n            return resolvedValueInt;\n        }\n        @Override\n        public int hashCode() {\n            return resolvedValueInt;\n        }\n        public String getLiteral() {\n            return literal;\n        }\n        public int getResolvedValueInt() {\n            return resolvedValueInt;\n        }\n        public void setResolvedValueInt(int resolved) {\n            this.resolvedValueInt = resolved;\n        }\n        @Override\n        public TypeMirror getResolvedType() {\n            return resolvedType;\n        }\n        public void setResolvedType(TypeMirror resolvedType) {\n            this.resolvedType = resolvedType;\n        }\n        @Override\n        public void accept(DSLExpressionVisitor visitor) {\n            visitor.visitIntLiteral(this);\n        }\n        @Override\n        public DSLExpression reduce(DSLExpressionReducer reducer) {\n            return this;\n        }\n        @Override\n        public String toString() {\n            return \"IntLiteral [literal=\" + literal + \", resolvedValueInt=\" + resolvedValueInt + \", resolvedType=\" + resolvedType + \"]\";\n        }\n    }\n    public static final class BooleanLiteral extends DSLExpression {\n        private final boolean literal;\n        private TypeMirror resolvedType;\n        public BooleanLiteral(boolean literal) {\n            this.literal = literal;\n        }\n        @Override\n        public boolean equals(Object obj) {\n            if (obj instanceof BooleanLiteral) {\n                BooleanLiteral other = (BooleanLiteral) obj;\n                return literal == other.literal;\n            }\n            return false;\n        }\n        @Override\n        public Object resolveConstant() {\n            return literal;\n        }\n        @Override\n        public int hashCode() {\n            return Boolean.hashCode(literal);\n        }\n        public boolean getLiteral() {\n            return literal;\n        }\n        @Override\n        public TypeMirror getResolvedType() {\n            return resolvedType;\n        }\n        public void setResolvedType(TypeMirror resolvedType) {\n            this.resolvedType = resolvedType;\n        }\n        @Override\n        public void accept(DSLExpressionVisitor visitor) {\n            visitor.visitBooleanLiteral(this);\n        }\n        @Override\n        public DSLExpression reduce(DSLExpressionReducer reducer) {\n            return this;\n        }\n        @Override\n        public String toString() {\n            return \"BooleanLiteral [literal=\" + literal + \", resolvedType=\" + resolvedType + \"]\";\n        }\n    }\n<fim_suffix>    public abstract static class AbstractDSLExpressionVisitor implements DSLExpressionVisitor {\n        @Override\n        public void visitBinary(Binary binary) {\n        }\n        @Override\n        public void visitCall(Call binary) {\n        }\n        @Override\n        public void visitIntLiteral(IntLiteral binary) {\n        }\n        public void visitClassLiteral(ClassLiteral classLiteral) {\n        }\n        @Override\n        public void visitNegate(Negate negate) {\n        }\n        @Override\n        public void visitVariable(Variable binary) {\n        }\n        public void visitBooleanLiteral(BooleanLiteral binary) {\n        }\n    }<fim_middle>// class below has no smell\n"}