{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.mapred;\n\nimport org.apache.hadoop.classification.InterfaceAudience.Private;\nimport org.apache.hadoop.classification.InterfaceStability.Unstable;\n\n/*\n * This object gathers the [currently four] PeriodStatset's that we\n * are gathering for a particular task attempt for packaging and\n * handling as a single object.\n */\n@Private\n@Unstable\npublic class ProgressSplitsBlock {\n  final PeriodicStatsAccumulator progressWallclockTime;\n  final PeriodicStatsAccumulator progressCPUTime;\n  final PeriodicStatsAccumulator progressVirtualMemoryKbytes;\n  final PeriodicStatsAccumulator progressPhysicalMemoryKbytes;\n\n  static final int[] NULL_ARRAY = new int[0];\n\n  static final int WALLCLOCK_TIME_INDEX = 0;\n  static final int CPU_TIME_INDEX = 1;\n  static final int VIRTUAL_MEMORY_KBYTES_INDEX = 2;\n  static final int PHYSICAL_MEMORY_KBYTES_INDEX = 3;\n\n  static final int DEFAULT_NUMBER_PROGRESS_SPLITS = 12;\n\n  ProgressSplitsBlock(int numberSplits) {\n    progressWallclockTime\n      = new CumulativePeriodicStats(numberSplits);\n    progressCPUTime\n      = new CumulativePeriodicStats(numberSplits);\n    progressVirtualMemoryKbytes\n      = new StatePeriodicStats(numberSplits);\n    progressPhysicalMemoryKbytes\n      = new StatePeriodicStats(numberSplits);\n  }\n\n  // this coordinates with LoggedTaskAttempt.SplitVectorKind\n<fim_suffix>  int[][] burst() {\n    int[][] result = new int[4][];\n\n    result[WALLCLOCK_TIME_INDEX] = progressWallclockTime.getValues();\n    result[CPU_TIME_INDEX] = progressCPUTime.getValues();\n    result[VIRTUAL_MEMORY_KBYTES_INDEX] = progressVirtualMemoryKbytes.getValues();\n    result[PHYSICAL_MEMORY_KBYTES_INDEX] = progressPhysicalMemoryKbytes.getValues();\n\n    return result;\n  }\n\n  static public int[] arrayGet(int[][] burstedBlock, int index) {\n    return burstedBlock == null ? NULL_ARRAY : burstedBlock[index];\n  }\n\n  static public int[] arrayGetWallclockTime(int[][] burstedBlock) {\n    return arrayGet(burstedBlock, WALLCLOCK_TIME_INDEX);\n  }\n\n  static public int[] arrayGetCPUTime(int[][] burstedBlock) {\n    return arrayGet(burstedBlock, CPU_TIME_INDEX);\n  }\n\n  static public int[] arrayGetVMemKbytes(int[][] burstedBlock) {\n    return arrayGet(burstedBlock, VIRTUAL_MEMORY_KBYTES_INDEX);\n  }\n\n  static public int[] arrayGetPhysMemKbytes(int[][] burstedBlock) {\n    return arrayGet(burstedBlock, PHYSICAL_MEMORY_KBYTES_INDEX);\n  }\n}\n    <fim_middle>// function below has no smell\n"}