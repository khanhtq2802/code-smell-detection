{"text": "<fim_prefix>\t{\n\t\tthis.useInitialHeight = useInitialHeight;\n\t\treturn this;\n\t}\n\t/**\n\t * Returns true if the initial height should be used (in favor of preserving real content\n\t * height).\n\t * \n\t * @return True if initial height should be used, false is real content height should be\n\t *         preserved (valid only if the window is not resizable and the content is a component\n\t *         (not a page)\n\t */\n\tpublic boolean isUseInitialHeight()\n\t{\n\t\treturn useInitialHeight;\n\t}\n\t/**\n\t * Sets whether the user will be able to resize the window.\n\t * \n\t * @param resizable\n\t *            Whether the window is resizable\n\t * @return this\n\t */\n\tpublic ModalWindow setResizable(final boolean resizable)\n\t{\n\t\tthis.resizable = resizable;\n\t\treturn this;\n\t}\n\t/**\n\t * Returns whether the window is resizable.\n\t * \n\t * @return True if the window is resizable, false otherwise\n\t */\n\tpublic boolean isResizable()\n\t{\n\t\treturn resizable;\n\t}\n\t/**\n\t * Sets a flag whether to ask the user before leaving the page.\n\t * \n\t * @param unloadConfirmation\n\t *            a flag whether to ask the user before leaving the page\n\t * @return {@code this} instance, for chaining\n\t */\n\tpublic ModalWindow showUnloadConfirmation(final boolean unloadConfirmation)\n\t{\n\t\tthis.unloadConfirmation = unloadConfirmation;\n\t\treturn this;\n\t}\n\t/**\n\t * Returns whether the user should be asked before leaving the page.\n\t * \n\t * @return {@code true} if the user should be asked if the last action causes leaving the page,\n\t *         {@code false} otherwise\n\t */\n\tpublic boolean showUnloadConfirmation()\n\t{\n\t\treturn unloadConfirmation;\n\t}\n\t/**\n\t * Sets the CSS unit used for initial window width. This is only applicable when the window is\n\t * not resizable.\n\t * \n\t * @param widthUnit\n\t *            CSS unit for initial window width.\n\t * @return this\n\t */\n\tpublic ModalWindow setWidthUnit(final String widthUnit)\n\t{\n\t\tthis.widthUnit = widthUnit;\n\t\treturn this;\n\t}\n\t/**\n\t * Returns the CSS unit for initial window width.\n\t * \n\t * @return CSS unit for initial window width.\n\t */\n\tpublic String getWidthUnit()\n\t{\n\t\treturn widthUnit;\n\t}\n\t/**\n\t * Sets the CSS unit used for initial window height. This is only applicable when the window is\n\t * not resizable.\n\t * \n\t * @param heightUnit\n\t *            CSS unit for initial window height.\n\t * @return this\n\t */\n\tpublic ModalWindow setHeightUnit(final String heightUnit)\n\t{\n\t\tthis.heightUnit = heightUnit;\n\t\treturn this;\n\t}\n\t/**\n\t * Retrns the CSS unit for initial window height.\n\t * \n\t * @return CSS unit for initial window height.\n\t */\n\tpublic String getHeightUnit()\n\t{\n\t\treturn heightUnit;\n\t}\n\t/**\n\t * Sets the name of the cookie that is used to remember window position (and size if the window\n\t * is resizable).\n\t * \n\t * @param cookieName\n\t *            Name of the cookie\n\t * @return this\n\t */\n\tpublic ModalWindow setCookieName(final String cookieName)\n\t{\n\t\tif ((cookieName != null) && (cookieName.contains(\",\") || cookieName.contains(\"|\")))\n\t\t{\n\t\t\tthrow new IllegalArgumentException(\"Cookie name may not contain ',' or '|' characters.\");\n\t\t}\n\t\tthis.cookieName = cookieName;\n\t\treturn this;\n\t}\n\t/**\n\t * Returns the name of cookie that is used to remember window position (and size if the window\n\t * is resizable).\n\t * \n\t * @return Name of the cookie\n\t */\n\tpublic String getCookieName()\n\t{\n\t\treturn cookieName;\n\t}\n\t/**\n\t * Sets the title of window. If the window is a page, title can be <code>null</code>. In that\n\t * case it will display the title document inside the window.\n\t * \n\t * @param title\n\t *            Title of the window\n\t * @return this\n\t */\n\tpublic ModalWindow setTitle(final String title)\n\t{\n\t\tthis.title = new Model<>(title);\n\t\treturn this;\n\t}\n\t/**\n\t * Sets the title of window. If the window is a page, title can be <code>null</code>. In that\n\t * case it will display the title document inside the window.\n\t * \n\t * @param title\n\t *            Title of the window\n\t * @return this\n\t */\n\tpublic ModalWindow setTitle(IModel<String> title)\n\t{\n\t\ttitle = wrap(title);\n\t\tthis.title = title;\n\t\treturn this;\n\t}\n\t/**\n\t * Returns the title of the window.\n\t * \n\t * @return Title of the window\n\t */\n\tpublic IModel<String> getTitle()\n\t{\n\t\treturn title;\n\t}\n\t/**\n\t * Mask is the element behind the window, that prevents user from interacting the rest of page.\n\t * Mask can be either\n\t * <ul>\n\t * <li><code>{@link #TRANSPARENT}</code> - the mask is invisible\n\t * <li><code>{@link #SEMI_TRANSPARENT}</code> - the mask is black with small opacity (10%)\n\t * </ul>\n\t * \n\t * @author Matej Knopp\n\t */\n\tpublic static final class MaskType extends EnumeratedType\n\t{\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t/** Transparent mask (not visible). */\n\t\tpublic static final MaskType TRANSPARENT = new MaskType(\"TRANSPARENT\");\n\t\t/** Visible mask (black with low opacity). */\n\t\tpublic static final MaskType SEMI_TRANSPARENT = new MaskType(\"SEMI_TRANSPARENT\");\n\t\t/**\n\t\t * Constructor.\n\t\t * \n\t\t * @param name\n\t\t */\n\t\tpublic MaskType(final String name)\n\t\t{\n\t\t\tsuper(name);\n\t\t}\n\t}\n\t/**\n\t * Sets the mask type of the window.\n\t * \n\t * @param mask\n\t *            The mask type\n\t * @return this\n\t */\n\tpublic ModalWindow setMaskType(final MaskType mask)\n\t{\n\t\tmaskType = mask;\n\t\treturn this;\n\t}\n\t/**\n\t * Returns the mask type of the window\n\t * \n\t * @return The mask type\n\t */\n\tpublic MaskType getMaskType()\n\t{\n\t\treturn maskType;\n\t}\n\t/**\n\t * Creates the page.\n\t * \n\t * @return Page instance or null if page couldn't be created.\n\t */\n\tprivate Page createPage()\n\t{\n\t\tif (pageCreator == null)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn pageCreator.createPage();\n\t\t}\n\t}\n\t/**\n\t * @see org.apache.wicket.Component#onBeforeRender()\n\t */\n\t@Override\n\tprotected void onBeforeRender()\n\t{\n\t\tshown = makeContentVisible();\n\t\tgetContent().setOutputMarkupId(true);\n\t\tgetContent().setVisible(shown);\n\t\tsuper.onBeforeRender();\n\t}\n\t/**\n\t * You may subclass this method in case you don't want to show up the window on normal page\n\t * refresh.\n\t * \n\t * @return true, if the window shall be shown\n\t */\n<fim_suffix>\tprotected boolean makeContentVisible()\n\t{\n\t\t// if user is refreshing whole page, the window will not be shown\n\t\tif (getWebRequest().isAjax() == false)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn shown;\n\t\t}\n\t}<fim_middle>// function below has no smell\n"}