{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.apache.geode.cache;\n\nimport java.io.ObjectStreamException;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.apache.geode.annotations.Immutable;\n\n\n/**\n * Specifies how the region is affected by resumption of reliability when one or more missing\n * required roles return to the distributed membership. The <code>ResumptionAction</code> is\n * specified when configuring a region's {@link org.apache.geode.cache.MembershipAttributes}.\n *\n * @deprecated this API is scheduled to be removed\n */\n@Immutable\npublic class ResumptionAction implements java.io.Serializable {\n  private static final long serialVersionUID = 6632254151314915610L;\n\n  /** No special action takes place when reliability resumes. */\n  @Immutable\n  public static final ResumptionAction NONE = new ResumptionAction(\"NONE\", 0);\n\n  /**\n   * Resumption of reliability causes the region to be cleared of all data and\n   * {@link DataPolicy#withReplication replicated} regions will do a new getInitialImage operation\n   * to repopulate the region. Any existing references to this region become unusable in that any\n   * subsequent methods invoked on those references will throw a\n   * {@link RegionReinitializedException}.\n   */\n  @Immutable\n  public static final ResumptionAction REINITIALIZE = new ResumptionAction(\"REINITIALIZE\", 1);\n\n  /** The name of this mirror type. */\n  private final transient String name;\n\n  /** byte used as ordinal to represent this Scope */\n  public final byte ordinal;\n\n  @Immutable\n  private static final ResumptionAction[] PRIVATE_VALUES = {NONE, REINITIALIZE};\n\n  /** List of all ResumptionAction values */\n  @Immutable\n  public static final List VALUES = Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES));\n\n  private Object readResolve() throws ObjectStreamException {\n    return PRIVATE_VALUES[ordinal]; // Canonicalize\n  }\n\n  /** Creates a new instance of ResumptionAction. */\n  private ResumptionAction(String name, int ordinal) {\n    this.name = name;\n    this.ordinal = (byte) ordinal;\n  }\n\n  /** Return the ResumptionAction represented by specified ordinal */\n  public static ResumptionAction fromOrdinal(byte ordinal) {\n    return PRIVATE_VALUES[ordinal];\n  }\n\n  /** Return the ResumptionAction specified by name */\n<fim_suffix>  public static ResumptionAction fromName(String name) {\n    if (name == null || name.length() == 0) {\n      throw new IllegalArgumentException(\n          String.format(\"Invalid ResumptionAction name: %s\",\n              name));\n    }\n    for (int i = 0; i < PRIVATE_VALUES.length; i++) {\n      if (name.equals(PRIVATE_VALUES[i].name)) {\n        return PRIVATE_VALUES[i];\n      }\n    }\n    throw new IllegalArgumentException(\n        String.format(\"Invalid ResumptionAction name: %s\", name));\n  }\n\n  /** Returns true if this is <code>NONE</code>. */\n  public boolean isNone() {\n    return this == NONE;\n  }\n\n  /** Returns true if this is <code>REINITIALIZE</code>. */\n  public boolean isReinitialize() {\n    return this == REINITIALIZE;\n  }\n\n  /**\n   * Returns a string representation for this resumption action.\n   *\n   * @return the name of this resumption action\n   */\n  @Override\n  public String toString() {\n    return this.name;\n  }\n\n}<fim_middle>// function below has no smell\n"}