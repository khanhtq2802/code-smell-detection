{"text": "<fim_prefix>/**\n * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.\n */\nimport com.oracle.bmc.Region;\nimport com.oracle.bmc.auth.AuthenticationDetailsProvider;\nimport com.oracle.bmc.auth.ConfigFileAuthenticationDetailsProvider;\nimport com.oracle.bmc.identity.IdentityClient;\nimport com.oracle.bmc.identity.model.User;\nimport com.oracle.bmc.identity.requests.ListUsersRequest;\nimport com.oracle.bmc.identity.responses.ListUsersResponse;\n\nimport java.io.IOException;\n\n/**\n * This class demonstrates the different pagination mechanisms available in the Java SDK. It covers three\n * ways of doing pagination:\n *\n * <ul>\n *   <li>Manually handling next page tokens</li>\n *   <li>Using the paginator exposed by each service client to iterate through responses to service calls</li>\n *   <li>Using the paginator exposed by each sertvice client to iterate through the models/resources returned by service calls</li>\n * </ul>\n *\n * This class also makes the following assumptions:\n *\n * <ul>\n *   <li>\n *      The configuration file used by service clients will be sourced from the default\n *      location (~/.oci/config) and the DEFAULT profile will be used\n *   </li>\n *   <li>\n *      The ListUsers operation in Identity service will be used to demonstrate pagination, so you should ensure that\n *      you have permissions to call this operation\n *   </li>\n *   <li>The region used is us-phoenix-1</li>\n * <ul>\n */\npublic class PaginationExample {\n\n    private static final String CONFIG_LOCATION = \"~/.oci/config\";\n    private static final String CONFIG_PROFILE = \"DEFAULT\";\n\n    /**\n     * The entry point for the example.\n     *\n     * @param args Arguments to provide to the example. The following arguments are expected:\n     * <ul>\n     *   <li>The OCID of the tenancy (so we can list users)</li>\n     * </ul>\n     */\n    public static void main(String[] args) throws IOException {\n        if (args.length != 1) {\n            throw new IllegalArgumentException(\n                    \"This example expects one arguments: Your tenancy OCID\");\n        }\n\n        final String tenancyId = args[0];\n\n        final AuthenticationDetailsProvider provider =\n                new ConfigFileAuthenticationDetailsProvider(CONFIG_LOCATION, CONFIG_PROFILE);\n        final IdentityClient identityClient = new IdentityClient(provider);\n        identityClient.setRegion(Region.US_PHOENIX_1);\n\n        try {\n            doManualPagination(identityClient, tenancyId);\n            doPaginateWithResponsePaginator(identityClient, tenancyId);\n            doPaginateWithRecordPaginator(identityClient, tenancyId);\n        } finally {\n            identityClient.close();\n        }\n    }\n\n    /**\n     * This method demonstrates how to do pagination yourself by manually managing the next page\n     * tokens returned by service responses\n     *\n     * @param identityClient the client used to make service calls\n     * @param compartmentId the OCID of the compartment we'll issue the ListUsers request against. This should be your tenancy OCID\n     */\n    private static void doManualPagination(\n            final IdentityClient identityClient, final String compartmentId) {\n\n        System.out.println(\"Manual Pagination\");\n        System.out.println(\"===================\");\n\n        String nextPageToken = null;\n        do {\n            ListUsersResponse response =\n                    identityClient.listUsers(\n                            ListUsersRequest.builder()\n                                    .compartmentId(compartmentId)\n                                    .page(nextPageToken)\n                                    .build());\n            for (User user : response.getItems()) {\n                System.out.println(user);\n            }\n            nextPageToken = response.getOpcNextPage();\n        } while (nextPageToken != null);\n\n        System.out.println();\n        System.out.println();\n    }\n\n    /**\n     * This method demonstrates how to do pagination by using the Paginator offered by the service client. Each service\n     * client has a getPaginators() method which will return a Paginator. The Paginator will have methods which vend a\n     * {@link java.lang.Iterable} that can be used to iterate over either Response objects returned by a service call or\n     * resources/records being listed.\n     *\n     * This method demonstrates how to iterate over the Response objects using the Paginator. The methods used to\n     * get an iterable over Response objects are always of the form <operation>ResponseIterator().\n     */\n    private static void doPaginateWithResponsePaginator(\n            final IdentityClient identityClient, final String compartmentId) {\n\n        System.out.println(\"Pagination Using Response Paginator\");\n        System.out.println(\"===================\");\n\n        // Build a request object as normal, including any sorting or filtering you wish to do\n        final ListUsersRequest request =\n                ListUsersRequest.builder().compartmentId(compartmentId).build();\n\n        // Note that the iterable is over the Response objects\n        final Iterable<ListUsersResponse> responseIterator =\n                identityClient.getPaginators().listUsersResponseIterator(request);\n        for (ListUsersResponse response : responseIterator) {\n            for (User user : response.getItems()) {\n                System.out.println(user);\n            }\n        }\n\n        System.out.println();\n        System.out.println();\n    }\n\n    /**\n     * This method demonstrates how to do pagination by using the Paginator offered by the service client. Each service\n     * client has a getPaginators() method which will return a Paginator. The Paginator will have methods which vend a\n     * {@link java.lang.Iterable} that can be used to iterate over either Response objects returned by a service call or\n     * resources/records being listed.\n     *\n     * This method demonstrates how to iterate over the resources/records using the Paginator. The methods used to\n     * get an iterable over resources/records are always of the form <operation>RecordIterator().\n     */\n<fim_suffix>    private static void doPaginateWithRecordPaginator(\n            final IdentityClient identityClient, final String compartmentId) {\n\n        System.out.println(\"Pagination Using Record Paginator\");\n        System.out.println(\"===================\");\n\n        // Build a request object as normal, including any sorting or filtering you wish to do\n        final ListUsersRequest request =\n                ListUsersRequest.builder().compartmentId(compartmentId).build();\n\n        // Note that the iterable is over the model object\n        final Iterable<User> recordIterator =\n                identityClient.getPaginators().listUsersRecordIterator(request);\n        for (User user : recordIterator) {\n            System.out.println(user);\n        }\n\n        System.out.println();\n        System.out.println();\n    }\n}<fim_middle>// function below has no smell\n"}