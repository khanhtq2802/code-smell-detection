{"text": "<fim_prefix>/**\n * Copyright (c) 2015-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to\n * use, copy, modify, and distribute this software in source code or binary\n * form for use in connection with the web services and APIs provided by\n * Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use\n * of this software is subject to the Facebook Developer Principles and\n * Policies [http://developers.facebook.com/policy/]. This copyright notice\n * shall be included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\npackage com.facebook.ads.sdk;\nimport java.io.File;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.Type;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport com.google.common.base.Function;\nimport com.google.common.util.concurrent.Futures;\nimport com.google.common.util.concurrent.ListenableFuture;\nimport com.google.common.util.concurrent.SettableFuture;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonArray;\nimport com.google.gson.annotations.SerializedName;\nimport com.google.gson.reflect.TypeToken;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParser;\nimport com.facebook.ads.sdk.APIException.MalformedResponseException;\n/**\n * This class is auto-generated.\n *\n * For any issues or feature requests related to this class, please let us know\n * on github and we'll fix in our codegen framework. We'll not be able to accept\n * pull request for this class.\n *\n */\npublic class PageInsightsAsyncExportRun extends APINode {\n  @SerializedName(\"data_level\")\n  private String mDataLevel = null;\n  @SerializedName(\"filters\")\n  private List<Object> mFilters = null;\n  @SerializedName(\"format\")\n  private String mFormat = null;\n  @SerializedName(\"gen_report_date\")\n  private Long mGenReportDate = null;\n  @SerializedName(\"id\")\n  private String mId = null;\n  @SerializedName(\"report_end_date\")\n  private Long mReportEndDate = null;\n  @SerializedName(\"report_start_date\")\n  private Long mReportStartDate = null;\n  @SerializedName(\"sorters\")\n  private List<Object> mSorters = null;\n  @SerializedName(\"status\")\n  private String mStatus = null;\n  protected static Gson gson = null;\n  PageInsightsAsyncExportRun() {\n  }\n  public PageInsightsAsyncExportRun(Long id, APIContext context) {\n    this(id.toString(), context);\n  }\n  public PageInsightsAsyncExportRun(String id, APIContext context) {\n    this.mId = id;\n    this.context = context;\n  }\n  public PageInsightsAsyncExportRun fetch() throws APIException{\n    PageInsightsAsyncExportRun newInstance = fetchById(this.getPrefixedId().toString(), this.context);\n    this.copyFrom(newInstance);\n    return this;\n  }\n  public static PageInsightsAsyncExportRun fetchById(Long id, APIContext context) throws APIException {\n    return fetchById(id.toString(), context);\n  }\n  public static ListenableFuture<PageInsightsAsyncExportRun> fetchByIdAsync(Long id, APIContext context) throws APIException {\n    return fetchByIdAsync(id.toString(), context);\n  }\n<fim_suffix>  public static PageInsightsAsyncExportRun fetchById(String id, APIContext context) throws APIException {\n    return\n      new APIRequestGet(id, context)\n      .requestAllFields()\n      .execute();\n  }\n  public static ListenableFuture<PageInsightsAsyncExportRun> fetchByIdAsync(String id, APIContext context) throws APIException {\n    return\n      new APIRequestGet(id, context)\n      .requestAllFields()\n      .executeAsync();\n  }\n  public static APINodeList<PageInsightsAsyncExportRun> fetchByIds(List<String> ids, List<String> fields, APIContext context) throws APIException {\n    return (APINodeList<PageInsightsAsyncExportRun>)(\n      new APIRequest<PageInsightsAsyncExportRun>(context, \"\", \"/\", \"GET\", PageInsightsAsyncExportRun.getParser())\n        .setParam(\"ids\", APIRequest.joinStringList(ids))\n        .requestFields(fields)\n        .execute()\n    );\n  }\n  public static ListenableFuture<APINodeList<PageInsightsAsyncExportRun>> fetchByIdsAsync(List<String> ids, List<String> fields, APIContext context) throws APIException {\n    return\n      new APIRequest(context, \"\", \"/\", \"GET\", PageInsightsAsyncExportRun.getParser())\n        .setParam(\"ids\", APIRequest.joinStringList(ids))\n        .requestFields(fields)\n        .executeAsyncBase();\n  }\n  private String getPrefixedId() {\n    return getId();\n  }\n  public String getId() {\n    return getFieldId().toString();\n  }\n  public static PageInsightsAsyncExportRun loadJSON(String json, APIContext context, String header) {\n    PageInsightsAsyncExportRun pageInsightsAsyncExportRun = getGson().fromJson(json, PageInsightsAsyncExportRun.class);\n    if (context.isDebug()) {\n      JsonParser parser = new JsonParser();\n      JsonElement o1 = parser.parse(json);\n      JsonElement o2 = parser.parse(pageInsightsAsyncExportRun.toString());\n      if (o1.getAsJsonObject().get(\"__fb_trace_id__\") != null) {\n        o2.getAsJsonObject().add(\"__fb_trace_id__\", o1.getAsJsonObject().get(\"__fb_trace_id__\"));\n      }\n      if (!o1.equals(o2)) {\n        context.log(\"[Warning] When parsing response, object is not consistent with JSON:\");\n        context.log(\"[JSON]\" + o1);\n        context.log(\"[Object]\" + o2);\n      };\n    }\n    pageInsightsAsyncExportRun.context = context;\n    pageInsightsAsyncExportRun.rawValue = json;\n    pageInsightsAsyncExportRun.header = header;\n    return pageInsightsAsyncExportRun;\n  }\n  public static APINodeList<PageInsightsAsyncExportRun> parseResponse(String json, APIContext context, APIRequest request, String header) throws MalformedResponseException {\n    APINodeList<PageInsightsAsyncExportRun> pageInsightsAsyncExportRuns = new APINodeList<PageInsightsAsyncExportRun>(request, json, header);\n    JsonArray arr;\n    JsonObject obj;\n    JsonParser parser = new JsonParser();\n    Exception exception = null;\n    try{\n      JsonElement result = parser.parse(json);\n      if (result.isJsonArray()) {\n        // First, check if it's a pure JSON Array\n        arr = result.getAsJsonArray();\n        for (int i = 0; i < arr.size(); i++) {\n          pageInsightsAsyncExportRuns.add(loadJSON(arr.get(i).getAsJsonObject().toString(), context, header));\n        };\n        return pageInsightsAsyncExportRuns;\n      } else if (result.isJsonObject()) {\n        obj = result.getAsJsonObject();\n        if (obj.has(\"data\")) {\n          if (obj.has(\"paging\")) {\n            JsonObject paging = obj.get(\"paging\").getAsJsonObject();\n            if (paging.has(\"cursors\")) {\n                JsonObject cursors = paging.get(\"cursors\").getAsJsonObject();\n                String before = cursors.has(\"before\") ? cursors.get(\"before\").getAsString() : null;\n                String after = cursors.has(\"after\") ? cursors.get(\"after\").getAsString() : null;\n                pageInsightsAsyncExportRuns.setCursors(before, after);\n            }\n            String previous = paging.has(\"previous\") ? paging.get(\"previous\").getAsString() : null;\n            String next = paging.has(\"next\") ? paging.get(\"next\").getAsString() : null;\n            pageInsightsAsyncExportRuns.setPaging(previous, next);\n            if (context.hasAppSecret()) {\n              pageInsightsAsyncExportRuns.setAppSecret(context.getAppSecretProof());\n            }\n          }\n          if (obj.get(\"data\").isJsonArray()) {\n            // Second, check if it's a JSON array with \"data\"\n            arr = obj.get(\"data\").getAsJsonArray();\n            for (int i = 0; i < arr.size(); i++) {\n              pageInsightsAsyncExportRuns.add(loadJSON(arr.get(i).getAsJsonObject().toString(), context, header));<fim_middle>// function below has no smell\n"}