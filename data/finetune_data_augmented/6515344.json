{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2015 SAP SE and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    SAP SE - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.tycho.repository.p2base.metadata;\n\nimport static org.eclipse.tycho.repository.util.internal.BundleConstants.BUNDLE_ID;\n\nimport java.net.URI;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.core.runtime.IStatus;\nimport org.eclipse.core.runtime.OperationCanceledException;\nimport org.eclipse.core.runtime.Status;\nimport org.eclipse.equinox.p2.core.IPool;\nimport org.eclipse.equinox.p2.core.IProvisioningAgent;\nimport org.eclipse.equinox.p2.metadata.IInstallableUnit;\nimport org.eclipse.equinox.p2.query.IQuery;\nimport org.eclipse.equinox.p2.query.IQueryResult;\nimport org.eclipse.equinox.p2.repository.IRepositoryReference;\nimport org.eclipse.equinox.p2.repository.IRunnableWithProgress;\nimport org.eclipse.equinox.p2.repository.metadata.IMetadataRepository;\n\npublic class ImmutableInMemoryMetadataRepository implements IMetadataRepository {\n\n    private final QueryableCollection units;\n\n    public ImmutableInMemoryMetadataRepository(Set<IInstallableUnit> units) {\n        this.units = new QueryableCollection(units);\n    }\n\n    @SuppressWarnings(\"restriction\")\n    @Override\n    public IQueryResult<IInstallableUnit> query(IQuery<IInstallableUnit> query, IProgressMonitor monitor) {\n        return units.query(query, monitor);\n    }\n\n    @Override\n    public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor) {\n        try {\n            runnable.run(monitor);\n        } catch (OperationCanceledException e) {\n            return new Status(IStatus.CANCEL, BUNDLE_ID, e.getMessage(), e);\n        } catch (Exception e) {\n            return new Status(IStatus.ERROR, BUNDLE_ID, e.getMessage(), e);\n        }\n        return Status.OK_STATUS;\n    }\n\n    // defaulted getters\n\n    @Override\n    public URI getLocation() {\n        return URI.create(\"memory:\" + super.hashCode());\n    }\n\n    @Override\n    public String getType() {\n        return ImmutableInMemoryMetadataRepository.class.getName();\n    }\n\n    @Override\n    public String getVersion() {\n        return \"1.0.0\";\n    }\n\n    @Override\n    public String getName() {\n        return super.toString();\n    }\n\n    @Override\n    public String getDescription() {\n        return \"\";\n    }\n\n    @Override\n    public String getProvider() {\n        return \"\";\n    }\n\n    @Override\n    public Map<String, String> getProperties() {\n        return Collections.emptyMap();\n    }\n\n    @Override\n    public String getProperty(String key) {\n        return null;\n    }\n\n    @Override\n    public IProvisioningAgent getProvisioningAgent() {\n        return null;\n    }\n\n    @Override\n    public <T> T getAdapter(Class<T> adapter) {\n        return null;\n    }\n\n    @Override\n    public Collection<IRepositoryReference> getReferences() {\n        return Collections.emptyList();\n    }\n\n    // mutators (unsupported)\n\n    @Override\n    public boolean isModifiable() {\n        return false;\n    }\n\n    @Override\n    public String setProperty(String key, String value) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public String setProperty(String key, String value, IProgressMonitor monitor) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public void addInstallableUnits(Collection<IInstallableUnit> installableUnits) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public void addReferences(Collection<? extends IRepositoryReference> references) {\n        throw new UnsupportedOperationException();\n    }\n\n<fim_suffix>    @Override\n    public boolean removeInstallableUnits(Collection<IInstallableUnit> installableUnits) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public void removeAll() {\n        throw new UnsupportedOperationException();\n\n    }\n\n    @Override\n    public void compress(IPool<IInstallableUnit> iuPool) {\n        throw new UnsupportedOperationException();\n    }\n\n}<fim_middle>// function below has no smell\n"}