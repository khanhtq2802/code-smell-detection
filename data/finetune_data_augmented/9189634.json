{"text": "<fim_prefix>                }\n            }\n            return 0;\n        }\n        private void createArgumentUI( )\n        {\n            IAggrFunction function = getSelectedFunction( );\n            if ( function != null )\n            {\n                IParameterDefn[] params = function.getParameterDefn( );\n                if ( params != null && params.length > 0 )\n                {\n                    ( (GridData) paramsComposite.getLayoutData( ) ).exclude = false;\n                    ( (GridData) paramsComposite.getLayoutData( ) ).heightHint = SWT.DEFAULT;\n                    int width = getMaxLabelWidth( parent );\n                    for ( final IParameterDefn param : params )\n                    {\n                        String paramName =      DataAdapterUtil.adaptArgumentName(param.getName( ) );\n                        //Expression is handled as measureExpression \n                        if ( ARGUMENT_EXPRESSION.equals( paramName ) )\n                        {\n                            continue;\n                        }\n                        Label lblParam = new Label( paramsComposite, SWT.NONE );\n                        lblParam.setText(\n                                param.getDisplayName( ) + Messages.getString( \"MeasureDialog.Text.Colon\" ) ); //$NON-NLS-1$\n                        GridData gd = new GridData( );\n                        gd.widthHint = lblParam.computeSize( SWT.DEFAULT, SWT.DEFAULT ).x;\n                        if ( gd.widthHint < width )\n                            gd.widthHint = width;\n                        lblParam.setLayoutData( gd );\n                        if ( param.isDataField( ) )\n                        {\n                            createComboControl( paramsComposite, param );\n                        }\n                        else\n                        {\n                            createTextControl( paramsComposite, param );\n                        }\n                    }\n                }\n            }\n        }\n        private void createComboControl( Composite paramsComposite, final IParameterDefn param )\n        {\n            assert param.isDataField( );\n            final Combo cmbDataField = new Combo( paramsComposite, SWT.BORDER );\n            cmbDataField.setLayoutData( new GridData( GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL ) );\n            cmbDataField.setVisibleItemCount( 30 );\n            createExpressionButton( paramsComposite, cmbDataField, param );\n            paramsMap.put( param.getName( ), cmbDataField );\n            cmbDataField.addModifyListener( new ModifyListener( ) {\n                public void modifyText( ModifyEvent e )\n                {\n                    paramsValueMap.put( param.getName( ), new Expression( cmbDataField.getText( ),\n                            (String) cmbDataField.getData( ExpressionButtonUtil.EXPR_TYPE ) ) );\n                    callback.run( );\n                }\n            } );\n            cmbDataField.addSelectionListener( new SelectionAdapter( ) {\n                public void widgetSelected( SelectionEvent e )\n                {\n                    Expression expr = createBindingExpression( cmbDataField );\n                    if ( expr != null )\n                    {\n                        cmbDataField.setText( expr.getStringExpression( ) );\n                    }\n                    if ( expr == null )\n                    {\n                        expr = new Expression( cmbDataField.getText( ),\n                                (String) cmbDataField.getData( ExpressionButtonUtil.EXPR_TYPE ) );\n                    }\n                    paramsValueMap.put( param.getName( ), expr );\n                }\n            } );\n        }\n        private void createTextControl( Composite paramsComposite, final IParameterDefn param )\n        {\n            assert!param.isDataField( );\n            final Text txtParam = new Text( paramsComposite, SWT.BORDER | SWT.MULTI );\n            GridData gridData = new GridData( GridData.FILL_HORIZONTAL );\n            gridData.heightHint = txtParam.computeSize( SWT.DEFAULT, SWT.DEFAULT ).y - txtParam.getBorderWidth( ) * 2;\n            gridData.horizontalIndent = 0;\n            txtParam.setLayoutData( gridData );\n            createExpressionButton( paramsComposite, txtParam, param );\n            paramsMap.put( param.getName( ), txtParam );\n            txtParam.addModifyListener( new ModifyListener( ) {\n                public void modifyText( ModifyEvent e )\n                {\n                    paramsValueMap.put( param.getName( ), new Expression( txtParam.getText( ),\n                            (String) txtParam.getData( ExpressionButtonUtil.EXPR_TYPE ) ) );\n                    callback.run( );\n                }\n            } );\n        }\n        private void initArgumentUI( )\n        {\n            IAggrFunction function = getSelectedFunction( );\n            if ( function != null )\n            {\n                IParameterDefn[] params = function.getParameterDefn( );\n                for ( final IParameterDefn param : params )\n                {\n                    initArgumentField( param );\n                }\n            }\n        }\n        /**\n         * Create function parameters area. If parameter is data field type, create\n         * a combo box filled with binding holder's computed column.\n         */\n        protected void updateArgumentUI( )\n        {\n            resetArgumentUI( );\n            createArgumentUI( );\n            initArgumentUI( );\n            Point size = parent.getParent( ).computeSize( SWT.DEFAULT, SWT.DEFAULT );\n            parent.getParent( ).setSize( Math.max( size.x, 400 ), Math.max( size.y, 320 ) );\n        }\n        private void initArgumentField( IParameterDefn param )\n        {\n            Expression expr = paramsValueMap.get( param.getName( ) );\n            if ( expr != null )\n            {\n                String text = expr.getStringExpression( ) == null ? \"\" : expr.getStringExpression( );\n                String type = expr.getType( ) == null ? ExpressionType.JAVASCRIPT : expr.getType( );\n                Control control = paramsMap.get( param.getName( ) );\n                assert control != null;\n                if ( control instanceof Text )\n                {\n                    Text txtParam = (Text) control;\n                    txtParam.setText( text );\n                    txtParam.setData( ExpressionButtonUtil.EXPR_TYPE, type );\n                }\n                else if ( control instanceof Combo )\n                {\n                    Combo cmbDataField = (Combo) control;\n                    cmbDataField.setItems( getColumnBindings( ) );\n                    cmbDataField.setText( text );\n                    cmbDataField.setData( ExpressionButtonUtil.EXPR_TYPE, type);\n                }\n                ExpressionButton button = (ExpressionButton) control.getData( ExpressionButtonUtil.EXPR_BUTTON );\n                if ( button != null )\n                    button.refresh( );\n            }\n        }\n        private void createExpressionButton( final Composite parent, final Control control, final IParameterDefn param )\n        {\n            Listener listener = new Listener( ) {\n                public void handleEvent( Event event )\n                {\n                    callback.run( );\n                }\n            };\n            ExpressionButtonUtil.createExpressionButton( parent, control, exprProvider,\n                    this.bindingHolder, listener );\n        }\n        private String[] getColumnBindings( )\n        {\n            if ( bindings == null )\n            {\n                return new String[]{};\n            }\n            String[] names = new String[bindings.length];\n            for ( int i = 0; i < bindings.length; i++ )\n            {\n                names[i] = bindings[i].getName( );\n            }\n            return names;\n        }\n        private Expression createBindingExpression( Combo combo )\n        {\n            String text = combo.getText( );\n            String expr = ExpressionButtonUtil.getCurrentExpressionConverter( combo ).getBindingExpression( text );\n            if ( expr != null )\n            {\n                return new Expression( expr, ExpressionType.JAVASCRIPT );\n            }\n            return new Expression( text, ExpressionType.JAVASCRIPT );\n        }\n    }\n<fim_suffix>    private class FunctionProvider\n    {\n        private IAggrFunction[] funcs;\n        private HashMap<String, IAggrFunction> displayName2Funcs;\n        private HashMap<String, IAggrFunction> name2Funcs;\n        public FunctionProvider( IAggrFunction[] funcs )\n        {\n            this.funcs = funcs == null ? new IAggrFunction[0] : funcs;\n            this.displayName2Funcs = new HashMap<String, IAggrFunction>( funcs.length );\n            this.name2Funcs = new HashMap<String, IAggrFunction>( funcs.length );\n            for ( IAggrFunction func : funcs )\n            {\n                displayName2Funcs.put( func.getDisplayName( ), func );\n                name2Funcs.put( func.getName( ), func );\n            }\n        }\n        public IAggrFunction getFunction( String funcName )\n        {\n            return name2Funcs.get( funcName );\n        }\n        public IAggrFunction getFunctionByDisplayText( String displayText )\n        {\n            return displayName2Funcs.get( displayText );\n        }\n        public String[] getDisplayTexts( )\n        {\n            String[] displayTexts = new String[funcs.length];\n            for ( int i = 0; i < funcs.length; i++ )\n            {\n                displayTexts[i] = funcs[i].getDisplayName( );\n            }\n            Arrays.sort( displayTexts, new AlphabeticallyComparator( ) );\n            return displayTexts;\n        }\n    }<fim_middle>// class below has no smell\n"}