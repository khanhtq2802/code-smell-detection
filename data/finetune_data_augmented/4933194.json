{"text": "<fim_prefix>                    groups.add( group );\n                }\n            }\n        }\n        catch( SQLException e )\n        {\n        \tcloseQuietly( conn, ps, rs );\n            throw new WikiSecurityException( e.getMessage(), e );\n        }\n        finally\n        {\n            closeQuietly( conn, ps, rs );\n        }\n        return groups.toArray( new Group[groups.size()] );\n    }\n    /**\n     * Saves a Group to the group database. Note that this method <em>must</em>\n     * fail, and throw an <code>IllegalArgumentException</code>, if the\n     * proposed group is the same name as one of the built-in Roles: e.g.,\n     * Admin, Authenticated, etc. The database is responsible for setting\n     * create/modify timestamps, upon a successful save, to the Group. The\n     * method commits the results of the delete to persistent storage.\n     * \n     * @param group the Group to save\n     * @param modifier the user who saved the Group\n     * @throws WikiSecurityException if the Group could not be saved\n     *             successfully\n     */\n    public void save( Group group, Principal modifier ) throws WikiSecurityException\n    {\n        if( group == null || modifier == null )\n        {\n            throw new IllegalArgumentException( \"Group or modifier cannot be null.\" );\n        }\n        boolean exists = exists( group );\n        Connection conn = null;\n        PreparedStatement ps = null;\n        try\n        {\n            // Open the database connection\n            conn = m_ds.getConnection();\n            if( m_supportsCommits )\n            {\n                conn.setAutoCommit( false );\n            }\n            Timestamp ts = new Timestamp( System.currentTimeMillis() );\n            Date modDate = new Date( ts.getTime() );\n            if( !exists )\n            {\n                // Group is new: insert new group record\n                ps = conn.prepareStatement( m_insertGroup );\n                ps.setString( 1, group.getName() );\n                ps.setTimestamp( 2, ts );\n                ps.setString( 3, modifier.getName() );\n                ps.setTimestamp( 4, ts );\n                ps.setString( 5, modifier.getName() );\n                ps.execute();\n                // Set the group creation time\n                group.setCreated( modDate );\n                group.setCreator( modifier.getName() );\n                ps.close();\n            }\n            else\n            {\n                // Modify existing group record\n                ps = conn.prepareStatement( m_updateGroup );\n                ps.setTimestamp( 1, ts );\n                ps.setString( 2, modifier.getName() );\n                ps.setString( 3, group.getName() );\n                ps.execute();\n                ps.close();\n            }\n            // Set the group modified time\n            group.setLastModified( modDate );\n            group.setModifier( modifier.getName() );\n            // Now, update the group member list\n            // First, delete all existing member records\n            ps = conn.prepareStatement( m_deleteGroupMembers );\n            ps.setString( 1, group.getName() );\n            ps.execute();\n            ps.close();\n            // Insert group member records\n            ps = conn.prepareStatement( m_insertGroupMembers );\n            Principal[] members = group.members();\n            for( int i = 0; i < members.length; i++ )\n            {\n                Principal member = members[i];\n                ps.setString( 1, group.getName() );\n                ps.setString( 2, member.getName() );\n                ps.execute();\n            }\n            // Commit and close connection\n            if( m_supportsCommits )\n            {\n                conn.commit();\n            }\n        }\n        catch( SQLException e )\n        {\n        \tcloseQuietly(conn, ps, null );\n            throw new WikiSecurityException( e.getMessage(), e );\n        }\n        finally\n        {\n            closeQuietly(conn, ps, null );\n        }\n    }\n    /**\n     * Initializes the group database based on values from a Properties object.\n     * \n     * @param engine the wiki engine\n     * @param props the properties used to initialize the group database\n     * @throws WikiSecurityException if the database could not be initialized\n     *             successfully\n     * @throws NoRequiredPropertyException if a required property is not present\n     */\n    public void initialize( WikiEngine engine, Properties props ) throws NoRequiredPropertyException, WikiSecurityException\n    {\n        String table;\n        String memberTable;\n        m_engine = engine;\n        String jndiName = props.getProperty( PROP_GROUPDB_DATASOURCE, DEFAULT_GROUPDB_DATASOURCE );\n        try\n        {\n            Context initCtx = new InitialContext();\n            Context ctx = (Context) initCtx.lookup( \"java:comp/env\" );\n            m_ds = (DataSource) ctx.lookup( jndiName );\n            // Prepare the SQL selectors\n            table = props.getProperty( PROP_GROUPDB_TABLE, DEFAULT_GROUPDB_TABLE );\n            memberTable = props.getProperty( PROP_GROUPDB_MEMBER_TABLE, DEFAULT_GROUPDB_MEMBER_TABLE );\n            m_name = props.getProperty( PROP_GROUPDB_NAME, DEFAULT_GROUPDB_NAME );\n            m_created = props.getProperty( PROP_GROUPDB_CREATED, DEFAULT_GROUPDB_CREATED );\n            m_creator = props.getProperty( PROP_GROUPDB_CREATOR, DEFAULT_GROUPDB_CREATOR );\n            m_modifier = props.getProperty( PROP_GROUPDB_MODIFIER, DEFAULT_GROUPDB_MODIFIER );\n            m_modified = props.getProperty( PROP_GROUPDB_MODIFIED, DEFAULT_GROUPDB_MODIFIED );\n            m_member = props.getProperty( PROP_GROUPDB_MEMBER, DEFAULT_GROUPDB_MEMBER );\n            m_findAll = \"SELECT DISTINCT * FROM \" + table;\n            m_findGroup = \"SELECT DISTINCT * FROM \" + table + \" WHERE \" + m_name + \"=?\";\n            m_findMembers = \"SELECT * FROM \" + memberTable + \" WHERE \" + m_name + \"=?\";\n            // Prepare the group insert/update SQL\n            m_insertGroup = \"INSERT INTO \" + table + \" (\" + m_name + \",\" + m_modified + \",\" + m_modifier + \",\" + m_created + \",\"\n                            + m_creator + \") VALUES (?,?,?,?,?)\";\n            m_updateGroup = \"UPDATE \" + table + \" SET \" + m_modified + \"=?,\" + m_modifier + \"=? WHERE \" + m_name + \"=?\";\n            // Prepare the group member insert SQL\n            m_insertGroupMembers = \"INSERT INTO \" + memberTable + \" (\" + m_name + \",\" + m_member + \") VALUES (?,?)\";\n            // Prepare the group delete SQL\n            m_deleteGroup = \"DELETE FROM \" + table + \" WHERE \" + m_name + \"=?\";\n            m_deleteGroupMembers = \"DELETE FROM \" + memberTable + \" WHERE \" + m_name + \"=?\";\n        }\n        catch( NamingException e )\n        {\n            log.error( \"JDBCGroupDatabase initialization error: \" + e );\n            throw new NoRequiredPropertyException( PROP_GROUPDB_DATASOURCE, \"JDBCGroupDatabase initialization error: \" + e);\n        }\n        // Test connection by doing a quickie select\n        Connection conn = null;\n        PreparedStatement ps = null;\n        try\n        {\n            conn = m_ds.getConnection();\n            ps = conn.prepareStatement( m_findAll );\n            ps.executeQuery();\n            ps.close();\n        }\n        catch( SQLException e )\n        {\n        \tcloseQuietly( conn, ps, null );\n            log.error( \"DB connectivity error: \" + e.getMessage() );\n            throw new WikiSecurityException(\"DB connectivity error: \" + e.getMessage(), e );\n        }\n        finally\n        {\n            closeQuietly( conn, ps, null );\n        }\n        log.info( \"JDBCGroupDatabase initialized from JNDI DataSource: \" + jndiName );\n        // Determine if the datasource supports commits\n        try\n        {\n            conn = m_ds.getConnection();\n            DatabaseMetaData dmd = conn.getMetaData();\n            if( dmd.supportsTransactions() )\n            {\n                m_supportsCommits = true;\n                conn.setAutoCommit( false );\n                log.info( \"JDBCGroupDatabase supports transactions. Good; we will use them.\" );\n            }\n        }\n        catch( SQLException e )\n        {\n        \tcloseQuietly( conn, null, null );\n            log.warn( \"JDBCGroupDatabase warning: user database doesn't seem to support transactions. Reason: \" + e);\n        }\n        finally\n        {\n            closeQuietly( conn, null, null );\n        }\n    }\n    /**\n     * Returns <code>true</code> if the Group exists in back-end storage.\n     * \n     * @param group the Group to look for\n     * @return the result of the search\n     */\n<fim_suffix>    private boolean exists( Group group )\n    {\n        String index = group.getName();\n        try\n        {\n            findGroup( index );\n            return true;\n        }\n        catch( NoSuchPrincipalException e )\n        {\n            return false;\n        }\n    }<fim_middle>// function below has no smell\n"}