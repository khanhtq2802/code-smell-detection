{"text": "<fim_prefix>/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\npackage org.apache.qpid.server.protocol.v0_8.transport;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.apache.qpid.server.QpidException;\nimport org.apache.qpid.server.bytebuffer.QpidByteBuffer;\nimport org.apache.qpid.server.protocol.v0_8.AMQShortString;\nimport org.apache.qpid.server.protocol.v0_8.EncodingUtils;\nimport org.apache.qpid.server.protocol.v0_8.FieldTable;\nimport org.apache.qpid.server.transport.ByteBufferSender;\n\n<fim_suffix>public abstract class AMQMethodBodyImpl implements AMQMethodBody\n{\n    private static final Logger LOGGER = LoggerFactory.getLogger(AMQMethodBodyImpl.class);\n    public static final byte TYPE = 1;\n\n    public AMQMethodBodyImpl()\n    {\n    }\n\n    @Override\n    public byte getFrameType()\n    {\n        return TYPE;\n    }\n\n\n    /** unsigned short\n     *\n     * @return body size*/\n    abstract protected int getBodySize();\n\n\n    @Override\n    public AMQFrame generateFrame(int channelId)\n    {\n        return new AMQFrame(channelId, this);\n    }\n\n    /**\n     * Creates an AMQChannelException for the corresponding body type (a channel exception should include the class and\n     * method ids of the body it resulted from).\n     */\n\n    @Override\n    public void handle(final int channelId, final AMQVersionAwareProtocolSession session) throws QpidException\n    {\n        session.methodFrameReceived(channelId, this);\n    }\n\n    @Override\n    public int getSize()\n    {\n        return 2 + 2 + getBodySize();\n    }\n\n    @Override\n    public long writePayload(final ByteBufferSender sender)\n    {\n\n        final int size = getSize();\n        try (QpidByteBuffer buf = QpidByteBuffer.allocate(sender.isDirectBufferPreferred(), size))\n        {\n            buf.putUnsignedShort(getClazz());\n            buf.putUnsignedShort(getMethod());\n            writeMethodPayload(buf);\n            buf.flip();\n            sender.send(buf);\n        }\n        return size;\n    }\n\n    abstract protected void writeMethodPayload(QpidByteBuffer buffer);\n\n\n    protected int getSizeOf(AMQShortString string)\n    {\n        return EncodingUtils.encodedShortStringLength(string);\n    }\n\n    protected void writeByte(QpidByteBuffer buffer, byte b)\n    {\n        buffer.put(b);\n    }\n\n    protected void writeAMQShortString(QpidByteBuffer buffer, AMQShortString string)\n    {\n        EncodingUtils.writeShortStringBytes(buffer, string);\n    }\n\n\n    protected void writeInt(QpidByteBuffer buffer, int i)\n    {\n        buffer.putInt(i);\n    }\n\n\n    protected int getSizeOf(FieldTable table)\n    {\n        return EncodingUtils.encodedFieldTableLength(table);  //To change body of created methods use File | Settings | File Templates.\n    }\n\n    protected void writeFieldTable(QpidByteBuffer buffer, FieldTable table)\n    {\n        EncodingUtils.writeFieldTableBytes(buffer, table);\n    }\n\n    protected void writeLong(QpidByteBuffer buffer, long l)\n    {\n        buffer.putLong(l);\n    }\n\n\n    protected int getSizeOf(byte[] response)\n    {\n        return (response == null) ? 4 : response.length + 4;\n    }\n\n    protected void writeBytes(QpidByteBuffer buffer, byte[] data)\n    {\n        EncodingUtils.writeBytes(buffer,data);\n    }\n\n    protected void writeShort(QpidByteBuffer buffer, short s)\n    {\n        buffer.putShort(s);\n    }\n\n    protected void writeBitfield(QpidByteBuffer buffer, byte bitfield0)\n    {\n        buffer.put(bitfield0);\n    }\n\n    protected void writeUnsignedShort(QpidByteBuffer buffer, int s)\n    {\n        buffer.putUnsignedShort(s);\n    }\n\n    protected void writeUnsignedInteger(QpidByteBuffer buffer, long i)\n    {\n        buffer.putUnsignedInt(i);\n    }\n\n    protected void writeUnsignedByte(QpidByteBuffer buffer, short unsignedByte)\n    {\n        buffer.putUnsignedByte(unsignedByte);\n    }\n\n}<fim_middle>// class below has no smell\n"}