{"text": "<fim_prefix>// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage com.google.api.graphql.examples.helloworld.graphqlserver;\n\nimport com.google.api.graphql.execution.GuavaListenableFutureSupport;\nimport com.google.api.graphql.rejoiner.Schema;\nimport com.google.api.graphql.rejoiner.SchemaProviderModule;\nimport com.google.common.base.Strings;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.io.CharStreams;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.reflect.TypeToken;\nimport com.google.inject.Guice;\nimport com.google.inject.Key;\nimport graphql.ExecutionInput;\nimport graphql.ExecutionResult;\nimport graphql.GraphQL;\nimport graphql.execution.instrumentation.ChainedInstrumentation;\nimport graphql.execution.instrumentation.Instrumentation;\nimport graphql.execution.instrumentation.tracing.TracingInstrumentation;\nimport graphql.schema.GraphQLSchema;\nimport java.io.IOException;\nimport java.util.*;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.eclipse.jetty.server.Request;\nimport org.eclipse.jetty.server.handler.AbstractHandler;\n\npublic class GraphQlHandler extends AbstractHandler {\n  private static final Gson GSON = new GsonBuilder().serializeNulls().create();\n  private static final TypeToken<Map<String, Object>> MAP_TYPE_TOKEN =\n      new TypeToken<Map<String, Object>>() {};\n\n  private static final GraphQLSchema SCHEMA =\n      Guice.createInjector(\n              new SchemaProviderModule(),\n              new HelloWorldClientModule(),\n              new HelloWorldSchemaModule())\n          .getInstance(Key.get(GraphQLSchema.class, Schema.class));\n\n  private static final Instrumentation INSTRUMENTATION =\n      new ChainedInstrumentation(\n          Arrays.asList(\n              GuavaListenableFutureSupport.listenableFutureInstrumentation(),\n              new TracingInstrumentation()));\n\n  private static final GraphQL GRAPHQL =\n      GraphQL.newGraphQL(SCHEMA).instrumentation(INSTRUMENTATION).build();\n\n  @Override\n  public void handle(\n      String target,\n      Request request,\n      HttpServletRequest httpServletRequest,\n      HttpServletResponse httpServletResponse)\n      throws IOException, ServletException {\n    if (\"/graphql\".equals(target)) {\n      request.setHandled(true);\n      Map<String, Object> json = readJson(httpServletRequest);\n      String query = (String) json.get(\"query\");\n      if (query == null) {\n        httpServletResponse.setStatus(400);\n        return;\n      }\n      String operationName = (String) json.get(\"operationName\");\n      Map<String, Object> variables = getVariables(json.get(\"variables\"));\n\n      ExecutionInput executionInput =\n          ExecutionInput.newExecutionInput()\n              .query(query)\n              .operationName(operationName)\n              .variables(variables)\n              .context(new Object())\n              .build();\n      ExecutionResult executionResult = GRAPHQL.execute(executionInput);\n      httpServletResponse.setContentType(\"application/json\");\n      httpServletResponse.setStatus(HttpServletResponse.SC_OK);\n      GSON.toJson(executionResult.toSpecification(), httpServletResponse.getWriter());\n    }\n  }\n\n  private static Map<String, Object> getVariables(Object variables) {\n    Map<String, Object> variablesWithStringKey = new HashMap<>();\n    if (variables instanceof Map) {\n      ((Map) variables).forEach((k, v) -> variablesWithStringKey.put(String.valueOf(k), v));\n    }\n    return variablesWithStringKey;\n  }\n\n<fim_suffix>  private static Map<String, Object> readJson(HttpServletRequest request) {\n    try {\n      String json = CharStreams.toString(request.getReader());\n      return jsonToMap(json);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  private static Map<String, Object> jsonToMap(String json) {\n    if (Strings.isNullOrEmpty(json)) {\n      return ImmutableMap.of();\n    }\n    return Optional.<Map<String, Object>>ofNullable(GSON.fromJson(json, MAP_TYPE_TOKEN.getType()))\n        .orElse(ImmutableMap.of());\n  }\n}<fim_middle>// function below has no smell\n"}