{"text": "<fim_prefix>package org.eclipse.xtext.grammarinheritance.parser.antlr.internal;\n// Hack: Use our own Lexer superclass by means of import. \n// Currently there is no other way to specify the superclass for the lexer.\nimport org.eclipse.xtext.parser.antlr.Lexer;\nimport org.antlr.runtime.*;\nimport java.util.Stack;\nimport java.util.List;\nimport java.util.ArrayList;\n@SuppressWarnings(\"all\")\npublic class InternalInheritanceTest3LanguageLexer extends Lexer {\n    public static final int RULE_ID=7;\n    public static final int RULE_WS=11;\n    public static final int RULE_STRING=6;\n    public static final int RULE_ANY_OTHER=12;\n    public static final int RULE_SL_COMMENT=10;\n    public static final int T__15=15;\n    public static final int T__16=16;\n    public static final int SUPER_ID=4;\n    public static final int RULE_INT=8;\n    public static final int RULE_ML_COMMENT=9;\n    public static final int SUPER_1_ID=5;\n    public static final int T__13=13;\n    public static final int T__14=14;\n    public static final int EOF=-1;\n    // delegates\n    // delegators\n    public InternalInheritanceTest3LanguageLexer() {;} \n    public InternalInheritanceTest3LanguageLexer(CharStream input) {\n        this(input, new RecognizerSharedState());\n    }\n    public InternalInheritanceTest3LanguageLexer(CharStream input, RecognizerSharedState state) {\n        super(input,state);\n    }\n    public String getGrammarFileName() { return \"InternalInheritanceTest3Language.g\"; }\n    // $ANTLR start \"T__13\"\n    public final void mT__13() throws RecognitionException {\n        try {\n            int _type = T__13;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalInheritanceTest3Language.g:11:7: ( 'element' )\n            // InternalInheritanceTest3Language.g:11:9: 'element'\n            {\n            match(\"element\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"T__13\"\n    // $ANTLR start \"T__14\"\n    public final void mT__14() throws RecognitionException {\n        try {\n            int _type = T__14;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalInheritanceTest3Language.g:12:7: ( 'model' )\n            // InternalInheritanceTest3Language.g:12:9: 'model'\n            {\n            match(\"model\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"T__14\"\n    // $ANTLR start \"T__15\"\n<fim_suffix>    public final void mT__15() throws RecognitionException {\n        try {\n            int _type = T__15;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalInheritanceTest3Language.g:13:7: ( '{' )\n            // InternalInheritanceTest3Language.g:13:9: '{'\n            {\n            match('{'); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"T__15\"\n    // $ANTLR start \"T__16\"\n    public final void mT__16() throws RecognitionException {\n        try {\n            int _type = T__16;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalInheritanceTest3Language.g:14:7: ( '}' )\n            // InternalInheritanceTest3Language.g:14:9: '}'\n            {\n            match('}'); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"T__16\"\n    // $ANTLR start \"RULE_ID\"\n    public final void mRULE_ID() throws RecognitionException {\n        try {\n            int _type = RULE_ID;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalInheritanceTest3Language.g:320:9: ( 'id' )\n            // InternalInheritanceTest3Language.g:320:11: 'id'\n            {\n            match(\"id\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"RULE_ID\"\n    // $ANTLR start \"SUPER_ID\"\n    public final void mSUPER_ID() throws RecognitionException {\n        try {\n            int _type = SUPER_ID;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalInheritanceTest3Language.g:322:10: ( ( 'a' .. 'z' )+ )\n            // InternalInheritanceTest3Language.g:322:12: ( 'a' .. 'z' )+\n            {\n            // InternalInheritanceTest3Language.g:322:12: ( 'a' .. 'z' )+\n            int cnt1=0;\n            loop1:\n            do {\n                int alt1=2;\n                int LA1_0 = input.LA(1);\n                if ( ((LA1_0>='a' && LA1_0<='z')) ) {\n                    alt1=1;\n                }\n                switch (alt1) {\n            \tcase 1 :\n            \t    // InternalInheritanceTest3Language.g:322:13: 'a' .. 'z'\n            \t    {\n            \t    matchRange('a','z'); \n            \t    }\n            \t    break;\n            \tdefault :\n            \t    if ( cnt1 >= 1 ) break loop1;\n                        EarlyExitException eee =\n                            new EarlyExitException(1, input);\n                        throw eee;\n                }\n                cnt1++;\n            } while (true);\n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"SUPER_ID\"\n    // $ANTLR start \"SUPER_1_ID\"\n    public final void mSUPER_1_ID() throws RecognitionException {\n        try {\n            int _type = SUPER_1_ID;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalInheritanceTest3Language.g:324:12: ( ( '^' )? ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )\n            // InternalInheritanceTest3Language.g:324:14: ( '^' )? ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*\n            {\n            // InternalInheritanceTest3Language.g:324:14: ( '^' )?\n            int alt2=2;\n            int LA2_0 = input.LA(1);\n            if ( (LA2_0=='^') ) {\n                alt2=1;\n            }\n            switch (alt2) {\n                case 1 :\n                    // InternalInheritanceTest3Language.g:324:14: '^'\n                    {\n                    match('^'); \n                    }\n                    break;\n            }\n            if ( (input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {\n                input.consume();\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null,input);\n                recover(mse);\n                throw mse;}\n            // InternalInheritanceTest3Language.g:324:43: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*\n            loop3:\n            do {\n                int alt3=2;\n                int LA3_0 = input.LA(1);\n                if ( ((LA3_0>='0' && LA3_0<='9')||(LA3_0>='A' && LA3_0<='Z')||LA3_0=='_'||(LA3_0>='a' && LA3_0<='z')) ) {\n                    alt3=1;\n                }\n                switch (alt3) {\n            \tcase 1 :\n            \t    // InternalInheritanceTest3Language.g:\n            \t    {\n            \t    if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {\n            \t        input.consume();\n            \t    }<fim_middle>// function below has no smell\n"}