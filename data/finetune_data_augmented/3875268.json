{"text": "<fim_prefix>  public @org.apache.thrift.annotation.Nullable Compacting majors; // required\n  public @org.apache.thrift.annotation.Nullable Compacting scans; // required\n  public double scanRate; // required\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n    RECS((short)1, \"recs\"),\n    RECS_IN_MEMORY((short)2, \"recsInMemory\"),\n    TABLETS((short)3, \"tablets\"),\n    ONLINE_TABLETS((short)4, \"onlineTablets\"),\n    INGEST_RATE((short)5, \"ingestRate\"),\n    INGEST_BYTE_RATE((short)6, \"ingestByteRate\"),\n    QUERY_RATE((short)7, \"queryRate\"),\n    QUERY_BYTE_RATE((short)8, \"queryByteRate\"),\n    MINORS((short)9, \"minors\"),\n    MAJORS((short)10, \"majors\"),\n    SCANS((short)11, \"scans\"),\n    SCAN_RATE((short)12, \"scanRate\");\n    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n    static {\n      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    @org.apache.thrift.annotation.Nullable\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // RECS\n          return RECS;\n        case 2: // RECS_IN_MEMORY\n          return RECS_IN_MEMORY;\n        case 3: // TABLETS\n          return TABLETS;\n        case 4: // ONLINE_TABLETS\n          return ONLINE_TABLETS;\n        case 5: // INGEST_RATE\n          return INGEST_RATE;\n        case 6: // INGEST_BYTE_RATE\n          return INGEST_BYTE_RATE;\n        case 7: // QUERY_RATE\n          return QUERY_RATE;\n        case 8: // QUERY_BYTE_RATE\n          return QUERY_BYTE_RATE;\n        case 9: // MINORS\n          return MINORS;\n        case 10: // MAJORS\n          return MAJORS;\n        case 11: // SCANS\n          return SCANS;\n        case 12: // SCAN_RATE\n          return SCAN_RATE;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    @org.apache.thrift.annotation.Nullable\n    public static _Fields findByName(java.lang.String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final java.lang.String _fieldName;\n    _Fields(short thriftId, java.lang.String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public java.lang.String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  private static final int __RECS_ISSET_ID = 0;\n  private static final int __RECSINMEMORY_ISSET_ID = 1;\n  private static final int __TABLETS_ISSET_ID = 2;\n  private static final int __ONLINETABLETS_ISSET_ID = 3;\n  private static final int __INGESTRATE_ISSET_ID = 4;\n  private static final int __INGESTBYTERATE_ISSET_ID = 5;\n  private static final int __QUERYRATE_ISSET_ID = 6;\n  private static final int __QUERYBYTERATE_ISSET_ID = 7;\n  private static final int __SCANRATE_ISSET_ID = 8;\n  private short __isset_bitfield = 0;\n  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.RECS, new org.apache.thrift.meta_data.FieldMetaData(\"recs\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));\n    tmpMap.put(_Fields.RECS_IN_MEMORY, new org.apache.thrift.meta_data.FieldMetaData(\"recsInMemory\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));\n    tmpMap.put(_Fields.TABLETS, new org.apache.thrift.meta_data.FieldMetaData(\"tablets\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));\n    tmpMap.put(_Fields.ONLINE_TABLETS, new org.apache.thrift.meta_data.FieldMetaData(\"onlineTablets\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));\n    tmpMap.put(_Fields.INGEST_RATE, new org.apache.thrift.meta_data.FieldMetaData(\"ingestRate\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));\n    tmpMap.put(_Fields.INGEST_BYTE_RATE, new org.apache.thrift.meta_data.FieldMetaData(\"ingestByteRate\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));\n    tmpMap.put(_Fields.QUERY_RATE, new org.apache.thrift.meta_data.FieldMetaData(\"queryRate\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));\n    tmpMap.put(_Fields.QUERY_BYTE_RATE, new org.apache.thrift.meta_data.FieldMetaData(\"queryByteRate\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));\n    tmpMap.put(_Fields.MINORS, new org.apache.thrift.meta_data.FieldMetaData(\"minors\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Compacting.class)));\n    tmpMap.put(_Fields.MAJORS, new org.apache.thrift.meta_data.FieldMetaData(\"majors\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Compacting.class)));\n    tmpMap.put(_Fields.SCANS, new org.apache.thrift.meta_data.FieldMetaData(\"scans\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Compacting.class)));\n    tmpMap.put(_Fields.SCAN_RATE, new org.apache.thrift.meta_data.FieldMetaData(\"scanRate\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));\n    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TableInfo.class, metaDataMap);\n  }\n<fim_suffix>  public TableInfo() {\n  }<fim_middle>// function below has no smell\n"}