{"text": "<fim_prefix>/****************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one   *\n * or more contributor license agreements.  See the NOTICE file *\n * distributed with this work for additional information        *\n * regarding copyright ownership.  The ASF licenses this file   *\n * to you under the Apache License, Version 2.0 (the            *\n * \"License\"); you may not use this file except in compliance   *\n * with the License.  You may obtain a copy of the License at   *\n *                                                              *\n *   http://www.apache.org/licenses/LICENSE-2.0                 *\n *                                                              *\n * Unless required by applicable law or agreed to in writing,   *\n * software distributed under the License is distributed on an  *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n * KIND, either express or implied.  See the License for the    *\n * specific language governing permissions and limitations      *\n * under the License.                                           *\n ****************************************************************/\n\npackage org.apache.james.jmap.model;\n\nimport java.util.List;\n\nimport org.apache.james.jmap.JmapFieldNotSupportedException;\nimport org.apache.james.jmap.methods.JmapRequest;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\nimport com.google.common.collect.ImmutableList;\n\n<fim_suffix>@JsonDeserialize(builder = SetFilterRequest.Builder.class)\npublic class SetFilterRequest implements JmapRequest {\n\n    private static final String ISSUER = \"SetFilterRequest\";\n\n    @JsonPOJOBuilder(withPrefix = \"\")\n    public static class Builder {\n        private final ImmutableList.Builder<JmapRuleDTO> rules;\n\n        private Builder() {\n            this.rules = ImmutableList.builder();\n        }\n\n        public Builder accountId(String accountId) {\n            if (accountId != null) {\n                throw new JmapFieldNotSupportedException(ISSUER, \"accountId\");\n            }\n            return this;\n        }\n\n        public Builder ifInState(String ifInState) {\n            if (ifInState != null) {\n                throw new JmapFieldNotSupportedException(ISSUER, \"ifInState\");\n            }\n            return this;\n        }\n\n        public Builder singleton(List<JmapRuleDTO> rules) {\n            this.rules.addAll(rules);\n            return this;\n        }\n\n        public SetFilterRequest build() {\n            return new SetFilterRequest(rules.build());\n        }\n    }\n\n    public static Builder builder() {\n        return new Builder();\n    }\n\n    private final List<JmapRuleDTO> singleton;\n\n    private SetFilterRequest(List<JmapRuleDTO> singleton) {\n        this.singleton = singleton;\n    }\n\n    public List<JmapRuleDTO> getSingleton() {\n        return singleton;\n    }\n}<fim_middle>// class below has no smell\n"}