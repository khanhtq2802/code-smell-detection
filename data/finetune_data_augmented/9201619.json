{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2004, 2005 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *  Actuate Corporation  - initial API and implementation\n *******************************************************************************/\n\npackage org.eclipse.birt.report.designer.data.ui.dataset;\n\nimport org.eclipse.birt.report.designer.data.ui.util.IHelpConstants;\nimport org.eclipse.birt.report.designer.data.ui.util.Utility;\nimport org.eclipse.birt.report.designer.nls.Messages;\nimport org.eclipse.birt.report.model.core.Structure;\nimport org.eclipse.core.runtime.IStatus;\nimport org.eclipse.core.runtime.Status;\nimport org.eclipse.jface.dialogs.StatusDialog;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.graphics.Point;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Control;\nimport org.eclipse.swt.widgets.Event;\nimport org.eclipse.swt.widgets.Listener;\nimport org.eclipse.ui.PlatformUI;\n\n/**\n * \n */\n\n<fim_suffix>abstract class PropertyHandleInputDialog extends StatusDialog\n{\n\n\tprivate Object structureOrHandle = null;\n\n\tprivate static final String NEW_ACTION = Messages.getString( \"PropertyHandleInputDialog.Action.New\" );//$NON-NLS-1$\n\tprivate static final String EDIT_ACTION = Messages.getString( \"PropertyHandleInputDialog.Action.Edit\" );//$NON-NLS-1$\n\n\tprotected PropertyHandleInputDialog( Object structureOrHandle )\n\t{\n\t\tsuper( PlatformUI.getWorkbench( ).getDisplay( ).getActiveShell( ) );\n\t\tsetHelpAvailable( false );\n\t\t\n\t\tthis.structureOrHandle = structureOrHandle;\n\t}\n\n\tprotected boolean isResizable( )\n\t{\n\t\treturn true;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.jface.window.Window#create()\n\t */\n\tpublic void create( )\n\t{\n\t\tsuper.create( );\n\n\t\tPoint pt = getShell( ).computeSize( -1, -1 );\n\t\tpt.x = Math.max( pt.x, 520 );\n\t\tpt.y = Math.max( pt.y, 250 );\n\t\tgetShell( ).setSize( pt );\n\t\tgetShell( ).setText( getTitle( ) );\n\t}\n\n\tprotected String getTitle( )\n\t{\n\t\treturn structureOrHandle instanceof Structure ? NEW_ACTION\n\t\t\t\t: EDIT_ACTION;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.jface.dialogs.Dialog#createDialogArea(org.eclipse.swt.widgets.Composite)\n\t */\n\tprotected Control createDialogArea( Composite parent )\n\t{\n\t\tComposite composite = (Composite) super.createDialogArea( parent );\n\t\tGridLayout layout = new GridLayout( 3, false );\n\t\tlayout.marginHeight = 10;\n\t\tlayout.marginWidth = 10;\n\t\tcomposite.setLayout( layout );\n\n\t\tcreateCustomControls( composite );\n\t\tvalidateSyntax( );\n\n\t\taddListeners(  );\n\t\t\n\t\tsetSystemHelp( composite );\n\n\t\treturn composite;\n\t}\n\n\tprotected void setSystemHelp( Composite composite )\n\t{\n\t\tUtility.setSystemHelp( composite,\n\t\t\t\tIHelpConstants.CONEXT_ID_PROPERTYHANDLE_DIALOG );\n\t}\n\n\t/**\n\t * Create customized controls\n\t * \n\t * @param parent\n\t */\n\tprotected abstract void createCustomControls( Composite parent );\n\n\tprotected void validateSyntax( )\n\t{\n\t\tIStatus status = validateSyntax( structureOrHandle );\n\n\t\tif ( status != null )\n\t\t\tupdateStatus( status );\n\t}\n\n\t/**\n\t * Syntax check which determines whether to enable the Ok button\n\t * \n\t * @param structureOrHandle\n\t * @return\n\t */\n\tprotected abstract IStatus validateSyntax( Object structureOrHandle );\n\t\n\tprivate void addListeners( )\n\t{\n\t\tgetShell( ).addListener( SWT.Close, new Listener( ) {\n\n\t\t\tpublic void handleEvent( Event event )\n\t\t\t{\n\t\t\t\trollback( );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.jface.dialogs.Dialog#okPressed()\n\t */\n\tprotected void okPressed( )\n\t{\n\t\tif ( validateSemantics( ) )\n\t\t\tsuper.okPressed( );\n\t}\n\n\tprotected boolean validateSemantics( )\n\t{\n\t\tIStatus status = validateSemantics( structureOrHandle );\n\n\t\tif ( status == null )\n\t\t\treturn true;\n\n\t\tupdateStatus( status );\n\n\t\treturn status.getSeverity( ) == IStatus.OK;\n\t}\n\n\t/**\n\t * Semantics check which determines whether to close the window\n\t * \n\t * @param structureOrHandle\n\t * @return\n\t */\n\tprotected abstract IStatus validateSemantics( Object structureOrHandle );\n\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.jface.dialogs.Dialog#cancelPressed()\n\t */\n\tprotected void cancelPressed( )\n\t{\n\t\trollback( );\n\n\t\tsuper.cancelPressed( );\n\t}\n\n\t/**\n\t * Roll back to the original status when necessary.\n\t * \n\t */\n\tprotected abstract void rollback( );\n\n\tprotected Object getStructureOrHandle( )\n\t{\n\t\treturn structureOrHandle;\n\t}\n\t\n\t/**\n\t * \n\t * @param value\n\t * @return\n\t */\n\tprotected boolean isBlankProperty( String value )\n\t{\n\t\treturn Utility.getNonNullString( value ).trim( ).length( ) == 0;\n\t}\n\n\t/**\n\t * \n\t * @param cellLabel\n\t * @return\n\t */\n\tprotected Status getBlankPropertyStatus( String cellLabel )\n\t{\n\t\treturn getMiscStatus( IStatus.ERROR,\n\t\t\t\tMessages.getFormattedString( \"PropertyHandleInputDialog.messages.error.blankProperty\",//$NON-NLS-1$\n\t\t\t\t\t\tnew String[]{\n\t\t\t\t\t\t\tcellLabel\n\t\t\t\t\t\t} ) );\n\t}\n\n\t/**\n\t * \n\t * @return\n\t */\n\tprotected Status getOKStatus( )\n\t{\n\t\treturn getMiscStatus( IStatus.OK, \"\" ); //$NON-NLS-1$\n\t}\n\n\t/**\n\t * \n\t * @param severity\n\t * @param message\n\t * @return\n\t */\n\tprotected Status getMiscStatus( int severity, String message )\n\t{\n\t\treturn new Status( severity,\n\t\t\t\tPlatformUI.PLUGIN_ID,\n\t\t\t\tIStatus.OK,\n\t\t\t\tmessage,\n\t\t\t\tnull );\n\t}\n\t\n\t/**\n\t * \n\t * @param obj\n\t * @param propertyName\n\t * @param value\n\t * @return\n\t */\n\tprotected Status setProperty( Object obj, String propertyName, Object value )\n\t{\n\t\ttry\n\t\t{\n\t\t\tUtility.setProperty( obj, propertyName, value );\n\t\t}\n\t\tcatch ( Exception e )\n\t\t{\n\t\t\treturn getMiscStatus( IStatus.ERROR,\n\t\t\t\t\tUtility.getNonNullString( e.getMessage( ) ) );\n\t\t}\n\n\t\treturn getOKStatus( );\n\t}\n\n\t/**\n\t * \n\t * @param obj\n\t * @param propertyName\n\t * @return\n\t */\n\tprotected Object getProperty( Object obj, String propertyName )\n\t{\n\t\ttry\n\t\t{\n\t\t\treturn Utility.getProperty( obj, propertyName );\n\t\t}\n\t\tcatch ( Exception e )\n\t\t{\n\t\t\tupdateStatus( getMiscStatus( IStatus.ERROR,\n\t\t\t\t\tUtility.getNonNullString( e.getMessage( ) ) ) );\n\t\t}\n\n\t\treturn null;\n\t}\n\t\n}<fim_middle>// class below has no smell\n"}