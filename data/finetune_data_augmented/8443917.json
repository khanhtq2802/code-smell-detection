{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.atmos.dto;\n\nimport java.io.ByteArrayOutputStream;\nimport java.util.Map;\n\nimport org.apache.camel.Exchange;\nimport org.apache.camel.component.atmos.util.AtmosResultHeader;\n\n<fim_suffix>public class AtmosFileDownloadResult extends AtmosResult {\n\n    /**\n     * Object payload contained in Exchange\n     * In case of a single file Exchange Header is populated with the name of the remote path downloaded\n     * In case of a multiple files Exchange Header is populated with the name of the remote paths downloaded\n     * In case of a single file Exchange Body is populated with the ByteArrayOutputStream downloaded from atmos.\n     * In case of multiple files Exchange Body is populated with a map containing as key the remote path\n     * and as value the linked ByteArrayOutputStream\n     * @param exchange\n     */\n    @Override\n    public void populateExchange(Exchange exchange) {\n        //in case we have only one baos put it directly in body\n        Map<String, ByteArrayOutputStream> map = (Map<String, ByteArrayOutputStream>)resultEntries;\n        if (map.size() == 1) {\n            //set info in exchange\n            String pathExtracted = null;\n            ByteArrayOutputStream baosExtracted = null;\n            for (Map.Entry<String, ByteArrayOutputStream> entry : map.entrySet()) {\n                pathExtracted = entry.getKey();\n                baosExtracted = entry.getValue();\n            }\n            exchange.getIn().setHeader(AtmosResultHeader.DOWNLOADED_FILE.name(), pathExtracted);\n            exchange.getIn().setBody(baosExtracted);\n        } else {\n            StringBuffer pathsExtracted = new StringBuffer();\n            for (Map.Entry<String, ByteArrayOutputStream> entry : map.entrySet()) {\n                pathsExtracted.append(entry.getKey() + \"\\n\");\n            }\n            exchange.getIn().setHeader(AtmosResultHeader.DOWNLOADED_FILES.name(), pathsExtracted.toString());\n            exchange.getIn().setBody(map);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}