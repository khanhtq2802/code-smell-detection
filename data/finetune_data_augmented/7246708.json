{"text": "<fim_prefix>/*\n * Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n * \n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n * \n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n * \n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n * \n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage org.graalvm.visualvm.heapdump.impl;\n\nimport org.graalvm.visualvm.application.Application;\nimport org.graalvm.visualvm.application.jvm.Jvm;\nimport org.graalvm.visualvm.application.jvm.JvmFactory;\nimport org.graalvm.visualvm.core.datasupport.Stateful;\nimport org.graalvm.visualvm.core.ui.actions.ActionUtils;\nimport org.graalvm.visualvm.core.ui.actions.SingleDataSourceAction;\nimport java.awt.event.ActionEvent;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.util.Set;\nimport org.openide.util.NbBundle;\n\n/**\n *\n * @author Jiri Sedlacek\n * @author Tomas Hurka\n * @author Luis-Miguel Alventosa\n */\nclass HeapDumpOnOOMEAction extends SingleDataSourceAction<Application> {\n    \n    private boolean oomeEnabled;\n    private Application lastSelectedApplication;\n    private final PropertyChangeListener stateListener = new PropertyChangeListener() {\n        public void propertyChange(PropertyChangeEvent evt) {\n            updateState(ActionUtils.getSelectedDataSources(Application.class));\n        }\n    };\n    \n    private static HeapDumpOnOOMEAction instance;\n    \n<fim_suffix>    public static synchronized HeapDumpOnOOMEAction instance() {\n        if (instance == null) \n            instance = new HeapDumpOnOOMEAction();\n        return instance;\n    }\n    \n\n    protected void actionPerformed(Application application, ActionEvent actionEvent) {\n        Jvm jvm = JvmFactory.getJVMFor(application);\n        jvm.setDumpOnOOMEnabled(!oomeEnabled);\n        updateState(jvm);\n    }\n\n    protected boolean isEnabled(Application application) {\n        lastSelectedApplication = application;\n        lastSelectedApplication.addPropertyChangeListener(Stateful.PROPERTY_STATE, stateListener);\n        if (application.getState() != Stateful.STATE_AVAILABLE) return false;\n        Jvm jvm = JvmFactory.getJVMFor(application);\n        if (!jvm.isDumpOnOOMEnabledSupported()) return false;\n        updateState(jvm);\n        return true;\n    }\n    \n    \n    private void updateState(Jvm jvm) {\n        oomeEnabled = jvm.isDumpOnOOMEnabled();\n        if (oomeEnabled) {\n            putValue(NAME, NbBundle.getMessage(HeapDumpOnOOMEAction.class, \"LBL_Disable_Heap_Dump_on_OOME\"));  // NOI18N\n            putValue(SHORT_DESCRIPTION, NbBundle.getMessage(HeapDumpOnOOMEAction.class, \"DESCR_Disable_Heap_Dump_on_OOME\"));  // NOI18N\n        } else {\n            putValue(NAME, NbBundle.getMessage(HeapDumpOnOOMEAction.class, \"LBL_Enable_Heap_Dump_on_OOME\"));  // NOI18N\n            putValue(SHORT_DESCRIPTION, NbBundle.getMessage(HeapDumpOnOOMEAction.class, \"DESCR_Enable_Heap_Dump_on_OOME\"));  // NOI18N\n        }\n    }\n    \n    protected void updateState(Set<Application> applications) {\n        if (lastSelectedApplication != null) {\n            lastSelectedApplication.removePropertyChangeListener(Stateful.PROPERTY_STATE, stateListener);\n            lastSelectedApplication = null;\n        }\n        super.updateState(applications);\n    }\n    \n    \n    private HeapDumpOnOOMEAction() {\n        super(Application.class);\n    }\n\n}<fim_middle>// function below has no smell\n"}