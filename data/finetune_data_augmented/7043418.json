{"text": "<fim_prefix>/*\n * Copyright 2011-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at:\n *\n *    http://aws.amazon.com/apache2.0\n *\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.ibm.cloud.objectstorage.internal;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URI;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.ibm.cloud.objectstorage.AmazonServiceException;\nimport com.ibm.cloud.objectstorage.SdkClientException;\nimport com.ibm.cloud.objectstorage.annotation.SdkInternalApi;\nimport com.ibm.cloud.objectstorage.retry.internal.CredentialsEndpointRetryParameters;\nimport com.ibm.cloud.objectstorage.retry.internal.CredentialsEndpointRetryPolicy;\nimport com.ibm.cloud.objectstorage.util.IOUtils;\nimport com.ibm.cloud.objectstorage.util.json.Jackson;\n\n@SdkInternalApi\npublic final class EC2CredentialsUtils {\n\n    private static final Log LOG = LogFactory.getLog(EC2CredentialsUtils.class);\n\n    private static EC2CredentialsUtils instance;\n\n    private final ConnectionUtils connectionUtils;\n\n    private EC2CredentialsUtils() {\n        this(ConnectionUtils.getInstance());\n    }\n\n<fim_suffix>    EC2CredentialsUtils(ConnectionUtils connectionUtils) {\n        this.connectionUtils = connectionUtils;\n    }\n\n    public static EC2CredentialsUtils getInstance() {\n        if (instance == null) {\n            instance = new EC2CredentialsUtils();\n        }\n        return instance;\n    }\n\n    /**\n     * Connects to the given endpoint to read the resource\n     * and returns the text contents.\n     *\n     * If the connection fails, the request will not be retried.\n     *\n     * @param endpoint\n     *            The service endpoint to connect to.\n     *\n     * @return The text payload returned from the Amazon EC2 endpoint\n     *         service for the specified resource path.\n     *\n     * @throws IOException\n     *             If any problems were encountered while connecting to the\n     *             service for the requested resource path.\n     * @throws SdkClientException\n     *             If the requested service is not found.\n     */\n    public String readResource(URI endpoint) throws IOException {\n        return readResource(endpoint, CredentialsEndpointRetryPolicy.NO_RETRY);\n    }\n\n    /**\n     * Connects to the given endpoint to read the resource\n     * and returns the text contents.\n     *\n     * @param endpoint\n     *            The service endpoint to connect to.\n     *\n     * @param retryPolicy\n     *            The custom retry policy that determines whether a\n     *            failed request should be retried or not.\n     *\n     * @return The text payload returned from the Amazon EC2 endpoint\n     *         service for the specified resource path.\n     *\n     * @throws IOException\n     *             If any problems were encountered while connecting to the\n     *             service for the requested resource path.\n     * @throws SdkClientException\n     *             If the requested service is not found.\n     */\n    public String readResource(URI endpoint, CredentialsEndpointRetryPolicy retryPolicy) throws IOException {\n        int retriesAttempted = 0;\n        InputStream inputStream = null;\n\n        while (true) {\n            try {\n                HttpURLConnection connection = connectionUtils.connectToEndpoint(endpoint);\n\n                int statusCode = connection.getResponseCode();\n\n                if (statusCode == HttpURLConnection.HTTP_OK) {\n                    inputStream = connection.getInputStream();\n                    return IOUtils.toString(inputStream);\n                } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n                    // This is to preserve existing behavior of EC2 Instance metadata service.\n                    throw new SdkClientException(\"The requested metadata is not found at \" + connection.getURL());\n                } else {\n                    if (!retryPolicy.shouldRetry(retriesAttempted++, CredentialsEndpointRetryParameters.builder().withStatusCode(statusCode).build())) {\n                        inputStream = connection.getErrorStream();\n                        handleErrorResponse(inputStream, statusCode, connection.getResponseMessage());\n                    }\n                }\n            } catch (IOException ioException) {\n                if (!retryPolicy.shouldRetry(retriesAttempted++, CredentialsEndpointRetryParameters.builder().withException(ioException).build())) {\n                    throw ioException;\n                }\n                LOG.debug(\"An IOException occured when connecting to service endpoint: \" + endpoint  + \"\\n Retrying to connect again.\");\n            } finally {\n                IOUtils.closeQuietly(inputStream, LOG);\n            }\n        }\n\n    }\n\n    private void handleErrorResponse(InputStream errorStream, int statusCode, String responseMessage) throws IOException {\n        String errorCode = null;\n\n        // Parse the error stream returned from the service.\n        if(errorStream != null) {\n            String errorResponse = IOUtils.toString(errorStream);\n\n            try {\n                JsonNode node = Jackson.jsonNodeOf(errorResponse);\n                JsonNode code = node.get(\"code\");\n                JsonNode message = node.get(\"message\");\n                if (code != null && message != null) {\n                    errorCode = code.asText();\n                    responseMessage = message.asText();\n                }\n            } catch (Exception exception) {\n                LOG.debug(\"Unable to parse error stream\");\n            }\n        }\n\n        AmazonServiceException ase = new AmazonServiceException(responseMessage);\n        ase.setStatusCode(statusCode);\n        ase.setErrorCode(errorCode);\n        throw ase;\n    }\n}<fim_middle>// function below has no smell\n"}