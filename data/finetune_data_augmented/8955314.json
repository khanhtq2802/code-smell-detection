{"text": "<fim_prefix>        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData(\"req\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddCheckConstraintRequest.class)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_check_constraint_args.class, metaDataMap);\n    }\n    public add_check_constraint_args() {\n    }\n    public add_check_constraint_args(\n      AddCheckConstraintRequest req)\n    {\n      this();\n      this.req = req;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public add_check_constraint_args(add_check_constraint_args other) {\n      if (other.isSetReq()) {\n        this.req = new AddCheckConstraintRequest(other.req);\n      }\n    }\n    public add_check_constraint_args deepCopy() {\n      return new add_check_constraint_args(this);\n    }\n    @Override\n    public void clear() {\n      this.req = null;\n    }\n    public AddCheckConstraintRequest getReq() {\n      return this.req;\n    }\n    public void setReq(AddCheckConstraintRequest req) {\n      this.req = req;\n    }\n    public void unsetReq() {\n      this.req = null;\n    }\n    /** Returns true if field req is set (has been assigned a value) and false otherwise */\n    public boolean isSetReq() {\n      return this.req != null;\n    }\n    public void setReqIsSet(boolean value) {\n      if (!value) {\n        this.req = null;\n      }\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      case REQ:\n        if (value == null) {\n          unsetReq();\n        } else {\n          setReq((AddCheckConstraintRequest)value);\n        }\n        break;\n      }\n    }\n    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case REQ:\n        return getReq();\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      case REQ:\n        return isSetReq();\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof add_check_constraint_args)\n        return this.equals((add_check_constraint_args)that);\n      return false;\n    }\n    public boolean equals(add_check_constraint_args that) {\n      if (that == null)\n        return false;\n      boolean this_present_req = true && this.isSetReq();\n      boolean that_present_req = true && that.isSetReq();\n      if (this_present_req || that_present_req) {\n        if (!(this_present_req && that_present_req))\n          return false;\n        if (!this.req.equals(that.req))\n          return false;\n      }\n      return true;\n    }\n    @Override\n    public int hashCode() {\n      List<Object> list = new ArrayList<Object>();\n      boolean present_req = true && (isSetReq());\n      list.add(present_req);\n      if (present_req)\n        list.add(req);\n      return list.hashCode();\n    }\n    @Override\n    public int compareTo(add_check_constraint_args other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetReq()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n    }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"add_check_constraint_args(\");\n      boolean first = true;\n      sb.append(\"req:\");\n      if (this.req == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.req);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n      if (req != null) {\n        req.validate();\n      }\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class add_check_constraint_argsStandardSchemeFactory implements SchemeFactory {\n      public add_check_constraint_argsStandardScheme getScheme() {\n        return new add_check_constraint_argsStandardScheme();\n      }\n    }\n<fim_suffix>    private static class add_check_constraint_argsStandardScheme extends StandardScheme<add_check_constraint_args> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, add_check_constraint_args struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 1: // REQ\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.req = new AddCheckConstraintRequest();\n                struct.req.read(iprot);\n                struct.setReqIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, add_check_constraint_args struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.req != null) {\n          oprot.writeFieldBegin(REQ_FIELD_DESC);\n          struct.req.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }<fim_middle>// class below has no smell\n"}