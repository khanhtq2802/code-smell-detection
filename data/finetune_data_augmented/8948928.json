{"text": "<fim_prefix>/**\n * Autogenerated by Thrift Compiler (0.9.3)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage org.apache.hadoop.hive.metastore.api;\nimport org.apache.thrift.scheme.IScheme;\nimport org.apache.thrift.scheme.SchemeFactory;\nimport org.apache.thrift.scheme.StandardScheme;\nimport org.apache.thrift.scheme.TupleScheme;\nimport org.apache.thrift.protocol.TTupleProtocol;\nimport org.apache.thrift.protocol.TProtocolException;\nimport org.apache.thrift.EncodingUtils;\nimport org.apache.thrift.TException;\nimport org.apache.thrift.async.AsyncMethodCallback;\nimport org.apache.thrift.server.AbstractNonblockingServer.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.EnumMap;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.EnumSet;\nimport java.util.Collections;\nimport java.util.BitSet;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\nimport javax.annotation.Generated;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})\n@Generated(value = \"Autogenerated by Thrift Compiler (0.9.3)\")\n@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class WriteNotificationLogRequest implements org.apache.thrift.TBase<WriteNotificationLogRequest, WriteNotificationLogRequest._Fields>, java.io.Serializable, Cloneable, Comparable<WriteNotificationLogRequest> {\n  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"WriteNotificationLogRequest\");\n  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(\"txnId\", org.apache.thrift.protocol.TType.I64, (short)1);\n  private static final org.apache.thrift.protocol.TField WRITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(\"writeId\", org.apache.thrift.protocol.TType.I64, (short)2);\n  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField(\"db\", org.apache.thrift.protocol.TType.STRING, (short)3);\n  private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"table\", org.apache.thrift.protocol.TType.STRING, (short)4);\n  private static final org.apache.thrift.protocol.TField FILE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField(\"fileInfo\", org.apache.thrift.protocol.TType.STRUCT, (short)5);\n  private static final org.apache.thrift.protocol.TField PARTITION_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"partitionVals\", org.apache.thrift.protocol.TType.LIST, (short)6);\n  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n  static {\n    schemes.put(StandardScheme.class, new WriteNotificationLogRequestStandardSchemeFactory());\n    schemes.put(TupleScheme.class, new WriteNotificationLogRequestTupleSchemeFactory());\n  }\n  private long txnId; // required\n  private long writeId; // required\n  private String db; // required\n  private String table; // required\n  private InsertEventRequestData fileInfo; // required\n  private List<String> partitionVals; // optional\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n    TXN_ID((short)1, \"txnId\"),\n    WRITE_ID((short)2, \"writeId\"),\n    DB((short)3, \"db\"),\n    TABLE((short)4, \"table\"),\n    FILE_INFO((short)5, \"fileInfo\"),\n    PARTITION_VALS((short)6, \"partitionVals\");\n    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n    static {\n      for (_Fields field : EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n<fim_suffix>    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // TXN_ID\n          return TXN_ID;\n        case 2: // WRITE_ID\n          return WRITE_ID;\n        case 3: // DB\n          return DB;\n        case 4: // TABLE\n          return TABLE;\n        case 5: // FILE_INFO\n          return FILE_INFO;\n        case 6: // PARTITION_VALS\n          return PARTITION_VALS;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final String _fieldName;\n    _Fields(short thriftId, String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  private static final int __TXNID_ISSET_ID = 0;\n  private static final int __WRITEID_ISSET_ID = 1;\n  private byte __isset_bitfield = 0;\n  private static final _Fields optionals[] = {_Fields.PARTITION_VALS};\n  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData(\"txnId\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));\n    tmpMap.put(_Fields.WRITE_ID, new org.apache.thrift.meta_data.FieldMetaData(\"writeId\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));\n    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData(\"db\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData(\"table\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.FILE_INFO, new org.apache.thrift.meta_data.FieldMetaData(\"fileInfo\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InsertEventRequestData.class)));\n    tmpMap.put(_Fields.PARTITION_VALS, new org.apache.thrift.meta_data.FieldMetaData(\"partitionVals\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, \n            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));\n    metaDataMap = Collections.unmodifiableMap(tmpMap);<fim_middle>// function below has no smell\n"}