{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cocoon.components.flow;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.collections.iterators.IteratorEnumeration;\nimport org.apache.commons.lang.StringUtils;\n/**\n * Representation of continuations in a Web environment.\n *\n * <p>Because a user may click on the back button of the browser and\n * restart a saved computation in a continuation, each\n * <code>WebContinuation</code> becomes the parent of a subtree of\n * continuations.\n *\n * <p>If there is no parent <code>WebContinuation</code>, the created\n * continuation becomes the root of a tree of\n * <code>WebContinuation</code>s.\n *\n * @since March 19, 2002\n * @version $Id$\n */\npublic class WebContinuation implements Comparable, Cloneable {\n    /**\n     * The continuation this object represents.\n     */\n    protected Object continuation;\n    /**\n     * The parent <code>WebContinuation</code> from which processing\n     * last started. If null, there is no parent continuation\n     * associated, and this is the first one to be created in a\n     * processing. In this case this <code>WebContinuation</code>\n     * instance becomes the root of the tree maintained by the\n     * <code>ContinuationsManager</code>.\n     *\n     * @see ContinuationsManager\n     */\n    protected WebContinuation parentContinuation;\n    /**\n     * The children continuations. These are continuations created by\n     * resuming the processing from the point stored by\n     * <code>continuation</code>.\n     */\n    protected List children = new ArrayList();\n    /**\n     * The continuation id used to represent this instance in Web pages.\n     */\n    protected String id;\n    /**\n     * Interpreter id that this continuation is bound to\n     */\n    protected String interpreterId;\n    /**\n     * A user definable object. This is present for convenience, to\n     * store any information associated with this\n     * <code>WebContinuation</code> a particular implementation might\n     * need.\n     */\n    protected Object userObject;\n    /**\n     * When was this continuation accessed last time. Each time the\n     * continuation is accessed, this time is set to the time of the\n     * access.\n     */\n    protected long lastAccessTime;\n    /**\n     * Indicates how long does this continuation will live (in\n     * seconds). The continuation will be removed once the current time\n     * is bigger than <code>lastAccessTime + timeToLive</code>.\n     */\n    protected int timeToLive;\n    /**\n     * Holds the <code>ContinuationsDisposer</code> to call when this continuation\n     * gets invalidated.\n     */\n    protected ContinuationsDisposer disposer;\n    /**\n     * The attributes of this continuation\n     */\n    private Map attributes;\n    /**\n     * Create a <code>WebContinuation</code> object. Saves the object in\n     * the hash table of continuations maintained by\n     * <code>manager</code> (this is done as a side effect of obtaining\n     * and identifier from it).\n     *\n     * @param continuation an <code>Object</code> value\n     * @param parentContinuation a <code>WebContinuation</code> value\n     * @param timeToLive time this continuation should live\n     * @param disposer a <code>ContinuationsDisposer</code> to call when this\n     * continuation gets invalidated.\n     */\n    WebContinuation(String id,\n                    Object continuation,\n                    WebContinuation parentContinuation,\n                    int timeToLive,\n                    String interpreterId,\n                    ContinuationsDisposer disposer) {\n        this.id = id;\n        this.continuation = continuation;\n        this.parentContinuation = parentContinuation;\n        this.updateLastAccessTime();\n        this.timeToLive = timeToLive;\n        this.interpreterId = interpreterId;\n        this.disposer = disposer;\n        if (parentContinuation != null) {\n            this.parentContinuation.children.add(this);\n        }\n    }\n    /**\n     * Get an attribute of this continuation\n     * \n     * @param name the attribute name.\n     */\n    public Object getAttribute(String name) {\n        if (this.attributes == null) {\n            return null;\n        }\n        return this.attributes.get(name);\n    }\n    /**\n     * Set an attribute of this continuation\n     * \n     * @param name the attribute name\n     * @param value its value\n     */\n    public void setAttribute(String name, Object value) {\n        if (this.attributes == null) {\n            this.attributes = Collections.synchronizedMap(new HashMap());\n        }\n        this.attributes.put(name, value);\n    }\n    /**\n     * Remove an attribute of this continuation\n     * \n     * @param name the attribute name\n     */\n    public void removeAttribute(String name) {\n        if (this.attributes == null)\n            return;\n        this.attributes.remove(name);\n    }\n    /**\n     * Enumerate the attributes of this continuation.\n     * \n     * @return an enumeration of strings\n     */\n    public Enumeration getAttributeNames() {\n        if (this.attributes == null)\n            return new IteratorEnumeration();\n        ArrayList keys = new ArrayList(this.attributes.keySet());\n        return new IteratorEnumeration(keys.iterator());\n    }\n    /**\n     * Return the continuation object.\n     *\n     * @return an <code>Object</code> value\n     */\n    public Object getContinuation() {\n        return continuation;\n    }\n    /**\n     * Return the ancestor continuation situated <code>level</code>s\n     * above the current continuation. The current instance is\n     * considered to be at level 0. The parent continuation of the\n     * receiving instance at level 1, its parent is at level 2 relative\n     * to the receiving instance. If <code>level</code> is bigger than\n     * the depth of the tree, the root of the tree is returned.\n     *\n     * @param level an <code>int</code> value\n     * @return a <code>WebContinuation</code> value\n     */\n<fim_suffix>    public WebContinuation getContinuation(int level) {\n        if (level <= 0) {\n            return this;\n        } else if (parentContinuation == null) {\n            return this;\n        } else {\n            return parentContinuation.getContinuation(level - 1);\n        }\n    }\n    /**\n     * Return the parent <code>WebContinuation</code>. Equivalent with\n     * <code>getContinuation(1)</code>.\n     *\n     * @return a <code>WebContinuation</code> value\n     */\n    public WebContinuation getParentContinuation() {\n        return parentContinuation;\n    }\n    /**\n     * Return the children <code>WebContinuation</code> which were\n     * created as a result of resuming the processing from the current\n     * <code>continuation</code>.\n     *\n     * @return a <code>List</code> value\n     */\n    public List getChildren() {\n        return children;\n    }\n    /**\n     * Returns the string identifier of this\n     * <code>WebContinuation</code>.\n     *\n     * @return a <code>String</code> value\n     */\n    public String getId() {\n        return id;\n    }\n    /**\n     * Returns the string identifier of the interpreter to which\n     * this <code>WebContinuation</code> is bound.\n     *\n     * @return a <code>String</code> value\n     */\n    public String getInterpreterId() {\n        return interpreterId;\n    }\n    /**\n     * Returns the last time this\n     * <code>WebContinuation</code> was accessed.\n     *\n     * @return a <code>long</code> value\n     */\n    public long getLastAccessTime() {\n        return lastAccessTime;\n    }\n    /**\n     * Returns the the timetolive for this\n     * <code>WebContinuation</code>.\n     *\n     * @return a <code>long</code> value\n     */\n    public long getTimeToLive() {\n        return this.timeToLive;\n    }\n    /**\n     * Sets the user object associated with this instance.\n     *\n     * @param obj an <code>Object</code> value\n     */\n    public void setUserObject(Object obj) {\n        this.userObject = obj;\n    }\n    /**\n     * Obtains the user object associated with this instance.\n     *\n     * @return an <code>Object</code> value\n     */\n    public Object getUserObject() {\n        return userObject;\n    }\n    /**<fim_middle>// function below has no smell\n"}