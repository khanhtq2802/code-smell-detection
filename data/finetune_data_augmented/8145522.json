{"text": "<fim_prefix>/**\n * Copyright (c) 2015, 2017 itemis AG (http://www.itemis.eu) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n */\npackage org.eclipse.xtext.xtext.wizard;\nimport com.google.common.base.Objects;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Iterables;\nimport java.nio.charset.Charset;\nimport java.util.Collections;\nimport java.util.Set;\nimport org.eclipse.xtend.lib.annotations.Accessors;\nimport org.eclipse.xtext.util.JUnitVersion;\nimport org.eclipse.xtext.util.JavaVersion;\nimport org.eclipse.xtext.util.Strings;\nimport org.eclipse.xtext.util.XtextVersion;\nimport org.eclipse.xtext.xbase.lib.CollectionLiterals;\nimport org.eclipse.xtext.xbase.lib.Functions.Function1;\nimport org.eclipse.xtext.xbase.lib.IterableExtensions;\nimport org.eclipse.xtext.xbase.lib.Pure;\nimport org.eclipse.xtext.xtext.wizard.BuildSystem;\nimport org.eclipse.xtext.xtext.wizard.Ecore2XtextConfiguration;\nimport org.eclipse.xtext.xtext.wizard.IdeProjectDescriptor;\nimport org.eclipse.xtext.xtext.wizard.LanguageDescriptor;\nimport org.eclipse.xtext.xtext.wizard.LanguageServer;\nimport org.eclipse.xtext.xtext.wizard.P2RepositoryProject;\nimport org.eclipse.xtext.xtext.wizard.ParentProjectDescriptor;\nimport org.eclipse.xtext.xtext.wizard.ProjectDescriptor;\nimport org.eclipse.xtext.xtext.wizard.ProjectLayout;\nimport org.eclipse.xtext.xtext.wizard.RuntimeProjectDescriptor;\nimport org.eclipse.xtext.xtext.wizard.SdkFeatureProject;\nimport org.eclipse.xtext.xtext.wizard.SourceLayout;\nimport org.eclipse.xtext.xtext.wizard.TargetPlatformProject;\nimport org.eclipse.xtext.xtext.wizard.TestProjectDescriptor;\nimport org.eclipse.xtext.xtext.wizard.TestedProjectDescriptor;\nimport org.eclipse.xtext.xtext.wizard.UiProjectDescriptor;\nimport org.eclipse.xtext.xtext.wizard.WebProjectDescriptor;\n@Accessors\n@SuppressWarnings(\"all\")\npublic class WizardConfiguration {\n  private String rootLocation;\n  private String baseName;\n  private XtextVersion xtextVersion = XtextVersion.getCurrent();\n  private final Ecore2XtextConfiguration ecore2Xtext = new Ecore2XtextConfiguration();\n  private Charset encoding = Charset.defaultCharset();\n  private String lineDelimiter = Strings.newLine();\n  private BuildSystem preferredBuildSystem = BuildSystem.NONE;\n  private SourceLayout sourceLayout = SourceLayout.PLAIN;\n  private ProjectLayout projectLayout = ProjectLayout.FLAT;\n  private boolean needsGradleWrapper = true;\n  private JavaVersion javaVersion = JavaVersion.JAVA8;\n  private LanguageServer languageServer = LanguageServer.NONE;\n  private JUnitVersion junitVersion = JUnitVersion.DEFAULT;\n  private final LanguageDescriptor language = new LanguageDescriptor();\n  private final RuntimeProjectDescriptor runtimeProject = new RuntimeProjectDescriptor(this);\n  private final IdeProjectDescriptor ideProject = new IdeProjectDescriptor(this);\n  private final UiProjectDescriptor uiProject = new UiProjectDescriptor(this);\n  private final WebProjectDescriptor webProject = new WebProjectDescriptor(this);\n  private final ParentProjectDescriptor parentProject = new ParentProjectDescriptor(this);\n  private final TargetPlatformProject targetPlatformProject = new TargetPlatformProject(this);\n  private final SdkFeatureProject sdkProject = new SdkFeatureProject(this);\n  private final P2RepositoryProject p2Project = new P2RepositoryProject(this);\n  public Set<ProjectDescriptor> getEnabledProjects() {\n    ImmutableSet<ProjectDescriptor> _xblockexpression = null;\n    {\n      final Function1<ProjectDescriptor, Boolean> _function = (ProjectDescriptor it) -> {\n        return Boolean.valueOf(it.isEnabled());\n      };\n      final Iterable<? extends ProjectDescriptor> productionProjects = IterableExtensions.filter(Collections.<ProjectDescriptor>unmodifiableList(CollectionLiterals.<ProjectDescriptor>newArrayList(this.parentProject, this.runtimeProject, this.ideProject, this.uiProject, this.webProject, this.targetPlatformProject, this.sdkProject, this.p2Project)), _function);\n      final Function1<TestedProjectDescriptor, TestProjectDescriptor> _function_1 = (TestedProjectDescriptor it) -> {\n        return it.getTestProject();\n      };\n      final Function1<TestProjectDescriptor, Boolean> _function_2 = (TestProjectDescriptor it) -> {\n        return Boolean.valueOf((it.isEnabled() && it.isSeparate()));\n      };\n      final Iterable<TestProjectDescriptor> testProjects = IterableExtensions.<TestProjectDescriptor>filter(IterableExtensions.<TestedProjectDescriptor, TestProjectDescriptor>map(Iterables.<TestedProjectDescriptor>filter(productionProjects, TestedProjectDescriptor.class), _function_1), _function_2);\n      Iterable<ProjectDescriptor> _plus = Iterables.<ProjectDescriptor>concat(productionProjects, testProjects);\n      _xblockexpression = ImmutableSet.<ProjectDescriptor>copyOf(_plus);\n    }\n    return _xblockexpression;\n  }\n  public boolean needsMavenBuild() {\n    return (Objects.equal(this.preferredBuildSystem, BuildSystem.MAVEN) || (Objects.equal(this.preferredBuildSystem, BuildSystem.GRADLE) && this.uiProject.isEnabled()));\n  }\n<fim_suffix>  public boolean needsTychoBuild() {\n    return (this.needsMavenBuild() && this.runtimeProject.isEclipsePluginProject());\n  }\n  public boolean needsGradleBuild() {\n    return Objects.equal(this.preferredBuildSystem, BuildSystem.GRADLE);\n  }\n  public boolean isNeedsGradleWrapper() {\n    return (this.needsGradleWrapper && this.needsGradleBuild());\n  }\n  @Pure\n  public String getRootLocation() {\n    return this.rootLocation;\n  }\n  public void setRootLocation(final String rootLocation) {\n    this.rootLocation = rootLocation;\n  }\n  @Pure\n  public String getBaseName() {\n    return this.baseName;\n  }\n  public void setBaseName(final String baseName) {\n    this.baseName = baseName;\n  }\n  @Pure\n  public XtextVersion getXtextVersion() {\n    return this.xtextVersion;\n  }\n  public void setXtextVersion(final XtextVersion xtextVersion) {\n    this.xtextVersion = xtextVersion;\n  }\n  @Pure\n  public Ecore2XtextConfiguration getEcore2Xtext() {\n    return this.ecore2Xtext;\n  }\n  @Pure\n  public Charset getEncoding() {\n    return this.encoding;\n  }\n  public void setEncoding(final Charset encoding) {\n    this.encoding = encoding;\n  }\n  @Pure\n  public String getLineDelimiter() {\n    return this.lineDelimiter;\n  }\n  public void setLineDelimiter(final String lineDelimiter) {\n    this.lineDelimiter = lineDelimiter;\n  }\n  @Pure\n  public BuildSystem getPreferredBuildSystem() {\n    return this.preferredBuildSystem;\n  }\n  public void setPreferredBuildSystem(final BuildSystem preferredBuildSystem) {\n    this.preferredBuildSystem = preferredBuildSystem;\n  }\n  @Pure\n  public SourceLayout getSourceLayout() {\n    return this.sourceLayout;\n  }\n  public void setSourceLayout(final SourceLayout sourceLayout) {\n    this.sourceLayout = sourceLayout;\n  }\n  @Pure\n  public ProjectLayout getProjectLayout() {\n    return this.projectLayout;\n  }\n  public void setProjectLayout(final ProjectLayout projectLayout) {\n    this.projectLayout = projectLayout;\n  }\n  public void setNeedsGradleWrapper(final boolean needsGradleWrapper) {\n    this.needsGradleWrapper = needsGradleWrapper;\n  }\n  @Pure\n  public JavaVersion getJavaVersion() {\n    return this.javaVersion;\n  }\n  public void setJavaVersion(final JavaVersion javaVersion) {\n    this.javaVersion = javaVersion;\n  }\n  @Pure\n  public LanguageServer getLanguageServer() {\n    return this.languageServer;\n  }\n  public void setLanguageServer(final LanguageServer languageServer) {\n    this.languageServer = languageServer;\n  }\n  @Pure\n  public JUnitVersion getJunitVersion() {\n    return this.junitVersion;\n  }\n  public void setJunitVersion(final JUnitVersion junitVersion) {\n    this.junitVersion = junitVersion;\n  }\n  @Pure\n  public LanguageDescriptor getLanguage() {\n    return this.language;\n  }\n  @Pure\n  public RuntimeProjectDescriptor getRuntimeProject() {\n    return this.runtimeProject;\n  }\n  @Pure\n  public IdeProjectDescriptor getIdeProject() {\n    return this.ideProject;\n  }<fim_middle>// function below has no smell\n"}