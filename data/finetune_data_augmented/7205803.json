{"text": "<fim_prefix>                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public CreateSuppressionResponse createSuppression(CreateSuppressionRequest request) {\n        LOG.trace(\"Called createSuppression\");\n        request = CreateSuppressionConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                CreateSuppressionConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, CreateSuppressionResponse>\n                transformer = CreateSuppressionConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response =\n                        client.post(ib, request.getCreateSuppressionDetails(), request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public DeleteSenderResponse deleteSender(DeleteSenderRequest request) {\n        LOG.trace(\"Called deleteSender\");\n        request = DeleteSenderConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                DeleteSenderConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, DeleteSenderResponse>\n                transformer = DeleteSenderConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response = client.delete(ib, request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public DeleteSuppressionResponse deleteSuppression(DeleteSuppressionRequest request) {\n        LOG.trace(\"Called deleteSuppression\");\n        request = DeleteSuppressionConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                DeleteSuppressionConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, DeleteSuppressionResponse>\n                transformer = DeleteSuppressionConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response = client.delete(ib, request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public GetSenderResponse getSender(GetSenderRequest request) {\n        LOG.trace(\"Called getSender\");\n        request = GetSenderConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                GetSenderConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, GetSenderResponse> transformer =\n                GetSenderConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response = client.get(ib, request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public GetSuppressionResponse getSuppression(GetSuppressionRequest request) {\n        LOG.trace(\"Called getSuppression\");\n        request = GetSuppressionConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                GetSuppressionConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, GetSuppressionResponse>\n                transformer = GetSuppressionConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response = client.get(ib, request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public ListSendersResponse listSenders(ListSendersRequest request) {\n        LOG.trace(\"Called listSenders\");\n        request = ListSendersConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                ListSendersConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, ListSendersResponse>\n                transformer = ListSendersConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response = client.get(ib, request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public ListSuppressionsResponse listSuppressions(ListSuppressionsRequest request) {\n        LOG.trace(\"Called listSuppressions\");\n        request = ListSuppressionsConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                ListSuppressionsConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, ListSuppressionsResponse>\n                transformer = ListSuppressionsConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response = client.get(ib, request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public UpdateSenderResponse updateSender(UpdateSenderRequest request) {\n        LOG.trace(\"Called updateSender\");\n        request = UpdateSenderConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                UpdateSenderConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, UpdateSenderResponse>\n                transformer = UpdateSenderConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response =\n                        client.put(ib, request.getUpdateSenderDetails(), request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n<fim_suffix>    private boolean canRetryRequestIfRefreshableAuthTokenUsed(com.oracle.bmc.model.BmcException e) {\n        if (e.getStatusCode() == 401\n                && this.authenticationDetailsProvider\n                        instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {\n            ((com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)\n                            this.authenticationDetailsProvider)\n                    .refresh();\n            return true;\n        }\n        return false;\n    }<fim_middle>// function below has no smell\n"}