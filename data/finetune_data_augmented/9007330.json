{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.solr.util;\n\nimport java.io.File;\nimport java.lang.ref.PhantomReference;\nimport java.lang.ref.ReferenceQueue;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport org.apache.commons.io.FileCleaningTracker;\nimport org.apache.commons.io.FileDeleteStrategy;\n\npublic class SolrFileCleaningTracker extends FileCleaningTracker {\n\n  ReferenceQueue<Object> q = new ReferenceQueue<>();\n\n  final Collection<Tracker> trackers = Collections.synchronizedSet(new HashSet<Tracker>());\n\n  final List<String> deleteFailures = Collections.synchronizedList(new ArrayList<String>());\n\n  volatile boolean exitWhenFinished = false;\n\n  Thread reaper;\n\n<fim_suffix>  public void track(final File file, final Object marker) {\n    track(file, marker, null);\n  }\n\n  public void track(final File file, final Object marker, final FileDeleteStrategy deleteStrategy) {\n    if (file == null) {\n      throw new NullPointerException(\"The file must not be null\");\n    }\n    addTracker(file.getPath(), marker, deleteStrategy);\n  }\n\n  public void track(final String path, final Object marker) {\n    track(path, marker, null);\n  }\n\n  public void track(final String path, final Object marker, final FileDeleteStrategy deleteStrategy) {\n    if (path == null) {\n      throw new NullPointerException(\"The path must not be null\");\n    }\n    addTracker(path, marker, deleteStrategy);\n  }\n\n  private synchronized void addTracker(final String path, final Object marker,\n      final FileDeleteStrategy deleteStrategy) {\n    if (exitWhenFinished) {\n      throw new IllegalStateException(\"No new trackers can be added once exitWhenFinished() is called\");\n    }\n    if (reaper == null) {\n      reaper = new Reaper();\n      reaper.start();\n    }\n    trackers.add(new Tracker(path, deleteStrategy, marker, q));\n  }\n\n  public int getTrackCount() {\n    return trackers.size();\n  }\n\n  public List<String> getDeleteFailures() {\n    return deleteFailures;\n  }\n\n  public synchronized void exitWhenFinished() {\n    // synchronized block protects reaper\n    exitWhenFinished = true;\n    if (reaper != null) {\n      synchronized (reaper) {\n        reaper.interrupt();\n        try {\n          reaper.join();\n        } catch (InterruptedException e) { \n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n  }\n\n  private final class Reaper extends Thread {\n    Reaper() {\n      super(\"MultiPart Upload Tmp File Reaper\");\n      setDaemon(true);\n    }\n\n    @Override\n    public void run() {\n      while (exitWhenFinished == false || trackers.size() > 0) {\n        try {\n          // Wait for a tracker to remove.\n          final Tracker tracker = (Tracker) q.remove(); // cannot return null\n          trackers.remove(tracker);\n          if (!tracker.delete()) {\n            deleteFailures.add(tracker.getPath());\n          }\n          tracker.clear();\n        } catch (final InterruptedException e) {\n          Thread.currentThread().interrupt();\n          break;\n        }\n      }\n    }\n  }\n\n  private static final class Tracker extends PhantomReference<Object> {\n\n    private final String path;\n\n    private final FileDeleteStrategy deleteStrategy;\n\n    Tracker(final String path, final FileDeleteStrategy deleteStrategy, final Object marker,\n        final ReferenceQueue<? super Object> queue) {\n      super(marker, queue);\n      this.path = path;\n      this.deleteStrategy = deleteStrategy == null ? FileDeleteStrategy.NORMAL : deleteStrategy;\n    }\n\n    public String getPath() {\n      return path;\n    }\n\n    public boolean delete() {\n      return deleteStrategy.deleteQuietly(new File(path));\n    }\n  }\n\n}<fim_middle>// function below has no smell\n"}