{"text": "<fim_prefix>/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.alibaba.druid.sql.ast.statement;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.alibaba.druid.sql.ast.SQLCommentHint;\nimport com.alibaba.druid.sql.ast.SQLName;\nimport com.alibaba.druid.sql.ast.SQLStatementImpl;\nimport com.alibaba.druid.sql.visitor.SQLASTVisitor;\n\n<fim_suffix>public class SQLDropTableStatement extends SQLStatementImpl implements SQLDropStatement {\n    private List<SQLCommentHint> hints;\n\n    protected List<SQLExprTableSource> tableSources = new ArrayList<SQLExprTableSource>();\n\n    private boolean                    purge;\n\n    protected boolean                  cascade      = false;\n    protected boolean                  restrict     = false;\n    protected boolean                  ifExists     = false;\n    private boolean                    temporary    = false;\n\n    public SQLDropTableStatement(){\n\n    }\n    \n    public SQLDropTableStatement(String dbType){\n        super (dbType);\n    }\n\n    public SQLDropTableStatement(SQLName name, String dbType){\n        this(new SQLExprTableSource(name), dbType);\n    }\n    \n    public SQLDropTableStatement(SQLName name){\n        this (name, null);\n    }\n    \n    public SQLDropTableStatement(SQLExprTableSource tableSource){\n        this (tableSource, null);\n    }\n\n    public SQLDropTableStatement(SQLExprTableSource tableSource, String dbType){\n        this (dbType);\n        this.tableSources.add(tableSource);\n    }\n\n    public List<SQLExprTableSource> getTableSources() {\n        return tableSources;\n    }\n    \n    public void addPartition(SQLExprTableSource tableSource) {\n        if (tableSource != null) {\n            tableSource.setParent(this);\n        }\n        this.tableSources.add(tableSource);\n    }\n\n    public void setName(SQLName name) {\n        this.addTableSource(new SQLExprTableSource(name));\n    }\n\n    public void addTableSource(SQLName name) {\n        this.addTableSource(new SQLExprTableSource(name));\n    }\n\n    public void addTableSource(SQLExprTableSource tableSource) {\n        tableSources.add(tableSource);\n    }\n\n    @Override\n    protected void accept0(SQLASTVisitor visitor) {\n        if (visitor.visit(this)) {\n            this.acceptChild(visitor, tableSources);\n        }\n        visitor.endVisit(this);\n    }\n\n    @Override\n    public List getChildren() {\n        return this.tableSources;\n    }\n\n    public boolean isPurge() {\n        return purge;\n    }\n\n    public void setPurge(boolean purge) {\n        this.purge = purge;\n    }\n\n    public boolean isIfExists() {\n        return ifExists;\n    }\n\n    public void setIfExists(boolean ifExists) {\n        this.ifExists = ifExists;\n    }\n\n    public boolean isCascade() {\n        return cascade;\n    }\n\n    public void setCascade(boolean cascade) {\n        this.cascade = cascade;\n    }\n\n    public boolean isRestrict() {\n        return restrict;\n    }\n\n    public void setRestrict(boolean restrict) {\n        this.restrict = restrict;\n    }\n\n    public boolean isTemporary() {\n        return temporary;\n    }\n\n    public void setTemporary(boolean temporary) {\n        this.temporary = temporary;\n    }\n\n    public List<SQLCommentHint> getHints() {\n        return hints;\n    }\n\n    public void setHints(List<SQLCommentHint> hints) {\n        this.hints = hints;\n    }\n}<fim_middle>// class below is data class\n"}