{"text": "<fim_prefix>/*\n * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\n/*\n */\n\npackage org.graalvm.compiler.jtt.threads;\n\nimport org.graalvm.compiler.jtt.JTTTest;\nimport org.junit.Assert;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.TestRule;\n\n//Test all, mainly monitors\npublic class Thread_isInterrupted02 extends JTTTest {\n\n    @Rule public TestRule timeout = createTimeoutSeconds(20);\n\n    private static final Object start = new Object();\n    private static final Object end = new Object();\n    private static int waitTime;\n\n<fim_suffix>    @SuppressWarnings(\"unused\")\n    public static boolean test(int i, int time) throws InterruptedException {\n        waitTime = time;\n        final Thread thread = new Thread();\n        synchronized (thread) {\n            // start the thread and wait for it\n            thread.setDaemon(true); // in case the thread gets stuck\n            thread.start();\n            while (!thread.wait1Condition) {\n                thread.wait(10000);\n            }\n        }\n        synchronized (start) {\n            thread.interrupt();\n            thread.sentInterrupt = true;\n        }\n        synchronized (end) {\n            while (!thread.wait2Condition) {\n                end.wait(10000);\n            }\n        }\n        return thread.interrupted;\n    }\n\n    private static class Thread extends java.lang.Thread {\n\n        private boolean interrupted;\n        private boolean sentInterrupt;\n        private boolean wait1Condition;\n        private boolean wait2Condition;\n\n        @Override\n        public void run() {\n            try {\n                synchronized (start) {\n                    synchronized (this) {\n                        // signal test thread that we are running\n                        wait1Condition = true;\n                        notify();\n                    }\n                    // wait for the condition, which should be interrupted\n                    while (!sentInterrupt) {\n                        if (waitTime == 0) {\n                            start.wait();\n                        } else {\n                            start.wait(waitTime);\n                        }\n                        if (Thread.interrupted()) {\n                            throw new InterruptedException();\n                        }\n                    }\n                    Assert.fail(\"should not reach here - was not interrupted\");\n                }\n            } catch (InterruptedException e) {\n                // interrupted successfully.\n                interrupted = true;\n                synchronized (end) {\n                    // notify the other thread we are done\n                    wait2Condition = true;\n                    end.notify();\n                }\n            }\n        }\n    }\n\n    @Test\n    public void run0() throws Throwable {\n        runTest(\"test\", 0, 0);\n    }\n\n    @Test\n    public void run1() throws Throwable {\n        runTest(\"test\", 1, 500);\n    }\n\n}<fim_middle>// function below has no smell\n"}