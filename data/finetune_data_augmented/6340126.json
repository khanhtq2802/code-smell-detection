{"text": "<fim_prefix>/**\n * Copyright (c) 2016-2018 TypeFox and others.\n * \n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0,\n * or the Eclipse Distribution License v. 1.0 which is available at\n * http://www.eclipse.org/org/documents/edl-v10.php.\n * \n * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause\n */\npackage org.eclipse.lsp4j;\n\nimport org.eclipse.lsp4j.Position;\nimport org.eclipse.lsp4j.TextDocumentIdentifier;\nimport org.eclipse.lsp4j.jsonrpc.validation.NonNull;\nimport org.eclipse.lsp4j.util.Preconditions;\nimport org.eclipse.xtext.xbase.lib.Pure;\nimport org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n\n/**\n * The rename request is sent from the client to the server to do a workspace wide rename of a symbol.\n */\n@SuppressWarnings(\"all\")\npublic class RenameParams {\n  /**\n   * The document in which to find the symbol.\n   */\n  @NonNull\n  private TextDocumentIdentifier textDocument;\n  \n  /**\n   * The position at which this request was send.\n   */\n  @NonNull\n  private Position position;\n  \n  /**\n   * The new name of the symbol. If the given name is not valid the request must return a\n   * ResponseError with an appropriate message set.\n   */\n  @NonNull\n  private String newName;\n  \n  public RenameParams() {\n  }\n  \n  public RenameParams(@NonNull final TextDocumentIdentifier textDocument, @NonNull final Position position, @NonNull final String newName) {\n    this.textDocument = Preconditions.<TextDocumentIdentifier>checkNotNull(textDocument, \"textDocument\");\n    this.position = Preconditions.<Position>checkNotNull(position, \"position\");\n    this.newName = Preconditions.<String>checkNotNull(newName, \"newName\");\n  }\n  \n  /**\n   * The document in which to find the symbol.\n   */\n  @Pure\n  @NonNull\n  public TextDocumentIdentifier getTextDocument() {\n    return this.textDocument;\n  }\n  \n  /**\n   * The document in which to find the symbol.\n   */\n  public void setTextDocument(@NonNull final TextDocumentIdentifier textDocument) {\n    if (textDocument == null) {\n      throw new IllegalArgumentException(\"Property must not be null: textDocument\");\n    }\n    this.textDocument = textDocument;\n  }\n  \n  /**\n   * The position at which this request was send.\n   */\n<fim_suffix>  @Pure\n  @NonNull\n  public Position getPosition() {\n    return this.position;\n  }\n  \n  /**\n   * The position at which this request was send.\n   */\n  public void setPosition(@NonNull final Position position) {\n    if (position == null) {\n      throw new IllegalArgumentException(\"Property must not be null: position\");\n    }\n    this.position = position;\n  }\n  \n  /**\n   * The new name of the symbol. If the given name is not valid the request must return a\n   * ResponseError with an appropriate message set.\n   */\n  @Pure\n  @NonNull\n  public String getNewName() {\n    return this.newName;\n  }\n  \n  /**\n   * The new name of the symbol. If the given name is not valid the request must return a\n   * ResponseError with an appropriate message set.\n   */\n  public void setNewName(@NonNull final String newName) {\n    if (newName == null) {\n      throw new IllegalArgumentException(\"Property must not be null: newName\");\n    }\n    this.newName = newName;\n  }\n  \n  @Override\n  @Pure\n  public String toString() {\n    ToStringBuilder b = new ToStringBuilder(this);\n    b.add(\"textDocument\", this.textDocument);\n    b.add(\"position\", this.position);\n    b.add(\"newName\", this.newName);\n    return b.toString();\n  }\n  \n  @Override\n  @Pure\n  public boolean equals(final Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    RenameParams other = (RenameParams) obj;\n    if (this.textDocument == null) {\n      if (other.textDocument != null)\n        return false;\n    } else if (!this.textDocument.equals(other.textDocument))\n      return false;\n    if (this.position == null) {\n      if (other.position != null)\n        return false;\n    } else if (!this.position.equals(other.position))\n      return false;\n    if (this.newName == null) {\n      if (other.newName != null)\n        return false;\n    } else if (!this.newName.equals(other.newName))\n      return false;\n    return true;\n  }\n  \n  @Override\n  @Pure\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + ((this.textDocument== null) ? 0 : this.textDocument.hashCode());\n    result = prime * result + ((this.position== null) ? 0 : this.position.hashCode());\n    return prime * result + ((this.newName== null) ? 0 : this.newName.hashCode());\n  }\n}<fim_middle>// function below has no smell\n"}