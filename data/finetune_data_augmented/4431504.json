{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.eagle.service.client;\n\nimport org.apache.eagle.common.config.EagleConfigFactory;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class EagleServiceSingleEntityQueryRequest {\n\tprivate String query;\n\tprivate String startRowkey;\n\tprivate int pageSize;\n\tprivate long startTime;\n\tprivate long endTime;\n\tprivate boolean treeAgg;\n\tprivate String metricName;\n\tprivate boolean filterIfMissing;\n\n    public boolean isVerbose() {\n        return verbose;\n    }\n\n    public void setVerbose(boolean verbose) {\n        this.verbose = verbose;\n    }\n\n    private boolean verbose;\n\t\n\tpublic String getMetricName() {\n\t\treturn metricName;\n\t}\n\n\tpublic void setMetricName(String metricName) {\n\t\tthis.metricName = metricName;\n\t}\n\n\tpublic String getQuery() {\n\t\treturn query;\n\t}\n\n\tpublic void setQuery(String query) {\n\t\tthis.query = query;\n\t}\n\n\tpublic String getStartRowkey() {\n\t\treturn startRowkey;\n\t}\n\n\tpublic void setStartRowkey(String startRowkey) {\n\t\tthis.startRowkey = startRowkey;\n\t}\n\n\tpublic boolean isTreeAgg() {\n\t\treturn treeAgg;\n\t}\n\n\tpublic void setTreeAgg(boolean treeAgg) {\n\t\tthis.treeAgg = treeAgg;\n\t}\n\n\tpublic long getStartTime() {\n\t\treturn startTime;\n\t}\n\n\tpublic void setStartTime(long startTime) {\n\t\tthis.startTime = startTime;\n\t}\n\n\tpublic long getEndTime() {\n\t\treturn endTime;\n\t}\n\n\tpublic void setEndTime(long endTime) {\n\t\tthis.endTime = endTime;\n\t}\n\n\tpublic int getPageSize() {\n\t\treturn pageSize;\n\t}\n\n\tpublic void setPageSize(int pageSize) {\n\t\tthis.pageSize = pageSize;\n\t}\n\t\n\tpublic boolean getFilterIfMissing() {\n\t\treturn filterIfMissing;\n\t}\n\n\tpublic void setFilterIfMissing(boolean filterIfMissing) {\n\t\tthis.filterIfMissing = filterIfMissing;\n\t}\n\n\tpublic String getQueryParameterString() throws EagleServiceClientException {\n\t\tif (pageSize < 0) {\n\t\t\tthrow new EagleServiceClientException(\"pageSize can't be less than 0, pageSize: \" + pageSize);\n\t\t}\n\n\t\t// startTime and endTime is optional\n\t\t\n\t\tfinal StringBuilder sb = new StringBuilder();\n\t\t// query\n//        try {\n//            sb.append(\"query=\").append(URLEncoder.encode(query,\"UTF-8\"));\n            sb.append(\"query=\").append(query);\n//        } catch (UnsupportedEncodingException e) {\n//            throw new EagleServiceClientException(e);\n//        }\n\n        // startRowkey\n\t\tif (startRowkey != null) {\n\t\t\tsb.append(\"&startRowkey=\").append(startRowkey);\n\t\t}\n\t\t// pageSize\n\t\tsb.append(\"&pageSize=\").append(this.pageSize);\n\t\tif (startTime !=0 || endTime != 0) {\n\t\t\tDate date = new Date(startTime);\n\t\t\tSimpleDateFormat dateFormatter = new SimpleDateFormat(\"yyyy-MM-dd%20HH:mm:ss\");\n            dateFormatter.setTimeZone(EagleConfigFactory.load().getTimeZone());\n\t\t\tString timeString = dateFormatter.format(date);\n\t\t\tsb.append(\"&startTime=\").append(timeString);\n\t\t\tdate.setTime(endTime);\n\t\t\ttimeString = dateFormatter.format(date);\n\t\t\tsb.append(\"&endTime=\").append(timeString);\n\t\t}\n\t\t// tree aggregate\n\t\tsb.append(\"&treeAgg=\").append(treeAgg);\n\t\t\n\t\t// for metric read\n\t\tif(metricName != null){\n\t\t\tsb.append(\"&metricName=\").append(metricName);\n\t\t}\n\t\t\n\t\tif (filterIfMissing == true) { \n\t\t\tsb.append(\"&filterIfMissing=\").append(\"true\");\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n    public static Builder build(){\n        return new Builder();\n    }\n\n<fim_suffix>    public static class Builder{\n        private final EagleServiceSingleEntityQueryRequest rawQuery;\n        public Builder(){\n            this.rawQuery= new EagleServiceSingleEntityQueryRequest();\n        }\n        public EagleServiceSingleEntityQueryRequest done(){\n            return this.rawQuery;\n        }\n        public Builder query(String query) {\n            this.rawQuery.setQuery(query);\n            return this;\n        }\n\n        public Builder startTime(long startTime) {\n            this.rawQuery.setStartTime(startTime);\n            return this;\n        }\n\n        public Builder endTime(long endTime) {\n            this.rawQuery.setEndTime(endTime);\n            return this;\n        }\n\n        public Builder pageSize(int pageSize) {\n            this.rawQuery.setPageSize(pageSize);\n            return this;\n        }\n\n        public Builder startRowkey(String startRowkey) {\n            this.rawQuery.setStartRowkey(startRowkey);\n            return this;\n        }\n\n        public Builder treeAgg(boolean treeAgg) {\n            this.rawQuery.setTreeAgg(treeAgg);\n            return this;\n        }\n\n        public Builder filerIfMissing(boolean filterIfMissing) {\n            this.rawQuery.setFilterIfMissing(filterIfMissing);\n            return this;\n        }\n\n        public Builder metricName(String metricName) {\n            this.rawQuery.setMetricName(metricName);\n            return this;\n        }\n\n        public Builder verbose(Boolean verbose) {\n            this.rawQuery.setVerbose(verbose);\n            return this;\n        }\n    }\n}<fim_middle>// class below has no smell\n"}