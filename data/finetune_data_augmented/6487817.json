{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2001, 2018 IBM Corp. and others\n *\n * This program and the accompanying materials are made available under\n * the terms of the Eclipse Public License 2.0 which accompanies this\n * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n * or the Apache License, Version 2.0 which accompanies this distribution and\n * is available at https://www.apache.org/licenses/LICENSE-2.0.\n *\n * This Source Code may also be made available under the following\n * Secondary Licenses when the conditions for such availability set\n * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n * General Public License, version 2 with the GNU Classpath\n * Exception [1] and GNU General Public License, version 2 with the\n * OpenJDK Assembly Exception [2].\n *\n * [1] https://www.gnu.org/software/classpath/license.html\n * [2] http://openjdk.java.net/legal/assembly-exception.html\n *\n * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n *******************************************************************************/\npackage com.ibm.j9ddr.vm29.types;\nimport com.ibm.j9ddr.InvalidDataTypeException;\npublic class U32 extends UDATA {\n\t// Constants\n\tpublic static final int SIZEOF = 4;\n\tpublic static final long MASK = 0xFFFFFFFFL;\n\tpublic static final U32 MIN = new U32(0x00000000L);\n\tpublic static final U32 MAX = new U32(0xFFFFFFFFL);\n\t// Constructor\n\tpublic U32(long value) {\n\t\tsuper(value & MASK);\n\t}\n\tpublic U32(Scalar parameter) {\n\t\tsuper(parameter);\n\t}\n\t// API\n\t// Add\n\tpublic U32 add(int number) {\n\t\treturn new U32(data + number);\n\t}\n\tpublic U32 add(UScalar parameter) {\n\t\treturn add(new U32(parameter));\n\t}\n\tpublic U32 add(I32 parameter) {\n\t\treturn new U32(data + parameter.data);\n\t}\n\tpublic U32 add(U32 parameter) {\n\t\treturn new U32(data + parameter.data);\n\t}\n\tpublic U64 add(U64 parameter) {\n\t\treturn new U64(this).add(parameter);\n\t}\n\tpublic boolean eq(U64 parameter) {\n\t\treturn new U64(this).eq(parameter);\n\t}\n<fim_suffix>\tpublic UDATA add(UDATA parameter) {\n\t\treturn new UDATA(this).add(parameter);\n\t}\n\tpublic boolean eq(UDATA parameter) {\n\t\treturn new UDATA(this).eq(parameter);\n\t}\n\tpublic U32 add(IScalar parameter) {\n\t\treturn add(new U32(parameter));\n\t}\n\tpublic boolean eq(IScalar parameter) {\n\t\treturn eq(new U32(parameter));\n\t}\n\tpublic I64 add(I64 parameter) {\n\t\treturn new I64(this).add(parameter);\n\t}\n\tpublic boolean eq(I64 parameter) {\n\t\treturn new I64(this).eq(parameter);\n\t}\n\tpublic IDATA add(IDATA parameter) {\n\t\treturn new IDATA(this).add(parameter);\n\t}\n\t// Sub\n\tpublic U32 sub(int number) {\n\t\treturn new U32(data - number);\n\t}\n\tpublic U32 sub(UScalar parameter) {\n\t\treturn sub(new U32(parameter));\n\t}\n\tpublic U32 sub(U32 parameter) {\n\t\treturn new U32(data - parameter.data);\n\t}\n\tpublic U64 sub(U64 parameter) {\n\t\treturn new U64(this).sub(parameter);\n\t}\n\tpublic UDATA sub(UDATA parameter) {\n\t\treturn new UDATA(this).sub(parameter);\n\t}\n\tpublic U32 sub(IScalar parameter) {\n\t\treturn sub(new U32(parameter));\n\t}\n\tpublic I64 sub(I64 parameter) {\n\t\treturn new I64(this).sub(parameter);\n\t}\n\tpublic UDATA sub(IDATA parameter) {\n\t\treturn new UDATA(this).sub(parameter);\n\t}\n\tpublic int intValue() {\n\t\tlong value = data;\n\t\tif (value < 0 || value > Integer.MAX_VALUE) {\n\t\t\tthrow new InvalidDataTypeException(\"U32 contains value larger than Integer.MAX_VALUE\");\n\t\t}\n\t\treturn (int) value;\n\t}\n\t// bitOr\n\tpublic U32 bitOr(int number) {\n\t\treturn new U32(data | number);\n\t}\n\tpublic U32 bitOr(long number) {\n\t\treturn new U32(data | number);\n\t}\n\tpublic U32 bitOr(UScalar parameter) {\n\t\treturn bitOr(new U32(parameter));\n\t}\n\tpublic U32 bitOr(U32 parameter) {\n\t\treturn new U32(data | parameter.data);\n\t}\n\tpublic U64 bitOr(U64 parameter) {\n\t\treturn new U64(this).bitOr(parameter);\n\t}\n\tpublic UDATA bitOr(UDATA parameter) {\n\t\treturn new UDATA(this).bitOr(parameter);\n\t}\n\tpublic U32 bitOr(IScalar parameter) {\n\t\treturn bitOr(new U32(parameter));\n\t}\n\tpublic I64 bitOr(I64 parameter) {\n\t\treturn new I64(this).bitOr(parameter);\n\t}\n\tpublic UDATA bitOr(IDATA parameter) {\n\t\treturn new UDATA(this).bitOr(parameter);\n\t}\n\t// bitXor\n\tpublic U32 bitXor(int number) {\n\t\treturn new U32(data ^ number);\n\t}\n\tpublic U32 bitXor(long number) {\n\t\treturn new U32(data ^ number);\n\t}\n\tpublic U32 bitXor(Scalar parameter) {\n\t\treturn bitXor(new U32(parameter));\n\t}\n\tpublic U32 bitXor(U32 parameter) {\n\t\treturn new U32(data ^ parameter.data);\n\t}\n\tpublic UDATA bitXor(UDATA parameter) {\n\t\treturn new UDATA(this).bitXor(parameter);\n\t}\n\tpublic IDATA bitXor(IDATA parameter) {\n\t\treturn new IDATA(this).bitXor(parameter);\n\t}\n\tpublic U64 bitXor(U64 parameter) {\n\t\treturn new U64(this).bitXor(parameter);\n\t}\n\tpublic I64 bitXor(I64 parameter) {\n\t\treturn new I64(this).bitXor(parameter);\n\t}\n\t// bitAnd\n\tpublic U32 bitAnd(int number) {\n\t\treturn new U32(data & number);\n\t}\n\tpublic U32 bitAnd(long number) {\n\t\treturn new U32(data & number);\n\t}\n\tpublic U32 bitAnd(UScalar parameter) {\n\t\treturn bitAnd(new U32(parameter));\n\t}\n\tpublic U32 bitAnd(U32 parameter) {\n\t\treturn new U32(data & parameter.data);\n\t}\n\tpublic U64 bitAnd(U64 parameter) {\n\t\treturn new U64(this).bitAnd(parameter);\n\t}\n\tpublic UDATA bitAnd(UDATA parameter) {\n\t\treturn new UDATA(this).bitAnd(parameter);\n\t}\n\tpublic U32 bitAnd(IScalar parameter) {\n\t\treturn bitAnd(new U32(parameter));\n\t}\n\tpublic I64 bitAnd(I64 parameter) {\n\t\treturn new I64(this).bitAnd(parameter);\n\t}\n\tpublic UDATA bitAnd(IDATA parameter) {\n\t\treturn new UDATA(this).bitAnd(parameter);\n\t}\n\t// leftShift\n\tpublic U32 leftShift(int i) {\n\t\treturn new U32(data << i);\n\t}\n\t// rightShift\n\tpublic U32 rightShift(int i) {\n\t\treturn new U32(data >>> i);\n\t}\n\t// bitNot<fim_middle>// function below has no smell\n"}