{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.mapred;\n\nimport java.io.DataInput;\nimport java.io.IOException;\n\nimport org.apache.hadoop.classification.InterfaceAudience;\nimport org.apache.hadoop.classification.InterfaceStability;\nimport org.apache.hadoop.mapreduce.TaskType;\n\n/**\n * TaskAttemptID represents the immutable and unique identifier for \n * a task attempt. Each task attempt is one particular instance of a Map or\n * Reduce Task identified by its TaskID. \n * \n * TaskAttemptID consists of 2 parts. First part is the \n * {@link TaskID}, that this TaskAttemptID belongs to.\n * Second part is the task attempt number. <br> \n * An example TaskAttemptID is : \n * <code>attempt_200707121733_0003_m_000005_0</code> , which represents the\n * zeroth task attempt for the fifth map task in the third job \n * running at the jobtracker started at <code>200707121733</code>.\n * <p>\n * Applications should never construct or parse TaskAttemptID strings\n * , but rather use appropriate constructors or {@link #forName(String)} \n * method. \n * \n * @see JobID\n * @see TaskID\n */\n<fim_suffix>@InterfaceAudience.Public\n@InterfaceStability.Stable\npublic class TaskAttemptID extends org.apache.hadoop.mapreduce.TaskAttemptID {\n  \n  /**\n   * Constructs a TaskAttemptID object from given {@link TaskID}.  \n   * @param taskId TaskID that this task belongs to  \n   * @param id the task attempt number\n   */\n  public TaskAttemptID(TaskID taskId, int id) {\n    super(taskId, id);\n  }\n  \n  /**\n   * Constructs a TaskId object from given parts.\n   * @param jtIdentifier jobTracker identifier\n   * @param jobId job number \n   * @param isMap whether the tip is a map \n   * @param taskId taskId number\n   * @param id the task attempt number\n   * @deprecated Use {@link #TaskAttemptID(String, int, TaskType, int, int)}.\n   */\n  @Deprecated\n  public TaskAttemptID(String jtIdentifier, int jobId, boolean isMap, \n      int taskId, int id) {\n    this(jtIdentifier, jobId, isMap ? TaskType.MAP : TaskType.REDUCE, taskId,\n\tid);\n  }\n  \n  /**\n   * Constructs a TaskId object from given parts.\n   * @param jtIdentifier jobTracker identifier\n   * @param jobId job number \n   * @param type the TaskType \n   * @param taskId taskId number\n   * @param id the task attempt number\n   */\n  public TaskAttemptID(String jtIdentifier, int jobId, TaskType type, \n                       int taskId, int id) {\n    this(new TaskID(jtIdentifier, jobId, type, taskId), id);\n  }\n  \n  public TaskAttemptID() { \n    super(new TaskID(), 0);\n  }\n\n  /**\n   * Downgrade a new TaskAttemptID to an old one\n   * @param old the new id\n   * @return either old or a new TaskAttemptID constructed to match old\n   */\n  public static \n  TaskAttemptID downgrade(org.apache.hadoop.mapreduce.TaskAttemptID old) {\n    if (old instanceof TaskAttemptID) {\n      return (TaskAttemptID) old;\n    } else {\n      return new TaskAttemptID(TaskID.downgrade(old.getTaskID()), old.getId());\n    }\n  }\n\n  public TaskID getTaskID() {\n    return (TaskID) super.getTaskID();\n  }\n\n  public JobID getJobID() {\n    return (JobID) super.getJobID();\n  }\n\n  @Deprecated\n  public static TaskAttemptID read(DataInput in) throws IOException {\n    TaskAttemptID taskId = new TaskAttemptID();\n    taskId.readFields(in);\n    return taskId;\n  }\n  \n  /** Construct a TaskAttemptID object from given string \n   * @return constructed TaskAttemptID object or null if the given String is null\n   * @throws IllegalArgumentException if the given string is malformed\n   */\n  public static TaskAttemptID forName(String str\n                                      ) throws IllegalArgumentException {\n    return (TaskAttemptID) \n             org.apache.hadoop.mapreduce.TaskAttemptID.forName(str);\n  }\n  \n  /** \n   * Returns a regex pattern which matches task attempt IDs. Arguments can \n   * be given null, in which case that part of the regex will be generic.  \n   * For example to obtain a regex matching <i>all task attempt IDs</i> \n   * of <i>any jobtracker</i>, in <i>any job</i>, of the <i>first \n   * map task</i>, we would use :\n   * <pre> \n   * TaskAttemptID.getTaskAttemptIDsPattern(null, null, true, 1, null);\n   * </pre>\n   * which will return :\n   * <pre> \"attempt_[^_]*_[0-9]*_m_000001_[0-9]*\" </pre> \n   * @param jtIdentifier jobTracker identifier, or null\n   * @param jobId job number, or null\n   * @param isMap whether the tip is a map, or null \n   * @param taskId taskId number, or null\n   * @param attemptId the task attempt number, or null\n   * @return a regex pattern matching TaskAttemptIDs\n   */\n  @Deprecated\n  public static String getTaskAttemptIDsPattern(String jtIdentifier,\n      Integer jobId, Boolean isMap, Integer taskId, Integer attemptId) {\n    return getTaskAttemptIDsPattern(jtIdentifier, jobId,\n\tisMap ? TaskType.MAP : TaskType.REDUCE, taskId, attemptId);\n  }\n  \n  /** \n   * Returns a regex pattern which matches task attempt IDs. Arguments can \n   * be given null, in which case that part of the regex will be generic.  \n   * For example to obtain a regex matching <i>all task attempt IDs</i> \n   * of <i>any jobtracker</i>, in <i>any job</i>, of the <i>first \n   * map task</i>, we would use :\n   * <pre> \n   * TaskAttemptID.getTaskAttemptIDsPattern(null, null, TaskType.MAP, 1, null);\n   * </pre>\n   * which will return :\n   * <pre> \"attempt_[^_]*_[0-9]*_m_000001_[0-9]*\" </pre> \n   * @param jtIdentifier jobTracker identifier, or null\n   * @param jobId job number, or null\n   * @param type the {@link TaskType} \n   * @param taskId taskId number, or null\n   * @param attemptId the task attempt number, or null\n   * @return a regex pattern matching TaskAttemptIDs\n   */\n  @Deprecated\n  public static String getTaskAttemptIDsPattern(String jtIdentifier,\n      Integer jobId, TaskType type, Integer taskId, Integer attemptId) {\n    StringBuilder builder = new StringBuilder(ATTEMPT).append(SEPARATOR);\n    builder.append(getTaskAttemptIDsPatternWOPrefix(jtIdentifier, jobId,\n        type, taskId, attemptId));\n    return builder.toString();\n  }\n  \n  @Deprecated\n  static StringBuilder getTaskAttemptIDsPatternWOPrefix(String jtIdentifier\n      , Integer jobId, TaskType type, Integer taskId, Integer attemptId) {\n    StringBuilder builder = new StringBuilder();\n    builder.append(TaskID.getTaskIDsPatternWOPrefix(jtIdentifier\n        , jobId, type, taskId))\n        .append(SEPARATOR)\n        .append(attemptId != null ? attemptId : \"[0-9]*\");\n    return builder;\n  }\n}<fim_middle>// class below has no smell\n"}