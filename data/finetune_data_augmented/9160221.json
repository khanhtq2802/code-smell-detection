{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2004 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *  Actuate Corporation  - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.birt.report.model.util;\nimport java.util.List;\nimport org.eclipse.birt.report.model.api.elements.structures.EmbeddedImage;\nimport org.eclipse.birt.report.model.api.metadata.IElementPropertyDefn;\nimport org.eclipse.birt.report.model.api.metadata.IPropertyType;\nimport org.eclipse.birt.report.model.api.metadata.PropertyValueException;\nimport org.eclipse.birt.report.model.api.util.StringUtil;\nimport org.eclipse.birt.report.model.core.Module;\nimport org.eclipse.birt.report.model.core.ReferencableStructure;\nimport org.eclipse.birt.report.model.core.Structure;\nimport org.eclipse.birt.report.model.elements.Library;\nimport org.eclipse.birt.report.model.metadata.PropertyDefn;\nimport org.eclipse.birt.report.model.metadata.StructRefValue;\nimport org.eclipse.birt.report.model.metadata.StructureDefn;\n/**\n * Utility class for the StructRefPropertyType.\n */\npublic class StructureRefUtil\n{\n\t/**\n\t * Looks up the target structure with the given name.\n\t * \n\t * @param module\n\t *            the module in which to search the target locally\n\t * @param targetDefn\n\t *            the definition for the target structure\n\t * @param name\n\t *            the name of the target structure to search\n\t * @return the structure with the given name in the module locally,\n\t *         otherwise null\n\t */\n\tpublic static Structure findNativeStructure( Module module,\n\t\t\tStructureDefn targetDefn, String name )\n\t{\n\t\tif ( StringUtil.isBlank( name ) || targetDefn == null )\n\t\t\treturn null;\n\t\tIElementPropertyDefn defn = module\n\t\t\t\t.getReferencablePropertyDefn( targetDefn.getName( ) );\n\t\tif ( defn == null )\n\t\t\treturn null;\n\t\tassert defn.getTypeCode( ) == IPropertyType.STRUCT_TYPE;\n\t\tif ( defn.isList( ) )\n\t\t{\n\t\t\tList<Object> list = module\n\t\t\t\t\t.getListProperty( module, defn.getName( ) );\n\t\t\tif ( list == null )\n\t\t\t\treturn null;\n\t\t\tfor ( int i = 0; i < list.size( ); i++ )\n\t\t\t{\n\t\t\t\tStructure struct = (Structure) list.get( i );\n\t\t\t\tif ( name.equals( struct.getReferencableProperty( ) ) )\n\t\t\t\t\treturn struct;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tStructure struct = (Structure) module.getProperty( module, defn\n\t\t\t\t\t.getName( ) );\n\t\t\tif ( name.equals( struct.getReferencableProperty( ) ) )\n\t\t\t\treturn struct;\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Looks up the target structure with the given name in the module and its\n\t * directly including libraries.\n\t * \n\t * @param module\n\t *            the module in which to search the target locally\n\t * @param targetDefn\n\t *            the definition for the target structure\n\t * @param name\n\t *            the name of the target structure to search\n\t * @return the structure with the given name in the module locally,\n\t *         otherwise null\n\t */\n\tpublic static Structure findStructure( Module module,\n\t\t\tStructureDefn targetDefn, String name )\n\t{\n\t\tObject retValue = resolveStructureWithName( module, targetDefn, name );\n\t\tif ( retValue instanceof StructRefValue )\n\t\t\treturn ( (StructRefValue) retValue ).getStructure( );\n\t\treturn (Structure) retValue;\n\t}\n\t/**\n\t * Resolves a reference structure with the given name and the module scope.\n\t * <p>\n\t * For example, if \"image.gif\" is the name and lib1 is not included by the\n\t * <code>module</code>, \"image\" is treated as the namespace and \"gif\" is\n\t * treated as the name.\n\t * \n\t * @param module\n\t *            the module where to start to find\n\t * @param targetDefn\n\t *            the definition for the target structure\n\t * @param name\n\t *            the name of the target structure to search\n\t * @return the structure reference value\n\t */\n\tprivate static Object resolveStructureWithName( Module module,\n\t\t\tStructureDefn targetDefn, String name )\n\t{\n\t\tif ( StringUtil.isBlank( name ) || targetDefn == null || module == null )\n\t\t\treturn null;\n\t\t// try to find it locally first.\n\t\tif ( EmbeddedImage.EMBEDDED_IMAGE_STRUCT.equalsIgnoreCase( targetDefn\n\t\t\t\t.getName( ) ) )\n\t\t{\n\t\t\tStructure emImage = StructureRefUtil.findNativeStructure( module,\n\t\t\t\t\ttargetDefn, name );\n\t\t\tif ( emImage != null )\n\t\t\t{\n\t\t\t\tString namespace = null;\n\t\t\t\tif ( module instanceof Library )\n\t\t\t\t\tnamespace = ( (Library) module ).getNamespace( );\n\t\t\t\tStructRefValue refValue = new StructRefValue( namespace,\n\t\t\t\t\t\temImage );\n\t\t\t\treturn refValue;\n\t\t\t}\n\t\t}\n\t\t// if not find locally, uses namespace\n\t\tString namespace = StringUtil.extractNamespace( name );\n\t\tString structName = StringUtil.extractName( name );\n\t\tModule moduleToSearch = null;\n\t\t// for the embedded image, there is no need to search again.\n\t\tif ( !EmbeddedImage.EMBEDDED_IMAGE_STRUCT.equalsIgnoreCase( targetDefn\n\t\t\t\t.getName( ) ) )\n\t\t\tmoduleToSearch = module;\n\t\tif ( namespace != null )\n\t\t\tmoduleToSearch = module.getLibraryWithNamespace( namespace );\n\t\t// find it in the library.\n\t\tif ( moduleToSearch != null )\n\t\t{\n\t\t\tStructure retValue = findNativeStructure( moduleToSearch,\n\t\t\t\t\ttargetDefn, structName );\n\t\t\tif ( retValue != null )\n\t\t\t{\n\t\t\t\tif ( EmbeddedImage.EMBEDDED_IMAGE_STRUCT\n\t\t\t\t\t\t.equalsIgnoreCase( targetDefn.getName( ) ) )\n\t\t\t\t\treturn new StructRefValue( namespace, retValue );\n\t\t\t\treturn retValue;\n\t\t\t}\n\t\t}\n\t\t// not find such library, so treat as the local image\n\t\telse\n\t\t{\n\t\t\tif ( module instanceof Library )\n\t\t\t{\n\t\t\t\tnamespace = ( (Library) module ).getNamespace( );\n\t\t\t\tstructName = stripNamespace( name, namespace );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnamespace = null;\n\t\t\t\tstructName = name;\n\t\t\t}\n\t\t}\n\t\tif ( EmbeddedImage.EMBEDDED_IMAGE_STRUCT.equalsIgnoreCase( targetDefn\n\t\t\t\t.getName( ) ) )\n\t\t\treturn new StructRefValue( namespace, structName );\n\t\treturn null;\n\t}\n\t/**\n\t * Removes the namespace from the name if appliable.\n\t * \n\t * @param name\n\t *            the name\n\t * @param namespace\n\t *            the name space\n\t * \n\t * @return the name without namespace\n\t */\n<fim_suffix>\tprivate static String stripNamespace( String name, String namespace )\n\t{\n\t\tif ( name == null || namespace == null )\n\t\t\treturn name;\n\t\tString tmpNamespace = StringUtil.extractNamespace( name );\n\t\tif ( tmpNamespace == null )\n\t\t\treturn name;\n\t\tif ( !namespace.equalsIgnoreCase( tmpNamespace ) )\n\t\t\treturn name;\n\t\treturn StringUtil.extractName( name );\n\t}\n\t/**\n\t * Resolves the structure with the given name.\n\t * \n\t * @param module\n\t *            report design\n\t * @param defn\n\t *            the definition of the property or member to resolve\n\t * @param name\n\t *            structure name\n\t * @return the resolved structure reference value\n\t */\n\tpublic static StructRefValue resolve( Module module, PropertyDefn defn,\n\t\t\tString name )\n\t{\n\t\tif ( StringUtil.isBlank( name ) || defn == null || module == null )\n\t\t\treturn null;\n\t\tassert defn.getTypeCode( ) == IPropertyType.STRUCT_REF_TYPE;\n\t\tStructureDefn targetDefn = (StructureDefn) defn.getStructDefn( );\n\t\tassert targetDefn != null;\n\t\tStructure target = null;\n\t\t// the module which the target structure lies\n\t\tModule targetModule = null;\n\t\t// if the property is a structure reference like \"imageName\", then the\n\t\t// name should not contain \"namespace\" prefix\n\t\t// TODO: the embeddedImage has \".\" in the name which will cause the\n\t\t// nemaspace ambiguity.\n\t\tif ( ReferencableStructure.LIB_REFERENCE_MEMBER\n\t\t\t\t.equals( defn.getName( ) ) )\n\t\t{<fim_middle>// function below has no smell\n"}