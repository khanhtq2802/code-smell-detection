{"text": "<fim_prefix>    /** User wants to view or administer workflows. */\n    public static final String WORKFLOW = WikiCommand.WORKFLOW.getRequestContext();\n    /** The EDIT context - the user is editing the page. */\n    public static final String EDIT = PageCommand.EDIT.getRequestContext();\n    /** User is preparing for a login/authentication. */\n    public static final String LOGIN = WikiCommand.LOGIN.getRequestContext();\n    /** User is preparing to log out. */\n    public static final String LOGOUT = WikiCommand.LOGOUT.getRequestContext();\n    /** JSPWiki wants to display a message. */\n    public static final String MESSAGE = WikiCommand.MESSAGE.getRequestContext();\n    /** User is viewing a DIFF between the two versions of the page. */\n    public static final String DIFF = PageCommand.DIFF.getRequestContext();\n    /** User is viewing page history. */\n    public static final String INFO = PageCommand.INFO.getRequestContext();\n    /** User is previewing the changes he just made. */\n    public static final String PREVIEW = PageCommand.PREVIEW.getRequestContext();\n    /** User has an internal conflict, and does quite not know what to\n        do. Please provide some counseling. */\n    public static final String CONFLICT = PageCommand.CONFLICT.getRequestContext();\n    /** An error has been encountered and the user needs to be informed. */\n    public static final String ERROR = WikiCommand.ERROR.getRequestContext();\n    /** User is uploading something. */\n    public static final String UPLOAD = PageCommand.UPLOAD.getRequestContext();\n    /** User is commenting something. */\n    public static final String COMMENT = PageCommand.COMMENT.getRequestContext();\n    /** User is searching for content. */\n    public static final String FIND = WikiCommand.FIND.getRequestContext();\n    /** User wishes to create a new group */\n    public static final String CREATE_GROUP = WikiCommand.CREATE_GROUP.getRequestContext();\n    /** User is deleting an existing group. */\n    public static final String DELETE_GROUP = GroupCommand.DELETE_GROUP.getRequestContext();\n    /** User is editing an existing group. */\n    public static final String EDIT_GROUP = GroupCommand.EDIT_GROUP.getRequestContext();\n    /** User is viewing an existing group */\n    public static final String VIEW_GROUP = GroupCommand.VIEW_GROUP.getRequestContext();\n    /** User is editing preferences */\n    public static final String PREFS = WikiCommand.PREFS.getRequestContext();\n    /** User is renaming a page. */\n    public static final String RENAME = PageCommand.RENAME.getRequestContext();\n    /** User is deleting a page or an attachment. */\n    public static final String DELETE = PageCommand.DELETE.getRequestContext();\n    /** User is downloading an attachment. */\n    public static final String ATTACH = PageCommand.ATTACH.getRequestContext();\n    /** RSS feed is being generated. */\n    public static final String RSS = PageCommand.RSS.getRequestContext();\n    /** This is not a JSPWiki context, use it to access static files. */\n    public static final String NONE = PageCommand.NONE.getRequestContext();\n    /** Same as NONE; this is just a clarification. */\n    public static final String OTHER = PageCommand.OTHER.getRequestContext();\n    /** User is doing administrative things. */\n    public static final String ADMIN = WikiCommand.ADMIN.getRequestContext();\n    private static final Logger log = Logger.getLogger( WikiContext.class );\n    private static final Permission DUMMY_PERMISSION = new PropertyPermission( \"os.name\", \"read\" );\n    /**\n     *  Create a new WikiContext for the given WikiPage. Delegates to\n     * {@link #WikiContext(WikiEngine, HttpServletRequest, WikiPage)}.\n     *  @param engine The WikiEngine that is handling the request.\n     *  @param page   The WikiPage.  If you want to create a\n     *  WikiContext for an older version of a page, you must use this\n     *  constructor.\n     */\n    public WikiContext( WikiEngine engine, WikiPage page )\n    {\n        this( engine, null, findCommand( engine, null, page ) );\n    }\n    /**\n     * <p>\n     * Creates a new WikiContext for the given WikiEngine, Command and\n     * HttpServletRequest.\n     * </p>\n     * <p>\n     * This constructor will also look up the HttpSession associated with the\n     * request, and determine if a WikiSession object is present. If not, a new\n     * one is created.\n     * </p>\n     * @param engine The WikiEngine that is handling the request\n     * @param request The HttpServletRequest that should be associated with this\n     *            context. This parameter may be <code>null</code>.\n     * @param command the command\n     * @throws IllegalArgumentException if <code>engine</code> or\n     *             <code>command</code> are <code>null</code>\n     */\n    public WikiContext( WikiEngine engine, HttpServletRequest request, Command command )\n        throws IllegalArgumentException\n    {\n        super();\n        if ( engine == null || command == null )\n        {\n            throw new IllegalArgumentException( \"Parameter engine and command must not be null.\" );\n        }\n        m_engine = engine;\n        m_request = request;\n        m_session = WikiSession.getWikiSession( engine, request );\n        m_command = command;\n        // If PageCommand, get the WikiPage\n        if( command instanceof PageCommand )\n        {\n            m_page = (WikiPage)((PageCommand)command).getTarget();\n        }\n        // If page not supplied, default to front page to avoid NPEs\n        if( m_page == null )\n        {\n            m_page = m_engine.getPage( m_engine.getFrontPage() );\n            // Front page does not exist?\n            if( m_page == null )\n            {\n                m_page = new WikiPage( m_engine, m_engine.getFrontPage() );\n            }\n        }\n        m_realPage = m_page;\n        // Special case: retarget any empty 'view' PageCommands to the front page\n        if ( PageCommand.VIEW.equals( command ) && command.getTarget() == null )\n        {\n            m_command = command.targetedCommand( m_page );\n        }\n        // Debugging...\n        if( log.isDebugEnabled() )\n        {\n            HttpSession session = ( request == null ) ? null : request.getSession( false );\n            String sid = ( session == null ) ? \"(null)\" : session.getId();\n            log.debug( \"Creating WikiContext for session ID=\" + sid + \"; target=\" + getName() );\n        }\n        // Figure out what template to use\n        setDefaultTemplate( request );\n    }\n    /**\n     * Creates a new WikiContext for the given WikiEngine, WikiPage and\n     * HttpServletRequest. This method simply looks up the appropriate Command\n     * using {@link #findCommand(WikiEngine, HttpServletRequest, WikiPage)} and\n     * delegates to\n     * {@link #WikiContext(WikiEngine, HttpServletRequest, Command)}.\n     * @param engine The WikiEngine that is handling the request\n     * @param request The HttpServletRequest that should be associated with this\n     *            context. This parameter may be <code>null</code>.\n     * @param page The WikiPage. If you want to create a WikiContext for an\n     *            older version of a page, you must supply this parameter\n     */\n    public WikiContext(WikiEngine engine, HttpServletRequest request, WikiPage page)\n    {\n        this( engine, request, findCommand( engine, request, page ) );\n    }\n    /**\n     * {@inheritDoc}\n     * @see org.apache.wiki.ui.Command#getContentTemplate()\n     */\n    @Override\n\tpublic String getContentTemplate()\n    {\n        return m_command.getContentTemplate();\n    }\n    /**\n     * {@inheritDoc}\n     * @see org.apache.wiki.ui.Command#getJSP()\n     */\n    @Override\n\tpublic String getJSP()\n    {\n        return m_command.getContentTemplate();\n    }\n    /**\n     *  Sets a reference to the real page whose content is currently being\n     *  rendered.\n     *  <p>\n     *  Sometimes you may want to render the page using some other page's context.\n     *  In those cases, it is highly recommended that you set the setRealPage()\n     *  to point at the real page you are rendering.  Please see InsertPageTag\n     *  for an example.\n     *  <p>\n     *  Also, if your plugin e.g. does some variable setting, be aware that if it\n     *  is embedded in the LeftMenu or some other page added with InsertPageTag,\n     *  you should consider what you want to do - do you wish to really reference\n     *  the \"master\" page or the included page.\n     *\n     *  @param page  The real page which is being rendered.\n     *  @return The previous real page\n     *  @since 2.3.14\n     *  @see org.apache.wiki.tags.InsertPageTag\n     */\n<fim_suffix>    public WikiPage setRealPage( WikiPage page )\n    {\n        WikiPage old = m_realPage;\n        m_realPage = page;\n        updateCommand( m_command.getRequestContext() );\n        return old;\n    }<fim_middle>// function below has no smell\n"}