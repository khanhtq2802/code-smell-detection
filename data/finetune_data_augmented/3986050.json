{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *\n */\npackage org.apache.polygene.library.circuitbreaker.service;\n\nimport java.lang.reflect.Method;\nimport org.apache.polygene.api.common.AppliesTo;\nimport org.apache.polygene.api.concern.GenericConcern;\nimport org.apache.polygene.api.injection.scope.This;\nimport org.apache.polygene.library.circuitbreaker.CircuitBreaker;\n\n/**\n * This concern will update the circuit breaker on method invocation success\n * and thrown exceptions.\n */\n@AppliesTo( BreaksCircuitOnThrowable.class )\npublic class BreakCircuitConcern\n        extends GenericConcern\n{\n\n    @This\n    ServiceCircuitBreaker serviceCircuitBreaker;\n\n<fim_suffix>    @Override\n    public Object invoke( Object proxy, Method method, Object[] args )\n            throws Throwable\n    {\n        CircuitBreaker circuitBreaker = serviceCircuitBreaker.circuitBreaker();\n        try\n        {\n            if( !circuitBreaker.isOn() )\n            {\n                throw circuitBreaker.lastThrowable();\n            }\n\n            Object result = next.invoke( proxy, method, args );\n            circuitBreaker.success();\n            return result;\n            \n        } catch( Throwable throwable )\n        {\n            circuitBreaker.throwable( throwable );\n            throw throwable;\n        }\n    }\n\n}<fim_middle>// function below has no smell\n"}