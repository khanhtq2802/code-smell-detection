{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.runtime.checkpoint;\n\nimport javax.annotation.Nullable;\n\nimport java.io.Serializable;\n\nimport static org.apache.flink.util.Preconditions.checkNotNull;\n\n/**\n * A snapshot of the checkpoint stats.\n */\n<fim_suffix>public class CheckpointStatsSnapshot implements Serializable {\n\n\tprivate static final long serialVersionUID = 8914278419087217964L;\n\n\t/** Snapshot of the checkpoint counts. */\n\tprivate final CheckpointStatsCounts counts;\n\n\t/** Snapshot of the completed checkpoints summary stats. */\n\tprivate final CompletedCheckpointStatsSummary summary;\n\n\t/** Snapshot of the checkpoint history. */\n\tprivate final CheckpointStatsHistory history;\n\n\t/** The latest restored checkpoint operation. */\n\t@Nullable\n\tprivate final RestoredCheckpointStats latestRestoredCheckpoint;\n\n\t/**\n\t * Creates a stats snapshot.\n\t *\n\t * @param counts Snapshot of the checkpoint counts.\n\t * @param summary Snapshot of the completed checkpoints summary stats.\n\t * @param history Snapshot of the checkpoint history.\n\t * @param latestRestoredCheckpoint The latest restored checkpoint operation.\n\t */\n\tCheckpointStatsSnapshot(\n\t\t\tCheckpointStatsCounts counts,\n\t\t\tCompletedCheckpointStatsSummary summary,\n\t\t\tCheckpointStatsHistory history,\n\t\t\t@Nullable RestoredCheckpointStats latestRestoredCheckpoint) {\n\n\t\tthis.counts = checkNotNull(counts);\n\t\tthis.summary= checkNotNull(summary);\n\t\tthis.history = checkNotNull(history);\n\t\tthis.latestRestoredCheckpoint = latestRestoredCheckpoint;\n\t}\n\n\t/**\n\t * Returns the snapshotted checkpoint counts.\n\t *\n\t * @return Snapshotted checkpoint counts.\n\t */\n\tpublic CheckpointStatsCounts getCounts() {\n\t\treturn counts;\n\t}\n\n\t/**\n\t * Returns the snapshotted completed checkpoint summary stats.\n\t *\n\t * @return Snapshotted completed checkpoint summary stats.\n\t */\n\tpublic CompletedCheckpointStatsSummary getSummaryStats() {\n\t\treturn summary;\n\t}\n\n\t/**\n\t * Returns the snapshotted checkpoint history.\n\t *\n\t * @return Snapshotted checkpoint history.\n\t */\n\tpublic CheckpointStatsHistory getHistory() {\n\t\treturn history;\n\t}\n\n\t/**\n\t * Returns the latest restored checkpoint.\n\t *\n\t * @return Latest restored checkpoint or <code>null</code>.\n\t */\n\t@Nullable\n\tpublic RestoredCheckpointStats getLatestRestoredCheckpoint() {\n\t\treturn latestRestoredCheckpoint;\n\t}\n}<fim_middle>// class below has no smell\n"}