{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.apache.ivy.tools.analyser;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.ivy.core.IvyPatternHelper;\nimport org.apache.ivy.core.module.id.ModuleRevisionId;\nimport org.apache.ivy.plugins.resolver.util.FileURLLister;\nimport org.apache.ivy.plugins.resolver.util.ResolverHelper;\nimport org.apache.ivy.plugins.resolver.util.URLLister;\nimport org.apache.ivy.util.Message;\n\n<fim_suffix>public class JarModuleFinder {\n    private String pattern;\n\n    private String filePattern;\n\n    public JarModuleFinder(String pattern) {\n        this.pattern = \"file:///\" + pattern;\n        this.filePattern = pattern;\n    }\n\n    public JarModule[] findJarModules() {\n        List<JarModule> ret = new ArrayList<>();\n        URLLister lister = new FileURLLister();\n        try {\n            for (String org : ResolverHelper.listTokenValues(lister, pattern, \"organisation\")) {\n                String orgPattern = IvyPatternHelper.substituteToken(pattern,\n                        IvyPatternHelper.ORGANISATION_KEY, org);\n                for (String module : ResolverHelper.listTokenValues(lister, orgPattern, \"module\")) {\n                    String modPattern = IvyPatternHelper.substituteToken(orgPattern,\n                            IvyPatternHelper.MODULE_KEY, module);\n                    for (String rev : ResolverHelper.listTokenValues(lister, modPattern, \"revision\")) {\n                        File jar = new File(IvyPatternHelper.substitute(filePattern, org,\n                                module, rev, module, \"jar\", \"jar\"));\n                        if (jar.exists()) {\n                            ret.add(new JarModule(ModuleRevisionId.newInstance(org, module, rev), jar));\n                        }\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            Message.debug(e);\n            // TODO: handle exception\n        }\n        return ret.toArray(new JarModule[ret.size()]);\n    }\n\n    public static void main(String[] args) {\n        JarModule[] mods = new JarModuleFinder(\n                \"D:/temp/test2/ivyrep/[organisation]/[module]/[revision]/[artifact].[ext]\")\n                .findJarModules();\n        for (JarModule mod : mods) {\n            System.out.println(mod);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}