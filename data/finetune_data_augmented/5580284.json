{"text": "<fim_prefix>/* ====================================================================\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n==================================================================== */\npackage org.apache.poi.hwpf.model;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.apache.poi.util.Internal;\nimport org.apache.poi.util.POILogFactory;\nimport org.apache.poi.util.POILogger;\n\n<fim_suffix>@Internal\npublic class BookmarksTables\n{\n    private static final POILogger logger = POILogFactory\n            .getLogger( BookmarksTables.class );\n\n    private PlexOfCps descriptorsFirst = new PlexOfCps( 4 );\n\n    private PlexOfCps descriptorsLim = new PlexOfCps( 0 );\n\n    private List<String> names = new ArrayList<>(0);\n\n    public BookmarksTables( byte[] tableStream, FileInformationBlock fib )\n    {\n        read( tableStream, fib );\n    }\n\n    public void afterDelete( int startCp, int length )\n    {\n        descriptorsFirst.adjust( startCp, -length );\n        descriptorsLim.adjust( startCp, -length );\n        for ( int i = 0; i < descriptorsFirst.length(); i++ )\n        {\n            GenericPropertyNode startNode = descriptorsFirst.getProperty( i );\n            GenericPropertyNode endNode = descriptorsLim.getProperty( i );\n            if ( startNode.getStart() == endNode.getStart() )\n            {\n                logger.log( POILogger.DEBUG, \"Removing bookmark #\",\n                        Integer.valueOf( i ), \"...\" );\n                remove( i );\n                i--;\n                continue;\n            }\n        }\n    }\n\n    public void afterInsert( int startCp, int length )\n    {\n        descriptorsFirst.adjust( startCp, length );\n        descriptorsLim.adjust( startCp - 1, length );\n    }\n\n    public int getBookmarksCount()\n    {\n        return descriptorsFirst.length();\n    }\n\n    public GenericPropertyNode getDescriptorFirst( int index )\n            throws IndexOutOfBoundsException\n    {\n        return descriptorsFirst.getProperty( index );\n    }\n\n    public int getDescriptorFirstIndex( GenericPropertyNode descriptorFirst )\n    {\n        // TODO: very non-optimal\n        return Arrays.asList( descriptorsFirst.toPropertiesArray() ).indexOf(\n                descriptorFirst );\n    }\n\n    public GenericPropertyNode getDescriptorLim( int index )\n            throws IndexOutOfBoundsException\n    {\n        return descriptorsLim.getProperty( index );\n    }\n\n    public int getDescriptorsFirstCount()\n    {\n        return descriptorsFirst.length();\n    }\n\n    public int getDescriptorsLimCount()\n    {\n        return descriptorsLim.length();\n    }\n\n    public String getName( int index )\n    {\n        return names.get( index );\n    }\n\n    public int getNamesCount()\n    {\n        return names.size();\n    }\n\n    private void read( byte[] tableStream, FileInformationBlock fib )\n    {\n        int namesStart = fib.getFcSttbfbkmk();\n        int namesLength = fib.getLcbSttbfbkmk();\n\n        if ( namesStart != 0 && namesLength != 0 )\n            this.names = new ArrayList<>(Arrays.asList(SttbUtils\n                    .readSttbfBkmk(tableStream, namesStart)));\n\n        int firstDescriptorsStart = fib.getFcPlcfbkf();\n        int firstDescriptorsLength = fib.getLcbPlcfbkf();\n        if ( firstDescriptorsStart != 0 && firstDescriptorsLength != 0 )\n            descriptorsFirst = new PlexOfCps( tableStream,\n                    firstDescriptorsStart, firstDescriptorsLength,\n                    BookmarkFirstDescriptor.getSize() );\n\n        int limDescriptorsStart = fib.getFcPlcfbkl();\n        int limDescriptorsLength = fib.getLcbPlcfbkl();\n        if ( limDescriptorsStart != 0 && limDescriptorsLength != 0 )\n            descriptorsLim = new PlexOfCps( tableStream, limDescriptorsStart,\n                    limDescriptorsLength, 0 );\n    }\n\n    public void remove( int index )\n    {\n        descriptorsFirst.remove( index );\n        descriptorsLim.remove( index );\n        names.remove( index );\n    }\n\n    public void setName( int index, String name )\n    {\n        names.set( index, name );\n    }\n\n    public void writePlcfBkmkf( FileInformationBlock fib,\n            ByteArrayOutputStream tableStream ) throws IOException\n    {\n        if ( descriptorsFirst == null || descriptorsFirst.length() == 0 )\n        {\n            fib.setFcPlcfbkf( 0 );\n            fib.setLcbPlcfbkf( 0 );\n            return;\n        }\n\n        int start = tableStream.size();\n        tableStream.write( descriptorsFirst.toByteArray() );\n        int end = tableStream.size();\n\n        fib.setFcPlcfbkf( start );\n        fib.setLcbPlcfbkf( end - start );\n    }\n\n    public void writePlcfBkmkl( FileInformationBlock fib,\n            ByteArrayOutputStream tableStream ) throws IOException\n    {\n        if ( descriptorsLim == null || descriptorsLim.length() == 0 )\n        {\n            fib.setFcPlcfbkl( 0 );\n            fib.setLcbPlcfbkl( 0 );\n            return;\n        }\n\n        int start = tableStream.size();\n        tableStream.write( descriptorsLim.toByteArray() );\n        int end = tableStream.size();\n\n        fib.setFcPlcfbkl( start );\n        fib.setLcbPlcfbkl( end - start );\n    }\n\n    public void writeSttbfBkmk( FileInformationBlock fib,\n            ByteArrayOutputStream tableStream ) throws IOException\n    {\n        if ( names == null || names.isEmpty() )\n        {\n            fib.setFcSttbfbkmk( 0 );\n            fib.setLcbSttbfbkmk( 0 );\n            return;\n        }\n\n        int start = tableStream.size();\n        SttbUtils.writeSttbfBkmk( names.toArray( new String[names.size()] ),\n                tableStream );\n        int end = tableStream.size();\n\n        fib.setFcSttbfbkmk( start );\n        fib.setLcbSttbfbkmk( end - start );\n    }\n}<fim_middle>// class below is blob\n"}