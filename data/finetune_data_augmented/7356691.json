{"text": "<fim_prefix>// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See License.txt in the repository root.\n\npackage com.microsoft.tfs.client.clc.vc.commands;\n\nimport java.net.MalformedURLException;\nimport java.text.DateFormat;\nimport java.text.MessageFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\n\nimport com.microsoft.tfs.client.clc.AcceptedOptionSet;\nimport com.microsoft.tfs.client.clc.ExitCode;\nimport com.microsoft.tfs.client.clc.Messages;\nimport com.microsoft.tfs.client.clc.commands.Command;\nimport com.microsoft.tfs.client.clc.exceptions.ArgumentException;\nimport com.microsoft.tfs.client.clc.exceptions.CLCException;\nimport com.microsoft.tfs.client.clc.exceptions.InvalidFreeArgumentException;\nimport com.microsoft.tfs.client.clc.exceptions.LicenseException;\nimport com.microsoft.tfs.client.clc.options.Option;\nimport com.microsoft.tfs.client.clc.options.shared.OptionFormat;\nimport com.microsoft.tfs.client.clc.vc.options.OptionOwner;\nimport com.microsoft.tfs.client.clc.vc.printers.ShelvesetPrinter;\nimport com.microsoft.tfs.core.TFSTeamProjectCollection;\nimport com.microsoft.tfs.core.clients.versioncontrol.VersionControlClient;\nimport com.microsoft.tfs.core.clients.versioncontrol.VersionControlConstants;\nimport com.microsoft.tfs.core.clients.versioncontrol.soapextensions.Shelveset;\nimport com.microsoft.tfs.core.clients.versioncontrol.soapextensions.ShelvesetComparator;\nimport com.microsoft.tfs.core.clients.versioncontrol.soapextensions.Workspace;\nimport com.microsoft.tfs.core.clients.versioncontrol.specs.WorkspaceSpec;\nimport com.microsoft.tfs.core.exceptions.InputValidationException;\nimport com.microsoft.tfs.util.Check;\n\n<fim_suffix>public final class CommandShelvesets extends Command {\n    private static final String SHELVESETS_ELEMENT_NAME = \"shelvesets\"; //$NON-NLS-1$\n\n    /**\n     * The default long format for the current locale.\n     */\n    private final DateFormat defaultFormat = SimpleDateFormat.getDateTimeInstance();\n\n    public CommandShelvesets() {\n        super();\n    }\n\n    @Override\n    public void run()\n        throws ArgumentException,\n            MalformedURLException,\n            CLCException,\n            LicenseException,\n            InputValidationException {\n        if (getFreeArguments().length > 1) {\n            final String messageFormat =\n                Messages.getString(\"CommandShelvesets.CommandRequiresZeroOrOneShelvesetNamesFormat\"); //$NON-NLS-1$\n            final String message = MessageFormat.format(messageFormat, getCanonicalName());\n\n            throw new InvalidFreeArgumentException(message);\n        }\n\n        String ownerArg = null;\n        String format = OptionFormat.BRIEF;\n\n        Option o = null;\n\n        if ((o = findOptionType(OptionFormat.class)) != null) {\n            format = ((OptionFormat) o).getValue();\n        }\n\n        if ((o = findOptionType(OptionOwner.class)) != null) {\n            ownerArg = ((OptionOwner) o).getValue();\n        }\n\n        /*\n         * Pass an empty array of local paths because none of the free arguments\n         * is a local path for this command.\n         */\n        final TFSTeamProjectCollection connection = createConnection(new String[0]);\n        final VersionControlClient client = connection.getVersionControlClient();\n        initializeClient(client);\n        final Workspace workspace = realizeCachedWorkspace(determineCachedWorkspace(new String[0]), client);\n        Check.notNull(workspace, \"workspace\"); //$NON-NLS-1$\n\n        String shelvesetName = null;\n        String shelvesetOwner = null;\n\n        if (getFreeArguments().length == 1) {\n            final WorkspaceSpec spec =\n                WorkspaceSpec.parse(getFreeArguments()[0], VersionControlConstants.AUTHENTICATED_USER);\n\n            shelvesetName = spec.getName();\n            shelvesetOwner = spec.getOwner();\n\n            if (shelvesetName.equalsIgnoreCase(\"*\")) //$NON-NLS-1$\n            {\n                shelvesetName = null;\n            }\n        }\n\n        if (ownerArg != null) {\n            shelvesetOwner = ownerArg;\n        }\n\n        if (shelvesetOwner == null) {\n            shelvesetOwner = VersionControlConstants.AUTHENTICATED_USER;\n        } else if (shelvesetOwner.equalsIgnoreCase(\"*\")) //$NON-NLS-1$\n        {\n            shelvesetOwner = null;\n        }\n\n        final Shelveset[] shelvesets = client.queryShelvesets(shelvesetName, shelvesetOwner, null);\n\n        if (shelvesets.length == 0) {\n            final String displayOwner =\n                (shelvesetOwner != null && shelvesetOwner.equals(VersionControlConstants.AUTHENTICATED_USER))\n                    ? connection.getAuthorizedIdentity().getDisplayName()\n                    : ((shelvesetOwner == null) ? \"*\" : shelvesetOwner); //$NON-NLS-1$\n\n            final String displayShelvesetName = (shelvesetName == null) ? \"*\" : shelvesetName; //$NON-NLS-1$\n\n            final String shelvesetPattern = new WorkspaceSpec(displayShelvesetName, displayOwner).toString();\n\n            final String messageFormat = Messages.getString(\"CommandShelvesets.NoShelvesetsFoundMatchingFormat\"); //$NON-NLS-1$\n            final String message = MessageFormat.format(messageFormat, shelvesetPattern);\n\n            if (shelvesetName == null) {\n                getDisplay().printLine(message);\n                setExitCode(ExitCode.PARTIAL_SUCCESS);\n                return;\n            }\n\n            throw new InvalidFreeArgumentException(message);\n        }\n\n        Arrays.sort(shelvesets, ShelvesetComparator.INSTANCE);\n\n        if (OptionFormat.DETAILED.equalsIgnoreCase(format)) {\n            ShelvesetPrinter.printDetailedShelvesets(\n                shelvesets,\n                defaultFormat,\n                getDisplay(),\n                connection.getWorkItemClient());\n        } else if (OptionFormat.BRIEF.equalsIgnoreCase(format)) {\n            ShelvesetPrinter.printBriefShelvesets(shelvesets, getDisplay());\n        } else if (OptionFormat.XML.equalsIgnoreCase(format)) {\n            ShelvesetPrinter.printXMLShelvesets(shelvesets, SHELVESETS_ELEMENT_NAME, getDisplay());\n        } else {\n            final String messageFormat = Messages.getString(\"CommandShelvesets.UnsupportedOutputFormat\"); //$NON-NLS-1$\n            final String message = MessageFormat.format(messageFormat, format);\n\n            throw new RuntimeException(message);\n        }\n    }\n\n    @Override\n    public AcceptedOptionSet[] getSupportedOptionSets() {\n        final AcceptedOptionSet[] optionSets = new AcceptedOptionSet[1];\n        optionSets[0] = new AcceptedOptionSet(new Class[] {\n            OptionOwner.class,\n            OptionFormat.class\n        }, \"[<shelvesetName>]\"); //$NON-NLS-1$\n        return optionSets;\n    }\n\n    @Override\n    public String[] getCommandHelpText() {\n        return new String[] {\n            Messages.getString(\"CommandShelvesets.HelpText1\") //$NON-NLS-1$\n        };\n    }\n}<fim_middle>// class below is blob\n"}