{"text": "<fim_prefix>/**\n * Autogenerated by Thrift Compiler (0.9.3)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage org.apache.hadoop.hive.metastore.api;\nimport org.apache.thrift.scheme.IScheme;\nimport org.apache.thrift.scheme.SchemeFactory;\nimport org.apache.thrift.scheme.StandardScheme;\nimport org.apache.thrift.scheme.TupleScheme;\nimport org.apache.thrift.protocol.TTupleProtocol;\nimport org.apache.thrift.protocol.TProtocolException;\nimport org.apache.thrift.EncodingUtils;\nimport org.apache.thrift.TException;\nimport org.apache.thrift.async.AsyncMethodCallback;\nimport org.apache.thrift.server.AbstractNonblockingServer.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.EnumMap;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.EnumSet;\nimport java.util.Collections;\nimport java.util.BitSet;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\nimport javax.annotation.Generated;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})\n@Generated(value = \"Autogenerated by Thrift Compiler (0.9.3)\")\n@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class HeartbeatTxnRangeResponse implements org.apache.thrift.TBase<HeartbeatTxnRangeResponse, HeartbeatTxnRangeResponse._Fields>, java.io.Serializable, Cloneable, Comparable<HeartbeatTxnRangeResponse> {\n  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"HeartbeatTxnRangeResponse\");\n  private static final org.apache.thrift.protocol.TField ABORTED_FIELD_DESC = new org.apache.thrift.protocol.TField(\"aborted\", org.apache.thrift.protocol.TType.SET, (short)1);\n  private static final org.apache.thrift.protocol.TField NOSUCH_FIELD_DESC = new org.apache.thrift.protocol.TField(\"nosuch\", org.apache.thrift.protocol.TType.SET, (short)2);\n  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n  static {\n    schemes.put(StandardScheme.class, new HeartbeatTxnRangeResponseStandardSchemeFactory());\n    schemes.put(TupleScheme.class, new HeartbeatTxnRangeResponseTupleSchemeFactory());\n  }\n  private Set<Long> aborted; // required\n  private Set<Long> nosuch; // required\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n    ABORTED((short)1, \"aborted\"),\n    NOSUCH((short)2, \"nosuch\");\n    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n    static {\n      for (_Fields field : EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // ABORTED\n          return ABORTED;\n        case 2: // NOSUCH\n          return NOSUCH;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final String _fieldName;\n    _Fields(short thriftId, String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.ABORTED, new org.apache.thrift.meta_data.FieldMetaData(\"aborted\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, \n            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));\n    tmpMap.put(_Fields.NOSUCH, new org.apache.thrift.meta_data.FieldMetaData(\"nosuch\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, \n            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));\n    metaDataMap = Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HeartbeatTxnRangeResponse.class, metaDataMap);\n  }\n  public HeartbeatTxnRangeResponse() {\n  }\n  public HeartbeatTxnRangeResponse(\n    Set<Long> aborted,\n    Set<Long> nosuch)\n  {\n    this();\n    this.aborted = aborted;\n    this.nosuch = nosuch;\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public HeartbeatTxnRangeResponse(HeartbeatTxnRangeResponse other) {\n    if (other.isSetAborted()) {\n      Set<Long> __this__aborted = new HashSet<Long>(other.aborted);\n      this.aborted = __this__aborted;\n    }\n    if (other.isSetNosuch()) {\n      Set<Long> __this__nosuch = new HashSet<Long>(other.nosuch);\n      this.nosuch = __this__nosuch;\n    }\n  }\n  public HeartbeatTxnRangeResponse deepCopy() {\n    return new HeartbeatTxnRangeResponse(this);\n  }\n  @Override\n  public void clear() {\n    this.aborted = null;\n    this.nosuch = null;\n  }\n  public int getAbortedSize() {\n    return (this.aborted == null) ? 0 : this.aborted.size();\n  }\n  public java.util.Iterator<Long> getAbortedIterator() {\n    return (this.aborted == null) ? null : this.aborted.iterator();\n  }\n<fim_suffix>  public void addToAborted(long elem) {\n    if (this.aborted == null) {\n      this.aborted = new HashSet<Long>();\n    }\n    this.aborted.add(elem);\n  }\n  public Set<Long> getAborted() {\n    return this.aborted;\n  }\n  public void setAborted(Set<Long> aborted) {\n    this.aborted = aborted;\n  }\n  public void unsetAborted() {\n    this.aborted = null;\n  }\n  /** Returns true if field aborted is set (has been assigned a value) and false otherwise */\n  public boolean isSetAborted() {\n    return this.aborted != null;\n  }\n  public void setAbortedIsSet(boolean value) {\n    if (!value) {\n      this.aborted = null;\n    }\n  }\n  public int getNosuchSize() {\n    return (this.nosuch == null) ? 0 : this.nosuch.size();\n  }\n  public java.util.Iterator<Long> getNosuchIterator() {\n    return (this.nosuch == null) ? null : this.nosuch.iterator();\n  }\n  public void addToNosuch(long elem) {\n    if (this.nosuch == null) {\n      this.nosuch = new HashSet<Long>();\n    }\n    this.nosuch.add(elem);\n  }\n  public Set<Long> getNosuch() {\n    return this.nosuch;\n  }\n  public void setNosuch(Set<Long> nosuch) {\n    this.nosuch = nosuch;<fim_middle>// function below has no smell\n"}