{"text": "<fim_prefix> * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights \n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n * copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included \n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n ******************************************************************************/\npackage com.microsoft.azure.oidc.token.impl;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.commons.codec.binary.Base64;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.microsoft.azure.oidc.common.algorithm.Algorithm;\nimport com.microsoft.azure.oidc.common.algorithm.AlgorithmFactory;\nimport com.microsoft.azure.oidc.common.algorithm.impl.SimpleAlgorithmFactory;\nimport com.microsoft.azure.oidc.common.id.ID;\nimport com.microsoft.azure.oidc.common.id.IDFactory;\nimport com.microsoft.azure.oidc.common.id.impl.SimpleIDFactory;\nimport com.microsoft.azure.oidc.common.issuer.Issuer;\nimport com.microsoft.azure.oidc.common.issuer.IssuerFactory;\nimport com.microsoft.azure.oidc.common.issuer.impl.SimpleIssuerFactory;\nimport com.microsoft.azure.oidc.common.name.Name;\nimport com.microsoft.azure.oidc.common.name.NameFactory;\nimport com.microsoft.azure.oidc.common.name.impl.SimpleNameFactory;\nimport com.microsoft.azure.oidc.common.timestamp.TimeStamp;\nimport com.microsoft.azure.oidc.common.timestamp.TimeStampFactory;\nimport com.microsoft.azure.oidc.common.timestamp.impl.SimpleTimeStampFactory;\nimport com.microsoft.azure.oidc.exception.GeneralException;\nimport com.microsoft.azure.oidc.exception.PreconditionException;\nimport com.microsoft.azure.oidc.token.Token;\nimport com.microsoft.azure.oidc.token.TokenFactory;\nimport com.microsoft.azure.oidc.token.TokenParser;\nimport com.microsoft.azure.oidc.token.email.Email;\nimport com.microsoft.azure.oidc.token.email.EmailFactory;\nimport com.microsoft.azure.oidc.token.email.impl.SimpleEmailFactory;\nimport com.microsoft.azure.oidc.token.payload.Payload;\nimport com.microsoft.azure.oidc.token.payload.PayloadFactory;\nimport com.microsoft.azure.oidc.token.payload.impl.SimplePayloadFactory;\nimport com.microsoft.azure.oidc.token.signature.Signature;\nimport com.microsoft.azure.oidc.token.signature.SignatureFactory;\nimport com.microsoft.azure.oidc.token.signature.impl.SimpleSignatureFactory;\n<fim_suffix>public final class SimpeTokenParser implements TokenParser {\n\tprivate static final TokenParser INSTANCE = new SimpeTokenParser();\n\tprivate final SignatureFactory signatureFactory = SimpleSignatureFactory.getInstance();\n\tprivate final TokenFactory tokenFactory = SimpleTokenFactory.getInstance();\n\tprivate final TimeStampFactory timeStampFactory = SimpleTimeStampFactory.getInstance();\n\tprivate final IssuerFactory issuerFactory = SimpleIssuerFactory.getInstance();\n\tprivate final IDFactory iDFactory = SimpleIDFactory.getInstance();\n\tprivate final NameFactory nameFactory = SimpleNameFactory.getInstance();\n\tprivate final AlgorithmFactory algorithmFactory = SimpleAlgorithmFactory.getInstanc();\n\tprivate final PayloadFactory payloadFactory = SimplePayloadFactory.getInstance();\n\tprivate final EmailFactory emailFactory = SimpleEmailFactory.getInstance();\n\t@Override\n\tpublic Token getToken(String value) {\n\t\tfinal String[] parts = value.split(\"\\\\.\");\n\t\tif (parts.length != 3) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\tString.format(\"Incorrect number of parts: Expected 3 got %s\", parts.length));\n\t\t}\n\t\tfinal JsonNode header = parsePart(decodePart(parts[0]));\n\t\tfinal JsonNode body = parsePart(decodePart(parts[1]));\n\t\tfinal Name keyName = getKeyName(header);\n\t\tfinal Algorithm algorithm = getAlgorithm(header);\n\t\tfinal TimeStamp issuedAt = getIssuedAt(body);\n\t\tfinal TimeStamp notBefore = getNotBefore(body);\n\t\tfinal TimeStamp expiration = getExpiration(body);\n\t\tfinal Issuer issuer = getIssuer(body);\n\t\tfinal ID audience = getAudience(body);\n\t\tfinal ID userID = getUserID(body);\n\t\tfinal List<Email> userEmails = getEmails(body);\n\t\tfinal Payload payload = getPayload(parts[0], parts[1]);\n\t\tfinal Signature signature = getSignature(parts[2]);\n\t\treturn tokenFactory.createToken(keyName, algorithm, issuedAt, notBefore, expiration, userID, userEmails, issuer,\n\t\t\t\taudience, payload, signature);\n\t}\n\tprivate ID getUserID(final JsonNode node) {\n\t\tfinal String value = node.has(\"oid\") ? node.get(\"oid\").asText() : null;\n\t\treturn iDFactory.createID(value);\n\t}\n\tprivate List<Email> getEmails(final JsonNode node) {\n\t\tfinal List<Email> emails = new ArrayList<Email>();\n\t\tfor (final JsonNode n : node.get(\"emails\")) {\n\t\t\temails.add(emailFactory.createEmail(n.asText()));\n\t\t}\n\t\treturn emails;\n\t}\n\tprivate Payload getPayload(final String header, final String body) {\n\t\treturn payloadFactory.createPayload(header, body);\n\t}\n\tprivate Algorithm getAlgorithm(final JsonNode node) {\n\t\tfinal String value = node.has(\"alg\") ? node.get(\"alg\").asText() : null;\n\t\treturn algorithmFactory.createAlgorithm(value);\n\t}\n\tprivate Name getKeyName(final JsonNode node) {\n\t\tfinal String value = node.has(\"kid\") ? node.get(\"kid\").asText() : null;\n\t\treturn nameFactory.createKeyName(value);\n\t}\n\tprivate ID getAudience(final JsonNode node) {\n\t\tfinal String value = node.has(\"aud\") ? node.get(\"aud\").asText() : null;\n\t\treturn iDFactory.createID(value);\n\t}\n\tprivate Issuer getIssuer(final JsonNode node) {\n\t\tfinal String value = node.has(\"iss\") ? node.get(\"iss\").asText() : null;\n\t\treturn issuerFactory.createIssuer(value);\n\t}\n\tprivate TimeStamp getExpiration(final JsonNode node) {\n\t\tfinal Long time = node.has(\"exp\") ? node.get(\"exp\").asLong() : Long.MAX_VALUE;\n\t\treturn timeStampFactory.createTimeStamp(time);\n\t}\n\tprivate TimeStamp getNotBefore(final JsonNode node) {\n\t\tfinal Long time = node.has(\"nbf\") ? node.get(\"nbf\").asLong() : 0;\n\t\treturn timeStampFactory.createTimeStamp(time);\n\t}\n\tprivate TimeStamp getIssuedAt(final JsonNode node) {\n\t\tfinal Long time = node.has(\"iat\") ? node.get(\"iat\").asLong() : 0;\n\t\treturn timeStampFactory.createTimeStamp(time);\n\t}\n\tprivate Signature getSignature(final String value) {\n\t\treturn signatureFactory.createSignature(value);\n\t}\n\tprivate String decodePart(final String part) {\n\t\tif (part == null) {\n\t\t\tthrow new PreconditionException(\"Required parameter is null\");\n\t\t}\n\t\ttry {\n\t\t\tfinal Base64 decoder = new Base64();\n\t\t\treturn new String(decoder.decode(part), \"UTF-8\");\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tthrow new GeneralException(\"Unsupported Encoding Exception\", e);\n\t\t}\n\t}\n\tprivate JsonNode parsePart(final String part) {\n\t\tif (part == null) {\n\t\t\tthrow new PreconditionException(\"Required parameter is null\");\n\t\t}\n\t\ttry {\n\t\t\tfinal ObjectMapper mapper = new ObjectMapper();\n\t\t\treturn mapper.readValue(part, JsonNode.class);\n\t\t} catch (IOException e) {\n\t\t\tthrow new GeneralException(\"IO Exception\", e);\n\t\t}\n\t}\n\tpublic static TokenParser getInstance() {\n\t\treturn INSTANCE;\n\t}\n}<fim_middle>// class below has no smell\n"}