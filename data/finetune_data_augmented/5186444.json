{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.metron.elasticsearch.client;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.invoke.MethodHandles;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.CertificateException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Optional;\nimport javax.net.ssl.SSLContext;\nimport org.apache.http.HttpHost;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.impl.client.BasicCredentialsProvider;\nimport org.apache.http.impl.nio.reactor.IOReactorConfig;\nimport org.apache.http.ssl.SSLContextBuilder;\nimport org.apache.http.ssl.SSLContexts;\nimport org.apache.metron.elasticsearch.config.ElasticsearchClientConfig;\nimport org.apache.metron.elasticsearch.utils.ElasticsearchUtils;\nimport org.apache.metron.elasticsearch.utils.ElasticsearchUtils.HostnamePort;\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestClientBuilder;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Main entry point to create the ES client.\n */\n<fim_suffix>public class ElasticsearchClientFactory {\n\n  private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n  private static final String ES_SETTINGS_KEY = \"es.client.settings\"; // es config key in global config\n\n  /**\n   * Creates an Elasticsearch client from settings provided via the global config.\n   *\n   * @return new client\n   */\n  public static ElasticsearchClient create(Map<String, Object> globalConfig) {\n    ElasticsearchClientConfig esClientConfig = new ElasticsearchClientConfig(\n        getEsSettings(globalConfig));\n    HttpHost[] httpHosts = getHttpHosts(globalConfig, esClientConfig.getConnectionScheme());\n    RestClientBuilder builder = RestClient.builder(httpHosts);\n\n    builder.setRequestConfigCallback(reqConfigBuilder -> {\n      // Modifies request config builder with connection and socket timeouts.\n      // https://www.elastic.co/guide/en/elasticsearch/client/java-rest/5.6/_timeouts.html\n      reqConfigBuilder.setConnectTimeout(esClientConfig.getConnectTimeoutMillis());\n      reqConfigBuilder.setSocketTimeout(esClientConfig.getSocketTimeoutMillis());\n      return reqConfigBuilder;\n    });\n    builder.setMaxRetryTimeoutMillis(esClientConfig.getMaxRetryTimeoutMillis());\n\n    builder.setHttpClientConfigCallback(clientBuilder -> {\n      clientBuilder.setDefaultIOReactorConfig(getIOReactorConfig(esClientConfig));\n      clientBuilder.setDefaultCredentialsProvider(getCredentialsProvider(esClientConfig));\n      clientBuilder.setSSLContext(getSSLContext(esClientConfig));\n      return clientBuilder;\n    });\n\n    RestClient lowLevelClient = builder.build();\n    RestHighLevelClient client = new RestHighLevelClient(lowLevelClient);\n    return new ElasticsearchClient(lowLevelClient, client);\n  }\n\n  private static Map<String, Object> getEsSettings(Map<String, Object> globalConfig) {\n    return (Map<String, Object>) globalConfig.getOrDefault(ES_SETTINGS_KEY, new HashMap<>());\n  }\n\n  private static HttpHost[] getHttpHosts(Map<String, Object> globalConfiguration, String scheme) {\n    List<HostnamePort> hps = ElasticsearchUtils.getIps(globalConfiguration);\n    HttpHost[] httpHosts = new HttpHost[hps.size()];\n    int i = 0;\n    for (HostnamePort hp : hps) {\n      httpHosts[i++] = new HttpHost(hp.hostname, hp.port, scheme);\n    }\n    return httpHosts;\n  }\n\n  /**\n   * Creates config with setting for num connection threads. Default is ES client default,\n   * which is 1 to num processors per the documentation.\n   * https://www.elastic.co/guide/en/elasticsearch/client/java-rest/5.6/_number_of_threads.html\n   */\n  private static IOReactorConfig getIOReactorConfig(ElasticsearchClientConfig esClientConfig) {\n    if (esClientConfig.getNumClientConnectionThreads().isPresent()) {\n      Integer numThreads = esClientConfig.getNumClientConnectionThreads().get();\n      LOG.info(\"Setting number of client connection threads: {}\", numThreads);\n      return IOReactorConfig.custom().setIoThreadCount(numThreads).build();\n    } else {\n      return IOReactorConfig.DEFAULT;\n    }\n  }\n\n  private static CredentialsProvider getCredentialsProvider(\n      ElasticsearchClientConfig esClientConfig) {\n    Optional<Entry<String, String>> credentials = esClientConfig.getCredentials();\n    if (credentials.isPresent()) {\n      LOG.info(\n          \"Found auth credentials - setting up user/pass authenticated client connection for ES.\");\n      final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n      UsernamePasswordCredentials upcredentials = new UsernamePasswordCredentials(\n          credentials.get().getKey(), credentials.get().getValue());\n      credentialsProvider.setCredentials(AuthScope.ANY, upcredentials);\n      return credentialsProvider;\n    } else {\n      LOG.info(\n          \"Elasticsearch client credentials not provided. Defaulting to non-authenticated client connection.\");\n      return null;\n    }\n  }\n\n  /**\n   * <p>Setup connection encryption details (SSL) if applicable.\n   * If ssl.enabled=true, sets up SSL connection. If enabled, keystore.path is required. User can\n   * also optionally set keystore.password and keystore.type.\n   * https://www.elastic.co/guide/en/elasticsearch/client/java-rest/5.6/_encrypted_communication.html\n   * <p>\n   * <p>Other guidance on the HTTP Component library and configuring SSL connections.\n   * http://www.robinhowlett.com/blog/2016/01/05/everything-you-ever-wanted-to-know-about-ssl-but-were-afraid-to-ask.\n   * <p>\n   * <p>JSSE docs - https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html\n   * <p>\n   * <p>Additional guidance for configuring Elasticsearch for SSL can be found here - https://www.elastic.co/guide/en/x-pack/5.6/ssl-tls.html\n   */\n  private static SSLContext getSSLContext(ElasticsearchClientConfig esClientConfig) {\n    if (esClientConfig.isSSLEnabled()) {\n      LOG.info(\"Configuring client for SSL connection.\");\n      if (!esClientConfig.getKeyStorePath().isPresent()) {\n        throw new IllegalStateException(\"KeyStore path must be provided for SSL connection.\");\n      }\n      Optional<String> optKeyStorePass = esClientConfig.getKeyStorePassword();\n      char[] keyStorePass = optKeyStorePass.map(String::toCharArray).orElse(null);\n      KeyStore trustStore = getStore(esClientConfig.getKeyStoreType(),\n          esClientConfig.getKeyStorePath().get(), keyStorePass);\n      try {\n        SSLContextBuilder sslBuilder = SSLContexts.custom().loadTrustMaterial(trustStore, null);\n        return sslBuilder.build();\n      } catch (NoSuchAlgorithmException | KeyStoreException | KeyManagementException e) {\n        throw new IllegalStateException(\"Unable to load truststore.\", e);\n      }\n    }\n    return null;\n  }\n\n  private static KeyStore getStore(String type, Path path, char[] pass) {\n    KeyStore store;\n    try {\n      store = KeyStore.getInstance(type);\n    } catch (KeyStoreException e) {\n      throw new IllegalStateException(\"Unable to get keystore type '\" + type + \"'\", e);\n    }\n    try (InputStream is = Files.newInputStream(path)) {\n      store.load(is, pass);\n    } catch (IOException | NoSuchAlgorithmException | CertificateException e) {\n      throw new IllegalStateException(\"Unable to load keystore from path '\" + path + \"'\", e);\n    }\n    return store;\n  }\n\n}<fim_middle>// class below is blob\n"}