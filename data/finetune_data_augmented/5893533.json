{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.usergrid.persistence.qakka.distributed.impl;\n\nimport akka.actor.ActorSystem;\nimport akka.actor.PoisonPill;\nimport akka.actor.Props;\nimport akka.cluster.singleton.ClusterSingletonManager;\nimport akka.cluster.singleton.ClusterSingletonManagerSettings;\nimport akka.cluster.singleton.ClusterSingletonProxy;\nimport akka.cluster.singleton.ClusterSingletonProxySettings;\nimport com.google.inject.Inject;\nimport com.google.inject.Injector;\nimport com.google.inject.Singleton;\nimport org.apache.usergrid.persistence.actorsystem.ActorSystemManager;\nimport org.apache.usergrid.persistence.actorsystem.GuiceActorProducer;\nimport org.apache.usergrid.persistence.actorsystem.RouterProducer;\nimport org.apache.usergrid.persistence.qakka.QakkaFig;\nimport org.apache.usergrid.persistence.qakka.distributed.actors.QueueActorRouter;\nimport org.apache.usergrid.persistence.qakka.distributed.messages.*;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\n\n@Singleton\npublic class QueueActorRouterProducer implements RouterProducer {\n\n    static Injector injector;\n    ActorSystemManager actorSystemManager;\n    QakkaFig qakkaFig;\n\n\n    @Inject\n    public QueueActorRouterProducer(\n            Injector injector,\n            ActorSystemManager actorSystemManager,\n            QakkaFig qakkaFig) {\n\n        this.injector = injector;\n        this.actorSystemManager = actorSystemManager;\n        this.qakkaFig = qakkaFig;\n    }\n\n\n    @Override\n    public String getRouterPath() {\n        return \"/user/queueActorRouterProxy\";\n    }\n\n\n    @Override\n    public void produceRouter(ActorSystem system, String role) {\n\n        ClusterSingletonManagerSettings settings =\n                ClusterSingletonManagerSettings.create( system ).withRole( \"io\" );\n\n        system.actorOf( ClusterSingletonManager.props(\n                Props.create( GuiceActorProducer.class, QueueActorRouter.class ),\n                PoisonPill.getInstance(), settings ), \"queueActorRouter\" );\n\n        ClusterSingletonProxySettings proxySettings =\n                ClusterSingletonProxySettings.create( system ).withRole( role );\n\n        system.actorOf(\n                ClusterSingletonProxy.props( \"/user/queueActorRouter\", proxySettings ), \"queueActorRouterProxy\" );\n    }\n\n\n    @Override\n    public void addConfiguration(Map<String, Object> configMap) {\n\n        int numInstancesPerNode = qakkaFig.getNumQueueActors();\n\n        Map<String, Object> akka = (Map<String, Object>) configMap.get( \"akka\" );\n        final Map<String, Object> deploymentMap;\n\n        if ( akka.get( \"actor\" ) == null ) {\n            deploymentMap = new HashMap<>();\n            akka.put( \"actor\", new HashMap<String, Object>() {{\n                put( \"deployment\", deploymentMap );\n            }} );\n\n        } else if (((Map) akka.get( \"actor\" )).get( \"deployment\" ) == null) {\n            deploymentMap = new HashMap<>();\n            ((Map) akka.get( \"actor\" )).put( \"deployment\", deploymentMap );\n\n        } else {\n            deploymentMap = (Map<String, Object>) ((Map) akka.get( \"actor\" )).get( \"deployment\" );\n        }\n\n        deploymentMap.put( \"/queueActorRouter/singleton/router\", new HashMap<String, Object>() {{\n            put( \"router\", \"consistent-hashing-pool\" );\n            put( \"cluster\", new HashMap<String, Object>() {{\n                put( \"enabled\", \"on\" );\n                put( \"allow-local-routees\", \"on\" );\n                put( \"use-role\", \"io\" );\n                put( \"max-nr-of-instances-per-node\", numInstancesPerNode );\n                put( \"failure-detector\", new HashMap<String, Object>() {{\n                    put( \"threshold\", \"10\" );\n                    put( \"acceptable-heartbeat-pause\", \"3 s\" );\n                    put( \"heartbeat-interval\", \"1 s\" );\n                    put( \"heartbeat-request\", new HashMap<String, Object>() {{\n                        put( \"expected-response-after\", \"3 s\" );\n                    }} );\n                }} );\n            }} );\n        }} );\n\n    }\n\n\n<fim_suffix>    @Override\n    public Collection<Class> getMessageTypes() {\n        return new ArrayList() {{\n            add( QueueGetRequest.class );\n            add( QueueInitRequest.class );\n            add( QueueRefreshRequest.class );\n            add( QueueTimeoutRequest.class );\n            add( ShardCheckRequest.class );\n        }};\n    }\n}<fim_middle>// function below has no smell\n"}