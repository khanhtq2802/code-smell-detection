{"text": "<fim_prefix>/**\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License. \n *  \n */\npackage org.apache.kerby.kerberos.kerb.type.ad;\n\nimport java.io.IOException;\n\nimport org.apache.kerby.asn1.Asn1Dumper;\nimport org.apache.kerby.asn1.Asn1FieldInfo;\nimport org.apache.kerby.asn1.EnumType;\nimport org.apache.kerby.asn1.ExplicitField;\nimport org.apache.kerby.kerberos.kerb.type.KerberosStrings;\nimport org.apache.kerby.kerberos.kerb.type.KrbSequenceType;\n\n/**\n * Asn1 Class for the \"intended for application class\" authorization type.\n *\n * RFC 4120\n * \n * AD-INTENDED-FOR-APPLICATION-CLASS SEQUENCE { intended-application-class[0]\n * SEQUENCE OF GeneralString elements[1] AuthorizationData } AD elements\n * \n * encapsulated within the intended-for-application-class element may be ignored\n * if the application server is not in one of the named classes of application\n * servers. Examples of application server classes include \"FILESYSTEM\", and\n * other kinds of servers.\n * \n * This element and the elements it encapsulates may be safely ignored by\n * applications, application servers, and KDCs that do not implement this\n * element.\n * \n * Contributed to the Apache Kerby Project by: Prodentity - Corrales, NM\n * \n * @author <a href=\"mailto:dev@directory.apache.org\">Apache DirectoryProject</a>\n */\npublic class ADIntendedForApplicationClass extends AuthorizationDataEntry {\n\n    private IntendedForApplicationClass myIntForAppClass;\n\n    private static class IntendedForApplicationClass extends KrbSequenceType {\n\n        private AuthorizationData authzData;\n\n        /**\n         * The possible fields\n         */\n        protected enum IntendedForApplicationClassField implements EnumType {\n            IFAC_intendedAppClass, IFAC_elements;\n\n            /**\n             * {@inheritDoc}\n             */\n            @Override\n            public int getValue() {\n                return ordinal();\n            }\n\n            /**\n             * {@inheritDoc}\n             */\n            @Override\n            public String getName() {\n                return name();\n            }\n        }\n\n        /** The IntendedForApplicationClass's fields */\n        private static Asn1FieldInfo[] fieldInfos = new Asn1FieldInfo[] {\n                new ExplicitField(IntendedForApplicationClassField.IFAC_intendedAppClass, KerberosStrings.class),\n                new ExplicitField(IntendedForApplicationClassField.IFAC_elements, AuthorizationData.class)};\n\n        /**\n         * Creates an IntendedForApplicationClass instance\n         */\n        IntendedForApplicationClass() {\n            super(fieldInfos);\n        }\n\n        /**\n         * Creates an IntendedForApplicationClass instance\n         */\n        IntendedForApplicationClass(KerberosStrings intendedAppClass) {\n            super(fieldInfos);\n            setFieldAs(IntendedForApplicationClassField.IFAC_intendedAppClass, intendedAppClass);\n        }\n\n        public KerberosStrings getIntendedForApplicationClass() {\n            return getFieldAs(IntendedForApplicationClassField.IFAC_intendedAppClass, KerberosStrings.class);\n        }\n\n        /**\n         * Sets the Intended Application Class value.\n         */\n        public void setIntendedForApplicationClass(KerberosStrings intendedAppClass) {\n            setFieldAs(IntendedForApplicationClassField.IFAC_intendedAppClass, intendedAppClass);\n            resetBodyLength();\n        }\n\n<fim_suffix>        public AuthorizationData getAuthzData() {\n            if (authzData == null) {\n                authzData = getFieldAs(IntendedForApplicationClassField.IFAC_elements, AuthorizationData.class);\n            }\n            return authzData;\n        }\n\n        public void setAuthzData(AuthorizationData authzData) {\n            this.authzData = authzData;\n            setFieldAs(IntendedForApplicationClassField.IFAC_elements, authzData);\n            resetBodyLength();\n        }\n    }\n\n    public ADIntendedForApplicationClass() {\n        super(AuthorizationType.AD_INTENDED_FOR_APPLICATION_CLASS);\n        myIntForAppClass = new IntendedForApplicationClass();\n        myIntForAppClass.outerEncodeable = this;\n    }\n\n    public ADIntendedForApplicationClass(byte[] encoded) throws IOException {\n        this();\n        myIntForAppClass.decode(encoded);\n    }\n\n    public ADIntendedForApplicationClass(KerberosStrings intendedAppClass) throws IOException {\n        this();\n        myIntForAppClass.setIntendedForApplicationClass(intendedAppClass);\n    }\n\n    public KerberosStrings getIntendedForApplicationClass() {\n        return myIntForAppClass.getIntendedForApplicationClass();\n    }\n\n    /**\n     * Sets the Intended Application Class value.\n     */\n    public void setIntendedForApplicationClass(KerberosStrings intendedAppClass) {\n        myIntForAppClass.setIntendedForApplicationClass(intendedAppClass);\n    }\n\n    public AuthorizationData getAuthorizationData() {\n        return myIntForAppClass.getAuthzData();\n    }\n\n    public void setAuthorizationData(AuthorizationData authzData) {\n        myIntForAppClass.setAuthzData(authzData);\n    }\n\n    @Override\n    protected int encodingBodyLength() throws IOException {\n        if (bodyLength == -1) {\n            setAuthzData(myIntForAppClass.encode());\n            bodyLength = super.encodingBodyLength();\n        }\n        return bodyLength;\n    };\n\n    @Override\n    public void dumpWith(Asn1Dumper dumper, int indents) {\n        super.dumpWith(dumper, indents);\n        dumper.newLine();\n        myIntForAppClass.dumpWith(dumper, indents + 8);\n    }\n}<fim_middle>// function below has no smell\n"}