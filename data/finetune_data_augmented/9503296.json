{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with this\n * work for additional information regarding copyright ownership.  The ASF\n * licenses this file to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n *\n */\n\npackage org.apache.hadoop.hdds.scm.node.states;\n\nimport org.apache.hadoop.hdds.protocol.DatanodeDetails;\nimport org.apache.hadoop.hdds.scm.pipeline.Pipeline;\nimport org.apache.hadoop.hdds.scm.pipeline.PipelineID;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.UUID;\n\n/**\n * This data structure maintains the list of pipelines which the given\n * datanode is a part of. This information will be added whenever a new\n * pipeline allocation happens.\n *\n * <p>TODO: this information needs to be regenerated from pipeline reports\n * on SCM restart\n */\npublic class Node2PipelineMap extends Node2ObjectsMap<PipelineID> {\n\n  /** Constructs a Node2PipelineMap Object. */\n  public Node2PipelineMap() {\n    super();\n  }\n\n  /**\n   * Returns null if there no pipelines associated with this datanode ID.\n   *\n   * @param datanode - UUID\n   * @return Set of pipelines or Null.\n   */\n  public Set<PipelineID> getPipelines(UUID datanode) {\n    return getObjects(datanode);\n  }\n\n  /**\n   * Adds a pipeline entry to a given dataNode in the map.\n   *\n   * @param pipeline Pipeline to be added\n   */\n  public synchronized void addPipeline(Pipeline pipeline) {\n    for (DatanodeDetails details : pipeline.getNodes()) {\n      UUID dnId = details.getUuid();\n      dn2ObjectMap.computeIfAbsent(dnId, k -> new HashSet<>())\n          .add(pipeline.getId());\n    }\n  }\n\n<fim_suffix>  public synchronized void removePipeline(Pipeline pipeline) {\n    for (DatanodeDetails details : pipeline.getNodes()) {\n      UUID dnId = details.getUuid();\n      dn2ObjectMap.computeIfPresent(dnId,\n          (k, v) -> {\n            v.remove(pipeline.getId());\n            return v;\n          });\n    }\n  }\n}<fim_middle>// function below has no smell\n"}