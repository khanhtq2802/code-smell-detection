{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\npackage org.codehaus.groovy.runtime.typehandling;\n\n/**\n * Integer NumberMath operations\n */\n<fim_suffix>public final class IntegerMath extends NumberMath {\n\n    public static final IntegerMath INSTANCE = new IntegerMath();\n\n    private IntegerMath() {}\n                    \n    protected Number absImpl(Number number) {\n        return Math.abs(number.intValue());\n    }\n    \n    public Number addImpl(Number left, Number right) {\n        return left.intValue() + right.intValue();\n    }\n\n    public Number subtractImpl(Number left, Number right) {\n        return left.intValue() - right.intValue();\n    }\n\n    public Number multiplyImpl(Number left, Number right) {\n        return left.intValue() * right.intValue();\n    }\n\n    public Number divideImpl(Number left, Number right) {\n        return BigDecimalMath.INSTANCE.divideImpl(left, right);\n    }\n    \n    public int compareToImpl(Number left, Number right) {\n        int leftVal = left.intValue();\n        int rightVal = right.intValue();\n        return Integer.compare(leftVal, rightVal);\n    }\n\n    protected Number orImpl(Number left, Number right) {\n        return left.intValue() | right.intValue();\n    }\n\n    protected Number andImpl(Number left, Number right) {\n        return left.intValue() & right.intValue();\n    }\n\n    protected Number xorImpl(Number left, Number right) {\n        return left.intValue() ^ right.intValue();\n    }\n\n    protected Number intdivImpl(Number left, Number right) {\n        return left.intValue() / right.intValue();\n    }\n    \n    protected Number modImpl(Number left, Number right) {\n        return left.intValue() % right.intValue();\n    }\n\n    protected Number unaryMinusImpl(Number left) {\n        return -left.intValue();\n    }\n\n    protected Number unaryPlusImpl(Number left) {\n        return left.intValue();\n    }\n\n    protected Number bitwiseNegateImpl(Number left) {\n        return ~left.intValue();\n    }\n\n    protected Number leftShiftImpl(Number left, Number right) {\n        return left.intValue() << right.intValue();\n    }\n\n    protected Number rightShiftImpl(Number left, Number right) {\n        return left.intValue() >> right.intValue();\n    }\n\n    protected Number rightShiftUnsignedImpl(Number left, Number right) {\n        return left.intValue() >>> right.intValue();\n    }\n}<fim_middle>// class below has no smell\n"}