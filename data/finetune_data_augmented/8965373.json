{"text": "<fim_prefix>  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.OBJECT_TYPE_PTR, new org.apache.thrift.meta_data.FieldMetaData(\"objectTypePtr\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , \"TTypeEntryPtr\")));\n    metaDataMap = Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TArrayTypeEntry.class, metaDataMap);\n  }\n  public TArrayTypeEntry() {\n  }\n  public TArrayTypeEntry(\n    int objectTypePtr)\n  {\n    this();\n    this.objectTypePtr = objectTypePtr;\n    setObjectTypePtrIsSet(true);\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public TArrayTypeEntry(TArrayTypeEntry other) {\n    __isset_bitfield = other.__isset_bitfield;\n    this.objectTypePtr = other.objectTypePtr;\n  }\n  public TArrayTypeEntry deepCopy() {\n    return new TArrayTypeEntry(this);\n  }\n  @Override\n  public void clear() {\n    setObjectTypePtrIsSet(false);\n    this.objectTypePtr = 0;\n  }\n  public int getObjectTypePtr() {\n    return this.objectTypePtr;\n  }\n  public void setObjectTypePtr(int objectTypePtr) {\n    this.objectTypePtr = objectTypePtr;\n    setObjectTypePtrIsSet(true);\n  }\n  public void unsetObjectTypePtr() {\n    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJECTTYPEPTR_ISSET_ID);\n  }\n  /** Returns true if field objectTypePtr is set (has been assigned a value) and false otherwise */\n  public boolean isSetObjectTypePtr() {\n    return EncodingUtils.testBit(__isset_bitfield, __OBJECTTYPEPTR_ISSET_ID);\n  }\n  public void setObjectTypePtrIsSet(boolean value) {\n    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJECTTYPEPTR_ISSET_ID, value);\n  }\n  public void setFieldValue(_Fields field, Object value) {\n    switch (field) {\n    case OBJECT_TYPE_PTR:\n      if (value == null) {\n        unsetObjectTypePtr();\n      } else {\n        setObjectTypePtr((Integer)value);\n      }\n      break;\n    }\n  }\n  public Object getFieldValue(_Fields field) {\n    switch (field) {\n    case OBJECT_TYPE_PTR:\n      return getObjectTypePtr();\n    }\n    throw new IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new IllegalArgumentException();\n    }\n    switch (field) {\n    case OBJECT_TYPE_PTR:\n      return isSetObjectTypePtr();\n    }\n    throw new IllegalStateException();\n  }\n  @Override\n  public boolean equals(Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof TArrayTypeEntry)\n      return this.equals((TArrayTypeEntry)that);\n    return false;\n  }\n  public boolean equals(TArrayTypeEntry that) {\n    if (that == null)\n      return false;\n    boolean this_present_objectTypePtr = true;\n    boolean that_present_objectTypePtr = true;\n    if (this_present_objectTypePtr || that_present_objectTypePtr) {\n      if (!(this_present_objectTypePtr && that_present_objectTypePtr))\n        return false;\n      if (this.objectTypePtr != that.objectTypePtr)\n        return false;\n    }\n    return true;\n  }\n  @Override\n  public int hashCode() {\n    List<Object> list = new ArrayList<Object>();\n    boolean present_objectTypePtr = true;\n    list.add(present_objectTypePtr);\n    if (present_objectTypePtr)\n      list.add(objectTypePtr);\n    return list.hashCode();\n  }\n  @Override\n  public int compareTo(TArrayTypeEntry other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    lastComparison = Boolean.valueOf(isSetObjectTypePtr()).compareTo(other.isSetObjectTypePtr());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetObjectTypePtr()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectTypePtr, other.objectTypePtr);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n  }\n  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n  }\n  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder(\"TArrayTypeEntry(\");\n    boolean first = true;\n    sb.append(\"objectTypePtr:\");\n    sb.append(this.objectTypePtr);\n    first = false;\n    sb.append(\")\");\n    return sb.toString();\n  }\n  public void validate() throws org.apache.thrift.TException {\n    // check for required fields\n    if (!isSetObjectTypePtr()) {\n      throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'objectTypePtr' is unset! Struct:\" + toString());\n    }\n    // check for sub-struct validity\n  }\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    try {\n      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n    try {\n      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.\n      __isset_bitfield = 0;\n      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private static class TArrayTypeEntryStandardSchemeFactory implements SchemeFactory {\n    public TArrayTypeEntryStandardScheme getScheme() {\n      return new TArrayTypeEntryStandardScheme();\n    }\n  }\n  private static class TArrayTypeEntryStandardScheme extends StandardScheme<TArrayTypeEntry> {\n    public void read(org.apache.thrift.protocol.TProtocol iprot, TArrayTypeEntry struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TField schemeField;\n      iprot.readStructBegin();\n      while (true)\n      {\n        schemeField = iprot.readFieldBegin();\n        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n          break;\n        }\n        switch (schemeField.id) {\n          case 1: // OBJECT_TYPE_PTR\n            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {\n              struct.objectTypePtr = iprot.readI32();\n              struct.setObjectTypePtrIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          default:\n            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n        }\n        iprot.readFieldEnd();\n      }\n      iprot.readStructEnd();\n      struct.validate();\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot, TArrayTypeEntry struct) throws org.apache.thrift.TException {\n      struct.validate();\n      oprot.writeStructBegin(STRUCT_DESC);\n      oprot.writeFieldBegin(OBJECT_TYPE_PTR_FIELD_DESC);\n      oprot.writeI32(struct.objectTypePtr);\n      oprot.writeFieldEnd();\n      oprot.writeFieldStop();\n      oprot.writeStructEnd();\n    }\n  }\n<fim_suffix>  private static class TArrayTypeEntryTupleSchemeFactory implements SchemeFactory {\n    public TArrayTypeEntryTupleScheme getScheme() {\n      return new TArrayTypeEntryTupleScheme();\n    }\n  }<fim_middle>// class below has no smell\n"}