{"text": "<fim_prefix>/**\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage org.apache.aries.jmx;\n\nimport java.util.concurrent.atomic.AtomicLong;\n\nimport javax.management.StandardMBean;\n\nimport org.apache.aries.jmx.agent.JMXAgentContext;\nimport org.apache.aries.jmx.util.ObjectNameUtils;\nimport org.osgi.framework.Constants;\nimport org.osgi.framework.Filter;\nimport org.osgi.framework.ServiceReference;\nimport org.osgi.service.log.LogService;\nimport org.osgi.util.tracker.ServiceTracker;\n\n/**\n * <p>\n * Abstract implementation of {@link MBeanHandler} that provides a template with basic tracking of an optional\n * compendium service. MBeanHandler implementations that manage a {@link StandardMBean} that is backed by a single OSGi\n * compendium service should extend this class and implement the {@linkplain #constructInjectMBean(Object)} and\n * {@linkplain #getName()} methods\n * </p>\n * \n * @see MBeanHandler\n * \n * @version $Rev$ $Date$\n */\n<fim_suffix>@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic abstract class AbstractCompendiumHandler extends ServiceTracker implements MBeanHandler {\n\n    protected final JMXAgentContext agentContext;\n    protected StandardMBean mbean;\n    protected final AtomicLong trackedId = new AtomicLong();\n    \n    /**\n     * \n     * @param agentContext\n     * @param filter\n     */\n    protected AbstractCompendiumHandler(JMXAgentContext agentContext, Filter filter) {\n        super(agentContext.getBundleContext(), filter, null);\n        this.agentContext = agentContext;\n    }\n\n    /**\n     * \n     * @param agentContext\n     * @param clazz\n     */\n    protected AbstractCompendiumHandler(JMXAgentContext agentContext, String clazz) {\n        super(agentContext.getBundleContext(), clazz, null);\n        this.agentContext = agentContext;\n    }\n\n    /*\n     * (non-Javadoc)\n     * \n     * @see org.osgi.util.tracker.ServiceTracker#addingService(org.osgi.framework.ServiceReference)\n     */\n    public Object addingService(ServiceReference reference) {\n        Logger logger = agentContext.getLogger();\n        Object trackedService = null;\n        long serviceId = (Long) reference.getProperty(Constants.SERVICE_ID);\n        //API stipulates versions for compendium services with static ObjectName\n        //This shouldn't happen but added as a consistency check\n        if (trackedId.compareAndSet(0, serviceId)) {\n            logger.log(LogService.LOG_INFO, \"Registering MBean with ObjectName [\" + getName() + \"] for service with \"\n                    + Constants.SERVICE_ID + \" [\" + serviceId + \"]\");\n            trackedService = context.getService(reference);\n            mbean = constructInjectMBean(trackedService);\n            agentContext.registerMBean(AbstractCompendiumHandler.this);\n        } else {\n            String serviceDescription = getServiceDescription(reference);\n            logger.log(LogService.LOG_WARNING, \"Detected secondary ServiceReference for [\" + serviceDescription\n                    + \"] with \" + Constants.SERVICE_ID + \" [\" + serviceId + \"] Only 1 instance will be JMX managed\");\n        }\n        return trackedService;\n    }\n\n    /*\n     * (non-Javadoc)\n     * \n     * @see org.osgi.util.tracker.ServiceTracker#removedService(org.osgi.framework.ServiceReference, java.lang.Object)\n     */\n    public void removedService(ServiceReference reference, Object service) {\n        Logger logger = agentContext.getLogger();\n        long serviceID = (Long) reference.getProperty(Constants.SERVICE_ID);\n        if (trackedId.compareAndSet(serviceID, 0)) {\n            logger.log(LogService.LOG_INFO, \"Unregistering MBean with ObjectName [\" + getName() + \"] for service with \"\n                    + Constants.SERVICE_ID + \" [\" + serviceID + \"]\"); \n            agentContext.unregisterMBean(AbstractCompendiumHandler.this);\n            context.ungetService(reference);\n        } else {\n            String serviceDescription = getServiceDescription(reference);\n            logger.log(LogService.LOG_WARNING, \"ServiceReference for [\" + serviceDescription + \"] with \"\n                    + Constants.SERVICE_ID + \" [\" + serviceID + \"] is not currently JMX managed\");\n        }\n    }\n\n    private String getServiceDescription(ServiceReference reference) {\n        String serviceDescription = (String) reference.getProperty(Constants.SERVICE_DESCRIPTION);\n        if (serviceDescription == null) {\n            Object obj = reference.getProperty(Constants.OBJECTCLASS);\n            if (obj instanceof String[]) {\n                StringBuilder sb = new StringBuilder();\n                for (String s : (String[]) obj) {\n                    if (sb.length() > 0) {\n                        sb.append(\", \");\n                    }\n                    sb.append(s);\n                }\n                serviceDescription = sb.toString();\n            } else {\n                serviceDescription = obj.toString();\n            }\n        }\n        return serviceDescription;\n    }\n\n    /**\n     * Gets the <code>StandardMBean</code> managed by this handler when the backing service is available or null\n     * \n     * @see org.apache.aries.jmx.MBeanHandler#getMbean()\n     */\n    public StandardMBean getMbean() {\n        return mbean;\n    }\n\n    /**\n     * Implement this method to construct an appropriate {@link StandardMBean} instance which is backed by the supplied\n     * service tracked by this handler\n     * \n     * @param targetService\n     *            the compendium service tracked by this handler\n     * @return The <code>StandardMBean</code> instance whose registration lifecycle will be managed by this handler\n     */\n    protected abstract StandardMBean constructInjectMBean(Object targetService);\n\n    /**\n     * The base name of the MBean. Will be expanded with the framework name and the UUID.\n     * @return\n     */\n    protected abstract String getBaseName();\n\n    /**\n     * @see org.apache.aries.jmx.MBeanHandler#getName()\n     */\n    public String getName() {\n        return ObjectNameUtils.createFullObjectName(context, getBaseName());\n    }\n}<fim_middle>// class below is blob\n"}