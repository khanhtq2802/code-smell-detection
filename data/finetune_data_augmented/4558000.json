{"text": "<fim_prefix>\n<fim_suffix>@Service\npublic class DepositAccountAssembler {\n    private final PlatformSecurityContext context;\n    private final SavingsAccountTransactionSummaryWrapper savingsAccountTransactionSummaryWrapper;\n    private final SavingsHelper savingsHelper;\n    private final ClientRepositoryWrapper clientRepository;\n    private final GroupRepositoryWrapper groupRepository;\n    private final StaffRepositoryWrapper staffRepository;\n    private final FixedDepositProductRepository fixedDepositProductRepository;\n    private final RecurringDepositProductRepository recurringDepositProductRepository;\n    private final SavingsAccountRepositoryWrapper savingsAccountRepository;\n    private final SavingsAccountChargeAssembler savingsAccountChargeAssembler;\n    private final FromJsonHelper fromApiJsonHelper;\n    private final DepositProductAssembler depositProductAssembler;\n    private final PaymentDetailAssembler paymentDetailAssembler;\n    @Autowired\n    public DepositAccountAssembler(final SavingsAccountTransactionSummaryWrapper savingsAccountTransactionSummaryWrapper,\n            final ClientRepositoryWrapper clientRepository, final GroupRepositoryWrapper groupRepository,\n            final StaffRepositoryWrapper staffRepository, final FixedDepositProductRepository fixedDepositProductRepository,\n            final SavingsAccountRepositoryWrapper savingsAccountRepository,\n            final SavingsAccountChargeAssembler savingsAccountChargeAssembler, final FromJsonHelper fromApiJsonHelper,\n            final DepositProductAssembler depositProductAssembler,\n            final RecurringDepositProductRepository recurringDepositProductRepository,\n            final AccountTransfersReadPlatformService accountTransfersReadPlatformService, final PlatformSecurityContext context,\n            final PaymentDetailAssembler paymentDetailAssembler) {\n        this.savingsAccountTransactionSummaryWrapper = savingsAccountTransactionSummaryWrapper;\n        this.clientRepository = clientRepository;\n        this.groupRepository = groupRepository;\n        this.staffRepository = staffRepository;\n        this.fixedDepositProductRepository = fixedDepositProductRepository;\n        this.savingsAccountRepository = savingsAccountRepository;\n        this.savingsAccountChargeAssembler = savingsAccountChargeAssembler;\n        this.fromApiJsonHelper = fromApiJsonHelper;\n        this.depositProductAssembler = depositProductAssembler;\n        this.recurringDepositProductRepository = recurringDepositProductRepository;\n        this.savingsHelper = new SavingsHelper(accountTransfersReadPlatformService);\n        this.context = context;\n        this.paymentDetailAssembler = paymentDetailAssembler;\n    }\n    /**\n     * Assembles a new {@link SavingsAccount} from JSON details passed in\n     * request inheriting details where relevant from chosen\n     * {@link SavingsProduct}.\n     */\n    public SavingsAccount assembleFrom(final JsonCommand command, final AppUser submittedBy, final DepositAccountType depositAccountType) {\n        final JsonElement element = command.parsedJson();\n        final String accountNo = this.fromApiJsonHelper.extractStringNamed(accountNoParamName, element);\n        final String externalId = this.fromApiJsonHelper.extractStringNamed(externalIdParamName, element);\n        final Long productId = this.fromApiJsonHelper.extractLongNamed(productIdParamName, element);\n        SavingsProduct product = null;\n        if (depositAccountType.isFixedDeposit()) {\n            product = this.fixedDepositProductRepository.findOne(productId);\n            if (product == null) { throw new FixedDepositProductNotFoundException(productId); }\n        } else if (depositAccountType.isRecurringDeposit()) {\n            product = this.recurringDepositProductRepository.findOne(productId);\n            if (product == null) { throw new RecurringDepositProductNotFoundException(productId); }\n        }\n        if (product == null) { throw new SavingsProductNotFoundException(productId); }\n        Client client = null;\n        Group group = null;\n        Staff fieldOfficer = null;\n        AccountType accountType = AccountType.INVALID;\n        final Long clientId = this.fromApiJsonHelper.extractLongNamed(clientIdParamName, element);\n        if (clientId != null) {\n            final boolean isCalendarInherited = command.booleanPrimitiveValueOfParameterNamed(isCalendarInheritedParamName);\n            client = this.clientRepository.findOneWithNotFoundDetection(clientId, isCalendarInherited); //we need group collection if isCalendarInherited is true\n            accountType = AccountType.INDIVIDUAL;\n            if (client.isNotActive()) { throw new ClientNotActiveException(clientId); }\n        }\n        final Long groupId = this.fromApiJsonHelper.extractLongNamed(groupIdParamName, element);\n        if (groupId != null) {\n            group = this.groupRepository.findOneWithNotFoundDetection(groupId);\n            accountType = AccountType.GROUP;\n        }\n        if (group != null && client != null) {\n            if (!group.hasClientAsMember(client)) { throw new ClientNotInGroupException(clientId, groupId); }\n            accountType = AccountType.JLG;\n            if (group.isNotActive()) {\n                if (group.isCenter()) { throw new CenterNotActiveException(groupId); }\n                throw new GroupNotActiveException(groupId);\n            }\n        }\n        final Long fieldOfficerId = this.fromApiJsonHelper.extractLongNamed(fieldOfficerIdParamName, element);\n        if (fieldOfficerId != null) {\n            fieldOfficer = this.staffRepository.findOneWithNotFoundDetection(fieldOfficerId);\n        }\n        final LocalDate submittedOnDate = this.fromApiJsonHelper.extractLocalDateNamed(submittedOnDateParamName, element);\n        BigDecimal interestRate = null;\n        if (command.parameterExists(nominalAnnualInterestRateParamName)) {\n            interestRate = command.bigDecimalValueOfParameterNamed(nominalAnnualInterestRateParamName);\n        } else {\n            interestRate = product.nominalAnnualInterestRate();\n        }\n        SavingsCompoundingInterestPeriodType interestCompoundingPeriodType = null;\n        final Integer interestPeriodTypeValue = command.integerValueOfParameterNamed(interestCompoundingPeriodTypeParamName);\n        if (interestPeriodTypeValue != null) {\n            interestCompoundingPeriodType = SavingsCompoundingInterestPeriodType.fromInt(interestPeriodTypeValue);\n        } else {\n            interestCompoundingPeriodType = product.interestCompoundingPeriodType();\n        }\n        SavingsPostingInterestPeriodType interestPostingPeriodType = null;\n        final Integer interestPostingPeriodTypeValue = command.integerValueOfParameterNamed(interestPostingPeriodTypeParamName);\n        if (interestPostingPeriodTypeValue != null) {\n            interestPostingPeriodType = SavingsPostingInterestPeriodType.fromInt(interestPostingPeriodTypeValue);\n        } else {\n            interestPostingPeriodType = product.interestPostingPeriodType();\n        }\n        SavingsInterestCalculationType interestCalculationType = null;\n        final Integer interestCalculationTypeValue = command.integerValueOfParameterNamed(interestCalculationTypeParamName);\n        if (interestCalculationTypeValue != null) {\n            interestCalculationType = SavingsInterestCalculationType.fromInt(interestCalculationTypeValue);\n        } else {\n            interestCalculationType = product.interestCalculationType();\n        }\n        SavingsInterestCalculationDaysInYearType interestCalculationDaysInYearType = null;\n        final Integer interestCalculationDaysInYearTypeValue = command\n                .integerValueOfParameterNamed(interestCalculationDaysInYearTypeParamName);\n        if (interestCalculationDaysInYearTypeValue != null) {\n            interestCalculationDaysInYearType = SavingsInterestCalculationDaysInYearType.fromInt(interestCalculationDaysInYearTypeValue);\n        } else {\n            interestCalculationDaysInYearType = product.interestCalculationDaysInYearType();\n        }\n        BigDecimal minRequiredOpeningBalance = null;\n        if (command.parameterExists(minRequiredOpeningBalanceParamName)) {\n            minRequiredOpeningBalance = command.bigDecimalValueOfParameterNamed(minRequiredOpeningBalanceParamName);\n        } else {\n            minRequiredOpeningBalance = product.minRequiredOpeningBalance();\n        }\n        Integer lockinPeriodFrequency = null;\n        if (command.parameterExists(lockinPeriodFrequencyParamName)) {\n            lockinPeriodFrequency = command.integerValueOfParameterNamed(lockinPeriodFrequencyParamName);\n        } else {\n            lockinPeriodFrequency = product.lockinPeriodFrequency();\n        }\n        SavingsPeriodFrequencyType lockinPeriodFrequencyType = null;\n        if (command.parameterExists(lockinPeriodFrequencyTypeParamName)) {\n            Integer lockinPeriodFrequencyTypeValue = null;\n            lockinPeriodFrequencyTypeValue = command.integerValueOfParameterNamed(lockinPeriodFrequencyTypeParamName);\n            if (lockinPeriodFrequencyTypeValue != null) {\n                lockinPeriodFrequencyType = SavingsPeriodFrequencyType.fromInt(lockinPeriodFrequencyTypeValue);\n            }\n        } else {\n            lockinPeriodFrequencyType = product.lockinPeriodFrequencyType();\n        }\n        boolean iswithdrawalFeeApplicableForTransfer = false;\n        if (command.parameterExists(withdrawalFeeForTransfersParamName)) {\n            iswithdrawalFeeApplicableForTransfer = command.booleanPrimitiveValueOfParameterNamed(withdrawalFeeForTransfersParamName);\n        }\n        final Set<SavingsAccountCharge> charges = this.savingsAccountChargeAssembler.fromParsedJson(element, product.currency().getCode());\n        DepositAccountInterestRateChart accountChart = null;\n        InterestRateChart productChart = null;\n        if (command.parameterExists(chartIdParamName)) {\n            Long chartId = command.longValueOfParameterNamed(chartIdParamName);<fim_middle>// class below is blob\n"}