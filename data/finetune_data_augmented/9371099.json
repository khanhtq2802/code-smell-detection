{"text": "<fim_prefix> * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n// Very much based on XListPeer from javaos\npackage sun.awt.X11;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.awt.peer.*;\nimport java.util.Objects;\nimport java.util.Vector;\nimport java.awt.image.*;\nimport sun.util.logging.PlatformLogger;\n// TODO: some input actions should do nothing if Shift or Control are down\nclass XListPeer extends XComponentPeer implements ListPeer, XScrollbarClient {\n    private static final PlatformLogger log = PlatformLogger.getLogger(\"sun.awt.X11.XListPeer\");\n    public static final int     MARGIN = 2;\n    public static final int     SPACE = 1;\n    public static final int     SCROLLBAR_AREA = 17;  // Area reserved for the\n                                                      // scrollbar\n    public static final int     SCROLLBAR_WIDTH = 13; // Actual width of the\n                                                      // scrollbar\n    public static final int     NONE = -1;\n    public static final int     WINDOW = 0;\n    public static final int     VERSCROLLBAR = 1;\n    public static final int     HORSCROLLBAR = 2;\n    public static final int     DEFAULT_VISIBLE_ROWS = 4; // From java.awt.List,\n    public static final int     HORIZ_SCROLL_AMT = 10;\n    private static final int    PAINT_VSCROLL = 2;\n    private static final int    PAINT_HSCROLL = 4;\n    private static final int    PAINT_ITEMS = 8;\n    private static final int    PAINT_FOCUS = 16;\n    private static final int    PAINT_BACKGROUND = 32;\n    private static final int    PAINT_HIDEFOCUS = 64;\n    private static final int    PAINT_ALL =\n        PAINT_VSCROLL | PAINT_HSCROLL | PAINT_ITEMS | PAINT_FOCUS | PAINT_BACKGROUND;\n    private static final int    COPY_AREA = 128;\n    XVerticalScrollbar       vsb;\n    XHorizontalScrollbar     hsb;\n    ListPainter painter;\n    // TODO: ick - Vector?\n    Vector<String>              items;\n    boolean                     multipleSelections;\n    int                         active = NONE;\n    // Holds the array of the indexes of the elements which is selected\n    // This array should be kept sorted, low to high.\n    int[]                         selected;\n    int                         fontHeight;\n    int                         fontAscent;\n    int                         fontLeading;\n    // Holds the index of the item used in the previous operation (selectItem, deselectItem)\n    // Adding of an item or clearing of the list sets this index to -1\n    // The index is used at the moment of the post of ACTION_PERFORMED event after the mouse double click event.\n    int                         currentIndex = -1;\n    // Used for tracking selection/deselection between mousePress/Release\n    // and for ItemEvents\n    int                         eventIndex = -1;\n    int                         eventType = NONE;\n    // Holds the index of the item that receive focus\n    // This variable is reasonable only for multiple list\n    // since 'focusIndex' and 'selected[0]' are equal for single-selection list\n    int                         focusIndex;\n    int                         maxLength;\n    boolean                     vsbVis;  // visibility of scrollbars\n    boolean                     hsbVis;\n    int                         listWidth;  // Width of list portion of List\n    int                         listHeight; // Height of list portion of List\n    // (i.e. without scrollbars)\n    private int firstTimeVisibleIndex = 0;\n    // Motif Lists don't seem to inherit the background color from their\n    // parent when an app is first started up.  So, we track if the colors have\n    // been set.  See getListBackground()/getListForeground().\n    boolean bgColorSet;\n    boolean fgColorSet;\n    // Holds the true if mouse is dragging outside of the area of the list\n    // The flag is used at the moment of the dragging and releasing mouse\n    // See 6243382 for more information\n    boolean mouseDraggedOutHorizontally = false;\n    boolean mouseDraggedOutVertically = false;\n    // Holds the true if a mouse event was originated on the scrollbar\n    // See 6300527 for more information\n    boolean isScrollBarOriginated = false;\n    // This variable is set to true after the \"mouse pressed\" event and to false after the \"mouse released\" event\n    // Fixed 6293432: Key events ('SPACE', 'UP', 'DOWN') aren't blocked if mouse is kept in 'PRESSED' state for List, XAWT\n    boolean isMousePressed = false;\n    /**\n     * Create a list\n     */\n    XListPeer(List target) {\n        super(target);\n    }\n    /**\n     * Overridden from XWindow\n     */\n    public void preInit(XCreateWindowParams params) {\n        super.preInit(params);\n        // Stuff that must be initialized before layout() is called\n        items = new Vector<>();\n        createVerScrollbar();\n        createHorScrollbar();\n        painter = new ListPainter();\n        // See 6246467 for more information\n        bgColorSet = target.isBackgroundSet();\n        fgColorSet = target.isForegroundSet();\n    }\n    public void postInit(XCreateWindowParams params) {\n        super.postInit(params);\n        initFontMetrics();\n        // TODO: more efficient way?\n        //       do we really want/need a copy of all the items?\n        // get all items from target\n        List l = (List)target;\n        int stop = l.getItemCount();\n        for (int i = 0 ; i < stop; i++) {\n            items.addElement(l.getItem(i));\n        }\n        /* make the visible position visible. */\n        int index = l.getVisibleIndex();\n        if (index >= 0) {\n            // Can't call makeVisible since it check scroll bar,\n            // initialize scroll bar instead\n            vsb.setValues(index, 0, 0, items.size());\n        }\n        // NOTE: needs to have target set\n        maxLength = maxLength();\n        // get the index containing all indexes to selected items\n        int[] sel = l.getSelectedIndexes();\n        selected = new int[sel.length];\n        // TODO: shouldn't this be arraycopy()?\n        for (int i = 0 ; i < sel.length ; i ++) {\n            selected[i] = sel[i];\n        }\n        // The select()ed item should become the focused item, but we don't\n        // get the select() call because the peer generally hasn't yet been\n        // created during app initialization.\n        // TODO: For multi-select lists, it should be the highest selected index\n        if (sel.length > 0) {\n            setFocusIndex(sel[sel.length - 1]);\n        }\n        else {\n            setFocusIndex(0);\n        }\n        multipleSelections = l.isMultipleMode();\n    }\n    /**\n     * add Vertical Scrollbar\n     */\n    void createVerScrollbar() {\n        vsb = new XVerticalScrollbar(this);\n        vsb.setValues(0, 0, 0, 0, 1, 1);\n    }\n    /**\n     * add Horizontal scrollbar\n     */\n    void createHorScrollbar() {\n        hsb = new XHorizontalScrollbar(this);\n        hsb.setValues(0, 0, 0, 0, HORIZ_SCROLL_AMT, HORIZ_SCROLL_AMT);\n    }\n    public void add(String item, int index) {\n        addItem(item, index);\n    }\n    public void removeAll() {\n        clear();\n        maxLength = 0;\n    }\n    public void setMultipleMode (boolean b) {\n        setMultipleSelections(b);\n    }\n    public Dimension getMinimumSize() {\n        return getMinimumSize(DEFAULT_VISIBLE_ROWS);\n    }\n    public Dimension getPreferredSize(int rows) {\n        return getMinimumSize(rows);\n    }\n<fim_suffix>    public Dimension getMinimumSize(int rows) {\n        FontMetrics fm = getFontMetrics(getFont());\n        initFontMetrics();\n        return new Dimension(20 + fm.stringWidth(\"0123456789abcde\"),\n                             getItemHeight() * rows + (2*MARGIN));\n    }<fim_middle>// function below has no smell\n"}