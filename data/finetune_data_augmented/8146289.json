{"text": "<fim_prefix>/*\n * Copyright 1999-2012 Alibaba Group.\n *  \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *  \n *      http://www.apache.org/licenses/LICENSE-2.0\n *  \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.alibaba.cobar.net.mysql;\n\nimport java.nio.ByteBuffer;\n\nimport com.alibaba.cobar.mysql.BufferUtil;\nimport com.alibaba.cobar.mysql.MySQLMessage;\nimport com.alibaba.cobar.net.FrontendConnection;\n\n/**\n * From server to client after command, if no error and result set -- that is,\n * if the command was a query which returned a result set. The Result Set Header\n * Packet is the first of several, possibly many, packets that the server sends\n * for result sets. The order of packets for a result set is:\n * \n * <pre>\n * (Result Set Header Packet)   the number of columns\n * (Field Packets)              column descriptors\n * (EOF Packet)                 marker: end of Field Packets\n * (Row Data Packets)           row contents\n * (EOF Packet)                 marker: end of Data Packets\n * \n * Bytes                        Name\n * -----                        ----\n * 1-9   (Length-Coded-Binary)  field_count\n * 1-9   (Length-Coded-Binary)  extra\n * \n * @see http://forge.mysql.com/wiki/MySQL_Internals_ClientServer_Protocol#Result_Set_Header_Packet\n * </pre>\n * \n * @author xianmao.hexm 2010-7-22 \u4e0b\u534805:59:55\n */\n<fim_suffix>public class ResultSetHeaderPacket extends MySQLPacket {\n\n    public int fieldCount;\n    public long extra;\n\n    public void read(byte[] data) {\n        MySQLMessage mm = new MySQLMessage(data);\n        this.packetLength = mm.readUB3();\n        this.packetId = mm.read();\n        this.fieldCount = (int) mm.readLength();\n        if (mm.hasRemaining()) {\n            this.extra = mm.readLength();\n        }\n    }\n\n    @Override\n    public ByteBuffer write(ByteBuffer buffer, FrontendConnection c) {\n        int size = calcPacketSize();\n        buffer = c.checkWriteBuffer(buffer, c.getPacketHeaderSize() + size);\n        BufferUtil.writeUB3(buffer, size);\n        buffer.put(packetId);\n        BufferUtil.writeLength(buffer, fieldCount);\n        if (extra > 0) {\n            BufferUtil.writeLength(buffer, extra);\n        }\n        return buffer;\n    }\n\n    @Override\n    public int calcPacketSize() {\n        int size = BufferUtil.getLength(fieldCount);\n        if (extra > 0) {\n            size += BufferUtil.getLength(extra);\n        }\n        return size;\n    }\n\n    @Override\n    protected String getPacketInfo() {\n        return \"MySQL ResultSetHeader Packet\";\n    }\n\n}<fim_middle>// class below has no smell\n"}