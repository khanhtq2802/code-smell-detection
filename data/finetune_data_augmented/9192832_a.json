{"text": "<fim_prefix>\t\t\tlblStyle.setEnabled( bEnableUI );\n\t\t\tcmbStyle = context.getUIFactory( )\n\t\t\t\t\t.createLineStyleChooserComposite( cmpContent,\n\t\t\t\t\t\t\tSWT.DROP_DOWN | SWT.READ_ONLY,\n\t\t\t\t\t\t\tgetSWTLineStyle( laCurrent.getStyle( ) ),\n\t\t\t\t\t\t\tnew Integer[]{\n\t\t\t\t\t\t\t\t\tSWT.LINE_SOLID,\n\t\t\t\t\t\t\t\t\tSWT.LINE_DASH,\n\t\t\t\t\t\t\t\t\tSWT.LINE_DASHDOT,\n\t\t\t\t\t\t\t\t\tSWT.LINE_DOT\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlaCurrent,\n\t\t\t\t\t\t\t\"style\"); //$NON-NLS-1$\n\t\t\tGridData gdCBStyle = new GridData( GridData.FILL_HORIZONTAL );\n\t\t\tgdCBStyle.horizontalSpan = 5;\n\t\t\tcmbStyle.setLayoutData( gdCBStyle );\n\t\t\tcmbStyle.addListener( LineStyleChooserComposite.SELECTION_EVENT,\n\t\t\t\t\tthis );\n\t\t\tcmbStyle.setEnabled( bEnableUI );\n\t\t}\n\t\tif ( bEnableWidths )\n\t\t{\n\t\t\tlblWidth = new Label( cmpContent, SWT.NONE );\n\t\t\tGridData gdLWidth = new GridData( GridData.HORIZONTAL_ALIGN_BEGINNING );\n\t\t\tlblWidth.setLayoutData( gdLWidth );\n\t\t\tlblWidth.setText( Messages.getString( \"LineAttributesComposite.Lbl.Width\" ) ); //$NON-NLS-1$\n\t\t\tlblWidth.setEnabled( bEnableUI );\n\t\t\tiscWidth = context.getUIFactory( )\n\t\t\t\t\t.createChartIntSpinner( cmpContent,\n\t\t\t\t\t\t\tSWT.NONE,\n\t\t\t\t\t\t\tlaCurrent.getThickness( ),\n\t\t\t\t\t\t\tlaCurrent,\n\t\t\t\t\t\t\t\"thickness\", //$NON-NLS-1$\n\t\t\t\t\t\t\tbEnableUI );\n\t\t\tGridData gdISCWidth = new GridData( GridData.FILL_HORIZONTAL );\n\t\t\tgdISCWidth.horizontalSpan = 5;\n\t\t\tiscWidth.setLayoutData( gdISCWidth );\n\t\t\tiscWidth.setMinimum( 1 );\n\t\t\tiscWidth.setMaximum( 100 );\n\t\t\tiscWidth.addListener( this );\n\t\t\tif ( iscWidth instanceof IntegerSpinControl )\n\t\t\t{\n\t\t\t\t( (IntegerSpinControl) iscWidth ).addScreenreaderAccessbility( lblWidth.getText( ) );\n\t\t\t}\n\t\t}\n\t\tif ( bEnableColor )\n\t\t{\n\t\t\tlblColor = new Label( cmpContent, SWT.NONE );\n\t\t\tGridData gdLColor = new GridData( GridData.HORIZONTAL_ALIGN_BEGINNING );\n\t\t\tlblColor.setLayoutData( gdLColor );\n\t\t\tlblColor.setText( Messages.getString( \"LineAttributesComposite.Lbl.Color\" ) ); //$NON-NLS-1$\n\t\t\tlblColor.setEnabled( bEnableUI );\n\t\t\tint fillStyles = FillChooserComposite.ENABLE_TRANSPARENT\n\t\t\t\t\t| FillChooserComposite.ENABLE_TRANSPARENT_SLIDER\n\t\t\t\t\t| FillChooserComposite.DISABLE_PATTERN_FILL;\n\t\t\tfillStyles |= context.getUIFactory( ).supportAutoUI( ) ? FillChooserComposite.ENABLE_AUTO\n\t\t\t\t\t: fillStyles;\n\t\t\tcmbColor = new FillChooserComposite( cmpContent,\n\t\t\t\t\tSWT.DROP_DOWN | SWT.READ_ONLY,\n\t\t\t\t\tfillStyles,\n\t\t\t\t\tcontext,\n\t\t\t\t\tthis.laCurrent.getColor( ) );\n\t\t\tGridData gdCBColor = new GridData( GridData.FILL_HORIZONTAL );\n\t\t\tgdCBColor.horizontalSpan = 5;\n\t\t\tcmbColor.setLayoutData( gdCBColor );\n\t\t\tcmbColor.addListener( this );\n\t\t\tcmbColor.setEnabled( bEnableUI );\n\t\t}\n\t}\n\tpublic Point getPreferredSize( )\n\t{\n\t\tPoint ptSize = new Point( 250, 40 );\n\t\tif ( bEnableVisibility )\n\t\t{\n\t\t\tptSize.y += 30;\n\t\t}\n\t\tif ( bEnableStyles )\n\t\t{\n\t\t\tptSize.y += 30;\n\t\t}\n\t\tif ( bEnableWidths )\n\t\t{\n\t\t\tptSize.y += 30;\n\t\t}\n\t\treturn ptSize;\n\t}\n\tpublic void setEnabled( boolean bState )\n\t{\n\t\tboolean bEnableUI = true;\n\t\tif ( this.bEnableVisibility )\n\t\t{\n\t\t\tbtnVisible.setEnabled( bState );\n\t\t\tbEnableUI = context.getUIFactory( ).canEnableUI( btnVisible );\n\t\t}\n\t\tif ( this.bEnableStyles )\n\t\t{\n\t\t\tlblStyle.setEnabled( bState & bEnableUI );\n\t\t\tcmbStyle.setEnabled( bState & bEnableUI );\n\t\t}\n\t\tif ( this.bEnableWidths )\n\t\t{\n\t\t\tlblWidth.setEnabled( bState & bEnableUI );\n\t\t\tiscWidth.setEnabled( bState & bEnableUI );\n\t\t}\n\t\tif ( this.bEnableColor )\n\t\t{\n\t\t\tlblColor.setEnabled( bState & bEnableUI );\n\t\t\tcmbColor.setEnabled( bState & bEnableUI );\n\t\t}\n\t\tthis.bEnabled = bState;\n\t}\n\tpublic boolean isEnabled( )\n\t{\n\t\treturn this.bEnabled;\n\t}\n\tpublic void addListener( Listener listener )\n\t{\n\t\tvListeners.add( listener );\n\t}\n\tpublic void setLineAttributes( LineAttributes attributes )\n\t{\n\t\tlaCurrent = attributes;\n\t\tif ( bEnableVisibility )\n\t\t{\n\t\t\tif ( laCurrent == null || !laCurrent.isSetVisible( ) )\n\t\t\t{\n\t\t\t\tbtnVisible.setSelectionState( ChartCheckbox.STATE_GRAYED );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbtnVisible.setSelectionState( attributes.isVisible( ) ? ChartCheckbox.STATE_SELECTED\n\t\t\t\t\t\t: ChartCheckbox.STATE_UNSELECTED );\n\t\t\t}\n\t\t\tboolean bUIEnabled = context.getUIFactory( ).canEnableUI( btnVisible );\n\t\t\tif ( bEnableStyles )\n\t\t\t{\n\t\t\t\tcmbStyle.setEnabled( bUIEnabled );\n\t\t\t\tlblStyle.setEnabled( bUIEnabled );\n\t\t\t}\n\t\t\tif ( bEnableWidths )\n\t\t\t{\n\t\t\t\tiscWidth.setEnabled( bUIEnabled );\n\t\t\t\tlblWidth.setEnabled( bUIEnabled );\n\t\t\t}\n\t\t\tif ( bEnableColor )\n\t\t\t{\n\t\t\t\tcmbColor.setEnabled( bUIEnabled );\n\t\t\t\tlblColor.setEnabled( bUIEnabled );\n\t\t\t}\n\t\t}\n\t\tif ( bEnableStyles )\n\t\t{\n\t\t\tcmbStyle.setLineStyle( attributes.getStyle( ), attributes );\n\t\t}\n\t\tif ( this.bEnableWidths )\n\t\t{\n\t\t\tif ( laCurrent == null || !laCurrent.isSetThickness( ) )\n\t\t\t{\n\t\t\t\tiscWidth.setValue( 0 );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tiscWidth.setValue( attributes.getThickness( ) );\n\t\t\t}\n\t\t}\n\t\tif ( this.bEnableColor )\n\t\t{\n\t\t\tif ( laCurrent == null || laCurrent.getColor( ) == null )\n\t\t\t{\n\t\t\t\tcmbColor.setFill( null );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcmbColor.setFill( attributes.getColor( ) );\n\t\t\t}\n\t\t\tcmbColor.redraw( );\n\t\t}\n\t\tredraw( );\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)\n\t */\n<fim_suffix>\tpublic void widgetSelected( SelectionEvent e )\n\t{\n\t\tObject widget = e.widget;\n\t\tif ( widget == btnVisible )\n\t\t{\n\t\t\t// Notify Listeners that a change has occurred in the value\n\t\t\tfireValueChangedEvent( GanttLineAttributesComposite.VISIBILITY_CHANGED_EVENT,\n\t\t\t\t\tBoolean.valueOf( btnVisible.getSelectionState( ) == ChartCheckbox.STATE_SELECTED ),\n\t\t\t\t\t( btnVisible.getSelectionState( ) == ChartCheckbox.STATE_GRAYED ) ? ChartUIExtensionUtil.PROPERTY_UNSET\n\t\t\t\t\t\t\t: ChartUIExtensionUtil.PROPERTY_UPDATE );\n\t\t\t// Notification may cause this class disposed\n\t\t\tif ( isDisposed( ) )\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Enable/Disable UI Elements\n\t\t\tboolean bEnableUI = context.getUIFactory( ).canEnableUI( btnVisible );\n\t\t\tif ( bEnableStyles )\n\t\t\t{\n\t\t\t\tlblStyle.setEnabled( bEnableUI );\n\t\t\t\tcmbStyle.setEnabled( bEnableUI );\n\t\t\t}\n\t\t\tif ( bEnableWidths )\n\t\t\t{\n\t\t\t\tlblWidth.setEnabled( bEnableUI  );\n\t\t\t\tiscWidth.setEnabled( bEnableUI  );\n\t\t\t}\n\t\t\tif ( bEnableColor )\n\t\t\t{\n\t\t\t\tlblColor.setEnabled( bEnableUI );\n\t\t\t\tcmbColor.setEnabled( bEnableUI );\n\t\t\t}\n\t\t}\n\t}<fim_middle>// function below is feature envy and long method\n"}