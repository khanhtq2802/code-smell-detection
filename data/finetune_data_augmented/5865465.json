{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.uima.cas.impl;\n\nimport java.util.NoSuchElementException;\n\nimport org.apache.uima.cas.FeatureStructure;\n\n<fim_suffix>class IntIterator4bag<T extends FeatureStructure> extends FSIntIteratorImplBase<T> {\n\n  private int itPos;\n\n  final private FSBagIndex<T> fsBagIndex; // just an optimization, is == to fsLeafIndexImpl from super class, allows dispatch w/o casting\n    \n\n  IntIterator4bag(FSBagIndex<T> fsBagIndex, int[] detectIllegalIndexUpdates) {\n    super(fsBagIndex, detectIllegalIndexUpdates);\n    this.fsBagIndex = fsBagIndex;\n    moveToFirst();\n  }\n\n  @Override\n  public boolean isValid() {\n    return fsBagIndex.isValid(this.itPos);\n  }\n\n  /**\n   * If empty, make position -1 (invalid)\n   */\n  @Override\n  public void moveToFirst() {\n    resetConcurrentModification();\n    this.itPos = fsBagIndex.moveToFirst();\n  }\n\n  /**\n   * If empty, make position -1 (invalid)\n   */\n  @Override\n  public void moveToLast() {\n    resetConcurrentModification();\n    this.itPos = fsBagIndex.moveToLast();\n  }\n\n  @Override\n  public void moveToNext() {\n    checkConcurrentModification(); \n    this.itPos = fsBagIndex.moveToNext(itPos);\n  }\n\n  @Override\n  public void moveToPrevious() {\n    checkConcurrentModification(); \n    this.itPos = fsBagIndex.moveToPrevious(itPos);\n  }\n\n  @Override\n  public int get() {\n    if (!isValid()) {\n      throw new NoSuchElementException();\n    }\n    checkConcurrentModification(); \n    return fsBagIndex.get(itPos);\n  }\n\n  /**\n   * @see org.apache.uima.internal.util.IntPointerIterator#copy()\n   */\n  @Override\n  public Object copy() {\n    IntIterator4bag<T> copy = new IntIterator4bag<T>(this.fsBagIndex, this.detectIllegalIndexUpdates);\n    copy.itPos = this.itPos;\n    return copy;\n  }\n\n  /**\n   * @see org.apache.uima.internal.util.IntPointerIterator#moveTo(int)\n   */\n  @Override\n  public void moveTo(int i) {\n    resetConcurrentModification();\n    this.itPos = fsBagIndex.findLeftmost(i);\n  }\n\n  @Override\n  public int ll_indexSize() {\n    return fsBagIndex.size();\n  }\n\n}\n<fim_middle>// class below has no smell\n"}