{"text": "<fim_prefix>    protected IAgentControl _agentControl;\n    @Override\n    public String getName() {\n        return _name;\n    }\n    protected String findScript(String script) {\n        return Script.findScript(getDefaultScriptsDir(), script);\n    }\n    protected abstract String getDefaultScriptsDir();\n    @Override\n    public boolean configure(final String name, Map<String, Object> params) throws ConfigurationException {\n        _name = name;\n        String publicNic = (String)params.get(\"public.network.device\");\n        if (publicNic == null) {\n            publicNic = \"xenbr1\";\n        }\n        String privateNic = (String)params.get(\"private.network.device\");\n        if (privateNic == null) {\n            privateNic = \"xenbr0\";\n        }\n        final String storageNic = (String)params.get(\"storage.network.device\");\n        final String storageNic2 = (String)params.get(\"storage.network.device.2\");\n        _privateNic = getNetworkInterface(privateNic);\n        _publicNic = getNetworkInterface(publicNic);\n        _storageNic = getNetworkInterface(storageNic);\n        _storageNic2 = getNetworkInterface(storageNic2);\n        if (_privateNic == null) {\n            s_logger.warn(\"Nics are not specified in properties file/db, will try to autodiscover\");\n            Enumeration<NetworkInterface> nics = null;\n            try {\n                nics = NetworkInterface.getNetworkInterfaces();\n                if (nics == null || !nics.hasMoreElements()) {\n                    throw new ConfigurationException(\"Private NIC is not configured\");\n                }\n            } catch (final SocketException e) {\n                throw new ConfigurationException(\"Private NIC is not configured\");\n            }\n            while (nics.hasMoreElements()) {\n                final NetworkInterface nic = nics.nextElement();\n                final String nicName = nic.getName();\n                //  try {\n                if (//!nic.isLoopback() &&\n                        //nic.isUp() &&\n                        !nic.isVirtual() && !nicName.startsWith(\"vnif\") && !nicName.startsWith(\"vnbr\") && !nicName.startsWith(\"peth\") && !nicName.startsWith(\"vif\") &&\n                        !nicName.startsWith(\"virbr\") && !nicName.contains(\":\")) {\n                    final String[] info = NetUtils.getNicParams(nicName);\n                    if (info != null && info[0] != null) {\n                        _privateNic = nic;\n                        s_logger.info(\"Designating private to be nic \" + nicName);\n                        break;\n                    }\n                }\n                //      } catch (final SocketException e) {\n                //        s_logger.warn(\"Error looking at \" + nicName, e);\n                //  }\n                s_logger.debug(\"Skipping nic \" + nicName);\n            }\n            if (_privateNic == null) {\n                throw new ConfigurationException(\"Private NIC is not configured\");\n            }\n        }\n        String infos[] = NetUtils.getNetworkParams(_privateNic);\n        if (infos == null) {\n            s_logger.warn(\"Incorrect details for private Nic during initialization of ServerResourceBase\");\n            return false;\n        }\n        params.put(\"host.ip\", infos[0]);\n        params.put(\"host.mac.address\", infos[1]);\n        return true;\n    }\n    protected NetworkInterface getNetworkInterface(String nicName) {\n        s_logger.debug(\"Retrieving network interface: \" + nicName);\n        if (nicName == null) {\n            return null;\n        }\n        if (nicName.trim().length() == 0) {\n            return null;\n        }\n        nicName = nicName.trim();\n        NetworkInterface nic;\n        try {\n            nic = NetworkInterface.getByName(nicName);\n            if (nic == null) {\n                s_logger.debug(\"Unable to get network interface for \" + nicName);\n                return null;\n            }\n            return nic;\n        } catch (final SocketException e) {\n            s_logger.warn(\"Unable to get network interface for \" + nicName, e);\n            return null;\n        }\n    }\n    protected void fillNetworkInformation(final StartupCommand cmd) {\n        String[] info = null;\n        if (_privateNic != null) {\n            info = NetUtils.getNetworkParams(_privateNic);\n            if (info != null) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Parameters for private nic: \" + info[0] + \" - \" + info[1] + \"-\" + info[2]);\n                }\n                cmd.setPrivateIpAddress(info[0]);\n                cmd.setPrivateMacAddress(info[1]);\n                cmd.setPrivateNetmask(info[2]);\n            }\n        }\n        if (_storageNic != null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Storage has its now nic: \" + _storageNic.getName());\n            }\n            info = NetUtils.getNetworkParams(_storageNic);\n        }\n        // NOTE: In case you're wondering, this is not here by mistake.\n        if (info != null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Parameters for storage nic: \" + info[0] + \" - \" + info[1] + \"-\" + info[2]);\n            }\n            cmd.setStorageIpAddress(info[0]);\n            cmd.setStorageMacAddress(info[1]);\n            cmd.setStorageNetmask(info[2]);\n        }\n        if (_publicNic != null) {\n            info = NetUtils.getNetworkParams(_publicNic);\n            if (info != null) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Parameters for public nic: \" + info[0] + \" - \" + info[1] + \"-\" + info[2]);\n                }\n                cmd.setPublicIpAddress(info[0]);\n                cmd.setPublicMacAddress(info[1]);\n                cmd.setPublicNetmask(info[2]);\n            }\n        }\n        if (_storageNic2 != null) {\n            info = NetUtils.getNetworkParams(_storageNic2);\n            if (info != null) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Parameters for storage nic 2: \" + info[0] + \" - \" + info[1] + \"-\" + info[2]);\n                }\n                cmd.setStorageIpAddressDeux(info[0]);\n                cmd.setStorageMacAddressDeux(info[1]);\n                cmd.setStorageNetmaskDeux(info[2]);\n            }\n        }\n    }\n    @Override\n    public void disconnected() {\n    }\n    @Override\n    public IAgentControl getAgentControl() {\n        return _agentControl;\n    }\n    @Override\n    public void setAgentControl(IAgentControl agentControl) {\n        _agentControl = agentControl;\n    }\n    protected void recordWarning(final String msg, final Throwable th) {\n        final String str = getLogStr(msg, th);\n        synchronized (_warnings) {\n            _warnings.add(str);\n        }\n    }\n    protected void recordWarning(final String msg) {\n        recordWarning(msg, null);\n    }\n    protected List<String> getWarnings() {\n        synchronized (_warnings) {\n            final List<String> results = new LinkedList<String>(_warnings);\n            _warnings.clear();\n            return results;\n        }\n    }\n    protected List<String> getErrors() {\n        synchronized (_errors) {\n            final List<String> result = new LinkedList<String>(_errors);\n            _errors.clear();\n            return result;\n        }\n    }\n    protected void recordError(final String msg, final Throwable th) {\n        final String str = getLogStr(msg, th);\n        synchronized (_errors) {\n            _errors.add(str);\n        }\n    }\n    protected void recordError(final String msg) {\n        recordError(msg, null);\n    }\n    protected Answer createErrorAnswer(final Command cmd, final String msg, final Throwable th) {\n        final StringWriter writer = new StringWriter();\n        if (msg != null) {\n            writer.append(msg);\n        }\n        writer.append(\"===>Stack<===\");\n        th.printStackTrace(new PrintWriter(writer));\n        return new Answer(cmd, false, writer.toString());\n    }\n    protected String createErrorDetail(final String msg, final Throwable th) {\n        final StringWriter writer = new StringWriter();\n        if (msg != null) {\n            writer.append(msg);\n        }\n        writer.append(\"===>Stack<===\");\n        th.printStackTrace(new PrintWriter(writer));\n        return writer.toString();\n    }\n    protected String getLogStr(final String msg, final Throwable th) {\n        final StringWriter writer = new StringWriter();\n        writer.append(new Date().toString()).append(\": \").append(msg);\n        if (th != null) {\n            writer.append(\"\\n  Exception: \");\n            th.printStackTrace(new PrintWriter(writer));\n        }\n        return writer.toString();\n    }\n<fim_suffix>    @Override\n    public boolean start() {\n        return true;\n    }<fim_middle>// function below has no smell\n"}