{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.io.serializer;\n\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport org.apache.hadoop.classification.InterfaceAudience;\nimport org.apache.hadoop.classification.InterfaceStability;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.conf.Configured;\nimport org.apache.hadoop.io.Writable;\nimport org.apache.hadoop.util.ReflectionUtils;\n\n/**\n * A {@link Serialization} for {@link Writable}s that delegates to\n * {@link Writable#write(java.io.DataOutput)} and\n * {@link Writable#readFields(java.io.DataInput)}.\n */\n@InterfaceAudience.Public\n@InterfaceStability.Evolving\npublic class WritableSerialization extends Configured\n\timplements Serialization<Writable> {\n  static class WritableDeserializer extends Configured\n  \timplements Deserializer<Writable> {\n\n    private Class<?> writableClass;\n    private DataInputStream dataIn;\n    \n    public WritableDeserializer(Configuration conf, Class<?> c) {\n      setConf(conf);\n      this.writableClass = c;\n    }\n    \n    @Override\n    public void open(InputStream in) {\n      if (in instanceof DataInputStream) {\n        dataIn = (DataInputStream) in;\n      } else {\n        dataIn = new DataInputStream(in);\n      }\n    }\n    \n    @Override\n    public Writable deserialize(Writable w) throws IOException {\n      Writable writable;\n      if (w == null) {\n        writable \n          = (Writable) ReflectionUtils.newInstance(writableClass, getConf());\n      } else {\n        writable = w;\n      }\n      writable.readFields(dataIn);\n      return writable;\n    }\n\n    @Override\n    public void close() throws IOException {\n      dataIn.close();\n    }\n    \n  }\n  \n<fim_suffix>  static class WritableSerializer extends Configured implements\n  \tSerializer<Writable> {\n    \n    private DataOutputStream dataOut;\n    \n    @Override\n    public void open(OutputStream out) {\n      if (out instanceof DataOutputStream) {\n        dataOut = (DataOutputStream) out;\n      } else {\n        dataOut = new DataOutputStream(out);\n      }\n    }\n\n    @Override\n    public void serialize(Writable w) throws IOException {\n      w.write(dataOut);\n    }\n\n    @Override\n    public void close() throws IOException {\n      dataOut.close();\n    }\n\n  }\n\n  @InterfaceAudience.Private\n  @Override\n  public boolean accept(Class<?> c) {\n    return Writable.class.isAssignableFrom(c);\n  }\n\n  @InterfaceAudience.Private\n  @Override\n  public Serializer<Writable> getSerializer(Class<Writable> c) {\n    return new WritableSerializer();\n  }\n  \n  @InterfaceAudience.Private\n  @Override\n  public Deserializer<Writable> getDeserializer(Class<Writable> c) {\n    return new WritableDeserializer(getConf(), c);\n  }\n\n}<fim_middle>// class below has no smell\n"}