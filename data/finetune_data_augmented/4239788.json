{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.functor.range;\n\nimport java.util.Collection;\n\n/**\n * Represent an interval of elements that varies from the <b>left limit</b>\n * to the <b>right limit</b>. Each limit in this range is an {@link Endpoint\n * Endpoint}. The left and the right limits can be <b>inclusive</b>\n * (<b>bounded</b>, <b>closed</b>) or <b>exclusive</b> (<b>unbounded</b>,\n * <b>open</b>).\n * <p>\n * The difference between each element within this range is called <b>step</b>.\n * The step can be positive or negative, displaying whether the range elements\n * are ascending or descending.\n *\n * @param <T> the type of elements held by this range.\n * @param <S> the type of the step of this range.\n * @see org.apache.commons.functor.range.Endpoint\n * @since 1.0\n * @version $Revision$ $Date$\n */\n<fim_suffix>public interface Range<T extends Comparable<?>, S> extends Iterable<T> {\n\n    /**\n     * Default left bound type.\n     */\n    BoundType DEFAULT_LEFT_BOUND_TYPE = BoundType.CLOSED;\n\n    /**\n     * Default right bound type.\n     */\n    BoundType DEFAULT_RIGHT_BOUND_TYPE = BoundType.OPEN;\n\n    /**\n     * Get the left limit of this range.\n     *\n     * @return Endpoint\n     */\n    Endpoint<T> getLeftEndpoint();\n\n    /**\n     * Get the right limit of this range.\n     *\n     * @return Endpoint\n     */\n    Endpoint<T> getRightEndpoint();\n\n    /**\n     * Get the step between elements of this range.\n     *\n     * @return Number\n     */\n    S getStep();\n\n    /**\n     * Returns <code>true</code> if this range is empty.\n     *\n     * @return <code>true</code> if this range is empty\n     */\n    boolean isEmpty();\n\n    /**\n     * Returns <code>true</code> if this range contains the specified element.\n     *\n     * @param obj element whose presence is being tested in this range\n     * @return <code>true</code> if this range contains the specified element\n     */\n    boolean contains(T obj);\n\n    /**\n     * Returns <code>true</code> is this range contains all of the elements in\n     * the specified collection.\n     *\n     * @param col collection to be checked for the containment in this range\n     * @return <code>true</code> if this range contains all of the elements in\n     * the specified collection\n     */\n    boolean containsAll(Collection<T> col);\n}<fim_middle>// class below has no smell\n"}