{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.druid.data.input.impl;\n\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport org.apache.druid.data.input.InputRow;\nimport org.apache.druid.guice.annotations.ExtensionPoint;\nimport org.apache.druid.java.util.common.collect.Utils;\n\nimport javax.annotation.Nullable;\nimport javax.validation.constraints.NotNull;\nimport java.util.List;\n\n<fim_suffix>@ExtensionPoint\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = StringInputRowParser.class)\n@JsonSubTypes(value = {\n    @JsonSubTypes.Type(name = \"string\", value = StringInputRowParser.class),\n    @JsonSubTypes.Type(name = \"map\", value = MapInputRowParser.class),\n    @JsonSubTypes.Type(name = \"noop\", value = NoopInputRowParser.class)\n})\npublic interface InputRowParser<T>\n{\n  /**\n   * Parse an input into list of {@link InputRow}. List can contains null for rows that should be thrown away,\n   * or throws {@code ParseException} if the input is unparseable. This method should never return null otherwise\n   * lots of things will break.\n   */\n  @NotNull\n  default List<InputRow> parseBatch(T input)\n  {\n    return Utils.nullableListOf(parse(input));\n  }\n\n  /**\n   * Parse an input into an {@link InputRow}. Return null if this input should be thrown away, or throws\n   * {@code ParseException} if the input is unparseable.\n   */\n  @Deprecated\n  @Nullable\n  default InputRow parse(T input)\n  {\n    return null;\n  }\n\n  ParseSpec getParseSpec();\n\n  InputRowParser withParseSpec(ParseSpec parseSpec);\n}<fim_middle>// class below has no smell\n"}