{"text": "<fim_prefix>/*\n * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage jdk.management.jfr;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.management.openmbean.CompositeData;\nimport javax.management.openmbean.TabularData;\n\nimport jdk.jfr.Configuration;\n\n\n/**\n * Management representation of a {@code Configuration}.\n *\n * @see Configuration\n *\n * @since 9\n */\npublic final class ConfigurationInfo {\n    private final Map<String, String> settings;\n    private final String name;\n    private final String label;\n    private final String description;\n    private final String provider;\n    private final String contents;\n\n    ConfigurationInfo(Configuration config) {\n        this.settings = config.getSettings();\n        this.name = config.getName();\n        this.label = config.getLabel();\n        this.description = config.getDescription();\n        this.provider = config.getProvider();\n        this.contents = config.getContents();\n    }\n\n<fim_suffix>    private ConfigurationInfo(CompositeData cd) {\n        this.settings = createMap(cd.get(\"settings\"));\n        this.name = (String) cd.get(\"name\");\n        this.label = (String) cd.get(\"label\");\n        this.description = (String) cd.get(\"description\");\n        this.provider = (String) cd.get(\"provider\");\n        this.contents = (String) cd.get(\"contents\");\n    }\n\n    private static Map<String, String> createMap(Object o) {\n        if (o instanceof TabularData) {\n            TabularData td = (TabularData) o;\n            Collection<?> values = td.values();\n            Map<String, String> map = new HashMap<>(values.size());\n            for (Object value : td.values()) {\n                if (value instanceof CompositeData) {\n                    CompositeData cdRow = (CompositeData) value;\n                    Object k = cdRow.get(\"key\");\n                    Object v = cdRow.get(\"value\");\n                    if (k instanceof String && v instanceof String) {\n                        map.put((String) k, (String) v);\n                    }\n                }\n            }\n            return Collections.unmodifiableMap(map);\n        }\n        return Collections.emptyMap();\n    }\n\n    /**\n     * Returns the provider of the configuration associated with this\n     * {@code ConfigurationInfo} (for example, {@code \"OpenJDK\"}).\n     *\n     * @return the provider, or {@code null} if doesn't exist\n     *\n     * @see Configuration#getProvider()\n     */\n    public String getProvider() {\n        return provider;\n    }\n\n    /**\n     * Returns the textual representation of the configuration associated with\n     * this {@code ConfigurationInfo}, typically the contents of the\n     * configuration file that was used to create the configuration.\n     *\n     * @return contents, or {@code null} if doesn't exist\n     *\n     * @see Configuration#getContents()\n     */\n    public String getContents() {\n        return contents;\n    }\n\n    /**\n     * Returns the settings for the configuration associated with this\n     * {@code ConfigurationInfo}.\n     *\n     * @return a {@code Map} with settings, not {@code null}\n     *\n     * @see Configuration#getSettings()\n     */\n    public Map<String, String> getSettings() {\n        return settings;\n    }\n\n    /**\n     * Returns the human-readable name (for example, {@code \"Continuous\"} or {@code \"Profiling\"}) for\n     * the configuration associated with this {@code ConfigurationInfo}\n     *\n     * @return the label, or {@code null} if doesn't exist\n     *\n     * @see Configuration#getLabel()\n     */\n    public String getLabel() {\n        return label;\n    }\n\n    /**\n     * Returns the name of the configuration associated with this\n     * {@code ConfigurationInfo} (for example, {@code \"default\"}).\n     *\n     * @return the name, or {@code null} if doesn't exist\n     *\n     * @see Configuration#getLabel()\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Returns a short sentence that describes the configuration associated with\n     * this {@code ConfigurationInfo} (for example, {@code \"Low\n     * overhead configuration safe for continuous use in production\n     * environments\"}.\n     *\n     * @return the description, or {@code null} if doesn't exist\n     */\n    public String getDescription() {\n        return description;\n    }\n\n    /**\n     * Returns a {@code ConfigurationInfo} object represented by the specified\n     * {@code CompositeData}.\n     * <p>\n     * The following table shows the required attributes that the specified {@code CompositeData} must contain.\n     * <blockquote>\n     * <table class=\"striped\">\n     * <caption>Required names and types for CompositeData</caption>\n     * <thead>\n     * <tr>\n     * <th scope=\"col\" style=\"text-align:left\">Name</th>\n     * <th scope=\"col\" style=\"text-align:left\">Type</th>\n     * </tr>\n     * </thead>\n     * <tbody>\n     * <tr>\n     * <th scope=\"row\">name</th>\n     * <td>{@code String}</td>\n     * </tr>\n     * <tr>\n     * <th scope=\"row\">label</th>\n     * <td>{@code String}</td>\n     * </tr>\n     * <tr>\n     * <th scope=\"row\">description</th>\n     * <td>{@code String}</td>\n     * </tr>\n     * <tr>\n     * <th scope=\"row\">provider</th>\n     * <td>{@code String}</td>\n     * </tr>\n     * <tr>\n     * <th scope=\"row\">contents</th>\n     * <td>{@code String}</td>\n     * </tr>\n     *\n     * <tr>\n     * <th scope=\"row\">settings</th>\n     * <td>{@code javax.management.openmbean.TabularData} with a\n     * {@code TabularType} with the keys {@code \"key\"} and {@code \"value\"}, both\n     * of the {@code String} type</td>\n     * </tr>\n     * </tbody>\n     * </table>\n     * </blockquote>\n     *\n     * @param cd {@code CompositeData} representing a {@code ConfigurationInfo}\n     *\n     * @throws IllegalArgumentException if {@code cd} does not represent a\n     *         {@code ConfigurationInfo} with the required attributes\n     *\n     * @return a {@code ConfigurationInfo} object represented by {@code cd} if\n     *         {@code cd} is not {@code null}, {@code null} otherwise\n     */\n    public static ConfigurationInfo from(CompositeData cd) {\n        if (cd == null) {\n            return null;\n        }\n        return new ConfigurationInfo(cd);\n    }\n\n    /**\n     * Returns a description of the configuration that is associated with this\n     * {@code ConfigurationInfo}.\n     *\n     * @return the description of the configuration, not {@code null}\n     */\n    @Override\n    public String toString() {\n        Stringifier s = new Stringifier();\n        s.add(\"name\", name);\n        s.add(\"label\", label);\n        s.add(\"description\", description);\n        s.add(\"provider\", provider);\n        return s.toString();\n    }\n}<fim_middle>// function below has no smell\n"}