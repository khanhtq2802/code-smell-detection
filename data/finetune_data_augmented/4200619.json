{"text": "<fim_prefix>/*****************************************************************\n *   Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n ****************************************************************/\n\npackage org.apache.cayenne.exp.parser;\n\nimport java.io.IOException;\n\nimport org.apache.cayenne.exp.Expression;\n\n/**\n * @since 4.2\n */\n<fim_suffix>public class ASTEnclosingObject extends SimpleNode {\n\n    public ASTEnclosingObject(Expression expression) {\n        this();\n        Node node = wrapChild(expression);\n        jjtAddChild(node, 0);\n        node.jjtSetParent(this);\n    }\n\n    public ASTEnclosingObject() {\n        this(0);\n    }\n\n    protected ASTEnclosingObject(int i) {\n        super(i);\n    }\n\n    @Override\n    protected String getExpressionOperator(int index) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    protected Object evaluateNode(Object o) throws Exception {\n        return o;\n    }\n\n    @Override\n    public void appendAsString(Appendable out) throws IOException {\n        out.append(\"SUPER:\");\n        super.appendAsString(out);\n    }\n\n    @Override\n    public Expression shallowCopy() {\n        return new ASTEnclosingObject(id);\n    }\n\n    @Override\n    public int getType() {\n        return Expression.ENCLOSING_OBJECT;\n    }\n}<fim_middle>// class below has no smell\n"}