{"text": "<fim_prefix>\n<fim_suffix>public class DrillFilterItemStarReWriterRule {\n  public static final ProjectOnScan PROJECT_ON_SCAN = new ProjectOnScan(\n          RelOptHelper.some(DrillProjectRel.class, RelOptHelper.any(DrillScanRel.class)),\n          \"DrillFilterItemStarReWriterRule.ProjectOnScan\");\n  public static final FilterOnScan FILTER_ON_SCAN = new FilterOnScan(\n      RelOptHelper.some(DrillFilterRel.class, RelOptHelper.any(DrillScanRel.class)),\n      \"DrillFilterItemStarReWriterRule.FilterOnScan\");\n  public static final FilterProjectScan FILTER_PROJECT_SCAN = new FilterProjectScan(\n      RelOptHelper.some(DrillFilterRel.class, RelOptHelper.some(DrillProjectRel.class, RelOptHelper.any(DrillScanRel.class))),\n      \"DrillFilterItemStarReWriterRule.FilterProjectScan\");\n  private static class ProjectOnScan extends RelOptRule {\n    ProjectOnScan(RelOptRuleOperand operand, String id) {\n      super(operand, id);\n    }\n    @Override\n    public boolean matches(RelOptRuleCall call) {\n      DrillScanRel scan = call.rel(1);\n      return scan.getGroupScan() instanceof AbstractParquetGroupScan && super.matches(call);\n    }\n    @Override\n    public void onMatch(RelOptRuleCall call) {\n      DrillProjectRel projectRel = call.rel(0);\n      DrillScanRel scanRel = call.rel(1);\n      ItemStarFieldsVisitor itemStarFieldsVisitor = new ItemStarFieldsVisitor(scanRel.getRowType().getFieldNames());\n      List<RexNode> projects = projectRel.getProjects();\n      for (RexNode project : projects) {\n        project.accept(itemStarFieldsVisitor);\n      }\n      // if there are no item fields, no need to proceed further\n      if (itemStarFieldsVisitor.hasNoItemStarFields()) {\n        return;\n      }\n      Map<String, DesiredField> itemStarFields = itemStarFieldsVisitor.getItemStarFields();\n      DrillScanRel newScan = createNewScan(scanRel, itemStarFields);\n      // re-write projects\n      Map<RexNode, Integer> fieldMapper = createFieldMapper(itemStarFields.values(), scanRel.getRowType().getFieldCount());\n      FieldsReWriter fieldsReWriter = new FieldsReWriter(fieldMapper);\n      List<RexNode> newProjects = new ArrayList<>();\n      for (RexNode node : projectRel.getChildExps()) {\n        newProjects.add(node.accept(fieldsReWriter));\n      }\n      DrillProjectRel newProject = new DrillProjectRel(\n          projectRel.getCluster(),\n          projectRel.getTraitSet(),\n          newScan,\n          newProjects,\n          projectRel.getRowType());\n      if (ProjectRemoveRule.isTrivial(newProject)) {\n        call.transformTo(newScan);\n      } else {\n        call.transformTo(newProject);\n      }\n    }\n  }\n  private static class FilterOnScan extends RelOptRule {\n    FilterOnScan(RelOptRuleOperand operand, String id) {\n      super(operand, id);\n    }\n    @Override\n    public boolean matches(RelOptRuleCall call) {\n      DrillScanRel scan = call.rel(1);\n      return scan.getGroupScan() instanceof AbstractParquetGroupScan && super.matches(call);\n    }\n    @Override\n    public void onMatch(RelOptRuleCall call) {\n      DrillFilterRel filterRel = call.rel(0);\n      DrillScanRel scanRel = call.rel(1);\n      transformFilterCall(filterRel, null, scanRel, call);\n    }\n  }\n  private static class FilterProjectScan extends RelOptRule {\n    FilterProjectScan(RelOptRuleOperand operand, String id) {\n      super(operand, id);\n    }\n    @Override\n    public boolean matches(RelOptRuleCall call) {\n      DrillScanRel scan = call.rel(2);\n      return scan.getGroupScan() instanceof AbstractParquetGroupScan && super.matches(call);\n    }\n    @Override\n    public void onMatch(RelOptRuleCall call) {\n      DrillFilterRel filterRel = call.rel(0);\n      DrillProjectRel projectRel = call.rel(1);\n      DrillScanRel scanRel = call.rel(2);\n      transformFilterCall(filterRel, projectRel, scanRel, call);\n    }\n  }\n  /**\n   * Removes item star call from filter expression and propagates changes into project (if present) and scan.\n   *\n   * @param filterRel original filter expression\n   * @param projectRel original project expression\n   * @param scanRel original scan expression\n   * @param call original rule call\n   */\n  private static void transformFilterCall(DrillFilterRel filterRel, DrillProjectRel projectRel, DrillScanRel scanRel, RelOptRuleCall call) {\n    List<String> fieldNames = projectRel == null ? scanRel.getRowType().getFieldNames() : projectRel.getRowType().getFieldNames();\n    ItemStarFieldsVisitor itemStarFieldsVisitor = new ItemStarFieldsVisitor(fieldNames);\n    filterRel.getCondition().accept(itemStarFieldsVisitor);\n    // if there are no item fields, no need to proceed further\n    if (itemStarFieldsVisitor.hasNoItemStarFields()) {\n      return;\n    }\n    Map<String, DesiredField> itemStarFields = itemStarFieldsVisitor.getItemStarFields();\n    DrillScanRel newScan = createNewScan(scanRel, itemStarFields);\n    // create new project if was present in call\n    DrillProjectRel newProject = null;\n    if (projectRel != null) {\n      // add new projects to the already existing in original project\n      int projectIndex = scanRel.getRowType().getFieldCount();\n      List<RexNode> newProjects = new ArrayList<>(projectRel.getProjects());\n      for (DesiredField desiredField : itemStarFields.values()) {\n        newProjects.add(new RexInputRef(projectIndex, desiredField.getType()));\n        projectIndex++;\n      }\n      RelDataType newProjectRowType = createNewRowType(\n          projectRel.getCluster().getTypeFactory(),\n          projectRel.getRowType().getFieldList(),\n          itemStarFields.keySet());\n      newProject = new DrillProjectRel(\n          projectRel.getCluster(),\n          projectRel.getTraitSet(),\n          newScan,\n          newProjects,\n          newProjectRowType);\n    }\n    // transform filter condition\n    Map<RexNode, Integer> fieldMapper = createFieldMapper(itemStarFields.values(), scanRel.getRowType().getFieldCount());\n    FieldsReWriter fieldsReWriter = new FieldsReWriter(fieldMapper);\n    RexNode newCondition = filterRel.getCondition().accept(fieldsReWriter);\n    // create new filter\n    DrillFilterRel newFilter = DrillFilterRel.create(newProject != null ? newProject : newScan, newCondition);\n    // wrap with project to have the same row type as before\n    List<RexNode> newProjects = new ArrayList<>();\n    RelDataType rowType = filterRel.getRowType();\n    List<RelDataTypeField> fieldList = rowType.getFieldList();\n    for (RelDataTypeField field : fieldList) {\n      RexInputRef inputRef = new RexInputRef(field.getIndex(), field.getType());\n      newProjects.add(inputRef);\n    }\n    DrillProjectRel wrapper = new DrillProjectRel(filterRel.getCluster(), filterRel.getTraitSet(), newFilter, newProjects, filterRel.getRowType());\n    call.transformTo(wrapper);\n  }\n  /**\n   * Creates new row type with merged original and new fields.\n   *\n   * @param typeFactory type factory\n   * @param originalFields original fields\n   * @param newFields new fields\n   * @return new row type with original and new fields\n   */\n  private static RelDataType createNewRowType(RelDataTypeFactory typeFactory,\n                                              List<RelDataTypeField> originalFields,\n                                              Collection<String> newFields) {\n    RelDataTypeHolder relDataTypeHolder = new RelDataTypeHolder();\n    // add original fields\n    for (RelDataTypeField field : originalFields) {\n      relDataTypeHolder.getField(typeFactory, field.getName());\n    }\n    // add new fields\n    for (String fieldName : newFields) {\n      relDataTypeHolder.getField(typeFactory, fieldName);\n    }\n    return new RelDataTypeDrillImpl(relDataTypeHolder, typeFactory);\n  }\n  /**\n   * Creates new scan with fields from original scan and fields used in item star operator.\n   *\n   * @param scanRel original scan expression\n   * @param itemStarFields item star fields\n   * @return new scan expression\n   */\n  private static DrillScanRel createNewScan(DrillScanRel scanRel, Map<String, DesiredField> itemStarFields) {\n    RelDataType newScanRowType = createNewRowType(\n            scanRel.getCluster().getTypeFactory(),\n            scanRel.getRowType().getFieldList(),\n            itemStarFields.keySet());\n    List<SchemaPath> columns = new ArrayList<>(scanRel.getColumns());<fim_middle>// class below is blob\n"}