{"text": "<fim_prefix>    public enum Mode {\n        CREATE,\n        EDIT,\n        TEMPLATE,\n        READONLY;\n    }\n    protected static final Logger LOG = LoggerFactory.getLogger(AjaxWizard.class);\n    private T item;\n    private final Mode mode;\n    private IEventSink eventSink;\n    private final PageReference pageRef;\n    /**\n     * Construct.\n     *\n     * @param id The component id.\n     * @param item model object.\n     * @param model wizard model\n     * @param mode <tt>true</tt> if edit mode.\n     * @param pageRef caller page reference.\n     */\n    public AjaxWizard(\n            final String id,\n            final T item,\n            final WizardModel model,\n            final Mode mode,\n            final PageReference pageRef) {\n        super(id);\n        this.item = item;\n        this.mode = mode;\n        this.pageRef = pageRef;\n        if (mode == Mode.READONLY) {\n            model.setCancelVisible(false);\n        }\n        add(new ListView<Component>(\"outerObjectsRepeater\", outerObjects) {\n            private static final long serialVersionUID = -9180479401817023838L;\n            @Override\n            protected void populateItem(final ListItem<Component> item) {\n                item.add(item.getModelObject());\n            }\n        });\n        setOutputMarkupId(true);\n        setDefaultModel(new CompoundPropertyModel<>(this));\n        init(model);\n    }\n    /**\n     * Add object outside the main container.\n     * Use this method just to be not influenced by specific inner object css'.\n     * Be sure to provide <tt>outer</tt> as id.\n     *\n     * @param childs components to be added.\n     * @return the current panel instance.\n     */\n    public final AjaxWizard<T> addOuterObject(final List<Component> childs) {\n        outerObjects.addAll(childs);\n        return this;\n    }\n    public AjaxWizard<T> setEventSink(final IEventSink eventSink) {\n        this.eventSink = eventSink;\n        return this;\n    }\n    @Override\n    protected void init(final IWizardModel wizardModel) {\n        super.init(wizardModel);\n        getForm().remove(FEEDBACK_ID);\n        if (mode == Mode.READONLY) {\n            final Iterator<IWizardStep> iter = wizardModel.stepIterator();\n            while (iter.hasNext()) {\n                WizardStep.class.cast(iter.next()).setEnabled(false);\n            }\n        }\n    }\n    @Override\n    protected Component newButtonBar(final String id) {\n        return new AjaxWizardMgtButtonBar<>(id, this, mode);\n    }\n    protected abstract void onCancelInternal();\n    protected abstract void sendError(final String message);\n    protected abstract void sendWarning(final String message);\n    protected abstract Future<Pair<Serializable, Serializable>> execute(\n            final Callable<Pair<Serializable, Serializable>> future);\n    /**\n     * Apply operation\n     *\n     * @param target request target\n     * @return a pair of payload (maybe null) and resulting object.\n     */\n    protected abstract Pair<Serializable, Serializable> onApplyInternal(final AjaxRequestTarget target);\n    protected abstract long getMaxWaitTimeInSeconds();\n    /**\n     * @see org.apache.wicket.extensions.wizard.Wizard#onCancel()\n     */\n    @Override\n    public final void onCancel() {\n        AjaxRequestTarget target = RequestCycle.get().find(AjaxRequestTarget.class).orElse(null);\n        try {\n            onCancelInternal();\n            if (eventSink == null) {\n                send(AjaxWizard.this, Broadcast.BUBBLE, new NewItemCancelEvent<>(item, target));\n            } else {\n                send(eventSink, Broadcast.EXACT, new NewItemCancelEvent<>(item, target));\n            }\n        } catch (Exception e) {\n            LOG.warn(\"Wizard error on cancel\", e);\n            sendError(StringUtils.isBlank(e.getMessage())\n                    ? e.getClass().getName() : e.getMessage());\n            ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n        }\n    }\n    /**\n     * @see org.apache.wicket.extensions.wizard.Wizard#onFinish()\n     */\n    @Override\n    public final void onFinish() {\n        AjaxRequestTarget target = RequestCycle.get().find(AjaxRequestTarget.class).orElse(null);\n        try {\n            final Serializable res = onApply(target);\n            if (eventSink == null) {\n                send(this, Broadcast.BUBBLE, new NewItemFinishEvent<>(item, target).setResult(res));\n            } else {\n                send(eventSink, Broadcast.EXACT, new NewItemFinishEvent<>(item, target).setResult(res));\n            }\n        } catch (TimeoutException te) {\n            LOG.warn(\"Operation applying took to long\", te);\n            if (eventSink == null) {\n                send(this, Broadcast.BUBBLE, new NewItemCancelEvent<>(item, target));\n            } else {\n                send(eventSink, Broadcast.EXACT, new NewItemCancelEvent<>(item, target));\n            }\n            sendWarning(getString(\"timeout\"));\n            ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n        } catch (Exception e) {\n            LOG.error(\"Wizard error on finish\", e);\n            sendError(StringUtils.isBlank(e.getMessage())\n                    ? e.getClass().getName() : e.getMessage());\n            ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n        }\n    }\n    @Override\n    public T getItem() {\n        return item;\n    }\n    /**\n     * Replaces the default value provided with the constructor.\n     *\n     * @param item new value.\n     * @return the current wizard instance.\n     */\n    public AjaxWizard<T> setItem(final T item) {\n        this.item = item;\n        return this;\n    }\n    public abstract static class NewItemEvent<T extends Serializable> {\n        private final T item;\n        private IModel<String> resourceModel;\n        private final AjaxRequestTarget target;\n        private WizardModalPanel<?> modalPanel;\n        public NewItemEvent(final T item, final AjaxRequestTarget target) {\n            this.item = item;\n            this.target = target;\n        }\n        public T getItem() {\n            return item;\n        }\n        public AjaxRequestTarget getTarget() {\n            return target;\n        }\n        public WizardModalPanel<?> getModalPanel() {\n            return modalPanel;\n        }\n        public NewItemEvent<T> forceModalPanel(final WizardModalPanel<?> modalPanel) {\n            this.modalPanel = modalPanel;\n            return this;\n        }\n        public IModel<String> getResourceModel() {\n            return resourceModel;\n        }\n        public NewItemEvent<T> setResourceModel(final IModel<String> resourceModel) {\n            this.resourceModel = resourceModel;\n            return this;\n        }\n        public abstract String getEventDescription();\n    }\n    public static class NewItemActionEvent<T extends Serializable> extends NewItemEvent<T> {\n        private static final String EVENT_DESCRIPTION = \"new\";\n        private int index;\n        public NewItemActionEvent(final T item, final AjaxRequestTarget target) {\n            super(item, target);\n        }\n        public NewItemActionEvent(final T item, final int index, final AjaxRequestTarget target) {\n            super(item, target);\n            this.index = index;\n        }\n        public int getIndex() {\n            return index;\n        }\n        @Override\n        public String getEventDescription() {\n            return NewItemActionEvent.EVENT_DESCRIPTION;\n        }\n    }\n    public static class EditItemActionEvent<T extends Serializable> extends NewItemActionEvent<T> {\n        private static final String EVENT_DESCRIPTION = \"edit\";\n        public EditItemActionEvent(final T item, final AjaxRequestTarget target) {\n            super(item, target);\n        }\n        public EditItemActionEvent(final T item, final int index, final AjaxRequestTarget target) {\n            super(item, index, target);\n        }\n        @Override\n        public String getEventDescription() {\n            return EditItemActionEvent.EVENT_DESCRIPTION;\n        }\n    }\n    public static class NewItemCancelEvent<T extends Serializable> extends NewItemEvent<T> {\n        private static final String EVENT_DESCRIPTION = \"cancel\";\n        public NewItemCancelEvent(final T item, final AjaxRequestTarget target) {\n            super(item, target);\n        }\n        @Override\n        public String getEventDescription() {\n            return NewItemCancelEvent.EVENT_DESCRIPTION;\n        }\n    }\n<fim_suffix>    public static class NewItemFinishEvent<T extends Serializable> extends NewItemEvent<T> {\n        private static final String EVENT_DESCRIPTION = \"finish\";\n        private Serializable result;\n        public NewItemFinishEvent(final T item, final AjaxRequestTarget target) {\n            super(item, target);\n        }\n        @Override\n        public String getEventDescription() {\n            return NewItemFinishEvent.EVENT_DESCRIPTION;\n        }\n        public NewItemFinishEvent<T> setResult(final Serializable result) {\n            this.result = result;\n            return this;\n        }\n        public Serializable getResult() {\n            return result;\n        }\n    }<fim_middle>// class below is data class\n"}