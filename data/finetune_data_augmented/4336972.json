{"text": "<fim_prefix>\t\t\t} catch (SecurityException se) {\n\t\t\t}\n\t\t}\n\t\tVector<Class<?>> bootImplementations = getImplementations(bootProperties, false);\n\t\tVector<Class<?>> systemImplementations = null;\n\t\tVector<Class<?>> applicationImplementations = null;\n\t\t// TEMP - making this sanity only breaks the unit test code\n\t\t// I will fix soon, djd.\n\t\tif (true || SanityManager.DEBUG) {\n\t\t\t// Don't allow external code to override our implementations.\n\t\t\tsystemImplementations = getImplementations(systemProperties, false);\n\t\t\tapplicationImplementations = getImplementations(applicationProperties, false);\n\t\t}\n        Vector<Class<?>> defaultImplementations = getDefaultImplementations();\n\t\tint implementationCount = 0;\n\t\tif (bootImplementations != null)\n\t\t\timplementationCount++;\n\t\t// TEMP - making this sanity only breaks the unit test code\n\t\tif (true || SanityManager.DEBUG) {\n\t\t\t// Don't allow external code to override our implementations.\n\t\t\tif (systemImplementations != null)\n\t\t\t\timplementationCount++;\n\t\t\tif (applicationImplementations != null)\n\t\t\t\timplementationCount++;\n\t\t}\n\t\tif (defaultImplementations != null)\n\t\t\timplementationCount++;\n        implementationSets = new ArrayList<List<Class<?>>>(implementationCount);\n\t\tif (bootImplementations != null)\n            implementationSets.add(bootImplementations);\n\t\tif (true || SanityManager.DEBUG) {\n\t\t\t// Don't allow external code to override our implementations.\n\t\t\tif (systemImplementations != null)\n                implementationSets.add(systemImplementations);\n\t\t\tif (applicationImplementations != null)\n                implementationSets.add(applicationImplementations);\n\t\t}\n\t\tif (defaultImplementations != null)\n            implementationSets.add(defaultImplementations);\n\t\tif (SanityManager.DEBUG) {\n\t\t\t// Look for the derby.debug.* properties.\n\t\t\tif (applicationProperties != null) {\n\t\t\t\taddDebugFlags(applicationProperties.getProperty(Monitor.DEBUG_FALSE), false);\n\t\t\t\taddDebugFlags(applicationProperties.getProperty(Monitor.DEBUG_TRUE), true);\n\t\t\t}\n\t\t\taddDebugFlags(PropertyUtil.getSystemProperty(Monitor.DEBUG_FALSE), false);\n\t\t\taddDebugFlags(PropertyUtil.getSystemProperty(Monitor.DEBUG_TRUE), true);\n\t\t}\n\t\ttry {\n\t\t\tsystemStreams = (InfoStreams) Monitor.startSystemModule(\"org.apache.derby.shared.common.stream.InfoStreams\");\n\t\t\tif (SanityManager.DEBUG) {\n\t\t\t\tSanityManager.SET_DEBUG_STREAM(systemStreams.stream().getPrintWriter());\n\t\t\t}\n\t\t\tcontextService = new ContextService();\n\t\t\tuuidFactory = (UUIDFactory) Monitor.startSystemModule(\"org.apache.derby.iapi.services.uuid.UUIDFactory\");\n            timerFactory = (TimerFactory)Monitor.startSystemModule(\"org.apache.derby.iapi.services.timer.TimerFactory\");\n            Monitor.startSystemModule(Module.JMX);\n\t\t} catch (StandardException se) {\n\t\t\t// if we can't create an error log or a context then there's no point going on\n\t\t\treportException(se);\n\t\t\t// dump any messages we have been saving ...\n\t\t\tdumpTempWriter(true);\n\t\t\treturn;\n        } catch (AccessControlException e) {\n            dumpTempWriter(true);\n            throw e;\n        }\n\t\t// switch cover to the real error stream and\n\t\t// dump any messages we have been saving ...\n\t\tdumpTempWriter(false);\n\t\tif (SanityManager.DEBUG && reportOn) {\n\t\t\tdumpProperties(\"-- Boot Properties --\", bootProperties);\n\t\t\tdumpProperties(\"-- System Properties --\", systemProperties);\n\t\t\tdumpProperties(\"-- Application Properties --\", applicationProperties);\n\t\t}\n\t\t// bootup all the service providers\n\t\tdetermineSupportedServiceProviders();\n\t\t// See if automatic booting of persistent services is required\n\t\tboolean bootAll = Boolean.valueOf(PropertyUtil.getSystemProperty(Property.BOOT_ALL)).booleanValue();\n\t\tstartServices(bootProperties, bootAll);\n\t\tstartServices(systemProperties, bootAll);\n\t\tstartServices(applicationProperties, bootAll);\n\t\tif (bootAll) // only if automatic booting is required\n\t\t\tbootPersistentServices( );\n\t}\n    public  String  getCanonicalServiceName( String userSpecifiedName )\n        throws StandardException\n    {\n        if ( userSpecifiedName == null ) { return null; }\n        PersistentService   correspondingService = findProviderForCreate(  userSpecifiedName );\n        if ( correspondingService == null ) { return null; }\n        else { return correspondingService.getCanonicalServiceName( userSpecifiedName ); }\n    }\n\tpublic Object findService(String factoryInterface, String serviceName) {\n\t\tif (serviceName == null)\n\t\t\treturn null;\n\t\tProtocolKey key;\n\t\ttry {\n\t\t\tkey = ProtocolKey.create(factoryInterface, serviceName);\n\t\t} catch (StandardException se) {\n\t\t\treturn null;\n\t\t}\n\t\tTopService myts = null;\n\t\tsynchronized (this) {\n\t\t\tfor (int i = 1; i < services.size(); i++) {\n\t\t\t\tTopService ts = services.get(i);\n\t\t\t\tif (ts.isPotentialService(key)) {\n\t\t\t\t\tmyts = ts;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// the isActiveService() call may sleep\n\t\t// so don't hold the 'this' synchronization\n\t\tif (myts != null) {\n\t\t\tif (myts.isActiveService(key))\n\t\t\t\treturn myts.getService();\n\t\t}\n\t\treturn null;\n\t}\n\tpublic Locale getLocale(Object serviceModule) {\n\t\tTopService ts = findTopService(serviceModule);\n\t\tif (ts == null)\n\t\t\treturn null;\n\t\treturn ts.serviceLocale;\n\t}\n\tpublic Locale getLocaleFromString(String localeDescription)\n\t\t\t\t\t\t\t\t\t\t\tthrows StandardException {\n\t\treturn staticGetLocaleFromString(localeDescription);\n\t}\n\t/**\n\t\tReturn the name of the service that the passed in module lives in.\n\t*/\n\tpublic String getServiceName(Object serviceModule) {\n\t\tTopService ts = findTopService(serviceModule);\n\t\tif (ts == null)\n\t\t\treturn null;\n\t\treturn ts.getServiceType().getUserServiceName(ts.getKey().getIdentifier());\n\t}\n\t/**\n\t\tSet the locale for the service *outside* of boot time.\n\t\t@exception StandardException Standard Derby error.\n\t*/\n\tpublic Locale setLocale(Object serviceModule, String userDefinedLocale)\n\t\tthrows StandardException {\n\t\tTopService ts = findTopService(serviceModule);\n\t\tif (ts == null)\n\t\t\treturn null;\n\t\tPersistentService provider = ts.getServiceType();\n\t\tif (provider == null)\n\t\t\treturn null;\n\t\tString serviceName = ts.getKey().getIdentifier();\n\t\tProperties properties = provider.getServiceProperties(serviceName, (Properties) null);\n\t\tproperties = new UpdateServiceProperties(provider, serviceName, properties, true);\n\t\treturn setLocale(properties, userDefinedLocale);\n\t}\n\t/**\n\t\tSet the locale for the service at boot time. The passed in\n\t\tproperties must be the one passed to the boot method.\n\t\t@exception StandardException Standard Derby error.\n\t*/\n\tpublic Locale setLocale(Properties serviceProperties, String userDefinedLocale)\n\t\tthrows StandardException {\n\t\tLocale locale = staticGetLocaleFromString(userDefinedLocale);\n\t\t// this will write the property through to the service.properties file.\n\t\tserviceProperties.put(Property.SERVICE_LOCALE, locale.toString());\n\t\treturn locale;\n\t}\n\t/**\n\t\tReturn the PersistentService object for a service.\n\t\tWill return null if the service does not exist.\n\t*/\n<fim_suffix>\tpublic PersistentService getServiceType(Object serviceModule) {\n\t\tTopService ts = findTopService(serviceModule);\n\t\tif (ts == null)\n\t\t\treturn null;\n\t\treturn ts.getServiceType();\n\t}<fim_middle>// function below has no smell\n"}