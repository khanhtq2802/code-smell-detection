{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.creativecommons.nutch;\n\nimport org.apache.nutch.metadata.CreativeCommons;\n\nimport org.apache.nutch.parse.Parse;\n\nimport org.apache.nutch.indexer.IndexingFilter;\nimport org.apache.nutch.indexer.IndexingException;\nimport org.apache.nutch.indexer.NutchDocument;\nimport org.apache.hadoop.io.Text;\n\nimport org.apache.nutch.crawl.CrawlDatum;\nimport org.apache.nutch.crawl.Inlinks;\nimport org.apache.nutch.metadata.Metadata;\n\nimport org.apache.hadoop.conf.Configuration;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.lang.invoke.MethodHandles;\nimport java.net.URL;\nimport java.util.StringTokenizer;\nimport java.net.MalformedURLException;\n\n/** Adds basic searchable fields to a document. */\n<fim_suffix>public class CCIndexingFilter implements IndexingFilter {\n  private static final Logger LOG = LoggerFactory\n      .getLogger(MethodHandles.lookup().lookupClass());\n\n  /** The name of the document field we use. */\n  public static String FIELD = \"cc\";\n\n  private Configuration conf;\n\n  public NutchDocument filter(NutchDocument doc, Parse parse, Text url,\n      CrawlDatum datum, Inlinks inlinks) throws IndexingException {\n\n    Metadata metadata = parse.getData().getParseMeta();\n    // index the license\n    String licenseUrl = metadata.get(CreativeCommons.LICENSE_URL);\n    if (licenseUrl != null) {\n      if (LOG.isInfoEnabled()) {\n        LOG.info(\"CC: indexing \" + licenseUrl + \" for: \" + url.toString());\n      }\n\n      // add the entire license as cc:license=xxx\n      addFeature(doc, \"license=\" + licenseUrl);\n\n      // index license attributes extracted of the license url\n      addUrlFeatures(doc, licenseUrl);\n    }\n\n    // index the license location as cc:meta=xxx\n    String licenseLocation = metadata.get(CreativeCommons.LICENSE_LOCATION);\n    if (licenseLocation != null) {\n      addFeature(doc, \"meta=\" + licenseLocation);\n    }\n\n    // index the work type cc:type=xxx\n    String workType = metadata.get(CreativeCommons.WORK_TYPE);\n    if (workType != null) {\n      addFeature(doc, workType);\n    }\n\n    return doc;\n  }\n\n  /**\n   * Add the features represented by a license URL. Urls are of the form\n   * \"http://creativecommons.org/licenses/xx-xx/xx/xx\", where \"xx\" names a\n   * license feature.\n   */\n  public void addUrlFeatures(NutchDocument doc, String urlString) {\n    try {\n      URL url = new URL(urlString);\n\n      // tokenize the path of the url, breaking at slashes and dashes\n      StringTokenizer names = new StringTokenizer(url.getPath(), \"/-\");\n\n      if (names.hasMoreTokens())\n        names.nextToken(); // throw away \"licenses\"\n\n      // add a feature per component after \"licenses\"\n      while (names.hasMoreTokens()) {\n        String feature = names.nextToken();\n        addFeature(doc, feature);\n      }\n    } catch (MalformedURLException e) {\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(\"CC: failed to parse url: \" + urlString + \" : \" + e);\n      }\n    }\n  }\n\n  private void addFeature(NutchDocument doc, String feature) {\n    doc.add(FIELD, feature);\n  }\n\n  public void setConf(Configuration conf) {\n    this.conf = conf;\n  }\n\n  public Configuration getConf() {\n    return this.conf;\n  }\n\n}<fim_middle>// class below has no smell\n"}