{"text": "<fim_prefix>\n<fim_suffix>    public static class DiscoverAnnotatedBeans implements DynamicDeployer {\n        public AppModule deploy(AppModule appModule) throws OpenEJBException {\n            for (EjbModule ejbModule : appModule.getEjbModules()) {\n                ejbModule.initAppModule(appModule);\n                setModule(ejbModule);\n                try {\n                    deploy(ejbModule);\n                } finally {\n                    removeModule();\n                }\n            }\n            for (ClientModule clientModule : appModule.getClientModules()) {\n                clientModule.initAppModule(appModule);\n                setModule(clientModule);\n                try {\n                    deploy(clientModule);\n                } finally {\n                    removeModule();\n                }\n            }\n            for (ConnectorModule connectorModule : appModule.getConnectorModules()) {\n                connectorModule.initAppModule(appModule);\n                setModule(connectorModule);\n                try {\n                    deploy(connectorModule);\n                } finally {\n                    removeModule();\n                }\n            }\n            for (WebModule webModule : appModule.getWebModules()) {\n                webModule.initAppModule(appModule);\n                setModule(webModule);\n                try {\n                    deploy(webModule);\n                } finally {\n                    removeModule();\n                }\n            }\n            final AdditionalBeanDiscoverer discoverer = SystemInstance.get().getComponent(AdditionalBeanDiscoverer.class);\n            if (discoverer != null) {\n                appModule = discoverer.discover(appModule);\n            }\n            return appModule;\n        }\n        public ClientModule deploy(ClientModule clientModule) throws OpenEJBException {\n            if (clientModule.getApplicationClient() == null){\n                clientModule.setApplicationClient(new ApplicationClient());\n            }\n            // Lots of jars have main classes so this might not even be an app client.\n            // We're not going to scrape it for @LocalClient or @RemoteClient annotations\n            // unless they flag us specifically by adding a META-INF/application-client.xml\n            //\n            // ClientModules that already have a AnnotationFinder have been generated automatically\n            // from an EjbModule, so we don't skip those ever.\n            if (clientModule.getFinder() == null && clientModule.getAltDDs().containsKey(\"application-client.xml\"))\n            if (clientModule.getApplicationClient() != null && clientModule.getApplicationClient().isMetadataComplete()) return clientModule;\n            IAnnotationFinder finder = clientModule.getFinder();\n            if (finder == null) {\n                try {\n                    finder = FinderFactory.createFinder(clientModule);\n                } catch (MalformedURLException e) {\n                    startupLogger.warning(\"startup.scrapeFailedForClientModule.url\", clientModule.getJarLocation());\n                    return clientModule;\n                } catch (Exception e) {\n                    startupLogger.warning(\"startup.scrapeFailedForClientModule\", e, clientModule.getJarLocation());\n                    return clientModule;\n                }\n            }\n            // This method is also called by the deploy(EjbModule) method to see if those\n            // modules have any @LocalClient or @RemoteClient classes\n            for (Annotated<Class<?>> clazz : finder.findMetaAnnotatedClasses(LocalClient.class)) {\n                clientModule.getLocalClients().add(clazz.get().getName());\n            }\n            for (Annotated<Class<?>> clazz : finder.findMetaAnnotatedClasses(RemoteClient.class)) {\n                clientModule.getRemoteClients().add(clazz.get().getName());\n            }\n            if (clientModule.getApplicationClient() == null){\n                if (clientModule.getRemoteClients().size() > 0 || clientModule.getLocalClients().size() > 0) {\n                    clientModule.setApplicationClient(new ApplicationClient());\n                }\n            }\n            return clientModule;\n        }\n        public ConnectorModule deploy(ConnectorModule connectorModule) throws OpenEJBException {\n        \torg.apache.openejb.jee.Connector connector = connectorModule.getConnector();\n        \tif (connector == null) {\n        \t\tconnector = new org.apache.openejb.jee.Connector();\n        \t}\n        \t// JCA 1.6 - 18.3.1 do not look at annotations if the provided connector\n        \t// deployment descriptor is \"meta-data complete\".\n        \tfloat specVersion = 0;\n        \ttry {\n        \t\tspecVersion = Float.parseFloat(connector.getVersion());\n        \t} catch (Exception e) {\n        \t}\n\t\t\tif (specVersion < 1.6 || Boolean.TRUE.equals(connector.isMetadataComplete())) {\n\t\t\t\treturn connectorModule;\n\t\t\t}\n        \tIAnnotationFinder finder = connectorModule.getFinder();\n        \tif (finder == null) {\n        \t\ttry {\n        \t\t\tfinder = FinderFactory.createFinder(connectorModule);\n\t\t\t\t\tconnectorModule.setFinder(finder);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// TODO: some sort of error\n\t\t\t\t\treturn connectorModule;\n\t\t\t\t}\n        \t}\n        \tList<Class<?>> connectorClasses = finder.findAnnotatedClasses(Connector.class);\n        \t// are we allowed to have more than one connector class? Not without a deployment descriptor\n        \tif (connector.getResourceAdapter() == null || connector.getResourceAdapter().getResourceAdapterClass() == null ||  connector.getResourceAdapter().getResourceAdapterClass().length() == 0) {\n        \t\tif (connectorClasses.size() == 0) {\n        \t\t\t// fail some validation here too\n        \t\t}\n        \t\tif (connectorClasses.size() > 1) {\n        \t\t\t// too many connector classes, this is against the spec\n        \t\t\t// something like connectorModule.getValidation().fail(ejbName, \"abstractAnnotatedAsBean\", annotationClass.getSimpleName(), beanClass.get().getName());\n        \t\t}\n        \t}\n        \tClass<?> connectorClass = null;\n        \tif (connectorClasses.size() == 1) {\n        \t\tconnectorClass = connectorClasses.get(0);\n        \t}\n        \tif (connectorClasses.size() > 1) {\n        \t\tfor (Class<?> cls : connectorClasses) {\n        \t\t\tif (cls.getName().equals(connector.getResourceAdapter().getResourceAdapterClass())) {\n        \t\t\t\tconnectorClass = cls;\n        \t\t\t\tbreak;\n        \t\t\t}\n        \t\t}\n        \t}\n        \tif (connectorClass != null) {\n\t    \t\tif (connector.getResourceAdapter() == null) {\n\t    \t\t\tconnector.setResourceAdapter(new ResourceAdapter());\n\t    \t\t}\n\t    \t\tif (connector.getResourceAdapter().getResourceAdapterClass() == null || connector.getResourceAdapter().getResourceAdapterClass().length() == 0) {\n\t    \t\t\tconnector.getResourceAdapter().setResourceAdapterClass(connectorClass.getName());\n\t    \t\t}\n\t    \t\tConnector connectorAnnotation = connectorClass.getAnnotation(Connector.class);\n\t    \t\tconnector.setDisplayNames(getTexts(connector.getDisplayNames(), connectorAnnotation.displayName()));\n\t    \t\tconnector.setDescriptions(getTexts(connector.getDescriptions(), connectorAnnotation.description()));\n\t    \t\tconnector.setEisType(getString(connector.getEisType(), connectorAnnotation.eisType()));\n\t    \t\tconnector.setVendorName(getString(connector.getVendorName(), connectorAnnotation.vendorName()));\n\t    \t\tconnector.setResourceAdapterVersion(getString(connector.getResourceAdapterVersion(), connectorAnnotation.version()));\n\t    \t\tif (connector.getIcons().isEmpty()) {\n\t    \t\t\tint smallIcons = connectorAnnotation.smallIcon().length;\n\t    \t\t\tint largeIcons = connectorAnnotation.largeIcon().length;\n\t    \t\t\tfor (int i = 0; i < smallIcons && i < largeIcons; i++) {\n\t    \t\t\t\tIcon icon = new Icon();\n                        // locale can't be specified in the annotation and it is en by default\n                        // so on other systems it doesn't work because Icon return the default locale\n                        icon.setLang(Locale.getDefault().getLanguage());\n\t    \t\t\t\tif (i < smallIcons) {\n\t    \t\t\t\t\ticon.setSmallIcon(connectorAnnotation.smallIcon()[i]);\n\t    \t\t\t\t}\n\t    \t\t\t\tif (i < largeIcons) {\n\t    \t\t\t\t\ticon.setLargeIcon(connectorAnnotation.largeIcon()[i]);\n\t    \t\t\t\t}\n\t    \t\t\t\tconnector.getIcons().add(icon);\n\t    \t\t\t}\n\t    \t\t}<fim_middle>// class below is blob\n"}