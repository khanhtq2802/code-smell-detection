{"text": "<fim_prefix>\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.contains:\n\t\t\treturn polylineContainsPolyline_(polyline_a, polyline_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.equals:\n\t\t\treturn polylineEqualsPolyline_(polyline_a, polyline_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.touches:\n\t\t\treturn polylineTouchesPolyline_(polyline_a, polyline_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.overlaps:\n\t\t\treturn polylineOverlapsPolyline_(polyline_a, polyline_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.crosses:\n\t\t\treturn polylineCrossesPolyline_(polyline_a, polyline_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tdefault:\n\t\t\tbreak; // warning fix\n\t\t}\n\t\treturn false;\n\t}\n\t// Returns true if the relation holds.\n\tprivate static boolean polylineRelatePoint_(Polyline polyline_a,\n\t\t\tPoint point_b, double tolerance, int relation,\n\t\t\tProgressTracker progress_tracker) {\n\t\tswitch (relation) {\n\t\tcase Relation.disjoint:\n\t\t\treturn polylineDisjointPoint_(polyline_a, point_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.contains:\n\t\t\treturn polylineContainsPoint_(polyline_a, point_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.touches:\n\t\t\treturn polylineTouchesPoint_(polyline_a, point_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tdefault:\n\t\t\tbreak; // warning fix\n\t\t}\n\t\treturn false;\n\t}\n\t// Returns true if the relation holds.\n\tprivate static boolean polylineRelateMultiPoint_(Polyline polyline_a,\n\t\t\tMultiPoint multipoint_b, double tolerance, int relation,\n\t\t\tProgressTracker progress_tracker) {\n\t\tswitch (relation) {\n\t\tcase Relation.disjoint:\n\t\t\treturn polylineDisjointMultiPoint_(polyline_a, multipoint_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tcase Relation.contains:\n\t\t\treturn polylineContainsMultiPoint_(polyline_a, multipoint_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tcase Relation.touches:\n\t\t\treturn polylineTouchesMultiPoint_(polyline_a, multipoint_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tcase Relation.crosses:\n\t\t\treturn polylineCrossesMultiPoint_(polyline_a, multipoint_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tdefault:\n\t\t\tbreak; // warning fix\n\t\t}\n\t\treturn false;\n\t}\n\t// Returns true if the relation holds.\n\tprivate static boolean polylineRelateEnvelope_(Polyline polyline_a,\n\t\t\tEnvelope envelope_b, double tolerance, int relation,\n\t\t\tProgressTracker progress_tracker) {\n\t\tif (polylineDisjointEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\tprogress_tracker)) {\n\t\t\tif (relation == Relation.disjoint)\n\t\t\t\treturn true;\n\t\t\treturn false;\n\t\t} else if (relation == Relation.disjoint) {\n\t\t\treturn false;\n\t\t}\n\t\tswitch (relation) {\n\t\tcase Relation.within:\n\t\t\treturn polylineWithinEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.contains:\n\t\t\treturn polylineContainsEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.equals:\n\t\t\treturn polylineEqualsEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.touches:\n\t\t\treturn polylineTouchesEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.overlaps:\n\t\t\treturn polylineOverlapsEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.crosses:\n\t\t\treturn polylineCrossesEnvelope_(polyline_a, envelope_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tdefault:\n\t\t\tbreak; // warning fix\n\t\t}\n\t\treturn false;\n\t}\n\t// Returns true if the relation holds.\n\tprivate static boolean multiPointRelateMultiPoint_(MultiPoint multipoint_a,\n\t\t\tMultiPoint multipoint_b, double tolerance, int relation,\n\t\t\tProgressTracker progress_tracker) {\n\t\tswitch (relation) {\n\t\tcase Relation.disjoint:\n\t\t\treturn multiPointDisjointMultiPoint_(multipoint_a, multipoint_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tcase Relation.within:\n\t\t\treturn multiPointContainsMultiPoint_(multipoint_b, multipoint_a,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tcase Relation.contains:\n\t\t\treturn multiPointContainsMultiPoint_(multipoint_a, multipoint_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tcase Relation.equals:\n\t\t\treturn multiPointEqualsMultiPoint_(multipoint_a, multipoint_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tcase Relation.overlaps:\n\t\t\treturn multiPointOverlapsMultiPoint_(multipoint_a, multipoint_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tdefault:\n\t\t\tbreak; // warning fix\n\t\t}\n\t\treturn false;\n\t}\n\t// Returns true if the relation holds.\n\tprivate static boolean multiPointRelatePoint_(MultiPoint multipoint_a,\n\t\t\tPoint point_b, double tolerance, int relation,\n\t\t\tProgressTracker progress_tracker) {\n\t\tswitch (relation) {\n\t\tcase Relation.disjoint:\n\t\t\treturn multiPointDisjointPoint_(multipoint_a, point_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.within:\n\t\t\treturn multiPointWithinPoint_(multipoint_a, point_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.contains:\n\t\t\treturn multiPointContainsPoint_(multipoint_a, point_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tcase Relation.equals:\n\t\t\treturn multiPointEqualsPoint_(multipoint_a, point_b, tolerance,\n\t\t\t\t\tprogress_tracker);\n\t\tdefault:\n\t\t\tbreak; // warning fix\n\t\t}\n\t\treturn false;\n\t}\n\t// Returns true if the relation holds.\n<fim_suffix>\tprivate static boolean multiPointRelateEnvelope_(MultiPoint multipoint_a,\n\t\t\tEnvelope envelope_b, double tolerance, int relation,\n\t\t\tProgressTracker progress_tracker) {\n\t\tswitch (relation) {\n\t\tcase Relation.disjoint:\n\t\t\treturn multiPointDisjointEnvelope_(multipoint_a, envelope_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tcase Relation.within:\n\t\t\treturn multiPointWithinEnvelope_(multipoint_a, envelope_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tcase Relation.contains:\n\t\t\treturn multiPointContainsEnvelope_(multipoint_a, envelope_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tcase Relation.equals:\n\t\t\treturn multiPointEqualsEnvelope_(multipoint_a, envelope_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tcase Relation.touches:\n\t\t\treturn multiPointTouchesEnvelope_(multipoint_a, envelope_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tcase Relation.crosses:\n\t\t\treturn multiPointCrossesEnvelope_(multipoint_a, envelope_b,\n\t\t\t\t\ttolerance, progress_tracker);\n\t\tdefault:\n\t\t\tbreak; // warning fix\n\t\t}\n\t\treturn false;\n\t}<fim_middle>// function below has no smell\n"}