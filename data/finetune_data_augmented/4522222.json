{"text": "<fim_prefix>/* \n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.felix.upnp.basedriver.importer.core.event.structs;\n\nimport java.util.Dictionary;\nimport java.util.Hashtable;\nimport java.util.Vector;\n\nimport org.osgi.service.upnp.UPnPEventListener;\n\n/* \n* @author <a href=\"mailto:dev@felix.apache.org\">Felix Project Team</a>\n*/\npublic class Sid2Listeners {\n\tprivate Hashtable sidListener;\n\tprivate Hashtable alreadyfirst;\n    \n\tpublic Sid2Listeners() {\n\t\tthis.sidListener = new Hashtable();\n\t\tthis.alreadyfirst = new Hashtable();\n\t}\n    \n<fim_suffix>\tpublic void put(String sid, UPnPEventListener listener) {\n\t\tif (!sidListener.containsKey(sid)) {\n\t\t\tVector vec = new Vector();\n\t\t\tvec.add(listener);\n\t\t\tsidListener.put(sid, vec);\n\t\t} else {\n\t\t\tVector vec = (Vector) sidListener.get(sid);\n\t\t\tif (!vec.contains(listener)) {\n\t\t\t\tvec.add(listener);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic final void remove(String sid) {\n\t\tsidListener.remove(sid);\n\t}\n\n\tpublic final Vector get(String sid) {\n\t\treturn ((Vector) sidListener.get(sid));\n\t}\n\n    /**\n\t * @param sid\n\t * @param dictionary\n\t */\n\tpublic boolean updateListeners(String sid, String deviceID,String serviceID, Dictionary dictionary) {\n        \n\t\tVector listeners = (Vector) sidListener.get(sid);\n\t\tif (listeners != null) {\n\t\t\tfor (int i = 0; i < listeners.size(); i++) {\n\t\t\t\tUPnPEventListener listener = (UPnPEventListener) listeners.elementAt(i);\n\t\t\t\tlistener.notifyUPnPEvent(deviceID, serviceID, dictionary);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n    \n\tpublic boolean getAlreadyFirst(String sid) {\n\t\treturn ((Boolean) alreadyfirst.get(sid)).booleanValue();\n\t}\n\n    public void setAlreadyFirst(String sid, boolean bool) {\n\t\talreadyfirst.put(sid, new Boolean(bool));\n\t}\n}<fim_middle>// function below has no smell\n"}