{"text": "<fim_prefix>\t\t\t} catch (IOException e) {\n\t\t\t\tlogger.warn(\"Error loading \" + propertyFileLocation + \": \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tpropertyFileProvided = false;\n\t\t}\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Using provided properties: \" + providedProperties);\n\t\t}\n\t\tif (connectionPropertyPrefix == null) {\n\t\t\tconnectionPropertyPrefix = \"\";\n\t\t}\n\t\tif (connectionPropertyPrefix.length() > 0 && !connectionPropertyPrefix.endsWith(\".\")) {\n\t\t\tconnectionPropertyPrefix = connectionPropertyPrefix + \".\";\n\t\t}\n\t\tlogger.debug(\"Using connection properties prefix: \" + connectionPropertyPrefix);\n\t\tif (cachingPropertyPrefix == null) {\n\t\t\tcachingPropertyPrefix = \"\";\n\t\t}\n\t\tif (cachingPropertyPrefix.length() > 0 && !cachingPropertyPrefix.endsWith(\".\")) {\n\t\t\tcachingPropertyPrefix = cachingPropertyPrefix + \".\";\n\t\t}\n\t\tlogger.debug(\"Using caching properties prefix: \" + cachingPropertyPrefix);\n\t\tif (!(StringUtils.hasText(connectionCachingEnabled) ||\n\t\t\t\tprovidedProperties.containsKey(attributeToPropertyMap.get(CONNECTION_CACHING_ENABLED_ATTRIBUTE)))) {\n\t\t\tconnectionCachingEnabled = DEFAULT_CONNECTION_CACHING_ENABLED;\n\t\t}\n\t\tsetRequiredAttribute(builder, parserContext, element, providedProperties, connectionPropertyPrefix, propertyFileProvided, url, URL_ATTRIBUTE, \"URL\");\n\t\tsetOptionalAttribute(builder, providedProperties, connectionPropertyPrefix, username, USERNAME_ATTRIBUTE);\n\t\tsetOptionalAttribute(builder, providedProperties, connectionPropertyPrefix, password, PASSWORD_ATTRIBUTE);\n\t\tsetOptionalAttribute(builder, providedProperties, connectionPropertyPrefix, connectionCachingEnabled, CONNECTION_CACHING_ENABLED_ATTRIBUTE);\n\t\tsetOptionalAttribute(builder, providedProperties, connectionPropertyPrefix, fastConnectionFailoverEnabled, FAST_CONNECTION_FAILOVER_ENABLED_ATTRIBUTE);\n\t\tsetOptionalAttribute(builder, providedProperties, connectionPropertyPrefix, onsConfiguration, ONS_CONFIGURATION_ATTRIBUTE);\n\t\tProperties providedConnectionProperties = new Properties();\n\t\tProperties providedCachingProperties = new Properties();\n\t\tfor (String key : providedProperties.keySet()) {\n\t\t\tif (StringUtils.hasText(connectionPropertyPrefix) && key.startsWith(connectionPropertyPrefix)) {\n\t\t\t\tString newKey = key.substring(connectionPropertyPrefix.length());\n\t\t\t\tprovidedConnectionProperties.put(newKey, providedProperties.get(key));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (StringUtils.hasText(cachingPropertyPrefix) && key.startsWith(cachingPropertyPrefix)) {\n\t\t\t\t\tString newKey = key.substring(cachingPropertyPrefix.length());\n\t\t\t\t\tprovidedCachingProperties.put(newKey, providedProperties.get(key));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tprovidedConnectionProperties.put(key, providedProperties.get(key));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// look for connectionProperties\n\t\tObject connProperties = DomUtils.getChildElementValueByTagName(element, CONNECTION_PROPERTIES_CHILD_ELEMENT);\n\t\tif (connProperties != null) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Using connection-properties\");\n\t\t\t}\n\t\t\tbuilder.addPropertyValue(\"connectionProperties\", connProperties);\n\t\t}\n\t\telse {\n\t\t\tif (providedConnectionProperties.size() > 0) {\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Using provided connection properties: \" + providedConnectionProperties);\n\t\t\t\t}\n\t\t\t\tbuilder.addPropertyValue(\"connectionProperties\", providedConnectionProperties);\n\t\t\t}\n\t\t}\n\t\t// look for connectionCacheProperties\n\t\tObject cacheProperties = DomUtils.getChildElementValueByTagName(element, CONNECTION_CACHE_PROPERTIES_CHILD_ELEMENT);\n\t\tif (cacheProperties != null) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Using connection-cache-properties: [\" + cacheProperties + \"]\");\n\t\t\t}\n\t\t\tbuilder.addPropertyValue(\"connectionCacheProperties\", cacheProperties);\n\t\t}\n\t\telse {\n\t\t\tif (providedCachingProperties.size() > 0) {\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Using provided caching properties: \" + providedCachingProperties);\n\t\t\t\t}\n\t\t\t\tbuilder.addPropertyValue(\"connectionCacheProperties\", providedCachingProperties);\n\t\t\t}\n\t\t}\n\t\tbuilder.setRole(BeanDefinition.ROLE_SUPPORT);\n\t}\n\tprotected String getBeanClassName(Element element) {\n\t\treturn \"oracle.jdbc.pool.OracleDataSource\";\n\t}\n\tprotected boolean shouldGenerateId() {\n\t\treturn false;\n\t}\n\tprivate void setRequiredAttribute(BeanDefinitionBuilder builder,\n\t\t\t  ParserContext parserContext,\n\t\t\t  Element element,\n\t\t\t\tMap<String, Object> providedProperties,\n\t\t\t\tString propertyPrefix,\n\t\t\t\tboolean propertyFileProvided,\n\t\t\t\tString attributeValue,\n\t\t\t\tString attributeName,\n\t\t\t\tString orclPropertyName) {\n\t\tString propertyToRemove = null;\n\t\tString propertyKey = propertyPrefix != null ? propertyPrefix + attributeName : attributeName;\n\t\tString orclKey = propertyPrefix != null ? propertyPrefix + orclPropertyName : orclPropertyName;\n\t\tif (StringUtils.hasText(attributeValue)) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Registering required attribute \" + orclPropertyName + \" with attribute value \" + attributeValue);\n\t\t\t}\n\t\t\tbuilder.addPropertyValue(orclPropertyName, attributeValue);\n\t\t}\n\t\telse if (providedProperties.containsKey(propertyKey) || providedProperties.containsKey(orclKey)) {\n\t\t\tObject value;\n\t\t\tif (providedProperties.containsKey(propertyKey)) {\n\t\t\t\tvalue = providedProperties.get(propertyKey);\n\t\t\t\tpropertyToRemove = propertyKey;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalue = providedProperties.get(orclKey);\n\t\t\t\tpropertyToRemove = orclKey;\n\t\t\t}\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Registering required attribute \" + orclPropertyName + \" with property value \" + value);\n\t\t\t}\n\t\t\tbuilder.addPropertyValue(orclPropertyName, value);\n\t\t}\n\t\telse {\n\t\t\tif (propertyFileProvided) {\n\t\t\t\tparserContext.getReaderContext().error(\n\t\t\t\t\t\t\"pooling-datasource defined without the required '\" + attributeName +\n\t\t\t\t\t\t\"' attribute and the property file does not contain a \\\"\" +\n\t\t\t\t\t\tattributeToPropertyMap.get(attributeName) + \"\\\" entry\", element);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tparserContext.getReaderContext().error(\"pooling-datasource defined without the required '\" + attributeName +\n\t\t\t\t\t\t\"' attribute and a property file was not found at location \\\"\" + DEFAULT_PROPERTY_FILE_LOCATION + \"\\\"\",\n\t\t\t\t\t\telement);\n\t\t\t}\n\t\t}\n\t\tif (propertyToRemove != null) {\n\t\t\tremoveProvidedProperty(providedProperties, propertyToRemove);\n\t\t}\n\t}\n<fim_suffix>\tprivate void setOptionalAttribute(BeanDefinitionBuilder builder,\n\t\t\t\tMap<String, Object> providedProperties,\n\t\t\t\tString propertyPrefix,\n\t\t\t\tString attributeValue,\n\t\t\t\tString attributeName) {\n\t\tString propertyKey;\n\t\tif (\"username\".equals(attributeName)) {\n\t\t\tString userKey = (propertyPrefix != null ?\n\t\t\t\t\tpropertyPrefix + \"user\" :\n\t\t\t\t\t\"user\");\n\t\t\tif (providedProperties.containsKey(userKey)) {\n\t\t\t\tpropertyKey = userKey;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpropertyKey = (propertyPrefix != null ?\n\t\t\t\t\t\tpropertyPrefix + attributeName :\n\t\t\t\t\t\tattributeName);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tpropertyKey = (propertyPrefix != null ?\n\t\t\t\t\tpropertyPrefix + attributeToPropertyMap.get(attributeName) :\n\t\t\t\t\tattributeToPropertyMap.get(attributeName));\n\t\t}\n\t\tif (StringUtils.hasText(attributeValue)) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tif (\"password\".equals(attributeName)) {\n\t\t\t\t\tlogger.debug(\"Registering optional attribute \" + attributeToPropertyMap.get(attributeName) +\n\t\t\t\t\t\t\t\" with attribute value ******\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogger.debug(\"Registering optional attribute \" + attributeToPropertyMap.get(attributeName) +\n\t\t\t\t\t\t\t\" with attribute value \" + attributeValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuilder.addPropertyValue(attributeToPropertyMap.get(attributeName), attributeValue);\n\t\t}\n\t\telse if (providedProperties.containsKey(propertyKey)) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Registering optional attribute \" + attributeToPropertyMap.get(attributeName) +\n\t\t\t\t\t\t\" with property value \" +\n\t\t\t\t\t\t(\"password\".equals(attributeName) ? \"******\" : providedProperties.get(propertyKey)));\n\t\t\t}\n\t\t\tbuilder.addPropertyValue(attributeToPropertyMap.get(attributeName), providedProperties.get(propertyKey));\n\t\t}\n\t\tremoveProvidedProperty(providedProperties, propertyKey);\n\t}<fim_middle>// function below is long method\n"}