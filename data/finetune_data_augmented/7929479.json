{"text": "<fim_prefix>/*******************************************************************************\n * Copyright 2005, CHISEL Group, University of Victoria, Victoria, BC, Canada.\n * All rights reserved. This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License v1.0 which\n * accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n * \n * Contributors: The Chisel Group, University of Victoria\n *******************************************************************************/\npackage org.eclipse.zest.layouts.algorithms.internal;\n\nimport java.util.Comparator;\nimport java.util.TreeSet;\n\nimport org.eclipse.zest.layouts.dataStructures.DisplayIndependentPoint;\nimport org.eclipse.zest.layouts.dataStructures.DisplayIndependentRectangle;\nimport org.eclipse.zest.layouts.dataStructures.InternalNode;\n\npublic class DynamicScreen {\n\n\tprivate TreeSet XCoords = null;\n\tprivate TreeSet YCoords = null;\n\n\tprivate DisplayIndependentRectangle screenBounds = null;\n\n\tdouble minX = 0.0;\n\tdouble minY = 0.0;\n\tdouble maxX = 0.0;\n\tdouble maxY = 0.0;\n\n\tpublic void cleanScreen() {\n\t\tminX = 0.0;\n\t\tminY = 0.0;\n\t\tmaxX = 0.0;\n\t\tmaxY = 0.0;\n\t}\n\n<fim_suffix>\tclass XComparator implements Comparator {\n\t\tpublic int compare(Object arg0, Object arg1) {\n\t\t\tInternalNode n1 = (InternalNode) arg0;\n\t\t\tInternalNode n2 = (InternalNode) arg1;\n\t\t\tif (n1.getInternalX() > n2.getInternalX())\n\t\t\t\treturn +1;\n\t\t\telse if (n1.getInternalX() < n2.getInternalX())\n\t\t\t\treturn -1;\n\t\t\telse {\n\t\t\t\treturn n1.toString().compareTo(n2.toString());\n\t\t\t}\n\n\t\t}\n\t}\n\n\tclass YComparator implements Comparator {\n\t\tpublic int compare(Object arg0, Object arg1) {\n\t\t\tInternalNode n1 = (InternalNode) arg0;\n\t\t\tInternalNode n2 = (InternalNode) arg1;\n\t\t\tif (n1.getInternalY() > n2.getInternalY())\n\t\t\t\treturn +1;\n\t\t\telse if (n1.getInternalY() < n2.getInternalY())\n\t\t\t\treturn -1;\n\t\t\telse {\n\t\t\t\treturn n1.toString().compareTo(n2.toString());\n\t\t\t}\n\n\t\t}\n\t}\n\n\tpublic DynamicScreen(int x, int y, int width, int height) {\n\t\tXCoords = new TreeSet(new XComparator());\n\t\tYCoords = new TreeSet(new YComparator());\n\n\t\tthis.screenBounds = new DisplayIndependentRectangle(x, y, width, height);\n\t}\n\n\tpublic void removeNode(InternalNode node) {\n\t\tXCoords.remove(node);\n\t\tYCoords.remove(node);\n\t}\n\n\tpublic void addNode(InternalNode node) {\n\t\tXCoords.add(node);\n\t\tYCoords.add(node);\n\t}\n\n\tpublic DisplayIndependentPoint getScreenLocation(InternalNode node) {\n\n\t\tDisplayIndependentRectangle layoutBounds = calculateBounds();\n\n\t\tdouble x = (layoutBounds.width == 0) ? 0 : (node.getInternalX() - layoutBounds.x) / layoutBounds.width;\n\t\tdouble y = (layoutBounds.height == 0) ? 0 : (node.getInternalY() - layoutBounds.y) / layoutBounds.height;\n\n\t\tx = screenBounds.x + x * screenBounds.width;\n\t\ty = screenBounds.y + y * screenBounds.height;\n\n\t\treturn new DisplayIndependentPoint(x, y);\n\t}\n\n\tpublic DisplayIndependentPoint getVirtualLocation(DisplayIndependentPoint point) {\n\n\t\tDisplayIndependentRectangle layoutBounds = calculateBounds();\n\n\t\tdouble x = (point.x / screenBounds.width) * layoutBounds.width + layoutBounds.x;\n\t\tdouble y = (point.y / screenBounds.height) * layoutBounds.height + layoutBounds.y;\n\n\t\treturn new DisplayIndependentPoint(x, y);\n\t}\n\n\tprivate DisplayIndependentRectangle calculateBounds() {\n\t\tInternalNode n1 = (InternalNode) XCoords.first();\n\t\tInternalNode n2 = (InternalNode) XCoords.last();\n\t\tInternalNode n3 = (InternalNode) YCoords.first();\n\t\tInternalNode n4 = (InternalNode) YCoords.last();\n\t\tdouble x = n1.getInternalX();\n\t\tdouble width = n2.getInternalX();\n\t\tdouble y = n3.getInternalY();\n\t\tdouble height = n4.getInternalY();\n\t\treturn new DisplayIndependentRectangle(x, y, width - x, height - y);\n\t}\n\n}<fim_middle>// class below has no smell\n"}