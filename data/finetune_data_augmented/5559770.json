{"text": "<fim_prefix>    context.setAllowPerDatabase(false);\n    context.setValidators(KafkaPrivilegeModel.getInstance().getPrivilegeValidators());\n    providerBackend.initialize(context);\n    // Instantiate the configured policyEngine\n    Constructor<?> policyConstructor =\n        Class.forName(policyEngineName).getDeclaredConstructor(ProviderBackend.class);\n    policyConstructor.setAccessible(true);\n    PolicyEngine policyEngine =\n        (PolicyEngine) policyConstructor.newInstance(new Object[]{providerBackend});\n    // Instantiate the configured authProvider\n    Constructor<?> constructor =\n        Class.forName(authProviderName).getDeclaredConstructor(Configuration.class, String.class,\n            PolicyEngine.class, Model.class);\n    constructor.setAccessible(true);\n    return (AuthorizationProvider) constructor.newInstance(new Object[]{authConf, resourceName,\n        policyEngine, KafkaPrivilegeModel.getInstance()});\n  }\n  /**\n   * Authorize access to a Kafka privilege\n   */\n  public boolean authorize(RequestChannel.Session session, Operation operation, Resource resource) {\n      List<Authorizable> authorizables = ConvertUtil.convertResourceToAuthorizable(session.clientAddress().getHostAddress(), resource);\n      Set<KafkaAction> actions = Sets.newHashSet(actionFactory.getActionByName(operation.name()));\n      return authProvider.hasAccess(new Subject(getName(session)), authorizables, actions, ActiveRoleSet.ALL);\n  }\n  public void addAcls(scala.collection.immutable.Set<Acl> acls, final Resource resource) {\n    verifyAcls(acls);\n    LOG.info(\"Adding Acl: acl->\" + acls + \" resource->\" + resource);\n    final Iterator<Acl> iterator = acls.iterator();\n    while (iterator.hasNext()) {\n      final Acl acl = iterator.next();\n      final String role = getRole(acl);\n      if (!roleExists(role)) {\n        throw new KafkaException(\"Can not add Acl for non-existent Role: \" + role);\n      }\n      execute(new Command<Void>() {\n        @Override\n        public Void run(SentryGenericServiceClient client) throws Exception {\n          client.grantPrivilege(\n              requestorName, role, COMPONENT_NAME, toTSentryPrivilege(acl, resource));\n          return null;\n        }\n      });\n    }\n  }\n  public boolean removeAcls(scala.collection.immutable.Set<Acl> acls, final Resource resource) {\n    verifyAcls(acls);\n    LOG.info(\"Removing Acl: acl->\" + acls + \" resource->\" + resource);\n    final Iterator<Acl> iterator = acls.iterator();\n    while (iterator.hasNext()) {\n      final Acl acl = iterator.next();\n      final String role = getRole(acl);\n      try {\n        execute(new Command<Void>() {\n          @Override\n          public Void run(SentryGenericServiceClient client) throws Exception {\n            client.dropPrivilege(\n                    requestorName, role, toTSentryPrivilege(acl, resource));\n            return null;\n          }\n        });\n      } catch (KafkaException kex) {\n        LOG.error(\"Failed to remove acls.\", kex);\n        return false;\n      }\n    }\n    return true;\n  }\n  public void addRole(final String role) {\n    if (roleExists(role)) {\n      throw new KafkaException(\"Can not create an existing role, \" + role + \", again.\");\n    }\n    execute(new Command<Void>() {\n      @Override\n      public Void run(SentryGenericServiceClient client) throws Exception {\n        client.createRole(\n            requestorName, role, COMPONENT_NAME);\n        return null;\n      }\n    });\n  }\n  public void addRoleToGroups(final String role, final Set<String> groups) {\n    execute(new Command<Void>() {\n      @Override\n      public Void run(SentryGenericServiceClient client) throws Exception {\n        client.grantRoleToGroups(\n            requestorName, role, COMPONENT_NAME, groups);\n        return null;\n      }\n    });\n  }\n  public void dropAllRoles() {\n    final List<String> roles = getAllRoles();\n    execute(new Command<Void>() {\n      @Override\n      public Void run(SentryGenericServiceClient client) throws Exception {\n        for (String role : roles) {\n          client.dropRole(requestorName, role, COMPONENT_NAME);\n        }\n        return null;\n      }\n    });\n  }\n  private List<String> getRolesforGroup(final String groupName) {\n    final List<String> roles = new ArrayList<>();\n    execute(new Command<Void>() {\n      @Override\n      public Void run(SentryGenericServiceClient client) throws Exception {\n        for (TSentryRole tSentryRole : client.listRolesByGroupName(requestorName, groupName, COMPONENT_NAME)) {\n          roles.add(tSentryRole.getRoleName());\n        }\n        return null;\n      }\n    });\n    return roles;\n  }\n  private SentryGenericServiceClient getClient() throws Exception {\n    return SentryGenericServiceClientFactory.create(this.authConf);\n  }\n  public boolean removeAcls(final Resource resource) {\n    LOG.info(\"Removing Acls for Resource: resource->\" + resource);\n    List<String> roles = getAllRoles();\n    final List<TSentryPrivilege> tSentryPrivileges = getAllPrivileges(roles);\n    try {\n      execute(new Command<Void>() {\n        @Override\n        public Void run(SentryGenericServiceClient client) throws Exception {\n          for (TSentryPrivilege tSentryPrivilege : tSentryPrivileges) {\n            if (isPrivilegeForResource(tSentryPrivilege, resource)) {\n              client.dropPrivilege(\n                        requestorName, COMPONENT_NAME, tSentryPrivilege);\n            }\n          }\n          return null;\n        }\n      });\n    } catch (KafkaException kex) {\n      LOG.error(\"Failed to remove acls.\", kex);\n      return false;\n    }\n    return true;\n  }\n  public scala.collection.immutable.Set<Acl> getAcls(final Resource resource) {\n    final Option<scala.collection.immutable.Set<Acl>> acls = getAcls().get(resource);\n    if (acls.nonEmpty()) {\n      return acls.get();\n    }\n    return new scala.collection.immutable.HashSet<Acl>();\n  }\n  public Map<Resource, scala.collection.immutable.Set<Acl>> getAcls(KafkaPrincipal principal) {\n    if (principal.getPrincipalType().toLowerCase().equals(\"group\")) {\n      List<String> roles = getRolesforGroup(principal.getName());\n      return getAclsForRoles(roles);\n    } else {\n      LOG.info(\"Did not recognize Principal type: \" + principal.getPrincipalType() + \". Returning Acls for all principals.\");\n      return getAcls();\n    }\n  }\n  public Map<Resource, scala.collection.immutable.Set<Acl>> getAcls() {\n    final List<String> roles = getAllRoles();\n    return getAclsForRoles(roles);\n  }\n  /**\n   * A Command is a closure used to pass a block of code from individual\n   * functions to execute, which centralizes connection error\n   * handling. Command is parameterized on the return type of the function.\n   */\n  private interface Command<T> {\n    T run(SentryGenericServiceClient client) throws Exception;\n  }\n  private <T> T execute(Command<T> cmd) throws KafkaException {\n    try (SentryGenericServiceClient client  = getClient()){\n      return cmd.run(client);\n    } catch (SentryUserException ex) {\n      String msg = \"Unable to excute command on sentry server: \" + ex.getMessage();\n      LOG.error(msg, ex);\n      throw new KafkaException(msg, ex);\n    } catch (Exception ex) {\n      String msg = \"Unable to obtain client:\" + ex.getMessage();\n      LOG.error(msg, ex);\n      throw new KafkaException(msg, ex);\n    }\n  }\n  private TSentryPrivilege toTSentryPrivilege(Acl acl, Resource resource) {\n    final List<Authorizable> authorizables = ConvertUtil.convertResourceToAuthorizable(acl.host(), resource);\n    final List<TAuthorizable> tAuthorizables = new ArrayList<>();\n    for (Authorizable authorizable : authorizables) {\n      tAuthorizables.add(new TAuthorizable(authorizable.getTypeName(), authorizable.getName()));\n    }\n    TSentryPrivilege tSentryPrivilege = new TSentryPrivilege(COMPONENT_NAME, instanceName, tAuthorizables, acl.operation().name());\n    return tSentryPrivilege;\n  }\n  private String getRole(Acl acl) {\n    return acl.principal().getName();\n  }\n<fim_suffix>  private boolean isPrivilegeForResource(TSentryPrivilege tSentryPrivilege, Resource resource) {\n    final java.util.Iterator<TAuthorizable> authorizablesIterator = tSentryPrivilege.getAuthorizablesIterator();\n    while (authorizablesIterator.hasNext()) {\n      TAuthorizable tAuthorizable = authorizablesIterator.next();\n      if (tAuthorizable.getType().equals(resource.resourceType().name())) {\n        return true;\n      }\n    }\n    return false;\n  }<fim_middle>// function below has no smell\n"}