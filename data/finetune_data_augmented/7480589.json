{"text": "<fim_prefix>/*\n * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage org.graalvm.compiler.core.aarch64;\n\nimport static jdk.vm.ci.code.ValueUtil.asRegister;\n\nimport org.graalvm.compiler.asm.aarch64.AArch64MacroAssembler;\nimport org.graalvm.compiler.core.common.calc.FloatConvert;\nimport org.graalvm.compiler.debug.GraalError;\nimport org.graalvm.compiler.lir.LIRInstructionClass;\nimport org.graalvm.compiler.lir.aarch64.AArch64LIRInstruction;\nimport org.graalvm.compiler.lir.asm.CompilationResultBuilder;\n\nimport jdk.vm.ci.code.Register;\nimport jdk.vm.ci.meta.AllocatableValue;\n\n<fim_suffix>public final class AArch64FloatConvertOp extends AArch64LIRInstruction {\n    private static final LIRInstructionClass<AArch64FloatConvertOp> TYPE = LIRInstructionClass.create(AArch64FloatConvertOp.class);\n\n    private final FloatConvert op;\n    @Def protected AllocatableValue resultValue;\n    @Use protected AllocatableValue inputValue;\n\n    protected AArch64FloatConvertOp(FloatConvert op, AllocatableValue resultValue, AllocatableValue inputValue) {\n        super(TYPE);\n        this.op = op;\n        this.resultValue = resultValue;\n        this.inputValue = inputValue;\n    }\n\n    @Override\n    public void emitCode(CompilationResultBuilder crb, AArch64MacroAssembler masm) {\n        int fromSize = inputValue.getPlatformKind().getSizeInBytes() * Byte.SIZE;\n        int toSize = resultValue.getPlatformKind().getSizeInBytes() * Byte.SIZE;\n\n        Register result = asRegister(resultValue);\n        Register input = asRegister(inputValue);\n        switch (op) {\n            case F2I:\n            case D2I:\n            case F2L:\n            case D2L:\n                masm.fcvtzs(toSize, fromSize, result, input);\n                break;\n            case I2F:\n            case I2D:\n            case L2F:\n            case L2D:\n                masm.scvtf(toSize, fromSize, result, input);\n                break;\n            case D2F:\n            case F2D:\n                masm.fcvt(fromSize, result, input);\n                break;\n            default:\n                throw GraalError.shouldNotReachHere();\n        }\n    }\n\n}<fim_middle>// class below has no smell\n"}