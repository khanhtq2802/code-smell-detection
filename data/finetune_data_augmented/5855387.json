{"text": "<fim_prefix>        }\n        perUserMaxTotal.putAll(userDefaultMaxTotal);\n    }\n    /**\n     * Sets a user specific value for {@link GenericObjectPool#getMaxTotal()} for the specified user's pool.\n     *\n     * @param userName\n     *            The user name key.\n     * @param value\n     *            The user specific value.\n     */\n    public void setPerUserMaxTotal(final String userName, final Integer value) {\n        assertInitializationAllowed();\n        if (perUserMaxTotal == null) {\n            perUserMaxTotal = new HashMap<>();\n        }\n        perUserMaxTotal.put(userName, value);\n    }\n    void setPerUserMaxWaitMillis(final Map<String, Long> userDefaultMaxWaitMillis) {\n        assertInitializationAllowed();\n        if (perUserMaxWaitMillis == null) {\n            perUserMaxWaitMillis = new HashMap<>();\n        } else {\n            perUserMaxWaitMillis.clear();\n        }\n        perUserMaxWaitMillis.putAll(userDefaultMaxWaitMillis);\n    }\n    /**\n     * Sets a user specific value for {@link GenericObjectPool#getMaxWaitMillis()} for the specified user's pool.\n     *\n     * @param userName\n     *            The user name key.\n     * @param value\n     *            The user specific value.\n     */\n    public void setPerUserMaxWaitMillis(final String userName, final Long value) {\n        assertInitializationAllowed();\n        if (perUserMaxWaitMillis == null) {\n            perUserMaxWaitMillis = new HashMap<>();\n        }\n        perUserMaxWaitMillis.put(userName, value);\n    }\n    void setPerUserMinEvictableIdleTimeMillis(final Map<String, Long> userDefaultMinEvictableIdleTimeMillis) {\n        assertInitializationAllowed();\n        if (perUserMinEvictableIdleTimeMillis == null) {\n            perUserMinEvictableIdleTimeMillis = new HashMap<>();\n        } else {\n            perUserMinEvictableIdleTimeMillis.clear();\n        }\n        perUserMinEvictableIdleTimeMillis.putAll(userDefaultMinEvictableIdleTimeMillis);\n    }\n    /**\n     * Sets a user specific value for {@link GenericObjectPool#getMinEvictableIdleTimeMillis()} for the specified user's\n     * pool.\n     *\n     * @param userName\n     *            The user name key.\n     * @param value\n     *            The user specific value.\n     */\n    public void setPerUserMinEvictableIdleTimeMillis(final String userName, final Long value) {\n        assertInitializationAllowed();\n        if (perUserMinEvictableIdleTimeMillis == null) {\n            perUserMinEvictableIdleTimeMillis = new HashMap<>();\n        }\n        perUserMinEvictableIdleTimeMillis.put(userName, value);\n    }\n    void setPerUserMinIdle(final Map<String, Integer> userDefaultMinIdle) {\n        assertInitializationAllowed();\n        if (perUserMinIdle == null) {\n            perUserMinIdle = new HashMap<>();\n        } else {\n            perUserMinIdle.clear();\n        }\n        perUserMinIdle.putAll(userDefaultMinIdle);\n    }\n    /**\n     * Sets a user specific value for {@link GenericObjectPool#getMinIdle()} for the specified user's pool.\n     *\n     * @param userName\n     *            The user name key.\n     * @param value\n     *            The user specific value.\n     */\n    public void setPerUserMinIdle(final String userName, final Integer value) {\n        assertInitializationAllowed();\n        if (perUserMinIdle == null) {\n            perUserMinIdle = new HashMap<>();\n        }\n        perUserMinIdle.put(userName, value);\n    }\n    void setPerUserNumTestsPerEvictionRun(final Map<String, Integer> userDefaultNumTestsPerEvictionRun) {\n        assertInitializationAllowed();\n        if (perUserNumTestsPerEvictionRun == null) {\n            perUserNumTestsPerEvictionRun = new HashMap<>();\n        } else {\n            perUserNumTestsPerEvictionRun.clear();\n        }\n        perUserNumTestsPerEvictionRun.putAll(userDefaultNumTestsPerEvictionRun);\n    }\n    /**\n     * Sets a user specific value for {@link GenericObjectPool#getNumTestsPerEvictionRun()} for the specified user's\n     * pool.\n     *\n     * @param userName\n     *            The user name key.\n     * @param value\n     *            The user specific value.\n     */\n    public void setPerUserNumTestsPerEvictionRun(final String userName, final Integer value) {\n        assertInitializationAllowed();\n        if (perUserNumTestsPerEvictionRun == null) {\n            perUserNumTestsPerEvictionRun = new HashMap<>();\n        }\n        perUserNumTestsPerEvictionRun.put(userName, value);\n    }\n    void setPerUserSoftMinEvictableIdleTimeMillis(final Map<String, Long> userDefaultSoftMinEvictableIdleTimeMillis) {\n        assertInitializationAllowed();\n        if (perUserSoftMinEvictableIdleTimeMillis == null) {\n            perUserSoftMinEvictableIdleTimeMillis = new HashMap<>();\n        } else {\n            perUserSoftMinEvictableIdleTimeMillis.clear();\n        }\n        perUserSoftMinEvictableIdleTimeMillis.putAll(userDefaultSoftMinEvictableIdleTimeMillis);\n    }\n    /**\n     * Sets a user specific value for {@link GenericObjectPool#getSoftMinEvictableIdleTimeMillis()} for the specified\n     * user's pool.\n     *\n     * @param userName\n     *            The user name key.\n     * @param value\n     *            The user specific value.\n     */\n    public void setPerUserSoftMinEvictableIdleTimeMillis(final String userName, final Long value) {\n        assertInitializationAllowed();\n        if (perUserSoftMinEvictableIdleTimeMillis == null) {\n            perUserSoftMinEvictableIdleTimeMillis = new HashMap<>();\n        }\n        perUserSoftMinEvictableIdleTimeMillis.put(userName, value);\n    }\n    void setPerUserTestOnBorrow(final Map<String, Boolean> userDefaultTestOnBorrow) {\n        assertInitializationAllowed();\n        if (perUserTestOnBorrow == null) {\n            perUserTestOnBorrow = createMap();\n        } else {\n            perUserTestOnBorrow.clear();\n        }\n        perUserTestOnBorrow.putAll(userDefaultTestOnBorrow);\n    }\n    /**\n     * Sets a user specific value for {@link GenericObjectPool#getTestOnBorrow()} for the specified user's pool.\n     *\n     * @param userName\n     *            The user name key.\n     * @param value\n     *            The user specific value.\n     */\n    public void setPerUserTestOnBorrow(final String userName, final Boolean value) {\n        assertInitializationAllowed();\n        if (perUserTestOnBorrow == null) {\n            perUserTestOnBorrow = createMap();\n        }\n        perUserTestOnBorrow.put(userName, value);\n    }\n    void setPerUserTestOnCreate(final Map<String, Boolean> userDefaultTestOnCreate) {\n        assertInitializationAllowed();\n        if (perUserTestOnCreate == null) {\n            perUserTestOnCreate = createMap();\n        } else {\n            perUserTestOnCreate.clear();\n        }\n        perUserTestOnCreate.putAll(userDefaultTestOnCreate);\n    }\n    /**\n     * Sets a user specific value for {@link GenericObjectPool#getTestOnCreate()} for the specified user's pool.\n     *\n     * @param userName\n     *            The user name key.\n     * @param value\n     *            The user specific value.\n     */\n    public void setPerUserTestOnCreate(final String userName, final Boolean value) {\n        assertInitializationAllowed();\n        if (perUserTestOnCreate == null) {\n            perUserTestOnCreate = createMap();\n        }\n        perUserTestOnCreate.put(userName, value);\n    }\n    void setPerUserTestOnReturn(final Map<String, Boolean> userDefaultTestOnReturn) {\n        assertInitializationAllowed();\n        if (perUserTestOnReturn == null) {\n            perUserTestOnReturn = createMap();\n        } else {\n            perUserTestOnReturn.clear();\n        }\n        perUserTestOnReturn.putAll(userDefaultTestOnReturn);\n    }\n    /**\n     * Sets a user specific value for {@link GenericObjectPool#getTestOnReturn()} for the specified user's pool.\n     *\n     * @param userName\n     *            The user name key.\n     * @param value\n     *            The user specific value.\n     */\n    public void setPerUserTestOnReturn(final String userName, final Boolean value) {\n        assertInitializationAllowed();\n        if (perUserTestOnReturn == null) {\n            perUserTestOnReturn = createMap();\n        }\n        perUserTestOnReturn.put(userName, value);\n    }\n<fim_suffix>    void setPerUserTestWhileIdle(final Map<String, Boolean> userDefaultTestWhileIdle) {\n        assertInitializationAllowed();\n        if (perUserTestWhileIdle == null) {\n            perUserTestWhileIdle = createMap();\n        } else {\n            perUserTestWhileIdle.clear();\n        }\n        perUserTestWhileIdle.putAll(userDefaultTestWhileIdle);\n    }<fim_middle>// function below has no smell\n"}