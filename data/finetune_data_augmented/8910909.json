{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.metastore.utils;\n\nimport java.io.File;\nimport java.net.URL;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hive.metastore.conf.MetastoreConf;\nimport org.apache.hadoop.hive.metastore.conf.MetastoreConf.ConfVars;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.core.config.Configurator;\nimport org.apache.logging.log4j.core.impl.Log4jContextFactory;\nimport org.apache.logging.log4j.spi.DefaultThreadContextMap;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Utilities common to logging operations.\n */\n<fim_suffix>public class LogUtils {\n\n  private static final String HIVE_L4J = \"metastore-log4j2.properties\";\n  private static final Logger l4j = LoggerFactory.getLogger(LogUtils.class);\n\n  @SuppressWarnings(\"serial\")\n  public static class LogInitializationException extends Exception {\n    LogInitializationException(String msg) {\n      super(msg);\n    }\n  }\n\n  /**\n   * This is an exception that can be passed to logger just for printing the stacktrace.\n   */\n  public static class StackTraceLogger extends Exception {\n    public StackTraceLogger(final String msg) {\n      super(msg);\n    }\n  }\n\n  /**\n   * Initialize log4j.\n   *\n   * @return an message suitable for display to the user\n   * @throws LogInitializationException if log4j fails to initialize correctly\n   */\n  public static String initHiveLog4j(Configuration conf)\n    throws LogInitializationException {\n    return initHiveLog4jCommon(conf, MetastoreConf.ConfVars.LOG4J_FILE);\n  }\n\n  private static String initHiveLog4jCommon(Configuration conf, ConfVars confVarName)\n    throws LogInitializationException {\n    if (MetastoreConf.getVar(conf, confVarName).equals(\"\")) {\n      // if log4j configuration file not set, or could not found, use default setting\n      return initHiveLog4jDefault(conf, \"\", confVarName);\n    } else {\n      // if log4j configuration file found successfully, use HiveConf property value\n      String log4jFileName = MetastoreConf.getVar(conf, confVarName);\n      File log4jConfigFile = new File(log4jFileName);\n      boolean fileExists = log4jConfigFile.exists();\n      if (!fileExists) {\n        // if property specified file not found in local file system\n        // use default setting\n        return initHiveLog4jDefault(\n          conf, \"Not able to find conf file: \" + log4jConfigFile, confVarName);\n      } else {\n        // property speficied file found in local file system\n        // use the specified file\n        final boolean async = checkAndSetAsyncLogging(conf);\n        // required for MDC based routing appender so that child threads can inherit the MDC context\n        System.setProperty(DefaultThreadContextMap.INHERITABLE_MAP, \"true\");\n        Configurator.initialize(null, log4jFileName);\n        logConfigLocation();\n        return \"Logging initialized using configuration in \" + log4jConfigFile + \" Async: \" + async;\n      }\n    }\n  }\n\n  private static boolean checkAndSetAsyncLogging(final Configuration conf) {\n    final boolean asyncLogging = MetastoreConf.getBoolVar(conf, ConfVars.ASYNC_LOG_ENABLED);\n    if (asyncLogging) {\n      System.setProperty(\"Log4jContextSelector\",\n          \"org.apache.logging.log4j.core.async.AsyncLoggerContextSelector\");\n      // default is ClassLoaderContextSelector which is created during automatic logging\n      // initialization in a static initialization block.\n      // Changing ContextSelector at runtime requires creating new context factory which will\n      // internally create new context selector based on system property.\n      LogManager.setFactory(new Log4jContextFactory());\n    }\n    return asyncLogging;\n  }\n\n  private static String initHiveLog4jDefault(Configuration conf, String logMessage, ConfVars confVarName)\n    throws LogInitializationException {\n    URL hive_l4j = null;\n    switch (confVarName) {\n      case LOG4J_FILE:\n        hive_l4j = LogUtils.class.getClassLoader().getResource(HIVE_L4J);\n        break;\n      default:\n        break;\n    }\n    if (hive_l4j != null) {\n      final boolean async = checkAndSetAsyncLogging(conf);\n      System.setProperty(DefaultThreadContextMap.INHERITABLE_MAP, \"true\");\n      Configurator.initialize(null, hive_l4j.toString());\n      logConfigLocation();\n      return (logMessage + \"\\n\" + \"Logging initialized using configuration in \" + hive_l4j +\n          \" Async: \" + async);\n    } else {\n      throw new LogInitializationException(\n        logMessage + \"Unable to initialize logging using \"\n        + LogUtils.HIVE_L4J + \", not found on CLASSPATH!\");\n    }\n  }\n\n  private static void logConfigLocation() throws LogInitializationException {\n    // Log a warning if hive-default.xml is found on the classpath\n    if (MetastoreConf.getHiveDefaultLocation() != null) {\n      l4j.warn(\"DEPRECATED: Ignoring hive-default.xml found on the CLASSPATH at \"\n        + MetastoreConf.getHiveDefaultLocation().getPath());\n    }\n    // Look for hive-site.xml on the CLASSPATH and log its location if found.\n    if (MetastoreConf.getHiveSiteLocation() == null) {\n      l4j.warn(\"hive-site.xml not found on CLASSPATH\");\n    } else {\n      l4j.debug(\"Using hive-site.xml found on CLASSPATH at \"\n        + MetastoreConf.getHiveSiteLocation().getPath());\n    }\n  }\n}<fim_middle>// class below is blob\n"}