{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.lucene.util.bkd;\n\nimport java.io.IOException;\n\nimport org.apache.lucene.codecs.CodecUtil;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.IOContext;\nimport org.apache.lucene.store.IndexOutput;\nimport org.apache.lucene.util.BytesRef;\n\n/**\n * Writes points to disk in a fixed-with format.\n *\n * @lucene.internal\n * */\npublic final class OfflinePointWriter implements PointWriter {\n\n  final Directory tempDir;\n  public final IndexOutput out;\n  public final String name;\n  final int packedBytesLength;\n  long count;\n  private boolean closed;\n  final long expectedCount;\n\n  /** Create a new writer with an unknown number of incoming points */\n  public OfflinePointWriter(Directory tempDir, String tempFileNamePrefix, int packedBytesLength,\n                            String desc, long expectedCount) throws IOException {\n    this.out = tempDir.createTempOutput(tempFileNamePrefix, \"bkd_\" + desc, IOContext.DEFAULT);\n    this.name = out.getName();\n    this.tempDir = tempDir;\n    this.packedBytesLength = packedBytesLength;\n    this.expectedCount = expectedCount;\n  }\n\n  @Override\n  public void append(byte[] packedValue, int docID) throws IOException {\n    assert closed == false : \"Point writer is already closed\";\n    assert packedValue.length == packedBytesLength : \"[packedValue] must have length [\" + packedBytesLength + \"] but was [\" + packedValue.length + \"]\";\n    out.writeBytes(packedValue, 0, packedValue.length);\n    out.writeInt(docID);\n    count++;\n    assert expectedCount == 0 || count <= expectedCount:  \"expectedCount=\" + expectedCount + \" vs count=\" + count;\n  }\n\n<fim_suffix>  @Override\n  public void append(PointValue pointValue) throws IOException {\n    assert closed == false : \"Point writer is already closed\";\n    BytesRef packedValue = pointValue.packedValue();\n    assert packedValue.length == packedBytesLength  : \"[packedValue] must have length [\" + packedBytesLength + \"] but was [\" + packedValue.length + \"]\";\n    out.writeBytes(packedValue.bytes, packedValue.offset, packedValue.length);\n    BytesRef docIDBytes = pointValue.docIDBytes();\n    assert docIDBytes.length == Integer.BYTES  : \"[docIDBytes] must have length [\" + Integer.BYTES + \"] but was [\" + docIDBytes.length + \"]\";\n    out.writeBytes(docIDBytes.bytes, docIDBytes.offset, docIDBytes.length);\n    count++;\n    assert expectedCount == 0 || count <= expectedCount : \"expectedCount=\" + expectedCount + \" vs count=\" + count;\n  }\n\n  @Override\n  public PointReader getReader(long start, long length) throws IOException {\n    byte[] buffer  = new byte[packedBytesLength + Integer.BYTES];\n    return getReader(start, length,  buffer);\n  }\n\n  protected OfflinePointReader getReader(long start, long length, byte[] reusableBuffer) throws IOException {\n    assert closed: \"point writer is still open and trying to get a reader\";\n    assert start + length <= count: \"start=\" + start + \" length=\" + length + \" count=\" + count;\n    assert expectedCount == 0 || count == expectedCount;\n    return new OfflinePointReader(tempDir, name, packedBytesLength, start, length, reusableBuffer);\n  }\n\n  @Override\n  public long count() {\n    return count;\n  }\n\n  @Override\n  public void close() throws IOException {\n    if (closed == false) {\n      try {\n        CodecUtil.writeFooter(out);\n      } finally {\n        out.close();\n        closed = true;\n      }\n    }\n  }\n\n  @Override\n  public void destroy() throws IOException {\n    tempDir.deleteFile(name);\n  }\n\n  @Override\n  public String toString() {\n    return \"OfflinePointWriter(count=\" + count + \" tempFileName=\" + name + \")\";\n  }\n}<fim_middle>// function below has no smell\n"}