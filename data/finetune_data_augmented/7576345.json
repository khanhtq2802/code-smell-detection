{"text": "<fim_prefix>\t/**\n\t * Register a bean from the given bean class, deriving its metadata from\n\t * class-declared annotations.\n\t * <p>Note that {@link #refresh()} must be called in order for the context\n\t * to fully process the new classes.\n\t * @param annotatedClass the class of the bean\n\t * @param qualifiers specific qualifier annotations to consider,\n\t * in addition to qualifiers at the bean class level (may be empty)\n\t * @since 5.2\n\t * @see #register(Class...)\n\t * @see #loadBeanDefinitions(DefaultListableBeanFactory)\n\t * @see #refresh()\n\t */\n\t@Override\n\t@SafeVarargs\n\t@SuppressWarnings(\"varargs\")\n\tpublic final <T> void registerBean(Class<T> annotatedClass, Class<? extends Annotation>... qualifiers) {\n\t\tthis.registeredBeans.add(new BeanRegistration(annotatedClass, null, qualifiers));\n\t}\n\t/**\n\t * Register a bean from the given bean class, deriving its metadata from\n\t * class-declared annotations.\n\t * <p>Note that {@link #refresh()} must be called in order for the context\n\t * to fully process the new classes.\n\t * @param annotatedClass the class of the bean\n\t * @param qualifiers specific qualifier annotations to consider,\n\t * in addition to qualifiers at the bean class level (may be empty)\n\t * @since 5.2\n\t * @see #register(Class...)\n\t * @see #loadBeanDefinitions(DefaultListableBeanFactory)\n\t * @see #refresh()\n\t */\n\t@Override\n\t@SafeVarargs\n\t@SuppressWarnings(\"varargs\")\n\tpublic final <T> void registerBean(\n\t\t\tClass<T> annotatedClass, Supplier<T> supplier, Class<? extends Annotation>... qualifiers) {\n\t\tthis.registeredBeans.add(new BeanRegistration(annotatedClass, supplier, qualifiers));\n\t}\n\t/**\n\t * Register a {@link org.springframework.beans.factory.config.BeanDefinition} for\n\t * any classes specified by {@link #register(Class...)} and scan any packages\n\t * specified by {@link #scan(String...)}.\n\t * <p>For any values specified by {@link #setConfigLocation(String)} or\n\t * {@link #setConfigLocations(String[])}, attempt first to load each location as a\n\t * class, registering a {@code BeanDefinition} if class loading is successful,\n\t * and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),\n\t * assume the value is a package and attempt to scan it for annotated classes.\n\t * <p>Enables the default set of annotation configuration post processors, such that\n\t * {@code @Autowired}, {@code @Required}, and associated annotations can be used.\n\t * <p>Configuration class bean definitions are registered with generated bean\n\t * definition names unless the {@code value} attribute is provided to the stereotype\n\t * annotation.\n\t * @param beanFactory the bean factory to load bean definitions into\n\t * @see #register(Class...)\n\t * @see #scan(String...)\n\t * @see #setConfigLocation(String)\n\t * @see #setConfigLocations(String[])\n\t * @see AnnotatedBeanDefinitionReader\n\t * @see ClassPathBeanDefinitionScanner\n\t */\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {\n\t\tAnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory);\n\t\tClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory);\n\t\tBeanNameGenerator beanNameGenerator = getBeanNameGenerator();\n\t\tif (beanNameGenerator != null) {\n\t\t\treader.setBeanNameGenerator(beanNameGenerator);\n\t\t\tscanner.setBeanNameGenerator(beanNameGenerator);\n\t\t\tbeanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);\n\t\t}\n\t\tScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver();\n\t\tif (scopeMetadataResolver != null) {\n\t\t\treader.setScopeMetadataResolver(scopeMetadataResolver);\n\t\t\tscanner.setScopeMetadataResolver(scopeMetadataResolver);\n\t\t}\n\t\tif (!this.annotatedClasses.isEmpty()) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Registering annotated classes: [\" +\n\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + \"]\");\n\t\t\t}\n\t\t\treader.register(ClassUtils.toClassArray(this.annotatedClasses));\n\t\t}\n\t\tif (!this.basePackages.isEmpty()) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Scanning base packages: [\" +\n\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(this.basePackages) + \"]\");\n\t\t\t}\n\t\t\tscanner.scan(StringUtils.toStringArray(this.basePackages));\n\t\t}\n\t\tif (!this.registeredBeans.isEmpty()) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Registering supplied beans: [\" +\n\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(this.registeredBeans) + \"]\");\n\t\t\t}\n\t\t\tthis.registeredBeans.forEach(reg ->\n\t\t\t\t\treader.registerBean(reg.getAnnotatedClass(), reg.getSupplier(), reg.getQualifiers()));\n\t\t}\n\t\tString[] configLocations = getConfigLocations();\n\t\tif (configLocations != null) {\n\t\t\tfor (String configLocation : configLocations) {\n\t\t\t\ttry {\n\t\t\t\t\tClass<?> clazz = ClassUtils.forName(configLocation, getClassLoader());\n\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\tlogger.trace(\"Registering [\" + configLocation + \"]\");\n\t\t\t\t\t}\n\t\t\t\t\treader.register(clazz);\n\t\t\t\t}\n\t\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\tlogger.trace(\"Could not load class for config location [\" + configLocation +\n\t\t\t\t\t\t\t\t\"] - trying package scan. \" + ex);\n\t\t\t\t\t}\n\t\t\t\t\tint count = scanner.scan(configLocation);\n\t\t\t\t\tif (count == 0 && logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"No annotated classes found for specified class/package [\" + configLocation + \"]\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory.\n\t * <p>This should be pre-configured with the {@code Environment} (if desired)\n\t * but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet.\n\t * @param beanFactory the bean factory to load bean definitions into\n\t * @since 4.1.9\n\t * @see #getEnvironment()\n\t * @see #getBeanNameGenerator()\n\t * @see #getScopeMetadataResolver()\n\t */\n\tprotected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory) {\n\t\treturn new AnnotatedBeanDefinitionReader(beanFactory, getEnvironment());\n\t}\n\t/**\n\t * Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory.\n\t * <p>This should be pre-configured with the {@code Environment} (if desired)\n\t * but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet.\n\t * @param beanFactory the bean factory to load bean definitions into\n\t * @since 4.1.9\n\t * @see #getEnvironment()\n\t * @see #getBeanNameGenerator()\n\t * @see #getScopeMetadataResolver()\n\t */\n\tprotected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory) {\n\t\treturn new ClassPathBeanDefinitionScanner(beanFactory, true, getEnvironment());\n\t}\n\t/**\n\t * Holder for a programmatic bean registration.\n\t * @see #registerBean(Class, Class[])\n\t * @see #registerBean(Class, Supplier, Class[])\n\t */\n<fim_suffix>\tprivate static class BeanRegistration {\n\t\tprivate final Class<?> annotatedClass;\n\t\t@Nullable\n\t\tprivate final Supplier<?> supplier;\n\t\tprivate final Class<? extends Annotation>[] qualifiers;\n\t\tpublic BeanRegistration(\n\t\t\t\tClass<?> annotatedClass, @Nullable Supplier<?> supplier, Class<? extends Annotation>[] qualifiers) {\n\t\t\tthis.annotatedClass = annotatedClass;\n\t\t\tthis.supplier = supplier;\n\t\t\tthis.qualifiers = qualifiers;\n\t\t}\n\t\tpublic Class<?> getAnnotatedClass() {\n\t\t\treturn this.annotatedClass;\n\t\t}\n\t\t@Nullable\n\t\t@SuppressWarnings(\"rawtypes\")\n\t\tpublic Supplier getSupplier() {\n\t\t\treturn this.supplier;\n\t\t}\n\t\tpublic Class<? extends Annotation>[] getQualifiers() {\n\t\t\treturn this.qualifiers;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.annotatedClass.getName();\n\t\t}\n\t}<fim_middle>// class below has no smell\n"}