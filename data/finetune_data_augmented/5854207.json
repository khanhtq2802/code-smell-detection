{"text": "<fim_prefix>             */\n            appendText(n.getText(), !n.getRoot().isXmlSyntax());\n        }\n        /*\n         * Appends the given tag, including its body, to the XML view.\n         */\n        private void appendTag(Node n) throws JasperException {\n            appendTag(n, false);\n        }\n        /*\n         * Appends the given tag, including its body, to the XML view,\n         * and optionally reset default namespace to \"\", if none specified.\n         */\n        private void appendTag(Node n, boolean addDefaultNS)\n                throws JasperException {\n            Node.Nodes body = n.getBody();\n            String text = n.getText();\n            buf.append(\"<\").append(n.getQName());\n            buf.append(\"\\n\");\n            printAttributes(n, addDefaultNS);\n            buf.append(\"  \").append(jspIdPrefix).append(\":id\").append(\"=\\\"\");\n            buf.append(jspId++).append(\"\\\"\\n\");\n            if (ROOT_ACTION.equals(n.getLocalName()) || body != null\n                        || text != null) {\n                buf.append(\">\\n\");\n                if (ROOT_ACTION.equals(n.getLocalName())) {\n                    if (compiler.getCompilationContext().isTagFile()) {\n                        appendTagDirective();\n                    } else {\n                        appendPageDirective();\n                    }\n                }\n                if (body != null) {\n                    body.visit(this);\n                } else {\n                    appendText(text, false);\n                }\n                buf.append(\"</\" + n.getQName() + \">\\n\");\n            } else {\n                buf.append(\"/>\\n\");\n            }\n        }\n        /*\n         * Appends the page directive with the given attributes to the XML\n         * view.\n         *\n         * Since the import attribute of the page directive is the only page\n         * attribute that is allowed to appear multiple times within the same\n         * document, and since XML allows only single-value attributes,\n         * the values of multiple import attributes must be combined into one,\n         * separated by comma.\n         *\n         * If the given page directive contains just 'contentType' and/or\n         * 'pageEncoding' attributes, we ignore it, as we've already appended\n         * a page directive containing just these two attributes.\n         */\n        private void appendPageDirective(Node.PageDirective n) {\n            boolean append = false;\n            Attributes attrs = n.getAttributes();\n            int len = (attrs == null) ? 0 : attrs.getLength();\n            for (int i=0; i<len; i++) {\n                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                String attrName = attrs.getQName(i);\n                if (!\"pageEncoding\".equals(attrName)\n                        && !\"contentType\".equals(attrName)) {\n                    append = true;\n                    break;\n                }\n            }\n            if (!append) {\n                return;\n            }\n            buf.append(\"<\").append(n.getQName());\n            buf.append(\"\\n\");\n            // append jsp:id\n            buf.append(\"  \").append(jspIdPrefix).append(\":id\").append(\"=\\\"\");\n            buf.append(jspId++).append(\"\\\"\\n\");\n            // append remaining attributes\n            for (int i=0; i<len; i++) {\n                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                String attrName = attrs.getQName(i);\n                if (\"import\".equals(attrName) || \"contentType\".equals(attrName)\n                        || \"pageEncoding\".equals(attrName)) {\n                    /*\n                     * Page directive's 'import' attribute is considered\n                     * further down, and its 'pageEncoding' and 'contentType'\n                     * attributes are ignored, since we've already appended\n                     * a new page directive containing just these two\n                     * attributes\n                     */\n                    continue;\n                }\n                String value = attrs.getValue(i);\n                buf.append(\"  \").append(attrName).append(\"=\\\"\");\n                buf.append(JspUtil.getExprInXml(value)).append(\"\\\"\\n\");\n            }\n            if (n.getImports().size() > 0) {\n                // Concatenate names of imported classes/packages\n                boolean first = true;\n                for (String i : n.getImports()) {\n                    if (first) {\n                        first = false;\n                        buf.append(\"  import=\\\"\");\n                    } else {\n                        buf.append(\",\");\n                    }\n                    buf.append(JspUtil.getExprInXml(i));\n                }\n                buf.append(\"\\\"\\n\");\n            }\n            buf.append(\"/>\\n\");\n        }\n        /*\n         * Appends a page directive with 'pageEncoding' and 'contentType'\n         * attributes.\n         *\n         * The value of the 'pageEncoding' attribute is hard-coded\n         * to UTF-8, whereas the value of the 'contentType' attribute, which\n         * is identical to what the container will pass to\n         * ServletResponse.setContentType(), is derived from the pageInfo.\n         */\n        private void appendPageDirective() {\n            buf.append(\"<\").append(JSP_PAGE_DIRECTIVE_ACTION);\n            buf.append(\"\\n\");\n            // append jsp:id\n            buf.append(\"  \").append(jspIdPrefix).append(\":id\").append(\"=\\\"\");\n            buf.append(jspId++).append(\"\\\"\\n\");\n            buf.append(\"  \").append(\"pageEncoding\").append(\"=\\\"UTF-8\\\"\\n\");\n            buf.append(\"  \").append(\"contentType\").append(\"=\\\"\");\n            buf.append(compiler.getPageInfo().getContentType()).append(\"\\\"\\n\");\n            buf.append(\"/>\\n\");\n        }\n        /*\n         * Appends the tag directive with the given attributes to the XML\n         * view.\n         *\n         * If the given tag directive contains just a 'pageEncoding'\n         * attributes, we ignore it, as we've already appended\n         * a tag directive containing just this attributes.\n         */\n        private void appendTagDirective(Node.TagDirective n)\n                throws JasperException {\n            boolean append = false;\n            Attributes attrs = n.getAttributes();\n            int len = (attrs == null) ? 0 : attrs.getLength();\n            for (int i=0; i<len; i++) {\n                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                String attrName = attrs.getQName(i);\n                if (!\"pageEncoding\".equals(attrName)) {\n                    append = true;\n                    break;\n                }\n            }\n            if (!append) {\n                return;\n            }\n            appendTag(n);\n        }\n        /*\n         * Appends a tag directive containing a single 'pageEncoding'\n         * attribute whose value is hard-coded to UTF-8.\n         */\n        private void appendTagDirective() {\n            buf.append(\"<\").append(JSP_TAG_DIRECTIVE_ACTION);\n            buf.append(\"\\n\");\n            // append jsp:id\n            buf.append(\"  \").append(jspIdPrefix).append(\":id\").append(\"=\\\"\");\n            buf.append(jspId++).append(\"\\\"\\n\");\n            buf.append(\"  \").append(\"pageEncoding\").append(\"=\\\"UTF-8\\\"\\n\");\n            buf.append(\"/>\\n\");\n        }\n        private void appendText(String text, boolean createJspTextElement) {\n            if (createJspTextElement) {\n                buf.append(\"<\").append(JSP_TEXT_ACTION);\n                buf.append(\"\\n\");\n                // append jsp:id\n                buf.append(\"  \").append(jspIdPrefix).append(\":id\").append(\"=\\\"\");\n                buf.append(jspId++).append(\"\\\"\\n\");\n                buf.append(\">\\n\");\n                appendCDATA(text);\n                buf.append(JSP_TEXT_ACTION_END);\n                buf.append(\"\\n\");\n            } else {\n                appendCDATA(text);\n            }\n        }\n        /*\n         * Appends the given text as a CDATA section to the XML view, unless\n         * the text has already been marked as CDATA.\n         */\n        private void appendCDATA(String text) {\n            buf.append(CDATA_START_SECTION);\n            buf.append(escapeCDATA(text));\n            buf.append(CDATA_END_SECTION);\n        }\n        /*\n         * Escapes any occurrences of \"]]>\" (by replacing them with \"]]&gt;\")\n         * within the given text, so it can be included in a CDATA section.\n         */\n<fim_suffix>        private String escapeCDATA(String text) {\n            if( text==null ) return \"\";\n            int len = text.length();\n            CharArrayWriter result = new CharArrayWriter(len);\n            for (int i=0; i<len; i++) {\n                if (((i+2) < len)\n                        && (text.charAt(i) == ']')\n                        && (text.charAt(i+1) == ']')\n                        && (text.charAt(i+2) == '>')) {\n                    // match found\n                    result.write(']');\n                    result.write(']');\n                    result.write('&');\n                    result.write('g');\n                    result.write('t');\n                    result.write(';');\n                    i += 2;\n                } else {\n                    result.write(text.charAt(i));\n                }\n            }\n            return result.toString();\n        }<fim_middle>// function below has no smell\n"}