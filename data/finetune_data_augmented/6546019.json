{"text": "<fim_prefix>/**\n * Copyright (c) 2016 NumberFour AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n * \n * Contributors:\n *   NumberFour AG - Initial API and implementation\n */\npackage org.eclipse.n4js.ts.typeRefs;\n\n\n/**\n * <!-- begin-user-doc -->\n * A representation of the model object '<em><b>Wildcard</b></em>'.\n * <!-- end-user-doc -->\n *\n * <!-- begin-model-doc -->\n * Note: Wildcard has special copy-semantics to preserve the implicit upper bound returned by method\n * {@link Wildcard#getDeclaredOrImplicitUpperBounds()}. When copied, the implicit upper bound is set\n * as declared upper bound in the copy. For details see TypeUtils#copy().\n * <!-- end-model-doc -->\n *\n * <p>\n * The following features are supported:\n * </p>\n * <ul>\n *   <li>{@link org.eclipse.n4js.ts.typeRefs.Wildcard#getDeclaredUpperBound <em>Declared Upper Bound</em>}</li>\n *   <li>{@link org.eclipse.n4js.ts.typeRefs.Wildcard#getDeclaredLowerBound <em>Declared Lower Bound</em>}</li>\n *   <li>{@link org.eclipse.n4js.ts.typeRefs.Wildcard#isUsingInOutNotation <em>Using In Out Notation</em>}</li>\n * </ul>\n *\n * @see org.eclipse.n4js.ts.typeRefs.TypeRefsPackage#getWildcard()\n * @model\n * @generated\n */\n<fim_suffix>public interface Wildcard extends TypeArgument {\n\t/**\n\t * Returns the value of the '<em><b>Declared Upper Bound</b></em>' containment reference.\n\t * <!-- begin-user-doc -->\n\t * <p>\n\t * If the meaning of the '<em>Declared Upper Bound</em>' containment reference isn't clear,\n\t * there really should be more of a description here...\n\t * </p>\n\t * <!-- end-user-doc -->\n\t * @return the value of the '<em>Declared Upper Bound</em>' containment reference.\n\t * @see #setDeclaredUpperBound(TypeRef)\n\t * @see org.eclipse.n4js.ts.typeRefs.TypeRefsPackage#getWildcard_DeclaredUpperBound()\n\t * @model containment=\"true\"\n\t * @generated\n\t */\n\tTypeRef getDeclaredUpperBound();\n\n\t/**\n\t * Sets the value of the '{@link org.eclipse.n4js.ts.typeRefs.Wildcard#getDeclaredUpperBound <em>Declared Upper Bound</em>}' containment reference.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @param value the new value of the '<em>Declared Upper Bound</em>' containment reference.\n\t * @see #getDeclaredUpperBound()\n\t * @generated\n\t */\n\tvoid setDeclaredUpperBound(TypeRef value);\n\n\t/**\n\t * Returns the value of the '<em><b>Declared Lower Bound</b></em>' containment reference.\n\t * <!-- begin-user-doc -->\n\t * <p>\n\t * If the meaning of the '<em>Declared Lower Bound</em>' containment reference isn't clear,\n\t * there really should be more of a description here...\n\t * </p>\n\t * <!-- end-user-doc -->\n\t * @return the value of the '<em>Declared Lower Bound</em>' containment reference.\n\t * @see #setDeclaredLowerBound(TypeRef)\n\t * @see org.eclipse.n4js.ts.typeRefs.TypeRefsPackage#getWildcard_DeclaredLowerBound()\n\t * @model containment=\"true\"\n\t * @generated\n\t */\n\tTypeRef getDeclaredLowerBound();\n\n\t/**\n\t * Sets the value of the '{@link org.eclipse.n4js.ts.typeRefs.Wildcard#getDeclaredLowerBound <em>Declared Lower Bound</em>}' containment reference.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @param value the new value of the '<em>Declared Lower Bound</em>' containment reference.\n\t * @see #getDeclaredLowerBound()\n\t * @generated\n\t */\n\tvoid setDeclaredLowerBound(TypeRef value);\n\n\t/**\n\t * Returns the value of the '<em><b>Using In Out Notation</b></em>' attribute.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * <!-- begin-model-doc -->\n\t * For wildcards contained in the AST, this tells if the wildcard was written in the source code using in/out\n\t * notation, i.e. returns <code>true</code> for <code>G&lt;out C></code> and <code>false</code> for\n\t * <code>G&lt;? extends C></code>.\n\t * <!-- end-model-doc -->\n\t * @return the value of the '<em>Using In Out Notation</em>' attribute.\n\t * @see #setUsingInOutNotation(boolean)\n\t * @see org.eclipse.n4js.ts.typeRefs.TypeRefsPackage#getWildcard_UsingInOutNotation()\n\t * @model unique=\"false\"\n\t * @generated\n\t */\n\tboolean isUsingInOutNotation();\n\n\t/**\n\t * Sets the value of the '{@link org.eclipse.n4js.ts.typeRefs.Wildcard#isUsingInOutNotation <em>Using In Out Notation</em>}' attribute.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @param value the new value of the '<em>Using In Out Notation</em>' attribute.\n\t * @see #isUsingInOutNotation()\n\t * @generated\n\t */\n\tvoid setUsingInOutNotation(boolean value);\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * <!-- begin-model-doc -->\n\t * An unbounded wildcard given as type argument to a bounded type parameter is implicitly bounded.\n\t * For example:\n\t * <pre>\n\t * class A {}\n\t * class G&lt;T extends A> {}\n\t * \t * var G&lt;?> g; // \"?\" is actually \"? extends A\"\n\t * class H extends G&lt;?> {} // \"?\" is actually \"? extends A\"\n\t * </pre>\n\t * This method returns the declared upper bound of the receiving wildcard or, if the wildcard is unbounded,\n\t * tries to obtain the implicit upper bound from the corresponding type parameter of the containing\n\t * ParameterizedTypeRef's declared type (if any).\n\t * <p>\n\t * <b>IMPORTANT:</b> Use of such implicit bounds is prone to infinite recursion and must therefore be guarded\n\t * appropriately. Take these two examples:\n\t * <pre>\n\t * class A&lt;T extends A&lt;?>> {} // directly\n\t * </pre><pre>\n\t * class X&lt;T extends B&lt;?>> {}\n\t * class Y&lt;T extends X&lt;?>> {}\n\t * class B&lt;T extends Y&lt;?>> {} // indirectly\n\t * </pre>\n\t * <!-- end-model-doc -->\n\t * @model kind=\"operation\" unique=\"false\"\n\t * @generated\n\t */\n\tTypeRef getDeclaredOrImplicitUpperBound();\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * <!-- begin-model-doc -->\n\t * Tells if an implicit upper bound is in effect for the given wildcard, i.e. the wildcards does not have declared\n\t * bounds (upper or lower) and obtains an implicit bound from the corresponding type parameter.\n\t * \t * @see #getDeclaredOrImplicitUpperBounds()\n\t * <!-- end-model-doc -->\n\t * @model kind=\"operation\" unique=\"false\"\n\t * @generated\n\t */\n\tboolean isImplicitUpperBoundInEffect();\n\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * <!-- begin-model-doc -->\n\t * Convenience method, returns the type expression, usually the type name, as a string. Basically used for testing.\n\t * See {@link TypeRef#getTypeRefAsString()}\n\t * <!-- end-model-doc -->\n\t * @model kind=\"operation\" unique=\"false\"\n\t * @generated\n\t */\n\tString getTypeRefAsString();\n\n} // Wildcard<fim_middle>// class below has no smell\n"}