{"text": "<fim_prefix>\t\t\t\treturn Flux.merge(this.batchMonos) //\n\t\t\t\t\t\t.flatMapIterable(Function.identity()) //\n\t\t\t\t\t\t.collectList() //\n\t\t\t\t\t\t.flatMap(statements -> {\n\t\t\t\t\t\t\tstatements.forEach(this.batch::add);\n\t\t\t\t\t\t\treturn this.operations.getReactiveCqlOperations().queryForResultSet(this.batch);\n\t\t\t\t\t\t}).flatMap(resultSet -> resultSet.rows().collectList()\n\t\t\t\t\t\t\t\t.map(rows -> new WriteResult(resultSet.getAllExecutionInfo(), resultSet.wasApplied(), rows)));\n\t\t\t}\n\t\t\treturn Mono.error(new IllegalStateException(\"This Cassandra Batch was already executed\"));\n\t\t});\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#withTimestamp(long)\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations withTimestamp(long timestamp) {\n\t\tassertNotExecuted();\n\t\tthis.batch.using(QueryBuilder.timestamp(timestamp));\n\t\treturn this;\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#insert(java.lang.Object[])\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations insert(Object... entities) {\n\t\tAssert.notNull(entities, \"Entities must not be null\");\n\t\treturn insert(Arrays.asList(entities));\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#insert(java.lang.Iterable)\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations insert(Iterable<?> entities) {\n\t\treturn insert(entities, InsertOptions.empty());\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#insert(reactor.core.publisher.Mono)\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations insert(Mono<? extends Iterable<?>> entities) {\n\t\treturn insert(entities, InsertOptions.empty());\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#insert(java.lang.Iterable, org.springframework.data.cassandra.core.cql.WriteOptions)\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations insert(Iterable<?> entities, WriteOptions options) {\n\t\tassertNotExecuted();\n\t\tAssert.notNull(entities, \"Entities must not be null\");\n\t\tAssert.notNull(options, \"WriteOptions must not be null\");\n\t\tthis.batchMonos.add(Mono.just(doInsert(entities, options)));\n\t\treturn this;\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#insert(reactor.core.publisher.Mono, org.springframework.data.cassandra.core.cql.WriteOptions)\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations insert(Mono<? extends Iterable<?>> entities, WriteOptions options) {\n\t\tassertNotExecuted();\n\t\tAssert.notNull(entities, \"Entities must not be null\");\n\t\tAssert.notNull(options, \"WriteOptions must not be null\");\n\t\tthis.batchMonos.add(entities.map(entity -> doInsert(entity, options)));\n\t\treturn this;\n\t}\n\tprivate Collection<? extends BuiltStatement> doInsert(Iterable<?> entities, WriteOptions options) {\n\t\tCassandraConverter converter = getConverter();\n\t\tCassandraMappingContext mappingContext = getMappingContext();\n\t\tList<Insert> insertQueries = new ArrayList<>();\n\t\tfor (Object entity : entities) {\n\t\t\tAssert.notNull(entity, \"Entity must not be null\");\n\t\t\tBasicCassandraPersistentEntity<?> persistentEntity =\n\t\t\t\t\tmappingContext.getRequiredPersistentEntity(entity.getClass());\n\t\t\tInsert insertQuery = EntityQueryUtils.createInsertQuery(persistentEntity.getTableName().toCql(),\n\t\t\t\t\tentity, options, converter, persistentEntity);\n\t\t\tinsertQueries.add(insertQuery);\n\t\t}\n\t\treturn insertQueries;\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#update(java.lang.Object[])\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations update(Object... entities) {\n\t\tAssert.notNull(entities, \"Entities must not be null\");\n\t\treturn update(Arrays.asList(entities));\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#update(java.lang.Iterable)\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations update(Iterable<?> entities) {\n\t\treturn update(entities, UpdateOptions.empty());\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#update(reactor.core.publisher.Mono)\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations update(Mono<? extends Iterable<?>> entities) {\n\t\treturn update(entities, UpdateOptions.empty());\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#update(java.lang.Iterable, org.springframework.data.cassandra.core.cql.WriteOptions)\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations update(Iterable<?> entities, WriteOptions options) {\n\t\tassertNotExecuted();\n\t\tAssert.notNull(entities, \"Entities must not be null\");\n\t\tAssert.notNull(options, \"WriteOptions must not be null\");\n\t\tthis.batchMonos.add(Mono.just(doUpdate(entities, options)));\n\t\treturn this;\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#update(reactor.core.publisher.Mono, org.springframework.data.cassandra.core.cql.WriteOptions)\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations update(Mono<? extends Iterable<?>> entities, WriteOptions options) {\n\t\tassertNotExecuted();\n\t\tAssert.notNull(entities, \"Entities must not be null\");\n\t\tAssert.notNull(options, \"WriteOptions must not be null\");\n\t\tthis.batchMonos.add(entities.map(entity -> doUpdate(entity, options)));\n\t\treturn this;\n\t}\n\tprivate Collection<? extends BuiltStatement> doUpdate(Iterable<?> entities, WriteOptions options) {\n\t\tCassandraConverter converter = getConverter();\n\t\tList<Update> updateQueries = new ArrayList<>();\n\t\tfor (Object entity : entities) {\n\t\t\tAssert.notNull(entity, \"Entity must not be null\");\n\t\t\tCassandraPersistentEntity<?> persistentEntity = getRequiredPersistentEntity(entity.getClass());\n\t\t\tUpdate update = getStatementFactory()\n\t\t\t\t\t.update(entity, options, converter, persistentEntity, persistentEntity.getTableName());\n\t\t\tupdateQueries.add(update);\n\t\t}\n\t\treturn updateQueries;\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#delete(java.lang.Object[])\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations delete(Object... entities) {\n\t\tAssert.notNull(entities, \"Entities must not be null\");\n\t\treturn delete(Arrays.asList(entities));\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#delete(java.lang.Iterable)\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations delete(Iterable<?> entities) {\n\t\treturn delete(entities, DeleteOptions.empty());\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#delete(reactor.core.publisher.Mono)\n\t */\n\t@Override\n\tpublic ReactiveCassandraBatchOperations delete(Mono<? extends Iterable<?>> entities) {\n\t\treturn delete(entities, DeleteOptions.empty());\n\t}\n\t/* (non-Javadoc)\n\t * @see org.springframework.data.cassandra.core.ReactiveCassandraBatchOperations#delete(java.lang.Iterable, org.springframework.data.cassandra.core.cql.WriteOptions)\n\t */\n<fim_suffix>\t@Override\n\tpublic ReactiveCassandraBatchOperations delete(Iterable<?> entities, WriteOptions options) {\n\t\tassertNotExecuted();\n\t\tAssert.notNull(entities, \"Entities must not be null\");\n\t\tAssert.notNull(options, \"WriteOptions must not be null\");\n\t\tthis.batchMonos.add(Mono.just(doDelete(entities, options)));\n\t\treturn this;\n\t}<fim_middle>// function below has no smell\n"}