{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *\n */\npackage org.apache.polygene.library.uowfile.plural;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.polygene.api.injection.scope.Service;\nimport org.apache.polygene.api.injection.scope.This;\nimport org.apache.polygene.api.mixin.Mixins;\nimport org.apache.polygene.api.unitofwork.UnitOfWork;\nimport org.apache.polygene.library.uowfile.internal.UoWFileFactory;\n\n@Mixins( HasUoWFiles.Mixin.class )\n// START SNIPPET: contract\npublic interface HasUoWFiles<T extends Enum<T>>\n{\n    /**\n     * IMPORTANT Use this {@link File} only inside read-only {@link UnitOfWork}s\n     */\n    File attachedFile( T key );\n\n    /**\n     * IMPORTANT Use these {@link File}s only inside read-only {@link UnitOfWork}s\n     */\n    Iterable<File> attachedFiles();\n\n    File managedFile( T key );\n\n    Iterable<File> managedFiles();\n    // END SNIPPET: contract\n\n<fim_suffix>    abstract class Mixin<R extends Enum<R>>\n        implements HasUoWFiles<R>\n    {\n        @Service\n        private UoWFileFactory uowFileFactory;\n        @This\n        private UoWFilesLocator<R> locator;\n\n        @Override\n        public File attachedFile( R key )\n        {\n            return locator.locateAttachedFile( key );\n        }\n\n        @Override\n        public Iterable<File> attachedFiles()\n        {\n            return locator.locateAttachedFiles();\n        }\n\n        @Override\n        public File managedFile( R key )\n        {\n            return uowFileFactory.createCurrentUoWFile( locator.locateAttachedFile( key ) ).asFile();\n        }\n\n        @Override\n        public Iterable<File> managedFiles()\n        {\n            List<File> managedFiles = new ArrayList<>();\n            for( File eachAttachedFile : locator.locateAttachedFiles() )\n            {\n                managedFiles.add( uowFileFactory.createCurrentUoWFile( eachAttachedFile ).asFile() );\n            }\n            return managedFiles;\n        }\n    }\n\n    // START SNIPPET: contract\n}\n// END SNIPPET: contract<fim_middle>// class below has no smell\n"}