{"text": "<fim_prefix>          return VALIDATE_CSTR;\n        case 9: // RELY_CSTR\n          return RELY_CSTR;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final String _fieldName;\n    _Fields(short thriftId, String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  private static final int __KEY_SEQ_ISSET_ID = 0;\n  private static final int __ENABLE_CSTR_ISSET_ID = 1;\n  private static final int __VALIDATE_CSTR_ISSET_ID = 2;\n  private static final int __RELY_CSTR_ISSET_ID = 3;\n  private byte __isset_bitfield = 0;\n  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.CAT_NAME, new org.apache.thrift.meta_data.FieldMetaData(\"catName\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.TABLE_DB, new org.apache.thrift.meta_data.FieldMetaData(\"table_db\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData(\"table_name\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData(\"column_name\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.KEY_SEQ, new org.apache.thrift.meta_data.FieldMetaData(\"key_seq\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));\n    tmpMap.put(_Fields.UK_NAME, new org.apache.thrift.meta_data.FieldMetaData(\"uk_name\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.ENABLE_CSTR, new org.apache.thrift.meta_data.FieldMetaData(\"enable_cstr\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));\n    tmpMap.put(_Fields.VALIDATE_CSTR, new org.apache.thrift.meta_data.FieldMetaData(\"validate_cstr\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));\n    tmpMap.put(_Fields.RELY_CSTR, new org.apache.thrift.meta_data.FieldMetaData(\"rely_cstr\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));\n    metaDataMap = Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SQLUniqueConstraint.class, metaDataMap);\n  }\n  public SQLUniqueConstraint() {\n  }\n  public SQLUniqueConstraint(\n    String catName,\n    String table_db,\n    String table_name,\n    String column_name,\n    int key_seq,\n    String uk_name,\n    boolean enable_cstr,\n    boolean validate_cstr,\n    boolean rely_cstr)\n  {\n    this();\n    this.catName = catName;\n    this.table_db = table_db;\n    this.table_name = table_name;\n    this.column_name = column_name;\n    this.key_seq = key_seq;\n    setKey_seqIsSet(true);\n    this.uk_name = uk_name;\n    this.enable_cstr = enable_cstr;\n    setEnable_cstrIsSet(true);\n    this.validate_cstr = validate_cstr;\n    setValidate_cstrIsSet(true);\n    this.rely_cstr = rely_cstr;\n    setRely_cstrIsSet(true);\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public SQLUniqueConstraint(SQLUniqueConstraint other) {\n    __isset_bitfield = other.__isset_bitfield;\n    if (other.isSetCatName()) {\n      this.catName = other.catName;\n    }\n    if (other.isSetTable_db()) {\n      this.table_db = other.table_db;\n    }\n    if (other.isSetTable_name()) {\n      this.table_name = other.table_name;\n    }\n    if (other.isSetColumn_name()) {\n      this.column_name = other.column_name;\n    }\n    this.key_seq = other.key_seq;\n    if (other.isSetUk_name()) {\n      this.uk_name = other.uk_name;\n    }\n    this.enable_cstr = other.enable_cstr;\n    this.validate_cstr = other.validate_cstr;\n    this.rely_cstr = other.rely_cstr;\n  }\n  public SQLUniqueConstraint deepCopy() {\n    return new SQLUniqueConstraint(this);\n  }\n  @Override\n  public void clear() {\n    this.catName = null;\n    this.table_db = null;\n    this.table_name = null;\n    this.column_name = null;\n    setKey_seqIsSet(false);\n    this.key_seq = 0;\n    this.uk_name = null;\n    setEnable_cstrIsSet(false);\n    this.enable_cstr = false;\n    setValidate_cstrIsSet(false);\n    this.validate_cstr = false;\n    setRely_cstrIsSet(false);\n    this.rely_cstr = false;\n  }\n  public String getCatName() {\n    return this.catName;\n  }\n  public void setCatName(String catName) {\n    this.catName = catName;\n  }\n  public void unsetCatName() {\n    this.catName = null;\n  }\n  /** Returns true if field catName is set (has been assigned a value) and false otherwise */\n  public boolean isSetCatName() {\n    return this.catName != null;\n  }\n  public void setCatNameIsSet(boolean value) {\n    if (!value) {\n      this.catName = null;\n    }\n  }\n  public String getTable_db() {\n    return this.table_db;\n  }\n  public void setTable_db(String table_db) {\n    this.table_db = table_db;\n  }\n  public void unsetTable_db() {\n    this.table_db = null;\n  }\n  /** Returns true if field table_db is set (has been assigned a value) and false otherwise */\n  public boolean isSetTable_db() {\n    return this.table_db != null;\n  }\n  public void setTable_dbIsSet(boolean value) {\n    if (!value) {\n      this.table_db = null;\n    }\n  }\n  public String getTable_name() {\n    return this.table_name;\n  }\n  public void setTable_name(String table_name) {\n    this.table_name = table_name;\n  }\n<fim_suffix>  public void unsetTable_name() {\n    this.table_name = null;\n  }<fim_middle>// function below has no smell\n"}