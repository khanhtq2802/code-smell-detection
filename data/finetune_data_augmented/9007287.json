{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.solr.client.solrj.io.eval;\n\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.math.MathContext;\nimport java.util.Locale;\n\nimport org.apache.solr.client.solrj.io.stream.expr.StreamExpression;\nimport org.apache.solr.client.solrj.io.stream.expr.StreamFactory;\n\npublic class DivideEvaluator extends RecursiveNumericEvaluator implements TwoValueWorker {\n  protected static final long serialVersionUID = 1L;\n  \n  public DivideEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n\n    if(2 != containedEvaluators.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting two values but found %d\",expression, containedEvaluators.size()));\n    }\n  }\n\n  // override to give a slightly better error message than the default\n  @Override\n  public Object doWork(Object ... values) throws IOException{\n    if(2 != values.length){\n      String message = null;\n      if(1 == values.length){\n        message = String.format(Locale.ROOT,\"%s(...) only works with a 2 values (numerator,denominator) but 1 was provided\", constructingFactory.getFunctionName(getClass())); \n      }\n      else{\n        message = String.format(Locale.ROOT,\"%s(...) only works with a 2 values (numerator,denominator) but %d were provided\", constructingFactory.getFunctionName(getClass()), values.length);\n      }\n      throw new IOException(message);\n    }\n    \n    return doWork(values[0], values[1]);\n  }\n\n\n<fim_suffix>  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to %s(...) with a null numerator\", constructingFactory.getFunctionName(getClass())));\n    }\n    \n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to %s(...) with a null denominator\", constructingFactory.getFunctionName(getClass())));\n    }\n\n    BigDecimal numerator = (BigDecimal)first;\n    BigDecimal denominator = (BigDecimal)second;\n        \n    if(0 == denominator.compareTo(BigDecimal.ZERO)){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to %s(...) with a 0 denominator\", constructingFactory.getFunctionName(getClass())));\n    }\n    \n    return numerator.divide(denominator, MathContext.DECIMAL64);\n  }\n}<fim_middle>// function below has no smell\n"}