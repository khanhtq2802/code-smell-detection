{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.reef.examples.hello;\n\nimport org.apache.reef.client.DriverConfiguration;\nimport org.apache.reef.proto.ReefServiceProtos;\nimport org.apache.reef.runtime.common.REEFEnvironment;\nimport org.apache.reef.runtime.common.driver.parameters.ClientRemoteIdentifier;\nimport org.apache.reef.runtime.common.launch.REEFMessageCodec;\nimport org.apache.reef.runtime.local.driver.LocalDriverConfiguration;\nimport org.apache.reef.runtime.local.driver.RuntimeIdentifier;\nimport org.apache.reef.tang.Configuration;\nimport org.apache.reef.tang.Tang;\nimport org.apache.reef.tang.exceptions.InjectionException;\nimport org.apache.reef.util.EnvironmentUtils;\nimport org.apache.reef.wake.remote.RemoteConfiguration;\n\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * The Client for Hello REEF example running driver and client in the same process.\n */\n<fim_suffix>public final class HelloREEFEnvironment {\n\n  private static final Logger LOG = Logger.getLogger(HelloREEFEnvironment.class.getName());\n\n  private static final Configuration DRIVER_CONFIG = DriverConfiguration.CONF\n      .set(DriverConfiguration.DRIVER_IDENTIFIER, \"HelloREEF_Env\")\n      .set(DriverConfiguration.GLOBAL_LIBRARIES, EnvironmentUtils.getClassLocation(HelloDriver.class))\n      .set(DriverConfiguration.ON_DRIVER_STARTED, HelloDriver.StartHandler.class)\n      .set(DriverConfiguration.ON_EVALUATOR_ALLOCATED, HelloDriver.EvaluatorAllocatedHandler.class)\n      .build();\n\n  private static final Configuration LOCAL_DRIVER_MODULE = LocalDriverConfiguration.CONF\n      .set(LocalDriverConfiguration.RUNTIME_NAMES, RuntimeIdentifier.RUNTIME_NAME)\n      .set(LocalDriverConfiguration.CLIENT_REMOTE_IDENTIFIER, ClientRemoteIdentifier.NONE)\n      .set(LocalDriverConfiguration.JOB_IDENTIFIER, \"LOCAL_ENV_DRIVER_TEST\")\n      .set(LocalDriverConfiguration.ROOT_FOLDER, \"./REEF_LOCAL_RUNTIME\")\n      .set(LocalDriverConfiguration.MAX_NUMBER_OF_EVALUATORS, 2)\n      .set(LocalDriverConfiguration.JVM_HEAP_SLACK, 0.0)\n      .build();\n\n  private static final Configuration ENVIRONMENT_CONFIG =\n      Tang.Factory.getTang().newConfigurationBuilder()\n          .bindNamedParameter(RemoteConfiguration.ManagerName.class, \"REEF_ENVIRONMENT\")\n          .bindNamedParameter(RemoteConfiguration.MessageCodec.class, REEFMessageCodec.class)\n          .build();\n\n  /**\n   * Start Hello REEF job with Driver and Client sharing the same process.\n   *\n   * @param args command line parameters - not used.\n   * @throws InjectionException configuration error.\n   */\n  public static void main(final String[] args) throws InjectionException {\n\n    try (final REEFEnvironment reef = REEFEnvironment.fromConfiguration(\n        LOCAL_DRIVER_MODULE, DRIVER_CONFIG, ENVIRONMENT_CONFIG)) {\n      reef.run();\n      final ReefServiceProtos.JobStatusProto status = reef.getLastStatus();\n      LOG.log(Level.INFO, \"REEF job completed: {0}\", status);\n    }\n  }\n\n  /**\n   * Empty private constructor to prohibit instantiation of all-static class.\n   */\n  private HelloREEFEnvironment() {\n  }\n}<fim_middle>// class below has no smell\n"}