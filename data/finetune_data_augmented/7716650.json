{"text": "<fim_prefix>/*\n * Copyright (c) 2018 VMware Inc. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.hillview.management;\n\nimport org.hillview.dataset.api.IJson;\nimport org.hillview.utils.HostAndPort;\nimport org.hillview.utils.HostList;\nimport org.hillview.utils.Linq;\n\nimport javax.annotation.Nullable;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * This class represents a subset of the cluster configuration information.\n */\npublic class ClusterConfig {\n    public static class AggregatorConfig {\n        @Nullable\n        String name;\n        String[] workers;\n    }\n\n    /**\n     * Host running the web server.\n     */\n    @Nullable\n    public String webserver;\n    /**\n     * Hosts running the back-end workers.\n     */\n    @Nullable\n    public String[] workers;\n    /**\n     * Aggregators in front of the workers\n     */\n    @Nullable\n    public AggregatorConfig[] aggregators;\n    /**\n     * Folder where the hillview service is installed on each worker.\n     */\n    @Nullable\n    public String service_folder;\n    /**\n     * User account that runs the hillview workers and web server.\n     */\n    @Nullable\n    public String user;\n    /**\n     * Network port used by backend workers.\n     */\n    public int worker_port = -1;\n    /**\n     * Network port used by aggregators.\n     */\n    public int aggregator_port = -1;\n    /**\n     * True if we need to delete log files when deploying.\n     */\n    public boolean cleanup;\n\n    private void validate() {\n        if (this.webserver == null)\n            throw new RuntimeException(\"webserver not defined\");\n        if (this.getWorkers() == null)\n            throw new RuntimeException(\"workers not defined\");\n        if (this.worker_port == -1)\n            throw new RuntimeException(\"worker_port not defined\");\n        if (this.user == null)\n            throw new RuntimeException(\"user not defined\");\n        // Other fields are not mandatory for now\n    }\n\n    private static String removeComment(String s) {\n        int index = s.indexOf(\"//\");\n        if (index < 0)\n            return s;\n        return s.substring(0, index);\n    }\n\n    /**\n     * Parse a cluster configuration file and create a Java\n     * ClusterConfig object.\n     */\n<fim_suffix>    public static ClusterConfig parse(String file) throws IOException {\n        List<String> lines = Files.readAllLines(Paths.get(file));\n        lines = Linq.map(lines, ClusterConfig::removeComment);\n        String contents = String.join(\" \", lines);\n        ClusterConfig result = IJson.gsonInstance.fromJson(contents, ClusterConfig.class);\n        result.validate();\n        return result;\n    }\n\n    public HostList getWorkers() {\n        List<HostAndPort> workers = new ArrayList<HostAndPort>();\n        if (this.workers != null) {\n            for (String w : this.workers)\n                 workers.add(new HostAndPort(w, this.worker_port));\n        } else {\n            assert this.aggregators != null;\n            for (AggregatorConfig a : this.aggregators) {\n                for (String w : a.workers)\n                    workers.add(new HostAndPort(w, this.worker_port));\n            }\n        }\n        return new HostList(workers);\n    }\n\n    public HostList getAggregators() {\n        List<HostAndPort> agg = new ArrayList<HostAndPort>();\n        if (this.aggregators == null)\n            return new HostList(agg);\n        for (AggregatorConfig a : this.aggregators) {\n            assert a.name != null;\n            agg.add(new HostAndPort(a.name, this.aggregator_port));\n        }\n        return new HostList(agg);\n    }\n}<fim_middle>// function below has no smell\n"}