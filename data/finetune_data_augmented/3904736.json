{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.apache.tools.ant;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.apache.tools.ant.util.LoaderUtils;\n\n/**\n * The global registry for {@link ArgumentProcessor}s.\n * <p>\n * An {@link ArgumentProcessor} implementation can be registered via the system\n * property <code>org.apache.tools.ant.ArgumentProcessor</code>, or via a JDK1.3\n * 'service', by putting the fully qualified name of the implementation into the\n * file <code>META-INF/services/org.apache.tools.ant.ArgumentProcessor</code>\n * <p>\n * Use the system property <code>ant.argument-processor.debug</code> to enable\n * the print of debug log.\n *\n * @since 1.9\n */\npublic class ArgumentProcessorRegistry {\n\n    private static final String DEBUG_ARGUMENT_PROCESSOR_REPOSITORY = \"ant.argument-processor-repo.debug\";\n\n    // The message log level is not accessible here because everything\n    // is instantiated statically\n    private static final boolean DEBUG = \"true\".equals(System.getProperty(DEBUG_ARGUMENT_PROCESSOR_REPOSITORY));\n\n    private static final String SERVICE_ID = \"META-INF/services/org.apache.tools.ant.ArgumentProcessor\";\n\n    private static ArgumentProcessorRegistry instance = new ArgumentProcessorRegistry();\n\n    private List<ArgumentProcessor> processors = new ArrayList<>();\n\n    public static ArgumentProcessorRegistry getInstance() {\n        return instance;\n    }\n\n    private ArgumentProcessorRegistry() {\n        collectArgumentProcessors();\n    }\n\n    public List<ArgumentProcessor> getProcessors() {\n        return processors;\n    }\n\n    private void collectArgumentProcessors() {\n        try {\n            ClassLoader classLoader = LoaderUtils.getContextClassLoader();\n            if (classLoader != null) {\n                for (URL resource : Collections.list(classLoader.getResources(SERVICE_ID))) {\n                    URLConnection conn = resource.openConnection();\n                    conn.setUseCaches(false);\n                    ArgumentProcessor processor = getProcessorByService(conn.getInputStream());\n                    registerArgumentProcessor(processor);\n                }\n            }\n\n            InputStream systemResource = ClassLoader.getSystemResourceAsStream(SERVICE_ID);\n            if (systemResource != null) { //NOSONAR\n                ArgumentProcessor processor = getProcessorByService(systemResource);\n                registerArgumentProcessor(processor);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Unable to load ArgumentProcessor from service \"\n                    + SERVICE_ID + \" (\" + e.getClass().getName() + \": \"\n                    + e.getMessage() + \")\");\n            if (DEBUG) {\n                e.printStackTrace(System.err); //NOSONAR\n            }\n        }\n    }\n\n    public void registerArgumentProcessor(String helperClassName)\n            throws BuildException {\n        registerArgumentProcessor(getProcessor(helperClassName));\n    }\n\n    public void registerArgumentProcessor(\n            Class< ? extends ArgumentProcessor> helperClass)\n            throws BuildException {\n        registerArgumentProcessor(getProcessor(helperClass));\n    }\n\n    private ArgumentProcessor getProcessor(String helperClassName) {\n        try {\n            @SuppressWarnings(\"unchecked\")\n            Class< ? extends ArgumentProcessor> cl = (Class< ? extends ArgumentProcessor>) Class.forName(helperClassName);\n            return getProcessor(cl);\n        } catch (ClassNotFoundException e) {\n            throw new BuildException(\"Argument processor class \"\n                    + helperClassName + \" was not found\", e);\n        }\n    }\n\n<fim_suffix>    private ArgumentProcessor getProcessor(\n            Class< ? extends ArgumentProcessor> processorClass) {\n        ArgumentProcessor processor;\n        try {\n            processor = processorClass.getConstructor().newInstance();\n        } catch (Exception e) {\n            throw new BuildException(\"The argument processor class\"\n                    + processorClass.getName()\n                    + \" could not be instantiated with a default constructor\",\n                    e);\n        }\n        return processor;\n    }\n\n    public void registerArgumentProcessor(ArgumentProcessor processor) {\n        if (processor == null) {\n            return;\n        }\n        processors.add(processor);\n        if (DEBUG) {\n            System.out.println(\"Argument processor \"\n                    + processor.getClass().getName() + \" registered.\");\n        }\n    }\n\n    private ArgumentProcessor getProcessorByService(InputStream is)\n            throws IOException {\n        try (BufferedReader rd = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n            String processorClassName = rd.readLine();\n            if (processorClassName != null && !processorClassName.isEmpty()) {\n                return getProcessor(processorClassName);\n            }\n        }\n        return null;\n    }\n\n}<fim_middle>// function below has no smell\n"}