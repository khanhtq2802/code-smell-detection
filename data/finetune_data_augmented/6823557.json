{"text": "<fim_prefix>            }\n            }\n            }\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm2_RelationalExpression__Group_1_0__1() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_57);\n            norm2_RelationalExpression__Group_1_0__1__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            pushFollow(FOLLOW_2);\n            norm2_RelationalExpression__Group_1_0__2();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm2_RelationalExpression__Group_1_0__1__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); \n            }\n            {\n            pushFollow(FOLLOW_2);\n            norm2_RelationalExpression__OpAssignment_1_0_1();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm2_RelationalExpression__Group_1_0__2() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_2);\n            norm2_RelationalExpression__Group_1_0__2__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm2_RelationalExpression__Group_1_0__2__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); \n            }\n            {\n            pushFollow(FOLLOW_2);\n            norm2_RelationalExpression__RhsAssignment_1_0_2();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm3_RelationalExpression__Group__0() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_125);\n            norm3_RelationalExpression__Group__0__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            pushFollow(FOLLOW_2);\n            norm3_RelationalExpression__Group__1();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm3_RelationalExpression__Group__0__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); \n            }\n            pushFollow(FOLLOW_2);\n            norm1_ShiftExpression();\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm3_RelationalExpression__Group__1() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_2);\n            norm3_RelationalExpression__Group__1__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n<fim_suffix>    public final void norm3_RelationalExpression__Group__1__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); \n            }\n            loop421:\n            do {\n                int alt421=2;\n                int LA421_0 = input.LA(1);\n                if ( (LA421_0==GreaterThanSign) ) {\n                    int LA421_2 = input.LA(2);\n                    if ( ((LA421_2>=Intersection && LA421_2<=Implements)||(LA421_2>=Promisify && LA421_2<=Abstract)||(LA421_2>=External && LA421_2<=Function)||(LA421_2>=Private && LA421_2<=Delete)||LA421_2==Public||LA421_2==Static||(LA421_2>=Target && LA421_2<=Await)||LA421_2==Class||(LA421_2>=False && LA421_2<=Super)||LA421_2==Union||LA421_2==This||(LA421_2>=From && LA421_2<=Void)||(LA421_2>=Get && LA421_2<=Set)||LA421_2==PlusSignPlusSign||LA421_2==HyphenMinusHyphenMinus||LA421_2==SolidusEqualsSign||LA421_2==As||LA421_2==Of||LA421_2==ExclamationMark||LA421_2==LeftParenthesis||LA421_2==PlusSign||LA421_2==HyphenMinus||LA421_2==Solidus||(LA421_2>=LessThanSign && LA421_2<=EqualsSign)||(LA421_2>=CommercialAt && LA421_2<=LeftSquareBracket)||LA421_2==LeftCurlyBracket||LA421_2==Tilde||LA421_2==RULE_DOUBLE||(LA421_2>=RULE_HEX_INT && LA421_2<=RULE_LEGACY_OCTAL_INT)||LA421_2==RULE_SCIENTIFIC_INT||LA421_2==RULE_IDENTIFIER||LA421_2==RULE_STRING||(LA421_2>=RULE_TEMPLATE_HEAD && LA421_2<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA421_2==RULE_INT) ) {\n                        alt421=1;\n                    }\n                }\n                else if ( (LA421_0==Instanceof||LA421_0==LessThanSignEqualsSign||LA421_0==In||LA421_0==LessThanSign) ) {\n                    alt421=1;\n                }\n                switch (alt421) {\n            \tcase 1 :\n            \t    {\n            \t    pushFollow(FOLLOW_126);\n            \t    norm3_RelationalExpression__Group_1__0();\n            \t    state._fsp--;\n            \t    if (state.failed) return ;\n            \t    }\n            \t    break;\n            \tdefault :\n            \t    break loop421;\n                }\n            } while (true);\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }<fim_middle>// function below has no smell\n"}