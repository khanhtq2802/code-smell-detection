{"text": "<fim_prefix>/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.security.oauth2.authserver;\n\nimport java.util.Optional;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionMessage;\nimport org.springframework.boot.autoconfigure.condition.ConditionOutcome;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.SpringBootCondition;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;\nimport org.springframework.security.oauth2.provider.token.DefaultTokenServices;\nimport org.springframework.security.oauth2.provider.token.TokenStore;\nimport org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;\nimport org.springframework.security.oauth2.provider.token.store.JwtTokenStore;\nimport org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * Configuration for {@link AuthorizationServerTokenServices}\n *\n * @author Harold Li\n * @author Josh Cummings\n * @since 2.1.0\n */\n@Configuration\npublic class AuthorizationServerTokenServicesConfiguration {\n\n\t/**\n\t * Configuration for writing a single-key JWT token-issuing authorization server.\n\t *\n\t * To use, provide a private or symmetric key via\n\t *\n\t * {@code security.oauth2.authorization.jwt.key-value}\n\t */\n\t@Configuration\n\t@Conditional(JwtTokenCondition.class)\n\tprotected static class JwtTokenServicesConfiguration {\n\n\t\tprivate final AuthorizationServerProperties authorization;\n\n\t\tpublic JwtTokenServicesConfiguration(\n\t\t\t\tAuthorizationServerProperties authorization) {\n\t\t\tthis.authorization = authorization;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(AuthorizationServerTokenServices.class)\n\t\tpublic DefaultTokenServices jwtTokenServices(TokenStore jwtTokenStore) {\n\t\t\tDefaultTokenServices services = new DefaultTokenServices();\n\t\t\tservices.setTokenStore(jwtTokenStore);\n\t\t\treturn services;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TokenStore.class)\n\t\tpublic TokenStore jwtTokenStore() {\n\t\t\treturn new JwtTokenStore(jwtTokenEnhancer());\n\t\t}\n\n\t\t@Bean\n\t\tpublic JwtAccessTokenConverter jwtTokenEnhancer() {\n\t\t\tString keyValue = this.authorization.getJwt().getKeyValue();\n\t\t\tAssert.notNull(this.authorization.getJwt().getKeyValue(),\n\t\t\t\t\t\"keyValue cannot be null\");\n\n\t\t\tJwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n\t\t\tif (!keyValue.startsWith(\"-----BEGIN\")) {\n\t\t\t\tconverter.setVerifierKey(keyValue);\n\t\t\t}\n\t\t\tconverter.setSigningKey(keyValue);\n\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\t/**\n\t * Configuration for writing a single-key JWT token-issuing authorization server based\n\t * on a key store.\n\t *\n\t * To use, provide a key store and key alias via\n\t *\n\t * {@code security.oauth2.authorization.jwt.key-store},\n\t * {@code security.oauth2.authorization.jwt.key-store-password}, and\n\t * {@code security.oauth2.authorization.jwt.key-alias},\n\t */\n<fim_suffix>\t@Configuration\n\t@Conditional(JwtKeyStoreCondition.class)\n\tprotected class JwtKeyStoreConfiguration implements ApplicationContextAware {\n\n\t\tprivate final AuthorizationServerProperties authorization;\n\n\t\tprivate ApplicationContext context;\n\n\t\t@Autowired\n\t\tpublic JwtKeyStoreConfiguration(AuthorizationServerProperties authorization) {\n\t\t\tthis.authorization = authorization;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setApplicationContext(ApplicationContext context)\n\t\t\t\tthrows BeansException {\n\t\t\tthis.context = context;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(AuthorizationServerTokenServices.class)\n\t\tpublic DefaultTokenServices jwtTokenServices(TokenStore jwtTokenStore) {\n\t\t\tDefaultTokenServices services = new DefaultTokenServices();\n\t\t\tservices.setTokenStore(jwtTokenStore);\n\t\t\treturn services;\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(TokenStore.class)\n\t\tpublic TokenStore tokenStore() {\n\t\t\treturn new JwtTokenStore(accessTokenConverter());\n\t\t}\n\n\t\t@Bean\n\t\tpublic JwtAccessTokenConverter accessTokenConverter() {\n\t\t\tAssert.notNull(this.authorization.getJwt().getKeyStore(),\n\t\t\t\t\t\"keyStore cannot be null\");\n\t\t\tAssert.notNull(this.authorization.getJwt().getKeyStorePassword(),\n\t\t\t\t\t\"keyStorePassword cannot be null\");\n\t\t\tAssert.notNull(this.authorization.getJwt().getKeyAlias(),\n\t\t\t\t\t\"keyAlias cannot be null\");\n\n\t\t\tJwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n\n\t\t\tResource keyStore = this.context\n\t\t\t\t\t.getResource(this.authorization.getJwt().getKeyStore());\n\t\t\tchar[] keyStorePassword = this.authorization.getJwt().getKeyStorePassword()\n\t\t\t\t\t.toCharArray();\n\t\t\tKeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(keyStore,\n\t\t\t\t\tkeyStorePassword);\n\n\t\t\tString keyAlias = this.authorization.getJwt().getKeyAlias();\n\t\t\tchar[] keyPassword = Optional\n\t\t\t\t\t.ofNullable(this.authorization.getJwt().getKeyPassword())\n\t\t\t\t\t.map(String::toCharArray).orElse(keyStorePassword);\n\t\t\tconverter.setKeyPair(keyStoreKeyFactory.getKeyPair(keyAlias, keyPassword));\n\n\t\t\treturn converter;\n\t\t}\n\n\t}\n\n\tprivate static class JwtTokenCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition(\"OAuth JWT Condition\");\n\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\tString keyValue = environment\n\t\t\t\t\t.getProperty(\"security.oauth2.authorization.jwt.key-value\");\n\t\t\tif (StringUtils.hasText(keyValue)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.foundExactly(\"provided private or symmetric key\"));\n\t\t\t}\n\t\t\treturn ConditionOutcome.noMatch(\n\t\t\t\t\tmessage.didNotFind(\"provided private or symmetric key\").atAll());\n\t\t}\n\n\t}\n\n\tprivate static class JwtKeyStoreCondition extends SpringBootCondition {\n\n\t\t@Override\n\t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n\t\t\t\tAnnotatedTypeMetadata metadata) {\n\t\t\tConditionMessage.Builder message = ConditionMessage\n\t\t\t\t\t.forCondition(\"OAuth JWT KeyStore Condition\");\n\t\t\tEnvironment environment = context.getEnvironment();\n\t\t\tString keyStore = environment\n\t\t\t\t\t.getProperty(\"security.oauth2.authorization.jwt.key-store\");\n\t\t\tif (StringUtils.hasText(keyStore)) {\n\t\t\t\treturn ConditionOutcome\n\t\t\t\t\t\t.match(message.foundExactly(\"provided key store location\"));\n\t\t\t}\n\t\t\treturn ConditionOutcome\n\t\t\t\t\t.noMatch(message.didNotFind(\"provided key store location\").atAll());\n\t\t}\n\n\t}\n\n}<fim_middle>// class below has no smell\n"}