{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ambari.server.controller;\n\nimport java.util.List;\n\nimport org.apache.ambari.server.StaticallyInject;\nimport org.apache.ambari.server.controller.internal.ServiceConfigVersionResourceProvider;\nimport org.apache.ambari.server.orm.dao.HostDAO;\nimport org.apache.ambari.server.orm.entities.ClusterEntity;\nimport org.apache.ambari.server.orm.entities.ServiceConfigEntity;\nimport org.apache.ambari.server.orm.entities.StackEntity;\nimport org.apache.ambari.server.state.StackId;\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.codehaus.jackson.annotate.JsonProperty;\nimport org.codehaus.jackson.map.annotate.JsonSerialize;\n\nimport com.google.inject.Inject;\n\nimport io.swagger.annotations.ApiModelProperty;\n\n\n@StaticallyInject\npublic class ServiceConfigVersionResponse {\n  /**\n   * Name used for default config group.\n   */\n  public static final String DEFAULT_CONFIG_GROUP_NAME = \"Default\";\n\n  /**\n   * Name used for config groups that were deleted in the service config version response.\n   */\n  public static final String DELETED_CONFIG_GROUP_NAME = \"Deleted\";\n\n\n  @JsonProperty(\"cluster_name\")\n  @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)\n  private final String clusterName;\n\n  @JsonProperty(\"service_name\")\n  private final String serviceName;\n\n  @JsonProperty(\"service_config_version\")\n  private final Long version;\n\n  @JsonProperty(\"createtime\")\n  @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)\n  private final Long createTime;\n\n  @JsonProperty(\"group_id\")\n  private final Long groupId;\n\n  @JsonProperty(\"group_name\")\n  private final String groupName;\n\n  @JsonProperty(\"user\")\n  @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)\n  private final String userName;\n\n  @JsonProperty(\"service_config_version_note\")\n  @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)\n  private final String note;\n\n  @JsonProperty(\"stack_id\")\n  private String stackId;\n\n  @JsonProperty(\"is_current\")\n  private Boolean isCurrent = Boolean.FALSE;\n\n  @JsonProperty(\"is_cluster_compatible\")\n  private final Boolean isCompatibleWithCurrentStack;\n\n  @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)\n  private List<ConfigurationResponse> configurations;\n\n  @JsonProperty(\"hosts\")\n  private final List<String> hosts;\n\n  @Inject\n  private static HostDAO hostDAO;\n\n  /**\n   * Constructor.\n   *\n   * @param serviceConfigEntity\n   * @param configGroupName\n   */\n  public ServiceConfigVersionResponse(ServiceConfigEntity serviceConfigEntity,\n      String configGroupName) {\n    super();\n    ClusterEntity clusterEntity = serviceConfigEntity.getClusterEntity();\n\n    clusterName = clusterEntity.getClusterName();\n    serviceName = serviceConfigEntity.getServiceName();\n    version = serviceConfigEntity.getVersion();\n    userName = serviceConfigEntity.getUser();\n    createTime = serviceConfigEntity.getCreateTimestamp();\n    note = serviceConfigEntity.getNote();\n    groupId = (null != serviceConfigEntity.getGroupId() ? serviceConfigEntity.getGroupId(): -1L);\n    groupName = configGroupName;\n    hosts = hostDAO.getHostNamesByHostIds(serviceConfigEntity.getHostIds());\n\n    StackEntity serviceConfigStackEntity = serviceConfigEntity.getStack();\n    StackEntity clusterStackEntity = clusterEntity.getClusterStateEntity().getCurrentStack();\n\n    isCompatibleWithCurrentStack = clusterStackEntity.equals(serviceConfigStackEntity);\n    stackId = new StackId(serviceConfigStackEntity).getStackId();\n  }\n\n  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.SERVICE_NAME_PROPERTY_ID)\n  public String getServiceName() {\n    return serviceName;\n  }\n\n  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.SERVICE_CONFIG_VERSION_PROPERTY_ID)\n  public Long getVersion() {\n    return version;\n  }\n\n  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.CREATE_TIME_PROPERTY_ID)\n  public Long getCreateTime() {\n    return createTime;\n  }\n\n  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.USER_PROPERTY_ID)\n  public String getUserName() {\n    return userName;\n  }\n\n<fim_suffix>  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.CLUSTER_NAME_PROPERTY_ID)\n  public String getClusterName() {\n    return clusterName;\n  }\n\n  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.CONFIGURATIONS_PROPERTY_ID)\n  public List<ConfigurationResponse> getConfigurations() {\n    return configurations;\n  }\n\n  public void setConfigurations(List<ConfigurationResponse> configurations) {\n    this.configurations = configurations;\n  }\n\n  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.SERVICE_CONFIG_VERSION_NOTE_PROPERTY_ID)\n  public String getNote() {\n    return note;\n  }\n\n  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.HOSTS_PROPERTY_ID)\n  public List<String> getHosts() {\n    return hosts;\n  }\n\n  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.GROUP_NAME_PROPERTY_ID)\n  public String getGroupName() {\n    return groupName;\n  }\n\n  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.GROUP_ID_PROPERTY_ID)\n  public Long getGroupId() {\n    return groupId;\n  }\n\n  /**\n   * Gets the Stack ID that this configuration is scoped for.\n   *\n   * @return\n   */\n  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.STACK_ID_PROPERTY_ID)\n  public String getStackId() {\n    return stackId;\n  }\n\n  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.IS_CURRENT_PROPERTY_ID)\n  public Boolean getIsCurrent() {\n    return isCurrent;\n  }\n\n  public void setIsCurrent(Boolean isCurrent) {\n    this.isCurrent = isCurrent;\n  }\n\n  /**\n   * Gets whether this service configuration is compatible with the cluster's\n   * current stack version.\n   *\n   * @return {@code true} if compatible, {@code false} otherwise.\n   */\n  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.IS_COMPATIBLE_PROPERTY_ID)\n  public Boolean isCompatibleWithCurrentStack() {\n    return isCompatibleWithCurrentStack;\n  }\n\n  @Override\n  public final boolean equals(Object o) {\n    if (this == o) return true;\n\n    if (!(o instanceof ServiceConfigVersionResponse)) return false;\n\n    ServiceConfigVersionResponse that = (ServiceConfigVersionResponse) o;\n\n    return new EqualsBuilder()\n      .append(clusterName, that.clusterName)\n      .append(serviceName, that.serviceName)\n      .append(version, that.version)\n      .append(createTime, that.createTime)\n      .append(groupId, that.groupId)\n      .append(groupName, that.groupName)\n      .append(userName, that.userName)\n      .append(note, that.note)\n      .append(stackId, that.stackId)\n      .append(isCurrent, that.isCurrent)\n      .append(isCompatibleWithCurrentStack, that.isCompatibleWithCurrentStack)\n      .append(configurations, that.configurations)\n      .append(hosts, that.hosts)\n      .isEquals();\n  }\n\n  @Override\n  public final int hashCode() {\n    return new HashCodeBuilder(17, 37)\n      .append(clusterName)\n      .append(serviceName)\n      .append(version)\n      .append(createTime)\n      .append(groupId)\n      .append(groupName)\n      .append(userName)\n      .append(note)\n      .append(stackId)\n      .append(isCurrent)\n      .append(isCompatibleWithCurrentStack)\n      .append(configurations)\n      .append(hosts)\n      .toHashCode();\n  }\n}\n<fim_middle>// function below has no smell\n"}