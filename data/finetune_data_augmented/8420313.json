{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.xchange;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.knowm.xchange.Exchange;\nimport org.knowm.xchange.ExchangeSpecification;\nimport org.knowm.xchange.currency.CurrencyPair;\nimport org.knowm.xchange.dto.meta.ExchangeMetaData;\nimport org.knowm.xchange.exceptions.ExchangeException;\nimport org.knowm.xchange.service.account.AccountService;\nimport org.knowm.xchange.service.marketdata.MarketDataService;\nimport org.knowm.xchange.service.trade.TradeService;\n\nimport si.mazi.rescu.SynchronizedValueFactory;\n\n// Wraps the exchange to avoid anem collision with the camel exchange\npublic class XChange implements Exchange {\n\n    private final Exchange delegate;\n\n    public XChange(Exchange delegate) {\n        this.delegate = delegate;\n    }\n\n    public ExchangeSpecification getExchangeSpecification() {\n        return delegate.getExchangeSpecification();\n    }\n\n    public ExchangeMetaData getExchangeMetaData() {\n        return delegate.getExchangeMetaData();\n    }\n\n    public List<CurrencyPair> getExchangeSymbols() {\n        return delegate.getExchangeSymbols();\n    }\n\n<fim_suffix>    public SynchronizedValueFactory<Long> getNonceFactory() {\n        return delegate.getNonceFactory();\n    }\n\n    public ExchangeSpecification getDefaultExchangeSpecification() {\n        return delegate.getDefaultExchangeSpecification();\n    }\n\n    public void applySpecification(ExchangeSpecification exchangeSpecification) {\n        delegate.applySpecification(exchangeSpecification);\n    }\n\n    public MarketDataService getMarketDataService() {\n        return delegate.getMarketDataService();\n    }\n\n    public TradeService getTradeService() {\n        return delegate.getTradeService();\n    }\n\n    public AccountService getAccountService() {\n        return delegate.getAccountService();\n    }\n\n    public void remoteInit() throws IOException, ExchangeException {\n        delegate.remoteInit();\n    }\n}<fim_middle>// function below has no smell\n"}