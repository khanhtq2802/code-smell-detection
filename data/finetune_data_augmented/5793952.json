{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * <p>\n * http://www.apache.org/licenses/LICENSE-2.0\n * <p>\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.tika.parser.journal;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.tika.exception.TikaException;\nimport org.apache.tika.metadata.Metadata;\nimport org.apache.tika.parser.ParseContext;\nimport org.apache.tika.utils.XMLReaderUtils;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\npublic class TEIDOMParser {\n    public TEIDOMParser() {\n    }\n    public Metadata parse(String source, ParseContext parseContext) throws TikaException, SAXException, IOException {\n        Document root = XMLReaderUtils.buildDOM(\n                new ByteArrayInputStream(source.getBytes(StandardCharsets.UTF_8)), parseContext);\n        Metadata metadata = new Metadata();\n        createGrobidMetadata(source, root.getDocumentElement(), metadata);\n        return metadata;\n    }\n    private void createGrobidMetadata(String source, Element root,\n                                      Metadata metadata) {\n        if (root != null) {\n            Node text = getFirstChild(root.getChildNodes(), \"text\");\n            if (text != null) {\n                parseText(text, metadata);\n            }\n            Node teiHeader = getFirstChild(root.getChildNodes(), \"teiHeader\");\n            Node fileDesc = getFirstChild(teiHeader.getChildNodes(), \"fileDesc\");\n            if (fileDesc != null) {\n                parseFileDesc(fileDesc, metadata);\n            }\n            Node profileDesc = getFirstChild(teiHeader.getChildNodes(), \"profileDesc\");\n            if (profileDesc != null) {\n                parseProfileDesc(profileDesc, metadata);\n            }\n        }\n        addStaticMet(source, root, metadata);\n    }\n    private void addStaticMet(String source, Element obj, Metadata metadata) {\n        metadata.add(\"Class\", Metadata.class.getName());\n        //no longer available after we got rid of json.org's and its .toJSONObject()\n//        metadata.add(\"TEIJSONSource\", obj.toString());\n        metadata.add(\"TEIXMLSource\", source);\n    }\n    private void parseText(Node text, Metadata metadata) {\n        String lang = getFirstAttribute(text, \"xml\", \"lang\");\n        if (lang != null) {\n            metadata.add(\"Language\", lang);\n        }\n    }\n    private void parseFileDesc(Node fileDesc, Metadata metadata) {\n        Node titleStmt = getFirstChild(fileDesc.getChildNodes(), \"titleStmt\");\n        if (titleStmt != null) {\n            parseTitleStmt(titleStmt, metadata);\n        }\n        Node sourceDesc = getFirstChild(fileDesc.getChildNodes(), \"sourceDesc\");\n        if (sourceDesc != null) {\n            parseSourceDesc(sourceDesc, metadata);\n        }\n    }\n    private void parseTitleStmt(Node titleStmt, Metadata metadata) {\n        Node title = getFirstChild(titleStmt.getChildNodes(), \"title\");\n        if (title != null) {\n            String titleText = title.getTextContent();\n            if (titleText != null) {\n                metadata.add(\"Title\", titleText);\n            }\n        }\n    }\n    private void parseSourceDesc(Node sourceDesc, Metadata metadata) {\n        Node biblStruct = getFirstChild(sourceDesc.getChildNodes(), \"biblStruct\");\n        if (biblStruct != null) {\n            parseBiblStruct(biblStruct, metadata);\n        }\n    }\n    private void parseBiblStruct(Node biblStruct, Metadata metadata) {\n        Node analytic = getFirstChild(biblStruct.getChildNodes(), \"analytic\");\n        if (analytic != null) {\n            List<Node> authorNodes = getChildNodes(analytic.getChildNodes(), \"author\");\n            List<Author> authorList = new ArrayList<>();\n            for (Node authorNode : authorNodes) {\n                parseAuthor(authorNode, authorList);\n            }\n            metadata.add(\"Address\", getMetadataAddresses(authorList));\n            metadata.add(\"Affiliation\", getMetadataAffiliations(authorList));\n            metadata.add(\"Authors\", getMetadataAuthors(authorList));\n            metadata.add(\"FullAffiliations\",\n                    getMetadataFullAffiliations(authorList));\n        } else {\n            metadata.add(\"Error\", \"Unable to parse: no analytic section in JSON\");\n        }\n    }\n<fim_suffix>    private String getMetadataFullAffiliations(List<Author> authorList) {\n        List<Affiliation> unique = new ArrayList<Affiliation>();\n        StringBuilder metAffils = new StringBuilder();\n        for (Author a : authorList) {\n            for (Affiliation af : a.getAffiliations()) {\n                if (!unique.contains(af)) {\n                    unique.add(af);\n                }\n            }\n        }\n        metAffils.append(\"[\");\n        for (Affiliation af : unique) {\n            metAffils.append(af.toString());\n            metAffils.append(\",\");\n        }\n        metAffils.append(metAffils.deleteCharAt(metAffils.length() - 1));\n        metAffils.append(\"]\");\n        return metAffils.toString();\n    }\n    private String getMetadataAuthors(List<Author> authorList) {\n        // generates Chris A. Mattmann 1, 2 Daniel J. Crichton 1 Nenad Medvidovic 2\n        // Steve Hughes 1\n        List<Affiliation> unique = new ArrayList<Affiliation>();\n        StringBuilder metAuthors = new StringBuilder();\n        for (Author a : authorList) {\n            for (Affiliation af : a.getAffiliations()) {\n                if (!unique.contains(af)) {\n                    unique.add(af);\n                }\n            }\n        }\n        for (Author a : authorList) {\n            metAuthors.append(printOrBlank(a.getFirstName()));\n            metAuthors.append(printOrBlank(a.getMiddleName()));\n            metAuthors.append(printOrBlank(a.getSurName()));\n            StringBuilder affilBuilder = new StringBuilder();\n            for (int idx = 0; idx < unique.size(); idx++) {\n                Affiliation af = unique.get(idx);\n                if (a.getAffiliations().contains(af)) {\n                    affilBuilder.append((idx + 1));\n                    affilBuilder.append(\",\");\n                }\n            }\n            if (affilBuilder.length() > 0)\n                affilBuilder.deleteCharAt(affilBuilder.length() - 1);\n            metAuthors.append(affilBuilder.toString());\n            metAuthors.append(\" \");\n        }\n        return metAuthors.toString();\n    }\n    private String getMetadataAffiliations(List<Author> authorList) {\n        // generates 1 Jet Propulsion Laboratory California Institute of Technology\n        // ; 2 Computer Science Department University of Southern California\n        List<Affiliation> unique = new ArrayList<Affiliation>();\n        StringBuilder metAffil = new StringBuilder();\n        for (Author a : authorList) {\n            for (Affiliation af : a.getAffiliations()) {\n                if (!unique.contains(af)) {\n                    unique.add(af);\n                }\n            }\n        }\n        int count = 1;\n        for (Affiliation a : unique) {\n            metAffil.append(count);\n            metAffil.append(\" \");\n            metAffil.append(a.getOrgName().toString());\n            metAffil.deleteCharAt(metAffil.length() - 1);\n            metAffil.append(\"; \");\n            count++;\n        }\n        if (count > 1) {\n            metAffil.deleteCharAt(metAffil.length() - 1);\n            metAffil.deleteCharAt(metAffil.length() - 1);\n        }\n        return metAffil.toString();\n    }\n    private String getMetadataAddresses(List<Author> authorList) {\n        // generates: \"Pasadena, CA 91109, USA Los Angeles, CA 90089, USA\",\n        List<Address> unique = new ArrayList<Address>();\n        StringBuilder metAddress = new StringBuilder();\n        for (Author a : authorList) {<fim_middle>// function below has no smell\n"}