{"text": "<fim_prefix>        this.name = name;\n    }\n    /**\n     * @see org.apache.airavata.workflow.model.graph.Port#getNode()\n     */\n    public NodeImpl getNode() {\n        return this.node;\n    }\n    /**\n     * @see org.apache.airavata.workflow.model.graph.Port#getEdges()\n     */\n    public List<? extends EdgeImpl> getEdges() {\n        return this.edges;\n    }\n    /**\n     * @see org.apache.airavata.workflow.model.graph.Port#getEdge(int)\n     */\n    public Edge getEdge(int index) {\n        return this.edges.get(index);\n    }\n    /**\n     * @see org.apache.airavata.workflow.model.graph.Port#getKind()\n     */\n    public Kind getKind() {\n        return this.kind;\n    }\n    /**\n     * @see org.apache.airavata.workflow.model.graph.Port#getFromPorts()\n     */\n    public List<Port> getFromPorts() {\n        List<Port> fromPorts = new ArrayList<Port>();\n        for (EdgeImpl edge : this.edges) {\n            fromPorts.add(edge.getFromPort());\n        }\n        return fromPorts;\n    }\n    /**\n     * @see org.apache.airavata.workflow.model.graph.Port#getFromPort()\n     */\n    public Port getFromPort() {\n        if (this.edges.size() > 0) {\n            Edge edge = this.edges.get(0);\n            return edge.getFromPort();\n        } else {\n            return null;\n        }\n    }\n    /**\n     * @see org.apache.airavata.workflow.model.graph.Port#getFromNodes()\n     */\n    public List<Node> getFromNodes() {\n        List<Node> fromNodes = new ArrayList<Node>();\n        for (Port port : getFromPorts()) {\n            fromNodes.add(port.getNode());\n        }\n        return fromNodes;\n    }\n    /**\n     * @see org.apache.airavata.workflow.model.graph.Port#getFromNode()\n     */\n    public Node getFromNode() {\n        Port fromPort = getFromPort();\n        if (fromPort == null) {\n            return null;\n        } else {\n            return fromPort.getNode();\n        }\n    }\n    /**\n     * @see org.apache.airavata.workflow.model.graph.Port#getToPorts()\n     */\n    public List<Port> getToPorts() {\n        List<Port> toPorts = new ArrayList<Port>();\n        for (Edge edge : this.edges) {\n            toPorts.add(edge.getToPort());\n        }\n        return toPorts;\n    }\n    /**\n     * @see org.apache.airavata.workflow.model.graph.Port#getToNodes()\n     */\n    public List<Node> getToNodes() {\n        List<Node> toNodes = new ArrayList<Node>();\n        for (Port port : getToPorts()) {\n            toNodes.add(port.getNode());\n        }\n        return toNodes;\n    }\n    /**\n     * @see org.apache.airavata.workflow.model.graph.Port#setComponentPort(org.apache.airavata.workflow.model.component.ComponentPort)\n     */\n    public void setComponentPort(ComponentPort componentPort) {\n        this.componentPort = componentPort;\n    }\n    /**\n     * @see org.apache.airavata.workflow.model.graph.Port#getComponentPort()\n     */\n    public ComponentPort getComponentPort() {\n        if (this.componentPort == null) {\n            int index;\n            switch (this.kind) {\n            case DATA_IN:\n                index = this.node.getInputPorts().indexOf(this);\n                this.componentPort = this.node.getComponent().getInputPort(index);\n                break;\n            case DATA_OUT:\n                index = this.node.getOutputPorts().indexOf(this);\n                this.componentPort = this.node.getComponent().getOutputPort(index);\n                break;\n            case CONTROL_IN:\n                this.componentPort = this.node.getComponent().getControlInPort();\n                break;\n            case CONTROL_OUT:\n                index = this.node.getControlOutPorts().indexOf(this);\n                this.componentPort = this.node.getComponent().getControlOutPort(index);\n                break;\n            case EPR:\n                this.componentPort = this.node.getComponent().getEPRPort();\n                break;\n            }\n        }\n        return this.componentPort;\n    }\n    /**\n     * Sets the kind of this port.\n     * \n     * @param kind\n     *            The kind, either INPUT_PORT or OUTPUT_PORT\n     */\n    protected void setKind(Kind kind) {\n        this.kind = kind;\n    }\n    /**\n     * Sets a graph this port belogs to.\n     *\n     * @param graph\n     *            The graph\n     */\n    protected void setGraph(GraphImpl graph) {\n        this.graph = graph;\n    }\n    public GraphImpl getGraph() {\n        return graph;\n    }\n    /**\n     * @param node\n     */\n    protected void setNode(NodeImpl node) {\n        this.node = node;\n    }\n    /**\n     * Adds an Edge.\n     * \n     * @param edge\n     *            The edge to add\n     */\n    protected void addEdge(EdgeImpl edge) {\n        if (this.edges.contains(edge)) {\n            throw new WorkflowRuntimeException(\"The edge is already addes\");\n        } else {\n            this.edges.add(edge);\n        }\n    }\n    /**\n     * Removes an Edge.\n     * \n     * @param edge\n     *            The edge to remove.\n     */\n    protected void removeEdge(Edge edge) {\n        if (this.edges.contains(edge)) {\n            this.edges.remove(edge);\n            // this.node.edgeWasRemoved(edge);\n        } else {\n            throw new WorkflowRuntimeException(\"The edge doesn't exist.\");\n        }\n    }\n    /**\n     * @return The ID of this port\n     */\n    protected String createID() {\n        String nid = getNode().getID();\n        String portType;\n        switch (this.kind) {\n        case DATA_IN:\n            portType = \"in\";\n            break;\n        case DATA_OUT:\n            portType = \"out\";\n            break;\n        case CONTROL_IN:\n            portType = \"ctrl_in\";\n            break;\n        case CONTROL_OUT:\n            portType = \"ctrl_out\";\n            break;\n        case EPR:\n            portType = \"epr\";\n            break;\n        default:\n            // Should not happen.\n            throw new WorkflowRuntimeException(\"Wrong type of the port: \" + this.kind);\n        }\n        int index = getIndex();\n        return nid + \"_\" + portType + \"_\" + index;\n    }\n    /**\n     * Converts references to indexes.\n     * \n     * @throws GraphException\n     */\n    protected void indexToPointer() throws GraphException {\n        this.node = this.graph.getNode(this.nodeID);\n        if (this.node == null) {\n            throw new GraphException(\"Cannot find a node with the ID, \" + this.nodeID + \".\");\n        }\n    }\n    /**\n     * Parses XML\n     * \n     * @param portElement\n     */\n    protected void parse(XmlElement portElement) {\n        XmlElement idElement = portElement.element(GraphSchema.PORT_ID_TAG);\n        this.id = idElement.requiredText();\n        XmlElement nameElement = portElement.element(GraphSchema.PORT_NAME_TAG);\n        if (nameElement != null) {\n            // TODO control ports might have name?\n            this.name = nameElement.requiredText();\n        }\n        XmlElement nodeElement = portElement.element(GraphSchema.PORT_NODE_TAG);\n        this.nodeID = nodeElement.requiredText();\n    }\n    protected void parse(JsonObject portObject) {\n        this.id = portObject.getAsJsonPrimitive(GraphSchema.PORT_ID_TAG).getAsString();\n        JsonPrimitive jPrimitive = portObject.getAsJsonPrimitive(GraphSchema.PORT_NAME_TAG);\n        if (jPrimitive != null) {\n            this.name = jPrimitive.getAsString();\n        }\n        this.nodeID = portObject.getAsJsonPrimitive(GraphSchema.PORT_NODE_TAG).getAsString();\n    }\n    /**\n     * @return the XML representation of this Port\n     */\n<fim_suffix>    protected XmlElement toXML() {\n        XmlElement portElement = XMLUtil.BUILDER.newFragment(GraphSchema.NS, GraphSchema.PORT_TAG);\n        XmlElement idElement = portElement.addElement(GraphSchema.NS, GraphSchema.PORT_ID_TAG);\n        idElement.addChild(getID());\n        if (this.name != null) {\n            // TODO control ports might have name?\n            XmlElement nameElement = portElement.addElement(GraphSchema.NS, GraphSchema.PORT_NAME_TAG);\n            nameElement.addChild(this.name);\n        }\n        XmlElement nodeElement = portElement.addElement(GraphSchema.NS, GraphSchema.PORT_NODE_TAG);\n        nodeElement.addChild(this.node.getID());\n        return portElement;\n    }<fim_middle>// function below has no smell\n"}