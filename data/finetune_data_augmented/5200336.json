{"text": "<fim_prefix>import org.apache.sshd.common.digest.BuiltinDigests;\nimport org.apache.sshd.common.digest.Digest;\nimport org.apache.sshd.common.session.Session;\nimport org.apache.sshd.common.subsystem.sftp.SftpConstants;\nimport org.apache.sshd.common.subsystem.sftp.SftpException;\nimport org.apache.sshd.common.subsystem.sftp.SftpHelper;\nimport org.apache.sshd.common.subsystem.sftp.extensions.AclSupportedParser;\nimport org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo;\nimport org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser.OpenSSHExtension;\nimport org.apache.sshd.common.subsystem.sftp.extensions.openssh.FsyncExtensionParser;\nimport org.apache.sshd.common.subsystem.sftp.extensions.openssh.HardLinkExtensionParser;\nimport org.apache.sshd.common.util.EventListenerUtils;\nimport org.apache.sshd.common.util.GenericUtils;\nimport org.apache.sshd.common.util.MapEntryUtils.NavigableMapBuilder;\nimport org.apache.sshd.common.util.NumberUtils;\nimport org.apache.sshd.common.util.OsUtils;\nimport org.apache.sshd.common.util.SelectorUtils;\nimport org.apache.sshd.common.util.ValidateUtils;\nimport org.apache.sshd.common.util.buffer.Buffer;\nimport org.apache.sshd.common.util.buffer.BufferUtils;\nimport org.apache.sshd.common.util.io.FileInfoExtractor;\nimport org.apache.sshd.common.util.io.IoUtils;\nimport org.apache.sshd.common.util.logging.AbstractLoggingBean;\nimport org.apache.sshd.server.session.ServerSession;\n/**\n * @author <a href=\"mailto:dev@mina.apache.org\">Apache MINA SSHD Project</a>\n */\n@SuppressWarnings(\"checkstyle:MethodCount\") // TODO split this big class and remove the suppression\npublic abstract class AbstractSftpSubsystemHelper\n            extends AbstractLoggingBean\n            implements SftpEventListenerManager, SftpSubsystemEnvironment {\n    /**\n     * Whether to automatically follow symbolic links when resolving paths\n     * @see #DEFAULT_AUTO_FOLLOW_LINKS\n     */\n    public static final String AUTO_FOLLOW_LINKS = \"sftp-auto-follow-links\";\n    /**\n     * Default value of {@value #AUTO_FOLLOW_LINKS}\n     */\n    public static final boolean DEFAULT_AUTO_FOLLOW_LINKS = true;\n    /**\n     * Allows controlling reports of which client extensions are supported\n     * (and reported via &quot;support&quot; and &quot;support2&quot; server\n     * extensions) as a comma-separate list of names. <B>Note:</B> requires\n     * overriding the {@link #executeExtendedCommand(Buffer, int, String)}\n     * command accordingly. If empty string is set then no server extensions\n     * are reported\n     *\n     * @see #DEFAULT_SUPPORTED_CLIENT_EXTENSIONS\n     */\n    public static final String CLIENT_EXTENSIONS_PROP = \"sftp-client-extensions\";\n    /**\n     * The default reported supported client extensions (case <U>insensitive</U>)\n     */\n    public static final NavigableMap<String, OptionalFeature> DEFAULT_SUPPORTED_CLIENT_EXTENSIONS =\n        // TODO text-seek - see http://tools.ietf.org/wg/secsh/draft-ietf-secsh-filexfer/draft-ietf-secsh-filexfer-13.txt\n        // TODO home-directory - see http://tools.ietf.org/wg/secsh/draft-ietf-secsh-filexfer/draft-ietf-secsh-filexfer-09.txt\n        NavigableMapBuilder.<String, OptionalFeature>builder()\n            .put(SftpConstants.EXT_VERSION_SELECT, OptionalFeature.TRUE)\n            .put(SftpConstants.EXT_COPY_FILE, OptionalFeature.TRUE)\n            .put(SftpConstants.EXT_MD5_HASH, BuiltinDigests.md5)\n            .put(SftpConstants.EXT_MD5_HASH_HANDLE, BuiltinDigests.md5)\n            .put(SftpConstants.EXT_CHECK_FILE_HANDLE, OptionalFeature.any(BuiltinDigests.VALUES))\n            .put(SftpConstants.EXT_CHECK_FILE_NAME, OptionalFeature.any(BuiltinDigests.VALUES))\n            .put(SftpConstants.EXT_COPY_DATA, OptionalFeature.TRUE)\n            .put(SftpConstants.EXT_SPACE_AVAILABLE, OptionalFeature.TRUE)\n            .immutable();\n    /**\n     * Comma-separated list of which {@code OpenSSH} extensions are reported and\n     * what version is reported for each - format: {@code name=version}. If empty\n     * value set, then no such extensions are reported. Otherwise, the\n     * {@link #DEFAULT_OPEN_SSH_EXTENSIONS} are used\n     */\n    public static final String OPENSSH_EXTENSIONS_PROP = \"sftp-openssh-extensions\";\n    public static final List<OpenSSHExtension> DEFAULT_OPEN_SSH_EXTENSIONS =\n        Collections.unmodifiableList(\n            Arrays.asList(\n                new OpenSSHExtension(FsyncExtensionParser.NAME, \"1\"),\n                new OpenSSHExtension(HardLinkExtensionParser.NAME, \"1\")\n            ));\n    public static final List<String> DEFAULT_OPEN_SSH_EXTENSIONS_NAMES =\n        Collections.unmodifiableList(\n            NamedResource.getNameList(DEFAULT_OPEN_SSH_EXTENSIONS));\n    /**\n     * Comma separate list of {@code SSH_ACL_CAP_xxx} names - where name can be without\n     * the prefix. If not defined then {@link #DEFAULT_ACL_SUPPORTED_MASK} is used\n     */\n    public static final String ACL_SUPPORTED_MASK_PROP = \"sftp-acl-supported-mask\";\n    public static final Set<Integer> DEFAULT_ACL_SUPPORTED_MASK =\n        Collections.unmodifiableSet(\n            new HashSet<>(Arrays.asList(\n                SftpConstants.SSH_ACL_CAP_ALLOW,\n                SftpConstants.SSH_ACL_CAP_DENY,\n                SftpConstants.SSH_ACL_CAP_AUDIT,\n                SftpConstants.SSH_ACL_CAP_ALARM)));\n    /**\n     * Property that can be used to set the reported NL value.\n     * If not set, then {@link IoUtils#EOL} is used\n     */\n    public static final String NEWLINE_VALUE = \"sftp-newline\";\n    /**\n     * Force the use of a max. packet length for {@link #doRead(Buffer, int)} protection\n     * against malicious packets\n     *\n     * @see #DEFAULT_MAX_READDATA_PACKET_LENGTH\n     */\n    public static final String MAX_READDATA_PACKET_LENGTH_PROP = \"sftp-max-readdata-packet-length\";\n    public static final int DEFAULT_MAX_READDATA_PACKET_LENGTH = 63 * 1024;\n    private final UnsupportedAttributePolicy unsupportedAttributePolicy;\n    private final Collection<SftpEventListener> sftpEventListeners = new CopyOnWriteArraySet<>();\n    private final SftpEventListener sftpEventListenerProxy;\n    private final SftpFileSystemAccessor fileSystemAccessor;\n    private final SftpErrorStatusDataHandler errorStatusDataHandler;\n    protected AbstractSftpSubsystemHelper(\n            UnsupportedAttributePolicy policy, SftpFileSystemAccessor accessor, SftpErrorStatusDataHandler handler) {\n        unsupportedAttributePolicy = Objects.requireNonNull(policy, \"No unsupported attribute policy provided\");\n        fileSystemAccessor = Objects.requireNonNull(accessor, \"No file system accessor\");\n        sftpEventListenerProxy = EventListenerUtils.proxyWrapper(SftpEventListener.class, getClass().getClassLoader(), sftpEventListeners);\n        errorStatusDataHandler = Objects.requireNonNull(handler, \"No error status data handler\");\n    }\n    @Override\n    public UnsupportedAttributePolicy getUnsupportedAttributePolicy() {\n        return unsupportedAttributePolicy;\n    }\n    @Override\n    public SftpFileSystemAccessor getFileSystemAccessor() {\n        return fileSystemAccessor;\n    }\n    @Override\n    public SftpEventListener getSftpEventListenerProxy() {\n        return sftpEventListenerProxy;\n    }\n    @Override\n    public boolean addSftpEventListener(SftpEventListener listener) {\n        return sftpEventListeners.add(SftpEventListener.validateListener(listener));\n    }\n    @Override\n    public boolean removeSftpEventListener(SftpEventListener listener) {\n        if (listener == null) {\n            return false;\n        }\n        return sftpEventListeners.remove(SftpEventListener.validateListener(listener));\n    }\n<fim_suffix>    public SftpErrorStatusDataHandler getErrorStatusDataHandler() {\n        return errorStatusDataHandler;\n    }<fim_middle>// function below has no smell\n"}