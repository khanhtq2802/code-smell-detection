{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the  \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * $Id$\n */\npackage org.apache.xalan.lib;\n\nimport org.apache.xml.dtm.ref.DTMNodeProxy;\n\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\n/**\n * The base class for some EXSLT extension classes.\n * It contains common utility methods to be used by the sub-classes.\n */\n<fim_suffix>public abstract class ExsltBase\n{\n  /**\n   * Return the string value of a Node\n   *\n   * @param n The Node.\n   * @return The string value of the Node\n   */\n  protected static String toString(Node n)\n  {\n    if (n instanceof DTMNodeProxy)\n  \t return ((DTMNodeProxy)n).getStringValue();\n    else\n    {\n      String value = n.getNodeValue();\n      if (value == null)\n      {\n        NodeList nodelist = n.getChildNodes();\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < nodelist.getLength(); i++)\n        {\n          Node childNode = nodelist.item(i);\n          buf.append(toString(childNode));\n        }\n        return buf.toString();\n      }\n      else\n        return value;\n    }\n  }\n  \n  /**\n   * Convert the string value of a Node to a number.\n   * Return NaN if the string is not a valid number.\n   *\n   * @param n The Node.\n   * @return The number value of the Node\n   */\n  protected static double toNumber(Node n)\n  {\n    double d = 0.0;\n    String str = toString(n);\n    try\n    {\n      d = Double.valueOf(str).doubleValue();\n    }\n    catch (NumberFormatException e)\n    {\n      d= Double.NaN;  \t\t\n    }\n    return d;\n  }\n}<fim_middle>// class below has no smell\n"}