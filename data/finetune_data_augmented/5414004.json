{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.phoenix.jdbc;\n\nimport java.sql.ParameterMetaData;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\n\nimport org.apache.phoenix.exception.SQLExceptionCode;\nimport org.apache.phoenix.exception.SQLExceptionInfo;\nimport org.apache.phoenix.parse.BindParseNode;\nimport org.apache.phoenix.schema.types.PDataType;\nimport org.apache.phoenix.schema.PDatum;\nimport org.apache.phoenix.schema.SortOrder;\nimport org.apache.phoenix.schema.TypeMismatchException;\n\n\n\n/**\n * \n * Implementation of ParameterMetaData for Phoenix\n *\n * \n * @since 0.1\n */\npublic class PhoenixParameterMetaData implements ParameterMetaData {\n    private final PDatum[] params;\n    private static final PDatum EMPTY_DATUM = new PDatum() {\n        @Override\n        public boolean isNullable() {\n            return false;\n        }\n        \n        @Override\n        public Integer getScale() {\n            return null;\n        }\n        \n        @Override\n        public Integer getMaxLength() {\n            return null;\n        }\n        \n        @Override\n        public PDataType getDataType() {\n            return null;\n        }\n        \n        @Override\n        public SortOrder getSortOrder() {\n            return SortOrder.getDefault();\n        }\n    };\n    public static final PhoenixParameterMetaData EMPTY_PARAMETER_META_DATA = new PhoenixParameterMetaData(0);\n    public PhoenixParameterMetaData(int paramCount) {\n        params = new PDatum[paramCount];\n        //initialize the params array with the empty_datum marker value.\n        for(int i = 0; i < paramCount; i++) {\n            params[i] = EMPTY_DATUM;\n        }\n    }\n \n<fim_suffix>    private PDatum getParam(int index) throws SQLException {\n        if (index <= 0 || index > params.length) {\n            throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND)\n                .setMessage(\"The index is \" + index + \". Must be between 1 and \" + params.length)\n                .build().buildException();\n        }\n        PDatum param = params[index-1];\n        \n        if (param == EMPTY_DATUM) {\n            //value at params[index-1] was never set.\n            throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_VALUE_UNBOUND)\n                .setMessage(\"Parameter at index \" + index + \" is unbound\").build().buildException();\n        }\n        return param;\n    }\n    @Override\n    public String getParameterClassName(int index) throws SQLException {\n        PDatum datum = getParam(index);\n        PDataType type = datum == null ? null : datum.getDataType();\n        return type == null ? null : type.getJavaClassName();\n    }\n\n    @Override\n    public int getParameterCount() throws SQLException {\n        return params.length;\n    }\n\n    @Override\n    public int getParameterMode(int index) throws SQLException {\n        return ParameterMetaData.parameterModeIn;\n    }\n\n    @Override\n    public int getParameterType(int index) throws SQLException {\n        return getParam(index).getDataType().getSqlType();\n    }\n\n    @Override\n    public String getParameterTypeName(int index) throws SQLException {\n        return getParam(index).getDataType().getSqlTypeName();\n    }\n\n    @Override\n    public int getPrecision(int index) throws SQLException {\n        return 0;\n    }\n\n    @Override\n    public int getScale(int index) throws SQLException {\n        return 0;\n    }\n\n    @Override\n    public int isNullable(int index) throws SQLException {\n        return getParam(index).isNullable() ? ResultSetMetaData.columnNullable : ResultSetMetaData.columnNoNulls;\n    }\n\n    @Override\n    public boolean isSigned(int index) throws SQLException {\n        @SuppressWarnings(\"rawtypes\")\n\t\tClass clazz = getParam(index).getDataType().getJavaClass();\n        return Number.class.isInstance(clazz);\n    }\n\n    @Override\n    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n        return iface.isInstance(this);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <T> T unwrap(Class<T> iface) throws SQLException {\n        if (!iface.isInstance(this)) {\n            throw new SQLExceptionInfo.Builder(SQLExceptionCode.CLASS_NOT_UNWRAPPABLE)\n                .setMessage(this.getClass().getName() + \" not unwrappable from \" + iface.getName())\n                .build().buildException();\n        }\n        return (T)this;\n    }\n\n    public void addParam(BindParseNode bind, PDatum datum) throws SQLException {\n        PDatum bindDatum = params[bind.getIndex()];\n        if (bindDatum != null && bindDatum.getDataType() != null && !datum.getDataType().isCoercibleTo(bindDatum.getDataType())) {\n            throw TypeMismatchException.newException(datum.getDataType(), bindDatum.getDataType());\n        }\n        params[bind.getIndex()] = datum;\n    }\n}<fim_middle>// function below has no smell\n"}