{"text": "<fim_prefix>import org.apache.nifi.controller.repository.claim.ResourceClaimManager;\nimport org.apache.nifi.controller.swap.SchemaSwapDeserializer;\nimport org.apache.nifi.controller.swap.SchemaSwapSerializer;\nimport org.apache.nifi.controller.swap.SimpleSwapDeserializer;\nimport org.apache.nifi.controller.swap.StandardSwapContents;\nimport org.apache.nifi.controller.swap.StandardSwapSummary;\nimport org.apache.nifi.controller.swap.SwapDeserializer;\nimport org.apache.nifi.controller.swap.SwapSerializer;\nimport org.apache.nifi.events.EventReporter;\nimport org.apache.nifi.reporting.Severity;\nimport org.apache.nifi.stream.io.StreamUtils;\nimport org.apache.nifi.util.NiFiProperties;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FilenameFilter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n/**\n * <p>\n * An implementation of the {@link FlowFileSwapManager} that swaps FlowFiles\n * to/from local disk\n * </p>\n */\npublic class FileSystemSwapManager implements FlowFileSwapManager {\n    private static final Pattern SWAP_FILE_PATTERN = Pattern.compile(\"\\\\d+-.+?(\\\\..*?)?\\\\.swap\");\n    private static final Pattern TEMP_SWAP_FILE_PATTERN = Pattern.compile(\"\\\\d+-.+?(\\\\..*?)?\\\\.swap\\\\.part\");\n    public static final int SWAP_ENCODING_VERSION = 10;\n    public static final String EVENT_CATEGORY = \"Swap FlowFiles\";\n    private static final Logger logger = LoggerFactory.getLogger(FileSystemSwapManager.class);\n    private final File storageDirectory;\n    // effectively final\n    private FlowFileRepository flowFileRepository;\n    private EventReporter eventReporter;\n    private ResourceClaimManager claimManager;\n    private static final byte[] MAGIC_HEADER = {'S', 'W', 'A', 'P'};\n    /**\n     * Default no args constructor for service loading only.\n     */\n    public FileSystemSwapManager() {\n        storageDirectory = null;\n    }\n    public FileSystemSwapManager(final NiFiProperties nifiProperties) {\n        this(nifiProperties.getFlowFileRepositoryPath());\n    }\n    public FileSystemSwapManager(final Path flowFileRepoPath) {\n        this.storageDirectory = flowFileRepoPath.resolve(\"swap\").toFile();\n        if (!storageDirectory.exists() && !storageDirectory.mkdirs()) {\n            throw new RuntimeException(\"Cannot create Swap Storage directory \" + storageDirectory.getAbsolutePath());\n        }\n    }\n    @Override\n    public synchronized void initialize(final SwapManagerInitializationContext initializationContext) {\n        this.claimManager = initializationContext.getResourceClaimManager();\n        this.eventReporter = initializationContext.getEventReporter();\n        this.flowFileRepository = initializationContext.getFlowFileRepository();\n    }\n    @Override\n    public String swapOut(final List<FlowFileRecord> toSwap, final FlowFileQueue flowFileQueue, final String partitionName) throws IOException {\n        if (toSwap == null || toSwap.isEmpty()) {\n            return null;\n        }\n        final String swapFilePrefix = System.currentTimeMillis() + \"-\" + flowFileQueue.getIdentifier() + \"-\" + UUID.randomUUID().toString();\n        final String swapFileBaseName = partitionName == null ? swapFilePrefix : swapFilePrefix + \".\" + partitionName;\n        final String swapFileName = swapFileBaseName + \".swap\";\n        final File swapFile = new File(storageDirectory, swapFileName);\n        final File swapTempFile = new File(swapFile.getParentFile(), swapFile.getName() + \".part\");\n        final String swapLocation = swapFile.getAbsolutePath();\n        final SwapSerializer serializer = new SchemaSwapSerializer();\n        try (final FileOutputStream fos = new FileOutputStream(swapTempFile);\n            final OutputStream out = new BufferedOutputStream(fos)) {\n            out.write(MAGIC_HEADER);\n            final DataOutputStream dos = new DataOutputStream(out);\n            dos.writeUTF(serializer.getSerializationName());\n            serializer.serializeFlowFiles(toSwap, flowFileQueue, swapLocation, out);\n            fos.getFD().sync();\n        } catch (final IOException ioe) {\n            // we failed to write out the entire swap file. Delete the temporary file, if we can.\n            swapTempFile.delete();\n            throw ioe;\n        }\n        if (swapTempFile.renameTo(swapFile)) {\n            flowFileRepository.swapFlowFilesOut(toSwap, flowFileQueue, swapLocation);\n        } else {\n            error(\"Failed to swap out FlowFiles from \" + flowFileQueue + \" due to: Unable to rename swap file from \" + swapTempFile + \" to \" + swapFile);\n        }\n        return swapLocation;\n    }\n    @Override\n    public SwapContents swapIn(final String swapLocation, final FlowFileQueue flowFileQueue) throws IOException {\n        final File swapFile = new File(swapLocation);\n        final boolean validLocation = flowFileRepository.isValidSwapLocationSuffix(swapFile.getName());\n        if (!validLocation) {\n            warn(\"Cannot swap in FlowFiles from location \" + swapLocation + \" because the FlowFile Repository does not know about this Swap Location. \" +\n                \"This file should be manually removed. This typically occurs when a Swap File is written but the FlowFile Repository is not updated yet to reflect this. \" +\n                \"This is generally not a cause for concern, but may be indicative of a failure to update the FlowFile Repository.\");\n            final SwapSummary swapSummary = new StandardSwapSummary(new QueueSize(0, 0), 0L, Collections.emptyList());\n            return new StandardSwapContents(swapSummary, Collections.emptyList());\n        }\n        final SwapContents swapContents = peek(swapLocation, flowFileQueue);\n        flowFileRepository.swapFlowFilesIn(swapFile.getAbsolutePath(), swapContents.getFlowFiles(), flowFileQueue);\n        if (!swapFile.delete()) {\n            warn(\"Swapped in FlowFiles from file \" + swapFile.getAbsolutePath() + \" but failed to delete the file; this file should be cleaned up manually\");\n        }\n        return swapContents;\n    }\n    @Override\n    public SwapContents peek(final String swapLocation, final FlowFileQueue flowFileQueue) throws IOException {\n        final File swapFile = new File(swapLocation);\n        if (!swapFile.exists()) {\n            throw new FileNotFoundException(\"Failed to swap in FlowFiles from external storage location \" + swapLocation + \" into FlowFile Queue because the file could not be found\");\n        }\n        try (final InputStream fis = new FileInputStream(swapFile);\n                final InputStream bis = new BufferedInputStream(fis);\n                final DataInputStream in = new DataInputStream(bis)) {\n            final SwapDeserializer deserializer = createSwapDeserializer(in);\n            return deserializer.deserializeFlowFiles(in, swapLocation, flowFileQueue, claimManager);\n        }\n    }\n    @Override\n    public void purge() {\n        final File[] swapFiles = storageDirectory.listFiles(new FilenameFilter() {\n            @Override\n            public boolean accept(final File dir, final String name) {\n                return SWAP_FILE_PATTERN.matcher(name).matches() || TEMP_SWAP_FILE_PATTERN.matcher(name).matches();\n            }\n        });\n        for (final File file : swapFiles) {\n            if (!file.delete()) {\n                warn(\"Failed to delete Swap File \" + file + \" when purging FlowFile Swap Manager\");\n            }\n        }\n    }\n    private String getOwnerQueueIdentifier(final File swapFile) {\n        final String[] splits = swapFile.getName().split(\"-\");\n        if (splits.length > 6) {\n            final String queueIdentifier = splits[1] + \"-\" + splits[2] + \"-\" + splits[3] + \"-\" + splits[4] + \"-\" + splits[5];\n            return queueIdentifier;\n        }\n        return null;\n    }\n<fim_suffix>    private String getOwnerPartition(final File swapFile) {\n        final String filename = swapFile.getName();\n        final int indexOfDot = filename.indexOf(\".\");\n        if (indexOfDot < 1) {\n            return null;\n        }\n        final int lastIndexOfDot = filename.lastIndexOf(\".\");\n        if (lastIndexOfDot == indexOfDot) {\n            return null;\n        }\n        return filename.substring(indexOfDot + 1, lastIndexOfDot);\n    }<fim_middle>// function below has no smell\n"}