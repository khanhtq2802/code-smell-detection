{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2016 Red Hat Inc and others\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Red Hat Inc - Initial API and implementation\n *******************************************************************************/\n\npackage org.eclipse.kura.camel.component;\n\nimport static org.eclipse.kura.camel.component.Configuration.asString;\n\nimport java.util.Map;\nimport java.util.Objects;\n\nimport org.eclipse.kura.configuration.ConfigurableComponent;\nimport org.osgi.framework.BundleContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * An abstract base class for implementing a {@link ConfigurableComponent} using\n * configured XML\n * <p>\n * This class intended to be subclasses and customized according to needs.\n * </p>\n * <p>\n * <strong>Note:</strong> This class is intended to be used as <em>OSGi Service\n * Component</em>. There the methods {@link #activate(BundleContext, Map)},\n * {@link #modified(Map)} and {@link #deactivate(BundleContext)} need to be\n * configured accordingly.\n * </p>\n * <p>\n * The lifecycle methods of this class declare annotations based on {@link org.osgi.service.component.annotations}.\n * However those annotations are only discovered during build time. They are declared in order\n * to provide proper support when annotation based tooling is used. Otherwise those methods must be\n * mapped manually in the DS declaration.\n * </p>\n */\npublic abstract class AbstractXmlCamelComponent extends AbstractCamelComponent implements ConfigurableComponent {\n\n    private static final Logger logger = LoggerFactory.getLogger(AbstractXmlCamelComponent.class);\n    private final String xmlDataProperty;\n\n    public AbstractXmlCamelComponent(final String xmlDataProperty) {\n        Objects.requireNonNull(xmlDataProperty);\n\n        this.xmlDataProperty = xmlDataProperty;\n    }\n\n    protected void activate(final BundleContext context, final Map<String, Object> properties) throws Exception {\n        try {\n            start(properties);\n\n            // apply current routes\n            applyRoutes(properties);\n        } catch (Exception e) {\n            logger.warn(\"Problem activating component\", e);\n            // we need to suppress exceptions during start\n            // otherwise Kura cannot configure us anymore\n        }\n    }\n\n    protected void deactivate(final BundleContext context) throws Exception {\n        try {\n            stop();\n        } catch (Exception e) {\n            logger.warn(\"Problem deactivating component\", e);\n            throw e;\n        }\n    }\n\n<fim_suffix>    protected void modified(final Map<String, Object> properties) throws Exception {\n        logger.debug(\"Updating properties: {}\", properties);\n        try {\n            if (isRestartNeeded(properties)) {\n                logger.info(\"Need restart\");\n                stop();\n                start(properties);\n            }\n\n            // apply current routes\n\n            applyRoutes(properties);\n        } catch (Exception e) {\n            logger.warn(\"Problem updating component\", e);\n            throw e;\n        }\n    }\n\n    private void applyRoutes(final Map<String, Object> properties) throws Exception {\n        this.runner.setRoutes(asString(properties, this.xmlDataProperty));\n    }\n\n    protected boolean isRestartNeeded(final Map<String, Object> properties) {\n        return false;\n    }\n\n}<fim_middle>// function below has no smell\n"}