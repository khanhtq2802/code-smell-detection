{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* $Id$ */\n\npackage org.apache.fop.afp.svg;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.batik.gvt.font.GVTFontFace;\n\nimport org.apache.fop.afp.AFPEventProducer;\nimport org.apache.fop.afp.fonts.DoubleByteFont;\nimport org.apache.fop.events.EventBroadcaster;\nimport org.apache.fop.fonts.Font;\nimport org.apache.fop.fonts.FontInfo;\nimport org.apache.fop.fonts.FontTriplet;\nimport org.apache.fop.fonts.Typeface;\nimport org.apache.fop.svg.font.FOPFontFamilyResolverImpl;\nimport org.apache.fop.svg.font.FOPGVTFontFamily;\nimport org.apache.fop.svg.font.FilteringFontFamilyResolver;\n\npublic class AFPFontFamilyResolver extends FilteringFontFamilyResolver {\n\n    private final FontInfo fontInfo;\n\n    private final AFPEventProducer eventProducer;\n\n\n    public AFPFontFamilyResolver(FontInfo fontInfo, EventBroadcaster eventBroadCaster) {\n        super(new FOPFontFamilyResolverImpl(fontInfo));\n        this.fontInfo = fontInfo;\n        this.eventProducer = AFPEventProducer.Provider.get(eventBroadCaster);\n    }\n\n<fim_suffix>    @Override\n    public FOPGVTFontFamily resolve(String familyName) {\n        FOPGVTFontFamily fopGVTFontFamily = super.resolve(familyName);\n        // TODO why don't DB fonts work with GOCA?!?\n        if (fopGVTFontFamily != null && fopGVTFontFamily.deriveFont(1, new HashMap())\n                .getFont().getFontMetrics() instanceof DoubleByteFont) {\n            notifyDBFontRejection(fopGVTFontFamily.getFamilyName());\n            fopGVTFontFamily = null;\n        }\n        return fopGVTFontFamily;\n    }\n\n    @Override\n    public FOPGVTFontFamily getFamilyThatCanDisplay(char c) {\n        Map<String, Typeface> fonts = fontInfo.getFonts();\n        for (Typeface font : fonts.values()) {\n            // TODO why don't DB fonts work with GOCA?!?\n            if (font.hasChar(c) && !(font instanceof DoubleByteFont)) {\n                String fontFamily = font.getFamilyNames().iterator().next();\n                if (font instanceof DoubleByteFont) {\n                    notifyDBFontRejection(font.getFontName());\n                } else {\n                    return new FOPGVTFontFamily(fontInfo, fontFamily,\n                            new FontTriplet(fontFamily, Font.STYLE_NORMAL, Font.WEIGHT_NORMAL),\n                            new GVTFontFace(fontFamily));\n                }\n\n            }\n        }\n        return null;\n    }\n\n    private void notifyDBFontRejection(String fontFamily) {\n        eventProducer.invalidDBFontInSVG(this, fontFamily);\n    }\n\n}<fim_middle>// function below has no smell\n"}