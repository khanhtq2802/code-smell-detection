{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2017 Pivotal Software, Inc.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n * Pivotal Software, Inc. - initial API and implementation\n *******************************************************************************/\npackage org.springframework.ide.eclipse.boot.wizard;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.eclipse.jface.layout.GridDataFactory;\nimport org.eclipse.jface.layout.GridLayoutFactory;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.graphics.Point;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Display;\nimport org.springframework.ide.eclipse.boot.core.initializr.InitializrServiceSpec.Dependency;\nimport org.springsource.ide.eclipse.commons.livexp.core.LiveExpression;\nimport org.springsource.ide.eclipse.commons.livexp.ui.ExpandableSection;\nimport org.springsource.ide.eclipse.commons.livexp.ui.IPageWithSections;\nimport org.springsource.ide.eclipse.commons.livexp.ui.Scroller;\nimport org.springsource.ide.eclipse.commons.livexp.ui.WizardPageSection;\nimport org.springsource.ide.eclipse.commons.livexp.util.Filter;\n\npublic class FilteredDependenciesSection extends WizardPageSection {\n\n\tprivate Composite dependencyArea;\n\tprivate Scroller scroller;\n\n\tprivate LiveExpression<Filter<Dependency>> filter;\n\n\tprivate Point sizeHint = new Point(SWT.DEFAULT, SWT.DEFAULT);\n\n\tprivate int columns = 1;\n\tprivate HierarchicalMultiSelectionFieldModel<Dependency> dependencies;\n\n\tpublic FilteredDependenciesSection(IPageWithSections owner, NewSpringBootWizardModel model,\n\t\t\tLiveExpression<Filter<Dependency>> filter) {\n\t\tthis(owner, model.dependencies, filter);\n\t}\n\n\tpublic FilteredDependenciesSection(IPageWithSections owner,  HierarchicalMultiSelectionFieldModel<Dependency> dependencies,\n\t\t\tLiveExpression<Filter<Dependency>> filter) {\n\t\tsuper(owner);\n\t\tthis.dependencies = dependencies;\n\t\tthis.filter = filter;\n\t}\n\n\tpublic FilteredDependenciesSection sizeHint(Point sizeHint) {\n\t\tif (sizeHint != null) {\n\t\t\tthis.sizeHint = sizeHint;\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic FilteredDependenciesSection columns(int columns) {\n\t\tthis.columns = columns;\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic void createContents(Composite page) {\n\t\tscroller = new Scroller(page);\n\t\tGridDataFactory.fillDefaults().grab(true, true).minSize(sizeHint).hint(sizeHint).applyTo(scroller);\n\t\tdependencyArea = scroller.getBody();\n\t\tGridLayoutFactory.fillDefaults().applyTo(dependencyArea);\n\t\tGridDataFactory.fillDefaults().grab(true, true).applyTo(dependencyArea);\n\t\tMap<String, CheckboxExpandableSection<Dependency>> sectionsToRefresh = new HashMap<>();\n\t\tfor (String cat : dependencies.getCategories()) {\n\t\t\tMultiSelectionFieldModel<Dependency> dependencyGroup = dependencies.getContents(cat);\n\t\t\tCheckBoxesSection<Dependency> checkboxesSection = new CheckBoxesSection<>(owner,\n\t\t\t\t\tdependencyGroup.getCheckBoxModels()).columns(columns);\n\t\t\tCheckboxExpandableSection<Dependency> expandable = new CheckboxExpandableSection<>(owner, dependencyGroup.getLabel(), checkboxesSection);\n\t\t\texpandable.createContents(dependencyArea);\n\n\t\t\t// Always expanded as it only shows selections. If there are no\n\t\t\t// selections, the expandable\n\t\t\t// section itself is hidden\n\t\t\texpandable.getExpansionState().setValue(false);\n\n\t\t\tsectionsToRefresh.put(cat, expandable);\n\t\t}\n\t\tthis.filter.addListener((exp, value) -> {\n\t\t\t// PT 143003753: there is a bit of lag when deleting characters in text filter that produce a lot of\n\t\t\t// results. Consequently running this asynchronously.\n\t\t\tDisplay.getCurrent().asyncExec(() -> {\n\t\t\t\tfor (String cat : dependencies.getCategories()) {\n\t\t\t\t\tCheckboxExpandableSection<Dependency> expandable = sectionsToRefresh.get(cat);\n\t\t\t\t\tif (expandable != null) {\n\t\t\t\t\t\tonFilter(expandable, expandable.getCheckBoxSection(), cat);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n<fim_suffix>\tprivate void onFilter(ExpandableSection expandable, CheckBoxesSection<Dependency> checkboxesSection, String cat) {\n\t\tFilter<Dependency> filter = this.filter.getValue();\n\t\tcheckboxesSection.applyFilter(filter);\n\t\tboolean isTrivialFilter = filter==null || filter.isTrivial();\n\t\tif (checkboxesSection.isCreated()) {\n\t\t\tboolean hasVisible = checkboxesSection.hasVisible();\n\t\t\texpandable.setVisible(hasVisible);\n\t\t\tif (hasVisible) {\n\t\t\t\texpandable.getExpansionState().setValue(!isTrivialFilter);\n\t\t\t}\n\t\t}\n\t\tlayout();\n\t}\n\n\tprivate void layout() {\n\t\tif (dependencyArea != null && !dependencyArea.isDisposed()) {\n\t\t\tdependencyArea.layout(true);\n\t\t\tdependencyArea.getParent().layout(true);\n\t\t}\n\t}\n\n\tstatic class CheckboxExpandableSection<T> extends ExpandableSection {\n\n\t\tprivate CheckBoxesSection<T> checkBoxSection;\n\t\tpublic CheckboxExpandableSection(IPageWithSections owner, String title, CheckBoxesSection<T> checkBoxSection) {\n\t\t\tsuper(owner, title, checkBoxSection);\n\t\t\tthis.checkBoxSection = checkBoxSection;\n\t\t}\n\n\t\tpublic CheckBoxesSection<T> getCheckBoxSection() {\n\t\t\treturn checkBoxSection;\n\t\t}\n\n\t}\n}<fim_middle>// function below has no smell\n"}