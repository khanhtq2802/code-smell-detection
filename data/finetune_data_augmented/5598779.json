{"text": "<fim_prefix>\n<fim_suffix>public class StAXCatalogWriter implements ICatalogXMLConstants\n{\n    /**\n     * Create an catalog.xml writer.\n     * \n     * @param swc SWC model\n     * @param writer writer\n     * @throws XMLStreamException XML error\n     * @throws FactoryConfigurationError factory error\n     */\n    public StAXCatalogWriter(final ISWC swc, final Writer writer) throws XMLStreamException, FactoryConfigurationError\n    {\n        assert swc != null : \"expect SWC model\";\n        assert writer != null : \"expect Writer\";\n        this.swc = swc;\n        final XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newInstance();\n        assert xmlOutputFactory != null : \"Expect XMLOutputFactory implementation.\";\n        this.xmlWriter = new XMLFormatter(xmlOutputFactory.createXMLStreamWriter(writer));\n    }\n    private final XMLStreamWriter xmlWriter;\n    private final ISWC swc;\n    /**\n     * Write serialized XML to output.\n     * \n     * @throws XMLStreamException error\n     */\n    public void write() throws XMLStreamException\n    {\n        xmlWriter.writeStartDocument(); // start XML\n        {\n            xmlWriter.writeStartElement(TAG_SWC);\n            xmlWriter.writeAttribute(ATTR_XMLNS, XMLNS_SWC_CATALOG_9);\n            writeVersions();\n            writeFeatures();\n            writeComponents();\n            writeLibraries();\n            writeFiles();\n            xmlWriter.writeEndElement();\n        }\n        xmlWriter.writeEndDocument(); // end XML\n        xmlWriter.flush();\n        xmlWriter.close();\n    }\n    private static final Comparator<ISWCComponent> COMPONENT_COMPARATOR =\n        new Comparator<ISWCComponent>() {\n            @Override\n            public int compare(ISWCComponent o1, ISWCComponent o2)\n            {\n                return o1.getQName().compareTo(o2.getQName());\n            }\n        };\n    private void writeComponents() throws XMLStreamException\n    {\n        Collection<ISWCComponent> componentsList = swc.getComponents();\n        if (componentsList.isEmpty())\n            return;\n        xmlWriter.writeStartElement(TAG_COMPONENTS);\n        ISWCComponent[] components = componentsList.toArray(new ISWCComponent[componentsList.size()]);\n        Arrays.sort(components, COMPONENT_COMPARATOR);\n        for (final ISWCComponent component : components)\n        {\n            xmlWriter.writeEmptyElement(TAG_COMPONENT);\n            if (component.getQName() != null)\n                xmlWriter.writeAttribute(ATTR_CLASS_NAME, dottedQNameToColonQName(component.getQName()));\n            if (component.getName() != null)\n                xmlWriter.writeAttribute(ATTR_NAME, component.getName());\n            if (component.getURI() != null)\n                xmlWriter.writeAttribute(ATTR_URI, component.getURI());\n            if (component.getIcon() != null)\n                xmlWriter.writeAttribute(ATTR_ICON, component.getIcon());\n            if (component.getPreview() != null)\n                xmlWriter.writeAttribute(ATTR_PREVIEW, component.getPreview());\n        }\n        xmlWriter.writeEndElement();\n    }\n    private static final Comparator<ISWCFileEntry> FILE_COMPARATOR =\n        new Comparator<ISWCFileEntry>()\n        {\n            @Override\n            public int compare(ISWCFileEntry o1, ISWCFileEntry o2)\n            {\n                return o1.getPath().compareTo(o2.getPath());\n            }\n        };\n    private void writeFiles() throws XMLStreamException\n    {\n        Collection<ISWCFileEntry> filesCollection = swc.getFiles().values();\n        if (filesCollection.isEmpty())\n            return;\n        xmlWriter.writeStartElement(TAG_FILES);\n        ISWCFileEntry[] files = filesCollection.toArray(new ISWCFileEntry[filesCollection.size()]);\n        Arrays.sort(files, FILE_COMPARATOR);\n        for (final ISWCFileEntry file : files)\n        {\n            xmlWriter.writeEmptyElement(TAG_FILE);\n            xmlWriter.writeAttribute(ATTR_PATH, file.getPath());\n            xmlWriter.writeAttribute(ATTR_MOD, String.valueOf(file.getLastModified()));\n        }\n        xmlWriter.writeEndElement();\n    }\n    private static final Comparator<ISWCLibrary> LIBRARY_COMPARATOR =\n        new Comparator<ISWCLibrary>() {\n            @Override\n            public int compare(ISWCLibrary o1, ISWCLibrary o2)\n            {\n                return o1.getPath().compareTo(o2.getPath());\n            }\n        };\n    private static final Comparator<ISWCScript> SCRIPT_COMPARATOR =\n        new Comparator<ISWCScript>() {\n            @Override\n            public int compare(ISWCScript o1, ISWCScript o2)\n            {\n                return o1.getName().compareTo(o2.getName());\n            }\n        };\n    private static final Comparator<ISWCDigest> DIGEST_COMPARATOR =\n        new Comparator<ISWCDigest>() {\n            @Override\n            public int compare(ISWCDigest o1, ISWCDigest o2)\n            {\n                return o1.getValue().compareTo(o2.getValue());\n            }\n        };\n    private void writeLibraries() throws XMLStreamException\n    {\n        xmlWriter.writeStartElement(TAG_LIBRARIES);\n        final Collection<ISWCLibrary> librariesCollection = swc.getLibraries();\n        final ISWCLibrary[] libraries = librariesCollection.toArray(new ISWCLibrary[librariesCollection.size()]);\n        Arrays.sort(libraries, LIBRARY_COMPARATOR);\n        for (final ISWCLibrary library : libraries)\n        {\n            xmlWriter.writeStartElement(TAG_LIBRARY);\n            xmlWriter.writeAttribute(ATTR_PATH, library.getPath());\n            {\n                final Collection<ISWCScript> scriptsList = library.getScripts();\n                final ISWCScript[] scripts = scriptsList.toArray(new ISWCScript[scriptsList.size()]);\n                Arrays.sort(scripts, SCRIPT_COMPARATOR);\n                for (final ISWCScript script : scripts)\n                {\n                    writeLibraryScript(script);\n                }\n                final Collection<String> keepAS3MetadataList = library.getKeepAS3MetadataSet();\n                if (!keepAS3MetadataList.isEmpty())\n                {\n                    xmlWriter.writeStartElement(TAG_KEEP_AS3_METADATA);\n                    final String[] keepAS3Metadata = keepAS3MetadataList.toArray(new String[keepAS3MetadataList.size()]);\n                    Arrays.sort(keepAS3Metadata);\n                    for (final String metadata : keepAS3Metadata)\n                    {\n                        xmlWriter.writeEmptyElement(TAG_METADATA);\n                        xmlWriter.writeAttribute(ATTR_NAME, metadata);\n                    }\n                    xmlWriter.writeEndElement(); // end of <keep-as3-metadata>\n                }\n                xmlWriter.writeStartElement(TAG_DIGESTS);\n                final Collection<ISWCDigest> digestsList = library.getDigests();\n                final ISWCDigest[] digests = digestsList.toArray(new ISWCDigest[digestsList.size()]);\n                Arrays.sort(digests, DIGEST_COMPARATOR);\n                for (final ISWCDigest digest : digests)\n                {\n                    xmlWriter.writeEmptyElement(TAG_DIGEST);\n                    xmlWriter.writeAttribute(ATTR_TYPE, digest.getType());\n                    xmlWriter.writeAttribute(ATTR_SIGNED, digest.isSigned() ? \"true\" : \"false\"); \n                    xmlWriter.writeAttribute(TAG_VALUE, digest.getValue());\n                }\n                xmlWriter.writeEndElement(); // end of <digests>\n            }\n            xmlWriter.writeEndElement(); // end of <library>\n        }\n        xmlWriter.writeEndElement(); // end of <libraries>\n    }\n    private static String dottedQNameToColonQName(String qname)\n    {\n        int lastDotIndex = qname.lastIndexOf('.');\n        if (lastDotIndex == -1)\n            return qname;\n        final String packageName = qname.substring(0, lastDotIndex);\n        final String baseName = qname.substring(lastDotIndex + 1);\n        return packageName + \":\" + baseName; \n    }\n    private static final Comparator<Map.Entry<String, DependencyType>> DEPENDENCY_MAP_ENTRY_COMPARATOR =\n        new Comparator<Map.Entry<String, DependencyType>>()\n        {\n            @Override\n            public int compare(Entry<String, DependencyType> arg0, Entry<String, DependencyType> arg1)\n            {\n                int result = arg0.getKey().compareTo(arg1.getKey());\n                if (result != 0)\n                    return result;\n                return arg0.getValue().ordinal() - arg1.getValue().ordinal();\n            }\n        };\n    private void writeLibraryScript(final ISWCScript script) throws XMLStreamException\n    {\n        xmlWriter.writeStartElement(TAG_SCRIPT);\n        xmlWriter.writeAttribute(ATTR_NAME, script.getName());\n        xmlWriter.writeAttribute(ATTR_MOD, String.valueOf(script.getLastModified()));\n        if (script.getSignatureChecksum() != null)\n            xmlWriter.writeAttribute(ATTR_SIGNATURE_CHECKSUM, script.getSignatureChecksum());\n        final Set<String> definitionsSet = script.getDefinitions();<fim_middle>// class below has no smell\n"}