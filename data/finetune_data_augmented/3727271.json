{"text": "<fim_prefix>\n<fim_suffix>public class DruidPooledCallableStatement extends DruidPooledPreparedStatement implements CallableStatement {\n    private CallableStatement stmt;\n    public DruidPooledCallableStatement(DruidPooledConnection conn, PreparedStatementHolder holder) throws SQLException{\n        super(conn, holder);\n        this.stmt = (CallableStatement) holder.statement;\n    }\n    public CallableStatement getCallableStatementRaw() {\n        return stmt;\n    }\n    @Override\n    public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException {\n        try {\n            stmt.registerOutParameter(parameterIndex, sqlType);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException {\n        try {\n            stmt.registerOutParameter(parameterIndex, sqlType, scale);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public boolean wasNull() throws SQLException {\n        try {\n            return stmt.wasNull();\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public String getString(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getString(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public boolean getBoolean(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getBoolean(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public byte getByte(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getByte(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public short getShort(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getShort(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public int getInt(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getInt(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public long getLong(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getLong(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public float getFloat(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getFloat(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public double getDouble(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getDouble(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    @Deprecated\n    public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException {\n        try {\n            return stmt.getBigDecimal(parameterIndex, scale);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public byte[] getBytes(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getBytes(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public java.sql.Date getDate(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getDate(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public java.sql.Time getTime(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getTime(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public java.sql.Timestamp getTimestamp(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getTimestamp(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public Object getObject(int parameterIndex) throws SQLException {\n        try {\n            Object obj = stmt.getObject(parameterIndex);\n            return wrapObject(obj);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    private Object wrapObject(Object obj) {\n        if (obj instanceof ResultSet) {\n            ResultSet rs = (ResultSet) obj;\n            DruidPooledResultSet poolableResultSet = new DruidPooledResultSet(this, rs);\n            addResultSetTrace(poolableResultSet);\n            obj = poolableResultSet;\n        }\n        return obj;\n    }\n    @Override\n    public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getBigDecimal(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public Object getObject(int parameterIndex, java.util.Map<String, Class<?>> map) throws SQLException {\n        try {\n            Object obj = stmt.getObject(parameterIndex, map);\n            return wrapObject(obj);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public Ref getRef(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getRef(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public Blob getBlob(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getBlob(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public Clob getClob(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getClob(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public Array getArray(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getArray(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public java.sql.Date getDate(int parameterIndex, Calendar cal) throws SQLException {\n        try {\n            return stmt.getDate(parameterIndex, cal);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public java.sql.Time getTime(int parameterIndex, Calendar cal) throws SQLException {\n        try {\n            return stmt.getTime(parameterIndex, cal);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public java.sql.Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException {\n        try {\n            return stmt.getTimestamp(parameterIndex, cal);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public void registerOutParameter(int parameterIndex, int sqlType, String typeName) throws SQLException {\n        try {\n            stmt.registerOutParameter(parameterIndex, sqlType, typeName);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public void registerOutParameter(String parameterName, int sqlType) throws SQLException {\n        try {\n            stmt.registerOutParameter(parameterName, sqlType);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {\n        try {\n            stmt.registerOutParameter(parameterName, sqlType, scale);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {\n        try {\n            stmt.registerOutParameter(parameterName, sqlType, typeName);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public java.net.URL getURL(int parameterIndex) throws SQLException {\n        try {\n            return stmt.getURL(parameterIndex);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public void setURL(String parameterName, java.net.URL val) throws SQLException {\n        try {\n            stmt.setURL(parameterName, val);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public void setNull(String parameterName, int sqlType) throws SQLException {\n        try {\n            stmt.setNull(parameterName, sqlType);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public void setBoolean(String parameterName, boolean x) throws SQLException {\n        try {\n            stmt.setBoolean(parameterName, x);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override\n    public void setByte(String parameterName, byte x) throws SQLException {\n        try {\n            stmt.setByte(parameterName, x);\n        } catch (Throwable t) {\n            throw checkException(t);\n        }\n    }\n    @Override<fim_middle>// class below is data class\n"}