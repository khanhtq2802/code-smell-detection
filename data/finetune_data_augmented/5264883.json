{"text": "<fim_prefix>import org.eclipse.jface.preference.IPreferenceStore;\nimport org.eclipse.jface.preference.PreferenceStore;\nimport org.eclipse.swt.widgets.Composite;\nimport com.sun.jersey.api.client.Client;\nimport com.sun.jersey.api.client.ClientResponse;\nimport com.sun.jersey.api.client.WebResource;\n<fim_suffix>public class DefaultCasDocumentProvider extends\n        org.apache.uima.caseditor.editor.CasDocumentProvider {\n  private static final int READ_TIMEOUT = 30000;\n  private Map<Object, PreferenceStore> tsPreferenceStores =\n      new HashMap<Object, PreferenceStore>();\n  private Map<String, IPreferenceStore> sessionPreferenceStores = new HashMap<String, IPreferenceStore>();\n  private static TypeSystemDescription createTypeSystemDescription(InputStream in) throws IOException {\n    // Note:\n    // Type System location is not set correctly,\n    // resolving a referenced type system will fail\n    XMLInputSource xmlTypeSystemSource = new XMLInputSource(in, new File(\"\"));\n    XMLParser xmlParser = UIMAFramework.getXMLParser();\n    TypeSystemDescription typeSystemDesciptor;\n    try {\n      typeSystemDesciptor = (TypeSystemDescription) xmlParser\n          .parse(xmlTypeSystemSource);\n      typeSystemDesciptor.resolveImports();\n    } catch (InvalidXMLException e) {\n      throw new IOException(e);\n    }\n    return typeSystemDesciptor;\n  }\n  private static CAS createEmptyCAS(TypeSystemDescription typeSystem) {\n    ResourceSpecifierFactory resourceSpecifierFactory = UIMAFramework\n        .getResourceSpecifierFactory();\n    TypePriorities typePriorities = resourceSpecifierFactory\n        .createTypePriorities();\n    FsIndexDescription indexDesciptor = new FsIndexDescription_impl();\n    indexDesciptor.setLabel(\"TOPIndex\");\n    indexDesciptor.setTypeName(\"uima.cas.TOP\");\n    indexDesciptor.setKind(FsIndexDescription.KIND_SORTED);\n    CAS cas;\n    try {\n      cas = CasCreationUtils.createCas(typeSystem, typePriorities,\n          new FsIndexDescription[] { indexDesciptor });\n    } catch (ResourceInitializationException e) {\n      e.printStackTrace();\n      cas = null;\n    }\n    return cas;\n  }\n  @Override\n  protected ICasDocument createDocument(Object element) throws CoreException {\n    if (element instanceof CorpusServerCasEditorInput) {\n      // Note: We need to do some error handling here, how to report an error to\n      //       the user if downloading the CAS fails?\n      CorpusServerCasEditorInput casInput = (CorpusServerCasEditorInput) element;\n      Client client = Client.create();\n      client.setReadTimeout(READ_TIMEOUT);\n      WebResource webResource = client.resource(casInput.getServerUrl());\n      // Note: The type system could be cached to avoid downloading it\n      //       for every opened CAS, a time stamp can be used to detect\n      //       if it has been changed or not.\n      ClientResponse tsResponse = webResource\n              .path(\"_typesystem\")\n              .accept(MediaType.TEXT_XML)\n              // TODO: How to fix this? Shouldn't accept do it?\n              .header(\"Content-Type\", MediaType.TEXT_XML)\n              .get(ClientResponse.class);\n      InputStream tsIn = tsResponse.getEntityInputStream();\n      TypeSystemDescription tsDesc = null;\n      try {\n        tsDesc = createTypeSystemDescription(tsIn);\n      }\n      catch (IOException e) {\n        // Failed to load ts\n        e.printStackTrace();\n        // TODO: Stop here, and display some kind of\n        // error message to the user\n      }\n      finally {\n        try {\n          tsIn.close();\n        } catch (IOException e) {\n        }\n      }\n      // create an empty cas ..\n      CAS cas = createEmptyCAS(tsDesc);\n      ClientResponse casResponse;\n      try {\n        casResponse = webResource\n            .path(URLEncoder.encode(casInput.getName(), \"UTF-8\"))\n            .accept(MediaType.TEXT_XML)\n            // TODO: How to fix this? Shouldn't accept do it?\n            .header(\"Content-Type\", MediaType.TEXT_XML)\n            .get(ClientResponse.class);\n      } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"Should never fail, UTF-8 encoding is available on every JRE!\", e);\n      }\n      InputStream casIn = casResponse.getEntityInputStream();\n      org.apache.uima.caseditor.editor.ICasDocument doc = null;\n      try {\n        doc = new DocumentUimaImpl(cas, casIn, DocumentFormat.XMI);\n      }\n      // TODO: Catch exception here, and display error message?!\n      finally {\n        try {\n          casIn.close();\n        } catch (IOException e) {\n        }\n      }\n      return doc;\n    }\n    return null;\n  }\n  @Override\n  protected void doSaveDocument(IProgressMonitor monitor, Object element, ICasDocument document,\n          boolean overwrite) throws CoreException {\n    if (element instanceof CorpusServerCasEditorInput) {\n      CorpusServerCasEditorInput casInput = (CorpusServerCasEditorInput) element;\n      // TODO: What to do if there is already a newer version?\n      //       A dialog could ask if it should be overwritten, or not.\n      if (document instanceof DocumentUimaImpl) {\n        DocumentUimaImpl documentImpl = (DocumentUimaImpl) document;\n        ByteArrayOutputStream outStream = new ByteArrayOutputStream(40000); \n        documentImpl.serialize(outStream);\n        Client client = Client.create();\n        client.setReadTimeout(READ_TIMEOUT);\n        WebResource webResource = client.resource(casInput.getServerUrl());\n        byte xmiBytes[] = outStream.toByteArray();\n        String encodedCasId;\n        try {\n          encodedCasId = URLEncoder.encode(casInput.getName(), \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          throw new CoreException(new Status(Status.ERROR, CorpusServerPlugin.PLUGIN_ID,\n              \"Severe error, should never happen, UTF-8 encoding is not supported!\"));\n        }\n        ClientResponse response = webResource\n                .path(encodedCasId)\n                .accept(MediaType.TEXT_XML)\n                // TODO: How to fix this? Shouldn't accept do it?\n                .header(\"Content-Type\", MediaType.TEXT_XML)\n                .put(ClientResponse.class, xmiBytes);\n        if (response.getStatus() != 204) {\n          throw new CoreException(new Status(Status.ERROR, CorpusServerPlugin.PLUGIN_ID,\n              \"Failed to save document, http error code: \" + response.getStatus()));\n        }\n      }\n    }\n    // tell everyone that the element changed and is not dirty any longer\n    fireElementDirtyStateChanged(element, false);\n  }\n  private String getTypeSystemId(CorpusServerCasEditorInput input) {\n    return input.getServerUrl();\n  }\n  @Override\n  public IPreferenceStore getSessionPreferenceStore(Object element) {\n    // lookup one, and if it does not exist create a new one, and put it!\n    IPreferenceStore store = sessionPreferenceStores.get(getTypeSystemId((CorpusServerCasEditorInput) element));\n    if (store == null) {\n      store = new PreferenceStore();\n      sessionPreferenceStores.put(getTypeSystemId((CorpusServerCasEditorInput) element), store);\n    }\n    return store;\n  }\n  @Override\n  protected void disposeElementInfo(Object element, ElementInfo info) {\n  }\n  @Override\n  public Composite createTypeSystemSelectorForm(ICasEditor editor,\n      Composite arg1, IStatus arg2) {\n    // Should not be needed, we can always provide a type system, and\n    // if not, we can only show an error message!\n    return null;\n  }\n  @Override\n  public IPreferenceStore getTypeSystemPreferenceStore(Object element) {\n    PreferenceStore tsStore = tsPreferenceStores.get(element);\n    if (tsStore == null) {\n      IPreferenceStore store = CorpusServerPlugin.getDefault().getPreferenceStore();\n      String tsStoreString = store.getString(getTypeSystemId((CorpusServerCasEditorInput) element));\n      tsStore = new PreferenceStore();\n      if (tsStoreString.length() != 0) { \n        InputStream tsStoreIn = new ByteArrayInputStream(tsStoreString.getBytes(Charset.forName(\"UTF-8\")));\n        try {\n          tsStore.load(tsStoreIn);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n      tsPreferenceStores.put(element, tsStore);\n    }\n    return tsStore;\n  }\n  @Override\n  public void saveTypeSystemPreferenceStore(Object element) {\n    PreferenceStore tsStore = tsPreferenceStores.get(element);\n    if (tsStore != null) {\n      ByteArrayOutputStream tsStoreBytes = new ByteArrayOutputStream();\n      try {\n        tsStore.save(tsStoreBytes, \"\");\n      } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      }\n      IPreferenceStore store = CorpusServerPlugin.getDefault().getPreferenceStore();\n      store.putValue(getTypeSystemId((CorpusServerCasEditorInput) element), \n          new String(tsStoreBytes.toByteArray(), Charset.forName(\"UTF-8\")));\n    }\n  }\n}<fim_middle>// class below is blob\n"}