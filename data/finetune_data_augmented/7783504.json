{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.wicket.markup.head.filter;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\nimport org.apache.wicket.markup.head.HeaderItem;\nimport org.apache.wicket.markup.head.IWrappedHeaderItem;\nimport org.apache.wicket.request.Response;\n\n/**\n * {@link HeaderItem} that specifies the filter it belongs to. Dependencies of a\n * {@code FilteredHeaderItem} belong to the same filter. If used in conjunction with\n * {@link JavaScriptFilteredIntoFooterHeaderResponse}, use\n * {@link FilteringHeaderResponse#DEFAULT_HEADER_FILTER_NAME DEFAULT_HEADER_FILTER_NAME} to render\n * items in the header.\n * \n * @author papegaaij\n */\npublic class FilteredHeaderItem extends HeaderItem implements IWrappedHeaderItem\n{\n\tprivate static final long serialVersionUID = 1L;\n\n\tprivate HeaderItem wrapped;\n\n\tprivate String filterName;\n\n\t/**\n\t * Construct.\n\t * \n\t * @param wrapped\n\t *            the actual {@link HeaderItem}\n\t * @param filterName\n\t *            the name of the filter this item belongs to\n\t */\n<fim_suffix>\tpublic FilteredHeaderItem(HeaderItem wrapped, String filterName)\n\t{\n\t\tthis.wrapped = wrapped;\n\t\tthis.filterName = filterName;\n\t}\n\n\t/**\n\t * @return the actual {@link HeaderItem}\n\t */\n\t@Override\n\tpublic HeaderItem getWrapped()\n\t{\n\t\treturn wrapped;\n\t}\n\n\t@Override\n\tpublic FilteredHeaderItem wrap(HeaderItem item)\n\t{\n\t\treturn new FilteredHeaderItem(item, getFilterName());\n\t}\n\n\t/**\n\t * @return the name of the filter this item belongs to\n\t */\n\tpublic String getFilterName()\n\t{\n\t\treturn filterName;\n\t}\n\n\t@Override\n\tpublic Iterable<?> getRenderTokens()\n\t{\n\t\treturn getWrapped().getRenderTokens();\n\t}\n\n\t@Override\n\tpublic void render(Response response)\n\t{\n\t\tgetWrapped().render(response);\n\t}\n\n\t@Override\n\tpublic List<HeaderItem> getDependencies()\n\t{\n\t\tList<FilteredHeaderItem> ret = new ArrayList<>();\n\t\tfor (HeaderItem curDependency : getWrapped().getDependencies())\n\t\t{\n\t\t\tret.add(wrap(curDependency));\n\t\t}\n\t\tList<HeaderItem> dependencies = super.getDependencies();\n\t\tdependencies.addAll(ret);\n\t\treturn dependencies;\n\t}\n\n\t@Override\n\tpublic Iterable<? extends HeaderItem> getProvidedResources()\n\t{\n\t\treturn getWrapped().getProvidedResources();\n\t}\n\n\t@Override\n\tpublic int hashCode()\n\t{\n\t\treturn Objects.hash(wrapped, filterName);\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o)\n\t{\n\t\tif (this == o) return true;\n\t\tif (o == null || getClass() != o.getClass()) return false;\n\t\tFilteredHeaderItem that = (FilteredHeaderItem) o;\n\t\treturn Objects.equals(wrapped, that.wrapped) &&\n\t\t\t\tObjects.equals(filterName, that.filterName);\n\t}\n\n\t@Override\n\tpublic String toString()\n\t{\n\t\treturn \"FilteredHeaderItem(\" + getWrapped() + \", \" + getFilterName() + \")\";\n\t}\n}<fim_middle>// function below has no smell\n"}