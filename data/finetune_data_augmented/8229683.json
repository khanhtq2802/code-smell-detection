{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cocoon.portlet;\n\nimport java.util.StringTokenizer;\n\nimport javax.portlet.PortletConfig;\n\nimport org.apache.cocoon.core.MutableSettings;\nimport org.apache.commons.lang.BooleanUtils;\n\n/**\n * This helper class initializes the {@link MutableSettings} object from the servlet\n * configuration.\n * \n * @version $Id$\n */\n<fim_suffix>public class SettingsHelper {\n\n    private SettingsHelper() {\n        //  no instantiation\n    }\n    \n    public static void fill(MutableSettings s, PortletConfig config) {\n        String value;\n\n        value = getInitParameter(config, \"configurations\");\n        if ( value != null ) {\n            s.setConfiguration(value);\n        } else if ( s.getConfiguration() == null ) {\n            s.setConfiguration(\"/WEB-INF/cocoon.xconf\");\n        }\n\n        value = getInitParameter(config, \"logkit-config\");\n        if ( value != null ) {\n            s.setLoggingConfiguration(\"context:/\" + value);\n        }\n\n        value = getInitParameter(config, \"servlet-logger\");\n        if ( value != null ) {\n            s.setEnvironmentLogger(value);\n        }\n\n        value = getInitParameter(config, \"cocoon-logger\");\n        if ( value != null ) {\n            s.setCocoonLogger(value);\n        }\n\n        value = getInitParameter(config, \"log-level\");\n        if ( value != null ) {\n            s.setBootstrapLogLevel(value);\n        }\n\n        s.setReloadingEnabled(getInitParameterAsBoolean(config, \"allow-reload\", s.isReloadingEnabled(null)));\n\n        handleLoadClass(getInitParameter(config, \"load-class\"), s);\n\n        s.setEnableUploads(getInitParameterAsBoolean(config, \"enable-uploads\", s.isEnableUploads()));\n\n        value = getInitParameter(config, \"upload-directory\");\n        if ( value != null ) {\n            s.setUploadDirectory(value);\n        }\n\n        s.setAutosaveUploads(getInitParameterAsBoolean(config, \"autosave-uploads\", s.isAutosaveUploads()));\n\n        value = getInitParameter(config, \"overwrite-uploads\");\n        if ( value != null ) {\n            s.setOverwriteUploads(config.getInitParameter(value));\n        }\n\n        s.setMaxUploadSize(getInitParameterAsInteger(config, \"upload-max-size\", s.getMaxUploadSize()));\n        \n        value = getInitParameter(config, \"cache-directory\");\n        if ( value != null ) {\n            s.setCacheDirectory(value);\n        }\n\n        value = getInitParameter(config, \"work-directory\");\n        if ( value != null ) {\n            s.setWorkDirectory(value);\n        }\n\n        value = getInitParameter(config, \"show-time\");\n        if ( value != null && value.equalsIgnoreCase(\"hide\") ) {\n            s.setShowTime(true);\n            s.setHideShowTime(true);\n        } else {\n            s.setShowTime(getInitParameterAsBoolean(config, \"show-time\", false));\n            s.setHideShowTime(false);\n        }\n\n        s.setManageExceptions(getInitParameterAsBoolean(config, \"manage-exceptions\", s.isManageExceptions()));\n\n        value = getInitParameter(config, \"form-encoding\");\n        if ( value != null ) {\n            s.setFormEncoding(value);\n        }\n    }\n    \n    /** Convenience method to access boolean servlet parameters */\n    protected static boolean getInitParameterAsBoolean(PortletConfig config, String name, boolean defaultValue) {\n        String value = getInitParameter(config, name);\n        if (value == null) {\n            return defaultValue;\n        }\n\n        return BooleanUtils.toBoolean(value);\n    }\n\n    protected static int getInitParameterAsInteger(PortletConfig config, String name, int defaultValue) {\n        String value = getInitParameter(config, name);\n        if (value == null) {\n            return defaultValue;\n        }\n        return Integer.parseInt(value);\n    }\n    \n    private static void handleLoadClass(String param, MutableSettings s) {\n        if ( param == null ) {\n            return;\n        }\n        StringTokenizer tokenizer = new StringTokenizer(param, \" \\t\\r\\n\\f;,\", false);\n        while (tokenizer.hasMoreTokens()) {\n            final String value = tokenizer.nextToken().trim();\n            s.addToLoadClasses(value);\n        }\n    }\n\n    /**\n     * Get an initialisation parameter. The value is trimmed, and null is returned if the trimmed value\n     * is empty.\n     */\n    private static String getInitParameter(PortletConfig config, String name) {\n        String result = config.getInitParameter(name);\n        if (result != null) {\n            result = result.trim();\n            if (result.length() == 0) {\n                result = null;\n            }\n        }\n\n        return result;\n    }\n    \n}<fim_middle>// class below has no smell\n"}