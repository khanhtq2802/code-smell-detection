{"text": "<fim_prefix>\t\tfor ( int i = 1; i <= rsMeta.getFieldCount( ); i++ )\n\t\t{\n\t\t\tnameSet.add( rsMeta.getFieldName( i ) );\n\t\t}\n\t\tIterator<IBinding> bindingIt = queryDefn.getBindings( )\n\t\t\t\t.values( )\n\t\t\t\t.iterator( );\n\t\tSet<String> modifiedAggrBinding = new HashSet<String>( );\n\t\twhile ( bindingIt.hasNext( ) )\n\t\t{\n\t\t\tIBinding binding = bindingIt.next( );\n\t\t\tif ( nameSet.contains( binding.getBindingName( ) ) )\n\t\t\t{\n\t\t\t\tif( binding.getAggrFunction( ) != null )\n\t\t\t\t\tmodifiedAggrBinding.add( binding.getBindingName( ) );\n\t\t\t\tbinding.setAggrFunction( null );\n\t\t\t\tbinding.getAggregatOns( ).clear( );\n\t\t\t\tbinding.getArguments( ).clear( );\n\t\t\t\tbinding.setExpression( new ScriptExpression( ExpressionUtil.createDataSetRowExpression( binding.getBindingName( ) ) ) );\n\t\t\t}\n\t\t}\n\t\tIterator groups = queryDefn.getGroups( ).iterator( );\n\t\twhile( groups.hasNext( ) )\n\t\t{\n\t\t\tIGroupDefinition group = (IGroupDefinition) groups.next( );\n\t\t\tIterator filters = group.getFilters( ).iterator( );\n\t\t\tList<IFilterDefinition> removedFilter = new ArrayList<IFilterDefinition>( );\n\t\t\twhile( filters.hasNext( ) )\n\t\t\t{\n\t\t\t\tIFilterDefinition filter = (IFilterDefinition)filters.next( );\n\t\t\t\tList<String> list = ExpressionCompilerUtil.extractColumnExpression( filter.getExpression( ), ExpressionUtil.ROW_INDICATOR );\n\t\t\t\tfor( int i=0; i< list.size( ); i++ )\n\t\t\t\t{\n\t\t\t\t\tif( modifiedAggrBinding.contains( list.get(i) ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tremovedFilter.add( filter );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( !removedFilter.isEmpty( ) )\n\t\t\t{\n\t\t\t\tqueryDefn.getFilters( ).addAll( removedFilter );\n\t\t\t\tgroup.getFilters( ).removeAll( removedFilter );\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * @throws DataException \n\t * \n\t */\n\tpublic static void mappingParentColumnBinding( IBaseQueryDefinition baseQueryDefn ) throws DataException\n\t{\n\t\tIBaseQueryDefinition queryDef =  baseQueryDefn;\n\t\twhile( queryDef instanceof ISubqueryDefinition )\n\t\t{\n\t\t\tqueryDef = queryDef.getParentQuery();\n\t\t\tMap parentBindings = queryDef.getBindings( );\n\t\t\taddParentBindings( baseQueryDefn, parentBindings);\n\t\t}\n\t}\n\t/**\n\t * \n\t * @param parentBindings\n\t * @throws DataException \n\t */\n\tstatic void addParentBindings( IBaseQueryDefinition baseQueryDefn, Map parentBindings ) throws DataException {\n\t\tMap<String, Boolean> aggrInfo = QueryDefinitionUtil.parseAggregations( parentBindings );\n\t\tIterator it = parentBindings.entrySet( ).iterator( );\n\t\twhile ( it.hasNext( ) )\n\t\t{\n\t\t\tMap.Entry entry = (Map.Entry) it.next( );\n\t\t\tif ( !aggrInfo.get( entry.getKey( ) ))\n\t\t\t{\n\t\t\t\t//not an aggregation\n\t\t\t\tIBinding b = (IBinding)parentBindings.get( entry.getKey( ) );\n\t\t\t\tif ( baseQueryDefn.getBindings( ).get( entry.getKey( ) ) == null )\n\t\t\t\t{\n\t\t\t\t\tIBinding binding = new Binding( (String) entry.getKey( ) );\n\t\t\t\t\tbinding.setDataType( b.getDataType( ) );\n\t\t\t\t\tbinding.setExpression( copyScriptExpr( b.getExpression( ) ) );\n\t\t\t\t\tbaseQueryDefn.addBinding( binding );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Colon a script expression, however do not populate the \"AggregateOn\" field. All the column binding that inherit\n\t * from parent query by sub query should have no \"AggregateOn\" field, for they could not be aggregations. However, \n\t * if an aggregateOn field is set to an expression without aggregation, we should also make it inheritable by sub query\n\t * for the expression actually involves no aggregations.\n\t * \n\t * @param expr\n\t * @return\n\t */\n\tprivate static ScriptExpression copyScriptExpr( IBaseExpression expr )\n\t{\n\t\tif( expr == null )\n\t\t\treturn null;\n\t\tScriptExpression se = new ScriptExpression( ( (IScriptExpression) expr ).getText( ),\n\t\t\t\t( (IScriptExpression) expr ).getDataType( ) );\n\t\treturn se;\n\t}\n}\nclass OdaDataSetAdapter extends DataSetAdapter implements IOdaDataSetDesign\n{\n\tprotected IOdaDataSetDesign source;\n\tpublic OdaDataSetAdapter( IOdaDataSetDesign source )\n\t{\n\t\tsuper( source );\n\t\tthis.source = ( IOdaDataSetDesign )source;\n\t}\n\tpublic String getExtensionID( )\n\t{\n\t\treturn this.source.getExtensionID( );\n\t}\n\tpublic String getPrimaryResultSetName( )\n\t{\n\t\treturn this.source.getPrimaryResultSetName( );\n\t}\n\tpublic Map getPrivateProperties( )\n\t{\n\t\treturn this.source.getPrivateProperties( );\n\t}\n\tpublic Map getPublicProperties( )\n\t{\n\t\treturn this.source.getPublicProperties( );\n\t}\n\tpublic String getQueryText( )\n\t{\n\t\treturn this.source.getQueryText( );\n\t}\n\tpublic int getPrimaryResultSetNumber( )\n\t{\n\t\treturn this.source.getPrimaryResultSetNumber( );\n\t}\t\n\tpublic QuerySpecification getCombinedQuerySpecification( )\n\t{\n\t\tif( this.source instanceof OdaDataSetDesign )\n\t\t{\n\t\t\treturn ( (OdaDataSetDesign) this.source ).getCombinedQuerySpecification( );\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n}\nclass CombinedOdaDataSetAdapter extends OdaDataSetAdapter implements ICombinedOdaDataSetDesign\n{\n    protected ICombinedOdaDataSetDesign source;\n    public CombinedOdaDataSetAdapter( ICombinedOdaDataSetDesign source )\n    {\n        super( source );\n        this.source = source;\n    }\n    @Override\n    public void addDataSetDesign( IOdaDataSetDesign dataSetDesign )\n    {\n    }\n    @Override\n    public Set<IOdaDataSetDesign> getDataSetDesigns( )\n    {\n        return source.getDataSetDesigns( );\n    }\n}\nclass JointDataSetAdapter extends DataSetAdapter implements IJointDataSetDesign\n{\n\tprivate IJointDataSetDesign source;\n\tpublic JointDataSetAdapter( IBaseDataSetDesign source )\n\t{\n\t\tsuper( source );\n\t\tthis.source = ( IJointDataSetDesign )source;\n\t}\n\tpublic List getJoinConditions( )\n\t{\n\t\treturn this.source.getJoinConditions( );\n\t}\n\tpublic int getJoinType( )\n\t{\n\t\treturn this.source.getJoinType( );\n\t}\n\tpublic String getLeftDataSetDesignName( )\n\t{\n\t\treturn this.source.getLeftDataSetDesignName( );\n\t}\n\tpublic String getRightDataSetDesignName( )\n\t{\n\t\treturn this.source.getRightDataSetDesignName( );\n\t}\n\tpublic String getLeftDataSetDesignQulifiedName( )\n\t{\n\t\treturn this.source.getLeftDataSetDesignQulifiedName( );\n\t}\n\tpublic String getRightDataSetDesignQulifiedName( )\n\t{\n\t\treturn this.source.getRightDataSetDesignQulifiedName( );\n\t}\n}\n<fim_suffix>class ScriptDataSetAdapter extends DataSetAdapter implements IScriptDataSetDesign\n{\n\tprivate IScriptDataSetDesign source;\n\tpublic ScriptDataSetAdapter( IBaseDataSetDesign source )\n\t{\n\t\tsuper( source );\n\t\tthis.source = (IScriptDataSetDesign)source;\n\t}\n\tpublic String getCloseScript( )\n\t{\n\t\treturn this.source.getCloseScript( );\n\t}\n\tpublic String getDescribeScript( )\n\t{\n\t\treturn this.source.getDescribeScript( );\n\t}\n\tpublic String getFetchScript( )\n\t{\n\t\treturn this.source.getFetchScript( );\n\t}\n\tpublic String getOpenScript( )\n\t{\n\t\treturn this.source.getOpenScript( );\n\t}\n}<fim_middle>// class below has no smell\n"}