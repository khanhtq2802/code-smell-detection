{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.metadata;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.List;\nimport java.util.TreeMap;\n\nimport org.apache.hadoop.hive.metastore.api.SQLForeignKey;\n\n/**\n * ForeignKeyInfo is a metadata structure containing the foreign keys associated with a table.\n * The fields include the child database name, the child table name, mapping of the constraint\n * name to the foreign key columns associated with the key. The foreign key column structure \n * contains the parent database name, parent table name, associated parent column name,\n * associated child column name and the position of the foreign key column in the key.\n * The position is one-based index.\n */\n<fim_suffix>@SuppressWarnings(\"serial\")\npublic class ForeignKeyInfo implements Serializable {\n\n  public class ForeignKeyCol {\n    public String parentTableName;\n    public String parentDatabaseName;\n    public String parentColName;\n    public String childColName;\n    public Integer position;\n\n    public ForeignKeyCol(String parentTableName, String parentDatabaseName, String parentColName,\n      String childColName, Integer position) {\n      this.parentTableName = parentTableName;\n      this.parentDatabaseName = parentDatabaseName;\n      this.parentColName = parentColName;\n      this.childColName = childColName;\n      this.position = position;\n    }\n  }\n\n  // Mapping from constraint name to list of foreign keys\n  Map<String, List<ForeignKeyCol>> foreignKeys;\n  String childTableName;\n  String childDatabaseName;\n\n  public ForeignKeyInfo() {}\n\n  public ForeignKeyInfo(List<SQLForeignKey> fks, String childTableName, String childDatabaseName) {\n    this.childTableName = childTableName;\n    this.childDatabaseName = childDatabaseName;\n    foreignKeys = new TreeMap<String, List<ForeignKeyCol>>();\n    if (fks == null) {\n      return;\n    }\n    for (SQLForeignKey fk : fks) {\n      if (fk.getFktable_db().equalsIgnoreCase(childDatabaseName) &&\n          fk.getFktable_name().equalsIgnoreCase(childTableName)) {\n        ForeignKeyCol currCol = new ForeignKeyCol(fk.getPktable_name(), fk.getPktable_db(),\n          fk.getPkcolumn_name(), fk.getFkcolumn_name(), fk.getKey_seq());\n        String constraintName = fk.getFk_name();\n        if (foreignKeys.containsKey(constraintName)) {\n          foreignKeys.get(constraintName).add(currCol);\n        } else {\n          List<ForeignKeyCol> currList = new ArrayList<ForeignKeyCol>();\n          currList.add(currCol);\n          foreignKeys.put(constraintName, currList);\n        }\n      }\n    }\n  }\n\n  public String getChildTableName() {\n    return childTableName;\n  }\n\n  public String getChildDatabaseName() {\n    return childDatabaseName;\n  }\n\n  public Map<String, List<ForeignKeyCol>> getForeignKeys() {\n    return foreignKeys;\n  }\n\n  public void setChildTableName(String tableName) {\n    this.childTableName = tableName;\n  }\n\n  public void setChildDatabaseName(String databaseName) {\n    this.childDatabaseName = databaseName;\n  }\n\n  public void setForeignKeys(Map<String, List<ForeignKeyCol>> foreignKeys) {\n    this.foreignKeys = foreignKeys;\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"Foreign Keys for \" + childDatabaseName+\".\"+childTableName+\":\");\n    sb.append(\"[\");\n    if (foreignKeys != null && foreignKeys.size() > 0) {\n      for (Map.Entry<String, List<ForeignKeyCol>> me : foreignKeys.entrySet()) {\n        sb.append(\" {Constraint Name: \" + me.getKey() + \",\");\n        List<ForeignKeyCol> currCol = me.getValue();\n        if (currCol != null && currCol.size() > 0) {\n          for (ForeignKeyCol fkc : currCol) {\n            sb.append (\" (Parent Column Name: \" + fkc.parentDatabaseName +\n              \".\"+ fkc.parentTableName + \".\" + fkc.parentColName +\n              \", Column Name: \" + fkc.childColName + \", Key Sequence: \" + fkc.position+ \"),\");\n          }\n          sb.setLength(sb.length()-1);\n        }\n        sb.append(\"},\");\n      }\n      sb.setLength(sb.length()-1);\n    }\n    sb.append(\"]\");\n    return sb.toString();\n  }\n}<fim_middle>// class below is data class\n"}