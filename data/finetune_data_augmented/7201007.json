{"text": "<fim_prefix>/**\n * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.\n */\npackage com.oracle.bmc.objectstorage.internal.http;\n\nimport com.oracle.bmc.objectstorage.model.*;\nimport com.oracle.bmc.objectstorage.requests.*;\nimport com.oracle.bmc.objectstorage.responses.*;\nimport org.apache.commons.lang3.Validate;\n\n<fim_suffix>@javax.annotation.Generated(value = \"OracleSDKGenerator\", comments = \"API Version: 20160918\")\n@lombok.extern.slf4j.Slf4j\npublic class ListWorkRequestErrorsConverter {\n    private static final com.oracle.bmc.http.internal.ResponseConversionFunctionFactory\n            RESPONSE_CONVERSION_FACTORY =\n                    new com.oracle.bmc.http.internal.ResponseConversionFunctionFactory();\n\n    public static ListWorkRequestErrorsRequest interceptRequest(\n            ListWorkRequestErrorsRequest request) {\n\n        return request;\n    }\n\n    public static com.oracle.bmc.http.internal.WrappedInvocationBuilder fromRequest(\n            com.oracle.bmc.http.internal.RestClient client, ListWorkRequestErrorsRequest request) {\n        Validate.notNull(request, \"request instance is required\");\n        Validate.notBlank(request.getWorkRequestId(), \"workRequestId must not be blank\");\n\n        com.oracle.bmc.http.internal.WrappedWebTarget target =\n                client.getBaseTarget()\n                        .path(\"/\")\n                        .path(\"workRequests\")\n                        .path(\n                                com.oracle.bmc.util.internal.HttpUtils.encodePathSegment(\n                                        request.getWorkRequestId()))\n                        .path(\"errors\");\n\n        if (request.getPage() != null) {\n            target =\n                    target.queryParam(\n                            \"page\",\n                            com.oracle.bmc.util.internal.HttpUtils.attemptEncodeQueryParam(\n                                    request.getPage()));\n        }\n\n        if (request.getLimit() != null) {\n            target =\n                    target.queryParam(\n                            \"limit\",\n                            com.oracle.bmc.util.internal.HttpUtils.attemptEncodeQueryParam(\n                                    request.getLimit()));\n        }\n\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib = target.request();\n\n        ib.accept(javax.ws.rs.core.MediaType.APPLICATION_JSON);\n\n        if (request.getOpcClientRequestId() != null) {\n            ib.header(\"opc-client-request-id\", request.getOpcClientRequestId());\n        }\n\n        return ib;\n    }\n\n    public static com.google.common.base.Function<\n                    javax.ws.rs.core.Response, ListWorkRequestErrorsResponse>\n            fromResponse() {\n        final com.google.common.base.Function<\n                        javax.ws.rs.core.Response, ListWorkRequestErrorsResponse>\n                transformer =\n                        new com.google.common.base.Function<\n                                javax.ws.rs.core.Response, ListWorkRequestErrorsResponse>() {\n                            @Override\n                            public ListWorkRequestErrorsResponse apply(\n                                    javax.ws.rs.core.Response rawResponse) {\n                                LOG.trace(\n                                        \"Transform function invoked for ListWorkRequestErrorsResponse\");\n                                com.google.common.base.Function<\n                                                javax.ws.rs.core.Response,\n                                                com.oracle.bmc.http.internal.WithHeaders<\n                                                        java.util.List<WorkRequestError>>>\n                                        responseFn =\n                                                RESPONSE_CONVERSION_FACTORY.create(\n                                                        new javax.ws.rs.core.GenericType<\n                                                                java.util.List<\n                                                                        WorkRequestError>>() {});\n\n                                com.oracle.bmc.http.internal.WithHeaders<\n                                                java.util.List<WorkRequestError>>\n                                        response = responseFn.apply(rawResponse);\n                                javax.ws.rs.core.MultivaluedMap<String, String> headers =\n                                        response.getHeaders();\n\n                                ListWorkRequestErrorsResponse.Builder builder =\n                                        ListWorkRequestErrorsResponse.builder();\n\n                                builder.items(response.getItem());\n\n                                com.google.common.base.Optional<java.util.List<String>>\n                                        opcRequestIdHeader =\n                                                com.oracle.bmc.http.internal.HeaderUtils.get(\n                                                        headers, \"opc-request-id\");\n                                if (opcRequestIdHeader.isPresent()) {\n                                    builder.opcRequestId(\n                                            com.oracle.bmc.http.internal.HeaderUtils.toValue(\n                                                    \"opc-request-id\",\n                                                    opcRequestIdHeader.get().get(0),\n                                                    String.class));\n                                }\n\n                                com.google.common.base.Optional<java.util.List<String>>\n                                        opcNextPageHeader =\n                                                com.oracle.bmc.http.internal.HeaderUtils.get(\n                                                        headers, \"opc-next-page\");\n                                if (opcNextPageHeader.isPresent()) {\n                                    builder.opcNextPage(\n                                            com.oracle.bmc.http.internal.HeaderUtils.toValue(\n                                                    \"opc-next-page\",\n                                                    opcNextPageHeader.get().get(0),\n                                                    String.class));\n                                }\n\n                                com.google.common.base.Optional<java.util.List<String>>\n                                        opcClientRequestIdHeader =\n                                                com.oracle.bmc.http.internal.HeaderUtils.get(\n                                                        headers, \"opc-client-request-id\");\n                                if (opcClientRequestIdHeader.isPresent()) {\n                                    builder.opcClientRequestId(\n                                            com.oracle.bmc.http.internal.HeaderUtils.toValue(\n                                                    \"opc-client-request-id\",\n                                                    opcClientRequestIdHeader.get().get(0),\n                                                    String.class));\n                                }\n\n                                ListWorkRequestErrorsResponse responseWrapper = builder.build();\n\n                                return responseWrapper;\n                            }\n                        };\n        return transformer;\n    }\n}<fim_middle>// class below has no smell\n"}