{"text": "<fim_prefix>// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See License.txt in the repository root.\npackage com.microsoft.tfs.core.clients.workitem.internal.rules;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport com.microsoft.tfs.core.clients.workitem.internal.IWITContext;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.ConstantHandler;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.IConstantSet;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.IMetadata;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.dao.ActionsTable;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.dao.ConstantMetadata;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.dao.ConstantsTable;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.dao.FieldUsagesTable;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.dao.FieldsTable;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.dao.HierarchyPropertiesTable;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.dao.HierarchyTable;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.dao.RulesTable;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.dao.WorkItemLinkTypesTable;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.dao.WorkItemTypeCategoriesTable;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.dao.WorkItemTypeTable;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.dao.WorkItemTypeUsagesTable;\nimport com.microsoft.tfs.core.clients.workitem.internal.metadata.impl.WorkItemTypeCategoryMembersTableImpl;\nimport com.microsoft.tfs.core.clients.workitem.internal.rules.cache.IRuleCache;\nimport com.microsoft.tfs.core.clients.workitem.internal.rules.cache.RuleCache;\nimport com.microsoft.tfs.core.clients.workitem.internal.rules.cache.RuleCache.RuleCacheResults;\npublic class WITContextStub implements IWITContext {\n    public static final String CURRENT_USER_DISPLAY_NAME = \"current-user-display-name\"; //$NON-NLS-1$\n    private final RuleCacheStub ruleCache = new RuleCacheStub();\n    private final MetadataStub metadata = new MetadataStub();\n    public void addRule(final Rule rule) {\n        ruleCache.addRule(rule);\n    }\n    public void addConstant(final int id, final String constant) {\n        metadata.addConstant(id, constant);\n    }\n<fim_suffix>    public void addConstantSet(\n        final int rootConstantID,\n        final boolean oneLevel,\n        final boolean twoPlusLevels,\n        final boolean leaf,\n        final boolean interior,\n        final IConstantSet constantSet) {\n        metadata.addConstantSet(rootConstantID, oneLevel, twoPlusLevels, leaf, interior, constantSet);\n    }\n    @Override\n    public String getCurrentUserDisplayName() {\n        return CURRENT_USER_DISPLAY_NAME;\n    }\n    @Override\n    public IMetadata getMetadata() {\n        return metadata;\n    }\n    @Override\n    public IRuleCache getRuleCache() {\n        return ruleCache;\n    }\n    private static final class RuleCacheStub implements IRuleCache {\n        private final Map<Integer, List<Rule>> areaIdToRules = new HashMap<Integer, List<Rule>>();\n        public void addRule(final Rule rule) {\n            final Integer key = new Integer(rule.getAreaID());\n            List<Rule> rules = areaIdToRules.get(key);\n            if (rules == null) {\n                rules = new ArrayList<Rule>();\n                areaIdToRules.put(key, rules);\n            }\n            rules.add(rule);\n        }\n        @Override\n        public RuleCacheResults getRules(final int areaId) {\n            final RuleCacheResults results = new RuleCache.RuleCacheResults();\n            results.defaultRules = new ArrayList<Rule>();\n            results.nonDefaultRules = new ArrayList<Rule>();\n            results.affectedFieldIds = new HashSet<Integer>();\n            final List<Rule> rules = areaIdToRules.get(new Integer(areaId));\n            if (rules != null) {\n                for (final Rule rule : rules) {\n                    if (rule.isFlagDefault()) {\n                        results.defaultRules.add(rule);\n                    } else {\n                        results.nonDefaultRules.add(rule);\n                    }\n                    results.affectedFieldIds.add(new Integer(rule.getThenFldID()));\n                }\n            }\n            return results;\n        }\n        @Override\n        public RuleCacheResults getRules(final int areaId, final int changedFieldId) {\n            throw new UnsupportedOperationException();\n        }\n    }\n    private static final class MetadataStub implements IMetadata {\n        private final ConstantsTableStub constantsTable = new ConstantsTableStub();\n        private final ConstantHandlerStub constantHandler = new ConstantHandlerStub();\n        public void addConstantSet(\n            final int rootConstantID,\n            final boolean oneLevel,\n            final boolean twoPlusLevels,\n            final boolean leaf,\n            final boolean interior,\n            final IConstantSet constantSet) {\n            constantHandler.addConstantSet(rootConstantID, oneLevel, twoPlusLevels, leaf, interior, constantSet);\n        }\n        public void addConstant(final int id, final String constant) {\n            constantsTable.addConstant(id, constant);\n        }\n        @Override\n        public ActionsTable getActionsTable() {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public ConstantHandler getConstantHandler() {\n            return constantHandler;\n        }\n        @Override\n        public ConstantsTable getConstantsTable() {\n            return constantsTable;\n        }\n        @Override\n        public FieldUsagesTable getFieldUsagesTable() {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public FieldsTable getFieldsTable() {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public HierarchyPropertiesTable getHierarchyPropertiesTable() {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public HierarchyTable getHierarchyTable() {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public RulesTable getRulesTable() {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public WorkItemTypeTable getWorkItemTypeTable() {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public WorkItemTypeUsagesTable getWorkItemTypeUsagesTable() {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public WorkItemLinkTypesTable getLinkTypesTable() {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public WorkItemTypeCategoriesTable getWorkItemTypeCategoriesTable() {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public WorkItemTypeCategoryMembersTableImpl getWorkItemTypeCategoryMembersTable() {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public int getUserDisplayMode() {\n            throw new UnsupportedOperationException();\n        }\n    }\n    private static class ConstantsTableStub implements ConstantsTable {\n        private final Map<Integer, String> constants = new HashMap<Integer, String>();\n        public void addConstant(final int id, final String constant) {\n            constants.put(new Integer(id), constant);\n        }\n        @Override\n        public String getConstantByID(final int id) {\n            final Integer key = new Integer(id);\n            if (!constants.containsKey(key)) {\n                throw new IllegalArgumentException(\"no constant exists with id [\" + id + \"]\"); //$NON-NLS-1$ //$NON-NLS-2$\n            }\n            return constants.get(key);\n        }\n        @Override\n        public ConstantMetadata getConstantByString(final String string) {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public Integer getIDByConstant(final String constant) {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public String[] getUserGroupDisplayNames(final String serverGuid, final String projectGuid) {\n            throw new UnsupportedOperationException();\n        }\n    }\n    private static class ConstantHandlerStub implements ConstantHandler {\n        private final Map<ConstantSetKey, IConstantSet> constantSets = new HashMap<ConstantSetKey, IConstantSet>();\n        public void addConstantSet(\n            final int rootConstantID,\n            final boolean oneLevel,\n            final boolean twoPlusLevels,\n            final boolean leaf,\n            final boolean interior,\n            final IConstantSet constantSet) {\n            final ConstantSetKey key = new ConstantSetKey(rootConstantID, oneLevel, twoPlusLevels, leaf, interior);\n            constantSets.put(key, constantSet);\n        }\n        @Override\n        public IConstantSet getConstantSet(\n            final int[] rootConstantIDs,\n            final boolean oneLevel,\n            final boolean twoPlusLevels,\n            final boolean leaf,\n            final boolean interior,\n            final boolean useCache) {\n            throw new UnsupportedOperationException();\n        }\n        @Override\n        public IConstantSet getConstantSet(\n            final int rootConstantID,\n            final boolean oneLevel,<fim_middle>// function below has no smell\n"}