{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.solr.client.solrj.impl;\nimport javax.security.auth.login.AppConfigurationEntry;\nimport javax.security.auth.login.Configuration;\nimport java.lang.invoke.MethodHandles;\nimport java.net.URI;\nimport java.nio.file.Paths;\nimport java.security.Principal;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpEntityEnclosingRequest;\nimport org.apache.http.HttpRequestInterceptor;\nimport org.apache.http.auth.AuthSchemeProvider;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.Credentials;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.client.config.AuthSchemes;\nimport org.apache.http.config.Lookup;\nimport org.apache.http.config.RegistryBuilder;\nimport org.apache.http.cookie.CookieSpecProvider;\nimport org.apache.http.entity.BufferedHttpEntity;\nimport org.apache.http.impl.auth.SPNegoSchemeFactory;\nimport org.apache.http.impl.client.BasicCredentialsProvider;\nimport org.eclipse.jetty.client.HttpAuthenticationStore;\nimport org.eclipse.jetty.client.WWWAuthenticationProtocolHandler;\nimport org.eclipse.jetty.client.util.SPNEGOAuthentication;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n/**\n * Kerberos-enabled SolrHttpClientBuilder\n */\npublic class Krb5HttpClientBuilder implements HttpClientBuilderFactory {\n  public static final String LOGIN_CONFIG_PROP = \"java.security.auth.login.config\";\n  private static final String SPNEGO_OID = \"1.3.6.1.5.5.2\";\n  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n  private static Configuration jaasConfig = new SolrJaasConfiguration();\n  public Krb5HttpClientBuilder() {\n  }\n  /**\n   * The jaasConfig is static, which makes it problematic for testing in the same jvm.\n   * Call this function to regenerate the static config (this is not thread safe).\n   * Note: only used for tests\n   */\n  public static void regenerateJaasConfiguration() {\n    jaasConfig = new SolrJaasConfiguration();\n  }\n  public SolrHttpClientBuilder getBuilder() {\n    return getBuilder(HttpClientUtil.getHttpClientBuilder());\n  }\n  public void close() {\n    HttpClientUtil.removeRequestInterceptor(bufferedEntityInterceptor);\n  }\n  @Override\n  public SolrHttpClientBuilder getHttpClientBuilder(Optional<SolrHttpClientBuilder> builder) {\n    return builder.isPresent() ? getBuilder(builder.get()) : getBuilder();\n  }\n  private SPNEGOAuthentication createSPNEGOAuthentication() {\n    SPNEGOAuthentication authentication = new SPNEGOAuthentication(null){\n      public boolean matches(String type, URI uri, String realm) {\n        return this.getType().equals(type);\n      }\n    };\n    String clientAppName = System.getProperty(\"solr.kerberos.jaas.appname\", \"Client\");\n    AppConfigurationEntry[] entries = jaasConfig.getAppConfigurationEntry(clientAppName);\n    if (entries == null) {\n      log.warn(\"Could not find login configuration entry for {}. SPNego authentication may not be successful.\", (Object)clientAppName);\n      return authentication;\n    }\n    if (entries.length != 1) {\n      log.warn(\"Multiple login modules are specified in the configuration file\");\n      return authentication;\n    }\n    Map<String, ?> options = entries[0].getOptions();\n    String keyTab = (String)options.get(\"keyTab\");\n    if (keyTab != null) {\n      authentication.setUserKeyTabPath(Paths.get(keyTab, new String[0]));\n    }\n    authentication.setServiceName(\"HTTP\");\n    authentication.setUserName((String)options.get(\"principal\"));\n    if (\"true\".equalsIgnoreCase((String)options.get(\"useTicketCache\"))) {\n      authentication.setUseTicketCache(true);\n      String ticketCachePath = (String)options.get(\"ticketCache\");\n      if (ticketCachePath != null) {\n        authentication.setTicketCachePath(Paths.get(ticketCachePath));\n      }\n      authentication.setRenewTGT(\"true\".equalsIgnoreCase((String)options.get(\"renewTGT\")));\n    }\n    return authentication;\n  }\n<fim_suffix>  @Override\n  public void setup(Http2SolrClient http2Client) {\n    HttpAuthenticationStore authenticationStore = new HttpAuthenticationStore();\n    authenticationStore.addAuthentication(createSPNEGOAuthentication());\n    http2Client.getHttpClient().setAuthenticationStore(authenticationStore);\n    http2Client.getProtocolHandlers().put(new WWWAuthenticationProtocolHandler(http2Client.getHttpClient()));\n  }\n  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n      if (configValue != null) {\n        log.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        } else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          log.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n          return cookieRegistry;\n        });\n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      log.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n    return builder;\n  }\n  // Set a buffered entity based request interceptor\n  private HttpRequestInterceptor bufferedEntityInterceptor = (request, context) -> {\n    if(request instanceof HttpEntityEnclosingRequest) {\n      HttpEntityEnclosingRequest enclosingRequest = ((HttpEntityEnclosingRequest) request);\n      HttpEntity requestEntity = enclosingRequest.getEntity();\n      enclosingRequest.setEntity(new BufferedHttpEntity(requestEntity));\n    }\n  };\n  private static class SolrJaasConfiguration extends javax.security.auth.login.Configuration {\n    private javax.security.auth.login.Configuration baseConfig;\n    // the com.sun.security.jgss appNames\n    private Set<String> initiateAppNames = new HashSet(<fim_middle>// function below is feature envy\n"}