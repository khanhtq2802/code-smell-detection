{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.zookeeper.inspector.gui;\n\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutionException;\n\nimport javax.swing.JButton;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSplitPane;\nimport javax.swing.JToolBar;\nimport javax.swing.SwingWorker;\n\nimport org.apache.zookeeper.inspector.gui.actions.AddNodeAction;\nimport org.apache.zookeeper.inspector.gui.actions.DeleteNodeAction;\nimport org.apache.zookeeper.inspector.gui.nodeviewer.ZooInspectorNodeViewer;\nimport org.apache.zookeeper.inspector.logger.LoggerFactory;\nimport org.apache.zookeeper.inspector.manager.ZooInspectorManager;\n\n/**\n * The parent {@link JPanel} for the whole application\n */\n<fim_suffix>public class ZooInspectorPanel extends JPanel implements\n        NodeViewersChangeListener {\n    private final IconResource iconResource;\n    private final Toolbar toolbar;\n    private final ZooInspectorNodeViewersPanel nodeViewersPanel;\n    private final ZooInspectorTreeViewer treeViewer;\n    private final ZooInspectorManager zooInspectorManager;\n\n    private final List<NodeViewersChangeListener> listeners = new ArrayList<NodeViewersChangeListener>();\n    {\n        listeners.add(this);\n    }\n\n    /**\n     * @param zooInspectorManager\n     *            - the {@link ZooInspectorManager} for the application\n     */\n    public ZooInspectorPanel(final ZooInspectorManager zooInspectorManager, final IconResource iconResource) {\n        this.zooInspectorManager = zooInspectorManager;\n        this.iconResource = iconResource;\n        toolbar = new Toolbar(iconResource);\n        final List<ZooInspectorNodeViewer> nodeViewers = new ArrayList<ZooInspectorNodeViewer>();\n        try {\n            List<String> defaultNodeViewersClassNames = this.zooInspectorManager\n                    .getDefaultNodeViewerConfiguration();\n            for (String className : defaultNodeViewersClassNames) {\n                nodeViewers.add((ZooInspectorNodeViewer) Class.forName(\n                        className).newInstance());\n            }\n        } catch (Exception ex) {\n            LoggerFactory.getLogger().error(\n                    \"Error loading default node viewers.\", ex);\n            JOptionPane.showMessageDialog(ZooInspectorPanel.this,\n                    \"Error loading default node viewers: \" + ex.getMessage(),\n                    \"Error\", JOptionPane.ERROR_MESSAGE);\n        }\n        nodeViewersPanel = new ZooInspectorNodeViewersPanel(\n                zooInspectorManager, nodeViewers);\n        treeViewer = new ZooInspectorTreeViewer(zooInspectorManager,\n                nodeViewersPanel, iconResource);\n        this.setLayout(new BorderLayout());\n        \n        toolbar.addActionListener(Toolbar.Button.connect, new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                ZooInspectorConnectionPropertiesDialog zicpd = new ZooInspectorConnectionPropertiesDialog(\n                        zooInspectorManager.getLastConnectionProps(),\n                        zooInspectorManager.getConnectionPropertiesTemplate(),\n                        ZooInspectorPanel.this);\n                zicpd.setVisible(true);\n            }\n        });\n        toolbar.addActionListener(Toolbar.Button.disconnect, new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                disconnect();\n            }\n        });\n        toolbar.addActionListener(Toolbar.Button.refresh, new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                treeViewer.refreshView();\n            }\n        });\n\n        toolbar.addActionListener(Toolbar.Button.addNode,\n                    new AddNodeAction(this, treeViewer, zooInspectorManager));\n        toolbar.addActionListener(Toolbar.Button.deleteNode,\n                    new DeleteNodeAction(this, treeViewer, zooInspectorManager));\n\n        toolbar.addActionListener(Toolbar.Button.nodeViewers, new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                ZooInspectorNodeViewersDialog nvd = new ZooInspectorNodeViewersDialog(\n                        JOptionPane.getRootFrame(), nodeViewers, listeners,\n                        zooInspectorManager, iconResource);\n                nvd.setVisible(true);\n            }\n        });\n        toolbar.addActionListener(Toolbar.Button.about, new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                ZooInspectorAboutDialog zicpd = new ZooInspectorAboutDialog(\n                        JOptionPane.getRootFrame(), iconResource);\n                zicpd.setVisible(true);\n            }\n        });\n        JScrollPane treeScroller = new JScrollPane(treeViewer);\n        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,\n                treeScroller, nodeViewersPanel);\n        splitPane.setResizeWeight(0.25);\n        this.add(splitPane, BorderLayout.CENTER);\n        this.add(toolbar.getJToolBar(), BorderLayout.NORTH);\n    }\n\n    /**\n     * @param connectionProps\n     *            the {@link Properties} for connecting to the zookeeper\n     *            instance\n     */\n    public void connect(final Properties connectionProps) {\n        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {\n\n            @Override\n            protected Boolean doInBackground() throws Exception {\n                zooInspectorManager.setLastConnectionProps(connectionProps);\n                return zooInspectorManager.connect(connectionProps);\n            }\n\n            @Override\n            protected void done() {\n                try {\n                    if (get()) {\n                        treeViewer.refreshView();\n                        toolbar.toggleButtons(true);\n                    } else {\n                        JOptionPane.showMessageDialog(ZooInspectorPanel.this,\n                                \"Unable to connect to zookeeper\", \"Error\",\n                                JOptionPane.ERROR_MESSAGE);\n                    }\n                } catch (InterruptedException e) {\n                    LoggerFactory\n                            .getLogger()\n                            .error(\n                                    \"Error occurred while connecting to ZooKeeper server\",\n                                    e);\n                } catch (ExecutionException e) {\n                    LoggerFactory\n                            .getLogger()\n                            .error(\n                                    \"Error occurred while connecting to ZooKeeper server\",\n                                    e);\n                }\n            }\n\n        };\n        worker.execute();\n    }\n\n    /**\n\t * \n\t */\n    public void disconnect() {\n        disconnect(false);\n    }\n\n    /**\n     * @param wait\n     *            - set this to true if the method should only return once the\n     *            application has successfully disconnected\n     */\n    public void disconnect(boolean wait) {\n        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {\n\n            @Override\n            protected Boolean doInBackground() throws Exception {\n                return ZooInspectorPanel.this.zooInspectorManager.disconnect();\n            }\n\n            @Override\n            protected void done() {\n                try {\n                    if (get()) {\n                        treeViewer.clearView();\n                        toolbar.toggleButtons(false);\n                    }\n                } catch (InterruptedException e) {\n                    LoggerFactory\n                            .getLogger()\n                            .error(\n                                    \"Error occurred while disconnecting from ZooKeeper server\",\n                                    e);\n                } catch (ExecutionException e) {\n                    LoggerFactory\n                            .getLogger()\n                            .error(\n                                    \"Error occurred while disconnecting from ZooKeeper server\",\n                                    e);\n                }\n            }\n\n        };\n        worker.execute();\n        if (wait) {\n            while (!worker.isDone()) {\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    LoggerFactory\n                            .getLogger()\n                            .error(\n                                    \"Error occurred while disconnecting from ZooKeeper server\",\n                                    e);\n                }\n            }\n        }\n    }\n\n    /*\n     * (non-Javadoc)\n     * \n     * @seeorg.apache.zookeeper.inspector.gui.NodeViewersChangeListener#\n     * nodeViewersChanged(java.util.List)\n     */\n    public void nodeViewersChanged(List<ZooInspectorNodeViewer> newViewers) {\n        this.nodeViewersPanel.setNodeViewers(newViewers);\n    }\n\n    /**\n     * @param connectionProps\n     * @throws IOException\n     */\n    public void setdefaultConnectionProps(Properties connectionProps)\n            throws IOException {\n        this.zooInspectorManager.saveDefaultConnectionFile(connectionProps);\n    }\n}<fim_middle>// class below is blob\n"}