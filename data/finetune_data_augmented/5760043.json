{"text": "<fim_prefix>                && (access & ACCESS_FIELD) == 0) {\n            if (!first) {\n                buf.append(\" + \");\n            }\n            buf.append(\"ACC_BRIDGE\");\n            first = false;\n        }\n        if ((access & Opcodes.ACC_VARARGS) != 0 && (access & ACCESS_CLASS) == 0\n                && (access & ACCESS_FIELD) == 0) {\n            if (!first) {\n                buf.append(\" + \");\n            }\n            buf.append(\"ACC_VARARGS\");\n            first = false;\n        }\n        if ((access & Opcodes.ACC_TRANSIENT) != 0\n                && (access & ACCESS_FIELD) != 0) {\n            if (!first) {\n                buf.append(\" + \");\n            }\n            buf.append(\"ACC_TRANSIENT\");\n            first = false;\n        }\n        if ((access & Opcodes.ACC_NATIVE) != 0 && (access & ACCESS_CLASS) == 0\n                && (access & ACCESS_FIELD) == 0) {\n            if (!first) {\n                buf.append(\" + \");\n            }\n            buf.append(\"ACC_NATIVE\");\n            first = false;\n        }\n        if ((access & Opcodes.ACC_ENUM) != 0\n                && ((access & ACCESS_CLASS) != 0\n                        || (access & ACCESS_FIELD) != 0 || (access & ACCESS_INNER) != 0)) {\n            if (!first) {\n                buf.append(\" + \");\n            }\n            buf.append(\"ACC_ENUM\");\n            first = false;\n        }\n        if ((access & Opcodes.ACC_ANNOTATION) != 0\n                && ((access & ACCESS_CLASS) != 0 || (access & ACCESS_INNER) != 0)) {\n            if (!first) {\n                buf.append(\" + \");\n            }\n            buf.append(\"ACC_ANNOTATION\");\n            first = false;\n        }\n        if ((access & Opcodes.ACC_ABSTRACT) != 0) {\n            if (!first) {\n                buf.append(\" + \");\n            }\n            buf.append(\"ACC_ABSTRACT\");\n            first = false;\n        }\n        if ((access & Opcodes.ACC_INTERFACE) != 0) {\n            if (!first) {\n                buf.append(\" + \");\n            }\n            buf.append(\"ACC_INTERFACE\");\n            first = false;\n        }\n        if ((access & Opcodes.ACC_STRICT) != 0) {\n            if (!first) {\n                buf.append(\" + \");\n            }\n            buf.append(\"ACC_STRICT\");\n            first = false;\n        }\n        if ((access & Opcodes.ACC_SYNTHETIC) != 0) {\n            if (!first) {\n                buf.append(\" + \");\n            }\n            buf.append(\"ACC_SYNTHETIC\");\n            first = false;\n        }\n        if ((access & Opcodes.ACC_DEPRECATED) != 0) {\n            if (!first) {\n                buf.append(\" + \");\n            }\n            buf.append(\"ACC_DEPRECATED\");\n            first = false;\n        }\n        if (first) {\n            buf.append('0');\n        }\n    }\n    /**\n     * Appends a string representation of the given constant to the given\n     * buffer.\n     * \n     * @param cst\n     *            an {@link Integer}, {@link Float}, {@link Long},\n     *            {@link Double} or {@link String} object. May be <tt>null</tt>.\n     */\n    protected void appendConstant(final Object cst) {\n        appendConstant(buf, cst);\n    }\n    /**\n     * Appends a string representation of the given constant to the given\n     * buffer.\n     * \n     * @param buf\n     *            a string buffer.\n     * @param cst\n     *            an {@link Integer}, {@link Float}, {@link Long},\n     *            {@link Double} or {@link String} object. May be <tt>null</tt>.\n     */\n    static void appendConstant(final StringBuffer buf, final Object cst) {\n        if (cst == null) {\n            buf.append(\"null\");\n        } else if (cst instanceof String) {\n            appendString(buf, (String) cst);\n        } else if (cst instanceof Type) {\n            buf.append(\"Type.getType(\\\"\");\n            buf.append(((Type) cst).getDescriptor());\n            buf.append(\"\\\")\");\n        } else if (cst instanceof Handle) {\n            buf.append(\"new Handle(\");\n            Handle h = (Handle) cst;\n            buf.append(\"Opcodes.\").append(HANDLE_TAG[h.getTag()])\n                    .append(\", \\\"\");\n            buf.append(h.getOwner()).append(\"\\\", \\\"\");\n            buf.append(h.getName()).append(\"\\\", \\\"\");\n            buf.append(h.getDesc()).append(\"\\\")\");\n        } else if (cst instanceof Byte) {\n            buf.append(\"new Byte((byte)\").append(cst).append(')');\n        } else if (cst instanceof Boolean) {\n            buf.append(((Boolean) cst).booleanValue() ? \"Boolean.TRUE\"\n                    : \"Boolean.FALSE\");\n        } else if (cst instanceof Short) {\n            buf.append(\"new Short((short)\").append(cst).append(')');\n        } else if (cst instanceof Character) {\n            int c = ((Character) cst).charValue();\n            buf.append(\"new Character((char)\").append(c).append(')');\n        } else if (cst instanceof Integer) {\n            buf.append(\"new Integer(\").append(cst).append(')');\n        } else if (cst instanceof Float) {\n            buf.append(\"new Float(\\\"\").append(cst).append(\"\\\")\");\n        } else if (cst instanceof Long) {\n            buf.append(\"new Long(\").append(cst).append(\"L)\");\n        } else if (cst instanceof Double) {\n            buf.append(\"new Double(\\\"\").append(cst).append(\"\\\")\");\n        } else if (cst instanceof byte[]) {\n            byte[] v = (byte[]) cst;\n            buf.append(\"new byte[] {\");\n            for (int i = 0; i < v.length; i++) {\n                buf.append(i == 0 ? \"\" : \",\").append(v[i]);\n            }\n            buf.append('}');\n        } else if (cst instanceof boolean[]) {\n            boolean[] v = (boolean[]) cst;\n            buf.append(\"new boolean[] {\");\n            for (int i = 0; i < v.length; i++) {\n                buf.append(i == 0 ? \"\" : \",\").append(v[i]);\n            }\n            buf.append('}');\n        } else if (cst instanceof short[]) {\n            short[] v = (short[]) cst;\n            buf.append(\"new short[] {\");\n            for (int i = 0; i < v.length; i++) {\n                buf.append(i == 0 ? \"\" : \",\").append(\"(short)\").append(v[i]);\n            }\n            buf.append('}');\n        } else if (cst instanceof char[]) {\n            char[] v = (char[]) cst;\n            buf.append(\"new char[] {\");\n            for (int i = 0; i < v.length; i++) {\n                buf.append(i == 0 ? \"\" : \",\").append(\"(char)\")\n                        .append((int) v[i]);\n            }\n            buf.append('}');\n        } else if (cst instanceof int[]) {\n            int[] v = (int[]) cst;\n            buf.append(\"new int[] {\");\n            for (int i = 0; i < v.length; i++) {\n                buf.append(i == 0 ? \"\" : \",\").append(v[i]);\n            }\n            buf.append('}');\n        } else if (cst instanceof long[]) {\n            long[] v = (long[]) cst;\n            buf.append(\"new long[] {\");\n            for (int i = 0; i < v.length; i++) {\n                buf.append(i == 0 ? \"\" : \",\").append(v[i]).append('L');\n            }\n            buf.append('}');\n        } else if (cst instanceof float[]) {\n            float[] v = (float[]) cst;\n            buf.append(\"new float[] {\");\n            for (int i = 0; i < v.length; i++) {\n                buf.append(i == 0 ? \"\" : \",\").append(v[i]).append('f');\n            }\n            buf.append('}');\n        } else if (cst instanceof double[]) {\n            double[] v = (double[]) cst;\n            buf.append(\"new double[] {\");\n            for (int i = 0; i < v.length; i++) {\n                buf.append(i == 0 ? \"\" : \",\").append(v[i]).append('d');\n            }\n            buf.append('}');\n        }\n    }\n<fim_suffix>    private void declareFrameTypes(final int n, final Object[] o) {\n        for (int i = 0; i < n; ++i) {\n            if (o[i] instanceof Label) {\n                declareLabel((Label) o[i]);\n            }\n        }\n    }<fim_middle>// function below has no smell\n"}