{"text": "<fim_prefix>\n<fim_suffix>public final class CallResolverDialog extends JDialog {\n  /**\n   * These panels show the individual steps necessary for resolving indirect calls. They give the\n   * user a way to follow the progress of the call resolver operation.\n   */\n  private final IconPanel[] panels = new IconPanel[] {new IconPanel(\"1. Loading target\"),\n      new IconPanel(\"2. Find indirect calls\"),\n      new IconPanel(\"3. Start debugger\", new ResumeButton()), new IconPanel(\"4. Set breakpoints\"),\n      new IconPanel(\"5. Resolving breakpoints\"), new IconPanel(\"6. Stop call resolving\")};\n  /**\n   * Information about the call resolving progress is printed here.\n   */\n  private final JTextArea outputArea = new JTextArea();\n  /**\n   * This button is used to show the resolves functions as a list in the output text field.\n   */\n  private final JButton listResolvedFunctionsButton =\n      new JButton(new ListResolvedFunctionsAction());\n  /**\n   * This button is used to turn the resolved functions into a graph which is then opened in a new\n   * window.\n   */\n  private final JButton graphResolvedFunctionsButton =\n      new JButton(new GraphResolvedFunctionsAction());\n  private final JButton portResultsButton = new JButton(new GraphAllFunctionsAction());\n  /**\n   * Action of the Next button.\n   */\n  private final NextAction nextAction = new NextAction();\n  /**\n   * Used to resolve the indirect function calls.\n   */\n  private final CallResolver callResolver;\n  /**\n   * Creates a new dialog object.\n   *\n   * @param parent Parent window of the dialog.\n   * @param target The target whose calls are resolved.\n   */\n  private CallResolverDialog(final JFrame parent, final ICallResolverTarget target) {\n    super(parent, \"Call Resolver\");\n    assert parent != null;\n    assert target != null;\n    callResolver = new InternalCallResolver(target, parent);\n    setLayout(new BorderLayout());\n    add(new LabelPanel(), BorderLayout.NORTH);\n    add(new OutputPanel());\n    add(new ButtonPanel(), BorderLayout.SOUTH);\n    setSize(700, 600);\n    setResizable(false);\n    setLocationRelativeTo(parent);\n    // We need to disable all dialogs to smoothen the lookup.\n    Settings.setShowDialogs(false);\n    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);\n    addWindowListener(new WindowAdapter() {\n      @Override\n      public void windowClosed(final WindowEvent e) {\n        close();\n      }\n      @Override\n      public void windowClosing(final WindowEvent e) {\n        setVisible(false);\n        dispose();\n      }\n    });\n    updateGui();\n  }\n  /**\n   * Shows a call resolver dialog.\n   *\n   * @param parent Parent window of the dialog.\n   * @param target The target whose calls are resolved.\n   */\n  public static void show(final JFrame parent, final ICallResolverTarget target) {\n    final CallResolverDialog dialog = new CallResolverDialog(parent, target);\n    dialog.setVisible(true);\n  }\n  /**\n   * Adds a line of text to the output panel.\n   *\n   * @param string The text to add.\n   */\n  private void appendOutput(final String string) {\n    outputArea.setText(outputArea.getText() + string + \"\\n\");\n    outputArea.setCaretPosition(outputArea.getDocument().getLength());\n  }\n  private void close() {\n    Settings.setShowDialogs(true);\n    callResolver.dispose();\n    setVisible(false);\n  }\n  private void graphAllFunctions() {\n    new Thread() {\n      @Override\n      public void run() {\n        final View view = OutputGraphGenerator.createCompleteView(\n            callResolver.getTarget(), callResolver.getIndirectAddresses(),\n            callResolver.getResolvedAddresses());\n        final View2D view2d = PluginInterface.instance().showInLastWindow(view);\n        view2d.doHierarchicalLayout();\n        try {\n          view.save();\n        } catch (final CouldntSaveDataException e) {\n          e.printStackTrace();\n        }\n      }\n    }.start();\n  }\n  /**\n   * Shows the results of the call resolver operation in a new call graph view.\n   */\n  private void graphResolvedFunctions() {\n    new Thread() {\n      @Override\n      public void run() {\n        final View view = OutputGraphGenerator.createLoggedView(\n            callResolver.getTarget(), callResolver.getIndirectAddresses(),\n            callResolver.getResolvedAddresses());\n        final View2D view2d = PluginInterface.instance().showInLastWindow(view);\n        view2d.doHierarchicalLayout();\n        try {\n          view.save();\n        } catch (final CouldntSaveDataException e) {\n          e.printStackTrace();\n        }\n      }\n    }.start();\n  }\n  /**\n   * Shows the results of the call resolver operation in the text output field.\n   */\n  private void listResolvedFunctions() {\n    outputArea.setText(OutputListGenerator.generate(callResolver.getResolvedAddresses()));\n    outputArea.setCaretPosition(0);\n  }\n  /**\n   * Updates the GUI depending on the state of the resolver process.\n   */\n  private void updateGui() {\n    final int currentStep = callResolver.getCurrentStep();\n    for (int i = 0; i < panels.length; i++) {\n      panels[i].setEnabled(i <= currentStep);\n      panels[i].setDone(i < currentStep);\n    }\n    listResolvedFunctionsButton.setEnabled(currentStep == panels.length);\n    graphResolvedFunctionsButton.setEnabled(currentStep == panels.length);\n    portResultsButton.setEnabled(currentStep == panels.length);\n    nextAction.putValue(Action.NAME, currentStep == panels.length ? \"Reset\" : \"Next\");\n  }\n  /**\n   * This panel contains the Next/Reset and Cancel buttons shown at the bottom of the dialog.\n   */\n  private class ButtonPanel extends JPanel {\n    public ButtonPanel() {\n      super(new BorderLayout());\n      final JPanel innerButtonPanel = new JPanel(new BorderLayout());\n      innerButtonPanel.add(new JButton(nextAction), BorderLayout.WEST);\n      innerButtonPanel.add(new JButton(new CancelAction()), BorderLayout.EAST);\n      add(innerButtonPanel, BorderLayout.EAST);\n    }\n  }\n  /**\n   * Action that is used to close the dialog when the user clicks on the Cancel button.\n   */\n  private class CancelAction extends AbstractAction {\n    public CancelAction() {\n      super(\"Cancel\");\n    }\n    @Override\n    public void actionPerformed(final ActionEvent e) {\n      close();\n    }\n  }\n  /**\n   * Action that is used to show all resolver results in a new graph.\n   */\n  private class GraphAllFunctionsAction extends AbstractAction {\n    public GraphAllFunctionsAction() {\n      super(\"Create complete call graph view\");\n    }\n    @Override\n    public void actionPerformed(final ActionEvent e) {\n      graphAllFunctions();\n    }\n  }\n  /**\n   * Action that is used to show the resolver results in a new graph.\n   */\n  private class GraphResolvedFunctionsAction extends AbstractAction {\n    public GraphResolvedFunctionsAction() {\n      super(\"Create limited call graph view\");\n    }\n    @Override\n    public void actionPerformed(final ActionEvent e) {\n      graphResolvedFunctions();\n    }\n  }\n  /**\n   * Class for displaying the panels that show the progress.\n   */\n  private static class IconPanel extends JPanel {\n    /**\n     * Shows text that describes the step.\n     */\n    private final JLabel textLabel;\n    private JComponent additionalComponent;\n    /**\n     * Image shown when the step is complete.\n     */\n    private static ImageIcon ACCEPT_IMAGE;\n    /**\n     * Image shown when the step is active.\n     */\n    private static ImageIcon BULLET_IMAGE;\n    public IconPanel(final String text) {\n      this(text, null);\n    }\n    /**\n     * Creates a new panel object.\n     *\n     * @param text Text that describes the step.\n     */\n    public IconPanel(final String text, final JComponent additionalComponent) {\n      super(new BorderLayout());\n      if (ACCEPT_IMAGE == null) {\n        try {\n          ACCEPT_IMAGE =\n              new ImageIcon(CallResolverDialog.class.getResource(\"accept.png\").toURI().toURL());\n          BULLET_IMAGE = new ImageIcon(\n              CallResolverDialog.class.getResource(\"bullet_blue.png\").toURI().toURL());\n        } catch (MalformedURLException | URISyntaxException e) {\n          e.printStackTrace();\n        }\n      }\n      textLabel = new JLabel(text);\n      textLabel.setEnabled(false);\n      add(textLabel);\n      if (additionalComponent != null) {\n        this.additionalComponent = additionalComponent;\n        add(additionalComponent, BorderLayout.EAST);\n      }\n      setPreferredSize(new Dimension(200, 20));\n    }\n    /**\n     * Sets a flag that says whether the step is done or not.\n     *\n     * @param done True, if the step is done. False, if it is not.\n     */\n    public void setDone(final boolean done) {\n      textLabel.setIcon(done ? ACCEPT_IMAGE : BULLET_IMAGE);\n    }\n    @Override\n    public void setEnabled(final boolean enabled) {\n      super.setEnabled(enabled);\n      if (additionalComponent != null) {<fim_middle>// class below is blob\n"}