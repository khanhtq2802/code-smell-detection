{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.solr.analytics.util.function;\n\nimport java.util.Objects;\nimport java.util.function.Consumer;\n\n/**\n * Represents an operation that accepts a single {@code boolean}-valued argument and\n * returns no result.  This is the primitive type specialization of\n * {@link Consumer} for {@code boolean}.  Unlike most other functional interfaces,\n * {@code IntConsumer} is expected to operate via side-effects.\n *\n * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n * whose functional method is {@link #accept(boolean)}.\n *\n * @see Consumer\n */\n@FunctionalInterface\npublic interface BooleanConsumer {\n\n  /**\n   * Performs this operation on the given argument.\n   *\n   * @param value the input argument\n   */\n  void accept(boolean value);\n\n  /**\n   * Returns a composed {@code DoubleConsumer} that performs, in sequence, this\n   * operation followed by the {@code after} operation. If performing either\n   * operation throws an exception, it is relayed to the caller of the\n   * composed operation.  If performing this operation throws an exception,\n   * the {@code after} operation will not be performed.\n   *\n   * @param after the operation to perform after this operation\n   * @return a composed {@code DoubleConsumer} that performs in sequence this\n   * operation followed by the {@code after} operation\n   * @throws NullPointerException if {@code after} is null\n   */\n<fim_suffix>  default BooleanConsumer andThen(BooleanConsumer after) {\n    Objects.requireNonNull(after);\n    return (boolean t) -> { accept(t); after.accept(t); };\n  }\n}<fim_middle>// function below has no smell\n"}