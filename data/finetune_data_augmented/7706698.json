{"text": "<fim_prefix>// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\npackage com.uber.rave;\n\n/**\n * Holds a single Rave error. This generally will be validation failure.\n */\npublic final class RaveError {\n\n    private final String errorMsg;\n\n    private final String classElement;\n    private final Class<?> clazz;\n\n    /**\n     * @param clazz the inner most {@link Class} that failed validation.\n     * @param item the name of the item that failed validation such as the method name.\n     * @param errorMsg the error message.\n     */\n<fim_suffix>    public RaveError(Class<?> clazz, String item, String errorMsg) {\n        this.clazz = clazz;\n        this.errorMsg = errorMsg;\n        classElement = item;\n    }\n\n    /**\n     * @param validationContext the {@link BaseValidator.ValidationContext}.\n     * @param errorMsg the error message.\n     */\n    public RaveError(BaseValidator.ValidationContext validationContext, String errorMsg) {\n        this.clazz = validationContext.getClazz();\n        classElement = validationContext.getValidatedItemName();\n        this.errorMsg = errorMsg;\n    }\n\n    /**\n     * @return the {@link String} error messaged for this error.\n     */\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n    /**\n     * This method returns the description of what element in the class failed validation, for example the method name.\n     *\n     * @return the {@link String} representation of the element in the class.\n     */\n    public String getClassElement() {\n        return classElement;\n    }\n\n    /**\n     * @return the {@link Class} object.\n     */\n    public Class<?> getClazz() {\n        return clazz;\n    }\n\n    @Override\n    public String toString() {\n        if (classElement.isEmpty()) {\n            return clazz.getCanonicalName() + \":\" + errorMsg;\n        }\n        return clazz.getCanonicalName() + \":\" + classElement + \":\" + errorMsg;\n    }\n}<fim_middle>// function below has no smell\n"}