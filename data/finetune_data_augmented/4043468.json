{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.hyracks.dataflow.std.union;\n\nimport java.nio.ByteBuffer;\n\nimport org.apache.hyracks.api.comm.IFrameWriter;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.dataflow.ActivityId;\nimport org.apache.hyracks.api.dataflow.IActivityGraphBuilder;\nimport org.apache.hyracks.api.dataflow.IOperatorNodePushable;\nimport org.apache.hyracks.api.dataflow.value.IRecordDescriptorProvider;\nimport org.apache.hyracks.api.dataflow.value.RecordDescriptor;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.api.job.IOperatorDescriptorRegistry;\nimport org.apache.hyracks.dataflow.std.base.AbstractActivityNode;\nimport org.apache.hyracks.dataflow.std.base.AbstractOperatorDescriptor;\nimport org.apache.hyracks.dataflow.std.base.AbstractUnaryOutputOperatorNodePushable;\n\npublic class UnionAllOperatorDescriptor extends AbstractOperatorDescriptor {\n<fim_suffix>    public UnionAllOperatorDescriptor(IOperatorDescriptorRegistry spec, int nInputs,\n            RecordDescriptor recordDescriptor) {\n        super(spec, nInputs, 1);\n        outRecDescs[0] = recordDescriptor;\n    }\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void contributeActivities(IActivityGraphBuilder builder) {\n        UnionActivityNode uba = new UnionActivityNode(new ActivityId(getOperatorId(), 0));\n        builder.addActivity(this, uba);\n        for (int i = 0; i < inputArity; ++i) {\n            builder.addSourceEdge(i, uba, i);\n        }\n        builder.addTargetEdge(0, uba, 0);\n    }\n\n    private class UnionActivityNode extends AbstractActivityNode {\n        private static final long serialVersionUID = 1L;\n\n        public UnionActivityNode(ActivityId id) {\n            super(id);\n        }\n\n        @Override\n        public IOperatorNodePushable createPushRuntime(IHyracksTaskContext ctx,\n                IRecordDescriptorProvider recordDescProvider, int partition, int nPartitions)\n                throws HyracksDataException {\n            return new UnionOperator();\n        }\n    }\n\n    private class UnionOperator extends AbstractUnaryOutputOperatorNodePushable {\n        private int nOpened = 0;\n        private int nClosed = 0;\n        private boolean failed;\n\n        @Override\n        public int getInputArity() {\n            return inputArity;\n        }\n\n        @Override\n        public IFrameWriter getInputFrameWriter(int index) {\n            return new IFrameWriter() {\n                @Override\n                public void open() throws HyracksDataException {\n                    synchronized (UnionOperator.this) {\n                        if (++nOpened == 1) {\n                            writer.open();\n                        }\n                    }\n                }\n\n                @Override\n                public void nextFrame(ByteBuffer buffer) throws HyracksDataException {\n                    synchronized (UnionOperator.this) {\n                        writer.nextFrame(buffer);\n                    }\n                }\n\n                @Override\n                public void fail() throws HyracksDataException {\n                    synchronized (UnionOperator.this) {\n                        if (!failed) {\n                            writer.fail();\n                        }\n                        failed = true;\n                    }\n                }\n\n                @Override\n                public void close() throws HyracksDataException {\n                    synchronized (UnionOperator.this) {\n                        if (++nClosed == inputArity) {\n                            // a single close\n                            writer.close();\n                        }\n                    }\n                }\n\n                @Override\n                public void flush() throws HyracksDataException {\n                    synchronized (UnionOperator.this) {\n                        writer.flush();\n                    }\n                }\n            };\n        }\n    }\n}<fim_middle>// function below has no smell\n"}