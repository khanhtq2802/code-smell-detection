{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.fineract.infrastructure.bulkimport.populator.savings;\nimport org.apache.fineract.infrastructure.bulkimport.constants.TemplatePopulateImportConstants;\nimport org.apache.fineract.infrastructure.bulkimport.constants.TransactionConstants;\nimport org.apache.fineract.infrastructure.bulkimport.populator.AbstractWorkbookPopulator;\nimport org.apache.fineract.infrastructure.bulkimport.populator.ClientSheetPopulator;\nimport org.apache.fineract.infrastructure.bulkimport.populator.ExtrasSheetPopulator;\nimport org.apache.fineract.infrastructure.bulkimport.populator.OfficeSheetPopulator;\nimport org.apache.fineract.portfolio.savings.data.SavingsAccountData;\nimport org.apache.poi.hssf.usermodel.HSSFDataValidationHelper;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.ss.SpreadsheetVersion;\nimport org.apache.poi.ss.usermodel.*;\nimport org.apache.poi.ss.util.CellRangeAddressList;\nimport org.joda.time.format.DateTimeFormat;\nimport org.joda.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\npublic class SavingsTransactionsWorkbookPopulator extends AbstractWorkbookPopulator {\n    private OfficeSheetPopulator officeSheetPopulator;\n    private ClientSheetPopulator clientSheetPopulator;\n    private ExtrasSheetPopulator extrasSheetPopulator;\n    private List<SavingsAccountData>savingsAccounts;\n    public SavingsTransactionsWorkbookPopulator(OfficeSheetPopulator officeSheetPopulator,\n            ClientSheetPopulator clientSheetPopulator, ExtrasSheetPopulator extrasSheetPopulator,\n            List<SavingsAccountData> savingsAccounts) {\n        this.officeSheetPopulator = officeSheetPopulator;\n        this.clientSheetPopulator = clientSheetPopulator;\n        this.extrasSheetPopulator = extrasSheetPopulator;\n        this.savingsAccounts=savingsAccounts;\n    }\n<fim_suffix>    @Override\n    public void populate(Workbook workbook,String dateFormat) {\n        Sheet savingsTransactionSheet = workbook.createSheet(TemplatePopulateImportConstants.SAVINGS_TRANSACTION_SHEET_NAME);\n        setLayout(savingsTransactionSheet);\n        officeSheetPopulator.populate(workbook,dateFormat);\n        clientSheetPopulator.populate(workbook,dateFormat);\n        extrasSheetPopulator.populate(workbook,dateFormat);\n        populateSavingsTable(savingsTransactionSheet,dateFormat);\n        setRules(savingsTransactionSheet,dateFormat);\n        setDefaults(savingsTransactionSheet);\n    }\n    private void setDefaults(Sheet worksheet) {\n        for(Integer rowNo = 1; rowNo < 3000; rowNo++)\n        {\n            Row row = worksheet.getRow(rowNo);\n            if(row == null)\n                row = worksheet.createRow(rowNo);\n            writeFormula(TransactionConstants.PRODUCT_COL, row, \"IF(ISERROR(VLOOKUP($C\"+ (rowNo+1) +\",$Q$2:$S$\" + (savingsAccounts.size() + 1) + \",2,FALSE)),\\\"\\\",VLOOKUP($C\"+ (rowNo+1) +\",$Q$2:$S$\" + (savingsAccounts.size() + 1) + \",2,FALSE))\");\n            writeFormula(TransactionConstants.OPENING_BALANCE_COL, row, \"IF(ISERROR(VLOOKUP($C\"+ (rowNo+1) +\",$Q$2:$S$\" + (savingsAccounts.size() + 1) + \",3,FALSE)),\\\"\\\",VLOOKUP($C\"+ (rowNo+1) +\",$Q$2:$S$\" + (savingsAccounts.size() + 1) + \",3,FALSE))\");\n        }\n    }\n    private void setRules(Sheet worksheet,String dateFormat) {\n        CellRangeAddressList officeNameRange = new  CellRangeAddressList(1, SpreadsheetVersion.EXCEL97.getLastRowIndex(),\n                TransactionConstants.OFFICE_NAME_COL, TransactionConstants.OFFICE_NAME_COL);\n        CellRangeAddressList clientNameRange = new  CellRangeAddressList(1, SpreadsheetVersion.EXCEL97.getLastRowIndex(),\n                TransactionConstants.CLIENT_NAME_COL, TransactionConstants.CLIENT_NAME_COL);\n        CellRangeAddressList accountNumberRange = new  CellRangeAddressList(1, SpreadsheetVersion.EXCEL97.getLastRowIndex(),\n                TransactionConstants.SAVINGS_ACCOUNT_NO_COL, TransactionConstants.SAVINGS_ACCOUNT_NO_COL);\n        CellRangeAddressList transactionTypeRange = new  CellRangeAddressList(1, SpreadsheetVersion.EXCEL97.getLastRowIndex(),\n                TransactionConstants.TRANSACTION_TYPE_COL, TransactionConstants.TRANSACTION_TYPE_COL);\n        CellRangeAddressList paymentTypeRange = new CellRangeAddressList(1, SpreadsheetVersion.EXCEL97.getLastRowIndex(),\n                TransactionConstants.PAYMENT_TYPE_COL, TransactionConstants.PAYMENT_TYPE_COL);\n        CellRangeAddressList transactionDateRange = new CellRangeAddressList(1, SpreadsheetVersion.EXCEL97.getLastRowIndex(),\n                TransactionConstants.TRANSACTION_DATE_COL, TransactionConstants.TRANSACTION_DATE_COL);\n        DataValidationHelper validationHelper = new HSSFDataValidationHelper((HSSFSheet)worksheet);\n        setNames(worksheet);\n        DataValidationConstraint officeNameConstraint = validationHelper.createFormulaListConstraint(\"Office\");\n        DataValidationConstraint clientNameConstraint = validationHelper.createFormulaListConstraint(\"INDIRECT(CONCATENATE(\\\"Client_\\\",$A1))\");\n        DataValidationConstraint accountNumberConstraint = validationHelper.createFormulaListConstraint(\"INDIRECT(CONCATENATE(\\\"Account_\\\",SUBSTITUTE(SUBSTITUTE(SUBSTITUTE($B1,\\\" \\\",\\\"_\\\"),\\\"(\\\",\\\"_\\\"),\\\")\\\",\\\"_\\\")))\");\n        DataValidationConstraint transactionTypeConstraint = validationHelper.createExplicitListConstraint(new String[] {\"Withdrawal\",\"Deposit\"});\n        DataValidationConstraint paymentTypeConstraint = validationHelper.createFormulaListConstraint(\"PaymentTypes\");\n        DataValidationConstraint transactionDateConstraint = validationHelper.createDateConstraint(DataValidationConstraint.OperatorType.BETWEEN, \"=VLOOKUP($C1,$Q$2:$T$\" + (savingsAccounts.size() + 1) + \",4,FALSE)\", \"=TODAY()\",dateFormat);\n        DataValidation officeValidation = validationHelper.createValidation(officeNameConstraint, officeNameRange);\n        DataValidation clientValidation = validationHelper.createValidation(clientNameConstraint, clientNameRange);\n        DataValidation accountNumberValidation = validationHelper.createValidation(accountNumberConstraint, accountNumberRange);\n        DataValidation transactionTypeValidation = validationHelper.createValidation(transactionTypeConstraint, transactionTypeRange);\n        DataValidation paymentTypeValidation = validationHelper.createValidation(paymentTypeConstraint, paymentTypeRange);\n        DataValidation transactionDateValidation = validationHelper.createValidation(transactionDateConstraint, transactionDateRange);\n        worksheet.addValidationData(officeValidation);\n        worksheet.addValidationData(clientValidation);\n        worksheet.addValidationData(accountNumberValidation);\n        worksheet.addValidationData(transactionTypeValidation);\n        worksheet.addValidationData(paymentTypeValidation);\n        worksheet.addValidationData(transactionDateValidation);\n    }\n    private void setNames(Sheet worksheet) {\n        Workbook savingsTransactionWorkbook = worksheet.getWorkbook();\n        List<String> officeNames = officeSheetPopulator.getOfficeNames();\n        //Office Names\n        Name officeGroup = savingsTransactionWorkbook.createName();\n        officeGroup.setNameName(\"Office\");\n        officeGroup.setRefersToFormula(TemplatePopulateImportConstants.OFFICE_SHEET_NAME+\"!$B$2:$B$\" + (officeNames.size() + 1));\n        //Clients Named after Offices\n        for(Integer i = 0; i < officeNames.size(); i++) {\n            Integer[] officeNameToBeginEndIndexesOfClients = clientSheetPopulator.getOfficeNameToBeginEndIndexesOfClients().get(i);\n            Name name = savingsTransactionWorkbook.createName();\n            if(officeNameToBeginEndIndexesOfClients != null) {\n                name.setNameName(\"Client_\" + officeNames.get(i).trim().replaceAll(\"[ )(]\", \"_\"));<fim_middle>// function below has no smell\n"}