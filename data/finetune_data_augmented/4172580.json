{"text": "<fim_prefix>/*****************************************************************\n *   Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n ****************************************************************/\n\npackage org.apache.cayenne.dbsync;\n\nimport org.apache.cayenne.dba.db2.DB2Adapter;\nimport org.apache.cayenne.dba.derby.DerbyAdapter;\nimport org.apache.cayenne.dba.firebird.FirebirdAdapter;\nimport org.apache.cayenne.dba.h2.H2Adapter;\nimport org.apache.cayenne.dba.hsqldb.HSQLDBAdapter;\nimport org.apache.cayenne.dba.ingres.IngresAdapter;\nimport org.apache.cayenne.dba.mysql.MySQLAdapter;\nimport org.apache.cayenne.dba.openbase.OpenBaseAdapter;\nimport org.apache.cayenne.dba.oracle.Oracle8Adapter;\nimport org.apache.cayenne.dba.oracle.OracleAdapter;\nimport org.apache.cayenne.dba.postgres.PostgresAdapter;\nimport org.apache.cayenne.dba.sqlserver.SQLServerAdapter;\nimport org.apache.cayenne.dba.sybase.SybaseAdapter;\nimport org.apache.cayenne.dbsync.merge.factory.MergerTokenFactoryProvider;\nimport org.apache.cayenne.dbsync.merge.factory.DB2MergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.DefaultMergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.DerbyMergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.FirebirdMergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.H2MergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.HSQLMergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.IngresMergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.MergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.MySQLMergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.OpenBaseMergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.OracleMergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.PostgresMergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.SQLServerMergerTokenFactory;\nimport org.apache.cayenne.dbsync.merge.factory.SybaseMergerTokenFactory;\nimport org.apache.cayenne.di.Binder;\nimport org.apache.cayenne.di.MapBuilder;\nimport org.apache.cayenne.di.Module;\n\n/**\n * @since 4.0\n */\n<fim_suffix>public class DbSyncModule implements Module {\n\n    /**\n     * A DI container key for the Map&lt;String, String&gt; storing properties\n     * used by built-in Cayenne service.\n     */\n    public static final String MERGER_FACTORIES_MAP = \"cayenne.dbsync.mergerfactories\";\n\n    public static MapBuilder<MergerTokenFactory> contributeMergerTokenFactories(Binder binder) {\n        return binder.bindMap(MergerTokenFactory.class, MERGER_FACTORIES_MAP);\n    }\n\n    @Override\n    public void configure(Binder binder) {\n\n        // default and per adapter merger factories...\n        binder.bind(MergerTokenFactory.class).to(DefaultMergerTokenFactory.class);\n        contributeMergerTokenFactories(binder)\n                .put(DB2Adapter.class.getName(), DB2MergerTokenFactory.class)\n                .put(DerbyAdapter.class.getName(), DerbyMergerTokenFactory.class)\n                .put(FirebirdAdapter.class.getName(), FirebirdMergerTokenFactory.class)\n                .put(H2Adapter.class.getName(), H2MergerTokenFactory.class)\n                .put(HSQLDBAdapter.class.getName(), HSQLMergerTokenFactory.class)\n                .put(IngresAdapter.class.getName(), IngresMergerTokenFactory.class)\n                .put(MySQLAdapter.class.getName(), MySQLMergerTokenFactory.class)\n                .put(OpenBaseAdapter.class.getName(), OpenBaseMergerTokenFactory.class)\n                .put(OracleAdapter.class.getName(), OracleMergerTokenFactory.class)\n                .put(Oracle8Adapter.class.getName(), OracleMergerTokenFactory.class)\n                .put(PostgresAdapter.class.getName(), PostgresMergerTokenFactory.class)\n                .put(SQLServerAdapter.class.getName(), SQLServerMergerTokenFactory.class)\n                .put(SybaseAdapter.class.getName(), SybaseMergerTokenFactory.class);\n\n        binder.bind(MergerTokenFactoryProvider.class).to(MergerTokenFactoryProvider.class);\n\n    }\n}<fim_middle>// class below has no smell\n"}