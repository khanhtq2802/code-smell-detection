{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.dataformat.univocity;\n\nimport java.io.Writer;\nimport java.util.LinkedHashMap;\n\nimport com.univocity.parsers.fixed.FixedWidthFields;\nimport com.univocity.parsers.fixed.FixedWidthFormat;\nimport com.univocity.parsers.fixed.FixedWidthParser;\nimport com.univocity.parsers.fixed.FixedWidthParserSettings;\nimport com.univocity.parsers.fixed.FixedWidthWriter;\nimport com.univocity.parsers.fixed.FixedWidthWriterSettings;\nimport org.apache.camel.spi.annotations.Dataformat;\n\n/**\n * This class is the data format that uses the fixed-width uniVocity parser.\n */\n@Dataformat(\"univocity-fixed\")\npublic class UniVocityFixedWidthDataFormat extends AbstractUniVocityDataFormat<FixedWidthFormat, FixedWidthWriterSettings,\n        FixedWidthWriter, FixedWidthParserSettings, FixedWidthParser, UniVocityFixedWidthDataFormat> {\n    protected int[] fieldLengths;\n    protected Boolean skipTrailingCharsUntilNewline;\n    protected Boolean recordEndsOnNewline;\n    protected Character padding;\n\n    /**\n     * Gets the field lengths.\n     * It's used to construct uniVocity {@link com.univocity.parsers.fixed.FixedWidthFields} instance.\n     *\n     * @return the field lengths\n     */\n    public int[] getFieldLengths() {\n        return fieldLengths;\n    }\n\n    /**\n     * Sets the field lengths\n     * It's used to construct uniVocity {@link com.univocity.parsers.fixed.FixedWidthFields} instance.\n     *\n     * @param fieldLengths the field length\n     * @return current data format instance, fluent API\n     */\n    public UniVocityFixedWidthDataFormat setFieldLengths(int[] fieldLengths) {\n        this.fieldLengths = fieldLengths;\n        return this;\n    }\n\n    /**\n     * Gets whether or not trailing characters until new line must be ignored.\n     *\n     * @return whether or not trailing characters until new line must be ignored\n     * @see com.univocity.parsers.fixed.FixedWidthParserSettings#getSkipTrailingCharsUntilNewline()\n     */\n    public Boolean getSkipTrailingCharsUntilNewline() {\n        return skipTrailingCharsUntilNewline;\n    }\n\n    /**\n     * Sets whether or not trailing characters until new line must be ignored.\n     *\n     * @param skipTrailingCharsUntilNewline whether or not trailing characters until new line must be ignored\n     * @return current data format instance, fluent API\n     * @see com.univocity.parsers.fixed.FixedWidthParserSettings#setSkipTrailingCharsUntilNewline(boolean)\n     */\n    public UniVocityFixedWidthDataFormat setSkipTrailingCharsUntilNewline(Boolean skipTrailingCharsUntilNewline) {\n        this.skipTrailingCharsUntilNewline = skipTrailingCharsUntilNewline;\n        return this;\n    }\n\n    /**\n     * Gets whether or not the record ends on new line.\n     *\n     * @return whether or not the record ends on new line\n     * @see com.univocity.parsers.fixed.FixedWidthParserSettings#getRecordEndsOnNewline()\n     */\n    public Boolean getRecordEndsOnNewline() {\n        return recordEndsOnNewline;\n    }\n\n    /**\n     * Sets whether or not the record ends on new line\n     *\n     * @param recordEndsOnNewline whether or not the record ends on new line\n     * @return current data format instance, fluent API\n     * @see com.univocity.parsers.fixed.FixedWidthParserSettings#setRecordEndsOnNewline(boolean)\n     */\n    public UniVocityFixedWidthDataFormat setRecordEndsOnNewline(Boolean recordEndsOnNewline) {\n        this.recordEndsOnNewline = recordEndsOnNewline;\n        return this;\n    }\n\n    /**\n     * Gets the padding symbol.\n     * If {@code null} then the default format value is used.\n     *\n     * @return the padding symbol\n     * @see com.univocity.parsers.fixed.FixedWidthFormat#getPadding()\n     */\n    public Character getPadding() {\n        return padding;\n    }\n\n    /**\n     * Sets the padding symbol.\n     * If {@code null} then the default format value is used.\n     *\n     * @param padding the padding symbol\n     * @return current data format instance, fluent API\n     * @see com.univocity.parsers.fixed.FixedWidthFormat#setPadding(char)\n     */\n    public UniVocityFixedWidthDataFormat setPadding(Character padding) {\n        this.padding = padding;\n        return this;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected FixedWidthWriterSettings createWriterSettings() {\n        return new FixedWidthWriterSettings(createFixedWidthFields());\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected FixedWidthWriter createWriter(Writer writer, FixedWidthWriterSettings settings) {\n        return new FixedWidthWriter(writer, settings);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected FixedWidthParserSettings createParserSettings() {\n        return new FixedWidthParserSettings(createFixedWidthFields());\n    }\n\n    @Override\n    protected void configureParserSettings(FixedWidthParserSettings settings) {\n        super.configureParserSettings(settings);\n\n        if (skipTrailingCharsUntilNewline != null) {\n            settings.setSkipTrailingCharsUntilNewline(skipTrailingCharsUntilNewline);\n        }\n        if (recordEndsOnNewline != null) {\n            settings.setRecordEndsOnNewline(true);\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected FixedWidthParser createParser(FixedWidthParserSettings settings) {\n        return new FixedWidthParser(settings);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n<fim_suffix>    @Override\n    protected void configureFormat(FixedWidthFormat format) {\n        super.configureFormat(format);\n\n        if (padding != null) {\n            format.setPadding(padding);\n        }\n    }\n\n    /**\n     * Creates the {@link com.univocity.parsers.fixed.FixedWidthFields} instance based on the headers and field\n     * lengths.\n     *\n     * @return new {@code FixedWidthFields} based on the header and field lengths.\n     */\n    private FixedWidthFields createFixedWidthFields() {\n        // Ensure that the field lengths have been defined.\n        if (fieldLengths == null) {\n            throw new IllegalArgumentException(\"The fieldLengths must have been defined in order to use the fixed-width format.\");\n        }\n\n        // If there's no header then we only use their length\n        if (headers == null) {\n            return new FixedWidthFields(fieldLengths);\n        }\n\n        // Use both headers and field lengths (same size and no duplicate headers)\n        if (fieldLengths.length != headers.length) {\n            throw new IllegalArgumentException(\"The headers and fieldLengths must have the same number of element in order to use the fixed-width format.\");\n        }\n        LinkedHashMap<String, Integer> fields = new LinkedHashMap<>();\n        for (int i = 0; i < headers.length; i++) {\n            fields.put(headers[i], fieldLengths[i]);\n        }\n        if (fields.size() != headers.length) {\n            throw new IllegalArgumentException(\"The headers cannot have duplicates in order to use the fixed-width format.\");\n        }\n        return new FixedWidthFields(fields);\n    }\n\n    @Override\n    public String getDataFormatName() {\n        return \"univocity-fixed\";\n    }\n}<fim_middle>// function below has no smell\n"}