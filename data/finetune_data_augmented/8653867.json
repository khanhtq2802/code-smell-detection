{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache.persistence.file;\n\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\n\n/**\n * Decorator class for File I/O\n */\n<fim_suffix>public class FileIODecorator extends AbstractFileIO {\n    /** File I/O delegate */\n    protected final FileIO delegate;\n\n    /**\n     *\n     * @param delegate File I/O delegate\n     */\n    public FileIODecorator(FileIO delegate) {\n        this.delegate = delegate;\n    }\n\n    /** {@inheritDoc} */\n    @Override public int getFileSystemBlockSize() {\n        return delegate.getFileSystemBlockSize();\n    }\n\n    /** {@inheritDoc} */\n    @Override public long getSparseSize() {\n        return delegate.getSparseSize();\n    }\n\n    /** {@inheritDoc} */\n    @Override public int punchHole(long pos, int len) {\n        return delegate.punchHole(pos, len);\n    }\n\n    /** {@inheritDoc} */\n    @Override public long position() throws IOException {\n        return delegate.position();\n    }\n\n    /** {@inheritDoc} */\n    @Override public void position(long newPosition) throws IOException {\n        delegate.position(newPosition);\n    }\n\n    /** {@inheritDoc} */\n    @Override public int read(ByteBuffer destBuf) throws IOException {\n        return delegate.read(destBuf);\n    }\n\n    /** {@inheritDoc} */\n    @Override public int read(ByteBuffer destBuf, long position) throws IOException {\n        return delegate.read(destBuf, position);\n    }\n\n    /** {@inheritDoc} */\n    @Override public int read(byte[] buf, int off, int len) throws IOException {\n        return delegate.read(buf, off, len);\n    }\n\n    /** {@inheritDoc} */\n    @Override public int write(ByteBuffer srcBuf) throws IOException {\n        return delegate.write(srcBuf);\n    }\n\n    /** {@inheritDoc} */\n    @Override public int write(ByteBuffer srcBuf, long position) throws IOException {\n        return delegate.write(srcBuf, position);\n    }\n\n    /** {@inheritDoc} */\n    @Override public int write(byte[] buf, int off, int len) throws IOException {\n        return delegate.write(buf, off, len);\n    }\n\n    /** {@inheritDoc} */\n    @Override public MappedByteBuffer map(int sizeBytes) throws IOException {\n        return delegate.map(sizeBytes);\n    }\n\n    /** {@inheritDoc} */\n    @Override public void force() throws IOException {\n        delegate.force();\n    }\n\n    /** {@inheritDoc} */\n    @Override public void force(boolean withMetadata) throws IOException {\n        delegate.force(withMetadata);\n    }\n\n    /** {@inheritDoc} */\n    @Override public long size() throws IOException {\n        return delegate.size();\n    }\n\n    /** {@inheritDoc} */\n    @Override public void clear() throws IOException {\n        delegate.clear();\n    }\n\n    /** {@inheritDoc} */\n    @Override public void close() throws IOException {\n        delegate.close();\n    }\n}<fim_middle>// class below has no smell\n"}