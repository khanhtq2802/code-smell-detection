{"text": "<fim_prefix>// Copyright 2009-2013 The Apache Software Foundation\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage org.apache.tapestry5.corelib.base;\n\nimport org.apache.tapestry5.BindingConstants;\nimport org.apache.tapestry5.Block;\nimport org.apache.tapestry5.ComponentResources;\nimport org.apache.tapestry5.MarkupWriter;\nimport org.apache.tapestry5.annotations.Parameter;\nimport org.apache.tapestry5.annotations.SupportsInformalParameters;\nimport org.apache.tapestry5.ioc.annotations.Inject;\n\n/**\n * Base class for {@link org.apache.tapestry5.corelib.components.If} and {@link org.apache.tapestry5.corelib.components.Unless}.\n * Will render its body or the block from its else parameter.  If it renders anything and it has an element name, then\n * it renders the element and its informal parameters.\n *\n * @tapestrydoc\n */\n<fim_suffix>@SupportsInformalParameters\npublic abstract class AbstractConditional\n{\n    @Inject\n    private ComponentResources resources;\n\n    /**\n     * Performs the test via the parameters; return true to render the body of the component, false to render the else\n     * block (or nothing).\n     *\n     * @return true to render body\n     */\n    protected abstract boolean test();\n\n    /**\n     * An alternate {@link org.apache.tapestry5.Block} to render if {@link #test()} is false. The default, null, means\n     * render nothing in that situation.\n     */\n    @Parameter(name = \"else\", defaultPrefix = BindingConstants.LITERAL)\n    private Block elseBlock;\n\n    private boolean renderTag;\n\n    /**\n     * Returns null if the {@link #test()} is true, which allows normal rendering (of the body). If the test parameter\n     * is false, returns the else parameter (this may also be null).\n     */\n    Object beginRender(MarkupWriter writer)\n    {\n        boolean enabled = test();\n\n        Block toRender = enabled ? resources.getBody() : elseBlock;\n\n        String elementName = resources.getElementName();\n\n        if (enabled && elementName != null)\n        {\n            renderTag = true;\n            writer.element(elementName);\n            resources.renderInformalParameters(writer);\n        }\n\n        return toRender;\n    }\n\n    /**\n     * If {@link #test()} is true, then the body is rendered, otherwise not. The component does not have a template or\n     * do any other rendering besides its body (and possibly an element around its body).\n     */\n    boolean beforeRenderBody()\n    {\n        return false;\n    }\n\n    void afterRender(MarkupWriter writer)\n    {\n        if (renderTag)\n        {\n            writer.end();\n            renderTag = false;\n        }\n    }\n\n\n}<fim_middle>// class below has no smell\n"}