{"text": "<fim_prefix>/*\n * Copyright 2014-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.xd.dirt.modules.metadata;\n\nimport static org.springframework.xd.dirt.modules.metadata.FileSinkOptionsMetadata.Mode.APPEND;\nimport static org.springframework.xd.module.options.spi.ModulePlaceholders.XD_STREAM_NAME;\n\nimport javax.validation.constraints.NotNull;\n\nimport org.hibernate.validator.constraints.NotBlank;\n\nimport org.springframework.util.StringUtils;\nimport org.springframework.xd.module.options.spi.ModuleOption;\nimport org.springframework.xd.module.options.spi.ProfileNamesProvider;\n\n/**\n *\n * Holds options to the 'file' sink module.\n *\n * @author Eric Bottard\n * @author Franck Marchand\n */\n<fim_suffix>public class FileSinkOptionsMetadata implements ProfileNamesProvider {\n\n\tprivate static final String USE_SPEL_PROFILE = \"use-expression\";\n\n\tprivate static final String USE_LITERAL_STRING_PROFILE = \"use-string\";\n\n\tprivate boolean binary = false;\n\n\tprivate String charset = \"UTF-8\";\n\n\tprivate String dir = \"/tmp/xd/output/\";\n\n\tprivate String name = XD_STREAM_NAME;\n\n\tprivate String suffix = \"out\";\n\n\tprivate Mode mode = APPEND;\n\n\tprivate String nameExpression;\n\n\tprivate String dirExpression;\n\n\t@NotNull\n\tpublic Mode getMode() {\n\t\treturn mode;\n\t}\n\n\t@ModuleOption(\"what to do if the file already exists\")\n\tpublic void setMode(Mode mode) {\n\t\tthis.mode = mode;\n\t}\n\n\t/**\n\t * Return dot + suffix if suffix is set, or the empty string otherwise.\n\t */\n\tpublic String getExtensionWithDot() {\n\t\treturn StringUtils.hasText(suffix) ? \".\" + suffix.trim() : \"\";\n\t}\n\n\n\t@ModuleOption(\"filename extension to use\")\n\tpublic void setSuffix(String suffix) {\n\t\tthis.suffix = suffix;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\t@ModuleOption(\"filename pattern to use\")\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\t@NotBlank\n\tpublic String getDir() {\n\t\treturn dir;\n\t}\n\n\t@ModuleOption(\"the directory in which files will be created\")\n\tpublic void setDir(String dir) {\n\t\tthis.dir = dir;\n\t}\n\n\tpublic boolean isBinary() {\n\t\treturn binary;\n\t}\n\n\t@ModuleOption(\"if false, will append a newline character at the end of each line\")\n\tpublic void setBinary(boolean binary) {\n\t\tthis.binary = binary;\n\t}\n\n\t@ModuleOption(\"the charset to use when writing a String payload\")\n\tpublic void setCharset(String charset) {\n\t\tthis.charset = charset;\n\t}\n\n\t@NotBlank\n\tpublic String getCharset() {\n\t\treturn charset;\n\t}\n\n\n\tpublic String getNameExpression() {\n\t\treturn nameExpression;\n\t}\n\n\t@ModuleOption(\"spring expression used to define filename\")\n\tpublic void setNameExpression(String nameExpression) {\n\t\tthis.nameExpression = nameExpression;\n\t}\n\n\tpublic String getDirExpression() {\n\t\treturn dirExpression;\n\t}\n\n\t@ModuleOption(\"spring expression used to define directory name\")\n\tpublic void setDirExpression(String dirExpression) {\n\t\tthis.dirExpression = dirExpression;\n\t}\n\n\tpublic static enum Mode {\n\t\tAPPEND, REPLACE, FAIL, IGNORE;\n\t}\n\n\t@Override\n\tpublic String[] profilesToActivate() {\n\t\treturn (nameExpression != null || dirExpression != null) ? new String[] { USE_SPEL_PROFILE }\n\t\t\t\t: new String[] { USE_LITERAL_STRING_PROFILE };\n\t}\n}<fim_middle>// class below is data class\n"}