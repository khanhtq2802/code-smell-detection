{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.zeppelin.spark;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Provide reading comparing capability of spark version returned from SparkContext.version()\n */\n<fim_suffix>public class SparkVersion {\n  private static final Logger logger = LoggerFactory.getLogger(SparkVersion.class);\n\n  public static final SparkVersion SPARK_1_6_0 = SparkVersion.fromVersionString(\"1.6.0\");\n\n  public static final SparkVersion SPARK_2_0_0 = SparkVersion.fromVersionString(\"2.0.0\");\n  public static final SparkVersion SPARK_2_3_0 = SparkVersion.fromVersionString(\"2.3.0\");\n  public static final SparkVersion SPARK_2_3_1 = SparkVersion.fromVersionString(\"2.3.1\");\n  public static final SparkVersion SPARK_2_4_0 = SparkVersion.fromVersionString(\"2.4.0\");\n  public static final SparkVersion SPARK_3_0_0 = SparkVersion.fromVersionString(\"3.0.0\");\n\n  public static final SparkVersion MIN_SUPPORTED_VERSION =  SPARK_1_6_0;\n  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_3_0_0;\n\n  private int version;\n  private int majorVersion;\n  private int minorVersion;\n  private int patchVersion;\n  private String versionString;\n\n  SparkVersion(String versionString) {\n    this.versionString = versionString;\n\n    try {\n      int pos = versionString.indexOf('-');\n\n      String numberPart = versionString;\n      if (pos > 0) {\n        numberPart = versionString.substring(0, pos);\n      }\n\n      String versions[] = numberPart.split(\"\\\\.\");\n      this.majorVersion = Integer.parseInt(versions[0]);\n      this.minorVersion = Integer.parseInt(versions[1]);\n      this.patchVersion = Integer.parseInt(versions[2]);\n      // version is always 5 digits. (e.g. 2.0.0 -> 20000, 1.6.2 -> 10602)\n      version = Integer.parseInt(String.format(\"%d%02d%02d\", majorVersion, minorVersion, patchVersion));\n    } catch (Exception e) {\n      logger.error(\"Can not recognize Spark version \" + versionString +\n          \". Assume it's a future release\", e);\n\n      // assume it is future release\n      version = 99999;\n    }\n  }\n\n  public int toNumber() {\n    return version;\n  }\n\n  public String toString() {\n    return versionString;\n  }\n\n  public boolean isUnsupportedVersion() {\n    return olderThan(MIN_SUPPORTED_VERSION) || newerThanEquals(UNSUPPORTED_FUTURE_VERSION);\n  }\n\n  public static SparkVersion fromVersionString(String versionString) {\n    return new SparkVersion(versionString);\n  }\n\n  public boolean isSpark2() {\n    return this.newerThanEquals(SPARK_2_0_0);\n  }\n\n  public boolean isSecretSocketSupported() {\n    return this.newerThanEquals(SparkVersion.SPARK_2_4_0) ||\n            this.newerThanEqualsPatchVersion(SPARK_2_3_1) ||\n            this.newerThanEqualsPatchVersion(SparkVersion.fromVersionString(\"2.2.2\")) ||\n            this.newerThanEqualsPatchVersion(SparkVersion.fromVersionString(\"2.1.3\"));\n  }\n\n  public boolean equals(Object versionToCompare) {\n    return version == ((SparkVersion) versionToCompare).version;\n  }\n\n  public boolean newerThan(SparkVersion versionToCompare) {\n    return version > versionToCompare.version;\n  }\n\n  public boolean newerThanEquals(SparkVersion versionToCompare) {\n    return version >= versionToCompare.version;\n  }\n\n  public boolean newerThanEqualsPatchVersion(SparkVersion versionToCompare) {\n    return majorVersion == versionToCompare.majorVersion &&\n            minorVersion == versionToCompare.minorVersion &&\n            patchVersion >= versionToCompare.patchVersion;\n  }\n\n  public boolean olderThan(SparkVersion versionToCompare) {\n    return version < versionToCompare.version;\n  }\n\n  public boolean olderThanEquals(SparkVersion versionToCompare) {\n    return version <= versionToCompare.version;\n  }\n}<fim_middle>// class below is data class\n"}