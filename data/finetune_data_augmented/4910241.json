{"text": "<fim_prefix>        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Finished beforeIteration()\");\n        }\n    }\n    @Override\n    protected Writer getWriter(ExecutionContext context,\n        SynchronizedDescriptiveStatistics writeStats, int idx) throws RepositoryException {\n        int numUsers = (context.getIncrement() * NUM_USERS) / LOADERS;\n        return new ActivityWriter((context.getIncrement() + \"-\" + idx), numUsers, idx * numUsers,\n            writeStats);\n    }\n    /**\n     * The users are created with the nomenclature {@code [a-z]User<INCREMENT>_<ID>}\n     *\n     * <p>\n     *\n     * Creates a node hierarchy similar to the node structure below.\n     * Here for example aUser0_1 and cUser0_5 are 2 users and aUser0_1 has a relationship structure to user cUser0_5.\n     *\n     * <pre>\n     * {@code\n     * /home\n     *  /a\n     *      /aUser0_1\n     *          /Relationships\n     *              /cUser0_5\n     *                  jcr:primaryType : <oak:Unstructured|descendantType|nt:unstructured>\n     *                  jcr:created : <DATE>\n     *                  sourceId : aUser0_1\n     *                  targetId : cUser0_5\n     *          /Activities\n     *             /2015\n     *                 /06\n     *                     /03\n     *                         /@1\n     *                             /<UUID>\n     *                                 jcr:primaryType : <oak:Unstructured|descendantType|nt:unstructured>\n     *                                 title : <sourceId targetId>\n     *                                 action : <act*>\n     *                                 sourceId : aUser0_1\n     *                                 /source\n     *                                     sourceId : aUser0_1\n     *                                 /object\n     *                                     objectId: <obj*>\n     *                                 /target\n     *                                     targetId: cUser0_5\n     * }\n     * </pre>\n     * </p>\n     */\n    class ActivityWriter extends Writer {\n        private int startIdx;\n        ActivityWriter(String id, int numUsers, int startIdx,\n            SynchronizedDescriptiveStatistics writeStats) throws RepositoryException {\n            super(id, numUsers, writeStats);\n            this.startIdx = startIdx;\n        }\n        @Override\n        public void run() {\n            try {\n                int idx = startIdx;\n                while (idx < (maxAssets + startIdx)) {\n                    session.refresh(false);\n                    // Current User\n                    int userIdx = (Integer) context.getMap().get(\"PREV_ITER_USERS\") + idx;\n                    Authorizable user = users.get(userIdx);\n                    Node activitiesParentNode = JcrUtils\n                        .getOrAddNode(session.getNode(user.getPath()), ACTIVITIES,\n                            NodeTypeConstants.NT_OAK_UNSTRUCTURED);\n                    Node relationshipsParentNode = JcrUtils\n                        .getOrAddNode(session.getNode(user.getPath()), RELATIONSHIPS,\n                            NodeTypeConstants.NT_OAK_UNSTRUCTURED);\n                    createRelationships(user, relationshipsParentNode, activitiesParentNode);\n                    createActivities(user, activitiesParentNode);\n                    if ((counter + 1) % 100 == 0) {\n                        LOG.info(\"Thread \" + id + \" - Processed Users : \" + (counter + 1));\n                    }\n                    idx++;\n                    counter++;\n                }\n            } catch (Exception e) {\n                LOG.error(\"Exception in load creation \", e);\n            }\n        }\n        /**\n         * Create activities for a use. The number of activities is governed by\n         * {# NODE_LEVELS.get(3)}\n         *\n         * @param user                 the user for who activities are to be created\n         * @param activitiesParentNode the parent node for all the user activities\n         * @throws RepositoryException\n         */\n        private void createActivities(Authorizable user, Node activitiesParentNode)\n            throws RepositoryException {\n            for (int i = 0; i < NUM_ACTIVITIES; i++) {\n                timer.start();\n                createActivity(activitiesParentNode, user.getID() + \" \" + i,\n                    actions.get(random.nextInt(actions.size())), user.getID(),\n                    objects.get(random.nextInt(objects.size())),\n                    objects.get(random.nextInt(objects.size())));\n                session.save();\n                // Record time taken for creation\n                timer.stop();\n            }\n        }\n        private void createActivity(Node activitiesParentNode, String title,\n                                    String action, String source, String object, String target) throws RepositoryException {\n            Node activityNode = getActivityParentNode(activitiesParentNode);\n            Map<String, String> activityMap = Maps.newHashMap();\n            activityMap.put(TITLE_PROP, title);\n            activityMap.put(ACTION, action);\n            activityMap.put(SOURCE_ID, source);\n            activityMap.put(OBJECT_ID, object);\n            activityMap.put(TARGET_ID, target);\n            createActivityNode(activityNode, activityMap);\n        }\n        /**\n         * Creates the activity node structure.\n         */\n        private void createActivityNode(Node activityParent, Map<String, String> props)\n            throws RepositoryException {\n            activityParent.setProperty(TITLE_PROP, props.get(TITLE_PROP));\n            activityParent.setProperty(CREATED, generateDate());\n            activityParent.setProperty(ACTION, props.get(ACTION));\n            activityParent.setProperty(SOURCE_ID, props.get(SOURCE_ID));\n            Node sourceNode = JcrUtils\n                .getOrAddNode(activityParent, SOURCE, NodeTypeConstants.NT_OAK_UNSTRUCTURED);\n            sourceNode.setProperty(SOURCE_ID, props.get(SOURCE_ID));\n            Node objNode = JcrUtils\n                .getOrAddNode(activityParent, OBJECT, NodeTypeConstants.NT_OAK_UNSTRUCTURED);\n            objNode.setProperty(OBJECT_ID, props.get(OBJECT_ID));\n            Node targetNode = JcrUtils\n                .getOrAddNode(activityParent, TARGET, NodeTypeConstants.NT_OAK_UNSTRUCTURED);\n            targetNode.setProperty(TARGET_ID, props.get(TARGET_ID));\n            LOG.debug(\n                \"Activity created for User : \" + props.get(SOURCE_ID) + \" \" + activityParent.getPath());\n        }\n        /**\n         * Creates bucketed parent node for the activity.\n         */\n        private Node getActivityParentNode(Node activitiesParentNode) throws RepositoryException {\n            Calendar c = Calendar.getInstance();\n            Node yearNode = JcrUtils\n                .getOrAddNode(activitiesParentNode, String.valueOf(c.get(Calendar.YEAR)),\n                    NodeTypeConstants.NT_OAK_UNSTRUCTURED);\n            String month = String.valueOf(c.get(Calendar.MONTH) + 1);\n            month = month.length() > 1 ? month : \"0\" + month;\n            Node monthNode =\n                JcrUtils.getOrAddNode(yearNode, month, NodeTypeConstants.NT_OAK_UNSTRUCTURED);\n            String day = String.valueOf(c.get(Calendar.DATE));\n            day = day.length() > 1 ? day : \"0\" + day;\n            Node dayNode =\n                JcrUtils.getOrAddNode(monthNode, day, NodeTypeConstants.NT_OAK_UNSTRUCTURED);\n            // find bucket\n            Node parentNode = dayNode;\n            NodeIterator iterator = dayNode.getNodes();\n            long size = iterator.getSize();\n            if (size < 0 || size > BUCKET_SIZE) {\n                size = 0;\n                int maxNum = -1;\n                while (iterator.hasNext()) {\n                    size++;\n                    Node child = iterator.nextNode();\n                    String name = child.getName();\n                    if (name.charAt(0) == '@') {\n                        int buckNum = Integer.parseInt(name.substring(1));\n                        if (buckNum > maxNum) {\n                            maxNum = buckNum;\n                            parentNode = child;\n                        }\n                    }\n                }\n                if (size > BUCKET_SIZE) {\n                    // check if last bucket has enough space\n                    if (maxNum < 0 || numChildNodes(parentNode) >= BUCKET_SIZE) {\n                        parentNode = dayNode.addNode(\"@\" + String.valueOf(maxNum + 1),\n                            NodeTypeConstants.NT_OAK_UNSTRUCTURED);\n                    }\n                }\n            }\n            // create activity node\n            return JcrUtils\n                .getOrCreateUniqueByPath(parentNode, UUID.randomUUID().toString(), getType(0));\n        }\n<fim_suffix>        private long numChildNodes(Node node) throws RepositoryException {\n            NodeIterator iterator = node.getNodes();\n            if (iterator.getSize() >= 0) {\n                return iterator.getSize();\n            } else {\n                int num = 0;\n                while (iterator.hasNext() && num < BUCKET_SIZE) {\n                    iterator.nextNode();\n                    num++;\n                }\n                return num;\n            }\n        }<fim_middle>// function below has no smell\n"}