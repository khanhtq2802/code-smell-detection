{"text": "<fim_prefix>/*\n * Copyright (c) 2018, 2019, Oracle and/or its affiliates.\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this list of\n * conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other materials provided\n * with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n * endorse or promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.oracle.truffle.llvm.runtime.pointer;\n\nimport com.oracle.truffle.api.TruffleLanguage.ContextReference;\nimport com.oracle.truffle.api.dsl.Cached;\nimport com.oracle.truffle.api.dsl.CachedContext;\nimport com.oracle.truffle.api.dsl.ImportStatic;\nimport com.oracle.truffle.api.dsl.Specialization;\nimport com.oracle.truffle.api.interop.ArityException;\nimport com.oracle.truffle.api.interop.InteropLibrary;\nimport com.oracle.truffle.api.interop.UnsupportedMessageException;\nimport com.oracle.truffle.api.interop.UnsupportedTypeException;\nimport com.oracle.truffle.api.library.CachedLibrary;\nimport com.oracle.truffle.api.library.ExportLibrary;\nimport com.oracle.truffle.api.library.ExportMessage;\nimport com.oracle.truffle.llvm.runtime.LLVMContext;\nimport com.oracle.truffle.llvm.runtime.LLVMFunctionDescriptor;\nimport com.oracle.truffle.llvm.runtime.LLVMLanguage;\nimport com.oracle.truffle.llvm.runtime.library.LLVMNativeLibrary;\n\n<fim_suffix>@ExportLibrary(value = LLVMNativeLibrary.class, receiverType = LLVMPointerImpl.class)\n@ExportLibrary(value = InteropLibrary.class, receiverType = LLVMPointerImpl.class)\nabstract class NativePointerLibraries extends CommonPointerLibraries {\n\n    @ExportMessage\n    static boolean isNull(LLVMPointerImpl receiver) {\n        return receiver.isNull();\n    }\n\n    @ExportMessage\n    @ImportStatic(LLVMLanguage.class)\n    static class IsExecutable {\n\n        @Specialization\n        static boolean doNative(LLVMPointerImpl receiver,\n                        @CachedContext(LLVMLanguage.class) LLVMContext context) {\n            return context.getFunctionDescriptor(receiver) != null;\n        }\n    }\n\n    @ExportMessage\n    @ImportStatic(LLVMLanguage.class)\n    static class Execute {\n\n        @SuppressWarnings(\"unused\")\n        @Specialization(limit = \"5\", guards = {\"value.asNative() == cachedAddress\", \"cachedDescriptor != null\"})\n        static Object doNativeCached(@SuppressWarnings(\"unused\") LLVMPointerImpl value, Object[] args,\n                        @Cached(\"value.asNative()\") @SuppressWarnings(\"unused\") long cachedAddress,\n                        @Cached(\"getLLVMContextReference()\") ContextReference<LLVMContext> ctxRef,\n                        @Cached(\"getDescriptor(ctxRef, value)\") LLVMFunctionDescriptor cachedDescriptor,\n                        @CachedLibrary(\"cachedDescriptor\") InteropLibrary interop) throws UnsupportedTypeException, ArityException, UnsupportedMessageException {\n            return interop.execute(cachedDescriptor, args);\n        }\n\n        @Specialization(replaces = \"doNativeCached\")\n        static Object doNative(LLVMPointerImpl value, Object[] args,\n                        @CachedContext(LLVMLanguage.class) LLVMContext context,\n                        @CachedLibrary(limit = \"5\") InteropLibrary interop) throws UnsupportedTypeException, ArityException, UnsupportedMessageException {\n            LLVMFunctionDescriptor descriptor = context.getFunctionDescriptor(value);\n            if (descriptor != null) {\n                return interop.execute(descriptor, args);\n            } else {\n                throw UnsupportedMessageException.create();\n            }\n        }\n\n        static LLVMFunctionDescriptor getDescriptor(ContextReference<LLVMContext> ctxRef, LLVMNativePointer value) {\n            return ctxRef.get().getFunctionDescriptor(value);\n        }\n    }\n\n    @ExportMessage(library = LLVMNativeLibrary.class)\n    @ExportMessage(library = InteropLibrary.class)\n    @SuppressWarnings(\"unused\")\n    static boolean isPointer(LLVMPointerImpl receiver) {\n        return true;\n    }\n\n    @ExportMessage(library = LLVMNativeLibrary.class)\n    @ExportMessage(library = InteropLibrary.class)\n    static long asPointer(LLVMPointerImpl receiver) {\n        return receiver.asNative();\n    }\n\n    @ExportMessage\n    static LLVMNativePointer toNativePointer(LLVMPointerImpl receiver) {\n        return receiver;\n    }\n}<fim_middle>// class below has no smell\n"}