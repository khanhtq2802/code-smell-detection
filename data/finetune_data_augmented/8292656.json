{"text": "<fim_prefix>/****************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one   *\n * or more contributor license agreements.  See the NOTICE file *\n * distributed with this work for additional information        *\n * regarding copyright ownership.  The ASF licenses this file   *\n * to you under the Apache License, Version 2.0 (the            *\n * \"License\"); you may not use this file except in compliance   *\n * with the License.  You may obtain a copy of the License at   *\n *                                                              *\n *   http://www.apache.org/licenses/LICENSE-2.0                 *\n *                                                              *\n * Unless required by applicable law or agreed to in writing,   *\n * software distributed under the License is distributed on an  *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n * KIND, either express or implied.  See the License for the    *\n * specific language governing permissions and limitations      *\n * under the License.                                           *\n ****************************************************************/\n\npackage org.apache.james.mailbox.model.search;\n\nimport java.util.Optional;\n\nimport org.apache.james.core.User;\nimport org.apache.james.mailbox.MailboxSession;\nimport org.apache.james.mailbox.model.MailboxConstants;\nimport org.apache.james.mailbox.model.MailboxPath;\n\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.common.base.MoreObjects;\nimport com.google.common.base.Preconditions;\n\n\n/**\n * Expresses select criteria for mailboxes.\n */\npublic final class MailboxQuery {\n\n    public static Builder builder() {\n        return new Builder();\n    }\n\n    public static Builder privateMailboxesBuilder(MailboxSession session) {\n        return builder()\n            .namespace(MailboxConstants.USER_NAMESPACE)\n            .username(session.getUser().asString())\n            .matchesAllMailboxNames();\n    }\n\n    public static class Builder {\n        private static final Wildcard DEFAULT_WILDCARD = Wildcard.INSTANCE;\n\n        Optional<String> username;\n        Optional<String> namespace;\n        Optional<MailboxNameExpression> mailboxNameExpression;\n        \n        private Builder() {\n            this.namespace = Optional.empty();\n            this.username = Optional.empty();\n            this.mailboxNameExpression = Optional.empty();\n        }\n        \n        public Builder userAndNamespaceFrom(MailboxPath base) {\n            Preconditions.checkState(!this.namespace.isPresent());\n            Preconditions.checkState(!this.username.isPresent());\n\n            this.namespace = Optional.ofNullable(base.getNamespace());\n            this.username = Optional.ofNullable(base.getUser());\n            return this;\n        }\n\n<fim_suffix>        public Builder username(String username) {\n            Preconditions.checkState(!this.username.isPresent());\n\n            this.username = Optional.of(username);\n            return this;\n        }\n\n        public Builder namespace(String namespace) {\n            Preconditions.checkState(!this.namespace.isPresent());\n\n            this.namespace = Optional.of(namespace);\n            return this;\n        }\n\n        public Builder privateNamespace() {\n            Preconditions.checkState(!this.namespace.isPresent());\n\n            this.namespace = Optional.of(MailboxConstants.USER_NAMESPACE);\n            return this;\n        }\n        \n        public Builder expression(MailboxNameExpression expression) {\n            this.mailboxNameExpression = Optional.of(expression);\n            return this;\n        }\n        \n        public Builder matchesAllMailboxNames() {\n            this.mailboxNameExpression = Optional.of(Wildcard.INSTANCE);\n            return this;\n        }\n        \n        public MailboxQuery build() {\n            return new MailboxQuery(namespace, username, mailboxNameExpression.orElse(DEFAULT_WILDCARD));\n        }\n    }\n\n    private final Optional<String> namespace;\n    private final Optional<String> user;\n    private final MailboxNameExpression mailboxNameExpression;\n\n    /**\n     * Constructs an expression determining a set of mailbox names.\n     * \n     * @param base\n     *            base reference name, not null\n     * @param expression\n     *            mailbox match expression, not null\n     * @param pathDelimiter\n     *            path delimiter to use\n     */\n    @VisibleForTesting MailboxQuery(Optional<String> namespace, Optional<String> user, MailboxNameExpression mailboxNameExpression) {\n        this.namespace = namespace;\n        this.user = user;\n        this.mailboxNameExpression = mailboxNameExpression;\n    }\n\n    public Optional<String> getNamespace() {\n        return namespace;\n    }\n\n    public Optional<String> getUser() {\n        return user;\n    }\n\n    public MailboxNameExpression getMailboxNameExpression() {\n        return mailboxNameExpression;\n    }\n\n    public boolean isPrivateMailboxes(MailboxSession session) {\n        User sessionUser = session.getUser();\n        return namespace.map(MailboxConstants.USER_NAMESPACE::equals).orElse(false)\n            && user.map(User::fromUsername).map(sessionUser::equals).orElse(false);\n    }\n\n    @VisibleForTesting\n    boolean belongsToRequestedNamespaceAndUser(MailboxPath mailboxPath) {\n        boolean belongsToRequestedNamespace = namespace\n            .map(value -> value.equals(mailboxPath.getNamespace()))\n            .orElse(true);\n        boolean belongsToRequestedUser = user\n            .map(value -> value.equals(mailboxPath.getUser()))\n            .orElse(true);\n\n        return belongsToRequestedNamespace && belongsToRequestedUser;\n    }\n\n    public boolean isExpressionMatch(String name) {\n        return mailboxNameExpression.isExpressionMatch(name);\n    }\n\n    public boolean isPathMatch(MailboxPath mailboxPath) {\n        return belongsToRequestedNamespaceAndUser(mailboxPath)\n            && isExpressionMatch(mailboxPath.getName());\n    }\n\n    public String toString() {\n        return MoreObjects.toStringHelper(this)\n            .add(\"namespace\", namespace)\n            .add(\"user\", user)\n            .add(\"mailboxNameExpression\", mailboxNameExpression)\n            .toString();\n    }\n\n}<fim_middle>// function below has no smell\n"}