{"text": "<fim_prefix>/*\n * Copyright (c) 2016 Goldman Sachs.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v. 1.0 which accompany this distribution.\n * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n * http://www.eclipse.org/org/documents/edl-v10.php.\n */\n\npackage org.eclipse.collections.impl.lazy.parallel.set;\n\nimport java.util.concurrent.ExecutorService;\n\nimport org.eclipse.collections.api.LazyIterable;\nimport org.eclipse.collections.api.annotation.Beta;\nimport org.eclipse.collections.api.block.predicate.Predicate;\nimport org.eclipse.collections.api.block.procedure.Procedure;\nimport org.eclipse.collections.impl.block.factory.Predicates;\nimport org.eclipse.collections.impl.block.procedure.IfProcedure;\n\n@Beta\nclass ParallelSelectUnsortedSetIterable<T> extends AbstractParallelUnsortedSetIterable<T, UnsortedSetBatch<T>>\n{\n    private final AbstractParallelUnsortedSetIterable<T, ? extends UnsortedSetBatch<T>> delegate;\n    private final Predicate<? super T> predicate;\n\n    ParallelSelectUnsortedSetIterable(AbstractParallelUnsortedSetIterable<T, ? extends UnsortedSetBatch<T>> delegate, Predicate<? super T> predicate)\n    {\n        this.delegate = delegate;\n        this.predicate = predicate;\n    }\n\n    @Override\n    public ExecutorService getExecutorService()\n    {\n        return this.delegate.getExecutorService();\n    }\n\n    @Override\n    public int getBatchSize()\n    {\n        return this.delegate.getBatchSize();\n    }\n\n    @Override\n    public LazyIterable<UnsortedSetBatch<T>> split()\n    {\n        return this.delegate.split().collect(eachBatch -> eachBatch.select(this.predicate));\n    }\n\n    @Override\n    public void forEach(Procedure<? super T> procedure)\n    {\n        this.delegate.forEach(new IfProcedure<>(this.predicate, procedure));\n    }\n\n    @Override\n    public boolean anySatisfy(Predicate<? super T> predicate)\n    {\n        return this.delegate.anySatisfy(Predicates.and(this.predicate, predicate));\n    }\n\n<fim_suffix>    @Override\n    public boolean allSatisfy(Predicate<? super T> predicate)\n    {\n        return this.delegate.allSatisfy(new SelectAllSatisfyPredicate<>(this.predicate, predicate));\n    }\n\n    @Override\n    public T detect(Predicate<? super T> predicate)\n    {\n        return this.delegate.detect(Predicates.and(this.predicate, predicate));\n    }\n\n    @Override\n    public Object[] toArray()\n    {\n        // TODO: Implement in parallel\n        return this.delegate.toList().select(this.predicate).toArray();\n    }\n\n    @Override\n    public <E> E[] toArray(E[] array)\n    {\n        return this.delegate.toList().select(this.predicate).toArray(array);\n    }\n\n    private static final class SelectAllSatisfyPredicate<T> implements Predicate<T>\n    {\n        private final Predicate<? super T> left;\n        private final Predicate<? super T> right;\n\n        private SelectAllSatisfyPredicate(Predicate<? super T> left, Predicate<? super T> right)\n        {\n            this.left = left;\n            this.right = right;\n        }\n\n        @Override\n        public boolean accept(T each)\n        {\n            boolean leftResult = this.left.accept(each);\n            return !leftResult || this.right.accept(each);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}