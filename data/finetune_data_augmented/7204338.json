{"text": "<fim_prefix>/**\n * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.\n */\npackage com.oracle.bmc.containerengine.model;\n\n/**\n * The properties that define a node.\n * <br/>\n * Note: Objects should always be created or deserialized using the {@link Builder}. This model distinguishes fields\n * that are {@code null} because they are unset from fields that are explicitly set to {@code null}. This is done in\n * the setter methods of the {@link Builder}, which maintain a set of all explicitly set fields called\n * {@link #__explicitlySet__}. The {@link #hashCode()} and {@link #equals(Object)} methods are implemented to take\n * {@link #__explicitlySet__} into account. The constructor, on the other hand, does not set {@link #__explicitlySet__}\n * (since the constructor cannot distinguish explicit {@code null} from unset {@code null}).\n **/\n@javax.annotation.Generated(value = \"OracleSDKGenerator\", comments = \"API Version: 20180222\")\n@lombok.AllArgsConstructor(onConstructor = @__({@Deprecated}))\n@lombok.Value\n@com.fasterxml.jackson.databind.annotation.JsonDeserialize(builder = Node.Builder.class)\n@com.fasterxml.jackson.annotation.JsonFilter(com.oracle.bmc.http.internal.ExplicitlySetFilter.NAME)\npublic class Node {\n    @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(withPrefix = \"\")\n    @lombok.experimental.Accessors(fluent = true)\n    public static class Builder {\n        @com.fasterxml.jackson.annotation.JsonProperty(\"id\")\n        private String id;\n\n        public Builder id(String id) {\n            this.id = id;\n            this.__explicitlySet__.add(\"id\");\n            return this;\n        }\n\n        @com.fasterxml.jackson.annotation.JsonProperty(\"name\")\n        private String name;\n\n        public Builder name(String name) {\n            this.name = name;\n            this.__explicitlySet__.add(\"name\");\n            return this;\n        }\n\n        @com.fasterxml.jackson.annotation.JsonProperty(\"availabilityDomain\")\n        private String availabilityDomain;\n\n        public Builder availabilityDomain(String availabilityDomain) {\n            this.availabilityDomain = availabilityDomain;\n            this.__explicitlySet__.add(\"availabilityDomain\");\n            return this;\n        }\n\n        @com.fasterxml.jackson.annotation.JsonProperty(\"subnetId\")\n        private String subnetId;\n\n        public Builder subnetId(String subnetId) {\n            this.subnetId = subnetId;\n            this.__explicitlySet__.add(\"subnetId\");\n            return this;\n        }\n\n        @com.fasterxml.jackson.annotation.JsonProperty(\"nodePoolId\")\n        private String nodePoolId;\n\n<fim_suffix>        public Builder nodePoolId(String nodePoolId) {\n            this.nodePoolId = nodePoolId;\n            this.__explicitlySet__.add(\"nodePoolId\");\n            return this;\n        }\n\n        @com.fasterxml.jackson.annotation.JsonProperty(\"publicIp\")\n        private String publicIp;\n\n        public Builder publicIp(String publicIp) {\n            this.publicIp = publicIp;\n            this.__explicitlySet__.add(\"publicIp\");\n            return this;\n        }\n\n        @com.fasterxml.jackson.annotation.JsonProperty(\"nodeError\")\n        private NodeError nodeError;\n\n        public Builder nodeError(NodeError nodeError) {\n            this.nodeError = nodeError;\n            this.__explicitlySet__.add(\"nodeError\");\n            return this;\n        }\n\n        @com.fasterxml.jackson.annotation.JsonProperty(\"lifecycleState\")\n        private LifecycleState lifecycleState;\n\n        public Builder lifecycleState(LifecycleState lifecycleState) {\n            this.lifecycleState = lifecycleState;\n            this.__explicitlySet__.add(\"lifecycleState\");\n            return this;\n        }\n\n        @com.fasterxml.jackson.annotation.JsonProperty(\"lifecycleDetails\")\n        private String lifecycleDetails;\n\n        public Builder lifecycleDetails(String lifecycleDetails) {\n            this.lifecycleDetails = lifecycleDetails;\n            this.__explicitlySet__.add(\"lifecycleDetails\");\n            return this;\n        }\n\n        @com.fasterxml.jackson.annotation.JsonIgnore\n        private final java.util.Set<String> __explicitlySet__ = new java.util.HashSet<String>();\n\n        public Node build() {\n            Node __instance__ =\n                    new Node(\n                            id,\n                            name,\n                            availabilityDomain,\n                            subnetId,\n                            nodePoolId,\n                            publicIp,\n                            nodeError,\n                            lifecycleState,\n                            lifecycleDetails);\n            __instance__.__explicitlySet__.addAll(__explicitlySet__);\n            return __instance__;\n        }\n\n        @com.fasterxml.jackson.annotation.JsonIgnore\n        public Builder copy(Node o) {\n            Builder copiedBuilder =\n                    id(o.getId())\n                            .name(o.getName())\n                            .availabilityDomain(o.getAvailabilityDomain())\n                            .subnetId(o.getSubnetId())\n                            .nodePoolId(o.getNodePoolId())\n                            .publicIp(o.getPublicIp())\n                            .nodeError(o.getNodeError())\n                            .lifecycleState(o.getLifecycleState())\n                            .lifecycleDetails(o.getLifecycleDetails());\n\n            copiedBuilder.__explicitlySet__.retainAll(o.__explicitlySet__);\n            return copiedBuilder;\n        }\n    }\n\n    /**\n     * Create a new builder.\n     */\n    public static Builder builder() {\n        return new Builder();\n    }\n\n    /**\n     * The OCID of the compute instance backing this node.\n     **/\n    @com.fasterxml.jackson.annotation.JsonProperty(\"id\")\n    String id;\n\n    /**\n     * The name of the node.\n     **/\n    @com.fasterxml.jackson.annotation.JsonProperty(\"name\")\n    String name;\n\n    /**\n     * The name of the availability domain in which this node is placed.\n     **/\n    @com.fasterxml.jackson.annotation.JsonProperty(\"availabilityDomain\")\n    String availabilityDomain;\n\n    /**\n     * The OCID of the subnet in which this node is placed.\n     **/\n    @com.fasterxml.jackson.annotation.JsonProperty(\"subnetId\")\n    String subnetId;\n\n    /**\n     * The OCID of the node pool to which this node belongs.\n     **/\n    @com.fasterxml.jackson.annotation.JsonProperty(\"nodePoolId\")\n    String nodePoolId;\n\n    /**\n     * The public IP address of this node.\n     **/\n    @com.fasterxml.jackson.annotation.JsonProperty(\"publicIp\")\n    String publicIp;\n\n    /**\n     * An error that may be associated with the node.\n     **/\n    @com.fasterxml.jackson.annotation.JsonProperty(\"nodeError\")\n    NodeError nodeError;\n    /**\n     * The state of the node.\n     **/\n    @lombok.extern.slf4j.Slf4j\n    public enum LifecycleState {\n        Creating(\"CREATING\"),\n        Active(\"ACTIVE\"),\n        Updating(\"UPDATING\"),\n        Deleting(\"DELETING\"),\n        Deleted(\"DELETED\"),\n        Failing(\"FAILING\"),\n        Inactive(\"INACTIVE\"),\n\n        /**\n         * This value is used if a service returns a value for this enum that is not recognized by this\n         * version of the SDK.\n         */\n        UnknownEnumValue(null);\n\n        private final String value;\n        private static java.util.Map<String, LifecycleState> map;\n\n        static {\n            map = new java.util.HashMap<>();\n            for (LifecycleState v : LifecycleState.values()) {\n                if (v != UnknownEnumValue) {\n                    map.put(v.getValue(), v);\n                }\n            }\n        }\n\n        LifecycleState(String value) {\n            this.value = value;\n        }\n\n        @com.fasterxml.jackson.annotation.JsonValue\n        public String getValue() {\n            return value;\n        }\n\n        @com.fasterxml.jackson.annotation.JsonCreator\n        public static LifecycleState create(String key) {\n            if (map.containsKey(key)) {\n                return map.get(key);\n            }\n            LOG.warn(\n                    \"Received unknown value '{}' for enum 'LifecycleState', returning UnknownEnumValue\",\n                    key);\n            return UnknownEnumValue;\n        }\n    };\n    /**\n     * The state of the node.\n     **/\n    @com.fasterxml.jackson.annotation.JsonProperty(\"lifecycleState\")\n    LifecycleState lifecycleState;\n\n    /**\n     * Details about the state of the node.\n     **/\n    @com.fasterxml.jackson.annotation.JsonProperty(\"lifecycleDetails\")\n    String lifecycleDetails;\n\n    @com.fasterxml.jackson.annotation.JsonIgnore\n    private final java.util.Set<String> __explicitlySet__ = new java.util.HashSet<String>();\n}<fim_middle>// function below has no smell\n"}