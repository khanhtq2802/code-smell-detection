{"text": "<fim_prefix>/*\n * Copyright (c) 2017, 2017, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.svm.core.graal.amd64;\n\nimport org.graalvm.compiler.asm.amd64.AMD64Address;\nimport org.graalvm.compiler.asm.amd64.AMD64MacroAssembler;\nimport org.graalvm.compiler.lir.LIRInstructionClass;\nimport org.graalvm.compiler.lir.Opcode;\nimport org.graalvm.compiler.lir.amd64.AMD64LIRInstruction;\nimport org.graalvm.compiler.lir.asm.CompilationResultBuilder;\n\nimport com.oracle.svm.core.SubstrateOptions;\nimport com.oracle.svm.core.graal.meta.SubstrateRegisterConfig;\nimport com.oracle.svm.core.nodes.SafepointCheckNode;\nimport com.oracle.svm.core.thread.Safepoint;\n\n/**\n * Compact instruction for {@link SafepointCheckNode}.\n */\n<fim_suffix>@Opcode\npublic class AMD64DecrementingSafepointCheckOp extends AMD64LIRInstruction {\n\n    public static final LIRInstructionClass<AMD64DecrementingSafepointCheckOp> TYPE = LIRInstructionClass.create(AMD64DecrementingSafepointCheckOp.class);\n\n    protected AMD64DecrementingSafepointCheckOp() {\n        super(TYPE);\n    }\n\n    @Override\n    public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler masm) {\n        assert SubstrateOptions.MultiThreaded.getValue();\n        SubstrateRegisterConfig threadRegister = (SubstrateRegisterConfig) crb.codeCache.getRegisterConfig();\n        masm.decrementl(new AMD64Address(threadRegister.getThreadRegister(), Math.toIntExact(Safepoint.getThreadLocalSafepointRequestedOffset())), 1);\n    }\n}<fim_middle>// class below has no smell\n"}