{"text": "<fim_prefix>/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aop.support;\n\nimport java.io.Serializable;\n\nimport org.aopalliance.aop.Advice;\n\nimport org.springframework.aop.Pointcut;\nimport org.springframework.aop.PointcutAdvisor;\nimport org.springframework.core.Ordered;\nimport org.springframework.util.Assert;\n\n/**\n * Convenient base class for Advisors that are also static pointcuts.\n * Serializable if Advice and subclass are.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n */\n<fim_suffix>@SuppressWarnings(\"serial\")\npublic abstract class StaticMethodMatcherPointcutAdvisor extends StaticMethodMatcherPointcut\n\t\timplements PointcutAdvisor, Ordered, Serializable {\n\n\tprivate Advice advice = EMPTY_ADVICE;\n\n\tprivate int order = Ordered.LOWEST_PRECEDENCE;\n\n\n\t/**\n\t * Create a new StaticMethodMatcherPointcutAdvisor,\n\t * expecting bean-style configuration.\n\t * @see #setAdvice\n\t */\n\tpublic StaticMethodMatcherPointcutAdvisor() {\n\t}\n\n\t/**\n\t * Create a new StaticMethodMatcherPointcutAdvisor for the given advice.\n\t * @param advice the Advice to use\n\t */\n\tpublic StaticMethodMatcherPointcutAdvisor(Advice advice) {\n\t\tAssert.notNull(advice, \"Advice must not be null\");\n\t\tthis.advice = advice;\n\t}\n\n\n\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}\n\n\t@Override\n\tpublic int getOrder() {\n\t\treturn this.order;\n\t}\n\n\tpublic void setAdvice(Advice advice) {\n\t\tthis.advice = advice;\n\t}\n\n\t@Override\n\tpublic Advice getAdvice() {\n\t\treturn this.advice;\n\t}\n\n\t@Override\n\tpublic boolean isPerInstance() {\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic Pointcut getPointcut() {\n\t\treturn this;\n\t}\n\n}<fim_middle>// class below is data class\n"}