{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.api.java.summarize.aggregation;\n\nimport org.apache.flink.annotation.Internal;\n\n/**\n * Aggregator that can handle Short types.\n */\n@Internal\npublic class ShortSummaryAggregator extends NumericSummaryAggregator<Short> {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\t/**\n\t * Like Math.min() except for shorts.\n\t */\n\tpublic static Short min(Short a, Short b) {\n\t\treturn a <= b ? a : b;\n\t}\n\n\t/**\n\t * Like Math.max() except for shorts.\n\t */\n\tpublic static Short max(Short a, Short b) {\n\t\treturn a >= b ? a : b;\n\t}\n\n\t// Nested classes are only \"public static\" for Kryo serialization, otherwise they'd be private\n\n\t/**\n\t * Aggregator for min operation.\n\t */\n<fim_suffix>\tpublic static class MinShortAggregator implements Aggregator<Short, Short> {\n\n\t\tprivate short min = Short.MAX_VALUE;\n\n\t\t@Override\n\t\tpublic void aggregate(Short value) {\n\t\t\tmin = min(min, value);\n\t\t}\n\n\t\t@Override\n\t\tpublic void combine(Aggregator<Short, Short> other) {\n\t\t\tmin = min(min, ((MinShortAggregator) other).min);\n\t\t}\n\n\t\t@Override\n\t\tpublic Short result() {\n\t\t\treturn min;\n\t\t}\n\t}\n\n\t/**\n\t * Aggregator for max operation.\n\t */\n\tpublic static class MaxShortAggregator implements Aggregator<Short, Short> {\n\n\t\tprivate short max = Short.MIN_VALUE;\n\n\t\t@Override\n\t\tpublic void aggregate(Short value) {\n\t\t\tmax = max(max, value);\n\t\t}\n\n\t\t@Override\n\t\tpublic void combine(Aggregator<Short, Short> other) {\n\t\t\tmax = max(max, ((MaxShortAggregator) other).max);\n\t\t}\n\n\t\t@Override\n\t\tpublic Short result() {\n\t\t\treturn max;\n\t\t}\n\t}\n\n\t/**\n\t * Aggregator for sum operation.\n\t */\n\tpublic static class SumShortAggregator implements Aggregator<Short, Short> {\n\n\t\tprivate short sum = 0;\n\n\t\t@Override\n\t\tpublic void aggregate(Short value) {\n\t\t\tsum += value;\n\t\t}\n\n\t\t@Override\n\t\tpublic void combine(Aggregator<Short, Short> other) {\n\t\t\tsum += ((SumShortAggregator) other).sum;\n\t\t}\n\n\t\t@Override\n\t\tpublic Short result() {\n\t\t\treturn sum;\n\t\t}\n\t}\n\n\t@Override\n\tprotected Aggregator<Short, Short> initMin() {\n\t\treturn new MinShortAggregator();\n\t}\n\n\t@Override\n\tprotected Aggregator<Short, Short> initMax() {\n\t\treturn new MaxShortAggregator();\n\t}\n\n\t@Override\n\tprotected Aggregator<Short, Short> initSum() {\n\t\treturn new SumShortAggregator();\n\t}\n\n\t@Override\n\tprotected boolean isNan(Short number) {\n\t\t// NaN never applies here because only types like Float and Double have NaN\n\t\treturn false;\n\t}\n\n\t@Override\n\tprotected boolean isInfinite(Short number) {\n\t\t// Infinity never applies here because only types like Float and Double have Infinity\n\t\treturn false;\n\t}\n}<fim_middle>// class below has no smell\n"}