{"text": "<fim_prefix>          }\n          switch (schemeField.id) {\n            case 0: // SUCCESS\n              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {\n                struct.success = iprot.readBool();\n                struct.setSuccessIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 1: // IRE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();\n                struct.ire.read(iprot);\n                struct.setIreIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 2: // ACE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ace = new org.apache.airavata.model.error.AiravataClientException();\n                struct.ace.read(iprot);\n                struct.setAceIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 3: // ASE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();\n                struct.ase.read(iprot);\n                struct.setAseIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 4: // AE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.ae = new org.apache.airavata.model.error.AuthorizationException();\n                struct.ae.read(iprot);\n                struct.setAeIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGateway_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.isSetSuccess()) {\n          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);\n          oprot.writeBool(struct.success);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ire != null) {\n          oprot.writeFieldBegin(IRE_FIELD_DESC);\n          struct.ire.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ace != null) {\n          oprot.writeFieldBegin(ACE_FIELD_DESC);\n          struct.ace.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ase != null) {\n          oprot.writeFieldBegin(ASE_FIELD_DESC);\n          struct.ase.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.ae != null) {\n          oprot.writeFieldBegin(AE_FIELD_DESC);\n          struct.ae.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class updateGateway_resultTupleSchemeFactory implements SchemeFactory {\n      public updateGateway_resultTupleScheme getScheme() {\n        return new updateGateway_resultTupleScheme();\n      }\n    }\n    private static class updateGateway_resultTupleScheme extends TupleScheme<updateGateway_result> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, updateGateway_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetSuccess()) {\n          optionals.set(0);\n        }\n        if (struct.isSetIre()) {\n          optionals.set(1);\n        }\n        if (struct.isSetAce()) {\n          optionals.set(2);\n        }\n        if (struct.isSetAse()) {\n          optionals.set(3);\n        }\n        if (struct.isSetAe()) {\n          optionals.set(4);\n        }\n        oprot.writeBitSet(optionals, 5);\n        if (struct.isSetSuccess()) {\n          oprot.writeBool(struct.success);\n        }\n        if (struct.isSetIre()) {\n          struct.ire.write(oprot);\n        }\n        if (struct.isSetAce()) {\n          struct.ace.write(oprot);\n        }\n        if (struct.isSetAse()) {\n          struct.ase.write(oprot);\n        }\n        if (struct.isSetAe()) {\n          struct.ae.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, updateGateway_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        BitSet incoming = iprot.readBitSet(5);\n        if (incoming.get(0)) {\n          struct.success = iprot.readBool();\n          struct.setSuccessIsSet(true);\n        }\n        if (incoming.get(1)) {\n          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();\n          struct.ire.read(iprot);\n          struct.setIreIsSet(true);\n        }\n        if (incoming.get(2)) {\n          struct.ace = new org.apache.airavata.model.error.AiravataClientException();\n          struct.ace.read(iprot);\n          struct.setAceIsSet(true);\n        }\n        if (incoming.get(3)) {\n          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();\n          struct.ase.read(iprot);\n          struct.setAseIsSet(true);\n        }\n        if (incoming.get(4)) {\n          struct.ae = new org.apache.airavata.model.error.AuthorizationException();\n          struct.ae.read(iprot);\n          struct.setAeIsSet(true);\n        }\n      }\n    }\n  }\n  public static class getGateway_args implements org.apache.thrift.TBase<getGateway_args, getGateway_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGateway_args>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"getGateway_args\");\n    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField(\"authzToken\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n    private static final org.apache.thrift.protocol.TField GATEWAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(\"gatewayId\", org.apache.thrift.protocol.TType.STRING, (short)2);\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new getGateway_argsStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new getGateway_argsTupleSchemeFactory());\n    }\n    public org.apache.airavata.model.security.AuthzToken authzToken; // required\n    public String gatewayId; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      AUTHZ_TOKEN((short)1, \"authzToken\"),\n      GATEWAY_ID((short)2, \"gatewayId\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // AUTHZ_TOKEN\n            return AUTHZ_TOKEN;\n          case 2: // GATEWAY_ID\n            return GATEWAY_ID;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n<fim_suffix>      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }<fim_middle>// function below has no smell\n"}