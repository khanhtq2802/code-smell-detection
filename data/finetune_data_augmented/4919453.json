{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.apache.jmeter.protocol.http.control.gui;\n\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.Arrays;\nimport java.util.Collection;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JTextField;\n\nimport org.apache.jmeter.control.gui.LogicControllerGui;\nimport org.apache.jmeter.gui.JMeterGUIComponent;\nimport org.apache.jmeter.gui.UnsharedComponent;\nimport org.apache.jmeter.gui.util.HorizontalPanel;\nimport org.apache.jmeter.gui.util.MenuFactory;\nimport org.apache.jmeter.protocol.http.control.HttpMirrorControl;\nimport org.apache.jmeter.testelement.TestElement;\nimport org.apache.jmeter.util.JMeterUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * GUI of Mirror Server Test element\n *\n */\npublic class HttpMirrorControlGui extends LogicControllerGui\n    implements JMeterGUIComponent, ActionListener, UnsharedComponent {\n\n    private static final long serialVersionUID = 241L;\n\n    private static final Logger log = LoggerFactory.getLogger(HttpMirrorControlGui.class);\n\n    private JTextField portField;\n\n    private JTextField maxPoolSizeField;\n\n    private JTextField maxQueueSizeField;\n\n    private JButton stop;\n    private JButton start;\n\n    private static final String ACTION_STOP = \"stop\"; // $NON-NLS-1$\n\n    private static final String ACTION_START = \"start\"; // $NON-NLS-1$\n\n    private HttpMirrorControl mirrorController;\n\n\n    public HttpMirrorControlGui() {\n        super();\n        log.debug(\"Creating HttpMirrorControlGui\");\n        init();\n    }\n\n    @Override\n    public TestElement createTestElement() {\n        mirrorController = new HttpMirrorControl();\n        log.debug(\"creating/configuring model = {}\", mirrorController);\n        modifyTestElement(mirrorController);\n        return mirrorController;\n    }\n\n    /**\n     * Modifies a given TestElement to mirror the data in the gui components.\n     *\n     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)\n     */\n    @Override\n    public void modifyTestElement(TestElement el) {\n        configureTestElement(el);\n        if (el instanceof HttpMirrorControl) {\n            mirrorController = (HttpMirrorControl) el;\n            mirrorController.setPort(portField.getText());\n            mirrorController.setMaxPoolSize(maxPoolSizeField.getText());\n            mirrorController.setMaxQueueSize(maxQueueSizeField.getText());\n        }\n    }\n\n    @Override\n    public String getLabelResource() {\n        return \"httpmirror_title\"; // $NON-NLS-1$\n    }\n\n    @Override\n    public Collection<String> getMenuCategories() {\n        return Arrays.asList(MenuFactory.NON_TEST_ELEMENTS);\n    }\n\n    @Override\n    public void configure(TestElement element) {\n        log.debug(\"Configuring gui with {}\", element);\n        super.configure(element);\n        mirrorController = (HttpMirrorControl) element;\n        portField.setText(mirrorController.getPortString());\n        maxPoolSizeField.setText(mirrorController.getMaxPoolSizeAsString());\n        maxQueueSizeField.setText(mirrorController.getMaxQueueSizeAsString());\n        repaint();\n    }\n\n\n    @Override\n    public void actionPerformed(ActionEvent action) {\n        String command = action.getActionCommand();\n\n        if (command.equals(ACTION_STOP)) {\n            mirrorController.stopHttpMirror();\n            stop.setEnabled(false);\n            start.setEnabled(true);\n        } else if (command.equals(ACTION_START)) {\n            modifyTestElement(mirrorController);\n            mirrorController.startHttpMirror();\n            start.setEnabled(false);\n            stop.setEnabled(true);\n        }\n    }\n\n    private void init() { // WARNING: called from ctor so must not be overridden (i.e. must be private or final)\n        setLayout(new BorderLayout(0, 5));\n        setBorder(makeBorder());\n\n        add(makeTitlePanel(), BorderLayout.NORTH);\n\n        JPanel mainPanel = new JPanel(new BorderLayout());\n\n        Box myBox = Box.createVerticalBox();\n        myBox.add(createPortPanel());\n        mainPanel.add(myBox, BorderLayout.NORTH);\n\n        mainPanel.add(createControls(), BorderLayout.CENTER);\n\n        add(mainPanel, BorderLayout.CENTER);\n    }\n\n    private JPanel createControls() {\n        start = new JButton(JMeterUtils.getResString(\"start\")); // $NON-NLS-1$\n        start.addActionListener(this);\n        start.setActionCommand(ACTION_START);\n        start.setEnabled(true);\n\n        stop = new JButton(JMeterUtils.getResString(\"stop\")); // $NON-NLS-1$\n        stop.addActionListener(this);\n        stop.setActionCommand(ACTION_STOP);\n        stop.setEnabled(false);\n\n        JPanel panel = new JPanel();\n        panel.add(start);\n        panel.add(stop);\n        return panel;\n    }\n\n<fim_suffix>    private JPanel createPortPanel() {\n        portField = new JTextField(HttpMirrorControl.DEFAULT_PORT_S, 8);\n        portField.setName(HttpMirrorControl.PORT);\n\n        JLabel label = new JLabel(JMeterUtils.getResString(\"port\")); // $NON-NLS-1$\n        label.setLabelFor(portField);\n\n        maxPoolSizeField = new JTextField(Integer.toString(HttpMirrorControl.DEFAULT_MAX_POOL_SIZE), 8);\n        maxPoolSizeField.setName(HttpMirrorControl.MAX_POOL_SIZE);\n\n        JLabel mpsLabel = new JLabel(JMeterUtils.getResString(\"httpmirror_max_pool_size\")); // $NON-NLS-1$\n        mpsLabel.setLabelFor(maxPoolSizeField);\n\n        maxQueueSizeField = new JTextField(Integer.toString(HttpMirrorControl.DEFAULT_MAX_QUEUE_SIZE), 8);\n        maxQueueSizeField.setName(HttpMirrorControl.MAX_QUEUE_SIZE);\n\n        JLabel mqsLabel = new JLabel(JMeterUtils.getResString(\"httpmirror_max_queue_size\")); // $NON-NLS-1$\n        mqsLabel.setLabelFor(maxQueueSizeField);\n\n        HorizontalPanel panel = new HorizontalPanel();\n        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),\n                JMeterUtils.getResString(\"httpmirror_settings\"))); // $NON-NLS-1$\n        \n        panel.add(label);\n        panel.add(portField);\n\n        panel.add(mpsLabel);\n        panel.add(maxPoolSizeField);\n\n        panel.add(mqsLabel);\n        panel.add(maxQueueSizeField);\n        \n        panel.add(Box.createHorizontalStrut(10));\n\n        return panel;\n    }\n\n    @Override\n    public void clearGui(){\n        super.clearGui();\n        portField.setText(HttpMirrorControl.DEFAULT_PORT_S);\n        maxPoolSizeField.setText(Integer.toString(HttpMirrorControl.DEFAULT_MAX_POOL_SIZE));\n    }\n    \n    /**\n     * Redefined to remove change parent and inserrt parent menu\n     * @see org.apache.jmeter.control.gui.AbstractControllerGui#createPopupMenu()\n     */\n    @Override\n    public JPopupMenu createPopupMenu() {\n        JPopupMenu pop = new JPopupMenu();        \n        MenuFactory.addEditMenu(pop, true);\n        MenuFactory.addFileMenu(pop);\n        return pop;\n    }\n}<fim_middle>// function below has no smell\n"}