{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jclouds.aws.ec2.options;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport org.jclouds.ec2.options.internal.BaseEC2RequestOptions;\n\n/**\n * Contains options supported in the Form API for the Route operations. <h2>\n * Usage</h2> The recommended way to instantiate such an object is to statically import\n * RouteOptions.Builder.* and invoke a static creation method followed by an instance mutator\n * (if needed):\n * <p/>\n * <code>\n * import static org.jclouds.ec2.options.RouteOptions.Builder.*\n * <p/>\n * EC2Api connection = // get connection\n * Route r = connection.getRouteTableApi().get()\n *   .createRoute(region, routeTableId, gatewayId(\"igw-97e68af3\").destinationCidrBlock(\"172.18.19.0/24\"));\n * <code>\n *\n * @see <a\n * href=\"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateRoute.html\"\n * />\n */\n<fim_suffix>public class RouteOptions extends BaseEC2RequestOptions {\n\n   /**\n    * Checks whether you have the required permissions for the action, without actually making the request,\n    * and provides an error response.\n    */\n   public RouteOptions dryRun() {\n      formParameters.put(\"DryRun\", \"true\");\n      return this;\n   }\n\n   public boolean isDryRun() {\n      return getFirstFormOrNull(\"DryRun\") != null;\n   }\n\n   /**\n    * The IPv4 CIDR address block used for the destination match.\n    * Routing decisions are based on the most specific match.\n    */\n   public RouteOptions destinationCidrBlock(String destinationCidrBlock) {\n      formParameters.put(\"DestinationCidrBlock\", checkNotNull(destinationCidrBlock, \"destinationCidrBlock\"));\n      return this;\n   }\n\n   /**\n    * @see RouteOptions#destinationCidrBlock(java.lang.String)\n    */\n   public String getDestinationCidrBlock() {\n      return getFirstFormOrNull(\"DestinationCidrBlock\");\n   }\n\n   /**\n    * The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.\n    */\n   public RouteOptions destinationIpv6CidrBlock(String destinationIpv6CidrBlock) {\n      formParameters.put(\"DestinationIpv6CidrBlock\", checkNotNull(destinationIpv6CidrBlock, \"destinationIpv6CidrBlock\"));\n      return this;\n   }\n\n   /**\n    * @see RouteOptions#destinationIpv6CidrBlock(java.lang.String)\n    */\n   public String getDestinationIpv6CidrBlock() {\n      return getFirstFormOrNull(\"DestinationIpv6CidrBlock\");\n   }\n\n   /**\n    * The ID of an Internet gateway or virtual private gateway attached to your VPC.\n    */\n   public RouteOptions gatewayId(String gatewayId) {\n      formParameters.put(\"GatewayId\", checkNotNull(gatewayId, \"gatewayId\"));\n      return this;\n   }\n\n   /**\n    * @see RouteOptions#gatewayId(java.lang.String)\n    */\n   public String getGatewayId() {\n      return getFirstFormOrNull(\"GatewayId\");\n   }\n\n   /**\n    * [IPv6 traffic only] The ID of an egress-only Internet gateway.\n    */\n   public RouteOptions egressOnlyInternetGatewayId(String egressOnlyInternetGatewayId) {\n      formParameters.put(\"EgressOnlyInternetGatewayId\",\n         checkNotNull(egressOnlyInternetGatewayId, \"egressOnlyInternetGatewayId\"));\n      return this;\n   }\n\n   /**\n    * @see RouteOptions#egressOnlyInternetGatewayId(java.lang.String)\n    */\n   public String getEgressOnlyInternetGatewayId() {\n      return getFirstFormOrNull(\"EgressOnlyInternetGatewayId\");\n   }\n\n   /**\n    * [IPv4 traffic only] The ID of a NAT gateway.\n    */\n   public RouteOptions natGatewayId(String natGatewayId) {\n      formParameters.put(\"NatGatewayId\", checkNotNull(natGatewayId, \"natGatewayId\"));\n      return this;\n   }\n\n   /**\n    * @see RouteOptions#natGatewayId(String)\n    */\n   public String getNatGatewayId() {\n      return getFirstFormOrNull(\"NatGatewayId\");\n   }\n\n   /**\n    * The ID of a network interface.\n    */\n   public RouteOptions networkInterfaceId(String networkInterfaceId) {\n      formParameters.put(\"NetworkInterfaceId\", checkNotNull(networkInterfaceId, \"networkInterfaceId\"));\n      return this;\n   }\n\n   /**\n    * @see RouteOptions#networkInterfaceId(String)\n    */\n   public String getNetworkInterfaceId() {\n      return getFirstFormOrNull(\"NetworkInterfaceId\");\n   }\n\n   /**\n    * The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless\n    * exactly one network interface is attached.\n    */\n   public RouteOptions instanceId(String instanceId) {\n      formParameters.put(\"InstanceId\", checkNotNull(instanceId, \"instanceId\"));\n      return this;\n   }\n\n   /**\n    * @see RouteOptions#instanceId(String)\n    */\n   public String getInstanceId() {\n      return getFirstFormOrNull(\"InstanceId\");\n   }\n\n   /**\n    * The ID of a VPC peering connection.\n    */\n   public RouteOptions vpcPeeringConnectionId(String vpcPeeringConnectionId) {\n      formParameters.put(\"VpcPeeringConnectionId\", checkNotNull(vpcPeeringConnectionId, \"vpcPeeringConnectionId\"));\n      return this;\n   }\n\n   /**\n    * @see RouteOptions#vpcPeeringConnectionId(String)\n    */\n   public String getVpcPeeringConnectionId() {\n      return getFirstFormOrNull(\"VpcPeeringConnectionId\");\n   }\n\n\n   public static class Builder {\n      /**\n       * @see RouteOptions#dryRun()\n       */\n      public static RouteOptions dryRun() {\n         RouteOptions options = new RouteOptions();\n         return options.dryRun();\n      }\n\n      /**\n       * @see RouteOptions#destinationCidrBlock(java.lang.String)\n       */\n      public static RouteOptions destinationCidrBlock(String destinationCidrBlock) {\n         RouteOptions options = new RouteOptions();\n         return options.destinationCidrBlock(destinationCidrBlock);\n      }\n\n      /**\n       * @see RouteOptions#destinationIpv6CidrBlock(java.lang.String)\n       */\n      public static RouteOptions destinationIpv6CidrBlock(String destinationIpv6CidrBlock) {\n         RouteOptions options = new RouteOptions();\n         return options.destinationIpv6CidrBlock(destinationIpv6CidrBlock);\n      }\n\n      /**\n       * @see RouteOptions#gatewayId(java.lang.String)\n       */\n      public static RouteOptions gatewayId(String gatewayId) {\n         RouteOptions options = new RouteOptions();\n         return options.gatewayId(gatewayId);\n      }\n\n      /**\n       * @see RouteOptions#egressOnlyInternetGatewayId(java.lang.String)\n       */\n      public static RouteOptions egressOnlyInternetGatewayId(String egressOnlyInternetGatewayId) {\n         RouteOptions options = new RouteOptions();\n         return options.egressOnlyInternetGatewayId(egressOnlyInternetGatewayId);\n      }\n\n      /**\n       * @see RouteOptions#natGatewayId(String)\n       */\n      public static RouteOptions natGatewayId(String natGatewayId) {\n         RouteOptions options = new RouteOptions();\n         return options.natGatewayId(natGatewayId);\n      }\n\n      /**\n       * @see RouteOptions#networkInterfaceId(String)\n       */\n      public static RouteOptions networkInterfaceId(String networkInterfaceId) {\n         RouteOptions options = new RouteOptions();\n         return options.networkInterfaceId(networkInterfaceId);\n      }\n\n      /**\n       * @see RouteOptions#vpcPeeringConnectionId(String)\n       */\n      public static RouteOptions vpcPeeringConnectionId(String vpcPeeringConnectionId) {\n         RouteOptions options = new RouteOptions();\n         return options.vpcPeeringConnectionId(vpcPeeringConnectionId);\n      }\n\n      /**\n       * @see RouteOptions#instanceId(String)\n       */\n      public static RouteOptions instanceId(String instanceId) {\n         RouteOptions options = new RouteOptions();\n         return options.instanceId(instanceId);\n      }\n\n   }\n}<fim_middle>// class below has no smell\n"}