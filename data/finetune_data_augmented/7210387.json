{"text": "<fim_prefix>  }\n  /**\n   * Logs a message which requires parameters at the FINER level.\n   *\n   * @param msg the message to log\n   * @param params varargs list of objects to include in the log message\n   */\n  public void finer(String msg, Object... params) {\n    if (isFinerEnabled()) {\n      CallerDetails details = inferCaller();\n      logger.logp(Level.FINER, details.clazz, details.method, msg, params);\n    }\n  }\n  /**\n   * Logs a message which accompanies a Throwable at the FINER level.\n   *\n   * @param msg the message to log\n   * @param thrown an Exception to include in the logged message\n   */\n  public void finer(String msg, Throwable thrown) {\n    if (isFinerEnabled()) {\n      CallerDetails details = inferCaller();\n      logger.logp(Level.FINER, details.clazz, details.method, msg, thrown);\n    }\n  }\n  /**\n   * Logs a message at the FINEST level.\n   *\n   * @param msg the message to log\n   */\n  public void finest(String msg) {\n    if (isFinestEnabled()) {\n      CallerDetails details = inferCaller();\n      logger.logp(Level.FINEST, details.clazz, details.method, msg);\n    }\n  }\n  /**\n   * Logs a message which requires parameters at the FINEST level.\n   *\n   * @param msg the message to log\n   * @param params varargs list of objects to include in the log message\n   */\n  public void finest(String msg, Object... params) {\n    if (isFinestEnabled()) {\n      CallerDetails details = inferCaller();\n      logger.logp(Level.FINEST, details.clazz, details.method, msg, params);\n    }\n  }\n  /**\n   * Logs a message which accompanies a Throwable at the FINEST level.\n   *\n   * @param msg the message to log\n   * @param thrown an Exception to include in the logged message\n   */\n  public void finest(String msg, Throwable thrown) {\n    if (isFinestEnabled()) {\n      CallerDetails details = inferCaller();\n      logger.logp(Level.FINEST, details.clazz, details.method, msg, thrown);\n    }\n  }\n  /**\n   * Returns the level at which the underlying logger operates.\n   *\n   * @return a Level object at which logger is operating\n   */\n  public Level getLevel() {\n    return logger.getLevel();\n  }\n  /**\n   * Returns the name of the underlying logger.\n   *\n   * @return a String with the name of the logger\n   */\n  public String getName() {\n    return logger.getName();\n  }\n  /**\n   * Returns the underlying logger. This should only be used when component code calls others' code,\n   * and that code requires that we provide it with a Logger.\n   *\n   * @return the underlying Logger object\n   */\n  public Logger getUnderlyingLogger() {\n    return logger;\n  }\n  /**\n   * Logs a message at the INFO level.\n   *\n   * @param msg the message to log\n   */\n  public void info(String msg) {\n    if (isInfoEnabled()) {\n      CallerDetails details = inferCaller();\n      logger.logp(Level.INFO, details.clazz, details.method, msg);\n    }\n  }\n  /**\n   * Logs a message which requires parameters at the INFO level.\n   *\n   * @param msg the message to log\n   * @param params varargs list of objects to include in the log message\n   */\n  public void info(String msg, Object... params) {\n    if (isInfoEnabled()) {\n      CallerDetails details = inferCaller();\n      logger.logp(Level.INFO, details.clazz, details.method, msg, params);\n    }\n  }\n  /**\n   * Logs a message which accompanies a Throwable at the INFO level.\n   *\n   * @param msg the message to log\n   * @param thrown an Exception to include in the logged message\n   */\n  public void info(String msg, Throwable thrown) {\n    if (isInfoEnabled()) {\n      CallerDetails details = inferCaller();\n      logger.logp(Level.INFO, details.clazz, details.method, msg, thrown);\n    }\n  }\n  /**\n   * Checks if a message at CONFIG level would actually be logged.\n   *\n   * @return <code>true</code> if logging at the CONFIG level\n   */\n  public boolean isConfigEnabled() {\n    return logger.isLoggable(Level.CONFIG);\n  }\n  /**\n   * Checks if a message at FINE level would actually be logged.\n   *\n   * @return <code>true</code> if logging at the FINE level\n   */\n  public boolean isFineEnabled() {\n    return logger.isLoggable(Level.FINE);\n  }\n  /**\n   * Checks if a message at FINER level would actually be logged.\n   *\n   * @return <code>true</code> if logging at the FINER level\n   */\n  public boolean isFinerEnabled() {\n    return logger.isLoggable(Level.FINER);\n  }\n  /**\n   * Checks if a message at FINEST level would actually be logged.\n   *\n   * @return <code>true</code> if logging at the FINEST level\n   */\n  public boolean isFinestEnabled() {\n    return logger.isLoggable(Level.FINEST);\n  }\n  /**\n   * Checks if a message at INFO level would actually be logged.\n   *\n   * @return <code>true</code> if logging at the INFO level\n   */\n  public boolean isInfoEnabled() {\n    return logger.isLoggable(Level.INFO);\n  }\n  /**\n   * Checks if a message at the provided level would actually be logged.\n   *\n   * @param level a Level object to check against\n   * @return <code>true</code> if logging at the level specified\n   */\n  public boolean isLoggable(Level level) {\n    return logger.isLoggable(level);\n  }\n  /**\n   * Checks if a message at SEVERE level would actually be logged.\n   *\n   * @return <code>true</code> if logging at the SEVERE level\n   */\n  public boolean isSevereEnabled() {\n    return logger.isLoggable(Level.SEVERE);\n  }\n  /**\n   * Checks if a message at WARNING level would actually be logged.\n   *\n   * @return <code>true</code> if logging at the WARNING level\n   */\n  public boolean isWarningEnabled() {\n    return logger.isLoggable(Level.WARNING);\n  }\n  /**\n   * Logs a message at the requested level. Normally, one of the level-specific methods should be\n   * used instead.\n   *\n   * @param level Level at which log log the message\n   * @param msg the message to log\n   */\n  public void log(Level level, String msg) {\n    if (isLoggable(level)) {\n      CallerDetails details = inferCaller();\n      logger.logp(level, details.clazz, details.method, msg);\n    }\n  }\n  /**\n   * Logs a message which requires parameters. This replaces the Logger equivalents taking a single\n   * param or an Object array, and is backward-compatible with them. Calling the per-Level methods\n   * is preferred, but this is present for completeness.\n   *\n   * @param level Level at which log log the message\n   * @param msg the message to log\n   * @param params varargs list of objects to include in the log message\n   * @see Logger#log(java.util.logging.Level, String, Object[])\n   */\n  public void log(Level level, String msg, Object... params) {\n    if (isLoggable(level)) {\n      CallerDetails details = inferCaller();\n      logger.logp(level, details.clazz, details.method, msg, params);\n    }\n  }\n  /**\n   * Logs a message which accompanies a Throwable. Calling equivalent per-Level method is preferred,\n   * but this is present for completeness.\n   *\n   * @param level Level at which log log the message\n   * @param msg the message to log\n   * @param thrown an Exception to include in the logged message\n   */\n  public void log(Level level, String msg, Throwable thrown) {\n    if (isLoggable(level)) {\n      CallerDetails details = inferCaller();\n      logger.logp(level, details.clazz, details.method, msg, thrown);\n    }\n  }\n  /**\n   * Logs a message at the SEVERE level.\n   *\n   * @param msg the message to log\n   */\n  public void severe(String msg) {\n    if (isSevereEnabled()) {\n      CallerDetails details = inferCaller();\n      logger.logp(Level.SEVERE, details.clazz, details.method, msg);\n    }\n  }\n  /**\n   * Logs a message which requires parameters at the SEVERE level.\n   *\n   * @param msg the message to log\n   * @param params varargs list of objects to include in the log message\n   */\n<fim_suffix>  public void severe(String msg, Object... params) {\n    if (isSevereEnabled()) {\n      CallerDetails details = inferCaller();\n      logger.logp(Level.SEVERE, details.clazz, details.method, msg, params);\n    }\n  }<fim_middle>// function below has no smell\n"}