{"text": "<fim_prefix> * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.usergrid.persistence.index.utils;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\nimport static org.apache.commons.lang.StringUtils.isNotBlank;\nimport static org.apache.usergrid.persistence.index.utils.ClassUtils.cast;\npublic class MapUtils extends org.apache.commons.collections.MapUtils {\n    public static <A, B> void addMapSet( Map<A, Set<B>> map, A a, B b ) {\n        addMapSet( map, false, a, b );\n    }\n    @SuppressWarnings(\"unchecked\")\n    public static <A, B> void addMapSet( Map<A, Set<B>> map, boolean ignoreCase, A a, B b ) {\n        Set<B> setB = map.get( a );\n        if ( setB == null ) {\n            if ( ignoreCase && ( b instanceof String ) ) {\n                setB = ( Set<B> ) new TreeSet<String>( String.CASE_INSENSITIVE_ORDER );\n            }\n            else {\n                setB = new LinkedHashSet<B>();\n            }\n            map.put( a, setB );\n        }\n        setB.add( b );\n    }\n    public static <A, B, C> void addMapMapSet( Map<A, Map<B, Set<C>>> map, A a, B b, C c ) {\n        addMapMapSet( map, false, a, b, c );\n    }\n    @SuppressWarnings(\"unchecked\")\n    public static <A, B, C> void addMapMapSet( Map<A, Map<B, Set<C>>> map, boolean ignoreCase, A a, B b, C c ) {\n        Map<B, Set<C>> mapB = map.get( a );\n        if ( mapB == null ) {\n            if ( ignoreCase && ( b instanceof String ) ) {\n                mapB = ( Map<B, Set<C>> ) new TreeMap<String, Set<C>>( String.CASE_INSENSITIVE_ORDER );\n            }\n            else {\n                mapB = new LinkedHashMap<B, Set<C>>();\n            }\n            map.put( a, mapB );\n        }\n        addMapSet( mapB, ignoreCase, b, c );\n    }\n    @SuppressWarnings(\"unchecked\")\n    public static <A, B, C, D> void addMapMapMapSet( Map<A, Map<B, Map<C, Set<D>>>> map, boolean ignoreCase, A a, B b,\n                                                     C c, D d ) {\n        Map<B, Map<C, Set<D>>> mapB = map.get( a );\n        if ( mapB == null ) {\n            if ( ignoreCase && ( b instanceof String ) ) {\n                mapB = ( Map<B, Map<C, Set<D>>> ) new TreeMap<String, Map<C, Set<D>>>( String.CASE_INSENSITIVE_ORDER );\n            }\n            else {\n                mapB = new LinkedHashMap<B, Map<C, Set<D>>>();\n            }\n            map.put( a, mapB );\n        }\n        addMapMapSet( mapB, ignoreCase, b, c, d );\n    }\n    public static <A, B, C> C getMapMap( Map<A, Map<B, C>> map, A a, B b ) {\n        Map<B, C> mapB = map.get( a );\n        if ( mapB == null ) {\n            return null;\n        }\n        return mapB.get( b );\n    }\n    public static <A, B> void addMapList( Map<A, List<B>> map, A a, B b ) {\n        List<B> listB = map.get( a );\n        if ( listB == null ) {\n            listB = new ArrayList<B>();\n            map.put( a, listB );\n        }\n        listB.add( b );\n    }\n    public static <A, B> void addListToMapList( Map<A, List<B>> map, A a, List<B> b ) {\n        List<B> listB = map.get( a );\n        if ( listB == null ) {\n            listB = new ArrayList<B>();\n            map.put( a, listB );\n        }\n        listB.addAll( b );\n    }\n    @SuppressWarnings(\"unchecked\")\n    public static <K, V> V getValue( Map<K, ?> map, K k ) {\n        V v = null;\n        try {\n            v = ( V ) map.get( k );\n        }\n        catch ( ClassCastException e ) {\n            //LOG.war( \"Map value {} was not the expected class\", map.get( k ), e );\n        }\n        return v;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public static <K, V> Map<?, ?> map( Object... objects ) {\n        Map<K, V> map = new LinkedHashMap<K, V>();\n        int i = 0;\n        while ( i < objects.length ) {\n            if ( objects[i] instanceof Map.Entry ) {\n                Map.Entry<K, V> entry = ( Entry<K, V> ) objects[i];\n                map.put( entry.getKey(), entry.getValue() );\n                i++;\n            }\n            else if ( objects[i] instanceof Map ) {\n                map.putAll( ( Map<? extends K, ? extends V> ) objects[i] );\n                i++;\n            }\n            else if ( i < ( objects.length - 1 ) ) {\n                K k = ( K ) objects[i];\n                V v = ( V ) objects[i + 1];\n                map.put( k, v );\n                i += 2;\n            }\n            else {\n                break;\n            }\n        }\n        return map;\n    }\n    private static class SimpleMapEntry<K, V> implements Map.Entry<K, V> {\n        private final K k;\n        private V v;\n        public SimpleMapEntry( K k, V v ) {\n            this.k = k;\n            this.v = v;\n        }\n        @Override\n        public K getKey() {\n            return k;\n        }\n        @Override\n        public V getValue() {\n            return v;\n        }\n        @Override\n        public V setValue( V v ) {\n            V oldV = this.v;\n            this.v = v;\n            return oldV;\n        }\n    }\n    public static <K, V> Map.Entry<K, V> entry( K k, V v ) {\n        return new SimpleMapEntry<K, V>( k, v );\n    }\n    public static <K, V> K getFirstKey( Map<K, V> map ) {\n        if ( map == null ) {\n            return null;\n        }\n        Entry<K, V> e = map.entrySet().iterator().next();\n        if ( e != null ) {\n            return e.getKey();\n        }\n        return null;\n    }\n    public static <V> Map<String, V> filter( Map<String, V> map, String prefix, boolean removePrefix ) {\n        Map<String, V> filteredMap = new LinkedHashMap<String, V>();\n        for ( Entry<String, V> entry : map.entrySet() ) {\n            if ( entry.getKey().startsWith( prefix ) ) {\n                if ( removePrefix ) {\n                    filteredMap.put( entry.getKey().substring( prefix.length() ), entry.getValue() );\n                }\n                else {\n                    filteredMap.put( entry.getKey(), entry.getValue() );\n                }\n            }\n        }\n        return filteredMap;\n    }\n    public static <V> Map<String, V> filter( Map<String, V> map, String prefix ) {\n        return filter( map, prefix, false );\n    }\n    public static Properties filter( Properties properties, String prefix, boolean removePrefix ) {\n        Properties filteredProperties = new Properties();\n        for ( Entry<String, String> entry : asMap( properties ).entrySet() ) {\n            if ( entry.getKey().startsWith( prefix ) ) {\n                if ( removePrefix ) {\n                    filteredProperties.put( entry.getKey().substring( prefix.length() ), entry.getValue() );\n                }\n                else {\n                    filteredProperties.put( entry.getKey(), entry.getValue() );\n                }\n            }\n        }\n        return filteredProperties;\n    }\n    public static Properties filter( Properties properties, String prefix ) {\n        return filter( properties, prefix, false );\n    }\n    @SuppressWarnings(\"unchecked\")\n    public static Map<String, String> asMap( Properties properties ) {\n        return cast( properties );\n    }\n<fim_suffix>    public static <S, T> HashMapBuilder<S, T> hashMap( S key, T value ) {\n        return new HashMapBuilder<S, T>().map( key, value );\n    }<fim_middle>// function below has no smell\n"}