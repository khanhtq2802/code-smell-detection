{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2015 Wireless Networks Group, UPC Barcelona and i2CAT.\n * \n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n * \n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *    http://www.eclipse.org/org/documents/edl-v10.html.\n * \n * Contributors:\n *    August Betzler    - CoCoA implementation\n *    Matthias Kovatsch - Embedding of CoCoA in Californium\n ******************************************************************************/\n \npackage org.eclipse.californium.core.network.stack.congestioncontrol;\n\nimport org.eclipse.californium.core.network.Exchange;\nimport org.eclipse.californium.core.network.RemoteEndpoint;\nimport org.eclipse.californium.core.network.config.NetworkConfig;\nimport org.eclipse.californium.core.network.stack.CongestionControlLayer;\n\npublic class BasicRto extends CongestionControlLayer {\n\n\tpublic BasicRto(NetworkConfig config) {\n\t\tsuper(config);\n\t}\n\t\t\n\t@Override\n\tprotected void updateEstimator(long measuredRTT, int estimatorType, RemoteEndpoint endpoint){\n\t\t// Use last RTT measurement, which is then multiplied by a static factor (dithering)\n\t\tlong newRTO =  measuredRTT; //; (long) (measuredRTT * 1.5);\n\t\t//System.out.println(\"Basic RTO: \" + measuredRTT );\n\t\t\t\n\t\tendpoint.updateRTO(newRTO);\n\t}\t\n\t\n<fim_suffix>\t@Override\n\tpublic void processRTTmeasurement(long measuredRTT, Exchange exchange, int retransmissionCount){\t\t\n\t\t//System.out.println(\"Measured an RTT of \" + measuredRTT + \" after using \" + retransmissionCount + \" retries.\" );\n\t\tRemoteEndpoint endpoint = getRemoteEndpoint(exchange);\n\t\tint rtoType = endpoint.getExchangeEstimatorState(exchange);\n\t\t\n\t\t// The basic rto algorithm does not care for the blind estimator, set weak/strong to false\n\t\tendpoint.setBlindStrong(false);\n\t\tendpoint.setBlindWeak(false);\n\t\t//Perform normal update of the RTO\n\t\tupdateEstimator(measuredRTT, rtoType, endpoint);\n\n\t}\n}<fim_middle>// function below has no smell\n"}