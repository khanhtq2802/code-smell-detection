{"text": "<fim_prefix>/**\n * Copyright (c) 2013, 2016 itemis AG (http://www.itemis.eu) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n */\npackage org.eclipse.xtend.core.macro.declaration;\nimport com.google.common.base.Objects;\nimport com.google.common.collect.Iterables;\nimport org.eclipse.emf.common.util.URI;\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.emf.ecore.InternalEObject;\nimport org.eclipse.xtend.core.macro.declaration.AbstractElementImpl;\nimport org.eclipse.xtend.lib.macro.declaration.AnnotationReference;\nimport org.eclipse.xtend.lib.macro.declaration.AnnotationTypeDeclaration;\nimport org.eclipse.xtend.lib.macro.declaration.EnumerationValueDeclaration;\nimport org.eclipse.xtend.lib.macro.declaration.TypeDeclaration;\nimport org.eclipse.xtend.lib.macro.declaration.TypeReference;\nimport org.eclipse.xtend.lib.macro.expression.Expression;\nimport org.eclipse.xtext.common.types.JvmAnnotationType;\nimport org.eclipse.xtext.common.types.JvmDeclaredType;\nimport org.eclipse.xtext.common.types.JvmOperation;\nimport org.eclipse.xtext.common.types.JvmType;\nimport org.eclipse.xtext.xbase.XExpression;\nimport org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation;\nimport org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotationElementValuePair;\nimport org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotationsPackage;\nimport org.eclipse.xtext.xbase.lib.Functions.Function1;\nimport org.eclipse.xtext.xbase.lib.IterableExtensions;\n@SuppressWarnings(\"all\")\npublic class XtendAnnotationReferenceImpl extends AbstractElementImpl<XAnnotation> implements AnnotationReference {\n  @Override\n  public AnnotationTypeDeclaration getAnnotationTypeDeclaration() {\n    AnnotationTypeDeclaration _switchResult = null;\n    JvmType _annotationType = this.getAnnotationType();\n    final JvmType type = _annotationType;\n    boolean _matched = false;\n    if (type instanceof JvmAnnotationType) {\n      _matched=true;\n      TypeDeclaration _typeDeclaration = this.getCompilationUnit().toTypeDeclaration(((JvmDeclaredType)type));\n      _switchResult = ((AnnotationTypeDeclaration) _typeDeclaration);\n    }\n    if (!_matched) {\n      _switchResult = null;\n    }\n    return _switchResult;\n  }\n  public JvmType getAnnotationType() {\n    JvmType _xblockexpression = null;\n    {\n      boolean _isIndexing = this.getCompilationUnit().isIndexing();\n      boolean _not = (!_isIndexing);\n      if (_not) {\n        return this.getDelegate().getAnnotationType();\n      }\n      JvmType _switchResult = null;\n      Object _eGet = this.getDelegate().eGet(XAnnotationsPackage.Literals.XANNOTATION__ANNOTATION_TYPE, false);\n      final Object proxy = _eGet;\n      boolean _matched = false;\n      if (proxy instanceof EObject) {\n        boolean _eIsProxy = ((EObject)proxy).eIsProxy();\n        if (_eIsProxy) {\n          _matched=true;\n          final URI uri = ((InternalEObject) proxy).eProxyURI();\n          EObject _eObject = this.getDelegate().eResource().getResourceSet().getEObject(uri, true);\n          return ((JvmType) _eObject);\n        }\n      }\n      if (!_matched) {\n        if (proxy instanceof JvmType) {\n          _matched=true;\n          _switchResult = ((JvmType)proxy);\n        }\n      }\n      _xblockexpression = _switchResult;\n    }\n    return _xblockexpression;\n  }\n  @Override\n  public Expression getExpression(final String property) {\n    final XExpression value = this.findValue(property);\n    if ((value != null)) {\n      return this.getCompilationUnit().toExpression(value);\n    }\n    return null;\n  }\n  @Override\n  public Object getValue(final String property) {\n    final XExpression value = this.findValue(property);\n    if ((value != null)) {\n      return this.translateAnnotationValue(value, property);\n    }\n    return this.getAnnotationTypeDeclaration().findDeclaredAnnotationTypeElement(property).getDefaultValue();\n  }\n  protected XExpression findValue(final String property) {\n    XExpression _xblockexpression = null;\n    {\n      if ((Objects.equal(property, \"value\") && (this.getDelegate().getValue() != null))) {\n        return this.getDelegate().getValue();\n      }\n      final Function1<XAnnotationElementValuePair, Boolean> _function = (XAnnotationElementValuePair it) -> {\n        String _simpleName = it.getElement().getSimpleName();\n        return Boolean.valueOf(Objects.equal(_simpleName, property));\n      };\n      XAnnotationElementValuePair _findFirst = IterableExtensions.<XAnnotationElementValuePair>findFirst(this.getDelegate().getElementValuePairs(), _function);\n      XExpression _value = null;\n      if (_findFirst!=null) {\n        _value=_findFirst.getValue();\n      }\n      _xblockexpression = _value;\n    }\n    return _xblockexpression;\n  }\n  protected Object translateAnnotationValue(final XExpression value, final String property) {\n    final JvmType annotationType = this.getDelegate().getAnnotationType();\n    if ((annotationType instanceof JvmAnnotationType)) {\n      final Function1<JvmOperation, Boolean> _function = (JvmOperation it) -> {\n        String _simpleName = it.getSimpleName();\n        return Boolean.valueOf(Objects.equal(_simpleName, property));\n      };\n      final JvmOperation operation = IterableExtensions.<JvmOperation>findFirst(Iterables.<JvmOperation>filter(((JvmAnnotationType)annotationType).getMembers(), JvmOperation.class), _function);\n      if ((operation != null)) {\n        final boolean array = this.getCompilationUnit().getTypeReferences().isArray(operation.getReturnType());\n        return this.getCompilationUnit().translateAnnotationValue(value, operation.getReturnType(), array);\n      }\n    }\n    return this.getCompilationUnit().translateAnnotationValue(value, null, false);\n  }\n  @Override\n  public AnnotationReference getAnnotationValue(final String name) {\n    Object _value = this.getValue(name);\n    return ((AnnotationReference) _value);\n  }\n  @Override\n  public AnnotationReference[] getAnnotationArrayValue(final String name) {\n    Object _value = this.getValue(name);\n    return ((AnnotationReference[]) _value);\n  }\n  @Override\n  public boolean[] getBooleanArrayValue(final String name) {\n    Object _value = this.getValue(name);\n    return ((boolean[]) _value);\n  }\n  @Override\n  public boolean getBooleanValue(final String name) {\n    Boolean _xblockexpression = null;\n    {\n      final Object value = this.getValue(name);\n      if ((value == null)) {\n        return false;\n      }\n      _xblockexpression = ((Boolean) value);\n    }\n    return (_xblockexpression).booleanValue();\n  }\n<fim_suffix>  @Override\n  public byte[] getByteArrayValue(final String name) {\n    Object _value = this.getValue(name);\n    return ((byte[]) _value);\n  }\n  @Override\n  public byte getByteValue(final String name) {\n    Byte _xblockexpression = null;\n    {\n      final Object value = this.getValue(name);\n      if ((value == null)) {\n        return ((byte) 0);\n      }\n      _xblockexpression = ((Byte) value);\n    }\n    return (_xblockexpression).byteValue();\n  }\n  @Override\n  public char[] getCharArrayValue(final String name) {\n    Object _value = this.getValue(name);\n    return ((char[]) _value);\n  }\n  @Override\n  public char getCharValue(final String name) {\n    Character _xblockexpression = null;\n    {\n      final Object value = this.getValue(name);\n      if ((value == null)) {\n        return ((char) 0);\n      }\n      Character _switchResult = null;\n      boolean _matched = false;\n      if (value instanceof Byte) {\n        _matched=true;\n        _switchResult = Character.valueOf(((char) ((Byte) value).byteValue()));\n      }\n      if (!_matched) {\n        _switchResult = ((Character) value);\n      }\n      _xblockexpression = _switchResult;\n    }\n    return (_xblockexpression).charValue();\n  }\n  @Override\n  public TypeReference getClassValue(final String name) {\n    Object _value = this.getValue(name);\n    return ((TypeReference) _value);\n  }\n  @Override\n  public TypeReference[] getClassArrayValue(final String name) {\n    Object _value = this.getValue(name);\n    return ((TypeReference[]) _value);\n  }\n  @Override\n  public double[] getDoubleArrayValue(final String name) {<fim_middle>// function below has no smell\n"}