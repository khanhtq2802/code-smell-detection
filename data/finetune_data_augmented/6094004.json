{"text": "<fim_prefix>import javax.xml.bind.annotation.XmlTransient;\nimport org.eclipse.eavp.viz.datastructures.VizObject.VizObject;\nimport org.eclipse.eavp.viz.datastructures.ui.VizEntry;\n/**\n * The VizResource is used for loading a data set that should be visualized in\n * one of the platform's many visualization services. It is significantly\n * different than the base resource in that it can track multiple files that\n * collectively define a single resource as well as whether or not that resource\n * is a local or remote file.\n * \n * @author Scott Forest Hull II, Matthew Wang, Jay Jay Billings, Taylor\n *         Patterson\n * \n */\n@XmlRootElement(name = \"VizResource\")\n@XmlAccessorType(XmlAccessType.FIELD)\npublic class VisualizationResource extends VizObject implements IVizResource {\n\t/**\n\t * <p>\n\t * A File reference to the Resource.\n\t * </p>\n\t * \n\t */\n\t@XmlAttribute()\n\tprivate File file;\n\t/**\n\t * <p>\n\t * The path to the file as a URI.\n\t * </p>\n\t * \n\t */\n\t@XmlAttribute()\n\tprivate URI path;\n\t/**\n\t * <p>\n\t * The set of properties associated with this resource.\n\t * </p>\n\t * \n\t */\n\t@XmlElement(name = \"Properties\")\n\tprivate ArrayList<VizEntry> properties;\n\t/**\n\t * <p>\n\t * An attribute that determines if ICEResouce is a picture or not. Can be\n\t * set multiple times.\n\t * </p>\n\t * \n\t */\n\t@XmlAttribute\n\tprivate boolean isPicture;\n\t/**\n\t * The set of files contained associated with this resource\n\t */\n\tprivate String[] fileSet;\n\t/**\n\t * The fileSet title\n\t */\n\tprivate String fileSetTitle = \"No title\";\n\t/**\n\t * Reference to possible children VizResources\n\t */\n\t@XmlAnyElement()\n\t@XmlElementRef(name = \"VisualizationResource\", type = VisualizationResource.class)\n\tprivate ArrayList<IVizResource> childrenResources;\n\t/**\n\t * The String representation of the hostname where the resource resides. By\n\t * default it assumes localhost.\n\t */\n\tprivate String host = \"localhost\";\n\t/**\n\t * <p>\n\t * The default constructor. If this constructor is used, a second call to\n\t * setContents() must be made.\n\t * </p>\n\t * \n\t */\n\tpublic VisualizationResource() {\n\t\tsuper();\n\t\t// Set the particulars\n\t\tsetName(null);\n\t\tsetDescription(null);\n\t\tfile = null;\n\t\tpath = null;\n\t\t// Setup properties list\n\t\tproperties = new ArrayList<VizEntry>();\n\t\t// Default is set to false for isPicture\n\t\tisPicture = false;\n\t\t// Setup the list\n\t\tchildrenResources = new ArrayList<IVizResource>();\n\t\treturn;\n\t}\n\t/**\n\t * <p>\n\t * An alternative constructor that takes the File as an argument. The\n\t * default values of the name, id and description for this class are the\n\t * filename, 1 and the absolute path, respectively. It is the same as\n\t * calling the no-arg constructor followed by calling setContents().\n\t * </p>\n\t * \n\t * @param resourceFile\n\t *            <p>\n\t *            The file that the Resource should be created to represent.\n\t *            </p>\n\t * @throws IOException\n\t */\n\tpublic VisualizationResource(File resourceFile) throws IOException {\n\t\tsuper();\n\t\t// Set the particulars\n\t\tsetName(resourceFile.getName());\n\t\tsetId(1);\n\t\tsetDescription(resourceFile.getAbsolutePath());\n\t\t// Set the file properties\n\t\tsetContents(resourceFile);\n\t\t// Setup properties list\n\t\tproperties = new ArrayList<VizEntry>();\n\t\t// Default is set to false for isPicture\n\t\tisPicture = false;\n\t\t// Setup the list\n\t\tchildrenResources = new ArrayList<IVizResource>();\n\t\treturn;\n\t}\n\t/**\n\t * The Constructor. This allows for the creation of a VizResource that is\n\t * composed of other VizResources.\n\t * \n\t * @param resourceFile\n\t * @param children\n\t * @throws IOException\n\t */\n\tpublic VisualizationResource(File resourceFile,\n\t\t\tArrayList<IVizResource> children) throws IOException {\n\t\tthis(resourceFile);\n\t\tchildrenResources = children;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see\n\t * org.eclipse.ice.datastructures.resource.IResource#getLastModificationDate\n\t * ()\n\t */\n\tpublic String getLastModificationDate() {\n\t\t// Local Declarations\n\t\tDate fileDate = null;\n\t\tString retVal = \"0\";\n\t\t// Get the modification date if the File is good\n\t\tif (file != null) {\n\t\t\tfileDate = new Date(file.lastModified());\n\t\t\tretVal = fileDate.toString();\n\t\t}\n\t\treturn retVal;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.ice.datastructures.resource.IResource#getContents()\n\t */\n\tpublic File getContents() {\n\t\treturn file;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.ice.datastructures.resource.IResource#getPath()\n\t */\n\tpublic URI getPath() {\n\t\tif (this.file != null) {\n\t\t\tpath = file.toURI();\n\t\t}\n\t\treturn path;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see\n\t * org.eclipse.ice.datastructures.resource.IResource#setPath(java.net.URI)\n\t */\n\tpublic void setPath(URI path) {\n\t\t// If null, return\n\t\tif (path == null) {\n\t\t\treturn;\n\t\t}\n\t\t// Set the path and create a new file\n\t\tthis.path = path;\n\t\t// If the URI differs from the current file, change it\n\t\tif (!this.file.toURI().equals(path)) {\n\t\t\tthis.file = new File(path);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.ice.datastructures.resource.IResource#getProperties()\n\t */\n\tpublic ArrayList<VizEntry> getProperties() {\n\t\treturn this.properties;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see\n\t * org.eclipse.ice.datastructures.resource.IResource#setProperties(java.\n\t * util.ArrayList)\n\t */\n\tpublic void setProperties(ArrayList<VizEntry> props) {\n\t\t// If null return\n\t\tif (props == null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.properties = props;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.ice.datastructures.resource.IResource#isPictureType()\n\t */\n\tpublic boolean isPictureType() {\n\t\treturn this.isPicture;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see\n\t * org.eclipse.ice.datastructures.resource.IResource#setPictureType(boolean)\n\t */\n\t@XmlTransient\n\tpublic void setPictureType(boolean isPicture) {\n\t\tthis.isPicture = isPicture;\n\t}\n\t/**\n\t * This operation performs a deep copy of the attributes of another\n\t * VizResource into the current VizResource.\n\t * \n\t * @param otherResource\n\t *            The other VizResource from which information should be copied.\n\t */\n<fim_suffix>\tpublic void copy(VisualizationResource otherResource) {\n\t\t// if resource is null, return\n\t\tif (otherResource == null) {\n\t\t\treturn;\n\t\t}\n\t\t// copy from super class\n\t\tsuper.copy(otherResource);\n\t\t// Copy current values\n\t\t// These files are not cloned\n\t\tthis.file = otherResource.file;\n\t\tthis.path = otherResource.path;\n\t\t// Iteratively clone the entries in properties\n\t\t// These items are cloned\n\t\tthis.properties.clear();\n\t\tfor (int i = 0; i < otherResource.properties.size(); i++) {\n\t\t\tthis.properties.add((VizEntry) otherResource.getProperties().get(i)\n\t\t\t\t\t.clone());\n\t\t}\n\t\t// Copy picture\n\t\tthis.isPicture = otherResource.isPicture;\n\t\t// Copy everything else we need\n\t\tfileSetTitle = otherResource.fileSetTitle;\n\t\thost = otherResource.host;\n\t\tchildrenResources.clear();\n\t\tchildrenResources = (ArrayList<IVizResource>) otherResource.childrenResources\n\t\t\t\t.clone();\n\t\tfileSet = Arrays.copyOf(otherResource.fileSet,\n\t\t\t\totherResource.fileSet.length);\n\t}<fim_middle>// function below has no smell\n"}