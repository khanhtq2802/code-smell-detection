{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2016, 2018 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n *******************************************************************************/\npackage org.eclipse.hono.config;\nimport static org.eclipse.hono.util.Constants.LOOPBACK_DEVICE_ADDRESS;\nimport java.util.Objects;\nimport org.eclipse.hono.util.Constants;\n/**\n * A POJO for configuring common properties of server components.\n *\n */\npublic class ServiceConfigProperties extends AbstractConfig {\n    private static final int MIN_PAYLOAD_SIZE  = 128; // bytes\n    private static final int DEFAULT_RECEIVER_LINK_CREDITS = 100;\n    private boolean singleTenant = false;\n    private boolean networkDebugLogging = false;\n    private boolean waitForDownstreamConnection = false;\n    private String bindAddress = LOOPBACK_DEVICE_ADDRESS;\n    private int port = Constants.PORT_UNCONFIGURED;\n    private boolean nativeTlsRequired = false;\n    private boolean insecurePortEnabled = false;\n    private String insecurePortBindAddress = LOOPBACK_DEVICE_ADDRESS;\n    private int insecurePort = Constants.PORT_UNCONFIGURED;\n    private int maxPayloadSize = 2048;\n    private int receiverLinkCredit = DEFAULT_RECEIVER_LINK_CREDITS;\n    /**\n     * Gets the host name or literal IP address of the network interface that this server's secure port is\n     * configured to be bound to.\n     *\n     * @return The host name.\n     */\n    public final String getBindAddress() {\n        return bindAddress;\n    }\n    /**\n     * Sets the host name or literal IP address of the network interface that this server's secure port should be bound\n     * to.\n     * <p>\n     * The default value of this property is {@link Constants#LOOPBACK_DEVICE_ADDRESS} on IPv4 stacks.\n     *\n     * @param address The host name or IP address.\n     * @throws NullPointerException if host is {@code null}.\n     */\n    public final void setBindAddress(final String address) {\n        this.bindAddress = Objects.requireNonNull(address);\n    }\n    /**\n     * Gets the secure port this server is configured to listen on.\n     *\n     * @return The port number.\n     */\n<fim_suffix>    public final int getPort() {\n        return port;\n    }\n    /**\n     * Gets the secure port this server is configured to listen on.\n     *\n     * @param defaultPort The port to use if this property has not been set explicitly.\n     * @return The configured port number or the <em>defaultPort</em> if <em>port</em> is not set.\n     * @see #getPort() for more information.\n     */\n    public final int getPort(final int defaultPort) {\n        return port == Constants.PORT_UNCONFIGURED ? defaultPort : port;\n    }\n    /**\n     * Sets the secure port that this server should listen on.\n     * <p>\n     * If the port is set to 0 (the default value), then this server will bind to an arbitrary free\n     * port chosen by the operating system during startup.\n     *\n     * @param port The port number.\n     * @throws IllegalArgumentException if port &lt; 0 or port &gt; 65535.\n     */\n    public final void setPort(final int port) {\n        if (isValidPort(port)) {\n            this.port = port;\n        } else {\n            throw new IllegalArgumentException(\"invalid port number\");\n        }\n    }\n    /**\n     * Checks if this server requires the usage of a native TLS implementation.\n     * Native TLS implementations offer in general a better performance but may not be available on all platforms.\n     * If {@code true}, the server will require the usage of a native TLS implementation.\n     * Server will not start if native implementation is not available on the current system.\n     * If {@code false}, the adapter will try to use a native TLS implementation. If no native implementation is available the\n     * default Java platform independent TLS implementation will be used.\n     * <p>\n     * The default value of this property is {@code false}.\n     *\n     * @return {@code true} if the server requires native TLS implementation.\n     */\n    public final boolean isNativeTlsRequired() {\n        return nativeTlsRequired;\n    }\n    /**\n     * Sets if this server should require the usage of a native TLS implementation.\n     * Native TLS implementations offer in general a better performance but may not be available on all platforms.\n     * If {@code true}, the server will require the usage of a native TLS implementation.\n     * Server will not start if native implementation is not available on the current system.\n     * If {@code false}, the adapter will try to use a native TLS implementation. If no native implementation is available the\n     * default Java platform independent TLS implementation will be used.\n     * <p>\n     * The default value of this property is {@code false}.\n     *\n     * @param nativeTlsRequired {@code true} if the server requires the usage of a native TLS implementation.\n     */\n    public final void setNativeTlsRequired(final boolean nativeTlsRequired) {\n        this.nativeTlsRequired = nativeTlsRequired;\n    }\n    /**\n     * Checks if this server is configured to listen on an insecure port (i.e. without TLS) at all.\n     * If {@code false}, it is guaranteed by the server that no opened port is insecure.\n     * If {@code true}, it enables the definition of an insecure port (as the only port <u>or</u> additionally to the secure port).\n     *\n     * @return {@code true} if the server guarantees that no opened port is insecure.\n     */\n    public final boolean isInsecurePortEnabled() {\n        return insecurePortEnabled;\n    }\n    /**\n     * Sets if this server should support insecure AMQP 1.0 ports (i.e. without TLS) at all.\n     * If {@code false}, it is guaranteed by the server that no opened port is insecure.\n     * If {@code true}, it enables the definition of an insecure port (as the only port <u>or</u> additionally to the secure port).\n     *\n     * @param insecurePortEnabled {@code true} if the server shall guarantee that no opened port is insecure.\n     */\n    public final void setInsecurePortEnabled(final boolean insecurePortEnabled) {\n        this.insecurePortEnabled = insecurePortEnabled;\n    }\n    /**\n     * Gets the host name or literal IP address of the network interface that this server's insecure port is\n     * configured to be bound to.\n     *\n     * @return The host name.\n     */\n    public final String getInsecurePortBindAddress() {\n        return insecurePortBindAddress;\n    }\n    /**\n     * Sets the host name or literal IP address of the network interface that this server's insecure port should be\n     * bound to.\n     * <p>\n     * The default value of this property is {@link Constants#LOOPBACK_DEVICE_ADDRESS} on IPv4 stacks.\n     *\n     * @param address The host name or IP address.\n     * @throws NullPointerException if address is {@code null}.\n     */\n    public final void setInsecurePortBindAddress(final String address) {\n        this.insecurePortBindAddress = Objects.requireNonNull(address);\n    }\n    /**\n     * Gets the insecure port this server is configured to listen on.\n     *\n     * @return The port number.\n     */\n    public final int getInsecurePort() {\n        return insecurePort;\n    }\n    /**\n     * Gets the insecure port this server is configured to listen on.\n     *\n     * @param defaultPort The port to use if this property has not been set explicitly.\n     * @return The configured port number or the <em>defaultPort</em> if <em>insecurePort</em> is not set.\n     * @see #getInsecurePort() for more information.\n     */\n    public final int getInsecurePort(final int defaultPort) {\n        return insecurePort == Constants.PORT_UNCONFIGURED ? defaultPort : insecurePort;\n    }\n    /**\n     * Sets the insecure port that this server should listen on.\n     * <p>\n     * If the port is set to 0 (the default value), then this server will bind to an arbitrary free\n     * port chosen by the operating system during startup.\n     * <p>\n     * Setting this property also sets the <em>insecurePortEnabled</em> property to {@code true}.\n     * \n     * @param port The port number.\n     * @throws IllegalArgumentException if port &lt; 0 or port &gt; 65535.\n     */\n    public final void setInsecurePort(final int port) {\n        if (isValidPort(port)) {\n            this.insecurePort = port;\n            setInsecurePortEnabled(true);\n        } else {\n            throw new IllegalArgumentException(\"invalid port number\");\n        }\n    }\n    /**\n     * Sets the maximum size of a message payload this server accepts from clients.\n     *\n     * @param bytes The maximum number of bytes.<fim_middle>// function below has no smell\n"}