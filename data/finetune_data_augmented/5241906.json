{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.olingo.server.sample.data;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.olingo.commons.api.ex.ODataException;\nimport org.apache.olingo.commons.api.ex.ODataRuntimeException;\nimport org.apache.olingo.commons.api.data.Entity;\nimport org.apache.olingo.commons.api.data.EntityCollection;\nimport org.apache.olingo.commons.api.data.Property;\nimport org.apache.olingo.commons.api.data.ValueType;\nimport org.apache.olingo.commons.api.data.ComplexValue;\nimport org.apache.olingo.commons.api.edm.EdmEntitySet;\nimport org.apache.olingo.commons.api.edm.EdmEntityType;\nimport org.apache.olingo.commons.api.edm.EdmPrimitiveType;\nimport org.apache.olingo.commons.api.edm.EdmPrimitiveTypeException;\nimport org.apache.olingo.commons.api.edm.EdmProperty;\nimport org.apache.olingo.server.api.uri.UriParameter;\nimport org.apache.olingo.server.sample.edmprovider.CarsEdmProvider;\npublic class DataProvider {\n  private final Map<String, EntityCollection> data;\n  public DataProvider() {\n    data = new HashMap<String, EntityCollection>();\n    data.put(\"Cars\", createCars());\n    data.put(\"Manufacturers\", createManufacturers());\n  }\n  public EntityCollection readAll(EdmEntitySet edmEntitySet) {\n    return data.get(edmEntitySet.getName());\n  }\n  public Entity read(final EdmEntitySet edmEntitySet, final List<UriParameter> keys) throws DataProviderException {\n    final EdmEntityType entityType = edmEntitySet.getEntityType();\n    final EntityCollection entitySet = data.get(edmEntitySet.getName());\n    if (entitySet == null) {\n      return null;\n    } else {\n      try {\n        for (final Entity entity : entitySet.getEntities()) {\n          boolean found = true;\n          for (final UriParameter key : keys) {\n            final EdmProperty property = (EdmProperty) entityType.getProperty(key.getName());\n            final EdmPrimitiveType type = (EdmPrimitiveType) property.getType();\n            if (!type.valueToString(entity.getProperty(key.getName()).getValue(),\n                property.isNullable(), property.getMaxLength(), property.getPrecision(), property.getScale(),\n                property.isUnicode())\n                .equals(key.getText())) {\n              found = false;\n              break;\n            }\n          }\n          if (found) {\n            return entity;\n          }\n        }\n        return null;\n      } catch (final EdmPrimitiveTypeException e) {\n        throw new DataProviderException(\"Wrong key!\", e);\n      }\n    }\n  }\n<fim_suffix>  public static class DataProviderException extends ODataException {\n    private static final long serialVersionUID = 5098059649321796156L;\n    public DataProviderException(String message, Throwable throwable) {\n      super(message, throwable);\n    }\n    public DataProviderException(String message) {\n      super(message);\n    }\n  }\n  private EntityCollection createCars() {\n    EntityCollection entitySet = new EntityCollection();\n    Entity el = new Entity()\n        .addProperty(createPrimitive(\"Id\", 1))\n        .addProperty(createPrimitive(\"Model\", \"F1 W03\"))\n        .addProperty(createPrimitive(\"ModelYear\", \"2012\"))\n        .addProperty(createPrimitive(\"Price\", 189189.43))\n        .addProperty(createPrimitive(\"Currency\", \"EUR\"));\n    el.setId(createId(CarsEdmProvider.ES_CARS_NAME, 1));\n    entitySet.getEntities().add(el);\n    el = new Entity()\n        .addProperty(createPrimitive(\"Id\", 2))\n        .addProperty(createPrimitive(\"Model\", \"F1 W04\"))\n        .addProperty(createPrimitive(\"ModelYear\", \"2013\"))\n        .addProperty(createPrimitive(\"Price\", 199999.99))\n        .addProperty(createPrimitive(\"Currency\", \"EUR\"));\n    el.setId(createId(CarsEdmProvider.ES_CARS_NAME, 2));\n    entitySet.getEntities().add(el);\n    el = new Entity()\n        .addProperty(createPrimitive(\"Id\", 3))\n        .addProperty(createPrimitive(\"Model\", \"F2012\"))\n        .addProperty(createPrimitive(\"ModelYear\", \"2012\"))\n        .addProperty(createPrimitive(\"Price\", 137285.33))\n        .addProperty(createPrimitive(\"Currency\", \"EUR\"));\n    el.setId(createId(CarsEdmProvider.ES_CARS_NAME, 3));\n    entitySet.getEntities().add(el);\n    el = new Entity()\n        .addProperty(createPrimitive(\"Id\", 4))\n        .addProperty(createPrimitive(\"Model\", \"F2013\"))\n        .addProperty(createPrimitive(\"ModelYear\", \"2013\"))\n        .addProperty(createPrimitive(\"Price\", 145285.00))\n        .addProperty(createPrimitive(\"Currency\", \"EUR\"));\n    el.setId(createId(CarsEdmProvider.ES_CARS_NAME, 4));\n    entitySet.getEntities().add(el);\n    el = new Entity()\n        .addProperty(createPrimitive(\"Id\", 5))\n        .addProperty(createPrimitive(\"Model\", \"F1 W02\"))\n        .addProperty(createPrimitive(\"ModelYear\", \"2011\"))\n        .addProperty(createPrimitive(\"Price\", 167189.00))\n        .addProperty(createPrimitive(\"Currency\", \"EUR\"));\n    el.setId(createId(CarsEdmProvider.ES_CARS_NAME, 5));\n    entitySet.getEntities().add(el);\n    for (Entity entity:entitySet.getEntities()) {\n      entity.setType(CarsEdmProvider.ET_CAR.getFullQualifiedNameAsString());\n    }\n    return entitySet;\n  }\n  private EntityCollection createManufacturers() {\n    EntityCollection entitySet = new EntityCollection();\n    Entity el = new Entity()\n        .addProperty(createPrimitive(\"Id\", 1))\n        .addProperty(createPrimitive(\"Name\", \"Star Powered Racing\"))\n        .addProperty(createAddress(\"Star Street 137\", \"Stuttgart\", \"70173\", \"Germany\"));\n    el.setId(createId(CarsEdmProvider.ES_MANUFACTURER_NAME, 1));\n    entitySet.getEntities().add(el);\n    el = new Entity()\n        .addProperty(createPrimitive(\"Id\", 2))\n        .addProperty(createPrimitive(\"Name\", \"Horse Powered Racing\"))\n        .addProperty(createAddress(\"Horse Street 1\", \"Maranello\", \"41053\", \"Italy\"));\n    el.setId(createId(CarsEdmProvider.ES_MANUFACTURER_NAME, 2));\n    entitySet.getEntities().add(el);\n    for (Entity entity:entitySet.getEntities()) {\n      entity.setType(CarsEdmProvider.ET_MANUFACTURER.getFullQualifiedNameAsString());\n    }\n    return entitySet;\n  }\n  private Property createAddress(final String street, final String city, final String zipCode, final String country) {\n    ComplexValue complexValue=new ComplexValue();\n    List<Property> addressProperties = complexValue.getValue();\n    addressProperties.add(createPrimitive(\"Street\", street));\n    addressProperties.add(createPrimitive(\"City\", city));\n    addressProperties.add(createPrimitive(\"ZipCode\", zipCode));\n    addressProperties.add(createPrimitive(\"Country\", country));\n    return new Property(null, \"Address\", ValueType.COMPLEX, complexValue);\n  }\n  private Property createPrimitive(final String name, final Object value) {\n    return new Property(null, name, ValueType.PRIMITIVE, value);\n  }\n  private URI createId(String entitySetName, Object id) {\n    try {\n      return new URI(entitySetName + \"(\" + String.valueOf(id) + \")\");<fim_middle>// class below has no smell\n"}