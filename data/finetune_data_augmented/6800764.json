{"text": "<fim_prefix>                ieExplicits = ieExplicits.union(cs.ieExplicits);\n              }\n            }\n            chars = chars.union(CharRanges.withMembers(members));\n            charAlternatives.clear();\n            charAlternatives.add(\n                new Charset(chars, ieExplicits).simplify(flags));\n            n = alternatives.size();\n          }\n        }\n      }\n      switch (alternatives.size()) {\n        case 0: return Empty.INSTANCE;\n        case 1: return alternatives.get(0);\n        case 2:\n          if (alternatives.get(1) instanceof Empty) {  // (?:a|) -> a?\n            return new Repetition(alternatives.get(0), 0, 1, true);\n          } else if (alternatives.get(0) instanceof Empty) {\n            return new Repetition(alternatives.get(1), 0, 1, false);\n          }\n          break;\n      }\n      // TODO: maybe pull out common prefix or suffix\n      return alternatives.equals(this.alternatives)\n          ? this : new Alternation(alternatives);\n    }\n    @Override\n    public boolean isCaseSensitive() {\n      for (RegExpTree alternative : alternatives) {\n        if (alternative.isCaseSensitive()) { return true; }\n      }\n      return false;\n    }\n    @Override\n    public boolean containsAnchor() {\n      for (RegExpTree alternative : alternatives) {\n        if (alternative.containsAnchor()) { return true; }\n      }\n      return false;\n    }\n    @Override\n    public int numCapturingGroups() {\n      int n = 0;\n      for (RegExpTree alternative : alternatives) {\n        n += alternative.numCapturingGroups();\n      }\n      return n;\n    }\n    @Override\n    public ImmutableList<? extends RegExpTree> children() {\n      return alternatives;\n    }\n    @Override\n    protected void appendSourceCode(StringBuilder sb) {\n      for (int i = 0, n = alternatives.size(); i < n; ++i) {\n        if (i != 0) {\n          sb.append('|');\n        }\n        alternatives.get(i).appendSourceCode(sb);\n      }\n    }\n    @Override\n    protected void appendDebugInfo(StringBuilder sb) {\n      // Nothing besides children.\n    }\n    @Override\n    public boolean equals(Object o) {\n      return this == o || (\n          (o instanceof Alternation)\n          && alternatives.equals(((Alternation) o).alternatives));\n    }\n    @Override\n    public int hashCode() {\n      return 0x51b57cd1 ^ alternatives.hashCode();\n    }\n  }\n  private static final RegExpTree NEVER_MATCHES = new LookaheadAssertion(\n      Empty.INSTANCE, false);\n  /** Represents a lookahead assertion such as (?=...) or (?!...) */\n  public static final class LookaheadAssertion extends RegExpTree {\n    final RegExpTree body;\n    final boolean positive;\n    LookaheadAssertion(RegExpTree body, boolean positive) {\n      this.body = body;\n      this.positive = positive;\n    }\n    @Override\n    public RegExpTree simplify(String flags) {\n      RegExpTree simpleBody = body.simplify(flags);\n      if (simpleBody instanceof Empty) {\n        if (positive) {  // Always true\n          return simpleBody;\n        }\n      }\n      return new LookaheadAssertion(simpleBody, positive);\n    }\n    @Override\n    public boolean isCaseSensitive() {\n      return body.isCaseSensitive();\n    }\n    @Override\n    public boolean containsAnchor() {\n      return body.containsAnchor();\n    }\n    @Override\n    public int numCapturingGroups() {\n      return body.numCapturingGroups();\n    }\n    @Override\n    public ImmutableList<? extends RegExpTree> children() {\n      return ImmutableList.of(body);\n    }\n    @Override\n    protected void appendSourceCode(StringBuilder sb) {\n      sb.append(positive ? \"(?=\" : \"(?!\");\n      body.appendSourceCode(sb);\n      sb.append(')');\n    }\n    @Override\n    protected void appendDebugInfo(StringBuilder sb) {\n      sb.append(positive ? \"positive\" : \"negative\");\n    }\n    @Override\n    public boolean equals(Object o) {\n      if (!(o instanceof LookaheadAssertion)) { return false; }\n      LookaheadAssertion that = (LookaheadAssertion) o;\n      return this.positive == that.positive && this.body.equals(that.body);\n    }\n    @Override\n    public int hashCode() {\n      return 0x723aba9 ^ body.hashCode();\n    }\n  }\n  /** Represents a lookbehind assertion such as {@code (?<=...) } or  {@code (?<!...) } */\n  public static final class LookbehindAssertion extends RegExpTree {\n    final RegExpTree body;\n    final boolean positive;\n    LookbehindAssertion(RegExpTree body, boolean positive) {\n      this.body = body;\n      this.positive = positive;\n    }\n    @Override\n    public RegExpTree simplify(String flags) {\n      RegExpTree simpleBody = body.simplify(flags);\n      if (simpleBody instanceof Empty) {\n        if (positive) { // Always true\n          return simpleBody;\n        }\n      }\n      return new LookbehindAssertion(simpleBody, positive);\n    }\n    @Override\n    public boolean isCaseSensitive() {\n      return body.isCaseSensitive();\n    }\n    @Override\n    public boolean containsAnchor() {\n      return body.containsAnchor();\n    }\n    @Override\n    public int numCapturingGroups() {\n      return body.numCapturingGroups();\n    }\n    @Override\n    public ImmutableList<? extends RegExpTree> children() {\n      return ImmutableList.of(body);\n    }\n    @Override\n    protected void appendSourceCode(StringBuilder sb) {\n      sb.append(positive ? \"(?<=\" : \"(?<!\");\n      body.appendSourceCode(sb);\n      sb.append(')');\n    }\n    @Override\n    protected void appendDebugInfo(StringBuilder sb) {\n      sb.append(positive ? \"positive\" : \"negative\");\n    }\n    @Override\n    public boolean equals(Object o) {\n      if (!(o instanceof LookbehindAssertion)) {\n        return false;\n      }\n      LookbehindAssertion that = (LookbehindAssertion) o;\n      return this.positive == that.positive && this.body.equals(that.body);\n    }\n    @Override\n    public int hashCode() {\n      return 0x723aba9 ^ body.hashCode();\n    }\n  }\n  /** Represents a capturing group such as (asdf) */\n  public static final class CapturingGroup extends RegExpTree {\n    final RegExpTree body;\n    CapturingGroup(RegExpTree body) {\n      this.body = body;\n    }\n    @Override\n    public RegExpTree simplify(String flags) {\n      return new CapturingGroup(body.simplify(flags));\n    }\n    @Override\n    public boolean isCaseSensitive() {\n      return body.isCaseSensitive();\n    }\n    @Override\n    public boolean containsAnchor() {\n      return body.containsAnchor();\n    }\n    @Override\n    public int numCapturingGroups() {\n      return 1 + body.numCapturingGroups();\n    }\n    @Override\n    public ImmutableList<? extends RegExpTree> children() {\n      return ImmutableList.of(body);\n    }\n    @Override\n    protected void appendSourceCode(StringBuilder sb) {\n      sb.append('(');\n      body.appendSourceCode(sb);\n      sb.append(')');\n    }\n    @Override\n    protected void appendDebugInfo(StringBuilder sb) {\n      // Nothing besides children.\n    }\n    @Override\n    public boolean equals(Object o) {\n      return o instanceof CapturingGroup\n          && body.equals(((CapturingGroup) o).body);\n    }\n    @Override\n    public int hashCode() {\n      return 0x55781738 ^ body.hashCode();\n    }\n  }\n  /** Represents a named capture group */\n<fim_suffix>  public static final class NamedCaptureGroup extends RegExpTree {\n    final RegExpTree body;\n    final String name;\n    NamedCaptureGroup(RegExpTree body, String name) {\n      this.body = body;\n      this.name = name;\n    }\n    @Override\n    public RegExpTree simplify(String flags) {\n      return new NamedCaptureGroup(body.simplify(flags), name);\n    }\n    @Override\n    public boolean isCaseSensitive() {\n      return body.isCaseSensitive();\n    }\n    @Override\n    public boolean containsAnchor() {\n      return body.containsAnchor();\n    }\n    @Override\n    public int numCapturingGroups() {\n      return 1 + body.numCapturingGroups();\n    }\n    @Override\n    public ImmutableList<? extends RegExpTree> children() {\n      return ImmutableList.of(body);\n    }\n    @Override\n    protected void appendSourceCode(StringBuilder sb) {\n      sb.append(\"(?<\");\n      sb.append(name);\n      sb.append('>');\n      body.appendSourceCode(sb);\n      sb.append(')');\n    }\n    @Override\n    protected void appendDebugInfo(StringBuilder sb) {\n      sb.append(\" name=\").append(name);\n    }\n    @Override\n    public boolean equals(Object o) {\n      return o instanceof NamedCaptureGroup\n          && name.equals(((NamedCaptureGroup) o).name)\n          && body.equals(((NamedCaptureGroup) o).body);\n    }\n    @Override\n    public int hashCode() {\n      return Objects.hashCode(name) ^ body.hashCode();\n    }\n  }<fim_middle>// class below has no smell\n"}