{"text": "<fim_prefix>\t}\n\tprivate boolean connectionSuccess = false;\n\t/*\n\t * (non-Javadoc) Method declared on Dialog.\n\t */\n\tprotected void buttonPressed(int buttonId) {\n\t\tif (buttonId == IDialogConstants.OK_ID) {\n\t\t\tfinal ConnectThread ct = new ConnectThread(cloudServer, passcodeText.getText());\n\t\t\tgetShell().setCursor(Display.getCurrent().getSystemCursor(SWT.CURSOR_WAIT));\n\t\t\tSafeRunner.run(new SafeRunnable() {\n\t\t\t\tpublic void run() throws Exception {\n\t\t\t\t\tIServerWorkingCopy server = cloudServer.getServerWorkingCopy();\n\t\t\t\t\tif (server == null) {\n\t\t\t\t\t\tserver = cloudServer.getServer().createWorkingCopy();\n\t\t\t\t\t\tcloudServer.getBehaviour();\n\t\t\t\t\t}\n\t\t\t\t\tserver.setAttribute(CloudFoundryServer.PROP_PASSCODE_ID, passcodeText.getText());\n\t\t\t\t\tserver.save(true, new NullProgressMonitor());\n\t\t\t\t\tct.start();\n\t\t\t\t\t// Wait for thread to complete w/o blocking the UI thread.\n\t\t\t\t\tProgressMonitorDialog dialog = new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell());\n\t\t\t\t\tdialog.run(true, true, new IRunnableWithProgress() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n\t\t\t\t\t\t\twhile(!monitor.isCanceled() && !ct.isJobComplete()) {\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tCoreException exception = ct.getException();\n\t\t\t\t\tif(exception != null) {\n\t\t\t\t\t\tif(exception.getMessage() != null) {\n\t\t\t\t\t\t\tsetErrorMessage(exception.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tCloudFoundryServerUiPlugin.logError(exception);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void handleException(Throwable e) {\n\t\t\t\t\tsetErrorMessage(e.getMessage());\n\t\t\t\t\tCloudFoundryServerUiPlugin.logError(e);\n\t\t\t\t}\n\t\t\t});\n\t\t\tgetShell().setCursor(null);\n\t\t\tif (ct.isConnected()) {\n\t\t\t\tconnectionSuccess = true;\n\t\t\t\tsuper.buttonPressed(buttonId);\n\t\t\t}\n\t\t} else {\n\t\t\tsuper.buttonPressed(buttonId);\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see\n\t * org.eclipse.jface.window.Window#configureShell(org.eclipse.swt.widgets\n\t * .Shell)\n\t */\n\tprotected void configureShell(Shell shell) {\n\t\tsuper.configureShell(shell);\n\t\tshell.setText(Messages.ConnectSsoServerDialog_CONNECT_TITLE);\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see\n\t * org.eclipse.jface.dialogs.Dialog#createButtonsForButtonBar(org.eclipse\n\t * .swt.widgets.Composite)\n\t */\n\tprotected void createButtonsForButtonBar(Composite parent) {\n\t\tcreateButton(parent, IDialogConstants.OK_ID, Messages.ConnectSsoServerDialog_CONNECT_BUTTON, true);\n\t\tcreateButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);\n\t\tpasscodeText.setFocus();\n\t\tString value = cloudServer.getPasscode();\n\t\tif (value != null) {\n\t\t\tpasscodeText.setText(value);\n\t\t\tpasscodeText.selectAll();\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc) Method declared on Dialog.\n\t */\n\tprotected Control createDialogArea(Composite parent) {\n\t\tComposite composite = (Composite) super.createDialogArea(parent);\n\t\tcomposite.setLayout(new GridLayout(2, false));\n\t\tcomposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n\t\tGridData gd;\n\t\tLink prompt = new Link(composite, SWT.LEFT | SWT.WRAP);\n\t\tgd = new GridData(SWT.FILL, SWT.FILL, true, false);\n\t\tgd.horizontalSpan = 2;\n\t\tprompt.setLayoutData(gd);\n\t\tString ssoUrl = CFUiUtil.getPromptText(cloudServer);\n\t\tprompt.setText(ssoUrl);\n\t\tprompt.addListener(SWT.Selection, new Listener() {\n\t\t\t@Override\n\t\t\tpublic void handleEvent(Event event) {\n\t\t\t\tif (cloudServer.getUrl() != null && !cloudServer.getUrl().isEmpty()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tString url = CloudFoundryClientFactory.getSsoUrl(cloudServer.getUrl(), cloudServer.isSelfSigned());\n\t\t\t\t\t\tCFUiUtil.openUrl(url, WebBrowserPreference.EXTERNAL);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tCloudFoundryServerUiPlugin.logError(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tLabel passcodeLabel = new Label(composite, SWT.NONE);\n\t\tpasscodeLabel.setText(Messages.LABEL_PASSCODE);\n\t\tgd = new GridData(SWT.FILL, SWT.CENTER, false, false);\n\t\tpasscodeLabel.setLayoutData(gd);\n\t\tpasscodeText = new Text(composite, SWT.BORDER|SWT.PASSWORD);\n\t\tgd = new GridData(SWT.FILL, SWT.FILL, true, false);\n\t\tpasscodeText.setLayoutData(gd);\n\t\tpasscodeText.addModifyListener(new ModifyListener() {\n\t\t\t@Override\n\t\t\tpublic void modifyText(ModifyEvent e) {\n\t\t\t\tvalidateInput();\n\t\t\t}\n\t\t});\n\t\terrorMessageText = new Text(composite, SWT.READ_ONLY | SWT.WRAP);\n\t\tgd = new GridData(SWT.FILL, SWT.FILL, true, false);\n\t\tgd.horizontalSpan = 2;\n\t\terrorMessageText.setLayoutData(gd);\n\t\terrorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));\n\t\tsetErrorMessage(errorMessage);\n\t\tapplyDialogFont(composite);\n\t\treturn composite;\n\t}\n\t/**\n\t * Validates the input.\n\t */\n\tprotected void validateInput() {\n\t\tString errorMessage = null;\n\t\tif (passcodeText.getText().isEmpty()) {\n\t\t\terrorMessage = Messages.ConnectSsoServerDialog_Passcode_is_required;\n\t\t}\n\t\tsetErrorMessage(errorMessage);\n\t}\n\tpublic void setErrorMessage(String errorMessage) {\n\t\tthis.errorMessage = errorMessage;\n\t\tif (errorMessageText != null && !errorMessageText.isDisposed()) {\n\t\t\terrorMessageText.setText(errorMessage == null ? \" \\n \" : errorMessage); //$NON-NLS-1$\n\t\t\tboolean hasError = errorMessage != null && (StringConverter.removeWhiteSpaces(errorMessage)).length() > 0;\n\t\t\terrorMessageText.setEnabled(hasError);\n\t\t\terrorMessageText.setVisible(hasError);\n\t\t\terrorMessageText.getParent().update();\n\t\t\tControl button = getButton(IDialogConstants.OK_ID);\n\t\t\tif (button != null) {\n\t\t\t\tbutton.setEnabled(errorMessage == null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate static class ConnectThread extends Thread {\n\t\tfinal CloudFoundryServer cloudServer;\n\t\tfinal String passcodeTxt;\n\t\tboolean connectResult = false;\n\t\tboolean jobComplete = false;\n\t\tCoreException exception;\n\t\tpublic ConnectThread(CloudFoundryServer cloudServer, String passcodeTxt) {\n\t\t\tthis.cloudServer = cloudServer;\n\t\t\tthis.passcodeTxt = passcodeTxt;\n\t\t}\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tboolean result = cloudServer.getBehaviour().regenerateSsoLogin(passcodeTxt, new NullProgressMonitor());\n\t\t\t\tif(result) {\n\t\t\t\t\tRefreshServerJob refreshJob = new RefreshServerJob(cloudServer);\n\t\t\t\t\trefreshJob.setPriority(Job.SHORT);\n\t\t\t\t\trefreshJob.schedule();\n\t\t\t\t\tconnectResult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (CoreException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\texception = e;\n\t\t\t\treturn;\n\t\t\t} finally {\n\t\t\t\tjobComplete = true;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tpublic boolean isConnected() {\n\t\t\treturn connectResult;\n\t\t}\n\t\tpublic boolean isJobComplete() {\n\t\t\treturn jobComplete;\n\t\t}\n\t\tpublic CoreException getException() {\n\t\t\treturn exception;\n\t\t}\n\t}\n\tprivate static class RefreshServerJob extends Job {\n\t\tfinal CloudFoundryServer cloudServer;\n\t\tpublic RefreshServerJob(CloudFoundryServer cloudServer) {\n\t\t\tsuper(Messages.ConnectCommand_JOB_CONN_SERVER);\n\t\t\tsetSystem(false);\n\t\t\tsetUser(true);\n\t\t\tthis.cloudServer = cloudServer;\n\t\t}\n<fim_suffix>\t\t@Override\n\t\tprotected IStatus run(IProgressMonitor monitor) {\n\t\t\ttry {\n\t\t\t\tcloudServer.getBehaviour().connect(monitor);\n\t\t\t\treturn Status.OK_STATUS;\n\t\t\t} catch (CoreException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\treturn e.getStatus();\n\t\t\t}\n\t\t}<fim_middle>// function below has no smell\n"}