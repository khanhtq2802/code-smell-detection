{"text": "<fim_prefix>package org.robolectric.android.internal;\n\nimport static androidx.test.InstrumentationRegistry.getContext;\nimport static androidx.test.InstrumentationRegistry.getTargetContext;\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static com.google.common.base.Preconditions.checkState;\n\nimport android.app.Activity;\nimport android.app.Instrumentation.ActivityResult;\nimport android.content.ComponentName;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport androidx.test.internal.platform.app.ActivityInvoker;\nimport androidx.test.platform.app.InstrumentationRegistry;\nimport androidx.test.runner.lifecycle.ActivityLifecycleMonitorRegistry;\nimport androidx.test.runner.lifecycle.Stage;\nimport javax.annotation.Nullable;\nimport org.robolectric.android.controller.ActivityController;\nimport org.robolectric.android.fakes.RoboMonitoringInstrumentation;\nimport org.robolectric.shadow.api.Shadow;\nimport org.robolectric.shadows.ShadowActivity;\n\n/**\n * An {@link ActivityInvoker} that drives {@link Activity} lifecycles manually.\n *\n * <p>All the methods in this class are blocking API.\n */\npublic class LocalActivityInvoker implements ActivityInvoker {\n\n  @Nullable private ActivityController<? extends Activity> controller;\n\n  @Override\n  public void startActivity(Intent intent) {\n    controller = getInstrumentation().startActivitySyncInternal(intent);\n  }\n\n  @Override\n  public ActivityResult getActivityResult() {\n    checkNotNull(controller);\n    checkState(controller.get().isFinishing(), \"You must finish your Activity first\");\n    ShadowActivity shadowActivity = Shadow.extract(controller.get());\n    return new ActivityResult(shadowActivity.getResultCode(), shadowActivity.getResultIntent());\n  }\n\n  @Override\n  public void resumeActivity(Activity activity) {\n    checkNotNull(controller);\n    checkState(controller.get() == activity);\n    Stage stage = ActivityLifecycleMonitorRegistry.getInstance().getLifecycleStageOf(activity);\n    switch (stage) {\n      case RESUMED:\n        return;\n      case PAUSED:\n        controller.stop().restart().start().resume().postResume();\n        return;\n      case STOPPED:\n        controller.restart().start().resume().postResume();\n        return;\n      default:\n        throw new IllegalStateException(\n            String.format(\n                \"Activity's stage must be RESUMED, PAUSED or STOPPED but was %s.\", stage));\n    }\n  }\n\n  @Override\n  public void pauseActivity(Activity activity) {\n    checkNotNull(controller);\n    checkState(controller.get() == activity);\n    Stage stage = ActivityLifecycleMonitorRegistry.getInstance().getLifecycleStageOf(activity);\n    switch (stage) {\n      case RESUMED:\n        controller.pause();\n        return;\n      case PAUSED:\n        return;\n      default:\n        throw new IllegalStateException(\n            String.format(\"Activity's stage must be RESUMED or PAUSED but was %s.\", stage));\n    }\n  }\n\n  @Override\n  public void stopActivity(Activity activity) {\n    checkNotNull(controller);\n    checkState(controller.get() == activity);\n    Stage stage = ActivityLifecycleMonitorRegistry.getInstance().getLifecycleStageOf(activity);\n    switch (stage) {\n      case RESUMED:\n        controller.pause().stop();\n        return;\n      case PAUSED:\n        controller.stop();\n        return;\n      case STOPPED:\n        return;\n      default:\n        throw new IllegalStateException(\n            String.format(\n                \"Activity's stage must be RESUMED, PAUSED or STOPPED but was %s.\", stage));\n    }\n  }\n\n  @Override\n  public void recreateActivity(Activity activity) {\n    checkNotNull(controller);\n    checkState(controller.get() == activity);\n    Stage originalStage =\n        ActivityLifecycleMonitorRegistry.getInstance().getLifecycleStageOf(activity);\n    stopActivity(activity);\n    controller.recreate();\n    // Move to the original stage.\n    switch (originalStage) {\n      case RESUMED:\n        return;\n      case PAUSED:\n        pauseActivity(controller.get());\n        return;\n      case STOPPED:\n        stopActivity(controller.get());\n        return;\n      default:\n        throw new IllegalStateException(\n            String.format(\n                \"Activity's stage must be RESUMED, PAUSED or STOPPED but was %s.\", originalStage));\n    }\n  }\n\n<fim_suffix>  @Override\n  public void finishActivity(Activity activity) {\n    checkNotNull(controller);\n    checkState(controller.get() == activity);\n    activity.finish();\n    Stage stage = ActivityLifecycleMonitorRegistry.getInstance().getLifecycleStageOf(activity);\n    switch (stage) {\n      case RESUMED:\n        controller.pause().stop().destroy();\n        return;\n      case PAUSED:\n        controller.stop().destroy();\n        return;\n      case STOPPED:\n        controller.destroy();\n        return;\n      default:\n        throw new IllegalStateException(\n            String.format(\n                \"Activity's stage must be RESUMED, PAUSED or STOPPED but was %s.\", stage));\n    }\n  }\n\n  // This implementation makes sure, that the activity you are trying to launch exists\n  @Override\n  public Intent getIntentForActivity(Class<? extends Activity> activityClass) {\n    PackageManager packageManager = getTargetContext().getPackageManager();\n    ComponentName componentName = new ComponentName(getTargetContext(), activityClass);\n    Intent intent = Intent.makeMainActivity(componentName);\n    if (packageManager.resolveActivity(intent, 0) != null) {\n      return intent;\n    }\n    return Intent.makeMainActivity(new ComponentName(getContext(), activityClass));\n  }\n\n  private static RoboMonitoringInstrumentation getInstrumentation() {\n    return (RoboMonitoringInstrumentation) InstrumentationRegistry.getInstrumentation();\n  }\n}<fim_middle>// function below has no smell\n"}