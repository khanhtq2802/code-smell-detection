{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.lucene.search.spell;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\nimport org.apache.lucene.search.suggest.InputIterator;\nimport org.apache.lucene.util.BytesRef;\nimport org.apache.lucene.util.BytesRefBuilder;\nimport org.apache.lucene.util.BytesRefIterator;\nimport org.apache.lucene.util.IOUtils;\n\n\n/**\n * Dictionary represented by a text file.\n * \n * <p>Format allowed: 1 word per line:<br>\n * word1<br>\n * word2<br>\n * word3<br>\n */\npublic class PlainTextDictionary implements Dictionary {\n\n  private BufferedReader in;\n\n  /**\n   * Creates a dictionary based on a Path.\n   * <p>\n   * NOTE: content is treated as UTF-8\n   */\n  public PlainTextDictionary(Path path) throws IOException {\n    in = Files.newBufferedReader(path, StandardCharsets.UTF_8);\n  }\n\n  /**\n   * Creates a dictionary based on an inputstream.\n   * <p>\n   * NOTE: content is treated as UTF-8\n   */\n  public PlainTextDictionary(InputStream dictFile) {\n    in = new BufferedReader(IOUtils.getDecodingReader(dictFile, StandardCharsets.UTF_8));\n  }\n\n  /**\n   * Creates a dictionary based on a reader.\n   */\n  public PlainTextDictionary(Reader reader) {\n    in = new BufferedReader(reader);\n  }\n\n  @Override\n  public InputIterator getEntryIterator() throws IOException {\n    return new InputIterator.InputIteratorWrapper(new FileIterator());\n  }\n\n<fim_suffix>  final class FileIterator implements BytesRefIterator {\n    private boolean done = false;\n    private final BytesRefBuilder spare = new BytesRefBuilder();\n    @Override\n    public BytesRef next() throws IOException {\n      if (done) {\n        return null;\n      }\n      boolean success = false;\n      BytesRef result;\n      try {\n        String line;\n        if ((line = in.readLine()) != null) {\n          spare.copyChars(line);\n          result = spare.get();\n        } else {\n          done = true;\n          IOUtils.close(in);\n          result = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(in);\n        }\n      }\n      return result;\n    }\n  }\n}<fim_middle>// class below has no smell\n"}