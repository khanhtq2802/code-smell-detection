{"text": "<fim_prefix>/**\n * generated by Xtext\n */\npackage org.eclipse.xtext.parsetree.reconstr.complexrewritetest.impl;\n\nimport java.util.Collection;\n\nimport org.eclipse.emf.common.notify.NotificationChain;\n\nimport org.eclipse.emf.common.util.EList;\n\nimport org.eclipse.emf.ecore.EClass;\nimport org.eclipse.emf.ecore.InternalEObject;\n\nimport org.eclipse.emf.ecore.util.EObjectContainmentEList;\nimport org.eclipse.emf.ecore.util.InternalEList;\n\nimport org.eclipse.xtext.parsetree.reconstr.complexrewritetest.Add;\nimport org.eclipse.xtext.parsetree.reconstr.complexrewritetest.ComplexrewritetestPackage;\nimport org.eclipse.xtext.parsetree.reconstr.complexrewritetest.Expression;\n\n/**\n * <!-- begin-user-doc -->\n * An implementation of the model object '<em><b>Add</b></em>'.\n * <!-- end-user-doc -->\n * <p>\n * The following features are implemented:\n * </p>\n * <ul>\n *   <li>{@link org.eclipse.xtext.parsetree.reconstr.complexrewritetest.impl.AddImpl#getAddOperands <em>Add Operands</em>}</li>\n * </ul>\n *\n * @generated\n */\npublic class AddImpl extends ExpressionImpl implements Add\n{\n  /**\n   * The cached value of the '{@link #getAddOperands() <em>Add Operands</em>}' containment reference list.\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @see #getAddOperands()\n   * @generated\n   * @ordered\n   */\n  protected EList<Expression> addOperands;\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  protected AddImpl()\n  {\n    super();\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  protected EClass eStaticClass()\n  {\n    return ComplexrewritetestPackage.Literals.ADD;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public EList<Expression> getAddOperands()\n  {\n    if (addOperands == null)\n    {\n      addOperands = new EObjectContainmentEList<Expression>(Expression.class, this, ComplexrewritetestPackage.ADD__ADD_OPERANDS);\n    }\n    return addOperands;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n<fim_suffix>  @Override\n  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)\n  {\n    switch (featureID)\n    {\n      case ComplexrewritetestPackage.ADD__ADD_OPERANDS:\n        return ((InternalEList<?>)getAddOperands()).basicRemove(otherEnd, msgs);\n    }\n    return super.eInverseRemove(otherEnd, featureID, msgs);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public Object eGet(int featureID, boolean resolve, boolean coreType)\n  {\n    switch (featureID)\n    {\n      case ComplexrewritetestPackage.ADD__ADD_OPERANDS:\n        return getAddOperands();\n    }\n    return super.eGet(featureID, resolve, coreType);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void eSet(int featureID, Object newValue)\n  {\n    switch (featureID)\n    {\n      case ComplexrewritetestPackage.ADD__ADD_OPERANDS:\n        getAddOperands().clear();\n        getAddOperands().addAll((Collection<? extends Expression>)newValue);\n        return;\n    }\n    super.eSet(featureID, newValue);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public void eUnset(int featureID)\n  {\n    switch (featureID)\n    {\n      case ComplexrewritetestPackage.ADD__ADD_OPERANDS:\n        getAddOperands().clear();\n        return;\n    }\n    super.eUnset(featureID);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public boolean eIsSet(int featureID)\n  {\n    switch (featureID)\n    {\n      case ComplexrewritetestPackage.ADD__ADD_OPERANDS:\n        return addOperands != null && !addOperands.isEmpty();\n    }\n    return super.eIsSet(featureID);\n  }\n\n} //AddImpl<fim_middle>// function below has no smell\n"}