{"text": "<fim_prefix>/*\n * Copyright 2016-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.springframework.data.gemfire;\n\nimport org.apache.geode.cache.DataPolicy;\nimport org.apache.geode.cache.RegionShortcut;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * The RegionShortcutWrapper enum is a Java enumerated type that wraps GemFire's RegionShortcuts\n * with Spring Data GemFire RegionShortcutWrapper enumerated values.\n *\n * @author John Blum\n * @see org.apache.geode.cache.RegionShortcut\n * @since 1.4.0\n */\n@SuppressWarnings(\"unused\")\npublic enum RegionShortcutWrapper {\n\n\tLOCAL(RegionShortcut.LOCAL, DataPolicy.NORMAL),\n\tLOCAL_HEAP_LRU(RegionShortcut.LOCAL_HEAP_LRU, DataPolicy.NORMAL),\n\tLOCAL_OVERFLOW(RegionShortcut.LOCAL_OVERFLOW, DataPolicy.NORMAL),\n\tLOCAL_PERSISTENT(RegionShortcut.LOCAL_PERSISTENT, DataPolicy.PERSISTENT_REPLICATE),\n\tLOCAL_PERSISTENT_OVERFLOW(RegionShortcut.LOCAL_PERSISTENT_OVERFLOW, DataPolicy.PERSISTENT_REPLICATE),\n\tPARTITION(RegionShortcut.PARTITION, DataPolicy.PARTITION),\n\tPARTITION_HEAP_LRU(RegionShortcut.PARTITION_HEAP_LRU, DataPolicy.PARTITION),\n\tPARTITION_OVERFLOW(RegionShortcut.PARTITION_OVERFLOW, DataPolicy.PARTITION),\n\tPARTITION_PERSISTENT(RegionShortcut.PARTITION_PERSISTENT, DataPolicy.PERSISTENT_PARTITION),\n\tPARTITION_PERSISTENT_OVERFLOW(RegionShortcut.PARTITION_PERSISTENT_OVERFLOW, DataPolicy.PERSISTENT_PARTITION),\n\tPARTITION_PROXY(RegionShortcut.PARTITION_PROXY, DataPolicy.PARTITION),\n\tPARTITION_PROXY_REDUNDANT(RegionShortcut.PARTITION_PROXY_REDUNDANT, DataPolicy.PARTITION),\n\tPARTITION_REDUNDANT(RegionShortcut.PARTITION_REDUNDANT, DataPolicy.PARTITION),\n\tPARTITION_REDUNDANT_HEAP_LRU(RegionShortcut.PARTITION_REDUNDANT_HEAP_LRU, DataPolicy.PARTITION),\n\tPARTITION_REDUNDANT_OVERFLOW(RegionShortcut.PARTITION_REDUNDANT_OVERFLOW, DataPolicy.PARTITION),\n\tPARTITION_REDUNDANT_PERSISTENT(RegionShortcut.PARTITION_REDUNDANT_PERSISTENT, DataPolicy.PERSISTENT_PARTITION),\n\tPARTITION_REDUNDANT_PERSISTENT_OVERFLOW(RegionShortcut.PARTITION_REDUNDANT_PERSISTENT_OVERFLOW, DataPolicy.PERSISTENT_PARTITION),\n\tREPLICATE(RegionShortcut.REPLICATE, DataPolicy.REPLICATE),\n\tREPLICATE_HEAP_LRU(RegionShortcut.REPLICATE_HEAP_LRU, DataPolicy.REPLICATE),\n\tREPLICATE_OVERFLOW(RegionShortcut.REPLICATE_OVERFLOW, DataPolicy.REPLICATE),\n\tREPLICATE_PERSISTENT(RegionShortcut.REPLICATE_PERSISTENT, DataPolicy.PERSISTENT_REPLICATE),\n\tREPLICATE_PERSISTENT_OVERFLOW(RegionShortcut.REPLICATE_PERSISTENT_OVERFLOW, DataPolicy.PERSISTENT_REPLICATE),\n\tREPLICATE_PROXY(RegionShortcut.REPLICATE_PROXY, DataPolicy.EMPTY),\n\tUNSPECIFIED(null, null);\n\n\tprivate final DataPolicy dataPolicy;\n\n\tprivate final RegionShortcut regionShortcut;\n\n\tRegionShortcutWrapper(RegionShortcut regionShortcut, DataPolicy dataPolicy) {\n\t\tthis.regionShortcut = regionShortcut;\n\t\tthis.dataPolicy = dataPolicy;\n\t}\n\n\tpublic static RegionShortcutWrapper valueOf(RegionShortcut regionShortcut) {\n\n\t\tfor (RegionShortcutWrapper wrapper : values()) {\n\t\t\tif (ObjectUtils.nullSafeEquals(wrapper.getRegionShortcut(), regionShortcut)) {\n\t\t\t\treturn wrapper;\n\t\t\t}\n\t\t}\n\n\t\treturn RegionShortcutWrapper.UNSPECIFIED;\n\t}\n\n\tpublic DataPolicy getDataPolicy() {\n\t\treturn this.dataPolicy;\n\t}\n\n\tpublic RegionShortcut getRegionShortcut() {\n\t\treturn this.regionShortcut;\n\t}\n\n\tpublic boolean isHeapLru() {\n\t\treturn name().contains(\"HEAP_LRU\");\n\t}\n\n\tpublic boolean isLocal() {\n\t\treturn name().contains(\"LOCAL\");\n\t}\n\n\tpublic boolean isOverflow() {\n\t\treturn name().contains(\"OVERFLOW\");\n\t}\n\n<fim_suffix>\tpublic boolean isPartition() {\n\t\treturn name().contains(\"PARTITION\");\n\t}\n\n\tpublic boolean isPersistent() {\n\t\treturn name().contains(\"PERSISTENT\");\n\t}\n\n\tpublic boolean isPersistentOverflow() {\n\t\treturn (isOverflow() && isPersistent());\n\t}\n\n\tpublic boolean isProxy() {\n\t\treturn name().contains(\"PROXY\");\n\t}\n\n\tpublic boolean isRedundant() {\n\t\treturn name().contains(\"REDUNDANT\");\n\t}\n\n\tpublic boolean isReplicate() {\n\t\treturn name().contains(\"REPLICATE\");\n\t}\n}<fim_middle>// function below has no smell\n"}