{"text": "<fim_prefix>        iface.GetOperationStatus(args.req,resultHandler);\n      }\n    }\n    @org.apache.hadoop.hive.common.classification.InterfaceAudience.Public @org.apache.hadoop.hive.common.classification.InterfaceStability.Stable public static class CancelOperation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CancelOperation_args, TCancelOperationResp> {\n      public CancelOperation() {\n        super(\"CancelOperation\");\n      }\n      public CancelOperation_args getEmptyArgsInstance() {\n        return new CancelOperation_args();\n      }\n      public AsyncMethodCallback<TCancelOperationResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.thrift.AsyncProcessFunction fcall = this;\n        return new AsyncMethodCallback<TCancelOperationResp>() { \n          public void onComplete(TCancelOperationResp o) {\n            CancelOperation_result result = new CancelOperation_result();\n            result.success = o;\n            try {\n              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);\n              return;\n            } catch (Exception e) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", e);\n            }\n            fb.close();\n          }\n          public void onError(Exception e) {\n            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;\n            org.apache.thrift.TBase msg;\n            CancelOperation_result result = new CancelOperation_result();\n            {\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n              return;\n            } catch (Exception ex) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n            }\n            fb.close();\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, CancelOperation_args args, org.apache.thrift.async.AsyncMethodCallback<TCancelOperationResp> resultHandler) throws TException {\n        iface.CancelOperation(args.req,resultHandler);\n      }\n    }\n    @org.apache.hadoop.hive.common.classification.InterfaceAudience.Public @org.apache.hadoop.hive.common.classification.InterfaceStability.Stable public static class CloseOperation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CloseOperation_args, TCloseOperationResp> {\n      public CloseOperation() {\n        super(\"CloseOperation\");\n      }\n      public CloseOperation_args getEmptyArgsInstance() {\n        return new CloseOperation_args();\n      }\n      public AsyncMethodCallback<TCloseOperationResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.thrift.AsyncProcessFunction fcall = this;\n        return new AsyncMethodCallback<TCloseOperationResp>() { \n          public void onComplete(TCloseOperationResp o) {\n            CloseOperation_result result = new CloseOperation_result();\n            result.success = o;\n            try {\n              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);\n              return;\n            } catch (Exception e) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", e);\n            }\n            fb.close();\n          }\n          public void onError(Exception e) {\n            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;\n            org.apache.thrift.TBase msg;\n            CloseOperation_result result = new CloseOperation_result();\n            {\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n              return;\n            } catch (Exception ex) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n            }\n            fb.close();\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, CloseOperation_args args, org.apache.thrift.async.AsyncMethodCallback<TCloseOperationResp> resultHandler) throws TException {\n        iface.CloseOperation(args.req,resultHandler);\n      }\n    }\n    @org.apache.hadoop.hive.common.classification.InterfaceAudience.Public @org.apache.hadoop.hive.common.classification.InterfaceStability.Stable public static class GetResultSetMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetResultSetMetadata_args, TGetResultSetMetadataResp> {\n      public GetResultSetMetadata() {\n        super(\"GetResultSetMetadata\");\n      }\n      public GetResultSetMetadata_args getEmptyArgsInstance() {\n        return new GetResultSetMetadata_args();\n      }\n      public AsyncMethodCallback<TGetResultSetMetadataResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.thrift.AsyncProcessFunction fcall = this;\n        return new AsyncMethodCallback<TGetResultSetMetadataResp>() { \n          public void onComplete(TGetResultSetMetadataResp o) {\n            GetResultSetMetadata_result result = new GetResultSetMetadata_result();\n            result.success = o;\n            try {\n              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);\n              return;\n            } catch (Exception e) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", e);\n            }\n            fb.close();\n          }\n          public void onError(Exception e) {\n            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;\n            org.apache.thrift.TBase msg;\n            GetResultSetMetadata_result result = new GetResultSetMetadata_result();\n            {\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n              return;\n            } catch (Exception ex) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n            }\n            fb.close();\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, GetResultSetMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<TGetResultSetMetadataResp> resultHandler) throws TException {\n        iface.GetResultSetMetadata(args.req,resultHandler);\n      }\n    }\n<fim_suffix>    @org.apache.hadoop.hive.common.classification.InterfaceAudience.Public @org.apache.hadoop.hive.common.classification.InterfaceStability.Stable public static class FetchResults<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FetchResults_args, TFetchResultsResp> {\n      public FetchResults() {\n        super(\"FetchResults\");\n      }\n      public FetchResults_args getEmptyArgsInstance() {\n        return new FetchResults_args();\n      }\n      public AsyncMethodCallback<TFetchResultsResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.thrift.AsyncProcessFunction fcall = this;\n        return new AsyncMethodCallback<TFetchResultsResp>() { \n          public void onComplete(TFetchResultsResp o) {\n            FetchResults_result result = new FetchResults_result();\n            result.success = o;\n            try {\n              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);\n              return;\n            } catch (Exception e) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", e);\n            }\n            fb.close();\n          }\n          public void onError(Exception e) {\n            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;\n            org.apache.thrift.TBase msg;\n            FetchResults_result result = new FetchResults_result();\n            {\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n              return;\n            } catch (Exception ex) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n            }\n            fb.close();\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, FetchResults_args args, org.apache.thrift.async.AsyncMethodCallback<TFetchResultsResp> resultHandler) throws TException {\n        iface.FetchResults(args.req,resultHandler);\n      }\n    }<fim_middle>// class below has no smell\n"}