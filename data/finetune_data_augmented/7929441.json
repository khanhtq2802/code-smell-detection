{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2000, 2010 IBM Corporation and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     IBM Corporation - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.draw2d;\n\nimport org.eclipse.swt.graphics.Image;\n\nimport org.eclipse.draw2d.geometry.Dimension;\nimport org.eclipse.draw2d.geometry.Insets;\nimport org.eclipse.draw2d.geometry.Rectangle;\n\n/**\n * A Figure that simply contains an Image. Use this Figure, instead of a Label,\n * when displaying Images without any accompanying text. This figure is not\n * intended to have a layout mananger or children.\n * <P>\n * Note that it is the client's responsibility to dispose the given image. There\n * is no \"free\" resource management in draw2d.\n * \n * @author Pratik Shah\n */\npublic class ImageFigure extends AbstractImageFigure {\n\n\tprivate Image img;\n\tprivate Dimension size = new Dimension();\n\tprivate int alignment;\n\n\t/**\n\t * Constructor<br>\n\t * The default alignment is <code>PositionConstants.CENTER</code>.\n\t */\n<fim_suffix>\tpublic ImageFigure() {\n\t\tthis(null, PositionConstants.CENTER);\n\t}\n\n\t/**\n\t * Constructor<br>\n\t * The default alignment is <code>PositionConstants.CENTER</code>.\n\t * \n\t * @param image\n\t *            The Image to be displayed\n\t */\n\tpublic ImageFigure(Image image) {\n\t\tthis(image, PositionConstants.CENTER);\n\t}\n\n\t/**\n\t * Constructor\n\t * \n\t * @param image\n\t *            The Image to be displayed\n\t * @param alignment\n\t *            A PositionConstant indicating the alignment\n\t * \n\t * @see ImageFigure#setImage(Image)\n\t * @see ImageFigure#setAlignment(int)\n\t */\n\tpublic ImageFigure(Image image, int alignment) {\n\t\tsetImage(image);\n\t\tsetAlignment(alignment);\n\t}\n\n\t/**\n\t * @return The Image that this Figure displays\n\t */\n\tpublic Image getImage() {\n\t\treturn img;\n\t}\n\n\t/**\n\t * Calculates the necessary size to display the Image within the figure's\n\t * client area.\n\t * \n\t * @see org.eclipse.draw2d.Figure#getPreferredSize(int, int)\n\t */\n\tpublic Dimension getPreferredSize(int wHint, int hHint) {\n\t\tif (getInsets() == NO_INSETS)\n\t\t\treturn size;\n\t\tInsets i = getInsets();\n\t\treturn size.getExpanded(i.getWidth(), i.getHeight());\n\t}\n\n\t/**\n\t * @see org.eclipse.draw2d.Figure#paintFigure(Graphics)\n\t */\n\tprotected void paintFigure(Graphics graphics) {\n\t\tsuper.paintFigure(graphics);\n\n\t\tif (getImage() == null)\n\t\t\treturn;\n\n\t\tint x, y;\n\t\tRectangle area = getBounds().getShrinked(getInsets());\n\t\tswitch (alignment & PositionConstants.NORTH_SOUTH) {\n\t\tcase PositionConstants.NORTH:\n\t\t\ty = area.y;\n\t\t\tbreak;\n\t\tcase PositionConstants.SOUTH:\n\t\t\ty = area.y + area.height - size.height;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ty = (area.height - size.height) / 2 + area.y;\n\t\t\tbreak;\n\t\t}\n\t\tswitch (alignment & PositionConstants.EAST_WEST) {\n\t\tcase PositionConstants.EAST:\n\t\t\tx = area.x + area.width - size.width;\n\t\t\tbreak;\n\t\tcase PositionConstants.WEST:\n\t\t\tx = area.x;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tx = (area.width - size.width) / 2 + area.x;\n\t\t\tbreak;\n\t\t}\n\t\tgraphics.drawImage(getImage(), x, y);\n\t}\n\n\t/**\n\t * Sets the alignment of the Image within this Figure. The alignment comes\n\t * into play when the ImageFigure is larger than the Image. The alignment\n\t * could be any valid combination of the following:\n\t * \n\t * <UL>\n\t * <LI>PositionConstants.NORTH</LI>\n\t * <LI>PositionConstants.SOUTH</LI>\n\t * <LI>PositionConstants.EAST</LI>\n\t * <LI>PositionConstants.WEST</LI>\n\t * <LI>PositionConstants.CENTER or PositionConstants.NONE</LI>\n\t * </UL>\n\t * \n\t * @param flag\n\t *            A constant indicating the alignment\n\t */\n\tpublic void setAlignment(int flag) {\n\t\talignment = flag;\n\t}\n\n\t/**\n\t * Sets the Image that this ImageFigure displays.\n\t * <p>\n\t * IMPORTANT: Note that it is the client's responsibility to dispose the\n\t * given image.\n\t * \n\t * @param image\n\t *            The Image to be displayed. It can be <code>null</code>.\n\t */\n\tpublic void setImage(Image image) {\n\t\tif (img == image)\n\t\t\treturn;\n\t\timg = image;\n\t\tif (img != null)\n\t\t\tsize = new Rectangle(image.getBounds()).getSize();\n\t\telse\n\t\t\tsize = new Dimension();\n\t\trevalidate();\n\t\tnotifyImageChanged();\n\t\trepaint();\n\t}\n\n}<fim_middle>// function below has no smell\n"}