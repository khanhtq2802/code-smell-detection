{"text": "<fim_prefix>/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.endpoint.web.annotation;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.boot.actuate.endpoint.EndpointFilter;\nimport org.springframework.boot.actuate.endpoint.EndpointId;\nimport org.springframework.boot.actuate.endpoint.Operation;\nimport org.springframework.boot.actuate.endpoint.annotation.DiscoveredOperationMethod;\nimport org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer;\nimport org.springframework.boot.actuate.endpoint.invoke.OperationInvoker;\nimport org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper;\nimport org.springframework.boot.actuate.endpoint.web.ExposableServletEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.PathMapper;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.core.annotation.AnnotatedElementUtils;\nimport org.springframework.util.ClassUtils;\n\n/**\n * {@link EndpointDiscoverer} for {@link ExposableServletEndpoint servlet endpoints}.\n *\n * @author Phillip Webb\n * @since 2.0.0\n */\n<fim_suffix>public class ServletEndpointDiscoverer\n\t\textends EndpointDiscoverer<ExposableServletEndpoint, Operation>\n\t\timplements ServletEndpointsSupplier {\n\n\tprivate final List<PathMapper> endpointPathMappers;\n\n\t/**\n\t * Create a new {@link ServletEndpointDiscoverer} instance.\n\t * @param applicationContext the source application context\n\t * @param endpointPathMappers the endpoint path mappers\n\t * @param filters filters to apply\n\t */\n\tpublic ServletEndpointDiscoverer(ApplicationContext applicationContext,\n\t\t\tList<PathMapper> endpointPathMappers,\n\t\t\tCollection<EndpointFilter<ExposableServletEndpoint>> filters) {\n\t\tsuper(applicationContext, ParameterValueMapper.NONE, Collections.emptyList(),\n\t\t\t\tfilters);\n\t\tthis.endpointPathMappers = endpointPathMappers;\n\t}\n\n\t@Override\n\tprotected boolean isEndpointExposed(Object endpointBean) {\n\t\tClass<?> type = ClassUtils.getUserClass(endpointBean.getClass());\n\t\treturn AnnotatedElementUtils.isAnnotated(type, ServletEndpoint.class);\n\t}\n\n\t@Override\n\tprotected ExposableServletEndpoint createEndpoint(Object endpointBean, EndpointId id,\n\t\t\tboolean enabledByDefault, Collection<Operation> operations) {\n\t\tString rootPath = PathMapper.getRootPath(this.endpointPathMappers, id);\n\t\treturn new DiscoveredServletEndpoint(this, endpointBean, id, rootPath,\n\t\t\t\tenabledByDefault);\n\t}\n\n\t@Override\n\tprotected Operation createOperation(EndpointId endpointId,\n\t\t\tDiscoveredOperationMethod operationMethod, OperationInvoker invoker) {\n\t\tthrow new IllegalStateException(\"ServletEndpoints must not declare operations\");\n\t}\n\n\t@Override\n\tprotected OperationKey createOperationKey(Operation operation) {\n\t\tthrow new IllegalStateException(\"ServletEndpoints must not declare operations\");\n\t}\n\n}<fim_middle>// class below has no smell\n"}