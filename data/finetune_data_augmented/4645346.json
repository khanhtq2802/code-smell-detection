{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.streaming.runtime.operators.windowing.functions;\n\nimport org.apache.flink.api.common.functions.IterationRuntimeContext;\nimport org.apache.flink.api.common.functions.RuntimeContext;\nimport org.apache.flink.api.java.operators.translation.WrappingFunction;\nimport org.apache.flink.streaming.api.functions.windowing.ProcessWindowFunction;\nimport org.apache.flink.streaming.api.windowing.windows.Window;\nimport org.apache.flink.util.Collector;\n\n/**\n * Internal window function for wrapping a {@link ProcessWindowFunction} that takes an {@code Iterable}\n * when the window state also is an {@code Iterable}.\n */\n<fim_suffix>public final class InternalIterableProcessWindowFunction<IN, OUT, KEY, W extends Window>\n\t\textends WrappingFunction<ProcessWindowFunction<IN, OUT, KEY, W>>\n\t\timplements InternalWindowFunction<Iterable<IN>, OUT, KEY, W> {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\tprivate final InternalProcessWindowContext<IN, OUT, KEY, W> ctx;\n\n\tpublic InternalIterableProcessWindowFunction(ProcessWindowFunction<IN, OUT, KEY, W> wrappedFunction) {\n\t\tsuper(wrappedFunction);\n\t\tthis.ctx = new InternalProcessWindowContext<>(wrappedFunction);\n\t}\n\n\t@Override\n\tpublic void process(KEY key, final W window, final InternalWindowContext context, Iterable<IN> input, Collector<OUT> out) throws Exception {\n\t\tthis.ctx.window = window;\n\t\tthis.ctx.internalContext = context;\n\t\tProcessWindowFunction<IN, OUT, KEY, W> wrappedFunction = this.wrappedFunction;\n\t\twrappedFunction.process(key, ctx, input, out);\n\t}\n\n\t@Override\n\tpublic void clear(final W window, final InternalWindowContext context) throws Exception {\n\t\tthis.ctx.window = window;\n\t\tthis.ctx.internalContext = context;\n\t\tProcessWindowFunction<IN, OUT, KEY, W> wrappedFunction = this.wrappedFunction;\n\t\twrappedFunction.clear(ctx);\n\t}\n\n\t@Override\n\tpublic RuntimeContext getRuntimeContext() {\n\t\tthrow new RuntimeException(\"This should never be called.\");\n\t}\n\n\t@Override\n\tpublic IterationRuntimeContext getIterationRuntimeContext() {\n\t\tthrow new RuntimeException(\"This should never be called.\");\n\t}\n}<fim_middle>// class below has no smell\n"}