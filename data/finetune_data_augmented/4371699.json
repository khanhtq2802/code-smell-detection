{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.cxf.staxutils;\n\nimport javax.xml.namespace.NamespaceContext;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamWriter;\n\n\npublic class DelegatingXMLStreamWriter implements XMLStreamWriter {\n    protected final XMLStreamWriter delegate;\n\n    public DelegatingXMLStreamWriter(XMLStreamWriter del) {\n        delegate = del;\n    }\n\n    public void close() throws XMLStreamException {\n        delegate.close();\n    }\n\n    public void flush() throws XMLStreamException {\n        delegate.flush();\n    }\n\n    public NamespaceContext getNamespaceContext() {\n        return delegate.getNamespaceContext();\n    }\n\n\n\n\n    public String getPrefix(String uri) throws XMLStreamException {\n        return delegate.getPrefix(uri);\n    }\n\n    public Object getProperty(String name) throws IllegalArgumentException {\n        return delegate.getProperty(name);\n    }\n\n    public void setDefaultNamespace(String uri) throws XMLStreamException {\n        delegate.setDefaultNamespace(uri);\n    }\n\n    public void setNamespaceContext(NamespaceContext ctx) throws XMLStreamException {\n        delegate.setNamespaceContext(ctx);\n    }\n\n    public void setPrefix(String pfx, String uri) throws XMLStreamException {\n        delegate.setPrefix(pfx, uri);\n    }\n\n    public void writeAttribute(String prefix, String uri,\n                               String local, String value) throws XMLStreamException {\n        delegate.writeAttribute(prefix, uri, local, value);\n    }\n\n    public void writeAttribute(String uri, String local, String value) throws XMLStreamException {\n        delegate.writeAttribute(uri, local, value);\n    }\n\n    public void writeAttribute(String local, String value) throws XMLStreamException {\n        delegate.writeAttribute(local, value);\n    }\n\n    public void writeCData(String cdata) throws XMLStreamException {\n        delegate.writeCData(cdata);\n    }\n\n    public void writeCharacters(char[] arg0, int arg1, int arg2) throws XMLStreamException {\n        delegate.writeCharacters(arg0, arg1, arg2);\n    }\n\n    public void writeCharacters(String text) throws XMLStreamException {\n        delegate.writeCharacters(text);\n    }\n\n    public void writeComment(String text) throws XMLStreamException {\n        delegate.writeComment(text);\n    }\n\n    public void writeDefaultNamespace(String uri) throws XMLStreamException {\n        delegate.writeDefaultNamespace(uri);\n    }\n\n    public void writeDTD(String dtd) throws XMLStreamException {\n        delegate.writeDTD(dtd);\n    }\n\n    public void writeEmptyElement(String prefix, String local, String uri) throws XMLStreamException {\n        delegate.writeEmptyElement(prefix, local, uri);\n    }\n\n    public void writeEmptyElement(String uri, String local) throws XMLStreamException {\n        delegate.writeEmptyElement(uri, local);\n    }\n\n    public void writeEmptyElement(String localName) throws XMLStreamException {\n        delegate.writeEmptyElement(localName);\n    }\n\n    public void writeEndDocument() throws XMLStreamException {\n        delegate.writeEndDocument();\n    }\n\n    public void writeEndElement() throws XMLStreamException {\n        delegate.writeEndElement();\n    }\n\n<fim_suffix>    public void writeEntityRef(String ent) throws XMLStreamException {\n        delegate.writeEntityRef(ent);\n    }\n\n    public void writeNamespace(String prefix, String uri) throws XMLStreamException {\n        delegate.writeNamespace(prefix, uri);\n    }\n\n    public void writeProcessingInstruction(String target, String data) throws XMLStreamException {\n        delegate.writeProcessingInstruction(target, data);\n    }\n\n    public void writeProcessingInstruction(String target) throws XMLStreamException {\n        delegate.writeProcessingInstruction(target);\n    }\n\n    public void writeStartDocument() throws XMLStreamException {\n        delegate.writeStartDocument();\n    }\n\n    public void writeStartDocument(String encoding, String ver) throws XMLStreamException {\n        delegate.writeStartDocument(encoding, ver);\n    }\n\n    public void writeStartDocument(String ver) throws XMLStreamException {\n        delegate.writeStartDocument(ver);\n    }\n\n    public void writeStartElement(String prefix, String local, String uri) throws XMLStreamException {\n        delegate.writeStartElement(prefix, local, uri);\n    }\n\n    public void writeStartElement(String uri, String local) throws XMLStreamException {\n        delegate.writeStartElement(uri, local);\n    }\n\n    public void writeStartElement(String local) throws XMLStreamException {\n        delegate.writeStartElement(local);\n    }\n\n\n}<fim_middle>// function below has no smell\n"}