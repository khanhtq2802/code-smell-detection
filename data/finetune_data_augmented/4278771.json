{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.curator.x.async.modeled.typed;\n\nimport org.apache.curator.x.async.modeled.ZPath;\n\n/**\n * <p>\n *     Abstraction that allows the construction of ZPaths using strongly typed parameter replacements.\n *     For example, given a path such as \"/root/registry/people/{id}\" where \"id\" should be <code>PersonId</code>.\n * </p>\n *\n * <p>\n * <pre><code>\n * TypedZPath&lt;PersonId&gt; typedPath = TypedZPath.from(\"/root/registry/people/{id}\");\n *\n * ...\n *\n * ZPath path = typedPath.resolved(personId);\n * </pre></code>\n * </p>\n *\n * <p>\n *     Additionally, if you have a model/class that implements {@link org.apache.curator.x.async.modeled.NodeName}\n *     you can pass that when resolving. E.g.\n * </p>\n *\n * <p>\n * <pre><code>\n * public class MyModel implements NodeName {\n *     ...\n *     public String nodeName() {\n *         return modelId;\n *     }\n * }\n *\n * TypedZPath&lt;MyModel&gt; typedPath = TypedZPath.from(\"/foo/bar/{id}\");\n *\n * MyModel model = ...\n * ZPath path = typedPath.resolved(model);\n * </pre></code>\n * </p>\n */\n<fim_suffix>@FunctionalInterface\npublic interface TypedZPath<T>\n{\n    /**\n     * Resolve into a ZPath using the given parameter\n     *\n     * @param p1 the parameter\n     * @return ZPath\n     */\n    ZPath resolved(T p1);\n\n    /**\n     * Return a TypedZPath using {@link org.apache.curator.x.async.modeled.ZPath#parseWithIds}\n     *\n     * @param pathWithIds path to pass to {@link org.apache.curator.x.async.modeled.ZPath#parseWithIds}\n     * @return TypedZPath\n     */\n    static <T> TypedZPath<T> from(String pathWithIds)\n    {\n        return from(ZPath.parseWithIds(pathWithIds));\n    }\n\n    /**\n     * Return a TypedZPath\n     *\n     * @param path path to use\n     * @return TypedZPath\n     */\n    static <T> TypedZPath<T> from(ZPath path)\n    {\n        return path::resolved;\n    }\n}<fim_middle>// class below has no smell\n"}