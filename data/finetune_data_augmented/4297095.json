{"text": "<fim_prefix>        VUtil.assertNotNull(perm, GlobalErrIds.PERM_OBJECT_NULL, methodName);\n        VUtil.assertNotNull(role, GlobalErrIds.ROLE_NULL, methodName);\n        boolean result;\n        FortRequest request = new FortRequest();\n        request.setContextId(this.contextId);\n        RolePerm context = new RolePerm();\n        context.setPerm(perm);\n        context.setRole(role);\n        request.setSession(session);\n        request.setEntity(context);\n        String szRequest = RestUtils.marshal(request);\n        String szResponse = RestUtils.getInstance().post(szRequest, HttpIds.ADMIN_GRANT);\n        FortResponse response = RestUtils.unmarshall(szResponse);\n        if (response.getErrorCode() == 0)\n        {\n            result = response.getAuthorized();\n            Session outSession = response.getSession();\n            session.copy(outSession);\n        }\n        else\n        {\n            throw new SecurityException(response.getErrorCode(), response.getErrorMessage());\n        }\n        return result;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean canRevoke(Session session, Role role, Permission perm)\n        throws SecurityException\n    {\n        String methodName = CLS_NM + \"canRevoke\";\n        VUtil.assertNotNull(session, GlobalErrIds.USER_SESS_NULL, methodName);\n        VUtil.assertNotNull(perm, GlobalErrIds.PERM_OBJECT_NULL, methodName);\n        VUtil.assertNotNull(role, GlobalErrIds.ROLE_NULL, methodName);\n        boolean result;\n        FortRequest request = new FortRequest();\n        request.setContextId(this.contextId);\n        RolePerm context = new RolePerm();\n        context.setPerm(perm);\n        context.setRole(role);\n        request.setSession(session);\n        request.setEntity(context);\n        String szRequest = RestUtils.marshal(request);\n        String szResponse = RestUtils.getInstance().post(szRequest, HttpIds.ADMIN_REVOKE);\n        FortResponse response = RestUtils.unmarshall(szResponse);\n        if (response.getErrorCode() == 0)\n        {\n            result = response.getAuthorized();\n            Session outSession = response.getSession();\n            session.copy(outSession);\n        }\n        else\n        {\n            throw new SecurityException(response.getErrorCode(), response.getErrorMessage());\n        }\n        return result;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean checkAccess(Session session, Permission perm)\n        throws SecurityException\n    {\n        String methodName = CLS_NM + \".checkAccess\";\n        VUtil.assertNotNull(perm, GlobalErrIds.PERM_NULL, methodName);\n        VUtil.assertNotNullOrEmpty(perm.getOpName(), GlobalErrIds.PERM_OPERATION_NULL, methodName);\n        VUtil.assertNotNullOrEmpty(perm.getObjName(), GlobalErrIds.PERM_OBJECT_NULL, methodName);\n        VUtil.assertNotNull(session, GlobalErrIds.USER_SESS_NULL, methodName);\n        boolean result;\n        FortRequest request = new FortRequest();\n        request.setContextId(this.contextId);\n        request.setSession(session);\n        request.setEntity(perm);\n        String szRequest = RestUtils.marshal(request);\n        String szResponse = RestUtils.getInstance().post(szRequest, HttpIds.ADMIN_AUTHZ);\n        FortResponse response = RestUtils.unmarshall(szResponse);\n        if (response.getErrorCode() == 0)\n        {\n            result = response.getAuthorized();\n            Session outSession = response.getSession();\n            session.copy(outSession);\n        }\n        else\n        {\n            throw new SecurityException(response.getErrorCode(), response.getErrorMessage());\n        }\n        return result;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void addActiveRole(Session session, UserAdminRole role)\n        throws SecurityException\n    {\n        String methodName = CLS_NM + \".addActiveRole\";\n        VUtil.assertNotNull(session, GlobalErrIds.USER_SESS_NULL, methodName);\n        VUtil.assertNotNull(role, GlobalErrIds.ARLE_NULL, methodName);\n        FortRequest request = new FortRequest();\n        request.setContextId(this.contextId);\n        request.setSession(session);\n        request.setEntity(role);\n        String szRequest = RestUtils.marshal(request);\n        String szResponse = RestUtils.getInstance().post(szRequest, HttpIds.ADMIN_ADD);\n        FortResponse response = RestUtils.unmarshall(szResponse);\n        if (response.getErrorCode() == 0)\n        {\n            Session outSession = response.getSession();\n            session.copy(outSession);\n        }\n        else\n        {\n            throw new SecurityException(response.getErrorCode(), response.getErrorMessage());\n        }\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void dropActiveRole(Session session, UserAdminRole role)\n        throws SecurityException\n    {\n        String methodName = CLS_NM + \".dropActiveRole\";\n        VUtil.assertNotNull(session, GlobalErrIds.USER_SESS_NULL, methodName);\n        VUtil.assertNotNull(role, GlobalErrIds.ARLE_NULL, methodName);\n        FortRequest request = new FortRequest();\n        request.setContextId(this.contextId);\n        request.setSession(session);\n        request.setEntity(role);\n        String szRequest = RestUtils.marshal(request);\n        String szResponse = RestUtils.getInstance().post(szRequest, HttpIds.ADMIN_DROP);\n        FortResponse response = RestUtils.unmarshall(szResponse);\n        if (response.getErrorCode() == 0)\n        {\n            Session outSession = response.getSession();\n            session.copy(outSession);\n        }\n        else\n        {\n            throw new SecurityException(response.getErrorCode(), response.getErrorMessage());\n        }\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public List<UserAdminRole> sessionAdminRoles(Session session)\n        throws SecurityException\n    {\n        VUtil.assertNotNull(session, GlobalErrIds.USER_SESS_NULL, CLS_NM + \".sessionAdminRoles\");\n        List<UserAdminRole> roles;\n        FortRequest request = new FortRequest();\n        request.setContextId(this.contextId);\n        request.setSession(session);\n        String szRequest = RestUtils.marshal(request);\n        String szResponse = RestUtils.getInstance().post(szRequest, HttpIds.ADMIN_ROLES);\n        FortResponse response = RestUtils.unmarshall(szResponse);\n        if (response.getErrorCode() == 0)\n        {\n            roles = response.getEntities();\n            Session outSession = response.getSession();\n            session.copy(outSession);\n        }\n        else\n        {\n            throw new SecurityException(response.getErrorCode(), response.getErrorMessage());\n        }\n        return roles;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Set<String> authorizedAdminRoles(Session session)\n        throws SecurityException\n    {\n        VUtil.assertNotNull(session, GlobalErrIds.USER_SESS_NULL, CLS_NM + \".authorizedAdminRoles\");\n        Set<String> retRoleNames = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n        FortRequest request = new FortRequest();\n        request.setContextId(this.contextId);\n        request.setSession(session);\n        String szRequest = RestUtils.marshal(request);\n        String szResponse = RestUtils.getInstance().post(szRequest, HttpIds.ADMIN_AUTHZ_ROLES);\n        FortResponse response = RestUtils.unmarshall(szResponse);\n        if (response.getErrorCode() == 0)\n        {\n            Set<String> tempNames = response.getValueSet();\n            // This is done to use a case insensitive TreeSet for returned names.\n            retRoleNames.addAll(tempNames);\n            Session outSession = response.getSession();\n            session.copy(outSession);\n        }\n        else\n        {\n            throw new SecurityException(response.getErrorCode(), response.getErrorMessage());\n        }\n        return retRoleNames;\n    }\n    /**\n     * {@inheritDoc}\n     */\n<fim_suffix>    @Override\n    public List<Permission> sessionPermissions(Session session)\n        throws SecurityException\n    {\n        VUtil.assertNotNull(session, GlobalErrIds.USER_SESS_NULL, CLS_NM + \".sessionPermissions\");\n        List<Permission> retPerms;\n        FortRequest request = new FortRequest();\n        request.setContextId(this.contextId);\n        request.setSession(session);\n        String szRequest = RestUtils.marshal(request);\n        String szResponse = RestUtils.getInstance().post(szRequest, HttpIds.ADMIN_PERMS);\n        FortResponse response = RestUtils.unmarshall(szResponse);\n        if (response.getErrorCode() == 0)\n        {\n            retPerms = response.getEntities();\n            Session outSession = response.getSession();\n            session.copy(outSession);\n        }\n        else\n        {\n            throw new SecurityException(response.getErrorCode(), response.getErrorMessage());\n        }\n        return retPerms;\n    }<fim_middle>// function below has no smell\n"}