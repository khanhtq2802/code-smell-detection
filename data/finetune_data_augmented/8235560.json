{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cocoon.environment;\n\nimport org.apache.cocoon.environment.internal.EnvironmentHelper;\n\n/**\n * A <code>Runnable</code> wrapper or base class that inherits the execution\n * context of the thread creating it, as it was at the time of creation.\n * <p>\n * It is meant to be used when processing of a request is to be split across several\n * cooperating threads (e.g. parallel aggregation).\n * <p>\n * <strong>Note</strong>: a <code>CocoonRunnable</code> should not live longer than the\n * end of the execution of the request in the creating thread, otherwise some unexpected\n * behaviours may happen because the parent's environment has been released.\n * \n * @since 2.1.8\n * @version $Id$\n */\n<fim_suffix>public class CocoonRunnable extends EnvironmentHelper.AbstractCocoonRunnable {\n    Runnable target;\n\n    /**\n     * Creates an empty <code>CocoonRunnable</code> and copies the environment context\n     * of the calling thread, for later use when calling {@link #doRun()}. Users of this\n     * constructor will override the {@link #doRun()} method where the actual job gets done.\n     */\n    public CocoonRunnable() {\n        // Nothing special here\n    }\n\n    /**\n     * Wraps an existing <code>Runnable</code> and copies the environment context of\n     * the calling thread, for later use when the <code>Runnable</code>'s <code>run()</code>\n     * method is called.\n     * \n     * @param target the wrapped <code>Runnable</code>\n     */\n    public CocoonRunnable(Runnable target) {\n        this.target = target;\n    }\n\n    /**\n     * Does the actual job, in the environment of the creating thread. Calls the wrapped\n     * <code>Runnable</code> if one was given, and does nothing otherwise.\n     */\n    protected void doRun() {\n        if (target != null) {\n            target.run();\n        }\n    }\n}<fim_middle>// class below has no smell\n"}