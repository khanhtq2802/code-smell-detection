{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.solr.update.processor;\n\nimport static org.apache.solr.common.SolrException.ErrorCode;\n\nimport java.io.IOException;\nimport java.lang.invoke.MethodHandles;\n\nimport org.apache.solr.common.SolrException;\nimport org.apache.solr.common.params.SolrParams;\nimport org.apache.solr.common.util.NamedList;\nimport org.apache.solr.common.util.SimpleOrderedMap;\nimport org.apache.solr.request.SolrQueryRequest;\nimport org.apache.solr.response.SolrQueryResponse;\nimport org.apache.solr.update.CommitUpdateCommand;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * <p>\n * Gives system administrators a way to ignore explicit commit or optimize requests from clients.\n * The factory can be configured to return a specific HTTP response code, default is 403, and\n * optional response message, such as to warn the client application that its request was ignored.\n * </p>\n * @since 5.0.0\n */\n<fim_suffix>public class IgnoreCommitOptimizeUpdateProcessorFactory extends UpdateRequestProcessorFactory {\n  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n\n  private static final String DEFAULT_RESPONSE_MSG = \"Explicit commit/optimize requests are forbidden!\";\n  \n  protected ErrorCode errorCode;\n  protected String responseMsg;\n  protected boolean ignoreOptimizeOnly = false; // default behavior is to ignore commits and optimize\n\n  @Override\n  public void init(final NamedList args) {\n    SolrParams params = (args != null) ? args.toSolrParams() : null;\n    if (params == null) {\n      errorCode = ErrorCode.FORBIDDEN; // default is 403 error\n      responseMsg = DEFAULT_RESPONSE_MSG;\n      ignoreOptimizeOnly = false;\n      return;\n    }\n\n    ignoreOptimizeOnly = params.getBool(\"ignoreOptimizeOnly\", false);\n\n    int statusCode = params.getInt(\"statusCode\", ErrorCode.FORBIDDEN.code);\n    if (statusCode == 200) {\n      errorCode = null; // not needed but makes the logic clearer\n      responseMsg = params.get(\"responseMessage\"); // OK to be null for 200's\n    } else {\n      errorCode = ErrorCode.getErrorCode(statusCode);\n      if (errorCode == ErrorCode.UNKNOWN) {\n        // only allow the error codes supported by the SolrException.ErrorCode class\n        StringBuilder validCodes = new StringBuilder();\n        int appended = 0;\n        for (ErrorCode code : ErrorCode.values()) {\n          if (code != ErrorCode.UNKNOWN) {\n            if (appended++ > 0) validCodes.append(\", \");\n            validCodes.append(code.code);\n          }\n        }\n        throw new IllegalArgumentException(\"Configured status code \" + statusCode +\n            \" not supported! Please choose one of: \" + validCodes.toString());\n      }\n\n      // must always have a response message if sending an error code\n      responseMsg = params.get(\"responseMessage\", DEFAULT_RESPONSE_MSG);\n    }\n  }\n\n  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return new IgnoreCommitOptimizeUpdateProcessor(rsp, this, next);\n  }\n  \n  static class IgnoreCommitOptimizeUpdateProcessor extends UpdateRequestProcessor {\n\n    private final SolrQueryResponse rsp;\n    private final ErrorCode errorCode;\n    private final String responseMsg;\n    private final boolean ignoreOptimizeOnly;\n\n    IgnoreCommitOptimizeUpdateProcessor(SolrQueryResponse rsp,\n                                        IgnoreCommitOptimizeUpdateProcessorFactory factory,\n                                        UpdateRequestProcessor next)\n    {\n      super(next);\n      this.rsp = rsp;\n      this.errorCode = factory.errorCode;\n      this.responseMsg = factory.responseMsg;\n      this.ignoreOptimizeOnly = factory.ignoreOptimizeOnly;\n    }\n\n    @Override\n    public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n      if (ignoreOptimizeOnly && !cmd.optimize) {\n        // we're setup to only ignore optimize requests so it's OK to pass this commit on down the line\n        if (next != null) next.processCommit(cmd);\n        return;\n      }\n\n      if (cmd.getReq().getParams().getBool(DistributedUpdateProcessor.COMMIT_END_POINT, false)) {\n        // this is a targeted commit from replica to leader needed for recovery, so can't be ignored\n        if (next != null) next.processCommit(cmd);\n        return;\n      }\n\n      final String cmdType = cmd.optimize ? \"optimize\" : \"commit\";\n      if (errorCode != null) {\n        IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n            \"{} from client application ignored with error code: {}\", cmdType, errorCode.code);\n        rsp.setException(new SolrException(errorCode, responseMsg));\n      } else {\n        // errorcode is null, treat as a success with an optional message warning the commit request was ignored\n        IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n            \"{} from client application ignored with status code: 200\", cmdType);\n        if (responseMsg != null) {\n          NamedList<Object> responseHeader = rsp.getResponseHeader();\n          if (responseHeader != null) {\n            responseHeader.add(\"msg\", responseMsg);\n          } else {\n            responseHeader = new SimpleOrderedMap<Object>();\n            responseHeader.add(\"msg\", responseMsg);\n            rsp.addResponseHeader(responseHeader);\n          }\n        }\n      }\n    }\n  }\n}<fim_middle>// class below has no smell\n"}