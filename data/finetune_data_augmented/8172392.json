{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.activemq.network;\n\nimport org.apache.activemq.management.CountStatisticImpl;\nimport org.apache.activemq.management.StatsImpl;\n\n/**\n * The Statistics for a NetworkBridge.\n */\n<fim_suffix>public class NetworkBridgeStatistics extends StatsImpl {\n\n    protected CountStatisticImpl enqueues;\n    protected CountStatisticImpl dequeues;\n    protected CountStatisticImpl receivedCount;\n\n    public NetworkBridgeStatistics() {\n        enqueues = new CountStatisticImpl(\"enqueues\", \"The current number of enqueues this bridge has, which is the number of potential messages to be forwarded.\");\n        dequeues = new CountStatisticImpl(\"dequeues\", \"The current number of dequeues this bridge has, which is the number of messages received by the remote broker.\");\n        receivedCount = new CountStatisticImpl(\"receivedCount\", \"The number of messages that have been received by the NetworkBridge from the remote broker.  Only applies for Duplex bridges.\");\n\n        addStatistic(\"enqueues\", enqueues);\n        addStatistic(\"dequeues\", dequeues);\n        addStatistic(\"receivedCount\", receivedCount);\n    }\n\n    /**\n     * The current number of enqueues this bridge has, which is the number of potential messages to be forwarded\n     * Messages may not be forwarded if there is no subscription\n     *\n     * @return\n     */\n    public CountStatisticImpl getEnqueues() {\n        return enqueues;\n    }\n\n    /**\n     * The current number of dequeues this bridge has, which is the number of\n     * messages actually sent to and received by the remote broker.\n     *\n     * @return\n     */\n    public CountStatisticImpl getDequeues() {\n        return dequeues;\n    }\n\n    /**\n     * The number of messages that have been received by the NetworkBridge from the remote broker.\n     * Only applies for Duplex bridges.\n     *\n     * @return\n     */\n    public CountStatisticImpl getReceivedCount() {\n        return receivedCount;\n    }\n\n    @Override\n    public void reset() {\n        if (this.isDoReset()) {\n            super.reset();\n            enqueues.reset();\n            dequeues.reset();\n            receivedCount.reset();\n        }\n    }\n\n    @Override\n    public void setEnabled(boolean enabled) {\n        super.setEnabled(enabled);\n        enqueues.setEnabled(enabled);\n        dequeues.setEnabled(enabled);\n        receivedCount.setEnabled(enabled);\n    }\n\n    public void setParent(NetworkBridgeStatistics parent) {\n        if (parent != null) {\n            enqueues.setParent(parent.enqueues);\n            dequeues.setParent(parent.dequeues);\n            receivedCount.setParent(parent.receivedCount);\n        } else {\n            enqueues.setParent(null);\n            dequeues.setParent(null);\n            receivedCount.setParent(null);\n        }\n    }\n\n}<fim_middle>// class below is data class\n"}