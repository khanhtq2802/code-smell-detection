{"text": "<fim_prefix>\n<fim_suffix>public final class SupBookRecord extends StandardRecord {\n    private final static POILogger logger = POILogFactory.getLogger(SupBookRecord.class);\n    public final static short sid = 0x01AE;\n    private static final short SMALL_RECORD_SIZE = 4;\n    private static final short TAG_INTERNAL_REFERENCES = 0x0401;\n    private static final short TAG_ADD_IN_FUNCTIONS = 0x3A01;\n    private short field_1_number_of_sheets;\n    private String field_2_encoded_url;\n    private String[] field_3_sheet_names;\n    private boolean _isAddInFunctions;\n    protected static final char CH_VOLUME = 1;\n    protected static final char CH_SAME_VOLUME = 2;\n    protected static final char CH_DOWN_DIR = 3;\n    protected static final char CH_UP_DIR = 4;\n    protected static final char CH_LONG_VOLUME = 5;\n    protected static final char CH_STARTUP_DIR = 6;\n    protected static final char CH_ALT_STARTUP_DIR = 7;\n    protected static final char CH_LIB_DIR = 8;\n    protected static final String PATH_SEPERATOR = System.getProperty(\"file.separator\");\n    public static SupBookRecord createInternalReferences(short numberOfSheets) {\n        return new SupBookRecord(false, numberOfSheets);\n    }\n    public static SupBookRecord createAddInFunctions() {\n        return new SupBookRecord(true, (short)1 /* this field MUST be 0x0001 for add-in referencing */);\n    }\n    public static SupBookRecord createExternalReferences(String url, String[] sheetNames) {\n        return new SupBookRecord(url, sheetNames);\n    }\n    private SupBookRecord(boolean isAddInFuncs, short numberOfSheets) {\n        // else not 'External References'\n        field_1_number_of_sheets = numberOfSheets;\n        field_2_encoded_url = null;\n        field_3_sheet_names = null;\n        _isAddInFunctions = isAddInFuncs;\n    }\n    public SupBookRecord(String url, String[] sheetNames) {\n        field_1_number_of_sheets = (short) sheetNames.length;\n        field_2_encoded_url = url;\n        field_3_sheet_names = sheetNames;\n        _isAddInFunctions = false;\n    }\n    public boolean isExternalReferences() {\n        return field_3_sheet_names != null;\n    }\n    public boolean isInternalReferences() {\n        return field_3_sheet_names == null && !_isAddInFunctions;\n    }\n    public boolean isAddInFunctions() {\n        return field_3_sheet_names == null && _isAddInFunctions;\n    }\n    /**\n     * called by the constructor, should set class level fields.  Should throw\n     * runtime exception for bad/incomplete data.\n     *\n     * @param in the stream to read from\n     */\n    public SupBookRecord(RecordInputStream in) {\n        int recLen = in.remaining();\n        field_1_number_of_sheets = in.readShort();\n        if(recLen > SMALL_RECORD_SIZE) {\n            // 5.38.1 External References\n            _isAddInFunctions = false;\n            field_2_encoded_url = in.readString();\n            String[] sheetNames = new String[field_1_number_of_sheets];\n            for (int i = 0; i < sheetNames.length; i++) {\n                sheetNames[i] = in.readString();\n            }\n            field_3_sheet_names = sheetNames;\n            return;\n        }\n        // else not 'External References'\n        field_2_encoded_url = null;\n        field_3_sheet_names = null;\n        short nextShort = in.readShort();\n        if(nextShort == TAG_INTERNAL_REFERENCES) {\n            // 5.38.2 'Internal References'\n            _isAddInFunctions = false;\n        } else if(nextShort == TAG_ADD_IN_FUNCTIONS) {\n            // 5.38.3 'Add-In Functions'\n            _isAddInFunctions = true;\n            if(field_1_number_of_sheets != 1) {\n                throw new RuntimeException(\"Expected 0x0001 for number of sheets field in 'Add-In Functions' but got (\"\n                     + field_1_number_of_sheets + \")\");\n            }\n        } else {\n            throw new RuntimeException(\"invalid EXTERNALBOOK code (\"\n                     + Integer.toHexString(nextShort) + \")\");\n        }\n     }\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[SUPBOOK \");\n        if(isExternalReferences()) {\n            sb.append(\"External References]\\n\");\n            sb.append(\" .url     = \").append(getURL()).append(\"\\n\");\n            sb.append(\" .nSheets = \").append(field_1_number_of_sheets).append(\"\\n\");\n            for (String sheetname : field_3_sheet_names) {\n                sb.append(\"    .name = \").append(sheetname).append(\"\\n\");\n            }\n            sb.append(\"[/SUPBOOK\");\n        } else if(_isAddInFunctions) {\n            sb.append(\"Add-In Functions\");\n        } else {\n            sb.append(\"Internal References\");\n            sb.append(\" nSheets=\").append(field_1_number_of_sheets);\n        }\n        sb.append(\"]\");\n        return sb.toString();\n    }\n    protected int getDataSize() {\n        if(!isExternalReferences()) {\n            return SMALL_RECORD_SIZE;\n        }\n        int sum = 2; // u16 number of sheets\n        sum += StringUtil.getEncodedSize(field_2_encoded_url);\n        for (String field_3_sheet_name : field_3_sheet_names) {\n            sum += StringUtil.getEncodedSize(field_3_sheet_name);\n        }\n        return sum;\n    }\n    public void serialize(LittleEndianOutput out) {\n        out.writeShort(field_1_number_of_sheets);\n        if(isExternalReferences()) {\n            StringUtil.writeUnicodeString(out, field_2_encoded_url);\n            for (String field_3_sheet_name : field_3_sheet_names) {\n                StringUtil.writeUnicodeString(out, field_3_sheet_name);\n            }\n        } else {\n            int field2val = _isAddInFunctions ? TAG_ADD_IN_FUNCTIONS : TAG_INTERNAL_REFERENCES;\n            out.writeShort(field2val);\n        }\n    }\n    public void setNumberOfSheets(short number){\n        field_1_number_of_sheets = number;\n    }\n    public short getNumberOfSheets(){\n        return field_1_number_of_sheets;\n    }\n    public short getSid()\n    {\n        return sid;\n    }\n    public String getURL() {\n        String encodedUrl = field_2_encoded_url;\n        switch(encodedUrl.charAt(0)) {\n            case 0: // Reference to an empty workbook name\n                return encodedUrl.substring(1); // will this just be empty string?\n            case 1: // encoded file name\n                return decodeFileName(encodedUrl);\n            case 2: // Self-referential external reference\n                return encodedUrl.substring(1);\n        }\n        return encodedUrl;\n    }\n    private static String decodeFileName(String encodedUrl) {\n        /* see \"MICROSOFT OFFICE EXCEL 97-2007  BINARY FILE FORMAT SPECIFICATION\" */\n    \tStringBuilder sb = new StringBuilder();\n        for(int i=1; i<encodedUrl.length(); i++) {\n        \tchar c = encodedUrl.charAt(i);\n        \tswitch (c) {\n        \tcase CH_VOLUME:\n        \t\tchar driveLetter = encodedUrl.charAt(++i);\n        \t\tif (driveLetter == '@') {\n        \t\t\tsb.append(\"\\\\\\\\\");\n        \t\t} else {\n        \t\t\t//Windows notation for drive letters\n        \t\t\tsb.append(driveLetter).append(\":\");\n        \t\t}\n        \t\tbreak;\n        \tcase CH_SAME_VOLUME:\n        \t\tsb.append(PATH_SEPERATOR);\n        \t\tbreak;\n        \tcase CH_DOWN_DIR:\n        \t\tsb.append(PATH_SEPERATOR);\n        \t\tbreak;\n        \tcase CH_UP_DIR:\n        \t\tsb.append(\"..\").append(PATH_SEPERATOR);\n        \t\tbreak;\n        \tcase CH_LONG_VOLUME:\n        \t\t//Don't known to handle...\n        \t\tlogger.log(POILogger.WARN, \"Found unexpected key: ChLongVolume - IGNORING\");\n        \t\tbreak;\n        \tcase CH_STARTUP_DIR:\n        \tcase CH_ALT_STARTUP_DIR:\n        \tcase CH_LIB_DIR:\n        \t\tlogger.log(POILogger.WARN, \"EXCEL.EXE path unkown - using this directoy instead: .\");\n        \t\tsb.append(\".\").append(PATH_SEPERATOR);\n        \t\tbreak;\n        \tdefault:\n        \t\tsb.append(c);\n        \t}\n        }\n        return sb.toString();\n    }<fim_middle>// class below has no smell\n"}