{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License. \n *  \n */\npackage org.apache.directory.server.core.normalization;\n\n\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.apache.directory.api.ldap.model.exception.LdapException;\nimport org.apache.directory.api.ldap.model.filter.ApproximateNode;\nimport org.apache.directory.api.ldap.model.filter.BranchNode;\nimport org.apache.directory.api.ldap.model.filter.EqualityNode;\nimport org.apache.directory.api.ldap.model.filter.ExprNode;\nimport org.apache.directory.api.ldap.model.filter.ExtensibleNode;\nimport org.apache.directory.api.ldap.model.filter.FilterVisitor;\nimport org.apache.directory.api.ldap.model.filter.GreaterEqNode;\nimport org.apache.directory.api.ldap.model.filter.LeafNode;\nimport org.apache.directory.api.ldap.model.filter.LessEqNode;\nimport org.apache.directory.api.ldap.model.filter.OrNode;\nimport org.apache.directory.api.ldap.model.filter.PresenceNode;\nimport org.apache.directory.api.ldap.model.filter.SubstringNode;\nimport org.apache.directory.api.ldap.model.schema.AttributeType;\nimport org.apache.directory.api.ldap.model.schema.SchemaManager;\nimport org.apache.directory.server.i18n.I18n;\n\n\n/**\n *\n *\n * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n */\npublic class ExpandingVisitor implements FilterVisitor\n{\n    /** The schemaManager */\n    private SchemaManager schemaManager;\n\n\n    /**\n     * \n     * Creates a new instance of ExpandingVisitor.\n     *\n     * @param schemaManager The server schemaManager\n     */\n    public ExpandingVisitor( SchemaManager schemaManager )\n    {\n        this.schemaManager = schemaManager;\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n<fim_suffix>    @Override\n    public boolean canVisit( ExprNode node )\n    {\n        return node instanceof BranchNode;\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public List<ExprNode> getOrder( BranchNode node, List<ExprNode> children )\n    {\n        return children;\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isPrefix()\n    {\n        return false;\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Object visit( ExprNode node )\n    {\n        BranchNode bnode = ( BranchNode ) node;\n\n        // --------------------------------------------------------------------\n        // we want to check each child leaf node to see if it must be expanded\n        // children that are branch nodes are recursively visited\n        // --------------------------------------------------------------------\n\n        final List<ExprNode> children = bnode.getChildren();\n        int childNumber = 0;\n\n        for ( ExprNode child : children )\n        {\n            if ( child instanceof LeafNode )\n            {\n                LeafNode leaf = ( LeafNode ) child;\n\n                try\n                {\n                    if ( schemaManager.getAttributeTypeRegistry().hasDescendants( leaf.getAttributeType() ) )\n                    {\n                        // create a new OR node to hold all descendent forms\n                        // add to this node the generalized leaf node and \n                        // replace the old leaf with the new OR branch node\n                        BranchNode orNode = new OrNode();\n                        orNode.getChildren().add( leaf );\n                        children.set( childNumber++, orNode );\n\n                        // iterate through descendants adding them to the orNode\n                        Iterator<AttributeType> descendants = schemaManager.getAttributeTypeRegistry().descendants(\n                            leaf.getAttributeType() );\n\n                        while ( descendants.hasNext() )\n                        {\n                            LeafNode newLeaf;\n                            AttributeType descendant = descendants.next();\n\n                            if ( leaf instanceof PresenceNode )\n                            {\n                                newLeaf = new PresenceNode( descendant );\n                            }\n                            else if ( leaf instanceof ApproximateNode )\n                            {\n                                ApproximateNode approximateNode = ( ApproximateNode ) leaf;\n\n                                newLeaf = new ApproximateNode( descendant, approximateNode.getValue() );\n                            }\n                            else if ( leaf instanceof EqualityNode )\n                            {\n                                EqualityNode equalityNode = ( EqualityNode ) leaf;\n\n                                newLeaf = new EqualityNode( descendant, equalityNode.getValue() );\n                            }\n                            else if ( leaf instanceof GreaterEqNode )\n                            {\n                                GreaterEqNode greaterEqNode = ( GreaterEqNode ) leaf;\n\n                                newLeaf = new GreaterEqNode( descendant, greaterEqNode.getValue() );\n                            }\n                            else if ( leaf instanceof LessEqNode )\n                            {\n                                LessEqNode lessEqNode = ( LessEqNode ) leaf;\n\n                                newLeaf = new LessEqNode( descendant, lessEqNode.getValue() );\n                            }\n                            else if ( leaf instanceof ExtensibleNode )\n                            {\n                                ExtensibleNode extensibleNode = ( ExtensibleNode ) leaf;\n                                newLeaf = new ExtensibleNode( descendant, extensibleNode.getValue(),\n                                    extensibleNode.getMatchingRuleId(), extensibleNode.hasDnAttributes() );\n                            }\n                            else if ( leaf instanceof SubstringNode )\n                            {\n                                SubstringNode substringNode = ( SubstringNode ) leaf;\n                                newLeaf = new SubstringNode( descendant, substringNode.getInitial(),\n                                    substringNode.getFinal() );\n                            }\n                            else\n                            {\n                                throw new IllegalStateException( I18n.err( I18n.ERR_260, leaf ) );\n                            }\n\n                            orNode.addNode( newLeaf );\n                        }\n                    }\n                }\n                catch ( LdapException e )\n                {\n                    // log something here and throw a runtime excpetion\n                    throw new RuntimeException( I18n.err( I18n.ERR_261 ) );\n                }\n            }\n            else\n            {\n                visit( child );\n            }\n        } // end for loop\n\n        return null;\n    }\n}<fim_middle>// function below has no smell\n"}