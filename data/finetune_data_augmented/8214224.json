{"text": "<fim_prefix>package org.springframework.issues.config;\n\nimport java.util.EnumSet;\n\nimport javax.servlet.DispatcherType;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletRegistration;\n\nimport org.slf4j.Logger;\nimport org.springframework.web.WebApplicationInitializer;\nimport org.springframework.web.context.ContextLoaderListener;\nimport org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.resource.ResourceUrlEncodingFilter;\n\n/**\n *\n */\n<fim_suffix>public class AppInitializer implements WebApplicationInitializer {\n    @SuppressWarnings(\"unused\")\n    private static final Logger logger = org.slf4j.LoggerFactory.getLogger(AppInitializer.class);\n\n    @Override\n    public void onStartup(ServletContext container) {\n\n        AnnotationConfigWebApplicationContext rootContext = new AnnotationConfigWebApplicationContext();\n        rootContext.register(AppRootConfig.class);\n\n        // Manage the lifecycle of the root application context\n        container.addListener(new ContextLoaderListener(rootContext));\n\n        container.addFilter(\"resourceUrlEncodingFilter\", ResourceUrlEncodingFilter.class).addMappingForUrlPatterns(\n                EnumSet.allOf(DispatcherType.class), false, \"/*\");\n\n        // Create the dispatcher servlet's Spring application context\n        AnnotationConfigWebApplicationContext dispatcherContext = new AnnotationConfigWebApplicationContext();\n        dispatcherContext.register(WebConfig.class);\n\n        // Register and map the dispatcher servlet\n        ServletRegistration.Dynamic dispatcher = container.addServlet(\"dispatcher\", new DispatcherServlet(\n                dispatcherContext));\n        dispatcher.setLoadOnStartup(1);\n        dispatcher.addMapping(\"/\");\n    }\n}<fim_middle>// class below has no smell\n"}