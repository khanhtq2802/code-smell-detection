{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.contrib.serde2;\n\nimport java.util.Properties;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hive.serde2.SerDeException;\nimport org.apache.hadoop.io.BytesWritable;\nimport org.apache.hadoop.io.Writable;\n\nimport com.google.protobuf.InvalidProtocolBufferException;\nimport com.google.protobuf.Message;\nimport com.google.protobuf.Parser;\n\n/**\n * Class to convert bytes writable containing a protobuf message to hive formats.\n * @see ProtobufSerDe\n */\npublic class ProtobufBytesWritableSerDe extends ProtobufSerDe {\n  private Parser<? extends Message> parser;\n\n<fim_suffix>  @Override\n  public void initialize(Configuration conf, Properties tbl) throws SerDeException {\n    super.initialize(conf, tbl);\n    try {\n      @SuppressWarnings(\"unchecked\")\n      Parser<? extends Message> tmpParser = (Parser<? extends Message>)protoMessageClass\n          .getField(\"PARSER\").get(null);\n      this.parser = tmpParser;\n    } catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException\n        | SecurityException e) {\n      throw new SerDeException(\"Unable get PARSER from class: \" + protoMessageClass.getName(), e);\n    }\n  }\n\n  @Override\n  protected Message toMessage(Writable writable) throws SerDeException {\n    try {\n      BytesWritable bytes = (BytesWritable)writable;\n      return parser.parseFrom(bytes.getBytes(), 0, bytes.getLength());\n    } catch (InvalidProtocolBufferException e) {\n      throw new SerDeException(\"Unable to parse proto message\", e);\n    }\n  }\n}<fim_middle>// function below has no smell\n"}