{"text": "<fim_prefix>/*\n   Derby - Class org.apache.derby.impl.sql.catalog.DDdependableFinder\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to you under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n */\npackage\torg.apache.derby.impl.sql.catalog;\nimport java.io.IOException;\nimport java.io.ObjectInput;\nimport java.io.ObjectOutput;\nimport org.apache.derby.catalog.Dependable;\nimport org.apache.derby.catalog.DependableFinder;\nimport org.apache.derby.catalog.UUID;\nimport org.apache.derby.shared.common.error.StandardException;\nimport org.apache.derby.shared.common.reference.SQLState;\nimport org.apache.derby.iapi.services.io.Formatable;\nimport org.apache.derby.iapi.services.io.StoredFormatIds;\nimport org.apache.derby.shared.common.sanity.SanityManager;\nimport org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;\nimport org.apache.derby.iapi.sql.dictionary.DataDictionary;\nimport org.apache.derby.iapi.sql.dictionary.DefaultDescriptor;\n/**\n *\tClass for most DependableFinders in the core DataDictionary.\n * This class is stored in SYSDEPENDS for the finders for\n * the provider and dependent. It stores no state, its functionality\n * is driven off its format identifier.\n *\n *\n */\npublic class DDdependableFinder implements\tDependableFinder, Formatable\n{\n\t////////////////////////////////////////////////////////////////////////\n\t//\n\t//\tSTATE\n\t//\n\t////////////////////////////////////////////////////////////////////////\n\tprivate final int formatId;\n\t////////////////////////////////////////////////////////////////////////\n\t//\n\t//\tCONSTRUCTORS\n\t//\n\t////////////////////////////////////////////////////////////////////////\n\t/**\n\t  *\tPublic constructor for Formatable hoo-hah.\n\t  */\n\tpublic\tDDdependableFinder(int formatId)\n\t{\n\t\tthis.formatId = formatId;\n\t}\n\t//////////////////////////////////////////////////////////////////\n\t//\n\t//\tOBJECT SUPPORT\n\t//\n\t//////////////////////////////////////////////////////////////////\n\tpublic\tString\ttoString()\n\t{\n\t\treturn\tgetSQLObjectType();\n\t}\n\t//////////////////////////////////////////////////////////////////\n\t//\n\t//\tVACUOUS FORMATABLE INTERFACE. ALL THAT A VACUOUSDEPENDABLEFINDER\n\t//\tNEEDS TO DO IS STAMP ITS FORMAT ID ONTO THE OUTPUT STREAM.\n\t//\n\t//////////////////////////////////////////////////////////////////\n\t/**\n\t * Read this object from a stream of stored objects. Nothing to\n\t * do. Our persistent representation is just a 2-byte format id.\n\t *\n\t * @param in read this.\n\t */\n    public void readExternal( ObjectInput in )\n\t\t\tthrows IOException, ClassNotFoundException\n\t{\n\t}\n\t/**\n\t * Write this object to a stream of stored objects. Again, nothing\n\t * to do. We just stamp the output stream with our Format id.\n\t *\n\t * @param out write bytes here.\n\t */\n    public void writeExternal( ObjectOutput out )\n\t\t\tthrows IOException\n\t{\n\t}\n\t/**\n\t * Get the formatID which corresponds to this class.\n\t *\n\t *\t@return\tthe formatID of this class\n\t */\n\tpublic\tfinal int\tgetTypeFormatId()\t\n\t{\n\t\treturn formatId;\n\t}\n\t////////////////////////////////////////////////////////////////////////\n\t//\n\t//\tDDdependable METHODS\n\t//\n\t////////////////////////////////////////////////////////////////////////\n\t/**\n\t  * @see DependableFinder#getSQLObjectType\n\t  */\n\tpublic\tString\tgetSQLObjectType()\n\t{\n\t\tswitch (formatId)\n\t\t{\n\t\t\tcase StoredFormatIds.ALIAS_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\treturn Dependable.ALIAS;\n\t\t\tcase StoredFormatIds.CONGLOMERATE_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\treturn Dependable.CONGLOMERATE;\n\t\t\tcase StoredFormatIds.CONSTRAINT_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\treturn Dependable.CONSTRAINT;\n\t\t\tcase StoredFormatIds.DEFAULT_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\treturn Dependable.DEFAULT;\n\t\t\tcase StoredFormatIds.FILE_INFO_FINDER_V01_ID:\n\t\t\t\treturn Dependable.FILE;\n\t\t\tcase StoredFormatIds.SCHEMA_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\treturn Dependable.SCHEMA;\n\t\t\tcase StoredFormatIds.SPS_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\treturn Dependable.STORED_PREPARED_STATEMENT;\n\t\t\tcase StoredFormatIds.TABLE_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\treturn Dependable.TABLE;\n\t\t\tcase StoredFormatIds.COLUMN_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\treturn Dependable.COLUMNS_IN_TABLE;\n\t\t\tcase StoredFormatIds.TRIGGER_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\treturn Dependable.TRIGGER;\n\t\t\tcase StoredFormatIds.VIEW_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\treturn Dependable.VIEW;\n\t\t\tcase StoredFormatIds.TABLE_PERMISSION_FINDER_V01_ID:\n\t\t\t\treturn Dependable.TABLE_PERMISSION;\n\t\t\tcase StoredFormatIds.COLUMNS_PERMISSION_FINDER_V01_ID:\n\t\t\t\treturn Dependable.COLUMNS_PERMISSION;\n\t\t\tcase StoredFormatIds.ROUTINE_PERMISSION_FINDER_V01_ID:\n\t\t\t\treturn Dependable.ROUTINE_PERMISSION;\n\t\t\tcase StoredFormatIds.ROLE_GRANT_FINDER_V01_ID:\n\t\t\t\treturn Dependable.ROLE_GRANT;\n\t\t\tcase StoredFormatIds.SEQUENCE_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\treturn Dependable.SEQUENCE;\n\t\t\tcase StoredFormatIds.PERM_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\treturn Dependable.PERM;\n\t\t\tdefault:\n\t\t\t\tif (SanityManager.DEBUG)\n\t\t\t\t{\n\t\t\t\t\tSanityManager.THROWASSERT(\n\t\t\t\t\t\t\"getSQLObjectType() called with unexpeced formatId = \" + formatId);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t}\n\t}\n\t/**\n\t\tGet the dependable for the given UUID\n\t\t@exception StandardException thrown on error\n\t*/\n<fim_suffix>\tpublic final Dependable getDependable(DataDictionary dd, UUID dependableObjectID)\n\t\tthrows StandardException\n\t{\n        Dependable dependable = findDependable(dd, dependableObjectID);\n        if (dependable == null)\n            throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND,\n                    getSQLObjectType(), dependableObjectID);\n        return dependable;\n    }\n    /**\n     * Find the dependable for getDependable.\n     * Can return a null references, in which case getDependable()\n     * will thrown an exception.\n     */\n    Dependable findDependable(DataDictionary dd, UUID dependableObjectID)\n        throws StandardException\n    {     \n\t\tswitch (formatId)\n\t\t{\n\t\t\tcase StoredFormatIds.ALIAS_DESCRIPTOR_FINDER_V01_ID:\n                return dd.getAliasDescriptor(dependableObjectID);\n\t\t\tcase StoredFormatIds.CONGLOMERATE_DESCRIPTOR_FINDER_V01_ID:\n                return dd.getConglomerateDescriptor(dependableObjectID);\n\t\t\tcase StoredFormatIds.CONSTRAINT_DESCRIPTOR_FINDER_V01_ID:\n                return dd.getConstraintDescriptor(dependableObjectID);\n\t\t\tcase StoredFormatIds.DEFAULT_DESCRIPTOR_FINDER_V01_ID:\n\t\t\t\tColumnDescriptor\tcd = dd.getColumnDescriptorByDefaultId(dependableObjectID);\n                if (cd != null)\n                    return new DefaultDescriptor(\n\t\t\t\t\t\t\t\t\t\t\t\tdd, \n\t\t\t\t\t\t\t\t\t\t\t\tcd.getDefaultUUID(), cd.getReferencingUUID(), \n\t\t\t\t\t\t\t\t\t\t\t\tcd.getPosition());\n                return null;\n\t\t\tcase StoredFormatIds.FILE_INFO_FINDER_V01_ID:\n                return dd.getFileInfoDescriptor(dependableObjectID);\n\t\t\tcase StoredFormatIds.SCHEMA_DESCRIPTOR_FINDER_V01_ID:\n                return dd.getSchemaDescriptor(dependableObjectID, null);\n\t\t\tcase StoredFormatIds.SPS_DESCRIPTOR_FINDER_V01_ID:\n                return dd.getSPSDescriptor(dependableObjectID);\n\t\t\tcase StoredFormatIds.TABLE_DESCRIPTOR_FINDER_V01_ID:\n                return dd.getTableDescriptor(dependableObjectID);\n\t\t\tcase StoredFormatIds.TRIGGER_DESCRIPTOR_FINDER_V01_ID:<fim_middle>// function below has no smell\n"}