{"text": "<fim_prefix>/*\n * Copyright 2014-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License. You may obtain\n * a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\npackage com.facebook.buck.core.model;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport java.io.IOException;\nimport java.util.Objects;\nimport java.util.Random;\nimport java.util.UUID;\n\n/** A strongly typed representation of a build id. */\n@JsonSerialize(using = BuildId.BuildIdSerializer.class)\npublic class BuildId implements Comparable<BuildId> {\n\n  private static final Random INSECURE_RANDOM = new Random();\n\n  private final String id;\n\n  public BuildId() {\n    this(new UUID(INSECURE_RANDOM.nextLong(), INSECURE_RANDOM.nextLong()).toString());\n  }\n\n  public BuildId(String id) {\n    this.id = id;\n  }\n\n  @JsonCreator\n  public static BuildId fromJson(String id) {\n    return new BuildId(id);\n  }\n\n  @Override\n  public String toString() {\n    return id;\n  }\n\n  @Override\n  public int compareTo(BuildId other) {\n    if (this == other) {\n      return 0;\n    }\n\n    if (other == null) {\n      return 1;\n    }\n    return id.compareTo(other.id);\n  }\n\n  @Override\n  public boolean equals(Object other) {\n    if (!(other instanceof BuildId)) {\n      return false;\n    }\n\n    return Objects.equals(this.id, ((BuildId) other).id);\n  }\n\n<fim_suffix>  @Override\n  public int hashCode() {\n    return Objects.hash(id);\n  }\n\n  public static class BuildIdSerializer extends JsonSerializer<BuildId> {\n\n    @Override\n    public void serialize(\n        BuildId buildId, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)\n        throws IOException {\n      jsonGenerator.writeString(buildId.id);\n    }\n  }\n}<fim_middle>// function below has no smell\n"}