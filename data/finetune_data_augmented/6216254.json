{"text": "<fim_prefix>/**\n * ******************************************************************************\n * Copyright (c) 2016 Kiel University and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *  *\n * Contributors:\n *     Kiel University - initial API and implementation\n *  ******************************************************************************\n */\npackage org.eclipse.elk.core.meta.metaData.impl;\n\nimport org.eclipse.elk.core.meta.metaData.*;\n\nimport org.eclipse.emf.ecore.EClass;\nimport org.eclipse.emf.ecore.EDataType;\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.emf.ecore.EPackage;\n\nimport org.eclipse.emf.ecore.impl.EFactoryImpl;\n\nimport org.eclipse.emf.ecore.plugin.EcorePlugin;\n\n/**\n * <!-- begin-user-doc -->\n * An implementation of the model <b>Factory</b>.\n * <!-- end-user-doc -->\n * @generated\n */\n<fim_suffix>public class MetaDataFactoryImpl extends EFactoryImpl implements MetaDataFactory\n{\n  /**\n   * Creates the default factory implementation.\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public static MetaDataFactory init()\n  {\n    try\n    {\n      MetaDataFactory theMetaDataFactory = (MetaDataFactory)EPackage.Registry.INSTANCE.getEFactory(MetaDataPackage.eNS_URI);\n      if (theMetaDataFactory != null)\n      {\n        return theMetaDataFactory;\n      }\n    }\n    catch (Exception exception)\n    {\n      EcorePlugin.INSTANCE.log(exception);\n    }\n    return new MetaDataFactoryImpl();\n  }\n\n  /**\n   * Creates an instance of the factory.\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MetaDataFactoryImpl()\n  {\n    super();\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public EObject create(EClass eClass)\n  {\n    switch (eClass.getClassifierID())\n    {\n      case MetaDataPackage.MD_MODEL: return createMdModel();\n      case MetaDataPackage.MD_BUNDLE: return createMdBundle();\n      case MetaDataPackage.MD_BUNDLE_MEMBER: return createMdBundleMember();\n      case MetaDataPackage.MD_GROUP_OR_OPTION: return createMdGroupOrOption();\n      case MetaDataPackage.MD_GROUP: return createMdGroup();\n      case MetaDataPackage.MD_OPTION: return createMdOption();\n      case MetaDataPackage.MD_OPTION_DEPENDENCY: return createMdOptionDependency();\n      case MetaDataPackage.MD_ALGORITHM: return createMdAlgorithm();\n      case MetaDataPackage.MD_CATEGORY: return createMdCategory();\n      case MetaDataPackage.MD_OPTION_SUPPORT: return createMdOptionSupport();\n      default:\n        throw new IllegalArgumentException(\"The class '\" + eClass.getName() + \"' is not a valid classifier\");\n    }\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public Object createFromString(EDataType eDataType, String initialValue)\n  {\n    switch (eDataType.getClassifierID())\n    {\n      case MetaDataPackage.MD_OPTION_TARGET_TYPE:\n        return createMdOptionTargetTypeFromString(eDataType, initialValue);\n      case MetaDataPackage.MD_GRAPH_FEATURE:\n        return createMdGraphFeatureFromString(eDataType, initialValue);\n      default:\n        throw new IllegalArgumentException(\"The datatype '\" + eDataType.getName() + \"' is not a valid classifier\");\n    }\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public String convertToString(EDataType eDataType, Object instanceValue)\n  {\n    switch (eDataType.getClassifierID())\n    {\n      case MetaDataPackage.MD_OPTION_TARGET_TYPE:\n        return convertMdOptionTargetTypeToString(eDataType, instanceValue);\n      case MetaDataPackage.MD_GRAPH_FEATURE:\n        return convertMdGraphFeatureToString(eDataType, instanceValue);\n      default:\n        throw new IllegalArgumentException(\"The datatype '\" + eDataType.getName() + \"' is not a valid classifier\");\n    }\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MdModel createMdModel()\n  {\n    MdModelImpl mdModel = new MdModelImpl();\n    return mdModel;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MdBundle createMdBundle()\n  {\n    MdBundleImpl mdBundle = new MdBundleImpl();\n    return mdBundle;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MdBundleMember createMdBundleMember()\n  {\n    MdBundleMemberImpl mdBundleMember = new MdBundleMemberImpl();\n    return mdBundleMember;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MdGroupOrOption createMdGroupOrOption()\n  {\n    MdGroupOrOptionImpl mdGroupOrOption = new MdGroupOrOptionImpl();\n    return mdGroupOrOption;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MdGroup createMdGroup()\n  {\n    MdGroupImpl mdGroup = new MdGroupImpl();\n    return mdGroup;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MdOption createMdOption()\n  {\n    MdOptionImpl mdOption = new MdOptionImpl();\n    return mdOption;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MdOptionDependency createMdOptionDependency()\n  {\n    MdOptionDependencyImpl mdOptionDependency = new MdOptionDependencyImpl();\n    return mdOptionDependency;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MdAlgorithm createMdAlgorithm()\n  {\n    MdAlgorithmImpl mdAlgorithm = new MdAlgorithmImpl();\n    return mdAlgorithm;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MdCategory createMdCategory()\n  {\n    MdCategoryImpl mdCategory = new MdCategoryImpl();\n    return mdCategory;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MdOptionSupport createMdOptionSupport()\n  {\n    MdOptionSupportImpl mdOptionSupport = new MdOptionSupportImpl();\n    return mdOptionSupport;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MdOptionTargetType createMdOptionTargetTypeFromString(EDataType eDataType, String initialValue)\n  {\n    MdOptionTargetType result = MdOptionTargetType.get(initialValue);\n    if (result == null) throw new IllegalArgumentException(\"The value '\" + initialValue + \"' is not a valid enumerator of '\" + eDataType.getName() + \"'\");\n    return result;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public String convertMdOptionTargetTypeToString(EDataType eDataType, Object instanceValue)\n  {\n    return instanceValue == null ? null : instanceValue.toString();\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MdGraphFeature createMdGraphFeatureFromString(EDataType eDataType, String initialValue)\n  {\n    MdGraphFeature result = MdGraphFeature.get(initialValue);\n    if (result == null) throw new IllegalArgumentException(\"The value '\" + initialValue + \"' is not a valid enumerator of '\" + eDataType.getName() + \"'\");\n    return result;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public String convertMdGraphFeatureToString(EDataType eDataType, Object instanceValue)\n  {\n    return instanceValue == null ? null : instanceValue.toString();\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public MetaDataPackage getMetaDataPackage()\n  {\n    return (MetaDataPackage)getEPackage();\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @deprecated\n   * @generated\n   */\n  @Deprecated\n  public static MetaDataPackage getPackage()\n  {\n    return MetaDataPackage.eINSTANCE;\n  }\n\n} //MetaDataFactoryImpl<fim_middle>// class below is blob\n"}