{"text": "<fim_prefix>        store(new Flags().deleted().msn(messageNumber));\n        return this;\n    }\n    public ScriptBuilder expunge() throws Exception {\n        command(\"EXPUNGE\");\n        return this;\n    }\n    public void delete() throws Exception {\n        if (createdMailbox) {\n            command(\"DELETE \" + mailbox);\n        }\n    }\n    public void search() throws Exception {\n        search.setUidSearch(uidSearch);\n        command(search.command());\n        search = new Search();\n    }\n    public ScriptBuilder all() {\n        search.all();\n        return this;\n    }\n    public ScriptBuilder answered() {\n        search.answered();\n        return this;\n    }\n    public ScriptBuilder bcc(String address) {\n        search.bcc(address);\n        return this;\n    }\n    public ScriptBuilder before(int year, int month, int day) {\n        search.before(year, month, day);\n        return this;\n    }\n    public ScriptBuilder body(String text) {\n        search.body(text);\n        return this;\n    }\n    public ScriptBuilder cc(String address) {\n        search.cc(address);\n        return this;\n    }\n    public ScriptBuilder deleted() {\n        search.deleted();\n        return this;\n    }\n    public ScriptBuilder draft() {\n        search.draft();\n        return this;\n    }\n    public ScriptBuilder flagged() {\n        search.flagged();\n        return this;\n    }\n    public ScriptBuilder from(String address) {\n        search.from(address);\n        return this;\n    }\n    public ScriptBuilder header(String field, String value) {\n        search.header(field, value);\n        return this;\n    }\n    public ScriptBuilder keyword(String flag) {\n        search.keyword(flag);\n        return this;\n    }\n    public ScriptBuilder larger(long size) {\n        search.larger(size);\n        return this;\n    }\n    public ScriptBuilder newOperator() {\n        search.newOperator();\n        return this;\n    }\n    public ScriptBuilder not() {\n        search.not();\n        return this;\n    }\n    public ScriptBuilder old() {\n        search.old();\n        return this;\n    }\n    public ScriptBuilder on(int year, int month, int day) {\n        search.on(year, month, day);\n        return this;\n    }\n    public ScriptBuilder or() {\n        search.or();\n        return this;\n    }\n    public ScriptBuilder recent() {\n        search.recent();\n        return this;\n    }\n    public ScriptBuilder seen() {\n        search.seen();\n        return this;\n    }\n    public ScriptBuilder sentbefore(int year, int month, int day) {\n        search.sentbefore(year, month, day);\n        return this;\n    }\n    public ScriptBuilder senton(int year, int month, int day) {\n        search.senton(year, month, day);\n        return this;\n    }\n    public ScriptBuilder sentsince(int year, int month, int day) {\n        search.sentsince(year, month, day);\n        return this;\n    }\n    public ScriptBuilder since(int year, int month, int day) {\n        search.since(year, month, day);\n        return this;\n    }\n    public ScriptBuilder smaller(int size) {\n        search.smaller(size);\n        return this;\n    }\n    public ScriptBuilder subject(String address) {\n        search.subject(address);\n        return this;\n    }\n    public ScriptBuilder text(String text) {\n        search.text(text);\n        return this;\n    }\n    public ScriptBuilder to(String address) {\n        search.to(address);\n        return this;\n    }\n    public ScriptBuilder uid() {\n        search.uid();\n        return this;\n    }\n    public ScriptBuilder unanswered() {\n        search.unanswered();\n        return this;\n    }\n    public ScriptBuilder undeleted() {\n        search.undeleted();\n        return this;\n    }\n    public ScriptBuilder undraft() {\n        search.undraft();\n        return this;\n    }\n    public ScriptBuilder unflagged() {\n        search.unflagged();\n        return this;\n    }\n    public ScriptBuilder unkeyword(String flag) {\n        search.unkeyword(flag);\n        return this;\n    }\n    public ScriptBuilder unseen() {\n        search.unseen();\n        return this;\n    }\n    public ScriptBuilder openParen() {\n        search.openParen();\n        return this;\n    }\n    public ScriptBuilder closeParen() {\n        search.closeParen();\n        return this;\n    }\n    public ScriptBuilder msn(int low, int high) {\n        search.msn(low, high);\n        return this;\n    }\n    public ScriptBuilder msnAndUp(int limit) {\n        search.msnAndUp(limit);\n        return this;\n    }\n    public ScriptBuilder msnAndDown(int limit) {\n        search.msnAndDown(limit);\n        return this;\n    }\n    public Flags flags() {\n        return new Flags();\n    }\n    public void store(Flags flags) throws Exception {\n        String command = flags.command();\n        command(command);\n    }\n    public Search getSearch() throws Exception {\n        return search;\n    }\n    public ScriptBuilder partial(long start, long octets) {\n        partialFetch = \"<\" + start + \".\" + octets + \">\";\n        return this;\n    }\n    public ScriptBuilder fetchSection(String section) throws Exception {\n        StringBuffer command = new StringBuffer(\"FETCH \");\n        command.append(messageNumber);\n        if (peek) {\n            command.append(\" (BODY.PEEK[\");\n        } else {\n            command.append(\" (BODY[\");\n        }\n        command.append(section).append(\"]\").append(partialFetch).append(\")\");\n        command(command.toString());\n        return this;\n    }\n    public void fetchAllMessages() throws Exception {\n        final String command = fetch.command();\n        command(command);\n    }\n    public ScriptBuilder list() throws Exception {\n        command(\"LIST \\\"\\\" \\\"*\\\"\");\n        return this;\n    }\n    public void fetchBody() throws Exception {\n    }\n    public void fetch() throws Exception {\n        final String command = fetch.command(messageNumber);\n        command(command);\n    }\n    public void fetchFlags() throws Exception {\n        final String command = \"FETCH \" + messageNumber + \" (FLAGS)\";\n        command(command);\n    }\n    public void append() throws Exception {\n        tag();\n        write(\"APPEND \" + mailbox);\n        write(openFile());\n        lineEnd();\n        response();\n    }\n    private void write(InputStream in) throws Exception {\n        client.write(in);\n    }\n    private void response() throws Exception {\n        client.readResponse();\n    }\n    private void tag() throws Exception {\n        client.lineStart();\n        write(\"A\" + ++tagCount + \" \");\n    }\n    private void lineEnd() throws Exception {\n        client.lineEnd();\n    }\n    private void write(String phrase) throws Exception {\n        client.write(phrase);\n    }\n    public void close() throws Exception {\n        client.close();\n    }\n    public void logout() throws Exception {\n        command(\"LOGOUT\");\n    }\n    public void quit() throws Exception {\n        delete();\n        logout();\n        close();\n    }\n    public static final class Flags {\n        private final StringBuffer flags;\n        private final StringBuffer msn;\n        private boolean first;\n        private boolean silent;\n        private boolean add;\n        private boolean subtract;\n        public Flags() {\n            add = false;\n            subtract = false;\n            silent = false;\n            first = true;\n            flags = new StringBuffer(\"(\");\n            msn = new StringBuffer();\n        }\n        public Flags msn(long number) {\n            msn.append(number);\n            msn.append(' ');\n            return this;\n        }\n        public Flags range(long low, long high) {\n            msn.append(low);\n            msn.append(':');\n            msn.append(high);\n            msn.append(' ');\n            return this;\n        }\n        public Flags rangeTill(long number) {\n            msn.append(\"*:\");\n            msn.append(number);\n            msn.append(' ');\n            return this;\n        }\n        public Flags rangeFrom(long number) {\n            msn.append(number);\n            msn.append(\":* \");\n            return this;\n        }\n        public Flags add() {\n            add = true;\n            subtract = false;\n            return this;\n        }\n        public Flags subtract() {\n            add = false;\n            subtract = true;\n            return this;\n        }\n        public Flags silent() {\n            silent = true;\n            return this;\n        }\n        public Flags deleted() {\n            return append(\"\\\\DELETED\");\n        }\n        public Flags flagged() {\n            return append(\"\\\\FLAGGED\");\n        }\n        public Flags answered() {\n            return append(\"\\\\ANSWERED\");\n        }\n        public Flags seen() {\n            return append(\"\\\\SEEN\");\n        }\n        public Flags draft() {\n            return append(\"\\\\DRAFT\");\n        }\n<fim_suffix>        public String command() {\n            String flags;\n            if (add) {\n                flags = \" +FLAGS \";\n            } else if (subtract) {\n                flags = \" -FLAGS \";\n            } else {\n                flags = \" FLAGS \";\n            }\n            if (silent) {\n                flags = flags + \".SILENT\";\n            }\n            return \"STORE \" + msn + flags + this.flags + \")\";\n        }<fim_middle>// function below has no smell\n"}