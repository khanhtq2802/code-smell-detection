{"text": "<fim_prefix>/**\n * Copyright (c) 2015-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to\n * use, copy, modify, and distribute this software in source code or binary\n * form for use in connection with the web services and APIs provided by\n * Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use\n * of this software is subject to the Facebook Developer Principles and\n * Policies [http://developers.facebook.com/policy/]. This copyright notice\n * shall be included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\npackage com.facebook.ads.sdk;\nimport java.io.File;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.Type;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport com.google.common.base.Function;\nimport com.google.common.util.concurrent.Futures;\nimport com.google.common.util.concurrent.ListenableFuture;\nimport com.google.common.util.concurrent.SettableFuture;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonArray;\nimport com.google.gson.annotations.SerializedName;\nimport com.google.gson.reflect.TypeToken;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParser;\nimport com.facebook.ads.sdk.APIException.MalformedResponseException;\n/**\n * This class is auto-generated.\n *\n * For any issues or feature requests related to this class, please let us know\n * on github and we'll fix in our codegen framework. We'll not be able to accept\n * pull request for this class.\n *\n */\npublic class ProductItemCommerceInsights extends APINode {\n  @SerializedName(\"message_sends\")\n  private Long mMessageSends = null;\n  @SerializedName(\"organic_impressions\")\n  private Long mOrganicImpressions = null;\n  @SerializedName(\"paid_impressions\")\n  private Long mPaidImpressions = null;\n  protected static Gson gson = null;\n<fim_suffix>  public ProductItemCommerceInsights() {\n  }\n  public String getId() {\n    return null;\n  }\n  public static ProductItemCommerceInsights loadJSON(String json, APIContext context, String header) {\n    ProductItemCommerceInsights productItemCommerceInsights = getGson().fromJson(json, ProductItemCommerceInsights.class);\n    if (context.isDebug()) {\n      JsonParser parser = new JsonParser();\n      JsonElement o1 = parser.parse(json);\n      JsonElement o2 = parser.parse(productItemCommerceInsights.toString());\n      if (o1.getAsJsonObject().get(\"__fb_trace_id__\") != null) {\n        o2.getAsJsonObject().add(\"__fb_trace_id__\", o1.getAsJsonObject().get(\"__fb_trace_id__\"));\n      }\n      if (!o1.equals(o2)) {\n        context.log(\"[Warning] When parsing response, object is not consistent with JSON:\");\n        context.log(\"[JSON]\" + o1);\n        context.log(\"[Object]\" + o2);\n      };\n    }\n    productItemCommerceInsights.context = context;\n    productItemCommerceInsights.rawValue = json;\n    productItemCommerceInsights.header = header;\n    return productItemCommerceInsights;\n  }\n  public static APINodeList<ProductItemCommerceInsights> parseResponse(String json, APIContext context, APIRequest request, String header) throws MalformedResponseException {\n    APINodeList<ProductItemCommerceInsights> productItemCommerceInsightss = new APINodeList<ProductItemCommerceInsights>(request, json, header);\n    JsonArray arr;\n    JsonObject obj;\n    JsonParser parser = new JsonParser();\n    Exception exception = null;\n    try{\n      JsonElement result = parser.parse(json);\n      if (result.isJsonArray()) {\n        // First, check if it's a pure JSON Array\n        arr = result.getAsJsonArray();\n        for (int i = 0; i < arr.size(); i++) {\n          productItemCommerceInsightss.add(loadJSON(arr.get(i).getAsJsonObject().toString(), context, header));\n        };\n        return productItemCommerceInsightss;\n      } else if (result.isJsonObject()) {\n        obj = result.getAsJsonObject();\n        if (obj.has(\"data\")) {\n          if (obj.has(\"paging\")) {\n            JsonObject paging = obj.get(\"paging\").getAsJsonObject();\n            if (paging.has(\"cursors\")) {\n                JsonObject cursors = paging.get(\"cursors\").getAsJsonObject();\n                String before = cursors.has(\"before\") ? cursors.get(\"before\").getAsString() : null;\n                String after = cursors.has(\"after\") ? cursors.get(\"after\").getAsString() : null;\n                productItemCommerceInsightss.setCursors(before, after);\n            }\n            String previous = paging.has(\"previous\") ? paging.get(\"previous\").getAsString() : null;\n            String next = paging.has(\"next\") ? paging.get(\"next\").getAsString() : null;\n            productItemCommerceInsightss.setPaging(previous, next);\n            if (context.hasAppSecret()) {\n              productItemCommerceInsightss.setAppSecret(context.getAppSecretProof());\n            }\n          }\n          if (obj.get(\"data\").isJsonArray()) {\n            // Second, check if it's a JSON array with \"data\"\n            arr = obj.get(\"data\").getAsJsonArray();\n            for (int i = 0; i < arr.size(); i++) {\n              productItemCommerceInsightss.add(loadJSON(arr.get(i).getAsJsonObject().toString(), context, header));\n            };\n          } else if (obj.get(\"data\").isJsonObject()) {\n            // Third, check if it's a JSON object with \"data\"\n            obj = obj.get(\"data\").getAsJsonObject();\n            boolean isRedownload = false;\n            for (String s : new String[]{\"campaigns\", \"adsets\", \"ads\"}) {\n              if (obj.has(s)) {\n                isRedownload = true;\n                obj = obj.getAsJsonObject(s);\n                for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n                  productItemCommerceInsightss.add(loadJSON(entry.getValue().toString(), context, header));\n                }\n                break;\n              }\n            }\n            if (!isRedownload) {\n              productItemCommerceInsightss.add(loadJSON(obj.toString(), context, header));\n            }\n          }\n          return productItemCommerceInsightss;\n        } else if (obj.has(\"images\")) {\n          // Fourth, check if it's a map of image objects\n          obj = obj.get(\"images\").getAsJsonObject();\n          for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n              productItemCommerceInsightss.add(loadJSON(entry.getValue().toString(), context, header));\n          }\n          return productItemCommerceInsightss;\n        } else {\n          // Fifth, check if it's an array of objects indexed by id\n          boolean isIdIndexedArray = true;\n          for (Map.Entry entry : obj.entrySet()) {\n            String key = (String) entry.getKey();\n            if (key.equals(\"__fb_trace_id__\")) {\n              continue;\n            }\n            JsonElement value = (JsonElement) entry.getValue();\n            if (\n              value != null &&\n              value.isJsonObject() &&\n              value.getAsJsonObject().has(\"id\") &&\n              value.getAsJsonObject().get(\"id\") != null &&\n              value.getAsJsonObject().get(\"id\").getAsString().equals(key)\n            ) {\n              productItemCommerceInsightss.add(loadJSON(value.toString(), context, header));\n            } else {\n              isIdIndexedArray = false;\n              break;\n            }\n          }\n          if (isIdIndexedArray) {\n            return productItemCommerceInsightss;\n          }\n          // Sixth, check if it's pure JsonObject\n          productItemCommerceInsightss.clear();\n          productItemCommerceInsightss.add(loadJSON(json, context, header));\n          return productItemCommerceInsightss;\n        }\n      }\n    } catch (Exception e) {\n      exception = e;\n    }\n    throw new MalformedResponseException(\n      \"Invalid response string: \" + json,\n      exception\n    );\n  }\n  @Override\n  public APIContext getContext() {\n    return context;\n  }\n  @Override\n  public void setContext(APIContext context) {\n    this.context = context;\n  }\n  @Override<fim_middle>// function below has no smell\n"}