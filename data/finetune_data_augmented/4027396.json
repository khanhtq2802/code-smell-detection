{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.beam.sdk.extensions.sql.impl.rel;\n\nimport java.util.List;\nimport org.apache.beam.sdk.transforms.PTransform;\nimport org.apache.beam.sdk.values.PCollection;\nimport org.apache.beam.sdk.values.PCollectionList;\nimport org.apache.beam.sdk.values.Row;\nimport org.apache.calcite.plan.RelOptCluster;\nimport org.apache.calcite.plan.RelTraitSet;\nimport org.apache.calcite.rel.RelNode;\nimport org.apache.calcite.rel.core.Intersect;\nimport org.apache.calcite.rel.core.SetOp;\n\n/**\n * {@code BeamRelNode} to replace a {@code Intersect} node.\n *\n * <p>This is used to combine two SELECT statements, but returns rows only from the first SELECT\n * statement that are identical to a row in the second SELECT statement.\n */\n<fim_suffix>public class BeamIntersectRel extends Intersect implements BeamRelNode {\n  public BeamIntersectRel(\n      RelOptCluster cluster, RelTraitSet traits, List<RelNode> inputs, boolean all) {\n    super(cluster, traits, inputs, all);\n  }\n\n  @Override\n  public SetOp copy(RelTraitSet traitSet, List<RelNode> inputs, boolean all) {\n    return new BeamIntersectRel(getCluster(), traitSet, inputs, all);\n  }\n\n  @Override\n  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n    return new BeamSetOperatorRelBase(this, BeamSetOperatorRelBase.OpType.INTERSECT, all);\n  }\n}<fim_middle>// class below has no smell\n"}