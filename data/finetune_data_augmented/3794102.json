{"text": "<fim_prefix>    verifyApplicationThread();\n    cameraMotionListener = listener;\n    for (Renderer renderer : renderers) {\n      if (renderer.getTrackType() == C.TRACK_TYPE_CAMERA_MOTION) {\n        player\n            .createMessage(renderer)\n            .setType(C.MSG_SET_CAMERA_MOTION_LISTENER)\n            .setPayload(listener)\n            .send();\n      }\n    }\n  }\n  @Override\n  public void clearCameraMotionListener(CameraMotionListener listener) {\n    verifyApplicationThread();\n    if (cameraMotionListener != listener) {\n      return;\n    }\n    for (Renderer renderer : renderers) {\n      if (renderer.getTrackType() == C.TRACK_TYPE_CAMERA_MOTION) {\n        player\n            .createMessage(renderer)\n            .setType(C.MSG_SET_CAMERA_MOTION_LISTENER)\n            .setPayload(null)\n            .send();\n      }\n    }\n  }\n  /**\n   * Sets a listener to receive video events, removing all existing listeners.\n   *\n   * @param listener The listener.\n   * @deprecated Use {@link #addVideoListener(com.google.android.exoplayer2.video.VideoListener)}.\n   */\n  @Deprecated\n  @SuppressWarnings(\"deprecation\")\n  public void setVideoListener(VideoListener listener) {\n    videoListeners.clear();\n    if (listener != null) {\n      addVideoListener(listener);\n    }\n  }\n  /**\n   * Equivalent to {@link #removeVideoListener(com.google.android.exoplayer2.video.VideoListener)}.\n   *\n   * @param listener The listener to clear.\n   * @deprecated Use {@link\n   *     #removeVideoListener(com.google.android.exoplayer2.video.VideoListener)}.\n   */\n  @Deprecated\n  @SuppressWarnings(\"deprecation\")\n  public void clearVideoListener(VideoListener listener) {\n    removeVideoListener(listener);\n  }\n  @Override\n  public void addTextOutput(TextOutput listener) {\n    if (!currentCues.isEmpty()) {\n      listener.onCues(currentCues);\n    }\n    textOutputs.add(listener);\n  }\n  @Override\n  public void removeTextOutput(TextOutput listener) {\n    textOutputs.remove(listener);\n  }\n  /**\n   * Sets an output to receive text events, removing all existing outputs.\n   *\n   * @param output The output.\n   * @deprecated Use {@link #addTextOutput(TextOutput)}.\n   */\n  @Deprecated\n  public void setTextOutput(TextOutput output) {\n    textOutputs.clear();\n    if (output != null) {\n      addTextOutput(output);\n    }\n  }\n  /**\n   * Equivalent to {@link #removeTextOutput(TextOutput)}.\n   *\n   * @param output The output to clear.\n   * @deprecated Use {@link #removeTextOutput(TextOutput)}.\n   */\n  @Deprecated\n  public void clearTextOutput(TextOutput output) {\n    removeTextOutput(output);\n  }\n  @Override\n  public void addMetadataOutput(MetadataOutput listener) {\n    metadataOutputs.add(listener);\n  }\n  @Override\n  public void removeMetadataOutput(MetadataOutput listener) {\n    metadataOutputs.remove(listener);\n  }\n  /**\n   * Sets an output to receive metadata events, removing all existing outputs.\n   *\n   * @param output The output.\n   * @deprecated Use {@link #addMetadataOutput(MetadataOutput)}.\n   */\n  @Deprecated\n  public void setMetadataOutput(MetadataOutput output) {\n    metadataOutputs.retainAll(Collections.singleton(analyticsCollector));\n    if (output != null) {\n      addMetadataOutput(output);\n    }\n  }\n  /**\n   * Equivalent to {@link #removeMetadataOutput(MetadataOutput)}.\n   *\n   * @param output The output to clear.\n   * @deprecated Use {@link #removeMetadataOutput(MetadataOutput)}.\n   */\n  @Deprecated\n  public void clearMetadataOutput(MetadataOutput output) {\n    removeMetadataOutput(output);\n  }\n  /**\n   * @deprecated Use {@link #addAnalyticsListener(AnalyticsListener)} to get more detailed debug\n   *     information.\n   */\n  @Deprecated\n  @SuppressWarnings(\"deprecation\")\n  public void setVideoDebugListener(VideoRendererEventListener listener) {\n    videoDebugListeners.retainAll(Collections.singleton(analyticsCollector));\n    if (listener != null) {\n      addVideoDebugListener(listener);\n    }\n  }\n  /**\n   * @deprecated Use {@link #addAnalyticsListener(AnalyticsListener)} to get more detailed debug\n   *     information.\n   */\n  @Deprecated\n  public void addVideoDebugListener(VideoRendererEventListener listener) {\n    videoDebugListeners.add(listener);\n  }\n  /**\n   * @deprecated Use {@link #addAnalyticsListener(AnalyticsListener)} and {@link\n   *     #removeAnalyticsListener(AnalyticsListener)} to get more detailed debug information.\n   */\n  @Deprecated\n  public void removeVideoDebugListener(VideoRendererEventListener listener) {\n    videoDebugListeners.remove(listener);\n  }\n  /**\n   * @deprecated Use {@link #addAnalyticsListener(AnalyticsListener)} to get more detailed debug\n   *     information.\n   */\n  @Deprecated\n  @SuppressWarnings(\"deprecation\")\n  public void setAudioDebugListener(AudioRendererEventListener listener) {\n    audioDebugListeners.retainAll(Collections.singleton(analyticsCollector));\n    if (listener != null) {\n      addAudioDebugListener(listener);\n    }\n  }\n  /**\n   * @deprecated Use {@link #addAnalyticsListener(AnalyticsListener)} to get more detailed debug\n   *     information.\n   */\n  @Deprecated\n  public void addAudioDebugListener(AudioRendererEventListener listener) {\n    audioDebugListeners.add(listener);\n  }\n  /**\n   * @deprecated Use {@link #addAnalyticsListener(AnalyticsListener)} and {@link\n   *     #removeAnalyticsListener(AnalyticsListener)} to get more detailed debug information.\n   */\n  @Deprecated\n  public void removeAudioDebugListener(AudioRendererEventListener listener) {\n    audioDebugListeners.remove(listener);\n  }\n  // ExoPlayer implementation\n  @Override\n  public Looper getPlaybackLooper() {\n    return player.getPlaybackLooper();\n  }\n  @Override\n  public Looper getApplicationLooper() {\n    return player.getApplicationLooper();\n  }\n  @Override\n  public void addListener(Player.EventListener listener) {\n    verifyApplicationThread();\n    player.addListener(listener);\n  }\n  @Override\n  public void removeListener(Player.EventListener listener) {\n    verifyApplicationThread();\n    player.removeListener(listener);\n  }\n  @Override\n  public int getPlaybackState() {\n    verifyApplicationThread();\n    return player.getPlaybackState();\n  }\n  @Override\n  public @Nullable ExoPlaybackException getPlaybackError() {\n    verifyApplicationThread();\n    return player.getPlaybackError();\n  }\n  @Override\n  public void retry() {\n    verifyApplicationThread();\n    if (mediaSource != null\n        && (getPlaybackError() != null || getPlaybackState() == Player.STATE_IDLE)) {\n      prepare(mediaSource, /* resetPosition= */ false, /* resetState= */ false);\n    }\n  }\n  @Override\n  public void prepare(MediaSource mediaSource) {\n    prepare(mediaSource, /* resetPosition= */ true, /* resetState= */ true);\n  }\n  @Override\n  public void prepare(MediaSource mediaSource, boolean resetPosition, boolean resetState) {\n    verifyApplicationThread();\n    if (this.mediaSource != null) {\n      this.mediaSource.removeEventListener(analyticsCollector);\n      analyticsCollector.resetForNewMediaSource();\n    }\n    this.mediaSource = mediaSource;\n    mediaSource.addEventListener(eventHandler, analyticsCollector);\n    @AudioFocusManager.PlayerCommand\n    int playerCommand = audioFocusManager.handlePrepare(getPlayWhenReady());\n    updatePlayWhenReady(getPlayWhenReady(), playerCommand);\n    player.prepare(mediaSource, resetPosition, resetState);\n  }\n  @Override\n  public void setPlayWhenReady(boolean playWhenReady) {\n    verifyApplicationThread();\n    @AudioFocusManager.PlayerCommand\n    int playerCommand = audioFocusManager.handleSetPlayWhenReady(playWhenReady, getPlaybackState());\n    updatePlayWhenReady(playWhenReady, playerCommand);\n  }\n  @Override\n  public boolean getPlayWhenReady() {\n    verifyApplicationThread();\n    return player.getPlayWhenReady();\n  }\n  @Override\n  public @RepeatMode int getRepeatMode() {\n    verifyApplicationThread();\n    return player.getRepeatMode();\n  }\n  @Override\n  public void setRepeatMode(@RepeatMode int repeatMode) {\n    verifyApplicationThread();\n    player.setRepeatMode(repeatMode);\n  }\n  @Override\n  public void setShuffleModeEnabled(boolean shuffleModeEnabled) {\n    verifyApplicationThread();\n    player.setShuffleModeEnabled(shuffleModeEnabled);\n  }\n  @Override\n  public boolean getShuffleModeEnabled() {\n    verifyApplicationThread();\n    return player.getShuffleModeEnabled();\n  }\n  @Override\n  public boolean isLoading() {\n    verifyApplicationThread();\n    return player.isLoading();\n  }\n<fim_suffix>  @Override\n  public void seekTo(int windowIndex, long positionMs) {\n    verifyApplicationThread();\n    analyticsCollector.notifySeekStarted();\n    player.seekTo(windowIndex, positionMs);\n  }<fim_middle>// function below has no smell\n"}