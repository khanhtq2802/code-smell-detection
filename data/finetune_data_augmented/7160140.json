{"text": "<fim_prefix>/**\n * Copyright (c) Microsoft Corporation\n * <p/>\n * All rights reserved.\n * <p/>\n * MIT License\n * <p/>\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n * to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n * <p/>\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n * the Software.\n * <p/>\n * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n * THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\npackage com.microsoft.tooling.msservices.serviceexplorer;\n\nimport com.google.common.util.concurrent.FutureCallback;\nimport com.google.common.util.concurrent.Futures;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n<fim_suffix>public class NodeAction {\n    private String name;\n    private boolean enabled = true;\n    private List<NodeActionListener> listeners = new ArrayList<NodeActionListener>();\n    private Node node; // the node with which this action is associated\n    private String iconPath;\n\n    public NodeAction(Node node, String name) {\n        this.node = node;\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void addListener(NodeActionListener listener) {\n        listeners.add(listener);\n    }\n\n    public List<NodeActionListener> getListeners() {\n        return listeners;\n    }\n\n    public void fireNodeActionEvent() {\n        if (!listeners.isEmpty()) {\n            final NodeActionEvent event = new NodeActionEvent(this);\n            for (final NodeActionListener listener : listeners) {\n                listener.beforeActionPerformed(event);\n                Futures.addCallback(listener.actionPerformedAsync(event), new FutureCallback<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        listener.afterActionPerformed(event);\n                    }\n\n                    @Override\n                    public void onFailure(Throwable throwable) {\n                        listener.afterActionPerformed(event);\n                    }\n                });\n            }\n        }\n    }\n\n    public Node getNode() {\n        return node;\n    }\n\n    public boolean isEnabled() {\n        // if the node to which this action is attached is in a\n        // \"loading\" state then we disable the action regardless\n        // of what \"enabled\" is\n        return !node.isLoading() && enabled;\n    }\n\n    public void setEnabled(boolean enabled) {\n        this.enabled = enabled;\n    }\n\n    public String getIconPath() {\n        return iconPath;\n    }\n\n    public void setIconPath(String iconPath) {\n        this.iconPath = iconPath;\n    }\n}<fim_middle>// class below has no smell\n"}