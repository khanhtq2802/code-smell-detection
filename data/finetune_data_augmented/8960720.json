{"text": "<fim_prefix>      public void write(org.apache.thrift.protocol.TProtocol prot, get_table_objects_by_name_req_args struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetReq()) {\n          optionals.set(0);\n        }\n        oprot.writeBitSet(optionals, 1);\n        if (struct.isSetReq()) {\n          struct.req.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, get_table_objects_by_name_req_args struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        BitSet incoming = iprot.readBitSet(1);\n        if (incoming.get(0)) {\n          struct.req = new GetTablesRequest();\n          struct.req.read(iprot);\n          struct.setReqIsSet(true);\n        }\n      }\n    }\n  }\n  @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class get_table_objects_by_name_req_result implements org.apache.thrift.TBase<get_table_objects_by_name_req_result, get_table_objects_by_name_req_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_table_objects_by_name_req_result>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"get_table_objects_by_name_req_result\");\n    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"success\", org.apache.thrift.protocol.TType.STRUCT, (short)0);\n    private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField(\"o1\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n    private static final org.apache.thrift.protocol.TField O2_FIELD_DESC = new org.apache.thrift.protocol.TField(\"o2\", org.apache.thrift.protocol.TType.STRUCT, (short)2);\n    private static final org.apache.thrift.protocol.TField O3_FIELD_DESC = new org.apache.thrift.protocol.TField(\"o3\", org.apache.thrift.protocol.TType.STRUCT, (short)3);\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new get_table_objects_by_name_req_resultStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new get_table_objects_by_name_req_resultTupleSchemeFactory());\n    }\n    private GetTablesResult success; // required\n    private MetaException o1; // required\n    private InvalidOperationException o2; // required\n    private UnknownDBException o3; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      SUCCESS((short)0, \"success\"),\n      O1((short)1, \"o1\"),\n      O2((short)2, \"o2\"),\n      O3((short)3, \"o3\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 0: // SUCCESS\n            return SUCCESS;\n          case 1: // O1\n            return O1;\n          case 2: // O2\n            return O2;\n          case 3: // O3\n            return O3;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData(\"success\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetTablesResult.class)));\n      tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData(\"o1\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));\n      tmpMap.put(_Fields.O2, new org.apache.thrift.meta_data.FieldMetaData(\"o2\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));\n      tmpMap.put(_Fields.O3, new org.apache.thrift.meta_data.FieldMetaData(\"o3\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_table_objects_by_name_req_result.class, metaDataMap);\n    }\n    public get_table_objects_by_name_req_result() {\n    }\n    public get_table_objects_by_name_req_result(\n      GetTablesResult success,\n      MetaException o1,\n      InvalidOperationException o2,\n      UnknownDBException o3)\n    {\n      this();\n      this.success = success;\n      this.o1 = o1;\n      this.o2 = o2;\n      this.o3 = o3;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public get_table_objects_by_name_req_result(get_table_objects_by_name_req_result other) {\n      if (other.isSetSuccess()) {\n        this.success = new GetTablesResult(other.success);\n      }\n      if (other.isSetO1()) {\n        this.o1 = new MetaException(other.o1);\n      }\n      if (other.isSetO2()) {\n        this.o2 = new InvalidOperationException(other.o2);\n      }\n      if (other.isSetO3()) {\n        this.o3 = new UnknownDBException(other.o3);\n      }\n    }\n    public get_table_objects_by_name_req_result deepCopy() {\n      return new get_table_objects_by_name_req_result(this);\n    }\n    @Override\n    public void clear() {\n      this.success = null;\n      this.o1 = null;\n      this.o2 = null;\n      this.o3 = null;\n    }\n    public GetTablesResult getSuccess() {\n      return this.success;\n    }\n    public void setSuccess(GetTablesResult success) {\n      this.success = success;\n    }\n    public void unsetSuccess() {\n      this.success = null;\n    }\n    /** Returns true if field success is set (has been assigned a value) and false otherwise */\n    public boolean isSetSuccess() {\n      return this.success != null;\n    }\n<fim_suffix>    public void setSuccessIsSet(boolean value) {\n      if (!value) {\n        this.success = null;\n      }\n    }<fim_middle>// function below has no smell\n"}