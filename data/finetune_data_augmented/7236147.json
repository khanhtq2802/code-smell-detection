{"text": "<fim_prefix>package org.robolectric.android.controller;\n\nimport android.content.ComponentName;\nimport android.content.ContentProvider;\nimport android.content.Context;\nimport android.content.pm.PackageManager;\nimport android.content.pm.ProviderInfo;\nimport org.robolectric.RuntimeEnvironment;\nimport org.robolectric.shadows.ShadowContentResolver;\nimport org.robolectric.util.Logger;\n\n<fim_suffix>public class ContentProviderController<T extends ContentProvider>  {\n  private T contentProvider;\n\n  private ContentProviderController(T contentProvider) {\n    this.contentProvider = contentProvider;\n  }\n\n  public static <T extends ContentProvider> ContentProviderController<T> of(T contentProvider) {\n    return new ContentProviderController<>(contentProvider);\n  }\n\n  /**\n   * Create and register {@link ContentProvider} using {@link ProviderInfo} found from manifest.\n   */\n  public ContentProviderController<T> create() {\n    Context baseContext = RuntimeEnvironment.application.getBaseContext();\n\n    ComponentName componentName = createRelative(baseContext.getPackageName(), contentProvider.getClass().getName());\n\n    ProviderInfo providerInfo = null;\n    try {\n      providerInfo =\n          baseContext\n              .getPackageManager()\n              .getProviderInfo(componentName, PackageManager.MATCH_DISABLED_COMPONENTS);\n    } catch (PackageManager.NameNotFoundException e) {\n      Logger.strict(\"Unable to find provider info for \" + componentName, e);\n    }\n\n    return create(providerInfo);\n  }\n\n  /**\n   * Create and register {@link ContentProvider} using {@link ProviderInfo} found from manifest.\n   *\n   * @param authority the authority to use\n   * @return this {@link ContentProviderController}\n   */\n  public ContentProviderController<T> create(String authority) {\n    ProviderInfo providerInfo = new ProviderInfo();\n    providerInfo.authority = authority;\n    return create(providerInfo);\n  }\n\n  /**\n   * Create and register {@link ContentProvider} using the given {@link ProviderInfo}.\n   *\n   * @param providerInfo the {@link ProviderInfo} to use\n   * @return this {@link ContentProviderController}\n   */\n  public ContentProviderController<T> create(ProviderInfo providerInfo) {\n    Context baseContext = RuntimeEnvironment.application.getBaseContext();\n    // make sure the component is enabled\n    ComponentName componentName =\n        createRelative(baseContext.getPackageName(), contentProvider.getClass().getName());\n    baseContext\n        .getPackageManager()\n        .setComponentEnabledSetting(\n            componentName, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, 0);\n    contentProvider.attachInfo(baseContext, providerInfo);\n\n    if (providerInfo != null) {\n      ShadowContentResolver.registerProviderInternal(providerInfo.authority, contentProvider);\n    }\n\n    return this;\n  }\n\n  public T get() {\n    return contentProvider;\n  }\n\n  public ContentProviderController<T> shutdown() {\n    contentProvider.shutdown();\n    return this;\n  }\n\n  private static ComponentName createRelative(String pkg, String cls) {\n    final String fullName;\n    if (cls.charAt(0) == '.') {\n      // Relative to the package. Prepend the package name.\n      fullName = pkg + cls;\n    } else {\n      // Fully qualified package name.\n      fullName = cls;\n    }\n    return new ComponentName(pkg, fullName);\n  }\n}<fim_middle>// class below has no smell\n"}