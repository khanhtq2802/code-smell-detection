{"text": "<fim_prefix>/*\n * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 3 only, as\n * published by the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 3 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 3 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.truffle.r.nodes.unary;\n\nimport com.oracle.truffle.api.CompilerDirectives;\nimport com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;\nimport com.oracle.truffle.api.dsl.Cached;\nimport com.oracle.truffle.api.dsl.Fallback;\nimport com.oracle.truffle.api.dsl.Specialization;\nimport com.oracle.truffle.r.nodes.primitive.UnaryMapNode;\nimport com.oracle.truffle.r.nodes.profile.TruffleBoundaryNode;\nimport com.oracle.truffle.r.runtime.RError;\nimport com.oracle.truffle.r.runtime.RType;\nimport com.oracle.truffle.r.runtime.data.RMissing;\nimport com.oracle.truffle.r.runtime.data.model.RAbstractComplexVector;\nimport com.oracle.truffle.r.runtime.data.model.RAbstractDoubleVector;\nimport com.oracle.truffle.r.runtime.data.model.RAbstractIntVector;\nimport com.oracle.truffle.r.runtime.data.model.RAbstractLogicalVector;\nimport com.oracle.truffle.r.runtime.data.model.RAbstractVector;\nimport com.oracle.truffle.r.runtime.nodes.RBaseNode;\nimport com.oracle.truffle.r.runtime.ops.UnaryArithmetic;\nimport com.oracle.truffle.r.runtime.ops.UnaryArithmeticFactory;\n\npublic abstract class UnaryArithmeticNode extends UnaryNode {\n\n    protected final UnaryArithmeticFactory unary;\n\n    public UnaryArithmeticNode(UnaryArithmeticFactory factory) {\n        this.unary = factory;\n    }\n\n    public abstract Object execute(Object value);\n\n    @Specialization(guards = {\"cachedNode != null\", \"cachedNode.isSupported(operand)\"})\n    protected Object doCached(RAbstractVector operand,\n                    @Cached(\"createCachedFast(operand)\") UnaryMapNode cachedNode) {\n        return cachedNode.apply(operand);\n    }\n\n    protected UnaryMapNode createCachedFast(RAbstractVector operand) {\n        if (isNumericVector(operand)) {\n            return createCached(unary.createOperation(), operand, false);\n        }\n        return null;\n    }\n\n    protected static UnaryMapNode createCached(UnaryArithmetic arithmetic, Object operand, boolean isGeneric) {\n        if (operand instanceof RAbstractVector) {\n            RAbstractVector castOperand = (RAbstractVector) operand;\n            RType operandType = castOperand.getRType();\n            if (operandType.isNumeric()) {\n                RType type = RType.maxPrecedence(operandType, arithmetic.getMinPrecedence());\n                RType resultType = arithmetic.calculateResultType(type);\n                return UnaryMapNode.create(new ScalarUnaryArithmeticNode(arithmetic), castOperand, type, resultType, isGeneric);\n            }\n        }\n        return null;\n    }\n\n    protected static boolean isNumericVector(RAbstractVector value) {\n        return value instanceof RAbstractIntVector || value instanceof RAbstractDoubleVector || value instanceof RAbstractComplexVector || value instanceof RAbstractLogicalVector;\n    }\n\n    @Specialization(replaces = \"doCached\", guards = {\"isNumericVector(operand)\"})\n    @TruffleBoundary\n    protected Object doGeneric(RAbstractVector operand,\n                    @Cached(\"unary.createOperation()\") UnaryArithmetic arithmetic,\n                    @Cached(\"createGeneric()\") GenericNumericVectorNode generic) {\n        return generic.get(arithmetic, operand).apply(operand);\n    }\n\n    protected static GenericNumericVectorNode createGeneric() {\n        return new GenericNumericVectorNode();\n    }\n\n    @Override\n    public RBaseNode getErrorContext() {\n        return this;\n    }\n\n    @Fallback\n    protected Object invalidArgType(Object operand) {\n        CompilerDirectives.transferToInterpreter();\n        UnaryArithmetic op = unary.createOperation();\n        if (operand instanceof RMissing) {\n            throw error(RError.Message.ARGUMENTS_PASSED, 0, \"'\" + op.getClass().getSimpleName().toLowerCase() + \"'\", 1);\n        } else {\n            throw error(op.getArgumentError());\n        }\n    }\n\n<fim_suffix>    protected static final class GenericNumericVectorNode extends TruffleBoundaryNode {\n\n        @Child private UnaryMapNode cached;\n\n        public UnaryMapNode get(UnaryArithmetic arithmetic, RAbstractVector operand) {\n            UnaryMapNode map = cached;\n            if (map == null || !map.isSupported(operand)) {\n                cached = map = insert(createCached(arithmetic, operand, true));\n            }\n            return map;\n        }\n    }\n}<fim_middle>// class below has no smell\n"}