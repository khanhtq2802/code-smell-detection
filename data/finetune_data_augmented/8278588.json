{"text": "<fim_prefix>/****************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one   *\n * or more contributor license agreements.  See the NOTICE file *\n * distributed with this work for additional information        *\n * regarding copyright ownership.  The ASF licenses this file   *\n * to you under the Apache License, Version 2.0 (the            *\n * \"License\"); you may not use this file except in compliance   *\n * with the License.  You may obtain a copy of the License at   *\n *                                                              *\n *   http://www.apache.org/licenses/LICENSE-2.0                 *\n *                                                              *\n * Unless required by applicable law or agreed to in writing,   *\n * software distributed under the License is distributed on an  *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n * KIND, either express or implied.  See the License for the    *\n * specific language governing permissions and limitations      *\n * under the License.                                           *\n ****************************************************************/\npackage org.apache.james.dnsservice.library.netmatcher;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\n\nimport org.apache.james.dnsservice.api.DNSService;\nimport org.apache.james.dnsservice.library.inetnetwork.InetNetworkBuilder;\nimport org.apache.james.dnsservice.library.inetnetwork.model.InetNetwork;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.common.base.Splitter;\n\n/**\n * NetMatcher Class is used to check if an ipAddress match a network.\n * \n * NetMatcher provides a means for checking whether a particular IPv4 or IPv6\n * address or domain name is within a set of subnets.\n */\n<fim_suffix>public class NetMatcher {\n    private static final Logger LOGGER = LoggerFactory.getLogger(NetMatcher.class);\n\n    public static final String NETS_SEPARATOR = \", \";\n\n    /**\n     * The DNS Service used to build InetNetworks.\n     */\n    private final DNSService dnsServer;\n\n    /**\n     * The Set of InetNetwork to match against.\n     */\n    private SortedSet<InetNetwork> networks;\n\n    /**\n     * Create a new instance of Netmatcher.\n     * \n     * @param nets\n     *            a String[] which holds all networks\n     * @param dnsServer\n     *            the DNSService which will be used in this class\n     */\n    public NetMatcher(String[] nets, DNSService dnsServer) {\n        this.dnsServer = dnsServer;\n        initInetNetworks(nets);\n    }\n\n    /**\n     * Create a new instance of Netmatcher.\n     * \n     * @param nets\n     *            a Collection which holds all networks\n     * @param dnsServer\n     *            the DNSService which will be used in this class\n     */\n    public NetMatcher(Collection<String> nets, DNSService dnsServer) {\n        this.dnsServer = dnsServer;\n        initInetNetworks(nets);\n    }\n\n    public NetMatcher(String commaSeparatedNets, DNSService dnsServer) {\n        this.dnsServer = dnsServer;\n        List<String> nets = Splitter.on(NETS_SEPARATOR).splitToList(commaSeparatedNets);\n        initInetNetworks(nets);\n    }\n\n    /**\n     * The given String may represent an IP address or a host name.\n     * \n     * @param hostIP\n     *            the ipAddress or host name to check\n     * @see #matchInetNetwork(InetAddress)\n     */\n    public boolean matchInetNetwork(String hostIP) {\n\n        InetAddress ip;\n\n        try {\n            ip = dnsServer.getByName(hostIP);\n        } catch (UnknownHostException uhe) {\n            LOGGER.info(\"Cannot resolve address for {}: {}\", hostIP, uhe.getMessage());\n            return false;\n        }\n\n        return matchInetNetwork(ip);\n\n    }\n\n    /**\n     * Return true if passed InetAddress match a network which was used to\n     * construct the Netmatcher.\n     * \n     * @param ip\n     *            InetAddress\n     * @return true if match the network\n     */\n    public boolean matchInetNetwork(InetAddress ip) {\n\n        boolean sameNet = false;\n\n        for (Iterator<InetNetwork> iter = networks.iterator(); (!sameNet) && iter.hasNext();) {\n            InetNetwork network = iter.next();\n            sameNet = network.contains(ip);\n        }\n\n        return sameNet;\n\n    }\n\n    @Override\n    public String toString() {\n        return networks.toString();\n    }\n\n    /**\n     * Init the class with the given networks.\n     * \n     * @param nets\n     *            a Collection which holds all networks\n     */\n    private void initInetNetworks(Collection<String> nets) {\n        initInetNetworks(nets.toArray(new String[nets.size()]));\n    }\n\n    /**\n     * Init the class with the given networks.\n     * \n     * @param nets\n     *            a String[] which holds all networks\n     */\n    private void initInetNetworks(String[] nets) {\n\n        networks = new TreeSet<>(Comparator.comparing(Object::toString));\n\n        final InetNetworkBuilder inetNetwork = new InetNetworkBuilder(dnsServer);\n\n        for (String net : nets) {\n            try {\n                InetNetwork inet = inetNetwork.getFromString(net);\n                networks.add(inet);\n            } catch (UnknownHostException uhe) {\n                LOGGER.info(\"Cannot resolve address: {}\", uhe.getMessage());\n            }\n        }\n\n    }\n\n}<fim_middle>// class below has no smell\n"}