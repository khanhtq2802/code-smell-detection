{"text": "<fim_prefix>  }\n  public static MetaImage getMetaImage(URL src, ResourceLoadListener loadNotifier)\n  {\n    String srcStr = src == null ? ((String)null) : src.toString();\n    if (globalImageCache.containsKey(srcStr))\n    {\n      MetaImage rv = globalImageCache.get(srcStr);\n      // Check to make sure we've got this locally cached already; otherwise\n      // return a waiter while we download the image\n      if (src == null || loadNotifier == null || !loadNotifier.needsLoadCallback(src) || !ASYNC_LOAD_URL_IMAGES || (!\"http\".equals(src.getProtocol()) && !\"https\".equals(src.getProtocol()) && !\"ftp\".equals(src.getProtocol())) ||\n          (rv.localCacheFile != null && rv.localCacheFile.isFile()) || rv.loadFailed ||\n          rv.mightLoadFast(loadNotifier.getUIMgr()))\n        // found a valid cached MI\n        if (!rv.loadFailed || rv.lastUrlLoadTime + URL_RETRY_TIMEOUT_MILLIS > Sage.eventTime()) {\n          // Either image succeeded, or image failed last time, and we are not yet ready to\n          // retry, so return existing MI\n          if ( localCacheFileTracker!=null && rv.localCacheFile != null)\n            localCacheFileTracker.touch(rv);\n          return rv;\n        } else {\n          // image failed loading last time, but retry timeout has expired\n          // retry image loading - clear this cached MI and create a new one below\n          clearFromCache(src);\n        }\n    }\n    if (loadNotifier != null && loadNotifier.needsLoadCallback(src) && ASYNC_LOAD_URL_IMAGES && (\"http\".equals(src.getProtocol()) || \"https\".equals(src.getProtocol()) || \"ftp\".equals(src.getProtocol())))\n    {\n      getAsyncLoader(loadNotifier.getUIMgr()).loadImage(srcStr, loadNotifier);\n      return new Waiter(getMetaImage((String)null), src);\n    }\n    if (DEBUG_MI) System.out.println(\"first getMetaImage src=\" + src);\n    MetaImage rv = new MetaImage(src);\n    rv.initDataStructures(1);\n    // We need to load this image so we can get its sizing information\n    //\t\trv.setJavaImage(ImageUtils.fullyLoadImage(src), 0);\n    //\t\trv.getRawImage(0);\n    //\t\trv.removeRawRef(0);\n    if (!rv.loadCacheFile())\n    {\n      rv.setRawImage(sage.media.image.ImageLoader.getNullImage(), 0, 0);\n      rv.sourceHasAlpha = true;\n    }\n    else\n    {\n      try\n      {\n        sage.media.image.RawImage ri = sage.media.image.ImageLoader.loadImageDimensionsFromFile(rv.localCacheFile.getAbsolutePath());\n        if (ri != null)\n        {\n          rv.width[0] = ri.getWidth();\n          rv.height[0] = ri.getHeight();\n          rv.sourceHasAlpha = ri.hasAlpha();\n        }\n        else\n          throw new IOException(\"Failed loading image dimensions from:\" + src);\n      }\n      catch (IOException e)\n      {\n        if (Sage.DBG) System.out.println(\"Error accessing image file \" + src + \" of \" + e);\n        return globalImageCache.get(null);\n      }\n    }\n    synchronized (globalImageCache)\n    {\n      if (globalImageCache.containsKey(srcStr)) return globalImageCache.get(srcStr);\n      globalImageCache.put(srcStr, rv);\n    }\n    if (DEBUG_MI) System.out.println(\"DONE first getMetaImage src=\" + src);\n    return rv;\n  }\n  public static MetaImage getMetaImage(Album src)\n  {\n    if (globalImageCache.containsKey(src)) return globalImageCache.get(src);\n    if (DEBUG_MI) System.out.println(\"first getMetaImage src=\" + src);\n    MetaImage rv = new MetaImage(src);\n    if (!rv.initAlbumImage())\n      return globalImageCache.get(null);\n    synchronized (globalImageCache)\n    {\n      if (globalImageCache.containsKey(src)) return globalImageCache.get(src);\n      globalImageCache.put(src, rv);\n    }\n    if (DEBUG_MI) System.out.println(\"DONE first getMetaImage src=\" + src);\n    return rv;\n  }\n  public static MetaImage getMetaImageNoLoad(Object src)\n  {\n    return getMetaImageNoLoad(src, null);\n  }\n  public static MetaImage getMetaImageNoLoad(Object src, ResourceLoadListener loadListener)\n  {\n    if (src instanceof URL)\n      src = src.toString();\n    if (src instanceof String && ((String)src).length() == 0)\n      src = null;\n    MetaImage rv = globalImageCache.get(src);\n    // Since we disabled the File->MF conversion above; we should also do so here\n    /*\t\tif (rv == null && src instanceof File)\n\t\t{\n\t\t\tMediaFile mf = Wizard.getInstance().getFileForFilePath((File)src);\n\t\t\tif (mf != null)\n\t\t\t{\n\t\t\t\trv = (MetaImage) globalImageCache.get(mf);\n\t\t\t}\n\t\t}*/\n    if (rv != null || loadListener == null)\n      return rv;\n    UIManager uiMgr = loadListener.getUIMgr();\n    if (uiMgr != null && src instanceof String)\n      return uiMgr.getUICachedMetaImage((String) src);\n    else\n      return null;\n  }\n  // We use weak references to the source object on Java images because we don't want to keep\n  // those around unless necessary\n  public static MetaImage getMetaImage(Image src)\n  {\n    if (src == null) return globalImageCache.get(null);\n    if (globalWeakImageCache.containsKey(src)) return globalWeakImageCache.get(src);\n    if (DEBUG_MI) System.out.println(\"first getMetaImage src=\" + src);\n    Object srcObj = new WeakReference<Object>(src);\n    MetaImage rv = new MetaImage(srcObj);\n    rv.initDataStructures(1);\n    // We need to load this image so we can get its sizing information\n    // The src object will maintain the reference to the source of truth\n    rv.setJavaImage(src, 0, 0);\n    synchronized (globalWeakImageCache)\n    {\n      if (globalWeakImageCache.containsKey(src)) return globalWeakImageCache.get(src);\n      globalWeakImageCache.put(src, rv);\n    }\n    if (DEBUG_MI) System.out.println(\"DONE first getMetaImage src=\" + src);\n    return rv;\n  }\n  public static MetaImage getMetaImage(MetaImage srcImage, MetaImage diffuseImage, Rectangle fullSrcRect, boolean flipX, boolean flipY, int diffuseColor)\n  {\n    if (srcImage == null) return globalImageCache.get(null);\n    if (diffuseImage == null && !flipX && !flipY && diffuseColor == 0xFFFFFF) return srcImage;\n    @SuppressWarnings(\"unchecked\")\n    Vector<Object> src = Pooler.getPooledVector();\n    src.add(srcImage);\n    src.add(diffuseImage);\n    src.add(fullSrcRect);\n    src.add(flipX ? Boolean.TRUE : Boolean.FALSE);\n    src.add(flipY ? Boolean.TRUE : Boolean.FALSE);\n    src.add(new Integer(diffuseColor));\n    MetaImage rv = getMetaImage(src);\n    Pooler.returnPooledVector(src);\n    return rv;\n  }\n<fim_suffix>  public static MetaImage getMetaImage(Vector<Object> src)\n  {\n    if (src == null) return globalImageCache.get(null);\n    if (globalImageCache.containsKey(src))\n    {\n      MetaImage rv = globalImageCache.get(src);\n      return rv;\n    }\n    {\n      // use tmpSrc to avoid needing warning suppression of\n      // unchecked conversion at function scope\n      @SuppressWarnings(\"unchecked\")\n      Vector<Object>  tmpSrc = (Vector<Object>) src.clone();\n      src = tmpSrc;\n    }\n    if (DEBUG_MI) System.out.println(\"first getMetaImage src=\" + src);\n    MetaImage rv = new MetaImage(src);\n    MetaImage srcImage = (MetaImage) src.get(0);\n    rv.initDataStructures(1);\n    rv.width[0] = srcImage.getWidth(0);\n    rv.height[0] = srcImage.getHeight(0);\n    synchronized (globalImageCache)\n    {\n      if (globalImageCache.containsKey(src)) return globalImageCache.get(src);\n      globalImageCache.put(src, rv);\n    }\n    if (DEBUG_MI) System.out.println(\"DONE first getMetaImage src=\" + src);\n    return rv;\n  }<fim_middle>// function below has no smell\n"}