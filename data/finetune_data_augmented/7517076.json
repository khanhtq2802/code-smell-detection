{"text": "<fim_prefix>/*\n * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage org.graalvm.compiler.debug;\n\nimport static org.graalvm.compiler.debug.DebugCloseable.VOID_CLOSEABLE;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.graalvm.collections.Pair;\n\nfinal class TimerKeyImpl extends AccumulatedKey implements TimerKey {\n    static class FlatTimer extends AbstractKey implements TimerKey {\n        private TimerKeyImpl accm;\n\n        FlatTimer(String nameFormat, Object nameArg1, Object nameArg2) {\n            super(nameFormat, nameArg1, nameArg2);\n        }\n\n        @Override\n        protected String createName(String format, Object arg1, Object arg2) {\n            return super.createName(format, arg1, arg2) + FLAT_KEY_SUFFIX;\n        }\n\n        @Override\n        public String toHumanReadableFormat(long value) {\n            return valueToString(value);\n        }\n\n        @Override\n        public TimeUnit getTimeUnit() {\n            return accm.getTimeUnit();\n        }\n\n        @Override\n        public DebugCloseable start(DebugContext debug) {\n            return accm.start(debug);\n        }\n\n        @Override\n        public Pair<String, String> toCSVFormat(long value) {\n            return TimerKeyImpl.toCSVFormatHelper(value);\n        }\n\n        @Override\n        public TimerKey doc(String doc) {\n            throw new IllegalArgumentException(\"Cannot set documentation for derived key \" + getName());\n        }\n\n        @Override\n        public String getDocName() {\n            return null;\n        }\n    }\n\n    TimerKeyImpl(String nameFormat, Object nameArg1, Object nameArg2) {\n        super(new FlatTimer(nameFormat, nameArg1, nameArg2), nameFormat, nameArg1, nameArg2);\n        ((FlatTimer) flat).accm = this;\n    }\n\n    @Override\n    public DebugCloseable start(DebugContext debug) {\n        if (debug.isTimerEnabled(this)) {\n            Timer result = new Timer(this, debug);\n            debug.currentTimer = result;\n            return result;\n        } else {\n            return VOID_CLOSEABLE;\n        }\n    }\n\n    public static String valueToString(long value) {\n        return String.format(\"%d.%d ms\", value / 1000000, (value / 100000) % 10);\n    }\n\n    @Override\n    public TimerKey getFlat() {\n        return (FlatTimer) flat;\n    }\n\n    @Override\n    public String toHumanReadableFormat(long value) {\n        return valueToString(value);\n    }\n\n    @Override\n    public TimeUnit getTimeUnit() {\n        return TimeUnit.NANOSECONDS;\n    }\n\n    static final class Timer extends CloseableCounter implements DebugCloseable {\n        final DebugContext debug;\n\n        Timer(AccumulatedKey counter, DebugContext debug) {\n            super(debug, debug.currentTimer, counter);\n            this.debug = debug;\n        }\n\n        @Override\n        public void close() {\n            super.close();\n            debug.currentTimer = parent;\n        }\n\n        @Override\n        protected long getCounterValue() {\n            return TimeSource.getTimeNS();\n        }\n\n    }\n\n<fim_suffix>    @Override\n    public Pair<String, String> toCSVFormat(long value) {\n        return toCSVFormatHelper(value);\n    }\n\n    static Pair<String, String> toCSVFormatHelper(long value) {\n        return Pair.create(Long.toString(value / 1000), \"us\");\n    }\n\n    @Override\n    public TimerKey doc(String doc) {\n        setDoc(doc);\n        return this;\n    }\n}<fim_middle>// function below has no smell\n"}