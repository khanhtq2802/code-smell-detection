{"text": "<fim_prefix>import org.eclipse.aether.RepositorySystem;\nimport org.eclipse.aether.artifact.Artifact;\nimport org.eclipse.aether.artifact.DefaultArtifact;\nimport org.eclipse.aether.collection.CollectRequest;\nimport org.eclipse.aether.graph.Dependency;\nimport org.eclipse.aether.graph.Exclusion;\nimport org.eclipse.aether.repository.RemoteRepository;\nimport org.eclipse.aether.resolution.ArtifactResolutionException;\nimport org.eclipse.aether.resolution.ArtifactResult;\nimport org.eclipse.aether.resolution.DependencyRequest;\nimport org.eclipse.aether.resolution.DependencyResult;\nimport org.eclipse.aether.util.artifact.JavaScopes;\nimport org.eclipse.aether.util.filter.DependencyFilterUtils;\n/**\n * A {@link GrapeEngine} implementation that uses\n * <a href=\"http://eclipse.org/aether\">Aether</a>, the dependency resolution system used\n * by Maven.\n *\n * @author Andy Wilkinson\n * @author Phillip Webb\n */\n@SuppressWarnings(\"rawtypes\")\npublic class AetherGrapeEngine implements GrapeEngine {\n\tprivate static final Collection<Exclusion> WILDCARD_EXCLUSION;\n\tstatic {\n\t\tList<Exclusion> exclusions = new ArrayList<>();\n\t\texclusions.add(new Exclusion(\"*\", \"*\", \"*\", \"*\"));\n\t\tWILDCARD_EXCLUSION = Collections.unmodifiableList(exclusions);\n\t}\n\tprivate final DependencyResolutionContext resolutionContext;\n\tprivate final ProgressReporter progressReporter;\n\tprivate final GroovyClassLoader classLoader;\n\tprivate final DefaultRepositorySystemSession session;\n\tprivate final RepositorySystem repositorySystem;\n\tprivate final List<RemoteRepository> repositories;\n\tpublic AetherGrapeEngine(GroovyClassLoader classLoader,\n\t\t\tRepositorySystem repositorySystem,\n\t\t\tDefaultRepositorySystemSession repositorySystemSession,\n\t\t\tList<RemoteRepository> remoteRepositories,\n\t\t\tDependencyResolutionContext resolutionContext, boolean quiet) {\n\t\tthis.classLoader = classLoader;\n\t\tthis.repositorySystem = repositorySystem;\n\t\tthis.session = repositorySystemSession;\n\t\tthis.resolutionContext = resolutionContext;\n\t\tthis.repositories = new ArrayList<>();\n\t\tList<RemoteRepository> remotes = new ArrayList<>(remoteRepositories);\n\t\tCollections.reverse(remotes); // priority is reversed in addRepository\n\t\tfor (RemoteRepository repository : remotes) {\n\t\t\taddRepository(repository);\n\t\t}\n\t\tthis.progressReporter = getProgressReporter(this.session, quiet);\n\t}\n\tprivate ProgressReporter getProgressReporter(DefaultRepositorySystemSession session,\n\t\t\tboolean quiet) {\n\t\tString progressReporter = (quiet ? \"none\" : System.getProperty(\n\t\t\t\t\"org.springframework.boot.cli.compiler.grape.ProgressReporter\"));\n\t\tif (\"detail\".equals(progressReporter)\n\t\t\t\t|| Boolean.getBoolean(\"groovy.grape.report.downloads\")) {\n\t\t\treturn new DetailedProgressReporter(session, System.out);\n\t\t}\n\t\tif (\"none\".equals(progressReporter)) {\n\t\t\treturn () -> {\n\t\t\t};\n\t\t}\n\t\treturn new SummaryProgressReporter(session, System.out);\n\t}\n\t@Override\n\tpublic Object grab(Map args) {\n\t\treturn grab(args, args);\n\t}\n\t@Override\n\tpublic Object grab(Map args, Map... dependencyMaps) {\n\t\tList<Exclusion> exclusions = createExclusions(args);\n\t\tList<Dependency> dependencies = createDependencies(dependencyMaps, exclusions);\n\t\ttry {\n\t\t\tList<File> files = resolve(dependencies);\n\t\t\tGroovyClassLoader classLoader = getClassLoader(args);\n\t\t\tfor (File file : files) {\n\t\t\t\tclassLoader.addURL(file.toURI().toURL());\n\t\t\t}\n\t\t}\n\t\tcatch (ArtifactResolutionException | MalformedURLException ex) {\n\t\t\tthrow new DependencyResolutionFailedException(ex);\n\t\t}\n\t\treturn null;\n\t}\n\t@SuppressWarnings(\"unchecked\")\n\tprivate List<Exclusion> createExclusions(Map<?, ?> args) {\n\t\tList<Exclusion> exclusions = new ArrayList<>();\n\t\tif (args != null) {\n\t\t\tList<Map<String, Object>> exclusionMaps = (List<Map<String, Object>>) args\n\t\t\t\t\t.get(\"excludes\");\n\t\t\tif (exclusionMaps != null) {\n\t\t\t\tfor (Map<String, Object> exclusionMap : exclusionMaps) {\n\t\t\t\t\texclusions.add(createExclusion(exclusionMap));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn exclusions;\n\t}\n\tprivate Exclusion createExclusion(Map<String, Object> exclusionMap) {\n\t\tString group = (String) exclusionMap.get(\"group\");\n\t\tString module = (String) exclusionMap.get(\"module\");\n\t\treturn new Exclusion(group, module, \"*\", \"*\");\n\t}\n\tprivate List<Dependency> createDependencies(Map<?, ?>[] dependencyMaps,\n\t\t\tList<Exclusion> exclusions) {\n\t\tList<Dependency> dependencies = new ArrayList<>(dependencyMaps.length);\n\t\tfor (Map<?, ?> dependencyMap : dependencyMaps) {\n\t\t\tdependencies.add(createDependency(dependencyMap, exclusions));\n\t\t}\n\t\treturn dependencies;\n\t}\n\tprivate Dependency createDependency(Map<?, ?> dependencyMap,\n\t\t\tList<Exclusion> exclusions) {\n\t\tArtifact artifact = createArtifact(dependencyMap);\n\t\tif (isTransitive(dependencyMap)) {\n\t\t\treturn new Dependency(artifact, JavaScopes.COMPILE, false, exclusions);\n\t\t}\n\t\treturn new Dependency(artifact, JavaScopes.COMPILE, null, WILDCARD_EXCLUSION);\n\t}\n\tprivate Artifact createArtifact(Map<?, ?> dependencyMap) {\n\t\tString group = (String) dependencyMap.get(\"group\");\n\t\tString module = (String) dependencyMap.get(\"module\");\n\t\tString version = (String) dependencyMap.get(\"version\");\n\t\tif (version == null) {\n\t\t\tversion = this.resolutionContext.getManagedVersion(group, module);\n\t\t}\n\t\tString classifier = (String) dependencyMap.get(\"classifier\");\n\t\tString type = determineType(dependencyMap);\n\t\treturn new DefaultArtifact(group, module, classifier, type, version);\n\t}\n\tprivate String determineType(Map<?, ?> dependencyMap) {\n\t\tString type = (String) dependencyMap.get(\"type\");\n\t\tString ext = (String) dependencyMap.get(\"ext\");\n\t\tif (type == null) {\n\t\t\ttype = ext;\n\t\t\tif (type == null) {\n\t\t\t\ttype = \"jar\";\n\t\t\t}\n\t\t}\n\t\telse if (ext != null && !type.equals(ext)) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"If both type and ext are specified they must have the same value\");\n\t\t}\n\t\treturn type;\n\t}\n\tprivate boolean isTransitive(Map<?, ?> dependencyMap) {\n\t\tBoolean transitive = (Boolean) dependencyMap.get(\"transitive\");\n\t\treturn (transitive != null) ? transitive : true;\n\t}\n\tprivate List<Dependency> getDependencies(DependencyResult dependencyResult) {\n\t\tList<Dependency> dependencies = new ArrayList<>();\n\t\tfor (ArtifactResult artifactResult : dependencyResult.getArtifactResults()) {\n\t\t\tdependencies.add(\n\t\t\t\t\tnew Dependency(artifactResult.getArtifact(), JavaScopes.COMPILE));\n\t\t}\n\t\treturn dependencies;\n\t}\n\tprivate List<File> getFiles(DependencyResult dependencyResult) {\n\t\tList<File> files = new ArrayList<>();\n\t\tfor (ArtifactResult result : dependencyResult.getArtifactResults()) {\n\t\t\tfiles.add(result.getArtifact().getFile());\n\t\t}\n\t\treturn files;\n\t}\n\tprivate GroovyClassLoader getClassLoader(Map args) {\n\t\tGroovyClassLoader classLoader = (GroovyClassLoader) args.get(\"classLoader\");\n\t\treturn (classLoader != null) ? classLoader : this.classLoader;\n\t}\n\t@Override\n\tpublic void addResolver(Map<String, Object> args) {\n\t\tString name = (String) args.get(\"name\");\n\t\tString root = (String) args.get(\"root\");\n\t\tRemoteRepository.Builder builder = new RemoteRepository.Builder(name, \"default\",\n\t\t\t\troot);\n\t\tRemoteRepository repository = builder.build();\n\t\taddRepository(repository);\n\t}\n<fim_suffix>\tprotected void addRepository(RemoteRepository repository) {\n\t\tif (this.repositories.contains(repository)) {\n\t\t\treturn;\n\t\t}\n\t\trepository = getPossibleMirror(repository);\n\t\trepository = applyProxy(repository);\n\t\trepository = applyAuthentication(repository);\n\t\tthis.repositories.add(0, repository);\n\t}<fim_middle>// function below has no smell\n"}