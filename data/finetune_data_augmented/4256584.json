{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.net.discard;\n\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.InetAddress;\n\nimport org.apache.commons.net.DatagramSocketClient;\n\n/***\n * The DiscardUDPClient class is a UDP implementation of a client for the\n * Discard protocol described in RFC 863.  To use the class,\n * just open a local UDP port\n * with {@link org.apache.commons.net.DatagramSocketClient#open  open }\n * and call {@link #send  send } to send datagrams to the server\n * After you're done sending discard data, call\n * {@link org.apache.commons.net.DatagramSocketClient#close  close() }\n * to clean up properly.\n *\n * @see DiscardTCPClient\n ***/\n\npublic class DiscardUDPClient extends DatagramSocketClient\n{\n    /*** The default discard port.  It is set to 9 according to RFC 863. ***/\n    public static final int DEFAULT_PORT = 9;\n\n    DatagramPacket _sendPacket;\n\n    public DiscardUDPClient()\n    {\n        _sendPacket = new DatagramPacket(new byte[0], 0);\n    }\n\n\n    /***\n     * Sends the specified data to the specified server at the specified port.\n     *\n     * @param data  The discard data to send.\n     * @param length  The length of the data to send.  Should be less than\n     *    or equal to the length of the data byte array.\n     * @param host  The address of the server.\n     * @param port  The service port.\n     * @throws IOException If an error occurs during the datagram send\n     *            operation.\n     ***/\n<fim_suffix>    public void send(byte[] data, int length, InetAddress host, int port)\n    throws IOException\n    {\n        _sendPacket.setData(data);\n        _sendPacket.setLength(length);\n        _sendPacket.setAddress(host);\n        _sendPacket.setPort(port);\n        _socket_.send(_sendPacket);\n    }\n\n\n    /***\n     * Same as\n     * <code>send(data, length, host. DiscardUDPClient.DEFAULT_PORT)</code>.\n     * @param data the buffer to send\n     * @param length the length of the data in the buffer\n     * @param host the target host\n     * @see #send(byte[], int, InetAddress, int)\n     * @throws IOException if an error occurs\n     ***/\n    public void send(byte[] data, int length, InetAddress host)\n    throws IOException\n    {\n        send(data, length, host, DEFAULT_PORT);\n    }\n\n\n    /***\n     * Same as\n     * <code>send(data, data.length, host. DiscardUDPClient.DEFAULT_PORT)</code>.\n     * @param data the buffer to send\n     * @param host the target host\n     * @see #send(byte[], int, InetAddress, int)\n     * @throws IOException if an error occurs\n     ***/\n    public void send(byte[] data, InetAddress host) throws IOException\n    {\n        send(data, data.length, host, DEFAULT_PORT);\n    }\n\n}\n<fim_middle>// function below is feature envy\n"}