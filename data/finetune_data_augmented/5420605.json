{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.phoenix.end2end;\nimport static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Properties;\nimport org.apache.phoenix.exception.SQLExceptionCode;\nimport org.apache.phoenix.jdbc.PhoenixConnection;\nimport org.apache.phoenix.schema.PTable;\nimport org.apache.phoenix.schema.PTableKey;\nimport org.apache.phoenix.util.PropertiesUtil;\nimport org.apache.phoenix.util.SchemaUtil;\nimport org.junit.Test;\npublic class ImmutableTablePropertiesIT extends ParallelStatsDisabledIT {\n    @Test\n    public void testImmutableKeyword() throws Exception {\n        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n        String immutableDataTableFullName = SchemaUtil.getTableName(\"\", generateUniqueName());\n        String mutableDataTableFullName = SchemaUtil.getTableName(\"\", generateUniqueName());\n        try (Connection conn = DriverManager.getConnection(getUrl(), props);) {\n            Statement stmt = conn.createStatement();\n            // create table with immutable keyword\n            String ddl = \"CREATE IMMUTABLE TABLE  \" + immutableDataTableFullName +\n                    \"  (a_string varchar not null, col1 integer\" +\n                    \"  CONSTRAINT pk PRIMARY KEY (a_string)) STORE_NULLS=true\";\n            stmt.execute(ddl);\n            // create table without immutable keyword\n            ddl = \"CREATE TABLE  \" + mutableDataTableFullName +\n                    \"  (a_string varchar not null, col1 integer\" +\n                    \"  CONSTRAINT pk PRIMARY KEY (a_string)) STORE_NULLS=true\";\n            stmt.execute(ddl);\n            PhoenixConnection phxConn = conn.unwrap(PhoenixConnection.class);\n            PTable immutableTable = phxConn.getTable(new PTableKey(null, immutableDataTableFullName));\n            assertTrue(\"IMMUTABLE_ROWS should be set to true\", immutableTable.isImmutableRows());\n            PTable mutableTable = phxConn.getTable(new PTableKey(null, mutableDataTableFullName));\n            assertFalse(\"IMMUTABLE_ROWS should be set to false\", mutableTable.isImmutableRows());\n        } \n    }\n    @Test\n    public void testImmutableProperty() throws Exception {\n        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n        String immutableDataTableFullName = SchemaUtil.getTableName(\"\", generateUniqueName());\n        String mutableDataTableFullName = SchemaUtil.getTableName(\"\", generateUniqueName());\n        try (Connection conn = DriverManager.getConnection(getUrl(), props);) {\n            Statement stmt = conn.createStatement();\n            // create table with immutable table property set to true\n            String ddl = \"CREATE TABLE  \" + immutableDataTableFullName +\n                    \"  (a_string varchar not null, col1 integer\" +\n                    \"  CONSTRAINT pk PRIMARY KEY (a_string)) IMMUTABLE_ROWS=true\";\n            stmt.execute(ddl);\n            // create table with immutable table property set to false\n            ddl = \"CREATE TABLE  \" + mutableDataTableFullName +\n                    \"  (a_string varchar not null, col1 integer\" +\n                    \"  CONSTRAINT pk PRIMARY KEY (a_string))  IMMUTABLE_ROWS=false\";\n            stmt.execute(ddl);\n            PhoenixConnection phxConn = conn.unwrap(PhoenixConnection.class);\n            PTable immutableTable = phxConn.getTable(new PTableKey(null, immutableDataTableFullName));\n            assertTrue(\"IMMUTABLE_ROWS should be set to true\", immutableTable.isImmutableRows());\n            PTable mutableTable = phxConn.getTable(new PTableKey(null, mutableDataTableFullName));\n            assertFalse(\"IMMUTABLE_ROWS should be set to false\", mutableTable.isImmutableRows());\n        } \n    }\n<fim_suffix>    @Test\n    public void testImmutableKeywordAndProperty() throws Exception {\n        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n        String immutableDataTableFullName = SchemaUtil.getTableName(\"\", generateUniqueName());\n        String mutableDataTableFullName = SchemaUtil.getTableName(\"\", generateUniqueName());\n        try (Connection conn = DriverManager.getConnection(getUrl(), props);) {\n            Statement stmt = conn.createStatement();\n            try {\n                // create immutable table with immutable table property set to true \n                String ddl = \"CREATE IMMUTABLE TABLE  \" + immutableDataTableFullName +\n                        \"  (a_string varchar not null, col1 integer\" +\n                        \"  CONSTRAINT pk PRIMARY KEY (a_string)) IMMUTABLE_ROWS=true\";\n                stmt.execute(ddl);\n                fail();\n            }\n            catch (SQLException e) {\n                assertEquals(SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID.getErrorCode(), e.getErrorCode());\n            }\n            try {\n                // create immutable table with immutable table property set to false\n                String ddl = \"CREATE IMMUTABLE TABLE  \" + mutableDataTableFullName +\n                        \"  (a_string varchar not null, col1 integer\" +\n                        \"  CONSTRAINT pk PRIMARY KEY (a_string))  IMMUTABLE_ROWS=false\";\n                stmt.execute(ddl);\n                fail();\n            }\n            catch (SQLException e) {\n                assertEquals(SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID.getErrorCode(), e.getErrorCode());\n            }\n        } \n    }\n    @Test\n    public void testImmutableTableWithStorageSchemeAndColumnEncodingProps() throws Exception {\n        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n        String immutableDataTableFullName = SchemaUtil.getTableName(\"\", generateUniqueName());\n        try (Connection conn = DriverManager.getConnection(getUrl(), props);) {\n            Statement stmt = conn.createStatement();\n            try {\n                // create immutable table with immutable table property set to true \n                String ddl = \"CREATE IMMUTABLE TABLE  \" + immutableDataTableFullName +\n                        \"  (a_string varchar not null, col1 integer\" +\n                        \"  CONSTRAINT pk PRIMARY KEY (a_string)) COLUMN_ENCODED_BYTES=0, IMMUTABLE_STORAGE_SCHEME=\"\n                        + PTable.ImmutableStorageScheme.SINGLE_CELL_ARRAY_WITH_OFFSETS;\n                stmt.execute(ddl);\n                fail();\n            }\n            catch (SQLException e) {\n                assertEquals(SQLExceptionCode.INVALID_IMMUTABLE_STORAGE_SCHEME_AND_COLUMN_QUALIFIER_BYTES.getErrorCode(), e.getErrorCode());\n            }\n        } \n    }\n    @Test\n    public void testAlterImmutableStorageSchemeProp() throws Exception {\n        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n        String immutableDataTableFullName1 = SchemaUtil.getTableName(\"\", generateUniqueName());\n        String immutableDataTableFullName2 = SchemaUtil.getTableName(\"\", generateUniqueName());\n        try (Connection conn = DriverManager.getConnection(getUrl(), props);) {\n            Statement stmt = conn.createStatement();\n            // create an immutable table with  ONE_CELL_PER_COLUMN storage scheme\n            String ddl = \"CREATE IMMUTABLE TABLE  \" + immutableDataTableFullName1 +\n                    \"  (a_string varchar not null, col1 integer\" +\n                    \"  CONSTRAINT pk PRIMARY KEY (a_string)) COLUMN_ENCODED_BYTES=0, IMMUTABLE_STORAGE_SCHEME=\"\n                    + PTable.ImmutableStorageScheme.ONE_CELL_PER_COLUMN;\n            stmt.execute(ddl);\n            // create an immutable table with  SINGLE_CELL_ARRAY_WITH_OFFSETS storage scheme\n            ddl = \"CREATE IMMUTABLE TABLE  \" + immutableDataTableFullName2 +\n                    \"  (a_string varchar not null, col1 integer\" +\n                    \"  CONSTRAINT pk PRIMARY KEY (a_string)) COLUMN_ENCODED_BYTES=4, IMMUTABLE_STORAGE_SCHEME=\"\n                    + PTable.ImmutableStorageScheme.SINGLE_CELL_ARRAY_WITH_OFFSETS;\n            stmt.execute(ddl);\n            // changing the storage scheme from/to ONCE_CELL_PER_COLUMN should fail\n            try {\n                stmt.execute(\"ALTER TABLE \" + immutableDataTableFullName1 + \" SET IMMUTABLE_STORAGE_SCHEME=\" + PTable.ImmutableStorageScheme.SINGLE_CELL_ARRAY_WITH_OFFSETS);\n                fail();\n            }\n            catch (SQLException e) {\n                assertEquals(SQLExceptionCode.INVALID_IMMUTABLE_STORAGE_SCHEME_CHANGE.getErrorCode(), e.getErrorCode());\n            }\n            try {<fim_middle>// function below has no smell\n"}