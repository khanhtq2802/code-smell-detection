{"text": "<fim_prefix>      return lastComparison;\n    }\n    if (isSetDotFiles()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dotFiles, other.dotFiles);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    scheme(iprot).read(iprot, this);\n  }\n  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n    scheme(oprot).write(oprot, this);\n  }\n  @Override\n  public java.lang.String toString() {\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(\"SetBuckDotFilePathsRequest(\");\n    boolean first = true;\n    if (isSetStampedeId()) {\n      sb.append(\"stampedeId:\");\n      if (this.stampedeId == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.stampedeId);\n      }\n      first = false;\n    }\n    if (isSetDotFiles()) {\n      if (!first) sb.append(\", \");\n      sb.append(\"dotFiles:\");\n      if (this.dotFiles == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.dotFiles);\n      }\n      first = false;\n    }\n    sb.append(\")\");\n    return sb.toString();\n  }\n  public void validate() throws org.apache.thrift.TException {\n    // check for required fields\n    // check for sub-struct validity\n    if (stampedeId != null) {\n      stampedeId.validate();\n    }\n  }\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    try {\n      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {\n    try {\n      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private static class SetBuckDotFilePathsRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n    public SetBuckDotFilePathsRequestStandardScheme getScheme() {\n      return new SetBuckDotFilePathsRequestStandardScheme();\n    }\n  }\n  private static class SetBuckDotFilePathsRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<SetBuckDotFilePathsRequest> {\n    public void read(org.apache.thrift.protocol.TProtocol iprot, SetBuckDotFilePathsRequest struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TField schemeField;\n      iprot.readStructBegin();\n      while (true)\n      {\n        schemeField = iprot.readFieldBegin();\n        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n          break;\n        }\n        switch (schemeField.id) {\n          case 1: // STAMPEDE_ID\n            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n              struct.stampedeId = new StampedeId();\n              struct.stampedeId.read(iprot);\n              struct.setStampedeIdIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 2: // DOT_FILES\n            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {\n              {\n                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();\n                struct.dotFiles = new java.util.ArrayList<PathInfo>(_list104.size);\n                PathInfo _elem105;\n                for (int _i106 = 0; _i106 < _list104.size; ++_i106)\n                {\n                  _elem105 = new PathInfo();\n                  _elem105.read(iprot);\n                  struct.dotFiles.add(_elem105);\n                }\n                iprot.readListEnd();\n              }\n              struct.setDotFilesIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          default:\n            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n        }\n        iprot.readFieldEnd();\n      }\n      iprot.readStructEnd();\n      // check for required fields of primitive type, which can't be checked in the validate method\n      struct.validate();\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot, SetBuckDotFilePathsRequest struct) throws org.apache.thrift.TException {\n      struct.validate();\n      oprot.writeStructBegin(STRUCT_DESC);\n      if (struct.stampedeId != null) {\n        if (struct.isSetStampedeId()) {\n          oprot.writeFieldBegin(STAMPEDE_ID_FIELD_DESC);\n          struct.stampedeId.write(oprot);\n          oprot.writeFieldEnd();\n        }\n      }\n      if (struct.dotFiles != null) {\n        if (struct.isSetDotFiles()) {\n          oprot.writeFieldBegin(DOT_FILES_FIELD_DESC);\n          {\n            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dotFiles.size()));\n            for (PathInfo _iter107 : struct.dotFiles)\n            {\n              _iter107.write(oprot);\n            }\n            oprot.writeListEnd();\n          }\n          oprot.writeFieldEnd();\n        }\n      }\n      oprot.writeFieldStop();\n      oprot.writeStructEnd();\n    }\n  }\n  private static class SetBuckDotFilePathsRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n    public SetBuckDotFilePathsRequestTupleScheme getScheme() {\n      return new SetBuckDotFilePathsRequestTupleScheme();\n    }\n  }\n<fim_suffix>  private static class SetBuckDotFilePathsRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<SetBuckDotFilePathsRequest> {\n    @Override\n    public void write(org.apache.thrift.protocol.TProtocol prot, SetBuckDotFilePathsRequest struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n      java.util.BitSet optionals = new java.util.BitSet();\n      if (struct.isSetStampedeId()) {\n        optionals.set(0);\n      }\n      if (struct.isSetDotFiles()) {\n        optionals.set(1);\n      }\n      oprot.writeBitSet(optionals, 2);\n      if (struct.isSetStampedeId()) {\n        struct.stampedeId.write(oprot);\n      }\n      if (struct.isSetDotFiles()) {\n        {\n          oprot.writeI32(struct.dotFiles.size());\n          for (PathInfo _iter108 : struct.dotFiles)\n          {\n            _iter108.write(oprot);\n          }\n        }\n      }\n    }\n    @Override\n    public void read(org.apache.thrift.protocol.TProtocol prot, SetBuckDotFilePathsRequest struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n      java.util.BitSet incoming = iprot.readBitSet(2);\n      if (incoming.get(0)) {\n        struct.stampedeId = new StampedeId();\n        struct.stampedeId.read(iprot);\n        struct.setStampedeIdIsSet(true);\n      }\n      if (incoming.get(1)) {\n        {\n          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());\n          struct.dotFiles = new java.util.ArrayList<PathInfo>(_list109.size);\n          PathInfo _elem110;\n          for (int _i111 = 0; _i111 < _list109.size; ++_i111)\n          {\n            _elem110 = new PathInfo();\n            _elem110.read(iprot);\n            struct.dotFiles.add(_elem110);\n          }\n        }\n        struct.setDotFilesIsSet(true);\n      }\n    }\n  }<fim_middle>// class below has no smell\n"}