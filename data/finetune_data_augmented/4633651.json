{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.api.common.typeutils.base;\n\nimport org.apache.flink.annotation.Internal;\nimport org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot;\nimport org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;\nimport org.apache.flink.core.memory.DataInputView;\nimport org.apache.flink.core.memory.DataOutputView;\n\nimport java.io.IOException;\n\n/**\n * Type serializer for {@code Byte}.\n */\n<fim_suffix>@Internal\npublic final class ShortSerializer extends TypeSerializerSingleton<Short> {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\t/** Sharable instance of the ShortSerializer. */\n\tpublic static final ShortSerializer INSTANCE = new ShortSerializer();\n\n\tprivate static final Short ZERO = (short) 0;\n\n\t@Override\n\tpublic boolean isImmutableType() {\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic Short createInstance() {\n\t\treturn ZERO;\n\t}\n\n\t@Override\n\tpublic Short copy(Short from) {\n\t\treturn from;\n\t}\n\n\t@Override\n\tpublic Short copy(Short from, Short reuse) {\n\t\treturn from;\n\t}\n\n\t@Override\n\tpublic int getLength() {\n\t\treturn 2;\n\t}\n\n\t@Override\n\tpublic void serialize(Short record, DataOutputView target) throws IOException {\n\t\ttarget.writeShort(record);\n\t}\n\n\t@Override\n\tpublic Short deserialize(DataInputView source) throws IOException {\n\t\treturn source.readShort();\n\t}\n\n\t@Override\n\tpublic Short deserialize(Short reuse, DataInputView source) throws IOException {\n\t\treturn deserialize(source);\n\t}\n\n\t@Override\n\tpublic void copy(DataInputView source, DataOutputView target) throws IOException {\n\t\ttarget.writeShort(source.readShort());\n\t}\n\n\t@Override\n\tpublic TypeSerializerSnapshot<Short> snapshotConfiguration() {\n\t\treturn new ShortSerializerSnapshot();\n\t}\n\n\t// ------------------------------------------------------------------------\n\n\t/**\n\t * Serializer configuration snapshot for compatibility and format evolution.\n\t */\n\t@SuppressWarnings(\"WeakerAccess\")\n\tpublic static final class ShortSerializerSnapshot extends SimpleTypeSerializerSnapshot<Short> {\n\n\t\tpublic ShortSerializerSnapshot() {\n\t\t\tsuper(() -> INSTANCE);\n\t\t}\n\t}\n}<fim_middle>// class below has no smell\n"}