{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.apache.geode.experimental.driver;\n\nimport java.io.IOException;\nimport java.util.Objects;\n\nimport com.google.protobuf.ByteString;\nimport com.google.protobuf.NullValue;\n\nimport org.apache.geode.annotations.Experimental;\nimport org.apache.geode.internal.protocol.protobuf.v1.BasicTypes;\n\n/**\n * Encodes and decodes Java objects to and from Protobuf encoded values.\n *\n * <strong>This code is an experimental prototype and is presented \"as is\" with no warranty,\n * suitability, or fitness of purpose implied.</strong>\n */\n<fim_suffix>@Experimental\nclass ValueEncoder {\n\n  private final ValueSerializer valueSerializer;\n\n  public ValueEncoder(ValueSerializer valueSerializer) {\n    this.valueSerializer = valueSerializer;\n  }\n\n  /**\n   * Encodes a Java object into a Protobuf encoded value.\n   *\n   * @param unencodedValue Java object to encode.\n   * @return Encoded value of the Java object.\n   */\n  BasicTypes.EncodedValue encodeValue(Object unencodedValue) {\n    BasicTypes.EncodedValue.Builder builder = BasicTypes.EncodedValue.newBuilder();\n\n    if (valueSerializer.supportsPrimitives()) {\n      ByteString customBytes = customSerialize(unencodedValue);\n      return builder.setCustomObjectResult(customBytes).build();\n    }\n\n    if (Objects.isNull(unencodedValue)) {\n      builder.setNullResult(NullValue.NULL_VALUE);\n    } else if (Integer.class.equals(unencodedValue.getClass())) {\n      builder.setIntResult((Integer) unencodedValue);\n    } else if (Long.class.equals(unencodedValue.getClass())) {\n      builder.setLongResult((Long) unencodedValue);\n    } else if (Short.class.equals(unencodedValue.getClass())) {\n      builder.setShortResult((Short) unencodedValue);\n    } else if (Byte.class.equals(unencodedValue.getClass())) {\n      builder.setByteResult((Byte) unencodedValue);\n    } else if (Double.class.equals(unencodedValue.getClass())) {\n      builder.setDoubleResult((Double) unencodedValue);\n    } else if (Float.class.equals(unencodedValue.getClass())) {\n      builder.setFloatResult((Float) unencodedValue);\n    } else if (byte[].class.equals(unencodedValue.getClass())) {\n      builder.setBinaryResult(ByteString.copyFrom((byte[]) unencodedValue));\n    } else if (Boolean.class.equals(unencodedValue.getClass())) {\n      builder.setBooleanResult((Boolean) unencodedValue);\n    } else if (String.class.equals(unencodedValue.getClass())) {\n      builder.setStringResult((String) unencodedValue);\n    } else if (JSONWrapper.class.isAssignableFrom(unencodedValue.getClass())) {\n      builder.setJsonObjectResult(((JSONWrapper) unencodedValue).getJSON());\n    } else {\n      ByteString customBytes = customSerialize(unencodedValue);\n      if (customBytes != null) {\n        builder.setCustomObjectResult(customBytes);\n      } else {\n        throw new IllegalStateException(\"We don't know how to handle an object of type \"\n            + unencodedValue.getClass() + \": \" + unencodedValue);\n      }\n    }\n\n    return builder.build();\n  }\n\n  private ByteString customSerialize(Object unencodedValue) {\n    try {\n      ByteString customBytes = valueSerializer.serialize(unencodedValue);\n      return customBytes;\n    } catch (IOException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n\n  /**\n   * Decodes a Protobuf encoded value into a Java object.\n   *\n   * @param encodedValue Encoded value to decode.\n   * @return Decoded Java object.\n   */\n  Object decodeValue(BasicTypes.EncodedValue encodedValue) {\n    switch (encodedValue.getValueCase()) {\n      case BINARYRESULT:\n        return encodedValue.getBinaryResult().toByteArray();\n      case BOOLEANRESULT:\n        return encodedValue.getBooleanResult();\n      case BYTERESULT:\n        return (byte) encodedValue.getByteResult();\n      case DOUBLERESULT:\n        return encodedValue.getDoubleResult();\n      case FLOATRESULT:\n        return encodedValue.getFloatResult();\n      case INTRESULT:\n        return encodedValue.getIntResult();\n      case LONGRESULT:\n        return encodedValue.getLongResult();\n      case SHORTRESULT:\n        return (short) encodedValue.getShortResult();\n      case STRINGRESULT:\n        return encodedValue.getStringResult();\n      case JSONOBJECTRESULT:\n        return JSONWrapper.wrapJSON(encodedValue.getJsonObjectResult());\n      case NULLRESULT:\n        return null;\n      case CUSTOMOBJECTRESULT:\n        try {\n          return valueSerializer.deserialize(encodedValue.getCustomObjectResult());\n        } catch (IOException | ClassNotFoundException e) {\n          throw new IllegalStateException(e);\n        }\n      default:\n        throw new IllegalStateException(\n            \"Can't decode a value of type \" + encodedValue.getValueCase() + \": \" + encodedValue);\n    }\n  }\n\n  /**\n   * Encodes a Java object key and a Java object value into a Protobuf encoded entry.\n   *\n   * @param unencodedKey Java object key to encode.\n   * @param unencodedValue Java object value to encode.\n   * @return Encoded entry of the Java object key and value.\n   */\n  BasicTypes.Entry encodeEntry(Object unencodedKey, Object unencodedValue) {\n    if (unencodedValue == null) {\n      return BasicTypes.Entry.newBuilder().setKey(encodeValue(unencodedKey)).build();\n    }\n    return BasicTypes.Entry.newBuilder().setKey(encodeValue(unencodedKey))\n        .setValue(encodeValue(unencodedValue)).build();\n  }\n}<fim_middle>// class below is blob\n"}