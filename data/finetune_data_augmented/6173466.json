{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.ide.maven.tools;\nimport static java.util.Collections.emptyMap;\nimport static java.util.Objects.requireNonNull;\nimport static org.eclipse.che.commons.xml.NewElement.createElement;\nimport static org.eclipse.che.commons.xml.XMLTreeLocation.after;\nimport static org.eclipse.che.commons.xml.XMLTreeLocation.inTheBegin;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.eclipse.che.commons.xml.Element;\nimport org.eclipse.che.commons.xml.NewElement;\n/**\n * Describes <i>/project/build/plugins/plugin</i>.\n *\n * <p>Supports next data:\n *\n * <ul>\n *   <li>artifactId\n *   <li>groupId\n *   <li>configuration\n * </ul>\n *\n * @author Eugene Voevodin\n */\npublic class Plugin {\n  private String artifactId;\n  private String groupId;\n  private String version;\n  private Map<String, String> configuration;\n  Element pluginElement;\n  public Plugin() {}\n  Plugin(Element element) {\n    pluginElement = element;\n    if (element.hasSingleChild(\"artifactId\")) {\n      artifactId = element.getChildText(\"artifactId\");\n    }\n    if (element.hasSingleChild(\"groupId\")) {\n      groupId = element.getChildText(\"groupId\");\n    }\n    if (element.hasSingleChild(\"version\")) {\n      groupId = element.getChildText(\"version\");\n    }\n    if (element.hasSingleChild(\"configuration\")) {\n      configuration = fetchConfiguration(element.getSingleChild(\"configuration\"));\n    }\n  }\n  /** Returns plugin artifact identifier */\n  public String getArtifactId() {\n    return artifactId;\n  }\n  /** Returns plugin group identifier */\n  public String getGroupId() {\n    return groupId;\n  }\n  /**\n   * Returns plugin configuration. If plugin has nested configuration elements it will not be\n   * fetched.\n   *\n   * <p>Consider following configuration:\n   *\n   * <pre>{@code\n   * <configuration>\n   *     <item1>value1</item1>\n   *     <item2>value2</item2>\n   *     <properties>\n   *         <property1>property</property1>\n   *     </properties>\n   * </configuration>\n   * }</pre>\n   *\n   * <p>Resulting map will contain next data <i>item1=\"value1\"</i>, <i>item2=\"value2\"</i> and\n   * <i>properties=null</i>\n   *\n   * <p><b>Note: update methods should not be used on returned map</b>\n   *\n   * @return plugin configuration or empty map when plugin doesn't have configuration\n   */\n  public Map<String, String> getConfiguration() {\n    if (configuration == null) {\n      return emptyMap();\n    }\n    return new HashMap<>(configuration);\n  }\n  /**\n   * Sets plugin artifact identifier\n   *\n   * @param artifactId new artifact identifier, if new artifact id is {@code null} and current\n   *     plugin element related with xml element then <i>artifactId</i> element will be removed from\n   *     xml as well as from plugin model\n   * @return this plugin instance\n   */\n  public Plugin setArtifactId(String artifactId) {\n    this.artifactId = artifactId;\n    if (!isNew()) {\n      if (artifactId == null) {\n        pluginElement.removeChild(\"artifactId\");\n      } else if (pluginElement.hasSingleChild(\"artifactId\")) {\n        pluginElement.getSingleChild(\"artifactId\").setText(artifactId);\n      } else {\n        pluginElement.insertChild(\n            createElement(\"artifactId\", artifactId), after(\"groupId\").or(inTheBegin()));\n      }\n    }\n    return this;\n  }\n  /** Returns plugin version. */\n  public String getVersion() {\n    return version;\n  }\n  /** Sets plugin version. */\n  public Plugin setVersion(String version) {\n    this.version = version;\n    if (!isNew()) {\n      if (version == null) {\n        pluginElement.removeChild(\"version\");\n      } else if (pluginElement.hasSingleChild(\"version\")) {\n        pluginElement.getSingleChild(\"version\").setText(version);\n      } else {\n        pluginElement.insertChild(\n            createElement(\"version\", version), after(\"artifactId\").or(inTheBegin()));\n      }\n    }\n    return this;\n  }\n  /**\n   * Sets plugin group identifier\n   *\n   * @param groupId new group identifier, if new group id is {@code null} and current plugin element\n   *     related with xml element then <i>groupId</i> element will be removed from xml as well as\n   *     from plugin model\n   * @return this plugin instance\n   */\n  public Plugin setGroupId(String groupId) {\n    this.groupId = groupId;\n    if (!isNew()) {\n      if (groupId == null) {\n        pluginElement.removeChild(\"groupId\");\n      } else if (pluginElement.hasSingleChild(\"groupId\")) {\n        pluginElement.getSingleChild(\"groupId\").setText(groupId);\n      } else {\n        pluginElement.insertChild(createElement(\"groupId\", groupId), inTheBegin());\n      }\n    }\n    return this;\n  }\n  /**\n   * Sets new configuration with new configuration\n   *\n   * @param configuration new plugin configuration, if new configuration is {@code null} or\n   *     <i>empty</i> and plugin element related with xml element then <i>configuration</i> element\n   *     will be removed from xml as well as from plugin model\n   * @return this plugin instance\n   */\n  public Plugin setConfiguration(Map<String, String> configuration) {\n    if (configuration == null || configuration.isEmpty()) {\n      removeConfiguration();\n    } else {\n      setConfiguration0(configuration);\n    }\n    return this;\n  }\n  /**\n   * Sets configuration property value as {@literal <name>value</name>}.\n   *\n   * <p>If element doesn't have configuration element it will be created as well. <b>Note: it should\n   * not be used with nested configuration elements</b>\n   *\n   * @param name property name to set\n   * @param value property value to set\n   * @return this plugin instance\n   * @throws NullPointerException when {@code name} or {@code value} is {@code null}\n   */\n  public Plugin setConfigProperty(String name, String value) {\n    requireNonNull(name, \"Configuration property name should not be null\");\n    requireNonNull(value, \"Configuration property value should not be null\");\n    if (!isNew()) {\n      addConfigPropertyToXML(name, value);\n    }\n    configuration().put(name, value);\n    return this;\n  }\n  /**\n   * Removes configuration property. If configuration has nested element with removal {@code name}\n   * it will be removed with all related children.\n   *\n   * @param name configuration property which indicated element that should be removed\n   * @return this plugin instance\n   * @throws NullPointerException when {@code name} is null\n   */\n  public Plugin removeConfigProperty(String name) {\n    requireNonNull(name, \"Configuration property name should ne null\");\n    if (configuration().remove(name) != null && !isNew()) {\n      removeConfigPropertyFromXML(name);\n    }\n    return this;\n  }\n  /** Returns plugin identifier as <i>groupId:artifactId</i> */\n  public String getId() {\n    return groupId + ':' + artifactId;\n  }\n  @Override\n  public String toString() {\n    return getId();\n  }\n  private void removeConfigPropertyFromXML(String name) {\n    if (configuration.isEmpty()) {\n      pluginElement.removeChild(\"configuration\");\n    } else {\n      pluginElement.getSingleChild(\"configuration\").removeChild(name);\n    }\n  }\n<fim_suffix>  private void addConfigPropertyToXML(String name, String value) {\n    if (configuration().containsKey(name)) {\n      pluginElement.getSingleChild(\"configuration\").getSingleChild(name).setText(value);\n    } else if (configuration.isEmpty()) {\n      pluginElement.appendChild(createElement(\"configuration\", createElement(name, value)));\n    } else {\n      pluginElement.getSingleChild(\"configuration\").appendChild(createElement(name, value));\n    }\n  }\n  private Map<String, String> configuration() {\n    return configuration == null ? configuration = new HashMap<>() : configuration;\n  }\n  private void setConfiguration0(Map<String, String> configuration) {\n    this.configuration = new HashMap<>(configuration);\n    if (isNew()) return;\n    if (pluginElement.hasSingleChild(\"configuration\")) {\n      final Element confElement = pluginElement.getSingleChild(\"configuration\");\n      // remove all configuration properties from element\n      for (Element property : confElement.getChildren()) {\n        property.remove();\n      }\n      // append each new property to \"configuration\" element\n      for (Map.Entry<String, String> property : configuration.entrySet()) {<fim_middle>// function below has no smell\n"}