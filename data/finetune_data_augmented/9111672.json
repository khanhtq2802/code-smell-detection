{"text": "<fim_prefix>\t\t\tif ( markerTypeSet.getNameIndex( name ) < 0 )\n\t\t\t{\n\t\t\t\tMarker m = MarkerImpl.create( MarkerType.getByName( markerTypeSet.getNames( )[0] ), 4 );\n\t\t\t\tm.setVisible( true );\n\t\t\t\tLineAttributes la = AttributeFactory.eINSTANCE.createLineAttributes( );\n\t\t\t\tla.setVisible( true );\n\t\t\t\tm.setOutline( la );\n\t\t\t\tgetMarkers().remove( 0 );\n\t\t\t\tgetMarkers().add( 0, m );\n\t\t\t\tm.eAdapters( ).addAll( series.eAdapters( ) );\n\t\t\t}\n\t\t}\n\t\tcurrentMarkerEditor = new MarkerEditorComposite( cnvMarkers,\n\t\t\t\tgetMarkers( ).get( 0 ),\n\t\t\t\tgetContext( ),\n\t\t\t\tgetDefaultMarker( ) );\n\t\t{\n\t\t\tcurrentMarkerEditor.setBounds( 0,\n\t\t\t\t\t0,\n\t\t\t\t\tMARKER_BLOCK_WIDTH,\n\t\t\t\t\tMARKER_BLOCK_HEIGHT );\n\t\t}\n\t\tif ( markerTypeSet != null )\n\t\t{\n\t\t\tcurrentMarkerEditor.setSupportedMarkerTypes( markerTypeSet );\n\t\t}\n\t\tif ( outlineText != null )\n\t\t{\n\t\t\tcurrentMarkerEditor.setOutlineText( outlineText );\n\t\t}\n\t\tsetEnabledState( );\n\t\ttry\n\t\t{\n\t\t\tidrSWT = ChartEngine.instance( ).getRenderer( \"dv.SWT\" ); //$NON-NLS-1$\n\t\t\tidrSWT.getDisplayServer( );\n\t\t}\n\t\tcatch ( ChartException pex )\n\t\t{\n\t\t\tWizardBase.displayException( pex );\n\t\t}\n\t\tcmpContent.addDisposeListener( new DisposeListener( ) {\n\t\t\tpublic void widgetDisposed( DisposeEvent e )\n\t\t\t{\n\t\t\t\tif ( idrSWT != null )\n\t\t\t\t{\n\t\t\t\t\tidrSWT.dispose( );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\treturn cmpContent;\n\t}\n\tvoid handleEventCanvasMarkers( Event event )\n\t{\n\t\tswitch ( event.type )\n\t\t{\n\t\t\tcase SWT.KeyDown :\n\t\t\t{\n\t\t\t\tif ( event.keyCode == SWT.ARROW_LEFT )\n\t\t\t\t{\n\t\t\t\t\tif ( iSelectedIndex - 1 >= 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tiSelectedIndex--;\n\t\t\t\t\t\tsetEnabledState( );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( event.keyCode == SWT.ARROW_RIGHT )\n\t\t\t\t{\n\t\t\t\t\tif ( iSelectedIndex + 1 < getMarkers( ).size( ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tiSelectedIndex++;\n\t\t\t\t\t\tsetEnabledState( );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( event.keyCode == SWT.ARROW_UP )\n\t\t\t\t{\n\t\t\t\t\tif ( iSelectedIndex - MARKER_ROW_MAX_NUMBER >= 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tiSelectedIndex -= MARKER_ROW_MAX_NUMBER;\n\t\t\t\t\t\tsetEnabledState( );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( event.keyCode == SWT.ARROW_DOWN )\n\t\t\t\t{\n\t\t\t\t\tif ( iSelectedIndex + MARKER_ROW_MAX_NUMBER < getMarkers( ).size( ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tiSelectedIndex += MARKER_ROW_MAX_NUMBER;\n\t\t\t\t\t\tsetEnabledState( );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( event.keyCode == SWT.CR\n\t\t\t\t\t\t|| event.keyCode == SWT.KEYPAD_CR )\n\t\t\t\t{\n\t\t\t\t\tcurrentMarkerEditor.setFocus( );\n\t\t\t\t}\n\t\t\t\telse if ( event.keyCode == SWT.ESC )\n\t\t\t\t{\n\t\t\t\t\tcnvMarkers.getShell( ).close( );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase SWT.Traverse :\n\t\t\t{\n\t\t\t\tswitch ( event.detail )\n\t\t\t\t{\n\t\t\t\t\tcase SWT.TRAVERSE_RETURN :\n\t\t\t\t\tcase SWT.TRAVERSE_TAB_NEXT :\n\t\t\t\t\tcase SWT.TRAVERSE_TAB_PREVIOUS :\n\t\t\t\t\tcase SWT.TRAVERSE_ARROW_PREVIOUS :\n\t\t\t\t\tcase SWT.TRAVERSE_ARROW_NEXT :\n\t\t\t\t\t\tevent.doit = true;\n\t\t\t\t\t\tcnvMarkers.redraw( );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase SWT.Paint :\n\t\t\t\tpaintControl( new PaintEvent( event ) );\n\t\t\t\tbreak;\n\t\t\tcase SWT.MouseDown :\n\t\t\t\tmouseDown( new MouseEvent( event ) );\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tpublic void widgetSelected( SelectionEvent e )\n\t{\n\t\tif ( e.widget.equals( btnAdd ) )\n\t\t{\n\t\t\t// Select the new marker\n\t\t\tiSelectedIndex = getMarkers( ).size( );\n\t\t\t// If the selected is under the bottom, move to new row\n\t\t\tif ( ( iStartRow + MARKER_COLUMN_MAX_NUMBER )\n\t\t\t\t\t* MARKER_ROW_MAX_NUMBER == iSelectedIndex )\n\t\t\t{\n\t\t\t\tiStartRow++;\n\t\t\t}\n\t\t\tgetMarkers( ).add( newMarkerEditor.getMarker( ) );\n\t\t\tnewMarkerEditor.setMarker( createMarker( ) );\n\t\t\tcnvMarkers.redraw( );\n\t\t\tupdateScrollBar( );\n\t\t\tsetEnabledState( );\n\t\t}\n\t\telse if ( e.widget.equals( btnRemove ) )\n\t\t{\n\t\t\t// If the selected is the first of the bottom row, move to the\n\t\t\t// previous\n\t\t\tif ( iStartRow > 0\n\t\t\t\t\t&& ( iStartRow + MARKER_COLUMN_MAX_NUMBER - 1 )\n\t\t\t\t\t\t\t* MARKER_ROW_MAX_NUMBER == iSelectedIndex )\n\t\t\t{\n\t\t\t\tiStartRow--;\n\t\t\t}\n\t\t\t// Return to the previous if it's the last\n\t\t\tif ( this.iSelectedIndex == getMarkers( ).size( ) - 1 )\n\t\t\t{\n\t\t\t\tiSelectedIndex--;\n\t\t\t}\n\t\t\tgetMarkers( ).remove( currentMarkerEditor.getMarker( ) );\n\t\t\tcurrentMarkerEditor.setMarker( getMarkers( ).get( iSelectedIndex ) );\n\t\t\tcnvMarkers.redraw( );\n\t\t\tupdateScrollBar( );\n\t\t\tsetEnabledState( );\n\t\t}\n\t\telse if ( e.widget.equals( btnUp ) )\n\t\t{\n\t\t\tif ( iSelectedIndex > 0 )\n\t\t\t{\n\t\t\t\tiSelectedIndex--;\n\t\t\t\tgetMarkers( ).move( iSelectedIndex,\n\t\t\t\t\t\tcurrentMarkerEditor.getMarker( ) );\n\t\t\t\tcnvMarkers.redraw( );\n\t\t\t\tsetEnabledState( );\n\t\t\t}\n\t\t}\n\t\telse if ( e.widget.equals( btnDown ) )\n\t\t{\n\t\t\tif ( iSelectedIndex < getMarkers( ).size( ) - 1 )\n\t\t\t{\n\t\t\t\tiSelectedIndex++;\n\t\t\t\tgetMarkers( ).move( iSelectedIndex,\n\t\t\t\t\t\tcurrentMarkerEditor.getMarker( ) );\n\t\t\t\tcnvMarkers.redraw( );\n\t\t\t\tsetEnabledState( );\n\t\t\t}\n\t\t}\n\t\telse if ( e.widget.equals( cnvMarkers.getVerticalBar( ) ) )\n\t\t{\n\t\t\tiStartRow = cnvMarkers.getVerticalBar( ).getSelection( );\n\t\t\tcnvMarkers.redraw( );\n\t\t}\n\t}\n\tpublic void widgetDefaultSelected( SelectionEvent e )\n\t{\n\t\t// TODO Auto-generated method stub\n\t}\n<fim_suffix>\tprotected void createButtonGroup( Group grpTop )\n\t{\n\t\tbtnAdd = new Button( grpTop, SWT.NONE );\n\t\t{\n\t\t\tbtnAdd.setText( Messages.getString( \"LineSeriesMarkerSheet.Label.Add\" ) ); //$NON-NLS-1$\n\t\t\tbtnAdd.addSelectionListener( this );\n\t\t}\n\t\tnewMarkerEditor = new MarkerEditorComposite( grpTop,\n\t\t\t\tcreateMarker( ),\n\t\t\t\tgetContext( ),\n\t\t\t\tgetDefaultMarker( ) );\n\t\tif ( markerTypeSet != null )\n\t\t{\n\t\t\tnewMarkerEditor.setSupportedMarkerTypes( markerTypeSet );\n\t\t}\n\t\tif ( outlineText != null )\n\t\t{\n\t\t\tnewMarkerEditor.setOutlineText( outlineText );\n\t\t}\n\t\tbtnRemove = new Button( grpTop, SWT.NONE );\n\t\t{\n\t\t\tbtnRemove.setText( Messages.getString( \"LineSeriesMarkerSheet.Label.Remove\" ) ); //$NON-NLS-1$\n\t\t\tbtnRemove.addSelectionListener( this );\n\t\t}\n\t\tbtnUp = new Button( grpTop, SWT.ARROW | SWT.UP );\n\t\t{\n\t\t\tbtnUp.setToolTipText( Messages.getString( \"PaletteEditorComposite.Lbl.Up\" ) ); //$NON-NLS-1$\n\t\t\tbtnUp.addSelectionListener( this );\n\t\t}\n\t\tbtnDown = new Button( grpTop, SWT.ARROW | SWT.DOWN );\n\t\t{\n\t\t\tbtnDown.setToolTipText( Messages.getString( \"PaletteEditorComposite.Lbl.Down\" ) ); //$NON-NLS-1$\n\t\t\tbtnDown.addSelectionListener( this );\n\t\t}\n\t}<fim_middle>// function below is long method\n"}