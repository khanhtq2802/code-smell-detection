{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.io.compress;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport org.apache.hadoop.conf.Configurable;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.io.compress.lz4.Lz4Compressor;\nimport org.apache.hadoop.io.compress.lz4.Lz4Decompressor;\nimport org.apache.hadoop.fs.CommonConfigurationKeys;\nimport org.apache.hadoop.util.NativeCodeLoader;\n\n/**\n * This class creates lz4 compressors/decompressors.\n */\n<fim_suffix>public class Lz4Codec implements Configurable, CompressionCodec {\n\n  static {\n    NativeCodeLoader.isNativeCodeLoaded();\n  }\n\n  Configuration conf;\n\n  /**\n   * Set the configuration to be used by this object.\n   *\n   * @param conf the configuration object.\n   */\n  @Override\n  public void setConf(Configuration conf) {\n    this.conf = conf;\n  }\n\n  /**\n   * Return the configuration used by this object.\n   *\n   * @return the configuration object used by this objec.\n   */\n  @Override\n  public Configuration getConf() {\n    return conf;\n  }\n\n  /**\n   * Are the native lz4 libraries loaded &amp; initialized?\n   *\n   * @return true if loaded &amp; initialized, otherwise false\n   */\n  public static boolean isNativeCodeLoaded() {\n    return NativeCodeLoader.isNativeCodeLoaded();\n  }\n\n  public static String getLibraryName() {\n    return Lz4Compressor.getLibraryName();\n  }\n\n  /**\n   * Create a {@link CompressionOutputStream} that will write to the given\n   * {@link OutputStream}.\n   *\n   * @param out the location for the final output stream\n   * @return a stream the user can write uncompressed data to have it compressed\n   * @throws IOException\n   */\n  @Override\n  public CompressionOutputStream createOutputStream(OutputStream out)\n      throws IOException {\n    return CompressionCodec.Util.\n        createOutputStreamWithCodecPool(this, conf, out);\n  }\n\n  /**\n   * Create a {@link CompressionOutputStream} that will write to the given\n   * {@link OutputStream} with the given {@link Compressor}.\n   *\n   * @param out        the location for the final output stream\n   * @param compressor compressor to use\n   * @return a stream the user can write uncompressed data to have it compressed\n   * @throws IOException\n   */\n  @Override\n  public CompressionOutputStream createOutputStream(OutputStream out,\n                                                    Compressor compressor)\n      throws IOException {\n    if (!isNativeCodeLoaded()) {\n      throw new RuntimeException(\"native lz4 library not available\");\n    }\n    int bufferSize = conf.getInt(\n        CommonConfigurationKeys.IO_COMPRESSION_CODEC_LZ4_BUFFERSIZE_KEY,\n        CommonConfigurationKeys.IO_COMPRESSION_CODEC_LZ4_BUFFERSIZE_DEFAULT);\n\n    int compressionOverhead = bufferSize/255 + 16;\n\n    return new BlockCompressorStream(out, compressor, bufferSize,\n        compressionOverhead);\n  }\n\n  /**\n   * Get the type of {@link Compressor} needed by this {@link CompressionCodec}.\n   *\n   * @return the type of compressor needed by this codec.\n   */\n  @Override\n  public Class<? extends Compressor> getCompressorType() {\n    if (!isNativeCodeLoaded()) {\n      throw new RuntimeException(\"native lz4 library not available\");\n    }\n\n    return Lz4Compressor.class;\n  }\n\n  /**\n   * Create a new {@link Compressor} for use by this {@link CompressionCodec}.\n   *\n   * @return a new compressor for use by this codec\n   */\n  @Override\n  public Compressor createCompressor() {\n    if (!isNativeCodeLoaded()) {\n      throw new RuntimeException(\"native lz4 library not available\");\n    }\n    int bufferSize = conf.getInt(\n        CommonConfigurationKeys.IO_COMPRESSION_CODEC_LZ4_BUFFERSIZE_KEY,\n        CommonConfigurationKeys.IO_COMPRESSION_CODEC_LZ4_BUFFERSIZE_DEFAULT);\n    boolean useLz4HC = conf.getBoolean(\n        CommonConfigurationKeys.IO_COMPRESSION_CODEC_LZ4_USELZ4HC_KEY,\n        CommonConfigurationKeys.IO_COMPRESSION_CODEC_LZ4_USELZ4HC_DEFAULT);\n    return new Lz4Compressor(bufferSize, useLz4HC);\n  }\n\n  /**\n   * Create a {@link CompressionInputStream} that will read from the given\n   * input stream.\n   *\n   * @param in the stream to read compressed bytes from\n   * @return a stream to read uncompressed bytes from\n   * @throws IOException\n   */\n  @Override\n  public CompressionInputStream createInputStream(InputStream in)\n      throws IOException {\n    return CompressionCodec.Util.\n        createInputStreamWithCodecPool(this, conf, in);\n  }\n\n  /**\n   * Create a {@link CompressionInputStream} that will read from the given\n   * {@link InputStream} with the given {@link Decompressor}.\n   *\n   * @param in           the stream to read compressed bytes from\n   * @param decompressor decompressor to use\n   * @return a stream to read uncompressed bytes from\n   * @throws IOException\n   */\n  @Override\n  public CompressionInputStream createInputStream(InputStream in,\n                                                  Decompressor decompressor)\n      throws IOException {\n    if (!isNativeCodeLoaded()) {\n      throw new RuntimeException(\"native lz4 library not available\");\n    }\n\n    return new BlockDecompressorStream(in, decompressor, conf.getInt(\n        CommonConfigurationKeys.IO_COMPRESSION_CODEC_LZ4_BUFFERSIZE_KEY,\n        CommonConfigurationKeys.IO_COMPRESSION_CODEC_LZ4_BUFFERSIZE_DEFAULT));\n  }\n\n  /**\n   * Get the type of {@link Decompressor} needed by this {@link CompressionCodec}.\n   *\n   * @return the type of decompressor needed by this codec.\n   */\n  @Override\n  public Class<? extends Decompressor> getDecompressorType() {\n    if (!isNativeCodeLoaded()) {\n      throw new RuntimeException(\"native lz4 library not available\");\n    }\n\n    return Lz4Decompressor.class;\n  }\n\n  /**\n   * Create a new {@link Decompressor} for use by this {@link CompressionCodec}.\n   *\n   * @return a new decompressor for use by this codec\n   */\n  @Override\n  public Decompressor createDecompressor() {\n    if (!isNativeCodeLoaded()) {\n      throw new RuntimeException(\"native lz4 library not available\");\n    }\n    int bufferSize = conf.getInt(\n        CommonConfigurationKeys.IO_COMPRESSION_CODEC_LZ4_BUFFERSIZE_KEY,\n        CommonConfigurationKeys.IO_COMPRESSION_CODEC_LZ4_BUFFERSIZE_DEFAULT);\n    return new Lz4Decompressor(bufferSize);\n  }\n\n  /**\n   * Get the default filename extension for this kind of compression.\n   *\n   * @return <code>.lz4</code>.\n   */\n  @Override\n  public String getDefaultExtension() {\n    return \".lz4\";\n  }\n}<fim_middle>// class below has no smell\n"}