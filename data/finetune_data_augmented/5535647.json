{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.samza.table.remote;\n\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport java.util.stream.Collectors;\n\nimport org.apache.samza.SamzaException;\nimport org.apache.samza.annotation.InterfaceStability;\nimport org.apache.samza.operators.functions.ClosableFunction;\nimport org.apache.samza.operators.functions.InitableFunction;\n\nimport com.google.common.collect.Iterables;\n\n\n/**\n * A function object to be used with a remote readable table implementation. It encapsulates the functionality\n * of reading table record(s) for a provided set of key(s).\n *\n * <p> Instances of {@link TableReadFunction} are meant to be serializable. ie. any non-serializable state\n * (eg: network sockets) should be marked as transient and recreated inside readObject().\n *\n * <p> Implementations are expected to be thread-safe.\n * @param <K> the type of the key in this table\n * @param <V> the type of the value in this table\n */\n@InterfaceStability.Unstable\npublic interface TableReadFunction<K, V> extends TablePart, InitableFunction, ClosableFunction, Serializable {\n  /**\n   * Fetch single table record for a specified {@code key}. This method must be thread-safe.\n   * The default implementation calls getAsync and blocks on the completion afterwards.\n   * @param key key for the table record\n   * @return table record for the specified {@code key}\n   */\n<fim_suffix>  default V get(K key) {\n    try {\n      return getAsync(key).get();\n    } catch (InterruptedException | ExecutionException e) {\n      throw new SamzaException(\"GET failed for \" + key, e);\n    }\n  }\n\n  /**\n   * Asynchronously fetch single table record for a specified {@code key}. This method must be thread-safe.\n   * @param key key for the table record\n   * @return CompletableFuture for the get request\n   */\n  CompletableFuture<V> getAsync(K key);\n\n  /**\n   * Fetch the table {@code records} for specified {@code keys}. This method must be thread-safe.\n   * The default implementation calls getAllAsync and blocks on the completion afterwards.\n   * @param keys keys for the table records\n   * @return all records for the specified keys.\n   */\n  default Map<K, V> getAll(Collection<K> keys) {\n    try {\n      return getAllAsync(keys).get();\n    } catch (InterruptedException | ExecutionException e) {\n      throw new SamzaException(\"GET_ALL failed for \" + keys, e);\n    }\n  }\n\n  /**\n   * Asynchronously fetch the table {@code records} for specified {@code keys}. This method must be thread-safe.\n   * The default implementation calls getAsync for each key and return a combined future.\n   * @param keys keys for the table records\n   * @return CompletableFuture for the get request\n   */\n  default CompletableFuture<Map<K, V>> getAllAsync(Collection<K> keys) {\n    Map<K, CompletableFuture<V>> getFutures =  keys.stream().collect(\n        Collectors.toMap(k -> k, k -> getAsync(k)));\n\n    return CompletableFuture.allOf(\n        Iterables.toArray(getFutures.values(), CompletableFuture.class))\n        .thenApply(future ->\n          getFutures.entrySet()\n            .stream()\n            .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue().join())));\n  }\n\n  /**\n   * Determine whether the current operation can be retried with the last thrown exception.\n   * @param exception exception thrown by a table operation\n   * @return whether the operation can be retried\n   */\n  boolean isRetriable(Throwable exception);\n\n  // optionally implement readObject() to initialize transient states\n}<fim_middle>// function below has no smell\n"}