{"text": "<fim_prefix>/*\n * Copyright 2014-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.data.mongodb.core.script;\n\nimport org.springframework.data.annotation.Id;\nimport org.springframework.util.Assert;\n\n/**\n * An {@link ExecutableMongoScript} assigned to a name that allows calling the function by its {@literal name} once it\n * has been saved to the {@link com.mongodb.DB} instance.\n *\n * @author Christoph Strobl\n * @author Oliver Gierke\n * @since 1.7\n */\npublic class NamedMongoScript {\n\n\tprivate final @Id String name;\n\tprivate final ExecutableMongoScript script;\n\n\t/**\n\t * Creates new {@link NamedMongoScript} that can be saved to the {@link com.mongodb.DB} instance.\n\t *\n\t * @param name must not be {@literal null} or empty.\n\t * @param rawScript the {@link String} representation of the {@literal JavaScript} function. Must not be\n\t *          {@literal null} or empty.\n\t */\n<fim_suffix>\tpublic NamedMongoScript(String name, String rawScript) {\n\t\tthis(name, new ExecutableMongoScript(rawScript));\n\t}\n\n\t/**\n\t * Creates new {@link NamedMongoScript}.\n\t *\n\t * @param name must not be {@literal null} or empty.\n\t * @param script must not be {@literal null}.\n\t */\n\tpublic NamedMongoScript(String name, ExecutableMongoScript script) {\n\n\t\tAssert.hasText(name, \"Name must not be null or empty!\");\n\t\tAssert.notNull(script, \"ExecutableMongoScript must not be null!\");\n\n\t\tthis.name = name;\n\t\tthis.script = script;\n\t}\n\n\t/**\n\t * Returns the actual script code.\n\t *\n\t * @return will never be {@literal null}.\n\t */\n\tpublic String getCode() {\n\t\treturn script.getCode();\n\t}\n\n\t/**\n\t * Returns the underlying {@link ExecutableMongoScript}.\n\t *\n\t * @return will never be {@literal null}.\n\t */\n\tpublic ExecutableMongoScript getScript() {\n\t\treturn script;\n\t}\n\n\t/**\n\t * Returns the name of the script.\n\t *\n\t * @return will never be {@literal null} or empty.\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n}<fim_middle>// function below has no smell\n"}