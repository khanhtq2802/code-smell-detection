{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.apache.geode.modules.gatewaydelta;\n\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\nimport java.util.Arrays;\n\nimport org.apache.geode.DataSerializer;\nimport org.apache.geode.cache.Cache;\nimport org.apache.geode.cache.Region;\nimport org.apache.geode.internal.cache.CachedDeserializable;\nimport org.apache.geode.internal.cache.CachedDeserializableFactory;\nimport org.apache.geode.internal.cache.InternalCache;\n\n<fim_suffix>@SuppressWarnings(\"serial\")\npublic class GatewayDeltaCreateEvent extends AbstractGatewayDeltaEvent {\n\n  private byte[] gatewayDelta;\n\n  public GatewayDeltaCreateEvent() {}\n\n  public GatewayDeltaCreateEvent(String regionName, String key, byte[] gatewayDelta) {\n    super(regionName, key);\n    this.gatewayDelta = gatewayDelta;\n  }\n\n  public byte[] getGatewayDelta() {\n    return this.gatewayDelta;\n  }\n\n  @Override\n  public void apply(Cache cache) {\n    Region<String, CachedDeserializable> region = getRegion(cache);\n    region.put(this.key,\n        CachedDeserializableFactory.create(this.gatewayDelta, (InternalCache) cache), true);\n    if (cache.getLogger().fineEnabled()) {\n      StringBuilder builder = new StringBuilder();\n      builder.append(\"Applied \").append(this);\n      cache.getLogger().fine(builder.toString());\n    }\n  }\n\n  @Override\n  public void fromData(DataInput in) throws IOException, ClassNotFoundException {\n    super.fromData(in);\n    this.gatewayDelta = DataSerializer.readByteArray(in);\n  }\n\n  @Override\n  public void toData(DataOutput out) throws IOException {\n    super.toData(out);\n    DataSerializer.writeByteArray(this.gatewayDelta, out);\n  }\n\n  public String toString() {\n    return new StringBuilder().append(\"GatewayDeltaCreateEvent[\").append(\"regionName=\")\n        .append(this.regionName).append(\"; key=\").append(this.key).append(\"; gatewayDelta=\")\n        .append(Arrays.toString(this.gatewayDelta)).append(\"]\").toString();\n  }\n}<fim_middle>// class below has no smell\n"}