{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage examples.customLevel;\n\nimport org.apache.log4j.Level;\n\n\n/**\n   This class introduces a new level level called TRACE. TRACE has\n   lower level than DEBUG.\n\n */\n<fim_suffix>public class XLevel extends Level {\n  private static final long serialVersionUID = 2626753561969426769L;\n\n  static public final int  TRACE_INT   = Level.DEBUG_INT - 1;\n  static public final int  LETHAL_INT  = Level.FATAL_INT + 1;\n\n\n  private static String TRACE_STR  = \"TRACE\";\n  private static String LETHAL_STR  = \"LETHAL\";\n\n\n  public static final XLevel TRACE = new XLevel(TRACE_INT, TRACE_STR, 7);\n  public static final XLevel LETHAL = new XLevel(LETHAL_INT, LETHAL_STR, \n\t\t\t\t\t\t       0);\n\n\n  protected\n  XLevel(int level, String strLevel, int syslogEquiv) {\n    super(level, strLevel, syslogEquiv);\n  }\n\n  /**\n     Convert the string passed as argument to a level. If the\n     conversion fails, then this method returns {@link #TRACE}. \n  */\n  public\n  static\n  Level toLevel(String sArg) {\n    return (Level) toLevel(sArg, XLevel.TRACE);\n  }\n\n\n  public\n  static\n  Level toLevel(String sArg, Level defaultValue) {\n\n    if(sArg == null) {\n      return defaultValue;\n    }\n    String stringVal = sArg.toUpperCase();\n    \n    if(stringVal.equals(TRACE_STR)) {\n      return XLevel.TRACE;\n    } else if(stringVal.equals(LETHAL_STR)) {\n      return XLevel.LETHAL;\n    }\n      \n    return Level.toLevel(sArg, (Level) defaultValue);    \n  }\n\n\n  public\n  static\n  Level toLevel(int i) throws  IllegalArgumentException {\n    switch(i) {\n    case TRACE_INT: return XLevel.TRACE;\n    case LETHAL_INT: return XLevel.LETHAL;\n    }\n    return Level.toLevel(i);\n  }\n\n}\n  <fim_middle>// class below has no smell\n"}