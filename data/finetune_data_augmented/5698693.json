{"text": "<fim_prefix>/*\n * $Id$\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.struts2.showcase.hangman;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\npublic class PropertiesVocabSource implements VocabSource {\n\n\tprivate Properties prop;\n\tprivate List<Vocab> vocabs;\n\n\tpublic PropertiesVocabSource() {\n\t}\n\n<fim_suffix>\tpublic PropertiesVocabSource(Properties prop) {\n\t\tassert (prop != null);\n\t\tthis.prop = prop;\n\t\tvocabs = readVocab(prop);\n\t}\n\n\tpublic void setVocabProperties(Properties prop) {\n\t\tassert (prop != null);\n\t\tthis.prop = prop;\n\t\tvocabs = readVocab(prop);\n\t}\n\n\tpublic Vocab getRandomVocab() {\n\t\tif (vocabs == null) {\n\t\t\tthrow new HangmanException(HangmanException.Type.valueOf(\"NO_VOCAB_SOURCE\"), \"No vocab source\");\n\t\t}\n\t\tif (vocabs.size() <= 0) {\n\t\t\tthrow new HangmanException(HangmanException.Type.valueOf(\"NO_VOCAB\"), \"No vocab\");\n\t\t}\n\t\tlong vocabIndex = Math.round((Math.random() * (double) prop.size()));\n\t\tvocabIndex = vocabIndex == vocabs.size() ? vocabs.size() - 1 : vocabIndex;\n\t\treturn vocabs.get((int) vocabIndex);\n\t}\n\n\tprotected List<Vocab> readVocab(Properties prop) {\n\t\tList<Vocab> vocabList = new ArrayList<Vocab>();\n\n\t\tfor (Map.Entry e : prop.entrySet()) {\n\t\t\tString vocab = (String) e.getKey();\n\t\t\tString hint = (String) e.getValue();\n\n\t\t\tvocabList.add(new Vocab(vocab, hint));\n\t\t}\n\t\treturn vocabList;\n\t}\n}<fim_middle>// function below has no smell\n"}