{"text": "<fim_prefix>/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.aries.subsystem.util.felix;\n\nimport static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;\nimport static org.apache.aries.application.utils.AppConstants.LOG_EXIT;\n\nimport org.apache.aries.subsystem.obr.internal.NamespaceTranslator;\nimport org.apache.aries.subsystem.obr.internal.ResourceHelper;\nimport org.apache.felix.bundlerepository.Capability;\nimport org.apache.felix.bundlerepository.Requirement;\nimport org.osgi.framework.Constants;\nimport org.osgi.resource.Namespace;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n<fim_suffix>public class OsgiRequirementAdapter implements Requirement {\n\tprivate static final Logger logger = LoggerFactory.getLogger(OsgiRequirementAdapter.class);\n\t\n\tprivate final org.osgi.resource.Requirement requirement;\n\t\n\tpublic OsgiRequirementAdapter(org.osgi.resource.Requirement requirement) {\n\t\tif (requirement == null)\n\t\t\tthrow new NullPointerException(\"Missing required parameter: requirement\");\n\t\tthis.requirement = requirement;\n\t}\n\n\tpublic String getComment() {\n\t\treturn null;\n\t}\n\n\tpublic String getFilter() {\n\t\treturn requirement.getDirectives().get(Constants.FILTER_DIRECTIVE);\n\t}\n\n\tpublic String getName() {\n\t\treturn NamespaceTranslator.translate(requirement.getNamespace());\n\t}\n\n\tpublic boolean isExtend() {\n\t\treturn false;\n\t}\n\n\tpublic boolean isMultiple() {\n\t\tString multiple = requirement.getDirectives().get(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE);\n\t\treturn Namespace.CARDINALITY_MULTIPLE.equals(multiple);\n\t}\n\n\tpublic boolean isOptional() {\n\t\tString resolution = requirement.getDirectives().get(Constants.RESOLUTION_DIRECTIVE);\n\t\treturn Constants.RESOLUTION_OPTIONAL.equals(resolution);\n\t}\n\n\tpublic boolean isSatisfied(Capability capability) {\n\t\tlogger.debug(LOG_ENTRY, \"isSatisfied\", capability);\n\t\tboolean result = ResourceHelper.matches(requirement, new FelixCapabilityAdapter(capability, null));\n\t\tlogger.debug(LOG_EXIT, \"isSatisfied\", result);\n\t\treturn result;\n\t}\n\n}<fim_middle>// class below has no smell\n"}