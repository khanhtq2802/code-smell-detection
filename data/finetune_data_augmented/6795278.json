{"text": "<fim_prefix>/*\n *\n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1/GPL 2.0\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is Rhino code, released\n * May 6, 1999.\n *\n * The Initial Developer of the Original Code is\n * Netscape Communications Corporation.\n * Portions created by the Initial Developer are Copyright (C) 1997-1999\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):\n *   Bob Jervis\n *   Google Inc.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n * case the provisions of the GPL are applicable instead of those above. If\n * you wish to allow use of your version of this file only under the terms of\n * the GPL and not to allow others to use your version of this file under the\n * MPL, indicate your decision by deleting the provisions above and replacing\n * them with the notice and other provisions required by the GPL. If you do\n * not delete the provisions above, a recipient may use your version of this\n * file under either the MPL or the GPL.\n *\n * ***** END LICENSE BLOCK ***** */\n\npackage com.google.javascript.rhino.jstype;\n\nimport static com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;\n\nimport com.google.javascript.rhino.ErrorReporter;\n\n/**\n * All type, representing all values.\n */\npublic final class AllType extends JSType {\n  private static final long serialVersionUID = 1L;\n\n  AllType(JSTypeRegistry registry) {\n    super(registry);\n  }\n\n  @Override\n  public boolean isAllType() {\n    return true;\n  }\n\n  @Override\n  public boolean matchesStringContext() {\n    // Be lenient.\n    return true;\n  }\n\n  @Override\n  public boolean matchesObjectContext() {\n    // Be lenient.\n    return true;\n  }\n\n  @Override\n  public TernaryValue testForEquality(JSType that) {\n    return UNKNOWN;\n  }\n\n  @Override\n  StringBuilder appendTo(StringBuilder sb, boolean forAnnotations) {\n    return sb.append(\"*\");\n  }\n\n  @Override\n  public String getDisplayName() {\n    return \"<Any Type>\";\n  }\n\n  @Override\n  public boolean hasDisplayName() {\n    return true;\n  }\n\n  @Override\n  public <T> T visit(Visitor<T> visitor) {\n    return visitor.caseAllType();\n  }\n\n  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n    return visitor.caseAllType(that);\n  }\n\n  @Override\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    return BooleanLiteralSet.BOTH;\n  }\n\n  @Override\n  JSType resolveInternal(ErrorReporter reporter) {\n    return this;\n  }\n\n<fim_suffix>  @Override\n  int recursionUnsafeHashCode() {\n    return System.identityHashCode(this);\n  }\n\n  @Override\n  public boolean isNullable() {\n    return true;\n  }\n\n  @Override\n  public boolean isVoidable() {\n    return true;\n  }\n}<fim_middle>// function below has no smell\n"}