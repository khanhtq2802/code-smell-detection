{"text": "<fim_prefix>/*\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\npackage org.apache.batik.dom.events;\n\nimport org.w3c.dom.views.AbstractView;\nimport org.w3c.dom.smil.TimeEvent;\n\n/**\n * An event class for SMIL timing events.\n *\n * @author <a href=\"mailto:cam%40mcc%2eid%2eau\">Cameron McCormack</a>\n * @version $Id$\n */\npublic class DOMTimeEvent extends AbstractEvent implements TimeEvent {\n\n    /**\n     * The view from which the event was generated.\n     */\n    protected AbstractView view;\n\n    /**\n     * For repeat events this is the repeat iteration.  Unused for the\n     * other time events.\n     */\n    protected int detail;\n\n    /**\n     * Returns the view from which the event was generated.\n     */\n<fim_suffix>    public AbstractView getView() {\n        return view;\n    }\n\n    /**\n     * Returns the repeat iteration if this is a repeat event.\n     */\n    public int getDetail() {\n        return detail;\n    }\n\n    /**\n     * Initializes the values of the TimeEvent object.\n     */\n    public void initTimeEvent(String typeArg,\n                              AbstractView viewArg,\n                              int detailArg) {\n        initEvent(typeArg, false, false);\n        this.view = viewArg;\n        this.detail = detailArg;\n    }\n\n    /**\n     * Initializes the values of the TimeEvent object.\n     */\n    public void initTimeEventNS(String namespaceURIArg,\n                                String typeArg,\n                                AbstractView viewArg,\n                                int detailArg) {\n        initEventNS(namespaceURIArg, typeArg, false, false);\n        this.view = viewArg;\n        this.detail = detailArg;\n    }\n\n    /**\n     * Sets the timestamp of this time event.  This is required for\n     * synchronization of time events in the SMIL timing model.\n     */\n    public void setTimestamp(long timeStamp) {\n        this.timeStamp = timeStamp;\n    }\n}<fim_middle>// function below has no smell\n"}