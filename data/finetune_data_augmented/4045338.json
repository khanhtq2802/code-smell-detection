{"text": "<fim_prefix>import org.apache.asterix.external.api.IDataSourceAdapter;\nimport org.apache.asterix.external.dataset.adapter.AdapterIdentifier;\nimport org.apache.asterix.external.indexing.ExternalFile;\nimport org.apache.asterix.metadata.IDatasetDetails;\nimport org.apache.asterix.metadata.MetadataManager;\nimport org.apache.asterix.metadata.MetadataNode;\nimport org.apache.asterix.metadata.MetadataTransactionContext;\nimport org.apache.asterix.metadata.api.IMetadataIndex;\nimport org.apache.asterix.metadata.entities.BuiltinTypeMap;\nimport org.apache.asterix.metadata.entities.CompactionPolicy;\nimport org.apache.asterix.metadata.entities.Dataset;\nimport org.apache.asterix.metadata.entities.DatasourceAdapter;\nimport org.apache.asterix.metadata.entities.Datatype;\nimport org.apache.asterix.metadata.entities.Dataverse;\nimport org.apache.asterix.metadata.entities.Index;\nimport org.apache.asterix.metadata.entities.InternalDatasetDetails;\nimport org.apache.asterix.metadata.entities.InternalDatasetDetails.FileStructure;\nimport org.apache.asterix.metadata.entities.InternalDatasetDetails.PartitioningStrategy;\nimport org.apache.asterix.metadata.entities.Node;\nimport org.apache.asterix.metadata.entities.NodeGroup;\nimport org.apache.asterix.metadata.feeds.BuiltinFeedPolicies;\nimport org.apache.asterix.metadata.utils.MetadataConstants;\nimport org.apache.asterix.metadata.utils.MetadataUtil;\nimport org.apache.asterix.om.types.IAType;\nimport org.apache.asterix.runtime.formats.NonTaggedDataFormat;\nimport org.apache.asterix.transaction.management.opcallbacks.PrimaryIndexOperationTrackerFactory;\nimport org.apache.asterix.transaction.management.opcallbacks.SecondaryIndexOperationTrackerFactory;\nimport org.apache.asterix.transaction.management.resource.DatasetLocalResourceFactory;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.api.application.INCServiceContext;\nimport org.apache.hyracks.api.dataflow.value.IBinaryComparatorFactory;\nimport org.apache.hyracks.api.dataflow.value.ITypeTraits;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.api.io.FileReference;\nimport org.apache.hyracks.api.io.IIOManager;\nimport org.apache.hyracks.storage.am.common.api.IIndexBuilder;\nimport org.apache.hyracks.storage.am.common.build.IndexBuilder;\nimport org.apache.hyracks.storage.am.common.dataflow.IndexDataflowHelper;\nimport org.apache.hyracks.storage.am.lsm.btree.dataflow.LSMBTreeLocalResourceFactory;\nimport org.apache.hyracks.storage.am.lsm.common.api.ILSMIOOperationCallbackFactory;\nimport org.apache.hyracks.storage.am.lsm.common.api.ILSMMergePolicyFactory;\nimport org.apache.hyracks.storage.am.lsm.common.api.ILSMOperationTrackerFactory;\nimport org.apache.hyracks.storage.am.lsm.common.impls.ConstantMergePolicyFactory;\nimport org.apache.hyracks.storage.am.lsm.common.impls.NoMergePolicyFactory;\nimport org.apache.hyracks.storage.am.lsm.common.impls.PrefixMergePolicyFactory;\nimport org.apache.hyracks.storage.common.ILocalResourceRepository;\nimport org.apache.hyracks.storage.common.LocalResource;\nimport org.apache.hyracks.storage.common.compression.NoOpCompressorDecompressorFactory;\nimport org.apache.logging.log4j.Level;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n/**\n * Initializes the remote metadata storage facilities (\"universe\") using a\n * MetadataManager that is assumed to be co-located in the same JVM. The\n * metadata universe can be bootstrapped from an existing set of metadata files,\n * or it can be started from scratch, creating all the necessary persistent\n * state. The startUniverse() method is intended to be called as part of\n * application deployment (i.e., inside an NC bootstrap), and similarly\n * stopUniverse() should be called upon application undeployment.\n */\npublic class MetadataBootstrap {\n    public static final boolean IS_DEBUG_MODE = false;\n    private static final Logger LOGGER = LogManager.getLogger();\n    private static INcApplicationContext appContext;\n    private static ILocalResourceRepository localResourceRepository;\n    private static IIOManager ioManager;\n    private static String metadataNodeName;\n    private static List<String> nodeNames;\n    private static boolean isNewUniverse;\n    private static final IMetadataIndex[] PRIMARY_INDEXES =\n            new IMetadataIndex[] { MetadataPrimaryIndexes.DATAVERSE_DATASET, MetadataPrimaryIndexes.DATASET_DATASET,\n                    MetadataPrimaryIndexes.DATATYPE_DATASET, MetadataPrimaryIndexes.INDEX_DATASET,\n                    MetadataPrimaryIndexes.NODE_DATASET, MetadataPrimaryIndexes.NODEGROUP_DATASET,\n                    MetadataPrimaryIndexes.FUNCTION_DATASET, MetadataPrimaryIndexes.DATASOURCE_ADAPTER_DATASET,\n                    MetadataPrimaryIndexes.FEED_DATASET, MetadataPrimaryIndexes.FEED_POLICY_DATASET,\n                    MetadataPrimaryIndexes.LIBRARY_DATASET, MetadataPrimaryIndexes.COMPACTION_POLICY_DATASET,\n                    MetadataPrimaryIndexes.EXTERNAL_FILE_DATASET, MetadataPrimaryIndexes.FEED_CONNECTION_DATASET };\n    private MetadataBootstrap() {\n    }\n    /**\n     * bootstrap metadata\n     *\n     * @param ncServiceContext\n     * @param isNewUniverse\n     * @throws ACIDException\n     * @throws RemoteException\n     * @throws AlgebricksException\n     * @throws Exception\n     */\n    public static void startUniverse(INCServiceContext ncServiceContext, boolean isNewUniverse)\n            throws RemoteException, ACIDException, AlgebricksException {\n        MetadataBootstrap.setNewUniverse(isNewUniverse);\n        appContext = (INcApplicationContext) ncServiceContext.getApplicationContext();\n        MetadataProperties metadataProperties = appContext.getMetadataProperties();\n        metadataNodeName = metadataProperties.getMetadataNodeName();\n        nodeNames = metadataProperties.getNodeNames();\n        localResourceRepository = appContext.getLocalResourceRepository();\n        ioManager = ncServiceContext.getIoManager();\n        MetadataTransactionContext mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n        try {\n            for (int i = 0; i < PRIMARY_INDEXES.length; i++) {\n                enlistMetadataDataset(ncServiceContext, PRIMARY_INDEXES[i]);\n            }\n            if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\n                        \"Finished enlistment of metadata B-trees in \" + (isNewUniverse ? \"new\" : \"old\") + \" universe\");\n            }\n            if (isNewUniverse) {\n                insertInitialDataverses(mdTxnCtx);\n                insertMetadataDatasets(mdTxnCtx, PRIMARY_INDEXES);\n                insertMetadataDatatypes(mdTxnCtx);\n                insertNodes(mdTxnCtx);\n                insertInitialGroups(mdTxnCtx);\n                insertInitialAdapters(mdTxnCtx);\n                BuiltinFeedPolicies.insertInitialFeedPolicies(mdTxnCtx);\n                insertInitialCompactionPolicies(mdTxnCtx);\n                if (LOGGER.isInfoEnabled()) {\n                    LOGGER.info(\"Finished creating metadata B-trees.\");\n                }\n            }\n            // #. initialize datasetIdFactory\n            MetadataManager.INSTANCE.initializeDatasetIdFactory(mdTxnCtx);\n            MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n        } catch (Exception e) {\n            try {\n                if (IS_DEBUG_MODE) {\n                    LOGGER.log(Level.ERROR, \"Failure during metadata bootstrap\", e);\n                }\n                MetadataManager.INSTANCE.abortTransaction(mdTxnCtx);\n            } catch (Exception e2) {\n                e.addSuppressed(e2);\n                // TODO change the exception type to AbortFailureException\n                throw new MetadataException(e);\n            }\n            throw new MetadataException(e);\n        }\n    }\n<fim_suffix>    private static void insertInitialDataverses(MetadataTransactionContext mdTxnCtx) throws AlgebricksException {\n        String dataFormat = NonTaggedDataFormat.NON_TAGGED_DATA_FORMAT;\n        MetadataManager.INSTANCE.addDataverse(mdTxnCtx,\n                new Dataverse(MetadataConstants.METADATA_DATAVERSE_NAME, dataFormat, MetadataUtil.PENDING_NO_OP));\n        MetadataManager.INSTANCE.addDataverse(mdTxnCtx, MetadataBuiltinEntities.DEFAULT_DATAVERSE);\n    }<fim_middle>// function below has no smell\n"}