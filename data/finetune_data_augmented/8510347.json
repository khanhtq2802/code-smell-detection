{"text": "<fim_prefix>//\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n//\n\npackage com.cloud.hypervisor.kvm.resource.wrapper;\n\nimport org.apache.log4j.Logger;\n\nimport com.cloud.agent.api.Answer;\nimport com.cloud.agent.api.storage.CreateAnswer;\nimport com.cloud.agent.api.storage.CreateCommand;\nimport com.cloud.agent.api.to.StorageFilerTO;\nimport com.cloud.agent.api.to.VolumeTO;\nimport com.cloud.hypervisor.kvm.resource.LibvirtComputingResource;\nimport com.cloud.hypervisor.kvm.storage.KVMPhysicalDisk;\nimport com.cloud.hypervisor.kvm.storage.KVMStoragePool;\nimport com.cloud.hypervisor.kvm.storage.KVMStoragePoolManager;\nimport com.cloud.resource.CommandWrapper;\nimport com.cloud.resource.ResourceWrapper;\nimport com.cloud.storage.Storage.StoragePoolType;\nimport com.cloud.utils.exception.CloudRuntimeException;\nimport com.cloud.vm.DiskProfile;\n\n<fim_suffix>@ResourceWrapper(handles =  CreateCommand.class)\npublic final class LibvirtCreateCommandWrapper extends CommandWrapper<CreateCommand, Answer, LibvirtComputingResource> {\n\n    private static final Logger s_logger = Logger.getLogger(LibvirtCreateCommandWrapper.class);\n\n    @Override\n    public Answer execute(final CreateCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final StorageFilerTO pool = command.getPool();\n        final DiskProfile dskch = command.getDiskCharacteristics();\n        KVMPhysicalDisk baseVol = null;\n        KVMStoragePool primaryPool = null;\n        KVMPhysicalDisk vol = null;\n        long disksize;\n        try {\n            final KVMStoragePoolManager storagePoolMgr = libvirtComputingResource.getStoragePoolMgr();\n            primaryPool = storagePoolMgr.getStoragePool(pool.getType(), pool.getUuid());\n            disksize = dskch.getSize();\n\n            if (command.getTemplateUrl() != null) {\n                if (primaryPool.getType() == StoragePoolType.CLVM) {\n                    vol = libvirtComputingResource.templateToPrimaryDownload(command.getTemplateUrl(), primaryPool, dskch.getPath());\n                } else {\n                    baseVol = primaryPool.getPhysicalDisk(command.getTemplateUrl());\n                    vol = storagePoolMgr.createDiskFromTemplate(baseVol, dskch.getPath(), dskch.getProvisioningType(), primaryPool, baseVol.getSize(), 0);\n                }\n                if (vol == null) {\n                    return new Answer(command, false, \" Can't create storage volume on storage pool\");\n                }\n            } else {\n                vol = primaryPool.createPhysicalDisk(dskch.getPath(), dskch.getProvisioningType(), dskch.getSize());\n                if (vol == null) {\n                    return new Answer(command, false, \" Can't create Physical Disk\");\n                }\n            }\n            final VolumeTO volume = new VolumeTO(command.getVolumeId(), dskch.getType(), pool.getType(), pool.getUuid(), pool.getPath(), vol.getName(), vol.getName(), disksize,\n                    null);\n\n            volume.setBytesReadRate(dskch.getBytesReadRate());\n            volume.setBytesWriteRate(dskch.getBytesWriteRate());\n            volume.setIopsReadRate(dskch.getIopsReadRate());\n            volume.setIopsWriteRate(dskch.getIopsWriteRate());\n            volume.setCacheMode(dskch.getCacheMode());\n            return new CreateAnswer(command, volume);\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to create volume: \" + e.toString());\n            return new CreateAnswer(command, e);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}