{"text": "<fim_prefix>/*\n   Copyright (c) 2012 LinkedIn Corp.\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n       http://www.apache.org/licenses/LICENSE-2.0\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n/*\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n *\n * Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.\n *\n * The contents of this file are subject to the terms of either the GNU\n * General Public License Version 2 only (\"GPL\") or the Common Development\n * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n * may not use this file except in compliance with the License.  You can\n * obtain a copy of the License at\n * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html\n * or packager/legal/LICENSE.txt.  See the License for the specific\n * language governing permissions and limitations under the License.\n *\n * When distributing the software, include this License Header Notice in each\n * file and include the License file at packager/legal/LICENSE.txt.\n *\n * GPL Classpath Exception:\n * Oracle designates this particular file as subject to the \"Classpath\"\n * exception as provided by Oracle in the GPL Version 2 section of the License\n * file that accompanied this code.\n *\n * Modifications:\n * If applicable, add the following below the License Header, with the fields\n * enclosed by brackets [] replaced by your own identifying information:\n * \"Portions Copyright [year] [name of copyright owner]\"\n *\n * Contributor(s):\n * If you wish your version of this file to be governed by only the CDDL or\n * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n * elects to include this software in this distribution under the [CDDL or GPL\n * Version 2] license.\"  If you don't indicate a single choice of license, a\n * recipient has the option to distribute your version of this file under\n * either the CDDL, the GPL Version 2 or to extend the choice of license to\n * its licensees as provided above.  However, if you add GPL Version 2 code\n * and therefore, elected the GPL Version 2 license, then the option applies\n * only if the new code is made subject to such option by the copyright\n * holder.\n */\n/**\n * LinkedIn elects to include this software in this distribution under the CDDL license.\n *\n * Modifications:\n *   Repackaged original source under com.linkedin.jersey package.\n *   Added JavaDoc documentation to conform to Pegasus style guidelines\n */\npackage com.linkedin.jersey.api.uri;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\n/**\n * A URI template parser that parses JAX-RS specific URI templates.\n *\n * @author Paul.Sandoz@Sun.Com\n */\npublic class UriTemplateParser {\n    /* package */ static final int[] EMPTY_INT_ARRAY = new int[0];\n    private static Set<Character> RESERVED_REGEX_CHARACTERS = createReserved();\n    private static Set<Character> createReserved() {\n        // TODO need to escape all regex characters present\n        char[] reserved = {\n            '.',\n            '?',\n            '(',\n            ')'};\n        Set<Character> s = new HashSet<Character>(reserved.length);\n        for (char c : reserved) s.add(c);\n        return s;\n    }\n    private static final Pattern TEMPLATE_VALUE_PATTERN = Pattern.compile(\"[^/]+?\");\n    private interface CharacterIterator {\n        boolean hasNext();\n        char next();\n        char peek();\n        int pos();\n    }\n<fim_suffix>    private static final class StringCharacterIterator implements CharacterIterator {\n        int pos;\n        String s;\n        public StringCharacterIterator(String s) {\n            this.s = s;\n        }\n        public boolean hasNext() {\n            return pos < s.length();\n        }\n        public char next() {\n            if (!hasNext())\n                throw new NoSuchElementException();\n            return s.charAt(pos++);\n        }\n        public char peek() {\n            if (!hasNext())\n                throw new NoSuchElementException();\n            return s.charAt(pos++);\n        }\n        public int pos() {\n            if (pos == 0) return 0;\n            return pos - 1;\n        }\n    }\n    private final String template;\n    private final StringBuffer regex = new StringBuffer();;\n    private final StringBuffer normalizedTemplate = new StringBuffer();;\n    private final StringBuffer literalCharactersBuffer = new StringBuffer();;\n    private int numOfExplicitRegexes;\n    private int literalCharacters;\n    private final Pattern pattern;\n    private final List<String> names = new ArrayList<String>();\n    private final List<Integer> groupCounts = new ArrayList<Integer>();\n    private final Map<String, Pattern> nameToPattern = new HashMap<String, Pattern>();\n    /**\n     * Parse a template.\n     *\n     * @param template the template.\n     * @throws IllegalArgumentException if the template is null, an empty string\n     *         or does not conform to a JAX-RS URI template.\n     */\n    public UriTemplateParser(String template) throws IllegalArgumentException {\n        if (template == null || template.length() == 0)\n            throw new IllegalArgumentException();\n        this.template = template;\n        parse(new StringCharacterIterator(template));\n        try {\n            pattern = Pattern.compile(regex.toString());\n        } catch (PatternSyntaxException ex) {\n            throw new IllegalArgumentException(\"Invalid syntax for the template expression '\" +\n                    regex + \"'\",\n                    ex);\n        }\n    }\n    /**\n     * Get the template.\n     *\n     * @return the template.\n     */\n    public final String getTemplate() {\n        return template;\n    }\n    /**\n     * Get the pattern.\n     *\n     * @return the pattern.\n     */\n    public final Pattern getPattern() {\n        return pattern;\n    }\n    /**\n     * Get the normalized template.\n     * <p>\n     * A normalized template is a template without any explicit regular\n     * expressions.\n     *\n     * @return the normalized template.\n     */\n    public final String getNormalizedTemplate() {\n        return normalizedTemplate.toString();\n    }\n    /**\n     * Get the map of template names to patterns.\n     *\n     * @return the map of template names to patterns.\n     */\n    public final Map<String, Pattern> getNameToPattern() {\n        return nameToPattern;\n    }\n    /**\n     * Get the list of template names.\n     *\n     * @return the list of template names.\n     */\n    public final List<String> getNames() {\n        return names;\n    }\n    /**\n     * Get the capturing group counts for each template variable.\n     *\n     * @return the capturing group counts.\n     */\n    public final List<Integer> getGroupCounts() {\n        return groupCounts;\n    }\n    /**\n     * Get the group indexes to capturing groups.\n     * <p>\n     * Any nested capturing groups will be ignored and the\n     * the group index will refer to the top-level capturing\n     * groups associated with the templates variables.\n     *\n     * @return the group indexes to capturing groups.\n     */\n    public final int[] getGroupIndexes() {\n        if (names.isEmpty()) return EMPTY_INT_ARRAY;\n        int[] indexes = new int[names.size() + 1];\n        indexes[0] = 1;\n        for (int i = 1; i < indexes.length; i++) {\n            indexes[i] = indexes[i - 1] + groupCounts.get(i - 1);\n        }\n        for (int i = 0; i < indexes.length; i++) {\n            if (indexes[i] != i + 1)\n                return indexes;\n        }\n        return EMPTY_INT_ARRAY;\n    }\n    /**\n     * Get the number of explicit regular expressions.\n     *\n     * @return the number of explicit regular expressions.\n     */\n    public final int getNumberOfExplicitRegexes() {\n        return numOfExplicitRegexes;\n    }\n    /**\n     * Get the number of literal characters.\n     *\n     * @return the number of literal characters.\n     */\n    public final int getNumberOfLiteralCharacters() {\n        return literalCharacters;\n    }\n    /**\n     * Encode literal characters of a template.\n     *\n     * @param literalCharacters the literal characters\n     * @return the encoded literal characters.\n     */\n    protected String encodeLiteralCharacters(String literalCharacters) {\n        return literalCharacters;\n    }\n    private void parse(CharacterIterator ci) {\n        try {\n            while (ci.hasNext()) {\n                char c = ci.next();\n                if (c == '{') {<fim_middle>// class below has no smell\n"}