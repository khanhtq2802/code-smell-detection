{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2014 UT-Battelle, LLC.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   Initial API and implementation and/or initial documentation - Jay Jay Billings,\n *   Jordan H. Deyton, Dasha Gorin, Alexander J. McCaskey, Taylor Patterson,\n *   Claire Saunders, Matthew Wang, Anna Wojtowicz\n *******************************************************************************/\npackage org.eclipse.ice.reactor.plant;\n\nimport java.security.InvalidParameterException;\n\n/**\n * <p>\n * Represents a lattice of rods for housing fuel rods of a reactor. For the\n * purpose of drawing, this is just a specialized pipe.\n * </p>\n * \n * @author Anna Wojtowicz\n */\n<fim_suffix>public class Subchannel extends Pipe {\n\t/**\n\t * <p>\n\t * Number of fuel rods contained within.\n\t * </p>\n\t * \n\t */\n\tprivate int numRods;\n\n\t/**\n\t * <p>\n\t * Diameter of the subchannel fuel rods (this assumes uniform rod sizes).\n\t * </p>\n\t * \n\t */\n\tprivate double rodDiameter;\n\n\t/**\n\t * <p>\n\t * Pitch of the fuel rod bundle (distance between adjacent rod centers).\n\t * </p>\n\t * \n\t */\n\tprivate double pitch;\n\n\t/**\n\t * <p>\n\t * Nullary constructor.\n\t * </p>\n\t * \n\t */\n\tpublic Subchannel() {\n\n\t\t// Set the name, description and ID.\n\t\tsetName(\"Subchannel 1\");\n\t\tsetDescription(\"A subchannel plant component for reactors\");\n\t\tsetId(1);\n\n\t\t// Set the default number of rods, rod diameter and pitch.\n\t\tsetNumRods(1);\n\t\tsetRodDiameter(1.0);\n\t\tsetPitch(1.5);\n\t\t// Note: Pitch must always be set after diameter, as setPitch method\n\t\t// checks that pitch >= rodDiameter.\n\n\t\treturn;\n\t}\n\n\t/**\n\t * <p>\n\t * Parameterized constructor.\n\t * </p>\n\t * \n\t * @param numRods\n\t *            <p>\n\t *            Number of rods contained.\n\t *            </p>\n\t * @param rodDiameter\n\t *            <p>\n\t *            Diameter of the (uniformly-sized) fuel rods.\n\t *            </p>\n\t * @param pitch\n\t *            <p>\n\t *            Pitch of the fuel rods.\n\t *            </p>\n\t */\n\tpublic Subchannel(int numRods, double rodDiameter, double pitch) {\n\n\t\t// Set the name, description and ID.\n\t\tsetName(\"Subchannel 1\");\n\t\tsetDescription(\"A subchannel plant component for reactors\");\n\t\tsetId(1);\n\n\t\t// Set the default number of rods, rod diameter and pitch.\n\t\tsetNumRods(numRods);\n\t\tsetRodDiameter(rodDiameter);\n\t\tsetPitch(pitch);\n\n\t\treturn;\n\t}\n\n\t/**\n\t * @return the numRods\n\t */\n\tpublic int getNumRods() {\n\t\treturn numRods;\n\t}\n\n\t/**\n\t * @param numRods\n\t *            the numRods to set\n\t */\n\tpublic void setNumRods(int numRods) {\n\n\t\t// Check the input is valid.\n\t\tif (numRods >= 1) {\n\t\t\tthis.numRods = numRods;\n\t\t} else {\n\t\t\tthrow new InvalidParameterException(\"Subchannel error: The number \"\n\t\t\t\t\t+ \"of rods must greater than or equal to 1.\");\n\t\t}\n\t\treturn;\n\t}\n\n\t/**\n\t * @return the rodDiameter\n\t */\n\tpublic double getRodDiameter() {\n\t\treturn rodDiameter;\n\t}\n\n\t/**\n\t * @param rodDiameter\n\t *            the rodDiameter to set\n\t */\n\tpublic void setRodDiameter(double rodDiameter) {\n\n\t\t// Check the input is valid.\n\t\tif (rodDiameter > 0) {\n\t\t\tthis.rodDiameter = rodDiameter;\n\t\t} else {\n\t\t\tthrow new InvalidParameterException(\"Subchannel error: The rod \"\n\t\t\t\t\t+ \"diameter must be non-negative.\");\n\t\t}\n\t\treturn;\n\t}\n\n\t/**\n\t * @return the pitch\n\t */\n\tpublic double getPitch() {\n\t\treturn pitch;\n\t}\n\n\t/**\n\t * @param pitch\n\t *            the pitch to set\n\t */\n\tpublic void setPitch(double pitch) {\n\n\t\t// Check that the input is valid.\n\t\tif (pitch >= rodDiameter) {\n\t\t\tthis.pitch = pitch;\n\t\t} else {\n\t\t\tthrow new InvalidParameterException(\"Subchannel error: The rod \"\n\t\t\t\t\t+ \"pitch cannot be smaller than the rod diameter.\");\n\t\t}\n\t}\n\n\t/**\n\t * <p>\n\t * Performs an equality check between two Objects.\n\t * </p>\n\t * \n\t * @param otherObject\n\t *            <p>\n\t *            The other Object to compare against.\n\t *            </p>\n\t * @return <p>\n\t *         Returns true if the two objects are equal, otherwise false.\n\t *         </p>\n\t */\n\t@Override\n\tpublic boolean equals(Object otherObject) {\n\n\t\t// By default, the objects are not equivalent.\n\t\tboolean equals = false;\n\n\t\t// Check the reference.\n\t\tif (this == otherObject) {\n\t\t\tequals = true;\n\t\t}\n\t\t// Check the information stored in the other object.\n\t\telse if (otherObject != null && otherObject instanceof Subchannel) {\n\n\t\t\t// Cast the other object.\n\t\t\tSubchannel component = (Subchannel) otherObject;\n\n\t\t\t// Compare all the variables. (Save the biggest for last; Java\n\t\t\t// should\n\t\t\t// short-circuit the logical operators as soon as a mismatch is\n\t\t\t// found)\n\t\t\tequals = (super.equals(component) && numRods == component.numRods\n\t\t\t\t\t&& rodDiameter == component.rodDiameter && pitch == component.pitch);\n\t\t}\n\n\t\treturn equals;\n\t}\n\n\t/**\n\t * <p>\n\t * Performs a deep copy and returns a newly instantiated Object.\n\t * </p>\n\t * \n\t * @return <p>\n\t *         The newly instantiated Object.\n\t *         </p>\n\t */\n\t@Override\n\tpublic Object clone() {\n\n\t\t// Initialize a new object.\n\t\tSubchannel object = new Subchannel();\n\n\t\t// Copy the contents from this one.\n\t\tobject.copy(this);\n\n\t\t// Return the newly instantiated object.\n\t\treturn object;\n\t}\n\n\t/**\n\t * <p>\n\t * Deep copies the contents of otherObject.\n\t * </p>\n\t * \n\t * @param otherObject\n\t *            <p>\n\t *            The other object to copy the contents from.\n\t *            </p>\n\t */\n\tpublic void copy(Subchannel otherObject) {\n\n\t\t// Check the otherObject is valid.\n\t\tif (otherObject == null) {\n\t\t\treturn;\n\t\t}\n\t\t// Copy the other object.\n\t\tsuper.copy(otherObject);\n\t\tnumRods = otherObject.numRods;\n\t\trodDiameter = otherObject.rodDiameter;\n\t\tpitch = otherObject.pitch;\n\n\t\treturn;\n\t}\n\n\t/**\n\t * <p>\n\t * Returns the hashCode of the object.\n\t * </p>\n\t * \n\t * @return <p>\n\t *         The hashCode of the Object.\n\t *         </p>\n\t */\n\t@Override\n\tpublic int hashCode() {\n\n\t\t// Call the super's hashCode.\n\t\tint hash = super.hashCode();\n\n\t\t// Add local hashes.\n\t\thash = 31 * hash + numRods;\n\t\thash = 31 * hash + new Double(rodDiameter).hashCode();\n\t\thash = 31 * hash + new Double(pitch).hashCode();\n\n\t\treturn hash;\n\t}\n\n\t/**\n\t * <p>\n\t * Accepts PlantComponentVisitors to reveal the type of a PlantComponent.\n\t * </p>\n\t * \n\t * @param visitor\n\t *            <p>\n\t *            The PlantComponent's visitor.\n\t *            </p>\n\t */\n\t@Override\n\tpublic void accept(IPlantComponentVisitor visitor) {\n\n\t\t// Only accept valid visitors.\n\t\tif (visitor != null) {\n\t\t\tvisitor.visit(this);\n\t\t}\n\t\treturn;\n\t}\n}<fim_middle>// class below is data class\n"}