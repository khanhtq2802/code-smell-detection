{"text": "<fim_prefix>// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\npackage com.cloud.user.dao;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.TimeZone;\n\n\nimport org.apache.log4j.Logger;\nimport org.springframework.stereotype.Component;\n\nimport com.cloud.user.VmDiskStatisticsVO;\nimport com.cloud.utils.DateUtil;\nimport com.cloud.utils.db.GenericDaoBase;\nimport com.cloud.utils.db.SearchBuilder;\nimport com.cloud.utils.db.SearchCriteria;\nimport com.cloud.utils.db.TransactionLegacy;\n\n<fim_suffix>@Component\npublic class VmDiskStatisticsDaoImpl extends GenericDaoBase<VmDiskStatisticsVO, Long> implements VmDiskStatisticsDao {\n    private static final Logger s_logger = Logger.getLogger(VmDiskStatisticsDaoImpl.class);\n    private static final String ACTIVE_AND_RECENTLY_DELETED_SEARCH =\n        \"SELECT bcf.id, bcf.data_center_id, bcf.account_id, bcf.vm_id, bcf.volume_id, bcf.agg_io_read, bcf.agg_io_write, bcf.agg_bytes_read, bcf.agg_bytes_write \"\n            + \"FROM vm_disk_statistics bcf, account a \" + \"WHERE bcf.account_id = a.id AND (a.removed IS NULL OR a.removed >= ?) \" + \"ORDER BY bcf.id\";\n    private static final String UPDATED_VM_NETWORK_STATS_SEARCH = \"SELECT id, current_io_read, current_io_write, net_io_read, net_io_write, agg_io_read, agg_io_write, \"\n        + \"current_bytes_read, current_bytes_write, net_bytes_read, net_bytes_write, agg_bytes_read, agg_bytes_write \" + \"from  vm_disk_statistics \"\n        + \"where (agg_io_read < net_io_read + current_io_read) OR (agg_io_write < net_io_write + current_io_write) OR \"\n        + \"(agg_bytes_read < net_bytes_read + current_bytes_read) OR (agg_bytes_write < net_bytes_write + current_bytes_write)\";\n    private final SearchBuilder<VmDiskStatisticsVO> AllFieldsSearch;\n    private final SearchBuilder<VmDiskStatisticsVO> AccountSearch;\n\n    public VmDiskStatisticsDaoImpl() {\n        AccountSearch = createSearchBuilder();\n        AccountSearch.and(\"account\", AccountSearch.entity().getAccountId(), SearchCriteria.Op.EQ);\n        AccountSearch.done();\n\n        AllFieldsSearch = createSearchBuilder();\n        AllFieldsSearch.and(\"account\", AllFieldsSearch.entity().getAccountId(), SearchCriteria.Op.EQ);\n        AllFieldsSearch.and(\"dc\", AllFieldsSearch.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n        AllFieldsSearch.and(\"volume\", AllFieldsSearch.entity().getVolumeId(), SearchCriteria.Op.EQ);\n        AllFieldsSearch.and(\"vm\", AllFieldsSearch.entity().getVmId(), SearchCriteria.Op.EQ);\n        AllFieldsSearch.done();\n    }\n\n    @Override\n    public VmDiskStatisticsVO findBy(long accountId, long dcId, long vmId, long volumeId) {\n        SearchCriteria<VmDiskStatisticsVO> sc = AllFieldsSearch.create();\n        sc.setParameters(\"account\", accountId);\n        sc.setParameters(\"dc\", dcId);\n        sc.setParameters(\"volume\", volumeId);\n        sc.setParameters(\"vm\", vmId);\n        return findOneBy(sc);\n    }\n\n    @Override\n    public VmDiskStatisticsVO lock(long accountId, long dcId, long vmId, long volumeId) {\n        SearchCriteria<VmDiskStatisticsVO> sc = AllFieldsSearch.create();\n        sc.setParameters(\"account\", accountId);\n        sc.setParameters(\"dc\", dcId);\n        sc.setParameters(\"volume\", volumeId);\n        sc.setParameters(\"vm\", vmId);\n        return lockOneRandomRow(sc, true);\n    }\n\n    @Override\n    public List<VmDiskStatisticsVO> listBy(long accountId) {\n        SearchCriteria<VmDiskStatisticsVO> sc = AccountSearch.create();\n        sc.setParameters(\"account\", accountId);\n        return search(sc, null);\n    }\n\n    @Override\n    public List<VmDiskStatisticsVO> listActiveAndRecentlyDeleted(Date minRemovedDate, int startIndex, int limit) {\n        List<VmDiskStatisticsVO> vmDiskStats = new ArrayList<VmDiskStatisticsVO>();\n        if (minRemovedDate == null)\n            return vmDiskStats;\n\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        try {\n            String sql = ACTIVE_AND_RECENTLY_DELETED_SEARCH + \" LIMIT \" + startIndex + \",\" + limit;\n            PreparedStatement pstmt = null;\n            pstmt = txn.prepareAutoCloseStatement(sql);\n            pstmt.setString(1, DateUtil.getDateDisplayString(TimeZone.getTimeZone(\"GMT\"), minRemovedDate));\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                vmDiskStats.add(toEntityBean(rs, false));\n            }\n        } catch (Exception ex) {\n            s_logger.error(\"error saving vm disk stats to cloud_usage db\", ex);\n        }\n        return vmDiskStats;\n    }\n\n    @Override\n    public List<VmDiskStatisticsVO> listUpdatedStats() {\n        List<VmDiskStatisticsVO> vmDiskStats = new ArrayList<VmDiskStatisticsVO>();\n\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        try {\n            PreparedStatement pstmt = null;\n            pstmt = txn.prepareAutoCloseStatement(UPDATED_VM_NETWORK_STATS_SEARCH);\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                vmDiskStats.add(toEntityBean(rs, false));\n            }\n        } catch (Exception ex) {\n            s_logger.error(\"error lisitng updated vm disk stats\", ex);\n        }\n        return vmDiskStats;\n    }\n\n}<fim_middle>// class below has no smell\n"}