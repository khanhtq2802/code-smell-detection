{"text": "<fim_prefix>package org.aspectj.apache.bcel.classfile;\n\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\n\nimport org.aspectj.apache.bcel.Constants;\n\n<fim_suffix>public class AttributeUtils {\n\n\tpublic static Attribute[] readAttributes(DataInputStream dataInputstream, ConstantPool cpool) {\n\t\ttry {\n\t\t\tint length = dataInputstream.readUnsignedShort();\n\t\t\tif (length == 0) {\n\t\t\t\treturn Attribute.NoAttributes;\n\t\t\t}\n\t\t\tAttribute[] attrs = new Attribute[length];\n\t\t\tfor (int i = 0; i < length; i++) {\n\t\t\t\tattrs[i] = Attribute.readAttribute(dataInputstream, cpool);\n\t\t\t}\n\t\t\treturn attrs;\n\t\t} catch (IOException e) {\n\t\t\tthrow new ClassFormatException(\"IOException whilst reading set of attributes: \" + e.toString());\n\t\t}\n\t}\n\n\t/** Write (serialize) a set of attributes into a specified output stream */\n\tpublic static void writeAttributes(Attribute[] attributes, DataOutputStream file) throws IOException {\n\t\tif (attributes == null) {\n\t\t\tfile.writeShort(0);\n\t\t} else {\n\t\t\tfile.writeShort(attributes.length);\n\t\t\tfor (int i = 0; i < attributes.length; i++) {\n\t\t\t\tattributes[i].dump(file);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static Signature getSignatureAttribute(Attribute[] attributes) {\n\t\tfor (int i = 0; i < attributes.length; i++) {\n\t\t\tif (attributes[i].tag == Constants.ATTR_SIGNATURE) {\n\t\t\t\treturn (Signature) attributes[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static Code getCodeAttribute(Attribute[] attributes) {\n\t\tfor (int i = 0; i < attributes.length; i++) {\n\t\t\tif (attributes[i].tag == Constants.ATTR_CODE) {\n\t\t\t\treturn (Code) attributes[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static ExceptionTable getExceptionTableAttribute(Attribute[] attributes) {\n\t\tfor (int i = 0; i < attributes.length; i++) {\n\t\t\tif (attributes[i].tag == Constants.ATTR_EXCEPTIONS) {\n\t\t\t\treturn (ExceptionTable) attributes[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static ConstantValue getConstantValueAttribute(Attribute[] attributes) {\n\t\tfor (int i = 0; i < attributes.length; i++) {\n\t\t\tif (attributes[i].getTag() == Constants.ATTR_CONSTANT_VALUE) {\n\t\t\t\treturn (ConstantValue) attributes[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static void accept(Attribute[] attributes, ClassVisitor visitor) {\n\t\tfor (int i = 0; i < attributes.length; i++) {\n\t\t\tattributes[i].accept(visitor);\n\t\t}\n\t}\n\n\tpublic static boolean hasSyntheticAttribute(Attribute[] attributes) {\n\t\tfor (int i = 0; i < attributes.length; i++) {\n\t\t\tif (attributes[i].tag == Constants.ATTR_SYNTHETIC) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static SourceFile getSourceFileAttribute(Attribute[] attributes) {\n\t\tfor (int i = 0; i < attributes.length; i++) {\n\t\t\tif (attributes[i].tag == Constants.ATTR_SOURCE_FILE) {\n\t\t\t\treturn (SourceFile) attributes[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n}<fim_middle>// class below is blob\n"}