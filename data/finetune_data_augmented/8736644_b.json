{"text": "<fim_prefix>\n<fim_suffix>public class HistoryClientService extends AbstractService {\n  private static final Log LOG = LogFactory.getLog(HistoryClientService.class);\n  private HSClientProtocol protocolHandler;\n  private Server server;\n  private WebApp webApp;\n  private InetSocketAddress bindAddress;\n  private HistoryContext history;\n  private JHSDelegationTokenSecretManager jhsDTSecretManager;\n  public HistoryClientService(HistoryContext history,\n      JHSDelegationTokenSecretManager jhsDTSecretManager) {\n    super(\"HistoryClientService\");\n    this.history = history;\n    this.protocolHandler = new HSClientProtocolHandler();\n    this.jhsDTSecretManager = jhsDTSecretManager;\n  }\n  protected void serviceStart() throws Exception {\n    Configuration conf = getConfig();\n    YarnRPC rpc = YarnRPC.create(conf);\n    initializeWebApp(conf);\n    InetSocketAddress address = conf.getSocketAddr(\n        JHAdminConfig.MR_HISTORY_BIND_HOST,\n        JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_PORT);\n    server =\n        rpc.getServer(HSClientProtocol.class, protocolHandler, address,\n            conf, jhsDTSecretManager,\n            conf.getInt(JHAdminConfig.MR_HISTORY_CLIENT_THREAD_COUNT,\n                JHAdminConfig.DEFAULT_MR_HISTORY_CLIENT_THREAD_COUNT));\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      server.refreshServiceAcl(conf, new ClientHSPolicyProvider());\n    }\n    server.start();\n    this.bindAddress = conf.updateConnectAddr(JHAdminConfig.MR_HISTORY_BIND_HOST,\n                                              JHAdminConfig.MR_HISTORY_ADDRESS,\n                                              JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS,\n                                              server.getListenerAddress());\n    LOG.info(\"Instantiated HistoryClientService at \" + this.bindAddress);\n    super.serviceStart();\n  }\n  @VisibleForTesting\n  protected void initializeWebApp(Configuration conf) {\n    webApp = new HsWebApp(history);\n    InetSocketAddress bindAddress = MRWebAppUtil.getJHSWebBindAddress(conf);\n    // NOTE: there should be a .at(InetSocketAddress)\n    WebApps\n        .$for(\"jobhistory\", HistoryClientService.class, this, \"ws\")\n        .with(conf)\n        .withHttpSpnegoKeytabKey(\n            JHAdminConfig.MR_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n        .withHttpSpnegoPrincipalKey(\n            JHAdminConfig.MR_WEBAPP_SPNEGO_USER_NAME_KEY)\n        .at(NetUtils.getHostPortString(bindAddress)).start(webApp);\n    String connectHost = MRWebAppUtil.getJHSWebappURLWithoutScheme(conf).split(\":\")[0];\n    MRWebAppUtil.setJHSWebappURLWithoutScheme(conf,\n        connectHost + \":\" + webApp.getListenerAddress().getPort());\n  }\n  @Override\n  protected void serviceStop() throws Exception {\n    if (server != null) {\n      server.stop();\n    }\n    if (webApp != null) {\n      webApp.stop();\n    }\n    super.serviceStop();\n  }\n  @Private\n  public MRClientProtocol getClientHandler() {\n    return this.protocolHandler;\n  }\n  @Private\n  public InetSocketAddress getBindAddress() {\n    return this.bindAddress;\n  }\n  private class HSClientProtocolHandler implements HSClientProtocol {\n    private RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(null);\n    public InetSocketAddress getConnectAddress() {\n      return getBindAddress();\n    }\n    private Job verifyAndGetJob(final JobId jobID) throws IOException {\n      UserGroupInformation loginUgi = null;\n      Job job = null;\n      try {\n        loginUgi = UserGroupInformation.getLoginUser();\n        job = loginUgi.doAs(new PrivilegedExceptionAction<Job>() {\n          @Override\n          public Job run() throws Exception {\n            Job job = history.getJob(jobID);\n            return job;\n          }\n        });\n      } catch (InterruptedException e) {\n        throw new IOException(e);\n      }\n      if (job != null) {\n        JobACL operation = JobACL.VIEW_JOB;\n        checkAccess(job, operation);\n      }\n      return job;\n    }\n    @Override\n    public GetCountersResponse getCounters(GetCountersRequest request)\n        throws IOException {\n      JobId jobId = request.getJobId();\n      Job job = verifyAndGetJob(jobId);\n      GetCountersResponse response = recordFactory.newRecordInstance(GetCountersResponse.class);\n      response.setCounters(TypeConverter.toYarn(job.getAllCounters()));\n      return response;\n    }\n    @Override\n    public GetJobReportResponse getJobReport(GetJobReportRequest request)\n        throws IOException {\n      JobId jobId = request.getJobId();\n      Job job = verifyAndGetJob(jobId);\n      GetJobReportResponse response = recordFactory.newRecordInstance(GetJobReportResponse.class);\n      if (job != null) {\n        response.setJobReport(job.getReport());\n      }\n      else {\n        response.setJobReport(null);\n      }\n      return response;\n    }\n    @Override\n    public GetTaskAttemptReportResponse getTaskAttemptReport(\n        GetTaskAttemptReportRequest request) throws IOException {\n      TaskAttemptId taskAttemptId = request.getTaskAttemptId();\n      Job job = verifyAndGetJob(taskAttemptId.getTaskId().getJobId());\n      GetTaskAttemptReportResponse response = recordFactory.newRecordInstance(GetTaskAttemptReportResponse.class);\n      response.setTaskAttemptReport(job.getTask(taskAttemptId.getTaskId()).getAttempt(taskAttemptId).getReport());\n      return response;\n    }\n    @Override\n    public GetTaskReportResponse getTaskReport(GetTaskReportRequest request)\n        throws IOException {\n      TaskId taskId = request.getTaskId();\n      Job job = verifyAndGetJob(taskId.getJobId());\n      GetTaskReportResponse response = recordFactory.newRecordInstance(GetTaskReportResponse.class);\n      response.setTaskReport(job.getTask(taskId).getReport());\n      return response;\n    }\n    @Override\n    public GetTaskAttemptCompletionEventsResponse\n        getTaskAttemptCompletionEvents(\n            GetTaskAttemptCompletionEventsRequest request) throws IOException {\n      JobId jobId = request.getJobId();\n      int fromEventId = request.getFromEventId();\n      int maxEvents = request.getMaxEvents();\n      Job job = verifyAndGetJob(jobId);\n      GetTaskAttemptCompletionEventsResponse response = recordFactory.newRecordInstance(GetTaskAttemptCompletionEventsResponse.class);\n      response.addAllCompletionEvents(Arrays.asList(job.getTaskAttemptCompletionEvents(fromEventId, maxEvents)));\n      return response;\n    }\n    @Override\n    public KillJobResponse killJob(KillJobRequest request) throws IOException {\n      throw new IOException(\"Invalid operation on completed job\");\n    }\n    @Override\n    public KillTaskResponse killTask(KillTaskRequest request)\n        throws IOException {\n      throw new IOException(\"Invalid operation on completed job\");\n    }\n    @Override\n    public KillTaskAttemptResponse killTaskAttempt(\n        KillTaskAttemptRequest request) throws IOException {\n      throw new IOException(\"Invalid operation on completed job\");\n    }\n    @Override\n    public GetDiagnosticsResponse getDiagnostics(GetDiagnosticsRequest request)\n        throws IOException {\n      TaskAttemptId taskAttemptId = request.getTaskAttemptId();\n      Job job = verifyAndGetJob(taskAttemptId.getTaskId().getJobId());\n      GetDiagnosticsResponse response = recordFactory.newRecordInstance(GetDiagnosticsResponse.class);\n      response.addAllDiagnostics(job.getTask(taskAttemptId.getTaskId()).getAttempt(taskAttemptId).getDiagnostics());\n      return response;\n    }\n    @Override\n    public FailTaskAttemptResponse failTaskAttempt(\n        FailTaskAttemptRequest request) throws IOException {\n      throw new IOException(\"Invalid operation on completed job\");\n    }\n    @Override\n    public GetTaskReportsResponse getTaskReports(GetTaskReportsRequest request)\n        throws IOException {\n      JobId jobId = request.getJobId();\n      TaskType taskType = request.getTaskType();\n      GetTaskReportsResponse response = recordFactory.newRecordInstance(GetTaskReportsResponse.class);\n      Job job = verifyAndGetJob(jobId);\n      Collection<Task> tasks = job.getTasks(taskType).values();\n      for (Task task : tasks) {\n        response.addTaskReport(task.getReport());\n      }\n      return response;\n    }\n    @Override\n    public GetDelegationTokenResponse getDelegationToken(\n        GetDelegationTokenRequest request) throws IOException {\n      UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\n      // Verify that the connection is kerberos authenticated\n        if (!isAllowedDelegationTokenOp()) {\n          throw new IOException(\n              \"Delegation Token can be issued only with kerberos authentication\");\n        }<fim_middle>// class below is data class and blob\n"}