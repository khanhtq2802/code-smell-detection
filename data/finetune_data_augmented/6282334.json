{"text": "<fim_prefix>\n<fim_suffix>public class CrossOriginFilter implements Filter\n{\n    private static final Logger LOG = Log.getLogger(CrossOriginFilter.class);\n    // Request headers\n    private static final String ORIGIN_HEADER = \"Origin\";\n    public static final String ACCESS_CONTROL_REQUEST_METHOD_HEADER = \"Access-Control-Request-Method\";\n    public static final String ACCESS_CONTROL_REQUEST_HEADERS_HEADER = \"Access-Control-Request-Headers\";\n    // Response headers\n    public static final String ACCESS_CONTROL_ALLOW_ORIGIN_HEADER = \"Access-Control-Allow-Origin\";\n    public static final String ACCESS_CONTROL_ALLOW_METHODS_HEADER = \"Access-Control-Allow-Methods\";\n    public static final String ACCESS_CONTROL_ALLOW_HEADERS_HEADER = \"Access-Control-Allow-Headers\";\n    public static final String ACCESS_CONTROL_MAX_AGE_HEADER = \"Access-Control-Max-Age\";\n    public static final String ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER = \"Access-Control-Allow-Credentials\";\n    public static final String ACCESS_CONTROL_EXPOSE_HEADERS_HEADER = \"Access-Control-Expose-Headers\";\n    public static final String TIMING_ALLOW_ORIGIN_HEADER = \"Timing-Allow-Origin\";\n    // Implementation constants\n    public static final String ALLOWED_ORIGINS_PARAM = \"allowedOrigins\";\n    public static final String ALLOWED_TIMING_ORIGINS_PARAM = \"allowedTimingOrigins\";\n    public static final String ALLOWED_METHODS_PARAM = \"allowedMethods\";\n    public static final String ALLOWED_HEADERS_PARAM = \"allowedHeaders\";\n    public static final String PREFLIGHT_MAX_AGE_PARAM = \"preflightMaxAge\";\n    public static final String ALLOW_CREDENTIALS_PARAM = \"allowCredentials\";\n    public static final String EXPOSED_HEADERS_PARAM = \"exposedHeaders\";\n    public static final String OLD_CHAIN_PREFLIGHT_PARAM = \"forwardPreflight\";\n    public static final String CHAIN_PREFLIGHT_PARAM = \"chainPreflight\";\n    private static final String ANY_ORIGIN = \"*\";\n    private static final String DEFAULT_ALLOWED_ORIGINS = \"*\";\n    private static final String DEFAULT_ALLOWED_TIMING_ORIGINS = \"\";\n    private static final List<String> SIMPLE_HTTP_METHODS = Arrays.asList(\"GET\", \"POST\", \"HEAD\");\n    private static final List<String> DEFAULT_ALLOWED_METHODS = Arrays.asList(\"GET\", \"POST\", \"HEAD\");\n    private static final List<String> DEFAULT_ALLOWED_HEADERS = Arrays.asList(\"X-Requested-With\", \"Content-Type\", \"Accept\", \"Origin\");\n    private boolean anyOriginAllowed;\n    private boolean anyTimingOriginAllowed;\n    private boolean anyHeadersAllowed;\n    private List<String> allowedOrigins = new ArrayList<String>();\n    private List<String> allowedTimingOrigins = new ArrayList<String>();\n    private List<String> allowedMethods = new ArrayList<String>();\n    private List<String> allowedHeaders = new ArrayList<String>();\n    private List<String> exposedHeaders = new ArrayList<String>();\n    private int preflightMaxAge;\n    private boolean allowCredentials;\n    private boolean chainPreflight;\n    @Override\n    public void init(FilterConfig config) throws ServletException\n    {\n        String allowedOriginsConfig = config.getInitParameter(ALLOWED_ORIGINS_PARAM);\n        String allowedTimingOriginsConfig = config.getInitParameter(ALLOWED_TIMING_ORIGINS_PARAM);\n        anyOriginAllowed = generateAllowedOrigins(allowedOrigins, allowedOriginsConfig, DEFAULT_ALLOWED_ORIGINS);\n        anyTimingOriginAllowed = generateAllowedOrigins(allowedTimingOrigins, allowedTimingOriginsConfig, DEFAULT_ALLOWED_TIMING_ORIGINS);\n        String allowedMethodsConfig = config.getInitParameter(ALLOWED_METHODS_PARAM);\n        if (allowedMethodsConfig == null)\n            allowedMethods.addAll(DEFAULT_ALLOWED_METHODS);\n        else\n            allowedMethods.addAll(Arrays.asList(StringUtil.csvSplit(allowedMethodsConfig)));\n        String allowedHeadersConfig = config.getInitParameter(ALLOWED_HEADERS_PARAM);\n        if (allowedHeadersConfig == null)\n            allowedHeaders.addAll(DEFAULT_ALLOWED_HEADERS);\n        else if (\"*\".equals(allowedHeadersConfig))\n            anyHeadersAllowed = true;\n        else\n            allowedHeaders.addAll(Arrays.asList(StringUtil.csvSplit(allowedHeadersConfig)));\n        String preflightMaxAgeConfig = config.getInitParameter(PREFLIGHT_MAX_AGE_PARAM);\n        if (preflightMaxAgeConfig == null)\n            preflightMaxAgeConfig = \"1800\"; // Default is 30 minutes\n        try\n        {\n            preflightMaxAge = Integer.parseInt(preflightMaxAgeConfig);\n        }\n        catch (NumberFormatException x)\n        {\n            LOG.info(\"Cross-origin filter, could not parse '{}' parameter as integer: {}\", PREFLIGHT_MAX_AGE_PARAM, preflightMaxAgeConfig);\n        }\n        String allowedCredentialsConfig = config.getInitParameter(ALLOW_CREDENTIALS_PARAM);\n        if (allowedCredentialsConfig == null)\n            allowedCredentialsConfig = \"true\";\n        allowCredentials = Boolean.parseBoolean(allowedCredentialsConfig);\n        String exposedHeadersConfig = config.getInitParameter(EXPOSED_HEADERS_PARAM);\n        if (exposedHeadersConfig == null)\n            exposedHeadersConfig = \"\";\n        exposedHeaders.addAll(Arrays.asList(StringUtil.csvSplit(exposedHeadersConfig)));\n        String chainPreflightConfig = config.getInitParameter(OLD_CHAIN_PREFLIGHT_PARAM);\n        if (chainPreflightConfig != null)\n            LOG.warn(\"DEPRECATED CONFIGURATION: Use \" + CHAIN_PREFLIGHT_PARAM + \" instead of \" + OLD_CHAIN_PREFLIGHT_PARAM);\n        else\n            chainPreflightConfig = config.getInitParameter(CHAIN_PREFLIGHT_PARAM);\n        if (chainPreflightConfig == null)\n            chainPreflightConfig = \"true\";\n        chainPreflight = Boolean.parseBoolean(chainPreflightConfig);\n        if (LOG.isDebugEnabled())\n        {\n            LOG.debug(\"Cross-origin filter configuration: \" +\n                            ALLOWED_ORIGINS_PARAM + \" = \" + allowedOriginsConfig + \", \" +\n                            ALLOWED_TIMING_ORIGINS_PARAM + \" = \" + allowedTimingOriginsConfig + \", \" +\n                            ALLOWED_METHODS_PARAM + \" = \" + allowedMethodsConfig + \", \" +\n                            ALLOWED_HEADERS_PARAM + \" = \" + allowedHeadersConfig + \", \" +\n                            PREFLIGHT_MAX_AGE_PARAM + \" = \" + preflightMaxAgeConfig + \", \" +\n                            ALLOW_CREDENTIALS_PARAM + \" = \" + allowedCredentialsConfig + \",\" +\n                            EXPOSED_HEADERS_PARAM + \" = \" + exposedHeadersConfig + \",\" +\n                            CHAIN_PREFLIGHT_PARAM + \" = \" + chainPreflightConfig\n            );\n        }\n    }\n    private boolean generateAllowedOrigins(List<String> allowedOriginStore, String allowedOriginsConfig, String defaultOrigin) \n    {\n        if (allowedOriginsConfig == null)\n            allowedOriginsConfig = defaultOrigin;\n        String[] allowedOrigins = StringUtil.csvSplit(allowedOriginsConfig);\n        for (String allowedOrigin : allowedOrigins)\n        {\n            if (allowedOrigin.length() > 0)\n            {\n                if (ANY_ORIGIN.equals(allowedOrigin))\n                {\n                    allowedOriginStore.clear();\n                    return true;\n                }\n                else\n                {\n                    allowedOriginStore.add(allowedOrigin);\n                }\n            }\n        }\n        return false;\n    }\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException\n    {\n        handle((HttpServletRequest)request, (HttpServletResponse)response, chain);\n    }\n    private void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException\n    {\n        String origin = request.getHeader(ORIGIN_HEADER);\n        // Is it a cross origin request ?\n        if (origin != null && isEnabled(request))\n        {\n            if (anyOriginAllowed || originMatches(allowedOrigins, origin))\n            {\n                if (isSimpleRequest(request))\n                {\n                    LOG.debug(\"Cross-origin request to {} is a simple cross-origin request\", request.getRequestURI());\n                    handleSimpleResponse(request, response, origin);\n                }\n                else if (isPreflightRequest(request))\n                {\n                    LOG.debug(\"Cross-origin request to {} is a preflight cross-origin request\", request.getRequestURI());\n                    handlePreflightResponse(request, response, origin);\n                    if (chainPreflight)\n                        LOG.debug(\"Preflight cross-origin request to {} forwarded to application\", request.getRequestURI());\n                    else\n                        return;\n                }\n                else\n                {<fim_middle>// class below has no smell\n"}