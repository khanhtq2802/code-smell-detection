{"text": "<fim_prefix>    return createRequestAsync(\n        responseStep, new RequestParams(\"listPod\", namespace, null, null), LIST_POD);\n  }\n  private com.squareup.okhttp.Call readPodAsync(\n      ApiClient client, String name, String namespace, ApiCallback<V1Pod> callback)\n      throws ApiException {\n    return new CoreV1Api(client)\n        .readNamespacedPodAsync(name, namespace, pretty, exact, export, callback);\n  }\n  private final CallFactory<V1Pod> READ_POD =\n      (requestParams, usage, cont, callback) ->\n          wrap(readPodAsync(usage, requestParams.name, requestParams.namespace, callback));\n  /**\n   * Asynchronous step for reading pod.\n   *\n   * @param name Name\n   * @param namespace Namespace\n   * @param responseStep Response step for when call completes\n   * @return Asynchronous step\n   */\n  public Step readPodAsync(String name, String namespace, ResponseStep<V1Pod> responseStep) {\n    return createRequestAsync(\n        responseStep, new RequestParams(\"readPod\", namespace, name, null), READ_POD);\n  }\n  private com.squareup.okhttp.Call createPodAsync(\n      ApiClient client, String namespace, V1Pod body, ApiCallback<V1Pod> callback)\n      throws ApiException {\n    return new CoreV1Api(client).createNamespacedPodAsync(namespace, body, pretty, callback);\n  }\n  private final CallFactory<V1Pod> CREATE_POD =\n      (requestParams, usage, cont, callback) ->\n          wrap(\n              createPodAsync(usage, requestParams.namespace, (V1Pod) requestParams.body, callback));\n  /**\n   * Asynchronous step for creating pod.\n   *\n   * @param namespace Namespace\n   * @param body Body\n   * @param responseStep Response step for when call completes\n   * @return Asynchronous step\n   */\n  public Step createPodAsync(String namespace, V1Pod body, ResponseStep<V1Pod> responseStep) {\n    return createRequestAsync(\n        responseStep, new RequestParams(\"createPod\", namespace, null, body), CREATE_POD);\n  }\n  private com.squareup.okhttp.Call deletePodAsync(\n      ApiClient client,\n      String name,\n      String namespace,\n      V1DeleteOptions deleteOptions,\n      ApiCallback<V1Status> callback)\n      throws ApiException {\n    return new CoreV1Api(client)\n        .deleteNamespacedPodAsync(\n            name,\n            namespace,\n            deleteOptions,\n            pretty,\n            gracePeriodSeconds,\n            orphanDependents,\n            propagationPolicy,\n            callback);\n  }\n  private final CallFactory<V1Status> DELETE_POD =\n      (requestParams, usage, cont, callback) ->\n          wrap(\n              deletePodAsync(\n                  usage,\n                  requestParams.name,\n                  requestParams.namespace,\n                  (V1DeleteOptions) requestParams.body,\n                  callback));\n  /**\n   * Asynchronous step for deleting pod.\n   *\n   * @param name Name\n   * @param namespace Namespace\n   * @param deleteOptions Delete options\n   * @param responseStep Response step for when call completes\n   * @return Asynchronous step\n   */\n  public Step deletePodAsync(\n      String name,\n      String namespace,\n      V1DeleteOptions deleteOptions,\n      ResponseStep<V1Status> responseStep) {\n    return createRequestAsync(\n        responseStep, new RequestParams(\"deletePod\", namespace, name, deleteOptions), DELETE_POD);\n  }\n  private com.squareup.okhttp.Call patchPodAsync(\n      ApiClient client, String name, String namespace, Object patch, ApiCallback<V1Pod> callback)\n      throws ApiException {\n    return new CoreV1Api(client).patchNamespacedPodAsync(name, namespace, patch, pretty, callback);\n  }\n  private final CallFactory<V1Pod> PATCH_POD =\n      (requestParams, usage, cont, callback) ->\n          wrap(\n              patchPodAsync(\n                  usage,\n                  requestParams.name,\n                  requestParams.namespace,\n                  requestParams.body,\n                  callback));\n  /**\n   * Asynchronous step for patching a pod.\n   *\n   * @param name Name\n   * @param namespace Namespace\n   * @param patchBody instructions on what to patch\n   * @param responseStep Response step for when call completes\n   * @return Asynchronous step\n   */\n  public Step patchPodAsync(\n      String name, String namespace, JsonPatch patchBody, ResponseStep<V1Pod> responseStep) {\n    return createRequestAsync(\n        responseStep,\n        new RequestParams(\"patchPod\", namespace, name, PatchUtils.toKubernetesPatch(patchBody)),\n        PATCH_POD);\n  }\n  private com.squareup.okhttp.Call deleteCollectionPodAsync(\n      ApiClient client, String namespace, String cont, ApiCallback<V1Status> callback)\n      throws ApiException {\n    return new CoreV1Api(client)\n        .deleteCollectionNamespacedPodAsync(\n            namespace,\n            pretty,\n            cont,\n            fieldSelector,\n            includeUninitialized,\n            labelSelector,\n            limit,\n            resourceVersion,\n            timeoutSeconds,\n            watch,\n            callback);\n  }\n  private final CallFactory<V1Status> DELETECOLLECTION_POD =\n      (requestParams, usage, cont, callback) ->\n          wrap(deleteCollectionPodAsync(usage, requestParams.namespace, cont, callback));\n  /**\n   * Asynchronous step for deleting collection of pods.\n   *\n   * @param namespace Namespace\n   * @param responseStep Response step for when call completes\n   * @return Asynchronous step\n   */\n  public Step deleteCollectionPodAsync(String namespace, ResponseStep<V1Status> responseStep) {\n    return createRequestAsync(\n        responseStep,\n        new RequestParams(\"deleteCollection\", namespace, null, null),\n        DELETECOLLECTION_POD);\n  }\n  /* Jobs */\n  private com.squareup.okhttp.Call createJobAsync(\n      ApiClient client, String namespace, V1Job body, ApiCallback<V1Job> callback)\n      throws ApiException {\n    return new BatchV1Api(client).createNamespacedJobAsync(namespace, body, pretty, callback);\n  }\n  private final CallFactory<V1Job> CREATE_JOB =\n      (requestParams, usage, cont, callback) ->\n          wrap(\n              createJobAsync(usage, requestParams.namespace, (V1Job) requestParams.body, callback));\n  /**\n   * Asynchronous step for creating job.\n   *\n   * @param namespace Namespace\n   * @param body Body\n   * @param responseStep Response step for when call completes\n   * @return Asynchronous step\n   */\n  public Step createJobAsync(String namespace, V1Job body, ResponseStep<V1Job> responseStep) {\n    return createRequestAsync(\n        responseStep, new RequestParams(\"createJob\", namespace, null, body), CREATE_JOB);\n  }\n  private final CallFactory<V1Job> READ_JOB =\n      (requestParams, usage, cont, callback) ->\n          wrap(readJobAsync(usage, requestParams.name, requestParams.namespace, callback));\n  private com.squareup.okhttp.Call readJobAsync(\n      ApiClient client, String name, String namespace, ApiCallback<V1Job> callback)\n      throws ApiException {\n    return new BatchV1Api(client)\n        .readNamespacedJobAsync(name, namespace, pretty, exact, export, callback);\n  }\n  /**\n   * Asynchronous step for reading job.\n   *\n   * @param name Name\n   * @param namespace Namespace\n   * @param responseStep Response step for when call completes\n   * @return Asynchronous step\n   */\n  public Step readJobAsync(String name, String namespace, ResponseStep<V1Job> responseStep) {\n    return createRequestAsync(\n        responseStep, new RequestParams(\"readJob\", namespace, name, null), READ_JOB);\n  }\n  private com.squareup.okhttp.Call deleteJobAsync(\n      ApiClient client,\n      String name,\n      String namespace,\n      V1DeleteOptions body,\n      ApiCallback<V1Status> callback)\n      throws ApiException {\n    return new BatchV1Api(client)\n        .deleteNamespacedJobAsync(\n            name,\n            namespace,\n            body,\n            pretty,\n            gracePeriodSeconds,\n            orphanDependents,\n            propagationPolicy,\n            callback);\n  }\n  private final CallFactory<V1Status> DELETE_JOB =\n      (requestParams, usage, cont, callback) ->\n          wrap(\n              deleteJobAsync(\n                  usage,\n                  requestParams.name,\n                  requestParams.namespace,\n                  (V1DeleteOptions) requestParams.body,\n                  callback));\n  /**\n   * Asynchronous step for deleting job.\n   *\n   * @param name Name\n   * @param namespace Namespace\n   * @param deleteOptions Delete options\n   * @param responseStep Response step for when call completes\n   * @return Asynchronous step\n   */\n<fim_suffix>  public Step deleteJobAsync(\n      String name,\n      String namespace,\n      V1DeleteOptions deleteOptions,\n      ResponseStep<V1Status> responseStep) {\n    return createRequestAsync(\n        responseStep, new RequestParams(\"deleteJob\", namespace, name, deleteOptions), DELETE_JOB);\n  }<fim_middle>// function below has no smell\n"}