{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jclouds.rackspace.cloudloadbalancers.v1.features;\n\nimport javax.inject.Named;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.DELETE;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.PUT;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport org.jclouds.Fallbacks.NullOnNotFoundOr404;\nimport org.jclouds.Fallbacks.VoidOnNotFoundOr404;\nimport org.jclouds.openstack.keystone.auth.filters.AuthenticateRequest;\nimport org.jclouds.rackspace.cloudloadbalancers.v1.domain.SessionPersistence;\nimport org.jclouds.rackspace.cloudloadbalancers.v1.functions.ParseSessionPersistence;\nimport org.jclouds.rest.annotations.Fallback;\nimport org.jclouds.rest.annotations.Payload;\nimport org.jclouds.rest.annotations.PayloadParam;\nimport org.jclouds.rest.annotations.RequestFilters;\nimport org.jclouds.rest.annotations.ResponseParser;\n\n\n/**\n * Session persistence is a feature of the load balancing service that forces multiple requests from clients to be \n * directed to the same node. This is common with many web applications that do not inherently share application \n * state between back-end servers. Two session persistence modes are available, HTTP Cookie and Source IP.\n */\n<fim_suffix>@RequestFilters(AuthenticateRequest.class)\npublic interface SessionPersistenceApi {\n   /**\n    * Get the current session persistence.\n    * \n    * @see SessionPersistence\n    */\n   @Named(\"sessionpersistence:get\")\n   @GET\n   @Consumes(MediaType.APPLICATION_JSON)\n   @ResponseParser(ParseSessionPersistence.class)\n   @Fallback(NullOnNotFoundOr404.class)\n   @Path(\"/sessionpersistence\")\n   SessionPersistence get();\n   \n   /**\n    * Create session persistence.\n    * \n    * @see SessionPersistence\n    */\n   @Named(\"sessionpersistence:create\")\n   @PUT\n   @Produces(MediaType.APPLICATION_JSON)\n   @Consumes(MediaType.APPLICATION_JSON)\n   @Fallback(VoidOnNotFoundOr404.class)\n   @Payload(\"%7B\\\"sessionPersistence\\\":%7B\\\"persistenceType\\\":\\\"{sessionPersistence}\\\"%7D%7D\")\n   @Path(\"/sessionpersistence\")\n   void create(@PayloadParam(\"sessionPersistence\") SessionPersistence sessionPersistence);\n   \n   /**\n    * Delete session persistence.\n    * \n    * @see SessionPersistence\n    */\n   @Named(\"sessionpersistence:delete\")\n   @DELETE\n   @Consumes(MediaType.APPLICATION_JSON)\n   @Fallback(VoidOnNotFoundOr404.class)\n   @Path(\"/sessionpersistence\")\n   void delete();\n}<fim_middle>// class below has no smell\n"}