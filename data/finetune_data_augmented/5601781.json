{"text": "<fim_prefix>/*\n *\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\npackage org.apache.royale.compiler.internal.tree.mxml;\n\nimport org.apache.royale.compiler.constants.IASLanguageConstants;\nimport org.apache.royale.compiler.internal.tree.as.NodeBase;\nimport org.apache.royale.compiler.mxml.IMXMLTagData;\nimport org.apache.royale.compiler.mxml.IMXMLTextData;\nimport org.apache.royale.compiler.problems.MXMLXMLListMixedContentProblem;\nimport org.apache.royale.compiler.tree.ASTNodeID;\nimport org.apache.royale.compiler.tree.mxml.IMXMLXMLListNode;\n\nimport java.io.StringWriter;\nimport java.util.ArrayList;\n\n/**\n * Implementation of the {@code IMXMLXMLListNode} interface.\n */\nclass MXMLXMLListNode extends MXMLInstanceNode implements IMXMLXMLListNode\n{\n    /**\n     * Constructor\n     * \n     * @param parent The parent node of this node, or <code>null</code> if there\n     * is no parent.\n     */\n    MXMLXMLListNode(NodeBase parent)\n    {\n        super(parent);\n    }\n\n    /**\n     * Collect the children of the XMLList node - after we process them in\n     * initializationComplete, we null out this collection so we don't pin the\n     * MXMLTagData's in memory.\n     */\n    private ArrayList<IMXMLTagData> childTags = new ArrayList<IMXMLTagData>();\n\n    private String xmlString;\n\n    @Override\n    public ASTNodeID getNodeID()\n    {\n        return ASTNodeID.MXMLXMLListID;\n    }\n\n<fim_suffix>    @Override\n    public String getName()\n    {\n        return IASLanguageConstants.XMLList;\n    }\n\n    @Override\n    public String getXMLString()\n    {\n        return xmlString;\n    }\n\n    @Override\n    protected void processChildTag(MXMLTreeBuilder builder, IMXMLTagData tag,\n                                   IMXMLTagData childTag,\n                                   MXMLNodeInfo info)\n    {\n        childTags.add(childTag);\n    }\n\n    @Override\n    protected void processChildNonWhitespaceUnit(MXMLTreeBuilder builder, IMXMLTagData tag,\n                                      IMXMLTextData text,\n                                      MXMLNodeInfo info)\n    {\n        builder.addProblem(new MXMLXMLListMixedContentProblem(tag));\n    }\n\n    /**\n     * This method gives subclasses a chance to do final processing after\n     * considering each attribute and content unit.\n     * <p>\n     * The base class version calls <code>adjustOffset</code> to translate the\n     * node start and end offset from local to absolute offsets.\n     */\n    @Override\n    protected void initializationComplete(MXMLTreeBuilder builder,\n                                          IMXMLTagData tag,\n                                          MXMLNodeInfo info)\n    {\n\n        analyzeXML(builder);\n\n        super.initializationComplete(builder, tag, info);\n\n        // don't pin the MXMLTagDatas\n        childTags = null;\n    }\n\n    private void analyzeXML(MXMLTreeBuilder builder)\n    {\n        StringWriter sw = new StringWriter();\n        for (IMXMLTagData tag : childTags)\n        {\n            new XMLBuilder(this, tag, tag.getCompositePrefixMap(), builder).processNode(tag, sw);\n        }\n        xmlString = sw.toString();\n    }\n}<fim_middle>// function below has no smell\n"}