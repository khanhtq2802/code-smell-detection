{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.lens.cube.metadata;\n\nimport java.text.DateFormat;\nimport java.util.*;\n\nimport org.apache.lens.server.api.error.LensException;\n\nimport com.google.common.collect.ImmutableMap;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@EqualsAndHashCode\npublic class FactPartition implements Comparable<FactPartition> {\n  @Getter\n  private final String partCol;\n  @Getter\n  private final Date partSpec;\n  @Getter\n  private final Set<String> storageTables = new LinkedHashSet<String>();\n  @Getter\n  private final UpdatePeriod period;\n  @Getter\n  @Setter\n  private FactPartition containingPart;\n  @Getter\n  private final DateFormat partFormat;\n  @Getter\n  @Setter\n  private boolean found = false;\n\n  public FactPartition(String partCol, Date partSpec, UpdatePeriod period,\n    FactPartition containingPart, DateFormat partFormat) {\n    this.partCol = partCol;\n    this.partSpec = partSpec;\n    this.period = period;\n    this.containingPart = containingPart;\n    this.partFormat = partFormat;\n  }\n\n  public FactPartition(String partCol, Date partSpec, UpdatePeriod period, FactPartition containingPart,\n    DateFormat partFormat, Set<String> storageTables) {\n    this(partCol, partSpec, period, containingPart, partFormat);\n    if (storageTables != null) {\n      this.storageTables.addAll(storageTables);\n    }\n  }\n\n  /**\n   *  Partition should not be used a indicative of the class itself.\n   *  New Fact partition created includes more final partitions with that creation.\n   * @return\n   */\n\n  public FactPartition withoutContaining() {\n    return new FactPartition(this.getPartCol(), this.getPartSpec(), this.getPeriod(), null, this\n      .getPartFormat(), this.getStorageTables());\n  }\n  public FactPartition(String partCol, TimePartition timePartition) {\n    this(partCol, timePartition, null, null);\n  }\n\n  public FactPartition(String partCol, TimePartition timePartition, FactPartition containingPart, Set<String>\n    storageTables) {\n    this(partCol, timePartition.getDate(), timePartition.getUpdatePeriod(), containingPart, null, storageTables);\n  }\n\n  public boolean hasContainingPart() {\n    return containingPart != null;\n  }\n\n  public String getFormattedPartSpec() {\n    if (partFormat == null) {\n      return getPartString();\n    } else {\n      return partFormat.format(partSpec);\n    }\n  }\n\n  public FactPartition previous() throws LensException {\n    return new FactPartition(getPartCol(), getTimePartition().previous(), getContainingPart(), getStorageTables());\n\n  }\n\n  public FactPartition next() throws LensException {\n    return new FactPartition(getPartCol(), getTimePartition().next(), getContainingPart(), getStorageTables());\n\n  }\n\n  public String getPartString() {\n    return period.format(partSpec);\n  }\n\n  public String getFormattedFilter(String tableName) {\n    return getFormattedFilter(partCol, tableName);\n  }\n\n  public String getFormattedFilter(String partCol, String tableName) {\n    StringBuilder builder = new StringBuilder();\n    if (containingPart != null) {\n      builder.append(containingPart.getFormattedFilter(tableName));\n      builder.append(\" AND \");\n    }\n    if (tableName != null) {\n      builder.append(tableName);\n      builder.append(\".\");\n    }\n    builder.append(partCol);\n    builder.append(\" = '\").append(getFormattedPartSpec()).append(\"'\");\n    return builder.toString();\n  }\n\n  public String getFilter() {\n    StringBuilder builder = new StringBuilder();\n    if (containingPart != null) {\n      builder.append(containingPart.getFilter());\n      builder.append(\" AND \");\n    }\n    builder.append(partCol);\n    builder.append(\" = '\").append(getPartString()).append(\"'\");\n    return builder.toString();\n  }\n\n  @Override\n  public String toString() {\n    return getFilter();\n  }\n\n<fim_suffix>  public int compareTo(FactPartition o) {\n    int colComp = this.partCol.compareTo(o.partCol);\n    if (colComp == 0) {\n      int partComp = 0;\n      if (this.partSpec != null) {\n        if (o.partSpec == null) {\n          partComp = 1;\n        } else {\n          partComp = this.partSpec.compareTo(o.partSpec);\n        }\n      } else {\n        if (o.partSpec != null) {\n          partComp = -1;\n        } else {\n          partComp = 0;\n        }\n      }\n      if (partComp == 0) {\n        int upComp = 0;\n        if (this.period != null && o.period != null) {\n          upComp = this.period.compareTo(o.period);\n        } else if (this.period == null && o.period == null) {\n          upComp = 0;\n        } else if (this.period == null) {\n          upComp = -1;\n        } else {\n          upComp = 1;\n        }\n        if (upComp == 0) {\n          if (this.containingPart != null) {\n            if (o.containingPart == null) {\n              return 1;\n            }\n            return this.containingPart.compareTo(o.containingPart);\n          } else {\n            if (o.containingPart != null) {\n              return -1;\n            } else {\n              return 0;\n            }\n          }\n        }\n        return upComp;\n      }\n      return partComp;\n    }\n    return colComp;\n  }\n\n  public TimePartition getTimePartition() throws LensException {\n    return TimePartition.of(getPeriod(), getPartSpec());\n  }\n\n  public double getAllTableWeights(ImmutableMap<String, Double> tableWeights) {\n    double weight = 0;\n    Map<String, Double> tblWithoutDBWeghts = new HashMap<>();\n    for (Map.Entry<String, Double> entry : tableWeights.entrySet()) {\n      tblWithoutDBWeghts.put(entry.getKey().substring(entry.getKey().indexOf('.') + 1), entry.getValue());\n    }\n    for (String tblName : getStorageTables()) {\n      Double tblWeight = tblWithoutDBWeghts.get(tblName);\n      if (tblWeight != null) {\n        weight += tblWeight;\n      }\n    }\n    return weight;\n  }\n}<fim_middle>// function below is long method\n"}