{"text": "<fim_prefix>/*\n * Copyright 2002-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage sample;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.server.reactive.HttpHandler;\nimport org.springframework.http.server.reactive.ReactorHttpHandlerAdapter;\nimport org.springframework.security.authentication.ReactiveAuthenticationManager;\nimport org.springframework.security.authentication.UserDetailsAuthenticationManager;\nimport org.springframework.security.config.web.server.AuthorizeRequestBuilder;\nimport org.springframework.security.config.web.server.HttpSecurity;\nimport org.springframework.security.web.reactive.result.method.AuthenticationPrincipalArgumentResolver;\nimport org.springframework.web.reactive.DispatcherHandler;\nimport org.springframework.web.reactive.config.EnableWebFlux;\nimport org.springframework.web.reactive.config.WebFluxConfigurer;\nimport org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;\nimport org.springframework.web.server.WebFilter;\nimport reactor.ipc.netty.NettyContext;\nimport reactor.ipc.netty.http.server.HttpServer;\n\nimport static org.springframework.security.config.web.server.HttpSecurity.http;\n\n/**\n * @author Rob Winch\n */\n@Configuration\n@EnableWebFlux\n@ComponentScan\npublic class Application implements WebFluxConfigurer {\n\t@Value(\"${server.port:8080}\")\n\tprivate int port = 8080;\n\n<fim_suffix>\tpublic static void main(String[] args) throws Exception {\n\t\ttry(AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Application.class)) {\n\t\t\tcontext.getBean(NettyContext.class).onClose().block();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {\n\t\tconfigurer.addCustomResolver(authenticationPrincipalArgumentResolver());\n\t}\n\n\t@Bean\n\tpublic NettyContext nettyContext(ApplicationContext context) {\n\t\tHttpHandler handler = DispatcherHandler.toHttpHandler(context);\n\t\tReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(handler);\n\t\tHttpServer httpServer = HttpServer.create(\"localhost\", port);\n\t\treturn httpServer.newHandler(adapter).block();\n\t}\n\n\t@Bean\n\tpublic AuthenticationPrincipalArgumentResolver authenticationPrincipalArgumentResolver() {\n\t\treturn new AuthenticationPrincipalArgumentResolver();\n\t}\n\n\t@Bean\n\tWebFilter springSecurityFilterChain(ReactiveAuthenticationManager manager) throws Exception {\n\t\tHttpSecurity http = http();\n\t\t// FIXME use BeanPostProcessor to set the manager\n\t\thttp.authenticationManager(manager);\n\t\thttp.httpBasic();\n\n\t\tAuthorizeRequestBuilder authorize = http.authorizeRequests();\n\t\tauthorize.antMatchers(\"/admin/**\").hasRole(\"ADMIN\");\n\t\tauthorize.anyExchange().authenticated();\n\t\treturn http.build();\n\t}\n\n\t@Bean\n\tpublic ReactiveAuthenticationManager authenticationManager(UserRepositoryUserDetailsRepository udr) {\n\t\treturn new UserDetailsAuthenticationManager(udr);\n\t}\n}<fim_middle>// function below has no smell\n"}