{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.syncope.core.persistence.jpa.dao;\n\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.TypedQuery;\nimport org.apache.syncope.common.lib.types.AnyTypeKind;\nimport org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\nimport org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\nimport org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\nimport org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\nimport org.apache.syncope.core.persistence.api.entity.AnyUtils;\nimport org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\nimport org.apache.syncope.core.persistence.api.entity.Implementation;\nimport org.apache.syncope.core.persistence.api.entity.PlainAttr;\nimport org.apache.syncope.core.persistence.api.entity.PlainSchema;\nimport org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Lazy;\n\npublic class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements PlainSchemaDAO {\n\n    @Autowired\n    private AnyUtilsFactory anyUtilsFactory;\n\n    @Autowired\n    private PlainAttrDAO plainAttrDAO;\n\n    @Autowired\n    @Lazy\n    private ExternalResourceDAO resourceDAO;\n\n    @Override\n    public PlainSchema find(final String key) {\n        return entityManager().find(JPAPlainSchema.class, key);\n    }\n\n    @Override\n    public List<PlainSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> anyTypeClasses) {\n        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n                append(JPAPlainSchema.class.getSimpleName()).\n                append(\" e WHERE \");\n        anyTypeClasses.forEach(anyTypeClass -> {\n            queryString.append(\"e.anyTypeClass.id='\").append(anyTypeClass.getKey()).append(\"' OR \");\n        });\n\n        TypedQuery<PlainSchema> query = entityManager().createQuery(\n                queryString.substring(0, queryString.length() - 4), PlainSchema.class);\n\n        return query.getResultList();\n    }\n\n    @Override\n    public List<PlainSchema> findByValidator(final Implementation validator) {\n        TypedQuery<PlainSchema> query = entityManager().createQuery(\n                \"SELECT e FROM \" + JPAPlainSchema.class.getSimpleName()\n                + \" e WHERE e.validator=:validator\", PlainSchema.class);\n        query.setParameter(\"validator\", validator);\n\n        return query.getResultList();\n    }\n\n<fim_suffix>    @Override\n    public List<PlainSchema> findByKeyword(final String keyword) {\n        TypedQuery<PlainSchema> query = entityManager().createQuery(\n                \"SELECT e FROM \" + JPAPlainSchema.class.getSimpleName() + \" e\"\n                + \" WHERE e.id LIKE :keyword\", PlainSchema.class);\n        query.setParameter(\"keyword\", keyword);\n        return query.getResultList();\n    }\n\n    @Override\n    public List<PlainSchema> findAll() {\n        TypedQuery<PlainSchema> query = entityManager().createQuery(\n                \"SELECT e FROM \" + JPAPlainSchema.class.getSimpleName() + \" e\", PlainSchema.class);\n        return query.getResultList();\n    }\n\n    @Override\n    public <T extends PlainAttr<?>> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {\n        TypedQuery<T> query = entityManager().createQuery(\n                \"SELECT e FROM \" + JPAPlainAttrDAO.getEntityReference(reference).getSimpleName()\n                + \" e WHERE e.schema=:schema\", reference);\n        query.setParameter(\"schema\", schema);\n\n        return query.getResultList();\n    }\n\n    @Override\n    public PlainSchema save(final PlainSchema schema) {\n        return entityManager().merge(schema);\n    }\n\n    protected void deleteAttrs(final PlainSchema schema) {\n        for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n            AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n\n            findAttrs(schema, anyUtils.plainAttrClass()).forEach(attr -> {\n                plainAttrDAO.delete(attr);\n            });\n        }\n    }\n\n    @Override\n    public void delete(final String key) {\n        PlainSchema schema = find(key);\n        if (schema == null) {\n            return;\n        }\n\n        schema.getLabels().forEach(label -> label.setSchema(null));\n\n        deleteAttrs(schema);\n\n        resourceDAO.deleteMapping(key);\n\n        if (schema.getAnyTypeClass() != null) {\n            schema.getAnyTypeClass().getPlainSchemas().remove(schema);\n        }\n\n        entityManager().remove(schema);\n    }\n}<fim_middle>// function below has no smell\n"}