{"text": "<fim_prefix>  private final BooleanValueStream baseExpr;\n  private final BooleanValue filterExpr;\n  public static final String name = FilterFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public BooleanStreamFilterFunction(BooleanValueStream baseExpr, BooleanValue filterExpr) throws SolrException {\n    this.baseExpr = baseExpr;\n    this.filterExpr = filterExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,baseExpr,filterExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,baseExpr,filterExpr);\n  }\n  @Override\n  public void streamBooleans(BooleanConsumer cons) {\n    if (filterExpr.getBoolean() && filterExpr.exists()) {\n      baseExpr.streamBooleans(cons);\n    }\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\nclass BooleanFilterFunction extends AbstractBooleanValue {\n  private final BooleanValue baseExpr;\n  private final BooleanValue filterExpr;\n  public static final String name = FilterFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public BooleanFilterFunction(BooleanValue baseExpr, BooleanValue filterExpr) throws SolrException {\n    this.baseExpr = baseExpr;\n    this.filterExpr = filterExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,baseExpr,filterExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,baseExpr,filterExpr);\n  }\n  boolean exists = false;\n  @Override\n  public boolean getBoolean() {\n    boolean value = baseExpr.getBoolean();\n    exists = baseExpr.exists() && filterExpr.getBoolean() && filterExpr.exists();\n    return value;\n  }\n  @Override\n  public boolean exists() {\n    return exists;\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\nclass IntStreamFilterFunction extends AbstractIntValueStream {\n  private final IntValueStream baseExpr;\n  private final BooleanValue filterExpr;\n  public static final String name = FilterFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public IntStreamFilterFunction(IntValueStream baseExpr, BooleanValue filterExpr) throws SolrException {\n    this.baseExpr = baseExpr;\n    this.filterExpr = filterExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,baseExpr,filterExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,baseExpr,filterExpr);\n  }\n  @Override\n  public void streamInts(IntConsumer cons) {\n    if (filterExpr.getBoolean() && filterExpr.exists()) {\n      baseExpr.streamInts(cons);\n    }\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\nclass IntFilterFunction extends AbstractIntValue {\n  private final IntValue baseExpr;\n  private final BooleanValue filterExpr;\n  public static final String name = FilterFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public IntFilterFunction(IntValue baseExpr, BooleanValue filterExpr) throws SolrException {\n    this.baseExpr = baseExpr;\n    this.filterExpr = filterExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,baseExpr,filterExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,baseExpr,filterExpr);\n  }\n  boolean exists = false;\n  @Override\n  public int getInt() {\n    int value = baseExpr.getInt();\n    exists = baseExpr.exists() && filterExpr.getBoolean() && filterExpr.exists();\n    return value;\n  }\n  @Override\n  public boolean exists() {\n    return exists;\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\nclass LongStreamFilterFunction extends AbstractLongValueStream {\n  private final LongValueStream baseExpr;\n  private final BooleanValue filterExpr;\n  public static final String name = FilterFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public LongStreamFilterFunction(LongValueStream baseExpr, BooleanValue filterExpr) throws SolrException {\n    this.baseExpr = baseExpr;\n    this.filterExpr = filterExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,baseExpr,filterExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,baseExpr,filterExpr);\n  }\n  @Override\n  public void streamLongs(LongConsumer cons) {\n    if (filterExpr.getBoolean() && filterExpr.exists()) {\n      baseExpr.streamLongs(cons);\n    }\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\nclass LongFilterFunction extends AbstractLongValue {\n  private final LongValue baseExpr;\n  private final BooleanValue filterExpr;\n  public static final String name = FilterFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public LongFilterFunction(LongValue baseExpr, BooleanValue filterExpr) throws SolrException {\n    this.baseExpr = baseExpr;\n    this.filterExpr = filterExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,baseExpr,filterExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,baseExpr,filterExpr);\n  }\n  boolean exists = false;\n  @Override\n  public long getLong() {\n    long value = baseExpr.getLong();\n    exists = baseExpr.exists() && filterExpr.getBoolean() && filterExpr.exists();\n    return value;\n  }\n  @Override\n  public boolean exists() {\n    return exists;\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\nclass FloatStreamFilterFunction extends AbstractFloatValueStream {\n  private final FloatValueStream baseExpr;\n  private final BooleanValue filterExpr;\n  public static final String name = FilterFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public FloatStreamFilterFunction(FloatValueStream baseExpr, BooleanValue filterExpr) throws SolrException {\n    this.baseExpr = baseExpr;\n    this.filterExpr = filterExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,baseExpr,filterExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,baseExpr,filterExpr);\n  }\n  @Override\n  public void streamFloats(FloatConsumer cons) {\n    if (filterExpr.getBoolean() && filterExpr.exists()) {\n      baseExpr.streamFloats(cons);\n    }\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}\n<fim_suffix>class FloatFilterFunction extends AbstractFloatValue {\n  private final FloatValue baseExpr;\n  private final BooleanValue filterExpr;\n  public static final String name = FilterFunction.name;\n  private final String exprStr;\n  private final ExpressionType funcType;\n  public FloatFilterFunction(FloatValue baseExpr, BooleanValue filterExpr) throws SolrException {\n    this.baseExpr = baseExpr;\n    this.filterExpr = filterExpr;\n    this.exprStr = AnalyticsValueStream.createExpressionString(name,baseExpr,filterExpr);\n    this.funcType = AnalyticsValueStream.determineMappingPhase(exprStr,baseExpr,filterExpr);\n  }\n  boolean exists = false;\n  @Override\n  public float getFloat() {\n    float value = baseExpr.getFloat();\n    exists = baseExpr.exists() && filterExpr.getBoolean() && filterExpr.exists();\n    return value;\n  }\n  @Override\n  public boolean exists() {\n    return exists;\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n  @Override\n  public String getExpressionStr() {\n    return exprStr;\n  }\n  @Override\n  public ExpressionType getExpressionType() {\n    return funcType;\n  }\n}<fim_middle>// class below is data class\n"}