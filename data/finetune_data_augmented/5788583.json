{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.tez.runtime.library.common.shuffle.orderedgrouped;\n\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.hadoop.classification.InterfaceAudience;\nimport org.apache.hadoop.classification.InterfaceStability;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.Writable;\nimport org.apache.hadoop.io.WritableUtils;\n\n/**\n * Shuffle Header information that is sent by the TaskTracker and \n * deciphered by the Fetcher thread of Reduce task\n *\n */\n@InterfaceAudience.Private\n@InterfaceStability.Stable\npublic class ShuffleHeader implements Writable {\n  \n  /** Header info of the shuffle http request/response */\n  public static final String HTTP_HEADER_NAME = \"name\";\n  public static final String DEFAULT_HTTP_HEADER_NAME = \"mapreduce\";\n  public static final String HTTP_HEADER_VERSION = \"version\";\n  public static final String DEFAULT_HTTP_HEADER_VERSION = \"1.0.0\";\n\n  /**\n   * The longest possible length of task attempt id that we will accept.\n   */\n  private static final int MAX_ID_LENGTH = 1000;\n\n  String mapId;\n  long uncompressedLength;\n  long compressedLength;\n  int forReduce;\n  \n  public ShuffleHeader() { }\n  \n  public ShuffleHeader(String mapId, long compressedLength,\n      long uncompressedLength, int forReduce) {\n    this.mapId = mapId;\n    this.compressedLength = compressedLength;\n    this.uncompressedLength = uncompressedLength;\n    this.forReduce = forReduce;\n  }\n  \n  public String getMapId() {\n    return this.mapId;\n  }\n  \n  public int getPartition() {\n    return this.forReduce;\n  }\n  \n  public long getUncompressedLength() {\n    return uncompressedLength;\n  }\n\n  public long getCompressedLength() {\n    return compressedLength;\n  }\n\n  public void readFields(DataInput in) throws IOException {\n    mapId = WritableUtils.readStringSafely(in, MAX_ID_LENGTH);\n    compressedLength = WritableUtils.readVLong(in);\n    uncompressedLength = WritableUtils.readVLong(in);\n    forReduce = WritableUtils.readVInt(in);\n  }\n\n<fim_suffix>  public int writeLength() throws IOException {\n    int length = 0;\n    int mapIdLength = Text.encode(mapId).limit();\n    length += mapIdLength;\n\n    length += WritableUtils.getVIntSize(mapIdLength);\n    length += WritableUtils.getVIntSize(compressedLength);\n    length += WritableUtils.getVIntSize(uncompressedLength);\n    length += WritableUtils.getVIntSize(forReduce);\n\n    return length;\n  }\n  public void write(DataOutput out) throws IOException {\n    Text.writeString(out, mapId);\n    WritableUtils.writeVLong(out, compressedLength);\n    WritableUtils.writeVLong(out, uncompressedLength);\n    WritableUtils.writeVInt(out, forReduce);\n  }\n}<fim_middle>// function below has no smell\n"}