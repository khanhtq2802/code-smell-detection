{"text": "<fim_prefix>            return 0;\n        }\n    }\n    protected void tightMarshalObjectArray2(OpenWireFormat wireFormat, DataStructure[] objects,\n                                            DataOutput dataOut, BooleanStream bs) throws IOException {\n        if (bs.readBoolean()) {\n            dataOut.writeShort(objects.length);\n            for (int i = 0; i < objects.length; i++) {\n                tightMarshalNestedObject2(wireFormat, objects[i], dataOut, bs);\n            }\n        }\n    }\n    protected int tightMarshalConstByteArray1(byte[] data, BooleanStream bs, int i) throws IOException {\n        return i;\n    }\n    protected void tightMarshalConstByteArray2(byte[] data, DataOutput dataOut, BooleanStream bs, int i)\n        throws IOException {\n        dataOut.write(data, 0, i);\n    }\n    protected byte[] tightUnmarshalConstByteArray(DataInput dataIn, BooleanStream bs, int i)\n        throws IOException {\n        byte data[] = new byte[i];\n        dataIn.readFully(data);\n        return data;\n    }\n    protected int tightMarshalByteArray1(byte[] data, BooleanStream bs) throws IOException {\n        bs.writeBoolean(data != null);\n        if (data != null) {\n            return data.length + 4;\n        } else {\n            return 0;\n        }\n    }\n    protected void tightMarshalByteArray2(byte[] data, DataOutput dataOut, BooleanStream bs)\n        throws IOException {\n        if (bs.readBoolean()) {\n            dataOut.writeInt(data.length);\n            dataOut.write(data);\n        }\n    }\n    protected byte[] tightUnmarshalByteArray(DataInput dataIn, BooleanStream bs) throws IOException {\n        byte rc[] = null;\n        if (bs.readBoolean()) {\n            int size = dataIn.readInt();\n            rc = new byte[size];\n            dataIn.readFully(rc);\n        }\n        return rc;\n    }\n    protected int tightMarshalByteSequence1(ByteSequence data, BooleanStream bs) throws IOException {\n        bs.writeBoolean(data != null);\n        if (data != null) {\n            return data.getLength() + 4;\n        } else {\n            return 0;\n        }\n    }\n    protected void tightMarshalByteSequence2(ByteSequence data, DataOutput dataOut, BooleanStream bs)\n        throws IOException {\n        if (bs.readBoolean()) {\n            dataOut.writeInt(data.getLength());\n            dataOut.write(data.getData(), data.getOffset(), data.getLength());\n        }\n    }\n    protected ByteSequence tightUnmarshalByteSequence(DataInput dataIn, BooleanStream bs) throws IOException {\n        ByteSequence rc = null;\n        if (bs.readBoolean()) {\n            int size = dataIn.readInt();\n            byte[] t = new byte[size];\n            dataIn.readFully(t);\n            return new ByteSequence(t, 0, size);\n        }\n        return rc;\n    }\n    //\n    // The loose marshaling logic\n    //\n    public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {\n    }\n    public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {\n    }\n    public void looseMarshalLong(OpenWireFormat wireFormat, long o, DataOutput dataOut) throws IOException {\n        dataOut.writeLong(o);\n    }\n    public long looseUnmarshalLong(OpenWireFormat wireFormat, DataInput dataIn) throws IOException {\n        return dataIn.readLong();\n    }\n    protected DataStructure looseUnmarsalNestedObject(OpenWireFormat wireFormat, DataInput dataIn)\n        throws IOException {\n        return wireFormat.looseUnmarshalNestedObject(dataIn);\n    }\n    protected void looseMarshalNestedObject(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut)\n        throws IOException {\n        wireFormat.looseMarshalNestedObject(o, dataOut);\n    }\n    protected DataStructure looseUnmarsalCachedObject(OpenWireFormat wireFormat, DataInput dataIn)\n        throws IOException {\n        if (wireFormat.isCacheEnabled()) {\n            if (dataIn.readBoolean()) {\n                short index = dataIn.readShort();\n                DataStructure object = wireFormat.looseUnmarshalNestedObject(dataIn);\n                wireFormat.setInUnmarshallCache(index, object);\n                return object;\n            } else {\n                short index = dataIn.readShort();\n                return wireFormat.getFromUnmarshallCache(index);\n            }\n        } else {\n            return wireFormat.looseUnmarshalNestedObject(dataIn);\n        }\n    }\n    protected void looseMarshalCachedObject(OpenWireFormat wireFormat, DataStructure o, DataOutput dataOut)\n        throws IOException {\n        if (wireFormat.isCacheEnabled()) {\n            Short index = wireFormat.getMarshallCacheIndex(o);\n            dataOut.writeBoolean(index == null);\n            if (index == null) {\n                index = wireFormat.addToMarshallCache(o);\n                dataOut.writeShort(index.shortValue());\n                wireFormat.looseMarshalNestedObject(o, dataOut);\n            } else {\n                dataOut.writeShort(index.shortValue());\n            }\n        } else {\n            wireFormat.looseMarshalNestedObject(o, dataOut);\n        }\n    }\n    protected Throwable looseUnmarsalThrowable(OpenWireFormat wireFormat, DataInput dataIn)\n        throws IOException {\n        if (dataIn.readBoolean()) {\n            String clazz = looseUnmarshalString(dataIn);\n            String message = looseUnmarshalString(dataIn);\n            Throwable o = createThrowable(clazz, message);\n            if (wireFormat.isStackTraceEnabled()) {\n                if (STACK_TRACE_ELEMENT_CONSTRUCTOR != null) {\n                    StackTraceElement ss[] = new StackTraceElement[dataIn.readShort()];\n                    for (int i = 0; i < ss.length; i++) {\n                        try {\n                            ss[i] = (StackTraceElement)STACK_TRACE_ELEMENT_CONSTRUCTOR\n                                .newInstance(new Object[] {looseUnmarshalString(dataIn),\n                                                           looseUnmarshalString(dataIn),\n                                                           looseUnmarshalString(dataIn),\n                                                           Integer.valueOf(dataIn.readInt())});\n                        } catch (IOException e) {\n                            throw e;\n                        } catch (Throwable e) {\n                        }\n                    }\n                    o.setStackTrace(ss);\n                } else {\n                    short size = dataIn.readShort();\n                    for (int i = 0; i < size; i++) {\n                        looseUnmarshalString(dataIn);\n                        looseUnmarshalString(dataIn);\n                        looseUnmarshalString(dataIn);\n                        dataIn.readInt();\n                    }\n                }\n                o.initCause(looseUnmarsalThrowable(wireFormat, dataIn));\n            }\n            return o;\n        } else {\n            return null;\n        }\n    }\n    protected void looseMarshalThrowable(OpenWireFormat wireFormat, Throwable o, DataOutput dataOut)\n        throws IOException {\n        dataOut.writeBoolean(o != null);\n        if (o != null) {\n            looseMarshalString(o.getClass().getName(), dataOut);\n            looseMarshalString(o.getMessage(), dataOut);\n            if (wireFormat.isStackTraceEnabled()) {\n                StackTraceElement[] stackTrace = o.getStackTrace();\n                dataOut.writeShort(stackTrace.length);\n                for (int i = 0; i < stackTrace.length; i++) {\n                    StackTraceElement element = stackTrace[i];\n                    looseMarshalString(element.getClassName(), dataOut);\n                    looseMarshalString(element.getMethodName(), dataOut);\n                    looseMarshalString(element.getFileName(), dataOut);\n                    dataOut.writeInt(element.getLineNumber());\n                }\n                looseMarshalThrowable(wireFormat, o.getCause(), dataOut);\n            }\n        }\n    }\n    protected String looseUnmarshalString(DataInput dataIn) throws IOException {\n        if (dataIn.readBoolean()) {\n            return dataIn.readUTF();\n        } else {\n            return null;\n        }\n    }\n    protected void looseMarshalString(String value, DataOutput dataOut) throws IOException {\n        dataOut.writeBoolean(value != null);\n        if (value != null) {\n            dataOut.writeUTF(value);\n        }\n    }\n    protected void looseMarshalObjectArray(OpenWireFormat wireFormat, DataStructure[] objects,\n                                           DataOutput dataOut) throws IOException {\n        dataOut.writeBoolean(objects != null);\n        if (objects != null) {\n            dataOut.writeShort(objects.length);\n            for (int i = 0; i < objects.length; i++) {\n                looseMarshalNestedObject(wireFormat, objects[i], dataOut);\n            }\n        }\n    }\n    protected void looseMarshalConstByteArray(OpenWireFormat wireFormat, byte[] data, DataOutput dataOut,\n                                              int i) throws IOException {\n        dataOut.write(data, 0, i);\n    }\n    protected byte[] looseUnmarshalConstByteArray(DataInput dataIn, int i) throws IOException {\n        byte data[] = new byte[i];\n        dataIn.readFully(data);\n        return data;\n    }\n<fim_suffix>    protected void looseMarshalByteArray(OpenWireFormat wireFormat, byte[] data, DataOutput dataOut)\n        throws IOException {\n        dataOut.writeBoolean(data != null);\n        if (data != null) {\n            dataOut.writeInt(data.length);\n            dataOut.write(data);\n        }\n    }<fim_middle>// function below has no smell\n"}