{"text": "<fim_prefix>     * @param path\n     *        the path string\n     * @param query\n     *        the query string\n     * @param fragment\n     *        the fragment string\n     * @throws URIException\n     *         If {@link #checkValid()} fails\n     * @see #getDefaultProtocolCharset\n     */\n    public HttpURL(final String host, final String path, final String query, final String fragment)\n        throws URIException {\n        this(null, null, host, -1, path, query, fragment);\n    }\n    /**\n     * Construct a HTTP URL from given components.\n     *\n     * Note: The <code>userinfo</code> format is normally\n     * <code>&lt;username&gt;:&lt;password&gt;</code> where username and\n     * password must both be URL escaped.\n     *\n     * @param userinfo\n     *        the userinfo string whose parts are URL escaped\n     * @param host\n     *        the host string\n     * @param path\n     *        the path string\n     * @param query\n     *        the query string\n     * @param fragment\n     *        the fragment string\n     * @throws URIException\n     *         If {@link #checkValid()} fails\n     * @see #getDefaultProtocolCharset\n     */\n    public HttpURL(\n        final String userinfo,\n        final String host,\n        final String path,\n        final String query,\n        final String fragment) throws URIException {\n        this(userinfo, host, -1, path, query, fragment);\n    }\n    /**\n     * Construct a HTTP URL from given components.\n     *\n     * Note: The <code>userinfo</code> format is normally\n     * <code>&lt;username&gt;:&lt;password&gt;</code> where username and\n     * password must both be URL escaped.\n     *\n     * @param userinfo\n     *        the userinfo string whose parts are URL escaped\n     * @param host\n     *        the host string\n     * @param port\n     *        the port number\n     * @param path\n     *        the path string\n     * @throws URIException\n     *         If {@link #checkValid()} fails\n     * @see #getDefaultProtocolCharset\n     */\n    public HttpURL(final String userinfo, final String host, final int port, final String path) throws URIException {\n        this(userinfo, host, port, path, null, null);\n    }\n    /**\n     * Construct a HTTP URL from given components.\n     *\n     * Note: The <code>userinfo</code> format is normally\n     * <code>&lt;username&gt;:&lt;password&gt;</code> where username and\n     * password must both be URL escaped.\n     *\n     * @param userinfo\n     *        the userinfo string whose parts are URL escaped\n     * @param host\n     *        the host string\n     * @param port\n     *        the port number\n     * @param path\n     *        the path string\n     * @param query\n     *        the query string\n     * @throws URIException\n     *         If {@link #checkValid()} fails\n     * @see #getDefaultProtocolCharset\n     */\n    public HttpURL(final String userinfo, final String host, final int port, final String path, final String query)\n        throws URIException {\n        this(userinfo, host, port, path, query, null);\n    }\n    /**\n     * Construct a HTTP URL from given components.\n     *\n     * Note: The <code>userinfo</code> format is normally\n     * <code>&lt;username&gt;:&lt;password&gt;</code> where username and\n     * password must both be URL escaped.\n     *\n     * @param userinfo\n     *        the userinfo string whose parts are URL escaped\n     * @param host\n     *        the host string\n     * @param port\n     *        the port number\n     * @param path\n     *        the path string\n     * @param query\n     *        the query string\n     * @param fragment\n     *        the fragment string\n     * @throws URIException\n     *         If {@link #checkValid()} fails\n     * @see #getDefaultProtocolCharset\n     */\n    public HttpURL(\n        final String userinfo,\n        final String host,\n        final int port,\n        final String path,\n        final String query,\n        final String fragment) throws URIException {\n        // validate and contruct the URI character sequence\n        final StringBuffer buff = new StringBuffer();\n        if (userinfo != null || host != null || port != -1) {\n            _scheme = DEFAULT_SCHEME; // in order to verify the own protocol\n            buff.append(_default_scheme);\n            buff.append(\"://\");\n            if (userinfo != null) {\n                buff.append(userinfo);\n                buff.append('@');\n            }\n            if (host != null) {\n                buff.append(URIUtil.encode(host, URI.allowed_host));\n                if (port != -1 || port != DEFAULT_PORT) {\n                    buff.append(':');\n                    buff.append(port);\n                }\n            }\n        }\n        if (path != null) { // accept empty path\n            if (scheme != null && !path.startsWith(\"/\")) {\n                throw new URIException(URIException.PARSING, \"abs_path requested\");\n            }\n            buff.append(URIUtil.encode(path, URI.allowed_abs_path));\n        }\n        if (query != null) {\n            buff.append('?');\n            buff.append(URIUtil.encode(query, URI.allowed_query));\n        }\n        if (fragment != null) {\n            buff.append('#');\n            buff.append(URIUtil.encode(fragment, URI.allowed_fragment));\n        }\n        parseUriReference(buff.toString(), true);\n        checkValid();\n    }\n    /**\n     * Construct a HTTP URL from given components.\n     *\n     * @param user\n     *        the user name\n     * @param password\n     *        his or her password\n     * @param host\n     *        the host string\n     * @param port\n     *        the port number\n     * @param path\n     *        the path string\n     * @param query\n     *        the query string\n     * @param fragment\n     *        the fragment string\n     * @throws URIException\n     *         If {@link #checkValid()} fails\n     * @see #getDefaultProtocolCharset\n     */\n    public HttpURL(\n        final String user,\n        final String password,\n        final String host,\n        final int port,\n        final String path,\n        final String query,\n        final String fragment) throws URIException {\n        this(toUserinfo(user, password), host, port, path, query, fragment);\n    }\n    protected static String toUserinfo(final String user, final String password) throws URIException {\n        if (user == null) {\n            return null;\n        }\n        final StringBuffer usrinfo = new StringBuffer(20); // sufficient for\n                                                           // real\n        // world\n        usrinfo.append(URIUtil.encode(user, URI.allowed_within_userinfo));\n        if (password == null) {\n            return usrinfo.toString();\n        }\n        usrinfo.append(':');\n        usrinfo.append(URIUtil.encode(password, URI.allowed_within_userinfo));\n        return usrinfo.toString();\n    }\n    /**\n     * Construct a HTTP URL with a given relative URL string.\n     *\n     * @param base\n     *        the base HttpURL\n     * @param relative\n     *        the relative HTTP URL string\n     * @throws URIException\n     *         If {@link #checkValid()} fails\n     */\n    public HttpURL(final HttpURL base, final String relative) throws URIException {\n        this(base, new HttpURL(relative));\n    }\n    /**\n     * Construct a HTTP URL with a given relative URL.\n     *\n     * @param base\n     *        the base HttpURL\n     * @param relative\n     *        the relative HttpURL\n     * @throws URIException\n     *         If {@link #checkValid()} fails\n     */\n    public HttpURL(final HttpURL base, final HttpURL relative) throws URIException {\n        super(base, relative);\n        checkValid();\n    }\n    // -------------------------------------------------------------- Constants\n    /**\n     * Default scheme for HTTP URL.\n     */\n    public static final char[] DEFAULT_SCHEME = {\n        'h',\n        't',\n        't',\n        'p'\n    };\n    /**\n     * Default scheme for HTTP URL.\n     *\n     * @deprecated Use {@link #DEFAULT_SCHEME} instead. This one doesn't conform\n     *             to the project naming conventions.\n     */\n    @Deprecated\n    public static final char[] _default_scheme = DEFAULT_SCHEME;\n    /**\n     * Default port for HTTP URL.\n     */\n    public static final int DEFAULT_PORT = 80;\n    /**\n     * Default port for HTTP URL.\n     *\n     * @deprecated Use {@link #DEFAULT_PORT} instead. This one doesn't conform\n     *             to the project naming conventions.\n     */\n    @Deprecated\n    public static final int _default_port = DEFAULT_PORT;\n    /**\n     * The serialVersionUID.\n     */\n    static final long serialVersionUID = -7158031098595039459L;\n    // ------------------------------------------------------------- The scheme\n    /**\n     * Get the scheme. You can get the scheme explicitly.\n     *\n     * @return the scheme\n     */\n<fim_suffix>    @Override\n    public char[] getRawScheme() {\n        return (_scheme == null) ? null : HttpURL.DEFAULT_SCHEME;\n    }<fim_middle>// function below has no smell\n"}