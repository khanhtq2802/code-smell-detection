{"text": "<fim_prefix>/**\n * Copyright 2011 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.data.neo4j.fieldaccess;\n\nimport org.neo4j.graphdb.Node;\nimport org.neo4j.graphdb.Path;\nimport org.neo4j.graphdb.Relationship;\nimport org.neo4j.graphdb.traversal.TraversalDescription;\nimport org.springframework.dao.InvalidDataAccessApiUsageException;\nimport org.springframework.data.neo4j.annotation.GraphTraversal;\nimport org.springframework.data.neo4j.core.FieldTraversalDescriptionBuilder;\nimport org.springframework.data.neo4j.core.NodeBacked;\nimport org.springframework.data.neo4j.core.RelationshipBacked;\nimport org.springframework.data.neo4j.mapping.Neo4JPersistentProperty;\nimport org.springframework.data.neo4j.support.GenericTypeExtractor;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\n\nimport static org.springframework.data.neo4j.support.DoReturn.doReturn;\n\n<fim_suffix>public class TraversalFieldAccessorFactory implements FieldAccessorFactory<NodeBacked> {\n\t@Override\n    public boolean accept(final Neo4JPersistentProperty f) {\n        final GraphTraversal graphEntityTraversal = f.getAnnotation(GraphTraversal.class);\n        return graphEntityTraversal != null\n                && graphEntityTraversal.traversalBuilder() != FieldTraversalDescriptionBuilder.class\n                && f.getType().equals(Iterable.class);\n    }\n\n\n    @Override\n    public FieldAccessor<NodeBacked> forField(final Neo4JPersistentProperty property) {\n        return new TraversalFieldAccessor(property);\n    }\n\n\t/**\n\t * @author Michael Hunger\n\t * @since 12.09.2010\n\t */\n\tpublic static class TraversalFieldAccessor implements FieldAccessor<NodeBacked> {\n\t    protected final Neo4JPersistentProperty property;\n\t    private final FieldTraversalDescriptionBuilder fieldTraversalDescriptionBuilder;\n\t    private Class<?> target;\n        protected String[] params;\n\n        public TraversalFieldAccessor(final Neo4JPersistentProperty property) {\n\t        this.property = property;\n            final GraphTraversal graphEntityTraversal = property.getAnnotation(GraphTraversal.class);\n\t        this.target = resolveTarget(graphEntityTraversal,property);\n            this.params = graphEntityTraversal.params();\n            this.fieldTraversalDescriptionBuilder = createTraversalDescription(graphEntityTraversal);\n\t    }\n\n        private Class<?> resolveTarget(GraphTraversal graphTraversal, Neo4JPersistentProperty property) {\n            if (!graphTraversal.elementClass().equals(NodeBacked.class)) return graphTraversal.elementClass();\n            final Class<?> result = property.getTypeInformation().getActualType().getType();\n            Class<?>[] allowedTypes={NodeBacked.class,RelationshipBacked.class,Node.class,Relationship.class, Path.class};\n            if (!checkTypes(result,allowedTypes)) throw new IllegalArgumentException(\"The target result type \"+result+\" of the traversal is no subclass of the allowed types: \"+property+\" \"+allowedTypes);\n            return result;\n        }\n\n        private boolean checkTypes(Class<?> target, Class<?>...allowedTypes) {\n            for (Class<?> type : allowedTypes) {\n                if (type.isAssignableFrom(target)) return true;\n            }\n            return false;\n        }\n\n\n        @Override\n\t    public boolean isWriteable(NodeBacked nodeBacked) {\n\t        return false;\n\t    }\n\n\t    @Override\n\t    public Object setValue(final NodeBacked nodeBacked, final Object newVal) {\n\t        throw new InvalidDataAccessApiUsageException(\"Cannot set readonly traversal description field \" + property);\n\t    }\n\n\t    @Override\n\t    public Object getValue(final NodeBacked nodeBacked) {\n\t        final TraversalDescription traversalDescription = fieldTraversalDescriptionBuilder.build(nodeBacked, property,params);\n\t        return doReturn(nodeBacked.findAllByTraversal(target, traversalDescription));\n\t    }\n\n\n\t    private FieldTraversalDescriptionBuilder createTraversalDescription(final GraphTraversal graphEntityTraversal) {\n\t        try {\n\t            final Class<? extends FieldTraversalDescriptionBuilder> traversalDescriptionClass = graphEntityTraversal.traversalBuilder();\n\t            final Constructor<? extends FieldTraversalDescriptionBuilder> constructor = traversalDescriptionClass.getDeclaredConstructor();\n\t            constructor.setAccessible(true);\n\t            return constructor.newInstance();\n\t        } catch (Exception e) {\n\t            throw new RuntimeException(\"Error creating TraversalDescription from \" + property,e);\n\t        }\n\t    }\n\n\t\t@Override\n\t\tpublic Object getDefaultImplementation() {\n\t\t\treturn null;\n\t\t}\n\n\t}\n}<fim_middle>// class below is blob\n"}