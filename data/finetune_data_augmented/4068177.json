{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.hyracks.bootstrap;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.StringWriter;\nimport java.util.Properties;\n\nimport org.apache.asterix.common.config.AsterixProperties;\nimport org.apache.asterix.common.exceptions.ErrorCode;\nimport org.apache.asterix.common.exceptions.RuntimeDataException;\nimport org.apache.hyracks.api.config.IConfigManager;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.control.common.controllers.CCConfig;\nimport org.apache.hyracks.control.common.controllers.ControllerConfig;\nimport org.apache.hyracks.control.common.controllers.NCConfig;\nimport org.apache.hyracks.control.common.utils.ConfigurationUtil;\nimport org.apache.hyracks.util.file.FileUtil;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\nclass ApplicationConfigurator {\n    private static final Logger LOGGER = LogManager.getLogger();\n\n    private ApplicationConfigurator() {\n    }\n\n<fim_suffix>    static void registerConfigOptions(IConfigManager configManager) {\n        AsterixProperties.registerConfigOptions(configManager);\n        ControllerConfig.Option.DEFAULT_DIR\n                .setDefaultValue(FileUtil.joinPath(System.getProperty(ConfigurationUtil.JAVA_IO_TMPDIR), \"asterixdb\"));\n        NCConfig.Option.APP_CLASS.setDefaultValue(NCApplication.class.getName());\n        CCConfig.Option.APP_CLASS.setDefaultValue(CCApplication.class.getName());\n        try {\n            InputStream propertyStream =\n                    ApplicationConfigurator.class.getClassLoader().getResourceAsStream(\"git.properties\");\n            if (propertyStream != null) {\n                Properties gitProperties = new Properties();\n                gitProperties.load(propertyStream);\n                StringWriter sw = new StringWriter();\n                gitProperties.store(sw, null);\n                configManager.setVersionString(sw.toString());\n            }\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n\n    }\n\n    public static void validateJavaRuntime() throws HyracksDataException {\n        final String javaVersion = System.getProperty(\"java.version\");\n        LOGGER.info(\"Found JRE version \" + javaVersion);\n        String[] splits = javaVersion.split(\"\\\\.\");\n        if (\"1\".equals(splits[0])) {\n            switch (splits[1]) {\n                case \"9\":\n                    LOGGER.warn(\"JRE version \\\"\" + javaVersion + \"\\\" is untested\");\n                    //fall-through\n                case \"8\":\n                    return;\n                default:\n                    throw RuntimeDataException.create(ErrorCode.UNSUPPORTED_JRE,\n                            \"a minimum version of JRE of 1.8 is required, but is currently: \\\"\" + javaVersion + \"\\\"\");\n            }\n        } else {\n            LOGGER.warn(\"JRE version \\\"\" + javaVersion + \"\\\" is untested\");\n        }\n    }\n}<fim_middle>// function below has no smell\n"}