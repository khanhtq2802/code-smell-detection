{"text": "<fim_prefix>/**\n *\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.karaf.deployer.blueprint;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport org.osgi.service.url.AbstractURLStreamHandlerService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * A URL handler that will transform a JBI artifact to an OSGi bundle\n * on the fly.  Needs to be registered in the OSGi registry.\n */\n<fim_suffix>public class BlueprintURLHandler extends AbstractURLStreamHandlerService {\n\n\tprivate final Logger logger = LoggerFactory.getLogger(BlueprintURLHandler.class);\n\n\tprivate static String SYNTAX = \"blueprint: bp-xml-uri\";\n\n    /**\n     * Open the connection for the given URL.\n     *\n     * @param url the url from which to open a connection.\n     * @return a connection on the specified URL.\n     * @throws IOException if an error occurs or if the URL is malformed.\n     */\n    @Override\n\tpublic URLConnection openConnection(URL url) throws IOException {\n\t\tif (url.getPath() == null || url.getPath().trim().length() == 0) {\n\t\t\tthrow new MalformedURLException (\"Path cannot be null or empty. Syntax: \" + SYNTAX );\n\t\t}\n\n\t\tlogger.debug(\"Blueprint xml URL is: [\" + url.getPath() + \"]\");\n\t\treturn new Connection(url);\n\t}\n\n    public class Connection extends URLConnection {\n\n        public Connection(URL url) {\n            super(url);\n        }\n\n        @Override\n        public void connect() throws IOException {\n        }\n\n        @Override\n        public InputStream getInputStream() throws IOException {\n            try {\n                ByteArrayOutputStream os = new ByteArrayOutputStream();\n                BlueprintTransformer.transform(new URL(url.getPath()), os);\n                os.close();\n                return new ByteArrayInputStream(os.toByteArray());\n            } catch (Exception e) {\n                logger.error(\"Error opening blueprint xml url\", e);\n                throw new IOException(\"Error opening blueprint xml url\", e);\n            }\n        }\n    }\n\n}<fim_middle>// class below has no smell\n"}