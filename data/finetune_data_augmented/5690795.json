{"text": "<fim_prefix>/*\n * $Id$\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.struts2.showcase.application;\n\nimport org.apache.struts2.showcase.exception.CreateException;\nimport org.apache.struts2.showcase.exception.DuplicateKeyException;\nimport org.apache.struts2.showcase.exception.StorageException;\nimport org.apache.struts2.showcase.exception.UpdateException;\nimport org.apache.struts2.showcase.model.IdEntity;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Repository;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * MemoryStorage.\n * Very simple in-memory persistence emulation.\n */\n\n@Repository\n@Scope(\"singleton\")\npublic class MemoryStorage implements Storage {\n\n\tprivate static final long serialVersionUID = 8611213748834904125L;\n\n\n\tprivate Map memory = new HashMap();\n\n\tprivate Map getEntityMap(Class entityClass) {\n\t\tif (entityClass != null) {\n\t\t\tMap tryMap = (Map) memory.get(entityClass);\n\t\t\tif (tryMap == null) {\n\t\t\t\tsynchronized (memory) {\n\t\t\t\t\ttryMap = new HashMap();\n\t\t\t\t\tmemory.put(entityClass, tryMap);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tryMap;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate IdEntity intStore(Class entityClass, IdEntity object) {\n\t\tgetEntityMap(entityClass).put(object.getId(), object);\n\t\treturn object;\n\t}\n\n\tpublic IdEntity get(Class entityClass, Serializable id) {\n\t\tif (entityClass != null && id != null) {\n\t\t\treturn (IdEntity) getEntityMap(entityClass).get(id);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic Serializable create(IdEntity object) throws CreateException {\n\t\tif (object == null) {\n\t\t\tthrow new CreateException(\"Either given class or object was null\");\n\t\t}\n\t\tif (object.getId() == null) {\n\t\t\tthrow new CreateException(\"Cannot store object with null id\");\n\t\t}\n\t\tif (get(object.getClass(), object.getId()) != null) {\n\t\t\tthrow new DuplicateKeyException(\"Object with this id already exists.\");\n\t\t}\n\t\treturn intStore(object.getClass(), object).getId();\n\t}\n\n\tpublic IdEntity update(IdEntity object) throws UpdateException {\n\t\tif (object == null) {\n\t\t\tthrow new UpdateException(\"Cannot update null object.\");\n\t\t}\n\t\tif (get(object.getClass(), object.getId()) == null) {\n\t\t\tthrow new UpdateException(\"Object to update not found.\");\n\t\t}\n\t\treturn intStore(object.getClass(), object);\n\t}\n\n\tpublic Serializable merge(IdEntity object) throws StorageException {\n\t\tif (object == null) {\n\t\t\tthrow new StorageException(\"Cannot merge null object\");\n\t\t}\n\t\tif (object.getId() == null || get(object.getClass(), object.getId()) == null) {\n\t\t\treturn create(object);\n\t\t} else {\n\t\t\treturn update(object).getId();\n\t\t}\n\t}\n\n\tpublic int delete(Class entityClass, Serializable id) throws CreateException {\n\t\ttry {\n\t\t\tif (get(entityClass, id) != null) {\n\t\t\t\tgetEntityMap(entityClass).remove(id);\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new CreateException(e);\n\t\t}\n\t}\n\n<fim_suffix>\tpublic int delete(IdEntity object) throws CreateException {\n\t\tif (object == null) {\n\t\t\tthrow new CreateException(\"Cannot delete null object\");\n\t\t}\n\t\treturn delete(object.getClass(), object.getId());\n\t}\n\n\tpublic Collection findAll(Class entityClass) {\n\t\tif (entityClass != null) {\n\t\t\treturn getEntityMap(entityClass).values();\n\t\t} else {\n\t\t\treturn new ArrayList();\n\t\t}\n\t}\n\n\tpublic void reset() {\n\t\tthis.memory = new HashMap();\n\t}\n\n}<fim_middle>// function below has no smell\n"}