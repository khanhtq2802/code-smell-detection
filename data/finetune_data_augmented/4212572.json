{"text": "<fim_prefix>     */\n    public static Object getIndexedProperty(final Object bean,\n                                            final String name, final int index)\n            throws IllegalAccessException, InvocationTargetException,\n            NoSuchMethodException {\n        return PropertyUtilsBean.getInstance().getIndexedProperty(bean, name, index);\n    }\n    /**\n     * <p>Return the value of the specified mapped property of the\n     * specified bean, with no type conversions.</p>\n     *\n     * <p>For more details see <code>PropertyUtilsBean</code>.</p>\n     *\n     * @param bean Bean whose property is to be extracted\n     * @param name <code>propertyname(key)</code> of the property value\n     *  to be extracted\n     * @return the mapped property value\n     *\n     * @throws IllegalAccessException if the caller does not have\n     *  access to the property accessor method\n     * @throws InvocationTargetException if the property accessor method\n     *  throws an exception\n     * @throws NoSuchMethodException if an accessor method for this\n     *  propety cannot be found\n     * @see PropertyUtilsBean#getMappedProperty(Object,String)\n     */\n    public static Object getMappedProperty(final Object bean, final String name)\n            throws IllegalAccessException, InvocationTargetException,\n            NoSuchMethodException {\n        return PropertyUtilsBean.getInstance().getMappedProperty(bean, name);\n    }\n    /**\n     * <p>Return the value of the specified mapped property of the specified\n     * bean, with no type conversions.</p>\n     *\n     * <p>For more details see <code>PropertyUtilsBean</code>.</p>\n     *\n     * @param bean Bean whose property is to be extracted\n     * @param name Mapped property name of the property value to be extracted\n     * @param key Key of the property value to be extracted\n     * @return the mapped property value\n     *\n     * @throws IllegalAccessException if the caller does not have\n     *  access to the property accessor method\n     * @throws InvocationTargetException if the property accessor method\n     *  throws an exception\n     * @throws NoSuchMethodException if an accessor method for this\n     *  propety cannot be found\n     * @see PropertyUtilsBean#getMappedProperty(Object,String, String)\n     */\n    public static Object getMappedProperty(final Object bean,\n                                           final String name, final String key)\n            throws IllegalAccessException, InvocationTargetException,\n            NoSuchMethodException {\n        return PropertyUtilsBean.getInstance().getMappedProperty(bean, name, key);\n    }\n    /**\n     * <p>Return the mapped property descriptors for this bean class.</p>\n     *\n     * <p>For more details see <code>PropertyUtilsBean</code>.</p>\n     *\n     * @param beanClass Bean class to be introspected\n     * @return the mapped property descriptors\n     * @see PropertyUtilsBean#getMappedPropertyDescriptors(Class)\n     */\n    static Map<Class<?>, Map> getMappedPropertyDescriptors(final Class<?> beanClass) {\n        return PropertyUtilsBean.getInstance().getMappedPropertyDescriptors(beanClass);\n    }\n    /**\n     * <p>Return the value of the (possibly nested) property of the specified\n     * name, for the specified bean, with no type conversions.</p>\n     *\n     * <p>For more details see <code>PropertyUtilsBean</code>.</p>\n     *\n     * @param bean Bean whose property is to be extracted\n     * @param name Possibly nested name of the property to be extracted\n     * @return the nested property value\n     *\n     * @throws IllegalAccessException if the caller does not have\n     *  access to the property accessor method\n     * @throws IllegalArgumentException if <code>bean</code> or\n     *  <code>name</code> is null\n     * @throws NestedNullException if a nested reference to a\n     *  property returns null\n     * @throws InvocationTargetException\n     * if the property accessor method throws an exception\n     * @throws NoSuchMethodException if an accessor method for this\n     *  propety cannot be found\n     * @see PropertyUtilsBean#getNestedProperty\n     */\n    public static Object getNestedProperty(final Object bean, final String name)\n            throws IllegalAccessException, InvocationTargetException,\n            NoSuchMethodException {\n        return PropertyUtilsBean.getInstance().getNestedProperty(bean, name);\n    }\n    /**\n     * <p>Return the value of the specified property of the specified bean,\n     * no matter which property reference format is used, with no\n     * type conversions.</p>\n     *\n     * <p>For more details see <code>PropertyUtilsBean</code>.</p>\n     *\n     * @param bean Bean whose property is to be extracted\n     * @param name Possibly indexed and/or nested name of the property\n     *  to be extracted\n     * @return the property value\n     *\n     * @throws IllegalAccessException if the caller does not have\n     *  access to the property accessor method\n     * @throws IllegalArgumentException if <code>bean</code> or\n     *  <code>name</code> is null\n     * @throws InvocationTargetException if the property accessor method\n     *  throws an exception\n     * @throws NoSuchMethodException if an accessor method for this\n     *  propety cannot be found\n     * @see PropertyUtilsBean#getProperty\n     */\n    public static Object getProperty(final Object bean, final String name)\n            throws IllegalAccessException, InvocationTargetException,\n            NoSuchMethodException {\n        return PropertyUtilsBean.getInstance().getProperty(bean, name);\n    }\n    /**\n     * <p>Retrieve the property descriptor for the specified property of the\n     * specified bean, or return <code>null</code> if there is no such\n     * descriptor.</p>\n     *\n     * <p>For more details see <code>PropertyUtilsBean</code>.</p>\n     *\n     * @param bean Bean for which a property descriptor is requested\n     * @param name Possibly indexed and/or nested name of the property for\n     *  which a property descriptor is requested\n     * @return the property descriptor\n     *\n     * @throws IllegalAccessException if the caller does not have\n     *  access to the property accessor method\n     * @throws IllegalArgumentException if <code>bean</code> or\n     *  <code>name</code> is null\n     * @throws IllegalArgumentException if a nested reference to a\n     *  property returns null\n     * @throws InvocationTargetException if the property accessor method\n     *  throws an exception\n     * @throws NoSuchMethodException if an accessor method for this\n     *  propety cannot be found\n     * @see PropertyUtilsBean#getPropertyDescriptor\n     */\n    public static PropertyDescriptor getPropertyDescriptor(final Object bean,\n                                                           final String name)\n            throws IllegalAccessException, InvocationTargetException,\n            NoSuchMethodException {\n        return PropertyUtilsBean.getInstance().getPropertyDescriptor(bean, name);\n    }\n    /**\n     * <p>Retrieve the property descriptors for the specified class,\n     * introspecting and caching them the first time a particular bean class\n     * is encountered.</p>\n     *\n     * <p>For more details see <code>PropertyUtilsBean</code>.</p>\n     *\n     * @param beanClass Bean class for which property descriptors are requested\n     * @return the property descriptors\n     * @throws IllegalArgumentException if <code>beanClass</code> is null\n     * @see PropertyUtilsBean#getPropertyDescriptors(Class)\n     */\n    public static PropertyDescriptor[]\n            getPropertyDescriptors(final Class<?> beanClass) {\n        return PropertyUtilsBean.getInstance().getPropertyDescriptors(beanClass);\n    }\n    /**\n     * <p>Retrieve the property descriptors for the specified bean,\n     * introspecting and caching them the first time a particular bean class\n     * is encountered.</p>\n     *\n     * <p>For more details see <code>PropertyUtilsBean</code>.</p>\n     *\n     * @param bean Bean for which property descriptors are requested\n     * @return the property descriptors\n     * @throws IllegalArgumentException if <code>bean</code> is null\n     * @see PropertyUtilsBean#getPropertyDescriptors(Object)\n     */\n    public static PropertyDescriptor[] getPropertyDescriptors(final Object bean) {\n        return PropertyUtilsBean.getInstance().getPropertyDescriptors(bean);\n    }\n    /**\n     * <p>Return the Java Class repesenting the property editor class that has\n     * been registered for this property (if any).</p>\n     *\n     * <p>For more details see <code>PropertyUtilsBean</code>.</p>\n     *\n     * @param bean Bean for which a property descriptor is requested\n     * @param name Possibly indexed and/or nested name of the property for\n     *  which a property descriptor is requested\n     * @return the property editor class\n     *\n     * @throws IllegalAccessException if the caller does not have\n     *  access to the property accessor method\n     * @throws IllegalArgumentException if <code>bean</code> or\n     *  <code>name</code> is null\n     * @throws IllegalArgumentException if a nested reference to a\n     *  property returns null\n     * @throws InvocationTargetException if the property accessor method\n     *  throws an exception\n     * @throws NoSuchMethodException if an accessor method for this\n     *  propety cannot be found\n     * @see PropertyUtilsBean#getPropertyEditorClass(Object,String)\n     */\n<fim_suffix>    public static Class<?> getPropertyEditorClass(final Object bean, final String name)\n            throws IllegalAccessException, InvocationTargetException,\n            NoSuchMethodException {\n        return PropertyUtilsBean.getInstance().getPropertyEditorClass(bean, name);\n    }<fim_middle>// function below has no smell\n"}