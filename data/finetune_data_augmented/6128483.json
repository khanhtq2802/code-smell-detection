{"text": "<fim_prefix>/*\n * Copyright (c) 2018 Goldman Sachs and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v. 1.0 which accompany this distribution.\n * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n * http://www.eclipse.org/org/documents/edl-v10.php.\n */\n\npackage org.eclipse.collections.impl.list.fixed;\n\nimport java.io.Externalizable;\nimport java.io.IOException;\nimport java.io.ObjectInput;\nimport java.io.ObjectOutput;\nimport java.util.function.UnaryOperator;\n\nimport org.eclipse.collections.api.block.procedure.Procedure;\nimport org.eclipse.collections.api.block.procedure.Procedure2;\nimport org.eclipse.collections.api.block.procedure.primitive.ObjectIntProcedure;\nimport org.eclipse.collections.impl.block.factory.Comparators;\n\n/**\n * This is a four element memory efficient List which is created by calling Lists.fixedSize.of(one, two, three, four).\n */\nfinal class QuadrupletonList<T>\n        extends AbstractMemoryEfficientMutableList<T>\n        implements Externalizable\n{\n    private static final long serialVersionUID = 1L;\n\n    private T element1;\n    private T element2;\n    private T element3;\n    private T element4;\n\n    @SuppressWarnings(\"UnusedDeclaration\")\n    public QuadrupletonList()\n    {\n        // For Externalizable use only\n    }\n\n    QuadrupletonList(T obj1, T obj2, T obj3, T obj4)\n    {\n        this.element1 = obj1;\n        this.element2 = obj2;\n        this.element3 = obj3;\n        this.element4 = obj4;\n    }\n\n    @Override\n    public QuintupletonList<T> with(T value)\n    {\n        return new QuintupletonList<>(this.element1, this.element2, this.element3, this.element4, value);\n    }\n\n    // Weird implementation of clone() is ok on final classes\n\n    @Override\n    public QuadrupletonList<T> clone()\n    {\n        return new QuadrupletonList<>(this.element1, this.element2, this.element3, this.element4);\n    }\n\n<fim_suffix>    @Override\n    public int size()\n    {\n        return 4;\n    }\n\n    @Override\n    public T get(int index)\n    {\n        switch (index)\n        {\n            case 0:\n                return this.element1;\n            case 1:\n                return this.element2;\n            case 2:\n                return this.element3;\n            case 3:\n                return this.element4;\n            default:\n                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + this.size());\n        }\n    }\n\n    @Override\n    public boolean contains(Object obj)\n    {\n        return Comparators.nullSafeEquals(obj, this.element1)\n                || Comparators.nullSafeEquals(obj, this.element2)\n                || Comparators.nullSafeEquals(obj, this.element3)\n                || Comparators.nullSafeEquals(obj, this.element4);\n    }\n\n    /**\n     * set is implemented purely to allow the List to be sorted, not because this List should be considered mutable.\n     */\n    @Override\n    public T set(int index, T element)\n    {\n        switch (index)\n        {\n            case 0:\n                T previousElement1 = this.element1;\n                this.element1 = element;\n                return previousElement1;\n            case 1:\n                T previousElement2 = this.element2;\n                this.element2 = element;\n                return previousElement2;\n            case 2:\n                T previousElement3 = this.element3;\n                this.element3 = element;\n                return previousElement3;\n            case 3:\n                T previousElement4 = this.element4;\n                this.element4 = element;\n                return previousElement4;\n            default:\n                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + this.size());\n        }\n    }\n\n    /**\n     * @since 10.0 - Overridden for efficiency\n     */\n    @Override\n    public void replaceAll(UnaryOperator<T> operator)\n    {\n        this.element1 = operator.apply(this.element1);\n        this.element2 = operator.apply(this.element2);\n        this.element3 = operator.apply(this.element3);\n        this.element4 = operator.apply(this.element4);\n    }\n\n    @Override\n    public T getFirst()\n    {\n        return this.element1;\n    }\n\n    @Override\n    public T getLast()\n    {\n        return this.element4;\n    }\n\n    @Override\n    public T getOnly()\n    {\n        throw new IllegalStateException(\"Size must be 1 but was \" + this.size());\n    }\n\n    @Override\n    public void each(Procedure<? super T> procedure)\n    {\n        procedure.value(this.element1);\n        procedure.value(this.element2);\n        procedure.value(this.element3);\n        procedure.value(this.element4);\n    }\n\n    @Override\n    public void forEachWithIndex(ObjectIntProcedure<? super T> objectIntProcedure)\n    {\n        objectIntProcedure.value(this.element1, 0);\n        objectIntProcedure.value(this.element2, 1);\n        objectIntProcedure.value(this.element3, 2);\n        objectIntProcedure.value(this.element4, 3);\n    }\n\n    @Override\n    public <P> void forEachWith(Procedure2<? super T, ? super P> procedure, P parameter)\n    {\n        procedure.value(this.element1, parameter);\n        procedure.value(this.element2, parameter);\n        procedure.value(this.element3, parameter);\n        procedure.value(this.element4, parameter);\n    }\n\n    @Override\n    public void writeExternal(ObjectOutput out) throws IOException\n    {\n        out.writeObject(this.element1);\n        out.writeObject(this.element2);\n        out.writeObject(this.element3);\n        out.writeObject(this.element4);\n    }\n\n    @Override\n    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException\n    {\n        this.element1 = (T) in.readObject();\n        this.element2 = (T) in.readObject();\n        this.element3 = (T) in.readObject();\n        this.element4 = (T) in.readObject();\n    }\n}<fim_middle>// function below has no smell\n"}