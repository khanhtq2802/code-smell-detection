{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.compute.gridify.aop.spring;\n\nimport java.lang.reflect.Method;\nimport org.apache.ignite.compute.gridify.Gridify;\nimport org.apache.ignite.compute.gridify.GridifySetToSet;\nimport org.apache.ignite.compute.gridify.GridifySetToValue;\nimport org.springframework.aop.ClassFilter;\nimport org.springframework.aop.MethodMatcher;\nimport org.springframework.aop.Pointcut;\n\n/**\n * Pointcut used by gridified aspects to find methods\n * annotated with {@link org.apache.ignite.compute.gridify.Gridify}, {@link GridifySetToValue} and\n * {@link GridifySetToSet} annotations.\n */\npublic class GridifySpringPointcut implements Pointcut {\n    /**\n     * Class filter.\n     */\n    private static final ClassFilter filter = new ClassFilter() {\n        @SuppressWarnings({\"RawUseOfParameterizedType\"})\n        @Override public boolean matches(Class cls) {\n            return true;\n        }\n    };\n\n    /** Method matcher. */\n    private static final MethodMatcher dfltMatcher = new GridifyMethodMatcher() {\n        // Warning suppression is due to Spring...\n        @Override public boolean matches(Method method, Class cls) {\n            return cls.isAnnotationPresent(Gridify.class) || method.isAnnotationPresent(Gridify.class);\n        }\n    };\n\n    /** Method matcher. */\n    private static final MethodMatcher setToValueMatcher = new GridifyMethodMatcher() {\n        // Warning suppression is due to Spring...\n        @Override public boolean matches(Method method, Class cls) {\n            return cls.isAnnotationPresent(GridifySetToValue.class) || method.isAnnotationPresent(GridifySetToValue.class);\n        }\n    };\n\n    /** Method matcher. */\n    private static final MethodMatcher setToSetMatcher = new GridifyMethodMatcher() {\n        // Warning suppression is due to Spring...\n        @Override public boolean matches(Method method, Class cls) {\n            return cls.isAnnotationPresent(GridifySetToSet.class) || method.isAnnotationPresent(GridifySetToSet.class);\n        }\n    };\n\n    /** */\n    private final GridifySpringPointcutType type;\n\n    /**\n     * Creates pointcut associated with specific aspect.\n     *\n     * @param type Type.\n     */\n    public GridifySpringPointcut(GridifySpringPointcutType type) {\n        assert type != null;\n\n        this.type = type;\n    }\n\n    /** {@inheritDoc} */\n    @Override public ClassFilter getClassFilter() {\n        return filter;\n    }\n\n    /** {@inheritDoc} */\n    @Override public MethodMatcher getMethodMatcher() {\n        switch (type) {\n            case DFLT: return dfltMatcher;\n            case SET_TO_VALUE: return setToValueMatcher;\n            case SET_TO_SET: return setToSetMatcher;\n\n            default:\n                assert false : \"Unknown pointcut type: \" + type;\n        }\n\n        return null;\n    }\n\n    /**\n     * Method matcher.\n     */\n<fim_suffix>    private abstract static class GridifyMethodMatcher implements MethodMatcher {\n        /** {@inheritDoc} */\n        @Override public abstract boolean matches(Method method, Class cls);\n\n        /** {@inheritDoc} */\n        @Override public boolean isRuntime() {\n            return false;\n        }\n\n        /** {@inheritDoc} */\n        // Warning suppression is due to Spring...\n        @SuppressWarnings({\"RawUseOfParameterizedType\"})\n        @Override public boolean matches(Method method, Class aClass, Object[] objs) {\n            // No-op.\n            return false;\n        }\n    }\n\n    /**\n     * Pointcut type.\n     */\n    @SuppressWarnings({\"PublicInnerClass\"})\n    public enum GridifySpringPointcutType {\n        /** */\n        DFLT,\n\n        /** */\n        SET_TO_VALUE,\n\n        /** */\n        SET_TO_SET\n    }\n}<fim_middle>// class below has no smell\n"}