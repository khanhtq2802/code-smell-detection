{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.ide.api.editor.partition;\n\nimport java.util.Collections;\nimport java.util.List;\nimport org.eclipse.che.ide.api.editor.document.DocumentHandle;\nimport org.eclipse.che.ide.api.editor.events.DocumentChangedEvent;\nimport org.eclipse.che.ide.api.editor.text.TypedRegion;\nimport org.eclipse.che.ide.api.editor.text.TypedRegionImpl;\n\n/** A no-op partitioner which partitions the document in one single default type partititon. */\n<fim_suffix>public class ConstantPartitioner implements DocumentPartitioner {\n\n  /** The list with a single content type, the default one. */\n  private final List<String> legalContentTypes;\n\n  /** The single content type. */\n  private final String contentType;\n\n  /** The full document length. */\n  private int documentLength = 0;\n\n  /** Handle on the document. */\n  private DocumentHandle documentHandle;\n\n  /**\n   * Constructor for a {@link ConstantPartitioner} that has a single partition of type ContentType.\n   *\n   * @param contentType the single content type\n   */\n  public ConstantPartitioner(final String contentType) {\n    this.contentType = contentType;\n    this.legalContentTypes = Collections.singletonList(this.contentType);\n  }\n\n  /**\n   * Constructor for a {@link ConstantPartitioner} that has a single partition of type {@link\n   * DefaultPartitioner#DEFAULT_CONTENT_TYPE}.\n   */\n  public ConstantPartitioner() {\n    this(DEFAULT_CONTENT_TYPE);\n  }\n\n  @Override\n  public void onDocumentChanged(final DocumentChangedEvent event) {\n    final int removed = event.getLength();\n    int added = 0;\n    if (event.getText() != null) {\n      added = event.getText().length();\n    }\n    final int sizeDelta = added - removed;\n    this.documentLength += sizeDelta;\n  }\n\n  @Override\n  public void initialize() {\n    this.documentLength = getDocumentHandle().getDocument().getContentsCharCount();\n  }\n\n  @Override\n  public List<String> getLegalContentTypes() {\n    return legalContentTypes;\n  }\n\n  @Override\n  public String getContentType(final int offset) {\n    return this.contentType;\n  }\n\n  @Override\n  public List<TypedRegion> computePartitioning(final int offset, final int length) {\n    final TypedRegion region = getPartition(offset);\n    return Collections.singletonList(region);\n  }\n\n  @Override\n  public TypedRegion getPartition(final int offset) {\n    return new TypedRegionImpl(offset, this.documentLength, this.contentType);\n  }\n\n  @Override\n  public DocumentHandle getDocumentHandle() {\n    return documentHandle;\n  }\n\n  @Override\n  public void setDocumentHandle(DocumentHandle handle) {\n    this.documentHandle = handle;\n  }\n\n  @Override\n  public void release() {}\n}<fim_middle>// class below is data class\n"}