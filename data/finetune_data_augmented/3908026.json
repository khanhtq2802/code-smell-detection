{"text": "<fim_prefix>package org.apache.archiva.repository;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nimport java.util.Set;\n\n/**\n * Describe the capabilities a repository implementation supports.\n */\n<fim_suffix>public interface RepositoryCapabilities {\n\n    /**\n     * Returns true, if this repository has a mechanism for indexes\n     * @return true, if this repository is indexable, otherwise false.\n     */\n    default boolean isIndexable() {\n        return true;\n    }\n\n    /**\n     * Returns true, if this repository type is storing its artifacts on the filesystem.\n     * @return true, if this is a file based repository, otherwise false.\n     */\n    default boolean isFileBased() {\n        return true;\n    }\n\n    /**\n     * Returns true, if this repository allows to block redeployments to prevent overriding\n     * released artifacts\n     * @return true, if this repo can block redeployments, otherwise false.\n     */\n    default boolean canBlockRedeployments() {\n        return true;\n    }\n\n    /**\n     * Returns true, if the artifacts can be scanned for metadata retrieval or maintenance tasks\n     * @return true, if this repository can be scanned regularily, otherwise false.\n     */\n    default boolean isScannable() {\n        return true;\n    }\n\n    /**\n     * Returns true, if this repository can use failover repository urls\n     * @return true, if there is a failover mechanism for repository access, otherwise false.\n     */\n    default boolean allowsFailover() {\n        return false;\n    }\n\n    /**\n     * Returns the release schemes this repository type can handle\n     */\n    Set<ReleaseScheme> supportedReleaseSchemes();\n\n    /**\n     * Returns the layouts this repository type can provide\n     * @return The list of layouts supported by this repository.\n     */\n    Set<String> supportedLayouts();\n\n    /**\n     * Returns additional capabilities, that this repository type implements.\n     * @return A list of custom capabilities.\n     */\n    Set<String> customCapabilities();\n\n    /**\n     * Returns the supported features this repository type supports. This method returns\n     * string that corresponds to fully qualified class names.\n     * We use string representation to allow implementations provide their own feature\n     * implementations if necessary and to avoid class errors.\n     *\n     * @return The list of supported features as string values.\n     */\n    Set<String> supportedFeatures();\n\n\n}<fim_middle>// class below has no smell\n"}