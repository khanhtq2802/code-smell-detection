{"text": "<fim_prefix>\n<fim_suffix>public class PerforceScmProvider\n    extends AbstractScmProvider\n{\n    private static final String[] PROTOCOLS = { \"tcp\", \"tcp4\", \"tcp6\", \"tcp46\", \"tcp64\", \"ssl\", \"ssl4\", \"ssl6\",\n        \"ssl46\", \"ssl64\" };\n    // ----------------------------------------------------------------------\n    // ScmProvider Implementation\n    // ----------------------------------------------------------------------\n    public boolean requiresEditMode()\n    {\n        return true;\n    }\n    public ScmProviderRepository makeProviderScmRepository( String scmSpecificUrl, char delimiter )\n        throws ScmRepositoryException\n    {\n        String protocol = null;\n        String path;\n        int port = 0;\n        String host = null;\n        //minimal logic to support perforce protocols in scm url, and keep the next part unchange\n        int i0 = scmSpecificUrl.indexOf( delimiter );\n        if ( i0 > 0 )\n        {\n            protocol = scmSpecificUrl.substring( 0, i0 );\n            HashSet<String> protocols = new HashSet<String>( Arrays.asList( PROTOCOLS ) );\n            if ( protocols.contains( protocol ) )\n            {\n                scmSpecificUrl = scmSpecificUrl.substring( i0 + 1 );\n            }\n            else\n            {\n                protocol = null;\n            }\n        }\n        int i1 = scmSpecificUrl.indexOf( delimiter );\n        int i2 = scmSpecificUrl.indexOf( delimiter, i1 + 1 );\n        if ( i1 > 0 )\n        {\n            int lastDelimiter = scmSpecificUrl.lastIndexOf( delimiter );\n            path = scmSpecificUrl.substring( lastDelimiter + 1 );\n            host = scmSpecificUrl.substring( 0, i1 );\n            // If there is tree parts in the scm url, the second is the port\n            if ( i2 >= 0 )\n            {\n                try\n                {\n                    String tmp = scmSpecificUrl.substring( i1 + 1, lastDelimiter );\n                    port = Integer.parseInt( tmp );\n                }\n                catch ( NumberFormatException ex )\n                {\n                    throw new ScmRepositoryException( \"The port has to be a number.\" );\n                }\n            }\n        }\n        else\n        {\n            path = scmSpecificUrl;\n        }\n        String user = null;\n        String password = null;\n        if ( host != null && host.indexOf( '@' ) > 1 )\n        {\n            user = host.substring( 0, host.indexOf( '@' ) );\n            host = host.substring( host.indexOf( '@' ) + 1 );\n        }\n        if ( path.indexOf( '@' ) > 1 )\n        {\n            if ( host != null )\n            {\n                if ( getLogger().isWarnEnabled() )\n                {\n                    getLogger().warn(\n                                      \"Username as part of path is deprecated, the new format is \"\n                                          + \"scm:perforce:[username@]host:port:path_to_repository\" );\n                }\n            }\n            user = path.substring( 0, path.indexOf( '@' ) );\n            path = path.substring( path.indexOf( '@' ) + 1 );\n        }\n        return new PerforceScmProviderRepository( protocol, host, port, path, user, password );\n    }\n    public String getScmType()\n    {\n        return \"perforce\";\n    }\n    /** {@inheritDoc} */\n    protected ChangeLogScmResult changelog( ScmProviderRepository repository, ScmFileSet fileSet,\n                                            CommandParameters parameters )\n        throws ScmException\n    {\n        PerforceChangeLogCommand command = new PerforceChangeLogCommand();\n        command.setLogger( getLogger() );\n        return (ChangeLogScmResult) command.execute( repository, fileSet, parameters );\n    }\n    public AddScmResult add( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters params )\n        throws ScmException\n    {\n        PerforceAddCommand command = new PerforceAddCommand();\n        command.setLogger( getLogger() );\n        return (AddScmResult) command.execute( repository, fileSet, params );\n    }\n    protected RemoveScmResult remove( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters params )\n        throws ScmException\n    {\n        PerforceRemoveCommand command = new PerforceRemoveCommand();\n        command.setLogger( getLogger() );\n        return (RemoveScmResult) command.execute( repository, fileSet, params );\n    }\n    protected CheckInScmResult checkin( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters params )\n        throws ScmException\n    {\n        PerforceCheckInCommand command = new PerforceCheckInCommand();\n        command.setLogger( getLogger() );\n        return (CheckInScmResult) command.execute( repository, fileSet, params );\n    }\n    protected CheckOutScmResult checkout( ScmProviderRepository repository, ScmFileSet fileSet,\n                                          CommandParameters params )\n        throws ScmException\n    {\n        PerforceCheckOutCommand command = new PerforceCheckOutCommand();\n        command.setLogger( getLogger() );\n        return (CheckOutScmResult) command.execute( repository, fileSet, params );\n    }\n    protected DiffScmResult diff( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters params )\n        throws ScmException\n    {\n        PerforceDiffCommand command = new PerforceDiffCommand();\n        command.setLogger( getLogger() );\n        return (DiffScmResult) command.execute( repository, fileSet, params );\n    }\n    protected EditScmResult edit( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters params )\n        throws ScmException\n    {\n        PerforceEditCommand command = new PerforceEditCommand();\n        command.setLogger( getLogger() );\n        return (EditScmResult) command.execute( repository, fileSet, params );\n    }\n    protected LoginScmResult login( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters params )\n        throws ScmException\n    {\n        PerforceLoginCommand command = new PerforceLoginCommand();\n        command.setLogger( getLogger() );\n        return (LoginScmResult) command.execute( repository, fileSet, params );\n    }\n    protected StatusScmResult status( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters params )\n        throws ScmException\n    {\n        PerforceStatusCommand command = new PerforceStatusCommand();\n        command.setLogger( getLogger() );\n        return (StatusScmResult) command.execute( repository, fileSet, params );\n    }\n    protected TagScmResult tag( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters params )\n        throws ScmException\n    {\n        PerforceTagCommand command = new PerforceTagCommand();\n        command.setLogger( getLogger() );\n        return (TagScmResult) command.execute( repository, fileSet, params );\n    }\n    protected UnEditScmResult unedit( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters params )\n        throws ScmException\n    {\n        PerforceUnEditCommand command = new PerforceUnEditCommand();\n        command.setLogger( getLogger() );\n        return (UnEditScmResult) command.execute( repository, fileSet, params );\n    }\n    protected UpdateScmResult update( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters params )\n        throws ScmException\n    {\n        PerforceUpdateCommand command = new PerforceUpdateCommand();\n        command.setLogger( getLogger() );\n        return (UpdateScmResult) command.execute( repository, fileSet, params );\n    }\n    protected BlameScmResult blame( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters params )\n        throws ScmException\n    {\n        PerforceBlameCommand command = new PerforceBlameCommand();\n        command.setLogger( getLogger() );\n        return (BlameScmResult) command.execute( repository, fileSet, params );\n    }\n    public static Commandline createP4Command( PerforceScmProviderRepository repo, File workingDir )\n    {\n        Commandline command = new Commandline();\n        command.setExecutable( \"p4\" );\n        if ( workingDir != null )\n        {\n            // SCM-209\n            command.createArg().setValue( \"-d\" );\n            command.createArg().setValue( workingDir.getAbsolutePath() );\n        }\n        if ( repo.getHost() != null )\n        {\n            command.createArg().setValue( \"-p\" );\n            String value = \"\";\n            if ( ! StringUtils.isBlank( repo.getProtocol() ) )\n            {\n                value += repo.getProtocol() + \":\";\n            }\n            value += repo.getHost();\n            if ( repo.getPort() != 0 )\n            {\n                value += \":\" + Integer.toString( repo.getPort() );\n            }\n            command.createArg().setValue( value );\n        }\n        if ( StringUtils.isNotEmpty( repo.getUser() ) )\n        {\n            command.createArg().setValue( \"-u\" );<fim_middle>// class below is blob\n"}