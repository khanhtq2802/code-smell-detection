{"text": "<fim_prefix>import org.eclipse.xtext.xbase.typesystem.IBatchTypeResolver;\nimport org.eclipse.xtext.xbase.typesystem.IResolvedTypes;\nimport org.eclipse.xtext.xbase.typesystem.conformance.RawTypeConformanceComputer;\nimport org.eclipse.xtext.xbase.typesystem.references.ITypeReferenceOwner;\nimport org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference;\nimport org.eclipse.xtext.xbase.typesystem.references.StandardTypeReferenceOwner;\nimport org.eclipse.xtext.xbase.typesystem.util.CommonTypeComputationServices;\nimport com.google.inject.Inject;\n/**\n * @author Sven Efftinge - Initial contribution and API\n */\npublic abstract class AbstractXbaseCompiler {\n\t@Inject\n\tprivate TypeReferenceSerializer referenceSerializer;\n\tpublic TypeReferenceSerializer getTypeReferenceSerializer() {\n\t\treturn referenceSerializer;\n\t}\n\t@Inject\n\tprivate CommonTypeComputationServices services;\n\t@Inject\n\tprivate JavaKeywords javaUtils;\n\t@Inject \n\tprivate IBatchTypeResolver typeResolver;\n\t// TODO doublecheck usage of this one\n\t@Inject\n\tprivate IEarlyExitComputer exitComputer;\n\tprivate IBatchTypeResolver getTypeResolver() {\n\t\treturn typeResolver;\n\t}\n\t/* @Nullable */\n\tprotected JvmType findKnownTopLevelType(Class<?> rawType, Notifier context) {\n\t\tif (rawType.isArray()) {\n\t\t\tthrow new IllegalArgumentException(rawType.getCanonicalName());\n\t\t}\n\t\tif (rawType.isPrimitive()) {\n\t\t\tthrow new IllegalArgumentException(rawType.getName());\n\t\t}\n\t\tResourceSet resourceSet = EcoreUtil2.getResourceSet(context);\n\t\tif (resourceSet == null) {\n\t\t\treturn null;\n\t\t}\n\t\tResource typeResource = resourceSet.getResource(URIHelperConstants.OBJECTS_URI.appendSegment(rawType.getName()), true);\n\t\tList<EObject> resourceContents = typeResource.getContents();\n\t\tif (resourceContents.isEmpty())\n\t\t\treturn null;\n\t\tJvmType type = (JvmType) resourceContents.get(0);\n\t\treturn type;\n\t}\n\t/* @Nullable */\n\tprotected JvmType findKnownType(Class<?> rawType, Notifier context) {\n\t\tif (rawType.isArray()) {\n\t\t\tthrow new IllegalArgumentException(rawType.getCanonicalName());\n\t\t}\n\t\tif (rawType.isPrimitive()) {\n\t\t\tthrow new IllegalArgumentException(rawType.getName());\n\t\t}\t\tResourceSet resourceSet = EcoreUtil2.getResourceSet(context);\n\t\tif (resourceSet == null) {\n\t\t\treturn null;\n\t\t}\n\t\tClass<?> declaringClass = rawType.getDeclaringClass();\n\t\tif (declaringClass == null) {\n\t\t\treturn findKnownTopLevelType(rawType, resourceSet);\n\t\t}\n\t\tJvmType result = (JvmType) resourceSet.getEObject(URIHelperConstants.OBJECTS_URI.appendSegment(declaringClass.getName()).appendFragment(rawType.getName()), true);\n\t\treturn result;\n\t}\n\tprotected CommonTypeComputationServices getTypeComputationServices() {\n\t\treturn services;\n\t}\n\tprotected ITypeReferenceOwner newTypeReferenceOwner(EObject context) {\n\t\treturn new StandardTypeReferenceOwner(services, context);\n\t}\n\tprotected LightweightTypeReference toLightweight(JvmTypeReference reference, EObject context) {\n\t\treturn newTypeReferenceOwner(context).toLightweightTypeReference(reference);\n\t}\n\tpublic ITreeAppendable compile(XExpression obj, ITreeAppendable appendable, LightweightTypeReference expectedReturnType) {\n\t\tcompile(obj, appendable, expectedReturnType, null);\n\t\treturn appendable;\n\t}\n\tpublic ITreeAppendable compileAsJavaExpression(XExpression obj, ITreeAppendable parentAppendable, JvmTypeReference expectedType) {\n\t\tLightweightTypeReference converted = null;\n\t\tif (expectedType != null) {\n\t\t\tconverted = newTypeReferenceOwner(obj).toLightweightTypeReference(expectedType);\n\t\t}\n\t\treturn compileAsJavaExpression(obj, parentAppendable, converted);\n\t}\n\tpublic ITreeAppendable compileAsJavaExpression(XExpression obj, ITreeAppendable parentAppendable, LightweightTypeReference expectedType) {\n\t\tITreeAppendable appendable = parentAppendable.trace(obj, true);\n\t\tif (expectedType == null) {\n\t\t\texpectedType = getLightweightReturnType(obj);\n\t\t\tif (expectedType == null) {\n\t\t\t\texpectedType = getLightweightType(obj);\n\t\t\t}\n\t\t}\n\t\tfinal boolean isPrimitiveVoidExpected = expectedType.isPrimitiveVoid(); \n\t\tfinal boolean isPrimitiveVoid = isPrimitiveVoid(obj);\n\t\tfinal boolean earlyExit = isEarlyExit(obj);\n\t\tboolean needsSneakyThrow = needsSneakyThrow(obj, Collections.<JvmTypeReference>emptySet());\n\t\tboolean needsToBeWrapped = earlyExit || needsSneakyThrow || !canCompileToJavaExpression(obj, appendable);\n\t\tif (needsToBeWrapped) {\n\t\t\tappendable.openScope();\n\t\t\ttry {\n\t\t\t\tif (appendable.hasObject(\"this\")) {\n\t\t\t\t\tObject thisElement = appendable.getObject(\"this\");\n\t\t\t\t\tif (thisElement instanceof JvmType) {\n\t\t\t\t\t\tappendable.declareVariable(thisElement, ((JvmType) thisElement).getSimpleName()+\".this\");\n\t\t\t\t\t\tif (appendable.hasObject(\"super\")) {\n\t\t\t\t\t\t\tObject superElement = appendable.getObject(\"super\");\n\t\t\t\t\t\t\tif (superElement instanceof JvmType) {\n\t\t\t\t\t\t\t\tappendable.declareVariable(superElement, ((JvmType) thisElement).getSimpleName()+\".super\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tappendable.append(\"new \");\n\t\t\t\tJvmType procedureOrFunction = null;\n\t\t\t\tif (isPrimitiveVoidExpected) {\n\t\t\t\t\tprocedureOrFunction = findKnownType(Procedures.Procedure0.class, obj);\n\t\t\t\t} else {\n\t\t\t\t\tprocedureOrFunction = findKnownType(Functions.Function0.class, obj);\n\t\t\t\t}\n\t\t\t\tif (procedureOrFunction != null) {\n\t\t\t\t\tappendable.append(procedureOrFunction);\n\t\t\t\t\tif (!isPrimitiveVoidExpected) {\n\t\t\t\t\t\tappendable.append(\"<\");\n\t\t\t\t\t\tappendable.append(expectedType.getWrapperTypeIfPrimitive());\n\t\t\t\t\t\tappendable.append(\">\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tappendable.append(\"Object\");\n\t\t\t\t}\n\t\t\t\tappendable.append(\"() {\").increaseIndentation();\n\t\t\t\tappendable.newLine().append(\"public \");\n\t\t\t\tappendable.append(expectedType.getWrapperTypeIfPrimitive());\n\t\t\t\tappendable.append(\" apply() {\").increaseIndentation();\n\t\t\t\tif (needsSneakyThrow) {\n\t\t\t\t\tappendable.newLine().append(\"try {\").increaseIndentation();\n\t\t\t\t}\n\t\t\t\tinternalToJavaStatement(obj, appendable, !isPrimitiveVoidExpected && !isPrimitiveVoid && !earlyExit);\n\t\t\t\tif (!isPrimitiveVoidExpected && !earlyExit) {\n\t\t\t\t\t\tappendable.newLine().append(\"return \");\n\t\t\t\t\t\tif (isPrimitiveVoid && !isPrimitiveVoidExpected) {\n\t\t\t\t\t\t\tappendDefaultLiteral(appendable, expectedType);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinternalToJavaExpression(obj, appendable);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tappendable.append(\";\");\n\t\t\t\t}\n\t\t\t\tif (needsSneakyThrow) {\n\t\t\t\t\tgenerateCheckedExceptionHandling(appendable);\n\t\t\t\t}\n\t\t\t\tappendable.decreaseIndentation().newLine().append(\"}\");\n\t\t\t\tappendable.decreaseIndentation().newLine().append(\"}.apply()\");\n\t\t\t\tif (expectedType.isPrimitive()) {\n\t\t\t\t\tappendable.append(\".\").append(expectedType.getSimpleName()).append(\"Value()\");\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tappendable.closeScope();\n\t\t\t}\n\t\t} else {\n\t\t\tinternalToJavaExpression(obj, appendable);\n\t\t}\n\t\treturn parentAppendable;\n\t}\n<fim_suffix>\tprotected void appendDefaultLiteral(ITreeAppendable b, /* @Nullable */ LightweightTypeReference type) {\n\t\tif (type != null && type.isPrimitive()) {\n\t\t\tPrimitive primitiveKind = type.getPrimitiveKind();\n\t\t\tswitch (primitiveKind) {\n\t\t\t\tcase Boolean:\n\t\t\t\t\tb.append(\"false\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tb.append(\"0\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tb.append(\"null\");\n\t\t}\n\t}<fim_middle>// function below has no smell\n"}