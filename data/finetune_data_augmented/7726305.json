{"text": "<fim_prefix>/*\n * Copyright (c) 2018 VMware, Inc. All Rights Reserved.\n *\n * This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n * You may not use this product except in compliance with the License.\n *\n * This product may include a number of subcomponents with separate copyright notices\n * and license terms. Your use of these subcomponents is subject to the terms and\n * conditions of the subcomponent's license, as noted in the LICENSE file.\n */\npackage com.vmware.photon.controller.model.adapters.registry.operations;\nimport static com.vmware.xenon.common.ServiceDocumentDescription.PropertyUsageOption.AUTO_MERGE_IF_NOT_NULL;\nimport static com.vmware.xenon.common.ServiceDocumentDescription.PropertyUsageOption.OPTIONAL;\nimport static com.vmware.xenon.common.ServiceDocumentDescription.PropertyUsageOption.REQUIRED;\nimport static com.vmware.xenon.common.ServiceDocumentDescription.PropertyUsageOption.SINGLE_ASSIGNMENT;\nimport java.net.URI;\nimport java.util.Map;\nimport com.esotericsoftware.kryo.serializers.VersionFieldSerializer.Since;\nimport com.vmware.photon.controller.model.ServiceUtils;\nimport com.vmware.photon.controller.model.UriPaths;\nimport com.vmware.photon.controller.model.constants.ReleaseConstants;\nimport com.vmware.photon.controller.model.data.Schema;\nimport com.vmware.photon.controller.model.util.AssertUtil;\nimport com.vmware.xenon.common.Operation;\nimport com.vmware.xenon.common.ServiceDocument;\nimport com.vmware.xenon.common.ServiceDocumentDescription.PropertyIndexingOption;\nimport com.vmware.xenon.common.StatefulService;\nimport com.vmware.xenon.common.UriUtils;\nimport com.vmware.xenon.common.Utils;\n/**\n * Represents an resource operation specification.\n */\npublic class ResourceOperationSpecService extends StatefulService {\n    public static final String FACTORY_LINK = UriPaths.CONFIG + \"/resource-operation\";\n    public static final String ADAPTER_PATH_STEP_OPERATION = \"operation\";\n    /**\n     * possible resource types\n     */\n    public enum ResourceType {\n        COMPUTE, NETWORK, STORAGE\n    }\n    /**\n     * This class represents the document state associated with a\n     * {@link ResourceOperationSpecService}.\n     */\n    public static class ResourceOperationSpec extends ServiceDocument {\n        public static class Extension {\n            public static final String KIND = Utils.buildKind(Extension.class);\n            public String documentKind = KIND;\n        }\n        public static final String FIELD_NAME_OPERATION = \"operation\";\n        public static final String FIELD_NAME_ENDPOINT_TYPE = \"endpointType\";\n        public static final String FIELD_NAME_RESOURCE_TYPE = \"resourceType\";\n        public static final String FIELD_NAME_NAME = \"name\";\n        public static final String FIELD_NAME_DESCRIPTION = \"description\";\n        public static final String FIELD_NAME_ADAPTER_REFERENCE = \"adapterReference\";\n        public static final String FIELD_NAME_TARGET_CRITERIA = \"targetCriteria\";\n        public static final String FIELD_NAME_SCHEMA = \"schema\";\n        @Documentation(description = \"The operation technical name.\", exampleString = \"powerOff, powerOn, snapshot, reconfigure, etc.\")\n        @PropertyOptions(usage = { SINGLE_ASSIGNMENT, REQUIRED }, indexing = {\n                PropertyIndexingOption.FIXED_ITEM_NAME, PropertyIndexingOption.SORT })\n        public String operation;\n        @Documentation(description = \"Endpoint type for which the resource operation is defined\", exampleString = \"azure, aws, gcp, vsphere, openstack, virtustream, etc.\")\n        @PropertyOptions(usage = { SINGLE_ASSIGNMENT, REQUIRED }, indexing = {\n                PropertyIndexingOption.FIXED_ITEM_NAME, PropertyIndexingOption.SORT })\n        public String endpointType;\n        @Documentation(description = \"Resource type for which the resource operation is applicable\")\n        @PropertyOptions(usage = { SINGLE_ASSIGNMENT, REQUIRED }, indexing = {\n                PropertyIndexingOption.FIXED_ITEM_NAME, PropertyIndexingOption.SORT })\n        public ResourceType resourceType;\n        /**\n         * Name of the photon model adapter instance\n         */\n        @Documentation(description = \"Name of the photon model adapter configuration.\", exampleString = \"Openstack, Virtustream, etc.\")\n        @PropertyOptions(indexing = { PropertyIndexingOption.CASE_INSENSITIVE,\n                PropertyIndexingOption.SORT })\n        public String name;\n        /**\n         * User-friendly description of the resource operation.\n         */\n        @PropertyOptions(indexing = PropertyIndexingOption.CASE_INSENSITIVE)\n        public String description;\n        /**\n         * URI reference to the adapter for the resource operation.\n         */\n        @PropertyOptions(usage = { SINGLE_ASSIGNMENT,\n                REQUIRED }, indexing = PropertyIndexingOption.STORE_ONLY)\n        public URI adapterReference;\n        /**\n         * Target criteria, as JavaScript source, for this resource operation.\n         * <p>\n         * Callers shall evaluate the targetCriteria in the context of the resource for which the\n         * operation is activated, e.g. for Compute this shall be the\n         * {@link com.vmware.photon.controller.model.resources.ComputeService.ComputeState}\n         * <p>\n         * example: {@code ResourceOperationUtils.SCRIPT_CONTEXT_RESOURCE +\n         * \".hostName.startsWith('myPrefix') && \"\n         * + ResourceOperationUtils.SCRIPT_CONTEXT_RESOURCE + \".cpuCount==4\"}\n         */\n        @PropertyOptions(usage = {\n                SINGLE_ASSIGNMENT }, indexing = PropertyIndexingOption.STORE_ONLY)\n        @Since(ReleaseConstants.RELEASE_VERSION_0_6_14)\n        public String targetCriteria;\n        @Documentation(description = \"Optional schema describing the expected by the resource operation payload\")\n        @PropertyOptions(usage = { SINGLE_ASSIGNMENT,\n                OPTIONAL }, indexing = PropertyIndexingOption.EXPAND)\n        @Since(ReleaseConstants.RELEASE_VERSION_0_6_18)\n        public Schema schema;\n        @Documentation(description = \"Optional extensions, e.g. UI specific configuration, related to the \"\n                + \"resource operation specification.The values of the map shall be\"\n                + \"specialization of ResourceOperationSpec.Extension\")\n        @PropertyOptions(usage = { AUTO_MERGE_IF_NOT_NULL,\n                OPTIONAL }, indexing = PropertyIndexingOption.EXPAND)\n        @Since(ReleaseConstants.RELEASE_VERSION_0_6_19)\n        public Map<String, String> extensions;\n        @Override\n        public String toString() {\n            return String.format(\"%s[\"\n                    + \"operation=%s, endpointType=%s, resourceType=%s, \"\n                    + \"adapterReference=%s, \"\n                    + \"name=%s, description=%s, \"\n                    + \"documentSelfLink=%s, \"\n                    + \"targetCriteria=%s, \"\n                    + \"schema=%s, \"\n                    + \"extensions=%s]\",\n                    getClass().getSimpleName(),\n                    this.operation, this.endpointType, this.resourceType,\n                    this.adapterReference,\n                    this.name, this.description,\n                    this.documentSelfLink,\n                    this.targetCriteria,\n                    this.schema,\n                    this.extensions);\n        }\n    }\n<fim_suffix>    public ResourceOperationSpecService() {\n        super(ResourceOperationSpec.class);\n        super.toggleOption(ServiceOption.PERSISTENCE, true);\n        super.toggleOption(ServiceOption.REPLICATION, true);\n        super.toggleOption(ServiceOption.OWNER_SELECTION, true);\n        super.toggleOption(ServiceOption.IDEMPOTENT_POST, true);\n    }\n    @Override\n    public ServiceDocument getDocumentTemplate() {\n        ServiceDocument template = super.getDocumentTemplate();\n        ServiceUtils.setRetentionLimit(template);\n        return template;\n    }\n    public static String buildDefaultAdapterLink(String endpointType,\n            ResourceType resourceType,\n            String operation) {\n        AssertUtil.assertNotEmpty(endpointType, \"'endpointType' must be set.\");\n        AssertUtil.assertNotNull(resourceType, \"'resourceType' must be set.\");\n        AssertUtil.assertNotEmpty(operation, \"'operation' must be set.\");\n        return UriUtils.buildUriPath(\n                UriPaths.PROVISIONING,\n                endpointType,\n                ADAPTER_PATH_STEP_OPERATION,\n                resourceType.toString().toLowerCase(),\n                operation.toLowerCase() + \"-adapter\");\n    }\n    @Override\n    public void handlePatch(Operation patch) {\n        ResourceOperationSpec currentState = getState(patch);\n        ResourceOperationSpec body = patch.getBody(ResourceOperationSpec.class);\n        validate(body, patch.getRefererAsString());\n        boolean merged = Utils.mergeWithState(getStateDescription(), currentState, body);\n        if (merged) {\n            logFine(\"%s updated.\", currentState);\n        } else {\n            patch.setStatusCode(Operation.STATUS_CODE_NOT_MODIFIED);\n        }\n        patch.complete();\n    }\n    private void validate(ResourceOperationSpec body, String referer) {\n        AssertUtil.assertTrue(body.name == null,\n                \"Cannot override 'name'. Referer: \" + referer);\n        AssertUtil.assertTrue(body.description == null,\n                \"Cannot override 'description'. Referer: \" + referer);<fim_middle>// function below has no smell\n"}