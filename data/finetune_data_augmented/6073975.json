{"text": "<fim_prefix>/*\n * Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage org.eclipse.ceylon.langtools.classfile;\n\nimport java.io.IOException;\n\n/**\n * See JVMS, section 4.8.16.\n *\n *  <p><b>This is NOT part of any supported API.\n *  If you write code that depends on this, you do so at your own risk.\n *  This code and its internal interfaces are subject to change or\n *  deletion without notice.</b>\n */\npublic class Annotation {\n    static class InvalidAnnotation extends AttributeException {\n        private static final long serialVersionUID = -4620480740735772708L;\n        InvalidAnnotation(String msg) {\n            super(msg);\n        }\n    }\n\n    Annotation(ClassReader cr) throws IOException, InvalidAnnotation {\n        type_index = cr.readUnsignedShort();\n        num_element_value_pairs = cr.readUnsignedShort();\n        element_value_pairs = new element_value_pair[num_element_value_pairs];\n        for (int i = 0; i < element_value_pairs.length; i++)\n            element_value_pairs[i] = new element_value_pair(cr);\n    }\n\n    public Annotation(ConstantPool constant_pool,\n            int type_index,\n            element_value_pair[] element_value_pairs) {\n        this.type_index = type_index;\n        num_element_value_pairs = element_value_pairs.length;\n        this.element_value_pairs = element_value_pairs;\n    }\n\n    public int length() {\n        int n = 2 /*type_index*/ + 2 /*num_element_value_pairs*/;\n        for (element_value_pair pair: element_value_pairs)\n            n += pair.length();\n        return n;\n    }\n\n    public final int type_index;\n    public final int num_element_value_pairs;\n    public final element_value_pair element_value_pairs[];\n\n    /**\n     * See JVMS, section 4.8.16.1.\n     */\n    public static abstract class element_value {\n        public static element_value read(ClassReader cr)\n                throws IOException, InvalidAnnotation {\n            int tag = cr.readUnsignedByte();\n            switch (tag) {\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'F':\n            case 'I':\n            case 'J':\n            case 'S':\n            case 'Z':\n            case 's':\n                return new Primitive_element_value(cr, tag);\n\n            case 'e':\n                return new Enum_element_value(cr, tag);\n\n            case 'c':\n                return new Class_element_value(cr, tag);\n\n            case '@':\n                return new Annotation_element_value(cr, tag);\n\n            case '[':\n                return new Array_element_value(cr, tag);\n\n            default:\n                throw new InvalidAnnotation(\"unrecognized tag: \" + tag);\n            }\n        }\n\n        protected element_value(int tag) {\n            this.tag = tag;\n        }\n\n        public abstract int length();\n\n        public abstract <R,P> R accept(Visitor<R,P> visitor, P p);\n\n        public interface Visitor<R,P> {\n            R visitPrimitive(Primitive_element_value ev, P p);\n            R visitEnum(Enum_element_value ev, P p);\n            R visitClass(Class_element_value ev, P p);\n            R visitAnnotation(Annotation_element_value ev, P p);\n            R visitArray(Array_element_value ev, P p);\n        }\n\n        public final int tag;\n    }\n\n    public static class Primitive_element_value extends element_value {\n        Primitive_element_value(ClassReader cr, int tag) throws IOException {\n            super(tag);\n            const_value_index = cr.readUnsignedShort();\n        }\n\n<fim_suffix>        @Override\n        public int length() {\n            return 2;\n        }\n\n        public <R,P> R accept(Visitor<R,P> visitor, P p) {\n            return visitor.visitPrimitive(this, p);\n        }\n\n        public final int const_value_index;\n\n    }\n\n    public static class Enum_element_value extends element_value {\n        Enum_element_value(ClassReader cr, int tag) throws IOException {\n            super(tag);\n            type_name_index = cr.readUnsignedShort();\n            const_name_index = cr.readUnsignedShort();\n        }\n\n        @Override\n        public int length() {\n            return 4;\n        }\n\n        public <R,P> R accept(Visitor<R,P> visitor, P p) {\n            return visitor.visitEnum(this, p);\n        }\n\n        public final int type_name_index;\n        public final int const_name_index;\n    }\n\n    public static class Class_element_value extends element_value {\n        Class_element_value(ClassReader cr, int tag) throws IOException {\n            super(tag);\n            class_info_index = cr.readUnsignedShort();\n        }\n\n        @Override\n        public int length() {\n            return 2;\n        }\n\n        public <R,P> R accept(Visitor<R,P> visitor, P p) {\n            return visitor.visitClass(this, p);\n        }\n\n        public final int class_info_index;\n    }\n\n    public static class Annotation_element_value extends element_value {\n        Annotation_element_value(ClassReader cr, int tag)\n                throws IOException, InvalidAnnotation {\n            super(tag);\n            annotation_value = new Annotation(cr);\n        }\n\n        @Override\n        public int length() {\n            return annotation_value.length();\n        }\n\n        public <R,P> R accept(Visitor<R,P> visitor, P p) {\n            return visitor.visitAnnotation(this, p);\n        }\n\n        public final Annotation annotation_value;\n    }\n\n    public static class Array_element_value extends element_value {\n        Array_element_value(ClassReader cr, int tag)\n                throws IOException, InvalidAnnotation {\n            super(tag);\n            num_values = cr.readUnsignedShort();\n            values = new element_value[num_values];\n            for (int i = 0; i < values.length; i++)\n                values[i] = element_value.read(cr);\n        }\n\n        @Override\n        public int length() {\n            int n = 2;\n            for (int i = 0; i < values.length; i++)\n                n += values[i].length();\n            return n;\n        }\n\n        public <R,P> R accept(Visitor<R,P> visitor, P p) {\n            return visitor.visitArray(this, p);\n        }\n\n        public final int num_values;\n        public final element_value[] values;\n    }\n\n    public static class element_value_pair {\n        element_value_pair(ClassReader cr)\n                throws IOException, InvalidAnnotation {\n            element_name_index = cr.readUnsignedShort();\n            value = element_value.read(cr);\n        }\n\n        public int length() {\n            return 2 + value.length();\n        }\n\n        public final int element_name_index;\n        public final element_value value;\n    }\n}<fim_middle>// function below has no smell\n"}