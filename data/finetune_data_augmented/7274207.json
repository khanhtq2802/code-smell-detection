{"text": "<fim_prefix>/*\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n *\n * Copyright 1997-2014 Oracle and/or its affiliates. All rights reserved.\n *\n * Oracle and Java are registered trademarks of Oracle and/or its affiliates.\n * Other names may be trademarks of their respective owners.\n *\n * The contents of this file are subject to the terms of either the GNU\n * General Public License Version 2 only (\"GPL\") or the Common\n * Development and Distribution License(\"CDDL\") (collectively, the\n * \"License\"). You may not use this file except in compliance with the\n * License. You can obtain a copy of the License at\n * http://www.netbeans.org/cddl-gplv2.html\n * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the\n * specific language governing permissions and limitations under the\n * License.  When distributing the software, include this License Header\n * Notice in each file and include the License file at\n * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the GPL Version 2 section of the License file that\n * accompanied this code. If applicable, add the following below the\n * License Header, with the fields enclosed by brackets [] replaced by\n * your own identifying information:\n * \"Portions Copyrighted [year] [name of copyright owner]\"\n *\n * Contributor(s):\n * The Original Software is NetBeans. The Initial Developer of the Original\n * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun\n * Microsystems, Inc. All Rights Reserved.\n *\n * If you wish your version of this file to be governed by only the CDDL\n * or only the GPL Version 2, indicate your decision by adding\n * \"[Contributor] elects to include this software in this distribution\n * under the [CDDL or GPL Version 2] license.\" If you do not indicate a\n * single choice of license, a recipient has the option to distribute\n * your version of this file under either the CDDL, the GPL Version 2 or\n * to extend the choice of license to its licensees as provided above.\n * However, if you add GPL Version 2 code and therefore, elected the GPL\n * Version 2 license, then the option applies only if the new code is\n * made subject to such option by the copyright holder.\n */\n\npackage org.graalvm.visualvm.lib.profiler.v2.features;\n\nimport java.awt.event.ActionEvent;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.SwingUtilities;\nimport org.graalvm.visualvm.lib.jfluid.ProfilerClient;\nimport org.graalvm.visualvm.lib.jfluid.client.ClientUtils;\nimport org.graalvm.visualvm.lib.common.Profiler;\nimport org.graalvm.visualvm.lib.ui.components.ProfilerToolbar;\nimport org.graalvm.visualvm.lib.ui.locks.LockContentionPanel;\nimport org.graalvm.visualvm.lib.ui.swing.ActionPopupButton;\nimport org.graalvm.visualvm.lib.ui.swing.GrayLabel;\nimport org.openide.util.NbBundle;\n\n/**\n *\n * @author Jiri Sedlacek\n */\n<fim_suffix>@NbBundle.Messages({\n    \"LocksFeatureUI_show=View by:\",\n    \"LocksFeatureUI_aggregationByThreads=Threads\",\n    \"LocksFeatureUI_aggregationByMonitors=Monitors\",\n    \"LocksFeatureUI_aggregationHint=Results aggregation\"\n})\nabstract class LocksFeatureUI extends FeatureUI {\n    \n    private ProfilerToolbar toolbar;\n    private LockContentionPanel locksView;\n    \n    // --- External implementation ---------------------------------------------\n        \n    abstract ProfilerClient getProfilerClient();\n    \n    abstract void refreshResults();\n    \n   \n    // --- API implementation --------------------------------------------------\n    \n    ProfilerToolbar getToolbar() {\n        if (toolbar == null) initUI();\n        return toolbar;\n    }\n\n    JPanel getResultsUI() {\n        if (locksView == null) initUI();\n        return locksView;\n    }\n    \n    \n    void sessionStateChanged(int sessionState) {\n        refreshToolbar(sessionState);\n        \n        if (sessionState == Profiler.PROFILING_INACTIVE || sessionState == Profiler.PROFILING_IN_TRANSITION) {\n            if (locksView != null) locksView.profilingSessionFinished();\n        } else if (sessionState == Profiler.PROFILING_RUNNING) {\n            if (locksView != null) locksView.profilingSessionStarted();\n        }\n    }\n\n    void resetPause() {\n//        if (lrPauseButton != null) lrPauseButton.setSelected(false);\n    }\n    \n    void setForceRefresh() {\n        if (locksView != null) locksView.setForceRefresh(true);\n    }\n    \n    void refreshData() throws ClientUtils.TargetAppOrVMTerminated {\n        if (locksView != null) locksView.refreshData();\n    }\n        \n    void resetData() {\n        if (locksView != null) locksView.resetData();\n    }\n    \n    \n    // --- UI ------------------------------------------------------------------\n    \n    private JLabel shLabel;\n    private ActionPopupButton shAggregation;\n    \n    \n    private void initUI() {\n        \n        assert SwingUtilities.isEventDispatchThread();\n        \n        // --- Results ---------------------------------------------------------\n\n        locksView = new LockContentionPanel() {\n            protected ProfilerClient getProfilerClient() {\n                return LocksFeatureUI.this.getProfilerClient();\n            }\n        };\n        locksView.lockContentionEnabled();\n        \n        locksView.putClientProperty(\"HelpCtx.Key\", \"ProfileLocks.HelpCtx\"); // NOI18N\n        \n        \n        // --- Toolbar ---------------------------------------------------------\n        \n        shLabel = new GrayLabel(Bundle.LocksFeatureUI_show());\n        \n        Action aThreads = new AbstractAction() {\n            { putValue(NAME, Bundle.LocksFeatureUI_aggregationByThreads()); }\n            public void actionPerformed(ActionEvent e) { setAggregation(LockContentionPanel.Aggregation.BY_THREADS); }\n            \n        };\n        Action aMonitors = new AbstractAction() {\n            { putValue(NAME, Bundle.LocksFeatureUI_aggregationByMonitors()); }\n            public void actionPerformed(ActionEvent e) { setAggregation(LockContentionPanel.Aggregation.BY_MONITORS); }\n            \n        };\n        shAggregation = new ActionPopupButton(aThreads, aMonitors);\n        shAggregation.setToolTipText(Bundle.LocksFeatureUI_aggregationHint());\n\n        toolbar = ProfilerToolbar.create(true);\n\n        toolbar.addSpace(2);\n        toolbar.addSeparator();\n        toolbar.addSpace(5);\n\n        toolbar.add(shLabel);\n        toolbar.addSpace(2);\n        toolbar.add(shAggregation);\n\n\n        // --- Sync UI ---------------------------------------------------------\n        \n        setAggregation(LockContentionPanel.Aggregation.BY_THREADS);\n        sessionStateChanged(getSessionState());\n\n    }\n    \n    private void refreshToolbar(final int state) {\n//        if (toolbar != null) SwingUtilities.invokeLater(new Runnable() {\n//            public void run() {\n//            }\n//        });\n    }\n    \n    private void setAggregation(LockContentionPanel.Aggregation aggregation) {\n        locksView.setAggregation(aggregation);\n        shAggregation.selectAction(aggregation.ordinal());\n    }\n    \n}<fim_middle>// class below is blob\n"}