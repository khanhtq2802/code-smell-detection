{"text": "<fim_prefix>/*\n * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 3 only, as\n * published by the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 3 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 3 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.truffle.r.nodes.control;\n\nimport com.oracle.truffle.api.Truffle;\nimport com.oracle.truffle.api.frame.VirtualFrame;\nimport com.oracle.truffle.api.nodes.LoopNode;\nimport com.oracle.truffle.api.profiles.BranchProfile;\nimport com.oracle.truffle.api.profiles.ConditionProfile;\nimport com.oracle.truffle.api.source.SourceSection;\nimport com.oracle.truffle.r.nodes.function.visibility.SetVisibilityNode;\nimport com.oracle.truffle.r.nodes.unary.ConvertBooleanNode;\nimport com.oracle.truffle.r.runtime.ArgumentsSignature;\nimport com.oracle.truffle.r.runtime.RRuntime;\nimport com.oracle.truffle.r.runtime.data.RNull;\nimport com.oracle.truffle.r.runtime.nodes.RNode;\nimport com.oracle.truffle.r.runtime.nodes.RSyntaxCall;\nimport com.oracle.truffle.r.runtime.nodes.RSyntaxElement;\nimport com.oracle.truffle.r.runtime.nodes.RSyntaxLookup;\nimport com.oracle.truffle.r.runtime.nodes.RSyntaxNode;\n\n<fim_suffix>public final class WhileNode extends AbstractLoopNode implements RSyntaxNode, RSyntaxCall {\n\n    @Child private LoopNode loop;\n    @Child private SetVisibilityNode visibility = SetVisibilityNode.create();\n\n    public WhileNode(SourceSection src, RSyntaxLookup operator, RSyntaxNode condition, RSyntaxNode body) {\n        super(src, operator);\n        this.loop = Truffle.getRuntime().createLoopNode(new WhileRepeatingNode(this, ConvertBooleanNode.create(condition), body.asRNode()));\n    }\n\n    @Override\n    public Object execute(VirtualFrame frame) {\n        loop.executeLoop(frame);\n        visibility.execute(frame, false);\n        return RNull.instance;\n    }\n\n    private static final class WhileRepeatingNode extends AbstractRepeatingNode {\n\n        @Child private ConvertBooleanNode condition;\n\n        private final ConditionProfile conditionProfile = ConditionProfile.createCountingProfile();\n        private final BranchProfile normalBlock = BranchProfile.create();\n        private final BranchProfile breakBlock = BranchProfile.create();\n        private final BranchProfile nextBlock = BranchProfile.create();\n\n        // only used for toString\n        private final WhileNode whileNode;\n\n        WhileRepeatingNode(WhileNode whileNode, ConvertBooleanNode condition, RNode body) {\n            super(body);\n            this.whileNode = whileNode;\n            this.condition = condition;\n            // pre-initialize the profile so that loop exits to not deoptimize\n            conditionProfile.profile(false);\n        }\n\n        @Override\n        public boolean executeRepeating(VirtualFrame frame) {\n            try {\n                if (conditionProfile.profile(condition.executeByte(frame) == RRuntime.LOGICAL_TRUE)) {\n                    body.voidExecute(frame);\n                    normalBlock.enter();\n                    return true;\n                } else {\n                    return false;\n                }\n            } catch (BreakException e) {\n                breakBlock.enter();\n                return false;\n            } catch (NextException e) {\n                nextBlock.enter();\n                return true;\n            }\n        }\n\n        @Override\n        public String toString() {\n            return whileNode.toString();\n        }\n    }\n\n    @Override\n    public RSyntaxElement[] getSyntaxArguments() {\n        WhileRepeatingNode repeatingNode = (WhileRepeatingNode) loop.getRepeatingNode();\n        return new RSyntaxElement[]{repeatingNode.condition.asRSyntaxNode(), repeatingNode.body.asRSyntaxNode()};\n    }\n\n    @Override\n    public ArgumentsSignature getSyntaxSignature() {\n        return ArgumentsSignature.empty(2);\n    }\n}<fim_middle>// class below is blob\n"}