{"text": "<fim_prefix>/* ====================================================================\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n   \n   http://www.apache.org/licenses/LICENSE-2.0\n   \n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n   ==================================================================== */\n\npackage org.apache.poi.ss.util;\n\nimport java.io.IOException;\n\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\n\nimport junit.framework.TestCase;\n\n/**\n * Tests SheetUtil.\n *\n * @see org.apache.poi.ss.util.SheetUtil\n */\npublic final class TestSheetUtil extends TestCase {\n    public void testCellWithMerges() throws Exception {\n        Workbook wb = new HSSFWorkbook();\n        Sheet s = wb.createSheet();\n        \n        // Create some test data\n        Row r2 = s.createRow(1);\n        r2.createCell(0).setCellValue(10);\n        r2.createCell(1).setCellValue(11);\n        Row r3 = s.createRow(2);\n        r3.createCell(0).setCellValue(20);\n        r3.createCell(1).setCellValue(21);\n        \n        s.addMergedRegion(new CellRangeAddress(2, 3, 0, 0));\n        s.addMergedRegion(new CellRangeAddress(2, 2, 1, 4));\n        \n        // With a cell that isn't defined, we'll get null\n        assertEquals(null, SheetUtil.getCellWithMerges(s, 0, 0));\n        \n        // With a cell that's not in a merged region, we'll get that\n        assertEquals(10.0, SheetUtil.getCellWithMerges(s, 1, 0).getNumericCellValue());\n        assertEquals(11.0, SheetUtil.getCellWithMerges(s, 1, 1).getNumericCellValue());\n        \n        // With a cell that's the primary one of a merged region, we get that cell\n        assertEquals(20.0, SheetUtil.getCellWithMerges(s, 2, 0).getNumericCellValue());\n        assertEquals(21., SheetUtil.getCellWithMerges(s, 2, 1).getNumericCellValue());\n        \n        // With a cell elsewhere in the merged region, get top-left\n        assertEquals(20.0, SheetUtil.getCellWithMerges(s, 3, 0).getNumericCellValue());\n        assertEquals(21.0, SheetUtil.getCellWithMerges(s, 2, 2).getNumericCellValue());\n        assertEquals(21.0, SheetUtil.getCellWithMerges(s, 2, 3).getNumericCellValue());\n        assertEquals(21.0, SheetUtil.getCellWithMerges(s, 2, 4).getNumericCellValue());\n        \n        wb.close();\n    }\n    \n    public void testCanComputeWidthHSSF() throws IOException {\n        Workbook wb = new HSSFWorkbook();\n        \n        // cannot check on result because on some machines we get back false here!\n        SheetUtil.canComputeColumnWidth(wb.getFontAt((short)0));\n\n        wb.close();        \n    }\n\n    public void testGetCellWidthEmpty() throws IOException {\n        Workbook wb = new HSSFWorkbook();\n        Sheet sheet = wb.createSheet(\"sheet\");\n        Row row = sheet.createRow(0);\n        Cell cell = row.createCell(0);\n        \n        // no contents: cell.setCellValue(\"sometext\");\n        \n        assertEquals(-1.0, SheetUtil.getCellWidth(cell, 1, null, true));\n        \n        wb.close();\n    }\n\n    public void testGetCellWidthString() throws IOException {\n        Workbook wb = new HSSFWorkbook();\n        Sheet sheet = wb.createSheet(\"sheet\");\n        Row row = sheet.createRow(0);\n        Cell cell = row.createCell(0);\n        \n        cell.setCellValue(\"sometext\");\n        \n        assertTrue(SheetUtil.getCellWidth(cell, 1, null, true) > 0);\n        \n        wb.close();\n    }\n\n    public void testGetCellWidthNumber() throws IOException {\n        Workbook wb = new HSSFWorkbook();\n        Sheet sheet = wb.createSheet(\"sheet\");\n        Row row = sheet.createRow(0);\n        Cell cell = row.createCell(0);\n        \n        cell.setCellValue(88.234);\n        \n        assertTrue(SheetUtil.getCellWidth(cell, 1, null, true) > 0);\n        \n        wb.close();\n    }\n\n    public void testGetCellWidthBoolean() throws IOException {\n        Workbook wb = new HSSFWorkbook();\n        Sheet sheet = wb.createSheet(\"sheet\");\n        Row row = sheet.createRow(0);\n        Cell cell = row.createCell(0);\n        \n        cell.setCellValue(false);\n        \n        assertTrue(SheetUtil.getCellWidth(cell, 1, null, false) > 0);\n        \n        wb.close();\n    }\n\n<fim_suffix>    public void testGetColumnWidthString() throws IOException {\n        Workbook wb = new HSSFWorkbook();\n        Sheet sheet = wb.createSheet(\"sheet\");\n        Row row = sheet.createRow(0);\n        sheet.createRow(1);\n        sheet.createRow(2);\n        Cell cell = row.createCell(0);\n        \n        cell.setCellValue(\"sometext\");\n        \n        assertTrue(\"Having some width for rows with actual cells\", \n                SheetUtil.getColumnWidth(sheet, 0, true) > 0);\n        assertEquals(\"Not having any widht for rows with all empty cells\", \n                -1.0, SheetUtil.getColumnWidth(sheet, 0, true, 1, 2));\n        \n        wb.close();\n    }\n}<fim_middle>// function below has no smell\n"}