{"text": "<fim_prefix> * We copy it here because it's internal and we don't want to rely on their impl changing.\n * This may move in the future, but it looks very stable and can do everything we want.\n */\nabstract public class OperatingSystem {\n    public static final OperatingSystem.Windows WINDOWS = new OperatingSystem.Windows();\n    public static final OperatingSystem.MacOs MAC_OS = new OperatingSystem.MacOs();\n    public static final OperatingSystem.Solaris SOLARIS = new OperatingSystem.Solaris();\n    public static final OperatingSystem.Linux LINUX = new OperatingSystem.Linux();\n    public static final OperatingSystem.FreeBSD FREE_BSD = new OperatingSystem.FreeBSD();\n    public static final OperatingSystem.Unix UNIX = new OperatingSystem.Unix();\n    private static OperatingSystem currentOs;\n    private final String toStringValue;\n    private final String osName;\n    private final String osVersion;\n    OperatingSystem() {\n        osName = System.getProperty(\"os.name\");\n        osVersion = System.getProperty(\"os.version\");\n        toStringValue = getName() + \" \" + getVersion() + \" \" + System.getProperty(\"os.arch\");\n    }\n    public static OperatingSystem current() {\n        if (currentOs == null) {\n            currentOs = forName(System.getProperty(\"os.name\"));\n        }\n        return currentOs;\n    }\n    // for testing current()\n    static void resetCurrent() {\n        currentOs = null;\n    }\n    public static OperatingSystem forName(String os) {\n        String osName = os.toLowerCase();\n        if (osName.contains(\"windows\")) {\n            return WINDOWS;\n        } else if (osName.contains(\"mac os x\") || osName.contains(\"darwin\") || osName.contains(\"osx\")) {\n            return MAC_OS;\n        } else if (osName.contains(\"sunos\") || osName.contains(\"solaris\")) {\n            return SOLARIS;\n        } else if (osName.contains(\"linux\")) {\n            return LINUX;\n        } else if (osName.contains(\"freebsd\")) {\n            return FREE_BSD;\n        } else {\n            // Not strictly true\n            return UNIX;\n        }\n    }\n    @Override\n    public String toString() {\n        return toStringValue;\n    }\n    public String getName() {\n        return osName;\n    }\n    public String getVersion() {\n        return osVersion;\n    }\n    public boolean isWindows() {\n        return false;\n    }\n    public boolean isUnix() {\n        return false;\n    }\n    public boolean isMacOsX() {\n        return false;\n    }\n    public boolean isLinux() {\n        return false;\n    }\n    public abstract String getNativePrefix();\n    public abstract String getScriptName(String scriptPath);\n    public abstract String getExecutableName(String executablePath);\n    public abstract String getSharedLibraryName(String libraryName);\n    public abstract String getStaticLibraryName(String libraryName);\n    public abstract String getFamilyName();\n    /**\n     * Locates the given executable in the system path. Returns null if not found.\n     */\n    @Nullable\n    public File findInPath(List<File> path, String name) {\n        String exeName = getExecutableName(name);\n        if (exeName.contains(File.separator)) {\n            File candidate = new File(exeName);\n            if (candidate.isFile()) {\n                return candidate;\n            }\n            return null;\n        }\n        for (File dir : path) {\n            File candidate = new File(dir, exeName);\n            if (candidate.isFile()) {\n                return candidate;\n            }\n        }\n        return null;\n    }\n    public List<File> findAllInPath(String name) {\n        List<File> all = new LinkedList<File>();\n        for (File dir : getPath()) {\n            File candidate = new File(dir, name);\n            if (candidate.isFile()) {\n                all.add(candidate);\n            }\n        }\n        return all;\n    }\n    public List<File> getPath() {\n        String path = System.getenv(getPathVar());\n        if (path == null) {\n            return Collections.emptyList();\n        }\n        List<File> entries = new ArrayList<File>();\n        for (String entry : path.split(Pattern.quote(File.pathSeparator))) {\n            entries.add(new File(entry));\n        }\n        return entries;\n    }\n    public String getPathVar() {\n        return \"PATH\";\n    }\n    static class Windows extends OperatingSystem {\n        private final String nativePrefix;\n        Windows() {\n            nativePrefix = resolveNativePrefix();\n        }\n        @Override\n        public boolean isWindows() {\n            return true;\n        }\n        @Override\n        public String getFamilyName() {\n            return \"windows\";\n        }\n        @Override\n        public String getScriptName(String scriptPath) {\n            return withSuffix(scriptPath, \".bat\");\n        }\n        @Override\n        public String getExecutableName(String executablePath) {\n            return withSuffix(executablePath, \".exe\");\n        }\n        @Override\n        public String getSharedLibraryName(String libraryPath) {\n            return withSuffix(libraryPath, \".dll\");\n        }\n        @Override\n        public String getStaticLibraryName(String libraryName) {\n            return withSuffix(libraryName, \".lib\");\n        }\n        @Override\n        public String getNativePrefix() {\n            return nativePrefix;\n        }\n        private String resolveNativePrefix() {\n            String arch = System.getProperty(\"os.arch\");\n            if (\"i386\".equals(arch)) {\n                arch = \"x86\";\n            }\n            return \"win32-\" + arch;\n        }\n        private String withSuffix(String executablePath, String extension) {\n            if (executablePath.toLowerCase().endsWith(extension)) {\n                return executablePath;\n            }\n            return executablePath + extension;\n        }\n        @Override\n        public String getPathVar() {\n            return \"Path\";\n        }\n    }\n    static class Unix extends OperatingSystem {\n        private final String nativePrefix;\n        Unix() {\n            this.nativePrefix = resolveNativePrefix();\n        }\n        @Override\n        public String getScriptName(String scriptPath) {\n            return scriptPath;\n        }\n        @Override\n        public String getFamilyName() {\n            return \"unknown\";\n        }\n        @Override\n        public String getExecutableName(String executablePath) {\n            return executablePath;\n        }\n        @Override\n        public String getSharedLibraryName(String libraryName) {\n            return getLibraryName(libraryName, getSharedLibSuffix());\n        }\n        private String getLibraryName(String libraryName, String suffix) {\n            if (libraryName.endsWith(suffix)) {\n                return libraryName;\n            }\n            int pos = libraryName.lastIndexOf('/');\n            if (pos >= 0) {\n                return libraryName.substring(0, pos + 1) + \"lib\" + libraryName.substring(pos + 1) + suffix;\n            } else {\n                return \"lib\" + libraryName + suffix;\n            }\n        }\n        protected String getSharedLibSuffix() {\n            return \".so\";\n        }\n        @Override\n        public String getStaticLibraryName(String libraryName) {\n            return getLibraryName(libraryName, \".a\");\n        }\n        @Override\n        public boolean isUnix() {\n            return true;\n        }\n        @Override\n        public String getNativePrefix() {\n            return nativePrefix;\n        }\n        private String resolveNativePrefix() {\n            String arch = getArch();\n            String osPrefix = getOsPrefix();\n            osPrefix += \"-\" + arch;\n            return osPrefix;\n        }\n        protected String getArch() {\n            String arch = System.getProperty(\"os.arch\");\n            if (\"x86\".equals(arch)) {\n                arch = \"i386\";\n            }\n            if (\"x86_64\".equals(arch)) {\n                arch = \"amd64\";\n            }\n            if (\"powerpc\".equals(arch)) {\n                arch = \"ppc\";\n            }\n            return arch;\n        }\n        protected String getOsPrefix() {\n            String osPrefix = getName().toLowerCase();\n            int space = osPrefix.indexOf(\" \");\n            if (space != -1) {\n                osPrefix = osPrefix.substring(0, space);\n            }\n            return osPrefix;\n        }\n    }\n    static class MacOs extends OperatingSystem.Unix {\n        @Override\n        public boolean isMacOsX() {\n            return true;\n        }\n        @Override\n        public String getFamilyName() {\n            return \"os x\";\n        }\n        @Override\n        protected String getSharedLibSuffix() {\n            return \".dylib\";\n        }\n        @Override\n        public String getNativePrefix() {\n            return \"darwin\";\n        }\n    }\n    static class Linux extends OperatingSystem.Unix {\n        @Override\n        public boolean isLinux() {\n            return true;\n        }\n        @Override\n        public String getFamilyName() {\n            return \"linux\";\n        }\n    }\n    static class FreeBSD extends OperatingSystem.Unix {\n    }\n<fim_suffix>    static class Solaris extends OperatingSystem.Unix {\n        @Override\n        public String getFamilyName() {\n            return \"solaris\";\n        }\n        @Override\n        protected String getOsPrefix() {\n            return \"sunos\";\n        }\n        @Override\n        protected String getArch() {\n            String arch = System.getProperty(\"os.arch\");\n            if (arch.equals(\"i386\") || arch.equals(\"x86\")) {\n                return \"x86\";\n            }\n            return super.getArch();\n        }\n    }<fim_middle>// class below has no smell\n"}