{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.gobblin.dataset;\n\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.google.gson.reflect.TypeToken;\n\nimport lombok.Getter;\n\n\n/**\n * A {@link Descriptor} to identifies a partition of a dataset\n */\n<fim_suffix>public class PartitionDescriptor extends Descriptor {\n\n  /** Type token for ser/de partition descriptor list */\n  private static final Type DESCRIPTOR_LIST_TYPE = new TypeToken<ArrayList<PartitionDescriptor>>(){}.getType();\n\n  @Getter\n  private final DatasetDescriptor dataset;\n\n  public PartitionDescriptor(String name, DatasetDescriptor dataset) {\n    super(name);\n    this.dataset = dataset;\n  }\n\n  @Override\n  public PartitionDescriptor copy() {\n    return new PartitionDescriptor(getName(), dataset);\n  }\n\n  public PartitionDescriptor copyWithNewDataset(DatasetDescriptor dataset) {\n    return new PartitionDescriptor(getName(), dataset);\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    PartitionDescriptor that = (PartitionDescriptor) o;\n    return dataset.equals(that.dataset) && getName().equals(that.getName());\n  }\n\n  @Override\n  public int hashCode() {\n    int result = dataset.hashCode();\n    result = 31 * result + getName().hashCode();\n    return result;\n  }\n\n  /**\n   * Serialize a list of partition descriptors as json string\n   */\n  public static String toPartitionJsonList(List<PartitionDescriptor> descriptors) {\n    return Descriptor.GSON.toJson(descriptors, DESCRIPTOR_LIST_TYPE);\n  }\n\n  /**\n   * Deserialize the string, resulted from {@link #toPartitionJsonList(List)}, to a list of partition descriptors\n   */\n  public static List<PartitionDescriptor> fromPartitionJsonList(String jsonList) {\n    return Descriptor.GSON.fromJson(jsonList, DESCRIPTOR_LIST_TYPE);\n  }\n}<fim_middle>// class below has no smell\n"}