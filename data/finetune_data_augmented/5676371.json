{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.stanbol.entityhub.query.sparql;\n\nimport org.apache.stanbol.entityhub.servicesapi.query.FieldQuery;\nimport org.apache.stanbol.entityhub.servicesapi.query.FieldQueryFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n<fim_suffix>public final class SparqlFieldQueryFactory implements FieldQueryFactory {\n\n    private static SparqlFieldQueryFactory instance;\n\n    public static SparqlFieldQueryFactory getInstance() {\n        if (instance == null) {\n            instance = new SparqlFieldQueryFactory();\n        }\n        return instance;\n    }\n\n    private SparqlFieldQueryFactory() {\n        super();\n    }\n\n    @Override\n    public SparqlFieldQuery createFieldQuery() {\n        return new SparqlFieldQuery();\n    }\n\n    /**\n     * Utility Method to create an {@link SparqlFieldQuery} based on the parse {@link FieldQuery}\n     * \n     * @param parsedQuery\n     *            the parsed Query\n     */\n    public static SparqlFieldQuery getSparqlFieldQuery(FieldQuery parsedQuery) {\n        Logger logger = LoggerFactory.getLogger(SparqlFieldQueryFactory.class);\n\n        if (parsedQuery == null) {\n            logger.trace(\"Parsed query is null.\");\n            return null;\n        } else if (parsedQuery instanceof SparqlFieldQuery) {\n            logger.trace(\"Parsed query is a [SparqlFieldQuery].\");\n            return (SparqlFieldQuery) parsedQuery;\n        } else {\n            logger.trace(\"Parsed query is a [{}].\", parsedQuery.getClass().toString());\n            return parsedQuery.copyTo(new SparqlFieldQuery());\n        }\n    }\n\n}<fim_middle>// class below has no smell\n"}