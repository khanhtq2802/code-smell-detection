{"text": "<fim_prefix>    return false;\n  }\n  public boolean equals(Digest that) {\n    if (that == null)\n      return false;\n    if (this == that)\n      return true;\n    boolean this_present_hash = true && this.isSetHash();\n    boolean that_present_hash = true && that.isSetHash();\n    if (this_present_hash || that_present_hash) {\n      if (!(this_present_hash && that_present_hash))\n        return false;\n      if (!this.hash.equals(that.hash))\n        return false;\n    }\n    boolean this_present_sizeBytes = true && this.isSetSizeBytes();\n    boolean that_present_sizeBytes = true && that.isSetSizeBytes();\n    if (this_present_sizeBytes || that_present_sizeBytes) {\n      if (!(this_present_sizeBytes && that_present_sizeBytes))\n        return false;\n      if (this.sizeBytes != that.sizeBytes)\n        return false;\n    }\n    return true;\n  }\n  @Override\n  public int hashCode() {\n    int hashCode = 1;\n    hashCode = hashCode * 8191 + ((isSetHash()) ? 131071 : 524287);\n    if (isSetHash())\n      hashCode = hashCode * 8191 + hash.hashCode();\n    hashCode = hashCode * 8191 + ((isSetSizeBytes()) ? 131071 : 524287);\n    if (isSetSizeBytes())\n      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sizeBytes);\n    return hashCode;\n  }\n  @Override\n  public int compareTo(Digest other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    lastComparison = java.lang.Boolean.valueOf(isSetHash()).compareTo(other.isSetHash());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetHash()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash, other.hash);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    lastComparison = java.lang.Boolean.valueOf(isSetSizeBytes()).compareTo(other.isSetSizeBytes());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetSizeBytes()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeBytes, other.sizeBytes);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    scheme(iprot).read(iprot, this);\n  }\n  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n    scheme(oprot).write(oprot, this);\n  }\n  @Override\n  public java.lang.String toString() {\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(\"Digest(\");\n    boolean first = true;\n    if (isSetHash()) {\n      sb.append(\"hash:\");\n      if (this.hash == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.hash);\n      }\n      first = false;\n    }\n    if (isSetSizeBytes()) {\n      if (!first) sb.append(\", \");\n      sb.append(\"sizeBytes:\");\n      sb.append(this.sizeBytes);\n      first = false;\n    }\n    sb.append(\")\");\n    return sb.toString();\n  }\n  public void validate() throws org.apache.thrift.TException {\n    // check for required fields\n    // check for sub-struct validity\n  }\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    try {\n      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {\n    try {\n      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.\n      __isset_bitfield = 0;\n      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private static class DigestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n    public DigestStandardScheme getScheme() {\n      return new DigestStandardScheme();\n    }\n  }\n  private static class DigestStandardScheme extends org.apache.thrift.scheme.StandardScheme<Digest> {\n    public void read(org.apache.thrift.protocol.TProtocol iprot, Digest struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TField schemeField;\n      iprot.readStructBegin();\n      while (true)\n      {\n        schemeField = iprot.readFieldBegin();\n        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n          break;\n        }\n        switch (schemeField.id) {\n          case 1: // HASH\n            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n              struct.hash = iprot.readString();\n              struct.setHashIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 2: // SIZE_BYTES\n            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {\n              struct.sizeBytes = iprot.readI64();\n              struct.setSizeBytesIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          default:\n            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n        }\n        iprot.readFieldEnd();\n      }\n      iprot.readStructEnd();\n      // check for required fields of primitive type, which can't be checked in the validate method\n      struct.validate();\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot, Digest struct) throws org.apache.thrift.TException {\n      struct.validate();\n      oprot.writeStructBegin(STRUCT_DESC);\n      if (struct.hash != null) {\n        if (struct.isSetHash()) {\n          oprot.writeFieldBegin(HASH_FIELD_DESC);\n          oprot.writeString(struct.hash);\n          oprot.writeFieldEnd();\n        }\n      }\n      if (struct.isSetSizeBytes()) {\n        oprot.writeFieldBegin(SIZE_BYTES_FIELD_DESC);\n        oprot.writeI64(struct.sizeBytes);\n        oprot.writeFieldEnd();\n      }\n      oprot.writeFieldStop();\n      oprot.writeStructEnd();\n    }\n  }\n  private static class DigestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n    public DigestTupleScheme getScheme() {\n      return new DigestTupleScheme();\n    }\n  }\n  private static class DigestTupleScheme extends org.apache.thrift.scheme.TupleScheme<Digest> {\n    @Override\n    public void write(org.apache.thrift.protocol.TProtocol prot, Digest struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n      java.util.BitSet optionals = new java.util.BitSet();\n      if (struct.isSetHash()) {\n        optionals.set(0);\n      }\n      if (struct.isSetSizeBytes()) {\n        optionals.set(1);\n      }\n      oprot.writeBitSet(optionals, 2);\n      if (struct.isSetHash()) {\n        oprot.writeString(struct.hash);\n      }\n      if (struct.isSetSizeBytes()) {\n        oprot.writeI64(struct.sizeBytes);\n      }\n    }\n<fim_suffix>    @Override\n    public void read(org.apache.thrift.protocol.TProtocol prot, Digest struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n      java.util.BitSet incoming = iprot.readBitSet(2);\n      if (incoming.get(0)) {\n        struct.hash = iprot.readString();\n        struct.setHashIsSet(true);\n      }\n      if (incoming.get(1)) {\n        struct.sizeBytes = iprot.readI64();\n        struct.setSizeBytesIsSet(true);\n      }\n    }<fim_middle>// function below has no smell\n"}