{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.cxf.jaxrs.client;\n\nimport javax.ws.rs.HttpMethod;\nimport javax.ws.rs.client.Entity;\nimport javax.ws.rs.client.InvocationCallback;\nimport javax.ws.rs.core.GenericType;\nimport javax.ws.rs.core.Response;\n\nimport org.osgi.service.jaxrs.client.PromiseRxInvoker;\nimport org.osgi.util.promise.Deferred;\nimport org.osgi.util.promise.Promise;\nimport org.osgi.util.promise.PromiseFactory;\n\nclass PromiseRxInvokerImpl implements PromiseRxInvoker {\n\n    private static final class DeferredHandler<R> implements InvocationCallback<R> {\n        private final Deferred<R> deferred;\n\n        private DeferredHandler(Deferred<R> deferred) {\n            this.deferred = deferred;\n        }\n\n        @Override\n        public void completed(R response) {\n            deferred.resolve(response);\n        }\n\n        @Override\n        public void failed(Throwable throwable) {\n            deferred.fail(throwable);\n        }\n    }\n    public PromiseRxInvokerImpl(\n        WebClient webClient, PromiseFactory promiseFactory) {\n        _webClient = webClient;\n        _promiseFactory = promiseFactory;\n    }\n\n    @Override\n    public Promise<Response> delete() {\n        return method(HttpMethod.DELETE);\n    }\n\n    @Override\n    public <R> Promise<R> delete(Class<R> aClass) {\n        return method(HttpMethod.DELETE, aClass);\n    }\n\n    @Override\n    public <R> Promise<R> delete(GenericType<R> genericType) {\n        return method(HttpMethod.DELETE, genericType);\n    }\n\n    @Override\n    public Promise<Response> get() {\n        return method(HttpMethod.GET);\n    }\n\n    @Override\n    public <R> Promise<R> get(Class<R> aClass) {\n        return method(HttpMethod.GET, aClass);\n    }\n\n    @Override\n    public <R> Promise<R> get(GenericType<R> genericType) {\n        return method(HttpMethod.GET, genericType);\n    }\n\n    @Override\n    public Promise<Response> head() {\n        return method(HttpMethod.HEAD);\n    }\n\n    @Override\n    public <R> Promise<R> method(String s, Class<R> responseType) {\n        \n            Deferred<R> deferred = _promiseFactory.deferred();\n        \n            _webClient.doInvokeAsync(s, null, null, null, responseType, responseType, \n                    new DeferredHandler<R>(deferred));\n        \n        return deferred.getPromise();\n    }\n\n    @Override\n    public <R> Promise<R> method(String s, Entity<?> entity, Class<R> responseType) {\n        \n        Deferred<R> deferred = _promiseFactory.deferred();\n    \n        _webClient.doInvokeAsync(s, entity, null, null, responseType, responseType, \n                new DeferredHandler<R>(deferred));\n    \n    return deferred.getPromise();\n    }\n\n    @Override\n    public <R> Promise<R> method(\n        String s, Entity<?> entity, GenericType<R> genericType) {\n\n            Deferred<R> deferred = _promiseFactory.deferred();\n        \n        _webClient.doInvokeAsync(s, entity, null, null, genericType.getRawType(), genericType.getType(), \n                new DeferredHandler<R>(deferred));\n    \n        return deferred.getPromise();\n    }\n\n    @Override\n    public Promise<Response> method(String s, Entity<?> entity) {\n        return method(s, entity, Response.class);\n    }\n\n    @Override\n    public <R> Promise<R> method(String s, GenericType<R> genericType) {\n        Deferred<R> deferred = _promiseFactory.deferred();\n        \n        _webClient.doInvokeAsync(s, null, null, null, genericType.getRawType(), genericType.getType(), \n                new DeferredHandler<R>(deferred));\n    \n        return deferred.getPromise();\n    }\n\n    @Override\n    public Promise<Response> method(String s) {\n        return method(s, Response.class);\n    }\n\n    @Override\n    public Promise<Response> options() {\n        return method(HttpMethod.OPTIONS);\n    }\n\n    @Override\n    public <R> Promise<R> options(Class<R> aClass) {\n        return method(HttpMethod.OPTIONS, aClass);\n    }\n\n    @Override\n    public <R> Promise<R> options(GenericType<R> genericType) {\n        return method(HttpMethod.OPTIONS, genericType);\n    }\n\n    @Override\n    public <R> Promise<R> post(Entity<?> entity, Class<R> aClass) {\n        return method(HttpMethod.POST, entity, aClass);\n    }\n\n    @Override\n    public <R> Promise<R> post(Entity<?> entity, GenericType<R> genericType) {\n        return method(HttpMethod.POST, entity, genericType);\n    }\n\n    @Override\n    public Promise<Response> post(Entity<?> entity) {\n        return method(HttpMethod.POST, entity);\n    }\n\n<fim_suffix>    @Override\n    public <R> Promise<R> put(Entity<?> entity, Class<R> aClass) {\n        return method(HttpMethod.PUT, entity, aClass);\n    }\n\n    @Override\n    public <R> Promise<R> put(Entity<?> entity, GenericType<R> genericType) {\n        return method(HttpMethod.PUT, entity, genericType);\n    }\n\n    @Override\n    public Promise<Response> put(Entity<?> entity) {\n        return method(HttpMethod.PUT, entity);\n    }\n\n    @Override\n    public Promise<Response> trace() {\n        return method(\"TRACE\", Response.class);\n    }\n\n    @Override\n    public <R> Promise<R> trace(Class<R> aClass) {\n        return method(\"TRACE\", aClass);\n    }\n\n    @Override\n    public <R> Promise<R> trace(GenericType<R> genericType) {\n        return method(\"TRACE\", genericType);\n    }\n\n    private final PromiseFactory _promiseFactory;\n    private final WebClient _webClient;\n}<fim_middle>// function below has no smell\n"}