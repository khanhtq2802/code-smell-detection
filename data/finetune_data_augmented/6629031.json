{"text": "<fim_prefix>/*\n Copyright 1995-2018 Esri\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n For additional information, contact:\n Environmental Systems Research Institute, Inc.\n Attn: Contracts Dept\n 380 New York Street\n Redlands, California, USA 92373\n\n email: contracts@esri.com\n */\n\npackage com.esri.core.geometry.ogc;\n\nimport com.esri.core.geometry.Geometry;\nimport com.esri.core.geometry.GeometryEngine;\nimport com.esri.core.geometry.Operator;\nimport com.esri.core.geometry.OperatorExportToWkb;\nimport com.esri.core.geometry.OperatorFactoryLocal;\nimport com.esri.core.geometry.Polygon;\nimport com.esri.core.geometry.Polyline;\nimport com.esri.core.geometry.SpatialReference;\nimport com.esri.core.geometry.WkbExportFlags;\nimport com.esri.core.geometry.WktExportFlags;\n\nimport java.nio.ByteBuffer;\n\nimport static com.esri.core.geometry.SizeOf.SIZE_OF_OGC_POLYGON;\n\npublic class OGCPolygon extends OGCSurface {\n\tpublic static String TYPE = \"Polygon\";\n\t\n\tpublic OGCPolygon(Polygon src, int exteriorRing, SpatialReference sr) {\n\t\tpolygon = new Polygon();\n\t\tfor (int i = exteriorRing, n = src.getPathCount(); i < n; i++) {\n\t\t\tif (i > exteriorRing && src.isExteriorRing(i))\n\t\t\t\tbreak;\n\t\t\tpolygon.addPath(src, i, true);\n\t\t}\n\t\tesriSR = sr;\n\t}\n\n\tpublic OGCPolygon(Polygon geom, SpatialReference sr) {\n\t\tpolygon = geom;\n\t\tif (geom.getExteriorRingCount() > 1)\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Polygon has to have one exterior ring. Simplify geom with OperatorSimplify.\");\n\t\tesriSR = sr;\n\t}\n\n\t@Override\n\tpublic String asText() {\n\t\treturn GeometryEngine.geometryToWkt(getEsriGeometry(),\n\t\t\t\tWktExportFlags.wktExportPolygon);\n\t}\n\n\t@Override\n\tpublic ByteBuffer asBinary() {\n\t\tOperatorExportToWkb op = (OperatorExportToWkb) OperatorFactoryLocal\n\t\t\t\t.getInstance().getOperator(Operator.Type.ExportToWkb);\n\t\treturn op.execute(WkbExportFlags.wkbExportPolygon, getEsriGeometry(),\n\t\t\t\tnull);\n\t}\n\n\t/**\n\t * Returns the exterior ring of this Polygon.\n\t * @return OGCLinearRing instance.\n\t */\n<fim_suffix>\tpublic OGCLineString exteriorRing() {\n\t\tif (polygon.isEmpty())\n\t\t\treturn new OGCLinearRing((Polygon) polygon.createInstance(), 0,\n\t\t\t\t\tesriSR, true);\n\t\treturn new OGCLinearRing(polygon, 0, esriSR, true);\n\t}\n\n\t/**\n\t * Returns the number of interior rings in this Polygon.\n\t */\n\tpublic int numInteriorRing() {\n\t\treturn polygon.getPathCount() - 1;\n\t}\n\n\t/**\n\t * Returns the Nth interior ring for this Polygon as a LineString.\n\t * @param n The 0 based index of the interior ring.\n\t * @return OGCLinearRing instance.\n\t */\n\tpublic OGCLineString interiorRingN(int n) {\n\t\treturn new OGCLinearRing(polygon, n + 1, esriSR, true);\n\t}\n\n\t@Override\n\tpublic OGCMultiCurve boundary() {\n\t\tPolyline polyline = new Polyline();\n\t\tpolyline.add(polygon, true); // adds reversed path\n\t\treturn (OGCMultiCurve) OGCGeometry.createFromEsriGeometry(polyline,\n\t\t\t\tesriSR, true);\n\t}\n\n\t@Override\n\tpublic String geometryType() {\n\t\treturn TYPE;\n\t}\n\n\t@Override\n\tpublic long estimateMemorySize()\n\t{\n\t\treturn SIZE_OF_OGC_POLYGON + (polygon != null ? polygon.estimateMemorySize() : 0);\n\t}\n\n\t@Override\n\tpublic OGCGeometry locateAlong(double mValue) {\n\t\t// TODO Auto-generated method stub\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic OGCGeometry locateBetween(double mStart, double mEnd) {\n\t\t// TODO Auto-generated method stub\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic Geometry getEsriGeometry() {\n\t\treturn polygon;\n\t}\n\n\t@Override\n\tpublic OGCGeometry convertToMulti()\n\t{\n\t\treturn new OGCMultiPolygon(polygon, esriSR);\n\t}\n\t\n\t@Override\n\tpublic OGCGeometry reduceFromMulti() {\n\t\treturn this;\n\t}\n\t\n\tPolygon polygon;\n}<fim_middle>// function below has no smell\n"}