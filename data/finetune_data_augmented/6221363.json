{"text": "<fim_prefix>/**\n */\npackage fsmTrace.States.fsm.util;\n\nimport fsmTrace.States.SpecificDimension;\nimport fsmTrace.States.SpecificTracedObject;\nimport fsmTrace.States.SpecificValue;\n\nimport fsmTrace.States.fsm.*;\n\nimport org.eclipse.emf.common.notify.Adapter;\nimport org.eclipse.emf.common.notify.Notifier;\n\nimport org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;\n\nimport org.eclipse.emf.ecore.EObject;\n\nimport org.eclipse.gemoc.trace.commons.model.trace.Dimension;\nimport org.eclipse.gemoc.trace.commons.model.trace.TracedObject;\n\n/**\n * <!-- begin-user-doc -->\n * The <b>Adapter Factory</b> for the model.\n * It provides an adapter <code>createXXX</code> method for each class of the model.\n * <!-- end-user-doc -->\n * @see fsmTrace.States.fsm.FsmPackage\n * @generated\n */\n<fim_suffix>public class FsmAdapterFactory extends AdapterFactoryImpl {\n\t/**\n\t * The cached model package.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tprotected static FsmPackage modelPackage;\n\n\t/**\n\t * Creates an instance of the adapter factory.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tpublic FsmAdapterFactory() {\n\t\tif (modelPackage == null) {\n\t\t\tmodelPackage = FsmPackage.eINSTANCE;\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether this factory is applicable for the type of the object.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.\n\t * <!-- end-user-doc -->\n\t * @return whether this factory is applicable for the type of the object.\n\t * @generated\n\t */\n\t@Override\n\tpublic boolean isFactoryForType(Object object) {\n\t\tif (object == modelPackage) {\n\t\t\treturn true;\n\t\t}\n\t\tif (object instanceof EObject) {\n\t\t\treturn ((EObject)object).eClass().getEPackage() == modelPackage;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * The switch that delegates to the <code>createXXX</code> methods.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tprotected FsmSwitch<Adapter> modelSwitch =\n\t\tnew FsmSwitch<Adapter>() {\n\t\t\t@Override\n\t\t\tpublic Adapter caseTracedNamedElement(TracedNamedElement object) {\n\t\t\t\treturn createTracedNamedElementAdapter();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic Adapter caseTracedState(TracedState object) {\n\t\t\t\treturn createTracedStateAdapter();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic Adapter caseTracedStateMachine(TracedStateMachine object) {\n\t\t\t\treturn createTracedStateMachineAdapter();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic Adapter caseTracedTransition(TracedTransition object) {\n\t\t\t\treturn createTracedTransitionAdapter();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic <DimensionSubType extends Dimension<?>> Adapter caseTracedObject(TracedObject<DimensionSubType> object) {\n\t\t\t\treturn createTracedObjectAdapter();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic <DimensionSubType extends SpecificDimension<? extends SpecificValue>> Adapter caseSpecificTracedObject(SpecificTracedObject<DimensionSubType> object) {\n\t\t\t\treturn createSpecificTracedObjectAdapter();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic Adapter defaultCase(EObject object) {\n\t\t\t\treturn createEObjectAdapter();\n\t\t\t}\n\t\t};\n\n\t/**\n\t * Creates an adapter for the <code>target</code>.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @param target the object to adapt.\n\t * @return the adapter for the <code>target</code>.\n\t * @generated\n\t */\n\t@Override\n\tpublic Adapter createAdapter(Notifier target) {\n\t\treturn modelSwitch.doSwitch((EObject)target);\n\t}\n\n\n\t/**\n\t * Creates a new adapter for an object of class '{@link fsmTrace.States.fsm.TracedNamedElement <em>Traced Named Element</em>}'.\n\t * <!-- begin-user-doc -->\n\t * This default implementation returns null so that we can easily ignore cases;\n\t * it's useful to ignore a case when inheritance will catch all the cases anyway.\n\t * <!-- end-user-doc -->\n\t * @return the new adapter.\n\t * @see fsmTrace.States.fsm.TracedNamedElement\n\t * @generated\n\t */\n\tpublic Adapter createTracedNamedElementAdapter() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a new adapter for an object of class '{@link fsmTrace.States.fsm.TracedState <em>Traced State</em>}'.\n\t * <!-- begin-user-doc -->\n\t * This default implementation returns null so that we can easily ignore cases;\n\t * it's useful to ignore a case when inheritance will catch all the cases anyway.\n\t * <!-- end-user-doc -->\n\t * @return the new adapter.\n\t * @see fsmTrace.States.fsm.TracedState\n\t * @generated\n\t */\n\tpublic Adapter createTracedStateAdapter() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a new adapter for an object of class '{@link fsmTrace.States.fsm.TracedStateMachine <em>Traced State Machine</em>}'.\n\t * <!-- begin-user-doc -->\n\t * This default implementation returns null so that we can easily ignore cases;\n\t * it's useful to ignore a case when inheritance will catch all the cases anyway.\n\t * <!-- end-user-doc -->\n\t * @return the new adapter.\n\t * @see fsmTrace.States.fsm.TracedStateMachine\n\t * @generated\n\t */\n\tpublic Adapter createTracedStateMachineAdapter() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a new adapter for an object of class '{@link fsmTrace.States.fsm.TracedTransition <em>Traced Transition</em>}'.\n\t * <!-- begin-user-doc -->\n\t * This default implementation returns null so that we can easily ignore cases;\n\t * it's useful to ignore a case when inheritance will catch all the cases anyway.\n\t * <!-- end-user-doc -->\n\t * @return the new adapter.\n\t * @see fsmTrace.States.fsm.TracedTransition\n\t * @generated\n\t */\n\tpublic Adapter createTracedTransitionAdapter() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a new adapter for an object of class '{@link org.eclipse.gemoc.trace.commons.model.trace.TracedObject <em>Traced Object</em>}'.\n\t * <!-- begin-user-doc -->\n\t * This default implementation returns null so that we can easily ignore cases;\n\t * it's useful to ignore a case when inheritance will catch all the cases anyway.\n\t * <!-- end-user-doc -->\n\t * @return the new adapter.\n\t * @see org.eclipse.gemoc.trace.commons.model.trace.TracedObject\n\t * @generated\n\t */\n\tpublic Adapter createTracedObjectAdapter() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a new adapter for an object of class '{@link fsmTrace.States.SpecificTracedObject <em>Specific Traced Object</em>}'.\n\t * <!-- begin-user-doc -->\n\t * This default implementation returns null so that we can easily ignore cases;\n\t * it's useful to ignore a case when inheritance will catch all the cases anyway.\n\t * <!-- end-user-doc -->\n\t * @return the new adapter.\n\t * @see fsmTrace.States.SpecificTracedObject\n\t * @generated\n\t */\n\tpublic Adapter createSpecificTracedObjectAdapter() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a new adapter for the default case.\n\t * <!-- begin-user-doc -->\n\t * This default implementation returns null.\n\t * <!-- end-user-doc -->\n\t * @return the new adapter.\n\t * @generated\n\t */\n\tpublic Adapter createEObjectAdapter() {\n\t\treturn null;\n\t}\n\n} //FsmAdapterFactory<fim_middle>// class below has no smell\n"}