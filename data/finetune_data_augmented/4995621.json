{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jclouds.ec2.compute.suppliers;\n\nimport static com.google.common.collect.Iterables.filter;\nimport static com.google.common.collect.Iterables.transform;\nimport static org.jclouds.ec2.options.DescribeImagesOptions.Builder.ownedBy;\nimport static org.jclouds.ec2.reference.EC2Constants.PROPERTY_EC2_AMI_OWNERS;\n\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\n\nimport javax.annotation.Resource;\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\n\nimport org.jclouds.compute.domain.Image;\nimport org.jclouds.compute.reference.ComputeServiceConstants;\nimport org.jclouds.ec2.compute.domain.RegionAndName;\nimport org.jclouds.ec2.compute.functions.EC2ImageParser;\nimport org.jclouds.ec2.compute.functions.ImagesToRegionAndIdMap;\nimport org.jclouds.ec2.compute.strategy.DescribeImagesParallel;\nimport org.jclouds.ec2.options.DescribeImagesOptions;\nimport org.jclouds.location.Region;\nimport org.jclouds.logging.Logger;\n\nimport com.google.common.base.Predicates;\nimport com.google.common.base.Supplier;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableMap.Builder;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Sets;\n\n<fim_suffix>@Singleton\npublic class EC2ImageSupplier implements Supplier<Set<? extends Image>> {\n   @Resource\n   @Named(ComputeServiceConstants.COMPUTE_LOGGER)\n   protected Logger logger = Logger.NULL;\n\n   private final Supplier<Set<String>> regions;\n   private final DescribeImagesParallel describer;\n   private final String[] amiOwners;\n   private final EC2ImageParser parser;\n   private final Supplier<LoadingCache<RegionAndName, ? extends Image>> cache;\n\n   @Inject\n   protected EC2ImageSupplier(@Region Supplier<Set<String>> regions, DescribeImagesParallel describer,\n         @Named(PROPERTY_EC2_AMI_OWNERS) String[] amiOwners, Supplier<LoadingCache<RegionAndName, ? extends Image>> cache,\n         EC2ImageParser parser) {\n      this.regions = regions;\n      this.describer = describer;\n      this.amiOwners = amiOwners;\n      this.cache = cache;\n      this.parser = parser;\n   }\n\n   @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n   @Override\n   public Set<? extends Image> get() {\n      if (amiOwners.length == 0) {\n         logger.debug(\">> no owners specified, skipping image parsing\");\n         return ImmutableSet.of();\n      \n      } else {\n         logger.debug(\">> providing images\");\n\n         Iterable<Entry<String, DescribeImagesOptions>> queries = getDescribeQueriesForOwnersInRegions(regions.get(),\n                  amiOwners);\n\n         Iterable<? extends Image> parsedImages = ImmutableSet.copyOf(filter(transform(describer.apply(queries), parser), Predicates\n                  .notNull()));\n\n         Map<RegionAndName, ? extends Image> imageMap = ImagesToRegionAndIdMap.imagesToMap(parsedImages);\n         cache.get().invalidateAll();\n         cache.get().asMap().putAll((Map)imageMap);\n         logger.debug(\"<< images(%d)\", imageMap.size());\n         \n         return Sets.newLinkedHashSet(imageMap.values());\n      }\n   }\n\n   public Iterable<Entry<String, DescribeImagesOptions>> getDescribeQueriesForOwnersInRegions(Set<String> regions,\n         String[] amiOwners) {\n      DescribeImagesOptions options = getOptionsForOwners(amiOwners);\n      Builder<String, DescribeImagesOptions> builder = ImmutableMap.builder();\n      for (String region : regions)\n         builder.put(region, options);\n      return builder.build().entrySet();\n   }\n\n   public DescribeImagesOptions getOptionsForOwners(String... amiOwners) {\n      DescribeImagesOptions options;\n      if (amiOwners.length == 1 && amiOwners[0].equals(\"*\"))\n         options = new DescribeImagesOptions();\n      else\n         options = ownedBy(amiOwners);\n      return options;\n   }\n}<fim_middle>// class below has no smell\n"}