{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.myfaces.tobago.internal.renderkit.renderer;\n\nimport org.apache.myfaces.tobago.internal.component.AbstractUIStars;\nimport org.apache.myfaces.tobago.internal.util.HtmlRendererUtils;\nimport org.apache.myfaces.tobago.internal.util.JsonUtils;\nimport org.apache.myfaces.tobago.internal.util.RenderUtils;\nimport org.apache.myfaces.tobago.renderkit.css.BootstrapClass;\nimport org.apache.myfaces.tobago.renderkit.css.TobagoClass;\nimport org.apache.myfaces.tobago.renderkit.html.HtmlAttributes;\nimport org.apache.myfaces.tobago.renderkit.html.HtmlElements;\nimport org.apache.myfaces.tobago.renderkit.html.HtmlInputTypes;\nimport org.apache.myfaces.tobago.util.ComponentUtils;\nimport org.apache.myfaces.tobago.webapp.TobagoResponseWriter;\n\nimport javax.faces.component.UIComponent;\nimport javax.faces.context.FacesContext;\nimport java.io.IOException;\n\n<fim_suffix>public class StarsRenderer extends MessageLayoutRendererBase {\n\n  @Override\n  protected void encodeBeginField(FacesContext facesContext, UIComponent component) throws IOException {\n\n    final TobagoResponseWriter writer = getResponseWriter(facesContext);\n    final AbstractUIStars stars = (AbstractUIStars) component;\n    final String clientId = stars.getClientId(facesContext);\n    final String fieldId = stars.getFieldId(facesContext);\n    final String hiddenInputId = clientId + ComponentUtils.SUB_SEPARATOR + \"input\";\n    final String sliderId = clientId + ComponentUtils.SUB_SEPARATOR + \"slider\";\n    final int value = stars.getRangeValue();\n    final int max = stars.getRangeMax();\n    final Double placeholder = stars.getPlaceholder();\n    final boolean readonly = stars.isReadonly();\n    final boolean disabled = stars.isDisabled();\n    final boolean required = stars.isRequired();\n    final String title = HtmlRendererUtils.getTitleFromTipAndMessages(facesContext, stars);\n\n    final String sliderValue = stars.getSubmittedValue() != null\n        ? (String) stars.getSubmittedValue() : String.valueOf(value);\n    final String hiddenInputValue = required && \"0\".equals(sliderValue) ? null : sliderValue;\n\n    writer.startElement(HtmlElements.DIV);\n    writer.writeIdAttribute(fieldId);\n    writer.writeClassAttribute(\n        TobagoClass.STARS,\n        TobagoClass.STARS.createMarkup(stars.getMarkup()),\n        stars.getCustomClass());\n\n    // The hidden input must be used to submit the rating. The 'required' attribute is not allowed on slider component.\n    writer.startElement(HtmlElements.INPUT);\n    writer.writeIdAttribute(hiddenInputId);\n    writer.writeNameAttribute(clientId);\n    writer.writeAttribute(HtmlAttributes.TYPE, HtmlInputTypes.HIDDEN);\n    writer.writeAttribute(HtmlAttributes.VALUE, hiddenInputValue, true);\n    writer.writeAttribute(HtmlAttributes.READONLY, readonly);\n    writer.writeAttribute(HtmlAttributes.DISABLED, disabled);\n    writer.writeAttribute(HtmlAttributes.REQUIRED, required);\n    writer.endElement(HtmlElements.INPUT);\n\n    writer.startElement(HtmlElements.SPAN);\n    writer.writeClassAttribute(TobagoClass.STARS__CONTAINER);\n\n    writer.startElement(HtmlElements.INPUT);\n    writer.writeIdAttribute(sliderId);\n    writer.writeNameAttribute(clientId);\n    writer.writeClassAttribute(TobagoClass.STARS__SLIDER);\n    writer.writeAttribute(HtmlAttributes.TYPE, readonly || disabled ? HtmlInputTypes.HIDDEN : HtmlInputTypes.RANGE);\n    writer.writeAttribute(HtmlAttributes.MIN, required ? 1 : 0);\n    writer.writeAttribute(HtmlAttributes.MAX, max);\n    writer.writeAttribute(HtmlAttributes.VALUE, sliderValue, true);\n    writer.writeCommandMapAttribute(JsonUtils.encode(RenderUtils.getBehaviorCommands(facesContext, stars)));\n    if (placeholder != null) {\n      writer.writeAttribute(HtmlAttributes.PLACEHOLDER, placeholder.toString(), true);\n    }\n    writer.writeAttribute(HtmlAttributes.READONLY, readonly);\n    writer.writeAttribute(HtmlAttributes.DISABLED, disabled);\n    writer.writeAttribute(HtmlAttributes.REQUIRED, required);\n    HtmlRendererUtils.renderFocus(clientId, stars.isFocus(), ComponentUtils.isError(stars), facesContext, writer);\n    writer.writeAttribute(HtmlAttributes.TABINDEX, stars.getTabIndex());\n    writer.writeAttribute(HtmlAttributes.TITLE, title, true);\n    writer.endElement(HtmlElements.INPUT);\n\n    writer.startElement(HtmlElements.DIV);\n    writer.writeClassAttribute(TobagoClass.STARS__FOCUS_BOX);\n    writer.endElement(HtmlElements.DIV);\n    writer.startElement(HtmlElements.SPAN);\n    writer.writeClassAttribute(TobagoClass.STARS__TOOLTIP, BootstrapClass.FADE);\n    writer.endElement(HtmlElements.SPAN);\n    writer.startElement(HtmlElements.SPAN);\n    writer.writeClassAttribute(TobagoClass.STARS__SELECTED);\n    writer.endElement(HtmlElements.SPAN);\n    writer.startElement(HtmlElements.SPAN);\n    writer.writeClassAttribute(TobagoClass.STARS__UNSELECTED);\n    writer.endElement(HtmlElements.SPAN);\n    writer.startElement(HtmlElements.SPAN);\n    writer.writeClassAttribute(TobagoClass.STARS__PRESELECTED);\n    writer.endElement(HtmlElements.SPAN);\n\n    writer.endElement(HtmlElements.SPAN);\n  }\n\n  @Override\n  protected void encodeEndField(FacesContext facesContext, UIComponent component) throws IOException {\n    final TobagoResponseWriter writer = getResponseWriter(facesContext);\n    writer.endElement(HtmlElements.DIV);\n  }\n\n  @Override\n  protected String getFieldId(FacesContext facesContext, UIComponent component) {\n    final AbstractUIStars stars = (AbstractUIStars) component;\n    return stars.getFieldId(facesContext);\n  }\n}<fim_middle>// class below has no smell\n"}