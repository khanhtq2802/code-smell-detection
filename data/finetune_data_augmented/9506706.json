{"text": "<fim_prefix>  boolean viaProto = false;\n  private List<ResourceRequest> ask = null;\n  private List<ContainerId> release = null;\n  private List<UpdateContainerRequest> updateRequests = null;\n  private List<SchedulingRequest> schedulingRequests = null;\n  private ResourceBlacklistRequest blacklistRequest = null;\n  private String trackingUrl = null;\n  public AllocateRequestPBImpl() {\n    builder = AllocateRequestProto.newBuilder();\n  }\n  public AllocateRequestPBImpl(AllocateRequestProto proto) {\n    this.proto = proto;\n    viaProto = true;\n  }\n  public AllocateRequestProto getProto() {\n    mergeLocalToProto();\n    proto = viaProto ? proto : builder.build();\n    viaProto = true;\n    return proto;\n  }\n  @Override\n  public int hashCode() {\n    return getProto().hashCode();\n  }\n  @Override\n  public boolean equals(Object other) {\n    if (other == null)\n      return false;\n    if (other.getClass().isAssignableFrom(this.getClass())) {\n      return this.getProto().equals(this.getClass().cast(other).getProto());\n    }\n    return false;\n  }\n  @Override\n  public String toString() {\n    return TextFormat.shortDebugString(getProto());\n  }\n  private void mergeLocalToBuilder() {\n    if (this.ask != null) {\n      addAsksToProto();\n    }\n    if (this.release != null) {\n      addReleasesToProto();\n    }\n    if (this.updateRequests != null) {\n      addUpdateRequestsToProto();\n    }\n    if (this.schedulingRequests != null) {\n      addSchedulingRequestsToProto();\n    }\n    if (this.blacklistRequest != null) {\n      builder.setBlacklistRequest(convertToProtoFormat(this.blacklistRequest));\n    }\n    if (this.trackingUrl != null) {\n      builder.setTrackingUrl(this.trackingUrl);\n    }\n  }\n  private void mergeLocalToProto() {\n    if (viaProto) \n      maybeInitBuilder();\n    mergeLocalToBuilder();\n    proto = builder.build();\n    viaProto = true;\n  }\n  private void maybeInitBuilder() {\n    if (viaProto || builder == null) {\n      builder = AllocateRequestProto.newBuilder(proto);\n    }\n    viaProto = false;\n  }\n  @Override\n  public int getResponseId() {\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\n    return p.getResponseId();\n  }\n  @Override\n  public void setResponseId(int id) {\n    maybeInitBuilder();\n    builder.setResponseId(id);\n  }\n  @Override\n  public float getProgress() {\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\n    return p.getProgress();\n  }\n  @Override\n  public void setProgress(float progress) {\n    maybeInitBuilder();\n    builder.setProgress(progress);\n  }\n  @Override\n  public List<ResourceRequest> getAskList() {\n    initAsks();\n    return this.ask;\n  }\n  @Override\n  public void setAskList(final List<ResourceRequest> resourceRequests) {\n    if(resourceRequests == null) {\n      return;\n    }\n    initAsks();\n    this.ask.clear();\n    this.ask.addAll(resourceRequests);\n  }\n  @Override\n  public List<UpdateContainerRequest> getUpdateRequests() {\n    initUpdateRequests();\n    return this.updateRequests;\n  }\n  @Override\n  public void setUpdateRequests(List<UpdateContainerRequest> updateRequests) {\n    if (updateRequests == null) {\n      return;\n    }\n    initUpdateRequests();\n    this.updateRequests.clear();\n    this.updateRequests.addAll(updateRequests);\n  }\n  @Override\n  public List<SchedulingRequest> getSchedulingRequests() {\n    initSchedulingRequests();\n    return this.schedulingRequests;\n  }\n  @Override\n  public void setSchedulingRequests(\n      List<SchedulingRequest> schedulingRequests) {\n    if (schedulingRequests == null) {\n      builder.clearSchedulingRequests();\n      return;\n    }\n    initSchedulingRequests();\n    this.schedulingRequests.clear();\n    this.schedulingRequests.addAll(schedulingRequests);\n  }\n  @Override\n  public ResourceBlacklistRequest getResourceBlacklistRequest() {\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\n    if (this.blacklistRequest != null) {\n      return this.blacklistRequest;\n    }\n    if (!p.hasBlacklistRequest()) {\n      return null;\n    }\n    this.blacklistRequest = convertFromProtoFormat(p.getBlacklistRequest());\n    return this.blacklistRequest;\n  }\n  @Override\n  public void setResourceBlacklistRequest(ResourceBlacklistRequest blacklistRequest) {\n    maybeInitBuilder();\n    if (blacklistRequest == null) {\n      builder.clearBlacklistRequest();\n    }\n    this.blacklistRequest = blacklistRequest;\n  }\n  private void initAsks() {\n    if (this.ask != null) {\n      return;\n    }\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\n    List<ResourceRequestProto> list = p.getAskList();\n    this.ask = new ArrayList<ResourceRequest>();\n    for (ResourceRequestProto c : list) {\n      this.ask.add(convertFromProtoFormat(c));\n    }\n  }\n  private void addAsksToProto() {\n    maybeInitBuilder();\n    builder.clearAsk();\n    if (ask == null)\n      return;\n    Iterable<ResourceRequestProto> iterable =\n        new Iterable<ResourceRequestProto>() {\n      @Override\n      public Iterator<ResourceRequestProto> iterator() {\n        return new Iterator<ResourceRequestProto>() {\n          Iterator<ResourceRequest> iter = ask.iterator();\n          @Override\n          public boolean hasNext() {\n            return iter.hasNext();\n          }\n          @Override\n          public ResourceRequestProto next() {\n            return convertToProtoFormat(iter.next());\n          }\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    };\n    builder.addAllAsk(iterable);\n  }\n  private void initUpdateRequests() {\n    if (this.updateRequests != null) {\n      return;\n    }\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\n    List<UpdateContainerRequestProto> list =\n        p.getUpdateRequestsList();\n    this.updateRequests = new ArrayList<>();\n    for (UpdateContainerRequestProto c : list) {\n      this.updateRequests.add(convertFromProtoFormat(c));\n    }\n  }\n  private void initSchedulingRequests() {\n    if (this.schedulingRequests != null) {\n      return;\n    }\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\n    List<SchedulingRequestProto> list =\n        p.getSchedulingRequestsList();\n    this.schedulingRequests = new ArrayList<>();\n    for (SchedulingRequestProto c : list) {\n      this.schedulingRequests.add(convertFromProtoFormat(c));\n    }\n  }\n  private void addUpdateRequestsToProto() {\n    maybeInitBuilder();\n    builder.clearUpdateRequests();\n    if (updateRequests == null) {\n      return;\n    }\n    Iterable<UpdateContainerRequestProto> iterable =\n        new Iterable<UpdateContainerRequestProto>() {\n          @Override\n          public Iterator<UpdateContainerRequestProto> iterator() {\n            return new Iterator<UpdateContainerRequestProto>() {\n              private Iterator<UpdateContainerRequest> iter =\n                  updateRequests.iterator();\n              @Override\n              public boolean hasNext() {\n                return iter.hasNext();\n              }\n              @Override\n              public UpdateContainerRequestProto next() {\n                return convertToProtoFormat(iter.next());\n              }\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        };\n    builder.addAllUpdateRequests(iterable);\n  }\n  private void addSchedulingRequestsToProto() {\n    maybeInitBuilder();\n    builder.clearSchedulingRequests();\n    if (schedulingRequests == null) {\n      return;\n    }\n    Iterable<SchedulingRequestProto> iterable =\n        new Iterable<SchedulingRequestProto>() {\n          @Override\n          public Iterator<SchedulingRequestProto> iterator() {\n            return new Iterator<SchedulingRequestProto>() {\n              private Iterator<SchedulingRequest> iter =\n                  schedulingRequests.iterator();\n              @Override\n              public boolean hasNext() {\n                return iter.hasNext();\n              }\n              @Override\n              public SchedulingRequestProto next() {\n                return convertToProtoFormat(iter.next());\n              }\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        };\n    builder.addAllSchedulingRequests(iterable);\n  }\n  @Override\n  public List<ContainerId> getReleaseList() {\n    initReleases();\n    return this.release;\n  }\n  @Override\n  public void setReleaseList(List<ContainerId> releaseContainers) {\n    if(releaseContainers == null) {\n      return;\n    }\n    initReleases();\n    this.release.clear();\n    this.release.addAll(releaseContainers);\n  }\n<fim_suffix>  private void initReleases() {\n    if (this.release != null) {\n      return;\n    }\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\n    List<ContainerIdProto> list = p.getReleaseList();\n    this.release = new ArrayList<ContainerId>();\n    for (ContainerIdProto c : list) {\n      this.release.add(convertFromProtoFormat(c));\n    }\n  }<fim_middle>// function below has no smell\n"}