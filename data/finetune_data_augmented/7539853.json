{"text": "<fim_prefix>package reflection;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Type;\npublic class FieldInvoker {\n\tpublic static boolean callEquals(Field thiz, Object a0) {\n\t\treturn thiz.equals(a0);\n\t}\n\tpublic static String callToString(Field thiz) {\n\t\treturn thiz.toString();\n\t}\n\tpublic static int callHashCode(Field thiz) {\n\t\treturn thiz.hashCode();\n\t}\n\tpublic static int callGetModifiers(Field thiz) {\n\t\treturn thiz.getModifiers();\n\t}\n\tpublic static String callToGenericString(Field thiz) {\n\t\treturn thiz.toGenericString();\n\t}\n\tpublic static Object callGet(Field thiz, Object o) throws IllegalArgumentException, IllegalAccessException {\n\t\treturn thiz.get(o);\n\t}\n\tpublic static long callSetAndGetLong(Field thiz, Object o) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setLong(o, thiz.getLong(o));\n\t\treturn thiz.getLong(o);\n\t}\n\tpublic static short callSetAndGetShort(Field thiz, Object o) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setShort(o, (short) (thiz.getShort(o) + 1));\n\t\treturn thiz.getShort(o);\n\t}\n\tpublic static boolean callSetAndGetBoolean(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setBoolean(obj, !thiz.getBoolean(obj));\n\t\treturn thiz.getBoolean(obj);\n\t}\n\tpublic static byte callSetAndGetByte(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setByte(obj, (byte) (thiz.getByte(obj) + 1));\n\t\treturn thiz.getByte(obj);\n\t}\n\tpublic static char callSetAndGetChar(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setChar(obj, (char) (thiz.getChar(obj) + 1));\n\t\treturn thiz.getChar(obj);\n\t}\n<fim_suffix>\tpublic static int callSetAndGetInt(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setInt(obj, thiz.getInt(obj) + 1);\n\t\treturn thiz.getInt(obj);\n\t}\n\tpublic static float callSetAndGetFloat(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setFloat(obj, (float) (thiz.getFloat(obj) + 1.5));\n\t\treturn thiz.getFloat(obj);\n\t}\n\tpublic static double callSetAndGetDouble(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setDouble(obj, thiz.getDouble(obj) + 1.5);\n\t\treturn thiz.getDouble(obj);\n\t}\n\tpublic static long callSetLong(Field thiz, Object o) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setLong(o, 12345);\n\t\treturn thiz.getLong(o);\n\t}\n\tpublic static short callSetShort(Field thiz, Object o) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setShort(o, (short) 1234);\n\t\treturn thiz.getShort(o);\n\t}\n\tpublic static boolean callSetBoolean(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setBoolean(obj, true);\n\t\treturn thiz.getBoolean(obj);\n\t}\n\tpublic static byte callSetByte(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setByte(obj, (byte) 123);\n\t\treturn thiz.getByte(obj);\n\t}\n\tpublic static char callSetChar(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setChar(obj, 'Y');\n\t\treturn thiz.getChar(obj);\n\t}\n\tpublic static int callSetInt(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setInt(obj, 1234);\n\t\treturn thiz.getInt(obj);\n\t}\n\tpublic static float callSetFloat(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setFloat(obj, (float) 1.234);\n\t\treturn thiz.getFloat(obj);\n\t}\n\tpublic static double callSetDouble(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.setDouble(obj, 1.234);\n\t\treturn thiz.getDouble(obj);\n\t}\n\tpublic static String callGetName(Field thiz) {\n\t\treturn thiz.getName();\n\t}\n\tpublic static Annotation callGetAnnotation(Field thiz, Class<? extends Annotation> a0) {\n\t\treturn thiz.getAnnotation(a0);\n\t}\n\tpublic static Annotation[] callGetDeclaredAnnotations(Field thiz) {\n\t\treturn thiz.getDeclaredAnnotations();\n\t}\n\tpublic static Class<?> callGetDeclaringClass(Field thiz) {\n\t\treturn thiz.getDeclaringClass();\n\t}\n\tpublic static boolean callIsSynthetic(Field thiz) {\n\t\treturn thiz.isSynthetic();\n\t}\n\tpublic static Type callGetGenericType(Field thiz) {\n\t\treturn thiz.getGenericType();\n\t}\n\tpublic static Class<?> callGetType(Field thiz) {\n\t\treturn thiz.getType();\n\t}\n\tpublic static boolean callIsEnumConstant(Field thiz) {\n\t\treturn thiz.isEnumConstant();\n\t}\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t/// Methods below don't correspond directly to a single method in the Field type, but do a bunch of things at\n\t/// once.\n\t/**\n\t * Gets a field in class, can override access constraints if requested to do so.\n\t */\n\tpublic String getFieldWithAccess(Class<?> targetClass, String whichField, boolean setAccess) throws Exception {\n\t\tObject targetInstance = targetClass.newInstance();\n\t\tField field = targetClass.getDeclaredField(whichField);\n\t\tif (setAccess) {\n\t\t\tfield.setAccessible(true);\n\t\t}\n\t\treturn (String) field.get(targetInstance);\n\t}\n\t/**\n\t * Sets a field in class, can override access constraints if requested to do so.\n\t */\n\tpublic void setFieldWithAccess(Class<?> targetClass, String whichField, boolean setAccess) throws Exception {\n\t\tObject targetInstance = targetClass.newInstance();\n\t\tField field = targetClass.getDeclaredField(whichField);\n\t\tif (setAccess) {\n\t\t\tfield.setAccessible(true);\n\t\t}\n\t\t// Not checking for type errors in this test, make sure we set correct type of value\n\t\tif (field.getType().equals(int.class)) {\n\t\t\tfield.set(targetInstance, 888);\n\t\t} else {\n\t\t\tfield.set(targetInstance, \"<BANG>\");\n\t\t}\n\t}\n\t/**\n\t * Sets and gets a field in so we can see if the value was actually set.\n\t */\n\tpublic String setAndGetFieldWithAccess(Class<?> targetClass, String whichField, boolean setAccess) throws Exception {\n\t\tObject targetInstance = targetClass.newInstance();\n\t\tField field = targetClass.getDeclaredField(whichField);\n\t\tif (setAccess) {\n\t\t\tfield.setAccessible(true);\n\t\t}\n\t\tString orgVal = (String) field.get(targetInstance);\n\t\tfield.set(targetInstance, orgVal + \"<BANG>\");\n\t\treturn (String) field.get(targetInstance);\n\t}\n\tpublic static Object callSetAndGet(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.set(obj, thiz.get(obj) + \"<BANG>\");\n\t\treturn thiz.get(obj);\n\t}\n\tpublic static Object callSetNull(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tthiz.set(obj, null);\n\t\treturn thiz.get(obj);\n\t}\n\tpublic static Object callSetUnboxAndGet(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {\n\t\tObject val = thiz.get(obj);\n\t\tif (val instanceof Integer) {\n\t\t\tthiz.set(obj, ((Integer) val) + 1);\n\t\t} else if (val instanceof Boolean) {\n\t\t\tthiz.set(obj, !((Boolean) val));\n\t\t} else if (val instanceof Float) {\n\t\t\tthiz.set(obj, new Float(((Float) val) + 1.5));\n\t\t} else if (val instanceof Double) {\n\t\t\tthiz.set(obj, new Double(((Double) val) + 1.5));<fim_middle>// function below has no smell\n"}