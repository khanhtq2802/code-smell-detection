{"text": "<fim_prefix>/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.web.context.support;\n\nimport javax.servlet.ServletContext;\n\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.lang.Nullable;\nimport org.springframework.web.context.ServletContextAware;\n\n/**\n * {@link FactoryBean} that fetches a specific, existing ServletContext attribute.\n * Exposes that ServletContext attribute when used as bean reference,\n * effectively making it available as named Spring bean instance.\n *\n * <p>Intended to link in ServletContext attributes that exist before\n * the startup of the Spring application context. Typically, such\n * attributes will have been put there by third-party web frameworks.\n * In a purely Spring-based web application, no such linking in of\n * ServletContext attributes will be necessary.\n *\n * <p><b>NOTE:</b> As of Spring 3.0, you may also use the \"contextAttributes\" default\n * bean which is of type Map, and dereference it using an \"#{contextAttributes.myKey}\"\n * expression to access a specific attribute by name.\n *\n * @author Juergen Hoeller\n * @since 1.1.4\n * @see org.springframework.web.context.WebApplicationContext#CONTEXT_ATTRIBUTES_BEAN_NAME\n * @see ServletContextParameterFactoryBean\n */\n<fim_suffix>public class ServletContextAttributeFactoryBean implements FactoryBean<Object>, ServletContextAware {\n\n\t@Nullable\n\tprivate String attributeName;\n\n\t@Nullable\n\tprivate Object attribute;\n\n\n\t/**\n\t * Set the name of the ServletContext attribute to expose.\n\t */\n\tpublic void setAttributeName(String attributeName) {\n\t\tthis.attributeName = attributeName;\n\t}\n\n\t@Override\n\tpublic void setServletContext(ServletContext servletContext) {\n\t\tif (this.attributeName == null) {\n\t\t\tthrow new IllegalArgumentException(\"Property 'attributeName' is required\");\n\t\t}\n\t\tthis.attribute = servletContext.getAttribute(this.attributeName);\n\t\tif (this.attribute == null) {\n\t\t\tthrow new IllegalStateException(\"No ServletContext attribute '\" + this.attributeName + \"' found\");\n\t\t}\n\t}\n\n\n\t@Override\n\t@Nullable\n\tpublic Object getObject() throws Exception {\n\t\treturn this.attribute;\n\t}\n\n\t@Override\n\tpublic Class<?> getObjectType() {\n\t\treturn (this.attribute != null ? this.attribute.getClass() : null);\n\t}\n\n\t@Override\n\tpublic boolean isSingleton() {\n\t\treturn true;\n\t}\n\n}<fim_middle>// class below is data class\n"}