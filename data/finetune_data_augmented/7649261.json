{"text": "<fim_prefix>/*\n * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.security.web;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.springframework.util.Assert;\n\n/**\n * Concrete implementation of {@link PortMapper} that obtains HTTP:HTTPS pairs from the\n * application context.\n * <p>\n * By default the implementation will assume 80:443 and 8080:8443 are HTTP:HTTPS pairs\n * respectively. If different pairs are required, use {@link #setPortMappings(Map)}.\n *\n * @author Ben Alex\n * @author colin sampaleanu\n */\n<fim_suffix>public class PortMapperImpl implements PortMapper {\n\t// ~ Instance fields\n\t// ================================================================================================\n\n\tprivate final Map<Integer, Integer> httpsPortMappings;\n\n\t// ~ Constructors\n\t// ===================================================================================================\n\n\tpublic PortMapperImpl() {\n\t\tthis.httpsPortMappings = new HashMap<>();\n\t\tthis.httpsPortMappings.put(Integer.valueOf(80), Integer.valueOf(443));\n\t\tthis.httpsPortMappings.put(Integer.valueOf(8080), Integer.valueOf(8443));\n\t}\n\n\t// ~ Methods\n\t// ========================================================================================================\n\n\t/**\n\t * Returns the translated (Integer -&gt; Integer) version of the original port mapping\n\t * specified via setHttpsPortMapping()\n\t */\n\tpublic Map<Integer, Integer> getTranslatedPortMappings() {\n\t\treturn this.httpsPortMappings;\n\t}\n\n\tpublic Integer lookupHttpPort(Integer httpsPort) {\n\t\tfor (Integer httpPort : this.httpsPortMappings.keySet()) {\n\t\t\tif (this.httpsPortMappings.get(httpPort).equals(httpsPort)) {\n\t\t\t\treturn httpPort;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic Integer lookupHttpsPort(Integer httpPort) {\n\t\treturn this.httpsPortMappings.get(httpPort);\n\t}\n\n\t/**\n\t * Set to override the default HTTP port to HTTPS port mappings of 80:443, and\n\t * 8080:8443. In a Spring XML ApplicationContext, a definition would look something\n\t * like this:\n\t *\n\t * <pre>\n\t *  &lt;property name=\"portMappings\"&gt;\n\t *      &lt;map&gt;\n\t *          &lt;entry key=\"80\"&gt;&lt;value&gt;443&lt;/value&gt;&lt;/entry&gt;\n\t *          &lt;entry key=\"8080\"&gt;&lt;value&gt;8443&lt;/value&gt;&lt;/entry&gt;\n\t *      &lt;/map&gt;\n\t * &lt;/property&gt;\n\t * </pre>\n\t *\n\t * @param newMappings A Map consisting of String keys and String values, where for\n\t * each entry the key is the string representation of an integer HTTP port number, and\n\t * the value is the string representation of the corresponding integer HTTPS port\n\t * number.\n\t *\n\t * @throws IllegalArgumentException if input map does not consist of String keys and\n\t * values, each representing an integer port number in the range 1-65535 for that\n\t * mapping.\n\t */\n\tpublic void setPortMappings(Map<String, String> newMappings) {\n\t\tAssert.notNull(newMappings,\n\t\t\t\t\"A valid list of HTTPS port mappings must be provided\");\n\n\t\tthis.httpsPortMappings.clear();\n\n\t\tfor (Map.Entry<String, String> entry : newMappings.entrySet()) {\n\t\t\tInteger httpPort = Integer.valueOf(entry.getKey());\n\t\t\tInteger httpsPort = Integer.valueOf(entry.getValue());\n\n\t\t\tif ((httpPort.intValue() < 1) || (httpPort.intValue() > 65535)\n\t\t\t\t\t|| (httpsPort.intValue() < 1) || (httpsPort.intValue() > 65535)) {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\"one or both ports out of legal range: \" + httpPort + \", \"\n\t\t\t\t\t\t\t\t+ httpsPort);\n\t\t\t}\n\n\t\t\tthis.httpsPortMappings.put(httpPort, httpsPort);\n\t\t}\n\n\t\tif (this.httpsPortMappings.size() < 1) {\n\t\t\tthrow new IllegalArgumentException(\"must map at least one port\");\n\t\t}\n\t}\n}<fim_middle>// class below has no smell\n"}