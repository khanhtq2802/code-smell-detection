{"text": "<fim_prefix>                Delegator delegator = (Delegator) context.get(\"delegator\");\n                GenericValue content = null;\n                String expandedDataResourceId = getDataResourceId(context);\n                String expandedContentId = getContentId(context);\n                if (!(context instanceof MapStack<?>)) {\n                    context = MapStack.create(context);\n                }\n                // This is an important step to make sure that the current contentId is in the context\n                // as templates that contain \"subcontent\" elements will expect to find the master\n                // contentId in the context as \"contentId\".\n                UtilGenerics.<MapStack<String>>cast(context).push();\n                context.put(\"contentId\", expandedContentId);\n                if (expandedDataResourceId.isEmpty()) {\n                    if (!expandedContentId.isEmpty()) {\n                        content = EntityQuery.use(delegator).from(\"Content\").where(\"contentId\", expandedContentId).cache().queryOne();\n                    } else {\n                        String errMsg = \"contentId is empty.\";\n                        Debug.logError(errMsg, module);\n                        return;\n                    }\n                    if (content != null) {\n                        if (content.get(\"dataResourceId\") != null) expandedDataResourceId = content.getString(\"dataResourceId\");\n                    } else {\n                        String errMsg = \"Could not find content with contentId [\" + expandedContentId + \"] \";\n                        Debug.logError(errMsg, module);\n                        throw new RuntimeException(errMsg);\n                    }\n                }\n                GenericValue dataResource = null;\n                if (!expandedDataResourceId.isEmpty()) {\n                    dataResource = EntityQuery.use(delegator).from(\"DataResource\").where(\"dataResourceId\", expandedDataResourceId).cache().queryOne();\n                }\n                String mimeTypeId = null;\n                if (dataResource != null) {\n                    mimeTypeId = dataResource.getString(\"mimeTypeId\");\n                }\n                if (content != null) {\n                    mimeTypeId = content.getString(\"mimeTypeId\");\n                }\n                if (!(mimeTypeId != null\n                        && ((mimeTypeId.indexOf(\"application\") >= 0) || (mimeTypeId.indexOf(\"image\")) >= 0))) {\n                    screenStringRenderer.renderContentBegin(writer, context, this);\n                    screenStringRenderer.renderContentBody(writer, context, this);\n                    screenStringRenderer.renderContentEnd(writer, context, this);\n                }\n                UtilGenerics.<MapStack<String>>cast(context).pop();\n            } catch (IOException e) {\n                String errMsg = \"Error rendering content with contentId [\" + getContentId(context) + \"]: \" + e.toString();\n                Debug.logError(e, errMsg, module);\n                throw new RuntimeException(errMsg);\n            } catch (GenericEntityException e) {\n                String errMsg = \"Error obtaining content with contentId [\" + getContentId(context) + \"]: \" + e.toString();\n                Debug.logError(e, errMsg, module);\n                throw new RuntimeException(errMsg);\n            }\n        }\n        public String getContentId(Map<String, Object> context) {\n            return this.contentId.expandString(context);\n        }\n        public String getDataResourceId() {\n            return this.dataResourceId.getOriginal();\n        }\n        public String getDataResourceId(Map<String, Object> context) {\n            return this.dataResourceId.expandString(context);\n        }\n        public String getEditRequest(Map<String, Object> context) {\n            return this.editRequest.expandString(context);\n        }\n        public String getEditContainerStyle(Map<String, Object> context) {\n            return this.editContainerStyle.expandString(context);\n        }\n        public String getEnableEditName(Map<String, Object> context) {\n            return this.enableEditName.expandString(context);\n        }\n        public boolean xmlEscape() {\n            return this.xmlEscape;\n        }\n        public String getWidth() {\n            return this.width;\n        }\n        public String getHeight() {\n            return this.height;\n        }\n        public String getBorder() {\n            return this.border;\n        }\n        @Override\n        public void accept(ModelWidgetVisitor visitor) throws Exception {\n            visitor.visit(this);\n        }\n        public FlexibleStringExpander getContentId() {\n            return contentId;\n        }\n        public FlexibleStringExpander getEditRequest() {\n            return editRequest;\n        }\n        public FlexibleStringExpander getEditContainerStyle() {\n            return editContainerStyle;\n        }\n        public FlexibleStringExpander getEnableEditName() {\n            return enableEditName;\n        }\n    }\n    public static final class SubContent extends ModelScreenWidget {\n        public static final String TAG_NAME = \"sub-content\";\n        private final FlexibleStringExpander contentId;\n        private final FlexibleStringExpander mapKey;\n        private final FlexibleStringExpander editRequest;\n        private final FlexibleStringExpander editContainerStyle;\n        private final FlexibleStringExpander enableEditName;\n        private final boolean xmlEscape;\n        public SubContent(ModelScreen modelScreen, Element subContentElement) {\n            super(modelScreen, subContentElement);\n            this.contentId = FlexibleStringExpander.getInstance(subContentElement.getAttribute(\"content-id\"));\n            String mapKey = subContentElement.getAttribute(\"map-key\");\n            if (mapKey.isEmpty()) {\n                mapKey = subContentElement.getAttribute(\"assoc-name\");\n            }\n            this.mapKey = FlexibleStringExpander.getInstance(mapKey);\n            this.editRequest = FlexibleStringExpander.getInstance(subContentElement.getAttribute(\"edit-request\"));\n            this.editContainerStyle = FlexibleStringExpander.getInstance(subContentElement.getAttribute(\"edit-container-style\"));\n            this.enableEditName = FlexibleStringExpander.getInstance(subContentElement.getAttribute(\"enable-edit-name\"));\n            this.xmlEscape = \"true\".equals(subContentElement.getAttribute(\"xml-escape\"));\n        }\n        @Override\n        public void renderWidgetString(Appendable writer, Map<String, Object> context, ScreenStringRenderer screenStringRenderer) {\n            try {\n                screenStringRenderer.renderSubContentBegin(writer, context, this);\n                screenStringRenderer.renderSubContentBody(writer, context, this);\n                screenStringRenderer.renderSubContentEnd(writer, context, this);\n            } catch (IOException e) {\n                String errMsg = \"Error rendering subContent with contentId [\" + getContentId(context) + \"]: \" + e.toString();\n                Debug.logError(e, errMsg, module);\n                throw new RuntimeException(errMsg);\n            }\n        }\n        public String getContentId(Map<String, Object> context) {\n            return this.contentId.expandString(context);\n        }\n        public String getMapKey(Map<String, Object> context) {\n            return this.mapKey.expandString(context);\n        }\n        public String getEditRequest(Map<String, Object> context) {\n            return this.editRequest.expandString(context);\n        }\n        public String getEditContainerStyle(Map<String, Object> context) {\n            return this.editContainerStyle.expandString(context);\n        }\n        public String getEnableEditName(Map<String, Object> context) {\n            return this.enableEditName.expandString(context);\n        }\n        public boolean xmlEscape() {\n            return this.xmlEscape;\n        }\n        @Override\n        public void accept(ModelWidgetVisitor visitor) throws Exception {\n            // TODO Auto-generated method stub\n        }\n    }\n    public static final class Menu extends ModelScreenWidget {\n        public static final String TAG_NAME = \"include-menu\";\n        private final FlexibleStringExpander nameExdr;\n        private final FlexibleStringExpander locationExdr;\n        public Menu(ModelScreen modelScreen, Element menuElement) {\n            super(modelScreen, menuElement);\n            this.nameExdr = FlexibleStringExpander.getInstance(menuElement.getAttribute(\"name\"));\n            this.locationExdr = FlexibleStringExpander.getInstance(menuElement.getAttribute(\"location\"));\n        }\n        @Override\n        public void renderWidgetString(Appendable writer, Map<String, Object> context, ScreenStringRenderer screenStringRenderer) throws IOException {\n            // Output format might not support menus, so make menu rendering optional.\n            MenuStringRenderer menuStringRenderer = (MenuStringRenderer) context.get(\"menuStringRenderer\");\n            if (menuStringRenderer == null) {\n                Debug.logVerbose(\"MenuStringRenderer instance not found in rendering context, menu not rendered.\", module);\n                return;\n            }\n            ModelMenu modelMenu = getModelMenu(context);\n            modelMenu.renderMenuString(writer, context, menuStringRenderer);\n        }\n<fim_suffix>        public ModelMenu getModelMenu(Map<String, Object> context) {\n            String name = this.getName(context);\n            String location = this.getLocation(context);\n            ModelMenu modelMenu = null;\n            try {\n                modelMenu = MenuFactory.getMenuFromLocation(location, name);\n            } catch (Exception e) {\n                String errMsg = \"Error rendering included menu named [\" + name + \"] at location [\" + location + \"]: \";\n                Debug.logError(e, errMsg, module);\n                throw new RuntimeException(errMsg + e);\n            }\n            return modelMenu;\n        }<fim_middle>// function below has no smell\n"}