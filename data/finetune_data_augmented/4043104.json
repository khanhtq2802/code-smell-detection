{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.hyracks.algebricks.core.rewriter.base;\nimport java.util.Properties;\nimport org.apache.hyracks.algebricks.core.config.AlgebricksConfig;\npublic class PhysicalOptimizationConfig {\n    private static final int MB = 1048576;\n    private static final String FRAMESIZE = \"FRAMESIZE\";\n    private static final String MAX_FRAMES_EXTERNAL_SORT = \"MAX_FRAMES_EXTERNAL_SORT\";\n    private static final String MAX_FRAMES_EXTERNAL_GROUP_BY = \"MAX_FRAMES_EXTERNAL_GROUP_BY\";\n    private static final String MAX_FRAMES_FOR_JOIN_LEFT_INPUT = \"MAX_FRAMES_FOR_JOIN_LEFT_INPUT\";\n    private static final String MAX_FRAMES_FOR_JOIN = \"MAX_FRAMES_FOR_JOIN\";\n    private static final String MAX_FRAMES_FOR_WINDOW = \"MAX_FRAMES_FOR_WINDOW\";\n    private static final String MAX_FRAMES_FOR_TEXTSEARCH = \"MAX_FRAMES_FOR_TEXTSEARCH\";\n    private static final String FUDGE_FACTOR = \"FUDGE_FACTOR\";\n    private static final String MAX_RECORDS_PER_FRAME = \"MAX_RECORDS_PER_FRAME\";\n    private static final String DEFAULT_HASH_GROUP_TABLE_SIZE = \"DEFAULT_HASH_GROUP_TABLE_SIZE\";\n    private static final String DEFAULT_EXTERNAL_GROUP_TABLE_SIZE = \"DEFAULT_EXTERNAL_GROUP_TABLE_SIZE\";\n    private static final String DEFAULT_IN_MEM_HASH_JOIN_TABLE_SIZE = \"DEFAULT_IN_MEM_HASH_JOIN_TABLE_SIZE\";\n    private static final String SORT_PARALLEL = \"SORT_PARALLEL\";\n    private static final String SORT_SAMPLES = \"SORT_SAMPLES\";\n    private Properties properties = new Properties();\n    public PhysicalOptimizationConfig() {\n        int frameSize = 32768;\n        setInt(FRAMESIZE, frameSize);\n        setInt(MAX_FRAMES_EXTERNAL_SORT, (int) (((long) 32 * MB) / frameSize));\n        setInt(MAX_FRAMES_EXTERNAL_GROUP_BY, (int) (((long) 32 * MB) / frameSize));\n        // use http://www.rsok.com/~jrm/printprimes.html to find prime numbers\n        setInt(DEFAULT_HASH_GROUP_TABLE_SIZE, 10485767);\n        setInt(DEFAULT_EXTERNAL_GROUP_TABLE_SIZE, 10485767);\n        setInt(DEFAULT_IN_MEM_HASH_JOIN_TABLE_SIZE, 10485767);\n    }\n    public int getFrameSize() {\n        return getInt(FRAMESIZE, 32768);\n    }\n    public void setFrameSize(int frameSize) {\n        setInt(FRAMESIZE, frameSize);\n    }\n    public double getFudgeFactor() {\n        return getDouble(FUDGE_FACTOR, 1.3);\n    }\n    public void setFudgeFactor(double fudgeFactor) {\n        setDouble(FUDGE_FACTOR, fudgeFactor);\n    }\n    public int getMaxRecordsPerFrame() {\n        return getInt(MAX_RECORDS_PER_FRAME, 512);\n    }\n    public void setMaxRecordsPerFrame(int maxRecords) {\n        setInt(MAX_RECORDS_PER_FRAME, maxRecords);\n    }\n    public int getMaxFramesForJoinLeftInput() {\n        int frameSize = getFrameSize();\n        return getInt(MAX_FRAMES_FOR_JOIN_LEFT_INPUT, (int) (140L * 1024 * MB / frameSize));\n    }\n    public void setMaxFramesForJoinLeftInput(int frameLimit) {\n        setInt(MAX_FRAMES_FOR_JOIN_LEFT_INPUT, frameLimit);\n    }\n    public int getMaxFramesForJoin() {\n        int frameSize = getFrameSize();\n        return getInt(MAX_FRAMES_FOR_JOIN, (int) (64L * MB / frameSize));\n    }\n    public void setMaxFramesForJoin(int frameLimit) {\n        setInt(MAX_FRAMES_FOR_JOIN, frameLimit);\n    }\n    public int getMaxFramesForGroupBy() {\n        int frameSize = getFrameSize();\n        return getInt(MAX_FRAMES_EXTERNAL_GROUP_BY, (int) (((long) 256 * MB) / frameSize));\n    }\n    public void setMaxFramesExternalGroupBy(int frameLimit) {\n        setInt(MAX_FRAMES_EXTERNAL_GROUP_BY, frameLimit);\n    }\n    public int getMaxFramesExternalSort() {\n        int frameSize = getFrameSize();\n        return getInt(MAX_FRAMES_EXTERNAL_SORT, (int) (((long) 32 * MB) / frameSize));\n    }\n    public void setMaxFramesExternalSort(int frameLimit) {\n        setInt(MAX_FRAMES_EXTERNAL_SORT, frameLimit);\n    }\n<fim_suffix>    public int getMaxFramesForWindow() {\n        int frameSize = getFrameSize();\n        return getInt(MAX_FRAMES_FOR_WINDOW, (int) (((long) 4 * MB) / frameSize));\n    }\n    public void setMaxFramesForWindow(int frameLimit) {\n        setInt(MAX_FRAMES_FOR_WINDOW, frameLimit);\n    }\n    public int getMaxFramesForTextSearch() {\n        int frameSize = getFrameSize();\n        return getInt(MAX_FRAMES_FOR_TEXTSEARCH, (int) (((long) 32 * MB) / frameSize));\n    }\n    public void setMaxFramesForTextSearch(int frameLimit) {\n        setInt(MAX_FRAMES_FOR_TEXTSEARCH, frameLimit);\n    }\n    public int getHashGroupByTableSize() {\n        return getInt(DEFAULT_HASH_GROUP_TABLE_SIZE, 10485767);\n    }\n    public void setHashGroupByTableSize(int tableSize) {\n        setInt(DEFAULT_HASH_GROUP_TABLE_SIZE, tableSize);\n    }\n    public int getExternalGroupByTableSize() {\n        return getInt(DEFAULT_EXTERNAL_GROUP_TABLE_SIZE, 10485767);\n    }\n    public void setExternalGroupByTableSize(int tableSize) {\n        setInt(DEFAULT_EXTERNAL_GROUP_TABLE_SIZE, tableSize);\n    }\n    public int getInMemHashJoinTableSize() {\n        return getInt(DEFAULT_IN_MEM_HASH_JOIN_TABLE_SIZE, 10485767);\n    }\n    public void setInMemHashJoinTableSize(int tableSize) {\n        setInt(DEFAULT_IN_MEM_HASH_JOIN_TABLE_SIZE, tableSize);\n    }\n    public boolean getSortParallel() {\n        return getBoolean(SORT_PARALLEL, AlgebricksConfig.SORT_PARALLEL);\n    }\n    public void setSortParallel(boolean sortParallel) {\n        setBoolean(SORT_PARALLEL, sortParallel);\n    }\n    public int getSortSamples() {\n        return getInt(SORT_SAMPLES, AlgebricksConfig.SORT_SAMPLES);\n    }\n    public void setSortSamples(int sortSamples) {\n        setInt(SORT_SAMPLES, sortSamples);\n    }\n    private void setInt(String property, int value) {\n        properties.setProperty(property, Integer.toString(value));\n    }\n    private int getInt(String property, int defaultValue) {\n        String value = properties.getProperty(property);\n        if (value == null)\n            return defaultValue;\n        else\n            return Integer.parseInt(value);\n    }\n    private void setDouble(String property, double value) {\n        properties.setProperty(property, Double.toString(value));\n    }\n    private double getDouble(String property, double defaultValue) {\n        String value = properties.getProperty(property);\n        if (value == null)\n            return defaultValue;\n        else\n            return Double.parseDouble(value);\n    }\n    private void setBoolean(String property, boolean value) {\n        properties.setProperty(property, Boolean.toString(value));\n    }\n    private boolean getBoolean(String property, boolean defaultValue) {\n        String value = properties.getProperty(property);\n        if (value == null) {\n            return defaultValue;\n        } else {<fim_middle>// function below has no smell\n"}