{"text": "<fim_prefix>/**\n * Copyright 2011 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.data.neo4j.rest;\n\n\nimport org.neo4j.graphdb.Direction;\nimport org.neo4j.graphdb.Node;\nimport org.neo4j.graphdb.Path;\nimport org.neo4j.graphdb.RelationshipExpander;\nimport org.neo4j.graphdb.RelationshipType;\nimport org.neo4j.graphdb.traversal.BranchOrderingPolicy;\nimport org.neo4j.graphdb.traversal.Evaluator;\nimport org.neo4j.graphdb.traversal.PruneEvaluator;\nimport org.neo4j.graphdb.traversal.TraversalDescription;\nimport org.neo4j.graphdb.traversal.Traverser;\nimport org.neo4j.graphdb.traversal.UniquenessFactory;\nimport org.neo4j.helpers.Predicate;\nimport org.neo4j.kernel.Traversal;\nimport org.neo4j.kernel.Uniqueness;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * @author Michael Hunger\n * @since 02.02.11\n */\npublic class RestTraversal implements RestTraversalDescription\n{\n\n    private static final String FULLPATH = \"fullpath\";\n    private final Map<String, Object> description = new HashMap<String, Object>();\n\n<fim_suffix>    @Override\n    public String toString()\n    {\n        return description.toString();\n    }\n\n    public RestTraversalDescription uniqueness( UniquenessFactory uniquenessFactory )\n    {\n        return uniqueness( uniquenessFactory, null );\n    }\n\n    public RestTraversalDescription uniqueness( UniquenessFactory uniquenessFactory, Object value )\n    {\n        String uniqueness = restify( uniquenessFactory );\n        add( \"uniqueness\", value == null ? uniqueness : toMap( \"name\", uniqueness, \"value\", value ) );\n        return null;\n    }\n\n    private String restify( UniquenessFactory uniquenessFactory )\n    {\n        if ( uniquenessFactory instanceof Uniqueness )\n        {\n            return ( (Uniqueness)uniquenessFactory ).name().toLowerCase().replace( \"_\", \" \" );\n        }\n        throw new UnsupportedOperationException( \"Only values of \" + Uniqueness.class + \" are supported\" );\n    }\n\n    public RestTraversalDescription prune( PruneEvaluator pruneEvaluator )\n    {\n        if (pruneEvaluator == PruneEvaluator.NONE) {\n            return add( \"prune_evaluator\", toMap( \"language\", \"builtin\", \"name\", \"none\" ) );\n        }\n\n        Integer maxDepth = getMaxDepthValueOrNull( pruneEvaluator );\n        if ( maxDepth != null )\n        {\n            return maxDepth( maxDepth );\n        }\n        throw new UnsupportedOperationException( \"Only max depth supported\" );\n    }\n\n    private Integer getMaxDepthValueOrNull( PruneEvaluator pruneEvaluator )\n    {\n        try\n        {\n            final Field depthField = pruneEvaluator.getClass().getDeclaredField( \"val$depth\" );\n            depthField.setAccessible( true );\n            return (Integer)depthField.get( pruneEvaluator );\n        } catch ( Exception e )\n        {\n            return null;\n        }\n    }\n\n    public RestTraversalDescription filter( Predicate<Path> pathPredicate )\n    {\n        if ( pathPredicate == Traversal.returnAll() )\n        {\n            return add( \"return_filter\", toMap( \"language\", \"builtin\", \"name\", \"all\" ) );\n        }\n        if ( pathPredicate == Traversal.returnAllButStartNode() )\n        {\n            return add( \"return_filter\", toMap( \"language\", \"builtin\", \"name\", \"all but start node\" ) );\n        }\n        throw new UnsupportedOperationException( \"Only builtin paths supported\" );\n    }\n\n    public RestTraversalDescription evaluator( Evaluator evaluator )\n    {\n        throw new UnsupportedOperationException(\"Evaluators not yet supported\");\n    }\n\n    public RestTraversalDescription prune( ScriptLanguage language, String code )\n    {\n        return add( \"prune_evaluator\", toMap( \"language\", language.name().toLowerCase(), \"body\", code ) );\n    }\n\n    public RestTraversalDescription filter( ScriptLanguage language, String code )\n    {\n        return add( \"return_filter\", toMap( \"language\", language.name().toLowerCase(), \"body\", code ) );\n    }\n\n    public RestTraversalDescription maxDepth( int depth )\n    {\n        return add( \"max_depth\", depth );\n    }\n\n    public RestTraversalDescription order( BranchOrderingPolicy branchOrderingPolicy )\n    {\n        throw new UnsupportedOperationException();\n    }\n\n    public RestTraversalDescription depthFirst()\n    {\n        return add( \"order\", \"depth_first\" );\n    }\n\n    public RestTraversalDescription breadthFirst()\n    {\n        return add( \"order\", \"breadth_first\" );\n    }\n\n    private RestTraversalDescription add( String key, Object value )\n    {\n        description.put( key, value );\n        return this;\n    }\n\n    public RestTraversalDescription relationships( RelationshipType relationshipType )\n    {\n        return relationships( relationshipType, null );\n    }\n\n    public RestTraversalDescription relationships( RelationshipType relationshipType, Direction direction )\n    {\n        if ( !description.containsKey( \"relationships\" ) )\n        {\n            description.put( \"relationships\", new HashSet<Map<String, Object>>() );\n        }\n        Set<Map<String, Object>> relationships = (Set<Map<String, Object>>)description.get( \"relationships\" );\n        relationships.add( toMap( \"type\", relationshipType, \"direction\", directionString( direction ) ) );\n        return this;\n    }\n\n    private Map<String, Object> toMap( Object... params )\n    {\n        if ( params.length % 2 != 0 )\n        {\n            throw new IllegalArgumentException( \"toMap needs an even number of arguments, but was \" + Arrays.toString( params ) );\n        }\n\n        Map<String, Object> result = new HashMap<String, Object>();\n        for ( int i = 0; i < params.length; i += 2 )\n        {\n            if ( params[ i + 1 ] == null )\n            {\n                continue;\n            }\n            result.put( params[ i ].toString(), params[ i + 1 ].toString() );\n        }\n        return result;\n    }\n\n    private String directionString( Direction direction )\n    {\n        switch ( direction )\n        {\n            case INCOMING:\n                return \"in\";\n            case OUTGOING:\n                return \"out\";\n            default:\n                return null;\n        }\n    }\n\n    public RestTraversalDescription expand( RelationshipExpander relationshipExpander )\n    {\n        return null;\n    }\n\n    public RestTraverser traverse( Node node )\n    {\n        final RestNode restNode = (RestNode)node;\n        final RestRequest request = restNode.getRestRequest();\n        final String traversalJson = JsonHelper.createJsonFrom( description );\n        final RequestResult requestResult = request.post(\"traverse/\" + FULLPATH, traversalJson);\n        if ( request.statusOtherThan(requestResult, javax.ws.rs.core.Response.Status.OK ) )\n        {\n            throw new RuntimeException( String.format( \"Error executing traversal: %d %s\", requestResult.getStatus(), traversalJson ) );\n        }\n        final Object col = request.toEntity(requestResult);\n        if ( !( col instanceof Collection ) )\n        {\n            throw new RuntimeException( String.format( \"Unexpected traversal response, %s instead of collection\", col != null ? col.getClass() : null ) );\n        }\n        return new RestTraverser( (Collection)col, restNode.getRestGraphDatabase() );\n    }\n\n    public static RestTraversalDescription description()\n    {\n        return new RestTraversal();\n    }\n\n    public Map<String, Object> getPostData()\n    {\n        return description;\n    }\n}<fim_middle>// function below has no smell\n"}