{"text": "<fim_prefix>import io.kubernetes.client.models.V1SubjectAccessReviewSpec;\nimport io.kubernetes.client.models.V1SubjectAccessReviewStatus;\nimport java.util.List;\nimport oracle.kubernetes.operator.logging.LoggingFacade;\nimport oracle.kubernetes.operator.logging.LoggingFactory;\nimport oracle.kubernetes.operator.logging.MessageKeys;\n/** Delegate authorization decisions to Kubernetes ABAC and/or RBAC. */\npublic class AuthorizationProxy {\n  private static final LoggingFacade LOGGER = LoggingFactory.getLogger(\"Operator\", \"Operator\");\n  public enum Operation {\n    get,\n    list,\n    create,\n    update,\n    patch,\n    replace,\n    watch,\n    proxy,\n    redirect,\n    delete,\n    deletecollection\n  }\n  public enum Resource {\n    CONFIGMAPS(\"configmaps\", \"\"),\n    PODS(\"pods\", \"\"),\n    LOGS(\"pods\", \"log\", \"\"),\n    EXEC(\"pods\", \"exec\", \"\"),\n    PODTEMPLATES(\"podtemplates\", \"\"),\n    EVENTS(\"events\", \"\"),\n    SERVICES(\"services\", \"\"),\n    NAMESPACES(\"namespaces\", \"\"),\n    JOBS(\"jobs\", \"batch\"),\n    CRONJOBS(\"cronjobs\", \"batch\"),\n    CRDS(\"customresourcedefinitions\", \"apiextensions.k8s.io\"),\n    DOMAINS(\"domains\", \"weblogic.oracle\"),\n    DOMAINSTATUSS(\"domains\", \"status\", \"weblogic.oracle\"),\n    SUBJECTACCESSREVIEWS(\"subjectaccessreviews\", \"authorization.k8s.io\"),\n    SELFSUBJECTACCESSREVIEWS(\"selfsubjectaccessreviews\", \"authorization.k8s.io\"),\n    LOCALSUBJECTACCESSREVIEWS(\"localsubjectaccessreviews\", \"authorization.k8s.io\"),\n    SELFSUBJECTRULESREVIEWS(\"selfsubjectrulesreviews\", \"authorization.k8s.io\"),\n    TOKENREVIEWS(\"tokenreviews\", \"authentication.k8s.io\"),\n    SECRETS(\"secrets\", \"\"),\n    PERSISTENTVOLUMES(\"persistentvolumes\", \"\"),\n    PERSISTENTVOLUMECLAIMS(\"persistentvolumeclaims\", \"\"),\n    STORAGECLASSES(\"storageclasses\", \"storage.k8s.io\"),\n    PODPRESETS(\"podpresets\", \"settings.k8s.io\"),\n    INGRESSES(\"ingresses\", \"extensions\"),\n    NETWORKPOLICIES(\"networkpolicies\", \"extensions\"),\n    PODSECURITYPOLICIES(\"podsecuritypolicies\", \"extensions\");\n    private final String resource;\n    private final String subResource;\n    private final String apiGroup;\n    Resource(String resource, String apiGroup) {\n      this(resource, \"\", apiGroup);\n    }\n    Resource(String resource, String subResource, String apiGroup) {\n      this.resource = resource;\n      this.subResource = subResource;\n      this.apiGroup = apiGroup;\n    }\n    public String getResource() {\n      return resource;\n    }\n    public String getSubResource() {\n      return subResource;\n    }\n    public String getAPIGroup() {\n      return apiGroup;\n    }\n  }\n  public enum Scope {\n    namespace,\n    cluster\n  }\n  /**\n   * Check if the specified principal is allowed to perform the specified operation on the specified\n   * resource in the specified scope. Call this version of the method when you know that the\n   * principal is not a member of any groups.\n   *\n   * @param principal The user, group or service account.\n   * @param operation The operation to be authorized.\n   * @param resource The kind of resource on which the operation is to be authorized.\n   * @param resourceName The name of the resource instance on which the operation is to be\n   *     authorized.\n   * @param scope The scope of the operation (cluster or namespace).\n   * @param namespaceName name of the namespace if scope is namespace else null.\n   * @return true if the operation is allowed, or false if not.\n   */\n  public boolean check(\n      String principal,\n      Operation operation,\n      Resource resource,\n      String resourceName,\n      Scope scope,\n      String namespaceName) {\n    return check(principal, null, operation, resource, resourceName, scope, namespaceName);\n  }\n  /**\n   * Check if the specified principal is allowed to perform the specified operation on the specified\n   * resource in the specified scope.\n   *\n   * @param principal The user, group or service account.\n   * @param groups The groups that principal is a member of.\n   * @param operation The operation to be authorized.\n   * @param resource The kind of resource on which the operation is to be authorized.\n   * @param resourceName The name of the resource instance on which the operation is to be\n   *     authorized.\n   * @param scope The scope of the operation (cluster or namespace).\n   * @param namespaceName name of the namespace if scope is namespace else null.\n   * @return true if the operation is allowed, or false if not.\n   */\n  public boolean check(\n      String principal,\n      final List<String> groups,\n      Operation operation,\n      Resource resource,\n      String resourceName,\n      Scope scope,\n      String namespaceName) {\n    LOGGER.entering();\n    V1SubjectAccessReview subjectAccessReview =\n        prepareSubjectAccessReview(\n            principal, groups, operation, resource, resourceName, scope, namespaceName);\n    try {\n      subjectAccessReview = new CallBuilder().createSubjectAccessReview(subjectAccessReview);\n    } catch (ApiException e) {\n      LOGGER.severe(MessageKeys.APIEXCEPTION_FROM_SUBJECT_ACCESS_REVIEW, e);\n      LOGGER.exiting(Boolean.FALSE);\n      return Boolean.FALSE;\n    }\n    V1SubjectAccessReviewStatus subjectAccessReviewStatus = subjectAccessReview.getStatus();\n    Boolean result = subjectAccessReviewStatus.isAllowed();\n    LOGGER.exiting(result);\n    return result;\n  }\n  /**\n   * Check access.\n   *\n   * @param operation Operator\n   * @param resource Resource\n   * @param resourceName Resource name\n   * @param scope Scope\n   * @param namespaceName Namespace\n   * @return True, if authorization is allowed\n   */\n  public boolean check(\n      Operation operation,\n      Resource resource,\n      String resourceName,\n      Scope scope,\n      String namespaceName) {\n    LOGGER.entering();\n    Boolean result =\n        createSelfSubjectAccessReview(\n            prepareSelfSubjectAccessReview(\n                operation, resource, resourceName, scope, namespaceName));\n    LOGGER.exiting(result);\n    return result;\n  }\n  private Boolean createSelfSubjectAccessReview(V1SelfSubjectAccessReview subjectAccessReview) {\n    try {\n      subjectAccessReview = new CallBuilder().createSelfSubjectAccessReview(subjectAccessReview);\n      V1SubjectAccessReviewStatus subjectAccessReviewStatus = subjectAccessReview.getStatus();\n      return subjectAccessReviewStatus.isAllowed();\n    } catch (ApiException e) {\n      LOGGER.severe(MessageKeys.APIEXCEPTION_FROM_SUBJECT_ACCESS_REVIEW, e);\n      return false;\n    }\n  }\n  /**\n   * Prepares an instance of SubjectAccessReview and returns same.\n   *\n   * @param principal The user, group or service account.\n   * @param groups The groups that principal is a member of.\n   * @param operation The operation to be authorized.\n   * @param resource The kind of resource on which the operation is to be authorized.\n   * @param resourceName The name of the resource instance on which the operation is to be\n   *     authorized.\n   * @param scope The scope of the operation (cluster or namespace).\n   * @param namespaceName name of the namespace if scope is namespace else null.\n   * @return an instance of SubjectAccessReview.\n   */\n  private V1SubjectAccessReview prepareSubjectAccessReview(\n      String principal,\n      final List<String> groups,\n      Operation operation,\n      Resource resource,\n      String resourceName,\n      Scope scope,\n      String namespaceName) {\n    LOGGER.entering();\n    V1SubjectAccessReviewSpec subjectAccessReviewSpec = new V1SubjectAccessReviewSpec();\n    subjectAccessReviewSpec.setUser(principal);\n    subjectAccessReviewSpec.setGroups(groups);\n    subjectAccessReviewSpec.setResourceAttributes(\n        prepareResourceAttributes(operation, resource, resourceName, scope, namespaceName));\n    V1SubjectAccessReview subjectAccessReview = new V1SubjectAccessReview();\n    subjectAccessReview.setApiVersion(\"authorization.k8s.io/v1\");\n    subjectAccessReview.setKind(\"SubjectAccessReview\");\n    subjectAccessReview.setMetadata(new V1ObjectMeta());\n    subjectAccessReview.setSpec(subjectAccessReviewSpec);\n    LOGGER.exiting(subjectAccessReview);\n    return subjectAccessReview;\n  }\n<fim_suffix>  private V1SelfSubjectAccessReview prepareSelfSubjectAccessReview(\n      Operation operation,\n      Resource resource,\n      String resourceName,\n      Scope scope,\n      String namespaceName) {\n    LOGGER.entering();\n    V1SelfSubjectAccessReviewSpec subjectAccessReviewSpec = new V1SelfSubjectAccessReviewSpec();\n    subjectAccessReviewSpec.setResourceAttributes(\n        prepareResourceAttributes(operation, resource, resourceName, scope, namespaceName));\n    V1SelfSubjectAccessReview subjectAccessReview = new V1SelfSubjectAccessReview();\n    subjectAccessReview.setApiVersion(\"authorization.k8s.io/v1\");\n    subjectAccessReview.setKind(\"SelfSubjectAccessReview\");\n    subjectAccessReview.setMetadata(new V1ObjectMeta());\n    subjectAccessReview.setSpec(subjectAccessReviewSpec);\n    LOGGER.exiting(subjectAccessReview);\n    return subjectAccessReview;\n  }<fim_middle>// function below has no smell\n"}