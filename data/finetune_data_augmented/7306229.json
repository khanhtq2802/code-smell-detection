{"text": "<fim_prefix>    private AttachedPropertyDictionary attachedProperties = new AttachedPropertyDictionary();\n    private final Object lockProperties = new Object();\n    private BuildController(final IBuildServer buildServer) {\n        super(new _BuildController());\n        Check.notNull(buildServer, \"buildServer\"); //$NON-NLS-1$\n        this.buildServer = (BuildServer) buildServer;\n        getWebServiceObject().setTags(new String[0]);\n        getWebServiceObject().setProperties(new _PropertyValue[0]);\n    }\n    public BuildController(final IBuildServer buildServer, final _BuildController webServiceObject) {\n        super(webServiceObject);\n        this.buildServer = (BuildServer) buildServer;\n    }\n    public BuildController(final IBuildServer buildServer, final BuildServiceHost serviceHost, final String name) {\n        this(buildServer);\n        final _BuildController _o = getWebServiceObject();\n        _o.setName(name);\n        _o.setMaxConcurrentBuilds(0);\n        _o.setCustomAssemblyPath(null);\n        _o.setTags(new String[0]);\n        setServiceHost(serviceHost);\n        // We need the snapshot to be a non-null value for locking purposes, so\n        // go ahead and initialize it here. The snapshot will not be used for\n        // anything until the agent is saved to the server for the first time\n        // and has a URI, so this should not be a big deal.\n        lastSnapshot = getSnapshot();\n        _o.setStatus(ControllerStatus.OFFLINE.getWebServiceObject());\n        _o.setEnabled(true);\n    }\n    public BuildController(final IBuildServer buildServer, final BuildController2010 controller2010) {\n        this(buildServer);\n        final _BuildController _o = getWebServiceObject();\n        _o.setCustomAssemblyPath(controller2010.getCustomAssemblyPath());\n        _o.setDateCreated(controller2010.getDateCreated());\n        _o.setDateUpdated(controller2010.getDateUpdated());\n        _o.setDescription(controller2010.getDescription());\n        _o.setEnabled(controller2010.isEnabled());\n        _o.setName(controller2010.getName());\n        _o.setServiceHostUri(controller2010.getServiceHostURI());\n        _o.setStatus(TFS2010Helper.convert(controller2010.getStatus()).getWebServiceObject());\n        _o.setStatusMessage(controller2010.getStatusMessage());\n        _o.setTags(controller2010.getTags());\n        _o.setUri(controller2010.getURI());\n        _o.setUrl(controller2010.getURL());\n        afterDeserialize();\n    }\n    /**\n     * This constructor is for V2 compatibility and should not be used\n     * otherwise.\n     *\n     *\n     * @param buildServer\n     * @param agent2008\n     */\n    public BuildController(final IBuildServer buildServer, final BuildAgent2008 agent2008) {\n        this(buildServer);\n        final _BuildController _o = getWebServiceObject();\n        _o.setDescription(agent2008.getDescription());\n        // Using the full path of the agent as the controller name so the user\n        // doesn't see duplicates.\n        _o.setName(agent2008.getFullPath());\n        _o.setQueueCount(agent2008.getQueueCount());\n        _o.setStatus(TFS2008Helper.convert(agent2008.getStatus()).getWebServiceObject());\n        _o.setEnabled(agent2008.getStatus() != Agent2008Status.DISABLED);\n        _o.setServiceHostUri(agent2008.getURI());\n        _o.setStatusMessage(agent2008.getStatusMessage());\n        _o.setUri(agent2008.getURI());\n        afterDeserialize();\n    }\n    public _BuildController getWebServiceObject() {\n        return (_BuildController) this.webServiceObject;\n    }\n    /**\n     * Gets or sets the version control folder containing custom assemblies.\n     * {@inheritDoc}\n     */\n    @Override\n    public String getCustomAssemblyPath() {\n        return getWebServiceObject().getCustomAssemblyPath();\n    }\n    @Override\n    public void setCustomAssemblyPath(final String value) {\n        getWebServiceObject().setCustomAssemblyPath(value);\n    }\n    /**\n     * Gets the date this build agent was created. This field is read-only.\n     * {@inheritDoc}\n     */\n    @Override\n    public Calendar getDateCreated() {\n        return getWebServiceObject().getDateCreated();\n    }\n    /**\n     * Gets the date this build agent was last updated. This field is read-only.\n     * {@inheritDoc}\n     */\n    @Override\n    public Calendar getDateUpdated() {\n        return getWebServiceObject().getDateUpdated();\n    }\n    /**\n     * Gets or sets the description. {@inheritDoc}\n     */\n    @Override\n    public String getDescription() {\n        return getWebServiceObject().getDescription();\n    }\n    @Override\n    public void setDescription(final String value) {\n        getWebServiceObject().setDescription(value);\n    }\n    /**\n     * Gets or sets a value indicating the enabled state. {@inheritDoc}\n     */\n    @Override\n    public boolean isEnabled() {\n        return getWebServiceObject().isEnabled();\n    }\n    @Override\n    public void setEnabled(final boolean value) {\n        getWebServiceObject().setEnabled(value);\n    }\n    /**\n     * Gets the attached property values.\n     *\n     *\n     * @return\n     */\n    public PropertyValue[] getInternalProperties() {\n        return (PropertyValue[]) WrapperUtils.wrap(PropertyValue.class, getWebServiceObject().getProperties());\n    }\n    public void setInternalProperties(final PropertyValue[] value) {\n        getWebServiceObject().setProperties((_PropertyValue[]) WrapperUtils.unwrap(_PropertyValue.class, value));\n    }\n    /**\n     * Gets or sets the number of concurrent builds allowed to run in parallel.\n     * {@inheritDoc}\n     */\n    @Override\n    public int getMaxConcurrentBuilds() {\n        return getWebServiceObject().getMaxConcurrentBuilds();\n    }\n    @Override\n    public void setMaxConcurrentBuilds(final int value) {\n        getWebServiceObject().setMaxConcurrentBuilds(value);\n    }\n    /**\n     * Gets the message queue address. This field is read-only. {@inheritDoc}\n     */\n    @Override\n    public String getMessageQueueURL() {\n        return getWebServiceObject().getMessageQueueUrl();\n    }\n    /**\n     * Gets or sets the display name. {@inheritDoc}\n     */\n    @Override\n    public String getName() {\n        return getWebServiceObject().getName();\n    }\n    @Override\n    public void setName(final String value) {\n        getWebServiceObject().setName(value);\n    }\n    /**\n     * Gets the current queue depth. This field is read-only. {@inheritDoc}\n     */\n    @Override\n    public int getQueueCount() {\n        return getWebServiceObject().getQueueCount();\n    }\n    public void setQueueCount(final int value) {\n        getWebServiceObject().setQueueCount(value);\n    }\n    /**\n     * Gets or sets the service host URI.\n     *\n     *\n     * @return\n     */\n    public String getServiceHostURI() {\n        return getWebServiceObject().getServiceHostUri();\n    }\n    /**\n     * Gets or sets the status. This field is reserved for system use only.\n     * {@inheritDoc}\n     */\n    @Override\n    public ControllerStatus getStatus() {\n        return ControllerStatus.fromWebServiceObject(getWebServiceObject().getStatus());\n    }\n    @Override\n    public void setStatus(final ControllerStatus value) {\n        getWebServiceObject().setStatus(value.getWebServiceObject());\n    }\n    /**\n     * Gets or sets the status message. This field is reserved for system use\n     * only. {@inheritDoc}\n     */\n    @Override\n    public String getStatusMessage() {\n        return getWebServiceObject().getStatusMessage();\n    }\n    @Override\n    public void setStatusMessage(final String value) {\n        getWebServiceObject().setStatusMessage(value);\n    }\n    /**\n     * Gets the URI. This field is read-only. {@inheritDoc}\n     */\n    @Override\n    public String getURI() {\n        return getWebServiceObject().getUri();\n    }\n    public void setURI(final String value) {\n        getWebServiceObject().setUri(value);\n    }\n    /**\n     * Gets the physical address for the remote service. This field is\n     * read-only. {@inheritDoc}\n     */\n    @Override\n    public String getURL() {\n        return getWebServiceObject().getUrl();\n    }\n    public void setURL(final String value) {\n        getWebServiceObject().setUrl(value);\n    }\n    @Override\n    public IBuildServiceHost getServiceHost() {\n        if (serviceHost == null && getWebServiceObject().getServiceHostUri() != null) {\n            // Lazily load service host object\n            serviceHost = buildServer.getBuildServiceHostByURI(getWebServiceObject().getServiceHostUri());\n        }\n        return serviceHost;\n    }\n<fim_suffix>    public void setServiceHost(final IBuildServiceHost value) {\n        serviceHost = value;\n        if (serviceHost != null) {\n            getWebServiceObject().setServiceHostUri(serviceHost.getURI());\n        } else {\n            getWebServiceObject().setServiceHostUri(null);\n        }\n    }<fim_middle>// function below has no smell\n"}