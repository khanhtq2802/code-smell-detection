{"text": "<fim_prefix>/*\n * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage sun.lwawt.macosx;\n\nimport java.awt.*;\nimport java.awt.event.FocusEvent;\n\nimport sun.java2d.SurfaceData;\nimport sun.java2d.opengl.CGLLayer;\nimport sun.lwawt.LWWindowPeer;\nimport sun.lwawt.PlatformWindow;\nimport sun.util.logging.PlatformLogger;\n\n/*\n * Provides a lightweight implementation of the EmbeddedFrame.\n */\npublic class CPlatformEmbeddedFrame implements PlatformWindow {\n\n    private static final PlatformLogger focusLogger = PlatformLogger.getLogger(\n            \"sun.lwawt.macosx.focus.CPlatformEmbeddedFrame\");\n\n    private CGLLayer windowLayer;\n    private LWWindowPeer peer;\n    private CEmbeddedFrame target;\n\n    private volatile int screenX = 0;\n    private volatile int screenY = 0;\n\n    @Override // PlatformWindow\n    public void initialize(Window target, final LWWindowPeer peer, PlatformWindow owner) {\n        this.peer = peer;\n        this.windowLayer = new CGLLayer(peer);\n        this.target = (CEmbeddedFrame)target;\n    }\n\n    @Override\n    public LWWindowPeer getPeer() {\n        return peer;\n    }\n\n    @Override\n    public long getLayerPtr() {\n        return windowLayer.getPointer();\n    }\n\n    @Override\n    public void dispose() {\n        windowLayer.dispose();\n    }\n\n    @Override\n    public void setBounds(int x, int y, int w, int h) {\n        // This is a lightweight implementation of the EmbeddedFrame\n        // and we simply synthesize a reshape request.\n        screenX = x;\n        screenY = y;\n        peer.notifyReshape(x, y, w, h);\n    }\n\n    @Override\n    public GraphicsDevice getGraphicsDevice() {\n        // REMIND: return the main screen for the initial implementation\n        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n        return ge.getDefaultScreenDevice();\n    }\n\n    @Override\n    public Point getLocationOnScreen() {\n        return new Point(screenX, screenY);\n    }\n\n    @Override\n    public FontMetrics getFontMetrics(Font f) {\n        throw new RuntimeException(\"Not implemented\");\n    }\n\n    @Override\n    public SurfaceData getScreenSurface() {\n        return windowLayer.getSurfaceData();\n    }\n\n    @Override\n    public SurfaceData replaceSurfaceData() {\n        return windowLayer.replaceSurfaceData();\n    }\n\n    @Override\n    public void setVisible(boolean visible) {}\n\n    @Override\n    public void setTitle(String title) {}\n\n    @Override\n    public Insets getInsets() {\n        return new Insets(0, 0, 0, 0);\n    }\n\n    @Override\n    public void toFront() {}\n\n    @Override\n    public void toBack() {}\n\n    @Override\n    public void setMenuBar(MenuBar mb) {}\n\n    @Override\n    public void setAlwaysOnTop(boolean value) {}\n\n    @Override\n    public void updateFocusableWindowState() {}\n\n    @Override\n    public boolean rejectFocusRequest(FocusEvent.Cause cause) {\n        // Cross-app activation requests are not allowed.\n        if (cause != FocusEvent.Cause.MOUSE_EVENT &&\n            !target.isParentWindowActive())\n        {\n            focusLogger.fine(\"the embedder is inactive, so the request is rejected\");\n            return true;\n        }\n        return false;\n    }\n\n<fim_suffix>    @Override\n    public boolean requestWindowFocus() {\n        CEmbeddedFrame.updateGlobalFocusedWindow(target);\n        target.synthesizeWindowActivation(true);\n        return true;\n    }\n\n    @Override\n    public boolean isActive() {\n        return true;\n    }\n\n    @Override\n    public void setResizable(boolean resizable) {}\n\n    @Override\n    public void setSizeConstraints(int minW, int minH, int maxW, int maxH) {}\n\n    @Override\n    public void updateIconImages() {}\n\n    @Override\n    public void setOpacity(float opacity) {}\n\n    @Override\n    public void setOpaque(boolean isOpaque) {}\n\n    @Override\n    public void enterFullScreenMode() {}\n\n    @Override\n    public void exitFullScreenMode() {}\n\n    @Override\n    public boolean isFullScreenMode() {\n        return false;\n    }\n\n    @Override\n    public void setWindowState(int windowState) {}\n\n    @Override\n    public void setModalBlocked(boolean blocked) {}\n\n    /*\n     * The method could not be implemented due to CALayer restrictions.\n     * The exeption enforce clients not to use it.\n     */\n    @Override\n    public boolean isUnderMouse() {\n        throw new RuntimeException(\"Not implemented\");\n    }\n}<fim_middle>// function below has no smell\n"}