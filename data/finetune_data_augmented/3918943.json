{"text": "<fim_prefix>        _applicationExtensions = new ConcurrentHashMap<>();\n    private ConcurrentHashMap<String, ApplicationRuntimeInformation>\n        _applications = new ConcurrentHashMap<>();\n    private Collection<CachingServiceReference<?>> _clashingApplications =\n        new CopyOnWriteArrayList<>();\n    private Collection<CachingServiceReference<?>> _clashingExtensions =\n        new CopyOnWriteArrayList<>();\n    private Collection<CachingServiceReference<?>> _clashingResources =\n        new CopyOnWriteArrayList<>();\n    private Set<CachingServiceReference<Application>>\n        _contextDependentApplications = ConcurrentHashMap.newKeySet();\n    private volatile ApplicationRuntimeInformation\n        _defaultApplicationProperties;\n    private Set<CachingServiceReference<Application>> _dependentApplications =\n        ConcurrentHashMap.newKeySet();\n    private Set<CachingServiceReference<?>> _dependentExtensions =\n        ConcurrentHashMap.newKeySet();\n    private Set<CachingServiceReference<?>> _dependentServices =\n        ConcurrentHashMap.newKeySet();\n    private Collection<CachingServiceReference<Application>>\n        _erroredApplications = new CopyOnWriteArrayList<>();\n    private Collection<CachingServiceReference<?>> _erroredEndpoints =\n        new CopyOnWriteArrayList<>();\n    private Collection<CachingServiceReference<?>> _erroredExtensions =\n        new CopyOnWriteArrayList<>();\n    private Collection<CachingServiceReference<?>> _invalidApplications =\n        new CopyOnWriteArrayList<>();\n    private Collection<CachingServiceReference<?>> _invalidExtensions =\n        new CopyOnWriteArrayList<>();\n    private Collection<CachingServiceReference<?>> _invalidResources =\n        new CopyOnWriteArrayList<>();\n    private Collection<CachingServiceReference<Application>>\n        _shadowedApplications = new CopyOnWriteArrayList<>();\n    private Collection<CachingServiceReference<Application>>\n        _ungettableApplications = new CopyOnWriteArrayList<>();\n    private Collection<CachingServiceReference<?>> _ungettableEndpoints =\n        new CopyOnWriteArrayList<>();\n    private Collection<CachingServiceReference<?>> _ungettableExtensions =\n        new CopyOnWriteArrayList<>();\n    private static FailedApplicationDTO buildFailedApplicationDTO(\n        int reason, CachingServiceReference<?> serviceReference) {\n        FailedApplicationDTO failedApplicationDTO = new FailedApplicationDTO();\n        Object nameProperty = serviceReference.getProperty(\n            JaxrsWhiteboardConstants.JAX_RS_NAME);\n        failedApplicationDTO.name = nameProperty == null ?\n            generateApplicationName(serviceReference::getProperty) :\n            nameProperty.toString();\n        failedApplicationDTO.serviceId =\n            (long)serviceReference.getProperty(\"service.id\");\n        failedApplicationDTO.failureReason = reason;\n        return failedApplicationDTO;\n    }\n    private static <T> BiFunction<String, Collection<T>, Collection<T>> merger(\n        T t) {\n        return (__, collection) -> {\n            if (collection == null) {\n                collection = new HashSet<>();\n            }\n            collection.add(t);\n            return collection;\n        };\n    }\n    private static <T extends BaseDTO> T populateBaseDTO(\n            T baseDTO, CachingServiceReference<?> serviceReference) {\n        baseDTO.name = getServiceName(serviceReference::getProperty);\n        baseDTO.serviceId = (Long)serviceReference.getProperty(\n            \"service.id\");\n        return baseDTO;\n    }\n    private static void populateBaseExtensionDTO(\n        BaseExtensionDTO extensionDTO,\n        CachingServiceReference<?> serviceReference) {\n        populateBaseDTO(extensionDTO, serviceReference);\n        extensionDTO.extensionTypes =\n            Arrays.stream(\n                canonicalize(serviceReference.getProperty(\"objectClass\"))).\n            filter(\n                SUPPORTED_EXTENSION_INTERFACES::containsKey\n            ).\n            toArray(String[]::new);\n    }\n    private static ExtensionDTO populateExtensionDTO(\n        ExtensionDTO extensionDTO, ExtensionRuntimeInformation eri) {\n        populateBaseExtensionDTO(extensionDTO, eri._cachingServiceReference);\n        Consumes consumes = AnnotationUtils.getClassAnnotation(\n            eri._class, Consumes.class);\n        Produces produces = AnnotationUtils.getClassAnnotation(\n            eri._class, Produces.class);\n        Set<String> nameBindings = AnnotationUtils.getNameBindings(\n            eri._class.getAnnotations());\n        if (nameBindings.isEmpty()) {\n            nameBindings = null;\n        }\n        extensionDTO.consumes = consumes == null ? null :\n            JAXRSUtils.getConsumeTypes(consumes).stream().\n                map(\n                    MediaType::toString\n                ).toArray(\n                    String[]::new\n                );\n        extensionDTO.produces = produces == null ? null :\n            JAXRSUtils.getProduceTypes(produces).stream().\n                map(\n                    MediaType::toString\n                ).toArray(\n                    String[]::new\n                );\n        extensionDTO.nameBindings = nameBindings == null ? null :\n            nameBindings.toArray(new String[0]);\n        return extensionDTO;\n    }\n    private static ResourceDTO populateResourceDTO(\n        ResourceDTO resourceDTO,\n        EndpointRuntimeInformation endpointRuntimeInformation) {\n        populateBaseDTO(\n            resourceDTO, endpointRuntimeInformation._cachingServiceReference);\n        resourceDTO.resourceMethods = ClassIntrospector.getResourceMethodInfos(\n            endpointRuntimeInformation._class,\n            endpointRuntimeInformation._bus\n        ).toArray(\n            new ResourceMethodInfoDTO[0]\n        );\n        return resourceDTO;\n    }\n    private static <T> BiFunction<String, Collection<T>, Collection<T>> remover(\n        T t) {\n        return (__, collection) -> {\n            if (collection != null) {\n                collection.remove(t);\n                if (collection.isEmpty()) {\n                    return null;\n                }\n            }\n            return collection;\n        };\n    }\n    private Stream<ApplicationDTO> applicationDTOStream() {\n        return _applications.values().stream().\n            filter(p -> !(\".default\".equals(\n                p._cachingServiceReference.getProperty(JAX_RS_NAME)))).\n            map(\n                this::buildApplicationDTO\n            );\n    }\n    private Stream<FailedExtensionDTO>\n        applicationDependentExtensionsDTOStream() {\n        return _applicationDependentExtensions.stream().map(\n            sr -> buildFailedExtensionDTO(\n                DTOConstants.FAILURE_REASON_REQUIRED_APPLICATION_UNAVAILABLE,\n                sr)\n        );\n    }\n    private Stream<FailedResourceDTO> applicationDependentResourcesDTOStream() {\n        return _applicationDependentResources.stream().map(\n            sr -> buildFailedResourceDTO(\n                DTOConstants.FAILURE_REASON_REQUIRED_APPLICATION_UNAVAILABLE,\n                sr)\n        );\n    }\n<fim_suffix>    private ApplicationDTO buildApplicationDTO(\n        ApplicationRuntimeInformation ari) {\n        ApplicationDTO applicationDTO = new ApplicationDTO(){};\n        applicationDTO.name = getServiceName(\n            ari._cachingServiceReference::getProperty);\n        applicationDTO.base = _whiteboard.getApplicationBase(\n            ari._cachingServiceReference::getProperty);\n        applicationDTO.serviceId =\n            (Long)ari._cachingServiceReference.getProperty(\"service.id\");\n        applicationDTO.resourceDTOs = getApplicationEndpointsStream(\n            applicationDTO.name).toArray(\n                ResourceDTO[]::new\n            );\n        applicationDTO.extensionDTOs = getApplicationExtensionsStream(\n            applicationDTO.name).toArray(\n                ExtensionDTO[]::new\n            );\n        Map<String, Set<ExtensionDTO>> nameBoundExtensions =\n            new HashMap<>();\n        Map<ExtensionDTO, Set<ResourceDTO>> extensionResources =\n            new HashMap<>();\n        for (ExtensionDTO extensionDTO : applicationDTO.extensionDTOs) {\n            if (extensionDTO.nameBindings == null) {\n                continue;\n            }\n            for (String nameBinding : extensionDTO.nameBindings) {\n                Set<ExtensionDTO> extensionDTOS =\n                    nameBoundExtensions.computeIfAbsent(\n                        nameBinding,\n                        __ -> new HashSet<>()\n                );\n                extensionDTOS.add(extensionDTO);\n            }\n        }\n        for (ResourceDTO resourceDTO : applicationDTO.resourceDTOs) {\n            for (ResourceMethodInfoDTO resourceMethodInfo :\n                resourceDTO.resourceMethods) {\n                if (resourceMethodInfo.nameBindings == null) {\n                    continue;\n                }\n                for (String nameBinding : resourceMethodInfo.nameBindings) {\n                    Set<ExtensionDTO> extensionDTOS = nameBoundExtensions.get(\n                        nameBinding);\n                    if (extensionDTOS != null) {\n                        for (ExtensionDTO extensionDTO : extensionDTOS) {\n                            Set<ResourceDTO> resourceDTOS =\n                                extensionResources.computeIfAbsent(\n                                    extensionDTO, __ -> new HashSet<>());\n                            resourceDTOS.add(resourceDTO);\n                        }\n                    }\n                }\n            }\n        }\n        extensionResources.forEach(\n            (extensionDTO, resourceDTOS) ->\n                extensionDTO.filteredByName = resourceDTOS.toArray(\n                    new ResourceDTO[0])\n        );\n        CxfJaxrsServiceRegistrator cxfJaxRsServiceRegistrator =\n            ari._cxfJaxRsServiceRegistrator;\n        Bus bus = cxfJaxRsServiceRegistrator.getBus();\n        Iterable<Class<?>> resourceClasses =\n            cxfJaxRsServiceRegistrator.getStaticResourceClasses();\n        ArrayList<ResourceMethodInfoDTO> resourceMethodInfoDTOS =\n            new ArrayList<>();\n        for (Class<?> resourceClass : resourceClasses) {\n            resourceMethodInfoDTOS.addAll(\n                ClassIntrospector.getResourceMethodInfos(resourceClass, bus));\n        }\n        applicationDTO.resourceMethods = resourceMethodInfoDTOS.toArray(\n            new ResourceMethodInfoDTO[0]);\n        return applicationDTO;\n    }<fim_middle>// function below is long method\n"}