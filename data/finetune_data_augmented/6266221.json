{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2012, 2014 UT-Battelle, LLC.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   Initial API and implementation and/or initial documentation - Jay Jay Billings,\n *   Jordan H. Deyton, Dasha Gorin, Alexander J. McCaskey, Taylor Patterson,\n *   Claire Saunders, Matthew Wang, Anna Wojtowicz\n *******************************************************************************/\npackage org.eclipse.ice.tests.datastructures;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport javax.xml.bind.JAXBException;\nimport org.eclipse.ice.datastructures.ICEObject.ICEJAXBHandler;\nimport org.eclipse.ice.datastructures.entry.ContinuousEntry;\nimport org.eclipse.ice.datastructures.entry.DiscreteEntry;\nimport org.eclipse.ice.datastructures.entry.IEntry;\nimport org.eclipse.ice.datastructures.entry.StringEntry;\nimport org.eclipse.ice.datastructures.form.DataComponent;\nimport org.eclipse.ice.datastructures.form.MasterDetailsPair;\nimport org.eclipse.ice.datastructures.jaxbclassprovider.ICEJAXBClassProvider;\nimport org.junit.Test;\n/**\n * <p>\n * This class is responsible for testing the MasterDetailsPair class.\n * </p>\n * \n * @author Jay Jay Billings\n */\npublic class MasterDetailsPairTester {\n\t/**\n\t * <p>\n\t * This operation checks the MasterDetailsPair to insure that its equals()\n\t * and hashcode() operations work.\n\t * </p>\n\t * \n\t */\n\t@Test\n\tpublic void checkEquality() {\n\t\t// Local Declarations\n\t\tDataComponent dComponent = new DataComponent();\n\t\tDataComponent dComponent2 = new DataComponent();\n\t\tIEntry entry1 = new ContinuousEntry(\"0\", \"50\");\n\t\tIEntry entry2 = new DiscreteEntry(\"Apple\", \"Orange\");\n\t\tentry1.setDefaultValue(\"25\");\n\t\tentry2.setDefaultValue(\"Orange\");\n\t\tentry1.setValue(\"25\");\n\t\tentry2.setValue(\"Orange\");\n\t\t// Add the entries to seperate DataComponents\n\t\tdComponent.addEntry(entry1);\n\t\tdComponent2.addEntry(entry2);\n\t\t// Create MasterDetailsPair to test\n\t\tMasterDetailsPair component = new MasterDetailsPair(\"Type One\",\n\t\t\t\tdComponent);\n\t\tMasterDetailsPair equalComponent = new MasterDetailsPair(\"Type One\",\n\t\t\t\tdComponent);\n\t\tMasterDetailsPair unEqualComponent = new MasterDetailsPair(\"Type Two\",\n\t\t\t\tdComponent2);\n\t\tMasterDetailsPair transitiveComponent = new MasterDetailsPair(\n\t\t\t\t\"Type One\", dComponent);\n\t\tcomponent.setMasterDetailsPairId(1);\n\t\tequalComponent.setMasterDetailsPairId(1);\n\t\ttransitiveComponent.setMasterDetailsPairId(1);\n\t\t// Set ICEObject data\n\t\tcomponent.setId(1);\n\t\tequalComponent.setId(1);\n\t\ttransitiveComponent.setId(1);\n\t\tunEqualComponent.setId(2);\n\t\tcomponent.setName(\"DC Equal\");\n\t\tequalComponent.setName(\"DC Equal\");\n\t\ttransitiveComponent.setName(\"DC Equal\");\n\t\tunEqualComponent.setName(\"DC UnEqual\");\n\t\t// Assert two equal DataComponents return true\n\t\tassertTrue(component.equals(equalComponent));\n\t\t// Assert two unequal DataComponents return false\n\t\tassertFalse(component.equals(unEqualComponent));\n\t\t// Assert equals() is reflexive\n\t\tassertTrue(component.equals(component));\n\t\t// Assert the equals() is Symmetric\n\t\tassertTrue(component.equals(equalComponent)\n\t\t\t\t&& equalComponent.equals(component));\n\t\t// Assert equals() is transitive\n\t\tif (component.equals(equalComponent)\n\t\t\t\t&& equalComponent.equals(transitiveComponent)) {\n\t\t\tassertTrue(component.equals(transitiveComponent));\n\t\t} else {\n\t\t\tfail();\n\t\t}\n\t\t// Assert equals is consistent\n\t\tassertTrue(component.equals(equalComponent)\n\t\t\t\t&& component.equals(equalComponent)\n\t\t\t\t&& component.equals(equalComponent));\n\t\tassertTrue(!component.equals(unEqualComponent)\n\t\t\t\t&& !component.equals(unEqualComponent)\n\t\t\t\t&& !component.equals(unEqualComponent));\n\t\t// Assert checking equality with null is false\n\t\tassertFalse(component==null);\n\t\t// Assert that two equal objects return same hashcode\n\t\tassertTrue(component.equals(equalComponent)\n\t\t\t\t&& component.hashCode() == equalComponent.hashCode());\n\t\t// Assert that hashcode is consistent\n\t\tassertTrue(component.hashCode() == component.hashCode());\n\t\t// Assert that hashcodes from unequal objects are different\n\t\tassertTrue(component.hashCode() != unEqualComponent.hashCode());\n\t}\n\t/**\n\t * <p>\n\t * This operation checks the MasterDetailsPair to ensure that its copy() and\n\t * clone() operations work as specified.\n\t * </p>\n\t * \n\t */\n\t@Test\n\tpublic void checkCopying() {\n\t\t// Local Declarations\n\t\tMasterDetailsPair cloneMaster, copyMaster = null;\n\t\tDataComponent dComponent = new DataComponent();\n\t\tIEntry entry1 = new ContinuousEntry(\"0\", \"50\");\n\t\tIEntry entry2 = new DiscreteEntry(\"Apple\", \"Orange\");\n\t\tentry1.setDefaultValue(\"25\");\n\t\tentry2.setDefaultValue(\"Orange\");\n\t\tentry1.setValue(\"25\");\n\t\tentry2.setValue(\"Orange\");\n\t\t// Add entries to DataComponent (Details)\n\t\tdComponent.addEntry(entry1);\n\t\tdComponent.addEntry(entry2);\n\t\t// Create MasterDetailsPair to test\n\t\tMasterDetailsPair component = new MasterDetailsPair(\"Type One\",\n\t\t\t\tdComponent);\n\t\tcomponent.setMasterDetailsPairId(55);\n\t\t// Clone contents\n\t\tcloneMaster = (MasterDetailsPair) component.clone();\n\t\t// Make sure the clone is not null\n\t\tassertNotNull(cloneMaster);\n\t\t// Check equality of contents\n\t\tassertTrue(cloneMaster.equals(component));\n\t\t// Copy contents\n\t\tcopyMaster = new MasterDetailsPair(); // Create a new instance of\n\t\t\t\t\t\t\t\t\t\t\t\t// MasterDetailsPair\n\t\tcopyMaster.copy(component);\n\t\t// Check equality of contents\n\t\tassertTrue(copyMaster.equals(component));\n\t\t// Pass null into copy contents, show nothing has changed\n\t\tcopyMaster.copy(null);\n\t\t// Check equality of contents\n\t\tassertTrue(copyMaster.equals(component));\n\t}\n\t/**\n\t * <p>\n\t * This operation checks the alternative constructor of the\n\t * MasterDetailsPair class to make sure that the master and details can be\n\t * retrieved after calling it.\n\t * </p>\n\t * \n\t */\n<fim_suffix>\t@Test\n\tpublic void checkAlternativeConstructor() {\n\t\t// Local Declarations\n\t\tMasterDetailsPair mDetailsP;\n\t\tDataComponent dComponent;\n\t\tString MasterType1 = \"TypeOne!\";\n\t\t// Setup DataComponent\n\t\tdComponent = new DataComponent();\n\t\tdComponent.setName(MasterType1);\n\t\tIEntry entry = new StringEntry();\n\t\t// Add entry to dComponent\n\t\tdComponent.addEntry(entry);\n\t\t// Call Alternative Constructor\n\t\tmDetailsP = new MasterDetailsPair(MasterType1, dComponent);\n\t\t// Check values. Should be typeone and equal to the declared\n\t\t// dataComponent\n\t\tassertEquals(MasterType1, mDetailsP.getMaster());\n\t\tassertTrue(dComponent.equals(mDetailsP.getDetails()));\n\t\t// Try to pass null to the constructor - sets values appropriately\n\t\tmDetailsP = new MasterDetailsPair(null, dComponent); // null master\n\t\tassertNull(mDetailsP.getMaster());\n\t\tassertTrue(dComponent.equals(mDetailsP.getDetails()));\n\t\t// DataComponent null\n\t\tmDetailsP = new MasterDetailsPair(MasterType1, null);\n\t\tassertEquals(MasterType1, mDetailsP.getMaster());\n\t\tassertNull(mDetailsP.getDetails());\n\t\t// Both null\n\t\tmDetailsP = new MasterDetailsPair(null, null);\n\t\tassertNull(mDetailsP.getMaster());\n\t\tassertNull(mDetailsP.getDetails());\n\t}\n\t/**\n\t * <p>\n\t * This operation checks the MasterDetailsPair by making sure its getters\n\t * and setters work.\n\t * </p>\n\t * <fim_middle>// function below is long method\n"}