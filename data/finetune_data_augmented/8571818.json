{"text": "<fim_prefix>                       // with CLOSED, but for some operations such as merge/split, we can not\n                       // apply it to a region in this state, as it may lead to data loss as we\n                       // may have some data in recovered edits.\n    public boolean matches(State... expected) {\n      for (State state : expected) {\n        if (this == state) {\n          return true;\n        }\n      }\n      return false;\n    }\n    /**\n     * Convert to protobuf ClusterStatusProtos.RegionState.State\n     */\n    public ClusterStatusProtos.RegionState.State convert() {\n      ClusterStatusProtos.RegionState.State rs;\n      switch (this) {\n        case OFFLINE:\n          rs = ClusterStatusProtos.RegionState.State.OFFLINE;\n          break;\n        case OPENING:\n          rs = ClusterStatusProtos.RegionState.State.OPENING;\n          break;\n        case OPEN:\n          rs = ClusterStatusProtos.RegionState.State.OPEN;\n          break;\n        case CLOSING:\n          rs = ClusterStatusProtos.RegionState.State.CLOSING;\n          break;\n        case CLOSED:\n          rs = ClusterStatusProtos.RegionState.State.CLOSED;\n          break;\n        case SPLITTING:\n          rs = ClusterStatusProtos.RegionState.State.SPLITTING;\n          break;\n        case SPLIT:\n          rs = ClusterStatusProtos.RegionState.State.SPLIT;\n          break;\n        case FAILED_OPEN:\n          rs = ClusterStatusProtos.RegionState.State.FAILED_OPEN;\n          break;\n        case FAILED_CLOSE:\n          rs = ClusterStatusProtos.RegionState.State.FAILED_CLOSE;\n          break;\n        case MERGING:\n          rs = ClusterStatusProtos.RegionState.State.MERGING;\n          break;\n        case MERGED:\n          rs = ClusterStatusProtos.RegionState.State.MERGED;\n          break;\n        case SPLITTING_NEW:\n          rs = ClusterStatusProtos.RegionState.State.SPLITTING_NEW;\n          break;\n        case MERGING_NEW:\n          rs = ClusterStatusProtos.RegionState.State.MERGING_NEW;\n          break;\n        case ABNORMALLY_CLOSED:\n          rs = ClusterStatusProtos.RegionState.State.ABNORMALLY_CLOSED;\n          break;\n        default:\n          throw new IllegalStateException(\"\");\n      }\n      return rs;\n    }\n    /**\n     * Convert a protobuf HBaseProtos.RegionState.State to a RegionState.State\n     *\n     * @return the RegionState.State\n     */\n    public static State convert(ClusterStatusProtos.RegionState.State protoState) {\n      State state;\n      switch (protoState) {\n        case OFFLINE:\n          state = OFFLINE;\n          break;\n        case PENDING_OPEN:\n        case OPENING:\n          state = OPENING;\n          break;\n        case OPEN:\n          state = OPEN;\n          break;\n        case PENDING_CLOSE:\n        case CLOSING:\n          state = CLOSING;\n          break;\n        case CLOSED:\n          state = CLOSED;\n          break;\n        case SPLITTING:\n          state = SPLITTING;\n          break;\n        case SPLIT:\n          state = SPLIT;\n          break;\n        case FAILED_OPEN:\n          state = FAILED_OPEN;\n          break;\n        case FAILED_CLOSE:\n          state = FAILED_CLOSE;\n          break;\n        case MERGING:\n          state = MERGING;\n          break;\n        case MERGED:\n          state = MERGED;\n          break;\n        case SPLITTING_NEW:\n          state = SPLITTING_NEW;\n          break;\n        case MERGING_NEW:\n          state = MERGING_NEW;\n          break;\n        case ABNORMALLY_CLOSED:\n          state = ABNORMALLY_CLOSED;\n          break;\n        default:\n          throw new IllegalStateException(\"Unhandled state \" + protoState);\n      }\n      return state;\n    }\n  }\n  private final long stamp;\n  private final RegionInfo hri;\n  private final ServerName serverName;\n  private final State state;\n  // The duration of region in transition\n  private long ritDuration;\n  @VisibleForTesting\n  public static RegionState createForTesting(RegionInfo region, State state) {\n    return new RegionState(region, state, System.currentTimeMillis(), null);\n  }\n  public RegionState(RegionInfo region, State state, ServerName serverName) {\n    this(region, state, System.currentTimeMillis(), serverName);\n  }\n  public RegionState(RegionInfo region,\n      State state, long stamp, ServerName serverName) {\n    this(region, state, stamp, serverName, 0);\n  }\n  public RegionState(RegionInfo region, State state, long stamp, ServerName serverName,\n      long ritDuration) {\n    this.hri = region;\n    this.state = state;\n    this.stamp = stamp;\n    this.serverName = serverName;\n    this.ritDuration = ritDuration;\n  }\n  public State getState() {\n    return state;\n  }\n  public long getStamp() {\n    return stamp;\n  }\n  public RegionInfo getRegion() {\n    return hri;\n  }\n  public ServerName getServerName() {\n    return serverName;\n  }\n  public long getRitDuration() {\n    return ritDuration;\n  }\n  /**\n   * Update the duration of region in transition\n   * @param previousStamp previous RegionState's timestamp\n   */\n  @InterfaceAudience.Private\n  void updateRitDuration(long previousStamp) {\n    this.ritDuration += (this.stamp - previousStamp);\n  }\n  public boolean isClosing() {\n    return state == State.CLOSING;\n  }\n  public boolean isClosed() {\n    return state == State.CLOSED;\n  }\n  public boolean isOpening() {\n    return state == State.OPENING;\n  }\n  public boolean isOpened() {\n    return state == State.OPEN;\n  }\n  public boolean isOffline() {\n    return state == State.OFFLINE;\n  }\n  public boolean isSplitting() {\n    return state == State.SPLITTING;\n  }\n  public boolean isSplit() {\n    return state == State.SPLIT;\n  }\n  public boolean isSplittingNew() {\n    return state == State.SPLITTING_NEW;\n  }\n  public boolean isFailedOpen() {\n    return state == State.FAILED_OPEN;\n  }\n  public boolean isFailedClose() {\n    return state == State.FAILED_CLOSE;\n  }\n  public boolean isMerging() {\n    return state == State.MERGING;\n  }\n  public boolean isMerged() {\n    return state == State.MERGED;\n  }\n  public boolean isMergingNew() {\n    return state == State.MERGING_NEW;\n  }\n  public boolean isOnServer(final ServerName sn) {\n    return serverName != null && serverName.equals(sn);\n  }\n  public boolean isMergingOnServer(final ServerName sn) {\n    return isOnServer(sn) && isMerging();\n  }\n  public boolean isMergingNewOnServer(final ServerName sn) {\n    return isOnServer(sn) && isMergingNew();\n  }\n  public boolean isMergingNewOrOpenedOnServer(final ServerName sn) {\n    return isOnServer(sn) && (isMergingNew() || isOpened());\n  }\n  public boolean isMergingNewOrOfflineOnServer(final ServerName sn) {\n    return isOnServer(sn) && (isMergingNew() || isOffline());\n  }\n  public boolean isSplittingOnServer(final ServerName sn) {\n    return isOnServer(sn) && isSplitting();\n  }\n  public boolean isSplittingNewOnServer(final ServerName sn) {\n    return isOnServer(sn) && isSplittingNew();\n  }\n  public boolean isSplittingOrOpenedOnServer(final ServerName sn) {\n    return isOnServer(sn) && (isSplitting() || isOpened());\n  }\n  public boolean isSplittingOrSplitOnServer(final ServerName sn) {\n    return isOnServer(sn) && (isSplitting() || isSplit());\n  }\n  public boolean isClosingOrClosedOnServer(final ServerName sn) {\n    return isOnServer(sn) && (isClosing() || isClosed());\n  }\n  public boolean isOpeningOrFailedOpenOnServer(final ServerName sn) {\n    return isOnServer(sn) && (isOpening() || isFailedOpen());\n  }\n  public boolean isOpeningOrOpenedOnServer(final ServerName sn) {\n    return isOnServer(sn) && (isOpening() || isOpened());\n  }\n  public boolean isOpenedOnServer(final ServerName sn) {\n    return isOnServer(sn) && isOpened();\n  }\n  /**\n   * Check if a region state can transition to offline\n   */\n  public boolean isReadyToOffline() {\n    return isMerged() || isSplit() || isOffline()\n      || isSplittingNew() || isMergingNew();\n  }\n  /**\n   * Check if a region state can transition to online\n   */\n  public boolean isReadyToOnline() {\n    return isOpened() || isSplittingNew() || isMergingNew();\n  }\n  /**\n   * Check if a region state is one of offline states that\n   * can't transition to pending_close/closing (unassign/offline)\n   */\n<fim_suffix>  public boolean isUnassignable() {\n    return isUnassignable(state);\n  }<fim_middle>// function below has no smell\n"}