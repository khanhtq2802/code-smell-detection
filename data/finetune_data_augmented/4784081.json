{"text": "<fim_prefix>      public handle_hms_notification_argsTupleScheme getScheme() {\n        return new handle_hms_notification_argsTupleScheme();\n      }\n    }\n    private static class handle_hms_notification_argsTupleScheme extends TupleScheme<handle_hms_notification_args> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, handle_hms_notification_args struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetPathsUpdate()) {\n          optionals.set(0);\n        }\n        oprot.writeBitSet(optionals, 1);\n        if (struct.isSetPathsUpdate()) {\n          struct.pathsUpdate.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, handle_hms_notification_args struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        BitSet incoming = iprot.readBitSet(1);\n        if (incoming.get(0)) {\n          struct.pathsUpdate = new TPathsUpdate();\n          struct.pathsUpdate.read(iprot);\n          struct.setPathsUpdateIsSet(true);\n        }\n      }\n    }\n  }\n  public static class handle_hms_notification_result implements org.apache.thrift.TBase<handle_hms_notification_result, handle_hms_notification_result._Fields>, java.io.Serializable, Cloneable   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"handle_hms_notification_result\");\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new handle_hms_notification_resultStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new handle_hms_notification_resultTupleSchemeFactory());\n    }\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n;\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public String getFieldName() {\n        return _fieldName;\n      }\n    }\n    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handle_hms_notification_result.class, metaDataMap);\n    }\n    public handle_hms_notification_result() {\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public handle_hms_notification_result(handle_hms_notification_result other) {\n    }\n    public handle_hms_notification_result deepCopy() {\n      return new handle_hms_notification_result(this);\n    }\n    @Override\n    public void clear() {\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      }\n    }\n    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof handle_hms_notification_result)\n        return this.equals((handle_hms_notification_result)that);\n      return false;\n    }\n    public boolean equals(handle_hms_notification_result that) {\n      if (that == null)\n        return false;\n      return true;\n    }\n    @Override\n    public int hashCode() {\n      HashCodeBuilder builder = new HashCodeBuilder();\n      return builder.toHashCode();\n    }\n    public int compareTo(handle_hms_notification_result other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      handle_hms_notification_result typedOther = (handle_hms_notification_result)other;\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n      }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"handle_hms_notification_result(\");\n      boolean first = true;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class handle_hms_notification_resultStandardSchemeFactory implements SchemeFactory {\n      public handle_hms_notification_resultStandardScheme getScheme() {\n        return new handle_hms_notification_resultStandardScheme();\n      }\n    }\n    private static class handle_hms_notification_resultStandardScheme extends StandardScheme<handle_hms_notification_result> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, handle_hms_notification_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        struct.validate();\n      }\n<fim_suffix>      public void write(org.apache.thrift.protocol.TProtocol oprot, handle_hms_notification_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }<fim_middle>// function below is feature envy\n"}