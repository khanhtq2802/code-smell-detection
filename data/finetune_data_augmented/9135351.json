{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2004 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *  Actuate Corporation  - initial API and implementation\n *******************************************************************************/\n\npackage org.eclipse.birt.report.designer.internal.ui.views.outline;\n\nimport org.eclipse.birt.report.model.api.DataSetHandle;\nimport org.eclipse.birt.report.model.api.DataSourceHandle;\nimport org.eclipse.birt.report.model.api.olap.CubeHandle;\nimport org.eclipse.jface.viewers.Viewer;\nimport org.eclipse.jface.viewers.ViewerSorter;\n\n/**\n * Sorts outline tree's treeNode\n * \n *  \n */\n<fim_suffix>public class ItemSorter extends ViewerSorter\n{\n\n\t/**\n\t * Returns a negative, zero, or positive number depending on whether the\n\t * first element is less than, equal to, or greater than the second element.\n\t * <p>\n\t * The default implementation of this method is based on comparing the\n\t * elements' categories as computed by the <code>category</code> framework\n\t * method. Elements within the same category are further subjected to a case\n\t * insensitive compare of their label strings, either as computed by the\n\t * content viewer's label provider, or their <code>toString</code> values\n\t * in other cases. Subclasses may override.\n\t * </p>\n\t * \n\t * @param viewer\n\t *            the viewer\n\t * @param e1\n\t *            the first element\n\t * @param e2\n\t *            the second element\n\t * @return a negative number if the first element is less than the second\n\t *         element; the value <code>0</code> if the first element is equal\n\t *         to the second element; and a positive number if the first element\n\t *         is greater than the second element\n\t */\n\n\tpublic int compare( Viewer viewer, Object e1, Object e2 )\n\t{\n\t\t/*\n\t\t * if ( e1 instanceof ITreeItemNode && e2 instanceof ITreeItemNode ) {\n\t\t * int type1 = ( (ITreeItemNode) e1 ).getType(); int type2 = (\n\t\t * (ITreeItemNode) e2 ).getType(); if ( type1 == type2 && type1 ==\n\t\t * ITreeItemNode.ITEM ) { return super.compare( viewer, e1, e2 ); } }\n\t\t */\n\t\tif ( e1 instanceof DataSourceHandle && e2 instanceof DataSourceHandle )\n\t\t{\n\t\t\treturn super.compare( viewer, e1, e2 );\n\t\t}\n\t\tif ( e1 instanceof DataSetHandle && e2 instanceof DataSetHandle )\n\t\t{\n\t\t\treturn super.compare( viewer, e1, e2 );\n\t\t}\n\t\tif ( e1 instanceof CubeHandle && e2 instanceof CubeHandle )\n\t\t{\n\t\t\treturn super.compare( viewer, e1, e2 );\n\t\t}\n\t\treturn 0;\n\t}\n\n}<fim_middle>// class below has no smell\n"}