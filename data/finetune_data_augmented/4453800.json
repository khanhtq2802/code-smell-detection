{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.drill.exec.planner.common;\n\nimport java.io.IOException;\nimport java.util.List;\nimport org.apache.drill.common.expression.SchemaPath;\nimport org.apache.drill.exec.physical.base.GroupScan;\nimport org.apache.drill.exec.planner.logical.DrillTable;\nimport org.apache.drill.exec.planner.logical.DrillTranslatableTable;\nimport org.apache.drill.common.exceptions.DrillRuntimeException;\nimport org.apache.calcite.rel.core.TableScan;\nimport org.apache.calcite.plan.RelOptCluster;\nimport org.apache.calcite.plan.RelOptCost;\nimport org.apache.calcite.plan.RelOptPlanner;\nimport org.apache.calcite.plan.RelOptTable;\nimport org.apache.calcite.plan.RelTraitSet;\nimport org.apache.drill.exec.util.Utilities;\nimport org.apache.calcite.rel.metadata.RelMetadataQuery;\n\n/**\n * Base class for logical/physical scan rel implemented in Drill.\n */\n<fim_suffix>public abstract class DrillScanRelBase extends TableScan implements DrillRelNode {\n  protected GroupScan groupScan;\n  protected final DrillTable drillTable;\n\n  public DrillScanRelBase(RelOptCluster cluster,\n                          RelTraitSet traits,\n                          RelOptTable table,\n                          final List<SchemaPath> columns) {\n    super(cluster, traits, table);\n    this.drillTable = Utilities.getDrillTable(table);\n    assert drillTable != null;\n    try {\n      this.groupScan = drillTable.getGroupScan().clone(columns);\n    } catch (final IOException e) {\n      throw new DrillRuntimeException(\"Failure creating scan.\", e);\n    }\n  }\n\n  public DrillScanRelBase(RelOptCluster cluster,\n                          RelTraitSet traits,\n                          GroupScan grpScan,\n                          RelOptTable table) {\n    super(cluster, traits, table);\n    DrillTable unwrap = table.unwrap(DrillTable.class);\n    if (unwrap == null) {\n      unwrap = table.unwrap(DrillTranslatableTable.class).getDrillTable();\n    }\n    this.drillTable = unwrap;\n    assert drillTable != null;\n    this.groupScan = grpScan;\n  }\n\n  public DrillTable getDrillTable() {\n    return drillTable;\n  }\n\n  public GroupScan getGroupScan() {\n    return groupScan;\n  }\n\n  @Override public double estimateRowCount(RelMetadataQuery mq) {\n    return mq.getRowCount(this);\n  }\n\n  @Override public RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {\n    double dRows = estimateRowCount(mq);\n    double dCpu = dRows + 1; // ensure non-zero cost\n    double dIo = 0;\n    return planner.getCostFactory().makeCost(dRows, dCpu, dIo);\n  }\n}<fim_middle>// class below is data class\n"}