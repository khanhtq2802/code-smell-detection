{"text": "<fim_prefix>/**\n * Copyright (c) 2018 Bosch Software Innovations GmbH and others.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n */\npackage org.eclipse.hawkbit.repository.jpa.utils;\n\nimport java.util.function.Function;\n\nimport javax.validation.constraints.NotNull;\n\nimport org.eclipse.hawkbit.repository.exception.QuotaExceededException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Helper class to check assignment quotas.\n */\npublic final class QuotaHelper {\n\n    /**\n     * Class logger\n     */\n    private static final Logger LOG = LoggerFactory.getLogger(QuotaHelper.class);\n\n    private QuotaHelper() {\n        // no need to instantiate this class\n    }\n\n    /**\n     * Asserts the specified assignment quota.\n     * \n     * @param requested\n     *            The number of entities that shall be assigned to the parent\n     *            entity.\n     * @param limit\n     *            The maximum number of entities that may be assigned to the\n     *            parent entity.\n     * @param type\n     *            The type of the entities that shall be assigned.\n     * @param parentType\n     *            The type of the parent entity.\n     * \n     * @throws QuotaExceededException\n     *             if the assignment operation would cause the quota to be\n     *             exceeded\n     */\n    public static void assertAssignmentQuota(final long requested, final long limit, @NotNull final Class<?> type,\n            @NotNull final Class<?> parentType) {\n        assertAssignmentQuota(null, requested, limit, type.getSimpleName(), parentType.getSimpleName(), null);\n    }\n\n    /**\n     * Asserts the specified assignment quota.\n     * \n     * @param parentId\n     *            The ID of the parent entity.\n     * @param requested\n     *            The number of entities that shall be assigned to the parent\n     *            entity.\n     * @param limit\n     *            The maximum number of entities that may be assigned to the\n     *            parent entity.\n     * @param type\n     *            The type of the entities that shall be assigned.\n     * @param parentType\n     *            The type of the parent entity.\n     * @param countFct\n     *            Function to count the entities that are currently assigned to\n     *            the parent entity.\n     * \n     * @throws QuotaExceededException\n     *             if the assignment operation would cause the quota to be\n     *             exceeded\n     */\n<fim_suffix>    public static void assertAssignmentQuota(final Long parentId, final long requested, final long limit,\n            @NotNull final Class<?> type, @NotNull final Class<?> parentType, final Function<Long, Long> countFct) {\n        assertAssignmentQuota(parentId, requested, limit, type.getSimpleName(), parentType.getSimpleName(), countFct);\n    }\n\n    /**\n     * Asserts the specified assignment quota.\n     * \n     * @param parentId\n     *            The ID of the parent entity.\n     * @param requested\n     *            The number of entities that shall be assigned to the parent\n     *            entity.\n     * @param limit\n     *            The maximum number of entities that may be assigned to the\n     *            parent entity.\n     * @param type\n     *            The type of the entities that shall be assigned.\n     * @param parentType\n     *            The type of the parent entity.\n     * @param countFct\n     *            Function to count the entities that are currently assigned to\n     *            the parent entity.\n     * \n     * @throws QuotaExceededException\n     *             if the assignment operation would cause the quota to be\n     *             exceeded\n     */\n    public static void assertAssignmentQuota(final Long parentId, final long requested, final long limit,\n            @NotNull final String type, @NotNull final String parentType, final Function<Long, Long> countFct) {\n\n        // check if the quota is unlimited\n        if (limit <= 0) {\n            LOG.debug(\"Quota 'Max {} entities per {}' is unlimited.\", type, parentType);\n            return;\n        }\n\n        if (requested > limit) {\n            final String parentIdStr = parentId != null ? String.valueOf(parentId) : \"<new>\";\n            LOG.warn(\"Cannot assign {} {} entities to {} '{}' because of the configured quota limit {}.\", requested,\n                    type, parentType, parentIdStr, limit);\n            throw new QuotaExceededException(type, parentType, parentId, requested, limit);\n        }\n\n        if (parentId != null && countFct != null) {\n            final long currentCount = countFct.apply(parentId);\n            if (currentCount + requested > limit) {\n                LOG.warn(\n                        \"Cannot assign {} {} entities to {} '{}' because of the configured quota limit {}. Currently, there are {} {} entities assigned.\",\n                        requested, type, parentType, parentId, limit, currentCount, type);\n                throw new QuotaExceededException(type, parentType, parentId, requested, limit);\n            }\n        }\n    }\n}<fim_middle>// function below has no smell\n"}