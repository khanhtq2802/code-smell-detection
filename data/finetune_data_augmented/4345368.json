{"text": "<fim_prefix>/*\n\n   Derby - Class org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyBlob\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to you under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\npackage org.apache.derbyTesting.functionTests.tests.compatibility.helpers;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.sql.Blob;\nimport java.sql.SQLException;\n\n/**\n * A crude Blob implementation for datatype testing.\n */\npublic class DummyBlob\n        implements Blob {\n    private\tbyte[]\t_bytes;\n\n    public\tDummyBlob( byte[] bytes )\n    {\n        _bytes = bytes;\n    }\n\n    public\tInputStream\tgetBinaryStream()\n    {\n        return new ByteArrayInputStream( _bytes );\n    }\n\n    public\tbyte[]\tgetBytes( long position, int length ) { return _bytes; }\n\n    public\tlong\tlength() { return (long) _bytes.length; }\n\n    public\tlong\tposition( Blob pattern, long start ) { return 0L; }\n    public\tlong\tposition( byte[] pattern, long start ) { return 0L; }\n\n    public\tboolean\tequals( Object other )\n    {\n        if ( other == null ) { return false; }\n        if ( !( other instanceof Blob ) ) { return false; }\n\n        Blob\tthat = (Blob) other;\n\n        try {\n            if ( this.length() != that.length() ) { return false; }\n\n            InputStream\tthisStream = this.getBinaryStream();\n            InputStream\tthatStream = that.getBinaryStream();\n\n            while( true )\n            {\n                int\t\tnextByte = thisStream.read();\n\n                if ( nextByte < 0 ) { break; }\n                if ( nextByte != thatStream.read() ) { return false; }\n            }\n        }\n        catch (Exception e)\n        {\n            System.err.println( e.getMessage() );\n            e.printStackTrace(System.err);\n            return false;\n        }\n\n        return true;\n    }\n\n    public int setBytes(long arg0, byte[] arg1) throws SQLException {\n        throw new SQLException(\"not implemented for this test\");\n    }\n\n    public int setBytes(long arg0, byte[] arg1, int arg2, int arg3)\n            throws SQLException {\n        throw new SQLException(\"not implemented for this test\");\n    }\n\n<fim_suffix>    public OutputStream setBinaryStream(long arg0) throws SQLException {\n        throw new SQLException(\"not implemented for this test\");\n    }\n\n    public void truncate(long arg0) throws SQLException {\n        throw new SQLException(\"not implemented for this test\");\n    }\n\n    public void free() throws SQLException {\n        _bytes = null;\n    }\n\n    public InputStream getBinaryStream(long pos, long length)\n            throws SQLException {\n        return new ByteArrayInputStream(_bytes, (int)pos -1, (int)length);\n    }\n}<fim_middle>// function below has no smell\n"}