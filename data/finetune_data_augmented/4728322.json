{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.storm.metric.api;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n<fim_suffix>@SuppressWarnings(\"rawtypes\")\npublic class MultiReducedMetric implements IMetric {\n  private Map<String, ReducedMetric> value = new HashMap<>();\n  private IReducer reducer;\n\n  public MultiReducedMetric(IReducer reducer) {\n    this.reducer = reducer;\n  }\n\n  public ReducedMetric scope(String key) {\n    ReducedMetric val = value.get(key);\n    if (val == null) {\n      value.put(key, val = new ReducedMetric(reducer));\n    }\n    return val;\n  }\n\n  public Object getValueAndReset() {\n    Map<String, Object> ret = new HashMap<>();\n    for (Map.Entry<String, ReducedMetric> e : value.entrySet()) {\n      Object val = e.getValue().getValueAndReset();\n      if (val != null) {\n        ret.put(e.getKey(), val);\n      }\n    }\n    return ret;\n  }\n}<fim_middle>// class below has no smell\n"}