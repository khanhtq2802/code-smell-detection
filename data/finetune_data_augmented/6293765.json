{"text": "<fim_prefix>/**        \n * The HTTP Upgrade to WebSocket Request\n */\n<fim_suffix>public interface UpgradeRequest\n{\n    /**\n     * Add WebSocket Extension Configuration(s) to Upgrade Request.\n     * <p>\n     * This is merely the list of requested Extensions to use, see {@link UpgradeResponse#getExtensions()} for what was\n     * negotiated\n     *\n     * @param configs the configuration(s) to add\n     */\n    void addExtensions(ExtensionConfig... configs);\n    /**\n     * Add WebSocket Extension Configuration(s) to request\n     * <p>\n     * This is merely the list of requested Extensions to use, see {@link UpgradeResponse#getExtensions()} for what was\n     * negotiated\n     *\n     * @param configs the configuration(s) to add\n     */\n    void addExtensions(String... configs);\n    /**\n     * Remove all headers from request.\n     * @deprecated (no longer supported, as this can undo the required upgrade request headers)\n     */\n    @Deprecated\n    void clearHeaders();\n    /**\n     * Get the list of Cookies on the Upgrade request\n     *\n     * @return the list of Cookies\n     */\n    List<HttpCookie> getCookies();\n    /**\n     * Get the list of WebSocket Extension Configurations for this Upgrade Request.\n     * <p>\n     * This is merely the list of requested Extensions to use, see {@link UpgradeResponse#getExtensions()} for what was\n     * negotiated\n     *\n     * @return the list of Extension configurations (in the order they were specified)\n     */\n    List<ExtensionConfig> getExtensions();\n    /**\n     * Get a specific Header value from Upgrade Request\n     *\n     * @param name the name of the header\n     * @return the value of the header (null if header does not exist)\n     */\n    String getHeader(String name);\n    /**\n     * Get the specific Header value, as an <code>int</code>, from the Upgrade Request.\n     *\n     * @param name the name of the header\n     * @return the value of the header as an <code>int</code> (-1 if header does not exist)\n     * @throws NumberFormatException if unable to parse value as an int.\n     */\n    int getHeaderInt(String name);\n    /**\n     * Get the headers as a Map of keys to value lists.\n     *\n     * @return the headers\n     */\n    Map<String, List<String>> getHeaders();\n    /**\n     * Get the specific header values (for multi-value headers)\n     *\n     * @param name the header name\n     * @return the value list (null if no header exists)\n     */\n    List<String> getHeaders(String name);\n    /**\n     * The host of the Upgrade Request URI\n     *\n     * @return host of the request URI\n     */\n    String getHost();\n    /**\n     * The HTTP version used for this Upgrade Request\n     * <p>\n     * As of <a href=\"http://tools.ietf.org/html/rfc6455\">RFC6455 (December 2011)</a> this is always\n     * <code>HTTP/1.1</code>\n     *\n     * @return the HTTP Version used\n     */\n    String getHttpVersion();\n    /**\n     * The HTTP method for this Upgrade Request.\n     * <p>\n     * As of <a href=\"http://tools.ietf.org/html/rfc6455\">RFC6455 (December 2011)</a> this is always <code>GET</code>\n     *\n     * @return the HTTP method used\n     */\n    String getMethod();\n    /**\n     * The WebSocket Origin of this Upgrade Request\n     * <p>\n     * See <a href=\"http://tools.ietf.org/html/rfc6455#section-10.2\">RFC6455: Section 10.2</a> for details.\n     * <p>\n     * Equivalent to {@link #getHeader(String)} passed the \"Origin\" header.\n     *\n     * @return the Origin header\n     */\n    String getOrigin();\n    /**\n     * Returns a map of the query parameters of the request.\n     *\n     * @return a unmodifiable map of query parameters of the request.\n     */\n    Map<String, List<String>> getParameterMap();\n    /**\n     * Get the WebSocket Protocol Version\n     * <p>\n     * As of <a href=\"http://tools.ietf.org/html/rfc6455#section-11.6\">RFC6455</a>, Jetty only supports version\n     * <code>13</code>\n     *\n     * @return the WebSocket protocol version\n     */\n    String getProtocolVersion();\n    /**\n     * Get the Query String of the request URI.\n     *\n     * @return the request uri query string\n     */\n    String getQueryString();\n    /**\n     * Get the Request URI\n     *\n     * @return the request URI\n     */\n    URI getRequestURI();\n    /**\n     * Access the Servlet HTTP Session (if present)\n     * <p>\n     * Note: Never present on a Client UpgradeRequest.\n     *\n     * @return the Servlet HTTPSession on server side UpgradeRequests\n     */\n    Object getSession();\n    /**\n     * Get the list of offered WebSocket sub-protocols.\n     *\n     * @return the list of offered sub-protocols\n     */\n    List<String> getSubProtocols();\n    /**\n     * Get the User Principal for this request.\n     * <p>\n     * Only applicable when using UpgradeRequest from server side.\n     *\n     * @return the user principal\n     */\n    Principal getUserPrincipal();\n    /**\n     * Test if a specific sub-protocol is offered\n     *\n     * @param test the sub-protocol to test for\n     * @return true if sub-protocol exists on request\n     */\n    boolean hasSubProtocol(String test);\n    /**\n     * Test if supplied Origin is the same as the Request\n     *\n     * @param test the supplied origin\n     * @return true if the supplied origin matches the request origin\n     */\n    boolean isOrigin(String test);\n    /**\n     * Test if connection is secure.\n     *\n     * @return true if connection is secure.\n     */\n    boolean isSecure();\n    /**\n     * Set the list of Cookies on the request\n     *\n     * @param cookies the cookies to use\n     */\n    void setCookies(List<HttpCookie> cookies);\n    /**\n     * Set the list of WebSocket Extension configurations on the request.\n     * @param configs the list of extension configurations\n     */\n    void setExtensions(List<ExtensionConfig> configs);\n    /**\n     * Set a specific header with multi-value field\n     * <p>\n     * Overrides any previous value for this named header\n     *\n     * @param name the name of the header\n     * @param values the multi-value field\n     */\n    void setHeader(String name, List<String> values);\n    /**\n     * Set a specific header value\n     * <p>\n     * Overrides any previous value for this named header\n     *\n     * @param name the header to set\n     * @param value the value to set it to\n     */\n    void setHeader(String name, String value);\n    /**\n     * Sets multiple headers on the request.\n     * <p>\n     * Only sets those headers provided, does not remove\n     * headers that exist on request and are not provided in the\n     * parameter for this method.\n     * <p>\n     * Convenience method vs calling {@link #setHeader(String, List)} multiple times.\n     *\n     * @param headers the headers to set\n     */\n    void setHeaders(Map<String, List<String>> headers);\n    /**\n     * Set the HTTP Version to use.\n     * <p>\n     * As of <a href=\"http://tools.ietf.org/html/rfc6455\">RFC6455 (December 2011)</a> this should always be\n     * <code>HTTP/1.1</code>\n     *\n     * @param httpVersion the HTTP version to use.\n     */\n    void setHttpVersion(String httpVersion);\n    /**\n     * Set the HTTP method to use.\n     * <p>\n     * As of <a href=\"http://tools.ietf.org/html/rfc6455\">RFC6455 (December 2011)</a> this is always <code>GET</code>\n     *\n     * @param method the HTTP method to use.\n     */\n    void setMethod(String method);\n    /**\n     * Set the Request URI to use for this request.\n     * <p>\n     * Must be an absolute URI with scheme <code>'ws'</code> or <code>'wss'</code>\n     *\n     * @param uri the Request URI\n     */\n    void setRequestURI(URI uri);\n    /**\n     * Set the Session associated with this request.\n     * <p>\n     * Typically used to associate the Servlet HttpSession object.\n     *\n     * @param session the session object to associate with this request\n     */\n    void setSession(Object session);\n    /**\n     * Set the offered WebSocket Sub-Protocol list.\n     *\n     * @param protocols the offered sub-protocol list\n     */\n    void setSubProtocols(List<String> protocols);\n    /**\n     * Set the offered WebSocket Sub-Protocol list.\n     *\n     * @param protocols the offered sub-protocol list\n     */\n    void setSubProtocols(String... protocols);\n}<fim_middle>// class below is data class\n"}