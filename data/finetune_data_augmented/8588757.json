{"text": "<fim_prefix>      public get() {\n        super(\"get\");\n      }\n      public get_args getEmptyArgsInstance() {\n        return new get_args();\n      }\n      public org.apache.thrift.async.AsyncMethodCallback<TResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.thrift.AsyncProcessFunction fcall = this;\n        return new org.apache.thrift.async.AsyncMethodCallback<TResult>() {\n          public void onComplete(TResult o) {\n            get_result result = new get_result();\n            result.success = o;\n            try {\n              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);\n            } catch (org.apache.thrift.transport.TTransportException e) {\n              _LOGGER.error(\"TTransportException writing to internal frame buffer\", e);\n              fb.close();\n            } catch (java.lang.Exception e) {\n              _LOGGER.error(\"Exception writing to internal frame buffer\", e);\n              onError(e);\n            }\n          }\n          public void onError(java.lang.Exception e) {\n            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;\n            org.apache.thrift.TSerializable msg;\n            get_result result = new get_result();\n            if (e instanceof TIOError) {\n              result.io = (TIOError) e;\n              result.setIoIsSet(true);\n              msg = result;\n            } else if (e instanceof org.apache.thrift.transport.TTransportException) {\n              _LOGGER.error(\"TTransportException inside handler\", e);\n              fb.close();\n              return;\n            } else if (e instanceof org.apache.thrift.TApplicationException) {\n              _LOGGER.error(\"TApplicationException inside handler\", e);\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TApplicationException)e;\n            } else {\n              _LOGGER.error(\"Exception inside handler\", e);\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n            } catch (java.lang.Exception ex) {\n              _LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n              fb.close();\n            }\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, get_args args, org.apache.thrift.async.AsyncMethodCallback<TResult> resultHandler) throws org.apache.thrift.TException {\n        iface.get(args.table, args.tget,resultHandler);\n      }\n    }\n    public static class getMultiple<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMultiple_args, java.util.List<TResult>> {\n      public getMultiple() {\n        super(\"getMultiple\");\n      }\n      public getMultiple_args getEmptyArgsInstance() {\n        return new getMultiple_args();\n      }\n      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.thrift.AsyncProcessFunction fcall = this;\n        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>>() {\n          public void onComplete(java.util.List<TResult> o) {\n            getMultiple_result result = new getMultiple_result();\n            result.success = o;\n            try {\n              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);\n            } catch (org.apache.thrift.transport.TTransportException e) {\n              _LOGGER.error(\"TTransportException writing to internal frame buffer\", e);\n              fb.close();\n            } catch (java.lang.Exception e) {\n              _LOGGER.error(\"Exception writing to internal frame buffer\", e);\n              onError(e);\n            }\n          }\n          public void onError(java.lang.Exception e) {\n            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;\n            org.apache.thrift.TSerializable msg;\n            getMultiple_result result = new getMultiple_result();\n            if (e instanceof TIOError) {\n              result.io = (TIOError) e;\n              result.setIoIsSet(true);\n              msg = result;\n            } else if (e instanceof org.apache.thrift.transport.TTransportException) {\n              _LOGGER.error(\"TTransportException inside handler\", e);\n              fb.close();\n              return;\n            } else if (e instanceof org.apache.thrift.TApplicationException) {\n              _LOGGER.error(\"TApplicationException inside handler\", e);\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TApplicationException)e;\n            } else {\n              _LOGGER.error(\"Exception inside handler\", e);\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n            } catch (java.lang.Exception ex) {\n              _LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n              fb.close();\n            }\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, getMultiple_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TResult>> resultHandler) throws org.apache.thrift.TException {\n        iface.getMultiple(args.table, args.tgets,resultHandler);\n      }\n    }\n<fim_suffix>    public static class put<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, put_args, Void> {\n      public put() {\n        super(\"put\");\n      }\n      public put_args getEmptyArgsInstance() {\n        return new put_args();\n      }\n      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.thrift.AsyncProcessFunction fcall = this;\n        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {\n          public void onComplete(Void o) {\n            put_result result = new put_result();\n            try {\n              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);\n            } catch (org.apache.thrift.transport.TTransportException e) {\n              _LOGGER.error(\"TTransportException writing to internal frame buffer\", e);\n              fb.close();\n            } catch (java.lang.Exception e) {\n              _LOGGER.error(\"Exception writing to internal frame buffer\", e);\n              onError(e);\n            }\n          }\n          public void onError(java.lang.Exception e) {\n            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;\n            org.apache.thrift.TSerializable msg;\n            put_result result = new put_result();\n            if (e instanceof TIOError) {\n              result.io = (TIOError) e;\n              result.setIoIsSet(true);\n              msg = result;\n            } else if (e instanceof org.apache.thrift.transport.TTransportException) {\n              _LOGGER.error(\"TTransportException inside handler\", e);\n              fb.close();\n              return;\n            } else if (e instanceof org.apache.thrift.TApplicationException) {\n              _LOGGER.error(\"TApplicationException inside handler\", e);\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TApplicationException)e;\n            } else {\n              _LOGGER.error(\"Exception inside handler\", e);\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n            } catch (java.lang.Exception ex) {\n              _LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n              fb.close();\n            }\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, put_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {\n        iface.put(args.table, args.tput,resultHandler);\n      }\n    }<fim_middle>// class below has no smell\n"}