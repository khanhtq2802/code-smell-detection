{"text": "<fim_prefix>                        sibling.getLocalName().equals(localpart)) {\n                    return (Element)sibling;\n                }\n            }\n            sibling = sibling.getNextSibling();\n        }\n        // not found\n        return null;\n    } // getNextSiblingdElementNS(Node,String,String):Element\n    /** Finds and returns the first child node with the given name. */\n    public static Element getFirstChildElement(Node parent, String elemNames[]) {\n        // search for node\n        Node child = parent.getFirstChild();\n        while (child != null) {\n            if (child.getNodeType() == Node.ELEMENT_NODE) {\n                for (int i = 0; i < elemNames.length; i++) {\n                    if (child.getNodeName().equals(elemNames[i])) {\n                        return (Element)child;\n                    }\n                }\n            }\n            child = child.getNextSibling();\n        }\n        // not found\n        return null;\n    } // getFirstChildElement(Node,String[]):Element\n    /** Finds and returns the last child node with the given name. */\n    public static Element getLastChildElement(Node parent, String elemNames[]) {\n        // search for node\n        Node child = parent.getLastChild();\n        while (child != null) {\n            if (child.getNodeType() == Node.ELEMENT_NODE) {\n                for (int i = 0; i < elemNames.length; i++) {\n                    if (child.getNodeName().equals(elemNames[i])) {\n                        return (Element)child;\n                    }\n                }\n            }\n            child = child.getPreviousSibling();\n        }\n        // not found\n        return null;\n    } // getLastChildElement(Node,String[]):Element\n    /** Finds and returns the next sibling node with the given name. */\n    public static Element getNextSiblingElement(Node node, String elemNames[]) {\n        // search for node\n        Node sibling = node.getNextSibling();\n        while (sibling != null) {\n            if (sibling.getNodeType() == Node.ELEMENT_NODE) {\n                for (int i = 0; i < elemNames.length; i++) {\n                    if (sibling.getNodeName().equals(elemNames[i])) {\n                        return (Element)sibling;\n                    }\n                }\n            }\n            sibling = sibling.getNextSibling();\n        }\n        // not found\n        return null;\n    } // getNextSiblingdElement(Node,String[]):Element\n    /** Finds and returns the first child node with the given qualified name. */\n    public static Element getFirstChildElementNS(Node parent,\n            String[][] elemNames) {\n        // search for node\n        Node child = parent.getFirstChild();\n        while (child != null) {\n            if (child.getNodeType() == Node.ELEMENT_NODE) {\n                for (int i = 0; i < elemNames.length; i++) {\n                    String uri = child.getNamespaceURI();\n                    if (uri != null && uri.equals(elemNames[i][0]) &&\n                            child.getLocalName().equals(elemNames[i][1])) {\n                        return (Element)child;\n                    }\n                }\n            }\n            child = child.getNextSibling();\n        }\n        // not found\n        return null;\n    } // getFirstChildElementNS(Node,String[][]):Element\n    /** Finds and returns the last child node with the given qualified name. */\n    public static Element getLastChildElementNS(Node parent,\n            String[][] elemNames) {\n        // search for node\n        Node child = parent.getLastChild();\n        while (child != null) {\n            if (child.getNodeType() == Node.ELEMENT_NODE) {\n                for (int i = 0; i < elemNames.length; i++) {\n                    String uri = child.getNamespaceURI();\n                    if (uri != null && uri.equals(elemNames[i][0]) &&\n                            child.getLocalName().equals(elemNames[i][1])) {\n                        return (Element)child;\n                    }\n                }\n            }\n            child = child.getPreviousSibling();\n        }\n        // not found\n        return null;\n    } // getLastChildElementNS(Node,String[][]):Element\n    /** Finds and returns the next sibling node with the given qualified name. */\n    public static Element getNextSiblingElementNS(Node node,\n            String[][] elemNames) {\n        // search for node\n        Node sibling = node.getNextSibling();\n        while (sibling != null) {\n            if (sibling.getNodeType() == Node.ELEMENT_NODE) {\n                for (int i = 0; i < elemNames.length; i++) {\n                    String uri = sibling.getNamespaceURI();\n                    if (uri != null && uri.equals(elemNames[i][0]) &&\n                            sibling.getLocalName().equals(elemNames[i][1])) {\n                        return (Element)sibling;\n                    }\n                }\n            }\n            sibling = sibling.getNextSibling();\n        }\n        // not found\n        return null;\n    } // getNextSiblingdElementNS(Node,String[][]):Element\n    /**\n     * Finds and returns the first child node with the given name and\n     * attribute name, value pair.\n     */\n    public static Element getFirstChildElement(Node   parent,\n            String elemName,\n            String attrName,\n            String attrValue) {\n        // search for node\n        Node child = parent.getFirstChild();\n        while (child != null) {\n            if (child.getNodeType() == Node.ELEMENT_NODE) {\n                Element element = (Element)child;\n                if (element.getNodeName().equals(elemName) &&\n                        element.getAttribute(attrName).equals(attrValue)) {\n                    return element;\n                }\n            }\n            child = child.getNextSibling();\n        }\n        // not found\n        return null;\n    } // getFirstChildElement(Node,String,String,String):Element\n    /**\n     * Finds and returns the last child node with the given name and\n     * attribute name, value pair.\n     */\n    public static Element getLastChildElement(Node   parent,\n            String elemName,\n            String attrName,\n            String attrValue) {\n        // search for node\n        Node child = parent.getLastChild();\n        while (child != null) {\n            if (child.getNodeType() == Node.ELEMENT_NODE) {\n                Element element = (Element)child;\n                if (element.getNodeName().equals(elemName) &&\n                        element.getAttribute(attrName).equals(attrValue)) {\n                    return element;\n                }\n            }\n            child = child.getPreviousSibling();\n        }\n        // not found\n        return null;\n    } // getLastChildElement(Node,String,String,String):Element\n    /**\n     * Finds and returns the next sibling node with the given name and\n     * attribute name, value pair. Since only elements have attributes,\n     * the node returned will be of type Node.ELEMENT_NODE.\n     */\n    public static Element getNextSiblingElement(Node   node,\n            String elemName,\n            String attrName,\n            String attrValue) {\n        // search for node\n        Node sibling = node.getNextSibling();\n        while (sibling != null) {\n            if (sibling.getNodeType() == Node.ELEMENT_NODE) {\n                Element element = (Element)sibling;\n                if (element.getNodeName().equals(elemName) &&\n                        element.getAttribute(attrName).equals(attrValue)) {\n                    return element;\n                }\n            }\n            sibling = sibling.getNextSibling();\n        }\n        // not found\n        return null;\n    } // getNextSiblingElement(Node,String,String,String):Element\n    /**\n     * Returns the concatenated child text of the specified node.\n     * This method only looks at the immediate children of type\n     * <code>Node.TEXT_NODE</code> or the children of any child\n     * node that is of type <code>Node.CDATA_SECTION_NODE</code>\n     * for the concatenation.\n     *\n     * @param node The node to look at.\n     */\n    public static String getChildText(Node node) {\n        // is there anything to do?\n        if (node == null) {\n            return null;\n        }\n        // concatenate children text\n        StringBuffer str = new StringBuffer();\n        Node child = node.getFirstChild();\n        while (child != null) {\n            short type = child.getNodeType();\n            if (type == Node.TEXT_NODE) {\n                str.append(child.getNodeValue());\n            }\n            else if (type == Node.CDATA_SECTION_NODE) {\n                str.append(getChildText(child));\n            }\n            child = child.getNextSibling();\n        }\n        // return text value\n        return str.toString();\n    } // getChildText(Node):String\n    // return the name of this element\n    public static String getName(Node node) {\n        return node.getNodeName();\n    } // getLocalName(Element):  String\n    /** returns local name of this element if not null, otherwise\n     returns the name of the node\n     */\n    public static String getLocalName(Node node) {\n        String name = node.getLocalName();\n        return (name!=null)? name:node.getNodeName();\n    } // getLocalName(Element):  String\n<fim_suffix>    public static Element getParent(Element elem) {\n        Node parent = elem.getParentNode();\n        if (parent instanceof Element)\n            return (Element)parent;\n        return null;\n    } // getParent(Element):Element<fim_middle>// function below has no smell\n"}