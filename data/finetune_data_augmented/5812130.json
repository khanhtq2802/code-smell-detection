{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.tinkerpop.gremlin.process.traversal.step.util.event;\n\nimport org.apache.tinkerpop.gremlin.process.traversal.Traversal;\nimport org.apache.tinkerpop.gremlin.structure.Edge;\nimport org.apache.tinkerpop.gremlin.structure.Element;\nimport org.apache.tinkerpop.gremlin.structure.Graph;\nimport org.apache.tinkerpop.gremlin.structure.Property;\nimport org.apache.tinkerpop.gremlin.structure.Vertex;\nimport org.apache.tinkerpop.gremlin.structure.VertexProperty;\n\nimport java.util.Iterator;\n\n/**\n * A representation of some action that occurs on a {@link Graph} for a {@link Traversal}.\n *\n * @author Stephen Mallette (http://stephen.genoprime.com)\n */\npublic interface Event {\n\n    /**\n     * An {@code Event} publishes its action to all the event {@link MutationListener} objects.\n     */\n    void fireEvent(final Iterator<MutationListener> eventListeners);\n\n    /**\n     * Represents an action where an {@link Edge} is added to the {@link Graph}.\n     */\n    class EdgeAddedEvent implements Event {\n\n        private final Edge edge;\n\n        public EdgeAddedEvent(final Edge edge) {\n            this.edge = edge;\n        }\n\n        @Override\n        public void fireEvent(final Iterator<MutationListener> eventListeners) {\n            while (eventListeners.hasNext()) {\n                eventListeners.next().edgeAdded(edge);\n            }\n        }\n    }\n\n    /**\n     * Represents an action where an {@link Edge} {@link Property} is added/modified.  If the {@link Property} is\n     * new then the {@code oldValue} will be {@code null}.\n     */\n    class EdgePropertyChangedEvent extends ElementPropertyChangedEvent {\n\n        public EdgePropertyChangedEvent(final Edge edge, final Property oldValue, final Object newValue) {\n            super(edge, oldValue, newValue);\n        }\n\n        @Override\n        void fire(final MutationListener listener, final Element element, final Property oldValue, final Object newValue, final Object... vertexPropertyKeyValues) {\n            listener.edgePropertyChanged((Edge) element, oldValue, newValue);\n        }\n    }\n\n    /**\n     * Represents an action where an {@link Edge} {@link Property} is removed.\n     */\n    class EdgePropertyRemovedEvent extends ElementPropertyEvent {\n\n        public EdgePropertyRemovedEvent(final Edge element, final Property removed) {\n            super(element, removed, null);\n        }\n\n        @Override\n        void fire(final MutationListener listener, final Element element, final Property oldValue, final Object newValue, final Object... vertexPropertyKeyValues) {\n            listener.edgePropertyRemoved((Edge) element, oldValue);\n        }\n    }\n\n    /**\n     * Represents an action where an {@link Edge} is removed from the {@link Graph}.\n     */\n    class EdgeRemovedEvent implements Event {\n\n        private final Edge edge;\n\n        public EdgeRemovedEvent(final Edge edge) {\n            this.edge = edge;\n        }\n\n        @Override\n        public void fireEvent(final Iterator<MutationListener> eventListeners) {\n            while (eventListeners.hasNext()) {\n                eventListeners.next().edgeRemoved(edge);\n            }\n        }\n    }\n\n    /**\n     * Represents an action where a {@link Vertex} is removed from the {@link Graph}.\n     */\n    class VertexAddedEvent implements Event {\n\n        private final Vertex vertex;\n\n        public VertexAddedEvent(final Vertex vertex) {\n            this.vertex = vertex;\n        }\n\n        @Override\n        public void fireEvent(final Iterator<MutationListener> eventListeners) {\n            while (eventListeners.hasNext()) {\n                eventListeners.next().vertexAdded(vertex);\n            }\n        }\n    }\n\n    /**\n     * Represents an action where a {@link VertexProperty} is modified on a {@link Vertex}.\n     */\n    class VertexPropertyChangedEvent extends ElementPropertyChangedEvent {\n\n        public VertexPropertyChangedEvent(final Vertex element, final Property oldValue, final Object newValue, final Object... vertexPropertyKeyValues) {\n            super(element, oldValue, newValue, vertexPropertyKeyValues);\n        }\n\n        @Override\n        void fire(final MutationListener listener, final Element element, final Property oldValue, final Object newValue, final Object... vertexPropertyKeyValues) {\n            listener.vertexPropertyChanged((Vertex) element, (VertexProperty) oldValue, newValue, vertexPropertyKeyValues);\n        }\n    }\n\n    /**\n     * Represents an action where a {@link Property} is modified on a {@link VertexProperty}.\n     */\n    class VertexPropertyPropertyChangedEvent extends ElementPropertyChangedEvent {\n\n        public VertexPropertyPropertyChangedEvent(final VertexProperty element, final Property oldValue, final Object newValue) {\n            super(element, oldValue, newValue);\n        }\n\n        @Override\n        void fire(final MutationListener listener, final Element element, final Property oldValue, final Object newValue, final Object... vertexPropertyKeyValues) {\n            listener.vertexPropertyPropertyChanged((VertexProperty) element, oldValue, newValue);\n        }\n    }\n\n    /**\n     * Represents an action where a {@link Property} is removed from a {@link VertexProperty}.\n     */\n    class VertexPropertyPropertyRemovedEvent extends ElementPropertyEvent {\n\n        public VertexPropertyPropertyRemovedEvent(final VertexProperty element, final Property removed) {\n            super(element, removed, null);\n        }\n\n        @Override\n        void fire(final MutationListener listener, final Element element, final Property oldValue, final Object newValue, final Object... vertexPropertyKeyValues) {\n            listener.vertexPropertyPropertyRemoved((VertexProperty) element, oldValue);\n        }\n    }\n\n    /**\n     * Represents an action where a {@link Property} is removed from a {@link Vertex}.\n     */\n    class VertexPropertyRemovedEvent implements Event {\n\n        private final VertexProperty vertexProperty;\n\n        public VertexPropertyRemovedEvent(final VertexProperty vertexProperty) {\n            this.vertexProperty = vertexProperty;\n        }\n\n        @Override\n        public void fireEvent(final Iterator<MutationListener> eventListeners) {\n            while (eventListeners.hasNext()) {\n                eventListeners.next().vertexPropertyRemoved(vertexProperty);\n            }\n        }\n    }\n\n    /**\n     * Represents an action where a {@link Vertex} is removed from the {@link Graph}.\n     */\n    class VertexRemovedEvent implements Event {\n\n        private final Vertex vertex;\n\n        public VertexRemovedEvent(final Vertex vertex) {\n            this.vertex = vertex;\n        }\n\n        @Override\n        public void fireEvent(final Iterator<MutationListener> eventListeners) {\n            while (eventListeners.hasNext()) {\n                eventListeners.next().vertexRemoved(vertex);\n            }\n        }\n    }\n\n    /**\n     * A base class for {@link Property} mutation events.\n     */\n<fim_suffix>    abstract class ElementPropertyChangedEvent extends ElementPropertyEvent {\n\n        public ElementPropertyChangedEvent(final Element element, final Property oldValue, final Object newValue, final Object... vertexPropertyKeyValues) {\n            super(element, oldValue, newValue, vertexPropertyKeyValues);\n        }\n    }\n\n    /**\n     * A base class for {@link Property} mutation events.\n     */\n    abstract class ElementPropertyEvent implements Event {\n\n        private final Element element;\n        private final Property oldValue;\n        private final Object newValue;\n        private final Object[] vertexPropertyKeyValues;\n\n        public ElementPropertyEvent(final Element element, final Property oldValue, final Object newValue, final Object... vertexPropertyKeyValues) {\n            this.element = element;\n            this.oldValue = oldValue;\n            this.newValue = newValue;\n            this.vertexPropertyKeyValues = vertexPropertyKeyValues;\n        }\n\n        abstract void fire(final MutationListener listener, final Element element, final Property oldValue, final Object newValue, final Object... vertexPropertyKeyValues);\n\n        @Override\n        public void fireEvent(final Iterator<MutationListener> eventListeners) {\n            while (eventListeners.hasNext()) {\n                fire(eventListeners.next(), element, oldValue, newValue, vertexPropertyKeyValues);\n            }\n        }\n    }\n}<fim_middle>// class below has no smell\n"}