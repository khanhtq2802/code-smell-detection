{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.apache.geode.admin.jmx.internal;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport javax.mail.Message;\nimport javax.mail.Session;\nimport javax.mail.Transport;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport org.apache.logging.log4j.Logger;\nimport org.apache.geode.SystemFailure;\nimport org.apache.geode.internal.logging.LogService;\n/**\n * Provides the ways to send emails to all the registered email id It also provides the way to\n * add/remove email ids. Can be used to send email in case of any alerts raised / warning / failure\n * in gemfire.\n *\n * @since GemFire 5.1\n */\npublic class MailManager {\n  private static final Logger logger = LogService.getLogger();\n  public MailManager() {}\n  public MailManager(Properties mailProperties) {\n    setMailProperties(mailProperties);\n  }\n  public MailManager(File mailPropertiesFile) throws IOException {\n    Properties prop = new Properties();\n    FileInputStream fio = new FileInputStream(mailPropertiesFile);\n    try {\n      prop.load(fio);\n    } finally {\n      fio.close();\n    }\n    setMailProperties(prop);\n  }\n  public MailManager(String mailHost, String mailFrom) {\n    this.mailHost = mailHost;\n    this.mailFrom = mailFrom;\n  }\n  /**\n   * Send email to all the registered email id with given subject and message\n   */\n  public void sendEmail(String subject, String message) {\n    processEmail(new EmailData(subject, message));\n  }\n  /**\n   * Send Emails to all the registered email id\n   *\n   * @param emailData Instance of EmailData\n   */\n  // Why a separate method & class EmailData needed???\n<fim_suffix>  private void processEmail(EmailData emailData) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Entered MailManager:processEmail\");\n    }\n    if (mailHost == null || mailHost.length() == 0 || emailData == null\n        || mailToAddresses.length == 0) {\n      logger.error(\"Required mail server configuration is not specfied.\");\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Exited MailManager:processEmail: Not sending email as conditions not met\");\n      }\n      return;\n    }\n    Session session = Session.getDefaultInstance(getMailHostConfiguration());\n    MimeMessage mimeMessage = new MimeMessage(session);\n    String subject = emailData.subject;\n    String message = emailData.message;\n    String mailToList = getMailToAddressesAsString();\n    try {\n      for (int i = 0; i < mailToAddresses.length; i++) {\n        mimeMessage.addRecipient(Message.RecipientType.TO, new InternetAddress(mailToAddresses[i]));\n      }\n      if (subject == null) {\n        subject = \"Alert from GemFire Admin Agent\";\n      }\n      mimeMessage.setSubject(subject);\n      if (message == null) {\n        message = \"\";\n      }\n      mimeMessage.setText(message);\n      Transport.send(mimeMessage);\n      logger.info(\"Email sent to {}. Subject: {}, Content: {}\",\n          new Object[] {mailToList, subject, message});\n    } catch (VirtualMachineError err) {\n      SystemFailure.initiateFailure(err);\n      // If this ever returns, rethrow the error. We're poisoned\n      // now, so don't let this thread continue.\n      throw err;\n    } catch (Throwable ex) {\n      // Whenever you catch Error or Throwable, you must also\n      // catch VirtualMachineError (see above). However, there is\n      // _still_ a possibility that you are dealing with a cascading\n      // error condition, so you also need to check to see if the JVM\n      // is still usable:\n      SystemFailure.checkFailure();\n      StringBuilder buf = new StringBuilder();\n      buf.append(\"An exception occurred while sending email.\");\n      buf.append(\n          \"Unable to send email. Please check your mail settings and the log file.\");\n      buf.append(\"\\n\\n\").append(\n          String.format(\"Exception message: %s\", ex.getMessage()));\n      buf.append(\"\\n\\n\").append(\n          \"Following email was not delivered:\");\n      buf.append(\"\\n\\t\")\n          .append(String.format(\"Mail Host: %s\", mailHost));\n      buf.append(\"\\n\\t\").append(String.format(\"From: %s\", mailFrom));\n      buf.append(\"\\n\\t\").append(String.format(\"To: %s\", mailToList));\n      buf.append(\"\\n\\t\").append(String.format(\"Subject: %s\", subject));\n      buf.append(\"\\n\\t\").append(String.format(\"Content: %s\", message));\n      logger.error(buf.toString(), ex);\n    }\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Exited MailManager:processEmail\");\n    }\n  }\n  /**\n   * Not yet implemented\n   */\n  public void close() {}\n  /**\n   * @return All the registered email id as string\n   */\n  private String getMailToAddressesAsString() {\n    StringBuffer mailToList = new StringBuffer();\n    for (int i = 0; i < mailToAddresses.length; i++) {\n      mailToList.append(mailToAddresses[i]);\n      mailToList.append(\", \");\n    }\n    return mailToList.toString();\n  }\n  /**\n   *\n   * @return Properties consisting mailHost and mailFrom property\n   */\n  private Properties getMailHostConfiguration() {\n    Properties result = new Properties();\n    if (mailHost == null) {\n      mailHost = \"\";\n    }\n    if (mailFrom == null) {\n      mailFrom = \"\";\n    }\n    result.setProperty(\"mail.host\", mailHost);\n    result.put(\"mail.from\", mailFrom);\n    return result;\n  }\n  /**\n   *\n   * @param host mail host server name\n   */\n  public void setMailHost(String host) {\n    this.mailHost = host;\n  }\n  /**\n   *\n   * @return mail host server name\n   */\n  public String getMailHost() {\n    return this.mailHost;\n  }\n  /**\n   *\n   * @param fromAddress mailFrom email id\n   */\n  public void setMailFromAddress(String fromAddress) {\n    mailFrom = fromAddress;\n  }\n  /**\n   *\n   * @return mailFrom email id\n   */\n  public String getMailFromAddress() {\n    return mailFrom;\n  }\n  /**\n   * add new mail id to ToList\n   */\n  public void addMailToAddress(String toAddress) {\n    mailToSet.add(toAddress);\n    mailToAddresses = getAllToAddresses();\n  }\n  /**\n   * remove given mail id from ToList\n   */\n  public void removeMailToAddress(String toAddress) {\n    mailToSet.remove(toAddress);\n    mailToAddresses = getAllToAddresses();\n  }\n  /**\n   * @return list all the registered email id\n   */\n  public String[] getAllToAddresses() {\n    return (String[]) mailToSet.toArray(new String[0]);\n  }\n  /**\n   * remove all the registered email ids from ToList\n   */\n  public void removeAllMailToAddresses() {\n    mailToSet.clear();\n    mailToAddresses = new String[0];\n  }\n  /**\n   * Set the mail properties, e.g mail host, mailFrom, MailTo etc\n   */\n  public void setMailProperties(Properties mailProperties) {\n    mailHost = mailProperties.getProperty(PROPERTY_MAIL_HOST);\n    mailFrom = mailProperties.getProperty(PROPERTY_MAIL_FROM);\n    String mailList = mailProperties.getProperty(PROPERTY_MAIL_TO_LIST, \"\");\n    String split[] = mailList.split(\",\");\n    removeAllMailToAddresses();\n    for (int i = 0; i < split.length; i++) {\n      addMailToAddress(split[i].trim());\n    }\n  }\n  @Override\n  public String toString() {\n    StringBuffer buffer = new StringBuffer(200);\n    buffer.append(\"[Mail Host: \");\n    buffer.append(getMailHost());\n    buffer.append(\"]\");\n    buffer.append(\" [Mail From: \");\n    buffer.append(getMailFromAddress());\n    buffer.append(\"]\");\n    buffer.append(\" [Mail To: \");<fim_middle>// function below is feature envy and long method\n"}