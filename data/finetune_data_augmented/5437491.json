{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.pivot.wtk;\n\nimport org.apache.pivot.collections.Sequence;\nimport org.apache.pivot.util.ListenerList;\n\n/**\n * Menu bar listener interface.\n */\npublic interface MenuBarListener {\n    /**\n     * Menu bar listeners.\n     */\n    public static class Listeners extends ListenerList<MenuBarListener> implements MenuBarListener {\n        @Override\n        public void itemInserted(MenuBar menuBar, int index) {\n            forEach(listener -> listener.itemInserted(menuBar, index));\n        }\n\n        @Override\n        public void itemsRemoved(MenuBar menuBar, int index, Sequence<MenuBar.Item> removed) {\n            forEach(listener -> listener.itemsRemoved(menuBar, index, removed));\n        }\n\n        @Override\n        public void activeItemChanged(MenuBar menuBar, MenuBar.Item previousActiveItem) {\n            forEach(listener -> listener.activeItemChanged(menuBar, previousActiveItem));\n        }\n    }\n\n    /**\n     * Menu bar listener adapter.\n     * @deprecated Since 2.1 and Java 8 the interface itself has default implementations.\n     */\n<fim_suffix>    @Deprecated\n    public static class Adapter implements MenuBarListener {\n        @Override\n        public void itemInserted(MenuBar menuBar, int index) {\n            // empty block\n        }\n\n        @Override\n        public void itemsRemoved(MenuBar menuBar, int index, Sequence<MenuBar.Item> removed) {\n            // empty block\n        }\n\n        @Override\n        public void activeItemChanged(MenuBar menuBar, MenuBar.Item previousActiveItem) {\n            // empty block\n        }\n    }\n\n    /**\n     * Called when a menu bar item has been inserted.\n     *\n     * @param menuBar The menu bar that changed.\n     * @param index The index where a new item was inserted.\n     */\n    default void itemInserted(MenuBar menuBar, int index) {\n    }\n\n    /**\n     * Called when menu bar items have been removed.\n     *\n     * @param menuBar The source of the event.\n     * @param index The starting index where items were removed.\n     * @param removed The sequence of removed items.\n     */\n    default void itemsRemoved(MenuBar menuBar, int index, Sequence<MenuBar.Item> removed) {\n    }\n\n    /**\n     * Called when a menu bar's active item has changed.\n     *\n     * @param menuBar The source of the event.\n     * @param previousActiveItem Which item was active previously.\n     */\n    default void activeItemChanged(MenuBar menuBar, MenuBar.Item previousActiveItem) {\n    }\n}<fim_middle>// class below has no smell\n"}