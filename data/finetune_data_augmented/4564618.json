{"text": "<fim_prefix>     * @return true to stroke, false to paint with text operators where possible\n     */\n    public boolean isStrokeGOCAText() {\n        return this.strokeGocaText;\n    }\n    /**\n     * Whether FS11 and SF45 non-inline images should be wrapped in a page segment\n     * @return true iff images should be wrapped\n     */\n    public boolean getWrapPSeg() {\n        return pSeg;\n    }\n    /**\n     * Sets whether FS11 and FS45 non-inline images should be wrapped in a page segment\n     * @param pSeg true iff images should be wrapped\n     */\n    public void setWrapPSeg(boolean pSeg) {\n        this.pSeg = pSeg;\n    }\n    /**\n     * gets whether images should be FS45\n     * @return true iff images should be FS45\n     */\n    public boolean getFS45() {\n        return fs45;\n    }\n    /**\n     * sets whether images should be FS45\n     * @param fs45 true iff images should be FS45\n     */\n    public void setFS45(boolean fs45) {\n        this.fs45 = fs45;\n    }\n    /** {@inheritDoc} */\n    @Override\n    protected AbstractData instantiateData() {\n        return new AFPData();\n    }\n    /** {@inheritDoc} */\n    @Override\n    protected AbstractPaintingState instantiate() {\n        return new AFPPaintingState();\n    }\n    /**\n     * Returns the painting state of the current page\n     *\n     * @return the painting state of the current page\n     */\n    protected AFPPagePaintingState getPagePaintingState() {\n        return this.pagePaintingState;\n    }\n    /**\n     * Gets the current page fonts\n     *\n     * @return the current page fonts\n     */\n    public AFPPageFonts getPageFonts() {\n        return pagePaintingState.getFonts();\n    }\n    /**\n     * Sets the page width\n     *\n     * @param pageWidth\n     *            the page width\n     */\n    public void setPageWidth(int pageWidth) {\n        pagePaintingState.setWidth(pageWidth);\n    }\n    /**\n     * Returns the page width\n     *\n     * @return the page width\n     */\n    public int getPageWidth() {\n        return pagePaintingState.getWidth();\n    }\n    /**\n     * Sets the page height\n     *\n     * @param pageHeight\n     *            the page height\n     */\n    public void setPageHeight(int pageHeight) {\n        pagePaintingState.setHeight(pageHeight);\n    }\n    /**\n     * Returns the page height\n     *\n     * @return the page height\n     */\n    public int getPageHeight() {\n        return pagePaintingState.getHeight();\n    }\n    /**\n     * Returns the page rotation\n     *\n     * @return the page rotation\n     */\n    public int getPageRotation() {\n        return pagePaintingState.getOrientation();\n    }\n    /**\n     * Sets the uri of the current image\n     *\n     * @param uri\n     *            the uri of the current image\n     */\n    public void setImageUri(String uri) {\n        ((AFPData) getData()).imageUri = uri;\n    }\n    /**\n     * Gets the uri of the current image\n     *\n     * @return the uri of the current image\n     */\n    public String getImageUri() {\n        return ((AFPData) getData()).imageUri;\n    }\n    /**\n     * Returns the currently derived rotation\n     *\n     * @return the currently derived rotation\n     */\n    public int getRotation() {\n        return getData().getDerivedRotation();\n    }\n    /**\n     * Returns the unit converter\n     *\n     * @return the unit converter\n     */\n    public AFPUnitConverter getUnitConverter() {\n        return this.unitConv;\n    }\n    /**\n     * Returns a point on the current page, taking the current painting state\n     * into account.\n     *\n     * @param x\n     *            the X-coordinate\n     * @param y\n     *            the Y-coordinate\n     * @return a point on the current page\n     */\n    public Point getPoint(int x, int y) {\n        Point p = new Point();\n        int rotation = getRotation();\n        switch (rotation) {\n        case 90:\n            p.x = y;\n            p.y = getPageWidth() - x;\n            break;\n        case 180:\n            p.x = getPageWidth() - x;\n            p.y = getPageHeight() - y;\n            break;\n        case 270:\n            p.x = getPageHeight() - y;\n            p.y = x;\n            break;\n        default:\n            p.x = x;\n            p.y = y;\n            break;\n        }\n        return p;\n    }\n    /** {@inheritDoc} */\n    @Override\n    public Object clone() {\n        AFPPaintingState paintingState = (AFPPaintingState) super.clone();\n        paintingState.pagePaintingState = (AFPPagePaintingState) this.pagePaintingState.clone();\n        paintingState.portraitRotation = this.portraitRotation;\n        paintingState.landscapeRotation = this.landscapeRotation;\n        paintingState.bitsPerPixel = this.bitsPerPixel;\n        paintingState.colorImages = this.colorImages;\n        paintingState.colorConverter = this.colorConverter;\n        paintingState.resolution = this.resolution;\n        return paintingState;\n    }\n    /** {@inheritDoc} */\n    @Override\n    public String toString() {\n        return \"AFPPaintingState{\" + \"portraitRotation=\" + portraitRotation\n                + \", landscapeRotation=\" + landscapeRotation + \", colorImages=\" + colorImages\n                + \", bitsPerPixel=\" + bitsPerPixel + \", resolution=\" + resolution + \", pageState=\"\n                + pagePaintingState + super.toString() + \"}\";\n    }\n    /**\n     * Page level state data\n     */\n    private class AFPPagePaintingState implements Cloneable {\n        /** page width */\n        private int width;\n        /** page height */\n        private int height;\n        /** page fonts */\n        private AFPPageFonts fonts = new AFPPageFonts();\n        /** page font count */\n        private int fontCount;\n        /** page orientation */\n        private int orientation;\n        /**\n         * Returns the page width\n         *\n         * @return the page width\n         */\n        protected int getWidth() {\n            return width;\n        }\n        /**\n         * Sets the page width\n         *\n         * @param width\n         *            the page width\n         */\n        protected void setWidth(int width) {\n            this.width = width;\n        }\n        /**\n         * Returns the page height\n         *\n         * @return the page height\n         */\n        protected int getHeight() {\n            return height;\n        }\n        /**\n         * Sets the page height\n         *\n         * @param height\n         *            the page height\n         */\n        protected void setHeight(int height) {\n            this.height = height;\n        }\n        /**\n         * Returns the page fonts\n         *\n         * @return the page fonts\n         */\n        protected AFPPageFonts getFonts() {\n            return fonts;\n        }\n        /**\n         * Sets the current page fonts\n         *\n         * @param fonts\n         *            the current page fonts\n         */\n        protected void setFonts(AFPPageFonts fonts) {\n            this.fonts = fonts;\n        }\n        /**\n         * Increments and returns the current page font count\n         *\n         * @return increment and return the current page font count\n         */\n        protected int incrementFontCount() {\n            return ++fontCount;\n        }\n        /**\n         * Returns the current page orientation\n         *\n         * @return the current page orientation\n         */\n        protected int getOrientation() {\n            return orientation;\n        }\n        /**\n         * Sets the current page orientation\n         *\n         * @param orientation\n         *            the current page orientation\n         */\n        protected void setOrientation(int orientation) {\n            this.orientation = orientation;\n        }\n        /** {@inheritDoc} */\n        @Override\n        public Object clone() {\n            AFPPagePaintingState state = new AFPPagePaintingState();\n            state.width = this.width;\n            state.height = this.height;\n            state.orientation = this.orientation;\n            state.fonts = new AFPPageFonts(this.fonts);\n            state.fontCount = this.fontCount;\n            return state;\n        }\n        /** {@inheritDoc} */\n        @Override\n        public String toString() {\n            return \"AFPPagePaintingState{width=\" + width + \", height=\" + height + \", orientation=\"\n                    + orientation + \", fonts=\" + fonts + \", fontCount=\" + fontCount + \"}\";\n        }\n    }\n    /**\n     * Block level state data\n     */\n    // @SuppressFBWarnings(\"SE_INNER_CLASS\")\n    private class AFPData extends org.apache.fop.util.AbstractPaintingState.AbstractData {\n        private static final long serialVersionUID = -1789481244175275686L;\n        /** The current fill status */\n        private boolean filled;\n        private String imageUri;\n        /** {@inheritDoc} */\n<fim_suffix>        @Override\n        public Object clone() {\n            AFPData obj = (AFPData) super.clone();\n            obj.filled = this.filled;\n            obj.imageUri = this.imageUri;\n            return obj;\n        }<fim_middle>// function below has no smell\n"}