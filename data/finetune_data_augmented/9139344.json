{"text": "<fim_prefix>/***********************************************************************\n * Copyright (c) 2008 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n * Actuate Corporation - initial API and implementation\n ***********************************************************************/\n\npackage org.eclipse.birt.report.engine.layout.pdf.emitter;\n\nimport org.eclipse.birt.core.exception.BirtException;\nimport org.eclipse.birt.report.engine.content.IAutoTextContent;\nimport org.eclipse.birt.report.engine.content.ICellContent;\nimport org.eclipse.birt.report.engine.content.IContainerContent;\nimport org.eclipse.birt.report.engine.content.IContent;\nimport org.eclipse.birt.report.engine.content.IContentVisitor;\nimport org.eclipse.birt.report.engine.content.IDataContent;\nimport org.eclipse.birt.report.engine.content.IForeignContent;\nimport org.eclipse.birt.report.engine.content.IGroupContent;\nimport org.eclipse.birt.report.engine.content.IImageContent;\nimport org.eclipse.birt.report.engine.content.ILabelContent;\nimport org.eclipse.birt.report.engine.content.IListBandContent;\nimport org.eclipse.birt.report.engine.content.IListContent;\nimport org.eclipse.birt.report.engine.content.IListGroupContent;\nimport org.eclipse.birt.report.engine.content.IPageContent;\nimport org.eclipse.birt.report.engine.content.IRowContent;\nimport org.eclipse.birt.report.engine.content.ITableBandContent;\nimport org.eclipse.birt.report.engine.content.ITableContent;\nimport org.eclipse.birt.report.engine.content.ITableGroupContent;\nimport org.eclipse.birt.report.engine.content.ITextContent;\nimport org.eclipse.birt.report.engine.executor.IReportExecutor;\nimport org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil;\n\npublic class LayoutContextFactory\n{\n\n\tprivate ContentVisitor visitor = new ContentVisitor( );\n\n\tContainerLayout layoutContext = null;\n\n\tContainerLayout parent = null;\n\n\tprivate LayoutEngineContext context = null;\n\n\tprotected IReportExecutor executor;\n\n\tpublic LayoutContextFactory(IReportExecutor executor, LayoutEngineContext context )\n\t{\n\t\tthis.context = context;\n\t\tthis.executor = executor;\n\t}\n\t\n\t\n\n\tpublic Layout createLayoutManager( ContainerLayout parent,\n IContent content )\n\t\t\tthrows BirtException\n\t{\n\t\tthis.parent = parent;\n\t\tif ( content == null )\n\t\t{\n\t\t\treturn new LineLayout( context, parent );\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (Layout) content.accept( visitor, null );\n\t\t}\n\t}\n\n<fim_suffix>\tprivate class ContentVisitor implements IContentVisitor\n\t{\n\n\t\tpublic Object visit( IContent content, Object value )\n\t\t{\n\t\t\treturn visitContent( content, value );\n\t\t}\n\n\t\tpublic Object visitContent( IContent content, Object value )\n\t\t{\n\t\t\tboolean isInline = PropertyUtil.isInlineElement( content );\n\t\t\tif ( isInline )\n\t\t\t{\n\t\t\t\treturn new InlineBlockLayout( context, parent, content );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new BlockStackingLayout( context, parent, content);\n\t\t\t}\n\t\t}\n\n\t\tpublic Object visitPage( IPageContent page, Object value )\n\t\t{\n\t\t\treturn new PageLayout(executor, context, parent, page);\n\t\t}\n\n\t\tpublic Object visitContainer( IContainerContent container, Object value )\n\t\t{\n\t\t\tboolean isInline = PropertyUtil.isInlineElement( container );\n\t\t\tif ( isInline )\n\t\t\t{\n\t\t\t\treturn new InlineContainerLayout( context, parent, container);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new BlockStackingLayout( context, parent, container);\n\t\t\t}\n\t\t}\n\n\t\tpublic Object visitTable( ITableContent table, Object value )\n\t\t{\n\t\t\treturn new TableLayout( context, parent, table );\n\t\t}\n\n\t\tpublic Object visitTableBand( ITableBandContent tableBand, Object value )\n\t\t{\n\t\t\treturn new TableBandLayout( context, parent, tableBand);\n\t\t}\n\n\t\tpublic Object visitRow( IRowContent row, Object value )\n\t\t{\n\t\t\treturn new RowLayout( context, parent, row );\n\t\t}\n\n\t\tpublic Object visitCell( ICellContent cell, Object value )\n\t\t{\n\t\t\treturn new CellLayout( context, parent, cell );\n\t\t}\n\n\t\tpublic Object visitText( ITextContent text, Object value )\n\t\t{\n\t\t\t// FIXME\n\t\t\treturn handleText( text );\n\t\t}\n\n\t\tpublic Object visitLabel( ILabelContent label, Object value )\n\t\t{\n\t\t\treturn handleText( label );\n\t\t}\n\n\t\tpublic Object visitData( IDataContent data, Object value )\n\t\t{\n\t\t\treturn handleText( data );\n\t\t}\n\n\t\tpublic Object visitImage( IImageContent image, Object value )\n\t\t{\n\t\t\treturn new ImageLayout( context, parent, image );\n\t\t}\n\n\t\tpublic Object visitForeign( IForeignContent foreign, Object value )\n\t\t{\n\t\t\tboolean isInline = PropertyUtil.isInlineElement( foreign );\n\t\t\tif ( isInline )\n\t\t\t{\n\t\t\t\treturn new InlineContainerLayout( context, parent, foreign);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new BlockStackingLayout( context, parent, foreign);\n\t\t\t}\n\t\t}\n\n\t\tpublic Object visitAutoText( IAutoTextContent autoText, Object value )\n\t\t{\n\t\t\tint type = autoText.getType( );\n\t\t\tif ( type == IAutoTextContent.TOTAL_PAGE\n\t\t\t\t\t|| type == IAutoTextContent.UNFILTERED_TOTAL_PAGE )\n\t\t\t{\n\t\t\t\tcontext.addUnresolvedContent( autoText );\n\t\t\t\treturn new TemplateLayout( context, parent, autoText );\n\t\t\t}\n\t\t\treturn handleText( autoText );\n\t\t}\n\n\t\tprivate Object handleText( ITextContent content )\n\t\t{\n\t\t\tboolean isInline = parent instanceof IInlineStackingLayout;\n\t\t\tif ( isInline )\n\t\t\t{\n\t\t\t\treturn new InlineTextLayout( context, parent, content );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tString text = content.getText( );\n\t\t\t\tif ( text == null || \"\".equals( text ) ) //$NON-NLS-1$\n\t\t\t\t{\n\t\t\t\t\tcontent.setText( \" \" ); //$NON-NLS-1$\n\t\t\t\t}\n\t\t\t\treturn new BlockTextLayout( context, parent, content);\n\t\t\t}\n\t\t}\n\n\t\tpublic Object visitList( IListContent list, Object value )\n\t\t{\n\t\t\treturn new ListLayout( context, parent, list );\n\n\t\t}\n\n\t\tpublic Object visitListBand( IListBandContent listBand, Object value )\n\t\t{\n\t\t\tassert ( false );\n\t\t\treturn null;\n\t\t\t// return new PDFListBandLM(context, parent, listBand, emitter,\n\t\t\t// executor);\n\n\t\t}\n\n\t\tpublic Object visitListGroup( IListGroupContent group, Object value )\n\t\t{\n\t\t\treturn new ListGroupLayout( context, parent, group );\n\t\t}\n\n\t\tpublic Object visitTableGroup( ITableGroupContent group, Object value )\n\t\t{\n\t\t\treturn new TableGroupLayout( context, parent, group );\n\t\t}\n\n\t\tpublic Object visitGroup( IGroupContent group, Object value )\n\t\t{\n\t\t\treturn new BlockStackingLayout( context, parent, group );\n\t\t}\n\n\t}\n\n}<fim_middle>// class below has no smell\n"}