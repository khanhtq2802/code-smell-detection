{"text": "<fim_prefix>/*\nCopyright 2011-2016 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.google.security.zynamics.reil.translators.arm;\n\nimport com.google.security.zynamics.reil.OperandSize;\nimport com.google.security.zynamics.reil.ReilHelpers;\nimport com.google.security.zynamics.reil.ReilInstruction;\nimport com.google.security.zynamics.reil.translators.ITranslationEnvironment;\nimport com.google.security.zynamics.reil.translators.InternalTranslationException;\nimport com.google.security.zynamics.reil.translators.TranslationHelpers;\nimport com.google.security.zynamics.zylib.disassembly.IInstruction;\nimport com.google.security.zynamics.zylib.disassembly.IOperandTreeNode;\n\nimport java.util.List;\n\n<fim_suffix>public class ARMQdaddTranslator extends ARMBaseTranslator {\n  @Override\n  protected void translateCore(final ITranslationEnvironment environment,\n      final IInstruction instruction, final List<ReilInstruction> instructions) {\n    final IOperandTreeNode registerOperand1 = instruction.getOperands().get(0).getRootNode()\n        .getChildren().get(0);\n    final IOperandTreeNode registerOperand2 = instruction.getOperands().get(1).getRootNode()\n        .getChildren().get(0);\n    final IOperandTreeNode registerOperand3 = instruction.getOperands().get(2).getRootNode()\n        .getChildren().get(0);\n\n    final String targetRegister = (registerOperand1.getValue());\n    final String sourceRegister1 = (registerOperand2.getValue());\n    final String sourceRegister2 = (registerOperand3.getValue());\n\n    final OperandSize dw = OperandSize.DWORD;\n    final OperandSize bt = OperandSize.BYTE;\n\n    long baseOffset = (instruction.getAddress().toLong() * 0x100) ;\n\n    final String shiftedRn = environment.getNextVariableString();\n    final String signedDoesSat1 = environment.getNextVariableString();\n    final String signedDoesSat2 = environment.getNextVariableString();\n    final String tmpResultVar1 = environment.getNextVariableString();\n    final String added2RnRm = environment.getNextVariableString();\n\n    instructions.add(ReilHelpers.createBsh(baseOffset + instructions.size(), dw, sourceRegister2,\n        bt, String.valueOf(1), dw, shiftedRn));\n\n    Helpers.signedSat(baseOffset + instructions.size(), environment, instruction, instructions, dw,\n        sourceRegister2, dw, sourceRegister2, dw, shiftedRn, \"ADD\", tmpResultVar1, 32L,\n        signedDoesSat1);\n\n    instructions.add(ReilHelpers.createAdd(baseOffset + instructions.size(), dw, tmpResultVar1, dw,\n        sourceRegister1, dw, added2RnRm));\n\n    Helpers.signedSat(baseOffset + instructions.size(), environment, instruction, instructions, dw,\n        tmpResultVar1, dw, sourceRegister1, dw, added2RnRm, \"ADD\", targetRegister, 32L,\n        signedDoesSat2);\n\n    instructions.add(ReilHelpers.createOr(baseOffset + instructions.size(), bt, signedDoesSat1, bt,\n        signedDoesSat2, bt, \"Q\"));\n  }\n\n  /**\n   * QDADD{<cond>} <Rd>, <Rm>, <Rn>\n   * \n   * Operation:\n   * \n   * if ConditionPassed(cond) then Rd = SignedSat(Rm + SignedSat(Rn*2, 32), 32)\n   * if SignedDoesSat(Rm + SignedSat(Rn*2, 32), 32) or SignedDoesSat(Rn*2, 32)\n   * then Q Flag = 1\n   */\n\n  @Override\n  public void translate(final ITranslationEnvironment environment, final IInstruction instruction,\n      final List<ReilInstruction> instructions) throws InternalTranslationException {\n    TranslationHelpers.checkTranslationArguments(environment, instruction, instructions, \"QDADD\");\n    translateAll(environment, instruction, \"QDADD\", instructions);\n  }\n}<fim_middle>// class below has no smell\n"}