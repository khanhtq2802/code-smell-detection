{"text": "<fim_prefix>          .setPRSingleHopEnabled(false).create(\"PRClientServerTestBase\");\n    } finally {\n      CacheServerTestUtil.enableShufflingOfEndpoints();\n    }\n    pool = (PoolImpl) p;\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    factory.setDataPolicy(DataPolicy.EMPTY);\n    factory.setPoolName(p.getName());\n    RegionAttributes attrs = factory.create();\n    Region region = cache.createRegion(PartitionedRegionName, attrs);\n    assertNotNull(region);\n  }\n  public static void createCacheClientWith2Regions(String host, Integer port1, Integer port2,\n      Integer port3) throws Exception {\n    CacheServerTestUtil.disableShufflingOfEndpoints();\n    Pool p;\n    serverPort1 = port1;\n    serverPort2 = port2;\n    serverPort3 = port3;\n    try {\n      p = PoolManager.createFactory().addServer(host, port1.intValue())\n          .addServer(host, port2.intValue()).addServer(host, port3.intValue()).setPingInterval(2000)\n          .setSubscriptionEnabled(true).setSubscriptionRedundancy(-1).setReadTimeout(2000)\n          .setSocketBufferSize(1000).setMinConnections(6).setMaxConnections(10).setRetryAttempts(2)\n          .create(\"PRClientServerTestBase\");\n    } finally {\n      CacheServerTestUtil.enableShufflingOfEndpoints();\n    }\n    pool = (PoolImpl) p;\n    AttributesFactory factory = new AttributesFactory();\n    factory.setDataPolicy(DataPolicy.EMPTY);\n    factory.setPoolName(p.getName());\n    RegionAttributes attrs = factory.create();\n    Region region1 = cache.createRegion(PartitionedRegionName + \"1\", attrs);\n    assertNotNull(region1);\n    factory = new AttributesFactory();\n    factory.setDataPolicy(DataPolicy.EMPTY);\n    attrs = factory.create();\n    Region region2 = cache.createRegion(PartitionedRegionName + \"2\", attrs);\n    assertNotNull(region2);\n  }\n  public static void createSingleHopCacheClient(String host, Integer port1, Integer port2,\n      Integer port3) throws Exception {\n    CacheServerTestUtil.disableShufflingOfEndpoints();\n    serverPort1 = port1;\n    serverPort2 = port2;\n    serverPort3 = port3;\n    Pool p;\n    try {\n      p = PoolManager.createFactory().addServer(host, port1.intValue())\n          .addServer(host, port2.intValue()).addServer(host, port3.intValue()).setPingInterval(2000)\n          .setSubscriptionEnabled(true).setSubscriptionRedundancy(-1).setReadTimeout(2000)\n          .setSocketBufferSize(1000).setMinConnections(6).setMaxConnections(10).setRetryAttempts(2)\n          .setPRSingleHopEnabled(true).create(\"PRClientServerTestBase\");\n    } finally {\n      CacheServerTestUtil.enableShufflingOfEndpoints();\n    }\n    pool = (PoolImpl) p;\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    factory.setDataPolicy(DataPolicy.EMPTY);\n    factory.setPoolName(p.getName());\n    RegionAttributes attrs = factory.create();\n    Region region = cache.createRegion(PartitionedRegionName, attrs);\n    assertNotNull(region);\n  }\n  public static void createNoSingleHopCacheClient(String host, Integer port1, Integer port2,\n      Integer port3) throws Exception {\n    CacheServerTestUtil.disableShufflingOfEndpoints();\n    serverPort1 = port1;\n    serverPort2 = port2;\n    serverPort3 = port3;\n    Pool p;\n    try {\n      p = PoolManager.createFactory().addServer(host, port1.intValue())\n          .addServer(host, port2.intValue()).addServer(host, port3.intValue()).setPingInterval(2000)\n          .setSubscriptionEnabled(true).setSubscriptionRedundancy(-1).setReadTimeout(2000)\n          .setSocketBufferSize(1000).setMinConnections(6).setMaxConnections(10).setRetryAttempts(2)\n          .setPRSingleHopEnabled(false).create(\"PRClientServerTestBase\");\n    } finally {\n      CacheServerTestUtil.enableShufflingOfEndpoints();\n    }\n    pool = (PoolImpl) p;\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    factory.setDataPolicy(DataPolicy.EMPTY);\n    factory.setPoolName(p.getName());\n    RegionAttributes attrs = factory.create();\n    Region region = cache.createRegion(PartitionedRegionName, attrs);\n    assertNotNull(region);\n  }\n  public static void createCacheClientWithoutRegion(String host, Integer port1, Integer port2,\n      Integer port3) throws Exception {\n    CacheServerTestUtil.disableShufflingOfEndpoints();\n    LogWriterUtils.getLogWriter()\n        .info(\"PRClientServerTestBase#createCacheClientWithoutRegion : creating pool\");\n    serverPort1 = port1;\n    serverPort2 = port2;\n    serverPort3 = port3;\n    Pool p;\n    try {\n      p = PoolManager.createFactory().addServer(host, port1.intValue())\n          .addServer(host, port2.intValue()).addServer(host, port3.intValue()).setPingInterval(250)\n          .setSubscriptionEnabled(true).setSubscriptionRedundancy(-1).setReadTimeout(2000)\n          .setSocketBufferSize(1000).setMinConnections(6).setMaxConnections(10).setRetryAttempts(1)\n          .create(\"PRClientServerTestBaseWithoutRegion\");\n    } finally {\n      CacheServerTestUtil.enableShufflingOfEndpoints();\n    }\n    pool = (PoolImpl) p;\n  }\n  public static void createCacheClientWithDistributedRegion(String host, Integer port1,\n      Integer port2, Integer port3) throws Exception {\n    CacheServerTestUtil.disableShufflingOfEndpoints();\n    LogWriterUtils.getLogWriter()\n        .info(\"PRClientServerTestBase#createCacheClientWithoutRegion : creating pool\");\n    serverPort1 = port1;\n    serverPort2 = port2;\n    serverPort3 = port3;\n    Pool p;\n    try {\n      p = PoolManager.createFactory().addServer(host, port1.intValue())\n          .addServer(host, port2.intValue()).addServer(host, port3.intValue()).setPingInterval(250)\n          .setSubscriptionEnabled(true).setSubscriptionRedundancy(-1).setReadTimeout(2000)\n          .setSocketBufferSize(1000).setMinConnections(6).setMaxConnections(10).setRetryAttempts(0)\n          .create(\"PRClientServerTestBaseWithoutRegion\");\n    } finally {\n      CacheServerTestUtil.enableShufflingOfEndpoints();\n    }\n    pool = (PoolImpl) p;\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    factory.setDataPolicy(DataPolicy.REPLICATE);\n    assertNotNull(cache);\n    Region region = cache.createRegion(regionName, factory.create());\n    assertNotNull(region);\n  }\n  protected void createClientServerScenarion(ArrayList commonAttributes, int localMaxMemoryServer1,\n      int localMaxMemoryServer2, int localMaxMemoryServer3) {\n    createCacheInClientServer();\n    Integer port1 = (Integer) server1.invoke(() -> PRClientServerTestBase\n        .createCacheServer(commonAttributes, new Integer(localMaxMemoryServer1)));\n    Integer port2 = (Integer) server2.invoke(() -> PRClientServerTestBase\n        .createCacheServer(commonAttributes, new Integer(localMaxMemoryServer2)));\n    Integer port3 = (Integer) server3.invoke(() -> PRClientServerTestBase\n        .createCacheServer(commonAttributes, new Integer(localMaxMemoryServer3)));\n    serverPort1 = port1;\n    serverPort2 = port2;\n    serverPort3 = port3;\n    client.invoke(() -> PRClientServerTestBase\n        .createCacheClient(NetworkUtils.getServerHostName(server1.getHost()), port1, port2, port3));\n  }\n<fim_suffix>  protected void createClientServerScenarion_SingleConnection(ArrayList commonAttributes,\n      int localMaxMemoryServer1, int localMaxMemoryServer2, int localMaxMemoryServer3) {\n    createCacheInClientServer();\n    Integer port1 = (Integer) server1.invoke(() -> PRClientServerTestBase\n        .createCacheServer(commonAttributes, new Integer(localMaxMemoryServer1)));\n    server2.invoke(() -> PRClientServerTestBase.createCacheServer(commonAttributes,\n        new Integer(localMaxMemoryServer2)));\n    serverPort1 = port1;\n    client.invoke(() -> PRClientServerTestBase.createCacheClient_SingleConnection(\n        NetworkUtils.getServerHostName(server1.getHost()), port1));\n  }<fim_middle>// function below has no smell\n"}