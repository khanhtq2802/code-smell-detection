{"text": "<fim_prefix>package org.apache.tapestry5.internal.plastic;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.Inherited;\n\nimport org.apache.tapestry5.plastic.AnnotationAccess;\n\n/**\n * Delegating annotation access is used when resolving annotations on a class; it searches the primary\n * annotation access and if not found there (and {@link Inherited} is on the annotation being searched),\n * it searches in the inherited access.\n */\n<fim_suffix>public class DelegatingAnnotationAccess implements AnnotationAccess\n{\n    private final AnnotationAccess primary;\n\n    private final AnnotationAccess inherited;\n\n    public DelegatingAnnotationAccess(AnnotationAccess primary, AnnotationAccess inherited)\n    {\n        this.primary = primary;\n        this.inherited = inherited;\n    }\n\n    private boolean isInherited(Class<? extends Annotation> annotationType)\n    {\n        return annotationType.getAnnotation(Inherited.class) != null;\n    }\n\n    @Override\n    public <T extends Annotation> boolean hasAnnotation(Class<T> annotationType)\n    {\n        if (primary.hasAnnotation(annotationType))\n            return true;\n\n        return isInherited(annotationType) && inherited.hasAnnotation(annotationType);\n    }\n\n    @Override\n    public <T extends Annotation> T getAnnotation(Class<T> annotationType)\n    {\n        T fromPrimary = primary.getAnnotation(annotationType);\n\n        if (fromPrimary != null)\n            return fromPrimary;\n\n        return isInherited(annotationType) ? inherited.getAnnotation(annotationType) : null;\n    }\n}<fim_middle>// class below has no smell\n"}