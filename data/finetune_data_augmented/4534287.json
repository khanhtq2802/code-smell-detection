{"text": "<fim_prefix>    @ApiImplicitParams({@ApiImplicitParam(value = \"body\", required = true, paramType = \"body\", dataType = \"body\", format = \"body\", dataTypeClass = SavingsAccountsApiResourceSwagger.PostSavingsAccountsAccountIdRequest.class)})\n    @ApiResponses({@ApiResponse(code = 200, message = \"OK\", response = SavingsAccountsApiResourceSwagger.PostSavingsAccountsAccountIdResponse.class)})\n    public String handleCommands(@PathParam(\"accountId\") @ApiParam(value = \"accountId\") final Long accountId, @QueryParam(\"command\") @ApiParam(value = \"command\") final String commandParam,\n           @ApiParam(hidden = true) final String apiRequestBodyAsJson) {\n        String jsonApiRequest = apiRequestBodyAsJson;\n        if (StringUtils.isBlank(jsonApiRequest)) {\n            jsonApiRequest = \"{}\";\n        }\n        final CommandWrapperBuilder builder = new CommandWrapperBuilder().withJson(jsonApiRequest);\n        CommandProcessingResult result = null;\n        if (is(commandParam, \"reject\")) {\n            final CommandWrapper commandRequest = builder.rejectSavingsAccountApplication(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, \"withdrawnByApplicant\")) {\n            final CommandWrapper commandRequest = builder.withdrawSavingsAccountApplication(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, \"approve\")) {\n            final CommandWrapper commandRequest = builder.approveSavingsAccountApplication(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, \"undoapproval\")) {\n            final CommandWrapper commandRequest = builder.undoSavingsAccountApplication(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, \"activate\")) {\n            final CommandWrapper commandRequest = builder.savingsAccountActivation(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, \"calculateInterest\")) {\n            final CommandWrapper commandRequest = builder.withNoJsonBody().savingsAccountInterestCalculation(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, \"postInterest\")) {\n            final CommandWrapper commandRequest = builder.savingsAccountInterestPosting(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, \"applyAnnualFees\")) {\n            final CommandWrapper commandRequest = builder.savingsAccountApplyAnnualFees(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, \"close\")) {\n            final CommandWrapper commandRequest = builder.closeSavingsAccountApplication(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, \"assignSavingsOfficer\")) {\n            final CommandWrapper commandRequest = builder.assignSavingsOfficer(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n            return this.toApiJsonSerializer.serialize(result);\n        } else if (is(commandParam, \"unassignSavingsOfficer\")) {\n            final CommandWrapper commandRequest = builder.unassignSavingsOfficer(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n            return this.toApiJsonSerializer.serialize(result);\n        } else if (is(commandParam, SavingsApiConstants.COMMAND_BLOCK_DEBIT)) {\n            final CommandWrapper commandRequest = builder.blockDebitsFromSavingsAccount(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, SavingsApiConstants.COMMAND_UNBLOCK_DEBIT)) {\n            final CommandWrapper commandRequest = builder.unblockDebitsFromSavingsAccount(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, SavingsApiConstants.COMMAND_BLOCK_CREDIT)) {\n            final CommandWrapper commandRequest = builder.blockCreditsToSavingsAccount(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, SavingsApiConstants.COMMAND_UNBLOCK_CREDIT)) {\n            final CommandWrapper commandRequest = builder.unblockCreditsToSavingsAccount(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, SavingsApiConstants.COMMAND_BLOCK_ACCOUNT)) {\n            final CommandWrapper commandRequest = builder.withNoJsonBody().blockSavingsAccount(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        } else if (is(commandParam, SavingsApiConstants.COMMAND_UNBLOCK_ACCOUNT)) {\n            final CommandWrapper commandRequest = builder.withNoJsonBody().unblockSavingsAccount(accountId).build();\n            result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        }\n        if (result == null) {\n            //\n            throw new UnrecognizedQueryParamException(\"command\", commandParam, new Object[] { \"reject\", \"withdrawnByApplicant\", \"approve\",\n                    \"undoapproval\", \"activate\", \"calculateInterest\", \"postInterest\", \"close\", \"assignSavingsOfficer\",\n                    \"unassignSavingsOfficer\", SavingsApiConstants.COMMAND_BLOCK_DEBIT, SavingsApiConstants.COMMAND_UNBLOCK_DEBIT,\n                    SavingsApiConstants.COMMAND_BLOCK_CREDIT, SavingsApiConstants.COMMAND_UNBLOCK_CREDIT,\n                    SavingsApiConstants.COMMAND_BLOCK_ACCOUNT, SavingsApiConstants.COMMAND_UNBLOCK_ACCOUNT });\n        }\n        return this.toApiJsonSerializer.serialize(result);\n    }\n    private boolean is(final String commandParam, final String commandValue) {\n        return StringUtils.isNotBlank(commandParam) && commandParam.trim().equalsIgnoreCase(commandValue);\n    }\n    @DELETE\n    @Path(\"{accountId}\")\n    @Consumes({ MediaType.APPLICATION_JSON })\n    @Produces({ MediaType.APPLICATION_JSON })\n    @ApiOperation(value = \"Delete a savings application\", httpMethod = \"DELETE\", notes = \"At present we support hard delete of savings application so long as its in 'Submitted and pending approval' state. One the application is moves past this state, it is not possible to do a 'hard' delete of the application or the account. An API endpoint will be added to close/de-activate the savings account.\")\n    @ApiResponses({@ApiResponse(code = 200, message = \"OK\", response = SavingsAccountsApiResourceSwagger.DeleteSavingsAccountsAccountIdResponse.class)})\n    public String delete(@PathParam(\"accountId\") @ApiParam(value = \"accountId\") final Long accountId) {\n        final CommandWrapper commandRequest = new CommandWrapperBuilder().deleteSavingsAccount(accountId).build();\n        final CommandProcessingResult result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n        return this.toApiJsonSerializer.serialize(result);\n    }\n<fim_suffix>    @GET\n    @Path(\"downloadtemplate\")\n    @Produces(\"application/vnd.ms-excel\")\n    public Response getSavingsTemplate(@QueryParam(\"officeId\")final Long officeId,\n            @QueryParam(\"staffId\")final Long staffId,@QueryParam(\"dateFormat\") final String dateFormat) {\n        return bulkImportWorkbookPopulatorService.getTemplate(GlobalEntityType.SAVINGS_ACCOUNT.toString(),officeId, staffId,dateFormat);\n    }<fim_middle>// function below has no smell\n"}