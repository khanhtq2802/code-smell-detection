{"text": "<fim_prefix>        public final List<DCTree> label;\n        DCLink(Kind kind, DCReference ref, List<DCTree> label) {\n            Assert.check(kind == Kind.LINK || kind == Kind.LINK_PLAIN);\n            this.kind = kind;\n            this.ref = ref;\n            this.label = label;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public Kind getKind() {\n            return kind;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n            return v.visitLink(this, d);\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public ReferenceTree getReference() {\n            return ref;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public List<? extends DocTree> getLabel() {\n            return label;\n        }\n    }\n    public static class DCLiteral extends DCInlineTag implements LiteralTree {\n        public final Kind kind;\n        public final DCText body;\n        DCLiteral(Kind kind, DCText body) {\n            Assert.check(kind == Kind.CODE || kind == Kind.LITERAL);\n            this.kind = kind;\n            this.body = body;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public Kind getKind() {\n            return kind;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n            return v.visitLiteral(this, d);\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public DCText getBody() {\n            return body;\n        }\n    }\n    public static class DCParam extends DCBlockTag implements ParamTree {\n        public final boolean isTypeParameter;\n        public final DCIdentifier name;\n        public final List<DCTree> description;\n        DCParam(boolean isTypeParameter, DCIdentifier name, List<DCTree> description) {\n            this.isTypeParameter = isTypeParameter;\n            this.name = name;\n            this.description = description;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public Kind getKind() {\n            return Kind.PARAM;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n            return v.visitParam(this, d);\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public boolean isTypeParameter() {\n            return isTypeParameter;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public IdentifierTree getName() {\n            return name;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public List<? extends DocTree> getDescription() {\n            return description;\n        }\n    }\n    public static class DCProvides extends DCBlockTag implements ProvidesTree {\n        public final DCReference serviceType;\n        public final List<DCTree> description;\n        DCProvides(DCReference serviceType, List<DCTree> description) {\n            this.serviceType = serviceType;\n            this.description = description;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public Kind getKind() {\n            return Kind.PROVIDES;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n            return v.visitProvides(this, d);\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public ReferenceTree getServiceType() {\n            return serviceType;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public List<? extends DocTree> getDescription() {\n            return description;\n        }\n    }\n    public static class DCReference extends DCEndPosTree<DCReference> implements ReferenceTree {\n        public final String signature;\n        // The following are not directly exposed through ReferenceTree\n        // use DocTrees.getElement(DocTreePath)\n        public final JCTree qualifierExpression;\n        public final Name memberName;\n        public final List<JCTree> paramTypes;\n        DCReference(String signature, JCTree qualExpr, Name member, List<JCTree> paramTypes) {\n            this.signature = signature;\n            qualifierExpression = qualExpr;\n            memberName = member;\n            this.paramTypes = paramTypes;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public Kind getKind() {\n            return Kind.REFERENCE;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n            return v.visitReference(this, d);\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public String getSignature() {\n            return signature;\n        }\n    }\n    public static class DCReturn extends DCBlockTag implements ReturnTree {\n        public final List<DCTree> description;\n        DCReturn(List<DCTree> description) {\n            this.description = description;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public Kind getKind() {\n            return Kind.RETURN;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n            return v.visitReturn(this, d);\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public List<? extends DocTree> getDescription() {\n            return description;\n        }\n    }\n    public static class DCSee extends DCBlockTag implements SeeTree {\n        public final List<DCTree> reference;\n        DCSee(List<DCTree> reference) {\n            this.reference = reference;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public Kind getKind() {\n            return Kind.SEE;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n            return v.visitSee(this, d);\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public List<? extends DocTree> getReference() {\n            return reference;\n        }\n    }\n    public static class DCSerial extends DCBlockTag implements SerialTree {\n        public final List<DCTree> description;\n        DCSerial(List<DCTree> description) {\n            this.description = description;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public Kind getKind() {\n            return Kind.SERIAL;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n            return v.visitSerial(this, d);\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public List<? extends DocTree> getDescription() {\n            return description;\n        }\n    }\n    public static class DCSerialData extends DCBlockTag implements SerialDataTree {\n        public final List<DCTree> description;\n        DCSerialData(List<DCTree> description) {\n            this.description = description;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public Kind getKind() {\n            return Kind.SERIAL_DATA;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n            return v.visitSerialData(this, d);\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public List<? extends DocTree> getDescription() {\n            return description;\n        }\n    }\n<fim_suffix>    public static class DCSerialField extends DCBlockTag implements SerialFieldTree {\n        public final DCIdentifier name;\n        public final DCReference type;\n        public final List<DCTree> description;\n        DCSerialField(DCIdentifier name, DCReference type, List<DCTree> description) {\n            this.description = description;\n            this.name = name;\n            this.type = type;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public Kind getKind() {\n            return Kind.SERIAL_FIELD;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n            return v.visitSerialField(this, d);\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public List<? extends DocTree> getDescription() {\n            return description;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public IdentifierTree getName() {\n            return name;\n        }\n        @Override @DefinedBy(Api.COMPILER_TREE)\n        public ReferenceTree getType() {\n            return type;\n        }\n    }<fim_middle>// class below is data class\n"}