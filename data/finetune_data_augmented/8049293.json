{"text": "<fim_prefix>\t\tprotected INode node;\n\t\tprotected List<AbstractToken> tokensForSemanticChildren = Collections.emptyList();\n\t\tprotected final int transitionIndex;\n\t\tpublic AbstractToken(AbstractToken parent, AbstractToken next, int no, IEObjectConsumer currentSemanticElement) {\n\t\t\tthis.next = next;\n\t\t\tthis.lastRuleCallOrigin = parent;\n\t\t\tthis.transitionIndex = no;\n\t\t\tthis.eObjectConsumer = currentSemanticElement;\n\t\t}\n\t\tprotected boolean checkForRecursion(Class<?> clazz, IEObjectConsumer curr) {\n\t\t\tAbstractToken token = next;\n\t\t\twhile (token != null) {\n\t\t\t\tif (token.getClass() == clazz)\n\t\t\t\t\treturn token.getEObjectConsumer() == curr;\n\t\t\t\ttoken = token.getNext();\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tpublic AbstractToken createFollower(int index, IEObjectConsumer inst) {\n\t\t\treturn null;\n\t\t}\n\t\tpublic AbstractToken createFollowerAfterReturn(AbstractToken next, int actIndex, int index,\n\t\t\t\tIEObjectConsumer inst) {\n\t\t\treturn null;\n\t\t}\n\t\tpublic String dumpTokens(int maxTokenCount, int maxStringLength, boolean appendDots) {\n\t\t\tArrayList<String> tokensAsStrings = new ArrayList<String>();\n\t\t\tAbstractToken currentToken = this;\n\t\t\twhile (currentToken != null && tokensAsStrings.size() <= maxTokenCount + 1) {\n\t\t\t\tString s = currentToken.serialize(null);\n\t\t\t\tif (s != null)\n\t\t\t\t\ttokensAsStrings.add(s);\n\t\t\t\tcurrentToken = currentToken.getNext();\n\t\t\t}\n\t\t\tboolean overdepth = tokensAsStrings.size() > maxTokenCount;\n\t\t\tif (overdepth)\n\t\t\t\ttokensAsStrings.remove(tokensAsStrings.size() - 1);\n\t\t\tStringBuffer result = new StringBuffer();\n\t\t\tfor (int i = 0; i < tokensAsStrings.size(); i++) {\n\t\t\t\tresult.append(tokensAsStrings.get(i));\n\t\t\t\tif (i != tokensAsStrings.size() - 1)\n\t\t\t\t\tresult.append(\" \");\n\t\t\t}\n\t\t\tboolean overlength = result.length() > maxStringLength;\n\t\t\tif (overlength)\n\t\t\t\tresult.delete(maxStringLength + 1, result.length());\n\t\t\tif (appendDots && (overdepth || overlength))\n\t\t\t\tresult.append(\"...\");\n\t\t\treturn result.toString();\n\t\t}\n\t\tpublic boolean equalsOrReplacesNode(INode node) {\n\t\t\treturn false;\n\t\t}\n\t\tpublic EObject getEObject() {\n\t\t\treturn eObjectConsumer.getEObject();\n\t\t}\n\t\tpublic IEObjectConsumer getEObjectConsumer() {\n\t\t\treturn eObjectConsumer;\n\t\t}\n\t\tpublic abstract AbstractElement getGrammarElement();\n\t\tpublic AbstractToken getLastRuleCallOrigin() {\n\t\t\treturn lastRuleCallOrigin;\n\t\t}\n\t\tpublic AbstractToken getNext() {\n\t\t\treturn next;\n\t\t}\n\t\tpublic INode getNode() {\n\t\t\treturn node;\n\t\t}\n\t\tpublic List<AbstractToken> getTokensForSemanticChildren() {\n\t\t\treturn tokensForSemanticChildren;\n\t\t}\n\t\tpublic int getTransitionIndex() {\n\t\t\treturn transitionIndex;\n\t\t}\n\t\tpublic final String serialize(INode node) {\n\t\t\tString result = serializeInternal(node);\n\t\t\tif (result != ITokenSerializer.KEEP_VALUE_FROM_NODE_MODEL)\n\t\t\t\treturn result;\n\t\t\tif (node == null)\n\t\t\t\tthrow new UnsupportedOperationException(\n\t\t\t\t\t\t\"Can not keep value from Node Model when there is no Node Model. Context:\" + this);\n\t\t\telse\n\t\t\t\treturn tokenUtil.serializeNode(node);\n\t\t}\n\t\tprotected String serializeInternal(INode node) {\n\t\t\treturn null;\n\t\t}\n\t\tpublic void setNode(INode node) {\n\t\t\tthis.node = node;\n\t\t}\n\t\tpublic IEObjectConsumer tryConsume() {\n\t\t\treturn eObjectConsumer;\n\t\t}\n\t}\n\tpublic abstract class ActionToken extends AbstractToken {\n\t\tpublic ActionToken(AbstractToken parent, AbstractToken next, int no, IEObjectConsumer current) {\n\t\t\tsuper(parent, next, no, current);\n\t\t}\n\t}\n\tpublic abstract class AlternativesToken extends AbstractToken {\n\t\tpublic AlternativesToken(AbstractToken parent, AbstractToken next, int no, IEObjectConsumer current) {\n\t\t\tsuper(parent, next, no, current);\n\t\t}\n\t}\n\tpublic abstract class AssignmentToken extends AbstractToken {\n\t\tprotected IEObjectConsumer consumed;\n\t\tprotected AbstractElement element;\n\t\tprotected AssignmentType type;\n\t\tprotected Object value;\n\t\tpublic AssignmentToken(AbstractToken parent, AbstractToken next, int no, IEObjectConsumer current) {\n\t\t\tsuper(parent, next, no, current);\n\t\t}\n\t\t@Override\n\t\tpublic boolean equalsOrReplacesNode(INode node) {\n\t\t\tif (type == null)\n\t\t\t\treturn false;\n\t\t\tswitch (type) {\n\t\t\t\tcase CROSS_REFERENCE:\n\t\t\t\t\treturn crossRefSerializer.equalsOrReplacesNode(eObjectConsumer.getEObject(),\n\t\t\t\t\t\t\t(CrossReference) element, (EObject) value, node);\n\t\t\t\tcase KEYWORD:\n\t\t\t\t\treturn keywordSerializer.equalsOrReplacesNode(eObjectConsumer.getEObject(), ((Keyword) element),\n\t\t\t\t\t\t\tvalue, node);\n\t\t\t\tcase TERMINAL_RULE_CALL:\n\t\t\t\t\treturn valueSerializer.equalsOrReplacesNode(eObjectConsumer.getEObject(), (RuleCall) element,\n\t\t\t\t\t\t\tvalue, node);\n\t\t\t\tcase ENUM_RULE_CALL:\n\t\t\t\t\treturn enumLitSerializer.equalsOrReplacesNode(eObjectConsumer.getEObject(), (RuleCall) element,\n\t\t\t\t\t\t\tvalue, node);\n\t\t\t\tcase PARSER_RULE_CALL:\n\t\t\t\t\treturn false;\n\t\t\t\tcase DATATYPE_RULE_CALL:\n\t\t\t\t\treturn valueSerializer.equalsOrReplacesNode(eObjectConsumer.getEObject(), (RuleCall) element,\n\t\t\t\t\t\t\tvalue, node);\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tpublic AbstractElement getAssignmentElement() {\n\t\t\treturn element;\n\t\t}\n\t\tpublic AssignmentType getType() {\n\t\t\treturn type;\n\t\t}\n\t\tpublic Object getValue() {\n\t\t\treturn value;\n\t\t}\n\t\t@Override\n\t\tprotected String serializeInternal(INode node) {\n\t\t\tif (type == null)\n\t\t\t\treturn null;\n\t\t\tswitch (type) {\n\t\t\t\tcase CROSS_REFERENCE:\n\t\t\t\t\tString ref = crossRefSerializer.serializeCrossRef(eObjectConsumer.getEObject(),\n\t\t\t\t\t\t\t(CrossReference) element, (EObject) value, node);\n\t\t\t\t\tif (ref == null) {\n\t\t\t\t\t\tAssignment ass = GrammarUtil.containingAssignment(element);\n\t\t\t\t\t\tthrow new XtextSerializationException(\"Could not serialize cross reference from \"\n\t\t\t\t\t\t\t\t+ EmfFormatter.objPath(eObjectConsumer.getEObject()) + \".\" + ass.getFeature() + \" to \"\n\t\t\t\t\t\t\t\t+ EmfFormatter.objPath((EObject) value));\n\t\t\t\t\t}\n\t\t\t\t\treturn ref;\n\t\t\t\tcase KEYWORD:\n\t\t\t\t\treturn keywordSerializer.serializeAssignedKeyword(eObjectConsumer.getEObject(),\n\t\t\t\t\t\t\t((Keyword) element), value, node);\n\t\t\t\tcase TERMINAL_RULE_CALL:\n\t\t\t\t\treturn valueSerializer.serializeAssignedValue(eObjectConsumer.getEObject(), (RuleCall) element,\n\t\t\t\t\t\t\tvalue, node);\n\t\t\t\tcase ENUM_RULE_CALL:\n\t\t\t\t\treturn enumLitSerializer.serializeAssignedEnumLiteral(eObjectConsumer.getEObject(),\n\t\t\t\t\t\t\t(RuleCall) element, value, node);\n\t\t\t\tcase PARSER_RULE_CALL:\n\t\t\t\t\treturn null;\n\t\t\t\tcase DATATYPE_RULE_CALL:\n\t\t\t\t\treturn valueSerializer.serializeAssignedValue(eObjectConsumer.getEObject(), (RuleCall) element,\n\t\t\t\t\t\t\tvalue, node);\n\t\t\t\tdefault:\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\tpublic enum AssignmentType {\n\t\tCROSS_REFERENCE, DATATYPE_RULE_CALL, ENUM_RULE_CALL, KEYWORD, PARSER_RULE_CALL, TERMINAL_RULE_CALL\n\t}\n\tprotected class CommentToken extends AbstractToken {\n\t\tpublic CommentToken(ILeafNode node) {\n\t\t\tsuper(null, null, 0, null);\n\t\t\tsetNode(node);\n\t\t}\n\t\t@Override\n\t\tpublic AbstractElement getGrammarElement() {\n\t\t\treturn null;\n\t\t}\n\t}\n<fim_suffix>\tpublic abstract class GroupToken extends AbstractToken {\n\t\tpublic GroupToken(AbstractToken parent, AbstractToken next, int no, IEObjectConsumer current) {\n\t\t\tsuper(parent, next, no, current);\n\t\t}\n\t}<fim_middle>// class below has no smell\n"}