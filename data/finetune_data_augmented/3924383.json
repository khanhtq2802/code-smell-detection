{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Autogenerated by Thrift Compiler (0.12.0)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage org.apache.accumulo.proxy.thrift;\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\", \"unused\"})\n@javax.annotation.Generated(value = \"Autogenerated by Thrift Compiler (0.12.0)\")\npublic class ScanOptions implements org.apache.thrift.TBase<ScanOptions, ScanOptions._Fields>, java.io.Serializable, Cloneable, Comparable<ScanOptions> {\n  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"ScanOptions\");\n  private static final org.apache.thrift.protocol.TField AUTHORIZATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"authorizations\", org.apache.thrift.protocol.TType.SET, (short)1);\n  private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"range\", org.apache.thrift.protocol.TType.STRUCT, (short)2);\n  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"columns\", org.apache.thrift.protocol.TType.LIST, (short)3);\n  private static final org.apache.thrift.protocol.TField ITERATORS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"iterators\", org.apache.thrift.protocol.TType.LIST, (short)4);\n  private static final org.apache.thrift.protocol.TField BUFFER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"bufferSize\", org.apache.thrift.protocol.TType.I32, (short)5);\n  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ScanOptionsStandardSchemeFactory();\n  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ScanOptionsTupleSchemeFactory();\n  public @org.apache.thrift.annotation.Nullable java.util.Set<java.nio.ByteBuffer> authorizations; // optional\n  public @org.apache.thrift.annotation.Nullable Range range; // optional\n  public @org.apache.thrift.annotation.Nullable java.util.List<ScanColumn> columns; // optional\n  public @org.apache.thrift.annotation.Nullable java.util.List<IteratorSetting> iterators; // optional\n  public int bufferSize; // optional\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n    AUTHORIZATIONS((short)1, \"authorizations\"),\n    RANGE((short)2, \"range\"),\n    COLUMNS((short)3, \"columns\"),\n    ITERATORS((short)4, \"iterators\"),\n    BUFFER_SIZE((short)5, \"bufferSize\");\n    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n    static {\n      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    @org.apache.thrift.annotation.Nullable\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // AUTHORIZATIONS\n          return AUTHORIZATIONS;\n        case 2: // RANGE\n          return RANGE;\n        case 3: // COLUMNS\n          return COLUMNS;\n        case 4: // ITERATORS\n          return ITERATORS;\n        case 5: // BUFFER_SIZE\n          return BUFFER_SIZE;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    @org.apache.thrift.annotation.Nullable\n    public static _Fields findByName(java.lang.String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final java.lang.String _fieldName;\n    _Fields(short thriftId, java.lang.String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public java.lang.String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  private static final int __BUFFERSIZE_ISSET_ID = 0;\n  private byte __isset_bitfield = 0;\n  private static final _Fields optionals[] = {_Fields.AUTHORIZATIONS,_Fields.RANGE,_Fields.COLUMNS,_Fields.ITERATORS,_Fields.BUFFER_SIZE};\n  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.AUTHORIZATIONS, new org.apache.thrift.meta_data.FieldMetaData(\"authorizations\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, \n            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));\n    tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData(\"range\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Range.class)));\n    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData(\"columns\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, \n            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScanColumn.class))));\n    tmpMap.put(_Fields.ITERATORS, new org.apache.thrift.meta_data.FieldMetaData(\"iterators\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, \n            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IteratorSetting.class))));\n    tmpMap.put(_Fields.BUFFER_SIZE, new org.apache.thrift.meta_data.FieldMetaData(\"bufferSize\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));\n    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScanOptions.class, metaDataMap);\n  }\n<fim_suffix>  public ScanOptions() {\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public ScanOptions(ScanOptions other) {\n    __isset_bitfield = other.__isset_bitfield;\n    if (other.isSetAuthorizations()) {<fim_middle>// function below has no smell\n"}