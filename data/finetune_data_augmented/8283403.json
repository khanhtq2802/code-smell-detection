{"text": "<fim_prefix>/****************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one   *\n * or more contributor license agreements.  See the NOTICE file *\n * distributed with this work for additional information        *\n * regarding copyright ownership.  The ASF licenses this file   *\n * to you under the Apache License, Version 2.0 (the            *\n * \"License\"); you may not use this file except in compliance   *\n * with the License.  You may obtain a copy of the License at   *\n *                                                              *\n *   http://www.apache.org/licenses/LICENSE-2.0                 *\n *                                                              *\n * Unless required by applicable law or agreed to in writing,   *\n * software distributed under the License is distributed on an  *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n * KIND, either express or implied.  See the License for the    *\n * specific language governing permissions and limitations      *\n * under the License.                                           *\n ****************************************************************/\n\npackage org.apache.james.eventsourcing.eventstore.cassandra;\n\nimport java.util.List;\n\nimport javax.inject.Inject;\n\nimport org.apache.james.eventsourcing.AggregateId;\nimport org.apache.james.eventsourcing.Event;\nimport org.apache.james.eventsourcing.eventstore.EventStore;\nimport org.apache.james.eventsourcing.eventstore.EventStoreFailedException;\nimport org.apache.james.eventsourcing.eventstore.History;\n\nimport com.google.common.base.Preconditions;\n\n<fim_suffix>public class CassandraEventStore implements EventStore {\n\n    private final EventStoreDao eventStoreDao;\n\n    @Inject\n    public CassandraEventStore(EventStoreDao eventStoreDao) {\n        this.eventStoreDao = eventStoreDao;\n    }\n\n    @Override\n    public void appendAll(List<Event> events) {\n        if (events.isEmpty()) {\n            return;\n        }\n        doAppendAll(events);\n    }\n\n    public void doAppendAll(List<Event> events) {\n        Preconditions.checkArgument(Event.belongsToSameAggregate(events));\n\n        boolean success = eventStoreDao.appendAll(events).block();\n        if (!success) {\n            throw new EventStoreFailedException(\"Concurrent update to the EventStore detected\");\n        }\n    }\n\n    @Override\n    public History getEventsOfAggregate(AggregateId aggregateId) {\n        return eventStoreDao.getEventsOfAggregate(aggregateId);\n    }\n}<fim_middle>// class below has no smell\n"}