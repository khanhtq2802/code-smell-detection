{"text": "<fim_prefix>/**\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License. \n *  \n */\npackage org.apache.kerby.kerberos.kerb.transport;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Default implementation of {@link KrbTransport} using UDP.\n */\n<fim_suffix>public class KdcUdpTransport extends KrbUdpTransport {\n    private BlockingQueue<ByteBuffer> bufferQueue = new ArrayBlockingQueue<>(2);\n\n    public KdcUdpTransport(DatagramChannel channel, InetSocketAddress remoteAddress) throws IOException {\n        super(remoteAddress);\n        setChannel(channel);\n    }\n\n    @Override\n    public synchronized ByteBuffer receiveMessage() throws IOException {\n        long timeout = 1000; // TODO: configurable or option\n        ByteBuffer message;\n        try {\n            message = bufferQueue.poll(timeout, TimeUnit.MILLISECONDS);\n        } catch (InterruptedException e) {\n            throw new IOException(e);\n        }\n        return message;\n    }\n\n    protected synchronized void onRecvMessage(ByteBuffer message) {\n        if (message != null) {\n            bufferQueue.add(message);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}