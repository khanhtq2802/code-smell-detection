{"text": "<fim_prefix>    DESTINATION((short)2, \"destination\"),\n    /**\n     * \n     * @see DataStageType\n     */\n    TYPE((short)3, \"type\"),\n    TRANSFER_START_TIME((short)4, \"transferStartTime\"),\n    TRANSFER_END_TIME((short)5, \"transferEndTime\"),\n    TRANSFER_RATE((short)6, \"transferRate\"),\n    PROCESS_INPUT((short)7, \"processInput\"),\n    PROCESS_OUTPUT((short)8, \"processOutput\");\n    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n    static {\n      for (_Fields field : EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // SOURCE\n          return SOURCE;\n        case 2: // DESTINATION\n          return DESTINATION;\n        case 3: // TYPE\n          return TYPE;\n        case 4: // TRANSFER_START_TIME\n          return TRANSFER_START_TIME;\n        case 5: // TRANSFER_END_TIME\n          return TRANSFER_END_TIME;\n        case 6: // TRANSFER_RATE\n          return TRANSFER_RATE;\n        case 7: // PROCESS_INPUT\n          return PROCESS_INPUT;\n        case 8: // PROCESS_OUTPUT\n          return PROCESS_OUTPUT;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final String _fieldName;\n    _Fields(short thriftId, String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  private static final int __TRANSFERSTARTTIME_ISSET_ID = 0;\n  private static final int __TRANSFERENDTIME_ISSET_ID = 1;\n  private byte __isset_bitfield = 0;\n  private static final _Fields optionals[] = {_Fields.TRANSFER_START_TIME,_Fields.TRANSFER_END_TIME,_Fields.TRANSFER_RATE,_Fields.PROCESS_INPUT,_Fields.PROCESS_OUTPUT};\n  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData(\"source\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData(\"destination\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData(\"type\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataStageType.class)));\n    tmpMap.put(_Fields.TRANSFER_START_TIME, new org.apache.thrift.meta_data.FieldMetaData(\"transferStartTime\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));\n    tmpMap.put(_Fields.TRANSFER_END_TIME, new org.apache.thrift.meta_data.FieldMetaData(\"transferEndTime\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));\n    tmpMap.put(_Fields.TRANSFER_RATE, new org.apache.thrift.meta_data.FieldMetaData(\"transferRate\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    tmpMap.put(_Fields.PROCESS_INPUT, new org.apache.thrift.meta_data.FieldMetaData(\"processInput\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.application.io.InputDataObjectType.class)));\n    tmpMap.put(_Fields.PROCESS_OUTPUT, new org.apache.thrift.meta_data.FieldMetaData(\"processOutput\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.application.io.OutputDataObjectType.class)));\n    metaDataMap = Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataStagingTaskModel.class, metaDataMap);\n  }\n  public DataStagingTaskModel() {\n  }\n  public DataStagingTaskModel(\n    String source,\n    String destination,\n    DataStageType type)\n  {\n    this();\n    this.source = source;\n    this.destination = destination;\n    this.type = type;\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public DataStagingTaskModel(DataStagingTaskModel other) {\n    __isset_bitfield = other.__isset_bitfield;\n    if (other.isSetSource()) {\n      this.source = other.source;\n    }\n    if (other.isSetDestination()) {\n      this.destination = other.destination;\n    }\n    if (other.isSetType()) {\n      this.type = other.type;\n    }\n    this.transferStartTime = other.transferStartTime;\n    this.transferEndTime = other.transferEndTime;\n    if (other.isSetTransferRate()) {\n      this.transferRate = other.transferRate;\n    }\n    if (other.isSetProcessInput()) {\n      this.processInput = new org.apache.airavata.model.application.io.InputDataObjectType(other.processInput);\n    }\n    if (other.isSetProcessOutput()) {\n      this.processOutput = new org.apache.airavata.model.application.io.OutputDataObjectType(other.processOutput);\n    }\n  }\n  public DataStagingTaskModel deepCopy() {\n    return new DataStagingTaskModel(this);\n  }\n  @Override\n  public void clear() {\n    this.source = null;\n    this.destination = null;\n    this.type = null;\n    setTransferStartTimeIsSet(false);\n    this.transferStartTime = 0;\n    setTransferEndTimeIsSet(false);\n    this.transferEndTime = 0;\n    this.transferRate = null;\n    this.processInput = null;\n    this.processOutput = null;\n  }\n  public String getSource() {\n    return this.source;\n  }\n  public void setSource(String source) {\n    this.source = source;\n  }\n  public void unsetSource() {\n    this.source = null;\n  }\n  /** Returns true if field source is set (has been assigned a value) and false otherwise */\n  public boolean isSetSource() {\n    return this.source != null;\n  }\n  public void setSourceIsSet(boolean value) {\n    if (!value) {\n      this.source = null;\n    }\n  }\n  public String getDestination() {\n    return this.destination;\n  }\n  public void setDestination(String destination) {\n    this.destination = destination;\n  }\n  public void unsetDestination() {\n    this.destination = null;\n  }\n  /** Returns true if field destination is set (has been assigned a value) and false otherwise */\n  public boolean isSetDestination() {\n    return this.destination != null;\n  }\n<fim_suffix>  public void setDestinationIsSet(boolean value) {\n    if (!value) {\n      this.destination = null;\n    }\n  }<fim_middle>// function below has no smell\n"}