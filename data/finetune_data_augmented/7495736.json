{"text": "<fim_prefix>/*\n * Copyright (c) 2017, 2017, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.svm.jni;\n\nimport java.util.function.Predicate;\n\nimport org.graalvm.nativeimage.PinnedObject;\nimport org.graalvm.word.PointerBase;\n\nimport com.oracle.svm.core.threadlocal.FastThreadLocalFactory;\nimport com.oracle.svm.core.threadlocal.FastThreadLocalObject;\n\n/**\n * Manages per-thread lists of pinned objects for safe direct memory access from native code.\n */\npublic class JNIThreadLocalPinnedObjects {\n    private static class PinnedObjectListNode {\n        final PinnedObject object;\n        PinnedObjectListNode next;\n\n        PinnedObjectListNode(PinnedObject object, PinnedObjectListNode next) {\n            this.object = object;\n            this.next = next;\n        }\n    }\n\n    private static final FastThreadLocalObject<PinnedObjectListNode> pinnedObjectsListHead = FastThreadLocalFactory.createObject(PinnedObjectListNode.class);\n\n<fim_suffix>    public static <T extends PointerBase> T pinArrayAndGetAddress(Object array) {\n        PinnedObject pin = PinnedObject.create(array);\n        pinnedObjectsListHead.set(new PinnedObjectListNode(pin, pinnedObjectsListHead.get()));\n        return pin.addressOfArrayElement(0);\n    }\n\n    private static boolean unpinFirst(Predicate<PinnedObjectListNode> p) {\n        PinnedObjectListNode previous = null;\n        PinnedObjectListNode current = pinnedObjectsListHead.get();\n        while (current != null) {\n            if (p.test(current)) {\n                if (previous != null) {\n                    previous.next = current.next;\n                } else {\n                    pinnedObjectsListHead.set(current.next);\n                }\n                current.object.close();\n                return true;\n            }\n            previous = current;\n            current = current.next;\n        }\n        return false;\n    }\n\n    public static boolean unpinObject(Object object) {\n        return unpinFirst(n -> n.object.getObject() == object);\n    }\n\n    public static boolean unpinArrayByAddress(PointerBase address) {\n        return unpinFirst(n -> n.object.getObject().getClass().isArray() && n.object.addressOfArrayElement(0) == address);\n    }\n\n    static int pinnedObjectCount() {\n        int count = 0;\n        PinnedObjectListNode node = pinnedObjectsListHead.get();\n        while (node != null) {\n            count++;\n            node = node.next;\n        }\n        return count;\n    }\n\n}<fim_middle>// function below has no smell\n"}