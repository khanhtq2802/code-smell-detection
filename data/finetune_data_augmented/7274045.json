{"text": "<fim_prefix>                    if (\"true\".equals(auths.get(0))) {  // NOI18N\n                        supplyCredentials(application, proxyClient);\n                    }\n                } else {\n                    // Create a ProxyClient for the remote out-of-the-box\n                    // JMX management agent using the port specified in\n                    // the -Dcom.sun.management.jmxremote.port=<port>\n                    // system property\n                    String jvmArgs = jvmstatModel.getJvmArgs();\n                    StringTokenizer st = new StringTokenizer(jvmArgs);\n                    int port = -1;\n                    boolean authenticate = false;\n                    while (st.hasMoreTokens()) {\n                        String token = st.nextToken();\n                        if (token.startsWith(\"-Dcom.sun.management.jmxremote.port=\")) { // NOI18N\n                            port = Integer.parseInt(token.substring(token.indexOf(\"=\") + 1)); // NOI18N\n                        } else if (token.equals(\"-Dcom.sun.management.jmxremote.authenticate=true\")) { // NOI18N\n                            authenticate = true;\n                        }\n                    }\n                    if (port != -1) {\n                        proxyClient = new ProxyClient(this, application.getHost(), port);\n                        if (authenticate) {\n                            supplyCredentials(application, proxyClient);\n                        }\n                    }\n                }\n            }\n            if (proxyClient != null) {\n                client = proxyClient;\n                removedListener = new ApplicationRemovedListener();\n                availabilityListener = new ApplicationAvailabilityListener();\n                connect(application, proxyClient, removedListener, availabilityListener);\n            }\n        } catch (Exception e) {\n            LOGGER.throwing(JmxModelImpl.class.getName(), \"<init>\", e); // NOI18N\n            client = null;\n        }\n    }\n    /**\n     * Creates an instance of {@code JmxModel} for a {@link JmxApplication}.\n     *\n     * @param application the {@link JmxApplication}.\n     */\n    public JmxModelImpl(JmxApplication application) {\n        try {\n            final ProxyClient proxyClient = new ProxyClient(this, application);\n            client = proxyClient;\n            removedListener = new ApplicationRemovedListener();\n            availabilityListener = new ApplicationAvailabilityListener();\n            connect(application, proxyClient, removedListener, availabilityListener);\n        } catch (Exception e) {\n            LOGGER.throwing(JmxModelImpl.class.getName(), \"<init>\", e); // NOI18N\n            client = null;\n        }\n    }\n    private void connect(Application application, ProxyClient proxyClient,\n            ApplicationRemovedListener listener, ApplicationAvailabilityListener aListener) {\n        while (true) {\n            try {\n                proxyClient.connect();\n                application.notifyWhenRemoved(listener);\n                application.addPropertyChangeListener(Stateful.PROPERTY_STATE, aListener);\n                break;\n            } catch (SecurityException e) {\n                LOGGER.log(Level.INFO, \"connect\", e);   // NOI18N\n                if (proxyClient.hasSSLStubCheck()) {\n                    Storage storage = application.getStorage();\n                    String noSSLProp = JmxApplicationProvider.PROPERTY_RETRY_WITHOUT_SSL;\n                    String noSSL = storage.getCustomProperty(noSSLProp);\n                    if (noSSL != null && Boolean.parseBoolean(noSSL)) { // NOI18N\n                        proxyClient.setInsecure();\n                        continue;\n                    } else {\n                        String conn = storage.getCustomProperty(DataSourceDescriptor.PROPERTY_NAME);\n                        if (conn == null) conn = storage.getCustomProperty(ApplicationType.PROPERTY_SUGGESTED_NAME);\n                        if (conn == null) conn = proxyClient.getUrl().toString();\n                        String msg = NbBundle.getMessage(JmxModelImpl.class, \"MSG_Insecure_SSL\", conn);  // NOI18N\n                        String title = NbBundle.getMessage(JmxModelImpl.class, \"Title_Insecure_SSL\");   // NOI18N\n                        String retry = NbBundle.getMessage(JmxModelImpl.class, \"Retry_Insecure_SSL\");   // NOI18N\n                        JLabel l = new JLabel(msg);\n                        JCheckBox c = new JCheckBox();\n                        Mnemonics.setLocalizedText(c, retry);\n                        c.setSelected(noSSL == null);\n                        JPanel p = new JPanel(new BorderLayout(0, 20));\n                        p.add(l, BorderLayout.CENTER);\n                        p.add(c, BorderLayout.SOUTH);\n                        NotifyDescriptor dd = new NotifyDescriptor.Confirmation(p, title, NotifyDescriptor.YES_NO_OPTION);\n                        if (DialogDisplayer.getDefault().notify(dd) == NotifyDescriptor.YES_OPTION) {\n                            storage.setCustomProperty(noSSLProp, Boolean.toString(c.isSelected()));\n                            proxyClient.setInsecure();\n                            continue;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                if (supplyCredentials(application, proxyClient) == null) {\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     *  Ask for security credentials.\n     */\n    private CredentialsConfigurator supplyCredentials(\n            Application application, ProxyClient proxyClient) {\n        String displayName = application.getStorage().getCustomProperty(DataSourceDescriptor.PROPERTY_NAME);\n        if (displayName == null) displayName = proxyClient.getUrl().toString();\n        CredentialsConfigurator jsc =\n                CredentialsConfigurator.supplyCredentials(displayName);\n        if (jsc != null)\n            proxyClient.setCredentials(jsc.getUsername(), jsc.getPassword());\n        return jsc;\n    }\n    /**\n     * Returns the current connection state.\n     *\n     * @return the current connection state.\n     */\n    public ConnectionState getConnectionState() {\n        if (client != null) {\n            return client.getConnectionState();\n        }\n        return ConnectionState.DISCONNECTED;\n    }\n    /**\n     * Returns the {@link MBeanServerConnection} for the connection to\n     * an application. The returned {@code MBeanServerConnection} object\n     * becomes invalid when the connection state is changed to the\n     * {@link ConnectionState#DISCONNECTED DISCONNECTED} state.\n     *\n     * @return the {@code MBeanServerConnection} for the\n     * connection to an application. It returns {@code null}\n     * if the JMX connection couldn't be established.\n     */\n    public MBeanServerConnection getMBeanServerConnection() {\n        if (client != null) {\n            return client.getMBeanServerConnection();\n        }\n        return null;\n    }\n    /**\n     * Returns the {@link JMXServiceURL} associated to this (@code JmxModel}.\n     *\n     * @return the {@link JMXServiceURL} associated to this (@code JmxModel}.\n     */\n    public JMXServiceURL getJMXServiceURL() {\n        if (client != null) {\n            return client.getUrl();\n        }\n        return null;        \n    }\n    public Properties getSystemProperties() {\n        return getJmxSupport().getSystemProperties();\n    }\n    public boolean takeHeapDump(String fileName) {\n        return getJmxSupport().takeHeapDump(fileName);\n    }\n    public String takeThreadDump() {\n        return getJmxSupport().takeThreadDump();\n    }\n    public String takeThreadDump(long[] threadIds) {\n        return getJmxSupport().takeThreadDump(threadIds);\n    }    \n    public HeapHistogram takeHeapHistogram() {\n        return getJmxSupport().takeHeapHistogram();\n    }\n    public String getFlagValue(String name) {\n        return getJmxSupport().getFlagValue(name);\n    }\n    public void setFlagValue(String name, String value) {\n        getJmxSupport().setFlagValue(name,value);\n    }\n    public boolean isTakeHeapDumpSupported() {\n        JmxSupport support = getJmxSupport();\n        return support.getHotSpotDiagnostic() != null && !support.isReadOnlyConnection();\n    }\n    public boolean isTakeThreadDumpSupported() {\n        JmxSupport support = getJmxSupport();\n        return support.getThreadBean() != null && !support.isReadOnlyConnection();\n    }\n    private JmxSupport getJmxSupport() {\n        synchronized (jmxSupportLock) {\n            if (jmxSupport == null) {\n                jmxSupport = new JmxSupport(this);\n            }\n            return jmxSupport;\n        }\n    }\n    /**\n     * Disconnect from JMX agent when the application is removed.\n     */\n    private class ApplicationRemovedListener implements DataRemovedListener<Application> {\n        public void dataRemoved(Application application) {\n            new RequestProcessor().post(new Runnable() {\n                public void run() {\n                    client.markAsDead();\n                    removedListener = null;\n                }\n            });\n        }\n    }\n    private class ApplicationAvailabilityListener implements PropertyChangeListener {\n<fim_suffix>        public void propertyChange(PropertyChangeEvent evt) {\n            if (!evt.getNewValue().equals(Stateful.STATE_AVAILABLE)) {\n                ((Application)evt.getSource()).removePropertyChangeListener(\n                        Stateful.PROPERTY_STATE, this);\n                client.disconnectImpl(false);\n                availabilityListener = null;\n            }\n        }<fim_middle>// function below has no smell\n"}