{"text": "<fim_prefix>// Copyright 2011, 2012 The Apache Software Foundation\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage org.apache.tapestry5.internal.pageload;\n\nimport org.apache.tapestry5.func.F;\nimport org.apache.tapestry5.func.Mapper;\nimport org.apache.tapestry5.ioc.Resource;\nimport org.apache.tapestry5.ioc.util.LocalizedNameGenerator;\nimport org.apache.tapestry5.model.ComponentModel;\nimport org.apache.tapestry5.services.pageload.ComponentResourceLocator;\nimport org.apache.tapestry5.services.pageload.ComponentResourceSelector;\nimport org.apache.tapestry5.services.templates.ComponentTemplateLocator;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n<fim_suffix>public class DefaultComponentResourceLocator implements ComponentResourceLocator\n{\n    private ComponentTemplateLocator componentTemplateLocator;\n\n    public DefaultComponentResourceLocator(ComponentTemplateLocator componentTemplateLocator)\n    {\n        this.componentTemplateLocator = componentTemplateLocator;\n    }\n\n    public Resource locateTemplate(ComponentModel model, ComponentResourceSelector selector)\n    {\n        // For 5.2 compatibility, this implementation delegates to the older\n        // ComponentTemplateLocator command chain. That may be removed in 5.4.\n\n        return componentTemplateLocator.locateTemplate(model, selector.locale);\n    }\n\n    public List<Resource> locateMessageCatalog(final Resource baseResource, ComponentResourceSelector selector)\n    {\n        String baseName = baseResource.getFile();\n\n        // This is the case for some of the \"virtual resources\" introduced in 5.4\n        if (baseName == null)\n        {\n            return Arrays.asList(baseResource.forLocale(selector.locale));\n        }\n\n        return F.flow(new LocalizedNameGenerator(baseName, selector.locale).iterator()).map(new Mapper<String, Resource>()\n        {\n            public Resource map(String element)\n            {\n                return baseResource.forFile(element);\n            }\n        }).toList();\n    }\n\n}<fim_middle>// class below has no smell\n"}