{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.solr.util.configuration;\n\nimport java.lang.invoke.MethodHandles;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\n\nimport com.google.common.collect.ImmutableMap;\nimport org.apache.solr.util.configuration.providers.EnvSSLCredentialProvider;\nimport org.apache.solr.util.configuration.providers.HadoopSSLCredentialProvider;\nimport org.apache.solr.util.configuration.providers.SysPropSSLCredentialProvider;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Class responsible to build SSL credential providers\n */\n<fim_suffix>public class SSLCredentialProviderFactory {\n  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n  public static final String DEFAULT_PROVIDER_CHAIN = \"env;sysprop\";\n  public static final String PROVIDER_CHAIN_KEY = \"solr.ssl.credential.provider.chain\";\n\n  private final static ImmutableMap<String, Class> defaultProviders = ImmutableMap.of(\n      \"env\", EnvSSLCredentialProvider.class,\n      \"sysprop\", SysPropSSLCredentialProvider.class,\n      \"hadoop\", HadoopSSLCredentialProvider.class\n  );\n\n  private String providerChain;\n\n  public SSLCredentialProviderFactory() {\n    this.providerChain = System.getProperty(PROVIDER_CHAIN_KEY, DEFAULT_PROVIDER_CHAIN);\n  }\n\n  public SSLCredentialProviderFactory(String providerChain) {\n    this.providerChain = providerChain;\n  }\n\n  public List<SSLCredentialProvider> getProviders() {\n    ArrayList<SSLCredentialProvider> providers = new ArrayList<>();\n    log.info(String.format(Locale.ROOT, \"Processing SSL Credential Provider chain: %s\", providerChain));\n    String classPrefix = \"class://\";\n    for (String provider : providerChain.split(\";\")) {\n      if (defaultProviders.containsKey(provider)) {\n        providers.add(getDefaultProvider(defaultProviders.get(provider)));\n      } else if (provider.startsWith(classPrefix)) {\n        providers.add(getProviderByClassName(provider.substring(classPrefix.length())));\n      } else {\n        throw new RuntimeException(\"Unable to parse credential provider: \" + provider);\n      }\n    }\n    return providers;\n  }\n\n  private SSLCredentialProvider getProviderByClassName(String clazzName) {\n    try {\n      return (SSLCredentialProvider) Class.forName(clazzName).getConstructor().newInstance();\n    } catch (InstantiationException | ClassNotFoundException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n      String msg = String.format(Locale.ROOT, \"Could not instantiate %s credential provider\", clazzName);\n      log.error(msg);\n      throw new RuntimeException(msg, e);\n    }\n  }\n\n  private SSLCredentialProvider getDefaultProvider(Class aClass) {\n    try {\n      return (SSLCredentialProvider) aClass.getConstructor().newInstance();\n    } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n      String msg = String.format(Locale.ROOT, \"Could not instantiate %s credential provider\", aClass.getName());\n      log.error(msg);\n      throw new RuntimeException(msg, e);\n    }\n  }\n\n}<fim_middle>// class below has no smell\n"}