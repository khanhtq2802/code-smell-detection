{"text": "<fim_prefix>import org.eclipse.xtext.common.types.JvmVisibility;\nimport org.eclipse.xtext.resource.XtextResource;\nimport org.eclipse.xtext.ui.editor.embedded.EmbeddedEditor;\nimport org.eclipse.xtext.ui.editor.embedded.EmbeddedEditorFactory;\nimport org.eclipse.xtext.ui.editor.embedded.EmbeddedEditorModelAccess;\nimport org.eclipse.xtext.ui.editor.embedded.IEditedResourceProvider;\nimport org.eclipse.xtext.ui.refactoring.impl.ProjectUtil;\nimport org.eclipse.xtext.ui.resource.IResourceSetProvider;\nimport com.google.inject.Inject;\n/**\n * Strongly inspired by JDT's {@link org.eclipse.jdt.internal.ui.refactoring.code.ExtractMethodInputPage}.\n * \n * @author Jan Koehnlein\n */\n@SuppressWarnings(\"restriction\")\npublic class ExtractMethodUserInputPage extends UserInputWizardPage {\n\t@Inject\n\tprivate EmbeddedEditorFactory editorFactory;\n\t@Inject\n\tprivate IResourceSetProvider resourceSetProvider;\n\t@Inject\n\tprivate ProjectUtil projectUtil;\n\tprivate ExtractMethodRefactoring refactoring;\n\tprivate Text textField;\n\tprivate EmbeddedEditor signaturePreview;\n\tprivate EmbeddedEditorModelAccess partialEditor;\n\tprivate boolean isInitialName = true;\n\tprotected ExtractMethodUserInputPage() {\n\t\tsuper(\"ExtractMethodInputPage\");\n\t}\n\tpublic void setRefactoring(ExtractMethodRefactoring refactoring) {\n\t\tthis.refactoring = refactoring;\n\t}\n\t@Override\n\tpublic void createControl(Composite parent) {\n\t\tComposite result = new Composite(parent, SWT.NONE);\n\t\tsetControl(result);\n\t\tGridLayout layout = new GridLayout(2, false);\n\t\tresult.setLayout(layout);\n\t\tinitializeDialogUnits(result);\n\t\tcreateNameField(result);\n\t\tcreateAccessModifierSection(result);\n\t\tcreateParameterControl(result);\n\t\tcreateAdditionalCheckboxes(result);\n\t\tcreateSeparator(result);\n\t\tcreateSignaturePreview(result);\n\t\tDialog.applyDialogFont(result);\n\t}\n\tprotected void createNameField(Composite result) {\n\t\tLabel label = new Label(result, SWT.NONE);\n\t\tlabel.setText(\"Method name:\");\n\t\ttextField = new Text(result, SWT.BORDER);\n\t\ttextField.setText(refactoring.getMethodName());\n\t\ttextField.addModifyListener(new ModifyListener() {\n\t\t\t@Override\n\t\t\tpublic void modifyText(ModifyEvent e) {\n\t\t\t\ttextModified(getText());\n\t\t\t}\n\t\t});\n\t\ttextField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\t}\n\tprotected void createAccessModifierSection(Composite result) {\n\t\tGridLayout layout;\n\t\tLabel label = new Label(result, SWT.NONE);\n\t\tlabel.setText(\"Access modifier:\");\n\t\tComposite group = new Composite(result, SWT.NONE);\n\t\tgroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\t\tlayout = new GridLayout();\n\t\tlayout.numColumns = 3;\n\t\tlayout.marginWidth = 0;\n\t\tgroup.setLayout(layout);\n\t\tString[] labels = new String[] { \"public\", \"protected\", \"private\" };\n\t\tJvmVisibility[] data = new JvmVisibility[] { JvmVisibility.PUBLIC, JvmVisibility.PROTECTED,\n\t\t\t\tJvmVisibility.PRIVATE };\n\t\tJvmVisibility visibility = refactoring.getVisibility();\n\t\tfor (int i = 0; i < labels.length; i++) {\n\t\t\tButton radio = new Button(group, SWT.RADIO);\n\t\t\tradio.setText(labels[i]);\n\t\t\tradio.setData(data[i]);\n\t\t\tif (data[i].equals(visibility))\n\t\t\t\tradio.setSelection(true);\n\t\t\tradio.addSelectionListener(new SelectionAdapter() {\n\t\t\t\t@Override\n\t\t\t\tpublic void widgetSelected(SelectionEvent event) {\n\t\t\t\t\tfinal JvmVisibility selectedModifier = (JvmVisibility) event.widget.getData();\n\t\t\t\t\tvisibilityModified(selectedModifier);\n\t\t\t\t\tupdatePreview();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tprotected void createParameterControl(Composite result) {\n\t\tif (!refactoring.getParameterInfos().isEmpty()) {\n\t\t\tChangeParametersControl cp = new ChangeParametersControl(result, SWT.NONE,\n\t\t\t\t\t\"Parameters\", new IParameterListChangeListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void parameterChanged(ParameterInfo parameter) {\n\t\t\t\t\t\t\tparameterModified();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void parameterListChanged() {\n\t\t\t\t\t\t\tparameterModified();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void parameterAdded(ParameterInfo parameter) {\n\t\t\t\t\t\t\tupdatePreview();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, ChangeParametersControl.Mode.EXTRACT_METHOD);\n\t\t\tGridData gridData = new GridData(GridData.FILL_BOTH);\n\t\t\tgridData.horizontalSpan = 2;\n\t\t\tcp.setLayoutData(gridData);\n\t\t\tcp.setInput(refactoring.getParameterInfos());\n\t\t}\n\t}\n\tprotected void createAdditionalCheckboxes(Composite result) {\n\t\tButton declareReturnTypeButton = new Button(result, SWT.CHECK);\n\t\tdeclareReturnTypeButton.setText(\"Explicitly declare return type\");\n\t\tdeclareReturnTypeButton.addSelectionListener(new SelectionAdapter() {\n\t\t\t@Override\n\t\t\tpublic void widgetSelected(SelectionEvent e) {\n\t\t\t\trefactoring.setExplicitlyDeclareReturnType(((Button)e.widget).getSelection());\n\t\t\t\tupdatePreview();\n\t\t\t}\n\t\t});\n\t\tdeclareReturnTypeButton.setSelection(refactoring.isExplicitlyDeclareReturnType());\n\t\tGridData layoutData = new GridData(GridData.FILL_HORIZONTAL);\n\t\tlayoutData.horizontalSpan = 2;\n\t\tdeclareReturnTypeButton.setLayoutData(layoutData);\n\t}\n\tprotected void createSeparator(Composite result) {\n\t\tLabel label = new Label(result, SWT.SEPARATOR | SWT.HORIZONTAL);\n\t\tGridData layoutData = new GridData(GridData.FILL_HORIZONTAL);\n\t\tlayoutData.horizontalSpan = 2;\n\t\tlabel.setLayoutData(layoutData);\n\t}\n\tprotected void createSignaturePreview(Composite composite) {\n\t\tLabel previewLabel = new Label(composite, SWT.NONE);\n\t\tpreviewLabel.setText(\"Method signature preview:\");\n\t\tGridData gridData = new GridData(SWT.FILL);\n\t\tgridData.horizontalSpan = 2;\n\t\tpreviewLabel.setLayoutData(gridData);\n\t\tsignaturePreview = editorFactory.newEditor(new IEditedResourceProvider() {\n\t\t\t@Override\n\t\t\tpublic XtextResource createResource() {\n\t\t\t\tURI resourceURI = EcoreUtil2.getPlatformResourceOrNormalizedURI(refactoring.getXtendClass()).trimFragment();\n\t\t\t\tIProject project = projectUtil.getProject(resourceURI);\n\t\t\t\tResourceSet resourceSet = resourceSetProvider.get(project);\n\t\t\t\treturn (XtextResource) resourceSet.getResource(resourceURI, true);\n\t\t\t}\n\t\t}).readOnly().withParent(composite);\n\t\tGridData gridData2 = new GridData(GridData.FILL_HORIZONTAL);\n\t\tgridData2.horizontalSpan = 2;\n\t\tsignaturePreview.getViewer().getControl().setLayoutData(gridData2);\n\t\tpartialEditor = signaturePreview.createPartialEditor(getPartialEditorModelPrefix(),\n\t\t\t\trefactoring.getMethodSignature(), getPartialEditorModelSuffix(), true);\n\t}\n\tprotected String getPartialEditorModelPrefix() {\n\t\treturn \"class \" + refactoring.getXtendClass().getName() + \" {\";\n\t}\n\tprotected String getPartialEditorModelSuffix() {\n\t\treturn \"() {} }\";\n\t}\n\tprotected String getText() {\n\t\tif (textField == null)\n\t\t\treturn null;\n\t\treturn textField.getText();\n\t}\n\tprotected void textModified(String text) {\n\t\tisInitialName = false;\n\t\trefactoring.setMethodName(text);\n\t\tRefactoringStatus status = validatePage(true);\n\t\tif (!status.hasFatalError()) {\n\t\t\tupdatePreview();\n\t\t} \n\t\tsetPageComplete(status);\n\t}\n\tprotected void visibilityModified(JvmVisibility visibility) {\n\t\trefactoring.setVisibility(visibility);\n\t\tupdatePreview();\n\t}\n\tprotected void parameterModified() {\n\t\tupdatePreview();\n\t\tRefactoringStatus status = validatePage(false);\n\t\tsetPageComplete(status);\n\t}\n\tprotected void updatePreview() {\n\t\tif (signaturePreview == null)\n\t\t\treturn;\n\t\tString signature = refactoring.getMethodSignature();\n\t\tpartialEditor.updateModel(getPartialEditorModelPrefix(), signature, getPartialEditorModelSuffix());\n\t}\n<fim_suffix>\t@Override\n\tpublic void setVisible(boolean visible) {\n\t\tif (visible) {\n\t\t\tif(isInitialName) \n\t\t\t\tsetPageComplete(false);\n\t\t\telse \n\t\t\t\tsetPageComplete(validatePage(true));\n\t\t\tupdatePreview();\n\t\t\ttextField.setFocus();\n\t\t}\n\t\tsuper.setVisible(visible);\n\t}<fim_middle>// function below has no smell\n"}