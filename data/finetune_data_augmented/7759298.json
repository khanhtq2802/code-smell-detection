{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.druid.indexing.common.actions;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.apache.druid.indexing.common.task.Task;\nimport org.apache.druid.timeline.DataSegment;\nimport org.joda.time.Interval;\n\nimport java.util.List;\n\npublic class SegmentListUnusedAction implements TaskAction<List<DataSegment>>\n{\n  @JsonIgnore\n  private final String dataSource;\n\n  @JsonIgnore\n  private final Interval interval;\n\n  @JsonCreator\n  public SegmentListUnusedAction(\n      @JsonProperty(\"dataSource\") String dataSource,\n      @JsonProperty(\"interval\") Interval interval\n  )\n  {\n    this.dataSource = dataSource;\n    this.interval = interval;\n  }\n\n  @JsonProperty\n  public String getDataSource()\n  {\n    return dataSource;\n  }\n\n  @JsonProperty\n  public Interval getInterval()\n  {\n    return interval;\n  }\n\n  @Override\n  public TypeReference<List<DataSegment>> getReturnTypeReference()\n  {\n    return new TypeReference<List<DataSegment>>() {};\n  }\n\n  @Override\n  public List<DataSegment> perform(Task task, TaskActionToolbox toolbox)\n  {\n    return toolbox.getIndexerMetadataStorageCoordinator().getUnusedSegmentsForInterval(dataSource, interval);\n  }\n\n  @Override\n  public boolean isAudited()\n  {\n    return false;\n  }\n\n<fim_suffix>  @Override\n  public String toString()\n  {\n    return \"SegmentListUnusedAction{\" +\n           \"dataSource='\" + dataSource + '\\'' +\n           \", interval=\" + interval +\n           '}';\n  }\n}<fim_middle>// function below has no smell\n"}