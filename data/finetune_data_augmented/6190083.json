{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.ide.ext.java.client.progressor;\n\nimport static java.lang.System.currentTimeMillis;\n\nimport com.google.inject.Inject;\nimport com.google.inject.Singleton;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.eclipse.che.ide.ext.java.client.inject.factories.ProgressWidgetFactory;\nimport org.eclipse.che.ide.util.Pair;\nimport org.eclipse.che.jdt.ls.extension.api.dto.ProgressReport;\n\n/**\n * Presenter of the window which describes information about all running tasks.\n *\n * @author Valeriy Svydenko\n */\n@Singleton\npublic class ProgressMonitorPresenter {\n  private static final long UPDATE_PERIOD = 1_000L; // don't update more often then 1 sec\n\n  private final ProgressMonitorView view;\n  private final ProgressWidgetFactory progressFactory;\n\n  private Map<String, Pair<ProgressView, Long>> progresses = new HashMap<>();\n\n  @Inject\n  public ProgressMonitorPresenter(ProgressMonitorView view, ProgressWidgetFactory progressFactory) {\n    this.view = view;\n    this.progressFactory = progressFactory;\n  }\n\n  /** Shows the widget. */\n  public void show() {\n    view.showDialog();\n  }\n\n  /**\n   * Updates progress for one task.\n   *\n   * @param progress updated progress\n   */\n  public void updateProgress(ProgressReport progress) {\n    String taskId = progress.getId();\n    if (!progresses.containsKey(taskId)) {\n      return;\n    }\n    Pair<ProgressView, Long> updatedView = progresses.get(taskId);\n    ProgressView progressView = updatedView.getFirst();\n    if (progress.isComplete()) {\n      view.remove(progressView);\n      progresses.remove(taskId);\n      return;\n    }\n    Long updated = updatedView.getSecond();\n    if (currentTimeMillis() - updated < UPDATE_PERIOD) {\n      return;\n    }\n    progressView.updateProgressBar(progress);\n  }\n\n  /** Hides the widget. */\n<fim_suffix>  public void hide() {\n    view.close();\n  }\n\n  /**\n   * Adds new progress.\n   *\n   * @param progress information about progress\n   */\n  public void addProgress(ProgressReport progress) {\n    String taskId = progress.getId();\n    if (progresses.containsKey(taskId)) {\n      updateProgress(progress);\n      return;\n    }\n    ProgressView progressView = progressFactory.create();\n    progressView.updateProgressBar(progress);\n    progresses.put(taskId, Pair.of(progressView, currentTimeMillis()));\n    view.add(progressView);\n  }\n\n  /**\n   * Removes progress.\n   *\n   * @param progress information about progress\n   */\n  public void removeProgress(ProgressReport progress) {\n    String taskId = progress.getId();\n    if (!progresses.containsKey(taskId)) {\n      return;\n    }\n    view.remove(progresses.remove(taskId).getFirst());\n  }\n}<fim_middle>// function below has no smell\n"}