{"text": "<fim_prefix>/*\n * Copyright (c) 2001, 2005, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage jdk.internal.reflect;\n\nimport java.lang.reflect.Field;\n\nclass UnsafeIntegerFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n    UnsafeIntegerFieldAccessorImpl(Field field) {\n        super(field);\n    }\n\n    public Object get(Object obj) throws IllegalArgumentException {\n        return Integer.valueOf(getInt(obj));\n    }\n\n    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n        throw newGetBooleanIllegalArgumentException();\n    }\n\n    public byte getByte(Object obj) throws IllegalArgumentException {\n        throw newGetByteIllegalArgumentException();\n    }\n\n    public char getChar(Object obj) throws IllegalArgumentException {\n        throw newGetCharIllegalArgumentException();\n    }\n\n    public short getShort(Object obj) throws IllegalArgumentException {\n        throw newGetShortIllegalArgumentException();\n    }\n\n    public int getInt(Object obj) throws IllegalArgumentException {\n        ensureObj(obj);\n        return unsafe.getInt(obj, fieldOffset);\n    }\n\n    public long getLong(Object obj) throws IllegalArgumentException {\n        return getInt(obj);\n    }\n\n    public float getFloat(Object obj) throws IllegalArgumentException {\n        return getInt(obj);\n    }\n\n    public double getDouble(Object obj) throws IllegalArgumentException {\n        return getInt(obj);\n    }\n\n<fim_suffix>    public void set(Object obj, Object value)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        ensureObj(obj);\n        if (isFinal) {\n            throwFinalFieldIllegalAccessException(value);\n        }\n        if (value == null) {\n            throwSetIllegalArgumentException(value);\n        }\n        if (value instanceof Byte) {\n            unsafe.putInt(obj, fieldOffset, ((Byte) value).byteValue());\n            return;\n        }\n        if (value instanceof Short) {\n            unsafe.putInt(obj, fieldOffset, ((Short) value).shortValue());\n            return;\n        }\n        if (value instanceof Character) {\n            unsafe.putInt(obj, fieldOffset, ((Character) value).charValue());\n            return;\n        }\n        if (value instanceof Integer) {\n            unsafe.putInt(obj, fieldOffset, ((Integer) value).intValue());\n            return;\n        }\n        throwSetIllegalArgumentException(value);\n    }\n\n    public void setBoolean(Object obj, boolean z)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        throwSetIllegalArgumentException(z);\n    }\n\n    public void setByte(Object obj, byte b)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        setInt(obj, b);\n    }\n\n    public void setChar(Object obj, char c)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        setInt(obj, c);\n    }\n\n    public void setShort(Object obj, short s)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        setInt(obj, s);\n    }\n\n    public void setInt(Object obj, int i)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        ensureObj(obj);\n        if (isFinal) {\n            throwFinalFieldIllegalAccessException(i);\n        }\n        unsafe.putInt(obj, fieldOffset, i);\n    }\n\n    public void setLong(Object obj, long l)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        throwSetIllegalArgumentException(l);\n    }\n\n    public void setFloat(Object obj, float f)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        throwSetIllegalArgumentException(f);\n    }\n\n    public void setDouble(Object obj, double d)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        throwSetIllegalArgumentException(d);\n    }\n}<fim_middle>// function below is long method\n"}