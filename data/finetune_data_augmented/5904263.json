{"text": "<fim_prefix>  {\n    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);\n  }\n  /**\n   *\n   * @param data\n   *\n   *\n   * @see org.w3c.dom.Document\n   */\n  public final Comment createComment(String data)\n  {\n    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);\n  }\n  /**\n   *\n   * @param data\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document\n   */\n  public final CDATASection createCDATASection(String data)\n    throws DOMException\n  {\n    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);\n  }\n  /**\n   *\n   * @param target\n   * @param data\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document\n   */\n  public final ProcessingInstruction createProcessingInstruction(\n                                                                 String target, String data) throws DOMException\n  {\n    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);\n  }\n  /**\n   *\n   * @param name\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document\n   */\n  public final Attr createAttribute(String name) throws DOMException\n  {\n    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);\n  }\n  /**\n   *\n   * @param name\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document\n   */\n  public final EntityReference createEntityReference(String name)\n    throws DOMException\n  {\n    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);\n  }\n  /**\n   *\n   * @param tagname\n   *\n   *\n   * @see org.w3c.dom.Document\n   */\n  public final NodeList getElementsByTagName(String tagname) \n  {\n       Vector listVector = new Vector();\n       Node retNode = dtm.getNode(node);\n       if (retNode != null) \n       {\n         boolean isTagNameWildCard = \"*\".equals(tagname);\n         if (DTM.ELEMENT_NODE == retNode.getNodeType()) \n         {\n           NodeList nodeList = retNode.getChildNodes();\n           for (int i = 0; i < nodeList.getLength(); i++) \n           {\n             traverseChildren(listVector, nodeList.item(i), tagname,\n                              isTagNameWildCard);\n           }\n         } else if (DTM.DOCUMENT_NODE == retNode.getNodeType()) {\n           traverseChildren(listVector, dtm.getNode(node), tagname,\n                            isTagNameWildCard);\n         }\n       }\n       int size = listVector.size();\n       NodeSet nodeSet = new NodeSet(size);\n       for (int i = 0; i < size; i++) \n       {\n         nodeSet.addNode((Node) listVector.elementAt(i));\n       }\n       return (NodeList) nodeSet;\n  }\n  /**\n   * \n   * @param listVector\n   * @param tempNode\n   * @param tagname\n   * @param isTagNameWildCard\n   * \n   * \n   * Private method to be used for recursive iterations to obtain elements by tag name.\n   */\n  private final void traverseChildren\n  (\n    Vector listVector,\n    Node tempNode,\n    String tagname,\n    boolean isTagNameWildCard) {\n    if (tempNode == null) \n    {\n      return;\n    } \n    else\n    { \n      if (tempNode.getNodeType() == DTM.ELEMENT_NODE\n            && (isTagNameWildCard || tempNode.getNodeName().equals(tagname)))\n      {\n        listVector.add(tempNode);\n      }\n      if(tempNode.hasChildNodes())\n      {\n        NodeList nodeList = tempNode.getChildNodes();\n        for (int i = 0; i < nodeList.getLength(); i++)\n        {\n          traverseChildren(listVector, nodeList.item(i), tagname,\n                           isTagNameWildCard);\n        }\n      }\n    }\n  }\n  /**\n   *\n   * @param importedNode\n   * @param deep\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document as of DOM Level 2 -- DTMNodeProxy is read-only\n   */\n  public final Node importNode(Node importedNode, boolean deep)\n    throws DOMException\n  {\n    throw new DTMDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR);\n  }\n  /**\n   *\n   * @param namespaceURI\n   * @param qualifiedName\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document as of DOM Level 2\n   */\n  public final Element createElementNS(\n                                       String namespaceURI, String qualifiedName) throws DOMException\n  {\n    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);\n  }\n  /**\n   *\n   * @param namespaceURI\n   * @param qualifiedName\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Document as of DOM Level 2\n   */\n  public final Attr createAttributeNS(\n                                      String namespaceURI, String qualifiedName) throws DOMException\n  {\n    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);\n  }\n  /**\n   *\n   * @param namespaceURI\n   * @param localName\n   *\n   *\n   * @see org.w3c.dom.Document as of DOM Level 2\n   */\n  public final NodeList getElementsByTagNameNS(String namespaceURI,\n                                               String localName)\n  {\n    Vector listVector = new Vector();\n    Node retNode = dtm.getNode(node);\n    if (retNode != null)\n    {               \n      boolean isNamespaceURIWildCard = \"*\".equals(namespaceURI);\n      boolean isLocalNameWildCard    = \"*\".equals(localName);\n      if (DTM.ELEMENT_NODE == retNode.getNodeType())\n      {\n        NodeList nodeList = retNode.getChildNodes();                    \n        for(int i = 0; i < nodeList.getLength(); i++)\n        {\n          traverseChildren(listVector, nodeList.item(i), namespaceURI, localName, isNamespaceURIWildCard, isLocalNameWildCard);\n        }\n      }\n      else if(DTM.DOCUMENT_NODE == retNode.getNodeType())\n      {\n        traverseChildren(listVector, dtm.getNode(node), namespaceURI, localName, isNamespaceURIWildCard, isLocalNameWildCard);\n      }\n    }\n    int size = listVector.size();\n    NodeSet nodeSet = new NodeSet(size);\n    for (int i = 0; i < size; i++)\n    {\n      nodeSet.addNode((Node)listVector.elementAt(i));\n    }\n    return (NodeList) nodeSet;\n  }\n  /**\n   * \n   * @param listVector\n   * @param tempNode\n   * @param namespaceURI\n   * @param localname\n   * @param isNamespaceURIWildCard\n   * @param isLocalNameWildCard\n   * \n   * Private method to be used for recursive iterations to obtain elements by tag name \n   * and namespaceURI.\n   */\n  private final void traverseChildren\n  (\n   Vector listVector, \n   Node tempNode, \n   String namespaceURI, \n   String localname,\n   boolean isNamespaceURIWildCard,\n   boolean isLocalNameWildCard) \n   {\n    if (tempNode == null)\n    {\n      return;\n    }\n    else \n    {\n      if (tempNode.getNodeType() == DTM.ELEMENT_NODE\n              && (isLocalNameWildCard\n                      || tempNode.getLocalName().equals(localname)))\n      {         \n        String nsURI = tempNode.getNamespaceURI();\n        if ((namespaceURI == null && nsURI == null)\n               || isNamespaceURIWildCard\n               || (namespaceURI != null && namespaceURI.equals(nsURI)))\n        {     \n          listVector.add(tempNode); \n        } \n      }\n      if(tempNode.hasChildNodes())\n      {\n        NodeList nl = tempNode.getChildNodes();                 \n        for(int i = 0; i < nl.getLength(); i++)\n        {\n          traverseChildren(listVector, nl.item(i), namespaceURI, localname,\n                           isNamespaceURIWildCard, isLocalNameWildCard);\n        }\n      }\n    }\n  }\n  /**\n   *\n   * @param elementId\n   *\n   *\n   * @see org.w3c.dom.Document as of DOM Level 2\n   */\n  public final Element getElementById(String elementId)\n  {\n       return (Element) dtm.getNode(dtm.getElementById(elementId));\n  }\n  /**\n   *\n   * @param offset\n   *\n   *\n   *\n   * @throws DOMException\n   * @see org.w3c.dom.Text\n   */\n<fim_suffix>  public final Text splitText(int offset) throws DOMException\n  {\n    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);\n  }<fim_middle>// function below has no smell\n"}