{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2009 itemis AG (http://www.itemis.eu) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *******************************************************************************/\npackage org.eclipse.xtext.common.types.access;\n\nimport org.eclipse.emf.ecore.resource.ResourceSet;\nimport org.eclipse.xtext.common.types.access.impl.ClasspathTypeProvider;\nimport org.eclipse.xtext.common.types.access.impl.TypeResourceServices;\nimport org.eclipse.xtext.resource.XtextResourceSet;\n\nimport com.google.inject.Inject;\n\n/**\n * @author Sebastian Zarnekow - Initial contribution and API\n */\n<fim_suffix>public class ClasspathTypeProviderFactory extends AbstractTypeProviderFactory {\n\n\tprivate final ClassLoader classLoader;\n\tprotected final TypeResourceServices services;\n\t\n\t@Inject\n\tpublic ClasspathTypeProviderFactory(ClassLoader classLoader, TypeResourceServices services) {\n\t\tthis.classLoader = classLoader;\n\t\tthis.services = services;\n\t}\n\t\n\t@Override\n\tpublic ClasspathTypeProvider createTypeProvider(ResourceSet resourceSet) {\n\t\tif (resourceSet == null)\n\t\t\tthrow new IllegalArgumentException(\"resourceSet may not be null.\");\n\t\tClasspathTypeProvider result = createClasspathTypeProvider(resourceSet);\n\t\treturn result;\n\t}\n\n\tprotected ClasspathTypeProvider createClasspathTypeProvider(ResourceSet resourceSet) {\n\t\treturn new ClasspathTypeProvider(getClassLoader(resourceSet), resourceSet, getIndexedJvmTypeAccess(), services);\n\t}\n\t\n\tpublic ClassLoader getClassLoader(ResourceSet resourceSet) {\n\t\tif (resourceSet instanceof XtextResourceSet) {\n\t\t\tXtextResourceSet xtextResourceSet = (XtextResourceSet) resourceSet;\n\t\t\tObject ctx = xtextResourceSet.getClasspathURIContext();\n\t\t\tif (ctx != null) {\n\t\t        if (ctx instanceof Class<?>) {\n\t\t            return ((Class<?>)ctx).getClassLoader();\n\t\t        }\n\t\t        if (!(ctx instanceof ClassLoader)) {\n\t\t        \treturn ctx.getClass().getClassLoader();\n\t\t        }\n\t\t        return (ClassLoader) ctx;\n\t\t\t}\n\t\t}\n\t\treturn classLoader;\n\t}\n\t\n\tboolean isDefaultClassLoader(ClassLoader loader) {\n\t\treturn classLoader == loader;\n\t}\n\t\n\t@Override\n\tpublic ClasspathTypeProvider createTypeProvider() {\n\t\treturn (ClasspathTypeProvider) super.createTypeProvider();\n\t}\n\t\n\t@Override\n\tpublic IJvmTypeProvider findTypeProvider(ResourceSet resourceSet) {\n\t\treturn super.findTypeProvider(resourceSet);\n\t}\n\t\n}<fim_middle>// class below has no smell\n"}