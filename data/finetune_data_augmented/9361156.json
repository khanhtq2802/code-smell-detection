{"text": "<fim_prefix>/*\n * Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage java.awt.geom;\nimport java.awt.Shape;\nimport java.awt.Rectangle;\nimport java.beans.Transient;\n/**\n * {@code RectangularShape} is the base class for a number of\n * {@link Shape} objects whose geometry is defined by a rectangular frame.\n * This class does not directly specify any specific geometry by\n * itself, but merely provides manipulation methods inherited by\n * a whole category of {@code Shape} objects.\n * The manipulation methods provided by this class can be used to\n * query and modify the rectangular frame, which provides a reference\n * for the subclasses to define their geometry.\n *\n * @author      Jim Graham\n * @since 1.2\n */\npublic abstract class RectangularShape implements Shape, Cloneable {\n    /**\n     * This is an abstract class that cannot be instantiated directly.\n     *\n     * @see Arc2D\n     * @see Ellipse2D\n     * @see Rectangle2D\n     * @see RoundRectangle2D\n     * @since 1.2\n     */\n    protected RectangularShape() {\n    }\n    /**\n     * Returns the X coordinate of the upper-left corner of\n     * the framing rectangle in {@code double} precision.\n     * @return the X coordinate of the upper-left corner of\n     * the framing rectangle.\n     * @since 1.2\n     */\n    public abstract double getX();\n    /**\n     * Returns the Y coordinate of the upper-left corner of\n     * the framing rectangle in {@code double} precision.\n     * @return the Y coordinate of the upper-left corner of\n     * the framing rectangle.\n     * @since 1.2\n     */\n    public abstract double getY();\n    /**\n     * Returns the width of the framing rectangle in\n     * {@code double} precision.\n     * @return the width of the framing rectangle.\n     * @since 1.2\n     */\n    public abstract double getWidth();\n    /**\n     * Returns the height of the framing rectangle\n     * in {@code double} precision.\n     * @return the height of the framing rectangle.\n     * @since 1.2\n     */\n    public abstract double getHeight();\n    /**\n     * Returns the smallest X coordinate of the framing\n     * rectangle of the {@code Shape} in {@code double}\n     * precision.\n     * @return the smallest X coordinate of the framing\n     *          rectangle of the {@code Shape}.\n     * @since 1.2\n     */\n    public double getMinX() {\n        return getX();\n    }\n    /**\n     * Returns the smallest Y coordinate of the framing\n     * rectangle of the {@code Shape} in {@code double}\n     * precision.\n     * @return the smallest Y coordinate of the framing\n     *          rectangle of the {@code Shape}.\n     * @since 1.2\n     */\n    public double getMinY() {\n        return getY();\n    }\n    /**\n     * Returns the largest X coordinate of the framing\n     * rectangle of the {@code Shape} in {@code double}\n     * precision.\n     * @return the largest X coordinate of the framing\n     *          rectangle of the {@code Shape}.\n     * @since 1.2\n     */\n    public double getMaxX() {\n        return getX() + getWidth();\n    }\n    /**\n     * Returns the largest Y coordinate of the framing\n     * rectangle of the {@code Shape} in {@code double}\n     * precision.\n     * @return the largest Y coordinate of the framing\n     *          rectangle of the {@code Shape}.\n     * @since 1.2\n     */\n    public double getMaxY() {\n        return getY() + getHeight();\n    }\n    /**\n     * Returns the X coordinate of the center of the framing\n     * rectangle of the {@code Shape} in {@code double}\n     * precision.\n     * @return the X coordinate of the center of the framing rectangle\n     *          of the {@code Shape}.\n     * @since 1.2\n     */\n    public double getCenterX() {\n        return getX() + getWidth() / 2.0;\n    }\n    /**\n     * Returns the Y coordinate of the center of the framing\n     * rectangle of the {@code Shape} in {@code double}\n     * precision.\n     * @return the Y coordinate of the center of the framing rectangle\n     *          of the {@code Shape}.\n     * @since 1.2\n     */\n    public double getCenterY() {\n        return getY() + getHeight() / 2.0;\n    }\n    /**\n     * Returns the framing {@link Rectangle2D}\n     * that defines the overall shape of this object.\n     * @return a {@code Rectangle2D}, specified in\n     * {@code double} coordinates.\n     * @see #setFrame(double, double, double, double)\n     * @see #setFrame(Point2D, Dimension2D)\n     * @see #setFrame(Rectangle2D)\n     * @since 1.2\n     */\n<fim_suffix>    @Transient\n    public Rectangle2D getFrame() {\n        return new Rectangle2D.Double(getX(), getY(), getWidth(), getHeight());\n    }\n    /**\n     * Determines whether the {@code RectangularShape} is empty.\n     * When the {@code RectangularShape} is empty, it encloses no\n     * area.\n     * @return {@code true} if the {@code RectangularShape} is empty;\n     *          {@code false} otherwise.\n     * @since 1.2\n     */\n    public abstract boolean isEmpty();\n    /**\n     * Sets the location and size of the framing rectangle of this\n     * {@code Shape} to the specified rectangular values.\n     *\n     * @param x the X coordinate of the upper-left corner of the\n     *          specified rectangular shape\n     * @param y the Y coordinate of the upper-left corner of the\n     *          specified rectangular shape\n     * @param w the width of the specified rectangular shape\n     * @param h the height of the specified rectangular shape\n     * @see #getFrame\n     * @since 1.2\n     */\n    public abstract void setFrame(double x, double y, double w, double h);\n    /**\n     * Sets the location and size of the framing rectangle of this\n     * {@code Shape} to the specified {@link Point2D} and\n     * {@link Dimension2D}, respectively.  The framing rectangle is used\n     * by the subclasses of {@code RectangularShape} to define\n     * their geometry.\n     * @param loc the specified {@code Point2D}\n     * @param size the specified {@code Dimension2D}\n     * @see #getFrame\n     * @since 1.2\n     */\n    public void setFrame(Point2D loc, Dimension2D size) {\n        setFrame(loc.getX(), loc.getY(), size.getWidth(), size.getHeight());\n    }\n    /**\n     * Sets the framing rectangle of this {@code Shape} to\n     * be the specified {@code Rectangle2D}.  The framing rectangle is\n     * used by the subclasses of {@code RectangularShape} to define\n     * their geometry.\n     * @param r the specified {@code Rectangle2D}\n     * @see #getFrame\n     * @since 1.2\n     */\n    public void setFrame(Rectangle2D r) {\n        setFrame(r.getX(), r.getY(), r.getWidth(), r.getHeight());\n    }\n    /**\n     * Sets the diagonal of the framing rectangle of this {@code Shape}\n     * based on the two specified coordinates.  The framing rectangle is\n     * used by the subclasses of {@code RectangularShape} to define\n     * their geometry.\n     *\n     * @param x1 the X coordinate of the start point of the specified diagonal\n     * @param y1 the Y coordinate of the start point of the specified diagonal\n     * @param x2 the X coordinate of the end point of the specified diagonal\n     * @param y2 the Y coordinate of the end point of the specified diagonal<fim_middle>// function below has no smell\n"}