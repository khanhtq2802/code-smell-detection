{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.apache.tools.ant;\n\nimport java.io.File;\n\n/**\n * An interface used to describe the actions required of any type of\n * directory scanner.\n *\n */\n<fim_suffix>public interface FileScanner {\n    /**\n     * Adds default exclusions to the current exclusions set.\n     */\n    void addDefaultExcludes();\n\n    /**\n     * Returns the base directory to be scanned.\n     * This is the directory which is scanned recursively.\n     *\n     * @return the base directory to be scanned\n     */\n    File getBasedir();\n\n    /**\n     * Returns the names of the directories which matched at least one of the\n     * include patterns and at least one of the exclude patterns.\n     * The names are relative to the base directory.\n     *\n     * @return the names of the directories which matched at least one of the\n     * include patterns and at least one of the exclude patterns.\n     */\n    String[] getExcludedDirectories();\n\n    /**\n     * Returns the names of the files which matched at least one of the\n     * include patterns and at least one of the exclude patterns.\n     * The names are relative to the base directory.\n     *\n     * @return the names of the files which matched at least one of the\n     *         include patterns and at least one of the exclude patterns.\n     *\n     */\n    String[] getExcludedFiles();\n\n    /**\n     * Returns the names of the directories which matched at least one of the\n     * include patterns and none of the exclude patterns.\n     * The names are relative to the base directory.\n     *\n     * @return the names of the directories which matched at least one of the\n     * include patterns and none of the exclude patterns.\n     */\n    String[] getIncludedDirectories();\n\n    /**\n     * Returns the names of the files which matched at least one of the\n     * include patterns and none of the exclude patterns.\n     * The names are relative to the base directory.\n     *\n     * @return the names of the files which matched at least one of the\n     *         include patterns and none of the exclude patterns.\n     */\n    String[] getIncludedFiles();\n\n    /**\n     * Returns the names of the directories which matched none of the include\n     * patterns. The names are relative to the base directory.\n     *\n     * @return the names of the directories which matched none of the include\n     * patterns.\n     */\n    String[] getNotIncludedDirectories();\n\n    /**\n     * Returns the names of the files which matched none of the include\n     * patterns. The names are relative to the base directory.\n     *\n     * @return the names of the files which matched none of the include\n     *         patterns.\n     */\n    String[] getNotIncludedFiles();\n\n    /**\n     * Scans the base directory for files which match at least one include\n     * pattern and don't match any exclude patterns.\n     *\n     * @exception IllegalStateException if the base directory was set\n     *            incorrectly (i.e. if it is <code>null</code>, doesn't exist,\n     *            or isn't a directory).\n     */\n    void scan() throws IllegalStateException;\n\n    /**\n     * Sets the base directory to be scanned. This is the directory which is\n     * scanned recursively. All '/' and '\\' characters should be replaced by\n     * <code>File.separatorChar</code>, so the separator used need not match\n     * <code>File.separatorChar</code>.\n     *\n     * @param basedir The base directory to scan.\n     *                Must not be <code>null</code>.\n     */\n    void setBasedir(String basedir);\n\n    /**\n     * Sets the base directory to be scanned. This is the directory which is\n     * scanned recursively.\n     *\n     * @param basedir The base directory for scanning.\n     *                Should not be <code>null</code>.\n     */\n    void setBasedir(File basedir);\n\n    /**\n     * Sets the list of exclude patterns to use.\n     *\n     * @param excludes A list of exclude patterns.\n     *                 May be <code>null</code>, indicating that no files\n     *                 should be excluded. If a non-<code>null</code> list is\n     *                 given, all elements must be non-<code>null</code>.\n     */\n    void setExcludes(String[] excludes);\n\n    /**\n     * Sets the list of include patterns to use.\n     *\n     * @param includes A list of include patterns.\n     *                 May be <code>null</code>, indicating that all files\n     *                 should be included. If a non-<code>null</code>\n     *                 list is given, all elements must be\n     * non-<code>null</code>.\n     */\n    void setIncludes(String[] includes);\n\n    /**\n     * Sets whether or not the file system should be regarded as case sensitive.\n     *\n     * @param isCaseSensitive whether or not the file system should be\n     *                        regarded as a case sensitive one\n     */\n    void setCaseSensitive(boolean isCaseSensitive);\n}<fim_middle>// class below has no smell\n"}