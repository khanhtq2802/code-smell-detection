{"text": "<fim_prefix>            // after the label\n            String serviceInfo = null;\n            if ( info.startsWith( \"/\" ) )\n            {\n                serviceInfo = info.substring( 1 );\n            }\n            if ( serviceInfo == null || serviceInfo.length() == 0 )\n            {\n                service = null;\n                serviceRequested = false;\n            }\n            else\n            {\n                service = getServiceById( serviceInfo );\n                serviceRequested = true;\n            }\n            request.setAttribute( ServicesServlet.class.getName(), this );\n        }\n    }\n    static RequestInfo getRequestInfo( final HttpServletRequest request )\n    {\n        return ( RequestInfo ) request.getAttribute( ServicesServlet.class.getName() );\n    }\n    /** the label for the services plugin */\n    public static final String LABEL = \"services\"; //$NON-NLS-1$\n    private static final String TITLE = \"%services.pluginTitle\"; //$NON-NLS-1$\n    private static final String CSS[] = null;\n    // an LDAP filter, that is used to search services\n    private static final String FILTER_PARAM = \"filter\";\n    private final String TEMPLATE;\n    /** Default constructor */\n    public ServicesServlet() {\n        super(LABEL, TITLE, CATEGORY_OSGI, CSS);\n        // load templates\n        TEMPLATE = readTemplateFile( \"/templates/services.html\" ); //$NON-NLS-1$\n    }\n    private ServiceRegistration bipReg;\n    public void activate(BundleContext bundleContext)\n    {\n        super.activate(bundleContext);\n        bipReg = new ServicesUsedInfoProvider( bundleContext.getBundle() ).register( bundleContext );\n    }\n    public void deactivate() {\n        if ( null != bipReg )\n        {\n            bipReg.unregister();\n            bipReg = null;\n        }\n        super.deactivate();\n    }\n    final ServiceReference getServiceById( String pathInfo )\n    {\n        // only use last part of the pathInfo\n        pathInfo = pathInfo.substring( pathInfo.lastIndexOf( '/' ) + 1 );\n        StringBuffer filter = new StringBuffer();\n        filter.append( \"(\" ).append( Constants.SERVICE_ID ).append( \"=\" );\n        filter.append( pathInfo ).append( \")\" );\n        String filterStr = filter.toString();\n        try\n        {\n            ServiceReference[] refs = BundleContextUtil.getWorkingBundleContext(this.getBundleContext()).getAllServiceReferences( null, filterStr );\n            if ( refs == null || refs.length != 1 )\n            {\n                return null;\n            }\n            return refs[0];\n        }\n        catch ( InvalidSyntaxException e )\n        {\n            log( \"Unable to search for services using filter \" + filterStr, e );\n            // this shouldn't happen\n            return null;\n        }\n    }\n    private final ServiceReference[] getServices(String filter)\n    {\n        // empty filter string will return nothing, must set it to null to return all services\n        if (filter != null && filter.trim().length() == 0) {\n            filter = null;\n        }\n        try\n        {\n            final ServiceReference[] refs = BundleContextUtil.getWorkingBundleContext(this.getBundleContext()).getAllServiceReferences( null, filter );\n            if ( refs != null )\n            {\n                return refs;\n            }\n        }\n        catch ( InvalidSyntaxException e )\n        {\n            log( \"Unable to access service reference list.\", e );\n        }\n        // no services or invalid filter syntax (unlikely)\n        return NO_REFS;\n    }\n    static final String getStatusLine( final ServiceReference[] services )\n    {\n        final int count = services.length;\n        final StringBuffer buffer = new StringBuffer();\n        buffer.append( count );\n        buffer.append( \" service\" );\n        if ( count != 1 )\n            buffer.append( 's' );\n        buffer.append( \" in total\" );\n        return buffer.toString();\n    }\n    static final String propertyAsString( ServiceReference ref, String name )\n    {\n        final Object value = ref.getProperty( name );\n        return WebConsoleUtil.toString( value );\n    }\n    private void renderJSON( final HttpServletResponse response, final ServiceReference service, final Locale locale )\n            throws IOException\n    {\n        response.setContentType( \"application/json\" );\n        response.setCharacterEncoding( \"UTF-8\" );\n        final PrintWriter pw = response.getWriter();\n        writeJSON( pw, service, locale, null);\n    }\n    private void keyVal( JSONWriter jw, String key, Object val) throws IOException\n    {\n        if ( val != null )\n        {\n            jw.object();\n            jw.key(\"key\").value(key);\n            jw.key(\"value\").value(val);\n            jw.endObject();\n        }\n    }\n    private void serviceDetails( JSONWriter jw, ServiceReference service ) throws IOException\n    {\n        String[] keys = service.getPropertyKeys();\n        jw.key( \"props\" );\n        jw.array();\n        for ( int i = 0; i < keys.length; i++ )\n        {\n            String key = keys[i];\n            if ( Constants.SERVICE_PID.equals( key ) )\n            {\n                keyVal(jw, \"Service PID\", service.getProperty( key ));\n            }\n            else if ( Constants.SERVICE_DESCRIPTION.equals( key ) )\n            {\n                keyVal(jw, \"Service Description\", service.getProperty( key ));\n            }\n            else if ( Constants.SERVICE_VENDOR.equals( key ) )\n            {\n                keyVal(jw, \"Service Vendor\", service.getProperty( key ));\n            }\n            else if ( !Constants.OBJECTCLASS.equals( key ) && !Constants.SERVICE_ID.equals( key ) )\n            {\n                keyVal(jw, key, service.getProperty( key ));\n            }\n        }\n        jw.endArray();\n    }\n    private void usingBundles( JSONWriter jw, ServiceReference service, Locale locale ) throws IOException\n    {\n        jw.key( \"usingBundles\" );\n        jw.array();\n        Bundle[] usingBundles = service.getUsingBundles();\n        if ( usingBundles != null )\n        {\n            for ( int i = 0; i < usingBundles.length; i++ )\n            {\n                jw.object();\n                bundleInfo( jw, usingBundles[i], locale );\n                jw.endObject();\n            }\n        }\n        jw.endArray();\n    }\n    private void serviceInfo( JSONWriter jw, ServiceReference service, boolean details, final Locale locale )\n            throws IOException\n    {\n        jw.object();\n        jw.key( \"id\" );\n        jw.value( propertyAsString( service, Constants.SERVICE_ID ) );\n        jw.key( \"types\" );\n        jw.value( propertyAsString( service, Constants.OBJECTCLASS ) );\n        jw.key( \"pid\" );\n        jw.value( propertyAsString( service, Constants.SERVICE_PID ) );\n        jw.key( \"ranking\" );\n        final Object ranking = service.getProperty(Constants.SERVICE_RANKING);\n        if ( ranking != null )\n        {\n            jw.value( ranking.toString() );\n        }\n        else\n        {\n            jw.value(\"\");\n        }\n        bundleInfo( jw, service.getBundle(), locale );\n        if ( details )\n        {\n            serviceDetails( jw, service );\n            usingBundles( jw, service, locale );\n        }\n        jw.endObject();\n    }\n    private void bundleInfo( final JSONWriter jw, final Bundle bundle, final Locale locale )\n            throws IOException\n    {\n        jw.key( \"bundleId\" );\n        jw.value( bundle.getBundleId() );\n        jw.key( \"bundleName\" );\n        jw.value( Util.getName( bundle, locale ) );\n        jw.key( \"bundleVersion\" );\n        jw.value( Util.getHeaderValue( bundle, Constants.BUNDLE_VERSION ) );\n        jw.key( \"bundleSymbolicName\" );\n        jw.value( bundle.getSymbolicName() );\n    }\n    private void writeJSON(final Writer pw, final ServiceReference service, final Locale locale, final String filter) throws IOException\n    {\n        writeJSON( pw, service, false, locale, filter );\n    }\n<fim_suffix>    private void writeJSON( final Writer pw, final ServiceReference service, final boolean fullDetails, final Locale locale, final String filter )\n            throws IOException\n    {\n        final ServiceReference[] allServices = this.getServices(filter);\n        final String statusLine = getStatusLine( allServices );\n        final ServiceReference[] services = ( service != null ) ? new ServiceReference[]\n                { service } : allServices;\n                final JSONWriter jw = new JSONWriter( pw );\n                jw.object();\n                jw.key( \"status\" );\n                jw.value( statusLine );\n                jw.key( \"serviceCount\" );\n                jw.value( allServices.length );\n                jw.key( \"data\" );\n                jw.array();\n                for ( int i = 0; i < services.length; i++ )\n                {\n                    serviceInfo( jw, services[i], fullDetails || service != null, locale );\n                }\n                jw.endArray();\n                jw.endObject();\n    }<fim_middle>// function below is feature envy and long method\n"}