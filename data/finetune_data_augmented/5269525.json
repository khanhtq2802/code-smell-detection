{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage opennlp.tools.formats.ad;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\n\nimport opennlp.tools.cmdline.ArgumentParser;\nimport opennlp.tools.cmdline.ArgumentParser.OptionalParameter;\nimport opennlp.tools.cmdline.ArgumentParser.ParameterDescription;\nimport opennlp.tools.cmdline.CmdLineUtil;\nimport opennlp.tools.cmdline.StreamFactoryRegistry;\nimport opennlp.tools.formats.LanguageSampleStreamFactory;\nimport opennlp.tools.namefind.NameSample;\nimport opennlp.tools.util.InputStreamFactory;\nimport opennlp.tools.util.ObjectStream;\nimport opennlp.tools.util.PlainTextByLineStream;\n\n/**\n * A Factory to create a Arvores Deitadas NameSampleDataStream from the command line\n * utility.\n * <p>\n * <b>Note:</b> Do not use this class, internal use only!\n */\npublic class ADNameSampleStreamFactory extends LanguageSampleStreamFactory<NameSample> {\n\n<fim_suffix>  interface Parameters {\n    //all have to be repeated, because encoding is not optional,\n    //according to the check if (encoding == null) { below (now removed)\n    @ParameterDescription(valueName = \"charsetName\",\n        description = \"encoding for reading and writing text, if absent the system default is used.\")\n    Charset getEncoding();\n\n    @ParameterDescription(valueName = \"sampleData\", description = \"data to be used, usually a file name.\")\n    File getData();\n\n    @ParameterDescription(valueName = \"split\",\n        description = \"if true all hyphenated tokens will be separated (default true)\")\n    @OptionalParameter(defaultValue = \"true\")\n    Boolean getSplitHyphenatedTokens();\n\n    @ParameterDescription(valueName = \"language\", description = \"language which is being processed.\")\n    String getLang();\n  }\n\n  public static void registerFactory() {\n    StreamFactoryRegistry.registerFactory(NameSample.class,\n        \"ad\", new ADNameSampleStreamFactory(Parameters.class));\n  }\n\n  protected <P> ADNameSampleStreamFactory(Class<P> params) {\n    super(params);\n  }\n\n  public ObjectStream<NameSample> create(String[] args) {\n\n    Parameters params = ArgumentParser.parse(args, Parameters.class);\n\n    language = params.getLang();\n\n    InputStreamFactory sampleDataIn = CmdLineUtil.createInputStreamFactory(params.getData());\n\n    ObjectStream<String> lineStream = null;\n    try {\n      lineStream = new PlainTextByLineStream(sampleDataIn, params.getEncoding());\n    } catch (IOException ex) {\n      CmdLineUtil.handleCreateObjectStreamError(ex);\n    }\n\n    return new ADNameSampleStream(lineStream, params.getSplitHyphenatedTokens());\n  }\n}<fim_middle>// class below has no smell\n"}