{"text": "<fim_prefix>\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase Types.DATE:\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tDate d = Date.valueOf( paramValue );\n\t\t\t\t\tsetDate( paramName, paramIndex, d );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch( IllegalArgumentException ex )\n\t\t\t\t{\n\t\t\t\t\tthrowConversionError( paramName, paramIndex, paramValue, \n\t\t\t\t\t                 parameterType, ex );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase Types.TIME:\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tTime t = Time.valueOf( paramValue );\n\t\t\t\t\tsetTime( paramName, paramIndex, t );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch( IllegalArgumentException ex )\n\t\t\t\t{\n\t\t\t\t\tthrowConversionError( paramName, paramIndex, paramValue, \n\t\t\t\t\t                 parameterType, ex );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase Types.TIMESTAMP:\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tTimestamp ts = Timestamp.valueOf( paramValue );\n\t\t\t\t\tsetTimestamp( paramName, paramIndex, ts );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch( IllegalArgumentException ex )\n\t\t\t\t{\n\t\t\t\t\tthrowConversionError( paramName, paramIndex, paramValue, \n\t\t\t\t\t                 parameterType, ex );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n            case Types.BOOLEAN:\n            {\n                boolean val = Boolean.valueOf( paramValue ).booleanValue();\n                setBoolean( paramName, paramIndex, val );\n                return;\n            }\n\t\t\tdefault:\n\t\t\t\tthrowConversionError( paramName, paramIndex, paramValue, \n\t\t\t\t                 parameterType, null /* cause */ );\n\t\t\t\treturn;\n\t\t}\n\t}\n\tprivate void retrySetBigDecimalParamValue( ParameterName paramName, int paramIndex, \n                                            BigDecimal paramValue, int parameterType ) \n\t\tthrows DataException\n\t{\n\t\tswitch( parameterType )\n\t\t{\n\t\t\tcase Types.INTEGER:\n\t\t\t{\n\t\t\t\tint i = paramValue.intValue();\n\t\t\t\tBigDecimal intValue = new BigDecimal( i );\n\t\t\t\t// this could occur if there is a loss in precision or \n\t\t\t\t// if the BigDecimal value is outside the range of an integer\n\t\t\t\tif( ! paramValue.equals( intValue ) )\n\t\t\t\t\tthrowConversionError( paramName, paramIndex, paramValue, \n\t\t\t\t\t                 parameterType, null /* cause */ );\n\t\t\t\tsetInt( paramName, paramIndex, i );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcase Types.DOUBLE:\n\t\t\t{\n\t\t\t\tdouble d = paramValue.doubleValue();\n\t\t\t\tBigDecimal doubleValue = new BigDecimal( d );\n\t\t\t\t// this could occur if there is a loss in precision or \n\t\t\t\t// if the BigDecimal value is outside the range of a double\n\t\t\t\tif( ! paramValue.equals( doubleValue ) )\n\t\t\t\t\tthrowConversionError( paramName, paramIndex, paramValue, \n\t\t\t\t\t                 parameterType, null /* cause */ );\n\t\t\t\tsetDouble( paramName, paramIndex, d );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcase Types.CHAR:\n\t\t\t{\n\t\t\t\tString s = paramValue.toString();\n\t\t\t\tsetString( paramName, paramIndex, s );\n\t\t\t\treturn;\n\t\t\t}\n            case Types.BOOLEAN:\n            {\n                boolean val = ( paramValue.compareTo( BigDecimal.valueOf( 0 ) ) != 0 );\n                setBoolean( paramName, paramIndex, val );\n                return;\n            }\n\t\t\tdefault:\n\t\t\t\tthrowConversionError( paramName, paramIndex, paramValue, \n\t\t\t\t                 parameterType, null /* cause */ );\n\t\t\t\treturn;\n\t\t}\n\t}\n\tprivate void retrySetDateParamValue( ParameterName paramName, int paramIndex, \n                                        Date paramValue, int parameterType ) \n\t\tthrows DataException\n\t{\n\t\tswitch( parameterType )\n\t\t{\n\t\t\tcase Types.CHAR:\n\t\t\t{\n\t\t\t\t// need to convert the java.util.Date to a java.sql.Date, \n\t\t\t\t// so that we can get the ISO format date string\n\t\t\t\tDate sqlDate = new Date( paramValue.getTime() );\n\t\t\t\tString s = sqlDate.toString();\n\t\t\t\tsetString( paramName, paramIndex, s );\n\t\t\t\treturn;\n\t\t\t}\n            case Types.TIME:\n            {\n                // ignores the date portion\n                Time timeValue = new Time( paramValue.getTime() );\n                setTime( paramName, paramIndex, timeValue );\n                return;\n            }\n\t\t\tcase Types.TIMESTAMP:\n\t\t\t{\n\t\t\t\tTimestamp ts = new Timestamp( paramValue.getTime() );\n\t\t\t\tsetTimestamp( paramName, paramIndex, ts );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrowConversionError( paramName, paramIndex, paramValue, \n\t\t\t\t                 parameterType, null /* cause */ );\n\t\t\t\treturn;\n\t\t}\n\t}\n\tprivate void retrySetTimeParamValue( ParameterName paramName, int paramIndex, \n                                         Time paramValue, int parameterType ) \n\t\tthrows DataException\n\t{\n\t\tswitch( parameterType )\n\t\t{\n\t\t\tcase Types.CHAR:\n\t\t\t{\n\t\t\t\tString s = paramValue.toString();\n\t\t\t\tsetString( paramName, paramIndex, s );\n\t\t\t\treturn;\n\t\t\t}\n            case Types.DATE:\n            {\n                Date d = new Date( paramValue.getTime() );\n                setDate( paramName, paramIndex, d );\n                return;\n            }\n            case Types.TIMESTAMP:\n            {\n                Timestamp ts = new Timestamp( paramValue.getTime() );\n                setTimestamp( paramName, paramIndex, ts );\n                return;\n            }\n\t\t\tdefault:\n\t\t\t\tthrowConversionError( paramName, paramIndex, paramValue, \n\t\t\t\t                 parameterType, null /* cause */ );\n\t\t\t\treturn;\n\t\t}\n\t}\n\tprivate void retrySetTimestampParamValue( ParameterName paramName, int paramIndex, \t\n                                            Timestamp paramValue, int parameterType ) \n\t\tthrows DataException\n\t{\n\t\tswitch( parameterType )\n\t\t{\n\t\t\tcase Types.CHAR:\n\t\t\t{\n\t\t\t\tString s = paramValue.toString();\n\t\t\t\tsetString( paramName, paramIndex, s );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcase Types.DATE:\n\t\t\t{\n\t\t\t\tlong time = paramValue.getTime();\n\t\t\t\tDate d = new Date( time );\n\t\t\t\tsetDate( paramName, paramIndex, d );\n\t\t\t\treturn;\n\t\t\t}\n            case Types.TIME:\n            {\n                // ignores the date portion\n                Time timeValue = new Time( paramValue.getTime() );\n                setTime( paramName, paramIndex, timeValue );\n                return;\n            }\n\t\t\tdefault:\n\t\t\t\tthrowConversionError( paramName, paramIndex, paramValue, \n\t\t\t\t                 parameterType, null /* cause */ );\n\t\t\t\treturn;\n\t\t}\n\t}\n    private void retrySetBooleanParamValue( ParameterName paramName, int paramIndex, \n                                            Boolean paramValue, int parameterType ) \n        throws DataException\n    {\n        switch( parameterType )\n        {\n            case Types.INTEGER:\n            {\n                int i = paramValue.booleanValue() ? 1 : 0;\n                setInt( paramName, paramIndex, i );\n                return;\n            }\n            case Types.DOUBLE:\n            {\n                double d = paramValue.booleanValue() ? 1 : 0;\n                setDouble( paramName, paramIndex, d );\n                return;\n            }\n            case Types.CHAR:\n            {\n                String s = paramValue.toString();\n                setString( paramName, paramIndex, s );\n                return;\n            }\n            case Types.DECIMAL:\n            {\n                int i = paramValue.booleanValue() ? 1 : 0;\n                BigDecimal bd = new BigDecimal( i );\n                setBigDecimal( paramName, paramIndex, bd );\n                return;\n            }\n            default:\n                throwConversionError( paramName, paramIndex, paramValue, \n                                 parameterType, null /* cause */ );\n                return;\n        }\n    }\n<fim_suffix>    private void retrySetNullParamValue( ParameterName paramName, int paramIndex, \n                                         int parameterType,\n                                         Exception lastException ) \n        throws DataException\n    {\n        switch( parameterType )\n        {            \n            case Types.CHAR:\n            {\n                setString( paramName, paramIndex, null );\n                return;\n            }\n            case Types.DECIMAL:\n            {\n                setBigDecimal( paramName, paramIndex, null );\n                return;\n            }\n            case Types.DATE:\n            {\n                setDate( paramName, paramIndex, null );\n                return;\n            }\n            case Types.TIME:\n            {\n                setTime( paramName, paramIndex, null );\n                return;\n            }\n            case Types.TIMESTAMP:\n            {\n                setTimestamp( paramName, paramIndex, null );\n                return;\n            }\n            case Types.JAVA_OBJECT:\n            {\n                setObject( paramName, paramIndex, null );\n                return;\n            }\n            default:\n                // metadata indicates primitive data types or types not supported for input parameter, \n                // cannot retry with a different ODA API setter to assign \n                // a null input parameter value\n                getLogger().logp( Level.SEVERE, sm_className, \"retrySetNullParamValue\",  //$NON-NLS-1$\n                                \"Input parameter value is null; not able to retry, throws exception from underlying ODA driver.\" ); //$NON-NLS-1$\n                // not able to retry, throw last exception thrown by \n                // the underlying ODA driver\n                throwSetParamValueLastException( lastException, \"retrySetNullParamValue\" ); //$NON-NLS-1$\n        }\n    }<fim_middle>// function below has no smell\n"}