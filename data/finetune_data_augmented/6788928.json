{"text": "<fim_prefix>/*\n *  Copyright 2016 Google Inc. All Rights Reserved.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\npackage com.google.blockly.android.ui;\n\nimport android.content.Context;\nimport android.support.annotation.Nullable;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.google.blockly.android.ui.fieldview.FieldView;\nimport com.google.blockly.model.Block;\nimport com.google.blockly.model.Input;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Optional base {@ ViewGroup} representation of an {@link Input} to a {@link Block}.\n * <p/>\n * Default implementation assumes all {@link FieldView}s are added directly to this view as their\n * parent, as the first children.  Subclasses can use an alternate behavior by overriding\n * {@link #addFieldViewsToViewHierarchy}.\n */\npublic abstract class AbstractInputView extends NonPropagatingViewGroup implements InputView {\n    protected final Input mInput;\n    protected final @Input.InputType int mInputType;\n\n    protected final WorkspaceHelper mHelper;\n    protected final ArrayList<FieldView> mFieldViews;\n\n    // The view of the blocks connected to this input.\n    protected BlockGroup mConnectedGroup = null;\n\n    /**\n     * Constructs a base implementation of an {@link InputView}.\n     *\n     * @param context The Android {@link Context} for the app.\n     * @param helper The {@link WorkspaceHelper} for the activity.\n     * @param input The {@link Input} the view represents.\n     * @param fieldViews The {@link FieldView}s instantiated by the {@link BlockViewFactory}.\n     */\n    protected AbstractInputView(Context context, WorkspaceHelper helper, Input input,\n                                List<FieldView> fieldViews) {\n        super(context);\n\n        mInput = input;\n        mInputType = mInput.getType();\n        mHelper = helper;\n\n        mInput.setView(this);\n        mFieldViews = new ArrayList<>(fieldViews);\n        addFieldViewsToViewHierarchy();\n    }\n\n    /**\n     * Adds the {@link FieldView}s in {@link #mFieldViews} to the view hierarchy. The default\n     * implementation adds the views directly to this view, in order.\n     */\n    protected void addFieldViewsToViewHierarchy() {\n        for (int i = 0; i < mFieldViews.size(); i++) {\n            addView((View) mFieldViews.get(i));\n        }\n    }\n\n    /**\n     * @return The block {@link Input} wrapped by this view.\n     */\n<fim_suffix>    public Input getInput() {\n        return mInput;\n    }\n\n    /**\n     * @return The {@link BlockGroup} containing the blocks connected to this input port, if any.\n     */\n    @Override\n    @Nullable\n    public BlockGroup getConnectedBlockGroup() {\n        return mConnectedGroup;\n    }\n\n    /**\n     * Sets the view of the blocks whose output/previous connector is connected to this input.\n     * Setting it to null will remove any set block group.\n     *\n     * @param blockGroup The {@link BlockGroup} to attach to this input. The {@code childView} will\n     *                  be added to the layout hierarchy for the current view via a call to\n     *                  {@link ViewGroup#addView(View)}.\n     *\n     * @throws IllegalStateException if a child view is already set. The Blockly model requires\n     *         disconnecting a block from an input before a new one can be connected.\n     * @throws IllegalArgumentException if the method argument is {@code null}.\n     */\n    public void setConnectedBlockGroup(BlockGroup blockGroup) {\n        if (blockGroup == null) {\n            if (mConnectedGroup != null) {\n                removeView(mConnectedGroup);\n                mConnectedGroup = null;\n                requestLayout();\n            }\n            return;\n        }\n        if (mConnectedGroup != null) {\n            throw new IllegalStateException(\"Input is already connected; must disconnect first.\");\n        }\n\n        mConnectedGroup = blockGroup;\n\n        addView(blockGroup);\n        requestLayout();\n    }\n\n    /**\n     * Recursively disconnects the view from the model, and removes all views.\n     */\n    @Override\n    public void unlinkModel() {\n        int max = mFieldViews.size();\n        for (int i = 0; i < max; ++i) {\n            FieldView fieldView = mFieldViews.get(i);\n            fieldView.unlinkField();\n        }\n        if (mConnectedGroup != null) {\n            mConnectedGroup.unlinkModel();\n            mConnectedGroup = null;\n        }\n        removeAllViews();\n        mInput.setView(null);\n        // TODO(#45): Remove model from view. Set mInputField to null, and handle all null cases.\n    }\n}<fim_middle>// function below has no smell\n"}