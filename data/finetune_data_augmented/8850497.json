{"text": "<fim_prefix>          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 0: // SUCCESS\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.success = new Response();\n                struct.success.read(iprot);\n                struct.setSuccessIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, getTasksStatus_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.success != null) {\n          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);\n          struct.success.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class getTasksStatus_resultTupleSchemeFactory implements SchemeFactory {\n      public getTasksStatus_resultTupleScheme getScheme() {\n        return new getTasksStatus_resultTupleScheme();\n      }\n    }\n    private static class getTasksStatus_resultTupleScheme extends TupleScheme<getTasksStatus_result> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, getTasksStatus_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetSuccess()) {\n          optionals.set(0);\n        }\n        oprot.writeBitSet(optionals, 1);\n        if (struct.isSetSuccess()) {\n          struct.success.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, getTasksStatus_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        BitSet incoming = iprot.readBitSet(1);\n        if (incoming.get(0)) {\n          struct.success = new Response();\n          struct.success.read(iprot);\n          struct.setSuccessIsSet(true);\n        }\n      }\n    }\n  }\n  public static class getTasksWithoutConfigs_args implements org.apache.thrift.TBase<getTasksWithoutConfigs_args, getTasksWithoutConfigs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTasksWithoutConfigs_args>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"getTasksWithoutConfigs_args\");\n    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(\"query\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new getTasksWithoutConfigs_argsStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new getTasksWithoutConfigs_argsTupleSchemeFactory());\n    }\n    public TaskQuery query; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      QUERY((short)1, \"query\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // QUERY\n            return QUERY;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData(\"query\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskQuery.class)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTasksWithoutConfigs_args.class, metaDataMap);\n    }\n    public getTasksWithoutConfigs_args() {\n    }\n    public getTasksWithoutConfigs_args(\n      TaskQuery query)\n    {\n      this();\n      this.query = query;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public getTasksWithoutConfigs_args(getTasksWithoutConfigs_args other) {\n      if (other.isSetQuery()) {\n        this.query = new TaskQuery(other.query);\n      }\n    }\n    public getTasksWithoutConfigs_args deepCopy() {\n      return new getTasksWithoutConfigs_args(this);\n    }\n    @Override\n    public void clear() {\n      this.query = null;\n    }\n    public TaskQuery getQuery() {\n      return this.query;\n    }\n    public getTasksWithoutConfigs_args setQuery(TaskQuery query) {\n      this.query = query;\n      return this;\n    }\n    public void unsetQuery() {\n      this.query = null;\n    }\n    /** Returns true if field query is set (has been assigned a value) and false otherwise */\n    public boolean isSetQuery() {\n      return this.query != null;\n    }\n    public void setQueryIsSet(boolean value) {\n      if (!value) {\n        this.query = null;\n      }\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      case QUERY:\n        if (value == null) {\n          unsetQuery();\n        } else {\n          setQuery((TaskQuery)value);\n        }\n        break;\n      }\n    }\n    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case QUERY:\n        return getQuery();\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      case QUERY:\n        return isSetQuery();\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof getTasksWithoutConfigs_args)\n        return this.equals((getTasksWithoutConfigs_args)that);\n      return false;\n    }\n    public boolean equals(getTasksWithoutConfigs_args that) {\n      if (that == null)\n        return false;\n      boolean this_present_query = true && this.isSetQuery();\n      boolean that_present_query = true && that.isSetQuery();\n      if (this_present_query || that_present_query) {\n        if (!(this_present_query && that_present_query))\n          return false;\n        if (!this.query.equals(that.query))\n          return false;\n      }\n      return true;\n    }\n<fim_suffix>    @Override\n    public int hashCode() {\n      List<Object> list = new ArrayList<Object>();\n      boolean present_query = true && (isSetQuery());\n      list.add(present_query);\n      if (present_query)\n        list.add(query);\n      return list.hashCode();\n    }<fim_middle>// function below has no smell\n"}