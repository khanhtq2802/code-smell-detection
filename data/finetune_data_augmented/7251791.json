{"text": "<fim_prefix>/*\n * Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage org.graalvm.visualvm.api.caching.impl;\n\n\nimport org.graalvm.visualvm.api.caching.Cache;\nimport org.graalvm.visualvm.api.caching.Entry;\nimport org.graalvm.visualvm.api.caching.EntryFactory;\nimport org.graalvm.visualvm.api.caching.Persistor;\nimport java.lang.ref.Reference;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Default class implementation - should be used as a base for caching functionality\n * @author Jaroslav Bachorik\n */\n<fim_suffix>final class CacheImpl<K, V> extends Cache<K,V> {\n    final private Map<Reference<K>, Entry<V>> objectCache = new HashMap<Reference<K>, Entry<V>>();\n\n    private long update_interval = 60480000; // 7 days in milliseconds\n\n    private Persistor<K, V> persistor = Persistor.DEFAULT;\n    private KeyFactory<K> keyFactory = KeyFactory.DEFAULT;\n    private EntryFactory<K,V> resolver = EntryFactory.DEFAULT;\n\n    CacheImpl() {};\n\n    CacheImpl(EntryFactory<K,V> resolver) {\n        this.resolver = resolver;\n    }\n\n    CacheImpl(Persistor<K,V> persistor) {\n        this.persistor = persistor;\n    }\n\n    CacheImpl(KeyFactory<K> keyFactory) {\n        this.keyFactory = keyFactory;\n    }\n\n    CacheImpl(EntryFactory<K,V> resolver, Persistor<K,V> persistor) {\n        this.resolver = resolver;\n        this.persistor = persistor;\n    }\n\n    CacheImpl(EntryFactory<K,V> resolver, KeyFactory<K> keyFactory) {\n        this.resolver = resolver;\n        this.keyFactory = keyFactory;\n    }\n\n    CacheImpl(KeyFactory<K> keyFactory, Persistor<K,V> persistor) {\n        this.persistor = persistor;\n        this.keyFactory = keyFactory;\n    }\n\n    CacheImpl(EntryFactory<K,V> resolver, KeyFactory<K> keyFactory, Persistor<K,V> persistor) {\n        this.resolver = resolver;\n        this.persistor = persistor;\n        this.keyFactory = keyFactory;\n    }\n\n    /**\n     * Retrieves an object from the cache by the given key\n     * <p>\n     * If there is no cached version then a registered instance of {@linkplain EntryFactory}\n     * is used to invoke its {@linkplain EntryFactory#createEntry(java.lang.Object)} method.<br/>\n     * Also, a {@linkplain Persistor} instance is used to retrieve and store the cached value in\n     * a dedicated storage.\n     * </p>\n     * @param key The key identifying the object to be retrieved\n     * @return Returns the cached object or NULL\n     */\n    @Override\n    final public V retrieveObject(K key) {\n        Reference<K> softKey = keyFactory.createKey(key);\n        synchronized(objectCache) {\n            Entry<V> entry = objectCache.get(softKey);\n            if (entry == null) {\n                entry = persistor.retrieve(key);\n            }\n            if (entry == null) {\n                entry = cacheMiss(key);\n                if (entry != null && entry.getContent() != null) {\n                    persistor.store(key, entry);\n                    objectCache.put(softKey, entry);\n                }\n            } else {\n                long timestamp = System.currentTimeMillis();\n                if ((timestamp - entry.getUpdateTimeStamp()) > update_interval) {\n                    Entry<V> newEntry = cacheMiss(key);\n                    if (newEntry != null && newEntry.getContent() != null) {\n                        persistor.store(key, entry);\n                        objectCache.put(softKey, newEntry);\n                        entry = newEntry;\n                    }\n                }\n            }\n            return entry != null ? entry.getContent() : null;\n        }\n    }\n    \n    @Override\n    final public V invalidateObject(K key) {\n        Reference<K> softKey = keyFactory.createKey(key);\n        synchronized(objectCache) {\n            Entry<V> entry = objectCache.remove(softKey);\n            return entry != null ? entry.getContent() : null;\n        }\n    }\n\n    /**\n     * Property getter\n     * @return Returns TTL interval in milliseconds\n     */\n    @Override\n    final public long getTTL() {\n        return update_interval;\n    }\n\n    /**\n     * Property setter\n     * @param ttl TTL interval in milliseconds\n     */\n    @Override\n    final public void setTTL(long ttl) {\n        this.update_interval = ttl;\n    }\n\n    /**\n     * This method is called in case of cache-miss\n     * It can return NULL if it's not possible to resolve the missing instance\n     * @param key The key of the missing object\n     * @return Returns the resolved object or NULL\n     */\n    private Entry<V> cacheMiss(K key) {\n        return resolver.createEntry(key);\n    }\n}<fim_middle>// class below has no smell\n"}