{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* $Id$ */\n\npackage org.apache.fop.util;\n\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.AttributesImpl;\n\nimport org.apache.xmlgraphics.util.QName;\n\n/**\n * This class is a delegating SAX ContentHandler which has the purpose to provide a few handy\n * methods that make life easier when generating SAX events.\n */\n<fim_suffix>public class GenerationHelperContentHandler extends DelegatingContentHandler {\n\n    private static final Attributes EMPTY_ATTS = new AttributesImpl();\n\n    private String mainNamespace;\n    private Object contentHandlerContext;\n\n    /**\n     * Main constructor. If the given handler also implements any of the EntityResolver,\n     * DTDHandler, LexicalHandler or ErrorHandler interfaces, these are set automatically.\n     * @param handler the SAX content handler to delegate all calls to\n     * @param mainNamespace the main namespace used for generated XML content when abbreviated\n     *                          ContentHandler calls are used.\n     * @param contentHandlerContext additional content handler context state\n     */\n    public GenerationHelperContentHandler(ContentHandler handler, String mainNamespace, Object contentHandlerContext) {\n        super(handler);\n        this.mainNamespace = mainNamespace;\n        this.contentHandlerContext = contentHandlerContext;\n    }\n\n    /**\n     * Returns the main namespace used for generated XML content.\n     * @return the main namespace\n     */\n    public String getMainNamespace() {\n        return this.mainNamespace;\n    }\n\n    /**\n     * Sets the main namespace used for generated XML content when abbreviated ContentHandler\n     * calls are used.\n     * @param namespaceURI the new main namespace URI\n     */\n    public void setMainNamespace(String namespaceURI) {\n        this.mainNamespace = namespaceURI;\n    }\n\n    /**\n     * Returns the context object (may be null).\n     * @return the context object\n     */\n    public Object getContentHandlerContext() {\n        return this.contentHandlerContext;\n    }\n\n    /**\n     * Convenience method to generate a startElement SAX event.\n     * @param localName the local name of the element\n     * @param atts the attributes\n     * @throws SAXException if a SAX exception occurs\n     */\n    public void startElement(String localName, Attributes atts) throws SAXException {\n        getDelegateContentHandler().startElement(getMainNamespace(), localName, localName, atts);\n    }\n\n    /**\n     * Convenience method to generate a startElement SAX event.\n     * @param localName the local name of the element\n     * @throws SAXException if a SAX exception occurs\n     */\n    public void startElement(String localName) throws SAXException {\n        startElement(localName, EMPTY_ATTS);\n    }\n\n    /**\n     * Convenience method to generate a startElement SAX event.\n     * @param qName the qualified name of the element\n     * @param atts the attributes\n     * @throws SAXException if a SAX exception occurs\n     */\n    public void startElement(QName qName, Attributes atts) throws SAXException {\n        getDelegateContentHandler().startElement(qName.getNamespaceURI(), qName.getLocalName(),\n                qName.getQName(), atts);\n    }\n\n    /**\n     * Convenience method to generate a startElement SAX event.\n     * @param qName the qualified name of the element\n     * @throws SAXException if a SAX exception occurs\n     */\n    public void startElement(QName qName) throws SAXException {\n        startElement(qName, EMPTY_ATTS);\n    }\n\n    /**\n     * Convenience method to generate a endElement SAX event.\n     * @param localName the local name of the element\n     * @throws SAXException if a SAX exception occurs\n     */\n    public void endElement(String localName) throws SAXException {\n        getDelegateContentHandler().endElement(getMainNamespace(), localName, localName);\n    }\n\n    /**\n     * Convenience method to generate a startElement SAX event.\n     * @param qName the qualified name of the element\n     * @throws SAXException if a SAX exception occurs\n     */\n    public void endElement(QName qName) throws SAXException {\n        getDelegateContentHandler().endElement(qName.getNamespaceURI(), qName.getLocalName(),\n                qName.getQName());\n    }\n\n    /**\n     * Convenience method to generate an empty element with attributes.\n     * @param localName the local name of the element\n     * @param atts the attributes\n     * @throws SAXException if a SAX exception occurs\n     */\n    public void element(String localName, Attributes atts) throws SAXException {\n        getDelegateContentHandler().startElement(getMainNamespace(), localName, localName, atts);\n        getDelegateContentHandler().endElement(getMainNamespace(), localName, localName);\n    }\n\n    /**\n     * Convenience method to generate an empty element with attributes.\n     * @param qName the qualified name of the element\n     * @param atts the attributes\n     * @throws SAXException if a SAX exception occurs\n     */\n    public void element(QName qName, Attributes atts) throws SAXException {\n        getDelegateContentHandler().startElement(qName.getNamespaceURI(), qName.getLocalName(),\n                qName.getQName(), atts);\n        getDelegateContentHandler().endElement(qName.getNamespaceURI(), qName.getLocalName(),\n                qName.getQName());\n    }\n\n}<fim_middle>// class below has no smell\n"}