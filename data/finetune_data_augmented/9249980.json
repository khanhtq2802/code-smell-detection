{"text": "<fim_prefix> * class; use of identity-sensitive operations (including reference equality\n * ({@code ==}), identity hash code, or synchronization) on instances of\n * {@code OptionalDouble} may have unpredictable results and should be avoided.\n *\n * @apiNote\n * {@code OptionalDouble} is primarily intended for use as a method return type where\n * there is a clear need to represent \"no result.\" A variable whose type is\n * {@code OptionalDouble} should never itself be {@code null}; it should always point\n * to an {@code OptionalDouble} instance.\n *\n * @since 1.8\n */\npublic final class OptionalDouble {\n    /**\n     * Common instance for {@code empty()}.\n     */\n    private static final OptionalDouble EMPTY = new OptionalDouble();\n    /**\n     * If true then the value is present, otherwise indicates no value is present\n     */\n    private final boolean isPresent;\n    private final double value;\n    /**\n     * Construct an empty instance.\n     *\n     * @implNote generally only one empty instance, {@link OptionalDouble#EMPTY},\n     * should exist per VM.\n     */\n    private OptionalDouble() {\n        this.isPresent = false;\n        this.value = Double.NaN;\n    }\n    /**\n     * Returns an empty {@code OptionalDouble} instance.  No value is present\n     * for this {@code OptionalDouble}.\n     *\n     * @apiNote\n     * Though it may be tempting to do so, avoid testing if an object is empty\n     * by comparing with {@code ==} against instances returned by\n     * {@code OptionalDouble.empty()}.  There is no guarantee that it is a singleton.\n     * Instead, use {@link #isPresent()}.\n     *\n     *  @return an empty {@code OptionalDouble}.\n     */\n    public static OptionalDouble empty() {\n        return EMPTY;\n    }\n    /**\n     * Construct an instance with the described value.\n     *\n     * @param value the double value to describe.\n     */\n    private OptionalDouble(double value) {\n        this.isPresent = true;\n        this.value = value;\n    }\n    /**\n     * Returns an {@code OptionalDouble} describing the given value.\n     *\n     * @param value the value to describe\n     * @return an {@code OptionalDouble} with the value present\n     */\n    public static OptionalDouble of(double value) {\n        return new OptionalDouble(value);\n    }\n    /**\n     * If a value is present, returns the value, otherwise throws\n     * {@code NoSuchElementException}.\n     *\n     * @apiNote\n     * The preferred alternative to this method is {@link #orElseThrow()}.\n     *\n     * @return the value described by this {@code OptionalDouble}\n     * @throws NoSuchElementException if no value is present\n     */\n    public double getAsDouble() {\n        if (!isPresent) {\n            throw new NoSuchElementException(\"No value present\");\n        }\n        return value;\n    }\n    /**\n     * If a value is present, returns {@code true}, otherwise {@code false}.\n     *\n     * @return {@code true} if a value is present, otherwise {@code false}\n     */\n    public boolean isPresent() {\n        return isPresent;\n    }\n    /**\n     * If a value is not present, returns {@code true}, otherwise\n     * {@code false}.\n     *\n     * @return  {@code true} if a value is not present, otherwise {@code false}\n     * @since   11\n     */\n    public boolean isEmpty() {\n        return !isPresent;\n    }\n    /**\n     * If a value is present, performs the given action with the value,\n     * otherwise does nothing.\n     *\n     * @param action the action to be performed, if a value is present\n     * @throws NullPointerException if value is present and the given action is\n     *         {@code null}\n     */\n    public void ifPresent(DoubleConsumer action) {\n        if (isPresent) {\n            action.accept(value);\n        }\n    }\n    /**\n     * If a value is present, performs the given action with the value,\n     * otherwise performs the given empty-based action.\n     *\n     * @param action the action to be performed, if a value is present\n     * @param emptyAction the empty-based action to be performed, if no value is\n     * present\n     * @throws NullPointerException if a value is present and the given action\n     *         is {@code null}, or no value is present and the given empty-based\n     *         action is {@code null}.\n     * @since 9\n     */\n    public void ifPresentOrElse(DoubleConsumer action, Runnable emptyAction) {\n        if (isPresent) {\n            action.accept(value);\n        } else {\n            emptyAction.run();\n        }\n    }\n    /**\n     * If a value is present, returns a sequential {@link DoubleStream}\n     * containing only that value, otherwise returns an empty\n     * {@code DoubleStream}.\n     *\n     * @apiNote\n     * This method can be used to transform a {@code Stream} of optional doubles\n     * to a {@code DoubleStream} of present doubles:\n     * <pre>{@code\n     *     Stream<OptionalDouble> os = ..\n     *     DoubleStream s = os.flatMapToDouble(OptionalDouble::stream)\n     * }</pre>\n     *\n     * @return the optional value as a {@code DoubleStream}\n     * @since 9\n     */\n    public DoubleStream stream() {\n        if (isPresent) {\n            return DoubleStream.of(value);\n        } else {\n            return DoubleStream.empty();\n        }\n    }\n    /**\n     * If a value is present, returns the value, otherwise returns\n     * {@code other}.\n     *\n     * @param other the value to be returned, if no value is present\n     * @return the value, if present, otherwise {@code other}\n     */\n    public double orElse(double other) {\n        return isPresent ? value : other;\n    }\n    /**\n     * If a value is present, returns the value, otherwise returns the result\n     * produced by the supplying function.\n     *\n     * @param supplier the supplying function that produces a value to be returned\n     * @return the value, if present, otherwise the result produced by the\n     *         supplying function\n     * @throws NullPointerException if no value is present and the supplying\n     *         function is {@code null}\n     */\n    public double orElseGet(DoubleSupplier supplier) {\n        return isPresent ? value : supplier.getAsDouble();\n    }\n    /**\n     * If a value is present, returns the value, otherwise throws\n     * {@code NoSuchElementException}.\n     *\n     * @return the value described by this {@code OptionalDouble}\n     * @throws NoSuchElementException if no value is present\n     * @since 10\n     */\n    public double orElseThrow() {\n        if (!isPresent) {\n            throw new NoSuchElementException(\"No value present\");\n        }\n        return value;\n    }\n    /**\n     * If a value is present, returns the value, otherwise throws an exception\n     * produced by the exception supplying function.\n     *\n     * @apiNote\n     * A method reference to the exception constructor with an empty argument\n     * list can be used as the supplier. For example,\n     * {@code IllegalStateException::new}\n     *\n     * @param <X> Type of the exception to be thrown\n     * @param exceptionSupplier the supplying function that produces an\n     *        exception to be thrown\n     * @return the value, if present\n     * @throws X if no value is present\n     * @throws NullPointerException if no value is present and the exception\n     *         supplying function is {@code null}\n     */\n    public<X extends Throwable> double orElseThrow(Supplier<? extends X> exceptionSupplier) throws X {\n        if (isPresent) {\n            return value;\n        } else {\n            throw exceptionSupplier.get();\n        }\n    }\n    /**\n     * Indicates whether some other object is \"equal to\" this\n     * {@code OptionalDouble}. The other object is considered equal if:\n     * <ul>\n     * <li>it is also an {@code OptionalDouble} and;\n     * <li>both instances have no value present or;\n     * <li>the present values are \"equal to\" each other via\n     * {@code Double.compare() == 0}.\n     * </ul>\n     *\n     * @param obj an object to be tested for equality\n     * @return {@code true} if the other object is \"equal to\" this object\n     *         otherwise {@code false}\n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof OptionalDouble)) {\n            return false;\n        }\n        OptionalDouble other = (OptionalDouble) obj;\n        return (isPresent && other.isPresent)\n               ? Double.compare(value, other.value) == 0\n               : isPresent == other.isPresent;\n    }\n    /**\n     * Returns the hash code of the value, if present, otherwise {@code 0}\n     * (zero) if no value is present.\n     *\n     * @return hash code value of the present value or {@code 0} if no value is\n     *         present\n     */\n<fim_suffix>    @Override\n    public int hashCode() {\n        return isPresent ? Double.hashCode(value) : 0;\n    }<fim_middle>// function below has no smell\n"}