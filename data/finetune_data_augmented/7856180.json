{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.apache.geode.internal.cache.persistence.query;\n\nimport org.apache.geode.internal.cache.persistence.query.mock.ResultListImpl;\nimport org.apache.geode.internal.cache.persistence.query.mock.SortedResultBagImpl;\nimport org.apache.geode.internal.cache.persistence.query.mock.SortedResultSetImpl;\n\n/**\n * This is a factory for temporary result sets that overflow to disk.\n *\n * The result sets will not be recovered when the member restarts. Any temporary results still on\n * disk when a member restarts will be deleted.\n *\n */\n<fim_suffix>public class TemporaryResultSetFactory {\n\n\n  /**\n   * Get a result set that is sorted. The result set will be overflowed on to disk as necessary, but\n   * it will not be recovered from disk.\n   *\n   * @param extractor a callback to extract the index sort key from the object. The sort key is\n   *        expected to be comparable.\n   * @param reverse - true to reverse the natural order of the keys\n   */\n  public ResultSet getSortedResultSet(SortKeyExtractor extractor, boolean reverse) {\n    return new SortedResultSetImpl(extractor, reverse);\n  }\n\n  /**\n   * Get a result bag that is sorted. The result set will be overflowed on to disk as necessary, but\n   * it will not be recovered from disk.\n   *\n   * @param extractor a callback to extract the index sort key from the object. The sort key is\n   *        expected to be comparable.\n   * @param reverse - true to reverse the natural order of the keys\n   */\n  public ResultBag getSortedResultBag(SortKeyExtractor extractor, boolean reverse) {\n    return new SortedResultBagImpl(extractor, reverse);\n  }\n\n  /**\n   * Get a result set that is not sorted. The result set will be overflowed on to disk as necessary,\n   * but it will not be recovered from disk.\n   *\n   * This is useful for cases where the ordering is not important, but the set semantics are. For\n   * example, a distinct query.\n   *\n   * @param reverse - true to reverse the natural order of the keys\n   */\n  public ResultSet getUnsortedResultSet(boolean reverse) {\n    return new SortedResultSetImpl(null, reverse);\n  }\n\n  /**\n   * Get a list to store temporary results. The list will be overflowed on to disk as necessary, but\n   * it will not be recovered from disk.\n   *\n   */\n  public ResultList getResultList() {\n    return new ResultListImpl();\n  }\n}<fim_middle>// class below has no smell\n"}