{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.pinot.controller.helix.core.realtime;\n\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.helix.ZNRecord;\nimport org.apache.helix.store.zk.ZkHelixPropertyStore;\nimport org.apache.pinot.common.config.TableConfig;\nimport org.apache.pinot.common.metadata.ZKMetadataProvider;\n\n\n/**\n * Cache for table config.\n */\n<fim_suffix>public class TableConfigCache {\n\n  // TODO: Make cache size, timeout configurable through controller config.\n  private static final long DEFAULT_CACHE_SIZE = 50;\n  private static final long DEFAULT_CACHE_TIMEOUT_IN_MINUTE = 60;\n\n  private final LoadingCache<String, TableConfig> _tableConfigCache;\n  private final ZkHelixPropertyStore<ZNRecord> _propertyStore;\n\n  public TableConfigCache(ZkHelixPropertyStore<ZNRecord> propertyStore) {\n    _tableConfigCache = CacheBuilder.newBuilder().maximumSize(DEFAULT_CACHE_SIZE)\n        .expireAfterWrite(DEFAULT_CACHE_TIMEOUT_IN_MINUTE, TimeUnit.MINUTES)\n        .build(new CacheLoader<String, TableConfig>() {\n          @Override\n          public TableConfig load(String tableNameWithType)\n              throws Exception {\n            return ZKMetadataProvider.getTableConfig(_propertyStore, tableNameWithType);\n          }\n        });\n    _propertyStore = propertyStore;\n  }\n\n  public TableConfig getTableConfig(String tableNameWithType)\n      throws ExecutionException {\n    return _tableConfigCache.get(tableNameWithType);\n  }\n}<fim_middle>// class below has no smell\n"}