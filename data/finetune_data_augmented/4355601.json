{"text": "<fim_prefix>/*\n\n   Derby - Class org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to you under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\n\npackage org.apache.derby.impl.sql.execute.rts;\n\nimport org.apache.derby.iapi.services.io.StoredFormatIds;\n\nimport org.apache.derby.shared.common.i18n.MessageService;\nimport org.apache.derby.shared.common.reference.SQLState;\n\nimport org.apache.derby.iapi.services.io.FormatableHashtable;\n\nimport java.io.ObjectOutput;\nimport java.io.ObjectInput;\nimport java.io.IOException;\n\nimport org.apache.derby.catalog.UUID;\nimport org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;\nimport org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;\nimport org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;\nimport org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;\n\n/**\n  ResultSetStatistics implemenation for RowResultSet.\n\n\n*/\n<fim_suffix>public class RealRowResultSetStatistics \n\textends RealNoPutResultSetStatistics\n{\n\n\t/* Leave these fields public for object inspectors */\n\tpublic int rowsReturned;\n\n\t// CONSTRUCTORS\n\t/**\n\t * \n\t *\n\t */\n    public\tRealRowResultSetStatistics(\n\t\t\t\t\t\t\t\t\t\tint numOpens,\n\t\t\t\t\t\t\t\t\t\tint rowsSeen,\n\t\t\t\t\t\t\t\t\t\tint rowsFiltered,\n\t\t\t\t\t\t\t\t\t\tlong constructorTime,\n\t\t\t\t\t\t\t\t\t\tlong openTime,\n\t\t\t\t\t\t\t\t\t\tlong nextTime,\n\t\t\t\t\t\t\t\t\t\tlong closeTime,\n\t\t\t\t\t\t\t\t\t\tint resultSetNumber,\n\t\t\t\t\t\t\t\t\t\tint rowsReturned,\n\t\t\t\t\t\t\t\t\t\tdouble optimizerEstimatedRowCount,\n\t\t\t\t\t\t\t\t\t\tdouble optimizerEstimatedCost\n\t\t\t\t\t\t\t\t\t)\n\t{\n\t\tsuper(\n\t\t\tnumOpens,\n\t\t\trowsSeen,\n\t\t\trowsFiltered,\n\t\t\tconstructorTime,\n\t\t\topenTime,\n\t\t\tnextTime,\n\t\t\tcloseTime,\n\t\t\tresultSetNumber,\n\t\t\toptimizerEstimatedRowCount,\n\t\t\toptimizerEstimatedCost\n\t\t\t);\n\t\tthis.rowsReturned = rowsReturned;\n\t}\n\n\t// ResultSetStatistics methods\n\n\t/**\n\t * Return the statement execution plan as a String.\n\t *\n\t * @param depth\tIndentation level.\n\t *\n\t * @return String\tThe statement execution plan as a String.\n\t */\n\tpublic String getStatementExecutionPlanText(int depth)\n\t{\n\t\tinitFormatInfo(depth);\n\n\t\treturn\n\t\t\tindent + MessageService.getTextMessage(SQLState.RTS_ROW_RS) +\n\t\t\t\t\":\\n\" +\n\t\t\tindent + MessageService.getTextMessage(SQLState.RTS_NUM_OPENS) +\n\t\t\t\t\" = \" + numOpens + \"\\n\" +\n\t\t\tindent + MessageService.getTextMessage(\n\t\t\t\t\t\t\t\t\t\t\t\tSQLState.RTS_ROWS_RETURNED) +\n\t\t\t\t\" = \" + rowsReturned + \"\\n\" +\n\t\t\tdumpTimeStats(indent, subIndent) + \"\\n\" +\n\t\t\tdumpEstimatedCosts(subIndent) + \"\\n\";\n\t}\n\n\t/**\n\t * Return information on the scan nodes from the statement execution \n\t * plan as a String.\n\t *\n\t * @param depth\tIndentation level.\n\t * @param tableName if not NULL then print information for this table only\n\t *\n\t * @return String\tThe information on the scan nodes from the \n\t *\t\t\t\t\tstatement execution plan as a String.\n\t */\n\tpublic String getScanStatisticsText(String tableName, int depth)\n\t{\n\t\treturn \"\";\n\t}\n\n\n\n\t// Class implementation\n\t\n\tpublic String toString()\n\t{\n\t\treturn getStatementExecutionPlanText(0);\n\t}\n\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n  public String getNodeName(){\n    return MessageService.getTextMessage(SQLState.RTS_ROW_RS);\n  }\n  \n  // -----------------------------------------------------\n  // XPLAINable Implementation\n  // -----------------------------------------------------\n  \n    public void accept(XPLAINVisitor visitor) {\n        \n        // I have no children, inform my visitor about that\n        visitor.setNumberOfChildren(0);\n        // pre-order, depth-first traversal\n        // me first\n        visitor.visit(this);\n        // I'm a leaf node, I have no children ...\n        \n    }\n\n    public String getRSXplainType() { return XPLAINUtil.OP_ROW; }\n    public Object getResultSetDescriptor(Object rsID, Object parentID,\n            Object scanID, Object sortID, Object stmtID, Object timingID)\n    {\n        return new XPLAINResultSetDescriptor(\n           (UUID)rsID,\n           getRSXplainType(),\n           getRSXplainDetails(),\n           this.numOpens,\n           null,                              // the number of index updates \n           null,                           // lock mode\n           null,                           // lock granularity\n           (UUID)parentID,\n           this.optimizerEstimatedRowCount,\n           this.optimizerEstimatedCost,\n           null,                              // the affected rows\n           null,                              // the deferred rows\n           null,                              // the input rows\n           this.rowsSeen,\n           null,                              // the seen rows right\n           this.rowsFiltered,\n           this.rowsReturned,\n           null,                              // the empty right rows\n           null,                           // index key optimization\n           (UUID)scanID,\n           (UUID)sortID,\n           (UUID)stmtID,\n           (UUID)timingID);\n    }\n}<fim_middle>// class below has no smell\n"}