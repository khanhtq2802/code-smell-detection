{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cassandra.db.marshal;\n\nimport java.nio.ByteBuffer;\nimport java.util.Map;\nimport java.util.List;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport org.apache.cassandra.cql3.CQL3Type;\nimport org.apache.cassandra.cql3.Term;\nimport org.apache.cassandra.exceptions.ConfigurationException;\nimport org.apache.cassandra.serializers.MarshalException;\nimport org.apache.cassandra.serializers.TypeSerializer;\nimport org.apache.cassandra.transport.ProtocolVersion;\n\npublic class ReversedType<T> extends AbstractType<T>\n{\n    // interning instances\n    private static final Map<AbstractType<?>, ReversedType> instances = new ConcurrentHashMap<>();\n\n    public final AbstractType<T> baseType;\n\n    public static <T> ReversedType<T> getInstance(TypeParser parser)\n    {\n        List<AbstractType<?>> types = parser.getTypeParameters();\n        if (types.size() != 1)\n            throw new ConfigurationException(\"ReversedType takes exactly one argument, \" + types.size() + \" given\");\n        return getInstance((AbstractType<T>) types.get(0));\n    }\n\n    public static <T> ReversedType<T> getInstance(AbstractType<T> baseType)\n    {\n        ReversedType<T> t = instances.get(baseType);\n        return null == t\n             ? instances.computeIfAbsent(baseType, ReversedType::new)\n             : t;\n    }\n\n    private ReversedType(AbstractType<T> baseType)\n    {\n        super(ComparisonType.CUSTOM);\n        this.baseType = baseType;\n    }\n\n    public boolean isEmptyValueMeaningless()\n    {\n        return baseType.isEmptyValueMeaningless();\n    }\n\n    public int compareCustom(ByteBuffer o1, ByteBuffer o2)\n    {\n        return baseType.compare(o2, o1);\n    }\n\n    @Override\n    public int compareForCQL(ByteBuffer v1, ByteBuffer v2)\n    {\n        return baseType.compare(v1, v2);\n    }\n\n    public String getString(ByteBuffer bytes)\n    {\n        return baseType.getString(bytes);\n    }\n\n    public ByteBuffer fromString(String source)\n    {\n        return baseType.fromString(source);\n    }\n\n<fim_suffix>    @Override\n    public Term fromJSONObject(Object parsed) throws MarshalException\n    {\n        return baseType.fromJSONObject(parsed);\n    }\n\n    @Override\n    public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)\n    {\n        return baseType.toJSONString(buffer, protocolVersion);\n    }\n\n    @Override\n    public boolean isCompatibleWith(AbstractType<?> otherType)\n    {\n        if (!(otherType instanceof ReversedType))\n            return false;\n\n        return this.baseType.isCompatibleWith(((ReversedType) otherType).baseType);\n    }\n\n    @Override\n    public boolean isValueCompatibleWith(AbstractType<?> otherType)\n    {\n        return this.baseType.isValueCompatibleWith(otherType);\n    }\n\n    @Override\n    public CQL3Type asCQL3Type()\n    {\n        return baseType.asCQL3Type();\n    }\n\n    public TypeSerializer<T> getSerializer()\n    {\n        return baseType.getSerializer();\n    }\n\n    @Override\n    public boolean referencesUserType(ByteBuffer name)\n    {\n        return baseType.referencesUserType(name);\n    }\n\n    @Override\n    public AbstractType<?> expandUserTypes()\n    {\n        return getInstance(baseType.expandUserTypes());\n    }\n\n    @Override\n    public ReversedType<?> withUpdatedUserType(UserType udt)\n    {\n        if (!referencesUserType(udt.name))\n            return this;\n\n        instances.remove(baseType);\n\n        return getInstance(baseType.withUpdatedUserType(udt));\n    }\n\n    @Override\n    public int valueLengthIfFixed()\n    {\n        return baseType.valueLengthIfFixed();\n    }\n\n    @Override\n    public boolean isReversed()\n    {\n        return true;\n    }\n\n    @Override\n    public String toString()\n    {\n        return getClass().getName() + \"(\" + baseType + \")\";\n    }\n}<fim_middle>// function below has no smell\n"}