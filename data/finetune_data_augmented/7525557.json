{"text": "<fim_prefix>/*\n * Copyright 2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.hateoas.mediatype.collectionjson;\n\nimport lombok.AccessLevel;\nimport lombok.Value;\nimport lombok.experimental.Wither;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.springframework.hateoas.Link;\nimport org.springframework.hateoas.Links;\nimport org.springframework.hateoas.Links.MergeMode;\nimport org.springframework.lang.Nullable;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n/**\n * Representation of the \"collection\" part of a Collection+JSON document.\n *\n * @author Greg Turnquist\n */\n<fim_suffix>@Value\n@Wither(AccessLevel.PACKAGE)\nclass CollectionJson<T> {\n\n\tprivate String version;\n\tprivate @Nullable String href;\n\n\tprivate @JsonInclude(Include.NON_EMPTY) Links links;\n\tprivate @JsonInclude(Include.NON_EMPTY) List<CollectionJsonItem<T>> items;\n\tprivate @JsonInclude(Include.NON_EMPTY) List<CollectionJsonQuery> queries;\n\tprivate @JsonInclude(Include.NON_NULL) @Nullable CollectionJsonTemplate template;\n\tprivate @JsonInclude(Include.NON_NULL) @Nullable CollectionJsonError error;\n\n\t@JsonCreator\n\tCollectionJson(@JsonProperty(\"version\") String version, //\n\t\t\t@JsonProperty(\"href\") @Nullable String href, //\n\t\t\t@JsonProperty(\"links\") @Nullable Links links, //\n\t\t\t@JsonProperty(\"items\") @Nullable List<CollectionJsonItem<T>> items, //\n\t\t\t@JsonProperty(\"queries\") @Nullable List<CollectionJsonQuery> queries, //\n\t\t\t@JsonProperty(\"template\") @Nullable CollectionJsonTemplate template, //\n\t\t\t@JsonProperty(\"error\") @Nullable CollectionJsonError error) {\n\n\t\tthis.version = version;\n\t\tthis.href = href;\n\t\tthis.links = links == null ? Links.NONE : links;\n\t\tthis.items = items == null ? Collections.emptyList() : items;\n\t\tthis.queries = queries == null ? Collections.emptyList() : queries;\n\t\tthis.template = template;\n\t\tthis.error = error;\n\t}\n\n\tCollectionJson() {\n\t\tthis(\"1.0\", null, Links.NONE, Collections.emptyList(), null, null, null);\n\t}\n\n\t@SafeVarargs\n\tfinal CollectionJson<T> withItems(CollectionJsonItem<T>... items) {\n\t\treturn withItems(Arrays.asList(items));\n\t}\n\n\tCollectionJson<T> withItems(List<CollectionJsonItem<T>> items) {\n\t\treturn new CollectionJson<>(version, href, links, items, queries, template, error);\n\t}\n\n\tCollectionJson<T> withLinks(Link... links) {\n\t\treturn withLinks(Links.of(links));\n\t}\n\n\tCollectionJson<T> withLinks(Links links) {\n\t\treturn new CollectionJson<>(version, href, links, items, queries, template, error);\n\t}\n\n\tCollectionJson<T> withOwnSelfLink() {\n\n\t\tString href = this.href;\n\n\t\tif (href == null) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn withLinks(Links.of(new Link(href)).merge(MergeMode.SKIP_BY_REL, links));\n\t}\n\n\tboolean hasItems() {\n\t\treturn !items.isEmpty();\n\t}\n}<fim_middle>// class below has no smell\n"}