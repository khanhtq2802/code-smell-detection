{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.artemis.core.transaction;\n\nimport javax.json.JsonArrayBuilder;\nimport javax.json.JsonObject;\nimport javax.json.JsonObjectBuilder;\nimport javax.transaction.xa.Xid;\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.activemq.artemis.api.core.JsonUtil;\nimport org.apache.activemq.artemis.api.core.Message;\nimport org.apache.activemq.artemis.core.server.MessageReference;\nimport org.apache.activemq.artemis.core.server.impl.RefsOperation;\nimport org.apache.activemq.artemis.core.transaction.impl.XidImpl;\nimport org.apache.activemq.artemis.utils.JsonLoader;\n\npublic abstract class TransactionDetail {\n\n   public static final String KEY_CREATION_TIME = \"creation_time\";\n\n   public static final String KEY_XID_AS_BASE64 = \"xid_as_base64\";\n\n   public static final String KEY_XID_FORMAT_ID = \"xid_format_id\";\n\n   public static final String KEY_XID_GLOBAL_TXID = \"xid_global_txid\";\n\n   public static final String KEY_XID_BRANCH_QUAL = \"xid_branch_qual\";\n\n   public static final String KEY_TX_RELATED_MESSAGES = \"tx_related_messages\";\n\n   public static final String KEY_MSG_OP_TYPE = \"message_operation_type\";\n\n   public static final String KEY_MSG_BODY_BUFFER = \"message_body\";\n\n   public static final String KEY_MSG_TYPE = \"message_type\";\n\n   public static final String KEY_MSG_PROPERTIES = \"message_properties\";\n\n   private final Xid xid;\n   private final Transaction transaction;\n   private final Long creationTime;\n\n<fim_suffix>   public TransactionDetail(Xid xid, Transaction tx, Long creation) {\n      this.xid = xid;\n      this.transaction = tx;\n      this.creationTime = creation;\n   }\n\n   public JsonObject toJSON() throws Exception {\n      DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM);\n      JsonObjectBuilder detailJson = JsonLoader.createObjectBuilder().add(KEY_CREATION_TIME, dateFormat.format(new Date(this.creationTime))).add(KEY_XID_AS_BASE64, XidImpl.toBase64String(this.xid)).add(KEY_XID_FORMAT_ID, this.xid.getFormatId()).add(KEY_XID_GLOBAL_TXID, new String(this.xid.getGlobalTransactionId())).add(KEY_XID_BRANCH_QUAL, new String(this.xid.getBranchQualifier()));\n\n      JsonArrayBuilder msgsJson = JsonLoader.createArrayBuilder();\n\n      List<TransactionOperation> txops = null;\n\n      if (this.transaction != null) {\n         txops = this.transaction.getAllOperations();\n      }\n      if (txops == null) {\n         return detailJson.build();\n      }\n\n      for (TransactionOperation op : txops) {\n         String opClassName = op.getClass().getName();\n         String opType = null;\n         if (opClassName.equals(\"org.apache.activemq.artemis.core.postoffice.impl.PostOfficeImpl$AddOperation\")) {\n            opType = \"(+) send\";\n         } else if (opClassName.equals(RefsOperation.class.getName())) {\n            opType = \"(-) receive\";\n         }\n\n         List<MessageReference> msgs = op.getRelatedMessageReferences();\n         if (msgs == null) {\n            continue;\n         }\n\n         for (MessageReference ref : msgs) {\n            JsonObjectBuilder msgJson = JsonLoader.createObjectBuilder();\n\n            msgJson.add(KEY_MSG_OP_TYPE, opType);\n\n            Message msg = ref.getMessage().copy();\n\n            msgJson.add(KEY_MSG_TYPE, decodeMessageType(msg));\n            JsonUtil.addToObject(KEY_MSG_PROPERTIES, decodeMessageProperties(msg), msgJson);\n            msgsJson.add(msgJson);\n         }\n      }\n      detailJson.add(KEY_TX_RELATED_MESSAGES, msgsJson);\n      return detailJson.build();\n   }\n\n   public abstract String decodeMessageType(Message msg);\n\n   public abstract Map<String, Object> decodeMessageProperties(Message msg);\n}<fim_middle>// function below has no smell\n"}