{"text": "<fim_prefix>    public final void entryRuleXBasicForLoopExpression() throws RecognitionException {\n        try {\n            // InternalXImportSectionTestLang.g:1005:1: ( ruleXBasicForLoopExpression EOF )\n            // InternalXImportSectionTestLang.g:1006:1: ruleXBasicForLoopExpression EOF\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXBasicForLoopExpressionRule()); \n            }\n            pushFollow(FOLLOW_1);\n            ruleXBasicForLoopExpression();\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXBasicForLoopExpressionRule()); \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }\n    // $ANTLR end \"entryRuleXBasicForLoopExpression\"\n    // $ANTLR start \"ruleXBasicForLoopExpression\"\n    // InternalXImportSectionTestLang.g:1013:1: ruleXBasicForLoopExpression : ( ( rule__XBasicForLoopExpression__Group__0 ) ) ;\n    public final void ruleXBasicForLoopExpression() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            // InternalXImportSectionTestLang.g:1017:2: ( ( ( rule__XBasicForLoopExpression__Group__0 ) ) )\n            // InternalXImportSectionTestLang.g:1018:2: ( ( rule__XBasicForLoopExpression__Group__0 ) )\n            {\n            // InternalXImportSectionTestLang.g:1018:2: ( ( rule__XBasicForLoopExpression__Group__0 ) )\n            // InternalXImportSectionTestLang.g:1019:3: ( rule__XBasicForLoopExpression__Group__0 )\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXBasicForLoopExpressionAccess().getGroup()); \n            }\n            // InternalXImportSectionTestLang.g:1020:3: ( rule__XBasicForLoopExpression__Group__0 )\n            // InternalXImportSectionTestLang.g:1020:4: rule__XBasicForLoopExpression__Group__0\n            {\n            pushFollow(FOLLOW_2);\n            rule__XBasicForLoopExpression__Group__0();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXBasicForLoopExpressionAccess().getGroup()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    // $ANTLR end \"ruleXBasicForLoopExpression\"\n    // $ANTLR start \"entryRuleXWhileExpression\"\n    // InternalXImportSectionTestLang.g:1029:1: entryRuleXWhileExpression : ruleXWhileExpression EOF ;\n    public final void entryRuleXWhileExpression() throws RecognitionException {\n        try {\n            // InternalXImportSectionTestLang.g:1030:1: ( ruleXWhileExpression EOF )\n            // InternalXImportSectionTestLang.g:1031:1: ruleXWhileExpression EOF\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXWhileExpressionRule()); \n            }\n            pushFollow(FOLLOW_1);\n            ruleXWhileExpression();\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXWhileExpressionRule()); \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }\n    // $ANTLR end \"entryRuleXWhileExpression\"\n    // $ANTLR start \"ruleXWhileExpression\"\n    // InternalXImportSectionTestLang.g:1038:1: ruleXWhileExpression : ( ( rule__XWhileExpression__Group__0 ) ) ;\n    public final void ruleXWhileExpression() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            // InternalXImportSectionTestLang.g:1042:2: ( ( ( rule__XWhileExpression__Group__0 ) ) )\n            // InternalXImportSectionTestLang.g:1043:2: ( ( rule__XWhileExpression__Group__0 ) )\n            {\n            // InternalXImportSectionTestLang.g:1043:2: ( ( rule__XWhileExpression__Group__0 ) )\n            // InternalXImportSectionTestLang.g:1044:3: ( rule__XWhileExpression__Group__0 )\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXWhileExpressionAccess().getGroup()); \n            }\n            // InternalXImportSectionTestLang.g:1045:3: ( rule__XWhileExpression__Group__0 )\n            // InternalXImportSectionTestLang.g:1045:4: rule__XWhileExpression__Group__0\n            {\n            pushFollow(FOLLOW_2);\n            rule__XWhileExpression__Group__0();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXWhileExpressionAccess().getGroup()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    // $ANTLR end \"ruleXWhileExpression\"\n    // $ANTLR start \"entryRuleXDoWhileExpression\"\n    // InternalXImportSectionTestLang.g:1054:1: entryRuleXDoWhileExpression : ruleXDoWhileExpression EOF ;\n    public final void entryRuleXDoWhileExpression() throws RecognitionException {\n        try {\n            // InternalXImportSectionTestLang.g:1055:1: ( ruleXDoWhileExpression EOF )\n            // InternalXImportSectionTestLang.g:1056:1: ruleXDoWhileExpression EOF\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXDoWhileExpressionRule()); \n            }\n            pushFollow(FOLLOW_1);\n            ruleXDoWhileExpression();\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXDoWhileExpressionRule()); \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }\n    // $ANTLR end \"entryRuleXDoWhileExpression\"\n    // $ANTLR start \"ruleXDoWhileExpression\"\n    // InternalXImportSectionTestLang.g:1063:1: ruleXDoWhileExpression : ( ( rule__XDoWhileExpression__Group__0 ) ) ;\n<fim_suffix>    public final void ruleXDoWhileExpression() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            // InternalXImportSectionTestLang.g:1067:2: ( ( ( rule__XDoWhileExpression__Group__0 ) ) )\n            // InternalXImportSectionTestLang.g:1068:2: ( ( rule__XDoWhileExpression__Group__0 ) )\n            {\n            // InternalXImportSectionTestLang.g:1068:2: ( ( rule__XDoWhileExpression__Group__0 ) )\n            // InternalXImportSectionTestLang.g:1069:3: ( rule__XDoWhileExpression__Group__0 )\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXDoWhileExpressionAccess().getGroup()); \n            }\n            // InternalXImportSectionTestLang.g:1070:3: ( rule__XDoWhileExpression__Group__0 )\n            // InternalXImportSectionTestLang.g:1070:4: rule__XDoWhileExpression__Group__0\n            {\n            pushFollow(FOLLOW_2);\n            rule__XDoWhileExpression__Group__0();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXDoWhileExpressionAccess().getGroup()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }<fim_middle>// function below has no smell\n"}