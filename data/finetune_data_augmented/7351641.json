{"text": "<fim_prefix>/*\n * Copyright 2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.oreilly.springdata.mongodb.core;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.springframework.data.mongodb.core.index.Indexed;\nimport org.springframework.data.mongodb.core.mapping.Document;\nimport org.springframework.data.mongodb.core.mapping.Field;\nimport org.springframework.util.Assert;\n\n/**\n * A customer.\n * \n * @author Oliver Gierke\n */\n<fim_suffix>@Document\npublic class Customer extends AbstractDocument {\n\n\tprivate String firstname, lastname;\n\n\t@Field(\"email\")\n\t@Indexed(unique = true)\n\tprivate EmailAddress emailAddress;\n\tprivate Set<Address> addresses = new HashSet<Address>();\n\n\t/**\n\t * Creates a new {@link Customer} from the given firstname and lastname.\n\t * \n\t * @param firstname must not be {@literal null} or empty.\n\t * @param lastname must not be {@literal null} or empty.\n\t */\n\tpublic Customer(String firstname, String lastname) {\n\n\t\tAssert.hasText(firstname);\n\t\tAssert.hasText(lastname);\n\n\t\tthis.firstname = firstname;\n\t\tthis.lastname = lastname;\n\t}\n\n\tprotected Customer() {\n\n\t}\n\n\t/**\n\t * Adds the given {@link Address} to the {@link Customer}.\n\t * \n\t * @param address must not be {@literal null}.\n\t */\n\tpublic void add(Address address) {\n\n\t\tAssert.notNull(address);\n\t\tthis.addresses.add(address);\n\t}\n\n\t/**\n\t * Returns the firstname of the {@link Customer}.\n\t * \n\t * @return\n\t */\n\tpublic String getFirstname() {\n\t\treturn firstname;\n\t}\n\n\t/**\n\t * Returns the lastname of the {@link Customer}.\n\t * \n\t * @return\n\t */\n\tpublic String getLastname() {\n\t\treturn lastname;\n\t}\n\n\t/**\n\t * Sets the lastname of the {@link Customer}.\n\t * \n\t * @param lastname\n\t */\n\tpublic void setLastname(String lastname) {\n\t\tthis.lastname = lastname;\n\t}\n\n\t/**\n\t * Returns the {@link EmailAddress} of the {@link Customer}.\n\t * \n\t * @return\n\t */\n\tpublic EmailAddress getEmailAddress() {\n\t\treturn emailAddress;\n\t}\n\n\t/**\n\t * Sets the {@link Customer}'s {@link EmailAddress}.\n\t * \n\t * @param emailAddress must not be {@literal null}.\n\t */\n\tpublic void setEmailAddress(EmailAddress emailAddress) {\n\t\tthis.emailAddress = emailAddress;\n\t}\n\n\t/**\n\t * Return the {@link Customer}'s addresses.\n\t * \n\t * @return\n\t */\n\tpublic Set<Address> getAddresses() {\n\t\treturn Collections.unmodifiableSet(addresses);\n\t}\n}<fim_middle>// class below is data class\n"}