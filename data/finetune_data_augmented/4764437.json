{"text": "<fim_prefix>   * @throws IOException\n   * @deprecated use {@link #fromProperties}\n   */\n  @Deprecated\n  public static FileSystem getProxiedFileSystem(@NonNull final String userNameToProxyAs, Properties properties,\n      URI fsURI) throws IOException {\n    return getProxiedFileSystem(userNameToProxyAs, properties, fsURI, new Configuration());\n  }\n  /**\n   * Gets a {@link FileSystem} that can perform any operations allowed by the specified userNameToProxyAs.\n   *\n   * @param userNameToProxyAs The name of the user the super user should proxy as\n   * @param properties {@link java.util.Properties} containing initialization properties.\n   * @param conf The {@link Configuration} for the {@link FileSystem} that should be created.\n   * @return a {@link FileSystem} that can execute commands on behalf of the specified userNameToProxyAs\n   * @throws IOException\n   * @deprecated use {@link #fromProperties}\n   */\n  @Deprecated\n  public static FileSystem getProxiedFileSystem(@NonNull final String userNameToProxyAs, Properties properties,\n      Configuration conf) throws IOException {\n    return getProxiedFileSystem(userNameToProxyAs, properties, FileSystem.getDefaultUri(conf), conf);\n  }\n  /**\n   * Gets a {@link FileSystem} that can perform any operations allowed by the specified userNameToProxyAs.\n   *\n   * @param userNameToProxyAs The name of the user the super user should proxy as\n   * @param properties {@link java.util.Properties} containing initialization properties.\n   * @param fsURI The {@link URI} for the {@link FileSystem} that should be created.\n   * @param configuration The {@link Configuration} for the {@link FileSystem} that should be created.\n   * @return a {@link FileSystem} that can execute commands on behalf of the specified userNameToProxyAs\n   * @throws IOException\n   * @deprecated Use {@link #fromProperties}\n   */\n  @Deprecated\n  public static FileSystem getProxiedFileSystem(@NonNull final String userNameToProxyAs, final Properties properties,\n      final URI fsURI, final Configuration configuration) throws IOException {\n    return getProxiedFileSystem(userNameToProxyAs, properties, fsURI, configuration, null);\n  }\n  /**\n   * Gets a {@link FileSystem} that can perform any operations allowed by the specified userNameToProxyAs.\n   *\n   * @param userNameToProxyAs The name of the user the super user should proxy as\n   * @param properties {@link java.util.Properties} containing initialization properties.\n   * @param fsURI The {@link URI} for the {@link FileSystem} that should be created.\n   * @param configuration The {@link Configuration} for the {@link FileSystem} that should be created.\n   * @param referenceFS reference {@link FileSystem}. Used to replicate certain decorators of the reference FS:\n   *                    {@link RateControlledFileSystem}.\n   * @return a {@link FileSystem} that can execute commands on behalf of the specified userNameToProxyAs\n   * @throws IOException\n   */\n  @Builder(builderClassName = \"ProxiedFileSystemFromProperties\", builderMethodName = \"fromProperties\")\n  private static FileSystem getProxiedFileSystem(@NonNull String userNameToProxyAs, Properties properties, URI fsURI,\n      Configuration configuration, FileSystem referenceFS) throws IOException {\n    Preconditions.checkNotNull(userNameToProxyAs, \"Must provide a user name to proxy as.\");\n    Preconditions.checkNotNull(properties, \"Properties is a mandatory field for proxiedFileSystem generation.\");\n    URI actualURI = resolveUri(fsURI, configuration, referenceFS);\n    Configuration actualConfiguration = resolveConfiguration(configuration, referenceFS);\n    try {\n      return USER_NAME_TO_FILESYSTEM_CACHE.get(getFileSystemKey(actualURI, userNameToProxyAs, referenceFS),\n          new CreateProxiedFileSystemFromProperties(userNameToProxyAs, properties, actualURI, actualConfiguration,\n              referenceFS));\n    } catch (ExecutionException ee) {\n      throw new IOException(\"Failed to get proxied file system for user \" + userNameToProxyAs, ee);\n    }\n  }\n  /**\n   * Cached version of {@link ProxiedFileSystemUtils#createProxiedFileSystemUsingKeytab(State, URI, Configuration)}.\n   * @deprecated use {@link #fromKeytab}.\n   */\n  @Deprecated\n  public static FileSystem getProxiedFileSystemUsingKeytab(State state, URI fsURI, Configuration conf)\n      throws ExecutionException {\n    Preconditions.checkArgument(state.contains(ConfigurationKeys.FS_PROXY_AS_USER_NAME));\n    Preconditions.checkArgument(state.contains(ConfigurationKeys.SUPER_USER_NAME_TO_PROXY_AS_OTHERS));\n    Preconditions.checkArgument(state.contains(ConfigurationKeys.SUPER_USER_KEY_TAB_LOCATION));\n    return getProxiedFileSystemUsingKeytab(state.getProp(ConfigurationKeys.FS_PROXY_AS_USER_NAME),\n        state.getProp(ConfigurationKeys.SUPER_USER_NAME_TO_PROXY_AS_OTHERS),\n        new Path(state.getProp(ConfigurationKeys.SUPER_USER_KEY_TAB_LOCATION)), fsURI, conf);\n  }\n  /**\n   * Cached version of {@link ProxiedFileSystemUtils#createProxiedFileSystemUsingKeytab(String, String, Path, URI, Configuration)}.\n   * @deprecated use {@link #fromKeytab}.\n   */\n  @Deprecated\n  public static FileSystem getProxiedFileSystemUsingKeytab(@NonNull final String userNameToProxyAs,\n      final String superUserName, final Path superUserKeytabLocation, final URI fsURI, final Configuration conf)\n      throws ExecutionException {\n    try {\n      return getProxiedFileSystemUsingKeytab(userNameToProxyAs, superUserName, superUserKeytabLocation, fsURI, conf,\n          null);\n    } catch (IOException ioe) {\n      throw new ExecutionException(ioe);\n    }\n  }\n  /**\n   * Cached version of {@link ProxiedFileSystemUtils#createProxiedFileSystemUsingKeytab(String, String, Path, URI, Configuration)}.\n   */\n  @Builder(builderClassName = \"ProxiedFileSystemFromKeytab\", builderMethodName = \"fromKeytab\")\n  private static FileSystem getProxiedFileSystemUsingKeytab(@NonNull final String userNameToProxyAs,\n      final String superUserName, final Path superUserKeytabLocation, final URI fsURI, final Configuration conf,\n      FileSystem referenceFS) throws IOException, ExecutionException {\n    Preconditions.checkNotNull(userNameToProxyAs, \"Must provide a user name to proxy as.\");\n    Preconditions.checkNotNull(superUserName, \"Must provide a super user name.\");\n    Preconditions.checkNotNull(superUserKeytabLocation, \"Must provide a keytab location.\");\n    URI actualURI = resolveUri(fsURI, conf, referenceFS);\n    Configuration actualConfiguration = resolveConfiguration(conf, referenceFS);\n    return USER_NAME_TO_FILESYSTEM_CACHE.get(getFileSystemKey(actualURI, userNameToProxyAs, referenceFS),\n        new CreateProxiedFileSystemFromKeytab(userNameToProxyAs, superUserName, superUserKeytabLocation, actualURI,\n            actualConfiguration, referenceFS));\n  }\n  /**\n   * Cached version of {@link ProxiedFileSystemUtils#createProxiedFileSystemUsingToken(String, Token, URI, Configuration)}.\n   * @deprecated use {@link #fromToken}.\n   */\n  @Deprecated\n  public static FileSystem getProxiedFileSystemUsingToken(@NonNull final String userNameToProxyAs,\n      final Token<?> userNameToken, final URI fsURI, final Configuration conf) throws ExecutionException {\n    try {\n      return getProxiedFileSystemUsingToken(userNameToProxyAs, userNameToken, fsURI, conf, null);\n    } catch (IOException ioe) {\n      throw new ExecutionException(ioe);\n    }\n  }\n  /**\n   * Cached version of {@link ProxiedFileSystemUtils#createProxiedFileSystemUsingToken(String, Token, URI, Configuration)}.\n   */\n  @Builder(builderClassName = \"ProxiedFileSystemFromToken\", builderMethodName = \"fromToken\")\n  private static FileSystem getProxiedFileSystemUsingToken(@NonNull String userNameToProxyAs, Token<?> userNameToken,\n      URI fsURI, Configuration conf, FileSystem referenceFS) throws IOException, ExecutionException {\n    Preconditions.checkNotNull(userNameToProxyAs, \"Must provide a user name to proxy as.\");\n    Preconditions.checkNotNull(userNameToken, \"Must provide token for user to proxy.\");\n    URI actualURI = resolveUri(fsURI, conf, referenceFS);\n    Configuration actualConfiguration = resolveConfiguration(conf, referenceFS);\n    return USER_NAME_TO_FILESYSTEM_CACHE.get(getFileSystemKey(actualURI, userNameToProxyAs, referenceFS),\n        new CreateProxiedFileSystemFromToken(userNameToProxyAs, userNameToken, actualURI, actualConfiguration,\n            referenceFS));\n  }\n<fim_suffix>  @AllArgsConstructor\n  private static class CreateProxiedFileSystemFromProperties implements Callable<FileSystem> {\n    @NonNull\n    private final String userNameToProxyAs;\n    @NonNull\n    private final Properties properties;\n    @NonNull\n    private final URI uri;\n    @NonNull\n    private final Configuration configuration;\n    private final FileSystem referenceFS;\n    @Override\n    public FileSystem call() throws Exception {\n      FileSystem fs = ProxiedFileSystemUtils.createProxiedFileSystem(this.userNameToProxyAs, this.properties, this.uri,\n          this.configuration);\n      if (this.referenceFS != null) {\n        return decorateFilesystemFromReferenceFS(fs, this.referenceFS);\n      }\n      return fs;\n    }\n  }<fim_middle>// class below has no smell\n"}