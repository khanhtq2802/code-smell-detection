{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage freemarker.ext.jsp;\n\nimport java.beans.IntrospectionException;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Map;\n\nimport javax.servlet.jsp.JspContext;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.tagext.JspFragment;\nimport javax.servlet.jsp.tagext.JspTag;\nimport javax.servlet.jsp.tagext.SimpleTag;\nimport javax.servlet.jsp.tagext.Tag;\n\nimport freemarker.core.Environment;\nimport freemarker.template.TemplateDirectiveBody;\nimport freemarker.template.TemplateDirectiveModel;\nimport freemarker.template.TemplateException;\nimport freemarker.template.TemplateModel;\n\n/**\n * Adapts a {@link SimpleTag}-based custom JSP tag to be a value that's callable in templates as an user-defined\n * directive. For {@link Tag}-based custom JSP tags {@link TagTransformModel} is used instead.\n */\n<fim_suffix>class SimpleTagDirectiveModel extends JspTagModelBase implements TemplateDirectiveModel {\n    protected SimpleTagDirectiveModel(String tagName, Class tagClass) throws IntrospectionException {\n        super(tagName, tagClass);\n        if (!SimpleTag.class.isAssignableFrom(tagClass)) {\n            throw new IllegalArgumentException(tagClass.getName() + \n                    \" does not implement either the \" + Tag.class.getName() + \n                    \" interface or the \" + SimpleTag.class.getName() + \n                    \" interface.\");\n        }\n    }\n\n    public void execute(Environment env, Map args, TemplateModel[] outArgs, \n            final TemplateDirectiveBody body) \n    throws TemplateException, IOException {\n        try {\n            SimpleTag tag = (SimpleTag) getTagInstance();\n            final FreeMarkerPageContext pageContext = PageContextFactory.getCurrentPageContext();\n            pageContext.pushWriter(new JspWriterAdapter(env.getOut()));\n            try {\n                tag.setJspContext(pageContext);\n                JspTag parentTag = (JspTag) pageContext.peekTopTag(JspTag.class);\n                if (parentTag != null) {\n                    tag.setParent(parentTag);\n                }\n                setupTag(tag, args, pageContext.getObjectWrapper());\n                if (body != null) {\n                    tag.setJspBody(new JspFragment() {\n                        @Override\n                        public JspContext getJspContext() {\n                            return pageContext;\n                        }\n                        \n                        @Override\n                        public void invoke(Writer out) throws JspException, IOException {\n                            try {\n                                body.render(out == null ? pageContext.getOut() : out);\n                            } catch (TemplateException e) {\n                                throw new TemplateExceptionWrapperJspException(e);\n                            }\n                        }\n                    });\n                    pageContext.pushTopTag(tag);\n                    try {\n                        tag.doTag();\n                    } finally {\n                        pageContext.popTopTag();\n                    }\n                } else {\n                    tag.doTag();\n                }\n            } finally {\n                pageContext.popWriter();\n            }\n        } catch (TemplateException e) {\n            throw e;\n        } catch (Exception e) {\n            throw toTemplateModelExceptionOrRethrow(e);\n        }\n    }\n    \n    static final class TemplateExceptionWrapperJspException extends JspException {\n\n        public TemplateExceptionWrapperJspException(TemplateException cause) {\n            super(\"Nested content has thrown template exception\", cause);\n        }\n        \n        public TemplateException getCause() {\n            return (TemplateException) super.getCause();\n        }\n        \n    }\n    \n}<fim_middle>// class below has no smell\n"}