{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * <p/>\n * http://www.apache.org/licenses/LICENSE-2.0\n * <p/>\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.eagle.metadata.service.memory;\n\nimport com.google.common.base.Preconditions;\nimport com.google.inject.Singleton;\nimport org.apache.eagle.metadata.exceptions.EntityNotFoundException;\nimport org.apache.eagle.metadata.model.SiteEntity;\nimport org.apache.eagle.metadata.service.SiteEntityService;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\n@Singleton\npublic class SiteEntityEntityServiceMemoryImpl implements SiteEntityService {\n    private Map<String, SiteEntity> siteId2EntityMap = new HashMap<>();\n\n    @Override\n    public Collection<SiteEntity> findAll() {\n        return siteId2EntityMap.values();\n    }\n\n    @Override\n    public SiteEntity getByUUID(String uuid) throws EntityNotFoundException {\n        Optional<SiteEntity> entityOptional = siteId2EntityMap.values().stream().filter((site) -> uuid.equals(site.getUuid())).findAny();\n        if (entityOptional.isPresent()) {\n            return entityOptional.get();\n        } else {\n            throw new EntityNotFoundException(\"Site with UUID: \" + uuid + \" not found\");\n        }\n    }\n\n<fim_suffix>    @Override\n    public SiteEntity create(SiteEntity entity) {\n        Preconditions.checkNotNull(entity.getSiteId(), \"SiteId is null: \" + entity.getSiteId());\n        if (siteId2EntityMap.containsKey(entity.getSiteId())) {\n            throw new IllegalArgumentException(\"Duplicated siteId: \" + entity.getSiteId());\n        }\n        entity.ensureDefault();\n        siteId2EntityMap.put(entity.getSiteId(), entity);\n        return entity;\n    }\n\n    @Override\n    public SiteEntity getBySiteId(String siteId) throws EntityNotFoundException {\n        if (!siteId2EntityMap.containsKey(siteId)) {\n            throw new EntityNotFoundException(\"Site with siteId: \" + siteId + \" not exists\");\n        }\n        return siteId2EntityMap.get(siteId);\n    }\n\n    @Override\n    public SiteEntity deleteBySiteId(String siteId) throws EntityNotFoundException {\n        return siteId2EntityMap.remove(getBySiteId(siteId).getSiteId());\n    }\n\n    @Override\n    public SiteEntity deleteByUUID(String uuid) throws EntityNotFoundException {\n        return siteId2EntityMap.remove(getByUUID(uuid).getSiteId());\n    }\n\n    @Override\n    public SiteEntity update(SiteEntity siteEntity) throws EntityNotFoundException {\n        if (siteEntity.getSiteId() == null && siteEntity.getUuid() == null) {\n            throw new IllegalArgumentException(\"siteId and UUID are both null, don't know how to update\");\n        }\n        SiteEntity oldEntity = (siteEntity.getSiteId() != null) ? getBySiteId(siteEntity.getSiteId()) : getByUUID(siteEntity.getUuid());\n        siteEntity.setUuid(oldEntity.getUuid());\n        siteEntity.setCreatedTime(oldEntity.getCreatedTime());\n        siteEntity.ensureDefault();\n        siteId2EntityMap.put(siteEntity.getSiteId(), siteEntity);\n        return siteEntity;\n    }\n}<fim_middle>// function below has no smell\n"}