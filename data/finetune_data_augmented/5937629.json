{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n    * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.openejb.jee;\n\nimport org.metatype.sxc.jaxb.JAXBObject;\nimport org.metatype.sxc.jaxb.LifecycleCallback;\nimport org.metatype.sxc.jaxb.RuntimeContext;\nimport org.metatype.sxc.util.Attribute;\nimport org.metatype.sxc.util.XoXMLStreamReader;\nimport org.metatype.sxc.util.XoXMLStreamWriter;\n\nimport javax.xml.XMLConstants;\nimport javax.xml.bind.annotation.adapters.CollapsedStringAdapter;\nimport javax.xml.namespace.QName;\n\nimport static org.apache.openejb.jee.NamedMethod$JAXB.readNamedMethod;\nimport static org.apache.openejb.jee.NamedMethod$JAXB.writeNamedMethod;\n\n<fim_suffix>@SuppressWarnings({\n    \"StringEquality\"\n})\npublic class InitMethod$JAXB\n    extends JAXBObject<InitMethod> {\n\n\n    public InitMethod$JAXB() {\n        super(InitMethod.class, null, new QName(\"http://java.sun.com/xml/ns/javaee\".intern(), \"init-methodType\".intern()), NamedMethod$JAXB.class);\n    }\n\n    public static InitMethod readInitMethod(final XoXMLStreamReader reader, final RuntimeContext context)\n        throws Exception {\n        return _read(reader, context);\n    }\n\n    public static void writeInitMethod(final XoXMLStreamWriter writer, final InitMethod initMethod, final RuntimeContext context)\n        throws Exception {\n        _write(writer, initMethod, context);\n    }\n\n    public void write(final XoXMLStreamWriter writer, final InitMethod initMethod, final RuntimeContext context)\n        throws Exception {\n        _write(writer, initMethod, context);\n    }\n\n    public final static InitMethod _read(final XoXMLStreamReader reader, RuntimeContext context)\n        throws Exception {\n\n        // Check for xsi:nil\n        if (reader.isXsiNil()) {\n            return null;\n        }\n\n        if (context == null) {\n            context = new RuntimeContext();\n        }\n\n        final InitMethod initMethod = new InitMethod();\n        context.beforeUnmarshal(initMethod, LifecycleCallback.NONE);\n\n\n        // Check xsi:type\n        final QName xsiType = reader.getXsiType();\n        if (xsiType != null) {\n            if ((\"init-methodType\" != xsiType.getLocalPart()) || (\"http://java.sun.com/xml/ns/javaee\" != xsiType.getNamespaceURI())) {\n                return context.unexpectedXsiType(reader, InitMethod.class);\n            }\n        }\n\n        // Read attributes\n        for (final Attribute attribute : reader.getAttributes()) {\n            if ((\"id\" == attribute.getLocalName()) && ((\"\" == attribute.getNamespace()) || (attribute.getNamespace() == null))) {\n                // ATTRIBUTE: id\n                final String id = Adapters.collapsedStringAdapterAdapter.unmarshal(attribute.getValue());\n                context.addXmlId(reader, id, initMethod);\n                initMethod.id = id;\n            } else if (XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI != attribute.getNamespace()) {\n                context.unexpectedAttribute(attribute, new QName(\"\", \"id\"));\n            }\n        }\n\n        // Read elements\n        for (final XoXMLStreamReader elementReader : reader.getChildElements()) {\n            if ((\"create-method\" == elementReader.getLocalName()) && (\"http://java.sun.com/xml/ns/javaee\" == elementReader.getNamespaceURI())) {\n                // ELEMENT: createMethod\n                final NamedMethod createMethod = readNamedMethod(elementReader, context);\n                initMethod.createMethod = createMethod;\n            } else if ((\"bean-method\" == elementReader.getLocalName()) && (\"http://java.sun.com/xml/ns/javaee\" == elementReader.getNamespaceURI())) {\n                // ELEMENT: beanMethod\n                final NamedMethod beanMethod = readNamedMethod(elementReader, context);\n                initMethod.beanMethod = beanMethod;\n            } else {\n                context.unexpectedElement(elementReader, new QName(\"http://java.sun.com/xml/ns/javaee\", \"create-method\"), new QName(\"http://java.sun.com/xml/ns/javaee\", \"bean-method\"));\n            }\n        }\n\n        context.afterUnmarshal(initMethod, LifecycleCallback.NONE);\n\n        return initMethod;\n    }\n\n    public final InitMethod read(final XoXMLStreamReader reader, final RuntimeContext context)\n        throws Exception {\n        return _read(reader, context);\n    }\n\n    public final static void _write(final XoXMLStreamWriter writer, final InitMethod initMethod, RuntimeContext context)\n        throws Exception {\n        if (initMethod == null) {\n            writer.writeXsiNil();\n            return;\n        }\n\n        if (context == null) {\n            context = new RuntimeContext();\n        }\n\n        final String prefix = writer.getUniquePrefix(\"http://java.sun.com/xml/ns/javaee\");\n        if (InitMethod.class != initMethod.getClass()) {\n            context.unexpectedSubclass(writer, initMethod, InitMethod.class);\n            return;\n        }\n\n        context.beforeMarshal(initMethod, LifecycleCallback.NONE);\n\n\n        // ATTRIBUTE: id\n        final String idRaw = initMethod.id;\n        if (idRaw != null) {\n            String id = null;\n            try {\n                id = Adapters.collapsedStringAdapterAdapter.marshal(idRaw);\n            } catch (final Exception e) {\n                context.xmlAdapterError(initMethod, \"id\", CollapsedStringAdapter.class, String.class, String.class, e);\n            }\n            writer.writeAttribute(\"\", \"\", \"id\", id);\n        }\n\n        // ELEMENT: createMethod\n        final NamedMethod createMethod = initMethod.createMethod;\n        if (createMethod != null) {\n            writer.writeStartElement(prefix, \"create-method\", \"http://java.sun.com/xml/ns/javaee\");\n            writeNamedMethod(writer, createMethod, context);\n            writer.writeEndElement();\n        } else {\n            context.unexpectedNullValue(initMethod, \"createMethod\");\n        }\n\n        // ELEMENT: beanMethod\n        final NamedMethod beanMethod = initMethod.beanMethod;\n        if (beanMethod != null) {\n            writer.writeStartElement(prefix, \"bean-method\", \"http://java.sun.com/xml/ns/javaee\");\n            writeNamedMethod(writer, beanMethod, context);\n            writer.writeEndElement();\n        } else {\n            context.unexpectedNullValue(initMethod, \"beanMethod\");\n        }\n\n        context.afterMarshal(initMethod, LifecycleCallback.NONE);\n    }\n\n}<fim_middle>// class below has no smell\n"}