{"text": "<fim_prefix>  protected int line = 1;\n  protected boolean prevCharIsCR = false;\n  protected boolean prevCharIsLF = false;\n  protected java.io.Reader inputStream;\n  protected char[] nextCharBuf;\n  protected char[] buffer;\n  protected int maxNextCharInd = 0;\n  protected int nextCharInd = -1;\n  protected int inBuf = 0;\n  protected int tabSize = 8;\n  protected void setTabSize(int i) { tabSize = i; }\n  protected int getTabSize(int i) { return tabSize; }\n  protected void ExpandBuff(boolean wrapAround)\n  {\n    char[] newbuffer = new char[bufsize + 2048];\n    int newbufline[] = new int[bufsize + 2048];\n    int newbufcolumn[] = new int[bufsize + 2048];\n    try\n    {\n      if (wrapAround)\n      {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);\n        buffer = newbuffer;\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\n        bufline = newbufline;\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\n        bufcolumn = newbufcolumn;\n        bufpos += (bufsize - tokenBegin);\n    }\n    else\n    {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        buffer = newbuffer;\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        bufline = newbufline;\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        bufcolumn = newbufcolumn;\n        bufpos -= tokenBegin;\n      }\n    }\n    catch (Throwable t)\n    {\n      throw new Error(t.getMessage());\n    }\n    available = (bufsize += 2048);\n    tokenBegin = 0;\n  }\n  protected void FillBuff() throws java.io.IOException\n  {\n    int i;\n    if (maxNextCharInd == 4096)\n      maxNextCharInd = nextCharInd = 0;\n    try {\n      if ((i = inputStream.read(nextCharBuf, maxNextCharInd,\n                                          4096 - maxNextCharInd)) == -1)\n      {\n        inputStream.close();\n        throw new java.io.IOException();\n      }\n      else\n         maxNextCharInd += i;\n      return;\n    }\n    catch(java.io.IOException e) {\n      if (bufpos != 0)\n      {\n        --bufpos;\n        backup(0);\n      }\n      else\n      {\n        bufline[bufpos] = line;\n        bufcolumn[bufpos] = column;\n      }\n      throw e;\n    }\n  }\n  protected char ReadByte() throws java.io.IOException\n  {\n    if (++nextCharInd >= maxNextCharInd)\n      FillBuff();\n    return nextCharBuf[nextCharInd];\n  }\n/** @return starting character for token. */\n  public char BeginToken() throws java.io.IOException\n  {\n    if (inBuf > 0)\n    {\n      --inBuf;\n      if (++bufpos == bufsize)\n        bufpos = 0;\n      tokenBegin = bufpos;\n      return buffer[bufpos];\n    }\n    tokenBegin = 0;\n    bufpos = -1;\n    return readChar();\n  }\n  protected void AdjustBuffSize()\n  {\n    if (available == bufsize)\n    {\n      if (tokenBegin > 2048)\n      {\n        bufpos = 0;\n        available = tokenBegin;\n      }\n      else\n        ExpandBuff(false);\n    }\n    else if (available > tokenBegin)\n      available = bufsize;\n    else if ((tokenBegin - available) < 2048)\n      ExpandBuff(true);\n    else\n      available = tokenBegin;\n  }\n  protected void UpdateLineColumn(char c)\n  {\n    column++;\n    if (prevCharIsLF)\n    {\n      prevCharIsLF = false;\n      line += (column = 1);\n    }\n    else if (prevCharIsCR)\n    {\n      prevCharIsCR = false;\n      if (c == '\\n')\n      {\n        prevCharIsLF = true;\n      }\n      else\n        line += (column = 1);\n    }\n    switch (c)\n    {\n      case '\\r' :\n        prevCharIsCR = true;\n        break;\n      case '\\n' :\n        prevCharIsLF = true;\n        break;\n      case '\\t' :\n        column--;\n        column += (tabSize - (column % tabSize));\n        break;\n      default :\n        break;\n    }\n    bufline[bufpos] = line;\n    bufcolumn[bufpos] = column;\n  }\n/** Read a character. */\n  public char readChar() throws java.io.IOException\n  {\n    if (inBuf > 0)\n    {\n      --inBuf;\n      if (++bufpos == bufsize)\n        bufpos = 0;\n      return buffer[bufpos];\n    }\n    char c;\n    if (++bufpos == available)\n      AdjustBuffSize();\n    if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n    {\n      UpdateLineColumn(c);\n      int backSlashCnt = 1;\n      for (;;) // Read all the backslashes\n      {\n        if (++bufpos == available)\n          AdjustBuffSize();\n        try\n        {\n          if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n          {\n            UpdateLineColumn(c);\n            // found a non-backslash char.\n            if ((c == 'u') && ((backSlashCnt & 1) == 1))\n            {\n              if (--bufpos < 0)\n                bufpos = bufsize - 1;\n              break;\n            }\n            backup(backSlashCnt);\n            return '\\\\';\n          }\n        }\n        catch(java.io.IOException e)\n        {\n\t  // We are returning one backslash so we should only backup (count-1)\n          if (backSlashCnt > 1)\n            backup(backSlashCnt-1);\n          return '\\\\';\n        }\n        UpdateLineColumn(c);\n        backSlashCnt++;\n      }\n      // Here, we have seen an odd number of backslash's followed by a 'u'\n      try\n      {\n        while ((c = ReadByte()) == 'u')\n          ++column;\n        buffer[bufpos] = c = (char)(hexval(c) << 12 |\n                                    hexval(ReadByte()) << 8 |\n                                    hexval(ReadByte()) << 4 |\n                                    hexval(ReadByte()));\n        column += 4;\n      }\n      catch(java.io.IOException e)\n      {\n        throw new Error(\"Invalid escape character at line \" + line +\n                                         \" column \" + column + \".\");\n      }\n      if (backSlashCnt == 1)\n        return c;\n      else\n      {\n        backup(backSlashCnt - 1);\n        return '\\\\';\n      }\n    }\n    else\n    {\n      UpdateLineColumn(c);\n      return c;\n    }\n  }\n  @Deprecated\n  /**\n   * @deprecated\n   * @see #getEndColumn\n   */\n  public int getColumn() {\n    return bufcolumn[bufpos];\n  }\n  @Deprecated\n  /**\n   * @deprecated\n   * @see #getEndLine\n   */\n  public int getLine() {\n    return bufline[bufpos];\n  }\n/** Get end column. */\n  public int getEndColumn() {\n    return bufcolumn[bufpos];\n  }\n/** Get end line. */\n  public int getEndLine() {\n    return bufline[bufpos];\n  }\n/** @return column of token start */\n  public int getBeginColumn() {\n    return bufcolumn[tokenBegin];\n  }\n/** @return line number of token start */\n  public int getBeginLine() {\n    return bufline[tokenBegin];\n  }\n/** Retreat. */\n  public void backup(int amount) {\n    inBuf += amount;\n    if ((bufpos -= amount) < 0)\n      bufpos += bufsize;\n  }\n/** Constructor. */\n<fim_suffix>  public JavaCharStream(java.io.Reader dstream,\n                 int startline, int startcolumn, int buffersize)\n  {\n    inputStream = dstream;\n    line = startline;\n    column = startcolumn - 1;\n    available = bufsize = buffersize;\n    buffer = new char[buffersize];\n    bufline = new int[buffersize];\n    bufcolumn = new int[buffersize];\n    nextCharBuf = new char[4096];\n  }<fim_middle>// function below has no smell\n"}