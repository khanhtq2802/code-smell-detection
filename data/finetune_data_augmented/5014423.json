{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.lens.cli.table;\n\n\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.xml.bind.annotation.XmlType;\n\nimport org.apache.lens.api.metastore.XField;\nimport org.apache.lens.api.metastore.XFlattenedColumn;\nimport org.apache.lens.api.metastore.XFlattenedColumns;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\npublic class XFlattenedColumnTable {\n  private final String table;\n  Map<Class<? extends XField>, CollectionTable<XFlattenedColumn>> tables = Maps.newLinkedHashMap();\n  List<String> chainNames = Lists.newArrayList();\n  List<String> tableNames = Lists.newArrayList();\n\n<fim_suffix>  public XFlattenedColumnTable(XFlattenedColumns flattenedColumns, String table) {\n    this.table = table;\n    for (XFlattenedColumn column : flattenedColumns.getFlattenedColumn()) {\n      XField field = firstNonNull(column.getDimAttribute(), column.getMeasure(), column.getExpression());\n      if (field != null) {\n        if (!tables.containsKey(field.getClass())) {\n          tables.put(field.getClass(), CollectionTableFactory.getCollectionTable(field.getClass(), table));\n        }\n        tables.get(field.getClass()).getCollection().add(column);\n      } else {\n        if (column.getChainName() != null) {\n          chainNames.add(column.getChainName());\n        }\n        if (column.getTableName() != null) {\n          tableNames.add(column.getTableName());\n        }\n      }\n    }\n  }\n\n  public static <T> T firstNonNull(T... args) {\n    for (T arg : args) {\n      if (arg != null) {\n        return arg;\n      }\n    }\n    return null;\n  }\n\n\n  @Override\n  public String toString() {\n    String sep = \"=============================\";\n    StringBuilder sb = new StringBuilder();\n    for (Map.Entry<Class<? extends XField>, CollectionTable<XFlattenedColumn>> entry : tables.entrySet()) {\n      String title =\n        entry.getKey().getAnnotation(XmlType.class).name().replaceAll(\"^x_\", \"\").replaceAll(\"_\", \" \") + \"s\";\n      sb.append(title).append(\"\\n\").append(sep).append(\"\\n\").append(entry.getValue()).append(\"\\n\");\n    }\n    String sep1 = \"\";\n    if (!chainNames.isEmpty()) {\n      sb.append(\"Accessible Join Chains\\n\").append(sep).append(\"\\n\");\n      for (String chain : chainNames) {\n        sb.append(sep1).append(chain);\n        sep1 = \"\\n\";\n      }\n    }\n    sep1 = \"\";\n    if (!tableNames.isEmpty()) {\n      sb.append(\"Accessible Tables\\n\").append(sep).append(\"\\n\");\n      for (String table : tableNames) {\n        sb.append(sep1).append(table);\n        sep1 = \"\\n\";\n      }\n    }\n    return sb.toString();\n  }\n}<fim_middle>// function below has no smell\n"}