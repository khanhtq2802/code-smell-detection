{"text": "<fim_prefix>/*******************************************************************************\n * Copyright 2012-2015 Esri\n * \n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n * \n *  http://www.apache.org/licenses/LICENSE-2.0\n *  \n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n ******************************************************************************/\npackage com.esri.vehiclecommander.controller;\nimport com.esri.core.geometry.AngularUnit;\nimport com.esri.militaryapps.controller.LocationController.LocationMode;\nimport com.esri.militaryapps.controller.MessageController;\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.prefs.Preferences;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.DefaultHandler;\n/**\n * A controller for application configuration settings. For example, this class\n * manages settings used for sending position reports to other users.\n */\npublic class AppConfigController {\n    private static final String KEY_USERNAME = AppConfigController.class.getSimpleName() + \"username\";\n    private static final String KEY_VEHICLE_TYPE = AppConfigController.class.getSimpleName() + \"vehicleType\";\n    private static final String KEY_UNIQUE_ID = AppConfigController.class.getSimpleName() + \"uniqueId\";\n    private static final String KEY_SIC = AppConfigController.class.getSimpleName() + \"sic\";\n    private static final String KEY_PORT = AppConfigController.class.getSimpleName() + \"port\";\n    private static final String KEY_POSITION_MESSAGE_INTERVAL = AppConfigController.class.getSimpleName() + \"positionMessageInterval\";\n    private static final String KEY_VEHICLE_STATUS_MESSAGE_INTERVAL = AppConfigController.class.getSimpleName() + \"vehicleStatusMessageInterval\";\n    private static final String KEY_GPS_TYPE = AppConfigController.class.getSimpleName() + \"gpsType\";\n    private static final String KEY_GPX = AppConfigController.class.getSimpleName() + \"gpx\";\n    private static final String KEY_SPEED_MULTIPLIER = AppConfigController.class.getSimpleName() + \"speedMultiplier\";\n    private static final String KEY_MPK_CHOOSER_DIR = AppConfigController.class.getSimpleName() + \"mpkFileChooserDirectory\";\n    private static final String KEY_GPX_CHOOSER_DIR = AppConfigController.class.getSimpleName() + \"gpxFileChooserDirectory\";\n    private static final String KEY_SHOW_MESSAGE_LABELS = AppConfigController.class.getSimpleName() + \"showMessageLabels\";\n    private static final String KEY_DECORATED = AppConfigController.class.getSimpleName() + \"decorated\";\n    private static final String KEY_SHOW_MGRS_GRID = AppConfigController.class.getSimpleName() + \"showMgrsGrid\";\n    private static final String KEY_SHOW_LOCAL_TIME_ZONE = AppConfigController.class.getSimpleName() + \"showLocalTimeZone\";\n    private static final String KEY_MGRS_COORDINATE_NOTATION = AppConfigController.class.getSimpleName() + \"useMgrs\";\n    private static final String KEY_HEADING_UNITS = AppConfigController.class.getSimpleName() + \"headingUnits\";\n    private static final String KEY_GEOMESSAGE_VERSION = AppConfigController.class.getSimpleName() + \"geomessageVersion\";\n    private boolean gpsTypeDirty = false;\n    /**\n     * @param messageController the messageController to set\n     */\n    public void setMessageController(MessageController messageController) {\n        this.messageController = messageController;\n        if (null != messageController && -1 != getPort()) {\n            messageController.setPort(getPort());\n        }\n    }\n    public MessageController getMessageController() {\n        return messageController;\n    }\n<fim_suffix>    private class AppConfigHandler extends DefaultHandler {\n        private String username = null;\n        private String vehicleType = null;\n        private String uniqueId = null;\n        private String sic = null;\n        private int port = -1;\n        private int positionMessageInterval = -1;\n        private int vehicleStatusMessageInterval = -1;\n        private LocationMode gpsType = LocationMode.SIMULATOR;\n        private String gpx = null;\n        private double speedMultiplier = -1;\n        private int headingUnits = AngularUnit.Code.DEGREE;\n        private String geomessageVersion = \"1.1\";\n        private boolean readingUser = false;\n        private boolean readingCode = false;\n        private boolean readingMessaging = false;\n        private boolean readingPort = false;\n        private boolean readingPositionMessageInterval = false;\n        private boolean readingVehicleStatusMessageInterval = false;\n        private boolean readingGps = false;\n        @Override\n        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n            if (\"user\".equalsIgnoreCase(qName)) {\n                readingUser = true;\n                username = attributes.getValue(\"name\");\n                vehicleType = attributes.getValue(\"type\");\n                uniqueId = attributes.getValue(\"id\");\n            } else if (readingUser) {\n                if (\"code\".equalsIgnoreCase(qName)) {\n                    readingCode = true;\n                }\n            } else if (\"messaging\".equalsIgnoreCase(qName)) {\n                readingMessaging = true;\n            } else if (readingMessaging) {\n                if (\"port\".equalsIgnoreCase(qName)) {\n                    readingPort = true;\n                } else if (\"interval\".equalsIgnoreCase(qName) || \"positionmessageinterval\".equalsIgnoreCase(qName)) {\n                    //Vehicle Commander 1.0 used \"interval\" instead of \"positionmessageinterval\"; accept either one\n                    readingPositionMessageInterval = true;\n                } else if (\"vehiclestatusmessageinterval\".equalsIgnoreCase(qName)) {\n                    readingVehicleStatusMessageInterval = true;\n                }\n            } else if (\"gps\".equalsIgnoreCase(qName)) {\n                readingGps = true;\n                gpsType = \"onboard\".equalsIgnoreCase(attributes.getValue(\"type\"))\n                        ? LocationMode.LOCATION_SERVICE : LocationMode.SIMULATOR;\n                gpx = attributes.getValue(\"gpx\");\n                String speedMultiplierString = attributes.getValue(\"speedMultiplier\");\n                if (null != speedMultiplierString) {\n                    try {\n                        speedMultiplier = Double.parseDouble(speedMultiplierString);\n                    } catch (Throwable t) {}\n                }\n            }\n        }\n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException {\n            String value = new String(ch, start, length);\n            if (readingCode) {\n                sic = value;\n            } else {\n                try {\n                    int intValue = Integer.parseInt(value);\n                    if (readingPort) {\n                        port = intValue;\n                    } else if (readingPositionMessageInterval) {\n                        positionMessageInterval = intValue;\n                    } else if (readingVehicleStatusMessageInterval) {\n                        vehicleStatusMessageInterval = intValue;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n            }\n        }\n        @Override\n        public void endElement(String uri, String localName, String qName) throws SAXException {\n            if (\"user\".equalsIgnoreCase(qName)) {\n                readingUser = false;\n            } else if (\"code\".equalsIgnoreCase(qName)) {\n                readingCode = false;\n            } else if (\"messaging\".equalsIgnoreCase(qName)) {\n                readingMessaging = false;\n            } else if (\"port\".equalsIgnoreCase(qName)) {\n                readingPort = false;\n            } else if (\"interval\".equalsIgnoreCase(qName) || \"positionmessageinterval\".equalsIgnoreCase(qName)) {\n                //Vehicle Commander 1.0 used \"interval\" instead of \"positionmessageinterval\"; accept either one\n                readingPositionMessageInterval = false;\n            } else if (\"vehiclestatusmessageinterval\".equalsIgnoreCase(qName)) {\n                readingVehicleStatusMessageInterval = false;\n            } else if (\"gps\".equalsIgnoreCase(qName)) {\n                readingGps = false;\n            }\n        }\n    }\n    private final Preferences preferences;\n    private final Set<AppConfigListener> listeners = new HashSet<AppConfigListener>();\n    private LocationController locationController;\n    private MessageController messageController;\n    /**\n     * Creates a new AppConfigController. This constructor first reads the user's\n     * settings from the system. Then, if appconfig.xml is present in the working\n     * directory, any settings not present in the user profile will be read from\n     * appconfig.xml.\n     */\n    public AppConfigController() {\n        preferences = Preferences.userNodeForPackage(getClass());\n        try {\n            resetFromAppConfigFile(false);\n        } catch (ParserConfigurationException ex) {\n            Logger.getLogger(AppConfigController.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (SAXException ex) {<fim_middle>// class below has no smell\n"}