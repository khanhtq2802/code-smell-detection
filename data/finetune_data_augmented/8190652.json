{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.jelly.tags.core;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.beanutils.ConstructorUtils;\nimport org.apache.commons.jelly.JellyTagException;\nimport org.apache.commons.jelly.MissingAttributeException;\nimport org.apache.commons.jelly.XMLOutput;\n\n/** A tag which creates a new object of the given type\n  *\n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @version $Revision$\n  */\n<fim_suffix>public class NewTag extends BaseClassLoaderTag implements ArgTagParent {\n\n    /** the variable exported */\n    private String var;\n\n    /** the class name of the object to instantiate */\n    private String className;\n\n    private List paramTypes = new ArrayList();\n    private List paramValues = new ArrayList();\n\n    public NewTag() {\n    }\n\n    /** Sets the name of the variable exported by this tag */\n    public void setVar(String var) {\n        this.var = var;\n    }\n\n    /** Sets the class name of the object to instantiate */\n    public void setClassName(String className) {\n        this.className = className;\n    }\n\n    public void addArgument(Class type, Object value) {\n        paramTypes.add(type);\n        paramValues.add(value);\n    }\n\n    // Tag interface\n    //-------------------------------------------------------------------------\n    public void doTag(XMLOutput output) throws MissingAttributeException, JellyTagException {\n        ArgTag parentArg = null;\n        if ( var == null ) {\n            parentArg = (ArgTag)(findAncestorWithClass(ArgTag.class));\n            if(null == parentArg) {\n                throw new MissingAttributeException( \"var\" );\n            }\n        }\n        if ( className == null ) {\n            throw new MissingAttributeException( \"className\" );\n        }\n        invokeBody(output);\n\n        try {\n            Class theClass = getClassLoader().loadClass( className );\n            Object object = null;\n            if(paramTypes.size() == 0) {\n                object = theClass.newInstance();\n            } else {\n                Object[] values = paramValues.toArray();\n                Class[] types = (Class[])(paramTypes.toArray(new Class[paramTypes.size()]));\n                object = ConstructorUtils.invokeConstructor(theClass,values,types);\n                paramTypes.clear();\n                paramValues.clear();\n            }\n            if(null != var) {\n                context.setVariable(var, object);\n            } else {\n                parentArg.setValue(object);\n            }\n        }\n        catch (ClassNotFoundException e) {\n            throw new JellyTagException(e);\n        }\n        catch (InstantiationException e) {\n            throw new JellyTagException(e);\n        }\n        catch (NoSuchMethodException e) {\n            throw new JellyTagException(e);\n        }\n        catch (IllegalAccessException e) {\n            throw new JellyTagException(e);\n        }\n        catch (InvocationTargetException e) {\n            throw new JellyTagException(e);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}