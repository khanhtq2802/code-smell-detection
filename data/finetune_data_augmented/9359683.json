{"text": "<fim_prefix>/*\n * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage java.util.function;\n\nimport java.util.Objects;\n\n/**\n * Represents a function that accepts one argument and produces a result.\n *\n * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n * whose functional method is {@link #apply(Object)}.\n *\n * @param <T> the type of the input to the function\n * @param <R> the type of the result of the function\n *\n * @since 1.8\n */\n<fim_suffix>@FunctionalInterface\npublic interface Function<T, R> {\n\n    /**\n     * Applies this function to the given argument.\n     *\n     * @param t the function argument\n     * @return the function result\n     */\n    R apply(T t);\n\n    /**\n     * Returns a composed function that first applies the {@code before}\n     * function to its input, and then applies this function to the result.\n     * If evaluation of either function throws an exception, it is relayed to\n     * the caller of the composed function.\n     *\n     * @param <V> the type of input to the {@code before} function, and to the\n     *           composed function\n     * @param before the function to apply before this function is applied\n     * @return a composed function that first applies the {@code before}\n     * function and then applies this function\n     * @throws NullPointerException if before is null\n     *\n     * @see #andThen(Function)\n     */\n    default <V> Function<V, R> compose(Function<? super V, ? extends T> before) {\n        Objects.requireNonNull(before);\n        return (V v) -> apply(before.apply(v));\n    }\n\n    /**\n     * Returns a composed function that first applies this function to\n     * its input, and then applies the {@code after} function to the result.\n     * If evaluation of either function throws an exception, it is relayed to\n     * the caller of the composed function.\n     *\n     * @param <V> the type of output of the {@code after} function, and of the\n     *           composed function\n     * @param after the function to apply after this function is applied\n     * @return a composed function that first applies this function and then\n     * applies the {@code after} function\n     * @throws NullPointerException if after is null\n     *\n     * @see #compose(Function)\n     */\n    default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) {\n        Objects.requireNonNull(after);\n        return (T t) -> after.apply(apply(t));\n    }\n\n    /**\n     * Returns a function that always returns its input argument.\n     *\n     * @param <T> the type of the input and output objects to the function\n     * @return a function that always returns its input argument\n     */\n    static <T> Function<T, T> identity() {\n        return t -> t;\n    }\n}<fim_middle>// class below has no smell\n"}