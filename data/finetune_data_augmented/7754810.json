{"text": "<fim_prefix>\n<fim_suffix>    @Command(name = \"launch\", description = \"Starts a server, optionally with applications\")\n    public static class LaunchCommand extends BrooklynCommandWithSystemDefines {\n        @Option(name = { \"--localBrooklynProperties\" }, title = \"local brooklyn.properties file\",\n                description = \"Load the given properties file, specific to this launch (appending to and overriding global properties)\")\n        public String localBrooklynProperties;\n        @Option(name = { \"--noGlobalBrooklynProperties\" }, title = \"do not use any global brooklyn.properties file found\",\n            description = \"Do not use the default global brooklyn.properties file found\")\n        public boolean noGlobalBrooklynProperties = false;\n        @Option(name = { \"-a\", \"--app\" }, title = \"application class or file\",\n                description = \"The Application to start. \" +\n                        \"For example, my.AppName, file://my/app.yaml, or classpath://my/AppName.groovy -- \"\n                        + \"note that a BROOKLYN_CLASSPATH environment variable may be required to \"\n                        + \"load classes from other locations\")\n        public String app;\n        @Beta\n        @Option(name = { \"-s\", \"--script\" }, title = \"script URI\",\n                description = \"EXPERIMENTAL. URI for a Groovy script to parse and load.\" +\n                        \" This script will run before starting the app.\")\n        public String script = null;\n        @Option(name = { \"-l\", \"--location\", \"--locations\" }, title = \"location list\",\n                description = \"Specifies the locations where the application will be launched. \" +\n                        \"You can specify more than one location as a comma-separated list of values \" +\n                        \"(or as a JSON array, if the values are complex)\")\n        public String locations;\n        @Option(name = { \"--catalogInitial\" }, title = \"catalog initial bom URI\",\n            description = \"Specifies a catalog.bom URI to be used to populate the initial catalog, \"\n                + \"loaded on first run, or when persistence is off/empty or the catalog is reset\")\n        public String catalogInitial;\n        @Option(name = { \"--catalogReset\" }, \n            description = \"Specifies that any catalog items which have been persisted should be cleared\")\n        public boolean catalogReset;\n        @Option(name = { \"--catalogAdd\" }, title = \"catalog bom URI to add\",\n            description = \"Specifies a catalog.bom to be added to the catalog\")\n        public String catalogAdd;\n        @Option(name = { \"--catalogForce\" }, \n            description = \"Specifies that catalog items added via the CLI should be forcibly added, \"\n                + \"replacing any identical versions already registered (use with care!)\")\n        public boolean catalogForce;\n        @Option(name = { \"-p\", \"--port\" }, title = \"port number\",\n                description = \"Use this port for the brooklyn management web console and REST API; \"\n                    + \"default is 8081+ for http, 8443+ for https.\")\n        public String port;\n        @Option(name = { \"--https\" },\n            description = \"Launch the web console on https\")\n        public boolean useHttps = false;\n        @Option(name = { \"-nc\", \"--noConsole\" },\n                description = \"Do not start the web console or REST API\")\n        public boolean noConsole = false;\n        @Option(name = { \"-b\", \"--bindAddress\" },\n                description = \"Specifies the IP address of the NIC to bind the Brooklyn Management Console to\")\n        public String bindAddress = null;\n        @Option(name = { \"-pa\", \"--publicAddress\" },\n                description = \"Specifies the IP address or hostname that the Brooklyn Management Console will be available on\")\n        public String publicAddress = null;\n        @Option(name = { \"--noConsoleSecurity\" },\n                description = \"Whether to disable authentication and security filters for the web console (for use when debugging on a secure network or bound to localhost)\")\n        public Boolean noConsoleSecurity = false;\n        @Option(name = { \"--startupContinueOnWebErrors\" },\n            description = \"Continue on web subsystem failures during startup \"\n                + \"(default is to abort if the web API fails to start, as management access is not normally possible)\")\n        public boolean startupContinueOnWebErrors = false;\n        @Option(name = { \"--startupFailOnPersistenceErrors\" },\n            description = \"Fail on persistence/HA subsystem failures during startup \"\n                + \"(default is to continue, so errors can be viewed via the API)\")\n        public boolean startupFailOnPersistenceErrors = false;\n        @Option(name = { \"--startupFailOnCatalogErrors\" },\n            description = \"Fail on catalog subsystem failures during startup \"\n                + \"(default is to continue, so errors can be viewed via the API)\")\n        public boolean startupFailOnCatalogErrors = false;\n        @Option(name = { \"--startupFailOnManagedAppsErrors\" },\n            description = \"Fail startup on errors deploying of managed apps specified via the command line \"\n                + \"(default is to continue, so errors can be viewed via the API)\")\n        public boolean startupFailOnManagedAppsErrors = false;\n        @Beta\n        @Option(name = { \"--startBrooklynNode\" },\n                description = \"Start a BrooklynNode entity representing this Brooklyn instance\")\n        public boolean startBrooklynNode = false;\n        // Note in some cases, you can get java.util.concurrent.RejectedExecutionException\n        // if shutdown is not co-ordinated, looks like: {@linktourl https://gist.github.com/47066f72d6f6f79b953e}\n        @Beta\n        @Option(name = { \"-sk\", \"--stopOnKeyPress\" },\n                description = \"Shutdown immediately on user text entry after startup (useful for debugging and demos)\")\n        public boolean stopOnKeyPress = false;\n        final static String STOP_WHICH_APPS_ON_SHUTDOWN = \"--stopOnShutdown\";\n        protected final static String STOP_ALL = \"all\";\n        protected final static String STOP_ALL_IF_NOT_PERSISTED = \"allIfNotPersisted\";\n        protected final static String STOP_NONE = \"none\";\n        protected final static String STOP_THESE = \"these\";        \n        protected final static String STOP_THESE_IF_NOT_PERSISTED = \"theseIfNotPersisted\";\n        static { Enums.checkAllEnumeratedIgnoreCase(StopWhichAppsOnShutdown.class, STOP_ALL, STOP_ALL_IF_NOT_PERSISTED, STOP_NONE, STOP_THESE, STOP_THESE_IF_NOT_PERSISTED); }\n        @Option(name = { STOP_WHICH_APPS_ON_SHUTDOWN },\n            allowedValues = { STOP_ALL, STOP_ALL_IF_NOT_PERSISTED, STOP_NONE, STOP_THESE, STOP_THESE_IF_NOT_PERSISTED },\n            description = \"Which managed applications to stop on shutdown. Possible values are:\\n\"+\n                \"all: stop all apps\\n\"+\n                \"none: leave all apps running\\n\"+\n                \"these: stop the apps explicitly started on this command line, but leave others started subsequently running\\n\"+\n                \"theseIfNotPersisted: stop the apps started on this command line IF persistence is not enabled, otherwise leave all running\\n\"+\n                \"allIfNotPersisted: stop all apps IF persistence is not enabled, otherwise leave all running\")\n        public String stopWhichAppsOnShutdown = STOP_THESE_IF_NOT_PERSISTED;\n        @Option(name = { \"--exitAndLeaveAppsRunningAfterStarting\" },\n                description = \"Once the application to start (from --app) is running exit the process, leaving any entities running. \"\n                    + \"Can be used in combination with --persist auto --persistenceDir <custom folder location> to attach to the running app at a later time.\")\n        public boolean exitAndLeaveAppsRunningAfterStarting = false;\n        final static String PERSIST_OPTION = \"--persist\";\n        protected final static String PERSIST_OPTION_DISABLED = \"disabled\";\n        protected final static String PERSIST_OPTION_AUTO = \"auto\";\n        protected final static String PERSIST_OPTION_REBIND = \"rebind\";\n        protected final static String PERSIST_OPTION_CLEAN = \"clean\";\n        static { Enums.checkAllEnumeratedIgnoreCase(PersistMode.class, PERSIST_OPTION_DISABLED, PERSIST_OPTION_AUTO, PERSIST_OPTION_REBIND, PERSIST_OPTION_CLEAN); }\n        // TODO currently defaults to disabled; want it to default to on, when we're ready\n        // TODO how to force a line-split per option?!\n        //      Looks like java.io.airlift.airline.UsagePrinter is splitting the description by word, and\n        //      wrapping it automatically.\n        //      See https://github.com/airlift/airline/issues/30\n        @Option(name = { PERSIST_OPTION }, \n                allowedValues = { PERSIST_OPTION_DISABLED, PERSIST_OPTION_AUTO, PERSIST_OPTION_REBIND, PERSIST_OPTION_CLEAN },\n                title = \"persistence mode\",\n                description =\n                        \"The persistence mode. Possible values are: \\n\"+<fim_middle>// class below is blob\n"}