{"text": "<fim_prefix>/*\n * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage org.graalvm.compiler.truffle.compiler.hotspot.libgraal;\n\nimport static org.graalvm.compiler.truffle.common.hotspot.libgraal.SVMToHotSpot.Id.CreateCompilationResultInfo;\nimport static org.graalvm.compiler.truffle.common.hotspot.libgraal.SVMToHotSpot.Id.CreateGraphInfo;\nimport static org.graalvm.compiler.truffle.common.hotspot.libgraal.SVMToHotSpot.Id.OnFailure;\nimport static org.graalvm.compiler.truffle.common.hotspot.libgraal.SVMToHotSpot.Id.OnGraalTierFinished;\nimport static org.graalvm.compiler.truffle.common.hotspot.libgraal.SVMToHotSpot.Id.OnSuccess;\nimport static org.graalvm.compiler.truffle.common.hotspot.libgraal.SVMToHotSpot.Id.OnTruffleTierFinished;\nimport static org.graalvm.compiler.truffle.compiler.hotspot.libgraal.HSTruffleCompilerListenerGen.callCreateCompilationResultInfo;\nimport static org.graalvm.compiler.truffle.compiler.hotspot.libgraal.HSTruffleCompilerListenerGen.callCreateGraphInfo;\nimport static org.graalvm.compiler.truffle.compiler.hotspot.libgraal.HSTruffleCompilerListenerGen.callOnFailure;\nimport static org.graalvm.compiler.truffle.compiler.hotspot.libgraal.HSTruffleCompilerListenerGen.callOnGraalTierFinished;\nimport static org.graalvm.compiler.truffle.compiler.hotspot.libgraal.HSTruffleCompilerListenerGen.callOnSuccess;\nimport static org.graalvm.compiler.truffle.compiler.hotspot.libgraal.HSTruffleCompilerListenerGen.callOnTruffleTierFinished;\nimport static org.graalvm.compiler.truffle.compiler.hotspot.libgraal.JNIUtil.createHSString;\n\nimport org.graalvm.compiler.truffle.common.CompilableTruffleAST;\nimport org.graalvm.compiler.truffle.common.TruffleCompilerListener;\nimport org.graalvm.compiler.truffle.common.TruffleInliningPlan;\nimport org.graalvm.compiler.truffle.common.hotspot.libgraal.SVMToHotSpot;\nimport org.graalvm.compiler.truffle.compiler.hotspot.libgraal.JNI.JNIEnv;\nimport org.graalvm.compiler.truffle.compiler.hotspot.libgraal.JNI.JObject;\nimport org.graalvm.compiler.truffle.compiler.hotspot.libgraal.JNI.JString;\nimport org.graalvm.word.WordFactory;\n\n/**\n * Proxy for a {@link TruffleCompilerListener} object in the HotSpot heap.\n */\nfinal class HSTruffleCompilerListener extends HSObject implements TruffleCompilerListener {\n\n    HSTruffleCompilerListener(HotSpotToSVMScope scope, JObject handle) {\n        super(scope, handle);\n    }\n\n    @SVMToHotSpot(OnSuccess)\n    @Override\n    public void onSuccess(CompilableTruffleAST compilable, TruffleInliningPlan inliningPlan, GraphInfo graphInfo, CompilationResultInfo compilationResultInfo) {\n        JObject hsCompilable = ((HSCompilableTruffleAST) compilable).getHandle();\n        JObject hsInliningPlan = ((HSTruffleInliningPlan) inliningPlan).getHandle();\n        JNIEnv env = HotSpotToSVMScope.env();\n        JObject hsGraphInfo = createHSGraphInfo(graphInfo);\n        JObject hsCompilationResultInfo = createHSCompilationResultInfo(compilationResultInfo);\n        callOnSuccess(env, getHandle(), hsCompilable, hsInliningPlan, hsGraphInfo, hsCompilationResultInfo);\n    }\n\n    @SVMToHotSpot(OnTruffleTierFinished)\n    @Override\n    public void onTruffleTierFinished(CompilableTruffleAST compilable, TruffleInliningPlan inliningPlan, GraphInfo graph) {\n        JObject hsCompilable = ((HSCompilableTruffleAST) compilable).getHandle();\n        JObject hsInliningPlan = ((HSTruffleInliningPlan) inliningPlan).getHandle();\n        JNIEnv env = HotSpotToSVMScope.env();\n        JObject hsGraphInfo = createHSGraphInfo(graph);\n        callOnTruffleTierFinished(env, getHandle(), hsCompilable, hsInliningPlan, hsGraphInfo);\n\n    }\n\n    @SVMToHotSpot(OnGraalTierFinished)\n    @Override\n    public void onGraalTierFinished(CompilableTruffleAST compilable, GraphInfo graph) {\n        JObject hsCompilable = ((HSCompilableTruffleAST) compilable).getHandle();\n        JNIEnv env = HotSpotToSVMScope.env();\n        JObject hsGraphInfo = createHSGraphInfo(graph);\n        callOnGraalTierFinished(env, getHandle(), hsCompilable, hsGraphInfo);\n    }\n\n<fim_suffix>    @SVMToHotSpot(OnFailure)\n    @Override\n    public void onFailure(CompilableTruffleAST compilable, String reason, boolean bailout, boolean permanentBailout) {\n        JObject hsCompilable = ((HSCompilableTruffleAST) compilable).getHandle();\n        JNIEnv env = HotSpotToSVMScope.env();\n        JString hsReason = createHSString(env, reason);\n        callOnFailure(env, getHandle(), hsCompilable, hsReason, bailout, permanentBailout);\n    }\n\n    @SVMToHotSpot(CreateGraphInfo)\n    private static JObject createHSGraphInfo(GraphInfo graphInfo) {\n        if (graphInfo == null) {\n            return WordFactory.nullPointer();\n        }\n        long handle = SVMObjectHandles.create(graphInfo);\n        boolean success = false;\n        try {\n            JNIEnv env = HotSpotToSVMScope.env();\n            JObject instance = callCreateGraphInfo(env, handle);\n            success = true;\n            return instance;\n        } finally {\n            if (!success) {\n                SVMObjectHandles.remove(handle);\n            }\n        }\n    }\n\n    @SVMToHotSpot(CreateCompilationResultInfo)\n    private static JObject createHSCompilationResultInfo(CompilationResultInfo compilationResultInfo) {\n        if (compilationResultInfo == null) {\n            return WordFactory.nullPointer();\n        }\n        long handle = SVMObjectHandles.create(compilationResultInfo);\n        boolean success = false;\n        try {\n            JNIEnv env = HotSpotToSVMScope.env();\n            JObject instance = callCreateCompilationResultInfo(env, handle);\n            success = true;\n            return instance;\n        } finally {\n            if (!success) {\n                SVMObjectHandles.remove(handle);\n            }\n        }\n    }\n}<fim_middle>// function below has no smell\n"}