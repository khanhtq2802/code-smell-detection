{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.nifi.processors.solr;\n\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpEntityEnclosingRequest;\nimport org.apache.http.HttpException;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.HttpRequestInterceptor;\nimport org.apache.http.auth.AuthSchemeRegistry;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.Credentials;\nimport org.apache.http.client.config.AuthSchemes;\nimport org.apache.http.client.params.ClientPNames;\nimport org.apache.http.entity.BufferedHttpEntity;\nimport org.apache.http.impl.auth.SPNegoSchemeFactory;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.protocol.HttpContext;\nimport org.apache.solr.client.solrj.impl.HttpClientConfigurer;\nimport org.apache.solr.client.solrj.impl.SolrPortAwareCookieSpecFactory;\nimport org.apache.solr.common.params.SolrParams;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.lang.invoke.MethodHandles;\nimport java.security.Principal;\n\n/**\n * This class is a modified version of Krb5HttpClientConfigurer that is part of SolrJ.\n *\n * In our case we don't want to warn about the useSubjectCreds property since we know we are going to do a\n * login and will have subject creds, and we also don't want to mess the static JAAS configuration of the JVM.\n */\n<fim_suffix>public class KerberosHttpClientConfigurer extends HttpClientConfigurer {\n\n    private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n\n    public void configure(DefaultHttpClient httpClient, SolrParams config) {\n        super.configure(httpClient, config);\n        logger.info(\"Setting up SPNego auth...\");\n\n        //Enable only SPNEGO authentication scheme.\n        final AuthSchemeRegistry registry = new AuthSchemeRegistry();\n        registry.register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false));\n        httpClient.setAuthSchemes(registry);\n\n        // Get the credentials from the JAAS configuration rather than here\n        final Credentials useJaasCreds = new Credentials() {\n            public String getPassword() {\n                return null;\n            }\n            public Principal getUserPrincipal() {\n                return null;\n            }\n        };\n\n        final SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n        httpClient.getCookieSpecs().register(cookieFactory.POLICY_NAME, cookieFactory);\n        httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY, cookieFactory.POLICY_NAME);\n        httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, useJaasCreds);\n        httpClient.addRequestInterceptor(bufferedEntityInterceptor);\n    }\n\n    // Set a buffered entity based request interceptor\n    private HttpRequestInterceptor bufferedEntityInterceptor = new HttpRequestInterceptor() {\n        @Override\n        public void process(HttpRequest request, HttpContext context) throws HttpException,\n                IOException {\n            if(request instanceof HttpEntityEnclosingRequest) {\n                HttpEntityEnclosingRequest enclosingRequest = ((HttpEntityEnclosingRequest) request);\n                HttpEntity requestEntity = enclosingRequest.getEntity();\n                enclosingRequest.setEntity(new BufferedHttpEntity(requestEntity));\n            }\n        }\n    };\n\n}<fim_middle>// class below has no smell\n"}