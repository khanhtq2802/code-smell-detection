{"text": "<fim_prefix>\n<fim_suffix>@SuppressWarnings(\"all\")\npublic class InternalImportUriUiTestLanguageParser extends AbstractInternalAntlrParser {\n    public static final String[] tokenNames = new String[] {\n        \"<invalid>\", \"<EOR>\", \"<DOWN>\", \"<UP>\", \"RULE_STRING\", \"RULE_ID\", \"RULE_INT\", \"RULE_ML_COMMENT\", \"RULE_SL_COMMENT\", \"RULE_WS\", \"RULE_ANY_OTHER\", \"'import'\", \"'type'\", \"'extends'\"\n    };\n    public static final int RULE_ID=5;\n    public static final int RULE_WS=9;\n    public static final int RULE_STRING=4;\n    public static final int RULE_ANY_OTHER=10;\n    public static final int RULE_SL_COMMENT=8;\n    public static final int RULE_INT=6;\n    public static final int T__11=11;\n    public static final int RULE_ML_COMMENT=7;\n    public static final int T__12=12;\n    public static final int T__13=13;\n    public static final int EOF=-1;\n    // delegates\n    // delegators\n        public InternalImportUriUiTestLanguageParser(TokenStream input) {\n            this(input, new RecognizerSharedState());\n        }\n        public InternalImportUriUiTestLanguageParser(TokenStream input, RecognizerSharedState state) {\n            super(input, state);\n        }\n    public String[] getTokenNames() { return InternalImportUriUiTestLanguageParser.tokenNames; }\n    public String getGrammarFileName() { return \"InternalImportUriUiTestLanguage.g\"; }\n     \tprivate ImportUriUiTestLanguageGrammarAccess grammarAccess;\n        public InternalImportUriUiTestLanguageParser(TokenStream input, ImportUriUiTestLanguageGrammarAccess grammarAccess) {\n            this(input);\n            this.grammarAccess = grammarAccess;\n            registerRules(grammarAccess.getGrammar());\n        }\n        @Override\n        protected String getFirstRuleName() {\n        \treturn \"Main\";\n       \t}\n       \t@Override\n       \tprotected ImportUriUiTestLanguageGrammarAccess getGrammarAccess() {\n       \t\treturn grammarAccess;\n       \t}\n    // $ANTLR start \"entryRuleMain\"\n    // InternalImportUriUiTestLanguage.g:64:1: entryRuleMain returns [EObject current=null] : iv_ruleMain= ruleMain EOF ;\n    public final EObject entryRuleMain() throws RecognitionException {\n        EObject current = null;\n        EObject iv_ruleMain = null;\n        try {\n            // InternalImportUriUiTestLanguage.g:64:45: (iv_ruleMain= ruleMain EOF )\n            // InternalImportUriUiTestLanguage.g:65:2: iv_ruleMain= ruleMain EOF\n            {\n             newCompositeNode(grammarAccess.getMainRule()); \n            pushFollow(FollowSets000.FOLLOW_1);\n            iv_ruleMain=ruleMain();\n            state._fsp--;\n             current =iv_ruleMain; \n            match(input,EOF,FollowSets000.FOLLOW_2); \n            }\n        }\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"entryRuleMain\"\n    // $ANTLR start \"ruleMain\"\n    // InternalImportUriUiTestLanguage.g:71:1: ruleMain returns [EObject current=null] : ( ( (lv_imports_0_0= ruleImport ) )* ( (lv_types_1_0= ruleType ) )* ) ;\n    public final EObject ruleMain() throws RecognitionException {\n        EObject current = null;\n        EObject lv_imports_0_0 = null;\n        EObject lv_types_1_0 = null;\n        \tenterRule();\n        try {\n            // InternalImportUriUiTestLanguage.g:77:2: ( ( ( (lv_imports_0_0= ruleImport ) )* ( (lv_types_1_0= ruleType ) )* ) )\n            // InternalImportUriUiTestLanguage.g:78:2: ( ( (lv_imports_0_0= ruleImport ) )* ( (lv_types_1_0= ruleType ) )* )\n            {\n            // InternalImportUriUiTestLanguage.g:78:2: ( ( (lv_imports_0_0= ruleImport ) )* ( (lv_types_1_0= ruleType ) )* )\n            // InternalImportUriUiTestLanguage.g:79:3: ( (lv_imports_0_0= ruleImport ) )* ( (lv_types_1_0= ruleType ) )*\n            {\n            // InternalImportUriUiTestLanguage.g:79:3: ( (lv_imports_0_0= ruleImport ) )*\n            loop1:\n            do {\n                int alt1=2;\n                int LA1_0 = input.LA(1);\n                if ( (LA1_0==11) ) {\n                    alt1=1;\n                }\n                switch (alt1) {\n            \tcase 1 :\n            \t    // InternalImportUriUiTestLanguage.g:80:4: (lv_imports_0_0= ruleImport )\n            \t    {\n            \t    // InternalImportUriUiTestLanguage.g:80:4: (lv_imports_0_0= ruleImport )\n            \t    // InternalImportUriUiTestLanguage.g:81:5: lv_imports_0_0= ruleImport\n            \t    {\n            \t    \t\t\t\t\tnewCompositeNode(grammarAccess.getMainAccess().getImportsImportParserRuleCall_0_0());\n            \t    pushFollow(FollowSets000.FOLLOW_3);\n            \t    lv_imports_0_0=ruleImport();\n            \t    state._fsp--;\n            \t    \t\t\t\t\tif (current==null) {\n            \t    \t\t\t\t\t\tcurrent = createModelElementForParent(grammarAccess.getMainRule());\n            \t    \t\t\t\t\t}\n            \t    \t\t\t\t\tadd(\n            \t    \t\t\t\t\t\tcurrent,\n            \t    \t\t\t\t\t\t\"imports\",\n            \t    \t\t\t\t\t\tlv_imports_0_0,\n            \t    \t\t\t\t\t\t\"org.eclipse.xtext.ui.tests.linking.ImportUriUiTestLanguage.Import\");\n            \t    \t\t\t\t\tafterParserOrEnumRuleCall();\n            \t    }\n            \t    }\n            \t    break;\n            \tdefault :\n            \t    break loop1;\n                }\n            } while (true);\n            // InternalImportUriUiTestLanguage.g:98:3: ( (lv_types_1_0= ruleType ) )*\n            loop2:\n            do {\n                int alt2=2;\n                int LA2_0 = input.LA(1);\n                if ( (LA2_0==12) ) {\n                    alt2=1;\n                }\n                switch (alt2) {\n            \tcase 1 :\n            \t    // InternalImportUriUiTestLanguage.g:99:4: (lv_types_1_0= ruleType )\n            \t    {\n            \t    // InternalImportUriUiTestLanguage.g:99:4: (lv_types_1_0= ruleType )\n            \t    // InternalImportUriUiTestLanguage.g:100:5: lv_types_1_0= ruleType\n            \t    {\n            \t    \t\t\t\t\tnewCompositeNode(grammarAccess.getMainAccess().getTypesTypeParserRuleCall_1_0());\n            \t    pushFollow(FollowSets000.FOLLOW_4);\n            \t    lv_types_1_0=ruleType();\n            \t    state._fsp--;\n            \t    \t\t\t\t\tif (current==null) {\n            \t    \t\t\t\t\t\tcurrent = createModelElementForParent(grammarAccess.getMainRule());\n            \t    \t\t\t\t\t}\n            \t    \t\t\t\t\tadd(\n            \t    \t\t\t\t\t\tcurrent,\n            \t    \t\t\t\t\t\t\"types\",\n            \t    \t\t\t\t\t\tlv_types_1_0,\n            \t    \t\t\t\t\t\t\"org.eclipse.xtext.ui.tests.linking.ImportUriUiTestLanguage.Type\");\n            \t    \t\t\t\t\tafterParserOrEnumRuleCall();\n            \t    }\n            \t    }\n            \t    break;\n            \tdefault :\n            \t    break loop2;\n                }\n            } while (true);\n            }\n            }\n            \tleaveRule();\n        }\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }\n    // $ANTLR end \"ruleMain\"\n    // $ANTLR start \"entryRuleImport\"\n    // InternalImportUriUiTestLanguage.g:121:1: entryRuleImport returns [EObject current=null] : iv_ruleImport= ruleImport EOF ;\n    public final EObject entryRuleImport() throws RecognitionException {\n        EObject current = null;\n        EObject iv_ruleImport = null;\n        try {\n            // InternalImportUriUiTestLanguage.g:121:47: (iv_ruleImport= ruleImport EOF )\n            // InternalImportUriUiTestLanguage.g:122:2: iv_ruleImport= ruleImport EOF\n            {\n             newCompositeNode(grammarAccess.getImportRule()); \n            pushFollow(FollowSets000.FOLLOW_1);\n            iv_ruleImport=ruleImport();\n            state._fsp--;\n             current =iv_ruleImport; <fim_middle>// class below has no smell\n"}