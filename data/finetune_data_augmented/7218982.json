{"text": "<fim_prefix>package rsc.publisher;\n\nimport java.util.concurrent.Callable;\n\nimport org.reactivestreams.*;\n\nimport rsc.flow.Fuseable;\nimport rsc.publisher.PublisherOnAssembly.*;\n\n/**\n * Captures the current stacktrace when this publisher is created and\n * makes it available/visible for debugging purposes from\n * the inner Subscriber.\n * <p>\n * Note that getting a stacktrace is a costly operation.\n * <p>\n * The operator sanitizes the stacktrace and removes noisy entries such as:\n * <ul>\n * <li>java.lang.Thread entries</li>\n * <li>method references with source line of 1 (bridge methods)</li>\n * <li>Tomcat worker thread entries</li>\n * <li>JUnit setup</li>\n * </ul>\n * \n * @param <T> the value type passing through\n */\npublic final class PublisherCallableOnAssembly<T> extends PublisherSource<T, T> implements Fuseable, Callable<T> {\n\n    final String stacktrace;\n    \n    /**\n     * If set to true, the creation of PublisherOnAssembly will capture the raw\n     * stacktrace instead of the sanitized version.\n     */\n    public static volatile boolean fullStackTrace;\n\n    public PublisherCallableOnAssembly(Publisher<? extends T> source) {\n        super(source);\n        this.stacktrace = takeStacktrace();\n    }\n\n    private String takeStacktrace() {\n        StackTraceElement[] stes = Thread.currentThread().getStackTrace();\n\n        StringBuilder sb = new StringBuilder(\"Assembly trace:\\n\");\n        \n        for (StackTraceElement e : stes) {\n            String row = e.toString();\n            if (!fullStackTrace) {\n                if (e.getLineNumber() <= 1) {\n                    continue;\n                }\n                if (row.contains(\"Px.onAssembly\")) {\n                    continue;\n                }\n                if (row.contains(\"PublisherOnAssembly.\")) {\n                    continue;\n                }\n                if (row.contains(\".junit.runner\")) {\n                    continue;\n                }\n                if (row.contains(\".junit4.runner\")) {\n                    continue;\n                }\n                if (row.contains(\".junit.internal\")) {\n                    continue;\n                }\n                if (row.contains(\"sun.reflect\")) {\n                    continue;\n                }\n                if (row.contains(\"java.lang.Thread.\")) {\n                    continue;\n                }\n                if (row.contains(\"ThreadPoolExecutor\")) {\n                    continue;\n                }\n                if (row.contains(\"org.apache.catalina.\")) {\n                    continue;\n                }\n                if (row.contains(\"org.apache.tomcat.\")) {\n                    continue;\n                }\n            }\n            sb.append(row).append(\"\\n\");\n        }\n        \n        return sb.toString();\n    }\n    \n    /**\n     * Returns the stacktrace as captured when this PublisherOnAssembly has been instantiated.\n     * @return the stacktrace\n     */\n    public String stacktrace() {\n        return stacktrace;\n    }\n    \n    @Override\n    public void subscribe(Subscriber<? super T> s) {\n        if (s instanceof Fuseable.ConditionalSubscriber) {\n            Fuseable.ConditionalSubscriber<? super T> cs = (Fuseable.ConditionalSubscriber<? super T>) s;\n            source.subscribe(new OnAssemblyConditionalSubscriber<>(cs, stacktrace));\n        } else {\n            source.subscribe(new OnAssemblySubscriber<>(s, stacktrace));\n        }\n    }\n    \n<fim_suffix>    @SuppressWarnings(\"unchecked\")\n    @Override\n    public T call() throws Exception {\n        return ((Callable<T>)source).call();\n    }\n}<fim_middle>// function below has no smell\n"}