{"text": "<fim_prefix> * This is the content assistant for the sql editor. It provides the list of\n * parameters when the user types the ? keyword. It also shows a list of\n * available columns or tables depending on whether the user has entered a table\n * or a schema before the (.) dot keyword.\n * \n * If both a schema and a table have the same name the results are\n * unpredictable.\n * \n * @version $Revision: 1.18 $ $Date: 2009/07/07 06:50:16 $\n */\npublic class JdbcSQLContentAssistProcessor implements\n\t\tIContentAssistProcessor,\n\t\tISQLSyntax\n{\n\tprivate transient ConnectionMetaData metaData = null;\n\tprivate transient ICompletionProposal[] lastProposals = null;\n\tprivate long timeout; //milliseconds\n\t/**\n\t *  \n\t */\n\tpublic JdbcSQLContentAssistProcessor( long milliseconds )\n\t{\n\t\tsuper( );\n\t\tthis.timeout = milliseconds;\n\t}\n    public void setDataSourceHandle( DataSourceDesign dataSourceHandle )\n\t{\n\t\tif ( metaData != null )\n\t\t{\n\t\t\tmetaData.clearCache( );\n\t\t\tmetaData = null;\n\t\t}\n\t\tString driverClass = dataSourceHandle.getPublicProperties( )\n\t\t\t\t.findProperty( Constants.ODADriverClass )\n\t\t\t\t.getValue( );\n\t\tString url = dataSourceHandle.getPublicProperties( )\n\t\t\t\t.findProperty( Constants.ODAURL )\n\t\t\t\t.getValue( );\n\t\tString user = dataSourceHandle.getPublicProperties( )\n\t\t\t\t.findProperty( Constants.ODAUser )\n\t\t\t\t.getValue( );\n\t\tString password = dataSourceHandle.getPublicProperties( )\n\t\t\t\t.findProperty( Constants.ODAPassword )\n\t\t\t\t.getValue( );\n\t\tmetaData = ConnectionMetaDataManager.getInstance( )\n\t\t\t\t.getMetaData( driverClass, url, user, password, //$NON-NLS-1$\n\t\t\t\t\t\tgetConnectionProperties( dataSourceHandle ), timeout );\n\t}\n\tprivate Properties getConnectionProperties(\n\t\t\tDataSourceDesign dataSourceDesign )\n\t{\n\t\ttry\n\t\t{\n\t\t\treturn DesignSessionUtil.getEffectiveDataSourceProperties( dataSourceDesign );\n\t\t}\n\t\tcatch ( OdaException ignore )\n\t\t{\n\t\t}\n\t\treturn null;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.jface.text.contentassist.IContentAssistProcessor#computeCompletionProposals(org.eclipse.jface.text.ITextViewer,\n\t *      int)\n\t */\n\tpublic ICompletionProposal[] computeCompletionProposals(\n\t\t\tITextViewer viewer, int offset )\n\t{\n\t\ttry\n\t\t{\n\t\t\tif ( offset > viewer.getTopIndexStartOffset( ) )\n\t\t\t{\n\t\t\t\t//Check the character before the offset\n\t\t\t\tchar ch = viewer.getDocument( ).getChar( offset - 1 );\n\t\t\t\tif ( ch == '.' ) //$NON-NLS-1$\n\t\t\t\t{\n\t\t\t\t\tlastProposals = getTableOrColumnCompletionProposals( viewer,\n\t\t\t\t\t\t\toffset );\n\t\t\t\t\treturn lastProposals;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn getRelevantProposals( viewer, offset );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch ( BadLocationException e )\n\t\t{\n\t\t}\n\t\treturn null;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.jface.text.contentassist.IContentAssistProcessor#computeContextInformation(org.eclipse.jface.text.ITextViewer,\n\t *      int)\n\t */\n\tpublic IContextInformation[] computeContextInformation( ITextViewer viewer,\n\t\t\tint offset )\n\t{\n\t\treturn null;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.jface.text.contentassist.IContentAssistProcessor#getCompletionProposalAutoActivationCharacters()\n\t */\n\tpublic char[] getCompletionProposalAutoActivationCharacters( )\n\t{\n\t\treturn new char[]{\n\t\t\t\t'.'\n\t\t}; //$NON-NLS-1$\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.jface.text.contentassist.IContentAssistProcessor#getContextInformationAutoActivationCharacters()\n\t */\n\tpublic char[] getContextInformationAutoActivationCharacters( )\n\t{\n\t\treturn null;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.jface.text.contentassist.IContentAssistProcessor#getErrorMessage()\n\t */\n\tpublic String getErrorMessage( )\n\t{\n\t\treturn null;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.jface.text.contentassist.IContentAssistProcessor#getContextInformationValidator()\n\t */\n\tpublic IContextInformationValidator getContextInformationValidator( )\n\t{\n\t\treturn null;\n\t}\n\t/**\n\t * @param viewer\n\t * @param offset\n\t * @return\n\t */\n\tprivate ICompletionProposal[] getTableOrColumnCompletionProposals(\n\t\t\tITextViewer viewer, int offset )\n\t{\n\t\tif ( offset > viewer.getTopIndexStartOffset( ) + 2 )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t//Get the word before the dot\n\t\t\t\t//This can either be the table name or the schema name\n\t\t\t\tString tableName = stripQuotes( findWord( viewer, offset - 2 ) );\n\t\t\t\tString schemaName = null;\n\t\t\t\t//Check the character before this word\n\t\t\t\tint startOffset = offset - tableName.length( ) - 2;\n\t\t\t\tif ( startOffset > viewer.getTopIndexStartOffset( ) )\n\t\t\t\t{\n\t\t\t\t\t//If this is a dot then find the schama name\n\t\t\t\t\tif ( viewer.getDocument( ).getChar( startOffset ) == '.' )//$NON-NLS-1$\n\t\t\t\t\t{\n\t\t\t\t\t\tschemaName = findWord( viewer, startOffset - 1 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( schemaName == null )\n\t\t\t\t{\n\t\t\t\t\t//If the schema name is null\n\t\t\t\t\t//then the table name can either be a schema or a table\n\t\t\t\t\t//First check whether it is a schema\n\t\t\t\t\tSchema schema = metaData.getSchema( tableName );\n\t\t\t\t\t//If this is not null then just return all the tables from\n\t\t\t\t\t// it.\n\t\t\t\t\tif ( schema != null )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn convertTablesToCompletionProposals( schema.getTables( ),\n\t\t\t\t\t\t\t\toffset );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t//Find the first table match in all the schemas and\n\t\t\t\t\t\t// return the columns\n\t\t\t\t\t\tArrayList schemas = metaData.getSchemas( );\n\t\t\t\t\t\tIterator iter = schemas.iterator( );\n\t\t\t\t\t\twhile ( iter.hasNext( ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tschema = (Schema) iter.next( );\n\t\t\t\t\t\t\tTable table = schema.getTable( tableName );\n\t\t\t\t\t\t\tif ( table != null )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn convertColumnsToCompletionProposals( table.getColumns( ),\n\t\t\t\t\t\t\t\t\t\toffset );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tschemaName = stripQuotes( schemaName );\n\t\t\t\t\t//We have both the schema and table name\n\t\t\t\t\t//return the column names\n\t\t\t\t\tSchema schema = metaData.getSchema( schemaName );\n\t\t\t\t\tif ( schema != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tTable table = schema.getTable( tableName );\n\t\t\t\t\t\tif ( table != null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn convertColumnsToCompletionProposals( table.getColumns( ),\n\t\t\t\t\t\t\t\t\toffset );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch ( BadLocationException e )\n\t\t\t{\n\t\t\t}\n\t\t\tcatch ( SQLException e )\n\t\t\t{\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n<fim_suffix>\tprivate ICompletionProposal[] getRelevantProposals( ITextViewer viewer,\n\t\t\tint offset ) throws BadLocationException\n\t{\n\t\tif ( lastProposals != null )\n\t\t{\n\t\t\tArrayList relevantProposals = new ArrayList( 10 );\n\t\t\tString word = ( findWord( viewer, offset - 1 ) ).toLowerCase( );\n\t\t\t//Search for this word in the list\n\t\t\tfor ( int n = 0; n < lastProposals.length; n++ )\n\t\t\t{\n\t\t\t\tif ( stripQuotes( lastProposals[n].getDisplayString( )\n\t\t\t\t\t\t.toLowerCase( ) ).startsWith( word ) )\n\t\t\t\t{\n\t\t\t\t\tCompletionProposal proposal = new CompletionProposal( lastProposals[n].getDisplayString( ),\n\t\t\t\t\t\t\toffset - word.length( ),\n\t\t\t\t\t\t\tword.length( ),\n\t\t\t\t\t\t\tlastProposals[n].getDisplayString( ).length( ) );\n\t\t\t\t\trelevantProposals.add( proposal );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( relevantProposals.size( ) > 0 )\n\t\t\t{\n\t\t\t\treturn (ICompletionProposal[]) relevantProposals.toArray( new ICompletionProposal[]{} );\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}<fim_middle>// function below is long method\n"}