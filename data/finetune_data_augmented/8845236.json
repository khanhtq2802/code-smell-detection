{"text": "<fim_prefix>      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData(\"authzToken\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));\n      tmpMap.put(_Fields.GATEWAY_ID, new org.apache.thrift.meta_data.FieldMetaData(\"gatewayId\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGateway_args.class, metaDataMap);\n    }\n    public getGateway_args() {\n    }\n    public getGateway_args(\n      org.apache.airavata.model.security.AuthzToken authzToken,\n      String gatewayId)\n    {\n      this();\n      this.authzToken = authzToken;\n      this.gatewayId = gatewayId;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public getGateway_args(getGateway_args other) {\n      if (other.isSetAuthzToken()) {\n        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);\n      }\n      if (other.isSetGatewayId()) {\n        this.gatewayId = other.gatewayId;\n      }\n    }\n    public getGateway_args deepCopy() {\n      return new getGateway_args(this);\n    }\n    @Override\n    public void clear() {\n      this.authzToken = null;\n      this.gatewayId = null;\n    }\n    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {\n      return this.authzToken;\n    }\n    public getGateway_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {\n      this.authzToken = authzToken;\n      return this;\n    }\n    public void unsetAuthzToken() {\n      this.authzToken = null;\n    }\n    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */\n    public boolean isSetAuthzToken() {\n      return this.authzToken != null;\n    }\n    public void setAuthzTokenIsSet(boolean value) {\n      if (!value) {\n        this.authzToken = null;\n      }\n    }\n    public String getGatewayId() {\n      return this.gatewayId;\n    }\n    public getGateway_args setGatewayId(String gatewayId) {\n      this.gatewayId = gatewayId;\n      return this;\n    }\n    public void unsetGatewayId() {\n      this.gatewayId = null;\n    }\n    /** Returns true if field gatewayId is set (has been assigned a value) and false otherwise */\n    public boolean isSetGatewayId() {\n      return this.gatewayId != null;\n    }\n    public void setGatewayIdIsSet(boolean value) {\n      if (!value) {\n        this.gatewayId = null;\n      }\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      case AUTHZ_TOKEN:\n        if (value == null) {\n          unsetAuthzToken();\n        } else {\n          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);\n        }\n        break;\n      case GATEWAY_ID:\n        if (value == null) {\n          unsetGatewayId();\n        } else {\n          setGatewayId((String)value);\n        }\n        break;\n      }\n    }\n    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case AUTHZ_TOKEN:\n        return getAuthzToken();\n      case GATEWAY_ID:\n        return getGatewayId();\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      case AUTHZ_TOKEN:\n        return isSetAuthzToken();\n      case GATEWAY_ID:\n        return isSetGatewayId();\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof getGateway_args)\n        return this.equals((getGateway_args)that);\n      return false;\n    }\n    public boolean equals(getGateway_args that) {\n      if (that == null)\n        return false;\n      boolean this_present_authzToken = true && this.isSetAuthzToken();\n      boolean that_present_authzToken = true && that.isSetAuthzToken();\n      if (this_present_authzToken || that_present_authzToken) {\n        if (!(this_present_authzToken && that_present_authzToken))\n          return false;\n        if (!this.authzToken.equals(that.authzToken))\n          return false;\n      }\n      boolean this_present_gatewayId = true && this.isSetGatewayId();\n      boolean that_present_gatewayId = true && that.isSetGatewayId();\n      if (this_present_gatewayId || that_present_gatewayId) {\n        if (!(this_present_gatewayId && that_present_gatewayId))\n          return false;\n        if (!this.gatewayId.equals(that.gatewayId))\n          return false;\n      }\n      return true;\n    }\n    @Override\n    public int hashCode() {\n      List<Object> list = new ArrayList<Object>();\n      boolean present_authzToken = true && (isSetAuthzToken());\n      list.add(present_authzToken);\n      if (present_authzToken)\n        list.add(authzToken);\n      boolean present_gatewayId = true && (isSetGatewayId());\n      list.add(present_gatewayId);\n      if (present_gatewayId)\n        list.add(gatewayId);\n      return list.hashCode();\n    }\n    @Override\n    public int compareTo(getGateway_args other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      lastComparison = Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetAuthzToken()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetGatewayId()).compareTo(other.isSetGatewayId());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetGatewayId()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gatewayId, other.gatewayId);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n    }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"getGateway_args(\");\n      boolean first = true;\n      sb.append(\"authzToken:\");\n      if (this.authzToken == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.authzToken);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"gatewayId:\");\n      if (this.gatewayId == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.gatewayId);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n<fim_suffix>    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      if (authzToken == null) {\n        throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'authzToken' was not present! Struct: \" + toString());\n      }\n      if (gatewayId == null) {\n        throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'gatewayId' was not present! Struct: \" + toString());\n      }\n      // check for sub-struct validity\n      if (authzToken != null) {\n        authzToken.validate();\n      }\n    }<fim_middle>// function below has no smell\n"}