{"text": "<fim_prefix>//\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n//\npackage com.cloud.utils;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.Inet6Address;\nimport java.net.InetAddress;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URLEncoder;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.StringTokenizer;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Comparator;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport org.apache.commons.httpclient.Credentials;\nimport org.apache.commons.httpclient.HttpClient;\nimport org.apache.commons.httpclient.HttpException;\nimport org.apache.commons.httpclient.HttpStatus;\nimport org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;\nimport org.apache.commons.httpclient.UsernamePasswordCredentials;\nimport org.apache.commons.httpclient.auth.AuthScope;\nimport org.apache.commons.httpclient.methods.GetMethod;\nimport org.apache.commons.httpclient.methods.HeadMethod;\nimport org.apache.commons.httpclient.util.URIUtil;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.client.utils.URLEncodedUtils;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.log4j.Logger;\nimport com.cloud.utils.crypt.DBEncryptionUtil;\nimport com.cloud.utils.exception.CloudRuntimeException;\nimport com.google.common.base.Strings;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.NamedNodeMap;\npublic class UriUtils {\n    public static final Logger s_logger = Logger.getLogger(UriUtils.class.getName());\n    public static String formNfsUri(String host, String path) {\n        try {\n            URI uri = new URI(\"nfs\", host, path, null);\n            return uri.toString();\n        } catch (URISyntaxException e) {\n            throw new CloudRuntimeException(\"Unable to form nfs URI: \" + host + \" - \" + path);\n        }\n    }\n    public static String formIscsiUri(String host, String iqn, Integer lun) {\n        try {\n            String path = iqn;\n            if (lun != null) {\n                path += \"/\" + lun.toString();\n            }\n            URI uri = new URI(\"iscsi\", host, path, null);\n            return uri.toString();\n        } catch (URISyntaxException e) {\n            throw new CloudRuntimeException(\"Unable to form iscsi URI: \" + host + \" - \" + iqn + \" - \" + lun);\n        }\n    }\n    public static String formFileUri(String path) {\n        File file = new File(path);\n        return file.toURI().toString();\n    }\n    // a simple URI component helper (Note: it does not deal with URI paramemeter area)\n    public static String encodeURIComponent(String url) {\n        int schemeTail = url.indexOf(\"://\");\n        int pathStart = 0;\n        if (schemeTail > 0)\n            pathStart = url.indexOf('/', schemeTail + 3);\n        else\n            pathStart = url.indexOf('/');\n        if (pathStart > 0) {\n            String[] tokens = url.substring(pathStart + 1).split(\"/\");\n            StringBuilder sb = new StringBuilder(url.substring(0, pathStart));\n            for (String token : tokens) {\n                sb.append(\"/\").append(URLEncoder.encode(token));\n            }\n            return sb.toString();\n        }\n        // no need to do URL component encoding\n        return url;\n    }\n    public static String getCifsUriParametersProblems(URI uri) {\n        if (!UriUtils.hostAndPathPresent(uri)) {\n            String errMsg = \"cifs URI missing host and/or path. Make sure it's of the format cifs://hostname/path\";\n            s_logger.warn(errMsg);\n            return errMsg;\n        }\n        return null;\n    }\n    public static boolean hostAndPathPresent(URI uri) {\n        return !(uri.getHost() == null || uri.getHost().trim().isEmpty() || uri.getPath() == null || uri.getPath().trim().isEmpty());\n    }\n    public static boolean cifsCredentialsPresent(URI uri) {\n        List<NameValuePair> args = URLEncodedUtils.parse(uri, \"UTF-8\");\n        boolean foundUser = false;\n        boolean foundPswd = false;\n        for (NameValuePair nvp : args) {\n            String name = nvp.getName();\n            if (name.equals(\"user\")) {\n                foundUser = true;\n                s_logger.debug(\"foundUser is\" + foundUser);\n            } else if (name.equals(\"password\")) {\n                foundPswd = true;\n                s_logger.debug(\"foundPswd is\" + foundPswd);\n            }\n        }\n        return (foundUser && foundPswd);\n    }\n    public static String getUpdateUri(String url, boolean encrypt) {\n        String updatedPath = null;\n        try {\n            String query = URIUtil.getQuery(url);\n            URIBuilder builder = new URIBuilder(url);\n            builder.removeQuery();\n            StringBuilder updatedQuery = new StringBuilder();\n            List<NameValuePair> queryParams = getUserDetails(query);\n            ListIterator<NameValuePair> iterator = queryParams.listIterator();\n            while (iterator.hasNext()) {\n                NameValuePair param = iterator.next();\n                String value = null;\n                if (\"password\".equalsIgnoreCase(param.getName()) &&\n                        param.getValue() != null) {\n                    value = encrypt ? DBEncryptionUtil.encrypt(param.getValue()) : DBEncryptionUtil.decrypt(param.getValue());\n                } else {\n                    value = param.getValue();\n                }\n                if (updatedQuery.length() == 0) {\n                    updatedQuery.append(param.getName()).append('=')\n                            .append(value);\n                } else {\n                    updatedQuery.append('&').append(param.getName())\n                            .append('=').append(value);\n                }\n            }\n            String schemeAndHost = \"\";\n            URI newUri = builder.build();\n            if (newUri.getScheme() != null) {\n                schemeAndHost = newUri.getScheme() + \"://\" + newUri.getHost();\n            }\n            updatedPath = schemeAndHost + newUri.getPath() + \"?\" + updatedQuery;\n        } catch (URISyntaxException e) {\n            throw new CloudRuntimeException(\"Couldn't generate an updated uri. \" + e.getMessage());\n        }\n        return updatedPath;\n    }\n<fim_suffix>    private static List<NameValuePair> getUserDetails(String query) {\n        List<NameValuePair> details = new ArrayList<NameValuePair>();\n        if (query != null && !query.isEmpty()) {\n            StringTokenizer allParams = new StringTokenizer(query, \"&\");\n            while (allParams.hasMoreTokens()) {\n                String param = allParams.nextToken();\n                details.add(new BasicNameValuePair(param.substring(0, param.indexOf(\"=\")),\n                        param.substring(param.indexOf(\"=\") + 1)));\n            }\n        }\n        return details;\n    }\n    // Get the size of a file from URL response header.\n    public static long getRemoteSize(String url) {\n        long remoteSize = 0L;\n        final String[] methods = new String[]{\"HEAD\", \"GET\"};\n        IllegalArgumentException exception = null;\n        // Attempting first a HEAD request to avoid downloading the whole file. If\n        // it fails (for example with S3 presigned URL), fallback on a standard GET\n        // request.\n        for (String method : methods) {\n            HttpURLConnection httpConn = null;\n            try {\n                URI uri = new URI(url);\n                httpConn = (HttpURLConnection)uri.toURL().openConnection();\n                httpConn.setRequestMethod(method);\n                httpConn.setConnectTimeout(2000);\n                httpConn.setReadTimeout(5000);<fim_middle>// function below is long method\n"}