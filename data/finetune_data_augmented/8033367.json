{"text": "<fim_prefix>            // InternalCrossReferenceProposalTestLanguage.g:165:12: ( '0' .. '9' )+\n            {\n            // InternalCrossReferenceProposalTestLanguage.g:165:12: ( '0' .. '9' )+\n            int cnt3=0;\n            loop3:\n            do {\n                int alt3=2;\n                int LA3_0 = input.LA(1);\n                if ( ((LA3_0>='0' && LA3_0<='9')) ) {\n                    alt3=1;\n                }\n                switch (alt3) {\n            \tcase 1 :\n            \t    // InternalCrossReferenceProposalTestLanguage.g:165:13: '0' .. '9'\n            \t    {\n            \t    matchRange('0','9'); \n            \t    }\n            \t    break;\n            \tdefault :\n            \t    if ( cnt3 >= 1 ) break loop3;\n                        EarlyExitException eee =\n                            new EarlyExitException(3, input);\n                        throw eee;\n                }\n                cnt3++;\n            } while (true);\n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"RULE_INT\"\n    // $ANTLR start \"RULE_STRING\"\n    public final void mRULE_STRING() throws RecognitionException {\n        try {\n            int _type = RULE_STRING;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalCrossReferenceProposalTestLanguage.g:167:13: ( ( '\\\"' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\"' ) ) )* '\\\"' | '\\\\'' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\\'' ) ) )* '\\\\'' ) )\n            // InternalCrossReferenceProposalTestLanguage.g:167:15: ( '\\\"' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\"' ) ) )* '\\\"' | '\\\\'' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\\'' ) ) )* '\\\\'' )\n            {\n            // InternalCrossReferenceProposalTestLanguage.g:167:15: ( '\\\"' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\"' ) ) )* '\\\"' | '\\\\'' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\\'' ) ) )* '\\\\'' )\n            int alt6=2;\n            int LA6_0 = input.LA(1);\n            if ( (LA6_0=='\\\"') ) {\n                alt6=1;\n            }\n            else if ( (LA6_0=='\\'') ) {\n                alt6=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 6, 0, input);\n                throw nvae;\n            }\n            switch (alt6) {\n                case 1 :\n                    // InternalCrossReferenceProposalTestLanguage.g:167:16: '\\\"' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\"' ) ) )* '\\\"'\n                    {\n                    match('\\\"'); \n                    // InternalCrossReferenceProposalTestLanguage.g:167:20: ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\"' ) ) )*\n                    loop4:\n                    do {\n                        int alt4=3;\n                        int LA4_0 = input.LA(1);\n                        if ( (LA4_0=='\\\\') ) {\n                            alt4=1;\n                        }\n                        else if ( ((LA4_0>='\\u0000' && LA4_0<='!')||(LA4_0>='#' && LA4_0<='[')||(LA4_0>=']' && LA4_0<='\\uFFFF')) ) {\n                            alt4=2;\n                        }\n                        switch (alt4) {\n                    \tcase 1 :\n                    \t    // InternalCrossReferenceProposalTestLanguage.g:167:21: '\\\\\\\\' .\n                    \t    {\n                    \t    match('\\\\'); \n                    \t    matchAny(); \n                    \t    }\n                    \t    break;\n                    \tcase 2 :\n                    \t    // InternalCrossReferenceProposalTestLanguage.g:167:28: ~ ( ( '\\\\\\\\' | '\\\"' ) )\n                    \t    {\n                    \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\\uFFFF') ) {\n                    \t        input.consume();\n                    \t    }\n                    \t    else {\n                    \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n                    \t        recover(mse);\n                    \t        throw mse;}\n                    \t    }\n                    \t    break;\n                    \tdefault :\n                    \t    break loop4;\n                        }\n                    } while (true);\n                    match('\\\"'); \n                    }\n                    break;\n                case 2 :\n                    // InternalCrossReferenceProposalTestLanguage.g:167:48: '\\\\'' ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\\'' ) ) )* '\\\\''\n                    {\n                    match('\\''); \n                    // InternalCrossReferenceProposalTestLanguage.g:167:53: ( '\\\\\\\\' . | ~ ( ( '\\\\\\\\' | '\\\\'' ) ) )*\n                    loop5:\n                    do {\n                        int alt5=3;\n                        int LA5_0 = input.LA(1);\n                        if ( (LA5_0=='\\\\') ) {\n                            alt5=1;\n                        }\n                        else if ( ((LA5_0>='\\u0000' && LA5_0<='&')||(LA5_0>='(' && LA5_0<='[')||(LA5_0>=']' && LA5_0<='\\uFFFF')) ) {\n                            alt5=2;\n                        }\n                        switch (alt5) {\n                    \tcase 1 :\n                    \t    // InternalCrossReferenceProposalTestLanguage.g:167:54: '\\\\\\\\' .\n                    \t    {\n                    \t    match('\\\\'); \n                    \t    matchAny(); \n                    \t    }\n                    \t    break;\n                    \tcase 2 :\n                    \t    // InternalCrossReferenceProposalTestLanguage.g:167:61: ~ ( ( '\\\\\\\\' | '\\\\'' ) )\n                    \t    {\n                    \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\\uFFFF') ) {\n                    \t        input.consume();\n                    \t    }\n                    \t    else {\n                    \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n                    \t        recover(mse);\n                    \t        throw mse;}\n                    \t    }\n                    \t    break;\n                    \tdefault :\n                    \t    break loop5;\n                        }\n                    } while (true);\n                    match('\\''); \n                    }\n                    break;\n            }\n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"RULE_STRING\"\n    // $ANTLR start \"RULE_ML_COMMENT\"\n<fim_suffix>    public final void mRULE_ML_COMMENT() throws RecognitionException {\n        try {\n            int _type = RULE_ML_COMMENT;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalCrossReferenceProposalTestLanguage.g:169:17: ( '/*' ( options {greedy=false; } : . )* '*/' )\n            // InternalCrossReferenceProposalTestLanguage.g:169:19: '/*' ( options {greedy=false; } : . )* '*/'\n            {\n            match(\"/*\"); \n            // InternalCrossReferenceProposalTestLanguage.g:169:24: ( options {greedy=false; } : . )*\n            loop7:\n            do {\n                int alt7=2;\n                int LA7_0 = input.LA(1);\n                if ( (LA7_0=='*') ) {\n                    int LA7_1 = input.LA(2);\n                    if ( (LA7_1=='/') ) {\n                        alt7=2;\n                    }\n                    else if ( ((LA7_1>='\\u0000' && LA7_1<='.')||(LA7_1>='0' && LA7_1<='\\uFFFF')) ) {\n                        alt7=1;\n                    }\n                }\n                else if ( ((LA7_0>='\\u0000' && LA7_0<=')')||(LA7_0>='+' && LA7_0<='\\uFFFF')) ) {\n                    alt7=1;\n                }\n                switch (alt7) {\n            \tcase 1 :\n            \t    // InternalCrossReferenceProposalTestLanguage.g:169:52: .\n            \t    {\n            \t    matchAny(); \n            \t    }\n            \t    break;\n            \tdefault :\n            \t    break loop7;\n                }\n            } while (true);\n            match(\"*/\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }<fim_middle>// function below is long method\n"}