{"text": "<fim_prefix>\n<fim_suffix>public abstract class ExternalLoadBalancerDeviceManagerImpl extends AdapterBase implements ExternalLoadBalancerDeviceManager, ResourceStateAdapter {\n    @Inject\n    NetworkExternalLoadBalancerDao _networkExternalLBDao;\n    @Inject\n    ExternalLoadBalancerDeviceDao _externalLoadBalancerDeviceDao;\n    @Inject\n    HostDao _hostDao;\n    @Inject\n    DataCenterDao _dcDao;\n    @Inject\n    NetworkModel _networkModel;\n    @Inject\n    NetworkOrchestrationService _networkMgr;\n    @Inject\n    InlineLoadBalancerNicMapDao _inlineLoadBalancerNicMapDao;\n    @Inject\n    NicDao _nicDao;\n    @Inject\n    AgentManager _agentMgr;\n    @Inject\n    ResourceManager _resourceMgr;\n    @Inject\n    IPAddressDao _ipAddressDao;\n    @Inject\n    VlanDao _vlanDao;\n    @Inject\n    NetworkOfferingDao _networkOfferingDao;\n    @Inject\n    AccountDao _accountDao;\n    @Inject\n    PhysicalNetworkDao _physicalNetworkDao;\n    @Inject\n    PhysicalNetworkServiceProviderDao _physicalNetworkServiceProviderDao;\n    @Inject\n    AccountManager _accountMgr;\n    @Inject\n    UserStatisticsDao _userStatsDao;\n    @Inject\n    NetworkDao _networkDao;\n    @Inject\n    DomainRouterDao _routerDao;\n    @Inject\n    LoadBalancerDao _loadBalancerDao;\n    @Inject\n    PortForwardingRulesDao _portForwardingRulesDao;\n    @Inject\n    ConfigurationDao _configDao;\n    @Inject\n    HostDetailsDao _hostDetailDao;\n    @Inject\n    NetworkExternalLoadBalancerDao _networkLBDao;\n    @Inject\n    NetworkServiceMapDao _ntwkSrvcProviderDao;\n    @Inject\n    NetworkExternalFirewallDao _networkExternalFirewallDao;\n    @Inject\n    ExternalFirewallDeviceDao _externalFirewallDeviceDao;\n    @Inject\n    protected HostPodDao _podDao = null;\n    @Inject\n    IpAddressManager _ipAddrMgr;\n    @Inject\n    protected\n    VirtualMachineManager _itMgr;\n    @Inject\n    VMInstanceDao _vmDao;\n    @Inject\n    VMTemplateDao _templateDao;\n    @Inject\n    ServiceOfferingDao _serviceOfferingDao;\n    @Inject\n    PhysicalNetworkServiceProviderDao _physicalProviderDao;\n    @Inject\n    VirtualRouterProviderDao _vrProviderDao;\n    private long _defaultLbCapacity;\n    private static final org.apache.log4j.Logger s_logger = Logger.getLogger(ExternalLoadBalancerDeviceManagerImpl.class);\n    @Override\n    @DB\n    public ExternalLoadBalancerDeviceVO addExternalLoadBalancer(long physicalNetworkId, String url, String username, String password, final String deviceName,\n        ServerResource resource, final boolean gslbProvider, final boolean exclusiveGslbProivider,\n        final String gslbSitePublicIp, final String gslbSitePrivateIp) {\n        PhysicalNetworkVO pNetwork = null;\n        final NetworkDevice ntwkDevice = NetworkDevice.getNetworkDevice(deviceName);\n        long zoneId;\n        if ((ntwkDevice == null) || (url == null) || (username == null) || (resource == null) || (password == null)) {\n            throw new InvalidParameterValueException(\"Atleast one of the required parameters (url, username, password,\"\n                + \" server resource, zone id/physical network id) is not specified or a valid parameter.\");\n        }\n        pNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n        if (pNetwork == null) {\n            throw new InvalidParameterValueException(\"Could not find phyical network with ID: \" + physicalNetworkId);\n        }\n        zoneId = pNetwork.getDataCenterId();\n        PhysicalNetworkServiceProviderVO ntwkSvcProvider =\n            _physicalNetworkServiceProviderDao.findByServiceProvider(pNetwork.getId(), ntwkDevice.getNetworkServiceProvder());\n        ntwkSvcProvider = _physicalNetworkServiceProviderDao.findByServiceProvider(pNetwork.getId(), ntwkDevice.getNetworkServiceProvder());\n        if (ntwkSvcProvider == null) {\n            throw new CloudRuntimeException(\"Network Service Provider: \" + ntwkDevice.getNetworkServiceProvder() + \" is not enabled in the physical network: \" +\n                physicalNetworkId + \"to add this device\");\n        } else if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {\n            throw new CloudRuntimeException(\"Network Service Provider: \" + ntwkSvcProvider.getProviderName() + \" is in shutdown state in the physical network: \" +\n                physicalNetworkId + \"to add this device\");\n        }\n        if (gslbProvider) {\n            ExternalLoadBalancerDeviceVO zoneGslbProvider =\n                _externalLoadBalancerDeviceDao.findGslbServiceProvider(physicalNetworkId, ntwkDevice.getNetworkServiceProvder());\n            if (zoneGslbProvider != null) {\n                throw new CloudRuntimeException(\"There is a GSLB service provider configured in the zone alredy.\");\n            }\n        }\n        URI uri;\n        try {\n            uri = new URI(url);\n        } catch (Exception e) {\n            s_logger.debug(e);\n            throw new InvalidParameterValueException(e.getMessage());\n        }\n        String ipAddress = uri.getHost();\n        Map hostDetails = new HashMap<String, String>();\n        String hostName = getExternalLoadBalancerResourceGuid(pNetwork.getId(), deviceName, ipAddress);\n        hostDetails.put(\"name\", hostName);\n        hostDetails.put(\"guid\", UUID.randomUUID().toString());\n        hostDetails.put(\"zoneId\", String.valueOf(pNetwork.getDataCenterId()));\n        hostDetails.put(\"ip\", ipAddress);\n        hostDetails.put(\"physicalNetworkId\", String.valueOf(pNetwork.getId()));\n        hostDetails.put(\"username\", username);\n        hostDetails.put(\"password\", password);\n        hostDetails.put(\"deviceName\", deviceName);\n        // leave parameter validation to be part server resource configure\n        Map<String, String> configParams = new HashMap<String, String>();\n        UrlUtil.parseQueryParameters(uri.getQuery(), false, configParams);\n        hostDetails.putAll(configParams);\n        try {\n            resource.configure(hostName, hostDetails);\n            final Host host = _resourceMgr.addHost(zoneId, resource, Host.Type.ExternalLoadBalancer, hostDetails);\n            if (host != null) {\n                final boolean dedicatedUse =\n                    (configParams.get(ApiConstants.LOAD_BALANCER_DEVICE_DEDICATED) != null) ? Boolean.parseBoolean(configParams.get(ApiConstants.LOAD_BALANCER_DEVICE_DEDICATED))\n                        : false;\n                long capacity = NumbersUtil.parseLong(configParams.get(ApiConstants.LOAD_BALANCER_DEVICE_CAPACITY), 0);\n                if (capacity == 0) {\n                    capacity = _defaultLbCapacity;\n                }\n                final long capacityFinal = capacity;\n                final PhysicalNetworkVO pNetworkFinal = pNetwork;\n                return Transaction.execute(new TransactionCallback<ExternalLoadBalancerDeviceVO>() {\n                    @Override\n                    public ExternalLoadBalancerDeviceVO doInTransaction(TransactionStatus status) {\n                        ExternalLoadBalancerDeviceVO lbDeviceVO =\n                            new ExternalLoadBalancerDeviceVO(host.getId(), pNetworkFinal.getId(), ntwkDevice.getNetworkServiceProvder(), deviceName, capacityFinal,\n                                dedicatedUse, gslbProvider);\n                        if (gslbProvider) {\n                            lbDeviceVO.setGslbSitePublicIP(gslbSitePublicIp);\n                            lbDeviceVO.setGslbSitePrivateIP(gslbSitePrivateIp);\n                            lbDeviceVO.setExclusiveGslbProvider(exclusiveGslbProivider);\n                        }\n                        _externalLoadBalancerDeviceDao.persist(lbDeviceVO);\n                        DetailVO hostDetail = new DetailVO(host.getId(), ApiConstants.LOAD_BALANCER_DEVICE_ID, String.valueOf(lbDeviceVO.getId()));\n                        _hostDetailDao.persist(hostDetail);\n                        return lbDeviceVO;\n                    }\n                });\n            } else {\n                throw new CloudRuntimeException(\"Failed to add load balancer device due to internal error.\");\n            }\n        } catch (ConfigurationException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n    }\n    @Override\n    public boolean deleteExternalLoadBalancer(long hostId) {\n        HostVO externalLoadBalancer = _hostDao.findById(hostId);\n        if (externalLoadBalancer == null) {\n            throw new InvalidParameterValueException(\"Could not find an external load balancer with ID: \" + hostId);\n        }\n        DetailVO lbHostDetails = _hostDetailDao.findDetail(hostId, ApiConstants.LOAD_BALANCER_DEVICE_ID);\n        long lbDeviceId = Long.parseLong(lbHostDetails.getValue());\n        ExternalLoadBalancerDeviceVO lbDeviceVo = _externalLoadBalancerDeviceDao.findById(lbDeviceId);\n        if (lbDeviceVo.getAllocationState() == LBDeviceAllocationState.Provider) {<fim_middle>// class below is blob and data class\n"}