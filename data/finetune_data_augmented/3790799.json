{"text": "<fim_prefix>/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.android.exoplayer2.offline;\n\nimport android.net.Uri;\nimport android.support.annotation.Nullable;\nimport com.google.android.exoplayer2.util.Assertions;\nimport com.google.android.exoplayer2.util.Util;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\n/** Contains the necessary parameters for a download or remove action. */\n<fim_suffix>public abstract class DownloadAction {\n\n  /** Used to deserialize {@link DownloadAction}s. */\n  public abstract static class Deserializer {\n\n    public final String type;\n    public final int version;\n\n    public Deserializer(String type, int version) {\n      this.type = type;\n      this.version = version;\n    }\n\n    /**\n     * Deserializes an action from the {@code input}.\n     *\n     * @param version The version of the serialized action.\n     * @param input The stream from which to read the action.\n     * @see DownloadAction#writeToStream(DataOutputStream)\n     */\n    public abstract DownloadAction readFromStream(int version, DataInputStream input)\n        throws IOException;\n  }\n\n  private static @Nullable Deserializer[] defaultDeserializers;\n\n  /** Returns available default {@link Deserializer}s. */\n  public static synchronized Deserializer[] getDefaultDeserializers() {\n    if (defaultDeserializers != null) {\n      return defaultDeserializers;\n    }\n    Deserializer[] deserializers = new Deserializer[4];\n    int count = 0;\n    deserializers[count++] = ProgressiveDownloadAction.DESERIALIZER;\n    Class<?> clazz;\n    // Full class names used for constructor args so the LINT rule triggers if any of them move.\n    try {\n      // LINT.IfChange\n      clazz = Class.forName(\"com.google.android.exoplayer2.source.dash.offline.DashDownloadAction\");\n      // LINT.ThenChange(../../../../../../../../../dash/proguard-rules.txt)\n      deserializers[count++] = getDeserializer(clazz);\n    } catch (Exception e) {\n      // Do nothing.\n    }\n    try {\n      // LINT.IfChange\n      clazz = Class.forName(\"com.google.android.exoplayer2.source.hls.offline.HlsDownloadAction\");\n      // LINT.ThenChange(../../../../../../../../../hls/proguard-rules.txt)\n      deserializers[count++] = getDeserializer(clazz);\n    } catch (Exception e) {\n      // Do nothing.\n    }\n    try {\n      // LINT.IfChange\n      clazz =\n          Class.forName(\n              \"com.google.android.exoplayer2.source.smoothstreaming.offline.SsDownloadAction\");\n      // LINT.ThenChange(../../../../../../../../../smoothstreaming/proguard-rules.txt)\n      deserializers[count++] = getDeserializer(clazz);\n    } catch (Exception e) {\n      // Do nothing.\n    }\n    defaultDeserializers = Arrays.copyOf(Assertions.checkNotNull(deserializers), count);\n    return defaultDeserializers;\n  }\n\n  /**\n   * Deserializes one action that was serialized with {@link #serializeToStream(DownloadAction,\n   * OutputStream)} from the {@code input}, using the {@link Deserializer}s that supports the\n   * action's type.\n   *\n   * <p>The caller is responsible for closing the given {@link InputStream}.\n   *\n   * @param deserializers {@link Deserializer}s for supported actions.\n   * @param input The stream from which to read the action.\n   * @return The deserialized action.\n   * @throws IOException If there is an IO error reading from {@code input}, or if the action type\n   *     isn't supported by any of the {@code deserializers}.\n   */\n  public static DownloadAction deserializeFromStream(\n      Deserializer[] deserializers, InputStream input) throws IOException {\n    // Don't close the stream as it closes the underlying stream too.\n    DataInputStream dataInputStream = new DataInputStream(input);\n    String type = dataInputStream.readUTF();\n    int version = dataInputStream.readInt();\n    for (Deserializer deserializer : deserializers) {\n      if (type.equals(deserializer.type) && deserializer.version >= version) {\n        return deserializer.readFromStream(version, dataInputStream);\n      }\n    }\n    throw new DownloadException(\"No deserializer found for:\" + type + \", \" + version);\n  }\n\n  /** Serializes {@code action} type and data into the {@code output}. */\n  public static void serializeToStream(DownloadAction action, OutputStream output)\n      throws IOException {\n    // Don't close the stream as it closes the underlying stream too.\n    DataOutputStream dataOutputStream = new DataOutputStream(output);\n    dataOutputStream.writeUTF(action.type);\n    dataOutputStream.writeInt(action.version);\n    action.writeToStream(dataOutputStream);\n    dataOutputStream.flush();\n  }\n\n  /** The type of the action. */\n  public final String type;\n  /** The action version. */\n  public final int version;\n  /** The uri being downloaded or removed. */\n  public final Uri uri;\n  /** Whether this is a remove action. If false, this is a download action. */\n  public final boolean isRemoveAction;\n  /** Custom data for this action. May be empty. */\n  public final byte[] data;\n\n  /**\n   * @param type The type of the action.\n   * @param version The action version.\n   * @param uri The uri being downloaded or removed.\n   * @param isRemoveAction Whether this is a remove action. If false, this is a download action.\n   * @param data Optional custom data for this action.\n   */\n  protected DownloadAction(\n      String type, int version, Uri uri, boolean isRemoveAction, @Nullable byte[] data) {\n    this.type = type;\n    this.version = version;\n    this.uri = uri;\n    this.isRemoveAction = isRemoveAction;\n    this.data = data != null ? data : Util.EMPTY_BYTE_ARRAY;\n  }\n\n  /** Serializes itself into a byte array. */\n  public final byte[] toByteArray() {\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    try {\n      serializeToStream(this, output);\n    } catch (IOException e) {\n      // ByteArrayOutputStream shouldn't throw IOException.\n      throw new IllegalStateException();\n    }\n    return output.toByteArray();\n  }\n\n  /** Returns whether this is an action for the same media as the {@code other}. */\n  public boolean isSameMedia(DownloadAction other) {\n    return uri.equals(other.uri);\n  }\n\n  /** Returns keys of tracks to be downloaded. */\n  public List<StreamKey> getKeys() {\n    return Collections.emptyList();\n  }\n\n  /** Serializes itself into the {@code output}. */\n  protected abstract void writeToStream(DataOutputStream output) throws IOException;\n\n  /** Creates a {@link Downloader} with the given parameters. */\n  public abstract Downloader createDownloader(\n      DownloaderConstructorHelper downloaderConstructorHelper);\n\n  @SuppressWarnings(\"EqualsGetClass\")\n  @Override\n  public boolean equals(@Nullable Object o) {\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    DownloadAction that = (DownloadAction) o;\n    return type.equals(that.type)\n        && version == that.version\n        && uri.equals(that.uri)\n        && isRemoveAction == that.isRemoveAction\n        && Arrays.equals(data, that.data);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = uri.hashCode();\n    result = 31 * result + (isRemoveAction ? 1 : 0);\n    result = 31 * result + Arrays.hashCode(data);\n    return result;\n  }\n\n  private static Deserializer getDeserializer(Class<?> clazz)\n      throws NoSuchFieldException, IllegalAccessException {\n    Object value = clazz.getDeclaredField(\"DESERIALIZER\").get(null);\n    return (Deserializer) Assertions.checkNotNull(value);\n  }\n}<fim_middle>// class below is blob\n"}