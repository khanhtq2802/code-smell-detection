{"text": "<fim_prefix>/*\n * Copyright 2012 LinkedIn, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\npackage com.linkedin.parseq;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Iterator;\n\n\n/**\n * An exception representing multiple exceptions.  Useful for example to deliver multiple\n * exceptions to a callback interface which only accepts a single Exception.\n * @author Steven Ihde\n */\n\npublic class MultiException extends Exception {\n  private static final long serialVersionUID = 1L;\n\n  private final Collection<? extends Throwable> _causes;\n\n  public MultiException(String message, Collection<? extends Throwable> causes) {\n    super(message);\n    _causes = (causes == null ? Collections.<Throwable> emptyList() : causes);\n\n    // Let the first exception be the cause so at least something shows up in the stack\n    // trace; we can't just override printStackTrace() because OUR printStackTrace() is\n    // not invoked when this exception is the cause of another.\n    Iterator<? extends Throwable> i = _causes.iterator();\n    if (i.hasNext()) {\n      initCause(i.next());\n    }\n  }\n\n<fim_suffix>  public MultiException(Collection<? extends Throwable> causes) {\n    this(null, causes);\n  }\n\n  public Collection<? extends Throwable> getCauses() {\n    return _causes;\n  }\n\n  @Override\n  public String toString() {\n    // MultiException: Xyz failed (multiple causes follow; only first is shown in stack trace): [java.lang.FooException: bar, java.lang.BazException: quux]\n    return super.toString() + \" (multiple causes follow; only first is shown in stack trace): \" + _causes;\n  }\n}<fim_middle>// function below has no smell\n"}