{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2013 GoPivotal, Inc.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    GoPivotal, Inc. - initial API and implementation\n *******************************************************************************/\npackage org.springframework.ide.eclipse.boot.wizard.guides;\n\nimport java.util.function.Predicate;\n\nimport org.eclipse.jface.layout.GridDataFactory;\nimport org.eclipse.jface.layout.GridLayoutFactory;\nimport org.eclipse.jface.viewers.ArrayContentProvider;\nimport org.eclipse.jface.viewers.ISelection;\nimport org.eclipse.jface.viewers.ISelectionChangedListener;\nimport org.eclipse.jface.viewers.IStructuredSelection;\nimport org.eclipse.jface.viewers.SelectionChangedEvent;\nimport org.eclipse.jface.viewers.StructuredSelection;\nimport org.eclipse.jface.viewers.TableViewer;\nimport org.eclipse.jface.viewers.Viewer;\nimport org.eclipse.jface.viewers.ViewerFilter;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.ModifyEvent;\nimport org.eclipse.swt.events.ModifyListener;\nimport org.eclipse.swt.events.PaintEvent;\nimport org.eclipse.swt.events.PaintListener;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Control;\nimport org.eclipse.swt.widgets.Label;\nimport org.eclipse.swt.widgets.Text;\nimport org.springframework.ide.eclipse.boot.wizard.content.Describable;\nimport org.springframework.ide.eclipse.boot.wizard.util.StringMatchers;\nimport org.springsource.ide.eclipse.commons.core.util.StringUtil;\nimport org.springsource.ide.eclipse.commons.livexp.core.LiveExpression;\nimport org.springsource.ide.eclipse.commons.livexp.core.SelectionModel;\nimport org.springsource.ide.eclipse.commons.livexp.core.ValidationResult;\nimport org.springsource.ide.eclipse.commons.livexp.ui.ChooseOneSectionCombo;\nimport org.springsource.ide.eclipse.commons.livexp.ui.IPageWithSections;\n\n/**\n * Wizard section to choose one element from list of elements. Uses a table viewer to allow selecting\n * an element.\n * <p>\n * This class is very similar in functionality (from client's point of view) to {@link ChooseOneSectionCombo}.\n * It should be possible to use either one of these classes as functional replacements for one another.\n */\n@SuppressWarnings(\"restriction\")\npublic class ChooseOneSectionTable<T> extends ChooseOneSection {\n\n\tprivate class ChoicesFilter extends ViewerFilter {\n\n\t\tprivate Predicate<String> matcher = null;\n\n\t\tpublic ChoicesFilter() {\n\t\t\tif (searchBox!=null) {\n\t\t\t\tsetSearchTerm(searchBox.getText());\n\t\t\t}\n\t\t}\n\n\t\tpublic void setSearchTerm(String text) {\n\t\t\tmatcher = StringMatchers.caseInsensitiveSubstring(text);\n\t\t}\n\n<fim_suffix>\t\t@Override\n\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {\n\t\t\tif (matcher==null) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tString label = labelProvider.getText(element);\n\t\t\t\tif (match(label)) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if (element instanceof Describable) {\n\t\t\t\t\tString description = ((Describable) element).getDescription();\n\t\t\t\t\treturn match(description);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tprivate boolean match(String text) {\n\t\t\tif (matcher==null) {\n\t\t\t\treturn true; // Search term not set... anything is acceptable.\n\t\t\t} else {\n\t\t\t\treturn matcher.test(text);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tprivate SelectionModel<T> selection;\n\tprivate String label; //Descriptive Label for this section\n\tprivate T[] options; //The elements to choose from\n\tprivate Text searchBox;\n\tprivate ChoicesFilter filter;\n\n\tpublic ChooseOneSectionTable(IPageWithSections owner, String label, SelectionModel<T> selection, T[] options) {\n\t\tsuper(owner);\n\t\tthis.label = label;\n\t\tthis.selection = selection;\n\t\tthis.options = options;\n\t}\n\n\n\t@Override\n\tpublic LiveExpression<ValidationResult> getValidator() {\n\t\treturn selection.validator;\n\t}\n\n\t@Override\n\tpublic void createContents(Composite page) {\n\t\tComposite field = new Composite(page, SWT.NONE);\n\t\tint cols = label==null ? 1 : 2;\n\t\tGridLayout layout = GridLayoutFactory.fillDefaults().numColumns(cols).create();\n\t\tfield.setLayout(layout);\n\n\t\tsearchBox = new Text(field, SWT.SINGLE | SWT.BORDER | SWT.SEARCH | SWT.ICON_CANCEL);\n\t\tGridDataFactory.fillDefaults().grab(true, false).applyTo(searchBox);\n\n\t\tLabel fieldNameLabel = null;\n\t\tif (label!=null) {\n\t\t\tfieldNameLabel = new Label(field, SWT.NONE);\n\t\t\tfieldNameLabel.setText(label);\n\t\t}\n\n\t\tfinal TableViewer tv = new TableViewer(field, SWT.SINGLE|SWT.BORDER|SWT.V_SCROLL);\n\t\ttv.addFilter(filter = new ChoicesFilter());\n\t\ttv.setLabelProvider(labelProvider);\n\t\ttv.setContentProvider(ArrayContentProvider.getInstance());\n\t\ttv.setInput(options);\n\n\t\tif (fieldNameLabel!=null) {\n\t\t\tGridDataFactory.fillDefaults().align(SWT.BEGINNING, SWT.BEGINNING).applyTo(fieldNameLabel);\n\t\t}\n\t\tGridDataFactory grab = GridDataFactory.fillDefaults().grab(true, true).hint(SWT.DEFAULT, 150);\n\t\tgrab.applyTo(field);\n\t\tgrab.applyTo(tv.getTable());\n\n\t\twhenVisible(tv.getControl(), new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tT preSelect = selection.selection.getValue();\n\t\t\t\tif (preSelect!=null) {\n\t\t\t\t\ttv.setSelection(new StructuredSelection(preSelect), true);\n\t\t\t\t} else {\n\t\t\t\t\ttv.setSelection(StructuredSelection.EMPTY, true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\ttv.addSelectionChangedListener(new ISelectionChangedListener() {\n\t\t\t@Override\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tpublic void selectionChanged(SelectionChangedEvent event) {\n\t\t\t\tISelection sel = tv.getSelection();\n\t\t\t\tif (sel.isEmpty()) {\n\t\t\t\t\tselection.selection.setValue(null);\n\t\t\t\t} else if (sel instanceof IStructuredSelection){\n\t\t\t\t\tIStructuredSelection ss = (IStructuredSelection) sel;\n\t\t\t\t\tselection.selection.setValue((T)ss.getFirstElement());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tsearchBox.addModifyListener(new ModifyListener() {\n\t\t\t@Override\n\t\t\tpublic void modifyText(ModifyEvent e) {\n\t\t\t\tfilter.setSearchTerm(searchBox.getText());\n\t\t\t\ttv.refresh();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void whenVisible(final Control control, final Runnable runnable) {\n\t\tPaintListener l = new PaintListener() {\n\t\t\t@Override\n\t\t\tpublic void paintControl(PaintEvent e) {\n\t\t\t\trunnable.run();\n\t\t\t\tcontrol.removePaintListener(this);\n\t\t\t}\n\t\t};\n\t\tcontrol.addPaintListener(l);\n\t}\n\n//\tprivate String[] getLabels() {\n//\t\tString[] labels = new String[options.length];\n//\t\tfor (int i = 0; i < labels.length; i++) {\n//\t\t\tlabels[i] = labelProvider.getText(options[i]);\n//\t\t}\n//\t\treturn labels;\n//\t}\n\n}<fim_middle>// function below has no smell\n"}