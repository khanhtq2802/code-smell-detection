{"text": "<fim_prefix>/*****************************************************************\n *   Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n ****************************************************************/\npackage org.apache.cayenne.modeler.undo;\n\nimport javax.swing.undo.CannotRedoException;\nimport javax.swing.undo.CannotUndoException;\n\nimport org.apache.cayenne.configuration.DataChannelDescriptor;\nimport org.apache.cayenne.configuration.DataNodeDescriptor;\nimport org.apache.cayenne.modeler.Application;\nimport org.apache.cayenne.modeler.action.CreateNodeAction;\nimport org.apache.cayenne.modeler.action.RemoveAction;\n\npublic class CreateNodeUndoableEdit extends CayenneUndoableEdit {\n\n<fim_suffix>    @Override\n    public String getPresentationName() {\n        return \"Create DataNode\";\n    }\n\n    private DataNodeDescriptor node;\n    private DataChannelDescriptor domain;\n\n    public CreateNodeUndoableEdit(Application application, DataNodeDescriptor node) {\n        this.domain = (DataChannelDescriptor) Application\n                .getInstance()\n                .getProject()\n                .getRootNode();\n        this.node = node;\n    }\n\n    @Override\n    public void undo() throws CannotUndoException {\n        RemoveAction action = actionManager.getAction(RemoveAction.class);\n        action.removeDataNode(node);\n    }\n\n    public void redo() throws CannotRedoException {\n        domain.getNodeDescriptors().add(node);\n        CreateNodeAction action = actionManager.getAction(CreateNodeAction.class);\n        action.createDataNode(node);\n    }\n}<fim_middle>// function below has no smell\n"}