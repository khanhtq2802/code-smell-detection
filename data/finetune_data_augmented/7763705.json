{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.druid.curator.discovery;\n\nimport com.google.inject.Inject;\nimport org.apache.curator.x.discovery.ServiceDiscovery;\nimport org.apache.curator.x.discovery.ServiceInstance;\nimport org.apache.druid.java.util.emitter.EmittingLogger;\nimport org.apache.druid.server.DruidNode;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * This class is deprecated, Add service to {@link org.apache.druid.discovery.DruidNodeAnnouncer} node announcement instead.\n *\n * Uses the Curator Service Discovery recipe to announce services.\n */\n<fim_suffix>@Deprecated\npublic class CuratorServiceAnnouncer implements ServiceAnnouncer\n{\n  private static final EmittingLogger log = new EmittingLogger(CuratorServiceAnnouncer.class);\n\n  private final ServiceDiscovery<Void> discovery;\n  private final Map<String, ServiceInstance<Void>> instanceMap = new HashMap<>();\n  private final Object monitor = new Object();\n\n  @Inject\n  public CuratorServiceAnnouncer(\n      ServiceDiscovery<Void> discovery\n  )\n  {\n    this.discovery = discovery;\n  }\n\n  @Override\n  public void announce(DruidNode service)\n  {\n    final String serviceName = CuratorServiceUtils.makeCanonicalServiceName(service.getServiceName());\n\n    final ServiceInstance<Void> instance;\n    synchronized (monitor) {\n      if (instanceMap.containsKey(serviceName)) {\n        log.warn(\"Ignoring request to announce service[%s]\", service);\n        return;\n      } else {\n        try {\n          instance = ServiceInstance.<Void>builder()\n              .name(serviceName)\n              .address(service.getHost())\n              .port(service.getPlaintextPort())\n              .sslPort(service.getTlsPort())\n              .build();\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n\n        instanceMap.put(serviceName, instance);\n      }\n    }\n\n    try {\n      log.info(\"Announcing service[%s]\", service);\n      discovery.registerService(instance);\n    }\n    catch (Exception e) {\n      log.warn(\"Failed to announce service[%s]\", service);\n      synchronized (monitor) {\n        instanceMap.remove(serviceName);\n      }\n    }\n  }\n\n  @Override\n  public void unannounce(DruidNode service)\n  {\n    final String serviceName = CuratorServiceUtils.makeCanonicalServiceName(service.getServiceName());\n    final ServiceInstance<Void> instance;\n\n    synchronized (monitor) {\n      instance = instanceMap.get(serviceName);\n      if (instance == null) {\n        log.warn(\"Ignoring request to unannounce service[%s]\", service);\n        return;\n      }\n    }\n\n    log.info(\"Unannouncing service[%s]\", service);\n    try {\n      discovery.unregisterService(instance);\n    }\n    catch (Exception e) {\n      log.makeAlert(e, \"Failed to unannounce service[%s], zombie znode perhaps in existence.\", serviceName)\n         .addData(\"service\", service)\n         .emit();\n    }\n    finally {\n      synchronized (monitor) {\n        instanceMap.remove(serviceName);\n      }\n    }\n  }\n}<fim_middle>// class below has no smell\n"}