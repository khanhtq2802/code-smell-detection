{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2011, 2016 Eurotech and/or its affiliates\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Eurotech\n *     Jens Reimann <jreimann@redhat.com> - Provide internal error message\n *******************************************************************************/\npackage org.eclipse.kura.web.shared;\n\nimport java.util.MissingResourceException;\n\n/**\n * Superclass for GWT errors\n * <p>\n * The GwtKuraException class is the superclass of all GWT errors and exceptions\n * in the Kura project. It extends the JDK Exception class by requesting its\n * invokers to provide an error code when building its instances. The code is\n * one value of KuraErrorCode enum; the code is used to document the possible\n * error conditions generated by the platform as well as to identify the\n * localized exception messages to be reported. Exceptions messages are stored\n * in the KuraExceptionMessagesBundle Properties Bundle and they are keyed on\n * the exception code.\n * </p>\n *\n * @author mcarrer\n *\n */\npublic class GwtKuraException extends Exception {\n\n    private static final long serialVersionUID = 1L;\n\n    protected GwtKuraErrorCode m_errorCode;\n    protected String[] m_arguments;\n\n    @SuppressWarnings(\"unused\")\n    private GwtKuraException() {\n        super();\n    }\n\n    public GwtKuraException(String message) {\n        super(message);\n    }\n\n    @SuppressWarnings(\"unused\")\n    private GwtKuraException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    @SuppressWarnings(\"unused\")\n    private GwtKuraException(Throwable t) {\n        super(t);\n    }\n\n    /**\n     * Builds a new GwtKuraException instance based on the supplied\n     * GwtKuraErrorCode, an optional Throwable cause.\n     *\n     * @param code\n     * @param t\n     * @param arguments\n     */\n    public GwtKuraException(GwtKuraErrorCode errorCode) {\n        this.m_errorCode = errorCode;\n    }\n\n    /**\n     * Builds a new GwtKuraException instance based on the supplied\n     * GwtKuraErrorCode, an optional Throwable cause.\n     *\n     * @param code\n     * @param t\n     * @param arguments\n     */\n    public GwtKuraException(GwtKuraErrorCode errorCode, Throwable cause) {\n        super(cause);\n        this.m_errorCode = errorCode;\n    }\n\n    public GwtKuraException(GwtKuraErrorCode errorCode, Throwable cause, String... arguments) {\n        super(cause);\n        this.m_errorCode = errorCode;\n        this.m_arguments = arguments;\n    }\n\n    /**\n     * Factory method to build an GwtKuraException with the\n     * GwtKuraErrorCode.INTERNAL_ERROR code providing a cause and a message.\n     *\n     * @param cause\n     * @param message\n     * @return\n     */\n    public static GwtKuraException internalError(Throwable cause, String message) {\n        return new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, cause, message);\n    }\n\n    /**\n     * Factory method to build an GwtKuraException with the\n     * GwtKuraErrorCode.INTERNAL_ERROR code providing only a message.\n     *\n     * @param cause\n     * @param message\n     * @return\n     */\n    public static GwtKuraException internalError(String message) {\n        return new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, null);\n    }\n\n    public GwtKuraErrorCode getCode() {\n        return this.m_errorCode;\n    }\n\n    @Override\n    public String getMessage() {\n        return getLocalizedMessage();\n    }\n\n    @Override\n    public String getLocalizedMessage() {\n\n        if (GwtKuraErrorCode.INTERNAL_ERROR.equals(this.m_errorCode) && this.m_arguments != null\n                && this.m_arguments.length == 1) {\n            return this.m_arguments[0];\n        }\n\n        String msg = this.m_errorCode.toString();\n        try {\n            // ValidationMessages MSGS = GWT.create(ValidationMessages.class);\n            // String msgPattern = MSGS.getString(m_errorCode.name());\n            // if (msgPattern != null) {\n            // msg = format(msgPattern, (Object[]) m_arguments);\n            // }\n        } catch (MissingResourceException e) {\n            // ignore\n        }\n        return msg;\n    }\n\n    public String[] getArguments() {\n        return this.m_arguments;\n    }\n\n<fim_suffix>    @SuppressWarnings(\"unused\")\n    private String format(String s, Object[] arguments) {\n\n        if (arguments == null) {\n            return s;\n        }\n\n        // A very simple implementation of format\n        int i = 0;\n        while (i < arguments.length) {\n            String delimiter = \"{\" + i + \"}\";\n            while (s.contains(delimiter)) {\n                s = s.replace(delimiter, String.valueOf(arguments[i]));\n            }\n            i++;\n        }\n        return s;\n    }\n}<fim_middle>// function below has no smell\n"}