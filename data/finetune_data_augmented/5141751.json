{"text": "<fim_prefix>     */\n    @Parameter( property = \"encoding\", defaultValue = \"${project.build.sourceEncoding}\" )\n    private String encoding;\n    /**\n     * The extra HttpClient parameters to be used when fetching links. For instance:\n     * \n     * <pre>\n     * &lt;httpClientParameters&gt;\n     * &nbsp;&lt;property&gt;\n     * &nbsp;&nbsp;&lt;name&gt;http.protocol.max-redirects&lt;/name&gt;\n     * &nbsp;&nbsp;&lt;value&gt;10&lt;/value&gt;\n     * &nbsp;&lt;/property&gt;\n     * &lt;/httpClientParameters&gt;\n     * </pre>\n     * \n     * See <a href=\"http://hc.apache.org/httpclient-3.x/preference-api.html\">HttpClient preference page</a>\n     */\n    @Parameter( property = \"httpClientParameters\" )\n    private Properties httpClientParameters;\n    /**\n     * Set the timeout to be used when fetching links. A value of zero means the timeout is not used.\n     */\n    @Parameter( property = \"timeout\", defaultValue = \"2000\" )\n    private int timeout;\n    /**\n     * <code>true</code> to skip the report execution, <code>false</code> otherwise.\n     * The purpose is to prevent infinite call when {@link #forceSite} is enable.\n     */\n    @Parameter( property = \"linkcheck.skip\", defaultValue = \"false\" )\n    private boolean skip;\n    /**\n     * <code>true</code> to force the site generation, <code>false</code> otherwise.\n     * Using this parameter ensures that all documents have been correctly generated.\n     */\n    @Parameter( property = \"linkcheck.forceSite\", defaultValue = \"true\" )\n    private boolean forceSite;\n    /**\n     * The base URL to use for absolute links (eg <code>/index.html</code>) in the site.\n     */\n    @Parameter( property = \"linkcheck.baseURL\", defaultValue = \"${project.url}\" )\n    private String baseURL;\n    // ----------------------------------------------------------------------\n    // Instance fields\n    // ----------------------------------------------------------------------\n    /** Result of the linkcheck in {@link #execute()} */\n    private LinkcheckModel result;\n    protected static final String ICON_SUCCESS = \"images/icon_success_sml.gif\";\n    protected static final String ICON_WARNING = \"images/icon_warning_sml.gif\";\n    protected static final String ICON_INFO = \"images/icon_info_sml.gif\";\n    protected static final String ICON_ERROR = \"images/icon_error_sml.gif\";\n    private static final String PLUGIN_RESOURCES_BASE = \"org/apache/maven/plugin/linkcheck\";\n    private static final String RESOURCE_NAMES[] = { ICON_SUCCESS, ICON_WARNING, ICON_INFO, ICON_ERROR };\n    // ----------------------------------------------------------------------\n    // Public methods\n    // ----------------------------------------------------------------------\n    /** {@inheritDoc} */\n    public String getDescription( Locale locale )\n    {\n        return i18n.getString( \"linkcheck-report\", locale, \"report.linkcheck.description\" );\n    }\n    /** {@inheritDoc} */\n    public String getName( Locale locale )\n    {\n        return i18n.getString( \"linkcheck-report\", locale, \"report.linkcheck.name\" );\n    }\n    /** {@inheritDoc} */\n    public String getOutputName()\n    {\n        return \"linkcheck\";\n    }\n    /** {@inheritDoc} */\n    public boolean canGenerateReport()\n    {\n        return !skip;\n    }\n    /** {@inheritDoc} */\n    public void execute()\n        throws MojoExecutionException\n    {\n        if ( !canGenerateReport() )\n        {\n            return;\n        }\n        checkEncoding();\n        try\n        {\n            result = executeLinkCheck( getBasedir() );\n        }\n        catch ( LinkCheckException e )\n        {\n            throw new MojoExecutionException( \"LinkCheckException: \" + e.getMessage(), e );\n        }\n    }\n    // ----------------------------------------------------------------------\n    // Protected methods\n    // ----------------------------------------------------------------------\n    /** {@inheritDoc} */\n    protected void executeReport( Locale locale )\n        throws MavenReportException\n    {\n        if ( result == null )\n        {\n            getLog().debug( \"Calling execute()\" );\n            try\n            {\n                this.execute();\n            }\n            catch ( MojoExecutionException e )\n            {\n                throw new MavenReportException( \"MojoExecutionException: \" + e.getMessage(), e );\n            }\n        }\n        if ( result != null )\n        {\n            generateReport( locale, result );\n            // free memory\n            result = null;\n        }\n    }\n    // ----------------------------------------------------------------------\n    // Private methods\n    // ----------------------------------------------------------------------\n    private void checkEncoding()\n    {\n        if ( StringUtils.isEmpty( encoding ) )\n        {\n            if ( getLog().isWarnEnabled() )\n            {\n                getLog().warn( \"File encoding has not been set, using platform encoding \" + ReaderFactory.FILE_ENCODING\n                                   + \", i.e. build is platform dependent!\" );\n            }\n            encoding = ReaderFactory.FILE_ENCODING;\n        }\n    }\n    private File getBasedir()\n        throws MojoExecutionException\n    {\n        File basedir;\n        if ( forceSite )\n        {\n            basedir = new File( linkcheckOutput.getParentFile(), \"tmpsite\" );\n            basedir.mkdirs();\n            List documents = null;\n            try\n            {\n                documents = FileUtils.getFiles( basedir, \"**/*.html\", null );\n            }\n            catch ( IOException e )\n            {\n                getLog().error( \"IOException: \" + e.getMessage() );\n                getLog().debug( e );\n            }\n            // if the site was not already generated, invoke it\n            if ( documents == null || ( documents != null && documents.size() == 0 ) )\n            {\n                getLog().info( \"Invoking the maven-site-plugin to ensure that all files are generated...\" );\n                try\n                {\n                    SiteInvoker invoker = new SiteInvoker( localRepository, getLog() );\n                    invoker.invokeSite( project, basedir );\n                }\n                catch ( IOException e )\n                {\n                    throw new MojoExecutionException( \"IOException: \" + e.getMessage(), e );\n                }\n            }\n        }\n        else\n        {\n            getLog().warn( \"The number of documents analyzed by Linkcheck could differ from the actual \"\n                               + \"number of documents!\" );\n            basedir = outputDirectory;\n            basedir.mkdirs();\n        }\n        return basedir;\n    }\n    /**\n     * Execute the <code>Linkcheck</code> tool.\n     *\n     * @param basedir not null\n     * @throws LinkCheckException if any\n     */\n    private LinkcheckModel executeLinkCheck( File basedir )\n        throws LinkCheckException\n    {\n        // Wrap linkcheck\n        linkCheck.setOnline( !offline );\n        linkCheck.setBasedir( basedir );\n        linkCheck.setBaseURL( baseURL );\n        linkCheck.setReportOutput( linkcheckOutput );\n        linkCheck.setLinkCheckCache( linkcheckCache );\n        linkCheck.setExcludedLinks( excludedLinks );\n        linkCheck.setExcludedPages( getExcludedPages() );\n        linkCheck.setExcludedHttpStatusErrors( asIntArray( excludedHttpStatusErrors ) );\n        linkCheck.setExcludedHttpStatusWarnings( asIntArray( excludedHttpStatusWarnings ) );\n        linkCheck.setEncoding( ( StringUtils.isNotEmpty( encoding ) ? encoding : ReaderFactory.UTF_8 ) );\n        HttpBean bean = new HttpBean();\n        bean.setMethod( httpMethod );\n        bean.setFollowRedirects( httpFollowRedirect );\n        bean.setTimeout( timeout );\n        if ( httpClientParameters != null )\n        {\n            bean.setHttpClientParameters( httpClientParameters );\n        }\n        Proxy proxy = settings.getActiveProxy();\n        if ( proxy != null )\n        {\n            bean.setProxyHost( proxy.getHost() );\n            bean.setProxyPort( proxy.getPort() );\n            bean.setProxyUser( proxy.getUsername() );\n            bean.setProxyPassword( proxy.getPassword() );\n        }\n        linkCheck.setHttp( bean );\n        return linkCheck.execute();\n    }\n    /**\n     * @return the excludedPages defined by the user and also this report.\n     */\n    private String[] getExcludedPages()\n    {\n        List pagesToExclude =\n            ( excludedPages != null ? new ArrayList( Arrays.asList( excludedPages ) ) : new ArrayList() );\n        // Exclude this report\n        pagesToExclude.add( getOutputName() + \".html\" );\n        return (String[]) pagesToExclude.toArray( new String[pagesToExclude.size()] );\n    }\n    // ----------------------------------------------------------------------\n    // Linkcheck report\n    // ----------------------------------------------------------------------\n<fim_suffix>    private void generateReport( Locale locale, LinkcheckModel linkcheckModel )\n    {\n        LinkcheckReportGenerator reportGenerator = new LinkcheckReportGenerator( i18n );\n        reportGenerator.setExcludedHttpStatusErrors( excludedHttpStatusErrors );\n        reportGenerator.setExcludedHttpStatusWarnings( excludedHttpStatusWarnings );\n        reportGenerator.setExcludedLinks( excludedLinks );\n        reportGenerator.setExcludedPages( excludedPages );\n        reportGenerator.setHttpFollowRedirect( httpFollowRedirect );\n        reportGenerator.setHttpMethod( httpMethod );\n        reportGenerator.setOffline( offline );\n        reportGenerator.generateReport( locale, linkcheckModel, getSink() );\n        closeReport();\n        // Copy the images\n        copyStaticResources();\n    }<fim_middle>// function below has no smell\n"}