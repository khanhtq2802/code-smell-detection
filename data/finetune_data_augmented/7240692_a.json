{"text": "<fim_prefix>package org.robolectric.shadows;\n\nimport android.app.Activity;\nimport android.app.PendingIntent;\nimport android.content.Context;\nimport android.content.IntentFilter;\nimport android.nfc.NdefMessage;\nimport android.nfc.NfcAdapter;\nimport org.robolectric.annotation.Implementation;\nimport org.robolectric.annotation.Implements;\nimport org.robolectric.annotation.RealObject;\nimport org.robolectric.annotation.Resetter;\nimport org.robolectric.util.ReflectionHelpers;\n\n<fim_suffix>@Implements(NfcAdapter.class)\npublic class ShadowNfcAdapter {\n  @RealObject NfcAdapter nfcAdapter;\n  private static boolean hardwareExists = true;\n  private boolean enabled;\n  private Activity enabledActivity;\n  private PendingIntent intent;\n  private IntentFilter[] filters;\n  private String[][] techLists;\n  private Activity disabledActivity;\n  private NdefMessage ndefPushMessage;\n  private boolean ndefPushMessageSet;\n  private NfcAdapter.CreateNdefMessageCallback ndefPushMessageCallback;\n  private NfcAdapter.OnNdefPushCompleteCallback onNdefPushCompleteCallback;\n\n  @Implementation\n  protected static NfcAdapter getNfcAdapter(Context context) {\n    if (!hardwareExists) {\n      return null;\n    }\n    return ReflectionHelpers.callConstructor(NfcAdapter.class);\n  }\n\n  @Implementation\n  protected void enableForegroundDispatch(\n      Activity activity, PendingIntent intent, IntentFilter[] filters, String[][] techLists) {\n    this.enabledActivity = activity;\n    this.intent = intent;\n    this.filters = filters;\n    this.techLists = techLists;\n  }\n\n  @Implementation\n  protected void disableForegroundDispatch(Activity activity) {\n    disabledActivity = activity;\n  }\n\n  /**\n   * Mocks setting NDEF push message so that it could be verified in the test. Use {@link\n   * #getNdefPushMessage()} to verify that message was set.\n   */\n  @Implementation\n  protected void setNdefPushMessage(\n      NdefMessage message, Activity activity, Activity... activities) {\n    if (activity == null) {\n      throw new NullPointerException(\"activity cannot be null\");\n    }\n    for (Activity a : activities) {\n      if (a == null) {\n        throw new NullPointerException(\"activities cannot contain null\");\n      }\n    }\n    this.ndefPushMessage = message;\n    this.ndefPushMessageSet = true;\n  }\n\n  @Implementation\n  protected void setNdefPushMessageCallback(\n      NfcAdapter.CreateNdefMessageCallback callback, Activity activity, Activity... activities) {\n    this.ndefPushMessageCallback = callback;\n  }\n\n  /**\n   * Sets callback that should be used on successful Android Beam (TM).\n   *\n   * <p>The last registered callback is recalled and can be fetched using {@link\n   * #getOnNdefPushCompleteCallback}.\n   */\n  @Implementation\n  protected void setOnNdefPushCompleteCallback(\n      NfcAdapter.OnNdefPushCompleteCallback callback, Activity activity, Activity... activities) {\n    if (activity == null) {\n      throw new NullPointerException(\"activity cannot be null\");\n    }\n    for (Activity a : activities) {\n      if (a == null) {\n        throw new NullPointerException(\"activities cannot contain null\");\n      }\n    }\n    this.onNdefPushCompleteCallback = callback;\n  }\n\n  @Implementation\n  protected boolean isEnabled() {\n    return enabled;\n  }\n\n  /**\n   * Modifies behavior of {@link #getNfcAdapter(Context)} to return {@code null}, to simulate\n   * absence of NFC hardware.\n   */\n  public static void setNfcHardwareExists(boolean hardwareExists) {\n    ShadowNfcAdapter.hardwareExists = hardwareExists;\n  }\n\n  public void setEnabled(boolean enabled) {\n    this.enabled = enabled;\n  }\n\n  public Activity getEnabledActivity() {\n    return enabledActivity;\n  }\n\n  public PendingIntent getIntent() {\n    return intent;\n  }\n\n  public IntentFilter[] getFilters() {\n    return filters;\n  }\n\n  public String[][] getTechLists() {\n    return techLists;\n  }\n\n  public Activity getDisabledActivity() {\n    return disabledActivity;\n  }\n\n  /** Returns last registered callback, or {@code null} if none was set. */\n  public NfcAdapter.CreateNdefMessageCallback getNdefPushMessageCallback() {\n    return ndefPushMessageCallback;\n  }\n\n  public NfcAdapter.OnNdefPushCompleteCallback getOnNdefPushCompleteCallback() {\n    return onNdefPushCompleteCallback;\n  }\n\n  /** Returns last set NDEF message, or throws {@code IllegalStateException} if it was never set. */\n  public NdefMessage getNdefPushMessage() {\n    if (!ndefPushMessageSet) {\n      throw new IllegalStateException();\n    }\n    return ndefPushMessage;\n  }\n\n  @Resetter\n  public static synchronized void reset() {\n    hardwareExists = true;\n  }\n}<fim_middle>// class below is blob and data class\n"}