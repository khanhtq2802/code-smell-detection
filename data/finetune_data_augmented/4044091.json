{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.dataflow.data.nontagged.serde;\n\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\n\nimport org.apache.asterix.om.base.AGeometry;\nimport org.apache.hyracks.api.dataflow.value.ISerializerDeserializer;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\nimport com.esri.core.geometry.OperatorImportFromWkb;\nimport com.esri.core.geometry.SpatialReference;\nimport com.esri.core.geometry.WkbImportFlags;\nimport com.esri.core.geometry.ogc.OGCGeometry;\n\npublic class AGeometrySerializerDeserializer implements ISerializerDeserializer<AGeometry> {\n\n    private static final long serialVersionUID = 1L;\n\n    public static final AGeometrySerializerDeserializer INSTANCE = new AGeometrySerializerDeserializer();\n\n    /**Use WGS 84 (EPSG:4326) as the default coordinate reference system*/\n    public static final SpatialReference DEFAULT_CRS = SpatialReference.create(4326);\n\n    private AGeometrySerializerDeserializer() {\n    }\n\n    @Override\n    public AGeometry deserialize(DataInput in) throws HyracksDataException {\n        try {\n            int length = in.readInt();\n            byte[] bytes = new byte[length];\n            in.readFully(bytes);\n            ByteBuffer buffer = ByteBuffer.wrap(bytes);\n            OGCGeometry geometry = OGCGeometry.createFromOGCStructure(\n                    OperatorImportFromWkb.local().executeOGC(WkbImportFlags.wkbImportDefaults, buffer, null),\n                    DEFAULT_CRS);\n            return new AGeometry(geometry);\n        } catch (IOException e) {\n            throw HyracksDataException.create(e);\n        }\n    }\n\n<fim_suffix>    @Override\n    public void serialize(AGeometry instance, DataOutput out) throws HyracksDataException {\n        try {\n            OGCGeometry geometry = instance.getGeometry();\n            byte[] buffer = geometry.asBinary().array();\n            // For efficiency, we store the size of the geometry in bytes in the first 32 bits\n            // This allows AsterixDB to skip over this attribute if needed.\n            out.writeInt(buffer.length);\n            out.write(buffer);\n        } catch (IOException e) {\n            throw HyracksDataException.create(e);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}