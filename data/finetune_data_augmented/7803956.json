{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.apache.geode.cache30;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.apache.geode.SystemFailure;\nimport org.apache.geode.cache.CacheEvent;\nimport org.apache.geode.cache.CacheListener;\nimport org.apache.geode.cache.EntryEvent;\nimport org.apache.geode.cache.RegionEvent;\n\n/**\n * A <code>CacheListener</code> used in testing. Its callback methods are implemented to thrown\n * {@link UnsupportedOperationException} unless the user overrides the \"2\" methods.\n *\n * @see #wasInvoked\n *\n * @since GemFire 3.0\n */\npublic abstract class TestCacheListener<K, V> extends TestCacheCallback\n    implements CacheListener<K, V> {\n  private final Object lock = new Object();\n  private List<CacheEvent<K, V>> eventHistory = null;\n\n  /**\n   * Should be called for every event delivered to this listener\n   */\n  private void addEvent(CacheEvent<K, V> e, boolean setInvoked) {\n    synchronized (lock) {\n      if (setInvoked) {\n        this.invoked = true;\n      }\n      if (this.eventHistory != null) {\n        this.eventHistory.add(e);\n      }\n    }\n  }\n\n  private void addEvent(CacheEvent<K, V> e) {\n    addEvent(e, true);\n  }\n\n  /**\n   * Enables collection of event history.\n   *\n   * @since GemFire 5.0\n   */\n  public void enableEventHistory() {\n    synchronized (lock) {\n      if (this.eventHistory == null) {\n        this.eventHistory = new ArrayList<>();\n      }\n    }\n  }\n\n  /**\n   * Disables collection of events.\n   *\n   * @since GemFire 5.0\n   */\n  public void disableEventHistory() {\n    synchronized (lock) {\n      this.eventHistory = null;\n    }\n  }\n\n  /**\n   * Returns a copy of the list of events collected in this listener's history. Also clears the\n   * current history.\n   *\n   * @since GemFire 5.0\n   */\n  public List<CacheEvent<K, V>> getEventHistory() {\n    synchronized (lock) {\n      if (this.eventHistory == null) {\n        return Collections.emptyList();\n      } else {\n        List<CacheEvent<K, V>> result = this.eventHistory;\n        this.eventHistory = new ArrayList<>();\n        return result;\n      }\n    }\n  }\n\n  @Override\n  public void afterCreate(EntryEvent<K, V> event) {\n    addEvent(event);\n    try {\n      afterCreate2(event);\n    } catch (VirtualMachineError e) {\n      SystemFailure.initiateFailure(e);\n      throw e;\n    } catch (Throwable t) {\n      this.callbackError = t;\n    }\n  }\n\n  public void afterCreate2(EntryEvent<K, V> event) {\n    String s = \"Unexpected callback invocation\";\n    throw new UnsupportedOperationException(s);\n  }\n\n<fim_suffix>  @Override\n  public void afterUpdate(EntryEvent<K, V> event) {\n    addEvent(event);\n    try {\n      afterUpdate2(event);\n    } catch (VirtualMachineError e) {\n      SystemFailure.initiateFailure(e);\n      throw e;\n    } catch (Throwable t) {\n      this.callbackError = t;\n    }\n  }\n\n  public void afterUpdate2(EntryEvent<K, V> event) {\n    String s = \"Unexpected callback invocation\";\n    throw new UnsupportedOperationException(s);\n  }\n\n  @Override\n  public void afterInvalidate(EntryEvent<K, V> event) {\n    addEvent(event);\n    try {\n      afterInvalidate2(event);\n    } catch (VirtualMachineError e) {\n      SystemFailure.initiateFailure(e);\n      throw e;\n    } catch (Throwable t) {\n      this.callbackError = t;\n    }\n  }\n\n  public void afterInvalidate2(EntryEvent<K, V> event) {\n    String s = \"Unexpected callback invocation\";\n    throw new UnsupportedOperationException(s);\n  }\n\n  @Override\n  public void afterDestroy(EntryEvent<K, V> event) {\n    afterDestroyBeforeAddEvent(event);\n    addEvent(event);\n    try {\n      afterDestroy2(event);\n    } catch (VirtualMachineError e) {\n      SystemFailure.initiateFailure(e);\n      throw e;\n    } catch (Throwable t) {\n      this.callbackError = t;\n    }\n  }\n\n  public void afterDestroyBeforeAddEvent(EntryEvent<K, V> event) {\n    // do nothing by default\n  }\n\n  public void afterDestroy2(EntryEvent<K, V> event) {\n    String s = \"Unexpected callback invocation\";\n    throw new UnsupportedOperationException(s);\n  }\n\n  @Override\n  public void afterRegionInvalidate(RegionEvent<K, V> event) {\n    addEvent(event);\n    try {\n      afterRegionInvalidate2(event);\n    } catch (VirtualMachineError e) {\n      SystemFailure.initiateFailure(e);\n      throw e;\n    } catch (Throwable t) {\n      this.callbackError = t;\n    }\n  }\n\n  public void afterRegionInvalidate2(RegionEvent<K, V> event) {\n    String s = \"Unexpected callback invocation\";\n    throw new UnsupportedOperationException(s);\n  }\n\n  @Override\n  public void afterRegionDestroy(RegionEvent<K, V> event) {\n    // check argument to see if this is during tearDown\n    if (\"teardown\".equals(event.getCallbackArgument()))\n      return;\n    afterRegionDestroyBeforeAddEvent(event);\n    addEvent(event);\n    try {\n      afterRegionDestroy2(event);\n    } catch (VirtualMachineError e) {\n      SystemFailure.initiateFailure(e);\n      throw e;\n    } catch (Throwable t) {\n      this.callbackError = t;\n    }\n  }\n\n  public void afterRegionDestroyBeforeAddEvent(RegionEvent<K, V> ignored) {}\n\n  public void afterRegionDestroy2(RegionEvent<K, V> event) {\n    if (!event.getOperation().isClose()) {\n      String s = \"Unexpected callback invocation\";\n      throw new UnsupportedOperationException(s);\n    }\n  }\n\n  @Override\n  public void afterRegionClear(RegionEvent<K, V> event) {\n    addEvent(event, false);\n  }\n\n  @Override\n  public void afterRegionCreate(RegionEvent<K, V> event) {\n    addEvent(event, false);\n  }\n\n  @Override\n  public void afterRegionLive(RegionEvent<K, V> event) {\n    addEvent(event, false);\n  }\n}<fim_middle>// function below has no smell\n"}