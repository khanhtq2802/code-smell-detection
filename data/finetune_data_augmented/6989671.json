{"text": "<fim_prefix>/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.j2cl.generator;\n\nimport com.google.debugging.sourcemap.FilePosition;\nimport com.google.debugging.sourcemap.SourceMapFormat;\nimport com.google.debugging.sourcemap.SourceMapGenerator;\nimport com.google.debugging.sourcemap.SourceMapGeneratorFactory;\nimport com.google.j2cl.ast.Type;\nimport com.google.j2cl.common.SourcePosition;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\n/**\n * Generates the source maps.\n */\npublic class SourceMapGeneratorStage {\n\n<fim_suffix>  public static String generateSourceMaps(\n      Type type, Map<SourcePosition, SourcePosition> javaSourcePositionByOutputSourcePosition)\n      throws IOException {\n    return renderSourceMapToString(type, javaSourcePositionByOutputSourcePosition);\n  }\n\n  private static String renderSourceMapToString(\n      Type type, Map<SourcePosition, SourcePosition> javaSourcePositionByOutputSourcePosition)\n      throws IOException {\n    SourceMapGenerator sourceMapGenerator =\n        SourceMapGeneratorFactory.getInstance(SourceMapFormat.V3);\n    for (Entry<SourcePosition, SourcePosition> entry :\n        javaSourcePositionByOutputSourcePosition.entrySet()) {\n      SourcePosition javaSourcePosition = entry.getValue();\n      SourcePosition javaScriptSourcePosition = entry.getKey();\n\n      sourceMapGenerator.addMapping(\n          javaSourcePosition.getFileName(),\n          javaSourcePosition.getName(),\n          toFilePosition(javaSourcePosition.getStartFilePosition()),\n          toFilePosition(javaScriptSourcePosition.getStartFilePosition()),\n          toFilePosition(javaScriptSourcePosition.getEndFilePosition()));\n    }\n    StringBuilder sb = new StringBuilder();\n    String typeName = type.getDeclaration().getSimpleBinaryName();\n    sourceMapGenerator.appendTo(sb, typeName + JavaScriptImplGenerator.FILE_SUFFIX);\n    return sb.toString();\n  }\n\n  /**\n   * Converts a j2cl File Position to a JsCompiler sourcemap File Position.\n   *\n   * @param j2clFilePosition\n   * @return JsCompiler sourcemap File Position\n   */\n  private static FilePosition toFilePosition(com.google.j2cl.common.FilePosition j2clFilePosition) {\n    return new FilePosition(j2clFilePosition.getLine(), j2clFilePosition.getColumn());\n  }\n}<fim_middle>// function below has no smell\n"}