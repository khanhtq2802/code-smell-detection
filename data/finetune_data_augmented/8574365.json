{"text": "<fim_prefix>        super(client, protocolFactory, transport, resultHandler, false);\n        this.tableName = tableName;\n        this.rows = rows;\n        this.columns = columns;\n        this.timestamp = timestamp;\n        this.attributes = attributes;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"getRowsWithColumnsTs\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        getRowsWithColumnsTs_args args = new getRowsWithColumnsTs_args();\n        args.setTableName(tableName);\n        args.setRows(rows);\n        args.setColumns(columns);\n        args.setTimestamp(timestamp);\n        args.setAttributes(attributes);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public java.util.List<TRowResult> getResult() throws IOError, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new java.lang.IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return (new Client(prot)).recv_getRowsWithColumnsTs();\n      }\n    }\n    public void mutateRow(java.nio.ByteBuffer tableName, java.nio.ByteBuffer row, java.util.List<Mutation> mutations, java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      mutateRow_call method_call = new mutateRow_call(tableName, row, mutations, attributes, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class mutateRow_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {\n      private java.nio.ByteBuffer tableName;\n      private java.nio.ByteBuffer row;\n      private java.util.List<Mutation> mutations;\n      private java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> attributes;\n      public mutateRow_call(java.nio.ByteBuffer tableName, java.nio.ByteBuffer row, java.util.List<Mutation> mutations, java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.tableName = tableName;\n        this.row = row;\n        this.mutations = mutations;\n        this.attributes = attributes;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"mutateRow\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        mutateRow_args args = new mutateRow_args();\n        args.setTableName(tableName);\n        args.setRow(row);\n        args.setMutations(mutations);\n        args.setAttributes(attributes);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public Void getResult() throws IOError, IllegalArgument, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new java.lang.IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return null;\n      }\n    }\n    public void mutateRowTs(java.nio.ByteBuffer tableName, java.nio.ByteBuffer row, java.util.List<Mutation> mutations, long timestamp, java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      mutateRowTs_call method_call = new mutateRowTs_call(tableName, row, mutations, timestamp, attributes, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class mutateRowTs_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {\n      private java.nio.ByteBuffer tableName;\n      private java.nio.ByteBuffer row;\n      private java.util.List<Mutation> mutations;\n      private long timestamp;\n      private java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> attributes;\n      public mutateRowTs_call(java.nio.ByteBuffer tableName, java.nio.ByteBuffer row, java.util.List<Mutation> mutations, long timestamp, java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.tableName = tableName;\n        this.row = row;\n        this.mutations = mutations;\n        this.timestamp = timestamp;\n        this.attributes = attributes;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"mutateRowTs\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        mutateRowTs_args args = new mutateRowTs_args();\n        args.setTableName(tableName);\n        args.setRow(row);\n        args.setMutations(mutations);\n        args.setTimestamp(timestamp);\n        args.setAttributes(attributes);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public Void getResult() throws IOError, IllegalArgument, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new java.lang.IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return null;\n      }\n    }\n    public void mutateRows(java.nio.ByteBuffer tableName, java.util.List<BatchMutation> rowBatches, java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      mutateRows_call method_call = new mutateRows_call(tableName, rowBatches, attributes, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class mutateRows_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {\n      private java.nio.ByteBuffer tableName;\n      private java.util.List<BatchMutation> rowBatches;\n      private java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> attributes;\n<fim_suffix>      public mutateRows_call(java.nio.ByteBuffer tableName, java.util.List<BatchMutation> rowBatches, java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.tableName = tableName;\n        this.rowBatches = rowBatches;\n        this.attributes = attributes;\n      }<fim_middle>// function below has no smell\n"}