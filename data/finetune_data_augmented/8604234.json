{"text": "<fim_prefix>    /** */\n    TOPIC_METADATA_REQ,\n    /** */\n    TOPIC_SCHEMA,\n    /** */\n    TOPIC_INTERNAL_DIAGNOSTIC,\n    /** */\n    TOPIC_WAL,\n    /** */\n    TOPIC_METRICS,\n    /** */\n    TOPIC_AUTH,\n    /** */\n    TOPIC_EXCHANGE,\n    /** */\n    TOPIC_CACHE_COORDINATOR,\n    /** */\n    TOPIC_GEN_ENC_KEY,\n    /** */\n    TOPIC_SERVICES,\n    /** */\n    TOPIC_DEADLOCK_DETECTION;\n    /** Enum values. */\n    private static final GridTopic[] VALS = values();\n    /** Default charset to work with strings. */\n    private static final Charset DFLT_CHARSET = Charset.forName(\"UTF-8\");\n    /**\n     * Efficiently gets enumerated value from its ordinal.\n     *\n     * @param ord Ordinal value.\n     * @return Enumerated value.\n     */\n    @Nullable public static GridTopic fromOrdinal(int ord) {\n        return ord >= 0 && ord < VALS.length ? VALS[ord] : null;\n    }\n    /**\n     * @param id Topic ID.\n     * @return Grid message topic with specified ID.\n     */\n    public Object topic(IgniteUuid id) {\n        return new T1(this, id);\n    }\n    /**\n     * @param id1 ID1.\n     * @param id2 ID2.\n     * @return Grid message topic with specified IDs.\n     */\n    public Object topic(IgniteUuid id1, UUID id2) {\n        return new T2(this, id1, id2);\n    }\n    /**\n     * @param id1 ID1.\n     * @param id2 ID2.\n     * @return Grid message topic with specified IDs.\n     */\n    public Object topic(IgniteUuid id1, long id2) {\n        return new T8(this, id1, id2);\n    }\n    /**\n     * NOTE: The method should be used only for cases when there is no any other non-string identifier(s)\n     * to use to differentiate topics.\n     *\n     * @param id Topic ID.\n     * @return Grid message topic with specified ID.\n     */\n    public Object topic(String id) {\n        return new T3(this, UUID.nameUUIDFromBytes(id.getBytes(DFLT_CHARSET)));\n    }\n    /**\n     * @param id1 ID1.\n     * @param id2 ID2.\n     * @return Grid message topic with specified IDs.\n     */\n    public Object topic(String id1, long id2) {\n        return new T6(this, UUID.nameUUIDFromBytes(id1.getBytes(DFLT_CHARSET)), id2);\n    }\n    /**\n     * @param id1 ID1.\n     * @param id2 ID2.\n     * @param id3 ID3.\n     * @return Grid message topic with specified IDs.\n     */\n    public Object topic(String id1, int id2, long id3) {\n        return new T5(this, UUID.nameUUIDFromBytes(id1.getBytes(DFLT_CHARSET)), id2, id3);\n    }\n    /**\n     * @param id1 ID1.\n     * @param id2 ID2.\n     * @param id3 ID3.\n     * @return Grid message topic with specified IDs.\n     */\n    public Object topic(String id1, UUID id2, long id3) {\n        return new T4(this, UUID.nameUUIDFromBytes(id1.getBytes(DFLT_CHARSET)), id2, id3);\n    }\n    /**\n     * @param id1 ID1.\n     * @param id2 ID2.\n     * @param id3 ID3.\n     * @param id4 ID4.\n     * @return Grid message topic with specified IDs.\n     */\n    public Object topic(String id1, UUID id2, int id3, long id4) {\n        return new T7(this, UUID.nameUUIDFromBytes(id1.getBytes(DFLT_CHARSET)), id2, id3, id4);\n    }\n    /**\n     *\n     */\n    private static class T1 implements Externalizable {\n        /** */\n        private static final long serialVersionUID = 0L;\n        /** */\n        private GridTopic topic;\n        /** */\n        private IgniteUuid id;\n        /**\n         * No-arg constructor needed for {@link Serializable}.\n         */\n        public T1() {\n            // No-op.\n        }\n        /**\n         * @param topic Topic.\n         * @param id ID.\n         */\n        private T1(GridTopic topic, IgniteUuid id) {\n            this.topic = topic;\n            this.id = id;\n        }\n        /** {@inheritDoc} */\n        @Override public int hashCode() {\n            return topic.ordinal() + id.hashCode();\n        }\n        /** {@inheritDoc} */\n        @Override public boolean equals(Object obj) {\n            if (obj.getClass() == T1.class) {\n                T1 that = (T1)obj;\n                return topic == that.topic && id.equals(that.id);\n            }\n            return false;\n        }\n        /** {@inheritDoc} */\n        @Override public void writeExternal(ObjectOutput out) throws IOException {\n            out.writeByte(topic.ordinal());\n            U.writeGridUuid(out, id);\n        }\n        /** {@inheritDoc} */\n        @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n            topic = fromOrdinal(in.readByte());\n            id = U.readGridUuid(in);\n        }\n        /** {@inheritDoc} */\n        @Override public String toString() {\n            return S.toString(T1.class, this);\n        }\n    }\n    /**\n     *\n     */\n    private static class T2 implements Externalizable {\n        /** */\n        private static final long serialVersionUID = 0L;\n        /** */\n        private GridTopic topic;\n        /** */\n        private IgniteUuid id1;\n        /** */\n        private UUID id2;\n        /**\n         * No-arg constructor needed for {@link Serializable}.\n         */\n        public T2() {\n            // No-op.\n        }\n        /**\n         * @param topic Topic.\n         * @param id1 ID1.\n         * @param id2 ID2.\n         */\n        private T2(GridTopic topic, IgniteUuid id1, UUID id2) {\n            this.topic = topic;\n            this.id1 = id1;\n            this.id2 = id2;\n        }\n        /** {@inheritDoc} */\n        @Override public int hashCode() {\n            return topic.ordinal() + id1.hashCode() + id2.hashCode();\n        }\n        /** {@inheritDoc} */\n        @Override public boolean equals(Object obj) {\n            if (obj.getClass() == T2.class) {\n                T2 that = (T2)obj;\n                return topic == that.topic && id1.equals(that.id1) && id2.equals(that.id2);\n            }\n            return false;\n        }\n        /** {@inheritDoc} */\n        @Override public void writeExternal(ObjectOutput out) throws IOException {\n            out.writeByte(topic.ordinal());\n            U.writeGridUuid(out, id1);\n            U.writeUuid(out, id2);\n        }\n        /** {@inheritDoc} */\n        @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n            topic = fromOrdinal(in.readByte());\n            id1 = U.readGridUuid(in);\n            id2 = U.readUuid(in);\n        }\n        /** {@inheritDoc} */\n        @Override public String toString() {\n            return S.toString(T2.class, this);\n        }\n    }\n    /**\n     *\n     */\n<fim_suffix>    private static class T3 implements Externalizable {\n        /** */\n        private static final long serialVersionUID = 0L;\n        /** */\n        private GridTopic topic;\n        /** */\n        private UUID id1;\n        /**\n         * No-arg constructor needed for {@link Serializable}.\n         */\n        public T3() {\n            // No-op.\n        }\n        /**\n         * @param topic Topic.\n         * @param id1 ID1.\n         */\n        private T3(GridTopic topic, UUID id1) {\n            this.topic = topic;\n            this.id1 = id1;\n        }\n        /** {@inheritDoc} */\n        @Override public int hashCode() {\n            return topic.ordinal() + id1.hashCode();\n        }\n        /** {@inheritDoc} */\n        @Override public boolean equals(Object obj) {\n            if (obj.getClass() == T3.class) {\n                T3 that = (T3)obj;\n                return topic == that.topic && id1.equals(that.id1);\n            }\n            return false;\n        }\n        /** {@inheritDoc} */\n        @Override public void writeExternal(ObjectOutput out) throws IOException {\n            out.writeByte(topic.ordinal());\n            U.writeUuid(out, id1);\n        }\n        /** {@inheritDoc} */\n        @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n            topic = fromOrdinal(in.readByte());\n            id1 = U.readUuid(in);\n        }\n        /** {@inheritDoc} */\n        @Override public String toString() {\n            return S.toString(T3.class, this);\n        }\n    }<fim_middle>// class below has no smell\n"}