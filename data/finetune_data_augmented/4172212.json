{"text": "<fim_prefix>/*****************************************************************\n *   Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n ****************************************************************/\npackage org.apache.cayenne.ashwood;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.cayenne.map.DbEntity;\nimport org.apache.cayenne.map.ObjEntity;\n\n/**\n * EntitySorter that takes into account entity \"weights\", and otherwise delegating to\n * another (topological) sorter.\n * \n * @since 3.1, since 4.0 moved to cayenne-server from cayenne-lifecycle\n */\npublic class WeightedAshwoodEntitySorter extends AshwoodEntitySorter {\n\n    private Comparator<DbEntity> weightedDbEntityComparator;\n    private Comparator<ObjEntity> weightedObjEntityComparator;\n\n    protected Map<DbEntity, Integer> entityWeights;\n\n<fim_suffix>    public WeightedAshwoodEntitySorter() {\n        this.weightedDbEntityComparator = new WeightedDbEntityComparator();\n        this.weightedObjEntityComparator = new WeightedObjEntityComparator();\n        this.entityWeights = Collections.emptyMap();\n    }\n\n    @Override\n    protected void doIndexSorter() {\n        super.doIndexSorter();\n\n        entityWeights = new HashMap<>();\n\n        for (ObjEntity entity : entityResolver.getObjEntities()) {\n            addWeightForEntity(entity);\n        }\n    }\n\n    protected void addWeightForEntity(ObjEntity entity) {\n        Class<?> type = entityResolver\n                .getClassDescriptor(entity.getName())\n                .getObjectClass();\n        SortWeight weight = type.getAnnotation(SortWeight.class);\n        if (weight != null) {\n            entityWeights.put(entity.getDbEntity(), weight.value());\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected Comparator<DbEntity> getDbEntityComparator(boolean dependantFirst) {\n        Comparator<DbEntity> c = weightedDbEntityComparator;\n        if (dependantFirst) {\n            c = c.reversed();\n        }\n        return c;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected Comparator<ObjEntity> getObjEntityComparator(boolean dependantFirst) {\n        Comparator<ObjEntity> c = weightedObjEntityComparator;\n        if (dependantFirst) {\n            c = c.reversed();\n        }\n        return c;\n    }\n\n    private int getWeight(DbEntity e) {\n        Integer w = entityWeights.get(e);\n        return w != null ? w : 1;\n    }\n\n    private final class WeightedDbEntityComparator implements Comparator<DbEntity> {\n\n        public int compare(DbEntity t1, DbEntity t2) {\n            if (t1 == t2) {\n                return 0;\n            }\n\n            int delta = getWeight(t1) - getWeight(t2);\n            return delta != 0 ? delta : dbEntityComparator.compare(t1, t2);\n        }\n    }\n\n    private final class WeightedObjEntityComparator implements Comparator<ObjEntity> {\n\n        public int compare(ObjEntity o1, ObjEntity o2) {\n            if (o1 == o2) {\n                return 0;\n            }\n\n            DbEntity t1 = o1.getDbEntity();\n            DbEntity t2 = o2.getDbEntity();\n\n            return weightedDbEntityComparator.compare(t1, t2);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}