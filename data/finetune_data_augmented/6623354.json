{"text": "<fim_prefix>package com.epam.wilma.stubconfig.json.parser;\n/*==========================================================================\nCopyright since 2013, EPAM Systems\n\nThis file is part of Wilma.\n\nWilma is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nWilma is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with Wilma.  If not, see <http://www.gnu.org/licenses/>.\n===========================================================================*/\n\nimport com.epam.wilma.domain.stubconfig.StubDescriptor;\nimport com.epam.wilma.domain.stubconfig.StubDescriptorAttributes;\nimport com.epam.wilma.domain.stubconfig.dialog.DialogDescriptor;\nimport com.epam.wilma.domain.stubconfig.dialog.DialogDescriptorAttributes;\nimport com.epam.wilma.domain.stubconfig.dialog.condition.ConditionDescriptor;\nimport com.epam.wilma.domain.stubconfig.dialog.response.ResponseDescriptor;\nimport com.epam.wilma.domain.stubconfig.interceptor.InterceptorDescriptor;\nimport com.epam.wilma.domain.stubconfig.sequence.SequenceDescriptor;\nimport com.epam.wilma.stubconfig.json.parser.helper.DialogDescriptorAttributeJsonParser;\nimport com.epam.wilma.stubconfig.json.parser.helper.ObjectParser;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Builds a new {@link StubDescriptor} model from a given JSON Object.\n *\n * @author Tamas_Kohegyi\n */\n<fim_suffix>@Component\npublic class StubDescriptorJsonParser {\n\n    @Autowired\n    @Qualifier(\"conditionDescriptorJsonParser\")\n    private ObjectParser<ConditionDescriptor> conditionDescriptorJsonParser;\n    @Autowired\n    @Qualifier(\"responseDescriptorJsonParser\")\n    private ObjectParser<ResponseDescriptor> responseDescriptorJsonParser;\n    @Autowired\n    private DialogDescriptorAttributeJsonParser dialogDescriptorAttributeJsonParser;\n    @Autowired\n    private SequenceDescriptorJsonParser sequenceDescriptorJsonParser;\n    @Autowired\n    private InterceptorDescriptorJsonParser interceptorDescriptorJsonParser;\n\n    /**\n     * Builds a new {@link StubDescriptor} domain model from a given JSON Object.\n     *\n     * @param jsonStubDescriptor the JSON Object of the stub descriptor\n     * @return the newly built StubDescriptor\n     */\n    public StubDescriptor parse(final JSONObject jsonStubDescriptor) {\n        JSONObject root = jsonStubDescriptor.getJSONObject(\"wilmaStubConfiguration\");\n        StubDescriptorAttributes attributes = getStubDescriptorAttributes(root);\n        List<DialogDescriptor> dialogDescriptors = getDialogDescriptors(root);\n        List<InterceptorDescriptor> interceptorDescriptors = getInterceptorDescriptors(root);\n        List<SequenceDescriptor> sequenceDescriptors = sequenceDescriptorJsonParser.parse(root, dialogDescriptors);\n        //set validity - it is valid only if it has something inside\n        if (dialogDescriptors.size() + interceptorDescriptors.size() + sequenceDescriptors.size() > 0) {\n            attributes.setValid(true);\n        }\n        StubDescriptor stubDescriptor = new StubDescriptor(attributes, dialogDescriptors, interceptorDescriptors, sequenceDescriptors);\n        return stubDescriptor;\n    }\n\n    private StubDescriptorAttributes getStubDescriptorAttributes(final JSONObject root) {\n        String groupName = root.has(\"groupName\") ? root.getString(\"groupName\") : \"Default\";\n        String activeText = root.has(\"active\") ? root.getString(\"active\") : \"true\";\n        boolean active;\n        active = Boolean.valueOf(activeText);\n        return new StubDescriptorAttributes(groupName, active);\n    }\n\n    private List<DialogDescriptor> getDialogDescriptors(final JSONObject root) {\n        List<DialogDescriptor> dialogDescriptors = new ArrayList<DialogDescriptor>();\n        if (root.has(\"dialogDescriptors\")) {\n            JSONArray dialogDescriptorsArray = root.getJSONArray(\"dialogDescriptors\");\n            for (int i = 0; i < dialogDescriptorsArray.length(); i++) {\n                JSONObject dialogDescriptor = dialogDescriptorsArray.getJSONObject(i);\n                DialogDescriptorAttributes attributes = dialogDescriptorAttributeJsonParser.getAttributes(dialogDescriptor);\n                ConditionDescriptor conditionDescriptor = conditionDescriptorJsonParser.parseObject(dialogDescriptor.getJSONObject(ConditionDescriptor.TAG_NAME_JSON), root);\n                ResponseDescriptor responseDescriptor = responseDescriptorJsonParser.parseObject(dialogDescriptor.getJSONObject(ResponseDescriptor.TAG_NAME_JSON), root);\n                dialogDescriptors.add(new DialogDescriptor(attributes, conditionDescriptor, responseDescriptor));\n            }\n        }\n        return dialogDescriptors;\n    }\n\n    private List<InterceptorDescriptor> getInterceptorDescriptors(final JSONObject root) {\n        List<InterceptorDescriptor> interceptorDescriptors = new ArrayList<>();\n        if (root.has(\"interceptors\")) {\n            JSONArray interceptorArray = root.getJSONArray(\"interceptors\");\n            for (int i = 0; i < interceptorArray.length(); i++) {\n                InterceptorDescriptor interceptorDescriptor = interceptorDescriptorJsonParser.parseObject(interceptorArray.getJSONObject(i), root);\n                interceptorDescriptors.add(interceptorDescriptor);\n            }\n        }\n        return interceptorDescriptors;\n    }\n}<fim_middle>// class below has no smell\n"}