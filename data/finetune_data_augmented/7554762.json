{"text": "<fim_prefix>/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.integration.ws.config;\n\nimport java.util.List;\n\nimport org.w3c.dom.Element;\n\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.ManagedMap;\nimport org.springframework.beans.factory.xml.ParserContext;\nimport org.springframework.integration.config.ExpressionFactoryBean;\nimport org.springframework.integration.config.xml.AbstractOutboundGatewayParser;\nimport org.springframework.integration.config.xml.IntegrationNamespaceUtils;\nimport org.springframework.integration.ws.DefaultSoapHeaderMapper;\nimport org.springframework.integration.ws.MarshallingWebServiceOutboundGateway;\nimport org.springframework.integration.ws.SimpleWebServiceOutboundGateway;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.util.xml.DomUtils;\n\n/**\n * Parser for the &lt;outbound-gateway/&gt; element in the 'ws' namespace.\n *\n * @author Mark Fisher\n * @author Jonas Partner\n * @author Gunnar Hillert\n * @author Artem Bilan\n *\n */\npublic class WebServiceOutboundGatewayParser extends AbstractOutboundGatewayParser {\n\n<fim_suffix>\t@Override\n\tprotected String getGatewayClassName(Element element) {\n\t\treturn ((StringUtils.hasText(element.getAttribute(\"marshaller\"))) ?\n\t\t\t\tMarshallingWebServiceOutboundGateway.class : SimpleWebServiceOutboundGateway.class).getName();\n\t}\n\n\t@Override\n\tprotected BeanDefinitionBuilder parseHandler(Element element, ParserContext parserContext) {\n\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(this.getGatewayClassName(element));\n\t\tString uri = element.getAttribute(\"uri\");\n\t\tString destinationProvider = element.getAttribute(\"destination-provider\");\n\t\tList<Element> uriVariableElements = DomUtils.getChildElementsByTagName(element, \"uri-variable\");\n\t\tif (StringUtils.hasText(destinationProvider) == StringUtils.hasText(uri)) {\n\t\t\tparserContext.getReaderContext().error(\n\t\t\t\t\t\"Exactly one of 'uri' or 'destination-provider' is required.\", element);\n\t\t}\n\t\tif (StringUtils.hasText(destinationProvider)) {\n\t\t\tif (!CollectionUtils.isEmpty(uriVariableElements)) {\n\t\t\t\tparserContext.getReaderContext().error(\"No 'uri-variable' sub-elements are allowed when \"\n\t\t\t\t\t\t+ \"a 'destination-provider' reference has been provided.\", element);\n\t\t\t}\n\t\t\tbuilder.addConstructorArgReference(destinationProvider);\n\t\t}\n\t\telse {\n\t\t\tbuilder.addConstructorArgValue(uri);\n\t\t\tif (!CollectionUtils.isEmpty(uriVariableElements)) {\n\t\t\t\tManagedMap<String, Object> uriVariableExpressions = new ManagedMap<String, Object>();\n\t\t\t\tfor (Element uriVariableElement : uriVariableElements) {\n\t\t\t\t\tString name = uriVariableElement.getAttribute(\"name\");\n\t\t\t\t\tString expression = uriVariableElement.getAttribute(\"expression\");\n\t\t\t\t\tBeanDefinitionBuilder factoryBeanBuilder =\n\t\t\t\t\t\t\tBeanDefinitionBuilder.genericBeanDefinition(ExpressionFactoryBean.class);\n\t\t\t\t\tfactoryBeanBuilder.addConstructorArgValue(expression);\n\t\t\t\t\turiVariableExpressions.put(name, factoryBeanBuilder.getBeanDefinition());\n\t\t\t\t}\n\t\t\t\tbuilder.addPropertyValue(\"uriVariableExpressions\", uriVariableExpressions);\n\t\t\t}\n\t\t}\n\t\tIntegrationNamespaceUtils.setReferenceIfAttributeDefined(builder, element, \"reply-channel\");\n\t\tIntegrationNamespaceUtils.setValueIfAttributeDefined(builder, element, \"reply-timeout\", \"sendTimeout\");\n\t\tIntegrationNamespaceUtils.setValueIfAttributeDefined(builder, element, \"requires-reply\");\n\t\tIntegrationNamespaceUtils.setValueIfAttributeDefined(builder, element, \"ignore-empty-responses\");\n\t\tIntegrationNamespaceUtils.setValueIfAttributeDefined(builder, element, \"encode-uri\");\n\t\tthis.postProcessGateway(builder, element, parserContext);\n\n\t\tIntegrationNamespaceUtils.configureHeaderMapper(element, builder, parserContext, DefaultSoapHeaderMapper.class, null);\n\n\t\treturn builder;\n\t}\n\n\t@Override\n\tprotected void postProcessGateway(BeanDefinitionBuilder builder, Element element, ParserContext parserContext) {\n\t\tString marshallerRef = element.getAttribute(\"marshaller\");\n\t\tString unmarshallerRef = element.getAttribute(\"unmarshaller\");\n\t\tif (StringUtils.hasText(marshallerRef)) {\n\t\t\tbuilder.addConstructorArgReference(marshallerRef);\n\t\t\tif (StringUtils.hasText(unmarshallerRef)) {\n\t\t\t\tbuilder.addConstructorArgReference(unmarshallerRef);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tString sourceExtractorRef = element.getAttribute(\"source-extractor\");\n\t\t\tif (StringUtils.hasText(sourceExtractorRef)) {\n\t\t\t\tbuilder.addConstructorArgReference(sourceExtractorRef);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbuilder.addConstructorArgValue(null);\n\t\t\t}\n\t\t}\n\n\t\tIntegrationNamespaceUtils.setReferenceIfAttributeDefined(builder, element, \"request-callback\");\n\n\t\tString webServiceTemplateRef = element.getAttribute(\"web-service-template\");\n\n\t\tif (StringUtils.hasText(webServiceTemplateRef)) {\n\t\t\tbuilder.addPropertyReference(\"webServiceTemplate\", webServiceTemplateRef);\n\t\t\treturn;\n\t\t}\n\n\t\tString messageFactoryRef = element.getAttribute(\"message-factory\");\n\t\tif (StringUtils.hasText(messageFactoryRef)) {\n\t\t\tbuilder.addConstructorArgReference(messageFactoryRef);\n\t\t}\n\n\t\tIntegrationNamespaceUtils.setReferenceIfAttributeDefined(builder, element, \"fault-message-resolver\");\n\n\t\tString messageSenderRef = element.getAttribute(\"message-sender\");\n\t\tString messageSenderListRef = element.getAttribute(\"message-senders\");\n\t\tif (StringUtils.hasText(messageSenderRef) && StringUtils.hasText(messageSenderListRef)) {\n\t\t\tparserContext.getReaderContext().error(\n\t\t\t\t\t\"Only one of message-sender or message-senders should be specified.\", element);\n\t\t}\n\t\tif (StringUtils.hasText(messageSenderRef)) {\n\t\t\tbuilder.addPropertyReference(\"messageSender\", messageSenderRef);\n\t\t}\n\t\tif (StringUtils.hasText(messageSenderListRef)) {\n\t\t\tbuilder.addPropertyReference(\"messageSenders\", messageSenderListRef);\n\t\t}\n\t\tString interceptorRef = element.getAttribute(\"interceptor\");\n\t\tString interceptorListRef = element.getAttribute(\"interceptors\");\n\t\tif (StringUtils.hasText(interceptorRef) && StringUtils.hasText(interceptorListRef)) {\n\t\t\tparserContext.getReaderContext().error(\n\t\t\t\t\t\"Only one of interceptor or interceptors should be specified.\", element);\n\t\t}\n\t\tif (StringUtils.hasText(interceptorRef)) {\n\t\t\tbuilder.addPropertyReference(\"interceptors\", interceptorRef);\n\t\t}\n\t\tif (StringUtils.hasText(interceptorListRef)) {\n\t\t\tbuilder.addPropertyReference(\"interceptors\", interceptorListRef);\n\t\t}\n\n\t\tif (StringUtils.hasText(marshallerRef) || StringUtils.hasText(unmarshallerRef)) {\n\t\t\tString extractPayload = element.getAttribute(\"extract-payload\");\n\t\t\tif (StringUtils.hasText(extractPayload)) {\n\t\t\t\tparserContext.getReaderContext()\n\t\t\t\t\t\t.warning(\"Setting 'extract-payload' attribute has no effect when used with \" +\n\t\t\t\t\t\t\t\t\"a marshalling Web Service Outbound Gateway.\", element);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tIntegrationNamespaceUtils.setValueIfAttributeDefined(builder, element, \"extract-payload\");\n\t\t}\n\n\t}\n\n}<fim_middle>// function below is feature envy\n"}