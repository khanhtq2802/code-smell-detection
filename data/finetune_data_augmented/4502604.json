{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\npackage org.apache.fluo.core.oracle;\n\nimport java.io.File;\nimport java.util.Objects;\n\nimport com.google.common.base.Preconditions;\nimport org.apache.curator.framework.recipes.cache.NodeCache;\nimport org.apache.fluo.api.config.FluoConfiguration;\nimport org.apache.fluo.api.exceptions.FluoException;\nimport org.apache.fluo.api.service.FluoOracle;\nimport org.apache.fluo.core.client.FluoAdminImpl;\nimport org.apache.fluo.core.impl.Environment;\nimport org.apache.fluo.core.metrics.ReporterUtil;\nimport org.apache.fluo.core.util.CuratorUtil;\nimport org.apache.fluo.core.util.UtilWaitThread;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n<fim_suffix>public class FluoOracleImpl implements FluoOracle {\n\n  private static final Logger log = LoggerFactory.getLogger(FluoOracleImpl.class);\n\n  private FluoConfiguration config;\n  private Environment env;\n  private AutoCloseable reporters;\n  private OracleServer oracleServer;\n  private NodeCache appIdCache;\n\n  public FluoOracleImpl(FluoConfiguration connConfig) {\n    Objects.requireNonNull(connConfig);\n    Preconditions.checkArgument(connConfig.hasRequiredConnectionProps());\n    config = FluoAdminImpl.mergeZookeeperConfig(connConfig);\n    Preconditions.checkArgument(config.hasRequiredOracleProps());\n    // any client in oracle should retry forever\n    config.setConnectionRetryTimeout(-1);\n    try {\n      config.validate();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid FluoConfiguration\", e);\n    }\n  }\n\n  @Override\n  public void start() {\n    try {\n      env = new Environment(config);\n      reporters = ReporterUtil.setupReporters(env);\n      appIdCache = CuratorUtil.startAppIdWatcher(env);\n\n      log.info(\"Starting Oracle for Fluo '{}' application with the following configuration:\",\n          config.getApplicationName());\n      env.getConfiguration().print();\n\n      oracleServer = new OracleServer(env);\n      oracleServer.start();\n    } catch (Exception e) {\n      throw new FluoException(e);\n    }\n  }\n\n  @Override\n  public void stop() {\n    try {\n      oracleServer.stop();\n      appIdCache.close();\n      reporters.close();\n      env.close();\n    } catch (Exception e) {\n      throw new FluoException(e);\n    }\n  }\n\n  public static void main(String[] args) {\n    if (args.length != 1) {\n      System.err.println(\"Usage: FluoOracleImpl <fluoPropsPath>\");\n      System.exit(-1);\n    }\n    String propsPath = args[0];\n    Objects.requireNonNull(propsPath);\n    File propsFile = new File(propsPath);\n    if (!propsFile.exists()) {\n      System.err.println(\"ERROR - Fluo properties file does not exist: \" + propsPath);\n      System.exit(-1);\n    }\n    Preconditions.checkArgument(propsFile.exists());\n    try {\n      FluoConfiguration config = new FluoConfiguration(propsFile);\n      FluoOracleImpl oracle = new FluoOracleImpl(config);\n      oracle.start();\n      while (true) {\n        UtilWaitThread.sleep(10000);\n      }\n    } catch (Exception e) {\n      log.error(\"Exception running FluoOracle: \", e);\n    }\n  }\n}<fim_middle>// class below has no smell\n"}