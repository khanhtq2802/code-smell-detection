{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.drill.exec.ssl;\n\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslProvider;\nimport org.apache.drill.common.config.DrillProperties;\nimport org.apache.drill.common.exceptions.DrillException;\nimport org.apache.drill.exec.memory.BufferAllocator;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLParameters;\nimport javax.net.ssl.TrustManagerFactory;\nimport java.util.Properties;\n\n<fim_suffix>public class SSLConfigClient extends SSLConfig {\n\n  private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(SSLConfigClient.class);\n\n  private final Properties properties;\n  private final boolean userSslEnabled;\n  private final String trustStoreType;\n  private final String trustStorePath;\n  private final String trustStorePassword;\n  private final boolean disableHostVerification;\n  private final boolean disableCertificateVerification;\n  private final boolean useSystemTrustStore;\n  private final String protocol;\n  private final int handshakeTimeout;\n  private final String provider;\n\n  private final String emptyString = new String();\n\n  public SSLConfigClient(Properties properties) throws DrillException {\n    this.properties = properties;\n    userSslEnabled = getBooleanProperty(DrillProperties.ENABLE_TLS);\n    trustStoreType = getStringProperty(DrillProperties.TRUSTSTORE_TYPE, \"JKS\");\n    trustStorePath = getStringProperty(DrillProperties.TRUSTSTORE_PATH, \"\");\n    trustStorePassword = getStringProperty(DrillProperties.TRUSTSTORE_PASSWORD, \"\");\n    disableHostVerification = getBooleanProperty(DrillProperties.DISABLE_HOST_VERIFICATION);\n    disableCertificateVerification = getBooleanProperty(DrillProperties.DISABLE_CERT_VERIFICATION);\n    useSystemTrustStore = getBooleanProperty(DrillProperties.USE_SYSTEM_TRUSTSTORE);\n    protocol = getStringProperty(DrillProperties.TLS_PROTOCOL, DEFAULT_SSL_PROTOCOL);\n    int hsTimeout = getIntProperty(DrillProperties.TLS_HANDSHAKE_TIMEOUT, DEFAULT_SSL_HANDSHAKE_TIMEOUT_MS);\n    if (hsTimeout <= 0) {\n      hsTimeout = DEFAULT_SSL_HANDSHAKE_TIMEOUT_MS;\n    }\n    handshakeTimeout = hsTimeout;\n    // If provider is OPENSSL then to debug or run this code in an IDE, you will need to enable\n    // the dependency on netty-tcnative with the correct classifier for the platform you use.\n    // This can be done by enabling the openssl profile.\n    // If the IDE is Eclipse, it requires you to install an additional Eclipse plugin available here:\n    // http://repo1.maven.org/maven2/kr/motd/maven/os-maven-plugin/1.6.1/os-maven-plugin-1.6.1.jar\n    // or from your local maven repository:\n    // ~/.m2/repository/kr/motd/maven/os-maven-plugin/1.6.1/os-maven-plugin-1.6.1.jar\n    // Note that installing this plugin may require you to start with a new workspace\n    provider = getStringProperty(DrillProperties.TLS_PROVIDER, DEFAULT_SSL_PROVIDER);\n  }\n\n  private boolean getBooleanProperty(String propName) {\n    return (properties != null) && (properties.containsKey(propName))\n        && (properties.getProperty(propName).compareToIgnoreCase(\"true\") == 0);\n  }\n\n  private String getStringProperty(String name, String defaultValue) {\n    String value = \"\";\n    if ( (properties != null) && (properties.containsKey(name))) {\n      value = properties.getProperty(name);\n    }\n    if (value.isEmpty()) {\n      value = defaultValue;\n    }\n    value = value.trim();\n    return value;\n  }\n\n  private int getIntProperty(String name, int defaultValue) {\n    int value = defaultValue;\n    if (properties != null) {\n      String property = properties.getProperty(name);\n      if (property != null && property.length() > 0) {\n        value = Integer.decode(property);\n      }\n    }\n    return value;\n  }\n\n  public void validateKeyStore() throws DrillException {\n\n  }\n\n  @Override\n  public SslContext initNettySslContext() throws DrillException {\n    final SslContext sslCtx;\n\n    if (!userSslEnabled) {\n      return null;\n    }\n\n    TrustManagerFactory tmf;\n    try {\n      tmf = initializeTrustManagerFactory();\n      sslCtx = SslContextBuilder.forClient()\n          .sslProvider(getProvider())\n          .trustManager(tmf)\n          .protocols(protocol)\n          .build();\n    } catch (Exception e) {\n      // Catch any SSL initialization Exceptions here and abort.\n      throw new DrillException(new StringBuilder()\n          .append(\"SSL is enabled but cannot be initialized due to the following exception: \")\n          .append(\"[ \")\n          .append(e.getMessage())\n          .append(\"]. \")\n          .toString());\n    }\n    this.nettySslContext = sslCtx;\n    return sslCtx;\n  }\n\n  @Override\n  public SSLContext initJDKSSLContext() throws DrillException {\n    final SSLContext sslCtx;\n\n    if (!userSslEnabled) {\n      return null;\n    }\n\n    TrustManagerFactory tmf;\n    try {\n      tmf = initializeTrustManagerFactory();\n      sslCtx = SSLContext.getInstance(protocol);\n      sslCtx.init(null, tmf.getTrustManagers(), null);\n    } catch (Exception e) {\n      // Catch any SSL initialization Exceptions here and abort.\n      throw new DrillException(new StringBuilder()\n          .append(\"SSL is enabled but cannot be initialized due to the following exception: \")\n          .append(\"[ \")\n          .append(e.getMessage())\n          .append(\"]. \")\n          .toString());\n    }\n    this.jdkSSlContext = sslCtx;\n    return sslCtx;\n  }\n\n  @Override\n  public SSLEngine createSSLEngine(BufferAllocator allocator, String peerHost, int peerPort) {\n    SSLEngine engine = super.createSSLEngine(allocator, peerHost, peerPort);\n\n    if (!this.disableHostVerification()) {\n      SSLParameters sslParameters = engine.getSSLParameters();\n      // only available since Java 7\n      sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n      engine.setSSLParameters(sslParameters);\n    }\n\n    engine.setUseClientMode(true);\n\n    try {\n      engine.setEnableSessionCreation(true);\n    } catch (Exception e) {\n      // Openssl implementation may throw this.\n      logger.debug(\"Session creation not enabled. Exception: {}\", e.getMessage());\n    }\n\n    return engine;\n  }\n\n  @Override\n  public boolean isUserSslEnabled() {\n    return userSslEnabled;\n  }\n\n  @Override\n  public boolean isHttpsEnabled() {\n    return false;\n  }\n\n  @Override\n  public String getKeyStoreType() {\n    return emptyString;\n  }\n\n  @Override\n  public String getKeyStorePath() {\n    return emptyString;\n  }\n\n  @Override\n  public String getKeyStorePassword() {\n    return emptyString;\n  }\n\n  @Override\n  public String getKeyPassword() {\n    return emptyString;\n  }\n\n  @Override\n  public String getTrustStoreType() {\n    return trustStoreType;\n  }\n\n  @Override\n  public boolean hasTrustStorePath() {\n    return !trustStorePath.isEmpty();\n  }\n\n  @Override\n  public String getTrustStorePath() {\n    return trustStorePath;\n  }\n\n  @Override\n  public boolean hasTrustStorePassword() {\n    return !trustStorePassword.isEmpty();\n  }\n\n  @Override\n  public String getTrustStorePassword() {\n    return trustStorePassword;\n  }\n\n  @Override\n  public String getProtocol() {\n    return protocol;\n  }\n\n  @Override\n  public SslProvider getProvider() {\n    return provider.equalsIgnoreCase(\"JDK\") ? SslProvider.JDK : SslProvider.OPENSSL;\n  }\n\n  @Override\n  public int getHandshakeTimeout() {\n    return handshakeTimeout;\n  }\n\n  @Override\n  public Mode getMode() {\n    return Mode.CLIENT;\n  }\n\n  @Override\n  public boolean disableHostVerification() {\n    return disableHostVerification;\n  }\n\n  @Override\n  public boolean disableCertificateVerification() {\n    return disableCertificateVerification;\n  }\n\n  @Override\n  public boolean useSystemTrustStore() {\n    return useSystemTrustStore;\n  }\n\n  public boolean isSslValid() {\n    return true;\n  }\n\n}<fim_middle>// class below is data class and blob\n"}