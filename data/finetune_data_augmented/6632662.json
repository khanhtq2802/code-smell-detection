{"text": "<fim_prefix>/*\n * Copyright 2016 Esri, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.esri.geoportal.harvester.api.base;\n\nimport com.esri.geoportal.harvester.api.DataReference;\nimport com.esri.geoportal.commons.constants.MimeType;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Data reference wrapper.\n */\npublic class DataReferenceWrapper implements DataReference {\n  private static final long serialVersionUID = 1L;\n  \n  private final DataReference baseRef;\n  \n  // data\n  private final Map<MimeType,byte []> content = new HashMap<>();\n  \n  /**\n   * Creates instance of the data reference.\n   * @param baseRef base data reference\n   */\n  public DataReferenceWrapper(DataReference baseRef) {\n    this.baseRef = baseRef;\n  }\n\n  /**\n   * Adds content of a particular type to the reference.\n   * @param mimeType mime type\n   * @param content content\n   */\n  public void addContext(MimeType mimeType, byte [] content) {\n    this.content.put(mimeType, content);\n  }\n  \n\n  @Override\n  public byte[] getContent(MimeType...mimeType) throws IOException {\n    byte [] data =  content.get(mimeType);\n    if (data==null) {\n      data = baseRef.getContent(mimeType);\n    }\n    return data;\n  }\n\n  @Override\n  public Set<MimeType> getContentType() {\n    HashSet<MimeType> mimeTypes = new HashSet<>();\n    mimeTypes.addAll(content.keySet());\n    mimeTypes.addAll(baseRef.getContentType());\n    return mimeTypes;\n  }\n\n  @Override\n  public String getId() {\n    return baseRef.getId();\n  }\n\n  @Override\n  public Date getLastModifiedDate() {\n    return baseRef.getLastModifiedDate();\n  }\n\n  @Override\n  public URI getSourceUri() {\n    return baseRef.getSourceUri();\n  }\n\n  @Override\n  public URI getBrokerUri() {\n    return baseRef.getBrokerUri();\n  }\n\n  @Override\n  public String getBrokerName() {\n    return baseRef.getBrokerName();\n  }\n\n  @Override\n  public Map<String, Object> getAttributesMap() {\n    return baseRef.getAttributesMap();\n  }\n\n<fim_suffix>  @Override\n  public DataReference getOriginDataReference() {\n    return baseRef;\n  }\n\n  @Override\n  public String getInputBrokerRef() {\n    return baseRef.getInputBrokerRef();\n  }\n\n  @Override\n  public String getTaskRef() {\n    return baseRef.getTaskRef();\n  }\n\n  @Override\n  public String toString() {\n    return baseRef.toString();\n  }\n  \n}<fim_middle>// function below has no smell\n"}