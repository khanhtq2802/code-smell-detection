{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.ml.tree.randomforest;\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.ignite.ml.composition.ModelsComposition;\nimport org.apache.ignite.ml.composition.predictionsaggregator.OnMajorityPredictionsAggregator;\nimport org.apache.ignite.ml.dataset.Dataset;\nimport org.apache.ignite.ml.dataset.feature.FeatureMeta;\nimport org.apache.ignite.ml.dataset.feature.ObjectHistogram;\nimport org.apache.ignite.ml.dataset.impl.bootstrapping.BootstrappedDatasetPartition;\nimport org.apache.ignite.ml.dataset.impl.bootstrapping.BootstrappedVector;\nimport org.apache.ignite.ml.dataset.primitive.context.EmptyContext;\nimport org.apache.ignite.ml.environment.LearningEnvironmentBuilder;\nimport org.apache.ignite.ml.tree.randomforest.data.TreeRoot;\nimport org.apache.ignite.ml.tree.randomforest.data.impurity.GiniHistogram;\nimport org.apache.ignite.ml.tree.randomforest.data.impurity.GiniHistogramsComputer;\nimport org.apache.ignite.ml.tree.randomforest.data.impurity.ImpurityHistogramsComputer;\nimport org.apache.ignite.ml.tree.randomforest.data.statistics.ClassifierLeafValuesComputer;\nimport org.apache.ignite.ml.tree.randomforest.data.statistics.LeafValuesComputer;\n\n/**\n * Classifier trainer based on RandomForest algorithm.\n */\n<fim_suffix>public class RandomForestClassifierTrainer\n    extends RandomForestTrainer<ObjectHistogram<BootstrappedVector>, GiniHistogram, RandomForestClassifierTrainer> {\n    /** Label mapping. */\n    private Map<Double, Integer> lblMapping = new HashMap<>();\n\n    /**\n     * Constructs an instance of RandomForestClassifierTrainer.\n     *\n     * @param meta Features meta.\n     */\n    public RandomForestClassifierTrainer(List<FeatureMeta> meta) {\n        super(meta);\n    }\n\n    /** {@inheritDoc} */\n    @Override protected RandomForestClassifierTrainer instance() {\n        return this;\n    }\n\n    /**\n     * Aggregates all unique labels from dataset and assigns integer id value for each label.\n     * This id can be used as index in arrays or lists.\n     *\n     * @param dataset Dataset.\n     * @return true if initialization was done.\n     */\n    @Override protected boolean init(Dataset<EmptyContext, BootstrappedDatasetPartition> dataset) {\n        Set<Double> uniqLabels = dataset.compute(\n            x -> {\n                Set<Double> labels = new HashSet<>();\n                for (int i = 0; i < x.getRowsCount(); i++)\n                    labels.add(x.getRow(i).label());\n                return labels;\n            },\n            (l, r) -> {\n                if (l == null)\n                    return r;\n                if (r == null)\n                    return l;\n                Set<Double> lbls = new HashSet<>();\n                lbls.addAll(l);\n                lbls.addAll(r);\n                return lbls;\n            }\n        );\n\n        if(uniqLabels == null)\n            return false;\n\n        int i = 0;\n        for (Double label : uniqLabels)\n            lblMapping.put(label, i++);\n\n        return super.init(dataset);\n    }\n\n    /** {@inheritDoc} */\n    @Override protected ModelsComposition buildComposition(List<TreeRoot> models) {\n        return new ModelsComposition(models, new OnMajorityPredictionsAggregator());\n    }\n\n    /** {@inheritDoc} */\n    @Override protected ImpurityHistogramsComputer<GiniHistogram> createImpurityHistogramsComputer() {\n        return new GiniHistogramsComputer(lblMapping);\n    }\n\n    /** {@inheritDoc} */\n    @Override protected LeafValuesComputer<ObjectHistogram<BootstrappedVector>> createLeafStatisticsAggregator() {\n        return new ClassifierLeafValuesComputer(lblMapping);\n    }\n\n    /** {@inheritDoc} */\n    @Override public RandomForestClassifierTrainer withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder) {\n        return (RandomForestClassifierTrainer)super.withEnvironmentBuilder(envBuilder);\n    }\n}<fim_middle>// class below has no smell\n"}