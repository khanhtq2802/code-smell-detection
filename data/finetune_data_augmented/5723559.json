{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.storm.blobstore;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Map;\n\nimport javax.security.auth.Subject;\nimport javax.security.auth.login.LoginContext;\n\nimport org.apache.storm.Config;\nimport org.apache.storm.blobstore.BlobStore;\nimport org.apache.storm.hdfs.blobstore.HdfsBlobStore;\nimport org.apache.storm.nimbus.NimbusInfo;\nimport org.apache.storm.utils.Utils;\nimport org.apache.storm.blobstore.LocalFsBlobStore;\nimport org.apache.storm.generated.AuthorizationException;\nimport org.apache.storm.generated.KeyAlreadyExistsException;\nimport org.apache.storm.generated.KeyNotFoundException;\nimport org.apache.storm.generated.ReadableBlobMeta;\nimport org.apache.storm.generated.SettableBlobMeta;\n\npublic class MigrateBlobs {\n    \n    protected static void deleteAllBlobStoreKeys(BlobStore bs, Subject who) throws AuthorizationException, KeyNotFoundException {\n        Iterable<String> hdfsKeys = () -> bs.listKeys();\n        for(String key : hdfsKeys) {\n            System.out.println(key);\n            bs.deleteBlob(key, who);\n        }\n    }\n    \n<fim_suffix>    protected static void copyBlobStoreKeys(BlobStore bsFrom, Subject whoFrom, BlobStore bsTo, Subject whoTo) throws AuthorizationException, KeyAlreadyExistsException, IOException, KeyNotFoundException {\n        Iterable<String> lfsKeys = () -> bsFrom.listKeys();\n        for(String key : lfsKeys) {\n            ReadableBlobMeta readable_meta = bsFrom.getBlobMeta(key, whoFrom);\n            SettableBlobMeta meta = readable_meta.get_settable();\n            InputStream in = bsFrom.getBlob(key, whoFrom);\n            System.out.println(\"COPYING BLOB \" + key + \" FROM \" + bsFrom + \" TO \" + bsTo);\n            bsTo.createBlob(key, in, meta, whoTo);\n            System.out.println(\"DONE CREATING BLOB \" + key);\n        }\n    }\n    \n    \n    public static void main(String[] args) throws Exception {\n        Map<String, Object> hdfsConf = Utils.readStormConfig();\n        \n        if (args.length < 2) {\n            System.out.println(\"Need at least 2 arguments, but have \" + Integer.toString(args.length));\n            System.out.println(\"migrate <local_blobstore_dir> <hdfs_blobstore_path> <hdfs_principal> <keytab>\");\n            System.out.println(\"Migrates blobs from LocalFsBlobStore to HdfsBlobStore\");\n            System.out.println(\"Example: migrate '/srv/storm' 'hdfs://some-hdfs-namenode:8080/srv/storm/my-storm-blobstore' 'stormUser/my-nimbus-host.example.com@STORM.EXAMPLE.COM' '/srv/my-keytab/stormUser.kt'\");\n            System.exit(1);\n        }\n        \n        String localBlobstoreDir = args[0];\n        String hdfsBlobstorePath = args[1];\n        \n        hdfsConf.put(Config.BLOBSTORE_DIR, hdfsBlobstorePath);\n        hdfsConf.put(Config.STORM_PRINCIPAL_TO_LOCAL_PLUGIN, \"org.apache.storm.security.auth.DefaultPrincipalToLocal\");\n        if(args.length >= 3) {\n        \tSystem.out.println(\"SETTING HDFS PRINCIPAL!\");\n        \thdfsConf.put(Config.BLOBSTORE_HDFS_PRINCIPAL, args[2]);\n        }\n        if(args.length >= 4) {\n        \tSystem.out.println(\"SETTING HDFS KEYTAB!\");\n        \thdfsConf.put(Config.BLOBSTORE_HDFS_KEYTAB, args[3]);\n        }\n        hdfsConf.put(Config.STORM_BLOBSTORE_REPLICATION_FACTOR, 7);\n        \n        Map<String, Object> lfsConf = Utils.readStormConfig();\n        lfsConf.put(Config.BLOBSTORE_DIR, localBlobstoreDir);\n        lfsConf.put(Config.STORM_PRINCIPAL_TO_LOCAL_PLUGIN, \"org.apache.storm.security.auth.DefaultPrincipalToLocal\");\n        \n        \n        /* CREATE THE BLOBSTORES */\n        LocalFsBlobStore lfsBlobStore = new LocalFsBlobStore();\n        lfsBlobStore.prepare(lfsConf, null, NimbusInfo.fromConf(lfsConf), null);\n        \n        HdfsBlobStore hdfsBlobStore = new HdfsBlobStore();\n        hdfsBlobStore.prepare(hdfsConf, null, null, null);\n        \n        \n        /* LOOK AT LOCAL BLOBSTORE */\n        System.out.println(\"Listing local blobstore keys.\");\n        MigratorMain.listBlobStoreKeys(lfsBlobStore, null);\n        System.out.println(\"Done listing local blobstore keys.\");\n        \n        /* LOOK AT HDFS BLOBSTORE */\n        System.out.println(\"Listing HDFS blobstore keys.\");\n        MigratorMain.listBlobStoreKeys(hdfsBlobStore, null);\n        System.out.println(\"Done listing HDFS blobstore keys.\");\n        \n        \n        System.out.println(\"Going to delete everything in HDFS, then copy all local blobs to HDFS. Continue? [Y/n]\");\n        String resp = System.console().readLine().toLowerCase().trim();\n        if (!(resp.equals(\"y\") || resp.equals(\"\"))) {\n            System.out.println(\"Not copying blobs. Exiting. [\" + resp.toLowerCase().trim() + \"]\");\n            System.exit(1);\n        }\n        \n        /* DELETE EVERYTHING IN HDFS */\n        System.out.println(\"Deleting blobs from HDFS.\");\n        deleteAllBlobStoreKeys(hdfsBlobStore, null);\n        System.out.println(\"DONE deleting blobs from HDFS.\");\n        \n        /* COPY EVERYTHING FROM LOCAL BLOBSTORE TO HDFS */\n        System.out.println(\"Copying local blobstore keys.\");\n        copyBlobStoreKeys(lfsBlobStore, null, hdfsBlobStore, null);\n        System.out.println(\"DONE Copying local blobstore keys.\");\n        \n        /* LOOK AT HDFS BLOBSTORE AGAIN */\n        System.out.println(\"Listing HDFS blobstore keys.\");\n        MigratorMain.listBlobStoreKeys(hdfsBlobStore, null);\n        System.out.println(\"Done listing HDFS blobstore keys.\");\n        \n        hdfsBlobStore.shutdown();\n        System.out.println(\"Done Migrating!\");\n    }\n}<fim_middle>// function below has no smell\n"}