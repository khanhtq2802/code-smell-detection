{"text": "<fim_prefix>            }\n            catch ( IOException e )\n            {\n                throw new MavenReportException(\n                    \"Failed to resolve javadoc bundles from dependencies: \" + e.getMessage(), e );\n            }\n            if ( isNotEmpty( dependencyJavadocBundles ) )\n            {\n                for ( JavadocBundle bundle : dependencyJavadocBundles )\n                {\n                    JavadocOptions options = bundle.getOptions();\n                    if ( options != null && isNotEmpty( options.getLinks() ) )\n                    {\n                        links.addAll( options.getLinks() );\n                    }\n                }\n            }\n        }\n        if ( isNotEmpty( this.links ) )\n        {\n            links.addAll( this.links );\n        }\n        links.addAll( getDependenciesLinks() );\n        return links;\n    }\n    private Set<Group> collectGroups()\n        throws MavenReportException\n    {\n        Set<Group> groups = new LinkedHashSet<>();\n        if ( includeDependencySources )\n        {\n            try\n            {\n                resolveDependencyBundles();\n            }\n            catch ( IOException e )\n            {\n                throw new MavenReportException(\n                    \"Failed to resolve javadoc bundles from dependencies: \" + e.getMessage(), e );\n            }\n            if ( isNotEmpty( dependencyJavadocBundles ) )\n            {\n                for ( JavadocBundle bundle : dependencyJavadocBundles )\n                {\n                    JavadocOptions options = bundle.getOptions();\n                    if ( options != null && isNotEmpty( options.getGroups() ) )\n                    {\n                        groups.addAll( options.getGroups() );\n                    }\n                }\n            }\n        }\n        if ( this.groups != null && this.groups.length > 0 )\n        {\n            groups.addAll( Arrays.asList( this.groups ) );\n        }\n        return groups;\n    }\n    private Set<ResourcesArtifact> collectResourcesArtifacts()\n        throws MavenReportException\n    {\n        Set<ResourcesArtifact> result = new LinkedHashSet<>();\n        if ( includeDependencySources )\n        {\n            try\n            {\n                resolveDependencyBundles();\n            }\n            catch ( IOException e )\n            {\n                throw new MavenReportException(\n                    \"Failed to resolve javadoc bundles from dependencies: \" + e.getMessage(), e );\n            }\n            if ( isNotEmpty( dependencyJavadocBundles ) )\n            {\n                for ( JavadocBundle bundle : dependencyJavadocBundles )\n                {\n                    JavadocOptions options = bundle.getOptions();\n                    if ( options != null && isNotEmpty( options.getResourcesArtifacts() ) )\n                    {\n                        result.addAll( options.getResourcesArtifacts() );\n                    }\n                }\n            }\n        }\n        if ( this.resourcesArtifacts != null && this.resourcesArtifacts.length > 0 )\n        {\n            result.addAll( Arrays.asList( this.resourcesArtifacts ) );\n        }\n        return result;\n    }\n    private Set<BootclasspathArtifact> collectBootClasspathArtifacts()\n        throws MavenReportException\n    {\n        Set<BootclasspathArtifact> result = new LinkedHashSet<>();\n        if ( includeDependencySources )\n        {\n            try\n            {\n                resolveDependencyBundles();\n            }\n            catch ( IOException e )\n            {\n                throw new MavenReportException(\n                    \"Failed to resolve javadoc bundles from dependencies: \" + e.getMessage(), e );\n            }\n            if ( isNotEmpty( dependencyJavadocBundles ) )\n            {\n                for ( JavadocBundle bundle : dependencyJavadocBundles )\n                {\n                    JavadocOptions options = bundle.getOptions();\n                    if ( options != null && isNotEmpty( options.getBootclasspathArtifacts() ) )\n                    {\n                        result.addAll( options.getBootclasspathArtifacts() );\n                    }\n                }\n            }\n        }\n        if ( this.bootclasspathArtifacts != null && this.bootclasspathArtifacts.length > 0 )\n        {\n            result.addAll( Arrays.asList( this.bootclasspathArtifacts ) );\n        }\n        return result;\n    }\n    private Set<OfflineLink> collectOfflineLinks()\n        throws MavenReportException\n    {\n        Set<OfflineLink> result = new LinkedHashSet<>();\n        OfflineLink javaApiLink = getDefaultJavadocApiLink();\n        if ( javaApiLink != null )\n        {\n            result.add( javaApiLink );\n        }\n        if ( includeDependencySources )\n        {\n            try\n            {\n                resolveDependencyBundles();\n            }\n            catch ( IOException e )\n            {\n                throw new MavenReportException(\n                    \"Failed to resolve javadoc bundles from dependencies: \" + e.getMessage(), e );\n            }\n            if ( isNotEmpty( dependencyJavadocBundles ) )\n            {\n                for ( JavadocBundle bundle : dependencyJavadocBundles )\n                {\n                    JavadocOptions options = bundle.getOptions();\n                    if ( options != null && isNotEmpty( options.getOfflineLinks() ) )\n                    {\n                        result.addAll( options.getOfflineLinks() );\n                    }\n                }\n            }\n        }\n        if ( this.offlineLinks != null && this.offlineLinks.length > 0 )\n        {\n            result.addAll( Arrays.asList( this.offlineLinks ) );\n        }\n        return result;\n    }\n    private Set<Tag> collectTags()\n        throws MavenReportException\n    {\n        Set<Tag> tags = new LinkedHashSet<>();\n        if ( includeDependencySources )\n        {\n            try\n            {\n                resolveDependencyBundles();\n            }\n            catch ( IOException e )\n            {\n                throw new MavenReportException(\n                    \"Failed to resolve javadoc bundles from dependencies: \" + e.getMessage(), e );\n            }\n            if ( isNotEmpty( dependencyJavadocBundles ) )\n            {\n                for ( JavadocBundle bundle : dependencyJavadocBundles )\n                {\n                    JavadocOptions options = bundle.getOptions();\n                    if ( options != null && isNotEmpty( options.getTags() ) )\n                    {\n                        tags.addAll( options.getTags() );\n                    }\n                }\n            }\n        }\n        if ( this.tags != null && this.tags.length > 0 )\n        {\n            tags.addAll( Arrays.asList( this.tags ) );\n        }\n        return tags;\n    }\n    private Set<TagletArtifact> collectTagletArtifacts()\n        throws MavenReportException\n    {\n        Set<TagletArtifact> tArtifacts = new LinkedHashSet<>();\n        if ( includeDependencySources )\n        {\n            try\n            {\n                resolveDependencyBundles();\n            }\n            catch ( IOException e )\n            {\n                throw new MavenReportException(\n                    \"Failed to resolve javadoc bundles from dependencies: \" + e.getMessage(), e );\n            }\n            if ( isNotEmpty( dependencyJavadocBundles ) )\n            {\n                for ( JavadocBundle bundle : dependencyJavadocBundles )\n                {\n                    JavadocOptions options = bundle.getOptions();\n                    if ( options != null && isNotEmpty( options.getTagletArtifacts() ) )\n                    {\n                        tArtifacts.addAll( options.getTagletArtifacts() );\n                    }\n                }\n            }\n        }\n        if ( tagletArtifact != null )\n        {\n            tArtifacts.add( tagletArtifact );\n        }\n        if ( tagletArtifacts != null && tagletArtifacts.length > 0 )\n        {\n            tArtifacts.addAll( Arrays.asList( tagletArtifacts ) );\n        }\n        return tArtifacts;\n    }\n    private Set<DocletArtifact> collectDocletArtifacts()\n        throws MavenReportException\n    {\n        Set<DocletArtifact> dArtifacts = new LinkedHashSet<>();\n        if ( includeDependencySources )\n        {\n            try\n            {\n                resolveDependencyBundles();\n            }\n            catch ( IOException e )\n            {\n                throw new MavenReportException(\n                    \"Failed to resolve javadoc bundles from dependencies: \" + e.getMessage(), e );\n            }\n            if ( isNotEmpty( dependencyJavadocBundles ) )\n            {\n                for ( JavadocBundle bundle : dependencyJavadocBundles )\n                {\n                    JavadocOptions options = bundle.getOptions();\n                    if ( options != null && isNotEmpty( options.getDocletArtifacts() ) )\n                    {\n                        dArtifacts.addAll( options.getDocletArtifacts() );\n                    }\n                }\n            }\n        }\n        if ( docletArtifact != null )\n        {\n            dArtifacts.add( docletArtifact );\n        }\n        if ( docletArtifacts != null && docletArtifacts.length > 0 )\n        {\n            dArtifacts.addAll( Arrays.asList( docletArtifacts ) );\n        }\n        return dArtifacts;\n    }\n<fim_suffix>    private Set<Taglet> collectTaglets()\n        throws MavenReportException\n    {\n        Set<Taglet> result = new LinkedHashSet<>();\n        if ( includeDependencySources )\n        {\n            try\n            {\n                resolveDependencyBundles();\n            }\n            catch ( IOException e )\n            {\n                throw new MavenReportException(\n                    \"Failed to resolve javadoc bundles from dependencies: \" + e.getMessage(), e );\n            }\n            if ( isNotEmpty( dependencyJavadocBundles ) )\n            {\n                for ( JavadocBundle bundle : dependencyJavadocBundles )\n                {\n                    JavadocOptions options = bundle.getOptions();\n                    if ( options != null && isNotEmpty( options.getTaglets() ) )\n                    {\n                        result.addAll( options.getTaglets() );\n                    }\n                }\n            }\n        }\n        if ( taglets != null && taglets.length > 0 )\n        {\n            result.addAll( Arrays.asList( taglets ) );\n        }\n        return result;\n    }<fim_middle>// function below has no smell\n"}