{"text": "<fim_prefix>// Copyright (C) 2008 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\npackage com.google.caja.service;\nimport com.google.caja.SomethingWidgyHappenedError;\nimport com.google.caja.util.Strings;\nimport com.google.common.collect.Maps;\nimport java.io.BufferedReader;\nimport java.io.ByteArrayInputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.io.IOException;\nimport java.net.URLDecoder;\nimport java.security.Principal;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport javax.servlet.AsyncContext;\nimport javax.servlet.DispatcherType;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletInputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.http.Part;\n/**\n * @author jasvir@google.com (Jasvir Nagra)\n */\npublic final class TestHttpServletRequest implements HttpServletRequest {\n  private final String queryString;\n  private final Map<String, List<String>> params = Maps.newHashMap();\n  private final byte[] content;\n  private final String contentType;\n  private final String characterEncoding;\n  private final Map<String, String> headers = Maps.newHashMap();\n<fim_suffix>  public TestHttpServletRequest(String queryString) {\n    this.queryString = queryString;\n    this.content = new byte[0];\n    this.contentType = null;\n    this.characterEncoding = null;\n    decodeParams();\n  }\n  TestHttpServletRequest(String queryString,\n                         byte[] content,\n                         String contentType,\n                         String characterEncoding) {\n    this.queryString = queryString;\n    this.content = content;\n    this.contentType = contentType;\n    this.characterEncoding = characterEncoding;\n    decodeParams();\n  }\n  private void decodeParams() {\n    for (String pair : queryString.split(\"[?&]\")) {\n      int eq = pair.indexOf('=');\n      String k = decode(eq >= 0 ? pair.substring(0, eq) : pair);\n      String v = decode(eq >= 0 ? pair.substring(eq + 1) : \"\");\n      if (!params.containsKey(k)) {\n        params.put(k, new ArrayList<String>());\n      }\n      params.get(k).add(v);\n    }\n  }\n  public String getAuthType() { throw new UnsupportedOperationException(); }\n  public Cookie[] getCookies() { throw new UnsupportedOperationException(); }\n  @SuppressWarnings(\"deprecation\")\n  public long getDateHeader(String a) {\n    String h = headers.get(a);\n    return h != null ? new Date(h).getTime() : -1;\n  }\n  public String getHeader(String a) {\n    return headers.get(a);\n  }\n  public Enumeration<String> getHeaderNames() {\n    return enumeration(headers.keySet().iterator());\n  }\n  public int getIntHeader(String arg0) {\n    String h = headers.get(arg0);\n    return h != null ? Integer.valueOf(h) : -1;\n  }\n  public String getMethod() { throw new UnsupportedOperationException(); }\n  public String getPathInfo() { throw new UnsupportedOperationException(); }\n  public String getPathTranslated() {\n    throw new UnsupportedOperationException();\n  }\n  public String getQueryString() { return queryString; }\n  public String getRemoteUser() { throw new UnsupportedOperationException(); }\n  public String getRequestURI() { return \"/proxy\"; }\n  public String getRequestedSessionId() {\n    throw new UnsupportedOperationException();\n  }\n  public String getServletPath() { throw new UnsupportedOperationException(); }\n  public HttpSession getSession() { throw new UnsupportedOperationException(); }\n  public HttpSession getSession(boolean a) {\n    throw new UnsupportedOperationException();\n  }\n  public boolean isRequestedSessionIdFromCookie() {\n    throw new UnsupportedOperationException();\n  }\n  public boolean isRequestedSessionIdFromURL() {\n    throw new UnsupportedOperationException();\n  }\n  @Deprecated\n  public boolean isRequestedSessionIdFromUrl() {\n    throw new UnsupportedOperationException();\n  }\n  public boolean isRequestedSessionIdValid() {\n    throw new UnsupportedOperationException();\n  }\n  public Object getAttribute(String arg0) {\n    throw new UnsupportedOperationException();\n  }\n  public Enumeration<String> getAttributeNames() {\n    throw new UnsupportedOperationException();\n  }\n  public String getCharacterEncoding() { return characterEncoding; }\n  public int getContentLength() { return content.length; }\n  public String getContentType() { return contentType; }\n  public ServletInputStream getInputStream() {\n    final ByteArrayInputStream bais = new ByteArrayInputStream(content);\n    return new ServletInputStream() {\n      @Override\n      public int read() {\n        return bais.read();\n      }\n      @Override\n      public void close() throws IOException {\n        bais.close();\n      }\n    };\n  }\n  public String getParameter(String k) {\n    return params.containsKey(k) ? params.get(k).get(0) : null;\n  }\n  public Enumeration<String> getParameterNames() {\n    return enumeration(params.keySet().iterator());\n  }\n  public String[] getParameterValues(String k) {\n    List<String> vals = params.get(k);\n    return vals != null ? vals.toArray(new String[0]) : null;\n  }\n  public String getProtocol() { return \"http\"; }\n  public BufferedReader getReader() {\n    throw new UnsupportedOperationException();\n  }\n  @Deprecated\n  public String getRealPath(String arg0) {\n    throw new UnsupportedOperationException();\n  }\n  public String getRemoteAddr() { throw new UnsupportedOperationException(); }\n  public String getRemoteHost() { throw new UnsupportedOperationException(); }\n  public String getScheme() { return getProtocol(); }\n  public String getServerName() { return \"test.proxy\"; }\n  public int getServerPort() { return -1; }\n  public void setAttribute(String arg0, Object arg1) {\n    throw new UnsupportedOperationException();\n  }\n  private static String decode(String mimeEncoded) {\n    try {\n      return URLDecoder.decode(mimeEncoded, \"UTF-8\");\n    } catch (UnsupportedEncodingException ex) {\n      throw new SomethingWidgyHappenedError(ex);\n    }\n  }\n  public String getContextPath() {\n    throw new UnsupportedOperationException();\n  }\n  public Enumeration<String> getHeaders(String arg0) {\n    throw new UnsupportedOperationException();\n  }\n  public StringBuffer getRequestURL() {\n    throw new UnsupportedOperationException();\n  }\n  public Principal getUserPrincipal() {\n    throw new UnsupportedOperationException();\n  }\n  public boolean isUserInRole(String arg0) {\n    throw new UnsupportedOperationException();\n  }\n  public Locale getLocale() {\n    return Locale.ENGLISH;\n  }\n  public Enumeration<Locale> getLocales() {\n    throw new UnsupportedOperationException();\n  }\n  public Map<String, String[]> getParameterMap() {\n    throw new UnsupportedOperationException();\n  }\n  public RequestDispatcher getRequestDispatcher(String arg0) {\n    throw new UnsupportedOperationException();\n  }\n  public boolean isSecure() {\n    return Strings.lower(this.getRequestURI()).startsWith(\"https://\");\n  }\n  public void removeAttribute(String arg0) {\n    throw new UnsupportedOperationException();\n  }\n  public void setCharacterEncoding(String encodingName) {\n    throw new UnsupportedOperationException();\n  }\n  public Part getPart(String arg0) {\n    throw new UnsupportedOperationException();\n  }\n  public Collection<Part> getParts() {\n    throw new UnsupportedOperationException();\n  }\n  private static <T> Enumeration<T> enumeration(final Iterator<T> it) {\n    return new Enumeration<T>() {\n      public boolean hasMoreElements() { return it.hasNext(); }\n      public T nextElement() { return it.next(); }\n    };\n  }\n  public String getLocalAddr() { throw new UnsupportedOperationException(); }\n  public String getLocalName() { throw new UnsupportedOperationException(); }\n  public int getLocalPort() { throw new UnsupportedOperationException(); }\n  public int getRemotePort() { throw new UnsupportedOperationException(); }\n  public ServletContext getServletContext() {\n    throw new UnsupportedOperationException();\n  }\n  public void logout() { throw new UnsupportedOperationException(); }\n  public void login(String arg0, String arg1) {\n    throw new UnsupportedOperationException();\n  }\n  public boolean authenticate(HttpServletResponse response) {\n    throw new UnsupportedOperationException();\n  }\n  public DispatcherType getDispatcherType() {\n    return DispatcherType.REQUEST;\n  }\n  public AsyncContext startAsync() {\n    throw new UnsupportedOperationException();\n  }\n  public AsyncContext startAsync(\n      ServletRequest request, ServletResponse response) {\n    throw new UnsupportedOperationException();\n  }<fim_middle>// function below has no smell\n"}