{"text": "<fim_prefix>/**\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n *\n */\npackage org.apache.kerby.kerberos.kerb.server;\nimport org.apache.kerby.kerberos.kerb.KrbException;\nimport org.apache.kerby.kerberos.kerb.admin.kadmin.local.LocalKadmin;\nimport org.apache.kerby.kerberos.kerb.admin.kadmin.local.LocalKadminImpl;\nimport org.apache.kerby.kerberos.kerb.client.Krb5Conf;\nimport org.apache.kerby.kerberos.kerb.client.KrbClient;\nimport org.apache.kerby.kerberos.kerb.client.KrbConfig;\nimport org.apache.kerby.kerberos.kerb.client.KrbPkinitClient;\nimport org.apache.kerby.kerberos.kerb.client.KrbTokenClient;\nimport org.apache.kerby.kerberos.kerb.identity.backend.BackendConfig;\nimport org.apache.kerby.util.NetworkUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.io.File;\nimport java.io.IOException;\n/**\n * A simple KDC server mainly for test usage. It also integrates krb client and\n * kadmin sides for convenience.\n */\npublic class SimpleKdcServer extends KdcServer {\n    private static final Logger LOG =\n        LoggerFactory.getLogger(SimpleKdcServer.class);\n    private final KrbClient krbClnt;\n    private LocalKadmin kadmin;\n    private Krb5Conf krb5Conf;\n    private File workDir;\n    private KrbPkinitClient pkinitClient;\n    private KrbTokenClient tokenClient;\n    /**\n     * Default constructor.\n     *\n     * @throws org.apache.kerby.kerberos.kerb.KrbException e\n     */\n    public SimpleKdcServer() throws KrbException {\n        this(new KrbConfig());\n        setKdcRealm(\"EXAMPLE.COM\");\n        setKdcHost(\"localhost\");\n        setKdcPort(NetworkUtil.getServerPort());\n    }\n    public SimpleKdcServer(KdcConfig kdcConfig,\n                           BackendConfig backendConfig) throws KrbException {\n        super(kdcConfig, backendConfig);\n        this.krbClnt = new KrbClient(new KrbConfig());\n        setKdcRealm(\"EXAMPLE.COM\");\n        setKdcHost(\"localhost\");\n        setKdcPort(NetworkUtil.getServerPort());\n    }\n    public SimpleKdcServer(KrbConfig krbConfig) {\n        super();\n        this.krbClnt = new KrbClient(krbConfig);\n    }\n    public SimpleKdcServer(File confDir, KrbConfig krbConfig) throws KrbException {\n        super(confDir);\n        this.krbClnt = new KrbClient(krbConfig);\n    }\n    public synchronized void setWorkDir(File workDir) {\n        this.workDir = workDir;\n    }\n    public synchronized File getWorkDir() {\n        return workDir;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public synchronized void setKdcRealm(String realm) {\n        super.setKdcRealm(realm);\n        krbClnt.setKdcRealm(realm);\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public synchronized void setKdcHost(String kdcHost) {\n        super.setKdcHost(kdcHost);\n        krbClnt.setKdcHost(kdcHost);\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public synchronized void setKdcTcpPort(int kdcTcpPort) {\n        super.setKdcTcpPort(kdcTcpPort);\n        krbClnt.setKdcTcpPort(kdcTcpPort);\n        setAllowTcp(true);\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public synchronized void setAllowUdp(boolean allowUdp) {\n        super.setAllowUdp(allowUdp);\n        krbClnt.setAllowUdp(allowUdp);\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public synchronized void setAllowTcp(boolean allowTcp) {\n        super.setAllowTcp(allowTcp);\n        krbClnt.setAllowTcp(allowTcp);\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public synchronized void setKdcUdpPort(int kdcUdpPort) {\n        super.setKdcUdpPort(kdcUdpPort);\n        krbClnt.setKdcUdpPort(kdcUdpPort);\n        setAllowUdp(true);\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public synchronized void init() throws KrbException {\n        super.init();\n        kadmin = new LocalKadminImpl(getKdcSetting(), getIdentityService());\n        kadmin.createBuiltinPrincipals();\n        try {\n            krb5Conf = new Krb5Conf(this);\n            krb5Conf.initKrb5conf();\n        } catch (IOException e) {\n            throw new KrbException(\"Failed to make krb5.conf\", e);\n        }\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public synchronized void start() throws KrbException {\n        super.start();\n        krbClnt.init();\n    }\n    /**\n     * Get krb client.\n     * @return KrbClient\n     */\n    public synchronized KrbClient getKrbClient() {\n        return krbClnt;\n    }\n    /**\n     * @return PKINIT client\n     */\n    public synchronized KrbPkinitClient getPkinitClient() {\n        if (pkinitClient == null) {\n            pkinitClient = new KrbPkinitClient(krbClnt);\n        }\n        return pkinitClient;\n    }\n    /**\n     * @return Token client\n     */\n    public synchronized KrbTokenClient getTokenClient() {\n        if (tokenClient == null) {\n            tokenClient = new KrbTokenClient(krbClnt);\n        }\n        return tokenClient;\n    }\n    /**\n     * Get Kadmin operation interface.\n     * @return Kadmin\n     */\n    public synchronized LocalKadmin getKadmin() {\n        return kadmin;\n    }\n    /**\n     * Create principal with principal name.\n     *\n     * @throws org.apache.kerby.kerberos.kerb.KrbException e\n     * @param principal The principal name\n     */\n    public synchronized void createPrincipal(String principal) throws KrbException {\n        kadmin.addPrincipal(principal);\n    }\n    /**\n     * Create principal with principal name and password.\n     *\n     * @throws org.apache.kerby.kerberos.kerb.KrbException e\n     * @param principal The principal name\n     * @param password The password to create keys\n     */\n<fim_suffix>    public synchronized void createPrincipal(String principal,\n                                String password) throws KrbException {\n        kadmin.addPrincipal(principal, password);\n    }\n    /**\n     * Create principals.\n     *\n     * @throws org.apache.kerby.kerberos.kerb.KrbException e\n     * @param principals The principal list\n     */\n    public synchronized void createPrincipals(String ... principals) throws KrbException {\n        for (String principal : principals) {\n            kadmin.addPrincipal(principal);\n        }\n    }\n    /**\n     * Creates principals and export their keys to the specified keytab file.\n     *\n     * @throws org.apache.kerby.kerberos.kerb.KrbException e\n     * @param keytabFile The keytab file to store principal keys\n     * @param principals The principals to be create\n     */\n    public synchronized void createAndExportPrincipals(File keytabFile,\n                                String ... principals) throws KrbException {\n        createPrincipals(principals);\n        exportPrincipals(keytabFile);\n    }\n    /**\n     * Delete principals.\n     *\n     * @throws org.apache.kerby.kerberos.kerb.KrbException e\n     * @param principals The principals to be delete\n     */\n    public synchronized void deletePrincipals(String ... principals) throws KrbException {\n        for (String principal : principals) {\n            deletePrincipal(principal);\n        }\n    }\n    /**\n     * Delete principal.\n     *<fim_middle>// function below has no smell\n"}