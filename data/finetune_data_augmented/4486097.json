{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.drill.exec.store.mongo.schema;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.calcite.schema.SchemaPlus;\nimport org.apache.drill.common.exceptions.DrillRuntimeException;\nimport org.apache.drill.common.exceptions.ExecutionSetupException;\nimport org.apache.drill.exec.planner.logical.DrillTable;\nimport org.apache.drill.exec.planner.logical.DynamicDrillTable;\nimport org.apache.drill.exec.store.AbstractSchema;\nimport org.apache.drill.exec.store.AbstractSchemaFactory;\nimport org.apache.drill.exec.store.SchemaConfig;\nimport org.apache.drill.exec.store.mongo.MongoScanSpec;\nimport org.apache.drill.exec.store.mongo.MongoStoragePlugin;\nimport org.apache.drill.exec.store.mongo.MongoStoragePluginConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.apache.drill.shaded.guava.com.google.common.cache.CacheBuilder;\nimport org.apache.drill.shaded.guava.com.google.common.cache.CacheLoader;\nimport org.apache.drill.shaded.guava.com.google.common.cache.LoadingCache;\nimport org.apache.drill.shaded.guava.com.google.common.collect.ImmutableList;\nimport org.apache.drill.shaded.guava.com.google.common.collect.Maps;\nimport org.apache.drill.shaded.guava.com.google.common.collect.Sets;\nimport com.mongodb.MongoException;\nimport com.mongodb.client.MongoDatabase;\n\npublic class MongoSchemaFactory extends AbstractSchemaFactory {\n\n  private static final Logger logger = LoggerFactory.getLogger(MongoSchemaFactory.class);\n\n  private static final String DATABASES = \"databases\";\n\n  private LoadingCache<String, List<String>> databases;\n  private LoadingCache<String, List<String>> tableNameLoader;\n  private final MongoStoragePlugin plugin;\n\n  public MongoSchemaFactory(MongoStoragePlugin plugin, String schemaName) throws ExecutionSetupException {\n    super(schemaName);\n    this.plugin = plugin;\n\n    databases = CacheBuilder //\n        .newBuilder() //\n        .expireAfterAccess(1, TimeUnit.MINUTES) //\n        .build(new DatabaseLoader());\n\n    tableNameLoader = CacheBuilder //\n        .newBuilder() //\n        .expireAfterAccess(1, TimeUnit.MINUTES) //\n        .build(new TableNameLoader());\n  }\n\n<fim_suffix>  private class DatabaseLoader extends CacheLoader<String, List<String>> {\n\n    @Override\n    public List<String> load(String key) throws Exception {\n      if (!DATABASES.equals(key)) {\n        throw new UnsupportedOperationException();\n      }\n      try {\n        List<String> dbNames = new ArrayList<>();\n        plugin.getClient().listDatabaseNames().into(dbNames);\n        return dbNames;\n      } catch (MongoException me) {\n        logger.warn(\"Failure while loading databases in Mongo. {}\",\n            me.getMessage());\n        return Collections.emptyList();\n      } catch (Exception e) {\n        throw new DrillRuntimeException(e.getMessage(), e);\n      }\n    }\n\n  }\n\n  private class TableNameLoader extends CacheLoader<String, List<String>> {\n\n    @Override\n    public List<String> load(String dbName) throws Exception {\n      try {\n        MongoDatabase db = plugin.getClient().getDatabase(dbName);\n        List<String> collectionNames = new ArrayList<>();\n        db.listCollectionNames().into(collectionNames);\n        return collectionNames;\n      } catch (MongoException me) {\n        logger.warn(\"Failure while getting collection names from '{}'. {}\",\n            dbName, me.getMessage());\n        return Collections.emptyList();\n      } catch (Exception e) {\n        throw new DrillRuntimeException(e.getMessage(), e);\n      }\n    }\n  }\n\n  @Override\n  public void registerSchemas(SchemaConfig schemaConfig, SchemaPlus parent) throws IOException {\n    MongoSchema schema = new MongoSchema(getName());\n    SchemaPlus hPlus = parent.add(getName(), schema);\n    schema.setHolder(hPlus);\n  }\n\n  class MongoSchema extends AbstractSchema {\n\n    private final Map<String, MongoDatabaseSchema> schemaMap = Maps.newHashMap();\n\n    public MongoSchema(String name) {\n      super(ImmutableList.<String> of(), name);\n    }\n\n    @Override\n    public AbstractSchema getSubSchema(String name) {\n      List<String> tables;\n      try {\n        if (! schemaMap.containsKey(name)) {\n          tables = tableNameLoader.get(name);\n          schemaMap.put(name, new MongoDatabaseSchema(tables, this, name));\n        }\n\n        return schemaMap.get(name);\n\n        //return new MongoDatabaseSchema(tables, this, name);\n      } catch (ExecutionException e) {\n        logger.warn(\"Failure while attempting to access MongoDataBase '{}'.\",\n            name, e.getCause());\n        return null;\n      }\n\n    }\n\n    void setHolder(SchemaPlus plusOfThis) {\n      for (String s : getSubSchemaNames()) {\n        plusOfThis.add(s, getSubSchema(s));\n      }\n    }\n\n    @Override\n    public boolean showInInformationSchema() {\n      return false;\n    }\n\n    @Override\n    public Set<String> getSubSchemaNames() {\n      try {\n        List<String> dbs = databases.get(DATABASES);\n        return Sets.newHashSet(dbs);\n      } catch (ExecutionException e) {\n        logger.warn(\"Failure while getting Mongo database list.\", e);\n        return Collections.emptySet();\n      }\n    }\n\n    List<String> getTableNames(String dbName) {\n      try {\n        return tableNameLoader.get(dbName);\n      } catch (ExecutionException e) {\n        logger.warn(\"Failure while loading table names for database '{}'.\",\n            dbName, e.getCause());\n        return Collections.emptyList();\n      }\n    }\n\n    DrillTable getDrillTable(String dbName, String collectionName) {\n      MongoScanSpec mongoScanSpec = new MongoScanSpec(dbName, collectionName);\n      return new DynamicDrillTable(plugin, getName(), null, mongoScanSpec);\n    }\n\n    @Override\n    public String getTypeName() {\n      return MongoStoragePluginConfig.NAME;\n    }\n  }\n}<fim_middle>// class below has no smell\n"}