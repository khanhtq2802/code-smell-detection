{"text": "<fim_prefix>\n<fim_suffix>    static class SecondPassVisitor extends Node.Visitor\n        \timplements TagConstants {\n\tprivate Node.Root root;\n\tprivate StringBuffer buf;\n\tprivate Compiler compiler;\n\tprivate String jspIdPrefix;\n\tprivate boolean resetDefaultNS = false;\n\t// Current value of jsp:id attribute\n\tprivate int jspId;\n\t/*\n\t * Constructor\n\t */\n\tpublic SecondPassVisitor(Node.Root root, StringBuffer buf,\n\t\t\t\t Compiler compiler, String jspIdPrefix) {\n\t    this.root = root;\n\t    this.buf = buf;\n\t    this.compiler = compiler;\n\t    this.jspIdPrefix = jspIdPrefix;\n\t}\n\t/*\n\t * Visits root node.\n\t */\n\tpublic void visit(Node.Root n) throws JasperException {\n\t    if (n == this.root) {\n\t\t// top-level page\n\t\tappendXmlProlog();\n\t\tappendTag(n);\n\t    } else {\n\t\tboolean resetDefaultNSSave = resetDefaultNS;\n\t\tif (n.isXmlSyntax()) {\n\t\t    resetDefaultNS = true;\n\t\t}\n\t\tvisitBody(n);\n\t\tresetDefaultNS = resetDefaultNSSave;\n\t    }\n\t}\n\t/*\n\t * Visits jsp:root element of JSP page in XML syntax.\n\t *\n\t * Any nested jsp:root elements (from pages included via an\n\t * include directive) are ignored.\n\t */\n\tpublic void visit(Node.JspRoot n) throws JasperException {\n\t    visitBody(n);\n\t}\n\tpublic void visit(Node.PageDirective n) throws JasperException {\n\t    appendPageDirective(n);\n\t}\n\tpublic void visit(Node.IncludeDirective n) throws JasperException {\n\t    // expand in place\n\t    visitBody(n);\n\t}\n\tpublic void visit(Node.Comment n) throws JasperException {\n\t    // Comments are ignored in XML view\n\t}\n\tpublic void visit(Node.Declaration n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.Expression n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.Scriptlet n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.JspElement n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.ELExpression n) throws JasperException {\n\t    if (!n.getRoot().isXmlSyntax()) {\n\t\tbuf.append(\"<\").append(JSP_TEXT_ACTION);\n\t\tbuf.append(\" \");\n\t        buf.append(jspIdPrefix);\n\t\tbuf.append(\":id=\\\"\");\n\t\tbuf.append(jspId++).append(\"\\\">\");\n\t    }\n\t    buf.append(\"${\");\n            buf.append(JspUtil.escapeXml(n.getText()));\n\t    buf.append(\"}\");\n\t    if (!n.getRoot().isXmlSyntax()) {\n\t\tbuf.append(JSP_TEXT_ACTION_END);\n\t    }\n\t    buf.append(\"\\n\");\n\t}\n\tpublic void visit(Node.IncludeAction n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.ForwardAction n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.GetProperty n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.SetProperty n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.ParamAction n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.ParamsAction n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.FallBackAction n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.UseBean n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.PlugIn n) throws JasperException {\n\t    appendTag(n);\n\t}\n        public void visit(Node.NamedAttribute n) throws JasperException {\n            appendTag(n);\n        }\n        public void visit(Node.JspBody n) throws JasperException {\n            appendTag(n);\n        }\n\tpublic void visit(Node.CustomTag n) throws JasperException {\n\t    boolean resetDefaultNSSave = resetDefaultNS;\n\t    appendTag(n, resetDefaultNS);\n\t    resetDefaultNS = resetDefaultNSSave;\n\t}\n\tpublic void visit(Node.UninterpretedTag n) throws JasperException {\n\t    boolean resetDefaultNSSave = resetDefaultNS;\n\t    appendTag(n, resetDefaultNS);\n\t    resetDefaultNS = resetDefaultNSSave;\n\t}\n\tpublic void visit(Node.JspText n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.DoBodyAction n) throws JasperException {\n\t    appendTag(n);\n\t}\n        public void visit(Node.InvokeAction n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.TagDirective n) throws JasperException {\n\t    appendTagDirective(n);\n\t}\n\tpublic void visit(Node.AttributeDirective n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.VariableDirective n) throws JasperException {\n\t    appendTag(n);\n\t}\n\tpublic void visit(Node.TemplateText n) throws JasperException {\n\t    /*\n\t     * If the template text came from a JSP page written in JSP syntax,\n\t     * create a jsp:text element for it (JSP 5.3.2).\n\t     */\n\t    appendText(n.getText(), !n.getRoot().isXmlSyntax());\n\t}\n\t/*\n\t * Appends the given tag, including its body, to the XML view.\n\t */\n\tprivate void appendTag(Node n) throws JasperException {\n\t    appendTag(n, false);\n\t}\n\t/*\n\t * Appends the given tag, including its body, to the XML view,\n\t * and optionally reset default namespace to \"\", if none specified.\n\t */\n\tprivate void appendTag(Node n, boolean addDefaultNS)\n\t\tthrows JasperException {\n\t    Node.Nodes body = n.getBody();\n\t    String text = n.getText();\n\t    buf.append(\"<\").append(n.getQName());\n\t    buf.append(\"\\n\");\n\t    printAttributes(n, addDefaultNS);\n\t    buf.append(\"  \").append(jspIdPrefix).append(\":id\").append(\"=\\\"\");\n\t    buf.append(jspId++).append(\"\\\"\\n\");\n\t    if (ROOT_ACTION.equals(n.getLocalName()) || body != null\n\t\t        || text != null) {\n\t\tbuf.append(\">\\n\");\n\t\tif (ROOT_ACTION.equals(n.getLocalName())) {\n\t\t    if (compiler.getCompilationContext().isTagFile()) {\n\t\t\tappendTagDirective();\n\t\t    } else {\n\t\t\tappendPageDirective();\n\t\t    }\n\t\t}\n\t\tif (body != null) {\n\t\t    body.visit(this);\n\t\t} else {\n\t\t    appendText(text, false);\n\t\t}\n\t\tbuf.append(\"</\" + n.getQName() + \">\\n\");\n\t    } else {\n\t\tbuf.append(\"/>\\n\");\n\t    }\n\t}\n\t/*\n\t * Appends the page directive with the given attributes to the XML\n\t * view.\n\t *\n\t * Since the import attribute of the page directive is the only page\n\t * attribute that is allowed to appear multiple times within the same\n\t * document, and since XML allows only single-value attributes,\n\t * the values of multiple import attributes must be combined into one,\n\t * separated by comma.\n\t *\n\t * If the given page directive contains just 'contentType' and/or\n\t * 'pageEncoding' attributes, we ignore it, as we've already appended\n\t * a page directive containing just these two attributes.\n\t */\n\tprivate void appendPageDirective(Node.PageDirective n) {\n\t    boolean append = false;\n\t    Attributes attrs = n.getAttributes();\n\t    int len = (attrs == null) ? 0 : attrs.getLength();\n\t    for (int i=0; i<len; i++) {\n\t\tString attrName = attrs.getQName(i);\n\t\tif (!\"pageEncoding\".equals(attrName)\n\t\t        && !\"contentType\".equals(attrName)) {\n\t\t    append = true;\n\t\t    break;\n\t\t}\n\t    }\n\t    if (!append) {\n\t\treturn;\n\t    }\n\t    buf.append(\"<\").append(n.getQName());\n\t    buf.append(\"\\n\");\n\t    // append jsp:id\n\t    buf.append(\"  \").append(jspIdPrefix).append(\":id\").append(\"=\\\"\");<fim_middle>// class below has no smell\n"}