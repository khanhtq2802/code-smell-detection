{"text": "<fim_prefix>            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:99:7: ( 'catch' )\n            // InternalTypesLexer.g:99:9: 'catch'\n            {\n            match(\"catch\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Catch\"\n    // $ANTLR start \"Class\"\n    public final void mClass() throws RecognitionException {\n        try {\n            int _type = Class;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:101:7: ( 'class' )\n            // InternalTypesLexer.g:101:9: 'class'\n            {\n            match(\"class\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Class\"\n    // $ANTLR start \"Const\"\n    public final void mConst() throws RecognitionException {\n        try {\n            int _type = Const;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:103:7: ( 'const' )\n            // InternalTypesLexer.g:103:9: 'const'\n            {\n            match(\"const\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Const\"\n    // $ANTLR start \"False\"\n    public final void mFalse() throws RecognitionException {\n        try {\n            int _type = False;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:105:7: ( 'false' )\n            // InternalTypesLexer.g:105:9: 'false'\n            {\n            match(\"false\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"False\"\n    // $ANTLR start \"Final\"\n    public final void mFinal() throws RecognitionException {\n        try {\n            int _type = Final;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:107:7: ( 'final' )\n            // InternalTypesLexer.g:107:9: 'final'\n            {\n            match(\"final\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Final\"\n    // $ANTLR start \"Super\"\n    public final void mSuper() throws RecognitionException {\n        try {\n            int _type = Super;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:109:7: ( 'super' )\n            // InternalTypesLexer.g:109:9: 'super'\n            {\n            match(\"super\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Super\"\n    // $ANTLR start \"Throw\"\n    public final void mThrow() throws RecognitionException {\n        try {\n            int _type = Throw;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:111:7: ( 'throw' )\n            // InternalTypesLexer.g:111:9: 'throw'\n            {\n            match(\"throw\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Throw\"\n    // $ANTLR start \"Union\"\n    public final void mUnion() throws RecognitionException {\n        try {\n            int _type = Union;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:113:7: ( 'union' )\n            // InternalTypesLexer.g:113:9: 'union'\n            {\n            match(\"union\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Union\"\n    // $ANTLR start \"While\"\n    public final void mWhile() throws RecognitionException {\n        try {\n            int _type = While;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:115:7: ( 'while' )\n            // InternalTypesLexer.g:115:9: 'while'\n            {\n            match(\"while\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"While\"\n    // $ANTLR start \"Yield\"\n    public final void mYield() throws RecognitionException {\n        try {\n            int _type = Yield;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:117:7: ( 'yield' )\n            // InternalTypesLexer.g:117:9: 'yield'\n            {\n            match(\"yield\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Yield\"\n    // $ANTLR start \"This\"\n    public final void mThis() throws RecognitionException {\n        try {\n            int _type = This;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:119:6: ( 'This' )\n            // InternalTypesLexer.g:119:8: 'This'\n            {\n            match(\"This\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"This\"\n    // $ANTLR start \"Case\"\n    public final void mCase() throws RecognitionException {\n        try {\n            int _type = Case;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:121:6: ( 'case' )\n            // InternalTypesLexer.g:121:8: 'case'\n            {\n            match(\"case\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Case\"\n    // $ANTLR start \"Else\"\n    public final void mElse() throws RecognitionException {\n        try {\n            int _type = Else;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:123:6: ( 'else' )\n            // InternalTypesLexer.g:123:8: 'else'\n            {\n            match(\"else\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Else\"\n    // $ANTLR start \"Enum\"\n    public final void mEnum() throws RecognitionException {\n        try {\n            int _type = Enum;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:125:6: ( 'enum' )\n            // InternalTypesLexer.g:125:8: 'enum'\n            {\n            match(\"enum\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Enum\"\n    // $ANTLR start \"From\"\n    public final void mFrom() throws RecognitionException {\n        try {\n            int _type = From;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:127:6: ( 'from' )\n            // InternalTypesLexer.g:127:8: 'from'\n            {\n            match(\"from\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"From\"\n    // $ANTLR start \"Null\"\n    public final void mNull() throws RecognitionException {\n        try {\n            int _type = Null;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:129:6: ( 'null' )\n            // InternalTypesLexer.g:129:8: 'null'\n            {\n            match(\"null\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Null\"\n    // $ANTLR start \"This_1\"\n<fim_suffix>    public final void mThis_1() throws RecognitionException {\n        try {\n            int _type = This_1;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:131:8: ( 'this' )\n            // InternalTypesLexer.g:131:10: 'this'\n            {\n            match(\"this\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }<fim_middle>// function below has no smell\n"}