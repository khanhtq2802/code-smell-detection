{"text": "<fim_prefix>        graph,\n        tags,\n        isStared,\n        provider);\n    Preconditions.checkNotNull(module, \"IE01271: Module argument can not be null\");\n    m_configuration.setModule(module);\n  }\n  public CView(final int viewId,\n      final INaviModule module,\n      final String name,\n      final String description,\n      final ViewType type,\n      final GraphType graphType,\n      final Date creationDate,\n      final Date modificationDate,\n      final int bbcount,\n      final int edgecount,\n      final Set<CTag> tags,\n      final Set<CTag> nodeTags,\n      final boolean isStared,\n      final SQLProvider provider) {\n    this(viewId,\n        name,\n        description,\n        type,\n        graphType,\n        creationDate,\n        modificationDate,\n        bbcount,\n        edgecount,\n        tags,\n        nodeTags,\n        isStared,\n        provider);\n    Preconditions.checkNotNull(module, \"IE01279: Module argument can not be null\");\n    m_configuration.setModule(module);\n  }\n  public CView(final int viewId,\n      final INaviProject project,\n      final String name,\n      final String description,\n      final ViewType type,\n      final Date creationDate,\n      final Date modificationDate,\n      final MutableDirectedGraph<INaviViewNode, INaviEdge> graph,\n      final Set<CTag> tags,\n      final boolean isStared,\n      final SQLProvider provider) {\n    this(viewId,\n        name,\n        description,\n        type,\n        creationDate,\n        modificationDate,\n        graph,\n        tags,\n        isStared,\n        provider);\n    Preconditions.checkNotNull(project, \"IE01280: Project argument can not be null\");\n    m_configuration.setProject(project);\n  }\n  public CView(final int viewId,\n      final INaviProject project,\n      final String name,\n      final String description,\n      final ViewType type,\n      final GraphType graphType,\n      final Date creationDate,\n      final Date modificationDate,\n      final int bbcount,\n      final int edgecount,\n      final Set<CTag> tags,\n      final Set<CTag> nodeTags,\n      final boolean isStared,\n      final SQLProvider provider) {\n    this(viewId,\n        name,\n        description,\n        type,\n        graphType,\n        creationDate,\n        modificationDate,\n        bbcount,\n        edgecount,\n        tags,\n        nodeTags,\n        isStared,\n        provider);\n    Preconditions.checkNotNull(project, \"IE01281: Project argument can not be null\");\n    m_configuration.setProject(project);\n  }\n  @Override\n  public void addListener(final INaviViewListener listener) {\n    m_listeners.addListener(listener);\n  }\n  @Override\n  public boolean close() {\n    if (!isLoaded()) {\n      throw new IllegalStateException(\"IE00284: View is not loaded\");\n    }\n    for (final INaviViewListener listener : m_listeners) {\n      try {\n        if (!listener.closingView(this)) {\n          return false;\n        }\n      } catch (final Exception exception) {\n        CUtilityFunctions.logException(exception);\n      }\n    }\n    final IDirectedGraph<INaviViewNode, INaviEdge> oldGraph = m_content.getGraph();\n    for (final INaviViewNode node : oldGraph) {\n      node.close();\n    }\n    for (final INaviEdge edge : oldGraph.getEdges()) {\n      edge.dispose();\n    }\n    m_nodeTags.clear();\n    m_nodeTags.addAll(m_content.getNodeTags());\n    m_content = null;\n    for (final INaviViewListener listener : m_listeners) {\n      try {\n        listener.closedView(this, oldGraph);\n      } catch (final Exception exception) {\n        CUtilityFunctions.logException(exception);\n      }\n    }\n    return true;\n  }\n  @Override\n  public List<? extends ICodeEdge<?>> getBasicBlockEdges() {\n    return m_content.getBasicBlockEdges();\n  }\n  @Override\n  public List<CCodeNode> getBasicBlocks() {\n    return m_content.getBasicBlocks();\n  }\n  @Override\n  public CViewConfiguration getConfiguration() {\n    return m_configuration;\n  }\n  @Override\n  public IViewContent getContent() {\n    Preconditions.checkNotNull(m_content, \"IE00465: View is not loaded\");\n    return m_content;\n  }\n  @Override\n  public List<INaviView> getDerivedViews() throws CouldntLoadDataException {\n    return m_provider.getDerivedViews(this);\n  }\n  @Override\n  public int getEdgeCount() {\n    return isLoaded() ? m_content.getEdgeCount() : m_edgecount;\n  }\n  @Override\n  public MutableDirectedGraph<INaviViewNode, INaviEdge> getGraph() {\n    if (!isLoaded()) {\n      throw new IllegalStateException(\"IE02199: View is not loaded\");\n    }\n    return m_content.getGraph();\n  }\n  @Override\n  public GraphType getGraphType() {\n    return isLoaded() ? m_content.getGraphType() : m_lastGraphType;\n  }\n  @Override\n  public int getLoadState() {\n    return m_loadReporter.getStep();\n  }\n  @Override\n  public String getName() {\n    return m_configuration.getName();\n  }\n  @Override\n  public int getNodeCount() {\n    return isLoaded() ? m_content.getNodeCount() : m_bbcount;\n  }\n  @Override\n  public Set<CTag> getNodeTags() {\n    return isLoaded() ? m_content.getNodeTags() : new HashSet<CTag>(m_nodeTags);\n  }\n  @Override\n  public ViewType getType() {\n    return m_configuration.getType();\n  }\n  @Override\n  public boolean inSameDatabase(final IDatabaseObject object) {\n    Preconditions.checkNotNull(object, \"IE00313: Object argument can not be null\");\n    return object.inSameDatabase(m_provider);\n  }\n  @Override\n  public boolean inSameDatabase(final SQLProvider provider) {\n    return m_provider.equals(provider);\n  }\n  @Override\n  public boolean isLoaded() {\n    return m_content != null;\n  }\n  @Override\n  public boolean isStared() {\n    return m_configuration.isStared();\n  }\n  @Override\n  public void load() throws CouldntLoadDataException, CPartialLoadException,\n      LoadCancelledException {\n    synchronized (m_loadReporter) {\n      if (isLoaded()) {\n        throw new IllegalStateException(\"IE01110: View is already loaded\");\n      }\n      m_loadReporter.start();\n      if (!m_loadReporter.report(ViewLoadEvents.Started)) {\n        throw new LoadCancelledException();\n      }\n      try {\n        final MutableDirectedGraph<INaviViewNode, INaviEdge> graph =\n            m_configuration.isStored() ? m_provider.loadView(this)\n                : new MutableDirectedGraph<INaviViewNode, INaviEdge>(new ArrayList<INaviViewNode>(),\n                    new ArrayList<INaviEdge>());\n        m_content = new CViewContent(this, m_listeners, m_provider, graph);\n        if (!m_loadReporter.report(ViewLoadEvents.Finished)) {\n          throw new LoadCancelledException();\n        }\n        // In the case of a native view the stored color in a basic block is black per default.\n        // To change the color of the view to the configured default we need to walk each of the\n        // nodes and change the colors according to the configuration. This is not necessary in the\n        // case of a non-native view as the color has been saved in the database.\n        if (this.getType().equals(ViewType.Native)) {\n          colorNodes();\n        }\n        // In the case of a flow graph we want to color loops in the graph.\n        if (getContent().getGraphType().equals(GraphType.FLOWGRAPH)) {\n          colorLoops();\n        }\n        colorEdges();\n        // Set the modification state to false to not dirty flag a just loaded view.\n        ((CViewContent) getContent()).setModified(false);\n        for (final INaviViewListener listener : m_listeners) {\n          try {\n            listener.loadedView(this);\n          } catch (final IllegalArgumentException exception) {\n            CUtilityFunctions.logException(exception);\n          }\n        }\n      } finally {\n        m_loadReporter.stop();\n      }\n    }\n  }\n  /**\n   * Colors the loops in the view. This can fail if the view has no function it belongs to or if the\n   * graph is malformed.\n   */\n<fim_suffix>  private void colorLoops() {\n    try {\n      for (final INaviViewNode currentNode : getGraph().getNodes()) {\n        if (currentNode.getParents().isEmpty()) {\n          CLoopHighlighter.colorLoops(getGraph(), currentNode);\n          break;\n        }\n      }\n    } catch (final MalformedGraphException exception) {\n      NaviLogger.warning(\"Error: Graph is malformed, can not color loops\");\n    }\n  }<fim_middle>// function below has no smell\n"}