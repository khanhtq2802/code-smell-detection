{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.wicket.util.tester;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport org.apache.wicket.Component;\nimport org.apache.wicket.WicketRuntimeException;\nimport org.apache.wicket.ajax.markup.html.form.AjaxButton;\nimport org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\nimport org.apache.wicket.markup.html.form.AbstractSingleSelectChoice;\nimport org.apache.wicket.markup.html.form.AbstractTextComponent;\nimport org.apache.wicket.markup.html.form.Check;\nimport org.apache.wicket.markup.html.form.CheckGroup;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.form.FormComponent;\nimport org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior;\nimport org.apache.wicket.markup.html.form.IChoiceRenderer;\nimport org.apache.wicket.markup.html.form.IFormSubmittingComponent;\nimport org.apache.wicket.markup.html.form.ListMultipleChoice;\nimport org.apache.wicket.markup.html.form.Radio;\nimport org.apache.wicket.markup.html.form.RadioGroup;\nimport org.apache.wicket.markup.html.form.upload.FileUploadField;\nimport org.apache.wicket.markup.html.form.upload.MultiFileUploadField;\nimport org.apache.wicket.protocol.http.mock.MockHttpServletRequest;\nimport org.apache.wicket.util.file.File;\nimport org.apache.wicket.util.lang.Args;\nimport org.apache.wicket.util.string.StringValue;\nimport org.apache.wicket.util.string.Strings;\nimport org.apache.wicket.util.visit.IVisit;\nimport org.apache.wicket.util.visit.IVisitor;\n/**\n * A helper class for testing validation and submission of <code>FormComponent</code>s.\n * \n * @author Ingram Chen\n * @author Frank Bille (frankbille)\n * @since 1.2.6\n */\npublic class FormTester\n{\n\t/**\n\t * An auto incrementing index used as a suffix for MultiFileUploadField's inputName\n\t */\n\tprivate int multiFileUploadIndex = 0;\n\t/**\n\t * A selector template for selecting selectable <code>FormComponent</code>s with an index of\n\t * option -- supports <code>RadioGroup</code>, <code>CheckGroup</code>, and\n\t * <code>AbstractChoice</code> family.\n\t */\n\tprotected abstract class ChoiceSelector\n\t{\n\t\t/**\n\t\t * TODO need Javadoc from author.\n\t\t */\n\t\tprivate final class SearchOptionByIndexVisitor implements IVisitor<Component, Component>\n\t\t{\n\t\t\tint count = 0;\n\t\t\tprivate final int index;\n\t\t\tprivate SearchOptionByIndexVisitor(int index)\n\t\t\t{\n\t\t\t\tsuper();\n\t\t\t\tthis.index = index;\n\t\t\t}\n\t\t\t/**\n\t\t\t * @see org.apache.wicket.util.visit.IVisitor#component(Object,\n\t\t\t *      org.apache.wicket.util.visit.IVisit)\n\t\t\t */\n\t\t\t@Override\n\t\t\tpublic void component(final Component component, final IVisit<Component> visit)\n\t\t\t{\n\t\t\t\tif (count == index)\n\t\t\t\t{\n\t\t\t\t\tvisit.stop(component);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprivate final FormComponent<?> formComponent;\n\t\t/**\n\t\t * Constructor.\n\t\t *\n\t\t * @param formComponent\n\t\t *            a <code>FormComponent</code>\n\t\t */\n\t\tprotected ChoiceSelector(FormComponent<?> formComponent)\n\t\t{\n\t\t\tthis.formComponent = formComponent;\n\t\t}\n\t\t/**\n\t\t * Implements whether toggle or accumulate the selection.\n\t\t *\n\t\t * @param formComponent\n\t\t *            a <code>FormComponent</code>\n\t\t * @param value\n\t\t *            a <code>String</code> value\n\t\t */\n\t\tprotected abstract void assignValueToFormComponent(FormComponent<?> formComponent,\n\t\t\tString value);\n\t\tpublic String getChoiceValueForIndex(int index)\n\t\t{\n\t\t\tif (formComponent instanceof RadioGroup)\n\t\t\t{\n\t\t\t\tRadio<?> foundRadio = (Radio<?>)formComponent.visitChildren(Radio.class,\n\t\t\t\t\tnew SearchOptionByIndexVisitor(index));\n\t\t\t\tif (foundRadio == null)\n\t\t\t\t{\n\t\t\t\t\tfail(\"RadioGroup \" + formComponent.getPath() + \" does not have index:\" + index);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn foundRadio.getValue();\n\t\t\t}\n\t\t\telse if (formComponent instanceof CheckGroup)\n\t\t\t{\n\t\t\t\tCheck<?> foundCheck = (Check<?>)formComponent.visitChildren(Check.class,\n\t\t\t\t\tnew SearchOptionByIndexVisitor(index));\n\t\t\t\tif (foundCheck == null)\n\t\t\t\t{\n\t\t\t\t\tfail(\"CheckGroup \" + formComponent.getPath() + \" does not have index:\" + index);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn foundCheck.getValue();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tString idValue = selectAbstractChoice(formComponent, index);\n\t\t\t\tif (idValue == null)\n\t\t\t\t{\n\t\t\t\t\tfail(formComponent.getPath() + \" is not a selectable Component.\");\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn idValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Selects a given index in a selectable <code>FormComponent</code>.\n\t\t *\n\t\t * @param index\n\t\t */\n<fim_suffix>\t\tprotected final void doSelect(final int index)\n\t\t{\n\t\t\tString value = getChoiceValueForIndex(index);\n\t\t\tassignValueToFormComponent(formComponent, value);\n\t\t}\n\t\t/**\n\t\t * Selects a given index in a selectable <code>FormComponent</code>.\n\t\t *\n\t\t * @param formComponent\n\t\t *            a <code>FormComponent</code>\n\t\t * @param index\n\t\t *            the index to select\n\t\t * @return the id value at the selected index\n\t\t */\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tprivate String selectAbstractChoice(final FormComponent<?> formComponent, final int index)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tMethod getChoicesMethod = formComponent.getClass().getMethod(\"getChoices\",\n\t\t\t\t\t(Class<?>[])null);\n\t\t\t\tgetChoicesMethod.setAccessible(true);\n\t\t\t\tList<Object> choices = (List<Object>)getChoicesMethod.invoke(formComponent,\n\t\t\t\t\t(Object[])null);\n\t\t\t\tMethod getChoiceRendererMethod = formComponent.getClass().getMethod(\n\t\t\t\t\t\"getChoiceRenderer\", (Class<?>[])null);\n\t\t\t\tgetChoiceRendererMethod.setAccessible(true);\n\t\t\t\tIChoiceRenderer<Object> choiceRenderer = (IChoiceRenderer<Object>)getChoiceRendererMethod.invoke(\n\t\t\t\t\tformComponent, (Object[])null);\n\t\t\t\treturn choiceRenderer.getIdValue(choices.get(index), index);\n\t\t\t}\n\t\t\tcatch (SecurityException e)\n\t\t\t{\n\t\t\t\tthrow new WicketRuntimeException(\"unexpect select failure\", e);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException e)\n\t\t\t{\n\t\t\t\t// component without getChoices() or getChoiceRenderer() is not\n\t\t\t\t// selectable\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tcatch (IllegalAccessException e)\n\t\t\t{\n\t\t\t\tthrow new WicketRuntimeException(\"unexpect select failure\", e);\n\t\t\t}\n\t\t\tcatch (InvocationTargetException e)\n\t\t\t{\n\t\t\t\tthrow new WicketRuntimeException(\"unexpect select failure\", e);\n\t\t\t}\n\t\t}<fim_middle>// function below has no smell\n"}