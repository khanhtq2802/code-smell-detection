{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.accumulo.server.util;\n\nimport java.util.ArrayList;\nimport java.util.Map.Entry;\nimport java.util.TreeSet;\n\nimport org.apache.accumulo.core.client.Scanner;\nimport org.apache.accumulo.core.conf.SiteConfiguration;\nimport org.apache.accumulo.core.data.Key;\nimport org.apache.accumulo.core.data.Value;\nimport org.apache.accumulo.core.metadata.MetadataTable;\nimport org.apache.accumulo.core.metadata.RootTable;\nimport org.apache.accumulo.core.metadata.schema.MetadataSchema;\nimport org.apache.accumulo.core.security.Authorizations;\nimport org.apache.accumulo.core.tabletserver.log.LogEntry;\nimport org.apache.accumulo.server.ServerContext;\nimport org.apache.accumulo.server.fs.VolumeManager.FileType;\nimport org.apache.accumulo.server.log.WalStateManager;\nimport org.apache.hadoop.fs.Path;\n\npublic class ListVolumesUsed {\n\n  public static void main(String[] args) throws Exception {\n    listVolumes(new ServerContext(new SiteConfiguration()));\n  }\n\n  private static String getTableURI(String rootTabletDir) {\n    Path ret = FileType.TABLE.getVolume(new Path(rootTabletDir));\n    if (ret == null)\n      return \"RELATIVE\";\n    return ret.toString();\n  }\n\n  private static String getLogURI(String logEntry) {\n    Path ret = FileType.WAL.getVolume(new Path(logEntry));\n    if (ret == null)\n      return \"RELATIVE\";\n    return ret.toString();\n  }\n\n  private static void getLogURIs(TreeSet<String> volumes, LogEntry logEntry) {\n    volumes.add(getLogURI(logEntry.filename));\n  }\n\n<fim_suffix>  private static void listZookeeper(ServerContext context) throws Exception {\n    System.out.println(\"Listing volumes referenced in zookeeper\");\n    TreeSet<String> volumes = new TreeSet<>();\n\n    volumes.add(getTableURI(MetadataTableUtil.getRootTabletDir(context)));\n    ArrayList<LogEntry> result = new ArrayList<>();\n    MetadataTableUtil.getRootLogEntries(context, result);\n    for (LogEntry logEntry : result) {\n      getLogURIs(volumes, logEntry);\n    }\n\n    for (String volume : volumes)\n      System.out.println(\"\\tVolume : \" + volume);\n\n  }\n\n  private static void listTable(String name, ServerContext context) throws Exception {\n\n    System.out.println(\"Listing volumes referenced in \" + name + \" tablets section\");\n\n    Scanner scanner = context.createScanner(name, Authorizations.EMPTY);\n\n    scanner.setRange(MetadataSchema.TabletsSection.getRange());\n    scanner.fetchColumnFamily(MetadataSchema.TabletsSection.DataFileColumnFamily.NAME);\n    scanner.fetchColumnFamily(MetadataSchema.TabletsSection.LogColumnFamily.NAME);\n    MetadataSchema.TabletsSection.ServerColumnFamily.DIRECTORY_COLUMN.fetch(scanner);\n\n    TreeSet<String> volumes = new TreeSet<>();\n\n    for (Entry<Key,Value> entry : scanner) {\n      if (entry.getKey().getColumnFamily()\n          .equals(MetadataSchema.TabletsSection.DataFileColumnFamily.NAME)) {\n        volumes.add(getTableURI(entry.getKey().getColumnQualifier().toString()));\n      } else if (entry.getKey().getColumnFamily()\n          .equals(MetadataSchema.TabletsSection.LogColumnFamily.NAME)) {\n        LogEntry le = LogEntry.fromKeyValue(entry.getKey(), entry.getValue());\n        getLogURIs(volumes, le);\n      } else if (MetadataSchema.TabletsSection.ServerColumnFamily.DIRECTORY_COLUMN\n          .hasColumns(entry.getKey())) {\n        volumes.add(getTableURI(entry.getValue().toString()));\n      }\n    }\n\n    for (String volume : volumes)\n      System.out.println(\"\\tVolume : \" + volume);\n\n    volumes.clear();\n\n    scanner.clearColumns();\n    scanner.setRange(MetadataSchema.DeletesSection.getRange());\n\n    for (Entry<Key,Value> entry : scanner) {\n      String delPath = entry.getKey().getRow().toString()\n          .substring(MetadataSchema.DeletesSection.getRowPrefix().length());\n      volumes.add(getTableURI(delPath));\n    }\n\n    System.out.println(\"Listing volumes referenced in \" + name\n        + \" deletes section (volume replacement occurrs at deletion time)\");\n\n    for (String volume : volumes)\n      System.out.println(\"\\tVolume : \" + volume);\n\n    volumes.clear();\n\n    WalStateManager wals = new WalStateManager(context);\n    for (Path path : wals.getAllState().keySet()) {\n      volumes.add(getLogURI(path.toString()));\n    }\n\n    System.out.println(\"Listing volumes referenced in \" + name + \" current logs\");\n\n    for (String volume : volumes)\n      System.out.println(\"\\tVolume : \" + volume);\n  }\n\n  public static void listVolumes(ServerContext context) throws Exception {\n    listZookeeper(context);\n    System.out.println();\n    listTable(RootTable.NAME, context);\n    System.out.println();\n    listTable(MetadataTable.NAME, context);\n  }\n\n}<fim_middle>// function below is feature envy\n"}