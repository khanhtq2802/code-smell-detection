{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2004 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *  Actuate Corporation  - initial API and implementation\n *******************************************************************************/\n\npackage org.eclipse.birt.doc.schema;\n\nimport java.io.FileNotFoundException;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.eclipse.birt.doc.util.HTMLParser;\nimport org.eclipse.birt.doc.util.HtmlDocReader;\n\n/**\n * Parser css html document.\n *\n */\n\npublic class CSSDocParser  extends HtmlDocReader\n{\n\t/**\n\t * css map, key is css property name , value is css property value.\n\t */\n\t\n\tprotected Map cssMap = new HashMap();\n\n\tString templateDir = \"romdoc/docs/css/CssProperty.html\"; //$NON-NLS-1$\n\n\t/**\n\t * Parser css property html.\n\t * @throws ParseException\n\t */\n\t\n<fim_suffix>\tpublic void parse(  ) throws ParseException\n\t{\n\t\ttry\n\t\t{\n\t\t\tparser.open( templateDir );\n\t\t}\n\t\tcatch ( FileNotFoundException e )\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tparseElement( );\n\t}\n\n\t/**\n\t * Parser element.\n\t * format is :\n\t * <tr>\n\t * <td>name\n\t * <td>values\n\t * \n\t * @throws ParseException\n\t * \n\t */\n\tprivate void parseElement( ) throws ParseException\n\t{\n\t\tskipTo( \"table\" );//$NON-NLS-1$\n\n\t\tfor ( ;; )\n\t\t{\n\t\t\tint token = getToken( );\n\t\t\tif ( token == HTMLParser.EOF )\n\t\t\t\treturn;\n\t\t\t\n\t\t\tif( isElement( token , \"/table\" ))//$NON-NLS-1$\n\t\t\t\treturn;\n\t\t\tassert ( isElement( token, \"tr\" )  );//$NON-NLS-1$\n\t\t\t\n\t\t\ttoken = getToken( );\n\t\t\tassert( isElement( token, \"td\"));//$NON-NLS-1$\n\t\t\t\n\t\t\ttoken = getToken();\n\t\t\tassert( token == HTMLParser.TEXT );\n\t\t\tString name = parser.getTokenText( ).trim( );\n\t\t\t\n\t\t\ttoken = getToken();\n\t\t\tassert( isElement( token , \"td\"));//$NON-NLS-1$\n\t\t\t\n\t\t\ttoken = getToken();\n\t\t\tassert( token == HTMLParser.TEXT );\n\t\t\tString values = parser.getTokenText( ).trim( );\n\t\t\t\n\t\t\t//parser template name, the seperate is ','.\n\t\t\t\n\t\t\tif( name.indexOf(  \",\" ) == -1 )//$NON-NLS-1$\n\t\t\t{\n\t\t\t\tcssMap.put(  name , values );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tString[] nameList = name.split( \",\" );//$NON-NLS-1$\n\t\t\tfor( int i=0; i<nameList.length ; ++i)\n\t\t\t{\n\t\t\t\tString subName = nameList[i].trim( );\n\t\t\t\tcssMap.put( subName , values );\n\t\t\t}\n\t\t}\n\t}\n\t\n\tstatic class ParseException extends Exception\n\t{\n\n\t\t/**\n\t\t * UID\n\t\t */\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\t/**\n\t\t * Constructor\n\t\t * @param msg exception message\n\t\t */\n\t\tpublic ParseException( String msg )\n\t\t{\n\t\t\tsuper( msg );\n\t\t}\n\t}\n\n}<fim_middle>// function below has no smell\n"}