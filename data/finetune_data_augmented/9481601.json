{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.yarn.service.impl.pb.client;\n\nimport com.google.protobuf.ServiceException;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.ipc.ProtobufRpcEngine;\nimport org.apache.hadoop.ipc.RPC;\nimport org.apache.hadoop.yarn.exceptions.YarnException;\nimport org.apache.hadoop.yarn.ipc.RPCUtil;\nimport org.apache.hadoop.yarn.service.ClientAMProtocol;\n\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\n\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.CancelUpgradeRequestProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.CancelUpgradeResponseProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.CompInstancesUpgradeResponseProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.CompInstancesUpgradeRequestProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.DecommissionCompInstancesRequestProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.DecommissionCompInstancesResponseProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.FlexComponentsRequestProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.FlexComponentsResponseProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.GetCompInstancesRequestProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.GetCompInstancesResponseProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.GetStatusRequestProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.GetStatusResponseProto;\nimport org.apache.hadoop.yarn.service.impl.pb.service.ClientAMProtocolPB;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.RestartServiceRequestProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.RestartServiceResponseProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.StopResponseProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.StopRequestProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.UpgradeServiceRequestProto;\nimport org.apache.hadoop.yarn.proto.ClientAMProtocol.UpgradeServiceResponseProto;\n\npublic class ClientAMProtocolPBClientImpl\n    implements ClientAMProtocol, Closeable {\n\n  private ClientAMProtocolPB proxy;\n\n  public ClientAMProtocolPBClientImpl(long clientVersion,\n      InetSocketAddress addr, Configuration conf) throws IOException {\n    RPC.setProtocolEngine(conf, ClientAMProtocolPB.class,\n        ProtobufRpcEngine.class);\n    proxy = RPC.getProxy(ClientAMProtocolPB.class, clientVersion, addr, conf);\n\n  }\n\n  @Override public FlexComponentsResponseProto flexComponents(\n      FlexComponentsRequestProto request) throws IOException, YarnException {\n    try {\n      return proxy.flexComponents(null, request);\n    } catch (ServiceException e) {\n      RPCUtil.unwrapAndThrowException(e);\n    }\n    return null;\n  }\n\n  @Override\n  public GetStatusResponseProto getStatus(GetStatusRequestProto request)\n      throws IOException, YarnException {\n    try {\n      return proxy.getStatus(null, request);\n    } catch (ServiceException e) {\n      RPCUtil.unwrapAndThrowException(e);\n    }\n    return null;\n  }\n\n  @Override\n  public StopResponseProto stop(StopRequestProto requestProto)\n      throws IOException, YarnException {\n    try {\n      return proxy.stop(null, requestProto);\n    } catch (ServiceException e) {\n      RPCUtil.unwrapAndThrowException(e);\n    }\n    return null;\n  }\n\n  @Override public void close() {\n    if (this.proxy != null) {\n      RPC.stopProxy(this.proxy);\n    }\n  }\n\n  @Override\n  public UpgradeServiceResponseProto upgrade(\n      UpgradeServiceRequestProto request) throws IOException, YarnException {\n    try {\n      return proxy.upgradeService(null, request);\n    } catch (ServiceException e) {\n      RPCUtil.unwrapAndThrowException(e);\n    }\n    return null;\n  }\n\n  @Override\n  public RestartServiceResponseProto restart(RestartServiceRequestProto request)\n      throws IOException, YarnException {\n    try {\n      return proxy.restartService(null, request);\n    } catch (ServiceException e) {\n      RPCUtil.unwrapAndThrowException(e);\n    }\n    return null;\n  }\n\n  @Override\n  public CompInstancesUpgradeResponseProto upgrade(\n      CompInstancesUpgradeRequestProto request)\n      throws IOException, YarnException {\n    try {\n      return proxy.upgrade(null, request);\n    } catch (ServiceException e) {\n      RPCUtil.unwrapAndThrowException(e);\n    }\n    return null;\n  }\n\n<fim_suffix>  @Override\n  public GetCompInstancesResponseProto getCompInstances(\n      GetCompInstancesRequestProto request) throws IOException, YarnException {\n    try {\n      return proxy.getCompInstances(null, request);\n    } catch (ServiceException e) {\n      RPCUtil.unwrapAndThrowException(e);\n    }\n    return null;\n  }\n\n  @Override\n  public CancelUpgradeResponseProto cancelUpgrade(\n      CancelUpgradeRequestProto request) throws IOException, YarnException {\n    try {\n      return proxy.cancelUpgrade(null, request);\n    } catch (ServiceException e) {\n      RPCUtil.unwrapAndThrowException(e);\n    }\n    return null;\n  }\n\n  @Override\n  public DecommissionCompInstancesResponseProto decommissionCompInstances(\n      DecommissionCompInstancesRequestProto request)\n      throws IOException, YarnException {\n    try {\n      return proxy.decommissionCompInstances(null, request);\n    } catch (ServiceException e) {\n      RPCUtil.unwrapAndThrowException(e);\n    }\n    return null;\n  }\n}<fim_middle>// function below has no smell\n"}