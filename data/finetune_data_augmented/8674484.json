{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache.distributed.dht.atomic;\n\nimport java.nio.ByteBuffer;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport org.apache.ignite.IgniteCheckedException;\nimport org.apache.ignite.internal.GridDirectCollection;\nimport org.apache.ignite.internal.GridDirectTransient;\nimport org.apache.ignite.internal.processors.cache.GridCacheContext;\nimport org.apache.ignite.internal.processors.cache.GridCacheMessage;\nimport org.apache.ignite.internal.processors.cache.KeyCacheObject;\nimport org.apache.ignite.internal.util.tostring.GridToStringInclude;\nimport org.apache.ignite.internal.util.typedef.internal.S;\nimport org.apache.ignite.internal.util.typedef.internal.U;\nimport org.apache.ignite.plugin.extensions.communication.Message;\nimport org.apache.ignite.plugin.extensions.communication.MessageCollectionItemType;\nimport org.apache.ignite.plugin.extensions.communication.MessageReader;\nimport org.apache.ignite.plugin.extensions.communication.MessageWriter;\n\n/**\n *\n */\n<fim_suffix>public class UpdateErrors implements Message {\n    /** */\n    private static final long serialVersionUID = 0L;\n\n    /** Failed keys. */\n    @GridToStringInclude\n    @GridDirectCollection(KeyCacheObject.class)\n    private List<KeyCacheObject> failedKeys;\n\n    /** Update error. */\n    @GridDirectTransient\n    @GridToStringInclude\n    private IgniteCheckedException err;\n\n    /** Serialized update error. */\n    private byte[] errBytes;\n\n    /**\n     *\n     */\n    public UpdateErrors() {\n        // No-op.\n    }\n\n    /**\n     * @param err Error.\n     */\n    public UpdateErrors(IgniteCheckedException err) {\n        assert err != null;\n\n        this.err = err;\n    }\n\n    /**\n     * @param err Error.\n     */\n    public void onError(IgniteCheckedException err){\n        this.err = err;\n    }\n\n    /**\n     * @return Error.\n     */\n    public IgniteCheckedException error() {\n        return err;\n    }\n\n    /**\n     * @return Failed keys.\n     */\n    public Collection<KeyCacheObject> failedKeys() {\n        return failedKeys;\n    }\n\n    /**\n     * Adds key to collection of failed keys.\n     *\n     * @param key Key to add.\n     * @param e Error cause.\n     */\n    void addFailedKey(KeyCacheObject key, Throwable e) {\n        if (failedKeys == null)\n            failedKeys = new ArrayList<>();\n\n        failedKeys.add(key);\n\n        if (err == null)\n            err = new IgniteCheckedException(\"Failed to update keys.\");\n\n        err.addSuppressed(e);\n    }\n\n    /**\n     * @param keys Keys.\n     * @param e Error.\n     */\n    void addFailedKeys(Collection<KeyCacheObject> keys, Throwable e) {\n        if (failedKeys == null)\n            failedKeys = new ArrayList<>(keys.size());\n\n        failedKeys.addAll(keys);\n\n        if (err == null)\n            err = new IgniteCheckedException(\"Failed to update keys on primary node.\");\n\n        err.addSuppressed(e);\n    }\n\n    /** {@inheritDoc} */\n    void prepareMarshal(GridCacheMessage msg, GridCacheContext cctx) throws IgniteCheckedException {\n        msg.prepareMarshalCacheObjects(failedKeys, cctx);\n\n        if (errBytes == null)\n            errBytes = U.marshal(cctx.marshaller(), err);\n    }\n\n    /** {@inheritDoc} */\n    void finishUnmarshal(GridCacheMessage msg, GridCacheContext cctx, ClassLoader ldr) throws IgniteCheckedException {\n        msg.finishUnmarshalCacheObjects(failedKeys, cctx, ldr);\n\n        if (errBytes != null && err == null)\n            err = U.unmarshal(cctx.marshaller(), errBytes, U.resolveClassLoader(ldr, cctx.gridConfig()));\n    }\n\n    /** {@inheritDoc} */\n    @Override public boolean writeTo(ByteBuffer buf, MessageWriter writer) {\n        writer.setBuffer(buf);\n\n        if (!writer.isHeaderWritten()) {\n            if (!writer.writeHeader(directType(), fieldsCount()))\n                return false;\n\n            writer.onHeaderWritten();\n        }\n\n        switch (writer.state()) {\n            case 0:\n                if (!writer.writeByteArray(\"errBytes\", errBytes))\n                    return false;\n\n                writer.incrementState();\n\n            case 1:\n                if (!writer.writeCollection(\"failedKeys\", failedKeys, MessageCollectionItemType.MSG))\n                    return false;\n\n                writer.incrementState();\n\n        }\n\n        return true;\n    }\n\n    /** {@inheritDoc} */\n    @Override public boolean readFrom(ByteBuffer buf, MessageReader reader) {\n        reader.setBuffer(buf);\n\n        if (!reader.beforeMessageRead())\n            return false;\n\n        switch (reader.state()) {\n            case 0:\n                errBytes = reader.readByteArray(\"errBytes\");\n\n                if (!reader.isLastRead())\n                    return false;\n\n                reader.incrementState();\n\n            case 1:\n                failedKeys = reader.readCollection(\"failedKeys\", MessageCollectionItemType.MSG);\n\n                if (!reader.isLastRead())\n                    return false;\n\n                reader.incrementState();\n\n        }\n\n        return reader.afterMessageRead(UpdateErrors.class);\n    }\n\n    /** {@inheritDoc} */\n    @Override public short directType() {\n        return -49;\n    }\n\n    /** {@inheritDoc} */\n    @Override public byte fieldsCount() {\n        return 2;\n    }\n\n    /** {@inheritDoc} */\n    @Override public void onAckReceived() {\n        // No-op.\n    }\n\n    /** {@inheritDoc} */\n    @Override public String toString() {\n        return S.toString(UpdateErrors.class, this);\n    }\n}<fim_middle>// class below has no smell\n"}