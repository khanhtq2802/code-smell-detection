{"text": "<fim_prefix>            node.setAttributeDelegate(new ValueLoggingDelegate());\n            getNodeManager().addNode(node);\n            scalarTypesFolder.addOrganizes(node);\n        }\n    }\n    private void addWriteOnlyNodes(UaFolderNode rootNode) {\n        UaFolderNode writeOnlyFolder = new UaFolderNode(\n            getNodeContext(),\n            newNodeId(\"HelloWorld/WriteOnly\"),\n            newQualifiedName(\"WriteOnly\"),\n            LocalizedText.english(\"WriteOnly\")\n        );\n        getNodeManager().addNode(writeOnlyFolder);\n        rootNode.addOrganizes(writeOnlyFolder);\n        String name = \"String\";\n        UaVariableNode node = new UaVariableNode.UaVariableNodeBuilder(getNodeContext())\n            .setNodeId(newNodeId(\"HelloWorld/WriteOnly/\" + name))\n            .setAccessLevel(ubyte(AccessLevel.getMask(AccessLevel.WRITE_ONLY)))\n            .setUserAccessLevel(ubyte(AccessLevel.getMask(AccessLevel.WRITE_ONLY)))\n            .setBrowseName(newQualifiedName(name))\n            .setDisplayName(LocalizedText.english(name))\n            .setDataType(Identifiers.String)\n            .setTypeDefinition(Identifiers.BaseDataVariableType)\n            .build();\n        node.setValue(new DataValue(new Variant(\"can't read this\")));\n        getNodeManager().addNode(node);\n        writeOnlyFolder.addOrganizes(node);\n    }\n    private void addAdminReadableNodes(UaFolderNode rootNode) {\n        UaFolderNode adminFolder = new UaFolderNode(\n            getNodeContext(),\n            newNodeId(\"HelloWorld/OnlyAdminCanRead\"),\n            newQualifiedName(\"OnlyAdminCanRead\"),\n            LocalizedText.english(\"OnlyAdminCanRead\")\n        );\n        getNodeManager().addNode(adminFolder);\n        rootNode.addOrganizes(adminFolder);\n        String name = \"String\";\n        UaVariableNode node = new UaVariableNode.UaVariableNodeBuilder(getNodeContext())\n            .setNodeId(newNodeId(\"HelloWorld/OnlyAdminCanRead/\" + name))\n            .setAccessLevel(ubyte(AccessLevel.getMask(AccessLevel.READ_WRITE)))\n            .setBrowseName(newQualifiedName(name))\n            .setDisplayName(LocalizedText.english(name))\n            .setDataType(Identifiers.String)\n            .setTypeDefinition(Identifiers.BaseDataVariableType)\n            .build();\n        node.setValue(new DataValue(new Variant(\"shh... don't tell the lusers\")));\n        node.setAttributeDelegate(new RestrictedAccessDelegate(identity -> {\n            if (\"admin\".equals(identity)) {\n                return AccessLevel.READ_WRITE;\n            } else {\n                return AccessLevel.NONE;\n            }\n        }));\n        getNodeManager().addNode(node);\n        adminFolder.addOrganizes(node);\n    }\n    private void addAdminWritableNodes(UaFolderNode rootNode) {\n        UaFolderNode adminFolder = new UaFolderNode(\n            getNodeContext(),\n            newNodeId(\"HelloWorld/OnlyAdminCanWrite\"),\n            newQualifiedName(\"OnlyAdminCanWrite\"),\n            LocalizedText.english(\"OnlyAdminCanWrite\")\n        );\n        getNodeManager().addNode(adminFolder);\n        rootNode.addOrganizes(adminFolder);\n        String name = \"String\";\n        UaVariableNode node = new UaVariableNode.UaVariableNodeBuilder(getNodeContext())\n            .setNodeId(newNodeId(\"HelloWorld/OnlyAdminCanWrite/\" + name))\n            .setAccessLevel(ubyte(AccessLevel.getMask(AccessLevel.READ_WRITE)))\n            .setBrowseName(newQualifiedName(name))\n            .setDisplayName(LocalizedText.english(name))\n            .setDataType(Identifiers.String)\n            .setTypeDefinition(Identifiers.BaseDataVariableType)\n            .build();\n        node.setValue(new DataValue(new Variant(\"admin was here\")));\n        node.setAttributeDelegate(new RestrictedAccessDelegate(identity -> {\n            if (\"admin\".equals(identity)) {\n                return AccessLevel.READ_WRITE;\n            } else {\n                return AccessLevel.READ_ONLY;\n            }\n        }));\n        getNodeManager().addNode(node);\n        adminFolder.addOrganizes(node);\n    }\n    private void addDynamicNodes(UaFolderNode rootNode) {\n        UaFolderNode dynamicFolder = new UaFolderNode(\n            getNodeContext(),\n            newNodeId(\"HelloWorld/Dynamic\"),\n            newQualifiedName(\"Dynamic\"),\n            LocalizedText.english(\"Dynamic\")\n        );\n        getNodeManager().addNode(dynamicFolder);\n        rootNode.addOrganizes(dynamicFolder);\n        // Dynamic Boolean\n        {\n            String name = \"Boolean\";\n            NodeId typeId = Identifiers.Boolean;\n            Variant variant = new Variant(false);\n            UaVariableNode node = new UaVariableNode.UaVariableNodeBuilder(getNodeContext())\n                .setNodeId(newNodeId(\"HelloWorld/Dynamic/\" + name))\n                .setAccessLevel(ubyte(AccessLevel.getMask(AccessLevel.READ_WRITE)))\n                .setBrowseName(newQualifiedName(name))\n                .setDisplayName(LocalizedText.english(name))\n                .setDataType(typeId)\n                .setTypeDefinition(Identifiers.BaseDataVariableType)\n                .build();\n            node.setValue(new DataValue(variant));\n            AttributeDelegate delegate = AttributeDelegateChain.create(\n                new AttributeDelegate() {\n                    @Override\n                    public DataValue getValue(AttributeContext context, VariableNode node) throws UaException {\n                        return new DataValue(new Variant(random.nextBoolean()));\n                    }\n                },\n                ValueLoggingDelegate::new\n            );\n            node.setAttributeDelegate(delegate);\n            getNodeManager().addNode(node);\n            dynamicFolder.addOrganizes(node);\n        }\n        // Dynamic Int32\n        {\n            String name = \"Int32\";\n            NodeId typeId = Identifiers.Int32;\n            Variant variant = new Variant(0);\n            UaVariableNode node = new UaVariableNode.UaVariableNodeBuilder(getNodeContext())\n                .setNodeId(newNodeId(\"HelloWorld/Dynamic/\" + name))\n                .setAccessLevel(ubyte(AccessLevel.getMask(AccessLevel.READ_WRITE)))\n                .setBrowseName(newQualifiedName(name))\n                .setDisplayName(LocalizedText.english(name))\n                .setDataType(typeId)\n                .setTypeDefinition(Identifiers.BaseDataVariableType)\n                .build();\n            node.setValue(new DataValue(variant));\n            AttributeDelegate delegate = AttributeDelegateChain.create(\n                new AttributeDelegate() {\n                    @Override\n                    public DataValue getValue(AttributeContext context, VariableNode node) throws UaException {\n                        return new DataValue(new Variant(random.nextInt()));\n                    }\n                },\n                ValueLoggingDelegate::new\n            );\n            node.setAttributeDelegate(delegate);\n            getNodeManager().addNode(node);\n            dynamicFolder.addOrganizes(node);\n        }\n        // Dynamic Double\n        {\n            String name = \"Double\";\n            NodeId typeId = Identifiers.Double;\n            Variant variant = new Variant(0.0);\n            UaVariableNode node = new UaVariableNode.UaVariableNodeBuilder(getNodeContext())\n                .setNodeId(newNodeId(\"HelloWorld/Dynamic/\" + name))\n                .setAccessLevel(ubyte(AccessLevel.getMask(AccessLevel.READ_WRITE)))\n                .setBrowseName(newQualifiedName(name))\n                .setDisplayName(LocalizedText.english(name))\n                .setDataType(typeId)\n                .setTypeDefinition(Identifiers.BaseDataVariableType)\n                .build();\n            node.setValue(new DataValue(variant));\n            AttributeDelegate delegate = AttributeDelegateChain.create(\n                new AttributeDelegate() {\n                    @Override\n                    public DataValue getValue(AttributeContext context, VariableNode node) throws UaException {\n                        return new DataValue(new Variant(random.nextDouble()));\n                    }\n                },\n                ValueLoggingDelegate::new\n            );\n            node.setAttributeDelegate(delegate);\n            getNodeManager().addNode(node);\n            dynamicFolder.addOrganizes(node);\n        }\n    }\n<fim_suffix>    private void addDataAccessNodes(UaFolderNode rootNode) {\n        // DataAccess folder\n        UaFolderNode dataAccessFolder = new UaFolderNode(\n            getNodeContext(),\n            newNodeId(\"HelloWorld/DataAccess\"),\n            newQualifiedName(\"DataAccess\"),\n            LocalizedText.english(\"DataAccess\")\n        );\n        getNodeManager().addNode(dataAccessFolder);\n        rootNode.addOrganizes(dataAccessFolder);\n        // AnalogItemType node\n        try {\n            AnalogItemNode node = (AnalogItemNode) getNodeFactory().createNode(\n                newNodeId(\"HelloWorld/DataAccess/AnalogValue\"),\n                Identifiers.AnalogItemType,\n                true\n            );\n            node.setBrowseName(newQualifiedName(\"AnalogValue\"));\n            node.setDisplayName(LocalizedText.english(\"AnalogValue\"));\n            node.setDataType(Identifiers.Double);\n            node.setValue(new DataValue(new Variant(3.14d)));\n            node.setEURange(new Range(0.0, 100.0));\n            getNodeManager().addNode(node);\n            dataAccessFolder.addOrganizes(node);\n        } catch (UaException e) {\n            logger.error(\"Error creating AnalogItemType instance: {}\", e.getMessage(), e);\n        }\n    }<fim_middle>// function below is long method and feature envy\n"}