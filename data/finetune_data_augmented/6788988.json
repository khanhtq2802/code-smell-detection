{"text": "<fim_prefix>            case MeasureSpec.UNSPECIFIED:\n            default:\n                return min;\n        }\n    }\n    /**\n     * Open a {@link PopupWindow} showing a color selection palette.\n     */\n    protected void openColorPickerPopupWindow() {\n        if (mColorPaletteView == null) {\n            mColorPaletteView = new ColorPaletteView(this);\n        }\n        if (mColorPopupWindow == null) {\n            mColorPopupWindow = new AutoPositionPopupWindow(mColorPaletteView);\n        }\n        mColorPopupWindow.show(this);\n    }\n    /**\n     * Popup window that adjusts positioning to the size of the wrapped view.\n     */\n    protected class AutoPositionPopupWindow extends PopupWindow {\n        private final View mWrapView;\n        /**\n         * Construct popup window wrapping an existing {@link View} object.\n         *\n         * @param wrapView The view shown inside the popup window.\n         */\n        public AutoPositionPopupWindow(View wrapView) {\n            super(wrapView,\n                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, true);\n            mWrapView = wrapView;\n            // This is necessary because PopupWindow responds to touch events only with\n            // background != null.\n            setBackgroundDrawable(new ColorDrawable());\n            setOutsideTouchable(true);\n        }\n        /**\n         * Show popup window next to an anchor view.\n         *\n         * @param anchorView The view that \"anchors\" the popup window.\n         */\n        public void show(View anchorView) {\n            // Get size of the wrapped view. Since it may not have been measured yet, allow fallback\n            // to minimum size.\n            int width = mWrapView.getMeasuredWidth();\n            if (width == 0) {\n                // Note - getMinimumWidth/Height require API 16 and above.\n                width = mWrapView.getMinimumWidth();\n            }\n            int height = mWrapView.getMeasuredHeight();\n            if (height == 0) {\n                height = mWrapView.getMinimumHeight();\n            }\n            // Set size of popup window to match wrapped content; this will allow automatic\n            // positioning to fit on screen.\n            setWidth(width);\n            setHeight(height);\n            showAsDropDown(anchorView, 0, 0);\n        }\n    }\n    /**\n     * View for a color palette that matches Web Blockly's.\n     */\n<fim_suffix>    protected class ColorPaletteView extends View {\n        private static final int PALETTE_COLUMNS = 7;\n        private static final int PALETTE_ROWS = 10;\n        private static final int PALETTE_FIELD_WIDTH = 50;\n        private static final int PALETTE_FIELD_HEIGHT = 50;\n        private static final float GRID_STROKE_WIDTH = 5;\n        private final BasicFieldColorView mParent;\n        private final Paint mAreaPaint = new Paint();\n        private final Paint mGridPaint = new Paint();\n        // From https://github.com/google/closure-library/blob/master/closure/goog/ui/colorpicker.js\n        // TODO(#70): move this table into resources.\n        private final int[] mColorArray = new int[]{\n                // grays\n                0xffffffff, 0xffcccccc, 0xffc0c0c0, 0xff999999, 0xff666666, 0xff333333, 0xff000000,\n                // reds\n                0xffffcccc, 0xffff6666, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000,\n                // oranges\n                0xffffcc99, 0xffff9966, 0xffff9900, 0xffff6600, 0xffcc6600, 0xff993300, 0xff663300,\n                // yellows\n                0xffffff99, 0xffffff66, 0xffffcc66, 0xffffcc33, 0xffcc9933, 0xff996633, 0xff663333,\n                // olives\n                0xffffffcc, 0xffffff33, 0xffffff00, 0xffffcc00, 0xff999900, 0xff666600, 0xff333300,\n                // greens\n                0xff99ff99, 0xff66ff99, 0xff33ff33, 0xff33cc00, 0xff009900, 0xff006600, 0xff003300,\n                // turquoises\n                0xff99ffff, 0xff33ffff, 0xff66cccc, 0xff00cccc, 0xff339999, 0xff336666, 0xff003333,\n                // blues\n                0xffccffff, 0xff66ffff, 0xff33ccff, 0xff3366ff, 0xff3333ff, 0xff000099, 0xff000066,\n                // purples\n                0xffccccff, 0xff9999ff, 0xff6666cc, 0xff6633ff, 0xff6600cc, 0xff333399, 0xff330099,\n                // violets\n                0xffffccff, 0xffff99ff, 0xffcc66cc, 0xffcc33cc, 0xff993399, 0xff663366, 0xff330033\n        };\n        ColorPaletteView(BasicFieldColorView parent) {\n            super(parent.getContext());\n            mParent = parent;\n            mGridPaint.setColor(Color.DKGRAY);\n            mGridPaint.setStrokeWidth(GRID_STROKE_WIDTH);\n            mGridPaint.setStyle(Paint.Style.STROKE);\n        }\n        @Override\n        public int getMinimumWidth() {\n            return PALETTE_FIELD_WIDTH * PALETTE_COLUMNS;\n        }\n        @Override\n        public int getMinimumHeight() {\n            return PALETTE_FIELD_HEIGHT * PALETTE_ROWS;\n        }\n        @Override\n        public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n            setMeasuredDimension(getMinimumWidth(), getMinimumHeight());\n        }\n        @Override\n        public void onDraw(Canvas canvas) {\n            drawPalette(canvas);\n            drawGrid(canvas);\n        }\n        @Override\n        public boolean onTouchEvent(MotionEvent motionEvent) {\n            if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {\n                int i = Math.min(PALETTE_COLUMNS - 1,\n                        (int) motionEvent.getX() / PALETTE_FIELD_WIDTH);\n                int j = Math.min(PALETTE_ROWS - 1,\n                        (int) motionEvent.getY() / PALETTE_FIELD_HEIGHT);\n                int index = i + j * PALETTE_COLUMNS;\n                mParent.setBackgroundColor(mColorArray[index]);\n                mParent.mColorField.setColor(mColorArray[index]);\n                mParent.mColorPopupWindow.dismiss();\n                return true;\n            }\n            return false;\n        }\n        private void drawPalette(Canvas canvas) {\n            int paletteIndex = 0;\n            for (int j = 0; j < PALETTE_ROWS; ++j) {\n                int y = j * PALETTE_FIELD_HEIGHT;\n                for (int i = 0; i < PALETTE_COLUMNS; ++i, ++paletteIndex) {\n                    int x = i * PALETTE_FIELD_WIDTH;\n                    mAreaPaint.setColor(mColorArray[paletteIndex]);\n                    canvas.drawRect(\n                            x, y, x + PALETTE_FIELD_WIDTH, y + PALETTE_FIELD_HEIGHT, mAreaPaint);\n                }\n            }\n        }\n        private void drawGrid(Canvas canvas) {\n            int width = getMeasuredWidth();\n            int height = getMeasuredHeight();\n            canvas.drawRect(0, 0, width - 1, height - 1, mGridPaint);\n            for (int j = 0; j < PALETTE_ROWS; ++j) {\n                int y = j * PALETTE_FIELD_HEIGHT;\n                canvas.drawLine(0, y, width - 1, y, mGridPaint);\n            }\n            for (int i = 0; i < PALETTE_COLUMNS; ++i) {\n                int x = i * PALETTE_FIELD_WIDTH;\n                canvas.drawLine(x, 0, x, height - 1, mGridPaint);\n            }\n        }\n    }<fim_middle>// class below has no smell\n"}