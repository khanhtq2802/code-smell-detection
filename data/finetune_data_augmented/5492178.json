{"text": "<fim_prefix>import org.apache.qpid.server.message.MessageInstance;\nimport org.apache.qpid.server.message.MessageInstanceConsumer;\nimport org.apache.qpid.server.message.MessageReference;\nimport org.apache.qpid.server.message.RoutingResult;\nimport org.apache.qpid.server.message.ServerMessage;\nimport org.apache.qpid.server.model.Queue;\nimport org.apache.qpid.server.store.MessageEnqueueRecord;\nimport org.apache.qpid.server.store.TransactionLogResource;\nimport org.apache.qpid.server.txn.LocalTransaction;\nimport org.apache.qpid.server.txn.ServerTransaction;\nimport org.apache.qpid.server.util.Action;\nimport org.apache.qpid.server.util.StateChangeListener;\nimport org.apache.qpid.server.util.StateChangeListenerEntry;\npublic abstract class QueueEntryImpl implements QueueEntry\n{\n    private final QueueEntryList _queueEntryList;\n    private final MessageReference _message;\n    private volatile Set<Object> _rejectedBy = null;\n    private static final AtomicReferenceFieldUpdater<QueueEntryImpl, Set> _rejectedByUpdater =\n            AtomicReferenceFieldUpdater.newUpdater(QueueEntryImpl.class, Set.class, \"_rejectedBy\");\n    private static final EntryState HELD_STATE = new EntryState()\n    {\n        @Override\n        public State getState()\n        {\n            return State.AVAILABLE;\n        }\n        @Override\n        public String toString()\n        {\n            return \"HELD\";\n        }\n    };\n    private volatile EntryState _state = AVAILABLE_STATE;\n    private static final\n        AtomicReferenceFieldUpdater<QueueEntryImpl, EntryState>\n            _stateUpdater =\n        AtomicReferenceFieldUpdater.newUpdater\n        (QueueEntryImpl.class, EntryState.class, \"_state\");\n    @SuppressWarnings(\"unused\")\n    private volatile StateChangeListenerEntry<? super QueueEntry, EntryState> _stateChangeListeners;\n    private static final\n        AtomicReferenceFieldUpdater<QueueEntryImpl, StateChangeListenerEntry>\n                _listenersUpdater =\n        AtomicReferenceFieldUpdater.newUpdater\n        (QueueEntryImpl.class, StateChangeListenerEntry.class, \"_stateChangeListeners\");\n    private static final\n        AtomicLongFieldUpdater<QueueEntryImpl>\n            _entryIdUpdater =\n        AtomicLongFieldUpdater.newUpdater\n        (QueueEntryImpl.class, \"_entryId\");\n    @SuppressWarnings(\"unused\")\n    private volatile long _entryId;\n    private static final int REDELIVERED_FLAG = 1;\n    private static final int PERSISTENT_FLAG = 2;\n    private static final int MANDATORY_FLAG = 4;\n    private static final int IMMEDIATE_FLAG = 8;\n    private int _flags;\n    private long _expiration;\n    /** Number of times this message has been delivered */\n    private volatile int _deliveryCount = -1;\n    private static final AtomicIntegerFieldUpdater<QueueEntryImpl> _deliveryCountUpdater = AtomicIntegerFieldUpdater\n                    .newUpdater(QueueEntryImpl.class, \"_deliveryCount\");\n    private final MessageEnqueueRecord _enqueueRecord;\n    QueueEntryImpl(QueueEntryList queueEntryList)\n    {\n        this(queueEntryList, null, Long.MIN_VALUE, null);\n        _state = DELETED_STATE;\n    }\n    QueueEntryImpl(QueueEntryList queueEntryList,\n                   ServerMessage message,\n                   final long entryId,\n                   final MessageEnqueueRecord enqueueRecord)\n    {\n        _queueEntryList = queueEntryList;\n        _message = message == null ? null : message.newReference(queueEntryList.getQueue());\n        _entryIdUpdater.set(this, entryId);\n        populateInstanceProperties();\n        _enqueueRecord = enqueueRecord;\n    }\n    QueueEntryImpl(QueueEntryList queueEntryList,\n                   ServerMessage message,\n                   final MessageEnqueueRecord enqueueRecord)\n    {\n        _queueEntryList = queueEntryList;\n        _message = message == null ? null :  message.newReference(queueEntryList.getQueue());\n        populateInstanceProperties();\n        _enqueueRecord = enqueueRecord;\n    }\n    private void populateInstanceProperties()\n    {\n        if(_message != null)\n        {\n            if(_message.getMessage().isPersistent())\n            {\n                setPersistent();\n            }\n            _expiration = _message.getMessage().getExpiration();\n        }\n    }\n    @Override\n    public void setExpiration(long expiration)\n    {\n        _expiration = expiration;\n    }\n    @Override\n    public InstanceProperties getInstanceProperties()\n    {\n        return new EntryInstanceProperties();\n    }\n    void setEntryId(long entryId)\n    {\n        _entryIdUpdater.set(this, entryId);\n    }\n    long getEntryId()\n    {\n        return _entryId;\n    }\n    @Override\n    public Queue<?> getQueue()\n    {\n        return _queueEntryList.getQueue();\n    }\n    @Override\n    public ServerMessage getMessage()\n    {\n        return  _message == null ? null : _message.getMessage();\n    }\n    @Override\n    public long getSize()\n    {\n        return getMessage() == null ? 0 : getMessage().getSize();\n    }\n    @Override\n    public long getSizeWithHeader()\n    {\n        return getMessage() == null ? 0 : getMessage().getSizeIncludingHeader();\n    }\n    @Override\n    public boolean getDeliveredToConsumer()\n    {\n        return _deliveryCountUpdater.get(this) != -1;\n    }\n    @Override\n    public boolean expired()\n    {\n        long expiration = _expiration;\n        if (expiration != 0L)\n        {\n            long now = System.currentTimeMillis();\n            return (now > expiration);\n        }\n        return false;\n    }\n    @Override\n    public boolean isAvailable()\n    {\n        return _state.getState() == State.AVAILABLE;\n    }\n    @Override\n    public boolean isAcquired()\n    {\n        return _state.getState() == State.ACQUIRED;\n    }\n    @Override\n    public boolean acquire()\n    {\n        return acquire(NON_CONSUMER_ACQUIRED_STATE);\n    }\n    private class DelayedAcquisitionStateListener implements StateChangeListener<MessageInstance, EntryState>\n    {\n        private final Runnable _task;\n        private final AtomicBoolean _run = new AtomicBoolean();\n        private DelayedAcquisitionStateListener(final Runnable task)\n        {\n            _task = task;\n        }\n        @Override\n        public void stateChanged(final MessageInstance object, final EntryState oldState, final EntryState newState)\n        {\n            if (newState.equals(DELETED_STATE) || newState.equals(DEQUEUED_STATE))\n            {\n                QueueEntryImpl.this.removeStateChangeListener(this);\n            }\n            else if (acquireOrSteal(null))\n            {\n                runTask();\n            }\n        }\n        void runTask()\n        {\n            QueueEntryImpl.this.removeStateChangeListener(this);\n            if(_run.compareAndSet(false,true))\n            {\n                _task.run();\n            }\n        }\n    }\n    @Override\n    public boolean acquireOrSteal(final Runnable delayedAcquisitionTask)\n    {\n        boolean acquired = acquire();\n        if(!acquired)\n        {\n            QueueConsumer<?,?> consumer = getAcquiringConsumer();\n            acquired = removeAcquisitionFromConsumer(consumer);\n            if(acquired)\n            {\n                consumer.acquisitionRemoved(this);\n            }\n            else if(delayedAcquisitionTask != null)\n            {\n                DelayedAcquisitionStateListener listener = new DelayedAcquisitionStateListener(delayedAcquisitionTask);\n                addStateChangeListener(listener);\n                if(acquireOrSteal(null))\n                {\n                    listener.runTask();\n                }\n            }\n        }\n        return acquired;\n    }\n    private boolean acquire(final EntryState state)\n    {\n        boolean acquired = false;\n        EntryState currentState;\n        while((currentState = _state).equals(AVAILABLE_STATE))\n        {\n            if(acquired = _stateUpdater.compareAndSet(this, currentState, state))\n            {\n                break;\n            }\n        }\n        if(acquired)\n        {\n            notifyStateChange(AVAILABLE_STATE, state);\n        }\n        return acquired;\n    }\n    @Override\n    public boolean acquire(MessageInstanceConsumer<?> consumer)\n    {\n        final boolean acquired = acquire(((QueueConsumer<?,?>) consumer).getOwningState().getUnstealableState());\n        if(acquired)\n        {\n            _deliveryCountUpdater.compareAndSet(this,-1,0);\n        }\n        return acquired;\n    }\n<fim_suffix>    @Override\n    public boolean makeAcquisitionUnstealable(final MessageInstanceConsumer<?> consumer)\n    {\n        EntryState state = _state;\n        if(state instanceof StealableConsumerAcquiredState\n           && ((StealableConsumerAcquiredState) state).getConsumer() == consumer)\n        {\n            UnstealableConsumerAcquiredState unstealableState = ((StealableConsumerAcquiredState) state).getUnstealableState();\n            boolean updated = _stateUpdater.compareAndSet(this, state, unstealableState);\n            if(updated)\n            {\n                notifyStateChange(state, unstealableState);\n            }\n            return updated;\n        }\n        return state instanceof UnstealableConsumerAcquiredState\n               && ((UnstealableConsumerAcquiredState) state).getConsumer() == consumer;\n    }<fim_middle>// function below is long method\n"}