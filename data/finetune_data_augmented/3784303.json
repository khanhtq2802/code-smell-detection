{"text": "<fim_prefix> * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.alipay.dw.jstorm.example.newindow;\nimport backtype.storm.Config;\nimport backtype.storm.spout.SpoutOutputCollector;\nimport backtype.storm.task.OutputCollector;\nimport backtype.storm.task.TopologyContext;\nimport backtype.storm.topology.IRichBolt;\nimport backtype.storm.topology.IRichSpout;\nimport backtype.storm.topology.OutputFieldsDeclarer;\nimport backtype.storm.topology.TopologyBuilder;\nimport backtype.storm.tuple.Fields;\nimport backtype.storm.tuple.Tuple;\nimport backtype.storm.tuple.Values;\nimport com.alibaba.jstorm.utils.JStormUtils;\nimport com.alibaba.jstorm.utils.Pair;\nimport com.alibaba.jstorm.window.BaseWindowedBolt;\nimport com.alibaba.jstorm.window.Time;\nimport com.alibaba.jstorm.window.TimeWindow;\nimport com.alibaba.starter.utils.JStormHelper;\nimport com.google.common.collect.Lists;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n/**\n * WordCount but the spout does not stop, and the bolts are implemented in java.\n * This can show how fast the word count can run.\n */\npublic class FastWordCountTopNWindowTopology {\n    private static Logger LOG = LoggerFactory.getLogger(FastWordCountTopNWindowTopology.class);\n    public final static String TOPOLOGY_SPOUT_PARALLELISM_HINT = \"spout.parallel\";\n    public final static String TOPOLOGY_SPLIT_PARALLELISM_HINT = \"split.parallel\";\n    public final static String TOPOLOGY_COUNT_PARALLELISM_HINT = \"count.parallel\";\n    public static class FastRandomSentenceSpout implements IRichSpout {\n        SpoutOutputCollector collector;\n        Random _rand;\n        long startTime;\n        int index = 0;\n        private static final String[] CHOICES = {\"marry had a little lamb whos fleese was white as snow\",\n                \"and every where that marry went the lamb was sure to go\",\n                \"one two three four five six seven eight nine ten\",\n                \"this is a test of the emergency broadcast system this is only a test\",\n                \"peter piper picked a peck of pickeled peppers\",\n                \"JStorm is a distributed and fault-tolerant realtime computation system.\",\n                \"Inspired by Apache Storm, JStorm has been completely rewritten in Java and provides many more enhanced features.\",\n                \"JStorm has been widely used in many enterprise environments and proved robust and stable.\",\n                \"JStorm provides a distributed programming framework very similar to Hadoop MapReduce.\",\n                \"The developer only needs to compose his/her own pipe-lined computation logic by implementing the JStorm API\",\n                \" which is fully compatible with Apache Storm API\",\n                \"and submit the composed Topology to a working JStorm instance.\",\n                \"Similar to Hadoop MapReduce, JStorm computes on a DAG (directed acyclic graph).\",\n                \"Different from Hadoop MapReduce, a JStorm topology runs 24 * 7\",\n                \"the very nature of its continuity abd 100% in-memory architecture \",\n                \"has been proved a particularly suitable solution for streaming data and real-time computation.\",\n                \"JStorm guarantees fault-tolerance.\",\n                \"Whenever a worker process crashes, \",\n                \"the scheduler embedded in the JStorm instance immediately spawns a new worker process to take the place of the failed one.\",\n                \" The Acking framework provided by JStorm guarantees that every single piece of data will be processed at least once.\"};\n        @Override\n        public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {\n            this.collector = collector;\n            _rand = new Random();\n            startTime = System.currentTimeMillis();\n        }\n        @Override\n        public void nextTuple() {\n            String sentence = CHOICES[index++];\n            if (index >= CHOICES.length) {\n                index = 0;\n            }\n            collector.emit(new Values(sentence));\n            JStormUtils.sleepMs(50);\n        }\n        @Override\n        public void ack(Object id) {\n        }\n        @Override\n        public void fail(Object id) {\n            collector.emit(new Values(id), id);\n        }\n        @Override\n        public void declareOutputFields(OutputFieldsDeclarer declarer) {\n            declarer.declare(new Fields(\"sentence\"));\n        }\n        @Override\n        public void close() {\n        }\n        @Override\n        public void activate() {\n        }\n        @Override\n        public void deactivate() {\n        }\n        @Override\n        public Map<String, Object> getComponentConfiguration() {\n            return null;\n        }\n    }\n    public static class SplitSentence implements IRichBolt {\n        OutputCollector collector;\n        @Override\n        public void execute(Tuple tuple) {\n            String sentence = tuple.getString(0);\n            for (String word : sentence.split(\"\\\\s+\")) {\n                collector.emit(new Values(word));\n            }\n        }\n        @Override\n        public void declareOutputFields(OutputFieldsDeclarer declarer) {\n            declarer.declare(new Fields(\"word\"));\n        }\n        @Override\n        public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {\n            this.collector = collector;\n        }\n        @Override\n        public void cleanup() {\n        }\n        @Override\n        public Map<String, Object> getComponentConfiguration() {\n            return null;\n        }\n    }\n    public static class WordCount extends BaseWindowedBolt<Tuple> {\n        OutputCollector collector;\n        int n;\n        WordCount(int n) {\n            this.n = n;\n        }\n        @Override\n        public void declareOutputFields(OutputFieldsDeclarer declarer) {\n            declarer.declare(new Fields(\"topn_part\"));\n        }\n        @Override\n        public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {\n            this.collector = collector;\n        }\n        @Override\n        public void cleanup() {\n        }\n        @Override\n        public Object initWindowState(TimeWindow window) {\n            return new HashMap<>();\n        }\n        @Override\n        public void execute(Tuple tuple, Object state, TimeWindow window) {\n            HashMap<String, Integer> counts = (HashMap<String, Integer>) state;\n            String word = tuple.getString(0);\n            Integer count = counts.get(word);\n            if (count == null)\n                count = 0;\n            counts.put(word, ++count);\n        }\n        @Override\n        public void purgeWindow(Object state, TimeWindow window) {\n            LOG.info(\"purging window: {}\", window);\n            final HashMap<String, Integer> counts = (HashMap<String, Integer>) state;\n            List<String> keys = Lists.newArrayList(counts.keySet());\n            Collections.sort(keys, new Comparator<String>() {\n                @Override\n                public int compare(String o1, String o2) {\n                    return -counts.get(o1).compareTo(counts.get(o2));\n                }\n            });\n            List<Object> pairs = Lists.newArrayListWithCapacity(n);\n            for (int i = 0; i < n; i++) {\n                pairs.add(new Pair<>(keys.get(i), counts.get(keys.get(i))));\n            }\n            collector.emit(pairs);\n        }\n        @Override\n        public Map<String, Object> getComponentConfiguration() {\n            return null;\n        }\n    }\n    public static class MergeTopN extends BaseWindowedBolt<Tuple> {\n        private final int n;\n        OutputCollector collector;\n        MergeTopN(int n) {\n            this.n = n;\n        }\n<fim_suffix>        @Override\n        public void execute(Tuple tuple, Object state, TimeWindow window) {\n            LOG.info(\"executing on window:{}\", window);\n            Map<String, Integer> counts = (Map<String, Integer>) state;\n            List<Object> partialWordCounts = tuple.getValues();\n            for (Object partialWordCount : partialWordCounts) {\n                Pair<String, Integer> pair = (Pair<String, Integer>) partialWordCount;\n                counts.put(pair.getFirst(), pair.getSecond());\n            }\n        }<fim_middle>// function below has no smell\n"}