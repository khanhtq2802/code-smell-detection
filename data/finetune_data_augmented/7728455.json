{"text": "<fim_prefix>/*\n * Copyright (c) 2017 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License.  You may obtain a copy of\n * the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed\n * under the License is distributed on an \"AS IS\" BASIS, without warranties or\n * conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the License for the\n * specific language governing permissions and limitations under the License.\n */\n\npackage com.vmware.xenon.common.serialization;\n\nimport java.io.IOException;\nimport java.io.Writer;\n\nimport com.google.gson.stream.JsonWriter;\n\nimport com.vmware.xenon.common.FNVHash;\n\n/**\n * Instead of writing, this class computes a running hash.\n */\n<fim_suffix>public final class HashingJsonWriter extends JsonWriter {\n\n    private static final int BEG_ARRAY = 1;\n    private static final int END_ARRAY = -1;\n\n    private static final int BEG_OBJ = 2;\n    private static final int END_OBJ = -2;\n\n    private static final int NAME = 3;\n    private static final int STRING = 4;\n    private static final int NULL = 5;\n    private static final int NUMBER = 6;\n    private static final int BOOL = 7;\n\n    private long hash;\n\n    private static final Writer UNWRITABLE_WRITER = new Writer() {\n        @Override\n        public void write(char[] buffer, int offset, int counter) {\n            throw new AssertionError();\n        }\n\n        @Override\n        public void flush() throws IOException {\n            throw new AssertionError();\n        }\n\n        @Override\n        public void close() throws IOException {\n            throw new AssertionError();\n        }\n    };\n\n    public HashingJsonWriter(long hash) {\n        super(UNWRITABLE_WRITER);\n        setLenient(true);\n        setSerializeNulls(false);\n        this.hash = hash;\n    }\n\n    @Override\n    public JsonWriter beginArray() throws IOException {\n        this.hash = FNVHash.compute(BEG_ARRAY, this.hash);\n        return this;\n    }\n\n    @Override\n    public JsonWriter endArray() throws IOException {\n        this.hash = FNVHash.compute(END_ARRAY, this.hash);\n        return this;\n    }\n\n    @Override\n    public JsonWriter beginObject() throws IOException {\n        this.hash = FNVHash.compute(BEG_OBJ, this.hash);\n        return this;\n    }\n\n    @Override\n    public JsonWriter endObject() throws IOException {\n        this.hash = FNVHash.compute(END_OBJ, this.hash);\n        return this;\n    }\n\n    @Override\n    public JsonWriter name(String name) throws IOException {\n        long h = this.hash;\n        h = FNVHash.compute(NAME, h);\n        h = FNVHash.compute(name, h);\n        this.hash = h;\n        return this;\n    }\n\n    @Override\n    public JsonWriter value(String value) throws IOException {\n        long h = this.hash;\n        h = FNVHash.compute(STRING, h);\n        if (value != null) {\n            h = FNVHash.compute(value, h);\n        } else {\n            h = FNVHash.compute(NULL, h);\n        }\n        this.hash = h;\n        return this;\n    }\n\n    @Override\n    public JsonWriter nullValue() throws IOException {\n        this.hash = FNVHash.compute(NULL, this.hash);\n        return this;\n    }\n\n    @Override\n    public JsonWriter value(boolean value) throws IOException {\n        long h = this.hash;\n        h = FNVHash.compute(BOOL, h);\n        h = FNVHash.compute(Boolean.hashCode(value), h);\n        this.hash = h;\n        return this;\n    }\n\n    @Override\n    public JsonWriter value(double value) throws IOException {\n        long h = this.hash;\n        h = FNVHash.compute(NUMBER, h);\n        long bits = Double.doubleToLongBits(value);\n        h = FNVHash.compute((int) bits, h);\n        h = FNVHash.compute((int) (bits >> 32), h);\n        this.hash = h;\n        return this;\n    }\n\n    @Override\n    public JsonWriter value(Boolean value) throws IOException {\n        long h = this.hash;\n        h = FNVHash.compute(BOOL, h);\n        if (value != null) {\n            h = FNVHash.compute(Boolean.hashCode(value), h);\n        } else {\n            h = FNVHash.compute(NULL, h);\n        }\n        this.hash = h;\n        return this;\n    }\n\n    @Override\n    public JsonWriter value(long value) throws IOException {\n        long h = this.hash;\n        h = FNVHash.compute(NUMBER, h);\n        h = FNVHash.compute((int) value, h);\n        h = FNVHash.compute((int) (value >> 32), h);\n        this.hash = h;\n        return this;\n    }\n\n    @Override\n    public JsonWriter value(Number value) throws IOException {\n        long h = this.hash;\n        h = FNVHash.compute(NUMBER, h);\n        if (value != null) {\n            h = FNVHash.compute(value.toString(), h);\n        } else {\n            h = FNVHash.compute(NULL, h);\n        }\n        this.hash = h;\n        return this;\n    }\n\n    @Override\n    public void flush() throws IOException {\n\n    }\n\n    @Override\n    public void close() throws IOException {\n\n    }\n\n    public long getHash() {\n        return this.hash;\n    }\n}<fim_middle>// class below has no smell\n"}