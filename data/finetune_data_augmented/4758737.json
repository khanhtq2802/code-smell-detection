{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.gobblin.codec;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.lang.reflect.Method;\n\nimport org.apache.commons.codec.binary.Base64InputStream;\nimport org.apache.commons.codec.binary.Base64OutputStream;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * A class that can encode and decrypt Base64 streams.\n *\n * This class will delegate to the Java 8+ java.util.Base64 algorithm if it can be found;\n * otherwise it relies on Apache Common Codec's Base64OutputStream. The Java 8 classes\n * are preferred because they are noticeably faster in benchmarking.\n */\npublic class Base64Codec implements StreamCodec {\n  private static final Logger log = LoggerFactory.getLogger(Base64Codec.class);\n\n  private static Method java8GetEncoder;\n  private static Method java8WrapStreamEncode;\n  private static Method java8GetDecoder;\n  private static Method java8WrapStreamDecode;\n\n  private final static boolean foundJava8;\n\n  private static boolean forceApacheBase64 = false;\n\n  @Override\n  public OutputStream encodeOutputStream(OutputStream origStream)\n      throws IOException {\n    try {\n      if (canUseJava8()) {\n        Object encoder = java8GetEncoder.invoke(null);\n        return (OutputStream) java8WrapStreamEncode.invoke(encoder, origStream);\n      } else {\n        return encodeOutputStreamWithApache(origStream);\n      }\n    } catch (ReflectiveOperationException e) {\n      log.warn(\"Error invoking java8 methods, falling back to Apache\", e);\n      return encodeOutputStreamWithApache(origStream);\n    }\n  }\n\n  @Override\n  public InputStream decodeInputStream(InputStream origStream)\n      throws IOException {\n    try {\n      if (canUseJava8()) {\n        Object decoder = java8GetDecoder.invoke(null);\n        return (InputStream) java8WrapStreamDecode.invoke(decoder, origStream);\n      } else {\n        return decodeInputStreamWithApache(origStream);\n      }\n    } catch (ReflectiveOperationException e) {\n      log.warn(\"Error invoking java8 methods, falling back to Apache\", e);\n      return decodeInputStreamWithApache(origStream);\n    }\n  }\n\n  static {\n    boolean base64Found = false;\n    try {\n      Class.forName(\"java.util.Base64\");\n\n      java8GetEncoder = getMethod(\"java.util.Base64\", \"getEncoder\");\n      java8WrapStreamEncode = getMethod(\"java.util.Base64$Encoder\", \"wrap\", OutputStream.class);\n      java8GetDecoder = getMethod(\"java.util.Base64\", \"getDecoder\");\n      java8WrapStreamDecode = getMethod(\"java.util.Base64$Decoder\", \"wrap\", InputStream.class);\n      base64Found = true;\n    } catch (ClassNotFoundException | NoSuchMethodException e) {\n      log.info(\"Couldn't find java.util.Base64 or methods, falling back to Apache Commons\", e);\n      base64Found = false;\n    } finally {\n      foundJava8 = base64Found;\n    }\n  }\n\n<fim_suffix>  private static Method getMethod(String className, String methodName, Class<?>... parameterTypes)\n      throws ClassNotFoundException, NoSuchMethodException {\n    Class<?> clazz = Class.forName(className);\n    return clazz.getMethod(methodName, parameterTypes);\n  }\n\n  private OutputStream encodeOutputStreamWithApache(OutputStream origStream) {\n    return new Base64OutputStream(origStream, true, 0, null);\n  }\n\n  private InputStream decodeInputStreamWithApache(InputStream origStream) {\n    return new Base64InputStream(origStream);\n  }\n\n  // Force use of the Apache Base64 codec -- used only for benchmarking\n  static void forceApacheBase64() {\n    forceApacheBase64 = true;\n  }\n\n  private boolean canUseJava8() {\n    return !forceApacheBase64 && foundJava8;\n  }\n\n  @Override\n  public String getTag() {\n    return \"base64\";\n  }\n}<fim_middle>// function below has no smell\n"}