{"text": "<fim_prefix>    private JCheckBox useMultipart;\n    private JCheckBox useBrowserCompatibleMultipartMode;\n    private JLabeledChoice method;\n    // set this false to suppress some items for use in HTTP Request defaults\n    private final boolean notConfigOnly;\n    // Body data\n    private JSyntaxTextArea postBodyContent;\n    // Tabbed pane that contains parameters and raw body\n    private ValidationTabbedPane postContentTabbedPane;\n    private boolean showRawBodyPane;\n    private boolean showFileUploadPane;\n    /**\n     * Constructor which is setup to show HTTP implementation, raw body pane and\n     * sampler fields.\n     */\n    public UrlConfigGui() {\n        this(true);\n    }\n    /**\n     * Constructor which is setup to show HTTP implementation and raw body pane.\n     *\n     * @param showSamplerFields\n     *            flag whether sampler fields should be shown.\n     */\n    public UrlConfigGui(boolean showSamplerFields) {\n        this(showSamplerFields, true);\n    }\n    /**\n     * @param showSamplerFields\n     *            flag whether sampler fields should be shown\n     * @param showRawBodyPane\n     *            flag whether the raw body pane should be shown\n     */\n    public UrlConfigGui(boolean showSamplerFields, boolean showRawBodyPane) {\n        this(showSamplerFields, showRawBodyPane, false);\n    }\n    /**\n     * @param showSamplerFields\n     *            flag whether sampler fields should be shown\n     * @param showRawBodyPane\n     *            flag whether the raw body pane should be shown\n     * @param showFileUploadPane flag whether the file upload pane should be shown\n     */\n    public UrlConfigGui(boolean showSamplerFields, boolean showRawBodyPane, boolean showFileUploadPane) {\n        this.notConfigOnly = showSamplerFields;\n        this.showRawBodyPane = showRawBodyPane;\n        this.showFileUploadPane = showFileUploadPane;\n        init();\n    }\n    public void clear() {\n        domain.setText(\"\"); // $NON-NLS-1$\n        if (notConfigOnly){\n            followRedirects.setSelected(true);\n            autoRedirects.setSelected(false);\n            method.setText(HTTPSamplerBase.DEFAULT_METHOD);\n            useKeepAlive.setSelected(true);\n            useMultipart.setSelected(false);\n            useBrowserCompatibleMultipartMode.setSelected(HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT);\n        }\n        path.setText(\"\"); // $NON-NLS-1$\n        port.setText(\"\"); // $NON-NLS-1$\n        protocol.setText(\"\"); // $NON-NLS-1$\n        contentEncoding.setText(\"\"); // $NON-NLS-1$\n        argsPanel.clear();\n        if(showFileUploadPane) {\n            filesPanel.clear();\n        }\n        if(showRawBodyPane) {\n            postBodyContent.setInitialText(\"\");// $NON-NLS-1$\n        }\n        postContentTabbedPane.setSelectedIndex(TAB_PARAMETERS, false);\n    }\n    public TestElement createTestElement() {\n        ConfigTestElement element = new ConfigTestElement();\n        element.setName(this.getName());\n        element.setProperty(TestElement.GUI_CLASS, this.getClass().getName());\n        element.setProperty(TestElement.TEST_CLASS, element.getClass().getName());\n        modifyTestElement(element);\n        return element;\n    }\n    /**\n     * Save the GUI values in the sampler.\n     *\n     * @param element {@link TestElement} to modify\n     */\n    public void modifyTestElement(TestElement element) {\n        boolean useRaw = !postBodyContent.getText().isEmpty();\n        Arguments args;\n        if(useRaw) {\n            args = new Arguments();\n            String text = postBodyContent.getText();\n            /*\n             * Textfield uses \\n (LF) to delimit lines; we need to send CRLF.\n             * Rather than change the way that arguments are processed by the\n             * samplers for raw data, it is easier to fix the data.\n             * On retrieval, CRLF is converted back to LF for storage in the text field.\n             * See\n             */\n            HTTPArgument arg = new HTTPArgument(\"\", text.replaceAll(\"\\n\",\"\\r\\n\"), false);\n            arg.setAlwaysEncoded(false);\n            args.addArgument(arg);\n        } else {\n            args = (Arguments) argsPanel.createTestElement();\n            HTTPArgument.convertArgumentsToHTTP(args);\n        }\n        if(showFileUploadPane) {\n            filesPanel.modifyTestElement(element);\n        }\n        element.setProperty(HTTPSamplerBase.POST_BODY_RAW, useRaw, HTTPSamplerBase.POST_BODY_RAW_DEFAULT);\n        element.setProperty(new TestElementProperty(HTTPSamplerBase.ARGUMENTS, args));\n        element.setProperty(HTTPSamplerBase.DOMAIN, domain.getText());\n        element.setProperty(HTTPSamplerBase.PORT, port.getText());\n        element.setProperty(HTTPSamplerBase.PROTOCOL, protocol.getText());\n        element.setProperty(HTTPSamplerBase.CONTENT_ENCODING, contentEncoding.getText());\n        element.setProperty(HTTPSamplerBase.PATH, path.getText());\n        if (notConfigOnly){\n            element.setProperty(HTTPSamplerBase.METHOD, method.getText());\n            element.setProperty(new BooleanProperty(HTTPSamplerBase.FOLLOW_REDIRECTS, followRedirects.isSelected()));\n            element.setProperty(new BooleanProperty(HTTPSamplerBase.AUTO_REDIRECTS, autoRedirects.isSelected()));\n            element.setProperty(new BooleanProperty(HTTPSamplerBase.USE_KEEPALIVE, useKeepAlive.isSelected()));\n            element.setProperty(new BooleanProperty(HTTPSamplerBase.DO_MULTIPART_POST, useMultipart.isSelected()));\n            element.setProperty(HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART,\n                    useBrowserCompatibleMultipartMode.isSelected(),\n                    HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT);\n        }\n    }\n    // Just append all the parameter values, and use that as the post body\n    /**\n     * Compute body data from arguments\n     * @param arguments {@link Arguments}\n     * @return {@link String}\n     */\n    private static String computePostBody(Arguments arguments) {\n        return computePostBody(arguments, false);\n    }\n    /**\n     * Compute body data from arguments\n     * @param arguments {@link Arguments}\n     * @param crlfToLF whether to convert CRLF to LF\n     * @return {@link String}\n     */\n    private static String computePostBody(Arguments arguments, boolean crlfToLF) {\n        StringBuilder postBody = new StringBuilder();\n        for (JMeterProperty argument : arguments) {\n            HTTPArgument arg = (HTTPArgument) argument.getObjectValue();\n            String value = arg.getValue();\n            if (crlfToLF) {\n                value = value.replaceAll(\"\\r\\n\", \"\\n\"); // See modifyTestElement\n            }\n            postBody.append(value);\n        }\n        return postBody.toString();\n    }\n    /**\n     * Set the text, etc. in the UI.\n     *\n     * @param el\n     *            contains the data to be displayed\n     */\n<fim_suffix>    public void configure(TestElement el) {\n        setName(el.getName());\n        Arguments arguments = (Arguments) el.getProperty(HTTPSamplerBase.ARGUMENTS).getObjectValue();\n        boolean useRaw = el.getPropertyAsBoolean(HTTPSamplerBase.POST_BODY_RAW, HTTPSamplerBase.POST_BODY_RAW_DEFAULT);\n        if(useRaw) {\n            String postBody = computePostBody(arguments, true); // Convert CRLF to CR, see modifyTestElement\n            postBodyContent.setInitialText(postBody); \n            postBodyContent.setCaretPosition(0);\n            argsPanel.clear();\n            postContentTabbedPane.setSelectedIndex(tabRawBodyIndex, false);\n        } else {\n            postBodyContent.setInitialText(\"\");\n            argsPanel.configure(arguments);\n            postContentTabbedPane.setSelectedIndex(TAB_PARAMETERS, false);\n        }\n        if(showFileUploadPane) {\n            filesPanel.configure(el);\n        }\n        domain.setText(el.getPropertyAsString(HTTPSamplerBase.DOMAIN));\n        String portString = el.getPropertyAsString(HTTPSamplerBase.PORT);\n        // Only display the port number if it is meaningfully specified\n        if (portString.equals(HTTPSamplerBase.UNSPECIFIED_PORT_AS_STRING)) {\n            port.setText(\"\"); // $NON-NLS-1$\n        } else {\n            port.setText(portString);\n        }\n        protocol.setText(el.getPropertyAsString(HTTPSamplerBase.PROTOCOL));\n        contentEncoding.setText(el.getPropertyAsString(HTTPSamplerBase.CONTENT_ENCODING));\n        path.setText(el.getPropertyAsString(HTTPSamplerBase.PATH));\n        if (notConfigOnly){\n            method.setText(el.getPropertyAsString(HTTPSamplerBase.METHOD));\n            followRedirects.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.FOLLOW_REDIRECTS));\n            autoRedirects.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.AUTO_REDIRECTS));\n            useKeepAlive.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.USE_KEEPALIVE));\n            useMultipart.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.DO_MULTIPART_POST));\n            useBrowserCompatibleMultipartMode.setSelected(el.getPropertyAsBoolean(\n                    HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART, HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT));\n        }\n    }<fim_middle>// function below is long method\n"}