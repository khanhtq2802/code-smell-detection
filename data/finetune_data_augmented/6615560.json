{"text": "<fim_prefix>// Copyright (c) 1999-2004 Brian Wellington (bwelling@xbill.org)\n\npackage org.xbill.DNS.utils;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\n\n/**\n * Routines for converting between Strings of hex-encoded data and arrays of\n * binary data.  This is not actually used by DNS.\n *\n * @author Brian Wellington\n */\n\npublic class base16 {\n\nprivate static final String Base16 = \"0123456789ABCDEF\";\n\nprivate\nbase16() {}\n\n/**\n * Convert binary data to a hex-encoded String\n * @param b An array containing binary data\n * @return A String containing the encoded data\n */\n<fim_suffix>public static String\ntoString(byte [] b) {\n\tByteArrayOutputStream os = new ByteArrayOutputStream();\n\n\tfor (int i = 0; i < b.length; i++) {\n\t\tshort value = (short) (b[i] & 0xFF);\n\t\tbyte high = (byte) (value >> 4);\n\t\tbyte low = (byte) (value & 0xF);\n\t\tos.write(Base16.charAt(high));\n\t\tos.write(Base16.charAt(low));\n\t}\n\treturn new String(os.toByteArray());\n}\n\n/**\n * Convert a hex-encoded String to binary data\n * @param str A String containing the encoded data\n * @return An array containing the binary data, or null if the string is invalid\n */\npublic static byte []\nfromString(String str) {\n\tByteArrayOutputStream bs = new ByteArrayOutputStream();\n\tbyte [] raw = str.getBytes();\n\tfor (int i = 0; i < raw.length; i++) {\n\t\tif (!Character.isWhitespace((char)raw[i]))\n\t\t\tbs.write(raw[i]);\n\t}\n\tbyte [] in = bs.toByteArray();\n\tif (in.length % 2 != 0) {\n\t\treturn null;\n\t}\n\n\tbs.reset();\n\tDataOutputStream ds = new DataOutputStream(bs);\n\n\tfor (int i = 0; i < in.length; i += 2) {\n\t\tbyte high = (byte) Base16.indexOf(Character.toUpperCase((char)in[i]));\n\t\tbyte low = (byte) Base16.indexOf(Character.toUpperCase((char)in[i+1]));\n\t\ttry {\n\t\t\tds.writeByte((high << 4) + low);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t}\n\t}\n\treturn bs.toByteArray();\n}\n\n}<fim_middle>// function below has no smell\n"}