{"text": "<fim_prefix>    throw new Error(\"Missing return statement in function\");\n  }\n  final public DifferentAtom differentFromAtom() throws ParseException {\n ExpressionAtom expressionAtom1; ExpressionAtom expressionAtom2;\n    jj_consume_token(DIFFERENT);\n    jj_consume_token(LPAR);\n    expressionAtom1 = expressionAtom();\n    jj_consume_token(COMMA);\n    expressionAtom2 = expressionAtom();\n    jj_consume_token(RPAR);\n          {if (true) return new DifferentAtom(expressionAtom1, expressionAtom2);}\n    throw new Error(\"Missing return statement in function\");\n  }\n  final public IObjectAtom reference() throws ParseException {\n  String uri1;\n  Token colon;\n  String uri3;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case URI:\n      uri1 = getURI();\n                         uri1 = uri1.substring(1, uri1.length()-1);\n                                                try {\n                                                  {if (true) return new ResourceAtom(new URI(uri1));}\n                                                        } catch (URISyntaxException e) {\n                                                                e.printStackTrace();\n                                                        }\n      break;\n    case VAR:\n      uri1 = getVariable();\n      colon = jj_consume_token(COLON);\n      uri3 = getVariable();\n                                                                  {if (true) return new ResourceAtom(getSWRLArgument(uri1+colon.image+uri3));}\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n  final public IObjectAtom varReference() throws ParseException {\n  String uri1;\n  Token colon;\n  String uri3;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case URI:\n      uri1 = getURI();\n                         try {\n                                                                                                                        {if (true) return new ResourceAtom(new URI(uri1));}\n                                                                                                                } catch (URISyntaxException e) {\n                                                                                                                        e.printStackTrace();\n                                                                                                                }\n      break;\n    case VAR:\n      uri1 = getVariable();\n      colon = jj_consume_token(COLON);\n      uri3 = getVariable();\n                                                                  {if (true) return new ResourceAtom(getSWRLArgument(uri1+colon.image+uri3));}\n      break;\n    default:\n      jj_la1[9] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n  final public String getURI() throws ParseException {\n        Token t;\n    t = jj_consume_token(URI);\n                      {if (true) return t.image;}\n    throw new Error(\"Missing return statement in function\");\n  }\n  final public String getVariable() throws ParseException {\n        Token t;\n    t = jj_consume_token(VAR);\n                      {if (true) return t.image;}\n    throw new Error(\"Missing return statement in function\");\n  }\n  final public String getStringValue() throws ParseException {\n        Token t;\n    t = jj_consume_token(STRING);\n                         {if (true) return t.image;}\n    throw new Error(\"Missing return statement in function\");\n  }\n  final public StringAtom getString() throws ParseException {\n        Token t;\n    t = jj_consume_token(STRING);\n                         {if (true) return new StringAtom(t.image);}\n    throw new Error(\"Missing return statement in function\");\n  }\n  final public NumberAtom getInt() throws ParseException {\n        Token t;\n    t = jj_consume_token(NUM);\n                    {if (true) return new NumberAtom(t.image);}\n    throw new Error(\"Missing return statement in function\");\n  }\n  final public Object uObject() throws ParseException {\n  Object obj;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case NOTEX:\n    case VARIABLE:\n    case BNODE:\n      obj = variable();\n      break;\n    case VAR:\n    case URI:\n      obj = reference();\n      break;\n    case STRING:\n      obj = getString();\n      break;\n    case NUM:\n      obj = getInt();\n      break;\n    default:\n      jj_la1[10] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n         {if (true) return obj;}\n    throw new Error(\"Missing return statement in function\");\n  }\n  final public IObjectAtom iObject() throws ParseException {\n  IObjectAtom uri;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case NOTEX:\n    case VARIABLE:\n    case BNODE:\n      uri = variable();\n                          {if (true) return uri;}\n      break;\n    case VAR:\n    case URI:\n      uri = reference();\n                                                            {if (true) return uri;}\n      break;\n    default:\n      jj_la1[11] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n  final public RuleAtom dObject() throws ParseException {\n  RuleAtom variable;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case NUM:\n    case STRING:\n      variable = literal();\n      break;\n    case NOTEX:\n    case VARIABLE:\n    case BNODE:\n      variable = variable();\n      break;\n    default:\n      jj_la1[12] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n                                                    {if (true) return variable;}\n    throw new Error(\"Missing return statement in function\");\n  }\n  final public ExpressionAtom literal() throws ParseException {\n  ExpressionAtom literal; IObjectAtom typedLiteral;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case STRING:\n      literal = getString();\n      typedLiteral = typedLiteral();\n      break;\n    case NUM:\n      literal = getInt();\n      typedLiteral = typedLiteral();\n      break;\n    default:\n      jj_la1[13] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n                if(typedLiteral != null){\n                        {if (true) return new TypedLiteralAtom(literal, typedLiteral);}\n                }\n                else{\n                        {if (true) return literal;}\n                }\n    throw new Error(\"Missing return statement in function\");\n  }\n  final public IObjectAtom typedLiteral() throws ParseException {\n  IObjectAtom type = null;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case APOX:\n      jj_consume_token(APOX);\n      jj_consume_token(APOX);\n      type = reference();\n      break;\n    default:\n      jj_la1[14] = jj_gen;\n    }\n         {if (true) return type;}\n    throw new Error(\"Missing return statement in function\");\n  }\n<fim_suffix>  final public IObjectAtom variable() throws ParseException {\n  Token t; String var;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case NOTEX:\n      jj_consume_token(NOTEX);\n      jj_consume_token(LPAR);\n      t = jj_consume_token(VARIABLE);\n      jj_consume_token(RPAR);\n                                                      var=t.image; var=kb.getPrefixURI(\"var\") + var.substring(1);\n                                                                                                                try{\n                                                                                                                        {if (true) return new VariableAtom(new URI(var), true);}\n                                                                                                                } catch (URISyntaxException e) {\n                                                                                                                        e.printStackTrace();\n                                                                                                                        {if (true) return null;}\n                                                                                                                }\n      break;\n    case VARIABLE:\n      t = jj_consume_token(VARIABLE);\n          var=t.image; var=kb.getPrefixURI(\"var\") + var.substring(1);\n                                                                                                                try{\n                                                                                                                        {if (true) return new VariableAtom(new URI(var), false);}\n                                                                                                                } catch (URISyntaxException e) {\n                                                                                                                        e.printStackTrace();\n                                                                                                                        {if (true) return null;}\n                                                                                                                }\n      break;\n    case BNODE:\n      t = jj_consume_token(BNODE);\n          var=t.image;  {if (true) return new RuleBlankNode(var);}\n      break;\n    default:\n      jj_la1[15] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }<fim_middle>// function below has no smell\n"}