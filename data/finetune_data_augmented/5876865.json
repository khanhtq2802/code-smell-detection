{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.uima.impl;\n\nimport java.util.Map;\n\nimport org.apache.uima.UIMA_UnsupportedOperationException;\nimport org.apache.uima.UimaContextAdmin;\nimport org.apache.uima.analysis_engine.annotator.AnnotatorContext;\nimport org.apache.uima.resource.ConfigurationManager;\nimport org.apache.uima.resource.ResourceManager;\nimport org.apache.uima.resource.Session;\nimport org.apache.uima.resource.impl.SessionNamespaceView_impl;\nimport org.apache.uima.util.InstrumentationFacility;\nimport org.apache.uima.util.Logger;\nimport org.apache.uima.util.ProcessTrace;\n\n/**\n * Reference implementation of {@link AnnotatorContext}.\n * \n * \n */\npublic class ChildUimaContext_impl extends UimaContext_ImplBase implements UimaContextAdmin {\n  /**\n   * Logger\n   */\n  private volatile Logger mLogger;\n\n  /**\n   * Root Context (if root, points to self)\n   */\n  private final UimaContextAdmin mRootContext;\n\n  /**\n   * This Context's view of the Session object\n   */\n  private final SessionNamespaceView_impl mSessionNamespaceView;\n\n  /**\n   * ResourceManager used to locate and access external resources\n   * Set non-null only for Pear resources contained in an aggregate\n   */\n  \n  private volatile ResourceManager mPearResourceManager = null;\n\n  /**\n   * ref to the parent.  \n   * This is only used to find containing resource managers\n   * that may exist due to Pear Wrappers\n   *\n   */\n  private final UimaContextAdmin parentContext;\n\n  /*\n   * (non-Javadoc) Creates a child context.\n   */\n  public ChildUimaContext_impl(UimaContextAdmin aParentContext, String aContextName,\n          Map<String, String> aSofaMappings) {\n    super(aParentContext.getQualifiedContextName() + aContextName + '/', aSofaMappings);\n    mRootContext = aParentContext.getRootContext();\n    mLogger = aParentContext.getRootContext().getLogger();\n    mSessionNamespaceView = new SessionNamespaceView_impl(mRootContext.getSession(),\n            mQualifiedContextName);\n    parentContext = aParentContext;\n  }\n\n  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.uima.UimaContextAdmin#initialize(org.apache.uima.resource.ResourceCreationSpecifier,\n   *      org.apache.uima.util.Logger, org.apache.uima.resource.ResourceManager,\n   *      ConfigurationManager)\n   */\n  public void initializeRoot(Logger aLogger, ResourceManager aResourceManager,\n          ConfigurationManager aConfigurationManager) {\n    throw new UIMA_UnsupportedOperationException();\n  }\n\n  /**\n   * Gets the InstrumentationFacility to be used within this AnalysisEngine.\n   * \n   * @return the InstrumentationFacility to be used within this AnalysisEngine\n   */\n<fim_suffix>  public InstrumentationFacility getInstrumentationFacility() {\n    return getRootContext().getInstrumentationFacility();\n  }\n\n  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.uima.UimaContextAdmin#setLogger(org.apache.uima.util.Logger)\n   */\n  public void setLogger(Logger aLogger) {\n    mLogger = aLogger;\n  }\n\n  /**\n   * Gets the ResourceManager used by this UimaContext to locate and access external resources\n   * \n   * @return the ResourceManager\n   */\n  public ResourceManager getResourceManager() {\n    if (null == mPearResourceManager) {\n      return parentContext.getResourceManager();\n    }\n    return mPearResourceManager;\n  }\n\n  /**\n   * Set the Pear resource manager, to be used instead of any\n   * containing Resource Manager.\n   * @param resourceManager -\n   */\n  public void setPearResourceManager(ResourceManager resourceManager) {\n    mPearResourceManager = resourceManager;\n  }\n  \n  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.uima.UimaContextAdmin#getConfigurationManager()\n   */\n  public ConfigurationManager getConfigurationManager() {\n    return getRootContext().getConfigurationManager();\n  }\n\n  /**\n   * Sets the current ProcessTrace object, which will receive trace events generated by the\n   * InstrumentationFacility.\n   * <p>\n   * This method is to be called from the Analysis Engine, not the Annotator, so it is not part of\n   * the AnnotatorContext interface.\n   */\n  public void setProcessTrace(ProcessTrace aProcessTrace) {\n    getRootContext().setProcessTrace(aProcessTrace);\n  }\n\n  /**\n   * Get the Root Context\n   * \n   * @return root context\n   */\n  public UimaContextAdmin getRootContext() {\n    return mRootContext;\n  }\n\n  /**\n   * @see org.apache.uima.analysis_engine.annotator.AnnotatorContext#getLogger()\n   */\n  public Logger getLogger() {\n    return mLogger;\n  }\n\n  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.uima.UimaContext#getSession()\n   */\n  public Session getSession() {\n    // must update root session first, in case it has been changed, for example by the deployment\n    // wrapper\n    mSessionNamespaceView.setRootSession(getRootContext().getSession());\n    return mSessionNamespaceView;\n  }\n\n  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.uima.UimaContextAdmin#setSession(org.apache.uima.resource.Session)\n   */\n  public void setSession(Session aSession) {\n    throw new UIMA_UnsupportedOperationException();\n\n  }\n}<fim_middle>// function below has no smell\n"}