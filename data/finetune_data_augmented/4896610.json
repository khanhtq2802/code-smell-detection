{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.jackrabbit.oak.segment;\n\nimport java.util.Date;\n\nimport javax.management.openmbean.OpenDataException;\nimport javax.management.openmbean.TabularDataSupport;\n\nimport org.apache.jackrabbit.oak.api.PropertyState;\nimport org.apache.jackrabbit.oak.api.Type;\nimport org.apache.jackrabbit.oak.spi.state.ChildNodeEntry;\nimport org.apache.jackrabbit.oak.spi.state.NodeState;\nimport org.apache.jackrabbit.oak.commons.jmx.AbstractCheckpointMBean;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * {@code CheckpointMBean} implementation for the {@code SegmentNodeStore}.\n */\npublic class SegmentCheckpointMBean extends AbstractCheckpointMBean {\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private final SegmentNodeStore store;\n\n    public SegmentCheckpointMBean(SegmentNodeStore store) {\n        this.store = store;\n    }\n\n    @Override\n    protected void collectCheckpoints(TabularDataSupport tab) throws OpenDataException {\n        for (ChildNodeEntry cne : store.getCheckpoints().getChildNodeEntries()) {\n            String id = cne.getName();\n            NodeState checkpoint = cne.getNodeState();\n            String created = getDate(checkpoint, \"created\");\n            String expires = getDate(checkpoint, \"timestamp\");\n            tab.put(id, toCompositeData(id, created, expires, store.checkpointInfo(id)));\n        }\n    }\n\n    @Override\n    public long getOldestCheckpointCreationTimestamp() {\n        long minTimestamp = Long.MAX_VALUE;\n        for (ChildNodeEntry cne : store.getCheckpoints().getChildNodeEntries()) {\n            NodeState checkpoint = cne.getNodeState();\n            PropertyState p = checkpoint.getProperty(\"created\");\n            if (p != null) {\n                minTimestamp = Math.min(minTimestamp, p.getValue(Type.LONG));\n            }\n        }\n        return (minTimestamp==Long.MAX_VALUE)?0:minTimestamp;\n    }\n\n    private static String getDate(NodeState checkpoint, String name) {\n        PropertyState p = checkpoint.getProperty(name);\n        if (p == null) {\n            return \"NA\";\n        }\n\n        return new Date(p.getValue(Type.LONG)).toString();\n    }\n\n    @Override\n    public String createCheckpoint(long lifetime) {\n        String cp = store.checkpoint(lifetime);\n        log.info(\"Created checkpoint [{}] with lifetime {}\", cp, lifetime);\n        return cp;\n    }\n\n<fim_suffix>    @Override\n    public boolean releaseCheckpoint(String checkpoint) {\n        log.info(\"Released checkpoint [{}]\", checkpoint);\n        return store.release(checkpoint);\n    }\n\n}<fim_middle>// function below has no smell\n"}