{"text": "<fim_prefix>/*\n * Copyright 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.common.css.compiler.passes;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.css.compiler.ast.CssCompilerPass;\nimport com.google.common.css.compiler.ast.CssDeclarationBlockNode;\nimport com.google.common.css.compiler.ast.CssNode;\nimport com.google.common.css.compiler.ast.CssRulesetNode;\nimport com.google.common.css.compiler.ast.CssSelectorListNode;\nimport com.google.common.css.compiler.ast.CssSelectorNode;\nimport com.google.common.css.compiler.ast.MutatingVisitController;\nimport com.google.common.css.compiler.ast.SkippingTreeVisitor;\n\nimport java.util.List;\n\n/**\n * Compiler pass that splits ruleset nodes into multiple ruleset nodes by\n * selector and declaration.\n *\n * @author oana@google.com (Oana Florescu)\n */\n<fim_suffix>public class SplitRulesetNodes extends SkippingTreeVisitor\n    implements CssCompilerPass {\n\n  private final MutatingVisitController visitController;\n\n  public SplitRulesetNodes(MutatingVisitController visitController) {\n    this(visitController, false);\n  }\n\n  public SplitRulesetNodes(MutatingVisitController visitController,\n        boolean skipping) {\n    super(skipping);\n    this.visitController = visitController;\n  }\n\n  @Override\n  public boolean enterRuleset(CssRulesetNode node) {\n    boolean canModifyRuleset = canModifyRuleset(node);\n    if (canModifyRuleset) {\n      List<CssNode> replacementNodes = Lists.newArrayList();\n\n      CssSelectorListNode selectors = node.getSelectors();\n      CssDeclarationBlockNode declarations = node.getDeclarations();\n\n      for (CssSelectorNode sel : selectors.childIterable()) {\n        for (CssNode child : declarations.childIterable()) {\n          CssRulesetNode ruleset = new CssRulesetNode();\n          ruleset.setSourceCodeLocation(node.getSourceCodeLocation());\n          ruleset.addDeclaration(child.deepCopy());\n          ruleset.addSelector(sel.deepCopy());\n\n          replacementNodes.add(ruleset);\n        }\n      }\n\n      visitController.replaceCurrentBlockChildWith(\n          replacementNodes,\n          false);\n    }\n    return canModifyRuleset;\n  }\n\n  @Override\n  public void runPass() {\n    visitController.startVisit(this);\n  }\n\n}<fim_middle>// class below has no smell\n"}