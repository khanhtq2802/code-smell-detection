{"text": "<fim_prefix>import java.math.BigDecimal;\nimport java.sql.DatabaseMetaData;\nimport java.sql.SQLException;\nimport java.sql.Time;\nimport java.sql.Timestamp;\nimport java.sql.Types;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport javax.validation.constraints.NotNull;\nimport org.apache.calcite.avatica.AvaticaParameter;\nimport org.apache.calcite.avatica.AvaticaStatement;\nimport org.apache.calcite.avatica.AvaticaUtils;\nimport org.apache.calcite.avatica.ColumnMetaData;\nimport org.apache.calcite.avatica.ColumnMetaData.StructType;\nimport org.apache.calcite.avatica.Meta;\nimport org.apache.calcite.avatica.MetaImpl;\nimport org.apache.calcite.avatica.MissingResultsException;\nimport org.apache.calcite.avatica.NoSuchStatementException;\nimport org.apache.calcite.avatica.QueryState;\nimport org.apache.calcite.avatica.remote.TypedValue;\nimport org.apache.drill.common.exceptions.DrillRuntimeException;\nimport org.apache.drill.common.util.DrillStringUtils;\nimport org.apache.drill.exec.client.ServerMethod;\nimport org.apache.drill.exec.proto.UserBitShared.DrillPBError;\nimport org.apache.drill.exec.proto.UserProtos.CatalogMetadata;\nimport org.apache.drill.exec.proto.UserProtos.ColumnMetadata;\nimport org.apache.drill.exec.proto.UserProtos.GetCatalogsResp;\nimport org.apache.drill.exec.proto.UserProtos.GetColumnsResp;\nimport org.apache.drill.exec.proto.UserProtos.GetSchemasResp;\nimport org.apache.drill.exec.proto.UserProtos.GetTablesResp;\nimport org.apache.drill.exec.proto.UserProtos.LikeFilter;\nimport org.apache.drill.exec.proto.UserProtos.RequestStatus;\nimport org.apache.drill.exec.proto.UserProtos.SchemaMetadata;\nimport org.apache.drill.exec.proto.UserProtos.TableMetadata;\nimport org.apache.drill.exec.rpc.DrillRpcFuture;\nimport org.apache.drill.exec.rpc.RpcException;\nimport org.apache.drill.shaded.guava.com.google.common.base.Function;\nimport org.apache.drill.shaded.guava.com.google.common.collect.ImmutableMap;\nimport org.apache.drill.shaded.guava.com.google.common.collect.Lists;\npublic class DrillMetaImpl extends MetaImpl {\n  private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(DrillMetaImpl.class);\n  // TODO:  Use more central version of these constants if available.\n  /** JDBC conventional(?) number of fractional decimal digits for REAL. */\n  private static final int DECIMAL_DIGITS_REAL = 7;\n  /** JDBC conventional(?) number of fractional decimal digits for FLOAT. */\n  private static final int DECIMAL_DIGITS_FLOAT = DECIMAL_DIGITS_REAL;\n  /** JDBC conventional(?) number of fractional decimal digits for DOUBLE. */\n  private static final int DECIMAL_DIGITS_DOUBLE = 15;\n  /** Radix used to report precisions of \"datetime\" types. */\n  private static final int RADIX_DATETIME = 10;\n  /** Radix used to report precisions of interval types. */\n  private static final int RADIX_INTERVAL = 10;\n  final DrillConnectionImpl connection;\n  DrillMetaImpl(DrillConnectionImpl connection) {\n    super(connection);\n    this.connection = connection;\n  }\n  private static Signature newSignature(String sql) {\n    return new Signature(\n        new DrillColumnMetaDataList(),\n        sql,\n        Collections.<AvaticaParameter> emptyList(),\n        Collections.<String, Object>emptyMap(),\n        null, // CursorFactory set to null, as SQL requests use DrillCursor\n        Meta.StatementType.SELECT);\n  }\n  private MetaResultSet s(String s) {\n    try {\n      logger.debug(\"Running {}\", s);\n      AvaticaStatement statement = connection.createStatement();\n      return MetaResultSet.create(connection.id, statement.getId(), true,\n          newSignature(s), null);\n    } catch (Exception e) {\n      // Wrap in RuntimeException because Avatica's abstract method declarations\n      // didn't allow for SQLException!\n      throw new DrillRuntimeException(\"Failure while attempting to get DatabaseMetadata.\", e);\n    }\n  }\n  /** Information about type mapping. */\n  private static class TypeInfo {\n    private static final Map<Class<?>, TypeInfo> MAPPING = ImmutableMap.<Class<?>, TypeInfo> builder()\n        .put(boolean.class, of(Types.BOOLEAN, \"BOOLEAN\"))\n        .put(Boolean.class, of(Types.BOOLEAN, \"BOOLEAN\"))\n        .put(Byte.TYPE, of(Types.TINYINT, \"TINYINT\"))\n        .put(Byte.class, of(Types.TINYINT, \"TINYINT\"))\n        .put(Short.TYPE, of(Types.SMALLINT, \"SMALLINT\"))\n        .put(Short.class, of(Types.SMALLINT, \"SMALLINT\"))\n        .put(Integer.TYPE, of(Types.INTEGER, \"INTEGER\"))\n        .put(Integer.class, of(Types.INTEGER, \"INTEGER\"))\n        .put(Long.TYPE,  of(Types.BIGINT, \"BIGINT\"))\n        .put(Long.class, of(Types.BIGINT, \"BIGINT\"))\n        .put(Float.TYPE, of(Types.FLOAT, \"FLOAT\"))\n        .put(Float.class,  of(Types.FLOAT, \"FLOAT\"))\n        .put(Double.TYPE,  of(Types.DOUBLE, \"DOUBLE\"))\n        .put(Double.class, of(Types.DOUBLE, \"DOUBLE\"))\n        .put(String.class, of(Types.VARCHAR, \"CHARACTER VARYING\"))\n        .put(BigDecimal.class, of(Types.DECIMAL, \"DECIMAL\"))\n        .put(java.sql.Date.class, of(Types.DATE, \"DATE\"))\n        .put(Time.class, of(Types.TIME, \"TIME\"))\n        .put(Timestamp.class, of(Types.TIMESTAMP, \"TIMESTAMP\"))\n        .build();\n    private final int sqlType;\n    private final String sqlTypeName;\n    public TypeInfo(int sqlType, String sqlTypeName) {\n      this.sqlType = sqlType;\n      this.sqlTypeName = sqlTypeName;\n    }\n    private static TypeInfo of(int sqlType, String sqlTypeName) {\n      return new TypeInfo(sqlType, sqlTypeName);\n    }\n    public static TypeInfo get(Class<?> clazz) {\n      return MAPPING.get(clazz);\n    }\n  }\n  /** Metadata describing a column.\n   * Copied from Avatica with several fixes\n   * */\n<fim_suffix>  public static class MetaColumn implements Named {\n    public final String tableCat;\n    public final String tableSchem;\n    public final String tableName;\n    public final String columnName;\n    public final int dataType;\n    public final String typeName;\n    public final Integer columnSize;\n    public final Integer bufferLength = null;\n    public final Integer decimalDigits;\n    public final Integer numPrecRadix;\n    public final int nullable;\n    public final String remarks = null;\n    public final String columnDef = null;\n    public final Integer sqlDataType = null;\n    public final Integer sqlDatetimeSub = null;\n    public final Integer charOctetLength;\n    public final int ordinalPosition;\n    @NotNull\n    public final String isNullable;\n    public final String scopeCatalog = null;\n    public final String scopeSchema = null;\n    public final String scopeTable = null;\n    public final Short sourceDataType = null;\n    @NotNull\n    public final String isAutoincrement = \"\";\n    @NotNull\n    public final String isGeneratedcolumn = \"\";\n    public MetaColumn(\n        String tableCat,\n        String tableSchem,\n        String tableName,\n        String columnName,\n        int dataType,\n        String typeName,\n        Integer columnSize,\n        Integer decimalDigits,\n        Integer numPrecRadix,\n        int nullable,\n        Integer charOctetLength,\n        int ordinalPosition,\n        String isNullable) {\n      this.tableCat = tableCat;\n      this.tableSchem = tableSchem;\n      this.tableName = tableName;\n      this.columnName = columnName;\n      this.dataType = dataType;\n      this.typeName = typeName;\n      this.columnSize = columnSize;\n      this.decimalDigits = decimalDigits;\n      this.numPrecRadix = numPrecRadix;\n      this.nullable = nullable;\n      this.charOctetLength = charOctetLength;\n      this.ordinalPosition = ordinalPosition;\n      this.isNullable = isNullable;\n    }\n    @Override\n    public String getName() {\n      return columnName;\n    }\n  }<fim_middle>// class below is data class\n"}