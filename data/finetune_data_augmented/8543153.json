{"text": "<fim_prefix>// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\npackage org.apache.cloudstack.api.command.admin.internallb;\n\nimport java.util.List;\n\nimport javax.inject.Inject;\n\nimport org.apache.log4j.Logger;\n\nimport org.apache.cloudstack.api.APICommand;\nimport org.apache.cloudstack.api.ApiConstants;\nimport org.apache.cloudstack.api.ApiErrorCode;\nimport org.apache.cloudstack.api.BaseAsyncCreateCmd;\nimport org.apache.cloudstack.api.Parameter;\nimport org.apache.cloudstack.api.ServerApiException;\nimport org.apache.cloudstack.api.response.InternalLoadBalancerElementResponse;\nimport org.apache.cloudstack.api.response.ProviderResponse;\nimport org.apache.cloudstack.context.CallContext;\nimport org.apache.cloudstack.network.element.InternalLoadBalancerElementService;\n\nimport com.cloud.event.EventTypes;\nimport com.cloud.exception.ResourceAllocationException;\nimport com.cloud.network.VirtualRouterProvider;\nimport com.cloud.user.Account;\n\n@APICommand(name = \"createInternalLoadBalancerElement\",\n            responseObject = InternalLoadBalancerElementResponse.class,\n            description = \"Create an Internal Load Balancer element.\",\n            since = \"4.2.0\",\n            requestHasSensitiveInfo = false,\n            responseHasSensitiveInfo = false)\npublic class CreateInternalLoadBalancerElementCmd extends BaseAsyncCreateCmd {\n    public static final Logger s_logger = Logger.getLogger(CreateInternalLoadBalancerElementCmd.class.getName());\n    private static final String s_name = \"createinternalloadbalancerelementresponse\";\n\n    @Inject\n    private List<InternalLoadBalancerElementService> _service;\n\n    /////////////////////////////////////////////////////\n    //////////////// API parameters /////////////////////\n    /////////////////////////////////////////////////////\n\n    @Parameter(name = ApiConstants.NETWORK_SERVICE_PROVIDER_ID,\n               type = CommandType.UUID,\n               entityType = ProviderResponse.class,\n               required = true,\n               description = \"the network service provider ID of the internal load balancer element\")\n    private Long nspId;\n\n    /////////////////////////////////////////////////////\n    /////////////////// Accessors ///////////////////////\n    /////////////////////////////////////////////////////\n\n    public void setNspId(Long nspId) {\n        this.nspId = nspId;\n    }\n\n    public Long getNspId() {\n        return nspId;\n    }\n\n    /////////////////////////////////////////////////////\n    /////////////// API Implementation///////////////////\n    /////////////////////////////////////////////////////\n\n    @Override\n    public String getCommandName() {\n        return s_name;\n    }\n\n    @Override\n    public long getEntityOwnerId() {\n        return Account.ACCOUNT_ID_SYSTEM;\n    }\n\n<fim_suffix>    @Override\n    public void execute() {\n        CallContext.current().setEventDetails(\"Virtual router element Id: \" + getEntityId());\n        VirtualRouterProvider result = _service.get(0).getInternalLoadBalancerElement(getEntityId());\n        if (result != null) {\n            InternalLoadBalancerElementResponse response = _responseGenerator.createInternalLbElementResponse(result);\n            response.setResponseName(getCommandName());\n            this.setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to add Virtual Router entity to physical network\");\n        }\n    }\n\n    @Override\n    public void create() throws ResourceAllocationException {\n        VirtualRouterProvider result = _service.get(0).addInternalLoadBalancerElement(getNspId());\n        if (result != null) {\n            setEntityId(result.getId());\n            setEntityUuid(result.getUuid());\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to add Internal Load Balancer entity to physical network\");\n        }\n    }\n\n    @Override\n    public String getEventType() {\n        return EventTypes.EVENT_SERVICE_PROVIDER_CREATE;\n    }\n\n    @Override\n    public String getEventDescription() {\n        return \"Adding physical network element Internal Load Balancer: \" + getEntityId();\n    }\n}<fim_middle>// function below has no smell\n"}