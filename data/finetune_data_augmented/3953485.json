{"text": "<fim_prefix> * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.apex.malhar.lib.fs.s3;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.validation.constraints.NotNull;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.apex.malhar.lib.wal.FSWindowDataManager;\nimport org.apache.apex.malhar.lib.wal.WindowDataManager;\nimport org.apache.hadoop.classification.InterfaceStability;\nimport com.amazonaws.auth.BasicAWSCredentials;\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.AmazonS3Client;\nimport com.amazonaws.services.s3.model.CompleteMultipartUploadRequest;\nimport com.amazonaws.services.s3.model.CompleteMultipartUploadResult;\nimport com.amazonaws.services.s3.model.PartETag;\nimport com.esotericsoftware.kryo.serializers.FieldSerializer;\nimport com.esotericsoftware.kryo.serializers.JavaSerializer;\nimport com.google.common.base.Preconditions;\nimport com.datatorrent.api.Context;\nimport com.datatorrent.api.DefaultInputPort;\nimport com.datatorrent.api.Operator;\n/**\n * This operator can be used to merge the S3 blocks into a file. This operator will request for\n * S3 CompleteMultipartUploadRequest once all the blocks are uploaded using multi-part feature.\n * This operator is useful in context of S3 Output Module.\n *\n * @since 3.7.0\n */\n<fim_suffix>@InterfaceStability.Evolving\npublic class S3FileMerger implements Operator, Operator.CheckpointNotificationListener\n{\n  private static final Logger LOG = LoggerFactory.getLogger(S3FileMerger.class);\n  @NotNull\n  private String bucketName;\n  @NotNull\n  private String accessKey;\n  @NotNull\n  private String secretAccessKey;\n  private String endPoint;\n  protected transient List<String> uploadedFiles = new ArrayList<>();\n  private WindowDataManager windowDataManager = new FSWindowDataManager();\n  @FieldSerializer.Bind(JavaSerializer.class)\n  private Map<String, List<PartETag>> uploadParts = new HashMap<>();\n  private Map<String, S3InitiateFileUploadOperator.UploadFileMetadata> fileMetadatas = new HashMap<>();\n  protected transient long currentWindowId;\n  protected transient AmazonS3 s3Client;\n  /**\n   * Input port to receive UploadBlockMetadata\n   */\n  public final transient DefaultInputPort<S3BlockUploadOperator.UploadBlockMetadata> uploadMetadataInput = new DefaultInputPort<S3BlockUploadOperator.UploadBlockMetadata>()\n  {\n    @Override\n    public void process(S3BlockUploadOperator.UploadBlockMetadata tuple)\n    {\n      processUploadBlock(tuple);\n    }\n  };\n  /**\n   * Process to merge the uploaded block into a file.\n   * @param tuple uploaded block meta data\n   */\n  protected void processUploadBlock(S3BlockUploadOperator.UploadBlockMetadata tuple)\n  {\n    List<PartETag> listOfUploads = uploadParts.get(tuple.getKeyName());\n    if (listOfUploads == null) {\n      listOfUploads = new ArrayList<>();\n      uploadParts.put(tuple.getKeyName(), listOfUploads);\n    }\n    listOfUploads.add(tuple.getPartETag());\n    if (fileMetadatas.get(tuple.getKeyName()) != null) {\n      verifyAndEmitFileMerge(tuple.getKeyName());\n    }\n  }\n  /**\n   * Input port to receive UploadFileMetadata\n   */\n  public final transient DefaultInputPort<S3InitiateFileUploadOperator.UploadFileMetadata> filesMetadataInput = new DefaultInputPort<S3InitiateFileUploadOperator.UploadFileMetadata>()\n  {\n    @Override\n    public void process(S3InitiateFileUploadOperator.UploadFileMetadata tuple)\n    {\n      processFileMetadata(tuple);\n    }\n  };\n  /**\n   * Process to merge the uploaded blocks for the given file metadata.\n   * @param tuple file metadata\n   */\n  protected void processFileMetadata(S3InitiateFileUploadOperator.UploadFileMetadata tuple)\n  {\n    String keyName = tuple.getKeyName();\n    fileMetadatas.put(keyName, tuple);\n    if (uploadParts.get(keyName) != null) {\n      verifyAndEmitFileMerge(keyName);\n    }\n  }\n  @Override\n  public void setup(Context.OperatorContext context)\n  {\n    windowDataManager.setup(context);\n    s3Client = createClient();\n  }\n  /**\n   * Create AmazonS3 client using AWS credentials\n   * @return AmazonS3\n   */\n  protected AmazonS3 createClient()\n  {\n    AmazonS3 client = new AmazonS3Client(new BasicAWSCredentials(accessKey, secretAccessKey));\n    if (endPoint != null) {\n      client.setEndpoint(endPoint);\n    }\n    return client;\n  }\n  @Override\n  public void beginWindow(long windowId)\n  {\n    currentWindowId = windowId;\n  }\n  @Override\n  public void endWindow()\n  {\n    if (uploadedFiles.size() > 0) {\n      for (String keyName: uploadedFiles) {\n        uploadParts.remove(keyName);\n        fileMetadatas.remove(keyName);\n      }\n      uploadedFiles.clear();\n    }\n    if (currentWindowId > windowDataManager.getLargestCompletedWindow()) {\n      try {\n        windowDataManager.save(\"Uploaded Files\", currentWindowId);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Unable to save recovery\", e);\n      }\n    }\n  }\n  @Override\n  public void teardown()\n  {\n    windowDataManager.teardown();\n  }\n  /**\n   * Send the CompleteMultipartUploadRequest to S3 if all the blocks of a file are uploaded into S3.\n   * @param keyName file to upload into S3\n   */\n  private void verifyAndEmitFileMerge(String keyName)\n  {\n    if (currentWindowId <= windowDataManager.getLargestCompletedWindow()) {\n      return;\n    }\n    S3InitiateFileUploadOperator.UploadFileMetadata uploadFileMetadata = fileMetadatas.get(keyName);\n    List<PartETag> partETags = uploadParts.get(keyName);\n    if (partETags == null || uploadFileMetadata == null ||\n        uploadFileMetadata.getFileMetadata().getNumberOfBlocks() != partETags.size()) {\n      return;\n    }\n    if (partETags.size() <= 1) {\n      uploadedFiles.add(keyName);\n      LOG.debug(\"Uploaded file {} successfully\", keyName);\n      return;\n    }\n    CompleteMultipartUploadRequest compRequest = new CompleteMultipartUploadRequest(bucketName,\n        keyName, uploadFileMetadata.getUploadId(), partETags);\n    CompleteMultipartUploadResult result = s3Client.completeMultipartUpload(compRequest);\n    if (result.getETag() != null) {\n      uploadedFiles.add(keyName);\n      LOG.debug(\"Uploaded file {} successfully\", keyName);\n    }\n  }\n  @Override\n  public void beforeCheckpoint(long windowId)\n  {\n  }\n  @Override\n  public void checkpointed(long windowId)\n  {\n  }\n  @Override\n  public void committed(long windowId)\n  {\n    try {\n      windowDataManager.committed(windowId);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n  /**\n   * Return the name of the bucket in which to upload the files\n   * @return name of the bucket\n   */\n  public String getBucketName()\n  {\n    return bucketName;\n  }\n  /**\n   * Sets the name of the bucket in which to upload the files.\n   * @param bucketName name of the bucket\n   */\n  public void setBucketName(@NotNull String bucketName)\n  {\n    this.bucketName = Preconditions.checkNotNull(bucketName);\n  }\n  /**\n   * Return the AWS access key\n   * @return the access key\n   */\n  public String getAccessKey()\n  {\n    return accessKey;\n  }\n  /**\n   * Sets the AWS access key\n   * @param accessKey AWS access key\n   */\n  public void setAccessKey(@NotNull String accessKey)\n  {\n    this.accessKey = Preconditions.checkNotNull(accessKey);\n  }\n  /**\n   * Returns the AWS secret access key\n   * @return AWS secret access key\n   */\n  public String getSecretAccessKey()\n  {\n    return secretAccessKey;\n  }\n  /**\n   * Sets the AWS secret access key\n   * @param secretAccessKey AWS secret access key\n   */\n  public void setSecretAccessKey(@NotNull String secretAccessKey)\n  {\n    this.secretAccessKey = Preconditions.checkNotNull(secretAccessKey);\n  }\n  /**\n   * Get the AWS S3 end point\n   * @return the AWS S3 end point\n   */\n  public String getEndPoint()\n  {\n    return endPoint;\n  }\n  /**\n   * Set the S3 end point\n   * @param endPoint end point\n   */\n  public void setEndPoint(String endPoint)\n  {\n    this.endPoint = endPoint;\n  }\n}<fim_middle>// class below is data class\n"}