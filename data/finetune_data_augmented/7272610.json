{"text": "<fim_prefix>/*\n *  Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.\n *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n *  This code is free software; you can redistribute it and/or modify it\n *  under the terms of the GNU General Public License version 2 only, as\n *  published by the Free Software Foundation.  Oracle designates this\n *  particular file as subject to the \"Classpath\" exception as provided\n *  by Oracle in the LICENSE file that accompanied this code.\n *\n *  This code is distributed in the hope that it will be useful, but WITHOUT\n *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n *  version 2 for more details (a copy is included in the LICENSE file that\n *  accompanied this code).\n *\n *  You should have received a copy of the GNU General Public License version\n *  2 along with this work; if not, write to the Free Software Foundation,\n *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n *  or visit www.oracle.com if you need additional information or have any\n *  questions.\n */\n\npackage org.graalvm.visualvm.modules.tracer;\n\nimport java.text.NumberFormat;\n\n/**\n * This class is responsible for formatting item values in the UI. In the current\n * version it formats values for chart tooltips, chart units (min/max values) and\n * details table.\n *\n * @author Jiri Sedlacek\n */\npublic abstract class ItemValueFormatter {\n\n    /**\n     * Code for tooltip formatting.\n     */\n    public static final int FORMAT_TOOLTIP = 0;\n    /**\n     * Code for units (min/max values) formatting.\n     */\n    public static final int FORMAT_UNITS = 1;\n    /**\n     * Code for details table formatting.\n     */\n    public static final int FORMAT_DETAILS = 2;\n    /**\n     * Code for exported data formatting.\n     */\n    public static final int FORMAT_EXPORT = 3;\n\n    /**\n     * Predefined formatter providing simple numeric values.\n     * Uses Number.getInstance().toString().\n     */\n    public static final ItemValueFormatter SIMPLE = new ItemValueFormatter() {\n        public String formatValue(long value, int format) {\n            return Long.toString(value);\n        }\n        public String getUnits(int format) {\n            return null;\n        }\n    };\n\n    /**\n     * Predefined formatter for decimal values with custom units.\n     * Uses Number.getInstance().toString().\n     */\n    public static final ItemValueFormatter DEFAULT_DECIMAL = new Decimal();\n    /**\n     * Predefined formatter for memory values. Uses B (Bytes) for tooltip,\n     * details table and export, uses MB for units (min/max values).\n     * Uses Number.getInstance().toString().\n     */\n    public static final ItemValueFormatter DEFAULT_BYTES = new Bytes();\n    /**\n     * Predefined formatter for percent values with custom factor.\n     * Uses Number.getPercentInstance().toString().\n     */\n    public static final ItemValueFormatter DEFAULT_PERCENT = new Percent();\n\n\n    /**\n     * Returns value formatted in the requested format.\n     *\n     * @param value value to be formatted\n     * @param format format to be used\n     * @return value formatted in the requested format\n     */\n    public abstract String formatValue(long value, int format);\n\n    /**\n     * Returns value units for the requested format.\n     *\n     * @param format format to be used\n     * @return value units for the requested format or null for no units\n     */\n    public abstract String getUnits(int format);\n\n\n    /**\n     * Predefined formatter for decimal values with custom factor and units.\n     * Uses Number.getInstance().toString().\n     */\n    public static final class Decimal extends ItemValueFormatter {\n        \n        private static final NumberFormat FORMAT = NumberFormat.getInstance();\n\n        private final int factor;\n        private final String units;\n\n\n        Decimal() {\n            this(1, null);\n        }\n\n        /**\n         * Creates new instance of Decimal formatter with the defined units.\n         * The values are computed as value / factor.\n         *\n         * @param factor factor for computing values\n         * @param units units\n         */\n        public Decimal(int factor, String units) {\n            this.factor = factor;\n            this.units = units;\n        }\n\n\n        public String formatValue(long value, int format) {\n            return FORMAT.format(value / factor);\n        }\n        \n        public String getUnits(int format) {\n            return units;\n        }\n        \n    }\n\n\n    /**\n     * Predefined formatter for memory values. Uses B (Bytes) for tooltip,\n     * details table and export, uses MB for units (min/max values).\n     * Uses Number.getInstance().toString().\n     */\n    private static final class Bytes extends ItemValueFormatter {\n\n        private static final NumberFormat FORMAT = NumberFormat.getInstance();\n\n\n        Bytes() {}\n\n\n        public String formatValue(long value, int format) {\n            switch (format) {\n                case FORMAT_TOOLTIP:\n                case FORMAT_DETAILS:\n                case FORMAT_EXPORT:\n                    return FORMAT.format(value);\n                case FORMAT_UNITS:\n                    String est = value == 0 ? \"\" : \"~\";\n                    return est + FORMAT.format(Math.round(value / 1024 / 1024));\n                default:\n                    return null;\n            }\n        }\n        \n        public String getUnits(int format) {\n            switch (format) {\n                case FORMAT_TOOLTIP:\n                case FORMAT_DETAILS:\n                case FORMAT_EXPORT:\n                    return \"B\";\n                case FORMAT_UNITS:\n                    return \"MB\";\n                default:\n                    return null;\n            }\n        }\n        \n    }\n\n\n    /**\n     * Predefined formatter for percent values with custom factor.\n     * Uses Number.getPercentInstance().toString().\n     */\n    public static final class Percent extends ItemValueFormatter {\n\n        private static final NumberFormat PERCENT_FORMAT;\n        private static final NumberFormat NUMBER_FORMAT;\n\n        static {\n            PERCENT_FORMAT = NumberFormat.getPercentInstance();\n            PERCENT_FORMAT.setMinimumFractionDigits(1);\n            PERCENT_FORMAT.setMaximumIntegerDigits(3);\n            NUMBER_FORMAT = NumberFormat.getInstance();\n            NUMBER_FORMAT.setMinimumFractionDigits(1);\n            NUMBER_FORMAT.setMaximumIntegerDigits(3);\n        }\n        \n        private double factor;\n\n\n        Percent() {\n            this(3);\n        }\n\n        /**\n         * Creates new instance of Percent formatter with the defined decimal\n         * exponent. The values are computed as value / Math.pow(10, decexp).\n         *\n         * @param decexp decimal exponent for computing values\n         */\n        public Percent(int decexp) {\n            factor = Math.pow(10, decexp);\n        }\n\n\n<fim_suffix>        public String formatValue(long value, int format) {\n            switch (format) {\n                case FORMAT_TOOLTIP:\n                case FORMAT_UNITS:\n                    return PERCENT_FORMAT.format(value / factor);\n                case FORMAT_DETAILS:\n                case FORMAT_EXPORT:\n                    return NUMBER_FORMAT.format(value * 100 / factor);\n                default:\n                    return null;\n            }\n        }\n        \n        public String getUnits(int format) {\n            switch (format) {\n                case FORMAT_TOOLTIP:\n                case FORMAT_UNITS:\n                    return null; // '%' provided by NumberFormat.getPercentInstance()\n                case FORMAT_DETAILS:\n                case FORMAT_EXPORT:\n                    return \"%\"; // '%' is part of column header\n                default:\n                    return null;\n            }\n        }\n\n    }\n\n}<fim_middle>// function below has no smell\n"}