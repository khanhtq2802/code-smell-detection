{"text": "<fim_prefix>/*\n * ApplicationInsights-Java\n * Copyright (c) Microsoft Corporation\n * All rights reserved.\n *\n * MIT License\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\n * software and associated documentation files (the \"\"Software\"\"), to deal in the Software\n * without restriction, including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all copies or\n * substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\n * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage com.microsoft.applicationinsights.internal.processor;\n\nimport java.net.URI;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport com.microsoft.applicationinsights.extensibility.TelemetryProcessor;\nimport com.microsoft.applicationinsights.internal.annotation.BuiltInProcessor;\nimport com.microsoft.applicationinsights.internal.logger.InternalLogger;\nimport com.microsoft.applicationinsights.internal.util.LocalStringsUtils;\nimport com.microsoft.applicationinsights.telemetry.PageViewTelemetry;\nimport com.microsoft.applicationinsights.telemetry.Telemetry;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\n\n/**\n * The class can filter out PageViewTelemetries that\n * have a duration which is less than a predefined value\n * have URLs that has parts that are not needed, i.e. telemetries that will not be sent, based on configuration\n * have unneeded page names i.e. telemetries that will not be sent, that were predefined in configuration\n * <p>\n * Invalid values would prevent the filter from being used.\n * <p>\n * Created by gupele on 7/26/2016.\n */\n<fim_suffix>@BuiltInProcessor(\"PageViewTelemetryFilter\")\npublic final class PageViewTelemetryFilter implements TelemetryProcessor {\n\n    private long durationThresholdInMS = 0l;\n    private final Set<String> notNeededUrls = new HashSet<String>();\n    private final Set<String> notNeededNames = new HashSet<String>();\n\n    public PageViewTelemetryFilter() {\n    }\n\n    @Override\n    public boolean process(Telemetry telemetry) {\n        if (telemetry == null) {\n            return true;\n        }\n\n        if (!(telemetry instanceof PageViewTelemetry)) {\n            return true;\n        }\n\n        PageViewTelemetry asPVT = (PageViewTelemetry) telemetry;\n        URI uri = asPVT.getUri();\n        if (uri == null) {\n            return true;\n        } else {\n            String uriPath = uri.toString();\n            for (String notNeededUri : notNeededUrls) {\n                if (uriPath.contains(notNeededUri)) {\n                    return false;\n                }\n            }\n        }\n\n        if (notNeededNames.contains(asPVT.getName())) {\n            return false;\n        }\n\n        long pvtDuration = asPVT.getDuration();\n        if (durationThresholdInMS <= pvtDuration) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public void setDurationThresholdInMS(String durationThresholdInMS) throws NumberFormatException {\n        try {\n            this.durationThresholdInMS = Long.valueOf(durationThresholdInMS);\n            InternalLogger.INSTANCE.trace(\"PageViewTelemetryFilter: successfully set DurationThresholdInMS to %s\", durationThresholdInMS);\n        } catch (NumberFormatException e) {\n            InternalLogger.INSTANCE.error(\"PageViewTelemetryFilter: failed to set DurationThresholdInMS:%s Exception : %s \",\n                    durationThresholdInMS, ExceptionUtils.getStackTrace(e));\n            throw e;\n        }\n    }\n\n    public void setNotNeededNames(String notNeededNames) throws Throwable {\n        try {\n            List<String> notNeededAsList = Arrays.asList(notNeededNames.split(\",\"));\n            for (String notNeeded : notNeededAsList) {\n                String ready = notNeeded.trim();\n                if (LocalStringsUtils.isNullOrEmpty(ready)) {\n                    continue;\n                }\n\n                this.notNeededNames.add(ready);\n            }\n\n            InternalLogger.INSTANCE.trace(String.format(\"PageViewTelemetryFilter: set NotNeededNames: %s\", notNeededNames));\n        } catch (ThreadDeath td) {\n            throw td;\n        } catch (Throwable t) {\n            try {\n                InternalLogger.INSTANCE.trace(\"PageViewTelemetryFilter: failed to parse NotNeededNames: %s Exception : %s\", notNeededNames,\n                        ExceptionUtils.getStackTrace(t));\n            } catch (ThreadDeath td) {\n                throw td;\n            } catch (Throwable t2) {\n                // chomp\n            }\n            throw t;\n        }\n    }\n\n    public void setNotNeededUrls(String notNeededUrls) throws Throwable {\n        try {\n            List<String> notNeededAsList = Arrays.asList(notNeededUrls.split(\",\"));\n            for (String notNeeded : notNeededAsList) {\n                String ready = notNeeded.trim();\n                if (LocalStringsUtils.isNullOrEmpty(ready)) {\n                    continue;\n                }\n\n                this.notNeededUrls.add(ready);\n            }\n            InternalLogger.INSTANCE.trace(\"PageViewTelemetryFilter: set %s\", notNeededUrls);\n        } catch (ThreadDeath td) {\n            throw td;\n        } catch (Throwable t) {\n            try {\n                InternalLogger.INSTANCE.error(\"PageViewTelemetryFilter: failed to parse NotNeededUrls: %s Exception : %s\", notNeededUrls,\n                        ExceptionUtils.getStackTrace(t));\n            } catch (ThreadDeath td) {\n                throw td;\n            } catch (Throwable t2) {\n                // chomp\n            }\n            throw t;\n        }\n    }\n}<fim_middle>// class below has no smell\n"}