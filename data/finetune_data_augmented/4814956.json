{"text": "<fim_prefix>package org.apache.taverna.workbench.models.graph;\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * A graph model of a dataflow.\n * \n * @author David Withers\n */\n<fim_suffix>public class Graph extends GraphShapeElement {\n\tpublic enum Alignment {\n\t\tHORIZONTAL, VERTICAL\n\t}\n\n\tprivate List<GraphNode> nodes = new ArrayList<>();\n\tprivate Set<GraphEdge> edges = new HashSet<>();\n\tprivate Set<Graph> subgraphs = new HashSet<>();\n\tprivate Alignment alignment = Alignment.VERTICAL;\n\n\t/**\n\t * Constructs a Graph that uses the specified GraphEventManager to handle\n\t * any user generated events on GraphElements.\n\t * \n\t * @param eventManager\n\t */\n\tpublic Graph(GraphController graphController) {\n\t\tsuper(graphController);\n\t}\n\n\t/**\n\t * Adds an edge to the Graph and sets its parent to be this Graph.\n\t * \n\t * @param edge\n\t *            the edge to add\n\t */\n\tpublic void addEdge(GraphEdge edge) {\n\t\tedge.setParent(this);\n\t\tedges.add(edge);\n\t}\n\n\t/**\n\t * Adds a node to the Graph and sets its parent to be this Graph.\n\t * \n\t * @param node\n\t *            the node to add\n\t */\n\tpublic void addNode(GraphNode node) {\n\t\tnode.setParent(this);\n\t\tnodes.add(node);\n\t}\n\n\t/**\n\t * Adds a subgraph to the Graph and sets its parent to be this Graph.\n\t * \n\t * @param subgraph\n\t *            the subgraph to add\n\t */\n\tpublic void addSubgraph(Graph subgraph) {\n\t\tsubgraph.setParent(this);\n\t\tsubgraphs.add(subgraph);\n\t}\n\n\t/**\n\t * Returns the alignment of the Graph.\n\t * \n\t * @return the alignment of the Graph\n\t */\n\tpublic Alignment getAlignment() {\n\t\treturn alignment;\n\t}\n\n\t/**\n\t * Returns the edges contained in the Graph.\n\t * \n\t * @return the edges contained in the Graph\n\t */\n\tpublic Set<GraphEdge> getEdges() {\n\t\treturn Collections.unmodifiableSet(edges);\n\t}\n\n\t/**\n\t * Returns the nodes contained in the Graph.\n\t * \n\t * @return the nodes contained in the Graph\n\t */\n\tpublic List<GraphNode> getNodes() {\n\t\treturn Collections.unmodifiableList(nodes);\n\t}\n\n\t/**\n\t * Returns the subgraphs contained in the Graph.\n\t * \n\t * @return the subgraphs contained in the Graph\n\t */\n\tpublic Set<Graph> getSubgraphs() {\n\t\treturn Collections.unmodifiableSet(subgraphs);\n\t}\n\n\t/**\n\t * Removes an edge from the Graph.\n\t * \n\t * @param edge\n\t *            the edge to remove\n\t * @return true if the edge is removed from the Graph\n\t */\n\tpublic boolean removeEdge(GraphEdge edge) {\n\t\treturn edges.remove(edge);\n\t}\n\n\t/**\n\t * Removes a node from the Graph.\n\t * \n\t * @param node\n\t *            the node to remove\n\t * @return true if the node is removed from the Graph\n\t */\n\tpublic boolean removeNode(GraphNode node) {\n\t\treturn nodes.remove(node);\n\t}\n\n\t/**\n\t * Removes a subgraph from the Graph.\n\t * \n\t * @param subgraph\n\t *            the subgraph to remove\n\t * @return true if the subgraph is removed from the Graph\n\t */\n\tpublic boolean removeSubgraph(Graph subgraph) {\n\t\treturn subgraphs.remove(subgraph);\n\t}\n\n\t/**\n\t * Sets the alignment of the Graph.\n\t * \n\t * @param alignment\n\t *            the new alignment\n\t */\n\tpublic void setAlignment(Alignment alignment) {\n\t\tthis.alignment = alignment;\n\t}\n}<fim_middle>// class below is data class\n"}