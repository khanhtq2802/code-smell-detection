{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.pivot.wtk.skin;\n\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.Paint;\nimport java.awt.Transparency;\n\nimport org.apache.pivot.collections.Dictionary;\nimport org.apache.pivot.collections.Sequence;\nimport org.apache.pivot.util.Utils;\nimport org.apache.pivot.wtk.Component;\nimport org.apache.pivot.wtk.Container;\nimport org.apache.pivot.wtk.ContainerListener;\nimport org.apache.pivot.wtk.ContainerMouseListener;\nimport org.apache.pivot.wtk.FocusTraversalDirection;\nimport org.apache.pivot.wtk.FocusTraversalPolicy;\nimport org.apache.pivot.wtk.GraphicsUtilities;\nimport org.apache.pivot.wtk.Mouse;\nimport org.apache.pivot.wtk.Theme;\n\n/**\n * Abstract base class for container skins.\n */\npublic abstract class ContainerSkin extends ComponentSkin implements ContainerListener,\n    ContainerMouseListener {\n    /**\n     * Focus traversal policy that determines traversal order based on the order\n     * of components in the container's component sequence.\n     */\n    public static class IndexFocusTraversalPolicy implements FocusTraversalPolicy {\n        private boolean wrap;\n\n        public IndexFocusTraversalPolicy() {\n            this(false);\n        }\n\n        public IndexFocusTraversalPolicy(final boolean wrap) {\n            this.wrap = wrap;\n        }\n\n<fim_suffix>        @Override\n        public Component getNextComponent(final Container container, final Component component,\n            final FocusTraversalDirection direction) {\n            Utils.checkNull(container, \"container\");\n            Utils.checkNull(direction, \"direction\");\n\n            Component nextComponent = null;\n\n            int n = container.getLength();\n            if (n > 0) {\n                switch (direction) {\n                    case FORWARD:\n                        if (component == null) {\n                            // Return the first component in the sequence\n                            nextComponent = container.get(0);\n                        } else {\n                            // Return the next component in the sequence\n                            int index = container.indexOf(component);\n                            if (index == -1) {\n                                throw new IllegalArgumentException(\"Component is not a child of the container.\");\n                            }\n\n                            if (index < n - 1) {\n                                nextComponent = container.get(index + 1);\n                            } else {\n                                if (wrap) {\n                                    nextComponent = container.get(0);\n                                }\n                            }\n                        }\n\n                        break;\n\n                    case BACKWARD:\n                        if (component == null) {\n                            // Return the last component in the sequence\n                            nextComponent = container.get(n - 1);\n                        } else {\n                            // Return the previous component in the sequence\n                            int index = container.indexOf(component);\n                            if (index == -1) {\n                                throw new IllegalArgumentException(\"Component is not a child of the container.\");\n                            }\n\n                            if (index > 0) {\n                                nextComponent = container.get(index - 1);\n                            } else {\n                                if (wrap) {\n                                    nextComponent = container.get(n - 1);\n                                }\n                            }\n                        }\n\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n\n            return nextComponent;\n        }\n    }\n\n    private Paint backgroundPaint = null;\n\n    private static final FocusTraversalPolicy DEFAULT_FOCUS_TRAVERSAL_POLICY = new IndexFocusTraversalPolicy();\n\n    @Override\n    public void install(final Component component) {\n        super.install(component);\n\n        Container container = (Container) component;\n\n        // Add this as a container listener\n        container.getContainerListeners().add(this);\n        container.getContainerMouseListeners().add(this);\n\n        // Set the focus traversal policy\n        container.setFocusTraversalPolicy(DEFAULT_FOCUS_TRAVERSAL_POLICY);\n    }\n\n    @Override\n    public int getPreferredWidth(final int height) {\n        return 0;\n    }\n\n    @Override\n    public int getPreferredHeight(final int width) {\n        return 0;\n    }\n\n    @Override\n    public void paint(final Graphics2D graphics) {\n        if (backgroundPaint != null) {\n            graphics.setPaint(backgroundPaint);\n            graphics.fillRect(0, 0, getWidth(), getHeight());\n        }\n    }\n\n    /**\n     * @return <tt>false</tt>; by default, containers are not focusable.\n     */\n    @Override\n    public boolean isFocusable() {\n        return false;\n    }\n\n    @Override\n    public boolean isOpaque() {\n        return (backgroundPaint != null && backgroundPaint.getTransparency() == Transparency.OPAQUE);\n    }\n\n    /**\n     * @return The {@link Paint} object used to paint the background of the\n     * container.\n     */\n    public Paint getBackgroundPaint() {\n        return backgroundPaint;\n    }\n\n    /**\n     * Sets the object used to paint the background of the container.\n     *\n     * @param backgroundPaint The new {@link Paint} object to paint the background.\n     */\n    public void setBackgroundPaint(final Paint backgroundPaint) {\n        this.backgroundPaint = backgroundPaint;\n        repaintComponent();\n    }\n\n    /**\n     * Sets the object used to paint the background of the container.\n     *\n     * @param backgroundPaint A string recognized by Pivot as a\n     * {@linkplain GraphicsUtilities#decodePaint(String) Color or Paint value}.\n     */\n    public final void setBackgroundPaint(final String backgroundPaint) {\n        setBackgroundPaint(GraphicsUtilities.decodePaint(backgroundPaint));\n    }\n\n    /**\n     * Sets the object used to paint the background of the container.\n     *\n     * @param backgroundPaint A dictionary containing a\n     * {@linkplain GraphicsUtilities#decodePaint(Dictionary) Paint description}.\n     */\n    public final void setBackgroundPaint(final Dictionary<String, ?> backgroundPaint) {\n        setBackgroundPaint(GraphicsUtilities.decodePaint(backgroundPaint));\n    }\n\n    /**\n     * @return The color of the container's background if a solid color has been\n     * set as the background; otherwise {@code null}.\n     */\n    public Color getBackgroundColor() {\n        return (backgroundPaint instanceof Color) ? (Color) backgroundPaint : null;\n    }\n\n    /**\n     * Sets the background of the container to a solid color.\n     *\n     * @param backgroundColor The new background color for the container.\n     */\n    public void setBackgroundColor(final Color backgroundColor) {\n        setBackgroundPaint(backgroundColor);\n    }\n\n    /**\n     * Sets the background of the container to a solid color.\n     *\n     * @param backgroundColor Any of the\n     * {@linkplain GraphicsUtilities#decodeColor color values recognized by\n     * Pivot}.\n     */\n    public final void setBackgroundColor(final String backgroundColor) {\n        setBackgroundColor(GraphicsUtilities.decodeColor(backgroundColor, \"backgroundColor\"));\n    }\n\n    /**\n     * Sets the background of the container to one of the theme colors.\n     *\n     * @param backgroundColor An index into the theme's color palette.\n     */\n    public final void setBackgroundColor(final int backgroundColor) {\n        Theme theme = currentTheme();\n        setBackgroundColor(theme.getColor(backgroundColor));\n    }\n\n    // Container events\n    @Override\n    public void componentInserted(final Container container, final int index) {\n        // No-op\n    }\n\n    @Override\n    public void componentsRemoved(final Container container, final int index, final Sequence<Component> removed) {\n        // No-op\n    }\n\n    @Override\n    public void componentMoved(final Container container, final int from, final int to) {\n        // No-op\n    }\n\n    @Override\n    public void focusTraversalPolicyChanged(final Container container,\n        final FocusTraversalPolicy previousFocusTraversalPolicy) {\n        // No-op\n    }\n\n    @Override\n    public boolean mouseMove(final Container container, final int x, final int y) {\n        return false;\n    }\n\n    @Override\n    public boolean mouseDown(final Container container, final Mouse.Button button, final int x, final int y) {\n        return false;\n    }\n\n    @Override\n    public boolean mouseUp(final Container container, final Mouse.Button button, final int x, final int y) {\n        return false;\n    }\n\n    @Override\n    public boolean mouseWheel(final Container container, final Mouse.ScrollType scrollType, final int scrollAmount,\n        final int wheelRotation, final int x, final int y) {\n        return false;\n    }\n}<fim_middle>// function below is long method\n"}