{"text": "<fim_prefix>/*\n * Copyright (c) 2015 Uber Technologies, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\npackage com.uber.tchannel.messages;\n\nimport com.uber.tchannel.api.ResponseCode;\nimport com.uber.tchannel.utils.TChannelUtilities;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.util.CharsetUtil;\nimport java.nio.charset.StandardCharsets;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.Map;\n\n/**\n * Represents a TChannel response message with `raw` arg scheme encoding.\n * <p>\n * All RPC frames over TChannel contain 3 opaque byte payloads, namely, arg{1,2,3}. TChannel makes no assumptions\n * about the contents of these frames. In order to make sense of these arg payloads, TChannel has the notion of\n * `arg messages` which define standardized schemas and serialization formats over the raw arg{1,2,3} payloads. The\n * supported `arg messages` are `thrift`, `json`, `http` and `sthrift`. These request / response frames will be built\n * on top of {@link RawRequest} and {@link RawResponse} frames.\n * <p>\n * <h3>From the Docs</h3>\n * The `raw` encoding is intended for any custom encodings you want to do that\n * are not part of TChannel but are application specific.\n */\npublic class RawResponse extends Response {\n\n    private @Nullable String header = null;\n    private @Nullable String body = null;\n\n    private RawResponse(Builder builder) {\n        super(builder);\n    }\n\n    protected RawResponse(\n        long id,\n        ResponseCode responseCode,\n        Map<String, String> transportHeaders,\n        ByteBuf arg2,\n        ByteBuf arg3\n    ) {\n        super(id, responseCode, transportHeaders, arg2, arg3);\n    }\n\n    protected RawResponse(ErrorResponse error) {\n        super(error);\n    }\n\n    public @NotNull String getHeader() {\n        if (header == null) {\n            header = arg2 == null ? \"\" : arg2.toString(CharsetUtil.UTF_8);\n        }\n        return header;\n    }\n\n    public @NotNull String getBody() {\n        if (body == null) {\n            body = arg3 == null ? \"\" : arg3.toString(CharsetUtil.UTF_8);\n        }\n        return body;\n    }\n\n    @Override\n    public String toString() {\n        if (isError()) {\n            return getError().toString();\n        }\n\n        return String.format(\n            \"<%s responseCode=%s transportHeaders=%s header=%s body=%s>\",\n            this.getClass().getSimpleName(),\n            this.responseCode,\n            this.transportHeaders,\n            this.getHeader(),\n            this.getBody()\n        );\n    }\n\n    public static class Builder extends Response.Builder {\n\n        protected String header = null;\n        protected String body = null;\n\n        public Builder(@NotNull Request req) {\n            super(req);\n        }\n\n        @Override\n        public @NotNull Builder setResponseCode(ResponseCode responseCode) {\n            this.responseCode = responseCode;\n            return this;\n        }\n\n        @Override\n        public @NotNull Builder setArg2(ByteBuf arg2) {\n            super.setArg2(arg2);\n            this.header = null;\n            return this;\n        }\n\n        @Override\n        public @NotNull Builder setArg3(ByteBuf arg3) {\n            super.setArg3(arg3);\n            this.body = null;\n            return this;\n        }\n\n        @Override\n        public @NotNull Builder setTransportHeader(String key, String value) {\n            super.setTransportHeader(key, value);\n            return this;\n        }\n\n        @Override\n        public @NotNull Builder setTransportHeaders(@NotNull Map<String, String> transportHeaders) {\n            super.setTransportHeaders(transportHeaders);\n            return this;\n        }\n\n<fim_suffix>        public final @NotNull Builder setHeader(@NotNull String header) {\n            this.setArg2(Unpooled.wrappedBuffer(header.getBytes(StandardCharsets.UTF_8)));\n            this.header = header;\n            return this;\n        }\n\n        public final @NotNull Builder setBody(@NotNull String body) {\n            setArg3(Unpooled.wrappedBuffer(body.getBytes(StandardCharsets.UTF_8)));\n            this.body = body;\n            return this;\n        }\n\n        @Override\n        public @NotNull Builder validate() {\n            super.validate();\n\n            if (arg2 == null) {\n                arg2 = TChannelUtilities.emptyByteBuf;\n            }\n\n            if (arg3 == null) {\n                arg3 = TChannelUtilities.emptyByteBuf;\n            }\n\n            return this;\n        }\n\n        public @NotNull RawResponse build() {\n            return new RawResponse(this.validate());\n        }\n    }\n\n}<fim_middle>// function below has no smell\n"}