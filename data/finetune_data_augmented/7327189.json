{"text": "<fim_prefix>\n<fim_suffix>public class QueryItemTreeControl extends Composite {\n    public static interface QueryItemDoubleClickedListener {\n        public void queryItemDoubleClicked(QueryItem queryItem);\n    }\n    public static interface QueryItemSelectionListener {\n        public void queryItemSelected(QueryItem queryItem);\n    }\n    /*\n     * a reference to all the projects on the server\n     */\n    private final Project[] projects;\n    /*\n     * a sorted array of the names of the currently \"active\" projects, where\n     * active means the user has added the project to team explorer\n     */\n    private final String[] activeProjectNames;\n    /*\n     * the tree viewer this composite is based around\n     */\n    private TreeViewer treeViewer;\n    /*\n     * used to track the currently selected query in the tree\n     */\n    private QueryItem selectedQueryItem;\n    private final QueryItemType itemTypes;\n    /*\n     * listener set\n     */\n    private final Set<QueryItemDoubleClickedListener> queryDoubleClickListeners =\n        new HashSet<QueryItemDoubleClickedListener>();\n    private final Set<QueryItemSelectionListener> querySelectionListeners = new HashSet<QueryItemSelectionListener>();\n    public QueryItemTreeControl(\n        final Composite parent,\n        final int style,\n        final TFSServer server,\n        final Project[] projects,\n        final QueryItem initialQueryItem,\n        final QueryItemType itemTypes) {\n        this(\n            parent,\n            style,\n            projects,\n            ProjectInfoHelper.getProjectNames(server.getProjectCache().getActiveTeamProjects()),\n            initialQueryItem,\n            itemTypes);\n    }\n    public QueryItemTreeControl(\n        final Composite parent,\n        final int style,\n        final Project[] projects,\n        final String[] activeProjects,\n        final QueryItem initialQueryItem,\n        final QueryItemType itemTypes) {\n        super(parent, style);\n        this.projects = projects;\n        selectedQueryItem = initialQueryItem;\n        this.itemTypes = itemTypes;\n        activeProjectNames = activeProjects;\n        Arrays.sort(activeProjectNames);\n        if (activeProjectNames.length > 0) {\n            /*\n             * set up the tree control in this composite\n             */\n            createUI();\n        } else {\n            createNoProjectsUI();\n        }\n    }\n    public QueryItem getSelectedQueryItem() {\n        return selectedQueryItem;\n    }\n    public void addQueryItemDoubleClickedListener(final QueryItemDoubleClickedListener listener) {\n        synchronized (queryDoubleClickListeners) {\n            queryDoubleClickListeners.add(listener);\n        }\n    }\n    public void removeQueryItemDoubleClickedListener(final QueryItemDoubleClickedListener listener) {\n        synchronized (queryDoubleClickListeners) {\n            queryDoubleClickListeners.remove(listener);\n        }\n    }\n    public void addQueryItemSelectionListener(final QueryItemSelectionListener listener) {\n        synchronized (querySelectionListeners) {\n            querySelectionListeners.add(listener);\n        }\n    }\n    public void removeQueryItemSelectionListener(final QueryItemSelectionListener listener) {\n        synchronized (querySelectionListeners) {\n            querySelectionListeners.remove(listener);\n        }\n    }\n    private void createUI() {\n        setLayout(new FillLayout());\n        treeViewer = new TreeViewer(this, SWT.BORDER);\n        treeViewer.setContentProvider(new ContentProvider(activeProjectNames));\n        treeViewer.setLabelProvider(new LabelProvider());\n        treeViewer.addDoubleClickListener(new DoubleClickListener(treeViewer, queryDoubleClickListeners));\n        treeViewer.addSelectionChangedListener(new SelectionChangedListener(querySelectionListeners));\n        addContextMenu();\n        treeViewer.setInput(projects);\n        /*\n         * set the initial selection if applicable\n         */\n        if (selectedQueryItem != null) {\n            treeViewer.setSelection(new StructuredSelection(selectedQueryItem), true);\n        }\n    }\n    private void createNoProjectsUI() {\n        setLayout(new FillLayout());\n        final Label label = new Label(this, SWT.WRAP);\n        label.setText(Messages.getString(\"QueryItemTreeControl.NoTeamProjectsLabelText\")); //$NON-NLS-1$\n    }\n    private void addContextMenu() {\n        final MenuManager menuMgr = new MenuManager(\"#PopUp\"); //$NON-NLS-1$\n        final IAction copyToClipboardAction = new Action() {\n            @Override\n            public void run() {\n                final IStructuredSelection selection = (IStructuredSelection) treeViewer.getSelection();\n                final QueryDefinition queryDefinition = (QueryDefinition) selection.getFirstElement();\n                UIHelpers.copyToClipboard(queryDefinition.getQueryText());\n            }\n        };\n        copyToClipboardAction.setText(Messages.getString(\"QueryItemTreeControl.CopyWiqlToClipboard\")); //$NON-NLS-1$\n        copyToClipboardAction.setEnabled(false);\n        menuMgr.add(copyToClipboardAction);\n        treeViewer.getControl().setMenu(menuMgr.createContextMenu(treeViewer.getControl()));\n        treeViewer.addSelectionChangedListener(new ISelectionChangedListener() {\n            @Override\n            public void selectionChanged(final SelectionChangedEvent event) {\n                final IStructuredSelection selection = (IStructuredSelection) event.getSelection();\n                final boolean enable = (selection.getFirstElement() instanceof QueryDefinition);\n                copyToClipboardAction.setEnabled(enable);\n            }\n        });\n    }\n    private class SelectionChangedListener implements ISelectionChangedListener {\n        private final Set<QueryItemSelectionListener> listeners;\n        public SelectionChangedListener(final Set<QueryItemSelectionListener> listeners) {\n            this.listeners = listeners;\n        }\n        @Override\n        public void selectionChanged(final SelectionChangedEvent event) {\n            final Object selected = ((IStructuredSelection) event.getSelection()).getFirstElement();\n            if (selected instanceof QueryItem && itemTypes.contains(((QueryItem) selected).getType())) {\n                selectedQueryItem = (QueryItem) selected;\n            } else {\n                selectedQueryItem = null;\n            }\n            synchronized (listeners) {\n                for (final QueryItemSelectionListener listener : listeners) {\n                    listener.queryItemSelected(selectedQueryItem);\n                }\n            }\n        }\n    }\n    private static class DoubleClickListener extends TreeViewerDoubleClickListener {\n        private final Set<QueryItemDoubleClickedListener> listeners;\n        public DoubleClickListener(final TreeViewer treeViewer, final Set<QueryItemDoubleClickedListener> listeners) {\n            super(treeViewer);\n            this.listeners = listeners;\n        }\n        @Override\n        public void doubleClick(final DoubleClickEvent event) {\n            super.doubleClick(event);\n            final Object element = ((IStructuredSelection) event.getSelection()).getFirstElement();\n            if (element instanceof QueryDefinition) {\n                final QueryDefinition queryDefinition = (QueryDefinition) element;\n                synchronized (listeners) {\n                    for (final QueryItemDoubleClickedListener listener : listeners) {\n                        listener.queryItemDoubleClicked(queryDefinition);\n                    }\n                }\n            }\n        }\n    }\n    private class ContentProvider extends TreeContentProvider {\n        private final String[] activeProjectNames;\n        public ContentProvider(final String[] activeProjectNames) {\n            this.activeProjectNames = activeProjectNames;\n        }\n        @Override\n        public Object getParent(final Object element) {\n            if (element instanceof QueryHierarchy) {\n                return null;\n            }\n            return ((QueryItem) element).getParent();\n        }\n        @Override\n        public Object[] getChildren(final Object parentElement) {\n            final QueryItemType displayTypes = getDisplayTypes();\n            if (parentElement instanceof QueryFolder) {\n                final List<QueryItem> childList = new ArrayList<QueryItem>();\n                final QueryItem[] children = ((QueryFolder) parentElement).getItems();\n                for (final QueryItem child : children) {\n                    if (displayTypes.contains(child.getType())) {\n                        childList.add(child);\n                    }\n                }\n                return childList.toArray(new QueryItem[childList.size()]);\n            }\n            return null;\n        }\n        @Override\n        public boolean hasChildren(final Object element) {\n            final QueryItemType displayTypes = getDisplayTypes();\n            if (element instanceof QueryFolder) {\n                final QueryItem[] children = ((QueryFolder) element).getItems();\n                for (int i = 0; i < children.length; i++) {\n                    if (displayTypes.contains(children[i].getType())) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        private QueryItemType getDisplayTypes() {\n            if (itemTypes.contains(QueryItemType.QUERY_DEFINITION)) {\n                return QueryItemType.ALL;\n            } else if (itemTypes.contains(QueryItemType.QUERY_FOLDER)) {\n                return QueryItemType.ALL_FOLDERS;\n            }\n            return itemTypes;\n        }\n        @Override\n        public Object[] getElements(final Object inputElement) {\n            final Project[] projects = (Project[]) inputElement;\n            final List<QueryHierarchy> queryHierarchies = new ArrayList<QueryHierarchy>();\n            final Map<String, Project> availableProjects = new HashMap<String, Project>();\n            for (final Project project : projects) {\n                availableProjects.put(project.getName(), project);\n            }\n            for (final String activeProjectName : activeProjectNames) {\n                final Project project = availableProjects.get(activeProjectName);\n                if (project != null) {\n                    queryHierarchies.add(project.getQueryHierarchy());\n                }\n            }\n            return queryHierarchies.toArray(new QueryHierarchy[queryHierarchies.size()]);\n        }\n    }<fim_middle>// class below is blob\n"}