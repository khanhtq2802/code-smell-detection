{"text": "<fim_prefix>import org.springframework.jdbc.support.JdbcUtils;\nimport org.springframework.util.Assert;\n/**\n * copy from otter3.0\n * \n * @author xiaoqing.zhouxq 2012-3-30 \u4e0a\u534810:43:04\n * @author zebin.xuzb add filter for data\n */\npublic class DdlUtils {\n    private static final Logger               logger                = LoggerFactory.getLogger(DdlUtils.class);\n    private static TableType[]                SUPPORTED_TABLE_TYPES = new TableType[] { TableType.view, TableType.table };\n    private final static Map<Integer, String> _defaultSizes         = new HashMap<Integer, String>();\n    static {\n        _defaultSizes.put(new Integer(1), \"254\");\n        _defaultSizes.put(new Integer(12), \"254\");\n        _defaultSizes.put(new Integer(-1), \"254\");\n        _defaultSizes.put(new Integer(-2), \"254\");\n        _defaultSizes.put(new Integer(-3), \"254\");\n        _defaultSizes.put(new Integer(-4), \"254\");\n        _defaultSizes.put(new Integer(4), \"32\");\n        _defaultSizes.put(new Integer(-5), \"64\");\n        _defaultSizes.put(new Integer(7), \"7,0\");\n        _defaultSizes.put(new Integer(6), \"15,0\");\n        _defaultSizes.put(new Integer(8), \"15,0\");\n        _defaultSizes.put(new Integer(3), \"15,15\");\n        _defaultSizes.put(new Integer(2), \"15,15\");\n    }\n    /**\n     * !!! Only supports MySQL\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static List<String> findSchemas(JdbcTemplate jdbcTemplate, final String schemaPattern) {\n        try {\n            if (StringUtils.isEmpty(schemaPattern)) {\n                return jdbcTemplate.query(\"show databases\", new SingleColumnRowMapper(String.class));\n            }\n            return jdbcTemplate.query(\"show databases like ?\",\n                new Object[] { schemaPattern },\n                new SingleColumnRowMapper(String.class));\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            return new ArrayList<String>();\n        }\n    }\n    /**\n     * !!! Only supports MySQL\n     */\n    public static List<String> findSchemas(JdbcTemplate jdbcTemplate, final String schemaPattern,\n                                           final DdlSchemaFilter ddlSchemaFilter) {\n        List<String> schemas = findSchemas(jdbcTemplate, schemaPattern);\n        if (ddlSchemaFilter == null) {\n            return schemas;\n        }\n        List<String> filterSchemas = new ArrayList<String>();\n        for (String schema : schemas) {\n            if (ddlSchemaFilter.accept(schema)) {\n                filterSchemas.add(schema);\n            }\n        }\n        return filterSchemas;\n    }\n    public static Table findTable(JdbcTemplate jdbcTemplate, final String catalogName, final String schemaName,\n                                  final String tableName) throws Exception {\n        return findTable(jdbcTemplate, catalogName, schemaName, tableName, null);\n    }\n    public static Table findTable(final JdbcTemplate jdbcTemplate, final String catalogName, final String schemaName,\n                                  final String tableName, final DdlUtilsFilter filter) throws Exception {\n        return (Table) jdbcTemplate.execute(new ConnectionCallback() {\n            public Object doInConnection(Connection con) throws SQLException, DataAccessException {\n                Table table = null;\n                DatabaseMetaDataWrapper metaData = new DatabaseMetaDataWrapper();\n                boolean isDRDS = false;\n                try {\n                    if (filter != null) {\n                        con = filter.filterConnection(con);\n                        Assert.notNull(con);\n                    }\n                    DatabaseMetaData databaseMetaData = con.getMetaData();\n                    if (filter != null) {\n                        databaseMetaData = filter.filterDataBaseMetaData(jdbcTemplate, con, databaseMetaData);\n                        Assert.notNull(databaseMetaData);\n                    }\n                    String databaseName = databaseMetaData.getDatabaseProductName();\n                    String version = databaseMetaData.getDatabaseProductVersion();\n                    if (StringUtils.startsWithIgnoreCase(databaseName, \"mysql\")\n                        && StringUtils.contains(version, \"-TDDL-\")) {\n                        isDRDS = true;\n                    }\n                    metaData.setMetaData(databaseMetaData);\n                    metaData.setTableTypes(TableType.toStrings(SUPPORTED_TABLE_TYPES));\n                    metaData.setCatalog(catalogName);\n                    metaData.setSchemaPattern(schemaName);\n                    String convertTableName = tableName;\n                    if (databaseMetaData.storesUpperCaseIdentifiers()) {\n                        metaData.setCatalog(catalogName.toUpperCase());\n                        metaData.setSchemaPattern(schemaName.toUpperCase());\n                        convertTableName = tableName.toUpperCase();\n                    }\n                    if (databaseMetaData.storesLowerCaseIdentifiers()) {\n                        metaData.setCatalog(catalogName.toLowerCase());\n                        metaData.setSchemaPattern(schemaName.toLowerCase());\n                        convertTableName = tableName.toLowerCase();\n                    }\n                    ResultSet tableData = null;\n                    try {\n                        tableData = metaData.getTables(convertTableName);\n                        while ((tableData != null) && tableData.next()) {\n                            Map<String, Object> values = readColumns(tableData, initColumnsForTable());\n                            table = readTable(metaData, values);\n                            if (table.getName().equalsIgnoreCase(tableName)) {\n                                break;\n                            }\n                        }\n                    } finally {\n                        JdbcUtils.closeResultSet(tableData);\n                    }\n                } catch (Exception e) {\n                    logger.error(e.getMessage(), e);\n                }\n                makeAllColumnsPrimaryKeysIfNoPrimaryKeysFound(table);\n                if (isDRDS) {\n                    makeDRDSShardColumnsAsPrimaryKeys(table, jdbcTemplate, catalogName, schemaName, tableName);\n                }\n                return table;\n            }\n        });\n    }\n    @SuppressWarnings(\"unchecked\")\n    public static List<Table> findTables(final JdbcTemplate jdbcTemplate, final String catalogName,\n                                         final String schemaName, final String tableNamePattern,\n                                         final DdlUtilsFilter filter, final DdlTableNameFilter tableNameFilter)\n                                                                                                               throws Exception {\n        return (List<Table>) jdbcTemplate.execute(new ConnectionCallback() {\n            public Object doInConnection(Connection con) throws SQLException, DataAccessException {\n                List<Table> tables = new ArrayList<Table>();\n                DatabaseMetaDataWrapper metaData = new DatabaseMetaDataWrapper();\n                boolean isDRDS = false;\n                try {\n                    if (filter != null) {\n                        con = filter.filterConnection(con);\n                        Assert.notNull(con);\n                    }\n                    DatabaseMetaData databaseMetaData = con.getMetaData();\n                    if (filter != null) {\n                        databaseMetaData = filter.filterDataBaseMetaData(jdbcTemplate, con, databaseMetaData);\n                        Assert.notNull(databaseMetaData);\n                    }\n                    String databaseName = databaseMetaData.getDatabaseProductName();\n                    String version = databaseMetaData.getDatabaseProductVersion();\n                    if (StringUtils.startsWithIgnoreCase(databaseName, \"mysql\")\n                        && StringUtils.contains(version, \"-TDDL-\")) {\n                        isDRDS = true;\n                    }\n                    metaData.setMetaData(databaseMetaData);\n                    metaData.setTableTypes(TableType.toStrings(SUPPORTED_TABLE_TYPES));\n                    metaData.setCatalog(catalogName);\n                    metaData.setSchemaPattern(schemaName);\n                    String convertTableName = tableNamePattern;\n                    if (databaseMetaData.storesUpperCaseIdentifiers()) {\n                        metaData.setCatalog(catalogName.toUpperCase());\n                        metaData.setSchemaPattern(schemaName.toUpperCase());\n                        convertTableName = tableNamePattern.toUpperCase();\n                    }\n                    if (databaseMetaData.storesLowerCaseIdentifiers()) {\n                        metaData.setCatalog(catalogName.toLowerCase());\n                        metaData.setSchemaPattern(schemaName.toLowerCase());\n                        convertTableName = tableNamePattern.toLowerCase();\n                    }\n                    ResultSet tableData = null;\n                    try {\n                        tableData = metaData.getTables(convertTableName);\n                        while ((tableData != null) && tableData.next()) {\n                            Map<String, Object> values = readColumns(tableData, initColumnsForTable());\n                            Table table = readTable(metaData, values);\n                            if ((tableNameFilter == null)\n                                || tableNameFilter.accept(catalogName, schemaName, table.getName())) {\n                                tables.add(table);\n                            }\n                        }\n                    } finally {\n                        JdbcUtils.closeResultSet(tableData);\n                    }\n                } catch (Exception e) {\n                    logger.error(e.getMessage(), e);\n                }\n                for (Table table : tables) {\n                    makeAllColumnsPrimaryKeysIfNoPrimaryKeysFound(table);\n                    if (isDRDS) {\n                        makeDRDSShardColumnsAsPrimaryKeys(table, jdbcTemplate, catalogName, schemaName, table.getName());\n                    }\n                }\n                return tables;\n            }\n        });\n    }\n    /**\n     * Treat tables with no primary keys as a table with all primary keys.\n     */\n<fim_suffix>    private static void makeAllColumnsPrimaryKeysIfNoPrimaryKeysFound(Table table) {\n        if ((table != null) && (table.getPrimaryKeyColumns() != null) && (table.getPrimaryKeyColumns().length == 0)) {\n            Column[] allCoumns = table.getColumns();\n            for (Column column : allCoumns) {\n                column.setPrimaryKey(true);\n            }\n        }\n    }<fim_middle>// function below has no smell\n"}