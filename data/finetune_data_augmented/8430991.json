{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.management.mbean;\n\nimport java.util.Set;\n\nimport org.apache.camel.CamelContext;\nimport org.apache.camel.NoTypeConversionAvailableException;\nimport org.apache.camel.RuntimeCamelException;\nimport org.apache.camel.api.management.ManagedResource;\nimport org.apache.camel.api.management.mbean.ManagedBacklogDebuggerMBean;\nimport org.apache.camel.processor.interceptor.BacklogDebugger;\nimport org.apache.camel.spi.Language;\nimport org.apache.camel.spi.ManagementStrategy;\n\n@ManagedResource(description = \"Managed BacklogDebugger\")\npublic class ManagedBacklogDebugger implements ManagedBacklogDebuggerMBean {\n\n    private final CamelContext camelContext;\n    private final BacklogDebugger backlogDebugger;\n\n    public ManagedBacklogDebugger(CamelContext camelContext, BacklogDebugger backlogDebugger) {\n        this.camelContext = camelContext;\n        this.backlogDebugger = backlogDebugger;\n    }\n\n    public void init(ManagementStrategy strategy) {\n        // do nothing\n    }\n\n    public CamelContext getContext() {\n        return camelContext;\n    }\n\n    public BacklogDebugger getBacklogDebugger() {\n        return backlogDebugger;\n    }\n\n    public String getCamelId() {\n        return camelContext.getName();\n    }\n\n    public String getCamelManagementName() {\n        return camelContext.getManagementName();\n    }\n\n    public String getLoggingLevel() {\n        return backlogDebugger.getLoggingLevel();\n    }\n\n<fim_suffix>    public void setLoggingLevel(String level) {\n        backlogDebugger.setLoggingLevel(level);\n    }\n\n    public boolean isEnabled() {\n        return backlogDebugger.isEnabled();\n    }\n\n    public void enableDebugger() {\n        backlogDebugger.enableDebugger();\n    }\n\n    public void disableDebugger() {\n        backlogDebugger.disableDebugger();\n    }\n\n    public void addBreakpoint(String nodeId) {\n        backlogDebugger.addBreakpoint(nodeId);\n    }\n\n    public void addConditionalBreakpoint(String nodeId, String language, String predicate) {\n        backlogDebugger.addConditionalBreakpoint(nodeId, language, predicate);\n    }\n\n    public void removeBreakpoint(String nodeId) {\n        backlogDebugger.removeBreakpoint(nodeId);\n    }\n\n    public void removeAllBreakpoints() {\n        backlogDebugger.removeAllBreakpoints();\n    }\n\n    public Set<String> getBreakpoints() {\n        return backlogDebugger.getBreakpoints();\n    }\n\n    public void resumeBreakpoint(String nodeId) {\n        backlogDebugger.resumeBreakpoint(nodeId);\n    }\n\n    public void setMessageBodyOnBreakpoint(String nodeId, Object body) {\n        backlogDebugger.setMessageBodyOnBreakpoint(nodeId, body);\n    }\n\n    public void setMessageBodyOnBreakpoint(String nodeId, Object body, String type) {\n        try {\n            Class<?> classType = camelContext.getClassResolver().resolveMandatoryClass(type);\n            backlogDebugger.setMessageBodyOnBreakpoint(nodeId, body, classType);\n        } catch (ClassNotFoundException e) {\n            throw RuntimeCamelException.wrapRuntimeCamelException(e);\n        }\n    }\n\n    public void removeMessageBodyOnBreakpoint(String nodeId) {\n        backlogDebugger.removeMessageBodyOnBreakpoint(nodeId);\n    }\n\n    public void setMessageHeaderOnBreakpoint(String nodeId, String headerName, Object value) {\n        try {\n            backlogDebugger.setMessageHeaderOnBreakpoint(nodeId, headerName, value);\n        } catch (NoTypeConversionAvailableException e) {\n            throw RuntimeCamelException.wrapRuntimeCamelException(e);\n        }\n    }\n\n    public void setMessageHeaderOnBreakpoint(String nodeId, String headerName, Object value, String type) {\n        try {\n            Class<?> classType = camelContext.getClassResolver().resolveMandatoryClass(type);\n            backlogDebugger.setMessageHeaderOnBreakpoint(nodeId, headerName, value, classType);\n        } catch (Exception e) {\n            throw RuntimeCamelException.wrapRuntimeCamelException(e);\n        }\n    }\n\n    public void removeMessageHeaderOnBreakpoint(String nodeId, String headerName) {\n        backlogDebugger.removeMessageHeaderOnBreakpoint(nodeId, headerName);\n    }\n\n    public void resumeAll() {\n        backlogDebugger.resumeAll();\n    }\n\n    public void stepBreakpoint(String nodeId) {\n        backlogDebugger.stepBreakpoint(nodeId);\n    }\n\n    public boolean isSingleStepMode() {\n        return backlogDebugger.isSingleStepMode();\n    }\n\n    public void step() {\n        backlogDebugger.step();\n    }\n\n    public Set<String> getSuspendedBreakpointNodeIds() {\n        return backlogDebugger.getSuspendedBreakpointNodeIds();\n    }\n\n    public void disableBreakpoint(String nodeId) {\n        backlogDebugger.disableBreakpoint(nodeId);\n    }\n\n    public void enableBreakpoint(String nodeId) {\n        backlogDebugger.enableBreakpoint(nodeId);\n    }\n\n    public int getBodyMaxChars() {\n        return backlogDebugger.getBodyMaxChars();\n    }\n\n    public void setBodyMaxChars(int bodyMaxChars) {\n        backlogDebugger.setBodyMaxChars(bodyMaxChars);\n    }\n\n    public boolean isBodyIncludeStreams() {\n        return backlogDebugger.isBodyIncludeStreams();\n    }\n\n    public void setBodyIncludeStreams(boolean bodyIncludeStreams) {\n        backlogDebugger.setBodyIncludeStreams(bodyIncludeStreams);\n    }\n\n    public boolean isBodyIncludeFiles() {\n        return backlogDebugger.isBodyIncludeFiles();\n    }\n\n    public void setBodyIncludeFiles(boolean bodyIncludeFiles) {\n        backlogDebugger.setBodyIncludeFiles(bodyIncludeFiles);\n    }\n\n    public String dumpTracedMessagesAsXml(String nodeId) {\n        return backlogDebugger.dumpTracedMessagesAsXml(nodeId);\n    }\n\n    public long getDebugCounter() {\n        return backlogDebugger.getDebugCounter();\n    }\n\n    public void resetDebugCounter() {\n        backlogDebugger.resetDebugCounter();\n    }\n\n    public String validateConditionalBreakpoint(String language, String predicate) {\n        Language lan = null;\n        try {\n            lan = camelContext.resolveLanguage(language);\n            lan.createPredicate(predicate);\n            return null;\n        } catch (Exception e) {\n            if (lan == null) {\n                return e.getMessage();\n            } else {\n                return \"Invalid syntax \" + predicate + \" due: \" + e.getMessage();\n            }\n        }\n    }\n    \n    public long getFallbackTimeout() {\n        return backlogDebugger.getFallbackTimeout();\n    }\n   \n    public void setFallbackTimeout(long fallbackTimeout) {\n        backlogDebugger.setFallbackTimeout(fallbackTimeout);\n    }\n}<fim_middle>// function below has no smell\n"}