{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.falcon.designer.primitive;\n\nimport org.apache.commons.lang.NotImplementedException;\nimport org.apache.falcon.designer.configuration.ActionConfiguration;\n\nimport javax.annotation.Nonnull;\nimport javax.annotation.Nullable;\n\nimport java.net.URI;\nimport java.util.Map;\n\n/**\n * Actions are components of flows. They encapsulate an atomic\n * execution unit in a flow. If an action is dependent on another\n * action, then the action wont be started unless the preceding\n * action is entirely complete.\n *\n * Few examples of Actions are\n *   1. SSH Action, which executes a shell command on a remote host\n *   2. Data Transform Action, which executes a collection of data transformation\n *      as a single logical unit\n *\n * There are no restrictions imposed on an Action with respect to the input\n * or the output such as in a Transformation.\n */\n<fim_suffix>public abstract class Action<A extends Action, B extends ActionConfiguration> extends Primitive<A, B> {\n\n    protected  static final String TYPE=\"ACTION\";\n\n    @Nonnull\n    public String getType() {\n        return TYPE;\n    }\n\n    /**\n     * Indicates whether this action has any output or not. If this function\n     * returns true, then {@link Action#outputKeys()} and {@link Action#outputFile()} ()}\n     * needs to be implemented by the concrete class.\n     *\n     * @return - True if the action has output that any downstream control or action\n     * can consume, false otherwise.\n     */\n    public abstract boolean hasOutput();\n\n    /**\n     * Are the keys that the action chooses to expose to the external world that\n     * can either be used to manage the flow control or be used as an input in a subsequent\n     * action within the context of a flow. Each key that may be output by this\n     * action would have to declared along with its return type {@link java.sql.Types}.\n     *\n     * If an action output key isn't white listed through this with a specific type,\n     * then default type is assumed {@link java.sql.Types#VARCHAR}. All output keys\n     * are nullable. If null the flow control can assume default values (which may vary\n     * depending on the data type. For ex: VARCHAR(\"\"), NUMERIC(0), DATETIME(CURRENTTIME))\n     *\n     * @return - Output key name and its corresponding data type. If the output key\n     * doesn't conform to this data type, the flow may fail at runtime or may safely assume\n     * default value. The behavior is left to the implementation of the flow compiler\n     * and scheduler.\n     */\n    @Nullable\n    public Map<String, Integer> outputKeys() {\n        if (hasOutput()) {\n            throw new NotImplementedException(getClass() + \"::outputKeys()\");\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns a file name as URI that can be mapped to generic hadoop file system\n     * implementation.\n     *\n     * @return - Fully qualified file name uri as understood by the hadoop file system.\n     */\n    @Nullable\n    public URI outputFile() {\n        if (hasOutput()) {\n            throw new NotImplementedException(getClass() + \"::outputFile()\");\n        } else {\n            return null;\n        }\n    }\n}<fim_middle>// class below has no smell\n"}