{"text": "<fim_prefix>/**\n * Copyright (c) 2018 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * https://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\npackage org.eclipse.vorto.model.runtime;\n\nimport java.util.Optional;\nimport org.eclipse.vorto.model.FunctionblockModel;\nimport org.eclipse.vorto.model.ModelProperty;\n\npublic class FunctionblockProperty {\n\n  private Object propertyValue;\n  private ModelProperty model;\n  private String infomodelProperty;\n  private FunctionblockModel parent;\n\n  public static PropertyBuilder newBuilder(FunctionblockModel model, String infomodelProperty) {\n    return new PropertyBuilder(model, infomodelProperty);\n  }\n\n  private FunctionblockProperty() {\n\n  }\n\n  private FunctionblockProperty(Object propertyValue, ModelProperty model,\n      FunctionblockModel parent) {\n    super();\n    this.propertyValue = propertyValue;\n    this.model = model;\n    this.parent = parent;\n  }\n\n  public ModelProperty getModel() {\n    return model;\n  }\n\n  public Object getPropertyValue() {\n    return propertyValue;\n  }\n\n  public FunctionblockModel getParent() {\n    return parent;\n  }\n\n  public String getInfomodelProperty() {\n    return this.infomodelProperty;\n  }\n\n  @Override\n  public String toString() {\n    return \"FunctionblockProperty [propertyValue=\" + propertyValue + \", model=\" + model\n        + \", parent=\" + parent + \"]\";\n  }\n\n<fim_suffix>  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + ((model == null) ? 0 : model.hashCode());\n    result = prime * result + ((parent == null) ? 0 : parent.hashCode());\n    result = prime * result + ((propertyValue == null) ? 0 : propertyValue.hashCode());\n    return result;\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    FunctionblockProperty other = (FunctionblockProperty) obj;\n    if (model == null) {\n      if (other.model != null)\n        return false;\n    } else if (!model.equals(other.model))\n      return false;\n    if (parent == null) {\n      if (other.parent != null)\n        return false;\n    } else if (!parent.equals(other.parent))\n      return false;\n    if (propertyValue == null) {\n      if (other.propertyValue != null)\n        return false;\n    } else if (!propertyValue.equals(other.propertyValue))\n      return false;\n    return true;\n  }\n\n  public static class PropertyBuilder {\n    private FunctionblockProperty prop;\n\n    public PropertyBuilder(FunctionblockModel parent, String infomodelProp) {\n      this.prop = new FunctionblockProperty();\n      this.prop.parent = parent;\n      this.prop.infomodelProperty = infomodelProp;\n    }\n\n    public PropertyBuilder property(String name) {\n      Optional<ModelProperty> property = prop.parent.getConfigurationProperties().stream()\n          .filter(p -> p.getName().equals(name)).findFirst();\n      if (!property.isPresent()) {\n        throw new IllegalArgumentException(\"Property is not defined in model\");\n      }\n      this.prop.model = property.get();\n      return this;\n    }\n\n    public PropertyBuilder value(Object value) {\n      this.prop.propertyValue = value;\n      return this;\n    }\n\n    public FunctionblockProperty build() {\n      return prop;\n    }\n  }\n\n\n}<fim_middle>// function below has no smell\n"}