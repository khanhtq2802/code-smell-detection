{"text": "<fim_prefix>package org.springframework.roo.addon.dbre.addon.model;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.Stack;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.springframework.roo.addon.dbre.addon.model.DatabaseXmlUtils.IndexType;\nimport org.springframework.roo.model.JavaPackage;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.DefaultHandler;\n/**\n * {@link ContentHandler} implementation for converting the DBRE XML file into a\n * {@link Database} object.\n * \n * @author Alan Stewart\n * @author Juan Carlos Garc\u00eda\n * @since 1.1\n */\npublic class DatabaseContentHandler extends DefaultHandler {\n  private Database database;\n  private JavaPackage destinationPackage;\n  private boolean disableGeneratedIdentifiers;\n  private boolean disableVersionFields;\n  private boolean includeNonPortableAttributes;\n  private String moduleName;\n  private boolean repository;\n  private boolean service;\n  private final Stack<Object> stack = new Stack<Object>();\n  private final Set<Table> tables = new LinkedHashSet<Table>();\n  private boolean testAutomatically;\n  /**\n   * Constructor\n   */\n  public DatabaseContentHandler() {\n    super();\n  }\n  @Override\n  public void endElement(final String uri, final String localName, final String qName)\n      throws SAXException {\n    final Object tmp = stack.pop();\n    if (qName.equals(\"option\")) {\n      final Option option = (Option) tmp;\n      if (stack.peek() instanceof ForeignKey) {\n        if (option.getKey().equals(\"exported\")) {\n          ((ForeignKey) stack.peek()).setExported(Boolean.parseBoolean(option.getValue()));\n        }\n        if (option.getKey().equals(\"foreignSchemaName\")) {\n          ((ForeignKey) stack.peek()).setForeignSchemaName(option.getValue());\n        }\n      }\n      if (option.getKey().equals(\"moduleName\")) {\n        moduleName = option.getValue();\n      }\n      if (option.getKey().equals(\"includeNonPortableAttributes\")) {\n        includeNonPortableAttributes = Boolean.parseBoolean(option.getValue());\n      }\n      if (option.getKey().equals(\"disableVersionFields\")) {\n        disableVersionFields = Boolean.parseBoolean(option.getValue());\n      }\n      if (option.getKey().equals(\"disableGeneratedIdentifiers\")) {\n        disableGeneratedIdentifiers = Boolean.parseBoolean(option.getValue());\n      }\n      if (option.getKey().equals(\"repository\")) {\n        repository = Boolean.parseBoolean(option.getValue());\n      }\n      if (option.getKey().equals(\"service\")) {\n        service = Boolean.parseBoolean(option.getValue());\n      }\n      if (option.getKey().equals(\"testAutomatically\")) {\n        testAutomatically = Boolean.parseBoolean(option.getValue());\n      }\n    } else if (qName.equals(\"table\")) {\n      tables.add((Table) tmp);\n    } else if (qName.equals(\"column\")) {\n      ((Table) stack.peek()).addColumn((Column) tmp);\n    } else if (qName.equals(\"foreign-key\")) {\n      final ForeignKey foreignKey = (ForeignKey) tmp;\n      final Table table = (Table) stack.peek();\n      if (foreignKey.isExported()) {\n        table.addExportedKey(foreignKey);\n      } else {\n        table.addImportedKey(foreignKey);\n      }\n    } else if (qName.equals(\"reference\")) {\n      ((ForeignKey) stack.peek()).addReference((Reference) tmp);\n    } else if (qName.equals(\"unique\") || qName.equals(\"index\")) {\n      ((Table) stack.peek()).addIndex((Index) tmp);\n    } else if (qName.equals(\"unique-column\") || qName.equals(\"index-column\")) {\n      ((Index) stack.peek()).addColumn((IndexColumn) tmp);\n    } else if (qName.equals(\"database\")) {\n      database = new Database(tables);\n      database.setModuleName(moduleName);\n      database.setDestinationPackage(destinationPackage);\n      database.setIncludeNonPortableAttributes(includeNonPortableAttributes);\n      database.setDisableVersionFields(disableVersionFields);\n      database.setDisableGeneratedIdentifiers(disableGeneratedIdentifiers);\n      database.setRepository(repository);\n      database.setService(service);\n      database.setTestAutomatically(testAutomatically);\n    } else {\n      stack.push(tmp);\n    }\n  }\n  public Database getDatabase() {\n    return database;\n  }\n  @Override\n  public void startElement(final String uri, final String localName, final String qName,\n      final Attributes attributes) throws SAXException {\n    if (qName.equals(\"database\")) {\n      stack.push(new Object());\n      if (StringUtils.isNotBlank(attributes.getValue(\"package\"))) {\n        destinationPackage = new JavaPackage(attributes.getValue(\"package\"));\n      }\n    } else if (qName.equals(\"option\")) {\n      stack.push(new Option(attributes.getValue(\"key\"), attributes.getValue(\"value\")));\n    } else if (qName.equals(\"table\")) {\n      stack.push(getTable(attributes));\n    } else if (qName.equals(\"column\")) {\n      stack.push(getColumn(attributes));\n    } else if (qName.equals(\"foreign-key\")) {\n      stack.push(getForeignKey(attributes));\n    } else if (qName.equals(\"reference\")) {\n      stack.push(getReference(attributes));\n    } else if (qName.equals(\"unique\")) {\n      stack.push(getIndex(attributes, IndexType.UNIQUE));\n    } else if (qName.equals(\"index\")) {\n      stack.push(getIndex(attributes, IndexType.INDEX));\n    } else if (qName.equals(\"unique-column\") || qName.equals(\"index-column\")) {\n      stack.push(getIndexColumn(attributes));\n    }\n  }\n  private Column getColumn(final Attributes attributes) {\n    final String type = attributes.getValue(\"type\");\n    final String[] dataTypeAndName = StringUtils.split(type, \",\");\n    Validate\n        .notNull(\n            dataTypeAndName,\n            \"The 'type' attribute of the column element must contain a comma separated value pair, eg, type=\\\"12,varchar\\\".\"\n                + getErrorMessage());\n    final int dataType = Integer.parseInt(dataTypeAndName[0]);\n    final String typeName = dataTypeAndName[1];\n    int columnSize;\n    int scale = 0;\n    final String size = attributes.getValue(\"size\");\n    if (size.contains(\",\")) {\n      final String[] precisionScale = StringUtils.split(size, \",\");\n      columnSize = Integer.parseInt(precisionScale[0]);\n      scale = Integer.parseInt(precisionScale[1]);\n    } else {\n      columnSize = Integer.parseInt(size);\n    }\n    if (StringUtils.isNotBlank(attributes.getValue(\"scale\"))) {\n      scale = Integer.parseInt(attributes.getValue(\"scale\"));\n    }\n    final Column column =\n        new Column(attributes.getValue(DatabaseXmlUtils.NAME), dataType, typeName, columnSize,\n            scale);\n    column.setDescription(attributes.getValue(DatabaseXmlUtils.DESCRIPTION));\n    column.setPrimaryKey(Boolean.parseBoolean(attributes.getValue(\"primaryKey\")));\n    column.setRequired(Boolean.parseBoolean(attributes.getValue(\"required\")));\n    return column;\n  }\n  private String getErrorMessage() {\n    return \"Your DBRE XML file may be not be in the current format. Delete the file and execute the database reverse engineer command again.\";\n  }\n  private ForeignKey getForeignKey(final Attributes attributes) {\n    final ForeignKey foreignKey =\n        new ForeignKey(attributes.getValue(DatabaseXmlUtils.NAME),\n            attributes.getValue(DatabaseXmlUtils.FOREIGN_TABLE));\n    foreignKey.setOnDelete(CascadeAction.getCascadeAction(attributes\n        .getValue(DatabaseXmlUtils.ON_DELETE)));\n    foreignKey.setOnUpdate(CascadeAction.getCascadeAction(attributes\n        .getValue(DatabaseXmlUtils.ON_UPDATE)));\n    return foreignKey;\n  }\n  private Index getIndex(final Attributes attributes, final IndexType indexType) {\n    final Index index = new Index(attributes.getValue(DatabaseXmlUtils.NAME));\n    index.setUnique(indexType == IndexType.UNIQUE);\n    return index;\n  }\n  private IndexColumn getIndexColumn(final Attributes attributes) {\n    return new IndexColumn(attributes.getValue(DatabaseXmlUtils.NAME));\n  }\n<fim_suffix>  private Reference getReference(final Attributes attributes) {\n    return new Reference(attributes.getValue(DatabaseXmlUtils.LOCAL),\n        attributes.getValue(DatabaseXmlUtils.FOREIGN));\n  }\n  private Table getTable(final Attributes attributes) {\n    final Table table =\n        new Table(attributes.getValue(DatabaseXmlUtils.NAME), new Schema(\n            attributes.getValue(\"alias\")));\n    if (StringUtils.isNotBlank(attributes.getValue(DatabaseXmlUtils.DESCRIPTION))) {\n      table.setDescription(DatabaseXmlUtils.DESCRIPTION);\n    }\n    return table;\n  }\n  private static class Option extends Pair<String, String> {<fim_middle>// function below has no smell\n"}