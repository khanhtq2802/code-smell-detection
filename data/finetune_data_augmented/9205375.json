{"text": "<fim_prefix>import org.eclipse.birt.report.engine.css.engine.value.DataFormatValue;\nimport org.eclipse.birt.report.engine.css.engine.value.css.CSSConstants;\nimport org.eclipse.birt.report.engine.emitter.ContentEmitterUtil;\nimport org.eclipse.birt.report.engine.emitter.IContentEmitter;\nimport org.eclipse.birt.report.engine.emitter.IEmitterServices;\nimport org.eclipse.birt.report.engine.executor.IReportExecutor;\nimport org.eclipse.birt.report.engine.ir.MasterPageDesign;\nimport org.eclipse.birt.report.engine.ir.SimpleMasterPageDesign;\nimport org.eclipse.birt.report.engine.layout.ILayoutPageHandler;\nimport org.eclipse.birt.report.engine.layout.PDFConstants;\nimport org.eclipse.birt.report.engine.layout.area.IContainerArea;\nimport org.eclipse.birt.report.engine.layout.area.impl.AbstractArea;\nimport org.eclipse.birt.report.engine.layout.area.impl.AreaFactory;\nimport org.eclipse.birt.report.engine.layout.area.impl.ContainerArea;\nimport org.eclipse.birt.report.engine.layout.area.impl.PageArea;\nimport org.eclipse.birt.report.engine.layout.pdf.text.Chunk;\nimport org.eclipse.birt.report.engine.layout.pdf.text.ChunkGenerator;\nimport org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content;\nimport org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil;\nimport org.eclipse.birt.report.engine.util.BidiAlignmentResolver;\nimport com.ibm.icu.util.ULocale;\npublic class PDFLayoutEmitter extends LayoutEmitterAdapter implements IContentEmitter\n{\n\tIContentEmitter emitter;\n\tStack layoutStack = new Stack();\n\tContainerLayout current;\n\tLayoutContextFactory factory;\n\tLayoutEngineContext context;\n\t/**\n\t * identify if current area is the first area generated by content\n\t */\n\tprotected boolean isFirst = true;\n\tprotected ILayoutPageHandler pageHandler;\n\tpublic PDFLayoutEmitter( IReportExecutor executor, IContentEmitter emitter,\n\t\t\tLayoutEngineContext context )\n\t{\n\t\tthis.emitter = emitter;\n\t\tthis.context = context;\n\t\tfactory = new LayoutContextFactory( executor, context );\n\t}\n\tpublic PDFLayoutEmitter(LayoutEngineContext context)\n\t{\n\t\tthis.context = context;\n\t\tfactory = new LayoutContextFactory(null, context);\n\t}\n\tpublic void initialize( IEmitterServices service ) throws BirtException\n\t{\n\t\temitter.initialize( service );\n\t}\n\tpublic String getOutputFormat( )\n\t{\n\t\treturn emitter.getOutputFormat( );\n\t}\n\tpublic void start( IReportContent report ) throws BirtException\n\t{\n\t\temitter.start( report );\n\t\tcontext.setReport( report );\n\t}\n\tpublic void end( IReportContent report ) throws BirtException\n\t{\n\t\tresolveTotalPage( emitter );\n\t\tif ( pageHandler != null )\n\t\t{\n\t\t\tpageHandler.onPage( context.pageNumber, context );\n\t\t}\n\t\temitter.end( report );\n\t}\n\tpublic ILayoutPageHandler getPageHandler( )\n\t{\n\t\treturn pageHandler;\n\t}\n\tpublic void setPageHandler( ILayoutPageHandler pageHandler )\n\t{\n\t\tthis.pageHandler = pageHandler;\n\t}\n\tprotected void resolveTotalPage( IContentEmitter emitter )\n\t\t\tthrows BirtException\n\t{\n\t\tIContent con = context.getUnresolvedContent( );\n\t\tif ( !( con instanceof IAutoTextContent ) )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tIAutoTextContent totalPageContent = (IAutoTextContent) con;\n\t\tif ( null != totalPageContent )\n\t\t{\n\t\t\tDataFormatValue format = totalPageContent.getComputedStyle( )\n\t\t\t\t\t.getDataFormat( );\n\t\t\tNumberFormatter nf = null;\n\t\t\tif ( format == null )\n\t\t\t{\n\t\t\t\tnf = new NumberFormatter( );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tString pattern = format.getNumberPattern( );\n\t\t\t\tString locale = format.getNumberLocale( );\n\t\t\t\tif ( locale == null )\n\t\t\t\t\tnf = new NumberFormatter( pattern );\n\t\t\t\telse\n\t\t\t\t\tnf = new NumberFormatter( pattern, new ULocale( locale ) );\n\t\t\t}\n\t\t\tlong totalPageCount = 0;\n\t\t\tif ( context.autoPageBreak )\n\t\t\t{\n\t\t\t\ttotalPageCount = context.pageCount;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// FIXME: handle the TOTAL_PAGE and UNFILTERED_TOTAL_PAGE\n\t\t\t\t// differently.\n\t\t\t\ttotalPageCount = context.totalPage > 0\n\t\t\t\t\t\t? context.totalPage\n\t\t\t\t\t\t: context.pageCount;\n\t\t\t}\n\t\t\ttotalPageContent.setText( nf.format( totalPageCount ));\n\t\t\tAbstractArea totalPageArea = null;\n\t\t\tChunkGenerator cg = new ChunkGenerator( context.getFontManager( ),\n\t\t\t\t\ttotalPageContent, true, true );\n\t\t\tif ( cg.hasMore( ) )\n\t\t\t{\n\t\t\t\tChunk c = cg.getNext( );\n\t\t\t\tDimension d = new Dimension(\n\t\t\t\t\t\t(int) ( c.getFontInfo( ).getWordWidth( c.getText( ) ) * PDFConstants.LAYOUT_TO_PDF_RATIO ),\n\t\t\t\t\t\t(int) ( c.getFontInfo( ).getWordHeight( ) * PDFConstants.LAYOUT_TO_PDF_RATIO ) );\n\t\t\t\ttotalPageArea = (AbstractArea)AreaFactory.createTextArea( totalPageContent, c.getFontInfo( ), false );\n\t\t\t\ttotalPageArea.setWidth( Math.min( context.getMaxWidth( ), d.getWidth()) );\n\t\t\t\ttotalPageArea.setHeight( Math.min( context.getMaxHeight( ), d.getHeight()) );\n\t\t\t}\n\t\t\tString align = totalPageContent.getComputedStyle( ).getTextAlign( );\n\t\t\t// bidi_hcg: handle empty or justify align in RTL direction as right\n\t\t\t// alignment\n\t\t\tboolean isRightAligned = BidiAlignmentResolver.isRightAligned(\n\t\t\t\t\ttotalPageContent, align, false );\n\t\t\tif ( ( isRightAligned || CSSConstants.CSS_CENTER_VALUE\n\t\t\t\t\t.equalsIgnoreCase( align ) ) )\n\t\t\t{\n\t\t\t\tint spacing = context.getTotalPageTemplateWidth( )\n\t\t\t\t\t\t- totalPageArea.getWidth( );\n\t\t\t\tif ( spacing > 0 )\n\t\t\t\t{\n\t\t\t\t\tif ( isRightAligned )\n\t\t\t\t\t{\n\t\t\t\t\t\ttotalPageArea.setAllocatedPosition( spacing\n\t\t\t\t\t\t\t\t+ totalPageArea.getAllocatedX( ), totalPageArea\n\t\t\t\t\t\t\t\t.getAllocatedY( ) );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( CSSConstants.CSS_CENTER_VALUE\n\t\t\t\t\t\t\t.equalsIgnoreCase( align ) )\n\t\t\t\t\t{\n\t\t\t\t\t\ttotalPageArea.setAllocatedPosition( spacing / 2\n\t\t\t\t\t\t\t\t+ totalPageArea.getAllocatedX( ), totalPageArea\n\t\t\t\t\t\t\t\t.getAllocatedY( ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttotalPageContent.setExtension( IContent.LAYOUT_EXTENSION,\n\t\t\t\t\ttotalPageArea );\n\t\t\temitter.startAutoText( totalPageContent );\n\t\t}\n\t}\n\tpublic void startContainer( IContainerContent container )\n\t\t\tthrows BirtException\n\t{\n\t\t_startContainer( container );\n\t}\n\tpublic void _startContainer( IContent container ) throws BirtException\n\t{\n\t\tboolean isInline = PropertyUtil.isInlineElement( container );\n\t\tLayout layout;\n\t\tif(isInline)\n\t\t{\n\t\t\tif(current instanceof InlineStackingLayout)\n\t\t\t{\n\t\t\t\t//layout = factory.createLayoutManager( current, container );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLayout lineLayout = factory.createLayoutManager( current, null );\n\t\t\t\tlineLayout.initialize( );\n\t\t\t\tcurrent = (ContainerLayout)lineLayout;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(current instanceof InlineStackingLayout)\n\t\t\t{\n\t\t\t\twhile(current instanceof InlineStackingLayout)\n\t\t\t\t{\n\t\t\t\t\tcurrent.closeLayout( );\n\t\t\t\t\tcurrent = current.getParent( );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlayout = factory.createLayoutManager( current, container );\n\t\tif ( layout != null )\n\t\t{\n\t\t\tcurrent = (ContainerLayout) layout;\n\t\t\tlayout.initialize( );\n\t\t}\n\t}\n<fim_suffix>\tpublic void endContainer( IContainerContent container )\n\t\t\tthrows BirtException\n\t{\n\t\t_endContainer( container );\n\t}<fim_middle>// function below has no smell\n"}