{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2017, 2018 Eurotech and/or its affiliates\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n *******************************************************************************/\npackage org.eclipse.kura.example.eddystone.scanner;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport org.eclipse.kura.KuraException;\nimport org.eclipse.kura.ble.eddystone.BluetoothLeEddystone;\nimport org.eclipse.kura.ble.eddystone.BluetoothLeEddystoneService;\nimport org.eclipse.kura.bluetooth.le.BluetoothLeAdapter;\nimport org.eclipse.kura.bluetooth.le.BluetoothLeService;\nimport org.eclipse.kura.bluetooth.le.beacon.BluetoothLeBeaconScanner;\nimport org.eclipse.kura.bluetooth.le.beacon.listener.BluetoothLeBeaconListener;\nimport org.eclipse.kura.cloudconnection.message.KuraMessage;\nimport org.eclipse.kura.cloudconnection.publisher.CloudPublisher;\nimport org.eclipse.kura.configuration.ConfigurableComponent;\nimport org.eclipse.kura.message.KuraPayload;\nimport org.osgi.service.component.ComponentContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\npublic class EddystoneScanner implements ConfigurableComponent, BluetoothLeBeaconListener<BluetoothLeEddystone> {\n    private static final String ADDRESS_MESSAGE_PROP_KEY = \"address\";\n    private static final Logger logger = LoggerFactory.getLogger(EddystoneScanner.class);\n    private ExecutorService worker;\n    private Future<?> handle;\n    private BluetoothLeService bluetoothLeService;\n    private BluetoothLeEddystoneService bluetoothLeEddystoneService;\n    private BluetoothLeBeaconScanner<BluetoothLeEddystone> bluetoothLeEddystoneScanner;\n    private Map<String, Long> publishTimes;\n    private EddystoneScannerOptions options;\n    private CloudPublisher cloudPublisher;\n<fim_suffix>    public void setBluetoothLeService(BluetoothLeService bluetoothLeService) {\n        this.bluetoothLeService = bluetoothLeService;\n    }\n    public void unsetBluetoothLeService(BluetoothLeService bluetoothLeService) {\n        this.bluetoothLeService = null;\n    }\n    public void setBluetoothLeEddystoneService(BluetoothLeEddystoneService bluetoothLeEddystoneService) {\n        this.bluetoothLeEddystoneService = bluetoothLeEddystoneService;\n    }\n    public void unsetBluetoothLeEddystoneService(BluetoothLeEddystoneService bluetoothLeEddystoneService) {\n        this.bluetoothLeEddystoneService = null;\n    }\n    public void setCloudPublisher(CloudPublisher cloudPublisher) {\n        this.cloudPublisher = cloudPublisher;\n    }\n    public void unsetCloudPublisher(CloudPublisher cloudPublisher) {\n        this.cloudPublisher = null;\n    }\n    protected void activate(ComponentContext context, Map<String, Object> properties) {\n        logger.info(\"Activating Bluetooth Eddystone Scanner example...\");\n        this.publishTimes = new HashMap<>();\n        doUpdate(properties);\n        logger.info(\"Activating Bluetooth Eddystone Scanner example...Done\");\n    }\n    protected void deactivate(ComponentContext context) {\n        logger.debug(\"Deactivating Eddystone Scanner Example...\");\n        releaseResources();\n        if (this.handle != null) {\n            this.handle.cancel(true);\n        }\n        if (this.worker != null) {\n            this.worker.shutdown();\n        }\n        logger.debug(\"Deactivating Eddystone Scanner Example... Done.\");\n    }\n    protected void updated(Map<String, Object> properties) {\n        logger.debug(\"Updating Eddystone Scanner Example...\");\n        releaseResources();\n        if (this.handle != null) {\n            this.handle.cancel(true);\n        }\n        if (this.worker != null) {\n            this.worker.shutdown();\n        }\n        doUpdate(properties);\n        logger.debug(\"Updating Eddystone Scanner Example... Done\");\n    }\n    private void doUpdate(Map<String, Object> properties) {\n        this.options = new EddystoneScannerOptions(properties);\n        if (this.options.isEnabled()) {\n            this.worker = Executors.newSingleThreadExecutor();\n            this.handle = this.worker.submit(this::setup);\n        }\n    }\n    private void setup() {\n        BluetoothLeAdapter bluetoothLeAdapter = this.bluetoothLeService.getAdapter(this.options.getAdapterName());\n        if (bluetoothLeAdapter != null) {\n            if (!bluetoothLeAdapter.isPowered()) {\n                bluetoothLeAdapter.setPowered(true);\n            }\n            this.bluetoothLeEddystoneScanner = this.bluetoothLeEddystoneService.newBeaconScanner(bluetoothLeAdapter);\n            this.bluetoothLeEddystoneScanner.addBeaconListener(this);\n            try {\n                this.bluetoothLeEddystoneScanner.startBeaconScan(this.options.getScanDuration());\n            } catch (KuraException e) {\n                logger.error(\"iBeacon scanning failed\", e);\n            }\n        } else {\n            logger.warn(\"No Bluetooth adapter found ...\");\n        }\n    }\n    private void releaseResources() {\n        if (this.bluetoothLeEddystoneScanner != null) {\n            if (this.bluetoothLeEddystoneScanner.isScanning()) {\n                this.bluetoothLeEddystoneScanner.stopBeaconScan();\n            }\n            this.bluetoothLeEddystoneScanner.removeBeaconListener(this);\n            this.bluetoothLeEddystoneService.deleteBeaconScanner(this.bluetoothLeEddystoneScanner);\n        }\n    }\n    private double calculateDistance(int rssi, int txpower) {\n        int ratioDB = txpower - rssi;\n        double ratioLinear = Math.pow(10, (double) ratioDB / 10);\n        return Math.sqrt(ratioLinear);\n    }\n    @Override\n    public void onBeaconsReceived(BluetoothLeEddystone eddystone) {\n        logger.info(\"Eddystone {} received from {}\", eddystone.getFrameType(), eddystone.getAddress());\n        if (\"UID\".equals(eddystone.getFrameType())) {\n            logger.info(\"Namespace : {}\", bytesArrayToHexString(eddystone.getNamespace()));\n            logger.info(\"Instance : {}\", bytesArrayToHexString(eddystone.getInstance()));\n        } else if (\"URL\".equals(eddystone.getFrameType())) {\n            logger.info(\"URL : {}\", eddystone.getUrlScheme() + eddystone.getUrl());\n        }\n        logger.info(\"TxPower : {}\", eddystone.getTxPower());\n        logger.info(\"RSSI : {}\", eddystone.getRssi());\n        long now = System.currentTimeMillis();\n        Long lastPublishTime = this.publishTimes.get(eddystone.getAddress());\n        // If this beacon is new, or it last published more than 'publish.period' seconds ago\n        if (lastPublishTime == null || now - lastPublishTime > this.options.getPublishPeriod() * 1000L) {\n            // Store the publish time against the address\n            this.publishTimes.put(eddystone.getAddress(), now);\n            if (this.cloudPublisher == null) {\n                logger.info(\"No cloud publisher selected. Cannot publish!\");\n                return;\n            }\n            // Publish the beacon data to the beacon's topic\n            KuraPayload kp = new KuraPayload();\n            kp.setTimestamp(new Date());\n            kp.addMetric(\"type\", eddystone.getFrameType());\n            if (\"UID\".equals(eddystone.getFrameType())) {\n                kp.addMetric(\"namespace\", bytesArrayToHexString(eddystone.getNamespace()));\n                kp.addMetric(\"instance\", bytesArrayToHexString(eddystone.getInstance()));\n            } else if (\"URL\".equals(eddystone.getFrameType())) {\n                kp.addMetric(\"URL\", eddystone.getUrl());\n            }\n            kp.addMetric(\"txpower\", (int) eddystone.getTxPower());\n            kp.addMetric(\"rssi\", eddystone.getRssi());\n            kp.addMetric(\"distance\", calculateDistance(eddystone.getRssi(), eddystone.getTxPower()));\n            Map<String, Object> properties = new HashMap<>();\n            properties.put(ADDRESS_MESSAGE_PROP_KEY, eddystone.getAddress());\n            KuraMessage message = new KuraMessage(kp, properties);\n            try {\n                this.cloudPublisher.publish(message);\n            } catch (KuraException e) {\n                logger.error(\"Unable to publish\", e);\n            }\n        }\n    }\n    private static String bytesArrayToHexString(byte[] bytes) {<fim_middle>// function below has no smell\n"}