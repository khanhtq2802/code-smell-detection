{"text": "<fim_prefix>\n<fim_suffix>  public static class createExperiment_result implements org.apache.thrift.TBase<createExperiment_result, createExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<createExperiment_result>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"createExperiment_result\");\n    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"success\", org.apache.thrift.protocol.TType.STRING, (short)0);\n    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"ire\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"ace\", org.apache.thrift.protocol.TType.STRUCT, (short)2);\n    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"ase\", org.apache.thrift.protocol.TType.STRUCT, (short)3);\n    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"ae\", org.apache.thrift.protocol.TType.STRUCT, (short)4);\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new createExperiment_resultStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new createExperiment_resultTupleSchemeFactory());\n    }\n    public String success; // required\n    public org.apache.airavata.model.error.InvalidRequestException ire; // required\n    public org.apache.airavata.model.error.AiravataClientException ace; // required\n    public org.apache.airavata.model.error.AiravataSystemException ase; // required\n    public org.apache.airavata.model.error.AuthorizationException ae; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      SUCCESS((short)0, \"success\"),\n      IRE((short)1, \"ire\"),\n      ACE((short)2, \"ace\"),\n      ASE((short)3, \"ase\"),\n      AE((short)4, \"ae\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 0: // SUCCESS\n            return SUCCESS;\n          case 1: // IRE\n            return IRE;\n          case 2: // ACE\n            return ACE;\n          case 3: // ASE\n            return ASE;\n          case 4: // AE\n            return AE;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData(\"success\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData(\"ire\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));\n      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData(\"ace\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));\n      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData(\"ase\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));\n      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData(\"ae\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExperiment_result.class, metaDataMap);\n    }\n    public createExperiment_result() {\n    }\n    public createExperiment_result(\n      String success,\n      org.apache.airavata.model.error.InvalidRequestException ire,\n      org.apache.airavata.model.error.AiravataClientException ace,\n      org.apache.airavata.model.error.AiravataSystemException ase,\n      org.apache.airavata.model.error.AuthorizationException ae)\n    {\n      this();\n      this.success = success;\n      this.ire = ire;\n      this.ace = ace;\n      this.ase = ase;\n      this.ae = ae;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public createExperiment_result(createExperiment_result other) {\n      if (other.isSetSuccess()) {\n        this.success = other.success;\n      }\n      if (other.isSetIre()) {\n        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);\n      }\n      if (other.isSetAce()) {\n        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);\n      }\n      if (other.isSetAse()) {\n        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);\n      }\n      if (other.isSetAe()) {\n        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);\n      }\n    }\n    public createExperiment_result deepCopy() {\n      return new createExperiment_result(this);\n    }\n    @Override\n    public void clear() {\n      this.success = null;\n      this.ire = null;\n      this.ace = null;\n      this.ase = null;\n      this.ae = null;\n    }\n    public String getSuccess() {\n      return this.success;\n    }\n    public createExperiment_result setSuccess(String success) {\n      this.success = success;\n      return this;\n    }\n    public void unsetSuccess() {\n      this.success = null;\n    }\n    /** Returns true if field success is set (has been assigned a value) and false otherwise */\n    public boolean isSetSuccess() {\n      return this.success != null;\n    }\n    public void setSuccessIsSet(boolean value) {\n      if (!value) {\n        this.success = null;\n      }\n    }\n    public org.apache.airavata.model.error.InvalidRequestException getIre() {\n      return this.ire;\n    }\n    public createExperiment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {\n      this.ire = ire;\n      return this;\n    }\n    public void unsetIre() {\n      this.ire = null;\n    }<fim_middle>// class below is data class\n"}