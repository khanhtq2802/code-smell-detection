{"text": "<fim_prefix>/*\n * Copyright 2012-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.actuate.autoconfigure.web.server;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.BeanClassLoaderAware;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.web.ManagementContextType;\nimport org.springframework.context.annotation.DeferredImportSelector;\nimport org.springframework.core.OrderComparator;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.core.io.support.SpringFactoriesLoader;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.core.type.classreading.MetadataReader;\nimport org.springframework.core.type.classreading.SimpleMetadataReaderFactory;\nimport org.springframework.util.StringUtils;\n\n/**\n * Selects configuration classes for the management context configuration. Entries are\n * loaded from {@code /META-INF/spring.factories} under the\n * {@code org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration}\n * key.\n *\n * @author Dave Syer\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @see ManagementContextConfiguration\n */\n@Order(Ordered.LOWEST_PRECEDENCE)\nclass ManagementContextConfigurationImportSelector\n\t\timplements DeferredImportSelector, BeanClassLoaderAware {\n\n\tprivate ClassLoader classLoader;\n\n\t@Override\n\tpublic String[] selectImports(AnnotationMetadata metadata) {\n\t\tManagementContextType contextType = (ManagementContextType) metadata\n\t\t\t\t.getAnnotationAttributes(EnableManagementContext.class.getName())\n\t\t\t\t.get(\"value\");\n\t\t// Find all management context configuration classes, filtering duplicates\n\t\tList<ManagementConfiguration> configurations = getConfigurations();\n\t\tOrderComparator.sort(configurations);\n\t\tList<String> names = new ArrayList<>();\n\t\tfor (ManagementConfiguration configuration : configurations) {\n\t\t\tif (configuration.getContextType() == ManagementContextType.ANY\n\t\t\t\t\t|| configuration.getContextType() == contextType) {\n\t\t\t\tnames.add(configuration.getClassName());\n\t\t\t}\n\t\t}\n\t\treturn StringUtils.toStringArray(names);\n\t}\n\n\tprivate List<ManagementConfiguration> getConfigurations() {\n\t\tSimpleMetadataReaderFactory readerFactory = new SimpleMetadataReaderFactory(\n\t\t\t\tthis.classLoader);\n\t\tList<ManagementConfiguration> configurations = new ArrayList<>();\n\t\tfor (String className : loadFactoryNames()) {\n\t\t\taddConfiguration(readerFactory, configurations, className);\n\t\t}\n\t\treturn configurations;\n\t}\n\n\tprivate void addConfiguration(SimpleMetadataReaderFactory readerFactory,\n\t\t\tList<ManagementConfiguration> configurations, String className) {\n\t\ttry {\n\t\t\tMetadataReader metadataReader = readerFactory.getMetadataReader(className);\n\t\t\tconfigurations.add(new ManagementConfiguration(metadataReader));\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"Failed to read annotation metadata for '\" + className + \"'\", ex);\n\t\t}\n\t}\n\n\tprotected List<String> loadFactoryNames() {\n\t\treturn SpringFactoriesLoader\n\t\t\t\t.loadFactoryNames(ManagementContextConfiguration.class, this.classLoader);\n\t}\n\n\t@Override\n\tpublic void setBeanClassLoader(ClassLoader classLoader) {\n\t\tthis.classLoader = classLoader;\n\t}\n\n\t/**\n\t * A management configuration class which can be sorted according to {@code @Order}.\n\t */\n\tprivate static final class ManagementConfiguration implements Ordered {\n\n\t\tprivate final String className;\n\n\t\tprivate final int order;\n\n\t\tprivate final ManagementContextType contextType;\n\n\t\tManagementConfiguration(MetadataReader metadataReader) {\n\t\t\tAnnotationMetadata annotationMetadata = metadataReader\n\t\t\t\t\t.getAnnotationMetadata();\n\t\t\tthis.order = readOrder(annotationMetadata);\n\t\t\tthis.className = metadataReader.getClassMetadata().getClassName();\n\t\t\tthis.contextType = readContextType(annotationMetadata);\n\t\t}\n\n\t\tprivate ManagementContextType readContextType(\n\t\t\t\tAnnotationMetadata annotationMetadata) {\n\t\t\tMap<String, Object> annotationAttributes = annotationMetadata\n\t\t\t\t\t.getAnnotationAttributes(\n\t\t\t\t\t\t\tManagementContextConfiguration.class.getName());\n\t\t\treturn (annotationAttributes != null)\n\t\t\t\t\t? (ManagementContextType) annotationAttributes.get(\"value\")\n\t\t\t\t\t: ManagementContextType.ANY;\n\t\t}\n\n<fim_suffix>\t\tprivate int readOrder(AnnotationMetadata annotationMetadata) {\n\t\t\tMap<String, Object> attributes = annotationMetadata\n\t\t\t\t\t.getAnnotationAttributes(Order.class.getName());\n\t\t\tInteger order = (attributes != null) ? (Integer) attributes.get(\"value\")\n\t\t\t\t\t: null;\n\t\t\treturn (order != null) ? order : Ordered.LOWEST_PRECEDENCE;\n\t\t}\n\n\t\tpublic String getClassName() {\n\t\t\treturn this.className;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn this.order;\n\t\t}\n\n\t\tpublic ManagementContextType getContextType() {\n\t\t\treturn this.contextType;\n\t\t}\n\n\t}\n\n}<fim_middle>// function below has no smell\n"}