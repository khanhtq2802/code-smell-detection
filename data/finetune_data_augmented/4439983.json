{"text": "<fim_prefix>            this.commandGateway.process(new CloseCustomerCommand(identifier, command.getComment()));\n          }\n          break;\n        case REOPEN:\n          if (Customer.State.CLOSED.name().equals(currentState)) {\n            this.commandGateway.process(new ReopenCustomerCommand(identifier, command.getComment()));\n          }\n          break;\n        default:\n          throw ServiceException.badRequest(\"Unsupported action {0}.\", command.getAction());\n      }\n    } else {\n      throw ServiceException.notFound(\"Customer {0} not found.\", identifier);\n    }\n    return ResponseEntity.accepted().build();\n  }\n  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.CUSTOMER)\n  @RequestMapping(\n      value = \"/customers/{identifier}/commands\",\n      method = RequestMethod.GET,\n      produces = MediaType.APPLICATION_JSON_VALUE,\n      consumes = MediaType.ALL_VALUE\n  )\n  public\n  @ResponseBody\n  ResponseEntity<List<Command>> fetchCustomerCommands(@PathVariable(\"identifier\") final String identifier) {\n    if (this.customerService.customerExists(identifier)) {\n      return ResponseEntity.ok(this.customerService.fetchCommandsByCustomer(identifier).collect(Collectors.toList()));\n    } else {\n      throw ServiceException.notFound(\"Customer {0} not found.\", identifier);\n    }\n  }\n  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.CUSTOMER)\n  @RequestMapping(\n      value = \"/customers/{identifier}/tasks/{taskIdentifier}\",\n      method = RequestMethod.POST,\n      produces = MediaType.APPLICATION_JSON_VALUE,\n      consumes = MediaType.APPLICATION_JSON_VALUE\n  )\n  public\n  @ResponseBody\n  ResponseEntity<Void> addTaskToCustomer(@PathVariable(\"identifier\") final String identifier,\n                                         @PathVariable(\"taskIdentifier\") final String taskIdentifier) {\n    if (this.customerService.customerExists(identifier)) {\n      if (this.taskService.taskDefinitionExists(taskIdentifier)) {\n        this.commandGateway.process(new AddTaskDefinitionToCustomerCommand(identifier, taskIdentifier));\n      } else {\n        throw ServiceException.notFound(\"Task definition {0} not found.\", taskIdentifier);\n      }\n    } else {\n      throw ServiceException.notFound(\"Customer {0} not found.\", identifier);\n    }\n    return ResponseEntity.accepted().build();\n  }\n  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.CUSTOMER)\n  @RequestMapping(\n      value = \"/customers/{identifier}/tasks/{taskIdentifier}\",\n      method = RequestMethod.PUT,\n      produces = MediaType.APPLICATION_JSON_VALUE,\n      consumes = MediaType.APPLICATION_JSON_VALUE\n  )\n  public\n  @ResponseBody\n  ResponseEntity<Void> taskForCustomerExecuted(@PathVariable(\"identifier\") final String identifier,\n                                               @PathVariable(\"taskIdentifier\") final String taskIdentifier) {\n    final Optional<Customer> optionalCustomer = this.customerService.findCustomer(identifier);\n    if (optionalCustomer.isPresent()) {\n      final Customer customer = optionalCustomer.get();\n      final Optional<TaskDefinition> optionalTaskDefinition = this.taskService.findByIdentifier(taskIdentifier);\n      if (optionalTaskDefinition.isPresent()) {\n        final TaskDefinition taskDefinition = optionalTaskDefinition.get();\n        switch (TaskDefinition.Type.valueOf(taskDefinition.getType())) {\n          case ID_CARD:\n            final Stream<IdentificationCard> identificationCards = this.customerService.fetchIdentificationCardsByCustomer(identifier);\n            if (!identificationCards.findAny().isPresent()) {\n              throw ServiceException.conflict(\"No identification cards for customer found.\");\n            }\n            break;\n          case FOUR_EYES:\n            if (customer.getCreatedBy().equals(UserContextHolder.checkedGetUser())) {\n              throw ServiceException.conflict(\"Signing user must be different than creator.\");\n            }\n            break;\n        }\n        this.commandGateway.process(new ExecuteTaskForCustomerCommand(identifier, taskIdentifier));\n      } else {\n        throw ServiceException.notFound(\"Task definition {0} not found.\", taskIdentifier);\n      }\n    } else {\n      throw ServiceException.notFound(\"Customer {0} not found.\", identifier);\n    }\n    return ResponseEntity.accepted().build();\n  }\n  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.CUSTOMER)\n  @RequestMapping(\n      value = \"/customers/{identifier}/tasks\",\n      method = RequestMethod.GET,\n      produces = MediaType.APPLICATION_JSON_VALUE,\n      consumes = MediaType.ALL_VALUE\n  )\n  public\n  @ResponseBody\n  ResponseEntity<List<TaskDefinition>> findTasksForCustomer(@PathVariable(\"identifier\") final String identifier,\n                                                            @RequestParam(value = \"includeExecuted\", required = false) final Boolean includeExecuted) {\n    if (this.customerService.customerExists(identifier)) {\n      return ResponseEntity.ok(this.taskService.findTasksByCustomer(identifier, (includeExecuted != null ? includeExecuted : Boolean.FALSE)));\n    } else {\n      throw ServiceException.notFound(\"Customer {0} not found.\", identifier);\n    }\n  }\n  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.CUSTOMER)\n  @RequestMapping(\n      value = \"/customers/{identifier}/address\",\n      method = RequestMethod.PUT,\n      produces = MediaType.APPLICATION_JSON_VALUE,\n      consumes = MediaType.APPLICATION_JSON_VALUE\n  )\n  public\n  @ResponseBody\n  ResponseEntity<Void> putAddress(@PathVariable(\"identifier\") final String identifier,\n                                  @RequestBody @Valid final Address address) {\n    if (this.customerService.customerExists(identifier)) {\n      this.commandGateway.process(new UpdateAddressCommand(identifier, address));\n    } else {\n      throw ServiceException.notFound(\"Customer {0} not found.\", identifier);\n    }\n    return ResponseEntity.accepted().build();\n  }\n  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.CUSTOMER)\n  @RequestMapping(\n      value = \"/customers/{identifier}/contact\",\n      method = RequestMethod.PUT,\n      produces = MediaType.APPLICATION_JSON_VALUE,\n      consumes = MediaType.APPLICATION_JSON_VALUE\n  )\n  public\n  @ResponseBody\n  ResponseEntity<Void> putContactDetails(@PathVariable(\"identifier\") final String identifier,\n                                         @RequestBody final List<ContactDetail> contactDetails) {\n    if (this.customerService.customerExists(identifier)) {\n      this.commandGateway.process(new UpdateContactDetailsCommand(identifier, contactDetails));\n    } else {\n      throw ServiceException.notFound(\"Customer {0} not found.\", identifier);\n    }\n    return ResponseEntity.accepted().build();\n  }\n  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.IDENTIFICATIONS)\n  @RequestMapping(\n          value = \"/customers/{identifier}/identifications\",\n          method = RequestMethod.GET,\n          produces = MediaType.APPLICATION_JSON_VALUE,\n          consumes = MediaType.ALL_VALUE\n  )\n  public @ResponseBody ResponseEntity<List<IdentificationCard>> fetchIdentificationCards(@PathVariable(\"identifier\") final String identifier) {\n    this.throwIfCustomerNotExists(identifier);\n    return ResponseEntity.ok(this.customerService.fetchIdentificationCardsByCustomer(identifier).collect(Collectors.toList()));\n  }\n  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.IDENTIFICATIONS)\n  @RequestMapping(\n          value = \"/customers/{identifier}/identifications/{number}\",\n          method = RequestMethod.GET,\n          produces = MediaType.APPLICATION_JSON_VALUE,\n          consumes = MediaType.ALL_VALUE\n  )\n  public\n  @ResponseBody\n  ResponseEntity<IdentificationCard> findIdentificationCard(@PathVariable(\"identifier\") final String identifier,\n                                            @PathVariable(\"number\") final String number) {\n    this.throwIfCustomerNotExists(identifier);\n    final Optional<IdentificationCard> identificationCard = this.customerService.findIdentificationCard(number);\n    if (identificationCard.isPresent()) {\n      return ResponseEntity.ok(identificationCard.get());\n    } else {\n      throw ServiceException.notFound(\"Identification card {0} not found.\", number);\n    }\n  }\n<fim_suffix>  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.IDENTIFICATIONS)\n  @RequestMapping(\n          value = \"/customers/{identifier}/identifications\",\n          method = RequestMethod.POST,\n          produces = MediaType.APPLICATION_JSON_VALUE,\n          consumes = MediaType.APPLICATION_JSON_VALUE\n  )\n  public\n  @ResponseBody\n  ResponseEntity<Void> createIdentificationCard(@PathVariable(\"identifier\") final String identifier,\n                                @RequestBody @Valid final IdentificationCard identificationCard) {\n    if (this.customerService.customerExists(identifier)) {\n      if (this.customerService.identificationCardExists(identificationCard.getNumber())) {\n        throw ServiceException.conflict(\"IdentificationCard {0} already exists.\", identificationCard.getNumber());\n      }\n      this.commandGateway.process(new CreateIdentificationCardCommand(identifier, identificationCard));\n    } else {\n      throw ServiceException.notFound(\"Customer {0} not found.\", identifier);\n    }\n    return ResponseEntity.accepted().build();\n  }<fim_middle>// function below has no smell\n"}