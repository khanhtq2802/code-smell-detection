{"text": "<fim_prefix>\n<fim_suffix>    public void validateDepositDetailForUpdate(final JsonElement element, final FromJsonHelper fromApiJsonHelper,\n            final DataValidatorBuilder baseDataValidator) {\n        if (fromApiJsonHelper.parameterExists(nameParamName, element)) {\n            final String name = fromApiJsonHelper.extractStringNamed(nameParamName, element);\n            baseDataValidator.reset().parameter(nameParamName).value(name).notBlank().notExceedingLengthOf(100);\n        }\n        if (fromApiJsonHelper.parameterExists(shortNameParamName, element)) {\n            final String shortName = fromApiJsonHelper.extractStringNamed(shortNameParamName, element);\n            baseDataValidator.reset().parameter(shortNameParamName).value(shortName).notBlank().notExceedingLengthOf(4);\n        }\n        if (fromApiJsonHelper.parameterExists(descriptionParamName, element)) {\n            final String description = fromApiJsonHelper.extractStringNamed(descriptionParamName, element);\n            baseDataValidator.reset().parameter(descriptionParamName).value(description).notBlank().notExceedingLengthOf(500);\n        }\n        if (fromApiJsonHelper.parameterExists(currencyCodeParamName, element)) {\n            final String currencyCode = fromApiJsonHelper.extractStringNamed(currencyCodeParamName, element);\n            baseDataValidator.reset().parameter(currencyCodeParamName).value(currencyCode).notBlank();\n        }\n        if (fromApiJsonHelper.parameterExists(digitsAfterDecimalParamName, element)) {\n            final Integer digitsAfterDecimal = fromApiJsonHelper.extractIntegerSansLocaleNamed(digitsAfterDecimalParamName, element);\n            baseDataValidator.reset().parameter(digitsAfterDecimalParamName).value(digitsAfterDecimal).notNull().inMinMaxRange(0, 6);\n        }\n        if (fromApiJsonHelper.parameterExists(inMultiplesOfParamName, element)) {\n            final Integer inMultiplesOf = fromApiJsonHelper.extractIntegerNamed(inMultiplesOfParamName, element, Locale.getDefault());\n            baseDataValidator.reset().parameter(inMultiplesOfParamName).value(inMultiplesOf).ignoreIfNull().integerZeroOrGreater();\n        }\n        if (fromApiJsonHelper.parameterExists(nominalAnnualInterestRateParamName, element)) {\n            final BigDecimal interestRate = fromApiJsonHelper.extractBigDecimalWithLocaleNamed(nominalAnnualInterestRateParamName, element);\n            baseDataValidator.reset().parameter(nominalAnnualInterestRateParamName).value(interestRate).notNull().zeroOrPositiveAmount();\n        }\n        if (fromApiJsonHelper.parameterExists(interestCompoundingPeriodTypeParamName, element)) {\n            final Integer interestCompoundingPeriodType = fromApiJsonHelper.extractIntegerSansLocaleNamed(\n                    interestCompoundingPeriodTypeParamName, element);\n            baseDataValidator.reset().parameter(interestCompoundingPeriodTypeParamName).value(interestCompoundingPeriodType).notNull()\n                    .isOneOfTheseValues(SavingsCompoundingInterestPeriodType.integerValues());\n        }\n        if (fromApiJsonHelper.parameterExists(interestCalculationTypeParamName, element)) {\n            final Integer interestCalculationType = fromApiJsonHelper.extractIntegerSansLocaleNamed(interestCalculationTypeParamName,\n                    element);\n            baseDataValidator.reset().parameter(interestCalculationTypeParamName).value(interestCalculationType).notNull()\n                    .inMinMaxRange(1, 2);\n        }\n        if (fromApiJsonHelper.parameterExists(interestCalculationDaysInYearTypeParamName, element)) {\n            final Integer interestCalculationDaysInYearType = fromApiJsonHelper.extractIntegerSansLocaleNamed(\n                    interestCalculationDaysInYearTypeParamName, element);\n            baseDataValidator.reset().parameter(interestCalculationDaysInYearTypeParamName).value(interestCalculationDaysInYearType)\n                    .notNull().isOneOfTheseValues(360, 365);\n        }\n        if (fromApiJsonHelper.parameterExists(minRequiredOpeningBalanceParamName, element)) {\n            final BigDecimal minOpeningBalance = fromApiJsonHelper.extractBigDecimalWithLocaleNamed(minRequiredOpeningBalanceParamName,\n                    element);\n            baseDataValidator.reset().parameter(minRequiredOpeningBalanceParamName).value(minOpeningBalance).ignoreIfNull()\n                    .zeroOrPositiveAmount();\n        }\n        if (fromApiJsonHelper.parameterExists(lockinPeriodFrequencyParamName, element)) {\n            final Integer lockinPeriodFrequency = fromApiJsonHelper.extractIntegerWithLocaleNamed(lockinPeriodFrequencyParamName, element);\n            baseDataValidator.reset().parameter(lockinPeriodFrequencyParamName).value(lockinPeriodFrequency).ignoreIfNull()\n                    .integerZeroOrGreater();\n        }\n        if (fromApiJsonHelper.parameterExists(lockinPeriodFrequencyTypeParamName, element)) {\n            final Integer lockinPeriodFrequencyType = fromApiJsonHelper.extractIntegerSansLocaleNamed(lockinPeriodFrequencyTypeParamName,\n                    element);\n            baseDataValidator.reset().parameter(lockinPeriodFrequencyTypeParamName).value(lockinPeriodFrequencyType).inMinMaxRange(0, 3);\n        }\n        if (fromApiJsonHelper.parameterExists(withdrawalFeeForTransfersParamName, element)) {\n            final Boolean isWithdrawalFeeApplicableForTransfers = fromApiJsonHelper.extractBooleanNamed(withdrawalFeeForTransfersParamName,\n                    element);\n            baseDataValidator.reset().parameter(withdrawalFeeForTransfersParamName).value(isWithdrawalFeeApplicableForTransfers)\n                    .ignoreIfNull().validateForBooleanValue();\n        }\n        if (fromApiJsonHelper.parameterExists(feeAmountParamName, element)) {\n            final BigDecimal annualFeeAmount = fromApiJsonHelper.extractBigDecimalWithLocaleNamed(feeAmountParamName, element);\n            baseDataValidator.reset().parameter(feeAmountParamName).value(annualFeeAmount).ignoreIfNull().zeroOrPositiveAmount();\n        }\n        if (fromApiJsonHelper.parameterExists(feeOnMonthDayParamName, element)) {\n            final MonthDay monthDayOfAnnualFee = fromApiJsonHelper.extractMonthDayNamed(feeOnMonthDayParamName, element);\n            baseDataValidator.reset().parameter(feeOnMonthDayParamName).value(monthDayOfAnnualFee).ignoreIfNull();\n        }\n        if (this.fromApiJsonHelper.parameterExists(minBalanceForInterestCalculationParamName, element)) {\n            final BigDecimal minBalanceForInterestCalculation = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed(\n                    minBalanceForInterestCalculationParamName, element);\n            baseDataValidator.reset().parameter(minBalanceForInterestCalculationParamName).value(minBalanceForInterestCalculation)\n                    .ignoreIfNull().zeroOrPositiveAmount();\n        }\n        final Long savingsControlAccountId = fromApiJsonHelper.extractLongNamed(\n                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_CONTROL.getValue(), element);\n        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_CONTROL.getValue()).value(savingsControlAccountId)\n                .ignoreIfNull().integerGreaterThanZero();\n        final Long savingsReferenceAccountId = fromApiJsonHelper.extractLongNamed(\n                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_REFERENCE.getValue(), element);\n        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_REFERENCE.getValue())\n                .value(savingsReferenceAccountId).ignoreIfNull().integerGreaterThanZero();\n        final Long transfersInSuspenseAccountId = fromApiJsonHelper.extractLongNamed(\n                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.TRANSFERS_SUSPENSE.getValue(), element);\n        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.TRANSFERS_SUSPENSE.getValue())\n                .value(transfersInSuspenseAccountId).ignoreIfNull().integerGreaterThanZero();\n        final Long interestOnSavingsAccountId = fromApiJsonHelper.extractLongNamed(\n                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INTEREST_ON_SAVINGS.getValue(), element);\n        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INTEREST_ON_SAVINGS.getValue())\n                .value(interestOnSavingsAccountId).ignoreIfNull().integerGreaterThanZero();\n        final Long incomeFromFeeId = fromApiJsonHelper.extractLongNamed(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_FEES.getValue(),\n                element);\n        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_FEES.getValue()).value(incomeFromFeeId)\n                .ignoreIfNull().integerGreaterThanZero();\n        final Long incomeFromPenaltyId = fromApiJsonHelper.extractLongNamed(\n                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_PENALTIES.getValue(), element);\n        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_PENALTIES.getValue()).value(incomeFromPenaltyId)\n                .ignoreIfNull().integerGreaterThanZero();<fim_middle>// function below is feature envy and long method\n"}