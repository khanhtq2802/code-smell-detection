{"text": "<fim_prefix>            if (type == EnumType.STRING) {\n                pstmt.setString(j, value == null ? null : value.toString());\n            } else if (type == EnumType.ORDINAL) {\n                if (value == null) {\n                    pstmt.setObject(j, null);\n                } else {\n                    pstmt.setInt(j, ((Enum<?>)value).ordinal());\n                }\n            }\n        } else if (attr.field.getType() == URI.class) {\n            pstmt.setString(j, value == null ? null : value.toString());\n        } else if (attr.field.getType() == URL.class) {\n            pstmt.setURL(j, (URL)value);\n        } else if (attr.field.getType() == byte[].class) {\n            pstmt.setBytes(j, (byte[])value);\n        } else if (attr.field.getType() == Ip.class) {\n            final Enumerated enumerated = attr.field.getAnnotation(Enumerated.class);\n            final EnumType type = (enumerated == null) ? EnumType.ORDINAL : enumerated.value();\n            if (type == EnumType.STRING) {\n                pstmt.setString(j, value == null ? null : value.toString());\n            } else if (type == EnumType.ORDINAL) {\n                if (value == null) {\n                    pstmt.setObject(j, null);\n                } else {\n                    pstmt.setLong(j, (value instanceof Ip) ? ((Ip)value).longValue() : NetUtils.ip2Long((String)value));\n                }\n            }\n        } else {\n            pstmt.setObject(j, value);\n        }\n    }\n    @DB()\n    protected int prepareAttributes(final PreparedStatement pstmt, final Object entity, final Attribute[] attrs, final int index) throws SQLException {\n        int j = 0;\n        for (int i = 0; i < attrs.length; i++) {\n            j = i + index;\n            try {\n                prepareAttribute(j, pstmt, attrs[i], attrs[i].field != null ? attrs[i].field.get(entity) : null);\n            } catch (final IllegalArgumentException e) {\n                throw new CloudRuntimeException(\"IllegalArgumentException\", e);\n            } catch (final IllegalAccessException e) {\n                throw new CloudRuntimeException(\"IllegalArgumentException\", e);\n            }\n        }\n        return j;\n    }\n    @SuppressWarnings(\"unchecked\")\n    @DB()\n    protected T toEntityBean(final ResultSet result, final boolean cache) throws SQLException {\n        final T entity = (T)_factory.newInstance(new Callback[] {NoOp.INSTANCE, new UpdateBuilder(this)});\n        toEntityBean(result, entity);\n        if (cache && _cache != null) {\n            try {\n                _cache.put(new Element(_idField.get(entity), entity));\n            } catch (final Exception e) {\n                s_logger.debug(\"Can't put it in the cache\", e);\n            }\n        }\n        return entity;\n    }\n    @DB()\n    protected T toVO(ResultSet result, boolean cache) throws SQLException {\n        T entity;\n        try {\n            entity = _entityBeanType.newInstance();\n        } catch (InstantiationException e1) {\n            throw new CloudRuntimeException(\"Unable to instantiate entity\", e1);\n        } catch (IllegalAccessException e1) {\n            throw new CloudRuntimeException(\"Illegal Access\", e1);\n        }\n        toEntityBean(result, entity);\n        if (cache && _cache != null) {\n            try {\n                _cache.put(new Element(_idField.get(entity), entity));\n            } catch (final Exception e) {\n                s_logger.debug(\"Can't put it in the cache\", e);\n            }\n        }\n        return entity;\n    }\n    @DB()\n    protected void toEntityBean(final ResultSet result, final T entity) throws SQLException {\n        ResultSetMetaData meta = result.getMetaData();\n        for (int index = 1, max = meta.getColumnCount(); index <= max; index++) {\n            setField(entity, result, meta, index);\n        }\n        for (Attribute attr : _ecAttributes) {\n            loadCollection(entity, attr);\n        }\n    }\n    @DB()\n    @SuppressWarnings(\"unchecked\")\n    protected void loadCollection(T entity, Attribute attr) {\n        EcInfo ec = (EcInfo)attr.attache;\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n        try(PreparedStatement pstmt = txn.prepareStatement(ec.selectSql);)\n        {\n            pstmt.setObject(1, _idField.get(entity));\n            try(ResultSet rs = pstmt.executeQuery();)\n            {\n                ArrayList lst = new ArrayList();\n                if (ec.targetClass == Integer.class) {\n                    while (rs.next()) {\n                        lst.add(rs.getInt(1));\n                    }\n                } else if (ec.targetClass == Long.class) {\n                    while (rs.next()) {\n                        lst.add(rs.getLong(1));\n                    }\n                } else if (ec.targetClass == String.class) {\n                    while (rs.next()) {\n                        lst.add(rs.getString(1));\n                    }\n                } else if (ec.targetClass == Short.class) {\n                    while (rs.next()) {\n                        lst.add(rs.getShort(1));\n                    }\n                } else if (ec.targetClass == Date.class) {\n                    while (rs.next()) {\n                        lst.add(DateUtil.parseDateString(s_gmtTimeZone, rs.getString(1)));\n                    }\n                } else if (ec.targetClass == Boolean.class) {\n                    while (rs.next()) {\n                        lst.add(rs.getBoolean(1));\n                    }\n                } else {\n                    assert (false) : \"You'll need to add more classeses\";\n                }\n                if (ec.rawClass == null) {\n                    Object[] array = (Object[]) Array.newInstance(ec.targetClass);\n                    lst.toArray(array);\n                    try {\n                        attr.field.set(entity, array);\n                    } catch (IllegalArgumentException e) {\n                        throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n                    } catch (IllegalAccessException e) {\n                        throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n                    }\n                } else {\n                    try {\n                        Collection coll = (Collection) ec.rawClass.newInstance();\n                        coll.addAll(lst);\n                        attr.field.set(entity, coll);\n                    } catch (IllegalAccessException e) {\n                        throw new CloudRuntimeException(\"Come on we screen for this stuff, don't we?\", e);\n                    } catch (InstantiationException e) {\n                        throw new CloudRuntimeException(\"Never should happen\", e);\n                    }\n                }\n            }\n            catch (SQLException e) {\n                throw new CloudRuntimeException(\"loadCollection: Exception : \" +e.getMessage(), e);\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"loadCollection: Exception : \" +e.getMessage(), e);\n        } catch (IllegalArgumentException e) {\n            throw new CloudRuntimeException(\"loadCollection: Exception : \" +e.getMessage(), e);\n        } catch (IllegalAccessException e) {\n            throw new CloudRuntimeException(\"loadCollection: Exception : \" +e.getMessage(), e);\n        }\n    }\n    @Override\n    public void expunge() {\n        if (_removed == null) {\n            return;\n        }\n        final StringBuilder sql = new StringBuilder(\"DELETE FROM \");\n        sql.append(_table).append(\" WHERE \").append(_removed.first()).append(\" IS NOT NULL\");\n        final TransactionLegacy txn = TransactionLegacy.currentTxn();\n        PreparedStatement pstmt = null;\n        try {\n            txn.start();\n            pstmt = txn.prepareAutoCloseStatement(sql.toString());\n            pstmt.executeUpdate();\n            txn.commit();\n        } catch (final SQLException e) {\n            throw new CloudRuntimeException(\"DB Exception on \" + pstmt, e);\n        }\n    }\n<fim_suffix>    @DB()\n    protected void setField(final Object entity, final ResultSet rs, ResultSetMetaData meta, final int index) throws SQLException {\n        Attribute attr = _allColumns.get(new Pair<String, String>(meta.getTableName(index), meta.getColumnName(index)));\n        if (attr == null) {\n            // work around for mysql bug to return original table name instead of view name in db view case\n            Table tbl = entity.getClass().getSuperclass().getAnnotation(Table.class);\n            if (tbl != null) {\n                attr = _allColumns.get(new Pair<String, String>(tbl.name(), meta.getColumnLabel(index)));\n            }\n        }\n        assert (attr != null) : \"How come I can't find \" + meta.getCatalogName(index) + \".\" + meta.getColumnName(index);\n        setField(entity, attr.field, rs, index);\n    }<fim_middle>// function below has no smell\n"}