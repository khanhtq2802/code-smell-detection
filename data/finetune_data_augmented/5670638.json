{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.stanbol.ontologymanager.web.resources;\n\nimport static javax.ws.rs.core.MediaType.TEXT_HTML;\nimport static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n//import static org.apache.stanbol.commons.web.base.CorsHelper.addCORSOrigin;\n//import static org.apache.stanbol.commons.web.base.CorsHelper.enableCORS;\nimport static org.apache.stanbol.commons.web.base.format.KRFormat.FUNCTIONAL_OWL;\nimport static org.apache.stanbol.commons.web.base.format.KRFormat.MANCHESTER_OWL;\nimport static org.apache.stanbol.commons.web.base.format.KRFormat.N3;\nimport static org.apache.stanbol.commons.web.base.format.KRFormat.N_TRIPLE;\nimport static org.apache.stanbol.commons.web.base.format.KRFormat.OWL_XML;\nimport static org.apache.stanbol.commons.web.base.format.KRFormat.RDF_JSON;\nimport static org.apache.stanbol.commons.web.base.format.KRFormat.RDF_XML;\nimport static org.apache.stanbol.commons.web.base.format.KRFormat.TURTLE;\nimport static org.apache.stanbol.commons.web.base.format.KRFormat.X_TURTLE;\n\nimport java.util.Set;\n\nimport javax.servlet.ServletContext;\nimport javax.ws.rs.DELETE;\nimport javax.ws.rs.DefaultValue;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.OPTIONS;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.QueryParam;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.HttpHeaders;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.Response.ResponseBuilder;\n\nimport org.apache.clerezza.rdf.core.access.TcManager;\nimport org.apache.felix.scr.annotations.Component;\nimport org.apache.felix.scr.annotations.Property;\nimport org.apache.felix.scr.annotations.Reference;\nimport org.apache.felix.scr.annotations.Service;\nimport org.apache.stanbol.commons.web.viewable.Viewable;\n//import org.apache.stanbol.commons.web.base.ContextHelper;\nimport org.apache.stanbol.commons.web.base.resource.BaseStanbolResource;\nimport org.apache.stanbol.commons.web.base.utils.MediaTypeUtil;\nimport org.apache.stanbol.ontologymanager.servicesapi.scope.Scope;\nimport org.apache.stanbol.ontologymanager.servicesapi.scope.ScopeManager;\nimport org.apache.stanbol.ontologymanager.servicesapi.util.ScopeSetRenderer;\nimport org.semanticweb.owlapi.model.OWLOntology;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * The main Web resource of the KReS ontology manager. All the scopes, sessions and ontologies are accessible\n * as subresources of ONMRootResource.<br>\n * <br>\n * This resource allows a GET method for obtaining an RDF representation of the set of registered scopes and a\n * DELETE method for clearing the scope set and ontology store accordingly.\n * \n * @author alexdma\n * \n */\n<fim_suffix>@Component\n@Service(Object.class)\n@Property(name=\"javax.ws.rs\", boolValue=true)\n@Path(\"/ontonet/ontology\")\npublic class ScopeManagerResource extends BaseStanbolResource {\n\n    @SuppressWarnings(\"unused\")\n    private Logger log = LoggerFactory.getLogger(getClass());\n\n    /*\n     * Placeholder for the ONManager to be fetched from the servlet context.\n     */\n    @Reference\n    protected ScopeManager onm;\n    @Reference\n    protected TcManager tcManager;\n\n    public ScopeManagerResource() {\n    }\n\n    /**\n     * RESTful DELETE method that clears the entire scope registry and managed ontology store.\n     */\n    @DELETE\n    public void clearOntologies() {\n        // First clear the registry...\n        for (Scope scope : onm.getRegisteredScopes())\n            onm.deregisterScope(scope);\n        // ...then clear the store.\n        // TODO : the other way around?\n    }\n\n    public Set<Scope> getActiveScopes() {\n        return onm.getActiveScopes();\n    }\n\n    @GET\n    @Produces(TEXT_HTML)\n    public Response getHtmlInfo(@Context HttpHeaders headers) {\n        ResponseBuilder rb = Response.ok(new Viewable(\"index\", this));\n        rb.header(HttpHeaders.CONTENT_TYPE, TEXT_HTML + \"; charset=utf-8\");\n//        addCORSOrigin(servletContext, rb, headers);\n        return rb.build();\n    }\n\n    /**\n     * Default GET method for obtaining the set of (both active and, optionally, inactive) ontology scopes\n     * currently registered with this instance of KReS.\n     * \n     * @param inactive\n     *            if true, both active and inactive scopes will be included. Default is false.\n     * @param headers\n     *            the HTTP headers, supplied by the REST call.\n     * @param servletContext\n     *            the servlet context, supplied by the REST call.\n     * @return a string representation of the requested scope set, in a format acceptable by the client.\n     */\n    @GET\n    @Produces(value = {RDF_XML, OWL_XML, TURTLE, X_TURTLE, FUNCTIONAL_OWL, MANCHESTER_OWL, RDF_JSON, N3,\n                       N_TRIPLE, TEXT_PLAIN})\n    public Response getScopeModel(@DefaultValue(\"false\") @QueryParam(\"with-inactive\") boolean inactive,\n                                  @Context HttpHeaders headers,\n                                  @Context ServletContext servletContext) {\n        Set<Scope> scopes = inactive ? onm.getRegisteredScopes() : onm.getActiveScopes();\n\n        OWLOntology ontology = ScopeSetRenderer.getScopes(scopes);\n\n        ResponseBuilder rb = Response.ok(ontology);\n        MediaType mediaType = MediaTypeUtil.getAcceptableMediaType(headers, null);\n        if (mediaType != null) rb.header(HttpHeaders.CONTENT_TYPE, mediaType);\n//        addCORSOrigin(servletContext, rb, headers);\n        return rb.build();\n    }\n\n    public Set<Scope> getScopes() {\n        return onm.getRegisteredScopes();\n    }\n\n    @OPTIONS\n    public Response handleCorsPreflight(@Context HttpHeaders headers) {\n        ResponseBuilder rb = Response.ok();\n//        enableCORS(servletContext, rb, headers);\n        return rb.build();\n    }\n\n}<fim_middle>// class below has no smell\n"}