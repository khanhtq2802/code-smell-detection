{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.runtime.rest.messages.taskmanager;\n\nimport org.apache.flink.runtime.clusterframework.types.ResourceID;\nimport org.apache.flink.runtime.instance.HardwareDescription;\nimport org.apache.flink.runtime.rest.messages.json.ResourceIDDeserializer;\nimport org.apache.flink.runtime.taskexecutor.TaskExecutor;\nimport org.apache.flink.util.Preconditions;\n\nimport org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\nimport org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonProperty;\nimport org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\nimport java.util.Objects;\n\n/**\n * Message containing base information about a {@link TaskExecutor} and more\n * detailed metrics.\n */\n<fim_suffix>public class TaskManagerDetailsInfo extends TaskManagerInfo {\n\n\tpublic static final String FIELD_NAME_METRICS = \"metrics\";\n\n\t@JsonProperty(FIELD_NAME_METRICS)\n\tprivate final TaskManagerMetricsInfo taskManagerMetrics;\n\n\t@JsonCreator\n\tpublic TaskManagerDetailsInfo(\n\t\t\t@JsonDeserialize(using = ResourceIDDeserializer.class) @JsonProperty(FIELD_NAME_RESOURCE_ID) ResourceID resourceId,\n\t\t\t@JsonProperty(FIELD_NAME_ADDRESS) String address,\n\t\t\t@JsonProperty(FIELD_NAME_DATA_PORT) int dataPort,\n\t\t\t@JsonProperty(FIELD_NAME_LAST_HEARTBEAT) long lastHeartbeat,\n\t\t\t@JsonProperty(FIELD_NAME_NUMBER_SLOTS) int numberSlots,\n\t\t\t@JsonProperty(FIELD_NAME_NUMBER_AVAILABLE_SLOTS) int numberAvailableSlots,\n\t\t\t@JsonProperty(FIELD_NAME_HARDWARE) HardwareDescription hardwareDescription,\n\t\t\t@JsonProperty(FIELD_NAME_METRICS) TaskManagerMetricsInfo taskManagerMetrics) {\n\t\tsuper(\n\t\t\tresourceId,\n\t\t\taddress,\n\t\t\tdataPort,\n\t\t\tlastHeartbeat,\n\t\t\tnumberSlots,\n\t\t\tnumberAvailableSlots,\n\t\t\thardwareDescription);\n\n\t\tthis.taskManagerMetrics = Preconditions.checkNotNull(taskManagerMetrics);\n\t}\n\n\tpublic TaskManagerDetailsInfo(TaskManagerInfo taskManagerInfo, TaskManagerMetricsInfo taskManagerMetrics) {\n\t\tthis(\n\t\t\ttaskManagerInfo.getResourceId(),\n\t\t\ttaskManagerInfo.getAddress(),\n\t\t\ttaskManagerInfo.getDataPort(),\n\t\t\ttaskManagerInfo.getLastHeartbeat(),\n\t\t\ttaskManagerInfo.getNumberSlots(),\n\t\t\ttaskManagerInfo.getNumberAvailableSlots(),\n\t\t\ttaskManagerInfo.getHardwareDescription(),\n\t\t\ttaskManagerMetrics);\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!super.equals(o)) {\n\t\t\treturn false;\n\t\t}\n\t\tTaskManagerDetailsInfo that = (TaskManagerDetailsInfo) o;\n\t\treturn Objects.equals(taskManagerMetrics, that.taskManagerMetrics);\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(super.hashCode(), taskManagerMetrics);\n\t}\n}<fim_middle>// class below has no smell\n"}