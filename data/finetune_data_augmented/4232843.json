{"text": "<fim_prefix>\n<fim_suffix>public class PredicateUtils {\n    /**\n     * This class is not normally instantiated.\n     */\n    private PredicateUtils() {}\n    // Simple predicates\n    //-----------------------------------------------------------------------------\n    /**\n     * Gets a Predicate that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see ExceptionPredicate\n     */\n    public static <T> Predicate<T> exceptionPredicate() {\n        return ExceptionPredicate.exceptionPredicate();\n    }\n    /**\n     * Gets a Predicate that always returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see TruePredicate\n     */\n    public static <T> Predicate<T> truePredicate() {\n        return TruePredicate.truePredicate();\n    }\n    /**\n     * Gets a Predicate that always returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see FalsePredicate\n     */\n    public static <T> Predicate<T> falsePredicate() {\n        return FalsePredicate.falsePredicate();\n    }\n    /**\n     * Gets a Predicate that checks if the input object passed in is null.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see NullPredicate\n     */\n    public static <T> Predicate<T> nullPredicate() {\n        return NullPredicate.nullPredicate();\n    }\n    /**\n     * Gets a Predicate that checks if the input object passed in is not null.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see NotNullPredicate\n     */\n    public static <T> Predicate<T> notNullPredicate() {\n        return NotNullPredicate.notNullPredicate();\n    }\n    /**\n     * Creates a Predicate that checks if the input object is equal to the\n     * specified object using equals().\n     *\n     * @param <T>  the type that the predicate queries\n     * @param value  the value to compare against\n     * @return the predicate\n     * @see EqualPredicate\n     */\n    public static <T> Predicate<T> equalPredicate(final T value) {\n        return EqualPredicate.equalPredicate(value);\n    }\n    /**\n     * Creates a Predicate that checks if the input object is equal to the\n     * specified object by identity.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param value  the value to compare against\n     * @return the predicate\n     * @see IdentityPredicate\n     */\n    public static <T> Predicate<T> identityPredicate(final T value) {\n        return IdentityPredicate.identityPredicate(value);\n    }\n    /**\n     * Creates a Predicate that checks if the object passed in is of\n     * a particular type, using instanceof. A <code>null</code> input\n     * object will return <code>false</code>.\n     *\n     * @param type  the type to check for, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the class is null\n     * @see InstanceofPredicate\n     */\n    public static Predicate<Object> instanceofPredicate(final Class<?> type) {\n        return InstanceofPredicate.instanceOfPredicate(type);\n    }\n    /**\n     * Creates a Predicate that returns true the first time an object is\n     * encountered, and false if the same object is received\n     * again. The comparison is by equals(). A <code>null</code> input object\n     * is accepted and will return true the first time, and false subsequently\n     * as well.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see UniquePredicate\n     */\n    public static <T> Predicate<T> uniquePredicate() {\n        // must return new instance each time\n        return UniquePredicate.uniquePredicate();\n    }\n    /**\n     * Creates a Predicate that invokes a method on the input object.\n     * The method must return either a boolean or a non-null Boolean,\n     * and have no parameters. If the input object is null, a\n     * PredicateException is thrown.\n     * <p>\n     * For example, <code>PredicateUtils.invokerPredicate(\"isEmpty\");</code>\n     * will call the <code>isEmpty</code> method on the input object to\n     * determine the predicate result.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     * @see TransformerPredicate\n     */\n    public static <T> Predicate<T> invokerPredicate(final String methodName) {\n        // reuse transformer as it has caching - this is lazy really, should have inner class here\n        return asPredicate(InvokerTransformer.<Object, Boolean>invokerTransformer(methodName));\n    }\n    /**\n     * Creates a Predicate that invokes a method on the input object.\n     * The method must return either a boolean or a non-null Boolean,\n     * and have no parameters. If the input object is null, a\n     * PredicateException is thrown.\n     * <p>\n     * For example, <code>PredicateUtils.invokerPredicate(\"isEmpty\");</code>\n     * will call the <code>isEmpty</code> method on the input object to\n     * determine the predicate result.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param methodName  the method name to call on the input object, may not be null\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the predicate\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     * @see TransformerPredicate\n     */\n    public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes,\n                                                    final Object[] args) {\n        // reuse transformer as it has caching - this is lazy really, should have inner class here\n        return asPredicate(InvokerTransformer.<Object, Boolean>invokerTransformer(methodName, paramTypes, args));\n    }\n    // Boolean combinations\n    //-----------------------------------------------------------------------------\n    /**\n     * Create a new Predicate that returns true only if both of the specified\n     * predicates are true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>and</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see AndPredicate\n     */\n    public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1,\n                                                final Predicate<? super T> predicate2) {\n        return AndPredicate.andPredicate(predicate1, predicate2);\n    }\n    /**\n     * Create a new Predicate that returns true only if all of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>all</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see AllPredicate\n     */\n    public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates) {\n        return AllPredicate.allPredicate(predicates);\n    }\n    /**\n     * Create a new Predicate that returns true only if all of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>all</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see AllPredicate\n     */\n    public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return AllPredicate.allPredicate(predicates);\n    }\n    /**\n     * Create a new Predicate that returns true if either of the specified\n     * predicates are true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>or</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see OrPredicate\n     */\n    public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1,\n                                               final Predicate<? super T> predicate2) {\n        return OrPredicate.orPredicate(predicate1, predicate2);\n    }\n    /**<fim_middle>// class below has no smell\n"}