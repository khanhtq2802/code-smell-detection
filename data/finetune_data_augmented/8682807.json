{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.igfs;\n\nimport java.io.Externalizable;\nimport java.io.IOException;\nimport java.io.ObjectInput;\nimport java.io.ObjectOutput;\nimport org.apache.ignite.internal.util.typedef.internal.U;\n\n/**\n * Handshake message.\n */\n<fim_suffix>public class IgfsHandshakeResponse implements Externalizable {\n    /** */\n    private static final long serialVersionUID = 0L;\n\n    /** IGFS name. */\n    private String igfsName;\n\n    /** Server block size. */\n    private long blockSize;\n\n    /** Whether to force sampling on client's side. */\n    private Boolean sampling;\n\n    /**\n     * {@link Externalizable} support.\n     */\n    public IgfsHandshakeResponse() {\n        // No-op.\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param blockSize Server default block size.\n     */\n    public IgfsHandshakeResponse(String igfsName, long blockSize, Boolean sampling) {\n        this.igfsName = igfsName;\n        this.blockSize = blockSize;\n        this.sampling = sampling;\n    }\n\n    /**\n     * @return IGFS name.\n     */\n    public String igfsName() {\n        return igfsName;\n    }\n\n    /**\n     * @return Server default block size.\n     */\n    public long blockSize() {\n        return blockSize;\n    }\n\n    /**\n     * @return Sampling flag.\n     */\n    public Boolean sampling() {\n        return sampling;\n    }\n\n    /** {@inheritDoc} */\n    @Override public void writeExternal(ObjectOutput out) throws IOException {\n        U.writeString(out, igfsName);\n\n        out.writeLong(blockSize);\n\n        if (sampling != null) {\n            out.writeBoolean(true);\n            out.writeBoolean(sampling);\n        }\n        else\n            out.writeBoolean(false);\n    }\n\n    /** {@inheritDoc} */\n    @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n        igfsName = U.readString(in);\n\n        blockSize = in.readLong();\n\n        if (in.readBoolean())\n            sampling = in.readBoolean();\n    }\n}<fim_middle>// class below is data class\n"}