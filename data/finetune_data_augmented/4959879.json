{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jclouds.compute.predicates;\n\nimport java.util.Set;\n\nimport org.jclouds.compute.domain.OperatingSystem;\n\nimport com.google.common.base.Predicate;\nimport com.google.common.base.Predicates;\nimport com.google.common.collect.Sets;\n\n/**\n * Container for operating system filters (predicates).\n * \n * This class has static methods that create customized predicates to use with\n * {@link org.jclouds.compute.ComputeService}.\n */\npublic class OperatingSystemPredicates {\n   /**\n    * evaluates true if the OperatingSystem is unix like\n    * \n    */\n<fim_suffix>   public static Predicate<OperatingSystem> isUnix() {\n      return new Predicate<OperatingSystem>() {\n         @Override\n         public boolean apply(OperatingSystem os) {\n            if (os.getFamily() != null) {\n               switch (os.getFamily()) {\n                  case WINDOWS:\n                     return false;\n               }\n            }\n            for (String toMatch : searchStrings(os))\n               if (toMatch != null && toMatch.toLowerCase().indexOf(\"windows\") != -1)\n                  return false;\n            return true;\n         }\n\n         @Override\n         public String toString() {\n            return \"isUnix()\";\n         }\n      };\n   }\n\n   /**\n    * evaluates true if the OperatingSystem supports the apt installer\n    * \n    */\n   public static Predicate<OperatingSystem> supportsApt() {\n      return new Predicate<OperatingSystem>() {\n         @Override\n         public boolean apply(OperatingSystem os) {\n            if (os.getFamily() != null) {\n               switch (os.getFamily()) {\n                  case DEBIAN:\n                  case UBUNTU:\n                     return true;\n               }\n            }\n            for (String toMatch : searchStrings(os))\n               if (toMatch != null && (toMatch.toLowerCase().indexOf(\"ubuntu\") != -1\n                        || toMatch.toLowerCase().indexOf(\"debian\") != -1))\n                  return true;\n            return false;\n         }\n\n         @Override\n         public String toString() {\n            return \"supportsApt()\";\n         }\n      };\n   }\n\n   /**\n    * evaluates true if the OperatingSystem supports the yum installer\n    * \n    */\n   public static Predicate<OperatingSystem> supportsYum() {\n      return new Predicate<OperatingSystem>() {\n         @Override\n         public boolean apply(OperatingSystem os) {\n            if (os.getFamily() != null) {\n               switch (os.getFamily()) {\n                  case CENTOS:\n                  case AMZN_LINUX:\n                  case FEDORA:\n                  case RHEL:\n                     return true;\n               }\n            }\n\n            for (String toMatch : searchStrings(os))\n               if (toMatch.toLowerCase().indexOf(\"centos\") != -1 || toMatch.toLowerCase().indexOf(\"rhel\") != -1\n                        || toMatch.toLowerCase().replace(\" \", \"\").indexOf(\"redhate\") != -1\n                        || toMatch.toLowerCase().indexOf(\"fedora\") != -1)\n                  return true;\n            return false;\n         }\n\n         @Override\n         public String toString() {\n            return \"supportsYum()\";\n         }\n      };\n   }\n\n   /**\n    * evaluates true if the OperatingSystem supports the zypper installer\n    * \n    */\n   public static Predicate<OperatingSystem> supportsZypper() {\n      return new Predicate<OperatingSystem>() {\n         @Override\n         public boolean apply(OperatingSystem os) {\n            if (os.getFamily() != null) {\n               switch (os.getFamily()) {\n                  case SUSE:\n                     return true;\n               }\n            }\n            for (String toMatch : searchStrings(os))\n               if (toMatch != null && toMatch.toLowerCase().indexOf(\"suse\") != -1)\n                  return true;\n            return false;\n         }\n\n         @Override\n         public String toString() {\n            return \"supportsZypper()\";\n         }\n      };\n   }\n\n   /**\n    * return everything.\n    */\n   public static Predicate<OperatingSystem> any() {\n      return Predicates.<OperatingSystem> alwaysTrue();\n   }\n\n   /**\n    * return true if this is a 64bit os.\n    */\n   public static Predicate<OperatingSystem> is64Bit() {\n      return new Predicate<OperatingSystem>() {\n         @Override\n         public boolean apply(OperatingSystem os) {\n            return os.is64Bit();\n         }\n\n         @Override\n         public String toString() {\n            return \"is64Bit()\";\n         }\n      };\n   }\n\n   static Iterable<String> searchStrings(OperatingSystem os) {\n      Set<String> search = Sets.newLinkedHashSet();\n      if (os.getName() != null)\n         search.add(os.getName());\n      if (os.getDescription() != null)\n         search.add(os.getDescription());\n      return search;\n   }\n\n}<fim_middle>// function below is feature envy\n"}