{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.cxf.rs.security.jose.jwk;\n\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.cxf.helpers.CastUtils;\nimport org.apache.cxf.jaxrs.json.basic.JsonMapObject;\n\npublic class JsonWebKeys extends JsonMapObject {\n    public static final String KEYS_PROPERTY = \"keys\";\n    private static final long serialVersionUID = -8002543601655429723L;\n\n    public JsonWebKeys() {\n\n    }\n<fim_suffix>    public JsonWebKeys(JsonWebKey key) {\n        setInitKey(key);\n    }\n    private void setInitKey(JsonWebKey key) {\n        setKey(key);\n    }\n    public List<JsonWebKey> getKeys() {\n        List<?> list = (List<?>)super.getProperty(KEYS_PROPERTY);\n        if (list != null && !list.isEmpty()) {\n            Object first = list.get(0);\n            if (first instanceof JsonWebKey) {\n                return CastUtils.cast(list);\n            }\n            List<JsonWebKey> keys = new LinkedList<>();\n            List<Map<String, Object>> listOfMaps =\n                CastUtils.cast((List<?>)super.getProperty(KEYS_PROPERTY));\n            for (Map<String, Object> map : listOfMaps) {\n                keys.add(new JsonWebKey(map));\n            }\n            return keys;\n        }\n        return null;\n    }\n    public final void setKey(JsonWebKey key) {\n        setKeys(Collections.singletonList(key));\n    }\n    public final void setKeys(List<JsonWebKey> keys) {\n        super.setProperty(KEYS_PROPERTY, keys);\n    }\n\n    public Map<String, JsonWebKey> getKeyIdMap() {\n        List<JsonWebKey> keys = getKeys();\n        if (keys == null) {\n            return Collections.emptyMap();\n        }\n        Map<String, JsonWebKey> map = new LinkedHashMap<>();\n        for (JsonWebKey key : keys) {\n            String kid = key.getKeyId();\n            if (kid != null) {\n                map.put(kid, key);\n            }\n        }\n        return map;\n    }\n    public JsonWebKey getKey(String kid) {\n        return getKeyIdMap().get(kid);\n    }\n    public Map<KeyType, List<JsonWebKey>> getKeyTypeMap() {\n        List<JsonWebKey> keys = getKeys();\n        if (keys == null) {\n            return Collections.emptyMap();\n        }\n        Map<KeyType, List<JsonWebKey>> map = new LinkedHashMap<>();\n        for (JsonWebKey key : keys) {\n            KeyType type = key.getKeyType();\n            if (type != null) {\n                List<JsonWebKey> list = map.get(type);\n                if (list == null) {\n                    list = new LinkedList<>();\n                    map.put(type, list);\n                }\n                list.add(key);\n            }\n        }\n        return map;\n    }\n\n    public Map<KeyOperation, List<JsonWebKey>> getKeyOperationMap() {\n        List<JsonWebKey> keys = getKeys();\n        if (keys == null) {\n            return Collections.emptyMap();\n        }\n        Map<KeyOperation, List<JsonWebKey>> map = new LinkedHashMap<>();\n        for (JsonWebKey key : keys) {\n            List<KeyOperation> ops = key.getKeyOperation();\n            if (ops != null) {\n                for (KeyOperation op : ops) {\n                    List<JsonWebKey> list = map.get(op);\n                    if (list == null) {\n                        list = new LinkedList<>();\n                        map.put(op, list);\n                    }\n                    list.add(key);\n                }\n            }\n        }\n        return map;\n    }\n    public List<JsonWebKey> getKeys(String keyType) {\n        KeyType kt = KeyType.getKeyType(keyType);\n        if (kt == null) {\n            return null;\n        }\n        return getKeyTypeMap().get(kt);\n    }\n    public List<JsonWebKey> getRsaKeys() {\n        return getKeyTypeMap().get(KeyType.RSA);\n    }\n    public List<JsonWebKey> getEllipticKeys() {\n        return getKeyTypeMap().get(KeyType.EC);\n    }\n    public List<JsonWebKey> getSecretKeys() {\n        return getKeyTypeMap().get(KeyType.OCTET);\n    }\n}<fim_middle>// function below has no smell\n"}