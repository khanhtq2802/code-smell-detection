{"text": "<fim_prefix>      return this;\n    }\n  }\n  public static class APIRequestGetExternalEventSources extends APIRequest<ExternalEventSource> {\n    APINodeList<ExternalEventSource> lastResponse = null;\n    @Override\n    public APINodeList<ExternalEventSource> getLastResponse() {\n      return lastResponse;\n    }\n    public static final String[] PARAMS = {\n    };\n    public static final String[] FIELDS = {\n      \"id\",\n      \"name\",\n      \"source_type\",\n    };\n    @Override\n    public APINodeList<ExternalEventSource> parseResponse(String response, String header) throws APIException {\n      return ExternalEventSource.parseResponse(response, getContext(), this, header);\n    }\n    @Override\n    public APINodeList<ExternalEventSource> execute() throws APIException {\n      return execute(new HashMap<String, Object>());\n    }\n    @Override\n    public APINodeList<ExternalEventSource> execute(Map<String, Object> extraParams) throws APIException {\n      ResponseWrapper rw = executeInternal(extraParams);\n      lastResponse = parseResponse(rw.getBody(),rw.getHeader());\n      return lastResponse;\n    }\n    public ListenableFuture<APINodeList<ExternalEventSource>> executeAsync() throws APIException {\n      return executeAsync(new HashMap<String, Object>());\n    };\n    public ListenableFuture<APINodeList<ExternalEventSource>> executeAsync(Map<String, Object> extraParams) throws APIException {\n      return Futures.transform(\n        executeAsyncInternal(extraParams),\n        new Function<ResponseWrapper, APINodeList<ExternalEventSource>>() {\n           public APINodeList<ExternalEventSource> apply(ResponseWrapper result) {\n             try {\n               return APIRequestGetExternalEventSources.this.parseResponse(result.getBody(), result.getHeader());\n             } catch (Exception e) {\n               throw new RuntimeException(e);\n             }\n           }\n         }\n      );\n    };\n    public APIRequestGetExternalEventSources(String nodeId, APIContext context) {\n      super(context, nodeId, \"/external_event_sources\", \"GET\", Arrays.asList(PARAMS));\n    }\n    @Override\n    public APIRequestGetExternalEventSources setParam(String param, Object value) {\n      setParamInternal(param, value);\n      return this;\n    }\n    @Override\n    public APIRequestGetExternalEventSources setParams(Map<String, Object> params) {\n      setParamsInternal(params);\n      return this;\n    }\n    public APIRequestGetExternalEventSources requestAllFields () {\n      return this.requestAllFields(true);\n    }\n    public APIRequestGetExternalEventSources requestAllFields (boolean value) {\n      for (String field : FIELDS) {\n        this.requestField(field, value);\n      }\n      return this;\n    }\n    @Override\n    public APIRequestGetExternalEventSources requestFields (List<String> fields) {\n      return this.requestFields(fields, true);\n    }\n    @Override\n    public APIRequestGetExternalEventSources requestFields (List<String> fields, boolean value) {\n      for (String field : fields) {\n        this.requestField(field, value);\n      }\n      return this;\n    }\n    @Override\n    public APIRequestGetExternalEventSources requestField (String field) {\n      this.requestField(field, true);\n      return this;\n    }\n    @Override\n    public APIRequestGetExternalEventSources requestField (String field, boolean value) {\n      this.requestFieldInternal(field, value);\n      return this;\n    }\n    public APIRequestGetExternalEventSources requestIdField () {\n      return this.requestIdField(true);\n    }\n    public APIRequestGetExternalEventSources requestIdField (boolean value) {\n      this.requestField(\"id\", value);\n      return this;\n    }\n    public APIRequestGetExternalEventSources requestNameField () {\n      return this.requestNameField(true);\n    }\n    public APIRequestGetExternalEventSources requestNameField (boolean value) {\n      this.requestField(\"name\", value);\n      return this;\n    }\n    public APIRequestGetExternalEventSources requestSourceTypeField () {\n      return this.requestSourceTypeField(true);\n    }\n    public APIRequestGetExternalEventSources requestSourceTypeField (boolean value) {\n      this.requestField(\"source_type\", value);\n      return this;\n    }\n  }\n  public static class APIRequestCreateExternalEventSource extends APIRequest<ProductCatalog> {\n    ProductCatalog lastResponse = null;\n    @Override\n    public ProductCatalog getLastResponse() {\n      return lastResponse;\n    }\n    public static final String[] PARAMS = {\n      \"external_event_sources\",\n    };\n    public static final String[] FIELDS = {\n    };\n    @Override\n    public ProductCatalog parseResponse(String response, String header) throws APIException {\n      return ProductCatalog.parseResponse(response, getContext(), this, header).head();\n    }\n    @Override\n    public ProductCatalog execute() throws APIException {\n      return execute(new HashMap<String, Object>());\n    }\n    @Override\n    public ProductCatalog execute(Map<String, Object> extraParams) throws APIException {\n      ResponseWrapper rw = executeInternal(extraParams);\n      lastResponse = parseResponse(rw.getBody(), rw.getHeader());\n      return lastResponse;\n    }\n    public ListenableFuture<ProductCatalog> executeAsync() throws APIException {\n      return executeAsync(new HashMap<String, Object>());\n    };\n    public ListenableFuture<ProductCatalog> executeAsync(Map<String, Object> extraParams) throws APIException {\n      return Futures.transform(\n        executeAsyncInternal(extraParams),\n        new Function<ResponseWrapper, ProductCatalog>() {\n           public ProductCatalog apply(ResponseWrapper result) {\n             try {\n               return APIRequestCreateExternalEventSource.this.parseResponse(result.getBody(), result.getHeader());\n             } catch (Exception e) {\n               throw new RuntimeException(e);\n             }\n           }\n         }\n      );\n    };\n    public APIRequestCreateExternalEventSource(String nodeId, APIContext context) {\n      super(context, nodeId, \"/external_event_sources\", \"POST\", Arrays.asList(PARAMS));\n    }\n    @Override\n    public APIRequestCreateExternalEventSource setParam(String param, Object value) {\n      setParamInternal(param, value);\n      return this;\n    }\n    @Override\n    public APIRequestCreateExternalEventSource setParams(Map<String, Object> params) {\n      setParamsInternal(params);\n      return this;\n    }\n    public APIRequestCreateExternalEventSource setExternalEventSources (List<String> externalEventSources) {\n      this.setParam(\"external_event_sources\", externalEventSources);\n      return this;\n    }\n    public APIRequestCreateExternalEventSource setExternalEventSources (String externalEventSources) {\n      this.setParam(\"external_event_sources\", externalEventSources);\n      return this;\n    }\n    public APIRequestCreateExternalEventSource requestAllFields () {\n      return this.requestAllFields(true);\n    }\n    public APIRequestCreateExternalEventSource requestAllFields (boolean value) {\n      for (String field : FIELDS) {\n        this.requestField(field, value);\n      }\n      return this;\n    }\n    @Override\n    public APIRequestCreateExternalEventSource requestFields (List<String> fields) {\n      return this.requestFields(fields, true);\n    }\n    @Override\n    public APIRequestCreateExternalEventSource requestFields (List<String> fields, boolean value) {\n      for (String field : fields) {\n        this.requestField(field, value);\n      }\n      return this;\n    }\n    @Override\n    public APIRequestCreateExternalEventSource requestField (String field) {\n      this.requestField(field, true);\n      return this;\n    }\n    @Override\n    public APIRequestCreateExternalEventSource requestField (String field, boolean value) {\n      this.requestFieldInternal(field, value);\n      return this;\n    }\n  }\n  public static class APIRequestGetFlights extends APIRequest<Flight> {\n    APINodeList<Flight> lastResponse = null;\n    @Override\n    public APINodeList<Flight> getLastResponse() {\n      return lastResponse;\n    }\n    public static final String[] PARAMS = {\n      \"bulk_pagination\",\n      \"filter\",\n    };\n    public static final String[] FIELDS = {\n      \"applinks\",\n      \"currency\",\n      \"description\",\n      \"destination_airport\",\n      \"destination_city\",\n      \"flight_id\",\n      \"id\",\n      \"images\",\n      \"oneway_currency\",\n      \"oneway_price\",\n      \"origin_airport\",\n      \"origin_city\",\n      \"price\",\n      \"sanitized_images\",\n      \"url\",\n    };\n    @Override\n    public APINodeList<Flight> parseResponse(String response, String header) throws APIException {\n      return Flight.parseResponse(response, getContext(), this, header);\n    }\n    @Override\n    public APINodeList<Flight> execute() throws APIException {\n      return execute(new HashMap<String, Object>());\n    }\n<fim_suffix>    @Override\n    public APINodeList<Flight> execute(Map<String, Object> extraParams) throws APIException {\n      ResponseWrapper rw = executeInternal(extraParams);\n      lastResponse = parseResponse(rw.getBody(),rw.getHeader());\n      return lastResponse;\n    }<fim_middle>// function below has no smell\n"}