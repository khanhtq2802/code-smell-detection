{"text": "<fim_prefix>         * @param authenticationDetailsProvider authentication details provider\n         * @return the client\n         */\n        public ObjectStorageClient build(\n                @lombok.NonNull\n                com.oracle.bmc.auth.AbstractAuthenticationDetailsProvider\n                        authenticationDetailsProvider) {\n            return new ObjectStorageClient(\n                    authenticationDetailsProvider,\n                    configuration,\n                    clientConfigurator,\n                    requestSignerFactory,\n                    signingStrategyRequestSignerFactories,\n                    additionalClientConfigurators,\n                    endpoint,\n                    executorService);\n        }\n    }\n    @Override\n    public void setEndpoint(String endpoint) {\n        LOG.info(\"Setting endpoint to {}\", endpoint);\n        client.setEndpoint(endpoint);\n    }\n    @Override\n    public void setRegion(com.oracle.bmc.Region region) {\n        com.google.common.base.Optional<String> endpoint = region.getEndpoint(SERVICE);\n        if (endpoint.isPresent()) {\n            setEndpoint(endpoint.get());\n        } else {\n            throw new IllegalArgumentException(\n                    \"Endpoint for \" + SERVICE + \" is not known in region \" + region);\n        }\n    }\n    @Override\n    public void setRegion(String regionId) {\n        regionId = regionId.toLowerCase(Locale.ENGLISH);\n        try {\n            com.oracle.bmc.Region region = com.oracle.bmc.Region.fromRegionId(regionId);\n            setRegion(region);\n        } catch (IllegalArgumentException e) {\n            LOG.info(\"Unknown regionId '{}', falling back to default endpoint format\", regionId);\n            String endpoint = com.oracle.bmc.Region.formatDefaultRegionEndpoint(SERVICE, regionId);\n            setEndpoint(endpoint);\n        }\n    }\n    @Override\n    public void close() {\n        client.close();\n    }\n    @Override\n    public AbortMultipartUploadResponse abortMultipartUpload(AbortMultipartUploadRequest request) {\n        LOG.trace(\"Called abortMultipartUpload\");\n        request = AbortMultipartUploadConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                AbortMultipartUploadConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, AbortMultipartUploadResponse>\n                transformer = AbortMultipartUploadConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response = client.delete(ib, request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public CancelWorkRequestResponse cancelWorkRequest(CancelWorkRequestRequest request) {\n        LOG.trace(\"Called cancelWorkRequest\");\n        request = CancelWorkRequestConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                CancelWorkRequestConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, CancelWorkRequestResponse>\n                transformer = CancelWorkRequestConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response = client.delete(ib, request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public CommitMultipartUploadResponse commitMultipartUpload(\n            CommitMultipartUploadRequest request) {\n        LOG.trace(\"Called commitMultipartUpload\");\n        request = CommitMultipartUploadConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                CommitMultipartUploadConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, CommitMultipartUploadResponse>\n                transformer = CommitMultipartUploadConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response =\n                        client.post(ib, request.getCommitMultipartUploadDetails(), request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public CopyObjectResponse copyObject(CopyObjectRequest request) {\n        LOG.trace(\"Called copyObject\");\n        request = CopyObjectConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                CopyObjectConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, CopyObjectResponse> transformer =\n                CopyObjectConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response =\n                        client.post(ib, request.getCopyObjectDetails(), request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public CreateBucketResponse createBucket(CreateBucketRequest request) {\n        LOG.trace(\"Called createBucket\");\n        request = CreateBucketConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                CreateBucketConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, CreateBucketResponse>\n                transformer = CreateBucketConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response =\n                        client.post(ib, request.getCreateBucketDetails(), request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n    @Override\n    public CreateMultipartUploadResponse createMultipartUpload(\n            CreateMultipartUploadRequest request) {\n        LOG.trace(\"Called createMultipartUpload\");\n        request = CreateMultipartUploadConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                CreateMultipartUploadConverter.fromRequest(client, request);\n        com.google.common.base.Function<javax.ws.rs.core.Response, CreateMultipartUploadResponse>\n                transformer = CreateMultipartUploadConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response =\n                        client.post(ib, request.getCreateMultipartUploadDetails(), request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n<fim_suffix>    @Override\n    public CreatePreauthenticatedRequestResponse createPreauthenticatedRequest(\n            CreatePreauthenticatedRequestRequest request) {\n        LOG.trace(\"Called createPreauthenticatedRequest\");\n        request = CreatePreauthenticatedRequestConverter.interceptRequest(request);\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                CreatePreauthenticatedRequestConverter.fromRequest(client, request);\n        com.google.common.base.Function<\n                        javax.ws.rs.core.Response, CreatePreauthenticatedRequestResponse>\n                transformer = CreatePreauthenticatedRequestConverter.fromResponse();\n        int attempts = 0;\n        while (true) {\n            try {\n                javax.ws.rs.core.Response response =\n                        client.post(ib, request.getCreatePreauthenticatedRequestDetails(), request);\n                return transformer.apply(response);\n            } catch (com.oracle.bmc.model.BmcException e) {\n                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS\n                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {\n                    continue;\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }<fim_middle>// function below is long method and feature envy\n"}