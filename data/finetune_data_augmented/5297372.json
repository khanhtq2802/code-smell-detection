{"text": "<fim_prefix>  public static final String COMPRESSION          = \"parquet.compression\";\n  public static final String WRITE_SUPPORT_CLASS  = \"parquet.write.support.class\";\n  public static final String DICTIONARY_PAGE_SIZE = \"parquet.dictionary.page.size\";\n  public static final String ENABLE_DICTIONARY    = \"parquet.enable.dictionary\";\n  public static final String VALIDATION           = \"parquet.validation\";\n  public static final String WRITER_VERSION       = \"parquet.writer.version\";\n  public static final String MEMORY_POOL_RATIO    = \"parquet.memory.pool.ratio\";\n  public static final String MIN_MEMORY_ALLOCATION = \"parquet.memory.min.chunk.size\";\n  public static final String MAX_PADDING_BYTES    = \"parquet.writer.max-padding\";\n  public static final String MIN_ROW_COUNT_FOR_PAGE_SIZE_CHECK = \"parquet.page.size.row.check.min\";\n  public static final String MAX_ROW_COUNT_FOR_PAGE_SIZE_CHECK = \"parquet.page.size.row.check.max\";\n  public static final String ESTIMATE_PAGE_SIZE_CHECK = \"parquet.page.size.check.estimate\";\n  public static final String COLUMN_INDEX_TRUNCATE_LENGTH = \"parquet.columnindex.truncate.length\";\n  public static final String PAGE_ROW_COUNT_LIMIT = \"parquet.page.row.count.limit\";\n  public static JobSummaryLevel getJobSummaryLevel(Configuration conf) {\n    String level = conf.get(JOB_SUMMARY_LEVEL);\n    String deprecatedFlag = conf.get(ENABLE_JOB_SUMMARY);\n    if (deprecatedFlag != null) {\n      LOG.warn(\"Setting \" + ENABLE_JOB_SUMMARY + \" is deprecated, please use \" + JOB_SUMMARY_LEVEL);\n    }\n    if (level != null && deprecatedFlag != null) {\n      LOG.warn(\"Both \" + JOB_SUMMARY_LEVEL + \" and \" + ENABLE_JOB_SUMMARY + \" are set! \" + ENABLE_JOB_SUMMARY + \" will be ignored.\");\n    }\n    if (level != null) {\n      return JobSummaryLevel.valueOf(level.toUpperCase());\n    }\n    if (deprecatedFlag != null) {\n      return Boolean.valueOf(deprecatedFlag) ? JobSummaryLevel.ALL : JobSummaryLevel.NONE;\n    }\n    return JobSummaryLevel.ALL;\n  }\n  public static void setWriteSupportClass(Job job,  Class<?> writeSupportClass) {\n    getConfiguration(job).set(WRITE_SUPPORT_CLASS, writeSupportClass.getName());\n  }\n  public static void setWriteSupportClass(JobConf job, Class<?> writeSupportClass) {\n      job.set(WRITE_SUPPORT_CLASS, writeSupportClass.getName());\n  }\n  public static Class<?> getWriteSupportClass(Configuration configuration) {\n    final String className = configuration.get(WRITE_SUPPORT_CLASS);\n    if (className == null) {\n      return null;\n    }\n    final Class<?> writeSupportClass = ConfigurationUtil.getClassFromConfig(configuration, WRITE_SUPPORT_CLASS, WriteSupport.class);\n    return writeSupportClass;\n  }\n  public static void setBlockSize(Job job, int blockSize) {\n    getConfiguration(job).setInt(BLOCK_SIZE, blockSize);\n  }\n  public static void setPageSize(Job job, int pageSize) {\n    getConfiguration(job).setInt(PAGE_SIZE, pageSize);\n  }\n  public static void setDictionaryPageSize(Job job, int pageSize) {\n    getConfiguration(job).setInt(DICTIONARY_PAGE_SIZE, pageSize);\n  }\n  public static void setCompression(Job job, CompressionCodecName compression) {\n    getConfiguration(job).set(COMPRESSION, compression.name());\n  }\n  public static void setEnableDictionary(Job job, boolean enableDictionary) {\n    getConfiguration(job).setBoolean(ENABLE_DICTIONARY, enableDictionary);\n  }\n  public static boolean getEnableDictionary(JobContext jobContext) {\n    return getEnableDictionary(getConfiguration(jobContext));\n  }\n  public static int getBlockSize(JobContext jobContext) {\n    return getBlockSize(getConfiguration(jobContext));\n  }\n  public static int getPageSize(JobContext jobContext) {\n    return getPageSize(getConfiguration(jobContext));\n  }\n  public static int getDictionaryPageSize(JobContext jobContext) {\n    return getDictionaryPageSize(getConfiguration(jobContext));\n  }\n  public static CompressionCodecName getCompression(JobContext jobContext) {\n    return getCompression(getConfiguration(jobContext));\n  }\n  public static boolean isCompressionSet(JobContext jobContext) {\n    return isCompressionSet(getConfiguration(jobContext));\n  }\n  public static void setValidation(JobContext jobContext, boolean validating) {\n    setValidation(getConfiguration(jobContext), validating);\n  }\n  public static boolean getValidation(JobContext jobContext) {\n    return getValidation(getConfiguration(jobContext));\n  }\n  public static boolean getEnableDictionary(Configuration configuration) {\n    return configuration.getBoolean(\n        ENABLE_DICTIONARY, ParquetProperties.DEFAULT_IS_DICTIONARY_ENABLED);\n  }\n  public static int getMinRowCountForPageSizeCheck(Configuration configuration) {\n    return configuration.getInt(MIN_ROW_COUNT_FOR_PAGE_SIZE_CHECK,\n        ParquetProperties.DEFAULT_MINIMUM_RECORD_COUNT_FOR_CHECK);\n  }\n  public static int getMaxRowCountForPageSizeCheck(Configuration configuration) {\n    return configuration.getInt(MAX_ROW_COUNT_FOR_PAGE_SIZE_CHECK,\n        ParquetProperties.DEFAULT_MAXIMUM_RECORD_COUNT_FOR_CHECK);\n  }\n  public static boolean getEstimatePageSizeCheck(Configuration configuration) {\n    return configuration.getBoolean(ESTIMATE_PAGE_SIZE_CHECK,\n        ParquetProperties.DEFAULT_ESTIMATE_ROW_COUNT_FOR_PAGE_SIZE_CHECK);\n  }\n  @Deprecated\n  public static int getBlockSize(Configuration configuration) {\n    return configuration.getInt(BLOCK_SIZE, DEFAULT_BLOCK_SIZE);\n  }\n  public static long getLongBlockSize(Configuration configuration) {\n    return configuration.getLong(BLOCK_SIZE, DEFAULT_BLOCK_SIZE);\n  }\n  public static int getPageSize(Configuration configuration) {\n    return configuration.getInt(PAGE_SIZE, ParquetProperties.DEFAULT_PAGE_SIZE);\n  }\n  public static int getDictionaryPageSize(Configuration configuration) {\n    return configuration.getInt(\n        DICTIONARY_PAGE_SIZE, ParquetProperties.DEFAULT_DICTIONARY_PAGE_SIZE);\n  }\n  public static WriterVersion getWriterVersion(Configuration configuration) {\n    String writerVersion = configuration.get(\n        WRITER_VERSION, ParquetProperties.DEFAULT_WRITER_VERSION.toString());\n    return WriterVersion.fromString(writerVersion);\n  }\n  public static CompressionCodecName getCompression(Configuration configuration) {\n    return CodecConfig.getParquetCompressionCodec(configuration);\n  }\n  public static boolean isCompressionSet(Configuration configuration) {\n    return CodecConfig.isParquetCompressionSet(configuration);\n  }\n  public static void setValidation(Configuration configuration, boolean validating) {\n    configuration.setBoolean(VALIDATION, validating);\n  }\n  public static boolean getValidation(Configuration configuration) {\n    return configuration.getBoolean(VALIDATION, false);\n  }\n  private CompressionCodecName getCodec(TaskAttemptContext taskAttemptContext) {\n    return CodecConfig.from(taskAttemptContext).getCodec();\n  }\n  public static void setMaxPaddingSize(JobContext jobContext, int maxPaddingSize) {\n    setMaxPaddingSize(getConfiguration(jobContext), maxPaddingSize);\n  }\n  public static void setMaxPaddingSize(Configuration conf, int maxPaddingSize) {\n    conf.setInt(MAX_PADDING_BYTES, maxPaddingSize);\n  }\n  private static int getMaxPaddingSize(Configuration conf) {\n    return conf.getInt(MAX_PADDING_BYTES, ParquetWriter.MAX_PADDING_SIZE_DEFAULT);\n  }\n  public static void setColumnIndexTruncateLength(JobContext jobContext, int length) {\n    setColumnIndexTruncateLength(getConfiguration(jobContext), length);\n  }\n  public static void setColumnIndexTruncateLength(Configuration conf, int length) {\n    conf.setInt(COLUMN_INDEX_TRUNCATE_LENGTH, length);\n  }\n  private static int getColumnIndexTruncateLength(Configuration conf) {\n    return conf.getInt(COLUMN_INDEX_TRUNCATE_LENGTH, ParquetProperties.DEFAULT_COLUMN_INDEX_TRUNCATE_LENGTH);\n  }\n  public static void setPageRowCountLimit(JobContext jobContext, int rowCount) {\n    setPageRowCountLimit(getConfiguration(jobContext), rowCount);\n  }\n  public static void setPageRowCountLimit(Configuration conf, int rowCount) {\n    conf.setInt(PAGE_ROW_COUNT_LIMIT, rowCount);\n  }\n<fim_suffix>  private static int getPageRowCountLimit(Configuration conf) {\n    return conf.getInt(PAGE_ROW_COUNT_LIMIT, ParquetProperties.DEFAULT_PAGE_ROW_COUNT_LIMIT);\n  }<fim_middle>// function below has no smell\n"}