{"text": "<fim_prefix>\n<fim_suffix>public class HeaderParser {\n    private static final String DIRECTIVE_FILTER = \"filter\"; // NOI18N\n    private final String headerName;\n    private final Map<String, String> parameters = new HashMap<>();\n    private final Map<String, String> directives = new HashMap<>();\n    private final Map<String, String> filterValue = new HashMap<>();\n    private final Feedback feedback;\n    private String header;\n    private int pos;\n    private String directiveOrParameterName;\n    private int contentStart;\n    private String versionFilter;\n    // static final ResourceBundle BUNDLE =\n    // ResourceBundle.getBundle(\"org.graalvm.component.installer.persist.Bundle\");\n    public HeaderParser(String headerName, String header, Feedback feedback) {\n        this.headerName = headerName;\n        this.feedback = feedback;\n        if (header != null) {\n            // trim whitespaces;\n            this.header = header.trim();\n        } else {\n            this.header = \"\";\n        }\n    }\n    private MetadataException metaEx(String key, Object... args) {\n        return new MetadataException(headerName, feedback.l10n(key, args));\n    }\n    public HeaderParser mustExist() throws MetadataException {\n        if (header == null || header.isEmpty()) {\n            throw metaEx(\"ERROR_HeaderMissing\", headerName);\n        }\n        return this;\n    }\n    private static boolean isAlphaNum(char c) {\n        return (c >= '0' && c <= '9') ||    // NOI18N\n                        (c >= 'A' && c <= 'Z') ||    // NOI18N\n                        (c >= 'a' && c <= 'z');      // NOI18N\n    }\n    private static boolean isToken(char c) {\n        return isAlphaNum(c) || c == '_' || c == '-'; // NOI18N\n    }\n    private static boolean isExtended(char c) {\n        return isToken(c) || c == '.';\n    }\n    public boolean getBoolean(Boolean defValue) {\n        if (pos >= header.length()) {\n            if (defValue == null) {\n                throw metaEx(\"ERROR_HeaderMissing\", headerName); // NOI18N\n            }\n            return defValue;\n        } else {\n            String s = header.substring(pos).trim().toLowerCase(Locale.ENGLISH);\n            switch (s) {\n                case \"true\": // NOI18N\n                    return true;\n                case \"false\": // NOI18N\n                    return false;\n            }\n            throw metaEx(\"ERROR_HeaderInvalid\", headerName, s); // NOI18N\n        }\n    }\n    public String getContents(String defValue) {\n        if (pos >= header.length()) {\n            return defValue;\n        } else {\n            return header.substring(pos).trim();\n        }\n    }\n    private void addFilterAttribute(String attrName, String value) {\n        if (filterValue.put(attrName, value) != null) {\n            throw metaErr(\"ERROR_DuplicateFilterAttribute\");\n        }\n    }\n    private boolean isEmpty() {\n        return pos >= header.length();\n    }\n    public String parseSymbolicName() throws MetadataException {\n        return parseNameOrNamespace(HeaderParser::isToken, \"ERROR_MissingSymbolicName\", \"ERROR_InvalidSymbolicName\", '.');\n    }\n    private char next() {\n        return pos < header.length() ? header.charAt(pos++) : 0;\n    }\n    private void advance() {\n        pos++;\n    }\n    private char ch() {\n        return isEmpty() ? 0 : header.charAt(pos);\n    }\n    private String returnCut() {\n        String s = cut();\n        skipWhitespaces();\n        return s;\n    }\n    private void skipWhitespaces() {\n        while (!isEmpty()) {\n            if (!Character.isWhitespace(ch())) {\n                contentStart = pos;\n                return;\n            }\n            advance();\n        }\n        contentStart = -1;\n    }\n    private void skipWithSemicolon() {\n        skipWhitespaces();\n        if (ch() == ';') {\n            advance();\n        }\n        contentStart = -1;\n    }\n    private String cut() {\n        return cut(0);\n    }\n    private String cut(int delim) {\n        int e = pos - delim;\n        return contentStart == -1 || contentStart >= e ? \"\" : header.substring(contentStart, e); // NOI18N\n    }\n    private void markContent() {\n        contentStart = pos;\n    }\n    private String readExtendedParameter() throws MetadataException {\n        skipWhitespaces();\n        while (!isEmpty()) {\n            char c = next();\n            if (Character.isWhitespace(c)) {\n                break;\n            }\n            if (!isExtended(c)) {\n                throw metaEx(\"ERROR_InvalidParameterSyntax\", directiveOrParameterName);\n            }\n        }\n        String s = cut();\n        skipWithSemicolon();\n        return s;\n    }\n    private String readQuotedParameter() throws MetadataException {\n        markContent();\n        while (!isEmpty()) {\n            char c = next();\n            switch (c) {\n                case '\"':\n                    return cut(1);\n                case '\\n':\n                case '\\r':\n                case 0:\n                    throw metaEx(\"ERROR_InvalidQuotedString\");\n                case '\\\\':\n                    next();\n                    break;\n            }\n        }\n        throw metaEx(\"ERROR_InvalidQuotedString\");\n    }\n    private String parseArgument() throws MetadataException {\n        skipWhitespaces();\n        char c = ch();\n        if (c == ';') {\n            throw metaEx(\"ERROR_MissingArgument\", directiveOrParameterName);\n        }\n        if (c == '\"') { // NOI18N\n            advance();\n            return readQuotedParameter();\n        } else {\n            return readExtendedParameter();\n        }\n    }\n    private String parseNameOrNamespace(Predicate<Character> charAcceptor,\n                    String missingKeyName, String invalidKeyName, char compDelimiter) throws MetadataException {\n        if (header == null || isEmpty()) {\n            throw metaEx(missingKeyName);\n        }\n        skipWhitespaces();\n        boolean componentEmpty = true;\n        while (!isEmpty()) {\n            char c = ch();\n            if (c == ';') {\n                String s = cut();\n                return s;\n            }\n            advance();\n            if (c == compDelimiter) {\n                if (componentEmpty) {\n                    throw metaEx(invalidKeyName);\n                }\n                componentEmpty = true;\n                continue;\n            }\n            if (Character.isWhitespace(c)) {\n                break;\n            }\n            if (!charAcceptor.test(c)) {\n                throw metaEx(invalidKeyName);\n            }\n            componentEmpty = false;\n        }\n        return returnCut();\n    }\n    private String parseNamespace() throws MetadataException {\n        return parseNameOrNamespace(HeaderParser::isExtended, \"ERROR_MissingCapabilityName\", \"ERROR_InvalidCapabilityName\", (char) 0);\n    }\n    /**\n     * Parses version at the current position.\n     */\n    public String version() throws MetadataException {\n        int versionStart = -1;\n        int partCount = 0;\n        boolean partContents = false;\n        if (isEmpty()) {\n            throw metaErr(\"ERROR_InvalidVersion\");\n        }\n        boolean dash = false;\n        while (!isEmpty()) {\n            char c = ch();\n            if (Character.isWhitespace(c)) {\n                if (versionStart != -1) {\n                    break;\n                }\n                advance();\n                continue;\n            }\n            if (c == ';') {\n                break;\n            }\n            advance();\n            if (c == '.') {\n                if (++partCount > 3 || !partContents) {\n                    throw metaErr(\"ERROR_InvalidVersion\");\n                }\n                partContents = false;\n                dash = false;\n                continue;\n            }\n            if (partCount > 0 && partContents && c == '-') {\n                dash = true;\n                continue;\n            }\n            if (c >= '0' && c <= '9') {\n                if (versionStart == -1) {\n                    versionStart = pos - 1;\n                }\n            } else {\n                if (partCount < 1) {\n                    throw metaErr(\"ERROR_InvalidVersion\");\n                }\n                boolean err = false;\n                if (partCount >= 3 || dash) {\n                    err = !isToken(c);\n                } else {\n                    err = true;\n                }\n                if (err) {\n                    throw metaErr(\"ERROR_InvalidVersion\");\n                }\n            }\n            partContents = true;\n        }\n        String v = cut();\n        skipWhitespaces();\n        if (!isEmpty() || !partContents) {\n            throw metaErr(\"ERROR_InvalidVersion\");\n        }\n        return v;\n    }\n    private String readExtendedName() {\n        skipWhitespaces();\n        while (!isEmpty()) {\n            char c = ch();\n            if (isExtended(c)) {\n                advance();\n            } else if (Character.isWhitespace(c) || c == ':' || c == '=') {\n                break;\n            } else {\n                throw metaEx(\"ERROR_InvalidParameterName\");\n            }\n        }\n        return returnCut();\n    }\n    private void parseParameters() {\n        while (!isEmpty()) {\n            String paramOrDirectiveName = readExtendedName();\n            if (paramOrDirectiveName.isEmpty()) {\n                throw metaEx(\"ERROR_InvalidParameterName\");\n            }\n            directiveOrParameterName = paramOrDirectiveName;<fim_middle>// class below is blob\n"}