{"text": "<fim_prefix>/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npackage com.example.places;\nimport android.support.annotation.Nullable;\nimport android.util.Log;\nimport com.example.places.model.CurrentPlaceResult;\nimport com.example.places.model.Place;\nimport com.example.places.utils.BitmapDownloadTask;\nimport com.facebook.FacebookRequestError;\nimport com.facebook.FacebookSdk;\nimport com.facebook.GraphRequest;\nimport com.facebook.GraphResponse;\nimport com.facebook.places.PlaceManager;\nimport com.facebook.places.model.CurrentPlaceFeedbackRequestParams;\nimport com.facebook.places.model.CurrentPlaceRequestParams;\nimport com.facebook.places.model.PlaceFields;\nimport com.facebook.places.model.PlaceInfoRequestParams;\nimport com.facebook.places.model.PlaceSearchRequestParams;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.List;\n/**\n * This class illustrates how to use the Places Graph SDK to:\n * <ul>\n *   <li>Get the current place.</li>\n *   <li>Provide feedback on the current place response.</li>\n *   <li>Search places.</li>\n *   <li>Fetch detailed place info.</li>\n *</ul>\n * This class also illustrates how to parse the responses of the Places Graph SDK.\n */\npublic class PlacesGraphSDKHelper {\n    private static final String TAG = \"PlacesGraphSDKHelper\";\n    private static final String PARAM_DATA = \"data\";\n    /**\n     * These are the place fields that are fetched in the place info request.\n     */\n    private static final String[] PLACE_INFO_REQUEST_FIELDS = new String[]{\n            Place.ID,\n            Place.NAME,\n            Place.DESCRIPTION,\n            Place.CHECKINS,\n            Place.ABOUT,\n            Place.ENGAGEMENT,\n            Place.HOURS,\n            Place.COVER,\n            Place.IS_ALWAYS_OPEN,\n            Place.IS_PERMANENTLY_CLOSED,\n            Place.IS_VERIFIED,\n            Place.LINK,\n            Place.APP_LINKS,\n            Place.OVERALL_STAR_RATING,\n            Place.PARKING,\n            Place.RESTAURANT_SPECIALTIES,\n            Place.WEBSITE,\n            Place.LOCATION,\n            Place.PHONE,\n            Place.PRICE_RANGE,\n            Place.RATING_COUNT,\n            Place.CATEGORY_LIST,\n            Place.RESTAURANT_SERVICES,\n            Place.PAYMENT_OPTIONS,\n            Place.SINGLE_LINE_ADDRESS,\n    };\n    /**\n     * Defines the listener invoked when the current place response is received.\n     */\n    public interface CurrentPlaceRequestListener {\n        /**\n         * Invoked when the current place response is received.\n         *\n         * @param result This object contains the list of places, and the tracking ID parsed\n         *  from the current place response; or it contains null if the request fails.\n         * @param response The Places Graph response.\n         */\n        void onCurrentPlaceResult(\n                @Nullable CurrentPlaceResult result,\n                GraphResponse response);\n        /**\n         * Invoked when the Places Graph SDK fails to retrieve the current location.\n         * @param error Contains a message that explains why retrieving the location failed.\n         */\n        void onLocationError(PlaceManager.LocationError error);\n    }\n    /**\n     * Defines the listener invoked when the place search response is received.\n     */\n    public interface PlaceSearchRequestListener {\n        /**\n         * Invoked when the place search response has been received.\n         *\n         * @param places The list of places parsed from the response,\n         *               or contains null if the request fails.\n         * @param response The Places Graph response.\n         */\n        void onPlaceSearchResult(@Nullable List<Place> places, GraphResponse response);\n        /**\n         * Invoked when the Places Graph SDK fails to retrieve the current location.\n         * @param error Contains the reason why retrieving the location failed.\n         */\n        void onLocationError(PlaceManager.LocationError error);\n    }\n    /**\n     * Defines the listener invoked when the place info response is received.\n     */\n<fim_suffix>    public interface PlaceInfoRequestListener {\n        /**\n         * Invoked when the place info response is received.\n         *\n         * @param place The place instance parsed from the response,\n         *              or contains null if the request fails.\n         * @param response The Places Graph response.\n         */\n        void onPlaceInfoResult(@Nullable Place place, GraphResponse response);\n    }\n    /**\n     * Creates and executes a place search request.\n     * @param searchQuery The text search term. This can be null to let the Places Graph SDK\n     *                    return nearby places.\n     * @param listener Invoked when the place search response is received,\n     *                 and when the place search request fails.\n     */\n    public static void searchPlace(String searchQuery, PlaceSearchRequestListener listener) {\n        // Creates the place search request builder.\n        PlaceSearchRequestParams.Builder builder = new PlaceSearchRequestParams.Builder();\n        // Specifies the text search query. This field is optional. If you don't specify it,\n        // then places of importance within the maximum distance radius will be returned.\n        builder.setSearchText(searchQuery);\n        // The maximum search radius in meters.\n        builder.setDistance(1000);\n        // The maximum number of places to return.\n        builder.setLimit(10);\n        // The place fields to be returned.\n        builder.addField(Place.NAME);\n        builder.addField(Place.LOCATION);\n        builder.addField(Place.PHONE);\n        // Creates the callback invoked when the request is ready.\n        OnPlaceSearchRequestReadyCallback onRequestReadyCallback =\n                new OnPlaceSearchRequestReadyCallback(listener);\n        // The Places Graph SDK starts retrieving the current device location, and constructs\n        // the GraphRequest. The callback is invoked once the request is ready.\n        PlaceManager.newPlaceSearchRequest(builder.build(), onRequestReadyCallback);\n    }\n    private static class OnPlaceSearchRequestReadyCallback\n            implements PlaceManager.OnRequestReadyCallback, GraphRequest.Callback {\n        private final WeakReference<PlaceSearchRequestListener> listenerRef;\n        OnPlaceSearchRequestReadyCallback(PlaceSearchRequestListener listener) {\n            listenerRef = new WeakReference<>(listener);\n        }\n        @Override\n        public void onLocationError(PlaceManager.LocationError error) {\n            // Invoked if the Places Graph SDK fails to retrieve the device location.\n            PlaceSearchRequestListener listener = listenerRef.get();\n            if (listener == null) {\n                Log.d(TAG, \"listener is null!\");\n            } else {\n                listener.onLocationError(error);\n            }\n        }\n        @Override\n        public void onRequestReady(GraphRequest graphRequest) {\n            // The place search request is ready to be executed.\n            // The request can be customized here if needed.\n            // Sets the callback, and executes the request.\n            graphRequest.setCallback(this);\n            graphRequest.executeAsync();\n        }\n        @Override\n        public void onCompleted(GraphResponse response) {\n            // Event invoked when the place search response is received.\n            List<Place> places = null;\n            FacebookRequestError error = response.getError();\n            if (error == null) {\n                // Parses the place search response.\n                try {\n                    JSONObject jsonObject = response.getJSONObject();\n                    if (jsonObject != null) {\n                        JSONArray jsonArray = jsonObject.optJSONArray(PARAM_DATA);\n                        if (jsonArray != null) {\n                            int length = jsonArray.length();\n                            places = new ArrayList<>(length);\n                            for (int i = 0; i < length; i++) {\n                                places.add(new Place(jsonArray.getJSONObject(i)));\n                            }\n                        }\n                    }\n                } catch (JSONException e) {\n                    Log.e(TAG, \"failed to parse place the place search response\", e);\n                }\n            } else {\n                // The error object contains more information on the error.\n                Log.d(TAG, \"response error: \" + error);\n            }\n            PlaceSearchRequestListener listener = listenerRef.get();\n            if (listener == null) {<fim_middle>// class below has no smell\n"}