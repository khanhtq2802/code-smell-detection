{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.cxf.ws.rm;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.Executor;\n\nimport javax.xml.namespace.QName;\n\nimport org.apache.cxf.databinding.DataBinding;\nimport org.apache.cxf.endpoint.Endpoint;\nimport org.apache.cxf.interceptor.Interceptor;\nimport org.apache.cxf.message.Message;\nimport org.apache.cxf.service.Service;\nimport org.apache.cxf.service.invoker.Invoker;\nimport org.apache.cxf.service.model.EndpointInfo;\nimport org.apache.cxf.service.model.ServiceInfo;\n\n/**\n *\n */\npublic class WrappedService implements Service {\n\n    private Service wrappedService;\n    private DataBinding dataBinding;\n    private QName name;\n    private List<ServiceInfo> serviceInfos;\n    private Map<QName, Endpoint> endpoints;\n    private Invoker invoker;\n\n    WrappedService(Service wrapped, QName n, ServiceInfo info) {\n        wrappedService = wrapped;\n        name = n;\n        serviceInfos = Collections.singletonList(info);\n    }\n\n    public Service getWrappedService() {\n        return wrappedService;\n    }\n\n    public DataBinding getDataBinding() {\n        return dataBinding;\n    }\n\n    public QName getName() {\n        return name;\n    }\n\n    public List<ServiceInfo> getServiceInfos() {\n        return serviceInfos;\n    }\n    public ServiceInfo getServiceInfo() {\n        return serviceInfos.get(0);\n    }\n\n    public void setDataBinding(DataBinding arg0) {\n        dataBinding = arg0;\n    }\n\n    public Map<QName, Endpoint> getEndpoints() {\n        return endpoints;\n    }\n\n    public Invoker getInvoker() {\n        return invoker;\n    }\n\n    public void setInvoker(Invoker arg0) {\n        invoker = arg0;\n    }\n\n    // remaining APIs all wrapped\n\n    public Executor getExecutor() {\n        return wrappedService.getExecutor();\n    }\n\n    public void setExecutor(Executor arg0) {\n        wrappedService.setExecutor(arg0);\n    }\n\n    public List<Interceptor<? extends Message>> getInFaultInterceptors() {\n        return wrappedService.getInFaultInterceptors();\n    }\n\n    public List<Interceptor<? extends Message>> getInInterceptors() {\n        return wrappedService.getInInterceptors();\n    }\n\n    public List<Interceptor<? extends Message>> getOutFaultInterceptors() {\n        return wrappedService.getOutFaultInterceptors();\n    }\n\n    public List<Interceptor<? extends Message>> getOutInterceptors() {\n        return wrappedService.getOutInterceptors();\n    }\n\n    public void clear() {\n        wrappedService.clear();\n    }\n\n    public boolean containsKey(Object key) {\n        return wrappedService.containsKey(key);\n    }\n\n    public boolean containsValue(Object value) {\n        return wrappedService.containsValue(value);\n    }\n\n    public Set<java.util.Map.Entry<String, Object>> entrySet() {\n        return wrappedService.entrySet();\n    }\n\n    public Object get(Object key) {\n        return wrappedService.get(key);\n    }\n\n    public boolean isEmpty() {\n        return wrappedService.isEmpty();\n    }\n\n<fim_suffix>    public Set<String> keySet() {\n        return wrappedService.keySet();\n    }\n\n    public Object put(String key, Object value) {\n        return wrappedService.put(key, value);\n    }\n\n    public void putAll(Map<? extends String, ? extends Object> t) {\n        wrappedService.putAll(t);\n    }\n\n    public Object remove(Object key) {\n        return wrappedService.remove(key);\n    }\n\n    public int size() {\n        return wrappedService.size();\n    }\n\n    public Collection<Object> values() {\n        return wrappedService.values();\n    }\n\n    void setEndpoint(Endpoint e) {\n        endpoints = Collections.singletonMap(e.getEndpointInfo().getName(), e);\n    }\n\n    public EndpointInfo getEndpointInfo(QName endpoint) {\n        return serviceInfos.get(0).getEndpoint(endpoint);\n    }\n\n\n}<fim_middle>// function below has no smell\n"}