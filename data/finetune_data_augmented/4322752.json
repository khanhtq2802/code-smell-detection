{"text": "<fim_prefix>/*\n\n   Derby - Class org.apache.derby.iapi.services.io.LimitInputStream\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to you under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\n\npackage org.apache.derby.iapi.services.io;\n\nimport java.io.InputStream;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\n\n/**\n\tAn abstract InputStream that provides abstract methods to limit the range that\n\tcan be read from the stream.\n*/\n<fim_suffix>public class LimitInputStream extends FilterInputStream implements Limit {\n\n\tprotected int remainingBytes;\n\tprotected boolean limitInPlace;\n\n\t/**\n\t\tConstruct a LimitInputStream and call the clearLimit() method.\n\n        @param in InputStream to wrap\n\t*/\n\tpublic LimitInputStream(InputStream in) {\n\t\tsuper(in);\n\t\tclearLimit();\n\t}\n\n\tpublic int read() throws IOException {\n\n\t\tif (!limitInPlace)\n\t\t\treturn super.read();\n\t\t\n\t\tif (remainingBytes == 0)\n\t\t\treturn -1; // end of file\n\n\t\t\n\t\tint value = super.read();\n\t\tif (value >= 0)\n\t\t\tremainingBytes--;\n\t\treturn value;\n\n\t}\n\n\tpublic int read(byte b[], int off, int len) throws IOException {\n\n\t\tif (!limitInPlace)\n\t\t\treturn super.read(b, off, len);\n\n\n\t\tif (remainingBytes == 0)\n\t\t\treturn -1;\n\n\t\tif (remainingBytes < len) {\n\t\t\tlen = remainingBytes; // end of file\n\t\t}\n\n\t\tlen = super.read(b, off, len);\n\t\tif (len > 0)\n\t\t\tremainingBytes -= len;\n\n\t\treturn len;\n\t}\n\n\tpublic long skip(long count)  throws IOException {\n\t\tif (!limitInPlace)\n\t\t\treturn super.skip(count);\n\n\t\tif (remainingBytes == 0)\n\t\t\treturn 0; // end of file\n\n\t\tif (remainingBytes < count)\n\t\t\tcount = remainingBytes;\n\n\t\tcount = super.skip(count);\n\t\tremainingBytes -= count;\n\t\treturn count;\n\t}\n\n\tpublic int available() throws IOException {\n\n\t\tif (!limitInPlace)\n\t\t\treturn super.available();\n\n\t\tif (remainingBytes == 0)\n\t\t\treturn 0; // end of file\n\n\t\tint actualLeft = super.available();\n\n\t\tif (remainingBytes < actualLeft)\n\t\t\treturn remainingBytes;\n\t\t\n\n\t\treturn actualLeft;\n\t}\n\n\n\t/**\n\t\tSet the limit of the stream that can be read. After this\n\t\tcall up to and including length bytes can be read from or skipped in\n\t\tthe stream. Any attempt to read more than length bytes will\n\t\tresult in an EOFException\n\t*/\n\tpublic void setLimit(int length) {\n\t\tremainingBytes = length;\n\t\tlimitInPlace = true;\n\t}\n\n\t/**\n\t\tClear any limit set by setLimit. After this call no limit checking\n\t\twill be made on any read until a setLimit()) call is made.\n\n\t\t@return the number of bytes within the limit that have not been read.\n\t\t-1 if no limit was set.\n\t*/\n\tpublic int clearLimit() {\n\t\tint leftOver = remainingBytes;\n\t\tlimitInPlace = false;\n\t\tremainingBytes = -1;\n\t\treturn leftOver;\n\t}\n\n\tpublic void setInput(InputStream in) {\n\t\tthis.in = in;\n\t}\n\n    /**\n     * This stream doesn't support mark/reset, independent of whether the\n     * underlying stream does so or not.\n     * <p>\n     * The reason for not supporting mark/reset, is that it is hard to combine\n     * with the limit functionality without always keeping track of the number\n     * of bytes read.\n     *\n     * @return {@code false}\n     */\n    public boolean markSupported() {\n        return false;\n    }\n}<fim_middle>// class below has no smell\n"}