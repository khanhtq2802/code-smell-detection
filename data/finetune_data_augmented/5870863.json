{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.uima.cas.impl;\n\nimport org.apache.uima.cas.FeatureStructure;\nimport org.apache.uima.cas.ShortArrayFS;\n\n/**\n * Implementation of the {@link org.apache.uima.cas.ArrayFS ArrayFS} interface.\n * \n * \n */\n<fim_suffix>public class ShortArrayFSImpl extends CommonAuxArrayFSImpl implements ShortArrayFS {\n\n  private static class ShortArrayGenerator implements FSGenerator {\n    /**\n     * @see org.apache.uima.cas.impl.FSGenerator#createFS(int, LowLevelCAS)\n     */\n    public FeatureStructure createFS(int addr, CASImpl cas) {\n      return new ShortArrayFSImpl(addr, cas);\n    }\n  }\n\n  public ShortArrayFSImpl(int addr, CASImpl cas) {\n    super(cas, addr); // note arg reversal\n  }\n\n  static FSGenerator generator() {\n    return new ShortArrayGenerator();\n  }\n\n  /**\n   * @see org.apache.uima.cas.ShortArrayFS#get(int)\n   */\n  public short get(int i) {\n    casImpl.checkArrayBounds(addr, i);\n    return casImpl.ll_getShortArrayValue(addr, i);\n  }\n\n  /**\n   * @see org.apache.uima.cas.ShortArrayFS#set(int, short)\n   */\n  public void set(int i, short val) {\n    casImpl.checkArrayBounds(addr, i);\n    casImpl.ll_setShortArrayValue(addr, i, val);\n  }\n\n  /**\n   * @see org.apache.uima.cas.ShortArrayFS#copyFromArray(short[], int, int, int)\n   */\n  public void copyFromArray(short[] src, int srcOffset, int destOffset, int length) {\n    copyFromJavaArray(src, srcOffset, casImpl.getShortHeap().heap, destOffset, length);\n  }\n\n  /**\n   * @see org.apache.uima.cas.ShortArrayFS#copyToArray(int, short[], int, int)\n   */\n  public void copyToArray(int srcOffset, short[] dest, int destOffset, int length) {\n    copyToJavaArray(this.casImpl.getShortHeap().heap, srcOffset, dest, destOffset, length);\n  }\n\n  /**\n   * @see org.apache.uima.cas.ShortArrayFS#toArray()\n   */\n  public short[] toArray() {\n    return (short[]) toArray(this.casImpl.getShortHeap().heap);\n  }\n\n  /**\n   * @see org.apache.uima.cas.ShortArrayFS#copyToArray(int, String[], int, int)\n   */\n  public void copyToArray(int srcOffset, String[] dest, int destOffset, int length) {\n    casImpl.checkArrayBounds(addr, srcOffset, length);\n    srcOffset += casImpl.getHeap().heap[casImpl.getArrayStartAddress(addr)];\n    final short[] heap = this.casImpl.getShortHeap().heap;\n    for (int i = 0; i < length; i++) {\n      dest[i + destOffset] = Short.toString(heap[i + srcOffset]);\n    }\n  }\n\n  /**\n   * @see org.apache.uima.cas.ShortArrayFS#copyFromArray(String[], int, int, int)\n   */\n  public void copyFromArray(String[] src, int srcOffset, int destOffset, int length)\n          throws ArrayIndexOutOfBoundsException {\n    short[] bArray = new short[length];\n    for (int i = 0; i < length; i++) {\n      bArray[i] = Short.parseShort(src[i]);\n    }\n    copyFromArray(bArray, srcOffset, destOffset, length);\n  }\n}<fim_middle>// class below has no smell\n"}