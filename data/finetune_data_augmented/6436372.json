{"text": "<fim_prefix>/*\n * Copyright (c) 2019 the Eclipse Milo Authors\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\npackage org.eclipse.milo.opcua.sdk.server.events.conversions;\n\nimport javax.annotation.Nonnull;\nimport javax.annotation.Nullable;\n\nimport org.eclipse.milo.opcua.stack.core.BuiltinDataType;\nimport org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.UByte;\nimport org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.UInteger;\nimport org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.ULong;\nimport org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.UShort;\n\nimport static org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.Unsigned.ubyte;\nimport static org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.Unsigned.uint;\nimport static org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.Unsigned.ulong;\nimport static org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.Unsigned.ushort;\n\nfinal class DoubleConversions {\n\n    private DoubleConversions() {}\n\n    @Nonnull\n    static Boolean doubleToBoolean(@Nonnull Double d) {\n        return d != 0.0d;\n    }\n\n    @Nullable\n    static UByte doubleToByte(@Nonnull Double d) {\n        long rounded = Math.round(d);\n\n        if (rounded >= 0 && rounded <= UByte.MAX_VALUE) {\n            return ubyte(rounded);\n        } else {\n            return null;\n        }\n    }\n\n    @Nullable\n    static Float doubleToFloat(@Nonnull Double d) {\n        if (d >= -Float.MAX_VALUE && d <= Float.MAX_VALUE) {\n            return d.floatValue();\n        } else {\n            return null;\n        }\n    }\n\n    @Nullable\n    static Short doubleToInt16(@Nonnull Double d) {\n        long rounded = Math.round(d);\n\n        if (rounded >= Short.MIN_VALUE && rounded <= Short.MAX_VALUE) {\n            return (short) rounded;\n        } else {\n            return null;\n        }\n    }\n\n<fim_suffix>    @Nullable\n    static Integer doubleToInt32(@Nonnull Double d) {\n        long rounded = Math.round(d);\n\n        if (rounded >= Integer.MIN_VALUE && rounded <= Integer.MAX_VALUE) {\n            return (int) rounded;\n        } else {\n            return null;\n        }\n    }\n\n    @Nullable\n    static Long doubleToInt64(@Nonnull Double d) {\n        if (d >= Long.MIN_VALUE && d <= Long.MAX_VALUE) {\n            return Math.round(d);\n        } else {\n            return null;\n        }\n    }\n\n    @Nullable\n    static Byte doubleToSByte(@Nonnull Double d) {\n        long rounded = Math.round(d);\n\n        if (rounded >= Byte.MIN_VALUE && rounded <= Byte.MAX_VALUE) {\n            return (byte) rounded;\n        } else {\n            return null;\n        }\n    }\n\n    @Nonnull\n    static String doubleToString(@Nonnull Double d) {\n        return d.toString();\n    }\n\n    @Nullable\n    static UShort doubleToUInt16(@Nonnull Double d) {\n        long rounded = Math.round(d);\n\n        if (rounded >= UShort.MIN_VALUE && rounded <= UShort.MAX_VALUE) {\n            return ushort((int) rounded);\n        } else {\n            return null;\n        }\n    }\n\n    @Nullable\n    static UInteger doubleToUInt32(@Nonnull Double d) {\n        long rounded = Math.round(d);\n\n        if (rounded >= UInteger.MIN_VALUE && rounded <= UInteger.MAX_VALUE) {\n            return uint(rounded);\n        } else {\n            return null;\n        }\n    }\n\n    @Nullable\n    static ULong doubleToUInt64(@Nonnull Double d) {\n        long rounded = Math.round(d);\n\n        if (rounded >= 0) {\n            return ulong(rounded);\n        } else {\n            return null;\n        }\n    }\n\n    @Nullable\n    static Object convert(@Nullable Object o, BuiltinDataType targetType, boolean implicit) {\n        if (o instanceof Double) {\n            Double d = (Double) o;\n\n            return implicit ?\n                implicitConversion(d, targetType) :\n                explicitConversion(d, targetType);\n        } else {\n            return null;\n        }\n    }\n\n    @Nullable\n    static Object explicitConversion(@Nonnull Double d, BuiltinDataType targetType) {\n        //@formatter:off\n        switch (targetType) {\n            case Boolean:   return doubleToBoolean(d);\n            case Byte:      return doubleToByte(d);\n            case Float:     return doubleToFloat(d);\n            case Int16:     return doubleToInt16(d);\n            case Int32:     return doubleToInt32(d);\n            case Int64:     return doubleToInt64(d);\n            case SByte:     return doubleToSByte(d);\n            case String:    return doubleToString(d);\n            case UInt16:    return doubleToUInt16(d);\n            case UInt32:    return doubleToUInt32(d);\n            case UInt64:    return doubleToUInt64(d);\n            default:        return implicitConversion(d, targetType);\n        }\n        //@formatter:on\n    }\n\n    @Nullable\n    static Object implicitConversion(@Nonnull Double d, BuiltinDataType targetType) {\n        // no implicit conversions exist\n        return null;\n    }\n\n}<fim_middle>// function below has no smell\n"}