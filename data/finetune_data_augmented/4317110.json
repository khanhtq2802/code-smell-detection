{"text": "<fim_prefix>/*\n\n   Derby - Class org.apache.derbyTesting.functionTests.tests.compatibility.helpers.DummyClob\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to you under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\npackage org.apache.derbyTesting.functionTests.tests.compatibility.helpers;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.Writer;\nimport java.sql.Clob;\nimport java.sql.SQLException;\n\n/**\n * A crude Clob implementation for datatype testing.\n */\n<fim_suffix>public class DummyClob\n        implements Clob {\n    private\tString\t_contents;\n\n    public\tDummyClob(String contents)\n    {\n        _contents = contents;\n    }\n\n    public\tInputStream\tgetAsciiStream()\n    {\n        try {\n            return new ByteArrayInputStream( _contents.getBytes( \"UTF-8\" ) );\n        }\n        catch (Exception e) { return null; }\n    }\n\n    public\tReader\tgetCharacterStream()\n    {\n        return new StringReader(_contents);\n    }\n\n    public\tString\tgetSubString( long position, int length )\n    {\n        return _contents.substring( (int) position -1, length );\n    }\n\n    public\tlong\tlength() { return (long) _contents.length(); }\n\n    public\tlong\tposition( Clob searchstr, long start ) { return 0L; }\n    public\tlong\tposition( String searchstr, long start ) { return 0L; }\n\n    public\tboolean\tequals( Object other )\n    {\n        if ( other == null ) { return false; }\n        if ( !( other instanceof Clob ) ) { return false; }\n\n        Clob\tthat = (Clob) other;\n\n        try {\n            if ( this.length() != that.length() ) { return false; }\n\n            InputStream\tthisStream = this.getAsciiStream();\n            InputStream\tthatStream = that.getAsciiStream();\n\n            while( true )\n            {\n                int\t\tnextByte = thisStream.read();\n\n                if ( nextByte < 0 ) { break; }\n                if ( nextByte != thatStream.read() ) { return false; }\n            }\n        }\n        catch (Exception e)\n        {\n            System.err.println( e.getMessage() );\n            e.printStackTrace(System.err);\n            return false;\n        }\n\n        return true;\n    }\n\n    public int setString(long arg0, String arg1) throws SQLException {\n        throw new SQLException(\"not implemented for this test\");\n    }\n\n    public int setString(long arg0, String arg1, int arg2, int arg3) throws SQLException {\n        throw new SQLException(\"not implemented for this test\");\n    }\n\n    public OutputStream setAsciiStream(long arg0) throws SQLException {\n        throw new SQLException(\"not implemented for this test\");\n    }\n\n    public Writer setCharacterStream(long arg0) throws SQLException {\n        throw new SQLException(\"not implemented for this test\");\n    }\n\n    public void truncate(long arg0) throws SQLException {\n        throw new SQLException(\"not implemented for this test\");\n    }\n\n    public void free() throws SQLException {\n        _contents = null;\n    }\n\n    public Reader getCharacterStream(long pos, long length) throws SQLException {\n        return new StringReader(\n                _contents.substring((int)pos -1, (int)(pos + length)));\n    }\n}<fim_middle>// class below has no smell\n"}