{"text": "<fim_prefix>/*\n * Copyright (c) 2018, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.svm.core.graal.nodes;\n\nimport static org.graalvm.compiler.nodeinfo.NodeCycles.CYCLES_2;\nimport static org.graalvm.compiler.nodeinfo.NodeSize.SIZE_2;\n\nimport org.graalvm.compiler.core.common.type.StampFactory;\nimport org.graalvm.compiler.graph.NodeClass;\nimport org.graalvm.compiler.nodeinfo.NodeInfo;\nimport org.graalvm.compiler.nodes.FixedWithNextNode;\nimport org.graalvm.compiler.nodes.ValueNode;\nimport org.graalvm.compiler.nodes.spi.Lowerable;\nimport org.graalvm.compiler.nodes.spi.LoweringTool;\nimport org.graalvm.nativeimage.CurrentIsolate;\n\nimport com.oracle.svm.core.c.function.CEntryPointActions;\n\nimport jdk.vm.ci.meta.JavaKind;\n\n<fim_suffix>@NodeInfo(cycles = CYCLES_2, size = SIZE_2)\npublic final class CEntryPointUtilityNode extends FixedWithNextNode implements Lowerable {\n\n    public static final NodeClass<CEntryPointUtilityNode> TYPE = NodeClass.create(CEntryPointUtilityNode.class);\n\n    /**\n     * @see CurrentIsolate\n     * @see CEntryPointActions\n     */\n    public enum UtilityAction {\n        IsAttached(JavaKind.Boolean),\n        FailFatally(JavaKind.Void);\n\n        final JavaKind resultKind;\n\n        UtilityAction(JavaKind resultKind) {\n            this.resultKind = resultKind;\n        }\n    }\n\n    protected final UtilityAction utilityAction;\n\n    @OptionalInput protected ValueNode parameter0;\n    @OptionalInput protected ValueNode parameter1;\n\n    public CEntryPointUtilityNode(UtilityAction utilityAction, ValueNode parameter) {\n        this(utilityAction, parameter, null);\n    }\n\n    public CEntryPointUtilityNode(UtilityAction utilityAction, ValueNode parameter0, ValueNode parameter1) {\n        super(TYPE, StampFactory.forKind(utilityAction.resultKind));\n        this.utilityAction = utilityAction;\n        this.parameter0 = parameter0;\n        this.parameter1 = parameter1;\n    }\n\n    public UtilityAction getUtilityAction() {\n        return utilityAction;\n    }\n\n    public ValueNode getParameter0() {\n        return parameter0;\n    }\n\n    public ValueNode getParameter1() {\n        return parameter1;\n    }\n\n    @Override\n    public void lower(LoweringTool tool) {\n        tool.getLowerer().lower(this, tool);\n    }\n}<fim_middle>// class below has no smell\n"}