{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.aries.jndi.url;\n\nimport javax.naming.CompositeName;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Enumeration;\nimport java.util.List;\n\n<fim_suffix>@SuppressWarnings(\"serial\")\npublic abstract class AbstractName extends CompositeName {\n    public AbstractName(String name) {\n        super(split(name));\n    }\n\n    protected static Enumeration<String> split(String name) {\n        List<String> elements = new ArrayList<>();\n\n        StringBuilder builder = new StringBuilder();\n\n        int len = name.length();\n        int count = 0;\n\n        for (int i = 0; i < len; i++) {\n            char c = name.charAt(i);\n\n            if (c == '/' && count == 0) {\n                elements.add(builder.toString());\n                builder = new StringBuilder();\n                continue;\n            } else if (c == '(') count++;\n            else if (c == ')') count++;\n\n            builder.append(c);\n        }\n\n        elements.add(builder.toString());\n\n        return Collections.enumeration(elements);\n    }\n\n    public String getScheme() {\n        String part0 = get(0);\n        int index = part0.indexOf(':');\n        if (index > 0) {\n            return part0.substring(0, index);\n        } else {\n            return null;\n        }\n    }\n\n    public String getSchemePath() {\n        String part0 = get(0);\n        int index = part0.indexOf(':');\n\n        String result;\n\n        if (index > 0) {\n            result = part0.substring(index + 1);\n        } else {\n            result = null;\n        }\n\n        return result;\n    }\n}<fim_middle>// class below has no smell\n"}