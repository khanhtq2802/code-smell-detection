{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.core.security.authorization;\n\nimport javax.jcr.security.AccessControlEntry;\nimport javax.jcr.security.AccessControlException;\nimport javax.jcr.security.AccessControlList;\nimport javax.jcr.security.Privilege;\n\nimport javax.jcr.RepositoryException;\nimport javax.jcr.Value;\nimport javax.jcr.PropertyType;\n\nimport java.security.Principal;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collections;\nimport java.util.HashMap;\n\nimport org.apache.jackrabbit.api.security.JackrabbitAccessControlList;\n\n/**\n * An implementation of the <code>AccessControlList</code> interface that only\n * allows for reading. The write methods\n * ({@link #addAccessControlEntry(Principal principal, Privilege[] privileges) addAccessControlEntry}\n * and {@link #removeAccessControlEntry(AccessControlEntry) removeAccessControlEntry})\n * throw an <code>AccessControlException</code>.\n */\npublic class UnmodifiableAccessControlList implements JackrabbitAccessControlList {\n\n    private final AccessControlEntry[] accessControlEntries;\n\n    private final Map<String, Integer> restrictions;\n\n    private final String path;\n\n    private int hashCode = 0;\n\n    /**\n     * Construct a new <code>UnmodifiableAccessControlList</code>\n     *\n     * @param acl The AccessControlList to be wrapped in order to prevent\n     * it's modification.\n     * @throws RepositoryException The the entries cannot be retrieved from the\n     * specified <code>AccessControlList</code>.\n     */\n    public UnmodifiableAccessControlList(AccessControlList acl) throws RepositoryException {\n        if (acl instanceof JackrabbitAccessControlList) {\n            JackrabbitAccessControlList jAcl = (JackrabbitAccessControlList) acl;\n            accessControlEntries = acl.getAccessControlEntries();\n            path = jAcl.getPath();\n            Map<String, Integer> r = new HashMap<String, Integer>();\n            for (String name: jAcl.getRestrictionNames()) {\n                r.put(name, jAcl.getRestrictionType(name));\n            }\n            restrictions = Collections.unmodifiableMap(r);\n        } else {\n            accessControlEntries = acl.getAccessControlEntries();\n            path = null;\n            restrictions = Collections.emptyMap();\n        }\n    }\n\n    /**\n     * Construct a new <code>UnmodifiableAccessControlList</code>\n     *\n     * @param accessControlEntries A list of {@link AccessControlEntry access control entries}.\n     */\n    public UnmodifiableAccessControlList(List<? extends AccessControlEntry> accessControlEntries) {\n        this(accessControlEntries, null, Collections.<String, Integer>emptyMap());\n    }\n\n    /**\n     * Construct a new <code>UnmodifiableAccessControlList</code>\n     *\n     * @param accessControlEntries\n     * @param path\n     * @param restrictions\n     */\n    public UnmodifiableAccessControlList(List<? extends AccessControlEntry> accessControlEntries, String path, Map<String, Integer>restrictions) {\n        this.accessControlEntries = accessControlEntries.toArray(new AccessControlEntry[accessControlEntries.size()]);\n        this.path = path;\n        this.restrictions = restrictions;\n    }\n\n    //--------------------------------------------------< AccessControlList >---\n    /**\n     * @see AccessControlList#getAccessControlEntries()\n     */\n    public AccessControlEntry[] getAccessControlEntries()\n            throws RepositoryException {\n        return accessControlEntries;\n    }\n\n    /**\n     * @see AccessControlList#addAccessControlEntry(Principal, Privilege[])\n     */\n    public boolean addAccessControlEntry(Principal principal,\n                                         Privilege[] privileges)\n            throws AccessControlException, RepositoryException {\n        throw new AccessControlException(\"Unmodifiable ACL. Use AccessControlManager#getApplicablePolicies in order to obtain an modifiable ACL.\");\n    }\n\n    /**\n     * @see AccessControlList#removeAccessControlEntry(AccessControlEntry)\n     */\n    public void removeAccessControlEntry(AccessControlEntry ace)\n            throws AccessControlException, RepositoryException {\n        throw new AccessControlException(\"Unmodifiable ACL. Use AccessControlManager#getApplicablePolicies in order to obtain an modifiable ACL.\");\n    }\n\n    //----------------------------------------< JackrabbitAccessControlList >---\n    /**\n     * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlList#getRestrictionNames()\n     */\n    public String[] getRestrictionNames() {\n        return restrictions.keySet().toArray(new String[restrictions.size()]);\n    }\n\n    /**\n     * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlList#getRestrictionType(String)\n     */\n<fim_suffix>    public int getRestrictionType(String restrictionName) {\n        if (restrictions.containsKey(restrictionName)) {\n            return restrictions.get(restrictionName);\n        } else {\n            return PropertyType.UNDEFINED;\n        }\n    }\n\n    @Override\n    public boolean isMultiValueRestriction(String restrictionName) throws RepositoryException {\n        return false;\n    }\n\n    /**\n     * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlList#isEmpty()\n     */\n    public boolean isEmpty() {\n        return accessControlEntries.length == 0;\n    }\n\n    /**\n     * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlList#size()\n     */\n    public int size() {\n        return accessControlEntries.length;\n    }\n\n    /**\n     * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlList#addEntry(Principal, Privilege[], boolean)\n     */\n    public boolean addEntry(Principal principal, Privilege[] privileges, boolean isAllow) throws AccessControlException {\n        throw new AccessControlException(\"Unmodifiable ACL. Use AccessControlManager#getPolicy or #getApplicablePolicies in order to obtain an modifiable ACL.\");\n    }\n\n    /**\n     * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlList#addEntry(Principal, Privilege[], boolean, Map)\n     */\n    public boolean addEntry(Principal principal, Privilege[] privileges, boolean isAllow, Map<String, Value> restrictions) throws AccessControlException {\n        throw new AccessControlException(\"Unmodifiable ACL. Use AccessControlManager#getPolicy or #getApplicablePolicies in order to obtain an modifiable ACL.\");\n    }\n\n    public boolean addEntry(Principal principal, Privilege[] privileges, boolean isAllow, Map<String, Value> restrictions, Map<String, Value[]> mvRestrictions) throws AccessControlException, RepositoryException {\n        throw new AccessControlException(\"Unmodifiable ACL. Use AccessControlManager#getPolicy or #getApplicablePolicies in order to obtain an modifiable ACL.\");\n    }\n\n    /**\n     * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlList#orderBefore(AccessControlEntry, AccessControlEntry)\n     */\n    public void orderBefore(AccessControlEntry srcEntry, AccessControlEntry destEntry) throws AccessControlException {\n        throw new AccessControlException(\"Unmodifiable ACL. Use AccessControlManager#getPolicy or #getApplicablePolicy in order to obtain a modifiable ACL.\");\n    }\n\n    /**\n     * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlList#getPath()\n     */\n    public String getPath() {\n        return path;\n    }\n\n    //-------------------------------------------------------------< Object >---\n    /**\n     * @see Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        if (hashCode == 0) {\n            int result = 17;\n            result = 37 * result + (path != null ? path.hashCode() : 0);\n            for (AccessControlEntry entry : accessControlEntries) {\n                result = 37 * result + entry.hashCode();\n            }\n            for (String restrictionName : restrictions.keySet()) {\n                result = 37 * (restrictionName + \".\" + restrictions.get(restrictionName)).hashCode();\n            }\n            hashCode = result;\n        }\n        return hashCode;\n    }\n\n    /**\n     * @see Object#equals(Object)\n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n\n        if (obj instanceof UnmodifiableAccessControlList) {\n            UnmodifiableAccessControlList acl = (UnmodifiableAccessControlList) obj;\n            return ((path == null) ? acl.path == null : path.equals(acl.path)) &&\n                    Arrays.equals(accessControlEntries, acl.accessControlEntries) &&\n                    restrictions.equals(acl.restrictions);\n        }\n        return false;\n    }\n}<fim_middle>// function below has no smell\n"}