{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dubbo.remoting.transport;\n\nimport org.apache.dubbo.common.URL;\nimport org.apache.dubbo.remoting.Channel;\nimport org.apache.dubbo.remoting.ChannelHandler;\nimport org.apache.dubbo.remoting.RemotingException;\nimport org.apache.dubbo.remoting.Server;\n\nimport java.net.InetSocketAddress;\nimport java.util.Collection;\n\n/**\n * ServerDelegate\n *\n *\n */\npublic class ServerDelegate implements Server {\n\n    private transient Server server;\n\n    public ServerDelegate() {\n    }\n\n    public ServerDelegate(Server server) {\n        setServer(server);\n    }\n\n    public Server getServer() {\n        return server;\n    }\n\n    public void setServer(Server server) {\n        this.server = server;\n    }\n\n    @Override\n    public boolean isBound() {\n        return server.isBound();\n    }\n\n    @Override\n    public void reset(URL url) {\n        server.reset(url);\n    }\n\n<fim_suffix>    @Override\n    @Deprecated\n    public void reset(org.apache.dubbo.common.Parameters parameters) {\n        reset(getUrl().addParameters(parameters.getParameters()));\n    }\n\n    @Override\n    public Collection<Channel> getChannels() {\n        return server.getChannels();\n    }\n\n    @Override\n    public Channel getChannel(InetSocketAddress remoteAddress) {\n        return server.getChannel(remoteAddress);\n    }\n\n    @Override\n    public URL getUrl() {\n        return server.getUrl();\n    }\n\n    @Override\n    public ChannelHandler getChannelHandler() {\n        return server.getChannelHandler();\n    }\n\n    @Override\n    public InetSocketAddress getLocalAddress() {\n        return server.getLocalAddress();\n    }\n\n    @Override\n    public void send(Object message) throws RemotingException {\n        server.send(message);\n    }\n\n    @Override\n    public void send(Object message, boolean sent) throws RemotingException {\n        server.send(message, sent);\n    }\n\n    @Override\n    public void close() {\n        server.close();\n    }\n\n    @Override\n    public void close(int timeout) {\n        server.close(timeout);\n    }\n\n    @Override\n    public void startClose() {\n        server.startClose();\n    }\n\n    @Override\n    public boolean isClosed() {\n        return server.isClosed();\n    }\n}<fim_middle>// function below has no smell\n"}