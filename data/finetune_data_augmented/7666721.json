{"text": "<fim_prefix>/*\n * Copyright 2005-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.ws.soap.server.endpoint.interceptor;\n\nimport javax.xml.transform.Source;\n\nimport org.springframework.ws.WebServiceMessage;\nimport org.springframework.ws.context.MessageContext;\nimport org.springframework.ws.server.endpoint.AbstractLoggingInterceptor;\nimport org.springframework.ws.soap.SoapHeaderElement;\nimport org.springframework.ws.soap.SoapMessage;\nimport org.springframework.ws.soap.server.SoapEndpointInterceptor;\n\n/**\n * SOAP-specific {@code EndpointInterceptor} that logs the complete request and response envelope of\n * {@code SoapMessage} messages. By default, request, response and fault messages are logged, but this behaviour\n * can be changed using the {@code logRequest}, {@code logResponse}, {@code logFault} properties.\n *\n * @author Arjen Poutsma\n * @see #setLogRequest(boolean)\n * @see #setLogResponse(boolean)\n * @see #setLogFault(boolean)\n * @since 1.0.0\n */\n<fim_suffix>public class SoapEnvelopeLoggingInterceptor extends AbstractLoggingInterceptor implements SoapEndpointInterceptor {\n\n\tprivate boolean logFault = true;\n\n\t/** Indicates whether a SOAP Fault should be logged. Default is {@code true}. */\n\tpublic void setLogFault(boolean logFault) {\n\t\tthis.logFault = logFault;\n\t}\n\n\t@Override\n\tpublic boolean handleFault(MessageContext messageContext, Object endpoint) throws Exception {\n\t\tif (logFault && isLogEnabled()) {\n\t\t\tlogMessageSource(\"Fault: \", getSource(messageContext.getResponse()));\n\t\t}\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic boolean understands(SoapHeaderElement header) {\n\t\treturn false;\n\t}\n\n\t@Override\n\tprotected Source getSource(WebServiceMessage message) {\n\t\tif (message instanceof SoapMessage) {\n\t\t\tSoapMessage soapMessage = (SoapMessage) message;\n\t\t\treturn soapMessage.getEnvelope().getSource();\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n}<fim_middle>// class below has no smell\n"}