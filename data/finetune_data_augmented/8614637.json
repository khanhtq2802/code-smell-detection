{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.visor.query;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.UUID;\nimport org.apache.ignite.cache.query.QueryCursor;\nimport org.apache.ignite.internal.processors.query.GridQueryCancel;\n\n/**\n * Holds identify information of executing query and its result.\n */\npublic class VisorQueryHolder implements AutoCloseable {\n    /** Prefix for node local key for SQL queries. */\n    private static final String SQL_QRY_PREFIX = \"VISOR_SQL_QUERY\";\n\n    /** Prefix for node local key for SCAN queries. */\n    private static final String SCAN_QRY_PREFIX = \"VISOR_SCAN_QUERY\";\n\n    /** Query ID for extraction query data result. */\n    private final String qryId;\n\n    /** Cancel query object. */\n    private final GridQueryCancel cancel;\n\n    /** Query column descriptors. */\n    private volatile List<VisorQueryField> cols;\n\n    /** Error in process of query result receiving. */\n    private volatile Throwable err;\n\n    /** Query duration in ms. */\n    private volatile long duration;\n\n    /** Flag indicating that this cursor was read from last check. */\n    private volatile boolean accessed;\n\n    /** Query cursor. */\n    private volatile QueryCursor cur;\n\n    /** Result set iterator. */\n    private volatile Iterator itr;\n\n    /**\n     * @param qryId Query ID.\n     * @return {@code true} if holder contains SQL query.\n     */\n    public static boolean isSqlQuery(String qryId) {\n        return qryId.startsWith(SQL_QRY_PREFIX);\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param sqlQry Flag indicating that holder contains SQL or SCAN query.\n     * @param cur Query cursor.\n     * @param cancel Cancel object.\n     */\n    VisorQueryHolder(boolean sqlQry, QueryCursor cur, GridQueryCancel cancel) {\n        this.cur = cur;\n        this.cancel = cancel;\n\n        // Generate query ID to store query cursor in node local storage.\n        qryId = (sqlQry ? SQL_QRY_PREFIX : SCAN_QRY_PREFIX) + \"-\" + UUID.randomUUID();\n    }\n\n    /**\n     * @return Query ID for extraction query data result.\n     */\n    public String getQueryID() {\n        return qryId;\n    }\n\n    /**\n     * @return Result set iterator.\n     */\n    public synchronized Iterator getIterator() {\n        assert cur != null;\n\n        if (itr == null)\n            itr = cur.iterator();\n\n        return itr;\n    }\n\n    /**\n     * @return Query column descriptors.\n     */\n    public List<VisorQueryField> getColumns() {\n        return cols;\n    }\n\n    /**\n     * Complete query execution.\n     *\n     * @param cur Query cursor.\n     * @param duration Duration of query execution.\n     * @param cols Query column descriptors.\n     */\n    public void complete(QueryCursor cur, long duration, List<VisorQueryField> cols) {\n        this.cur = cur;\n        this.duration = duration;\n        this.cols = cols;\n        this.accessed = false;\n    }\n\n    /** {@inheritDoc} */\n    @Override public void close() {\n        if (cur != null)\n            cur.close();\n\n        if (cancel != null)\n            cancel.cancel();\n    }\n\n    /**\n     * @return Error in process of query result receiving.\n     */\n    public Throwable getErr() {\n        return err;\n    }\n\n    /**\n     * Set error caught during query execution.\n     *\n     * @param err Error caught during query execution.\n     */\n    public void setError(Throwable err) {\n        this.err = err;\n\n        if (cur != null)\n            cur.close();\n    }\n\n    /**\n     * @return Flag indicating that this future was read from last check..\n     */\n<fim_suffix>    public boolean isAccessed() {\n        return accessed;\n    }\n\n    /**\n     * @param accessed New accessed.\n     */\n    public void setAccessed(boolean accessed) {\n        this.accessed = accessed;\n    }\n\n    /**\n     * @return Duration of query execution.\n     */\n    public long duration() {\n        return duration;\n    }\n}<fim_middle>// function below has no smell\n"}