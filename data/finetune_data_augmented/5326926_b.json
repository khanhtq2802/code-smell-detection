{"text": "<fim_prefix>     *\n     * @param edge edge\n     * @return dto\n     */\n    public ProvenanceLinkDTO createProvenanceLinkDTO(final LineageEdge edge) {\n        final LineageNode source = edge.getSource();\n        final LineageNode target = edge.getDestination();\n        final ProvenanceLinkDTO dto = new ProvenanceLinkDTO();\n        dto.setTimestamp(new Date(target.getTimestamp()));\n        dto.setMillis(target.getTimestamp());\n        dto.setFlowFileUuid(edge.getUuid());\n        dto.setSourceId(source.getIdentifier());\n        dto.setTargetId(target.getIdentifier());\n        return dto;\n    }\n    /**\n     * Creates a LineageDTO for the specified Lineage.\n     *\n     * @param computeLineageSubmission submission\n     * @return dto\n     */\n    public LineageDTO createLineageDto(final ComputeLineageSubmission computeLineageSubmission) {\n        // build the lineage dto\n        final LineageDTO dto = new LineageDTO();\n        final LineageRequestDTO requestDto = new LineageRequestDTO();\n        final LineageResultsDTO resultsDto = new LineageResultsDTO();\n        // include the original request and results\n        dto.setRequest(requestDto);\n        dto.setResults(resultsDto);\n        // rebuild the request from the submission object\n        switch (computeLineageSubmission.getLineageComputationType()) {\n            case EXPAND_CHILDREN:\n                requestDto.setEventId(computeLineageSubmission.getExpandedEventId());\n                requestDto.setLineageRequestType(LineageRequestType.CHILDREN);\n                break;\n            case EXPAND_PARENTS:\n                requestDto.setEventId(computeLineageSubmission.getExpandedEventId());\n                requestDto.setLineageRequestType(LineageRequestType.PARENTS);\n                break;\n            case FLOWFILE_LINEAGE:\n                final Collection<String> uuids = computeLineageSubmission.getLineageFlowFileUuids();\n                if (uuids.size() == 1) {\n                    requestDto.setUuid(uuids.iterator().next());\n                }\n                requestDto.setEventId(computeLineageSubmission.getExpandedEventId());\n                requestDto.setLineageRequestType(LineageRequestType.FLOWFILE);\n                break;\n        }\n        // include lineage details\n        dto.setId(computeLineageSubmission.getLineageIdentifier());\n        dto.setSubmissionTime(computeLineageSubmission.getSubmissionTime());\n        // create the results dto\n        final ComputeLineageResult results = computeLineageSubmission.getResult();\n        dto.setFinished(results.isFinished());\n        dto.setPercentCompleted(results.getPercentComplete());\n        dto.setExpiration(results.getExpiration());\n        final List<LineageNode> nodes = results.getNodes();\n        final List<LineageEdge> edges = results.getEdges();\n        final List<ProvenanceNodeDTO> nodeDtos = new ArrayList<>();\n        if (results.isFinished()) {\n            // create the node dto's\n            for (final LineageNode node : nodes) {\n                switch (node.getNodeType()) {\n                    case FLOWFILE_NODE:\n                        nodeDtos.add(createFlowFileNodeDTO(node));\n                        break;\n                    case PROVENANCE_EVENT_NODE:\n                        nodeDtos.add(createProvenanceEventNodeDTO((ProvenanceEventLineageNode) node));\n                        break;\n                }\n            }\n        }\n        resultsDto.setNodes(nodeDtos);\n        // include any errors\n        if (results.getError() != null) {\n            final Set<String> errors = new HashSet<>();\n            errors.add(results.getError());\n            resultsDto.setErrors(errors);\n        }\n        // create the link dto's\n        final List<ProvenanceLinkDTO> linkDtos = new ArrayList<>();\n        for (final LineageEdge edge : edges) {\n            linkDtos.add(createProvenanceLinkDTO(edge));\n        }\n        resultsDto.setLinks(linkDtos);\n        return dto;\n    }\n    /**\n     * Creates a SystemDiagnosticsDTO for the specified SystemDiagnostics.\n     *\n     * @param sysDiagnostics diags\n     * @return dto\n     */\n<fim_suffix>    public SystemDiagnosticsDTO createSystemDiagnosticsDto(final SystemDiagnostics sysDiagnostics) {\n        final SystemDiagnosticsDTO dto = new SystemDiagnosticsDTO();\n        final SystemDiagnosticsSnapshotDTO snapshot = new SystemDiagnosticsSnapshotDTO();\n        dto.setAggregateSnapshot(snapshot);\n        snapshot.setStatsLastRefreshed(new Date(sysDiagnostics.getCreationTimestamp()));\n        // processors\n        snapshot.setAvailableProcessors(sysDiagnostics.getAvailableProcessors());\n        snapshot.setProcessorLoadAverage(sysDiagnostics.getProcessorLoadAverage());\n        // threads\n        snapshot.setDaemonThreads(sysDiagnostics.getDaemonThreads());\n        snapshot.setTotalThreads(sysDiagnostics.getTotalThreads());\n        // heap\n        snapshot.setMaxHeap(FormatUtils.formatDataSize(sysDiagnostics.getMaxHeap()));\n        snapshot.setMaxHeapBytes(sysDiagnostics.getMaxHeap());\n        snapshot.setTotalHeap(FormatUtils.formatDataSize(sysDiagnostics.getTotalHeap()));\n        snapshot.setTotalHeapBytes(sysDiagnostics.getTotalHeap());\n        snapshot.setUsedHeap(FormatUtils.formatDataSize(sysDiagnostics.getUsedHeap()));\n        snapshot.setUsedHeapBytes(sysDiagnostics.getUsedHeap());\n        snapshot.setFreeHeap(FormatUtils.formatDataSize(sysDiagnostics.getFreeHeap()));\n        snapshot.setFreeHeapBytes(sysDiagnostics.getFreeHeap());\n        if (sysDiagnostics.getHeapUtilization() != -1) {\n            snapshot.setHeapUtilization(FormatUtils.formatUtilization(sysDiagnostics.getHeapUtilization()));\n        }\n        // non heap\n        snapshot.setMaxNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getMaxNonHeap()));\n        snapshot.setMaxNonHeapBytes(sysDiagnostics.getMaxNonHeap());\n        snapshot.setTotalNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getTotalNonHeap()));\n        snapshot.setTotalNonHeapBytes(sysDiagnostics.getTotalNonHeap());\n        snapshot.setUsedNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getUsedNonHeap()));\n        snapshot.setUsedNonHeapBytes(sysDiagnostics.getUsedNonHeap());\n        snapshot.setFreeNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getFreeNonHeap()));\n        snapshot.setFreeNonHeapBytes(sysDiagnostics.getFreeNonHeap());\n        if (sysDiagnostics.getNonHeapUtilization() != -1) {\n            snapshot.setNonHeapUtilization(FormatUtils.formatUtilization(sysDiagnostics.getNonHeapUtilization()));\n        }\n        // flow file disk usage\n        final SystemDiagnosticsSnapshotDTO.StorageUsageDTO flowFileRepositoryStorageUsageDto = createStorageUsageDTO(null, sysDiagnostics.getFlowFileRepositoryStorageUsage());\n        snapshot.setFlowFileRepositoryStorageUsage(flowFileRepositoryStorageUsageDto);\n        // content disk usage\n        final Set<SystemDiagnosticsSnapshotDTO.StorageUsageDTO> contentRepositoryStorageUsageDtos = new LinkedHashSet<>();\n        snapshot.setContentRepositoryStorageUsage(contentRepositoryStorageUsageDtos);\n        for (final Map.Entry<String, StorageUsage> entry : sysDiagnostics.getContentRepositoryStorageUsage().entrySet()) {\n            contentRepositoryStorageUsageDtos.add(createStorageUsageDTO(entry.getKey(), entry.getValue()));\n        }\n        // provenance disk usage\n        final Set<SystemDiagnosticsSnapshotDTO.StorageUsageDTO> provenanceRepositoryStorageUsageDtos = new LinkedHashSet<>();\n        snapshot.setProvenanceRepositoryStorageUsage(provenanceRepositoryStorageUsageDtos);\n        for (final Map.Entry<String, StorageUsage> entry : sysDiagnostics.getProvenanceRepositoryStorageUsage().entrySet()) {\n            provenanceRepositoryStorageUsageDtos.add(createStorageUsageDTO(entry.getKey(), entry.getValue()));\n        }\n        // garbage collection\n        final Set<SystemDiagnosticsSnapshotDTO.GarbageCollectionDTO> garbageCollectionDtos = new LinkedHashSet<>();\n        snapshot.setGarbageCollection(garbageCollectionDtos);\n        for (final Map.Entry<String, GarbageCollection> entry : sysDiagnostics.getGarbageCollection().entrySet()) {\n            garbageCollectionDtos.add(createGarbageCollectionDTO(entry.getKey(), entry.getValue()));\n        }\n        // version info\n        final SystemDiagnosticsSnapshotDTO.VersionInfoDTO versionInfoDto = createVersionInfoDTO();\n        snapshot.setVersionInfo(versionInfoDto);\n        // uptime\n        snapshot.setUptime(FormatUtils.formatHoursMinutesSeconds(sysDiagnostics.getUptime(), TimeUnit.MILLISECONDS));\n        return dto;\n    }<fim_middle>// function below is long method and feature envy\n"}