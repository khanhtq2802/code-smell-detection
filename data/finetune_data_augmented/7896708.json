{"text": "<fim_prefix>            case Type.BT_SHORT:   return APUT_SHORT;\n        }\n        return throwBadType(type);\n    }\n    /**\n     * Returns the appropriate {@code new-array} rop for the given\n     * type. The result is a shared instance.\n     *\n     * @param arrayType {@code non-null;} array type of array being created\n     * @return {@code non-null;} an appropriate instance\n     */\n    public static Rop opNewArray(TypeBearer arrayType) {\n        Type type = arrayType.getType();\n        Type elementType = type.getComponentType();\n        switch (elementType.getBasicType()) {\n            case Type.BT_INT:     return NEW_ARRAY_INT;\n            case Type.BT_LONG:    return NEW_ARRAY_LONG;\n            case Type.BT_FLOAT:   return NEW_ARRAY_FLOAT;\n            case Type.BT_DOUBLE:  return NEW_ARRAY_DOUBLE;\n            case Type.BT_BOOLEAN: return NEW_ARRAY_BOOLEAN;\n            case Type.BT_BYTE:    return NEW_ARRAY_BYTE;\n            case Type.BT_CHAR:    return NEW_ARRAY_CHAR;\n            case Type.BT_SHORT:   return NEW_ARRAY_SHORT;\n            case Type.BT_OBJECT: {\n                return new Rop(RegOps.NEW_ARRAY, type, StdTypeList.INT,\n                        Exceptions.LIST_Error_NegativeArraySizeException,\n                        \"new-array-object\");\n            }\n        }\n        return throwBadType(type);\n    }\n    /**\n     * Returns the appropriate {@code filled-new-array} rop for the given\n     * type. The result may be a shared instance.\n     *\n     * @param arrayType {@code non-null;} type of array being created\n     * @param count {@code >= 0;} number of elements that the array should have\n     * @return {@code non-null;} an appropriate instance\n     */\n    public static Rop opFilledNewArray(TypeBearer arrayType, int count) {\n        Type type = arrayType.getType();\n        Type elementType = type.getComponentType();\n        if (elementType.isCategory2()) {\n            return throwBadType(arrayType);\n        }\n        if (count < 0) {\n            throw new IllegalArgumentException(\"count < 0\");\n        }\n        StdTypeList sourceTypes = new StdTypeList(count);\n        for (int i = 0; i < count; i++) {\n            sourceTypes.set(i, elementType);\n        }\n        // Note: The resulting rop is considered call-like.\n        return new Rop(RegOps.FILLED_NEW_ARRAY,\n                       sourceTypes,\n                       Exceptions.LIST_Error);\n    }\n    /**\n     * Returns the appropriate {@code get-field} rop for the given\n     * type. The result is a shared instance.\n     *\n     * @param type {@code non-null;} type of the field in question\n     * @return {@code non-null;} an appropriate instance\n     */\n    public static Rop opGetField(TypeBearer type) {\n        switch (type.getBasicType()) {\n            case Type.BT_INT:     return GET_FIELD_INT;\n            case Type.BT_LONG:    return GET_FIELD_LONG;\n            case Type.BT_FLOAT:   return GET_FIELD_FLOAT;\n            case Type.BT_DOUBLE:  return GET_FIELD_DOUBLE;\n            case Type.BT_OBJECT:  return GET_FIELD_OBJECT;\n            case Type.BT_BOOLEAN: return GET_FIELD_BOOLEAN;\n            case Type.BT_BYTE:    return GET_FIELD_BYTE;\n            case Type.BT_CHAR:    return GET_FIELD_CHAR;\n            case Type.BT_SHORT:   return GET_FIELD_SHORT;\n        }\n        return throwBadType(type);\n    }\n    /**\n     * Returns the appropriate {@code put-field} rop for the given\n     * type. The result is a shared instance.\n     *\n     * @param type {@code non-null;} type of the field in question\n     * @return {@code non-null;} an appropriate instance\n     */\n    public static Rop opPutField(TypeBearer type) {\n        switch (type.getBasicType()) {\n            case Type.BT_INT:     return PUT_FIELD_INT;\n            case Type.BT_LONG:    return PUT_FIELD_LONG;\n            case Type.BT_FLOAT:   return PUT_FIELD_FLOAT;\n            case Type.BT_DOUBLE:  return PUT_FIELD_DOUBLE;\n            case Type.BT_OBJECT:  return PUT_FIELD_OBJECT;\n            case Type.BT_BOOLEAN: return PUT_FIELD_BOOLEAN;\n            case Type.BT_BYTE:    return PUT_FIELD_BYTE;\n            case Type.BT_CHAR:    return PUT_FIELD_CHAR;\n            case Type.BT_SHORT:   return PUT_FIELD_SHORT;\n        }\n        return throwBadType(type);\n    }\n    /**\n     * Returns the appropriate {@code get-static} rop for the given\n     * type. The result is a shared instance.\n     *\n     * @param type {@code non-null;} type of the field in question\n     * @return {@code non-null;} an appropriate instance\n     */\n    public static Rop opGetStatic(TypeBearer type) {\n        switch (type.getBasicType()) {\n            case Type.BT_INT:     return GET_STATIC_INT;\n            case Type.BT_LONG:    return GET_STATIC_LONG;\n            case Type.BT_FLOAT:   return GET_STATIC_FLOAT;\n            case Type.BT_DOUBLE:  return GET_STATIC_DOUBLE;\n            case Type.BT_OBJECT:  return GET_STATIC_OBJECT;\n            case Type.BT_BOOLEAN: return GET_STATIC_BOOLEAN;\n            case Type.BT_BYTE:    return GET_STATIC_BYTE;\n            case Type.BT_CHAR:    return GET_STATIC_CHAR;\n            case Type.BT_SHORT:   return GET_STATIC_SHORT;\n        }\n        return throwBadType(type);\n    }\n    /**\n     * Returns the appropriate {@code put-static} rop for the given\n     * type. The result is a shared instance.\n     *\n     * @param type {@code non-null;} type of the field in question\n     * @return {@code non-null;} an appropriate instance\n     */\n    public static Rop opPutStatic(TypeBearer type) {\n        switch (type.getBasicType()) {\n            case Type.BT_INT:     return PUT_STATIC_INT;\n            case Type.BT_LONG:    return PUT_STATIC_LONG;\n            case Type.BT_FLOAT:   return PUT_STATIC_FLOAT;\n            case Type.BT_DOUBLE:  return PUT_STATIC_DOUBLE;\n            case Type.BT_OBJECT:  return PUT_STATIC_OBJECT;\n            case Type.BT_BOOLEAN: return PUT_STATIC_BOOLEAN;\n            case Type.BT_BYTE:    return PUT_STATIC_BYTE;\n            case Type.BT_CHAR:    return PUT_STATIC_CHAR;\n            case Type.BT_SHORT:   return PUT_STATIC_SHORT;\n        }\n        return throwBadType(type);\n    }\n    /**\n     * Returns the appropriate {@code invoke-static} rop for the\n     * given type. The result is typically a newly-allocated instance.\n     *\n     * @param meth {@code non-null;} descriptor of the method\n     * @return {@code non-null;} an appropriate instance\n     */\n    public static Rop opInvokeStatic(Prototype meth) {\n        return new Rop(RegOps.INVOKE_STATIC,\n                       meth.getParameterFrameTypes(),\n                       StdTypeList.THROWABLE);\n    }\n    /**\n     * Returns the appropriate {@code invoke-virtual} rop for the\n     * given type. The result is typically a newly-allocated instance.\n     *\n     * @param meth {@code non-null;} descriptor of the method, including the\n     * {@code this} parameter\n     * @return {@code non-null;} an appropriate instance\n     */\n    public static Rop opInvokeVirtual(Prototype meth) {\n        return new Rop(RegOps.INVOKE_VIRTUAL,\n                       meth.getParameterFrameTypes(),\n                       StdTypeList.THROWABLE);\n    }\n    /**\n     * Returns the appropriate {@code invoke-super} rop for the\n     * given type. The result is typically a newly-allocated instance.\n     *\n     * @param meth {@code non-null;} descriptor of the method, including the\n     * {@code this} parameter\n     * @return {@code non-null;} an appropriate instance\n     */\n    public static Rop opInvokeSuper(Prototype meth) {\n        return new Rop(RegOps.INVOKE_SUPER,\n                       meth.getParameterFrameTypes(),\n                       StdTypeList.THROWABLE);\n    }\n    /**\n     * Returns the appropriate {@code invoke-direct} rop for the\n     * given type. The result is typically a newly-allocated instance.\n     *\n     * @param meth {@code non-null;} descriptor of the method, including the\n     * {@code this} parameter\n     * @return {@code non-null;} an appropriate instance\n     */\n<fim_suffix>    public static Rop opInvokeDirect(Prototype meth) {\n        return new Rop(RegOps.INVOKE_DIRECT,\n                       meth.getParameterFrameTypes(),\n                       StdTypeList.THROWABLE);\n    }<fim_middle>// function below has no smell\n"}