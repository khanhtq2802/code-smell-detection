{"text": "<fim_prefix>/* *******************************************************************\n * Copyright (c) 1999-2001 Xerox Corporation, \n *               2002 Palo Alto Research Center, Incorporated (PARC).\n *               2018 Contributors\n * All rights reserved. \n * This program and the accompanying materials are made available \n * under the terms of the Eclipse Public License v1.0 \n * which accompanies this distribution and is available at \n * http://www.eclipse.org/legal/epl-v10.html \n *  \n * Contributors: \n *     Xerox/PARC     initial implementation \n * ******************************************************************/\npackage org.aspectj.util;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.InvocationTargetException;\nimport java.security.PrivilegedActionException;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.BitSet;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.StringTokenizer;\n/**\n * \n */\npublic class LangUtil {\n\tpublic static final String EOL;\n\tpublic static final String JRT_FS = \"jrt-fs.jar\";\n\tprivate static double vmVersion;\n\t/**\n\t * @return the vm version (1.1, 1.2, 1.3, 1.4, etc)\n\t */\n\tpublic static String getVmVersionString() {\n\t\treturn Double.toString(vmVersion);\n\t}\n\tpublic static double getVmVersion() {\n\t\treturn vmVersion;\n\t}\n\tstatic {\n\t\tStringWriter buf = new StringWriter();\n\t\tPrintWriter writer = new PrintWriter(buf);\n\t\twriter.println(\"\");\n\t\tString eol = \"\\n\";\n\t\ttry {\n\t\t\tbuf.close();\n\t\t\tStringBuffer sb = buf.getBuffer();\n\t\t\tif (sb != null) {\n\t\t\t\teol = buf.toString();\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t}\n\t\tEOL = eol;\n\t}\n\tstatic {\n\t\t// http://www.oracle.com/technetwork/java/javase/versioning-naming-139433.html\n\t\t// http://openjdk.java.net/jeps/223 \"New Version-String Scheme\"\n\t\ttry {\n\t\t\tString vm = System.getProperty(\"java.version\"); // JLS 20.18.7\n\t\t\tif (vm == null) {\n\t\t\t\tvm = System.getProperty(\"java.runtime.version\");\n\t\t\t}\n\t\t\tif (vm == null) {\n\t\t\t\tvm = System.getProperty(\"java.vm.version\");\n\t\t\t}\n\t\t\tif (vm == null) {\n\t\t\t\tnew RuntimeException(\n\t\t\t\t\t\t\"System properties appear damaged, cannot find: java.version/java.runtime.version/java.vm.version\")\n\t\t\t\t\t\t.printStackTrace(System.err);\n\t\t\t\tvmVersion = 1.5;\n\t\t\t} else {\n\t\t\t\t// Version: [1-9][0-9]*((\\.0)*\\.[1-9][0-9]*)* \n\t\t\t\t// Care about the first set of digits and second set if first digit is 1\n\t\t\t\ttry {\n\t\t\t\t\tList<Integer> numbers = getFirstNumbers(vm);\n\t\t\t\t\tif (numbers.get(0) == 1) {\n\t\t\t\t\t\t// Old school for 1.0 > 1.8\n\t\t\t\t\t\tvmVersion = numbers.get(0)+(numbers.get(1)/10d);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// numbers.get(0) is the major version (9 and above)\n\t\t\t\t\t\t// Note here the number will be 9 (or 10), *not* 1.9 or 1.10\n\t\t\t\t\t\tvmVersion = numbers.get(0);\n\t\t\t\t\t}\n\t\t\t\t} catch (Throwable t) {\n\t\t\t\t\t// Give up\n\t\t\t\t\tvmVersion = 1.5;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\tnew RuntimeException(\n\t\t\t\t\t\"System properties appear damaged, cannot find: java.version/java.runtime.version/java.vm.version\", t)\n\t\t\t\t\t.printStackTrace(System.err);\n\t\t\tvmVersion = 1.5;\n\t\t}\n\t}\n\tprivate static List<Integer> getFirstNumbers(String vm) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tStringTokenizer st = new StringTokenizer(vm,\".-_\");\n\t\ttry {\n\t\t\tresult.add(Integer.parseInt(st.nextToken()));\n\t\t\tresult.add(Integer.parseInt(st.nextToken()));\n\t\t} catch (Exception e) {\n\t\t\t// NoSuchElementException if no more tokens\n\t\t\t// NumberFormatException if not a number\n\t\t}\n\t\treturn result;\n\t}\n\tpublic static boolean is13VMOrGreater() {\n\t\treturn 1.3 <= vmVersion;\n\t}\n<fim_suffix>\tpublic static boolean is14VMOrGreater() {\n\t\treturn 1.4 <= vmVersion;\n\t}\n\tpublic static boolean is15VMOrGreater() {\n\t\treturn 1.5 <= vmVersion;\n\t}\n\tpublic static boolean is16VMOrGreater() {\n\t\treturn 1.6 <= vmVersion;\n\t}\n\tpublic static boolean is17VMOrGreater() {\n\t\treturn 1.7 <= vmVersion;\n\t}\n\tpublic static boolean is18VMOrGreater() {\n\t\treturn 1.8 <= vmVersion;\n\t}\n\tpublic static boolean is19VMOrGreater() {\n\t\treturn 9 <= vmVersion;\n\t}\n\tpublic static boolean is10VMOrGreater() {\n\t\treturn 10 <= vmVersion;\n\t}\n\tpublic static boolean is11VMOrGreater() {\n\t\treturn 11 <= vmVersion;\n\t}\n\t/**\n\t * Shorthand for \"if null, throw IllegalArgumentException\"\n\t * \n\t * @throws IllegalArgumentException \"null {name}\" if o is null\n\t */\n\tpublic static final void throwIaxIfNull(final Object o, final String name) {\n\t\tif (null == o) {\n\t\t\tString message = \"null \" + (null == name ? \"input\" : name);\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}\n\t/**\n\t * Shorthand for \"if not null or not assignable, throw IllegalArgumentException\"\n\t * \n\t * @param c the Class to check - use null to ignore type check\n\t * @throws IllegalArgumentException \"null {name}\" if o is null\n\t */\n\tpublic static final void throwIaxIfNotAssignable(final Object ra[], final Class<?> c, final String name) {\n\t\tthrowIaxIfNull(ra, name);\n\t\tString label = (null == name ? \"input\" : name);\n\t\tfor (int i = 0; i < ra.length; i++) {\n\t\t\tif (null == ra[i]) {\n\t\t\t\tString m = \" null \" + label + \"[\" + i + \"]\";\n\t\t\t\tthrow new IllegalArgumentException(m);<fim_middle>// function below has no smell\n"}