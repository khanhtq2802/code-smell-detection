{"text": "<fim_prefix>\n<fim_suffix>@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\", \"unused\"})\n@javax.annotation.Generated(value = \"Autogenerated by Thrift Compiler (0.11.0)\")\npublic class MultiGetBuildSlaveLogDirResponse implements org.apache.thrift.TBase<MultiGetBuildSlaveLogDirResponse, MultiGetBuildSlaveLogDirResponse._Fields>, java.io.Serializable, Cloneable, Comparable<MultiGetBuildSlaveLogDirResponse> {\n  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"MultiGetBuildSlaveLogDirResponse\");\n  private static final org.apache.thrift.protocol.TField LOG_DIRS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"logDirs\", org.apache.thrift.protocol.TType.LIST, (short)1);\n  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MultiGetBuildSlaveLogDirResponseStandardSchemeFactory();\n  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MultiGetBuildSlaveLogDirResponseTupleSchemeFactory();\n  public java.util.List<LogDir> logDirs; // optional\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n    LOG_DIRS((short)1, \"logDirs\");\n    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n    static {\n      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // LOG_DIRS\n          return LOG_DIRS;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(java.lang.String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final java.lang.String _fieldName;\n    _Fields(short thriftId, java.lang.String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public java.lang.String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  private static final _Fields optionals[] = {_Fields.LOG_DIRS};\n  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.LOG_DIRS, new org.apache.thrift.meta_data.FieldMetaData(\"logDirs\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, \n            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogDir.class))));\n    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MultiGetBuildSlaveLogDirResponse.class, metaDataMap);\n  }\n  public MultiGetBuildSlaveLogDirResponse() {\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public MultiGetBuildSlaveLogDirResponse(MultiGetBuildSlaveLogDirResponse other) {\n    if (other.isSetLogDirs()) {\n      java.util.List<LogDir> __this__logDirs = new java.util.ArrayList<LogDir>(other.logDirs.size());\n      for (LogDir other_element : other.logDirs) {\n        __this__logDirs.add(new LogDir(other_element));\n      }\n      this.logDirs = __this__logDirs;\n    }\n  }\n  public MultiGetBuildSlaveLogDirResponse deepCopy() {\n    return new MultiGetBuildSlaveLogDirResponse(this);\n  }\n  @Override\n  public void clear() {\n    this.logDirs = null;\n  }\n  public int getLogDirsSize() {\n    return (this.logDirs == null) ? 0 : this.logDirs.size();\n  }\n  public java.util.Iterator<LogDir> getLogDirsIterator() {\n    return (this.logDirs == null) ? null : this.logDirs.iterator();\n  }\n  public void addToLogDirs(LogDir elem) {\n    if (this.logDirs == null) {\n      this.logDirs = new java.util.ArrayList<LogDir>();\n    }\n    this.logDirs.add(elem);\n  }\n  public java.util.List<LogDir> getLogDirs() {\n    return this.logDirs;\n  }\n  public MultiGetBuildSlaveLogDirResponse setLogDirs(java.util.List<LogDir> logDirs) {\n    this.logDirs = logDirs;\n    return this;\n  }\n  public void unsetLogDirs() {\n    this.logDirs = null;\n  }\n  /** Returns true if field logDirs is set (has been assigned a value) and false otherwise */\n  public boolean isSetLogDirs() {\n    return this.logDirs != null;\n  }\n  public void setLogDirsIsSet(boolean value) {\n    if (!value) {\n      this.logDirs = null;\n    }\n  }\n  public void setFieldValue(_Fields field, java.lang.Object value) {\n    switch (field) {\n    case LOG_DIRS:\n      if (value == null) {\n        unsetLogDirs();\n      } else {\n        setLogDirs((java.util.List<LogDir>)value);\n      }\n      break;\n    }\n  }\n  public java.lang.Object getFieldValue(_Fields field) {\n    switch (field) {\n    case LOG_DIRS:\n      return getLogDirs();\n    }\n    throw new java.lang.IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new java.lang.IllegalArgumentException();\n    }\n    switch (field) {\n    case LOG_DIRS:\n      return isSetLogDirs();\n    }\n    throw new java.lang.IllegalStateException();\n  }\n  @Override\n  public boolean equals(java.lang.Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof MultiGetBuildSlaveLogDirResponse)\n      return this.equals((MultiGetBuildSlaveLogDirResponse)that);\n    return false;\n  }\n  public boolean equals(MultiGetBuildSlaveLogDirResponse that) {\n    if (that == null)\n      return false;\n    if (this == that)\n      return true;\n    boolean this_present_logDirs = true && this.isSetLogDirs();\n    boolean that_present_logDirs = true && that.isSetLogDirs();\n    if (this_present_logDirs || that_present_logDirs) {\n      if (!(this_present_logDirs && that_present_logDirs))\n        return false;\n      if (!this.logDirs.equals(that.logDirs))\n        return false;\n    }\n    return true;\n  }\n  @Override\n  public int hashCode() {\n    int hashCode = 1;\n    hashCode = hashCode * 8191 + ((isSetLogDirs()) ? 131071 : 524287);\n    if (isSetLogDirs())\n      hashCode = hashCode * 8191 + logDirs.hashCode();\n    return hashCode;\n  }\n  @Override\n  public int compareTo(MultiGetBuildSlaveLogDirResponse other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    lastComparison = java.lang.Boolean.valueOf(isSetLogDirs()).compareTo(other.isSetLogDirs());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetLogDirs()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logDirs, other.logDirs);<fim_middle>// class below has no smell\n"}