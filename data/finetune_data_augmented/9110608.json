{"text": "<fim_prefix>\n/*******************************************************************************\n * Copyright (c) 2004, 2011 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *  Actuate Corporation  - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.birt.data.engine.olap.data.impl.facttable;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.eclipse.birt.data.engine.api.aggregation.Accumulator;\nimport org.eclipse.birt.data.engine.api.aggregation.IAggrFunction;\nimport org.eclipse.birt.data.engine.core.DataException;\n\n\n/**\n * \n */\n\npublic class FTAggregationHelper  \n{\n\tprivate IAggrFunction[] functions;\n\t\n\t/**\n\t * Array to store all calculated aggregate values. aggrValue[i] is a list of\n\t * values calculated for expression #i in the associated aggregate table.\n\t * The aggregate values are stored in each list as the cursor advances for\n\t * the associated ODI result set.\n\t */\n\tprivate Object[] currentRoundAggrValue;\n\n\tprivate List<Accumulator> accumulators;\n\n\tpublic FTAggregationHelper( IAggrFunction[] functions ) throws DataException\n\t{\n\t\tthis.functions = functions;\n\t\tthis.currentRoundAggrValue = new Object[functions.length];\n\t\tthis.accumulators = new ArrayList<Accumulator>();\n\t\t\n\t\tthis.populateAggregations( );\n\t}\n\n\tprivate void populateAggregations( ) throws DataException\n\t{\n\t\tfor ( int i = 0; i < functions.length; i++ )\n\t\t{\n\t\t\tAccumulator acc = functions[i].newAccumulator( );\n\t\t\tacc.start( );\n\t\t\tthis.accumulators.add( acc );\n\t\t\t\n\t\t}\n\t}\n\n\t/* (non-Javadoc)\n\t * @see org.eclipse.birt.data.engine.executor.aggregation.IProgressiveAggregationHelper#onRow(int, int, org.eclipse.birt.data.engine.odi.IResultObject, int)\n\t */\n<fim_suffix>\tpublic void onRow( boolean populateValue, FactTableRow factTableRow )\n\t\t\tthrows DataException\n\t{\n\t\tfor ( int aggrIndex = 0; aggrIndex < this.functions.length; aggrIndex++ )\n\t\t{\n\t\t\tAccumulator acc = this.accumulators.get( aggrIndex );\n\t\t\t\n\t\t\t// Calculate arguments to the aggregate aggregationtion\n\n\t\t\tacc.onRow( new Object[]{factTableRow.getMeasures( )[aggrIndex]} );\n\t\t\t\n\n\t\t\tif ( populateValue )\n\t\t\t{\n\t\t\t\tacc.finish( );\n\t\t\t\tcurrentRoundAggrValue[aggrIndex] = acc.getValue( );\n\t\t\t\tacc.start( );\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic Object[] getCurrentValues( )\n\t{\n\t\tObject[] result = new Object[this.currentRoundAggrValue.length];\n\t\tfor( int i = 0; i < result.length; i++ )\n\t\t\tresult[i] = this.currentRoundAggrValue[i];\n\t\treturn result;\n\t}\n}<fim_middle>// function below has no smell\n"}