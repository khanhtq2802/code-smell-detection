{"text": "<fim_prefix>\t}\n\t/**\n\t * Contexts:\n\t *     AltList1 returns AltList1\n\t *\n\t * Constraint:\n\t *     ((val1=ID val2=ID) | (val1=ID val3=ID) | (val1=ID val4=ID?))\n\t */\n\tprotected void sequence_AltList1(ISerializationContext context, AltList1 semanticObject) {\n\t\tgenericSequencer.createSequence(context, semanticObject);\n\t}\n\t/**\n\t * Contexts:\n\t *     AltList2 returns AltList2\n\t *\n\t * Constraint:\n\t *     ((val1+=ID val2=ID) | (val1+=ID val1+=ID* val3=ID))\n\t */\n\tprotected void sequence_AltList2(ISerializationContext context, AltList2 semanticObject) {\n\t\tgenericSequencer.createSequence(context, semanticObject);\n\t}\n\t/**\n\t * Contexts:\n\t *     AlternativeMultiplicities returns AlternativeMultiplicities\n\t *\n\t * Constraint:\n\t *     ((val2=ID | val3=ID)? (val4+=ID | val5+=ID)+ val6+=ID? (val7+=ID? val6+=ID?)*)\n\t */\n\tprotected void sequence_AlternativeMultiplicities(ISerializationContext context, AlternativeMultiplicities semanticObject) {\n\t\tgenericSequencer.createSequence(context, semanticObject);\n\t}\n\t/**\n\t * Contexts:\n\t *     Complex1 returns Complex1\n\t *\n\t * Constraint:\n\t *     (val1=ID? val2=ID? (val3+=ID | val4+=ID | val5+=ID | val6+=ID)*)\n\t */\n\tprotected void sequence_Complex1(ISerializationContext context, Complex1 semanticObject) {\n\t\tgenericSequencer.createSequence(context, semanticObject);\n\t}\n\t/**\n\t * Contexts:\n\t *     Delegation<D,P> returns DelegationA\n\t *     Delegation<D> returns DelegationA\n\t *\n\t * Constraint:\n\t *     (left=Delegation_DelegationA_1_2_0 rc2=Delegation)\n\t */\n\tprotected void sequence_Delegation$D$true$(ISerializationContext context, DelegationA semanticObject) {\n\t\tif (errorAcceptor != null) {\n\t\t\tif (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.DELEGATION_A__LEFT) == ValueTransient.YES)\n\t\t\t\terrorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.DELEGATION_A__LEFT));\n\t\t\tif (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.DELEGATION_A__RC2) == ValueTransient.YES)\n\t\t\t\terrorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.DELEGATION_A__RC2));\n\t\t}\n\t\tSequenceFeeder feeder = createSequencerFeeder(context, semanticObject);\n\t\tfeeder.accept(grammarAccess.getDelegationAccess().getDelegationALeftAction_1_2_0(), semanticObject.getLeft());\n\t\tfeeder.accept(grammarAccess.getDelegationAccess().getRc2DelegationParserRuleCall_1_2_1_0(), semanticObject.getRc2());\n\t\tfeeder.finish();\n\t}\n\t/**\n\t * Contexts:\n\t *     Delegation.DelegationA_1_2_0<D,P> returns Delegation\n\t *     Delegation.DelegationA_1_2_0<D> returns Delegation\n\t *\n\t * Constraint:\n\t *     (p=ID | np=INT)\n\t */\n\tprotected void sequence_Delegation$D$true$_DelegationA_1_2_0(ISerializationContext context, Delegation semanticObject) {\n\t\tgenericSequencer.createSequence(context, semanticObject);\n\t}\n\t/**\n\t * Contexts:\n\t *     Delegation<D> returns Delegation\n\t *     Delegation returns Delegation\n\t *\n\t * Constraint:\n\t *     np=INT\n\t */\n\tprotected void sequence_Delegation$P$false$(ISerializationContext context, Delegation semanticObject) {\n\t\tif (errorAcceptor != null) {\n\t\t\tif (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.DELEGATION__NP) == ValueTransient.YES)\n\t\t\t\terrorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.DELEGATION__NP));\n\t\t}\n\t\tSequenceFeeder feeder = createSequencerFeeder(context, semanticObject);\n\t\tfeeder.accept(grammarAccess.getDelegationAccess().getNpINTTerminalRuleCall_0_0_1_0_0(), semanticObject.getNp());\n\t\tfeeder.finish();\n\t}\n\t/**\n\t * Contexts:\n\t *     Delegation<D,P> returns Delegation\n\t *     Delegation<P> returns Delegation\n\t *\n\t * Constraint:\n\t *     p=ID\n\t */\n\tprotected void sequence_Delegation$P$true$(ISerializationContext context, Delegation semanticObject) {\n\t\tif (errorAcceptor != null) {\n\t\t\tif (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.DELEGATION__P) == ValueTransient.YES)\n\t\t\t\terrorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.DELEGATION__P));\n\t\t}\n\t\tSequenceFeeder feeder = createSequencerFeeder(context, semanticObject);\n\t\tfeeder.accept(grammarAccess.getDelegationAccess().getPIDTerminalRuleCall_0_0_0_0_0(), semanticObject.getP());\n\t\tfeeder.finish();\n\t}\n\t/**\n\t * Contexts:\n\t *     DependentAlternative1 returns DependentAlternative1\n\t *\n\t * Constraint:\n\t *     (val=ID | (val=ID flag?='kw1'))\n\t */\n\tprotected void sequence_DependentAlternative1(ISerializationContext context, DependentAlternative1 semanticObject) {\n\t\tgenericSequencer.createSequence(context, semanticObject);\n\t}\n\t/**\n\t * Contexts:\n\t *     DependentAlternative2 returns DependentAlternative2\n\t *\n\t * Constraint:\n\t *     ((val+=ID val+=ID+) | (val+=ID+ flag?='kw1'))\n\t */\n\tprotected void sequence_DependentAlternative2(ISerializationContext context, DependentAlternative2 semanticObject) {\n\t\tgenericSequencer.createSequence(context, semanticObject);\n\t}\n\t/**\n\t * Contexts:\n\t *     Float returns Float\n\t *\n\t * Constraint:\n\t *     {Float}\n\t */\n\tprotected void sequence_Float(ISerializationContext context, org.eclipse.xtext.serializer.sequencertest.Float semanticObject) {\n\t\tgenericSequencer.createSequence(context, semanticObject);\n\t}\n\t/**\n\t * Contexts:\n\t *     FragmentCaller returns FragmentCallerType\n\t *\n\t * Constraint:\n\t *     (val1=ID fragVal=ID val=ID)\n\t */\n<fim_suffix>\tprotected void sequence_Fragment1_FragmentCaller(ISerializationContext context, FragmentCallerType semanticObject) {\n\t\tif (errorAcceptor != null) {\n\t\t\tif (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL1) == ValueTransient.YES)\n\t\t\t\terrorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL1));\n\t\t\tif (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__FRAG_VAL) == ValueTransient.YES)\n\t\t\t\terrorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__FRAG_VAL));\n\t\t\tif (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL) == ValueTransient.YES)\n\t\t\t\terrorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL));\n\t\t}\n\t\tSequenceFeeder feeder = createSequencerFeeder(context, semanticObject);\n\t\tfeeder.accept(grammarAccess.getFragmentCallerAccess().getVal1IDTerminalRuleCall_1_0(), semanticObject.getVal1());\n\t\tfeeder.accept(grammarAccess.getFragment1Access().getFragValIDTerminalRuleCall_0(), semanticObject.getFragVal());\n\t\tfeeder.accept(grammarAccess.getFragmentCallerAccess().getValIDTerminalRuleCall_3_0(), semanticObject.getVal());\n\t\tfeeder.finish();\n\t}<fim_middle>// function below has no smell\n"}