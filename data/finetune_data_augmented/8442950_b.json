{"text": "<fim_prefix>\n<fim_suffix>public class RestConfiguration {\n    public static final String CORS_ACCESS_CONTROL_ALLOW_ORIGIN = \"*\";\n    public static final String CORS_ACCESS_CONTROL_ALLOW_METHODS = \"GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH\";\n    public static final String CORS_ACCESS_CONTROL_MAX_AGE = \"3600\";\n    public static final String CORS_ACCESS_CONTROL_ALLOW_HEADERS = \"Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers\";\n    public enum RestBindingMode {\n        auto, off, json, xml, json_xml\n    }\n    public enum RestHostNameResolver {\n        allLocalIp, localIp, localHostName\n    }\n    private String component;\n    private String apiComponent;\n    private String producerComponent;\n    private String producerApiDoc;\n    private String scheme;\n    private String host;\n    private boolean useXForwardHeaders = true;\n    private String apiHost;\n    private int port;\n    private String contextPath;\n    private String apiContextPath;\n    private String apiContextRouteId;\n    private String apiContextIdPattern;\n    private boolean apiContextListing;\n    private boolean apiVendorExtension;\n    private RestHostNameResolver hostNameResolver = RestHostNameResolver.allLocalIp;\n    private RestBindingMode bindingMode = RestBindingMode.off;\n    private boolean skipBindingOnErrorCode = true;\n    private boolean clientRequestValidation;\n    private boolean enableCORS;\n    private String jsonDataFormat;\n    private String xmlDataFormat;\n    private Map<String, Object> componentProperties;\n    private Map<String, Object> endpointProperties;\n    private Map<String, Object> consumerProperties;\n    private Map<String, Object> dataFormatProperties;\n    private Map<String, Object> apiProperties;\n    private Map<String, String> corsHeaders;\n    /**\n     * Gets the name of the Camel component to use as the REST consumer\n     *\n     * @return the component name, or <tt>null</tt> to let Camel search the {@link Registry} to find suitable implementation\n     */\n    public String getComponent() {\n        return component;\n    }\n    /**\n     * Sets the name of the Camel component to use as the REST consumer\n     *\n     * @param componentName the name of the component (such as restlet, spark-rest, etc.)\n     */\n    public void setComponent(String componentName) {\n        this.component = componentName;\n    }\n    /**\n     * Gets the name of the Camel component to use as the REST API (such as swagger)\n     *\n     * @return the component name, or <tt>null</tt> to let Camel use the default name <tt>swagger</tt>\n     */\n    public String getApiComponent() {\n        return apiComponent;\n    }\n    /**\n     * Sets the name of the Camel component to use as the REST API (such as swagger)\n     *\n     * @param apiComponent the name of the component (such as swagger)\n     */\n    public void setApiComponent(String apiComponent) {\n        this.apiComponent = apiComponent;\n    }\n    /**\n     * Gets the name of the Camel component to use as the REST producer\n     *\n     * @return the component name, or <tt>null</tt> to let Camel search the {@link Registry} to find suitable implementation\n     */\n    public String getProducerComponent() {\n        return producerComponent;\n    }\n    /**\n     * Sets the name of the Camel component to use as the REST producer\n     *\n     * @param componentName the name of the component (such as restlet, jetty, etc.)\n     */\n    public void setProducerComponent(String componentName) {\n        this.producerComponent = componentName;\n    }\n    /**\n     * Gets the location of the api document (swagger api) the REST producer will use\n     * to validate the REST uri and query parameters are valid accordingly to the api document.\n     */\n    public String getProducerApiDoc() {\n        return producerApiDoc;\n    }\n    /**\n     * Sets the location of the api document (swagger api) the REST producer will use\n     * to validate the REST uri and query parameters are valid accordingly to the api document.\n     * This requires adding camel-swagger-java to the classpath, and any miss configuration\n     * will let Camel fail on startup and report the error(s).\n     * <p/>\n     * The location of the api document is loaded from classpath by default, but you can use\n     * <tt>file:</tt> or <tt>http:</tt> to refer to resources to load from file or http url.\n     */\n    public void setProducerApiDoc(String producerApiDoc) {\n        this.producerApiDoc = producerApiDoc;\n    }\n    /**\n     * Gets the hostname to use by the REST consumer\n     *\n     * @return the hostname, or <tt>null</tt> to use default hostname\n     */\n    public String getHost() {\n        return host;\n    }\n    /**\n     * Sets the hostname to use by the REST consumer\n     *\n     * @param host the hostname\n     */\n    public void setHost(String host) {\n        this.host = host;\n    }\n    /**\n     * WWhether to use X-Forward headers to set host etc. for Swagger.\n     * <p/>\n     * This option is default <tt>true</tt>.\n     */\n    public boolean isUseXForwardHeaders() {\n        return useXForwardHeaders;\n    }\n    /**\n     * WWhether to use X-Forward headers to set host etc. for Swagger.\n     * <p/>\n     * This option is default <tt>true</tt>.\n     * \n     * @param useXForwardHeaders whether to use X-Forward headers\n     */\n    public void setUseXForwardHeaders(boolean useXForwardHeaders) {\n        this.useXForwardHeaders = useXForwardHeaders;\n    }\n    public String getApiHost() {\n        return apiHost;\n    }\n    /**\n     * To use an specific hostname for the API documentation (eg swagger)\n     * <p/>\n     * This can be used to override the generated host with this configured hostname\n     */\n    public void setApiHost(String apiHost) {\n        this.apiHost = apiHost;\n    }\n    /**\n     * Gets the scheme to use by the REST consumer\n     *\n     * @return the scheme, or <tt>null</tt> to use default scheme\n     */\n    public String getScheme() {\n        return scheme;\n    }\n    /**\n     * Sets the scheme to use by the REST consumer\n     *\n     * @param scheme the scheme\n     */\n    public void setScheme(String scheme) {\n        this.scheme = scheme;\n    }\n    /**\n     * Gets the port to use by the REST consumer\n     *\n     * @return the port, or <tt>0</tt> or <tt>-1</tt> to use default port\n     */\n    public int getPort() {\n        return port;\n    }\n    /**\n     * Sets the port to use by the REST consumer\n     *\n     * @param port the port number\n     */\n    public void setPort(int port) {\n        this.port = port;\n    }\n    /**\n     * Gets the configured context-path\n     *\n     * @return the context path, or <tt>null</tt> if none configured.\n     */\n    public String getContextPath() {\n        return contextPath;\n    }\n    /**\n     * Sets a leading context-path the REST services will be using.\n     * <p/>\n     * This can be used when using components such as <tt>camel-servlet</tt> where the deployed web application\n     * is deployed using a context-path. Or for components such as <tt>camel-jetty</tt> or <tt>camel-netty4-http</tt>\n     * that includes a HTTP server.\n     *\n     * @param contextPath the context path\n     */\n    public void setContextPath(String contextPath) {\n        this.contextPath = contextPath;\n    }\n    public String getApiContextPath() {\n        return apiContextPath;\n    }\n    /**\n     * Sets a leading API context-path the REST API services will be using.\n     * <p/>\n     * This can be used when using components such as <tt>camel-servlet</tt> where the deployed web application\n     * is deployed using a context-path.\n     *\n     * @param contextPath the API context path\n     */\n    public void setApiContextPath(String contextPath) {\n        this.apiContextPath = contextPath;\n    }\n    public String getApiContextRouteId() {\n        return apiContextRouteId;\n    }\n    /**\n     * Sets the route id to use for the route that services the REST API.\n     * <p/>\n     * The route will by default use an auto assigned route id.\n     *\n     * @param apiContextRouteId  the route id\n     */\n    public void setApiContextRouteId(String apiContextRouteId) {\n        this.apiContextRouteId = apiContextRouteId;\n    }\n    public String getApiContextIdPattern() {\n        return apiContextIdPattern;\n    }\n    /**\n     * Optional CamelContext id pattern to only allow Rest APIs from rest services within CamelContext's which name matches the pattern.\n     * <p/>\n     * The pattern <tt>#name#</tt> refers to the CamelContext name, to match on the current CamelContext only.<fim_middle>// class below is data class and blob\n"}