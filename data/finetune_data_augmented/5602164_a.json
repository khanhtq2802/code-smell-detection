{"text": "<fim_prefix>/* ====================================================================\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n       http://www.apache.org/licenses/LICENSE-2.0\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n==================================================================== */\npackage org.apache.poi.xssf.model;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport java.io.IOException;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.ClientAnchor;\nimport org.apache.poi.ss.usermodel.Comment;\nimport org.apache.poi.ss.usermodel.CreationHelper;\nimport org.apache.poi.ss.usermodel.Drawing;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.ss.util.CellAddress;\nimport org.apache.poi.xssf.XSSFTestDataSamples;\nimport org.apache.poi.xssf.usermodel.XSSFClientAnchor;\nimport org.apache.poi.xssf.usermodel.XSSFRichTextString;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.junit.Test;\nimport org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComment;\nimport org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCommentList;\nimport org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComments;\nimport org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRst;\npublic class TestCommentsTable {\n    private static final String TEST_A2_TEXT = \"test A2 text\";\n    private static final String TEST_A1_TEXT = \"test A1 text\";\n    private static final String TEST_AUTHOR = \"test author\";\n    @Test\n    public void findAuthor() {\n        CommentsTable sheetComments = new CommentsTable();\n        assertEquals(1, sheetComments.getNumberOfAuthors());\n        assertEquals(0, sheetComments.findAuthor(\"\"));\n        assertEquals(\"\", sheetComments.getAuthor(0));\n        assertEquals(1, sheetComments.findAuthor(TEST_AUTHOR));\n        assertEquals(2, sheetComments.findAuthor(\"another author\"));\n        assertEquals(1, sheetComments.findAuthor(TEST_AUTHOR));\n        assertEquals(3, sheetComments.findAuthor(\"YAA\"));\n        assertEquals(2, sheetComments.findAuthor(\"another author\"));\n    }\n    @Test\n    public void getCellComment() {\n        CommentsTable sheetComments = new CommentsTable();\n        CTComments comments = sheetComments.getCTComments();\n        CTCommentList commentList = comments.getCommentList();\n        // Create 2 comments for A1 and A\" cells\n        CTComment comment0 = commentList.insertNewComment(0);\n        comment0.setRef(\"A1\");\n        CTRst ctrst0 = CTRst.Factory.newInstance();\n        ctrst0.setT(TEST_A1_TEXT);\n        comment0.setText(ctrst0);\n        CTComment comment1 = commentList.insertNewComment(0);\n        comment1.setRef(\"A2\");\n        CTRst ctrst1 = CTRst.Factory.newInstance();\n        ctrst1.setT(TEST_A2_TEXT);\n        comment1.setText(ctrst1);\n        // test finding the right comment for a cell\n        assertSame(comment0, sheetComments.getCTComment(new CellAddress(\"A1\")));\n        assertSame(comment1, sheetComments.getCTComment(new CellAddress(\"A2\")));\n        assertNull(sheetComments.getCTComment(new CellAddress(\"A3\")));\n    }\n    @Test\n    public void existing() throws IOException {\n        try (Workbook workbook = XSSFTestDataSamples.openSampleWorkbook(\"WithVariousData.xlsx\")) {\n            Sheet sheet1 = workbook.getSheetAt(0);\n            Sheet sheet2 = workbook.getSheetAt(1);\n            assertTrue(((XSSFSheet) sheet1).hasComments());\n            assertFalse(((XSSFSheet) sheet2).hasComments());\n            // Comments should be in C5 and C7\n            Row r5 = sheet1.getRow(4);\n            Row r7 = sheet1.getRow(6);\n            assertNotNull(r5.getCell(2).getCellComment());\n            assertNotNull(r7.getCell(2).getCellComment());\n            // Check they have what we expect\n            // TODO: Rich text formatting\n            Comment cc5 = r5.getCell(2).getCellComment();\n            Comment cc7 = r7.getCell(2).getCellComment();\n            assertEquals(\"Nick Burch\", cc5.getAuthor());\n            assertEquals(\"Nick Burch:\\nThis is a comment\", cc5.getString().getString());\n            assertEquals(4, cc5.getRow());\n            assertEquals(2, cc5.getColumn());\n            assertEquals(\"Nick Burch\", cc7.getAuthor());\n            assertEquals(\"Nick Burch:\\nComment #1\\n\", cc7.getString().getString());\n            assertEquals(6, cc7.getRow());\n            assertEquals(2, cc7.getColumn());\n        }\n    }\n<fim_suffix>    @Test\n    public void writeRead() throws IOException {\n        try (XSSFWorkbook workbook = XSSFTestDataSamples.openSampleWorkbook(\"WithVariousData.xlsx\")) {\n            XSSFSheet sheet1 = workbook.getSheetAt(0);\n            XSSFSheet sheet2 = workbook.getSheetAt(1);\n            assertTrue(sheet1.hasComments());\n            assertFalse(sheet2.hasComments());\n            // Change on comment on sheet 1, and add another into\n            //  sheet 2\n            Row r5 = sheet1.getRow(4);\n            Comment cc5 = r5.getCell(2).getCellComment();\n            cc5.setAuthor(\"Apache POI\");\n            cc5.setString(new XSSFRichTextString(\"Hello!\"));\n            Row r2s2 = sheet2.createRow(2);\n            Cell c1r2s2 = r2s2.createCell(1);\n            assertNull(c1r2s2.getCellComment());\n            Drawing<?> dg = sheet2.createDrawingPatriarch();\n            Comment cc2 = dg.createCellComment(new XSSFClientAnchor());\n            cc2.setAuthor(\"Also POI\");\n            cc2.setString(new XSSFRichTextString(\"A new comment\"));\n            c1r2s2.setCellComment(cc2);\n            // Save, and re-load the file\n            try (XSSFWorkbook workbookBack = XSSFTestDataSamples.writeOutAndReadBack(workbook)) {\n                // Check we still have comments where we should do\n                sheet1 = workbookBack.getSheetAt(0);\n                sheet2 = workbookBack.getSheetAt(1);\n                assertNotNull(sheet1.getRow(4).getCell(2).getCellComment());\n                assertNotNull(sheet1.getRow(6).getCell(2).getCellComment());\n                assertNotNull(sheet2.getRow(2).getCell(1).getCellComment());\n                // And check they still have the contents they should do\n                assertEquals(\"Apache POI\",\n                        sheet1.getRow(4).getCell(2).getCellComment().getAuthor());\n                assertEquals(\"Nick Burch\",\n                        sheet1.getRow(6).getCell(2).getCellComment().getAuthor());\n                assertEquals(\"Also POI\",\n                        sheet2.getRow(2).getCell(1).getCellComment().getAuthor());\n                assertEquals(\"Hello!\",\n                        sheet1.getRow(4).getCell(2).getCellComment().getString().getString());\n            }\n        }\n    }\n    @Test\n    public void readWriteMultipleAuthors() throws IOException {\n        try (XSSFWorkbook workbook = XSSFTestDataSamples.openSampleWorkbook(\"WithMoreVariousData.xlsx\")) {\n            XSSFSheet sheet1 = workbook.getSheetAt(0);\n            XSSFSheet sheet2 = workbook.getSheetAt(1);\n            assertTrue(sheet1.hasComments());\n            assertFalse(sheet2.hasComments());\n            assertEquals(\"Nick Burch\",\n                    sheet1.getRow(4).getCell(2).getCellComment().getAuthor());\n            assertEquals(\"Nick Burch\",\n                    sheet1.getRow(6).getCell(2).getCellComment().getAuthor());\n            assertEquals(\"Torchbox\",\n                    sheet1.getRow(12).getCell(2).getCellComment().getAuthor());<fim_middle>// function below is feature envy and long method\n"}