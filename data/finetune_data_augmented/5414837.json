{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.openejb.math.stat.descriptive;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Arrays;\nimport org.apache.openejb.math.MathRuntimeException;\nimport org.apache.openejb.math.stat.descriptive.moment.GeometricMean;\nimport org.apache.openejb.math.stat.descriptive.moment.Kurtosis;\nimport org.apache.openejb.math.stat.descriptive.moment.Mean;\nimport org.apache.openejb.math.stat.descriptive.moment.Skewness;\nimport org.apache.openejb.math.stat.descriptive.moment.Variance;\nimport org.apache.openejb.math.stat.descriptive.rank.Max;\nimport org.apache.openejb.math.stat.descriptive.rank.Min;\nimport org.apache.openejb.math.stat.descriptive.rank.Percentile;\nimport org.apache.openejb.math.stat.descriptive.summary.Sum;\nimport org.apache.openejb.math.stat.descriptive.summary.SumOfSquares;\nimport org.apache.openejb.math.util.ResizableDoubleArray;\n/**\n * Maintains a dataset of values of a single variable and computes descriptive\n * statistics based on stored data. The {@link #getWindowSize() windowSize}\n * property sets a limit on the number of values that can be stored in the\n * dataset.  The default value, INFINITE_WINDOW, puts no limit on the size of\n * the dataset.  This value should be used with caution, as the backing store\n * will grow without bound in this case.  For very large datasets,\n * {@link org.apache.commons.math.stat.descriptive.SummaryStatistics}, which does not store the dataset, should be used\n * instead of this class. If <code>windowSize</code> is not INFINITE_WINDOW and\n * more values are added than can be stored in the dataset, new values are\n * added in a \"rolling\" manner, with new values replacing the \"oldest\" values\n * in the dataset.\n *\n * <p>Note: this class is not threadsafe.  Use\n * {@link org.apache.openejb.math.stat.descriptive.SynchronizedDescriptiveStatistics} if concurrent access from multiple\n * threads is required.</p>\n *\n * @version $Revision: 885278 $ $Date: 2009-11-29 13:47:51 -0800 (Sun, 29 Nov 2009) $\n */\npublic class DescriptiveStatistics implements StatisticalSummary, Serializable {\n    /**\n     * Represents an infinite window size.  When the {@link #getWindowSize()}\n     * returns this value, there is no limit to the number of data values\n     * that can be stored in the dataset.\n     */\n    public static final int INFINITE_WINDOW = -1;\n    /** Serialization UID */\n    private static final long serialVersionUID = 1233067267405273064L;\n    /** Name of the setQuantile method. */\n    private static final String SET_QUANTILE_METHOD_NAME = \"setQuantile\";\n    /** Message for unsupported setQuantile. */\n    private static final String UNSUPPORTED_METHOD_MESSAGE =\n        \"percentile implementation {0} does not support {1}\";\n    /** Message for illegal accesson setquantile. */\n    private static final String ILLEGAL_ACCESS_MESSAGE =\n        \"cannot access {0} method in percentile implementation {1}\";\n    /** hold the window size **/\n    protected int windowSize = INFINITE_WINDOW;\n    /**\n     *  Stored data values\n     */\n    protected ResizableDoubleArray eDA = new ResizableDoubleArray();\n    /** Mean statistic implementation - can be reset by setter. */\n    private UnivariateStatistic meanImpl = new Mean();\n    /** Geometric mean statistic implementation - can be reset by setter. */\n    private UnivariateStatistic geometricMeanImpl = new GeometricMean();\n    /** Kurtosis statistic implementation - can be reset by setter. */\n    private UnivariateStatistic kurtosisImpl = new Kurtosis();\n    /** Maximum statistic implementation - can be reset by setter. */\n    private UnivariateStatistic maxImpl = new Max();\n    /** Minimum statistic implementation - can be reset by setter. */\n    private UnivariateStatistic minImpl = new Min();\n    /** Percentile statistic implementation - can be reset by setter. */\n    private UnivariateStatistic percentileImpl = new Percentile();\n    /** Skewness statistic implementation - can be reset by setter. */\n    private UnivariateStatistic skewnessImpl = new Skewness();\n    /** Variance statistic implementation - can be reset by setter. */\n    private UnivariateStatistic varianceImpl = new Variance();\n    /** Sum of squares statistic implementation - can be reset by setter. */\n    private UnivariateStatistic sumsqImpl = new SumOfSquares();\n    /** Sum statistic implementation - can be reset by setter. */\n    private UnivariateStatistic sumImpl = new Sum();\n    /**\n     * Construct a DescriptiveStatistics instance with an infinite window\n     */\n    public DescriptiveStatistics() {\n    }\n    /**\n     * Construct a DescriptiveStatistics instance with the specified window\n     *\n     * @param window the window size.\n     */\n<fim_suffix>    public DescriptiveStatistics(int window) {\n        setWindowSize(window);\n    }\n    /**\n     * Copy constructor.  Construct a new DescriptiveStatistics instance that\n     * is a copy of original.\n     *\n     * @param original DescriptiveStatistics instance to copy\n     */\n    public DescriptiveStatistics(DescriptiveStatistics original) {\n        copy(original, this);\n    }\n    /**\n     * Adds the value to the dataset. If the dataset is at the maximum size\n     * (i.e., the number of stored elements equals the currently configured\n     * windowSize), the first (oldest) element in the dataset is discarded\n     * to make room for the new value.\n     *\n     * @param v the value to be added\n     */\n    public void addValue(double v) {\n        if (windowSize != INFINITE_WINDOW) {\n            if (getN() == windowSize) {\n                eDA.addElementRolling(v);\n            } else if (getN() < windowSize) {\n                eDA.addElement(v);\n            }\n        } else {\n            eDA.addElement(v);\n        }\n    }\n    /**\n     * Removes the most recent value from the dataset.\n     */\n    public void removeMostRecentValue() {\n        eDA.discardMostRecentElements(1);\n    }\n    /**\n     * Replaces the most recently stored value with the given value.\n     * There must be at least one element stored to call this method.\n     *\n     * @param v the value to replace the most recent stored value\n     * @return replaced value\n     */\n    public double replaceMostRecentValue(double v) {\n        return eDA.substituteMostRecentElement(v);\n    }\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n     * arithmetic mean </a> of the available values\n     * @return The mean or Double.NaN if no values have been added.\n     */\n    public double getMean() {\n        return apply(meanImpl);\n    }\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n     * geometric mean </a> of the available values\n     * @return The geometricMean, Double.NaN if no values have been added,\n     * or if the product of the available values is less than or equal to 0.\n     */\n    public double getGeometricMean() {\n        return apply(geometricMeanImpl);\n    }\n    /**\n     * Returns the variance of the available values.\n     * @return The variance, Double.NaN if no values have been added\n     * or 0.0 for a single value set.\n     */\n    public double getVariance() {\n        return apply(varianceImpl);\n    }\n    /**\n     * Returns the standard deviation of the available values.\n     * @return The standard deviation, Double.NaN if no values have been added\n     * or 0.0 for a single value set.\n     */\n    public double getStandardDeviation() {<fim_middle>// function below has no smell\n"}