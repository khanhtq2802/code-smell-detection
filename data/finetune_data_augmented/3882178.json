{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.ambari.server.orm.dao;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.NoResultException;\nimport javax.persistence.TypedQuery;\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Root;\nimport org.apache.ambari.server.orm.RequiresSession;\nimport org.apache.ambari.server.orm.entities.ClusterConfigEntity;\nimport org.apache.ambari.server.orm.entities.ClusterEntity;\nimport org.apache.ambari.server.orm.entities.StackEntity;\nimport org.apache.ambari.server.state.StackId;\nimport com.google.inject.Inject;\nimport com.google.inject.Provider;\nimport com.google.inject.Singleton;\nimport com.google.inject.persist.Transactional;\n@Singleton\npublic class ClusterDAO {\n  @Inject\n  private Provider<EntityManager> entityManagerProvider;\n  @Inject\n  private DaoUtils daoUtils;\n  @Inject\n  private StackDAO stackDAO;\n  /**\n   * Looks for Cluster by ID\n   * @param id ID of Cluster\n   * @return Found entity or NULL\n   */\n  @RequiresSession\n  public ClusterEntity findById(long id) {\n    return entityManagerProvider.get().find(ClusterEntity.class, id);\n  }\n  @RequiresSession\n  public ClusterEntity findByName(String clusterName) {\n    TypedQuery<ClusterEntity> query = entityManagerProvider.get().createNamedQuery(\"clusterByName\", ClusterEntity.class);\n    query.setParameter(\"clusterName\", clusterName);\n    try {\n      return query.getSingleResult();\n    } catch (NoResultException ignored) {\n      return null;\n    }\n  }\n  @RequiresSession\n  public ClusterEntity findByResourceId(long resourceId) {\n    TypedQuery<ClusterEntity> query = entityManagerProvider.get().createNamedQuery(\"clusterByResourceId\", ClusterEntity.class);\n    query.setParameter(\"resourceId\", resourceId);\n    try {\n      return query.getSingleResult();\n    } catch (NoResultException ignored) {\n      return null;\n    }\n  }\n  @RequiresSession\n  public List<ClusterEntity> findAll() {\n    TypedQuery<ClusterEntity> query = entityManagerProvider.get().createNamedQuery(\"allClusters\", ClusterEntity.class);\n    try {\n      return query.getResultList();\n    } catch (NoResultException ignored) {\n    }\n    return null;\n  }\n  @RequiresSession\n  public ClusterConfigEntity findConfig(Long configEntityPK) {\n    return entityManagerProvider.get().find(ClusterConfigEntity.class,\n      configEntityPK);\n  }\n  @RequiresSession\n  public ClusterConfigEntity findConfig(Long clusterId, String type, String tag) {\n    CriteriaBuilder cb = entityManagerProvider.get().getCriteriaBuilder();\n    CriteriaQuery<ClusterConfigEntity> cq = cb.createQuery(ClusterConfigEntity.class);\n    Root<ClusterConfigEntity> config = cq.from(ClusterConfigEntity.class);\n    cq.where(cb.and(\n        cb.equal(config.get(\"clusterId\"), clusterId)),\n        cb.equal(config.get(\"type\"), type),\n        cb.equal(config.get(\"tag\"), tag)\n    );\n    TypedQuery<ClusterConfigEntity> query = entityManagerProvider.get().createQuery(cq);\n    return daoUtils.selectOne(query);\n  }\n  @RequiresSession\n  public List<ClusterConfigEntity> getEnabledConfigsByTypes(Long clusterId, Collection<String> types) {\n    TypedQuery<ClusterConfigEntity> query = entityManagerProvider.get().createNamedQuery(\n        \"ClusterConfigEntity.findEnabledConfigsByTypes\",\n      ClusterConfigEntity.class);\n    query.setParameter(\"clusterId\", clusterId);\n    query.setParameter(\"types\", types);\n    return daoUtils.selectList(query);\n  }\n  @RequiresSession\n  public ClusterConfigEntity findConfig(Long clusterId, String type, Long version) {\n    CriteriaBuilder cb = entityManagerProvider.get().getCriteriaBuilder();\n    CriteriaQuery<ClusterConfigEntity> cq = cb.createQuery(ClusterConfigEntity.class);\n    Root<ClusterConfigEntity> config = cq.from(ClusterConfigEntity.class);\n    cq.where(cb.and(\n        cb.equal(config.get(\"clusterId\"), clusterId)),\n      cb.equal(config.get(\"type\"), type),\n      cb.equal(config.get(\"version\"), version)\n    );\n    TypedQuery<ClusterConfigEntity> query = entityManagerProvider.get().createQuery(cq);\n    return daoUtils.selectOne(query);\n  }\n  /**\n   * Gets the next version that will be created for a given\n   * {@link ClusterConfigEntity}.\n   *\n   * @param clusterId\n   *          the cluster that the service is a part of.\n   * @param configType\n   *          the name of the configuration type (not {@code null}).\n   * @return the highest existing value of the version column + 1\n   */\n  @RequiresSession\n  public Long findNextConfigVersion(long clusterId, String configType) {\n    TypedQuery<Number> query = entityManagerProvider.get().createNamedQuery(\n        \"ClusterConfigEntity.findNextConfigVersion\", Number.class);\n    query.setParameter(\"clusterId\", clusterId);\n    query.setParameter(\"configType\", configType);\n    return daoUtils.selectSingle(query).longValue();\n  }\n  /**\n   * Get all configurations for the specified cluster and stack. This will\n   * return different versions of the same configuration type (cluster-env v1\n   * and cluster-env v2) if they exist.\n   *\n   * @param clusterId\n   *          the cluster (not {@code null}).\n   * @param stackId\n   *          the stack (not {@code null}).\n   * @return all service configurations for the cluster and stack.\n   */\n  @RequiresSession\n  public List<ClusterConfigEntity> getAllConfigurations(Long clusterId,\n      StackId stackId) {\n    StackEntity stackEntity = stackDAO.find(stackId.getStackName(),\n        stackId.getStackVersion());\n    TypedQuery<ClusterConfigEntity> query = entityManagerProvider.get().createNamedQuery(\n        \"ClusterConfigEntity.findAllConfigsByStack\", ClusterConfigEntity.class);\n    query.setParameter(\"clusterId\", clusterId);\n    query.setParameter(\"stack\", stackEntity);\n    return daoUtils.selectList(query);\n  }\n  /**\n   * Gets the latest configurations for a given stack for all of the\n   * configurations of the specified cluster. This method does not take into\n   * account the configuration being enabled, as the latest for a given stack\n   * may not be \"selected\".\n   *\n   * @param clusterId\n   *          the cluster that the service is a part of.\n   * @param stackId\n   *          the stack to get the latest configurations for (not {@code null}).\n   * @return the latest configurations for the specified cluster and stack.\n   */\n<fim_suffix>  @RequiresSession\n  public List<ClusterConfigEntity> getLatestConfigurations(long clusterId,\n      StackId stackId) {\n    StackEntity stackEntity = stackDAO.find(stackId.getStackName(),\n        stackId.getStackVersion());\n    TypedQuery<ClusterConfigEntity> query = entityManagerProvider.get().createNamedQuery(\n        \"ClusterConfigEntity.findLatestConfigsByStack\",\n        ClusterConfigEntity.class);\n    query.setParameter(\"clusterId\", clusterId);\n    query.setParameter(\"stack\", stackEntity);\n    return daoUtils.selectList(query);\n  }\n  /**\n   * Gets the latest configurations for a given stack with any of the given config types.\n   * This method does not take into account the configuration being enabled.\n   */\n  @RequiresSession\n  public List<ClusterConfigEntity> getLatestConfigurationsWithTypes(long clusterId, StackId stackId, Collection<String> configTypes) {\n    StackEntity stackEntity = stackDAO.find(stackId.getStackName(), stackId.getStackVersion());\n    if (configTypes.isEmpty()) {\n      return Collections.emptyList();\n    }\n    return daoUtils.selectList(\n      entityManagerProvider.get()\n      .createNamedQuery(\"ClusterConfigEntity.findLatestConfigsByStackWithTypes\", ClusterConfigEntity.class)\n      .setParameter(\"clusterId\", clusterId)\n      .setParameter(\"stack\", stackEntity)\n      .setParameter(\"types\", configTypes));\n  }\n  /**<fim_middle>// function below has no smell\n"}