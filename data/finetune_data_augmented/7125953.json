{"text": "<fim_prefix>/*\n   Copyright (c) 2012 LinkedIn Corp.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\n/* $Id$ */\npackage com.linkedin.r2.caprep;\n\n\nimport com.linkedin.r2.caprep.db.DefaultMessageSerializer;\nimport com.linkedin.r2.caprep.db.DirectoryDbSink;\nimport com.linkedin.r2.caprep.db.DirectoryDbSource;\nimport com.linkedin.r2.filter.NextFilter;\nimport com.linkedin.r2.filter.message.rest.RestFilter;\nimport com.linkedin.r2.filter.message.stream.StreamFilter;\nimport com.linkedin.r2.message.RequestContext;\nimport com.linkedin.r2.message.rest.RestRequest;\nimport com.linkedin.r2.message.rest.RestResponse;\n\nimport java.io.IOException;\nimport java.util.Map;\n\nimport com.linkedin.r2.message.stream.StreamRequest;\nimport com.linkedin.r2.message.stream.StreamResponse;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * @author Chris Pettitt\n * @version $Revision$\n */\n<fim_suffix>public class CapRepFilter implements RestFilter, StreamFilter, CapRepAdmin\n{\n  private static final Logger _log = LoggerFactory.getLogger(CapRepFilter.class);\n\n  private static final PassThroughFilter PASS_THROUGH_FILTER = new PassThroughFilter();\n\n  private final ReplaceableFilter _filter = new ReplaceableFilter(PASS_THROUGH_FILTER);\n\n  @Override\n  public void capture(String directory) throws IOException\n  {\n    _log.debug(\"Switching to capture mode. Directory: \" + directory);\n    _filter.setFilter(PASS_THROUGH_FILTER);\n    try\n    {\n      _filter.setFilter(new CaptureFilter(new DirectoryDbSink(directory,\n                                                              new DefaultMessageSerializer())));\n    }\n    catch (IOException e)\n    {\n      _log.warn(\"Error switching to capture mode\", e);\n      throw e;\n    }\n    catch (RuntimeException e)\n    {\n      _log.warn(\"Error switching to capture mode\", e);\n      throw e;\n    }\n  }\n\n  @Override\n  public void replay(String directory) throws IOException\n  {\n    _log.debug(\"Switching to replay mode. Directory: \" + directory);\n    _filter.setFilter(PASS_THROUGH_FILTER);\n    try\n    {\n      _filter.setFilter(new ReplayFilter(new DirectoryDbSource(directory,\n                                                               new DefaultMessageSerializer())));\n    }\n    catch (IOException e)\n    {\n      _log.warn(\"Error switching to replay mode\", e);\n      throw e;\n    }\n    catch (RuntimeException e)\n    {\n      _log.warn(\"Error switching to capture mode\", e);\n      throw e;\n    }\n  }\n\n  @Override\n  public void passThrough()\n  {\n    _log.debug(\"Switching to pass-through mode.\");\n    _filter.setFilter(PASS_THROUGH_FILTER);\n  }\n\n  @Override\n  public String getMode()\n  {\n    return _filter.getFilter().getClass().getSimpleName();\n  }\n\n  @Override\n  public void onRestRequest(RestRequest req, RequestContext requestContext,\n                            Map<String, String> wireAttrs,\n                            NextFilter<RestRequest, RestResponse> nextFilter)\n  {\n    _filter.onRestRequest(req, requestContext, wireAttrs, nextFilter);\n  }\n\n  @Override\n  public void onRestResponse(RestResponse res, RequestContext requestContext,\n                             Map<String, String> wireAttrs,\n                             NextFilter<RestRequest, RestResponse> nextFilter)\n  {\n    _filter.onRestResponse(res, requestContext, wireAttrs, nextFilter);\n  }\n\n  @Override\n  public void onRestError(Throwable ex, RequestContext requestContext,\n                          Map<String, String> wireAttrs,\n                          NextFilter<RestRequest, RestResponse> nextFilter)\n  {\n    _filter.onRestError(ex, requestContext, wireAttrs, nextFilter);\n  }\n\n  @Override\n  public void onStreamRequest(StreamRequest req, RequestContext requestContext,\n                            Map<String, String> wireAttrs,\n                            NextFilter<StreamRequest, StreamResponse> nextFilter)\n  {\n    _filter.onStreamRequest(req, requestContext, wireAttrs, nextFilter);\n  }\n\n  @Override\n  public void onStreamResponse(StreamResponse res, RequestContext requestContext,\n                             Map<String, String> wireAttrs,\n                             NextFilter<StreamRequest, StreamResponse> nextFilter)\n  {\n    _filter.onStreamResponse(res, requestContext, wireAttrs, nextFilter);\n  }\n\n  @Override\n  public void onStreamError(Throwable ex, RequestContext requestContext,\n                          Map<String, String> wireAttrs,\n                          NextFilter<StreamRequest, StreamResponse> nextFilter)\n  {\n    _filter.onStreamError(ex, requestContext, wireAttrs, nextFilter);\n  }\n}<fim_middle>// class below has no smell\n"}