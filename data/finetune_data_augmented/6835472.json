{"text": "<fim_prefix>/**\n * Copyright (c) 2016 NumberFour AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   NumberFour AG - Initial API and implementation\n */\npackage org.eclipse.n4js.ui.internal;\n\nimport static com.google.common.base.Optional.absent;\nimport static com.google.common.base.Optional.fromNullable;\n\nimport java.nio.file.Path;\n\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.emf.common.util.URI;\nimport org.eclipse.n4js.external.ExternalProject;\nimport org.eclipse.n4js.internal.N4JSProject;\nimport org.eclipse.n4js.projectModel.IN4JSProject;\nimport org.eclipse.n4js.ui.projectModel.IN4JSEclipseProject;\nimport org.eclipse.n4js.ui.projectModel.IN4JSEclipseSourceContainer;\nimport org.eclipse.n4js.utils.URIUtils;\nimport org.eclipse.xtext.ui.XtextProjectHelper;\n\nimport com.google.common.base.Optional;\nimport com.google.common.collect.ImmutableList;\n\n/**\n */\npublic class N4JSEclipseProject extends N4JSProject implements IN4JSEclipseProject {\n\n\tprivate final IProject project;\n\n\tN4JSEclipseProject(IProject project, URI location, N4JSEclipseModel model) {\n\t\tsuper(location, project instanceof ExternalProject, model);\n\t\tthis.project = project;\n\t}\n\n\t@Override\n\tprotected boolean checkExists() {\n\t\tif (XtextProjectHelper.hasNature(project)) {\n\t\t\treturn project.getFile(IN4JSProject.PACKAGE_JSON).exists();\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tprotected N4JSEclipseModel getModel() {\n\t\treturn (N4JSEclipseModel) super.getModel();\n\t}\n\n\t@Override\n\tpublic IProject getProject() {\n\t\treturn project;\n\t}\n\n\t@Override\n\tpublic Path getLocationPath() {\n\t\treturn project.getLocation().toFile().toPath();\n\t}\n\n<fim_suffix>\t@Override\n\tpublic Optional<URI> getProjectDescriptionLocation() {\n\t\tif (checkExists() // Existing project AND\n\t\t\t\t&& ((getLocation().isPlatformResource()\n\t\t\t\t\t\t// Platform resource URI\n\t\t\t\t\t\t&& URIUtils.isPlatformResourceUriPointingToProject(getLocation()))\n\t\t\t\t\t\t|| isExternal())) { // OR external\n\t\t\treturn fromNullable(getLocation().appendSegment(IN4JSProject.PACKAGE_JSON));\n\t\t} else {\n\t\t\treturn absent();\n\t\t}\n\t}\n\n\t@Override\n\tpublic ImmutableList<? extends IN4JSEclipseProject> getDependencies() {\n\t\tif (!exists()) {\n\t\t\treturn ImmutableList.of();\n\t\t}\n\t\treturn getModel().getDependencies(this, false);\n\t}\n\n\t@Override\n\tpublic ImmutableList<? extends IN4JSEclipseProject> getDependenciesAndImplementedApis() {\n\t\treturn getDependenciesAndImplementedApis(false);\n\t}\n\n\t@Override\n\tpublic ImmutableList<? extends IN4JSEclipseProject> getDependenciesAndImplementedApis(\n\t\t\tboolean includeAbsentProjects) {\n\t\tif (!exists()) {\n\t\t\treturn ImmutableList.of();\n\t\t}\n\t\treturn getModel().getDependenciesAndImplementedApis(this, includeAbsentProjects);\n\t}\n\n\t@Override\n\tpublic ImmutableList<? extends IN4JSEclipseProject> getImplementedProjects() {\n\t\tif (!exists()) {\n\t\t\treturn ImmutableList.of();\n\t\t}\n\t\treturn getModel().getImplementedProjects(this);\n\t}\n\n\t@Override\n\tpublic ImmutableList<? extends IN4JSEclipseSourceContainer> getSourceContainers() {\n\t\tif (!exists()) {\n\t\t\treturn ImmutableList.of();\n\t\t}\n\t\treturn getModel().getN4JSSourceContainers(this);\n\t}\n\n}<fim_middle>// function below has no smell\n"}