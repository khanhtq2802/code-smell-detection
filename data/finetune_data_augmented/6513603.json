{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2015 SAP SE and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    SAP SE - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.tycho.p2.tools.publisher;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.eclipse.equinox.p2.metadata.IInstallableUnit;\nimport org.eclipse.equinox.p2.metadata.IVersionedId;\nimport org.eclipse.equinox.p2.metadata.VersionedId;\nimport org.eclipse.tycho.artifacts.DependencyResolutionException;\nimport org.eclipse.tycho.artifacts.IllegalArtifactReferenceException;\nimport org.eclipse.tycho.core.shared.MavenLogger;\nimport org.eclipse.tycho.p2.target.P2TargetPlatform;\n\nclass ProductVersionExpansionRun {\n\n    private final P2TargetPlatform targetPlatform;\n    private final File productFile;\n\n    StringBuilder errors = null;\n\n<fim_suffix>    ProductVersionExpansionRun(P2TargetPlatform targetPlatform, File productFile) {\n        this.targetPlatform = targetPlatform;\n        this.productFile = productFile;\n    }\n\n    public List<IVersionedId> resolveReferences(String elementName, String artifactType, List<IVersionedId> references) {\n        final List<IVersionedId> result = new ArrayList<>();\n        for (IVersionedId reference : references) {\n            IInstallableUnit resolvedUnit = resolveReferenceWithErrorHandling(elementName, artifactType, reference);\n            if (resolvedUnit != null) {\n                result.add(new VersionedId(reference.getId(), resolvedUnit.getVersion()));\n            }\n        }\n        return result;\n    }\n\n    public List<IInstallableUnit> resolveReferencesToIUs(String elementName, String artifactType,\n            List<IVersionedId> references) {\n        final List<IInstallableUnit> result = new ArrayList<>();\n        for (IVersionedId reference : references) {\n            IInstallableUnit resolvedUnit = resolveReferenceWithErrorHandling(elementName, artifactType, reference);\n            if (resolvedUnit != null) {\n                result.add(resolvedUnit);\n            }\n        }\n        return result;\n    }\n\n    private IInstallableUnit resolveReferenceWithErrorHandling(String elementName, String artifactType,\n            IVersionedId reference) {\n        try {\n            return targetPlatform.resolveUnit(artifactType, reference.getId(), reference.getVersion());\n\n        } catch (IllegalArtifactReferenceException e) {\n            errors = initReferenceResolutionError(errors);\n            errors.append(\"  Invalid <\").append(elementName).append(\"> element with id=\")\n                    .append(quote(reference.getId()));\n            if (reference.getVersion() != null) {\n                errors.append(\" and version=\").append(quote(reference.getVersion()));\n            }\n            errors.append(\": \").append(e.getMessage()).append('\\n');\n        } catch (DependencyResolutionException e) {\n            errors = initReferenceResolutionError(errors);\n            errors.append(\"  \").append(e.getMessage()).append('\\n');\n        }\n        return null;\n    }\n\n    public void reportErrors(MavenLogger logger) {\n        if (errors != null) {\n            logger.error(errors.toString());\n            throw new DependencyResolutionException(\"Cannot resolve dependencies of product \" + productFile.getName()\n                    + \". See log for details.\");\n        }\n    }\n\n    private StringBuilder initReferenceResolutionError(StringBuilder errors) {\n        if (errors == null)\n            return new StringBuilder(\"Cannot resolve dependencies of product \" + productFile.getName() + \":\\n\");\n        else\n            return errors;\n    }\n\n    private static String quote(Object nullableObject) {\n        if (nullableObject == null)\n            return null;\n        else\n            return \"\\\"\" + nullableObject + \"\\\"\";\n    }\n\n}<fim_middle>// function below has no smell\n"}