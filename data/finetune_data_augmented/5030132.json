{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache license, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the license for the specific language governing permissions and\n * limitations under the license.\n */\npackage org.apache.logging.log4j.audit.service.controller;\n\nimport java.util.Map;\n\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.apache.logging.log4j.ThreadContext;\nimport org.apache.logging.log4j.audit.AuditLogger;\nimport org.apache.logging.log4j.audit.dto.AuditDto;\nimport org.apache.logging.log4j.catalog.api.Versions;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport io.swagger.annotations.ApiOperation;\n\n<fim_suffix>@RestController\npublic class AuditController {\n\n    private static final Logger LOGGER = LogManager.getLogger();\n\n    @Autowired\n    private AuditLogger auditLogger;\n\n    @ApiImplicitParams( {@ApiImplicitParam(dataType = \"String\", name = \"Authorization\", paramType = \"header\")})\n    @ApiOperation(value = \"Generate an Audit event\", notes = \"Causes an Audit event to be logged\", tags = {\"Audit\"})\n    @PostMapping(value = \"/event/log\", produces = Versions.V1_0_VALUE)\n    @ResponseStatus(value = HttpStatus.OK)\n    public void logEvent(@RequestBody AuditDto auditDto) {\n        try {\n            Map<String, String> requestContextMap = auditDto.getRequestContextMap();\n            if (requestContextMap != null) {\n                for (Map.Entry<String, String> entry : requestContextMap.entrySet()) {\n                    ThreadContext.put(entry.getKey(), entry.getValue());\n                }\n            }\n            auditLogger.logEvent(auditDto.getEventName(), auditDto.getCatalogId(), auditDto.getProperties());\n        } finally {\n            ThreadContext.clearMap();\n        }\n    }\n}<fim_middle>// class below has no smell\n"}