{"text": "<fim_prefix>/********************************************************************\n * Copyright (c) 2010 Contributors. All rights reserved. \n * This program and the accompanying materials are made available \n * under the terms of the Eclipse Public License v1.0 \n * which accompanies this distribution and is available at \n * http://eclipse.org/legal/epl-v10.html \n *  \n * Contributors: Nieraj Singh - initial implementation\n *******************************************************************/\npackage org.aspectj.org.eclipse.jdt.core.dom;\n\n<fim_suffix>public abstract class IdentifierTypePattern extends TypePattern {\n\n\tprivate Type type;\n\n\tIdentifierTypePattern(AST ast, Type type) {\n\t\tsuper(ast);\n\t\tthis.type = type;\n\t\tsetTypePatternExpression(generateTypePatternExpression(this.type));\n\t}\n\n\t/**\n\t * This may be null if no Type has been resolved. A String representation\n\t * may still exist.\n\t * \n\t * @return type if defined or resolved, or null if not defined or resolved\n\t *         at the time when this node is created\n\t */\n\tpublic Type getType() {\n\t\treturn type;\n\t}\n\n\t/**\n\t * Generate an expression (String representation) for the given type.\n\t * \n\t * @param type\n\t * @return non-null expression for the given type. Null if no expression can\n\t *         be generated.\n\t */\n\tprotected String generateTypePatternExpression(Type type) {\n\t\tString typeExpression = null;\n\t\tif (type instanceof SimpleType) {\n\t\t\tName name = ((SimpleType) type).getName();\n\t\t\tif (name instanceof SimpleName) {\n\t\t\t\ttypeExpression = ((SimpleName) name).getIdentifier();\n\t\t\t}\n\t\t}\n\n\t\t// If expression hasn't been resolved yet, get the toString\n\t\t// representation\n\t\tif (typeExpression == null && type != null) {\n\t\t\ttypeExpression = type.toString();\n\t\t}\n\n\t\treturn typeExpression;\n\t}\n\n\tint memSize() {\n\n\t\tint memSize = super.memSize();\n\n\t\tType type = getType();\n\t\tif (type != null) {\n\t\t\tmemSize += type.memSize();\n\t\t}\n\n\t\treturn memSize;\n\t}\n\n\tvoid accept0(ASTVisitor visitor) {\n\t\tif (visitor instanceof AjASTVisitor) {\n\t\t\tAjASTVisitor ajVisitor = (AjASTVisitor) visitor;\n\t\t\tboolean visited = ajVisitor.visit(this);\n\t\t\tType type = getType();\n\t\t\tif (visited && type != null) {\n\t\t\t\tajVisitor.visit(type);\n\t\t\t}\n\t\t\tajVisitor.endVisit(this);\n\t\t}\n\t}\n\n}<fim_middle>// class below has no smell\n"}