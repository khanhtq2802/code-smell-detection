{"text": "<fim_prefix>/*\n * Copyright (c) 2014, 2017, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.svm.hosted.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Proxy;\n\nimport jdk.vm.ci.meta.MetaAccessProvider;\nimport jdk.vm.ci.meta.ResolvedJavaType;\n\n<fim_suffix>public class AnnotationSubstitutionType extends CustomSubstitutionType<AnnotationSubstitutionField, AnnotationSubstitutionMethod> {\n\n    private final String name;\n\n    public AnnotationSubstitutionType(MetaAccessProvider metaAccess, ResolvedJavaType original) {\n        super(original);\n\n        assert original.getSuperclass().equals(metaAccess.lookupJavaType(Proxy.class));\n        assert metaAccess.lookupJavaType(Annotation.class).isAssignableFrom(original);\n\n        ResolvedJavaType annotationInterfaceType = AnnotationSupport.findAnnotationInterfaceType(original);\n        assert annotationInterfaceType.isAssignableFrom(original);\n        assert metaAccess.lookupJavaType(Annotation.class).isAssignableFrom(annotationInterfaceType);\n\n        String n = annotationInterfaceType.getName();\n        assert n.endsWith(\";\");\n        name = n.substring(0, n.length() - 1) + \"$$ProxyImpl;\";\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public String toString() {\n        return \"AnnotationType<\" + toJavaName(true) + \" -> \" + original + \">\";\n    }\n}<fim_middle>// class below has no smell\n"}