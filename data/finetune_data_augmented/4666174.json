{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.mesos.runtime.clusterframework.services;\n\nimport org.apache.flink.configuration.Configuration;\nimport org.apache.flink.mesos.runtime.clusterframework.store.MesosWorkerStore;\nimport org.apache.flink.mesos.runtime.clusterframework.store.ZooKeeperMesosWorkerStore;\nimport org.apache.flink.mesos.util.MesosArtifactServer;\nimport org.apache.flink.runtime.util.ZooKeeperUtils;\nimport org.apache.flink.runtime.zookeeper.RetrievableStateStorageHelper;\nimport org.apache.flink.runtime.zookeeper.ZooKeeperSharedCount;\nimport org.apache.flink.runtime.zookeeper.ZooKeeperSharedValue;\nimport org.apache.flink.runtime.zookeeper.ZooKeeperStateHandleStore;\nimport org.apache.flink.runtime.zookeeper.ZooKeeperUtilityFactory;\nimport org.apache.flink.util.ExceptionUtils;\nimport org.apache.flink.util.FlinkException;\nimport org.apache.flink.util.Preconditions;\n\nimport akka.actor.ActorSystem;\n\nimport java.util.concurrent.Executor;\n\n/**\n * {@link MesosServices} implementation for the ZooKeeper high availability based mode.\n */\n<fim_suffix>public class ZooKeeperMesosServices extends AbstractMesosServices {\n\n\t// Factory to create ZooKeeper utility classes\n\tprivate final ZooKeeperUtilityFactory zooKeeperUtilityFactory;\n\n\tpublic ZooKeeperMesosServices(ActorSystem actorSystem, MesosArtifactServer artifactServer, ZooKeeperUtilityFactory zooKeeperUtilityFactory) {\n\t\tsuper(actorSystem, artifactServer);\n\t\tthis.zooKeeperUtilityFactory = Preconditions.checkNotNull(zooKeeperUtilityFactory);\n\t}\n\n\t@Override\n\tpublic MesosWorkerStore createMesosWorkerStore(Configuration configuration, Executor executor) throws Exception {\n\t\tRetrievableStateStorageHelper<MesosWorkerStore.Worker> stateStorageHelper =\n\t\t\tZooKeeperUtils.createFileSystemStateStorage(configuration, \"mesosWorkerStore\");\n\n\t\tZooKeeperStateHandleStore<MesosWorkerStore.Worker> zooKeeperStateHandleStore = zooKeeperUtilityFactory.createZooKeeperStateHandleStore(\n\t\t\t\"/workers\",\n\t\t\tstateStorageHelper);\n\n\t\tZooKeeperSharedValue frameworkId = zooKeeperUtilityFactory.createSharedValue(\"/frameworkId\", new byte[0]);\n\t\tZooKeeperSharedCount totalTaskCount = zooKeeperUtilityFactory.createSharedCount(\"/taskCount\", 0);\n\n\t\treturn new ZooKeeperMesosWorkerStore(\n\t\t\tzooKeeperStateHandleStore,\n\t\t\tframeworkId,\n\t\t\ttotalTaskCount);\n\t}\n\n\t@Override\n\tpublic void close(boolean cleanup) throws Exception {\n\t\tThrowable exception = null;\n\n\t\ttry {\n\t\t\t// this also closes the underlying CuratorFramework instance\n\t\t\tzooKeeperUtilityFactory.close(cleanup);\n\t\t} catch (Throwable t) {\n\t\t\texception = ExceptionUtils.firstOrSuppressed(t, exception);\n\t\t}\n\n\t\ttry {\n\t\t\tsuper.close(cleanup);\n\t\t} catch (Throwable t) {\n\t\t\texception = ExceptionUtils.firstOrSuppressed(t, exception);\n\t\t}\n\n\t\tif (exception != null) {\n\t\t\tthrow new FlinkException(\"Could not properly shut down the Mesos services.\", exception);\n\t\t}\n\t}\n}<fim_middle>// class below has no smell\n"}