{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sis.internal.jaxb.gco;\n\nimport javax.xml.bind.annotation.adapters.XmlAdapter;\nimport org.opengis.util.InternationalString;\nimport org.apache.sis.util.iso.SimpleInternationalString;\nimport org.apache.sis.internal.jaxb.FilterByVersion;\n\n\n/**\n * JAXB adapter for XML {@code <GO_CharacterString>} element mapped to {@link InternationalString}.\n * This adapter is similar to {@link StringAdapter}, except that the {@code unmarshall} method does\n * not need to localize {@code InternationalString} instances for the locale specified in the current\n * marshaller context.\n *\n * @author  C\u00e9dric Brian\u00e7on (Geomatys)\n * @author  Martin Desruisseaux (Geomatys)\n * @author  Guilhem Legal (Geomatys)\n * @version 1.0\n * @since   0.3\n * @module\n */\npublic class InternationalStringAdapter extends XmlAdapter<GO_CharacterString, InternationalString> {\n    /**\n     * Empty constructor for JAXB.\n     */\n    InternationalStringAdapter() {\n    }\n\n    /**\n     * Converts an object read from a XML stream to an {@link InternationalString} implementation.\n     * JAXB invokes automatically this method at unmarshalling time.\n     *\n     * @param  value  the wrapper for the value, or {@code null}.\n     * @return the unwrapped {@link String} value, or {@code null}.\n     */\n    @Override\n    public final InternationalString unmarshal(final GO_CharacterString value) {\n        if (value != null) {\n            final CharSequence text = value.toCharSequence();\n            if (text != null) {\n                if (text instanceof InternationalString) {\n                    return (InternationalString) text;\n                }\n                return new SimpleInternationalString(text.toString());\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Converts an {@link InternationalString} to an object to format into a XML stream.\n     * JAXB invokes automatically this method at marshalling time.\n     *\n     * @param  value  the string value, or {@code null}.\n     * @return the wrapper for the given string, or {@code null}.\n     */\n    @Override\n    public GO_CharacterString marshal(final InternationalString value) {\n        return CharSequenceAdapter.wrap(value);\n    }\n\n    /**\n     * Wraps the value only if marshalling ISO 19115-3 element.\n     * Otherwise (i.e. if marshalling a legacy ISO 19139:2007 document), omit the element.\n     */\n<fim_suffix>    public static final class Since2014 extends InternationalStringAdapter {\n        /** Empty constructor used only by JAXB. */\n        public Since2014() {\n        }\n\n        /**\n         * Wraps the given value in an ISO 19115-3 element, unless we are marshalling an older document.\n         *\n         * @return a non-null value only if marshalling ISO 19115-3 or newer.\n         */\n        @Override public GO_CharacterString marshal(final InternationalString value) {\n            return FilterByVersion.CURRENT_METADATA.accept() ? super.marshal(value) : null;\n        }\n    }\n}<fim_middle>// class below has no smell\n"}