{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage org.apache.flink.types.parser;\n\nimport org.apache.flink.annotation.PublicEvolving;\nimport org.apache.flink.types.ByteValue;\n\n/**\n * Parses a decimal text field into a {@link ByteValue}.\n * Only characters '1' to '0' and '-' are allowed.\n */\n<fim_suffix>@PublicEvolving\npublic class ByteValueParser extends FieldParser<ByteValue> {\n\t\n\tprivate ByteValue result;\n\t\n\t@Override\n\tpublic int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, ByteValue reusable) {\n\n\t\tif (startPos == limit) {\n\t\t\tsetErrorState(ParseErrorState.EMPTY_COLUMN);\n\t\t\treturn -1;\n\t\t}\n\n\t\tint val = 0;\n\t\tboolean neg = false;\n\t\t\n\t\tthis.result = reusable;\n\n\t\tfinal int delimLimit = limit - delimiter.length + 1;\n\t\t\n\t\tif (bytes[startPos] == '-') {\n\t\t\tneg = true;\n\t\t\tstartPos++;\n\t\t\t\n\t\t\t// check for empty field with only the sign\n\t\t\tif (startPos == limit || (startPos < delimLimit && delimiterNext(bytes, startPos, delimiter))) {\n\t\t\t\tsetErrorState(ParseErrorState.NUMERIC_VALUE_ORPHAN_SIGN);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = startPos; i < limit; i++) {\n\n\t\t\tif (i < delimLimit && delimiterNext(bytes, i, delimiter)) {\n\t\t\t\tif (i == startPos) {\n\t\t\t\t\tsetErrorState(ParseErrorState.EMPTY_COLUMN);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\treusable.setValue((byte) (neg ? -val : val));\n\t\t\t\treturn i + delimiter.length;\n\t\t\t}\n\t\t\tif (bytes[i] < 48 || bytes[i] > 57) {\n\t\t\t\tsetErrorState(ParseErrorState.NUMERIC_VALUE_ILLEGAL_CHARACTER);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tval *= 10;\n\t\t\tval += bytes[i] - 48;\n\t\t\t\n\t\t\tif (val > Byte.MAX_VALUE && (!neg || val > -Byte.MIN_VALUE)) {\n\t\t\t\tsetErrorState(ParseErrorState.NUMERIC_VALUE_OVERFLOW_UNDERFLOW);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\treusable.setValue((byte) (neg ? -val : val));\n\t\treturn limit;\n\t}\n\t\n\t@Override\n\tpublic ByteValue createValue() {\n\t\treturn new ByteValue();\n\t}\n\n\t@Override\n\tpublic ByteValue getLastResult() {\n\t\treturn this.result;\n\t}\n}<fim_middle>// class below has no smell\n"}