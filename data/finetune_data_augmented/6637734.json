{"text": "<fim_prefix> * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npackage com.example.rps;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentActivity;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentTransaction;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport bolts.AppLinks;\nimport com.facebook.*;\nimport com.facebook.AccessToken;\nimport com.facebook.FacebookException;\nimport com.facebook.FacebookSdk;\nimport com.facebook.share.model.GameRequestContent;\nimport com.facebook.share.widget.GameRequestDialog;\nimport org.json.JSONObject;\nimport org.json.JSONException;\nimport static com.example.rps.RpsGameUtils.INVALID_CHOICE;\n<fim_suffix>public class MainActivity extends FragmentActivity {\n    private static final String TAG = \"MainActivity\";\n    private static final String INAPP_PURCHASE_DATA = \"INAPP_PURCHASE_DATA\";\n    static final int RPS = 0;\n    static final int SETTINGS = 1;\n    static final int CONTENT = 2;\n    static final int FRAGMENT_COUNT = CONTENT +1;\n    private Fragment[] fragments = new Fragment[FRAGMENT_COUNT];\n    private MenuItem settings;\n    private MenuItem challenge;\n    private MenuItem share;\n    private MenuItem message;\n    private boolean isResumed = false;\n    private boolean hasNativeLink = false;\n    private CallbackManager callbackManager;\n    private GameRequestDialog gameRequestDialog;\n    private AccessTokenTracker accessTokenTracker;\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);\n        FacebookSdk.setIsDebugEnabled(true);\n        super.onCreate(savedInstanceState);\n        accessTokenTracker = new AccessTokenTracker() {\n            @Override\n            protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken,\n                                                       AccessToken currentAccessToken) {\n                if (isResumed) {\n                    if (currentAccessToken == null) {\n                        showFragment(RPS, false);\n                    }\n                }\n            }\n        };\n        setContentView(R.layout.main);\n        FragmentManager fm = getSupportFragmentManager();\n        fragments[RPS] = fm.findFragmentById(R.id.rps_fragment);\n        fragments[SETTINGS] = fm.findFragmentById(R.id.settings_fragment);\n        fragments[CONTENT] = fm.findFragmentById(R.id.content_fragment);\n        FragmentTransaction transaction = fm.beginTransaction();\n        for(int i = 0; i < fragments.length; i++) {\n            transaction.hide(fragments[i]);\n        }\n        transaction.commit();\n        hasNativeLink = handleNativeLink();\n        gameRequestDialog = new GameRequestDialog(this);\n        callbackManager = CallbackManager.Factory.create();\n        gameRequestDialog.registerCallback(\n                callbackManager,\n                new FacebookCallback<GameRequestDialog.Result>() {\n                    @Override\n                    public void onCancel() {\n                        Log.d(TAG, \"Canceled\");\n                    }\n                    @Override\n                    public void onError(FacebookException error) {\n                        Log.d(TAG, String.format(\"Error: %s\", error.toString()));\n                    }\n                    @Override\n                    public void onSuccess(GameRequestDialog.Result result) {\n                        Log.d(TAG, \"Success!\");\n                        Log.d(TAG, \"Request id: \" + result.getRequestId());\n                        Log.d(TAG, \"Recipients:\");\n                        for (String recipient : result.getRequestRecipients()) {\n                            Log.d(TAG, recipient);\n                        }\n                    }\n                });\n    }\n    @Override\n    public void onResume() {\n        super.onResume();\n        isResumed = true;\n    }\n    @Override\n    public void onPause() {\n        super.onPause();\n        isResumed = false;\n    }\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        callbackManager.onActivityResult(requestCode, resultCode, data);\n        super.onActivityResult(requestCode, resultCode, data);\n        if (requestCode == RpsFragment.IN_APP_PURCHASE_RESULT) {\n            String purchaseData = data.getStringExtra(INAPP_PURCHASE_DATA);\n            if (resultCode == RESULT_OK) {\n                RpsFragment fragment = (RpsFragment) fragments[RPS];\n                try {\n                    JSONObject jo = new JSONObject(purchaseData);\n                    fragment.onInAppPurchaseSuccess(jo);\n                }\n                catch (JSONException e) {\n                    Log.e(TAG, \"In app purchase invalid json.\", e);\n                }\n            }\n        }\n    }\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        accessTokenTracker.stopTracking();\n    }\n    @Override\n    protected void onResumeFragments() {\n        super.onResumeFragments();\n        if (hasNativeLink) {\n            showFragment(CONTENT, false);\n            hasNativeLink = false;\n        } else {\n            showFragment(RPS, false);\n        }\n    }\n    @Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        // only add the menu when the selection fragment is showing\n        if (fragments[RPS].isVisible()) {\n            if (menu.size() == 0) {\n                share = menu.add(R.string.share_on_facebook);\n                message = menu.add(R.string.send_with_messenger);\n                challenge = menu.add(R.string.challenge_friends);\n                settings = menu.add(R.string.check_settings);\n            }\n            return true;\n        } else {\n            menu.clear();\n            settings = null;\n        }\n        return false;\n    }\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if (item.equals(settings)) {\n            showFragment(SETTINGS, true);\n            return true;\n        } else if (item.equals(challenge)) {\n            GameRequestContent newGameRequestContent = new GameRequestContent.Builder()\n                    .setTitle(getString(R.string.challenge_dialog_title))\n                    .setMessage(getString(R.string.challenge_dialog_message))\n                    .build();\n            gameRequestDialog.show(this, newGameRequestContent);\n            return true;\n        } else if (item.equals(share)) {\n            RpsFragment fragment = (RpsFragment) fragments[RPS];\n            fragment.shareUsingAutomaticDialog();\n            return true;\n        } else if (item.equals(message)) {\n            RpsFragment fragment = (RpsFragment) fragments[RPS];\n            fragment.shareUsingMessengerDialog();\n            return true;\n        }\n        return false;\n    }\n    private boolean handleNativeLink() {\n        if (!AccessToken.isCurrentAccessTokenActive()) {\n            AccessToken.createFromNativeLinkingIntent(getIntent(),\n                    FacebookSdk.getApplicationId(), new AccessToken.AccessTokenCreationCallback(){\n                        @Override\n                        public void onSuccess(AccessToken token) {\n                            AccessToken.setCurrentAccessToken(token);\n                        }\n                        @Override\n                        public void onError(FacebookException error) {\n                        }\n                    });\n        }\n        // See if we have a deep link in addition.\n        int appLinkGesture = getAppLinkGesture(getIntent());\n        if (appLinkGesture != INVALID_CHOICE) {\n            ContentFragment fragment = (ContentFragment) fragments[CONTENT];\n            fragment.setContentIndex(appLinkGesture);\n            return true;\n        }\n        return false;\n    }\n    private int getAppLinkGesture(Intent intent) {\n      Uri targetURI = AppLinks.getTargetUrlFromInboundIntent(this, intent);\n      if (targetURI == null) {\n        return INVALID_CHOICE;\n      }\n      String gesture = targetURI.getQueryParameter(\"gesture\");\n      if (gesture != null) {\n          if (gesture.equalsIgnoreCase(getString(R.string.rock))) {\n              return RpsGameUtils.ROCK;\n          } else if (gesture.equalsIgnoreCase(getString(R.string.paper))) {\n              return RpsGameUtils.PAPER;\n          } else if (gesture.equalsIgnoreCase(getString(R.string.scissors))) {\n              return RpsGameUtils.SCISSORS;\n          }\n      }\n      return INVALID_CHOICE;\n    }\n    void showFragment(int fragmentIndex, boolean addToBackStack) {\n        FragmentManager fm = getSupportFragmentManager();\n        FragmentTransaction transaction = fm.beginTransaction();\n        if (addToBackStack) {\n            transaction.addToBackStack(null);\n        } else {\n            int backStackSize = fm.getBackStackEntryCount();\n            for (int i = 0; i < backStackSize; i++) {\n                fm.popBackStack();\n            }\n        }\n        for (int i = 0; i < fragments.length; i++) {\n            if (i == fragmentIndex) {\n                transaction.show(fragments[i]);\n            } else {\n                transaction.hide(fragments[i]);\n            }\n        }\n        transaction.commit();\n    }\n}<fim_middle>// class below is blob\n"}