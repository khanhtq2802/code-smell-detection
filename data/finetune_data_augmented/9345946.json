{"text": "<fim_prefix>                        return nodeLocation;\n                    } else {\n                        return null;\n                    }\n                } else {\n                    return null;\n                }\n            }\n            /**\n             * Returns the relative location of the node\n             *\n             * @return the relative location of the node\n             */\n            protected Point getLocationInJTree() {\n                Rectangle r = tree.getPathBounds(path);\n                if (r != null) {\n                    return r.getLocation();\n                } else {\n                    return null;\n                }\n            }\n            public Point getLocation() {\n                Rectangle r = getBounds();\n                if (r != null) {\n                    return r.getLocation();\n                } else {\n                    return null;\n                }\n            }\n            public void setLocation(Point p) {\n            }\n            public Rectangle getBounds() {\n                Rectangle r = tree.getPathBounds(path);\n                Accessible parent = getAccessibleParent();\n                if (parent != null) {\n                    if (parent instanceof AccessibleJTreeNode) {\n                        Point parentLoc = ((AccessibleJTreeNode) parent).getLocationInJTree();\n                        if (parentLoc != null && r != null) {\n                            r.translate(-parentLoc.x, -parentLoc.y);\n                        } else {\n                            return null;        // not visible!\n                        }\n                    }\n                }\n                return r;\n            }\n            public void setBounds(Rectangle r) {\n                AccessibleContext ac = getCurrentAccessibleContext();\n                if (ac instanceof AccessibleComponent) {\n                    ((AccessibleComponent) ac).setBounds(r);\n                } else {\n                    Component c = getCurrentComponent();\n                    if (c != null) {\n                        c.setBounds(r);\n                    }\n                }\n            }\n            public Dimension getSize() {\n                return getBounds().getSize();\n            }\n            public void setSize (Dimension d) {\n                AccessibleContext ac = getCurrentAccessibleContext();\n                if (ac instanceof AccessibleComponent) {\n                    ((AccessibleComponent) ac).setSize(d);\n                } else {\n                    Component c = getCurrentComponent();\n                    if (c != null) {\n                        c.setSize(d);\n                    }\n                }\n            }\n            /**\n             * Returns the <code>Accessible</code> child, if one exists,\n             * contained at the local coordinate <code>Point</code>.\n             * Otherwise returns <code>null</code>.\n             *\n             * @param p point in local coordinates of this\n             *    <code>Accessible</code>\n             * @return the <code>Accessible</code>, if it exists,\n             *    at the specified location; else <code>null</code>\n             */\n            public Accessible getAccessibleAt(Point p) {\n                AccessibleContext ac = getCurrentAccessibleContext();\n                if (ac instanceof AccessibleComponent) {\n                    return ((AccessibleComponent) ac).getAccessibleAt(p);\n                } else {\n                    return null;\n                }\n            }\n            @SuppressWarnings(\"deprecation\")\n            public boolean isFocusTraversable() {\n                AccessibleContext ac = getCurrentAccessibleContext();\n                if (ac instanceof AccessibleComponent) {\n                    return ((AccessibleComponent) ac).isFocusTraversable();\n                } else {\n                    Component c = getCurrentComponent();\n                    if (c != null) {\n                        return c.isFocusTraversable();\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            public void requestFocus() {\n                AccessibleContext ac = getCurrentAccessibleContext();\n                if (ac instanceof AccessibleComponent) {\n                    ((AccessibleComponent) ac).requestFocus();\n                } else {\n                    Component c = getCurrentComponent();\n                    if (c != null) {\n                        c.requestFocus();\n                    }\n                }\n            }\n            public void addFocusListener(FocusListener l) {\n                AccessibleContext ac = getCurrentAccessibleContext();\n                if (ac instanceof AccessibleComponent) {\n                    ((AccessibleComponent) ac).addFocusListener(l);\n                } else {\n                    Component c = getCurrentComponent();\n                    if (c != null) {\n                        c.addFocusListener(l);\n                    }\n                }\n            }\n            public void removeFocusListener(FocusListener l) {\n                AccessibleContext ac = getCurrentAccessibleContext();\n                if (ac instanceof AccessibleComponent) {\n                    ((AccessibleComponent) ac).removeFocusListener(l);\n                } else {\n                    Component c = getCurrentComponent();\n                    if (c != null) {\n                        c.removeFocusListener(l);\n                    }\n                }\n            }\n        // AccessibleSelection methods\n            /**\n             * Returns the number of items currently selected.\n             * If no items are selected, the return value will be 0.\n             *\n             * @return the number of items currently selected.\n             */\n            public int getAccessibleSelectionCount() {\n                int count = 0;\n                int childCount = getAccessibleChildrenCount();\n                for (int i = 0; i < childCount; i++) {\n                    TreePath childPath = getChildTreePath(i);\n                    if (tree.isPathSelected(childPath)) {\n                       count++;\n                    }\n                }\n                return count;\n            }\n            /**\n             * Returns an Accessible representing the specified selected item\n             * in the object.  If there isn't a selection, or there are\n             * fewer items selected than the integer passed in, the return\n             * value will be null.\n             *\n             * @param i the zero-based index of selected items\n             * @return an Accessible containing the selected item\n             */\n            public Accessible getAccessibleSelection(int i) {\n                int childCount = getAccessibleChildrenCount();\n                if (i < 0 || i >= childCount) {\n                    return null;        // out of range\n                }\n                int count = 0;\n                for (int j = 0; j < childCount && i >= count; j++) {\n                    TreePath childPath = getChildTreePath(j);\n                    if (tree.isPathSelected(childPath)) {\n                        if (count == i) {\n                            return new AccessibleJTreeNode(tree, childPath, this);\n                        } else {\n                            count++;\n                        }\n                    }\n                }\n                return null;\n            }\n            /**\n             * Returns true if the current child of this object is selected.\n             *\n             * @param i the zero-based index of the child in this Accessible\n             * object.\n             * @see AccessibleContext#getAccessibleChild\n             */\n            public boolean isAccessibleChildSelected(int i) {\n                int childCount = getAccessibleChildrenCount();\n                if (i < 0 || i >= childCount) {\n                    return false;       // out of range\n                } else {\n                    TreePath childPath = getChildTreePath(i);\n                    return tree.isPathSelected(childPath);\n                }\n            }\n            /**\n             * Adds the specified selected item in the object to the object's\n             * selection.  If the object supports multiple selections,\n             * the specified item is added to any existing selection, otherwise\n             * it replaces any existing selection in the object.  If the\n             * specified item is already selected, this method has no effect.\n             *\n             * @param i the zero-based index of selectable items\n             */\n            public void addAccessibleSelection(int i) {\n               TreeModel model = JTree.this.getModel();\n               if (model != null) {\n                   if (i >= 0 && i < getAccessibleChildrenCount()) {\n                       TreePath path = getChildTreePath(i);\n                       JTree.this.addSelectionPath(path);\n                    }\n                }\n            }\n            /**\n             * Removes the specified selected item in the object from the\n             * object's\n             * selection.  If the specified item isn't currently selected, this\n             * method has no effect.\n             *\n             * @param i the zero-based index of selectable items\n             */\n            public void removeAccessibleSelection(int i) {\n               TreeModel model = JTree.this.getModel();\n               if (model != null) {\n                   if (i >= 0 && i < getAccessibleChildrenCount()) {\n                       TreePath path = getChildTreePath(i);\n                       JTree.this.removeSelectionPath(path);\n                    }\n                }\n            }\n            /**\n             * Clears the selection in the object, so that nothing in the\n             * object is selected.\n             */\n            public void clearAccessibleSelection() {\n                int childCount = getAccessibleChildrenCount();\n                for (int i = 0; i < childCount; i++) {\n                    removeAccessibleSelection(i);\n                }\n            }\n            /**\n             * Causes every selected item in the object to be selected\n             * if the object supports multiple selections.\n             */\n<fim_suffix>            public void selectAllAccessibleSelection() {\n               TreeModel model = JTree.this.getModel();\n               if (model != null) {\n                   int childCount = getAccessibleChildrenCount();\n                   TreePath path;\n                   for (int i = 0; i < childCount; i++) {\n                       path = getChildTreePath(i);\n                       JTree.this.addSelectionPath(path);\n                   }\n                }\n            }<fim_middle>// function below has no smell\n"}