{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.hbase.client;\n\nimport static org.apache.hadoop.hbase.client.ConnectionUtils.retries2Attempts;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.yetus.audience.InterfaceAudience;\n\n/**\n * For creating {@link AsyncBufferedMutator}.\n */\n<fim_suffix>@InterfaceAudience.Public\npublic interface AsyncBufferedMutatorBuilder {\n\n  /**\n   * Set timeout for the background flush operation.\n   */\n  AsyncBufferedMutatorBuilder setOperationTimeout(long timeout, TimeUnit unit);\n\n  /**\n   * Set timeout for each rpc request when doing background flush.\n   */\n  AsyncBufferedMutatorBuilder setRpcTimeout(long timeout, TimeUnit unit);\n\n  /**\n   * Set the base pause time for retrying. We use an exponential policy to generate sleep time when\n   * retrying.\n   */\n  AsyncBufferedMutatorBuilder setRetryPause(long pause, TimeUnit unit);\n\n  /**\n   * Set the periodical flush interval. If the data in the buffer has not been flush for a long\n   * time, i.e, reach this timeout limit, we will flush it automatically.\n   * <p/>\n   * Notice that, set the timeout to 0 or a negative value means disable periodical flush, not\n   * 'flush immediately'. If you want to flush immediately then you should not use this class, as it\n   * is designed to be 'buffered'.\n   */\n  default AsyncBufferedMutatorBuilder setWriteBufferPeriodicFlush(long timeout, TimeUnit unit) {\n    throw new UnsupportedOperationException(\"Not implemented\");\n  }\n\n  /**\n   * Disable the periodical flush, i.e, set the timeout to 0.\n   */\n  default AsyncBufferedMutatorBuilder disableWriteBufferPeriodicFlush() {\n    return setWriteBufferPeriodicFlush(0, TimeUnit.NANOSECONDS);\n  }\n\n  /**\n   * Set the max retry times for an operation. Usually it is the max attempt times minus 1.\n   * <p>\n   * Operation timeout and max attempt times(or max retry times) are both limitations for retrying,\n   * we will stop retrying when we reach any of the limitations.\n   * @see #setMaxAttempts(int)\n   * @see #setOperationTimeout(long, TimeUnit)\n   */\n  default AsyncBufferedMutatorBuilder setMaxRetries(int maxRetries) {\n    return setMaxAttempts(retries2Attempts(maxRetries));\n  }\n\n  /**\n   * Set the max attempt times for an operation. Usually it is the max retry times plus 1. Operation\n   * timeout and max attempt times(or max retry times) are both limitations for retrying, we will\n   * stop retrying when we reach any of the limitations.\n   * @see #setMaxRetries(int)\n   * @see #setOperationTimeout(long, TimeUnit)\n   */\n  AsyncBufferedMutatorBuilder setMaxAttempts(int maxAttempts);\n\n  /**\n   * Set the number of retries that are allowed before we start to log.\n   */\n  AsyncBufferedMutatorBuilder setStartLogErrorsCnt(int startLogErrorsCnt);\n\n  /**\n   * Override the write buffer size specified by the provided {@link AsyncConnection}'s\n   * {@link org.apache.hadoop.conf.Configuration} instance, via the configuration key\n   * {@code hbase.client.write.buffer}.\n   */\n  AsyncBufferedMutatorBuilder setWriteBufferSize(long writeBufferSize);\n\n  /**\n   * Override the maximum key-value size specified by the provided {@link AsyncConnection}'s\n   * {@link org.apache.hadoop.conf.Configuration} instance, via the configuration key\n   * {@code hbase.client.keyvalue.maxsize}.\n   */\n  AsyncBufferedMutatorBuilder setMaxKeyValueSize(int maxKeyValueSize);\n\n  /**\n   * Create the {@link AsyncBufferedMutator} instance.\n   */\n  AsyncBufferedMutator build();\n}<fim_middle>// class below has no smell\n"}