{"text": "<fim_prefix>// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\npackage org.apache.cloudstack.api.command.user.template;\n\nimport com.cloud.dc.DataCenter;\nimport org.apache.log4j.Logger;\n\nimport org.apache.cloudstack.api.APICommand;\nimport org.apache.cloudstack.api.ApiCommandJobType;\nimport org.apache.cloudstack.api.ApiConstants;\nimport org.apache.cloudstack.api.ApiErrorCode;\nimport org.apache.cloudstack.api.BaseAsyncCmd;\nimport org.apache.cloudstack.api.Parameter;\nimport org.apache.cloudstack.api.ServerApiException;\nimport org.apache.cloudstack.api.response.ExtractResponse;\nimport org.apache.cloudstack.api.response.TemplateResponse;\nimport org.apache.cloudstack.api.response.ZoneResponse;\nimport org.apache.cloudstack.context.CallContext;\n\nimport com.cloud.event.EventTypes;\nimport com.cloud.exception.InternalErrorException;\nimport com.cloud.template.VirtualMachineTemplate;\nimport com.cloud.user.Account;\n\n<fim_suffix>@APICommand(name = \"extractTemplate\", description = \"Extracts a template\", responseObject = ExtractResponse.class,\n        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)\npublic class ExtractTemplateCmd extends BaseAsyncCmd {\n    public static final Logger s_logger = Logger.getLogger(ExtractTemplateCmd.class.getName());\n\n    private static final String s_name = \"extracttemplateresponse\";\n\n    /////////////////////////////////////////////////////\n    //////////////// API parameters /////////////////////\n    /////////////////////////////////////////////////////\n\n    @Parameter(name = ApiConstants.ID, type = CommandType.UUID, entityType = TemplateResponse.class, required = true, description = \"the ID of the template\")\n    private Long id;\n\n    @Parameter(name = ApiConstants.URL, type = CommandType.STRING, required = false, length = 2048, description = \"the url to which the ISO would be extracted\")\n    private String url;\n\n    @Parameter(name = ApiConstants.ZONE_ID,\n               type = CommandType.UUID,\n               entityType = ZoneResponse.class,\n               required = false,\n               description = \"the ID of the zone where the ISO is originally located\")\n    private Long zoneId;\n\n    @Parameter(name = ApiConstants.MODE, type = CommandType.STRING, required = true, description = \"the mode of extraction - HTTP_DOWNLOAD or FTP_UPLOAD\")\n    private String mode;\n\n    /////////////////////////////////////////////////////\n    /////////////////// Accessors ///////////////////////\n    /////////////////////////////////////////////////////\n\n    public Long getId() {\n        return id;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public Long getZoneId() {\n        return zoneId;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n    /////////////////////////////////////////////////////\n    /////////////// API Implementation///////////////////\n    /////////////////////////////////////////////////////\n\n    @Override\n    public String getCommandName() {\n        return s_name;\n    }\n\n    public static String getStaticName() {\n        return s_name;\n    }\n\n    @Override\n    public long getEntityOwnerId() {\n        VirtualMachineTemplate template = _entityMgr.findById(VirtualMachineTemplate.class, getId());\n        if (template != null) {\n            return template.getAccountId();\n        }\n\n        // invalid id, parent this command to SYSTEM so ERROR events are tracked\n        return Account.ACCOUNT_ID_SYSTEM;\n    }\n\n    @Override\n    public String getEventType() {\n        return EventTypes.EVENT_TEMPLATE_EXTRACT;\n    }\n\n    @Override\n    public String getEventDescription() {\n     return \"extracting template: \" + this._uuidMgr.getUuid(VirtualMachineTemplate.class, getId()) + ((getZoneId() != null) ? \" from zone: \" + this._uuidMgr.getUuid(DataCenter.class, getZoneId()) : \"\");\n    }\n\n    @Override\n    public ApiCommandJobType getInstanceType() {\n        return ApiCommandJobType.Template;\n    }\n\n    @Override\n    public Long getInstanceId() {\n        return getId();\n    }\n\n    @Override\n    public void execute() {\n        try {\n            CallContext.current().setEventDetails(getEventDescription());\n            String uploadUrl = _templateService.extract(this);\n            if (uploadUrl != null) {\n                ExtractResponse response = _responseGenerator.createExtractResponse(id, zoneId, getEntityOwnerId(), mode, uploadUrl);\n                response.setResponseName(getCommandName());\n                this.setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to extract template\");\n            }\n        } catch (InternalErrorException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        }\n    }\n}<fim_middle>// class below is blob and data class\n"}