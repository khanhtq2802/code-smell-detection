{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.phoenix.optimize;\n\nimport java.util.Objects;\n\n/**\n * Optimizer cost in terms of CPU, memory, and I/O usage, the unit of which is now the\n * number of bytes processed.\n *\n */\npublic class Cost implements Comparable<Cost> {\n    /** The unknown cost. */\n    public static Cost UNKNOWN = new Cost(Double.NaN, Double.NaN, Double.NaN) {\n        @Override\n        public String toString() {\n            return \"{unknown}\";\n        }\n    };\n\n    /** The zero cost. */\n    public static Cost ZERO = new Cost(0, 0, 0) {\n        @Override\n        public String toString() {\n            return \"{zero}\";\n        }        \n    };\n\n    private final double cpu;\n    private final double memory;\n    private final double io;\n\n    public Cost(double cpu, double memory, double io) {\n        this.cpu = cpu;\n        this.memory = memory;\n        this.io = io;\n    }\n\n    public double getCpu() {\n        return cpu;\n    }\n\n    public double getMemory() {\n        return memory;\n    }\n\n    public double getIo() {\n        return io;\n    }\n\n    public boolean isUnknown() {\n        return this == UNKNOWN;\n    }\n\n    public Cost plus(Cost other) {\n        if (isUnknown() || other.isUnknown()) {\n            return UNKNOWN;\n        }\n\n        return new Cost(\n                this.cpu + other.cpu,\n                this.memory + other.memory,\n                this.io + other.io);\n    }\n\n    public Cost multiplyBy(double factor) {\n        if (isUnknown()) {\n            return UNKNOWN;\n        }\n\n        return new Cost(\n                this.cpu * factor,\n                this.memory * factor,\n                this.io * factor);\n    }\n\n    // TODO right now for simplicity, we choose to ignore CPU and memory costs. We may\n    // add those into account as our cost model mature.\n<fim_suffix>    @Override\n    public int compareTo(Cost other) {\n        if (isUnknown() && other.isUnknown()) {\n            return 0;\n        } else if (isUnknown() && !other.isUnknown()) {\n            return 1;\n        } else if (!isUnknown() && other.isUnknown()) {\n            return -1;\n        }\n\n        double d = this.io - other.io;\n        return d == 0 ? 0 : (d > 0 ? 1 : -1);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        return this == obj\n                || (obj instanceof Cost && this.compareTo((Cost) obj) == 0);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(cpu, memory, io);\n    }\n\n    @Override\n    public String toString() {\n        return \"{cpu: \" + cpu + \", memory: \" + memory + \", io: \" + io + \"}\";\n    }\n}<fim_middle>// function below has no smell\n"}