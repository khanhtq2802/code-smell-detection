{"text": "<fim_prefix>    if (this_present_cellVisibility || that_present_cellVisibility) {\n      if (!(this_present_cellVisibility && that_present_cellVisibility))\n        return false;\n      if (!this.cellVisibility.equals(that.cellVisibility))\n        return false;\n    }\n    boolean this_present_returnResults = true && this.isSetReturnResults();\n    boolean that_present_returnResults = true && that.isSetReturnResults();\n    if (this_present_returnResults || that_present_returnResults) {\n      if (!(this_present_returnResults && that_present_returnResults))\n        return false;\n      if (this.returnResults != that.returnResults)\n        return false;\n    }\n    return true;\n  }\n  @Override\n  public int hashCode() {\n    int hashCode = 1;\n    hashCode = hashCode * 8191 + ((isSetRow()) ? 131071 : 524287);\n    if (isSetRow())\n      hashCode = hashCode * 8191 + row.hashCode();\n    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);\n    if (isSetColumns())\n      hashCode = hashCode * 8191 + columns.hashCode();\n    hashCode = hashCode * 8191 + ((isSetAttributes()) ? 131071 : 524287);\n    if (isSetAttributes())\n      hashCode = hashCode * 8191 + attributes.hashCode();\n    hashCode = hashCode * 8191 + ((isSetDurability()) ? 131071 : 524287);\n    if (isSetDurability())\n      hashCode = hashCode * 8191 + durability.getValue();\n    hashCode = hashCode * 8191 + ((isSetCellVisibility()) ? 131071 : 524287);\n    if (isSetCellVisibility())\n      hashCode = hashCode * 8191 + cellVisibility.hashCode();\n    hashCode = hashCode * 8191 + ((isSetReturnResults()) ? 131071 : 524287);\n    if (isSetReturnResults())\n      hashCode = hashCode * 8191 + ((returnResults) ? 131071 : 524287);\n    return hashCode;\n  }\n  @Override\n  public int compareTo(TAppend other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    lastComparison = java.lang.Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetRow()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    lastComparison = java.lang.Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetColumns()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    lastComparison = java.lang.Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetAttributes()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    lastComparison = java.lang.Boolean.valueOf(isSetDurability()).compareTo(other.isSetDurability());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetDurability()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, other.durability);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    lastComparison = java.lang.Boolean.valueOf(isSetCellVisibility()).compareTo(other.isSetCellVisibility());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetCellVisibility()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cellVisibility, other.cellVisibility);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    lastComparison = java.lang.Boolean.valueOf(isSetReturnResults()).compareTo(other.isSetReturnResults());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetReturnResults()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnResults, other.returnResults);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }\n  @org.apache.thrift.annotation.Nullable\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    scheme(iprot).read(iprot, this);\n  }\n  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n    scheme(oprot).write(oprot, this);\n  }\n  @Override\n  public java.lang.String toString() {\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(\"TAppend(\");\n    boolean first = true;\n    sb.append(\"row:\");\n    if (this.row == null) {\n      sb.append(\"null\");\n    } else {\n      org.apache.thrift.TBaseHelper.toString(this.row, sb);\n    }\n    first = false;\n    if (!first) sb.append(\", \");\n    sb.append(\"columns:\");\n    if (this.columns == null) {\n      sb.append(\"null\");\n    } else {\n      sb.append(this.columns);\n    }\n    first = false;\n    if (isSetAttributes()) {\n      if (!first) sb.append(\", \");\n      sb.append(\"attributes:\");\n      if (this.attributes == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.attributes);\n      }\n      first = false;\n    }\n    if (isSetDurability()) {\n      if (!first) sb.append(\", \");\n      sb.append(\"durability:\");\n      if (this.durability == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.durability);\n      }\n      first = false;\n    }\n    if (isSetCellVisibility()) {\n      if (!first) sb.append(\", \");\n      sb.append(\"cellVisibility:\");\n      if (this.cellVisibility == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.cellVisibility);\n      }\n      first = false;\n    }\n    if (isSetReturnResults()) {\n      if (!first) sb.append(\", \");\n      sb.append(\"returnResults:\");\n      sb.append(this.returnResults);\n      first = false;\n    }\n    sb.append(\")\");\n    return sb.toString();\n  }\n  public void validate() throws org.apache.thrift.TException {\n    // check for required fields\n    if (row == null) {\n      throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'row' was not present! Struct: \" + toString());\n    }\n    if (columns == null) {\n      throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'columns' was not present! Struct: \" + toString());\n    }\n    // check for sub-struct validity\n    if (cellVisibility != null) {\n      cellVisibility.validate();\n    }\n  }\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    try {\n      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {\n    try {\n      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.\n      __isset_bitfield = 0;\n      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n<fim_suffix>  private static class TAppendStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n    public TAppendStandardScheme getScheme() {\n      return new TAppendStandardScheme();\n    }\n  }<fim_middle>// class below has no smell\n"}