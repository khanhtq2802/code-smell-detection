{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.wicket.ajax.markup.html.form;\n\nimport org.apache.wicket.Component;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\nimport org.apache.wicket.ajax.form.AjaxFormSubmitBehavior;\nimport org.apache.wicket.markup.html.form.Button;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.model.IModel;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * A button that submits the form via Ajax. <br>\n * Note that an HTML type attribute of \"submit\" is automatically changed to \"button\"- Use\n * {@link AjaxFallbackButton} if you want to support non-Ajax form submits too.\n * \n * @since 1.3\n * \n * @author Igor Vaynberg (ivaynberg)\n */\n<fim_suffix>public abstract class AjaxButton extends Button\n{\n\tprivate static final long serialVersionUID = 1L;\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(AjaxButton.class);\n\n\tprivate final Form<?> form;\n\n\t/**\n\t * Construct.\n\t * \n\t * @param id\n\t */\n\tpublic AjaxButton(String id)\n\t{\n\t\tthis(id, null, null);\n\t}\n\n\t/**\n\t * \n\t * Construct.\n\t * \n\t * @param id\n\t * @param model\n\t *            model used to set <code>value</code> markup attribute\n\t */\n\tpublic AjaxButton(String id, IModel<String> model)\n\t{\n\t\tthis(id, model, null);\n\t}\n\n\t/**\n\t * \n\t * Construct.\n\t * \n\t * @param id\n\t * @param form\n\t */\n\tpublic AjaxButton(String id, Form<?> form)\n\t{\n\t\tthis(id, null, form);\n\t}\n\n\n\t/**\n\t * Construct.\n\t * \n\t * @param id\n\t * @param model\n\t *            model used to set <code>value</code> markup attribute\n\t * @param form\n\t */\n\tpublic AjaxButton(String id, IModel<String> model, final Form<?> form)\n\t{\n\t\tsuper(id, model);\n\t\tthis.form = form;\n\t}\n\n\t@Override\n\tprotected void onInitialize()\n\t{\n\t\tsuper.onInitialize();\n\n\t\tadd(newAjaxFormSubmitBehavior(\"click\"));\n\t}\n\n\tprotected AjaxFormSubmitBehavior newAjaxFormSubmitBehavior(String event)\n\t{\n\t\treturn new AjaxFormSubmitBehavior(form, event)\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tprotected void onSubmit(AjaxRequestTarget target)\n\t\t\t{\n\t\t\t\tAjaxButton.this.onSubmit(target);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void onAfterSubmit(AjaxRequestTarget target)\n\t\t\t{\n\t\t\t\tAjaxButton.this.onAfterSubmit(target);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void onError(AjaxRequestTarget target)\n\t\t\t{\n\t\t\t\tAjaxButton.this.onError(target);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes)\n\t\t\t{\n\t\t\t\tsuper.updateAjaxAttributes(attributes);\n\n\t\t\t\t// do not allow normal form submit to happen\n\t\t\t\tattributes.setPreventDefault(true);\n\n\t\t\t\tAjaxButton.this.updateAjaxAttributes(attributes);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean getDefaultProcessing()\n\t\t\t{\n\t\t\t\treturn AjaxButton.this.getDefaultFormProcessing();\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean getStatelessHint(Component component)\n\t\t\t{\n\t\t\t\treturn AjaxButton.this.getStatelessHint();\n\t\t\t}\n\t\t};\n\t}\n\n\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes)\n\t{\n\t}\n\n\t/**\n\t * Returns the form if it was set in constructor, otherwise returns the form nearest in parent\n\t * hierarchy.\n\t * \n\t * @see org.apache.wicket.markup.html.form.FormComponent#getForm()\n\t */\n\t@Override\n\tpublic Form<?> getForm()\n\t{\n\t\tif (form != null)\n\t\t{\n\t\t\treturn form;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn super.getForm();\n\t\t}\n\t}\n\n\t/**\n\t * This method is never called.\n\t * \n\t * @see #onSubmit(AjaxRequestTarget)\n\t */\n\t@Override\n\tpublic final void onSubmit()\n\t{\n\t\tlogger.warn(\"unexpected invocation of #onSubmit() on {}\", this);\n\t}\n\n\t@Override\n\tpublic final void onAfterSubmit()\n\t{\n\t\tlogger.warn(\"unexpected invocation of #onAfterSubmit() on {}\", this);\n\t}\n\n\t/**\n\t * This method is never called.\n\t * \n\t * @see #onError(AjaxRequestTarget)\n\t */\n\t@Override\n\tpublic final void onError()\n\t{\n\t\tlogger.warn(\"unexpected invocation of #onError() on {}\", this);\n\t}\n\n\t/**\n\t * Listener method invoked on form submit with no errors, before {@link Form#onSubmit()}.\n\t * \n\t * @param target\n\t */\n\tprotected void onSubmit(AjaxRequestTarget target)\n\t{\n\t}\n\n\t/**\n\t * Listener method invoked on form submit with no errors, after {@link Form#onSubmit()}.\n\t *\n\t * @param target\n\t */\n\tprotected void onAfterSubmit(AjaxRequestTarget target)\n\t{\n\t}\n\n\t/**\n\t * Listener method invoked on form submit with errors\n\t *\n\t * @param target\n\t */\n\tprotected void onError(AjaxRequestTarget target)\n\t{\n\t}\n\n\t@Override\n\tprotected boolean getStatelessHint()\n\t{\n\t\treturn false;\n\t}\n}<fim_middle>// class below has no smell\n"}