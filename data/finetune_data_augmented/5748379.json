{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.tajo.plan.util;\n\nimport org.apache.tajo.algebra.BinaryOperator;\nimport org.apache.tajo.algebra.Expr;\nimport org.apache.tajo.algebra.OpType;\nimport org.apache.tajo.algebra.UnaryOperator;\nimport org.apache.tajo.exception.TajoException;\nimport org.apache.tajo.exception.TajoInternalError;\nimport org.apache.tajo.plan.visitor.SimpleAlgebraVisitor;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.Stack;\n\npublic class ExprFinder extends SimpleAlgebraVisitor<ExprFinder.Context, Object> {\n\n  static class Context<T> {\n    List<T> set = new ArrayList<>();\n    OpType targetType;\n\n    Context(OpType type) {\n      this.targetType = type;\n    }\n  }\n\n  public static <T extends Expr> Set<T> finds(Expr expr, OpType type) {\n    return new HashSet<>(findsInOrder(expr, type));\n  }\n\n  public static <T extends Expr> List<T> findsInOrder(Expr expr, OpType type) {\n    Context<T> context = new Context<>(type);\n    ExprFinder finder = new ExprFinder();\n    try {\n      finder.visit(context, new Stack<>(), expr);\n    } catch (TajoException e) {\n      throw new TajoInternalError(e);\n    }\n    return context.set;\n  }\n\n<fim_suffix>  public Object visit(Context ctx, Stack<Expr> stack, Expr expr) throws TajoException {\n    if (expr instanceof UnaryOperator) {\n      preHook(ctx, stack, expr);\n      visitUnaryOperator(ctx, stack, (UnaryOperator) expr);\n      postHook(ctx, stack, expr, null);\n    } else if (expr instanceof BinaryOperator) {\n      preHook(ctx, stack, expr);\n      visitBinaryOperator(ctx, stack, (BinaryOperator) expr);\n      postHook(ctx, stack, expr, null);\n    } else {\n      super.visit(ctx, stack, expr);\n    }\n\n    if (expr != null && ctx.targetType == expr.getType()) {\n      ctx.set.add(expr);\n    }\n\n    return null;\n  }\n}<fim_middle>// function below has no smell\n"}