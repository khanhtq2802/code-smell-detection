{"text": "<fim_prefix>import org.apache.rocketmq.console.model.request.ResetOffsetRequest;\nimport org.apache.rocketmq.console.service.AbstractCommonService;\nimport org.apache.rocketmq.console.service.ConsumerService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\nimport static com.google.common.base.Throwables.propagate;\n@Service\npublic class ConsumerServiceImpl extends AbstractCommonService implements ConsumerService {\n    private Logger logger = LoggerFactory.getLogger(ConsumerServiceImpl.class);\n    @Override\n    @MultiMQAdminCmdMethod\n    public List<GroupConsumeInfo> queryGroupList() {\n        Set<String> consumerGroupSet = Sets.newHashSet();\n        try {\n            ClusterInfo clusterInfo = mqAdminExt.examineBrokerClusterInfo();\n            for (BrokerData brokerData : clusterInfo.getBrokerAddrTable().values()) {\n                SubscriptionGroupWrapper subscriptionGroupWrapper = mqAdminExt.getAllSubscriptionGroup(brokerData.selectBrokerAddr(), 3000L);\n                consumerGroupSet.addAll(subscriptionGroupWrapper.getSubscriptionGroupTable().keySet());\n            }\n        }\n        catch (Exception err) {\n            throw Throwables.propagate(err);\n        }\n        List<GroupConsumeInfo> groupConsumeInfoList = Lists.newArrayList();\n        for (String consumerGroup : consumerGroupSet) {\n            groupConsumeInfoList.add(queryGroup(consumerGroup));\n        }\n        Collections.sort(groupConsumeInfoList);\n        return groupConsumeInfoList;\n    }\n    @Override\n    @MultiMQAdminCmdMethod\n    public GroupConsumeInfo queryGroup(String consumerGroup) {\n        GroupConsumeInfo groupConsumeInfo = new GroupConsumeInfo();\n        try {\n            ConsumeStats consumeStats = null;\n            try {\n                consumeStats = mqAdminExt.examineConsumeStats(consumerGroup);\n            }\n            catch (Exception e) {\n                logger.warn(\"examineConsumeStats exception, \" + consumerGroup, e);\n            }\n            ConsumerConnection consumerConnection = null;\n            try {\n                consumerConnection = mqAdminExt.examineConsumerConnectionInfo(consumerGroup);\n            }\n            catch (Exception e) {\n                logger.warn(\"examineConsumerConnectionInfo exception, \" + consumerGroup, e);\n            }\n            groupConsumeInfo.setGroup(consumerGroup);\n            if (consumeStats != null) {\n                groupConsumeInfo.setConsumeTps((int)consumeStats.getConsumeTps());\n                groupConsumeInfo.setDiffTotal(consumeStats.computeTotalDiff());\n            }\n            if (consumerConnection != null) {\n                groupConsumeInfo.setCount(consumerConnection.getConnectionSet().size());\n                groupConsumeInfo.setMessageModel(consumerConnection.getMessageModel());\n                groupConsumeInfo.setConsumeType(consumerConnection.getConsumeType());\n                groupConsumeInfo.setVersion(MQVersion.getVersionDesc(consumerConnection.computeMinVersion()));\n            }\n        }\n        catch (Exception e) {\n            logger.warn(\"examineConsumeStats or examineConsumerConnectionInfo exception, \"\n                + consumerGroup, e);\n        }\n        return groupConsumeInfo;\n    }\n    @Override\n    public List<TopicConsumerInfo> queryConsumeStatsListByGroupName(String groupName) {\n        return queryConsumeStatsList(null, groupName);\n    }\n    @Override\n    @MultiMQAdminCmdMethod\n    public List<TopicConsumerInfo> queryConsumeStatsList(final String topic, String groupName) {\n        ConsumeStats consumeStats = null;\n        try {\n            consumeStats = mqAdminExt.examineConsumeStats(groupName, topic);\n        }\n        catch (Exception e) {\n            throw propagate(e);\n        }\n        List<MessageQueue> mqList = Lists.newArrayList(Iterables.filter(consumeStats.getOffsetTable().keySet(), new Predicate<MessageQueue>() {\n            @Override\n            public boolean apply(MessageQueue o) {\n                return StringUtils.isBlank(topic) || o.getTopic().equals(topic);\n            }\n        }));\n        Collections.sort(mqList);\n        List<TopicConsumerInfo> topicConsumerInfoList = Lists.newArrayList();\n        TopicConsumerInfo nowTopicConsumerInfo = null;\n        Map<MessageQueue, String> messageQueueClientMap = getClientConnection(groupName);\n        for (MessageQueue mq : mqList) {\n            if (nowTopicConsumerInfo == null || (!StringUtils.equals(mq.getTopic(), nowTopicConsumerInfo.getTopic()))) {\n                nowTopicConsumerInfo = new TopicConsumerInfo(mq.getTopic());\n                topicConsumerInfoList.add(nowTopicConsumerInfo);\n            }\n            QueueStatInfo queueStatInfo = QueueStatInfo.fromOffsetTableEntry(mq, consumeStats.getOffsetTable().get(mq));\n            queueStatInfo.setClientInfo(messageQueueClientMap.get(mq));\n            nowTopicConsumerInfo.appendQueueStatInfo(queueStatInfo);\n        }\n        return topicConsumerInfoList;\n    }\n    private Map<MessageQueue, String> getClientConnection(String groupName) {\n        Map<MessageQueue, String> results = Maps.newHashMap();\n        try {\n            ConsumerConnection consumerConnection = mqAdminExt.examineConsumerConnectionInfo(groupName);\n            for (Connection connection : consumerConnection.getConnectionSet()) {\n                String clinetId = connection.getClientId();\n                ConsumerRunningInfo consumerRunningInfo = mqAdminExt.getConsumerRunningInfo(groupName, clinetId, false);\n                for (MessageQueue messageQueue : consumerRunningInfo.getMqTable().keySet()) {\n//                    results.put(messageQueue, clinetId + \" \" + connection.getClientAddr());\n                    results.put(messageQueue, clinetId);\n                }\n            }\n        }\n        catch (Exception err) {\n            logger.error(\"op=getClientConnection_error\", err);\n        }\n        return results;\n    }\n    @Override\n    @MultiMQAdminCmdMethod\n    public Map<String /*groupName*/, TopicConsumerInfo> queryConsumeStatsListByTopicName(String topic) {\n        Map<String, TopicConsumerInfo> group2ConsumerInfoMap = Maps.newHashMap();\n        try {\n            GroupList groupList = mqAdminExt.queryTopicConsumeByWho(topic);\n            for (String group : groupList.getGroupList()) {\n                List<TopicConsumerInfo> topicConsumerInfoList = null;\n                try {\n                    topicConsumerInfoList = queryConsumeStatsList(topic, group);\n                }\n                catch (Exception ignore) {\n                }\n                group2ConsumerInfoMap.put(group, CollectionUtils.isEmpty(topicConsumerInfoList) ? new TopicConsumerInfo(topic) : topicConsumerInfoList.get(0));\n            }\n            return group2ConsumerInfoMap;\n        }\n        catch (Exception e) {\n            throw propagate(e);\n        }\n    }\n<fim_suffix>    @Override\n    @MultiMQAdminCmdMethod\n    public Map<String, ConsumerGroupRollBackStat> resetOffset(ResetOffsetRequest resetOffsetRequest) {\n        Map<String, ConsumerGroupRollBackStat> groupRollbackStats = Maps.newHashMap();\n        for (String consumerGroup : resetOffsetRequest.getConsumerGroupList()) {\n            try {\n                Map<MessageQueue, Long> rollbackStatsMap =\n                    mqAdminExt.resetOffsetByTimestamp(resetOffsetRequest.getTopic(), consumerGroup, resetOffsetRequest.getResetTime(), resetOffsetRequest.isForce());\n                ConsumerGroupRollBackStat consumerGroupRollBackStat = new ConsumerGroupRollBackStat(true);\n                List<RollbackStats> rollbackStatsList = consumerGroupRollBackStat.getRollbackStatsList();\n                for (Map.Entry<MessageQueue, Long> rollbackStatsEntty : rollbackStatsMap.entrySet()) {\n                    RollbackStats rollbackStats = new RollbackStats();\n                    rollbackStats.setRollbackOffset(rollbackStatsEntty.getValue());\n                    rollbackStats.setQueueId(rollbackStatsEntty.getKey().getQueueId());\n                    rollbackStats.setBrokerName(rollbackStatsEntty.getKey().getBrokerName());\n                    rollbackStatsList.add(rollbackStats);\n                }\n                groupRollbackStats.put(consumerGroup, consumerGroupRollBackStat);\n            }\n            catch (MQClientException e) {\n                if (ResponseCode.CONSUMER_NOT_ONLINE == e.getResponseCode()) {\n                    try {\n                        ConsumerGroupRollBackStat consumerGroupRollBackStat = new ConsumerGroupRollBackStat(true);\n                        List<RollbackStats> rollbackStatsList = mqAdminExt.resetOffsetByTimestampOld(consumerGroup, resetOffsetRequest.getTopic(), resetOffsetRequest.getResetTime(), true);\n                        consumerGroupRollBackStat.setRollbackStatsList(rollbackStatsList);\n                        groupRollbackStats.put(consumerGroup, consumerGroupRollBackStat);\n                        continue;\n                    }\n                    catch (Exception err) {\n                        logger.error(\"op=resetOffset_which_not_online_error\", err);\n                    }\n                }\n                else {\n                    logger.error(\"op=resetOffset_error\", e);\n                }\n                groupRollbackStats.put(consumerGroup, new ConsumerGroupRollBackStat(false, e.getMessage()));\n            }\n            catch (Exception e) {\n                logger.error(\"op=resetOffset_error\", e);\n                groupRollbackStats.put(consumerGroup, new ConsumerGroupRollBackStat(false, e.getMessage()));\n            }\n        }\n        return groupRollbackStats;\n    }<fim_middle>// function below is long method\n"}