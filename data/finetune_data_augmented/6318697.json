{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2017, 2019 Eurotech and/or its affiliates and others\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Eurotech - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.kapua.app.console.module.device.client.device.bundles;\nimport com.extjs.gxt.ui.client.Style.Scroll;\nimport com.extjs.gxt.ui.client.Style.SelectionMode;\nimport com.extjs.gxt.ui.client.data.BaseListLoader;\nimport com.extjs.gxt.ui.client.data.ListLoadResult;\nimport com.extjs.gxt.ui.client.data.LoadEvent;\nimport com.extjs.gxt.ui.client.data.RpcProxy;\nimport com.extjs.gxt.ui.client.event.ButtonEvent;\nimport com.extjs.gxt.ui.client.event.Listener;\nimport com.extjs.gxt.ui.client.event.MessageBoxEvent;\nimport com.extjs.gxt.ui.client.event.SelectionChangedEvent;\nimport com.extjs.gxt.ui.client.event.SelectionChangedListener;\nimport com.extjs.gxt.ui.client.event.SelectionListener;\nimport com.extjs.gxt.ui.client.store.ListStore;\nimport com.extjs.gxt.ui.client.widget.ContentPanel;\nimport com.extjs.gxt.ui.client.widget.Dialog;\nimport com.extjs.gxt.ui.client.widget.MessageBox;\nimport com.extjs.gxt.ui.client.widget.button.Button;\nimport com.extjs.gxt.ui.client.widget.grid.ColumnConfig;\nimport com.extjs.gxt.ui.client.widget.grid.ColumnModel;\nimport com.extjs.gxt.ui.client.widget.grid.Grid;\nimport com.extjs.gxt.ui.client.widget.grid.GridSelectionModel;\nimport com.extjs.gxt.ui.client.widget.grid.GridView;\nimport com.extjs.gxt.ui.client.widget.layout.FitLayout;\nimport com.extjs.gxt.ui.client.widget.toolbar.SeparatorToolItem;\nimport com.extjs.gxt.ui.client.widget.toolbar.ToolBar;\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.user.client.Element;\nimport com.google.gwt.user.client.rpc.AsyncCallback;\nimport org.eclipse.kapua.app.console.module.api.client.GwtKapuaException;\nimport org.eclipse.kapua.app.console.module.api.client.messages.ConsoleMessages;\nimport org.eclipse.kapua.app.console.module.api.client.resources.icons.IconSet;\nimport org.eclipse.kapua.app.console.module.api.client.resources.icons.KapuaIcon;\nimport org.eclipse.kapua.app.console.module.api.client.ui.button.RefreshButton;\nimport org.eclipse.kapua.app.console.module.api.client.ui.dialog.KapuaMessageBox;\nimport org.eclipse.kapua.app.console.module.api.client.ui.tab.KapuaTabItem;\nimport org.eclipse.kapua.app.console.module.api.client.util.ConsoleInfo;\nimport org.eclipse.kapua.app.console.module.api.client.util.FailureHandler;\nimport org.eclipse.kapua.app.console.module.api.client.util.KapuaLoadListener;\nimport org.eclipse.kapua.app.console.module.api.shared.model.GwtXSRFToken;\nimport org.eclipse.kapua.app.console.module.api.shared.model.session.GwtSession;\nimport org.eclipse.kapua.app.console.module.api.shared.service.GwtSecurityTokenService;\nimport org.eclipse.kapua.app.console.module.api.shared.service.GwtSecurityTokenServiceAsync;\nimport org.eclipse.kapua.app.console.module.device.client.device.DeviceView;\nimport org.eclipse.kapua.app.console.module.device.client.messages.ConsoleDeviceMessages;\nimport org.eclipse.kapua.app.console.module.device.shared.model.GwtDevice;\nimport org.eclipse.kapua.app.console.module.device.shared.model.device.management.bundles.GwtBundle;\nimport org.eclipse.kapua.app.console.module.device.shared.model.permission.DeviceManagementSessionPermission;\nimport org.eclipse.kapua.app.console.module.device.shared.service.GwtDeviceManagementService;\nimport org.eclipse.kapua.app.console.module.device.shared.service.GwtDeviceManagementServiceAsync;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class DeviceTabBundles extends KapuaTabItem<GwtDevice> {\n    private static final ConsoleMessages MSGS = GWT.create(ConsoleMessages.class);\n    private static final ConsoleDeviceMessages DEVICE_MSGS = GWT.create(ConsoleDeviceMessages.class);\n    private final GwtDeviceManagementServiceAsync gwtDeviceManagementService = GWT.create(GwtDeviceManagementService.class);\n    private final GwtSecurityTokenServiceAsync gwtXSRFService = GWT.create(GwtSecurityTokenService.class);\n    private DeviceView devicesView;\n    private boolean initialized;\n    private ToolBar toolBar;\n    private Button refreshButton;\n    private Button startButton;\n    private Button stopButton;\n    private Grid<GwtBundle> grid;\n    private ListStore<GwtBundle> store;\n    private BaseListLoader<ListLoadResult<GwtBundle>> loader;\n    protected boolean refreshProcess;\n    public DeviceTabBundles(GwtSession currentSession, DeviceView devicesView) {\n        super(currentSession, DEVICE_MSGS.tabBundles(), new KapuaIcon(IconSet.CUBES));\n        this.devicesView = devicesView;\n        initialized = false;\n        setEnabled(false);\n    }\n    @Override\n    public void setEntity(GwtDevice gwtDevice) {\n        super.setEntity(gwtDevice);\n        setEnabled(gwtDevice != null &&\n                gwtDevice.isOnline() &&\n                currentSession.hasPermission(DeviceManagementSessionPermission.read()) &&\n                (gwtDevice.hasApplication(GwtDevice.GwtDeviceApplication.APP_DEPLOY_V1) || (gwtDevice.hasApplication(GwtDevice.GwtDeviceApplication.APP_DEPLOY_V2))));\n        doRefresh();\n    }\n<fim_suffix>    @Override\n    protected void onRender(Element parent, int index) {\n        super.onRender(parent, index);\n        setLayout(new FitLayout());\n        setBorders(false);\n        // init components\n        initToolBar();\n        initGrid();\n        ContentPanel devicesBundlesPanel = new ContentPanel();\n        devicesBundlesPanel.setBorders(false);\n        devicesBundlesPanel.setBodyBorder(true);\n        devicesBundlesPanel.setHeaderVisible(false);\n        devicesBundlesPanel.setLayout(new FitLayout());\n        devicesBundlesPanel.setScrollMode(Scroll.AUTO);\n        devicesBundlesPanel.setTopComponent(toolBar);\n        devicesBundlesPanel.add(grid);\n        add(devicesBundlesPanel);\n        initialized = true;\n    }\n    private void initToolBar() {\n        toolBar = new ToolBar();\n        toolBar.setBorders(true);\n        //\n        // Refresh Button\n        refreshButton = new RefreshButton(new SelectionListener<ButtonEvent>() {\n            @Override\n            public void componentSelected(ButtonEvent ce) {\n                if (!refreshProcess) {\n                    refreshProcess = true;\n                    if (selectedEntity.isOnline()) {\n                        toolBar.disable();\n                        doRefresh();\n                        refreshProcess = false;\n                    } else {\n                        MessageBox.alert(MSGS.dialogAlerts(), DEVICE_MSGS.deviceOffline(),\n                                new Listener<MessageBoxEvent>() {\n                                    @Override\n                                    public void handleEvent(MessageBoxEvent be) {\n                                        grid.unmask();\n                                        refreshProcess = false;\n                                    }\n                                });\n                    }\n                }\n            }\n        });\n        refreshButton.setEnabled(false);\n        toolBar.add(refreshButton);\n        toolBar.add(new SeparatorToolItem());\n        final AsyncCallback<Void> callback = new AsyncCallback<Void>() {\n            @Override\n            public void onFailure(Throwable caught) {\n                FailureHandler.handle(caught);\n            }\n            @Override<fim_middle>// function below is feature envy\n"}