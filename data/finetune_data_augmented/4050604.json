{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.beam.fn.harness;\n\nimport com.google.auto.service.AutoService;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.beam.model.pipeline.v1.RunnerApi;\nimport org.apache.beam.model.pipeline.v1.RunnerApi.PTransform;\nimport org.apache.beam.model.pipeline.v1.RunnerApi.StandardPTransforms;\nimport org.apache.beam.runners.core.construction.BeamUrns;\nimport org.apache.beam.runners.core.construction.WindowingStrategyTranslation;\nimport org.apache.beam.sdk.function.ThrowingFunction;\nimport org.apache.beam.sdk.transforms.windowing.BoundedWindow;\nimport org.apache.beam.sdk.transforms.windowing.WindowFn;\nimport org.apache.beam.sdk.transforms.windowing.WindowFn.MergeContext;\nimport org.apache.beam.sdk.values.KV;\nimport org.apache.beam.vendor.guava.v20_0.com.google.common.collect.ImmutableMap;\nimport org.apache.beam.vendor.guava.v20_0.com.google.common.collect.Sets;\n\n/**\n * Merges windows using a {@link org.apache.beam.sdk.transforms.windowing.WindowFn}.\n *\n * <p>Window merging function:\n *\n * <ul>\n *   <li>Input: {@code KV<nonce, iterable<OriginalWindow>>}\n *   <li>Output: {@code KV<nonce, KV<iterable<UnmergedOriginalWindow>, iterable<KV<MergedWindow,\n *       iterable<ConsumedOriginalWindow>>>>}\n * </ul>\n *\n * <p>For each set of original windows, a list of all unmerged windows is output alongside a map of\n * merged window to set of consumed windows. All original windows must be contained in either the\n * unmerged original window set or one of the consumed original window sets. Each original window\n * can only be part of one output set. The nonce is used by a runner to associate each input with\n * its output. The nonce is represented as an opaque set of bytes.\n */\npublic abstract class WindowMergingFnRunner<T, W extends BoundedWindow> {\n  static final String URN = BeamUrns.getUrn(StandardPTransforms.Primitives.MERGE_WINDOWS);\n\n  /**\n   * A registrar which provides a factory to handle merging windows based upon the {@link WindowFn}.\n   */\n  @AutoService(PTransformRunnerFactory.Registrar.class)\n  public static class Registrar implements PTransformRunnerFactory.Registrar {\n\n    @Override\n    public Map<String, PTransformRunnerFactory> getPTransformRunnerFactories() {\n      return ImmutableMap.of(\n          URN,\n          MapFnRunners.forValueMapFnFactory(WindowMergingFnRunner::createMapFunctionForPTransform));\n    }\n  }\n\n  static <T, W extends BoundedWindow>\n      ThrowingFunction<KV<T, Iterable<W>>, KV<T, KV<Iterable<W>, Iterable<KV<W, Iterable<W>>>>>>\n          createMapFunctionForPTransform(String ptransformId, PTransform ptransform)\n              throws IOException {\n    RunnerApi.SdkFunctionSpec payload =\n        RunnerApi.SdkFunctionSpec.parseFrom(ptransform.getSpec().getPayload());\n\n    WindowFn<?, W> windowFn =\n        (WindowFn<?, W>) WindowingStrategyTranslation.windowFnFromProto(payload);\n    return WindowMergingFnRunner.<T, W>create(windowFn)::mergeWindows;\n  }\n\n  static <T, W extends BoundedWindow> WindowMergingFnRunner<T, W> create(WindowFn<?, W> windowFn) {\n    if (windowFn.isNonMerging()) {\n      return new NonMergingWindowFnRunner();\n    } else {\n      return new MergingViaWindowFnRunner(windowFn);\n    }\n  }\n\n  /**\n   * Returns the set of unmerged windows and a mapping from merged windows to sets of original\n   * windows.\n   */\n  abstract KV<T, KV<Iterable<W>, Iterable<KV<W, Iterable<W>>>>> mergeWindows(\n      KV<T, Iterable<W>> windowsToMerge) throws Exception;\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * An optimized version of window merging where the {@link WindowFn} does not do any window\n   * merging.\n   *\n   * <p>Note that this is likely to never be invoked and the identity mapping will be handled\n   * directly by runners. We have this here because runners may not perform this optimization.\n   */\n<fim_suffix>  private static class NonMergingWindowFnRunner<T, W extends BoundedWindow>\n      extends WindowMergingFnRunner<T, W> {\n    @Override\n    KV<T, KV<Iterable<W>, Iterable<KV<W, Iterable<W>>>>> mergeWindows(\n        KV<T, Iterable<W>> windowsToMerge) {\n      return KV.of(\n          windowsToMerge.getKey(), KV.of(windowsToMerge.getValue(), Collections.emptyList()));\n    }\n  }\n\n  /** An implementation which uses a {@link WindowFn} to merge windows. */\n  private static class MergingViaWindowFnRunner<T, W extends BoundedWindow>\n      extends WindowMergingFnRunner<T, W> {\n    private final WindowFn<T, W> windowFn;\n    private final WindowFn<?, W>.MergeContext mergeContext;\n    private Collection<W> currentWindows;\n    private List<KV<W, Collection<W>>> mergedWindows;\n\n    private MergingViaWindowFnRunner(WindowFn<T, W> windowFn) {\n      this.windowFn = windowFn;\n      this.mergedWindows = new ArrayList<>();\n      this.currentWindows = new ArrayList<>();\n      this.mergeContext =\n          windowFn.new MergeContext() {\n\n            @Override\n            public Collection<W> windows() {\n              return currentWindows;\n            }\n\n            @Override\n            public void merge(Collection<W> toBeMerged, W mergeResult) throws Exception {\n              mergedWindows.add(KV.of(mergeResult, toBeMerged));\n            }\n          };\n    }\n\n    @Override\n    KV<T, KV<Iterable<W>, Iterable<KV<W, Iterable<W>>>>> mergeWindows(\n        KV<T, Iterable<W>> windowsToMerge) throws Exception {\n      currentWindows = Sets.newHashSet(windowsToMerge.getValue());\n      windowFn.mergeWindows((MergeContext) mergeContext);\n      for (KV<W, Collection<W>> mergedWindow : mergedWindows) {\n        currentWindows.removeAll(mergedWindow.getValue());\n      }\n      return KV.of(windowsToMerge.getKey(), KV.of(currentWindows, (Iterable) mergedWindows));\n    }\n  }\n}<fim_middle>// class below has no smell\n"}