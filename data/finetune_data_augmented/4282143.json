{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.curator.framework.imps;\n\nimport com.google.common.collect.ImmutableList;\nimport org.apache.curator.framework.api.CuratorEvent;\nimport org.apache.curator.framework.api.CuratorEventType;\nimport org.apache.curator.framework.api.transaction.CuratorTransactionResult;\nimport org.apache.zookeeper.WatchedEvent;\nimport org.apache.zookeeper.data.ACL;\nimport org.apache.zookeeper.data.Stat;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass CuratorEventImpl implements CuratorEvent\n{\n    private final CuratorEventType type;\n    private final int resultCode;\n    private final String path;\n    private final String name;\n    private final List<String> children;\n    private final Object context;\n    private final Stat stat;\n    private final byte[] data;\n    private final WatchedEvent watchedEvent;\n    private final List<ACL> aclList;\n    private final List<CuratorTransactionResult> opResults;\n\n    @Override\n    public CuratorEventType getType()\n    {\n        return type;\n    }\n\n    @Override\n    public int getResultCode()\n    {\n        return resultCode;\n    }\n\n    @Override\n    public String getPath()\n    {\n        return path;\n    }\n\n    @Override\n    public Object getContext()\n    {\n        return context;\n    }\n\n    @Override\n    public Stat getStat()\n    {\n        return stat;\n    }\n\n    @Override\n    public byte[] getData()\n    {\n        return data;\n    }\n\n    @Override\n    public String getName()\n    {\n        return name;\n    }\n\n    @Override\n    public List<String> getChildren()\n    {\n        return children;\n    }\n\n    @Override\n    public WatchedEvent getWatchedEvent()\n    {\n        return watchedEvent;\n    }\n\n    @Override\n    public List<ACL> getACLList()\n    {\n        return aclList;\n    }\n\n    @Override\n    public List<CuratorTransactionResult> getOpResults()\n    {\n        return opResults;\n    }\n\n<fim_suffix>    @Override\n    public String toString()\n    {\n        return \"CuratorEventImpl{\" +\n            \"type=\" + type +\n            \", resultCode=\" + resultCode +\n            \", path='\" + path + '\\'' +\n            \", name='\" + name + '\\'' +\n            \", children=\" + children +\n            \", context=\" + context +\n            \", stat=\" + stat +\n            \", data=\" + Arrays.toString(data) +\n            \", watchedEvent=\" + watchedEvent +\n            \", aclList=\" + aclList +\n            \", opResults=\" + opResults +\n            '}';\n    }\n\n    CuratorEventImpl(CuratorFrameworkImpl client, CuratorEventType type, int resultCode, String path, String name, Object context, Stat stat, byte[] data, List<String> children, WatchedEvent watchedEvent, List<ACL> aclList, List<CuratorTransactionResult> opResults)\n    {\n        this.type = type;\n        this.resultCode = resultCode;\n        this.opResults = (opResults != null) ? ImmutableList.copyOf(opResults) : null;\n        this.path = client.unfixForNamespace(path);\n        this.name = name;\n        this.context = context;\n        this.stat = stat;\n        this.data = data;\n        this.children = children;\n        this.watchedEvent = (watchedEvent != null) ? new NamespaceWatchedEvent(client, watchedEvent) : null;\n        this.aclList = (aclList != null) ? ImmutableList.copyOf(aclList) : null;\n    }\n}<fim_middle>// function below has no smell\n"}