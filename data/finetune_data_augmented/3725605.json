{"text": "<fim_prefix>package com.alibaba.jvm.sandbox.core.util.matcher.structure;\n\nimport com.alibaba.jvm.sandbox.core.util.LazyGet;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nabstract class ModifierAccess implements Access {\n\n    private final int modifiers;\n\n    ModifierAccess(int modifiers) {\n        this.modifiers = modifiers;\n    }\n\n    @Override\n    public boolean isPublic() {\n        return Modifier.isPublic(modifiers);\n    }\n\n    @Override\n    public boolean isPrivate() {\n        return Modifier.isPrivate(modifiers);\n    }\n\n    @Override\n    public boolean isProtected() {\n        return Modifier.isProtected(modifiers);\n    }\n\n    @Override\n    public boolean isStatic() {\n        return Modifier.isStatic(modifiers);\n    }\n\n    @Override\n    public boolean isFinal() {\n        return Modifier.isFinal(modifiers);\n    }\n\n    @Override\n    public boolean isInterface() {\n        return Modifier.isInterface(modifiers);\n    }\n\n    @Override\n    public boolean isNative() {\n        return Modifier.isNative(modifiers);\n    }\n\n    @Override\n    public boolean isAbstract() {\n        return Modifier.isAbstract(modifiers);\n    }\n\n}\n\nclass AccessImplByJDKClass extends ModifierAccess {\n\n    private final Class<?> clazz;\n\n    AccessImplByJDKClass(Class<?> clazz) {\n        super(clazz.getModifiers());\n        this.clazz = clazz;\n    }\n\n    @Override\n    public boolean isEnum() {\n        return clazz.isEnum();\n    }\n\n    @Override\n    public boolean isAnnotation() {\n        return clazz.isAnnotation();\n    }\n\n}\n\nclass AccessImplByJDKBehavior extends ModifierAccess {\n\n    AccessImplByJDKBehavior(Method method) {\n        super(method.getModifiers());\n    }\n\n    AccessImplByJDKBehavior(Constructor constructor) {\n        super(constructor.getModifiers());\n    }\n\n    @Override\n    public boolean isEnum() {\n        return false;\n    }\n\n    @Override\n    public boolean isAnnotation() {\n        return false;\n    }\n}\n\n/**\n * \u7528JDK\u7684\u53cd\u5c04\u5b9e\u73b0\u7684\u7c7b\u7ed3\u6784\n */\n<fim_suffix>public class ClassStructureImplByJDK extends FamilyClassStructure {\n\n    private final Class<?> clazz;\n    private String javaClassName;\n\n    public ClassStructureImplByJDK(final Class<?> clazz) {\n        this.clazz = clazz;\n    }\n\n    private ClassStructure newInstance(final Class<?> clazz) {\n        if (null == clazz) {\n            return null;\n        }\n        return new ClassStructureImplByJDK(clazz);\n    }\n\n    private List<ClassStructure> newInstances(final Class[] classArray) {\n        final List<ClassStructure> classStructures = new ArrayList<ClassStructure>();\n        if (null != classArray) {\n            for (final Class<?> clazz : classArray) {\n                final ClassStructure classStructure = newInstance(clazz);\n                if (null != classStructure) {\n                    classStructures.add(classStructure);\n                }\n            }\n        }\n        return classStructures;\n    }\n\n    @Override\n    public String getJavaClassName() {\n        return null != javaClassName\n                ? javaClassName\n                : (javaClassName = getJavaClassName(clazz));\n    }\n\n    private String getJavaClassName(Class<?> clazz) {\n        if (clazz.isArray()) {\n            return getJavaClassName(clazz.getComponentType()) + \"[]\";\n        }\n        return clazz.getName();\n    }\n\n\n    @Override\n    public ClassLoader getClassLoader() {\n        return clazz.getClassLoader();\n    }\n\n    @Override\n    public ClassStructure getSuperClassStructure() {\n        // \u8fc7\u6ee4\u6389Object.class\n        return Object.class.equals(clazz.getSuperclass())\n                ? null\n                : newInstance(clazz.getSuperclass());\n    }\n\n    @Override\n    public List<ClassStructure> getInterfaceClassStructures() {\n        return newInstances(clazz.getInterfaces());\n    }\n\n    private Class[] getAnnotationTypeArray(final Annotation[] annotationArray) {\n        final Collection<Class> annotationTypes = new ArrayList<Class>();\n        for (final Annotation annotation : annotationArray) {\n            if (annotation.getClass().isAnnotation()) {\n                annotationTypes.add(annotation.getClass());\n            }\n            for (final Class annotationInterfaceClass : annotation.getClass().getInterfaces()) {\n                if (annotationInterfaceClass.isAnnotation()) {\n                    annotationTypes.add(annotationInterfaceClass);\n                }\n            }\n        }\n        return annotationTypes.toArray(new Class[0]);\n    }\n\n    private final LazyGet<List<ClassStructure>> annotationTypeClassStructuresLazyGet\n            = new LazyGet<List<ClassStructure>>() {\n        @Override\n        protected List<ClassStructure> initialValue() {\n            return Collections.unmodifiableList(newInstances(getAnnotationTypeArray(clazz.getDeclaredAnnotations())));\n        }\n    };\n\n    @Override\n    public List<ClassStructure> getAnnotationTypeClassStructures() {\n        return annotationTypeClassStructuresLazyGet.get();\n    }\n\n    private BehaviorStructure newBehaviorStructure(final Method method) {\n        return new BehaviorStructure(\n                new AccessImplByJDKBehavior(method),\n                method.getName(),\n                this,\n                newInstance(method.getReturnType()),\n                newInstances(method.getParameterTypes()),\n                newInstances(method.getExceptionTypes()),\n                newInstances(getAnnotationTypeArray(method.getDeclaredAnnotations()))\n        );\n    }\n\n    private BehaviorStructure newBehaviorStructure(final Constructor constructor) {\n        return new BehaviorStructure(\n                new AccessImplByJDKBehavior(constructor),\n                \"<init>\",\n                this,\n                this,\n                newInstances(constructor.getParameterTypes()),\n                newInstances(constructor.getExceptionTypes()),\n                newInstances(getAnnotationTypeArray(constructor.getDeclaredAnnotations()))\n        );\n    }\n\n    private final LazyGet<List<BehaviorStructure>> behaviorStructuresLazyGet\n            = new LazyGet<List<BehaviorStructure>>() {\n        @Override\n        protected List<BehaviorStructure> initialValue() {\n            final List<BehaviorStructure> behaviorStructures = new ArrayList<BehaviorStructure>();\n            for (final Constructor<?> constructor : clazz.getDeclaredConstructors()) {\n                behaviorStructures.add(newBehaviorStructure(constructor));\n            }\n            for (final Method method : clazz.getDeclaredMethods()) {\n                behaviorStructures.add(newBehaviorStructure(method));\n            }\n            return Collections.unmodifiableList(behaviorStructures);\n        }\n    };\n\n    @Override\n    public List<BehaviorStructure> getBehaviorStructures() {\n        return behaviorStructuresLazyGet.get();\n    }\n\n    @Override\n    public Access getAccess() {\n        return new AccessImplByJDKClass(clazz);\n    }\n\n    @Override\n    public String toString() {\n        return \"ClassStructureImplByJDK{\" + \"javaClassName='\" + javaClassName + '\\'' + '}';\n    }\n}<fim_middle>// class below is blob\n"}