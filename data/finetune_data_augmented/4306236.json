{"text": "<fim_prefix>\n<fim_suffix>public class WebServer {\n    public static final Logger LOG = LoggerFactory.getLogger(WebServer.class);\n    private HttpServer2 httpServer;\n    private final HasConfig conf;\n    private InetSocketAddress httpAddress;\n    private InetSocketAddress httpsAddress;\n    protected static final String HAS_SERVER_ATTRIBUTE_KEY = \"hasserver\";\n    public WebServer(HasConfig conf) {\n        this.conf = conf;\n    }\n    public HasConfig getConf() {\n        return conf;\n    }\n    private void init() {\n        final String pathSpec = \"/has/v1/*\";\n        // add has packages\n        httpServer.addJerseyResourcePackage(AsRequestApi.class\n                .getPackage().getName(),\n            pathSpec);\n    }\n    public void defineFilter() {\n        String authType = conf.getString(WebConfigKey.HAS_AUTHENTICATION_FILTER_AUTH_TYPE);\n        if (authType.equals(\"kerberos\")) {\n            // add authentication filter for webhdfs\n            final String className = conf.getString(\n                WebConfigKey.HAS_AUTHENTICATION_FILTER_KEY,\n                WebConfigKey.HAS_AUTHENTICATION_FILTER_DEFAULT);\n            final String name = className;\n            Map<String, String> params = getAuthFilterParams(conf);\n            String kadminPathSpec = \"/has/v1/kadmin/*\";\n            String hadminPathSpec = \"/has/v1/hadmin/*\";\n            HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n                params, new String[]{kadminPathSpec, hadminPathSpec});\n            HttpServer2.LOG.info(\"Added filter '\" + name + \"' (class=\" + className\n                + \")\");\n        }\n    }\n    public void defineConfFilter() {\n        String confFilterName = ConfFilter.class.getName();\n        String confPath = \"/has/v1/conf/*\";\n        HttpServer2.defineFilter(httpServer.getWebAppContext(), confFilterName, confFilterName,\n                getAuthFilterParams(conf), new String[]{confPath});\n        HttpServer2.LOG.info(\"Added filter '\" + confFilterName + \"' (class=\" + confFilterName\n                + \")\");\n    }\n    private Map<String, String> getAuthFilterParams(HasConfig conf) {\n        Map<String, String> params = new HashMap<>();\n        String authType = conf.getString(WebConfigKey.HAS_AUTHENTICATION_FILTER_AUTH_TYPE);\n        if (authType != null && !authType.isEmpty()) {\n            params.put(AuthenticationFilter.AUTH_TYPE, authType);\n        }\n        String principal = conf.getString(WebConfigKey.HAS_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY);\n        if (principal != null && !principal.isEmpty()) {\n            try {\n                principal = SecurityUtil.getServerPrincipal(principal,\n                    getHttpsAddress().getHostName());\n            } catch (IOException e) {\n                LOG.warn(\"Errors occurred when get server principal. \" + e.getMessage());\n            }\n            params.put(KerberosAuthenticationHandler.PRINCIPAL, principal);\n        }\n        String keytab = conf.getString(WebConfigKey.HAS_AUTHENTICATION_KERBEROS_KEYTAB_KEY);\n        if (keytab != null && !keytab.isEmpty()) {\n            params.put(KerberosAuthenticationHandler.KEYTAB, keytab);\n        }\n        String rule = conf.getString(WebConfigKey.HAS_AUTHENTICATION_KERBEROS_NAME_RULES);\n        if (rule != null && !rule.isEmpty()) {\n            params.put(KerberosAuthenticationHandler.NAME_RULES, rule);\n        } else {\n            params.put(KerberosAuthenticationHandler.NAME_RULES, \"DEFAULT\");\n        }\n        return params;\n    }\n    public InetSocketAddress getBindAddress() {\n        if (httpAddress != null) {\n            return httpAddress;\n        } else if (httpsAddress != null) {\n            return httpsAddress;\n        } else {\n            return null;\n        }\n    }\n    /**\n     * for information related to the different configuration options and\n     * Http Policy is decided.\n     *\n     * @throws HasException HAS exception when starting web server\n     */\n    public void start() throws HasException {\n        HttpConfig.Policy policy = getHttpPolicy(conf);\n        final String bindHost =\n            conf.getString(WebConfigKey.HAS_HTTPS_BIND_HOST_KEY);\n        InetSocketAddress httpAddr = null;\n        if (policy.isHttpEnabled()) {\n            final String httpAddrString = conf.getString(\n                WebConfigKey.HAS_HTTP_ADDRESS_KEY,\n                WebConfigKey.HAS_HTTP_ADDRESS_DEFAULT);\n            httpAddr = NetUtils.createSocketAddr(httpAddrString);\n            if (bindHost != null && !bindHost.isEmpty()) {\n                httpAddr = new InetSocketAddress(bindHost, httpAddr.getPort());\n            }\n            LOG.info(\"Get the http address: \" + httpAddr);\n        }\n        InetSocketAddress httpsAddr = null;\n        if (policy.isHttpsEnabled()) {\n            final String httpsAddrString = conf.getString(\n                WebConfigKey.HAS_HTTPS_ADDRESS_KEY,\n                WebConfigKey.HAS_HTTPS_ADDRESS_DEFAULT);\n            httpsAddr = NetUtils.createSocketAddr(httpsAddrString);\n            if (bindHost != null && !bindHost.isEmpty()) {\n                httpsAddr = new InetSocketAddress(bindHost, httpsAddr.getPort());\n            }\n            LOG.info(\"Get the https address: \" + httpsAddr);\n        }\n        HttpServer2.Builder builder = httpServerTemplateForHAS(conf, httpAddr, httpsAddr, \"has\");\n        try {\n            httpServer = builder.build();\n        } catch (IOException e) {\n            throw new HasException(\"Errors occurred when building http server. \" + e.getMessage());\n        }\n        init();\n        try {\n            httpServer.start();\n        } catch (IOException e) {\n            throw new HasException(\"Errors occurred when starting http server. \" + e.getMessage());\n        }\n        int connIdx = 0;\n        if (policy.isHttpEnabled()) {\n            httpAddress = httpServer.getConnectorAddress(connIdx++);\n            if (httpAddress != null) {\n                conf.setString(WebConfigKey.HAS_HTTP_ADDRESS_KEY,\n                    NetUtils.getHostPortString(httpAddress));\n            }\n        }\n        if (policy.isHttpsEnabled()) {\n            httpsAddress = httpServer.getConnectorAddress(connIdx);\n            if (httpsAddress != null) {\n                conf.setString(WebConfigKey.HAS_HTTPS_ADDRESS_KEY,\n                    NetUtils.getHostPortString(httpsAddress));\n            }\n        }\n    }\n    public void setWebServerAttribute(HasServer hasServer) {\n        httpServer.setAttribute(HAS_SERVER_ATTRIBUTE_KEY, hasServer);\n    }\n    public static HasServer getHasServerFromContext(ServletContext context) {\n        return (HasServer) context.getAttribute(HAS_SERVER_ATTRIBUTE_KEY);\n    }\n    /**\n     * Get http policy.\n     *\n     * @param conf the HAS config\n     * @return HttpConfig.Policy the policy\n     */\n    public HttpConfig.Policy getHttpPolicy(HasConfig conf) {\n        String policyStr = conf.getString(WebConfigKey.HAS_HTTP_POLICY_KEY,\n            WebConfigKey.HAS_HTTP_POLICY_DEFAULT);\n        HttpConfig.Policy policy = HttpConfig.Policy.fromString(policyStr);\n        if (policy == null) {\n            throw new HadoopIllegalArgumentException(\"Unrecognized value '\"\n                + policyStr + \"' for \" + WebConfigKey.HAS_HTTP_POLICY_KEY);\n        }\n        conf.setString(WebConfigKey.HAS_HTTP_POLICY_KEY, policy.name());\n        return policy;\n    }\n    /**\n     * Return a HttpServer.Builder that the HAS can use to\n     * initialize their HTTP / HTTPS server.\n     *\n     * @param conf the HAS config\n     * @param httpAddr the InetSocketAddress of http\n     * @param httpsAddr the InetSocketAddress of https\n     * @param name the host name\n     * @return HttpServer2.Builder the builder\n     * @throws HasException HAS exception\n     */\n    public HttpServer2.Builder httpServerTemplateForHAS(\n        HasConfig conf, final InetSocketAddress httpAddr, final InetSocketAddress httpsAddr,\n        String name) throws HasException {\n        HttpConfig.Policy policy = getHttpPolicy(conf);\n        HttpServer2.Builder builder = new HttpServer2.Builder().setName(name);\n        if (policy.isHttpEnabled()) {\n            if (httpAddr != null && httpAddr.getPort() == 0) {\n                builder.setFindPort(true);\n            }\n            URI uri = URI.create(\"http://\" + NetUtils.getHostPortString(httpAddr));\n            builder.addEndpoint(uri);\n            LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n        }\n        if (policy.isHttpsEnabled() && httpsAddr != null) {\n            HasConfig sslConf = loadSslConfiguration(conf);\n            loadSslConfToHttpServerBuilder(builder, sslConf);\n            if (httpsAddr != null && httpsAddr.getPort() == 0) {\n                builder.setFindPort(true);\n            }\n            URI uri = URI.create(\"https://\" + NetUtils.getHostPortString(httpsAddr));<fim_middle>// class below is blob\n"}