{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.tez.common;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport org.apache.hadoop.classification.InterfaceAudience.Private;\nimport org.apache.tez.dag.api.TezReflectionException;\nimport org.apache.tez.dag.api.TezUncheckedException;\n\n@Private\npublic class ReflectionUtils {\n\n  private static final Map<String, Class<?>> CLAZZ_CACHE = new ConcurrentHashMap<String, Class<?>>();\n\n  @Private\n  public static Class<?> getClazz(String className) throws TezReflectionException {\n    Class<?> clazz = CLAZZ_CACHE.get(className);\n    if (clazz == null) {\n      try {\n        clazz = Class.forName(className, true, Thread.currentThread().getContextClassLoader());\n      } catch (ClassNotFoundException e) {\n        throw new TezReflectionException(\"Unable to load class: \" + className, e);\n      }\n    }\n    return clazz;\n  }\n\n  private static <T> T getNewInstance(Class<T> clazz) throws TezReflectionException {\n    T instance;\n    try {\n      instance = clazz.newInstance();\n    } catch (Exception e) {\n      throw new TezReflectionException(\n          \"Unable to instantiate class with 0 arguments: \" + clazz.getName(), e);\n    }\n    return instance;\n  }\n\n  private static <T> T getNewInstance(Class<T> clazz, Class<?>[] parameterTypes, Object[] parameters)\n    throws TezReflectionException {\n    T instance;\n    try {\n      Constructor<T> constructor = clazz.getConstructor(parameterTypes);\n      instance = constructor.newInstance(parameters);\n    } catch (Exception e) {\n      throw new TezReflectionException(\n          \"Unable to instantiate class with \" + parameters.length + \" arguments: \" + clazz.getName(), e);\n    }\n    return instance;\n  }\n\n<fim_suffix>  @Private\n  public static <T> T createClazzInstance(String className) throws TezReflectionException {\n    Class<?> clazz = getClazz(className);\n    @SuppressWarnings(\"unchecked\")\n    T instance = (T) getNewInstance(clazz);\n    return instance;\n  }\n\n  @Private\n  public static <T> T createClazzInstance(String className, Class<?>[] parameterTypes, Object[] parameters)\n    throws TezReflectionException {\n    Class<?> clazz = getClazz(className);\n    @SuppressWarnings(\"unchecked\")\n    T instance = (T) getNewInstance(clazz, parameterTypes, parameters);\n    return instance;\n  }\n\n  @Private\n  @SuppressWarnings(\"unchecked\")\n  public static <T> T invokeMethod(Object target, Method method, Object... args) throws TezReflectionException {\n    try {\n      return (T) method.invoke(target, args);\n    } catch (Exception e) {\n      throw new TezReflectionException(e);\n    }\n  }\n\n  @Private\n  public static Method getMethod(Class<?> targetClazz, String methodName, Class<?>... parameterTypes) throws TezReflectionException {\n    try {\n      return targetClazz.getMethod(methodName, parameterTypes);\n    } catch (NoSuchMethodException e) {\n      throw new TezReflectionException(e);\n    }\n  }\n\n  @Private\n  public static synchronized void addResourcesToClasspath(List<URL> urls) {\n    ClassLoader classLoader = new URLClassLoader(urls.toArray(new URL[urls.size()]), Thread\n        .currentThread().getContextClassLoader());\n    Thread.currentThread().setContextClassLoader(classLoader);\n  }\n\n  // Parameters for addResourcesToSystemClassLoader\n  private static final Class<?>[] parameters = new Class[]{URL.class};\n  private static Method sysClassLoaderMethod = null;\n\n  @Private\n  public static synchronized void addResourcesToSystemClassLoader(List<URL> urls) {\n    URLClassLoader sysLoader = (URLClassLoader)ClassLoader.getSystemClassLoader();\n    if (sysClassLoaderMethod == null) {\n      Class<?> sysClass = URLClassLoader.class;\n      Method method;\n      try {\n        method = sysClass.getDeclaredMethod(\"addURL\", parameters);\n      } catch (SecurityException e) {\n        throw new TezUncheckedException(\"Failed to get handle on method addURL\", e);\n      } catch (NoSuchMethodException e) {\n        throw new TezUncheckedException(\"Failed to get handle on method addURL\", e);\n      }\n      method.setAccessible(true);\n      sysClassLoaderMethod = method;\n    }\n    for (URL url : urls) {\n      try {\n        sysClassLoaderMethod.invoke(sysLoader, new Object[] { url });\n      } catch (IllegalArgumentException e) {\n        throw new TezUncheckedException(\"Failed to invoke addURL for rsrc: \" + url, e);\n      } catch (IllegalAccessException e) {\n        throw new TezUncheckedException(\"Failed to invoke addURL for rsrc: \" + url, e);\n      } catch (InvocationTargetException e) {\n        throw new TezUncheckedException(\"Failed to invoke addURL for rsrc: \" + url, e);\n      }\n    }\n  }\n}<fim_middle>// function below has no smell\n"}