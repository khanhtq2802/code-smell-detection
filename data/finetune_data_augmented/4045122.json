{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.hyracks.dataflow.common.utils;\n\nimport org.apache.hyracks.api.dataflow.value.IBinaryComparator;\nimport org.apache.hyracks.api.dataflow.value.IBinaryComparatorFactory;\nimport org.apache.hyracks.api.dataflow.value.ISerializerDeserializer;\nimport org.apache.hyracks.api.dataflow.value.ITypeTraits;\nimport org.apache.hyracks.data.std.accessors.PointableBinaryComparatorFactory;\nimport org.apache.hyracks.data.std.primitive.BooleanPointable;\nimport org.apache.hyracks.data.std.primitive.DoublePointable;\nimport org.apache.hyracks.data.std.primitive.FixedLengthTypeTrait;\nimport org.apache.hyracks.data.std.primitive.FloatPointable;\nimport org.apache.hyracks.data.std.primitive.IntegerPointable;\nimport org.apache.hyracks.data.std.primitive.LongPointable;\nimport org.apache.hyracks.data.std.primitive.ShortPointable;\nimport org.apache.hyracks.data.std.primitive.UTF8StringPointable;\nimport org.apache.hyracks.dataflow.common.data.marshalling.BooleanSerializerDeserializer;\nimport org.apache.hyracks.dataflow.common.data.marshalling.DoubleSerializerDeserializer;\nimport org.apache.hyracks.dataflow.common.data.marshalling.FloatSerializerDeserializer;\nimport org.apache.hyracks.dataflow.common.data.marshalling.Integer64SerializerDeserializer;\nimport org.apache.hyracks.dataflow.common.data.marshalling.IntegerSerializerDeserializer;\nimport org.apache.hyracks.dataflow.common.data.marshalling.ShortSerializerDeserializer;\nimport org.apache.hyracks.dataflow.common.data.marshalling.UTF8StringSerializerDeserializer;\n\n@SuppressWarnings(\"rawtypes\")\npublic class SerdeUtils {\n\n    public static ITypeTraits[] serdesToTypeTraits(ISerializerDeserializer[] serdes) {\n        ITypeTraits[] typeTraits = new ITypeTraits[serdes.length];\n        for (int i = 0; i < serdes.length; i++) {\n            typeTraits[i] = serdeToTypeTrait(serdes[i]);\n        }\n        return typeTraits;\n    }\n\n<fim_suffix>    public static ITypeTraits[] serdesToTypeTraits(ISerializerDeserializer[] serdes, int payloadSize) {\n        ITypeTraits[] typeTraits = new ITypeTraits[serdes.length + 1];\n        for (int i = 0; i < serdes.length; i++) {\n            typeTraits[i] = serdeToTypeTrait(serdes[i]);\n        }\n        typeTraits[serdes.length] = new FixedLengthTypeTrait(payloadSize);\n        return typeTraits;\n    }\n\n    public static ITypeTraits serdeToTypeTrait(ISerializerDeserializer serde) {\n        if (serde instanceof ShortSerializerDeserializer) {\n            return ShortPointable.TYPE_TRAITS;\n        }\n        if (serde instanceof IntegerSerializerDeserializer) {\n            return IntegerPointable.TYPE_TRAITS;\n        }\n        if (serde instanceof Integer64SerializerDeserializer) {\n            return LongPointable.TYPE_TRAITS;\n        }\n        if (serde instanceof FloatSerializerDeserializer) {\n            return FloatPointable.TYPE_TRAITS;\n        }\n        if (serde instanceof DoubleSerializerDeserializer) {\n            return DoublePointable.TYPE_TRAITS;\n        }\n        if (serde instanceof BooleanSerializerDeserializer) {\n            return BooleanPointable.TYPE_TRAITS;\n        }\n        return UTF8StringPointable.TYPE_TRAITS;\n    }\n\n    public static IBinaryComparator[] serdesToComparators(ISerializerDeserializer[] serdes, int numSerdes) {\n        IBinaryComparator[] comparators = new IBinaryComparator[numSerdes];\n        for (int i = 0; i < numSerdes; i++) {\n            comparators[i] = serdeToComparator(serdes[i]);\n        }\n        return comparators;\n    }\n\n    public static IBinaryComparator serdeToComparator(ISerializerDeserializer serde) {\n        IBinaryComparatorFactory f = serdeToComparatorFactory(serde);\n        return f.createBinaryComparator();\n    }\n\n    public static IBinaryComparatorFactory[] serdesToComparatorFactories(ISerializerDeserializer[] serdes,\n            int numSerdes) {\n        IBinaryComparatorFactory[] comparatorsFactories = new IBinaryComparatorFactory[numSerdes];\n        for (int i = 0; i < numSerdes; i++) {\n            comparatorsFactories[i] = serdeToComparatorFactory(serdes[i]);\n        }\n        return comparatorsFactories;\n    }\n\n    public static IBinaryComparatorFactory serdeToComparatorFactory(ISerializerDeserializer serde) {\n        if (serde instanceof ShortSerializerDeserializer) {\n            return PointableBinaryComparatorFactory.of(ShortPointable.FACTORY);\n        }\n        if (serde instanceof IntegerSerializerDeserializer) {\n            return PointableBinaryComparatorFactory.of(IntegerPointable.FACTORY);\n        }\n        if (serde instanceof Integer64SerializerDeserializer) {\n            return PointableBinaryComparatorFactory.of(LongPointable.FACTORY);\n        }\n        if (serde instanceof FloatSerializerDeserializer) {\n            return PointableBinaryComparatorFactory.of(FloatPointable.FACTORY);\n        }\n        if (serde instanceof DoubleSerializerDeserializer) {\n            return PointableBinaryComparatorFactory.of(DoublePointable.FACTORY);\n        }\n        if (serde instanceof BooleanSerializerDeserializer) {\n            throw new UnsupportedOperationException(\"Binary comparator factory for Boolean not implemented.\");\n        }\n        if (serde instanceof UTF8StringSerializerDeserializer) {\n            return PointableBinaryComparatorFactory.of(UTF8StringPointable.FACTORY);\n        }\n        throw new UnsupportedOperationException(\"Binary comparator for + \" + serde.toString() + \" not implemented.\");\n    }\n}<fim_middle>// function below has no smell\n"}