{"text": "<fim_prefix>/*\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n *\n * Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.\n *\n * Oracle and Java are registered trademarks of Oracle and/or its affiliates.\n * Other names may be trademarks of their respective owners.\n *\n * The contents of this file are subject to the terms of either the GNU\n * General Public License Version 2 only (\"GPL\") or the Common\n * Development and Distribution License(\"CDDL\") (collectively, the\n * \"License\"). You may not use this file except in compliance with the\n * License. You can obtain a copy of the License at\n * http://www.netbeans.org/cddl-gplv2.html\n * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the\n * specific language governing permissions and limitations under the\n * License.  When distributing the software, include this License Header\n * Notice in each file and include the License file at\n * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the GPL Version 2 section of the License file that\n * accompanied this code. If applicable, add the following below the\n * License Header, with the fields enclosed by brackets [] replaced by\n * your own identifying information:\n * \"Portions Copyrighted [year] [name of copyright owner]\"\n *\n * Contributor(s):\n * The Original Software is NetBeans. The Initial Developer of the Original\n * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun\n * Microsystems, Inc. All Rights Reserved.\n *\n * If you wish your version of this file to be governed by only the CDDL\n * or only the GPL Version 2, indicate your decision by adding\n * \"[Contributor] elects to include this software in this distribution\n * under the [CDDL or GPL Version 2] license.\" If you do not indicate a\n * single choice of license, a recipient has the option to distribute\n * your version of this file under either the CDDL, the GPL Version 2 or\n * to extend the choice of license to its licensees as provided above.\n * However, if you add GPL Version 2 code and therefore, elected the GPL\n * Version 2 license, then the option applies only if the new code is\n * made subject to such option by the copyright holder.\n */\npackage org.graalvm.visualvm.lib.profiler.heapwalk;\nimport java.io.File;\nimport java.lang.Thread.State;\nimport java.text.NumberFormat;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport javax.swing.AbstractButton;\nimport javax.swing.JPanel;\nimport javax.swing.SwingUtilities;\nimport org.graalvm.visualvm.lib.jfluid.heap.GCRoot;\nimport org.graalvm.visualvm.lib.jfluid.heap.Heap;\nimport org.graalvm.visualvm.lib.jfluid.heap.HeapSummary;\nimport org.graalvm.visualvm.lib.jfluid.heap.Instance;\nimport org.graalvm.visualvm.lib.jfluid.heap.JavaClass;\nimport org.graalvm.visualvm.lib.jfluid.heap.JavaFrameGCRoot;\nimport org.graalvm.visualvm.lib.jfluid.heap.ThreadObjectGCRoot;\nimport org.graalvm.visualvm.lib.profiler.api.GoToSource;\nimport org.graalvm.visualvm.lib.profiler.api.ProfilerDialogs;\nimport org.graalvm.visualvm.lib.profiler.api.icons.Icons;\nimport org.graalvm.visualvm.lib.profiler.api.icons.ProfilerIcons;\nimport org.graalvm.visualvm.lib.profiler.heapwalk.details.api.DetailsSupport;\nimport org.graalvm.visualvm.lib.profiler.heapwalk.model.BrowserUtils;\nimport org.graalvm.visualvm.lib.profiler.heapwalk.ui.OverviewControllerUI;\nimport org.graalvm.visualvm.lib.profiler.heapwalk.ui.icons.HeapWalkerIcons;\nimport org.openide.util.NbBundle;\n/**\n *\n * @author Jiri Sedlacek\n * @author Tomas Hurka\n */\n@NbBundle.Messages({\n    \"OverviewController_NotAvailableMsg=&lt;not available&gt;\",\n    \"OverviewController_SystemPropertiesString=System properties:\",\n    \"OverviewController_SummaryString=Basic info:\",\n    \"OverviewController_EnvironmentString=Environment:\",\n    \"OverviewController_FileItemString=<b>File: </b>{0}\",\n    \"OverviewController_FileSizeItemString=<b>File size: </b>{0}\",\n    \"OverviewController_DateTakenItemString=<b>Date taken: </b>{0}\",\n    \"OverviewController_UpTimeItemString=<b>JVM Uptime: </b>{0}\",\n    \"OverviewController_TotalBytesItemString=<b>Total bytes: </b>{0}\",\n    \"OverviewController_TotalClassesItemString=<b>Total classes: </b>{0}\",\n    \"OverviewController_TotalInstancesItemString=<b>Total instances: </b>{0}\",\n    \"OverviewController_ClassloadersItemString=<b>Classloaders: </b>{0}\",\n    \"OverviewController_GcRootsItemString=<b>GC roots: </b>{0}\",\n    \"OverviewController_FinalizersItemString=<b>Number of objects pending for finalization: </b>{0}\",\n    \"OverviewController_OOMELabelString=<b>Heap dumped on OutOfMemoryError exception</b>\",\n    \"OverviewController_OOMEItemString=<b>Thread causing OutOfMemoryError exception: </b>{0}\",\n    \"OverviewController_OsItemString=<b>OS: </b>{0} ({1}) {2}\",\n    \"OverviewController_ArchitectureItemString=<b>Architecture: </b>{0} {1}\",\n    \"OverviewController_JavaHomeItemString=<b>Java Home: </b>{0}\",\n    \"OverviewController_JavaVersionItemString=<b>Java Version: </b>{0}\",\n    \"OverviewController_JavaVendorItemString=<b>Java Vendor: </b>{0}\",\n    \"OverviewController_JvmItemString=<b>JVM: </b>{0}  ({1}, {2})\",\n    \"OverviewController_ShowSysPropsLinkString=Show System Properties\",\n    \"OverviewController_ThreadsString=Threads at the heap dump:\",\n    \"OverviewController_ShowThreadsLinkString=Show Threads\"\n})\npublic class OverviewController extends AbstractController {\n    public static final String SHOW_SYSPROPS_URL = \"file:/sysprops\"; // NOI18N\n    public static final String SHOW_THREADS_URL = \"file:/threads\"; // NOI18N\n    private static final String OPEN_THREADS_URL = \"file:/stackframe/\";     // NOI18N\n    private static final String CLASS_URL_PREFIX = \"file://class/\"; // NOI18N\n    private static final String INSTANCE_URL_PREFIX = \"file://instance/\";   // NOI18N\n    private static final String THREAD_URL_PREFIX = \"file://thread/\";   // NOI18N\n    private static final String LINE_PREFIX = \"&nbsp;&nbsp;&nbsp;&nbsp;\"; // NOI18N\n    //~ Instance fields ----------------------------------------------------------------------------------------------------------\n    private HeapFragmentWalker heapFragmentWalker;\n    private SummaryController summaryController;\n    private boolean systemPropertiesComputed = false;\n    private Properties systemProperties;\n    private String stackTrace;\n    private JavaClass java_lang_Class;\n    private ThreadObjectGCRoot oome;\n    //~ Constructors -------------------------------------------------------------------------------------------------------------\n    public OverviewController(SummaryController summaryController) {\n        this.summaryController = summaryController;\n        heapFragmentWalker = summaryController.getHeapFragmentWalker();\n    }\n    //~ Methods ------------------------------------------------------------------------------------------------------------------\n    // --- Public interface ------------------------------------------------------\n    public SummaryController getSummaryController() {\n        return summaryController;\n    }\n    // --- Internal interface ----------------------------------------------------\n    protected AbstractButton createControllerPresenter() {\n        return ((OverviewControllerUI) getPanel()).getPresenter();\n    }\n    // --- Protected implementation ----------------------------------------------\n    protected JPanel createControllerUI() {\n        return new OverviewControllerUI(this);\n    }\n<fim_suffix>    void showInThreads(Instance instance) {\n        ((OverviewControllerUI) getPanel()).showInThreads(instance);\n    }\n    public String computeSummary() {\n        File file = heapFragmentWalker.getHeapDumpFile();\n        Heap heap = heapFragmentWalker.getHeapFragment();\n        HeapSummary hsummary = heap.getSummary();\n        long finalizers = computeFinalizers(heap);\n        int nclassloaders = 0;\n        JavaClass cl = heap.getJavaClassByName(\"java.lang.ClassLoader\"); // NOI18N<fim_middle>// function below has no smell\n"}