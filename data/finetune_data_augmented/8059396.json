{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2014 itemis AG (http://www.itemis.eu) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *******************************************************************************/\npackage org.eclipse.xtext.formatting2.internal;\n\nimport java.util.List;\n\nimport org.eclipse.xtext.formatting2.AbstractFormatter2;\nimport org.eclipse.xtext.formatting2.IHiddenRegionFormatting;\nimport org.eclipse.xtext.formatting2.IMerger;\n\n/**\n * @author Moritz Eysholdt - Initial contribution and API\n */\n<fim_suffix>public class HiddenRegionFormattingMerger implements IMerger<IHiddenRegionFormatting> {\n\n\tprivate final AbstractFormatter2 formatter;\n\n\tpublic HiddenRegionFormattingMerger(AbstractFormatter2 formatter) {\n\t\tsuper();\n\t\tthis.formatter = formatter;\n\t}\n\n\t@Override\n\tpublic IHiddenRegionFormatting merge(List<? extends IHiddenRegionFormatting> conflicting) {\n\t\tif (conflicting.size() == 2) {\n\t\t\t// TODO: don't do this\n\t\t\tconflicting.get(1).mergeValuesFrom(conflicting.get(0));\n\t\t\treturn conflicting.get(1);\n\t\t}\n\t\tIHiddenRegionFormatting result = formatter.createHiddenRegionFormatting();\n\t\tfor (IHiddenRegionFormatting conflict : conflicting)\n\t\t\tresult.mergeValuesFrom(conflict);\n\t\treturn result;\n\t}\n\n}<fim_middle>// class below has no smell\n"}