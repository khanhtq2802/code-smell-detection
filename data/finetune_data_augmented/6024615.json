{"text": "<fim_prefix>/*\n * Copyright (c) 2018 the original author or authors.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n */\n\npackage org.eclipse.buildship.core.internal;\n\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.gradle.tooling.BuildAction;\nimport org.gradle.tooling.BuildActionExecuter;\nimport org.gradle.tooling.CancellationToken;\nimport org.gradle.tooling.GradleConnectionException;\nimport org.gradle.tooling.ProgressListener;\nimport org.gradle.tooling.ResultHandler;\nimport org.gradle.tooling.events.OperationType;\n\nimport com.google.common.cache.Cache;\nimport com.google.common.collect.Lists;\n\npublic class CachingBuildActionExecuter<T> implements BuildActionExecuter<T> {\n\n    private final BuildActionExecuter<T> delegate;\n    private final Cache<Object, Object> cache;\n    private final CacheKey cacheKey;\n\n    CachingBuildActionExecuter(BuildActionExecuter<T> delegate, BuildAction<T> buildAction, Cache<Object, Object> cache) {\n        this.delegate = delegate;\n        this.cache = cache;\n        this.cacheKey = new CacheKey();\n        this.cacheKey.setBuildAction(buildAction);\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> withArguments(String... arguments) {\n        this.cacheKey.setArguments(Arrays.asList(arguments));\n        this.delegate.withArguments(arguments);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> withArguments(Iterable<String> arguments) {\n        this.cacheKey.setArguments(arguments == null ? null : Lists.newArrayList(arguments));\n        this.delegate.withArguments(arguments);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> addArguments(String... arguments) {\n        this.cacheKey.addArguments(Arrays.asList(arguments));\n        this.delegate.addArguments(arguments);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> addArguments(Iterable<String> arguments) {\n        this.cacheKey.addArguments(Lists.newArrayList(arguments));\n        this.delegate.addArguments(arguments);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> setStandardOutput(OutputStream outputStream) {\n        this.cacheKey.markInvalid();\n        this.delegate.setStandardOutput(outputStream);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> setStandardError(OutputStream outputStream) {\n        this.cacheKey.markInvalid();\n        this.delegate.setStandardError(outputStream);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> setColorOutput(boolean colorOutput) {\n        this.cacheKey.markInvalid();\n        this.delegate.setColorOutput(colorOutput);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> setStandardInput(InputStream inputStream) {\n        this.cacheKey.markInvalid();\n        this.delegate.setStandardInput(inputStream);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> setJavaHome(File javaHome) {\n        this.cacheKey.setJavaHome(javaHome);\n        this.delegate.setJavaHome(javaHome);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> setJvmArguments(String... jvmArguments) {\n        this.cacheKey.setJvmArguments(Arrays.asList(jvmArguments));\n        this.delegate.setJvmArguments(jvmArguments);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> setJvmArguments(Iterable<String> jvmArguments) {\n        this.cacheKey.setJvmArguments(jvmArguments == null ? null : Lists.newArrayList(jvmArguments));\n        this.delegate.setJvmArguments(jvmArguments);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> addJvmArguments(String... jvmArguments) {\n        this.cacheKey.addJvmArguments(Arrays.asList(jvmArguments));\n        this.delegate.addJvmArguments(jvmArguments);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> addJvmArguments(Iterable<String> jvmArguments) {\n        this.cacheKey.addJvmArguments(Lists.newArrayList(jvmArguments));\n        this.delegate.addJvmArguments(jvmArguments);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> setEnvironmentVariables(Map<String, String> envVariables) {\n        this.cacheKey.setEnvironmentVariables(envVariables);\n        this.delegate.setEnvironmentVariables(envVariables);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> addProgressListener(ProgressListener listener) {\n        this.cacheKey.markInvalid();\n        this.delegate.addProgressListener(listener);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> addProgressListener(org.gradle.tooling.events.ProgressListener listener) {\n        this.cacheKey.markInvalid();\n        this.delegate.addProgressListener(listener);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> addProgressListener(org.gradle.tooling.events.ProgressListener listener, Set<OperationType> eventTypes) {\n        this.cacheKey.markInvalid();\n        this.delegate.addProgressListener(listener, eventTypes);\n        return this;\n    }\n\n<fim_suffix>    @Override\n    public CachingBuildActionExecuter<T> addProgressListener(org.gradle.tooling.events.ProgressListener listener, OperationType... operationTypes) {\n        this.cacheKey.markInvalid();\n        this.delegate.addProgressListener(listener, operationTypes);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> withCancellationToken(CancellationToken cancellationToken) {\n        this.delegate.withCancellationToken(cancellationToken);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> forTasks(String... tasks) {\n        this.cacheKey.setTasks(Arrays.asList(tasks));\n        this.delegate.forTasks(tasks);\n        return this;\n    }\n\n    @Override\n    public CachingBuildActionExecuter<T> forTasks(Iterable<String> tasks) {\n        this.cacheKey.setTasks(tasks == null ? null : Lists.newArrayList(tasks));\n        this.delegate.forTasks(tasks);\n        return this;\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public T run() throws GradleConnectionException, IllegalStateException {\n        Object cachedValue = this.cacheKey.isInvalid() ? null : this.cache.getIfPresent(this.cacheKey);\n        if (cachedValue != null) {\n            return (T) cachedValue;\n        } else {\n            T result = this.delegate.run();\n            this.cache.put(this.cacheKey, result);\n            return result;\n        }\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void run(ResultHandler<? super T> handler) throws IllegalStateException {\n        Object cachedValue = this.cacheKey.isInvalid() ? null : this.cache.getIfPresent(this.cacheKey);\n        if (cachedValue != null) {\n            handler.onComplete((T) cachedValue);\n        } else {\n            InspectableResultHandler<T> inspectableResultHandler = new InspectableResultHandler<>();\n            this.delegate.run(inspectableResultHandler);\n            inspectableResultHandler.getResult().ifPresent(r -> this.cache.put(this.cacheKey, r));\n            inspectableResultHandler.forwardResults(handler);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}