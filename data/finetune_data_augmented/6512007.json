{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2015, 2016 iSencia Belgium NV.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Erwin De Ley - initial API and implementation and/or initial documentation\n *******************************************************************************/\npackage org.eclipse.triquetrum.workflow.editor.features;\n\nimport static org.eclipse.triquetrum.workflow.editor.shapes.ActorShapes.*;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.eclipse.graphiti.features.IDirectEditingInfo;\nimport org.eclipse.graphiti.features.IFeatureProvider;\nimport org.eclipse.graphiti.features.context.IAddContext;\nimport org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;\nimport org.eclipse.graphiti.mm.algorithms.Image;\nimport org.eclipse.graphiti.mm.algorithms.Polyline;\nimport org.eclipse.graphiti.mm.algorithms.RoundedRectangle;\nimport org.eclipse.graphiti.mm.algorithms.Text;\nimport org.eclipse.graphiti.mm.algorithms.styles.Orientation;\nimport org.eclipse.graphiti.mm.pictograms.ContainerShape;\nimport org.eclipse.graphiti.mm.pictograms.PictogramElement;\nimport org.eclipse.graphiti.mm.pictograms.Shape;\nimport org.eclipse.graphiti.services.Graphiti;\nimport org.eclipse.graphiti.services.IGaService;\nimport org.eclipse.graphiti.services.IPeCreateService;\nimport org.eclipse.graphiti.util.IColorConstant;\nimport org.eclipse.triquetrum.workflow.ErrorCode;\nimport org.eclipse.triquetrum.workflow.editor.BoCategory;\nimport org.eclipse.triquetrum.workflow.editor.TriqFeatureProvider;\nimport org.eclipse.triquetrum.workflow.model.CompositeActor;\nimport org.eclipse.triquetrum.workflow.model.Entity;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n<fim_suffix>public class CompositeActorAddFeature extends ActorAddFeature {\n\n  private final static Logger LOGGER = LoggerFactory.getLogger(CompositeActorAddFeature.class);\n\n  public static final IColorConstant COMPACTOR_NAME_FOREGROUND = IColorConstant.BLACK;\n  public static final IColorConstant COMPACTOR_FOREGROUND = IColorConstant.BLACK;\n  public static final IColorConstant COMPACTOR_BACKGROUND = IColorConstant.LIGHT_LIGHT_GRAY;\n\n  public CompositeActorAddFeature(IFeatureProvider fp) {\n    super(fp);\n  }\n\n  @Override\n  public boolean canAdd(IAddContext context) {\n    // check if user wants to add an actor\n    return (context.getNewObject() instanceof CompositeActor);\n  }\n\n  @Override\n  public PictogramElement add(IAddContext context) {\n    Entity addedActor = (Entity) context.getNewObject();\n    ContainerShape targetContainer = context.getTargetContainer();\n\n    int xLocation = context.getX();\n    int yLocation = context.getY();\n\n    IPeCreateService peCreateService = Graphiti.getPeCreateService();\n    IGaService gaService = Graphiti.getGaService();\n    ContainerShape containerShape = peCreateService.createContainerShape(targetContainer, true);\n    link(context, containerShape, addedActor, BoCategory.CompositeActor);\n\n    GraphicsAlgorithm invisibleRectangle = null;\n    invisibleRectangle = gaService.createInvisibleRectangle(containerShape);\n\n    GraphicsAlgorithm actorShapeGA = null;\n\n    String iconResource = (String) context.getProperty(\"icon\");\n    String iconType = (String) context.getProperty(\"iconType\");\n\n    switch (iconType) {\n    case TriqFeatureProvider.ICONTYPE_SVG:\n    case TriqFeatureProvider.ICONTYPE_PTOLEMY:\n      actorShapeGA = buildExternallyDefinedShape(context, gaService, invisibleRectangle, containerShape, iconType, iconResource);\n      break;\n    default:\n      actorShapeGA = buildDefaultShape(context, gaService, invisibleRectangle, containerShape, addedActor, iconResource);\n    }\n\n    int width = actorShapeGA.getWidth();\n    int height = actorShapeGA.getHeight();\n    gaService.setLocationAndSize(invisibleRectangle, xLocation, yLocation, width + 15, height);\n\n    layoutPictogramElement(containerShape);\n\n    return containerShape;\n  }\n\n  @Override\n  protected GraphicsAlgorithm buildDefaultShape(IAddContext context, IGaService gaService, GraphicsAlgorithm invisibleRectangle, ContainerShape containerShape, Entity addedActor,\n      String iconResource) {\n\n    IPeCreateService peCreateService = Graphiti.getPeCreateService();\n    int width = ACTOR_VISIBLE_WIDTH;\n    int height = ACTOR_VISIBLE_HEIGHT;\n\n    // create and set graphics algorithm\n    RoundedRectangle actorShapeGA = gaService.createRoundedRectangle(invisibleRectangle, 5, 5);\n    actorShapeGA.setForeground(manageColor(ACTOR_FOREGROUND));\n    actorShapeGA.setBackground(manageColor(ACTOR_BACKGROUND));\n    actorShapeGA.setLineWidth(2);\n    gaService.setLocationAndSize(actorShapeGA, ACTOR_X_MARGIN, ACTOR_Y_MARGIN, width, height);\n\n    // add the actor's icon\n    if (!StringUtils.isBlank(iconResource)) {\n      try {\n        final Shape shape = peCreateService.createShape(containerShape, false);\n        final Image image = gaService.createImage(shape, iconResource);\n        addedActor.setIconId(iconResource);\n        gaService.setLocationAndSize(image, ACTOR_ICON_X_MARGIN, ACTOR_ICON_Y_MARGIN, ACTOR_ICON_SIZE, ACTOR_ICON_SIZE);\n\n        // create link and wire it\n        link(context, shape, addedActor, BoCategory.Actor);\n      } catch (Exception e) {\n        LOGGER.error(ErrorCode.MODEL_CONFIGURATION_ERROR + \" - Error trying to add actor icon for \" + addedActor, e);\n      }\n    }\n\n    // SHAPE WITH LINE\n    {\n      // create shape for line\n      Shape shape = peCreateService.createShape(containerShape, false);\n\n      // create and set graphics algorithm\n      Polyline polyline = gaService.createPolyline(shape, ACTOR_TEXT_UNDERLINE_SHAPE);\n      polyline.setForeground(manageColor(COMPACTOR_FOREGROUND));\n      polyline.setLineWidth(2);\n\n      // create link and wire it\n      link(context, shape, addedActor, BoCategory.Actor);\n    }\n\n    // SHAPE WITH actor name as TEXT\n    {\n      // create shape for text\n      Shape shape = peCreateService.createShape(containerShape, false);\n\n      // create and set text graphics algorithm\n      Text text = gaService.createText(shape, addedActor.getName());\n      text.setForeground(manageColor(COMPACTOR_NAME_FOREGROUND));\n      text.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);\n      // vertical alignment has as default value \"center\"\n      text.setFont(gaService.manageDefaultFont(getDiagram(), false, true));\n      gaService.setLocationAndSize(text, ACTOR_TEXT_X_MARGIN, ACTOR_Y_MARGIN, ACTOR_TEXT_WIDTH, ACTOR_TEXT_HEIGHT);\n\n      // create link and wire it\n      link(context, shape, addedActor, BoCategory.CompositeActor);\n\n      // provide information to support direct-editing directly\n      // after object creation (must be activated additionally)\n      IDirectEditingInfo directEditingInfo = getFeatureProvider().getDirectEditingInfo();\n      // set container shape for direct editing after object creation\n      directEditingInfo.setMainPictogramElement(containerShape);\n      // set shape and graphics algorithm where the editor for\n      // direct editing shall be opened after object creation\n      directEditingInfo.setPictogramElement(shape);\n      directEditingInfo.setGraphicsAlgorithm(text);\n    }\n\n    return actorShapeGA;\n  }\n}<fim_middle>// class below has no smell\n"}