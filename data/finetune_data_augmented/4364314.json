{"text": "<fim_prefix> * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.cxf.common.logging;\nimport java.util.Locale;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.logging.Filter;\nimport java.util.logging.Handler;\nimport java.util.logging.Level;\nimport java.util.logging.LogRecord;\nimport java.util.logging.Logger;\n/**\n * java.util.logging.Logger implementation delegating to another framework.\n * All methods can be used except:\n *   setLevel\n *   addHandler / getHandlers\n *   setParent / getParent\n *   setUseParentHandlers / getUseParentHandlers\n */\npublic abstract class AbstractDelegatingLogger extends Logger {\n    protected AbstractDelegatingLogger(String name, String resourceBundleName) {\n        super(name, resourceBundleName);\n    }\n    public void log(LogRecord record) {\n        if (isLoggable(record.getLevel())) {\n            doLog(record);\n        }\n    }\n    public void log(Level level, String msg) {\n        if (isLoggable(level)) {\n            LogRecord lr = new LogRecord(level, msg);\n            doLog(lr);\n        }\n    }\n    public void log(Level level, String msg, Object param1) {\n        if (isLoggable(level)) {\n            LogRecord lr = new LogRecord(level, msg);\n            Object[] params = {param1 };\n            lr.setParameters(params);\n            doLog(lr);\n        }\n    }\n    public void log(Level level, String msg, Object[] params) {\n        if (isLoggable(level)) {\n            LogRecord lr = new LogRecord(level, msg);\n            lr.setParameters(params);\n            doLog(lr);\n        }\n    }\n    public void log(Level level, String msg, Throwable thrown) {\n        if (isLoggable(level)) {\n            LogRecord lr = new LogRecord(level, msg);\n            lr.setThrown(thrown);\n            doLog(lr);\n        }\n    }\n    public void logp(Level level, String sourceClass, String sourceMethod, String msg) {\n        if (isLoggable(level)) {\n            LogRecord lr = new LogRecord(level, msg);\n            lr.setSourceClassName(sourceClass);\n            lr.setSourceMethodName(sourceMethod);\n            doLog(lr);\n        }\n    }\n    public void logp(Level level, String sourceClass, String sourceMethod, String msg, Object param1) {\n        if (isLoggable(level)) {\n            LogRecord lr = new LogRecord(level, msg);\n            lr.setSourceClassName(sourceClass);\n            lr.setSourceMethodName(sourceMethod);\n            Object[] params = {param1 };\n            lr.setParameters(params);\n            doLog(lr);\n        }\n    }\n    public void logp(Level level, String sourceClass, String sourceMethod, String msg, Object[] params) {\n        if (isLoggable(level)) {\n            LogRecord lr = new LogRecord(level, msg);\n            lr.setSourceClassName(sourceClass);\n            lr.setSourceMethodName(sourceMethod);\n            lr.setParameters(params);\n            doLog(lr);\n        }\n    }\n    public void logp(Level level, String sourceClass, String sourceMethod, String msg, Throwable thrown) {\n        if (isLoggable(level)) {\n            LogRecord lr = new LogRecord(level, msg);\n            lr.setSourceClassName(sourceClass);\n            lr.setSourceMethodName(sourceMethod);\n            lr.setThrown(thrown);\n            doLog(lr);\n        }\n    }\n    @Deprecated\n    public void logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg) {\n        if (isLoggable(level)) {\n            LogRecord lr = new LogRecord(level, msg);\n            lr.setSourceClassName(sourceClass);\n            lr.setSourceMethodName(sourceMethod);\n            doLog(lr, bundleName);\n        }\n    }\n    @Deprecated\n    public void logrb(Level level, String sourceClass, String sourceMethod,\n                      String bundleName, String msg, Object param1) {\n        if (isLoggable(level)) {\n            LogRecord lr = new LogRecord(level, msg);\n            lr.setSourceClassName(sourceClass);\n            lr.setSourceMethodName(sourceMethod);\n            Object[] params = {param1 };\n            lr.setParameters(params);\n            doLog(lr, bundleName);\n        }\n    }\n    @Deprecated\n    public void logrb(Level level, String sourceClass, String sourceMethod,\n                      String bundleName, String msg, Object[] params) {\n        if (isLoggable(level)) {\n            LogRecord lr = new LogRecord(level, msg);\n            lr.setSourceClassName(sourceClass);\n            lr.setSourceMethodName(sourceMethod);\n            lr.setParameters(params);\n            doLog(lr, bundleName);\n        }\n    }\n    @Deprecated\n    public void logrb(Level level, String sourceClass, String sourceMethod,\n                      String bundleName, String msg, Throwable thrown) {\n        if (isLoggable(level)) {\n            LogRecord lr = new LogRecord(level, msg);\n            lr.setSourceClassName(sourceClass);\n            lr.setSourceMethodName(sourceMethod);\n            lr.setThrown(thrown);\n            doLog(lr, bundleName);\n        }\n    }\n    public void entering(String sourceClass, String sourceMethod) {\n        if (isLoggable(Level.FINER)) {\n            logp(Level.FINER, sourceClass, sourceMethod, \"ENTRY\");\n        }\n    }\n    public void entering(String sourceClass, String sourceMethod, Object param1) {\n        if (isLoggable(Level.FINER)) {\n            Object[] params = {param1 };\n            logp(Level.FINER, sourceClass, sourceMethod, \"ENTRY {0}\", params);\n        }\n    }\n    public void entering(String sourceClass, String sourceMethod, Object[] params) {\n        if (isLoggable(Level.FINER)) {\n            String msg = \"ENTRY\";\n            if (params == null) {\n                logp(Level.FINER, sourceClass, sourceMethod, msg);\n                return;\n            }\n            StringBuilder builder = new StringBuilder(msg);\n            for (int i = 0; i < params.length; i++) {\n                builder.append(\" {\");\n                builder.append(Integer.toString(i));\n                builder.append('}');\n            }\n            logp(Level.FINER, sourceClass, sourceMethod, builder.toString(), params);\n        }\n    }\n    public void exiting(String sourceClass, String sourceMethod) {\n        if (isLoggable(Level.FINER)) {\n            logp(Level.FINER, sourceClass, sourceMethod, \"RETURN\");\n        }\n    }\n    public void exiting(String sourceClass, String sourceMethod, Object result) {\n        if (isLoggable(Level.FINER)) {\n            Object[] params = {result };\n            logp(Level.FINER, sourceClass, sourceMethod, \"RETURN {0}\", params);\n        }\n    }\n    public void throwing(String sourceClass, String sourceMethod, Throwable thrown) {\n        if (isLoggable(Level.FINER)) {\n            LogRecord lr = new LogRecord(Level.FINER, \"THROW\");\n            lr.setSourceClassName(sourceClass);\n            lr.setSourceMethodName(sourceMethod);\n            lr.setThrown(thrown);\n            doLog(lr);\n        }\n    }\n    public void severe(String msg) {\n        if (isLoggable(Level.SEVERE)) {\n            LogRecord lr = new LogRecord(Level.SEVERE, msg);\n            doLog(lr);\n        }\n    }\n    public void warning(String msg) {\n        if (isLoggable(Level.WARNING)) {\n            LogRecord lr = new LogRecord(Level.WARNING, msg);\n            doLog(lr);\n        }\n    }\n    public void info(String msg) {\n        if (isLoggable(Level.INFO)) {\n            LogRecord lr = new LogRecord(Level.INFO, msg);\n            doLog(lr);\n        }\n    }\n    public void config(String msg) {\n        if (isLoggable(Level.CONFIG)) {\n            LogRecord lr = new LogRecord(Level.CONFIG, msg);\n            doLog(lr);\n        }\n    }\n    public void fine(String msg) {\n        if (isLoggable(Level.FINE)) {\n            LogRecord lr = new LogRecord(Level.FINE, msg);\n            doLog(lr);\n        }\n    }\n<fim_suffix>    public void finer(String msg) {\n        if (isLoggable(Level.FINER)) {\n            LogRecord lr = new LogRecord(Level.FINER, msg);\n            doLog(lr);\n        }\n    }<fim_middle>// function below has no smell\n"}