{"text": "<fim_prefix>/***\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.apache.tajo.org.objectweb.asm.optimizer;\nimport java.util.Arrays;\nimport org.apache.tajo.org.objectweb.asm.ClassWriter;\nimport org.apache.tajo.org.objectweb.asm.Handle;\n/**\n * A constant pool item.\n * \n * @author Eric Bruneton\n */\nclass Constant {\n    /**\n     * Type of this constant pool item. A single class is used to represent all\n     * constant pool item types, in order to minimize the bytecode size of this\n     * package. The value of this field is I, J, F, D, S, s, C, T, G, M, N, y,\n     * t, [h..p] (for Constant Integer, Long, Float, Double, STR, UTF8, Class,\n     * NameType, Fieldref, Methodref, InterfaceMethodref, InvokeDynamic,\n     * MethodType and MethodHandle constant pool items respectively).\n     * \n     * The 9 variable of MethodHandle constants are stored between h and p.\n     */\n    char type;\n    /**\n     * Value of this item, for an integer item.\n     */\n    int intVal;\n    /**\n     * Value of this item, for a long item.\n     */\n    long longVal;\n    /**\n     * Value of this item, for a float item.\n     */\n    float floatVal;\n    /**\n     * Value of this item, for a double item.\n     */\n    double doubleVal;\n    /**\n     * First part of the value of this item, for items that do not hold a\n     * primitive value.\n     */\n    String strVal1;\n    /**\n     * Second part of the value of this item, for items that do not hold a\n     * primitive value.\n     */\n    String strVal2;\n    /**\n     * Third part of the value of this item, for items that do not hold a\n     * primitive value.\n     */\n    Object objVal3;\n    /**\n     * InvokeDynamic's constant values.\n     */\n    Object[] objVals;\n    /**\n     * The hash code value of this constant pool item.\n     */\n    int hashCode;\n    Constant() {\n    }\n    Constant(final Constant i) {\n        type = i.type;\n        intVal = i.intVal;\n        longVal = i.longVal;\n        floatVal = i.floatVal;\n        doubleVal = i.doubleVal;\n        strVal1 = i.strVal1;\n        strVal2 = i.strVal2;\n        objVal3 = i.objVal3;\n        objVals = i.objVals;\n        hashCode = i.hashCode;\n    }\n    /**\n     * Sets this item to an integer item.\n     * \n     * @param intVal\n     *            the value of this item.\n     */\n    void set(final int intVal) {\n        this.type = 'I';\n        this.intVal = intVal;\n        this.hashCode = 0x7FFFFFFF & (type + intVal);\n    }\n    /**\n     * Sets this item to a long item.\n     * \n     * @param longVal\n     *            the value of this item.\n     */\n    void set(final long longVal) {\n        this.type = 'J';\n        this.longVal = longVal;\n        this.hashCode = 0x7FFFFFFF & (type + (int) longVal);\n    }\n    /**\n     * Sets this item to a float item.\n     * \n     * @param floatVal\n     *            the value of this item.\n     */\n    void set(final float floatVal) {\n        this.type = 'F';\n        this.floatVal = floatVal;\n        this.hashCode = 0x7FFFFFFF & (type + (int) floatVal);\n    }\n    /**\n     * Sets this item to a double item.\n     * \n     * @param doubleVal\n     *            the value of this item.\n     */\n    void set(final double doubleVal) {\n        this.type = 'D';\n        this.doubleVal = doubleVal;\n        this.hashCode = 0x7FFFFFFF & (type + (int) doubleVal);\n    }\n    /**\n     * Sets this item to an item that do not hold a primitive value.\n     * \n     * @param type\n     *            the type of this item.\n     * @param strVal1\n     *            first part of the value of this item.\n     * @param strVal2\n     *            second part of the value of this item.\n     * @param strVal3\n     *            third part of the value of this item.\n     */\n    void set(final char type, final String strVal1, final String strVal2,\n            final String strVal3) {\n        this.type = type;\n        this.strVal1 = strVal1;\n        this.strVal2 = strVal2;\n        this.objVal3 = strVal3;\n        switch (type) {\n        case 's':\n        case 'S':\n        case 'C':\n        case 't':\n            hashCode = 0x7FFFFFFF & (type + strVal1.hashCode());\n            return;\n        case 'T':\n            hashCode = 0x7FFFFFFF & (type + strVal1.hashCode()\n                    * strVal2.hashCode());\n            return;\n            // case 'G':\n            // case 'M':\n            // case 'N':\n            // case 'h' ... 'p':\n        default:\n            hashCode = 0x7FFFFFFF & (type + strVal1.hashCode()\n                    * strVal2.hashCode() * strVal3.hashCode());\n        }\n    }\n    /**\n     * Set this item to an InvokeDynamic item.\n     * \n     * @param name\n     *            invokedynamic's name.\n     * @param desc\n     *            invokedynamic's descriptor.\n     * @param bsm\n     *            bootstrap method.\n     * @param bsmArgs\n     *            bootstrap method constant arguments.\n     */\n<fim_suffix>    void set(final String name, final String desc, final Handle bsm,\n            final Object[] bsmArgs) {\n        this.type = 'y';\n        this.strVal1 = name;\n        this.strVal2 = desc;\n        this.objVal3 = bsm;\n        this.objVals = bsmArgs;\n        int hashCode = 'y' + name.hashCode() * desc.hashCode() * bsm.hashCode();\n        for (Object bsmArg : bsmArgs) {\n            hashCode *= bsmArg.hashCode();\n        }\n        this.hashCode = 0x7FFFFFFF & hashCode;\n    }\n    void write(final ClassWriter cw) {\n        switch (type) {\n        case 'I':\n            cw.newConst(new Integer(intVal));\n            break;\n        case 'J':\n            cw.newConst(new Long(longVal));\n            break;\n        case 'F':\n            cw.newConst(new Float(floatVal));\n            break;\n        case 'D':\n            cw.newConst(new Double(doubleVal));\n            break;\n        case 'S':\n            cw.newConst(strVal1);\n            break;\n        case 's':\n            cw.newUTF8(strVal1);\n            break;\n        case 'C':\n            cw.newClass(strVal1);\n            break;\n        case 'T':\n            cw.newNameType(strVal1, strVal2);\n            break;\n        case 'G':\n            cw.newField(strVal1, strVal2, (String) objVal3);\n            break;\n        case 'M':\n            cw.newMethod(strVal1, strVal2, (String) objVal3, false);\n            break;\n        case 'N':\n            cw.newMethod(strVal1, strVal2, (String) objVal3, true);\n            break;<fim_middle>// function below has no smell\n"}