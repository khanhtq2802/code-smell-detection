{"text": "<fim_prefix>/**\n * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.\n */\npackage com.oracle.bmc.dns.internal.http;\n\nimport com.oracle.bmc.dns.model.*;\nimport com.oracle.bmc.dns.requests.*;\nimport com.oracle.bmc.dns.responses.*;\nimport org.apache.commons.lang3.Validate;\n\n@javax.annotation.Generated(value = \"OracleSDKGenerator\", comments = \"API Version: 20180115\")\n@lombok.extern.slf4j.Slf4j\npublic class CreateSteeringPolicyConverter {\n    private static final com.oracle.bmc.http.internal.ResponseConversionFunctionFactory\n            RESPONSE_CONVERSION_FACTORY =\n                    new com.oracle.bmc.http.internal.ResponseConversionFunctionFactory();\n\n<fim_suffix>    public static CreateSteeringPolicyRequest interceptRequest(\n            CreateSteeringPolicyRequest request) {\n\n        return request;\n    }\n\n    public static com.oracle.bmc.http.internal.WrappedInvocationBuilder fromRequest(\n            com.oracle.bmc.http.internal.RestClient client, CreateSteeringPolicyRequest request) {\n        Validate.notNull(request, \"request instance is required\");\n        Validate.notNull(\n                request.getCreateSteeringPolicyDetails(),\n                \"createSteeringPolicyDetails is required\");\n\n        com.oracle.bmc.http.internal.WrappedWebTarget target =\n                client.getBaseTarget().path(\"/20180115\").path(\"steeringPolicies\");\n\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib = target.request();\n\n        ib.accept(javax.ws.rs.core.MediaType.APPLICATION_JSON);\n\n        if (request.getOpcRetryToken() != null) {\n            ib.header(\"opc-retry-token\", request.getOpcRetryToken());\n        }\n\n        return ib;\n    }\n\n    public static com.google.common.base.Function<\n                    javax.ws.rs.core.Response, CreateSteeringPolicyResponse>\n            fromResponse() {\n        final com.google.common.base.Function<\n                        javax.ws.rs.core.Response, CreateSteeringPolicyResponse>\n                transformer =\n                        new com.google.common.base.Function<\n                                javax.ws.rs.core.Response, CreateSteeringPolicyResponse>() {\n                            @Override\n                            public CreateSteeringPolicyResponse apply(\n                                    javax.ws.rs.core.Response rawResponse) {\n                                LOG.trace(\n                                        \"Transform function invoked for CreateSteeringPolicyResponse\");\n                                com.google.common.base.Function<\n                                                javax.ws.rs.core.Response,\n                                                com.oracle.bmc.http.internal.WithHeaders<\n                                                        SteeringPolicy>>\n                                        responseFn =\n                                                RESPONSE_CONVERSION_FACTORY.create(\n                                                        SteeringPolicy.class);\n\n                                com.oracle.bmc.http.internal.WithHeaders<SteeringPolicy> response =\n                                        responseFn.apply(rawResponse);\n                                javax.ws.rs.core.MultivaluedMap<String, String> headers =\n                                        response.getHeaders();\n\n                                CreateSteeringPolicyResponse.Builder builder =\n                                        CreateSteeringPolicyResponse.builder();\n\n                                builder.steeringPolicy(response.getItem());\n\n                                com.google.common.base.Optional<java.util.List<String>>\n                                        opcRequestIdHeader =\n                                                com.oracle.bmc.http.internal.HeaderUtils.get(\n                                                        headers, \"opc-request-id\");\n                                if (opcRequestIdHeader.isPresent()) {\n                                    builder.opcRequestId(\n                                            com.oracle.bmc.http.internal.HeaderUtils.toValue(\n                                                    \"opc-request-id\",\n                                                    opcRequestIdHeader.get().get(0),\n                                                    String.class));\n                                }\n\n                                com.google.common.base.Optional<java.util.List<String>> eTagHeader =\n                                        com.oracle.bmc.http.internal.HeaderUtils.get(\n                                                headers, \"ETag\");\n                                if (eTagHeader.isPresent()) {\n                                    builder.eTag(\n                                            com.oracle.bmc.http.internal.HeaderUtils.toValue(\n                                                    \"ETag\", eTagHeader.get().get(0), String.class));\n                                }\n\n                                CreateSteeringPolicyResponse responseWrapper = builder.build();\n\n                                return responseWrapper;\n                            }\n                        };\n        return transformer;\n    }\n}<fim_middle>// function below has no smell\n"}