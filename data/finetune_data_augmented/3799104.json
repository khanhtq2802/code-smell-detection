{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.alibaba.jstorm.utils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.google.common.base.Joiner;\nimport org.apache.commons.io.FileUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * @author yannian\n */\npublic class PathUtils {\n    static Logger LOG = LoggerFactory.getLogger(PathUtils.class);\n\n    public static final String SEPARATOR = \"/\";\n\n    /**\n     * split path as list\n     */\n    public static List<String> tokenize_path(String path) {\n        String[] tokens = path.split(SEPARATOR);\n        java.util.ArrayList<String> rtn = new ArrayList<>();\n        for (String str : tokens) {\n            if (!str.isEmpty()) {\n                rtn.add(str);\n            }\n        }\n        return rtn;\n    }\n\n    public static String toks_to_path(List<String> tokens) {\n        StringBuilder buff = new StringBuilder();\n        buff.append(SEPARATOR);\n        int size = tokens.size();\n        for (int i = 0; i < size; i++) {\n            buff.append(tokens.get(i));\n            if (i < (size - 1)) {\n                buff.append(SEPARATOR);\n            }\n\n        }\n        return buff.toString();\n    }\n\n    public static String normalize_path(String path) {\n        return toks_to_path(tokenize_path(path));\n    }\n\n    public static String parent_path(String path) {\n        List<String> tokens = tokenize_path(path);\n        int size = tokens.size();\n        if (size > 0) {\n            tokens.remove(size - 1);\n        }\n        return toks_to_path(tokens);\n    }\n\n    public static String full_path(String parent, String name) {\n        return normalize_path(parent + SEPARATOR + name);\n    }\n\n    public static boolean exists_file(String path) {\n        return (new File(path)).exists();\n    }\n\n    public static void rmr(String path) throws IOException {\n        LOG.debug(\"Rmr path \" + path);\n        if (exists_file(path)) {\n            FileUtils.forceDelete(new File(path));\n        }\n    }\n\n    public static void local_mkdirs(String path) throws IOException {\n        LOG.debug(\"Making dirs at\" + path);\n        FileUtils.forceMkdir(new File(path));\n    }\n\n<fim_suffix>    public static void rmpath(String path) {\n        LOG.debug(\"Removing path \" + path);\n        boolean succ = (new File(path)).delete();\n        if (!succ) {\n            throw new RuntimeException(\"Failed to delete \" + path);\n        }\n    }\n\n    public static void touch(String path) throws IOException {\n        LOG.debug(\"Touching file at \" + path);\n        boolean success = (new File(path)).createNewFile();\n        if (!success) {\n            throw new RuntimeException(\"Failed to touch \" + path);\n        }\n    }\n\n    public static List<String> read_dir_contents(String dir) {\n        ArrayList<String> rtn = new ArrayList<>();\n        if (exists_file(dir)) {\n            File[] list = (new File(dir)).listFiles();\n            if (list == null) {\n                return rtn;\n            }\n            for (File f : list) {\n                rtn.add(f.getName());\n            }\n        }\n        return rtn;\n    }\n\n    public static String getCanonicalPath(String fileName) {\n        String ret = null;\n        File file = new File(fileName);\n        if (file.exists()) {\n            try {\n                ret = file.getCanonicalPath();\n            } catch (IOException e) {\n                LOG.error(\"\", e);\n            }\n        } else {\n            LOG.warn(fileName + \" doesn't exist \");\n        }\n\n        return ret;\n    }\n\n    public static String join(String... pathList) {\n        return Joiner.on(File.separator).join(pathList);\n    }\n\n    public static void mv(String src, String dest) {\n        try {\n            FileUtils.moveFile(new File(src), new File(dest));\n        } catch (IOException ignored) {\n        }\n    }\n\n}<fim_middle>// function below has no smell\n"}