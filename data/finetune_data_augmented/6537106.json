{"text": "<fim_prefix>            }\n            isUpToDate = isOn && !isShade() && !checkPowerSensorRefreshPriorityNever(powerSensorType)\n                    ? checkSensorRefreshTime(powerSensorType)\n                    : true;\n            if (!isUpToDate) {\n                if (!getSensorDataReadingInitialized(powerSensorType)) {\n                    deviceStateUpdates.add(new DeviceStateUpdateImpl(powerSensorType, 0));\n                    setSensorDataReadingInitialized(powerSensorType, true);\n                }\n                return false;\n            }\n            return true;\n        }\n        throw new IllegalArgumentException(\"powerSensorType is null or not a power sensor type.\");\n    }\n    private boolean checkSensorRefreshTime(SensorEnum sensorType) {\n        if (sensorType != null) {\n            DeviceSensorValue devSenVal = getDeviceSensorValue(sensorType);\n            if (devSenVal.getValid()) {\n                int refresh = Config.DEFAULT_SENSORDATA_REFRESH_INTERVAL;\n                if (config != null) {\n                    refresh = config.getSensordataRefreshInterval();\n                }\n                return (devSenVal.getTimestamp().getTime() + refresh) > System.currentTimeMillis();\n            }\n        }\n        return false;\n    }\n    @Override\n    public boolean isSensorDataUpToDate() {\n        boolean isUpToDate = true;\n        for (SensorEnum sensorType : devicePowerSensorTypes) {\n            isUpToDate = isPowerSensorUpToDate(sensorType);\n        }\n        return isUpToDate;\n    }\n    @Override\n    public void setSensorDataRefreshPriority(String activePowerRefreshPriority, String electricMeterRefreshPriority,\n            String outputCurrentRefreshPriority) {\n        if (checkPriority(activePowerRefreshPriority)) {\n            ((String[]) powerSensorRefresh[REFRESH_ACTIVE_POWER_ARRAY_FIELD])[REFRESH_PRIORITY_ARRAY_FIELD] = activePowerRefreshPriority;\n        }\n        if (checkPriority(outputCurrentRefreshPriority)) {\n            ((String[]) powerSensorRefresh[REFRESH_OUTPUT_CURRENT_ARRAY_FIELD])[REFRESH_PRIORITY_ARRAY_FIELD] = outputCurrentRefreshPriority;\n        }\n        if (checkPriority(electricMeterRefreshPriority)) {\n            ((String[]) powerSensorRefresh[REFRESH_ELECTRIC_METER_ARRAY_FIELD])[REFRESH_PRIORITY_ARRAY_FIELD] = electricMeterRefreshPriority;\n        }\n    }\n    @Override\n    public void setSensorDataRefreshPriority(SensorEnum powerSensorType, String refreshPriority) {\n        if (checkPriority(refreshPriority)) {\n            String[] powerSensorRefresh = getPowerSensorRefresh(powerSensorType);\n            if (powerSensorRefresh != null) {\n                powerSensorRefresh[REFRESH_ACTIVE_POWER_ARRAY_FIELD] = refreshPriority;\n            }\n        }\n    }\n    @Override\n    public String getPowerSensorRefreshPriority(SensorEnum powerSensorType) {\n        if (powerSensorType.equals(SensorEnum.ACTIVE_POWER) && outputMode.equals(OutputModeEnum.WIPE) && !isOn) {\n            return Config.REFRESH_PRIORITY_LOW;\n        }\n        String[] powerSensorRefresh = getPowerSensorRefresh(powerSensorType);\n        if (powerSensorRefresh != null) {\n            return powerSensorRefresh[REFRESH_PRIORITY_ARRAY_FIELD];\n        }\n        return null;\n    }\n    @Override\n    public boolean checkPowerSensorRefreshPriorityNever(SensorEnum powerSensorType) {\n        if (getPowerSensorRefreshPriority(powerSensorType) != null) {\n            return getPowerSensorRefreshPriority(powerSensorType).equals(Config.REFRESH_PRIORITY_NEVER);\n        }\n        return true;\n    }\n    private void setAllSensorDataRefreshPrioritiesToNever() {\n        for (short i = 0; i < powerSensorRefresh.length; i++) {\n            ((String[]) powerSensorRefresh[i])[REFRESH_PRIORITY_ARRAY_FIELD] = Config.REFRESH_PRIORITY_NEVER;\n        }\n    }\n    private void setSensorDataReadingInitialized(SensorEnum powerSensorType, Boolean flag) {\n        String[] powerSensorRefresh = getPowerSensorRefresh(powerSensorType);\n        if (powerSensorRefresh != null) {\n            powerSensorRefresh[READING_INITIALIZED_ARRAY_FIELD] = flag.toString();\n        }\n    }\n    private boolean getSensorDataReadingInitialized(SensorEnum powerSensorType) {\n        String[] powerSensorRefresh = getPowerSensorRefresh(powerSensorType);\n        if (powerSensorRefresh != null) {\n            return Boolean.valueOf(powerSensorRefresh[READING_INITIALIZED_ARRAY_FIELD]);\n        }\n        return false;\n    }\n    private String[] getPowerSensorRefresh(SensorEnum powerSensorType) {\n        switch (powerSensorType) {\n            case ACTIVE_POWER:\n                return (String[]) powerSensorRefresh[REFRESH_ACTIVE_POWER_ARRAY_FIELD];\n            case OUTPUT_CURRENT:\n                return (String[]) powerSensorRefresh[REFRESH_OUTPUT_CURRENT_ARRAY_FIELD];\n            case ELECTRIC_METER:\n                return (String[]) powerSensorRefresh[REFRESH_ELECTRIC_METER_ARRAY_FIELD];\n            case POWER_CONSUMPTION:\n                return (String[]) powerSensorRefresh[REFRESH_POWER_CONSUMPTION_ARRAY_FIELD];\n            default:\n                return null;\n        }\n    }\n    private boolean checkPriority(String priority) {\n        switch (priority) {\n            case Config.REFRESH_PRIORITY_HIGH:\n            case Config.REFRESH_PRIORITY_MEDIUM:\n            case Config.REFRESH_PRIORITY_LOW:\n            case Config.REFRESH_PRIORITY_NEVER:\n                return true;\n            default:\n                logger.error(\"Sensor data update priority do not exist! Please check the input!\");\n                return false;\n        }\n    }\n    @Override\n    public boolean isDeviceUpToDate() {\n        isSensorDataUpToDate();\n        return this.deviceStateUpdates.isEmpty();\n    }\n    @Override\n    public DeviceStateUpdate getNextDeviceUpdateState() {\n        return !this.deviceStateUpdates.isEmpty() ? this.deviceStateUpdates.remove(0) : null;\n    }\n    private int internalSetOutputValue(int value) {\n        if (isShade()) {\n            slatPosition = value;\n            if (slatPosition <= 0) {\n                slatPosition = 0;\n                isOpen = false;\n            } else {\n                isOpen = true;\n            }\n            return slatPosition;\n        } else {\n            outputValue = (short) value;\n            if (outputValue <= 0) {\n                internalSetOff();\n            } else {\n                if (isSwitch()) {\n                    if (outputValue < switchPercentOff) {\n                        internalSetOff();\n                        isOn = false;\n                    } else {\n                        isOn = true;\n                        setCachedMeterData();\n                    }\n                } else {\n                    isOn = true;\n                    setCachedMeterData();\n                }\n            }\n            return outputValue;\n        }\n    }\n    private void internalSetOff() {\n        this.isOn = false;\n        logger.debug(\"internal set OFF \");\n        if (!checkPowerSensorRefreshPriorityNever(SensorEnum.ACTIVE_POWER)) {\n            if (getSensorDataReadingInitialized(SensorEnum.ACTIVE_POWER)) {\n                deviceStateUpdates.add(new DeviceStateUpdateImpl(SensorEnum.ACTIVE_POWER, -1));\n                logger.debug(\"internal set sensor to 0\");\n            }\n            setDsSensorValue(SensorEnum.ACTIVE_POWER, 0);\n        }\n        if (!checkPowerSensorRefreshPriorityNever(SensorEnum.OUTPUT_CURRENT)) {\n            if (getSensorDataReadingInitialized(SensorEnum.OUTPUT_CURRENT)) {\n                deviceStateUpdates.add(new DeviceStateUpdateImpl(SensorEnum.OUTPUT_CURRENT, -1));\n            }\n            setDsSensorValue(SensorEnum.OUTPUT_CURRENT, 0);\n        }\n        if (!checkPowerSensorRefreshPriorityNever(SensorEnum.POWER_CONSUMPTION)) {\n            if (getSensorDataReadingInitialized(SensorEnum.POWER_CONSUMPTION)) {\n                deviceStateUpdates.add(new DeviceStateUpdateImpl(SensorEnum.POWER_CONSUMPTION, -1));\n            }\n            setDsSensorValue(SensorEnum.POWER_CONSUMPTION, 0);\n        }\n    }\n    private short internalSetAngleValue(int value) {\n        if (value < 0) {\n            slatAngle = 0;\n        }\n        if (value > maxSlatAngle) {\n            slatAngle = maxSlatAngle;\n        } else {\n            slatAngle = (short) value;\n        }\n        return slatAngle;\n    }\n    // Device sensors\n    @Override\n    public List<SensorEnum> getSensorTypes() {\n        List<SensorEnum> list = new ArrayList<SensorEnum>(devicePowerSensorTypes);\n        list.addAll(deviceClimateSensorTypes);\n        return list;\n    }\n    @Override\n    public List<SensorEnum> getPowerSensorTypes() {\n        return devicePowerSensorTypes;\n    }\n    @Override\n    public List<SensorEnum> getClimateSensorTypes() {\n        return deviceClimateSensorTypes;\n    }\n    @Override\n    public List<DeviceSensorValue> getDeviceSensorValues() {\n        return deviceSensorValues;\n    }\n<fim_suffix>    @Override\n    public boolean supportsSensorType(SensorEnum sensorType) {\n        if (sensorType != null) {\n            return getSensorTypes().contains(sensorType);\n        }\n        return false;\n    }<fim_middle>// function below has no smell\n"}