{"text": "<fim_prefix>/*\n * Copyright 2010 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.springsource.greenhouse.signup;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.inject.Inject;\nimport javax.validation.Valid;\n\nimport org.hibernate.validator.util.LazyValidatorFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.web.ProviderSignInUtils;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.util.StringUtils;\nimport org.springframework.validation.BindException;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.FieldError;\nimport org.springframework.validation.ValidationUtils;\nimport org.springframework.validation.Validator;\nimport org.springframework.validation.beanvalidation.SpringValidatorAdapter;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.context.request.WebRequest;\n\nimport com.springsource.greenhouse.account.Account;\nimport com.springsource.greenhouse.account.AccountRepository;\nimport com.springsource.greenhouse.signup.SignupHelper.SignupCallback;\nimport com.springsource.greenhouse.utils.Message;\nimport com.springsource.greenhouse.utils.MessageType;\n\n/**\n * UI Controller for signing up new members.\n * @author Keith Donald\n */\n<fim_suffix>@Controller\npublic class SignupController {\n\n\tprivate final SignupHelper signupHelper;\n\t\n\t@Inject\n\tpublic SignupController(AccountRepository accountRepository, SignedUpGateway gateway) {\n\t\tthis.signupHelper = new SignupHelper(accountRepository, gateway);\n\t}\n\n\t/**\n\t * Render a signup form to the person as HTML in their web browser.\n\t */\n\t@RequestMapping(value=\"/signup\", method=RequestMethod.GET)\n\tpublic SignupForm signupForm(WebRequest request) {\n\t\tConnection<?> connection = ProviderSignInUtils.getConnection(request);\n\t\tif (connection != null) {\n\t\t\trequest.setAttribute(\"message\", new Message(MessageType.INFO, \"Your \" + StringUtils.capitalize(connection.getKey().getProviderId()) + \" account is not associated with a Greenhouse account. If you're new, please sign up.\"), WebRequest.SCOPE_REQUEST);\n\t\t\treturn SignupForm.fromProviderUser(connection.fetchUserProfile());\n\t\t} else {\n\t\t\treturn new SignupForm();\n\t\t}\n\t}\n\n\t/**\n\t * Process a signup form submission.\n\t * Delegate to a {@link SignupHelper} to actually complete the signin transaction.\n\t * Redirects the new member to the application home page on successful sign-in.\n\t */\n\t@RequestMapping(value=\"/signup\", method=RequestMethod.POST)\n\tpublic String signup(@Valid SignupForm form, BindingResult formBinding, final WebRequest request) {\n\t\tif (formBinding.hasErrors()) {\n\t\t\treturn null;\n\t\t}\n\t\tboolean result = signupHelper.signup(form, formBinding, new SignupCallback() {\n\t\t\tpublic void postSignup(Account account) {\n\t\t\t\tProviderSignInUtils.handlePostSignUp(account.getId().toString(), request);\n\t\t\t}\n\t\t});\n\t\treturn result ? \"redirect:/\" : null;\n\t}\n\t\n\t@RequestMapping(value=\"/signup\", method=RequestMethod.POST, consumes=\"application/json\")\n\tpublic ResponseEntity<Map<String, Object>> signupFromApi(@RequestBody SignupForm form) {\n\t\t\n\t\tBindingResult formBinding = validate(form); // Temporary manual validation until SPR-9826 is fixed.\n\t\t\n\t\tif (formBinding.hasErrors()) {\n\t\t\tHashMap<String, Object> errorResponse = new HashMap<String, Object>();\n\t\t\terrorResponse.put(\"message\", \"Validation error\");\n\t\t\terrorResponse.put(\"errors\", getErrorsMap(formBinding));\t\t\t\n\t\t\treturn new ResponseEntity<Map<String, Object>>(errorResponse, HttpStatus.BAD_REQUEST);\n\t\t}\n\t\tboolean result = signupHelper.signup(form, formBinding);\n\t\t\n\t\tif (result) {\n\t\t\tHashMap<String, Object> errorResponse = new HashMap<String, Object>();\n\t\t\terrorResponse.put(\"message\", \"Account created\");\n\t\t\treturn new ResponseEntity<Map<String, Object>>(errorResponse, HttpStatus.CREATED);\t\t\t\n\t\t} else {\n\t\t\tHashMap<String, Object> errorResponse = new HashMap<String, Object>();\n\t\t\terrorResponse.put(\"message\", \"Account creation error\");\n\t\t\terrorResponse.put(\"errors\", getErrorsMap(formBinding));\t\t\t\n\t\t\treturn new ResponseEntity<Map<String, Object>>(errorResponse, HttpStatus.BAD_REQUEST);\t\t\t\n\t\t}\n\t}\n\n\tprivate BindException validate(SignupForm form) {\n\t\tBindException errors;\n\t\terrors = new BindException(form, \"signupForm\");\n\t\tLazyValidatorFactory lvf = new LazyValidatorFactory();\n\t\tValidator validator = new SpringValidatorAdapter(lvf.getValidator());\n\t\tValidationUtils.invokeValidator(validator, form, errors);\n\t\treturn errors;\n\t}\n\n\tprivate List<Map<String, String>> getErrorsMap(BindingResult formBinding) {\n\t\tList<FieldError> fieldErrors = formBinding.getFieldErrors();\n\t\tList<Map<String, String>> errors = new ArrayList<Map<String,String>>(fieldErrors.size());\t\t\t\t\t\t\n\t\tfor (FieldError fieldError : fieldErrors) {\n\t\t\tMap<String, String> fieldErrorMap = new HashMap<String, String>();\n\t\t\tfieldErrorMap.put(\"field\", fieldError.getField());\n\t\t\tfieldErrorMap.put(\"code\", fieldError.getCode());\n\t\t\tfieldErrorMap.put(\"message\", fieldError.getDefaultMessage());\n\t\t\terrors.add(fieldErrorMap);\n\t\t}\n\t\treturn errors;\n\t}\n\t\n}<fim_middle>// class below is blob\n"}