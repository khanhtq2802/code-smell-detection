{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.phoenix.iterate;\n\nimport java.sql.SQLException;\nimport java.util.Collections;\nimport java.util.List;\n\nimport com.google.common.base.Preconditions;\nimport com.google.common.collect.Lists;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.hbase.HConstants;\nimport org.apache.hadoop.hbase.HRegionLocation;\nimport org.apache.hadoop.hbase.PrivateCellUtil;\nimport org.apache.hadoop.hbase.client.RegionInfo;\nimport org.apache.hadoop.hbase.client.Scan;\nimport org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil;\nimport org.apache.hadoop.hbase.shaded.protobuf.generated.SnapshotProtos.SnapshotDescription;\nimport org.apache.hadoop.hbase.shaded.protobuf.generated.SnapshotProtos.SnapshotRegionManifest;\nimport org.apache.hadoop.hbase.snapshot.SnapshotDescriptionUtils;\nimport org.apache.hadoop.hbase.snapshot.SnapshotManifest;\nimport org.apache.phoenix.compile.QueryPlan;\nimport org.apache.phoenix.compile.StatementContext;\nimport org.apache.phoenix.mapreduce.util.PhoenixConfigurationUtil;\n\n/**\n * Scan grouper that creates a scan group if a plan is row key ordered or if a\n * scan crosses region boundaries\n */\npublic class MapReduceParallelScanGrouper implements ParallelScanGrouper {\n\n\tprivate static final MapReduceParallelScanGrouper INSTANCE = new MapReduceParallelScanGrouper();\n\n    public static MapReduceParallelScanGrouper getInstance() {\n\t\treturn INSTANCE;\n\t}\n\n   private MapReduceParallelScanGrouper() {}\n\n\t@Override\n\tpublic boolean shouldStartNewScan(QueryPlan plan, List<Scan> scans,\n\t\t\tbyte[] startKey, boolean crossedRegionBoundary) {\n\t\treturn !plan.isRowKeyOrdered() || crossedRegionBoundary;\n\t}\n\n\t@Override\n\tpublic List<HRegionLocation> getRegionBoundaries(StatementContext context, byte[] tableName) throws SQLException {\n\t\tString snapshotName;\n\t\tConfiguration conf = context.getConnection().getQueryServices().getConfiguration();\n\t\tif((snapshotName = getSnapshotName(conf)) != null) {\n\t\t\ttry {\n\t\t\t\tPath rootDir = new Path(conf.get(HConstants.HBASE_DIR));\n\t\t\t\tFileSystem fs = rootDir.getFileSystem(conf);\n\t\t\t\tPath snapshotDir = SnapshotDescriptionUtils.getCompletedSnapshotDir(snapshotName, rootDir);\n\t\t\t\tSnapshotDescription snapshotDescription = SnapshotDescriptionUtils.readSnapshotInfo(fs, snapshotDir);\n\t\t\t\tSnapshotManifest manifest = SnapshotManifest.open(conf, fs, snapshotDir, snapshotDescription);\n\t\t\t\treturn getRegionLocationsFromManifest(manifest);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn context.getConnection().getQueryServices().getAllTableRegions(tableName);\n\t\t}\n\t}\n\n\t/**\n\t * Get list of region locations from SnapshotManifest\n\t * BaseResultIterators assume that regions are sorted using RegionInfo.COMPARATOR\n\t */\n<fim_suffix>\tprivate List<HRegionLocation> getRegionLocationsFromManifest(SnapshotManifest manifest) {\n\t\tList<SnapshotRegionManifest> regionManifests = manifest.getRegionManifests();\n\t\tPreconditions.checkNotNull(regionManifests);\n\n\t\tList<RegionInfo> regionInfos = Lists.newArrayListWithCapacity(regionManifests.size());\n\t\tList<HRegionLocation> hRegionLocations = Lists.newArrayListWithCapacity(regionManifests.size());\n\n\t\tfor (SnapshotRegionManifest regionManifest : regionManifests) {\n\t\t\tRegionInfo regionInfo = ProtobufUtil.toRegionInfo(regionManifest.getRegionInfo());\n\t\t\tif (isValidRegion(regionInfo)) {\n\t\t\t\tregionInfos.add(regionInfo);\n\t\t\t}\n\t\t}\n\n\t\tregionInfos.sort(RegionInfo.COMPARATOR);\n\n\t\tfor (RegionInfo regionInfo : regionInfos) {\n\t\t\thRegionLocations.add(new HRegionLocation(regionInfo, null));\n\t\t}\n\n\t\treturn hRegionLocations;\n\t}\n\n\t// Exclude offline split parent regions\n\tprivate boolean isValidRegion(RegionInfo hri) {\n\t\tif (hri.isOffline() && (hri.isSplit() || hri.isSplitParent())) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate String getSnapshotName(Configuration conf) {\n\t\treturn conf.get(PhoenixConfigurationUtil.SNAPSHOT_NAME_KEY);\n\t}\n\n}<fim_middle>// function below has no smell\n"}