{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.tez.dag.history.events;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport com.google.protobuf.CodedInputStream;\nimport com.google.protobuf.CodedOutputStream;\nimport org.apache.tez.dag.history.HistoryEvent;\nimport org.apache.tez.dag.history.HistoryEventType;\nimport org.apache.tez.dag.history.SummaryEvent;\nimport org.apache.tez.dag.records.TezDAGID;\nimport org.apache.tez.dag.recovery.records.RecoveryProtos.DAGCommitStartedProto;\nimport org.apache.tez.dag.recovery.records.RecoveryProtos.SummaryEventProto;\nimport org.apache.tez.dag.utils.ProtoUtils;\n\npublic class DAGCommitStartedEvent implements HistoryEvent, SummaryEvent {\n\n  private TezDAGID dagID;\n  private long commitStartTime;\n\n  public DAGCommitStartedEvent() {\n  }\n\n  public DAGCommitStartedEvent(TezDAGID dagID, long commitStartTime) {\n    this.dagID = dagID;\n    this.commitStartTime = commitStartTime;\n  }\n\n  @Override\n  public HistoryEventType getEventType() {\n    return HistoryEventType.DAG_COMMIT_STARTED;\n  }\n\n  @Override\n  public boolean isRecoveryEvent() {\n    return true;\n  }\n\n  @Override\n  public boolean isHistoryEvent() {\n    return false;\n  }\n\n  public DAGCommitStartedProto toProto() {\n    return DAGCommitStartedProto.newBuilder()\n        .setDagId(dagID.toString())\n        .build();\n  }\n\n  public void fromProto(DAGCommitStartedProto proto) {\n    this.dagID = TezDAGID.fromString(proto.getDagId());\n  }\n\n  @Override\n  public void toProtoStream(CodedOutputStream outputStream) throws IOException {\n    outputStream.writeMessageNoTag(toProto());\n  }\n\n  @Override\n  public void fromProtoStream(CodedInputStream inputStream) throws IOException {\n    DAGCommitStartedProto proto = inputStream.readMessage(DAGCommitStartedProto.PARSER, null);\n    if (proto == null) {\n      throw new IOException(\"No data found in stream\");\n    }\n    fromProto(proto);\n  }\n\n  @Override\n  public String toString() {\n    return \"dagID=\" + dagID;\n  }\n\n  public TezDAGID getDagID() {\n    return dagID;\n  }\n\n<fim_suffix>  @Override\n  public void toSummaryProtoStream(OutputStream outputStream) throws IOException {\n    ProtoUtils.toSummaryEventProto(dagID, commitStartTime,\n        getEventType(), null).writeDelimitedTo(outputStream);\n  }\n\n  @Override\n  public void fromSummaryProtoStream(SummaryEventProto proto) throws IOException {\n    this.dagID = TezDAGID.fromString(proto.getDagId());\n    this.commitStartTime = proto.getTimestamp();\n  }\n\n  @Override\n  public boolean writeToRecoveryImmediately() {\n    return false;\n  }\n\n}<fim_middle>// function below has no smell\n"}