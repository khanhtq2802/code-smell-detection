{"text": "<fim_prefix>package org.apache.maven.repository.internal;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\nimport com.google.inject.AbstractModule;\nimport com.google.inject.Provides;\nimport com.google.inject.name.Names;\nimport org.apache.maven.model.building.DefaultModelBuilderFactory;\nimport org.apache.maven.model.building.ModelBuilder;\nimport org.eclipse.aether.impl.ArtifactDescriptorReader;\nimport org.eclipse.aether.impl.MetadataGeneratorFactory;\nimport org.eclipse.aether.impl.VersionRangeResolver;\nimport org.eclipse.aether.impl.VersionResolver;\nimport org.eclipse.aether.impl.guice.AetherModule;\n\n/**\n * MavenResolverModule\n */\n<fim_suffix>public final class MavenResolverModule\n    extends AbstractModule\n{\n\n    @Override\n    protected void configure()\n    {\n        install( new AetherModule() );\n        bind( ArtifactDescriptorReader.class ).to( DefaultArtifactDescriptorReader.class ).in( Singleton.class );\n        bind( VersionResolver.class ).to( DefaultVersionResolver.class ).in( Singleton.class );\n        bind( VersionRangeResolver.class ).to( DefaultVersionRangeResolver.class ).in( Singleton.class );\n        bind( MetadataGeneratorFactory.class ).annotatedWith( Names.named( \"snapshot\" ) )\n            .to( SnapshotMetadataGeneratorFactory.class ).in( Singleton.class );\n\n        bind( MetadataGeneratorFactory.class ).annotatedWith( Names.named( \"versions\" ) )\n            .to( VersionsMetadataGeneratorFactory.class ).in( Singleton.class );\n\n        bind( ModelBuilder.class ).toInstance( new DefaultModelBuilderFactory().newInstance() );\n    }\n\n    @Provides\n    @Singleton\n    Set<MetadataGeneratorFactory> provideMetadataGeneratorFactories(\n        @Named( \"snapshot\" ) MetadataGeneratorFactory snapshot,\n        @Named( \"versions\" ) MetadataGeneratorFactory versions )\n    {\n        Set<MetadataGeneratorFactory> factories = new HashSet<>( 2 );\n        factories.add( snapshot );\n        factories.add( versions );\n        return Collections.unmodifiableSet( factories );\n    }\n\n}<fim_middle>// class below has no smell\n"}