{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n*/\n\npackage org.apache.kylin.metadata.model;\n\nimport java.io.Serializable;\n\nimport java.util.Locale;\nimport org.apache.kylin.metadata.datatype.DataType;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.google.common.base.Preconditions;\n\n/**\n * Column Metadata from Source. All name should be uppercase.\n * <p/>\n */\n@SuppressWarnings(\"serial\")\n@JsonAutoDetect(fieldVisibility = Visibility.NONE, getterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE)\npublic class ColumnDesc implements Serializable {\n\n    @JsonProperty(\"id\")\n    private String id;\n\n    @JsonProperty(\"name\")\n    private String name;\n\n    @JsonProperty(\"datatype\")\n    private String datatype;\n\n    @JsonProperty(\"comment\")\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    private String comment;\n\n    @JsonProperty(\"data_gen\")\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    private String dataGen;\n\n    @JsonProperty(\"index\")\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    private String index;\n\n    @JsonProperty(\"cc_expr\")\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    private String computedColumnExpr = null;//if null, it's not a computed column\n\n    // parsed from data type\n    private DataType type;\n\n    private TableDesc table;\n    private int zeroBasedIndex = -1;\n    private boolean isNullable = true;\n\n    private TblColRef ref;\n\n    public ColumnDesc() { // default constructor for Jackson\n    }\n\n    public ColumnDesc(ColumnDesc other) {\n        this.id = other.id;\n        this.name = other.name;\n        this.datatype = other.datatype;\n        this.dataGen = other.datatype;\n        this.comment = other.comment;\n        this.dataGen = other.dataGen;\n        this.index = other.index;\n        this.computedColumnExpr = other.computedColumnExpr;\n    }\n\n    public ColumnDesc(String id, String name, String datatype, String comment, String dataGen, String index,\n            String computedColumnExpr) {\n        this.id = id;\n        this.name = name;\n        this.datatype = datatype;\n        this.comment = comment;\n        this.dataGen = dataGen;\n        this.index = index;\n        this.computedColumnExpr = computedColumnExpr;\n    }\n\n    /** Use TableRef.getColumn() instead */\n    @Deprecated\n    public TblColRef getRef() {\n        if (ref == null) {\n            ref = new TblColRef(this);\n        }\n        return ref;\n    }\n\n    public int getZeroBasedIndex() {\n        return zeroBasedIndex;\n    }\n\n    public String getDatatype() {\n        return datatype;\n    }\n\n    public void setDatatype(String datatype) {\n        //logger.info(\"setting datatype to \" + datatype);\n        this.datatype = datatype;\n        type = DataType.getType(datatype);\n    }\n\n    public DataType getUpgradedType() {\n        return this.type;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n        if (id != null)\n            zeroBasedIndex = Integer.parseInt(id) - 1;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public TableDesc getTable() {\n        return table;\n    }\n\n    public void setTable(TableDesc table) {\n        this.table = table;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    public void setComment(String comment) {\n        this.comment = comment;\n    }\n\n    public DataType getType() {\n        return type;\n    }\n\n    public String getTypeName() {\n        return type.getName();\n    }\n\n    public int getTypePrecision() {\n        return type.getPrecision();\n    }\n\n    public int getTypeScale() {\n        return type.getScale();\n    }\n\n    public boolean isNullable() {\n        return this.isNullable;\n    }\n\n    public void setNullable(boolean nullable) {\n        this.isNullable = nullable;\n    }\n\n    public String getDataGen() {\n        return dataGen;\n    }\n\n    public String getIndex() {\n        return index;\n    }\n\n    public String getComputedColumnExpr() {\n        Preconditions.checkState(computedColumnExpr != null);\n\n        return computedColumnExpr;\n    }\n\n    public boolean isComputedColumn() {\n        return computedColumnExpr != null;\n    }\n\n    public void init(TableDesc table) {\n        this.table = table;\n\n        if (name != null)\n            name = name.toUpperCase(Locale.ROOT);\n\n        if (id != null)\n            zeroBasedIndex = Integer.parseInt(id) - 1;\n\n        DataType normalized = DataType.getType(datatype);\n        if (normalized == null) {\n            this.setDatatype(null);\n        } else {\n            this.setDatatype(normalized.toString());\n        }\n    }\n\n    // for test mainly\n    public static ColumnDesc mockup(TableDesc table, int oneBasedColumnIndex, String name, String datatype) {\n        ColumnDesc desc = new ColumnDesc();\n        String id = \"\" + oneBasedColumnIndex;\n        desc.setId(id);\n        desc.setName(name);\n        desc.setDatatype(datatype);\n        desc.init(table);\n        return desc;\n    }\n\n<fim_suffix>    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((name == null) ? 0 : name.hashCode());\n        result = prime * result + ((table == null) ? 0 : table.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        ColumnDesc other = (ColumnDesc) obj;\n\n        if (name == null) {\n            if (other.name != null)\n                return false;\n        } else if (!name.equals(other.name))\n            return false;\n\n        if (table == null) {\n            if (other.table != null)\n                return false;\n        } else if (!table.getIdentity().equals(other.table.getIdentity()))\n            return false;\n\n        return true;\n    }\n\n    @Override\n    public String toString() {\n        return \"ColumnDesc{\" + \"id='\" + id + '\\'' + \", name='\" + name + '\\'' + \", datatype='\" + datatype + '\\''\n                + \", comment='\" + comment + '\\'' + '}';\n    }\n}<fim_middle>// function below has no smell\n"}