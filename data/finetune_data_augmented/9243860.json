{"text": "<fim_prefix>/*\n * Copyright (c) 2003, 2006, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage sun.management.counter.perf;\n\nimport sun.management.counter.*;\nimport java.nio.ByteBuffer;\nimport java.nio.ReadOnlyBufferException;\nimport java.nio.charset.Charset;\n\n<fim_suffix>public class PerfStringCounter extends PerfByteArrayCounter\n    implements StringCounter {\n\n    private static Charset defaultCharset = Charset.defaultCharset();\n    PerfStringCounter(String name, Variability v,\n                      int flags, ByteBuffer bb) {\n        this(name, v, flags, bb.limit(), bb);\n    }\n\n    PerfStringCounter(String name, Variability v, int flags,\n                      int maxLength, ByteBuffer bb) {\n\n        super(name, Units.STRING, v, flags, maxLength, bb);\n    }\n\n    // override isVector and getVectorLength in ByteArrayCounter\n    public boolean isVector() {\n        return false;\n    }\n\n    public int getVectorLength() {\n        return 0;\n    }\n\n    public Object getValue() {\n        return stringValue();\n    }\n\n    public String stringValue() {\n\n        String str = \"\";\n        byte[] b = byteArrayValue();\n\n        if (b == null || b.length <= 1) {\n            return str;\n        }\n\n        int i;\n        for (i = 0; i < b.length && b[i] != (byte)0; i++);\n\n        // convert byte array to string, using all bytes up to, but\n        // not including the first null byte.\n        return new String(b , 0, i, defaultCharset);\n    }\n\n    /**\n     * Serialize as a snapshot object.\n     */\n    protected Object writeReplace() throws java.io.ObjectStreamException {\n        return new StringCounterSnapshot(getName(),\n                                         getUnits(),\n                                         getVariability(),\n                                         getFlags(),\n                                         stringValue());\n    }\n\n    private static final long serialVersionUID = 6802913433363692452L;\n}<fim_middle>// class below has no smell\n"}