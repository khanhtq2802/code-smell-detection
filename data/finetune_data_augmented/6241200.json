{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2018 Kiel University and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *******************************************************************************/\npackage org.eclipse.elk.alg.layered.p5edges.loops.labeling;\n\nimport java.util.List;\n\nimport org.eclipse.elk.alg.layered.p5edges.loops.SelfLoopComponent;\nimport org.eclipse.elk.alg.layered.p5edges.loops.SelfLoopEdge;\nimport org.eclipse.elk.alg.layered.p5edges.loops.SelfLoopLabel;\nimport org.eclipse.elk.alg.layered.p5edges.loops.SelfLoopLabelPosition;\nimport org.eclipse.elk.alg.layered.p5edges.loops.SelfLoopNode;\nimport org.eclipse.elk.alg.layered.p5edges.loops.SelfLoopPort;\nimport org.eclipse.elk.alg.layered.p5edges.loops.SelfLoopRoutingDirection;\nimport org.eclipse.elk.alg.layered.p5edges.loops.util.SelfLoopBendpointCalculationUtil;\nimport org.eclipse.elk.alg.layered.p5edges.splines.SplinesMath;\nimport org.eclipse.elk.core.math.KVector;\nimport org.eclipse.elk.core.options.PortSide;\n\nimport com.google.common.collect.Iterables;\n\n/**\n * Generates self loop label positions for three-corner self loops.\n */\npublic class ThreeCornerLoopLabelPositionGenerator extends AbstractSelfLoopLabelPositionGenerator {\n\n    /**\n     * Creates a new instance for the given node.\n     */\n<fim_suffix>    public ThreeCornerLoopLabelPositionGenerator(final SelfLoopNode slNode) {\n        super(slNode);\n    }\n\n    @Override\n    public void generatePositions(final SelfLoopComponent component) {\n        List<SelfLoopPort> ports = component.getPorts();\n        SelfLoopPort startPort = ports.get(0);\n        SelfLoopPort endPort = ports.get(ports.size() - 1);\n        \n        // Retrieve the spacings active for this node\n        double edgeEdgeSpacing = getEdgeEdgeSpacing();\n        double edgeLabelSpacing = getEdgeLabelSpacing();\n\n        // Generate all the bend points\n        KVector startPosition = startPort.getLPort().getPosition().clone().add(startPort.getLPort().getAnchor());\n        KVector endPosition = endPort.getLPort().getPosition().clone().add(endPort.getLPort().getAnchor());\n\n        double directionStart = SplinesMath.portSideToDirection(startPort.getPortSide());\n        KVector dirVectorStart = new KVector(directionStart);\n        \n        double directionEnd = SplinesMath.portSideToDirection(endPort.getPortSide());\n        KVector dirVectorEnd = new KVector(directionEnd);\n        \n        KVector firstBend = startPosition.clone().add(dirVectorStart.clone().scale(\n                (startPort.getMaximumLevel() * edgeEdgeSpacing) + edgeLabelSpacing));\n        KVector secondBend = endPosition.clone().add(dirVectorEnd.clone().scale(\n                (endPort.getMaximumLevel() * edgeEdgeSpacing) + edgeLabelSpacing));\n\n        SelfLoopEdge edge = Iterables.get(component.getConnectedEdges(), 0);\n        List<KVector> cornerBends = SelfLoopBendpointCalculationUtil.generateCornerBendpoints(\n                getSelfLoopNode(), startPort, endPort, firstBend, secondBend, edge);\n\n        // Generate all the segment sides\n        // SUPPRESS CHECKSTYLE NEXT MagicNumber\n        PortSide[] segmentSides = new PortSide[2];\n        PortSide startSide = startPort.getPortSide();\n        \n        if (startPort.getDirection() == SelfLoopRoutingDirection.RIGHT) {\n            segmentSides[0] = startSide.right();\n            segmentSides[1] = segmentSides[0].right();\n        } else {\n            segmentSides[0] = startSide.left();\n            segmentSides[1] = segmentSides[0].left();\n        }\n        \n        addPositions(component, startPort, endPort, segmentSides, firstBend, cornerBends, secondBend);\n    }\n\n    private void addPositions(final SelfLoopComponent component, final SelfLoopPort startPort,\n            final SelfLoopPort endPort, final PortSide[] segmentSides, final KVector firstBend,\n            final List<KVector> cornerBends, final KVector lastBend) {\n        \n        SelfLoopLabel label = component.getSelfLoopLabel();\n        List<SelfLoopLabelPosition> positions = label.getCandidatePositions();\n        \n        // SUPPRESS CHECKSTYLE NEXT 30 MagicNumber\n        \n        // Full segment 1 (long)\n        positions.add(longSegmentPosition(\n                label, segmentSides[0], cornerBends.get(0), cornerBends.get(1), Alignment.CENTERED));\n        positions.add(longSegmentPosition(\n                label, segmentSides[0], cornerBends.get(0), cornerBends.get(1), Alignment.LEFT_OR_TOP));\n        positions.add(longSegmentPosition(\n                label, segmentSides[0], cornerBends.get(0), cornerBends.get(1), Alignment.RIGHT_OR_BOTTOM));\n        \n        // Full segment 2 (long)\n        positions.add(longSegmentPosition(\n                label, segmentSides[0], cornerBends.get(1), cornerBends.get(2), Alignment.CENTERED));\n        positions.add(longSegmentPosition(\n                label, segmentSides[0], cornerBends.get(1), cornerBends.get(2), Alignment.LEFT_OR_TOP));\n        positions.add(longSegmentPosition(\n                label, segmentSides[0], cornerBends.get(1), cornerBends.get(2), Alignment.RIGHT_OR_BOTTOM));\n        \n        // Start segment (short)\n        positions.add(shortSegmentPosition(\n                label, startPort, firstBend, cornerBends.get(0), Alignment.CENTERED, true));\n        positions.add(shortSegmentPosition(\n                label, startPort, firstBend, cornerBends.get(0), Alignment.LEFT_OR_TOP, true));\n        positions.add(shortSegmentPosition(\n                label, startPort, firstBend, cornerBends.get(0), Alignment.RIGHT_OR_BOTTOM, true));\n        \n        // End segment (short)\n        positions.add(shortSegmentPosition(\n                label, endPort, lastBend, cornerBends.get(2), Alignment.CENTERED, true));\n        positions.add(shortSegmentPosition(\n                label, endPort, lastBend, cornerBends.get(2), Alignment.LEFT_OR_TOP, true));\n        positions.add(shortSegmentPosition(\n                label, endPort, lastBend, cornerBends.get(2), Alignment.RIGHT_OR_BOTTOM, true));\n    }\n\n}<fim_middle>// function below has no smell\n"}