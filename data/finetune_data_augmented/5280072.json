{"text": "<fim_prefix>    public boolean isInterceptorBinding(Class<? extends Annotation> annotationType)\n    {\n        return webBeansContext.getAnnotationManager().isInterceptorBindingAnnotation(annotationType);\n    }\n    @Override\n    public boolean isScope(Class<? extends Annotation> annotationType)\n    {\n        if (nonscopeAnnotations.contains(annotationType))\n        {\n            return false;\n        }\n        if (scopeAnnotations.contains(annotationType))\n        {\n            return true;\n        }\n        boolean isScopeAnnotation = annotationType.getAnnotation(Scope.class) != null ||\n                annotationType.getAnnotation(NormalScope.class) != null;\n        if (!isScopeAnnotation)\n        {\n            // also check external scopes\n            for (ExternalScope es : getAdditionalScopes())\n            {\n                if (es.getScope().equals(annotationType))\n                {\n                    isScopeAnnotation = true;\n                    break;\n                }\n            }\n        }\n        if (isScopeAnnotation)\n        {\n            scopeAnnotations.add(annotationType);\n        }\n        else\n        {\n            nonscopeAnnotations.add(annotationType);\n        }\n        return isScopeAnnotation;\n    }\n    @Override\n    public boolean isNormalScope(Class<? extends Annotation> scopeType)\n    {\n        Boolean isNormal = isScopeTypeNormalCache.get(scopeType);\n        if (isNormal != null)\n        {\n            return isNormal;\n        }\n        for(ExternalScope extScope : additionalScopes)\n        {\n            if (extScope.getScope().equals(scopeType))\n            {\n                isScopeTypeNormalCache.put(scopeType, extScope.isNormal());\n                return extScope.isNormal();\n            }\n        }\n        isNormal = scopeType.getAnnotation(NormalScope.class) != null;\n        isScopeTypeNormalCache.put(scopeType, isNormal);\n        return isNormal;\n    }\n    @Override\n    public boolean isPassivatingScope(Class<? extends Annotation> annotationType)\n    {\n        for(ExternalScope extScope : additionalScopes)\n        {\n            if (extScope.getScope().equals(annotationType))\n            {\n                return extScope.isPassivating();\n            }\n        }\n        NormalScope scope = annotationType.getAnnotation(NormalScope.class);\n        if(scope != null)\n        {\n            return scope.passivating();\n        }\n        return false;\n    }\n    @Override\n    public boolean isStereotype(Class<? extends Annotation> annotationType)\n    {\n        return AnnotationUtil.hasAnnotation(annotationType.getDeclaredAnnotations(), Stereotype.class);\n    }\n    public boolean areInterceptorBindingsEquivalent(Annotation annotation1, Annotation annotation2)\n    {\n        return AnnotationUtil.isCdiAnnotationEqual(annotation1, annotation2);\n    }\n    public boolean areQualifiersEquivalent(Annotation annotation1, Annotation annotation2)\n    {\n        return AnnotationUtil.isCdiAnnotationEqual(annotation1, annotation2);\n    }\n    public int getInterceptorBindingHashCode(Annotation annotation)\n    {\n        return AnnotationUtil.getCdiAnnotationHashCode(annotation);\n    }\n    public int getQualifierHashCode(Annotation annotation)\n    {\n        return AnnotationUtil.getCdiAnnotationHashCode(annotation);\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public <T> BeanAttributes<T> createBeanAttributes(AnnotatedType<T> type)\n    {\n        OpenWebBeansEjbPlugin ejbPlugin = webBeansContext.getPluginLoader().getEjbPlugin();\n        if (ejbPlugin != null && ejbPlugin.isSessionBean(type.getJavaClass()))\n        {\n            return ejbPlugin.createBeanAttributes(type);\n        }\n        return BeanAttributesBuilder.forContext(webBeansContext).newBeanAttibutes(type).build();\n    }\n    public <T, X> Bean<T> createBean(BeanAttributes<T> attributes, Class<X> type, ProducerFactory<X> factory)\n    {\n        return new ProducerAwareInjectionTargetBean<>(\n            webBeansContext,\n            WebBeansType.THIRDPARTY,\n            attributes,\n            findClass(factory, type),\n            false,\n            factory);\n    }\n    private Class<?> findClass(ProducerFactory<?> factory, Class<?> type)\n    {\n        if (MethodProducerFactory.class.isInstance(factory))\n        {\n            return MethodProducerFactory.class.cast(factory).getReturnType();\n        }\n        if (FieldProducerFactory.class.isInstance(factory))\n        {\n            return FieldProducerFactory.class.cast(factory).getReturnType();\n        }\n        return type;\n    }\n    public <T extends Extension> T getExtension(Class<T> type)\n    {\n        T extension = webBeansContext.getExtensionLoader().getExtension(type);\n        if (extension == null)\n        {\n            throw new IllegalArgumentException(\"extension \" + type + \" not registered\");\n        }\n        return extension;\n    }\n    @Override\n    public <X> Bean<? extends X> resolve(Set<Bean<? extends X>> beans)\n    {\n        return injectionResolver.resolve(beans, null);\n    }\n    @Override\n    public <T> InterceptionFactory<T> createInterceptionFactory(CreationalContext<T> creationalContext, Class<T> clazz)\n    {\n        return new InterceptionFactoryImpl(\n                webBeansContext, createAnnotatedType(clazz), AnnotationUtil.DEFAULT_AND_ANY_ANNOTATION_SET,\n                // ok, we can need to not cast that brutally\n                CreationalContextImpl.class.cast(creationalContext));\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void validate(InjectionPoint injectionPoint)\n    {\n        if (injectionPoint == null)\n        {\n            throw new IllegalArgumentException(\"InjectionPoint parameter must not be nul\");\n        }\n        Bean<?> bean = injectionPoint.getBean();\n        //Check for correct injection type\n        injectionResolver.checkInjectionPointType(injectionPoint);\n        Class<?> rawType = ClassUtil.getRawTypeForInjectionPoint(injectionPoint);\n        // check for InjectionPoint injection\n        if (rawType.equals(InjectionPoint.class))\n        {\n            if (AnnotationUtil.hasAnnotation(AnnotationUtil.asArray(injectionPoint.getQualifiers()), Default.class))\n            {\n                if (!bean.getScope().equals(Dependent.class))\n                {\n                    throw new WebBeansConfigurationException(\"Bean \" + bean.getBeanClass() + \" scope can not define other scope except @Dependent to inject InjectionPoint\");\n                }\n            }\n        }\n        else\n        {\n            injectionResolver.checkInjectionPoint(injectionPoint);\n        }\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public <T> InjectionTarget<T> createInjectionTarget(AnnotatedType<T> type)\n    {\n        InjectionTargetFactoryImpl<T> factory = new InjectionTargetFactoryImpl<>(type, webBeansContext);\n        InterceptorUtil interceptorUtil = webBeansContext.getInterceptorUtil();\n        InjectionTargetImpl<T> injectionTarget = new LazyInterceptorDefinedInjectionTarget<>(\n            type,\n            factory.createInjectionPoints(null),\n            webBeansContext,\n            interceptorUtil.getLifecycleMethods(type, PostConstruct.class),\n            interceptorUtil.getLifecycleMethods(type, PreDestroy.class));\n        if (isAfterBeanDiscoveryDone())\n        {\n            try\n            {\n                webBeansContext.getWebBeansUtil().validate(injectionTarget.getInjectionPoints(), null);\n            }\n            catch (InjectionException ie)\n            {\n                throw new IllegalArgumentException(ie);\n            }\n            catch (WebBeansConfigurationException ie)\n            {\n                throw new IllegalArgumentException(ie);\n            }\n            catch (DeploymentException ie)\n            {\n                throw new IllegalArgumentException(ie);\n            }\n        }\n        GProcessInjectionTarget event = webBeansContext.getWebBeansUtil().fireProcessInjectionTargetEvent(injectionTarget, type);\n        InjectionTarget it = event.getInjectionTarget();\n        event.setStarted();\n        return it;\n    }\n    @Override\n    public <T> Set<ObserverMethod<? super T>> resolveObserverMethods(T event, Annotation... qualifiers)\n    {\n        return resolveObserverMethods(event, new EventMetadataImpl(null, event.getClass(), null, qualifiers, webBeansContext));\n    }\n    public <T> Set<ObserverMethod<? super T>> resolveObserverMethods(T event, EventMetadataImpl metadata)\n    {\n        LinkedList<ObserverMethod<? super Object>> observerMethods\n            = new LinkedList<>(webBeansContext.getNotificationManager().resolveObservers(event, metadata, false));\n        // new in CDI-2.0: sort observers\n        Collections.sort(observerMethods, Comparator.comparingInt(ObserverMethod::getPriority));\n        return new LinkedHashSet<>(observerMethods);\n    }\n    @Override\n    public ExpressionFactory wrapExpressionFactory(ExpressionFactory expressionFactory)\n    {\n        ELAdaptor elAdaptor = webBeansContext.getService(ELAdaptor.class);\n        return elAdaptor.getOwbWrappedExpressionFactory(expressionFactory);\n    }\n<fim_suffix>    public void addAdditionalQualifier(Class<? extends Annotation> qualifier)\n    {\n        if (!additionalQualifiers.contains(qualifier))\n        {\n            additionalQualifiers.add(qualifier);\n        }\n    }<fim_middle>// function below has no smell\n"}