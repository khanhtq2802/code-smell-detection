{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.openejb.persistence;\n\nimport java.lang.reflect.Method;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport javax.persistence.FlushModeType;\nimport javax.persistence.LockModeType;\nimport javax.persistence.Parameter;\nimport javax.persistence.TemporalType;\nimport javax.persistence.TypedQuery;\nimport org.apache.openejb.util.LogCategory;\nimport org.apache.openejb.util.Logger;\n\npublic class CriteriaLogQuery<T> implements TypedQuery<T> {\n    private static final Logger LOGGER = Logger.getInstance(LogCategory.OPENEJB_JPA, CriteriaLogQuery.class);\n    private static final Map<Class<?>, Method> methodsCache = new ConcurrentHashMap<Class<?>, Method>();\n    private static final Map<Class<?>, Class<?>> unwrapCache = new ConcurrentHashMap<Class<?>, Class<?>>();\n    private static final String GET_QUERY_STRING_MTD = \"getQueryString\";\n\n    private final TypedQuery<T> delegate;\n    private final String logLevel;\n\n    public CriteriaLogQuery(final TypedQuery<T> query, final String level) {\n        delegate = query;\n        logLevel = level.toLowerCase();\n    }\n\n    private void logJPQLQuery() {\n        final Class<?> clazz = delegate.getClass();\n        Method mtd = methodsCache.get(clazz);\n        Class<?> unwrapQuery = unwrapCache.get(clazz);\n        if (mtd == null) {\n            try { // openjpa\n                mtd = clazz.getMethod(GET_QUERY_STRING_MTD);\n            } catch (NoSuchMethodException e) {\n                try { // hibernate\n                    unwrapQuery = clazz.getClassLoader().loadClass(\"org.hibernate.Query\");\n                    unwrapCache.put(clazz, unwrapQuery);\n                    mtd = unwrapQuery.getMethod(GET_QUERY_STRING_MTD);\n                } catch (Exception e2) {\n                    try { // fallback\n                        mtd = getClass().getMethod(GET_QUERY_STRING_MTD);\n                    } catch (NoSuchMethodException shouldntOccur) {\n                        // ignored\n                    }\n                }\n            }\n            methodsCache.put(clazz, mtd);\n        }\n        logJPQLQuery(unwrapQuery, mtd);\n    }\n\n<fim_suffix>    public String getQueryString() {\n        return delegate.getClass().getName() + \" doesn't support getQueryString() method: '\" + delegate.toString() + \"'\";\n    }\n\n    private void logJPQLQuery(final Class<?> unwrap, final Method mtd) {\n        String query = null;\n        Object realQuery = delegate;\n        if (unwrap != null) {\n            realQuery = delegate.unwrap(unwrap);\n        }\n\n        try {\n            query = (String) mtd.invoke(realQuery);\n        } catch (Exception e) {\n            try {\n                query = getQueryString();\n            } catch (Exception ignored) {\n                // no-op\n            }\n        }\n\n        final String msg = \"executing query '\" + query + \"'\";\n        if (logLevel.equals(\"info\")) {\n            LOGGER.info(msg);\n        } else if (logLevel.equals(\"debug\") || logLevel.equals(\"fine\") || logLevel.equals(\"finest\")) {\n            LOGGER.debug(msg);\n        } else if (logLevel.equals(\"error\")) {\n            LOGGER.error(msg);\n        } else if (logLevel.equals(\"fatal\")) {\n            LOGGER.fatal(msg);\n        } else if (logLevel.equals(\"warning\") || logLevel.equals(\"warn\")) {\n            LOGGER.warning(msg);\n        } else {\n            LOGGER.debug(msg);\n        }\n    }\n\n    @Override\n    public List<T> getResultList() {\n        logJPQLQuery();\n        return delegate.getResultList();\n    }\n\n    @Override\n    public T getSingleResult() {\n        logJPQLQuery();\n        return delegate.getSingleResult();\n    }\n\n    @Override\n    public int executeUpdate() {\n        logJPQLQuery();\n        return delegate.executeUpdate();\n    }\n\n    @Override\n    public TypedQuery<T> setMaxResults(int maxResult) {\n        delegate.setMaxResults(maxResult);\n        return this;\n    }\n\n    @Override\n    public int getMaxResults() {\n        return delegate.getMaxResults();\n    }\n\n    @Override\n    public TypedQuery<T> setFirstResult(int startPosition) {\n        delegate.setFirstResult(startPosition);\n        return this;\n    }\n\n    @Override\n    public int getFirstResult() {\n        return delegate.getFirstResult();\n    }\n\n    @Override\n    public TypedQuery<T> setHint(String hintName, Object value) {\n        delegate.setHint(hintName, value);\n        return this;\n    }\n\n    @Override\n    public <E> TypedQuery<T> setParameter(Parameter<E> param, E value) {\n        delegate.setParameter(param, value);\n        return this;\n    }\n\n    @Override\n    public Map<String, Object> getHints() {\n        return delegate.getHints();\n    }\n\n    @Override\n    public TypedQuery<T> setParameter(Parameter<Calendar> param, Calendar value, TemporalType temporalType) {\n        delegate.setParameter(param, value, temporalType);\n        return this;\n    }\n\n    @Override\n    public TypedQuery<T> setParameter(Parameter<Date> param, Date value, TemporalType temporalType) {\n        delegate.setParameter(param, value, temporalType);\n        return this;\n    }\n\n    @Override\n    public TypedQuery<T> setParameter(String name, Object value) {\n        delegate.setParameter(name, value);\n        return this;\n    }\n\n    @Override\n    public TypedQuery<T> setParameter(String name, Calendar value, TemporalType temporalType) {\n        delegate.setParameter(name, value, temporalType);\n        return this;\n    }\n\n    @Override\n    public TypedQuery<T> setParameter(String name, Date value, TemporalType temporalType) {\n        delegate.setParameter(name, value, temporalType);\n        return this;\n    }\n\n    @Override\n    public TypedQuery<T> setParameter(int position, Object value) {\n        delegate.setParameter(position, value);\n        return this;\n    }\n\n    @Override\n    public TypedQuery<T> setParameter(int position, Calendar value, TemporalType temporalType) {\n        delegate.setParameter(position, value, temporalType);\n        return this;\n    }\n\n    @Override\n    public TypedQuery<T> setParameter(int position, Date value, TemporalType temporalType) {\n        delegate.setParameter(position, value, temporalType);\n        return this;\n    }\n\n    @Override\n    public Set<Parameter<?>> getParameters() {\n        return delegate.getParameters();\n    }\n\n    @Override\n    public Parameter<?> getParameter(String name) {\n        return delegate.getParameter(name);\n    }\n\n    @Override\n    public <T> Parameter<T> getParameter(String name, Class<T> type) {\n        return delegate.getParameter(name, type);\n    }\n\n    @Override\n    public Parameter<?> getParameter(int position) {\n        return delegate.getParameter(position);\n    }\n\n    @Override\n    public <T> Parameter<T> getParameter(int position, Class<T> type) {\n        return delegate.getParameter(position, type);\n    }\n\n    @Override\n    public boolean isBound(Parameter<?> param) {\n        return delegate.isBound(param);\n    }\n\n    @Override\n    public <T> T getParameterValue(Parameter<T> param) {\n        return delegate.getParameterValue(param);\n    }\n\n    @Override\n    public Object getParameterValue(String name) {\n        return delegate.getParameterValue(name);\n    }\n\n    @Override\n    public Object getParameterValue(int position) {\n        return delegate.getParameterValue(position);\n    }\n\n    @Override\n    public TypedQuery<T> setFlushMode(FlushModeType flushMode) {\n        return delegate.setFlushMode(flushMode);\n    }\n\n    @Override\n    public FlushModeType getFlushMode() {\n        return delegate.getFlushMode();\n    }\n\n    @Override\n    public TypedQuery<T> setLockMode(LockModeType lockMode) {\n        return delegate.setLockMode(lockMode);\n    }\n\n    @Override\n    public LockModeType getLockMode() {\n        return delegate.getLockMode();\n    }\n\n    @Override\n    public <T> T unwrap(Class<T> cls) {\n        return delegate.unwrap(cls);\n    }\n}<fim_middle>// function below has no smell\n"}