{"text": "<fim_prefix>      }\n    }\n    public void updateEntity(org.apache.airavata.sharing.registry.models.Entity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      updateEntity_call method_call = new updateEntity_call(entity, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class updateEntity_call extends org.apache.thrift.async.TAsyncMethodCall {\n      private org.apache.airavata.sharing.registry.models.Entity entity;\n      public updateEntity_call(org.apache.airavata.sharing.registry.models.Entity entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.entity = entity;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"updateEntity\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        updateEntity_args args = new updateEntity_args();\n        args.setEntity(entity);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public boolean getResult() throws org.apache.airavata.sharing.registry.models.SharingRegistryException, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return (new Client(prot)).recv_updateEntity();\n      }\n    }\n    public void isEntityExists(String domainId, String entityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      isEntityExists_call method_call = new isEntityExists_call(domainId, entityId, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class isEntityExists_call extends org.apache.thrift.async.TAsyncMethodCall {\n      private String domainId;\n      private String entityId;\n      public isEntityExists_call(String domainId, String entityId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.domainId = domainId;\n        this.entityId = entityId;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"isEntityExists\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        isEntityExists_args args = new isEntityExists_args();\n        args.setDomainId(domainId);\n        args.setEntityId(entityId);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public boolean getResult() throws org.apache.airavata.sharing.registry.models.SharingRegistryException, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return (new Client(prot)).recv_isEntityExists();\n      }\n    }\n    public void deleteEntity(String domainId, String entityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      deleteEntity_call method_call = new deleteEntity_call(domainId, entityId, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class deleteEntity_call extends org.apache.thrift.async.TAsyncMethodCall {\n      private String domainId;\n      private String entityId;\n      public deleteEntity_call(String domainId, String entityId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.domainId = domainId;\n        this.entityId = entityId;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"deleteEntity\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        deleteEntity_args args = new deleteEntity_args();\n        args.setDomainId(domainId);\n        args.setEntityId(entityId);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n      public boolean getResult() throws org.apache.airavata.sharing.registry.models.SharingRegistryException, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return (new Client(prot)).recv_deleteEntity();\n      }\n    }\n    public void getEntity(String domainId, String entityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {\n      checkReady();\n      getEntity_call method_call = new getEntity_call(domainId, entityId, resultHandler, this, ___protocolFactory, ___transport);\n      this.___currentMethod = method_call;\n      ___manager.call(method_call);\n    }\n    public static class getEntity_call extends org.apache.thrift.async.TAsyncMethodCall {\n      private String domainId;\n      private String entityId;\n      public getEntity_call(String domainId, String entityId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n        super(client, protocolFactory, transport, resultHandler, false);\n        this.domainId = domainId;\n        this.entityId = entityId;\n      }\n      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {\n        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"getEntity\", org.apache.thrift.protocol.TMessageType.CALL, 0));\n        getEntity_args args = new getEntity_args();\n        args.setDomainId(domainId);\n        args.setEntityId(entityId);\n        args.write(prot);\n        prot.writeMessageEnd();\n      }\n<fim_suffix>      public org.apache.airavata.sharing.registry.models.Entity getResult() throws org.apache.airavata.sharing.registry.models.SharingRegistryException, org.apache.thrift.TException {\n        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n          throw new IllegalStateException(\"Method call not finished!\");\n        }\n        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n        return (new Client(prot)).recv_getEntity();\n      }<fim_middle>// function below has no smell\n"}