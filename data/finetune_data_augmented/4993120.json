{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jclouds.packet.features;\n\nimport java.beans.ConstructorProperties;\nimport java.util.List;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.core.MediaType;\n\nimport org.jclouds.Fallbacks;\nimport org.jclouds.collect.IterableWithMarker;\nimport org.jclouds.collect.PagedIterable;\nimport org.jclouds.http.functions.ParseJson;\nimport org.jclouds.json.Json;\nimport org.jclouds.packet.PacketApi;\nimport org.jclouds.packet.domain.Href;\nimport org.jclouds.packet.domain.Project;\nimport org.jclouds.packet.domain.internal.PaginatedCollection;\nimport org.jclouds.packet.domain.options.ListOptions;\nimport org.jclouds.packet.filters.AddApiVersionToRequest;\nimport org.jclouds.packet.filters.AddXAuthTokenToRequest;\nimport org.jclouds.packet.functions.BaseToPagedIterable;\nimport org.jclouds.rest.annotations.Fallback;\nimport org.jclouds.rest.annotations.RequestFilters;\nimport org.jclouds.rest.annotations.ResponseParser;\nimport org.jclouds.rest.annotations.Transform;\n\nimport com.google.common.base.Function;\nimport com.google.common.base.Optional;\nimport com.google.inject.TypeLiteral;\n\n@Path(\"/projects\")\n@Consumes(MediaType.APPLICATION_JSON)\n@RequestFilters({ AddXAuthTokenToRequest.class, AddApiVersionToRequest.class} )\npublic interface ProjectApi {\n\n    @Named(\"project:list\")\n    @GET\n    @ResponseParser(ParseProjects.class)\n    @Transform(ParseProjects.ToPagedIterable.class)\n    @Fallback(Fallbacks.EmptyPagedIterableOnNotFoundOr404.class)\n    PagedIterable<Project> list();\n\n    @Named(\"project:list\")\n    @GET\n    @ResponseParser(ParseProjects.class)\n    @Fallback(Fallbacks.EmptyIterableWithMarkerOnNotFoundOr404.class)\n    IterableWithMarker<Project> list(ListOptions options);\n\n    final class ParseProjects extends ParseJson<ParseProjects.Projects> {\n        @Inject\n        ParseProjects(Json json) {\n            super(json, TypeLiteral.get(Projects.class));\n        }\n\n        private static class Projects extends PaginatedCollection<Project> {\n            @ConstructorProperties({ \"projects\", \"meta\" })\n            public Projects(List<Project> items, Meta meta) {\n                super(items, meta);\n            }\n        }\n\n<fim_suffix>        private static class ToPagedIterable extends BaseToPagedIterable<Project, ListOptions> {\n            @Inject ToPagedIterable(PacketApi api, Function<Href, ListOptions> hrefToOptions) {\n                super(api, hrefToOptions);\n            }\n\n            @Override\n            protected IterableWithMarker<Project> fetchPageUsingOptions(ListOptions options, Optional<Object> arg0) {\n                return api.projectApi().list(options);\n            }\n        }\n    }\n\n}<fim_middle>// class below has no smell\n"}