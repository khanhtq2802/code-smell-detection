{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.broker;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.apache.activemq.command.ConnectionInfo;\n\n/**\n * \n */\n\n<fim_suffix>public class TransportConnectionState extends org.apache.activemq.state.ConnectionState {\n\n    private ConnectionContext context;\n    private TransportConnection connection;\n    private AtomicInteger referenceCounter = new AtomicInteger();\n    private final Object connectionMutex = new Object();\n\n    public TransportConnectionState(ConnectionInfo info, TransportConnection transportConnection) {\n        super(info);\n        connection = transportConnection;\n    }\n\n    public ConnectionContext getContext() {\n        return context;\n    }\n\n    public TransportConnection getConnection() {\n        return connection;\n    }\n\n    public void setContext(ConnectionContext context) {\n        this.context = context;\n    }\n\n    public void setConnection(TransportConnection connection) {\n        this.connection = connection;\n    }\n\n    public int incrementReference() {\n        return referenceCounter.incrementAndGet();\n    }\n\n    public int decrementReference() {\n        return referenceCounter.decrementAndGet();\n    }\n\n\tpublic AtomicInteger getReferenceCounter() {\n\t\treturn referenceCounter;\n\t}\n\n\tpublic void setReferenceCounter(AtomicInteger referenceCounter) {\n\t\tthis.referenceCounter = referenceCounter;\n\t}\n\n\tpublic Object getConnectionMutex() {\n\t\treturn connectionMutex;\n\t}\n}<fim_middle>// class below is data class\n"}