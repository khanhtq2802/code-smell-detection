{"text": "<fim_prefix>    {\n      this();\n      this.rse = rse;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public updateWorkflow_result(updateWorkflow_result other) {\n      if (other.isSetRse()) {\n        this.rse = new org.apache.airavata.registry.api.exception.RegistryServiceException(other.rse);\n      }\n    }\n    public updateWorkflow_result deepCopy() {\n      return new updateWorkflow_result(this);\n    }\n    @Override\n    public void clear() {\n      this.rse = null;\n    }\n    public org.apache.airavata.registry.api.exception.RegistryServiceException getRse() {\n      return this.rse;\n    }\n    public updateWorkflow_result setRse(org.apache.airavata.registry.api.exception.RegistryServiceException rse) {\n      this.rse = rse;\n      return this;\n    }\n    public void unsetRse() {\n      this.rse = null;\n    }\n    /** Returns true if field rse is set (has been assigned a value) and false otherwise */\n    public boolean isSetRse() {\n      return this.rse != null;\n    }\n    public void setRseIsSet(boolean value) {\n      if (!value) {\n        this.rse = null;\n      }\n    }\n    public void setFieldValue(_Fields field, Object value) {\n      switch (field) {\n      case RSE:\n        if (value == null) {\n          unsetRse();\n        } else {\n          setRse((org.apache.airavata.registry.api.exception.RegistryServiceException)value);\n        }\n        break;\n      }\n    }\n    public Object getFieldValue(_Fields field) {\n      switch (field) {\n      case RSE:\n        return getRse();\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      case RSE:\n        return isSetRse();\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof updateWorkflow_result)\n        return this.equals((updateWorkflow_result)that);\n      return false;\n    }\n    public boolean equals(updateWorkflow_result that) {\n      if (that == null)\n        return false;\n      boolean this_present_rse = true && this.isSetRse();\n      boolean that_present_rse = true && that.isSetRse();\n      if (this_present_rse || that_present_rse) {\n        if (!(this_present_rse && that_present_rse))\n          return false;\n        if (!this.rse.equals(that.rse))\n          return false;\n      }\n      return true;\n    }\n    @Override\n    public int hashCode() {\n      List<Object> list = new ArrayList<Object>();\n      boolean present_rse = true && (isSetRse());\n      list.add(present_rse);\n      if (present_rse)\n        list.add(rse);\n      return list.hashCode();\n    }\n    @Override\n    public int compareTo(updateWorkflow_result other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      lastComparison = Boolean.valueOf(isSetRse()).compareTo(other.isSetRse());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetRse()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rse, other.rse);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n      }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"updateWorkflow_result(\");\n      boolean first = true;\n      sb.append(\"rse:\");\n      if (this.rse == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.rse);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class updateWorkflow_resultStandardSchemeFactory implements SchemeFactory {\n      public updateWorkflow_resultStandardScheme getScheme() {\n        return new updateWorkflow_resultStandardScheme();\n      }\n    }\n    private static class updateWorkflow_resultStandardScheme extends StandardScheme<updateWorkflow_result> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWorkflow_result struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 1: // RSE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.rse = new org.apache.airavata.registry.api.exception.RegistryServiceException();\n                struct.rse.read(iprot);\n                struct.setRseIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWorkflow_result struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.rse != null) {\n          oprot.writeFieldBegin(RSE_FIELD_DESC);\n          struct.rse.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class updateWorkflow_resultTupleSchemeFactory implements SchemeFactory {\n      public updateWorkflow_resultTupleScheme getScheme() {\n        return new updateWorkflow_resultTupleScheme();\n      }\n    }\n<fim_suffix>    private static class updateWorkflow_resultTupleScheme extends TupleScheme<updateWorkflow_result> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, updateWorkflow_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        BitSet optionals = new BitSet();\n        if (struct.isSetRse()) {\n          optionals.set(0);\n        }\n        oprot.writeBitSet(optionals, 1);\n        if (struct.isSetRse()) {\n          struct.rse.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, updateWorkflow_result struct) throws org.apache.thrift.TException {\n        TTupleProtocol iprot = (TTupleProtocol) prot;\n        BitSet incoming = iprot.readBitSet(1);\n        if (incoming.get(0)) {\n          struct.rse = new org.apache.airavata.registry.api.exception.RegistryServiceException();\n          struct.rse.read(iprot);\n          struct.setRseIsSet(true);\n        }\n      }\n    }<fim_middle>// class below has no smell\n"}