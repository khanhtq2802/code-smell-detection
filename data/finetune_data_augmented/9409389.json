{"text": "<fim_prefix>            } else if (object instanceof RoundRectangle2D) {\n                ((RoundRectangle2D) object).setRoundRect(0, 0, hh, hh, 20, 20);\n            } else if (object instanceof Arc2D) {\n                ((Arc2D) object).setArc(0, 0, hh, hh, 45, 270, Arc2D.PIE);\n            } else if (object instanceof QuadCurve2D) {\n                ((QuadCurve2D) object).setCurve(0, 0, w*.2, h*.4, w*.4, 0);\n            } else if (object instanceof CubicCurve2D) {\n                    ((CubicCurve2D) object).setCurve(0,0,30,-60,60,60,90,0);\n            } else if (object instanceof GeneralPath) {\n                GeneralPath p = new GeneralPath();\n                float size = (float) ww;\n                p.moveTo(- size / 2.0f, - size / 8.0f);\n                p.lineTo(+ size / 2.0f, - size / 8.0f);\n                p.lineTo(- size / 4.0f, + size / 2.0f);\n                p.lineTo(+         0.0f, - size / 2.0f);\n                p.lineTo(+ size / 4.0f, + size / 2.0f);\n                p.closePath();\n                object = p;\n            }\n        }\n        public void step(int w, int h, TransformAnim demo) {\n            at.setToIdentity();\n            if (demo.doRotate) {\n                if ((rotate+=5) == 360) {\n                    rotate = 0;\n                }\n                at.rotate(Math.toRadians(rotate), x, y);\n            }\n            at.translate(x, y);\n            if (demo.doTranslate) {\n                x += ix;\n                y += iy;\n                if (x > w) {\n                    x = w - 1;\n                    ix = Math.random() * -w/32 - 1;\n                }\n                if (x < 0) {\n                    x = 2;\n                    ix = Math.random() * w/32 + 1;\n                }\n                if (y > h ) {\n                    y = h - 2;\n                    iy = Math.random() * -h/32 - 1;\n                }\n                if (y < 0) {\n                    y = 2;\n                    iy = Math.random() * h/32 + 1;\n                }\n            }\n            if (demo.doScale && scaleDirection == UP) {\n                if ((scale += 0.05) > 1.5) {\n                    scaleDirection = DOWN;\n                }\n            } else if (demo.doScale && scaleDirection == DOWN) {\n                if ((scale -= .05) < 0.5) {\n                    scaleDirection = UP;\n                }\n            }\n            if (demo.doScale) {\n                at.scale(scale, scale);\n            }\n            if (demo.doShear && shearDirection == UP) {\n                if ((shear += 0.05) > 0.5) {\n                    shearDirection = DOWN;\n                }\n            } else if (demo.doShear && shearDirection == DOWN) {\n                if ((shear -= .05) < -0.5) {\n                    shearDirection = UP;\n                }\n            }\n            if (demo.doShear) {\n                at.shear(shear, shear);\n            }\n        }\n    } // End ObjData class\n<fim_suffix>    static final class DemoControls extends CustomControls implements ActionListener, ChangeListener {\n        TransformAnim demo;\n        JSlider shapeSlider, stringSlider, imageSlider;\n        Font font = new Font(Font.SERIF, Font.BOLD, 10);\n        JToolBar toolbar;\n        ButtonBorder buttonBorder = new ButtonBorder();\n        @SuppressWarnings(\"LeakingThisInConstructor\")\n        public DemoControls(TransformAnim demo) {\n            super(demo.name);\n            this.demo = demo;\n            setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n            add(Box.createVerticalStrut(5));\n            JToolBar bar = new JToolBar(SwingConstants.VERTICAL);\n            bar.setFloatable(false);\n            shapeSlider = new JSlider(SwingConstants.HORIZONTAL,0,20,demo.numShapes);\n            shapeSlider.addChangeListener(this);\n            TitledBorder tb = new TitledBorder(new EtchedBorder());\n            tb.setTitleFont(font);\n            tb.setTitle(String.valueOf(demo.numShapes) + \" Shapes\");\n            shapeSlider.setBorder(tb);\n            shapeSlider.setOpaque(true);\n            shapeSlider.setPreferredSize(new Dimension(80,44));\n            bar.add(shapeSlider);\n            bar.addSeparator();\n            stringSlider = new JSlider(SwingConstants.HORIZONTAL,0,10,demo.numStrings);\n            stringSlider.addChangeListener(this);\n            tb = new TitledBorder(new EtchedBorder());\n            tb.setTitleFont(font);\n            tb.setTitle(String.valueOf(demo.numStrings) + \" Strings\");\n            stringSlider.setBorder(tb);\n            stringSlider.setOpaque(true);\n            stringSlider.setPreferredSize(new Dimension(80,44));\n            bar.add(stringSlider);\n            bar.addSeparator();\n            imageSlider = new JSlider(SwingConstants.HORIZONTAL,0,10,demo.numImages);\n            imageSlider.addChangeListener(this);\n            tb = new TitledBorder(new EtchedBorder());\n            tb.setTitleFont(font);\n            tb.setTitle(String.valueOf(demo.numImages) + \" Images\");\n            imageSlider.setBorder(tb);\n            imageSlider.setOpaque(true);\n            imageSlider.setPreferredSize(new Dimension(80,44));\n            bar.add(imageSlider);\n            bar.addSeparator();\n            add(bar);\n            toolbar = new JToolBar();\n            toolbar.setFloatable(false);\n            addButton(\"T\", \"translate\", demo.doTranslate);\n            addButton(\"R\", \"rotate\", demo.doRotate);\n            addButton(\"SC\", \"scale\", demo.doScale);\n            addButton(\"SH\", \"shear\", demo.doShear);\n            add(toolbar);\n        }\n        public void addButton(String s, String tt, boolean state) {\n            JToggleButton b = (JToggleButton) toolbar.add(new JToggleButton(s));\n            b.setFont(font);\n            b.setSelected(state);\n            b.setToolTipText(tt);\n            b.setFocusPainted(false);\n            b.setBorder(buttonBorder);\n            b.addActionListener(this);\n        }\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            JToggleButton b = (JToggleButton) e.getSource();\n            if (b.getText().equals(\"T\")) {\n                demo.doTranslate = b.isSelected();\n            } else if (b.getText().equals(\"R\")) {\n                demo.doRotate = b.isSelected();\n            } else if (b.getText().equals(\"SC\")) {\n                demo.doScale = b.isSelected();\n            } else if (b.getText().equals(\"SH\")) {\n                demo.doShear = b.isSelected();\n            }\n            if (!demo.animating.running()) {\n                demo.repaint();\n            }\n        }\n        @Override\n        public void stateChanged(ChangeEvent e) {\n            JSlider slider = (JSlider) e.getSource();\n            int value = slider.getValue();\n            TitledBorder tb = (TitledBorder) slider.getBorder();\n            if (slider.equals(shapeSlider)) {\n                tb.setTitle(String.valueOf(value) + \" Shapes\");\n                demo.setShapes(value);\n            } else if (slider.equals(stringSlider)) {\n                tb.setTitle(String.valueOf(value) + \" Strings\");\n                demo.setStrings(value);\n            } else if (slider.equals(imageSlider)) {\n                tb.setTitle(String.valueOf(value) + \" Images\");\n                demo.setImages(value);\n            }\n            if (!demo.animating.running()) {\n                demo.repaint();\n            }\n            slider.repaint();\n        }\n        @Override\n        public Dimension getPreferredSize() {\n            return new Dimension(80,38);\n        }\n        @Override\n        @SuppressWarnings(\"SleepWhileHoldingLock\")\n        public void run() {\n            Thread me = Thread.currentThread();\n            while (thread == me) {\n                for (int i = 1; i < toolbar.getComponentCount(); i++) {\n                    try {\n                        Thread.sleep(4444);\n                    } catch (InterruptedException e) { return; }\n                    ((AbstractButton) toolbar.getComponentAtIndex(i)).doClick();\n                }\n            }\n            thread = null;\n        }\n    } // End DemoControls<fim_middle>// class below is blob\n"}