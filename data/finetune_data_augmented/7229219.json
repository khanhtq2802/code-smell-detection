{"text": "<fim_prefix>\t\t */\n\t\tSslProvider build();\n\t}\n\tpublic interface SslContextSpec {\n\t\t/**\n\t\t * The SslContext to set when configuring SSL\n\t\t *\n\t\t * @param sslContext The context to set when configuring SSL\n\t\t *\n\t\t * @return {@literal this}\n\t\t */\n\t\tBuilder sslContext(SslContext sslContext);\n\t\t/**\n\t\t * The SslContextBuilder for building a new {@link SslContext}.\n\t\t *\n\t\t * @return {@literal this}\n\t\t */\n\t\tDefaultConfigurationSpec sslContext(SslContextBuilder sslCtxBuilder);\n\t}\n\t/**\n\t * Default configuration that will be applied to the provided\n\t * {@link SslContextBuilder}\n\t */\n\tpublic enum DefaultConfigurationType {\n\t\t/**\n\t\t * There will be no default configuration\n\t\t */\n\t\tNONE,\n\t\t/**\n\t\t * {@link io.netty.handler.ssl.SslProvider} will be set depending on\n\t\t * <code>OpenSsl.isAvailable()</code>\n\t\t */\n\t\tTCP,\n\t\t/**\n\t\t * {@link io.netty.handler.ssl.SslProvider} will be set depending on\n\t\t * <code>OpenSsl.isAlpnSupported()</code>,\n\t\t * {@link Http2SecurityUtil#CIPHERS},\n\t\t * ALPN support,\n\t\t * HTTP/1.1 and HTTP/2 support\n\t\t *\n\t\t */\n\t\tH2\n\t}\n\tpublic interface DefaultConfigurationSpec {\n\t\t/**\n\t\t * Default configuration type that will be applied to the provided\n\t\t * {@link SslContextBuilder}\n\t\t *\n\t\t * @param type The default configuration type.\n\t\t * @return {@code this}\n\t\t */\n\t\tBuilder defaultConfiguration(DefaultConfigurationType type);\n\t}\n\tfinal SslContext                   sslContext;\n\tfinal SslContextBuilder            sslContextBuilder;\n\tfinal DefaultConfigurationType     type;\n\tfinal long                         handshakeTimeoutMillis;\n\tfinal long                         closeNotifyFlushTimeoutMillis;\n\tfinal long                         closeNotifyReadTimeoutMillis;\n\tfinal Consumer<? super SslHandler> handlerConfigurator;\n\tfinal int                          builderHashCode;\n\tSslProvider(SslProvider.Build builder) {\n\t\tthis.sslContextBuilder = builder.sslCtxBuilder;\n\t\tthis.type = builder.type;\n\t\tif (builder.sslContext == null) {\n\t\t\tif (sslContextBuilder != null) {\n\t\t\t\tif (type != null) {\n\t\t\t\t\tupdateDefaultConfiguration();\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tthis.sslContext = sslContextBuilder.build();\n\t\t\t\t} catch (SSLException e) {\n\t\t\t\t\tthrow Exceptions.propagate(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Neither SslContextBuilder nor SslContext is specified\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.sslContext = builder.sslContext;\n\t\t}\n\t\tthis.handlerConfigurator = builder.handlerConfigurator;\n\t\tthis.handshakeTimeoutMillis = builder.handshakeTimeoutMillis;\n\t\tthis.closeNotifyFlushTimeoutMillis = builder.closeNotifyFlushTimeoutMillis;\n\t\tthis.closeNotifyReadTimeoutMillis = builder.closeNotifyReadTimeoutMillis;\n\t\tthis.builderHashCode = builder.hashCode();\n\t}\n\tSslProvider(SslProvider from, Consumer<? super SslHandler> handlerConfigurator) {\n\t\tthis.sslContext = from.sslContext;\n\t\tthis.sslContextBuilder = from.sslContextBuilder;\n\t\tthis.type = from.type;\n\t\tif (from.handlerConfigurator == null) {\n\t\t\tthis.handlerConfigurator = handlerConfigurator;\n\t\t}\n\t\telse {\n\t\t\tthis.handlerConfigurator = h -> {\n\t\t\t\thandlerConfigurator.accept(h);\n\t\t\t\tfrom.handlerConfigurator.accept(h);\n\t\t\t};\n\t\t}\n\t\tthis.handshakeTimeoutMillis = from.handshakeTimeoutMillis;\n\t\tthis.closeNotifyFlushTimeoutMillis = from.closeNotifyFlushTimeoutMillis;\n\t\tthis.closeNotifyReadTimeoutMillis = from.closeNotifyReadTimeoutMillis;\n\t\tthis.builderHashCode = from.builderHashCode;\n\t}\n\tSslProvider(SslProvider from, DefaultConfigurationType type) {\n\t\tthis.sslContextBuilder = from.sslContextBuilder;\n\t\tthis.type = type;\n\t\tif (this.sslContextBuilder != null) {\n\t\t\tupdateDefaultConfiguration();\n\t\t\ttry {\n\t\t\t\tthis.sslContext = sslContextBuilder.build();\n\t\t\t} catch (SSLException e) {\n\t\t\t\tthrow Exceptions.propagate(e);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.sslContext= from.sslContext;\n\t\t}\n\t\tthis.handlerConfigurator = from.handlerConfigurator;\n\t\tthis.handshakeTimeoutMillis = from.handshakeTimeoutMillis;\n\t\tthis.closeNotifyFlushTimeoutMillis = from.closeNotifyFlushTimeoutMillis;\n\t\tthis.closeNotifyReadTimeoutMillis = from.closeNotifyReadTimeoutMillis;\n\t\tthis.builderHashCode = from.builderHashCode;\n\t}\n\tvoid updateDefaultConfiguration() {\n\t\tswitch (type) {\n\t\t\tcase H2:\n\t\t\t\tsslContextBuilder.sslProvider(\n\t\t\t\t                     OpenSsl.isAlpnSupported() ?\n\t\t\t\t                             io.netty.handler.ssl.SslProvider.OPENSSL :\n\t\t\t\t                             io.netty.handler.ssl.SslProvider.JDK)\n\t\t\t\t                 .ciphers(Http2SecurityUtil.CIPHERS, SupportedCipherSuiteFilter.INSTANCE)\n\t\t\t\t                 .applicationProtocolConfig(new ApplicationProtocolConfig(\n\t\t\t\t                     ApplicationProtocolConfig.Protocol.ALPN,\n\t\t\t\t                     ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,\n\t\t\t\t                     ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,\n\t\t\t\t                     ApplicationProtocolNames.HTTP_2,\n\t\t\t\t                     ApplicationProtocolNames.HTTP_1_1));\n\t\t\t\tbreak;\n\t\t\tcase TCP:\n\t\t\t\tsslContextBuilder.sslProvider(\n\t\t\t\t                     OpenSsl.isAvailable() ?\n\t\t\t\t                             io.netty.handler.ssl.SslProvider.OPENSSL :\n\t\t\t\t                             io.netty.handler.ssl.SslProvider.JDK);\n\t\t\t\tbreak;\n\t\t\tcase NONE:\n\t\t\t\tbreak; //no default configuration\n\t\t}\n\t}\n\t/**\n\t * Returns {@code SslContext} instance with configured settings.\n\t * \n\t * @return {@code SslContext} instance with configured settings.\n\t */\n\tpublic SslContext getSslContext() {\n\t\treturn this.sslContext;\n\t}\n\t/**\n\t * Returns the configured default configuration type.\n\t *\n\t * @return the configured default configuration type.\n\t */\n\t@Nullable\n\tpublic DefaultConfigurationType getDefaultConfigurationType() {\n\t\treturn this.type;\n\t}\n\tpublic void configure(SslHandler sslHandler) {\n\t\tsslHandler.setHandshakeTimeoutMillis(handshakeTimeoutMillis);\n\t\tsslHandler.setCloseNotifyFlushTimeoutMillis(closeNotifyFlushTimeoutMillis);\n\t\tsslHandler.setCloseNotifyReadTimeoutMillis(closeNotifyReadTimeoutMillis);\n\t\tif (handlerConfigurator != null) {\n\t\t\thandlerConfigurator.accept(sslHandler);\n\t\t}\n\t}\n\tpublic String asSimpleString() {\n\t\treturn toString();\n\t}\n\tpublic String asDetailedString() {\n\t\treturn \"handshakeTimeoutMillis=\" + this.handshakeTimeoutMillis +\n\t\t\t\t\", closeNotifyFlushTimeoutMillis=\" + this.closeNotifyFlushTimeoutMillis +\n\t\t\t\t\", closeNotifyReadTimeoutMillis=\" + this.closeNotifyReadTimeoutMillis;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"SslProvider{\" + asDetailedString() + \"}\";\n\t}\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tSslProvider that = (SslProvider) o;\n\t\treturn builderHashCode == that.builderHashCode;\n\t}\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(builderHashCode);\n\t}\n\tstatic final class Build implements SslContextSpec, DefaultConfigurationSpec, Builder {\n\t\t/**\n\t\t * Default SSL handshake timeout (milliseconds), fallback to 10 seconds\n\t\t */\n\t\tstatic final long DEFAULT_SSL_HANDSHAKE_TIMEOUT =\n\t\t\t\tLong.parseLong(System.getProperty(\n\t\t\t\t\t\tReactorNetty.SSL_HANDSHAKE_TIMEOUT,\n\t\t\t\t\t\t\"10000\"));\n\t\tSslContextBuilder sslCtxBuilder;\n\t\tDefaultConfigurationType type;\n\t\tSslContext sslContext;\n\t\tConsumer<? super SslHandler> handlerConfigurator;\n\t\tlong handshakeTimeoutMillis = DEFAULT_SSL_HANDSHAKE_TIMEOUT;\n\t\tlong closeNotifyFlushTimeoutMillis = 3000L;\n\t\tlong closeNotifyReadTimeoutMillis;\n\t\t// SslContextSpec\n<fim_suffix>\t\t@Override\n\t\tpublic final Builder sslContext(SslContext sslContext){\n\t\t\tthis.sslContext = Objects.requireNonNull(sslContext, \"sslContext\");\n\t\t\treturn this;\n\t\t}<fim_middle>// function below has no smell\n"}