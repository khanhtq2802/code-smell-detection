{"text": "<fim_prefix> * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage com.esri.samples.imagelayers.map_image_layer_tables;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\nimport javafx.application.Application;\nimport javafx.geometry.Insets;\nimport javafx.geometry.Pos;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Alert;\nimport javafx.scene.control.ListCell;\nimport javafx.scene.control.ListView;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\nimport com.esri.arcgisruntime.arcgisservices.RelationshipInfo;\nimport com.esri.arcgisruntime.concurrent.ListenableFuture;\nimport com.esri.arcgisruntime.data.ArcGISFeature;\nimport com.esri.arcgisruntime.data.Feature;\nimport com.esri.arcgisruntime.data.FeatureQueryResult;\nimport com.esri.arcgisruntime.data.QueryParameters;\nimport com.esri.arcgisruntime.data.RelatedFeatureQueryResult;\nimport com.esri.arcgisruntime.data.RelatedQueryParameters;\nimport com.esri.arcgisruntime.data.ServiceFeatureTable;\nimport com.esri.arcgisruntime.geometry.Point;\nimport com.esri.arcgisruntime.layers.ArcGISMapImageLayer;\nimport com.esri.arcgisruntime.loadable.LoadStatus;\nimport com.esri.arcgisruntime.mapping.ArcGISMap;\nimport com.esri.arcgisruntime.mapping.Basemap;\nimport com.esri.arcgisruntime.mapping.Viewpoint;\nimport com.esri.arcgisruntime.mapping.view.Graphic;\nimport com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\nimport com.esri.arcgisruntime.mapping.view.MapView;\nimport com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\nimport com.esri.arcgisruntime.symbology.SimpleRenderer;\n<fim_suffix>public class MapImageLayerTablesSample extends Application {\n  private MapView mapView;\n  private GraphicsOverlay graphicsOverlay;\n  private ServiceFeatureTable commentsTable;\n  private ListView<Feature> commentsListView;\n  /**\n   * Starting point of this application.\n   *\n   * @param args arguments to this application.\n   */\n  public static void main(String[] args) {\n    Application.launch(args);\n  }\n  @Override\n  public void start(Stage stage) {\n    try {\n      // create a stack pane and application scene\n      StackPane stackPane = new StackPane();\n      Scene scene = new Scene(stackPane);\n      scene.getStylesheets().add(getClass().getResource(\"/css/style.css\").toExternalForm());\n      // size the stage and add a title\n      stage.setTitle(\"Map Image Layer Tables Sample\");\n      stage.setWidth(800);\n      stage.setHeight(700);\n      stage.setScene(scene);\n      stage.show();\n      // create a map with a basemap\n      ArcGISMap map = new ArcGISMap(Basemap.createStreetsVector());\n      // create and add a map image layer to the map\n      // the map image layer contains a feature table with related spatial and non-spatial comment features\n      ArcGISMapImageLayer imageLayer = new ArcGISMapImageLayer(\n          \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/MapServer\");\n      map.getOperationalLayers().add(imageLayer);\n      // create a map view and set the map to it\n      mapView = new MapView();\n      mapView.setMap(map);\n      // create a graphics overlay to show the related spatial features in\n      graphicsOverlay = new GraphicsOverlay();\n      mapView.getGraphicsOverlays().add(graphicsOverlay);\n      // show the related graphics as cyan circles\n      SimpleRenderer renderer = new SimpleRenderer();\n      renderer.setSymbol(new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CIRCLE, 0xFF00FFFF, 14));\n      graphicsOverlay.setRenderer(renderer);\n      // create a list view to show the non-spatial comment features\n      commentsListView = new ListView<>();\n      commentsListView.setMaxSize(200.0, 150.0);\n      // show the comments attribute of the feature in the list\n      commentsListView.setCellFactory(listView -> new ListCell<Feature>() {\n        @Override\n        protected void updateItem(Feature item, boolean empty) {\n          super.updateItem(item, empty);\n          if (item != null) {\n            ArcGISFeature feature = (ArcGISFeature) item;\n            setText((String) feature.getAttributes().get(\"comments\"));\n          }\n        }\n      });\n      // when a comment is selected, query its related spatial features and show the first result on the map\n      commentsListView.getSelectionModel().selectedItemProperty().addListener(observable -> showRelatedRequests());\n      // when the layer is loaded, get the comment features\n      imageLayer.addDoneLoadingListener(() -> {\n        if (imageLayer.getLoadStatus() == LoadStatus.LOADED) {\n          // zoom to the layer's extent\n          mapView.setViewpoint(new Viewpoint(imageLayer.getFullExtent()));\n          // get the comments feature table\n          commentsTable = imageLayer.getTables().get(0);\n          // create query parameters to get features that have non-empty comments\n          QueryParameters queryParameters = new QueryParameters();\n          queryParameters.setWhereClause(\"requestid <> '' AND comments <> ''\");\n          // query the comments table for features\n          ListenableFuture<FeatureQueryResult> featureQuery = commentsTable.queryFeaturesAsync(queryParameters);\n          featureQuery.addDoneListener(() -> {\n            try {\n              // add the returned features to the list view\n              FeatureQueryResult results = featureQuery.get();\n              for (Feature f : results) {\n                commentsListView.getItems().addAll(f);\n              }\n            } catch (InterruptedException | ExecutionException ex) {\n              new Alert(Alert.AlertType.ERROR, \"Error querying comment features\");\n            }\n          });\n        } else {\n          new Alert(Alert.AlertType.ERROR, imageLayer.getLoadError().getMessage()).show();\n        }\n      });\n      // add the mapview and controls to the stack pane\n      stackPane.getChildren().addAll(mapView, commentsListView);\n      StackPane.setAlignment(commentsListView, Pos.TOP_LEFT);\n      StackPane.setMargin(commentsListView, new Insets(10, 0, 0, 10));\n    } catch (Exception e) {\n      // on any error, display the stack trace.\n      e.printStackTrace();\n    }\n  }\n  /**\n   * Queries for spatial features related to the selected comment in the list view and shows the first result on the\n   * map as a graphic.\n   */\n  private void showRelatedRequests() {\n    // clear any previous results\n    graphicsOverlay.getGraphics().clear();\n    // get the selected comment feature from the list view\n    Feature selectedCommentFeature = commentsListView.getSelectionModel().getSelectedItem();\n    if (selectedCommentFeature != null) {\n      // get the relationships info between layers in the table\n      ArcGISFeature feature = (ArcGISFeature) selectedCommentFeature;\n      List<RelationshipInfo> relationshipInfos = commentsTable.getLayerInfo().getRelationshipInfos();\n      if (!relationshipInfos.isEmpty()) {\n        // use the first relationship for the related query parameters\n        RelationshipInfo commentsRelationshipInfo = relationshipInfos.get(0);\n        RelatedQueryParameters relatedQueryParameters = new RelatedQueryParameters(commentsRelationshipInfo);\n        relatedQueryParameters.setReturnGeometry(true);\n        // query the table for related features using the parameters\n        ListenableFuture<List<RelatedFeatureQueryResult>> relatedFeaturesRequest = commentsTable\n            .queryRelatedFeaturesAsync(feature, relatedQueryParameters);\n        relatedFeaturesRequest.addDoneListener(() -> {\n          try {\n            // loop through the returned related features\n            List<RelatedFeatureQueryResult> results = relatedFeaturesRequest.get();\n            if (!results.isEmpty()) {\n              RelatedFeatureQueryResult relatedResult = results.get(0);\n              if (relatedResult.iterator().hasNext()) {\n                // get the first related feature\n                ArcGISFeature relatedFeature = (ArcGISFeature) relatedResult.iterator().next();\n                // load the feature and get its geometry to show as a graphic on the map\n                relatedFeature.loadAsync();\n                relatedFeature.addDoneLoadingListener(() -> {\n                  if (relatedFeature.getLoadStatus() == LoadStatus.LOADED) {\n                    Point point = (Point) relatedFeature.getGeometry();\n                    Graphic graphic = new Graphic(point);\n                    graphicsOverlay.getGraphics().add(graphic);\n                    // zoom to the graphic\n                    mapView.setViewpointCenterAsync(point, 40000);\n                  }\n                });\n              }\n            } else {\n              new Alert(Alert.AlertType.INFORMATION, \"No related features found\").show();\n            }\n          } catch (InterruptedException | ExecutionException ex) {\n            new Alert(Alert.AlertType.ERROR, \"Failed to query relationships\").show();\n          }\n        });\n      }\n    }\n  }\n  @Override\n  public void stop() {\n    // releases resources when the application closes\n    if (mapView != null) {\n      mapView.dispose();\n    }\n  }\n}<fim_middle>// class below is blob\n"}