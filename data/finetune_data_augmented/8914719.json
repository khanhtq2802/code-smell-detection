{"text": "<fim_prefix>    private static final org.apache.thrift.protocol.TField TBL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(\"tbl_name\", org.apache.thrift.protocol.TType.STRING, (short)2);\n    private static final org.apache.thrift.protocol.TField NEW_PART_FIELD_DESC = new org.apache.thrift.protocol.TField(\"new_part\", org.apache.thrift.protocol.TType.STRUCT, (short)3);\n    private static final org.apache.thrift.protocol.TField ENVIRONMENT_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField(\"environment_context\", org.apache.thrift.protocol.TType.STRUCT, (short)4);\n    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n    static {\n      schemes.put(StandardScheme.class, new alter_partition_with_environment_context_argsStandardSchemeFactory());\n      schemes.put(TupleScheme.class, new alter_partition_with_environment_context_argsTupleSchemeFactory());\n    }\n    private String db_name; // required\n    private String tbl_name; // required\n    private Partition new_part; // required\n    private EnvironmentContext environment_context; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      DB_NAME((short)1, \"db_name\"),\n      TBL_NAME((short)2, \"tbl_name\"),\n      NEW_PART((short)3, \"new_part\"),\n      ENVIRONMENT_CONTEXT((short)4, \"environment_context\");\n      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n      static {\n        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // DB_NAME\n            return DB_NAME;\n          case 2: // TBL_NAME\n            return TBL_NAME;\n          case 3: // NEW_PART\n            return NEW_PART;\n          case 4: // ENVIRONMENT_CONTEXT\n            return ENVIRONMENT_CONTEXT;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      public static _Fields findByName(String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final String _fieldName;\n      _Fields(short thriftId, String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData(\"db_name\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n      tmpMap.put(_Fields.TBL_NAME, new org.apache.thrift.meta_data.FieldMetaData(\"tbl_name\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n      tmpMap.put(_Fields.NEW_PART, new org.apache.thrift.meta_data.FieldMetaData(\"new_part\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Partition.class)));\n      tmpMap.put(_Fields.ENVIRONMENT_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData(\"environment_context\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EnvironmentContext.class)));\n      metaDataMap = Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alter_partition_with_environment_context_args.class, metaDataMap);\n    }\n    public alter_partition_with_environment_context_args() {\n    }\n    public alter_partition_with_environment_context_args(\n      String db_name,\n      String tbl_name,\n      Partition new_part,\n      EnvironmentContext environment_context)\n    {\n      this();\n      this.db_name = db_name;\n      this.tbl_name = tbl_name;\n      this.new_part = new_part;\n      this.environment_context = environment_context;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public alter_partition_with_environment_context_args(alter_partition_with_environment_context_args other) {\n      if (other.isSetDb_name()) {\n        this.db_name = other.db_name;\n      }\n      if (other.isSetTbl_name()) {\n        this.tbl_name = other.tbl_name;\n      }\n      if (other.isSetNew_part()) {\n        this.new_part = new Partition(other.new_part);\n      }\n      if (other.isSetEnvironment_context()) {\n        this.environment_context = new EnvironmentContext(other.environment_context);\n      }\n    }\n    public alter_partition_with_environment_context_args deepCopy() {\n      return new alter_partition_with_environment_context_args(this);\n    }\n    @Override\n    public void clear() {\n      this.db_name = null;\n      this.tbl_name = null;\n      this.new_part = null;\n      this.environment_context = null;\n    }\n    public String getDb_name() {\n      return this.db_name;\n    }\n    public void setDb_name(String db_name) {\n      this.db_name = db_name;\n    }\n    public void unsetDb_name() {\n      this.db_name = null;\n    }\n    /** Returns true if field db_name is set (has been assigned a value) and false otherwise */\n    public boolean isSetDb_name() {\n      return this.db_name != null;\n    }\n    public void setDb_nameIsSet(boolean value) {\n      if (!value) {\n        this.db_name = null;\n      }\n    }\n    public String getTbl_name() {\n      return this.tbl_name;\n    }\n    public void setTbl_name(String tbl_name) {\n      this.tbl_name = tbl_name;\n    }\n    public void unsetTbl_name() {\n      this.tbl_name = null;\n    }\n    /** Returns true if field tbl_name is set (has been assigned a value) and false otherwise */\n    public boolean isSetTbl_name() {\n      return this.tbl_name != null;\n    }\n    public void setTbl_nameIsSet(boolean value) {\n      if (!value) {\n        this.tbl_name = null;\n      }\n    }\n    public Partition getNew_part() {\n      return this.new_part;\n    }\n    public void setNew_part(Partition new_part) {\n      this.new_part = new_part;\n    }\n    public void unsetNew_part() {\n      this.new_part = null;\n    }\n    /** Returns true if field new_part is set (has been assigned a value) and false otherwise */\n    public boolean isSetNew_part() {\n      return this.new_part != null;\n    }\n    public void setNew_partIsSet(boolean value) {\n      if (!value) {\n        this.new_part = null;\n      }\n    }\n    public EnvironmentContext getEnvironment_context() {\n      return this.environment_context;\n    }\n    public void setEnvironment_context(EnvironmentContext environment_context) {\n      this.environment_context = environment_context;\n    }\n<fim_suffix>    public void unsetEnvironment_context() {\n      this.environment_context = null;\n    }<fim_middle>// function below has no smell\n"}