{"text": "<fim_prefix>/**\n * Copyright (c) 2014,2019 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\npackage org.eclipse.smarthome.automation.module.core.handler;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport org.eclipse.smarthome.automation.Action;\nimport org.eclipse.smarthome.automation.handler.ActionHandler;\nimport org.eclipse.smarthome.automation.handler.BaseModuleHandler;\nimport org.eclipse.smarthome.config.core.Configuration;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * This class is a handler for RunRuleAction module type. It runs the rules\n * which's UIDs are passed by the 'ruleUIDs' property. If a rule's status is not\n * IDLE that rule can not run!\n *\n * <pre>\n *Example:\n *\n *\"id\": \"RuleAction\",\n *\"type\": \"core.RunRuleAction\",\n *\"configuration\": {\n *     \"ruleUIDs\": [\"UID1\", \"UID2\", \"UID3\"]\n * }\n * </pre>\n *\n * @author Benedikt Niehues - Initial contribution\n * @author Kai Kreuzer - use rule engine instead of registry\n *\n */\n<fim_suffix>public class RunRuleActionHandler extends BaseModuleHandler<Action> implements ActionHandler {\n\n    /**\n     * The UID for this handler for identification in the factory.\n     */\n    public static final String UID = \"core.RunRuleAction\";\n\n    /**\n     * the key for the 'rulesUIDs' property of the {@link Action}.\n     */\n    private static final String RULE_UIDS_KEY = \"ruleUIDs\";\n    private static final String CONSIDER_CONDITIONS_KEY = \"considerConditions\";\n\n    /**\n     * The logger\n     */\n    private final Logger logger = LoggerFactory.getLogger(RunRuleActionHandler.class);\n\n    /**\n     * the UIDs of the rules to be executed.\n     */\n    private final List<String> ruleUIDs;\n\n    /**\n     * boolean to express if the conditions should be considered, defaults to\n     * true;\n     */\n    private boolean considerConditions = true;\n\n    @SuppressWarnings(\"unchecked\")\n    public RunRuleActionHandler(final Action module) {\n        super(module);\n        final Configuration config = module.getConfiguration();\n        if (config.getProperties().isEmpty()) {\n            throw new IllegalArgumentException(\"'Configuration' can not be empty.\");\n        }\n\n        ruleUIDs = (List<String>) config.get(RULE_UIDS_KEY);\n        if (ruleUIDs == null) {\n            throw new IllegalArgumentException(\"'ruleUIDs' property must not be null.\");\n        }\n        if (config.get(CONSIDER_CONDITIONS_KEY) != null && config.get(CONSIDER_CONDITIONS_KEY) instanceof Boolean) {\n            this.considerConditions = ((Boolean) config.get(CONSIDER_CONDITIONS_KEY)).booleanValue();\n        }\n    }\n\n    @Override\n    public Map<String, Object> execute(Map<String, Object> context) {\n        // execute each rule after the other; at the moment synchronously\n        for (String uid : ruleUIDs) {\n            if (callback != null) {\n                callback.runNow(uid, considerConditions, context);\n            } else {\n                logger.warn(\"Action is not applied to {} because rule engine is not available.\", uid);\n            }\n        }\n        // no outputs from this module\n        return null;\n    }\n}<fim_middle>// class below has no smell\n"}