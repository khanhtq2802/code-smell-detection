{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.tinkerpop.gremlin.process.traversal.util;\n\nimport org.apache.tinkerpop.gremlin.process.traversal.Step;\nimport org.apache.tinkerpop.gremlin.process.traversal.Traversal;\nimport org.apache.tinkerpop.gremlin.process.traversal.Traverser;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n * @author Marko A. Rodriguez (http://markorodriguez.com)\n */\npublic final class TraversalUtil {\n\n    private TraversalUtil() {\n    }\n\n    public static final <S, E> E apply(final Traverser.Admin<S> traverser, final Traversal.Admin<S, E> traversal) {\n        final Traverser.Admin<S> split = traverser.split();\n        split.setSideEffects(traversal.getSideEffects());\n        split.setBulk(1l);\n        traversal.reset();\n        traversal.addStart(split);\n        try {\n            return traversal.next(); // map\n        } catch (final NoSuchElementException e) {\n            throw new IllegalArgumentException(\"The provided traverser does not map to a value: \" + split + \"->\" + traversal);\n        }\n    }\n\n    public static final <S, E> Iterator<E> applyAll(final Traverser.Admin<S> traverser, final Traversal.Admin<S, E> traversal) {\n        final Traverser.Admin<S> split = traverser.split();\n        split.setSideEffects(traversal.getSideEffects());\n        split.setBulk(1l);\n        traversal.reset();\n        traversal.addStart(split);\n        return traversal; // flatmap\n    }\n\n    public static final <S, E> boolean test(final Traverser.Admin<S> traverser, final Traversal.Admin<S, E> traversal, E end) {\n        if (null == end) return TraversalUtil.test(traverser, traversal);\n\n        final Traverser.Admin<S> split = traverser.split();\n        split.setSideEffects(traversal.getSideEffects());\n        split.setBulk(1l);\n        traversal.reset();\n        traversal.addStart(split);\n        final Step<?, E> endStep = traversal.getEndStep();\n        while (traversal.hasNext()) {\n            if (endStep.next().get().equals(end))\n                return true;\n        }\n        return false;\n    }\n\n    public static final <S, E> E applyNullable(final Traverser.Admin<S> traverser, final Traversal.Admin<S, E> traversal) {\n        return null == traversal ? (E) traverser.get() : TraversalUtil.apply(traverser, traversal);\n    }\n\n    public static final <S, E> boolean test(final Traverser.Admin<S> traverser, final Traversal.Admin<S, E> traversal) {\n        final Traverser.Admin<S> split = traverser.split();\n        split.setSideEffects(traversal.getSideEffects());\n        split.setBulk(1l);\n        traversal.reset();\n        traversal.addStart(split);\n        return traversal.hasNext(); // filter\n    }\n\n    ///////\n\n    public static final <S, E> E apply(final S start, final Traversal.Admin<S, E> traversal) {\n        traversal.reset();\n        traversal.addStart(traversal.getTraverserGenerator().generate(start, traversal.getStartStep(), 1l));\n        try {\n            return traversal.next(); // map\n        } catch (final NoSuchElementException e) {\n            throw new IllegalArgumentException(\"The provided start does not map to a value: \" + start + \"->\" + traversal);\n        }\n    }\n\n<fim_suffix>    public static final <S, E> Iterator<E> applyAll(final S start, final Traversal.Admin<S, E> traversal) {\n        traversal.reset();\n        traversal.addStart(traversal.getTraverserGenerator().generate(start, traversal.getStartStep(), 1l));\n        return traversal; // flatMap\n    }\n\n    public static final <S, E> boolean test(final S start, final Traversal.Admin<S, E> traversal, final E end) {\n        if (null == end) return TraversalUtil.test(start, traversal);\n\n        traversal.reset();\n        traversal.addStart(traversal.getTraverserGenerator().generate(start, traversal.getStartStep(), 1l));\n        final Step<?, E> endStep = traversal.getEndStep();\n        while (traversal.hasNext()) {\n            if (endStep.next().get().equals(end))\n                return true;\n        }\n        return false;\n    }\n\n    public static final <S, E> E applyNullable(final S start, final Traversal.Admin<S, E> traversal) {\n        return null == traversal ? (E) start : TraversalUtil.apply(start, traversal);\n    }\n\n    public static final <S, E> boolean test(final S start, final Traversal.Admin<S, E> traversal) {\n        traversal.reset();\n        traversal.addStart(traversal.getTraverserGenerator().generate(start, traversal.getStartStep(), 1l));\n        return traversal.hasNext(); // filter\n    }\n}<fim_middle>// function below has no smell\n"}