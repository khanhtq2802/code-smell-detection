{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.apache.geode.pdx.internal;\n\nimport org.apache.geode.internal.cache.GemFireCacheImpl;\nimport org.apache.geode.internal.cache.InternalCache;\nimport org.apache.geode.internal.tcp.ByteBufferInputStream.ByteSource;\nimport org.apache.geode.pdx.PdxFieldAlreadyExistsException;\nimport org.apache.geode.pdx.PdxUnreadFields;\n\n/**\n * @since GemFire 6.6\n */\n<fim_suffix>public class PdxUnreadData implements PdxUnreadFields {\n\n  /**\n   * This is the original type of the blob that we deserialized and did not read some of its fields.\n   */\n  private UnreadPdxType unreadType;\n\n  private byte[][] unreadData;\n\n  public PdxUnreadData() {\n    // initialize may be called later\n  }\n\n  public PdxUnreadData(UnreadPdxType unreadType, PdxReaderImpl reader) {\n    initialize(unreadType, reader);\n  }\n\n  public void initialize(UnreadPdxType unreadType, PdxReaderImpl reader) {\n    this.unreadType = unreadType;\n    int[] indexes = unreadType.getUnreadFieldIndexes();\n    this.unreadData = new byte[indexes.length][];\n    int i = 0;\n    for (int idx : indexes) {\n\n      ByteSource field = reader.getRaw(idx);\n\n      // Copy the unread data into a new byte array\n      this.unreadData[i] = new byte[field.capacity()];\n      field.position(0);\n      field.get(this.unreadData[i]);\n      i++;\n    }\n  }\n\n  public UnreadPdxType getUnreadType() {\n    return this.unreadType;\n  }\n\n  /**\n   * Returns the PdxType to use when serializing this unread data. Returns null if we don't know\n   * what this type is yet.\n   *\n   * @return the PdxType to use when serializing this unread data.\n   */\n  public PdxType getSerializedType() {\n    return getUnreadType().getSerializedType();\n  }\n\n  public void setSerializedType(PdxType t) {\n    getUnreadType().setSerializedType(t);\n  }\n\n  public void sendTo(PdxWriterImpl writer) {\n    if (isEmpty())\n      return;\n    int[] indexes = this.unreadType.getUnreadFieldIndexes();\n    int i = 0;\n    while (i < this.unreadData.length) {\n      int idx = indexes[i];\n      byte[] data = this.unreadData[i];\n      PdxField ft = this.unreadType.getPdxFieldByIndex(idx);\n      try {\n        writer.writeRawField(ft, data);\n      } catch (PdxFieldAlreadyExistsException ex) {\n        // fix for bug 43133\n        throw new PdxFieldAlreadyExistsException(\n            \"Check the toData and fromData for \" + this.unreadType.getClassName()\n                + \" to see if the field \\\"\" + ft.getFieldName() + \"\\\" is spelled differently.\");\n      }\n      i++;\n    }\n  }\n\n  /**\n   * If o has unread data then add that unread data to copy.\n   */\n  public static void copy(Object o, Object copy) {\n    // This method is only called by CopyHelper which is public and does not require that a Cache\n    // exists.\n    // So we need to call getInstance instead of getExisting.\n    InternalCache cache = GemFireCacheImpl.getInstance();\n    if (cache == null)\n      return;\n    TypeRegistry tr = cache.getPdxRegistry();\n    PdxUnreadData ud = tr.getUnreadData(o);\n    if (ud != null && !ud.isEmpty()) {\n      tr.putUnreadData(copy, ud);\n    }\n  }\n\n  public boolean isEmpty() {\n    return this.unreadData == null;\n  }\n}<fim_middle>// class below has no smell\n"}