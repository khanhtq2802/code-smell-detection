{"text": "<fim_prefix>/*\n * Copyright 2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.data.hadoop.config.common.annotation.configurers;\n\nimport org.springframework.data.hadoop.config.common.annotation.AnnotationBuilder;\nimport org.springframework.data.hadoop.config.common.annotation.AnnotationConfigurerAdapter;\nimport org.springframework.data.hadoop.security.HadoopSecurity;\nimport org.springframework.data.hadoop.security.SecurityAuthMethod;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link org.springframework.data.hadoop.config.common.annotation.AnnotationConfigurer AnnotationConfigurer}\n * which knows how to handle configuring a {@link HadoopSecurity}.\n *\n * @author Janne Valkealahti\n *\n * @param <O> The Object being built by B\n * @param <I> The type of interface or builder itself returned by the configurer\n * @param <B> The Builder that is building O and is configured by {@link AnnotationConfigurerAdapter}\n */\npublic class DefaultSecurityConfigurer<O, I, B extends AnnotationBuilder<O>> extends\n\t\tAnnotationConfigurerAdapter<O, I, B> implements SecurityConfigurer<I> {\n\n\tprivate HadoopSecurity hadoopSecurity = new HadoopSecurity();\n\n\t@Override\n\tpublic SecurityConfigurer<I> authMethod(String authMethod) {\n\t\tif (StringUtils.hasText(authMethod)) {\n\t\t\tSecurityAuthMethod method = SecurityAuthMethod.valueOf(authMethod.toUpperCase());\n\t\t\tif (method != null) {\n\t\t\t\thadoopSecurity.setSecurityAuthMethod(method);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic SecurityConfigurer<I> authMethod(SecurityAuthMethod authMethod) {\n\t\tif (authMethod != null) {\n\t\t\thadoopSecurity.setSecurityAuthMethod(authMethod);\n\t\t}\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic SecurityConfigurer<I> userPrincipal(String principal) {\n\t\tif (StringUtils.hasText(principal)) {\n\t\t\thadoopSecurity.setUserPrincipal(principal);\n\t\t}\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic SecurityConfigurer<I> userKeytab(String keytab) {\n\t\tif (StringUtils.hasText(keytab)) {\n\t\t\thadoopSecurity.setUserKeytab(keytab);\n\t\t}\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic void configure(B builder) throws Exception {\n\t\tif (!configureSecurity(builder, hadoopSecurity)) {\n\t\t\tif (builder instanceof SecurityConfigurerAware) {\n\t\t\t\t((SecurityConfigurerAware) builder).configureSecurity(hadoopSecurity);\n\t\t\t}\n\t\t}\n\t}\n\n<fim_suffix>\t@Override\n\tpublic SecurityConfigurer<I> namenodePrincipal(String principal) {\n\t\tif (StringUtils.hasText(principal)) {\n\t\t\thadoopSecurity.setNamenodePrincipal(principal);\n\t\t}\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic SecurityConfigurer<I> rmManagerPrincipal(String principal) {\n\t\tif (StringUtils.hasText(principal)) {\n\t\t\thadoopSecurity.setRmManagerPrincipal(principal);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the {@link HadoopSecurity} configured for this builder.\n\t *\n\t * @return the security\n\t */\n\tpublic HadoopSecurity getSecurity() {\n\t\treturn hadoopSecurity;\n\t}\n\n\t/**\n\t * Configure security. If this implementation is extended, custom configure\n\t * handling can be handled here.\n\t *\n\t * @param builder the builder\n\t * @param security the security\n\t * @return true, if security configure is handled\n\t */\n\tprotected boolean configureSecurity(B builder, HadoopSecurity security) {\n\t\treturn false;\n\t}\n\n}<fim_middle>// function below has no smell\n"}