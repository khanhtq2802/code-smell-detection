{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2007 Spring IDE Developers\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Spring IDE Developers - initial API and implementation\n *******************************************************************************/\npackage org.springframework.ide.eclipse.webflow.ui.graph;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport org.eclipse.jface.action.IAction;\nimport org.eclipse.jface.resource.ImageDescriptor;\nimport org.eclipse.jface.resource.ImageRegistry;\nimport org.eclipse.swt.graphics.Image;\n/**\n * The images provided by the Spring UI plugin. Initialize the image registry by\n * declaring all of the required graphics. This involves creating JFace image\n * descriptors describing how to create/find the image should it be needed. The\n * image is not actually allocated until requested.\n * Prefix conventions Wizard Banners WIZBAN_ Preference Banners PREF_BAN_\n * Property Page Banners PROPBAN_ Color toolbar CTOOL_ Enable toolbar ETOOL_\n * Disable toolbar DTOOL_ Local enabled toolbar ELCL_ Local Disable toolbar\n * DLCL_ Object large OBJL_ Object small OBJS_ View VIEW_ Product images PROD_\n * Misc images MISC_\n * Where are the images? The images (typically gifs) are found in the same\n * location as this plugin class. This may mean the same package directory as\n * the package holding this class. The images are declared using\n * <code>this.getClass()</code> to ensure they are looked up via this plugin\n * class.\n * @author Christian Dupuis\n * @see org.eclipse.jface.resource.ImageRegistry\n */\npublic class WebflowImages {\n    /**\n     * \n     */\n    private static final String ICON_PATH_PREFIX = \"icons/full/\";\n    /**\n     * \n     */\n    private static final String NAME_PREFIX = Activator.PLUGIN_ID + '.';\n    /**\n     * \n     */\n    private static final int NAME_PREFIX_LENGTH = NAME_PREFIX.length();\n    /* Declare Common paths */\n    /**\n     * \n     */\n    private static URL ICON_BASE_URL = null;\n    static {\n        try {\n            ICON_BASE_URL = new URL(Activator.getDefault().getBundle()\n                    .getEntry(\"/\"), ICON_PATH_PREFIX);\n        } catch (MalformedURLException e) {\n            Activator.log(e);\n        }\n    }\n    /**\n     * A table of all the <code>ImageDescriptor</code>s.\n     */\n    private static Map imageDescriptors;\n    /**\n     * The image registry containing <code>Image</code>s.\n     */\n    private static ImageRegistry imageRegistry;\n    /*\n     * Available cached Images in the Java plugin image registry.\n     */\n    /**\n     * \n     */\n    public static final String IMG_OBJS_EXPORT_ENABLED = NAME_PREFIX\n            + \"export_wiz_obj.gif\";\n    /**\n     * \n     */\n    public static final String IMG_OBJS_EXPORT_DISABLED = NAME_PREFIX\n            + \"export_wiz.gif\";\n    /**\n     * \n     */\n    public static final String IMG_OBJS_CONNECTION = NAME_PREFIX\n            + \"connection16.gif\";\n    /**\n     * \n     */\n    public static final String IMG_OBJS_ELSE_CONNECTION = NAME_PREFIX\n            + \"connection_d16.gif\";\n    /**\n     * \n     */\n    public static final String IMG_OBJS_OUTLINE = NAME_PREFIX + \"outline.gif\";\n    /**\n     * \n     */\n    public static final String IMG_OBJS_OVERVIEW = NAME_PREFIX + \"overview.gif\";\n    /**\n     * \n     */\n    public static final String IMG_OBJS_JAVABEAN = NAME_PREFIX + \"javabean.gif\";\n    // Use IPath and toOSString to build the names to ensure they have the\n    // slashes correct\n    //      private final static String CTOOL = \"ctool16/\"; //basic colors - size\n    // 16x16\n    //      private final static String LOCALTOOL = \"clcl16/\"; //basic colors - size\n    // 16x16\n    //      private final static String DLCL = \"dlcl16/\"; //disabled - size 16x16\n    //      private final static String ELCL = \"elcl16/\"; //enabled - size 16x16\n    /**\n     * \n     */\n    private final static String OBJECT = \"obj16/\"; //basic colors - size\n    // 16x16\n    //      private final static String WIZBAN = \"wizban/\"; //basic colors - size\n    // 16x16\n    //      private final static String OVR = \"ovr16/\"; //basic colors - size 7x8\n    //      private final static String VIEW= \"cview16/\"; // views //$NON-NLS-1$\n    /**\n     * \n     */\n    public static final ImageDescriptor DESC_OBJS_EXPORT_ENABLED = createManaged(\n            OBJECT, IMG_OBJS_EXPORT_ENABLED);\n    /**\n     * \n     */\n    public static final ImageDescriptor DESC_OBJS_EXPORT_DISABLED = createManaged(\n            OBJECT, IMG_OBJS_EXPORT_DISABLED);\n    /**\n     * \n     */\n    public static final ImageDescriptor DESC_OBJS_CONNECTION = createManaged(\n            OBJECT, IMG_OBJS_CONNECTION);\n    /**\n     * \n     */\n    public static final ImageDescriptor DESC_OBJS_ELSE_CONNECTION = createManaged(\n            OBJECT, IMG_OBJS_ELSE_CONNECTION);\n    /**\n     * \n     */\n    public static final ImageDescriptor DESC_OBJS_OUTLINE = createManaged(\n            OBJECT, IMG_OBJS_OUTLINE);\n    /**\n     * \n     */\n    public static final ImageDescriptor DESC_OBJS_OVERVIEW = createManaged(\n            OBJECT, IMG_OBJS_OVERVIEW);\n    /**\n     * \n     */\n    public static final ImageDescriptor DESC_OBJS_JAVABEAN = createManaged(\n            OBJECT, IMG_OBJS_JAVABEAN);\n    /**\n     * Returns the <code>Image<code> identified by the given key,\n     * or <code>null</code> if it does not exist.\n     * \n     * @param key \n     * \n     * @return \n     */\n    public static Image getImage(String key) {\n        return getImageRegistry().get(key);\n    }\n    /**\n     * Sets the three image descriptors for enabled, disabled, and hovered to an\n     * action. The actions are retrieved from the *tool16 folders.\n     * \n     * @param action \n     * @param iconName \n     */\n    public static void setToolImageDescriptors(IAction action, String iconName) {\n        setImageDescriptors(action, \"tool16\", iconName);\n    }\n    /**\n     * Sets the three image descriptors for enabled, disabled, and hovered to an\n     * action. The actions are retrieved from the *lcl16 folders.\n     * \n     * @param action \n     * @param iconName \n     */\n<fim_suffix>    public static void setLocalImageDescriptors(IAction action, String iconName) {\n        setImageDescriptors(action, \"lcl16\", iconName);\n    }\n    /*\n     * Helper method to access the image registry from the JavaPlugin class.\n     */\n    /**\n     * \n     * \n     * @return \n     */\n    public static ImageRegistry getImageRegistry() {\n        if (imageRegistry == null) {\n            imageRegistry = new ImageRegistry();\n            for (Iterator iter = imageDescriptors.keySet().iterator(); iter\n                    .hasNext();) {\n                String key = (String) iter.next();\n                imageRegistry.put(key, (ImageDescriptor) imageDescriptors\n                        .get(key));\n            }\n            imageDescriptors = null;\n        }\n        return imageRegistry;\n    }\n    //---- Helper methods to access icons on the file system\n    // -------------------\n    /**\n     * \n     * \n     * @param action \n     * @param type \n     * @param relPath \n     */\n    private static void setImageDescriptors(IAction action, String type,\n            String relPath) {\n        try {\n            ImageDescriptor id = ImageDescriptor.createFromURL(makeIconFileURL(\n                    \"d\" + type, relPath));\n            if (id != null) {\n                action.setDisabledImageDescriptor(id);\n            }\n        } catch (MalformedURLException e) {\n            Activator.log(e);\n        }\n        /*\n         * try { ImageDescriptor id =\n         * ImageDescriptor.createFromURL(makeIconFileURL( \"c\" + type, relPath));\n         * if (id != null) { action.setHoverImageDescriptor(id); } } catch\n         * (MalformedURLException e) { BeansGraphPlugin.log(e); }\n         */\n        action.setImageDescriptor(create(\"e\" + type, relPath));\n    }\n    /**\n     * \n     * \n     * @param prefix \n     * @param name \n     * \n     * @return \n     */\n    @SuppressWarnings(\"unchecked\")\n\tprivate static ImageDescriptor createManaged(String prefix, String name) {\n        try {\n            ImageDescriptor result = ImageDescriptor\n                    .createFromURL(makeIconFileURL(prefix, name<fim_middle>// function below has no smell\n"}