{"text": "<fim_prefix>// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage org.apache.cloudstack.api.command.admin.ca;\n\nimport java.math.BigInteger;\n\nimport javax.inject.Inject;\n\nimport org.apache.cloudstack.acl.RoleType;\nimport org.apache.cloudstack.api.APICommand;\nimport org.apache.cloudstack.api.ApiConstants;\nimport org.apache.cloudstack.api.ApiErrorCode;\nimport org.apache.cloudstack.api.BaseAsyncCmd;\nimport org.apache.cloudstack.api.BaseCmd;\nimport org.apache.cloudstack.api.Parameter;\nimport org.apache.cloudstack.api.ServerApiException;\nimport org.apache.cloudstack.api.response.SuccessResponse;\nimport org.apache.cloudstack.ca.CAManager;\nimport org.apache.cloudstack.context.CallContext;\n\nimport com.cloud.event.EventTypes;\nimport com.google.common.base.Strings;\n\n<fim_suffix>@APICommand(name = RevokeCertificateCmd.APINAME,\n        description = \"Revokes certificate using configured CA plugin\",\n        responseObject = SuccessResponse.class,\n        requestHasSensitiveInfo = true,\n        responseHasSensitiveInfo = false,\n        since = \"4.11.0\",\n        authorized = {RoleType.Admin})\npublic class RevokeCertificateCmd extends BaseAsyncCmd {\n\n    public static final String APINAME = \"revokeCertificate\";\n\n    @Inject\n    private CAManager caManager;\n\n    /////////////////////////////////////////////////////\n    //////////////// API parameters /////////////////////\n    /////////////////////////////////////////////////////\n\n    @Parameter(name = ApiConstants.SERIAL, type = BaseCmd.CommandType.STRING, required = true, description = \"The certificate serial number, as a hex value\")\n    private String serial;\n\n    @Parameter(name = ApiConstants.CN, type = BaseCmd.CommandType.STRING, description = \"The certificate CN\")\n    private String cn;\n\n    @Parameter(name = ApiConstants.PROVIDER, type = BaseCmd.CommandType.STRING, description = \"Name of the CA service provider, otherwise the default configured provider plugin will be used\")\n    private String provider;\n\n    /////////////////////////////////////////////////////\n    /////////////////// Accessors ///////////////////////\n    /////////////////////////////////////////////////////\n\n    public BigInteger getSerialBigInteger() {\n        if (Strings.isNullOrEmpty(serial)) {\n            throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Certificate serial cannot be empty\");\n        }\n        return new BigInteger(serial, 16);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public String getProvider() {\n        return provider;\n    }\n\n    /////////////////////////////////////////////////////\n    /////////////// API Implementation///////////////////\n    /////////////////////////////////////////////////////\n\n    @Override\n    public void execute() {\n        boolean result = caManager.revokeCertificate(getSerialBigInteger(), getCn(), getProvider());\n        SuccessResponse response = new SuccessResponse(getCommandName());\n        response.setSuccess(result);\n        setResponseObject(response);\n    }\n\n    @Override\n    public String getCommandName() {\n        return APINAME.toLowerCase() + BaseCmd.RESPONSE_SUFFIX;\n    }\n\n    @Override\n    public long getEntityOwnerId() {\n        return CallContext.current().getCallingAccount().getId();\n    }\n\n    @Override\n    public String getEventType() {\n        return EventTypes.EVENT_CA_CERTIFICATE_REVOKE;\n    }\n\n    @Override\n    public String getEventDescription() {\n        return \"revoking certificate with serial id=\" + serial + \", cn=\" + cn;\n    }\n}<fim_middle>// class below is data class\n"}