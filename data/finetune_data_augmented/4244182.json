{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.imaging.formats.png.transparencyfilters;\n\nimport static org.apache.commons.imaging.common.BinaryFunctions.read2Bytes;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.ImageReadException;\n\n<fim_suffix>public class TransparencyFilterTrueColor extends TransparencyFilter {\n    private final int transparentColor;\n\n    public TransparencyFilterTrueColor(final byte[] bytes) throws IOException {\n        super(bytes);\n\n        final ByteArrayInputStream is = new ByteArrayInputStream(bytes);\n        final int transparentRed = read2Bytes(\"transparentRed\", is, \"tRNS: Missing transparentColor\", getByteOrder());\n        final int transparentGreen = read2Bytes(\"transparentGreen\", is, \"tRNS: Missing transparentColor\", getByteOrder());\n        final int transparentBlue = read2Bytes(\"transparentBlue\", is, \"tRNS: Missing transparentColor\", getByteOrder());\n\n        transparentColor = ((0xff & transparentRed) << 16)\n                | ((0xff & transparentGreen) << 8)\n                | ((0xff & transparentBlue) << 0);\n\n    }\n\n    @Override\n    public int filter(final int rgb, final int sample) throws ImageReadException,\n            IOException {\n        if ((0x00ffffff & rgb) == transparentColor) {\n            return 0x00;\n        }\n\n        return rgb;\n    }\n}<fim_middle>// class below has no smell\n"}