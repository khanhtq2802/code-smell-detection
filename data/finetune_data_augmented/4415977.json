{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.empire.jsf2.utils;\n\nimport java.util.Map;\n\nimport javax.faces.context.FacesContext;\n\nimport org.apache.empire.jsf2.pages.Page;\n\n<fim_suffix>public class SessionMap\n{\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T get(String objectName, Class<T> type)\n    {\n        Map<String, Object> map = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();\n        return (T) map.get(objectName);\n    }\n\n    public static <T> T get(Page page, String propertyName, Class<T> type)\n    {\n        String objectName = page.getPageName() + \".\" + propertyName + \".\" + type.getSimpleName();\n        return get(objectName, type);\n    }\n    \n    public static <T> void put(String objectName, Class<T> type, T object)\n    {\n        Map<String, Object> map = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();\n        if (object != null)\n            map.put(objectName, object);\n        else\n            map.remove(objectName);\n    }\n    \n    public static <T> void remove(Page page, String propertyName, Class<T> type, T object)\n    {\n        String objectName = page.getPageName() + \".\" + propertyName + \".\" + type.getSimpleName();\n        put(objectName, type, object); \n    }\n    \n    public static <T> void remove(String objectName, Class<T> type)\n    {\n        put(objectName, type, null); \n    }\n    \n    public static <T> void remove(Page page, String propertyName, Class<T> type)\n    {\n        remove(page, propertyName, type, null); \n    }\n}<fim_middle>// class below has no smell\n"}