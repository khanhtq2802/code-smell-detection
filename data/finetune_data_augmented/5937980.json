{"text": "<fim_prefix>         * This is never thrown by the server, it shouldn't be used other than\n         * to indicate a range. Specifically error codes greater than this\n         * value, but lesser than {@link #APIERROR}, are system errors.\n         */\n        SYSTEMERROR (SystemError),\n        /** A runtime inconsistency was found */\n        RUNTIMEINCONSISTENCY (RuntimeInconsistency),\n        /** A data inconsistency was found */\n        DATAINCONSISTENCY (DataInconsistency),\n        /** Connection to the server has been lost */\n        CONNECTIONLOSS (ConnectionLoss),\n        /** Error while marshalling or unmarshalling data */\n        MARSHALLINGERROR (MarshallingError),\n        /** Operation is unimplemented */\n        UNIMPLEMENTED (Unimplemented),\n        /** Operation timeout */\n        OPERATIONTIMEOUT (OperationTimeout),\n        /** Invalid arguments */\n        BADARGUMENTS (BadArguments),\n        /** No quorum of new config is connected and up-to-date with the leader of last commmitted config - try \n         *  invoking reconfiguration after new servers are connected and synced */\n        NEWCONFIGNOQUORUM (NewConfigNoQuorum),\n        /** Another reconfiguration is in progress -- concurrent reconfigs not supported (yet) */\n        RECONFIGINPROGRESS (ReconfigInProgress),\n        /** Unknown session (internal server use only) */\n        UNKNOWNSESSION (UnknownSession),\n        /** API errors.\n         * This is never thrown by the server, it shouldn't be used other than\n         * to indicate a range. Specifically error codes greater than this\n         * value are API errors (while values less than this indicate a\n         * {@link #SYSTEMERROR}).\n         */\n        APIERROR (APIError),\n        /** Node does not exist */\n        NONODE (NoNode),\n        /** Not authenticated */\n        NOAUTH (NoAuth),\n        /** Version conflict\n            In case of reconfiguration: reconfig requested from config version X but last seen config has a different version Y */\n        BADVERSION (BadVersion),\n        /** Ephemeral nodes may not have children */\n        NOCHILDRENFOREPHEMERALS (NoChildrenForEphemerals),\n        /** The node already exists */\n        NODEEXISTS (NodeExists),\n        /** The node has children */\n        NOTEMPTY (NotEmpty),\n        /** The session has been expired by the server */\n        SESSIONEXPIRED (SessionExpired),\n        /** Invalid callback specified */\n        INVALIDCALLBACK (InvalidCallback),\n        /** Invalid ACL specified */\n        INVALIDACL (InvalidACL),\n        /** Client authentication failed */\n        AUTHFAILED (AuthFailed),\n        /** Session moved to another server, so operation is ignored */\n        SESSIONMOVED (-118),\n        /** State-changing request is passed to read-only server */\n        NOTREADONLY (-119),\n        /** Attempt to create ephemeral node on a local session */\n        EPHEMERALONLOCALSESSION (EphemeralOnLocalSession),\n        /** Attempts to remove a non-existing watcher */\n        NOWATCHER (-121),\n        /** Request not completed within max allowed time.*/\n        REQUESTTIMEOUT (-122),\n        /** Attempts to perform a reconfiguration operation when reconfiguration feature is disabled. */\n        RECONFIGDISABLED(-123);\n        private static final Map<Integer,Code> lookup\n            = new HashMap<Integer,Code>();\n        static {\n            for(Code c : EnumSet.allOf(Code.class))\n                lookup.put(c.code, c);\n        }\n        private final int code;\n        Code(int code) {\n            this.code = code;\n        }\n        /**\n         * Get the int value for a particular Code.\n         * @return error code as integer\n         */\n        public int intValue() { return code; }\n        /**\n         * Get the Code value for a particular integer error code\n         * @param code int error code\n         * @return Code value corresponding to specified int code, or null\n         */\n        public static Code get(int code) {\n            return lookup.get(code);\n        }\n    }\n    static String getCodeMessage(Code code) {\n        switch (code) {\n            case OK:\n                return \"ok\";\n            case SYSTEMERROR:\n                return \"SystemError\";\n            case RUNTIMEINCONSISTENCY:\n                return \"RuntimeInconsistency\";\n            case DATAINCONSISTENCY:\n                return \"DataInconsistency\";\n            case CONNECTIONLOSS:\n                return \"ConnectionLoss\";\n            case MARSHALLINGERROR:\n                return \"MarshallingError\";\n            case NEWCONFIGNOQUORUM:\n               return \"NewConfigNoQuorum\";\n            case RECONFIGINPROGRESS:\n               return \"ReconfigInProgress\";\n            case UNIMPLEMENTED:\n                return \"Unimplemented\";\n            case OPERATIONTIMEOUT:\n                return \"OperationTimeout\";\n            case BADARGUMENTS:\n                return \"BadArguments\";\n            case APIERROR:\n                return \"APIError\";\n            case NONODE:\n                return \"NoNode\";\n            case NOAUTH:\n                return \"NoAuth\";\n            case BADVERSION:\n                return \"BadVersion\";\n            case NOCHILDRENFOREPHEMERALS:\n                return \"NoChildrenForEphemerals\";\n            case NODEEXISTS:\n                return \"NodeExists\";\n            case INVALIDACL:\n                return \"InvalidACL\";\n            case AUTHFAILED:\n                return \"AuthFailed\";\n            case NOTEMPTY:\n                return \"Directory not empty\";\n            case SESSIONEXPIRED:\n                return \"Session expired\";\n            case INVALIDCALLBACK:\n                return \"Invalid callback\";\n            case SESSIONMOVED:\n                return \"Session moved\";\n            case NOTREADONLY:\n                return \"Not a read-only call\";\n            case EPHEMERALONLOCALSESSION:\n                return \"Ephemeral node on local session\";\n            case NOWATCHER:\n                return \"No such watcher\";\n            case RECONFIGDISABLED:\n                return \"Reconfig is disabled\";\n            default:\n                return \"Unknown error \" + code;\n        }\n    }\n    private Code code;\n    private String path;\n    public KeeperException(Code code) {\n        this.code = code;\n    }\n    KeeperException(Code code, String path) {\n        this.code = code;\n        this.path = path;\n    }\n    /**\n     * Read the error code for this exception\n     * @return the error code for this exception\n     * @deprecated deprecated in 3.1.0, use {@link #code()} instead\n     */\n    @Deprecated\n    public int getCode() {\n        return code.code;\n    }\n    /**\n     * Read the error Code for this exception\n     * @return the error Code for this exception\n     */\n    public Code code() {\n        return code;\n    }\n    /**\n     * Read the path for this exception\n     * @return the path associated with this error, null if none\n     */\n    public String getPath() {\n        return path;\n    }\n    @Override\n    public String getMessage() {\n        if (path == null || path.isEmpty()) {\n            return \"KeeperErrorCode = \" + getCodeMessage(code);\n        }\n        return \"KeeperErrorCode = \" + getCodeMessage(code) + \" for \" + path;\n    }\n    void setMultiResults(List<OpResult> results) {\n        this.results = results;\n    }\n    /**\n     * If this exception was thrown by a multi-request then the (partial) results\n     * and error codes can be retrieved using this getter.\n     * @return A copy of the list of results from the operations in the multi-request.\n     *\n     * @since 3.4.0\n     *\n     */\n    public List<OpResult> getResults() {\n        return results != null ? new ArrayList<OpResult>(results) : null;\n    }\n    /**\n     *  @see Code#APIERROR\n     */\n    @InterfaceAudience.Public\n    public static class APIErrorException extends KeeperException {\n        public APIErrorException() {\n            super(Code.APIERROR);\n        }\n    }\n    /**\n     *  @see Code#AUTHFAILED\n     */\n    @InterfaceAudience.Public\n    public static class AuthFailedException extends KeeperException {\n        public AuthFailedException() {\n            super(Code.AUTHFAILED);\n        }\n    }\n    /**\n     *  @see Code#BADARGUMENTS\n     */\n    @InterfaceAudience.Public\n    public static class BadArgumentsException extends KeeperException {\n        public BadArgumentsException() {\n            super(Code.BADARGUMENTS);\n        }\n        public BadArgumentsException(String path) {\n            super(Code.BADARGUMENTS, path);\n        }\n    }\n    /**\n     * @see Code#BADVERSION\n     */\n    @InterfaceAudience.Public\n    public static class BadVersionException extends KeeperException {\n        public BadVersionException() {\n            super(Code.BADVERSION);\n        }\n        public BadVersionException(String path) {\n            super(Code.BADVERSION, path);\n        }\n    }\n    /**\n     * @see Code#CONNECTIONLOSS\n     */\n    @InterfaceAudience.Public\n    public static class ConnectionLossException extends KeeperException {\n        public ConnectionLossException() {\n            super(Code.CONNECTIONLOSS);\n        }\n    }\n    /**\n     * @see Code#DATAINCONSISTENCY\n     */\n    @InterfaceAudience.Public\n    public static class DataInconsistencyException extends KeeperException {\n        public DataInconsistencyException() {\n            super(Code.DATAINCONSISTENCY);\n        }\n    }\n    /**\n     * @see Code#INVALIDACL\n     */\n<fim_suffix>    @InterfaceAudience.Public\n    public static class InvalidACLException extends KeeperException {\n        public InvalidACLException() {\n            super(Code.INVALIDACL);\n        }\n        public InvalidACLException(String path) {\n            super(Code.INVALIDACL, path);\n        }\n    }<fim_middle>// class below has no smell\n"}