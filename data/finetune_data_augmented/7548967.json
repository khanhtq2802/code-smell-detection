{"text": "<fim_prefix> *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.integration.zookeeper.leader;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.curator.framework.CuratorFramework;\nimport org.apache.curator.framework.imps.CuratorFrameworkState;\nimport org.apache.curator.framework.recipes.leader.LeaderSelector;\nimport org.apache.curator.framework.recipes.leader.LeaderSelectorListenerAdapter;\nimport org.springframework.context.SmartLifecycle;\nimport org.springframework.integration.leader.Candidate;\nimport org.springframework.integration.leader.Context;\nimport org.springframework.integration.leader.event.LeaderEventPublisher;\nimport org.springframework.util.StringUtils;\n/**\n * Bootstrap leadership {@link Candidate candidates}\n * with ZooKeeper/Curator. Upon construction, {@link #start} must be invoked to\n * register the candidate for leadership election.\n *\n * @author Patrick Peralta\n * @author Janne Valkealahti\n * @author Gary Russell\n * @author Artem Bilan\n *\n * @since 4.2\n */\npublic class LeaderInitiator implements SmartLifecycle {\n\tprivate static final Log logger = LogFactory.getLog(LeaderInitiator.class);\n\tprivate static final String DEFAULT_NAMESPACE = \"/spring-integration/leader/\";\n\tprivate final CuratorContext context = new CuratorContext();\n\t/**\n\t * Curator client.\n\t */\n\tprivate final CuratorFramework client;\n\t/**\n\t * Candidate for leader election.\n\t */\n\tprivate final Candidate candidate;\n\tprivate final Context nullContext = new Context() {\n\t\t@Override\n\t\tpublic boolean isLeader() {\n\t\t\treturn false;\n\t\t}\n\t\t@Override\n\t\tpublic String getRole() {\n\t\t\treturn LeaderInitiator.this.candidate.getRole();\n\t\t}\n\t};\n\tprivate final Object lifecycleMonitor = new Object();\n\t/**\n\t * Curator utility for selecting leaders.\n\t */\n\tprivate volatile LeaderSelector leaderSelector;\n\t/**\n\t * @see SmartLifecycle\n\t */\n\tprivate volatile boolean autoStartup = true;\n\t/**\n\t * @see SmartLifecycle which is an extension of org.springframework.context.Phased\n\t */\n\tprivate volatile int phase = Integer.MAX_VALUE - 1000;\n\t/**\n\t * Flag that indicates whether the leadership election for\n\t * this {@link #candidate} is running.\n\t */\n\tprivate volatile boolean running;\n\t/** Base path in a zookeeper */\n\tprivate final String namespace;\n\t/** Leader event publisher if set */\n\tprivate volatile LeaderEventPublisher leaderEventPublisher;\n\t/**\n\t * Construct a {@link LeaderInitiator}.\n\t *\n\t * @param client     Curator client\n\t * @param candidate  leadership election candidate\n\t */\n\tpublic LeaderInitiator(CuratorFramework client, Candidate candidate) {\n\t\tthis(client, candidate, DEFAULT_NAMESPACE);\n\t}\n\t/**\n\t * Construct a {@link LeaderInitiator}.\n\t *\n\t * @param client     Curator client\n\t * @param candidate  leadership election candidate\n\t * @param namespace  namespace base path in zookeeper\n\t */\n\tpublic LeaderInitiator(CuratorFramework client, Candidate candidate, String namespace) {\n\t\tthis.client = client;\n\t\tthis.candidate = candidate;\n\t\tthis.namespace = namespace;\n\t}\n\t/**\n\t * @return true if leadership election for this {@link #candidate} is running\n\t */\n\t@Override\n\tpublic boolean isRunning() {\n\t\treturn this.running;\n\t}\n\t@Override\n\tpublic int getPhase() {\n\t\treturn this.phase;\n\t}\n\t/**\n\t * @param phase the phase\n\t * @see SmartLifecycle\n\t */\n\tpublic void setPhase(int phase) {\n\t\tthis.phase = phase;\n\t}\n\t@Override\n\tpublic boolean isAutoStartup() {\n\t\treturn this.autoStartup;\n\t}\n\t/**\n\t * @param autoStartup true to start automatically\n\t * @see SmartLifecycle\n\t */\n\tpublic void setAutoStartup(boolean autoStartup) {\n\t\tthis.autoStartup = autoStartup;\n\t}\n\t/**\n\t * Start the registration of the {@link #candidate} for leader election.\n\t */\n\t@Override\n\tpublic void start() {\n\t\tsynchronized (this.lifecycleMonitor) {\n\t\t\tif (!this.running) {\n\t\t\t\tif (this.client.getState() != CuratorFrameworkState.STARTED) {\n\t\t\t\t\t// we want to do curator start here because it needs to\n\t\t\t\t\t// be started before leader selector and it gets a little\n\t\t\t\t\t// complicated to control ordering via beans so that\n\t\t\t\t\t// curator is fully started.\n\t\t\t\t\tthis.client.start();\n\t\t\t\t}\n\t\t\t\tthis.leaderSelector = new LeaderSelector(this.client, buildLeaderPath(), new LeaderListener());\n\t\t\t\tthis.leaderSelector.setId(this.candidate.getId());\n\t\t\t\tthis.leaderSelector.autoRequeue();\n\t\t\t\tthis.leaderSelector.start();\n\t\t\t\tthis.running = true;\n\t\t\t\tlogger.debug(\"Started LeaderInitiator\");\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Stop the registration of the {@link #candidate} for leader election.\n\t * If the candidate is currently leader, its leadership will be revoked.\n\t */\n\t@Override\n\tpublic void stop() {\n\t\tsynchronized (this.lifecycleMonitor) {\n\t\t\tif (this.running) {\n\t\t\t\tthis.leaderSelector.close();\n\t\t\t\tthis.running = false;\n\t\t\t\tlogger.debug(\"Stopped LeaderInitiator\");\n\t\t\t}\n\t\t}\n\t}\n\t@Override\n\tpublic void stop(Runnable runnable) {\n\t\tstop();\n\t\trunnable.run();\n\t}\n\t/**\n\t * Sets the {@link LeaderEventPublisher}.\n\t *\n\t * @param leaderEventPublisher the event publisher\n\t */\n\tpublic void setLeaderEventPublisher(LeaderEventPublisher leaderEventPublisher) {\n\t\tthis.leaderEventPublisher = leaderEventPublisher;\n\t}\n\t/**\n\t * The context of the initiator.\n\t * @return the context.\n\t * @since 5.0\n\t */\n\tpublic Context getContext() {\n\t\tif (this.leaderSelector == null) {\n\t\t\treturn this.nullContext;\n\t\t}\n\t\treturn this.context;\n\t}\n\t/**\n\t * @return the ZooKeeper path used for leadership election by Curator\n\t */\n\tprivate String buildLeaderPath() {\n\t\tString ns = StringUtils.hasText(this.namespace) ? this.namespace : DEFAULT_NAMESPACE;\n\t\tif (!ns.startsWith(\"/\")) {\n\t\t\tns = \"/\" + ns;\n\t\t}\n\t\tif (!ns.endsWith(\"/\")) {\n\t\t\tns = ns + \"/\";\n\t\t}\n\t\treturn ns + this.candidate.getRole();\n\t}\n\t/**\n\t * Implementation of Curator leadership election listener.\n\t */\n<fim_suffix>\tprotected class LeaderListener extends LeaderSelectorListenerAdapter {\n\t\t@Override\n\t\tpublic void takeLeadership(CuratorFramework framework) {\n\t\t\ttry {\n\t\t\t\tLeaderInitiator.this.candidate.onGranted(LeaderInitiator.this.context);\n\t\t\t\tif (LeaderInitiator.this.leaderEventPublisher != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tLeaderInitiator.this.leaderEventPublisher.publishOnGranted(LeaderInitiator.this,\n\t\t\t\t\t\t\t\tLeaderInitiator.this.context, LeaderInitiator.this.candidate.getRole());\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tlogger.warn(\"Error publishing OnGranted event.\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// when this method exits, the leadership will be revoked;\n\t\t\t\t// therefore this thread needs to be held up until the\n\t\t\t\t// candidate is no longer leader\n\t\t\t\tThread.sleep(Long.MAX_VALUE);\n\t\t\t}\n\t\t\tcatch (@SuppressWarnings(\"unused\") InterruptedException e) {\n\t\t\t\t// InterruptedException, like any other runtime exception,\n\t\t\t\t// is handled by the finally block below. No need to\n\t\t\t\t// reset the interrupt flag as the interrupt is handled.\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tLeaderInitiator.this.candidate.onRevoked(LeaderInitiator.this.context);\n\t\t\t\tif (LeaderInitiator.this.leaderEventPublisher != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tLeaderInitiator.this.leaderEventPublisher.publishOnRevoked(LeaderInitiator.this,\n\t\t\t\t\t\t\t\tLeaderInitiator.this.context, LeaderInitiator.this.candidate.getRole());\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tlogger.warn(\"Error publishing OnRevoked event.\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}<fim_middle>// class below has no smell\n"}