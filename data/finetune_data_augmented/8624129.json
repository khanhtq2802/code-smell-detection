{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.tensorflow.core;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\nimport org.apache.ignite.tensorflow.core.longrunning.task.util.LongRunningProcessStatus;\n\n/**\n * Process manager wrapper that allows to define how one type of process specification should be transformed into\n * another type of process specification delegate working with and delegate all operations to this delegate.\n *\n * @param <T> Type of process specification delegate working with.\n * @param <R> Type of accepted process specifications.\n */\n<fim_suffix>public abstract class ProcessManagerWrapper<T, R> implements ProcessManager<R> {\n    /** Delegate. */\n    private final ProcessManager<T> delegate;\n\n    /**\n     * Constructs a new instance of process manager wrapper.\n     *\n     * @param delegate Delegate.\n     */\n    public ProcessManagerWrapper(ProcessManager<T> delegate) {\n        assert delegate != null : \"Delegate should not be null\";\n\n        this.delegate = delegate;\n    }\n\n    /**\n     * Transforms accepted process specification into process specification delegate working with.\n     *\n     * @param spec Accepted process specification.\n     * @return Process specification delegate working with.\n     */\n    protected abstract T transformSpecification(R spec);\n\n    /** {@inheritDoc} */\n    @Override public Map<UUID, List<UUID>> start(List<R> specifications) {\n        List<T> transformedSpecifications = new ArrayList<>();\n\n        for (R spec : specifications)\n            transformedSpecifications.add(transformSpecification(spec));\n\n        return delegate.start(transformedSpecifications);\n    }\n\n    /** {@inheritDoc} */\n    @Override public Map<UUID, List<LongRunningProcessStatus>> ping(Map<UUID, List<UUID>> procIds) {\n        return delegate.ping(procIds);\n    }\n\n    /** {@inheritDoc} */\n    @Override public Map<UUID, List<LongRunningProcessStatus>> stop(Map<UUID, List<UUID>> procIds, boolean clear) {\n        return delegate.stop(procIds, clear);\n    }\n\n    /** {@inheritDoc} */\n    @Override public Map<UUID, List<LongRunningProcessStatus>> clear(Map<UUID, List<UUID>> procIds) {\n        return delegate.clear(procIds);\n    }\n}<fim_middle>// class below has no smell\n"}