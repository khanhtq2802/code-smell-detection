{"text": "<fim_prefix>   private final ActiveMQServer server;\n   private final PagingManager pagingManager;\n   private final HierarchicalRepository<Set<Role>> securityRepository;\n   private final SecurityStore securityStore;\n   private final ManagementService managementService;\n   // Static --------------------------------------------------------\n   // Constructors --------------------------------------------------\n   public AddressControlImpl(AddressInfo addressInfo,\n                             final ActiveMQServer server,\n                             final PagingManager pagingManager,\n                             final StorageManager storageManager,\n                             final HierarchicalRepository<Set<Role>> securityRepository,\n                             final SecurityStore securityStore,\n                             final ManagementService managementService)throws Exception {\n      super(AddressControl.class, storageManager);\n      this.server = server;\n      this.addressInfo = addressInfo;\n      this.pagingManager = pagingManager;\n      this.securityRepository = securityRepository;\n      this.securityStore = securityStore;\n      this.managementService = managementService;\n   }\n   // Public --------------------------------------------------------\n   // AddressControlMBean implementation ----------------------------\n   @Override\n   public String getAddress() {\n      return addressInfo.getName().toString();\n   }\n   @Override\n   public String[] getRoutingTypes() {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getRoutingTypes(this.addressInfo);\n      }\n      EnumSet<RoutingType> routingTypes = addressInfo.getRoutingTypes();\n      String[] result = new String[routingTypes.size()];\n      int i = 0;\n      for (RoutingType routingType : routingTypes) {\n         result[i++] = routingType.toString();\n      }\n      return result;\n   }\n   @Override\n   public String getRoutingTypesAsJSON() throws Exception {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getRoutingTypesAsJSON(this.addressInfo);\n      }\n      clearIO();\n      try {\n         JsonArrayBuilder json = JsonLoader.createArrayBuilder();\n         String[] routingTypes = getRoutingTypes();\n         for (String routingType : routingTypes) {\n            json.add(routingType);\n         }\n         return json.build().toString();\n      } finally {\n         blockOnIO();\n      }\n   }\n   @Override\n   public String[] getQueueNames() throws Exception {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getQueueNames(this.addressInfo);\n      }\n      String[] result;\n      clearIO();\n      try {\n         Bindings bindings = server.getPostOffice().lookupBindingsForAddress(addressInfo.getName());\n         if (bindings != null) {\n            List<String> queueNames = new ArrayList<>();\n            for (Binding binding : bindings.getBindings()) {\n               if (binding instanceof QueueBinding) {\n                  queueNames.add(binding.getUniqueName().toString());\n               }\n            }\n            return queueNames.toArray(new String[queueNames.size()]);\n         } else {\n            return new String[0];\n         }\n      } catch (Throwable t) {\n         throw new IllegalStateException(t.getMessage());\n      } finally {\n         blockOnIO();\n      }\n   }\n   @Override\n   public String[] getBindingNames() throws Exception {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getBindingNames(this.addressInfo);\n      }\n      try {\n         clearIO();\n         Bindings bindings = server.getPostOffice().lookupBindingsForAddress(addressInfo.getName());\n         if (bindings != null) {\n            String[] bindingNames = new String[bindings.getBindings().size()];\n            int i = 0;\n            for (Binding binding : bindings.getBindings()) {\n               bindingNames[i++] = binding.getUniqueName().toString();\n            }\n            return bindingNames;\n         } else {\n            return new String[0];\n         }\n      } catch (Throwable t) {\n         throw new IllegalStateException(t.getMessage());\n      } finally {\n         blockOnIO();\n      }\n   }\n   @Override\n   public Object[] getRoles() throws Exception {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getRoles(this.addressInfo);\n      }\n      clearIO();\n      try {\n         Set<Role> roles = securityRepository.getMatch(addressInfo.getName().toString());\n         Object[] objRoles = new Object[roles.size()];\n         int i = 0;\n         for (Role role : roles) {\n            objRoles[i++] = new Object[]{role.getName(), CheckType.SEND.hasRole(role), CheckType.CONSUME.hasRole(role), CheckType.CREATE_DURABLE_QUEUE.hasRole(role), CheckType.DELETE_DURABLE_QUEUE.hasRole(role), CheckType.CREATE_NON_DURABLE_QUEUE.hasRole(role), CheckType.DELETE_NON_DURABLE_QUEUE.hasRole(role), CheckType.MANAGE.hasRole(role)};\n         }\n         return objRoles;\n      } finally {\n         blockOnIO();\n      }\n   }\n   @Override\n   public String getRolesAsJSON() throws Exception {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getRolesAsJSON(this.addressInfo);\n      }\n      clearIO();\n      try {\n         JsonArrayBuilder json = JsonLoader.createArrayBuilder();\n         Set<Role> roles = securityRepository.getMatch(addressInfo.getName().toString());\n         for (Role role : roles) {\n            json.add(role.toJson());\n         }\n         return json.build().toString();\n      } finally {\n         blockOnIO();\n      }\n   }\n   @Override\n   public long getNumberOfBytesPerPage() throws Exception {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getNumberOfBytesPerPage(this.addressInfo);\n      }\n      clearIO();\n      try {\n         final PagingStore pagingStore = getPagingStore();\n         if (pagingStore == null) {\n            return 0;\n         }\n         return pagingStore.getPageSizeBytes();\n      } finally {\n         blockOnIO();\n      }\n   }\n   private PagingStore getPagingStore() throws Exception {\n      return pagingManager.getPageStore(addressInfo.getName());\n   }\n   @Override\n   public long getAddressSize() throws Exception {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getAddressSize(this.addressInfo);\n      }\n      clearIO();\n      try {\n         final PagingStore pagingStore = getPagingStore();\n         if (pagingStore == null) {\n            return 0;\n         }\n         return pagingStore.getAddressSize();\n      } finally {\n         blockOnIO();\n      }\n   }\n   @Override\n   public long getNumberOfMessages() throws Exception {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getNumberOfMessages(this.addressInfo);\n      }\n      clearIO();\n      long totalMsgs = 0;\n      try {\n         Bindings bindings = server.getPostOffice().lookupBindingsForAddress(addressInfo.getName());\n         if (bindings != null) {\n            for (Binding binding : bindings.getBindings()) {\n               if (binding instanceof QueueBinding) {\n                  totalMsgs += ((QueueBinding) binding).getQueue().getMessageCount();\n               }\n            }\n         }\n         return totalMsgs;\n      } catch (Throwable t) {\n         throw new IllegalStateException(t.getMessage());\n      } finally {\n         blockOnIO();\n      }\n   }\n   @Override\n   public boolean isPaging() throws Exception {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.isPaging(this.addressInfo);\n      }\n      clearIO();\n      try {\n         final PagingStore pagingStore = getPagingStore();\n         if (pagingStore == null) {\n            return false;\n         }\n         return pagingStore.isPaging();\n      } finally {\n         blockOnIO();\n      }\n   }\n   @Override\n   public int getNumberOfPages() throws Exception {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getNumberOfPages(this.addressInfo);\n      }\n      clearIO();\n      try {\n         final PagingStore pageStore = getPagingStore();\n         if (pageStore == null || !pageStore.isPaging()) {\n            return 0;\n         } else {\n            return pageStore.getNumberOfPages();\n         }\n      } finally {\n         blockOnIO();\n      }\n   }\n   @Override\n   public long getMessageCount() {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getMessageCount(this.addressInfo);\n      }\n      return getMessageCount(DurabilityType.ALL);\n   }\n   @Override\n   public long getRoutedMessageCount() {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getRoutedMessageCount(this.addressInfo);\n      }\n      return addressInfo.getRoutedMessageCount();\n   }\n   @Override\n   public long getUnRoutedMessageCount() {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.getUnRoutedMessageCount(this.addressInfo);\n      }\n      return addressInfo.getUnRoutedMessageCount();\n   }\n<fim_suffix>   @Override\n   public String sendMessage(final Map<String, String> headers,\n                             final int type,\n                             final String body,\n                             boolean durable,\n                             final String user,\n                             final String password) throws Exception {\n      if (AuditLogger.isEnabled()) {\n         AuditLogger.sendMessage(this, null, headers, type, body, durable, user, \"****\");\n      }\n      try {\n         return sendMessage(addressInfo.getName(), server, headers, type, body, durable, user, password);\n      } catch (Exception e) {\n         e.printStackTrace();\n         throw new IllegalStateException(e.getMessage());\n      }\n   }<fim_middle>// function below is feature envy\n"}