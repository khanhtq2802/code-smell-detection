{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.management.mbean;\n\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.camel.CamelContext;\nimport org.apache.camel.api.management.ManagedResource;\nimport org.apache.camel.api.management.mbean.ManagedThreadsMBean;\nimport org.apache.camel.model.ProcessorDefinition;\nimport org.apache.camel.processor.ThreadsProcessor;\n\n<fim_suffix>@ManagedResource(description = \"Managed Threads\")\npublic class ManagedThreads extends ManagedProcessor implements ManagedThreadsMBean {\n    private final ThreadsProcessor processor;\n\n    public ManagedThreads(CamelContext context, ThreadsProcessor processor, ProcessorDefinition<?> definition) {\n        super(context, processor, definition);\n        this.processor = processor;\n    }\n\n    @Override\n    public Boolean isCallerRunsWhenRejected() {\n        if (processor.getExecutorService() instanceof ThreadPoolExecutor) {\n            String name = getRejectedPolicy();\n            return \"CallerRuns\".equals(name);\n        } else {\n            return null;\n        }\n    }\n\n    @Override\n    public String getRejectedPolicy() {\n        if (processor.getExecutorService() instanceof ThreadPoolExecutor) {\n            return ((ThreadPoolExecutor) processor.getExecutorService()).getRejectedExecutionHandler().toString();\n        } else {\n            return null;\n        }\n    }\n\n    @Override\n    public int getCorePoolSize() {\n        if (processor.getExecutorService() instanceof ThreadPoolExecutor) {\n            return ((ThreadPoolExecutor) processor.getExecutorService()).getCorePoolSize();\n        } else {\n            return 0;\n        }\n    }\n\n    @Override\n    public int getPoolSize() {\n        if (processor.getExecutorService() instanceof ThreadPoolExecutor) {\n            return ((ThreadPoolExecutor) processor.getExecutorService()).getPoolSize();\n        } else {\n            return 0;\n        }\n    }\n\n    @Override\n    public int getMaximumPoolSize() {\n        if (processor.getExecutorService() instanceof ThreadPoolExecutor) {\n            return ((ThreadPoolExecutor) processor.getExecutorService()).getMaximumPoolSize();\n        } else {\n            return 0;\n        }\n    }\n\n    @Override\n    public int getLargestPoolSize() {\n        if (processor.getExecutorService() instanceof ThreadPoolExecutor) {\n            return ((ThreadPoolExecutor) processor.getExecutorService()).getLargestPoolSize();\n        } else {\n            return 0;\n        }\n    }\n\n    @Override\n    public int getActiveCount() {\n        if (processor.getExecutorService() instanceof ThreadPoolExecutor) {\n            return ((ThreadPoolExecutor) processor.getExecutorService()).getActiveCount();\n        } else {\n            return 0;\n        }\n    }\n\n    @Override\n    public long getTaskCount() {\n        if (processor.getExecutorService() instanceof ThreadPoolExecutor) {\n            return ((ThreadPoolExecutor) processor.getExecutorService()).getTaskCount();\n        } else {\n            return 0;\n        }\n    }\n\n    @Override\n    public long getCompletedTaskCount() {\n        if (processor.getExecutorService() instanceof ThreadPoolExecutor) {\n            return ((ThreadPoolExecutor) processor.getExecutorService()).getCompletedTaskCount();\n        } else {\n            return 0;\n        }\n    }\n\n    @Override\n    public long getTaskQueueSize() {\n        if (processor.getExecutorService() instanceof ThreadPoolExecutor) {\n            BlockingQueue queue = ((ThreadPoolExecutor) processor.getExecutorService()).getQueue();\n            return queue != null ? queue.size() : 0;\n        } else {\n            return 0;\n        }\n    }\n\n    @Override\n    public long getKeepAliveTime() {\n        if (processor.getExecutorService() instanceof ThreadPoolExecutor) {\n            return ((ThreadPoolExecutor) processor.getExecutorService()).getKeepAliveTime(TimeUnit.SECONDS);\n        } else {\n            return 0;\n        }\n    }\n\n    @Override\n    public boolean isAllowCoreThreadTimeout() {\n        if (processor.getExecutorService() instanceof ThreadPoolExecutor) {\n            return ((ThreadPoolExecutor) processor.getExecutorService()).allowsCoreThreadTimeOut();\n        } else {\n            return false;\n        }\n    }\n\n}<fim_middle>// class below has no smell\n"}