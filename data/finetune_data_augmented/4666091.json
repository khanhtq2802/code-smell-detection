{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.runtime.clusterframework.types;\n\nimport java.io.Serializable;\n\nimport static org.apache.flink.util.Preconditions.checkArgument;\nimport static org.apache.flink.util.Preconditions.checkNotNull;\n\n/**\n * Unique identifier for a slot on a TaskManager. This ID is constant across the\n * life time of the TaskManager.\n * \n * <p>In contrast, the {@link AllocationID} represents the a slot allocation and changes\n * every time the slot is allocated by a JobManager.\n */\npublic class SlotID implements ResourceIDRetrievable, Serializable {\n\n\tprivate static final long serialVersionUID = -6399206032549807771L;\n\n\t/** The resource id which this slot located */\n\tprivate final ResourceID resourceId;\n\n\t/** The numeric id for single slot */\n\tprivate final int slotNumber;\n\t\n<fim_suffix>\tpublic SlotID(ResourceID resourceId, int slotNumber) {\n\t\tcheckArgument(0 <= slotNumber, \"Slot number must be positive.\");\n\t\tthis.resourceId = checkNotNull(resourceId, \"ResourceID must not be null\");\n\t\tthis.slotNumber = slotNumber;\n\t}\n\n\t// ------------------------------------------------------------------------\n\n\t@Override\n\tpublic ResourceID getResourceID() {\n\t\treturn resourceId;\n\t}\n\n\tpublic int getSlotNumber() {\n\t\treturn slotNumber;\n\t}\n\n\t// ------------------------------------------------------------------------\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tSlotID slotID = (SlotID) o;\n\n\t\treturn slotNumber == slotID.slotNumber && resourceId.equals(slotID.resourceId);\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint result = resourceId.hashCode();\n\t\tresult = 31 * result + slotNumber;\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn resourceId + \"_\" + slotNumber;\n\t}\n}<fim_middle>// function below has no smell\n"}