{"text": "<fim_prefix>import com.google.gwt.cell.client.Cell;\nimport com.google.gwt.cell.client.TextCell;\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.core.client.Scheduler;\nimport com.google.gwt.dom.client.Element;\nimport com.google.gwt.dom.client.NativeEvent;\nimport com.google.gwt.event.dom.client.ScrollEvent;\nimport com.google.gwt.i18n.client.DateTimeFormat;\nimport com.google.gwt.safehtml.shared.SafeHtmlBuilder;\nimport com.google.gwt.uibinder.client.UiBinder;\nimport com.google.gwt.uibinder.client.UiField;\nimport com.google.gwt.uibinder.client.UiHandler;\nimport com.google.gwt.user.cellview.client.CellTable;\nimport com.google.gwt.user.cellview.client.Column;\nimport com.google.gwt.user.client.DOM;\nimport com.google.gwt.user.client.ui.*;\nimport com.google.gwt.view.client.SingleSelectionModel;\nimport com.google.inject.Inject;\nimport com.google.inject.Singleton;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport javax.validation.constraints.NotNull;\nimport org.eclipse.che.api.git.shared.Revision;\nimport org.eclipse.che.ide.ext.git.client.GitLocalizationConstant;\nimport org.eclipse.che.ide.ext.git.client.GitResources;\nimport org.eclipse.che.ide.ui.window.Window;\n/**\n * The implementation of {@link ResetToCommitView}.\n *\n * @author Andrey Plotnikov\n */\n<fim_suffix>@Singleton\npublic class ResetToCommitViewImpl extends Window implements ResetToCommitView {\n  interface ResetToCommitViewImplUiBinder extends UiBinder<Widget, ResetToCommitViewImpl> {}\n  private static ResetToCommitViewImplUiBinder ourUiBinder =\n      GWT.create(ResetToCommitViewImplUiBinder.class);\n  @UiField RadioButton soft;\n  @UiField RadioButton mixed;\n  @UiField RadioButton hard;\n  Button btnReset;\n  Button btnCancel;\n  @UiField ScrollPanel revisionsPanel;\n  @UiField(provided = true)\n  CellTable<Revision> commits;\n  @UiField(provided = true)\n  final GitResources res;\n  @UiField(provided = true)\n  final GitLocalizationConstant locale;\n  private ActionDelegate delegate;\n  /**\n   * Create view.\n   *\n   * @param resources\n   * @param locale\n   */\n  @Inject\n  protected ResetToCommitViewImpl(GitResources resources, GitLocalizationConstant locale) {\n    this.res = resources;\n    this.locale = locale;\n    this.ensureDebugId(\"git-reset-window\");\n    createCommitsTable();\n    Widget widget = ourUiBinder.createAndBindUi(this);\n    this.setTitle(locale.resetCommitViewTitle());\n    this.setWidget(widget);\n    prepareRadioButtons();\n    btnCancel =\n        addFooterButton(\n            locale.buttonCancel(), \"git-reset-cancel\", event -> delegate.onCancelClicked());\n    btnReset =\n        addFooterButton(\n            locale.buttonReset(), \"git-reset-reset\", event -> delegate.onResetClicked(), true);\n  }\n  @Override\n  public void onEnterPress(NativeEvent evt) {\n    if (isWidgetOrChildFocused(btnCancel)) {\n      delegate.onCancelClicked();\n    } else if (isWidgetOrChildFocused(btnReset)) {\n      delegate.onResetClicked();\n    }\n  }\n  /** Add description to buttons. */\n  private void prepareRadioButtons() {\n    addDescription(soft, locale.resetSoftTypeDescription());\n    addDescription(mixed, locale.resetMixedTypeDescription());\n    addDescription(hard, locale.resetHardTypeDescription());\n  }\n  /**\n   * Add description to radio button title.\n   *\n   * @param radioItem radio button\n   * @param description description to add\n   */\n  private void addDescription(RadioButton radioItem, String description) {\n    Element descElement = DOM.createSpan();\n    descElement.setInnerText(\" \" + description);\n    descElement.getStyle().setColor(\"#888\");\n    radioItem.getElement().appendChild(descElement);\n  }\n  public interface TableRes extends CellTable.Resources {\n    @Source({\n      CellTable.Style.DEFAULT_CSS,\n      \"org/eclipse/che/ide/ext/git/client/reset/commit/custom.css\"\n    })\n    TableStyle cellTableStyle();\n    interface TableStyle extends CellTable.Style {}\n  }\n  private CellTable.Resources tableRes = GWT.create(TableRes.class);\n  /** Creates table what contains list of available commits. */\n  private void createCommitsTable() {\n    commits = new CellTable<>(15, tableRes);\n    Column<Revision, String> dateColumn =\n        new Column<Revision, String>(new TextCell()) {\n          @Override\n          public String getValue(Revision revision) {\n            return DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_TIME_MEDIUM)\n                .format(new Date(revision.getCommitTime()));\n          }\n          @Override\n          public void render(Cell.Context context, Revision revision, SafeHtmlBuilder sb) {\n            sb.appendHtmlConstant(\n                \"<div id=\\\"\"\n                    + UIObject.DEBUG_ID_PREFIX\n                    + \"git-reset-cellTable-\"\n                    + context.getIndex()\n                    + \"\\\">\");\n            super.render(context, revision, sb);\n          }\n        };\n    Column<Revision, String> commiterColumn =\n        new Column<Revision, String>(new TextCell()) {\n          @Override\n          public String getValue(Revision revision) {\n            if (revision.getCommitter() == null) {\n              return \"\";\n            }\n            return revision.getCommitter().getName();\n          }\n        };\n    Column<Revision, String> commentColumn =\n        new Column<Revision, String>(new TextCell()) {\n          @Override\n          public String getValue(Revision revision) {\n            return revision.getMessage();\n          }\n        };\n    commits.addColumn(dateColumn, locale.commitGridDate());\n    commits.setColumnWidth(dateColumn, \"20%\");\n    commits.addColumn(commiterColumn, locale.commitGridCommiter());\n    commits.setColumnWidth(commiterColumn, \"20%\");\n    commits.addColumn(commentColumn, locale.commitGridComment());\n    commits.setColumnWidth(commentColumn, \"60%\");\n    final SingleSelectionModel<Revision> selectionModel = new SingleSelectionModel<Revision>();\n    selectionModel.addSelectionChangeHandler(\n        event -> {\n          Revision selectedObject = selectionModel.getSelectedObject();\n          delegate.onRevisionSelected(selectedObject);\n        });\n    commits.setSelectionModel(selectionModel);\n  }\n  /** {@inheritDoc} */\n  @Override\n  public void setRevisions(@NotNull List<Revision> revisions) {\n    // Wraps Array in java.util.List\n    List<Revision> list = new ArrayList<>();\n    list.addAll(revisions);\n    this.commits.setRowData(list);\n  }\n  @Override\n  public void resetRevisionSelection() {\n    ((SingleSelectionModel) commits.getSelectionModel()).clear();\n  }\n  /** {@inheritDoc} */\n  @Override\n  public boolean isSoftMode() {\n    return soft.getValue();\n  }\n  /** {@inheritDoc} */\n  @Override\n  public void setSoftMode(boolean isSoft) {\n    soft.setValue(isSoft);\n  }\n  /** {@inheritDoc} */\n  @Override\n  public boolean isMixMode() {\n    return mixed.getValue();\n  }\n  /** {@inheritDoc} */\n  @Override\n  public void setMixMode(boolean isMix) {\n    mixed.setValue(isMix);\n  }\n  /** {@inheritDoc} */\n  @Override\n  public boolean isHardMode() {\n    return hard.getValue();\n  }\n  /** {@inheritDoc} */\n  @Override\n  public void setHardMode(boolean isHard) {\n    hard.setValue(isHard);\n  }\n  /** {@inheritDoc} */\n  @Override\n  public void setEnableResetButton(final boolean enabled) {\n    btnReset.setEnabled(enabled);\n    Scheduler.get().scheduleDeferred(() -> btnReset.setFocus(enabled));\n  }\n  /** {@inheritDoc} */\n  @Override\n  public void close() {\n    this.hide();\n  }\n  /** {@inheritDoc} */\n  @Override\n  public void showDialog() {\n    this.show();\n  }\n  /** {@inheritDoc} */\n  @Override\n  public void setDelegate(ActionDelegate delegate) {\n    this.delegate = delegate;\n  }\n  @UiHandler(\"revisionsPanel\")\n  public void onPanelScrolled(ScrollEvent ignored) {\n    // We cannot rely on exact equality of scroll positions because GWT sometimes round such values\n    // and it is possible that the actual max scroll position is a pixel less then declared.\n    if (revisionsPanel.getMaximumVerticalScrollPosition()\n            - revisionsPanel.getVerticalScrollPosition()\n        <= 1) {\n      // to avoid autoscrolling to selected item\n      revisionsPanel.getElement().focus();\n      delegate.onScrolledToBottom();\n    }\n  }\n}<fim_middle>// class below has no smell\n"}