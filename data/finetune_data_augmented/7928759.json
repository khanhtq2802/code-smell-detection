{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2000, 2010 IBM Corporation and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     IBM Corporation - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.gef;\n\nimport org.eclipse.jface.action.IMenuListener;\nimport org.eclipse.jface.action.IMenuManager;\nimport org.eclipse.jface.action.MenuManager;\n\n/**\n * Extends MenuManager to allow populating the menu directly from the manager\n * itself. Using this class is no different than using a standalone\n * <code>MenuManager</code>, and adding a menuAboutToShow listener.\n * \n * @author hudsonr\n */\n<fim_suffix>public abstract class ContextMenuProvider extends MenuManager implements\n\t\tIMenuListener {\n\n\tprivate EditPartViewer viewer;\n\n\t/**\n\t * Constructs a context menu for the specified EditPartViewer.\n\t * \n\t * @param viewer\n\t *            the editpart viewer\n\t */\n\tpublic ContextMenuProvider(EditPartViewer viewer) {\n\t\tsetViewer(viewer);\n\t\taddMenuListener(this);\n\t\tsetRemoveAllWhenShown(true);\n\t}\n\n\t/**\n\t * Called when the menu is about to show. Subclasses must implement this\n\t * method to populate the menu each time it is shown.\n\t * \n\t * @param menu\n\t *            this parameter is actually <code>this</code> object\n\t */\n\tpublic abstract void buildContextMenu(IMenuManager menu);\n\n\t/**\n\t * Returns the EditPartViewer\n\t * \n\t * @return the viewer\n\t */\n\tprotected EditPartViewer getViewer() {\n\t\treturn viewer;\n\t}\n\n\t/**\n\t * @see IMenuListener#menuAboutToShow(IMenuManager)\n\t */\n\tpublic void menuAboutToShow(IMenuManager menu) {\n\t\tbuildContextMenu(menu);\n\t}\n\n\t/**\n\t * Sets the editpart viewer. Called during construction.\n\t * \n\t * @param viewer\n\t *            the viewer\n\t */\n\tprotected void setViewer(EditPartViewer viewer) {\n\t\tthis.viewer = viewer;\n\t}\n\n}<fim_middle>// class below has no smell\n"}