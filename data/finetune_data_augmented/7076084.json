{"text": "<fim_prefix>/*\n * Copyright 2016 LinkedIn, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\npackage com.linkedin.restli.client;\n\nimport com.linkedin.parseq.Task;\nimport com.linkedin.parseq.promise.Promise;\nimport com.linkedin.r2.message.RequestContext;\nimport com.linkedin.restli.client.config.RequestConfigOverrides;\nimport com.linkedin.restli.client.config.RequestConfigOverridesBuilder;\nimport com.linkedin.restli.client.metrics.Metrics;\n\n/**\n * ParSeq rest.li client.\n *\n * @author Jaroslaw Odzga (jodzga@linkedin.com)\n *\n */\n<fim_suffix>public interface ParSeqRestliClient {\n\n  /**\n   * Sends a type-bound REST request, returning a promise.\n   *\n   * @deprecated Use higher level API that returns Task instance, see {@link #createTask(Request)}. This method is\n   * left for backwards compatibility.\n   * @param request to send\n   * @param <T> type of the result\n   * @return response promise\n   * @see #createTask(Request)\n   */\n  @Deprecated\n  public <T> Promise<Response<T>> sendRequest(final Request<T> request);\n\n  /**\n   * Sends a type-bound REST request, returning a promise.\n   *\n   * @deprecated Use higher level API that returns Task instance, see {@link #createTask(Request, RequestContext)}. This method is\n   * left for backwards compatibility.\n   * @param request to send\n   * @param requestContext context for the request\n   * @param <T> type of the result\n   * @return response promise\n   */\n  @Deprecated\n  public <T> Promise<Response<T>> sendRequest(final Request<T> request, final RequestContext requestContext);\n\n  /**\n   * Creates a task that makes rest.li request and returns response.\n   *\n   * @param request request to be made\n   * @param <T> type of the result\n   * @return Task that returns response for given request\n   */\n  public <T> Task<Response<T>> createTask(final Request<T> request);\n\n  /**\n   * Creates a task that makes rest.li request and returns response.\n   * <p>\n   * Passed in {@code configOverrides} will override any existing configuration. Not all properties need to be set.\n   * Use {@link RequestConfigOverridesBuilder} to create instance of {@link RequestConfigOverrides}.\n   *\n   * @param request request to be made\n   * @param configOverrides configuration overrides\n   * @param <T> type of the result\n   * @return Task that returns response\n   */\n  public <T> Task<Response<T>> createTask(final Request<T> request, final RequestConfigOverrides configOverrides);\n\n  /**\n   * Creates a task that makes rest.li request and returns response.\n   *\n   * @param request request to be made\n   * @param requestContext context for the request\n   * @param <T> type of the result\n   * @return Task that returns response\n   */\n  public <T> Task<Response<T>> createTask(final Request<T> request, final RequestContext requestContext);\n\n  /**\n   * Creates a task that makes rest.li request and returns response.\n   * <p>\n   * Passed in {@code configOverrides} will override any existing configuration. Not all properties need to be set.\n   * Use {@link RequestConfigOverridesBuilder} to create instance of {@link RequestConfigOverrides}.\n   *\n   * @param request request to be made\n   * @param requestContext context for the request\n   * @param configOverrides configuration overrides\n   * @param <T> type of the result\n   * @return Task that returns response\n   */\n  public <T> Task<Response<T>> createTask(final Request<T> request, final RequestContext requestContext, final RequestConfigOverrides configOverrides);\n\n  /**\n   * Returns ParSeq rest.li client's metrics.\n   * @return metrics\n   */\n  public Metrics getMetrics();\n}<fim_middle>// class below has no smell\n"}