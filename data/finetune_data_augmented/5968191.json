{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.openejb.util;\n\nimport org.codehaus.swizzle.stream.ScanBuffer;\n\nimport java.io.FilterOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @version $Rev$ $Date$\n */\n<fim_suffix>public class OutputScanner extends FilterOutputStream {\n\n    private final CountDownLatch found = new CountDownLatch(1);\n\n    public OutputScanner(final OutputStream out, final String scanString) {\n        super(null);\n        this.out = new Scan(out, scanString);\n    }\n\n    public class Scan extends FilterOutputStream {\n\n        private final ScanBuffer scan;\n\n        public Scan(final OutputStream out, final String scanString) {\n            super(out);\n            scan = new ScanBuffer(scanString);\n        }\n\n        @Override\n        public void write(final int b) throws IOException {\n            check(b);\n            super.write(b);\n        }\n\n        @Override\n        public void write(final byte[] bytes) throws IOException {\n            for (final byte b : bytes) {\n                check(b);\n            }\n            super.write(bytes);\n        }\n\n        @Override\n        public void write(final byte[] bytes, final int off, final int len) throws IOException {\n            for (int i = off; i < len; i++) {\n                check(bytes[i]);\n            }\n            super.write(bytes, off, len);\n        }\n\n        private void check(final int b) {\n            scan.append(b);\n            if (scan.match()) {\n                // Cut ourselves out of the call chain.\n                //\n                // This works because\n                //  - ScanningOutputStreamFilter.this.out == this\n                //  - this.out != this)\n                //\n                // Our parent is delegating to us and we are delegating\n                // to the actual OutputStream\n                //\n                // To cut ourselves out of the call chain and eliminate\n                // the overhead of checking the ScanBuffer, we set our\n                // parent to not delegate to us and to instead delegate\n                // to the actual OutputStream.\n\n                // Intellij mistakenly shows this grayed out,\n                // however it is very very significant.\n                OutputScanner.this.out = this.out;\n                found.countDown();\n            }\n        }\n    }\n\n\n    public void await() throws InterruptedException {\n        found.await();\n    }\n\n    public boolean await(final long timeout, final TimeUnit unit) throws InterruptedException {\n        return found.await(timeout, unit);\n    }\n}<fim_middle>// class below has no smell\n"}