{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.logappender.log4j;\n\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.logappender.common.ProducerInstance;\nimport org.apache.log4j.AppenderSkeleton;\nimport org.apache.log4j.helpers.LogLog;\nimport org.apache.log4j.spi.ErrorCode;\nimport org.apache.log4j.spi.LoggingEvent;\nimport org.apache.rocketmq.client.producer.MQProducer;\n\n/**\n * Log4j Appender Component\n */\npublic class RocketmqLog4jAppender extends AppenderSkeleton {\n\n    /**\n     * Appended message tag define\n     */\n    private String tag;\n\n    /**\n     * Whitch topic to send log messages\n     */\n    private String topic;\n\n    private boolean locationInfo;\n\n    /**\n     * Log producer send instance\n     */\n    private MQProducer producer;\n\n    /**\n     * RocketMQ nameserver address\n     */\n    private String nameServerAddress;\n\n    /**\n     * Log producer group\n     */\n    private String producerGroup;\n\n<fim_suffix>    public RocketmqLog4jAppender() {\n    }\n\n    public void activateOptions() {\n        LogLog.debug(\"Getting initial context.\");\n        if (!checkEntryConditions()) {\n            return;\n        }\n        try {\n            producer = ProducerInstance.getProducerInstance().getInstance(nameServerAddress, producerGroup);\n        } catch (Exception e) {\n            LogLog.error(\"activateOptions nameserver:\" + nameServerAddress + \" group:\" + producerGroup + \" \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Info,error,warn,callback method implementation\n     */\n    public void append(LoggingEvent event) {\n        if (null == producer) {\n            return;\n        }\n        if (locationInfo) {\n            event.getLocationInformation();\n        }\n        byte[] data = this.layout.format(event).getBytes();\n        try {\n            Message msg = new Message(topic, tag, data);\n            msg.getProperties().put(ProducerInstance.APPENDER_TYPE, ProducerInstance.LOG4J_APPENDER);\n\n            //Send message and do not wait for the ack from the message broker.\n            producer.sendOneway(msg);\n        } catch (Exception e) {\n            String msg = new String(data);\n            errorHandler.error(\"Could not send message in RocketmqLog4jAppender [\" + name + \"].Message is :\" + msg, e,\n                ErrorCode.GENERIC_FAILURE);\n        }\n    }\n\n    protected boolean checkEntryConditions() {\n        String fail = null;\n\n        if (this.topic == null) {\n            fail = \"No topic\";\n        } else if (this.tag == null) {\n            fail = \"No tag\";\n        }\n\n        if (fail != null) {\n            errorHandler.error(fail + \" for RocketmqLog4jAppender named [\" + name + \"].\");\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * When system exit,this method will be called to close resources\n     */\n    public synchronized void close() {\n        // The synchronized modifier avoids concurrent append and close operations\n\n        if (this.closed)\n            return;\n\n        LogLog.debug(\"Closing RocketmqLog4jAppender [\" + name + \"].\");\n        this.closed = true;\n\n        try {\n            ProducerInstance.getProducerInstance().removeAndClose(this.nameServerAddress, this.producerGroup);\n        } catch (Exception e) {\n            LogLog.error(\"Closing RocketmqLog4jAppender [\" + name + \"] nameServerAddress:\" + nameServerAddress + \" group:\" + producerGroup + \" \" + e.getMessage());\n        }\n        // Help garbage collection\n        producer = null;\n    }\n\n    public boolean requiresLayout() {\n        return true;\n    }\n\n    public String getTopic() {\n        return topic;\n    }\n\n    public void setTopic(String topic) {\n        this.topic = topic;\n    }\n\n    public String getTag() {\n        return tag;\n    }\n\n    public void setTag(String tag) {\n        this.tag = tag;\n    }\n\n    /**\n     * Returns value of the <b>LocationInfo</b> property which\n     * determines whether location (stack) info is sent to the remote\n     * subscriber.\n     */\n    public boolean isLocationInfo() {\n        return locationInfo;\n    }\n\n    /**\n     * If true, the information sent to the remote subscriber will\n     * include caller's location information. By default no location\n     * information is sent to the subscriber.\n     */\n    public void setLocationInfo(boolean locationInfo) {\n        this.locationInfo = locationInfo;\n    }\n\n    /**\n     * Returns the message producer,Only valid after\n     * activateOptions() method has been invoked.\n     */\n    protected MQProducer getProducer() {\n        return producer;\n    }\n\n    public void setNameServerAddress(String nameServerAddress) {\n        this.nameServerAddress = nameServerAddress;\n    }\n\n    public void setProducerGroup(String producerGroup) {\n        this.producerGroup = producerGroup;\n    }\n}<fim_middle>// function below has no smell\n"}