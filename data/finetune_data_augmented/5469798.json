{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.qpid.jms.provider.failover;\n\nimport java.net.URI;\nimport java.util.Map;\n\nimport org.apache.qpid.jms.provider.Provider;\nimport org.apache.qpid.jms.provider.ProviderFactory;\nimport org.apache.qpid.jms.provider.ProviderFutureFactory;\nimport org.apache.qpid.jms.util.PropertyUtil;\nimport org.apache.qpid.jms.util.URISupport;\nimport org.apache.qpid.jms.util.URISupport.CompositeData;\n\n/**\n * Factory for creating instances of the Failover Provider type.\n */\npublic class FailoverProviderFactory extends ProviderFactory {\n\n    /**\n     * Prefix used for all properties that apply specifically to the FailoverProvider\n     */\n    public static final String FAILOVER_OPTION_PREFIX = \"failover.\";\n\n    /**\n     * Prefix addition used for all nested properties that should be applied to any remote URIs.\n     */\n    public static final String FAILOVER_NESTED_OPTION_PREFIX_ADDON = \"nested.\";\n\n    @Override\n    public Provider createProvider(URI remoteURI) throws Exception {\n        return createProvider(remoteURI, null);\n    }\n\n<fim_suffix>    @Override\n    public Provider createProvider(URI remoteURI, ProviderFutureFactory futureFactory) throws Exception {\n        CompositeData composite = URISupport.parseComposite(remoteURI);\n        Map<String, String> options = composite.getParameters();\n\n        Map<String, String> filtered = PropertyUtil.filterProperties(options, FAILOVER_OPTION_PREFIX);\n        Map<String, String> nested = PropertyUtil.filterProperties(filtered, FAILOVER_NESTED_OPTION_PREFIX_ADDON);\n\n        Map<String, String> providerOptions = PropertyUtil.filterProperties(options, \"provider.\");\n        // If we have been given a futures factory to use then we ignore any URI options indicating\n        // what to create and just go with what we are given.\n        if (futureFactory == null) {\n            // Create a configured ProviderFutureFactory for use by the resulting AmqpProvider\n            futureFactory = ProviderFutureFactory.create(providerOptions);\n            if (!providerOptions.isEmpty()) {\n                String msg = \"\"\n                    + \" Not all Provider options could be applied during Failover Provider creation.\"\n                    + \" Check the options are spelled correctly.\"\n                    + \" Unused parameters=[\" + providerOptions + \"].\"\n                    + \" This provider instance cannot be started.\";\n                throw new IllegalArgumentException(msg);\n            }\n        }\n\n        FailoverProvider provider = new FailoverProvider(composite.getComponents(), nested, futureFactory);\n        Map<String, String> unused = PropertyUtil.setProperties(provider, filtered);\n        if (!unused.isEmpty()) {\n            String msg = \"\"\n                + \" Not all options could be set on the Failover provider.\"\n                + \" Check the options are spelled correctly.\"\n                + \" Unused parameters=[\" + unused + \"].\"\n                + \" This Provider cannot be started.\";\n            throw new IllegalArgumentException(msg);\n        }\n\n        return provider;\n    }\n\n    @Override\n    public String getName() {\n        return \"Failover\";\n    }\n}<fim_middle>// function below is long method\n"}