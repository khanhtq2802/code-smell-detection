{"text": "<fim_prefix>        }\n        @Override\n        public ImmutableSet<T> toImmutable()\n        {\n            return Sets.immutable.withAll(this.getDelegate());\n        }\n        @Override\n        public LazyIterable<T> asLazy()\n        {\n            return LazyIterate.adapt(this);\n        }\n        @Override\n        public MutableSet<T> clone()\n        {\n            return this.getDelegate().clone();\n        }\n        @Override\n        public <V> MutableSet<V> collect(Function<? super T, ? extends V> function)\n        {\n            return this.getDelegate().collect(function);\n        }\n        @Override\n        public MutableBooleanSet collectBoolean(BooleanFunction<? super T> booleanFunction)\n        {\n            return this.getDelegate().collectBoolean(booleanFunction);\n        }\n        @Override\n        public <R extends MutableBooleanCollection> R collectBoolean(BooleanFunction<? super T> booleanFunction, R target)\n        {\n            return this.getDelegate().collectBoolean(booleanFunction, target);\n        }\n        @Override\n        public MutableByteSet collectByte(ByteFunction<? super T> byteFunction)\n        {\n            return this.getDelegate().collectByte(byteFunction);\n        }\n        @Override\n        public <R extends MutableByteCollection> R collectByte(ByteFunction<? super T> byteFunction, R target)\n        {\n            return this.getDelegate().collectByte(byteFunction, target);\n        }\n        @Override\n        public MutableCharSet collectChar(CharFunction<? super T> charFunction)\n        {\n            return this.getDelegate().collectChar(charFunction);\n        }\n        @Override\n        public <R extends MutableCharCollection> R collectChar(CharFunction<? super T> charFunction, R target)\n        {\n            return this.getDelegate().collectChar(charFunction, target);\n        }\n        @Override\n        public MutableDoubleSet collectDouble(DoubleFunction<? super T> doubleFunction)\n        {\n            return this.getDelegate().collectDouble(doubleFunction);\n        }\n        @Override\n        public <R extends MutableDoubleCollection> R collectDouble(DoubleFunction<? super T> doubleFunction, R target)\n        {\n            return this.getDelegate().collectDouble(doubleFunction, target);\n        }\n        @Override\n        public MutableFloatSet collectFloat(FloatFunction<? super T> floatFunction)\n        {\n            return this.getDelegate().collectFloat(floatFunction);\n        }\n        @Override\n        public <R extends MutableFloatCollection> R collectFloat(FloatFunction<? super T> floatFunction, R target)\n        {\n            return this.getDelegate().collectFloat(floatFunction, target);\n        }\n        @Override\n        public MutableIntSet collectInt(IntFunction<? super T> intFunction)\n        {\n            return this.getDelegate().collectInt(intFunction);\n        }\n        @Override\n        public <R extends MutableIntCollection> R collectInt(IntFunction<? super T> intFunction, R target)\n        {\n            return this.getDelegate().collectInt(intFunction, target);\n        }\n        @Override\n        public MutableLongSet collectLong(LongFunction<? super T> longFunction)\n        {\n            return this.getDelegate().collectLong(longFunction);\n        }\n        @Override\n        public <R extends MutableLongCollection> R collectLong(LongFunction<? super T> longFunction, R target)\n        {\n            return this.getDelegate().collectLong(longFunction, target);\n        }\n        @Override\n        public MutableShortSet collectShort(ShortFunction<? super T> shortFunction)\n        {\n            return this.getDelegate().collectShort(shortFunction);\n        }\n        @Override\n        public <R extends MutableShortCollection> R collectShort(ShortFunction<? super T> shortFunction, R target)\n        {\n            return this.getDelegate().collectShort(shortFunction, target);\n        }\n        @Override\n        public <V> MutableSet<V> flatCollect(Function<? super T, ? extends Iterable<V>> function)\n        {\n            return this.getDelegate().flatCollect(function);\n        }\n        @Override\n        public <V> MutableSet<V> collectIf(\n                Predicate<? super T> predicate,\n                Function<? super T, ? extends V> function)\n        {\n            return this.getDelegate().collectIf(predicate, function);\n        }\n        @Override\n        public <P, V> MutableSet<V> collectWith(\n                Function2<? super T, ? super P, ? extends V> function,\n                P parameter)\n        {\n            return this.getDelegate().collectWith(function, parameter);\n        }\n        @Override\n        public <V> MutableSetMultimap<V, T> groupBy(\n                Function<? super T, ? extends V> function)\n        {\n            return this.getDelegate().groupBy(function);\n        }\n        @Override\n        public <V> MutableSetMultimap<V, T> groupByEach(\n                Function<? super T, ? extends Iterable<V>> function)\n        {\n            return this.getDelegate().groupByEach(function);\n        }\n        @Override\n        public <V> MutableMap<V, T> groupByUniqueKey(Function<? super T, ? extends V> function)\n        {\n            return this.getDelegate().groupByUniqueKey(function);\n        }\n        @Override\n        public MutableSet<T> newEmpty()\n        {\n            return this.getDelegate().newEmpty();\n        }\n        @Override\n        public MutableSet<T> reject(Predicate<? super T> predicate)\n        {\n            return this.getDelegate().reject(predicate);\n        }\n        @Override\n        public <P> MutableSet<T> rejectWith(\n                Predicate2<? super T, ? super P> predicate,\n                P parameter)\n        {\n            return this.getDelegate().rejectWith(predicate, parameter);\n        }\n        @Override\n        public MutableSet<T> tap(Procedure<? super T> procedure)\n        {\n            this.forEach(procedure);\n            return this;\n        }\n        @Override\n        public MutableSet<T> select(Predicate<? super T> predicate)\n        {\n            return this.getDelegate().select(predicate);\n        }\n        @Override\n        public <P> MutableSet<T> selectWith(\n                Predicate2<? super T, ? super P> predicate,\n                P parameter)\n        {\n            return this.getDelegate().selectWith(predicate, parameter);\n        }\n        @Override\n        public PartitionMutableSet<T> partition(Predicate<? super T> predicate)\n        {\n            return this.getDelegate().partition(predicate);\n        }\n        @Override\n        public <P> PartitionMutableSet<T> partitionWith(Predicate2<? super T, ? super P> predicate, P parameter)\n        {\n            return this.getDelegate().partitionWith(predicate, parameter);\n        }\n        @Override\n        public <S> MutableSet<S> selectInstancesOf(Class<S> clazz)\n        {\n            return this.getDelegate().selectInstancesOf(clazz);\n        }\n        @Override\n        public Iterator<T> iterator()\n        {\n            UntouchableIterator<T> iterator = new UntouchableIterator<>(this.delegate.iterator());\n            this.requestedIterators.add(iterator);\n            return iterator;\n        }\n        /**\n         * @deprecated in 6.0. Use {@link OrderedIterable#zip(Iterable)} instead.\n         */\n        @Override\n        @Deprecated\n        public <S> MutableSet<Pair<T, S>> zip(Iterable<S> that)\n        {\n            return this.getDelegate().zip(that);\n        }\n        /**\n         * @deprecated in 6.0. Use {@link OrderedIterable#zipWithIndex()} instead.\n         */\n        @Override\n        @Deprecated\n        public MutableSet<Pair<T, Integer>> zipWithIndex()\n        {\n            return this.getDelegate().zipWithIndex();\n        }\n        @Override\n        public MutableSet<T> union(SetIterable<? extends T> set)\n        {\n            return this.getDelegate().union(set);\n        }\n        @Override\n        public <R extends Set<T>> R unionInto(SetIterable<? extends T> set, R targetSet)\n        {\n            return this.getDelegate().unionInto(set, targetSet);\n        }\n        @Override\n        public MutableSet<T> intersect(SetIterable<? extends T> set)\n        {\n            return this.getDelegate().intersect(set);\n        }\n        @Override\n        public <R extends Set<T>> R intersectInto(SetIterable<? extends T> set, R targetSet)\n        {\n            return this.getDelegate().intersectInto(set, targetSet);\n        }\n        @Override\n        public MutableSet<T> difference(SetIterable<? extends T> subtrahendSet)\n        {\n            return this.getDelegate().difference(subtrahendSet);\n        }\n        @Override\n        public <R extends Set<T>> R differenceInto(SetIterable<? extends T> subtrahendSet, R targetSet)\n        {\n            return this.getDelegate().differenceInto(subtrahendSet, targetSet);\n        }\n<fim_suffix>        @Override\n        public MutableSet<T> symmetricDifference(SetIterable<? extends T> setB)\n        {\n            return this.getDelegate().symmetricDifference(setB);\n        }<fim_middle>// function below has no smell\n"}