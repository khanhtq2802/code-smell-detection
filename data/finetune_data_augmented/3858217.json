{"text": "<fim_prefix>import io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiParam;\nimport io.swagger.annotations.ApiResponse;\nimport io.swagger.annotations.ApiResponses;\n/**\n * Service responsible for management of a batch of requests with attached\n * schedule\n */\n@Api(value = \"RequestSchedules\", description = \"Endpoint for request schedule specific operations\")\npublic class RequestScheduleService extends BaseService {\n  public static final String REQUEST_SCHEDULE_REQUEST_TYPE = \"org.apache.ambari.server.controller\" +\n          \".RequestScheduleRequestSwagger\";\n  /**\n   * Parent cluster name.\n   */\n  private String m_clusterName;\n  /**\n   * Constructor\n   * @param m_clusterName\n   */\n  public RequestScheduleService(String m_clusterName) {\n    this.m_clusterName = m_clusterName;\n  }\n  /**\n   * Handles URL: /clusters/{clusterId}/request_schedules\n   * Get all the scheduled requests for a cluster.\n   *\n   * @param headers\n   * @param ui\n   * @return\n   */\n  @GET\n  @Path(\"\") // This is needed if class level path is not present otherwise no Swagger docs will be generated for this method\n  @Produces(MediaType.TEXT_PLAIN)\n  @ApiOperation(value = \"Get all request schedules\", response = RequestScheduleResponseSwagger.class, responseContainer =\n          RESPONSE_CONTAINER_LIST)\n  @ApiImplicitParams({\n    @ApiImplicitParam(name = QUERY_FIELDS, value = QUERY_FILTER_DESCRIPTION, defaultValue = \"RequestSchedule/*\",\n            dataType = DATA_TYPE_STRING, paramType = PARAM_TYPE_QUERY),\n  })\n  @ApiResponses({\n    @ApiResponse(code = HttpStatus.SC_OK, message = MSG_SUCCESSFUL_OPERATION),\n    @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = MSG_CLUSTER_OR_HOST_NOT_FOUND),\n    @ApiResponse(code = HttpStatus.SC_UNAUTHORIZED, message = MSG_NOT_AUTHENTICATED),\n    @ApiResponse(code = HttpStatus.SC_FORBIDDEN, message = MSG_PERMISSION_DENIED),\n    @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = MSG_SERVER_ERROR),\n    @ApiResponse(code = HttpStatus.SC_BAD_REQUEST, message = MSG_INVALID_ARGUMENTS),\n  })\n  public Response getRequestSchedules(String body,\n                                      @Context HttpHeaders headers,\n                                      @Context UriInfo ui) {\n    return handleRequest(headers, body, ui, Request.Type.GET,\n      createRequestSchedule(m_clusterName, null));\n  }\n  /**\n   * Handles URL: /clusters/{clusterId}/request_schedules/{requestScheduleId}\n   * Get details on a specific request schedule\n   *\n   * @return\n   */\n  @GET\n  @Path(\"{requestScheduleId}\")\n  @Produces(MediaType.TEXT_PLAIN)\n  @ApiOperation(value = \"Get request schedule\", response = RequestScheduleResponseSwagger.class)\n  @ApiImplicitParams({\n    @ApiImplicitParam(name = QUERY_FIELDS, value = QUERY_FILTER_DESCRIPTION, defaultValue = \"RequestSchedule/*\", dataType =\n            DATA_TYPE_STRING, paramType = PARAM_TYPE_QUERY),\n  })\n  @ApiResponses({\n    @ApiResponse(code = HttpStatus.SC_OK, message = MSG_SUCCESSFUL_OPERATION),\n    @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = MSG_CLUSTER_OR_HOST_NOT_FOUND),\n    @ApiResponse(code = HttpStatus.SC_UNAUTHORIZED, message = MSG_NOT_AUTHENTICATED),\n    @ApiResponse(code = HttpStatus.SC_FORBIDDEN, message = MSG_PERMISSION_DENIED),\n    @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = MSG_SERVER_ERROR),\n    @ApiResponse(code = HttpStatus.SC_BAD_REQUEST, message = MSG_INVALID_ARGUMENTS),\n  })\n  public Response getRequestSchedule(String body,\n                                     @Context HttpHeaders headers,\n                                     @Context UriInfo ui,\n                                     @PathParam(\"requestScheduleId\") String requestScheduleId) {\n    return handleRequest(headers, body, ui, Request.Type.GET,\n      createRequestSchedule(m_clusterName, requestScheduleId));\n  }\n  /**\n   * Handles POST /clusters/{clusterId}/request_schedules\n   * Create a new request schedule\n   *\n   * @param body\n   * @param headers\n   * @param ui\n   * @return\n   */\n  @POST\n  @Path(\"\") // This is needed if class level path is not present otherwise no Swagger docs will be generated for this method\n  @Produces(MediaType.TEXT_PLAIN)\n  @ApiOperation(value = \"Create new request schedule\")\n  @ApiImplicitParams({\n    @ApiImplicitParam(dataType = REQUEST_SCHEDULE_REQUEST_TYPE, paramType = PARAM_TYPE_BODY)\n  })\n  @ApiResponses(value = {\n    @ApiResponse(code = HttpStatus.SC_CREATED, message = MSG_SUCCESSFUL_OPERATION),\n    @ApiResponse(code = HttpStatus.SC_ACCEPTED, message = MSG_REQUEST_ACCEPTED),\n    @ApiResponse(code = HttpStatus.SC_BAD_REQUEST, message = MSG_INVALID_ARGUMENTS),\n    @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = MSG_CLUSTER_NOT_FOUND),\n    @ApiResponse(code = HttpStatus.SC_UNAUTHORIZED, message = MSG_NOT_AUTHENTICATED),\n    @ApiResponse(code = HttpStatus.SC_FORBIDDEN, message = MSG_PERMISSION_DENIED),\n    @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = MSG_SERVER_ERROR),\n  })\n  public Response createRequestSchedule(String body,\n                                        @Context HttpHeaders headers,\n                                        @Context UriInfo ui) {\n    return handleRequest(headers, body, ui, Request.Type.POST,\n      createRequestSchedule(m_clusterName, null));\n  }\n  /**\n   * Handles URL: /clusters/{clusterId}/request_schedules/{requestScheduleId}\n   * Get details on a specific request schedule\n   *\n   * @return\n   */\n  @PUT\n  @Path(\"{requestScheduleId}\")\n  @Produces(MediaType.TEXT_PLAIN)\n  @ApiOperation(value = \"Updates a scheduled request, usually used to pause running scheduled requests or to resume them.\",\n    notes = \"Changes the state of an existing request. Usually used to pause running scheduled requests or to resume them.\",\n    nickname = \"RequestSchedules#updateRequestSchedule\"\n  )\n  @ApiImplicitParams({\n    @ApiImplicitParam(dataType = REQUEST_SCHEDULE_REQUEST_TYPE, paramType = PARAM_TYPE_BODY)\n  })\n  @ApiResponses({\n    @ApiResponse(code = HttpStatus.SC_OK, message = MSG_SUCCESSFUL_OPERATION),\n    @ApiResponse(code = HttpStatus.SC_ACCEPTED, message = MSG_REQUEST_ACCEPTED),\n    @ApiResponse(code = HttpStatus.SC_BAD_REQUEST, message = MSG_INVALID_ARGUMENTS),\n    @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = MSG_RESOURCE_NOT_FOUND),\n    @ApiResponse(code = HttpStatus.SC_UNAUTHORIZED, message = MSG_NOT_AUTHENTICATED),\n    @ApiResponse(code = HttpStatus.SC_FORBIDDEN, message = MSG_PERMISSION_DENIED),\n    @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = MSG_SERVER_ERROR),\n  })\n  public Response updateRequestSchedule(String body, @Context HttpHeaders headers, @Context UriInfo ui,\n                                 @ApiParam @PathParam(\"requestScheduleId\") String requestScheduleId) {\n    return handleRequest(headers, body, ui, Request.Type.PUT, createRequestSchedule(m_clusterName, requestScheduleId));\n  }\n  /**\n   * Handles DELETE /clusters/{clusterId}/request_schedules/{requestScheduleId}\n   * Delete a request schedule\n   *\n   * @param headers\n   * @param ui\n   * @param requestScheduleId\n   * @return\n   */\n<fim_suffix>  @DELETE\n  @Path(\"{requestScheduleId}\")\n  @Produces(MediaType.TEXT_PLAIN)\n  @ApiOperation(value = \"Delete a request schedule\", notes = \"Changes status from COMPLETED to DISABLED\")\n  @ApiResponses({\n          @ApiResponse(code = HttpStatus.SC_OK, message = MSG_SUCCESSFUL_OPERATION),\n          @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = MSG_CLUSTER_OR_HOST_NOT_FOUND),\n          @ApiResponse(code = HttpStatus.SC_UNAUTHORIZED, message = MSG_NOT_AUTHENTICATED),\n          @ApiResponse(code = HttpStatus.SC_FORBIDDEN, message = MSG_PERMISSION_DENIED),\n          @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = MSG_SERVER_ERROR),\n  })\n  public Response deleteRequestSchedule(@Context HttpHeaders headers,\n                                        @Context UriInfo ui,\n                                        @PathParam(\"requestScheduleId\") String requestScheduleId) {\n    return handleRequest(headers, null, ui, Request.Type.DELETE,\n      createRequestSchedule(m_clusterName, requestScheduleId));\n  }<fim_middle>// function below has no smell\n"}