{"text": "<fim_prefix>package org.apache.maven.surefire.junitcore;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\nimport org.junit.runners.model.RunnerScheduler;\n\n/**\n * Since SUREFIRE 2.18 this class is deprecated.\n * Please use {@link org.apache.maven.surefire.junitcore.pc.ParallelComputerBuilder} instead.\n *\n * @author <a href=\"mailto:kristian@zenior.no\">Kristian Rosenvold</a>\n */\n<fim_suffix>@Deprecated\npublic class AsynchronousRunner\n    implements RunnerScheduler\n{\n    private final List<Future<Object>> futures = Collections.synchronizedList( new ArrayList<Future<Object>>() );\n\n    private final ExecutorService fService;\n\n    public AsynchronousRunner( ExecutorService fService )\n    {\n        this.fService = fService;\n    }\n\n    @Override\n    public void schedule( final Runnable childStatement )\n    {\n        futures.add( fService.submit( Executors.callable( childStatement ) ) );\n    }\n\n\n    @Override\n    public void finished()\n    {\n        try\n        {\n            waitForCompletion();\n        }\n        catch ( ExecutionException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }\n\n    public void waitForCompletion()\n        throws ExecutionException\n    {\n        for ( Future<Object> each : futures )\n        {\n            try\n            {\n                each.get();\n            }\n            catch ( InterruptedException e )\n            {\n                throw new RuntimeException( e );\n            }\n        }\n    }\n}<fim_middle>// class below has no smell\n"}