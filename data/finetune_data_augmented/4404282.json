{"text": "<fim_prefix>            }\n        } );\n    }\n    /**\n     * This method is called when the flat template oriented presentation\n     * toolitem is selected.\n     */\n    private void templatePresentationToolItemSelected()\n    {\n        // Saving the setting in the preferences\n        store.setValue( EntryTemplatePluginConstants.PREF_TEMPLATES_PRESENTATION,\n            EntryTemplatePluginConstants.PREF_TEMPLATES_PRESENTATION_TEMPLATE );\n        // Removing listeners\n        removeTemplatesViewerListeners();\n        // Disposing the old templates viewer\n        if ( ( templatesViewer != null ) && ( !templatesViewer.getTree().isDisposed() ) )\n        {\n            templatesViewer.getTree().dispose();\n            templatesViewer = null;\n        }\n        // Creating a new one\n        createTemplatesViewer();\n        Tree templatesTree = templatesViewer.getTree();\n        // Title column\n        TreeColumn titleColumn = new TreeColumn( templatesTree, SWT.SINGLE );\n        titleColumn.setText( Messages.getString( \"TemplateEntryEditorPreferencePage.Title\" ) ); //$NON-NLS-1$\n        // Object classes column\n        TreeColumn objectClassesColumn = new TreeColumn( templatesTree, SWT.SINGLE );\n        objectClassesColumn.setText( Messages.getString( \"TemplateEntryEditorPreferencePage.ObjectClasses\" ) ); //$NON-NLS-1$\n        // Setting the default sort column\n        templatesTree.setSortColumn( titleColumn );\n        templatesTree.setSortDirection( SWT.UP );\n        // Setting the columns so they can be sorted\n        ColumnViewerSortColumnUtils.addSortColumn( templatesViewer, titleColumn );\n        ColumnViewerSortColumnUtils.addSortColumn( templatesViewer, objectClassesColumn );\n        // Showing the columns header\n        templatesTree.setHeaderVisible( true );\n        // Settings the templates to the templates viewer\n        templatesViewer.setInput( TEMPLATES_VIEWER_ROOT );\n        // Adding listeners\n        addTemplatesViewerListeners();\n        // Updating the parent composite\n        templatesViewerComposite.layout();\n        // Setting the state for checked and grayed elements\n        setStateForCheckedAndGrayedElements();\n        // Resizing columns\n        resizeColumsToFit();\n        // Hiding the 'Set Default' button \n        setDefaultTemplateButton.setVisible( false );\n    }\n    /**\n     * This method is called when the hierarchical object class oriented \n     * presentation toolitem is selected.\n     */\n    private void objectClassPresentationToolItemSelected()\n    {\n        // Saving the setting in the preferences\n        store.setValue( EntryTemplatePluginConstants.PREF_TEMPLATES_PRESENTATION,\n            EntryTemplatePluginConstants.PREF_TEMPLATES_PRESENTATION_OBJECT_CLASS );\n        // Removing listeners\n        removeTemplatesViewerListeners();\n        // Disposing the old templates viewer\n        if ( ( templatesViewer != null ) && ( !templatesViewer.getTree().isDisposed() ) )\n        {\n            templatesViewer.getTree().dispose();\n            templatesViewer = null;\n        }\n        // Creating a new one\n        createTemplatesViewer();\n        Tree templatesTree = templatesViewer.getTree();\n        // Title column\n        TreeColumn titleColumn = new TreeColumn( templatesTree, SWT.SINGLE );\n        // Setting the columns so they can be sorted\n        ColumnViewerSortColumnUtils.addSortColumn( templatesViewer, titleColumn );\n        // Hiding the columns header\n        templatesTree.setHeaderVisible( false );\n        // Settings the templates to the templates viewer\n        templatesViewer.setInput( TEMPLATES_VIEWER_ROOT );\n        // Adding listeners\n        addTemplatesViewerListeners();\n        // Updating the parent composite\n        templatesViewerComposite.layout();\n        // Setting the state for checked and grayed elements\n        setStateForCheckedAndGrayedElements();\n        // Resizing columns\n        resizeColumsToFit();\n        // Showing the 'Set Default' button \n        setDefaultTemplateButton.setVisible( true );\n        setDefaultTemplateButton.setEnabled( false );\n    }\n    /**\n     * Creates the templates viewer.\n     */\n    private void createTemplatesViewer()\n    {\n        // Templates tree\n        Tree templatesTree = new Tree( templatesViewerComposite, SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION\n            | SWT.CHECK );\n        templatesTree.setLinesVisible( false );\n        // Templates table viewer\n        templatesViewer = new CheckboxTreeViewer( templatesTree );\n        GridData gridData2 = new GridData( SWT.FILL, SWT.NONE, true, false );\n        gridData2.heightHint = 160;\n        templatesViewer.getTree().setLayoutData( gridData2 );\n        // Templates content and label providers, and comparator\n        TemplatesContentProvider contentProvider = new TemplatesContentProvider( this, manager );\n        templatesViewer.setContentProvider( contentProvider );\n        TemplatesCheckStateListener checkStateProviderListener = new TemplatesCheckStateListener( contentProvider,\n            manager );\n        templatesViewer.addCheckStateListener( checkStateProviderListener );\n        TemplatesLabelProvider labelProvider = new TemplatesLabelProvider( manager );\n        templatesViewer.setLabelProvider( labelProvider );\n        templatesViewer.setComparator( new ColumnsTableViewerComparator( labelProvider ) );\n        templatesViewer.addDoubleClickListener( new IDoubleClickListener()\n        {\n            @SuppressWarnings(\"unchecked\")\n            public void doubleClick( DoubleClickEvent event )\n            {\n                StructuredSelection selection = ( StructuredSelection ) templatesViewer.getSelection();\n                if ( !selection.isEmpty() )\n                {\n                    Iterator<Object> selectionIterator = selection.iterator();\n                    while ( selectionIterator.hasNext() )\n                    {\n                        Object selectedElement = ( Object ) selectionIterator.next();\n                        if ( templatesViewer.getExpandedState( selectedElement ) )\n                        {\n                            templatesViewer.collapseToLevel( selectedElement, 1 );\n                        }\n                        else\n                        {\n                            templatesViewer.expandToLevel( selectedElement, 1 );\n                        }\n                    }\n                }\n            }\n        } );\n    }\n    /**\n     * Creates the buttons associated with the templates table.\n     * \n     * @param composite\n     *      the parent composite\n     */\n    private void createTemplatesTableButtons( Group composite )\n    {\n        importTemplatesButton = BaseWidgetUtils.createButton( composite, Messages\n            .getString( \"TemplateEntryEditorPreferencePage.Import\" ), 1 ); //$NON-NLS-1$\n        exportTemplatesButton = BaseWidgetUtils.createButton( composite, Messages\n            .getString( \"TemplateEntryEditorPreferencePage.Export\" ), 1 ); //$NON-NLS-1$\n        removeTemplateButton = BaseWidgetUtils.createButton( composite, Messages\n            .getString( \"TemplateEntryEditorPreferencePage.Remove\" ), 1 ); //$NON-NLS-1$\n        setDefaultTemplateButton = BaseWidgetUtils.createButton( composite, Messages\n            .getString( \"TemplateEntryEditorPreferencePage.SetDefault\" ), 1 ); //$NON-NLS-1$\n    }\n    /**\n     * Creates the Use Template Editor group.\n     *\n     * @param composite\n     *      the parent composite\n     */\n    private void createUseTemplateEditorGroup( Composite composite )\n    {\n        // Use Template Editor Group\n        Group editorActivationGroup = BaseWidgetUtils.createGroup( composite, Messages\n            .getString( \"TemplateEntryEditorPreferencePage.UseTheTemplateEntryEditor\" ), 1 ); //$NON-NLS-1$\n        editorActivationGroup.setLayout( new GridLayout() );\n        editorActivationGroup.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );\n        // With For Entry Button\n        useForAnyEntryButton = BaseWidgetUtils.createRadiobutton( editorActivationGroup, Messages\n            .getString( \"TemplateEntryEditorPreferencePage.ForAnyEntry\" ), 1 ); //$NON-NLS-1$\n        useForAnyEntryButton.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );\n        // For Only Entries With Template Button\n        useForOnlyEntriesWithTemplateButton = BaseWidgetUtils.createRadiobutton( editorActivationGroup, Messages\n            .getString( \"TemplateEntryEditorPreferencePage.OnlyForEntriesMatchingAtLeastOneEnabledTemplate\" ), 1 ); //$NON-NLS-1$\n        useForOnlyEntriesWithTemplateButton.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );\n    }\n    /**\n     * Initializes the listeners\n     */\n<fim_suffix>    private void initListeners()\n    {\n        importTemplatesButton.addSelectionListener( new SelectionAdapter()\n        {\n            public void widgetSelected( SelectionEvent e )\n            {\n                importTemplatesAction();\n            }\n        } );\n        exportTemplatesButton.addSelectionListener( new SelectionAdapter()\n        {\n            public void widgetSelected( SelectionEvent e )\n            {\n                exportTemplatesAction();\n            }\n        } );\n        removeTemplateButton.addSelectionListener( new SelectionAdapter()\n        {\n            public void widgetSelected( SelectionEvent e )\n            {\n                removeTemplateAction();\n            }\n        } );\n        setDefaultTemplateButton.addSelectionListener( new SelectionAdapter()\n        {\n            public void widgetSelected( SelectionEvent e )\n            {\n                setDefaultTemplateAction();\n            }\n        } );\n        useForAnyEntryButton.addSelectionListener( new SelectionAdapter()\n        {\n            public void widgetSelected( SelectionEvent e )\n            {\n                useForAnyEntryAction();\n            }\n        } );\n        useForOnlyEntriesWithTemplateButton.addSelectionListener( new SelectionAdapter()\n        {\n            public void widgetSelected( SelectionEvent e )\n            {\n                useForOnlyEntriesWithTemplateAction();\n            }\n        } );\n    }<fim_middle>// function below has no smell\n"}