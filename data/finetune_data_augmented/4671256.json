{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.mapred.lib;\n\nimport java.io.IOException;\n\nimport org.apache.hadoop.classification.InterfaceAudience;\nimport org.apache.hadoop.classification.InterfaceStability;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.mapred.JobConf;\nimport org.apache.hadoop.mapred.OutputFormat;\nimport org.apache.hadoop.mapred.RecordWriter;\nimport org.apache.hadoop.mapred.Reporter;\nimport org.apache.hadoop.util.Progressable;\n\n/**\n * FilterOutputFormat is a convenience class that wraps OutputFormat. \n * @deprecated Use \n *   {@link org.apache.hadoop.mapreduce.lib.output.FilterOutputFormat} instead.\n */\n@Deprecated\n@InterfaceAudience.Public\n@InterfaceStability.Stable\npublic class FilterOutputFormat<K, V> implements OutputFormat<K, V> {\n\n  protected OutputFormat<K,V> baseOut;\n\n  public FilterOutputFormat () {\n    this.baseOut = null;\n  }\n\n  /**\n   * Create a FilterOutputFormat based on the supplied output format.\n   * @param out the underlying OutputFormat\n   */\n  public FilterOutputFormat (OutputFormat<K,V> out) {\n    this.baseOut = out;\n  }\n\n  public RecordWriter<K, V> getRecordWriter(FileSystem ignored, JobConf job, \n      String name, Progressable progress) throws IOException {\n    return getBaseOut().getRecordWriter(ignored, job, name, progress);\n  }\n\n  public void checkOutputSpecs(FileSystem ignored, JobConf job) \n  throws IOException {\n    getBaseOut().checkOutputSpecs(ignored, job);\n  }\n  \n  private OutputFormat<K,V> getBaseOut() throws IOException {\n    if (baseOut == null) {\n      throw new IOException(\"Outputformat not set for FilterOutputFormat\");\n    }\n    return baseOut;\n  }\n\n  /**\n   * <code>FilterRecordWriter</code> is a convenience wrapper\n   * class that implements  {@link RecordWriter}.\n   */\n\n<fim_suffix>  public static class FilterRecordWriter<K,V> implements RecordWriter<K,V> {\n\n    protected RecordWriter<K,V> rawWriter = null;\n\n    public FilterRecordWriter() throws IOException {\n      rawWriter = null;\n    }\n\n    public FilterRecordWriter(RecordWriter<K,V> rawWriter)  throws IOException {\n      this.rawWriter = rawWriter;\n    }\n\n    public void close(Reporter reporter) throws IOException {\n      getRawWriter().close(reporter);\n    }\n\n    public void write(K key, V value) throws IOException {\n      getRawWriter().write(key, value);\n    }\n    \n    private RecordWriter<K,V> getRawWriter() throws IOException {\n      if (rawWriter == null) {\n        throw new IOException (\"Record Writer not set for FilterRecordWriter\");\n      }\n      return rawWriter;\n    }\n  }\n\n}<fim_middle>// class below has no smell\n"}