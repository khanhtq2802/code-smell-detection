{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage jug.rest;\n\nimport java.util.Collection;\nimport java.util.List;\nimport javax.annotation.Resource;\nimport javax.ejb.Lock;\nimport javax.ejb.LockType;\nimport javax.ejb.Singleton;\nimport javax.ejb.TransactionAttribute;\nimport javax.ejb.TransactionAttributeType;\nimport javax.inject.Inject;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.QueryParam;\nimport javax.ws.rs.core.MediaType;\nimport jug.dao.SubjectDao;\nimport jug.dao.VoteDao;\nimport jug.domain.Result;\nimport jug.domain.Subject;\nimport jug.domain.Value;\nimport jug.domain.Vote;\nimport jug.monitoring.VoteCounter;\n\n@Path(\"subject\")\n@Singleton // an ejb just to be able to test in standalone\n@Lock(LockType.READ)\n@TransactionAttribute(TransactionAttributeType.SUPPORTS)\n@Produces({ MediaType.APPLICATION_JSON })\npublic class SubjectService {\n    @Inject\n    private SubjectDao dao;\n\n    @Inject\n    private VoteDao voteDao;\n\n    @Inject\n    private VoteCounter counter;\n\n    @Resource(name = \"poll.blacklist\")\n    private List<String> blackList;\n\n    @POST\n    @Path(\"create\")\n    public Subject create(final String question, @QueryParam(\"name\") final String name) {\n        if (blackList.contains(name)) {\n            throw new IllegalArgumentException(\"name blacklisted\");\n        }\n\n        final Subject subject = dao.create(name, question);\n\n        counter.putSubject(subject);\n\n        return subject;\n    }\n\n<fim_suffix>    @GET\n    @Path(\"list\")\n    public Collection<Subject> list() {\n        return dao.findAll();\n    }\n\n    @GET\n    @Path(\"find/{name}\")\n    public Subject findByName(@PathParam(\"name\") final String name) {\n        return dao.findByName(name);\n    }\n\n    @GET\n    @Path(\"best\")\n    public Subject best() {\n        return dao.bestSubject();\n    }\n\n    @GET\n    @Path(\"result/{name}\")\n    public Result result(@PathParam(\"name\") final String name) {\n        return new Result(dao.subjectLikeVoteNumber(name), -dao.subjectNotLikeVoteNumber(name));\n    }\n\n    @POST\n    @Path(\"vote\")\n    public Vote vote(final String input, @QueryParam(\"subject\") final String subjectName) {\n        final Vote vote = voteDao.create(Value.valueOf(input));\n        final Subject subject = dao.findByName(subjectName);\n        dao.addVote(subject, vote);\n\n        counter.putSubject(subject); // update\n\n        return vote;\n    }\n}<fim_middle>// function below has no smell\n"}