{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.crunch.impl.mr.run;\n\nimport java.util.List;\n\nimport org.apache.hadoop.mapreduce.Mapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n<fim_suffix>public class CrunchMapper extends Mapper<Object, Object, Object, Object> {\n\n  private static final Logger LOG = LoggerFactory.getLogger(CrunchMapper.class);\n\n  private RTNode node;\n  private CrunchTaskContext ctxt;\n  private boolean debug;\n\n  @Override\n  protected void setup(Mapper<Object, Object, Object, Object>.Context context) {\n    if (ctxt == null) {\n      ctxt = new CrunchTaskContext(context, NodeContext.MAP);\n      this.debug = ctxt.isDebugRun();\n    }\n    \n    List<RTNode> nodes = ctxt.getNodes();\n    if (nodes.size() == 1) {\n      this.node = nodes.get(0);\n    } else {\n      CrunchInputSplit split = (CrunchInputSplit) context.getInputSplit();\n      this.node = nodes.get(split.getNodeIndex());\n    }\n    this.node.initialize(ctxt);\n  }\n\n  @Override\n  protected void map(Object k, Object v, Mapper<Object, Object, Object, Object>.Context context) {\n    if (debug) {\n      try {\n        node.process(k, v);\n      } catch (Exception e) {\n        LOG.error(\"Mapper exception\", e);\n      }\n    } else {\n      node.process(k, v);\n    }\n  }\n\n  @Override\n  protected void cleanup(Mapper<Object, Object, Object, Object>.Context context) {\n    node.cleanup();\n    ctxt.cleanup();\n  }\n}<fim_middle>// class below has no smell\n"}