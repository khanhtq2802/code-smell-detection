{"text": "<fim_prefix>                        log.debug(\"Shutdown hook is removed.\");\n                }\n                catch (IllegalStateException e) {\n                    // Shutdown is in progress...\n                    if (log != null && log.isDebugEnabled())\n                        log.debug(\"Shutdown is in progress (ignoring): \" + e.getMessage());\n                }\n            // Unregister Ignite MBean.\n            unregisterFactoryMBean();\n            try {\n                grid0.stop(cancel);\n                if (log != null && log.isDebugEnabled())\n                    log.debug(\"Ignite instance stopped ok: \" + name);\n            }\n            catch (Throwable e) {\n                U.error(log, \"Failed to properly stop grid instance due to undeclared exception.\", e);\n                if (e instanceof Error)\n                    throw e;\n            }\n            finally {\n                if (grid0.context().segmented())\n                    state = STOPPED_ON_SEGMENTATION;\n                else if (grid0.context().invalid())\n                    state = STOPPED_ON_FAILURE;\n                else\n                    state = STOPPED;\n                grid = null;\n                if (log != null)\n                    stopExecutors(log);\n                log = null;\n            }\n        }\n        /**\n         * Stops executor services if they has been started.\n         *\n         * @param log Grid logger.\n         */\n        private void stopExecutors(IgniteLogger log) {\n            boolean interrupted = Thread.interrupted();\n            try {\n                stopExecutors0(log);\n            }\n            finally {\n                if (interrupted)\n                    Thread.currentThread().interrupt();\n            }\n        }\n        /**\n         * Stops executor services if they has been started.\n         *\n         * @param log Grid logger.\n         */\n        private void stopExecutors0(IgniteLogger log) {\n            assert log != null;\n            U.shutdownNow(getClass(), execSvc, log);\n            execSvc = null;\n            U.shutdownNow(getClass(), svcExecSvc, log);\n            svcExecSvc = null;\n            U.shutdownNow(getClass(), sysExecSvc, log);\n            sysExecSvc = null;\n            U.shutdownNow(getClass(), qryExecSvc, log);\n            qryExecSvc = null;\n            U.shutdownNow(getClass(), schemaExecSvc, log);\n            schemaExecSvc = null;\n            U.shutdownNow(getClass(), stripedExecSvc, log);\n            stripedExecSvc = null;\n            U.shutdownNow(getClass(), mgmtExecSvc, log);\n            mgmtExecSvc = null;\n            U.shutdownNow(getClass(), p2pExecSvc, log);\n            p2pExecSvc = null;\n            U.shutdownNow(getClass(), dataStreamerExecSvc, log);\n            dataStreamerExecSvc = null;\n            U.shutdownNow(getClass(), igfsExecSvc, log);\n            igfsExecSvc = null;\n            if (restExecSvc != null)\n                U.shutdownNow(getClass(), restExecSvc, log);\n            restExecSvc = null;\n            U.shutdownNow(getClass(), utilityCacheExecSvc, log);\n            utilityCacheExecSvc = null;\n            U.shutdownNow(getClass(), affExecSvc, log);\n            affExecSvc = null;\n            U.shutdownNow(getClass(), idxExecSvc, log);\n            idxExecSvc = null;\n            U.shutdownNow(getClass(), callbackExecSvc, log);\n            callbackExecSvc = null;\n            if (!F.isEmpty(customExecSvcs)) {\n                for (ThreadPoolExecutor exec : customExecSvcs.values())\n                    U.shutdownNow(getClass(), exec, log);\n                customExecSvcs = null;\n            }\n        }\n        /**\n         * Registers delegate Mbean instance for {@link Ignition}.\n         *\n         * @param srv MBeanServer where mbean should be registered.\n         * @throws IgniteCheckedException If registration failed.\n         */\n        private void registerFactoryMbean(MBeanServer srv) throws IgniteCheckedException {\n            if(U.IGNITE_MBEANS_DISABLED)\n                return;\n            assert srv != null;\n            synchronized (mbeans) {\n                GridMBeanServerData data = mbeans.get(srv);\n                if (data == null) {\n                    try {\n                        IgnitionMXBean mbean = new IgnitionMXBeanAdapter();\n                        ObjectName objName = U.makeMBeanName(\n                            null,\n                            \"Kernal\",\n                            Ignition.class.getSimpleName()\n                        );\n                        // Make check if MBean was already registered.\n                        if (!srv.queryMBeans(objName, null).isEmpty())\n                            throw new IgniteCheckedException(\"MBean was already registered: \" + objName);\n                        else {\n                            objName = U.registerMBean(\n                                srv,\n                                null,\n                                \"Kernal\",\n                                Ignition.class.getSimpleName(),\n                                mbean,\n                                IgnitionMXBean.class\n                            );\n                            data = new GridMBeanServerData(objName);\n                            mbeans.put(srv, data);\n                            if (log.isDebugEnabled())\n                                log.debug(\"Registered MBean: \" + objName);\n                        }\n                    }\n                    catch (JMException e) {\n                        throw new IgniteCheckedException(\"Failed to register MBean.\", e);\n                    }\n                }\n                assert data != null;\n                data.addIgniteInstance(name);\n                data.setCounter(data.getCounter() + 1);\n            }\n        }\n        /**\n         * Unregister delegate Mbean instance for {@link Ignition}.\n         */\n        private void unregisterFactoryMBean() {\n            if(U.IGNITE_MBEANS_DISABLED)\n                return;\n            synchronized (mbeans) {\n                Iterator<Entry<MBeanServer, GridMBeanServerData>> iter = mbeans.entrySet().iterator();\n                while (iter.hasNext()) {\n                    Entry<MBeanServer, GridMBeanServerData> entry = iter.next();\n                    if (entry.getValue().containsIgniteInstance(name)) {\n                        GridMBeanServerData data = entry.getValue();\n                        assert data != null;\n                        // Unregister MBean if no grid instances started for current MBeanServer.\n                        if (data.getCounter() == 1) {\n                            try {\n                                entry.getKey().unregisterMBean(data.getMbean());\n                                if (log.isDebugEnabled())\n                                    log.debug(\"Unregistered MBean: \" + data.getMbean());\n                            }\n                            catch (JMException e) {\n                                U.error(log, \"Failed to unregister MBean.\", e);\n                            }\n                            iter.remove();\n                        }\n                        else {\n                            // Decrement counter.\n                            data.setCounter(data.getCounter() - 1);\n                            data.removeIgniteInstance(name);\n                        }\n                    }\n                }\n            }\n        }\n        /**\n         * Grid factory MBean data container.\n         * Contains necessary data for selected MBeanServer.\n         */\n<fim_suffix>        private static class GridMBeanServerData {\n            /** Set of grid names for selected MBeanServer. */\n            private Collection<String> igniteInstanceNames = new HashSet<>();\n            /** */\n            private ObjectName mbean;\n            /** Count of grid instances. */\n            private int cnt;\n            /**\n             * Create data container.\n             *\n             * @param mbean Object name of MBean.\n             */\n            GridMBeanServerData(ObjectName mbean) {\n                assert mbean != null;\n                this.mbean = mbean;\n            }\n            /**\n             * Add Ignite instance name.\n             *\n             * @param igniteInstanceName Ignite instance name.\n             */\n            public void addIgniteInstance(String igniteInstanceName) {\n                igniteInstanceNames.add(igniteInstanceName);\n            }\n            /**\n             * Remove Ignite instance name.\n             *\n             * @param igniteInstanceName Ignite instance name.\n             */\n            public void removeIgniteInstance(String igniteInstanceName) {\n                igniteInstanceNames.remove(igniteInstanceName);\n            }\n            /**\n             * Returns {@code true} if data contains the specified\n             * Ignite instance name.\n             *\n             * @param igniteInstanceName Ignite instance name.\n             * @return {@code true} if data contains the specified Ignite instance name.\n             */\n            public boolean containsIgniteInstance(String igniteInstanceName) {\n                return igniteInstanceNames.contains(igniteInstanceName);\n            }\n            /**\n             * Gets name used in MBean server.\n             *\n             * @return Object name of MBean.\n             */\n            public ObjectName getMbean() {\n                return mbean;\n            }\n            /**\n             * Gets number of grid instances working with MBeanServer.\n             *\n             * @return Number of grid instances.\n             */\n            public int getCounter() {\n                return cnt;\n            }\n            /**\n             * Sets number of grid instances working with MBeanServer.\n             *\n             * @param cnt Number of grid instances.\n             */\n            public void setCounter(int cnt) {\n                this.cnt = cnt;\n            }\n        }<fim_middle>// class below is data class\n"}