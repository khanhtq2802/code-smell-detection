{"text": "<fim_prefix>        commitTimeNanos.set(0);\n        rollbackTimeNanos.set(0);\n        entryProcessorPuts.set(0);\n        entryProcessorRemovals.set(0);\n        entryProcessorReadOnlyInvocations.set(0);\n        entryProcessorMisses.set(0);\n        entryProcessorHits.set(0);\n        entryProcessorInvokeTimeNanos.set(0);\n        entryProcessorMaxInvocationTime.set(0);\n        entryProcessorMinInvocationTime.set(0);\n        offHeapGets.set(0);\n        offHeapPuts.set(0);\n        offHeapRemoves.set(0);\n        offHeapHits.set(0);\n        offHeapMisses.set(0);\n        offHeapEvicts.set(0);\n        clearRebalanceCounters();\n        if (delegate != null)\n            delegate.clear();\n    }\n    /** {@inheritDoc} */\n    @Override public long getCacheHits() {\n        return hits.get();\n    }\n    /** {@inheritDoc} */\n    @Override public float getCacheHitPercentage() {\n        long hits0 = hits.get();\n        long gets0 = reads.get();\n        if (hits0 == 0)\n            return 0;\n        return (float) hits0 / gets0 * 100.0f;\n    }\n    /** {@inheritDoc} */\n    @Override public long getCacheMisses() {\n        return misses.get();\n    }\n    /** {@inheritDoc} */\n    @Override public float getCacheMissPercentage() {\n        long misses0 = misses.get();\n        long reads0 = reads.get();\n        if (misses0 == 0)\n            return 0;\n        return (float) misses0 / reads0 * 100.0f;\n    }\n    /** {@inheritDoc} */\n    @Override public long getCacheGets() {\n        return reads.get();\n    }\n    /** {@inheritDoc} */\n    @Override public long getCachePuts() {\n        return writes.get();\n    }\n    /** {@inheritDoc} */\n    @Override public long getEntryProcessorPuts() {\n        return entryProcessorPuts.get();\n    }\n    /** {@inheritDoc} */\n    @Override public long getEntryProcessorRemovals() {\n        return entryProcessorRemovals.get();\n    }\n    /** {@inheritDoc} */\n    @Override public long getEntryProcessorReadOnlyInvocations() {\n        return entryProcessorReadOnlyInvocations.get();\n    }\n    /** {@inheritDoc} */\n    @Override public long getEntryProcessorInvocations() {\n        return entryProcessorReadOnlyInvocations.get() + entryProcessorPuts.get() + entryProcessorRemovals.get();\n    }\n    /** {@inheritDoc} */\n    @Override public long getEntryProcessorHits() {\n        return entryProcessorHits.get();\n    }\n    /** {@inheritDoc} */\n    @Override public float getEntryProcessorHitPercentage() {\n        long hits = entryProcessorHits.get();\n        long totalInvocations = getEntryProcessorInvocations();\n        if (hits == 0)\n            return 0;\n        return (float) hits / totalInvocations * 100.0f;\n    }\n    /** {@inheritDoc} */\n    @Override public long getEntryProcessorMisses() {\n        return entryProcessorMisses.get();\n    }\n    /** {@inheritDoc} */\n    @Override public float getEntryProcessorMissPercentage() {\n        long misses = entryProcessorMisses.get();\n        long totalInvocations = getEntryProcessorInvocations();\n        if (misses == 0)\n            return 0;\n        return (float) misses / totalInvocations * 100.0f;\n    }\n    /** {@inheritDoc} */\n    @Override public float getEntryProcessorAverageInvocationTime() {\n        long totalInvokes = getEntryProcessorInvocations();\n        long timeNanos = entryProcessorInvokeTimeNanos.get();\n        if (timeNanos == 0 || totalInvokes == 0)\n            return 0;\n        return (1f * timeNanos) / totalInvokes / NANOS_IN_MICROSECOND;\n    }\n    /** {@inheritDoc} */\n    @Override public float getEntryProcessorMinInvocationTime() {\n        return (1f * entryProcessorMinInvocationTime.get()) / NANOS_IN_MICROSECOND;\n    }\n    /** {@inheritDoc} */\n    @Override public float getEntryProcessorMaxInvocationTime() {\n        return (1f * entryProcessorMaxInvocationTime.get()) / NANOS_IN_MICROSECOND;\n    }\n    /** {@inheritDoc} */\n    @Override public long getCacheRemovals() {\n        return rmCnt.get();\n    }\n    /** {@inheritDoc} */\n    @Override public long getCacheEvictions() {\n        return evictCnt.get();\n    }\n    /** {@inheritDoc} */\n    @Override public float getAverageGetTime() {\n        long timeNanos = getTimeNanos.get();\n        long readsCnt = reads.get();\n        if (timeNanos == 0 || readsCnt == 0)\n            return 0;\n        return ((1f * timeNanos) / readsCnt) / NANOS_IN_MICROSECOND;\n    }\n    /** {@inheritDoc} */\n    @Override public float getAveragePutTime() {\n        long timeNanos = putTimeNanos.get();\n        long putsCnt = writes.get();\n        if (timeNanos == 0 || putsCnt == 0)\n            return 0;\n        return ((1f * timeNanos) / putsCnt) / NANOS_IN_MICROSECOND;\n    }\n    /** {@inheritDoc} */\n    @Override public float getAverageRemoveTime() {\n        long timeNanos = rmvTimeNanos.get();\n        long removesCnt = rmCnt.get();\n        if (timeNanos == 0 || removesCnt == 0)\n            return 0;\n        return ((1f * timeNanos) / removesCnt) / NANOS_IN_MICROSECOND;\n    }\n    /**\n     * Cache read callback.\n     * @param isHit Hit or miss flag.\n     */\n    public void onRead(boolean isHit) {\n        reads.incrementAndGet();\n        if (isHit)\n            hits.incrementAndGet();\n        else\n            misses.incrementAndGet();\n        if (delegate != null)\n            delegate.onRead(isHit);\n    }\n    /**\n     * Cache invocations caused update callback.\n     *\n     * @param isHit Hit or miss flag.\n     */\n    public void onInvokeUpdate(boolean isHit) {\n        entryProcessorPuts.incrementAndGet();\n        if (isHit)\n            entryProcessorHits.incrementAndGet();\n        else\n            entryProcessorMisses.incrementAndGet();\n        if (delegate != null)\n            delegate.onInvokeUpdate(isHit);\n    }\n    /**\n     * Cache invocations caused removal callback.\n     *\n     * @param isHit Hit or miss flag.\n     */\n    public void onInvokeRemove(boolean isHit) {\n        entryProcessorRemovals.incrementAndGet();\n        if (isHit)\n            entryProcessorHits.incrementAndGet();\n        else\n            entryProcessorMisses.incrementAndGet();\n        if (delegate != null)\n            delegate.onInvokeRemove(isHit);\n    }\n    /**\n     * Read-only cache invocations.\n     *\n     * @param isHit Hit or miss flag.\n     */\n    public void onReadOnlyInvoke(boolean isHit) {\n        entryProcessorReadOnlyInvocations.incrementAndGet();\n        if (isHit)\n            entryProcessorHits.incrementAndGet();\n        else\n            entryProcessorMisses.incrementAndGet();\n        if (delegate != null)\n            delegate.onReadOnlyInvoke(isHit);\n    }\n    /**\n     * Increments invoke operation time nanos.\n     *\n     * @param duration Duration.\n     */\n    public void addInvokeTimeNanos(long duration) {\n        entryProcessorInvokeTimeNanos.addAndGet(duration);\n        recalculateInvokeMinTimeNanos(duration);\n        recalculateInvokeMaxTimeNanos(duration);\n        if (delegate != null)\n            delegate.addInvokeTimeNanos(duration);\n    }\n    /**\n     * Recalculates invoke operation minimum time nanos.\n     *\n     * @param duration Duration.\n     */\n    private void recalculateInvokeMinTimeNanos(long duration){\n        long minTime = entryProcessorMinInvocationTime.longValue();\n        while (minTime > duration || minTime == 0) {\n            if (entryProcessorMinInvocationTime.compareAndSet(minTime, duration))\n                break;\n            else\n                minTime = entryProcessorMinInvocationTime.longValue();\n        }\n    }\n    /**\n     * Recalculates invoke operation maximum time nanos.\n     *\n     * @param duration Duration.\n     */\n    private void recalculateInvokeMaxTimeNanos(long duration){\n        long maxTime = entryProcessorMaxInvocationTime.longValue();\n        while (maxTime < duration) {\n            if (entryProcessorMaxInvocationTime.compareAndSet(maxTime, duration))\n                break;\n            else\n                maxTime = entryProcessorMaxInvocationTime.longValue();\n        }\n    }\n    /**\n     * Cache write callback.\n     */\n    public void onWrite() {\n        writes.incrementAndGet();\n        if (delegate != null)\n            delegate.onWrite();\n    }\n    /**\n     * Cache remove callback.\n     */\n<fim_suffix>    public void onRemove(){\n        rmCnt.incrementAndGet();\n        if (delegate != null)\n            delegate.onRemove();\n    }<fim_middle>// function below has no smell\n"}