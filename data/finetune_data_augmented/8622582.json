{"text": "<fim_prefix>import org.apache.ignite.cache.query.FieldsQueryCursor;\nimport org.apache.ignite.cache.query.SqlFieldsQuery;\nimport org.apache.ignite.internal.GridKernalContext;\nimport org.apache.ignite.internal.IgniteInterruptedCheckedException;\nimport org.apache.ignite.internal.binary.BinaryWriterExImpl;\nimport org.apache.ignite.internal.binary.GridBinaryMarshaller;\nimport org.apache.ignite.internal.processors.authentication.AuthorizationContext;\nimport org.apache.ignite.internal.processors.cache.mvcc.MvccUtils;\nimport org.apache.ignite.internal.processors.cache.query.IgniteQueryErrorCode;\nimport org.apache.ignite.internal.processors.cache.query.SqlFieldsQueryEx;\nimport org.apache.ignite.internal.processors.odbc.ClientListenerProtocolVersion;\nimport org.apache.ignite.internal.processors.odbc.ClientListenerRequest;\nimport org.apache.ignite.internal.processors.odbc.ClientListenerRequestHandler;\nimport org.apache.ignite.internal.processors.odbc.ClientListenerResponse;\nimport org.apache.ignite.internal.processors.odbc.ClientListenerResponseSender;\nimport org.apache.ignite.internal.processors.odbc.odbc.escape.OdbcEscapeUtils;\nimport org.apache.ignite.internal.processors.query.GridQueryProperty;\nimport org.apache.ignite.internal.processors.query.GridQueryTypeDescriptor;\nimport org.apache.ignite.internal.processors.query.IgniteSQLException;\nimport org.apache.ignite.internal.processors.query.NestedTxMode;\nimport org.apache.ignite.internal.processors.query.QueryUtils;\nimport org.apache.ignite.internal.processors.query.SqlClientContext;\nimport org.apache.ignite.internal.util.GridSpinBusyLock;\nimport org.apache.ignite.internal.util.future.GridFutureAdapter;\nimport org.apache.ignite.internal.util.typedef.F;\nimport org.apache.ignite.internal.util.typedef.X;\nimport org.apache.ignite.internal.util.typedef.internal.U;\nimport org.apache.ignite.internal.util.worker.GridWorker;\nimport org.apache.ignite.lang.IgniteBiTuple;\nimport org.apache.ignite.transactions.TransactionAlreadyCompletedException;\nimport org.apache.ignite.transactions.TransactionDuplicateKeyException;\nimport org.apache.ignite.transactions.TransactionSerializationException;\nimport static org.apache.ignite.internal.processors.odbc.odbc.OdbcRequest.META_COLS;\nimport static org.apache.ignite.internal.processors.odbc.odbc.OdbcRequest.META_PARAMS;\nimport static org.apache.ignite.internal.processors.odbc.odbc.OdbcRequest.META_TBLS;\nimport static org.apache.ignite.internal.processors.odbc.odbc.OdbcRequest.MORE_RESULTS;\nimport static org.apache.ignite.internal.processors.odbc.odbc.OdbcRequest.QRY_CLOSE;\nimport static org.apache.ignite.internal.processors.odbc.odbc.OdbcRequest.QRY_EXEC;\nimport static org.apache.ignite.internal.processors.odbc.odbc.OdbcRequest.QRY_EXEC_BATCH;\nimport static org.apache.ignite.internal.processors.odbc.odbc.OdbcRequest.QRY_FETCH;\nimport static org.apache.ignite.internal.processors.odbc.odbc.OdbcRequest.STREAMING_BATCH;\n/**\n * SQL query handler.\n */\npublic class OdbcRequestHandler implements ClientListenerRequestHandler {\n    /** Query ID sequence. */\n    private static final AtomicLong QRY_ID_GEN = new AtomicLong();\n    /** Kernel context. */\n    private final GridKernalContext ctx;\n    /** Client context. */\n    private final SqlClientContext cliCtx;\n    /** Logger. */\n    private final IgniteLogger log;\n    /** Busy lock. */\n    private final GridSpinBusyLock busyLock;\n    /** Worker. */\n    private final OdbcRequestHandlerWorker worker;\n    /** Maximum allowed cursors. */\n    private final int maxCursors;\n    /** Current queries cursors. */\n    private final ConcurrentHashMap<Long, OdbcQueryResults> qryResults = new ConcurrentHashMap<>();\n    /** Nested transaction behaviour. */\n    private final NestedTxMode nestedTxMode;\n    /** Authentication context */\n    private final AuthorizationContext actx;\n    /** Client version. */\n    private ClientListenerProtocolVersion ver;\n    /** Ordered batches queue. */\n    private final PriorityQueue<OdbcStreamingBatchRequest> orderedBatchesQueue = new PriorityQueue<>();\n    /** Ordered batches mutex. */\n    private final Object orderedBatchesMux = new Object();\n    /** Response sender. */\n    private final ClientListenerResponseSender sender;\n    /**\n     * Constructor.\n     * @param ctx Context.\n     * @param busyLock Shutdown latch.\n     * @param sender Results sender.\n     * @param maxCursors Maximum allowed cursors.\n     * @param distributedJoins Distributed joins flag.\n     * @param enforceJoinOrder Enforce join order flag.\n     * @param replicatedOnly Replicated only flag.\n     * @param collocated Collocated flag.\n     * @param lazy Lazy flag.\n     * @param skipReducerOnUpdate Skip reducer on update flag.\n     * @param nestedTxMode Nested transaction mode.\n     * @param actx Authentication context.\n     * @param ver Client protocol version.\n     */\n    public OdbcRequestHandler(\n        GridKernalContext ctx,\n        GridSpinBusyLock busyLock,\n        ClientListenerResponseSender sender,\n        int maxCursors,\n        boolean distributedJoins,\n        boolean enforceJoinOrder,\n        boolean replicatedOnly,\n        boolean collocated,\n        boolean lazy,\n        boolean skipReducerOnUpdate,\n        AuthorizationContext actx, NestedTxMode nestedTxMode, ClientListenerProtocolVersion ver) {\n        this.ctx = ctx;\n        Factory<GridWorker> orderedFactory = new Factory<GridWorker>() {\n            @Override public GridWorker create() {\n                return new OrderedBatchWorker();\n            }\n        };\n        this.cliCtx = new SqlClientContext(\n            ctx,\n            orderedFactory,\n            distributedJoins,\n            enforceJoinOrder,\n            collocated,\n            replicatedOnly,\n            lazy,\n            skipReducerOnUpdate,\n            null\n        );\n        this.busyLock = busyLock;\n        this.sender = sender;\n        this.maxCursors = maxCursors;\n        this.actx = actx;\n        this.nestedTxMode = nestedTxMode;\n        this.ver = ver;\n        log = ctx.log(getClass());\n        // TODO IGNITE-9484 Do not create worker if there is a possibility to unbind TX from threads.\n        worker = new OdbcRequestHandlerWorker(ctx.igniteInstanceName(), log, this, ctx);\n    }\n    /** {@inheritDoc} */\n    @Override public ClientListenerResponse handle(ClientListenerRequest req0) {\n        assert req0 != null;\n        assert req0 instanceof OdbcRequest;\n        OdbcRequest req = (OdbcRequest)req0;\n        if (!MvccUtils.mvccEnabled(ctx))\n            return doHandle(req);\n        else {\n            GridFutureAdapter<ClientListenerResponse> fut = worker.process(req);\n            try {\n                return fut.get();\n            }\n            catch (IgniteCheckedException e) {\n                return exceptionToResult(e);\n            }\n        }\n    }\n    /**\n     * Start worker, if it's present.\n     */\n    void start() {\n        if (worker != null)\n            worker.start();\n    }\n    /**\n     * Handle ODBC request.\n     * @param req ODBC request.\n     * @return Response.\n     */\n<fim_suffix>    public ClientListenerResponse doHandle(OdbcRequest req) {\n        if (!busyLock.enterBusy())\n            return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN,\n                \"Failed to handle ODBC request because node is stopping: \" + req);\n        if (actx != null)\n            AuthorizationContext.context(actx);\n        try {\n            switch (req.command()) {\n                case QRY_EXEC:\n                    return executeQuery((OdbcQueryExecuteRequest)req);\n                case QRY_EXEC_BATCH:\n                    return executeBatchQuery((OdbcQueryExecuteBatchRequest)req);\n                case STREAMING_BATCH:\n                    return dispatchBatchOrdered((OdbcStreamingBatchRequest)req);\n                case QRY_FETCH:\n                    return fetchQuery((OdbcQueryFetchRequest)req);\n                case QRY_CLOSE:\n                    return closeQuery((OdbcQueryCloseRequest)req);\n                case META_COLS:\n                    return getColumnsMeta((OdbcQueryGetColumnsMetaRequest)req);\n                case META_TBLS:\n                    return getTablesMeta((OdbcQueryGetTablesMetaRequest)req);\n                case META_PARAMS:\n                    return getParamsMeta((OdbcQueryGetParamsMetaRequest)req);\n                case MORE_RESULTS:\n                    return moreResults((OdbcQueryMoreResultsRequest)req);\n            }\n            return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN, \"Unsupported ODBC request: \" + req);\n        }\n        finally {\n            AuthorizationContext.clear();\n            busyLock.leaveBusy();\n        }\n    }<fim_middle>// function below is long method\n"}