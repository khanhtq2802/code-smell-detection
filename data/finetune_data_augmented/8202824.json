{"text": "<fim_prefix>            \"\\12\\20\\7\\uffff\\32\\20\\4\\uffff\\1\\20\\1\\uffff\\32\\20\",\n            \"\",\n            \"\\12\\20\\7\\uffff\\32\\20\\4\\uffff\\1\\20\\1\\uffff\\32\\20\",\n            \"\\1\\71\",\n            \"\\1\\72\",\n            \"\",\n            \"\",\n            \"\\1\\73\",\n            \"\\1\\75\\7\\uffff\\1\\74\\11\\uffff\\1\\76\",\n            \"\\1\\77\",\n            \"\\1\\100\",\n            \"\\1\\101\",\n            \"\\1\\102\",\n            \"\\1\\103\",\n            \"\\12\\20\\7\\uffff\\32\\20\\4\\uffff\\1\\20\\1\\uffff\\22\\20\\1\\104\\7\\20\",\n            \"\\1\\106\",\n            \"\\1\\107\",\n            \"\\12\\20\\7\\uffff\\32\\20\\4\\uffff\\1\\20\\1\\uffff\\22\\20\\1\\110\\7\\20\",\n            \"\\12\\20\\7\\uffff\\32\\20\\4\\uffff\\1\\20\\1\\uffff\\32\\20\",\n            \"\",\n            \"\\1\\113\",\n            \"\\1\\114\",\n            \"\\12\\20\\7\\uffff\\32\\20\\4\\uffff\\1\\20\\1\\uffff\\32\\20\",\n            \"\",\n            \"\",\n            \"\\1\\116\",\n            \"\\1\\117\",\n            \"\",\n            \"\\1\\120\",\n            \"\\1\\121\",\n            \"\\1\\122\",\n            \"\\12\\20\\7\\uffff\\32\\20\\4\\uffff\\1\\20\\1\\uffff\\22\\20\\1\\123\\7\\20\",\n            \"\\1\\125\",\n            \"\\12\\20\\7\\uffff\\32\\20\\4\\uffff\\1\\20\\1\\uffff\\32\\20\",\n            \"\",\n            \"\\1\\127\",\n            \"\",\n            \"\\1\\130\",\n            \"\\1\\131\",\n            \"\\12\\20\\7\\uffff\\32\\20\\4\\uffff\\1\\20\\1\\uffff\\22\\20\\1\\132\\7\\20\",\n            \"\\12\\20\\7\\uffff\\32\\20\\4\\uffff\\1\\20\\1\\uffff\\32\\20\",\n            \"\",\n            \"\"\n    };\n    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);\n    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);\n    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);\n    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);\n    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);\n    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);\n    static final short[][] DFA12_transition;\n    static {\n        int numStates = DFA12_transitionS.length;\n        DFA12_transition = new short[numStates][];\n        for (int i=0; i<numStates; i++) {\n            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);\n        }\n    }\n<fim_suffix>    static class DFA12 extends DFA {\n        public DFA12(BaseRecognizer recognizer) {\n            this.recognizer = recognizer;\n            this.decisionNumber = 12;\n            this.eot = DFA12_eot;\n            this.eof = DFA12_eof;\n            this.min = DFA12_min;\n            this.max = DFA12_max;\n            this.accept = DFA12_accept;\n            this.special = DFA12_special;\n            this.transition = DFA12_transition;\n        }\n        public String getDescription() {\n            return \"1:1: Tokens : ( T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | RULE_ID | RULE_INT | RULE_STRING | RULE_ML_COMMENT | RULE_SL_COMMENT | RULE_WS | RULE_ANY_OTHER );\";\n        }\n        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {\n            IntStream input = _input;\n        \tint _s = s;\n            switch ( s ) {\n                    case 0 : \n                        int LA12_0 = input.LA(1);\n                        s = -1;\n                        if ( (LA12_0=='s') ) {s = 1;}\n                        else if ( (LA12_0=='c') ) {s = 2;}\n                        else if ( (LA12_0=='i') ) {s = 3;}\n                        else if ( (LA12_0=='a') ) {s = 4;}\n                        else if ( (LA12_0=='d') ) {s = 5;}\n                        else if ( (LA12_0=='^') ) {s = 6;}\n                        else if ( ((LA12_0>='A' && LA12_0<='Z')||LA12_0=='_'||LA12_0=='b'||(LA12_0>='e' && LA12_0<='h')||(LA12_0>='j' && LA12_0<='r')||(LA12_0>='t' && LA12_0<='z')) ) {s = 7;}\n                        else if ( ((LA12_0>='0' && LA12_0<='9')) ) {s = 8;}\n                        else if ( (LA12_0=='\\\"') ) {s = 9;}\n                        else if ( (LA12_0=='\\'') ) {s = 10;}\n                        else if ( (LA12_0=='/') ) {s = 11;}\n                        else if ( ((LA12_0>='\\t' && LA12_0<='\\n')||LA12_0=='\\r'||LA12_0==' ') ) {s = 12;}\n                        else if ( ((LA12_0>='\\u0000' && LA12_0<='\\b')||(LA12_0>='\\u000B' && LA12_0<='\\f')||(LA12_0>='\\u000E' && LA12_0<='\\u001F')||LA12_0=='!'||(LA12_0>='#' && LA12_0<='&')||(LA12_0>='(' && LA12_0<='.')||(LA12_0>=':' && LA12_0<='@')||(LA12_0>='[' && LA12_0<=']')||LA12_0=='`'||(LA12_0>='{' && LA12_0<='\\uFFFF')) ) {s = 13;}\n                        if ( s>=0 ) return s;\n                        break;\n                    case 1 : \n                        int LA12_9 = input.LA(1);\n                        s = -1;\n                        if ( ((LA12_9>='\\u0000' && LA12_9<='\\uFFFF')) ) {s = 22;}\n                        else s = 13;\n                        if ( s>=0 ) return s;\n                        break;\n                    case 2 : \n                        int LA12_10 = input.LA(1);\n                        s = -1;\n                        if ( ((LA12_10>='\\u0000' && LA12_10<='\\uFFFF')) ) {s = 22;}\n                        else s = 13;\n                        if ( s>=0 ) return s;\n                        break;\n            }\n            NoViableAltException nvae =\n                new NoViableAltException(getDescription(), 12, _s, input);\n            error(nvae);\n            throw nvae;\n        }\n    }<fim_middle>// class below has no smell\n"}