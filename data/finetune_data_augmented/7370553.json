{"text": "<fim_prefix>/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.autoconfigure.validation;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.boot.validation.MessageInterpolatorFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.validation.Errors;\nimport org.springframework.validation.SmartValidator;\nimport org.springframework.validation.Validator;\nimport org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean;\nimport org.springframework.validation.beanvalidation.SpringValidatorAdapter;\n\n/**\n * {@link Validator} implementation that delegates calls to another {@link Validator}.\n * This {@link Validator} implements Spring's {@link SmartValidator} interface but does\n * not implement the JSR-303 {@code javax.validator.Validator} interface.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 2.0.0\n */\n<fim_suffix>public class ValidatorAdapter implements SmartValidator, ApplicationContextAware,\n\t\tInitializingBean, DisposableBean {\n\n\tprivate final SmartValidator target;\n\n\tprivate final boolean existingBean;\n\n\tValidatorAdapter(SmartValidator target, boolean existingBean) {\n\t\tthis.target = target;\n\t\tthis.existingBean = existingBean;\n\t}\n\n\tpublic final Validator getTarget() {\n\t\treturn this.target;\n\t}\n\n\t@Override\n\tpublic boolean supports(Class<?> clazz) {\n\t\treturn this.target.supports(clazz);\n\t}\n\n\t@Override\n\tpublic void validate(Object target, Errors errors) {\n\t\tthis.target.validate(target, errors);\n\t}\n\n\t@Override\n\tpublic void validate(Object target, Errors errors, Object... validationHints) {\n\t\tthis.target.validate(target, errors, validationHints);\n\t}\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext)\n\t\t\tthrows BeansException {\n\t\tif (!this.existingBean && this.target instanceof ApplicationContextAware) {\n\t\t\t((ApplicationContextAware) this.target)\n\t\t\t\t\t.setApplicationContext(applicationContext);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void afterPropertiesSet() throws Exception {\n\t\tif (!this.existingBean && this.target instanceof InitializingBean) {\n\t\t\t((InitializingBean) this.target).afterPropertiesSet();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void destroy() throws Exception {\n\t\tif (!this.existingBean && this.target instanceof DisposableBean) {\n\t\t\t((DisposableBean) this.target).destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Return a {@link Validator} that only implements the {@link Validator} interface,\n\t * wrapping it if necessary.\n\t * <p>\n\t * If the specified {@link Validator} is not {@code null}, it is wrapped. If not, a\n\t * {@link javax.validation.Validator} is retrieved from the context and wrapped.\n\t * Otherwise, a new default validator is created.\n\t * @param applicationContext the application context\n\t * @param validator an existing validator to use or {@code null}\n\t * @return the validator to use\n\t */\n\tpublic static Validator get(ApplicationContext applicationContext,\n\t\t\tValidator validator) {\n\t\tif (validator != null) {\n\t\t\treturn wrap(validator, false);\n\t\t}\n\t\treturn getExistingOrCreate(applicationContext);\n\t}\n\n\tprivate static Validator getExistingOrCreate(ApplicationContext applicationContext) {\n\t\tValidator existing = getExisting(applicationContext);\n\t\tif (existing != null) {\n\t\t\treturn wrap(existing, true);\n\t\t}\n\t\treturn create();\n\t}\n\n\tprivate static Validator getExisting(ApplicationContext applicationContext) {\n\t\ttry {\n\t\t\tjavax.validation.Validator validator = applicationContext\n\t\t\t\t\t.getBean(javax.validation.Validator.class);\n\t\t\tif (validator instanceof Validator) {\n\t\t\t\treturn (Validator) validator;\n\t\t\t}\n\t\t\treturn new SpringValidatorAdapter(validator);\n\t\t}\n\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate static Validator create() {\n\t\tOptionalValidatorFactoryBean validator = new OptionalValidatorFactoryBean();\n\t\tvalidator.setMessageInterpolator(new MessageInterpolatorFactory().getObject());\n\t\treturn wrap(validator, false);\n\t}\n\n\tprivate static Validator wrap(Validator validator, boolean existingBean) {\n\t\tif (validator instanceof javax.validation.Validator) {\n\t\t\tif (validator instanceof SpringValidatorAdapter) {\n\t\t\t\treturn new ValidatorAdapter((SpringValidatorAdapter) validator,\n\t\t\t\t\t\texistingBean);\n\t\t\t}\n\t\t\treturn new ValidatorAdapter(\n\t\t\t\t\tnew SpringValidatorAdapter((javax.validation.Validator) validator),\n\t\t\t\t\texistingBean);\n\t\t}\n\t\treturn validator;\n\t}\n\n}<fim_middle>// class below has no smell\n"}