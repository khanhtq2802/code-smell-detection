{"text": "<fim_prefix>        java.util.BitSet incoming = iprot.readBitSet(5);\n        if (incoming.get(0)) {\n          struct.tinfo = new org.apache.accumulo.core.trace.thrift.TInfo();\n          struct.tinfo.read(iprot);\n          struct.setTinfoIsSet(true);\n        }\n        if (incoming.get(1)) {\n          struct.credentials = new org.apache.accumulo.core.securityImpl.thrift.TCredentials();\n          struct.credentials.read(iprot);\n          struct.setCredentialsIsSet(true);\n        }\n        if (incoming.get(2)) {\n          struct.principal = iprot.readString();\n          struct.setPrincipalIsSet(true);\n        }\n        if (incoming.get(3)) {\n          struct.ns = iprot.readString();\n          struct.setNsIsSet(true);\n        }\n        if (incoming.get(4)) {\n          struct.permission = iprot.readByte();\n          struct.setPermissionIsSet(true);\n        }\n      }\n    }\n    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {\n      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();\n    }\n  }\n  public static class grantNamespacePermission_result implements org.apache.thrift.TBase<grantNamespacePermission_result, grantNamespacePermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<grantNamespacePermission_result>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"grantNamespacePermission_result\");\n    private static final org.apache.thrift.protocol.TField SEC_FIELD_DESC = new org.apache.thrift.protocol.TField(\"sec\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n    private static final org.apache.thrift.protocol.TField TOPE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"tope\", org.apache.thrift.protocol.TType.STRUCT, (short)2);\n    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new grantNamespacePermission_resultStandardSchemeFactory();\n    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new grantNamespacePermission_resultTupleSchemeFactory();\n    public @org.apache.thrift.annotation.Nullable ThriftSecurityException sec; // required\n    public @org.apache.thrift.annotation.Nullable ThriftTableOperationException tope; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      SEC((short)1, \"sec\"),\n      TOPE((short)2, \"tope\");\n      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n      static {\n        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // SEC\n            return SEC;\n          case 2: // TOPE\n            return TOPE;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByName(java.lang.String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final java.lang.String _fieldName;\n      _Fields(short thriftId, java.lang.String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public java.lang.String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.SEC, new org.apache.thrift.meta_data.FieldMetaData(\"sec\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSecurityException.class)));\n      tmpMap.put(_Fields.TOPE, new org.apache.thrift.meta_data.FieldMetaData(\"tope\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftTableOperationException.class)));\n      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(grantNamespacePermission_result.class, metaDataMap);\n    }\n    public grantNamespacePermission_result() {\n    }\n    public grantNamespacePermission_result(\n      ThriftSecurityException sec,\n      ThriftTableOperationException tope)\n    {\n      this();\n      this.sec = sec;\n      this.tope = tope;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public grantNamespacePermission_result(grantNamespacePermission_result other) {\n      if (other.isSetSec()) {\n        this.sec = new ThriftSecurityException(other.sec);\n      }\n      if (other.isSetTope()) {\n        this.tope = new ThriftTableOperationException(other.tope);\n      }\n    }\n    public grantNamespacePermission_result deepCopy() {\n      return new grantNamespacePermission_result(this);\n    }\n    @Override\n    public void clear() {\n      this.sec = null;\n      this.tope = null;\n    }\n    @org.apache.thrift.annotation.Nullable\n    public ThriftSecurityException getSec() {\n      return this.sec;\n    }\n    public grantNamespacePermission_result setSec(@org.apache.thrift.annotation.Nullable ThriftSecurityException sec) {\n      this.sec = sec;\n      return this;\n    }\n    public void unsetSec() {\n      this.sec = null;\n    }\n    /** Returns true if field sec is set (has been assigned a value) and false otherwise */\n    public boolean isSetSec() {\n      return this.sec != null;\n    }\n    public void setSecIsSet(boolean value) {\n      if (!value) {\n        this.sec = null;\n      }\n    }\n    @org.apache.thrift.annotation.Nullable\n    public ThriftTableOperationException getTope() {\n      return this.tope;\n    }\n    public grantNamespacePermission_result setTope(@org.apache.thrift.annotation.Nullable ThriftTableOperationException tope) {\n      this.tope = tope;\n      return this;\n    }\n    public void unsetTope() {\n      this.tope = null;\n    }\n    /** Returns true if field tope is set (has been assigned a value) and false otherwise */\n    public boolean isSetTope() {\n      return this.tope != null;\n    }\n    public void setTopeIsSet(boolean value) {\n      if (!value) {\n        this.tope = null;\n      }\n    }\n    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {\n      switch (field) {\n      case SEC:\n        if (value == null) {\n          unsetSec();\n        } else {\n          setSec((ThriftSecurityException)value);\n        }\n        break;\n      case TOPE:\n        if (value == null) {\n          unsetTope();\n        } else {\n          setTope((ThriftTableOperationException)value);\n        }\n        break;\n      }\n    }\n<fim_suffix>    @org.apache.thrift.annotation.Nullable\n    public java.lang.Object getFieldValue(_Fields field) {\n      switch (field) {\n      case SEC:\n        return getSec();\n      case TOPE:\n        return getTope();\n      }\n      throw new java.lang.IllegalStateException();\n    }<fim_middle>// function below has no smell\n"}