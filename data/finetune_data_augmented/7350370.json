{"text": "<fim_prefix>\n<fim_suffix>public class Scanner {\n    private final List<Node> tokens;\n    private int currentPosition = 0;\n    public Scanner(final List<Node> tokens) {\n        this.tokens = tokens;\n    }\n    public NodeSelect scan() {\n        return scanSelect();\n    }\n    public void checkTail() {\n        final int num1 = currentPosition;\n        final NodeItem item1 = nextToken();\n        if ((item1 != null) && (item1.getNodeType() != NodeType.OPERATION || item1.getValue().length() != 0)) {\n            currentPosition = num1;\n            throwSyntaxError(SyntaxError.EXPECTING_END_OF_STRING);\n        }\n    }\n    private NodeSelect scanSelect() {\n        final Node node1 = ensureToken(NodeType.NAME, \"select\", SyntaxError.EXPECTING_SELECT); //$NON-NLS-1$\n        final NodeSelect select1 = new NodeSelect();\n        if (scanToken(NodeType.OPERATION, \"*\") != null) //$NON-NLS-1$\n        {\n            select1.setFields(null);\n        } else {\n            select1.setFields(scanFieldNameList(false, NodeType.FIELD_LIST));\n        }\n        while (true) {\n            if (scanToken(NodeType.NAME, \"from\") != null) //$NON-NLS-1$\n            {\n                if (select1.getFrom() != null) {\n                    --currentPosition;\n                    throwSyntaxError(SyntaxError.DUPLICATE_FROM);\n                }\n                select1.setFrom(scanTableName());\n                continue;\n            }\n            if (scanToken(NodeType.NAME, \"where\") != null) //$NON-NLS-1$\n            {\n                if (select1.getWhere() != null) {\n                    --currentPosition;\n                    throwSyntaxError(SyntaxError.DUPLICATE_WHERE);\n                }\n                select1.setWhere(scanWhere(select1.getFrom()));\n                continue;\n            }\n            if (scanToken(NodeType.NAME, \"group\") != null) //$NON-NLS-1$\n            {\n                ensureToken(NodeType.NAME, \"by\", SyntaxError.EXPECTING_BY); //$NON-NLS-1$\n                if (select1.getGroupBy() != null) {\n                    --currentPosition;\n                    throwSyntaxError(SyntaxError.DUPLICATE_GROUP_BY);\n                }\n                select1.setGroupBy(scanFieldNameList(false, NodeType.GROUP_FIELD_LIST));\n                continue;\n            }\n            if (scanToken(NodeType.NAME, \"order\") != null) //$NON-NLS-1$\n            {\n                ensureToken(NodeType.NAME, \"by\", SyntaxError.EXPECTING_BY); //$NON-NLS-1$\n                if (select1.getOrderBy() != null) {\n                    --currentPosition;\n                    throwSyntaxError(SyntaxError.DUPLICATE_ORDER_BY);\n                }\n                select1.setOrderBy(scanFieldNameList(true, NodeType.ORDER_FIELD_LIST));\n                continue;\n            }\n            if (scanToken(NodeType.NAME, \"asof\") != null) //$NON-NLS-1$\n            {\n                if (select1.getAsOf() != null) {\n                    --currentPosition;\n                    throwSyntaxError(SyntaxError.DUPLICATE_AS_OF);\n                }\n                select1.setAsOf(scanValue(select1.getFrom()));\n                continue;\n            }\n            if (scanToken(NodeType.NAME, \"mode\") != null) //$NON-NLS-1$\n            {\n                if (select1.getMode() != null) {\n                    currentPosition--;\n                    throwSyntaxError(SyntaxError.DUPLICATE_MODE);\n                }\n                select1.setMode(ScanMode());\n                continue;\n            }\n            select1.setStartOffset(node1.getStartOffset());\n            select1.setEndOffset(((NodeItem) tokens.get(tokens.size() - 1)).getEndOffset());\n            return select1;\n        }\n    }\n    private Node scanWhere(final NodeTableName table) {\n        return scanCondition4(table);\n    }\n    private Node scanCondition4(final NodeTableName table) {\n        Node node1 = scanCondition3(table);\n        NodeOrOperator operator1 = null;\n        while (true) {\n            Node node2 = scanToken(NodeType.NAME, \"or\"); //$NON-NLS-1$\n            if (node2 == null) {\n                node2 = scanToken(NodeType.OPERATION, \"||\"); //$NON-NLS-1$\n            }\n            if (node2 == null) {\n                break;\n            }\n            if (operator1 == null) {\n                operator1 = new NodeOrOperator();\n                operator1.add(node1);\n            }\n            operator1.add(scanCondition3(table));\n        }\n        if (operator1 != null) {\n            operator1.setStartOffset(operator1.getItem(0).getStartOffset());\n            operator1.setEndOffset(operator1.getItem(operator1.getCount() - 1).getEndOffset());\n            node1 = operator1;\n        }\n        return node1;\n    }\n    private Node scanCondition3(final NodeTableName table) {\n        Node node1 = scanCondition2(table);\n        NodeAndOperator operator1 = null;\n        while (true) {\n            Node node2 = scanToken(NodeType.NAME, \"and\"); //$NON-NLS-1$\n            if (node2 == null) {\n                node2 = scanToken(NodeType.OPERATION, \"&&\"); //$NON-NLS-1$\n            }\n            if (node2 == null) {\n                break;\n            }\n            if (operator1 == null) {\n                operator1 = new NodeAndOperator();\n                operator1.add(node1);\n            }\n            operator1.add(scanCondition2(table));\n        }\n        if (operator1 != null) {\n            operator1.setStartOffset(operator1.getItem(0).getStartOffset());\n            operator1.setEndOffset(operator1.getItem(operator1.getCount() - 1).getEndOffset());\n            node1 = operator1;\n        }\n        return node1;\n    }\n    private Node scanCondition2(final NodeTableName table) {\n        Node node1 = scanToken(NodeType.NAME, \"not\"); //$NON-NLS-1$\n        if (node1 == null) {\n            node1 = scanToken(NodeType.OPERATION, \"!\"); //$NON-NLS-1$\n        }\n        if (node1 != null) {\n            final Node node2 = scanCondition2(table);\n            final Node node3 = new NodeNotOperator(node2);\n            node3.setStartOffset(node1.getStartOffset());\n            node3.setEndOffset(node2.getEndOffset());\n            return node3;\n        }\n        node1 = scanToken(NodeType.NAME, \"ever\"); //$NON-NLS-1$\n        if (node1 != null) {\n            final Node node4 = scanCondition2(table);\n            final Node node5 = new NodeEverOperator(node4);\n            node5.setStartOffset(node1.getStartOffset());\n            node5.setEndOffset(node4.getEndOffset());\n            return node5;\n        }\n        node1 = scanToken(NodeType.NAME, \"never\"); //$NON-NLS-1$\n        if (node1 != null) {\n            final Node node6 = scanCondition2(table);\n            final Node node7 = new NodeNotOperator(new NodeEverOperator(node6));\n            node7.setStartOffset(node1.getStartOffset());\n            node7.setEndOffset(node6.getEndOffset());\n            return node7;\n        }\n        return scanCondition1(table);\n    }\n    private Node scanCondition1(final NodeTableName table) {\n        final Node node1 = scanToken(NodeType.OPERATION, \"(\"); //$NON-NLS-1$\n        if (node1 != null) {\n            final Node node2 = scanWhere(table);\n            final Node node3 = ensureToken(NodeType.OPERATION, \")\", SyntaxError.EXPECTING_LEFT_BRACKET); //$NON-NLS-1$\n            node2.setStartOffset(node1.getStartOffset());\n            node2.setEndOffset(node3.getEndOffset());\n            node2.setHasParantheses(true);\n            return node2;\n        }\n        final NodeCondition condition1 = new NodeCondition();\n        Node node4 = condition1;\n        condition1.setLeft(scanFieldName(table));\n        final Stack<NodeType> stack1 = new Stack<NodeType>();\n        while (true) {\n            if (scanToken(NodeType.NAME, \"not\") != null) //$NON-NLS-1$\n            {\n                stack1.push(NodeType.NOT);\n                continue;\n            }\n            if (scanToken(NodeType.NAME, \"ever\") != null) //$NON-NLS-1$\n            {\n                stack1.push(NodeType.EVER);\n                continue;\n            }\n            if (scanToken(NodeType.NAME, \"never\") != null) //$NON-NLS-1$\n            {\n                stack1.push(NodeType.NOT);\n                stack1.push(NodeType.EVER);\n                continue;\n            }\n            break;\n        }\n        while (true) {\n            if (stack1.size() <= 0) {\n                condition1.setCondition(scanConditionOperator(node4 != condition1));\n                if (condition1.getCondition() == Condition.NONE) {\n                    throwSyntaxError(SyntaxError.EXPECTING_COMPARISON_OPERATOR);\n                }\n                if (condition1.getCondition() == Condition.GROUP) {<fim_middle>// class below is blob\n"}