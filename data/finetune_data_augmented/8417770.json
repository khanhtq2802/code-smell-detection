{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.service.springboot;\n\nimport javax.annotation.Generated;\nimport org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n/**\n * Represents an endpoint which is registered to a Service Registry such as\n * Consul, Etcd.\n * \n * Generated by camel-package-maven-plugin - do not edit this file!\n */\n@Generated(\"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo\")\n@ConfigurationProperties(prefix = \"camel.component.service\")\npublic class ServiceComponentConfiguration\n        extends\n            ComponentConfigurationPropertiesCommon {\n\n    /**\n     * Whether to enable auto configuration of the service component. This is\n     * enabled by default.\n     */\n    private Boolean enabled;\n    /**\n     * Inject the service to use. The option is a\n     * org.apache.camel.cloud.ServiceRegistry type.\n     */\n    private String service;\n    /**\n     * Inject the service selector used to lookup the ServiceRegistry to use.\n     * The option is a org.apache.camel.cloud.ServiceRegistry.Selector type.\n     */\n    private String serviceSelector;\n    /**\n     * Whether the component should resolve property placeholders on itself when\n     * starting. Only properties which are of String type can use property\n     * placeholders.\n     */\n    private Boolean resolvePropertyPlaceholders = true;\n\n    public String getService() {\n        return service;\n    }\n\n    public void setService(String service) {\n        this.service = service;\n    }\n\n    public String getServiceSelector() {\n        return serviceSelector;\n    }\n\n<fim_suffix>    public void setServiceSelector(String serviceSelector) {\n        this.serviceSelector = serviceSelector;\n    }\n\n    public Boolean getResolvePropertyPlaceholders() {\n        return resolvePropertyPlaceholders;\n    }\n\n    public void setResolvePropertyPlaceholders(\n            Boolean resolvePropertyPlaceholders) {\n        this.resolvePropertyPlaceholders = resolvePropertyPlaceholders;\n    }\n}<fim_middle>// function below has no smell\n"}