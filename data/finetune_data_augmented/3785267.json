{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.accumulo.testing.performance.impl;\n\nimport java.io.BufferedReader;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\nimport org.apache.accumulo.testing.performance.Result;\n\nimport com.google.common.collect.Sets;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonStreamParser;\n\npublic class Compare {\n\n<fim_suffix>  private static class TestId {\n\n    final String testClass;\n    final String id;\n\n    public TestId(String testClass, String id) {\n      this.testClass = testClass;\n      this.id = id;\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(testClass, id);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n\n      if (obj instanceof TestId) {\n        TestId other = (TestId) obj;\n\n        return id.equals(other.id) && testClass.equals(other.testClass);\n      }\n\n      return false;\n    }\n  }\n\n  public static void main(String[] args) throws Exception {\n    Map<TestId,Double> oldResults = flatten(readReports(args[0]));\n    Map<TestId,Double> newResults = flatten(readReports(args[1]));\n\n    for (TestId testId : Sets.union(oldResults.keySet(), newResults.keySet())) {\n      Double oldResult = oldResults.get(testId);\n      Double newResult = newResults.get(testId);\n\n      if (oldResult == null || newResult == null) {\n        System.out.printf(\"%s %s %.2f %.2f\\n\", testId.testClass, testId.id, oldResult, newResult);\n      } else {\n        double change = (newResult - oldResult) / oldResult;\n        System.out.printf(\"%s %s %.2f %.2f %.2f%s\\n\", testId.testClass, testId.id, oldResult,\n            newResult, change * 100, \"%\");\n      }\n    }\n  }\n\n  static Collection<ContextualReport> readReports(String file) throws Exception {\n    try (BufferedReader reader = Files.newBufferedReader(Paths.get(file))) {\n      Gson gson = new GsonBuilder().create();\n      JsonStreamParser p = new JsonStreamParser(reader);\n      List<ContextualReport> rl = new ArrayList<>();\n\n      while (p.hasNext()) {\n        JsonElement e = p.next();\n        ContextualReport results = gson.fromJson(e, ContextualReport.class);\n        rl.add(results);\n      }\n\n      return rl;\n    }\n  }\n\n  private static Map<TestId,Double> flatten(Collection<ContextualReport> results) {\n    HashMap<TestId,Double> flattened = new HashMap<>();\n\n    for (ContextualReport cr : results) {\n      for (Result r : cr.results) {\n        if (r.purpose == Result.Purpose.COMPARISON) {\n          flattened.put(new TestId(cr.testClass, r.id), r.data.doubleValue());\n        }\n      }\n    }\n\n    return flattened;\n  }\n}<fim_middle>// class below has no smell\n"}