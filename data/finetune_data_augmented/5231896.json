{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage org.apache.oodt.cas.resource.tools;\n\n//JDK imports\nimport org.apache.oodt.cas.resource.structs.Job;\nimport org.apache.oodt.cas.resource.structs.JobInput;\nimport org.apache.oodt.cas.resource.structs.JobSpec;\nimport org.apache.oodt.cas.resource.structs.NameValueJobInput;\nimport org.apache.oodt.cas.resource.structs.exceptions.JobExecutionException;\nimport org.apache.oodt.cas.resource.system.XmlRpcResourceManagerClient;\nimport org.apache.oodt.cas.resource.util.JobBuilder;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n//OODT imports\n\n/**\n * @author cecilia\n * @version $Revision$\n * \n * <p>\n * A tool that creates a job and send it to the Resource Manager. The list of\n * jobs created has a 1-to-1 correspondence to the list of directory names\n * </p>.\n */\n<fim_suffix>public final class RunDirJobSubmitter {\n\n    /* our log stream */\n    private static final Logger LOG = Logger.getLogger(RunDirJobSubmitter.class\n            .getName());\n\n    /* our res mgr client */\n    private XmlRpcResourceManagerClient client = null;\n\n    public RunDirJobSubmitter(URL rUrl) {\n        client = new XmlRpcResourceManagerClient(rUrl);\n    }\n\n    public void submitRunDirJobFile(String jobFname, String inputFname)\n            throws JobExecutionException {\n\n        // -------------------------------------------------------------\n        // check validity of given job filename and input filename\n        // -------------------------------------------------------------\n\n        File jobFile = new File(jobFname);\n        if (!jobFile.exists()) {\n            // file doesn't exist\n            throw new JobExecutionException(\"RunDirJobSubmitter: input file \"\n                    + jobFname + \" does not exist.\");\n        } else if (!jobFile.isFile()) {\n            // file is a directory\n            throw new JobExecutionException(\"RunDirJobSubmitter: input file \"\n                    + jobFname + \" is not a file.\");\n        }\n\n        File f = new File(inputFname);\n        if (!f.exists()) {\n            // file doesn't exist\n            throw new JobExecutionException(\"RunDirJobSubmitter: input file \"\n                    + inputFname + \" does not exist.\");\n        } else if (!f.isFile()) {\n            // file is a directory\n            throw new JobExecutionException(\"RunDirJobSubmitter: input file \"\n                    + inputFname + \" is not a file.\");\n        }\n\n        // ----------------------------------------------------------------\n        // create a default JobSpec\n        // ----------------------------------------------------------------\n        JobSpec spec = JobBuilder.buildJobSpec(jobFile.getAbsolutePath());\n        Job job = spec.getJob();\n        NameValueJobInput jobInput = (NameValueJobInput) spec.getIn();\n\n        // ----------------------------------------------------------------\n        // open the file to read. traverse through the list of directories\n        // name given & override the default Job's runDirName value with the\n        // directory name. then submit the Job.\n        // ----------------------------------------------------------------\n\n        try {\n            BufferedReader in = new BufferedReader(new FileReader(inputFname));\n            if (!in.ready()) {\n                throw new IOException();\n            }\n\n            String line;\n            String jobId;\n            while ((line = in.readLine()) != null) {\n\n                // overwrite the runDirName\n                jobInput.setNameValuePair(\"runDirName\", line);\n\n                jobId = submitJob(job, jobInput);\n                LOG.log(Level.INFO, \"Job Submitted: id: [\" + jobId + \"]\");\n            }\n\n            in.close();\n        } catch (IOException e) {\n            throw new JobExecutionException(\"RunDirJobSubmitter: \" + e);\n        }\n\n    }\n\n    public static void main(String[] args) throws JobExecutionException, MalformedURLException {\n        String resMgrUrlStr = null;\n        String jobFileName = null;\n        String runDirFileName = null;\n\n        String usage = \"RunDirJobSubmitter --rUrl <resource mgr url> \"\n                + \"--jobFile <input job file> \"\n                + \"--runDirFile <input running directories file> \\n\";\n\n        for (int i = 0; i < args.length; i++) {\n            if (args[i].equals(\"--rUrl\")) {\n                resMgrUrlStr = args[++i];\n            } else if (args[i].equals(\"--jobFile\")) {\n                jobFileName = args[++i];\n            } else if (args[i].equals(\"--runDirFile\")) {\n                runDirFileName = args[++i];\n            }\n        }\n\n        if (resMgrUrlStr == null || jobFileName == null\n                || runDirFileName == null) {\n            System.err.println(usage);\n            System.exit(1);\n        }\n\n        RunDirJobSubmitter submitter = new RunDirJobSubmitter(new URL(\n                resMgrUrlStr));\n        submitter.submitRunDirJobFile(jobFileName, runDirFileName);\n    }\n\n    private String submitJob(Job job, JobInput jobInput)\n            throws JobExecutionException {\n        return client.submitJob(job, jobInput);\n    }\n\n}<fim_middle>// class below has no smell\n"}