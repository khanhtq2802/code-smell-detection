{"text": "<fim_prefix>/* Copyright (c) IBM Corporation 2018. All Rights Reserved.\n * Project name: Object Generator\n * This project is licensed under the Apache License 2.0, see LICENSE.\n */\n\npackage com.ibm.og.cli;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableSortedMap;\nimport com.ibm.og.api.Operation;\nimport com.ibm.og.statistic.Counter;\nimport com.ibm.og.statistic.Statistics;\nimport com.ibm.og.util.Pair;\nimport com.ibm.og.util.SizeUnit;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\n\npublic class OperationStats {\n  final transient Operation operation;\n  final long operations;\n  final long bytes;\n  final transient long latencies;\n  double averageLatency = 0.0;\n  final Map<Integer, Long> statusCodes;\n  transient double  runtime;\n\n  public OperationStats(final Statistics stats, final Operation operation, long timestampStart, long timestampFinish) {\n    this.operation = operation;\n    this.operations = stats.get(operation, Counter.OPERATIONS);\n    this.bytes = stats.get(operation, Counter.BYTES);\n    this.latencies = stats.get(operation, Counter.LATENCY);\n    this.statusCodes = ImmutableSortedMap.copyOf(stats.statusCodes(operation));\n    this.runtime = ((double) (timestampFinish - timestampStart)) / TimeUnit.SECONDS.toMillis(1);\n    if (this.operations > 0) {\n      this.averageLatency = (double) this.latencies / this.operations;\n    }\n  }\n\n<fim_suffix>  public OperationStats(final Operation operation, final long operations, final long bytes, final long latencies,\n                        final Map<Integer, Long> statusCodes, long timestampStart, long timestampFinish) {\n    this.operation = operation;\n    this.operations = operations;\n    this.bytes = bytes;\n    this.latencies = latencies;\n    this.statusCodes = ImmutableSortedMap.copyOf(statusCodes);\n    if (this.operations > 0) {\n      double average = (double) this.latencies / this.operations;\n      this.averageLatency = Math.round(average * 100.00) / 100.00;\n    }\n    this.runtime = ((double) (timestampFinish - timestampStart)) / TimeUnit.SECONDS.toMillis(1);\n  }\n\n  @Override\n  public String toString() {\n    return String.format(\n            \"[%s]%n\" + \"Operations: %s%n\" + \"%s%n\" + \"%s%n\" + \"%s%n\" + \"%s%n\" +  \"Status Codes:%n%s%n\",\n            this.operation, this.operations, formatBytes(), formatThroughput(), formatOPS(), formatAverageLatency(),\n            formatStatusCodes());\n  }\n\n  // determine whether to display byte total in gb, mb, kb or bytes\n  private String formatBytes() {\n    final Pair<Double, SizeUnit> displaySize = displaySize(this.bytes);\n    String displayUnit = displaySize.getValue().toString().toLowerCase();\n    // capitalize\n    displayUnit = displayUnit.substring(0, 1).toUpperCase() + displayUnit.substring(1);\n    return String.format(\"%s: %.2f\", displayUnit, displaySize.getKey());\n  }\n\n  private String formatThroughput() {\n    //TODO : fix this\n    final double bytesPerSecond = (double)this.bytes / this.runtime;\n    final Pair<Double, SizeUnit> displaySize = displaySize(bytesPerSecond);\n    String displayUnit;\n    if (displaySize.getValue() != SizeUnit.BYTES) {\n      displayUnit = String.format(\"%sB/s\", displaySize.getValue().toString().substring(0, 1));\n    } else {\n      displayUnit = \"B/s\";\n    }\n    return String.format(\"Throughput: %.2f %s\", displaySize.getKey(), displayUnit);\n  }\n\n  private String formatOPS() {\n    final double operationsPerSecond = (double) this.operations / this.runtime;\n    return String.format(\"OPS: %.2f\", operationsPerSecond);\n  }\n\n  private String formatAverageLatency() {\n    double averageLatency = 0.0;\n    if (this.operations > 0) {\n      averageLatency = (double)this.latencies / this.operations;\n    }\n    return String.format(\"Avg Latency: %.2f %s\", averageLatency, \"ms\");\n  }\n\n  private String formatStatusCodes() {\n    if (this.statusCodes.isEmpty()) {\n      return String.format(\"N/A%n\");\n    }\n\n    final StringBuilder s = new StringBuilder();\n    for (final Map.Entry<Integer, Long> sc : this.statusCodes.entrySet()) {\n      s.append(String.format(\"%s: %s%n\", sc.getKey(), sc.getValue()));\n    }\n    return s.toString();\n  }\n\n  private Pair<Double, SizeUnit> displaySize(final double bytes) {\n    final List<SizeUnit> units = ImmutableList.of(SizeUnit.TERABYTES, SizeUnit.GIGABYTES,\n            SizeUnit.MEGABYTES, SizeUnit.KILOBYTES);\n    for (final SizeUnit unit : units) {\n      final double size = bytes / unit.toBytes(1);\n      if (size >= 1.0) {\n        return Pair.of(size, unit);\n      }\n    }\n    return Pair.of(bytes, SizeUnit.BYTES);\n  }\n}<fim_middle>// function below has no smell\n"}