{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.yarn.api.protocolrecords.impl.pb;\n\n\nimport org.apache.hadoop.classification.InterfaceAudience.Private;\nimport org.apache.hadoop.classification.InterfaceStability.Unstable;\nimport org.apache.hadoop.yarn.api.pb.PlacementConstraintFromProtoConverter;\nimport org.apache.hadoop.yarn.api.pb.PlacementConstraintToProtoConverter;\nimport org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterRequest;\n\nimport org.apache.hadoop.yarn.api.resource.PlacementConstraint;\nimport org.apache.hadoop.yarn.proto.YarnProtos;\nimport org.apache.hadoop.yarn.proto.YarnServiceProtos.RegisterApplicationMasterRequestProto;\nimport org.apache.hadoop.yarn.proto.YarnServiceProtos.RegisterApplicationMasterRequestProtoOrBuilder;\n\nimport com.google.protobuf.TextFormat;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n@Private\n@Unstable\npublic class RegisterApplicationMasterRequestPBImpl\n    extends RegisterApplicationMasterRequest {\n  private RegisterApplicationMasterRequestProto proto =\n      RegisterApplicationMasterRequestProto.getDefaultInstance();\n  private RegisterApplicationMasterRequestProto.Builder builder = null;\n  private Map<Set<String>, PlacementConstraint> placementConstraints = null;\n  boolean viaProto = false;\n  \n  public RegisterApplicationMasterRequestPBImpl() {\n    builder = RegisterApplicationMasterRequestProto.newBuilder();\n  }\n\n  public RegisterApplicationMasterRequestPBImpl(\n      RegisterApplicationMasterRequestProto proto) {\n    this.proto = proto;\n    viaProto = true;\n  }\n  \n  public RegisterApplicationMasterRequestProto getProto() {\n      mergeLocalToProto();\n    proto = viaProto ? proto : builder.build();\n    viaProto = true;\n    return proto;\n  }\n\n  @Override\n  public int hashCode() {\n    return getProto().hashCode();\n  }\n\n<fim_suffix>  @Override\n  public boolean equals(Object other) {\n    if (other == null)\n      return false;\n    if (other.getClass().isAssignableFrom(this.getClass())) {\n      return this.getProto().equals(this.getClass().cast(other).getProto());\n    }\n    return false;\n  }\n\n  @Override\n  public String toString() {\n    return TextFormat.shortDebugString(getProto());\n  }\n\n  private void mergeLocalToBuilder() {\n    if (this.placementConstraints != null) {\n      addPlacementConstraintMap();\n    }\n  }\n\n  private void addPlacementConstraintMap() {\n    maybeInitBuilder();\n    builder.clearPlacementConstraints();\n    if (this.placementConstraints == null) {\n      return;\n    }\n    List<YarnProtos.PlacementConstraintMapEntryProto> protoList =\n        new ArrayList<>();\n    for (Map.Entry<Set<String>, PlacementConstraint> entry :\n        this.placementConstraints.entrySet()) {\n      protoList.add(\n          YarnProtos.PlacementConstraintMapEntryProto.newBuilder()\n              .addAllAllocationTags(entry.getKey())\n              .setPlacementConstraint(\n                  new PlacementConstraintToProtoConverter(\n                      entry.getValue()).convert())\n              .build());\n    }\n    builder.addAllPlacementConstraints(protoList);\n  }\n\n  private void mergeLocalToProto() {\n    if (viaProto) \n      maybeInitBuilder();\n    mergeLocalToBuilder();\n    proto = builder.build();\n    viaProto = true;\n  }\n\n  private void maybeInitBuilder() {\n    if (viaProto || builder == null) {\n      builder = RegisterApplicationMasterRequestProto.newBuilder(proto);\n    }\n    viaProto = false;\n  }\n\n  @Override\n  public String getHost() {\n    RegisterApplicationMasterRequestProtoOrBuilder p =\n        viaProto ? proto : builder;\n    return p.getHost();\n  }\n\n  @Override\n  public void setHost(String host) {\n    maybeInitBuilder();\n    if (host == null) {\n      builder.clearHost();\n      return;\n    }\n    builder.setHost(host);\n  }\n\n  @Override\n  public int getRpcPort() {\n    RegisterApplicationMasterRequestProtoOrBuilder p =\n        viaProto ? proto : builder;\n    return p.getRpcPort();\n  }\n\n  @Override\n  public void setRpcPort(int port) {\n    maybeInitBuilder();\n    builder.setRpcPort(port);\n  }\n\n  @Override\n  public String getTrackingUrl() {\n    RegisterApplicationMasterRequestProtoOrBuilder p =\n        viaProto ? proto : builder;\n    return p.getTrackingUrl();\n  }\n\n  @Override\n  public void setTrackingUrl(String url) {\n    maybeInitBuilder();\n    if (url == null) {\n      builder.clearTrackingUrl();\n      return;\n    }\n    builder.setTrackingUrl(url);\n  }\n\n  private void initPlacementConstraintMap() {\n    if (this.placementConstraints != null) {\n      return;\n    }\n    RegisterApplicationMasterRequestProtoOrBuilder p =\n        viaProto ? proto : builder;\n    List<YarnProtos.PlacementConstraintMapEntryProto> pcmList =\n        p.getPlacementConstraintsList();\n    this.placementConstraints = new HashMap<>();\n    for (YarnProtos.PlacementConstraintMapEntryProto e : pcmList) {\n      this.placementConstraints.put(\n          new HashSet<>(e.getAllocationTagsList()),\n          new PlacementConstraintFromProtoConverter(\n              e.getPlacementConstraint()).convert());\n    }\n  }\n\n  @Override\n  public Map<Set<String>, PlacementConstraint> getPlacementConstraints() {\n    initPlacementConstraintMap();\n    return this.placementConstraints;\n  }\n\n  @Override\n  public void setPlacementConstraints(\n      Map<Set<String>, PlacementConstraint> constraints) {\n    maybeInitBuilder();\n    if (constraints == null) {\n      builder.clearPlacementConstraints();\n    } else {\n      removeEmptyKeys(constraints);\n    }\n    this.placementConstraints = constraints;\n  }\n\n  private void removeEmptyKeys(\n      Map<Set<String>, PlacementConstraint> constraintMap) {\n    Iterator<Set<String>> iter = constraintMap.keySet().iterator();\n    while (iter.hasNext()) {\n      Set<String> aTags = iter.next();\n      if (aTags.size() == 0) {\n        iter.remove();\n      }\n    }\n  }\n}<fim_middle>// function below has no smell\n"}