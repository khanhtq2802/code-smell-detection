{"text": "<fim_prefix>\t * \n\t * @param slotId\n\t *            the index of the slot where the cell resides\n\t * @param rowId\n\t *            the 0-based row index\n\t * @param cell\n\t *            the cell element to find\n\t * @return the 1-based column position\n\t */\n\tpublic int getColumnPos( int slotId, int rowId, Cell cell )\n\t{\n\t\tassert slotId == IListingElementModel.DETAIL_SLOT\n\t\t\t\t|| slotId == IListingElementModel.HEADER_SLOT\n\t\t\t\t|| slotId == IListingElementModel.FOOTER_SLOT;\n\t\tLayoutSlot slot = getSimpleSlot( slotId );\n\t\tint colPosn = slot.getColumnPos( rowId, cell );\n\t\tif ( colPosn != 0 )\n\t\t\treturn colPosn;\n\t\treturn getOverlappedColumnPos( cell );\n\t}\n\t/**\n\t * Finds the column position for a cell of which areas is occupied by other\n\t * cell elements.\n\t * \n\t * @param cell\n\t *            the cell element\n\t * @return 1-based column position\n\t */\n\tprivate int getOverlappedColumnPos( Cell cell )\n\t{\n\t\tfor ( int i = 0; i < overlappedCells.size( ); i++ )\n\t\t{\n\t\t\tOverlappedArea overlappedCell = (OverlappedArea) overlappedCells\n\t\t\t\t\t.get( i );\n\t\t\tif ( overlappedCell.getCell( ) == cell )\n\t\t\t{\n\t\t\t\tassert overlappedCell.getRowSpanOffset( ) == 0;\n\t\t\t\tassert overlappedCell.getColSpanOffset( ) == 0;\n\t\t\t\treturn overlappedCell.colPosn;\n\t\t\t}\n\t\t}\n\t\t// assert false;\n\t\treturn 0;\n\t}\n\t/**\n\t * Return the column position for a given cell. Uses this method to find\n\t * cells in Group Header and Footer slots.\n\t * \n\t * @param groupLevel\n\t *            the group level\n\t * @param slotId\n\t *            the index of the slot where the cell resides\n\t * @param rowId\n\t *            the 0-based row index\n\t * @param cell\n\t *            the cell element to find\n\t * @return the 1-based column position\n\t */\n\tpublic int getColumnPos( int groupLevel, int slotId, int rowId, Cell cell )\n\t{\n\t\tLayoutGroupBand groupSlot = getComplexSlot( slotId );\n\t\tLayoutSlot slot = groupSlot.getLayoutSlotWithGroupLevel( groupLevel );\n\t\tint colPosn = slot.getColumnPos( rowId, cell );\n\t\tif ( colPosn != 0 )\n\t\t\treturn colPosn;\n\t\treturn getOverlappedColumnPos( cell );\n\t}\n\t/**\n\t * Returns the slot with the given slot index.\n\t * \n\t * @param slotId\n\t *            the slot index\n\t * @return the layout slot.\n\t */\n\tpublic LayoutSlot getLayoutSlot( int slotId )\n\t{\n\t\tassert slotId == IListingElementModel.DETAIL_SLOT\n\t\t\t\t|| slotId == IListingElementModel.HEADER_SLOT\n\t\t\t\t|| slotId == IListingElementModel.FOOTER_SLOT;\n\t\treturn getSimpleSlot( slotId );\n\t}\n\t/**\n\t * Returns the slot with the given slot index and the group level.\n\t * \n\t * @param groupLevel\n\t *            the 1-based group level\n\t * @param slotId\n\t *            the slot index\n\t * @return the layout slot.\n\t */\n\tpublic LayoutSlot getLayoutSlot( int groupLevel, int slotId )\n\t{\n\t\tassert groupLevel > 0;\n\t\tif ( slotId > groupSlots.length )\n\t\t\treturn null;\n\t\treturn getComplexSlot( slotId )\n\t\t\t\t.getLayoutSlotWithGroupLevel( groupLevel );\n\t}\n\t/**\n\t * Returns the slot with the given index. Used this method to get Table\n\t * Header, Detail and Footer slots.\n\t * \n\t * @param slotId\n\t *            the slot index\n\t * @return the slot\n\t */\n\tprivate LayoutSlot getSimpleSlot( int slotId )\n\t{\n\t\tLayoutSlot slot = (LayoutSlot) tableSlots[slotId];\n\t\tif ( slot == null )\n\t\t{\n\t\t\tslot = new LayoutSlot( this, getColumnCount( ) );\n\t\t\ttableSlots[slotId] = slot;\n\t\t}\n\t\treturn slot;\n\t}\n\t/**\n\t * Returns the header slot.\n\t * \n\t * @return the header slot\n\t */\n\tpublic LayoutSlot getHeader( )\n\t{\n\t\treturn getSimpleSlot( IListingElementModel.HEADER_SLOT );\n\t}\n\t/**\n\t * Returns the detail slot.\n\t * \n\t * @return the detail slot\n\t */\n\tpublic LayoutSlot getDetail( )\n\t{\n\t\treturn getSimpleSlot( IListingElementModel.DETAIL_SLOT );\n\t}\n\t/**\n\t * Returns the footer slot.\n\t * \n\t * @return the footer slot\n\t */\n\tpublic LayoutSlot getFooter( )\n\t{\n\t\treturn getSimpleSlot( IListingElementModel.FOOTER_SLOT );\n\t}\n\t/**\n\t * Returns the layout group with the given group level.\n\t * \n\t * @param groupLevel\n\t *            the 1-based group level\n\t * \n\t * @return the layout group\n\t */\n\tpublic LayoutGroup getLayoutGroup( int groupLevel )\n\t{\n\t\tif ( groupLevel < 1 || groupLevel > getGroupCount( ) )\n\t\t\treturn null;\n\t\treturn new LayoutGroup( this, groupLevel );\n\t}\n\t/**\n\t * Returns the count of the group in the table.\n\t * \n\t * @return the count of the group\n\t */\n\tprotected int getGroupCount( )\n\t{\n\t\treturn table.getGroups( ).size( );\n\t}\n\t/**\n\t * Returns the slot with the given index. Used this method to get Group\n\t * Header and Footer slots.\n\t * \n\t * @param slotId\n\t *            the slot index\n\t * @return the slot\n\t */\n\tprivate LayoutGroupBand getComplexSlot( int slotId )\n\t{\n\t\tLayoutGroupBand slot = (LayoutGroupBand) groupSlots[slotId];\n\t\tif ( slot == null )\n\t\t{\n\t\t\tslot = new LayoutGroupBand( this, getColumnCount( ) );\n\t\t\tgroupSlots[slotId] = slot;\n\t\t}\n\t\treturn slot;\n\t}\n\t/**\n\t * Returns the group header slot.\n\t * \n\t * @return the group header slot\n\t */\n\tprotected LayoutGroupBand getGroupHeaders( )\n\t{\n\t\treturn getComplexSlot( IGroupElementModel.HEADER_SLOT );\n\t}\n\t/**\n\t * Returns the group footer slot.\n\t * \n\t * @return the group footer slot\n\t */\n\tprotected LayoutGroupBand getGroupFooters( )\n\t{\n\t\treturn getComplexSlot( IGroupElementModel.FOOTER_SLOT );\n\t}\n\t/**\n\t * Updates the column count of the table.\n\t * \n\t * @return the column count\n\t */\n\tprivate int refreshColumnCount( )\n\t{\n\t\tint columnCount = 0;\n\t\tfor ( int i = 0; i < tableSlots.length; i++ )\n\t\t{\n\t\t\tif ( tableSlots[i] == null )\n\t\t\t\tcontinue;\n\t\t\tint tmpCount = tableSlots[i].getColumnCount( );\n\t\t\tif ( tmpCount > columnCount )\n\t\t\t\tcolumnCount = tmpCount;\n\t\t}\n\t\tfor ( int i = 0; i < groupSlots.length; i++ )\n\t\t{\n\t\t\tif ( groupSlots[i] == null )\n\t\t\t\tcontinue;\n\t\t\tint tmpCount = groupSlots[i].getColumnCount( );\n\t\t\tif ( tmpCount > columnCount )\n\t\t\t\tcolumnCount = tmpCount;\n\t\t}\n\t\treturn columnCount;\n\t}\n\t/**\n\t * Returns the string that shows the layout. Mainly for the debug.\n\t * \n\t * @return the string that shows the layout\n\t */\n<fim_suffix>\tpublic String getLayoutString( )\n\t{\n\t\tStringBuffer sb = new StringBuffer( );\n\t\tsb.append( \"table \" + table.getFullName( ) + \" layout: \\r\\n\" ); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tsb.append( getHeader( ).getLayoutString( ) );\n\t\tsb.append( getGroupHeaders( ).getLayoutString( ) );\n\t\tsb.append( getDetail( ).getLayoutString( ) );\n\t\tsb.append( getGroupFooters( ).getLayoutString( ) );\n\t\tsb.append( getFooter( ).getLayoutString( ) );\n\t\tsb.append( \"\\r\\n\" ); //$NON-NLS-1$\n\t\treturn sb.toString( );\n\t}<fim_middle>// function below has no smell\n"}