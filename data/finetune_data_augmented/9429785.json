{"text": "<fim_prefix>\n<fim_suffix>@SuppressWarnings(\"serial\")\npublic class ConnectDialog extends InternalDialog\n                implements DocumentListener, FocusListener,\n                           ItemListener, ListSelectionListener, KeyListener {\n    private static final int COL_NAME = 0;\n    private static final int COL_PID  = 1;\n    JConsole jConsole;\n    JTextField userNameTF, passwordTF;\n    JRadioButton localRadioButton, remoteRadioButton;\n    JLabel localMessageLabel, remoteMessageLabel;\n    JTextField remoteTF;\n    JButton connectButton, cancelButton;\n    JPanel radioButtonPanel;\n    private Icon mastheadIcon =\n        new MastheadIcon(Messages.CONNECT_DIALOG_MASTHEAD_TITLE);\n    private Color hintTextColor, disabledTableCellColor;\n    // The table of managed VM (local process)\n    JTable vmTable;\n    ManagedVmTableModel vmModel = null;\n    JScrollPane localTableScrollPane = null;\n    private Action connectAction, cancelAction;\n    public ConnectDialog(JConsole jConsole) {\n        super(jConsole, Messages.CONNECT_DIALOG_TITLE, true);\n        this.jConsole = jConsole;\n        setAccessibleDescription(this,\n                                 Messages.CONNECT_DIALOG_ACCESSIBLE_DESCRIPTION);\n        setDefaultCloseOperation(HIDE_ON_CLOSE);\n        setResizable(false);\n        Container cp = (JComponent)getContentPane();\n        radioButtonPanel = new JPanel(new BorderLayout(0, 12));\n        radioButtonPanel.setBorder(new EmptyBorder(6, 12, 12, 12));\n        ButtonGroup radioButtonGroup = new ButtonGroup();\n        JPanel bottomPanel = new JPanel(new BorderLayout());\n        statusBar = new JLabel(\" \", JLabel.CENTER);\n        setAccessibleName(statusBar,\n                          Messages.CONNECT_DIALOG_STATUS_BAR_ACCESSIBLE_NAME);\n        Font normalLabelFont = statusBar.getFont();\n        Font boldLabelFont = normalLabelFont.deriveFont(Font.BOLD);\n        Font smallLabelFont = normalLabelFont.deriveFont(normalLabelFont.getSize2D() - 1);\n        JLabel mastheadLabel = new JLabel(mastheadIcon);\n        setAccessibleName(mastheadLabel,\n                          Messages.CONNECT_DIALOG_MASTHEAD_ACCESSIBLE_NAME);\n        cp.add(mastheadLabel, NORTH);\n        cp.add(radioButtonPanel, CENTER);\n        cp.add(bottomPanel, SOUTH);\n        createActions();\n        remoteTF = new JTextField();\n        remoteTF.addActionListener(connectAction);\n        remoteTF.getDocument().addDocumentListener(this);\n        remoteTF.addFocusListener(this);\n        remoteTF.setPreferredSize(remoteTF.getPreferredSize());\n        setAccessibleName(remoteTF,\n                          Messages.REMOTE_PROCESS_TEXT_FIELD_ACCESSIBLE_NAME);\n        //\n        // If the VM supports the local attach mechanism (is: Sun\n        // implementation) then the Local Process panel is created.\n        //\n        if (JConsole.isLocalAttachAvailable()) {\n            vmModel = new ManagedVmTableModel();\n            vmTable = new LocalTabJTable(vmModel);\n            vmTable.setSelectionMode(SINGLE_SELECTION);\n            vmTable.setPreferredScrollableViewportSize(new Dimension(400, 250));\n            vmTable.setColumnSelectionAllowed(false);\n            vmTable.addFocusListener(this);\n            vmTable.getSelectionModel().addListSelectionListener(this);\n            TableColumnModel columnModel = vmTable.getColumnModel();\n            TableColumn pidColumn = columnModel.getColumn(COL_PID);\n            pidColumn.setMaxWidth(getLabelWidth(\"9999999\"));\n            pidColumn.setResizable(false);\n            TableColumn cmdLineColumn = columnModel.getColumn(COL_NAME);\n            cmdLineColumn.setResizable(false);\n            localRadioButton = new JRadioButton(Messages.LOCAL_PROCESS_COLON);\n            localRadioButton.setMnemonic(Resources.getMnemonicInt(Messages.LOCAL_PROCESS_COLON));\n            localRadioButton.setFont(boldLabelFont);\n            localRadioButton.addItemListener(this);\n            radioButtonGroup.add(localRadioButton);\n            JPanel localPanel = new JPanel(new BorderLayout());\n            JPanel localTablePanel = new JPanel(new BorderLayout());\n            radioButtonPanel.add(localPanel, NORTH);\n            localPanel.add(localRadioButton, NORTH);\n            localPanel.add(new Padder(localRadioButton), LINE_START);\n            localPanel.add(localTablePanel, CENTER);\n            localTableScrollPane = new JScrollPane(vmTable);\n            localTablePanel.add(localTableScrollPane, NORTH);\n            localMessageLabel = new JLabel(\" \");\n            localMessageLabel.setFont(smallLabelFont);\n            localMessageLabel.setForeground(hintTextColor);\n            localTablePanel.add(localMessageLabel, SOUTH);\n        }\n        remoteRadioButton = new JRadioButton(Messages.REMOTE_PROCESS_COLON);\n        remoteRadioButton.setMnemonic(Resources.getMnemonicInt(Messages.REMOTE_PROCESS_COLON));\n        remoteRadioButton.setFont(boldLabelFont);\n        radioButtonGroup.add(remoteRadioButton);\n        JPanel remotePanel = new JPanel(new BorderLayout());\n        if (localRadioButton != null) {\n            remotePanel.add(remoteRadioButton, NORTH);\n            remotePanel.add(new Padder(remoteRadioButton), LINE_START);\n            Action nextRadioButtonAction =\n                new AbstractAction(\"nextRadioButton\") {\n                    public void actionPerformed(ActionEvent ev) {\n                        JRadioButton rb =\n                            (ev.getSource() == localRadioButton) ? remoteRadioButton\n                                                                 : localRadioButton;\n                        rb.doClick();\n                        rb.requestFocus();\n                    }\n                };\n            localRadioButton.getActionMap().put(\"nextRadioButton\", nextRadioButtonAction);\n            remoteRadioButton.getActionMap().put(\"nextRadioButton\", nextRadioButtonAction);\n            localRadioButton.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0),\n                                               \"nextRadioButton\");\n            remoteRadioButton.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0),\n                                                \"nextRadioButton\");\n        } else {\n            JLabel remoteLabel = new JLabel(remoteRadioButton.getText());\n            remoteLabel.setFont(boldLabelFont);\n            remotePanel.add(remoteLabel, NORTH);\n        }\n        radioButtonPanel.add(remotePanel, SOUTH);\n        JPanel remoteTFPanel = new JPanel(new BorderLayout());\n        remotePanel.add(remoteTFPanel, CENTER);\n        remoteTFPanel.add(remoteTF, NORTH);\n        remoteMessageLabel = new JLabel(\"<html>\" + Messages.REMOTE_TF_USAGE + \"</html>\");\n        remoteMessageLabel.setFont(smallLabelFont);\n        remoteMessageLabel.setForeground(hintTextColor);\n        remoteTFPanel.add(remoteMessageLabel, CENTER);\n        JPanel userPwdPanel = new JPanel(new FlowLayout(FlowLayout.LEADING, 0, 0));\n        userPwdPanel.setBorder(new EmptyBorder(12, 0, 0, 0)); // top padding\n        int tfWidth = JConsole.IS_WIN ? 12 : 8;\n        userNameTF = new JTextField(tfWidth);\n        userNameTF.addActionListener(connectAction);\n        userNameTF.getDocument().addDocumentListener(this);\n        userNameTF.addFocusListener(this);\n        setAccessibleName(userNameTF,\n            Messages.USERNAME_ACCESSIBLE_NAME);\n        LabeledComponent lc;\n        lc = new LabeledComponent(Messages.USERNAME_COLON_,\n                                  Resources.getMnemonicInt(Messages.USERNAME_COLON_),\n                                  userNameTF);\n        lc.label.setFont(boldLabelFont);\n        userPwdPanel.add(lc);\n        passwordTF = new JPasswordField(tfWidth);\n        // Heights differ, so fix here\n        passwordTF.setPreferredSize(userNameTF.getPreferredSize());\n        passwordTF.addActionListener(connectAction);\n        passwordTF.getDocument().addDocumentListener(this);\n        passwordTF.addFocusListener(this);\n        setAccessibleName(passwordTF,\n            Messages.PASSWORD_ACCESSIBLE_NAME);\n        lc = new LabeledComponent(Messages.PASSWORD_COLON_,\n                                  Resources.getMnemonicInt(Messages.PASSWORD_COLON_),\n                                  passwordTF);\n        lc.setBorder(new EmptyBorder(0, 12, 0, 0)); // Left padding\n        lc.label.setFont(boldLabelFont);\n        userPwdPanel.add(lc);\n        remoteTFPanel.add(userPwdPanel, SOUTH);\n        String connectButtonToolTipText =\n            Messages.CONNECT_DIALOG_CONNECT_BUTTON_TOOLTIP;\n        connectButton = new JButton(connectAction);\n        connectButton.setToolTipText(connectButtonToolTipText);\n        cancelButton = new JButton(cancelAction);\n        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.TRAILING));\n        buttonPanel.setBorder(new EmptyBorder(12, 12, 2, 12));\n        if (JConsole.IS_GTK) {\n            buttonPanel.add(cancelButton);\n            buttonPanel.add(connectButton);\n        } else {\n            buttonPanel.add(connectButton);\n            buttonPanel.add(cancelButton);\n        }\n        bottomPanel.add(buttonPanel, NORTH);\n        bottomPanel.add(statusBar, SOUTH);\n        updateButtonStates();\n        Utilities.updateTransparency(this);\n    }\n    public void revalidate() {\n        // Adjust some colors<fim_middle>// class below is blob\n"}