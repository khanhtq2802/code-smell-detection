{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.util.ipc;\n\nimport java.io.Closeable;\nimport org.apache.ignite.IgniteCheckedException;\nimport org.jetbrains.annotations.Nullable;\n\n/**\n * IPC server endpoint that is capable for client connections accepting.\n */\n<fim_suffix>public interface IpcServerEndpoint extends Closeable {\n    /**\n     * Accepts client IPC connection. After client connection is accepted, it can be used\n     * for IPC. This method will block until client connects to IPC server endpoint.\n     *\n     * @return Accepted client connection.\n     * @throws IgniteCheckedException If accept failed and the endpoint is not usable anymore.\n     */\n    public IpcEndpoint accept() throws IgniteCheckedException;\n\n    /**\n     * Starts configured endpoint implementation.\n     *\n     * @throws IgniteCheckedException If failed to start server endpoint.\n     */\n    public void start() throws IgniteCheckedException;\n\n    /**\n     * Closes server IPC. After IPC is closed, no further operations can be performed on this\n     * object.\n     */\n    @Override public void close();\n\n    /**\n     * Gets port endpoint is bound to.\n     * Endpoints who does not bind to any port should return -1.\n     *\n     * @return Port number.\n     */\n    public int getPort();\n\n    /**\n     * Gets host endpoint is bound to.\n     * Endpoints who does not bind to any port should return {@code null}.\n     *\n     * @return Host.\n     */\n    @Nullable public String getHost();\n\n    /**\n     * Indicates if this endpoint is a management endpoint.\n     *\n     * @return {@code true} if it's a management endpoint.\n     */\n    public boolean isManagement();\n}<fim_middle>// class below has no smell\n"}