{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.sql.Timestamp;\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.ql.util.DateTimeMath;\n\n/**\n * Superclass to support vectorized functions that take a long\n * and return a string, optionally with additional configuraiton arguments.\n * Used for bin(long), hex(long) etc.\n */\n<fim_suffix>public abstract class FuncLongToString extends VectorExpression {\n  private static final long serialVersionUID = 1L;\n\n  private final int inputColumn;\n\n  // Transient members initialized by transientInit method.\n  protected byte[] bytes;\n\n  FuncLongToString(int inputColumn, int outputColumnNum) {\n    super(outputColumnNum);\n    this.inputColumn = inputColumn;\n  }\n\n  FuncLongToString() {\n    super();\n\n    // Dummy final assignments.\n    inputColumn = -1;\n  }\n\n  @Override\n  public void transientInit() throws HiveException {\n    super.transientInit();\n\n    bytes = new byte[64];    // staging area for results, to avoid new() calls\n  }\n\n  @Override\n  public void evaluate(VectorizedRowBatch batch) throws HiveException {\n\n    if (childExpressions != null) {\n      super.evaluateChildren(batch);\n    }\n\n    LongColumnVector inputColVector = (LongColumnVector) batch.cols[inputColumn];\n    int[] sel = batch.selected;\n    int n = batch.size;\n    long[] vector = inputColVector.vector;\n    BytesColumnVector outputColVector = (BytesColumnVector) batch.cols[outputColumnNum];\n    outputColVector.initBuffer();\n\n    boolean[] inputIsNull = inputColVector.isNull;\n    boolean[] outputIsNull = outputColVector.isNull;\n\n    if (n == 0) {\n      //Nothing to do\n      return;\n    }\n\n    // We do not need to do a column reset since we are carefully changing the output.\n    outputColVector.isRepeating = false;\n\n    if (inputColVector.isRepeating) {\n      if (inputColVector.noNulls || !inputIsNull[0]) {\n        // Set isNull before call in case it changes it mind.\n        outputIsNull[0] = false;\n        prepareResult(0, vector, outputColVector);\n      } else {\n        outputIsNull[0] = true;\n        outputColVector.noNulls = false;\n      }\n      outputColVector.isRepeating = true;\n      return;\n    }\n\n    if (inputColVector.noNulls) {\n      if (batch.selectedInUse) {\n\n        // CONSIDER: For large n, fill n or all of isNull array and use the tighter ELSE loop.\n\n        if (!outputColVector.noNulls) {\n          for(int j = 0; j != n; j++) {\n           final int i = sel[j];\n           // Set isNull before call in case it changes it mind.\n           outputIsNull[i] = false;\n           prepareResult(i, vector, outputColVector);\n         }\n        } else {\n          for(int j = 0; j != n; j++) {\n            final int i = sel[j];\n            prepareResult(i, vector, outputColVector);\n          }\n        }\n      } else {\n        if (!outputColVector.noNulls) {\n\n          // Assume it is almost always a performance win to fill all of isNull so we can\n          // safely reset noNulls.\n          Arrays.fill(outputIsNull, false);\n          outputColVector.noNulls = true;\n        }\n        for(int i = 0; i != n; i++) {\n          prepareResult(i, vector, outputColVector);\n        }\n      }\n    } else /* there are nulls in the inputColVector */ {\n\n      // Carefully handle NULLs...\n      outputColVector.noNulls = false;\n\n      if (batch.selectedInUse) {\n        for(int j=0; j != n; j++) {\n          int i = sel[j];\n          outputColVector.isNull[i] = inputColVector.isNull[i];\n          if (!inputColVector.isNull[i]) {\n            prepareResult(i, vector, outputColVector);\n          }\n        }\n      } else {\n        for(int i = 0; i != n; i++) {\n          outputColVector.isNull[i] = inputColVector.isNull[i];\n          if (!inputColVector.isNull[i]) {\n            prepareResult(i, vector, outputColVector);\n          }\n        }\n      }\n    }\n  }\n\n  /* Evaluate result for position i (using bytes[] to avoid storage allocation costs)\n   * and set position i of the output vector to the result.\n   */\n  abstract void prepareResult(int i, long[] vector, BytesColumnVector outputColVector);\n\n  @Override\n  public String vectorExpressionParameters() {\n    return getColumnParamString(0, inputColumn);\n  }\n\n  @Override\n  public VectorExpressionDescriptor.Descriptor getDescriptor() {\n    return (new VectorExpressionDescriptor.Builder()).setMode(\n        VectorExpressionDescriptor.Mode.PROJECTION).setNumArguments(1).setInputExpressionTypes(\n            VectorExpressionDescriptor.InputExpressionType.COLUMN).setArgumentTypes(\n                VectorExpressionDescriptor.ArgumentType.INT_FAMILY).build();\n  }\n}<fim_middle>// class below has no smell\n"}