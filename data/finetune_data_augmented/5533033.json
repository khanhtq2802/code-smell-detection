{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.samza.sql.planner;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport org.apache.calcite.sql.SqlFunctionCategory;\nimport org.apache.calcite.sql.SqlIdentifier;\nimport org.apache.calcite.sql.SqlOperator;\nimport org.apache.calcite.sql.SqlOperatorTable;\nimport org.apache.calcite.sql.SqlSyntax;\nimport org.apache.calcite.sql.parser.SqlParserPos;\nimport org.apache.calcite.sql.util.ListSqlOperatorTable;\nimport org.apache.calcite.sql.validate.SqlUserDefinedFunction;\nimport org.apache.samza.sql.interfaces.UdfMetadata;\n\n\n<fim_suffix>public class SamzaSqlUdfOperatorTable implements SqlOperatorTable {\n\n  private final ListSqlOperatorTable operatorTable;\n\n  public SamzaSqlUdfOperatorTable(List<SamzaSqlScalarFunctionImpl> scalarFunctions) {\n    operatorTable = new ListSqlOperatorTable(getSqlOperators(scalarFunctions));\n  }\n\n  private List<SqlOperator> getSqlOperators(List<SamzaSqlScalarFunctionImpl> scalarFunctions) {\n    return scalarFunctions.stream().map(this::getSqlOperator).collect(Collectors.toList());\n  }\n\n  private SqlOperator getSqlOperator(SamzaSqlScalarFunctionImpl scalarFunction) {\n    int numArguments = scalarFunction.numberOfArguments();\n    UdfMetadata udfMetadata = scalarFunction.getUdfMetadata();\n\n    if(udfMetadata.isDisableArgCheck()) {\n      return new SqlUserDefinedFunction(new SqlIdentifier(scalarFunction.getUdfName(), SqlParserPos.ZERO),\n          o -> scalarFunction.getReturnType(o.getTypeFactory()), null, Checker.ANY_CHECKER,\n          null, scalarFunction);\n    } else {\n      return new SqlUserDefinedFunction(new SqlIdentifier(scalarFunction.getUdfName(), SqlParserPos.ZERO),\n          o -> scalarFunction.getReturnType(o.getTypeFactory()), null, Checker.getChecker(numArguments, numArguments),\n          null, scalarFunction);\n    }\n  }\n\n  @Override\n  public void lookupOperatorOverloads(SqlIdentifier opName, SqlFunctionCategory category, SqlSyntax syntax,\n      List<SqlOperator> operatorList) {\n    operatorTable.lookupOperatorOverloads(opName, category, syntax, operatorList);\n  }\n\n  @Override\n  public List<SqlOperator> getOperatorList() {\n    return operatorTable.getOperatorList();\n  }\n}<fim_middle>// class below has no smell\n"}