{"text": "<fim_prefix>    StringBuilder sb = new StringBuilder();\n    if (ref.getProjectId() != null) {\n      sb.append(ref.getProjectId());\n      sb.append(\":\");\n    }\n    sb.append(ref.getDatasetId()).append('.').append(ref.getTableId());\n    return sb.toString();\n  }\n  static <K, V> List<V> getOrCreateMapListValue(Map<K, List<V>> map, K key) {\n    return map.computeIfAbsent(key, k -> new ArrayList<>());\n  }\n  /**\n   * Parse a table specification in the form {@code \"[project_id]:[dataset_id].[table_id]\"} or\n   * {@code \"[dataset_id].[table_id]\"}.\n   *\n   * <p>If the project id is omitted, the default project id is used.\n   */\n  public static TableReference parseTableSpec(String tableSpec) {\n    Matcher match = BigQueryIO.TABLE_SPEC.matcher(tableSpec);\n    if (!match.matches()) {\n      throw new IllegalArgumentException(\n          \"Table reference is not in [project_id]:[dataset_id].[table_id] \"\n              + \"format: \"\n              + tableSpec);\n    }\n    TableReference ref = new TableReference();\n    ref.setProjectId(match.group(\"PROJECT\"));\n    return ref.setDatasetId(match.group(\"DATASET\")).setTableId(match.group(\"TABLE\"));\n  }\n  /** Strip off any partition decorator information from a tablespec. */\n  public static String stripPartitionDecorator(String tableSpec) {\n    int index = tableSpec.lastIndexOf('$');\n    return (index == -1) ? tableSpec : tableSpec.substring(0, index);\n  }\n  static String jobToPrettyString(@Nullable Job job) throws IOException {\n    if (job != null && job.getConfiguration().getLoad() != null) {\n      // Removing schema and sourceUris from error messages for load jobs since these fields can be\n      // quite long and error message might not be displayed properly in runner specific logs.\n      job = job.clone();\n      job.getConfiguration().getLoad().setSchema(null);\n      job.getConfiguration().getLoad().setSourceUris(null);\n    }\n    return job == null ? \"null\" : job.toPrettyString();\n  }\n  static String statusToPrettyString(@Nullable JobStatus status) throws IOException {\n    return status == null ? \"Unknown status: null.\" : status.toPrettyString();\n  }\n  static Status parseStatus(@Nullable Job job) {\n    if (job == null) {\n      return Status.UNKNOWN;\n    }\n    JobStatus status = job.getStatus();\n    if (status.getErrorResult() != null) {\n      return Status.FAILED;\n    } else if (status.getErrors() != null && !status.getErrors().isEmpty()) {\n      return Status.FAILED;\n    } else {\n      return Status.SUCCEEDED;\n    }\n  }\n  @VisibleForTesting\n  static String toJsonString(Object item) {\n    if (item == null) {\n      return null;\n    }\n    try {\n      return BigQueryIO.JSON_FACTORY.toString(item);\n    } catch (IOException e) {\n      throw new RuntimeException(\n          String.format(\"Cannot serialize %s to a JSON string.\", item.getClass().getSimpleName()),\n          e);\n    }\n  }\n  @VisibleForTesting\n  static <T> T fromJsonString(String json, Class<T> clazz) {\n    if (json == null) {\n      return null;\n    }\n    try {\n      return BigQueryIO.JSON_FACTORY.fromString(json, clazz);\n    } catch (IOException e) {\n      throw new RuntimeException(\n          String.format(\"Cannot deserialize %s from a JSON string: %s.\", clazz, json), e);\n    }\n  }\n  /**\n   * Returns a randomUUID string.\n   *\n   * <p>{@code '-'} is removed because BigQuery doesn't allow it in dataset id.\n   */\n  static String randomUUIDString() {\n    return UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n  }\n  static void verifyTableNotExistOrEmpty(DatasetService datasetService, TableReference tableRef) {\n    try {\n      if (datasetService.getTable(tableRef) != null) {\n        checkState(\n            datasetService.isTableEmpty(tableRef),\n            \"BigQuery table is not empty: %s.\",\n            toTableSpec(tableRef));\n      }\n    } catch (IOException | InterruptedException e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(\n          \"unable to confirm BigQuery table emptiness for table \" + toTableSpec(tableRef), e);\n    }\n  }\n  static void verifyDatasetPresence(DatasetService datasetService, TableReference table) {\n    try {\n      datasetService.getDataset(table.getProjectId(), table.getDatasetId());\n    } catch (Exception e) {\n      ApiErrorExtractor errorExtractor = new ApiErrorExtractor();\n      if ((e instanceof IOException) && errorExtractor.itemNotFound((IOException) e)) {\n        throw new IllegalArgumentException(\n            String.format(RESOURCE_NOT_FOUND_ERROR, \"dataset\", toTableSpec(table)), e);\n      } else if (e instanceof RuntimeException) {\n        throw (RuntimeException) e;\n      } else {\n        throw new RuntimeException(\n            String.format(\n                UNABLE_TO_CONFIRM_PRESENCE_OF_RESOURCE_ERROR, \"dataset\", toTableSpec(table)),\n            e);\n      }\n    }\n  }\n  static String getDatasetLocation(\n      DatasetService datasetService, String projectId, String datasetId) {\n    Dataset dataset;\n    try {\n      dataset = datasetService.getDataset(projectId, datasetId);\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(\n          String.format(\n              \"unable to obtain dataset for dataset %s in project %s\", datasetId, projectId),\n          e);\n    }\n    return dataset.getLocation();\n  }\n  static void verifyTablePresence(DatasetService datasetService, TableReference table) {\n    try {\n      datasetService.getTable(table);\n    } catch (Exception e) {\n      ApiErrorExtractor errorExtractor = new ApiErrorExtractor();\n      if ((e instanceof IOException) && errorExtractor.itemNotFound((IOException) e)) {\n        throw new IllegalArgumentException(\n            String.format(RESOURCE_NOT_FOUND_ERROR, \"table\", toTableSpec(table)), e);\n      } else if (e instanceof RuntimeException) {\n        throw (RuntimeException) e;\n      } else {\n        throw new RuntimeException(\n            String.format(\n                UNABLE_TO_CONFIRM_PRESENCE_OF_RESOURCE_ERROR, \"table\", toTableSpec(table)),\n            e);\n      }\n    }\n  }\n  // Create a unique job id for a table load.\n  static String createJobId(\n      String prefix, TableDestination tableDestination, int partition, long index) {\n    // Job ID must be different for each partition of each table.\n    String destinationHash =\n        Hashing.murmur3_128().hashUnencodedChars(tableDestination.toString()).toString();\n    String jobId = String.format(\"%s_%s\", prefix, destinationHash);\n    if (partition >= 0) {\n      jobId += String.format(\"_%05d\", partition);\n    }\n    if (index >= 0) {\n      jobId += String.format(\"_%05d\", index);\n    }\n    return jobId;\n  }\n  @VisibleForTesting\n  static class JsonSchemaToTableSchema implements SerializableFunction<String, TableSchema> {\n    @Override\n    public TableSchema apply(String from) {\n      return fromJsonString(from, TableSchema.class);\n    }\n  }\n  static class TableSchemaToJsonSchema implements SerializableFunction<TableSchema, String> {\n    @Override\n    public String apply(TableSchema from) {\n      return toJsonString(from);\n    }\n  }\n  static class JsonTableRefToTableRef implements SerializableFunction<String, TableReference> {\n    @Override\n    public TableReference apply(String from) {\n      return fromJsonString(from, TableReference.class);\n    }\n  }\n  static class JsonTableRefToTableSpec implements SerializableFunction<String, String> {\n    @Override\n    public String apply(String from) {\n      return toTableSpec(fromJsonString(from, TableReference.class));\n    }\n  }\n  static class TableRefToJson implements SerializableFunction<TableReference, String> {\n    @Override\n    public String apply(TableReference from) {\n      return toJsonString(from);\n    }\n  }\n  static class TableRefToTableRefProto\n      implements SerializableFunction<TableReference, TableReferenceProto.TableReference> {\n    @Override\n    public TableReferenceProto.TableReference apply(TableReference from) {\n      return toTableRefProto(from);\n    }\n  }\n  static class TableRefToTableSpec implements SerializableFunction<TableReference, String> {\n    @Override\n    public String apply(TableReference from) {\n      return toTableSpec(from);\n    }\n  }\n  static class TableRefProtoToTableSpec\n      implements SerializableFunction<TableReferenceProto.TableReference, String> {\n<fim_suffix>    @Override\n    public String apply(TableReferenceProto.TableReference from) {\n      return toTableSpec(from);\n    }<fim_middle>// function below has no smell\n"}