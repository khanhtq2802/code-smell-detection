{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2000, 2010 IBM Corporation and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     IBM Corporation - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.gef;\n\n/**\n * The listener interface for receiving basic events from an EditPart. Listeners\n * interested in only one type of Event can extend the\n * {@link EditPartListener.Stub} implementation rather than implementing the\n * entire interface.\n */\n\n<fim_suffix>public interface EditPartListener {\n\n\t/**\n\t * Listeners interested in just a subset of Events can extend this stub\n\t * implementation. Also, extending the Stub will reduce the impact of new\n\t * API on this interface.\n\t */\n\tpublic class Stub implements EditPartListener {\n\t\t/**\n\t\t * @see org.eclipse.gef.EditPartListener#childAdded(EditPart, int)\n\t\t */\n\t\tpublic void childAdded(EditPart child, int index) {\n\t\t}\n\n\t\t/**\n\t\t * @see org.eclipse.gef.EditPartListener#partActivated(EditPart)\n\t\t */\n\t\tpublic void partActivated(EditPart editpart) {\n\t\t}\n\n\t\t/**\n\t\t * @see org.eclipse.gef.EditPartListener#partDeactivated(EditPart)\n\t\t */\n\t\tpublic void partDeactivated(EditPart editpart) {\n\t\t}\n\n\t\t/**\n\t\t * @see org.eclipse.gef.EditPartListener#removingChild(EditPart, int)\n\t\t */\n\t\tpublic void removingChild(EditPart child, int index) {\n\t\t}\n\n\t\t/**\n\t\t * @see org.eclipse.gef.EditPartListener#selectedStateChanged(EditPart)\n\t\t */\n\t\tpublic void selectedStateChanged(EditPart part) {\n\t\t}\n\t};\n\n\t/**\n\t * Called after a child EditPart has been added to its parent.\n\t * \n\t * @param child\n\t *            the Child\n\t * @param index\n\t *            the index at which the child was added\n\t */\n\tvoid childAdded(EditPart child, int index);\n\n\t/**\n\t * Called when the editpart has been activated.\n\t * \n\t * @param editpart\n\t *            the EditPart\n\t */\n\tvoid partActivated(EditPart editpart);\n\n\t/**\n\t * Called when the editpart has been deactivated.\n\t * \n\t * @param editpart\n\t *            the EditPart\n\t */\n\tvoid partDeactivated(EditPart editpart);\n\n\t/**\n\t * Called before a child EditPart is removed from its parent.\n\t * \n\t * @param child\n\t *            the Child being removed\n\t * @param index\n\t *            the child's current location\n\t */\n\tvoid removingChild(EditPart child, int index);\n\n\t/**\n\t * Called when the selected state of an EditPart has changed. Focus changes\n\t * also result in this method being called.\n\t * \n\t * @param editpart\n\t *            the part whose selection was changed\n\t * @see EditPart#getSelected()\n\t */\n\tvoid selectedStateChanged(EditPart editpart);\n\n}<fim_middle>// class below has no smell\n"}