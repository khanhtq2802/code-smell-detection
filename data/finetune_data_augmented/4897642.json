{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.pinot.core.operator.docvalsets;\n\nimport org.apache.pinot.common.data.FieldSpec.DataType;\nimport org.apache.pinot.core.common.BaseBlockValSet;\nimport org.apache.pinot.core.common.BlockValIterator;\nimport org.apache.pinot.core.io.reader.ReaderContext;\nimport org.apache.pinot.core.io.reader.SingleColumnSingleValueReader;\nimport org.apache.pinot.core.operator.docvaliterators.SingleValueIterator;\n\n\n@SuppressWarnings(\"unchecked\")\npublic final class SingleValueSet extends BaseBlockValSet {\n  private final SingleColumnSingleValueReader _reader;\n  private final int _numDocs;\n  private final DataType _dataType;\n\n  public SingleValueSet(SingleColumnSingleValueReader reader, int numDocs, DataType dataType) {\n    _reader = reader;\n    _numDocs = numDocs;\n    _dataType = dataType;\n  }\n\n  @Override\n  public BlockValIterator iterator() {\n    return new SingleValueIterator(_reader, _numDocs);\n  }\n\n  @Override\n  public DataType getValueType() {\n    return _dataType;\n  }\n\n  @Override\n  public void getIntValues(int[] inDocIds, int inStartPos, int inDocIdsSize, int[] outValues, int outStartPos) {\n    int inEndPos = inStartPos + inDocIdsSize;\n    ReaderContext context = _reader.createContext();\n    if (_dataType == DataType.INT) {\n      for (int i = inStartPos; i < inEndPos; i++) {\n        outValues[outStartPos++] = _reader.getInt(inDocIds[i], context);\n      }\n    } else {\n      throw new UnsupportedOperationException();\n    }\n  }\n\n  @Override\n  public void getLongValues(int[] inDocIds, int inStartPos, int inDocIdsSize, long[] outValues, int outStartPos) {\n    int inEndPos = inStartPos + inDocIdsSize;\n    ReaderContext context = _reader.createContext();\n    switch (_dataType) {\n      case INT:\n        for (int i = inStartPos; i < inEndPos; i++) {\n          outValues[outStartPos++] = _reader.getInt(inDocIds[i], context);\n        }\n        break;\n      case LONG:\n        for (int i = inStartPos; i < inEndPos; i++) {\n          outValues[outStartPos++] = _reader.getLong(inDocIds[i], context);\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException();\n    }\n  }\n\n  @Override\n  public void getFloatValues(int[] inDocIds, int inStartPos, int inDocIdsSize, float[] outValues, int outStartPos) {\n    int inEndPos = inStartPos + inDocIdsSize;\n    ReaderContext context = _reader.createContext();\n    switch (_dataType) {\n      case INT:\n        for (int i = inStartPos; i < inEndPos; i++) {\n          outValues[outStartPos++] = _reader.getInt(inDocIds[i], context);\n        }\n        break;\n      case LONG:\n        for (int i = inStartPos; i < inEndPos; i++) {\n          outValues[outStartPos++] = _reader.getLong(inDocIds[i], context);\n        }\n        break;\n      case FLOAT:\n        for (int i = inStartPos; i < inEndPos; i++) {\n          outValues[outStartPos++] = _reader.getFloat(inDocIds[i], context);\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException();\n    }\n  }\n\n  @Override\n  public void getDoubleValues(int[] inDocIds, int inStartPos, int inDocIdsSize, double[] outValues, int outStartPos) {\n    int inEndPos = inStartPos + inDocIdsSize;\n    ReaderContext context = _reader.createContext();\n    switch (_dataType) {\n      case INT:\n        for (int i = inStartPos; i < inEndPos; i++) {\n          outValues[outStartPos++] = _reader.getInt(inDocIds[i], context);\n        }\n        break;\n      case LONG:\n        for (int i = inStartPos; i < inEndPos; i++) {\n          outValues[outStartPos++] = _reader.getLong(inDocIds[i], context);\n        }\n        break;\n      case FLOAT:\n        for (int i = inStartPos; i < inEndPos; i++) {\n          outValues[outStartPos++] = _reader.getFloat(inDocIds[i], context);\n        }\n        break;\n      case DOUBLE:\n        for (int i = inStartPos; i < inEndPos; i++) {\n          outValues[outStartPos++] = _reader.getDouble(inDocIds[i], context);\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException();\n    }\n  }\n\n  @Override\n  public void getStringValues(int[] inDocIds, int inStartPos, int inDocIdsSize, String[] outValues, int outStartPos) {\n    int inEndPos = inStartPos + inDocIdsSize;\n    ReaderContext context = _reader.createContext();\n    if (_dataType == DataType.STRING) {\n      for (int i = inStartPos; i < inEndPos; i++) {\n        outValues[outStartPos++] = _reader.getString(inDocIds[i], context);\n      }\n    } else {\n      throw new UnsupportedOperationException();\n    }\n  }\n\n  @Override\n  public void getBytesValues(int[] inDocIds, int inStartPos, int inDocIdsSize, byte[][] outValues, int outStartPos) {\n    int inEndPos = inStartPos + inDocIdsSize;\n    ReaderContext context = _reader.createContext();\n    if (_dataType.equals(DataType.BYTES)) {\n      for (int i = inStartPos; i < inEndPos; i++) {\n        outValues[outStartPos++] = _reader.getBytes(inDocIds[i], context);\n      }\n    } else {\n      throw new UnsupportedOperationException();\n    }\n  }\n\n<fim_suffix>  @Override\n  public void getDictionaryIds(int[] inDocIds, int inStartPos, int inDocIdsSize, int[] outDictionaryIds,\n      int outStartPos) {\n    _reader.readValues(inDocIds, inStartPos, inDocIdsSize, outDictionaryIds, outStartPos);\n  }\n}<fim_middle>// function below has no smell\n"}