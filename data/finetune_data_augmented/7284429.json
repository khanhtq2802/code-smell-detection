{"text": "<fim_prefix>/*\n * Copyright 2010-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.build.aws.maven;\nimport org.apache.maven.wagon.ConnectionException;\nimport org.apache.maven.wagon.ResourceDoesNotExistException;\nimport org.apache.maven.wagon.TransferFailedException;\nimport org.apache.maven.wagon.Wagon;\nimport org.apache.maven.wagon.authentication.AuthenticationException;\nimport org.apache.maven.wagon.authentication.AuthenticationInfo;\nimport org.apache.maven.wagon.authorization.AuthorizationException;\nimport org.apache.maven.wagon.events.SessionListener;\nimport org.apache.maven.wagon.events.TransferEvent;\nimport org.apache.maven.wagon.events.TransferListener;\nimport org.apache.maven.wagon.proxy.ProxyInfo;\nimport org.apache.maven.wagon.proxy.ProxyInfoProvider;\nimport org.apache.maven.wagon.repository.Repository;\nimport org.apache.maven.wagon.resource.Resource;\nimport java.io.File;\nimport java.util.List;\nabstract class AbstractWagon implements Wagon {\n    private int connectionTimeout = DEFAULT_CONNECTION_TIMEOUT;\n    private boolean interactive = false;\n    private int readTimeout = DEFAULT_READ_TIMEOUT;\n    private Repository repository = null;\n    private final boolean supportsDirectoryCopy;\n    private final SessionListenerSupport sessionListenerSupport;\n    private final TransferListenerSupport transferListenerSupport;\n    protected AbstractWagon(boolean supportsDirectoryCopy) {\n        this.supportsDirectoryCopy = supportsDirectoryCopy;\n        this.sessionListenerSupport = new StandardSessionListenerSupport(this);\n        this.transferListenerSupport = new StandardTransferListenerSupport(this);\n    }\n    protected AbstractWagon(boolean supportsDirectoryCopy, SessionListenerSupport sessionListenerSupport,\n                            TransferListenerSupport transferListenerSupport) {\n        this.supportsDirectoryCopy = supportsDirectoryCopy;\n        this.sessionListenerSupport = sessionListenerSupport;\n        this.transferListenerSupport = transferListenerSupport;\n    }\n    @Override\n    public final void addSessionListener(SessionListener sessionListener) {\n        this.sessionListenerSupport.addSessionListener(sessionListener);\n    }\n    @Override\n    public final boolean hasSessionListener(SessionListener sessionListener) {\n        return this.sessionListenerSupport.hasSessionListener(sessionListener);\n    }\n    @Override\n    public final void removeSessionListener(SessionListener sessionListener) {\n        this.sessionListenerSupport.removeSessionListener(sessionListener);\n    }\n    @Override\n    public final void addTransferListener(TransferListener transferListener) {\n        this.transferListenerSupport.addTransferListener(transferListener);\n    }\n    @Override\n    public final boolean hasTransferListener(TransferListener transferListener) {\n        return this.transferListenerSupport.hasTransferListener(transferListener);\n    }\n    @Override\n    public final void removeTransferListener(TransferListener transferListener) {\n        this.transferListenerSupport.removeTransferListener(transferListener);\n    }\n    @Override\n    public final Repository getRepository() {\n        return this.repository;\n    }\n    @Override\n    public final boolean isInteractive() {\n        return this.interactive;\n    }\n    @Override\n    public final void setInteractive(boolean interactive) {\n        this.interactive = interactive;\n    }\n    @Override\n    public final void connect(Repository source) throws ConnectionException, AuthenticationException {\n        connect(source, null, (ProxyInfoProvider) null);\n    }\n    @Override\n    public final void connect(Repository source, ProxyInfo proxyInfo) throws ConnectionException,\n            AuthenticationException {\n        connect(source, null, proxyInfo);\n    }\n    @Override\n    public final void connect(Repository source, AuthenticationInfo authenticationInfo) throws ConnectionException,\n            AuthenticationException {\n        connect(source, authenticationInfo, (ProxyInfoProvider) null);\n    }\n<fim_suffix>    @Override\n    public final void connect(Repository source, ProxyInfoProvider proxyInfoProvider) throws ConnectionException,\n            AuthenticationException {\n        connect(source, null, proxyInfoProvider);\n    }\n    @Override\n    public final void connect(Repository source, AuthenticationInfo authenticationInfo, ProxyInfo proxyInfo)\n            throws ConnectionException, AuthenticationException {\n        connect(source, authenticationInfo, new NullProtectingProxyInfoProvider(proxyInfo));\n    }\n    @Override\n    public final void connect(Repository source, AuthenticationInfo authenticationInfo,\n                              ProxyInfoProvider proxyInfoProvider) throws ConnectionException, AuthenticationException {\n        this.repository = source;\n        this.sessionListenerSupport.fireSessionOpening();\n        try {\n            connectToRepository(source, authenticationInfo, proxyInfoProvider);\n            this.sessionListenerSupport.fireSessionLoggedIn();\n            this.sessionListenerSupport.fireSessionOpened();\n        } catch (ConnectionException | AuthenticationException e) {\n            this.sessionListenerSupport.fireSessionConnectionRefused();\n            throw e;\n        }\n    }\n    @Override\n    public final void disconnect() throws ConnectionException {\n        this.sessionListenerSupport.fireSessionDisconnecting();\n        try {\n            disconnectFromRepository();\n            this.sessionListenerSupport.fireSessionLoggedOff();\n            this.sessionListenerSupport.fireSessionDisconnected();\n        } catch (ConnectionException e) {\n            this.sessionListenerSupport.fireSessionConnectionRefused();\n            throw e;\n        }\n    }\n    @Override\n    public final void get(String resourceName, File destination) throws TransferFailedException,\n            ResourceDoesNotExistException, AuthorizationException {\n        Resource resource = new Resource(resourceName);\n        this.transferListenerSupport.fireTransferInitiated(resource, TransferEvent.REQUEST_GET);\n        this.transferListenerSupport.fireTransferStarted(resource, TransferEvent.REQUEST_GET);\n        try {\n            getResource(resourceName, destination, new StandardTransferProgress(resource, TransferEvent.REQUEST_GET,\n                    this.transferListenerSupport));\n            this.transferListenerSupport.fireTransferCompleted(resource, TransferEvent.REQUEST_GET);\n        } catch (TransferFailedException | ResourceDoesNotExistException | AuthorizationException e) {\n            this.transferListenerSupport.fireTransferError(resource, TransferEvent.REQUEST_GET, e);\n            throw e;\n        }\n    }\n    @Override\n    public final List<String> getFileList(String destinationDirectory) throws TransferFailedException,\n            ResourceDoesNotExistException, AuthorizationException {\n        try {\n            return listDirectory(destinationDirectory);\n        } catch (TransferFailedException | ResourceDoesNotExistException | AuthorizationException e) {\n            this.transferListenerSupport.fireTransferError(new Resource(destinationDirectory),\n                    TransferEvent.REQUEST_GET, e);\n            throw e;\n        }\n    }\n    @Override\n    public final boolean getIfNewer(String resourceName, File destination, long timestamp)\n            throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException {\n        Resource resource = new Resource(resourceName);\n        try {\n            if (isRemoteResourceNewer(resourceName, timestamp)) {\n                get(resourceName, destination);\n                return true;\n            }\n            return false;\n        } catch (TransferFailedException | ResourceDoesNotExistException | AuthorizationException e) {\n            this.transferListenerSupport.fireTransferError(resource, TransferEvent.REQUEST_GET, e);\n            throw e;\n        }\n    }\n    @Override\n    public final void openConnection() {\n        // Nothing to do here (never called by the wagon manager)\n    }\n    @Override\n    public final void put(File source, String destination) throws TransferFailedException,\n            ResourceDoesNotExistException, AuthorizationException {\n        Resource resource = new Resource(destination);\n        this.transferListenerSupport.fireTransferInitiated(resource, TransferEvent.REQUEST_PUT);\n        this.transferListenerSupport.fireTransferStarted(resource, TransferEvent.REQUEST_PUT);\n        try {\n            putResource(source, destination, new StandardTransferProgress(resource, TransferEvent.REQUEST_PUT,\n                    this.transferListenerSupport));\n            this.transferListenerSupport.fireTransferCompleted(resource, TransferEvent.REQUEST_PUT);\n        } catch (TransferFailedException | ResourceDoesNotExistException | AuthorizationException e) {\n            this.transferListenerSupport.fireTransferError(resource, TransferEvent.REQUEST_PUT, e);\n            throw e;\n        }\n    }\n    @Override\n    public final void putDirectory(File sourceDirectory, String destinationDirectory) throws TransferFailedException,\n            ResourceDoesNotExistException, AuthorizationException {\n        File[] files = sourceDirectory.listFiles();\n        if (files != null) {\n            for (File f : files) {\n                put(f, destinationDirectory + \"/\" + f.getName());\n            }\n        }\n    }\n    @Override\n    public final boolean resourceExists(String resourceName) throws TransferFailedException, AuthorizationException {\n        try {\n            return doesRemoteResourceExist(resourceName);\n        } catch (AuthorizationException | TransferFailedException e) {\n            this.transferListenerSupport.fireTransferError(new Resource(resourceName), TransferEvent.REQUEST_GET, e);\n            throw e;\n        }\n    }\n    @Override\n    public final boolean supportsDirectoryCopy() {<fim_middle>// function below has no smell\n"}