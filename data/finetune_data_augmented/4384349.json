{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License. \n *  \n */\npackage org.apache.directory.studio.ldapbrowser.common.actions;\nimport java.util.Arrays;\nimport java.util.LinkedHashSet;\nimport org.apache.directory.studio.ldapbrowser.common.actions.proxy.BrowserActionProxy;\nimport org.apache.directory.studio.ldapbrowser.common.dnd.EntryTransfer;\nimport org.apache.directory.studio.ldapbrowser.common.dnd.SearchTransfer;\nimport org.apache.directory.studio.ldapbrowser.common.dnd.ValuesTransfer;\nimport org.apache.directory.studio.ldapbrowser.core.BrowserCoreConstants;\nimport org.apache.directory.studio.ldapbrowser.core.model.AttributeHierarchy;\nimport org.apache.directory.studio.ldapbrowser.core.model.IAttribute;\nimport org.apache.directory.studio.ldapbrowser.core.model.IBookmark;\nimport org.apache.directory.studio.ldapbrowser.core.model.IEntry;\nimport org.apache.directory.studio.ldapbrowser.core.model.ISearch;\nimport org.apache.directory.studio.ldapbrowser.core.model.ISearchResult;\nimport org.apache.directory.studio.ldapbrowser.core.model.IValue;\nimport org.apache.directory.studio.ldifparser.LdifUtils;\nimport org.apache.directory.studio.valueeditors.IValueEditor;\nimport org.apache.directory.studio.valueeditors.ValueEditorManager;\nimport org.eclipse.jface.resource.ImageDescriptor;\nimport org.eclipse.swt.dnd.Clipboard;\nimport org.eclipse.swt.dnd.TextTransfer;\nimport org.eclipse.swt.dnd.Transfer;\nimport org.eclipse.swt.widgets.Display;\nimport org.eclipse.ui.ISharedImages;\nimport org.eclipse.ui.PlatformUI;\nimport org.eclipse.ui.texteditor.IWorkbenchActionDefinitionIds;\n/**\n * This class implements the Copy Action\n *\n * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n */\npublic class CopyAction extends BrowserAction\n{\n    private BrowserActionProxy pasteActionProxy;\n    private ValueEditorManager valueEditorManager;\n    /**\n     * Creates a new instance of CopyAction.\n     *\n     * @param pasteActionProxy\n     *      the associated Paste Action\n     */\n    public CopyAction( BrowserActionProxy pasteActionProxy )\n    {\n        super();\n        this.pasteActionProxy = pasteActionProxy;\n    }\n    /**\n     * Creates a new instance of CopyAction.\n     *\n     * @param pasteActionProxy\n     *      the associated Paste Action\n     */\n    public CopyAction( BrowserActionProxy pasteActionProxy, ValueEditorManager valueEditorManager )\n    {\n        super();\n        this.pasteActionProxy = pasteActionProxy;\n        this.valueEditorManager = valueEditorManager;\n    }\n    /**\n     * {@inheritDoc}\n     */\n<fim_suffix>    public String getText()\n    {\n        // entry/searchresult/bookmark\n        IEntry[] entries = getEntries();\n        if ( entries != null )\n        {\n            return entries.length > 1 ? Messages.getString( \"CopyAction.CopyEntriesDNs\" ) : Messages.getString( \"CopyAction.CopyEntryDN\" ); //$NON-NLS-1$ //$NON-NLS-2$\n        }\n        // searches\n        ISearch[] searches = getSearches();\n        if ( searches != null )\n        {\n            return searches.length > 1 ? Messages.getString( \"CopyAction.CopySearches\" ) : Messages.getString( \"CopyAction.CopySearch\" ); //$NON-NLS-1$ //$NON-NLS-2$\n        }\n        // values\n        IValue[] values = getValues();\n        if ( values != null )\n        {\n            return values.length > 1 ? Messages.getString( \"CopyAction.CopyValues\" ) : Messages.getString( \"CopyAction.CopyValue\" ); //$NON-NLS-1$ //$NON-NLS-2$\n        }\n        return Messages.getString( \"CopyAction.Copy\" ); //$NON-NLS-1$\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public ImageDescriptor getImageDescriptor()\n    {\n        return PlatformUI.getWorkbench().getSharedImages().getImageDescriptor( ISharedImages.IMG_TOOL_COPY );\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public String getCommandId()\n    {\n        return IWorkbenchActionDefinitionIds.COPY;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public void run()\n    {\n        IEntry[] entries = getEntries();\n        ISearch[] searches = getSearches();\n        IValue[] values = getValues();\n        String[] stringProperties = getSelectedProperties();\n        // entry/searchresult/bookmark\n        if ( entries != null )\n        {\n            StringBuffer text = new StringBuffer();\n            for ( int i = 0; i < entries.length; i++ )\n            {\n                text.append( entries[i].getDn().getName() );\n                if ( i + 1 < entries.length )\n                {\n                    text.append( BrowserCoreConstants.LINE_SEPARATOR );\n                }\n            }\n            copyToClipboard( new Object[]\n                { entries, text.toString() }, new Transfer[]\n                { EntryTransfer.getInstance(), TextTransfer.getInstance() } );\n        }\n        // searches\n        if ( searches != null )\n        {\n            copyToClipboard( new Object[]\n                { searches }, new Transfer[]\n                { SearchTransfer.getInstance() } );\n        }\n        // values\n        else if ( values != null )\n        {\n            StringBuffer text = new StringBuffer();\n            for ( int i = 0; i < values.length; i++ )\n            {\n                IValue value = values[i];\n                if ( valueEditorManager != null )\n                {\n                    IValueEditor ve = valueEditorManager.getCurrentValueEditor( value );\n                    String displayValue = ve.getDisplayValue( value );\n                    text.append( displayValue );\n                }\n                else if ( values[i].isString() )\n                {\n                    text.append( values[i].getStringValue() );\n                }\n                else if ( values[i].isBinary() )\n                {\n                    text.append( LdifUtils.base64encode( values[i].getBinaryValue() ) );\n                }\n                if ( i + 1 < values.length )\n                {\n                    text.append( BrowserCoreConstants.LINE_SEPARATOR );\n                }\n            }\n            copyToClipboard( new Object[]\n                { values, text.toString() }, new Transfer[]\n                { ValuesTransfer.getInstance(), TextTransfer.getInstance() } );\n        }\n        // string properties\n        else if ( stringProperties != null && stringProperties.length > 0 )\n        {\n            StringBuffer text = new StringBuffer();\n            for ( int i = 0; i < stringProperties.length; i++ )\n            {\n                text.append( stringProperties[i] );\n                if ( i + 1 < stringProperties.length )\n                {\n                    text.append( BrowserCoreConstants.LINE_SEPARATOR );\n                }\n            }\n            copyToClipboard( new Object[]\n                { text.toString() }, new Transfer[]\n                { TextTransfer.getInstance() } );\n        }\n        // update paste action\n        if ( this.pasteActionProxy != null )\n        {\n            this.pasteActionProxy.updateAction();\n        }\n    }\n    /**\n     * Copies data to Clipboard\n     *\n     * @param data\n     *      the data to be set in the clipboard\n     * @param dataTypes\n     *      the transfer agents that will convert the data to its platform specific format; \n     *      each entry in the data array must have a corresponding dataType\n     */\n    public static void copyToClipboard( Object[] data, Transfer[] dataTypes )\n    {\n        Clipboard clipboard = null;\n        try\n        {\n            clipboard = new Clipboard( Display.getCurrent() );\n            try\n            {\n                clipboard.setContents( data, dataTypes );\n            }\n            catch ( IllegalArgumentException e )\n            {\n                // Nothing to do.\n                // Preventing an error to be shown in the case of the RootDSE being copied\n                // See DIRSTUDIO-773 (IllegalArgumentException thrown when copying the RootDSE)\n                // https://issues.apache.org/jira/browse/DIRSTUDIO-773\n            }\n        }\n        finally\n        {\n            if ( clipboard != null )\n                clipboard.dispose();\n        }\n    }\n    /**\n     * {@inheritDoc}\n     */\n    public boolean isEnabled()<fim_middle>// function below has no smell\n"}