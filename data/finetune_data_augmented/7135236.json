{"text": "<fim_prefix>/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See LICENSE in the project root for license information.\n */\n\npackage com.microsoft.embeddedsocial.fetcher;\n\nimport com.microsoft.embeddedsocial.autorest.models.IdentityProvider;\nimport com.microsoft.embeddedsocial.fetcher.base.DataState;\nimport com.microsoft.embeddedsocial.fetcher.base.Fetcher;\nimport com.microsoft.embeddedsocial.fetcher.base.RequestType;\nimport com.microsoft.embeddedsocial.server.ISearchService;\nimport com.microsoft.embeddedsocial.server.model.discover.FindUsersWithThirdPartyAccountsRequest;\nimport com.microsoft.embeddedsocial.server.model.view.UserCompactView;\nimport com.microsoft.embeddedsocial.social.AuthorizationRequest;\nimport com.microsoft.embeddedsocial.social.FriendlistLoader;\nimport com.microsoft.embeddedsocial.social.FriendlistLoaders;\n\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * Fetches friends list from social networks.\n */\n<fim_suffix>final class FriendlistFetcher extends Fetcher<UserCompactView> {\n\n    private final DataRequestExecutor<UserCompactView, ?> requestExecutor;\n    private final FriendlistLoader friendlistLoader;\n    private final AuthorizationRequest authorizationRequest;\n\n    private List<String> thirdPartyFriendIds;\n\n    FriendlistFetcher(ISearchService server, IdentityProvider identityProvider, AuthorizationRequest authorizationRequest) {\n        this.authorizationRequest = authorizationRequest;\n        friendlistLoader = FriendlistLoaders.newFriendlistLoader(identityProvider);\n        requestExecutor = new DataRequestExecutor<>(\n            server::findUsersWithThirdPartyAccounts,\n            () -> new FindUsersWithThirdPartyAccountsRequest(identityProvider, thirdPartyFriendIds)\n        );\n    }\n\n    @Override\n    protected List<UserCompactView> fetchDataPage(DataState dataState, RequestType requestType, int pageSize) throws Exception {\n        if (requestType == RequestType.FORCE_REFRESH\n            || (requestType == RequestType.REGULAR && thirdPartyFriendIds == null)) {\n\n            if (!friendlistLoader.isAuthorizedToSocialNetwork()) {\n                // a fragment listens to it and launches an authorization\n                // it won't return until the user is authorized\n                // if authorization failed or was cancelled an exception is thrown\n                authorizationRequest.call();\n            }\n            thirdPartyFriendIds = friendlistLoader.getThirdPartyFriendIds();\n        }\n        if (thirdPartyFriendIds == null || thirdPartyFriendIds.isEmpty()) {\n            return Collections.emptyList();\n        }\n        return requestExecutor.fetchData(dataState, requestType, pageSize);\n    }\n\n}<fim_middle>// class below has no smell\n"}