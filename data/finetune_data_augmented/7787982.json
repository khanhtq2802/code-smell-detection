{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.wicket.util.tester;\n\nimport static org.junit.jupiter.api.Assertions.fail;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.apache.wicket.Component;\nimport org.apache.wicket.Page;\nimport org.apache.wicket.ajax.AjaxEventBehavior;\nimport org.apache.wicket.behavior.Behavior;\nimport org.apache.wicket.util.io.IClusterable;\nimport org.apache.wicket.util.lang.Args;\nimport org.apache.wicket.util.string.Strings;\nimport org.apache.wicket.util.visit.IVisit;\nimport org.apache.wicket.util.visit.IVisitor;\n\n/**\n * A <code>WicketTester</code>-specific helper class.\n * \n * @author Ingram Chen\n * @since 1.2.6\n */\npublic class WicketTesterHelper\n{\n\t/**\n\t * <code>ComponentData</code> class.\n\t *\n\t * @author Ingram Chen\n\t * @since 1.2.6\n\t */\n\tpublic static class ComponentData implements IClusterable\n\t{\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t/** Component path. */\n\t\tpublic String path;\n\n\t\t/** Component type. */\n\t\tpublic String type;\n\n\t\t/** Component value. */\n\t\tpublic String value;\n\n\t\t/** Component visibility */\n\t\tpublic boolean isVisible;\n\n\t\t/** Whether Component is Enabled */\n\t\tpublic boolean isEnabled;\n\t}\n\n\t/**\n\t * Gets recursively all <code>Component</code>s of a given <code>Page</code>, extracts the\n\t * information relevant to us, and adds them to a <code>List</code>.\n\t *\n\t * @param page\n\t *            the <code>Page</code> to analyze\n\t * @return a <code>List</code> of <code>Component</code> data objects\n\t */\n\tpublic static List<WicketTesterHelper.ComponentData> getComponentData(final Page page)\n\t{\n\t\tfinal List<ComponentData> data = new ArrayList<>();\n\n\t\tif (page != null)\n\t\t{\n\t\t\tpage.visitChildren(new IVisitor<Component, Void>()\n\t\t\t{\n\t\t\t\t@Override\n\t\t\t\tpublic void component(final Component component, final IVisit<Void> visit)\n\t\t\t\t{\n\t\t\t\t\tfinal ComponentData object = new ComponentData();\n\n\t\t\t\t\t// anonymous class? Get the parent's class name\n\t\t\t\t\tString name = component.getClass().getName();\n\t\t\t\t\tif (name.indexOf(\"$\") > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tname = component.getClass().getSuperclass().getName();\n\t\t\t\t\t}\n\n\t\t\t\t\t// remove the path component\n\t\t\t\t\tname = Strings.lastPathComponent(name, Component.PATH_SEPARATOR);\n\n\t\t\t\t\tobject.path = component.getPageRelativePath();\n\t\t\t\t\tobject.type = name;\n\t\t\t\t\tobject.isVisible = component.isVisible();\n\t\t\t\t\tobject.isEnabled = component.isEnabled();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tobject.value = component.getDefaultModelObjectAsString();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e)\n\t\t\t\t\t{\n\t\t\t\t\t\tobject.value = e.getMessage();\n\t\t\t\t\t}\n\n\t\t\t\t\tdata.add(object);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn data;\n\t}\n\n\t/**\n\t * Asserts that both <code>Collection</code>s contain the same elements.\n\t *\n\t * @param expects\n\t *            a <code>Collection</code> object\n\t * @param actuals\n\t *            a <code>Collection</code> object\n\t */\n\tpublic static void assertEquals(final Collection<?> expects, final Collection<?> actuals)\n\t{\n\t\tif ((actuals.size() != expects.size()) || !expects.containsAll(actuals) ||\n\t\t\t!actuals.containsAll(expects))\n\t\t{\n\t\t\tfailWithVerboseMessage(expects, actuals);\n\t\t}\n\t}\n\n\t/**\n\t * Fails with a verbose error message.\n\t *\n\t * @param expects\n\t *            a <code>Collection</code> object\n\t * @param actuals\n\t *            a <code>Collection</code> object\n\t */\n\tpublic static void failWithVerboseMessage(final Collection<?> expects,\n\t\tfinal Collection<?> actuals)\n\t{\n\t\tfail(\"\\nexpect (\" + expects.size() + \"):\\n\" + asLined(expects) + \"\\nbut was (\" +\n\t\t\tactuals.size() + \"):\\n\" + asLined(actuals));\n\t}\n\n\t/**\n\t * A <code>toString</code> method for the given <code>Collection</code>.\n\t *\n\t * @param objects\n\t *            a <code>Collection</code> object\n\t * @return a <code>String</code> representation of the <code>Collection</code>\n\t */\n\tpublic static String asLined(final Collection<?> objects)\n\t{\n\t\tStringBuilder lined = new StringBuilder();\n\t\tfor (Iterator<?> iter = objects.iterator(); iter.hasNext();)\n\t\t{\n\t\t\tString objectString = iter.next().toString();\n\t\t\tlined.append(\"   \");\n\t\t\tlined.append(objectString);\n\t\t\tif (iter.hasNext())\n\t\t\t{\n\t\t\t\tlined.append('\\n');\n\t\t\t}\n\t\t}\n\t\treturn lined.toString();\n\t}\n\n\t/**\n\t * Finds the first AjaxEventBehavior attached to the specified component with the\n\t * specified event.\n\t *\n\t * @param component\n\t * @param event\n\t * @return the first behavior for this event, or {@code null}\n\t */\n\tpublic static AjaxEventBehavior findAjaxEventBehavior(Component component, String event)\n\t{\n\t\tList<AjaxEventBehavior> behaviors = findAjaxEventBehaviors(component, event);\n\t\tAjaxEventBehavior behavior = null;\n\t\tif (behaviors != null && behaviors.isEmpty() == false)\n\t\t{\n\t\t\tbehavior = behaviors.get(0);\n\t\t}\n\t\treturn behavior;\n\t}\n\n\t/**\n\t * Finds all AjaxEventBehavior's attached  to the specified component with\n\t * the specified event.\n\t *\n\t * @param component\n\t * @param event\n\t * @return a list of all found AjaxEventBehavior or an empty list\n\t */\n\tpublic static List<AjaxEventBehavior> findAjaxEventBehaviors(Component component, String event)\n\t{\n\t\tArgs.notEmpty(event, \"event\");\n\t\tList<AjaxEventBehavior> behaviors = new ArrayList<>();\n\t\tString[] eventNames = Strings.split(event, ' ');\n\t\tfor (String eventName : eventNames)\n\t\t{\n\t\t\tfor (Behavior behavior : component.getBehaviors())\n\t\t\t{\n\t\t\t\tif (behavior instanceof AjaxEventBehavior)\n\t\t\t\t{\n\t\t\t\t\tString behaviorEvent = ((AjaxEventBehavior)behavior).getEvent();\n\t\t\t\t\tString[] behaviorEventNames = Strings.split(behaviorEvent, ' ');\n\t\t\t\t\tfor (String behaviorEventName : behaviorEventNames)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (eventName.equalsIgnoreCase(behaviorEventName))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbehaviors.add((AjaxEventBehavior)behavior);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn behaviors;\n\t}\n\n\t/**\n\t * @param component\n\t * @param behaviorClass\n\t * @return Behavior or null\n\t */\n<fim_suffix>\tpublic static Behavior findBehavior(Component component, Class<? extends Behavior> behaviorClass)\n\t{\n\t\tfor (Behavior behavior : component.getBehaviors(behaviorClass))\n\t\t{\n\t\t\treturn behavior;\n\t\t}\n\t\treturn null;\n\t}\n\n}<fim_middle>// function below has no smell\n"}