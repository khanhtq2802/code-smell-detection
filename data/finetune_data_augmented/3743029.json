{"text": "<fim_prefix>/*\n * Copyright 1999-2018 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.alibaba.druid.sql.dialect.postgresql.visitor;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport com.alibaba.druid.sql.ast.expr.SQLBinaryExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLCaseExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLCharExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLInListExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLNullExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLNumberExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLQueryExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLUnaryExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLVariantRefExpr;\nimport com.alibaba.druid.sql.visitor.SQLEvalVisitor;\nimport com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;\nimport com.alibaba.druid.sql.visitor.functions.Function;\n\npublic class PGEvalVisitor extends PGASTVisitorAdapter implements SQLEvalVisitor {\n\n    private Map<String, Function> functions        = new HashMap<String, Function>();\n    private List<Object>          parameters       = new ArrayList<Object>();\n\n    private int                   variantIndex     = -1;\n\n    private boolean               markVariantIndex = true;\n\n    public PGEvalVisitor(){\n        this(new ArrayList<Object>(1));\n    }\n\n    public PGEvalVisitor(List<Object> parameters){\n        this.parameters = parameters;\n    }\n\n    public List<Object> getParameters() {\n        return parameters;\n    }\n\n    public void setParameters(List<Object> parameters) {\n        this.parameters = parameters;\n    }\n\n    public boolean visit(SQLCharExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n\n<fim_suffix>    public int incrementAndGetVariantIndex() {\n        return ++variantIndex;\n    }\n\n    public int getVariantIndex() {\n        return variantIndex;\n    }\n\n    public boolean visit(SQLVariantRefExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n\n    public boolean visit(SQLBinaryOpExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n\n    public boolean visit(SQLUnaryExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n\n    public boolean visit(SQLIntegerExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n\n    public boolean visit(SQLNumberExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n\n    @Override\n    public boolean visit(SQLCaseExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n\n    @Override\n    public boolean visit(SQLInListExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n\n    @Override\n    public boolean visit(SQLNullExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n\n    @Override\n    public boolean visit(SQLMethodInvokeExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n\n    @Override\n    public boolean visit(SQLQueryExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n\n    public boolean isMarkVariantIndex() {\n        return markVariantIndex;\n    }\n\n    public void setMarkVariantIndex(boolean markVariantIndex) {\n        this.markVariantIndex = markVariantIndex;\n    }\n\n    @Override\n    public Function getFunction(String funcName) {\n        return functions.get(funcName);\n    }\n\n    @Override\n    public void registerFunction(String funcName, Function function) {\n        functions.put(funcName, function);\n    }\n    \n    @Override\n    public void unregisterFunction(String funcName) {\n        functions.remove(funcName);\n    }\n\n    public boolean visit(SQLIdentifierExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n    \n    @Override\n    public boolean visit(SQLBinaryExpr x) {\n        return SQLEvalVisitorUtils.visit(this, x);\n    }\n}<fim_middle>// function below has no smell\n"}