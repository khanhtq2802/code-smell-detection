{"text": "<fim_prefix>  private final String authority;\n  private final String path;\n  private final String query;\n  private final String fragment;\n  private final Map<String, List<String>> queryParameters;\n  private final Map<String, List<String>> fragmentParameters;\n  private static UriParser parser = new DefaultUriParser();\n  @Inject(optional = true)\n  public static void setUriParser(UriParser uriParser) {\n    parser = uriParser;\n  }\n  Uri(UriBuilder builder) {\n    scheme = builder.getScheme();\n    authority = builder.getAuthority();\n    path = builder.getPath();\n    query = builder.getQuery();\n    fragment = builder.getFragment();\n    queryParameters = ImmutableMap.copyOf(builder.getQueryParameters());\n    fragmentParameters = ImmutableMap.copyOf(builder.getFragmentParameters());\n    StringBuilder out = new StringBuilder();\n    if (scheme != null) {\n      out.append(scheme).append(':');\n    }\n    if (authority != null) {\n      out.append(\"//\").append(authority);\n      // insure that there's a separator between authority/path\n      if (path != null && path.length() > 1 && !path.startsWith(\"/\")) {\n        out.append('/');\n      }\n    }\n    if (path != null) {\n      out.append(path);\n    }\n    if (query != null) {\n      out.append('?').append(query);\n    }\n    if (fragment != null) {\n      out.append('#').append(fragment);\n    }\n    text = out.toString();\n  }\n  /**\n   * Produces a new Uri from a text representation.\n   *\n   * @param text The text uri.\n   * @return A new Uri, parsed into components.\n   */\n  public static Uri parse(String text) {\n    try {\n      return parser.parse(text);\n    } catch (IllegalArgumentException e) {\n      // This occurs all the time. Wrap the exception in a Uri-specific\n      // exception, yet one that remains a RuntimeException, so that\n      // callers may catch a specific exception rather than a blanket\n      // Exception, as a compromise between throwing a checked exception\n      // here (forcing wide-scale refactoring across the code base) and\n      // forcing users to simply catch abstract Exceptions here and there.\n      throw new UriException(e);\n    }\n  }\n  /**\n   * Convert a java.net.URI to a Uri.\n   * @param uri the uri to convert\n   * @return a shindig Uri\n   */\n  public static Uri fromJavaUri(URI uri) {\n    if (uri.isOpaque()) {\n      throw new UriException(\"No support for opaque Uris \" + uri.toString());\n    }\n    return new UriBuilder()\n        .setScheme(uri.getScheme())\n        .setAuthority(uri.getRawAuthority())\n        .setPath(uri.getRawPath())\n        .setQuery(uri.getRawQuery())\n        .setFragment(uri.getRawFragment())\n        .toUri();\n  }\n  /**\n   * @return a java.net.URI equal to this Uri.\n   */\n  public URI toJavaUri() {\n    try {\n      return new URI(toString());\n    } catch (URISyntaxException e) {\n      // Shouldn't ever happen.\n      throw new UriException(e);\n    }\n  }\n  /**\n   * Derived from Harmony\n   * Resolves a given url relative to this url. Resolution rules are the same as for\n   * {@code java.net.URI.resolve(URI)}\n   */\n  public Uri resolve(Uri relative) {\n    if (relative == null) {\n      return null;\n    }\n    if (relative.isAbsolute()) {\n      return relative;\n    }\n    UriBuilder result;\n    if (Strings.isNullOrEmpty(relative.path) && relative.scheme == null\n        && relative.authority == null && relative.query == null\n        && relative.fragment != null) {\n      // if the relative URI only consists of fragment,\n      // the resolved URI is very similar to this URI,\n      // except that it has the fragement from the relative URI.\n      result = new UriBuilder(this);\n      result.setFragment(relative.fragment);\n    } else if (relative.scheme != null) {\n      result = new UriBuilder(relative);\n    } else if (relative.authority != null) {\n      // if the relative URI has authority,\n      // the resolved URI is almost the same as the relative URI,\n      // except that it has the scheme of this URI.\n      result = new UriBuilder(relative);\n      result.setScheme(scheme);\n    } else {\n      // since relative URI has no authority,\n      // the resolved URI is very similar to this URI,\n      // except that it has the query and fragment of the relative URI,\n      // and the path is different.\n      result = new UriBuilder(this);\n      result.setFragment(relative.fragment);\n      result.setQuery(relative.query);\n      String relativePath = Objects.firstNonNull(relative.path, \"\");\n      if (relativePath.startsWith(\"/\")) { //$NON-NLS-1$\n        result.setPath(relativePath);\n      } else {\n        // resolve a relative reference\n        String basePath = path != null ? path : \"/\";\n        int endindex = basePath.lastIndexOf('/') + 1;\n        result.setPath(normalizePath(basePath.substring(0, endindex) + relativePath));\n      }\n    }\n    Uri resolved = result.toUri();\n    validate(resolved);\n    return resolved;\n  }\n  private static void validate(Uri uri) {\n    if (Strings.isNullOrEmpty(uri.authority) &&\n        Strings.isNullOrEmpty(uri.path) &&\n        Strings.isNullOrEmpty(uri.query)) {\n      throw new UriException(\"Invalid scheme-specific part\");\n    }\n  }\n  /**\n   * Dervived from harmony\n   * normalize path, and return the resulting string\n   */\n<fim_suffix>  private static String normalizePath(String path) {\n    // count the number of '/'s, to determine number of segments\n    int index = -1;\n    int pathlen = path.length();\n    int size = 0;\n    if (pathlen > 0 && path.charAt(0) != '/') {\n      size++;\n    }\n    while ((index = path.indexOf('/', index + 1)) != -1) {\n      if (index + 1 < pathlen && path.charAt(index + 1) != '/') {\n        size++;\n      }\n    }\n    String[] seglist = new String[size];\n    boolean[] include = new boolean[size];\n    // break the path into segments and store in the list\n    int current = 0;\n    int index2 = 0;\n    index = (pathlen > 0 && path.charAt(0) == '/') ? 1 : 0;\n    while ((index2 = path.indexOf('/', index + 1)) != -1) {\n      seglist[current++] = path.substring(index, index2);\n      index = index2 + 1;\n    }\n    // if current==size, then the last character was a slash\n    // and there are no more segments\n    if (current < size) {\n      seglist[current] = path.substring(index);\n    }\n    // determine which segments get included in the normalized path\n    for (int i = 0; i < size; i++) {\n      include[i] = true;\n      if (seglist[i].equals(\"..\")) { //$NON-NLS-1$\n        int remove = i - 1;\n        // search back to find a segment to remove, if possible\n        while (remove > -1 && !include[remove]) {\n          remove--;\n        }\n        // if we find a segment to remove, remove it and the \"..\"\n        // segment\n        if (remove > -1 && !seglist[remove].equals(\"..\")) { //$NON-NLS-1$\n          include[remove] = false;\n          include[i] = false;\n        }\n      } else if (seglist[i].equals(\".\")) { //$NON-NLS-1$\n        include[i] = false;\n      }\n    }\n    // put the path back together\n    StringBuilder newpath = new StringBuilder();\n    if (path.startsWith(\"/\")) { //$NON-NLS-1$\n      newpath.append('/');\n    }\n    for (int i = 0; i < seglist.length; i++) {\n      if (include[i]) {\n        newpath.append(seglist[i]);\n        newpath.append('/');\n      }\n    }\n    // if we used at least one segment and the path previously ended with\n    // a slash and the last segment is still used, then delete the extra\n    // trailing '/'\n    if (!path.endsWith(\"/\") && seglist.length > 0 //$NON-NLS-1$\n        && include[seglist.length - 1]) {\n      newpath.deleteCharAt(newpath.length() - 1);\n    }\n    String result = newpath.toString();\n    // check for a ':' in the first segment if one exists,\n    // prepend \"./\" to normalize\n    index = result.indexOf(':');\n    index2 = result.indexOf('/');\n    if (index != -1 && (index < index2 || index2 == -1)) {\n      newpath.insert(0, \"./\"); //$NON-NLS-1$\n      result = newpath.toString();\n    }\n    return result;\n  }<fim_middle>// function below is long method\n"}