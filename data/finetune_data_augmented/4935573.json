{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jclouds.gogrid.domain;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport java.beans.ConstructorProperties;\n\nimport org.jclouds.javax.annotation.Nullable;\n\nimport com.google.common.base.MoreObjects;\nimport com.google.common.base.Objects;\nimport com.google.common.base.MoreObjects.ToStringHelper;\nimport com.google.common.primitives.Longs;\n\n/**\n * Class Option\n * \n*/\npublic class Option implements Comparable<Option> {\n\n   public static Builder<?> builder() { \n      return new ConcreteBuilder();\n   }\n   \n   public Builder<?> toBuilder() { \n      return new ConcreteBuilder().fromOption(this);\n   }\n   \n   public static Option createWithIdNameAndDescription(Long id, String name, String description) {\n      return new Option(id, name, description);\n   }\n\n<fim_suffix>   public abstract static class Builder<T extends Builder<T>>  {\n      protected abstract T self();\n\n      protected Long id;\n      protected String name;\n      protected String description;\n   \n      /** \n       * @see Option#getId()\n       */\n      public T id(Long id) {\n         this.id = id;\n         return self();\n      }\n\n      /** \n       * @see Option#getName()\n       */\n      public T name(String name) {\n         this.name = name;\n         return self();\n      }\n\n      /** \n       * @see Option#getDescription()\n       */\n      public T description(String description) {\n         this.description = description;\n         return self();\n      }\n\n      public Option build() {\n         return new Option(id, name, description);\n      }\n      \n      public T fromOption(Option in) {\n         return this\n                  .id(in.getId())\n                  .name(in.getName())\n                  .description(in.getDescription());\n      }\n   }\n\n   private static class ConcreteBuilder extends Builder<ConcreteBuilder> {\n      @Override\n      protected ConcreteBuilder self() {\n         return this;\n      }\n   }\n\n   private final Long id;\n   private final String name;\n   private final String description;\n\n   @ConstructorProperties({\n      \"id\", \"name\", \"description\"\n   })\n   protected Option(Long id, String name, @Nullable String description) {\n      this.id = checkNotNull(id, \"id\");\n      this.name = checkNotNull(name, \"name\");\n      this.description = description;\n   }\n\n   public Long getId() {\n      return this.id;\n   }\n\n   public String getName() {\n      return this.name;\n   }\n\n   @Nullable\n   public String getDescription() {\n      return this.description;\n   }\n\n   @Override\n   public int hashCode() {\n      return Objects.hashCode(id, name, description);\n   }\n\n   @Override\n   public boolean equals(Object obj) {\n      if (this == obj) return true;\n      if (obj == null || getClass() != obj.getClass()) return false;\n      Option that = Option.class.cast(obj);\n      return Objects.equal(this.id, that.id)\n               && Objects.equal(this.name, that.name)\n               && Objects.equal(this.description, that.description);\n   }\n   \n   protected ToStringHelper string() {\n      return MoreObjects.toStringHelper(this)\n            .add(\"id\", id).add(\"name\", name).add(\"description\", description);\n   }\n   \n   @Override\n   public String toString() {\n      return string().toString();\n   }\n\n   @Override\n   public int compareTo(Option o) {\n      return Longs.compare(id, o.id);\n   }\n}<fim_middle>// class below has no smell\n"}