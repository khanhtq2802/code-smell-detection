{"text": "<fim_prefix>/*\n * Copyright (C) 2008 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.taobao.android.dex;\n\nimport com.taobao.android.dex.util.ByteInput;\nimport com.taobao.android.dex.util.ByteOutput;\n\n/**\n * Reads and writes DWARFv3 LEB 128 signed and unsigned integers. See DWARF v3\n * section 7.6.\n */\n<fim_suffix>public final class Leb128 {\n    private Leb128() {\n    }\n\n    /**\n     * Gets the number of bytes in the unsigned LEB128 encoding of the\n     * given value.\n     *\n     * @param value the value in question\n     * @return its write size, in bytes\n     */\n    public static int unsignedLeb128Size(int value) {\n        // TODO: This could be much cleverer.\n\n        int remaining = value >> 7;\n        int count = 0;\n\n        while (remaining != 0) {\n            remaining >>= 7;\n            count++;\n        }\n\n        return count + 1;\n    }\n\n    /**\n     * Gets the number of bytes in the signed LEB128 encoding of the\n     * given value.\n     *\n     * @param value the value in question\n     * @return its write size, in bytes\n     */\n    public static int signedLeb128Size(int value) {\n        // TODO: This could be much cleverer.\n\n        int remaining = value >> 7;\n        int count = 0;\n        boolean hasMore = true;\n        int end = ((value & Integer.MIN_VALUE) == 0) ? 0 : -1;\n\n        while (hasMore) {\n            hasMore = (remaining != end)\n                || ((remaining & 1) != ((value >> 6) & 1));\n\n            value = remaining;\n            remaining >>= 7;\n            count++;\n        }\n\n        return count;\n    }\n\n    /**\n     * Reads an signed integer from {@code in}.\n     */\n    public static int readSignedLeb128(ByteInput in) {\n        int result = 0;\n        int cur;\n        int count = 0;\n        int signBits = -1;\n\n        do {\n            cur = in.readByte() & 0xff;\n            result |= (cur & 0x7f) << (count * 7);\n            signBits <<= 7;\n            count++;\n        } while (((cur & 0x80) == 0x80) && count < 5);\n\n        if ((cur & 0x80) == 0x80) {\n            throw new DexException(\"invalid LEB128 sequence\");\n        }\n\n        // Sign extend if appropriate\n        if (((signBits >> 1) & result) != 0 ) {\n            result |= signBits;\n        }\n\n        return result;\n    }\n\n    /**\n     * Reads an unsigned integer from {@code in}.\n     */\n    public static int readUnsignedLeb128(ByteInput in) {\n        int result = 0;\n        int cur;\n        int count = 0;\n\n        do {\n            cur = in.readByte() & 0xff;\n            result |= (cur & 0x7f) << (count * 7);\n            count++;\n        } while (((cur & 0x80) == 0x80) && count < 5);\n\n        if ((cur & 0x80) == 0x80) {\n            throw new DexException(\"invalid LEB128 sequence\");\n        }\n\n        return result;\n    }\n\n    /**\n     * Writes {@code value} as an unsigned integer to {@code out}, starting at\n     * {@code offset}. Returns the number of bytes written.\n     */\n    public static void writeUnsignedLeb128(ByteOutput out, int value) {\n        int remaining = value >>> 7;\n\n        while (remaining != 0) {\n            out.writeByte((byte) ((value & 0x7f) | 0x80));\n            value = remaining;\n            remaining >>>= 7;\n        }\n\n        out.writeByte((byte) (value & 0x7f));\n    }\n\n    /**\n     * Writes {@code value} as a signed integer to {@code out}, starting at\n     * {@code offset}. Returns the number of bytes written.\n     */\n    public static void writeSignedLeb128(ByteOutput out, int value) {\n        int remaining = value >> 7;\n        boolean hasMore = true;\n        int end = ((value & Integer.MIN_VALUE) == 0) ? 0 : -1;\n\n        while (hasMore) {\n            hasMore = (remaining != end)\n                    || ((remaining & 1) != ((value >> 6) & 1));\n\n            out.writeByte((byte) ((value & 0x7f) | (hasMore ? 0x80 : 0)));\n            value = remaining;\n            remaining >>= 7;\n        }\n    }\n}<fim_middle>// class below has no smell\n"}