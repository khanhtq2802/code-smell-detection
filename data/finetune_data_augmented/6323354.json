{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2017 Eurotech and/or its affiliates and others\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Eurotech - initial API and implementation\n *     Red Hat Inc\n *******************************************************************************/\npackage org.eclipse.kapua.service.stream.internal;\n\nimport org.eclipse.kapua.KapuaEntityNotFoundException;\nimport org.eclipse.kapua.KapuaException;\nimport org.eclipse.kapua.commons.util.ArgumentValidator;\nimport org.eclipse.kapua.locator.KapuaLocator;\nimport org.eclipse.kapua.locator.KapuaProvider;\nimport org.eclipse.kapua.message.Message;\nimport org.eclipse.kapua.message.device.data.KapuaDataMessage;\nimport org.eclipse.kapua.model.domain.Actions;\nimport org.eclipse.kapua.service.authorization.AuthorizationService;\nimport org.eclipse.kapua.service.authorization.permission.PermissionFactory;\nimport org.eclipse.kapua.service.device.call.kura.exception.KuraMqttDeviceCallErrorCodes;\nimport org.eclipse.kapua.service.device.call.kura.exception.KuraMqttDeviceCallException;\nimport org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\nimport org.eclipse.kapua.service.device.management.message.response.KapuaResponseMessage;\nimport org.eclipse.kapua.service.device.registry.Device;\nimport org.eclipse.kapua.service.device.registry.DeviceRegistryService;\nimport org.eclipse.kapua.service.stream.StreamDomains;\nimport org.eclipse.kapua.service.stream.StreamService;\nimport org.eclipse.kapua.translator.Translator;\nimport org.eclipse.kapua.transport.TransportClientFactory;\nimport org.eclipse.kapua.transport.TransportFacade;\nimport org.eclipse.kapua.transport.message.TransportMessage;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@KapuaProvider\npublic class StreamServiceImpl implements StreamService {\n\n    private static final KapuaLocator LOCATOR = KapuaLocator.getInstance();\n\n    private static final AuthorizationService AUTHORIZATION_SERVICE = LOCATOR.getService(AuthorizationService.class);\n    private static final PermissionFactory PERMISSION_FACTORY = LOCATOR.getFactory(PermissionFactory.class);\n\n    private static final DeviceRegistryService DEVICE_REGISTRY_SERVICE = LOCATOR.getService(DeviceRegistryService.class);\n\n<fim_suffix>    @Override\n    public KapuaResponseMessage<?, ?> publish(KapuaDataMessage requestMessage, Long timeout)\n            throws KapuaException {\n        //\n        // Argument validation\n        ArgumentValidator.notNull(requestMessage.getScopeId(), \"scopeId\");\n        ArgumentValidator.notNull(requestMessage.getDeviceId(), \"deviceId\");\n        ArgumentValidator.notNull(requestMessage.getClientId(), \"clientId\");\n\n        //\n        // Check Access\n        AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(StreamDomains.STREAM_DOMAIN, Actions.write, requestMessage.getScopeId()));\n\n        //\n        // Do publish\n        TransportFacade<?, ?, TransportMessage<?, ?>, ?> transportFacade = null;\n        try {\n\n            Device device = DEVICE_REGISTRY_SERVICE.find(requestMessage.getScopeId(), requestMessage.getDeviceId());\n\n            if (device == null) {\n                throw new KapuaEntityNotFoundException(Device.TYPE, requestMessage.getDeviceId());\n            }\n\n            String nodeUri = device.getConnection().getServerIp();\n\n            //\n            // Borrow a KapuaClient\n            transportFacade = borrowClient(nodeUri);\n\n            //\n            // Get Kura to transport translator for the request and vice versa\n            Translator<KapuaDataMessage, KuraDataMessage> translatorKapuaKura = getTranslator(KapuaDataMessage.class, KuraDataMessage.class);\n            Translator<KuraDataMessage, ?> translatorKuraTransport = getTranslator(KuraDataMessage.class, transportFacade.getMessageClass());\n\n            KuraDataMessage kuraDataMessage = translatorKapuaKura.translate(requestMessage);\n\n            //\n            // Do send\n            try {\n                // Set current timestamp\n                kuraDataMessage.setTimestamp(new Date());\n\n                // Send\n                transportFacade.sendAsync((TransportMessage<?, ?>) translatorKuraTransport.translate(kuraDataMessage));\n\n            } catch (KapuaException e) {\n                throw new KuraMqttDeviceCallException(KuraMqttDeviceCallErrorCodes.CLIENT_SEND_ERROR,\n                        e,\n                        (Object[]) null);\n            }\n        } catch (KapuaException ke) {\n            throw new KuraMqttDeviceCallException(KuraMqttDeviceCallErrorCodes.CALL_ERROR,\n                    ke,\n                    (Object[]) null);\n        } finally {\n            if (transportFacade != null) {\n                transportFacade.clean();\n            }\n        }\n\n        return null;\n    }\n\n    //\n    // Private methods\n    //\n    private TransportFacade<?, ?, TransportMessage<?, ?>, ?> borrowClient(String serverUri)\n            throws KuraMqttDeviceCallException {\n        TransportFacade<?, ?, TransportMessage<?, ?>, ?> transportFacade;\n        Map<String, Object> configParameters = new HashMap<>();\n        configParameters.put(\"serverAddress\", serverUri);\n        try {\n            KapuaLocator locator = KapuaLocator.getInstance();\n            TransportClientFactory<?, ?, ?, ?, ?, ?> transportClientFactory = locator.getFactory(TransportClientFactory.class);\n\n            transportFacade = (TransportFacade<?, ?, TransportMessage<?, ?>, ?>) transportClientFactory.getFacade(configParameters);\n        } catch (Exception e) {\n            throw new KuraMqttDeviceCallException(KuraMqttDeviceCallErrorCodes.CALL_ERROR,\n                    e,\n                    (Object[]) null);\n        }\n        return transportFacade;\n    }\n\n    private <T1 extends Message<?, ?>, T2 extends Message<?, ?>> Translator<T1, T2> getTranslator(Class<T1> from, Class<T2> to)\n            throws KuraMqttDeviceCallException {\n        Translator<T1, T2> translator;\n        try {\n            translator = Translator.getTranslatorFor(from, to);\n        } catch (KapuaException e) {\n            throw new KuraMqttDeviceCallException(KuraMqttDeviceCallErrorCodes.CALL_ERROR,\n                    e,\n                    (Object[]) null);\n        }\n        return translator;\n    }\n}<fim_middle>// function below has no smell\n"}