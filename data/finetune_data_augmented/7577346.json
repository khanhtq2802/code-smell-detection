{"text": "<fim_prefix>/*\n * Copyright 2002-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.web.socket.sockjs.support;\n\nimport java.io.IOException;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.context.Lifecycle;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.http.server.ServletServerHttpRequest;\nimport org.springframework.http.server.ServletServerHttpResponse;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.web.HttpRequestHandler;\nimport org.springframework.web.context.ServletContextAware;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.socket.WebSocketHandler;\nimport org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator;\nimport org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator;\nimport org.springframework.web.socket.sockjs.SockJsException;\nimport org.springframework.web.socket.sockjs.SockJsService;\n\n/**\n * An {@link HttpRequestHandler} that allows mapping a {@link SockJsService} to requests\n * in a Servlet container.\n *\n * @author Rossen Stoyanchev\n * @author Sebastien Deleuze\n * @since 4.0\n */\npublic class SockJsHttpRequestHandler\n\t\timplements HttpRequestHandler, CorsConfigurationSource, Lifecycle, ServletContextAware {\n\n\t// No logging: HTTP transports too verbose and we don't know enough to log anything of value\n\n\tprivate final SockJsService sockJsService;\n\n\tprivate final WebSocketHandler webSocketHandler;\n\n\tprivate volatile boolean running = false;\n\n\n\t/**\n\t * Create a new SockJsHttpRequestHandler.\n\t * @param sockJsService the SockJS service\n\t * @param webSocketHandler the websocket handler\n\t */\n\tpublic SockJsHttpRequestHandler(SockJsService sockJsService, WebSocketHandler webSocketHandler) {\n\t\tAssert.notNull(sockJsService, \"SockJsService must not be null\");\n\t\tAssert.notNull(webSocketHandler, \"WebSocketHandler must not be null\");\n\t\tthis.sockJsService = sockJsService;\n\t\tthis.webSocketHandler =\n\t\t\t\tnew ExceptionWebSocketHandlerDecorator(new LoggingWebSocketHandlerDecorator(webSocketHandler));\n\t}\n\n\n\t/**\n\t * Return the {@link SockJsService}.\n\t */\n\tpublic SockJsService getSockJsService() {\n\t\treturn this.sockJsService;\n\t}\n\n\t/**\n\t * Return the {@link WebSocketHandler}.\n\t */\n\tpublic WebSocketHandler getWebSocketHandler() {\n\t\treturn this.webSocketHandler;\n\t}\n\n\t@Override\n\tpublic void setServletContext(ServletContext servletContext) {\n\t\tif (this.sockJsService instanceof ServletContextAware) {\n\t\t\t((ServletContextAware) this.sockJsService).setServletContext(servletContext);\n\t\t}\n\t}\n\n\n\t@Override\n\tpublic void start() {\n\t\tif (!isRunning()) {\n\t\t\tthis.running = true;\n\t\t\tif (this.sockJsService instanceof Lifecycle) {\n\t\t\t\t((Lifecycle) this.sockJsService).start();\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void stop() {\n\t\tif (isRunning()) {\n\t\t\tthis.running = false;\n\t\t\tif (this.sockJsService instanceof Lifecycle) {\n\t\t\t\t((Lifecycle) this.sockJsService).stop();\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean isRunning() {\n\t\treturn this.running;\n\t}\n\n\n<fim_suffix>\t@Override\n\tpublic void handleRequest(HttpServletRequest servletRequest, HttpServletResponse servletResponse)\n\t\t\tthrows ServletException, IOException {\n\n\t\tServerHttpRequest request = new ServletServerHttpRequest(servletRequest);\n\t\tServerHttpResponse response = new ServletServerHttpResponse(servletResponse);\n\n\t\ttry {\n\t\t\tthis.sockJsService.handleRequest(request, response, getSockJsPath(servletRequest), this.webSocketHandler);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow new SockJsException(\"Uncaught failure in SockJS request, uri=\" + request.getURI(), ex);\n\t\t}\n\t}\n\n\tprivate String getSockJsPath(HttpServletRequest servletRequest) {\n\t\tString attribute = HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;\n\t\tString path = (String) servletRequest.getAttribute(attribute);\n\t\treturn (path.length() > 0 && path.charAt(0) != '/' ? \"/\" + path : path);\n\t}\n\n\t@Override\n\t@Nullable\n\tpublic CorsConfiguration getCorsConfiguration(HttpServletRequest request) {\n\t\tif (this.sockJsService instanceof CorsConfigurationSource) {\n\t\t\treturn ((CorsConfigurationSource) this.sockJsService).getCorsConfiguration(request);\n\t\t}\n\t\treturn null;\n\t}\n\n}<fim_middle>// function below has no smell\n"}