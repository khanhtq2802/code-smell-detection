{"text": "<fim_prefix>import org.apache.brooklyn.container.entity.kubernetes.KubernetesResource;\nimport org.apache.brooklyn.container.location.docker.DockerJcloudsLocation;\nimport org.apache.brooklyn.container.location.kubernetes.machine.KubernetesEmptyMachineLocation;\nimport org.apache.brooklyn.container.location.kubernetes.machine.KubernetesMachineLocation;\nimport org.apache.brooklyn.container.location.kubernetes.machine.KubernetesSshMachineLocation;\nimport org.apache.brooklyn.core.entity.BrooklynConfigKeys;\nimport org.apache.brooklyn.core.entity.EntityInternal;\nimport org.apache.brooklyn.core.location.AbstractLocation;\nimport org.apache.brooklyn.core.location.LocationConfigKeys;\nimport org.apache.brooklyn.core.location.PortRanges;\nimport org.apache.brooklyn.core.location.access.PortForwardManager;\nimport org.apache.brooklyn.core.location.access.PortForwardManagerLocationResolver;\nimport org.apache.brooklyn.core.location.cloud.CloudLocationConfig;\nimport org.apache.brooklyn.core.network.OnPublicNetworkEnricher;\nimport org.apache.brooklyn.core.sensor.Sensors;\nimport org.apache.brooklyn.location.ssh.SshMachineLocation;\nimport org.apache.brooklyn.util.collections.MutableList;\nimport org.apache.brooklyn.util.collections.MutableMap;\nimport org.apache.brooklyn.util.core.ResourceUtils;\nimport org.apache.brooklyn.util.core.config.ConfigBag;\nimport org.apache.brooklyn.util.core.config.ResolvingConfigBag;\nimport org.apache.brooklyn.util.core.internal.ssh.SshTool;\nimport org.apache.brooklyn.util.core.text.TemplateProcessor;\nimport org.apache.brooklyn.util.exceptions.ReferenceWithError;\nimport org.apache.brooklyn.util.net.Networking;\nimport org.apache.brooklyn.util.repeat.Repeater;\nimport org.apache.brooklyn.util.stream.Streams;\nimport org.apache.brooklyn.util.text.Identifiers;\nimport org.apache.brooklyn.util.text.Strings;\nimport org.apache.brooklyn.util.time.Duration;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.google.common.base.Functions;\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Optional;\nimport com.google.common.base.Predicate;\nimport com.google.common.base.Predicates;\nimport com.google.common.base.Stopwatch;\nimport com.google.common.base.Throwables;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\nimport com.google.common.io.BaseEncoding;\nimport com.google.common.net.HostAndPort;\nimport io.fabric8.kubernetes.api.model.Container;\nimport io.fabric8.kubernetes.api.model.ContainerBuilder;\nimport io.fabric8.kubernetes.api.model.ContainerPort;\nimport io.fabric8.kubernetes.api.model.ContainerPortBuilder;\nimport io.fabric8.kubernetes.api.model.EndpointAddress;\nimport io.fabric8.kubernetes.api.model.EndpointSubset;\nimport io.fabric8.kubernetes.api.model.Endpoints;\nimport io.fabric8.kubernetes.api.model.EnvVar;\nimport io.fabric8.kubernetes.api.model.EnvVarBuilder;\nimport io.fabric8.kubernetes.api.model.HasMetadata;\nimport io.fabric8.kubernetes.api.model.Namespace;\nimport io.fabric8.kubernetes.api.model.NamespaceBuilder;\nimport io.fabric8.kubernetes.api.model.PersistentVolume;\nimport io.fabric8.kubernetes.api.model.PersistentVolumeBuilder;\nimport io.fabric8.kubernetes.api.model.Pod;\nimport io.fabric8.kubernetes.api.model.PodList;\nimport io.fabric8.kubernetes.api.model.PodTemplateSpec;\nimport io.fabric8.kubernetes.api.model.PodTemplateSpecBuilder;\nimport io.fabric8.kubernetes.api.model.QuantityBuilder;\nimport io.fabric8.kubernetes.api.model.ReplicationController;\nimport io.fabric8.kubernetes.api.model.ResourceRequirements;\nimport io.fabric8.kubernetes.api.model.ResourceRequirementsBuilder;\nimport io.fabric8.kubernetes.api.model.Secret;\nimport io.fabric8.kubernetes.api.model.SecretBuilder;\nimport io.fabric8.kubernetes.api.model.Service;\nimport io.fabric8.kubernetes.api.model.ServiceBuilder;\nimport io.fabric8.kubernetes.api.model.ServicePort;\nimport io.fabric8.kubernetes.api.model.ServicePortBuilder;\nimport io.fabric8.kubernetes.api.model.extensions.Deployment;\nimport io.fabric8.kubernetes.api.model.extensions.DeploymentBuilder;\nimport io.fabric8.kubernetes.api.model.extensions.DeploymentStatus;\nimport io.fabric8.kubernetes.client.KubernetesClient;\nimport io.fabric8.kubernetes.client.KubernetesClientException;\npublic class KubernetesLocation extends AbstractLocation implements MachineProvisioningLocation<KubernetesMachineLocation>, KubernetesLocationConfig {\n    /*\n     * TODO\n     *\n     *  - Ignores config such as 'user' and 'password', just uses 'loginUser'\n     *    and 'loginUser.password' for connecting to the container.\n     *  - Does not create a user, so behaves differently from things that use\n     *    JcloudsLocation.\n     *  - Does not use ssh keys only passwords.\n     *  - The 'brooklyncentral/*' images use root which is discouraged.\n     *  - Error handling needs revisited. For example, if provisioning fails then\n     *    it waits for five minutes and then fails without a reason why.\n     *    e.g. try launching a container with an incorrect image name.\n     */\n    public static final String NODE_PORT = \"NodePort\";\n    public static final String IMMUTABLE_CONTAINER_KEY = \"immutable-container\";\n    public static final String SSHABLE_CONTAINER = \"sshable-container\";\n    public static final String BROOKLYN_ENTITY_ID = \"brooklyn.apache.org/entity-id\";\n    public static final String BROOKLYN_APPLICATION_ID = \"brooklyn.apache.org/application-id\";\n    public static final String KUBERNETES_DOCKERCFG = \"kubernetes.io/dockercfg\";\n    public static final String PHASE_AVAILABLE = \"Available\";\n    public static final String PHASE_TERMINATING = \"Terminating\";\n    public static final String PHASE_ACTIVE = \"Active\";\n    /**\n     * The regex for the image descriptions that support us injecting login credentials.\n     */\n    public static final List<String> IMAGE_DESCRIPTION_REGEXES_REQUIRING_INJECTED_LOGIN_CREDS = ImmutableList.of(\n            \"brooklyncentral/centos.*\",\n            \"brooklyncentral/ubuntu.*\");\n    /**\n     * The environment variable for injecting login credentials.\n     */\n    public static final String BROOKLYN_ROOT_PASSWORD = \"BROOKLYN_ROOT_PASSWORD\";\n    private static final Logger LOG = LoggerFactory.getLogger(KubernetesLocation.class);\n    private KubernetesClient client;\n    public KubernetesLocation() {\n        super();\n    }\n    public KubernetesLocation(Map<?, ?> properties) {\n        super(properties);\n    }\n    @Override\n    public void init() {\n        super.init();\n    }\n    protected KubernetesClient getClient() {\n        return getClient(MutableMap.of());\n    }\n    protected KubernetesClient getClient(Map<?, ?> flags) {\n        ConfigBag conf = (flags == null || flags.isEmpty())\n                ? config().getBag()\n                : ConfigBag.newInstanceExtending(config().getBag(), flags);\n        return getClient(conf);\n    }\n<fim_suffix>    protected KubernetesClient getClient(ConfigBag config) {\n        if (client == null) {\n            KubernetesClientRegistry registry = getConfig(KUBERNETES_CLIENT_REGISTRY);\n            client = registry.getKubernetesClient(ResolvingConfigBag.newInstanceExtending(getManagementContext(), config));\n        }\n        return client;\n    }<fim_middle>// function below has no smell\n"}