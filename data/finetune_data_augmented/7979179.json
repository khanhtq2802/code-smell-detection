{"text": "<fim_prefix>package org.eclipse.xtext.ui.tests.editor.contentassist.parser.antlr.internal;\n// Hack: Use our own Lexer superclass by means of import. \n// Currently there is no other way to specify the superclass for the lexer.\nimport org.eclipse.xtext.parser.antlr.Lexer;\nimport org.antlr.runtime.*;\nimport java.util.Stack;\nimport java.util.List;\nimport java.util.ArrayList;\n@SuppressWarnings(\"all\")\npublic class InternalBug288734TestLanguageLexer extends Lexer {\n    public static final int RULE_ID=4;\n    public static final int RULE_WS=9;\n    public static final int RULE_STRING=5;\n    public static final int RULE_ANY_OTHER=10;\n    public static final int RULE_SL_COMMENT=8;\n    public static final int T__15=15;\n    public static final int RULE_INT=6;\n    public static final int T__11=11;\n    public static final int RULE_ML_COMMENT=7;\n    public static final int T__12=12;\n    public static final int T__13=13;\n    public static final int T__14=14;\n    public static final int EOF=-1;\n    // delegates\n    // delegators\n    public InternalBug288734TestLanguageLexer() {;} \n    public InternalBug288734TestLanguageLexer(CharStream input) {\n        this(input, new RecognizerSharedState());\n    }\n    public InternalBug288734TestLanguageLexer(CharStream input, RecognizerSharedState state) {\n        super(input,state);\n    }\n    public String getGrammarFileName() { return \"InternalBug288734TestLanguage.g\"; }\n    // $ANTLR start \"T__11\"\n    public final void mT__11() throws RecognitionException {\n        try {\n            int _type = T__11;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalBug288734TestLanguage.g:11:7: ( 'constant' )\n            // InternalBug288734TestLanguage.g:11:9: 'constant'\n            {\n            match(\"constant\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"T__11\"\n    // $ANTLR start \"T__12\"\n    public final void mT__12() throws RecognitionException {\n        try {\n            int _type = T__12;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalBug288734TestLanguage.g:12:7: ( 'string' )\n            // InternalBug288734TestLanguage.g:12:9: 'string'\n            {\n            match(\"string\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"T__12\"\n    // $ANTLR start \"T__13\"\n    public final void mT__13() throws RecognitionException {\n        try {\n            int _type = T__13;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalBug288734TestLanguage.g:13:7: ( 'integer' )\n            // InternalBug288734TestLanguage.g:13:9: 'integer'\n            {\n            match(\"integer\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"T__13\"\n    // $ANTLR start \"T__14\"\n    public final void mT__14() throws RecognitionException {\n        try {\n            int _type = T__14;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalBug288734TestLanguage.g:14:7: ( 'boolean' )\n            // InternalBug288734TestLanguage.g:14:9: 'boolean'\n            {\n            match(\"boolean\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"T__14\"\n    // $ANTLR start \"T__15\"\n<fim_suffix>    public final void mT__15() throws RecognitionException {\n        try {\n            int _type = T__15;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalBug288734TestLanguage.g:15:7: ( '@desc' )\n            // InternalBug288734TestLanguage.g:15:9: '@desc'\n            {\n            match(\"@desc\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"T__15\"\n    // $ANTLR start \"RULE_ID\"\n    public final void mRULE_ID() throws RecognitionException {\n        try {\n            int _type = RULE_ID;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalBug288734TestLanguage.g:377:9: ( ( '^' )? ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )\n            // InternalBug288734TestLanguage.g:377:11: ( '^' )? ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*\n            {\n            // InternalBug288734TestLanguage.g:377:11: ( '^' )?\n            int alt1=2;\n            int LA1_0 = input.LA(1);\n            if ( (LA1_0=='^') ) {\n                alt1=1;\n            }\n            switch (alt1) {\n                case 1 :\n                    // InternalBug288734TestLanguage.g:377:11: '^'\n                    {\n                    match('^'); \n                    }\n                    break;\n            }\n            if ( (input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {\n                input.consume();\n            }\n            else {\n                MismatchedSetException mse = new MismatchedSetException(null,input);\n                recover(mse);\n                throw mse;}\n            // InternalBug288734TestLanguage.g:377:40: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*\n            loop2:\n            do {\n                int alt2=2;\n                int LA2_0 = input.LA(1);\n                if ( ((LA2_0>='0' && LA2_0<='9')||(LA2_0>='A' && LA2_0<='Z')||LA2_0=='_'||(LA2_0>='a' && LA2_0<='z')) ) {\n                    alt2=1;\n                }\n                switch (alt2) {\n            \tcase 1 :\n            \t    // InternalBug288734TestLanguage.g:\n            \t    {\n            \t    if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {\n            \t        input.consume();\n            \t    }\n            \t    else {\n            \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n            \t        recover(mse);\n            \t        throw mse;}\n            \t    }\n            \t    break;\n            \tdefault :\n            \t    break loop2;\n                }\n            } while (true);\n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"RULE_ID\"\n    // $ANTLR start \"RULE_INT\"\n    public final void mRULE_INT() throws RecognitionException {\n        try {\n            int _type = RULE_INT;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalBug288734TestLanguage.g:379:10: ( ( '0' .. '9' )+ )\n            // InternalBug288734TestLanguage.g:379:12: ( '0' .. '9' )+\n            {\n            // InternalBug288734TestLanguage.g:379:12: ( '0' .. '9' )+\n            int cnt3=0;<fim_middle>// function below has no smell\n"}