{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.apex.examples.r.oldfaithful;\n\nimport java.util.Random;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.datatorrent.api.Context;\nimport com.datatorrent.api.DefaultOutputPort;\nimport com.datatorrent.api.InputOperator;\n\n/**\n *  The InputGenerator operator is used to generate input for the 'Old Faithful Geyser\" application.\n * This application accepts readings for the waiting time and the subsequent eruption duration\n * of the 'Old Faithful' and based on this data, tries to predict the eruption duration of the next\n * eruption given the elapsed time since the last eruption.\n * The training data is generated for an application window and consists of multiple\n * waiting times and eruption duration values.\n * For every application window, it generates only one 'elapsed time' input for which the\n * prediction would be made.\n *\n * @since 2.1.0\n */\n\npublic class InputGenerator implements InputOperator\n{\n\n  @SuppressWarnings(\"unused\")\n  private static final Logger LOG = LoggerFactory.getLogger(InputGenerator.class);\n  private int blastCount = 1000;\n  private Random random = new Random();\n  private static int emitCount = 0;\n\n  public final transient DefaultOutputPort<FaithfulKey> outputPort = new DefaultOutputPort<FaithfulKey>();\n\n  public final transient DefaultOutputPort<Integer> elapsedTime = new DefaultOutputPort<Integer>();\n\n  public void setBlastCount(int blastCount)\n  {\n    this.blastCount = blastCount;\n  }\n\n  @Override\n  public void beginWindow(long windowId)\n  {\n  }\n\n<fim_suffix>  @Override\n  public void endWindow()\n  {\n  }\n\n  @Override\n  public void setup(Context.OperatorContext context)\n  {\n  }\n\n  @Override\n  public void teardown()\n  {\n  }\n\n  private int nextRandomId(int min, int max)\n  {\n    int id;\n    do {\n      id = (int)Math.abs(Math.round(random.nextGaussian() * max));\n    }\n    while (id >= max);\n\n    if (id < min) {\n      id = min;\n    }\n    try {\n      // Slowdown input generation\n      if (emitCount++ % 97 == 0) {\n        Thread.sleep(1);\n      }\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n    return id;\n  }\n\n  @Override\n  public void emitTuples()\n  {\n    boolean elapsedTimeSent = false;\n\n    try {\n      for (int i = 0; i < blastCount; ++i) {\n        int waitingTime = nextRandomId(3600, 36000);\n\n        double eruptionDuration = -2.15 + 0.05 * waitingTime;\n        emitTuple(eruptionDuration, waitingTime);\n\n        if (!elapsedTimeSent) {\n          int eT = 0;\n\n          if (i % 100 == 0) {\n            eT = 54 + waitingTime;\n\n            emitElapsedTime(eT);\n            elapsedTimeSent = true;\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n  private void emitTuple(double eruptionDuration, int waitingTime)\n  {\n    FaithfulKey faithfulkey = new FaithfulKey();\n\n    faithfulkey.setEruptionDuration(eruptionDuration);\n    faithfulkey.setWaitingTime(waitingTime);\n\n    this.outputPort.emit(faithfulkey);\n  }\n\n  private void emitElapsedTime(int eT)\n  {\n    this.elapsedTime.emit(eT);\n  }\n}<fim_middle>// function below has no smell\n"}