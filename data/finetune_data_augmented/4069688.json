{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.beam.runners.dataflow.worker.util;\n\nimport java.util.Collections;\nimport org.apache.beam.runners.core.OutputWindowedValue;\nimport org.apache.beam.runners.core.SideInputReader;\nimport org.apache.beam.runners.core.StepContext;\nimport org.apache.beam.sdk.options.PipelineOptions;\nimport org.apache.beam.sdk.transforms.windowing.BoundedWindow;\nimport org.apache.beam.sdk.transforms.windowing.ReshuffleTrigger;\nimport org.apache.beam.sdk.util.WindowedValue;\nimport org.apache.beam.sdk.values.KV;\nimport org.apache.beam.sdk.values.WindowingStrategy;\n\n/**\n * Implementation of {@link BatchGroupAlsoByWindowFn} used for the {@link ReshuffleTrigger} which\n * outputs each element as a separate pane.\n *\n * @param <K> key type\n * @param <V> value element type\n * @param <W> window type\n */\n<fim_suffix>public class BatchGroupAlsoByWindowReshuffleFn<K, V, W extends BoundedWindow>\n    extends BatchGroupAlsoByWindowFn<K, V, Iterable<V>> {\n\n  public static boolean isReshuffle(WindowingStrategy<?, ?> strategy) {\n    return strategy.getTrigger() instanceof ReshuffleTrigger;\n  }\n\n  @Override\n  public void processElement(\n      KV<K, Iterable<WindowedValue<V>>> element,\n      PipelineOptions options,\n      StepContext stepContext,\n      SideInputReader sideInputReader,\n      OutputWindowedValue<KV<K, Iterable<V>>> output)\n      throws Exception {\n    K key = element.getKey();\n    for (WindowedValue<V> item : element.getValue()) {\n      output.outputWindowedValue(\n          KV.<K, Iterable<V>>of(key, Collections.singletonList(item.getValue())),\n          item.getTimestamp(),\n          item.getWindows(),\n          item.getPane());\n    }\n  }\n}<fim_middle>// class below has no smell\n"}