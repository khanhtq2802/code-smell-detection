{"text": "<fim_prefix>    }\n    public static double minus(double op1, int op2) {\n        if (instance.double_minus) {\n            return minusSlow(op1, op2);\n        } else {\n            return op1 - ((double) op2);\n        }\n    }\n    private static double minusSlow(double op1, int op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"minus\", op2)).doubleValue();\n    }\n    public static double minus(double op1, long op2) {\n        if (instance.double_minus) {\n            return minusSlow(op1, op2);\n        } else {\n            return op1 - ((double) op2);\n        }\n    }\n    private static double minusSlow(double op1, long op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"minus\", op2)).doubleValue();\n    }\n    public static double minus(double op1, float op2) {\n        if (instance.double_minus) {\n            return minusSlow(op1, op2);\n        } else {\n            return op1 - ((double) op2);\n        }\n    }\n    private static double minusSlow(double op1, float op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"minus\", op2)).doubleValue();\n    }\n    public static double minus(double op1, double op2) {\n        if (instance.double_minus) {\n            return minusSlow(op1, op2);\n        } else {\n            return op1 - op2;\n        }\n    }\n    private static double minusSlow(double op1, double op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"minus\", op2)).doubleValue();\n    }\n    public static int multiply(byte op1, byte op2) {\n        if (instance.byte_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((int) op1) * ((int) op2);\n        }\n    }\n    private static int multiplySlow(byte op1, byte op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).intValue();\n    }\n    public static int multiply(byte op1, short op2) {\n        if (instance.byte_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((int) op1) * ((int) op2);\n        }\n    }\n    private static int multiplySlow(byte op1, short op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).intValue();\n    }\n    public static int multiply(byte op1, int op2) {\n        if (instance.byte_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((int) op1) * op2;\n        }\n    }\n    private static int multiplySlow(byte op1, int op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).intValue();\n    }\n    public static long multiply(byte op1, long op2) {\n        if (instance.byte_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((long) op1) * op2;\n        }\n    }\n    private static long multiplySlow(byte op1, long op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).longValue();\n    }\n    public static double multiply(byte op1, float op2) {\n        if (instance.byte_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((double) op1) * ((double) op2);\n        }\n    }\n    private static double multiplySlow(byte op1, float op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).doubleValue();\n    }\n    public static double multiply(byte op1, double op2) {\n        if (instance.byte_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((double) op1) * op2;\n        }\n    }\n    private static double multiplySlow(byte op1, double op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).doubleValue();\n    }\n    public static int multiply(short op1, byte op2) {\n        if (instance.short_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((int) op1) * ((int) op2);\n        }\n    }\n    private static int multiplySlow(short op1, byte op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).intValue();\n    }\n    public static int multiply(short op1, short op2) {\n        if (instance.short_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((int) op1) * ((int) op2);\n        }\n    }\n    private static int multiplySlow(short op1, short op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).intValue();\n    }\n    public static int multiply(short op1, int op2) {\n        if (instance.short_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((int) op1) * op2;\n        }\n    }\n    private static int multiplySlow(short op1, int op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).intValue();\n    }\n    public static long multiply(short op1, long op2) {\n        if (instance.short_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((long) op1) * op2;\n        }\n    }\n    private static long multiplySlow(short op1, long op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).longValue();\n    }\n    public static double multiply(short op1, float op2) {\n        if (instance.short_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((double) op1) * ((double) op2);\n        }\n    }\n    private static double multiplySlow(short op1, float op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).doubleValue();\n    }\n    public static double multiply(short op1, double op2) {\n        if (instance.short_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((double) op1) * op2;\n        }\n    }\n    private static double multiplySlow(short op1, double op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).doubleValue();\n    }\n    public static int multiply(int op1, byte op2) {\n        if (instance.int_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return op1 * ((int) op2);\n        }\n    }\n    private static int multiplySlow(int op1, byte op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).intValue();\n    }\n    public static int multiply(int op1, short op2) {\n        if (instance.int_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return op1 * ((int) op2);\n        }\n    }\n    private static int multiplySlow(int op1, short op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).intValue();\n    }\n    public static int multiply(int op1, int op2) {\n        if (instance.int_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return op1 * op2;\n        }\n    }\n    private static int multiplySlow(int op1, int op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).intValue();\n    }\n    public static long multiply(int op1, long op2) {\n        if (instance.int_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((long) op1) * op2;\n        }\n    }\n    private static long multiplySlow(int op1, long op2) {\n        return ((Number) InvokerHelper.invokeMethod(op1, \"multiply\", op2)).longValue();\n    }\n<fim_suffix>    public static double multiply(int op1, float op2) {\n        if (instance.int_multiply) {\n            return multiplySlow(op1, op2);\n        } else {\n            return ((double) op1) * ((double) op2);\n        }\n    }<fim_middle>// function below has no smell\n"}