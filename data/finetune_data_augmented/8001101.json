{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *******************************************************************************/\npackage org.eclipse.xtext.builder.trace;\n\nimport java.util.List;\n\nimport org.eclipse.emf.common.util.URI;\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.xtext.generator.trace.AbstractTraceRegion;\nimport org.eclipse.xtext.generator.trace.ILocationData;\nimport org.eclipse.xtext.generator.trace.LocationData;\nimport org.eclipse.xtext.generator.trace.SourceRelativeURI;\n\nimport com.google.common.collect.Lists;\n\n/**\n * @author Moritz Eysholdt - Initial contribution and API\n */\n<fim_suffix>public class DebugTraceBasedRegion extends AbstractTraceRegion {\n\n\tprivate final DebugTraceRegion delegate;\n\n\tprotected DebugTraceBasedRegion(AbstractTraceRegion parent, DebugTraceRegion delegate) {\n\t\tsuper(parent);\n\t\tthis.delegate = delegate;\n\t\tfor (DebugTraceRegion child : delegate.getNestedRegions())\n\t\t\tnew DebugTraceBasedRegion(this, child);\n\t}\n\n\tprivate LocationData convert(DebugLocationData data) {\n\t\tSourceRelativeURI uri = data.getPath() != null ? new SourceRelativeURI(data.getPath()) : null;\n\t\treturn new LocationData(data.getOffset(), data.getLength(), data.getLineNumber(), data.getEndLineNumber(), uri);\n\t}\n\n\t@Override\n\tpublic List<ILocationData> getAssociatedLocations() {\n\t\tList<ILocationData> result = Lists.newArrayListWithCapacity(delegate.getAssociations().size());\n\t\tfor (DebugLocationData data : delegate.getAssociations())\n\t\t\tresult.add(convert(data));\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic SourceRelativeURI getAssociatedSrcRelativePath() {\n\t\tSourceRelativeURI path = super.getAssociatedSrcRelativePath();\n\t\tif (path != null)\n\t\t\treturn path;\n\t\treturn getAssociatedSrcRelativePath(delegate);\n\t}\n\n\tprotected SourceRelativeURI getAssociatedSrcRelativePath(DebugTraceRegion region) {\n\t\tfor (DebugLocationData associated : region.getAssociations()) {\n\t\t\tURI uri = associated.getPath();\n\t\t\tif (uri != null)\n\t\t\t\treturn new SourceRelativeURI(uri);\n\t\t}\n\t\tEObject container = region.eContainer();\n\t\tif (container instanceof DebugTraceRegion)\n\t\t\treturn getAssociatedSrcRelativePath((DebugTraceRegion) container);\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic int getMyEndLineNumber() {\n\t\treturn delegate.getMyEndLineNumber();\n\t}\n\n\t@Override\n\tpublic int getMyLength() {\n\t\treturn delegate.getMyLength();\n\t}\n\n\t@Override\n\tpublic int getMyLineNumber() {\n\t\treturn delegate.getMyLineNumber();\n\t}\n\n\t@Override\n\tpublic int getMyOffset() {\n\t\treturn delegate.getMyOffset();\n\t}\n\n\t@Override\n\tpublic boolean isUseForDebugging() {\n\t\treturn delegate.isUseForDebugging();\n\t}\n\n}<fim_middle>// class below has no smell\n"}