{"text": "<fim_prefix>/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.cli.command.init;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\n\n/**\n * A helper class generating a report from the meta-data of a particular service.\n *\n * @author Stephane Nicoll\n * @author Andy Wilkinson\n * @since 1.2.0\n */\nclass ServiceCapabilitiesReportGenerator {\n\n\tprivate static final String NEW_LINE = System.lineSeparator();\n\n\tprivate final InitializrService initializrService;\n\n\t/**\n\t * Creates an instance using the specified {@link InitializrService}.\n\t * @param initializrService the initializr service\n\t */\n\tServiceCapabilitiesReportGenerator(InitializrService initializrService) {\n\t\tthis.initializrService = initializrService;\n\t}\n\n\t/**\n\t * Generate a report for the specified service. The report contains the available\n\t * capabilities as advertised by the root endpoint.\n\t * @param url the url of the service\n\t * @return the report that describes the service\n\t * @throws IOException if the report cannot be generated\n\t */\n\tpublic String generate(String url) throws IOException {\n\t\tObject content = this.initializrService.loadServiceCapabilities(url);\n\t\tif (content instanceof InitializrServiceMetadata) {\n\t\t\treturn generateHelp(url, (InitializrServiceMetadata) content);\n\t\t}\n\t\treturn content.toString();\n\t}\n\n\tprivate String generateHelp(String url, InitializrServiceMetadata metadata) {\n\t\tString header = \"Capabilities of \" + url;\n\t\tStringBuilder report = new StringBuilder();\n\t\treport.append(repeat(\"=\", header.length())).append(NEW_LINE);\n\t\treport.append(header).append(NEW_LINE);\n\t\treport.append(repeat(\"=\", header.length())).append(NEW_LINE);\n\t\treport.append(NEW_LINE);\n\t\treportAvailableDependencies(metadata, report);\n\t\treport.append(NEW_LINE);\n\t\treportAvailableProjectTypes(metadata, report);\n\t\treport.append(NEW_LINE);\n\t\treportDefaults(report, metadata);\n\t\treturn report.toString();\n\t}\n\n<fim_suffix>\tprivate void reportAvailableDependencies(InitializrServiceMetadata metadata,\n\t\t\tStringBuilder report) {\n\t\treport.append(\"Available dependencies:\").append(NEW_LINE);\n\t\treport.append(\"-----------------------\").append(NEW_LINE);\n\t\tList<Dependency> dependencies = getSortedDependencies(metadata);\n\t\tfor (Dependency dependency : dependencies) {\n\t\t\treport.append(dependency.getId()).append(\" - \").append(dependency.getName());\n\t\t\tif (dependency.getDescription() != null) {\n\t\t\t\treport.append(\": \").append(dependency.getDescription());\n\t\t\t}\n\t\t\treport.append(NEW_LINE);\n\t\t}\n\t}\n\n\tprivate List<Dependency> getSortedDependencies(InitializrServiceMetadata metadata) {\n\t\tList<Dependency> dependencies = new ArrayList<>(metadata.getDependencies());\n\t\tdependencies.sort(Comparator.comparing(Dependency::getId));\n\t\treturn dependencies;\n\t}\n\n\tprivate void reportAvailableProjectTypes(InitializrServiceMetadata metadata,\n\t\t\tStringBuilder report) {\n\t\treport.append(\"Available project types:\").append(NEW_LINE);\n\t\treport.append(\"------------------------\").append(NEW_LINE);\n\t\tSortedSet<Entry<String, ProjectType>> entries = new TreeSet<>(\n\t\t\t\tComparator.comparing(Entry::getKey));\n\t\tentries.addAll(metadata.getProjectTypes().entrySet());\n\t\tfor (Entry<String, ProjectType> entry : entries) {\n\t\t\tProjectType type = entry.getValue();\n\t\t\treport.append(entry.getKey()).append(\" -  \").append(type.getName());\n\t\t\tif (!type.getTags().isEmpty()) {\n\t\t\t\treportTags(report, type);\n\t\t\t}\n\t\t\tif (type.isDefaultType()) {\n\t\t\t\treport.append(\" (default)\");\n\t\t\t}\n\t\t\treport.append(NEW_LINE);\n\t\t}\n\t}\n\n\tprivate void reportTags(StringBuilder report, ProjectType type) {\n\t\tMap<String, String> tags = type.getTags();\n\t\tIterator<Map.Entry<String, String>> iterator = tags.entrySet().iterator();\n\t\treport.append(\" [\");\n\t\twhile (iterator.hasNext()) {\n\t\t\tMap.Entry<String, String> entry = iterator.next();\n\t\t\treport.append(entry.getKey()).append(\":\").append(entry.getValue());\n\t\t\tif (iterator.hasNext()) {\n\t\t\t\treport.append(\", \");\n\t\t\t}\n\t\t}\n\t\treport.append(\"]\");\n\t}\n\n\tprivate void reportDefaults(StringBuilder report,\n\t\t\tInitializrServiceMetadata metadata) {\n\t\treport.append(\"Defaults:\").append(NEW_LINE);\n\t\treport.append(\"---------\").append(NEW_LINE);\n\t\tList<String> defaultsKeys = new ArrayList<>(metadata.getDefaults().keySet());\n\t\tCollections.sort(defaultsKeys);\n\t\tfor (String defaultsKey : defaultsKeys) {\n\t\t\tString defaultsValue = metadata.getDefaults().get(defaultsKey);\n\t\t\treport.append(defaultsKey).append(\": \").append(defaultsValue)\n\t\t\t\t\t.append(NEW_LINE);\n\t\t}\n\t}\n\n\tprivate static String repeat(String s, int count) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\tsb.append(s);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n}<fim_middle>// function below has no smell\n"}