{"text": "<fim_prefix>\n<fim_suffix>public class JavaCloudFoundryArchiver implements ICloudFoundryArchiver {\n\tprivate static final String META_FOLDER_NAME = \"META-INF\"; //$NON-NLS-1$\n\tprivate static final String MANIFEST_FILE = \"MANIFEST.MF\"; //$NON-NLS-1$\n\tprotected CFConsoleHandler getConsole() {\n\t\treturn StandaloneConsole.getDefault();\n\t}\n\tprotected DeploymentErrorHandler getErrorHandler(IModule actualModule, CloudFoundryApplicationModule appModule,\n\t\t\tCloudFoundryServer cloudServer, CFConsoleHandler consoleHandler) {\n\t\treturn new DeploymentErrorHandler(actualModule, appModule, cloudServer, consoleHandler);\n\t}\n\tprotected JarArchivingUIHandler getArchivingHandler(CloudFoundryApplicationModule appModule,\n\t\t\tCloudFoundryServer cloudServer, CFConsoleHandler console, DeploymentErrorHandler errorHandler) {\n\t\treturn new JarArchivingUIHandler(appModule, cloudServer, console, errorHandler);\n\t}\n\tpublic CFApplicationArchive getApplicationArchive(IModule module, IServer server, IModuleResource[] resources,\n\t\t\tIProgressMonitor monitor) throws CoreException {\n\t\tCloudFoundryServer cloudServer = CloudServerUtil.getCloudServer(server);\n\t\tAssert.isNotNull(module,\n\t\t\t\t\"Unable to package standalone application. No WTP module found for application. Refresh server and try again.\"); //$NON-NLS-1$\n\t\tCloudFoundryApplicationModule appModule = cloudServer.getExistingCloudModule(module);\n\t\tAssert.isNotNull(appModule,\n\t\t\t\t\"Unable to package standalone application. No cloud application module found. Refresh server and try again.\"); //$NON-NLS-1$\n\t\t// Bug 495814: Maven projects may go out of synch with filesystem,\n\t\t// especially if they are built\n\t\t// outside of Eclipse. This may result in missing dependencies and\n\t\t// resources in the packaged jar\n\t\trefreshProject(module, appModule, cloudServer, monitor);\n\t\tIProject project = getProject(appModule);\n\t\tString projectName = project != null ? project.getName() : \"UNKNOWN PROJECT\"; //$NON-NLS-1$\n\t\tCFApplicationArchive archive = null;\n\t\tCFConsoleHandler console = getConsole();\n\t\tDeploymentErrorHandler errorHandler = getErrorHandler(module, appModule, cloudServer, console);\n\t\tJarArchivingUIHandler archivingHandler = getArchivingHandler(appModule, cloudServer, console, errorHandler);\n\t\tFile packagedFile = null;\n\t\tIJavaProject javaProject = CloudFoundryProjectUtil.getJavaProject(appModule);\n\t\tif (javaProject == null) {\n\t\t\terrorHandler\n\t\t\t\t\t.handleApplicationDeploymentFailure(Messages.JavaCloudFoundryArchiver_ERROR_NO_JAVA_PROJ_RESOLVED);\n\t\t}\n\t\tJavaPackageFragmentRootHandler rootResolver = archivingHandler.getPackageFragmentRootHandler(javaProject,\n\t\t\t\tmonitor);\n\t\tIType mainType = rootResolver.getMainType(monitor);\n\t\tif (mainType != null) {\n\t\t\tconsole.printToConsole(module, cloudServer,\n\t\t\t\t\tNLS.bind(Messages.JavaCloudFoundryArchiver_PACKAGING_MAIN_TYPE, mainType.getFullyQualifiedName()));\n\t\t}\n\t\tfinal IPackageFragmentRoot[] roots = rootResolver.getPackageFragmentRoots(monitor);\n\t\tif (roots == null || roots.length == 0) {\n\t\t\terrorHandler\n\t\t\t\t\t.handleApplicationDeploymentFailure(Messages.JavaCloudFoundryArchiver_ERROR_NO_PACKAGE_FRAG_ROOTS);\n\t\t}\n\t\tJarPackageData jarPackageData = archivingHandler.getJarPackageData(roots, mainType, monitor);\n\t\tboolean isBoot = CloudFoundryProjectUtil.isSpringBoot(appModule);\n\t\t// Search for existing MANIFEST.MF\n\t\tIFile metaFile = getManifest(roots, javaProject);\n\t\t// Only use existing manifest files for non-Spring boot, as Spring\n\t\t// boot repackager will\n\t\t// generate it own manifest file.\n\t\tif (!isBoot && metaFile != null) {\n\t\t\t// If it is not a boot project, use a standard library jar\n\t\t\t// builder\n\t\t\tjarPackageData.setJarBuilder(archivingHandler.getDefaultLibJarBuilder());\n\t\t\tjarPackageData.setManifestLocation(metaFile.getFullPath());\n\t\t\tjarPackageData.setSaveManifest(false);\n\t\t\tjarPackageData.setGenerateManifest(false);\n\t\t\t// Check manifest accessibility through the jar package data\n\t\t\t// API\n\t\t\t// to verify the packaging won't fail\n\t\t\tif (!jarPackageData.isManifestAccessible()) {\n\t\t\t\terrorHandler.handleApplicationDeploymentFailure(\n\t\t\t\t\t\tNLS.bind(Messages.JavaCloudFoundryArchiver_ERROR_MANIFEST_NOT_ACCESSIBLE,\n\t\t\t\t\t\t\t\tmetaFile.getLocation().toString()));\n\t\t\t}\n\t\t\tInputStream inputStream = null;\n\t\t\ttry {\n\t\t\t\tinputStream = new FileInputStream(metaFile.getLocation().toFile());\n\t\t\t\tManifest manifest = new Manifest(inputStream);\n\t\t\t\tAttributes att = manifest.getMainAttributes();\n\t\t\t\tif (att.getValue(\"Main-Class\") == null) { //$NON-NLS-1$\n\t\t\t\t\terrorHandler.handleApplicationDeploymentFailure(\n\t\t\t\t\t\t\tMessages.JavaCloudFoundryArchiver_ERROR_NO_MAIN_CLASS_IN_MANIFEST);\n\t\t\t\t}\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\terrorHandler.handleApplicationDeploymentFailure(NLS\n\t\t\t\t\t\t.bind(Messages.JavaCloudFoundryArchiver_ERROR_FAILED_READ_MANIFEST, e.getLocalizedMessage()));\n\t\t\t} catch (IOException e) {\n\t\t\t\terrorHandler.handleApplicationDeploymentFailure(NLS\n\t\t\t\t\t\t.bind(Messages.JavaCloudFoundryArchiver_ERROR_FAILED_READ_MANIFEST, e.getLocalizedMessage()));\n\t\t\t} finally {\n\t\t\t\tif (inputStream != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tinputStream.close();\n\t\t\t\t\t} catch (IOException io) {\n\t\t\t\t\t\t// Ignore\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Otherwise generate a manifest file. Note that manifest files\n\t\t\t// are only generated in the temporary jar meant only for\n\t\t\t// deployment.\n\t\t\t// The associated Java project is no modified.\n\t\t\tjarPackageData.setGenerateManifest(true);\n\t\t\t// This ensures that folders in output folders appear at root\n\t\t\t// level\n\t\t\t// Example: src/main/resources, which is in the project's\n\t\t\t// classpath, contains non-Java templates folder and\n\t\t\t// has output folder target/classes. If not exporting output\n\t\t\t// folder,\n\t\t\t// templates will be packaged in the jar using this path:\n\t\t\t// resources/templates\n\t\t\t// This may cause problems with the application's dependencies\n\t\t\t// if they are looking for just /templates at top level of the\n\t\t\t// jar\n\t\t\t// If exporting output folders, templates folder will be\n\t\t\t// packaged at top level in the jar.\n\t\t\tjarPackageData.setExportOutputFolders(true);\n\t\t}\n\t\ttry {\n\t\t\tconsole.printToConsole(module, cloudServer,\n\t\t\t\t\tNLS.bind(Messages.JavaCloudFoundryArchiver_PACKAGING_APPLICATION, projectName));\n\t\t\tpackagedFile = archivingHandler.packageApplication(jarPackageData, monitor);\n\t\t} catch (CoreException e) {\n\t\t\terrorHandler.handleApplicationDeploymentFailure(\n\t\t\t\t\tNLS.bind(Messages.JavaCloudFoundryArchiver_ERROR_JAVA_APP_PACKAGE, e.getMessage()));\n\t\t}\n\t\tif (packagedFile == null || !packagedFile.exists()) {\n\t\t\terrorHandler.handleApplicationDeploymentFailure(\n\t\t\t\t\tMessages.JavaCloudFoundryArchiver_ERROR_NO_PACKAGED_FILE_CREATED);\n\t\t} else {\n\t\t\tconsole.printToConsole(module, cloudServer,\n\t\t\t\t\tNLS.bind(Messages.JavaCloudFoundryArchiver_PACKAGING_APPLICATION_COMPLETED, projectName,\n\t\t\t\t\t\t\tpackagedFile.getAbsolutePath()));\n\t\t}\n\t\tif (isBoot) {\n\t\t\tconsole.printToConsole(module, cloudServer, Messages.JavaCloudFoundryArchiver_REPACKAGING_SPRING_BOOT_APP);\n\t\t\tarchivingHandler.bootRepackage(roots, packagedFile);\n\t\t}\n\t\t// At this stage a packaged file should have been created or found\n\t\ttry {\n\t\t\tarchive = new ZipArchive(new ZipFile(packagedFile));\n\t\t} catch (IOException ioe) {\n\t\t\terrorHandler.handleApplicationDeploymentFailure(\n\t\t\t\t\tNLS.bind(Messages.JavaCloudFoundryArchiver_ERROR_CREATE_CF_ARCHIVE, ioe.getMessage()));\n\t\t}\n\t\treturn archive;\n\t}\n\tprotected IProject getProject(CloudFoundryApplicationModule appModule) {\n\t\treturn CloudFoundryProjectUtil.getProject(appModule);\n\t}\n\t/**\n\t * \n\t * @param resource\n\t *            that may contain a META-INF folder\n\t * @return META-INF folder, if found. Null otherwise\n\t * @throws CoreException\n\t */<fim_middle>// class below has no smell\n"}