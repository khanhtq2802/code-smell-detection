{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.druid.server.lookup.cache.polling;\n\nimport com.google.common.base.Function;\nimport com.google.common.base.Predicate;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.apache.druid.java.util.common.StringUtils;\nimport org.mapdb.DB;\nimport org.mapdb.DBMaker;\nimport org.mapdb.HTreeMap;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\n\n<fim_suffix>public class OffHeapPollingCache<K, V> implements PollingCache<K, V>\n{\n  private static final DB DB = DBMaker.newMemoryDirectDB().transactionDisable().closeOnJvmShutdown().make();\n\n  private final HTreeMap<K, V> mapCache;\n  private final HTreeMap<V, List<K>> reverseCache;\n  private final AtomicBoolean started = new AtomicBoolean(false);\n  private final String cacheName;\n  private final String reverseCacheName;\n\n  public OffHeapPollingCache(final Iterable<Map.Entry<K, V>> entries)\n  {\n    synchronized (started) {\n      this.cacheName = StringUtils.format(\"cache-%s\", UUID.randomUUID());\n      this.reverseCacheName = StringUtils.format(\"reverseCache-%s\", UUID.randomUUID());\n      mapCache = DB.createHashMap(cacheName).make();\n      reverseCache = DB.createHashMap(reverseCacheName).make();\n      ImmutableSet.Builder<V> setOfValuesBuilder = ImmutableSet.builder();\n      for (Map.Entry<K, V> entry : entries) {\n        mapCache.put(entry.getKey(), entry.getValue());\n        setOfValuesBuilder.add(entry.getValue());\n      }\n\n      final Set<V> setOfValues = setOfValuesBuilder.build();\n      reverseCache.putAll(Maps.asMap(\n          setOfValues,\n          new Function<V, List<K>>()\n          {\n            @Override\n            public List<K> apply(final V input)\n            {\n              return Lists.newArrayList(Maps.filterKeys(mapCache, new Predicate<K>()\n              {\n                @Override\n                public boolean apply(K key)\n                {\n                  V retVal = mapCache.get(key);\n                  if (retVal == null) {\n                    return false;\n                  }\n                  return retVal.equals(input);\n                }\n              }).keySet());\n            }\n          }\n      ));\n      started.getAndSet(true);\n    }\n  }\n\n  @Override\n  public V get(K key)\n  {\n    return mapCache.get(key);\n  }\n\n  @Override\n  public List<K> getKeys(V value)\n  {\n    final List<K> listOfKey = reverseCache.get(value);\n    if (listOfKey == null) {\n      return Collections.emptyList();\n    }\n    return listOfKey;\n  }\n\n  @Override\n  public void close()\n  {\n    synchronized (started) {\n      if (started.getAndSet(false)) {\n        DB.delete(cacheName);\n        DB.delete(reverseCacheName);\n      }\n    }\n  }\n\n  public static class OffHeapPollingCacheProvider<K, V> implements PollingCacheFactory<K, V>\n  {\n    @Override\n    public PollingCache<K, V> makeOf(Iterable<Map.Entry<K, V>> entries)\n    {\n      return new OffHeapPollingCache<>(entries);\n    }\n  }\n}<fim_middle>// class below has no smell\n"}