{"text": "<fim_prefix>\n<fim_suffix>@SuppressFBWarnings(value = \"PATH_TRAVERSAL_IN\", justification = \"Output directory is specified by user\")\nclass AppInfoCollector {\n    private final DiagOozieClient client;\n    private final OozieLauncherLogFetcher oozieLauncherLogFetcher;\n    AppInfoCollector(final Configuration hadoopConfig, final DiagOozieClient client) {\n        this.client = client;\n        oozieLauncherLogFetcher = new OozieLauncherLogFetcher(hadoopConfig);\n    }\n    private void storeWorkflowJobDetails(final File outputDir, final String jobId, int maxChildActions) {\n        if (jobId == null || !isWorkflow(jobId)) {\n            return;\n        }\n        try {\n            System.out.print(\"Getting Details for \" + jobId + \"...\");\n            final File workflowOutputDir = new File(outputDir, jobId);\n            if (!createOutputDirectory(workflowOutputDir)) {\n                return;\n            }\n            final File resolvedActionsDir = new File(workflowOutputDir, \"resolved-actions\");\n            if (!createOutputDirectory(resolvedActionsDir)) {\n                System.out.println(\"Workflow details already stored.\");\n                return;\n            }\n            final WorkflowJob job = client.getJobInfo(jobId);\n            try (DiagBundleEntryWriter diagBundleEntryWriter = new DiagBundleEntryWriter(workflowOutputDir,\"info.txt\")) {\n                persistWorkflowJobInfo(maxChildActions, resolvedActionsDir, job, diagBundleEntryWriter);\n            }\n            storeCommonDetails(workflowOutputDir, jobId, \"workflow\", job.getConf());\n            System.out.println(\"Done\");\n        } catch (IOException | OozieClientException e) {\n            System.err.printf(\"Exception occurred during the retrieval of workflow information: %s%n\", e.getMessage());\n        }\n    }\n    private void persistWorkflowJobInfo(int maxChildActions, final File resolvedActionsDir, final WorkflowJob job,\n                                        final DiagBundleEntryWriter bundleEntryWriter) throws IOException {\n        bundleEntryWriter.writeString(\"WORKFLOW\\n\")\n                         .writeString(\"--------\\n\")\n                         .writeStringValue(\"Workflow Id        : \", job.getId())\n                         .writeStringValue(\"Name               : \", job.getAppName())\n                         .writeStringValue(\"App Path           : \", job.getAppPath())\n                         .writeStringValue(\"User               : \", job.getUser())\n                         .writeStringValue(\"ACL                : \", job.getAcl())\n                         .writeStringValue(\"Status             : \", job.getStatus().toString())\n                         .writeStringValue(\"Console URL        : \", job.getConsoleUrl())\n                         .writeStringValue(\"External Id        : \", job.getExternalId())\n                         .writeStringValue(\"Parent Id          : \", job.getParentId())\n                         .writeDateValue(\"Created Time       : \", job.getCreatedTime())\n                         .writeDateValue(\"End Time           : \", job.getEndTime())\n                         .writeDateValue(\"Last Modified Time : \", job.getLastModifiedTime())\n                         .writeDateValue(\"Start Time         : \", job.getStartTime())\n                         .writeIntValue(\"Run                : \", job.getRun())\n                         .writeIntValue(\"Action Count       : \", job.getActions().size())\n                         .writeNewLine()\n                         .writeString(\"ACTIONS\\n\")\n                         .writeString(\"------\\n\")\n                         .flush();\n        final List<WorkflowAction> workflowActions = job.getActions();\n        for (int actionCount = 0; actionCount != workflowActions.size() && actionCount < maxChildActions; ++actionCount) {\n            final WorkflowAction action = workflowActions.get(actionCount);\n            bundleEntryWriter.writeStringValue(\"Action Id          : \", action.getId())\n                             .writeStringValue(\"Name               : \", action.getName())\n                             .writeStringValue(\"Type               : \", action.getType())\n                             .writeStringValue(\"Status             : \", action.getStatus().toString())\n                             .writeStringValue(\"Transition         : \", action.getTransition())\n                             .writeDateValue(\"Start Time         : \", action.getStartTime())\n                             .writeDateValue(\"End Time           : \", action.getEndTime())\n                             .writeStringValue(\"Error Code         : \", action.getErrorCode())\n                             .writeStringValue(\"Error Message      : \", action.getErrorMessage())\n                             .writeStringValue(\"Console URL        : \", action.getConsoleUrl())\n                             .writeStringValue(\"Tracker URI        : \", action.getTrackerUri())\n                             .writeStringValue(\"External Child Ids : \", action.getExternalChildIDs())\n                             .writeStringValue(\"External Id        : \", action.getExternalId())\n                             .writeStringValue(\"External Status    : \", action.getExternalStatus())\n                             .writeStringValue(\"Data               : \", action.getData())\n                             .writeStringValue(\"Stats              : \", action.getStats())\n                             .writeStringValue(\"Credentials        : \", action.getCred())\n                             .writeIntValue(\"Retries            : \", action.getRetries())\n                             .writeIntValue(\"User Retry Int     : \", action.getUserRetryInterval())\n                             .writeIntValue(\"User Retry Count   : \", action.getUserRetryCount())\n                             .writeIntValue(\"User Retry Max     : \", action.getUserRetryMax())\n                             .writeNewLine()\n                             .flush();\n            final String actionType = action.getType();\n            persistResolvedActionDefinition(action, resolvedActionsDir);\n            if (!isControlNode(actionType)) { // skip control nodes\n                storeOozieLauncherLog(resolvedActionsDir, action, job.getUser());\n            }\n        }\n    }\n    private boolean isControlNode(final String actionType) {\n        return isNonDecisionControlNode(actionType) || isDecisionNode(actionType);\n    }\n    private boolean isDecisionNode(final String actionType) {\n        return actionType.contains(\"switch\");\n    }\n    private boolean isNonDecisionControlNode(final String actionType) {\n        return actionType.contains(\":\");\n    }\n    private void persistResolvedActionDefinition(final WorkflowAction action, final File resolvedActionsDir) throws IOException {\n        persistWorkflowDefinition(resolvedActionsDir, action.getName(), action.getConf());\n    }\n    private void storeOozieLauncherLog(final File outputDir, final WorkflowAction action, final String user) {\n        try (PrintStream fw = new PrintStream(new File(outputDir, \"launcher_\" + action.getName() + \".log\"),\n                StandardCharsets.UTF_8.toString())) {\n            final ApplicationId appId = ConverterUtils.toApplicationId(action.getExternalId());\n            oozieLauncherLogFetcher.dumpAllContainersLogs(appId, user, fw);\n        } catch (IOException e) {\n            System.err.printf(\"Exception occurred during the retrieval of Oozie launcher logs for workflow(s): %s%n\",\n                    e.getMessage());\n        }\n    }\n    private void getCoordJob(final File outputDir, final String jobId, int maxChildActions) {\n        if (jobId == null || !isCoordinator(jobId)) {\n            return;\n        }\n        try {\n            System.out.print(\"Getting Details for \" + jobId + \"...\");\n            final File coordOutputDir = new File(outputDir, jobId);\n            if (!createOutputDirectory(coordOutputDir)) {\n                return;\n            }\n            final CoordinatorJob job = client.getCoordJobInfo(jobId);\n            try (DiagBundleEntryWriter bundleEntryWriter = new DiagBundleEntryWriter(coordOutputDir, \"info.txt\")) {\n                persistCoordinatorJobInfo(maxChildActions, job, bundleEntryWriter);\n            }\n            storeCommonDetails(coordOutputDir, jobId, \"coordinator\", job.getConf());\n            System.out.println(\"Done\");\n            final List<CoordinatorAction> coordinatorActions = job.getActions();\n            for (int i = 0; i != coordinatorActions.size() && i < maxChildActions; ++i) {\n                storeWorkflowJobDetails(outputDir, coordinatorActions.get(i).getExternalId(), maxChildActions);\n            }\n        } catch (IOException | OozieClientException e) {\n            System.err.printf(String.format(\"Exception occurred during the retrieval of coordinator information:%s%n\",\n                    e.getMessage()));\n        }\n    }\n    private void persistCoordinatorJobInfo(int maxChildActions, final CoordinatorJob job,\n                                           final DiagBundleEntryWriter bundleEntryWriter)\n            throws IOException {\n        bundleEntryWriter.writeString(\"COORDINATOR\\n\")\n                         .writeString(\"-----------\\n\")\n                         .writeStringValue(\"Coordinator Id           : \", job.getId())\n                         .writeStringValue(\"Name                     : \", job.getAppName())\n                         .writeStringValue(\"App Path                 : \", job.getAppPath())\n                         .writeStringValue(\"User                     : \", job.getUser())\n                         .writeStringValue(\"ACL                      : \", job.getAcl())\n                         .writeStringValue(\"Status                   : \", job.getStatus().toString())\n                         .writeStringValue(\"Console URL              : \", job.getConsoleUrl())\n                         .writeStringValue(\"External Id              : \", job.getExternalId())\n                         .writeStringValue(\"Bundle Id                : \", job.getBundleId())\n                         .writeStringValue(\"Frequency                : \", job.getFrequency())\n                         .writeStringValue(\"Time Unit                : \", job.getTimeUnit().toString())\n                         .writeDateValue(\"Start Time               : \", job.getStartTime())\n                         .writeDateValue(\"End Time                 : \", job.getEndTime())\n                         .writeDateValue(\"Last Action Time         : \", job.getLastActionTime())<fim_middle>// class below is blob\n"}