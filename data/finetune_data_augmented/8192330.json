{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.jelly.tags.util;\n\nimport java.io.File;\n\nimport org.apache.commons.jelly.JellyTagException;\nimport org.apache.commons.jelly.MissingAttributeException;\nimport org.apache.commons.jelly.TagSupport;\nimport org.apache.commons.jelly.XMLOutput;\n\n/**\n * A tag which creates a {@link File} from a given name.\n *\n * @author <a href=\"mailto:dion@apache.org\">dIon Gillard</a>\n * @version $Revision$\n */\n<fim_suffix>public class FileTag extends TagSupport {\n\n    /** The file to place into the context */\n    private String name;\n\n    /** The variable name to place the file into */\n    private String var;\n\n    // Tag interface\n    //-------------------------------------------------------------------------\n    public void doTag(final XMLOutput output) throws MissingAttributeException, JellyTagException {\n        boolean available = false;\n\n        if (name == null) {\n            throw new MissingAttributeException(\"name must be specified\");\n        }\n\n        if (var == null) {\n            throw new MissingAttributeException(\"var must be specified\");\n        }\n\n        File newFile = new File(name);\n        getContext().setVariable(var, newFile);\n    }\n\n    /**\n     * Name of the file to be placed into the context\n     * @param name The fileName to set\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * Name of the variable to contain the file\n     * @param var The var to set\n     */\n    public void setVar(String var) {\n        this.var = var;\n    }\n\n}<fim_middle>// class below has no smell\n"}