{"text": "<fim_prefix>import java.util.Map;\nimport java.util.Set;\nimport java.util.UUID;\nimport javax.cache.Cache;\nimport javax.cache.expiry.ExpiryPolicy;\nimport javax.cache.processor.EntryProcessor;\nimport javax.cache.processor.EntryProcessorResult;\nimport org.apache.ignite.IgniteCheckedException;\nimport org.apache.ignite.cache.CacheEntry;\nimport org.apache.ignite.cache.CacheMetrics;\nimport org.apache.ignite.cache.CachePeekMode;\nimport org.apache.ignite.cache.affinity.Affinity;\nimport org.apache.ignite.cluster.ClusterGroup;\nimport org.apache.ignite.configuration.CacheConfiguration;\nimport org.apache.ignite.internal.IgniteInternalFuture;\nimport org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\nimport org.apache.ignite.internal.processors.cache.affinity.GridCacheAffinityProxy;\nimport org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxLocal;\nimport org.apache.ignite.internal.processors.cache.dr.GridCacheDrInfo;\nimport org.apache.ignite.internal.processors.cache.version.GridCacheVersion;\nimport org.apache.ignite.internal.util.tostring.GridToStringExclude;\nimport org.apache.ignite.internal.util.typedef.internal.S;\nimport org.apache.ignite.lang.IgniteBiPredicate;\nimport org.apache.ignite.mxbean.CacheMetricsMXBean;\nimport org.apache.ignite.transactions.Transaction;\nimport org.apache.ignite.transactions.TransactionConcurrency;\nimport org.apache.ignite.transactions.TransactionIsolation;\nimport org.jetbrains.annotations.Nullable;\nimport static org.apache.ignite.internal.processors.cache.CacheOperationContext.DFLT_ALLOW_ATOMIC_OPS_IN_TX;\n/**\n * Cache proxy.\n */\npublic class GridCacheProxyImpl<K, V> implements IgniteInternalCache<K, V>, Externalizable {\n    /** */\n    private static final long serialVersionUID = 0L;\n    /** Context. */\n    private GridCacheContext<K, V> ctx;\n    /** Gateway. */\n    private GridCacheGateway<K, V> gate;\n    /** Delegate object. */\n    @GridToStringExclude\n    private IgniteInternalCache<K, V> delegate;\n    /** Projection. */\n    @GridToStringExclude\n    private CacheOperationContext opCtx;\n    /** Affinity. */\n    private Affinity<K> aff;\n    /**\n     * Empty constructor required for {@link Externalizable}.\n     */\n    public GridCacheProxyImpl() {\n        // No-op.\n    }\n    /**\n     * @param ctx Context.\n     * @param delegate Delegate object.\n     * @param opCtx Optional operation context which will be passed to gateway.\n     */\n    public GridCacheProxyImpl(\n        GridCacheContext<K, V> ctx,\n        IgniteInternalCache<K, V> delegate,\n        @Nullable CacheOperationContext opCtx\n    ) {\n        assert ctx != null;\n        assert delegate != null;\n        this.ctx = ctx;\n        this.delegate = delegate;\n        this.opCtx = opCtx;\n        gate = ctx.gate();\n        aff = new GridCacheAffinityProxy<>(ctx, ctx.cache().affinity());\n    }\n    /**\n     * @return Cache context.\n     */\n    @Override public GridCacheContext<K, V> context() {\n        return ctx;\n    }\n    /**\n     * @return Proxy delegate.\n     */\n    public IgniteInternalCache<K, V> delegate() {\n        return delegate;\n    }\n    /** {@inheritDoc} */\n    @Override public String name() {\n        return delegate.name();\n    }\n    /** {@inheritDoc} */\n    @Override public <K1, V1> IgniteInternalCache<K1, V1> cache() {\n        return delegate.cache();\n    }\n    /** {@inheritDoc} */\n    @Override public boolean skipStore() {\n        CacheOperationContext prev = gate.enter(opCtx);\n        try {\n            return opCtx != null && opCtx.skipStore();\n        }\n        finally {\n            gate.leave(prev);\n        }\n    }\n    /** {@inheritDoc} */\n    @Override public Affinity<K> affinity() {\n        return aff;\n    }\n    /** {@inheritDoc} */\n    @Override public CacheMetrics clusterMetrics() {\n        CacheOperationContext prev = gate.enter(opCtx);\n        try {\n            return delegate.clusterMetrics();\n        }\n        finally {\n            gate.leave(prev);\n        }\n    }\n    /** {@inheritDoc} */\n    @Override public CacheMetrics clusterMetrics(ClusterGroup grp) {\n        CacheOperationContext prev = gate.enter(opCtx);\n        try {\n            return delegate.clusterMetrics(grp);\n        }\n        finally {\n            gate.leave(prev);\n        }\n    }\n    /** {@inheritDoc} */\n    @Override public CacheConfiguration configuration() {\n        return delegate.configuration();\n    }\n    /** {@inheritDoc} */\n    @Override public CacheMetrics localMetrics() {\n        CacheOperationContext prev = gate.enter(opCtx);\n        try {\n            return delegate.localMetrics();\n        }\n        finally {\n            gate.leave(prev);\n        }\n    }\n    /** {@inheritDoc} */\n    @Override public CacheMetricsMXBean clusterMxBean() {\n        CacheOperationContext prev = gate.enter(opCtx);\n        try {\n            return delegate.clusterMxBean();\n        }\n        finally {\n            gate.leave(prev);\n        }\n    }\n    /** {@inheritDoc} */\n    @Override public CacheMetricsMXBean localMxBean() {\n        CacheOperationContext prev = gate.enter(opCtx);\n        try {\n            return delegate.localMxBean();\n        }\n        finally {\n            gate.leave(prev);\n        }\n    }\n    /** {@inheritDoc} */\n    @Override public void localLoadCache(IgniteBiPredicate<K, V> p,\n        @Nullable Object[] args) throws IgniteCheckedException {\n        CacheOperationContext prev = gate.enter(opCtx);\n        try {\n            delegate.localLoadCache(p, args);\n        }\n        finally {\n            gate.leave(prev);\n        }\n    }\n    /** {@inheritDoc} */\n    @Override public IgniteInternalFuture<?> localLoadCacheAsync(IgniteBiPredicate<K, V> p, @Nullable Object[] args) {\n        CacheOperationContext prev = gate.enter(opCtx);\n        try {\n            return delegate.localLoadCacheAsync(p, args);\n        }\n        finally {\n            gate.leave(prev);\n        }\n    }\n    /** {@inheritDoc} */\n    @Override public void preloadPartition(int part) throws IgniteCheckedException {\n        CacheOperationContext prev = gate.enter(opCtx);\n        try {\n            delegate.preloadPartition(part);\n        }\n        finally {\n            gate.leave(prev);\n        }\n    }\n    /** {@inheritDoc} */\n    @Override public IgniteInternalFuture<?> preloadPartitionAsync(int part) throws IgniteCheckedException {\n        CacheOperationContext prev = gate.enter(opCtx);\n        try {\n            return delegate.preloadPartitionAsync(part);\n        }\n        finally {\n            gate.leave(prev);\n        }\n    }\n    /** {@inheritDoc} */\n    @Override public boolean localPreloadPartition(int part) throws IgniteCheckedException {\n        CacheOperationContext prev = gate.enter(opCtx);\n        try {\n            return delegate.localPreloadPartition(part);\n        }\n        finally {\n            gate.leave(prev);\n        }\n    }\n    /** {@inheritDoc} */\n    @Override public GridCacheProxyImpl<K, V> forSubjectId(UUID subjId) {\n        return new GridCacheProxyImpl<>(ctx, delegate,\n            opCtx != null ? opCtx.forSubjectId(subjId) :\n                new CacheOperationContext(false, subjId, false, null, false, null, false, DFLT_ALLOW_ATOMIC_OPS_IN_TX));\n    }\n    /** {@inheritDoc} */\n    @Override public GridCacheProxyImpl<K, V> setSkipStore(boolean skipStore) {\n        CacheOperationContext prev = gate.enter(opCtx);\n        try {\n            if (opCtx != null && opCtx.skipStore() == skipStore)\n                return this;\n            return new GridCacheProxyImpl<>(ctx, delegate,\n                opCtx != null ? opCtx.setSkipStore(skipStore) :\n                    new CacheOperationContext(true, null, false, null, false, null, false, DFLT_ALLOW_ATOMIC_OPS_IN_TX));\n        }\n        finally {\n            gate.leave(prev);\n        }\n    }\n    /** {@inheritDoc} */\n<fim_suffix>    @Override public <K1, V1> GridCacheProxyImpl<K1, V1> keepBinary() {\n        if (opCtx != null && opCtx.isKeepBinary())\n            return (GridCacheProxyImpl<K1, V1>)this;\n        return new GridCacheProxyImpl<>((GridCacheContext<K1, V1>)ctx,\n            (GridCacheAdapter<K1, V1>)delegate,\n            opCtx != null ? opCtx.keepBinary() :\n                new CacheOperationContext(false, null, true, null, false, null, false, DFLT_ALLOW_ATOMIC_OPS_IN_TX));\n    }<fim_middle>// function below has no smell\n"}