{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.external.input.record.reader.twitter;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.asterix.external.api.IRawRecord;\nimport org.apache.asterix.external.api.IRecordReader;\nimport org.apache.asterix.external.dataflow.AbstractFeedDataFlowController;\nimport org.apache.asterix.external.input.record.CharArrayRecord;\nimport org.apache.asterix.external.util.FeedLogManager;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\nimport twitter4j.Query;\nimport twitter4j.QueryResult;\nimport twitter4j.Status;\nimport twitter4j.Twitter;\nimport twitter4j.TwitterException;\nimport twitter4j.TwitterObjectFactory;\n\n<fim_suffix>public class TwitterPullRecordReader implements IRecordReader<char[]> {\n\n    private Query query;\n    private Twitter twitter;\n    private int requestInterval = 5; // seconds\n    private QueryResult result;\n    private int nextTweetIndex = 0;\n    private long lastTweetIdReceived = 0;\n    private CharArrayRecord record;\n    private boolean stopped = false;\n\n    public TwitterPullRecordReader(Twitter twitter, String keywords, int requestInterval) {\n        this.twitter = twitter;\n        this.requestInterval = requestInterval;\n        this.query = new Query(keywords);\n        this.query.setCount(100);\n        this.record = new CharArrayRecord();\n    }\n\n    @Override\n    public void close() throws IOException {\n        // do nothing\n    }\n\n    @Override\n    public boolean hasNext() throws Exception {\n        return !stopped;\n    }\n\n    @Override\n    public IRawRecord<char[]> next() throws IOException, InterruptedException {\n        if (result == null || nextTweetIndex >= result.getTweets().size()) {\n            Thread.sleep(1000 * requestInterval);\n            query.setSinceId(lastTweetIdReceived);\n            try {\n                result = twitter.search(query);\n            } catch (TwitterException e) {\n                throw HyracksDataException.create(e);\n            }\n            nextTweetIndex = 0;\n        }\n        if (result != null && !result.getTweets().isEmpty()) {\n            List<Status> tw = result.getTweets();\n            Status tweet = tw.get(nextTweetIndex++);\n            if (lastTweetIdReceived < tweet.getId()) {\n                lastTweetIdReceived = tweet.getId();\n            }\n            String jsonTweet = TwitterObjectFactory.getRawJSON(tweet); // transform tweet obj to json\n            record.set(jsonTweet);\n            return record;\n        } else {\n            return null;\n        }\n    }\n\n    @Override\n    public boolean stop() {\n        stopped = true;\n        return true;\n    }\n\n    @Override\n    public void setFeedLogManager(FeedLogManager feedLogManager) {\n        // do nothing\n    }\n\n    @Override\n    public void setController(AbstractFeedDataFlowController controller) {\n        // do nothing\n    }\n\n    @Override\n    public boolean handleException(Throwable th) {\n        return false;\n    }\n}<fim_middle>// class below has no smell\n"}