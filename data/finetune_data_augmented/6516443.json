{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2011, 2014 SAP SE and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    SAP SE - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.tycho.p2.target;\n\nimport java.io.File;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.eclipse.equinox.p2.metadata.IArtifactKey;\nimport org.eclipse.equinox.p2.metadata.IInstallableUnit;\nimport org.eclipse.equinox.p2.metadata.Version;\nimport org.eclipse.tycho.DefaultArtifactKey;\nimport org.eclipse.tycho.ReactorProjectIdentities;\nimport org.eclipse.tycho.artifacts.DependencyResolutionException;\nimport org.eclipse.tycho.artifacts.IllegalArtifactReferenceException;\nimport org.eclipse.tycho.p2.metadata.IArtifactFacade;\nimport org.eclipse.tycho.p2.util.resolution.ExecutionEnvironmentResolutionHints;\nimport org.eclipse.tycho.repository.local.LocalArtifactRepository;\nimport org.eclipse.tycho.repository.p2base.artifact.provider.IRawArtifactFileProvider;\n\n<fim_suffix>abstract class TargetPlatformBaseImpl implements P2TargetPlatform {\n\n    // content\n\n    /**\n     * All installable units contained in the target platform. This includes reactor-external\n     * content and all results of upstream reactor projects (or all projects in case of the\n     * preliminary target platform where the reactor build order isn't known yet). Configured and\n     * automatic filters have been applied.\n     */\n    // TODO store as QueryableCollection, which contains indices to speed up queries?\n    protected final LinkedHashSet<IInstallableUnit> installableUnits;\n\n    // reverse lookup from target platform content to the contributing artifact/project \n\n    /**\n     * Map from installable units back to the contributing reactor project. Note: May contain\n     * installable units as keys which are not part of the target platform.\n     */\n    private final Map<IInstallableUnit, ReactorProjectIdentities> reactorProjectLookup;\n\n    /**\n     * Map from installable units back to the contributing artifacts. Note: May contain installable\n     * units as keys which are not part of the target platform.\n     */\n    final Map<IInstallableUnit, IArtifactFacade> mavenArtifactLookup;\n\n    // additional information on the dependency resolution context\n\n    /**\n     * Execution environment information with information about the packages provided by the JRE.\n     */\n    final ExecutionEnvironmentResolutionHints executionEnvironment;\n\n    final IRawArtifactFileProvider artifacts;\n    @Deprecated\n    private LocalArtifactRepository localArtifactRepository;\n\n    public TargetPlatformBaseImpl(LinkedHashSet<IInstallableUnit> installableUnits,\n            ExecutionEnvironmentResolutionHints executionEnvironment, IRawArtifactFileProvider artifacts,\n            LocalArtifactRepository localArtifactRepository,\n            Map<IInstallableUnit, ReactorProjectIdentities> reactorProjectLookup,\n            Map<IInstallableUnit, IArtifactFacade> mavenArtifactLookup) {\n        this.installableUnits = installableUnits;\n        this.executionEnvironment = executionEnvironment;\n        this.reactorProjectLookup = reactorProjectLookup;\n        this.mavenArtifactLookup = mavenArtifactLookup;\n        this.artifacts = artifacts;\n        this.localArtifactRepository = localArtifactRepository;\n    }\n\n    @Override\n    public final Set<IInstallableUnit> getInstallableUnits() {\n        return installableUnits;\n    }\n\n    @Override\n    public final org.eclipse.tycho.ArtifactKey resolveArtifact(String type, String id, String version)\n            throws IllegalArtifactReferenceException, DependencyResolutionException {\n        IInstallableUnit resolvedUnit = resolveUnit(type, id, ArtifactMatcher.parseAsOSGiVersion(version));\n        return new DefaultArtifactKey(type, id, resolvedUnit.getVersion().toString());\n    }\n\n    @Override\n    public final IInstallableUnit resolveUnit(String type, String id, Version version)\n            throws IllegalArtifactReferenceException, DependencyResolutionException {\n\n        IInstallableUnit matchingUnit = ArtifactMatcher.resolveReference(type, id, version, installableUnits);\n        if (matchingUnit == null) {\n            String message;\n            if (version == null) {\n                message = type + \" artifact with ID \\\"\" + id + \"\\\" was not found in the target platform\";\n            } else {\n                message = type + \" artifact with ID \\\"\" + id + \"\\\" and version matching \\\"\" + version\n                        + \"\\\" was not found in the target platform\";\n            }\n            throw new DependencyResolutionException(message);\n        }\n        return matchingUnit;\n    }\n\n    @Override\n    public final ExecutionEnvironmentResolutionHints getEEResolutionHints() {\n        return executionEnvironment;\n    }\n\n    @Override\n    public final Map<IInstallableUnit, ReactorProjectIdentities> getOriginalReactorProjectMap() {\n        return reactorProjectLookup;\n    }\n\n    @Override\n    public final Map<IInstallableUnit, IArtifactFacade> getOriginalMavenArtifactMap() {\n        return mavenArtifactLookup;\n    }\n\n    @Override\n    public final File getLocalArtifactFile(IArtifactKey key) {\n        return artifacts.getArtifactFile(key);\n    }\n\n    @Override\n    public final void saveLocalMavenRepository() {\n        localArtifactRepository.save();\n    }\n\n}<fim_middle>// class below has no smell\n"}