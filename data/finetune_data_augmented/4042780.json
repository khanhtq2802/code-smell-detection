{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.beam.sdk.state;\n\nimport java.util.Map;\nimport org.apache.beam.sdk.annotations.Experimental;\nimport org.apache.beam.sdk.annotations.Experimental.Kind;\n\n/**\n * A {@link ReadableState} cell mapping keys to values.\n *\n * <p>Implementations of this form of state are expected to implement map operations efficiently as\n * supported by some associated backing key-value store.\n *\n * @param <K> the type of keys maintained by this map\n * @param <V> the type of mapped values\n */\n<fim_suffix>@Experimental(Kind.STATE)\npublic interface MapState<K, V> extends State {\n\n  /**\n   * Associates the specified value with the specified key in this state.\n   *\n   * <p>Changes will not be reflected in the results returned by previous calls to {@link\n   * ReadableState#read} on the results any of the reading methods ({@link #get}, {@link #keys},\n   * {@link #values}, and {@link #entries}).\n   */\n  void put(K key, V value);\n\n  /**\n   * A deferred read-followed-by-write.\n   *\n   * <p>When {@code read()} is called on the result or state is committed, it forces a read of the\n   * map and reconciliation with any pending modifications.\n   *\n   * <p>If the specified key is not already associated with a value (or is mapped to {@code null})\n   * associates it with the given value and returns {@code null}, else returns the current value.\n   *\n   * <p>Changes will not be reflected in the results returned by previous calls to {@link\n   * ReadableState#read} on the results any of the reading methods ({@link #get}, {@link #keys},\n   * {@link #values}, and {@link #entries}).\n   */\n  ReadableState<V> putIfAbsent(K key, V value);\n\n  /**\n   * Remove the mapping for a key from this map if it is present.\n   *\n   * <p>Changes will not be reflected in the results returned by previous calls to {@link\n   * ReadableState#read} on the results any of the reading methods ({@link #get}, {@link #keys},\n   * {@link #values}, and {@link #entries}).\n   */\n  void remove(K key);\n\n  /**\n   * A deferred lookup.\n   *\n   * <p>A user is encouraged to call {@code get} for all relevant keys and call {@code readLater()}\n   * on the results.\n   *\n   * <p>When {@code read()} is called, a particular state implementation is encouraged to perform\n   * all pending reads in a single batch.\n   */\n  ReadableState<V> get(K key);\n\n  /** Returns an {@link Iterable} over the keys contained in this map. */\n  ReadableState<Iterable<K>> keys();\n\n  /** Returns an {@link Iterable} over the values contained in this map. */\n  ReadableState<Iterable<V>> values();\n\n  /** Returns an {@link Iterable} over the key-value pairs contained in this map. */\n  ReadableState<Iterable<Map.Entry<K, V>>> entries();\n}<fim_middle>// class below has no smell\n"}