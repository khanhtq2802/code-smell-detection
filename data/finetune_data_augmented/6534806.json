{"text": "<fim_prefix>/**\n * Copyright (c) 2014,2019 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\npackage org.eclipse.smarthome.binding.sonyaudio.internal.protocol;\nimport java.util.List;\n/**\n * The {@link SonyAudioMethod} base class for SONY API methods\n *\n * @author David \u00c5berg - Initial contribution\n */\npublic abstract class SonyAudioMethod {\n    protected int id = 1;\n    protected String method;\n    protected String version;\n    public SonyAudioMethod(String method, String version) {\n        this.method = method;\n        this.version = version;\n    }\n};\n/**\n * The {@link GetPowerStatus} SONY Audio control API method\n *\n * @author David \u00c5berg - Initial contribution\n */\nclass GetPowerStatus extends SonyAudioMethod {\n    public String[] params = new String[] {};\n    public GetPowerStatus() {\n        super(\"getPowerStatus\", \"1.1\");\n    }\n}\n/**\n * The {@link GetCurrentExternalTerminalsStatus} SONY Audio control API method\n *\n * @author David \u00c5berg - Initial contribution\n */\nclass GetCurrentExternalTerminalsStatus extends SonyAudioMethod {\n    public String[] params = new String[] {};\n    public GetCurrentExternalTerminalsStatus() {\n        super(\"getCurrentExternalTerminalsStatus\", \"1.0\");\n    }\n}\n/**\n * The {@link SetPowerStatus} SONY Audio control API method\n *\n * @author David \u00c5berg - Initial contribution\n */\nclass SetPowerStatus extends SonyAudioMethod {\n    public Param[] params;\n    class Param {\n        public String status;\n        Param(boolean power) {\n            status = power ? \"active\" : \"off\";\n        }\n    }\n    SetPowerStatus(boolean power) {\n        super(\"setPowerStatus\", \"1.1\");\n        Param param = new Param(power);\n        params = new Param[] { param };\n    }\n}\n/**\n * The {@link SetActiveTerminal} SONY Audio control API method\n *\n * @author David \u00c5berg - Initial contribution\n */\nclass SetActiveTerminal extends SonyAudioMethod {\n    public Param[] params;\n    class Param {\n        public String active;\n        public String uri;\n        Param(boolean power, int zone) {\n            active = power ? \"active\" : \"inactive\";\n            if (zone > 0) {\n                uri = \"extOutput:zone?zone=\" + Integer.toString(zone);\n            }\n        }\n    }\n    SetActiveTerminal(boolean power, int zone) {\n        super(\"setActiveTerminal\", \"1.0\");\n        Param param = new Param(power, zone);\n        params = new Param[] { param };\n    }\n}\n/**\n * The {@link GetPlayingContentInfo} SONY Audio control API method\n *\n * @author David \u00c5berg - Initial contribution\n */\nclass GetPlayingContentInfo extends SonyAudioMethod {\n    public Param[] params;\n    class Param {\n        String output = \"\";\n        Param() {\n        }\n        Param(int zone) {\n            if (zone > 0) {\n                output = \"extOutput:zone?zone=\" + Integer.toString(zone);\n            }\n        }\n    }\n    GetPlayingContentInfo() {\n        super(\"getPlayingContentInfo\", \"1.2\");\n        Param param = new Param();\n        params = new Param[] { param };\n    }\n    GetPlayingContentInfo(int zone) {\n        super(\"getPlayingContentInfo\", \"1.2\");\n        Param param = new Param(zone);\n        params = new Param[] { param };\n    }\n}\n/**\n * The {@link SetPlayContent} SONY Audio control API method\n *\n * @author David \u00c5berg - Initial contribution\n */\nclass SetPlayContent extends SonyAudioMethod {\n    public Param[] params;\n    class Param {\n        String output = \"\";\n        String uri;\n        Param(String input) {\n            uri = input;\n        }\n        Param(String input, int zone) {\n            uri = input;\n            if (zone > 0) {\n                output = \"extOutput:zone?zone=\" + Integer.toString(zone);\n            }\n        }\n    }\n    SetPlayContent(String input) {\n        super(\"setPlayContent\", \"1.2\");\n        params = new Param[] { new Param(input) };\n    }\n    SetPlayContent(String input, int zone) {\n        super(\"setPlayContent\", \"1.2\");\n        params = new Param[] { new Param(input, zone) };\n    }\n}\n/**\n * The {@link GetVolumeInformation} SONY Audio control API method\n *\n * @author David \u00c5berg - Initial contribution\n */\nclass GetVolumeInformation extends SonyAudioMethod {\n    public Param[] params;\n    class Param {\n        String output = \"\";\n        Param() {\n        }\n        Param(int zone) {\n            if (zone > 0) {\n                output = \"extOutput:zone?zone=\" + Integer.toString(zone);\n            }\n        }\n    }\n    GetVolumeInformation() {\n        this(0);\n    }\n    GetVolumeInformation(int zone) {\n        super(\"getVolumeInformation\", \"1.1\");\n        params = new Param[] { new Param(zone) };\n    }\n}\n/**\n * The {@link SetAudioVolume} SONY Audio control API method\n *\n * @author David \u00c5berg - Initial contribution\n */\nclass SetAudioVolume extends SonyAudioMethod {\n    public Param[] params;\n    class Param {\n        String output = \"\";\n        String volume;\n        Param(long new_volume) {\n            volume = Long.toString(new_volume);\n        }\n        Param(String volume_change) {\n            volume = volume_change;\n        }\n        Param(long new_volume, int zone) {\n            volume = Long.toString(new_volume);\n            if (zone > 0) {\n                output = \"extOutput:zone?zone=\" + Integer.toString(zone);\n            }\n        }\n        Param(String volume_change, int zone) {\n            volume = volume_change;\n            if (zone > 0) {\n                output = \"extOutput:zone?zone=\" + Integer.toString(zone);\n            }\n        }\n    }\n    SetAudioVolume(int volume, int min, int max) {\n        super(\"setAudioVolume\", \"1.1\");\n        long scaled_volume = scaleVolume(volume, min, max);\n        params = new Param[] { new Param(scaled_volume) };\n    }\n<fim_suffix>    SetAudioVolume(int zone, int volume, int min, int max) {\n        super(\"setAudioVolume\", \"1.1\");\n        long scaled_volume = scaleVolume(volume, min, max);\n        params = new Param[] { new Param(scaled_volume, zone) };\n    }\n    SetAudioVolume(String volume_change) {\n        super(\"setAudioVolume\", \"1.1\");\n        params = new Param[] { new Param(volume_change) };\n    }\n    SetAudioVolume(int zone, String volume_change) {\n        super(\"setAudioVolume\", \"1.1\");\n        params = new Param[] { new Param(volume_change, zone) };\n    }\n    long scaleVolume(int volume, int min, int max) {\n        return Math.round(((max - min) * volume / 100.0) + min);\n    }\n}\n/**\n * The {@link SetAudioMute} SONY Audio control API method\n *\n * @author David \u00c5berg - Initial contribution\n */\nclass SetAudioMute extends SonyAudioMethod {\n    public Param[] params;\n    class Param {\n        String output = \"\";\n        String mute;\n        Param(boolean mute) {\n            this.mute = mute ? \"on\" : \"off\";\n        }\n        Param(boolean mute, int zone) {\n            this.mute = mute ? \"on\" : \"off\";\n            if (zone > 0) {\n                output = \"extOutput:zone?zone=\" + Integer.toString(zone);\n            }\n        }\n    }\n    SetAudioMute(boolean mute) {\n        super(\"setAudioMute\", \"1.1\");\n        params = new Param[] { new Param(mute) };\n    }\n    SetAudioMute(boolean mute, int zone) {\n        super(\"setAudioMute\", \"1.1\");\n        params = new Param[] { new Param(mute, zone) };\n    }\n}\n/**\n * Helper class\n *\n * @author David \u00c5berg - Initial contribution\n */\nclass GetSoundSettings extends SonyAudioMethod {\n    public Param[] params;\n    class Param {\n        String target;\n        Param(String target) {\n            this.target = target;\n        }\n    }<fim_middle>// function below has no smell\n"}