{"text": "<fim_prefix>import org.eclipse.birt.report.model.metadata.ElementPropertyDefn;\nimport org.eclipse.birt.report.model.metadata.PropertyDefn;\nimport org.eclipse.birt.report.model.util.CommandLabelFactory;\n/**\n * Records adding or removing an item from a property list.\n * \n */\n<fim_suffix>public class PropertyListRecord extends SimpleRecord\n{\n\t/**\n\t * The element that contains the property list.\n\t */\n\tprivate final DesignElement element;\n\t/**\n\t * The element that contains the property list.\n\t */\n\tprivate final ElementPropertyDefn propDefn;\n\t/**\n\t * Reference to the property list.\n\t */\n\tprivate final StructureContext context;\n\t/**\n\t * The property list itself.\n\t */\n\tprivate final List<Object> list;\n\t/**\n\t * The item to add or remove.\n\t */\n\tprivate final Object value;\n\t/**\n\t * Whether the operation is an add or remove.\n\t */\n\tprotected final boolean isAdd;\n\tprivate final int posn;\n\t/**\n\t * Constructor for a remove operation. Removes the item given by the member\n\t * reference.\n\t * \n\t * @param element\n\t *            the element\n\t * @param context\n\t *            the context to add the structure\n\t * @param toRemove\n\t *            the structure to remove\n\t * \n\t */\n\tpublic PropertyListRecord( DesignElement element, StructureContext context, int posn )\n\t{\n\t\tthis.element = element;\n\t\tthis.isAdd = false;\n\t\tthis.context = context;\n\t\tthis.propDefn = context.getElementProp( );\n\t\t// ensure the top of the context is just the element itself\n\t\tassert element == context.getElement( );\n\t\tObject valueContainer = context.getValueContainer( );\n\t\tif ( valueContainer instanceof Structure )\n\t\t\tlist = (List) ( (Structure) valueContainer ).getLocalProperty(\n\t\t\t\t\tnull, (PropertyDefn) context.getPropDefn( ) );\n\t\telse\n\t\t\tlist = (List) ( (DesignElement) valueContainer ).getLocalProperty(\n\t\t\t\t\tnull, (ElementPropertyDefn) context.getPropDefn( ) );\n\t\tthis.posn = posn;\n\t\tthis.value = list.get( posn );\n\t\tlabel = CommandLabelFactory.getCommandLabel(\n\t\t\t\tMessageConstants.CHANGE_PROPERTY_MESSAGE, new String[]{context\n\t\t\t\t\t\t.getElementProp( ).getDisplayName( )} );\n\t}\n\t/**\n\t * Constructor for a remove operation. Removes the item given by the member\n\t * reference.\n\t * \n\t * \n\t * @param element\n\t *            the element\n\t * @param context\n\t *            the context to add the structure\n\t * @param toAdd\n\t *            the structure to add\n\t * @param posn\n\t *            the position to add\n\t * \n\t */\n\tpublic PropertyListRecord( DesignElement element, StructureContext context,\n\t\t\tObject toAdd, int posn )\n\t{\n\t\tthis.element = element;\n\t\tthis.isAdd = true;\n\t\tthis.context = context;\n\t\tthis.value = toAdd;\n\t\tthis.propDefn = (ElementPropertyDefn) context.getElementProp( );\n\t\t// ensure the top of the context is just the element itself\n\t\tassert element == context.getElement( );\n\t\tObject valueContainer = context.getValueContainer( );\n\t\tif ( valueContainer instanceof Structure )\n\t\t\tlist = (List) ( (Structure) valueContainer ).getLocalProperty(\n\t\t\t\t\tnull, (PropertyDefn) context.getPropDefn( ) );\n\t\telse\n\t\t\tlist = (List) ( (DesignElement) valueContainer ).getLocalProperty(\n\t\t\t\t\tnull, (ElementPropertyDefn) context.getPropDefn( ) );\n\t\tthis.posn = posn;\n\t\tlabel = CommandLabelFactory.getCommandLabel(\n\t\t\t\tMessageConstants.CHANGE_PROPERTY_MESSAGE, new String[]{context\n\t\t\t\t\t\t.getElementProp( ).getDisplayName( )} );\n\t}\n\t/**\n\t * Constructor for a remove operation. Removes the item given by the member\n\t * reference.\n\t * \n\t * @param element\n\t *            the design element\n\t * @param propDefn\n\t *            the element property definition\n\t * \n\t * @param theList\n\t *            the property list itself\n\t * @param toAdd\n\t *            the object to add, not the structure\n\t * @param posn\n\t *            the position to add\n\t */\n\tpublic PropertyListRecord( DesignElement element,\n\t\t\tElementPropertyDefn propDefn, List theList, Object toAdd, int posn )\n\t{\n\t\tthis.element = element;\n\t\tthis.isAdd = true;\n\t\tthis.value = toAdd;\n\t\tthis.list = theList;\n\t\tthis.context = null;\n\t\tthis.propDefn = propDefn;\n\t\tthis.posn = posn;\n\t\tlabel = CommandLabelFactory.getCommandLabel(\n\t\t\t\tMessageConstants.CHANGE_PROPERTY_MESSAGE, new String[]{propDefn\n\t\t\t\t\t\t.getDisplayName( )} );\n\t}\n\t/**\n\t * Constructor for a remove operation. Removes the item given by the member\n\t * reference.\n\t * \n\t * @param element\n\t *            the element\n\t * @param propDefn\n\t *            the element property definition\n\t * @param theList\n\t *            the property list itself\n\t * @param toRemove\n\t *            the object to remove, not the structure\n\t */\n\tpublic PropertyListRecord( DesignElement element,\n\t\t\tElementPropertyDefn propDefn, List theList, int posn )\n\t{\n\t\tthis.element = element;\n\t\tthis.isAdd = false;\n\t\tthis.list = theList;\n\t\tthis.posn = posn;\n\t\tthis.value = list.get( posn );\n\t\tthis.context = new StructureContext( element, propDefn, null );\n\t\tthis.propDefn = propDefn;\n\t\tlabel = CommandLabelFactory.getCommandLabel(\n\t\t\t\tMessageConstants.CHANGE_PROPERTY_MESSAGE, new String[]{propDefn\n\t\t\t\t\t\t.getDisplayName( )} );\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see\n\t * org.eclipse.birt.report.model.design.core.activity.SimpleRecord#perform\n\t * (boolean)\n\t */\n\tprotected void perform( boolean undo )\n\t{\n\t\tboolean doAdd = ( undo && !isAdd || !undo && isAdd );\n\t\tif ( doAdd )\n\t\t{\n\t\t\tif ( !( value instanceof Structure ) )\n\t\t\t{\n\t\t\t\tlist.add( posn, value );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// setup the context for the structure.\n\t\t\tcontext.add( posn, (Structure) value );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ( !( value instanceof Structure ) )\n\t\t\t{\n\t\t\t\tlist.remove( posn );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcontext.remove( posn );\n\t\t\t// if the structure list is empty now, then clear value\n\t\t\tObject localValue = context.getLocalValue( element.getRoot( ) );\n\t\t\tif ( localValue instanceof List )\n\t\t\t{\n\t\t\t\tList listValue = (List) localValue;\n\t\t\t\tif ( listValue.isEmpty( ) )\n\t\t\t\t\tcontext.clearValue( );\n\t\t\t}\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see\n\t * org.eclipse.birt.report.model.design.core.activity.AbstractElementRecord\n\t * #getTarget()\n\t */\n\tpublic DesignElement getTarget( )\n\t{\n\t\tif ( eventTarget != null )\n\t\t\treturn eventTarget.getElement( );\n\t\treturn element;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see\n\t * org.eclipse.birt.report.model.design.core.AbstractElementRecord#getEvent\n\t * ()\n\t */\n\tpublic NotificationEvent getEvent( )\n\t{\n\t\tif ( eventTarget != null )\n\t\t\treturn new PropertyEvent( eventTarget.getElement( ), eventTarget\n\t\t\t\t\t.getPropName( ) );\n\t\t// Use the same notification for the done/redone and undone states.\n\t\treturn new PropertyEvent( element, propDefn.getName( ) );\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.birt.report.model.activity.ActivityRecord#getPostTasks()\n\t */\n\tprotected List<RecordTask> getPostTasks( )\n\t{\n\t\tList<RecordTask> retList = new ArrayList<RecordTask>( );\n\t\tretList.addAll( super.getPostTasks( ) );\n\t\tretList.add( new NotificationRecordTask( element, getEvent( ) ) );\n\t\t// if the structure is referencable, then send notification to the\n\t\t// clients\n\t\tif ( value != null && value instanceof IStructure\n\t\t\t\t&& ( (IStructure) value ).isReferencable( ) )\n\t\t{\n\t\t\tReferencableStructure refValue = (ReferencableStructure) value;\n\t\t\tretList.add( new NotificationRecordTask( refValue, getEvent( ) ) );\n\t\t}\n\t\treturn retList;\n\t}\n}<fim_middle>// class below has no smell\n"}