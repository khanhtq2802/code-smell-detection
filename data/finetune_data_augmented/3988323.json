{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *\n */\n\npackage org.apache.polygene.library.rest.server.api;\n\nimport java.time.Instant;\nimport java.time.temporal.ChronoField;\nimport org.apache.polygene.api.entity.EntityComposite;\nimport org.apache.polygene.api.unitofwork.NoSuchEntityException;\nimport org.apache.polygene.api.unitofwork.UnitOfWork;\nimport org.apache.polygene.spi.PolygeneSPI;\nimport org.apache.polygene.spi.entity.EntityState;\nimport org.restlet.Request;\nimport org.restlet.Response;\nimport org.restlet.data.Status;\nimport org.restlet.data.Tag;\nimport org.restlet.resource.ResourceException;\n\n/**\n * JAVADOC\n */\nclass ResourceValidity\n{\n    private EntityComposite entity;\n    private final PolygeneSPI spi;\n    private Request request;\n\n    ResourceValidity( EntityComposite entity, PolygeneSPI spi, Request request )\n    {\n        this.entity = entity;\n        this.spi = spi;\n        this.request = request;\n    }\n\n<fim_suffix>    void updateEntity( UnitOfWork current )\n    {\n        try\n        {\n            entity = current.get( entity );\n        }\n        catch( NoSuchEntityException e )\n        {\n            // Entity was deleted\n            entity = null;\n        }\n    }\n\n    void updateResponse( Response response )\n    {\n        if( entity != null )\n        {\n            EntityState state = spi.entityStateOf( entity );\n            Tag tag = new Tag( state.entityReference().identity() + \"/\" + state.version() );\n            response.getEntity().setModificationDate( java.util.Date.from( state.lastModified() ) );\n            response.getEntity().setTag( tag );\n        }\n    }\n\n    void checkRequest()\n        throws ResourceException\n    {\n        // Check command rules\n        Instant unmodifiedSince = request.getConditions().getUnmodifiedSince().toInstant();\n        EntityState state = spi.entityStateOf( entity );\n        Instant lastModifiedSeconds = state.lastModified().with(ChronoField.NANO_OF_SECOND, 0 );\n        if( unmodifiedSince != null )\n        {\n            if( lastModifiedSeconds.isAfter( unmodifiedSince ) )\n            {\n                throw new ResourceException( Status.CLIENT_ERROR_CONFLICT );\n            }\n        }\n\n        // Check query rules\n        Instant modifiedSince = request.getConditions().getModifiedSince().toInstant();\n        if( modifiedSince != null )\n        {\n            if( !lastModifiedSeconds.isAfter( modifiedSince ) )\n            {\n                throw new ResourceException( Status.REDIRECTION_NOT_MODIFIED );\n            }\n        }\n    }\n}<fim_middle>// function below has no smell\n"}