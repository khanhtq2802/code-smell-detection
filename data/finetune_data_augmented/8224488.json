{"text": "<fim_prefix>        throws SAXException {\n            setTypedWidget(loc, attrs, getWidgetClass(), getWidgetName());\n            if (!isVisible(widget)) {\n                return hNull;\n            }\n            contextWidgets.addFirst(contextWidget);\n            contextWidget = widget;\n            return this;\n        }\n        public void endElement(String uri, String loc, String raw)\n        throws SAXException {\n            contextWidget = (Widget) contextWidgets.removeFirst();\n        }\n    }\n    /**\n     * Handles <code>ft:aggregate</code> element.\n     */\n    protected class AggregateWidgetHandler extends GroupHandler {\n        protected Class getWidgetClass() {\n            return AggregateField.class;\n        }\n        protected String getWidgetName() {\n            return \"aggregate\";\n        }\n    }\n    /**\n     * Handles <code>ft:choose</code> element.\n     */\n    protected class ChooseHandler extends CopyHandler {\n        public Handler startElement(String uri, String loc, String raw, Attributes attrs) throws SAXException {\n            setWidget(loc, getRequiredAttributeValue(loc, attrs, \"path\"));\n            // TODO: Should instead check for datatype convertable to String.\n            if (!(widget instanceof DataWidget)) {\n                throw new SAXException(\"Element '\" + loc + \"' can only be used with DataWidget widgets, \" +\n                                       \"at \" + getLocation());\n            }\n            // Choose does not change the context widget like Union does.\n            chooseWidgets.addFirst(widget);\n            return this;\n        }\n        public Handler nestedElement(String uri, String loc, String raw, Attributes attrs) throws SAXException {\n            if (FormsConstants.TEMPLATE_NS.equals(uri)) {\n                if (\"when\".equals(loc)) {\n                    String testValue = getAttributeValue(loc, attrs, \"value\");\n                    String value = (String) ((Widget) chooseWidgets.get(0)).getValue();\n                    return testValue.equals(value) ? hSkip : hNull;\n                }\n                throw new SAXException(\"Element '\" + loc + \"' is not permitted within 'choose', \" +\n                                       \"at \" + getLocation());\n            }\n            return hChoosePassThru;\n        }\n        public void endElement(String uri, String loc, String raw) throws SAXException {\n            chooseWidgets.removeFirst();\n        }\n    }\n    /**\n     * Handles <code>ft:choose/ft:when</code> element.\n     */\n    protected class ChoosePassThruHandler extends CopyHandler {\n        public Handler nestedElement(String uri, String loc, String raw, Attributes attrs) throws SAXException {\n            if (FormsConstants.TEMPLATE_NS.equals(uri)) {\n                if (\"when\".equals(loc)) {\n                    String testValue = getAttributeValue(loc, attrs, \"value\");\n                    String value = (String) ((Widget) chooseWidgets.get(0)).getValue();\n                    return testValue.equals(value)?  hSkip: hNull;\n                }\n                throw new SAXException(\"Element '\" + loc + \"' is not permitted within 'choose', \" +\n                                       \"at \" + getLocation());\n            }\n            return this;\n        }\n    }\n    /**\n     * Handles <code>ft:struct</code> element.\n     */\n    protected class StructHandler extends GroupHandler {\n        protected Class getWidgetClass() {\n            return Struct.class;\n        }\n        protected String getWidgetName() {\n            return \"struct\";\n        }\n    }\n    /**\n     * Handles <code>ft:union</code> element.\n     */\n    protected class UnionHandler extends GroupHandler {\n        protected Class getWidgetClass() {\n            return Union.class;\n        }\n        protected String getWidgetName() {\n            return \"union\";\n        }\n        public Handler nestedElement(String uri, String loc, String raw, Attributes attrs)\n        throws SAXException {\n            if (FormsConstants.TEMPLATE_NS.equals(uri)) {\n                if (\"case\".equals(loc)) {\n                    String id = getAttributeValue(loc, attrs, \"id\");\n                    String value = (String) contextWidget.getValue();\n                    if (id.equals(value != null ? value : \"\")) {\n                        return hSkip;\n                    }\n                    return hNull;\n                }\n                throw new SAXException(\"Element '\" + loc + \"' is not permitted within 'union', \" +\n                                       \"at \" + getLocation());\n            }\n            return hUnionPassThru;\n        }\n    }\n    /**\n     * Handles <code>ft:union/ft:case</code> element.\n     */\n    protected class UnionPassThruHandler extends CopyHandler {\n        public Handler nestedElement(String uri, String loc, String raw, Attributes attrs)\n        throws SAXException {\n            if (FormsConstants.TEMPLATE_NS.equals(uri)) {\n                if (\"case\".equals(loc)) {\n                    if (contextWidget.getValue().equals(attrs.getValue(\"id\"))) {\n                        return hSkip;\n                    }\n                    return hNull;\n                }\n                throw new SAXException(\"Element '\" + loc + \"' is not permitted within 'union', \" +\n                                       \"at \" + getLocation());\n            }\n            return this;\n        }\n    }\n    /**\n     * Handles <code>ft:new</code> element.\n     */\n    protected class NewHandler extends CopyHandler {\n        public Handler startElement(String uri, String loc, String raw, Attributes attrs)\n        throws SAXException {\n            String id = getRequiredAttributeValue(loc, attrs, \"id\");\n            SaxBuffer buffer = (SaxBuffer) classes.get(id);\n            if (buffer == null) {\n                throw new SAXException(\"New: Class '\" + id + \"' does not exist, \" +\n                                       \"at \" + getLocation());\n            }\n            pushHandler(hNested);\n            buffer.toSAX(EffectWidgetReplacingPipe.this);\n            popHandler();\n            return this;\n        }\n        public Handler nestedElement(String uri, String loc, String raw, Attributes attrs)\n        throws SAXException {\n            return hNull;\n        }\n        public void endElement(String uri, String loc, String raw)\n        throws SAXException {\n        }\n    }\n    /**\n     * Handles <code>ft:class</code> element.\n     * <pre>\n     * &lt;ft:class id=\"...\"&gt;\n     *   ...\n     * &lt;/ft:class&gt;\n     * </pre>\n     */\n    protected class ClassHandler extends BufferHandler {\n        // FIXME What if <class> is nested within <class>?\n        private String widgetPath;\n        public Handler startElement(String uri, String loc, String raw, Attributes attrs)\n        throws SAXException {\n            widgetPath = getRequiredAttributeValue(loc, attrs, \"id\");\n            beginBuffer();\n            return this;\n        }\n        public Handler nestedElement(String uri, String loc, String raw, Attributes attrs)\n        throws SAXException {\n            return hBuffer;\n        }\n        public void endElement(String uri, String loc, String raw) throws SAXException {\n            classes.put(widgetPath, endBuffer());\n        }\n    }\n    /**\n     * Handles <code>ft:continuation-id</code> element.\n     * <pre>\n     * &lt;ft:continuation-id/&gt;\n     * </pre>\n     */\n    protected class ContinuationIdHandler extends ErrorHandler {\n        protected String getName() {\n            return \"continuation-id\";\n        }\n        public Handler startElement(String uri, String loc, String raw, Attributes attrs)\n        throws SAXException {\n            // Insert the continuation id\n            // FIXME(SW) we could avoid costly JXPath evaluation if we had the objectmodel here.\n            Object idObj = pipeContext.evaluateExpression(\"$cocoon/continuation/id\");\n            if (idObj == null) {\n                throw new SAXException(\"No continuation found\");\n            }\n            String id = idObj.toString();\n            getContentHandler().startElement(FormsConstants.INSTANCE_NS, \"continuation-id\", FormsConstants.INSTANCE_PREFIX_COLON + \"continuation-id\", attrs);\n            getContentHandler().characters(id.toCharArray(), 0, id.length());\n            getContentHandler().endElement(FormsConstants.INSTANCE_NS, \"continuation-id\", FormsConstants.INSTANCE_PREFIX_COLON + \"continuation-id\");\n            return this;\n        }\n        public void endElement(String uri, String loc, String raw) throws SAXException {\n        }\n    }\n    /**\n     * This ContentHandler helps in inserting SAX events before the closing tag of the root\n     * element.\n     */\n<fim_suffix>    protected class StylingContentHandler extends AbstractXMLPipe {\n        private int elementNesting;\n        private SaxBuffer styling;\n        public void setSaxFragment(SaxBuffer saxFragment) {\n            styling = saxFragment;\n        }\n        public void recycle() {\n            super.recycle();\n            elementNesting = 0;\n            styling = null;\n        }\n        public void startElement(String uri, String loc, String raw, Attributes a)\n        throws SAXException {\n            elementNesting++;\n            super.startElement(uri, loc, raw, a);\n        }\n        public void endElement(String uri, String loc, String raw)\n        throws SAXException {\n            elementNesting--;\n            if (elementNesting == 0) {\n                styling.toSAX(getContentHandler());\n            }\n            super.endElement(uri, loc, raw);\n        }\n    }<fim_middle>// class below has no smell\n"}