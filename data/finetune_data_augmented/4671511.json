{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.mapred.jobcontrol;\n\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.hadoop.classification.InterfaceAudience;\nimport org.apache.hadoop.classification.InterfaceStability;\nimport org.apache.hadoop.mapred.JobClient;\nimport org.apache.hadoop.mapred.JobConf;\nimport org.apache.hadoop.mapred.JobID;\nimport org.apache.hadoop.mapreduce.lib.jobcontrol.ControlledJob;\n\n/** \n * @deprecated Use {@link ControlledJob} instead.  \n */\n<fim_suffix>@Deprecated\n@InterfaceAudience.Public\n@InterfaceStability.Stable\npublic class Job extends ControlledJob {\n  static final Log LOG = LogFactory.getLog(Job.class);\n\n  final public static int SUCCESS = 0;\n  final public static int WAITING = 1;\n  final public static int RUNNING = 2;\n  final public static int READY = 3;\n  final public static int FAILED = 4;\n  final public static int DEPENDENT_FAILED = 5;\n\n  /** \n   * Construct a job.\n   * @param jobConf a mapred job configuration representing a job to be executed.\n   * @param dependingJobs an array of jobs the current job depends on\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Job(JobConf jobConf, ArrayList<?> dependingJobs) throws IOException {\n    super(new org.apache.hadoop.mapreduce.Job(jobConf), \n          (List<ControlledJob>) dependingJobs);\n  }\n\n  public Job(JobConf conf) throws IOException {\n    super(conf);\n  }\n\n  /**\n   * @return the mapred ID of this job as assigned by the \n   * mapred framework.\n   */\n  public JobID getAssignedJobID() {\n    org.apache.hadoop.mapreduce.JobID temp = super.getMapredJobID();\n    if(temp == null) {\n      return null;\n    }\n    return JobID.downgrade(temp);\n  }\n\n  /**\n   * @deprecated setAssignedJobID should not be called.\n   * JOBID is set by the framework.\n   */\n  @Deprecated\n  public void setAssignedJobID(JobID mapredJobID) {\n    // do nothing\n  }\n\n  /**\n   * @return the mapred job conf of this job\n   */\n  public synchronized JobConf getJobConf() {\n    return new JobConf(super.getJob().getConfiguration());\n  }\n\n\n  /**\n   * Set the mapred job conf for this job.\n   * @param jobConf the mapred job conf for this job.\n   */\n  public synchronized void setJobConf(JobConf jobConf) {\n    try {\n      super.setJob(new org.apache.hadoop.mapreduce.Job(jobConf));\n    } catch (IOException ioe) { \n      LOG.info(\"Exception\" + ioe);\n    }\n  }\n\n  /**\n   * @return the state of this job\n   */\n  public synchronized int getState() {\n    State state = super.getJobState();\n    if (state == State.SUCCESS) {\n      return SUCCESS;\n    } \n    if (state == State.WAITING) {\n      return WAITING;\n    }\n    if (state == State.RUNNING) {\n      return RUNNING;\n    }\n    if (state == State.READY) {\n      return READY;\n    }\n    if (state == State.FAILED ) {\n      return FAILED;\n    }\n    if (state == State.DEPENDENT_FAILED ) {\n      return DEPENDENT_FAILED;\n    }\n    return -1;\n  }\n  \n  /**\n   * @return the job client of this job\n   */\n  public JobClient getJobClient() {\n    try {\n      return new JobClient(super.getJob().getConfiguration());\n    } catch (IOException ioe) {\n      return null;\n    }\n  }\n\n  /**\n   * @return the depending jobs of this job\n   */\n  public ArrayList<Job> getDependingJobs() {\n    return JobControl.castToJobList(super.getDependentJobs());\n  }\n\n}<fim_middle>// class below has no smell\n"}