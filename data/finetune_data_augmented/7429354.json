{"text": "<fim_prefix>/*\n * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage org.graalvm.compiler.phases.common.inlining.policy;\n\nimport static org.graalvm.compiler.phases.common.inlining.InliningPhase.Options.AlwaysInlineIntrinsics;\n\nimport java.util.Map;\n\nimport org.graalvm.compiler.nodes.Invoke;\nimport org.graalvm.compiler.nodes.StructuredGraph;\nimport org.graalvm.compiler.nodes.spi.Replacements;\nimport org.graalvm.compiler.phases.common.inlining.InliningUtil;\nimport org.graalvm.compiler.phases.common.inlining.info.InlineInfo;\nimport org.graalvm.compiler.phases.common.inlining.info.elem.Inlineable;\n\nimport jdk.vm.ci.meta.ProfilingInfo;\nimport jdk.vm.ci.meta.ResolvedJavaMethod;\n\n<fim_suffix>public abstract class AbstractInliningPolicy implements InliningPolicy {\n    public static final float RelevanceCapForInlining = 1.0f;\n    public static final float CapInheritedRelevance = 1.0f;\n    protected final Map<Invoke, Double> hints;\n\n    public AbstractInliningPolicy(Map<Invoke, Double> hints) {\n        this.hints = hints;\n    }\n\n    protected double computeMaximumSize(double relevance, int configuredMaximum) {\n        double inlineRatio = Math.min(RelevanceCapForInlining, relevance);\n        return configuredMaximum * inlineRatio;\n    }\n\n    protected double getInliningBonus(InlineInfo info) {\n        if (hints != null && hints.containsKey(info.invoke())) {\n            return hints.get(info.invoke());\n        }\n        return 1;\n    }\n\n    protected boolean isIntrinsic(Replacements replacements, InlineInfo info) {\n        if (AlwaysInlineIntrinsics.getValue(info.graph().getOptions())) {\n            return onlyIntrinsics(replacements, info);\n        } else {\n            return onlyForcedIntrinsics(replacements, info);\n        }\n    }\n\n    private static boolean onlyIntrinsics(Replacements replacements, InlineInfo info) {\n        for (int i = 0; i < info.numberOfMethods(); i++) {\n            if (!InliningUtil.canIntrinsify(replacements, info.methodAt(i), info.invoke().bci())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean onlyForcedIntrinsics(Replacements replacements, InlineInfo info) {\n        if (!onlyIntrinsics(replacements, info)) {\n            return false;\n        }\n        if (!info.shouldInline()) {\n            return false;\n        }\n        return true;\n    }\n\n    protected int previousLowLevelGraphSize(InlineInfo info) {\n        int size = 0;\n        for (int i = 0; i < info.numberOfMethods(); i++) {\n            ResolvedJavaMethod m = info.methodAt(i);\n            ProfilingInfo profile = info.graph().getProfilingInfo(m);\n            int compiledGraphSize = profile.getCompilerIRSize(StructuredGraph.class);\n            if (compiledGraphSize > 0) {\n                size += compiledGraphSize;\n            }\n        }\n        return size;\n    }\n\n    protected double determineInvokeProbability(InlineInfo info) {\n        double invokeProbability = 0;\n        for (int i = 0; i < info.numberOfMethods(); i++) {\n            Inlineable callee = info.inlineableElementAt(i);\n            Iterable<Invoke> invokes = callee.getInvokes();\n            if (invokes.iterator().hasNext()) {\n                for (Invoke invoke : invokes) {\n                    invokeProbability += callee.getProbability(invoke);\n                }\n            }\n        }\n        return invokeProbability;\n    }\n}<fim_middle>// class below has no smell\n"}