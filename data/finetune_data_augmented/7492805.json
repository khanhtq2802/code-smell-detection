{"text": "<fim_prefix>/*\n * Copyright (c) 2019, 2019, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.svm.hosted.c;\n\nimport org.graalvm.nativeimage.c.constant.CConstant;\nimport org.graalvm.nativeimage.impl.CConstantValueSupport;\n\nimport com.oracle.svm.core.util.VMError;\nimport com.oracle.svm.hosted.c.info.ConstantInfo;\n\nimport jdk.vm.ci.meta.MetaAccessProvider;\nimport jdk.vm.ci.meta.ResolvedJavaMethod;\n\n<fim_suffix>public final class CConstantValueSupportImpl implements CConstantValueSupport {\n    private final NativeLibraries nativeLibraries;\n    private final MetaAccessProvider metaAccess;\n\n    public CConstantValueSupportImpl(NativeLibraries nativeLibraries, MetaAccessProvider metaAccess) {\n        this.nativeLibraries = nativeLibraries;\n        this.metaAccess = metaAccess;\n    }\n\n    @Override\n    public <T> T getCConstantValue(Class<?> declaringClass, String methodName, Class<T> returnType) {\n        ResolvedJavaMethod method;\n        try {\n            method = metaAccess.lookupJavaMethod(declaringClass.getMethod(methodName));\n        } catch (NoSuchMethodException | SecurityException e) {\n            throw VMError.shouldNotReachHere(\"Method not found: \" + declaringClass.getName() + \".\" + methodName);\n        }\n        if (method.getAnnotation(CConstant.class) == null) {\n            throw VMError.shouldNotReachHere(\"Method \" + declaringClass.getName() + \".\" + methodName + \" is not annotated with @\" + CConstant.class.getSimpleName());\n        }\n\n        ConstantInfo constantInfo = (ConstantInfo) nativeLibraries.findElementInfo(method);\n        Object value = constantInfo.getValueInfo().getProperty();\n        switch (constantInfo.getKind()) {\n            case INTEGER:\n            case POINTER:\n                Long longValue = (Long) value;\n                if (returnType == Boolean.class) {\n                    return returnType.cast(Boolean.valueOf(longValue.longValue() != 0));\n                } else if (returnType == Integer.class) {\n                    return returnType.cast(Integer.valueOf((int) longValue.longValue()));\n                } else if (returnType == Long.class) {\n                    return returnType.cast(value);\n                }\n                break;\n\n            case FLOAT:\n                if (returnType == Double.class) {\n                    return returnType.cast(value);\n                }\n                break;\n\n            case STRING:\n                if (returnType == String.class) {\n                    return returnType.cast(value);\n                }\n                break;\n\n            case BYTEARRAY:\n                if (returnType == byte[].class) {\n                    return returnType.cast(value);\n                }\n                break;\n        }\n\n        throw VMError.shouldNotReachHere(\"Unexpected returnType: \" + returnType.getName());\n    }\n}<fim_middle>// class below has no smell\n"}