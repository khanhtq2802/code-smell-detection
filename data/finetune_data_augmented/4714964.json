{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.atlas.web.dao;\n\nimport com.google.common.annotations.VisibleForTesting;\n\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Properties;\nimport java.util.List;\nimport javax.annotation.PostConstruct;\nimport org.apache.atlas.web.security.AtlasAuthenticationException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Repository;\nimport org.apache.atlas.ApplicationProperties;\nimport org.apache.atlas.AtlasException;\nimport org.apache.atlas.web.model.User;\nimport org.apache.commons.configuration.Configuration;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport java.security.MessageDigest;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.util.StringUtils;\n\n\n<fim_suffix>@Repository\npublic class UserDao {\n\n    private static final String DEFAULT_USER_CREDENTIALS_PROPERTIES = \"users-credentials.properties\";\n\n    private static final Logger LOG = LoggerFactory.getLogger(UserDao.class);\n\n    private Properties userLogins;\n\n    @PostConstruct\n    public void init() {\n        loadFileLoginsDetails();\n    }\n\n    void loadFileLoginsDetails() {\n        InputStream inStr = null;\n        try {\n            Configuration configuration = ApplicationProperties.get();\n            inStr = ApplicationProperties.getFileAsInputStream(configuration, \"atlas.authentication.method.file.filename\", DEFAULT_USER_CREDENTIALS_PROPERTIES);\n            userLogins = new Properties();\n            userLogins.load(inStr);\n        } catch (IOException | AtlasException e) {\n            LOG.error(\"Error while reading user.properties file\", e);\n            throw new RuntimeException(e);\n        } finally {\n            if(inStr != null) {\n                try {\n                    inStr.close();\n                } catch(Exception excp) {\n                    // ignore\n                }\n            }\n        }\n    }\n\n    public User loadUserByUsername(final String username)\n            throws AuthenticationException {\n        String userdetailsStr = userLogins.getProperty(username);\n        if (userdetailsStr == null || userdetailsStr.isEmpty()) {\n            throw new UsernameNotFoundException(\"Username not found.\"\n                    + username);\n        }\n        String password = \"\";\n        String role = \"\";\n        String dataArr[] = userdetailsStr.split(\"::\");\n        if (dataArr != null && dataArr.length == 2) {\n            role = dataArr[0];\n            password = dataArr[1];\n        } else {\n            LOG.error(\"User role credentials is not set properly for {}\", username);\n            throw new AtlasAuthenticationException(\"User role credentials is not set properly for \" + username );\n        }\n\n        List<GrantedAuthority> grantedAuths = new ArrayList<>();\n        if (StringUtils.hasText(role)) {\n            grantedAuths.add(new SimpleGrantedAuthority(role));\n        } else {\n            LOG.error(\"User role credentials is not set properly for {}\", username);\n            throw new AtlasAuthenticationException(\"User role credentials is not set properly for \" + username );\n        }\n\n        User userDetails = new User(username, password, grantedAuths);\n\n        return userDetails;\n    }\n    \n\n    @VisibleForTesting\n    public void setUserLogins(Properties userLogins) {\n        this.userLogins = userLogins;\n    }\n\n\n    public static String getSha256Hash(String base) throws AtlasAuthenticationException {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = digest.digest(base.getBytes(\"UTF-8\"));\n            StringBuffer hexString = new StringBuffer();\n\n            for (byte aHash : hash) {\n                String hex = Integer.toHexString(0xff & aHash);\n                if (hex.length() == 1) hexString.append('0');\n                hexString.append(hex);\n            }\n            return hexString.toString();\n\n        } catch (Exception ex) {\n            throw new AtlasAuthenticationException(\"Exception while encoding password.\", ex);\n        }\n    }\n\n}<fim_middle>// class below is blob\n"}