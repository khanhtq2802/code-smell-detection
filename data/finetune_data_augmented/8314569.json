{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2000, 2008 IBM Corporation and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Originally copied from org.eclipse.jdt.internal.corext.refactoring.tagging.ISimilarDeclarationUpdating\n *\n * Contributors:\n *     IBM Corporation - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.jdt.ls.core.internal.corext.refactoring.tagging;\n\n/**\n * Interface implemented by processors able to rename similar declarations.\n *\n * @since 3.2\n */\n<fim_suffix>public interface ISimilarDeclarationUpdating {\n\n\t/**\n\t * Checks if this refactoring object is capable of updating similar declarations\n\t * of the renamed element.\n\t *\n\t * This can be disabled globally by setting the product configuration property\n\t * \"org.eclipse.jdt.ui.refactoring.handlesSimilarDeclarations\" to \"false\".\n\t */\n\tpublic boolean canEnableSimilarDeclarationUpdating();\n\n\t/**\n\t * If <code>canEnableSimilarElementUpdating</code> returns\n\t * <code>true</code>, then this method is used to inform the refactoring\n\t * object whether similar declarations should be updated. This call can be\n\t * ignored if <code>canEnableSimilarElementUpdating</code> returns\n\t * <code>false</code>.\n\t */\n\tpublic void setUpdateSimilarDeclarations(boolean update);\n\n\t/**\n\t * If <code>canEnableSimilarElementUpdating</code> returns\n\t * <code>true</code>, then this method is used to ask the refactoring\n\t * object whether similar declarations should be updated. This call can be\n\t * ignored if <code>canEnableSimilarElementUpdating</code> returns\n\t * <code>false</code>.\n\t */\n\tpublic boolean getUpdateSimilarDeclarations();\n\n\t/**\n\t * If <code>canEnableSimilarElementUpdating</code> returns\n\t * <code>true</code>, then this method is used to set the match strategy\n\t * for determining similarly named elements.\n\t *\n\t * @param selectedStrategy one of the STRATEGY_* constants in {@link org.eclipse.jdt.internal.corext.refactoring.rename.RenamingNameSuggestor}\n\t */\n\tpublic void setMatchStrategy(int selectedStrategy);\n\n\t/**\n\t * If <code>canEnableSimilarElementUpdating</code> returns\n\t * <code>true</code>, then this method is used to ask the refactoring\n\t * object which match strategy is used for determining similar elements.\n\t *\n\t * @return one of the STRATEGY_* constants in {@link org.eclipse.jdt.internal.corext.refactoring.rename.RenamingNameSuggestor}\n\t */\n\tpublic int getMatchStrategy();\n\n}<fim_middle>// class below has no smell\n"}