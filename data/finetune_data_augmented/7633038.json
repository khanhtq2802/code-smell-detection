{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2004, 2007 Spring IDE Developers\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Spring IDE Developers - initial API and implementation\n *******************************************************************************/\npackage org.springframework.ide.eclipse.beans.ui.model.properties;\n\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\nimport org.eclipse.core.resources.IFile;\nimport org.eclipse.ui.views.properties.FilePropertySource;\nimport org.eclipse.ui.views.properties.IPropertyDescriptor;\nimport org.eclipse.ui.views.properties.IPropertySource;\nimport org.eclipse.ui.views.properties.PropertyDescriptor;\nimport org.springframework.ide.eclipse.beans.core.internal.model.BeansModelUtils;\nimport org.springframework.ide.eclipse.beans.core.model.IBean;\nimport org.springframework.ide.eclipse.beans.core.model.IBeansConfig;\nimport org.springframework.ide.eclipse.beans.ui.BeansUIPlugin;\n\n/**\n * @author Torsten Juergeleit\n * @author Christian Dupuis\n */\npublic class ChildBeanProperties implements IPropertySource {\n\n\t// Property unique keys\n\tpublic static final String P_CATEGORY = \"ChildBean\";\n\tpublic static final String P_ID_NAME = \"ChildBean.name\";\n\tpublic static final String P_ID_CONFIG = \"ChildBean.config\";\n\tpublic static final String P_ID_PARENT = \"ChildBean.parent\";\n\tpublic static final String P_ID_SINGLETON = \"ChildBean.singleton\";\n\tpublic static final String P_ID_LAZY_INIT = \"ChildBean.lazyinit\";\n\tpublic static final String P_ID_ABSTRACT = \"ChildBean.abstract\";\n\n\t// Property descriptors\n\tprivate static Set<PropertyDescriptor> descriptors;\n\tstatic {\n\t\tdescriptors = new LinkedHashSet<PropertyDescriptor>();\n\t\tPropertyDescriptor descriptor;\n\n\t\tdescriptor = new PropertyDescriptor(P_ID_NAME, BeansUIPlugin\n\t\t\t\t.getResourceString(P_ID_NAME));\n\t\tdescriptor.setAlwaysIncompatible(true);\n\t\tdescriptor.setCategory(BeansUIPlugin.getResourceString(P_CATEGORY));\n\t\tdescriptors.add(descriptor);\n\n\t\tdescriptor = new PropertyDescriptor(P_ID_CONFIG, BeansUIPlugin\n\t\t\t\t.getResourceString(P_ID_CONFIG));\n\t\tdescriptor.setAlwaysIncompatible(true);\n\t\tdescriptor.setCategory(BeansUIPlugin.getResourceString(P_CATEGORY));\n\t\tdescriptors.add(descriptor);\n\n\t\tdescriptor = new PropertyDescriptor(P_ID_PARENT, BeansUIPlugin\n\t\t\t\t.getResourceString(P_ID_PARENT));\n\t\tdescriptor.setAlwaysIncompatible(true);\n\t\tdescriptor.setCategory(BeansUIPlugin.getResourceString(P_CATEGORY));\n\t\tdescriptors.add(descriptor);\n\n\t\tdescriptor = new PropertyDescriptor(P_ID_SINGLETON, BeansUIPlugin\n\t\t\t\t.getResourceString(P_ID_SINGLETON));\n\t\tdescriptor.setAlwaysIncompatible(true);\n\t\tdescriptor.setCategory(BeansUIPlugin.getResourceString(P_CATEGORY));\n\t\tdescriptors.add(descriptor);\n\n\t\tdescriptor = new PropertyDescriptor(P_ID_LAZY_INIT, BeansUIPlugin\n\t\t\t\t.getResourceString(P_ID_LAZY_INIT));\n\t\tdescriptor.setAlwaysIncompatible(true);\n\t\tdescriptor.setCategory(BeansUIPlugin.getResourceString(P_CATEGORY));\n\t\tdescriptors.add(descriptor);\n\n\t\tdescriptor = new PropertyDescriptor(P_ID_ABSTRACT, BeansUIPlugin\n\t\t\t\t.getResourceString(P_ID_ABSTRACT));\n\t\tdescriptor.setAlwaysIncompatible(true);\n\t\tdescriptor.setCategory(BeansUIPlugin.getResourceString(P_CATEGORY));\n\t\tdescriptors.add(descriptor);\n\t}\n\n\tprivate IBean bean;\n\n\tpublic ChildBeanProperties(IBean bean) {\n\t\tthis.bean = bean;\n\t}\n\n\tpublic IPropertyDescriptor[] getPropertyDescriptors() {\n\t\treturn descriptors\n\t\t\t\t.toArray(new IPropertyDescriptor[descriptors.size()]);\n\t}\n\n\tpublic Object getPropertyValue(Object id) {\n\t\tif (P_ID_NAME.equals(id)) {\n\t\t\treturn bean.getElementName();\n\t\t}\n\t\tif (P_ID_CONFIG.equals(id)) {\n\t\t\tIBeansConfig config = BeansModelUtils.getConfig(bean);\n\t\t\tIFile file = (IFile) config.getElementResource();\n\t\t\tif (file != null) {\n\t\t\t\treturn new ConfigFilePropertySource(file);\n\t\t\t}\n\t\t\treturn config.getElementName();\n\t\t}\n\t\tif (P_ID_PARENT.equals(id)) {\n\t\t\tString parentName = bean.getParentName();\n\t\t\tIBean parentBean = BeansModelUtils.getConfig(bean).getBean(\n\t\t\t\t\tparentName);\n\t\t\tif (parentBean != null) {\n\t\t\t\tif (parentBean.isRootBean()) {\n\t\t\t\t\treturn new RootBeanProperties(parentBean);\n\t\t\t\t} else if (parentBean.isChildBean()) {\n\t\t\t\t\treturn new ChildBeanProperties(parentBean);\n\t\t\t\t} else {\n\t\t\t\t\t// FIXME add factory bean support\n\t\t\t\t\t// return new FactoryBeanProperties(parentBean);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn parentName;\n\t\t}\n\t\tif (P_ID_SINGLETON.equals(id)) {\n\t\t\treturn new Boolean(bean.isSingleton());\n\t\t}\n\t\tif (P_ID_LAZY_INIT.equals(id)) {\n\t\t\treturn new Boolean(bean.isLazyInit());\n\t\t}\n\t\tif (P_ID_ABSTRACT.equals(id)) {\n\t\t\treturn new Boolean(bean.isAbstract());\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic Object getEditableValue() {\n\t\treturn this;\n\t}\n\n\tpublic boolean isPropertySet(Object id) {\n\t\treturn false;\n\t}\n\n\tpublic void resetPropertyValue(Object id) {\n\t}\n\n\tpublic void setPropertyValue(Object id, Object value) {\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn bean.getElementName();\n\t}\n\n<fim_suffix>\tprivate class ConfigFilePropertySource extends FilePropertySource {\n\t\tprivate IFile file;\n\n\t\tpublic ConfigFilePropertySource(IFile file) {\n\t\t\tsuper(file);\n\t\t\tthis.file = file;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn file.getFullPath().toString();\n\t\t}\n\t}\n}<fim_middle>// class below has no smell\n"}