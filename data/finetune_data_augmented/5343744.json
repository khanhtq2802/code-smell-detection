{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.nifi.processors.cybersecurity;\n\n\nimport com.idealista.tlsh.TLSH;\nimport info.debatty.java.spamsum.SpamSum;\nimport org.apache.nifi.components.AllowableValue;\nimport org.apache.nifi.components.PropertyDescriptor;\nimport org.apache.nifi.flowfile.FlowFile;\nimport org.apache.nifi.processor.AbstractProcessor;\nimport org.apache.nifi.processor.Relationship;\nimport org.apache.nifi.processor.util.StandardValidators;\n\nimport java.util.List;\nimport java.util.Set;\n\n<fim_suffix>abstract class AbstractFuzzyHashProcessor extends AbstractProcessor {\n    final protected static String ssdeep = \"ssdeep\";\n    final protected static String tlsh = \"tlsh\";\n\n    public static final AllowableValue allowableValueSSDEEP = new AllowableValue(\n            ssdeep,\n            ssdeep,\n            \"Uses ssdeep / SpamSum 'context triggered piecewise hash'.\");\n    public static final AllowableValue allowableValueTLSH = new AllowableValue(\n            tlsh,\n            tlsh,\n            \"Uses TLSH (Trend 'Locality Sensitive Hash'). Note: FlowFile Content must be at least 512 characters long\");\n\n    public static final PropertyDescriptor ATTRIBUTE_NAME = new PropertyDescriptor.Builder()\n            .name(\"ATTRIBUTE_NAME\")\n            .displayName(\"Hash Attribute Name\")\n            .description(\"The name of the FlowFile Attribute that should hold the Fuzzy Hash Value\")\n            .required(true)\n            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)\n            .defaultValue(\"fuzzyhash.value\")\n            .build();\n\n    public static final PropertyDescriptor HASH_ALGORITHM = new PropertyDescriptor.Builder()\n            .name(\"HASH_ALGORITHM\")\n            .displayName(\"Hashing Algorithm\")\n            .description(\"The hashing algorithm utilised\")\n            .allowableValues(allowableValueSSDEEP, allowableValueTLSH)\n            .required(true)\n            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)\n            .build();\n\n\n    protected List<PropertyDescriptor> descriptors;\n\n    protected Set<Relationship> relationships;\n\n    protected boolean checkMinimumAlgorithmRequirements(String algorithm, FlowFile flowFile) {\n        // Check if content matches minimum length requirement\n        if (algorithm.equals(tlsh) && flowFile.getSize() < 512 ) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n\n    protected String generateHash(String algorithm, String content) {\n        switch (algorithm) {\n            case tlsh:\n                return new TLSH(content).hash();\n            case ssdeep:\n                return new SpamSum().HashString(content);\n            default:\n                return null;\n        }\n    }\n}<fim_middle>// class below has no smell\n"}