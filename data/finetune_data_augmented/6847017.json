{"text": "<fim_prefix>/*\nCopyright 2011-2016 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.google.security.zynamics.reil.translators.arm;\n\nimport com.google.security.zynamics.reil.OperandSize;\nimport com.google.security.zynamics.reil.ReilHelpers;\nimport com.google.security.zynamics.reil.ReilInstruction;\nimport com.google.security.zynamics.reil.translators.ITranslationEnvironment;\nimport com.google.security.zynamics.reil.translators.InternalTranslationException;\nimport com.google.security.zynamics.reil.translators.TranslationHelpers;\nimport com.google.security.zynamics.zylib.disassembly.IInstruction;\nimport com.google.security.zynamics.zylib.disassembly.IOperandTreeNode;\n\nimport java.util.List;\n\n\npublic class ARMSmlsdTranslator extends ARMBaseTranslator {\n<fim_suffix>  @Override\n  protected void translateCore(final ITranslationEnvironment environment,\n      final IInstruction instruction, final List<ReilInstruction> instructions) {\n    final IOperandTreeNode registerOperand1 =\n        instruction.getOperands().get(0).getRootNode().getChildren().get(0);\n    final IOperandTreeNode registerOperand2 =\n        instruction.getOperands().get(1).getRootNode().getChildren().get(0);\n    final IOperandTreeNode registerOperand3 =\n        instruction.getOperands().get(2).getRootNode().getChildren().get(0);\n    final IOperandTreeNode registerOperand4 =\n        instruction.getOperands().get(3).getRootNode().getChildren().get(0);\n\n    final String targetRegister = (registerOperand1.getValue());\n    final String sourceRegister1 = (registerOperand2.getValue());\n    final String sourceRegister2 = (registerOperand3.getValue());\n    final String sourceRegister3 = (registerOperand4.getValue());\n\n    final OperandSize bt = OperandSize.BYTE;\n    final OperandSize dw = OperandSize.DWORD;\n    final OperandSize wd = OperandSize.WORD;\n\n    long baseOffset = ReilHelpers.nextReilAddress(instruction, instructions);\n\n    final String operand2 = environment.getNextVariableString();\n    final String tmpRotate1 = environment.getNextVariableString();\n    final String tmpRotate2 = environment.getNextVariableString();\n    final String diffOfProducts = environment.getNextVariableString();\n    final String operand2from15to0 = environment.getNextVariableString();\n    final String operand2from31to16 = environment.getNextVariableString();\n    final String registerRmfrom15to0 = environment.getNextVariableString();\n    final String registerRmfrom31to16 = environment.getNextVariableString();\n    final String tmpVar1 = environment.getNextVariableString();\n    final String tmpVar2 = environment.getNextVariableString();\n    final String tmpVar3 = environment.getNextVariableString();\n    final String trueDiffOfProducts = environment.getNextVariableString();\n    final String product1 = environment.getNextVariableString();\n    final String product2 = environment.getNextVariableString();\n\n    if (instruction.getMnemonic().contains(\"X\")) {\n      instructions.add(ReilHelpers.createBsh(baseOffset++, dw, sourceRegister2, bt,\n          String.valueOf(-16), dw, tmpRotate1));\n      instructions.add(ReilHelpers.createBsh(baseOffset++, dw, sourceRegister2, bt,\n          String.valueOf(16), dw, tmpRotate2));\n      instructions.add(ReilHelpers.createOr(baseOffset++, dw, tmpRotate1, dw, tmpRotate2, dw,\n          operand2));\n      instructions.add(ReilHelpers.createAnd(baseOffset++, dw, operand2, dw,\n          String.valueOf(0xFFFFFFFFL), dw, operand2));\n    } else {\n      instructions.add(ReilHelpers.createStr(baseOffset++, dw, sourceRegister2, dw, operand2));\n    }\n\n    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, operand2, dw, String.valueOf(0xFFFFL),\n        dw, operand2from15to0));\n    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, sourceRegister1, dw,\n        String.valueOf(0xFFFFL), dw, registerRmfrom15to0));\n\n    Helpers.signedMul(baseOffset, environment, instruction, instructions, wd, operand2from15to0,\n        wd, registerRmfrom15to0, dw, product1);\n    baseOffset = ReilHelpers.nextReilAddress(instruction, instructions);\n\n    instructions.add(ReilHelpers.createBsh(baseOffset++, dw, operand2, dw, String.valueOf(-16L),\n        dw, tmpVar1));\n    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, tmpVar1, dw, String.valueOf(0xFFFFL),\n        dw, operand2from31to16));\n    instructions.add(ReilHelpers.createBsh(baseOffset++, dw, sourceRegister1, dw,\n        String.valueOf(-16L), dw, tmpVar2));\n    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, tmpVar2, dw, String.valueOf(0xFFFFL),\n        dw, registerRmfrom31to16));\n    Helpers.signedMul(baseOffset, environment, instruction, instructions, wd, operand2from31to16,\n        wd, registerRmfrom31to16, dw, product2);\n    baseOffset = ReilHelpers.nextReilAddress(instruction, instructions);\n\n    Helpers.signedSub(baseOffset, environment, instruction, instructions, product2, product1,\n        diffOfProducts, trueDiffOfProducts);\n    baseOffset = ReilHelpers.nextReilAddress(instruction, instructions);\n\n    instructions.add(ReilHelpers.createAdd(baseOffset++, dw, sourceRegister3, dw, diffOfProducts,\n        dw, tmpVar3));\n    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, tmpVar3, dw,\n        String.valueOf(0xFFFFFFFFL), dw, targetRegister));\n\n    Helpers.overflowCondition(baseOffset, environment, instruction, instructions, tmpVar3);\n  }\n\n  /**\n   * SMLSD{X}{<cond>} <Rd>, <Rm>, <Rs>, <Rn>\n   * \n   * Operation:\n   * \n   * if ConditionPassed(cond) then if X == 1 then operand2 = Rs Rotate_Right 16 else operand2 = Rs\n   * product1 = Rm[15:0] * operand2[15:0] // Signed multiplication product2 = Rm[31:16] *\n   * operand2[31:16] // Signed multiplication diffofproducts = product1 - product2 // Signed\n   * subtraction Rd = Rn + diffofproducts if OverflowFrom(Rn + diffofproducts) then Q flag = 1\n   */\n\n  @Override\n  public void translate(final ITranslationEnvironment environment, final IInstruction instruction,\n      final List<ReilInstruction> instructions) throws InternalTranslationException {\n    TranslationHelpers.checkTranslationArguments(environment, instruction, instructions, \"SMLSD\");\n    translateAll(environment, instruction, \"SMLSD\", instructions);\n  }\n}<fim_middle>// function below is long method\n"}