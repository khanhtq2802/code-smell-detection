{"text": "<fim_prefix>        if (redirectUris.size() == 0 && !hasText(redirectUri)) {\n            logger.debug(\"[prompt=none] Missing redirect_uri\");\n            response.setStatus(HttpStatus.BAD_REQUEST.value());\n            return;\n        }\n        String resolvedRedirect;\n        try {\n            resolvedRedirect = redirectResolver.resolveRedirect(redirectUri, client);\n        } catch (RedirectMismatchException rme) {\n            logger.debug(\"[prompt=none] Invalid redirect \" + redirectUri + \" did not match one of the registered values\");\n            response.setStatus(HttpStatus.BAD_REQUEST.value());\n            return;\n        }\n        HttpHost httpHost = URIUtils.extractHost(URI.create(resolvedRedirect));\n        String sessionState = openIdSessionStateCalculator.calculate(\"\", clientId, httpHost.toURI());\n        boolean implicit = stream(responseTypes).noneMatch(\"code\"::equalsIgnoreCase);\n        String redirectLocation;\n        String errorCode = authException instanceof InteractionRequiredException ? \"interaction_required\" : \"login_required\";\n        if (implicit) {\n            redirectLocation = addFragmentComponent(resolvedRedirect, \"error=\"+ errorCode);\n            redirectLocation = addFragmentComponent(redirectLocation, \"session_state=\" + sessionState);\n        } else {\n            redirectLocation = addQueryParameter(resolvedRedirect, \"error\", errorCode);\n            redirectLocation = addQueryParameter(redirectLocation, \"session_state\", sessionState);\n        }\n        response.sendRedirect(redirectLocation);\n    }\n    private ModelAndView switchIdp(Map<String, Object> model, ClientDetails client, String clientId, HttpServletRequest request) {\n        Map<String, Object> additionalInfo = client.getAdditionalInformation();\n        String clientDisplayName = (String) additionalInfo.get(ClientConstants.CLIENT_NAME);\n        model.put(\"client_display_name\", (clientDisplayName != null) ? clientDisplayName : clientId);\n        String queryString = UaaHttpRequestUtils.paramsToQueryString(request.getParameterMap());\n        String redirectUri = request.getRequestURL() + \"?\" + queryString;\n        model.put(\"redirect\", redirectUri);\n        model.put(\"error\", \"The application is not authorized for your account.\");\n        model.put(\"error_message_code\", \"login.invalid_idp\");\n        return new ModelAndView(\"switch_idp\", model, HttpStatus.UNAUTHORIZED);\n    }\n    Map<String, Object> unmodifiableMap(AuthorizationRequest authorizationRequest) {\n        Map<String, Object> authorizationRequestMap = new HashMap<>();\n        authorizationRequestMap.put(OAuth2Utils.CLIENT_ID, authorizationRequest.getClientId());\n        authorizationRequestMap.put(OAuth2Utils.STATE, authorizationRequest.getState());\n        authorizationRequestMap.put(OAuth2Utils.REDIRECT_URI, authorizationRequest.getRedirectUri());\n        if (authorizationRequest.getResponseTypes() != null) {\n            authorizationRequestMap.put(OAuth2Utils.RESPONSE_TYPE,\n                    Collections.unmodifiableSet(new HashSet<>(authorizationRequest.getResponseTypes())));\n        }\n        if (authorizationRequest.getScope() != null) {\n            authorizationRequestMap.put(OAuth2Utils.SCOPE,\n                    Collections.unmodifiableSet(new HashSet<>(authorizationRequest.getScope())));\n        }\n        authorizationRequestMap.put(\"approved\", authorizationRequest.isApproved());\n        if (authorizationRequest.getResourceIds() != null) {\n            authorizationRequestMap.put(\"resourceIds\",\n                    Collections.unmodifiableSet(new HashSet<>(authorizationRequest.getResourceIds())));\n        }\n        if (authorizationRequest.getAuthorities() != null) {\n            authorizationRequestMap.put(\"authorities\",\n                    Collections.unmodifiableSet(new HashSet<GrantedAuthority>(authorizationRequest.getAuthorities())));\n        }\n        return authorizationRequestMap;\n    }\n    @RequestMapping(value = \"/oauth/authorize\", method = RequestMethod.POST, params = OAuth2Utils.USER_OAUTH_APPROVAL)\n    public View approveOrDeny(@RequestParam Map<String, String> approvalParameters, Map<String, ?> model,\n                              SessionStatus sessionStatus, Principal principal) {\n        if (!(principal instanceof Authentication)) {\n            sessionStatus.setComplete();\n            throw new InsufficientAuthenticationException(\n              \"User must be authenticated with Spring Security before authorizing an access token.\");\n        }\n        AuthorizationRequest authorizationRequest = (AuthorizationRequest) model.get(AUTHORIZATION_REQUEST);\n        if (authorizationRequest == null) {\n            sessionStatus.setComplete();\n            throw new InvalidRequestException(\"Cannot approve uninitialized authorization request.\");\n        }\n        // Check to ensure the Authorization Request was not modified during the user approval step\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> originalAuthorizationRequest = (Map<String, Object>) model.get(ORIGINAL_AUTHORIZATION_REQUEST);\n        if (isAuthorizationRequestModified(authorizationRequest, originalAuthorizationRequest)) {\n            logger.warn(\"The requested scopes are invalid\");\n            throw new InvalidRequestException(\"Changes were detected from the original authorization request.\");\n        }\n        for (String approvalParameter : approvalParameters.keySet()) {\n            if (approvalParameter.startsWith(SCOPE_PREFIX)) {\n                String scope = approvalParameters.get(approvalParameter).substring(SCOPE_PREFIX.length());\n                Set<String> originalScopes = (Set<String>) originalAuthorizationRequest.get(\"scope\");\n                if (!originalScopes.contains(scope)) {\n                    sessionStatus.setComplete();\n                    logger.warn(\"The requested scopes are invalid\");\n                    return new RedirectView(getUnsuccessfulRedirect(authorizationRequest,\n                            new InvalidScopeException(\"The requested scopes are invalid. Please use valid scope names in the request.\"), false), false, true, false);\n                }\n            }\n        }\n        try {\n            Set<String> responseTypes = authorizationRequest.getResponseTypes();\n            String grantType = deriveGrantTypeFromResponseType(responseTypes);\n            authorizationRequest.setApprovalParameters(approvalParameters);\n            authorizationRequest = userApprovalHandler.updateAfterApproval(authorizationRequest,\n              (Authentication) principal);\n            boolean approved = userApprovalHandler.isApproved(authorizationRequest, (Authentication) principal);\n            authorizationRequest.setApproved(approved);\n            if (authorizationRequest.getRedirectUri() == null) {\n                sessionStatus.setComplete();\n                throw new InvalidRequestException(\"Cannot approve request when no redirect URI is provided.\");\n            }\n            if (!authorizationRequest.isApproved()) {\n                return new RedirectView(getUnsuccessfulRedirect(authorizationRequest,\n                  new UserDeniedAuthorizationException(\"User denied access\"), responseTypes.contains(\"token\")),\n                  false, true, false);\n            }\n            if (responseTypes.contains(\"token\") || responseTypes.contains(\"id_token\")) {\n                return getImplicitGrantOrHybridResponse(\n                  authorizationRequest,\n                  (Authentication) principal,\n                  grantType\n                ).getView();\n            }\n            return getAuthorizationCodeResponse(authorizationRequest, (Authentication) principal);\n        } finally {\n            sessionStatus.setComplete();\n        }\n    }\n    private boolean isAuthorizationRequestModified(AuthorizationRequest authorizationRequest, Map<String, Object> originalAuthorizationRequest) {\n        if (!ObjectUtils.nullSafeEquals(\n                authorizationRequest.getClientId(),\n                originalAuthorizationRequest.get(OAuth2Utils.CLIENT_ID))) {\n            return true;\n        }\n        if (!ObjectUtils.nullSafeEquals(\n                authorizationRequest.getState(),\n                originalAuthorizationRequest.get(OAuth2Utils.STATE))) {\n            return true;\n        }\n        if (!ObjectUtils.nullSafeEquals(\n                authorizationRequest.getRedirectUri(),\n                originalAuthorizationRequest.get(OAuth2Utils.REDIRECT_URI))) {\n            return true;\n        }\n        if (!ObjectUtils.nullSafeEquals(\n                authorizationRequest.getResponseTypes(),\n                originalAuthorizationRequest.get(OAuth2Utils.RESPONSE_TYPE))) {\n            return true;\n        }\n        if (!ObjectUtils.nullSafeEquals(\n                authorizationRequest.isApproved(),\n                originalAuthorizationRequest.get(\"approved\"))) {\n            return true;\n        }\n        if (!ObjectUtils.nullSafeEquals(\n                authorizationRequest.getResourceIds(),\n                originalAuthorizationRequest.get(\"resourceIds\"))) {\n            return true;\n        }\n        if (!ObjectUtils.nullSafeEquals(\n                authorizationRequest.getAuthorities(),\n                originalAuthorizationRequest.get(\"authorities\"))) {\n            return true;\n        }\n        return !ObjectUtils.nullSafeEquals(\n                authorizationRequest.getScope(),\n                originalAuthorizationRequest.get(OAuth2Utils.SCOPE));\n    }\n    protected String deriveGrantTypeFromResponseType(Set<String> responseTypes) {\n        if (responseTypes.contains(\"token\")) {\n            return GRANT_TYPE_IMPLICIT;\n        } else if (responseTypes.size() == 1 && responseTypes.contains(\"id_token\")) {\n            return GRANT_TYPE_IMPLICIT;\n        }\n        return GRANT_TYPE_AUTHORIZATION_CODE;\n    }\n    // We need explicit approval from the user.\n<fim_suffix>    private ModelAndView getUserApprovalPageResponse(Map<String, Object> model,\n                                                     AuthorizationRequest authorizationRequest, Authentication principal) {\n        logger.debug(\"Loading user approval page: \" + userApprovalPage);\n        model.putAll(userApprovalHandler.getUserApprovalRequest(authorizationRequest, principal));\n        return new ModelAndView(userApprovalPage, model);\n    }<fim_middle>// function below has no smell\n"}