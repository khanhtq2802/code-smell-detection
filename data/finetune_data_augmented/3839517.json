{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.accumulo.server.util;\nimport static java.util.Objects.requireNonNull;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.text.MessageFormat;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.SortedSet;\nimport java.util.TreeMap;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.apache.accumulo.core.Constants;\nimport org.apache.accumulo.core.client.AccumuloClient;\nimport org.apache.accumulo.core.client.AccumuloException;\nimport org.apache.accumulo.core.client.AccumuloSecurityException;\nimport org.apache.accumulo.core.client.NamespaceNotFoundException;\nimport org.apache.accumulo.core.client.TableNotFoundException;\nimport org.apache.accumulo.core.client.admin.InstanceOperations;\nimport org.apache.accumulo.core.clientImpl.ClientContext;\nimport org.apache.accumulo.core.clientImpl.MasterClient;\nimport org.apache.accumulo.core.conf.AccumuloConfiguration;\nimport org.apache.accumulo.core.conf.DefaultConfiguration;\nimport org.apache.accumulo.core.conf.Property;\nimport org.apache.accumulo.core.metadata.MetadataTable;\nimport org.apache.accumulo.core.security.Authorizations;\nimport org.apache.accumulo.core.security.NamespacePermission;\nimport org.apache.accumulo.core.security.SystemPermission;\nimport org.apache.accumulo.core.security.TablePermission;\nimport org.apache.accumulo.core.trace.TraceUtil;\nimport org.apache.accumulo.core.util.AddressUtil;\nimport org.apache.accumulo.core.util.HostAndPort;\nimport org.apache.accumulo.fate.zookeeper.ZooCache;\nimport org.apache.accumulo.fate.zookeeper.ZooLock;\nimport org.apache.accumulo.server.ServerContext;\nimport org.apache.accumulo.server.cli.ServerUtilOpts;\nimport org.apache.accumulo.server.security.SecurityUtil;\nimport org.apache.accumulo.start.spi.KeywordExecutable;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.beust.jcommander.JCommander;\nimport com.beust.jcommander.Parameter;\nimport com.beust.jcommander.Parameters;\nimport com.google.auto.service.AutoService;\nimport com.google.common.collect.Lists;\nimport edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n@AutoService(KeywordExecutable.class)\npublic class Admin implements KeywordExecutable {\n  private static final Logger log = LoggerFactory.getLogger(Admin.class);\n  static class AdminOpts extends ServerUtilOpts {\n    @Parameter(names = {\"-f\", \"--force\"},\n        description = \"force the given server to stop by removing its lock\")\n    boolean force = false;\n  }\n  @Parameters(commandDescription = \"stop the tablet server on the given hosts\")\n  static class StopCommand {\n    @Parameter(description = \"<host> {<host> ... }\")\n    List<String> args = new ArrayList<>();\n  }\n  @Parameters(commandDescription = \"Ping tablet servers.  If no arguments, pings all.\")\n  static class PingCommand {\n    @Parameter(description = \"{<host> ... }\")\n    List<String> args = new ArrayList<>();\n  }\n  @Parameters(commandDescription = \"print tablets that are offline in online tables\")\n  static class CheckTabletsCommand {\n    @Parameter(names = \"--fixFiles\", description = \"Remove dangling file pointers\")\n    boolean fixFiles = false;\n    @Parameter(names = {\"-t\", \"--table\"},\n        description = \"Table to check, if not set checks all tables\")\n    String tableName = null;\n  }\n  @Parameters(commandDescription = \"stop the master\")\n  static class StopMasterCommand {}\n  @Parameters(commandDescription = \"stop all the servers\")\n  static class StopAllCommand {}\n  @Parameters(commandDescription = \"list Accumulo instances in zookeeper\")\n  static class ListInstancesCommand {\n    @Parameter(names = \"--print-errors\", description = \"display errors while listing instances\")\n    boolean printErrors = false;\n    @Parameter(names = \"--print-all\",\n        description = \"print information for all instances, not just those with names\")\n    boolean printAll = false;\n  }\n  @Parameters(commandDescription = \"Accumulo volume utility\")\n  static class VolumesCommand {\n    @Parameter(names = {\"-l\", \"--list\"}, description = \"list volumes currently in use\")\n    boolean printErrors = false;\n  }\n<fim_suffix>  @Parameters(commandDescription = \"print out non-default configuration settings\")\n  static class DumpConfigCommand {\n    @Parameter(names = {\"-a\", \"--all\"},\n        description = \"print the system and all table configurations\")\n    boolean allConfiguration = false;\n    @Parameter(names = {\"-d\", \"--directory\"}, description = \"directory to place config files\")\n    String directory = null;\n    @Parameter(names = {\"-s\", \"--system\"}, description = \"print the system configuration\")\n    boolean systemConfiguration = false;\n    @Parameter(names = {\"-n\", \"--namespaces\"}, description = \"print the namespace configuration\")\n    boolean namespaceConfiguration = false;\n    @Parameter(names = {\"-t\", \"--tables\"}, description = \"print per-table configuration\")\n    List<String> tables = new ArrayList<>();\n    @Parameter(names = {\"-u\", \"--users\"},\n        description = \"print users and their authorizations and permissions\")\n    boolean users = false;\n  }\n  @Parameters(commandDescription = \"redistribute tablet directories across the current volume list\")\n  static class RandomizeVolumesCommand {\n    @Parameter(names = {\"-t\"}, description = \"table to update\", required = true)\n    String tableName = null;\n  }\n  public static void main(String[] args) {\n    new Admin().execute(args);\n  }\n  @Override\n  public String keyword() {\n    return \"admin\";\n  }\n  @Override\n  public UsageGroup usageGroup() {\n    return UsageGroup.CORE;\n  }\n  @Override\n  public String description() {\n    return \"Executes administrative commands\";\n  }\n  @SuppressFBWarnings(value = \"DM_EXIT\", justification = \"System.exit okay for CLI tool\")\n  @Override\n  public void execute(final String[] args) {\n    boolean everything;\n    AdminOpts opts = new AdminOpts();\n    JCommander cl = new JCommander(opts);\n    cl.setProgramName(\"accumulo admin\");\n    CheckTabletsCommand checkTabletsCommand = new CheckTabletsCommand();\n    cl.addCommand(\"checkTablets\", checkTabletsCommand);\n    ListInstancesCommand listIntancesOpts = new ListInstancesCommand();\n    cl.addCommand(\"listInstances\", listIntancesOpts);\n    PingCommand pingCommand = new PingCommand();\n    cl.addCommand(\"ping\", pingCommand);\n    DumpConfigCommand dumpConfigCommand = new DumpConfigCommand();\n    cl.addCommand(\"dumpConfig\", dumpConfigCommand);\n    VolumesCommand volumesCommand = new VolumesCommand();\n    cl.addCommand(\"volumes\", volumesCommand);\n    StopCommand stopOpts = new StopCommand();\n    cl.addCommand(\"stop\", stopOpts);\n    StopAllCommand stopAllOpts = new StopAllCommand();\n    cl.addCommand(\"stopAll\", stopAllOpts);\n    StopMasterCommand stopMasterOpts = new StopMasterCommand();\n    cl.addCommand(\"stopMaster\", stopMasterOpts);\n    RandomizeVolumesCommand randomizeVolumesOpts = new RandomizeVolumesCommand();\n    cl.addCommand(\"randomizeVolumes\", randomizeVolumesOpts);\n    cl.parse(args);\n    if (opts.help || cl.getParsedCommand() == null) {\n      cl.usage();\n      return;\n    }\n    ServerContext context = opts.getServerContext();\n    AccumuloConfiguration conf = context.getConfiguration();\n    // Login as the server on secure HDFS\n    if (conf.getBoolean(Property.INSTANCE_RPC_SASL_ENABLED)) {\n      SecurityUtil.serverLogin(conf);\n    }<fim_middle>// class below has no smell\n"}