{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.translator;\nimport java.util.Map;\nimport org.apache.asterix.external.feed.management.FeedConnectionRequest;\nimport org.apache.asterix.lang.common.base.Expression;\nimport org.apache.asterix.lang.common.base.Statement;\nimport org.apache.asterix.lang.common.expression.VariableExpr;\nimport org.apache.asterix.lang.common.statement.Query;\nimport org.apache.asterix.metadata.entities.Dataset;\nimport org.apache.asterix.metadata.entities.Index;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.api.exceptions.SourceLocation;\n/**\n * An AQL statement instance is translated into an instance of type CompileX\n * that has additional fields for use by the AqlTranslator.\n */\npublic class CompiledStatements {\n    public interface ICompiledStatement {\n        Statement.Kind getKind();\n        SourceLocation getSourceLocation();\n    }\n    public static abstract class AbstractCompiledStatement implements ICompiledStatement {\n        private SourceLocation sourceLoc;\n        public void setSourceLocation(SourceLocation sourceLoc) {\n            this.sourceLoc = sourceLoc;\n        }\n        public SourceLocation getSourceLocation() {\n            return sourceLoc;\n        }\n    }\n    public static class CompiledDatasetDropStatement extends AbstractCompiledStatement {\n        private final String dataverseName;\n        private final String datasetName;\n        public CompiledDatasetDropStatement(String dataverseName, String datasetName) {\n            this.dataverseName = dataverseName;\n            this.datasetName = datasetName;\n        }\n        public String getDataverseName() {\n            return dataverseName;\n        }\n        public String getDatasetName() {\n            return datasetName;\n        }\n        @Override\n        public Statement.Kind getKind() {\n            return Statement.Kind.DATASET_DROP;\n        }\n    }\n    // added by yasser\n    public static class CompiledCreateDataverseStatement extends AbstractCompiledStatement {\n        private final String dataverseName;\n        private final String format;\n        public CompiledCreateDataverseStatement(String dataverseName, String format) {\n            this.dataverseName = dataverseName;\n            this.format = format;\n        }\n        public String getDataverseName() {\n            return dataverseName;\n        }\n        public String getFormat() {\n            return format;\n        }\n        @Override\n        public Statement.Kind getKind() {\n            return Statement.Kind.CREATE_DATAVERSE;\n        }\n    }\n    public static class CompiledNodeGroupDropStatement extends AbstractCompiledStatement {\n        private final String nodeGroupName;\n        public CompiledNodeGroupDropStatement(String nodeGroupName) {\n            this.nodeGroupName = nodeGroupName;\n        }\n        public String getNodeGroupName() {\n            return nodeGroupName;\n        }\n        @Override\n        public Statement.Kind getKind() {\n            return Statement.Kind.NODEGROUP_DROP;\n        }\n    }\n    public static class CompiledIndexDropStatement extends AbstractCompiledStatement {\n        private final String dataverseName;\n        private final String datasetName;\n        private final String indexName;\n        public CompiledIndexDropStatement(String dataverseName, String datasetName, String indexName) {\n            this.dataverseName = dataverseName;\n            this.datasetName = datasetName;\n            this.indexName = indexName;\n        }\n        public String getDataverseName() {\n            return dataverseName;\n        }\n        public String getDatasetName() {\n            return datasetName;\n        }\n<fim_suffix>        public String getIndexName() {\n            return indexName;\n        }\n        @Override\n        public Statement.Kind getKind() {\n            return Statement.Kind.INDEX_DROP;\n        }\n    }\n    public static class CompiledDataverseDropStatement extends AbstractCompiledStatement {\n        private final String dataverseName;\n        private final boolean ifExists;\n        public CompiledDataverseDropStatement(String dataverseName, boolean ifExists) {\n            this.dataverseName = dataverseName;\n            this.ifExists = ifExists;\n        }\n        public String getDataverseName() {\n            return dataverseName;\n        }\n        public boolean getIfExists() {\n            return ifExists;\n        }\n        @Override\n        public Statement.Kind getKind() {\n            return Statement.Kind.DATAVERSE_DROP;\n        }\n    }\n    public static class CompiledTypeDropStatement extends AbstractCompiledStatement {\n        private final String typeName;\n        public CompiledTypeDropStatement(String nodeGroupName) {\n            this.typeName = nodeGroupName;\n        }\n        public String getTypeName() {\n            return typeName;\n        }\n        @Override\n        public Statement.Kind getKind() {\n            return Statement.Kind.TYPE_DROP;\n        }\n    }\n    public interface ICompiledDmlStatement extends ICompiledStatement {\n        String getDataverseName();\n        String getDatasetName();\n    }\n    public static class CompiledCreateIndexStatement extends AbstractCompiledStatement\n            implements ICompiledDmlStatement {\n        private final Dataset dataset;\n        private final Index index;\n        public CompiledCreateIndexStatement(Dataset dataset, Index index) {\n            this.dataset = dataset;\n            this.index = index;\n        }\n        @Override\n        public String getDatasetName() {\n            return index.getDatasetName();\n        }\n        @Override\n        public String getDataverseName() {\n            return index.getDataverseName();\n        }\n        public Index getIndex() {\n            return index;\n        }\n        public Dataset getDataset() {\n            return dataset;\n        }\n        @Override\n        public Statement.Kind getKind() {\n            return Statement.Kind.CREATE_INDEX;\n        }\n    }\n    public static class CompiledLoadFromFileStatement extends AbstractCompiledStatement\n            implements ICompiledDmlStatement {\n        private final String dataverseName;\n        private final String datasetName;\n        private final boolean alreadySorted;\n        private final String adapter;\n        private final Map<String, String> properties;\n        public CompiledLoadFromFileStatement(String dataverseName, String datasetName, String adapter,\n                Map<String, String> properties, boolean alreadySorted) {\n            this.dataverseName = dataverseName;\n            this.datasetName = datasetName;\n            this.alreadySorted = alreadySorted;\n            this.adapter = adapter;\n            this.properties = properties;\n        }\n        @Override\n        public String getDataverseName() {\n            return dataverseName;\n        }\n        @Override\n        public String getDatasetName() {\n            return datasetName;\n        }\n        public boolean alreadySorted() {\n            return alreadySorted;\n        }\n        public String getAdapter() {\n            return adapter;\n        }\n        public Map<String, String> getProperties() {\n            return properties;\n        }\n        @Override\n        public Statement.Kind getKind() {\n            return Statement.Kind.LOAD;\n        }\n    }\n    public static class CompiledInsertStatement extends AbstractCompiledStatement implements ICompiledDmlStatement {\n        private final String dataverseName;\n        private final String datasetName;\n        private final Query query;\n        private final int varCounter;\n        private final VariableExpr var;\n        private final Expression returnExpression;\n        public CompiledInsertStatement(String dataverseName, String datasetName, Query query, int varCounter,\n                VariableExpr var, Expression returnExpression) {\n            this.dataverseName = dataverseName;\n            this.datasetName = datasetName;\n            this.query = query;\n            this.varCounter = varCounter;\n            this.var = var;\n            this.returnExpression = returnExpression;\n        }\n        @Override\n        public String getDataverseName() {\n            return dataverseName;\n        }\n        @Override\n        public String getDatasetName() {\n            return datasetName;\n        }\n        public int getVarCounter() {\n            return varCounter;\n        }\n        public Query getQuery() {\n            return query;\n        }\n        public VariableExpr getVar() {\n            return var;\n        }\n        public Expression getReturnExpression() {\n            return returnExpression;\n        }\n        @Override\n        public Statement.Kind getKind() {\n            return Statement.Kind.INSERT;\n        }\n    }\n    public static class CompiledUpsertStatement extends CompiledInsertStatement {\n        public CompiledUpsertStatement(String dataverseName, String datasetName, Query query, int varCounter,\n                VariableExpr var, Expression returnExpression) {\n            super(dataverseName, datasetName, query, varCounter, var, returnExpression);\n        }\n        @Override\n        public Statement.Kind getKind() {\n            return Statement.Kind.UPSERT;\n        }\n    }\n    public static class CompiledSubscribeFeedStatement extends AbstractCompiledStatement\n            implements ICompiledDmlStatement {\n        private FeedConnectionRequest request;\n        private final int varCounter;<fim_middle>// function below has no smell\n"}