{"text": "<fim_prefix>     */\n    protected final Stack recorderStack = new Stack();\n    /**\n     * The current Request object\n     */\n    protected Request request;\n    /**\n     * The current Response object\n     */\n    protected Response response;\n    /**\n     * The current Context object\n     */\n    protected Context context;\n    /**\n     * The current objectModel of the environment\n     */\n    protected Map objectModel;\n    /**\n     * The parameters specified in the sitemap\n     */\n    protected Parameters parameters;\n    /**\n     * The source attribute specified in the sitemap\n     */\n    protected String source;\n    /**\n     * The Avalon ServiceManager for getting Components\n     */\n    protected ServiceManager manager;\n    /**\n     * The SourceResolver for this request\n     */\n    protected SourceResolver resolver;\n    /**\n     * Are we already initialized for the current request?\n     */\n    private boolean isInitialized;\n    /**\n     * The namespaces and their prefixes\n     */\n    private final List namespaces = new ArrayList(5);\n    /**\n     * The current prefix for our namespace\n     */\n    private String ourPrefix;\n    /**\n     * Remove namespace prefixes for our namespace?\n     * @since 2.2\n     */\n    protected boolean removeOurNamespacePrefixes = false;\n    /**\n     * @see org.apache.avalon.framework.service.Serviceable#service(ServiceManager)\n     */\n    public void service(ServiceManager aManager) throws ServiceException {\n        this.manager = aManager;\n    }\n    /**\n     * @see Configurable#configure(Configuration)\n     */\n    public void configure(Configuration configuration) throws ConfigurationException {\n        String tFactoryClass = configuration.getChild(\"transformer-factory\").getValue(null);\n        if (tFactoryClass != null) {\n            try {\n                this.tfactory = (SAXTransformerFactory) ClassUtils.newInstance(tFactoryClass);\n                if (getLogger().isDebugEnabled()) {\n                    getLogger().debug(\"Using transformer factory \" + tFactoryClass);\n                }\n            } catch (Exception e) {\n                throw new ConfigurationException(\"Cannot load transformer factory \" + tFactoryClass, e);\n            }\n        } else {\n            // Standard TrAX behaviour\n            this.tfactory = (SAXTransformerFactory) TransformerFactory.newInstance();\n        }\n        tfactory.setErrorListener(new TraxErrorHandler(getLogger()));\n    }\n    /**\n     * @see org.apache.cocoon.sitemap.SitemapModelComponent#setup(SourceResolver, Map, String, Parameters)\n     */\n    public void setup(SourceResolver resolver,\n                      Map            objectModel,\n                      String         src,\n                      Parameters     params)\n    throws ProcessingException, SAXException, IOException {\n        if (getLogger().isDebugEnabled()) {\n            getLogger().debug(\"Setup resolver=\" + resolver +\n                              \", objectModel=\" + objectModel +\n                              \", src=\" + src +\n                              \", parameters=\" + params);\n        }\n        // defaultNamespaceURI should never be null\n        if (this.defaultNamespaceURI == null) {\n            this.defaultNamespaceURI = \"\";\n        }\n        this.objectModel = objectModel;\n        this.request = ObjectModelHelper.getRequest(objectModel);\n        this.response = ObjectModelHelper.getResponse(objectModel);\n        this.context = ObjectModelHelper.getContext(objectModel);\n        this.resolver = resolver;\n        this.parameters = params;\n        this.source = src;\n        this.isInitialized = false;\n        // get the current namespace\n        this.namespaceURI = params.getParameter(\"namespaceURI\",\n                                                this.defaultNamespaceURI);\n        this.ignoreHooksCount = 0;\n        this.ignoreEventsCount = 0;\n        this.ignoreWhitespaces = true;\n        this.ignoreEmptyCharacters = false;\n    }\n    /**\n     * @see org.apache.avalon.excalibur.pool.Recyclable#recycle()\n     */\n    public void recycle() {\n        this.namespaceURI = null;\n        this.objectModel = null;\n        this.request = null;\n        this.response = null;\n        this.context = null;\n        this.resolver = null;\n        this.stack.clear();\n        this.recorderStack.clear();\n        this.parameters = null;\n        this.source = null;\n        this.namespaces.clear();\n        this.ourPrefix = null;\n        super.recycle();\n    }\n    /**\n     * @see org.apache.avalon.framework.activity.Disposable#dispose()\n     */\n    public void dispose() {\n        this.manager = null;\n    }\n    //\n    // SAX ContentHandler methods\n    //\n    /**\n     * Process the SAX event.\n     * @see ContentHandler#setDocumentLocator\n     */\n    public void setDocumentLocator(Locator locator) {\n        if (this.ignoreEventsCount == 0) {\n            super.setDocumentLocator(locator);\n        }\n    }\n    /**\n     * Process the SAX event. A new document is processed. The hook method\n     * {@link #setupTransforming} is invoked.\n     * @see ContentHandler#startDocument\n     */\n    public void startDocument()\n    throws SAXException {\n        if (!this.isInitialized) {\n            try {\n                setupTransforming();\n            } catch (ProcessingException e) {\n                throw new SAXException(\"ProcessingException: \" + e, e);\n            } catch (IOException e) {\n                throw new SAXException(\"IOException: \" + e, e);\n            }\n            this.isInitialized = true;\n        }\n        if (this.ignoreEventsCount == 0) {\n            super.startDocument();\n        }\n    }\n    /**\n     * Process the SAX event. The processing of the document is finished.\n     * @see org.xml.sax.ContentHandler#endDocument\n     */\n    public void endDocument()\n    throws SAXException {\n        if (this.ignoreEventsCount == 0) {\n            super.endDocument();\n        }\n    }\n    /**\n     * Process the SAX event.\n     * @see org.xml.sax.ContentHandler#startPrefixMapping\n     */\n    public void startPrefixMapping(String prefix, String uri)\n    throws SAXException {\n        boolean isOurPrefix = false;\n        if (prefix != null) {\n            this.namespaces.add(new String[] {prefix, uri});\n        }\n        if (namespaceURI.equals(uri)) {\n            this.ourPrefix = prefix;\n            isOurPrefix = true;\n        }\n        if (this.ignoreEventsCount == 0) {\n            if ( !removeOurNamespacePrefixes || !isOurPrefix) {\n                super.startPrefixMapping(prefix, uri);\n            }\n        }\n    }\n    /**\n     * Process the SAX event.\n     * @see org.xml.sax.ContentHandler#endPrefixMapping\n     */\n    public void endPrefixMapping(String prefix)\n    throws SAXException {\n        boolean isOurPrefix = false;\n        if (prefix != null) {\n            // Find and remove the namespace prefix\n            boolean found = false;\n            for (int i = this.namespaces.size() - 1; i >= 0; i--) {\n                final String[] prefixAndUri = (String[]) this.namespaces.get(i);\n                if (prefixAndUri[0].equals(prefix)) {\n                    this.namespaces.remove(i);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                throw new SAXException(\"Namespace for prefix '\" + prefix + \"' not found.\");\n            }\n            if (prefix.equals(this.ourPrefix)) {\n                isOurPrefix = true;\n                // Reset our current prefix\n                this.ourPrefix = null;\n                // Now search if we have a different prefix for our namespace\n                for (int i = this.namespaces.size() - 1; i >= 0; i--) {\n                    final String[] prefixAndUri = (String[]) this.namespaces.get(i);\n                    if (namespaceURI.equals(prefixAndUri[1])) {\n                        this.ourPrefix = prefixAndUri[0];\n                        break;\n                    }\n                }\n            }\n        }\n        if (this.ignoreEventsCount == 0) {\n            if ( !removeOurNamespacePrefixes || !isOurPrefix) {\n                super.endPrefixMapping(prefix);\n            }\n        }\n    }\n    /**\n     * Process the SAX event. The namespace of the event is checked.\n     * If it is the defined namespace for this transformer,\n     * the {@link #startTransformingElement} hook is called.\n     * @see org.xml.sax.ContentHandler#startElement\n     */\n<fim_suffix>    public void startElement(String uri,\n                             String name,\n                             String raw,\n                             Attributes attr)\n    throws SAXException {\n        if (namespaceURI.equals(uri) && ignoreHooksCount == 0) {\n            // this is our namespace:\n            try {\n                startTransformingElement(uri, name, raw, attr);\n            } catch (ProcessingException e) {\n                throw new SAXException(\"ProcessingException: \" + e, e);\n            } catch (IOException e) {\n                throw new SAXException(\"IOException occured during processing: \" + e, e);\n            }\n        } else {\n            if (ignoreEventsCount == 0) {\n                super.startElement(uri, name, raw, attr);\n            }\n        }\n    }<fim_middle>// function below has no smell\n"}