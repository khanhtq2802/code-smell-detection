{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.hbase.procedure;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.List;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.yetus.audience.InterfaceAudience;\nimport org.apache.yetus.audience.InterfaceStability;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Provides the common setup framework and runtime services for globally\n * barriered procedure invocation from HBase services.\n * @param <E> the specific procedure management extension that a concrete\n * implementation provides\n */\n@InterfaceAudience.Private\n@InterfaceStability.Evolving\npublic abstract class ProcedureManagerHost<E extends ProcedureManager> {\n\n  public static final String REGIONSERVER_PROCEDURE_CONF_KEY =\n      \"hbase.procedure.regionserver.classes\";\n  public static final String MASTER_PROCEDURE_CONF_KEY =\n      \"hbase.procedure.master.classes\";\n\n  private static final Logger LOG = LoggerFactory.getLogger(ProcedureManagerHost.class);\n\n  protected Set<E> procedures = new HashSet<>();\n\n  /**\n   * Load system procedures. Read the class names from configuration.\n   * Called by constructor.\n   */\n  protected void loadUserProcedures(Configuration conf, String confKey) {\n    Class<?> implClass = null;\n\n    // load default procedures from configure file\n    String[] defaultProcClasses = conf.getStrings(confKey);\n    if (defaultProcClasses == null || defaultProcClasses.length == 0)\n      return;\n\n    List<E> configured = new ArrayList<>();\n    for (String className : defaultProcClasses) {\n      className = className.trim();\n      ClassLoader cl = this.getClass().getClassLoader();\n      Thread.currentThread().setContextClassLoader(cl);\n      try {\n        implClass = cl.loadClass(className);\n        configured.add(loadInstance(implClass));\n        LOG.info(\"User procedure \" + className + \" was loaded successfully.\");\n      } catch (ClassNotFoundException e) {\n        LOG.warn(\"Class \" + className + \" cannot be found. \" +\n            e.getMessage());\n      } catch (IOException e) {\n        LOG.warn(\"Load procedure \" + className + \" failed. \" +\n            e.getMessage());\n      }\n    }\n\n    // add entire set to the collection\n    procedures.addAll(configured);\n  }\n\n<fim_suffix>  @SuppressWarnings(\"unchecked\")\n  public E loadInstance(Class<?> implClass) throws IOException {\n    // create the instance\n    E impl;\n    Object o = null;\n    try {\n      o = implClass.getDeclaredConstructor().newInstance();\n      impl = (E)o;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    return impl;\n  }\n\n  // Register a procedure manager object\n  public void register(E obj) {\n    procedures.add(obj);\n  }\n\n  public Set<E> getProcedureManagers() {\n    Set<E> returnValue = new HashSet<>();\n    for (E e: procedures) {\n      returnValue.add(e);\n    }\n    return returnValue;\n  }\n\n  public abstract void loadProcedures(Configuration conf);\n}<fim_middle>// function below has no smell\n"}