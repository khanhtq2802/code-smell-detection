{"text": "<fim_prefix>\n<fim_suffix>public class MetadataTableUtil {\n  private static final Text EMPTY_TEXT = new Text();\n  private static final byte[] EMPTY_BYTES = new byte[0];\n  private static Map<Credentials,Writer> root_tables = new HashMap<>();\n  private static Map<Credentials,Writer> metadata_tables = new HashMap<>();\n  private static final Logger log = LoggerFactory.getLogger(MetadataTableUtil.class);\n  private MetadataTableUtil() {}\n  public static synchronized Writer getMetadataTable(ServerContext context) {\n    Credentials credentials = context.getCredentials();\n    Writer metadataTable = metadata_tables.get(credentials);\n    if (metadataTable == null) {\n      metadataTable = new Writer(context, MetadataTable.ID);\n      metadata_tables.put(credentials, metadataTable);\n    }\n    return metadataTable;\n  }\n  public static synchronized Writer getRootTable(ServerContext context) {\n    Credentials credentials = context.getCredentials();\n    Writer rootTable = root_tables.get(credentials);\n    if (rootTable == null) {\n      rootTable = new Writer(context, RootTable.ID);\n      root_tables.put(credentials, rootTable);\n    }\n    return rootTable;\n  }\n  public static void putLockID(ServerContext context, ZooLock zooLock, Mutation m) {\n    TabletsSection.ServerColumnFamily.LOCK_COLUMN.put(m,\n        new Value(zooLock.getLockID().serialize(context.getZooKeeperRoot() + \"/\").getBytes(UTF_8)));\n  }\n  private static void update(ServerContext context, Mutation m, KeyExtent extent) {\n    update(context, null, m, extent);\n  }\n  public static void update(ServerContext context, ZooLock zooLock, Mutation m, KeyExtent extent) {\n    Writer t = extent.isMeta() ? getRootTable(context) : getMetadataTable(context);\n    update(context, t, zooLock, m);\n  }\n  public static void update(ServerContext context, Writer t, ZooLock zooLock, Mutation m) {\n    if (zooLock != null)\n      putLockID(context, zooLock, m);\n    while (true) {\n      try {\n        t.update(m);\n        return;\n      } catch (AccumuloException | TableNotFoundException | AccumuloSecurityException e) {\n        log.error(\"{}\", e.getMessage(), e);\n      } catch (ConstraintViolationException e) {\n        log.error(\"{}\", e.getMessage(), e);\n        // retrying when a CVE occurs is probably futile and can cause problems, see ACCUMULO-3096\n        throw new RuntimeException(e);\n      }\n      sleepUninterruptibly(1, TimeUnit.SECONDS);\n    }\n  }\n  public static void updateTabletFlushID(KeyExtent extent, long flushID, ServerContext context,\n      ZooLock zooLock) {\n    if (!extent.isRootTablet()) {\n      Mutation m = new Mutation(extent.getMetadataEntry());\n      TabletsSection.ServerColumnFamily.FLUSH_COLUMN.put(m,\n          new Value((flushID + \"\").getBytes(UTF_8)));\n      update(context, zooLock, m, extent);\n    }\n  }\n  public static void updateTabletCompactID(KeyExtent extent, long compactID, ServerContext context,\n      ZooLock zooLock) {\n    if (!extent.isRootTablet()) {\n      Mutation m = new Mutation(extent.getMetadataEntry());\n      TabletsSection.ServerColumnFamily.COMPACT_COLUMN.put(m,\n          new Value((compactID + \"\").getBytes(UTF_8)));\n      update(context, zooLock, m, extent);\n    }\n  }\n  public static void updateTabletDataFile(long tid, KeyExtent extent,\n      Map<FileRef,DataFileValue> estSizes, String time, ServerContext context, ZooLock zooLock) {\n    Mutation m = new Mutation(extent.getMetadataEntry());\n    byte[] tidBytes = Long.toString(tid).getBytes(UTF_8);\n    for (Entry<FileRef,DataFileValue> entry : estSizes.entrySet()) {\n      Text file = entry.getKey().meta();\n      m.put(DataFileColumnFamily.NAME, file, new Value(entry.getValue().encode()));\n      m.put(TabletsSection.BulkFileColumnFamily.NAME, file, new Value(tidBytes));\n    }\n    TabletsSection.ServerColumnFamily.TIME_COLUMN.put(m, new Value(time.getBytes(UTF_8)));\n    update(context, zooLock, m, extent);\n  }\n  public static void updateTabletDir(KeyExtent extent, String newDir, ServerContext context,\n      ZooLock lock) {\n    Mutation m = new Mutation(extent.getMetadataEntry());\n    TabletsSection.ServerColumnFamily.DIRECTORY_COLUMN.put(m, new Value(newDir.getBytes(UTF_8)));\n    update(context, lock, m, extent);\n  }\n  public static void addTablet(KeyExtent extent, String path, ServerContext context, char timeType,\n      ZooLock lock) {\n    Mutation m = extent.getPrevRowUpdateMutation();\n    TabletsSection.ServerColumnFamily.DIRECTORY_COLUMN.put(m, new Value(path.getBytes(UTF_8)));\n    TabletsSection.ServerColumnFamily.TIME_COLUMN.put(m,\n        new Value((timeType + \"0\").getBytes(UTF_8)));\n    update(context, lock, m, extent);\n  }\n  public static void updateTabletVolumes(KeyExtent extent, List<LogEntry> logsToRemove,\n      List<LogEntry> logsToAdd, List<FileRef> filesToRemove,\n      SortedMap<FileRef,DataFileValue> filesToAdd, String newDir, ZooLock zooLock,\n      ServerContext context) {\n    if (extent.isRootTablet()) {\n      if (newDir != null)\n        throw new IllegalArgumentException(\"newDir not expected for \" + extent);\n      if (filesToRemove.size() != 0 || filesToAdd.size() != 0)\n        throw new IllegalArgumentException(\"files not expected for \" + extent);\n      // add before removing in case of process death\n      for (LogEntry logEntry : logsToAdd)\n        addRootLogEntry(context, zooLock, logEntry);\n      removeUnusedWALEntries(context, extent, logsToRemove, zooLock);\n    } else {\n      Mutation m = new Mutation(extent.getMetadataEntry());\n      for (LogEntry logEntry : logsToRemove)\n        m.putDelete(logEntry.getColumnFamily(), logEntry.getColumnQualifier());\n      for (LogEntry logEntry : logsToAdd)\n        m.put(logEntry.getColumnFamily(), logEntry.getColumnQualifier(), logEntry.getValue());\n      for (FileRef fileRef : filesToRemove)\n        m.putDelete(DataFileColumnFamily.NAME, fileRef.meta());\n      for (Entry<FileRef,DataFileValue> entry : filesToAdd.entrySet())\n        m.put(DataFileColumnFamily.NAME, entry.getKey().meta(),\n            new Value(entry.getValue().encode()));\n      if (newDir != null)\n        ServerColumnFamily.DIRECTORY_COLUMN.put(m, new Value(newDir.getBytes(UTF_8)));\n      update(context, m, extent);\n    }\n  }\n  private interface ZooOperation {\n    void run(IZooReaderWriter rw) throws KeeperException, InterruptedException, IOException;\n  }\n  private static void retryZooKeeperUpdate(ServerContext context, ZooLock zooLock,\n      ZooOperation op) {\n    while (true) {\n      try {\n        IZooReaderWriter zoo = context.getZooReaderWriter();\n        if (zoo.isLockHeld(zooLock.getLockID())) {\n          op.run(zoo);\n        }\n        break;\n      } catch (Exception e) {\n        log.error(\"Unexpected exception {}\", e.getMessage(), e);\n      }\n      sleepUninterruptibly(1, TimeUnit.SECONDS);\n    }\n  }\n  private static void addRootLogEntry(ServerContext context, ZooLock zooLock,\n      final LogEntry entry) {\n    retryZooKeeperUpdate(context, zooLock, new ZooOperation() {\n      @Override\n      public void run(IZooReaderWriter rw)\n          throws KeeperException, InterruptedException, IOException {\n        String root = getZookeeperLogLocation(context);\n        rw.putPersistentData(root + \"/\" + entry.getUniqueID(), entry.toBytes(),\n            NodeExistsPolicy.OVERWRITE);\n      }\n    });\n  }\n  public static SortedMap<FileRef,DataFileValue> getDataFileSizes(KeyExtent extent,\n      ServerContext context) {\n    TreeMap<FileRef,DataFileValue> sizes = new TreeMap<>();\n    try (Scanner mdScanner = new ScannerImpl(context, MetadataTable.ID, Authorizations.EMPTY)) {\n      mdScanner.fetchColumnFamily(DataFileColumnFamily.NAME);\n      Text row = extent.getMetadataEntry();\n      Key endKey = new Key(row, DataFileColumnFamily.NAME, new Text(\"\"));<fim_middle>// class below is blob\n"}