{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.catalina.startup;\n\nimport java.lang.management.ManagementFactory;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\nimport org.apache.catalina.Lifecycle;\nimport org.apache.catalina.LifecycleEvent;\nimport org.apache.catalina.LifecycleListener;\nimport org.apache.catalina.util.ServerInfo;\nimport org.apache.juli.logging.Log;\nimport org.apache.juli.logging.LogFactory;\nimport org.apache.tomcat.util.res.StringManager;\n\n/**\n * Logs version information on startup.\n */\npublic class VersionLoggerListener implements LifecycleListener {\n\n    private static final Log log = LogFactory.getLog(VersionLoggerListener.class);\n\n    /**\n     * The string manager for this package.\n     */\n    protected static final StringManager sm = StringManager.getManager(Constants.Package);\n\n    private boolean logArgs = true;\n    private boolean logEnv = false;\n    private boolean logProps = false;\n\n\n    public boolean getLogArgs() {\n        return logArgs;\n    }\n\n\n<fim_suffix>    public void setLogArgs(boolean logArgs) {\n        this.logArgs = logArgs;\n    }\n\n\n    public boolean getLogEnv() {\n        return logEnv;\n    }\n\n\n    public void setLogEnv(boolean logEnv) {\n        this.logEnv = logEnv;\n    }\n\n\n    public boolean getLogProps() {\n        return logProps;\n    }\n\n\n    public void setLogProps(boolean logProps) {\n        this.logProps = logProps;\n    }\n\n\n    @Override\n    public void lifecycleEvent(LifecycleEvent event) {\n        if (Lifecycle.BEFORE_INIT_EVENT.equals(event.getType())) {\n            log();\n        }\n    }\n\n\n    private void log() {\n        log.info(sm.getString(\"versionLoggerListener.serverInfo.server.version\",\n                ServerInfo.getServerInfo()));\n        log.info(sm.getString(\"versionLoggerListener.serverInfo.server.built\",\n                ServerInfo.getServerBuilt()));\n        log.info(sm.getString(\"versionLoggerListener.serverInfo.server.number\",\n                ServerInfo.getServerNumber()));\n        log.info(sm.getString(\"versionLoggerListener.os.name\",\n                System.getProperty(\"os.name\")));\n        log.info(sm.getString(\"versionLoggerListener.os.version\",\n                System.getProperty(\"os.version\")));\n        log.info(sm.getString(\"versionLoggerListener.os.arch\",\n                System.getProperty(\"os.arch\")));\n        log.info(sm.getString(\"versionLoggerListener.java.home\",\n                System.getProperty(\"java.home\")));\n        log.info(sm.getString(\"versionLoggerListener.vm.version\",\n                System.getProperty(\"java.runtime.version\")));\n        log.info(sm.getString(\"versionLoggerListener.vm.vendor\",\n                System.getProperty(\"java.vm.vendor\")));\n        log.info(sm.getString(\"versionLoggerListener.catalina.base\",\n                System.getProperty(\"catalina.base\")));\n        log.info(sm.getString(\"versionLoggerListener.catalina.home\",\n                System.getProperty(\"catalina.home\")));\n\n        if (logArgs) {\n            List<String> args = ManagementFactory.getRuntimeMXBean().getInputArguments();\n            for (String arg : args) {\n                log.info(sm.getString(\"versionLoggerListener.arg\", arg));\n            }\n        }\n\n        if (logEnv) {\n            SortedMap<String, String> sortedMap = new TreeMap<>(System.getenv());\n            for (Map.Entry<String, String> e : sortedMap.entrySet()) {\n                log.info(sm.getString(\"versionLoggerListener.env\", e.getKey(), e.getValue()));\n            }\n        }\n\n        if (logProps) {\n            SortedMap<String, String> sortedMap = new TreeMap<>();\n            for (Map.Entry<Object, Object> e : System.getProperties().entrySet()) {\n                sortedMap.put(String.valueOf(e.getKey()), String.valueOf(e.getValue()));\n            }\n            for (Map.Entry<String, String> e : sortedMap.entrySet()) {\n                log.info(sm.getString(\"versionLoggerListener.prop\", e.getKey(), e.getValue()));\n            }\n        }\n    }\n}<fim_middle>// function below has no smell\n"}