{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.drill.exec.expr.fn.impl.conv;\n\n\nimport io.netty.buffer.DrillBuf;\n\nimport javax.inject.Inject;\n\nimport org.apache.drill.exec.expr.DrillSimpleFunc;\nimport org.apache.drill.exec.expr.annotations.FunctionTemplate;\nimport org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionScope;\nimport org.apache.drill.exec.expr.annotations.Output;\nimport org.apache.drill.exec.expr.annotations.Param;\nimport org.apache.drill.exec.expr.annotations.Workspace;\nimport org.apache.drill.exec.expr.holders.NullableVarBinaryHolder;\nimport org.apache.drill.exec.expr.holders.NullableVarCharHolder;\nimport org.apache.drill.exec.expr.holders.VarBinaryHolder;\nimport org.apache.drill.exec.expr.holders.VarCharHolder;\nimport org.apache.drill.exec.vector.complex.writer.BaseWriter.ComplexWriter;\n\npublic class JsonConvertFrom {\n\n static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(JsonConvertFrom.class);\n\n  private JsonConvertFrom() {\n  }\n\n  @FunctionTemplate(name = \"convert_fromJSON\", scope = FunctionScope.SIMPLE, isRandom = true)\n  public static class ConvertFromJson implements DrillSimpleFunc {\n\n    @Param VarBinaryHolder in;\n    @Inject DrillBuf buffer;\n    @Workspace org.apache.drill.exec.vector.complex.fn.JsonReader jsonReader;\n\n    @Output ComplexWriter writer;\n\n    @Override\n    public void setup() {\n      jsonReader = new org.apache.drill.exec.vector.complex.fn.JsonReader.Builder(buffer)\n          .defaultSchemaPathColumns()\n          .build();\n    }\n\n    @Override\n    public void eval() {\n      try {\n        jsonReader.setSource(in.start, in.end, in.buffer);\n        jsonReader.write(writer);\n        buffer = jsonReader.getWorkBuf();\n      } catch (Exception e) {\n        throw new org.apache.drill.common.exceptions.DrillRuntimeException(\"Error while converting from JSON. \", e);\n      }\n    }\n  }\n\n  @FunctionTemplate(name = \"convert_fromJSON\", scope = FunctionScope.SIMPLE, isRandom = true)\n  public static class ConvertFromJsonVarchar implements DrillSimpleFunc {\n\n    @Param VarCharHolder in;\n    @Inject DrillBuf buffer;\n    @Workspace org.apache.drill.exec.vector.complex.fn.JsonReader jsonReader;\n\n    @Output ComplexWriter writer;\n\n    @Override\n    public void setup() {\n      jsonReader = new org.apache.drill.exec.vector.complex.fn.JsonReader.Builder(buffer)\n          .defaultSchemaPathColumns()\n          .build();\n    }\n\n    @Override\n    public void eval() {\n      try {\n        jsonReader.setSource(in.start, in.end, in.buffer);\n        jsonReader.write(writer);\n        buffer = jsonReader.getWorkBuf();\n      } catch (Exception e) {\n        throw new org.apache.drill.common.exceptions.DrillRuntimeException(\"Error while converting from JSON. \", e);\n      }\n    }\n  }\n\n<fim_suffix>  @FunctionTemplate(name = \"convert_fromJSON\", scope = FunctionScope.SIMPLE, isRandom = true)\n  public static class ConvertFromJsonNullableInput implements DrillSimpleFunc {\n\n    @Param NullableVarBinaryHolder in;\n    @Inject DrillBuf buffer;\n    @Workspace org.apache.drill.exec.vector.complex.fn.JsonReader jsonReader;\n\n    @Output ComplexWriter writer;\n\n    @Override\n    public void setup() {\n      jsonReader = new org.apache.drill.exec.vector.complex.fn.JsonReader.Builder(buffer)\n          .defaultSchemaPathColumns()\n          .build();\n    }\n\n    @Override\n    public void eval() {\n      if (in.isSet == 0) {\n        // Return empty map\n        org.apache.drill.exec.vector.complex.writer.BaseWriter.MapWriter mapWriter = writer.rootAsMap();\n        mapWriter.start();\n        mapWriter.end();\n        return;\n      }\n\n      try {\n        jsonReader.setSource(in.start, in.end, in.buffer);\n        jsonReader.write(writer);\n        buffer = jsonReader.getWorkBuf();\n      } catch (Exception e) {\n        throw new org.apache.drill.common.exceptions.DrillRuntimeException(\"Error while converting from JSON. \", e);\n      }\n    }\n  }\n\n  @FunctionTemplate(name = \"convert_fromJSON\", scope = FunctionScope.SIMPLE, isRandom = true)\n  public static class ConvertFromJsonVarcharNullableInput implements DrillSimpleFunc {\n\n    @Param NullableVarCharHolder in;\n    @Inject DrillBuf buffer;\n    @Workspace org.apache.drill.exec.vector.complex.fn.JsonReader jsonReader;\n\n    @Output ComplexWriter writer;\n\n    @Override\n    public void setup() {\n      jsonReader = new org.apache.drill.exec.vector.complex.fn.JsonReader.Builder(buffer)\n          .defaultSchemaPathColumns()\n          .build();\n    }\n\n    @Override\n    public void eval() {\n      if (in.isSet == 0) {\n        // Return empty map\n        org.apache.drill.exec.vector.complex.writer.BaseWriter.MapWriter mapWriter = writer.rootAsMap();\n        mapWriter.start();\n        mapWriter.end();\n        return;\n      }\n\n      try {\n        jsonReader.setSource(in.start, in.end, in.buffer);\n        jsonReader.write(writer);\n        buffer = jsonReader.getWorkBuf();\n      } catch (Exception e) {\n        throw new org.apache.drill.common.exceptions.DrillRuntimeException(\"Error while converting from JSON. \", e);\n      }\n    }\n  }\n}<fim_middle>// class below has no smell\n"}