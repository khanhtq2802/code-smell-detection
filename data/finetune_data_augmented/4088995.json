{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.bookkeeper.client;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\nimport org.apache.bookkeeper.net.BookieSocketAddress;\n\n<fim_suffix>interface BookieWatcher {\n    Set<BookieSocketAddress> getBookies() throws BKException;\n    Set<BookieSocketAddress> getReadOnlyBookies() throws BKException;\n\n    /**\n     * Create an ensemble with given <i>ensembleSize</i> and <i>writeQuorumSize</i>.\n     *\n     * @param ensembleSize\n     *          Ensemble Size\n     * @param writeQuorumSize\n     *          Write Quorum Size\n     * @return list of bookies for new ensemble.\n     * @throws BKNotEnoughBookiesException\n     */\n    List<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize,\n                                          int ackQuorumSize, Map<String, byte[]> customMetadata)\n            throws BKNotEnoughBookiesException;\n\n    /**\n     * Choose a bookie to replace bookie <i>bookieIdx</i> in <i>existingBookies</i>.\n     * @param existingBookies\n     *          list of existing bookies.\n     * @param bookieIdx\n     *          index of the bookie in the list to be replaced.\n     * @return the bookie to replace.\n     * @throws BKNotEnoughBookiesException\n     */\n    BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n                                      Map<String, byte[]> customMetadata,\n                                      List<BookieSocketAddress> existingBookies, int bookieIdx,\n                                      Set<BookieSocketAddress> excludeBookies)\n            throws BKNotEnoughBookiesException;\n\n\n    /**\n     * Quarantine <i>bookie</i> so it will not be preferred to be chosen for new ensembles.\n     * @param bookie\n     */\n    void quarantineBookie(BookieSocketAddress bookie);\n}<fim_middle>// class below has no smell\n"}