{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.beam.runners.core.construction;\n\nimport static org.apache.beam.vendor.guava.v20_0.com.google.common.base.Preconditions.checkArgument;\n\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.beam.sdk.runners.AppliedPTransform;\nimport org.apache.beam.sdk.transforms.PTransform;\nimport org.apache.beam.sdk.values.PCollection;\nimport org.apache.beam.sdk.values.PValue;\nimport org.apache.beam.sdk.values.TupleTag;\nimport org.apache.beam.vendor.guava.v20_0.com.google.common.collect.Iterables;\n\n/** */\n<fim_suffix>public class PTransformReplacements {\n  /**\n   * Gets the singleton input of an {@link AppliedPTransform}, ignoring any additional inputs\n   * returned by {@link PTransform#getAdditionalInputs()}.\n   */\n  public static <T> PCollection<T> getSingletonMainInput(\n      AppliedPTransform<? extends PCollection<? extends T>, ?, ?> application) {\n    return getSingletonMainInput(\n        application.getInputs(), application.getTransform().getAdditionalInputs().keySet());\n  }\n\n  private static <T> PCollection<T> getSingletonMainInput(\n      Map<TupleTag<?>, PValue> inputs, Set<TupleTag<?>> ignoredTags) {\n    PCollection<T> mainInput = null;\n    for (Map.Entry<TupleTag<?>, PValue> input : inputs.entrySet()) {\n      if (!ignoredTags.contains(input.getKey())) {\n        checkArgument(\n            mainInput == null,\n            \"Got multiple inputs that are not additional inputs for a \"\n                + \"singleton main input: %s and %s\",\n            mainInput,\n            input.getValue());\n        checkArgument(\n            input.getValue() instanceof PCollection,\n            \"Unexpected input type %s\",\n            input.getValue().getClass());\n        mainInput = (PCollection<T>) input.getValue();\n      }\n    }\n    checkArgument(\n        mainInput != null,\n        \"No main input found in inputs: Inputs %s, Side Input tags %s\",\n        inputs,\n        ignoredTags);\n    return mainInput;\n  }\n\n  public static <T> PCollection<T> getSingletonMainOutput(\n      AppliedPTransform<?, PCollection<T>, ? extends PTransform<?, PCollection<T>>> transform) {\n    return (PCollection<T>) Iterables.getOnlyElement(transform.getOutputs().values());\n  }\n}<fim_middle>// class below has no smell\n"}