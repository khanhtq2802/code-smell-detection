{"text": "<fim_prefix>\n<fim_suffix>public class UpdateCacheAcrossDifferentClientsIT extends BaseUniqueNamesOwnClusterIT {\n    @BeforeClass\n    public static void doSetup() throws Exception {\n        Map<String, String> props = Maps.newConcurrentMap();\n        props.put(QueryServices.DROP_METADATA_ATTRIB, Boolean.TRUE.toString());\n        props.put(QueryServices.MUTATE_BATCH_SIZE_ATTRIB, Integer.toString(3000));\n        //When we run all tests together we are using global cluster(driver)\n        //so to make drop work we need to re register driver with DROP_METADATA_ATTRIB property\n        destroyDriver();\n        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n        //Registering real Phoenix driver to have multiple ConnectionQueryServices created across connections\n        //so that metadata changes doesn't get propagated across connections\n        DriverManager.registerDriver(PhoenixDriver.INSTANCE);\n    }\n    @Test\n    public void testUpdateCacheFrequencyWithAddAndDropTable() throws Exception {\n        // Create connections 1 and 2\n        Properties longRunningProps = new Properties(); // Must update config before starting server\n        longRunningProps.put(QueryServices.EXTRA_JDBC_ARGUMENTS_ATTRIB,\n            QueryServicesOptions.DEFAULT_EXTRA_JDBC_ARGUMENTS);\n        longRunningProps.put(QueryServices.DROP_METADATA_ATTRIB, Boolean.TRUE.toString());\n        Connection conn1 = DriverManager.getConnection(getUrl(), longRunningProps);\n        String url2 = getUrl() + PhoenixRuntime.JDBC_PROTOCOL_SEPARATOR + \"LongRunningQueries\";\n        Connection conn2 = DriverManager.getConnection(url2, longRunningProps);\n        conn1.setAutoCommit(true);\n        conn2.setAutoCommit(true);\n        String tableName = generateUniqueName();\n        String tableCreateQuery =\n                \"create table \"+tableName+\" (k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n                + \" UPDATE_CACHE_FREQUENCY=1000000000\";\n        String dropTableQuery = \"DROP table \"+tableName;\n        try {\n            conn1.createStatement().execute(tableCreateQuery);\n            conn1.createStatement()\n                    .execute(\"upsert into \"+tableName+\" values ('row1', 'value1', 'key1')\");\n            conn1.createStatement()\n                    .execute(\"upsert into \"+tableName+\" values ('row2', 'value2', 'key2')\");\n            conn1.commit();\n            ResultSet rs =conn1.createStatement()\n                            .executeQuery(\"select * from \"+tableName);\n            assertTrue(rs.next());\n            assertTrue(rs.next());\n            rs = conn2.createStatement().executeQuery(\"select * from \"+tableName);\n            assertTrue(rs.next());\n            assertTrue(rs.next());\n            //Drop table from conn1\n            conn1.createStatement().execute(dropTableQuery);\n            try {\n                rs = conn1.createStatement().executeQuery(\"select * from \"+tableName);\n                fail(\"Should throw TableNotFoundException after dropping table\");\n            } catch (TableNotFoundException e) {\n                //Expected\n            }\n            try {\n                rs = conn2.createStatement().executeQuery(\"select * from \"+tableName);\n                fail(\"Should throw TableNotFoundException after dropping table\");\n            } catch (TableNotFoundException e) {\n                //Expected\n            }\n        } finally {\n            conn1.close();\n            conn2.close();\n        }\n    }\n    @Test\n    public void testTableSentWhenIndexStateChanges() throws Throwable {\n        // Create connections 1 and 2\n        Properties longRunningProps = new Properties(); // Must update config before starting server\n        longRunningProps.put(QueryServices.EXTRA_JDBC_ARGUMENTS_ATTRIB,\n            QueryServicesOptions.DEFAULT_EXTRA_JDBC_ARGUMENTS);\n        longRunningProps.put(QueryServices.DROP_METADATA_ATTRIB, Boolean.TRUE.toString());\n        Connection conn1 = DriverManager.getConnection(getUrl(), longRunningProps);\n        String url2 = getUrl() + PhoenixRuntime.JDBC_PROTOCOL_SEPARATOR + \"LongRunningQueries\";\n        Connection conn2 = DriverManager.getConnection(url2, longRunningProps);\n        conn1.setAutoCommit(true);\n        conn2.setAutoCommit(true);\n        try {\n            String schemaName = generateUniqueName();\n            String tableName = generateUniqueName();\n            String indexName = generateUniqueName();\n            final String fullTableName = SchemaUtil.getTableName(schemaName, tableName);\n            String fullIndexName = SchemaUtil.getTableName(schemaName, indexName);\n            conn1.createStatement().execute(\"CREATE TABLE \" + fullTableName + \"(k INTEGER PRIMARY KEY, v1 INTEGER, v2 INTEGER) COLUMN_ENCODED_BYTES = 0, STORE_NULLS=true\");\n            conn1.createStatement().execute(\"CREATE INDEX \" + indexName + \" ON \" + fullTableName + \" (v1) INCLUDE (v2)\");\n            Table metaTable = conn2.unwrap(PhoenixConnection.class).getQueryServices().getTable(PhoenixDatabaseMetaData.SYSTEM_CATALOG_NAME_BYTES);\n            IndexUtil.updateIndexState(fullIndexName, 0, metaTable, PIndexState.DISABLE);\n            conn2.createStatement().execute(\"UPSERT INTO \" + fullTableName + \" VALUES(1,2,3)\");\n            conn2.commit();\n            conn1.createStatement().execute(\"UPSERT INTO \" + fullTableName + \" VALUES(4,5,6)\");\n            conn1.commit();\n            PTableKey key = new PTableKey(null,fullTableName);\n            PMetaData metaCache = conn1.unwrap(PhoenixConnection.class).getMetaDataCache();\n            PTable table = metaCache.getTableRef(key).getTable();\n            for (PTable index : table.getIndexes()) {\n                assertEquals(PIndexState.DISABLE, index.getIndexState());\n            }\n        } finally {\n            conn1.close();\n            conn2.close();\n        }\n    }\n    @Test\n    public void testUpdateCacheFrequencyWithAddColumn() throws Exception {\n        // Create connections 1 and 2\n        Properties longRunningProps = new Properties(); // Must update config before starting server\n        Connection conn1 = DriverManager.getConnection(getUrl(), longRunningProps);\n        Connection conn2 = DriverManager.getConnection(getUrl(), longRunningProps);\n        conn1.setAutoCommit(true);\n        conn2.setAutoCommit(true);\n        String tableName = generateUniqueName();\n        String createTableQuery =\n                \"create table \"+tableName+\" (k UNSIGNED_DOUBLE not null primary key, \"\n                + \"v1 UNSIGNED_DOUBLE, v2 UNSIGNED_DOUBLE, v3 UNSIGNED_DOUBLE, \"\n                + \"v4 UNSIGNED_DOUBLE) UPDATE_CACHE_FREQUENCY=1000000000\";\n        try {\n            conn1.createStatement().execute(createTableQuery);\n            conn1.createStatement()\n                    .execute(\"upsert into \"+tableName+\" values (1, 2, 3, 4, 5)\");\n            conn1.createStatement()\n                    .execute(\"upsert into \"+tableName+\" values (6, 7, 8, 9, 10)\");\n            conn1.commit();\n            ResultSet rs = conn1.createStatement()\n                            .executeQuery(\"select k,v1,v2,v3 from \"+tableName);\n            assertTrue(rs.next());\n            assertTrue(rs.next());\n            rs = conn2.createStatement()\n                            .executeQuery(\"select k,v1,v2,v3 from \"+tableName);\n            assertTrue(rs.next());\n            assertTrue(rs.next());\n            PreparedStatement alterStatement = conn1.prepareStatement(\n                        \"ALTER TABLE \"+tableName+\" ADD v9 UNSIGNED_DOUBLE\");\n            alterStatement.execute();\n            rs =  conn1.createStatement()\n                            .executeQuery(\"select k,v1,v2,v3,v9 from \"+tableName);\n            assertTrue(rs.next());\n            assertTrue(rs.next());\n            rs = conn2.createStatement()\n                            .executeQuery(\"select k,v1,v2,v3,V9 from \"+tableName);\n            assertTrue(rs.next());\n            assertTrue(rs.next());\n        } finally {\n            conn1.close();\n            conn2.close();\n        }\n    }\n    @Test\n    public void testUpdateCacheFrequencyWithAddAndDropIndex() throws Exception {\n        // Create connections 1 and 2\n        Properties longRunningProps = new Properties();\n        longRunningProps.put(QueryServices.EXTRA_JDBC_ARGUMENTS_ATTRIB,\n            QueryServicesOptions.DEFAULT_EXTRA_JDBC_ARGUMENTS);\n        Connection conn1 = DriverManager.getConnection(getUrl(), longRunningProps);\n        String url2 = getUrl() + PhoenixRuntime.JDBC_PROTOCOL_SEPARATOR + \"LongRunningQueries\";\n        Connection conn2 = DriverManager.getConnection(url2, longRunningProps);\n        conn1.setAutoCommit(true);\n        conn2.setAutoCommit(true);\n        String tableName = generateUniqueName();\n        String indexName = \"I_\"+tableName;\n        String tableCreateQuery =\n                \"create table \"+tableName+\" (k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n                + \" UPDATE_CACHE_FREQUENCY=1000000000\";\n        String value1SelQuery = \"SELECT v2 FROM \"+tableName+\" WHERE v1 = 'value1'\";\n        String indexCreateQuery = \"CREATE INDEX \"+indexName+\" ON \"+tableName+\" (v1) INCLUDE (v2)\";<fim_middle>// class below has no smell\n"}