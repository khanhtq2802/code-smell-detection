{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *\n */\npackage org.apache.polygene.runtime.structure;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Stream;\nimport org.apache.polygene.api.activation.ActivationEventListener;\nimport org.apache.polygene.api.activation.ActivationException;\nimport org.apache.polygene.api.activation.PassivationException;\nimport org.apache.polygene.api.common.MetaInfo;\nimport org.apache.polygene.api.structure.Application;\nimport org.apache.polygene.api.structure.ApplicationDescriptor;\nimport org.apache.polygene.api.structure.Layer;\nimport org.apache.polygene.api.structure.Module;\nimport org.apache.polygene.bootstrap.PolygeneRuntime;\nimport org.apache.polygene.runtime.activation.ActivationDelegate;\n\n/**\n * Instance of a Polygene application. Contains a list of layers which are managed by this application\n */\npublic class ApplicationInstance\n    implements Application\n{\n\n    // Constructor parameters\n    private final ApplicationModel applicationModel;\n    private final PolygeneRuntime runtime;\n    private final MetaInfo instanceMetaInfo;\n    // Eager instance objects\n    private final ActivationDelegate activation;\n    private final List<LayerInstance> layerInstances;\n\n    public ApplicationInstance( ApplicationModel model, PolygeneRuntime runtime, MetaInfo instanceMetaInfo )\n    {\n        // Constructor parameters\n        this.applicationModel = model;\n        this.runtime = runtime;\n        this.instanceMetaInfo = instanceMetaInfo;\n\n        // Eager instance objects\n        activation = new ActivationDelegate( this );\n        layerInstances = new ArrayList<>();\n    }\n\n    @Override\n    public String toString()\n    {\n        return name();\n    }\n\n    // Implementation of Application\n    @Override\n    public String name()\n    {\n        return applicationModel.name();\n    }\n\n    @Override\n    public String version()\n    {\n        return applicationModel.version();\n    }\n\n    @Override\n    public Mode mode()\n    {\n        return applicationModel.mode();\n    }\n\n    @Override\n    public Layer findLayer( String layerName )\n    {\n        for( LayerInstance layerInstance : layerInstances )\n        {\n            if( layerInstance.model().name().equals( layerName ) )\n            {\n                return layerInstance;\n            }\n        }\n\n        throw new IllegalArgumentException( \"No such layer:\" + layerName );\n    }\n\n    @Override\n    public Module findModule( String layerName, String moduleName )\n    {\n        for( LayerInstance layerInstance : layerInstances )\n        {\n            if( layerInstance.model().name().equals( layerName ) )\n            {\n                return layerInstance.findModule( moduleName );\n            }\n        }\n\n        throw new IllegalArgumentException( \"No such layer:\" + layerName );\n    }\n\n    @Override\n    public Stream<? extends Layer> layers()\n    {\n        return layerInstances.stream();\n    }\n\n    @Override\n    public ApplicationDescriptor descriptor()\n    {\n        return applicationModel;\n    }\n\n    // Implementation of MetaInfoHolder\n    @Override\n    public <T> T metaInfo( Class<T> infoType )\n    {\n        return instanceMetaInfo.get( infoType );\n    }\n\n    // Implementation of Activation\n<fim_suffix>    @Override\n    public void activate()\n        throws ActivationException\n    {\n        activation.activate( applicationModel.newActivatorsInstance(), layerInstances );\n    }\n\n    @Override\n    public void passivate()\n        throws PassivationException\n    {\n        activation.passivate();\n    }\n\n    @Override\n    public void registerActivationEventListener( ActivationEventListener listener )\n    {\n        activation.registerActivationEventListener( listener );\n    }\n\n    @Override\n    public void deregisterActivationEventListener( ActivationEventListener listener )\n    {\n        activation.deregisterActivationEventListener( listener );\n    }\n\n    // Other methods\n    void addLayer( LayerInstance layer )\n    {\n        layer.registerActivationEventListener( activation );\n        layerInstances.add( layer );\n    }\n\n    public PolygeneRuntime runtime()\n    {\n        return runtime;\n    }\n\n}<fim_middle>// function below has no smell\n"}