{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.dbutils;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Iterator;\n\n/**\n * <p>\n * Wraps a <code>ResultSet</code> in an <code>Iterator&lt;Object[]&gt;</code>.  This is useful\n * when you want to present a non-database application layer with domain\n * neutral data.\n * </p>\n *\n * <p>\n * This implementation requires the <code>ResultSet.isLast()</code> method\n * to be implemented.\n * </p>\n */\npublic class ResultSetIterator implements Iterator<Object[]> {\n\n    /**\n     * The wrapped <code>ResultSet</code>.\n     */\n    private final ResultSet rs;\n\n    /**\n     * The processor to use when converting a row into an Object[].\n     */\n    private final RowProcessor convert;\n\n    /**\n     * Constructor for ResultSetIterator.\n     * @param rs Wrap this <code>ResultSet</code> in an <code>Iterator</code>.\n     */\n    public ResultSetIterator(final ResultSet rs) {\n        this(rs, new BasicRowProcessor());\n    }\n\n    /**\n     * Constructor for ResultSetIterator.\n     * @param rs Wrap this <code>ResultSet</code> in an <code>Iterator</code>.\n     * @param convert The processor to use when converting a row into an\n     * <code>Object[]</code>.  Defaults to a\n     * <code>BasicRowProcessor</code>.\n     */\n    public ResultSetIterator(final ResultSet rs, final RowProcessor convert) {\n        this.rs = rs;\n        this.convert = convert;\n    }\n\n    /**\n     * Returns true if there are more rows in the ResultSet.\n     * @return boolean <code>true</code> if there are more rows\n     * @throws RuntimeException if an SQLException occurs.\n     */\n<fim_suffix>    @Override\n    public boolean hasNext() {\n        try {\n            return !rs.isLast();\n        } catch (final SQLException e) {\n            rethrow(e);\n            return false;\n        }\n    }\n\n    /**\n     * Returns the next row as an <code>Object[]</code>.\n     * @return An <code>Object[]</code> with the same number of elements as\n     * columns in the <code>ResultSet</code>.\n     * @see java.util.Iterator#next()\n     * @throws RuntimeException if an SQLException occurs.\n     */\n    @Override\n    public Object[] next() {\n        try {\n            rs.next();\n            return this.convert.toArray(rs);\n        } catch (final SQLException e) {\n            rethrow(e);\n            return null;\n        }\n    }\n\n    /**\n     * Deletes the current row from the <code>ResultSet</code>.\n     * @see java.util.Iterator#remove()\n     * @throws RuntimeException if an SQLException occurs.\n     */\n    @Override\n    public void remove() {\n        try {\n            this.rs.deleteRow();\n        } catch (final SQLException e) {\n            rethrow(e);\n        }\n    }\n\n    /**\n     * Rethrow the SQLException as a RuntimeException.  This implementation\n     * creates a new RuntimeException with the SQLException's error message.\n     * @param e SQLException to rethrow\n     * @since DbUtils 1.1\n     */\n    protected void rethrow(final SQLException e) {\n        throw new RuntimeException(e.getMessage());\n    }\n\n    /**\n     * Generates an <code>Iterable</code>, suitable for use in for-each loops.\n     *\n     * @param rs Wrap this <code>ResultSet</code> in an <code>Iterator</code>.\n     * @return an <code>Iterable</code>, suitable for use in for-each loops.\n     */\n    public static Iterable<Object[]> iterable(final ResultSet rs) {\n        return new Iterable<Object[]>() {\n\n            @Override\n            public Iterator<Object[]> iterator() {\n                return new ResultSetIterator(rs);\n            }\n\n        };\n    }\n\n}<fim_middle>// function below has no smell\n"}