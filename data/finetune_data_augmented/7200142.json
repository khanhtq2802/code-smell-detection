{"text": "<fim_prefix>/**\n * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.\n */\npackage com.oracle.bmc.objectstorage.transfer;\n\nimport com.oracle.bmc.io.DuplicatableInputStream;\nimport lombok.AccessLevel;\nimport lombok.Getter;\nimport lombok.NonNull;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nclass ProgressTrackingInputStreamFactory {\n    static InputStream create(final InputStream source, final ProgressTracker progressTracker) {\n        if (progressTracker == null) {\n            return source;\n        }\n        if (source instanceof DuplicatableInputStream) {\n            return new DuplicatableProgressTrackingInputStream(source, progressTracker);\n        }\n        return new ProgressTrackingInputStream(source, progressTracker);\n    }\n\n    @Slf4j\n    @RequiredArgsConstructor(access = AccessLevel.PROTECTED)\n    private static class ProgressTrackingInputStream extends InputStream {\n        @Getter(value = AccessLevel.PROTECTED)\n        private final InputStream source;\n\n        @NonNull\n        @Getter(value = AccessLevel.PROTECTED)\n        private final ProgressTracker progressTracker;\n\n        @Override\n        public long skip(long n) throws IOException {\n            return source.skip(n);\n        }\n\n        @Override\n        public int available() throws IOException {\n            return source.available();\n        }\n\n        @Override\n        public void mark(int readlimit) {\n            source.mark(readlimit);\n        }\n\n        @Override\n        public void reset() throws IOException {\n            source.reset();\n        }\n\n        @Override\n        public boolean markSupported() {\n            return source.markSupported();\n        }\n\n        @Override\n        public int read() throws IOException {\n            final int bytesRead = source.read();\n            checkAndReportBytesRead(bytesRead);\n            return bytesRead;\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n            final int bytesRead = source.read(b, off, len);\n            checkAndReportBytesRead(bytesRead);\n            return bytesRead;\n        }\n\n        @Override\n        public int read(byte[] b) throws IOException {\n            final int bytesRead = source.read(b);\n            checkAndReportBytesRead(bytesRead);\n            return bytesRead;\n        }\n\n        @Override\n        public void close() throws IOException {\n            source.close();\n        }\n\n        private void checkAndReportBytesRead(final int bytesRead) {\n            if (bytesRead != -1) {\n                progressTracker.onBytesRead(bytesRead);\n            }\n        }\n    }\n\n<fim_suffix>    private final static class DuplicatableProgressTrackingInputStream\n            extends ProgressTrackingInputStream implements DuplicatableInputStream {\n\n        private DuplicatableProgressTrackingInputStream(\n                final InputStream source, final ProgressTracker progressTracker) {\n            super(source, progressTracker);\n\n            if (!(source instanceof DuplicatableInputStream)) {\n                throw new IllegalStateException(\"Source MUST be a DuplicatableInputStream\");\n            }\n        }\n\n        /**\n         * The progress tracking input stream resulting from this call will re-use the progress tracker from the parent\n         * progress tracking input stream after resetting it, thus invalidating the progress tracked by the parent\n         * stream until now. To ensure correctness of the progress tracking functionality, do NOT read from the parent\n         * stream after duplicating from it.\n         * @return The duplicated progress tracking input stream.\n         */\n        @Override\n        public InputStream duplicate() {\n            return ProgressTrackingInputStreamFactory.create(\n                    ((DuplicatableInputStream) getSource()).duplicate(),\n                    getProgressTracker().reset());\n        }\n    }\n}<fim_middle>// class below has no smell\n"}