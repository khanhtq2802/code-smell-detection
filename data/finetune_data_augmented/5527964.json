{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.xml.security.keys.content;\n\nimport org.apache.xml.security.exceptions.XMLSecurityException;\nimport org.apache.xml.security.signature.XMLSignatureException;\nimport org.apache.xml.security.transforms.Transforms;\nimport org.apache.xml.security.utils.Constants;\nimport org.apache.xml.security.utils.SignatureElementProxy;\nimport org.apache.xml.security.utils.XMLUtils;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\n<fim_suffix>public class RetrievalMethod extends SignatureElementProxy implements KeyInfoContent {\n\n    /** DSA retrieval */\n    public static final String TYPE_DSA = Constants.SignatureSpecNS + \"DSAKeyValue\";\n    /** RSA retrieval */\n    public static final String TYPE_RSA = Constants.SignatureSpecNS + \"RSAKeyValue\";\n    /** PGP retrieval */\n    public static final String TYPE_PGP = Constants.SignatureSpecNS + \"PGPData\";\n    /** SPKI retrieval */\n    public static final String TYPE_SPKI = Constants.SignatureSpecNS + \"SPKIData\";\n    /** MGMT retrieval */\n    public static final String TYPE_MGMT = Constants.SignatureSpecNS + \"MgmtData\";\n    /** X509 retrieval */\n    public static final String TYPE_X509 = Constants.SignatureSpecNS + \"X509Data\";\n    /** RAWX509 retrieval */\n    public static final String TYPE_RAWX509 = Constants.SignatureSpecNS + \"rawX509Certificate\";\n\n    /**\n     * Constructor RetrievalMethod\n     *\n     * @param element\n     * @param baseURI\n     * @throws XMLSecurityException\n     */\n    public RetrievalMethod(Element element, String baseURI) throws XMLSecurityException {\n        super(element, baseURI);\n    }\n\n    /**\n     * Constructor RetrievalMethod\n     *\n     * @param doc\n     * @param URI\n     * @param transforms\n     * @param Type\n     */\n    public RetrievalMethod(Document doc, String URI, Transforms transforms, String Type) {\n        super(doc);\n\n        setLocalAttribute(Constants._ATT_URI, URI);\n\n        if (Type != null) {\n            setLocalAttribute(Constants._ATT_TYPE, Type);\n        }\n\n        if (transforms != null) {\n            appendSelf(transforms);\n            addReturnToSelf();\n        }\n    }\n\n    /**\n     * Method getURIAttr\n     *\n     * @return the URI attribute\n     */\n    public Attr getURIAttr() {\n        return getElement().getAttributeNodeNS(null, Constants._ATT_URI);\n    }\n\n    /**\n     * Method getURI\n     *\n     * @return URI string\n     */\n    public String getURI() {\n        return getLocalAttribute(Constants._ATT_URI);\n    }\n\n    /** @return the type*/\n    public String getType() {\n        return getLocalAttribute(Constants._ATT_TYPE);\n    }\n\n    /**\n     * Method getTransforms\n     *\n     * @throws XMLSecurityException\n     * @return the transformations\n     */\n    public Transforms getTransforms() throws XMLSecurityException {\n        try {\n            Element transformsElem =\n                XMLUtils.selectDsNode(\n                    getFirstChild(), Constants._TAG_TRANSFORMS, 0);\n\n            if (transformsElem != null) {\n                return new Transforms(transformsElem, this.baseURI);\n            }\n\n            return null;\n        } catch (XMLSignatureException ex) {\n            throw new XMLSecurityException(ex);\n        }\n    }\n\n    /** {@inheritDoc} */\n    public String getBaseLocalName() {\n        return Constants._TAG_RETRIEVALMETHOD;\n    }\n}<fim_middle>// class below has no smell\n"}