{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2009 itemis AG (http://www.itemis.eu) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *******************************************************************************/\npackage org.eclipse.xtext.builder.impl.javasupport;\n\nimport java.util.Set;\n\nimport org.apache.log4j.Logger;\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.core.resources.IWorkspace;\nimport org.eclipse.emf.common.util.WrappedException;\nimport org.eclipse.jdt.core.ElementChangedEvent;\nimport org.eclipse.jdt.core.IElementChangedListener;\nimport org.eclipse.jdt.core.IJavaElementDelta;\nimport org.eclipse.jdt.core.IJavaProject;\nimport org.eclipse.xtext.builder.impl.IBuildFlag;\nimport org.eclipse.xtext.resource.impl.CoarseGrainedChangeEvent;\nimport org.eclipse.xtext.ui.editor.IDirtyStateManager;\nimport org.eclipse.xtext.ui.util.JavaProjectClasspathChangeAnalyzer;\n\nimport com.google.common.base.Predicates;\nimport com.google.common.collect.FluentIterable;\nimport com.google.inject.Inject;\nimport com.google.inject.Singleton;\n\n/**\n * @author Sven Efftinge - Initial contribution and API\n */\n<fim_suffix>@Singleton\npublic class ProjectClasspathChangeListener implements IElementChangedListener {\n\n\tprivate final static Logger log = Logger.getLogger(ProjectClasspathChangeListener.class);\n\n\t@Inject\n\tprivate IWorkspace workspace;\n\t\n\t@Inject\n\t@Deprecated\n\tprivate org.eclipse.xtext.builder.impl.BuildScheduler buildManager;\n\t\n\t@Inject \n\tprivate IDirtyStateManager dirtyStateManager;\n\t\n\t@Inject \n\tprivate JavaProjectClasspathChangeAnalyzer javaProjectClasspathChangeAnalyzer;\n\n\t@Override\n\tpublic void elementChanged(ElementChangedEvent event) {\n\t\tif (workspace != null && workspace.isAutoBuilding()) {\n\t\t\ttry {\n\t\t\t\tif (event.getDelta() != null) {\n\t\t\t\t\tSet<IJavaProject> javaProjects = getJavaProjectsWithClasspathChange(event.getDelta());\n\t\t\t\t\tif (!javaProjects.isEmpty()) {\n\t\t\t\t\t\tSet<IProject> projects = FluentIterable.from(javaProjects)\n\t\t\t\t\t\t\t\t.filter(Predicates.notNull())\n\t\t\t\t\t\t\t\t.transform(IJavaProject::getProject).toSet();\n\t\t\t\t\t\tdirtyStateManager.notifyListeners(new CoarseGrainedChangeEvent());\n\t\t\t\t\t\tscheduleBuildIfNecessary(projects);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (WrappedException e) {\n\t\t\t\tlog.error(e.getCause().getMessage(), e.getCause());\n\t\t\t} catch (RuntimeException e) {\n\t\t\t\tlog.error(e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Deprecated\n\tprivate void scheduleBuildIfNecessary(Set<IProject> projects) {\n\t\tbuildManager.scheduleBuildIfNecessary(projects, IBuildFlag.FORGET_BUILD_STATE_ONLY);\n\t}\n\n\tprotected Set<IJavaProject> getJavaProjectsWithClasspathChange(IJavaElementDelta delta) {\n\t\treturn javaProjectClasspathChangeAnalyzer.getJavaProjectsWithClasspathChange(delta);\n\t}\n\n}<fim_middle>// class below has no smell\n"}