{"text": "<fim_prefix>\n<fim_suffix>@Mojo( name = \"check\", defaultPhase = LifecyclePhase.VERIFY, requiresDependencyResolution = ResolutionScope.TEST,\n       threadSafe = true )\npublic class CheckstyleViolationCheckMojo\n    extends AbstractMojo\n{\n    private static final String JAVA_FILES = \"**\\\\/*.java\";\n    private static final String DEFAULT_CONFIG_LOCATION = \"sun_checks.xml\";\n    /**\n     * Specifies the path and filename to save the Checkstyle output. The format\n     * of the output file is determined by the <code>outputFileFormat</code>\n     * parameter.\n     */\n    @Parameter( property = \"checkstyle.output.file\", defaultValue = \"${project.build.directory}/checkstyle-result.xml\" )\n    private File outputFile;\n    /**\n     * Specifies the format of the output to be used when writing to the output\n     * file. Valid values are \"<code>plain</code>\" and \"<code>xml</code>\".\n     */\n    @Parameter( property = \"checkstyle.output.format\", defaultValue = \"xml\" )\n    private String outputFileFormat;\n    /**\n     * Fail the build on a violation. The goal checks for the violations\n     * after logging them (if {@link #logViolationsToConsole} is {@code true}).\n     * Compare this to {@link #failsOnError} which fails the build immediately\n     * before examining the output log.\n     */\n    @Parameter( property = \"checkstyle.failOnViolation\", defaultValue = \"true\" )\n    private boolean failOnViolation;\n    /**\n     * The maximum number of allowed violations. The execution fails only if the\n     * number of violations is above this limit.\n     *\n     * @since 2.3\n     */\n    @Parameter( property = \"checkstyle.maxAllowedViolations\", defaultValue = \"0\" )\n    private int maxAllowedViolations;\n    /**\n     * The lowest severity level that is considered a violation.\n     * Valid values are \"<code>error</code>\", \"<code>warning</code>\" and \"<code>info</code>\".\n     *\n     * @since 2.2\n     */\n    @Parameter( property = \"checkstyle.violationSeverity\", defaultValue = \"error\" )\n    private String violationSeverity = \"error\";\n    /**\n     * Violations to ignore. This is a comma-separated list, each value being either\n     * a rule name, a rule category or a java package name of rule class.\n     *\n     * @since 2.13\n     */\n    @Parameter( property = \"checkstyle.violation.ignore\" )\n    private String violationIgnore;\n    /**\n     * Skip entire check.\n     *\n     * @since 2.2\n     */\n    @Parameter( property = \"checkstyle.skip\", defaultValue = \"false\" )\n    private boolean skip;\n    /**\n     * Skip Checkstyle execution will only scan the outputFile.\n     *\n     * @since 2.5\n     */\n    @Parameter( property = \"checkstyle.skipExec\", defaultValue = \"false\" )\n    private boolean skipExec;\n    /**\n     * Output the detected violations to the console.\n     *\n     * @since 2.3\n     */\n    @Parameter( property = \"checkstyle.console\", defaultValue = \"true\" )\n    private boolean logViolationsToConsole;\n    /**\n     * Specifies the location of the resources to be used for Checkstyle.\n     *\n     * @since 2.11\n     */\n    @Parameter( defaultValue = \"${project.resources}\", readonly = true )\n    protected List<Resource> resources;\n    /**\n     * Specifies the location of the test resources to be used for Checkstyle.\n     *\n     * @since 2.16\n     */\n    @Parameter( defaultValue = \"${project.testResources}\", readonly = true )\n    protected List<Resource> testResources;\n    /**\n     * <p>\n     * Specifies the location of the XML configuration to use.\n     * <p>\n     * Potential values are a filesystem path, a URL, or a classpath resource.\n     * This parameter expects that the contents of the location conform to the\n     * xml format (Checkstyle <a\n     * href=\"http://checkstyle.sourceforge.net/config.html#Modules\">Checker\n     * module</a>) configuration of rulesets.\n     * <p>\n     * This parameter is resolved as resource, URL, then file. If successfully\n     * resolved, the contents of the configuration is copied into the\n     * <code>${project.build.directory}/checkstyle-configuration.xml</code>\n     * file before being passed to Checkstyle as a configuration.\n     * <p>\n     * There are 2 predefined rulesets.\n     * <ul>\n     * <li><code>sun_checks.xml</code>: Sun Checks.</li>\n     * <li><code>google_checks.xml</code>: Google Checks.</li>\n     * </ul>\n     *\n     * @since 2.5\n     */\n    @Parameter( property = \"checkstyle.config.location\", defaultValue = DEFAULT_CONFIG_LOCATION )\n    private String configLocation;\n    /**\n     * <p>\n     * Specifies the location of the properties file.\n     * <p>\n     * This parameter is resolved as URL, File then resource. If successfully\n     * resolved, the contents of the properties location is copied into the\n     * <code>${project.build.directory}/checkstyle-checker.properties</code>\n     * file before being passed to Checkstyle for loading.\n     * <p>\n     * The contents of the <code>propertiesLocation</code> will be made\n     * available to Checkstyle for specifying values for parameters within the\n     * xml configuration (specified in the <code>configLocation</code>\n     * parameter).\n     *\n     * @since 2.5\n     */\n    @Parameter( property = \"checkstyle.properties.location\" )\n    private String propertiesLocation;\n    /**\n     * Allows for specifying raw property expansion information.\n     */\n    @Parameter\n    private String propertyExpansion;\n    /**\n     * <p>\n     * Specifies the location of the License file (a.k.a. the header file) that\n     * can be used by Checkstyle to verify that source code has the correct\n     * license header.\n     * <p>\n     * You need to use <code>${checkstyle.header.file}</code> in your Checkstyle xml\n     * configuration to reference the name of this header file.\n     * <p>\n     * For instance:\n     * <pre>\n     * &lt;module name=\"RegexpHeader\"&gt;\n     *   &lt;property name=\"headerFile\" value=\"${checkstyle.header.file}\"/&gt;\n     * &lt;/module&gt;\n     * </pre>\n     *\n     * @since 2.0-beta-2\n     */\n    @Parameter( property = \"checkstyle.header.file\", defaultValue = \"LICENSE.txt\" )\n    private String headerLocation;\n    /**\n     * Specifies the cache file used to speed up Checkstyle on successive runs.\n     */\n    @Parameter( defaultValue = \"${project.build.directory}/checkstyle-cachefile\" )\n    private String cacheFile;\n    /**\n     * The key to be used in the properties for the suppressions file.\n     *\n     * @since 2.1\n     */\n    @Parameter( property = \"checkstyle.suppression.expression\", defaultValue = \"checkstyle.suppressions.file\" )\n    private String suppressionsFileExpression;\n    /**\n     * <p>\n     * Specifies the location of the suppressions XML file to use.\n     * <p>\n     * This parameter is resolved as resource, URL, then file. If successfully\n     * resolved, the contents of the suppressions XML is copied into the\n     * <code>${project.build.directory}/checkstyle-suppressions.xml</code> file\n     * before being passed to Checkstyle for loading.\n     * <p>\n     * See <code>suppressionsFileExpression</code> for the property that will\n     * be made available to your Checkstyle configuration.\n     *\n     * @since 2.0-beta-2\n     */\n    @Parameter( property = \"checkstyle.suppressions.location\" )\n    private String suppressionsLocation;\n    /**\n     * The file encoding to use when reading the source files. If the property <code>project.build.sourceEncoding</code>\n     * is not set, the platform default encoding is used. <strong>Note:</strong> This parameter always overrides the\n     * property <code>charset</code> from Checkstyle's <code>TreeWalker</code> module.\n     *\n     * @since 2.2\n     */\n    @Parameter( property = \"encoding\", defaultValue = \"${project.build.sourceEncoding}\" )\n    private String encoding;\n    /**\n     * @since 2.5\n     */\n    @Component( role = CheckstyleExecutor.class, hint = \"default\" )\n    protected CheckstyleExecutor checkstyleExecutor;\n    /**\n     * Output errors to console.\n     */\n    @Parameter( property = \"checkstyle.consoleOutput\", defaultValue = \"false\" )\n    private boolean consoleOutput;\n    /**\n     * The Maven Project Object.\n     */\n    @Parameter ( defaultValue = \"${project}\", readonly = true, required = true )\n    protected MavenProject project;\n    /**\n     * The Plugin Descriptor\n     */<fim_middle>// class below is data class and blob\n"}