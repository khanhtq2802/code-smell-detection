{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.apex.malhar.contrib.parser;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\nimport org.json.simple.parser.ContentHandler;\n\nimport com.google.protobuf.TextFormat.ParseException;\n\n/**\n * A concrete implementation of Json ContentHandler<br>\n * Matches JSON keys set from the {@link StreamingJsonParser }\n *\n * @since 3.5.0\n */\npublic class JsonKeyFinder implements ContentHandler\n{\n  public JsonKeyFinder()\n  {\n    keyValMap = new HashMap<>();\n  }\n\n  public int getKeyCount()\n  {\n    return keyCount;\n  }\n\n  public void setKeyCount(int keyCount)\n  {\n    this.keyCount = keyCount;\n  }\n\n  private Object value;\n  private HashMap<Object, Object> keyValMap;\n  private int keyCount = 0;\n\n  public HashMap<Object, Object> getKeyValMap()\n  {\n    return keyValMap;\n  }\n\n  public void setKeyValMap(HashMap<Object, Object> keyValMap)\n  {\n    this.keyValMap = keyValMap;\n  }\n\n  private boolean found = false;\n  private boolean end = false;\n  private String key;\n\n  private ArrayList<String> matchKeyList;\n\n<fim_suffix>  public void setMatchKeyList(ArrayList<String> matchKeyList)\n  {\n    this.matchKeyList = matchKeyList;\n  }\n\n  public ArrayList<String> getMatchKeyList()\n  {\n    return matchKeyList;\n  }\n\n  public Object getValue()\n  {\n    return value;\n  }\n\n  public boolean isEnd()\n  {\n    return end;\n  }\n\n  public void setFound(boolean found)\n  {\n    this.found = found;\n  }\n\n  public boolean isFound()\n  {\n    return found;\n  }\n\n  public void startJSON() throws ParseException, IOException\n  {\n    found = false;\n    end = false;\n  }\n\n  public void endJSON() throws ParseException, IOException\n  {\n    end = true;\n  }\n\n  public boolean primitive(Object value) throws ParseException, IOException\n  {\n    if (getMatchKeyList().contains(key)) {\n      found = true;\n      this.value = value;\n      keyValMap.put(key, value);\n      key = null;\n      keyCount++;\n      return false;\n    }\n    return true;\n  }\n\n  public boolean startArray() throws ParseException, IOException\n  {\n    return true;\n  }\n\n  public boolean startObject() throws ParseException, IOException\n  {\n    return true;\n  }\n\n  public boolean startObjectEntry(String key) throws ParseException, IOException\n  {\n    this.key = key;\n    return true;\n  }\n\n  public boolean endArray() throws ParseException, IOException\n  {\n    return false;\n  }\n\n  public boolean endObject() throws ParseException, IOException\n  {\n    return true;\n  }\n\n  public boolean endObjectEntry() throws ParseException, IOException\n  {\n    return true;\n  }\n}<fim_middle>// function below has no smell\n"}