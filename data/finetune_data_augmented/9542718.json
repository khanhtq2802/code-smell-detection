{"text": "<fim_prefix>import org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetDelegationTokenRequest;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetDelegationTokenResponse;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetDiagnosticsRequest;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetDiagnosticsResponse;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetJobReportRequest;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetJobReportResponse;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetTaskAttemptCompletionEventsRequest;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetTaskAttemptCompletionEventsResponse;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetTaskAttemptReportRequest;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetTaskAttemptReportResponse;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetTaskReportRequest;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetTaskReportResponse;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetTaskReportsRequest;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetTaskReportsResponse;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.KillJobRequest;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.KillJobResponse;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.KillTaskAttemptRequest;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.KillTaskAttemptResponse;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.KillTaskRequest;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.KillTaskResponse;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.RenewDelegationTokenRequest;\nimport org.apache.hadoop.mapreduce.v2.api.protocolrecords.RenewDelegationTokenResponse;\nimport org.apache.hadoop.mapreduce.v2.api.records.CounterGroup;\nimport org.apache.hadoop.mapreduce.v2.api.records.Counters;\nimport org.apache.hadoop.mapreduce.v2.api.records.JobReport;\nimport org.apache.hadoop.mapreduce.v2.api.records.JobState;\nimport org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptCompletionEvent;\nimport org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId;\nimport org.apache.hadoop.mapreduce.v2.api.records.TaskReport;\nimport org.apache.hadoop.mapreduce.v2.api.records.TaskState;\nimport org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\nimport org.apache.hadoop.yarn.api.records.ApplicationId;\nimport org.apache.hadoop.yarn.api.records.ApplicationReport;\nimport org.apache.hadoop.yarn.api.records.FinalApplicationStatus;\nimport org.apache.hadoop.yarn.api.records.YarnApplicationState;\nimport org.apache.hadoop.yarn.conf.YarnConfiguration;\nimport org.apache.hadoop.yarn.factories.RecordFactory;\nimport org.apache.hadoop.yarn.factory.providers.RecordFactoryProvider;\npublic class NotRunningJob implements MRClientProtocol {\n  private RecordFactory recordFactory =\n    RecordFactoryProvider.getRecordFactory(null);\n  private final JobState jobState;\n  private final ApplicationReport applicationReport;\n  private ApplicationReport getUnknownApplicationReport() {\n    ApplicationId unknownAppId = recordFactory\n        .newRecordInstance(ApplicationId.class);\n    ApplicationAttemptId unknownAttemptId = recordFactory\n        .newRecordInstance(ApplicationAttemptId.class);\n    // Setting AppState to NEW and finalStatus to UNDEFINED as they are never\n    // used for a non running job\n    return ApplicationReport.newInstance(unknownAppId, unknownAttemptId,\n      \"N/A\", \"N/A\", \"N/A\", \"N/A\", 0, null, YarnApplicationState.NEW, \"N/A\",\n      \"N/A\", 0, 0, 0, FinalApplicationStatus.UNDEFINED, null, \"N/A\", 0.0f,\n      YarnConfiguration.DEFAULT_APPLICATION_TYPE, null);\n  }\n  NotRunningJob(ApplicationReport applicationReport, JobState jobState) {\n    this.applicationReport =\n        (applicationReport ==  null) ?\n            getUnknownApplicationReport() : applicationReport;\n    this.jobState = jobState;\n  }\n  @Override\n  public FailTaskAttemptResponse failTaskAttempt(\n      FailTaskAttemptRequest request) throws IOException {\n    FailTaskAttemptResponse resp =\n      recordFactory.newRecordInstance(FailTaskAttemptResponse.class);\n    return resp;\n  }\n  @Override\n  public GetCountersResponse getCounters(GetCountersRequest request)\n      throws IOException {\n    GetCountersResponse resp =\n      recordFactory.newRecordInstance(GetCountersResponse.class);\n    Counters counters = recordFactory.newRecordInstance(Counters.class);\n    counters.addAllCounterGroups(new HashMap<String, CounterGroup>());\n    resp.setCounters(counters);\n    return resp;\n  }\n  @Override\n  public GetDiagnosticsResponse getDiagnostics(GetDiagnosticsRequest request)\n      throws IOException {\n    GetDiagnosticsResponse resp =\n      recordFactory.newRecordInstance(GetDiagnosticsResponse.class);\n    resp.addDiagnostics(\"\");\n    return resp;\n  }\n  @Override\n  public GetJobReportResponse getJobReport(GetJobReportRequest request)\n      throws IOException {\n    JobReport jobReport =\n      recordFactory.newRecordInstance(JobReport.class);\n    jobReport.setJobId(request.getJobId());\n    jobReport.setJobState(jobState);\n    jobReport.setUser(applicationReport.getUser());\n    jobReport.setStartTime(applicationReport.getStartTime());\n    YarnApplicationState state = applicationReport.getYarnApplicationState();\n    if (state == YarnApplicationState.KILLED\n        || state == YarnApplicationState.FAILED\n        || state == YarnApplicationState.FINISHED) {\n      jobReport.setDiagnostics(applicationReport.getDiagnostics());\n    }\n    jobReport.setJobName(applicationReport.getName());\n    jobReport.setTrackingUrl(applicationReport.getTrackingUrl());\n    jobReport.setFinishTime(applicationReport.getFinishTime());\n    GetJobReportResponse resp =\n        recordFactory.newRecordInstance(GetJobReportResponse.class);\n    resp.setJobReport(jobReport);\n    return resp;\n  }\n  @Override\n  public GetTaskAttemptCompletionEventsResponse getTaskAttemptCompletionEvents(\n      GetTaskAttemptCompletionEventsRequest request)\n      throws IOException {\n    GetTaskAttemptCompletionEventsResponse resp =\n      recordFactory.newRecordInstance(GetTaskAttemptCompletionEventsResponse.class);\n    resp.addAllCompletionEvents(new ArrayList<TaskAttemptCompletionEvent>());\n    return resp;\n  }\n  @Override\n  public GetTaskAttemptReportResponse getTaskAttemptReport(\n      GetTaskAttemptReportRequest request) throws IOException {\n    //not invoked by anybody\n    throw new NotImplementedException(\"Code is not implemented\");\n  }\n  @Override\n  public GetTaskReportResponse getTaskReport(GetTaskReportRequest request)\n      throws IOException {\n    GetTaskReportResponse resp =\n      recordFactory.newRecordInstance(GetTaskReportResponse.class);\n    TaskReport report = recordFactory.newRecordInstance(TaskReport.class);\n    report.setTaskId(request.getTaskId());\n    report.setTaskState(TaskState.NEW);\n    Counters counters = recordFactory.newRecordInstance(Counters.class);\n    counters.addAllCounterGroups(new HashMap<String, CounterGroup>());\n    report.setCounters(counters);\n    report.addAllRunningAttempts(new ArrayList<TaskAttemptId>());\n    return resp;\n  }\n  @Override\n  public GetTaskReportsResponse getTaskReports(GetTaskReportsRequest request)\n      throws IOException {\n    GetTaskReportsResponse resp =\n      recordFactory.newRecordInstance(GetTaskReportsResponse.class);\n    resp.addAllTaskReports(new ArrayList<TaskReport>());\n    return resp;\n  }\n  @Override\n  public KillJobResponse killJob(KillJobRequest request)\n      throws IOException {\n    KillJobResponse resp =\n      recordFactory.newRecordInstance(KillJobResponse.class);\n    return resp;\n  }\n  @Override\n  public KillTaskResponse killTask(KillTaskRequest request)\n      throws IOException {\n    KillTaskResponse resp =\n      recordFactory.newRecordInstance(KillTaskResponse.class);\n    return resp;\n  }\n<fim_suffix>  @Override\n  public KillTaskAttemptResponse killTaskAttempt(\n      KillTaskAttemptRequest request) throws IOException {\n    KillTaskAttemptResponse resp =\n      recordFactory.newRecordInstance(KillTaskAttemptResponse.class);\n    return resp;\n  }<fim_middle>// function below has no smell\n"}