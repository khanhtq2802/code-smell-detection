{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.felix.ipojo.manipulator.metadata.annotation.model.parser.replay;\n\nimport org.objectweb.asm.AnnotationVisitor;\nimport org.objectweb.asm.Opcodes;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Record annotation to be replayed later.\n */\npublic class AnnotationRecorder extends AnnotationVisitor implements Replay {\n\n    private List<Replay> m_replays = new ArrayList<Replay>();\n\n<fim_suffix>    public AnnotationRecorder() {\n        super(Opcodes.ASM5);\n    }\n\n    public void visit(final String name, final Object value) {\n        m_replays.add(new Visit(name, value));\n    }\n\n    public void visitEnum(final String name, final String desc, final String value) {\n        m_replays.add(new VisitEnum(name, desc, value));\n    }\n\n    public AnnotationVisitor visitAnnotation(final String name, final String desc) {\n        AnnotationRecorder sub = new AnnotationRecorder();\n        m_replays.add(new VisitAnnotation(name, desc, sub));\n        return sub;\n    }\n\n    public AnnotationVisitor visitArray(final String name) {\n        AnnotationRecorder sub = new AnnotationRecorder();\n        m_replays.add(new VisitArray(name, sub));\n        return sub;\n    }\n\n    public void visitEnd() {\n        m_replays.add(new VisitEnd());\n    }\n\n    public void accept(final AnnotationVisitor visitor) {\n        for (Replay replay : m_replays) {\n            replay.accept(visitor);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}