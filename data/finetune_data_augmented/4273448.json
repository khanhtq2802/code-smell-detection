{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math4.ode.nonstiff;\n\nimport org.apache.commons.math4.Field;\nimport org.apache.commons.math4.RealFieldElement;\nimport org.apache.commons.math4.ode.FieldEquationsMapper;\nimport org.apache.commons.math4.ode.FieldODEStateAndDerivative;\nimport org.apache.commons.math4.util.MathArrays;\n\n/**\n * This class implements a second order Runge-Kutta integrator for\n * Ordinary Differential Equations.\n *\n * <p>This method is an explicit Runge-Kutta method, its Butcher-array\n * is the following one :\n * <pre>\n *    0  |  0    0\n *   1/2 | 1/2   0\n *       |----------\n *       |  0    1\n * </pre>\n *\n * @see EulerFieldIntegrator\n * @see ClassicalRungeKuttaFieldIntegrator\n * @see GillFieldIntegrator\n * @see ThreeEighthesFieldIntegrator\n * @see LutherFieldIntegrator\n *\n * @param <T> the type of the field elements\n * @since 3.6\n */\n\n<fim_suffix>public class MidpointFieldIntegrator<T extends RealFieldElement<T>> extends RungeKuttaFieldIntegrator<T> {\n\n    /** Simple constructor.\n     * Build a midpoint integrator with the given step.\n     * @param field field to which the time and state vector elements belong\n     * @param step integration step\n     */\n    public MidpointFieldIntegrator(final Field<T> field, final T step) {\n        super(field, \"midpoint\", step);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public T[] getC() {\n        final T[] c = MathArrays.buildArray(getField(), 1);\n        c[0] = getField().getOne().multiply(0.5);\n        return c;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public T[][] getA() {\n        final T[][] a = MathArrays.buildArray(getField(), 1, 1);\n        a[0][0] = fraction(1, 2);\n        return a;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public T[] getB() {\n        final T[] b = MathArrays.buildArray(getField(), 2);\n        b[0] = getField().getZero();\n        b[1] = getField().getOne();\n        return b;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected MidpointFieldStepInterpolator<T>\n        createInterpolator(final boolean forward, T[][] yDotK,\n                           final FieldODEStateAndDerivative<T> globalPreviousState,\n                           final FieldODEStateAndDerivative<T> globalCurrentState,\n                           final FieldEquationsMapper<T> mapper) {\n        return new MidpointFieldStepInterpolator<>(getField(), forward, yDotK,\n                                                    globalPreviousState, globalCurrentState,\n                                                    globalPreviousState, globalCurrentState,\n                                                    mapper);\n    }\n\n}<fim_middle>// class below has no smell\n"}