{"text": "<fim_prefix>            @ApiResponse(code = 403, message = \"The requester doesn't have admin permissions\"),\n            @ApiResponse(code = 404, message = \"The function doesn't exist\")\n    })\n    @Produces(MediaType.APPLICATION_JSON)\n    @Path(\"/{tenant}/{namespace}/{functionName}/{instanceId}/stats\")\n    public FunctionStats.FunctionInstanceStats.FunctionInstanceStatsData getFunctionInstanceStats(\n            final @PathParam(\"tenant\") String tenant,\n            final @PathParam(\"namespace\") String namespace,\n            final @PathParam(\"functionName\") String functionName,\n            final @PathParam(\"instanceId\") String instanceId) throws IOException {\n        return functions.getFunctionsInstanceStats(tenant, namespace, functionName, instanceId, uri.getRequestUri());\n    }\n    @GET\n    @ApiOperation(\n            value = \"Lists all Pulsar Functions currently deployed in a given namespace\",\n            response = String.class,\n            responseContainer = \"Collection\"\n    )\n    @ApiResponses(value = {\n            @ApiResponse(code = 400, message = \"Invalid request\"),\n            @ApiResponse(code = 403, message = \"The requester doesn't have admin permissions\")\n    })\n    @Path(\"/{tenant}/{namespace}\")\n    public List<String> listFunctions(final @PathParam(\"tenant\") String tenant,\n                                      final @PathParam(\"namespace\") String namespace) {\n        return functions.listFunctions(tenant, namespace);\n    }\n    @POST\n    @ApiOperation(\n            value = \"Triggers a Pulsar Function with a user-specified value or file data\",\n            response = Message.class\n    )\n    @ApiResponses(value = {\n            @ApiResponse(code = 400, message = \"Invalid request\"),\n            @ApiResponse(code = 404, message = \"The function does not exist\"),\n            @ApiResponse(code = 408, message = \"Request timeout\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")\n    })\n    @Path(\"/{tenant}/{namespace}/{functionName}/trigger\")\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\n    public String triggerFunction(final @PathParam(\"tenant\") String tenant,\n                                  final @PathParam(\"namespace\") String namespace,\n                                  final @PathParam(\"functionName\") String functionName,\n                                  final @FormDataParam(\"data\") String triggerValue,\n                                  final @FormDataParam(\"dataStream\") InputStream triggerStream,\n                                  final @FormDataParam(\"topic\") String topic) {\n        return functions.triggerFunction(tenant, namespace, functionName, triggerValue, triggerStream, topic);\n    }\n    @GET\n    @ApiOperation(\n        value = \"Fetch the current state associated with a Pulsar Function\",\n        response = String.class\n    )\n    @ApiResponses(value = {\n        @ApiResponse(code = 400, message = \"Invalid request\"),\n        @ApiResponse(code = 403, message = \"The requester doesn't have admin permissions\"),\n        @ApiResponse(code = 404, message = \"The key does not exist\"),\n        @ApiResponse(code = 500, message = \"Internal server error\")\n    })\n    @Path(\"/{tenant}/{namespace}/{functionName}/state/{key}\")\n    public FunctionState getFunctionState(final @PathParam(\"tenant\") String tenant,\n                                          final @PathParam(\"namespace\") String namespace,\n                                          final @PathParam(\"functionName\") String functionName,\n                                          final @PathParam(\"key\") String key) {\n        return functions.getFunctionState(tenant, namespace, functionName, key);\n    }\n    @POST\n    @ApiOperation(value = \"Restart function instance\", response = Void.class)\n    @ApiResponses(value = {\n            @ApiResponse(code = 400, message = \"Invalid request\"),\n            @ApiResponse(code = 404, message = \"The function does not exist\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")\n    })\n    @Path(\"/{tenant}/{namespace}/{functionName}/{instanceId}/restart\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void restartFunction(final @PathParam(\"tenant\") String tenant,\n                                    final @PathParam(\"namespace\") String namespace,\n                                    final @PathParam(\"functionName\") String functionName,\n                                    final @PathParam(\"instanceId\") String instanceId) {\n        functions.restartFunctionInstance(tenant, namespace, functionName, instanceId, uri.getRequestUri());\n    }\n    @POST\n    @ApiOperation(value = \"Restart all function instances\", response = Void.class)\n    @ApiResponses(value = {\n            @ApiResponse(code = 400, message = \"Invalid request\"),\n            @ApiResponse(code = 404, message = \"The function does not exist\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")\n    })\n    @Path(\"/{tenant}/{namespace}/{functionName}/restart\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void restartFunction(final @PathParam(\"tenant\") String tenant,\n                                final @PathParam(\"namespace\") String namespace,\n                                final @PathParam(\"functionName\") String functionName) {\n        functions.restartFunctionInstances(tenant, namespace, functionName);\n    }\n    @POST\n    @ApiOperation(value = \"Stop function instance\", response = Void.class)\n    @ApiResponses(value = {\n            @ApiResponse(code = 400, message = \"Invalid request\"),\n            @ApiResponse(code = 404, message = \"The function does not exist\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")\n    })\n    @Path(\"/{tenant}/{namespace}/{functionName}/{instanceId}/stop\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void stopFunction(final @PathParam(\"tenant\") String tenant,\n                             final @PathParam(\"namespace\") String namespace,\n                             final @PathParam(\"functionName\") String functionName,\n                             final @PathParam(\"instanceId\") String instanceId) {\n        functions.stopFunctionInstance(tenant, namespace, functionName, instanceId, uri.getRequestUri());\n    }\n    @POST\n    @ApiOperation(value = \"Stop all function instances\", response = Void.class)\n    @ApiResponses(value = {\n            @ApiResponse(code = 400, message = \"Invalid request\"),\n            @ApiResponse(code = 404, message = \"The function does not exist\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")\n    })\n    @Path(\"/{tenant}/{namespace}/{functionName}/stop\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void stopFunction(final @PathParam(\"tenant\") String tenant,\n                             final @PathParam(\"namespace\") String namespace,\n                             final @PathParam(\"functionName\") String functionName) {\n        functions.stopFunctionInstances(tenant, namespace, functionName);\n    }\n    @POST\n    @ApiOperation(value = \"Start function instance\", response = Void.class)\n    @ApiResponses(value = {\n            @ApiResponse(code = 400, message = \"Invalid request\"),\n            @ApiResponse(code = 404, message = \"The function does not exist\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")\n    })\n    @Path(\"/{tenant}/{namespace}/{functionName}/{instanceId}/start\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void startFunction(final @PathParam(\"tenant\") String tenant,\n                              final @PathParam(\"namespace\") String namespace,\n                              final @PathParam(\"functionName\") String functionName,\n                              final @PathParam(\"instanceId\") String instanceId) {\n        functions.startFunctionInstance(tenant, namespace, functionName, instanceId, uri.getRequestUri());\n    }\n    @POST\n    @ApiOperation(value = \"Start all function instances\", response = Void.class)\n    @ApiResponses(value = {\n            @ApiResponse(code = 400, message = \"Invalid request\"),\n            @ApiResponse(code = 404, message = \"The function does not exist\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")\n    })\n    @Path(\"/{tenant}/{namespace}/{functionName}/start\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public void startFunction(final @PathParam(\"tenant\") String tenant,\n                              final @PathParam(\"namespace\") String namespace,\n                              final @PathParam(\"functionName\") String functionName) {\n        functions.startFunctionInstances(tenant, namespace, functionName);\n    }\n    @POST\n    @ApiOperation(\n            value = \"Uploads Pulsar Function file data\",\n            hidden = true\n    )\n    @Path(\"/upload\")\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\n    public void uploadFunction(final @FormDataParam(\"data\") InputStream uploadedInputStream,\n                               final @FormDataParam(\"path\") String path) {\n        functions.uploadFunction(uploadedInputStream, path);\n    }\n<fim_suffix>    @GET\n    @ApiOperation(\n            value = \"Downloads Pulsar Function file data\",\n            hidden = true\n    )\n    @Path(\"/download\")\n    public StreamingOutput downloadFunction(final @QueryParam(\"path\") String path) {\n        return functions.downloadFunction(path);\n    }<fim_middle>// function below has no smell\n"}