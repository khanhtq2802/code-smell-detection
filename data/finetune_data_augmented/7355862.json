{"text": "<fim_prefix>/*\n * $Header:\n * /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons\n * //httpclient/src/java/org/apache/commons/httpclient/HttpHost.java,v 1.3\n * 2005/01/14 21:16:40 olegk Exp $ $Revision: 510587 $ $Date: 2007-02-22\n * 17:56:08 +0100 (Thu, 22 Feb 2007) $\n *\n * ====================================================================\n *\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with this\n * work for additional information regarding copyright ownership. The ASF\n * licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many individuals on\n * behalf of the Apache Software Foundation. For more information on the Apache\n * Software Foundation, please see <http://www.apache.org/>.\n */\n\npackage com.microsoft.tfs.core.httpclient;\n\nimport com.microsoft.tfs.core.httpclient.protocol.Protocol;\nimport com.microsoft.tfs.core.httpclient.util.LangUtils;\n\n/**\n * Holds all of the variables needed to describe an HTTP connection to a host.\n * This includes remote host, port and protocol.\n *\n * @author <a href=\"mailto:becke@u.washington.edu\">Michael Becke</a>\n * @author <a href=\"mailto:mbowler@GargoyleSoftware.com\">Mike Bowler</a>\n * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n * @author Laura Werner\n *\n * @since 3.0\n */\npublic class HttpHost implements Cloneable {\n\n    /** The host to use. */\n    private String hostname = null;\n\n    /** The port to use. */\n    private int port = -1;\n\n    /** The protocol */\n    private Protocol protocol = null;\n\n    /**\n     * Constructor for HttpHost.\n     *\n     * @param hostname\n     *        the hostname (IP or DNS name). Can be <code>null</code>.\n     * @param port\n     *        the port. Value <code>-1</code> can be used to set default\n     *        protocol port\n     * @param protocol\n     *        the protocol. Value <code>null</code> can be used to set default\n     *        protocol\n     */\n    public HttpHost(final String hostname, final int port, final Protocol protocol) {\n        super();\n        if (hostname == null) {\n            throw new IllegalArgumentException(\"Host name may not be null\");\n        }\n        if (protocol == null) {\n            throw new IllegalArgumentException(\"Protocol may not be null\");\n        }\n        this.hostname = hostname;\n        this.protocol = protocol;\n        if (port >= 0) {\n            this.port = port;\n        } else {\n            this.port = this.protocol.getDefaultPort();\n        }\n    }\n\n    /**\n     * Constructor for HttpHost.\n     *\n     * @param hostname\n     *        the hostname (IP or DNS name). Can be <code>null</code>.\n     * @param port\n     *        the port. Value <code>-1</code> can be used to set default\n     *        protocol port\n     */\n    public HttpHost(final String hostname, final int port) {\n        this(hostname, port, Protocol.getProtocol(\"http\"));\n    }\n\n    /**\n     * Constructor for HttpHost.\n     *\n     * @param hostname\n     *        the hostname (IP or DNS name). Can be <code>null</code>.\n     */\n    public HttpHost(final String hostname) {\n        this(hostname, -1, Protocol.getProtocol(\"http\"));\n    }\n\n    /**\n     * URI constructor for HttpHost.\n     *\n     * @param uri\n     *        the URI.\n     */\n    public HttpHost(final URI uri) throws URIException {\n        this(uri.getHost(), uri.getPort(), Protocol.getProtocol(uri.getScheme()));\n    }\n\n    /**\n     * Copy constructor for HttpHost\n     *\n     * @param httphost\n     *        the HTTP host to copy details from\n     */\n    public HttpHost(final HttpHost httphost) {\n        super();\n        init(httphost);\n    }\n\n    private void init(final HttpHost httphost) {\n        hostname = httphost.hostname;\n        port = httphost.port;\n        protocol = httphost.protocol;\n    }\n\n    /**\n     * @throws CloneNotSupportedException\n     * @see java.lang.Object#clone()\n     */\n<fim_suffix>    @Override\n    public Object clone() throws CloneNotSupportedException {\n        final HttpHost copy = (HttpHost) super.clone();\n        copy.init(this);\n        return copy;\n    }\n\n    /**\n     * Returns the host name (IP or DNS name).\n     *\n     * @return the host name (IP or DNS name), or <code>null</code> if not set\n     */\n    public String getHostName() {\n        return hostname;\n    }\n\n    /**\n     * Returns the port.\n     *\n     * @return the host port, or <code>-1</code> if not set\n     */\n    public int getPort() {\n        return port;\n    }\n\n    /**\n     * Returns the protocol.\n     *\n     * @return The protocol.\n     */\n    public Protocol getProtocol() {\n        return protocol;\n    }\n\n    /**\n     * Return the host uri.\n     *\n     * @return The host uri.\n     */\n    public String toURI() {\n        final StringBuffer buffer = new StringBuffer(50);\n        buffer.append(protocol.getScheme());\n        buffer.append(\"://\");\n        buffer.append(hostname);\n        if (port != protocol.getDefaultPort()) {\n            buffer.append(':');\n            buffer.append(port);\n        }\n        return buffer.toString();\n    }\n\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        final StringBuffer buffer = new StringBuffer(50);\n        buffer.append(toURI());\n        return buffer.toString();\n    }\n\n    /**\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals(final Object o) {\n\n        if (o instanceof HttpHost) {\n            // shortcut if we're comparing with ourselves\n            if (o == this) {\n                return true;\n            }\n            final HttpHost that = (HttpHost) o;\n            if (!hostname.equalsIgnoreCase(that.hostname)) {\n                return false;\n            }\n            if (port != that.port) {\n                return false;\n            }\n            if (!protocol.equals(that.protocol)) {\n                return false;\n            }\n            // everything matches\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        int hash = LangUtils.HASH_SEED;\n        hash = LangUtils.hashCode(hash, hostname);\n        hash = LangUtils.hashCode(hash, port);\n        hash = LangUtils.hashCode(hash, protocol);\n        return hash;\n    }\n\n}<fim_middle>// function below has no smell\n"}