{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cocoon.xml.dom;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParserFactory;\nimport org.apache.cocoon.util.location.Location;\nimport org.apache.cocoon.util.location.LocationAttributes;\nimport org.apache.cocoon.xml.SaxBuffer;\nimport org.apache.commons.lang.BooleanUtils;\nimport org.apache.excalibur.xml.sax.XMLizable;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.CDATASection;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.Text;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXNotSupportedException;\nimport org.xml.sax.XMLReader;\n/**\n * Helper class to create and retrieve information from DOM-trees. It provides\n * some functionality comparable to what's found in Avalon's Configuration\n * objects. These lasts one could however not be used by Cocoon Forms because they\n * don't provide an accurate model of an XML file (no mixed content,\n * no namespaced attributes, no namespace declarations, ...).\n *\n * <p>This class depends specifically on the Xerces DOM implementation to be\n * able to provide information about the location of elements in their source\n * XML file. See the {@link #getLocation(Element)} method.\n * @version $Id$\n */\npublic class DomHelper {\n    protected static final SAXParserFactory saxFactory = SAXParserFactory.newInstance();\n    static {\n        saxFactory.setNamespaceAware(true);\n        saxFactory.setValidating(false);\n    }\n    public static final String XMLNS_URI = XMLConstants.XMLNS_ATTRIBUTE_NS_URI;\n    /**\n     * Creates a W3C Document that remembers the location of each element in\n     * the source file. The location of element nodes can then be retrieved\n     * using the {@link #getLocation(Element)} method.\n     *\n     * @param inputSource the inputSource to read the document from\n     */\n    public static Document parse(InputSource inputSource)\n    throws SAXException, SAXNotSupportedException, IOException {\n        try {\n            final XMLReader parser = saxFactory.newSAXParser().getXMLReader();\n            final DOMBuilder builder = new DOMBuilder();\n            // Enhance the sax stream with location information\n            final ContentHandler locationHandler = new LocationAttributes.Pipe(builder);\n            parser.setContentHandler(locationHandler);\n            parser.parse(inputSource);\n            return builder.getDocument();\n        } catch (ParserConfigurationException pce) {\n            throw new SAXException(pce);\n        }\n    }\n    public static Location getLocationObject(Element element) {\n        return LocationAttributes.getLocation(element);\n    }\n    /**\n     * Retrieves the location of an element node in the source file from which\n     * the Document was created. This will only work for Document's created\n     * with the method {@link #parse(InputSource, ServiceManager)} of this class.\n     */\n    public static String getLocation(Element element) {\n        return LocationAttributes.getLocationString(element);\n    }\n    public static String getSystemIdLocation(Element element) {\n        return LocationAttributes.getURI(element);\n    }\n    public static int getLineLocation(Element element) {\n        return LocationAttributes.getLine(element);\n    }\n    public static int getColumnLocation(Element element) {\n        return LocationAttributes.getColumn(element);\n    }\n    /**\n     * Returns all Element children of an Element that belong to the given\n     * namespace.\n     */\n    public static Element[] getChildElements(Element element, String namespace) {\n        ArrayList elements = new ArrayList();\n        NodeList nodeList = element.getChildNodes();\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            Node node = nodeList.item(i);\n            if (node instanceof Element\n                    && namespace.equals(node.getNamespaceURI()))\n                elements.add(node);\n        }\n        return (Element[])elements.toArray(new Element[elements.size()]);\n    }\n    /**\n     * Returns all Element children of an Element that belong to the given\n     * namespace and have the given local name.\n     */\n    public static Element[] getChildElements(Element element,\n            String namespace, String localName) {\n        ArrayList elements = new ArrayList();\n        NodeList nodeList = element.getChildNodes();\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            Node node = nodeList.item(i);\n            if (node instanceof Element\n                    && namespace.equals(node.getNamespaceURI()) \n                    && localName.equals(node.getLocalName())) {\n                elements.add(node);\n            }\n        }\n        return (Element[])elements.toArray(new Element[elements.size()]);\n    }\n    /**\n     * Returns the first child element with the given namespace and localName,\n     * or null if there is no such element.\n     */\n    public static Element getChildElement(Element element, String namespace, \n            String localName) {\n        Element node = null;\n        try {\n            node = getChildElement(element, namespace, localName, false);\n        } catch (Exception e) {\n            node = null;\n        }\n        return node;\n    }\n    /**\n     * Returns the first child element with the given namespace and localName,\n     * or null if there is no such element and required flag is unset or\n     * throws an Exception if the \"required\" flag is set.\n     */\n    public static Element getChildElement(Element element, String namespace, \n            String localName, boolean required) throws Exception {\n        NodeList nodeList = element.getChildNodes();\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            Node node = nodeList.item(i);\n            if (node instanceof Element\n                    && namespace.equals(node.getNamespaceURI()) \n                    && localName.equals(node.getLocalName())) {\n                return (Element)node;\n            }\n        }\n        if (required) {\n            throw new Exception(\"Missing element \\\"\" + localName +\n                    \"\\\" as child of element \\\"\" + element.getTagName() + \n                    \"\\\" at \" + DomHelper.getLocation(element));\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Returns the value of an element's attribute, but throws an exception\n     * if the element has no such attribute.\n     */\n    public static String getAttribute(Element element, String attributeName)\n            throws Exception {\n        String attrValue = element.getAttribute(attributeName);\n        if (attrValue.length() == 0) {\n            throw new Exception(\"Missing attribute \\\"\" + attributeName + \n                    \"\\\" on element \\\"\" + element.getTagName() + \n                    \"\\\" at \" + getLocation(element));\n        }\n        return attrValue;\n    }\n    /**\n     * Returns the value of an element's attribute, or a default value if the \n     * element has no such attribute.\n     */\n    public static String getAttribute(Element element, String attributeName, \n            String defaultValue) {\n        String attrValue = element.getAttribute(attributeName);\n        if (attrValue.length() == 0) {\n            return defaultValue;\n        }\n        return attrValue;\n    }\n<fim_suffix>    public static int getAttributeAsInteger(Element element, \n            String attributeName) throws Exception {\n        String attrValue = getAttribute(element, attributeName);\n        try {\n            return Integer.parseInt(attrValue);\n        } catch (NumberFormatException e) {\n            throw new Exception(\"Cannot parse the value \\\"\" + attrValue + \n                    \"\\\" as an integer in the attribute \\\"\" + attributeName + \n                    \"\\\" on the element \\\"\" + element.getTagName() + \n                    \"\\\" at \" + getLocation(element));\n        }\n    }\n    public static int getAttributeAsInteger(Element element, \n            String attributeName, int defaultValue) throws Exception {\n        String attrValue = element.getAttribute(attributeName);<fim_middle>// function below has no smell\n"}