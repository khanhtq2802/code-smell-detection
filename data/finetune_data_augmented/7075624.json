{"text": "<fim_prefix>/*\n * Copyright (c) 1997, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage sun.security.x509;\n\nimport java.io.IOException;\n\nimport sun.security.util.*;\n\n/**\n * Represent the CertificatePolicyMap ASN.1 object.\n *\n * @author Amit Kapoor\n * @author Hemma Prafullchandra\n */\n<fim_suffix>public class CertificatePolicyMap {\n    private CertificatePolicyId issuerDomain;\n    private CertificatePolicyId subjectDomain;\n\n    /**\n     * Create a CertificatePolicyMap with the passed CertificatePolicyId's.\n     *\n     * @param issuer the CertificatePolicyId for the issuer CA.\n     * @param subject the CertificatePolicyId for the subject CA.\n     */\n    public CertificatePolicyMap(CertificatePolicyId issuer,\n                                CertificatePolicyId subject) {\n        this.issuerDomain = issuer;\n        this.subjectDomain = subject;\n    }\n\n    /**\n     * Create the CertificatePolicyMap from the DER encoded value.\n     *\n     * @param val the DER encoded value of the same.\n     */\n    public CertificatePolicyMap(DerValue val) throws IOException {\n        if (val.tag != DerValue.tag_Sequence) {\n            throw new IOException(\"Invalid encoding for CertificatePolicyMap\");\n        }\n        issuerDomain = new CertificatePolicyId(val.data.getDerValue());\n        subjectDomain = new CertificatePolicyId(val.data.getDerValue());\n    }\n\n    /**\n     * Return the issuer CA part of the policy map.\n     */\n    public CertificatePolicyId getIssuerIdentifier() {\n        return (issuerDomain);\n    }\n\n    /**\n     * Return the subject CA part of the policy map.\n     */\n    public CertificatePolicyId getSubjectIdentifier() {\n        return (subjectDomain);\n    }\n\n    /**\n     * Returns a printable representation of the CertificatePolicyId.\n     */\n    public String toString() {\n        String s = \"CertificatePolicyMap: [\\n\"\n                 + \"IssuerDomain:\" + issuerDomain.toString()\n                 + \"SubjectDomain:\" + subjectDomain.toString()\n                 + \"]\\n\";\n\n        return (s);\n    }\n\n    /**\n     * Write the CertificatePolicyMap to the DerOutputStream.\n     *\n     * @param out the DerOutputStream to write the object to.\n     * @exception IOException on errors.\n     */\n    public void encode(DerOutputStream out) throws IOException {\n        DerOutputStream tmp = new DerOutputStream();\n\n        issuerDomain.encode(tmp);\n        subjectDomain.encode(tmp);\n        out.write(DerValue.tag_Sequence,tmp);\n    }\n}<fim_middle>// class below is data class\n"}