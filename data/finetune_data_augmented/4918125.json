{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * \n */\n\npackage org.apache.jmeter.protocol.http.sampler;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.jmeter.JMeter;\nimport org.apache.jmeter.util.JMeterUtils;\nimport org.apache.jorphan.util.JOrphanUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Common parent class for HttpClient implementations.\n * \n * Includes system property settings that are handled internally by the Java HTTP implementation,\n * but which need to be explicitly configured in HttpClient implementations. \n */\npublic abstract class HTTPHCAbstractImpl extends HTTPAbstractImpl {\n\n    private static final Logger log = LoggerFactory.getLogger(HTTPHCAbstractImpl.class);\n\n    protected static final String PROXY_SCHEME = System.getProperty(\"http.proxyScheme\",\"http\");\n\n    protected static final String PROXY_HOST = System.getProperty(\"http.proxyHost\",\"\");\n\n    protected static final String NONPROXY_HOSTS = System.getProperty(\"http.nonProxyHosts\",\"\");\n\n    protected static final int PROXY_PORT = Integer.parseInt(System.getProperty(\"http.proxyPort\",\"0\"));\n\n    protected static final boolean PROXY_DEFINED = PROXY_HOST.length() > 0 && PROXY_PORT > 0;\n\n    protected static final String PROXY_USER = JMeterUtils.getPropDefault(JMeter.HTTP_PROXY_USER,\"\");\n\n    protected static final String PROXY_PASS = JMeterUtils.getPropDefault(JMeter.HTTP_PROXY_PASS,\"\");\n\n    protected static final String PROXY_DOMAIN = JMeterUtils.getPropDefault(\"http.proxyDomain\",\"\");\n\n    protected static final InetAddress localAddress;\n\n    protected static final String LOCALHOST;\n\n    protected static final Set<String> nonProxyHostFull = new HashSet<>();\n\n    protected static final List<String> nonProxyHostSuffix = new ArrayList<>();\n\n    protected static final int NON_PROXY_HOST_SUFFIX_SIZE;\n\n    protected static final int CPS_HTTP = JMeterUtils.getPropDefault(\"httpclient.socket.http.cps\", 0);\n    \n    /**\n     * @deprecated Not used\n     */\n    @Deprecated\n    protected static final int CPS_HTTPS = JMeterUtils.getPropDefault(\"httpclient.socket.https.cps\", 0);\n\n    protected static final boolean USE_LOOPBACK = JMeterUtils.getPropDefault(\"httpclient.loopback\", false);\n    \n    protected static final String HTTP_VERSION = JMeterUtils.getPropDefault(\"httpclient.version\", \"1.1\");\n\n    // -1 means not defined\n    protected static final int SO_TIMEOUT = JMeterUtils.getPropDefault(\"httpclient.timeout\", -1);\n    \n    /**\n     * Reset HTTP State when starting a new Thread Group iteration\n     */\n    protected static final boolean RESET_STATE_ON_THREAD_GROUP_ITERATION = \n            JMeterUtils.getPropDefault(\"httpclient.reset_state_on_thread_group_iteration\", true);//$NON-NLS-1$\n\n    /**\n     * Control reuse of cached SSL Context in subsequent iterations\n     * @deprecated use httpclient.reset_state_on_thread_group_iteration instead\n     */\n    @Deprecated\n    protected static final boolean USE_CACHED_SSL_CONTEXT = \n            JMeterUtils.getPropDefault(\"https.use.cached.ssl.context\", false);//$NON-NLS-1$\n\n    /**\n     *  Whether SSL State/Context should be reset\n     *  Shared state for any HC based implementation, because SSL contexts are the same \n     */\n    protected static final ThreadLocal<Boolean> resetStateOnThreadGroupIteration =\n            ThreadLocal.withInitial(() -> Boolean.FALSE);\n    \n    static {\n        if(!StringUtils.isEmpty(JMeterUtils.getProperty(\"httpclient.timeout\"))) { //$NON-NLS-1$\n            log.warn(\"You're using property 'httpclient.timeout' that will soon be deprecated for HttpClient3.1, you should either set \"\n                    + \"timeout in HTTP Request GUI, HTTP Request Defaults or set http.socket.timeout in httpclient.parameters\");\n        }\n        if (NONPROXY_HOSTS.length() > 0) {\n            StringTokenizer s = new StringTokenizer(NONPROXY_HOSTS,\"|\");// $NON-NLS-1$\n            while (s.hasMoreTokens()) {\n                String t = s.nextToken();\n                if (t.indexOf('*') ==0) {// e.g. *.apache.org // $NON-NLS-1$\n                    nonProxyHostSuffix.add(t.substring(1));\n                } else {\n                    nonProxyHostFull.add(t);// e.g. www.apache.org\n                }\n            }\n        }\n        NON_PROXY_HOST_SUFFIX_SIZE=nonProxyHostSuffix.size();\n\n        InetAddress inet = null;\n        String localHostOrIP =\n            JMeterUtils.getPropDefault(\"httpclient.localaddress\",\"\"); // $NON-NLS-1$\n        if (localHostOrIP.length() > 0) {\n            try {\n                inet = InetAddress.getByName(localHostOrIP);\n                log.info(\"Using localAddress {}\", inet.getHostAddress());\n            } catch (UnknownHostException e) {\n                log.warn(e.getLocalizedMessage());\n            }\n        } else {\n            // Get hostname\n            localHostOrIP = JMeterUtils.getLocalHostName();\n        }\n        localAddress = inet;\n        LOCALHOST = localHostOrIP;\n        log.info(\"Local host = {}\", LOCALHOST);\n    }\n\n    protected HTTPHCAbstractImpl(HTTPSamplerBase testElement) {\n        super(testElement);\n    }\n\n<fim_suffix>    protected static boolean isNonProxy(String host){\n        return nonProxyHostFull.contains(host) || isPartialMatch(host);\n    }\n\n    protected static boolean isPartialMatch(String host) {\n        for (int i=0;i<NON_PROXY_HOST_SUFFIX_SIZE;i++){\n            if (host.endsWith(nonProxyHostSuffix.get(i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Is a dynamic proxy defined?\n     *\n     * @param proxyHost the host to check\n     * @param proxyPort the port to check\n     * @return {@code true} iff both ProxyPort and ProxyHost are defined.\n     */\n    protected boolean isDynamicProxy(String proxyHost, int proxyPort){\n        return !JOrphanUtils.isBlank(proxyHost) && proxyPort > 0;        \n    }\n\n    /**\n     * Is a static proxy defined?\n     * \n     * @param host to check against non-proxy hosts\n     * @return {@code true} iff a static proxy has been defined.\n     */\n    protected static boolean isStaticProxy(String host){\n        return PROXY_DEFINED && !isNonProxy(host);\n    }\n    \n    /**\n     * @param value String value to test\n     * @return true if value is null or empty trimmed\n     */\n    protected static boolean isNullOrEmptyTrimmed(String value) {\n        return JOrphanUtils.isBlank(value);\n    }\n}<fim_middle>// function below has no smell\n"}