{"text": "<fim_prefix>package org.cloudfoundry.client.lib.tokens;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\n\nimport org.cloudfoundry.client.lib.domain.CloudInfo;\nimport org.cloudfoundry.client.lib.domain.CloudSpace;\nimport org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;\nimport org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken;\nimport org.springframework.security.oauth2.common.OAuth2AccessToken;\n\nimport com.esotericsoftware.yamlbeans.YamlConfig;\nimport com.esotericsoftware.yamlbeans.YamlReader;\nimport com.esotericsoftware.yamlbeans.YamlWriter;\n\n<fim_suffix>public class TokensFile {\n\n    public String getTokensFilePath() {\n        return System.getProperty(\"user.home\") + \"/.cf/tokens.yml\";\n    }\n\n    public void removeToken(URI target) {\n        TargetInfos targetInfos = getTokensFromFile();\n        targetInfos.remove(target);\n        saveTokensToFile(targetInfos);\n    }\n\n    public OAuth2AccessToken retrieveToken(URI target) {\n        TargetInfos targetInfos = getTokensFromFile();\n\n        if (targetInfos == null) {\n            return null;\n        }\n\n        HashMap<String, String> targetInfo = targetInfos.get(target);\n\n        if (targetInfo == null) {\n            return null;\n        }\n\n        DefaultOAuth2RefreshToken refreshToken = targetInfos.getRefreshToken(targetInfo);\n        DefaultOAuth2AccessToken token = targetInfos.getToken(targetInfo);\n        token.setRefreshToken(refreshToken);\n\n        return token;\n    }\n\n    public void saveToken(URI target, OAuth2AccessToken token, CloudInfo cloudInfo, CloudSpace space) {\n        TargetInfos targetInfos = getTokensFromFile();\n\n        if (targetInfos == null) {\n            targetInfos = new TargetInfos();\n        }\n\n        HashMap<String, String> targetInfo = targetInfos.get(target);\n\n        if (targetInfo == null) {\n            targetInfo = new LinkedHashMap<String, String>();\n        }\n\n        targetInfos.putToken(targetInfo, token);\n        targetInfos.putRefreshToken(targetInfo, token.getRefreshToken());\n        targetInfos.putVersion(targetInfo, cloudInfo.getVersion());\n        targetInfos.putSpace(targetInfo, space.getMeta()\n            .getGuid()\n            .toString());\n        targetInfos.putOrganization(targetInfo, space.getOrganization()\n            .getMeta()\n            .getGuid()\n            .toString());\n\n        targetInfos.put(target, targetInfo);\n\n        saveTokensToFile(targetInfos);\n    }\n\n    protected File getTokensFile() {\n        return new File(getTokensFilePath());\n    }\n\n    protected TargetInfos getTokensFromFile() {\n        final File tokensFile = getTokensFile();\n        try {\n            YamlReader reader = new YamlReader(new FileReader(tokensFile));\n            return reader.read(TargetInfos.class);\n        } catch (FileNotFoundException fnfe) {\n            return new TargetInfos();\n        } catch (IOException e) {\n            throw new RuntimeException(\"An error occurred reading the tokens file at \" + tokensFile.getPath() + \":\" + e.getMessage(), e);\n        }\n\n    }\n\n    protected void saveTokensToFile(TargetInfos targetInfos) {\n        final File tokensFile = getTokensFile();\n        tokensFile.getParentFile()\n            .mkdirs();\n        try {\n            FileWriter fileWriter = new FileWriter(tokensFile);\n\n            YamlConfig config = new YamlConfig();\n            config.writeConfig.setAlwaysWriteClassname(false);\n            config.writeConfig.setWriteRootElementTags(false);\n            config.writeConfig.setWriteRootTags(false);\n            config.writeConfig.setExplicitFirstDocument(true);\n            YamlWriter yamlWriter = new YamlWriter(fileWriter, config);\n\n            yamlWriter.write(targetInfos);\n\n            yamlWriter.close();\n            fileWriter.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"An error occurred writing the tokens file at \" + tokensFile.getPath() + \":\" + e.getMessage(), e);\n        }\n    }\n}<fim_middle>// class below is blob\n"}