{"text": "<fim_prefix>/*\n * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\npackage software.amazon.awssdk.utils;\n\nimport static software.amazon.awssdk.utils.StringUtils.lowerCase;\n\nimport java.util.function.Supplier;\nimport org.slf4j.LoggerFactory;\nimport software.amazon.awssdk.annotations.SdkProtectedApi;\n\n@SdkProtectedApi\npublic final class Logger {\n    private final org.slf4j.Logger log;\n\n    Logger(org.slf4j.Logger log) {\n        this.log = log;\n    }\n\n    public org.slf4j.Logger logger() {\n        return log;\n    }\n\n    /**\n     * Checks if info is enabled and if so logs the supplied message\n     * @param msg - supplier for the log message\n     */\n<fim_suffix>    public void info(Supplier<String> msg) {\n        if (log.isInfoEnabled()) {\n            log.info(msg.get());\n        }\n    }\n\n    /**\n     * Checks if info is enabled and if so logs the supplied message and exception\n     * @param msg - supplier for the log message\n     * @param throwable - a throwable to log\n     */\n    public void info(Supplier<String> msg, Throwable throwable) {\n        if (log.isInfoEnabled()) {\n            log.info(msg.get(), throwable);\n        }\n    }\n\n    /**\n     * Checks if error is enabled and if so logs the supplied message\n     * @param msg - supplier for the log message\n     */\n    public void error(Supplier<String> msg) {\n        if (log.isErrorEnabled()) {\n            log.error(msg.get());\n        }\n    }\n\n    /**\n     * Checks if error is enabled and if so logs the supplied message and exception\n     * @param msg - supplier for the log message\n     * @param throwable - a throwable to log\n     */\n    public void error(Supplier<String> msg, Throwable throwable) {\n        if (log.isErrorEnabled()) {\n            log.error(msg.get(), throwable);\n        }\n    }\n\n    /**\n     * Checks if debug is enabled and if so logs the supplied message\n     * @param msg - supplier for the log message\n     */\n    public void debug(Supplier<String> msg) {\n        if (log.isDebugEnabled()) {\n            log.debug(msg.get());\n        }\n    }\n\n    /**\n     * Checks if debug is enabled and if so logs the supplied message and exception\n     * @param msg - supplier for the log message\n     * @param throwable - a throwable to log\n     */\n    public void debug(Supplier<String> msg, Throwable throwable) {\n        if (log.isDebugEnabled()) {\n            log.debug(msg.get(), throwable);\n        }\n    }\n\n    /**\n     * Checks if warn is enabled and if so logs the supplied message\n     * @param msg - supplier for the log message\n     */\n    public void warn(Supplier<String> msg) {\n        if (log.isWarnEnabled()) {\n            log.warn(msg.get());\n        }\n    }\n\n    /**\n     * Checks if warn is enabled and if so logs the supplied message and exception\n     * @param msg - supplier for the log message\n     * @param throwable - a throwable to log\n     */\n    public void warn(Supplier<String> msg, Throwable throwable) {\n        if (log.isWarnEnabled()) {\n            log.warn(msg.get(), throwable);\n        }\n    }\n\n    /**\n     * Checks if trace is enabled and if so logs the supplied message\n     * @param msg - supplier for the log message\n     */\n    public void trace(Supplier<String> msg) {\n        if (log.isTraceEnabled()) {\n            log.trace(msg.get());\n        }\n    }\n\n    /**\n     * Checks if trace is enabled and if so logs the supplied message and exception\n     * @param msg - supplier for the log message\n     * @param throwable - a throwable to log\n     */\n    public void trace(Supplier<String> msg, Throwable throwable) {\n        if (log.isTraceEnabled()) {\n            log.trace(msg.get(), throwable);\n        }\n    }\n\n    /**\n     * Determines if the log-level passed is enabled\n     * @param logLevel a string representation of the log level, e.g. \"debug\"\n     * @return whether or not that level is enable\n     */\n    public boolean isLoggingLevelEnabled(String logLevel) {\n        String lowerLogLevel = lowerCase(logLevel);\n        switch (lowerLogLevel) {\n            case \"debug\":\n                return log.isDebugEnabled();\n            case \"trace\":\n                return log.isTraceEnabled();\n            case \"error\":\n                return log.isErrorEnabled();\n            case \"info\":\n                return log.isInfoEnabled();\n            case \"warn\":\n                return log.isWarnEnabled();\n            default:\n                throw new IllegalArgumentException(\"Unknown log level: \" + lowerLogLevel);\n        }\n    }\n\n    /**\n     * Static factory to get a logger instance for a given class\n     * @param clz - class to get the logger for\n     * @return a Logger instance\n     */\n    public static Logger loggerFor(Class<?> clz) {\n        return new Logger(LoggerFactory.getLogger(clz));\n    }\n\n    /**\n     * Static factory to get a logger instance with a specific name.\n     * @param name - The name of the logger to create\n     * @return a Logger instance\n     */\n    public static Logger loggerFor(String name) {\n        return new Logger(LoggerFactory.getLogger(name));\n    }\n}<fim_middle>// function below has no smell\n"}