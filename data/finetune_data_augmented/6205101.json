{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2009, 2015 Kiel University and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Kiel University - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.elk.core.service;\n\nimport org.eclipse.elk.graph.properties.IPropertyHolder;\nimport org.eclipse.ui.IWorkbenchPart;\n\n/**\n * Interface for connectors of diagram layout. A diagram layout connector is responsible for transforming\n * the diagram contained in a workbench part into a layout graph, which is an instance of the\n * KGraph meta model. Furthermore it must handle the transfer of concrete layout data from the\n * layout graph back to the diagram after a layout has been computed.\n * \n * @author msp\n */\n<fim_suffix>public interface IDiagramLayoutConnector {\n\n    /**\n     * Build a KGraph instance for the given diagram. The resulting layout graph should reflect\n     * the structure of the original diagram. All graph elements must have\n     * {@link org.eclipse.elk.core.klayoutdata.KShapeLayout KShapeLayouts} or\n     * {@link org.eclipse.elk.core.klayoutdata.KEdgeLayout KEdgeLayouts} attached,\n     * and their modification flags must be set to {@code false}.\n     * \n     * <p>At least one of the two parameters must be non-null.</p>\n     * \n     * <p>This method is usually called from the UI thread.</p>\n     * \n     * @param workbenchPart\n     *            the workbench part for which layout is performed, or {@code null} if there\n     *            is no workbench part for the diagram\n     * @param diagramPart\n     *            the parent object for which layout is performed, or {@code null} if the\n     *            whole diagram shall be layouted\n     * @return a layout graph mapping, or {@code null} if the given workbench part or diagram part\n     *            is not supported\n     */\n    LayoutMapping buildLayoutGraph(IWorkbenchPart workbenchPart, Object diagramPart);\n\n    /**\n     * Apply the computed layout back to the diagram. Graph elements whose modification flag\n     * was not set during layout should be ignored.\n     * \n     * <p>This method is usually called from the UI thread.</p>\n     * \n     * @param mapping a layout mapping that was created by this layout connector\n     * @param settings general settings for applying layout, e.g. whether to use animation\n     */\n    void applyLayout(LayoutMapping mapping, IPropertyHolder settings);\n    \n}<fim_middle>// class below has no smell\n"}