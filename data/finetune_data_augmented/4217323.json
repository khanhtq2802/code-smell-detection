{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.chain2.web.faces;\n\nimport org.apache.commons.chain2.web.WebContextBase;\n\nimport javax.faces.context.FacesContext;\nimport javax.servlet.http.Cookie;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.Map;\n\n/**\n * <p>Concrete implementation of {@link org.apache.commons.chain2.web.WebContext} suitable for use in\n * JavaServer Faces apps.  The abstract methods are mapped to the appropriate\n * collections of the underlying <code>FacesContext</code> instance\n * that is passed to the constructor (or the initialize method).</p>\n *\n * @version $Id$\n */\npublic class FacesWebContext extends WebContextBase {\n\n    // ------------------------------------------------------------ Constructors\n\n    /**\n     *\n     */\n    private static final long serialVersionUID = 20120724L;\n\n    /**\n     * <p>Construct an uninitialized {@link FacesWebContext} instance.</p>\n     */\n    public FacesWebContext() {\n    }\n\n    /**\n     * <p>Construct a {@link FacesWebContext} instance that is initialized\n     * with the specified JavaServer Faces API objects.</p>\n     *\n     * @param context The <code>FacesContext</code> for this request\n     */\n<fim_suffix>    public FacesWebContext(FacesContext context) {\n        initialize(context);\n    }\n\n    // ------------------------------------------------------ Instance Variables\n\n    /**\n     * <p>The <code>FacesContext</code> instance for the request represented\n     * by this {@link org.apache.commons.chain2.web.WebContext}.</p>\n     */\n    private FacesContext context = null;\n\n    // ---------------------------------------------------------- Public Methods\n\n    /**\n     * <p>Return the <code>FacesContext</code> instance for the request\n     * associated with this {@link FacesWebContext}.</p>\n     *\n     * @return The <code>FacesContext</code> for this request\n     */\n    public FacesContext getContext() {\n        return (this.context);\n    }\n\n    /**\n     * <p>Initialize (or reinitialize) this {@link FacesWebContext} instance\n     * for the specified JavaServer Faces API objects.</p>\n     *\n     * @param context The <code>FacesContext</code> for this request\n     */\n    public void initialize(FacesContext context) {\n        this.context = context;\n    }\n\n    /**\n     * <p>Release references to allocated resources acquired in\n     * <code>initialize()</code> of via subsequent processing.  After this\n     * method is called, subsequent calls to any other method than\n     * <code>initialize()</code> will return undefined results.</p>\n     */\n    public void release() {\n        context = null;\n    }\n\n    // ------------------------------------------------------ WebContextBase Methods\n\n    /**\n     * See the {@link org.apache.commons.chain2.web.WebContext}'s Javadoc.\n     *\n     * @return Application scope Map.\n     */\n    public Map<String, Object> getApplicationScope() {\n        @SuppressWarnings(\"unchecked\") // Assume faces is following contract\n        Map<String, Object> scope = context.getExternalContext().getApplicationMap();\n        return (scope);\n    }\n\n    /**\n     * See the {@link org.apache.commons.chain2.web.WebContext}'s Javadoc.\n     *\n     * @return Header values Map.\n     */\n    public Map<String, String> getHeader() {\n        @SuppressWarnings(\"unchecked\") // Assume faces is following contract\n        Map<String, String> headers = context.getExternalContext().getRequestHeaderMap();\n\n        return (headers);\n    }\n\n    /**\n     * See the {@link org.apache.commons.chain2.web.WebContext}'s Javadoc.\n     *\n     * @return Header values Map.\n     */\n    public Map<String, String[]> getHeaderValues() {\n        @SuppressWarnings(\"unchecked\") // Assume faces is following contract\n        Map<String, String[]> headerValues = context.getExternalContext().getRequestHeaderValuesMap();\n\n        return (headerValues);\n    }\n\n    /**\n     * See the {@link org.apache.commons.chain2.web.WebContext}'s Javadoc.\n     *\n     * @return Initialization parameter Map.\n     */\n    public Map<String, String> getInitParam() {\n        @SuppressWarnings(\"unchecked\") // Assume faces is following contract\n        Map<String, String> initParams = context.getExternalContext().getInitParameterMap();\n\n        return (initParams);\n    }\n\n    /**\n     * See the {@link org.apache.commons.chain2.web.WebContext}'s Javadoc.\n     *\n     * @return Request parameter Map.\n     */\n    public Map<String, String> getParam() {\n        @SuppressWarnings(\"unchecked\")\n        Map<String, String> params = context.getExternalContext().getRequestParameterMap();\n\n        return (params);\n    }\n\n    /**\n     * See the {@link org.apache.commons.chain2.web.WebContext}'s Javadoc.\n     *\n     * @return Request parameter Map.\n     */\n    public Map<String, String[]> getParamValues() {\n        @SuppressWarnings(\"unchecked\") // Assume faces is following contract\n        Map<String, String[]> paramValues = context.getExternalContext().getRequestParameterValuesMap();\n\n        return (paramValues);\n    }\n\n    /**\n     * See the {@link org.apache.commons.chain2.web.WebContext}'s Javadoc.\n     *\n     * @return Map of Cookies.\n     * @since Chain 1.1\n     */\n    public Map<String, Cookie> getCookies() {\n        @SuppressWarnings(\"unchecked\") // Assume faces is following contract\n        Map<String, Object> facesCookieMap = context.getExternalContext().getRequestCookieMap();\n\n        /* This ugly hack was done because the faces API implements\n         * the cookie collection using <String, Object> instead of <String, Cookie>.\n         * So we painstakingly check for type safety and cast it as a Map<String, Cookie>.\n         */\n        Iterator<Object> itr = facesCookieMap.values().iterator();\n\n        if (itr.hasNext()) {\n            Object cookieObj = itr.next();\n\n            if (cookieObj instanceof Cookie) {\n                // See comment above about type safety check\n                @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n                Map<String, Cookie> cookieMap = Collections.checkedMap(\n                        (Map) facesCookieMap, String.class, Cookie.class);\n\n                return cookieMap;\n            } else {\n                String msg = \"Could not cast cookie Map into <String, Cookie>. \" +\n                        \"Actual Cookie type is: \" + cookieObj.getClass().toString();\n                throw new ClassCastException(msg);\n            }\n        } else {\n            return Collections.emptyMap();\n        }\n    }\n\n    /**\n     * See the {@link org.apache.commons.chain2.web.WebContext}'s Javadoc.\n     *\n     * @return Request scope Map.\n     */\n    public Map<String, Object> getRequestScope() {\n        @SuppressWarnings(\"unchecked\")  // Assume faces is following contract\n        Map<String, Object> scope = context.getExternalContext().getRequestMap();\n\n        return (scope);\n    }\n\n    /**\n     * See the {@link org.apache.commons.chain2.web.WebContext}'s Javadoc.\n     *\n     * @return Session scope Map.\n     */\n    public Map<String, Object> getSessionScope() {\n        @SuppressWarnings(\"unchecked\")  // Assume faces is following contract\n        Map<String, Object> scope = context.getExternalContext().getSessionMap();\n\n        return (scope);\n    }\n\n}<fim_middle>// function below has no smell\n"}