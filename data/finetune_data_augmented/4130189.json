{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.calcite.sql.validate;\n\nimport org.apache.calcite.sql.SqlCall;\nimport org.apache.calcite.sql.SqlNode;\nimport org.apache.calcite.util.Litmus;\nimport org.apache.calcite.util.Pair;\n\nimport java.util.List;\n\n/**\n * The name-resolution scope of a OVER clause. The objects visible are those in\n * the parameters found on the left side of the over clause, and objects\n * inherited from the parent scope.\n *\n * <p>This object is both a {@link SqlValidatorScope} only. In the query</p>\n *\n * <blockquote>\n * <pre>SELECT name FROM (\n *     SELECT *\n *     FROM emp OVER (\n *         ORDER BY empno\n *         RANGE BETWEEN 2 PRECEDING AND 2 FOLLOWING))\n * </pre>\n * </blockquote>\n *\n * <p>We need to use the {@link OverScope} as a {@link SqlValidatorNamespace}\n * when resolving names used in the window specification.</p>\n */\npublic class OverScope extends ListScope {\n  //~ Instance fields --------------------------------------------------------\n\n  private final SqlCall overCall;\n\n  //~ Constructors -----------------------------------------------------------\n\n  /**\n   * Creates a scope corresponding to a SELECT clause.\n   *\n   * @param parent   Parent scope, or null\n   * @param overCall Call to OVER operator\n   */\n  OverScope(\n      SqlValidatorScope parent,\n      SqlCall overCall) {\n    super(parent);\n    this.overCall = overCall;\n  }\n\n  //~ Methods ----------------------------------------------------------------\n\n<fim_suffix>  public SqlNode getNode() {\n    return overCall;\n  }\n\n  public SqlMonotonicity getMonotonicity(SqlNode expr) {\n    SqlMonotonicity monotonicity = expr.getMonotonicity(this);\n    if (monotonicity != SqlMonotonicity.NOT_MONOTONIC) {\n      return monotonicity;\n    }\n\n    if (children.size() == 1) {\n      final SqlValidatorNamespace child = children.get(0).namespace;\n      final List<Pair<SqlNode, SqlMonotonicity>> monotonicExprs =\n          child.getMonotonicExprs();\n      for (Pair<SqlNode, SqlMonotonicity> pair : monotonicExprs) {\n        if (expr.equalsDeep(pair.left, Litmus.IGNORE)) {\n          return pair.right;\n        }\n      }\n    }\n    return super.getMonotonicity(expr);\n  }\n}\n\n// End OverScope.java<fim_middle>// function below has no smell\n"}