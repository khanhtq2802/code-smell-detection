{"text": "<fim_prefix>/*\n * Copyright (c) 2018 VMware, Inc. All Rights Reserved.\n *\n * This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n * You may not use this product except in compliance with the License.\n *\n * This product may include a number of subcomponents with separate copyright notices\n * and license terms. Your use of these subcomponents is subject to the terms and\n * conditions of the subcomponent's license, as noted in the LICENSE file.\n */\n\npackage com.vmware.photon.controller.model.resources;\n\nimport static java.util.Collections.singleton;\nimport static java.util.Collections.singletonList;\n\nimport static com.vmware.xenon.common.UriUtils.buildUriPath;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport com.esotericsoftware.kryo.serializers.VersionFieldSerializer.Since;\n\nimport io.netty.util.internal.StringUtil;\n\nimport com.vmware.photon.controller.model.ServiceUtils;\nimport com.vmware.photon.controller.model.UriPaths;\nimport com.vmware.photon.controller.model.constants.ReleaseConstants;\nimport com.vmware.xenon.common.Operation;\nimport com.vmware.xenon.common.ServiceDocumentDescription.PropertyIndexingOption;\nimport com.vmware.xenon.common.ServiceDocumentDescription.PropertyUsageOption;\nimport com.vmware.xenon.common.StatefulService;\nimport com.vmware.xenon.common.Utils;\nimport com.vmware.xenon.services.common.TenantService;\n\n/**\n * Represents an image.\n */\npublic class ImageService extends StatefulService {\n\n    public static final String FACTORY_LINK = UriPaths.RESOURCES_IMAGES;\n\n    /**\n     * Represents the state of an image.\n     */\n    public static class ImageState extends ResourceState {\n\n        public static final String FIELD_NAME_DESCRIPTION = \"description\";\n        public static final String FIELD_NAME_OS_FAMILY = \"osFamily\";\n        public static final String FIELD_NAME_ENDPOINT_TYPE = \"endpointType\";\n\n        /**\n         * Represents the properties of a data disk.\n         */\n        public static class DiskConfiguration {\n            /**\n             * Identifier of the disk.\n             */\n            public String id;\n\n            /**\n             * Size of the disk in Mega Bytes.\n             */\n            public Integer capacityMBytes;\n\n            /**\n             * Persistence capability of the disk across reboots.\n             */\n            public Boolean persistent;\n\n            /**\n             * Encryption status of the disk.\n             */\n            public Boolean encrypted;\n\n            /**\n             * Map to capture endpoint specific disk properties.\n             */\n            public Map<String,String> properties;\n        }\n\n        /**\n         * Captures the properties of each disk specified in the image.\n         */\n        @Since(ReleaseConstants.RELEASE_VERSION_0_6_17)\n        @UsageOption(option = PropertyUsageOption.AUTO_MERGE_IF_NOT_NULL)\n        public List<DiskConfiguration> diskConfigs;\n\n        /**\n         * User-friendly description of the image.\n         */\n        @UsageOption(option = PropertyUsageOption.AUTO_MERGE_IF_NOT_NULL)\n        @PropertyOptions(indexing = PropertyIndexingOption.CASE_INSENSITIVE)\n        public String description;\n\n        /**\n         * The OS family of the image. The value, if provided, might be 'Linux', 'Windows', etc.\n         */\n        @UsageOption(option = PropertyUsageOption.AUTO_MERGE_IF_NOT_NULL)\n        @PropertyOptions(indexing = PropertyIndexingOption.CASE_INSENSITIVE)\n        public String osFamily;\n\n        /**\n         * Optional link to the {@code EndpointState} the image belongs to. Leave blank to indicate\n         * the image is public/global for all end-points of the same type. Either this property or\n         * {@code #endpointType} property should be set.\n         */\n        @UsageOption(option = PropertyUsageOption.AUTO_MERGE_IF_NOT_NULL)\n        @UsageOption(option = PropertyUsageOption.LINK)\n        public String endpointLink;\n\n        /**\n         * Optional type of the end-points the image is publicly/globally available. Leave blank to\n         * indicate the image is private/specific for this end-point. Either this property or\n         * {@code #endpointLink} property should be set.\n         */\n        @UsageOption(option = PropertyUsageOption.AUTO_MERGE_IF_NOT_NULL)\n        public String endpointType;\n\n        /**\n         * Non-empty {@code #endpointType} indicates Public image.\n         */\n        public final boolean isPublicImage() {\n            return !StringUtil.isNullOrEmpty(this.endpointType);\n        }\n\n        /**\n         * Non-empty {@code #endpointLink} indicates Private image.\n         */\n<fim_suffix>        public final boolean isPrivateImage() {\n            return !StringUtil.isNullOrEmpty(this.endpointLink);\n        }\n    }\n\n    public ImageService() {\n        super(ImageState.class);\n\n        super.toggleOption(ServiceOption.PERSISTENCE, true);\n        super.toggleOption(ServiceOption.REPLICATION, true);\n        super.toggleOption(ServiceOption.OWNER_SELECTION, true);\n        super.toggleOption(ServiceOption.IDEMPOTENT_POST, true);\n\n        super.toggleOption(ServiceOption.ON_DEMAND_LOAD, true);\n    }\n\n    @Override\n    public void handleCreate(Operation createOp) {\n        if (checkForValid(createOp)) {\n            super.handleCreate(createOp);\n        }\n    }\n\n    @Override\n    public void handlePut(Operation putOp) {\n        if (checkForValid(putOp)) {\n            super.handlePut(putOp);\n        }\n    }\n\n    @Override\n    public void handlePatch(Operation patchOp) {\n        ResourceUtils.handlePatch(\n                patchOp, getState(patchOp), getStateDescription(), ImageState.class, null);\n    }\n\n    /**\n     * Common validation login.\n     */\n    private boolean checkForValid(Operation op) {\n        if (checkForBody(op)) {\n            try {\n                ImageState imageState = op.getBody(ImageState.class);\n\n                Utils.validateState(getStateDescription(), imageState);\n\n                if (!imageState.isPrivateImage() && !imageState.isPublicImage()) {\n                    throw new IllegalArgumentException(\n                            \"Either \" + ImageState.class.getSimpleName()\n                                    + \".\" + ImageState.FIELD_NAME_ENDPOINT_TYPE +\n                                    \" or \" + ImageState.class.getSimpleName()\n                                    + \".\" + ImageState.FIELD_NAME_ENDPOINT_LINK +\n                                    \" must be set.\");\n                }\n                if (imageState.isPrivateImage() && imageState.isPublicImage()) {\n                    throw new IllegalArgumentException(\n                            \"Both \" + ImageState.class.getSimpleName()\n                                    + \".\" + ImageState.FIELD_NAME_ENDPOINT_TYPE +\n                                    \" and \" + ImageState.class.getSimpleName()\n                                    + \".\" + ImageState.FIELD_NAME_ENDPOINT_LINK +\n                                    \" cannot be set.\");\n                }\n\n                return true;\n\n            } catch (Throwable t) {\n                op.fail(t);\n                return false;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public ImageState getDocumentTemplate() {\n\n        ImageState image = (ImageState) super.getDocumentTemplate();\n        ServiceUtils.setRetentionLimit(image);\n\n        image.id = \"endpoint-specific-image-id\";\n        image.name = \"endpoint-specific-image-name\";\n        image.description = \"user-friendly-image-description\";\n        image.osFamily = \"Linux\";\n        image.regionId = \"endpoint-specific-image-region-id\";\n\n        image.endpointLink = buildUriPath(EndpointService.FACTORY_LINK, \"the-A-cloud\");\n        image.groupLinks = singleton(\n                buildUriPath(ResourceGroupService.FACTORY_LINK, \"the-A-folder\"));\n        image.tenantLinks = singletonList(buildUriPath(TenantService.FACTORY_LINK, \"the-A-tenant\"));\n\n        return image;\n    }\n}<fim_middle>// function below has no smell\n"}