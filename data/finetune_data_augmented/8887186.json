{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.hive.hcatalog.messaging;\n\nimport org.apache.hadoop.hive.common.classification.InterfaceAudience;\nimport org.apache.hadoop.hive.common.classification.InterfaceStability;\nimport org.apache.hive.hcatalog.common.HCatConstants;\n\n/**\n * Class representing messages emitted when Metastore operations are done.\n * (E.g. Creation and deletion of databases, tables and partitions.)\n */\n<fim_suffix>@InterfaceAudience.Public\n@InterfaceStability.Stable\npublic abstract class HCatEventMessage {\n\n  /**\n   * Enumeration of all supported types of Metastore operations.\n   */\n  public static enum EventType {\n\n    CREATE_DATABASE(HCatConstants.HCAT_CREATE_DATABASE_EVENT),\n    DROP_DATABASE(HCatConstants.HCAT_DROP_DATABASE_EVENT),\n    CREATE_TABLE(HCatConstants.HCAT_CREATE_TABLE_EVENT),\n    DROP_TABLE(HCatConstants.HCAT_DROP_TABLE_EVENT),\n    ADD_PARTITION(HCatConstants.HCAT_ADD_PARTITION_EVENT),\n    DROP_PARTITION(HCatConstants.HCAT_DROP_PARTITION_EVENT),\n    ALTER_TABLE(HCatConstants.HCAT_ALTER_TABLE_EVENT),\n    ALTER_PARTITION(HCatConstants.HCAT_ALTER_PARTITION_EVENT),\n    INSERT(HCatConstants.HCAT_INSERT_EVENT),\n    CREATE_FUNCTION(HCatConstants.HCAT_CREATE_FUNCTION_EVENT),\n    DROP_FUNCTION(HCatConstants.HCAT_DROP_FUNCTION_EVENT);\n\n    private String typeString;\n\n    EventType(String typeString) {\n      this.typeString = typeString;\n    }\n\n    @Override\n    public String toString() { return typeString; }\n  }\n\n  protected EventType eventType;\n\n  protected HCatEventMessage(EventType eventType) {\n    this.eventType = eventType;\n  }\n\n  public EventType getEventType() {\n    return eventType;\n  }\n\n  /**\n   * Getter for HCatalog Server's URL.\n   * (This is where the event originates from.)\n   * @return HCatalog Server's URL (String).\n   */\n  public abstract String getServer();\n\n  /**\n   * Getter for the Kerberos principal of the HCatalog service.\n   * @return HCatalog Service Principal (String).\n   */\n  public abstract String getServicePrincipal();\n\n  /**\n   * Getter for the name of the Database on which the Metastore operation is done.\n   * @return Database-name (String).\n   */\n  public abstract String getDB();\n\n  /**\n   * Getter for the timestamp associated with the operation.\n   * @return Timestamp (Long - seconds since epoch).\n   */\n  public abstract Long getTimestamp();\n\n  /**\n   * Class invariant. Checked after construction or deserialization.\n   */\n  public HCatEventMessage checkValid() {\n    if (getServer() == null || getServicePrincipal() == null) {\n      throw new IllegalStateException(\"Server-URL/Service-Principal shouldn't be null.\");\n    }\n    if (getEventType() == null) {\n      throw new IllegalStateException(\"Event-type unset.\");\n    }\n    if (getDB() == null) {\n      throw new IllegalArgumentException(\"DB-name unset.\");\n    }\n    return this;\n  }\n}<fim_middle>// class below has no smell\n"}