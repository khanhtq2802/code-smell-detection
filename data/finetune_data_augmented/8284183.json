{"text": "<fim_prefix>/****************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one   *\n * or more contributor license agreements.  See the NOTICE file *\n * distributed with this work for additional information        *\n * regarding copyright ownership.  The ASF licenses this file   *\n * to you under the Apache License, Version 2.0 (the            *\n * \"License\"); you may not use this file except in compliance   *\n * with the License.  You may obtain a copy of the License at   *\n *                                                              *\n *   http://www.apache.org/licenses/LICENSE-2.0                 *\n *                                                              *\n * Unless required by applicable law or agreed to in writing,   *\n * software distributed under the License is distributed on an  *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *\n * KIND, either express or implied.  See the License for the    *\n * specific language governing permissions and limitations      *\n * under the License.                                           *\n ****************************************************************/\n\npackage org.apache.james.mailbox;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport org.apache.james.mailbox.exception.AnnotationException;\nimport org.apache.james.mailbox.exception.MailboxException;\nimport org.apache.james.mailbox.model.MailboxAnnotation;\nimport org.apache.james.mailbox.model.MailboxAnnotationKey;\nimport org.apache.james.mailbox.model.MailboxPath;\n\n/**\n * <p>\n * This class intends to manage mailbox annotations.\n *\n * Work will be delegated to it by {@link MailboxManager}\n * </p>\n */\n\n<fim_suffix>public interface MailboxAnnotationManager {\n\n    /**\n     * Return all mailbox's annotation as the {@link List} of {@link MailboxAnnotation} without order and\n     * do not contain any two annotations with the same key\n     * \n     * @param mailboxPath   the current mailbox\n     * @param session       the current session\n     * @return              List<MailboxAnnotation>\n     * @throws MailboxException in case of selected mailbox does not exist\n     */\n    List<MailboxAnnotation> getAllAnnotations(MailboxPath mailboxPath, MailboxSession session) throws MailboxException;\n\n    /**\n     * Return all mailbox's annotation filter by the list of the keys without order and\n     * do not contain any two annotations with the same key\n     * \n     * @param mailboxPath   the current mailbox\n     * @param session       the current session\n     * @param keys          list of the keys should be filter\n     * @return              List<MailboxAnnotation>\n     * @throws MailboxException in case of selected mailbox does not exist\n     */\n    List<MailboxAnnotation> getAnnotationsByKeys(MailboxPath mailboxPath, MailboxSession session, Set<MailboxAnnotationKey> keys) throws MailboxException;\n\n    /**\n     * Return all mailbox's annotation by the list of the keys and its children entries without order and\n     * do not contain any two annotations with the same key\n     *\n     * @param mailboxPath   the current mailbox\n     * @param session       the current session\n     * @param keys          list of the keys should be filter\n     * @return              List<MailboxAnnotation>\n     * @throws MailboxException in case of selected mailbox does not exist\n     */\n    List<MailboxAnnotation> getAnnotationsByKeysWithOneDepth(MailboxPath mailboxPath, MailboxSession session, Set<MailboxAnnotationKey> keys) throws MailboxException;\n\n    /**\n     * Return all mailbox's annotation by the list of the keys and its below entries without order and\n     * do not contain any two annotations with the same key\n     *\n     * @param mailboxPath   the current mailbox\n     * @param session       the current session\n     * @param keys          list of the keys should be filter\n     * @return              List<MailboxAnnotation>\n     * @throws MailboxException in case of selected mailbox does not exist\n     */\n    List<MailboxAnnotation> getAnnotationsByKeysWithAllDepth(MailboxPath mailboxPath, MailboxSession session, Set<MailboxAnnotationKey> keys) throws MailboxException;\n\n    /**\n     * Update the mailbox's annotations. This method can:\n     * - Insert new annotation if it does not exist\n     * - Update the new value for existed annotation\n     * - Delete the existed annotation if its value is nil\n     * \n     * @param mailboxPath   the current mailbox\n     * @param session       the current session\n     * @param mailboxAnnotations    the list of annotation should be insert/udpate/delete\n     * @throws MailboxException in case of selected mailbox does not exist\n     */\n    void updateAnnotations(MailboxPath mailboxPath, MailboxSession session, List<MailboxAnnotation> mailboxAnnotations) throws MailboxException, AnnotationException;\n}<fim_middle>// class below has no smell\n"}