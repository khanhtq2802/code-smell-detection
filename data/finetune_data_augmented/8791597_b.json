{"text": "<fim_prefix>                throw new ExperimentNotFoundException(\"Requested experiment id \" + airavataExperimentId + \" does not exist in the system..\");\n            }\n            ExperimentStatus experimentStatus = getExperimentStatusInternal(airavataExperimentId);\n            if (experimentStatus != null){\n                ExperimentState experimentState = experimentStatus.getState();\n                switch (experimentState){\n                    case CREATED: case VALIDATED: case CANCELED: case FAILED:\n                        experimentCatalog.add(ExpCatChildDataType.PROCESS_RESOURCE_SCHEDULE, resourceScheduling, airavataExperimentId);\n                        logger.debug(airavataExperimentId, \"Successfully updated resource scheduling for the experiment {}.\", airavataExperimentId);\n                        break;\n                    default:\n                        logger.error(airavataExperimentId, \"Error while updating scheduling info. Update experiment is only valid for experiments \" +\n                                \"with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given \" +\n                                \"experiment is in one of above statuses... \");\n                        AiravataSystemException exception = new AiravataSystemException();\n                        exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);\n                        exception.setMessage(\"Error while updating experiment. Update experiment is only valid for experiments \" +\n                                \"with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given \" +\n                                \"experiment is in one of above statuses... \");\n                        throw exception;\n                }\n            }\n        } catch (Exception e) {\n            logger.error(airavataExperimentId, \"Error while updating scheduling info\", e);\n            RegistryServiceException exception = new RegistryServiceException();\n            exception.setMessage(\"Error while updating scheduling info. \" +\n                    \"Update experiment is only valid for experiments \" +\n                    \"with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given \" +\n                    \"experiment is in one of above statuses...  \" + e.getMessage());\n            throw exception;\n        }\n    }\n    @Override\n    public void updateExperimentConfiguration(String airavataExperimentId, UserConfigurationDataModel userConfiguration) throws RegistryServiceException, TException {\n        try {\n            experimentCatalog = RegistryFactory.getDefaultExpCatalog();\n            if (!experimentCatalog.isExist(ExperimentCatalogModelType.EXPERIMENT, airavataExperimentId)){\n                logger.error(airavataExperimentId, \"Update experiment configuration failed, experiment {} doesn't exist.\", airavataExperimentId);\n                throw new ExperimentNotFoundException(\"Requested experiment id \" + airavataExperimentId + \" does not exist in the system..\");\n            }\n            ExperimentStatus experimentStatus = getExperimentStatusInternal(airavataExperimentId);\n            if (experimentStatus != null){\n                ExperimentState experimentState = experimentStatus.getState();\n                switch (experimentState){\n                    case CREATED: case VALIDATED: case CANCELED: case FAILED:\n                        experimentCatalog.add(ExpCatChildDataType.USER_CONFIGURATION_DATA, userConfiguration, airavataExperimentId);\n                        logger.debug(airavataExperimentId, \"Successfully updated experiment configuration for experiment {}.\", airavataExperimentId);\n                        break;\n                    default:\n                        logger.error(airavataExperimentId, \"Error while updating experiment {}. Update experiment is only valid for experiments \" +\n                                \"with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given \" +\n                                \"experiment is in one of above statuses... \", airavataExperimentId);\n                        AiravataSystemException exception = new AiravataSystemException();\n                        exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);\n                        exception.setMessage(\"Error while updating experiment. Update experiment is only valid for experiments \" +\n                                \"with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given \" +\n                                \"experiment is in one of above statuses... \");\n                        throw exception;\n                }\n            }\n        } catch (Exception e) {\n            logger.error(airavataExperimentId, \"Error while updating user configuration\", e);\n            RegistryServiceException exception = new RegistryServiceException();\n            exception.setMessage(\"Error while updating user configuration. \" +\n                    \"Update experiment is only valid for experiments \" +\n                    \"with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given \" +\n                    \"experiment is in one of above statuses...  \" + e.getMessage());\n            throw exception;\n        }\n    }\n    /**\n     * Update a Previously Created Experiment\n     * Configure the CREATED experiment with required inputs, scheduling and other quality of service parameters. This method only updates the experiment object within the registry.\n     * The experiment has to be launched to make it actionable by the server.\n     *\n     * @param airavataExperimentId The identifier for the requested experiment. This is returned during the create experiment step.\n     * @param experiment\n     * @return This method call does not have a return value.\n     * @throws InvalidRequestException     For any incorrect forming of the request itself.\n     * @throws ExperimentNotFoundException If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.\n     * @throws AiravataClientException     The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:\n     *                                     <p>\n     *                                     UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative\n     *                                     step, then Airavata Registry will not have a provenance area setup. The client has to follow\n     *                                     gateway registration steps and retry this request.\n     *                                     <p>\n     *                                     AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.\n     *                                     For now this is a place holder.\n     *                                     <p>\n     *                                     INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake\n     *                                     is implemented, the authorization will be more substantial.\n     * @throws AiravataSystemException     This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client\n     *                                     rather an Airavata Administrator will be notified to take corrective action.\n     */\n<fim_suffix>    @Override\n    public void updateExperiment(String airavataExperimentId, ExperimentModel experiment) throws RegistryServiceException, TException {\n        try {\n            experimentCatalog = RegistryFactory.getDefaultExpCatalog();\n            if (!experimentCatalog.isExist(ExperimentCatalogModelType.EXPERIMENT, airavataExperimentId)) {\n                logger.error(airavataExperimentId, \"Update request failed, Experiment {} doesn't exist.\", airavataExperimentId);\n                throw new RegistryServiceException(\"Requested experiment id \" + airavataExperimentId + \" does not exist in the system..\");\n            }\n            ExperimentStatus experimentStatus = getExperimentStatusInternal(airavataExperimentId);\n            if (experimentStatus != null){\n                ExperimentState experimentState = experimentStatus.getState();\n                switch (experimentState){\n                    case CREATED: case VALIDATED:\n                        if(experiment.getUserConfigurationData() != null && experiment.getUserConfigurationData()\n                                .getComputationalResourceScheduling() != null){\n                            String compResourceId = experiment.getUserConfigurationData()\n                                    .getComputationalResourceScheduling().getResourceHostId();\n                            ComputeResourceDescription computeResourceDescription = appCatalog.getComputeResource()\n                                    .getComputeResource(compResourceId);\n                            if(!computeResourceDescription.isEnabled()){\n                                logger.error(\"Compute Resource is not enabled by the Admin!\");\n                                AiravataSystemException exception = new AiravataSystemException();\n                                exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);\n                                exception.setMessage(\"Compute Resource is not enabled by the Admin!\");\n                                throw exception;\n                            }\n                        }\n                        experimentCatalog.update(ExperimentCatalogModelType.EXPERIMENT, experiment, airavataExperimentId);\n                        logger.debug(airavataExperimentId, \"Successfully updated experiment {} \", experiment.getExperimentName());\n                        break;\n                    default:\n                        logger.error(airavataExperimentId, \"Error while updating experiment. Update experiment is only valid for experiments \" +\n                                \"with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given \" +\n                                \"experiment is in one of above statuses... \");\n                        AiravataSystemException exception = new AiravataSystemException();\n                        exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);\n                        exception.setMessage(\"Error while updating experiment. Update experiment is only valid for experiments \" +\n                                \"with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given \" +\n                                \"experiment is in one of above statuses... \");\n                        throw exception;\n                }\n            }\n        } catch (RegistryException e) {\n            logger.error(airavataExperimentId, \"Error while updating experiment\", e);\n            RegistryServiceException exception = new RegistryServiceException();\n            exception.setMessage(\"Error while updating experiment. More info : \" + e.getMessage());\n            throw exception;\n        } catch (AppCatalogException e) {\n            logger.error(airavataExperimentId, \"Error while updating experiment\", e);\n            RegistryServiceException exception = new RegistryServiceException();\n            exception.setMessage(\"Error while updating experiment. More info : \" + e.getMessage());\n            throw exception;\n        }\n    }<fim_middle>// function below is long method and feature envy\n"}