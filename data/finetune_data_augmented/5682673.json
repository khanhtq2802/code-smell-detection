{"text": "<fim_prefix>/*\n* Licensed to the Apache Software Foundation (ASF) under one or more\n* contributor license agreements.  See the NOTICE file distributed with\n* this work for additional information regarding copyright ownership.\n* The ASF licenses this file to You under the Apache License, Version 2.0\n* (the \"License\"); you may not use this file except in compliance with\n* the License.  You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\npackage org.apache.stanbol.enhancer.engines.metaxa.core.mp3;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\n\nimport org.ontoware.rdf2go.model.Model;\nimport org.ontoware.rdf2go.model.node.RDFTerm;\nimport org.ontoware.rdf2go.model.node.URI;\nimport org.ontoware.rdf2go.vocabulary.RDF;\nimport org.semanticdesktop.aperture.extractor.AbstractFileExtractor;\nimport org.semanticdesktop.aperture.extractor.ExtractorException;\nimport org.semanticdesktop.aperture.rdf.RDFContainer;\nimport org.semanticdesktop.aperture.rdf.util.ModelUtil;\nimport org.semanticdesktop.aperture.vocabulary.NCO;\nimport org.semanticdesktop.aperture.vocabulary.NID3;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.mpatric.mp3agic.ID3Wrapper;\nimport com.mpatric.mp3agic.ID3v1;\nimport com.mpatric.mp3agic.ID3v2;\nimport com.mpatric.mp3agic.InvalidDataException;\nimport com.mpatric.mp3agic.Mp3File;\nimport com.mpatric.mp3agic.UnsupportedTagException;\n\n/**\n *\n * @author <a href=\"mailto:kasper@dfki.de\">Walter Kasper</a>\n * \n */\n\n<fim_suffix>public class MP3FileExtractor extends AbstractFileExtractor {\n  \n  private Logger logger = LoggerFactory.getLogger(MP3FileExtractor.class);\n  \n  @Override\n  protected void performExtraction(URI arg0, File arg1, Charset arg2, String arg3, RDFContainer result) throws ExtractorException {\n    try {\n      Mp3File mp3File = new Mp3File(arg1.toString());\n      ID3v1 id3v1 = mp3File.getId3v1Tag();\n      ID3v2 id3v2 = mp3File.getId3v2Tag();\n      ID3Wrapper wrapper = new ID3Wrapper(id3v1,id3v2);\n      addId3Fields(wrapper,result);\n      result.add(RDF.type, NID3.ID3Audio);\n      \n    } catch (UnsupportedTagException e) {\n      throw new ExtractorException(e);\n    } catch (InvalidDataException e) {\n      throw new ExtractorException(e);\n    } catch (IOException e) {\n      throw new ExtractorException(e);\n    }\n  }\n\n  private void addId3Fields(ID3Wrapper wrapper, RDFContainer result) {\n    String value = null;\n    if ((value = wrapper.getAlbum()) != null) {\n      result.add(NID3.albumTitle,value);\n    }\n    if ((value = wrapper.getArtist()) != null) {\n      addSimpleContact(NID3.originalArtist,value,result);\n    }\n    if ((value = wrapper.getComment()) != null) {\n      result.add(NID3.comments,value);\n    }\n    if ((value = wrapper.getComposer())!= null) {\n      addSimpleContact(NID3.composer,value,result);\n    }\n    if ((value  = wrapper.getCopyright()) != null) {\n      result.add(NID3.copyrightMessage,value);\n    }\n    if ((value  = wrapper.getEncoder()) != null) {\n      addSimpleContact(NID3.encodedBy, value,result);\n    }\n    if ((value  = wrapper.getGenreDescription()) != null) {\n      result.add(NID3.contentType,value);\n    }\n    if ((value  = wrapper.getTitle()) != null) {\n      result.add(NID3.title,value);\n    }\n    if ((value  = wrapper.getOriginalArtist()) != null) {\n      addSimpleContact(NID3.originalArtist,value,result);\n    }\n    if ((value  = wrapper.getTrack()) != null) {\n      addSimpleContact(NID3.trackNumber,value,result);\n    }\n    if ((value  = wrapper.getYear()) != null) {\n      try {\n        int year = Integer.parseInt(value);\n        result.add(NID3.recordingYear,year);\n      }\n      catch(NumberFormatException e) {}\n    }\n  }\n  \n  protected void addSimpleContact(URI property, String fullname, RDFContainer container) {\n    Model model = container.getModel();\n    RDFTerm resource = ModelUtil.generateRandomResource(model);\n    model.addStatement(resource, RDF.type, NCO.Contact);\n    model.addStatement(resource, NCO.fullname, fullname);\n    model.addStatement(container.getDescribedUri(), property, resource);\n}\n\n\n  \n}<fim_middle>// class below has no smell\n"}