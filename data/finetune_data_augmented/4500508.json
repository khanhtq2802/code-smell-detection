{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.flume.sink.hdfs;\n\nimport java.util.Collections;\nimport org.apache.flume.Context;\nimport org.apache.flume.Event;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.LongWritable;\n\npublic class HDFSTextSerializer implements SequenceFileSerializer {\n\n  private Text makeText(Event e) {\n    Text textObject = new Text();\n    textObject.set(e.getBody(), 0, e.getBody().length);\n    return textObject;\n  }\n\n  @Override\n  public Class<LongWritable> getKeyClass() {\n    return LongWritable.class;\n  }\n\n  @Override\n  public Class<Text> getValueClass() {\n    return Text.class;\n  }\n\n  @Override\n  public Iterable<Record> serialize(Event e) {\n    Object key = getKey(e);\n    Object value = getValue(e);\n    return Collections.singletonList(new Record(key, value));\n  }\n\n<fim_suffix>  private Object getKey(Event e) {\n    // Write the data to HDFS\n    String timestamp = e.getHeaders().get(\"timestamp\");\n    long eventStamp;\n\n    if (timestamp == null) {\n      eventStamp = System.currentTimeMillis();\n    } else {\n      eventStamp = Long.valueOf(timestamp);\n    }\n    return new LongWritable(eventStamp);\n  }\n\n  private Object getValue(Event e) {\n    return makeText(e);\n  }\n\n  public static class Builder implements SequenceFileSerializer.Builder {\n\n    @Override\n    public SequenceFileSerializer build(Context context) {\n      return new HDFSTextSerializer();\n    }\n\n  }\n\n}<fim_middle>// function below has no smell\n"}