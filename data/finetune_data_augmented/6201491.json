{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.multiuser.api.permission.server.jpa;\n\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static java.lang.String.format;\nimport static java.util.Objects.requireNonNull;\nimport static java.util.stream.Collectors.toList;\n\nimport com.google.inject.persist.Transactional;\nimport java.util.List;\nimport java.util.Set;\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\nimport javax.persistence.EntityManager;\nimport org.eclipse.che.api.core.NotFoundException;\nimport org.eclipse.che.api.core.Page;\nimport org.eclipse.che.api.core.ServerException;\nimport org.eclipse.che.api.core.notification.EventService;\nimport org.eclipse.che.api.user.server.event.BeforeUserRemovedEvent;\nimport org.eclipse.che.core.db.cascade.CascadeEventSubscriber;\nimport org.eclipse.che.multiuser.api.permission.server.SystemDomain;\nimport org.eclipse.che.multiuser.api.permission.server.model.impl.SystemPermissionsImpl;\n\n/**\n * JPA based implementation of system permissions DAO.\n *\n * @author Max Shaposhnik\n */\n@Singleton\npublic class JpaSystemPermissionsDao extends AbstractJpaPermissionsDao<SystemPermissionsImpl> {\n\n  @Inject\n  public JpaSystemPermissionsDao(\n      @Named(SystemDomain.SYSTEM_DOMAIN_ACTIONS) Set<String> allowedActions) {\n    super(new SystemDomain(allowedActions));\n  }\n\n  @Override\n  public SystemPermissionsImpl get(String userId, String instanceId)\n      throws ServerException, NotFoundException {\n    requireNonNull(userId, \"Required non-null user id\");\n    try {\n      return new SystemPermissionsImpl(getEntity(wildcardToNull(userId), instanceId));\n    } catch (RuntimeException x) {\n      throw new ServerException(x.getLocalizedMessage(), x);\n    }\n  }\n\n  @Override\n  @Transactional\n  public Page<SystemPermissionsImpl> getByInstance(String instanceId, int maxItems, long skipCount)\n      throws ServerException {\n    checkArgument(\n        skipCount <= Integer.MAX_VALUE,\n        \"The number of items to skip can't be greater than \" + Integer.MAX_VALUE);\n    // instanceId is ignored because system domain doesn't require it\n    try {\n      final EntityManager entityManager = managerProvider.get();\n      final List<SystemPermissionsImpl> permissions =\n          entityManager\n              .createNamedQuery(\"SystemPermissions.getAll\", SystemPermissionsImpl.class)\n              .setMaxResults(maxItems)\n              .setFirstResult((int) skipCount)\n              .getResultList()\n              .stream()\n              .map(SystemPermissionsImpl::new)\n              .collect(toList());\n      final Long totalCount =\n          entityManager\n              .createNamedQuery(\"SystemPermissions.getTotalCount\", Long.class)\n              .getSingleResult();\n      return new Page<>(permissions, skipCount, maxItems, totalCount);\n    } catch (RuntimeException e) {\n      throw new ServerException(e.getLocalizedMessage(), e);\n    }\n  }\n\n  @Override\n  public List<SystemPermissionsImpl> getByUser(String userId) throws ServerException {\n    requireNonNull(userId, \"User identifier required\");\n    try {\n      return doGetByUser(userId).stream().map(SystemPermissionsImpl::new).collect(toList());\n    } catch (RuntimeException e) {\n      throw new ServerException(e.getLocalizedMessage(), e);\n    }\n  }\n\n<fim_suffix>  @Override\n  protected SystemPermissionsImpl getEntity(String userId, String instanceId)\n      throws NotFoundException, ServerException {\n    try {\n      final List<SystemPermissionsImpl> existent = doGetByUser(userId);\n      if (existent.isEmpty()) {\n        throw new NotFoundException(format(\"System permissions for user '%s' not found\", userId));\n      }\n      return existent.get(0);\n    } catch (RuntimeException e) {\n      throw new ServerException(e.getMessage(), e);\n    }\n  }\n\n  @Transactional\n  protected List<SystemPermissionsImpl> doGetByUser(String userId) {\n    return managerProvider\n        .get()\n        .createNamedQuery(\"SystemPermissions.getByUserId\", SystemPermissionsImpl.class)\n        .setParameter(\"userId\", userId)\n        .getResultList();\n  }\n\n  @Override\n  public void remove(String userId, String instanceId) throws ServerException, NotFoundException {\n    requireNonNull(userId, \"User identifier required\");\n    try {\n      doRemove(userId, instanceId);\n    } catch (RuntimeException x) {\n      throw new ServerException(x.getLocalizedMessage(), x);\n    }\n  }\n\n  @Singleton\n  public static class RemoveSystemPermissionsBeforeUserRemovedEventSubscriber\n      extends CascadeEventSubscriber<BeforeUserRemovedEvent> {\n    @Inject private EventService eventService;\n    @Inject JpaSystemPermissionsDao dao;\n\n    @PostConstruct\n    public void subscribe() {\n      eventService.subscribe(this, BeforeUserRemovedEvent.class);\n    }\n\n    @PreDestroy\n    public void unsubscribe() {\n      eventService.unsubscribe(this, BeforeUserRemovedEvent.class);\n    }\n\n    @Override\n    public void onCascadeEvent(BeforeUserRemovedEvent event) throws Exception {\n      for (SystemPermissionsImpl permissions : dao.getByUser(event.getUser().getId())) {\n        dao.remove(permissions.getUserId(), permissions.getInstanceId());\n      }\n    }\n  }\n}<fim_middle>// function below has no smell\n"}