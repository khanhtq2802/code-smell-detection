{"text": "<fim_prefix>/*\n * Copyright 2002-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.baidu.pbrpc.register.redis;\n\nimport java.util.logging.Logger;\n\nimport org.apache.commons.pool2.BasePooledObjectFactory;\nimport org.apache.commons.pool2.PooledObject;\nimport org.apache.commons.pool2.impl.DefaultPooledObject;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.Protocol;\n\nimport com.baidu.jprotobuf.pbrpc.utils.Pool;\n\n/**\n * Connection pool for jedis.\n * \n * @author xiemalin\n * @since 1.0\n */\npublic class JedisPool extends Pool<Jedis> {\n    \n    private static final Logger LOG = Logger.getLogger(JedisPool.class.getName());\n\n    public JedisPool(final GenericObjectPoolConfig poolConfig, final String host) {\n        this(poolConfig, host, Protocol.DEFAULT_PORT, Protocol.DEFAULT_TIMEOUT, null);\n    }\n\n    public JedisPool(String host, int port) {\n        super(new GenericObjectPoolConfig(), new JedisFactory(host, port, Protocol.DEFAULT_TIMEOUT, null));\n    }\n\n    public JedisPool(final GenericObjectPoolConfig poolConfig, final String host, int port, int timeout,\n            final String password) {\n        super(poolConfig, new JedisFactory(host, port, timeout, password));\n    }\n\n<fim_suffix>    public JedisPool(final GenericObjectPoolConfig poolConfig, final String host, final int port) {\n        this(poolConfig, host, port, Protocol.DEFAULT_TIMEOUT, null);\n    }\n\n    public JedisPool(final GenericObjectPoolConfig poolConfig, final String host, final int port, final int timeout) {\n        this(poolConfig, host, port, timeout, null);\n    }\n\n    /**\n     * PoolableObjectFactory custom impl.\n     */\n    private static class JedisFactory extends BasePooledObjectFactory<Jedis> {\n        /**\n         * \n         */\n        private static final String REDIS_PING_KEY = \"____pbrpc_ping_key_____\";\n        private final String host;\n        private final int port;\n        private final int timeout;\n        private final String password;\n\n        public JedisFactory(final String host, final int port, final int timeout, final String password) {\n            super();\n            this.host = host;\n            this.port = port;\n            this.timeout = (timeout > 0) ? timeout : -1;\n            this.password = password;\n        }\n\n        public void destroyObject(PooledObject<Jedis> p) throws Exception {\n            final Jedis jedis = p.getObject();\n            if (jedis.isConnected()) {\n                try {\n                    try {\n                        jedis.quit();\n                    } catch (Exception e) {\n                        LOG.warning(e.getMessage());\n                    }\n                    jedis.disconnect();\n                } catch (Exception e) {\n                    LOG.warning(e.getMessage());\n                }\n            }\n        }\n\n        /**\n         * This implementation always returns {@code true}.\n         * \n         * @param p ignored\n         * \n         * @return {@code true}\n         */\n        @Override\n        public boolean validateObject(PooledObject<Jedis> p) {\n            final Jedis jedis = p.getObject();\n            try {\n                return jedis.isConnected() && jedis.set(REDIS_PING_KEY, \"\") != null;\n            } catch (final Exception e) {\n                return false;\n            }\n        }\n\n        /*\n         * (non-Javadoc)\n         * \n         * @see org.apache.commons.pool2.BasePooledObjectFactory#create()\n         */\n        @Override\n        public Jedis create() throws Exception {\n            final Jedis jedis;\n            if (timeout > 0) {\n                jedis = new Jedis(this.host, this.port, this.timeout);\n            } else {\n                jedis = new Jedis(this.host, this.port);\n            }\n\n            return jedis;\n        }\n\n        /*\n         * (non-Javadoc)\n         * \n         * @see org.apache.commons.pool2.BasePooledObjectFactory#wrap(java.lang.Object)\n         */\n        @Override\n        public PooledObject<Jedis> wrap(Jedis jedis) {\n            jedis.connect();\n            if (null != this.password) {\n                jedis.auth(this.password);\n            }\n            return new DefaultPooledObject<Jedis>(jedis);\n        }\n\n    }\n}<fim_middle>// function below has no smell\n"}