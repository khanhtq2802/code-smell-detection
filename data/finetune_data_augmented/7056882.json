{"text": "<fim_prefix>/*\n * Copyright 2015 The SageTV Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage sage;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\npublic class LinuxUtils\n{\n  public static final String NET_CONFIG_WIRED = \"linux/network/wired\";\n  public static final String NET_CONFIG_DHCP = \"linux/network/dhcp\";\n  public static final String NET_CONFIG_IP_ADDRESS = \"linux/network/ip_address\";\n  public static final String NET_CONFIG_NETMASK = \"linux/network/netmask\";\n  public static final String NET_CONFIG_GATEWAY = \"linux/network/gateway\";\n  public static final String NET_CONFIG_PRIMARY_DNS = \"linux/network/primary_dns\";\n  public static final String NET_CONFIG_SECONDARY_DNS = \"linux/network/secondary_dns\";\n  public static final String NET_CONFIG_SSID = \"linux/network/ssid\";\n  public static final String NET_CONFIG_ENCRYPTION = \"linux/network/encryption\";\n  public static final String NET_CONFIG_ENCRYPTION_KEY = \"linux/network/encryption_key\";\n  public static final String NET_CONFIG_SKIP_SETUP = \"linux/network/skip_setup\";\n  public static final String SAMBA_CONFIG_ENABLE = \"samba/enable_server\";\n  public static final String SAMBA_CONFIG_MACHINE = \"samba/machine_name\";\n  public static final String SAMBA_CONFIG_WORKGROUP = \"samba/workgroup\";\n  public static final int NO_DISC = 0;\n  public static final int BLANK_CD = 1;\n  public static final int VALID_CD = 2;\n  public static final int BLANK_DVD_MINUS_R = 10;\n  public static final int BLANK_DVD_PLUS_R = 11;\n  public static final int DVD_MINUS_R = 12;\n  public static final int DVD_PLUS_R = 13;\n  private static boolean ntpdateThreadLaunched = false;\n  private static boolean ntpdateWorked = false;\n  private static final String[] NTP_SERVERS = { \"time-a.nist.gov\", \"north-america.pool.ntp.org\", \"utcnist2.colorado.edu\", \"nist1-la.WiTime.net\" };\n<fim_suffix>  public static int reconfigureNetworking()\n  {\n    // This uses values from the property settings\n    if (Sage.getBoolean(NET_CONFIG_WIRED, true))\n    {\n      // Bring down the wireless interface if it's there\n      bringDownWireless();\n      setupNetworking(Sage.get(\"linux/wired_network_port\", \"eth0\"));\n    }\n    else\n    {\n      // Bring down the wired interface if it's there\n      if (Sage.getBoolean(\"linux/disable_wired_when_wireless_is_enabled\", false))\n        bringDownWired();\n      // Be sure the wired interface is loaded (it may need to be before it is configured)\n      IOUtils.exec2(\"ifconfig \" + Sage.get(\"linux/wireless_network_port\", \"eth1\") + \" up\");\n      // Setup the wireless networking properties before we try to connect to the network or it won't work\n      IOUtils.exec2(\"iwconfig \" + Sage.get(\"linux/wireless_network_port\", \"eth1\") + \" essid \" + Sage.get(NET_CONFIG_SSID, \"any\"));\n      String crypto = Sage.get(NET_CONFIG_ENCRYPTION, \"WPA\");\n      if (\"None\".equals(crypto))\n      {\n        IOUtils.exec2(\"iwconfig \" + Sage.get(\"linux/wireless_network_port\", \"eth1\") + \" key off\");\n      }\n      else\n      {\n        // Check if the key is all hex\n        String key = Sage.get(NET_CONFIG_ENCRYPTION_KEY, \"\");\n        boolean hexKey = true;\n        for (int i = 0; i < key.length(); i++)\n        {\n          if (Character.digit(key.charAt(i), 16) < 0)\n          {\n            hexKey = false;\n            break;\n          }\n        }\n        if (\"WEP\".equals(crypto))\n        {\n          IOUtils.exec2(\"iwconfig \" + Sage.get(\"linux/wireless_network_port\", \"eth1\") + \" key on\");\n          if (hexKey)\n            IOUtils.exec2(\"iwconfig \" + Sage.get(\"linux/wireless_network_port\", \"eth1\") + \" key \" + Sage.get(NET_CONFIG_ENCRYPTION_KEY, \"\"));\n          else\n            IOUtils.exec2(\"iwconfig \" + Sage.get(\"linux/wireless_network_port\", \"eth1\") + \" key s:\" + Sage.get(NET_CONFIG_ENCRYPTION_KEY, \"\"));\n        }\n        else // WPA\n        {\n          // NOT FINISHED YET, we'll need to setup a configuration file for wpa_supplicant and then run it\n        }\n      }\n      setupNetworking(Sage.get(\"linux/wireless_network_port\", \"eth1\"));\n    }\n    return 0;\n  }\n  public static void bringDownWireless()\n  {\n    if (Sage.DBG) System.out.println(\"Bringing down wireless interface\");\n    IOUtils.exec2(\"ifconfig \" + Sage.get(\"linux/wireless_network_port\", \"eth1\") + \" down\");\n  }\n  public static void bringDownWired()\n  {\n    if (Sage.DBG) System.out.println(\"Bringing down wired interface\");\n    IOUtils.exec2(\"ifconfig \" + Sage.get(\"linux/wired_network_port\", \"eth0\") + \" down\");\n  }\n  public static void setupNetworking(String netInterface)\n  {\n    if (Sage.DBG) System.out.println(\"Setting up network interface \" + netInterface);\n    if (Sage.getBoolean(NET_CONFIG_SKIP_SETUP, true)) return;\n    if (Sage.getBoolean(NET_CONFIG_DHCP, true))\n    {\n      // If we started a dhcp daemon for this connection before, we need to kill it\n      IOUtils.exec2(\"dhcpcd \" + netInterface + \" -k\");\n      // Wait for the dhcpcd interface to actually go down\n      try{Thread.sleep(2000);} catch (Exception e) {}\n      // Wireless DHCP can take a little time to establish\n      if (Sage.getBoolean(NET_CONFIG_WIRED, true))\n        IOUtils.exec2(\"dhcpcd \" + netInterface + \" -t 5\");\n      else\n        IOUtils.exec2(\"dhcpcd \" + netInterface + \" -t 30\");\n    }\n    else\n    {\n      String ip = Sage.get(NET_CONFIG_IP_ADDRESS, \"\");\n      int lastdot = ip.lastIndexOf('.');\n      String broadcast = \"192.168.0.255\";\n      if (lastdot != -1)\n        broadcast = ip.substring(0, lastdot) + \".255\";\n      IOUtils.exec2(\"ifconfig \" + netInterface + \" \" + ip + \" broadcast \" + broadcast + \" netmask \" +\n          Sage.get(NET_CONFIG_NETMASK, \"255.255.255.0\") + \" up\");\n      IOUtils.exec2(\"route add default gw \" + Sage.get(NET_CONFIG_GATEWAY, \"\"));\n      // Now write out the resolv.conf file\n      java.io.PrintWriter outStream = null;\n      try\n      {\n        outStream = new java.io.PrintWriter(new java.io.FileWriter(\"/etc/resolv.conf\"));\n        boolean hasDNS = Sage.get(NET_CONFIG_PRIMARY_DNS, \"\").length() > 0 ||\n            Sage.get(NET_CONFIG_SECONDARY_DNS, \"\").length() > 0;\n            if (hasDNS)\n            {\n              if (Sage.get(NET_CONFIG_PRIMARY_DNS, \"\").length() > 0)\n                outStream.println(\"nameserver \" + Sage.get(NET_CONFIG_PRIMARY_DNS, \"\"));\n              if (Sage.get(NET_CONFIG_SECONDARY_DNS, \"\").length() > 0)\n                outStream.println(\"nameserver \" + Sage.get(NET_CONFIG_SECONDARY_DNS, \"\"));\n            }<fim_middle>// function below is long method\n"}