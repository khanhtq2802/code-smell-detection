{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.validator.example;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.text.MessageFormat;\nimport java.util.Iterator;\nimport java.util.Locale;\nimport java.util.ResourceBundle;\n\nimport org.apache.commons.validator.Field;\nimport org.apache.commons.validator.Form;\nimport org.apache.commons.validator.Validator;\nimport org.apache.commons.validator.ValidatorAction;\nimport org.apache.commons.validator.ValidatorException;\nimport org.apache.commons.validator.ValidatorResources;\nimport org.apache.commons.validator.ValidatorResult;\nimport org.apache.commons.validator.ValidatorResults;\nimport org.xml.sax.SAXException;\n\n/**                                                       \n * <p>A simple example of setting up and using the Validator.</p> \n *\n * This simple example shows all the steps needed to set up and use\n * the Validator.  Note that in most cases, some kind of framework\n * would be wrapped around the Validator, such as is the case with\n * the Struts Validator Framework.  However, should you wish to use\n * the Validator against raw Beans in a pure Java application, you\n * can see everything you need to know to get it working here.\n *\n * @version $Revision$\n */\n<fim_suffix>public class ValidateExample {\n\n    /**\n     * We need a resource bundle to get our field names and errors messages \n     * from.  Note that this is not strictly required to make the Validator \n     * work, but is a good coding practice.\n     */\n    private static ResourceBundle apps =\n        ResourceBundle.getBundle(\n            \"org.apache.commons.validator.example.applicationResources\");\n\n    /**\n     * This is the main method that will be called to initialize the Validator, create some sample beans, and\n     * run the Validator against them.\n     */\n    public static void main(String[] args)\n        throws ValidatorException, IOException, SAXException {\n            \n        InputStream in = null;\n        ValidatorResources resources = null;\n        \n        try {\n        \n            // Create a new instance of a ValidatorResource, then get a stream\n            // handle on the XML file with the actions in it, and initialize the\n            // resources from it.  This would normally be done by a servlet\n            // run during JSP initialization or some other application-startup\n            // routine.\n            in = ValidateExample.class.getResourceAsStream(\"validator-example.xml\");\n            resources = new ValidatorResources(in);\n            \n        } finally {\n            // Make sure we close the input stream.\n            if (in != null) {\n                in.close();\n            }\n        }\n        \n        // Create a test bean to validate against.\n        ValidateBean bean = new ValidateBean();\n        \n        // Create a validator with the ValidateBean actions for the bean\n        // we're interested in.\n        Validator validator = new Validator(resources, \"ValidateBean\");\n        \n        // Tell the validator which bean to validate against.\n        validator.setParameter(Validator.BEAN_PARAM, bean);\n        \n        ValidatorResults results = null;\n        \n        // Run the validation actions against the bean.  Since all of the properties\n        // are null, we expect them all to error out except for street2, which has\n        // no validations (it's an optional property)\n        \n        results = validator.validate();\n        printResults(bean, results, resources);\n        \n        // Now set all the required properties, but make the age a non-integer.\n        // You'll notice that age will pass the required test, but fail the int\n        // test.\n        bean.setLastName(\"Tester\");\n        bean.setFirstName(\"John\");\n        bean.setStreet1(\"1 Test Street\");\n        bean.setCity(\"Testville\");\n        bean.setState(\"TE\");\n        bean.setPostalCode(\"12345\");\n        bean.setAge(\"Too Old\");\n        results = validator.validate();\n        printResults(bean, results, resources);\n        \n        // Now only report failed fields\n        validator.setOnlyReturnErrors(true);\n        results = validator.validate();\n        printResults(bean, results, resources);\n        \n        // Now everything should pass.\n        validator.setOnlyReturnErrors(false);\n        bean.setAge(\"123\");\n        results = validator.validate();\n        printResults(bean, results, resources);\n    }\n\n    /**\n     * Dumps out the Bean in question and the results of validating it.\n     */\n    public static void printResults(\n        ValidateBean bean,\n        ValidatorResults results,\n        ValidatorResources resources) {\n            \n        boolean success = true;\n\n        // Start by getting the form for the current locale and Bean.\n        Form form = resources.getForm(Locale.getDefault(), \"ValidateBean\");\n\n        System.out.println(\"\\n\\nValidating:\");\n        System.out.println(bean);\n\n        // Iterate over each of the properties of the Bean which had messages.\n        Iterator<String> propertyNames = results.getPropertyNames().iterator();\n        while (propertyNames.hasNext()) {\n            String propertyName = propertyNames.next();\n\n            // Get the Field associated with that property in the Form\n            Field field = form.getField(propertyName);\n\n            // Look up the formatted name of the field from the Field arg0\n            String prettyFieldName = apps.getString(field.getArg(0).getKey());\n\n            // Get the result of validating the property.\n            ValidatorResult result = results.getValidatorResult(propertyName);\n\n            // Get all the actions run against the property, and iterate over their names.\n            Iterator<String> keys = result.getActions();\n            while (keys.hasNext()) {\n                String actName = keys.next();\n\n                // Get the Action for that name.\n                ValidatorAction action = resources.getValidatorAction(actName);\n\n                // If the result is valid, print PASSED, otherwise print FAILED\n                System.out.println(\n                    propertyName\n                        + \"[\"\n                        + actName\n                        + \"] (\"\n                        + (result.isValid(actName) ? \"PASSED\" : \"FAILED\")\n                        + \")\");\n\n                //If the result failed, format the Action's message against the formatted field name\n                if (!result.isValid(actName)) {\n                    success = false;\n                    String message = apps.getString(action.getMsg());\n                    Object[] args = { prettyFieldName };\n                    System.out.println(\n                        \"     Error message will be: \"\n                            + MessageFormat.format(message, args));\n\n                }\n            }\n        }\n        if (success) {\n            System.out.println(\"FORM VALIDATION PASSED\");\n        } else {\n            System.out.println(\"FORM VALIDATION FAILED\");\n        }\n\n    }\n\n}<fim_middle>// class below has no smell\n"}