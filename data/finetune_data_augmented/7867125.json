{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\npackage org.apache.geode.management.internal.cli.commands;\n\nimport static org.apache.geode.management.internal.cli.commands.DataCommandsUtils.callFunctionForRegion;\n\nimport java.util.Set;\n\nimport org.apache.commons.collections.CollectionUtils;\nimport org.springframework.shell.core.annotation.CliCommand;\nimport org.springframework.shell.core.annotation.CliOption;\n\nimport org.apache.geode.cache.Cache;\nimport org.apache.geode.cache.Region;\nimport org.apache.geode.distributed.DistributedMember;\nimport org.apache.geode.internal.cache.InternalCache;\nimport org.apache.geode.management.cli.CliMetaData;\nimport org.apache.geode.management.cli.ConverterHint;\nimport org.apache.geode.management.cli.GfshCommand;\nimport org.apache.geode.management.internal.cli.domain.DataCommandRequest;\nimport org.apache.geode.management.internal.cli.domain.DataCommandResult;\nimport org.apache.geode.management.internal.cli.functions.DataCommandFunction;\nimport org.apache.geode.management.internal.cli.i18n.CliStrings;\nimport org.apache.geode.management.internal.cli.result.model.ResultModel;\nimport org.apache.geode.security.ResourcePermission.Operation;\nimport org.apache.geode.security.ResourcePermission.Resource;\n\n<fim_suffix>public class RemoveCommand extends GfshCommand {\n  public static final String REGION_NOT_FOUND = \"Region <%s> not found in any of the members\";\n\n  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})\n  @CliCommand(value = {CliStrings.REMOVE}, help = CliStrings.REMOVE__HELP)\n  public ResultModel remove(\n      @CliOption(key = {CliStrings.REMOVE__KEY}, help = CliStrings.REMOVE__KEY__HELP,\n          specifiedDefaultValue = \"\") String key,\n      @CliOption(key = {CliStrings.REMOVE__REGION}, mandatory = true,\n          help = CliStrings.REMOVE__REGION__HELP,\n          optionContext = ConverterHint.REGION_PATH) String regionPath,\n      @CliOption(key = CliStrings.REMOVE__ALL, help = CliStrings.REMOVE__ALL__HELP,\n          specifiedDefaultValue = \"true\", unspecifiedDefaultValue = \"false\") boolean removeAllKeys,\n      @CliOption(key = {CliStrings.REMOVE__KEYCLASS},\n          help = CliStrings.REMOVE__KEYCLASS__HELP) String keyClass) {\n    Cache cache = getCache();\n\n    if (!removeAllKeys && (key == null)) {\n      return new ResultModel().createError(CliStrings.REMOVE__MSG__KEY_EMPTY);\n    }\n\n    if (removeAllKeys) {\n      authorize(Resource.DATA, Operation.WRITE, regionPath);\n    } else {\n      authorize(Resource.DATA, Operation.WRITE, regionPath, key);\n    }\n\n    key = DataCommandsUtils.makeBrokenJsonCompliant(key);\n\n    Region region = cache.getRegion(regionPath);\n    DataCommandFunction removefn = new DataCommandFunction();\n    DataCommandResult dataResult;\n    if (region == null) {\n      Set<DistributedMember> memberList = findAnyMembersForRegion(regionPath);\n\n      if (CollectionUtils.isEmpty(memberList)) {\n        return new ResultModel().createError(String.format(REGION_NOT_FOUND, regionPath));\n      }\n\n      DataCommandRequest request = new DataCommandRequest();\n      request.setCommand(CliStrings.REMOVE);\n      request.setKey(key);\n      request.setKeyClass(keyClass);\n      request.setRemoveAllKeys(removeAllKeys ? \"ALL\" : null);\n      request.setRegionName(regionPath);\n      dataResult = callFunctionForRegion(request, removefn, memberList);\n    } else {\n      dataResult = removefn.remove(key, keyClass, regionPath, removeAllKeys ? \"ALL\" : null,\n          (InternalCache) cache);\n    }\n\n    dataResult.setKeyClass(keyClass);\n\n    return dataResult.toResultModel();\n  }\n}<fim_middle>// class below has no smell\n"}