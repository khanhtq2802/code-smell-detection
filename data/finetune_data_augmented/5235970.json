{"text": "<fim_prefix>    if (extractors != null && extractors.size() > 0) {\n      for (ExtractorSpec spec : extractors) {\n        extractorsVector.add(getXmlRpcExtractorSpec(spec));\n      }\n    }\n    return extractorsVector;\n  }\n  public static Map<String, Object> getXmlRpcExtractorSpec(ExtractorSpec spec) {\n    Map<String, Object> extractorHash = new Hashtable<String, Object>();\n    extractorHash.put(\"className\", spec.getClassName());\n    extractorHash.put(\"config\",\n        getXmlRpcProperties(spec.getConfiguration()));\n    return extractorHash;\n  }\n  public static Vector<Map<String, Object>> getXmlRpcTypeHandlers(List<TypeHandler> typeHandlers) {\n    Vector<Map<String, Object>> handlersVector = new Vector<Map<String, Object>>();\n    if (typeHandlers != null && typeHandlers.size() > 0) {\n      for (TypeHandler typeHandler : typeHandlers) {\n        handlersVector.add(getXmlRpcTypeHandler(typeHandler));\n      }\n    }\n    return handlersVector;\n  }\n  public static Map<String, Object> getXmlRpcTypeHandler(TypeHandler typeHandler) {\n    Map<String, Object> handlerHash = new Hashtable<String, Object>();\n    handlerHash.put(\"className\", typeHandler != null ?\n                                 typeHandler.getClass().getCanonicalName() : \"\");\n    handlerHash.put(\"elementName\", typeHandler != null ?\n                                   typeHandler.getElementName() : \"\");\n    return handlerHash;\n  }\n  public static List<ExtractorSpec> getTypeExtractorsFromXmlRpc(Vector<Map<String, Object>> extractorsVector) {\n    List<ExtractorSpec> extractors = new Vector<ExtractorSpec>();\n    if (extractorsVector != null && extractorsVector.size() > 0) {\n      for (Map<String, Object> extractorSpecHash : extractorsVector) {\n        extractors.add(getExtractorSpecFromXmlRpc(extractorSpecHash));\n      }\n    }\n    return extractors;\n  }\n  @SuppressWarnings(\"unchecked\")\n  public static ExtractorSpec getExtractorSpecFromXmlRpc(\n      Map<String, Object> extractorSpecHash) {\n    ExtractorSpec spec = new ExtractorSpec();\n    spec.setClassName((String) extractorSpecHash.get(\"className\"));\n    spec\n        .setConfiguration(getPropertiesFromXmlRpc((Map<String, String>) extractorSpecHash\n            .get(\"config\")));\n    return spec;\n  }\n  public static List<TypeHandler> getTypeHandlersFromXmlRpc(Vector<Map<String, Object>> handlersVector) {\n    List<TypeHandler> handlers = new Vector<TypeHandler>();\n    if (handlersVector != null && handlersVector.size() > 0) {\n      for (Map<String, Object> typeHandlerHash : handlersVector) {\n        handlers.add(getTypeHandlerFromXmlRpc(typeHandlerHash));\n      }\n    }\n    return handlers;\n  }\n  public static TypeHandler getTypeHandlerFromXmlRpc(\n      Map<String, Object> typeHandlerHash) {\n    TypeHandler typeHandler = GenericFileManagerObjectFactory\n        .getTypeHandlerFromClassName((String) typeHandlerHash.get(\"className\"));\n    if (typeHandler != null) {\n      typeHandler.setElementName((String) typeHandlerHash.get(\"elementName\"));\n    }\n    return typeHandler;\n  }\n  public static Properties getPropertiesFromXmlRpc(Map<String, String> propHash) {\n    Properties props = new Properties();\n    if (propHash != null && propHash.keySet().size() > 0) {\n      for (Map.Entry<String, String> propName : propHash.entrySet()) {\n        String propValue = propName.getValue();\n        props.setProperty(propName.getKey(), propValue);\n      }\n    }\n    return props;\n  }\n  public static Map<String, String> getXmlRpcProperties(Properties props) {\n    Map<String, String> propHash = new Hashtable<String, String>();\n    if (props != null && props.keySet().size() > 0) {\n      for (Object o : props.keySet()) {\n        String propName = (String) o;\n        String propValue = props.getProperty(propName);\n        propHash.put(propName, propValue);\n      }\n    }\n    return propHash;\n  }\n  public static Vector<Map<String, Object>> getXmlRpcReferences(List<Reference> references) {\n    Vector<Map<String, Object>> refVector = new Vector<Map<String, Object>>();\n    if (references == null) {\n      return refVector;\n    }\n    for (Reference reference : references) {\n      Map<String, Object> refHash = getXmlRpcReference(reference);\n      refVector.add(refHash);\n    }\n    return refVector;\n  }\n  public static List<Reference> getReferencesFromXmlRpc(Vector<Map<String, Object>> referenceVector) {\n    List<Reference> references = new Vector<Reference>();\n    for (Map<String, Object> aReferenceVector : referenceVector) {\n      Reference r = getReferenceFromXmlRpc(aReferenceVector);\n      references.add(r);\n    }\n    return references;\n  }\n  public static Map<String, Object> getXmlRpcReference(Reference reference) {\n    Map<String, Object> referenceHash = new Hashtable<String, Object>();\n    referenceHash.put(\"origReference\", reference.getOrigReference());\n    referenceHash.put(\"dataStoreReference\", reference\n                                                .getDataStoreReference() != null ? reference\n                                                .getDataStoreReference() : \"\");\n    referenceHash.put(\"fileSize\",\n        Long.toString(reference.getFileSize()));\n    referenceHash.put(\"mimeType\", (reference.getMimeType() == null) ? \"\"\n                                                                    : reference.getMimeType().getName());\n    return referenceHash;\n  }\n  public static Reference getReferenceFromXmlRpc(Map<String, Object> referenceHash) {\n    Reference reference = new Reference();\n    reference.setDataStoreReference((String) referenceHash\n        .get(\"dataStoreReference\"));\n    reference.setOrigReference((String) referenceHash.get(\"origReference\"));\n    reference.setFileSize(Long.parseLong(referenceHash.get(\"fileSize\").toString()));\n    reference.setMimeType((String) referenceHash.get(\"mimeType\"));\n    return reference;\n  }\n  public static Reference getReferenceFromXmlRpcHashtable(Map<String, Object> referenceHash) {\n    Reference reference = new Reference();\n    reference.setDataStoreReference((String) referenceHash\n        .get(\"dataStoreReference\"));\n    reference.setOrigReference((String) referenceHash.get(\"origReference\"));\n    reference.setFileSize(Long.parseLong(referenceHash.get(\"fileSize\").toString()));\n    reference.setMimeType((String) referenceHash.get(\"mimeType\"));\n    return reference;\n  }\n  public static Vector<Map<String, Object>> getXmlRpcElementListHashtable(List<Element> elementList) {\n    Vector<Map<String, Object>> elementVector = new Vector<Map<String, Object>>(elementList.size());\n    for (Element element : elementList) {\n      Map<String, Object> elementHash = getXmlRpcElementHashTable(element);\n      elementVector.add(elementHash);\n    }\n    return elementVector;\n  }\n  public static Vector<Map<String, Object>> getXmlRpcElementList(List<Element> elementList) {\n    Vector<Map<String, Object>> elementVector = new Vector<Map<String, Object>>(elementList.size());\n    for (Element element : elementList) {\n      Map<String, Object> elementHash = getXmlRpcElement(element);\n      elementVector.add(elementHash);\n    }\n    return elementVector;\n  }\n  public static List<Element> getElementListFromXmlRpc(Vector<Map<String, Object>> elementVector) {\n    List<Element> elementList = new Vector<Element>(elementVector.size());\n    for (Map<String, Object> elementHash : elementVector) {\n      Element element = getElementFromXmlRpc(elementHash);\n      elementList.add(element);\n    }\n    return elementList;\n  }\n  public static Map<String, Object> getXmlRpcElement(Element element) {\n    Map<String, Object> elementHash = new HashMap<String, Object>();\n    elementHash.put(\"id\", element.getElementId());\n    elementHash.put(\"name\", element.getElementName());\n    elementHash.put(\"dcElement\", element.getDCElement() != null ? element\n        .getDCElement() : \"\");\n    elementHash.put(\"description\",\n        element.getDescription() != null ? element.getDescription()\n                                         : \"\");\n    return elementHash;\n  }\n<fim_suffix>  public static Map<String, Object> getXmlRpcElementHashTable(Element element) {\n    Map<String, Object> elementHash = new Hashtable<String, Object>();\n    elementHash.put(\"id\", element.getElementId());\n    elementHash.put(\"name\", element.getElementName());\n    elementHash.put(\"dcElement\", element.getDCElement() != null ? element\n        .getDCElement() : \"\");\n    elementHash.put(\"description\",\n        element.getDescription() != null ? element.getDescription()\n                                         : \"\");\n    return elementHash;\n  }<fim_middle>// function below has no smell\n"}