{"text": "<fim_prefix>/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\npackage org.apache.qpid.tests.protocol.v0_8;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.qpid.server.protocol.ErrorCodes;\nimport org.apache.qpid.server.protocol.ProtocolVersion;\nimport org.apache.qpid.server.protocol.v0_8.AMQShortString;\nimport org.apache.qpid.server.protocol.v0_8.FieldTable;\nimport org.apache.qpid.server.protocol.v0_8.transport.ConnectionCloseBody;\nimport org.apache.qpid.server.protocol.v0_8.transport.ConnectionCloseOkBody;\nimport org.apache.qpid.server.protocol.v0_8.transport.ConnectionOpenBody;\nimport org.apache.qpid.server.protocol.v0_8.transport.ConnectionSecureOkBody;\nimport org.apache.qpid.server.protocol.v0_8.transport.ConnectionStartOkBody;\nimport org.apache.qpid.server.protocol.v0_8.transport.ConnectionTuneOkBody;\n\npublic class ConnectionInteraction\n{\n    private final Interaction _interaction;\n    private final ConnectionCloseOkBody _closeOkBody;\n\n    private Map<String, Object> _startOkClientProperties = new HashMap<>();\n    private String _startOkMechanism;\n    private byte[] _startOkResponse;\n    private String _startOkLocale;\n\n    private int _tuneOkChannelMax;\n    private long _tuneOkFrameMax;\n    private int _tuneOkHeartbeat;\n    private String _openVirtualHost;\n\n    private int _closeReplyCode = ErrorCodes.REPLY_SUCCESS;\n    private String _closeReplyText;\n    private int _closeClassId;\n    private int _closeMethodId;\n\n    public ConnectionInteraction(final Interaction interaction)\n    {\n        _interaction = interaction;\n        _closeOkBody = interaction.getProtocolVersion() == ProtocolVersion.v0_8\n                ? ConnectionCloseOkBody.CONNECTION_CLOSE_OK_0_8\n                : ConnectionCloseOkBody.CONNECTION_CLOSE_OK_0_9;\n    }\n\n\n    public ConnectionInteraction startOkMechanism(final String startOkMechanism)\n    {\n        _startOkMechanism = startOkMechanism;\n        return this;\n    }\n\n    public ConnectionInteraction startOkClientProperties(final Map<String, Object> clientProperties)\n    {\n        _startOkClientProperties = clientProperties == null ? Collections.emptyMap() : new HashMap<>(clientProperties);\n        return this;\n    }\n\n    public Interaction startOk() throws Exception\n    {\n        return _interaction.sendPerformative(new ConnectionStartOkBody(FieldTable.convertToFieldTable(_startOkClientProperties),\n                                                                       AMQShortString.valueOf(_startOkMechanism),\n                                                                       _startOkResponse,\n                                                                       AMQShortString.valueOf(_startOkLocale)));\n    }\n\n    public Interaction secureOk(final byte[] secureOkResponse) throws Exception\n    {\n        return _interaction.sendPerformative(new ConnectionSecureOkBody(secureOkResponse));\n    }\n\n    public ConnectionInteraction tuneOkChannelMax(final int channelMax)\n    {\n        _tuneOkChannelMax = channelMax;\n        return this;\n    }\n\n    public ConnectionInteraction tuneOkFrameMax(final long frameMax)\n    {\n        _tuneOkFrameMax = frameMax;\n        return this;\n    }\n\n    public ConnectionInteraction tuneOkHeartbeat(final int heartbeat)\n    {\n        _tuneOkHeartbeat = heartbeat;\n        return this;\n    }\n\n    public Interaction tuneOk() throws Exception\n    {\n        return _interaction.sendPerformative(new ConnectionTuneOkBody(_tuneOkChannelMax,\n                                                                      _tuneOkFrameMax,\n                                                                      _tuneOkHeartbeat));\n    }\n\n    public ConnectionInteraction openVirtualHost(String virtualHost)\n    {\n        _openVirtualHost = virtualHost;\n        return this;\n    }\n\n<fim_suffix>    public Interaction open() throws Exception\n    {\n        return _interaction.sendPerformative(new ConnectionOpenBody(AMQShortString.valueOf(_openVirtualHost),\n                                                                    null,\n                                                                    false));\n    }\n\n    public Interaction close() throws Exception\n    {\n        return _interaction.sendPerformative(new ConnectionCloseBody(_interaction.getProtocolVersion(),\n                                                                     _closeReplyCode,\n                                                                     AMQShortString.valueOf(_closeReplyText),\n                                                                     _closeClassId,\n                                                                     _closeMethodId));\n    }\n\n    public Interaction closeOk() throws Exception\n    {\n        return _interaction.sendPerformative(_closeOkBody);\n    }\n}<fim_middle>// function below has no smell\n"}