{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cassandra.cql3;\n\nimport java.util.Locale;\nimport java.util.Objects;\n\n/**\n * Class for the names of the keyspace-prefixed elements (e.g. table, index, view names)\n */\n<fim_suffix>public class QualifiedName\n{\n    /**\n     * The keyspace name as stored internally.\n     */\n    private String keyspace;\n    private String name;\n\n    public QualifiedName()\n    {\n    }\n\n    public QualifiedName(String keyspace, String name)\n    {\n        this.keyspace = keyspace;\n        this.name = name;\n    }\n\n    /**\n     * Sets the keyspace.\n     *\n     * @param ks the keyspace name\n     * @param keepCase <code>true</code> if the case must be kept, <code>false</code> otherwise.\n     */\n    public final void setKeyspace(String ks, boolean keepCase)\n    {\n        keyspace = toInternalName(ks, keepCase);\n    }\n\n    /**\n     * Checks if the keyspace is specified.\n     * @return <code>true</code> if the keyspace is specified, <code>false</code> otherwise.\n     */\n    public final boolean hasKeyspace()\n    {\n        return keyspace != null;\n    }\n\n    public final String getKeyspace()\n    {\n        return keyspace;\n    }\n\n    public void setName(String cf, boolean keepCase)\n    {\n        name = toInternalName(cf, keepCase);\n    }\n\n    public String getName()\n    {\n        return name;\n    }\n\n    @Override\n    public String toString()\n    {\n        return hasKeyspace()\n             ? String.format(\"%s.%s\", keyspace, name)\n             : name;\n    }\n\n    @Override\n    public int hashCode()\n    {\n        return Objects.hash(keyspace, name);\n    }\n\n    public boolean equals(Object o)\n    {\n        if (this == o)\n            return true;\n\n        if (!(o instanceof QualifiedName))\n            return false;\n\n        QualifiedName qn = (QualifiedName) o;\n        return Objects.equals(keyspace, qn.keyspace) && name.equals(qn.name);\n    }\n\n    /**\n     * Converts the specified name into the name used internally.\n     *\n     * @param name the name\n     * @param keepCase <code>true</code> if the case must be kept, <code>false</code> otherwise.\n     * @return the name used internally.\n     */\n    private static String toInternalName(String name, boolean keepCase)\n    {\n        return keepCase ? name : name.toLowerCase(Locale.US);\n    }\n}<fim_middle>// class below has no smell\n"}