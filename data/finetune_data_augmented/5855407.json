{"text": "<fim_prefix>/**\n *\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage org.apache.tomcat.dbcp.dbcp2.managed;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\n\nimport org.apache.tomcat.dbcp.dbcp2.ConnectionFactory;\n\n/**\n * XAConnectionFactory is an extension of ConnectionFactory used to create connections in a transaction managed\n * environment. The XAConnectionFactory operates like a normal ConnectionFactory except a TransactionRegistry is\n * provided from which the XAResource for a connection can be obtained. This allows the existing DBCP pool code to work\n * with XAConnections and gives a the ManagedConnection a way to enlist a connection in the transaction.\n *\n * @since 2.0\n */\n<fim_suffix>public interface XAConnectionFactory extends ConnectionFactory {\n    /**\n     * Gets the TransactionRegistry for this connection factory which contains a the XAResource for every connection\n     * created by this factory.\n     *\n     * @return the transaction registry for this connection factory\n     */\n    TransactionRegistry getTransactionRegistry();\n\n    /**\n     * Create a new {@link java.sql.Connection} in an implementation specific fashion.\n     * <p>\n     * An implementation can assume that the caller of this will wrap the connection in a proxy that protects access to\n     * the setAutoCommit, commit and rollback when enrolled in a XA transaction.\n     * </p>\n     *\n     * @return a new {@link java.sql.Connection}\n     * @throws java.sql.SQLException\n     *             if a database error occurs creating the connection\n     */\n    @Override\n    Connection createConnection() throws SQLException;\n}<fim_middle>// class below has no smell\n"}