{"text": "<fim_prefix>\t        throws JasperException, IOException {\n\tisXml = false;\n\t/*\n\t * 'true' if the syntax (XML or standard) of the file is given\n\t * from external information: either via a JSP configuration element,\n\t * the \".jspx\" suffix, or the enclosing file (for included resources)\n\t */\n\tboolean isExternal = false;\n\t/*\n\t * Indicates whether we need to revert from temporary usage of\n\t * \"ISO-8859-1\" back to \"UTF-8\"\n\t */\n\tboolean revert = false;\n        JspConfig jspConfig = ctxt.getOptions().getJspConfig();\n        JspProperty jspProperty = jspConfig.findJspProperty(absFileName);\n        if (jspProperty.isXml() != null) {\n            // If <is-xml> is specified in a <jsp-property-group>, it is used.\n            isXml = JspUtil.booleanValue(jspProperty.isXml());\n\t    isExternal = true;\n\t} else if (absFileName.endsWith(\".jspx\")\n\t\t   || absFileName.endsWith(\".tagx\")) {\n\t    isXml = true;\n\t    isExternal = true;\n\t}\n\tif (isExternal && !isXml) {\n\t    // JSP (standard) syntax. Use encoding specified in jsp-config\n\t    // if provided.\n\t    sourceEnc = jspConfigPageEnc;\n\t    if (sourceEnc != null) {\n\t\treturn;\n\t    }\n\t    // We don't know the encoding\n\t    sourceEnc = \"ISO-8859-1\";\n\t} else {\n\t    // XML syntax or unknown, (auto)detect encoding ...\n\t    Object[] ret = XMLEncodingDetector.getEncoding(absFileName,\n\t\t\t\t\t\t\t   jarFile, ctxt, err);\n\t    sourceEnc = (String) ret[0];\n\t    if (((Boolean) ret[1]).booleanValue()) {\n\t\tisEncodingSpecifiedInProlog = true;\n\t    }\n\t    if (ret[2] != null && ((Boolean) ret[2]).booleanValue()) {\n                hasBom = true;\n\t    }\n\t    if (!isXml && sourceEnc.equalsIgnoreCase(\"utf-8\") && !hasBom) {\n\t\t/*\n\t\t * We don't know if we're dealing with XML or standard syntax.\n\t\t * Therefore, we need to check to see if the page contains\n\t\t * a <jsp:root> element.\n\t\t *\n                 * We need to be careful, because the page may be encoded in\n                 * ISO-8859-1 (or something entirely different: UTF-8 was \n                 * chosen as the default, for lack of better alternative),\n                 * and may contain byte sequences that will cause a UTF-8\n                 * converter to throw exceptions. \n\t\t *\n\t\t * It is safe to use a source encoding of ISO-8859-1 in this\n\t\t * case, as there are no invalid byte sequences in ISO-8859-1,\n\t\t * and the byte/character sequences we're looking for (i.e.,\n\t\t * <jsp:root>) are identical in either encoding (both UTF-8\n\t\t * and ISO-8859-1 are extensions of ASCII).\n\t\t */\n\t\tsourceEnc = \"ISO-8859-1\";\n\t\trevert = true;\n\t    }\n\t}\n\tif (isXml) {\n\t    // (This implies 'isExternal' is TRUE.)\n\t    // We know we're dealing with a JSP document (via JSP config or\n\t    // \".jspx\" suffix), so we're done.\n\t    return;\n\t}\n\t/*\n\t * At this point, 'isExternal' or 'isXml' is FALSE.\n\t * Search for jsp:root action, in order to determine if we're dealing \n\t * with XML or standard syntax (unless we already know what we're \n\t * dealing with, i.e., when 'isExternal' is TRUE and 'isXml' is FALSE).\n\t * No check for XML prolog, since nothing prevents a page from\n\t * outputting XML and still using JSP syntax (in this case, the \n\t * XML prolog is treated as template text).\n\t */\n\tJspReader jspReader = null;\n\ttry {\n\t    jspReader = new JspReader(ctxt, absFileName, sourceEnc, jarFile,\n\t\t\t\t      err);\n\t} catch (FileNotFoundException ex) {\n\t    throw new JasperException(ex);\n\t}\n        jspReader.setSingleFile(true);\n        Mark startMark = jspReader.mark();\n\tif (!isExternal) {\n\t    jspReader.reset(startMark);\n\t    if (hasJspRoot(jspReader)) {\n\t        isXml = true;\n\t\tif (revert) sourceEnc = \"UTF-8\";\n\t\treturn;\n\t    } else {\n\t        isXml = false;\n\t    }\n\t}\n\t/*\n\t * At this point, we know we're dealing with JSP syntax.\n\t * If an XML prolog is provided, it's treated as template text.\n\t * Determine the page encoding from the page directive, unless it's\n\t * specified via JSP config.\n\t */\n        if (!hasBom) {\n            sourceEnc = jspConfigPageEnc;\n        }\n\tif (sourceEnc == null) {\n\t    sourceEnc = getPageEncodingForJspSyntax(jspReader, startMark);\n\t    if (sourceEnc == null) {\n\t\t// Default to \"ISO-8859-1\" per JSP spec\n\t\tsourceEnc = \"ISO-8859-1\";\n\t\tisDefaultPageEncoding = true;\n\t    }\n\t}\n    }\n    /*\n     * Determines page source encoding for page or tag file in JSP syntax,\n     * by reading (in this order) the value of the 'pageEncoding' page\n     * directive attribute, or the charset value of the 'contentType' page\n     * directive attribute.\n     *\n     * @return The page encoding, or null if not found\n     */\n    private String getPageEncodingForJspSyntax(JspReader jspReader,\n\t\t\t\t\t       Mark startMark)\n\t        throws JasperException {\n\tString encoding = null;\n        String saveEncoding = null;\n        jspReader.reset(startMark);\n\t/*\n\t * Determine page encoding from directive of the form <%@ page %>,\n\t * <%@ tag %>, <jsp:directive.page > or <jsp:directive.tag >.\n\t */\n        while (true) {\n            if (jspReader.skipUntil(\"<\") == null) {\n                break;\n            }\n            // If this is a comment, skip until its end\n            if (jspReader.matches(\"%--\")) {\n                if (jspReader.skipUntil(\"--%>\") == null) {\n                    // error will be caught in Parser\n                    break;\n                }\n                continue;\n            }\n            boolean isDirective = jspReader.matches(\"%@\");\n            if (isDirective) {\n\t        jspReader.skipSpaces();\n            }\n            else {\n                isDirective = jspReader.matches(\"jsp:directive.\");\n            }\n            if (!isDirective) {\n                continue;\n            }\n\t    // compare for \"tag \", so we don't match \"taglib\"\n\t    if (jspReader.matches(\"tag \") || jspReader.matches(\"page\")) {\n\t\tjspReader.skipSpaces();\n                Attributes attrs = Parser.parseAttributes(this, jspReader);\n\t\tencoding = getPageEncodingFromDirective(attrs, \"pageEncoding\");\n                if (encoding != null) {\n                    break;\n                }\n\t\tencoding = getPageEncodingFromDirective(attrs, \"contentType\");\n                if (encoding != null) {\n                    saveEncoding = encoding;\n                }\n\t    }\n\t}\n        if (encoding == null) {\n            encoding = saveEncoding;\n        }\n\treturn encoding;\n    }\n    /*\n     * Scans the given attributes for the attribute with the given name,\n     * which is either 'pageEncoding' or 'contentType', and returns the\n     * specified page encoding.\n     *\n     * In the case of 'contentType', the page encoding is taken from the\n     * content type's 'charset' component.\n     *\n     * @param attrs The page directive attributes\n     * @param attrName The name of the attribute to search for (either\n     * 'pageEncoding' or 'contentType')\n     *\n     * @return The page encoding, or null\n     */\n<fim_suffix>    private String getPageEncodingFromDirective(Attributes attrs,\n                                                String attrName) {\n\tString value = attrs.getValue(attrName);\n        if (attrName.equals(\"pageEncoding\")) {\n            return value;\n        }\n        // attrName = contentType\n        String contentType = value;\n        String encoding = null;\n        if (contentType != null) {\n\t    int loc = contentType.indexOf(CHARSET);\n\t    if (loc != -1) {\n\t\tencoding = contentType.substring(loc + CHARSET.length());\n\t    }\n\t}\n\treturn encoding;\n    }<fim_middle>// function below has no smell\n"}