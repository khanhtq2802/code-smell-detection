{"text": "<fim_prefix>// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See License.txt in the repository root.\npackage com.microsoft.tfs.client.common.ui.dialogs.vc;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicReference;\nimport org.eclipse.jface.action.IMenuListener;\nimport org.eclipse.jface.action.IMenuManager;\nimport org.eclipse.jface.action.Separator;\nimport org.eclipse.jface.dialogs.IDialogConstants;\nimport org.eclipse.jface.viewers.IStructuredSelection;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.layout.GridData;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Button;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Label;\nimport org.eclipse.swt.widgets.Shell;\nimport com.microsoft.tfs.client.common.commands.vc.ScanLocalWorkspaceCommand;\nimport com.microsoft.tfs.client.common.framework.command.Command;\nimport com.microsoft.tfs.client.common.repository.TFSRepository;\nimport com.microsoft.tfs.client.common.ui.Messages;\nimport com.microsoft.tfs.client.common.ui.controls.vc.changes.CandidatesTable;\nimport com.microsoft.tfs.client.common.ui.controls.vc.changes.ChangeItem;\nimport com.microsoft.tfs.client.common.ui.dialogs.vc.candidates.CopyAction;\nimport com.microsoft.tfs.client.common.ui.dialogs.vc.candidates.DeleteFromDiskAction;\nimport com.microsoft.tfs.client.common.ui.dialogs.vc.candidates.IgnoreByExtensionAction;\nimport com.microsoft.tfs.client.common.ui.dialogs.vc.candidates.IgnoreByFileNameAction;\nimport com.microsoft.tfs.client.common.ui.dialogs.vc.candidates.IgnoreByFolderAction;\nimport com.microsoft.tfs.client.common.ui.dialogs.vc.candidates.IgnoreByLocalPathAction;\nimport com.microsoft.tfs.client.common.ui.dialogs.vc.candidates.PromoteAsRenameAction;\nimport com.microsoft.tfs.client.common.ui.dialogs.vc.candidates.RestoreAction;\nimport com.microsoft.tfs.client.common.ui.dialogs.vc.candidates.SelectAllAction;\nimport com.microsoft.tfs.client.common.ui.dialogs.vc.candidates.ViewLocalFolderAction;\nimport com.microsoft.tfs.client.common.ui.framework.command.UICommandExecutorFactory;\nimport com.microsoft.tfs.client.common.ui.framework.dialog.ExtendedButtonDialog;\nimport com.microsoft.tfs.client.common.ui.framework.layout.GridDataBuilder;\nimport com.microsoft.tfs.client.common.ui.framework.validation.ButtonValidatorBinding;\nimport com.microsoft.tfs.client.common.ui.teamexplorer.helpers.PendingChangesHelpers;\nimport com.microsoft.tfs.core.clients.versioncontrol.path.ServerPath;\nimport com.microsoft.tfs.core.clients.versioncontrol.soapextensions.PendingChange;\nimport com.microsoft.tfs.core.clients.versioncontrol.soapextensions.RecursionType;\nimport com.microsoft.tfs.core.clients.versioncontrol.specs.ItemSpec;\npublic class PromoteCandidateChangesDialog extends ExtendedButtonDialog {\n    private final TFSRepository repository;\n    private ChangeItem[] candidates;\n    private CandidatesTable table;\n    private CopyAction copyAction;\n    private SelectAllAction selectAllAction;\n    private ViewLocalFolderAction viewLocalFolderAction;\n    private IgnoreByLocalPathAction ignoreByLocalPathAction;\n    private IgnoreByExtensionAction ignoreByExtensionAction;\n    private IgnoreByFileNameAction ignoreByFileNameAction;\n    private IgnoreByFolderAction ignoreByFolderAction;\n    private DeleteFromDiskAction deleteFromDiskAction;\n    private RestoreAction restoreAction;\n    private PromoteAsRenameAction promoteAsRenameAction;\n    public PromoteCandidateChangesDialog(\n        final Shell parentShell,\n        final TFSRepository repository,\n        final ChangeItem[] candidates) {\n        super(parentShell);\n        this.repository = repository;\n        this.candidates = candidates;\n        // Disable standard OK/Cancel buttons.\n        setOptionIncludeDefaultButtons(false);\n        // Add back Promote/Close in their place. Order is important here, we\n        // want Cancel on the right so add it last.\n        addButtonDescription(\n            IDialogConstants.OK_ID,\n            Messages.getString(\"PromoteCandidateChangesDialog.PromoteButtonText\"), //$NON-NLS-1$\n            true);\n        addButtonDescription(IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);\n    }\n    // For action classes\n<fim_suffix>    public CandidatesTable getTable() {\n        return table;\n    }\n    // For action classes\n    public TFSRepository getRepository() {\n        return repository;\n    }\n    @Override\n    protected String provideDialogTitle() {\n        return Messages.getString(\"PromoteCandidateChangesDialog.PromoteCandidatesDialogTitle\"); //$NON-NLS-1$\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void hookAddToDialogArea(final Composite dialogArea) {\n        final GridLayout dialogLayout = new GridLayout();\n        dialogLayout.marginWidth = getHorizontalMargin();\n        dialogLayout.marginTop = getVerticalMargin();\n        dialogLayout.marginBottom = 0;\n        dialogLayout.horizontalSpacing = getHorizontalSpacing();\n        dialogLayout.verticalSpacing = getVerticalSpacing();\n        dialogArea.setLayout(dialogLayout);\n        final Label label = new Label(dialogArea, SWT.WRAP);\n        label.setText(Messages.getString(\"PromoteCandidateChangesDialog.PromoteCandidatesLabelText\")); //$NON-NLS-1$\n        GridDataBuilder.newInstance().wHint(10).hAlignFill().applyTo(label);\n        table = new CandidatesTable(dialogArea, SWT.FULL_SELECTION | SWT.MULTI | SWT.CHECK, candidates);\n        GridDataBuilder.newInstance().minHeight(200).minWidth(400).wHint(600).align(SWT.FILL, SWT.FILL).grab(\n            true,\n            true).applyTo(table);\n        table.getContextMenu().addMenuListener(new IMenuListener() {\n            @Override\n            public void menuAboutToShow(final IMenuManager manager) {\n                fillMenu(manager);\n            }\n        });\n        copyAction = new CopyAction(this);\n        selectAllAction = new SelectAllAction(this);\n        viewLocalFolderAction = new ViewLocalFolderAction(this);\n        ignoreByLocalPathAction = new IgnoreByLocalPathAction(this);\n        ignoreByExtensionAction = new IgnoreByExtensionAction(this);\n        ignoreByFileNameAction = new IgnoreByFileNameAction(this);\n        ignoreByFolderAction = new IgnoreByFolderAction(this);\n        deleteFromDiskAction = new DeleteFromDiskAction(this);\n        restoreAction = new RestoreAction(this);\n        promoteAsRenameAction = new PromoteAsRenameAction(this);\n        // Pack the first time so the label will layout with the narrow width.\n        // Let the table layout determine the width of the overall layout, not\n        // the label. Once pack finishes, then we can set the width hint on the\n        // label to be equal to the value computed for the label, and re-pack it\n        // so the label will re-layout the text and wrap it correctly.\n        dialogArea.pack();\n        final GridData labelData = (GridData) label.getLayoutData();\n        labelData.widthHint = label.getBounds().width;\n        dialogArea.pack();\n    }\n    @Override\n    protected void hookDialogIsOpen() {\n        /*\n         * We have to do this after hookAddToDialogArea completes to ensure the\n         * base class has created the buttons, because we declined to use\n         * default buttons in the constructor.\n         *\n         * Checkbox and elements validators are required, because the table\n         * doesn't fire an uncheck event in the case where an element is removed\n         * from the table.\n         */\n        final Button button = getButton(IDialogConstants.OK_ID);\n        new ButtonValidatorBinding(button).bind(table.getCheckboxValidator());\n        new ButtonValidatorBinding(button).bind(table.getElementsValidator());\n    }\n    public ChangeItem[] getCheckedCandidates() {\n        return table.getCheckedChangeItems();\n    }\n    private void fillMenu(final IMenuManager manager) {\n        final IStructuredSelection selection = (IStructuredSelection) table.getSelection();\n        manager.removeAll();\n        manager.add(copyAction);\n        manager.add(selectAllAction);\n        manager.add(viewLocalFolderAction);\n        if (ignoreByLocalPathAction.isVisible(selection)\n            || ignoreByExtensionAction.isVisible(selection)\n            || ignoreByFileNameAction.isVisible(selection)\n            || ignoreByFolderAction.isVisible(selection)) {\n            manager.add(new Separator());<fim_middle>// function below has no smell\n"}