{"text": "<fim_prefix>package org.springframework.roo.felix;\n\nimport org.apache.commons.lang3.Validate;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\nimport org.osgi.framework.Bundle;\nimport org.osgi.framework.BundleContext;\n\n/**\n * Represents a Bundle Symbolic Name.\n * \n * @author Ben Alex\n * @since 1.0\n */\n<fim_suffix>public class BundleSymbolicName implements Comparable<BundleSymbolicName> {\n\n  private final String key;\n\n  public BundleSymbolicName(final String key) {\n    Validate.notBlank(key, \"Key required\");\n    this.key = key;\n  }\n\n  public final int compareTo(final BundleSymbolicName o) {\n    if (o == null) {\n      return -1;\n    }\n    return key.compareTo(o.key);\n  }\n\n  @Override\n  public final boolean equals(final Object obj) {\n    return obj instanceof BundleSymbolicName && compareTo((BundleSymbolicName) obj) == 0;\n  }\n\n  /**\n   * Locates the bundle ID for this BundleSymbolicName, if available.\n   * \n   * @param context to search (required)\n   * @return the ID (or null if cannot be found)\n   */\n  public Long findBundleIdWithoutFail(final BundleContext context) {\n    Validate.notNull(context, \"Bundle context is unavailable\");\n    final Bundle[] bundles = context.getBundles();\n    if (bundles == null) {\n      throw new IllegalStateException(\"Bundle IDs cannot be retrieved as BundleContext unavailable\");\n    }\n    for (final Bundle b : bundles) {\n      if (getKey().equals(b.getSymbolicName())) {\n        return b.getBundleId();\n      }\n    }\n    throw new IllegalStateException(\"Bundle symbolic name '\" + getKey()\n        + \"' has no local bundle ID at this time\");\n  }\n\n  /**\n   * Locates the Bundle for this BundleSymbolicName, if available\n   * \n   * @param context\n   * @return\n   */\n  public Bundle findBundleWithoutFail(final BundleContext context) {\n    Validate.notNull(context, \"Bundle context is unavailable\");\n    final Bundle[] bundles = context.getBundles();\n    if (bundles == null) {\n      throw new IllegalStateException(\"Bundle cannot be retrieved as BundleContext unavailable\");\n    }\n    for (final Bundle b : bundles) {\n      if (getKey().equals(b.getSymbolicName())) {\n        return b;\n      }\n    }\n    throw new IllegalStateException(\"Bundle symbolic name '\" + getKey()\n        + \"' has no local bundle at this time\");\n  }\n\n  public String getKey() {\n    return key;\n  }\n\n  @Override\n  public final int hashCode() {\n    return key.hashCode();\n  }\n\n  @Override\n  public String toString() {\n    final ToStringBuilder builder = new ToStringBuilder(this);\n    builder.append(\"key\", key);\n    return builder.toString();\n  }\n}<fim_middle>// class below has no smell\n"}