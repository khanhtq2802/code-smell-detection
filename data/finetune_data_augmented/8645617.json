{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.startup.servlet;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletContextEvent;\nimport javax.servlet.ServletContextListener;\nimport org.apache.ignite.Ignite;\nimport org.apache.ignite.IgniteCheckedException;\nimport org.apache.ignite.IgniteException;\nimport org.apache.ignite.IgniteIllegalStateException;\nimport org.apache.ignite.configuration.IgniteConfiguration;\nimport org.apache.ignite.internal.IgnitionEx;\nimport org.apache.ignite.internal.processors.resource.GridSpringResourceContext;\nimport org.apache.ignite.internal.util.typedef.G;\nimport org.apache.ignite.internal.util.typedef.internal.S;\nimport org.apache.ignite.internal.util.typedef.internal.U;\nimport org.apache.ignite.lang.IgniteBiTuple;\n\n/**\n * This class defines Ignite startup based on servlet context listener.\n * This startup can be used to start Ignite inside any web container.\n * <p>\n * This startup must be defined in {@code web.xml} file.\n * <pre name=\"code\" class=\"xml\">\n * &lt;listener&gt;\n *     &lt;listener-class&gt;org.apache.ignite.startup.servlet.ServletContextListenerStartup&lt;/listener-class&gt;\n * &lt;/listener&gt;\n *\n * &lt;context-param&gt;\n *     &lt;param-name&gt;IgniteConfigurationFilePath&lt;/param-name&gt;\n *     &lt;param-value&gt;config/default-config.xml&lt;/param-value&gt;\n * &lt;/context-param&gt;\n * </pre>\n * <p>\n * Servlet context listener based startup may be used in any web container like Tomcat, Jetty and etc.\n * Depending on the way this startup is deployed the Ignite instance can be accessed\n * by either all web applications or by only one. See web container class loading architecture:\n * <ul>\n * <li><a target=_blank href=\"http://tomcat.apache.org/tomcat-7.0-doc/class-loader-howto.html\">http://tomcat.apache.org/tomcat-7.0-doc/class-loader-howto.html</a></li>\n * <li><a target=_blank href=\"http://docs.codehaus.org/display/JETTY/Classloading\">http://docs.codehaus.org/display/JETTY/Classloading</a></li>\n * </ul>\n * <p>\n * <h2 class=\"header\">Tomcat</h2>\n * There are two ways to start Ignite on Tomcat.\n * <ul>\n * <li>Ignite started when web container starts and Ignite instance is accessible only to all web applications.\n *     <ol>\n *     <li>Add Ignite libraries in Tomcat common loader.\n *         Add in file {@code $TOMCAT_HOME/conf/catalina.properties} for property {@code common.loader}\n *         the following {@code $IGNITE_HOME/*.jar,$IGNITE_HOME/libs/*.jar}\n *         (replace {@code $IGNITE_HOME} with absolute path).\n *     </li>\n *     <li>Configure this startup in {@code $TOMCAT_HOME/conf/web.xml}\n *         <pre name=\"code\" class=\"xml\">\n *         &lt;listener&gt;\n *             &lt;listener-class&gt;org.apache.ignite.startup.servlet.ServletContextListenerStartup&lt;/listener-class&gt;\n *         &lt;/listener&gt;\n *\n *         &lt;context-param&gt;\n *             &lt;param-name&gt;IgniteConfigurationFilePath&lt;/param-name&gt;\n *             &lt;param-value&gt;config/default-config.xml&lt;/param-value&gt;\n *         &lt;/context-param&gt;\n *         </pre>\n *     </li>\n *     </ol>\n * </li>\n * <li>\n * Ignite started from WAR-file and Ignite instance is accessible only to that web application.\n * Difference with approach described above is that {@code web.xml} file and all libraries should\n * be added in WAR file without changes in Tomcat configuration files.\n * </li>\n * </ul>\n */\n<fim_suffix>public class ServletContextListenerStartup implements ServletContextListener {\n    /** Configuration file path parameter name. */\n    public static final String IGNITE_CFG_FILE_PATH_PARAM = \"IgniteConfigurationFilePath\";\n\n    /** Names of started Ignite instances. */\n    private final Collection<String> igniteInstanceNames = new ArrayList<>();\n\n    /** {@inheritDoc} */\n    @Override public void contextInitialized(ServletContextEvent evt) {\n        ServletContext ctx = evt.getServletContext();\n\n        String cfgFile = ctx.getInitParameter(IGNITE_CFG_FILE_PATH_PARAM);\n\n        Collection<IgniteConfiguration> cfgs;\n        GridSpringResourceContext rsrcCtx = null;\n\n        if (cfgFile != null) {\n            URL cfgUrl = null;\n\n            try {\n                cfgUrl = evt.getServletContext().getResource(\"/META-INF/\" + cfgFile);\n            }\n            catch (MalformedURLException ignored) {\n                // Ignore, we still need to try with IGNITE_HOME.\n            }\n\n            if (cfgUrl == null)\n                // Try with IGNITE_HOME and with context class loader.\n                cfgUrl = U.resolveIgniteUrl(cfgFile);\n\n            if (cfgUrl == null)\n                throw new IgniteException(\"Failed to find Spring configuration file (path provided should be \" +\n                    \"either absolute, relative to IGNITE_HOME, or relative to META-INF folder): \" + cfgFile);\n\n            IgniteBiTuple<Collection<IgniteConfiguration>, ? extends GridSpringResourceContext> t;\n\n            try {\n                t = IgnitionEx.loadConfigurations(cfgUrl);\n            }\n            catch (IgniteCheckedException e) {\n                throw new IgniteException(\"Failed to load Ignite configuration.\", e);\n            }\n\n            cfgs = t.get1();\n            rsrcCtx  = t.get2();\n\n            if (cfgs.isEmpty())\n                throw new IgniteException(\"Can't find grid factory configuration in: \" + cfgUrl);\n        }\n        else\n            cfgs = Collections.<IgniteConfiguration>singleton(new IgniteConfiguration());\n\n        try {\n            assert !cfgs.isEmpty();\n\n            for (IgniteConfiguration cfg : cfgs) {\n                assert cfg != null;\n\n                Ignite ignite;\n\n                synchronized (ServletContextListenerStartup.class) {\n                    try {\n                        ignite = G.ignite(cfg.getIgniteInstanceName());\n                    }\n                    catch (IgniteIllegalStateException ignored) {\n                        ignite = IgnitionEx.start(new IgniteConfiguration(cfg), rsrcCtx);\n                    }\n                }\n\n                // Check if grid is not null - started properly.\n                if (ignite != null)\n                    igniteInstanceNames.add(ignite.name());\n            }\n        }\n        catch (IgniteCheckedException e) {\n            // Stop started grids only.\n            for (String name : igniteInstanceNames)\n                G.stop(name, true);\n\n            throw new IgniteException(\"Failed to start Ignite.\", e);\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public void contextDestroyed(ServletContextEvent evt) {\n        // Stop started grids only.\n        for (String name: igniteInstanceNames)\n            G.stop(name, true);\n    }\n\n    /** {@inheritDoc} */\n    @Override public String toString() {\n        return S.toString(ServletContextListenerStartup.class, this);\n    }\n}<fim_middle>// class below is blob\n"}