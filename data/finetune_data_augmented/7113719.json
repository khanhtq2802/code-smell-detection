{"text": "<fim_prefix>/* GENERATED SOURCE. DO NOT MODIFY. */\n// \u00a9 2016 and later: Unicode, Inc. and others.\n// License & terms of use: http://www.unicode.org/copyright.html#License\n/*\n *******************************************************************************\n * Copyright (C) 2002-2010, International Business Machines Corporation and    *\n * others. All Rights Reserved.                                                *\n *******************************************************************************\n */\npackage android.icu.impl;\n\nimport android.icu.text.Replaceable;\nimport android.icu.text.ReplaceableString;\nimport android.icu.text.Transliterator;\nimport android.icu.text.UnicodeMatcher;\n/**\n * @author Ram\n * @hide Only a subset of ICU is exposed in Android\n */\n//This class contains utility functions so testing not needed\n///CLOVER:OFF\npublic class UtilityExtensions {\n    /**\n     * Append the given string to the rule.  Calls the single-character\n     * version of appendToRule for each character.\n     */\n    public static void appendToRule(StringBuffer rule,\n                                    String text,\n                                    boolean isLiteral,\n                                    boolean escapeUnprintable,\n                                    StringBuffer quoteBuf) {\n        for (int i=0; i<text.length(); ++i) {\n            // Okay to process in 16-bit code units here\n            Utility.appendToRule(rule, text.charAt(i), isLiteral, escapeUnprintable, quoteBuf);\n        }\n    }\n\n\n    /**\n     * Given a matcher reference, which may be null, append its\n     * pattern as a literal to the given rule.\n     */\n    public static void appendToRule(StringBuffer rule,\n                                    UnicodeMatcher matcher,\n                                    boolean escapeUnprintable,\n                                    StringBuffer quoteBuf) {\n        if (matcher != null) {\n            appendToRule(rule, matcher.toPattern(escapeUnprintable),\n                         true, escapeUnprintable, quoteBuf);\n        }\n    }\n    /**\n     * For debugging purposes; format the given text in the form\n     * aaa{bbb|ccc|ddd}eee, where the {} indicate the context start\n     * and limit, and the || indicate the start and limit.\n     */\n    public static String formatInput(ReplaceableString input,\n                                     Transliterator.Position pos) {\n        StringBuffer appendTo = new StringBuffer();\n        formatInput(appendTo, input, pos);\n        return android.icu.impl.Utility.escape(appendTo.toString());\n    }\n\n    /**\n     * For debugging purposes; format the given text in the form\n     * aaa{bbb|ccc|ddd}eee, where the {} indicate the context start\n     * and limit, and the || indicate the start and limit.\n     */\n    public static StringBuffer formatInput(StringBuffer appendTo,\n                                           ReplaceableString input,\n                                           Transliterator.Position pos) {\n        if (0 <= pos.contextStart &&\n            pos.contextStart <= pos.start &&\n            pos.start <= pos.limit &&\n            pos.limit <= pos.contextLimit &&\n            pos.contextLimit <= input.length()) {\n\n            String  b, c, d;\n            //a = input.substring(0, pos.contextStart);\n            b = input.substring(pos.contextStart, pos.start);\n            c = input.substring(pos.start, pos.limit);\n            d = input.substring(pos.limit, pos.contextLimit);\n            //e = input.substring(pos.contextLimit, input.length());\n            appendTo.//append(a).\n                append('{').append(b).\n                append('|').append(c).append('|').append(d).\n                append('}')\n                //.append(e)\n                ;\n        } else {\n            appendTo.append(\"INVALID Position {cs=\" +\n                            pos.contextStart + \", s=\" + pos.start + \", l=\" +\n                            pos.limit + \", cl=\" + pos.contextLimit + \"} on \" +\n                            input);\n        }\n        return appendTo;\n    }\n\n    /**\n     * Convenience method.\n     */\n    public static String formatInput(Replaceable input,\n                                     Transliterator.Position pos) {\n        return formatInput((ReplaceableString) input, pos);\n    }\n\n    /**\n     * Convenience method.\n     */\n<fim_suffix>    public static StringBuffer formatInput(StringBuffer appendTo,\n                                           Replaceable input,\n                                           Transliterator.Position pos) {\n        return formatInput(appendTo, (ReplaceableString) input, pos);\n    }\n\n}\n//CLOVER:ON<fim_middle>// function below has no smell\n"}