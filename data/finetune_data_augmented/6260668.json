{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2013, 2014- UT-Battelle, LLC.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   Initial API and implementation and/or initial documentation - Jay Jay Billings,\n *   Jordan H. Deyton, Dasha Gorin, Alexander J. McCaskey, Taylor Patterson,\n *   Claire Saunders, Matthew Wang, Anna Wojtowicz\n *******************************************************************************/\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.file.Files;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Scanner;\n\n/**\n * This application is designed to clean files of any superfluous documentation\n * created by UML to Java transformations. To use it:\n * \n * 1.) Import the project into Eclipse > General > Existing project\n * 2.) Right click ICEDocCleaner.java > Run as Java Application\n * 3.) Interaction is at the console; input the full filepath for a .java file \n *     (or type \"exit\" to terminate)\n * \n * @author Anna Wojtowicz\n */\n<fim_suffix>public class ICEDocCleaner {\n\t\t\n    public static void main(String[] args) throws IOException {\n\n    \t// Get a handle on the file\n    \tSystem.out.println(\"Enter full filepath: \");\n    \tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    \tString path = br.readLine();\n    \tif (path.contains(\"exit\")) {\n    \t\treturn;\n    \t}\n    \tFile javaFile = new File(path);\n    \t\n    \tif (javaFile != null && javaFile.exists() && javaFile.isFile()) {\n    \t\t\n    \t\t\tSystem.out.println(\"File found, beginning cleaning...\");\n\t    \t\tFileInputStream inputStream = null;\n\t    \t\tScanner scanner = null;\n\t    \t\tStringBuilder sb = null;\n\t    \t\t\n\t    \t\ttry {\n\t    \t\t\t\n        \t\t// Set up a scanner (should be more efficient than Files.nio for very big files)\n    \t\t    inputStream = new FileInputStream(javaFile);\n    \t\t    scanner = new Scanner(inputStream, \"UTF-8\");\n    \t\t    String line = \"\";\n    \t\t    sb = new StringBuilder();\n    \t\t    \n    \t\t    while (scanner.hasNextLine() && (line = scanner.nextLine()) != null) {\n    \t\t    \t    \t\t    \t\n    \t\t    \tif (line.matches(\"\\\\s*\\\\*\\\\s*<!-- (begin|end)-UML-doc -->\\\\s*\")\n    \t\t    \t\t\t|| line.matches(\"\\\\s*\\\\*\\\\s*<!-- (begin|end)-UML-doc -->\\\\s*<!-- (begin|end)-UML-doc -->\")\n    \t\t    \t\t\t|| line.matches(\"\\\\s*// (begin|end)-user-code\\\\s*\")\n    \t\t    \t\t\t|| line.contains(\"@generated\")\n    \t\t    \t\t\t|| line.contains(\"UML to Java\")) {\n\n    \t\t    \t\t// Skip over the line\n    \t\t    \t\tcontinue;\n    \t\t    \t\t\n    \t\t    \t} else {\n\n\t    \t\t    \t// Append the line to the StringBuilder\n\t        \t\t\tsb.append(line + \"\\n\");\n    \t\t    \t}\n    \t\t    }\n    \t\t    \n    \t\t    System.out.println(\"Done cleaning.\");\n    \t\t    \n    \t\t    // Note that Scanner suppresses exceptions, throw manually\n    \t\t    if (scanner.ioException() != null) {\n    \t\t        throw scanner.ioException();\n    \t\t    }\n    \t\t    \n    \t\t} finally {\n    \t\t\t\n    \t\t\t// Close this MF dooown\n    \t\t    if (inputStream != null) {\n    \t\t        inputStream.close();\n    \t\t    }\n    \t\t    if (scanner != null) {\n    \t\t        scanner.close();\n    \t\t    }\n    \t\t}\n\t        \n\t    \t// Create a backup file in case something goes wrong\n        \tint fileExtIndex = javaFile.getPath().lastIndexOf(\".\");\n        \tString bakFilePath = javaFile.getPath().substring(0, fileExtIndex) + \"_bak\" + javaFile.getPath().substring(fileExtIndex);\n        \t\n    \t\tFile bakFile = new File(bakFilePath);\n    \t\tif (bakFile.exists()) {\n    \t\t\tbakFile.delete();\n    \t\t}\n    \t\tFiles.copy(javaFile.toPath(), bakFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n    \t\tSystem.out.println(\"Creating back-up file... (will delete on successful exit)\\n\" + bakFile.getPath());\n    \t\t\n        \t// Overwrite the original file\n        \tBufferedWriter writer = new BufferedWriter(new FileWriter(javaFile));\n        \twriter.write(sb.toString());\n        \tSystem.out.println(\"Overwriting original file...\");\n        \tif (writer != null) {\n        \t\twriter.close();\n        \t}\n        \t\n        \tSystem.out.println(\"Process complete!\");\n        \tbakFile.deleteOnExit();\n\t    \t\t\n    \t} else {\n    \t\tSystem.out.println(\"Could not find file.\");\n    \t\tmain(args);\n    \t}\n    \t\n    \t// k bai.\n    \treturn;\n    }\n\n}<fim_middle>// class below has no smell\n"}