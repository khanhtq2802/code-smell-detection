{"text": "<fim_prefix>/*\n * Copyright 2018 The Error Prone Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.errorprone.bugpatterns.threadsafety;\n\nimport static com.google.errorprone.BugPattern.SeverityLevel.WARNING;\nimport static com.google.errorprone.matchers.Matchers.anyOf;\n\nimport com.google.errorprone.BugPattern;\nimport com.google.errorprone.VisitorState;\nimport com.google.errorprone.bugpatterns.BugChecker;\nimport com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\nimport com.google.errorprone.matchers.Description;\nimport com.google.errorprone.matchers.Matcher;\nimport com.google.errorprone.matchers.Matchers;\nimport com.sun.source.tree.ExpressionTree;\nimport com.sun.source.tree.MethodInvocationTree;\nimport java.util.regex.Pattern;\n\n/**\n * Bug checker to detect usage of deprecated Thread methods as detailed in {@link Thread}\n *\n * @author siyuanl@google.com (Siyuan Liu)\n */\n<fim_suffix>@BugPattern(\n    name = \"DeprecatedThreadMethods\",\n    summary = \"Avoid deprecated Thread methods; read the method's javadoc for details.\",\n    severity = WARNING)\npublic class DeprecatedThreadMethods extends BugChecker implements MethodInvocationTreeMatcher {\n\n  private static final Pattern METHOD_NAME_REGEX =\n      Pattern.compile(\"stop|countStackFrames|destroy|resume|suspend\");\n\n  // Might be overmatching--Thread subclasses could have additional methods with same names\n  private static final Matcher<ExpressionTree> DEPRACATED =\n      anyOf(\n          Matchers.instanceMethod()\n              .onDescendantOf(\"java.lang.Thread\")\n              .withNameMatching(METHOD_NAME_REGEX));\n\n  @Override\n  public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n    return DEPRACATED.matches(tree, state) ? describeMatch(tree) : Description.NO_MATCH;\n  }\n}<fim_middle>// class below has no smell\n"}