{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.mapjoin.optimized;\n\nimport java.io.IOException;\n\nimport org.apache.hadoop.hive.ql.exec.JoinUtil.JoinResult;\nimport org.apache.hadoop.hive.ql.exec.persistence.MapJoinTableContainer;\nimport org.apache.hadoop.hive.ql.exec.persistence.MapJoinTableContainer.ReusableGetAdaptor;\nimport org.apache.hadoop.hive.ql.exec.vector.mapjoin.hashtable.VectorMapJoinHashMultiSetResult;\nimport org.apache.hadoop.hive.ql.exec.vector.mapjoin.hashtable.VectorMapJoinLongHashMultiSet;\nimport org.apache.hadoop.hive.ql.plan.VectorMapJoinDesc.HashTableKeyType;\n\n/*\n * An single long value hash map based on the BytesBytesMultiHashMultiSet.\n *\n * We serialize the long key into BinarySortable format into an output buffer accepted by\n * BytesBytesMultiHashMultiSet.\n */\n<fim_suffix>public class VectorMapJoinOptimizedLongHashMultiSet\n              extends VectorMapJoinOptimizedHashMultiSet\n              implements VectorMapJoinLongHashMultiSet  {\n\n  private VectorMapJoinOptimizedLongCommon longCommon;\n\n  @Override\n  public boolean useMinMax() {\n    return longCommon.useMinMax();\n  }\n\n  @Override\n  public long min() {\n    return longCommon.min();\n  }\n\n  @Override\n  public long max() {\n    return longCommon.max();\n  }\n\n  /*\n  @Override\n  public void putRow(BytesWritable currentKey, BytesWritable currentValue)\n      throws SerDeException, HiveException, IOException {\n\n    longCommon.adaptPutRow((VectorMapJoinOptimizedHashTable) this, currentKey, currentValue);\n  }\n  */\n\n  @Override\n  public JoinResult contains(long key,\n      VectorMapJoinHashMultiSetResult hashMultiSetResult) throws IOException {\n\n    SerializedBytes serializedBytes = longCommon.serialize(key);\n\n    return super.contains(serializedBytes.bytes, serializedBytes.offset, serializedBytes.length,\n        hashMultiSetResult);\n\n  }\n\n  public VectorMapJoinOptimizedLongHashMultiSet(\n        boolean minMaxEnabled, boolean isOuterJoin, HashTableKeyType hashTableKeyType,\n        MapJoinTableContainer originalTableContainer, ReusableGetAdaptor hashMapRowGetter) {\n    super(originalTableContainer, hashMapRowGetter);\n    longCommon =  new VectorMapJoinOptimizedLongCommon(minMaxEnabled, isOuterJoin, hashTableKeyType);\n  }\n}<fim_middle>// class below has no smell\n"}