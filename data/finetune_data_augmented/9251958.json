{"text": "<fim_prefix>/*\n * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.\n */\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.sun.org.apache.xerces.internal.impl.xs;\nimport com.sun.org.apache.xerces.internal.impl.dv.ValidatedInfo;\nimport com.sun.org.apache.xerces.internal.impl.xs.util.StringListImpl;\nimport com.sun.org.apache.xerces.internal.xs.AttributePSVI;\nimport com.sun.org.apache.xerces.internal.xs.ItemPSVI;\nimport com.sun.org.apache.xerces.internal.xs.ShortList;\nimport com.sun.org.apache.xerces.internal.xs.StringList;\nimport com.sun.org.apache.xerces.internal.xs.XSAttributeDeclaration;\nimport com.sun.org.apache.xerces.internal.xs.XSConstants;\nimport com.sun.org.apache.xerces.internal.xs.XSSimpleTypeDefinition;\nimport com.sun.org.apache.xerces.internal.xs.XSTypeDefinition;\nimport com.sun.org.apache.xerces.internal.xs.XSValue;\n/**\n * Attribute PSV infoset augmentations implementation.\n * The PSVI information for attributes will be available at the startElement call.\n *\n * @xerces.internal\n *\n * @author Elena Litani IBM\n * @LastModified: Nov 2017\n */\npublic class AttributePSVImpl implements AttributePSVI {\n    /** attribute declaration */\n    protected XSAttributeDeclaration fDeclaration = null;\n    /** type of attribute, simpleType */\n    protected XSTypeDefinition fTypeDecl = null;\n    /** If this attribute was explicitly given a\n     * value in the original document, this is false; otherwise, it is true */\n    protected boolean fSpecified = false;\n    /** Schema value */\n    protected ValidatedInfo fValue = new ValidatedInfo();\n    /** validation attempted: none, partial, full */\n    protected short fValidationAttempted = AttributePSVI.VALIDATION_NONE;\n    /** validity: valid, invalid, unknown */\n    protected short fValidity = AttributePSVI.VALIDITY_NOTKNOWN;\n    /** error codes and error messages */\n    protected String[] fErrors = null;\n    /** validation context: could be QName or XPath expression*/\n    protected String fValidationContext = null;\n    /** true if this object is immutable **/\n    protected boolean fIsConstant;\n    public AttributePSVImpl() {}\n    public AttributePSVImpl(boolean isConstant, AttributePSVI attrPSVI) {\n        fDeclaration = attrPSVI.getAttributeDeclaration();\n        fTypeDecl = attrPSVI.getTypeDefinition();\n        fSpecified = attrPSVI.getIsSchemaSpecified();\n        fValue.copyFrom(attrPSVI.getSchemaValue());\n        fValidationAttempted = attrPSVI.getValidationAttempted();\n        fValidity = attrPSVI.getValidity();\n        if (attrPSVI instanceof AttributePSVImpl) {\n            final AttributePSVImpl attrPSVIImpl = (AttributePSVImpl) attrPSVI;\n            fErrors = (attrPSVIImpl.fErrors != null) ? attrPSVIImpl.fErrors.clone() : null;\n        }\n        else {\n            final StringList errorCodes = attrPSVI.getErrorCodes();\n            final int length = errorCodes.getLength();\n            if (length > 0) {\n                final StringList errorMessages = attrPSVI.getErrorMessages();\n                final String[] errors = new String[length << 1];\n                for (int i = 0, j = 0; i < length; ++i) {\n                    errors[j++] = errorCodes.item(i);\n                    errors[j++] = errorMessages.item(i);\n                }\n                fErrors = errors;\n            }\n        }\n        fValidationContext = attrPSVI.getValidationContext();\n        fIsConstant = isConstant;\n    }\n    //\n    // AttributePSVI methods\n    //\n    /* (non-Javadoc)\n     * @see com.sun.org.apache.xerces.internal.xs.ItemPSVI#constant()\n     */\n    public ItemPSVI constant() {\n        if (isConstant()) {\n            return this;\n        }\n        return new AttributePSVImpl(true, this);\n    }\n    /* (non-Javadoc)\n     * @see com.sun.org.apache.xerces.internal.xs.ItemPSVI#isConstant()\n     */\n    public boolean isConstant() {\n        return fIsConstant;\n    }\n    /**\n     * [schema default]\n     *\n     * @return The canonical lexical representation of the declaration's {value constraint} value.\n     * @see <a href=\"http://www.w3.org/TR/xmlschema-1/#e-schema_default>XML Schema Part 1: Structures [schema default]</a>\n     */\n    @SuppressWarnings(\"deprecation\")\n    public String getSchemaDefault() {\n        return fDeclaration == null ? null : fDeclaration.getConstraintValue();\n    }\n    /**\n     * [schema normalized value]\n     *\n     *\n     * @see <a href=\"http://www.w3.org/TR/xmlschema-1/#e-schema_normalized_value>XML Schema Part 1: Structures [schema normalized value]</a>\n     * @return the normalized value of this item after validation\n     */\n    @Deprecated\n    public String getSchemaNormalizedValue() {\n        return fValue.getNormalizedValue();\n    }\n    /**\n     * [schema specified]\n     * @see <a href=\"http://www.w3.org/TR/xmlschema-1/#e-schema_specified\">XML Schema Part 1: Structures [schema specified]</a>\n     * @return true - value was specified in schema, false - value comes from the infoset\n     */\n    public boolean getIsSchemaSpecified() {\n        return fSpecified;\n    }\n    /**\n     * Determines the extent to which the document has been validated\n     *\n     * @return return the [validation attempted] property. The possible values are\n     *         NO_VALIDATION, PARTIAL_VALIDATION and FULL_VALIDATION\n     */\n    public short getValidationAttempted() {\n        return fValidationAttempted;\n    }\n    /**\n     * Determine the validity of the node with respect\n     * to the validation being attempted\n     *\n     * @return return the [validity] property. Possible values are:\n     *         UNKNOWN_VALIDITY, INVALID_VALIDITY, VALID_VALIDITY\n     */\n    public short getValidity() {\n        return fValidity;\n    }\n    /**\n     * A list of error codes generated from validation attempts.\n     * Need to find all the possible subclause reports that need reporting\n     *\n     * @return list of error codes\n     */\n<fim_suffix>    public StringList getErrorCodes() {\n        if (fErrors == null || fErrors.length == 0) {\n            return StringListImpl.EMPTY_LIST;\n        }\n        return new PSVIErrorList(fErrors, true);\n    }\n    /**\n     * A list of error messages generated from the validation attempt or\n     * an empty <code>StringList</code> if no errors occurred during the\n     * validation attempt. The indices of error messages in this list are\n     * aligned with those in the <code>[schema error code]</code> list.\n     */\n    public StringList getErrorMessages() {\n        if (fErrors == null || fErrors.length == 0) {\n            return StringListImpl.EMPTY_LIST;\n        }\n        return new PSVIErrorList(fErrors, false);\n    }\n    // This is the only information we can provide in a pipeline.\n    public String getValidationContext() {\n        return fValidationContext;\n    }\n    /**\n     * An item isomorphic to the type definition used to validate this element.\n     *\n     * @return  a type declaration\n     */\n    public XSTypeDefinition getTypeDefinition() {\n        return fTypeDecl;\n    }\n    /**\n     * If and only if that type definition is a simple type definition\n     * with {variety} union, or a complex type definition whose {content type}\n     * is a simple thype definition with {variety} union, then an item isomorphic\n     * to that member of the union's {member type definitions} which actually\n     * validated the element item's normalized value.\n     *\n     * @return  a simple type declaration\n     */\n    public XSSimpleTypeDefinition getMemberTypeDefinition() {\n        return fValue.getMemberTypeDefinition();\n    }\n    /**<fim_middle>// function below has no smell\n"}