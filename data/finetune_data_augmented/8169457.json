{"text": "<fim_prefix>                        tightUnmarshalString(dataIn, bs);\n                        dataIn.readInt();\n                    }\n                }\n                o.initCause(tightUnmarsalThrowable(wireFormat, dataIn, bs));\n            }\n            return o;\n        } else {\n            return null;\n        }\n    }\n    private Throwable createThrowable(String className, String message) {\n        try {\n            Class clazz = Class.forName(className, false, BaseDataStreamMarshaller.class.getClassLoader());\n            Constructor constructor = clazz.getConstructor(new Class[] {String.class});\n            return (Throwable)constructor.newInstance(new Object[] {message});\n        } catch (Throwable e) {\n            return new Throwable(className + \": \" + message);\n        }\n    }\n    protected int tightMarshalThrowable1(OpenWireFormat wireFormat, Throwable o, BooleanStream bs)\n        throws IOException {\n        if (o == null) {\n            bs.writeBoolean(false);\n            return 0;\n        } else {\n            int rc = 0;\n            bs.writeBoolean(true);\n            rc += tightMarshalString1(o.getClass().getName(), bs);\n            rc += tightMarshalString1(o.getMessage(), bs);\n            if (wireFormat.isStackTraceEnabled()) {\n                rc += 2;\n                StackTraceElement[] stackTrace = o.getStackTrace();\n                for (int i = 0; i < stackTrace.length; i++) {\n                    StackTraceElement element = stackTrace[i];\n                    rc += tightMarshalString1(element.getClassName(), bs);\n                    rc += tightMarshalString1(element.getMethodName(), bs);\n                    rc += tightMarshalString1(element.getFileName(), bs);\n                    rc += 4;\n                }\n                rc += tightMarshalThrowable1(wireFormat, o.getCause(), bs);\n            }\n            return rc;\n        }\n    }\n    protected void tightMarshalThrowable2(OpenWireFormat wireFormat, Throwable o, DataOutput dataOut,\n                                          BooleanStream bs) throws IOException {\n        if (bs.readBoolean()) {\n            tightMarshalString2(o.getClass().getName(), dataOut, bs);\n            tightMarshalString2(o.getMessage(), dataOut, bs);\n            if (wireFormat.isStackTraceEnabled()) {\n                StackTraceElement[] stackTrace = o.getStackTrace();\n                dataOut.writeShort(stackTrace.length);\n                for (int i = 0; i < stackTrace.length; i++) {\n                    StackTraceElement element = stackTrace[i];\n                    tightMarshalString2(element.getClassName(), dataOut, bs);\n                    tightMarshalString2(element.getMethodName(), dataOut, bs);\n                    tightMarshalString2(element.getFileName(), dataOut, bs);\n                    dataOut.writeInt(element.getLineNumber());\n                }\n                tightMarshalThrowable2(wireFormat, o.getCause(), dataOut, bs);\n            }\n        }\n    }\n    @SuppressWarnings(\"deprecation\")\n    protected String tightUnmarshalString(DataInput dataIn, BooleanStream bs) throws IOException {\n        if (bs.readBoolean()) {\n            if (bs.readBoolean()) {\n                int size = dataIn.readShort();\n                byte data[] = new byte[size];\n                dataIn.readFully(data);\n                // Yes deprecated, but we know what we are doing.\n                // This allows us to create a String from a ASCII byte array. (no UTF-8 decoding)\n                return new String(data, 0);\n            } else {\n                return dataIn.readUTF();\n            }\n        } else {\n            return null;\n        }\n    }\n    protected int tightMarshalString1(String value, BooleanStream bs) throws IOException {\n        bs.writeBoolean(value != null);\n        if (value != null) {\n            int strlen = value.length();\n            int utflen = 0;\n            char[] charr = new char[strlen];\n            int c = 0;\n            boolean isOnlyAscii = true;\n            value.getChars(0, strlen, charr, 0);\n            for (int i = 0; i < strlen; i++) {\n                c = charr[i];\n                if ((c >= 0x0001) && (c <= 0x007F)) {\n                    utflen++;\n                } else if (c > 0x07FF) {\n                    utflen += 3;\n                    isOnlyAscii = false;\n                } else {\n                    isOnlyAscii = false;\n                    utflen += 2;\n                }\n            }\n            if (utflen >= Short.MAX_VALUE) {\n                throw new IOException(\"Encountered a String value that is too long to encode.\");\n            }\n            bs.writeBoolean(isOnlyAscii);\n            return utflen + 2;\n        } else {\n            return 0;\n        }\n    }\n    protected void tightMarshalString2(String value, DataOutput dataOut, BooleanStream bs) throws IOException {\n        if (bs.readBoolean()) {\n            // If we verified it only holds ascii values\n            if (bs.readBoolean()) {\n                dataOut.writeShort(value.length());\n                dataOut.writeBytes(value);\n            } else {\n                dataOut.writeUTF(value);\n            }\n        }\n    }\n    protected int tightMarshalObjectArray1(OpenWireFormat wireFormat, DataStructure[] objects,\n                                           BooleanStream bs) throws IOException {\n        if (objects != null) {\n            int rc = 0;\n            bs.writeBoolean(true);\n            rc += 2;\n            for (int i = 0; i < objects.length; i++) {\n                rc += tightMarshalNestedObject1(wireFormat, objects[i], bs);\n            }\n            return rc;\n        } else {\n            bs.writeBoolean(false);\n            return 0;\n        }\n    }\n    protected void tightMarshalObjectArray2(OpenWireFormat wireFormat, DataStructure[] objects,\n                                            DataOutput dataOut, BooleanStream bs) throws IOException {\n        if (bs.readBoolean()) {\n            dataOut.writeShort(objects.length);\n            for (int i = 0; i < objects.length; i++) {\n                tightMarshalNestedObject2(wireFormat, objects[i], dataOut, bs);\n            }\n        }\n    }\n    protected int tightMarshalConstByteArray1(byte[] data, BooleanStream bs, int i) throws IOException {\n        return i;\n    }\n    protected void tightMarshalConstByteArray2(byte[] data, DataOutput dataOut, BooleanStream bs, int i)\n        throws IOException {\n        dataOut.write(data, 0, i);\n    }\n    protected byte[] tightUnmarshalConstByteArray(DataInput dataIn, BooleanStream bs, int i)\n        throws IOException {\n        byte data[] = new byte[i];\n        dataIn.readFully(data);\n        return data;\n    }\n    protected int tightMarshalByteArray1(byte[] data, BooleanStream bs) throws IOException {\n        bs.writeBoolean(data != null);\n        if (data != null) {\n            return data.length + 4;\n        } else {\n            return 0;\n        }\n    }\n    protected void tightMarshalByteArray2(byte[] data, DataOutput dataOut, BooleanStream bs)\n        throws IOException {\n        if (bs.readBoolean()) {\n            dataOut.writeInt(data.length);\n            dataOut.write(data);\n        }\n    }\n    protected byte[] tightUnmarshalByteArray(DataInput dataIn, BooleanStream bs) throws IOException {\n        byte rc[] = null;\n        if (bs.readBoolean()) {\n            int size = dataIn.readInt();\n            rc = new byte[size];\n            dataIn.readFully(rc);\n        }\n        return rc;\n    }\n    protected int tightMarshalByteSequence1(ByteSequence data, BooleanStream bs) throws IOException {\n        bs.writeBoolean(data != null);\n        if (data != null) {\n            return data.getLength() + 4;\n        } else {\n            return 0;\n        }\n    }\n    protected void tightMarshalByteSequence2(ByteSequence data, DataOutput dataOut, BooleanStream bs)\n        throws IOException {\n        if (bs.readBoolean()) {\n            dataOut.writeInt(data.getLength());\n            dataOut.write(data.getData(), data.getOffset(), data.getLength());\n        }\n    }\n    protected ByteSequence tightUnmarshalByteSequence(DataInput dataIn, BooleanStream bs) throws IOException {\n        ByteSequence rc = null;\n        if (bs.readBoolean()) {\n            int size = dataIn.readInt();\n            byte[] t = new byte[size];\n            dataIn.readFully(t);\n            return new ByteSequence(t, 0, size);\n        }\n        return rc;\n    }\n    //\n    // The loose marshaling logic\n    //\n    public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {\n    }\n    public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {\n    }\n    public void looseMarshalLong(OpenWireFormat wireFormat, long o, DataOutput dataOut) throws IOException {\n        dataOut.writeLong(o);\n    }\n    public long looseUnmarshalLong(OpenWireFormat wireFormat, DataInput dataIn) throws IOException {\n        return dataIn.readLong();\n    }\n<fim_suffix>    protected DataStructure looseUnmarsalNestedObject(OpenWireFormat wireFormat, DataInput dataIn)\n        throws IOException {\n        return wireFormat.looseUnmarshalNestedObject(dataIn);\n    }<fim_middle>// function below has no smell\n"}