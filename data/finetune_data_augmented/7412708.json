{"text": "<fim_prefix>/*\n * Copyright 2010-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.data.gemfire.config.xml;\n\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser;\nimport org.springframework.beans.factory.xml.ParserContext;\nimport org.springframework.data.gemfire.util.SpringUtils;\nimport org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean;\nimport org.w3c.dom.Element;\n\n/**\n * Bean definition parser for the &lt;gfe:gateway-receiver&gt; SDG XML namespace (XSD) element.\n *\n * @author David Turanski\n * @author John Blum\n * @see org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser\n * @see org.springframework.data.gemfire.wan.GatewayReceiverFactoryBean\n */\n<fim_suffix>class GatewayReceiverParser extends AbstractSimpleBeanDefinitionParser {\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t@Override\n\tprotected Class<?> getBeanClass(Element element) {\n\t\treturn GatewayReceiverFactoryBean.class;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t@Override\n\tprotected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {\n\t\tString cacheRef = element.getAttribute(ParsingUtils.CACHE_REF_ATTRIBUTE_NAME);\n\n\t\tbuilder.addConstructorArgReference(SpringUtils.defaultIfEmpty(\n\t\t\tcacheRef, GemfireConstants.DEFAULT_GEMFIRE_CACHE_NAME));\n\n\t\tbuilder.setLazyInit(false);\n\n\t\tParsingUtils.setPropertyValue(element, builder, \"bind-address\");\n\t\tParsingUtils.setPropertyValue(element, builder, \"hostname-for-senders\");\n\t\tParsingUtils.setPropertyValue(element, builder, \"start-port\");\n\t\tParsingUtils.setPropertyValue(element, builder, \"end-port\");\n\t\tParsingUtils.setPropertyValue(element, builder, \"manual-start\");\n\t\tParsingUtils.setPropertyValue(element, builder, \"maximum-time-between-pings\");\n\t\tParsingUtils.setPropertyValue(element, builder, \"socket-buffer-size\");\n\t\tParsingUtils.parseTransportFilters(element, parserContext, builder);\n\t}\n}<fim_middle>// class below has no smell\n"}