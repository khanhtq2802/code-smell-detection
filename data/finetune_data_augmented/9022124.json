{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.solr.update.processor;\n\nimport java.io.IOException;\nimport java.lang.invoke.MethodHandles;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.solr.common.params.SolrParams;\nimport org.apache.solr.common.util.NamedList;\nimport org.apache.solr.common.util.SimpleOrderedMap;\nimport org.apache.solr.request.SolrQueryRequest;\nimport org.apache.solr.response.SolrQueryResponse;\nimport org.apache.solr.update.AddUpdateCommand;\nimport org.apache.solr.update.CommitUpdateCommand;\nimport org.apache.solr.update.DeleteUpdateCommand;\nimport org.apache.solr.update.MergeIndexesCommand;\nimport org.apache.solr.update.RollbackUpdateCommand;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * <p>\n * A logging processor.  This keeps track of all commands that have passed through\n * the chain and prints them on finish().  At the Debug (FINE) level, a message\n * will be logged for each command prior to the next stage in the chain.\n * </p>\n * <p>\n * If the Log level is not &gt;= INFO the processor will not be created or added to the chain.\n * </p>\n *\n * @since solr 1.3\n */\npublic class LogUpdateProcessorFactory extends UpdateRequestProcessorFactory implements UpdateRequestProcessorFactory.RunAlways {\n  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n  \n  int maxNumToLog = 10;\n  int slowUpdateThresholdMillis = -1;\n  @Override\n  public void init( final NamedList args ) {\n    if( args != null ) {\n      SolrParams params = args.toSolrParams();\n      maxNumToLog = params.getInt( \"maxNumToLog\", maxNumToLog );\n      slowUpdateThresholdMillis = params.getInt(\"slowUpdateThresholdMillis\", slowUpdateThresholdMillis);\n    }\n  }\n\n  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return log.isInfoEnabled() ? new LogUpdateProcessor(req, rsp, this, next) : next;\n  }\n  \n  static class LogUpdateProcessor extends UpdateRequestProcessor {\n\n    private final SolrQueryRequest req;\n    private final SolrQueryResponse rsp;\n    private final NamedList<Object> toLog;\n\n    int numAdds;\n    int numDeletes;\n\n    // hold on to the added list for logging and the response\n    private List<String> adds;\n    private List<String> deletes;\n\n    private final int maxNumToLog;\n    private final int slowUpdateThresholdMillis;\n\n    private final boolean logDebug = log.isDebugEnabled();//cache to avoid volatile-read\n\n    public LogUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, LogUpdateProcessorFactory factory, UpdateRequestProcessor next) {\n      super( next );\n      this.req = req;\n      this.rsp = rsp;\n      maxNumToLog = factory.maxNumToLog;  // TODO: make configurable\n      // TODO: make log level configurable as well, or is that overkill?\n      // (ryan) maybe?  I added it mostly to show that it *can* be configurable\n      slowUpdateThresholdMillis = factory.slowUpdateThresholdMillis;\n\n      this.toLog = new SimpleOrderedMap<>();\n    }\n    \n    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString() + \" \" + req); }\n\n      // call delegate first so we can log things like the version that get set later\n      if (next != null) next.processAdd(cmd);\n\n      // Add a list of added id's to the response\n      if (adds == null) {\n        adds = new ArrayList<>();\n        toLog.add(\"add\",adds);\n      }\n\n      if (adds.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getPrintableId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        adds.add(msg);\n      }\n\n      numAdds++;\n    }\n\n    @Override\n    public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n      if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString() + \" \" + req); }\n      if (next != null) next.processDelete(cmd);\n\n      if (cmd.isDeleteById()) {\n        if (deletes == null) {\n          deletes = new ArrayList<>();\n          toLog.add(\"delete\",deletes);\n        }\n        if (deletes.size() < maxNumToLog) {\n          long version = cmd.getVersion();\n          String msg = cmd.getId();\n          if (version != 0) msg = msg + \" (\" + version + ')';\n          deletes.add(msg);\n        }\n      } else {\n        if (toLog.size() < maxNumToLog) {\n          long version = cmd.getVersion();\n          String msg = cmd.query;\n          if (version != 0) msg = msg + \" (\" + version + ')';\n          toLog.add(\"deleteByQuery\", msg);\n        }\n      }\n      numDeletes++;\n\n    }\n\n    @Override\n    public void processMergeIndexes(MergeIndexesCommand cmd) throws IOException {\n      if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString() + \" \" + req); }\n      if (next != null) next.processMergeIndexes(cmd);\n\n      toLog.add(\"mergeIndexes\", cmd.toString());\n    }\n\n    @Override\n    public void processCommit( CommitUpdateCommand cmd ) throws IOException {\n      if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString() + \" \" + req); }\n      if (next != null) next.processCommit(cmd);\n\n\n      final String msg = cmd.optimize ? \"optimize\" : \"commit\";\n      toLog.add(msg, \"\");\n    }\n\n    /**\n     * @since Solr 1.4\n     */\n    @Override\n    public void processRollback( RollbackUpdateCommand cmd ) throws IOException {\n      if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString() + \" \" + req); }\n      if (next != null) next.processRollback(cmd);\n\n      toLog.add(\"rollback\", \"\");\n    }\n\n\n<fim_suffix>    @Override\n    public void finish() throws IOException {\n      if (logDebug) { log.debug(\"PRE_UPDATE FINISH \" + req); }\n      if (next != null) next.finish();\n\n      // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n\n      if (log.isInfoEnabled()) {\n        log.info(getLogStringAndClearRspToLog());\n      }\n\n      if (log.isWarnEnabled() && slowUpdateThresholdMillis >= 0) {\n        final long elapsed = (long) req.getRequestTimer().getTime();\n        if (elapsed >= slowUpdateThresholdMillis) {\n          log.warn(\"slow: \" + getLogStringAndClearRspToLog());\n        }\n      }\n    }\n\n    private String getLogStringAndClearRspToLog() {\n      StringBuilder sb = new StringBuilder(rsp.getToLogAsString(req.getCore().getLogId()));\n\n      rsp.getToLog().clear();   // make it so SolrCore.exec won't log this again\n\n      // if id lists were truncated, show how many more there were\n      if (adds != null && numAdds > maxNumToLog) {\n        adds.add(\"... (\" + numAdds + \" adds)\");\n      }\n      if (deletes != null && numDeletes > maxNumToLog) {\n        deletes.add(\"... (\" + numDeletes + \" deletes)\");\n      }\n      final long elapsed = (long) req.getRequestTimer().getTime();\n\n      sb.append(toLog).append(\" 0 \").append(elapsed);\n      return sb.toString();\n    }\n  }\n}\n\n\n<fim_middle>// function below has no smell\n"}