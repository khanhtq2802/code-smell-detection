{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration;\n\nimport org.apache.tinkerpop.gremlin.process.traversal.Traversal;\nimport org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy;\nimport org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep;\nimport org.apache.tinkerpop.gremlin.process.traversal.strategy.AbstractTraversalStrategy;\n\nimport java.util.function.BinaryOperator;\nimport java.util.function.Supplier;\nimport java.util.function.UnaryOperator;\n\n/**\n * @author Marko A. Rodriguez (http://markorodriguez.com)\n */\npublic final class SackStrategy extends AbstractTraversalStrategy<TraversalStrategy.DecorationStrategy> implements TraversalStrategy.DecorationStrategy {\n\n    private final Supplier initialValue;\n    private final UnaryOperator splitOperator;\n    private final BinaryOperator mergeOperator;\n\n    private SackStrategy(final Supplier initialValue, final UnaryOperator splitOperator, final BinaryOperator mergeOperator) {\n        if (null == initialValue)\n            throw new IllegalArgumentException(\"The initial value of a sack can not be null\");\n        this.initialValue = initialValue;\n        this.splitOperator = splitOperator;\n        this.mergeOperator = mergeOperator;\n    }\n\n    @Override\n    public void apply(final Traversal.Admin<?, ?> traversal) {\n        if (traversal.getParent() instanceof EmptyStep)\n            traversal.getSideEffects().setSack(this.initialValue, this.splitOperator, this.mergeOperator);\n    }\n\n    public static <A> Builder<A> build() {\n        return new Builder<>();\n    }\n\n<fim_suffix>    public final static class Builder<A> {\n\n        private Supplier<A> initialValue;\n        private UnaryOperator<A> splitOperator = null;\n        private BinaryOperator<A> mergeOperator = null;\n\n        private Builder() {\n        }\n\n        public Builder initialValue(final Supplier<A> initialValue) {\n            this.initialValue = initialValue;\n            return this;\n        }\n\n        public Builder splitOperator(final UnaryOperator<A> splitOperator) {\n            this.splitOperator = splitOperator;\n            return this;\n        }\n\n        public Builder mergeOperator(final BinaryOperator<A> mergeOperator) {\n            this.mergeOperator = mergeOperator;\n            return this;\n        }\n\n        public SackStrategy create() {\n            return new SackStrategy(this.initialValue, this.splitOperator, this.mergeOperator);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}