{"text": "<fim_prefix>\t\t\tSystem.out.println(\"MATCHINFO: method call match on '\" + aMethod + \"' withinCode='\" + withinCode + \"' for '\"\n\t\t\t\t\t+ this.expression + \"': \" + (sm.alwaysMatches() ? \"YES\" : \"MAYBE\"));\n\t\t}\n\t\treturn sm;\n\t}\n\tpublic ShadowMatch matchesMethodCall(Method aMethod, Class callerType) {\n\t\tShadow s = ReflectionShadow.makeCallShadow(world, aMethod, callerType, this.matchContext);\n\t\tShadowMatchImpl sm = getShadowMatch(s);\n\t\tsm.setSubject(aMethod);\n\t\tsm.setWithinCode(null);\n\t\tsm.setWithinType(callerType);\n\t\tif (MATCH_INFO && sm.maybeMatches()) {\n\t\t\tSystem.out.println(\"MATCHINFO: method call match on '\" + aMethod + \"' callerType='\" + callerType.getName() + \"' for '\"\n\t\t\t\t\t+ this.expression + \"': \" + (sm.alwaysMatches() ? \"YES\" : \"MAYBE\"));\n\t\t}\n\t\treturn sm;\n\t}\n\tpublic ShadowMatch matchesConstructorCall(Constructor aConstructor, Class callerType) {\n\t\tShadow s = ReflectionShadow.makeCallShadow(world, aConstructor, callerType, this.matchContext);\n\t\tShadowMatchImpl sm = getShadowMatch(s);\n\t\tsm.setSubject(aConstructor);\n\t\tsm.setWithinCode(null);\n\t\tsm.setWithinType(callerType);\n\t\tif (MATCH_INFO && sm.maybeMatches()) {\n\t\t\tSystem.out.println(\"MATCHINFO: constructor call match on '\" + aConstructor + \"' callerType='\" + callerType.getName()\n\t\t\t\t\t+ \"' for '\" + this.expression + \"': \" + (sm.alwaysMatches() ? \"YES\" : \"MAYBE\"));\n\t\t}\n\t\treturn sm;\n\t}\n\tpublic ShadowMatch matchesConstructorCall(Constructor aConstructor, Member withinCode) {\n\t\tShadow s = ReflectionShadow.makeCallShadow(world, aConstructor, withinCode, this.matchContext);\n\t\tShadowMatchImpl sm = getShadowMatch(s);\n\t\tsm.setSubject(aConstructor);\n\t\tsm.setWithinCode(withinCode);\n\t\tsm.setWithinType(withinCode.getDeclaringClass());\n\t\tif (MATCH_INFO && sm.maybeMatches()) {\n\t\t\tSystem.out.println(\"MATCHINFO: constructor call match on '\" + aConstructor + \"' withinCode='\" + withinCode + \"' for '\"\n\t\t\t\t\t+ this.expression + \"': \" + (sm.alwaysMatches() ? \"YES\" : \"MAYBE\"));\n\t\t}\n\t\treturn sm;\n\t}\n\tpublic ShadowMatch matchesHandler(Class exceptionType, Class handlingType) {\n\t\tShadow s = ReflectionShadow.makeHandlerShadow(world, exceptionType, handlingType, this.matchContext);\n\t\tShadowMatchImpl sm = getShadowMatch(s);\n\t\tsm.setSubject(null);\n\t\tsm.setWithinCode(null);\n\t\tsm.setWithinType(handlingType);\n\t\tif (MATCH_INFO && sm.maybeMatches()) {\n\t\t\tSystem.out.println(\"MATCHINFO: handler match on '\" + exceptionType.getName() + \"' handlingType='\" + handlingType\n\t\t\t\t\t+ \"' for '\" + this.expression + \"': \" + (sm.alwaysMatches() ? \"YES\" : \"MAYBE\"));\n\t\t}\n\t\treturn sm;\n\t}\n\tpublic ShadowMatch matchesHandler(Class exceptionType, Member withinCode) {\n\t\tShadow s = ReflectionShadow.makeHandlerShadow(world, exceptionType, withinCode, this.matchContext);\n\t\tShadowMatchImpl sm = getShadowMatch(s);\n\t\tsm.setSubject(null);\n\t\tsm.setWithinCode(withinCode);\n\t\tsm.setWithinType(withinCode.getDeclaringClass());\n\t\tif (MATCH_INFO && sm.maybeMatches()) {\n\t\t\tSystem.out.println(\"MATCHINFO: handler match on '\" + exceptionType.getName() + \"' withinCode='\" + withinCode\n\t\t\t\t\t+ \"' for '\" + this.expression + \"': \" + (sm.alwaysMatches() ? \"YES\" : \"MAYBE\"));\n\t\t}\n\t\treturn sm;\n\t}\n\tpublic ShadowMatch matchesFieldGet(Field aField, Class withinType) {\n\t\tShadow s = ReflectionShadow.makeFieldGetShadow(world, aField, withinType, this.matchContext);\n\t\tShadowMatchImpl sm = getShadowMatch(s);\n\t\tsm.setSubject(aField);\n\t\tsm.setWithinCode(null);\n\t\tsm.setWithinType(withinType);\n\t\tif (MATCH_INFO && sm.maybeMatches()) {\n\t\t\tSystem.out.println(\"MATCHINFO: field get match on '\" + aField + \"' withinType='\" + withinType.getName() + \"' for '\"\n\t\t\t\t\t+ this.expression + \"': \" + (sm.alwaysMatches() ? \"YES\" : \"MAYBE\"));\n\t\t}\n\t\treturn sm;\n\t}\n\tpublic ShadowMatch matchesFieldGet(Field aField, Member withinCode) {\n\t\tShadow s = ReflectionShadow.makeFieldGetShadow(world, aField, withinCode, this.matchContext);\n\t\tShadowMatchImpl sm = getShadowMatch(s);\n\t\tsm.setSubject(aField);\n\t\tsm.setWithinCode(withinCode);\n\t\tsm.setWithinType(withinCode.getDeclaringClass());\n\t\tif (MATCH_INFO && sm.maybeMatches()) {\n\t\t\tSystem.out.println(\"MATCHINFO: field get match on '\" + aField + \"' withinCode='\" + withinCode + \"' for '\"\n\t\t\t\t\t+ this.expression + \"': \" + (sm.alwaysMatches() ? \"YES\" : \"MAYBE\"));\n\t\t}\n\t\treturn sm;\n\t}\n\tpublic ShadowMatch matchesFieldSet(Field aField, Class withinType) {\n\t\tShadow s = ReflectionShadow.makeFieldSetShadow(world, aField, withinType, this.matchContext);\n\t\tShadowMatchImpl sm = getShadowMatch(s);\n\t\tsm.setSubject(aField);\n\t\tsm.setWithinCode(null);\n\t\tsm.setWithinType(withinType);\n\t\tif (MATCH_INFO && sm.maybeMatches()) {\n\t\t\tSystem.out.println(\"MATCHINFO: field set match on '\" + aField + \"' withinType='\" + withinType.getName() + \"' for '\"\n\t\t\t\t\t+ this.expression + \"': \" + (sm.alwaysMatches() ? \"YES\" : \"MAYBE\"));\n\t\t}\n\t\treturn sm;\n\t}\n\tpublic ShadowMatch matchesFieldSet(Field aField, Member withinCode) {\n\t\tShadow s = ReflectionShadow.makeFieldSetShadow(world, aField, withinCode, this.matchContext);\n\t\tShadowMatchImpl sm = getShadowMatch(s);\n\t\tsm.setSubject(aField);\n\t\tsm.setWithinCode(withinCode);\n\t\tsm.setWithinType(withinCode.getDeclaringClass());\n\t\tif (MATCH_INFO && sm.maybeMatches()) {\n\t\t\tSystem.out.println(\"MATCHINFO: field set match on '\" + aField + \"' withinCode='\" + withinCode + \"' for '\"\n\t\t\t\t\t+ this.expression + \"': \" + (sm.alwaysMatches() ? \"YES\" : \"MAYBE\"));\n\t\t}\n\t\treturn sm;\n\t}\n\tprivate ShadowMatchImpl getShadowMatch(Shadow forShadow) {\n\t\torg.aspectj.util.FuzzyBoolean match = pointcut.match(forShadow);\n\t\tTest residueTest = Literal.TRUE;\n\t\tExposedState state = getExposedState();\n\t\tif (match.maybeTrue()) {\n\t\t\tresidueTest = pointcut.findResidue(forShadow, state);\n\t\t}\n\t\tShadowMatchImpl sm = new ShadowMatchImpl(match, residueTest, state, parameters);\n\t\tsm.setMatchingContext(this.matchContext);\n\t\treturn sm;\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.aspectj.weaver.tools.PointcutExpression#getPointcutExpression()\n\t */\n\tpublic String getPointcutExpression() {\n\t\treturn expression;\n\t}\n\tprivate static class HasPossibleDynamicContentVisitor extends AbstractPatternNodeVisitor {\n\t\tprivate boolean hasDynamicContent = false;\n\t\tpublic boolean hasDynamicContent() {\n\t\t\treturn hasDynamicContent;\n\t\t}\n\t\t@Override\n\t\tpublic Object visit(WithinAnnotationPointcut node, Object data) {\n\t\t\thasDynamicContent = true;\n\t\t\treturn null;\n\t\t}\n\t\t@Override\n\t\tpublic Object visit(WithinCodeAnnotationPointcut node, Object data) {\n\t\t\thasDynamicContent = true;\n\t\t\treturn null;\n\t\t}\n<fim_suffix>\t\t@Override\n\t\tpublic Object visit(AnnotationPointcut node, Object data) {\n\t\t\thasDynamicContent = true;\n\t\t\treturn null;\n\t\t}<fim_middle>// function below has no smell\n"}