{"text": "<fim_prefix>\n<fim_suffix>public abstract class AbstractOAuth2ApiBinding implements ApiBinding, InitializingBean {\n\tprivate final String accessToken;\n\tprivate RestTemplate restTemplate;\n\t/**\n\t * Constructs the API template without user authorization. This is useful for accessing operations on a provider's API that do not require user authorization.\n\t */\n\tprotected AbstractOAuth2ApiBinding() {\n\t\taccessToken = null;\n\t\trestTemplate = createRestTemplateWithCulledMessageConverters();\n\t\tconfigureRestTemplate(restTemplate);\n\t}\n\t/**\n\t * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user.\n\t * @param accessToken the access token\n\t */\n\tprotected AbstractOAuth2ApiBinding(String accessToken) {\n\t\tthis(accessToken, TokenStrategy.AUTHORIZATION_HEADER);\n\t}\n\t/**\n\t * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user.\n\t * @param accessToken the access token\n\t * @param tokenStrategy Specifies how access tokens are sent on API requests. Defaults to sending them in Authorization header.\n\t */\n\tprotected AbstractOAuth2ApiBinding(String accessToken, TokenStrategy tokenStrategy) {\n\t\tthis.accessToken = accessToken;\n\t\trestTemplate = createRestTemplate(accessToken, getOAuth2Version(), tokenStrategy);\n\t\tconfigureRestTemplate(restTemplate);\n\t}\n\t/**\n\t * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring custom SSL details.\n\t * @param requestFactory the request factory\n\t */\n\tpublic void setRequestFactory(ClientHttpRequestFactory requestFactory) {\n\t\trestTemplate.setRequestFactory(requestFactory);\n\t}\n\t// implementing ApiBinding\n\tpublic boolean isAuthorized() {\n\t\treturn accessToken != null;\n\t}\n\t// public implementation operations\n\t/**\n\t * Obtains a reference to the REST client backing this API binding and used to perform API calls.\n\t * Callers may use the RestTemplate to invoke other API operations not yet modeled by the binding interface.\n\t * Callers may also modify the configuration of the RestTemplate to support unit testing the API binding with a mock server in a test environment.\n\t * During construction, subclasses may apply customizations to the RestTemplate needed to invoke a specific API.\n\t * @see RestTemplate#setMessageConverters(java.util.List)\n\t * @see RestTemplate#setErrorHandler(org.springframework.web.client.ResponseErrorHandler)\n\t * @return a reference to the {@link RestTemplate} that backs this API binding.\n\t */\n\tpublic RestTemplate getRestTemplate() {\n\t\treturn restTemplate;\n\t}\n\t// subclassing hooks\n\t/**\n\t * Returns the version of OAuth2 the API implements.\n\t * By default, returns {@link OAuth2Version#BEARER} indicating versions of OAuth2 that apply the bearer token scheme.\n\t * Subclasses may override to return another version.\n\t * @see OAuth2Version\n\t * @return the version of OAuth 2 in play.\n\t */\n\tprotected OAuth2Version getOAuth2Version() {\n\t\treturn OAuth2Version.BEARER;\n\t}\n\t/**\n\t * Subclassing hook to enable customization of the RestTemplate used to consume provider API resources.\n\t * An example use case might be to configure a custom error handler.\n\t * Note that this method is called after the RestTemplate has been configured with the message converters returned from getMessageConverters().\n\t * @param restTemplate the RestTemplate to configure.\n\t */\n\tprotected void configureRestTemplate(RestTemplate restTemplate) {\n\t}\n\t/**\n\t * Returns a list of {@link HttpMessageConverter}s to be used by the internal {@link RestTemplate}.\n\t * By default, this includes a {@link StringHttpMessageConverter}, a {@link MappingJackson2HttpMessageConverter}, a {@link ByteArrayHttpMessageConverter}, and a {@link FormHttpMessageConverter}.\n\t * The {@link FormHttpMessageConverter} is set to use \"UTF-8\" character encoding.\n\t * Override this method to add additional message converters or to replace the default list of message converters.\n\t * @return a list of message converters to be used by RestTemplate\n\t */\n\tprotected List<HttpMessageConverter<?>> getMessageConverters() {\n\t\tList<HttpMessageConverter<?>> messageConverters = new ArrayList<HttpMessageConverter<?>>();\n\t\tmessageConverters.add(new StringHttpMessageConverter());\n\t\tmessageConverters.add(getFormMessageConverter());\n\t\tmessageConverters.add(getJsonMessageConverter());\n\t\tmessageConverters.add(getByteArrayMessageConverter());\n\t\treturn messageConverters;\n\t}\n\t/**\n\t * Returns an {@link FormHttpMessageConverter} to be used by the internal {@link RestTemplate}.\n\t * By default, the message converter is set to use \"UTF-8\" character encoding.\n\t * Override to customize the message converter (for example, to set supported media types or message converters for the parts of a multipart message). \n\t * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead.\n\t * @return an {@link FormHttpMessageConverter} to be used by the internal {@link RestTemplate}. \n\t */\n\tprotected FormHttpMessageConverter getFormMessageConverter() {\n\t\tFormHttpMessageConverter converter = new FormHttpMessageConverter();\n\t\tconverter.setCharset(Charset.forName(\"UTF-8\"));\n\t\tList<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();\n\t\tpartConverters.add(new ByteArrayHttpMessageConverter());\n\t\tStringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter(Charset.forName(\"UTF-8\"));\n\t\tstringHttpMessageConverter.setWriteAcceptCharset(false);\n\t\tpartConverters.add(stringHttpMessageConverter);\n\t\tpartConverters.add(new ResourceHttpMessageConverter());\t\t\n\t\tconverter.setPartConverters(partConverters);\n\t\treturn converter;\n\t}\n\t/**\n\t * Returns a {@link MappingJackson2HttpMessageConverter} to be used by the internal {@link RestTemplate}.\n\t * Override to customize the message converter (for example, to set a custom object mapper or supported media types).\n\t * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead.\n\t * @return a {@link MappingJackson2HttpMessageConverter} to be used by the internal {@link RestTemplate}.\n\t */\n\tprotected MappingJackson2HttpMessageConverter getJsonMessageConverter() {\n\t\treturn new MappingJackson2HttpMessageConverter(); \n\t}\n\t/**\n\t * Returns a {@link ByteArrayHttpMessageConverter} to be used by the internal {@link RestTemplate} when consuming image or other binary resources.\n\t * By default, the message converter supports \"image/jpeg\", \"image/gif\", and \"image/png\" media types.\n\t * Override to customize the message converter (for example, to set supported media types).\n\t * To remove/replace this or any of the other message converters that are registered by default, override the getMessageConverters() method instead.\n\t * @return a {@link ByteArrayHttpMessageConverter} to be used by the internal {@link RestTemplate} when consuming image or other binary resources.\n\t */\n\tprotected ByteArrayHttpMessageConverter getByteArrayMessageConverter() {\n\t\tByteArrayHttpMessageConverter converter = new ByteArrayHttpMessageConverter();\n\t\tconverter.setSupportedMediaTypes(Arrays.asList(MediaType.IMAGE_JPEG, MediaType.IMAGE_GIF, MediaType.IMAGE_PNG));\n\t\treturn converter;\n\t}\n\tprivate RestTemplate createRestTemplate(String accessToken, OAuth2Version version, TokenStrategy tokenStrategy) {\n\t\tRestTemplate client = createRestTemplateWithCulledMessageConverters();\n\t\tClientHttpRequestInterceptor interceptor = tokenStrategy.interceptor(accessToken, version);\n\t\tList<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();\n\t\tinterceptors.add(interceptor);\n\t\tclient.setInterceptors(interceptors);\n\t\treturn client;\n\t}\n\t// Temporary: The RestTemplate that accepts a list of message converters wasn't added until Spring 3.2.7.\n\t//            Remove this method and use that constructor exclusively when 3.1.x support is no longer necessary (Spring Social 2.0).\n\tprivate RestTemplate createRestTemplateWithCulledMessageConverters() {\n\t\tRestTemplate client;\n\t\tList<HttpMessageConverter<?>> messageConverters = getMessageConverters();\n\t\ttry {\n\t\t\tclient = new RestTemplate(messageConverters);\n\t\t} catch (NoSuchMethodError e) {\n\t\t\tclient = new RestTemplate();\n\t\t\tclient.setMessageConverters(messageConverters);\n\t\t}\n\t\tclient.setRequestFactory(ClientHttpRequestFactorySelector.getRequestFactory());\n\t\treturn client;\n\t}\n\t/**\n\t * After construction, include option to decorate the {@link RestTemplate} followed by an optional\n\t * configuration step. Many providers initialize sub-APIs, and this provides a convenient hook.\n\t * @throws Exception if any error occurs decorating the RestTemplate\n\t */\n\t@Override\n\tpublic void afterPropertiesSet() throws Exception {\n\t\tthis.restTemplate = postProcess(this.restTemplate);\n\t\tpostConstructionConfiguration();\n\t}\n\t/**<fim_middle>// class below is blob\n"}