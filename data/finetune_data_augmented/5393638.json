{"text": "<fim_prefix>    }\n    @Override\n    public Set<ObjectName> queryNames(ObjectName name, QueryExp query) {\n        return s().queryNames(name, query);\n    }\n    @Override\n    public boolean isRegistered(ObjectName name) {\n        return s().isRegistered(name);\n    }\n    @Override\n    public Integer getMBeanCount() {\n        return s().getMBeanCount();\n    }\n    @Override\n    public Object getAttribute(ObjectName name, String attribute) throws MBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException {\n        return s().getAttribute(name, attribute);\n    }\n    @Override\n    public AttributeList getAttributes(ObjectName name, String[] attributes) throws InstanceNotFoundException, ReflectionException {\n        return s().getAttributes(name, attributes);\n    }\n    @Override\n    public void setAttribute(ObjectName name, Attribute attribute) throws InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException {\n        s().setAttribute(name, attribute);\n    }\n    @Override\n    public AttributeList setAttributes(ObjectName name, AttributeList attributes) throws InstanceNotFoundException, ReflectionException {\n        return s().setAttributes(name, attributes);\n    }\n    @Override\n    public Object invoke(ObjectName name, String operationName, Object[] params, String[] signature) throws InstanceNotFoundException, MBeanException, ReflectionException {\n        return s().invoke(name, operationName, params, signature);\n    }\n    @Override\n    public String getDefaultDomain() {\n        return s().getDefaultDomain();\n    }\n    @Override\n    public String[] getDomains() {\n        return s().getDomains();\n    }\n    @Override\n    public void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException {\n        s().addNotificationListener(name, listener, filter, handback);\n    }\n    @Override\n    public void addNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException {\n        s().addNotificationListener(name, listener, filter, handback);\n    }\n    @Override\n    public void removeNotificationListener(ObjectName name, ObjectName listener) throws InstanceNotFoundException, ListenerNotFoundException {\n        s().removeNotificationListener(name, listener);\n    }\n    @Override\n    public void removeNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException, ListenerNotFoundException {\n        s().removeNotificationListener(name, listener, filter, handback);\n    }\n    @Override\n    public void removeNotificationListener(ObjectName name, NotificationListener listener) throws InstanceNotFoundException, ListenerNotFoundException {\n        s().removeNotificationListener(name, listener);\n    }\n    @Override\n    public void removeNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException, ListenerNotFoundException {\n        s().removeNotificationListener(name, listener, filter, handback);\n    }\n    @Override\n    public MBeanInfo getMBeanInfo(ObjectName name) throws InstanceNotFoundException, IntrospectionException, ReflectionException {\n        return s().getMBeanInfo(name);\n    }\n    @Override\n    public boolean isInstanceOf(ObjectName name, String className) throws InstanceNotFoundException {\n        return s().isInstanceOf(name, className);\n    }\n    @Override\n    public Object instantiate(String className) throws ReflectionException, MBeanException {\n        return s().instantiate(className);\n    }\n    @Override\n    public Object instantiate(String className, ObjectName loaderName) throws ReflectionException, MBeanException, InstanceNotFoundException {\n        return s().instantiate(className, loaderName);\n    }\n    @Override\n    public Object instantiate(String className, Object[] params, String[] signature) throws ReflectionException, MBeanException {\n        return s().instantiate(className, params, signature);\n    }\n    @Override\n    public Object instantiate(String className, ObjectName loaderName, Object[] params, String[] signature) throws ReflectionException, MBeanException, InstanceNotFoundException {\n        return s().instantiate(className, loaderName, params, signature);\n    }\n    @Override\n    public ObjectInputStream deserialize(ObjectName name, byte[] data) throws InstanceNotFoundException, OperationsException {\n        return s().deserialize(name, data);\n    }\n    @Override\n    public ObjectInputStream deserialize(String className, byte[] data) throws OperationsException, ReflectionException {\n        return s().deserialize(className, data);\n    }\n    @Override\n    public ObjectInputStream deserialize(String className, ObjectName loaderName, byte[] data) throws InstanceNotFoundException, OperationsException, ReflectionException {\n        return s().deserialize(className, loaderName, data);\n    }\n    @Override\n    public ClassLoader getClassLoaderFor(ObjectName mbeanName) throws InstanceNotFoundException {\n        return s().getClassLoaderFor(mbeanName);\n    }\n    @Override\n    public ClassLoader getClassLoader(ObjectName loaderName) throws InstanceNotFoundException {\n        return s().getClassLoader(loaderName);\n    }\n    @Override\n    public ClassLoaderRepository getClassLoaderRepository() {\n        return s().getClassLoaderRepository();\n    }\n    private static class NoOpMBeanServer implements MBeanServer{\n        public static final MBeanServer INSTANCE = new NoOpMBeanServer();\n        private static final String[] DEFAULT_DOMAINS = new String[]{ \"default-domain\" };\n        @Override\n        public ObjectInstance createMBean(String className, ObjectName name) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException {\n            return null;\n        }\n        @Override\n        public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {\n            return null;\n        }\n        @Override\n        public ObjectInstance createMBean(String className, ObjectName name, Object[] params, String[] signature) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException {\n            return null;\n        }\n        @Override\n        public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName, Object[] params, String[] signature) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {\n            return null;\n        }\n        @Override\n        public ObjectInstance registerMBean(Object object, ObjectName name) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {\n            return null;\n        }\n        @Override\n        public void unregisterMBean(ObjectName name) throws InstanceNotFoundException, MBeanRegistrationException {\n            // no-op\n        }\n        @Override\n        public ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFoundException {\n            return null;\n        }\n        @Override\n        public Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query) {\n            return null;\n        }\n        @Override\n        public Set<ObjectName> queryNames(ObjectName name, QueryExp query) {\n            return null;\n        }\n        @Override\n        public boolean isRegistered(ObjectName name) {\n            return false;\n        }\n        @Override\n        public Integer getMBeanCount() {\n            return 0;\n        }\n        @Override\n        public Object getAttribute(ObjectName name, String attribute) throws MBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException {\n            return null;\n        }\n        @Override\n        public AttributeList getAttributes(ObjectName name, String[] attributes) throws InstanceNotFoundException, ReflectionException {\n            return new AttributeList();\n        }\n        @Override\n        public void setAttribute(ObjectName name, Attribute attribute) throws InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException {\n            // no-op\n        }\n        @Override\n        public AttributeList setAttributes(ObjectName name, AttributeList attributes) throws InstanceNotFoundException, ReflectionException {\n            return new AttributeList();\n        }\n        @Override\n        public Object invoke(ObjectName name, String operationName, Object[] params, String[] signature) throws InstanceNotFoundException, MBeanException, ReflectionException {\n            return null;\n        }\n        @Override\n        public String getDefaultDomain() {\n            return DEFAULT_DOMAINS[0];\n        }\n        @Override\n        public String[] getDomains() {\n            return DEFAULT_DOMAINS;\n        }\n        @Override\n        public void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException {\n            // no-op\n        }\n        @Override\n        public void addNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException {\n            // no-op\n        }\n        @Override\n        public void removeNotificationListener(ObjectName name, ObjectName listener) throws InstanceNotFoundException, ListenerNotFoundException {\n            // no-op\n        }\n        @Override\n        public void removeNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException, ListenerNotFoundException {\n            // no-op\n        }\n        @Override\n        public void removeNotificationListener(ObjectName name, NotificationListener listener) throws InstanceNotFoundException, ListenerNotFoundException {\n            // no-op\n        }\n        @Override\n        public void removeNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException, ListenerNotFoundException {\n            // no-op\n        }\n        @Override\n        public MBeanInfo getMBeanInfo(ObjectName name) throws InstanceNotFoundException, IntrospectionException, ReflectionException {\n            return null;\n        }\n        @Override\n        public boolean isInstanceOf(ObjectName name, String className) throws InstanceNotFoundException {\n            return false;\n        }\n<fim_suffix>        @Override\n        public Object instantiate(String className) throws ReflectionException, MBeanException {\n            return null;\n        }<fim_middle>// function below has no smell\n"}