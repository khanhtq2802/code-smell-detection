{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.sshd.git.pgm;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Path;\nimport java.util.List;\n\nimport org.apache.sshd.common.util.ValidateUtils;\nimport org.apache.sshd.common.util.threads.CloseableExecutorService;\nimport org.apache.sshd.git.AbstractGitCommand;\nimport org.apache.sshd.git.GitLocationResolver;\nimport org.apache.sshd.server.Environment;\n\n/**\n * TODO Add javadoc\n *\n * @author <a href=\"mailto:dev@mina.apache.org\">Apache MINA SSHD Project</a>\n */\n<fim_suffix>public class GitPgmCommand extends AbstractGitCommand {\n    /**\n     * @param rootDirResolver Resolver for GIT root directory\n     * @param command Command to execute\n     * @param executorService An {@link CloseableExecutorService} to be used when {@link #start(Environment)}-ing\n     * execution. If {@code null} an ad-hoc single-threaded service is created and used.\n     */\n    public GitPgmCommand(GitLocationResolver rootDirResolver, String command, CloseableExecutorService executorService) {\n        super(rootDirResolver, command, executorService);\n    }\n\n    @Override\n    public void run() {\n        String command = getCommand();\n        OutputStream err = getErrorStream();\n        try {\n            List<String> strs = parseDelimitedString(command, \" \", true);\n            String[] args = strs.toArray(new String[strs.size()]);\n            for (int i = 0; i < args.length; i++) {\n                String argVal = args[i];\n                if (argVal.startsWith(\"'\") && argVal.endsWith(\"'\")) {\n                    args[i] = argVal.substring(1, argVal.length() - 1);\n                    argVal = args[i];\n                }\n\n                if (argVal.startsWith(\"\\\"\") && argVal.endsWith(\"\\\"\")) {\n                    args[i] = argVal.substring(1, argVal.length() - 1);\n                    argVal = args[i];\n                }\n            }\n\n            GitLocationResolver resolver = getGitLocationResolver();\n            Path rootDir = resolver.resolveRootDirectory(command, args, getServerSession(), getFileSystem());\n            ValidateUtils.checkState(rootDir != null, \"No root directory provided for %s command\", command);\n\n            new EmbeddedCommandRunner(rootDir).execute(args, getInputStream(), getOutputStream(), err);\n            onExit(0);\n        } catch (Throwable t) {\n            try {\n                err.write((t.getMessage() + \"\\n\").getBytes(StandardCharsets.UTF_8));\n                err.flush();\n            } catch (IOException e) {\n                log.warn(\"Failed {} to flush command={} failure: {}\",\n                    e.getClass().getSimpleName(), command, e.getMessage());\n            }\n            onExit(-1, t.getMessage());\n        }\n    }\n}<fim_middle>// class below has no smell\n"}