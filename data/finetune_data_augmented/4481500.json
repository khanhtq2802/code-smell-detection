{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.drill.exec.compile;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.drill.exec.exception.ClassTransformationException;\n\nimport org.apache.drill.shaded.guava.com.google.common.cache.CacheBuilder;\nimport org.apache.drill.shaded.guava.com.google.common.cache.CacheLoader;\nimport org.apache.drill.shaded.guava.com.google.common.cache.LoadingCache;\nimport org.apache.drill.shaded.guava.com.google.common.io.Resources;\n\nclass ByteCodeLoader {\n  static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(ByteCodeLoader.class);\n\n\n  private final LoadingCache<String, byte[]> byteCode = CacheBuilder.newBuilder().maximumSize(10000)\n      .expireAfterWrite(10, TimeUnit.MINUTES).build(new ClassBytesCacheLoader());\n\n<fim_suffix>  private class ClassBytesCacheLoader extends CacheLoader<String, byte[]> {\n    @Override\n    public byte[] load(String path) throws ClassTransformationException, IOException {\n      URL u = this.getClass().getResource(path);\n      if (u == null) {\n        throw new ClassTransformationException(String.format(\"Unable to find TemplateClass at path %s\", path));\n      }\n      return Resources.toByteArray(u);\n    }\n  };\n\n  public byte[] getClassByteCodeFromPath(String path) throws ClassTransformationException, IOException {\n    try {\n      return byteCode.get(path);\n    } catch (ExecutionException e) {\n      Throwable c = e.getCause();\n      if (c instanceof ClassTransformationException) {\n        throw (ClassTransformationException) c;\n      }\n      if (c instanceof IOException) {\n        throw (IOException) c;\n      }\n      throw new ClassTransformationException(c);\n    }\n  }\n\n}<fim_middle>// class below has no smell\n"}