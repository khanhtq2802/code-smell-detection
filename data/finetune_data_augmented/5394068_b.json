{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.phoenix.hbase.index.metrics;\n\nimport org.apache.hadoop.hbase.metrics.BaseSource;\nimport org.apache.phoenix.hbase.index.Indexer;\n\n/**\n * Interface for metrics about {@link Indexer}.\n */\n<fim_suffix>public interface MetricsIndexerSource extends BaseSource {\n  // Metrics2 and JMX constants\n  String METRICS_NAME = \"PhoenixIndexer\";\n  String METRICS_CONTEXT = \"phoenix\";\n  String METRICS_DESCRIPTION = \"Metrics about the Phoenix Indexer\";\n  String METRICS_JMX_CONTEXT = \"RegionServer,sub=\" + METRICS_NAME;\n\n  String INDEX_PREPARE_TIME = \"indexPrepareTime\";\n  String INDEX_PREPARE_TIME_DESC = \"Histogram for the time in milliseconds for preparing an index write\";\n  String SLOW_INDEX_PREPARE = \"slowIndexPrepareCalls\";\n  String SLOW_INDEX_PREPARE_DESC = \"The number of index preparations slower than the configured threshold\";\n\n  String INDEX_WRITE_TIME = \"indexWriteTime\";\n  String INDEX_WRITE_TIME_DESC = \"Histogram for the time in milliseconds for writing an index update\";\n  String SLOW_INDEX_WRITE = \"slowIndexWriteCalls\";\n  String SLOW_INDEX_WRITE_DESC = \"The number of index writes slower than the configured threshold\";\n\n  String DUPLICATE_KEY_TIME = \"duplicateKeyCheckTime\";\n  String DUPLICATE_KEY_TIME_DESC = \"Histogram for the time in milliseconds to handle ON DUPLICATE keywords\";\n  String SLOW_DUPLICATE_KEY = \"slowDuplicateKeyCheckCalls\";\n  String SLOW_DUPLICATE_KEY_DESC = \"The number of on duplicate key checks slower than the configured threshold\";\n\n  String PRE_WAL_RESTORE_TIME = \"preWALRestoreTime\";\n  String PRE_WAL_RESTORE_TIME_DESC = \"Histogram for the time in milliseconds for Indexer's preWALRestore\";\n  String SLOW_PRE_WAL_RESTORE = \"slowPreWALRestoreCalls\";\n  String SLOW_PRE_WAL_RESTORE_DESC = \"The number of preWALRestore calls slower than the configured threshold\";\n\n  String POST_PUT_TIME = \"postPutTime\";\n  String POST_PUT_TIME_DESC = \"Histogram for the time in milliseconds for Indexer's postPut\";\n  String SLOW_POST_PUT = \"slowPostPutCalls\";\n  String SLOW_POST_PUT_DESC = \"The number of postPut calls slower than the configured threshold\";\n\n  String POST_DELETE_TIME = \"postDeleteTime\";\n  String POST_DELETE_TIME_DESC = \"Histogram for the time in milliseconds for Indexer's postDelete\";\n  String SLOW_POST_DELETE = \"slowPostDeleteCalls\";\n  String SLOW_POST_DELETE_DESC = \"The number of postDelete calls slower than the configured threshold\";\n\n  String POST_OPEN_TIME = \"postOpenTime\";\n  String POST_OPEN_TIME_DESC = \"Histogram for the time in milliseconds for Indexer's postOpen\";\n  String SLOW_POST_OPEN = \"slowPostOpenCalls\";\n  String SLOW_POST_OPEN_DESC = \"The number of postOpen calls slower than the configured threshold\";\n\n  /**\n   * Updates the index preparation time histogram (preBatchMutate).\n   *\n   * @param t time taken in milliseconds\n   */\n  void updateIndexPrepareTime(long t);\n\n  /**\n   * Increments the number of slow calls prepare an index write.\n   */\n  void incrementNumSlowIndexPrepareCalls();\n\n  /**\n   * Updates the index write time histogram (postBatchMutate).\n   *\n   * @param t time taken in milliseconds\n   */\n  void updateIndexWriteTime(long t);\n\n  /**\n   * Increments the number of slow calls to write to the index.\n   */\n  void incrementNumSlowIndexWriteCalls();\n\n  /**\n   * Updates the preWALRestore time histogram.\n   *\n   * @param t time taken in milliseconds\n   */\n  void updatePreWALRestoreTime(long t);\n\n  /**\n   * Increments the number of slow preWALRestore calls.\n   */\n  void incrementNumSlowPreWALRestoreCalls();\n\n  /**\n   * Updates the postPut time histogram.\n   *\n   * @param t time taken in milliseconds\n   */\n  void updatePostPutTime(long t);\n\n  /**\n   * Increments the number of slow postPut calls.\n   */\n  void incrementNumSlowPostPutCalls();\n\n  /**\n   * Updates the postDelete time histogram.\n   *\n   * @param t time taken in milliseconds\n   */\n  void updatePostDeleteTime(long t);\n\n  /**\n   * Increments the number of slow postDelete calls.\n   */\n  void incrementNumSlowPostDeleteCalls();\n\n  /**\n   * Updates the postOpen time histogram.\n   *\n   * @param t time taken in milliseconds\n   */\n  void updatePostOpenTime(long t);\n\n  /**\n   * Increments the number of slow postOpen calls.\n   */\n  void incrementNumSlowPostOpenCalls();\n\n  /**\n   * Updates the preIncrementAfterRowLock time histogram.\n   *\n   * @param t time taken in milliseconds\n   */\n  void updateDuplicateKeyCheckTime(long t);\n\n  /**\n   * Increments the number of slow preIncrementAfteRowLock calls.\n   */\n  void incrementSlowDuplicateKeyCheckCalls();\n}<fim_middle>// class below is data class and blob\n"}