{"text": "<fim_prefix>import com.microsoft.tfs.client.common.ui.tasks.NewBuildDefinitionVNextTask;\nimport com.microsoft.tfs.client.common.ui.tasks.ViewBuildsVNextTask;\nimport com.microsoft.tfs.client.common.ui.teambuild.Messages;\nimport com.microsoft.tfs.client.common.ui.teambuild.TeamBuildImageHelper;\nimport com.microsoft.tfs.client.common.ui.teambuild.dialogs.BuildDefinitionTemplateSelectionDialog;\nimport com.microsoft.tfs.client.common.ui.teambuild.teamexplorer.events.BuildDefinitionEventArg;\nimport com.microsoft.tfs.client.common.ui.teambuild.teamexplorer.helpers.BuildHelpers;\nimport com.microsoft.tfs.client.common.ui.teamexplorer.TeamExplorerContext;\nimport com.microsoft.tfs.client.common.ui.teamexplorer.TeamExplorerEventListener;\nimport com.microsoft.tfs.client.common.ui.teamexplorer.TeamExplorerEvents;\nimport com.microsoft.tfs.client.common.ui.teamexplorer.sections.TeamExplorerBaseSection;\nimport com.microsoft.tfs.core.TFSTeamProjectCollection;\nimport com.microsoft.tfs.util.Check;\nimport com.microsoft.tfs.util.StringUtil;\npublic class TeamExplorerBuildsVNextDefinitionSection extends TeamExplorerBaseSection {\n    private final String FILTER_WATERMARK =\n        Messages.getString(\"TeamExplorerBuildsDefinitionSection.FilterBoxWatermarkText\"); //$NON-NLS-1$\n    private final TeamBuildImageHelper imageHelper = new TeamBuildImageHelper();\n    private TeamExplorerContext context;\n    private BuildDefinitionReference[] buildDefinitions;\n    private BuildDefinitionReference[] filteredBuildDefinitions;\n    private final BuildDefinitionAddedListener buildDefinitionAddedListener = new BuildDefinitionAddedListener();\n    private final BuildDefinitionChangedListener buildDefinitionChangedListener = new BuildDefinitionChangedListener();\n    private final BuildDefinitionDeletedListener buildDefinitionDeletedListener = new BuildDefinitionDeletedListener();\n    private Text textFilter;\n    private TableViewer tableViewer;\n    @Override\n    public boolean initializeInBackground(final TeamExplorerContext context) {\n        return true;\n    }\n    @Override\n    public void initialize(final IProgressMonitor monitor, final TeamExplorerContext context) {\n        this.context = context;\n        if (BuildHelpers.isBuildVNextSupported(context)) {\n            getBuildDefinitions(context);\n        }\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isVisible(final TeamExplorerContext context) {\n        return BuildHelpers.isBuildVNextSupported(context);\n    }\n    @Override\n    public Composite getSectionContent(\n        final FormToolkit toolkit,\n        final Composite parent,\n        final int style,\n        final TeamExplorerContext context) {\n        final Composite composite = toolkit.createComposite(parent);\n        // Text controls present in this composite, enable form-style borders,\n        // must have at least 1 pixel margins\n        toolkit.paintBordersFor(composite);\n        SWTUtil.gridLayout(composite, 1, true, 1, 5);\n        if (!context.isConnected()) {\n            createDisconnectedContent(toolkit, composite);\n            return composite;\n        } else {\n            final String linkText = Messages.getString(\"TeamExplorerBuildPage.NewBuildDefLinkText\"); //$NON-NLS-1$\n            final Hyperlink link = toolkit.createHyperlink(composite, linkText, SWT.WRAP);\n            link.setUnderlined(false);\n            link.setEnabled(context.isConnected());\n            link.addHyperlinkListener(new HyperlinkAdapter() {\n                @Override\n                public void linkActivated(final HyperlinkEvent e) {\n                    createNewDefinition();\n                }\n            });\n            GridDataBuilder.newInstance().applyTo(link);\n            textFilter = toolkit.createText(composite, \"\"); //$NON-NLS-1$\n            textFilter.setMessage(FILTER_WATERMARK);\n            textFilter.addModifyListener(new FilterModifiedListener());\n            GridDataBuilder.newInstance().hAlignFill().hGrab().applyTo(textFilter);\n            tableViewer = new TableViewer(composite, SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI | SWT.FULL_SELECTION);\n            tableViewer.getTable().setData(FormToolkit.KEY_DRAW_BORDER, Boolean.FALSE);\n            tableViewer.setContentProvider(new BuildDefinitionsContentProvider());\n            tableViewer.setLabelProvider(new BuildDefinitionsLabelProvider());\n            tableViewer.addDoubleClickListener(new BuildDefinitionDoubleClickListener());\n            tableViewer.setInput(filteredBuildDefinitions);\n            GridDataBuilder.newInstance().align(SWT.FILL, SWT.FILL).grab(true, true).applyTo(tableViewer.getControl());\n            registerContextMenu(context, tableViewer.getControl(), tableViewer);\n        }\n        context.getEvents().addListener(TeamExplorerEvents.BUILD_DEFINITION_ADDED, buildDefinitionAddedListener);\n        context.getEvents().addListener(TeamExplorerEvents.BUILD_DEFINITION_CHANGED, buildDefinitionChangedListener);\n        context.getEvents().addListener(TeamExplorerEvents.BUILD_DEFINITION_DELETED, buildDefinitionDeletedListener);\n        composite.addDisposeListener(new DisposeListener() {\n            @Override\n            public void widgetDisposed(final DisposeEvent e) {\n                imageHelper.dispose();\n                context.getEvents().removeListener(\n                    TeamExplorerEvents.BUILD_DEFINITION_ADDED,\n                    buildDefinitionAddedListener);\n                context.getEvents().removeListener(\n                    TeamExplorerEvents.BUILD_DEFINITION_CHANGED,\n                    buildDefinitionChangedListener);\n                context.getEvents().removeListener(\n                    TeamExplorerEvents.BUILD_DEFINITION_DELETED,\n                    buildDefinitionDeletedListener);\n            }\n        });\n        return composite;\n    }\n    private void createNewDefinition() {\n        final TFSTeamProjectCollection connection = context.getServer().getConnection();\n        final String projectName = context.getCurrentProjectInfo().getName();\n        final Shell shell = context.getWorkbenchPart().getSite().getShell();\n        final BuildDefinitionTemplate template;\n        if (connection.isHosted() || connection.getServerApiVersion().compareTo(new Version(3, 1)) > 0) {\n            template = null;\n        } else {\n            final BuildHttpClient buildClient =\n                new BuildHttpClient(new TeeClientHandler(connection.getHTTPClient()), connection.getBaseURI());\n            final List<BuildDefinitionTemplate> templates = buildClient.getTemplates(projectName);\n            final BuildDefinitionTemplateSelectionDialog dialog =\n                new BuildDefinitionTemplateSelectionDialog(shell, templates);\n            switch (dialog.open()) {\n                case IDialogConstants.FINISH_ID:\n                    template = null;\n                    break;\n                case IDialogConstants.OK_ID:\n                    template = dialog.getSelectedTemplate();\n                    break;\n                default:\n                    return;\n            }\n        }\n        new NewBuildDefinitionVNextTask(shell, connection, projectName, template).run();\n    }\n    private void getBuildDefinitions(final TeamExplorerContext context) {\n        if (context == null || context.getServer() == null || context.getServer().getConnection() == null) {\n            return;\n        }\n        final TFSTeamProjectCollection connection = context.getServer().getConnection();\n        final BuildHttpClient buildClient =\n            new BuildHttpClient(new TeeClientHandler(connection.getHTTPClient()), connection.getBaseURI());\n        final UUID projectId = UUID.fromString(context.getCurrentProjectInfo().getGUID());\n        final List<BuildDefinitionReference> rawDefinitions = buildClient.getDefinitions(projectId);\n        final List<BuildDefinitionReference> list = new ArrayList<BuildDefinitionReference>();\n        for (final DefinitionReference definition : rawDefinitions) {\n            if (definition instanceof BuildDefinitionReference) {\n                list.add((BuildDefinitionReference) definition);\n            }\n        }\n        buildDefinitions = list.toArray(new BuildDefinitionReference[list.size()]);\n        final String filterText = textFilter == null ? null : textFilter.getText();\n        filteredBuildDefinitions = filterBuildDefinitions(buildDefinitions, filterText);\n    }\n    private BuildDefinitionReference[] filterBuildDefinitions(\n        final BuildDefinitionReference[] allDefinitions,\n        final String filterText) {\n        final boolean noFilterProvided = StringUtil.isNullOrEmpty(filterText);\n        final List<BuildDefinitionReference> list = new ArrayList<BuildDefinitionReference>();\n        final String lowerFilter = noFilterProvided ? null : filterText.toLowerCase();\n        for (final BuildDefinitionReference definition : allDefinitions) {\n            if (noFilterProvided || definition.getName().toLowerCase().indexOf(lowerFilter) != -1) {\n                list.add(definition);\n            }\n        }\n        return list.toArray(new BuildDefinitionReference[list.size()]);\n    }\n    private class BuildDefinitionsContentProvider extends ContentProviderAdapter {\n        @Override\n        public Object[] getElements(final Object inputElement) {\n            return (Object[]) inputElement;\n        }\n    }\n    private class BuildDefinitionsLabelProvider extends LabelProvider implements ITableLabelProvider {\n<fim_suffix>        @Override\n        public Image getColumnImage(final Object element, final int columnIndex) {\n            if (!(element instanceof BuildDefinitionReference) || columnIndex > 0) {\n                return null;\n            }\n            final BuildDefinitionReference definition = (BuildDefinitionReference) element;\n            return imageHelper.getBuildDefinitionImage(definition);\n        }<fim_middle>// function below has no smell\n"}