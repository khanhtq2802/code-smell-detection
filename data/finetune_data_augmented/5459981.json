{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.pulsar.admin.cli;\nimport com.beust.jcommander.Parameter;\nimport com.beust.jcommander.ParameterException;\nimport com.beust.jcommander.Parameters;\nimport com.beust.jcommander.converters.CommaParameterSplitter;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Sets;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.pulsar.admin.cli.utils.IOUtils;\nimport org.apache.pulsar.client.admin.PulsarAdmin;\nimport org.apache.pulsar.client.admin.PulsarAdminException;\nimport org.apache.pulsar.common.naming.NamespaceName;\nimport org.apache.pulsar.common.policies.data.BacklogQuota;\nimport org.apache.pulsar.common.policies.data.BundlesData;\nimport org.apache.pulsar.common.policies.data.DispatchRate;\nimport org.apache.pulsar.common.policies.data.PersistencePolicies;\nimport org.apache.pulsar.common.policies.data.Policies;\nimport org.apache.pulsar.common.policies.data.RetentionPolicies;\nimport org.apache.pulsar.common.policies.data.SchemaAutoUpdateCompatibilityStrategy;\nimport org.apache.pulsar.common.policies.data.SubscribeRate;\nimport org.apache.pulsar.common.policies.data.SubscriptionAuthMode;\nimport org.apache.pulsar.common.util.RelativeTimeUtil;\n@Parameters(commandDescription = \"Operations about namespaces\")\npublic class CmdNamespaces extends CmdBase {\n    @Parameters(commandDescription = \"Get the namespaces for a tenant\")\n    private class GetNamespacesPerProperty extends CliCommand {\n        @Parameter(description = \"tenant-name\\n\", required = true)\n        private java.util.List<String> params;\n        @Override\n        void run() throws PulsarAdminException {\n            String tenant = getOneArgument(params);\n            print(admin.namespaces().getNamespaces(tenant));\n        }\n    }\n    @Parameters(commandDescription = \"Get the namespaces for a tenant in a cluster\", hidden = true)\n    private class GetNamespacesPerCluster extends CliCommand {\n        @Parameter(description = \"tenant/cluster\\n\", required = true)\n        private java.util.List<String> params;\n        @Override\n        void run() throws PulsarAdminException {\n            String[] parts = validatePropertyCluster(params);\n            print(admin.namespaces().getNamespaces(parts[0], parts[1]));\n        }\n    }\n    @Parameters(commandDescription = \"Get the list of topics for a namespace\")\n    private class GetTopics extends CliCommand {\n        @Parameter(description = \"tenant/namespace\\n\", required = true)\n        private java.util.List<String> params;\n        @Override\n        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            print(admin.namespaces().getTopics(namespace));\n        }\n    }\n    @Parameters(commandDescription = \"Get the list of destinations for a namespace\", hidden = true)\n    private class GetDestinations extends CliCommand {\n        @Parameter(description = \"tenant/namespace\\n\", required = true)\n        private java.util.List<String> params;\n        @Override\n        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            print(admin.namespaces().getTopics(namespace));\n        }\n    }\n    @Parameters(commandDescription = \"Get the configuration policies of a namespace\")\n    private class GetPolicies extends CliCommand {\n        @Parameter(description = \"tenant/namespace\\n\", required = true)\n        private java.util.List<String> params;\n        @Override\n        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            print(admin.namespaces().getPolicies(namespace));\n        }\n    }\n    @Parameters(commandDescription = \"Creates a new namespace\")\n    private class Create extends CliCommand {\n        @Parameter(description = \"tenant/namespace\\n\", required = true)\n        private java.util.List<String> params;\n        @Parameter(names = { \"--clusters\", \"-c\" }, description = \"List of clusters this namespace will be assigned\", required = false)\n        private java.util.List<String> clusters;\n        @Parameter(names = { \"--bundles\", \"-b\" }, description = \"number of bundles to activate\", required = false)\n        private int numBundles = 0;\n        private static final long MAX_BUNDLES = ((long) 1) << 32;\n        @Override\n        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            if (numBundles < 0 || numBundles > MAX_BUNDLES) {\n                throw new ParameterException(\n                        \"Invalid number of bundles. Number of numbles has to be in the range of (0, 2^32].\");\n            }\n            NamespaceName namespaceName = NamespaceName.get(namespace);\n            if (namespaceName.isV2()) {\n                Policies policies = new Policies();\n                policies.bundles = numBundles > 0 ? new BundlesData(numBundles) : null;\n                if (clusters != null) {\n                    policies.replication_clusters = new HashSet<>(clusters);\n                }\n                admin.namespaces().createNamespace(namespace, policies);\n            } else {\n                if (numBundles == 0) {\n                    admin.namespaces().createNamespace(namespace);\n                } else {\n                    admin.namespaces().createNamespace(namespace, numBundles);\n                }\n                if (clusters != null && !clusters.isEmpty()) {\n                    admin.namespaces().setNamespaceReplicationClusters(namespace, new HashSet<>(clusters));\n                }\n            }\n        }\n    }\n    @Parameters(commandDescription = \"Deletes a namespace. The namespace needs to be empty\")\n    private class Delete extends CliCommand {\n        @Parameter(description = \"tenant/namespace\\n\", required = true)\n        private java.util.List<String> params;\n        @Override\n        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            admin.namespaces().deleteNamespace(namespace);\n        }\n    }\n<fim_suffix>    @Parameters(commandDescription = \"Grant permissions on a namespace\")\n    private class GrantPermissions extends CliCommand {\n        @Parameter(description = \"tenant/namespace\", required = true)\n        private java.util.List<String> params;\n        @Parameter(names = \"--role\", description = \"Client role to which grant permissions\", required = true)\n        private String role;\n        @Parameter(names = \"--actions\", description = \"Actions to be granted (produce,consume)\", required = true, splitter = CommaParameterSplitter.class)\n        private List<String> actions;\n        @Override\n        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            admin.namespaces().grantPermissionOnNamespace(namespace, role, getAuthActions(actions));\n        }\n    }\n    @Parameters(commandDescription = \"Revoke permissions on a namespace\")\n    private class RevokePermissions extends CliCommand {\n        @Parameter(description = \"tenant/namespace\", required = true)\n        private java.util.List<String> params;\n        @Parameter(names = \"--role\", description = \"Client role to which revoke permissions\", required = true)\n        private String role;\n        @Override\n        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);\n            admin.namespaces().revokePermissionsOnNamespace(namespace, role);\n        }\n    }\n    @Parameters(commandDescription = \"Grant permissions to access subscription admin-api\")\n    private class GrantSubscriptionPermissions extends CliCommand {\n        @Parameter(description = \"tenant/namespace\", required = true)\n        private java.util.List<String> params;\n        @Parameter(names = \"--subscription\", description = \"Subscription name for which permission will be granted to roles\", required = true)\n        private String subscription;\n        @Parameter(names = \"--roles\", description = \"Client roles to which grant permissions (comma separated roles)\", required = true, splitter = CommaParameterSplitter.class)\n        private List<String> roles;\n        @Override\n        void run() throws PulsarAdminException {\n            String namespace = validateNamespace(params);<fim_middle>// class below has no smell\n"}