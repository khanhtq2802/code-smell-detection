{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *******************************************************************************/\npackage org.eclipse.xtext.common.types.xtext.ui;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.apache.log4j.Logger;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.NullProgressMonitor;\nimport org.eclipse.emf.common.util.URI;\nimport org.eclipse.emf.ecore.EClass;\nimport org.eclipse.emf.ecore.InternalEObject;\nimport org.eclipse.jdt.core.IJavaElement;\nimport org.eclipse.jdt.core.IJavaProject;\nimport org.eclipse.jdt.core.IMethod;\nimport org.eclipse.jdt.core.IType;\nimport org.eclipse.jdt.core.search.IJavaSearchScope;\nimport org.eclipse.jdt.core.search.SearchEngine;\nimport org.eclipse.jdt.core.search.SearchMatch;\nimport org.eclipse.jdt.core.search.SearchPattern;\nimport org.eclipse.jdt.core.search.SearchRequestor;\nimport org.eclipse.jdt.internal.core.search.matching.ConstructorDeclarationPattern;\nimport org.eclipse.jdt.internal.corext.util.SearchUtils;\nimport org.eclipse.xtext.common.types.JvmConstructor;\nimport org.eclipse.xtext.common.types.TypesFactory;\nimport org.eclipse.xtext.common.types.TypesPackage;\nimport org.eclipse.xtext.common.types.access.jdt.IJdtTypeProvider;\nimport org.eclipse.xtext.common.types.access.jdt.TypeURIHelper;\nimport org.eclipse.xtext.common.types.xtext.AbstractConstructorScope;\nimport org.eclipse.xtext.naming.IQualifiedNameConverter;\nimport org.eclipse.xtext.naming.QualifiedName;\nimport org.eclipse.xtext.resource.AbstractEObjectDescription;\nimport org.eclipse.xtext.resource.IEObjectDescription;\n\nimport com.google.common.collect.Lists;\n\n/**\n * @author Sebastian Zarnekow - Initial contribution and API\n */\n<fim_suffix>public class JdtBasedConstructorScope extends AbstractConstructorScope {\n\n\tprivate static final Logger logger = Logger.getLogger(JdtBasedConstructorScope.class);\n\t\n\tpublic JdtBasedConstructorScope(JdtBasedSimpleTypeScope typeScope) {\n\t\tsuper(typeScope);\n\t}\n\t\n\t@Override\n\tprotected Iterable<IEObjectDescription> internalGetAllElements() {\n\t\tIJavaProject javaProject = getTypeProvider().getJavaProject();\n\t\tif (javaProject == null)\n\t\t\treturn Collections.emptyList();\n\t\tfinal List<IEObjectDescription> allScopedElements = Lists.newArrayListWithExpectedSize(25000);\n\t\ttry {\n\t\t\tIJavaSearchScope searchScope = SearchEngine.createJavaSearchScope(new IJavaElement[] { javaProject });\n\t\t\tSearchRequestor searchRequestor = new SearchRequestor() {\n\t\t\t\t@Override\n\t\t\t\tpublic void acceptSearchMatch(SearchMatch match) throws CoreException {\n\t\t\t\t\tObject element = match.getElement();\n\t\t\t\t\tif (element instanceof IMethod) {\n\t\t\t\t\t\tIMethod constructor = (IMethod) element;\n\t\t\t\t\t\tallScopedElements.add(createScopedElement(constructor));\t\n\t\t\t\t\t} else if (element instanceof IType) {\n\t\t\t\t\t\tallScopedElements.add(createScopedElement((IType)element));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tcollectContents(searchScope, searchRequestor);\n\t\t}\n\t\tcatch (CoreException e) {\n\t\t\tlogger.error(\"CoreException when searching for constructors.\", e);\n\t\t}\n\t\treturn allScopedElements;\n\t}\n\t\n\tprotected IJdtTypeProvider getTypeProvider() {\n\t\treturn getTypeScope().getTypeProvider();\n\t}\n\t\n\tpublic IEObjectDescription createScopedElement(IMethod constructor) {\n\t\treturn new LazyConstructorDescription(constructor, getTypeProvider().getTypeUriHelper(), getQualifiedNameConverter());\n\t}\n\t\n\t/**\n\t * @since 2.3\n\t */\n\tpublic IEObjectDescription createScopedElement(IType type) {\n\t\treturn new LazyDefaultConstructorDescription(type, getTypeProvider().getTypeUriHelper(), getQualifiedNameConverter());\n\t}\n\t\n\tpublic void collectContents(IJavaSearchScope searchScope, SearchRequestor searchRequestor) throws CoreException {\n\t\tSearchPattern pattern = new ConstructorDeclarationPattern(null, null, SearchPattern.R_PREFIX_MATCH);\n\t\tnew SearchEngine().search(pattern, SearchUtils.getDefaultSearchParticipants(), searchScope, searchRequestor, new NullProgressMonitor());\n\t}\n\n\t@Override\n\tpublic JdtBasedSimpleTypeScope getTypeScope() {\n\t\treturn (JdtBasedSimpleTypeScope) super.getTypeScope();\n\t}\n\t\n\tpublic static class LazyConstructorDescription extends AbstractEObjectDescription {\n\n\t\tprivate final IMethod constructor;\n\t\tprivate final TypeURIHelper uriHelper;\n\t\tprivate final IQualifiedNameConverter converter;\n\t\tprivate QualifiedName qualifiedName = null;\n\t\tprivate JvmConstructor proxy = null;\n\t\tprivate URI uri = null;\n\n\t\tprotected LazyConstructorDescription(IMethod constructor, TypeURIHelper uriHelper, IQualifiedNameConverter converter) {\n\t\t\tthis.constructor = constructor;\n\t\t\tthis.uriHelper = uriHelper;\n\t\t\tthis.converter = converter;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic QualifiedName getName() {\n\t\t\treturn getQualifiedName();\n\t\t}\n\n\t\t@Override\n\t\tpublic QualifiedName getQualifiedName() {\n\t\t\tif (qualifiedName == null)\n\t\t\t\tqualifiedName = converter.toQualifiedName(constructor.getDeclaringType().getFullyQualifiedName('.'));\n\t\t\treturn qualifiedName;\n\t\t}\n\n\t\t@Override\n\t\tpublic JvmConstructor getEObjectOrProxy() {\n\t\t\tif (proxy == null) {\n\t\t\t\tproxy = createProxy();\n\t\t\t}\n\t\t\treturn proxy;\n\t\t}\n\n\t\t@Override\n\t\tpublic URI getEObjectURI() {\n\t\t\tif (uri == null)\n\t\t\t\turi = computeURI();\n\t\t\treturn uri;\n\t\t}\n\n\t\t@Override\n\t\tpublic EClass getEClass() {\n\t\t\treturn TypesPackage.Literals.JVM_CONSTRUCTOR;\n\t\t}\n\n\t\tprotected JvmConstructor createProxy() {\n\t\t\tInternalEObject proxy = (InternalEObject) TypesFactory.eINSTANCE.createJvmConstructor();\n\t\t\tproxy.eSetProxyURI(getEObjectURI());\n\t\t\treturn (JvmConstructor) proxy;\n\t\t}\n\t\t\n\t\tprotected URI computeURI() {\n\t\t\treturn uriHelper.getFullURI(constructor);\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * @since 2.3\n\t */\n\tpublic static class LazyDefaultConstructorDescription extends AbstractEObjectDescription {\n\n\t\tprivate final IType type;\n\t\tprivate final TypeURIHelper uriHelper;\n\t\tprivate final IQualifiedNameConverter converter;\n\t\tprivate QualifiedName qualifiedName = null;\n\t\tprivate JvmConstructor proxy = null;\n\t\tprivate URI uri = null;\n\n\t\tprotected LazyDefaultConstructorDescription(IType type, TypeURIHelper uriHelper, IQualifiedNameConverter converter) {\n\t\t\tthis.type = type;\n\t\t\tthis.uriHelper = uriHelper;\n\t\t\tthis.converter = converter;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic QualifiedName getName() {\n\t\t\treturn getQualifiedName();\n\t\t}\n\n\t\t@Override\n\t\tpublic QualifiedName getQualifiedName() {\n\t\t\tif (qualifiedName == null)\n\t\t\t\tqualifiedName = converter.toQualifiedName(type.getFullyQualifiedName('.'));\n\t\t\treturn qualifiedName;\n\t\t}\n\n\t\t@Override\n\t\tpublic JvmConstructor getEObjectOrProxy() {\n\t\t\tif (proxy == null) {\n\t\t\t\tproxy = createProxy();\n\t\t\t}\n\t\t\treturn proxy;\n\t\t}\n\n\t\t@Override\n\t\tpublic URI getEObjectURI() {\n\t\t\tif (uri == null)\n\t\t\t\turi = computeURI();\n\t\t\treturn uri;\n\t\t}\n\n\t\t@Override\n\t\tpublic EClass getEClass() {\n\t\t\treturn TypesPackage.Literals.JVM_CONSTRUCTOR;\n\t\t}\n\n\t\tprotected JvmConstructor createProxy() {\n\t\t\tInternalEObject proxy = (InternalEObject) TypesFactory.eINSTANCE.createJvmConstructor();\n\t\t\tproxy.eSetProxyURI(getEObjectURI());\n\t\t\treturn (JvmConstructor) proxy;\n\t\t}\n\t\t\n\t\tprotected URI computeURI() {\n\t\t\tString typeURI = uriHelper.getFullURI(type).toString();\n\t\t\treturn URI.createURI(typeURI + '.' + type.getElementName() + \"()\");\n\t\t}\n\t\t\n\t}\n\n}<fim_middle>// class below has no smell\n"}