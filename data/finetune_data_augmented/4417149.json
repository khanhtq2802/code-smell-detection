{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.empire.samples.cxf.wssample.server;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.cxf.interceptor.LoggingInInterceptor;\nimport org.apache.cxf.interceptor.LoggingOutInterceptor;\nimport org.apache.cxf.jaxws.JaxWsServerFactoryBean;\nimport org.apache.empire.db.DBCommand;\nimport org.apache.empire.db.DBDatabaseDriver;\nimport org.apache.empire.db.DBRecord;\nimport org.apache.empire.db.DBSQLScript;\nimport org.apache.empire.db.hsql.DBDatabaseDriverHSql;\nimport org.apache.empire.db.mysql.DBDatabaseDriverMySQL;\nimport org.apache.empire.db.oracle.DBDatabaseDriverOracle;\nimport org.apache.empire.db.sqlserver.DBDatabaseDriverMSSQL;\nimport org.apache.empire.samples.cxf.wssample.common.EmployeeService;\nimport org.apache.empire.samples.cxf.wssample.server.db.SampleDB;\npublic class ServerControl\n{\n    private static final Log               log            = LogFactory.getLog(EmployeeServiceImpl.class);\n    public static final String             serviceName    = \"employeeService\";\n    public static final String             serviceAddress = \"http://localhost:8081/\" + serviceName;\n    private SampleDB                       db             = null;\n    private Connection                     conn           = null;\n    private SampleConfig                   config         = null;\n    private DBDatabaseDriver               driver         = null;\n    private String                         configPath     = \"config.xml\";\n    private org.apache.cxf.endpoint.Server endpoint       = null;\n    private JaxWsServerFactoryBean svrFactory = null;\n    public ServerControl()\n    {\n        init();\n    }\n    // stops the service\n    public void stop()\n    {\n        db.commit(conn);\n        log.info(\"[stop] commit to database\");\n        db.close(conn);\n        log.info(\"[stop] close database connection\");\n        endpoint.stop();\n        log.info(\"[stop] stopped werbservice endpoint\");\n    }\n    // starts the service\n    public void start()\n    {\n        // create the server\n        endpoint = svrFactory.create();\n        // service is now created and may be started\n        log.info(\"[init] \" + serviceName + \" successfully created ...\");\n        if (endpoint != null)\n        {\n            db.open(driver, conn);\n            endpoint.start();\n            log.info(\"[start] \" + serviceName + \" successfully started!\");\n        } else\n        {\n            log.error(\"[start] The webservice seems not to be initialized correctly!\");\n        }\n    }\n    public void appendLogger(LoggingOutInterceptor out, LoggingInInterceptor in)\n    {\n        svrFactory.getOutInterceptors().add(out);\n        svrFactory.getInInterceptors().add(in);\n    }\n    private void init()\n    {\n        initDB();\n        initWS();\n    }\n    /*\n     * init database, create tables if necessary ...\n     */\n    private void initDB()\n    {\n        config = new SampleConfig();\n        db = new SampleDB();\n        config.init(configPath);\n        driver = getDatabaseDriver(config.getDatabaseProvider());\n        conn = getJDBCConnection();\n        // Open Database (and create if not existing)\n        log.info(\"*** open database ***\");\n        db.open(driver, conn);\n        if (!databaseExists(conn))\n        {\n            // STEP 4: Create Database\n            log.info(\"*** create Database ***\");\n            createSampleDatabase(driver, conn);\n        }\n        log.info(\"[init] Database successfully initialized!\");\n    }\n    /*\n     * init webservice, create implemantion, connect to server ...\n     */\n<fim_suffix>    private void initWS()\n    {\n        // create new instance of the service implmentation\n        EmployeeService impl = new EmployeeServiceImpl(db, conn);\n        // construct/configure factory to create our specific service\n        svrFactory = new JaxWsServerFactoryBean();\n        //svrFactory.getInInterceptors().add(new LoggingInInterceptor());\n        //svrFactory.getOutInterceptors().add(new LoggingOutInterceptor());\n        // specify our implementation class\n        svrFactory.setServiceClass(EmployeeService.class);\n        // specify the address\n        svrFactory.setAddress(serviceAddress);\n        // set the instance to be used\n        svrFactory.setServiceBean(impl);\n    }\n    private Connection getJDBCConnection()\n    {\n        // Establish a new database connection\n        Connection conn = null;\n        String jdbcURL = config.getJdbcURL();\n        // Connect\n        log.info(\"Connecting to Database'\" + jdbcURL + \"' / User=\" + config.getJdbcUser());\n        try\n        { // Connect to the databse\n            Class.forName(config.getJdbcClass()).newInstance();\n            conn = DriverManager.getConnection(jdbcURL, config.getJdbcUser(), config.getJdbcPwd());\n            log.info(\"Connected successfully\");\n            // Set the AutoCommit to false this session. \n            // You must commit explicitly now.\n            conn.setAutoCommit(false);\n            log.info(\"AutoCommit is \" + conn.getAutoCommit());\n        } catch (Exception e)\n        {\n            log.error(\"Failed to connect directly to '\" + config.getJdbcURL() + \"' / User=\" + config.getJdbcUser());\n            log.error(e.toString());\n            throw new RuntimeException(e);\n        }\n        return conn;\n    }\n    private DBDatabaseDriver getDatabaseDriver(String provider)\n    {\n        if (provider.equalsIgnoreCase(\"mysql\"))\n        {\n            DBDatabaseDriverMySQL driver = new DBDatabaseDriverMySQL();\n            // Set Driver specific properties (if any)\n            driver.setDatabaseName(config.getSchemaName());\n            return driver;\n        } else if (provider.equalsIgnoreCase(\"oracle\"))\n        {\n            DBDatabaseDriverOracle driver = new DBDatabaseDriverOracle();\n            // Set Driver specific properties (if any)\n            return driver;\n        } else if (provider.equalsIgnoreCase(\"sqlserver\"))\n        {\n            DBDatabaseDriverMSSQL driver = new DBDatabaseDriverMSSQL();\n            // Set Driver specific properties (if any)\n            driver.setDatabaseName(config.getSchemaName());\n            return driver;\n        } else if (provider.equalsIgnoreCase(\"hsqldb\"))\n        {\n            DBDatabaseDriverHSql driver = new DBDatabaseDriverHSql();\n            // Set Driver specific properties (if any)\n            return driver;\n        } else\n        { // Unknown Provider\n            throw new RuntimeException(\"Unknown Database Provider \" + provider);\n        }\n    }\n    private boolean databaseExists(Connection conn)\n    {\n        // Check wether DB exists\n        DBCommand cmd = db.createCommand();\n        cmd.select(db.DEPARTMENTS.count());\n        int deps = db.querySingleInt(cmd, -1, conn);\n        return (deps >= 0);\n    }\n    /*\n     * creates a DDL Script for the entire SampleDB Database then checks if the department table exists by running\n     * \"select count(*) from DEPARTMENTS\" if the department tables does not exist, the entire dll-script is executed line by\n     * line\n     */\n    private void createSampleDatabase(DBDatabaseDriver driver, Connection conn)\n    {\n        // create DLL for Database Definition\n        DBSQLScript script = new DBSQLScript();\n        db.getCreateDDLScript(driver, script);\n        // Show DLL Statements\n        System.out.println(script.toString());\n        // Execute Script\n        script.executeAll(driver, conn, false);\n        db.commit(conn);\n        // Open again\n        if (!db.isOpen()){\n    \t\tdb.open(driver, conn);\n        }\n        // Insert Sample Departments\n        int idDevDep = insertDepartmentSampleRecord(conn, \"Development\", \"ITTK\");\n        int idSalDep = insertDepartmentSampleRecord(conn, \"Sales\", \"ITTK\");\n        // Insert Sample Employees\n        insertEmployeeSampleRecord(conn, \"Mr.\", \"Eugen\", \"Miller\", \"M\", idDevDep);\n        insertEmployeeSampleRecord(conn, \"Mr.\", \"Max\", \"Mc. Callahan\", \"M\", idDevDep);\n        insertEmployeeSampleRecord(conn, \"Mrs.\", \"Anna\", \"Smith\", \"F\", idSalDep);\n        // Commit\n        db.commit(conn);\n    }\n    /*\n     * Insert a department\n     */<fim_middle>// function below has no smell\n"}