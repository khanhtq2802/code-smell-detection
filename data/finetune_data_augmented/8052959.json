{"text": "<fim_prefix>/*\n * generated by Xtext\n */\npackage org.eclipse.xtext.serializer;\n\nimport java.util.Collections;\n\nimport org.eclipse.emf.common.util.URI;\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.emf.ecore.EReference;\nimport org.eclipse.emf.ecore.EStructuralFeature;\nimport org.eclipse.emf.ecore.EStructuralFeature.Setting;\nimport org.eclipse.xtext.common.services.DefaultTerminalConverters;\nimport org.eclipse.xtext.conversion.IValueConverter;\nimport org.eclipse.xtext.conversion.IValueConverterService;\nimport org.eclipse.xtext.conversion.ValueConverter;\nimport org.eclipse.xtext.conversion.ValueConverterException;\nimport org.eclipse.xtext.diagnostics.IDiagnosticProducer;\nimport org.eclipse.xtext.linking.ILinker;\nimport org.eclipse.xtext.linking.lazy.LazyLinker;\nimport org.eclipse.xtext.naming.QualifiedName;\nimport org.eclipse.xtext.nodemodel.INode;\nimport org.eclipse.xtext.resource.EObjectDescription;\nimport org.eclipse.xtext.resource.IEObjectDescription;\nimport org.eclipse.xtext.scoping.IScope;\nimport org.eclipse.xtext.scoping.IScopeProvider;\nimport org.eclipse.xtext.scoping.impl.AbstractScope;\nimport org.eclipse.xtext.scoping.impl.SimpleLocalScopeProvider;\nimport org.eclipse.xtext.serializer.sequencer.ITransientValueService;\nimport org.eclipse.xtext.serializer.sequencer.LegacyTransientValueService;\nimport org.eclipse.xtext.serializer.sequencertest.NullCrossRef;\nimport org.eclipse.xtext.serializer.sequencertest.SequencertestPackage;\n\nimport com.google.common.collect.Multimap;\nimport com.google.inject.Singleton;\n\n/**\n * Use this class to register components to be used at runtime / without the Equinox extension registry.\n */\npublic class SequencerTestLanguageRuntimeModule extends AbstractSequencerTestLanguageRuntimeModule {\n\n\tpublic static class NullSafeEObjectDescription extends EObjectDescription {\n\n\t\tpublic NullSafeEObjectDescription(QualifiedName qualifiedName, EObject element) {\n\t\t\tsuper(qualifiedName, element, Collections.<String, String> emptyMap());\n\t\t}\n\n\t\t@Override\n\t\tpublic URI getEObjectURI() {\n\t\t\tif (getEObjectOrProxy() == null)\n\t\t\t\treturn URI.createURI(\"null\");\n\t\t\treturn super.getEObjectURI();\n\t\t}\n\n\t}\n\n\tpublic static class NullSettingLazyLinker extends LazyLinker {\n\t\t@Override\n\t\tprotected void installProxies(EObject obj, IDiagnosticProducer producer, Multimap<Setting, INode> settingsToLink) {\n\t\t\tsuper.installProxies(obj, producer, settingsToLink);\n\t\t\tif (obj instanceof NullCrossRef)\n\t\t\t\t((NullCrossRef) obj).setRef(null);\n\t\t}\n\t}\n\n\tpublic static class SequencerTestScopeProvider extends SimpleLocalScopeProvider {\n\n<fim_suffix>\t\t@Override\n\t\tpublic IScope getScope(EObject context, EReference reference) {\n\t\t\tif (reference == SequencertestPackage.Literals.NULL_CROSS_REF__REF)\n\t\t\t\treturn new AbstractScope(IScope.NULLSCOPE, false) {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Iterable<IEObjectDescription> getElements(EObject object) {\n\t\t\t\t\t\treturn Collections.singletonList(getSingleElement(object));\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic IEObjectDescription getSingleElement(EObject object) {\n\t\t\t\t\t\treturn EObjectDescription.create(\"null\", null);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected Iterable<IEObjectDescription> getAllLocalElements() {\n\t\t\t\t\t\tthrow new UnsupportedOperationException();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\treturn super.getScope(context, reference);\n\t\t}\n\t}\n\n\tpublic static class SequencerTestTransientValueService extends LegacyTransientValueService {\n\t\t@Override\n\t\tpublic ValueTransient isValueTransient(EObject semanticObject, EStructuralFeature feature) {\n\t\t\tif (feature == SequencertestPackage.Literals.NULL_VALUE__VALUE)\n\t\t\t\treturn ValueTransient.NO;\n\t\t\tif (feature == SequencertestPackage.Literals.NULL_CROSS_REF__REF)\n\t\t\t\treturn ValueTransient.NO;\n\t\t\treturn super.isValueTransient(semanticObject, feature);\n\t\t}\n\t}\n\n\t@Singleton\n\tpublic static class SequencerTestValueConverter extends DefaultTerminalConverters {\n\t\t@ValueConverter(rule = \"NULL_STRING\")\n\t\tpublic IValueConverter<String> NULL_STRING() {\n\t\t\treturn new IValueConverter<String>() {\n\t\t\t\t@Override\n\t\t\t\tpublic String toString(String value) throws ValueConverterException {\n\t\t\t\t\tif (value == null)\n\t\t\t\t\t\treturn \"''\";\n\t\t\t\t\treturn \"'\" + value + \"'\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic String toValue(String string, INode node) throws ValueConverterException {\n\t\t\t\t\tif (string.length() <= 2) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\treturn string.substring(1, string.length() - 1);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\t@Override\n\tpublic Class<? extends ILinker> bindILinker() {\n\t\treturn NullSettingLazyLinker.class;\n\t}\n\n\t@Override\n\tpublic Class<? extends IScopeProvider> bindIScopeProvider() {\n\t\treturn SequencerTestScopeProvider.class;\n\t}\n\n\tpublic Class<? extends ITransientValueService> bindITransientValueService2() {\n\t\treturn SequencerTestTransientValueService.class;\n\t}\n\n\t@Override\n\tpublic Class<? extends IValueConverterService> bindIValueConverterService() {\n\t\treturn SequencerTestValueConverter.class;\n\t}\n}<fim_middle>// function below has no smell\n"}