{"text": "<fim_prefix>            throw new FileNotFoundException(\"Couldn't open source configuration file\");\n        }\n    }\n    /**\n     * Reads config from the given source file, updating it using the given \n     * configuration and writing in to the given output.\n     */\n    public void write(CeylonConfig config, File source, OutputStream out) throws IOException {\n        if (source.isFile()) {\n            InputStream in = null;\n            try {\n                in = new FileInputStream(source);\n                write(config, in, out);\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) { }\n                }\n            }\n        } else {\n            throw new FileNotFoundException(\"Couldn't open source configuration file\");\n        }\n    }\n    public void write(CeylonConfig config, InputStream in, File destination) throws IOException {\n        OutputStream out = null;\n        try {\n            // First create any parent directories if necessary\n            File parentDir = destination.getAbsoluteFile().getParentFile();\n            if (!parentDir.exists()) {\n                FileUtil.mkdirs(parentDir);\n            }\n            // Now create the file itself\n            out = new FileOutputStream(destination);\n            write(config, in, out);\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n    /**\n     * Reads config from the given input, updating it using the given \n     * configuration and writing in to the given output.\n     */\n    public void write(CeylonConfig orgconfig, InputStream in, OutputStream out) throws IOException {\n        final CeylonConfig config = orgconfig.copy();\n        final Writer writer = new BufferedWriter(new OutputStreamWriter(out, Charset.forName(\"UTF-8\")));\n        ConfigReader reader = new ConfigReader(in, new ImprovedConfigReaderListenerAdapter(new ImprovedConfigReaderListener() {\n            private boolean skipToNewline = false;\n            @Override\n            public void setup() throws IOException {\n                // Ignoring setup\n            }\n            @Override\n            public void onSection(String section, String text) throws IOException {\n                if (config.isSectionDefined(section)) {\n                    writer.write(text);\n                    skipToNewline = false;\n                } else {\n                    skipToNewline = true;\n                }\n            }\n            @Override\n            public void onSectionEnd(String section) throws IOException {\n                writeOptions(writer, config, section);\n            }\n            @Override\n            public void onOption(String name, String value, String text) throws IOException {\n                if (config.isOptionDefined(name)) {\n                    String[] newValues = config.getOptionValues(name);\n                    if (value.equals(newValues[0])) {\n                        // The value hasn't changed, we'll write the option *exactly* as it was\n                        writer.write(text);\n                    } else {\n                        // The value has changed, we will write a new option\n                        CeylonConfig.Key k = new CeylonConfig.Key(name);\n                        writeOptionValue(writer, k.getOptionName(), newValues[0]);\n                    }\n                    removeOptionValue(name);\n                    skipToNewline = false;\n                } else {\n                    skipToNewline = true;\n                }\n            }\n            @Override\n            public void onComment(String text) throws IOException {\n                if (skipToNewline) {\n                    skipToNewline = !text.contains(\"\\n\");\n                } else {\n                    writer.write(text);\n                }\n            }\n            @Override\n            public void onWhitespace(String text) throws IOException {\n                if (skipToNewline) {\n                    skipToNewline = !text.contains(\"\\n\");\n                } else {\n                    writer.write(text);\n                }\n            }\n            @Override\n            public void cleanup() throws IOException {\n                // Ignoring cleanup\n            }\n            private void removeOptionValue(String name) {\n                String[] values = config.getOptionValues(name);\n                if (values.length > 1) {\n                    values = Arrays.copyOfRange(values, 1, values.length);\n                    config.setOptionValues(name, values);\n                } else {\n                    config.removeOption(name);\n                }\n            }\n        }));\n        reader.process();\n        writer.flush();\n        // Now write what's left of the configuration to the output\n        writeSections(writer, config, out);\n        writer.flush();\n    }\n    /**\n     * Write the given configuration to the given output stream.\n     */\n    public void write(CeylonConfig orgconfig, OutputStream out) throws IOException {\n        final CeylonConfig config = orgconfig.copy();\n        final Writer writer = new BufferedWriter(new OutputStreamWriter(out, Charset.forName(\"UTF-8\")));\n        writeSections(writer, config, out);\n        writer.flush();\n    }\n    protected void writeSections(Writer writer, CeylonConfig config, OutputStream out) throws IOException {\n        String[] sections = config.getSectionNames(null);\n        Arrays.sort(sections);\n        for (String section : sections) {\n            if (config.getOptionNames(section).length > 0) {\n                writer.write(System.lineSeparator());\n                writeSection(writer, section);\n                writeOptions(writer, config, section);\n            }\n        }\n    }\n    protected void writeSection(Writer writer, String section) throws IOException {\n        String[] names = section.split(\"\\\\.\");\n        if (names.length > 1) {\n            StringBuffer pre = new StringBuffer();\n            for (int i = 0; i < names.length - 1; i++) {\n                if (i > 0) {\n                    pre.append(\".\");\n                }\n                pre.append(names[i]);\n            }\n            String post = names[names.length - 1];\n            writeCompoundSection(writer, pre.toString(), post);\n        } else {\n            writeSimpleSection(writer, section);\n        }\n    }\n    protected void writeSimpleSection(Writer writer, String section) throws IOException {\n        writer.write(\"[\");\n        writer.write(section);\n        writer.write(\"]\");\n        writer.write(System.lineSeparator());\n    }\n    protected void writeCompoundSection(Writer writer, String pre, String post) throws IOException {\n        writer.write(\"[\");\n        writer.write(pre);\n        writer.write(\" \\\"\");\n        writer.write(post);\n        writer.write(\"\\\"\");\n        writer.write(\"]\");\n        writer.write(System.lineSeparator());\n    }\n    protected void writeOptions(Writer writer, CeylonConfig config, String section) throws IOException {\n        String[] names = config.getOptionNames(section);\n        if (names != null) {\n            for (int i=0; i < names.length; i++) {\n                String name = names[i];\n                writeOption(writer, config, section, name);\n                config.removeOption(section + \".\" + name);\n                writer.write(System.lineSeparator());\n            }\n        }\n    }\n    protected void writeOption(Writer writer, CeylonConfig config, String section, String name) throws IOException {\n        String[] values = config.getOptionValues(section + \".\" + name);\n        if (values != null) {\n            for (int i=0; i < values.length; i++) {\n                String value = values[i];\n                writeOptionValue(writer, name, value);\n                if (i < (values.length - 1)) {\n                    writer.write(System.lineSeparator());\n                }\n            }\n        }\n    }\n    protected void writeOptionValue(Writer writer, String name, String value) throws IOException {\n        writer.write(name);\n        writer.write(\"=\");\n        writer.write(quote(value));\n    }\n    public static String escape(String value) {\n        value = value.replace(\"\\\\\", \"\\\\\\\\\");\n        value = value.replace(\"\\\"\", \"\\\\\\\"\");\n        value = value.replace(\"\\t\", \"\\\\t\");\n        value = value.replace(\"\\n\", \"\\\\n\");\n        return value;\n    }\n    public static String quote(String value) {\n        value = escape(value);\n        boolean needsQuotes = value.contains(\";\") || value.contains(\"#\") || value.endsWith(\" \");\n        if (needsQuotes) {\n            return \"\\\"\" + value + \"\\\"\";\n        } else {\n            return value;\n        }\n    }\n}\ninterface ImprovedConfigReaderListener extends ConfigReaderListener {\n    public void onSectionEnd(String section) throws IOException;\n}\n// This adapter class improves on the standard ConfigReaderListener interface\n// by adding an onSectionEnd() event which will be triggered at the end of\n// each configuration section. It tries to be smart about this by considering\n// whitespace and comments on the last option line to be still part of the\n// last section while considering all whitespace and comments before a section\n// line to be part of the new section\nclass ImprovedConfigReaderListenerAdapter implements ConfigReaderListener {\n    private ImprovedConfigReaderListener listener;\n    private String currentSection;\n    private boolean skipToNewline;\n    private ArrayList<Text> buffer;\n    interface Text {\n        String getText();\n    }\n    class Comment implements Text {\n        private String text;\n        public Comment(String text) {\n            this.text = text;\n        }\n        @Override\n        public String getText() {\n            return text;\n        }\n    }\n<fim_suffix>    class Whitespace implements Text {\n        private String text;\n        public Whitespace(String text) {\n            this.text = text;\n        }\n        @Override\n        public String getText() {\n            return text;\n        }\n    }<fim_middle>// class below is data class\n"}