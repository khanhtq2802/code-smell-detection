{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the  \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * $Id$\n */\npackage org.apache.xml.dtm.ref;\n\n/**\n * The class ExtendedType represents an extended type object used by\n * ExpandedNameTable.\n */\npublic final class ExtendedType\n{\n    private int nodetype;\n    private String namespace;\n    private String localName;\n    private int hash;\n\n    /**\n     * Create an ExtendedType object from node type, namespace and local name.\n     * The hash code is calculated from the node type, namespace and local name.\n     * \n     * @param nodetype Type of the node\n     * @param namespace Namespace of the node\n     * @param localName Local name of the node\n     */\n    public ExtendedType (int nodetype, String namespace, String localName)\n    {\n      this.nodetype = nodetype;\n      this.namespace = namespace;\n      this.localName = localName;\n      this.hash = nodetype + namespace.hashCode() + localName.hashCode();\n    }\n\n    /**\n     * Create an ExtendedType object from node type, namespace, local name\n     * and a given hash code.\n     * \n     * @param nodetype Type of the node\n     * @param namespace Namespace of the node\n     * @param localName Local name of the node\n     * @param hash The given hash code\n     */\n    public ExtendedType (int nodetype, String namespace, String localName, int hash)\n    {\n      this.nodetype = nodetype;\n      this.namespace = namespace;\n      this.localName = localName;\n      this.hash = hash;\n    }\n\n    /** \n     * Redefine this ExtendedType object to represent a different extended type.\n     * This is intended to be used ONLY on the hashET object. Using it elsewhere\n     * will mess up existing hashtable entries!\n     */\n    protected void redefine(int nodetype, String namespace, String localName)\n    {\n      this.nodetype = nodetype;\n      this.namespace = namespace;\n      this.localName = localName;\n      this.hash = nodetype + namespace.hashCode() + localName.hashCode();\n    }\n\n    /** \n     * Redefine this ExtendedType object to represent a different extended type.\n     * This is intended to be used ONLY on the hashET object. Using it elsewhere\n     * will mess up existing hashtable entries!\n     */\n    protected void redefine(int nodetype, String namespace, String localName, int hash)\n    {\n      this.nodetype = nodetype;\n      this.namespace = namespace;\n      this.localName = localName;\n      this.hash = hash;\n    }\n\n    /**\n     * Override the hashCode() method in the Object class\n     */\n    public int hashCode()\n    {\n      return hash;\n    }\n\n    /**\n     * Test if this ExtendedType object is equal to the given ExtendedType.\n     * \n     * @param other The other ExtendedType object to test for equality\n     * @return true if the two ExtendedType objects are equal.\n     */\n<fim_suffix>    public boolean equals(ExtendedType other)\n    {\n      try\n      {\n        return other.nodetype == this.nodetype &&\n                other.localName.equals(this.localName) &&\n                other.namespace.equals(this.namespace);\n      }\n      catch(NullPointerException e)\n      {\n        return false;\n      }\n    }\n    \n    /**\n     * Return the node type\n     */\n    public int getNodeType()\n    {\n      return nodetype;\n    }\n    \n    /**\n     * Return the local name\n     */\n    public String getLocalName()\n    {\n      return localName;\n    }\n    \n    /**\n     * Return the namespace\n     */\n    public String getNamespace()\n    {\n      return namespace;\n    }\n\n}<fim_middle>// function below has no smell\n"}