{"text": "<fim_prefix>/********************************************************************************\n * Copyright (c) 2011-2017 Red Hat Inc. and/or its affiliates and others\n *\n * This program and the accompanying materials are made available under the \n * terms of the Apache License, Version 2.0 which is available at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * SPDX-License-Identifier: Apache-2.0 \n ********************************************************************************/\npackage org.eclipse.ceylon.tools.new_;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.eclipse.ceylon.common.FileUtil;\nimport org.eclipse.ceylon.common.tool.Tool;\nimport org.eclipse.ceylon.common.tools.CeylonTool;\n\n<fim_suffix>public abstract class NewSubTool implements Tool {\n\n    private File directory;\n    \n    public void setDirectory(File directory) {\n        this.directory = directory;\n    }\n    \n    public File getDirectory() {\n        return this.directory;\n    }\n    \n    void mkBaseDir(File cwd) throws IOException {\n        if (directory != null) {\n            File actualDir = FileUtil.applyCwd(cwd, directory);\n            if (actualDir.exists() && !actualDir.isDirectory()) {\n                throw new IOException(Messages.msg(\"path.exists.and.not.dir\", directory));\n            } else if (!actualDir.exists()) {\n                if (!FileUtil.mkdirs(actualDir)) {\n                    throw new IOException(Messages.msg(\"could.not.mkdir\", directory));\n                }\n            }\n        }\n    }\n    \n    public abstract List<Variable> getVariables();\n    \n    public abstract List<Copy> getResources(Environment env);\n    \n    @Override\n    public void initialize(CeylonTool mainTool) {\n    }\n    \n    @Override\n    public final void run() throws Exception {\n        // Projects are never run as tools\n        throw new RuntimeException();\n    }\n    \n}\n<fim_middle>// class below has no smell\n"}