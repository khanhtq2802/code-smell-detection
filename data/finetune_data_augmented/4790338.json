{"text": "<fim_prefix>import org.apache.shardingsphere.core.parse.parser.sql.SQLStatement;\nimport org.apache.shardingsphere.core.parse.parser.sql.dml.DMLStatement;\nimport org.apache.shardingsphere.core.parse.parser.sql.dml.insert.InsertStatement;\nimport org.apache.shardingsphere.core.parse.parser.sql.dql.select.SelectStatement;\nimport org.apache.shardingsphere.core.parse.parser.token.AggregationDistinctToken;\nimport org.apache.shardingsphere.core.parse.parser.token.EncryptColumnToken;\nimport org.apache.shardingsphere.core.parse.parser.token.IndexToken;\nimport org.apache.shardingsphere.core.parse.parser.token.InsertValuesToken;\nimport org.apache.shardingsphere.core.parse.parser.token.ItemsToken;\nimport org.apache.shardingsphere.core.parse.parser.token.OffsetToken;\nimport org.apache.shardingsphere.core.parse.parser.token.OrderByToken;\nimport org.apache.shardingsphere.core.parse.parser.token.RemoveToken;\nimport org.apache.shardingsphere.core.parse.parser.token.RowCountToken;\nimport org.apache.shardingsphere.core.parse.parser.token.SQLToken;\nimport org.apache.shardingsphere.core.parse.parser.token.SchemaToken;\nimport org.apache.shardingsphere.core.parse.parser.token.TableToken;\nimport org.apache.shardingsphere.core.parse.util.SQLUtil;\nimport org.apache.shardingsphere.core.rewrite.hook.RewriteHook;\nimport org.apache.shardingsphere.core.rewrite.hook.SPIRewriteHook;\nimport org.apache.shardingsphere.core.rewrite.placeholder.AggregationDistinctPlaceholder;\nimport org.apache.shardingsphere.core.rewrite.placeholder.EncryptUpdateItemColumnPlaceholder;\nimport org.apache.shardingsphere.core.rewrite.placeholder.EncryptWhereColumnPlaceholder;\nimport org.apache.shardingsphere.core.rewrite.placeholder.IndexPlaceholder;\nimport org.apache.shardingsphere.core.rewrite.placeholder.InsertValuesPlaceholder;\nimport org.apache.shardingsphere.core.rewrite.placeholder.SchemaPlaceholder;\nimport org.apache.shardingsphere.core.rewrite.placeholder.ShardingPlaceholder;\nimport org.apache.shardingsphere.core.rewrite.placeholder.TablePlaceholder;\nimport org.apache.shardingsphere.core.route.SQLUnit;\nimport org.apache.shardingsphere.core.route.type.RoutingTable;\nimport org.apache.shardingsphere.core.route.type.TableUnit;\nimport org.apache.shardingsphere.core.rule.BindingTableRule;\nimport org.apache.shardingsphere.core.rule.ShardingRule;\nimport org.apache.shardingsphere.spi.encrypt.ShardingEncryptor;\nimport org.apache.shardingsphere.spi.encrypt.ShardingQueryAssistedEncryptor;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\n/**\n * SQL rewrite engine.\n * \n * <p>Rewrite logic SQL to actual SQL, should rewrite table name and optimize something.</p>\n *\n * @author zhangliang\n * @author maxiaoguang\n * @author panjuan\n */\npublic final class SQLRewriteEngine {\n    private final ShardingRule shardingRule;\n    private final String originalSQL;\n    private final DatabaseType databaseType;\n    private final SQLStatement sqlStatement;\n    private final List<SQLToken> sqlTokens;\n    private final List<Object> parameters;\n    private final Map<Integer, Object> appendedIndexAndParameters;\n    private final OptimizeResult optimizeResult;\n    private final RewriteHook rewriteHook = new SPIRewriteHook();\n    /**\n     * Constructs SQL rewrite engine.\n     * \n     * @param shardingRule databases and tables sharding rule\n     * @param originalSQL original SQL\n     * @param databaseType database type\n     * @param sqlStatement SQL statement\n     * @param parameters parameters\n     */\n    public SQLRewriteEngine(final ShardingRule shardingRule, \n                            final String originalSQL, final DatabaseType databaseType, final SQLStatement sqlStatement, final List<Object> parameters, final OptimizeResult optimizeResult) {\n        this.shardingRule = shardingRule;\n        this.originalSQL = originalSQL;\n        this.databaseType = databaseType;\n        this.sqlStatement = sqlStatement;\n        sqlTokens = sqlStatement.getSQLTokens();\n        this.parameters = parameters;\n        appendedIndexAndParameters = new LinkedHashMap<>();\n        this.optimizeResult = optimizeResult;\n    }\n    /**\n     * rewrite SQL.\n     *\n     * @param isSingleRouting is rewrite\n     * @return SQL builder\n     */\n    public SQLBuilder rewrite(final boolean isSingleRouting) {\n        SQLBuilder result = new SQLBuilder(parameters);\n        if (sqlTokens.isEmpty()) {\n            return appendOriginalLiterals(result);\n        }\n        appendInitialLiterals(!isSingleRouting, result);\n        appendTokensAndPlaceholders(!isSingleRouting, result);\n        reviseParameters();\n        return result;\n    }\n    private SQLBuilder appendOriginalLiterals(final SQLBuilder sqlBuilder) {\n        sqlBuilder.appendLiterals(originalSQL);\n        return sqlBuilder;\n    }\n    private void appendInitialLiterals(final boolean isRewrite, final SQLBuilder sqlBuilder) {\n        if (isRewrite && isContainsAggregationDistinctToken()) {\n            appendAggregationDistinctLiteral(sqlBuilder);\n        } else {\n            sqlBuilder.appendLiterals(originalSQL.substring(0, sqlTokens.get(0).getStartIndex()));\n        }\n    }\n    private boolean isContainsAggregationDistinctToken() {\n        return Iterators.tryFind(sqlTokens.iterator(), new Predicate<SQLToken>() {\n            @Override\n            public boolean apply(final SQLToken input) {\n                return input instanceof AggregationDistinctToken;\n            }\n        }).isPresent();\n    }\n    private void appendAggregationDistinctLiteral(final SQLBuilder sqlBuilder) {\n        int firstSelectItemStartIndex = ((SelectStatement) sqlStatement).getFirstSelectItemStartIndex();\n        sqlBuilder.appendLiterals(originalSQL.substring(0, firstSelectItemStartIndex));\n        sqlBuilder.appendLiterals(\"DISTINCT \");\n        sqlBuilder.appendLiterals(originalSQL.substring(firstSelectItemStartIndex, sqlTokens.get(0).getStartIndex()));\n    }\n    private void appendTokensAndPlaceholders(final boolean isRewrite, final SQLBuilder sqlBuilder) {\n        int count = 0;\n        for (SQLToken each : sqlTokens) {\n            if (each instanceof TableToken) {\n                appendTablePlaceholder(sqlBuilder, (TableToken) each, count);\n            } else if (each instanceof SchemaToken) {\n                appendSchemaPlaceholder(sqlBuilder, (SchemaToken) each, count);\n            } else if (each instanceof IndexToken) {\n                appendIndexPlaceholder(sqlBuilder, (IndexToken) each, count);\n            } else if (each instanceof ItemsToken) {\n                appendItemsToken(sqlBuilder, (ItemsToken) each, count, isRewrite);\n            } else if (each instanceof InsertValuesToken) {\n                appendInsertValuesToken(sqlBuilder, (InsertValuesToken) each, count, optimizeResult.getInsertColumnValues().get());\n            } else if (each instanceof RowCountToken) {\n                appendLimitRowCount(sqlBuilder, (RowCountToken) each, count, isRewrite);\n            } else if (each instanceof OffsetToken) {\n                appendLimitOffsetToken(sqlBuilder, (OffsetToken) each, count, isRewrite);\n            } else if (each instanceof OrderByToken) {\n                appendOrderByToken(sqlBuilder, count, isRewrite);\n            } else if (each instanceof AggregationDistinctToken) {\n                appendAggregationDistinctPlaceholder(sqlBuilder, (AggregationDistinctToken) each, count, isRewrite);\n            } else if (each instanceof EncryptColumnToken) {\n                appendEncryptColumnPlaceholder(sqlBuilder, (EncryptColumnToken) each, count);\n            } else if (each instanceof RemoveToken) {\n                appendRest(sqlBuilder, count, ((RemoveToken) each).getStopIndex());\n            }\n            count++;\n        }\n    }\n    private void appendTablePlaceholder(final SQLBuilder sqlBuilder, final TableToken tableToken, final int count) {\n        sqlBuilder.appendPlaceholder(new TablePlaceholder(tableToken.getTableName().toLowerCase(), tableToken.getLeftDelimiter(), tableToken.getRightDelimiter()));\n        int startIndex = tableToken.getStartIndex() + tableToken.getLength();\n        appendRest(sqlBuilder, count, startIndex);\n    }\n<fim_suffix>    private void appendSchemaPlaceholder(final SQLBuilder sqlBuilder, final SchemaToken schemaToken, final int count) {\n        String schemaName = originalSQL.substring(schemaToken.getStartIndex(), schemaToken.getStopIndex() + 1);\n        sqlBuilder.appendPlaceholder(new SchemaPlaceholder(schemaName.toLowerCase(), schemaToken.getTableName().toLowerCase()));\n        appendRest(sqlBuilder, count, schemaToken.getStopIndex() + 1);\n    }<fim_middle>// function below has no smell\n"}