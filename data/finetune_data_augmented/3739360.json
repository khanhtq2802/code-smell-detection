{"text": "<fim_prefix>            return;\n        }\n        DruidConnectionHolder holder = this.holder;\n        if (holder == null) {\n            if (dupCloseLogEnable) {\n                LOG.error(\"dup close\");\n            }\n            return;\n        }\n        DruidAbstractDataSource dataSource = holder.getDataSource();\n        boolean isSameThread = this.getOwnerThread() == Thread.currentThread();\n        if (!isSameThread) {\n            dataSource.setAsyncCloseConnectionEnable(true);\n        }\n        if (dataSource.isAsyncCloseConnectionEnable()) {\n            syncClose();\n            return;\n        }\n        for (ConnectionEventListener listener : holder.getConnectionEventListeners()) {\n            listener.connectionClosed(new ConnectionEvent(this));\n        }\n        List<Filter> filters = dataSource.getProxyFilters();\n        if (filters.size() > 0) {\n            FilterChainImpl filterChain = new FilterChainImpl(dataSource);\n            filterChain.dataSource_recycle(this);\n        } else {\n            recycle();\n        }\n        this.disable = true;\n    }\n    public void syncClose() throws SQLException {\n        lock.lock();\n        try {\n            if (this.disable) {\n                return;\n            }\n            DruidConnectionHolder holder = this.holder;\n            if (holder == null) {\n                if (dupCloseLogEnable) {\n                    LOG.error(\"dup close\");\n                }\n                return;\n            }\n            for (ConnectionEventListener listener : holder.getConnectionEventListeners()) {\n                listener.connectionClosed(new ConnectionEvent(this));\n            }\n            DruidAbstractDataSource dataSource = holder.getDataSource();\n            List<Filter> filters = dataSource.getProxyFilters();\n            if (filters.size() > 0) {\n                FilterChainImpl filterChain = new FilterChainImpl(dataSource);\n                filterChain.dataSource_recycle(this);\n            } else {\n                recycle();\n            }\n            this.disable = true;\n        } finally {\n            lock.unlock();\n        }\n    }\n    public void recycle() throws SQLException {\n        if (this.disable) {\n            return;\n        }\n        DruidConnectionHolder holder = this.holder;\n        if (holder == null) {\n            if (dupCloseLogEnable) {\n                LOG.error(\"dup close\");\n            }\n            return;\n        }\n        if (!this.abandoned) {\n            DruidAbstractDataSource dataSource = holder.getDataSource();\n            dataSource.recycle(this);\n        }\n        this.holder = null;\n        conn = null;\n        transactionInfo = null;\n        closed = true;\n    }\n    // ////////////////////\n    @Override\n    public PreparedStatement prepareStatement(String sql) throws SQLException {\n        checkState();\n        PreparedStatementHolder stmtHolder = null;\n        PreparedStatementKey key = new PreparedStatementKey(sql, getCatalog(), MethodType.M1);\n        boolean poolPreparedStatements = holder.isPoolPreparedStatements();\n        if (poolPreparedStatements) {\n            stmtHolder = holder.getStatementPool().get(key);\n        }\n        if (stmtHolder == null) {\n            try {\n                stmtHolder = new PreparedStatementHolder(key, conn.prepareStatement(sql));\n                holder.getDataSource().incrementPreparedStatementCount();\n            } catch (SQLException ex) {\n                handleException(ex, sql);\n            }\n        }\n        initStatement(stmtHolder);\n        DruidPooledPreparedStatement rtnVal = new DruidPooledPreparedStatement(this, stmtHolder);\n        holder.addTrace(rtnVal);\n        return rtnVal;\n    }\n    private void initStatement(PreparedStatementHolder stmtHolder) throws SQLException {\n        stmtHolder.incrementInUseCount();\n        holder.getDataSource().initStatement(this, stmtHolder.statement);\n    }\n    @Override\n    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)\n                                                                                                      throws SQLException {\n        checkState();\n        PreparedStatementHolder stmtHolder = null;\n        PreparedStatementKey key = new PreparedStatementKey(sql, getCatalog(), MethodType.M2, resultSetType,\n                                                            resultSetConcurrency);\n        boolean poolPreparedStatements = holder.isPoolPreparedStatements();\n        if (poolPreparedStatements) {\n            stmtHolder = holder.getStatementPool().get(key);\n        }\n        if (stmtHolder == null) {\n            try {\n                stmtHolder = new PreparedStatementHolder(key, conn.prepareStatement(sql, resultSetType,\n                                                                                    resultSetConcurrency));\n                holder.getDataSource().incrementPreparedStatementCount();\n            } catch (SQLException ex) {\n                handleException(ex, sql);\n            }\n        }\n        initStatement(stmtHolder);\n        DruidPooledPreparedStatement rtnVal = new DruidPooledPreparedStatement(this, stmtHolder);\n        holder.addTrace(rtnVal);\n        return rtnVal;\n    }\n    @Override\n    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,\n                                              int resultSetHoldability) throws SQLException {\n        checkState();\n        PreparedStatementHolder stmtHolder = null;\n        PreparedStatementKey key = new PreparedStatementKey(sql, getCatalog(), MethodType.M3, resultSetType,\n                                                            resultSetConcurrency, resultSetHoldability);\n        boolean poolPreparedStatements = holder.isPoolPreparedStatements();\n        if (poolPreparedStatements) {\n            stmtHolder = holder.getStatementPool().get(key);\n        }\n        if (stmtHolder == null) {\n            try {\n                stmtHolder = new PreparedStatementHolder(key, conn.prepareStatement(sql, resultSetType,\n                                                                                    resultSetConcurrency,\n                                                                                    resultSetHoldability));\n                holder.getDataSource().incrementPreparedStatementCount();\n            } catch (SQLException ex) {\n                handleException(ex, sql);\n            }\n        }\n        initStatement(stmtHolder);\n        DruidPooledPreparedStatement rtnVal = new DruidPooledPreparedStatement(this, stmtHolder);\n        holder.addTrace(rtnVal);\n        return rtnVal;\n    }\n    @Override\n    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {\n        checkState();\n        PreparedStatementKey key = new PreparedStatementKey(sql, getCatalog(), MethodType.M4, columnIndexes);\n        PreparedStatementHolder stmtHolder = null;\n        boolean poolPreparedStatements = holder.isPoolPreparedStatements();\n        if (poolPreparedStatements) {\n            stmtHolder = holder.getStatementPool().get(key);\n        }\n        if (stmtHolder == null) {\n            try {\n                stmtHolder = new PreparedStatementHolder(key, conn.prepareStatement(sql, columnIndexes));\n                holder.getDataSource().incrementPreparedStatementCount();\n            } catch (SQLException ex) {\n                handleException(ex, sql);\n            }\n        }\n        initStatement(stmtHolder);\n        DruidPooledPreparedStatement rtnVal = new DruidPooledPreparedStatement(this, stmtHolder);\n        holder.addTrace(rtnVal);\n        return rtnVal;\n    }\n    @Override\n    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {\n        checkState();\n        PreparedStatementKey key = new PreparedStatementKey(sql, getCatalog(), MethodType.M5, columnNames);\n        PreparedStatementHolder stmtHolder = null;\n        boolean poolPreparedStatements = holder.isPoolPreparedStatements();\n        if (poolPreparedStatements) {\n            stmtHolder = holder.getStatementPool().get(key);\n        }\n        if (stmtHolder == null) {\n            try {\n                stmtHolder = new PreparedStatementHolder(key, conn.prepareStatement(sql, columnNames));\n                holder.getDataSource().incrementPreparedStatementCount();\n            } catch (SQLException ex) {\n                handleException(ex, sql);\n            }\n        }\n        initStatement(stmtHolder);\n        DruidPooledPreparedStatement rtnVal = new DruidPooledPreparedStatement(this, stmtHolder);\n        holder.addTrace(rtnVal);\n        return rtnVal;\n    }\n    @Override\n    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {\n        checkState();\n        PreparedStatementKey key = new PreparedStatementKey(sql, getCatalog(), MethodType.M6, autoGeneratedKeys);\n        PreparedStatementHolder stmtHolder = null;\n        boolean poolPreparedStatements = holder.isPoolPreparedStatements();\n        if (poolPreparedStatements) {\n            stmtHolder = holder.getStatementPool().get(key);\n        }\n        if (stmtHolder == null) {\n            try {\n                stmtHolder = new PreparedStatementHolder(key, conn.prepareStatement(sql, autoGeneratedKeys));\n                holder.getDataSource().incrementPreparedStatementCount();\n            } catch (SQLException ex) {\n                handleException(ex, sql);\n            }\n        }\n        initStatement(stmtHolder);\n        DruidPooledPreparedStatement rtnVal = new DruidPooledPreparedStatement(this, stmtHolder);\n        holder.addTrace(rtnVal);\n        return rtnVal;\n    }\n    // ////////////////////\n<fim_suffix>    @Override\n    public CallableStatement prepareCall(String sql) throws SQLException {\n        checkState();\n        PreparedStatementHolder stmtHolder = null;\n        PreparedStatementKey key = new PreparedStatementKey(sql, getCatalog(), MethodType.Precall_1);\n        boolean poolPreparedStatements = holder.isPoolPreparedStatements();\n        if (poolPreparedStatements) {\n            stmtHolder = holder.getStatementPool().get(key);\n        }\n        if (stmtHolder == null) {\n            try {\n                stmtHolder = new PreparedStatementHolder(key, conn.prepareCall(sql));\n                holder.getDataSource().incrementPreparedStatementCount();\n            } catch (SQLException ex) {\n                handleException(ex, sql);\n            }\n        }\n        initStatement(stmtHolder);\n        DruidPooledCallableStatement rtnVal = new DruidPooledCallableStatement(this, stmtHolder);\n        holder.addTrace(rtnVal);\n        return rtnVal;\n    }<fim_middle>// function below is long method\n"}