{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.plan.mapper;\n\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Optional;\n\nimport org.apache.hadoop.hive.ql.exec.Operator;\nimport org.apache.hadoop.hive.ql.optimizer.signature.OpTreeSignature;\nimport org.apache.hadoop.hive.ql.stats.OperatorStats;\n\nimport com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\n\n<fim_suffix>public class CachingStatsSource implements StatsSource {\n\n\n  private final Cache<OpTreeSignature, OperatorStats> cache;\n\n  public CachingStatsSource(int cacheSize) {\n    cache = CacheBuilder.newBuilder().maximumSize(cacheSize).build();\n  }\n\n  public void put(OpTreeSignature sig, OperatorStats opStat) {\n    cache.put(sig, opStat);\n  }\n\n  @Override\n  public Optional<OperatorStats> lookup(OpTreeSignature treeSig) {\n    return Optional.ofNullable(cache.getIfPresent(treeSig));\n  }\n\n  @Override\n  public boolean canProvideStatsFor(Class<?> clazz) {\n    if (cache.size() > 0 && Operator.class.isAssignableFrom(clazz)) {\n      return true;\n    }\n    return false;\n  }\n\n  @Override\n  public void putAll(Map<OpTreeSignature, OperatorStats> map) {\n    for (Entry<OpTreeSignature, OperatorStats> entry : map.entrySet()) {\n      put(entry.getKey(), entry.getValue());\n    }\n  }\n\n}<fim_middle>// class below has no smell\n"}