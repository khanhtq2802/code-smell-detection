{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2012 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *  Actuate Corporation  - initial API and implementation\n *******************************************************************************/\n\npackage org.eclipse.birt.chart.reportitem.api;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.eclipse.birt.chart.model.Chart;\nimport org.eclipse.birt.chart.model.impl.ChartModelHelper;\nimport org.eclipse.birt.chart.util.ChartExpressionUtil;\nimport org.eclipse.birt.chart.util.ChartExpressionUtil.ExpressionCodec;\nimport org.eclipse.birt.core.data.ExpressionUtil;\nimport org.eclipse.birt.report.item.crosstab.core.de.CrosstabViewHandle;\nimport org.eclipse.birt.report.item.crosstab.core.de.DimensionViewHandle;\nimport org.eclipse.birt.report.model.api.ComputedColumnHandle;\nimport org.eclipse.birt.report.model.api.DataSetHandle;\nimport org.eclipse.birt.report.model.api.ExtendedItemHandle;\nimport org.eclipse.birt.report.model.api.ReportItemHandle;\nimport org.eclipse.birt.report.model.api.olap.CubeHandle;\n\n/**\n * ChartReportItemHelper\n */\n\n<fim_suffix>public class ChartReportItemHelper\n{\n\tprivate static ChartReportItemHelper instance = new ChartReportItemHelper( );\n\n\tprotected ChartReportItemHelper( )\n\t{\n\n\t}\n\n\tpublic static void initInstance( ChartReportItemHelper newInstance )\n\t{\n\t\tinstance = newInstance;\n\t}\n\n\tpublic static ChartReportItemHelper instance( )\n\t{\n\t\treturn instance;\n\t}\n\t\n\tpublic CubeHandle getBindingCubeHandle( ReportItemHandle itemHandle )\n\t{\n\t\treturn ChartCubeUtil.getBindingCube( itemHandle );\n\t}\n\t\n\tpublic DataSetHandle getBindingDataSetHandle(ReportItemHandle itemHandle )\n\t{\n\t\treturn ChartCubeUtil.getBindingDataSet( itemHandle );\n\t}\n\t\n\tpublic boolean checkCubeBindings( ExtendedItemHandle handle, Iterator<ComputedColumnHandle> columnBindings )\n\t{\n\t\treturn ChartCubeUtil.checkColumnbindingForCube( columnBindings );\n\t}\n\t\n\tpublic ChartExpressionUtil.ExpressionCodec createExpressionCodec(\n\t\t\tExtendedItemHandle handle )\n\t{\n\t\treturn ChartModelHelper.instance( ).createExpressionCodec( );\n\t}\n\t\n\tpublic boolean loadExpression( ExpressionCodec exprCodec,\n\t\t\tComputedColumnHandle cch )\n\t{\n\t\treturn ChartItemUtil.loadExpression( exprCodec, cch );\n\t}\n\t\n\tpublic ComputedColumnHandle findDimensionBinding(\n\t\t\tExpressionCodec exprCodec, String dimName, String levelName,\n\t\t\tCollection<ComputedColumnHandle> bindings, ReportItemHandle itemHandle )\n\t{\n\t\tfor ( ComputedColumnHandle cch : bindings )\n\t\t{\n\t\t\tChartReportItemHelper.instance( ).loadExpression( exprCodec, cch );\n\t\t\tString[] levelNames = exprCodec.getLevelNames( );\n\t\t\tif ( levelNames != null\n\t\t\t\t\t&& levelNames[0].equals( dimName )\n\t\t\t\t\t&& levelNames[1].equals( levelName ) )\n\t\t\t{\n\t\t\t\treturn cch;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Returns all bindings used by chart.\n\t * \n\t * @param cm\n\t * @param handle\n\t * @param validExtensionNames\n\t * @return all bindings used by chart.\n\t */\n\tpublic Iterator<?> getAllUsedBindings( Chart cm, ReportItemHandle handle, List<String> validExtensionNames )\n\t{\n\t\treturn handle.columnBindingsIterator( );\n\t}\n\t\n\t/**\n\t * Returns all bindings used by chart.\n\t * \n\t * @param cm\n\t * @param handle\n\t * @return all bindings used by chart.\n\t */\n\tpublic Iterator<?> getAllUsedBindings( Chart cm, ReportItemHandle handle )\n\t{\n\t\treturn handle.columnBindingsIterator( );\n\t}\n\n\tpublic String getMeasureExprIndicator( CubeHandle cubeHandle )\n\t{\n\t\treturn ExpressionUtil.MEASURE_INDICATOR;\n\t}\n\t\n\tpublic List<String> getLevelBindingNamesOfCrosstab(\n\t\t\tCrosstabViewHandle viewHandle, ReportItemHandle chartHandle )\n\t{\n\t\tArrayList<String> names = new ArrayList<String>( );\n\t\tfor ( int i = 0; i < viewHandle.getDimensionCount( ); i++ )\n\t\t{\n\t\t\tDimensionViewHandle dimensionHandle = viewHandle.getDimension( i );\n\t\t\tdimensionHandle.availableBindings( );\n\t\t\tfor ( int k = 0; k < dimensionHandle.getLevelCount( ); k++ )\n\t\t\t{\n\t\t\t\tnames.add( dimensionHandle.getLevel( k )\n\t\t\t\t\t\t.getCubeLevel( )\n\t\t\t\t\t\t.getName( ) );\n\t\t\t}\n\t\t}\n\n\t\treturn names;\n\t}\n}<fim_middle>// class below has no smell\n"}