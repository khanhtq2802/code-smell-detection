{"text": "<fim_prefix>        }\n    }\n    static final String dfa_7s = \"\\12\\uffff\";\n    static final String dfa_8s = \"\\4\\uffff\\5\\3\\1\\uffff\";\n    static final String dfa_9s = \"\\1\\53\\2\\4\\1\\uffff\\5\\4\\1\\uffff\";\n    static final String dfa_10s = \"\\1\\126\\2\\61\\1\\uffff\\5\\131\\1\\uffff\";\n    static final String dfa_11s = \"\\3\\uffff\\1\\2\\5\\uffff\\1\\1\";\n    static final String dfa_12s = \"\\12\\uffff}>\";\n    static final String[] dfa_13s = {\n            \"\\1\\1\\51\\uffff\\1\\2\\1\\3\",\n            \"\\1\\4\\26\\uffff\\1\\3\\21\\uffff\\1\\5\\1\\6\\1\\7\\1\\10\\1\\3\",\n            \"\\1\\4\\26\\uffff\\1\\3\\21\\uffff\\1\\5\\1\\6\\1\\7\\1\\10\\1\\3\",\n            \"\",\n            \"\\5\\3\\4\\uffff\\1\\11\\45\\3\\1\\uffff\\2\\3\\1\\uffff\\1\\3\\1\\uffff\\32\\3\\2\\uffff\\2\\3\\1\\uffff\\2\\3\",\n            \"\\5\\3\\4\\uffff\\1\\11\\45\\3\\1\\uffff\\2\\3\\1\\uffff\\1\\3\\1\\uffff\\32\\3\\2\\uffff\\2\\3\\1\\uffff\\2\\3\",\n            \"\\5\\3\\4\\uffff\\1\\11\\45\\3\\1\\uffff\\2\\3\\1\\uffff\\1\\3\\1\\uffff\\32\\3\\2\\uffff\\2\\3\\1\\uffff\\2\\3\",\n            \"\\5\\3\\4\\uffff\\1\\11\\45\\3\\1\\uffff\\2\\3\\1\\uffff\\1\\3\\1\\uffff\\32\\3\\2\\uffff\\2\\3\\1\\uffff\\2\\3\",\n            \"\\5\\3\\4\\uffff\\1\\11\\45\\3\\1\\uffff\\2\\3\\1\\uffff\\1\\3\\1\\uffff\\32\\3\\2\\uffff\\2\\3\\1\\uffff\\2\\3\",\n            \"\"\n    };\n    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);\n    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);\n    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);\n    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);\n    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);\n    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);\n    static final short[][] dfa_13 = unpackEncodedStringArray(dfa_13s);\n    class DFA18 extends DFA {\n        public DFA18(BaseRecognizer recognizer) {\n            this.recognizer = recognizer;\n            this.decisionNumber = 18;\n            this.eot = dfa_7;\n            this.eof = dfa_8;\n            this.min = dfa_9;\n            this.max = dfa_10;\n            this.accept = dfa_11;\n            this.special = dfa_12;\n            this.transition = dfa_13;\n        }\n        public String getDescription() {\n            return \"2589:1: rule__XMemberFeatureCall__Alternatives_1 : ( ( ( rule__XMemberFeatureCall__Group_1_0__0 ) ) | ( ( rule__XMemberFeatureCall__Group_1_1__0 ) ) );\";\n        }\n    }\n    static final String dfa_14s = \"\\43\\uffff\";\n    static final String dfa_15s = \"\\1\\4\\2\\0\\40\\uffff\";\n    static final String dfa_16s = \"\\1\\131\\2\\0\\40\\uffff\";\n    static final String dfa_17s = \"\\3\\uffff\\1\\1\\1\\uffff\\1\\2\\35\\uffff\";\n    static final String dfa_18s = \"\\1\\uffff\\1\\0\\1\\1\\40\\uffff}>\";\n    static final String[] dfa_19s = {\n            \"\\1\\1\\4\\5\\22\\uffff\\1\\5\\3\\uffff\\1\\3\\2\\uffff\\2\\5\\4\\uffff\\1\\5\\4\\uffff\\6\\5\\1\\uffff\\1\\5\\4\\uffff\\1\\2\\4\\uffff\\2\\5\\2\\uffff\\1\\5\\1\\uffff\\1\\5\\2\\uffff\\11\\5\\1\\uffff\\1\\5\\5\\uffff\\1\\3\\1\\uffff\\1\\5\",\n            \"\\1\\uffff\",\n            \"\\1\\uffff\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\",\n            \"\"\n    };\n    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);\n    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);\n    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);\n    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);\n    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);\n    static final short[][] dfa_19 = unpackEncodedStringArray(dfa_19s);\n    class DFA21 extends DFA {\n        public DFA21(BaseRecognizer recognizer) {\n            this.recognizer = recognizer;\n            this.decisionNumber = 21;\n            this.eot = dfa_14;\n            this.eof = dfa_14;\n            this.min = dfa_15;\n            this.max = dfa_16;\n            this.accept = dfa_17;\n            this.special = dfa_18;\n            this.transition = dfa_19;\n        }\n        public String getDescription() {\n            return \"2658:1: rule__XMemberFeatureCall__Alternatives_1_1_3_1 : ( ( ( rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_3_1_0 ) ) | ( ( rule__XMemberFeatureCall__Group_1_1_3_1_1__0 ) ) );\";\n        }\n<fim_suffix>        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {\n            TokenStream input = (TokenStream)_input;\n        \tint _s = s;\n            switch ( s ) {\n                    case 0 : \n                        int LA21_1 = input.LA(1);\n                        int index21_1 = input.index();\n                        input.rewind();\n                        s = -1;\n                        if ( (synpred42_InternalEntities()) ) {s = 3;}\n                        else if ( (true) ) {s = 5;}\n                        input.seek(index21_1);\n                        if ( s>=0 ) return s;\n                        break;\n                    case 1 : \n                        int LA21_2 = input.LA(1);\n                        int index21_2 = input.index();\n                        input.rewind();\n                        s = -1;\n                        if ( (synpred42_InternalEntities()) ) {s = 3;}\n                        else if ( (true) ) {s = 5;}\n                        input.seek(index21_2);\n                        if ( s>=0 ) return s;\n                        break;\n            }\n            if (state.backtracking>0) {state.failed=true; return -1;}\n            NoViableAltException nvae =\n                new NoViableAltException(getDescription(), 21, _s, input);\n            error(nvae);\n            throw nvae;\n        }<fim_middle>// function below has no smell\n"}