{"text": "<fim_prefix>/*\n * Copyright 2014 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.physical_web.physicalweb;\n\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.app.Fragment;\nimport android.app.FragmentTransaction;\nimport android.bluetooth.BluetoothAdapter;\nimport android.bluetooth.BluetoothManager;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.support.v4.app.ActivityCompat;\nimport android.support.v4.content.ContextCompat;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.widget.Toast;\n\n/**\n * The main entry point for the app.\n */\n\n<fim_suffix>public class MainActivity extends Activity {\n  private static final String TAG  = MainActivity.class.getSimpleName();\n  private static final int REQUEST_ENABLE_BT = 0;\n  private static final int REQUEST_LOCATION = 1;\n  private static final String NEARBY_BEACONS_FRAGMENT_TAG = \"NearbyBeaconsFragmentTag\";\n  private static final String SETTINGS_FRAGMENT_TAG = \"SettingsFragmentTag\";\n  private static final String BLOCKED_URLS_FRAGMENT_TAG = \"BlockedUrlsFragmentTag\";\n  private static final String ABOUT_FRAGMENT_TAG = \"AboutFragmentTag\";\n  private static final String DEMOS_FRAGMENT_TAG = \"DemosFragmentTag\";\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    Utils.setSharedPreferencesDefaultValues(this);\n    PermissionCheck.getInstance().setCheckingPermissions(false);\n  }\n\n  @Override\n  public boolean onCreateOptionsMenu(Menu menu) {\n    // Inflate the menu; this adds items to the action bar if it is present.\n    getMenuInflater().inflate(R.menu.main, menu);\n    return true;\n  }\n\n  /**\n   * Called when a menu item is tapped.\n   */\n  @Override\n  public boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()) {\n      // If the about menu item was selected\n      case R.id.action_about:\n        showAboutFragment();\n        return true;\n      // If the settings menu item was selected\n      case R.id.action_settings:\n        showSettingsFragment();\n        return true;\n      case R.id.block_settings:\n        showBlockedFragment();\n        return true;\n      case R.id.action_demos:\n        showDemosFragment();\n        return true;\n      // If the action bar up button was pressed\n      case android.R.id.home:\n        getFragmentManager().popBackStack();\n        getActionBar().setDisplayHomeAsUpEnabled(false);\n    }\n    return super.onOptionsItemSelected(item);\n  }\n\n  /**\n   * Ensures Bluetooth is available on the beacon and it is enabled. If not,\n   * displays a dialog requesting user permission to enable Bluetooth.\n   */\n  private void checkPermissions(BluetoothAdapter bluetoothAdapter) {\n    // Acquire lock\n    PermissionCheck.getInstance().setCheckingPermissions(true);\n    if (!bluetoothAdapter.isEnabled()) {\n      Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);\n      startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);\n      return;\n    }\n    ensureLocationPermissionIsEnabled();\n  }\n\n  @Override\n  protected void onActivityResult (int requestCode, int resultCode, Intent data) {\n    Log.d(TAG, \"onActivityResult\");\n    if (requestCode == REQUEST_ENABLE_BT && resultCode == -1) {\n      ensureLocationPermissionIsEnabled();\n      return;\n    }\n    Toast.makeText(this, getString(R.string.bt_on), Toast.LENGTH_LONG).show();\n    finish();\n  }\n\n  private void ensureLocationPermissionIsEnabled() {\n    if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(this,\n        android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n      ActivityCompat.requestPermissions(this, new String[]{\n          android.Manifest.permission.ACCESS_COARSE_LOCATION}, REQUEST_LOCATION);\n      return;\n    }\n    PermissionCheck.getInstance().setCheckingPermissions(false);\n    finishLoad();\n  }\n\n  @Override\n  public void onRequestPermissionsResult(int requestCode,\n      String permissions[], int[] grantResults) {\n    switch (requestCode) {\n      case REQUEST_LOCATION: {\n        // If request is cancelled, the result arrays are empty.\n        if (grantResults.length > 0\n            && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n          PermissionCheck.getInstance().setCheckingPermissions(false);\n        } else {\n          Toast.makeText(getApplicationContext(),\n              getString(R.string.loc_permission), Toast.LENGTH_LONG).show();\n          finish();\n        }\n        break;\n      }\n      default:\n    }\n  }\n\n  @Override\n  protected void onResume() {\n    super.onResume();\n    // Lock to prevent onResume from running until all permissions are granted\n    if (!PermissionCheck.getInstance().isCheckingPermissions()) {\n      Log.d(TAG, \"resumed MainActivity\");\n      BluetoothManager btManager = (BluetoothManager) getSystemService(BLUETOOTH_SERVICE);\n      BluetoothAdapter btAdapter = btManager != null ? btManager.getAdapter() : null;\n      if (btAdapter == null) {\n        Toast.makeText(getApplicationContext(),\n            R.string.error_bluetooth_support, Toast.LENGTH_LONG).show();\n        finish();\n        return;\n      }\n      if (Utils.checkIfUserHasOptedIn(this)) {\n        Log.d(TAG, \"checkingPermissions\");\n        checkPermissions(btAdapter);\n      } else {\n        // Show the oob activity\n        Intent intent = new Intent(this, OobActivity.class);\n        startActivity(intent);\n      }\n    }\n  }\n\n  private void finishLoad() {\n    Intent intent = new Intent(this, ScreenListenerService.class);\n    startService(intent);\n    NearbyBeaconsFragment nearbyBeaconsFragment =\n        (NearbyBeaconsFragment) getFragmentManager().findFragmentByTag(NEARBY_BEACONS_FRAGMENT_TAG);\n    if (nearbyBeaconsFragment != null) {\n      nearbyBeaconsFragment.restartScan();\n    } else {\n      showFragment(new NearbyBeaconsFragment(), NEARBY_BEACONS_FRAGMENT_TAG, false);\n    }\n  }\n\n  /**\n   * Show the fragment to configure the app.\n   */\n  private void showSettingsFragment() {\n    showFragment(new SettingsFragment(), SETTINGS_FRAGMENT_TAG, true);\n  }\n\n  /**\n   * Show the fragment displaying information about this application.\n   */\n  private void showAboutFragment() {\n    showFragment(new AboutFragment(), ABOUT_FRAGMENT_TAG, true);\n  }\n\n  /**\n   * Show the fragment displaying the blocked URLs.\n   */\n  private void showBlockedFragment() {\n    showFragment(new BlockedFragment(), BLOCKED_URLS_FRAGMENT_TAG, true);\n  }\n\n  /**\n   * Show the fragment displaying the demos.\n   */\n  private void showDemosFragment() {\n    showFragment(new DemosFragment(), DEMOS_FRAGMENT_TAG, true);\n  }\n\n  @SuppressLint(\"CommitTransaction\")\n  private void showFragment(Fragment newFragment, String fragmentTag, boolean addToBackStack) {\n    FragmentTransaction transaction = getFragmentManager().beginTransaction()\n        .setCustomAnimations(\n            R.animator.fade_in_and_slide_up_fragment,\n            R.animator.fade_out_fragment,\n            R.animator.fade_in_activity,\n            R.animator.fade_out_fragment)\n        .replace(R.id.main_activity_container, newFragment, fragmentTag);\n    if (addToBackStack) {\n      transaction.addToBackStack(null);\n    }\n    transaction.commit();\n  }\n}<fim_middle>// class below is blob\n"}