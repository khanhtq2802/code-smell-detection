{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.druid.segment.loading;\n\nimport org.apache.druid.java.util.common.logger.Logger;\nimport org.apache.druid.timeline.DataSegment;\n\nimport javax.annotation.Nullable;\nimport java.io.File;\nimport java.util.HashSet;\nimport java.util.Set;\n\n/**\n*/\nclass StorageLocation\n{\n  private static final Logger log = new Logger(StorageLocation.class);\n\n  private final File path;\n  private final long maxSize;\n  private final long freeSpaceToKeep;\n  private final Set<DataSegment> segments;\n\n  private volatile long currSize = 0;\n\n  StorageLocation(File path, long maxSize, @Nullable Double freeSpacePercent)\n  {\n    this.path = path;\n    this.maxSize = maxSize;\n\n    if (freeSpacePercent != null) {\n      long totalSpaceInPartition = path.getTotalSpace();\n      this.freeSpaceToKeep = (long) ((freeSpacePercent * totalSpaceInPartition) / 100);\n      log.info(\n          \"SegmentLocation[%s] will try and maintain [%d:%d] free space while loading segments.\",\n          path,\n          freeSpaceToKeep,\n          totalSpaceInPartition\n      );\n    } else {\n      this.freeSpaceToKeep = 0;\n    }\n\n    this.segments = new HashSet<>();\n  }\n\n  File getPath()\n  {\n    return path;\n  }\n\n  long getMaxSize()\n  {\n    return maxSize;\n  }\n\n  synchronized void addSegment(DataSegment segment)\n  {\n    if (segments.add(segment)) {\n      currSize += segment.getSize();\n    }\n  }\n\n<fim_suffix>  synchronized void removeSegment(DataSegment segment)\n  {\n    if (segments.remove(segment)) {\n      currSize -= segment.getSize();\n    }\n  }\n\n  boolean canHandle(DataSegment segment)\n  {\n    if (available() < segment.getSize()) {\n      log.warn(\n          \"Segment[%s:%,d] too large for storage[%s:%,d]. Check your druid.segmentCache.locations maxSize param\",\n          segment.getId(), segment.getSize(), getPath(), available()\n      );\n      return false;\n    }\n\n    if (freeSpaceToKeep > 0) {\n      long currFreeSpace = path.getFreeSpace();\n      if ((freeSpaceToKeep + segment.getSize()) > currFreeSpace) {\n        log.warn(\n            \"Segment[%s:%,d] too large for storage[%s:%,d] to maintain suggested freeSpace[%d], current freeSpace is [%d].\",\n            segment.getId(),\n            segment.getSize(),\n            getPath(),\n            available(),\n            freeSpaceToKeep,\n            currFreeSpace\n        );\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  synchronized long available()\n  {\n    return maxSize - currSize;\n  }\n}<fim_middle>// function below has no smell\n"}