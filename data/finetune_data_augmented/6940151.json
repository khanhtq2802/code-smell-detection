{"text": "<fim_prefix>/* Copyright (c) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.gdata.util;\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.gdata.client.Service;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n/**\n * The VersionRegistry class is used to manage and retrieve version information\n * about executing services. The registry supports the ability to configure\n * versions for a running thread (via the {@link #setThreadVersion(Version)}\n * method) or global defaults that will apply to all threads (using the\n * {@link #addDefaultVersion(Version, boolean)} method. Thread defaults will\n * have precedence over global defaults if present for the same service.\n * \n * The class provides a singleton instance that is being used to manage version\n * information. This instance is initialized by the {@link #ensureRegistry()}\n * method. The active VersionRegistry instance can be retrieved using the\n * {@link #get()} method. This method will throw an\n * {@link IllegalStateException} if the version registry has not been\n * initialized to aid in the detection of when version-conditional code is being\n * executed in an environment where versions have net been configured.\n * \n * The {@link VersionRegistry#getVersion(Class)} method can be used to request\n * the version information for a particular service.\n * \n * A model for writing version conditional code based upon the registry is:\n * <code>\n *    Version myServiceVersion = \n *         VersionRegistry.get().getVersion(MyService.class);\n *    if (myServiceVersion.isCompatible(MyService.VERSIONS.V1) {\n *      ... execute V1-specific handling ...\n *    }\n * </code>\n * \n * VersionRegistry access is thread-safe.\n */\npublic class VersionRegistry {\n  /**\n   * Singleton registry instance.   The singleton is lazily initialized when the\n   * {@link #ensureRegistry()} method is called.  The reason for this design is\n   * to support the detect of version-conditional code running in unit tests.\n   * Such tests need to be run in a version-aware test environment (that will\n   * validate the behavior against all valid versions), so having a model so\n   * that they will fail by default is helpful to guarantee this.\n   */\n  private static VersionRegistry versionRegistry;\n  /**\n   * Maintains the per-thread version information.  The field may be \n   * {@code null} if thread tracking is not enabled and the thread local value\n   * may be {@code null} if no versions have been set for the current thread.\n   */\n  private ThreadLocal<List<Version>> threadVersions = \n      new ThreadLocal<List<Version>>();\n  /**\n   * Maintains the global defaults.\n   */\n  private List<Version> defaultVersions = new ArrayList<Version>();\n  /**\n   * Returns the current VersionRegistry, creating it if necessary. The\n   * {@link #get()} method is preferred for most registry usage, as it enables\n   * the discovery of the execution of version-conditional code in an\n   * environment (such as unit test cases) where versioning has not been\n   * properly configured.\n   */\n  public static synchronized VersionRegistry ensureRegistry() {\n    if (versionRegistry == null) {\n      versionRegistry = new VersionRegistry();\n    }\n    return versionRegistry;\n  }\n  /**\n   * Resets the VersionRegistry instance to {@code null}.   This means that any\n   * subsequent attempts to run version-specific code without version \n   * configuration will result in an {@link IllegalStateException} in\n   * {@link #get()}.\n   */\n  @VisibleForTesting\n  static void reset() {\n    versionRegistry = null;\n  }\n  /**\n   * Returns the version registry being used to manage version information.\n   * @return the active version registry instance.\n   * @throws IllegalStateException if the registry has not been initialized.\n   */\n  public static final VersionRegistry get() {\n    if (versionRegistry == null) {\n      // This should never happen for client, server, or code running in a\n      // unit test context.   Missing version information indicates that the\n      // version registry has not been properly initialized to meet the\n      // expectations of version-dependent code.   In the case of test\n      // execution, this generally means the test should be annotated to\n      // indicate a version dependency (see the TestVersion annotation) and\n      // also should be run in the context of a VersionedTestSuite that\n      // ensures all supported versions are tested.\n      throw new IllegalStateException(\"Uninitialized version registry\");\n    }\n    return versionRegistry;\n  }\n  /**\n   * Constructs a new Version instance based upon the value of a Java system\n   * property associated with a {@link Service} class. The system property name\n   * is computed from the service class name with \".version\" appended. The\n   * syntax of the property value is {@code \"[service]<major>[.<minor>]\"}. The\n   * default value of the service is assumed to be the initiating or target\n   * service and the minor revision will be assumed to be zero if not present.\n   * If the associated system property is not set, the method will return\n   * {@code null}.\n   * \n   * @param serviceClass service class to use in computing the version property\n   *        name.\n   * @return the {@link Version} computed from the property of {@code null} if\n   *         the property is not set.\n   * @throws IllegalStateException if the property value does not contain valid\n   *         revision information.\n   */\n  public static Version getVersionFromProperty(\n      Class<? extends Service> serviceClass) {\n    String propertyName = serviceClass.getName() + \".version\";\n    String versionProperty = System.getProperty(propertyName);\n    if (versionProperty == null) {\n      return null;\n    }\n    try {\n      return new Version(serviceClass, versionProperty);\n    } catch (IllegalArgumentException iae) {\n      throw new IllegalStateException(\n          \"Invalid version property value: \" + propertyName, iae);\n    }\n  }\n  /**\n   * Takes a list of {@link Version} instances and merges it into another\n   * list.   A version in the source list will overwrite any value for the\n   * same service (if any) in the target list.\n   * @param target the target list of versions to merge into.\n   * @param source the source list of versions that will be merged.\n   */\n  @VisibleForTesting\n  static void mergeVersions(List<Version> target, List<Version> source) {\n    // Check for conflicts with target list before making any changes,\n    // accumulating the list of changed versions.\n    for (Version checkVersion : source) {\n      Version currentVersion = \n          Version.findServiceVersion(target, checkVersion.getServiceClass());\n      if (currentVersion != null) {\n        target.remove(currentVersion);\n      }\n    }\n    // Add all of the new versions.\n    target.addAll(source);\n  }\n  /**\n   * Takes a {@link Version} instance and merges it into another\n   * list, validating that any duplicate information for a given service\n   * is a compatible version.\n   * @param target the target list of versions to merge into.\n   * @param source the source version that will be merged.\n   */\n  @VisibleForTesting\n  static void mergeVersions(List<Version> target, Version source) {   \n    mergeVersions(target, Arrays.asList(new Version [] { source }));\n  }\n  /**\n   * Returns the list of default versions for the registry.  The default version\n   * is the version that will be used if no version is explicitly selected.\n   * \n   * @return list of default versions.\n   */\n<fim_suffix>  public List<Version> getDefaultVersions() {\n    return defaultVersions;\n  }\n  /**\n   * Adds a default version to the version registry. This will overwrite any\n   * existing default version for the same service.\n   * \n   * @param newDefault default version to add to the registry\n   *                   (not <code>null</code>)\n   * @param includeImplied if {@code true}, indicates that all implied versions\n   *        associated with the new default should be set as defaults too.\n   */\n  public void addDefaultVersion(Version newDefault, \n      boolean includeImplied) {\n    // Implement the addition using a copy into a new array.  This is done to\n    // avoid requiring full synchronization of access to defaultVersions, where\n    // additions will be infrequent and often happen at initialization time.\n    ArrayList<Version> newDefaults = new ArrayList<Version>(defaultVersions);\n    if (includeImplied) {\n      mergeVersions(newDefaults, newDefault.getImpliedVersions());\n    } else {\n      mergeVersions(newDefaults, newDefault);\n    }\n    // Replace the current defaults with the updated list.\n    defaultVersions = Collections.unmodifiableList(newDefaults);\n  }\n  /**<fim_middle>// function below has no smell\n"}