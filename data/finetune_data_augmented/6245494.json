{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2016, 2017 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n *******************************************************************************/\npackage org.eclipse.hono.config;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.Objects;\n\n/**\n * Common properties required for creating/validating cryptographic signatures.\n *\n */\n<fim_suffix>public class SignatureSupportingConfigProperties {\n\n    private String sharedSecret;\n    private String keyPath;\n    private long tokenExpirationSeconds = 600L;\n    private String certificatePath;\n\n    /**\n     * Gets the secret used for creating and validating HmacSHA256 based signatures.\n     * \n     * @return The secret or {@code null} if not set.\n     */\n    public final String getSharedSecret() {\n        return sharedSecret;\n    }\n\n    /**\n     * Sets the secret to use for creating and validating HmacSHA256 based signatures.\n     * \n     * @param secret The shared secret.\n     * @throws NullPointerException if secret is {@code null}.\n     * @throws IllegalArgumentException if the secret is &lt; 32 bytes.\n     */\n    public final void setSharedSecret(final String secret) {\n        if (Objects.requireNonNull(secret).getBytes(StandardCharsets.UTF_8).length < 32) {\n            throw new IllegalArgumentException(\"shared secret must be at least 32 bytes\");\n        }\n        this.sharedSecret = secret;\n    }\n\n    /**\n     * Sets the path to the file containing the private key to be used\n     * for creating SHA256withRSA based signatures.\n     * <p>\n     * The file must be in PKCS8 PEM format.\n     * \n     * @param keyPath The path to the PEM file.\n     * @throws NullPointerException if the path is {@code null}.\n     */\n    public final void setKeyPath(final String keyPath) {\n        this.keyPath = Objects.requireNonNull(keyPath);\n    }\n\n    /**\n     * Gets the path to the file containing the private key to be used\n     * for validating RSA based signatures.\n     * \n     * @return The path to the file or {@code null} if not set.\n     */\n    public final String getKeyPath() {\n        return keyPath;\n    }\n\n    /**\n     * Gets the period of time after which tokens created using this configuration should expire.\n     * \n     * @return The number of seconds after which tokens expire.\n     */\n    public final long getTokenExpiration() {\n        return tokenExpirationSeconds;\n    }\n\n    /**\n     * Sets the period of time after which tokens created using this configuration should expire.\n     * <p>\n     * The default value is 600 seconds (10 minutes).\n     * \n     * @param seconds The number of seconds after which tokens expire.\n     * @throws IllegalArgumentException if seconds is &lt;= 0.\n     */\n    public final void setTokenExpiration(final long seconds) {\n        if (seconds <= 0) {\n            throw new IllegalArgumentException(\"token expiration must be > 0\");\n        }\n        this.tokenExpirationSeconds = seconds;\n    }\n\n    /**\n     * Sets the path to the X.509 certificate containing the public key to be used\n     * for validating SHA256withRSA based signatures.\n     * <p>\n     * The file must be in PKCS8 PEM format.\n     * \n     * @param certPath The path to the PEM file.\n     * @throws NullPointerException if the path is {@code null}.\n     */\n    public final void setCertPath(final String certPath) {\n        this.certificatePath = Objects.requireNonNull(certPath);\n    }\n\n    /**\n     * Gets the path to the X.509 certificate containing the public key to be used\n     * for validating RSA based signatures.\n     * \n     * @return The path to the file or {@code null} if not set.\n     */\n    public final String getCertPath() {\n        return certificatePath;\n    }\n\n    /**\n     * Checks if this configuration contains enough information for creating assertions.\n     * \n     * @return {@code true} if any of sharedSecret or keyPath is not {@code null}.\n     */\n    public final boolean isAppropriateForCreating() {\n        return sharedSecret != null || keyPath != null;\n    }\n\n    /**\n     * Checks if this configuration contains enough information for validating assertions.\n     * \n     * @return {@code true} if any of sharedSecret or certificatePath is not {@code null}.\n     */\n    public final boolean isAppropriateForValidating() {\n        return sharedSecret != null || certificatePath != null;\n    }\n}<fim_middle>// class below is data class\n"}