{"text": "<fim_prefix>\n<fim_suffix>public class DimsDataList implements Serializable {\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = -5902704017223885965L;\n\tprivate List<DimsData> dimsData;\n\tprivate boolean        expression;\n\tpublic DimsDataList() {\n\t}\n\tpublic DimsDataList(List<DimsData> chunk) {\n\t\tdimsData = chunk;\n\t}\n\tpublic DimsDataList(int[] dataShape) throws Exception {\n\t\ttry {\n\t\t\t// For now we just assume the first dimensions are the slow ones to make an axis out\n\t\t\t// of. Later read the axis from the meta list but we do not have examples of this so\n\t\t\t// far.\n\t\t\tint xaxis=-1,yaxis=-1;\n\t\t\tfor (int i = 0; i<dataShape.length; ++i) {\n\t\t\t\tadd(new DimsData(i));\n\t\t\t}\n\t\t\tfor (int i = dataShape.length-1; i>=0; i--) {\n\t\t\t\tif (dataShape[i]>1) {\n\t\t\t\t\tif (yaxis<0) {\n\t\t\t\t\t\tgetDimsData(i).setPlotAxis(AxisType.Y);\n\t\t\t\t\t\tyaxis = i;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else  if (xaxis<0) {\n\t\t\t\t\t\tgetDimsData(i).setPlotAxis(AxisType.X);\n\t\t\t\t\t\txaxis = i;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If we only found a y it may be a multiple-dimension set with only 1D possible.\n\t\t\t// In that case change y to x.\n\t\t\tif (yaxis>-1 && xaxis<0) {\n\t\t\t\tgetDimsData(yaxis).setPlotAxis(AxisType.X);\n\t\t\t}\n\t\t} finally {\n\t\t\t//file.close();\n\t\t}\n\t}\n\tpublic Iterable<DimsData> iterable() {\n\t\treturn dimsData;\n\t}\n\tpublic void add(DimsData dimension) {\n\t\tif (dimsData==null) dimsData = new ArrayList<DimsData>(3);\n\t\tif (dimsData.size()>dimension.getDimension() && dimension.getDimension()>-1) {\n\t\t\tdimsData.set(dimension.getDimension(), dimension);\n\t\t} else {\n\t\t\tdimsData.add(dimension);\n\t\t}\n\t}\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((dimsData == null) ? 0 : dimsData.hashCode());\n\t\treturn result;\n\t}\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tDimsDataList other = (DimsDataList) obj;\n\t\tif (dimsData == null) {\n\t\t\tif (other.dimsData != null)\n\t\t\t\treturn false;\n\t\t} else if (!dimsData.equals(other.dimsData))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\tpublic static Object[] getDefault() {\n\t\treturn new DimsData[]{new DimsData(0)};\n\t}\n\tpublic Object[] getElements() {\n\t\tif (dimsData==null) return null;\n\t\treturn dimsData.toArray(new DimsData[dimsData.size()]);\n\t}\n\tpublic int size() {\n\t\tif (dimsData==null) return 0;\n\t\treturn dimsData.size();\n\t}\n\tpublic DimsData getDimsData(int i) {\n\t\tif (dimsData==null) return null;\n\t\treturn dimsData.get(i);\n\t}\n\tpublic Iterator<DimsData> iterator() {\n\t\tif (dimsData==null) return null;\n\t\treturn dimsData.iterator();\n\t}\n\tpublic void clear() {\n\t\tif (dimsData!=null) dimsData.clear();\n\t}\n\tpublic String toString() {\n\t\treturn toString(null);\n\t}\n\tpublic String toString(int[] shape) {\n\t\tfinal StringBuilder buf = new StringBuilder();\n\t\tbuf.append(\"[ \");\n\t\tint index = 0;\n\t\tfor (DimsData d : dimsData) {\n\t\t\tfinal int upper = shape!=null ? shape[index] : -1;\n\t\t\tbuf.append(d.getUserString(upper));\n\t\t\tif (d!=dimsData.get(dimsData.size()-1)) buf.append(\",  \");\n\t\t\t++index;\n\t\t}\n\t\tbuf.append(\" ]\");\n\t\treturn buf.toString();\n\t}\n\tpublic boolean isRangeDefined() {\n\t\tfor (DimsData data : iterable()) {\n\t\t\tif (data.getSliceRange()!=null) return true;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic int getAxisCount() {\n\t\tif (dimsData==null) return -1;\n\t\tint count = 0;\n\t\tfor (DimsData dd : dimsData) {\n\t\t\tif (!dd.getPlotAxis().hasValue()) count++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic int getRangeCount() {\n\t\tint count = 0;\n\t\tfor (DimsData dd : dimsData) {\n\t\t\tif (dd.getPlotAxis()==AxisType.RANGE) count++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic boolean is2D() {\n\t\treturn getAxisCount()==2;\n\t}\n\tpublic DimsDataList clone() {\n\t\tfinal DimsDataList clone = new DimsDataList();\n\t\tfor (DimsData dd : iterable()) {\n\t\t\tDimsData dnew = dd.clone();\n\t\t\tclone.add(dnew);\n\t\t}\n\t\tclone.expression = expression;\n\t\treturn clone;\n\t}\n\t/**\n\t * Sets any axes there are to  the axis passed in\n\t */\n\tpublic void normalise(AxisType axis) {\n\t\tfor (DimsData dd : iterable()) {\n\t\t\tif (!dd.getPlotAxis().hasValue()) dd.setPlotAxis(axis);\n\t\t}\n\t}\n\t/**\n\t * Probably not best algorithm but we are dealing with very small arrays here.\n\t * This is simply trying to ensure that only one dimension is selected as an\n\t * axis because the plot has changed.\n\t * \n\t * @param iaxisToFind\n\t */\n\tpublic void setSingleAxisOnly(AxisType iaxisToFind, AxisType iaxisValue) {\n\t\tDimsData found = null;\n\t\tfor (DimsData dd : iterable()) {\n\t\t\tif (dd.getPlotAxis()==iaxisToFind) {\n\t\t\t\tdd.setPlotAxis(iaxisValue);\n\t\t\t\tfound=dd;\n\t\t\t}\n\t\t}\n\t\tif (found!=null) {\n\t\t\tfor (DimsData dd : iterable()) {\n\t\t\t\tif (dd==found) continue;\n\t\t\t\tdd.setPlotAxis(AxisType.SLICE);\n\t\t\t}\n\t\t\treturn;\n\t\t} else { // We have to decide which of the others is x\n\t\t\tfor (DimsData dd : iterable()) {\n\t\t\t\tif (!dd.getPlotAxis().hasValue()) {\n\t\t\t\t    dd.setPlotAxis(iaxisValue);\n\t\t\t\t    found=dd;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (DimsData dd : iterable()) {\n\t\t\t\tif (dd==found) continue;\n\t\t\t\tdd.setPlotAxis(AxisType.SLICE);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Bit of a complex  method. It simply tries to leave the data with\n\t * two axes selected by finding the most likely two dimensions that\n\t * should be plot axes.\n\t * \n\t * @param firstAxis\n\t * @param secondAxis\n\t */\n\tpublic void setTwoAxesOnly(AxisType firstAxis, AxisType secondAxis) {\n\t\tboolean foundFirst = false, foundSecond = false;\n\t\tfor (DimsData dd : iterable()) {\n\t\t\tif (dd.getPlotAxis()==firstAxis)  foundFirst  = true;\n\t\t\tif (dd.getPlotAxis()==secondAxis) foundSecond = true;\n\t\t}\n\t\tif (foundFirst&&foundSecond) {\n\t\t\tfor (DimsData dd : iterable()) {\n\t\t\t\tif (dd.getPlotAxis()==firstAxis)  continue;\n\t\t\t\tif (dd.getPlotAxis()==secondAxis) continue;\n\t\t\t\tif (dd.getPlotAxis()==AxisType.RANGE) continue;\n\t\t\t\tdd.setPlotAxis(AxisType.SLICE);\n\t\t\t}\n\t\t\treturn;\n\t\t} else { // We have to decide which of the others is first and second\n\t\t\tif (!foundFirst)  foundFirst  = processAxis(firstAxis, secondAxis);\n\t\t\tif (!foundSecond) foundSecond = processAxis(secondAxis, firstAxis);\n\t\t\tfor (DimsData dd : iterable()) {\n\t\t\t\tif (dd.getPlotAxis()==firstAxis)  continue;\n\t\t\t\tif (dd.getPlotAxis()==secondAxis) continue;<fim_middle>// class below is blob\n"}