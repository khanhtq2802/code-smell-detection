{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\npackage org.apache.hadoop.ozone.container.common.transport.server;\nimport org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos\n    .ContainerCommandRequestProto;\nimport org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos\n    .ContainerCommandResponseProto;\nimport org.apache.hadoop.hdds.protocol.datanode.proto\n    .XceiverClientProtocolServiceGrpc;\nimport org.apache.hadoop.hdds.security.token.TokenVerifier;\nimport org.apache.hadoop.ozone.container.common.interfaces.ContainerDispatcher;\nimport org.apache.hadoop.security.UserGroupInformation;\nimport org.apache.ratis.thirdparty.io.grpc.stub.StreamObserver;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.concurrent.atomic.AtomicBoolean;\n\n/**\n * Grpc Service for handling Container Commands on datanode.\n */\n<fim_suffix>public class GrpcXceiverService extends\n    XceiverClientProtocolServiceGrpc.XceiverClientProtocolServiceImplBase {\n  public static final Logger\n      LOG = LoggerFactory.getLogger(GrpcXceiverService.class);\n\n  private final ContainerDispatcher dispatcher;\n  private final boolean isGrpcTokenEnabled;\n  private final TokenVerifier tokenVerifier;\n\n  public GrpcXceiverService(ContainerDispatcher dispatcher) {\n    this(dispatcher, false, null);\n  }\n\n  public GrpcXceiverService(ContainerDispatcher dispatcher,\n      boolean grpcTokenEnabled, TokenVerifier tokenVerifier) {\n    this.dispatcher = dispatcher;\n    this.isGrpcTokenEnabled = grpcTokenEnabled;\n    this.tokenVerifier = tokenVerifier;\n  }\n\n  @Override\n  public StreamObserver<ContainerCommandRequestProto> send(\n      StreamObserver<ContainerCommandResponseProto> responseObserver) {\n    return new StreamObserver<ContainerCommandRequestProto>() {\n      private final AtomicBoolean isClosed = new AtomicBoolean(false);\n\n      @Override\n      public void onNext(ContainerCommandRequestProto request) {\n        try {\n          if(isGrpcTokenEnabled) {\n            // ServerInterceptors intercepts incoming request and creates ugi.\n            tokenVerifier.verify(UserGroupInformation.getCurrentUser()\n                .getShortUserName(), request.getEncodedToken());\n          }\n          ContainerCommandResponseProto resp =\n              dispatcher.dispatch(request, null);\n          responseObserver.onNext(resp);\n        } catch (Throwable e) {\n          LOG.error(\"{} got exception when processing\"\n                    + \" ContainerCommandRequestProto {}: {}\", request, e);\n          responseObserver.onError(e);\n        }\n      }\n\n      @Override\n      public void onError(Throwable t) {\n        // for now we just log a msg\n        LOG.error(\"{}: ContainerCommand send on error. Exception: {}\", t);\n      }\n\n      @Override\n      public void onCompleted() {\n        if (isClosed.compareAndSet(false, true)) {\n          LOG.debug(\"{}: ContainerCommand send completed\");\n          responseObserver.onCompleted();\n        }\n      }\n    };\n  }\n}<fim_middle>// class below has no smell\n"}