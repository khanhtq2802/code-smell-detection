{"text": "<fim_prefix>  protected static final int FAST_SCRATCH_BUFFER_LEN_BIG_INTEGER_BYTES = 1 + 48;\n  protected static final int FAST_SCRATCH_LONGS_LEN = 6;\n  protected int fastBigIntegerBytes(\n      long[] scratchLongs, byte[] buffer) {\n    return\n        FastHiveDecimalImpl.fastBigIntegerBytes(\n            fastSignum, fast0, fast1, fast2,\n            fastIntegerDigitCount, fastScale,\n            fastSerializationScale,\n            scratchLongs, buffer);\n  }\n  protected int fastBigIntegerBytesScaled(\n      int serializationScale,\n      long[] scratchLongs, byte[] buffer) {\n    return\n        FastHiveDecimalImpl.fastBigIntegerBytesScaled(\n            fastSignum, fast0, fast1, fast2,\n            fastIntegerDigitCount, fastScale,\n            serializationScale,\n            scratchLongs, buffer);\n  }\n  protected boolean fastIsByte() {\n    return\n        FastHiveDecimalImpl.fastIsByte(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale);\n  }\n  protected byte fastByteValueClip() {\n    return\n        FastHiveDecimalImpl.fastByteValueClip(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale);\n  }\n  protected boolean fastIsShort() {\n    return\n        FastHiveDecimalImpl.fastIsShort(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale);\n  }\n  protected short fastShortValueClip() {\n    return\n        FastHiveDecimalImpl.fastShortValueClip(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale);\n  }\n  protected boolean fastIsInt() {\n    return\n        FastHiveDecimalImpl.fastIsInt(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale);\n  }\n  protected int fastIntValueClip() {\n    return\n        FastHiveDecimalImpl.fastIntValueClip(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale);\n  }\n  protected boolean fastIsLong() {\n    return\n        FastHiveDecimalImpl.fastIsLong(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale);\n  }\n  protected long fastLongValueClip() {\n    return\n        FastHiveDecimalImpl.fastLongValueClip(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale);\n  }\n  protected float fastFloatValue() {\n    return\n        FastHiveDecimalImpl.fastFloatValue(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale);\n  }\n  protected double fastDoubleValue() {\n    return\n        FastHiveDecimalImpl.fastDoubleValue(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale);\n  }\n  protected BigInteger fastBigIntegerValue() {\n    return\n        FastHiveDecimalImpl.fastBigIntegerValue(\n            fastSignum, fast0, fast1, fast2,\n            fastIntegerDigitCount, fastScale,\n            fastSerializationScale);\n  }\n  protected BigDecimal fastBigDecimalValue() {\n    return\n        FastHiveDecimalImpl.fastBigDecimalValue(\n            fastSignum, fast0, fast1, fast2,\n            fastIntegerDigitCount, fastScale);\n  }\n  protected int fastScale() {\n    return fastScale;\n  }\n  protected int fastSignum() {\n    return fastSignum;\n  }\n  protected int fastCompareTo(FastHiveDecimal right) {\n    return\n        FastHiveDecimalImpl.fastCompareTo(\n            fastSignum, fast0, fast1, fast2,\n            fastScale,\n            right.fastSignum, right.fast0, right.fast1, right.fast2,\n            right.fastScale);\n  }\n  protected static int fastCompareTo(FastHiveDecimal left, FastHiveDecimal right) {\n    return\n        FastHiveDecimalImpl.fastCompareTo(\n            left.fastSignum, left.fast0, left.fast1, left.fast2,\n            left.fastScale,\n            right.fastSignum, right.fast0, right.fast1, right.fast2,\n            right.fastScale);\n  }\n  protected boolean fastEquals(FastHiveDecimal that) {\n    return\n        FastHiveDecimalImpl.fastEquals(\n          fastSignum, fast0, fast1, fast2,\n          fastScale,\n          that.fastSignum, that.fast0, that.fast1, that.fast2,\n          that.fastScale);\n  }\n  protected void fastAbs() {\n    if (fastSignum == 0) {\n      return;\n    }\n    fastSignum = 1;\n  }\n  protected void fastNegate() {\n    if (fastSignum == 0) {\n      return;\n    }\n    fastSignum = (fastSignum == 1 ? -1 : 1);\n  }\n  protected int fastNewFasterHashCode() {\n    return\n        FastHiveDecimalImpl.fastNewFasterHashCode(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale);\n  }\n  protected int fastHashCode() {\n    return\n        FastHiveDecimalImpl.fastHashCode(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale);\n  }\n  protected int fastIntegerDigitCount() {\n    return fastIntegerDigitCount;\n  }\n  protected int fastSqlPrecision() {\n    return\n        FastHiveDecimalImpl.fastSqlPrecision(\n            fastSignum, fast0, fast1, fast2,\n            fastIntegerDigitCount, fastScale);\n  }\n  protected int fastRawPrecision() {\n    return\n        FastHiveDecimalImpl.fastRawPrecision(\n            fastSignum, fast0, fast1, fast2);\n  }\n  protected boolean fastScaleByPowerOfTen(\n      int n,\n      FastHiveDecimal fastResult) {\n    return\n        FastHiveDecimalImpl.fastScaleByPowerOfTen(\n            fastSignum, fast0, fast1, fast2, fastIntegerDigitCount, fastScale,\n            n,\n            fastResult);\n  }\n  protected static String fastRoundingModeToString(int roundingMode) {\n    String roundingModeString;\n    switch (roundingMode) {\n    case BigDecimal.ROUND_DOWN:\n      roundingModeString = \"ROUND_DOWN\";\n      break;\n    case BigDecimal.ROUND_UP:\n      roundingModeString = \"ROUND_UP\";\n      break;\n    case BigDecimal.ROUND_FLOOR:\n      roundingModeString = \"ROUND_FLOOR\";\n      break;\n    case BigDecimal.ROUND_CEILING:\n      roundingModeString = \"ROUND_CEILING\";\n      break;\n    case BigDecimal.ROUND_HALF_UP:\n      roundingModeString = \"ROUND_HALF_UP\";\n      break;\n    case BigDecimal.ROUND_HALF_EVEN:\n      roundingModeString = \"ROUND_HALF_EVEN\";\n      break;\n    default:\n      roundingModeString = \"Unknown\";\n    }\n    return roundingModeString + \" (\" + roundingMode + \")\";\n  }\n  protected boolean fastRound(\n      int newScale, int roundingMode,\n      FastHiveDecimal fastResult) {\n    return\n        FastHiveDecimalImpl.fastRound(\n            fastSignum, fast0, fast1, fast2,\n            fastIntegerDigitCount, fastScale,\n            newScale, roundingMode,\n            fastResult);\n  }\n  protected boolean isAllZeroesBelow(\n      int power) {\n    return\n        FastHiveDecimalImpl.isAllZeroesBelow(\n            fastSignum, fast0, fast1, fast2, power);\n  }\n  protected boolean fastEnforcePrecisionScale(\n      int maxPrecision, int maxScale) {\n    if (maxPrecision <= 0 || maxPrecision > HiveDecimal.MAX_PRECISION) {\n      return false;\n    }\n    if (maxScale < 0 || maxScale > HiveDecimal.MAX_SCALE) {\n      return false;\n    }\n    /*\n    if (!fastIsValid()) {\n      fastRaiseInvalidException();\n    }\n    */\n    FastCheckPrecisionScaleStatus status =\n        FastHiveDecimalImpl.fastCheckPrecisionScale(\n          fastSignum, fast0, fast1, fast2,\n          fastIntegerDigitCount, fastScale,\n          maxPrecision, maxScale);\n    switch (status) {\n    case NO_CHANGE:\n      return true;\n    case OVERFLOW:\n      return false;\n    case UPDATE_SCALE_DOWN:\n      {\n        if (!FastHiveDecimalImpl.fastUpdatePrecisionScale(\n          fastSignum, fast0, fast1, fast2,\n          fastIntegerDigitCount, fastScale,\n          maxPrecision, maxScale, status,\n          this)) {\n          return false;\n        }\n        /*\n        if (!fastIsValid()) {\n          fastRaiseInvalidException();\n        }\n        */\n        return true;\n      }\n    default:\n      throw new RuntimeException(\"Unknown fast decimal check precision and scale status \" + status);\n    }\n  }\n<fim_suffix>  protected FastCheckPrecisionScaleStatus fastCheckPrecisionScale(\n      int maxPrecision, int maxScale) {\n    return\n        FastHiveDecimalImpl.fastCheckPrecisionScale(\n            fastSignum, fast0, fast1, fast2,\n            fastIntegerDigitCount, fastScale,\n            maxPrecision, maxScale);\n  }<fim_middle>// function below has no smell\n"}