{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.ide.command.toolbar;\n\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.uibinder.client.UiBinder;\nimport com.google.gwt.uibinder.client.UiField;\nimport com.google.gwt.user.client.ui.AcceptsOneWidget;\nimport com.google.gwt.user.client.ui.FlowPanel;\nimport com.google.gwt.user.client.ui.SimplePanel;\nimport com.google.gwt.user.client.ui.Widget;\nimport javax.inject.Inject;\nimport javax.inject.Singleton;\n\n/** Implementation of {@link CommandToolbarView}. */\n<fim_suffix>@Singleton\npublic class CommandToolbarViewImpl implements CommandToolbarView {\n\n  private static final CommandToolbarViewImplUiBinder UI_BINDER =\n      GWT.create(CommandToolbarViewImplUiBinder.class);\n\n  @UiField FlowPanel rootPanel;\n  @UiField SimplePanel commandsPanel;\n  @UiField SimplePanel processesListPanel;\n  @UiField SimplePanel panelSelectorPanel;\n  @UiField SimplePanel toolbarControllerPanel;\n  @UiField SimplePanel buttonsPanel;\n  @UiField SimplePanel previewUrlListPanel;\n\n  private ActionDelegate delegate;\n\n  @Inject\n  public CommandToolbarViewImpl() {\n    UI_BINDER.createAndBindUi(this);\n  }\n\n  @Override\n  public void setDelegate(ActionDelegate delegate) {\n    this.delegate = delegate;\n  }\n\n  @Override\n  public Widget asWidget() {\n    return rootPanel;\n  }\n\n  @Override\n  public AcceptsOneWidget getCommandsPanelContainer() {\n    return commandsPanel;\n  }\n\n  @Override\n  public AcceptsOneWidget getProcessesListContainer() {\n    return processesListPanel;\n  }\n\n  @Override\n  public AcceptsOneWidget getPreviewUrlsListContainer() {\n    return previewUrlListPanel;\n  }\n\n  @Override\n  public AcceptsOneWidget getPanelSelectorContainer() {\n    return panelSelectorPanel;\n  }\n\n  @Override\n  public AcceptsOneWidget getToolbarControllerContainer() {\n    return toolbarControllerPanel;\n  }\n\n  @Override\n  public void addButton(ToolbarButton button) {\n    buttonsPanel.add(button);\n  }\n\n  interface CommandToolbarViewImplUiBinder extends UiBinder<Widget, CommandToolbarViewImpl> {}\n}<fim_middle>// class below has no smell\n"}