{"text": "<fim_prefix>/*\n * reserved comment block\n * DO NOT REMOVE OR ALTER!\n */\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.sun.org.apache.xerces.internal.impl.dv;\n\nimport com.sun.org.apache.xerces.internal.xs.XSSimpleTypeDefinition;\n\n/**\n * This interface <code>XSSimpleType</code> represents the simple type\n * definition of schema component and defines methods to query the information\n * contained.\n * Any simple type (atomic, list or union) will implement this interface.\n * It inherits from <code>XSTypeDecl</code>.\n *\n * @xerces.internal\n *\n * @author Sandy Gao, IBM\n *\n */\n<fim_suffix>public interface XSSimpleType extends XSSimpleTypeDefinition {\n\n    /**\n     * constants defined for the values of 'whitespace' facet.\n     * see <a href='http://www.w3.org/TR/xmlschema-2/#dt-whiteSpace'> XML Schema\n     * Part 2: Datatypes </a>\n     */\n    /** preserve the white spaces */\n    public static final short WS_PRESERVE = 0;\n    /** replace the white spaces */\n    public static final short WS_REPLACE  = 1;\n    /** collapse the white spaces */\n    public static final short WS_COLLAPSE = 2;\n\n    /**\n     * Constant defined for the primitive built-in simple tpyes.\n     * see <a href='http://www.w3.org/TR/xmlschema-2/#built-in-primitive-datatypes'>\n     * XML Schema Part 2: Datatypes </a>\n     */\n    /** \"string\" type */\n    public static final short PRIMITIVE_STRING        = 1;\n    /** \"boolean\" type */\n    public static final short PRIMITIVE_BOOLEAN       = 2;\n    /** \"decimal\" type */\n    public static final short PRIMITIVE_DECIMAL       = 3;\n    /** \"float\" type */\n    public static final short PRIMITIVE_FLOAT         = 4;\n    /** \"double\" type */\n    public static final short PRIMITIVE_DOUBLE        = 5;\n    /** \"duration\" type */\n    public static final short PRIMITIVE_DURATION      = 6;\n    /** \"dataTime\" type */\n    public static final short PRIMITIVE_DATETIME      = 7;\n    /** \"time\" type */\n    public static final short PRIMITIVE_TIME          = 8;\n    /** \"date\" type */\n    public static final short PRIMITIVE_DATE          = 9;\n    /** \"gYearMonth\" type */\n    public static final short PRIMITIVE_GYEARMONTH    = 10;\n    /** \"gYear\" type */\n    public static final short PRIMITIVE_GYEAR         = 11;\n    /** \"gMonthDay\" type */\n    public static final short PRIMITIVE_GMONTHDAY     = 12;\n    /** \"gDay\" type */\n    public static final short PRIMITIVE_GDAY          = 13;\n    /** \"gMonth\" type */\n    public static final short PRIMITIVE_GMONTH        = 14;\n    /** \"hexBinary\" type */\n    public static final short PRIMITIVE_HEXBINARY     = 15;\n    /** \"base64Binary\" type */\n    public static final short PRIMITIVE_BASE64BINARY  = 16;\n    /** \"anyURI\" type */\n    public static final short PRIMITIVE_ANYURI        = 17;\n    /** \"QName\" type */\n    public static final short PRIMITIVE_QNAME         = 18;\n    /** \"precisionDecimal\" type */\n    public static final short PRIMITIVE_PRECISIONDECIMAL = 19;\n    /** \"NOTATION\" type */\n    public static final short PRIMITIVE_NOTATION      = 20;\n\n    /**\n     * return an ID representing the built-in primitive base type.\n     * REVISIT: This method is (currently) for internal use only.\n     *          the constants returned from this method are not finalized yet.\n     *          the names and values might change in the further.\n     *\n     * @return   an ID representing the built-in primitive base type\n     */\n    public short getPrimitiveKind();\n\n    /**\n     * validate a given string against this simple type.\n     *\n     * @param content       the string value that needs to be validated\n     * @param context       the validation context\n     * @param validatedInfo used to store validation result\n     *\n     * @return              the actual value (QName, Boolean) of the string value\n     */\n    public Object validate(String content, ValidationContext context, ValidatedInfo validatedInfo)\n        throws InvalidDatatypeValueException;\n\n    /**\n     * validate a given string value, represented by content.toString().\n     * note that if content is a StringBuffer, for performance reasons,\n     * it's possible that the content of the string buffer is modified.\n     *\n     * @param content       the string value that needs to be validated\n     * @param context       the validation context\n     * @param validatedInfo used to store validation result\n     *\n     * @return              the actual value (QName, Boolean) of the string value\n     */\n    public Object validate(Object content, ValidationContext context, ValidatedInfo validatedInfo)\n        throws InvalidDatatypeValueException;\n\n    /**\n     * Validate an actual value against this simple type.\n     *\n     * @param context       the validation context\n     * @param validatedInfo used to provide the actual value and member types\n     * @exception InvalidDatatypeValueException  exception for invalid values.\n     */\n    public void validate(ValidationContext context, ValidatedInfo validatedInfo)\n        throws InvalidDatatypeValueException;\n\n    /**\n     * If this type is created from restriction, then some facets can be applied\n     * to the simple type. <code>XSFacets</code> is used to pass the value of\n     * different facets.\n     *\n     * @param facets        the value of all the facets\n     * @param presentFacet  bit combination value of the costraining facet\n     *                      constants which are present.\n     * @param fixedFacet    bit combination value of the costraining facet\n     *                      constants which are fixed.\n     * @param context       the validation context\n     * @exception InvalidDatatypeFacetException  exception for invalid facet values.\n     */\n    public void applyFacets(XSFacets facets, short presentFacet, short fixedFacet, ValidationContext context)\n        throws InvalidDatatypeFacetException;\n\n    /**\n     * Check whether two actual values are equal.\n     *\n     * @param value1  the first value\n     * @param value2  the second value\n     * @return        true if the two value are equal\n     */\n    public boolean isEqual(Object value1, Object value2);\n\n    /**\n     * Check the order of the two actual values. (May not be supported by all\n     * simple types.\n     * REVISIT: Andy believes that a compare() method is necessary.\n     *          I don't see the necessity for schema (the only place where we\n     *          need to compare two values is to check min/maxIn/Exclusive\n     *          facets, but we only need a private method for this case.)\n     *          But Andy thinks XPATH potentially needs this compare() method.\n     *\n     * @param value1  the first value\n     * @prarm value2  the second value\n     * @return        > 0 if value1 > value2\n     *                = 0 if value1 == value2\n     *                < = if value1 < value2\n     */\n    //public short compare(Object value1, Object value2);\n\n    /**\n     * Check whether this type is or is derived from ID.\n     * REVISIT: this method makes ID special, which is not a good design.\n     *          but since ID is not a primitive, there doesn't seem to be a\n     *          clean way of doing it except to define special method like this.\n     *\n     * @return  whether this simple type is or is derived from ID.\n     */\n    public boolean isIDType();\n\n    /**\n     * Return the whitespace corresponding to this datatype.\n     *\n     * @return valid values are WS_PRESERVE, WS_REPLACE, WS_COLLAPSE.\n     * @exception DatatypeException\n     *                   union datatypes don't have whitespace facet associated with them\n     */\n    public short getWhitespace() throws DatatypeException;\n}<fim_middle>// class below has no smell\n"}