{"text": "<fim_prefix>/**\n * Copyright (c) 2014,2019 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\npackage org.eclipse.smarthome.core.thing.internal.profiles;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\nimport org.eclipse.smarthome.core.thing.profiles.ProfileType;\nimport org.eclipse.smarthome.core.thing.profiles.ProfileTypeProvider;\nimport org.eclipse.smarthome.core.thing.profiles.ProfileTypeRegistry;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.component.annotations.Reference;\nimport org.osgi.service.component.annotations.ReferenceCardinality;\nimport org.osgi.service.component.annotations.ReferencePolicy;\n\n/**\n * {@link ProfileTypeRegistry} implementation.\n *\n * @author Simon Kaufmann - initial contribution and API.\n *\n */\n@Component(service = ProfileTypeRegistry.class)\npublic class ProfileTypeRegistryImpl implements ProfileTypeRegistry {\n\n    private final List<ProfileTypeProvider> profileTypeProviders = new CopyOnWriteArrayList<>();\n\n    @Override\n    public List<ProfileType> getProfileTypes() {\n        return getProfileTypes(null);\n    }\n\n    @Override\n    public List<ProfileType> getProfileTypes(Locale locale) {\n        List<ProfileType> profileTypes = new ArrayList<>();\n        for (ProfileTypeProvider profileTypeProvider : profileTypeProviders) {\n            profileTypes.addAll(profileTypeProvider.getProfileTypes(locale));\n        }\n        return Collections.unmodifiableList(profileTypes);\n    }\n\n    @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC)\n    protected void addProfileTypeProvider(ProfileTypeProvider profileTypeProvider) {\n        profileTypeProviders.add(profileTypeProvider);\n    }\n\n<fim_suffix>    protected void removeProfileTypeProvider(ProfileTypeProvider profileTypeProvider) {\n        profileTypeProviders.remove(profileTypeProvider);\n    }\n\n}<fim_middle>// function below has no smell\n"}