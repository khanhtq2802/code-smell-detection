{"text": "<fim_prefix>                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;\n                        result.setIreIsSet(true);\n                        msg = result;\n            }\n            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {\n                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;\n                        result.setAceIsSet(true);\n                        msg = result;\n            }\n            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {\n                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;\n                        result.setAseIsSet(true);\n                        msg = result;\n            }\n            else             if (e instanceof org.apache.airavata.model.error.AuthorizationException) {\n                        result.ae = (org.apache.airavata.model.error.AuthorizationException) e;\n                        result.setAeIsSet(true);\n                        msg = result;\n            }\n             else \n            {\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n              return;\n            } catch (Exception ex) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n            }\n            fb.close();\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, deleteApplicationDeployment_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {\n        iface.deleteApplicationDeployment(args.authzToken, args.appDeploymentId,resultHandler);\n      }\n    }\n    public static class getAllApplicationDeployments<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllApplicationDeployments_args, List<org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription>> {\n      public getAllApplicationDeployments() {\n        super(\"getAllApplicationDeployments\");\n      }\n      public getAllApplicationDeployments_args getEmptyArgsInstance() {\n        return new getAllApplicationDeployments_args();\n      }\n      public AsyncMethodCallback<List<org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.thrift.AsyncProcessFunction fcall = this;\n        return new AsyncMethodCallback<List<org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription>>() { \n          public void onComplete(List<org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription> o) {\n            getAllApplicationDeployments_result result = new getAllApplicationDeployments_result();\n            result.success = o;\n            try {\n              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);\n              return;\n            } catch (Exception e) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", e);\n            }\n            fb.close();\n          }\n          public void onError(Exception e) {\n            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;\n            org.apache.thrift.TBase msg;\n            getAllApplicationDeployments_result result = new getAllApplicationDeployments_result();\n            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {\n                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;\n                        result.setIreIsSet(true);\n                        msg = result;\n            }\n            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {\n                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;\n                        result.setAceIsSet(true);\n                        msg = result;\n            }\n            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {\n                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;\n                        result.setAseIsSet(true);\n                        msg = result;\n            }\n            else             if (e instanceof org.apache.airavata.model.error.AuthorizationException) {\n                        result.ae = (org.apache.airavata.model.error.AuthorizationException) e;\n                        result.setAeIsSet(true);\n                        msg = result;\n            }\n             else \n            {\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n              return;\n            } catch (Exception ex) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n            }\n            fb.close();\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, getAllApplicationDeployments_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription>> resultHandler) throws TException {\n        iface.getAllApplicationDeployments(args.authzToken, args.gatewayId,resultHandler);\n      }\n    }\n<fim_suffix>    public static class getAppModuleDeployedResources<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAppModuleDeployedResources_args, List<String>> {\n      public getAppModuleDeployedResources() {\n        super(\"getAppModuleDeployedResources\");\n      }\n      public getAppModuleDeployedResources_args getEmptyArgsInstance() {\n        return new getAppModuleDeployedResources_args();\n      }\n      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {\n        final org.apache.thrift.AsyncProcessFunction fcall = this;\n        return new AsyncMethodCallback<List<String>>() { \n          public void onComplete(List<String> o) {\n            getAppModuleDeployedResources_result result = new getAppModuleDeployedResources_result();\n            result.success = o;\n            try {\n              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);\n              return;\n            } catch (Exception e) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", e);\n            }\n            fb.close();\n          }\n          public void onError(Exception e) {\n            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;\n            org.apache.thrift.TBase msg;\n            getAppModuleDeployedResources_result result = new getAppModuleDeployedResources_result();\n            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {\n                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;\n                        result.setIreIsSet(true);\n                        msg = result;\n            }\n            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {\n                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;\n                        result.setAceIsSet(true);\n                        msg = result;\n            }\n            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {\n                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;\n                        result.setAseIsSet(true);\n                        msg = result;\n            }\n            else             if (e instanceof org.apache.airavata.model.error.AuthorizationException) {\n                        result.ae = (org.apache.airavata.model.error.AuthorizationException) e;\n                        result.setAeIsSet(true);\n                        msg = result;\n            }\n             else \n            {\n              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;\n              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());\n            }\n            try {\n              fcall.sendResponse(fb,msg,msgType,seqid);\n              return;\n            } catch (Exception ex) {\n              LOGGER.error(\"Exception writing to internal frame buffer\", ex);\n            }\n            fb.close();\n          }\n        };\n      }\n      protected boolean isOneway() {\n        return false;\n      }\n      public void start(I iface, getAppModuleDeployedResources_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {\n        iface.getAppModuleDeployedResources(args.authzToken, args.appModuleId,resultHandler);\n      }\n    }<fim_middle>// class below has no smell\n"}