{"text": "<fim_prefix>import org.eclipse.reddeer.common.wait.TimePeriod;\nimport org.eclipse.reddeer.common.wait.WaitUntil;\nimport org.eclipse.reddeer.core.exception.CoreLayerException;\n/**\n * Contains methods for handling UI operations on {@link TreeItem} widgets.\n * \n * @author Lucia Jelinkova\n *\n */\npublic class TreeItemHandler extends ItemHandler{\n\tprivate static final Logger logger = Logger.getLogger(TreeItemHandler.class);\n\tprivate static TreeItemHandler instance;\n\t/**\n\t * Gets instance of TreeItemHandler.\n\t * \n\t * @return instance of TreeItemHandler\n\t */\n\tpublic static TreeItemHandler getInstance(){\n\t\tif(instance == null){\n\t\t\tinstance = new TreeItemHandler();\n\t\t}\n\t\treturn instance;\n\t}\n\t/**\n\t * Gets text from cell of specified {@link TreeItem} on the position\n\t * specified by index.\n\t * \n\t * @param treeItem\n\t *            tree item to handle\n\t * @param cellIndex\n\t *            index of cell to get text\n\t * @return text of the cell\n\t */\n\tpublic String getText(final TreeItem treeItem, final int cellIndex) {\n\t\tString text = Display.syncExec(new ResultRunnable<String>() {\n\t\t\t@Override\n\t\t\tpublic String run() {\n\t\t\t\treturn treeItem.getText(cellIndex);\n\t\t\t}\n\t\t});\n\t\treturn text;\n\t}\n\t/**\n\t * Gets tool tip of specified tree item.\n\t * \n\t * @param item\n\t *            item to handle\n\t * @return tool tip text of specified tree item\n\t */\n\tpublic String getToolTipText(final TreeItem item) {\n\t\tString text = Display.syncExec(new ResultRunnable<String>() {\n\t\t\t@Override\n\t\t\tpublic String run() {\n\t\t\t\treturn item.getParent().getToolTipText();\n\t\t\t}\n\t\t});\n\t\treturn text;\n\t}\n\t/**\n\t * Finds out whether specified tree item is checked or not.\n\t * \n\t * @param item\n\t *            item to handle\n\t * @return true if specified tree item is expanded, false otherwise\n\t */\n\tpublic boolean isExpanded(final TreeItem item) {\n\t\treturn Display.syncExec(new ResultRunnable<Boolean>() {\n\t\t\t@Override\n\t\t\tpublic Boolean run() {\n\t\t\t\treturn item.getExpanded();\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t * Sets specified text to column on the position specified by index in\n\t * specified tree item.\n\t * \n\t * @param treeItem\n\t *            tree item to handle\n\t * @param cellIndex\n\t *            index of cell to set text\n\t * @param text\n\t *            text to set\n\t */\n\tpublic void setText(final TreeItem treeItem, final int cellIndex, final String text) {\n\t\tDisplay.syncExec(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttreeItem.setText(cellIndex, text);\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t * Selects specified tree items in currently focused tree.\n\t *\n\t * @param selection\n\t *            the selection\n\t */\n\tpublic void selectItems(final TreeItem... selection) {\n\t\tlogger.info(\"Select tree items: \");\n\t\tfinal Tree swtTree = getParent(selection[0]);\n\t\tTreeHandler.getInstance().setFocus(swtTree);\n\t\tDisplay.syncExec(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tif (!(SWT.MULTI == (swtTree.getStyle() & SWT.MULTI)) && selection.length > 1) {\n\t\t\t\t\tthrow new CoreLayerException(\"Tree does not support SWT.MULTI, cannot make multiple selections\");\n\t\t\t\t}\n\t\t\t\tlogger.debug(\"Set Tree selection\");\n\t\t\t\tswtTree.setSelection(selection);\n\t\t\t}\n\t\t});\n\t\tTreeHandler.getInstance().notifySelect(swtTree);\n\t\tlogger.debug(\"Selected Tree Items:\");\n\t\tfor (TreeItem treeItem : selection) {\n\t\t\tlogger.debug(\"  \" + getText(treeItem));\n\t\t}\n\t}\n\t/**\n\t * Selects swt tree item.\n\t * \n\t * @param swtTreeItem\n\t *            tree item to handle\n\t */\n\tpublic void select(final TreeItem swtTreeItem) {\n\t\tDisplay.syncExec(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tlogger.debug(\"Selecting tree item: \" + swtTreeItem.getText());\n\t\t\t\tswtTreeItem.getParent().setFocus();\n\t\t\t\tswtTreeItem.getParent().setSelection(swtTreeItem);\n\t\t\t}\n\t\t});\n\t\tlogger.debug(\"Notify tree item \" + getText(swtTreeItem) + \" about selection\");\n\t\tTreeHandler.getInstance().notifyTree(swtTreeItem, TreeHandler.getInstance().createEventForTree(swtTreeItem, SWT.Selection));\n\t\tlogger.info(\"Selected tree item: \" + getText(swtTreeItem));\n\t}\n\t/**\n\t * Get child swt tree item with specified text.\n\t * \n\t * @param swtTreeItem\n\t *            tree item to handle\n\t * @param text\n\t *            text of tree item\n\t * @return child item of specified tree item\n\t */\n\tpublic TreeItem getItem(final TreeItem swtTreeItem, final String text) {\n\t\tlogger.debug(\"Get child tree item \" + text + \" of tree item \" + getText(swtTreeItem));\n\t\texpand(swtTreeItem);\n\t\tTreeItem result = Display.syncExec(new ResultRunnable<TreeItem>() {\n\t\t\t@Override\n\t\t\tpublic TreeItem run() {\n\t\t\t\torg.eclipse.swt.widgets.TreeItem[] items = swtTreeItem.getItems();\n\t\t\t\tboolean isFound = false;\n\t\t\t\tint index = 0;\n\t\t\t\twhile (!isFound && index < items.length) {\n\t\t\t\t\tif (items[index].getText().equals(text)) {\n\t\t\t\t\t\tisFound = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!isFound) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn items[index];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t} else {\n\t\t\tCoreLayerException exception = new CoreLayerException(\n\t\t\t\t\t\"Tree Item \" + this + \" has no Tree Item with text \" + text);\n\t\t\texception.addMessageDetail(\"Tree Item \" + this + \" has these direct children:\");\n\t\t\tfor (TreeItem treeItem : TreeHandler.getInstance().getSWTItems(getParent(swtTreeItem))) {\n\t\t\t\texception.addMessageDetail(\"  \" + getText(treeItem, 0));\n\t\t\t}\n\t\t\tthrow exception;\n\t\t}\n\t}\n\t/**\n\t * Gets children of specified swt tree item.\n\t * \n\t * @param swtTreeItem\n\t *            tree item to handle\n\t * @return tree item children\n\t */\n\tpublic List<TreeItem> getChildrenItems(final TreeItem swtTreeItem) {\n\t\texpand(swtTreeItem, TimePeriod.SHORT);\n\t\treturn Display.syncExec(new ResultRunnable<List<TreeItem>>() {\n\t\t\t@Override\n\t\t\tpublic List<TreeItem> run() {\n\t\t\t\torg.eclipse.swt.widgets.TreeItem[] items = swtTreeItem.getItems();\n\t\t\t\treturn Arrays.asList(items);\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t * Gets parent of specified swt tree item.\n\t * \n\t * @param swtTreeItem\n\t *            tree item to handle\n\t * @return parent tree of specified item\n\t */\n\tpublic Tree getParent(final TreeItem swtTreeItem) {\n\t\treturn Display.syncExec(new ResultRunnable<Tree>() {\n\t\t\t@Override\n\t\t\tpublic Tree run() {\n\t\t\t\treturn swtTreeItem.getParent();\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t * Gets parent item of specified swt tree item.\n\t * \n\t * @param swtTreeItem\n\t *            tree item to handle\n\t * @return parent tree item of specified item\n\t */\n\tpublic TreeItem getParentItem(final TreeItem swtTreeItem){\n\t\treturn Display.syncExec(new ResultRunnable<TreeItem>() {\n\t\t\t@Override\n\t\t\tpublic TreeItem run() {\n\t\t\t\treturn swtTreeItem.getParentItem();\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t * Gets path to specified swt tree item.\n\t * \n\t * @param swtTreeItem\n\t *            tree item to handle\n\t * @return path to specified tree item in tree\n\t */\n<fim_suffix>\tpublic String[] getPath(final TreeItem swtTreeItem) {\n\t\treturn Display.syncExec(new ResultRunnable<String[]>() {\n\t\t\t@Override\n\t\t\tpublic String[] run() {\n\t\t\t\torg.eclipse.swt.widgets.TreeItem swttiDummy = swtTreeItem;\n\t\t\t\tLinkedList<String> items = new LinkedList<String>();\n\t\t\t\twhile (swttiDummy != null) {\n\t\t\t\t\titems.addFirst(swttiDummy.getText());\n\t\t\t\t\tswttiDummy = swttiDummy.getParentItem();\n\t\t\t\t}\n\t\t\t\treturn items.toArray(new String[0]);\n\t\t\t}\n\t\t});\n\t}<fim_middle>// function below has no smell\n"}