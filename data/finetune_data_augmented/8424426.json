{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.spi;\n\nimport org.apache.camel.CamelContext;\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Processor;\nimport org.apache.camel.Route;\n\n/**\n * This interface is implemented by all events.\n */\npublic interface CamelEvent {\n\n    enum Type {\n        CamelContextResumed,\n        CamelContextResumeFailure,\n        CamelContextResuming,\n        CamelContextStarted,\n        CamelContextStarting,\n        CamelContextStartupFailure,\n        CamelContextStopFailure,\n        CamelContextStopped,\n        CamelContextStopping,\n        CamelContextSuspended,\n        CamelContextSuspending,\n        ExchangeCompleted,\n        ExchangeCreated,\n        ExchangeFailed,\n        ExchangeFailureHandled,\n        ExchangeFailureHandling,\n        ExchangeRedelivery,\n        ExchangeSending,\n        ExchangeSent,\n        StepStarted,\n        StepCompleted,\n        StepFailed,\n        RouteAdded,\n        RouteRemoved,\n        RouteStarted,\n        RouteStopped,\n        ServiceStartupFailure,\n        ServiceStopFailure,\n        Custom\n    }\n\n    Type getType();\n\n    Object getSource();\n\n    /**\n     * This interface is implemented by all events that contain an exception and is used to\n     * retrieve the exception in a universal way.\n     */\n    interface FailureEvent extends CamelEvent {\n\n        Throwable getCause();\n\n    }\n\n    interface CamelContextEvent extends CamelEvent {\n\n        CamelContext getContext();\n\n        default Object getSource() {\n            return getContext();\n        }\n\n    }\n\n    interface CamelContextResumedEvent extends CamelContextEvent {\n        default Type getType() {\n            return Type.CamelContextResumed;\n        }\n    }\n\n    interface CamelContextResumeFailureEvent extends CamelContextEvent, FailureEvent {\n        default Type getType() {\n            return Type.CamelContextResumeFailure;\n        }\n    }\n\n    interface CamelContextResumingEvent extends CamelContextEvent {\n        default Type getType() {\n            return Type.CamelContextResuming;\n        }\n    }\n\n    interface CamelContextStartedEvent extends CamelContextEvent {\n        default Type getType() {\n            return Type.CamelContextStarted;\n        }\n    }\n\n    interface CamelContextStartingEvent extends CamelContextEvent {\n        default Type getType() {\n            return Type.CamelContextStarting;\n        }\n    }\n\n    interface CamelContextStartupFailureEvent extends CamelContextEvent, FailureEvent {\n        default Type getType() {\n            return Type.CamelContextStartupFailure;\n        }\n    }\n\n    interface CamelContextStopFailureEvent extends CamelContextEvent, FailureEvent {\n        default Type getType() {\n            return Type.CamelContextStopFailure;\n        }\n    }\n\n    interface CamelContextStoppedEvent extends CamelContextEvent {\n        default Type getType() {\n            return Type.CamelContextStopped;\n        }\n    }\n\n    interface CamelContextStoppingEvent extends CamelContextEvent {\n        default Type getType() {\n            return Type.CamelContextStopping;\n        }\n    }\n\n    interface CamelContextSuspendedEvent extends CamelContextEvent {\n        default Type getType() {\n            return Type.CamelContextSuspended;\n        }\n    }\n\n    interface CamelContextSuspendingEvent extends CamelContextEvent {\n        default Type getType() {\n            return Type.CamelContextSuspending;\n        }\n    }\n\n    interface ExchangeEvent extends CamelEvent {\n\n        Exchange getExchange();\n\n        default Object getSource() {\n            return getExchange();\n        }\n    }\n\n    interface ExchangeCompletedEvent extends ExchangeEvent {\n        default Type getType() {\n            return Type.ExchangeCompleted;\n        }\n    }\n\n<fim_suffix>    interface ExchangeCreatedEvent extends ExchangeEvent {\n        default Type getType() {\n            return Type.ExchangeCreated;\n        }\n    }\n\n    interface ExchangeFailedEvent extends ExchangeEvent, FailureEvent {\n        default Type getType() {\n            return Type.ExchangeFailed;\n        }\n    }\n\n    interface ExchangeFailureEvent extends ExchangeEvent {\n\n        Processor getFailureHandler();\n\n        boolean isDeadLetterChannel();\n\n        String getDeadLetterUri();\n\n    }\n\n    interface ExchangeFailureHandledEvent extends ExchangeFailureEvent {\n        default Type getType() {\n            return Type.ExchangeFailureHandled;\n        }\n    }\n\n    interface ExchangeFailureHandlingEvent extends ExchangeFailureEvent {\n        default Type getType() {\n            return Type.ExchangeFailureHandling;\n        }\n    }\n\n    interface ExchangeRedeliveryEvent extends ExchangeEvent {\n\n        int getAttempt();\n\n        default Type getType() {\n            return Type.ExchangeRedelivery;\n        }\n    }\n\n    interface ExchangeSendingEvent extends ExchangeEvent {\n\n        Endpoint getEndpoint();\n\n        default Type getType() {\n            return Type.ExchangeSending;\n        }\n    }\n\n    interface ExchangeSentEvent extends ExchangeEvent {\n\n        Endpoint getEndpoint();\n\n        long getTimeTaken();\n\n        default Type getType() {\n            return Type.ExchangeSent;\n        }\n    }\n\n    interface StepEvent extends ExchangeEvent {\n        String getStepId();\n    }\n\n    interface StepStartedEvent extends StepEvent {\n        default Type getType() {\n            return Type.StepStarted;\n        }\n    }\n\n    interface StepCompletedEvent extends StepEvent {\n        default Type getType() {\n            return Type.StepCompleted;\n        }\n    }\n\n    interface StepFailedEvent extends StepEvent, FailureEvent {\n        default Type getType() {\n            return Type.StepFailed;\n        }\n    }\n\n    interface RouteEvent extends CamelEvent {\n\n        Route getRoute();\n\n        default Object getSource() {\n            return getRoute();\n        }\n    }\n\n    interface RouteAddedEvent extends RouteEvent {\n        default Type getType() {\n            return Type.RouteAdded;\n        }\n    }\n\n    interface RouteRemovedEvent extends RouteEvent {\n        default Type getType() {\n            return Type.RouteRemoved;\n        }\n    }\n\n    interface RouteStartedEvent extends RouteEvent {\n        default Type getType() {\n            return Type.RouteStarted;\n        }\n    }\n\n    interface RouteStoppedEvent extends RouteEvent {\n        default Type getType() {\n            return Type.RouteStopped;\n        }\n    }\n\n    interface ServiceEvent extends CamelEvent {\n\n        Object getService();\n\n        default Object getSource() {\n            return getService();\n        }\n    }\n\n    interface ServiceStartupFailureEvent extends ServiceEvent, FailureEvent {\n        default Type getType() {\n            return Type.ServiceStartupFailure;\n        }\n    }\n\n    interface ServiceStopFailureEvent extends ServiceEvent, FailureEvent {\n        default Type getType() {\n            return Type.ServiceStopFailure;\n        }\n    }\n\n}<fim_middle>// class below has no smell\n"}