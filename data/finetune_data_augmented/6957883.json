{"text": "<fim_prefix>/*\n * Copyright (C) 2016 The Guava Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.common.graph;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Iterators;\nimport com.google.common.collect.UnmodifiableIterator;\nimport java.util.AbstractSet;\nimport java.util.Map;\nimport org.checkerframework.checker.nullness.qual.Nullable;\n\n/**\n * A class to represent the set of edges connecting an (implicit) origin node to a target node.\n *\n * <p>The {@link #nodeToOutEdge} map means this class only works on networks without parallel edges.\n * See {@link MultiEdgesConnecting} for a class that works with parallel edges.\n *\n * @author James Sexton\n * @param <E> Edge parameter type\n */\nfinal class EdgesConnecting<E> extends AbstractSet<E> {\n\n  private final Map<?, E> nodeToOutEdge;\n  private final Object targetNode;\n\n  EdgesConnecting(Map<?, E> nodeToEdgeMap, Object targetNode) {\n    this.nodeToOutEdge = checkNotNull(nodeToEdgeMap);\n    this.targetNode = checkNotNull(targetNode);\n  }\n\n  @Override\n  public UnmodifiableIterator<E> iterator() {\n    E connectingEdge = getConnectingEdge();\n    return (connectingEdge == null)\n        ? ImmutableSet.<E>of().iterator()\n        : Iterators.singletonIterator(connectingEdge);\n  }\n\n  @Override\n  public int size() {\n    return getConnectingEdge() == null ? 0 : 1;\n  }\n\n<fim_suffix>  @Override\n  public boolean contains(@Nullable Object edge) {\n    E connectingEdge = getConnectingEdge();\n    return (connectingEdge != null && connectingEdge.equals(edge));\n  }\n\n  private @Nullable E getConnectingEdge() {\n    return nodeToOutEdge.get(targetNode);\n  }\n}<fim_middle>// function below has no smell\n"}