{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.nifi.remote.io.socket.ssl;\n\nimport java.io.IOException;\n\nimport org.apache.nifi.remote.AbstractCommunicationsSession;\n\n<fim_suffix>public class SSLSocketChannelCommunicationsSession extends AbstractCommunicationsSession {\n\n    private final SSLSocketChannel channel;\n    private final SSLSocketChannelInput request;\n    private final SSLSocketChannelOutput response;\n\n    public SSLSocketChannelCommunicationsSession(final SSLSocketChannel channel) {\n        super();\n        request = new SSLSocketChannelInput(channel);\n        response = new SSLSocketChannelOutput(channel);\n        this.channel = channel;\n    }\n\n    @Override\n    public SSLSocketChannelInput getInput() {\n        return request;\n    }\n\n    @Override\n    public SSLSocketChannelOutput getOutput() {\n        return response;\n    }\n\n    @Override\n    public void setTimeout(final int millis) throws IOException {\n        channel.setTimeout(millis);\n    }\n\n    @Override\n    public int getTimeout() throws IOException {\n        return channel.getTimeout();\n    }\n\n    @Override\n    public void close() throws IOException {\n        IOException suppressed = null;\n\n        try {\n            request.consume();\n        } catch (final IOException ioe) {\n            suppressed = ioe;\n        }\n\n        try {\n            channel.close();\n        } catch (final IOException ioe) {\n            if (suppressed != null) {\n                ioe.addSuppressed(suppressed);\n            }\n\n            throw ioe;\n        }\n\n        if (suppressed != null) {\n            throw suppressed;\n        }\n    }\n\n    @Override\n    public boolean isClosed() {\n        return channel.isClosed();\n    }\n\n    @Override\n    public boolean isDataAvailable() {\n        try {\n            return request.isDataAvailable();\n        } catch (final Exception e) {\n            return false;\n        }\n    }\n\n    @Override\n    public long getBytesWritten() {\n        return response.getBytesWritten();\n    }\n\n    @Override\n    public long getBytesRead() {\n        return request.getBytesRead();\n    }\n\n    @Override\n    public void interrupt() {\n        channel.interrupt();\n    }\n\n    @Override\n    public String toString() {\n        return super.toString() + \"[SSLSocketChannel=\" + channel + \"]\";\n    }\n}<fim_middle>// class below has no smell\n"}