{"text": "<fim_prefix>/*\n * Copyright (C) 2010-2101 Alibaba Group Holding Limited.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.alibaba.otter.shared.etl.model;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport com.alibaba.otter.shared.common.model.config.channel.ChannelParameter.SyncConsistency;\nimport com.alibaba.otter.shared.common.model.config.channel.ChannelParameter.SyncMode;\nimport com.alibaba.otter.shared.common.utils.OtterToStringStyle;\n/**\n * \u6bcf\u6761\u53d8\u66f4\u6570\u636e.\n * \n * @author xiaoqing.zhouxq 2011-8-9 \u4e0b\u534803:42:20\n */\npublic class EventData implements ObjectData, Serializable {\n    private static final long serialVersionUID = -7071677425383765372L;\n    /**\n     * otter\u5185\u90e8\u7ef4\u62a4\u7684\u4e00\u5957tableId\uff0c\u4e0emanager\u4e2d\u5f97\u5230\u7684table Id\u5bf9\u5e94\n     */\n    private long              tableId          = -1;\n    private String            tableName;\n    private String            schemaName;\n    /**\n     * \u53d8\u66f4\u6570\u636e\u7684\u4e1a\u52a1\u7c7b\u578b(I/U/D/C/A/E),\u4e0ecanal\u4e2d\u7684EntryProtocol\u4e2d\u5b9a\u4e49\u7684EventType\u4e00\u81f4.\n     */\n    private EventType         eventType;\n    /**\n     * \u53d8\u66f4\u6570\u636e\u7684\u4e1a\u52a1\u65f6\u95f4.\n     */\n    private long              executeTime;\n    /**\n     * \u53d8\u66f4\u524d\u7684\u4e3b\u952e\u503c,\u5982\u679c\u662finsert/delete\u53d8\u66f4\u524d\u548c\u53d8\u66f4\u540e\u7684\u4e3b\u952e\u503c\u662f\u4e00\u6837\u7684.\n     */\n    private List<EventColumn> oldKeys          = new ArrayList<EventColumn>();\n    /**\n     * \u53d8\u66f4\u540e\u7684\u4e3b\u952e\u503c,\u5982\u679c\u662finsert/delete\u53d8\u66f4\u524d\u548c\u53d8\u66f4\u540e\u7684\u4e3b\u952e\u503c\u662f\u4e00\u6837\u7684.\n     */\n    private List<EventColumn> keys             = new ArrayList<EventColumn>();\n    /**\n     * \u975e\u4e3b\u952e\u7684\u5176\u4ed6\u5b57\u6bb5\n     */\n    private List<EventColumn> columns          = new ArrayList<EventColumn>();\n    // ====================== \u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5bf9\u6570\u636e\u7684\u9644\u52a0\u5c5e\u6027 =============================\n    /**\n     * \u9884\u8ba1\u7684size\u5927\u5c0f\uff0c\u57fa\u4e8ebinlog event\u7684\u63a8\u7b97\n     */\n    private long              size             = 1024;\n    /**\n     * \u540c\u6b65\u6620\u5c04\u5173\u7cfb\u7684id\n     */\n    private long              pairId           = -1;\n    /**\n     * \u5f53eventType =\n     * CREATE/ALTER/ERASE\u65f6\uff0c\u5c31\u662f\u5bf9\u5e94\u7684sql\u8bed\u53e5\uff0c\u5176\u4ed6\u60c5\u51b5\u4e3a\u52a8\u6001\u751f\u6210\u7684INSERT/UPDATE/DELETE sql\n     */\n    private String            sql;\n    /**\n     * ddl/query\u7684schemaName\uff0c\u4f1a\u5b58\u5728\u8de8\u5e93ddl\uff0c\u9700\u8981\u4fdd\u7559\u6267\u884cddl\u7684\u5f53\u524dschemaName\n     */\n    private String            ddlSchemaName;\n    /**\n     * \u81ea\u5b9a\u4e49\u7684\u540c\u6b65\u6a21\u5f0f, \u5141\u8bb8\u8986\u76d6\u9ed8\u8ba4\u7684pipeline parameter\uff0c\u6bd4\u5982\u9488\u5bf9\u8865\u6551\u6570\u636e\u540c\u6b65\n     */\n    private SyncMode          syncMode;\n    /**\n     * \u81ea\u5b9a\u4e49\u7684\u540c\u6b65\u4e00\u81f4\u6027\uff0c\u5141\u8bb8\u8986\u76d6\u9ed8\u8ba4\u7684pipeline parameter\uff0c\u6bd4\u5982\u9488\u5bf9\u5b57\u6bb5\u7ec4\u5f3a\u5236\u53cd\u67e5\u6570\u636e\u5e93\n     */\n    private SyncConsistency   syncConsistency;\n    /**\n     * \u662f\u5426\u4e3aremedy\u8865\u6551\u6570\u636e\uff0c\u6bd4\u5982\u56de\u73af\u8865\u6551\u81ea\u52a8\u4ea7\u751f\u7684\u6570\u636e\uff0c\u6216\u8005\u662ffreedom\u4ea7\u751f\u7684\u624b\u5de5\u8ba2\u6b63\u6570\u636e\n     */\n    private boolean           remedy           = false;\n    /**\n     * \u751f\u6210\u5bf9\u5e94\u7684hint\u5185\u5bb9\n     */\n    private String            hint;\n    /**\n     * \u751f\u6210sql\u662f\u5426\u5ffd\u7565schema,\u6bd4\u5982\u9488\u5bf9tddl/drds,\u9700\u8981\u5ffd\u7565schema\n     */\n    private boolean           withoutSchema    = false;\n    public long getTableId() {\n        return tableId;\n    }\n    public void setTableId(long tableId) {\n        this.tableId = tableId;\n    }\n    public String getTableName() {\n        return tableName;\n    }\n    public void setTableName(String tableName) {\n        this.tableName = tableName;\n    }\n    public String getSchemaName() {\n        return schemaName;\n    }\n    public void setSchemaName(String schemaName) {\n        this.schemaName = schemaName;\n    }\n    public EventType getEventType() {\n        return eventType;\n    }\n    public void setEventType(EventType eventType) {\n        this.eventType = eventType;\n    }\n    public String getSql() {\n        return sql;\n    }\n    public void setSql(String sql) {\n        this.sql = sql;\n    }\n    public long getExecuteTime() {\n        return executeTime;\n    }\n    public void setExecuteTime(long executeTime) {\n        this.executeTime = executeTime;\n    }\n    public List<EventColumn> getKeys() {\n        return keys;\n    }\n    public void setKeys(List<EventColumn> keys) {\n        this.keys = keys;\n    }\n    public List<EventColumn> getColumns() {\n        return columns;\n    }\n    public void setColumns(List<EventColumn> columns) {\n        this.columns = columns;\n    }\n    public long getPairId() {\n        return pairId;\n    }\n    public void setPairId(long pairId) {\n        this.pairId = pairId;\n    }\n    public List<EventColumn> getOldKeys() {\n        return oldKeys;\n    }\n    public void setOldKeys(List<EventColumn> oldKeys) {\n        this.oldKeys = oldKeys;\n    }\n    public SyncMode getSyncMode() {\n        return syncMode;\n    }\n    public void setSyncMode(SyncMode syncMode) {\n        this.syncMode = syncMode;\n    }\n    public SyncConsistency getSyncConsistency() {\n        return syncConsistency;\n    }\n    public void setSyncConsistency(SyncConsistency syncConsistency) {\n        this.syncConsistency = syncConsistency;\n    }\n    public long getSize() {\n        return size;\n    }\n    public void setSize(long size) {\n        this.size = size;\n    }\n    public String getDdlSchemaName() {\n        return ddlSchemaName;\n    }\n<fim_suffix>    public void setDdlSchemaName(String ddlSchemaName) {\n        this.ddlSchemaName = ddlSchemaName;\n    }\n    public boolean isRemedy() {\n        return remedy;\n    }\n    public void setRemedy(boolean remedy) {\n        this.remedy = remedy;\n    }\n    public String getHint() {\n        return hint;\n    }\n    public void setHint(String hint) {\n        this.hint = hint;\n    }\n    public boolean isWithoutSchema() {\n        return withoutSchema;\n    }\n    public void setWithoutSchema(boolean withoutSchema) {\n        this.withoutSchema = withoutSchema;\n    }\n    // ======================== helper method =================\n    /**\n     * \u8fd4\u56de\u6240\u6709\u5f85\u53d8\u66f4\u7684\u5b57\u6bb5\n     */\n    public List<EventColumn> getUpdatedColumns() {\n        List<EventColumn> columns = new ArrayList<EventColumn>();\n        for (EventColumn column : this.columns) {\n            if (column.isUpdate()) {\n                columns.add(column);\n            }\n        }\n        return columns;\n    }\n    /**\n     * \u8fd4\u56de\u6240\u6709\u53d8\u66f4\u7684\u4e3b\u952e\u5b57\u6bb5\n     */\n    public List<EventColumn> getUpdatedKeys() {\n        List<EventColumn> columns = new ArrayList<EventColumn>();\n        for (EventColumn column : this.keys) {\n            if (column.isUpdate()) {\n                columns.add(column);\n            }\n        }\n        return columns;\n    }\n    private List<EventColumn> cloneColumn(List<EventColumn> columns) {\n        if (columns == null) {\n            return null;\n        }\n        List<EventColumn> cloneColumns = new ArrayList<EventColumn>();\n        for (EventColumn column : columns) {\n            cloneColumns.add(column.clone());\n        }\n        return cloneColumns;\n    }\n    public EventData clone() {\n        EventData data = new EventData();\n        data.setTableId(tableId);\n        data.setTableName(tableName);\n        data.setSchemaName(schemaName);\n        data.setDdlSchemaName(ddlSchemaName);\n        data.setEventType(eventType);\n        data.setExecuteTime(executeTime);\n        data.setKeys(cloneColumn(keys));\n        data.setColumns(cloneColumn(columns));\n        data.setOldKeys(cloneColumn(oldKeys));\n        data.setSize(size);\n        data.setPairId(pairId);\n        data.setSql(sql);\n        data.setSyncMode(syncMode);\n        data.setSyncConsistency(syncConsistency);\n        data.setRemedy(remedy);\n        data.setHint(hint);\n        data.setWithoutSchema(withoutSchema);\n        return data;\n    }\n    public String toString() {\n        return ToStringBuilder.reflectionToString(this, OtterToStringStyle.DEFAULT_STYLE);\n    }\n    @Override<fim_middle>// function below has no smell\n"}