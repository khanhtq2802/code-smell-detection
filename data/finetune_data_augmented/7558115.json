{"text": "<fim_prefix>/*\n * Copyright 2014-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.restdocs.operation;\n\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\n\n/**\n * A factory for creating {@link OperationResponse OperationResponses}.\n *\n * @author Andy Wilkinson\n */\npublic class OperationResponseFactory {\n\n\t/**\n\t * Creates a new {@link OperationResponse}. If the response has any content, the given\n\t * {@code headers} will be augmented to ensure that they include a\n\t * {@code Content-Length} header.\n\t * @param status the status of the response\n\t * @param headers the request's headers\n\t * @param content the content of the request\n\t * @return the {@code OperationResponse}\n\t */\n<fim_suffix>\tpublic OperationResponse create(HttpStatus status, HttpHeaders headers,\n\t\t\tbyte[] content) {\n\t\treturn new StandardOperationResponse(status, augmentHeaders(headers, content),\n\t\t\t\tcontent);\n\t}\n\n\t/**\n\t * Creates a new {@code OperationResponse} based on the given {@code original} but\n\t * with the given {@code newContent}. If the original response had a\n\t * {@code Content-Length} header it will be modified to match the length of the new\n\t * content.\n\t * @param original the original response\n\t * @param newContent the new content\n\t * @return the new response with the new content\n\t */\n\tpublic OperationResponse createFrom(OperationResponse original, byte[] newContent) {\n\t\treturn new StandardOperationResponse(original.getStatus(),\n\t\t\t\tgetUpdatedHeaders(original.getHeaders(), newContent), newContent);\n\t}\n\n\t/**\n\t * Creates a new {@code OperationResponse} based on the given {@code original} but\n\t * with the given {@code newHeaders}.\n\t * @param original the original response\n\t * @param newHeaders the new headers\n\t * @return the new response with the new headers\n\t */\n\tpublic OperationResponse createFrom(OperationResponse original,\n\t\t\tHttpHeaders newHeaders) {\n\t\treturn new StandardOperationResponse(original.getStatus(), newHeaders,\n\t\t\t\toriginal.getContent());\n\t}\n\n\tprivate HttpHeaders augmentHeaders(HttpHeaders originalHeaders, byte[] content) {\n\t\treturn new HttpHeadersHelper(originalHeaders).setContentLengthHeader(content)\n\t\t\t\t.getHeaders();\n\t}\n\n\tprivate HttpHeaders getUpdatedHeaders(HttpHeaders originalHeaders,\n\t\t\tbyte[] updatedContent) {\n\t\treturn new HttpHeadersHelper(originalHeaders)\n\t\t\t\t.updateContentLengthHeaderIfPresent(updatedContent).getHeaders();\n\t}\n\n}<fim_middle>// function below has no smell\n"}