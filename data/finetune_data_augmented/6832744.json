{"text": "<fim_prefix>/*\n * Copyright (C) 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.copybara.git;\n\nimport static com.google.copybara.exception.ValidationException.checkCondition;\n\nimport com.beust.jcommander.IParameterValidator;\nimport com.beust.jcommander.Parameter;\nimport com.beust.jcommander.ParameterException;\nimport com.beust.jcommander.Parameters;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.http.javanet.NetHttpTransport;\nimport com.google.common.annotations.VisibleForTesting;\nimport com.google.common.base.Strings;\nimport com.google.copybara.GeneralOptions;\nimport com.google.copybara.LazyResourceLoader;\nimport com.google.copybara.Option;\nimport com.google.copybara.checks.Checker;\nimport com.google.copybara.exception.RepoException;\nimport com.google.copybara.exception.ValidationException;\nimport com.google.copybara.git.gerritapi.GerritApi;\nimport com.google.copybara.git.gerritapi.GerritApiTransport;\nimport com.google.copybara.git.gerritapi.GerritApiTransportImpl;\nimport com.google.copybara.git.gerritapi.GerritApiTransportWithChecker;\nimport com.google.copybara.util.console.Console;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.regex.Pattern;\nimport javax.annotation.Nullable;\n\n/** Arguments for {@link GerritDestination}. */\n<fim_suffix>@Parameters(separators = \"=\")\npublic class GerritOptions implements Option {\n\n  private static final Pattern CHANGE_ID_PATTERN = Pattern.compile(\"I[0-9a-f]{40}\");\n  protected final GeneralOptions generalOptions;\n  protected GitOptions gitOptions;\n\n  public GerritOptions(GeneralOptions generalOptions, GitOptions gitOptions) {\n    this.generalOptions = generalOptions;\n    this.gitOptions = gitOptions;\n  }\n\n  /** Validate that the argument is a valid Gerrit Change-id */\n  public static final class ChangeIdValidator implements IParameterValidator {\n\n    @Override\n    public void validate(String name, String value) throws ParameterException {\n      if (!Strings.isNullOrEmpty(value) && !CHANGE_ID_PATTERN.matcher(value).matches()) {\n        throw new ParameterException(\n            String.format(\"%s value '%s' does not match Gerrit Change ID pattern: %s\",\n                name, value, CHANGE_ID_PATTERN.pattern()));\n      }\n    }\n  }\n\n  @Parameter(names = \"--gerrit-change-id\",\n      description = \"ChangeId to use in the generated commit message. Use this flag if you want \"\n          + \"to reuse the same Gerrit review for an export.\",\n      validateWith = ChangeIdValidator.class)\n  protected String gerritChangeId = \"\";\n\n  @Parameter(names = \"--gerrit-new-change\",\n      description = \"Create a new change instead of trying to reuse an existing one.\")\n  protected boolean newChange = false;\n\n  @Parameter(names = \"--gerrit-topic\", description = \"Gerrit topic to use\")\n  protected String gerritTopic = \"\";\n\n  @Parameter(names = \"--nogerrit-rev-id-label\", description = \"DEPRECATED. Use workflow set_rev_id\"\n      + \" field instead.\", hidden = true)\n  @Deprecated\n  protected boolean noRevIdDEPRECATED = false;\n\n  /**\n   * Returns a lazy supplier of {@link GerritApi}.\n   */\n  public LazyResourceLoader<GerritApi> newGerritApiSupplier(String url, @Nullable Checker checker) {\n    return (console) ->\n        checker == null ? newGerritApi(url) : newGerritApi(url, checker, console);\n  }\n\n  /**\n   * Override this method in a class for a specific Gerrit implementation.\n   */\n  @VisibleForTesting\n  public GerritApi newGerritApi(String url) throws RepoException, ValidationException {\n    return new GerritApi(newGerritApiTransport(hostUrl(url)),\n                         generalOptions.profiler());\n  }\n\n  /**\n   * Creates a new {@link GerritApi} enforcing the given {@link Checker}.\n   */\n  public GerritApi newGerritApi(String url, Checker checker, Console console)\n      throws ValidationException, RepoException {\n    return new GerritApi(newGerritApiTransport(hostUrl(url), checker, console),\n        generalOptions.profiler());\n  }\n\n  /**\n   * Return the url removing the path part, since the API needs the host.\n   */\n  private static URI hostUrl(String url) throws ValidationException {\n    URI result = asUri(url);\n    try {\n      checkCondition(result.getHost() != null, \"Wrong url: %s\", url);\n      checkCondition(result.getScheme() != null, \"Wrong url: %s\", url);\n      return new URI(result.getScheme(), result.getUserInfo(), result.getHost(), result.getPort(),\n                     /*path=*/null, /*query=*/null, /*fragment=*/null);\n    } catch (URISyntaxException e) {\n      // Shouldn't happen\n      throw new IllegalStateException(e);\n    }\n  }\n\n  private static URI asUri(String url) throws ValidationException {\n    try {\n      return URI.create(url);\n    } catch (IllegalArgumentException e) {\n      throw new ValidationException(\"Invalid URL \" + url);\n    }\n  }\n\n  /**\n   * Given a repo url, return the project part.\n   *\n   * <p>Not static on prupose, since we might introduce different behavior based on\n   * other flags in the future.\n   */\n  @SuppressWarnings(\"MethodMayBeStatic\")\n  public String getProject(String url) throws ValidationException {\n    String file = asUri(url).getPath();\n    if (file.startsWith(\"/\")) {\n      file = file.substring(1);\n    }\n    if (file.endsWith(\"/\")) {\n      file = file.substring(0, file.length() - 1);\n    }\n    return file.replaceAll(\"[ \\\"'&]\", \"\");\n  }\n\n  /**\n   * Create a Gerrit http transport for a URI.\n   */\n  protected GerritApiTransport newGerritApiTransport(URI uri)\n      throws RepoException, ValidationException {\n    return new GerritApiTransportImpl(getCredentialsRepo(), uri, getHttpTransport());\n  }\n\n  /**\n   * Create a Gerrit http transport for a URI and {@link Checker}.\n   */\n  protected GerritApiTransport newGerritApiTransport(URI uri, Checker checker, Console console)\n      throws RepoException, ValidationException {\n    return new GerritApiTransportWithChecker(newGerritApiTransport(uri), checker, console);\n  }\n\n  @VisibleForTesting\n  protected GitRepository getCredentialsRepo() throws RepoException {\n    return gitOptions.cachedBareRepoForUrl(\"just_for_github_api\");\n  }\n\n  @VisibleForTesting\n  protected HttpTransport getHttpTransport() {\n    return new NetHttpTransport();\n  }\n\n\n  /** Validate if a {@link Checker} is valid to use with a Gerrit endpoint for repoUrl. */\n  public void validateEndpointChecker(@Nullable Checker checker, String repoUrl)\n      throws ValidationException {\n    // Accept any by default\n  }\n}<fim_middle>// class below has no smell\n"}