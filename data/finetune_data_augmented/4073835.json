{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.bookkeeper.server.http.service;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.bookkeeper.bookie.Journal;\nimport org.apache.bookkeeper.bookie.LedgerDirsManager;\nimport org.apache.bookkeeper.bookie.LogMark;\nimport org.apache.bookkeeper.common.util.JsonUtil;\nimport org.apache.bookkeeper.conf.ServerConfiguration;\nimport org.apache.bookkeeper.http.HttpServer;\nimport org.apache.bookkeeper.http.service.HttpEndpointService;\nimport org.apache.bookkeeper.http.service.HttpServiceRequest;\nimport org.apache.bookkeeper.http.service.HttpServiceResponse;\nimport org.apache.bookkeeper.util.DiskChecker;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * HttpEndpointService that handle Bookkeeper get last log mark related http request.\n * The GET method will get the last log position of each journal.\n *\n * <p>output would be like this:\n *  {\n *    \"&lt;Journal_id&gt;\" : \"&lt;Pos&gt;\",\n *    ...\n *  }\n */\npublic class GetLastLogMarkService implements HttpEndpointService {\n\n    static final Logger LOG = LoggerFactory.getLogger(GetLastLogMarkService.class);\n\n    protected ServerConfiguration conf;\n\n<fim_suffix>    public GetLastLogMarkService(ServerConfiguration conf) {\n        checkNotNull(conf);\n        this.conf = conf;\n    }\n\n    @Override\n    public HttpServiceResponse handle(HttpServiceRequest request) throws Exception {\n        HttpServiceResponse response = new HttpServiceResponse();\n\n        if (HttpServer.Method.GET == request.getMethod()) {\n            try {\n                /**\n                 * output:\n                 *  {\n                 *    \"&lt;Journal_id&gt;\" : \"&lt;Pos&gt;\",\n                 *    ...\n                 *  }\n                 */\n                Map<String, String> output = Maps.newHashMap();\n\n                List<Journal> journals = Lists.newArrayListWithCapacity(conf.getJournalDirs().length);\n                int idx = 0;\n                for (File journalDir : conf.getJournalDirs()) {\n                    journals.add(new Journal(idx++, journalDir, conf, new LedgerDirsManager(conf, conf.getLedgerDirs(),\n                      new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()))));\n                }\n                for (Journal journal : journals) {\n                    LogMark lastLogMark = journal.getLastLogMark().getCurMark();\n                    LOG.debug(\"LastLogMark: Journal Id - \" + lastLogMark.getLogFileId() + \"(\"\n                      + Long.toHexString(lastLogMark.getLogFileId()) + \".txn), Pos - \"\n                      + lastLogMark.getLogFileOffset());\n                    output.put(\"LastLogMark: Journal Id - \" + lastLogMark.getLogFileId()\n                        + \"(\" + Long.toHexString(lastLogMark.getLogFileId()) + \".txn)\",\n                        \"Pos - \" + lastLogMark.getLogFileOffset());\n                }\n\n                String jsonResponse = JsonUtil.toJson(output);\n                LOG.debug(\"output body:\" + jsonResponse);\n                response.setBody(jsonResponse);\n                response.setCode(HttpServer.StatusCode.OK);\n                return response;\n            } catch (Exception e) {\n                LOG.error(\"Exception occurred while getting last log mark\", e);\n                response.setCode(HttpServer.StatusCode.NOT_FOUND);\n                response.setBody(\"ERROR handling request: \" + e.getMessage());\n                return response;\n            }\n        } else {\n            response.setCode(HttpServer.StatusCode.NOT_FOUND);\n            response.setBody(\"Not found method. Should be GET method\");\n            return response;\n        }\n    }\n}<fim_middle>// function below has no smell\n"}