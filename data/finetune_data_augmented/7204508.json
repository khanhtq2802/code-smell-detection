{"text": "<fim_prefix>/**\n * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.\n */\npackage com.oracle.bmc.waas.internal.http;\n\nimport com.oracle.bmc.waas.model.*;\nimport com.oracle.bmc.waas.requests.*;\nimport com.oracle.bmc.waas.responses.*;\nimport org.apache.commons.lang3.Validate;\n\n@javax.annotation.Generated(value = \"OracleSDKGenerator\", comments = \"API Version: 20181116\")\n@lombok.extern.slf4j.Slf4j\npublic class UpdateWaasPolicyConverter {\n    private static final com.oracle.bmc.http.internal.ResponseConversionFunctionFactory\n            RESPONSE_CONVERSION_FACTORY =\n                    new com.oracle.bmc.http.internal.ResponseConversionFunctionFactory();\n\n<fim_suffix>    public static UpdateWaasPolicyRequest interceptRequest(UpdateWaasPolicyRequest request) {\n\n        return request;\n    }\n\n    public static com.oracle.bmc.http.internal.WrappedInvocationBuilder fromRequest(\n            com.oracle.bmc.http.internal.RestClient client, UpdateWaasPolicyRequest request) {\n        Validate.notNull(request, \"request instance is required\");\n        Validate.notBlank(request.getWaasPolicyId(), \"waasPolicyId must not be blank\");\n        Validate.notNull(\n                request.getUpdateWaasPolicyDetails(), \"updateWaasPolicyDetails is required\");\n\n        com.oracle.bmc.http.internal.WrappedWebTarget target =\n                client.getBaseTarget()\n                        .path(\"/20181116\")\n                        .path(\"waasPolicies\")\n                        .path(\n                                com.oracle.bmc.util.internal.HttpUtils.encodePathSegment(\n                                        request.getWaasPolicyId()));\n\n        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib = target.request();\n\n        ib.accept(javax.ws.rs.core.MediaType.APPLICATION_JSON);\n\n        if (request.getOpcRequestId() != null) {\n            ib.header(\"opc-request-id\", request.getOpcRequestId());\n        }\n\n        if (request.getOpcRetryToken() != null) {\n            ib.header(\"opc-retry-token\", request.getOpcRetryToken());\n        }\n\n        if (request.getIfMatch() != null) {\n            ib.header(\"if-match\", request.getIfMatch());\n        }\n\n        return ib;\n    }\n\n    public static com.google.common.base.Function<\n                    javax.ws.rs.core.Response, UpdateWaasPolicyResponse>\n            fromResponse() {\n        final com.google.common.base.Function<javax.ws.rs.core.Response, UpdateWaasPolicyResponse>\n                transformer =\n                        new com.google.common.base.Function<\n                                javax.ws.rs.core.Response, UpdateWaasPolicyResponse>() {\n                            @Override\n                            public UpdateWaasPolicyResponse apply(\n                                    javax.ws.rs.core.Response rawResponse) {\n                                LOG.trace(\n                                        \"Transform function invoked for UpdateWaasPolicyResponse\");\n                                com.google.common.base.Function<\n                                                javax.ws.rs.core.Response,\n                                                com.oracle.bmc.http.internal.WithHeaders<Void>>\n                                        responseFn = RESPONSE_CONVERSION_FACTORY.create();\n\n                                com.oracle.bmc.http.internal.WithHeaders<Void> response =\n                                        responseFn.apply(rawResponse);\n                                javax.ws.rs.core.MultivaluedMap<String, String> headers =\n                                        response.getHeaders();\n\n                                UpdateWaasPolicyResponse.Builder builder =\n                                        UpdateWaasPolicyResponse.builder();\n\n                                com.google.common.base.Optional<java.util.List<String>>\n                                        opcRequestIdHeader =\n                                                com.oracle.bmc.http.internal.HeaderUtils.get(\n                                                        headers, \"opc-request-id\");\n                                if (opcRequestIdHeader.isPresent()) {\n                                    builder.opcRequestId(\n                                            com.oracle.bmc.http.internal.HeaderUtils.toValue(\n                                                    \"opc-request-id\",\n                                                    opcRequestIdHeader.get().get(0),\n                                                    String.class));\n                                }\n\n                                com.google.common.base.Optional<java.util.List<String>> etagHeader =\n                                        com.oracle.bmc.http.internal.HeaderUtils.get(\n                                                headers, \"etag\");\n                                if (etagHeader.isPresent()) {\n                                    builder.etag(\n                                            com.oracle.bmc.http.internal.HeaderUtils.toValue(\n                                                    \"etag\", etagHeader.get().get(0), String.class));\n                                }\n\n                                com.google.common.base.Optional<java.util.List<String>>\n                                        opcWorkRequestIdHeader =\n                                                com.oracle.bmc.http.internal.HeaderUtils.get(\n                                                        headers, \"opc-work-request-id\");\n                                if (opcWorkRequestIdHeader.isPresent()) {\n                                    builder.opcWorkRequestId(\n                                            com.oracle.bmc.http.internal.HeaderUtils.toValue(\n                                                    \"opc-work-request-id\",\n                                                    opcWorkRequestIdHeader.get().get(0),\n                                                    String.class));\n                                }\n\n                                UpdateWaasPolicyResponse responseWrapper = builder.build();\n\n                                return responseWrapper;\n                            }\n                        };\n        return transformer;\n    }\n}<fim_middle>// function below has no smell\n"}