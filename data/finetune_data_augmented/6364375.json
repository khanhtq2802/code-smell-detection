{"text": "<fim_prefix>/*\n * Copyright (c) 2017 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * You may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.eclipse.microprofile.opentracing.tck.application;\n\nimport javax.enterprise.context.ApplicationScoped;\n\nimport org.eclipse.microprofile.opentracing.Traced;\n\n/**\n * Injectable class with the Traced annotation.\n */\n<fim_suffix>@ApplicationScoped\n@Traced\npublic class TestAnnotatedClass {\n\n    /**\n     * Method that we expect to be Traced implicitly.\n     */\n    public void annotatedClassMethodImplicitlyTraced() {\n        System.out.println(\"Called annotatedClassMethodImplicitlyTraced\");\n    }\n\n    /**\n     * Method that we expect to not be Traced.\n     */\n    @Traced(value = false)\n    public void annotatedClassMethodExplicitlyNotTraced() {\n        System.out.println(\"Called annotatedClassMethodExplicitlyNotTraced\");\n    }\n\n    /**\n     * Method that we expect to be Traced explicitly.\n     */\n    @Traced(operationName = \"explicitOperationName1\")\n    public void annotatedClassMethodExplicitlyTraced() {\n        System.out.println(\"Called annotatedClassMethodExplicitlyTraced\");\n    }\n\n    /**\n     * Method that we expect to not be Traced.\n     */\n    @Traced(operationName = \"disabledOperationName\", value = false)\n    public void annotatedClassMethodExplicitlyNotTracedWithOpName() {\n        System.out.println(\"Called annotatedClassMethodExplicitlyNotTracedWithOpName\");\n    }\n\n    /**\n     * Method that we expect to be Traced implicitly and throws an exception.\n     */\n    public void annotatedClassMethodImplicitlyTracedWithException() {\n        System.out.println(\"Called annotatedClassMethodImplicitlyTracedWithException\");\n        throw ApplicationUtils.createExampleRuntimeException();\n    }\n}<fim_middle>// class below has no smell\n"}