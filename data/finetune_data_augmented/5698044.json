{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage com.opensymphony.xwork2.ognl.accessor;\n\nimport com.opensymphony.xwork2.ObjectFactory;\nimport com.opensymphony.xwork2.conversion.ObjectTypeDeterminer;\nimport com.opensymphony.xwork2.conversion.impl.XWorkConverter;\nimport com.opensymphony.xwork2.inject.Inject;\nimport com.opensymphony.xwork2.util.reflection.ReflectionContextState;\nimport ognl.MapPropertyAccessor;\nimport ognl.OgnlException;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\nimport java.util.Map;\n\n/**\n * Implementation of PropertyAccessor that sets and gets properties by storing and looking\n * up values in Maps.\n *\n * @author Gabriel Zimmerman\n */\npublic class XWorkMapPropertyAccessor extends MapPropertyAccessor {\n\n    private static final Logger LOG = LogManager.getLogger(XWorkMapPropertyAccessor.class);\n\n    private static final String[] INDEX_ACCESS_PROPS = new String[]{\"size\", \"isEmpty\", \"keys\", \"values\"};\n    \n    private XWorkConverter xworkConverter;\n    private ObjectFactory objectFactory;\n    private ObjectTypeDeterminer objectTypeDeterminer;\n    \n    @Inject\n    public void setXWorkConverter(XWorkConverter conv) {\n        this.xworkConverter = conv;\n    }\n    \n    @Inject\n    public void setObjectFactory(ObjectFactory fac) {\n        this.objectFactory = fac;\n    }\n    \n    @Inject\n    public void setObjectTypeDeterminer(ObjectTypeDeterminer ot) {\n        this.objectTypeDeterminer = ot;\n    }\n\n    @Override\n    public Object getProperty(Map context, Object target, Object name) throws OgnlException {\n        LOG.trace(\"Entering getProperty ({},{},{})\", context, target, name);\n\n        ReflectionContextState.updateCurrentPropertyPath(context, name);\n        // if this is one of the regular index access\n        // properties then just let the superclass deal with the\n        // get.\n        if (name instanceof String && contains(INDEX_ACCESS_PROPS, (String) name)) {\n            return super.getProperty(context, target, name);\n        }\n\n        Object result = null;\n\n        try{\n            result = super.getProperty(context, target, name);\n        } catch (ClassCastException ex) {\n        }\n\n        if (result == null) {\n            //find the key class and convert the name to that class\n            Class lastClass = (Class) context.get(XWorkConverter.LAST_BEAN_CLASS_ACCESSED);\n\n            String lastProperty = (String) context.get(XWorkConverter.LAST_BEAN_PROPERTY_ACCESSED);\n            if (lastClass == null || lastProperty == null) {\n                return null;\n            }\n            Object key = getKey(context, name);\n            Map map = (Map) target;\n            result = map.get(key);\n\n            if (result == null &&\n                    Boolean.TRUE.equals(context.get(ReflectionContextState.CREATE_NULL_OBJECTS))\n                    &&  objectTypeDeterminer.shouldCreateIfNew(lastClass,lastProperty,target,null,false)) {\n                Class valueClass = objectTypeDeterminer.getElementClass(lastClass, lastProperty, key);\n\n                try {\n                    result = objectFactory.buildBean(valueClass, context);\n                    map.put(key, result);\n                } catch (Exception exc) {\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @param array\n     * @param name\n     */\n    private boolean contains(String[] array, String name) {\n        for (String anArray : array) {\n            if (anArray.equals(name)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    @Override\n    public void setProperty(Map context, Object target, Object name, Object value) throws OgnlException {\n        LOG.trace(\"Entering setProperty({},{},{},{})\", context, target, name, value);\n\n        Object key = getKey(context, name);\n        Map map = (Map) target;\n        map.put(key, getValue(context, value));\n     }\n\n<fim_suffix>    private Object getValue(Map context, Object value) {\n         Class lastClass = (Class) context.get(XWorkConverter.LAST_BEAN_CLASS_ACCESSED);\n         String lastProperty = (String) context.get(XWorkConverter.LAST_BEAN_PROPERTY_ACCESSED);\n         if (lastClass == null || lastProperty == null) {\n             return value;\n         }\n         Class elementClass = objectTypeDeterminer.getElementClass(lastClass, lastProperty, null);\n         if (elementClass == null) {\n             return value; // nothing is specified, we assume it will be the value passed in.\n         }\n         return xworkConverter.convertValue(context, value, elementClass);\n    }\n\n    private Object getKey(Map context, Object name) {\n        Class lastClass = (Class) context.get(XWorkConverter.LAST_BEAN_CLASS_ACCESSED);\n        String lastProperty = (String) context.get(XWorkConverter.LAST_BEAN_PROPERTY_ACCESSED);\n        if (lastClass == null || lastProperty == null) {\n            // return java.lang.String.class;\n            // commented out the above -- it makes absolutely no sense for when setting basic maps!\n            return name;\n        }\n        Class keyClass = objectTypeDeterminer.getKeyClass(lastClass, lastProperty);\n        if (keyClass == null) {\n            keyClass = java.lang.String.class;\n        }\n\n        return xworkConverter.convertValue(context, name, keyClass);\n    }\n}\n<fim_middle>// function below has no smell\n"}