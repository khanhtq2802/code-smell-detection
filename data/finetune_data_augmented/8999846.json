{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.solr.analytics.value;\n\nimport java.util.function.Consumer;\nimport java.util.function.DoubleConsumer;\n\nimport org.apache.solr.analytics.facet.compare.ExpressionComparator;\nimport org.apache.solr.analytics.value.constant.ConstantDoubleValue;\n\n/**\n * A single-valued analytics value that can be represented as a date.\n * <p>\n * The back-end production of the value can change inbetween calls to {@link #getDouble()} and {@link #exists()},\n * resulting in different values on each call.\n */\npublic interface DoubleValue extends DoubleValueStream, AnalyticsValue {\n  /**\n   * Get the double representation of the current value.\n   * <p>\n   * NOTE: The value returned is not valid unless calling {@link #exists()} afterwards returns {@code TRUE}.\n   * \n   * @return the current value\n   */\n  double getDouble();\n\n  /**\n   * An interface that represents all of the types a {@link DoubleValue} should be able to cast to. \n   */\n  public static interface CastingDoubleValue extends DoubleValue, StringValue, ComparableValue {}\n  \n\n  /**\n   * An abstract base for {@link CastingDoubleValue} that automatically casts to all types if {@link #getDouble()} and {@link #exists()} are implemented.\n   */\n  public static abstract class AbstractDoubleValue implements CastingDoubleValue {\n    @Override\n    public String getString() {\n      double val = getDouble();\n      return exists() ? Double.toString(val) : null;\n    }\n    @Override\n    public Object getObject() {\n      double val = getDouble();\n      return exists() ? val : null;\n    }\n    @Override\n    public void streamDoubles(DoubleConsumer cons) {\n      double val = getDouble();\n      if (exists()) {\n        cons.accept(val);\n      }\n    }\n    @Override\n    public void streamStrings(Consumer<String> cons) {\n      String val = getString();\n      if (exists()) {\n        cons.accept(val);\n      }\n    }\n<fim_suffix>    @Override\n    public void streamObjects(Consumer<Object> cons) {\n      Object val = getObject();\n      if (exists()) {\n        cons.accept(val);\n      }\n    }\n    @Override\n    public AnalyticsValue convertToConstant() {\n      if (getExpressionType().equals(ExpressionType.CONST)) {\n        return new ConstantDoubleValue(getDouble());\n      }\n      return this;\n    }\n    @Override\n    public ExpressionComparator<Double> getObjectComparator(String expression) {\n      return new ExpressionComparator<>(expression);\n    }\n  }\n}<fim_middle>// function below has no smell\n"}