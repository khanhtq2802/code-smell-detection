{"text": "<fim_prefix>          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);\n          {\n            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.attributes.size()));\n            for (java.util.Map.Entry<java.nio.ByteBuffer, java.nio.ByteBuffer> _iter422 : struct.attributes.entrySet())\n            {\n              oprot.writeBinary(_iter422.getKey());\n              oprot.writeBinary(_iter422.getValue());\n            }\n            oprot.writeMapEnd();\n          }\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class deleteAll_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n      public deleteAll_argsTupleScheme getScheme() {\n        return new deleteAll_argsTupleScheme();\n      }\n    }\n    private static class deleteAll_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteAll_args> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAll_args struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n        java.util.BitSet optionals = new java.util.BitSet();\n        if (struct.isSetTableName()) {\n          optionals.set(0);\n        }\n        if (struct.isSetRow()) {\n          optionals.set(1);\n        }\n        if (struct.isSetColumn()) {\n          optionals.set(2);\n        }\n        if (struct.isSetAttributes()) {\n          optionals.set(3);\n        }\n        oprot.writeBitSet(optionals, 4);\n        if (struct.isSetTableName()) {\n          oprot.writeBinary(struct.tableName);\n        }\n        if (struct.isSetRow()) {\n          oprot.writeBinary(struct.row);\n        }\n        if (struct.isSetColumn()) {\n          oprot.writeBinary(struct.column);\n        }\n        if (struct.isSetAttributes()) {\n          {\n            oprot.writeI32(struct.attributes.size());\n            for (java.util.Map.Entry<java.nio.ByteBuffer, java.nio.ByteBuffer> _iter423 : struct.attributes.entrySet())\n            {\n              oprot.writeBinary(_iter423.getKey());\n              oprot.writeBinary(_iter423.getValue());\n            }\n          }\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAll_args struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n        java.util.BitSet incoming = iprot.readBitSet(4);\n        if (incoming.get(0)) {\n          struct.tableName = iprot.readBinary();\n          struct.setTableNameIsSet(true);\n        }\n        if (incoming.get(1)) {\n          struct.row = iprot.readBinary();\n          struct.setRowIsSet(true);\n        }\n        if (incoming.get(2)) {\n          struct.column = iprot.readBinary();\n          struct.setColumnIsSet(true);\n        }\n        if (incoming.get(3)) {\n          {\n            org.apache.thrift.protocol.TMap _map424 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());\n            struct.attributes = new java.util.HashMap<java.nio.ByteBuffer,java.nio.ByteBuffer>(2*_map424.size);\n            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _key425;\n            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val426;\n            for (int _i427 = 0; _i427 < _map424.size; ++_i427)\n            {\n              _key425 = iprot.readBinary();\n              _val426 = iprot.readBinary();\n              struct.attributes.put(_key425, _val426);\n            }\n          }\n          struct.setAttributesIsSet(true);\n        }\n      }\n    }\n    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {\n      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();\n    }\n  }\n  public static class deleteAll_result implements org.apache.thrift.TBase<deleteAll_result, deleteAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAll_result>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"deleteAll_result\");\n    private static final org.apache.thrift.protocol.TField IO_FIELD_DESC = new org.apache.thrift.protocol.TField(\"io\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteAll_resultStandardSchemeFactory();\n    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteAll_resultTupleSchemeFactory();\n    public @org.apache.thrift.annotation.Nullable IOError io; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      IO((short)1, \"io\");\n      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n      static {\n        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // IO\n            return IO;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByName(java.lang.String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final java.lang.String _fieldName;\n      _Fields(short thriftId, java.lang.String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public java.lang.String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.IO, new org.apache.thrift.meta_data.FieldMetaData(\"io\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IOError.class)));\n      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAll_result.class, metaDataMap);\n    }\n    public deleteAll_result() {\n    }\n    public deleteAll_result(\n      IOError io)\n    {\n      this();\n      this.io = io;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public deleteAll_result(deleteAll_result other) {\n      if (other.isSetIo()) {\n        this.io = new IOError(other.io);\n      }\n    }\n<fim_suffix>    public deleteAll_result deepCopy() {\n      return new deleteAll_result(this);\n    }<fim_middle>// function below has no smell\n"}