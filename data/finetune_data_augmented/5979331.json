{"text": "<fim_prefix>/*\n * Copyright 2011-2017 Amazon Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at:\n *\n *    http://aws.amazon.com/apache2.0\n *\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.amazonaws.eclipse.core.egit.jobs;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.reflect.InvocationTargetException;\n\nimport org.eclipse.core.resources.IFile;\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.core.resources.IProjectDescription;\nimport org.eclipse.core.resources.IResource;\nimport org.eclipse.core.resources.IWorkspaceRunnable;\nimport org.eclipse.core.resources.ResourcesPlugin;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.core.runtime.IStatus;\nimport org.eclipse.core.runtime.NullProgressMonitor;\nimport org.eclipse.core.runtime.Path;\nimport org.eclipse.core.runtime.Status;\nimport org.eclipse.core.runtime.jobs.Job;\nimport org.eclipse.egit.core.op.ConnectProviderOperation;\nimport org.eclipse.jgit.lib.Constants;\nimport org.eclipse.jgit.lib.Repository;\nimport org.eclipse.m2e.core.MavenPlugin;\nimport org.eclipse.m2e.core.internal.IMavenConstants;\nimport org.eclipse.m2e.core.project.IProjectConfigurationManager;\nimport org.eclipse.m2e.core.project.ResolverConfiguration;\nimport org.eclipse.ui.PlatformUI;\n\nimport com.amazonaws.eclipse.core.AwsToolkitCore;\n\n/**\n * A Job that imports a Git repository to the workbench. If it is Maven structured, import as a Maven project.\n */\n@SuppressWarnings(\"restriction\")\npublic class ImportProjectJob {\n\n    private final String projectName;\n    private final File destinationFile;\n    private final Repository repository;\n\n    public ImportProjectJob(String projectName, File destinationFile) {\n        this.projectName = projectName;\n        this.destinationFile = destinationFile;\n        this.repository = getTargetRepository();\n    }\n\n    public IFile execute(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n        importAsGeneralProject(monitor);\n\n        IProject project = ResourcesPlugin.getWorkspace()\n                .getRoot().getProject(projectName);\n\n        if (pomFileExists(project)) {\n\n            convertToMavenProject(project);\n\n            return project.getFile(IMavenConstants.POM_FILE_NAME);\n        } else {\n            return null;\n        }\n    }\n\n    private void importAsGeneralProject(IProgressMonitor monitor)\n            throws InvocationTargetException {\n        final String[] projectName = new String[1];\n        final boolean[] defaultLocation = new boolean[1];\n        final String[] path = new String[1];\n        final File[] repoDir = new File[1];\n        // get the data from the page in the UI thread\n        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {\n            @Override\n            public void run() {\n                projectName[0] = ImportProjectJob.this.projectName;\n                defaultLocation[0] = true;\n                path[0] = repository.getWorkTree().getPath();\n                repoDir[0] = repository.getDirectory();\n            }\n        });\n        try {\n            IWorkspaceRunnable wsr = new IWorkspaceRunnable() {\n                @Override\n                public void run(IProgressMonitor actMonitor)\n                        throws CoreException {\n                    final IProjectDescription desc = ResourcesPlugin\n                            .getWorkspace().newProjectDescription(\n                                    projectName[0]);\n                    desc.setLocation(new Path(path[0]));\n\n                    IProject prj = ResourcesPlugin.getWorkspace().getRoot()\n                            .getProject(desc.getName());\n                    prj.create(desc, actMonitor);\n                    prj.open(actMonitor);\n                    ConnectProviderOperation cpo = new ConnectProviderOperation(prj, repoDir[0]);\n                    cpo.execute(new NullProgressMonitor());\n\n                    ResourcesPlugin.getWorkspace().getRoot()\n                            .refreshLocal(IResource.DEPTH_ONE, actMonitor);\n                }\n            };\n            ResourcesPlugin.getWorkspace().run(wsr, monitor);\n        } catch (CoreException e) {\n            throw new InvocationTargetException(e);\n        }\n    }\n\n    private Repository getTargetRepository() {\n        try {\n            return org.eclipse.egit.core.Activator\n                    .getDefault()\n                    .getRepositoryCache()\n                    .lookupRepository(\n                            new File(destinationFile, Constants.DOT_GIT));\n        } catch (IOException e) {\n            AwsToolkitCore.getDefault().reportException(\n                    \"Error looking up repository at \"\n                            + destinationFile, e);\n            return null;\n        }\n    }\n\n    private boolean pomFileExists(IProject project) {\n        return project.getFile(IMavenConstants.POM_FILE_NAME).exists();\n    }\n\n<fim_suffix>    private void convertToMavenProject(final IProject project) throws InterruptedException {\n        Job job = new Job(\"Enable Maven nature.\") {\n\n            @Override\n            protected IStatus run(IProgressMonitor monitor) {\n                try {\n                    ResolverConfiguration configuration = new ResolverConfiguration();\n                    configuration.setResolveWorkspaceProjects(true);\n                    configuration.setSelectedProfiles(\"\"); //$NON-NLS-1$\n\n                    final boolean hasMavenNature = project\n                            .hasNature(IMavenConstants.NATURE_ID);\n\n                    IProjectConfigurationManager configurationManager = MavenPlugin\n                            .getProjectConfigurationManager();\n\n                    configurationManager.enableMavenNature(project,\n                            configuration, monitor);\n\n                    if (!hasMavenNature) {\n                        configurationManager.updateProjectConfiguration(\n                                project, monitor);\n                    }\n                } catch (CoreException ex) {\n                    AwsToolkitCore.getDefault().reportException(ex.getMessage(), ex);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        job.schedule();\n        job.join();\n    }\n}<fim_middle>// function below has no smell\n"}