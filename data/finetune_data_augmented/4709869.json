{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ambari.server.controller.jdbc;\n\nimport org.apache.ambari.server.controller.predicate.AlwaysPredicate;\nimport org.apache.ambari.server.controller.predicate.ArrayPredicate;\nimport org.apache.ambari.server.controller.predicate.CategoryPredicate;\nimport org.apache.ambari.server.controller.predicate.ComparisonPredicate;\nimport org.apache.ambari.server.controller.predicate.PredicateVisitor;\nimport org.apache.ambari.server.controller.predicate.UnaryPredicate;\nimport org.apache.ambari.server.controller.spi.Predicate;\nimport org.apache.ambari.server.controller.utilities.PredicateHelper;\nimport org.apache.ambari.server.controller.utilities.PropertyHelper;\n\n/**\n * Predicate visitor used to generate a SQL where clause from a predicate graph.\n */\n<fim_suffix>public class SQLPredicateVisitor implements PredicateVisitor {\n\n  /**\n   * The string builder.\n   */\n  private final StringBuilder stringBuilder = new StringBuilder();\n\n\n  // ----- PredicateVisitor --------------------------------------------------\n\n  @Override\n  public void acceptComparisonPredicate(ComparisonPredicate predicate) {\n    String propertyId = predicate.getPropertyId();\n\n    String propertyCategory = PropertyHelper.getPropertyCategory(propertyId);\n    if (propertyCategory != null) {\n      stringBuilder.append(propertyCategory).append(\".\");\n    }\n    stringBuilder.append(PropertyHelper.getPropertyName(propertyId));\n\n    stringBuilder.append(\" \").append(predicate.getOperator()).append(\" \\\"\");\n    stringBuilder.append(predicate.getValue());\n    stringBuilder.append(\"\\\"\");\n\n  }\n\n  @Override\n  public void acceptArrayPredicate(ArrayPredicate predicate) {\n    Predicate[] predicates = predicate.getPredicates();\n    if (predicates.length > 0) {\n\n      stringBuilder.append(\"(\");\n      for (int i = 0; i < predicates.length; i++) {\n        if (i > 0) {\n          stringBuilder.append(\" \").append(predicate.getOperator()).append(\" \");\n        }\n        PredicateHelper.visit(predicates[i], this);\n      }\n      stringBuilder.append(\")\");\n    }\n  }\n\n  @Override\n  public void acceptUnaryPredicate(UnaryPredicate predicate) {\n    stringBuilder.append(predicate.getOperator()).append(\"(\");\n    PredicateHelper.visit(predicate.getPredicate(), this);\n    stringBuilder.append(\")\");\n  }\n\n  @Override\n  public void acceptAlwaysPredicate(AlwaysPredicate predicate) {\n    stringBuilder.append(\"TRUE\");\n  }\n\n  @Override\n  public void acceptCategoryPredicate(CategoryPredicate predicate) {\n    // Do nothing\n  }\n\n\n  // ----- SQLPredicateVisitor -----------------------------------------------\n\n  public String getSQL() {\n    return stringBuilder.toString();\n  }\n}<fim_middle>// class below has no smell\n"}