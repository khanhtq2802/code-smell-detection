{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.openejb.config;\nimport org.apache.openejb.OpenEJBException;\nimport org.apache.openejb.jee.Connector;\nimport org.apache.openejb.jee.EjbJar;\nimport org.apache.openejb.jee.JAXBContextFactory;\nimport org.apache.openejb.jee.jpa.EntityMappings;\nimport org.apache.openejb.jee.jpa.JpaJaxbUtil;\nimport org.apache.openejb.jee.jpa.unit.Persistence;\nimport org.apache.openejb.jee.jpa.unit.PersistenceUnit;\nimport org.apache.openejb.jee.oejb2.GeronimoEjbJarType;\nimport org.apache.openejb.jee.oejb2.JaxbOpenejbJar2;\nimport org.apache.openejb.jee.oejb3.JaxbOpenejbJar3;\nimport org.apache.openejb.jee.oejb3.OpenejbJar;\nimport org.apache.openejb.loader.IO;\nimport org.apache.openejb.loader.Options;\nimport org.apache.openejb.loader.SystemInstance;\nimport org.apache.openejb.sxc.EjbJarXml;\nimport org.apache.openejb.util.LogCategory;\nimport org.apache.openejb.util.Logger;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Random;\npublic class OutputGeneratedDescriptors implements DynamicDeployer {\n    private static final Logger logger = Logger.getInstance(LogCategory.OPENEJB_STARTUP_CONFIG, \"org.apache.openejb.util.resources\");\n    public static final String OUTPUT_DESCRIPTORS = \"openejb.descriptors.output\";\n    public static final String OUTPUT_DESCRIPTORS_FOLDER = \"openejb.descriptors.output.folder\";\n    public AppModule deploy(final AppModule appModule) throws OpenEJBException {\n        boolean output = SystemInstance.get().getOptions().get(OUTPUT_DESCRIPTORS, false);\n        if (output && appModule.getCmpMappings() != null) {\n            writeGenratedCmpMappings(appModule);\n        }\n        for (final EjbModule ejbModule : appModule.getEjbModules()) {\n            final Options options = new Options(ejbModule.getOpenejbJar().getProperties(), SystemInstance.get().getOptions());\n            final ValidationContext context = ejbModule.getValidation();\n            // output descriptors by default if there are validation errors\n            final boolean invalid = context.hasErrors() || context.hasFailures();\n            output = options.get(OUTPUT_DESCRIPTORS, invalid);\n            if (output) {\n                if (ejbModule.getEjbJar() != null) {\n                    writeEjbJar(ejbModule);\n                }\n                if (ejbModule.getOpenejbJar() != null) {\n                    writeOpenejbJar(ejbModule);\n                }\n                writeGeronimoOpenejb(ejbModule);\n            }\n        }\n        for (final ConnectorModule connectorModule : appModule.getConnectorModules()) {\n            writeRaXml(connectorModule);\n        }\n        return appModule;\n    }\n    private void writeRaXml(final ConnectorModule connectorModule) {\n        try {\n            final Connector connector = connectorModule.getConnector();\n            final File tempFile = tempFile(\"ra-\", connectorModule.getModuleId() + \".xml\");\n            final OutputStream out = IO.write(tempFile);\n            try {\n                final JAXBContext ctx = JAXBContextFactory.newInstance(Connector.class);\n                final Marshaller marshaller = ctx.createMarshaller();\n                marshaller.marshal(connector, out);\n                logger.info(\"Dumping Generated ra.xml to: \" + tempFile.getAbsolutePath());\n            } catch (final JAXBException e) {\n                // no-op\n            } finally {\n                IO.close(out);\n            }\n        } catch (final IOException e) {\n            // no-op\n        }\n    }\n    private File tempFile(final String start, final String end) throws IOException {\n        if (SystemInstance.get().getOptions().get(OUTPUT_DESCRIPTORS_FOLDER, (String) null) != null) {\n            final File tmp = new File(SystemInstance.get().getOptions().get(OUTPUT_DESCRIPTORS_FOLDER, \"\"));\n            if (!tmp.exists()) {\n                if (!tmp.mkdirs()) {\n                    throw new IOException(\"can't create \" + tmp.getAbsolutePath());\n                }\n            }\n            return new File(tmp, start + Long.toString(new Random().nextInt()) + end);\n        } else {\n            try {\n                return File.createTempFile(start, end);\n            } catch (final Throwable e) {\n                final File tmp = new File(\"tmp\");\n                if (!tmp.exists() && !tmp.mkdirs()) {\n                    throw new IOException(\"Failed to create local tmp directory: \" + tmp.getAbsolutePath());\n                }\n                return File.createTempFile(start, end, tmp);\n            }\n        }\n    }\n    private void writeGenratedCmpMappings(final AppModule appModule) {\n        for (final PersistenceModule persistenceModule : appModule.getPersistenceModules()) {\n            try {\n                final Persistence persistence = persistenceModule.getPersistence();\n                if (hasCmpPersistenceUnit(persistence)) {\n                    final File tempFile = tempFile(\"persistence-\", \".xml\");\n                    final OutputStream out = IO.write(tempFile);\n                    try {\n                        JpaJaxbUtil.marshal(Persistence.class, persistence, out);\n                        logger.info(\"Dumping Generated CMP persistence.xml to: \" + tempFile.getAbsolutePath());\n                    } catch (final JAXBException e) {\n                        // no-op\n                    } finally {\n                        IO.close(out);\n                    }\n                }\n            } catch (final IOException e) {\n                // no-op\n            }\n        }\n        try {\n            final File tempFile = tempFile(\"openejb-cmp-generated-orm-\", \".xml\");\n            final OutputStream out = IO.write(tempFile);\n            try {\n                JpaJaxbUtil.marshal(EntityMappings.class, appModule.getCmpMappings(), out);\n                logger.info(\"Dumping Generated CMP mappings.xml to: \" + tempFile.getAbsolutePath());\n            } catch (final JAXBException e) {\n                // no-op\n            } finally {\n                IO.close(out);\n            }\n        } catch (final IOException e) {\n            // no-op\n        }\n    }\n<fim_suffix>    private boolean hasCmpPersistenceUnit(final Persistence persistence) {\n        for (final PersistenceUnit unit : persistence.getPersistenceUnit()) {\n            if (unit.getName().startsWith(\"cmp\")) {\n                return true;\n            }\n        }\n        return false;\n    }\n    private void writeOpenejbJar(final EjbModule ejbModule) {\n        try {\n            final OpenejbJar openejbJar = ejbModule.getOpenejbJar();\n            final File tempFile = tempFile(\"openejb-jar-\", ejbModule.getModuleId() + \".xml\");\n            final OutputStream out = IO.write(tempFile);\n            try {\n                JaxbOpenejbJar3.marshal(OpenejbJar.class, openejbJar, out);\n                logger.info(\"Dumping Generated openejb-jar.xml to: \" + tempFile.getAbsolutePath());\n            } catch (final JAXBException e) {\n                // no-op\n            } finally {\n                IO.close(out);\n            }\n        } catch (final Exception e) {\n            // no-op\n        }\n    }\n    private void writeGeronimoOpenejb(final EjbModule ejbModule) {\n        try {\n            final GeronimoEjbJarType geronimoEjbJarType = (GeronimoEjbJarType) ejbModule.getAltDDs().get(\"geronimo-openejb.xml\");\n            if (geronimoEjbJarType == null) {\n                return;\n            }\n            final File tempFile = tempFile(\"geronimo-openejb-\", ejbModule.getModuleId() + \".xml\");\n            final OutputStream out = IO.write(tempFile);\n            try {<fim_middle>// function below has no smell\n"}