{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.cxf.jaxrs.provider;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Type;\n\nimport javax.ws.rs.InternalServerErrorException;\nimport javax.ws.rs.WebApplicationException;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.MultivaluedMap;\nimport javax.ws.rs.ext.MessageBodyWriter;\nimport javax.ws.rs.ext.Providers;\n\nimport org.apache.cxf.jaxrs.ext.StreamingResponse;\nimport org.apache.cxf.jaxrs.utils.InjectionUtils;\n\npublic class StreamingResponseProvider<T> extends AbstractConfigurableProvider\n    implements MessageBodyWriter<StreamingResponse<T>> {\n\n    @Context\n    private Providers providers;\n\n    @Override\n    public boolean isWriteable(Class<?> cls, Type type, Annotation[] anns, MediaType mt) {\n        return StreamingResponse.class.isAssignableFrom(cls);\n    }\n\n    @Override\n    public void writeTo(StreamingResponse<T> p, Class<?> cls, Type t, Annotation[] anns,\n                        MediaType mt, MultivaluedMap<String, Object> headers, OutputStream os)\n        throws IOException, WebApplicationException {\n        Class<?> actualCls = InjectionUtils.getActualType(t);\n        if (cls == actualCls) {\n            actualCls = Object.class;\n        }\n        //TODO: review the possibility of caching the providers\n        StreamingResponseWriter thewriter = new StreamingResponseWriter(actualCls, anns, mt, headers, os);\n        p.writeTo(thewriter);\n    }\n\n    @Override\n    public long getSize(StreamingResponse<T> arg0, Class<?> arg1, Type arg2, Annotation[] arg3, MediaType arg4) {\n        return -1;\n    }\n\n    private class StreamingResponseWriter implements StreamingResponse.Writer<T> {\n        private volatile MessageBodyWriter<T> writer;\n        private Class<?> entityCls;\n        private MediaType mt;\n        private Annotation[] anns;\n        private MultivaluedMap<String, Object> headers;\n        private OutputStream os;\n\n        StreamingResponseWriter(Class<?> entityCls,\n                                Annotation[] anns,\n                                MediaType mt,\n                                MultivaluedMap<String, Object> headers,\n                                OutputStream os) {\n            this.entityCls = entityCls;\n            this.anns = anns;\n            this.mt = mt;\n            this.headers = headers;\n            this.os = os;\n        }\n\n<fim_suffix>        @SuppressWarnings(\"unchecked\")\n        @Override\n        public void write(T data) throws IOException {\n            Class<?> actualCls = entityCls != Object.class ? entityCls : data.getClass();\n            if (writer == null) {\n                writer = (MessageBodyWriter<T>)providers.getMessageBodyWriter(actualCls, actualCls, anns, mt);\n                if (writer == null) {\n                    throw new InternalServerErrorException();\n                }\n            }\n            writer.writeTo(data, actualCls, actualCls, anns, mt, headers, os);\n        }\n\n        @Override\n        public OutputStream getEntityStream() {\n            return os;\n        }\n\n    }\n}<fim_middle>// function below has no smell\n"}