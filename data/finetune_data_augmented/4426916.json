{"text": "<fim_prefix>        this.baseEndpoint = buildBathPath().toString();\n        this.username = username;\n        this.password = password;\n        ClientConfig cc = new DefaultClientConfig();\n        cc.getProperties().put(DefaultClientConfig.PROPERTY_CONNECT_TIMEOUT, 60 * 1000);\n        cc.getProperties().put(DefaultClientConfig.PROPERTY_READ_TIMEOUT, 60 * 1000);\n        cc.getClasses().add(JacksonJsonProvider.class);\n        cc.getProperties().put(URLConnectionClientHandler.PROPERTY_HTTP_URL_CONNECTION_SET_METHOD_WORKAROUND, true);\n        this.client = Client.create(cc);\n        client.addFilter(new com.sun.jersey.api.client.filter.GZIPContentEncodingFilter());\n    }\n    public EagleServiceBaseClient(String host, int port, String basePath){\n        this(host, port, basePath, null);\n    }\n    public EagleServiceBaseClient(String host, int port, String username, String password){\n        this(host, port, DEFAULT_BASE_PATH, username, password);\n    }\n    public Client getJerseyClient(){\n        return client;\n    }\n    public EagleServiceBaseClient(String host, int port){\n        this(host,port,DEFAULT_BASE_PATH);\n    }\n    protected final StringBuilder buildBathPath() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"http://\");\n        sb.append(host);\n        sb.append(\":\");\n        sb.append(port);\n        sb.append(basePath);\n        return sb;\n    }\n    public void setReadTimeout(int timeoutMs) {\n        client.setReadTimeout(timeoutMs);\n    }\n    protected static String marshall(List<?> entities) throws JsonMappingException, JsonGenerationException, IOException {\n        final JsonFactory factory = new JsonFactory();\n        final ObjectMapper mapper = new ObjectMapper(factory);\n        mapper.setFilters(TaggedLogAPIEntity.getFilterProvider());\n        return mapper.writeValueAsString(entities);\n    }\n    protected <E extends TaggedLogAPIEntity> Map<String,List<E>> groupEntitiesByService(List<E> entities) throws EagleServiceClientException {\n        Map<String,List<E>> serviceEntityMap = new HashMap<String, List<E>>();\n        if(LOG.isDebugEnabled()) LOG.debug(\"Grouping entities by service name\");\n        for(E entity: entities) {\n            if(entity == null) {\n                LOG.warn(\"Skip null entity\");\n                continue;\n            }\n            try {\n                EntityDefinition entityDefinition = EntityDefinitionManager.getEntityDefinitionByEntityClass(entity.getClass());\n                if(entityDefinition == null){\n                    throw new EagleServiceClientException(\"Failed to find entity definition of class: \"+entity.getClass());\n                }\n                String serviceName = entityDefinition.getService();\n                List<E> bucket = serviceEntityMap.get(serviceName);\n                if(bucket == null){\n                    bucket = new LinkedList<E>();\n                    serviceEntityMap.put(serviceName, bucket);\n                }\n                bucket.add(entity);\n            } catch (InstantiationException e) {\n                throw new EagleServiceClientException(e);\n            } catch (IllegalAccessException e) {\n                throw new EagleServiceClientException(e);\n            }\n        }\n        return serviceEntityMap;\n    }\n    @Override\n    public SearchRequestBuilder search() {\n        return new SearchRequestBuilder(this);\n    }\n    @Override\n    public SearchRequestBuilder search(String query) {\n        return new SearchRequestBuilder(this).query(query);\n    }\n    protected void register(Closeable closeable){\n        this.closeables.add(closeable);\n    }\n    @Override\n    public MetricSender metric(String metricName) {\n        MetricSender metricGenerator = new MetricSender(this,metricName);\n        this.register(metricGenerator);\n        return metricGenerator;\n    }\n    protected WebResource getWebResource(String relativePath){\n        return this.getJerseyClient().resource(this.getBaseEndpoint() + relativePath);\n    }\n    protected AsyncWebResource getAsyncWebResource(String relativePath){\n        return this.getJerseyClient().asyncResource(this.getBaseEndpoint() + relativePath);\n    }\n    protected WebResource.Builder putAuthHeaderIfNeeded(WebResource.Builder r) {\n        if (username != null && password != null) {\n           r.header(SecurityConstants.AUTHORIZATION, SecurityConstants.BASIC_AUTHORIZATION_HEADER_PREFIX + Base64.encode(username + \":\" + password));\n        }\n        return r;\n    }\n    /**\n     * Send HTTP POST request with entities and serviceName\n     *\n     * @param resourceURL\n     * @param entities\n     * @param serviceName\n     * @return\n     * @throws JsonMappingException\n     * @throws JsonGenerationException\n     * @throws IOException\n     */\n    @SuppressWarnings(\"unchecked\")\n    protected GenericServiceAPIResponseEntity<String> postEntitiesWithService(String resourceURL, List<? extends TaggedLogAPIEntity> entities,String serviceName) throws JsonMappingException, JsonGenerationException, IOException {\n        final String json = marshall(entities);\n        final WebResource r = getWebResource(resourceURL);\n        return putAuthHeaderIfNeeded(r.queryParam(SERVICE_NAME,serviceName).accept(DEFAULT_MEDIA_TYPE))\n                .header(CONTENT_TYPE, DEFAULT_HTTP_HEADER_CONTENT_TYPE)\n                .post(GenericServiceAPIResponseEntity.class, json);\n    }\n    /**\n     * Send HTTP PUT request with entities and serviceName\n     *\n     * @param resourceURL\n     * @param entities\n     * @param serviceName\n     * @return\n     * @throws JsonMappingException\n     * @throws JsonGenerationException\n     * @throws IOException\n     */\n    @SuppressWarnings(\"unchecked\")\n    protected GenericServiceAPIResponseEntity<String> putEntitiesWithService(String resourceURL, List<? extends TaggedLogAPIEntity> entities,String serviceName) throws JsonMappingException, JsonGenerationException, IOException {\n        final String json = marshall(entities);\n        final WebResource r = getWebResource(resourceURL);\n        return putAuthHeaderIfNeeded(r.queryParam(SERVICE_NAME,serviceName).accept(DEFAULT_MEDIA_TYPE))\n                .header(CONTENT_TYPE, DEFAULT_HTTP_HEADER_CONTENT_TYPE)\n                .put(GenericServiceAPIResponseEntity.class, json);\n    }\n    protected <E extends TaggedLogAPIEntity> String getServiceNameByClass(Class<E> entityClass) throws EagleServiceClientException {\n        EntityDefinition entityDefinition = null;\n        try {\n            entityDefinition = EntityDefinitionManager.getEntityDefinitionByEntityClass(entityClass);\n        } catch (InstantiationException e) {\n            throw new EagleServiceClientException(e);\n        } catch (IllegalAccessException e) {\n            throw new EagleServiceClientException(e);\n        }\n        if(entityDefinition == null){\n            throw new EagleServiceClientException(\"cannot find entity definition of class \"+entityClass);\n        }\n        return entityDefinition.getService();\n    }\n    @Override\n    public BatchSender batch(int batchSize) {\n        BatchSender batchSender = new BatchSender(this,batchSize);\n        this.register(batchSender);\n        return batchSender;\n    }\n    @Override\n    public EagleServiceAsyncClient async() {\n        EagleServiceAsyncClient async = new EagleServiceAsyncClientImpl(this);\n        this.register(async);\n        return async;\n    }\n    @Override\n    public ConcurrentSender parallel(int parallelNum) {\n        ConcurrentSender concurrentSender = new ConcurrentSender(this,parallelNum);\n        this.register(concurrentSender);\n        return concurrentSender;\n    }\n    @Override\n    public <E extends TaggedLogAPIEntity> GenericServiceAPIResponseEntity<String> delete(List<E> entities, Class<E> entityClass) throws IOException, EagleServiceClientException {\n        return delete(entities, getServiceNameByClass(entityClass));\n    }\n    @Override\n    public <E extends TaggedLogAPIEntity> GenericServiceAPIResponseEntity<String> create(List<E> entities, Class<E> entityClass) throws IOException, EagleServiceClientException {\n        return create(entities, getServiceNameByClass(entityClass));\n    }\n    @Override\n    public <E extends TaggedLogAPIEntity> GenericServiceAPIResponseEntity<String> update(List<E> entities, Class<E> entityClass) throws IOException, EagleServiceClientException {\n        return update(entities, getServiceNameByClass(entityClass));\n    }\n    @Override\n    public void close() throws IOException {\n        if(!this.isStopped) {\n            if(LOG.isDebugEnabled()) LOG.debug(\"Client is closing\");\n            for (Closeable closeable : this.closeables) {\n                try {\n                    closeable.close();\n                } catch (IOException e) {\n                    LOG.error(e.getMessage(), e);\n                    throw e;\n                }\n            }\n        }\n        this.isStopped = true;\n        this.getJerseyClient().destroy();\n    }\n    @Override\n    public DeleteRequestBuilder delete() {\n        return new DeleteRequestBuilder(this);\n    }\n    protected void checkNotNull(Object obj,String name) throws EagleServiceClientException{\n        if(obj == null) throw new EagleServiceClientException(name+\" should not be null but given\");\n    }\n<fim_suffix>    @Override\n    public EagleServiceBaseClient silence(boolean silence) {\n        this.silence = silence;\n        return this;\n    }<fim_middle>// function below has no smell\n"}