{"text": "<fim_prefix>\n<fim_suffix>public interface DbAction<T> {\n\tClass<T> getEntityType();\n\t/**\n\t * Executing this DbAction with the given {@link Interpreter}.\n\t * <p>\n\t * The default implementation just performs exception handling and delegates to {@link #doExecuteWith(Interpreter)}.\n\t *\n\t * @param interpreter the {@link Interpreter} responsible for actually executing the {@link DbAction}.Must not be\n\t *          {@code null}.\n\t */\n\tdefault void executeWith(Interpreter interpreter) {\n\t\ttry {\n\t\t\tdoExecuteWith(interpreter);\n\t\t} catch (Exception e) {\n\t\t\tthrow new DbActionExecutionException(this, e);\n\t\t}\n\t}\n\t/**\n\t * Executing this DbAction with the given {@link Interpreter} without any exception handling.\n\t *\n\t * @param interpreter the {@link Interpreter} responsible for actually executing the {@link DbAction}.\n\t */\n\tvoid doExecuteWith(Interpreter interpreter);\n\t/**\n\t * Represents an insert statement for a single entity that is not the root of an aggregate.\n\t *\n\t * @param <T> type of the entity for which this represents a database interaction.\n\t */\n\t@Data\n\tclass Insert<T> implements WithGeneratedId<T>, WithDependingOn<T> {\n\t\t@NonNull final T entity;\n\t\t@NonNull final PersistentPropertyPath<RelationalPersistentProperty> propertyPath;\n\t\t@NonNull final WithEntity<?> dependingOn;\n\t\tMap<PersistentPropertyPath<RelationalPersistentProperty>, Object> qualifiers = new HashMap<>();\n\t\tprivate Object generatedId;\n\t\t@Override\n\t\tpublic void doExecuteWith(Interpreter interpreter) {\n\t\t\tinterpreter.interpret(this);\n\t\t}\n\t\t@Override\n\t\tpublic Class<T> getEntityType() {\n\t\t\treturn WithDependingOn.super.getEntityType();\n\t\t}\n\t}\n\t/**\n\t * Represents an insert statement for the root of an aggregate.\n\t *\n\t * @param <T> type of the entity for which this represents a database interaction.\n\t */\n\t@Data\n\t@RequiredArgsConstructor\n\tclass InsertRoot<T> implements WithEntity<T>, WithGeneratedId<T> {\n\t\t@NonNull private final T entity;\n\t\tprivate Object generatedId;\n\t\t@Override\n\t\tpublic void doExecuteWith(Interpreter interpreter) {\n\t\t\tinterpreter.interpret(this);\n\t\t}\n\t}\n\t/**\n\t * Represents an update statement for a single entity that is not the root of an aggregate.\n\t *\n\t * @param <T> type of the entity for which this represents a database interaction.\n\t */\n\t@Value\n\tclass Update<T> implements WithEntity<T> {\n\t\t@NonNull T entity;\n\t\t@NonNull PersistentPropertyPath<RelationalPersistentProperty> propertyPath;\n\t\t@Override\n\t\tpublic void doExecuteWith(Interpreter interpreter) {\n\t\t\tinterpreter.interpret(this);\n\t\t}\n\t}\n\t/**\n\t * Represents an insert statement for the root of an aggregate.\n\t *\n\t * @param <T> type of the entity for which this represents a database interaction.\n\t */\n\t@Value\n\tclass UpdateRoot<T> implements WithEntity<T> {\n\t\t@NonNull private final T entity;\n\t\t@Override\n\t\tpublic void doExecuteWith(Interpreter interpreter) {\n\t\t\tinterpreter.interpret(this);\n\t\t}\n\t}\n\t/**\n\t * Represents a merge statement for a single entity that is not the root of an aggregate.\n\t *\n\t * @param <T> type of the entity for which this represents a database interaction.\n\t */\n\t@Value\n\tclass Merge<T> implements WithDependingOn<T>, WithPropertyPath<T> {\n\t\t@NonNull T entity;\n\t\t@NonNull PersistentPropertyPath<RelationalPersistentProperty> propertyPath;\n\t\t@NonNull WithEntity<?> dependingOn;\n\t\tMap<PersistentPropertyPath<RelationalPersistentProperty>, Object> qualifiers = new HashMap<>();\n\t\t@Override\n\t\tpublic void doExecuteWith(Interpreter interpreter) {\n\t\t\tinterpreter.interpret(this);\n\t\t}\n\t}\n\t/**\n\t * Represents a delete statement for all entities that that a reachable via a give path from the aggregate root.\n\t *\n\t * @param <T> type of the entity for which this represents a database interaction.\n\t */\n\t@Value\n\tclass Delete<T> implements WithPropertyPath<T> {\n\t\t@NonNull Object rootId;\n\t\t@NonNull PersistentPropertyPath<RelationalPersistentProperty> propertyPath;\n\t\t@Override\n\t\tpublic void doExecuteWith(Interpreter interpreter) {\n\t\t\tinterpreter.interpret(this);\n\t\t}\n\t}\n\t/**\n\t * Represents a delete statement for a aggregate root.\n\t * <p>\n\t * Note that deletes for contained entities that reference the root are to be represented by separate\n\t * {@link DbAction}s.\n\t *\n\t * @param <T> type of the entity for which this represents a database interaction.\n\t */\n\t@Value\n\tclass DeleteRoot<T> implements DbAction<T> {\n\t\t@NonNull Class<T> entityType;\n\t\t@NonNull Object rootId;\n\t\t@Override\n\t\tpublic void doExecuteWith(Interpreter interpreter) {\n\t\t\tinterpreter.interpret(this);\n\t\t}\n\t}\n\t/**\n\t * Represents an delete statement for all entities that that a reachable via a give path from any aggregate root of a\n\t * given type.\n\t *\n\t * @param <T> type of the entity for which this represents a database interaction.\n\t */\n\t@Value\n\tclass DeleteAll<T> implements WithPropertyPath<T> {\n\t\t@NonNull PersistentPropertyPath<RelationalPersistentProperty> propertyPath;\n\t\t@Override\n\t\tpublic void doExecuteWith(Interpreter interpreter) {\n\t\t\tinterpreter.interpret(this);\n\t\t}\n\t}\n\t/**\n\t * Represents a delete statement for all aggregate roots of a given type.\n\t * <p>\n\t * Note that deletes for contained entities that reference the root are to be represented by separate\n\t * {@link DbAction}s.\n\t *\n\t * @param <T> type of the entity for which this represents a database interaction.\n\t */\n\t@Value\n\tclass DeleteAllRoot<T> implements DbAction<T> {\n\t\t@NonNull private final Class<T> entityType;\n\t\t@Override\n\t\tpublic void doExecuteWith(Interpreter interpreter) {\n\t\t\tinterpreter.interpret(this);\n\t\t}\n\t}\n\t/**\n\t * An action depending on another action for providing additional information like the id of a parent entity.\n\t *\n\t * @author Jens Schauder\n\t */\n\tinterface WithDependingOn<T> extends WithPropertyPath<T>, WithEntity<T> {\n\t\t/**\n\t\t * The {@link DbAction} of a parent entity, possibly the aggregate root. This is used to obtain values needed to\n\t\t * persist the entity, that are not part of the current entity, especially the id of the parent, which might only\n\t\t * become available once the parent entity got persisted.\n\t\t *\n\t\t * @return Guaranteed to be not {@code null}.\n\t\t * @see #getQualifiers()\n\t\t */\n\t\tWithEntity<?> getDependingOn();\n\t\t/**\n\t\t * Additional values to be set during insert or update statements.\n\t\t * <p>\n\t\t * Values come from parent entities but one might also add values manually.\n\t\t *\n\t\t * @return Guaranteed to be not {@code null}.\n\t\t */\n\t\tMap<PersistentPropertyPath<RelationalPersistentProperty>, Object> getQualifiers();\n\t\t@Override\n\t\tdefault Class<T> getEntityType() {\n\t\t\treturn WithEntity.super.getEntityType();\n\t\t}\n\t}\n\t/**\n\t * A {@link DbAction} that stores the information of a single entity in the database.\n\t *\n\t * @author Jens Schauder\n\t */\n\tinterface WithEntity<T> extends DbAction<T> {\n\t\t/**\n\t\t * @return the entity to persist. Guaranteed to be not {@code null}.\n\t\t */\n\t\tT getEntity();\n\t\t@SuppressWarnings(\"unchecked\")\n\t\t@Override\n\t\tdefault Class<T> getEntityType() {\n\t\t\treturn (Class<T>) getEntity().getClass();\n\t\t}\n\t}\n\t/**\n\t * A {@link DbAction} that may \"update\" its entity. In order to support immutable entities this requires at least\n\t * potentially creating a new instance, which this interface makes available.\n\t *\n\t * @author Jens Schauder\n\t */\n\tinterface WithGeneratedId<T> extends WithEntity<T> {\n\t\t/**\n\t\t * @return the entity to persist. Guaranteed to be not {@code null}.\n\t\t */\n\t\t@Nullable\n\t\tObject getGeneratedId();\n\t\t@SuppressWarnings(\"unchecked\")\n\t\t@Override\n\t\tdefault Class<T> getEntityType() {\n\t\t\treturn (Class<T>) getEntity().getClass();\n\t\t}\n\t}\n\t/**\n\t * A {@link DbAction} not operation on the root of an aggregate but on its contained entities.\n\t *\n\t * @author Jens Schauder\n\t */\n\tinterface WithPropertyPath<T> extends DbAction<T> {\n\t\t/**\n\t\t * @return the path from the aggregate root to the affected entity\n\t\t */<fim_middle>// class below is blob\n"}