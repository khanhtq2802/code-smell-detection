{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.falcon.resource;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.falcon.FalconException;\nimport org.apache.falcon.FalconRuntimException;\nimport org.apache.falcon.FalconWebException;\nimport org.apache.falcon.Pair;\nimport org.apache.falcon.entity.EntityNotRegisteredException;\nimport org.apache.falcon.entity.EntityUtil;\nimport org.apache.falcon.entity.lock.MemoryLocks;\nimport org.apache.falcon.entity.parser.EntityParser;\nimport org.apache.falcon.entity.parser.EntityParserFactory;\nimport org.apache.falcon.entity.parser.ValidationException;\nimport org.apache.falcon.entity.store.ConfigurationStore;\nimport org.apache.falcon.entity.store.EntityAlreadyExistsException;\nimport org.apache.falcon.entity.store.FeedLocationStore;\nimport org.apache.falcon.entity.v0.Entity;\nimport org.apache.falcon.entity.v0.EntityGraph;\nimport org.apache.falcon.entity.v0.EntityIntegrityChecker;\nimport org.apache.falcon.entity.v0.EntityType;\nimport org.apache.falcon.entity.v0.cluster.Cluster;\nimport org.apache.falcon.entity.v0.datasource.Datasource;\nimport org.apache.falcon.entity.v0.feed.Clusters;\nimport org.apache.falcon.entity.v0.feed.ClusterType;\nimport org.apache.falcon.entity.v0.feed.Feed;\nimport org.apache.falcon.entity.v0.process.Process;\nimport org.apache.falcon.resource.APIResult.Status;\nimport org.apache.falcon.resource.EntityList.EntityElement;\nimport org.apache.falcon.resource.metadata.AbstractMetadataResource;\nimport org.apache.falcon.security.CurrentUser;\nimport org.apache.falcon.security.DefaultAuthorizationProvider;\nimport org.apache.falcon.security.SecurityUtil;\nimport org.apache.falcon.util.DeploymentUtil;\nimport org.apache.falcon.util.RuntimeProperties;\nimport org.apache.falcon.util.StartupProperties;\nimport org.apache.falcon.workflow.WorkflowEngineFactory;\nimport org.apache.falcon.workflow.engine.AbstractWorkflowEngine;\nimport org.apache.hadoop.io.IOUtils;\nimport org.apache.hadoop.security.UserGroupInformation;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.ws.rs.core.Response;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Constructor;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\n/**\n * A base class for managing Entity operations.\n */\npublic abstract class AbstractEntityManager extends AbstractMetadataResource {\n    private static final Logger LOG = LoggerFactory.getLogger(AbstractEntityManager.class);\n    private static MemoryLocks memoryLocks = MemoryLocks.getInstance();\n    protected static final String DO_AS_PARAM = \"doAs\";\n    protected static final int XML_DEBUG_LEN = 10 * 1024;\n    protected ConfigurationStore configStore = ConfigurationStore.get();\n    public AbstractEntityManager() {\n    }\n    protected static Integer getDefaultResultsPerPage() {\n        Integer result = 10;\n        final String key = \"webservices.default.results.per.page\";\n        String value = RuntimeProperties.get().getProperty(key, result.toString());\n        try {\n            result = Integer.valueOf(value);\n        } catch (NumberFormatException e) {\n            LOG.warn(\"Invalid value:{} for key:{} in runtime.properties\", value, key);\n        }\n        return result;\n    }\n    protected static void checkColo(String colo) {\n        if (DeploymentUtil.isEmbeddedMode()) {\n            return;\n        }\n        if (StringUtils.isNotEmpty(colo) && !colo.equals(\"*\")) {\n            if (!DeploymentUtil.getCurrentColo().equals(colo)) {\n                throw FalconWebException.newAPIException(\"Current colo (\" + DeploymentUtil.getCurrentColo()\n                        + \") is not \" + colo);\n            }\n        }\n    }\n<fim_suffix>    public static Set<String> getAllColos() {\n        if (DeploymentUtil.isEmbeddedMode()) {\n            return DeploymentUtil.getDefaultColos();\n        }\n        String[] colos = RuntimeProperties.get().getProperty(\"all.colos\", DeploymentUtil.getDefaultColo()).split(\",\");\n        for (int i = 0; i < colos.length; i++) {\n            colos[i] = colos[i].trim();\n        }\n        return new HashSet<String>(Arrays.asList(colos));\n    }\n    protected Set<String> getColosFromExpression(String coloExpr, String type, String entity) {\n        final Set<String> applicableColos = getApplicableColos(type, entity);\n        return getColosFromExpression(coloExpr, applicableColos);\n    }\n    protected Set<String> getColosFromExpression(String coloExpr, String type, Entity entity) {\n        final Set<String> applicableColos = getApplicableColos(type, entity);\n        return getColosFromExpression(coloExpr, applicableColos);\n    }\n    private Set<String> getColosFromExpression(String coloExpr, Set<String> applicableColos) {\n        Set<String> colos;\n        if (coloExpr == null || coloExpr.equals(\"*\") || coloExpr.isEmpty()) {\n            colos = applicableColos;\n        } else {\n            colos = new HashSet<>(Arrays.asList(coloExpr.split(\",\")));\n            if (!applicableColos.containsAll(colos)) {\n                throw FalconWebException.newAPIException(\"Given colos not applicable for entity operation\");\n            }\n        }\n        return colos;\n    }\n    public static Set<String> getApplicableColos(String type, String name) {\n        try {\n            if (DeploymentUtil.isEmbeddedMode()) {\n                return DeploymentUtil.getDefaultColos();\n            }\n            if (EntityType.getEnum(type) == EntityType.CLUSTER || name == null) {\n                return getAllColos();\n            }\n            return getApplicableColos(type, EntityUtil.getEntity(type, name));\n        } catch (FalconException e) {\n            throw FalconWebException.newAPIException(e);\n        }\n    }\n    public static Set<String> getApplicableColos(String type, Entity entity) {\n        try {\n            if (DeploymentUtil.isEmbeddedMode()) {\n                return DeploymentUtil.getDefaultColos();\n            }\n            if (EntityType.getEnum(type) == EntityType.CLUSTER) {\n                return getAllColos();\n            }\n            Set<String> clusters = EntityUtil.getClustersDefined(entity);\n            Set<String> colos = new HashSet<String>();\n            for (String cluster : clusters) {\n                Cluster clusterEntity = EntityUtil.getEntity(EntityType.CLUSTER, cluster);\n                colos.add(clusterEntity.getColo());\n            }\n            return colos;\n        } catch (FalconException e) {\n            throw FalconWebException.newAPIException(e);\n        }\n    }\n    /**\n     * Submit a new entity. Entities can be of type feed, process or data end\n     * points. Entity definitions are validated structurally against schema and\n     * subsequently for other rules before they are admitted into the system\n     * <p/>\n     * Entity name acts as the key and an entity once added, can't be added\n     * again unless deleted.\n     *\n     * @param request - Servlet Request\n     * @param type    - entity type - feed, process or data end point\n     * @param colo    - applicable colo<fim_middle>// function below has no smell\n"}