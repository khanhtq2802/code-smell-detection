{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage freemarker.ext.beans;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport freemarker.core.CollectionAndSequence;\nimport freemarker.ext.util.ModelFactory;\nimport freemarker.ext.util.WrapperTemplateModel;\nimport freemarker.template.AdapterTemplateModel;\nimport freemarker.template.MapKeyValuePairIterator;\nimport freemarker.template.ObjectWrapper;\nimport freemarker.template.SimpleSequence;\nimport freemarker.template.TemplateCollectionModel;\nimport freemarker.template.TemplateHashModelEx2;\nimport freemarker.template.TemplateMethodModelEx;\nimport freemarker.template.TemplateModel;\nimport freemarker.template.TemplateModelException;\nimport freemarker.template.TemplateModelWithAPISupport;\nimport freemarker.template.WrappingTemplateModel;\nimport freemarker.template.utility.RichObjectWrapper;\n\n/**\n * Model used by {@link BeansWrapper} when <tt>simpleMapWrapper</tt>\n * mode is enabled. Provides a simple hash model interface to the\n * underlying map (does not copy like {@link freemarker.template.SimpleHash}),\n * and a method interface to non-string keys.\n */\n<fim_suffix>public class SimpleMapModel extends WrappingTemplateModel \nimplements TemplateHashModelEx2, TemplateMethodModelEx, AdapterTemplateModel, \nWrapperTemplateModel, TemplateModelWithAPISupport {\n    static final ModelFactory FACTORY =\n        new ModelFactory()\n        {\n            public TemplateModel create(Object object, ObjectWrapper wrapper) {\n                return new SimpleMapModel((Map) object, (BeansWrapper) wrapper);\n            }\n        };\n\n    private final Map map;\n    \n    public SimpleMapModel(Map map, BeansWrapper wrapper) {\n        super(wrapper);\n        this.map = map;\n    }\n\n    public TemplateModel get(String key) throws TemplateModelException {\n        Object val = map.get(key);\n        if (val == null) {\n            if (key.length() == 1) {\n                // just check for Character key if this is a single-character string\n                Character charKey = Character.valueOf(key.charAt(0));\n                val = map.get(charKey);\n                if (val == null && !(map.containsKey(key) || map.containsKey(charKey))) {\n                    return null;\n                }\n            } else if (!map.containsKey(key)) {\n                return null;\n            }\n        }\n        return wrap(val);\n    }\n    \n    public Object exec(List args) throws TemplateModelException {\n        Object key = ((BeansWrapper) getObjectWrapper()).unwrap((TemplateModel) args.get(0));\n        Object value = map.get(key);\n        if (value == null && !map.containsKey(key)) {\n            return null;\n        }\n        return wrap(value);\n    }\n\n    public boolean isEmpty() {\n        return map.isEmpty();\n    }\n\n    public int size() {\n        return map.size();\n    }\n\n    public TemplateCollectionModel keys() {\n        return new CollectionAndSequence(new SimpleSequence(map.keySet(), getObjectWrapper()));\n    }\n\n    public TemplateCollectionModel values() {\n        return new CollectionAndSequence(new SimpleSequence(map.values(), getObjectWrapper()));\n    }\n    \n    public KeyValuePairIterator keyValuePairIterator() {\n        return new MapKeyValuePairIterator(map, getObjectWrapper());\n    }\n\n    public Object getAdaptedObject(Class hint) {\n        return map;\n    }\n    \n    public Object getWrappedObject() {\n        return map;\n    }\n\n    public TemplateModel getAPI() throws TemplateModelException {\n        return ((RichObjectWrapper) getObjectWrapper()).wrapAsAPI(map);\n    }\n}<fim_middle>// class below has no smell\n"}