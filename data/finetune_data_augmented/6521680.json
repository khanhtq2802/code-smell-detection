{"text": "<fim_prefix>/**\n * Copyright (c) 2014,2019 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\npackage org.eclipse.smarthome.core.service;\n\nimport org.eclipse.jdt.annotation.NonNullByDefault;\nimport org.eclipse.jdt.annotation.Nullable;\n\n/**\n * This is a token, identifying something to be completed.\n *\n * A caller may use it to identify which action or process is completed or to which completion it wants to listen to.\n * Thereby the {@code type} denotes the category of readyness, the {@code identifier}, e.g.\n * {@code new ReadyMarker(\"xmlProcessing\", \"o.e.sh.binding.sample\")} would denote that the \"sample binding\" has finished\n * processing some xmls.\n * <p>\n * When the action or process is being marked as \"ready\" or removed from the \"ready\" state, a registered tracker will be\n * notified by the ReadyService.\n * <p>\n * This class overrides {@link #hashCode()} and {@link #equals(Object)} so that any using class does not have to keep\n * original references, but new instances can be used for calls to the {@link ReadyService} every time.\n *\n * @author Simon Kaufmann - initial contribution and API.\n *\n */\n@NonNullByDefault\npublic final class ReadyMarker {\n\n    private final String type;\n\n    private final String identifier;\n\n    public ReadyMarker(String type, String identifier) {\n        this.type = type;\n        this.identifier = identifier;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public String getIdentifier() {\n        return identifier;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((identifier == null) ? 0 : identifier.hashCode());\n        result = prime * result + ((type == null) ? 0 : type.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(@Nullable Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        ReadyMarker other = (ReadyMarker) obj;\n        if (identifier == null) {\n            if (other.identifier != null) {\n                return false;\n            }\n        } else if (!identifier.equals(other.identifier)) {\n            return false;\n        }\n        if (type == null) {\n            if (other.type != null) {\n                return false;\n            }\n        } else if (!type.equals(other.type)) {\n            return false;\n        }\n        return true;\n    }\n\n<fim_suffix>    @Override\n    public String toString() {\n        return getType() + \"=\" + getIdentifier();\n    }\n\n}<fim_middle>// function below has no smell\n"}