{"text": "<fim_prefix>/*\n * Copyright 2015-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.data.web;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.MutablePropertyValues;\nimport org.springframework.beans.factory.BeanClassLoaderAware;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.ObjectFactory;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.annotation.AnnotatedElementUtils;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.data.projection.SpelAwareProxyProjectionFactory;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.web.bind.WebDataBinder;\nimport org.springframework.web.bind.support.WebDataBinderFactory;\nimport org.springframework.web.context.request.NativeWebRequest;\nimport org.springframework.web.method.annotation.ModelAttributeMethodProcessor;\nimport org.springframework.web.method.support.HandlerMethodArgumentResolver;\n\n/**\n * {@link HandlerMethodArgumentResolver} to create Proxy instances for interface based controller method parameters.\n *\n * @author Oliver Gierke\n * @since 1.10\n */\npublic class ProxyingHandlerMethodArgumentResolver extends ModelAttributeMethodProcessor\n\t\timplements BeanFactoryAware, BeanClassLoaderAware {\n\n\tprivate static final List<String> IGNORED_PACKAGES = Arrays.asList(\"java\", \"org.springframework\");\n\n\tprivate final SpelAwareProxyProjectionFactory proxyFactory;\n\tprivate final ObjectFactory<ConversionService> conversionService;\n\n\t/**\n\t * Creates a new {@link PageableHandlerMethodArgumentResolver} using the given {@link ConversionService}.\n\t *\n\t * @param conversionService must not be {@literal null}.\n\t */\n\tpublic ProxyingHandlerMethodArgumentResolver(ObjectFactory<ConversionService> conversionService,\n\t\t\tboolean annotationNotRequired) {\n\n\t\tsuper(annotationNotRequired);\n\n\t\tthis.proxyFactory = new SpelAwareProxyProjectionFactory();\n\t\tthis.conversionService = conversionService;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.beans.factory.BeanFactoryAware#setBeanFactory(org.springframework.beans.factory.BeanFactory)\n\t */\n\t@Override\n\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n\t\tthis.proxyFactory.setBeanFactory(beanFactory);\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.beans.factory.BeanClassLoaderAware#setBeanClassLoader(java.lang.ClassLoader)\n\t */\n\t@Override\n\tpublic void setBeanClassLoader(ClassLoader classLoader) {\n\t\tthis.proxyFactory.setBeanClassLoader(classLoader);\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.web.method.support.HandlerMethodArgumentResolver#supportsParameter(org.springframework.core.MethodParameter)\n\t */\n<fim_suffix>\t@Override\n\tpublic boolean supportsParameter(MethodParameter parameter) {\n\n\t\tif (!super.supportsParameter(parameter)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tClass<?> type = parameter.getParameterType();\n\n\t\tif (!type.isInterface()) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Annotated parameter\n\t\tif (parameter.getParameterAnnotation(ProjectedPayload.class) != null) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Annotated type\n\t\tif (AnnotatedElementUtils.findMergedAnnotation(type, ProjectedPayload.class) != null) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Fallback for only user defined interfaces\n\t\tString packageName = ClassUtils.getPackageName(type);\n\n\t\treturn !IGNORED_PACKAGES.stream().anyMatch(it -> packageName.startsWith(it));\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.web.method.annotation.ModelAttributeMethodProcessor#createAttribute(java.lang.String, org.springframework.core.MethodParameter, org.springframework.web.bind.support.WebDataBinderFactory, org.springframework.web.context.request.NativeWebRequest)\n\t */\n\t@Override\n\tprotected Object createAttribute(String attributeName, MethodParameter parameter, WebDataBinderFactory binderFactory,\n\t\t\tNativeWebRequest request) throws Exception {\n\n\t\tMapDataBinder binder = new MapDataBinder(parameter.getParameterType(), conversionService.getObject());\n\t\tbinder.bind(new MutablePropertyValues(request.getParameterMap()));\n\n\t\treturn proxyFactory.createProjection(parameter.getParameterType(), binder.getTarget());\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * @see org.springframework.web.method.annotation.ModelAttributeMethodProcessor#bindRequestParameters(org.springframework.web.bind.WebDataBinder, org.springframework.web.context.request.NativeWebRequest)\n\t */\n\t@Override\n\tprotected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {}\n}<fim_middle>// function below has no smell\n"}