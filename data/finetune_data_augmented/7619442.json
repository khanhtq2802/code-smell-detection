{"text": "<fim_prefix>/*******************************************************************************\n *  Copyright (c) 2013, 2016 VMware, Inc.\n *  All rights reserved. This program and the accompanying materials\n *  are made available under the terms of the Eclipse Public License v1.0\n *  which accompanies this distribution, and is available at\n *  https://www.eclipse.org/legal/epl-v10.html\n *\n *  Contributors:\n *      VMware, Inc. - initial API and implementation\n *******************************************************************************/\npackage org.springsource.ide.eclipse.commons.gettingstarted.tests;\n\nimport java.lang.reflect.InvocationTargetException;\n\nimport org.eclipse.core.resources.ResourcesPlugin;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.core.runtime.IStatus;\nimport org.eclipse.core.runtime.OperationCanceledException;\nimport org.eclipse.core.runtime.Status;\nimport org.eclipse.core.runtime.jobs.Job;\nimport org.eclipse.jface.operation.IRunnableWithProgress;\nimport org.springframework.ide.eclipse.boot.wizard.content.GithubRepoContent;\nimport org.springsource.ide.eclipse.commons.frameworks.test.util.ACondition;\nimport org.springsource.ide.eclipse.commons.livexp.util.ExceptionUtil;\n\nimport junit.framework.TestCase;\n\n/**\n * Some infrastucture shared among different dynamically generated testcases for\n * Guides.\n * \n * @author Kris De Volder\n */\npublic class GuidesTestCase extends TestCase {\n\t\n\t/**\n\t * The guide under test\n\t */\n\tprotected GithubRepoContent guide;\n\n\tpublic GuidesTestCase(GithubRepoContent guide) {\n\t\tsuper(guide.getName());\n\t\tthis.guide = guide;\n\t}\n\t\n\tpublic static abstract class GradleRunnable implements IRunnableWithProgress {\n\t\t\n\t\tprivate String jobName;\n\n\t\tpublic GradleRunnable(String jobName) {\n\t\t\tthis.jobName = jobName == null ? \"buildJob\" : jobName;\n\t\t}\n\n\t\tpublic String getJobName() {\n\t\t\treturn jobName;\n\t\t}\n\n\t\t/**\n\t\t * This method is here so that GradleRunnable can be used as an {@link IRunnableWithProgress}. It is final\n\t\t * as you are not supposed to implement it directly. Implement the doit method instead.\n\t\t */\n<fim_suffix>\t\t@Override\n\t\tpublic final void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n\t\t\ttry {\n\t\t\t\tdoit(monitor);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (OperationCanceledException e) {\n\t\t\t\tthrow new InterruptedException(\"Canceled by user\");\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (Throwable e) {\n\t\t\t\tthrow new InvocationTargetException(e);\n\t\t\t}\n\t\t}\n\n\t\tpublic abstract void doit(IProgressMonitor mon) throws Exception;\n\t\t\n\t}\n\t\n\tpublic static void buildJob(final GradleRunnable gradleRunnable) throws Exception {\n\t\tfinal Job job = new Job(gradleRunnable.getJobName()) {\n\t\t\t@Override\n\t\t\tprotected IStatus run(IProgressMonitor monitor) {\n\t\t\t\ttry {\n\t\t\t\t\tgradleRunnable.run(monitor);\n\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\treturn ExceptionUtil.status(e);\n\t\t\t\t}\n\t\t\t\treturn Status.OK_STATUS;\n\t\t\t}\n\t\t};\n\t\tjob.setRule(ResourcesPlugin.getWorkspace().getRuleFactory().buildRule());\n\t\tjob.schedule();\n\t\tnew ACondition() {\n\t\t\t@Override\n\t\t\tpublic boolean test() throws Exception {\n\t\t\t\treturn job.getResult()!=null;\n\t\t\t}\n\t\t}.waitFor(5*60*1000);\n\t\tassertOk(job.getResult());\n\t}\n\n\tprivate static void assertOk(IStatus result) throws CoreException {\n\t\tif (!result.isOK()) {\n\t\t\tthrow ExceptionUtil.coreException(result);\n\t\t}\n\t}\n\n}<fim_middle>// function below has no smell\n"}