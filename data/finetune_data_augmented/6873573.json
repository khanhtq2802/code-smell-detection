{"text": "<fim_prefix>/**\n * Copyright (c) 2016 NumberFour AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   NumberFour AG - Initial API and implementation\n */\npackage org.eclipse.n4js.generator.headless;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport org.eclipse.emf.common.util.URI;\nimport org.eclipse.n4js.external.ExternalLibraryHelper;\nimport org.eclipse.n4js.generator.headless.logging.IHeadlessLogger;\nimport org.eclipse.n4js.internal.FileBasedWorkspace;\nimport org.eclipse.n4js.internal.N4JSBrokenProjectException;\nimport org.eclipse.n4js.internal.N4JSModel;\nimport org.eclipse.n4js.internal.N4JSProject;\nimport org.eclipse.n4js.projectDescription.ProjectDescription;\nimport org.eclipse.n4js.projectModel.IN4JSProject;\nimport org.eclipse.n4js.utils.ProjectDescriptionLoader;\nimport org.eclipse.n4js.utils.ProjectDescriptionUtils;\nimport org.eclipse.n4js.utils.URIUtils;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Sets;\nimport com.google.inject.Inject;\n/**\n * Helper methods to deal with projects and {@link FileBasedWorkspace}.\n */\npublic class HeadlessHelper {\n\t@Inject\n\tprivate ProjectDescriptionLoader projectDescriptionLoader;\n\t@Inject\n\tprivate N4JSModel n4jsModel;\n\t@Inject\n\tprivate IHeadlessLogger logger;\n\t@Inject\n\tprivate ExternalLibraryHelper externalLibraryHelper;\n\t/**\n\t * Configure FileBasedWorkspace with all projects contained in {@code buildSet}.\n\t *\n\t * Skips {@link IN4JSProject}s that are already registered with the given {@code workspace}.\n\t *\n\t * @param buildSet\n\t *            build set of projects\n\t * @param workspace\n\t *            instance of FileBasedWorkspace to configure (in N4JS injector)\n\t * @throws N4JSCompileException\n\t *             in error Case.\n\t */\n\tpublic void registerProjects(BuildSet buildSet, FileBasedWorkspace workspace) throws N4JSCompileException {\n\t\tIterable<URI> projectUris = Iterables.transform(buildSet.getAllProjects(), p -> p.getLocation());\n\t\t// Register all projects with the file based workspace.\n\t\tthis.registerProjectsToFileBasedWorkspace(projectUris, workspace);\n\t}\n\t/**\n\t * Registers provided project URIs in the given workspace.\n\t *\n\t * Skips {@link IN4JSProject}s that are already registered with the given {@code workspace}.\n\t *\n\t */\n<fim_suffix>\tpublic void registerProjectsToFileBasedWorkspace(Iterable<URI> projectURIs, FileBasedWorkspace workspace)\n\t\t\tthrows N4JSCompileException {\n\t\t// TODO GH-783 refactor FileBasedWorkspace, https://github.com/eclipse/n4js/issues/783\n\t\t// this is reverse mapping of the one that is kept in the workspace\n\t\tMap<String, URI> registeredProjects = new HashMap<>();\n\t\tworkspace.getAllProjectLocationsIterator().forEachRemaining(uri -> {\n\t\t\tString projectName = workspace.getProjectDescription(uri).getProjectName();\n\t\t\tregisteredProjects.put(projectName, URIUtils.normalize(uri));\n\t\t});\n\t\t// register all projects with the file based workspace.\n\t\tfor (URI uri : projectURIs) {\n\t\t\tURI projectURI = URIUtils.normalize(uri);\n\t\t\tfinal ProjectDescription projectDescription = projectDescriptionLoader\n\t\t\t\t\t.loadProjectDescriptionAtLocation(projectURI);\n\t\t\tif (projectDescription == null) {\n\t\t\t\tthrow new N4JSCompileException(\n\t\t\t\t\t\t\"Cannot load project description for project at \" + projectURI.toFileString()\n\t\t\t\t\t\t\t\t+ \". Make sure the project contains a valid package.json file.\");\n\t\t\t}\n\t\t\tfinal String projectName = projectDescription.getProjectName();\n\t\t\tif (skipRegistering(projectName, projectURI, registeredProjects)) {\n\t\t\t\tif (logger != null && logger.isCreateDebugOutput()) {\n\t\t\t\t\tlogger.debug(\"Skipping already registered project '\" + projectURI + \"'\");\n\t\t\t\t}\n\t\t\t\t/*\n\t\t\t\t * We could call FileBasedWorkspace.registerProject which would fail silently. Still to avoid potential\n\t\t\t\t * side effects and to keep {@code registeredProjects} management simpler,we will skip it explicitly.\n\t\t\t\t */\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (logger != null && logger.isCreateDebugOutput()) {\n\t\t\t\t\tlogger.debug(\"Registering project '\" + projectURI + \"'\");\n\t\t\t\t}\n\t\t\t\tworkspace.registerProject(projectURI);\n\t\t\t\tregisteredProjects.put(projectName, projectURI);\n\t\t\t} catch (N4JSBrokenProjectException e) {\n\t\t\t\tthrow new N4JSCompileException(\"Unable to register project '\" + projectURI + \"'\", e);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Creates a new list, calling {@link File#getAbsoluteFile()} on each member\n\t *\n\t * @param relativeFiles\n\t *            list of possibly relative paths.\n\t * @return new list of absolute paths.\n\t * @throws N4JSCompileException\n\t *             in case of underlying IO-problems\n\t */\n\tpublic List<File> toAbsoluteFileList(List<File> relativeFiles) throws N4JSCompileException {\n\t\tList<File> absProjectRoots = new ArrayList<>(relativeFiles.size());\n\t\tfor (File relPR : relativeFiles) {\n\t\t\ttry {\n\t\t\t\tabsProjectRoots.add(relPR.getCanonicalFile());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new N4JSCompileException(\"Unable to create canonical filename of file '\" + relPR + \"'\", e);\n\t\t\t}\n\t\t}\n\t\treturn absProjectRoots;\n\t}\n\t/**\n\t * Collects the projects containing the given single source files.\n\t *\n\t * @param sourceFiles\n\t *            the list of single source files\n\t * @param workspace\n\t *            the workspace to be checked for containing projects\n\t * @return list of N4JS project locations\n\t * @throws N4JSCompileException\n\t *             if no project cannot be found for one of the given files\n\t */\n\tpublic List<File> findProjectsForSingleFiles(List<File> sourceFiles,\n\t\t\tFileBasedWorkspace workspace)\n\t\t\tthrows N4JSCompileException {\n\t\tSet<URI> result = Sets.newLinkedHashSet();\n\t\tfor (File sourceFile : sourceFiles) {\n\t\t\tURI sourceFileURI = URI.createFileURI(sourceFile.toString());\n\t\t\tURI projectURI = workspace.findProjectWith(sourceFileURI);\n\t\t\tif (projectURI == null) {\n\t\t\t\tthrow new N4JSCompileException(\"No project for file '\" + sourceFile.toString() + \"' found.\");\n\t\t\t}\n\t\t\tresult.add(projectURI);\n\t\t}\n\t\t// convert back to Files:\n\t\treturn result.stream().map(u -> new File(u.toFileString())).collect(Collectors.toList());\n\t}\n\t/**\n\t * Searches for direct sub-folders containing a File named {@link IN4JSProject#PACKAGE_JSON}\n\t *\n\t * @param absProjectRoots\n\t *            all project root (must be absolute)\n\t * @return list of directories being a project\n\t */\n\tpublic List<File> collectAllProjectPaths(List<File> absProjectRoots) {\n\t\tList<File> projectRoots = getProjectStream(absProjectRoots).collect(Collectors.toList());\n\t\treturn projectRoots;\n\t}\n\t/**\n\t * Returns a list of {@link N4JSProject} instances representing all N4JS projects at the given locations.\n\t *\n\t * Excludes projects that have been installed by the library manager which do not need to be built (cf.\n\t * {@link #isProjectToBeBuilt(IN4JSProject)}).\n\t *\n\t * @param projectURIs\n\t *            the URIs to process\n\t * @return a list of projects at the given URIs\n\t */\n\tpublic List<N4JSProject> getN4JSProjects(List<URI> projectURIs) {\n\t\treturn projectURIs.stream().map(URIUtils::normalize)\n\t\t\t\t.map(u -> n4jsModel.getN4JSProject(u))\n\t\t\t\t.filter(p -> isProjectToBeBuilt(p))\n\t\t\t\t.collect(Collectors.toList());\n\t}\n\t/**\n\t * Indicates whether the given {@code project} is to be built by the headless compiler.\n\t *<fim_middle>// function below is long method\n"}