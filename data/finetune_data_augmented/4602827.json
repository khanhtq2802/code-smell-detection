{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.giraph.rexster.io;\nimport static org.apache.giraph.rexster.conf.GiraphRexsterConstants.GIRAPH_REXSTER_OUTPUT_E_TXSIZE;\nimport static org.apache.giraph.rexster.conf.GiraphRexsterConstants.GIRAPH_REXSTER_VLABEL;\nimport static org.apache.giraph.rexster.conf.GiraphRexsterConstants.GIRAPH_REXSTER_HOSTNAME;\nimport static org.apache.giraph.rexster.conf.GiraphRexsterConstants.GIRAPH_REXSTER_BACKOFF_DELAY;\nimport static org.apache.giraph.rexster.conf.GiraphRexsterConstants.GIRAPH_REXSTER_BACKOFF_RETRY;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.nio.charset.Charset;\nimport org.apache.giraph.conf.GiraphConfiguration;\nimport org.apache.giraph.edge.Edge;\nimport org.apache.giraph.io.EdgeOutputFormat;\nimport org.apache.giraph.io.EdgeWriter;\nimport org.apache.giraph.rexster.utils.RexsterUtils;\nimport org.apache.hadoop.io.Writable;\nimport org.apache.hadoop.io.WritableComparable;\nimport org.apache.hadoop.mapreduce.JobContext;\nimport org.apache.hadoop.mapreduce.OutputCommitter;\nimport org.apache.hadoop.mapreduce.TaskAttemptContext;\nimport org.apache.log4j.Logger;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n/**\n * Abstract class that users should subclass to use their own Rexster based\n * edge output format.\n *\n * @param <I>\n * @param <V>\n * @param <E>\n */\n@SuppressWarnings(\"rawtypes\")\npublic class RexsterEdgeOutputFormat<I extends WritableComparable,\n  V extends Writable, E extends Writable>\n  extends EdgeOutputFormat<I, V, E> {\n  /** Class logger. */\n  private static final Logger LOG =\n      Logger.getLogger(RexsterEdgeOutputFormat.class);\n  @Override\n  public RexsterEdgeWriter\n  createEdgeWriter(TaskAttemptContext context)\n    throws IOException, InterruptedException {\n    return new RexsterEdgeWriter();\n  }\n  @Override\n  public void checkOutputSpecs(JobContext context)\n    throws IOException, InterruptedException {\n    GiraphConfiguration gconf =\n      new GiraphConfiguration(context.getConfiguration());\n    String msg = \"Rexster OutputFormat usage requires both Edge and \" +\n                 \"Vertex OutputFormat's.\";\n    if (!gconf.hasVertexOutputFormat()) {\n      LOG.error(msg);\n      throw new InterruptedException(msg);\n    }\n    String endpoint = GIRAPH_REXSTER_HOSTNAME.get(gconf);\n    if (endpoint == null) {\n      throw new InterruptedException(GIRAPH_REXSTER_HOSTNAME.getKey() +\n                                     \" is a mandatory parameter.\");\n    }\n  }\n  @Override\n  public OutputCommitter getOutputCommitter(TaskAttemptContext context)\n    throws IOException, InterruptedException {\n    return new NullOutputCommitter();\n  }\n  /**\n   * Empty output commiter for hadoop.\n   */\n  private static class NullOutputCommitter extends OutputCommitter {\n    @Override\n    public void abortTask(TaskAttemptContext taskContext) { }\n    @Override\n    public void cleanupJob(JobContext jobContext) { }\n    @Override\n    public void commitTask(TaskAttemptContext taskContext) { }\n    @Override\n    public boolean needsTaskCommit(TaskAttemptContext taskContext) {\n      return false;\n    }\n    @Override\n    public void setupJob(JobContext jobContext) { }\n    @Override\n    public void setupTask(TaskAttemptContext taskContext) { }\n  }\n  /**\n   * Abstract class to be implemented by the user based on their specific\n   * vertex/edges output. Easiest to ignore the key value separator and only\n   * use key instead.\n   */\n  protected class RexsterEdgeWriter extends EdgeWriter<I, V, E> {\n    /** array key that points to the edges and vertices */\n    private static final String JSON_ARRAY_KEY = \"tx\";\n    /** Connection to the HTTP REST endpoint */\n    private HttpURLConnection rexsterConn;\n    /** Output stream from the HTTP connection to the REST endpoint */\n    private BufferedWriter rexsterBufferedStream;\n    /** attribute used to keep the state of the element array status */\n    private boolean isFirstElement = true;\n    /** number of vertices before starting a new connection */\n    private int txsize;\n    /** number of vertexes of vertices sent */\n    private int txcounter = 0;\n    /** label of the vertex id field */\n    private String vlabel;\n    /** Back-off time delay in milliseconds */\n    private int backoffDelay = 0;\n    /** Back-off number of attempts */\n    private int backoffRetry = 0;\n    @Override\n    public void initialize(TaskAttemptContext context) throws IOException,\n      InterruptedException {\n      txsize = GIRAPH_REXSTER_OUTPUT_E_TXSIZE.get(getConf());\n      vlabel = GIRAPH_REXSTER_VLABEL.get(getConf());\n      backoffDelay = GIRAPH_REXSTER_BACKOFF_DELAY.get(getConf());\n      backoffRetry = GIRAPH_REXSTER_BACKOFF_RETRY.get(getConf());\n      startConnection();\n    }\n    @Override\n    public void close(TaskAttemptContext context)\n      throws IOException, InterruptedException {\n      stopConnection();\n    }\n<fim_suffix>    @Override\n    public void writeEdge(I srcId, V srcValue, Edge<I, E> edge)\n      throws IOException, InterruptedException {\n      if (txcounter == txsize) {\n        txcounter = 0;\n        isFirstElement = true;\n        stopConnection();\n        startConnection();\n      }\n      try {\n        JSONObject jsonEdge;\n        String suffix;\n        /* extract the JSON object of the vertex */\n        jsonEdge = getEdge(srcId, srcValue, edge);\n        /* determine the suffix to add the object into the JSON array */\n        if (isFirstElement) {\n          isFirstElement = false;\n          suffix = \"\";\n        } else {\n          suffix = \",\";\n        }\n        rexsterBufferedStream.write(suffix + jsonEdge);\n        txcounter += 1;\n      } catch (JSONException e) {\n        throw new InterruptedException(\"Error writing the edge: \" +\n                                       e.getMessage());\n      }\n    }\n    /**\n     * Start a new connection with the Rexster REST endpoint.\n     */\n    private void startConnection() throws IOException, InterruptedException {\n      rexsterConn = RexsterUtils.Edge.openOutputConnection(getConf());\n      rexsterBufferedStream = new BufferedWriter(\n          new OutputStreamWriter(rexsterConn.getOutputStream(),\n                                 Charset.forName(\"UTF-8\")));\n      /* open the JSON container: is an object containing an array of\n         elements */\n      rexsterBufferedStream.write(\"{ \");\n      rexsterBufferedStream.write(\"\\\"vlabel\\\" : \\\"\" + vlabel + \"\\\",\");\n      rexsterBufferedStream.write(\"\\\"delay\\\" : \\\"\" + backoffDelay + \"\\\",\");\n      rexsterBufferedStream.write(\"\\\"retry\\\" : \\\"\" + backoffRetry + \"\\\",\");\n      rexsterBufferedStream.write(\"\\\"\" + JSON_ARRAY_KEY + \"\\\"\");\n      rexsterBufferedStream.write(\" : [ \");\n    }\n    /**\n     * Stop a new connection with the Rexster REST endpoint. By default the\n     * JDK manages keep-alive so no particular code is sent in place for this\n     * aim.\n     */\n    private void stopConnection() throws IOException, InterruptedException {\n      /* close the JSON container */\n      rexsterBufferedStream.write(\" ] }\");\n      rexsterBufferedStream.flush();\n      rexsterBufferedStream.close();\n      /* check the response and in case of error signal the unsuccessful state\n         via exception */\n      RexsterUtils.Edge.handleResponse(rexsterConn);\n    }\n    /**\n     * Each edge needs to be transformed into a JSON object to be sent to the\n     * batch interface of Rexster.\n     *\n     * @param  srcId    source vertex ID of the edge\n     * @param  srcValue source vertex value of the edge<fim_middle>// function below is long method\n"}