{"text": "<fim_prefix>\t\t\t\t}\n\t\t\t\t// At this point the widget may have been disposed.\n\t\t\t\t// If so, do not continue.\n\t\t\t\tif ( isDisposed( ) )\n\t\t\t\t\tbreak;\n\t\t\t\tEvent e = new Event( );\n\t\t\t\te.time = event.time;\n\t\t\t\te.character = event.character;\n\t\t\t\te.keyCode = event.keyCode;\n\t\t\t\te.stateMask = event.stateMask;\n\t\t\t\tnotifyListeners( SWT.KeyDown, e );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Pastes text from clipboard.\n\t * <p>\n\t * The selected text is deleted from the widget and new text inserted from\n\t * the clipboard.\n\t * </p>\n\t * \n\t * @exception SWTException\n\t *                <ul>\n\t *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n\t *                disposed</li>\n\t *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n\t *                thread that created the receiver</li>\n\t *                </ul>\n\t * \n\t * @since 3.3\n\t */\n\tpublic void paste( )\n\t{\n\t\tcheckWidget( );\n\t\ttext.paste( );\n\t}\n\tvoid popupEvent( Event event )\n\t{\n\t\tswitch ( event.type )\n\t\t{\n\t\t\tcase SWT.Paint :\n\t\t\t\t// draw black rectangle around list\n\t\t\t\tRectangle listRect = list.getBounds( );\n\t\t\t\tColor black = getDisplay( ).getSystemColor( SWT.COLOR_BLACK );\n\t\t\t\tevent.gc.setForeground( black );\n\t\t\t\tevent.gc.drawRectangle( 0,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tlistRect.width + 1,\n\t\t\t\t\t\tlistRect.height + 1 );\n\t\t\t\tbreak;\n\t\t\tcase SWT.Close :\n\t\t\t\tevent.doit = false;\n\t\t\t\tdropDown( false );\n\t\t\t\tbreak;\n\t\t\tcase SWT.Deactivate :\n\t\t\t\t/*\n\t\t\t\t * Bug in GTK. When the arrow button is pressed the popup\n\t\t\t\t * control receives a deactivate event and then the arrow button\n\t\t\t\t * receives a selection event. If we hide the popup in the\n\t\t\t\t * deactivate event, the selection event will show it again. To\n\t\t\t\t * prevent the popup from showing again, we will let the\n\t\t\t\t * selection event of the arrow button hide the popup. In\n\t\t\t\t * Windows, hiding the popup during the deactivate causes the\n\t\t\t\t * deactivate to be called twice and the selection event to be\n\t\t\t\t * disappear.\n\t\t\t\t */\n\t\t\t\tif ( !\"carbon\".equals( SWT.getPlatform( ) ) ) //$NON-NLS-1$\n\t\t\t\t{\n\t\t\t\t\tPoint point = arrow.toControl( getDisplay( ).getCursorLocation( ) );\n\t\t\t\t\tPoint size = arrow.getSize( );\n\t\t\t\t\tRectangle rect = new Rectangle( 0, 0, size.x, size.y );\n\t\t\t\t\tif ( !rect.contains( point ) )\n\t\t\t\t\t\tdropDown( false );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdropDown( false );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tpublic void redraw( )\n\t{\n\t\tsuper.redraw( );\n\t\ttext.redraw( );\n\t\tarrow.redraw( );\n\t\tif ( popup.isVisible( ) )\n\t\t\tlist.redraw( );\n\t}\n\tpublic void redraw( int x, int y, int width, int height, boolean all )\n\t{\n\t\tsuper.redraw( x, y, width, height, true );\n\t}\n\t/**\n\t * Removes the item from the receiver's list at the given zero-relative\n\t * index.\n\t * \n\t * @param index\n\t *            the index for the item\n\t * \n\t * @exception IllegalArgumentException\n\t *                <ul>\n\t *                <li>ERROR_INVALID_RANGE - if the index is not between 0\n\t *                and the number of elements in the list minus 1 (inclusive)\n\t *                </li>\n\t *                </ul>\n\t * @exception SWTException\n\t *                <ul>\n\t *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n\t *                disposed</li>\n\t *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n\t *                thread that created the receiver</li>\n\t *                </ul>\n\t */\n\tpublic void remove( int index )\n\t{\n\t\tcheckWidget( );\n\t\tlist.remove( index );\n\t}\n\t/**\n\t * Removes the items from the receiver's list which are between the given\n\t * zero-relative start and end indices (inclusive).\n\t * \n\t * @param start\n\t *            the start of the range\n\t * @param end\n\t *            the end of the range\n\t * \n\t * @exception IllegalArgumentException\n\t *                <ul>\n\t *                <li>ERROR_INVALID_RANGE - if either the start or end are\n\t *                not between 0 and the number of elements in the list minus\n\t *                1 (inclusive)</li>\n\t *                </ul>\n\t * @exception SWTException\n\t *                <ul>\n\t *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n\t *                disposed</li>\n\t *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n\t *                thread that created the receiver</li>\n\t *                </ul>\n\t */\n\tpublic void remove( int start, int end )\n\t{\n\t\tcheckWidget( );\n\t\tlist.remove( start, end );\n\t}\n\t/**\n\t * Searches the receiver's list starting at the first item until an item is\n\t * found that is equal to the argument, and removes that item from the list.\n\t * \n\t * @param string\n\t *            the item to remove\n\t * \n\t * @exception IllegalArgumentException\n\t *                <ul>\n\t *                <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n\t *                <li>ERROR_INVALID_ARGUMENT - if the string is not found in\n\t *                the list</li>\n\t *                </ul>\n\t * @exception SWTException\n\t *                <ul>\n\t *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n\t *                disposed</li>\n\t *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n\t *                thread that created the receiver</li>\n\t *                </ul>\n\t */\n\tpublic void remove( String string )\n\t{\n\t\tcheckWidget( );\n\t\tif ( string == null )\n\t\t\tSWT.error( SWT.ERROR_NULL_ARGUMENT );\n\t\tlist.remove( string );\n\t}\n\t/**\n\t * Removes all of the items from the receiver's list and clear the contents\n\t * of receiver's text field.\n\t * <p>\n\t * \n\t * @exception SWTException\n\t *                <ul>\n\t *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n\t *                disposed</li> <li>ERROR_THREAD_INVALID_ACCESS - if not\n\t *                called from the thread that created the receiver</li>\n\t *                </ul>\n\t */\n\tpublic void removeAll( )\n\t{\n\t\tcheckWidget( );\n\t\ttext.setText( \"\" ); //$NON-NLS-1$\n\t\tlist.removeAll( );\n\t}\n\t/**\n\t * Removes the listener from the collection of listeners who will be\n\t * notified when the receiver's text is modified.\n\t * \n\t * @param listener\n\t *            the listener which should no longer be notified\n\t * \n\t * @exception IllegalArgumentException\n\t *                <ul>\n\t *                <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n\t *                </ul>\n\t * @exception SWTException\n\t *                <ul>\n\t *                <li>ERROR_WIDGET_DISPOSED - if the receiver has been\n\t *                disposed</li>\n\t *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n\t *                thread that created the receiver</li>\n\t *                </ul>\n\t * \n\t * @see ModifyListener\n\t * @see #addModifyListener\n\t */\n<fim_suffix>\tpublic void removeModifyListener( ModifyListener listener )\n\t{\n\t\tcheckWidget( );\n\t\tif ( listener == null )\n\t\t\tSWT.error( SWT.ERROR_NULL_ARGUMENT );\n\t\tremoveListener( SWT.Modify, listener );\n\t}<fim_middle>// function below has no smell\n"}