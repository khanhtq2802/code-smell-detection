{"text": "<fim_prefix>/**\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.airavata.service.profile.handlers;\nimport org.apache.airavata.common.exception.ApplicationSettingsException;\nimport org.apache.airavata.common.utils.DBEventManagerConstants;\nimport org.apache.airavata.common.utils.DBEventService;\nimport org.apache.airavata.common.utils.ServerSettings;\nimport org.apache.airavata.model.dbevent.CrudType;\nimport org.apache.airavata.model.dbevent.EntityType;\nimport org.apache.airavata.model.error.AuthorizationException;\nimport org.apache.airavata.model.security.AuthzToken;\nimport org.apache.airavata.model.user.UserProfile;\nimport org.apache.airavata.service.profile.client.ProfileServiceClientFactory;\nimport org.apache.airavata.service.profile.commons.user.entities.UserProfileEntity;\nimport org.apache.airavata.service.profile.iam.admin.services.cpi.IamAdminServices;\nimport org.apache.airavata.service.profile.iam.admin.services.cpi.exception.IamAdminServicesException;\nimport org.apache.airavata.service.profile.user.core.repositories.UserProfileRepository;\nimport org.apache.airavata.service.profile.user.cpi.UserProfileService;\nimport org.apache.airavata.service.profile.user.cpi.exception.UserProfileServiceException;\nimport org.apache.airavata.service.profile.utils.ProfileServiceUtils;\nimport org.apache.airavata.service.security.interceptor.SecurityCheck;\nimport org.apache.thrift.TException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.List;\npublic class UserProfileServiceHandler implements UserProfileService.Iface {\n    private final static Logger logger = LoggerFactory.getLogger(UserProfileServiceHandler.class);\n    private UserProfileRepository userProfileRepository;\n    public UserProfileServiceHandler() {\n        userProfileRepository = new UserProfileRepository(UserProfile.class, UserProfileEntity.class);\n    }\n    @Override\n    @SecurityCheck\n    public String addUserProfile(AuthzToken authzToken, UserProfile userProfile) throws UserProfileServiceException, AuthorizationException, TException {\n        try{\n            // Lowercase user id and internal id\n            userProfile.setUserId(userProfile.getUserId().toLowerCase());\n            userProfile.setAiravataInternalUserId(userProfile.getUserId() + \"@\" + userProfile.getGatewayId());\n            userProfile = userProfileRepository.updateUserProfile(userProfile, getIAMUserProfileUpdater(authzToken, userProfile));\n            if (null != userProfile) {\n                logger.info(\"Added UserProfile with userId: \" + userProfile.getUserId());\n                // replicate userProfile at end-places\n                ProfileServiceUtils.getDbEventPublisher().publish(\n                        ProfileServiceUtils.getDBEventMessageContext(EntityType.USER_PROFILE, CrudType.CREATE, userProfile),\n                        DBEventManagerConstants.getRoutingKey(DBEventService.DB_EVENT.toString())\n                );\n                // return userId\n                return userProfile.getUserId();\n            } else {\n                throw new Exception(\"User creation failed. Please try again.\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Error while creating user profile\", e);\n            UserProfileServiceException exception = new UserProfileServiceException();\n            exception.setMessage(\"Error while creating user profile. More info : \" + e.getMessage());\n            throw exception;\n        }\n    }\n    @Override\n    @SecurityCheck\n    public boolean updateUserProfile(AuthzToken authzToken, UserProfile userProfile) throws UserProfileServiceException, AuthorizationException, TException {\n        try {\n            // After updating the user profile in the database but before committing the transaction, the\n            // following will update the user profile in the IAM service also. If the update in the IAM service\n            // fails then the transaction will be rolled back.\n            Runnable iamUserProfileUpdater = getIAMUserProfileUpdater(authzToken, userProfile);\n            if(userProfileRepository.updateUserProfile(userProfile, iamUserProfileUpdater) != null) {\n                logger.info(\"Updated UserProfile with userId: \" + userProfile.getUserId());\n                // replicate userProfile at end-places\n                ProfileServiceUtils.getDbEventPublisher().publish(\n                        ProfileServiceUtils.getDBEventMessageContext(EntityType.USER_PROFILE, CrudType.UPDATE, userProfile),\n                        DBEventManagerConstants.getRoutingKey(DBEventService.DB_EVENT.toString())\n                );\n                return true;\n            }\n            return false;\n        } catch (Exception e) {\n            logger.error(\"Error while Updating user profile\", e);\n            UserProfileServiceException exception = new UserProfileServiceException();\n            exception.setMessage(\"Error while Updating user profile. More info : \" + e.getMessage());\n            throw exception;\n        }\n    }\n<fim_suffix>    private Runnable getIAMUserProfileUpdater(AuthzToken authzToken, UserProfile userProfile) throws UserProfileServiceException {\n        IamAdminServices.Client iamAdminServicesClient = getIamAdminServicesClient();\n        return () -> {\n            try {\n                iamAdminServicesClient.updateUserProfile(authzToken, userProfile);\n            } catch (TException e) {\n                throw new RuntimeException(\"Failed to update user profile in IAM service\", e);\n            }\n        };\n    }\n    @Override\n    @SecurityCheck\n    public UserProfile getUserProfileById(AuthzToken authzToken, String userId, String gatewayId) throws UserProfileServiceException, AuthorizationException, TException {\n        try{\n            UserProfile userProfile = userProfileRepository.getUserProfileByIdAndGateWay(userId, gatewayId);\n            if(userProfile != null)\n                return userProfile;\n            else\n                throw new Exception(\"User with userId: \" + userId + \", in Gateway: \" + gatewayId + \", does not exist.\");\n        } catch (Exception e) {\n            logger.error(\"Error retrieving user profile by ID\", e);\n            UserProfileServiceException exception = new UserProfileServiceException();\n            exception.setMessage(\"Error retrieving user profile by ID. More info : \" + e.getMessage());\n            throw exception;\n        }\n    }\n    @Override\n    @SecurityCheck\n    public boolean deleteUserProfile(AuthzToken authzToken, String userId, String gatewayId) throws UserProfileServiceException, AuthorizationException, TException {\n        try{\n            // find user-profile\n            UserProfile userProfile = userProfileRepository.getUserProfileByIdAndGateWay(userId, gatewayId);\n            // delete user\n            boolean deleteSuccess = userProfileRepository.delete(userId);\n            logger.info(\"Delete UserProfile with userId: \" + userId + \", \" + (deleteSuccess? \"Success!\" : \"Failed!\"));\n            if (deleteSuccess) {\n                // delete userProfile at end-places\n                ProfileServiceUtils.getDbEventPublisher().publish(\n                        ProfileServiceUtils.getDBEventMessageContext(EntityType.USER_PROFILE, CrudType.DELETE, userProfile),\n                        DBEventManagerConstants.getRoutingKey(DBEventService.DB_EVENT.toString())\n                );\n            }\n            return deleteSuccess;\n        } catch (Exception e) {\n            logger.error(\"Error while deleting user profile\", e);\n            UserProfileServiceException exception = new UserProfileServiceException();\n            exception.setMessage(\"Error while deleting user profile. More info : \" + e.getMessage());\n            throw exception;\n        }\n    }\n    @Override\n    @SecurityCheck\n    public List<UserProfile> getAllUserProfilesInGateway(AuthzToken authzToken, String gatewayId, int offset, int limit) throws UserProfileServiceException, AuthorizationException, TException {\n        try{\n            List<UserProfile> usersInGateway = userProfileRepository.getAllUserProfilesInGateway(gatewayId, offset, limit);\n            if(usersInGateway != null)\n                return usersInGateway;\n            else\n                throw new Exception(\"There are no users for the requested gatewayId: \" + gatewayId);\n        } catch (Exception e) {\n            logger.error(\"Error while retrieving user profile List\", e);\n            UserProfileServiceException exception = new UserProfileServiceException();\n            exception.setMessage(\"Error while retrieving user profile List. More info : \" + e.getMessage());\n            throw exception;\n        }\n    }\n    @Override\n    public boolean doesUserExist(AuthzToken authzToken, String userId, String gatewayId) throws UserProfileServiceException, AuthorizationException, TException {\n        try{\n            UserProfile userProfile = userProfileRepository.getUserProfileByIdAndGateWay(userId, gatewayId);<fim_middle>// function below has no smell\n"}