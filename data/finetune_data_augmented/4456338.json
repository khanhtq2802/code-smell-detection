{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.drill.exec.store.hive.readers.inspectors;\n\nimport org.apache.drill.exec.store.hive.readers.HiveAbstractReader;\n\n/**\n * Parent class for records inspectors which responsible for counting of processed records\n * and managing free and used value holders.\n */\n<fim_suffix>public abstract class AbstractRecordsInspector {\n\n  private int processedRecordCount;\n\n  /**\n   * Checks if current number of processed records does not exceed max batch size.\n   *\n   * @return true if reached max number of records in batch\n   */\n  public boolean isBatchFull() {\n    return processedRecordCount >= HiveAbstractReader.TARGET_RECORD_COUNT;\n  }\n\n  /**\n   * @return number of processed records\n   */\n  public int getProcessedRecordCount() {\n    return processedRecordCount;\n  }\n\n  /**\n   * Increments current number of processed records.\n   */\n  public void incrementProcessedRecordCount() {\n    processedRecordCount++;\n  }\n\n  /**\n   * When batch of data was sent, number of processed records should be reset.\n   */\n  public void reset() {\n    processedRecordCount = 0;\n  }\n\n  /**\n   * Returns value holder where next value will be written.\n   *\n   * @return value holder\n   */\n  public abstract Object getValueHolder();\n\n  /**\n   * @return value holder with written value\n   */\n  public abstract Object getNextValue();\n\n}<fim_middle>// class below has no smell\n"}