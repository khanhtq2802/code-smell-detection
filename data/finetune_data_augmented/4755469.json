{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.gobblin.metrics.reporter;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.io.UnsupportedEncodingException;\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.Queue;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.common.base.Charsets;\n\nimport org.apache.gobblin.metrics.GobblinTrackingEvent;\nimport org.apache.gobblin.metrics.MetricContext;\nimport org.apache.gobblin.metrics.reporter.util.AvroJsonSerializer;\nimport org.apache.gobblin.metrics.reporter.util.AvroSerializer;\nimport org.apache.gobblin.metrics.reporter.util.NoopSchemaVersionWriter;\n\n\n/**\n * {@link org.apache.gobblin.metrics.reporter.EventReporter} that writes {@link org.apache.gobblin.metrics.GobblinTrackingEvent}s to an\n * {@link java.io.OutputStream}.\n */\npublic class OutputStreamEventReporter extends EventReporter {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(OutputStreamEventReporter.class);\n  private static final int CONSOLE_WIDTH = 80;\n\n  protected PrintStream output;\n\n  protected final AvroSerializer<GobblinTrackingEvent> serializer;\n  private final ByteArrayOutputStream outputBuffer;\n  private final PrintStream outputBufferPrintStream;\n  private final DateFormat dateFormat;\n\n  public OutputStreamEventReporter(Builder builder) throws IOException {\n    super(builder);\n    this.serializer = this.closer.register(\n        new AvroJsonSerializer<GobblinTrackingEvent>(GobblinTrackingEvent.SCHEMA$, new NoopSchemaVersionWriter()));\n    this.output = builder.output;\n    this.outputBuffer = new ByteArrayOutputStream();\n    this.outputBufferPrintStream = this.closer.register(new PrintStream(this.outputBuffer, false, Charsets.UTF_8.toString()));\n    this.dateFormat = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.getDefault());\n  }\n\n  @Override\n  public void reportEventQueue(Queue<GobblinTrackingEvent> queue) {\n\n    if(queue.size() <= 0) {\n      return;\n    }\n    this.outputBuffer.reset();\n    GobblinTrackingEvent nextEvent;\n\n    final String dateTime = dateFormat.format(new Date());\n    printWithBanner(dateTime, '=');\n    this.outputBufferPrintStream.println();\n    printWithBanner(\"-- Events\", '-');\n\n    while(null != (nextEvent = queue.poll())) {\n      this.outputBufferPrintStream.println(new String(this.serializer.serializeRecord(nextEvent), Charsets.UTF_8));\n    }\n\n    this.outputBufferPrintStream.println();\n    try {\n      this.outputBuffer.writeTo(this.output);\n    } catch(IOException exception) {\n      LOGGER.warn(\"Failed to write events to output stream.\");\n    }\n  }\n\n<fim_suffix>  private void printWithBanner(String s, char c) {\n    this.outputBufferPrintStream.print(s);\n    this.outputBufferPrintStream.print(' ');\n    for (int i = 0; i < (CONSOLE_WIDTH - s.length() - 1); i++) {\n      this.outputBufferPrintStream.print(c);\n    }\n    this.outputBufferPrintStream.println();\n  }\n\n  /**\n   * Returns a new {@link org.apache.gobblin.metrics.kafka.KafkaEventReporter.Builder} for {@link org.apache.gobblin.metrics.kafka.KafkaEventReporter}.\n   * Will automatically add all Context tags to the reporter.\n   *\n   * @param context the {@link org.apache.gobblin.metrics.MetricContext} to report\n   * @return KafkaReporter builder\n   */\n  public static Builder<? extends Builder> forContext(MetricContext context) {\n    return new BuilderImpl(context);\n  }\n\n  private static class BuilderImpl extends Builder<BuilderImpl> {\n    public BuilderImpl(MetricContext context) {\n      super(context);\n    }\n\n    @Override\n    protected BuilderImpl self() {\n      return this;\n    }\n  }\n\n  public static abstract class Builder<T extends Builder<T>> extends EventReporter.Builder<T> {\n\n    protected PrintStream output;\n\n    public Builder(MetricContext context) {\n      super(context);\n      this.output = System.out;\n    }\n\n    /**\n     * Write to the given {@link java.io.PrintStream}.\n     *\n     * @param output a {@link java.io.PrintStream} instance.\n     * @return {@code this}\n     */\n    public T outputTo(PrintStream output) {\n      this.output = output;\n      return self();\n    }\n\n    /**\n     * Write to the given {@link java.io.OutputStream}.\n     * @param stream a {@link java.io.OutputStream} instance\n     * @return {@code this}\n     */\n    public T outputTo(OutputStream stream) {\n      try {\n        this.output = new PrintStream(stream, false, Charsets.UTF_8.toString());\n      } catch(UnsupportedEncodingException exception) {\n        LOGGER.error(\"Unsupported encoding in OutputStreamReporter. This is an error with the code itself.\", exception);\n        throw new RuntimeException(exception);\n      }\n      return self();\n    }\n\n    public OutputStreamEventReporter build() throws IOException {\n      return new OutputStreamEventReporter(this);\n    }\n  }\n}<fim_middle>// function below has no smell\n"}