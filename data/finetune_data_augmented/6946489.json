{"text": "<fim_prefix>            }\n            switch (alt319) {\n                case 1 :\n                    {\n                    match('s'); \n                    }\n                    break;\n                case 2 :\n                    {\n                    match('\\\\'); \n                    match('u'); \n                    match('0'); \n                    match('0'); \n                    match('7'); \n                    match('3'); \n                    }\n                    break;\n            }\n            int alt320=2;\n            int LA320_0 = input.LA(1);\n            if ( (LA320_0=='e') ) {\n                alt320=1;\n            }\n            else if ( (LA320_0=='\\\\') ) {\n                alt320=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 320, 0, input);\n                throw nvae;\n            }\n            switch (alt320) {\n                case 1 :\n                    {\n                    match('e'); \n                    }\n                    break;\n                case 2 :\n                    {\n                    match('\\\\'); \n                    match('u'); \n                    match('0'); \n                    match('0'); \n                    match('6'); \n                    match('5'); \n                    }\n                    break;\n            }\n            int alt321=2;\n            int LA321_0 = input.LA(1);\n            if ( (LA321_0=='t') ) {\n                alt321=1;\n            }\n            else if ( (LA321_0=='\\\\') ) {\n                alt321=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 321, 0, input);\n                throw nvae;\n            }\n            switch (alt321) {\n                case 1 :\n                    {\n                    match('t'); \n                    }\n                    break;\n                case 2 :\n                    {\n                    match('\\\\'); \n                    match('u'); \n                    match('0'); \n                    match('0'); \n                    match('7'); \n                    match('4'); \n                    }\n                    break;\n            }\n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mTry() throws RecognitionException {\n        try {\n            int _type = Try;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            int alt322=2;\n            int LA322_0 = input.LA(1);\n            if ( (LA322_0=='t') ) {\n                alt322=1;\n            }\n            else if ( (LA322_0=='\\\\') ) {\n                alt322=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 322, 0, input);\n                throw nvae;\n            }\n            switch (alt322) {\n                case 1 :\n                    {\n                    match('t'); \n                    }\n                    break;\n                case 2 :\n                    {\n                    match('\\\\'); \n                    match('u'); \n                    match('0'); \n                    match('0'); \n                    match('7'); \n                    match('4'); \n                    }\n                    break;\n            }\n            int alt323=2;\n            int LA323_0 = input.LA(1);\n            if ( (LA323_0=='r') ) {\n                alt323=1;\n            }\n            else if ( (LA323_0=='\\\\') ) {\n                alt323=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 323, 0, input);\n                throw nvae;\n            }\n            switch (alt323) {\n                case 1 :\n                    {\n                    match('r'); \n                    }\n                    break;\n                case 2 :\n                    {\n                    match('\\\\'); \n                    match('u'); \n                    match('0'); \n                    match('0'); \n                    match('7'); \n                    match('2'); \n                    }\n                    break;\n            }\n            int alt324=2;\n            int LA324_0 = input.LA(1);\n            if ( (LA324_0=='y') ) {\n                alt324=1;\n            }\n            else if ( (LA324_0=='\\\\') ) {\n                alt324=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 324, 0, input);\n                throw nvae;\n            }\n            switch (alt324) {\n                case 1 :\n                    {\n                    match('y'); \n                    }\n                    break;\n                case 2 :\n                    {\n                    match('\\\\'); \n                    match('u'); \n                    match('0'); \n                    match('0'); \n                    match('7'); \n                    match('9'); \n                    }\n                    break;\n            }\n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mVar() throws RecognitionException {\n        try {\n            int _type = Var;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            int alt325=2;\n            int LA325_0 = input.LA(1);\n            if ( (LA325_0=='v') ) {\n                alt325=1;\n            }\n            else if ( (LA325_0=='\\\\') ) {\n                alt325=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 325, 0, input);\n                throw nvae;\n            }\n            switch (alt325) {\n                case 1 :\n                    {\n                    match('v'); \n                    }\n                    break;\n                case 2 :\n                    {\n                    match('\\\\'); \n                    match('u'); \n                    match('0'); \n                    match('0'); \n                    match('7'); \n                    match('6'); \n                    }\n                    break;\n            }\n            int alt326=2;\n            int LA326_0 = input.LA(1);\n            if ( (LA326_0=='a') ) {\n                alt326=1;\n            }\n            else if ( (LA326_0=='\\\\') ) {\n                alt326=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 326, 0, input);\n                throw nvae;\n            }\n            switch (alt326) {\n                case 1 :\n                    {\n                    match('a'); \n                    }\n                    break;\n                case 2 :\n                    {\n                    match('\\\\'); \n                    match('u'); \n                    match('0'); \n                    match('0'); \n                    match('6'); \n                    match('1'); \n                    }\n                    break;\n            }\n            int alt327=2;\n            int LA327_0 = input.LA(1);\n            if ( (LA327_0=='r') ) {\n                alt327=1;\n            }\n            else if ( (LA327_0=='\\\\') ) {\n                alt327=2;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 327, 0, input);\n                throw nvae;\n            }\n            switch (alt327) {\n                case 1 :\n                    {\n                    match('r'); \n                    }\n                    break;\n                case 2 :\n                    {\n                    match('\\\\'); \n                    match('u'); \n                    match('0'); \n                    match('0'); \n                    match('7'); \n                    match('2'); \n                    }\n                    break;\n            }\n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mExclamationMarkEqualsSign() throws RecognitionException {\n        try {\n            int _type = ExclamationMarkEqualsSign;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"!=\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mPercentSignEqualsSign() throws RecognitionException {\n        try {\n            int _type = PercentSignEqualsSign;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"%=\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mAmpersandAmpersand() throws RecognitionException {\n        try {\n            int _type = AmpersandAmpersand;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"&&\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mAmpersandEqualsSign() throws RecognitionException {\n        try {\n            int _type = AmpersandEqualsSign;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"&=\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n<fim_suffix>    public final void mAsteriskEqualsSign() throws RecognitionException {\n        try {\n            int _type = AsteriskEqualsSign;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"*=\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }<fim_middle>// function below has no smell\n"}