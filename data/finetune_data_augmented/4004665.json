{"text": "<fim_prefix>/*\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n       http://www.apache.org/licenses/LICENSE-2.0\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n */\npackage org.apache.batik.ext.awt.geom;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.io.Serializable;\n/**\n * This class has the same behavior than {@link Polygon2D}, except that\n * the figure is not closed.\n *\n * @version $Id$\n */\npublic class Polyline2D implements Shape, Cloneable, Serializable {\n    private static final float ASSUME_ZERO = 0.001f;\n    /**\n     * The total number of points.  The value of <code>npoints</code>\n     * represents the number of points in this <code>Polyline2D</code>.\n     *\n     */\n    public int npoints;\n    /**\n     * The array of <i>x</i> coordinates. The value of {@link #npoints npoints} is equal to the\n     * number of points in this <code>Polyline2D</code>.\n     *\n     */\n    public float[] xpoints;\n    /**\n     * The array of <i>x</i> coordinates. The value of {@link #npoints npoints} is equal to the\n     * number of points in this <code>Polyline2D</code>.\n     *\n     */\n    public float[] ypoints;\n    /**\n     * Bounds of the Polyline2D.\n     * @see #getBounds()\n     */\n    protected Rectangle2D bounds;\n    private GeneralPath path;\n    private GeneralPath closedPath;\n    /**\n     * Creates an empty Polyline2D.\n     */\n    public Polyline2D() {\n        xpoints = new float[4];\n        ypoints = new float[4];\n    }\n    /**\n     * Constructs and initializes a <code>Polyline2D</code> from the specified\n     * parameters.\n     * @param xpoints an array of <i>x</i> coordinates\n     * @param ypoints an array of <i>y</i> coordinates\n     * @param npoints the total number of points in the\n     *                                <code>Polyline2D</code>\n     * @exception  NegativeArraySizeException if the value of\n     *                       <code>npoints</code> is negative.\n     * @exception  IndexOutOfBoundsException if <code>npoints</code> is\n     *             greater than the length of <code>xpoints</code>\n     *             or the length of <code>ypoints</code>.\n     * @exception  NullPointerException if <code>xpoints</code> or\n     *             <code>ypoints</code> is <code>null</code>.\n     */\n    public Polyline2D(float[] xpoints, float[] ypoints, int npoints) {\n        if (npoints > xpoints.length || npoints > ypoints.length) {\n            throw new IndexOutOfBoundsException(\"npoints > xpoints.length || npoints > ypoints.length\");\n        }\n        this.npoints = npoints;\n        this.xpoints = new float[npoints+1];   // make space for one more to close the polyline\n        this.ypoints = new float[npoints+1];   // make space for one more to close the polyline\n        System.arraycopy(xpoints, 0, this.xpoints, 0, npoints);\n        System.arraycopy(ypoints, 0, this.ypoints, 0, npoints);\n        calculatePath();\n    }\n    /**\n     * Constructs and initializes a <code>Polyline2D</code> from the specified\n     * parameters.\n     * @param xpoints an array of <i>x</i> coordinates\n     * @param ypoints an array of <i>y</i> coordinates\n     * @param npoints the total number of points in the <code>Polyline2D</code>\n     * @exception  NegativeArraySizeException if the value of\n     *                       <code>npoints</code> is negative.\n     * @exception  IndexOutOfBoundsException if <code>npoints</code> is\n     *             greater than the length of <code>xpoints</code>\n     *             or the length of <code>ypoints</code>.\n     * @exception  NullPointerException if <code>xpoints</code> or\n     *             <code>ypoints</code> is <code>null</code>.\n     */\n    public Polyline2D(int[] xpoints, int[] ypoints, int npoints) {\n        if (npoints > xpoints.length || npoints > ypoints.length) {\n            throw new IndexOutOfBoundsException(\"npoints > xpoints.length || npoints > ypoints.length\");\n        }\n        this.npoints = npoints;\n        this.xpoints = new float[npoints];\n        this.ypoints = new float[npoints];\n        for (int i = 0; i < npoints; i++) {\n            this.xpoints[i] = xpoints[i];\n            this.ypoints[i] = ypoints[i];\n        }\n        calculatePath();\n    }\n    public Polyline2D(Line2D line) {\n        npoints = 2;\n        xpoints = new float[2];\n        ypoints = new float[2];\n        xpoints[0] = (float)line.getX1();\n        xpoints[1] = (float)line.getX2();\n        ypoints[0] = (float)line.getY1();\n        ypoints[1] = (float)line.getY2();\n        calculatePath();\n    }\n    /**\n     * Resets this <code>Polyline2D</code> object to an empty polygon.\n     * The coordinate arrays and the data in them are left untouched\n     * but the number of points is reset to zero to mark the old\n     * vertex data as invalid and to start accumulating new vertex\n     * data at the beginning.\n     * All internally-cached data relating to the old vertices\n     * are discarded.\n     * Note that since the coordinate arrays from before the reset\n     * are reused, creating a new empty <code>Polyline2D</code> might\n     * be more memory efficient than resetting the current one if\n     * the number of vertices in the new polyline data is significantly\n     * smaller than the number of vertices in the data from before the\n     * reset.\n     */\n    public void reset() {\n        npoints = 0;\n        bounds = null;\n        path = new GeneralPath();\n        closedPath = null;\n    }\n    public Object clone() {\n        Polyline2D pol = new Polyline2D();\n        for (int i = 0; i < npoints; i++) {\n            pol.addPoint(xpoints[i], ypoints[i]);\n        }\n        return pol;\n    }\n    private void calculatePath() {\n        path = new GeneralPath();\n        path.moveTo(xpoints[0], ypoints[0]);\n        for (int i = 1; i < npoints; i++) {\n            path.lineTo(xpoints[i], ypoints[i]);\n        }\n        bounds = path.getBounds2D();\n        closedPath = null;\n    }\n    private void updatePath(float x, float y) {\n        closedPath = null;\n        if (path == null) {\n            path = new GeneralPath(GeneralPath.WIND_EVEN_ODD);\n            path.moveTo(x, y);\n            bounds = new Rectangle2D.Float(x, y, 0, 0);\n        } else {\n            path.lineTo(x, y);\n            float _xmax = (float)bounds.getMaxX();\n            float _ymax = (float)bounds.getMaxY();\n            float _xmin = (float)bounds.getMinX();\n            float _ymin = (float)bounds.getMinY();\n            if (x < _xmin) _xmin = x;\n            else if (x > _xmax) _xmax = x;\n            if (y < _ymin) _ymin = y;\n            else if (y > _ymax) _ymax = y;\n            bounds = new Rectangle2D.Float(_xmin, _ymin, _xmax - _xmin, _ymax - _ymin);\n        }\n    }\n<fim_suffix>    public void addPoint(Point2D p) {\n        addPoint((float)p.getX(), (float)p.getY());\n    }\n    /**<fim_middle>// function below has no smell\n"}