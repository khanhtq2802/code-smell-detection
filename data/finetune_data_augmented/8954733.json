{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.hive.metastore.tools;\nimport org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\nimport org.apache.hadoop.hive.metastore.TableType;\nimport org.apache.hadoop.hive.metastore.api.FieldSchema;\nimport org.apache.hadoop.hive.metastore.api.Partition;\nimport org.apache.hadoop.hive.metastore.api.Table;\nimport org.apache.thrift.TException;\nimport org.jetbrains.annotations.NotNull;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.stream.IntStream;\nimport static org.apache.hadoop.hive.metastore.tools.Util.addManyPartitions;\nimport static org.apache.hadoop.hive.metastore.tools.Util.addManyPartitionsNoException;\nimport static org.apache.hadoop.hive.metastore.tools.Util.createSchema;\nimport static org.apache.hadoop.hive.metastore.tools.Util.generatePartitionNames;\nimport static java.util.concurrent.Executors.newFixedThreadPool;\nimport static org.apache.hadoop.hive.metastore.tools.Util.throwingSupplierWrapper;\n/**\n * Actual benchmark code.\n */\nfinal class HMSBenchmarks {\n  private static final Logger LOG = LoggerFactory.getLogger(HMSBenchmarks.class);\n  private static final String PARAM_KEY = \"parameter_\";\n  private static final String PARAM_VALUE = \"value_\";\n  static DescriptiveStatistics benchmarkListDatabases(@NotNull MicroBenchmark benchmark,\n                                                      @NotNull BenchData data) {\n    final HMSClient client = data.getClient();\n    return benchmark.measure(() ->\n        throwingSupplierWrapper(() -> client.getAllDatabases(null)));\n  }\n  static DescriptiveStatistics benchmarkListAllTables(@NotNull MicroBenchmark benchmark,\n                                                      @NotNull BenchData data) {\n    final HMSClient client = data.getClient();\n    String dbName = data.dbName;\n    return benchmark.measure(() ->\n        throwingSupplierWrapper(() -> client.getAllTables(dbName, null)));\n  }\n<fim_suffix>  static DescriptiveStatistics benchmarkTableCreate(@NotNull MicroBenchmark bench,\n                                                    @NotNull BenchData data) {\n    final HMSClient client = data.getClient();\n    String dbName = data.dbName;\n    String tableName = data.tableName;\n    Table table = Util.TableBuilder.buildDefaultTable(dbName, tableName);\n    return bench.measure(null,\n        () -> throwingSupplierWrapper(() -> client.createTable(table)),\n        () -> throwingSupplierWrapper(() -> client.dropTable(dbName, tableName)));\n  }\n  static DescriptiveStatistics benchmarkDeleteCreate(@NotNull MicroBenchmark bench,\n                                                     @NotNull BenchData data) {\n    final HMSClient client = data.getClient();\n    String dbName = data.dbName;\n    String tableName = data.tableName;\n    Table table = Util.TableBuilder.buildDefaultTable(dbName, tableName);\n    return bench.measure(\n        () -> throwingSupplierWrapper(() -> client.createTable(table)),\n        () -> throwingSupplierWrapper(() -> client.dropTable(dbName, tableName)),\n        null);\n  }\n  static DescriptiveStatistics benchmarkDeleteWithPartitions(@NotNull MicroBenchmark bench,\n                                                             @NotNull BenchData data,\n                                                             int howMany,\n                                                             int nparams) {\n    final HMSClient client = data.getClient();\n    String dbName = data.dbName;\n    String tableName = data.tableName;\n    // Create many parameters\n    Map<String, String> parameters = new HashMap<>(nparams);\n    for (int i = 0; i < nparams; i++) {\n      parameters.put(PARAM_KEY + i, PARAM_VALUE + i);\n    }\n    return bench.measure(\n        () -> throwingSupplierWrapper(() -> {\n          createPartitionedTable(client, dbName, tableName);\n          addManyPartitions(client, dbName, tableName, parameters,\n              Collections.singletonList(\"d\"), howMany);\n          return true;\n        }),\n        () -> throwingSupplierWrapper(() -> client.dropTable(dbName, tableName)),\n        null);\n  }\n  static DescriptiveStatistics benchmarkGetTable(@NotNull MicroBenchmark bench,\n                                                 @NotNull BenchData data) {\n    final HMSClient client = data.getClient();\n    String dbName = data.dbName;\n    String tableName = data.tableName;\n    createPartitionedTable(client, dbName, tableName);\n    try {\n      return bench.measure(() ->\n          throwingSupplierWrapper(() -> client.getTable(dbName, tableName)));\n    } finally {\n      throwingSupplierWrapper(() -> client.dropTable(dbName, tableName));\n    }\n  }\n  static DescriptiveStatistics benchmarkListTables(@NotNull MicroBenchmark bench,\n                                                   @NotNull BenchData data,\n                                                   int count) {\n    final HMSClient client = data.getClient();\n    String dbName = data.dbName;\n    // Create a bunch of tables\n    String format = \"tmp_table_%d\";\n    try {\n      createManyTables(client, count, dbName, format);\n      return bench.measure(() ->\n          throwingSupplierWrapper(() -> client.getAllTables(dbName, null)));\n    } finally {\n      dropManyTables(client, count, dbName, format);\n    }\n  }\n  static DescriptiveStatistics benchmarkCreatePartition(@NotNull MicroBenchmark bench,\n                                                        @NotNull BenchData data) {\n    final HMSClient client = data.getClient();\n    String dbName = data.dbName;\n    String tableName = data.tableName;\n    createPartitionedTable(client, dbName, tableName);\n    final List<String> values = Collections.singletonList(\"d1\");\n    try {\n      Table t = client.getTable(dbName, tableName);\n      Partition partition = new Util.PartitionBuilder(t)\n          .withValues(values)\n          .build();\n      return bench.measure(null,\n          () -> throwingSupplierWrapper(() -> client.addPartition(partition)),\n          () -> throwingSupplierWrapper(() -> client.dropPartition(dbName, tableName, values)));\n    } catch (TException e) {\n      e.printStackTrace();\n      return new DescriptiveStatistics();\n    } finally {\n      throwingSupplierWrapper(() -> client.dropTable(dbName, tableName));\n    }\n  }\n  static DescriptiveStatistics benchmarkListPartition(@NotNull MicroBenchmark bench,\n                                                      @NotNull BenchData data) {\n    final HMSClient client = data.getClient();\n    String dbName = data.dbName;\n    String tableName = data.tableName;\n    createPartitionedTable(client, dbName, tableName);\n    try {\n      addManyPartitions(client, dbName, tableName, null,\n          Collections.singletonList(\"d\"), 1);\n      return bench.measure(() ->\n          throwingSupplierWrapper(() -> client.listPartitions(dbName, tableName)));\n    } catch (TException e) {\n      e.printStackTrace();\n      return new DescriptiveStatistics();\n    } finally {\n      throwingSupplierWrapper(() -> client.dropTable(dbName, tableName));\n    }\n  }\n  static DescriptiveStatistics benchmarkListManyPartitions(@NotNull MicroBenchmark bench,\n                                                           @NotNull BenchData data,\n                                                           int howMany) {\n    final HMSClient client = data.getClient();\n    String dbName = data.dbName;\n    String tableName = data.tableName;\n    createPartitionedTable(client, dbName, tableName);\n    try {\n      addManyPartitions(client, dbName, tableName, null, Collections.singletonList(\"d\"), howMany);\n      LOG.debug(\"Created {} partitions\", howMany);\n      LOG.debug(\"started benchmark... \");\n      return bench.measure(() ->\n          throwingSupplierWrapper(() -> client.listPartitions(dbName, tableName)));\n    } catch (TException e) {\n      e.printStackTrace();\n      return new DescriptiveStatistics();\n    } finally {\n      throwingSupplierWrapper(() -> client.dropTable(dbName, tableName));\n    }\n  }\n  static DescriptiveStatistics benchmarkGetPartitions(@NotNull MicroBenchmark bench,\n                                                      @NotNull BenchData data,\n                                                      int howMany) {\n    final HMSClient client = data.getClient();\n    String dbName = data.dbName;\n    String tableName = data.tableName;\n    createPartitionedTable(client, dbName, tableName);\n    try {<fim_middle>// function below has no smell\n"}