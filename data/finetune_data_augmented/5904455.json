{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the  \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * $Id$\n */\npackage org.apache.xml.utils;\nimport org.apache.xml.res.XMLErrorResources;\nimport org.apache.xml.res.XMLMessages;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.CDATASection;\nimport org.w3c.dom.Comment;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.DOMImplementation;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.DocumentFragment;\nimport org.w3c.dom.DocumentType;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.EntityReference;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.ProcessingInstruction;\nimport org.w3c.dom.Text;\nimport org.w3c.dom.UserDataHandler;\nimport org.w3c.dom.DOMConfiguration;\nimport org.w3c.dom.TypeInfo;\n/**\n * To be subclassed by classes that wish to fake being nodes.\n * @xsl.usage internal\n */\npublic class UnImplNode implements Node, Element, NodeList, Document\n{\n  /**\n   * Constructor UnImplNode\n   *\n   */\n  public UnImplNode(){}\n  /**\n   * Throw an error.\n   *\n   * @param msg Message Key for the error\n   */\n  public void error(String msg)\n  {\n    System.out.println(\"DOM ERROR! class: \" + this.getClass().getName());\n    throw new RuntimeException(XMLMessages.createXMLMessage(msg, null));\n  }\n  /**\n   * Throw an error.\n   *\n   * @param msg Message Key for the error\n   * @param args Array of arguments to be used in the error message\n   */\n  public void error(String msg, Object[] args)\n  {\n    System.out.println(\"DOM ERROR! class: \" + this.getClass().getName());\n    throw new RuntimeException(XMLMessages.createXMLMessage(msg, args));  //\"UnImplNode error: \"+msg);\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @param newChild New node to append to the list of this node's children\n   *\n   * @return null\n   *\n   * @throws DOMException\n   */\n  public Node appendChild(Node newChild) throws DOMException\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"appendChild not supported!\");\n    return null;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return false\n   */\n  public boolean hasChildNodes()\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"hasChildNodes not supported!\");\n    return false;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return 0\n   */\n  public short getNodeType()\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"getNodeType not supported!\");\n    return 0;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   */\n  public Node getParentNode()\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"getParentNode not supported!\");\n    return null;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   */\n  public NodeList getChildNodes()\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"getChildNodes not supported!\");\n    return null;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   */\n  public Node getFirstChild()\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"getFirstChild not supported!\");\n    return null;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   */\n  public Node getLastChild()\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"getLastChild not supported!\");\n    return null;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   */\n  public Node getNextSibling()\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"getNextSibling not supported!\");\n    return null;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.NodeList\n   *\n   * @return 0\n   */\n  public int getLength()\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"getLength not supported!\");\n    return 0;\n  }  // getLength():int\n  /**\n   * Unimplemented. See org.w3c.dom.NodeList\n   *\n   * @param index index of a child of this node in its list of children\n   *\n   * @return null\n   */\n  public Node item(int index)\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"item not supported!\");\n    return null;\n  }  // item(int):Node\n  /**\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   */\n  public Document getOwnerDocument()\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"getOwnerDocument not supported!\");\n    return null;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   */\n  public String getTagName()\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"getTagName not supported!\");\n    return null;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @return null\n   */\n  public String getNodeName()\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"getNodeName not supported!\");\n    return null;\n  }\n  /** Unimplemented. See org.w3c.dom.Node */\n  public void normalize()\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"normalize not supported!\");\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param name Name of the element\n   *\n   * @return null\n   */\n  public NodeList getElementsByTagName(String name)\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"getElementsByTagName not supported!\");\n    return null;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param oldAttr Attribute to be removed from this node's list of attributes\n   *\n   * @return null\n   *\n   * @throws DOMException\n   */\n  public Attr removeAttributeNode(Attr oldAttr) throws DOMException\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"removeAttributeNode not supported!\");\n    return null;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   * @param newAttr Attribute node to be added to this node's list of attributes\n   *\n   * @return null\n   *\n   * @throws DOMException\n   */\n  public Attr setAttributeNode(Attr newAttr) throws DOMException\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"setAttributeNode not supported!\");\n    return null;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   *\n   * @param name Name of an attribute\n   *\n   * @return false\n   */\n<fim_suffix>  public boolean hasAttribute(String name)\n  {\n    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //\"hasAttribute not supported!\");\n    return false;\n  }\n  /**\n   * Unimplemented. See org.w3c.dom.Element\n   *\n   *\n   * @param name<fim_middle>// function below has no smell\n"}