{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License. \n *  \n */\npackage org.apache.directory.api.ldap.model.filter;\n\n\nimport java.util.Arrays;\n\nimport org.apache.directory.api.i18n.I18n;\nimport org.apache.directory.api.ldap.model.constants.SchemaConstants;\nimport org.apache.directory.api.ldap.model.entry.Value;\nimport org.apache.directory.api.ldap.model.exception.LdapInvalidAttributeValueException;\nimport org.apache.directory.api.ldap.model.schema.AttributeType;\nimport org.apache.directory.api.util.Strings;\n\n\n/**\n * A simple assertion value node.\n * \n * @param <T> The Value type\n * \n * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n */\n<fim_suffix>public abstract class SimpleNode<T> extends LeafNode\n{\n    /** the value */\n    protected Value value;\n    \n    /** The value as a byte[] */\n    protected byte[] bytes;\n\n    /** Constants for comparisons : @gt; */\n    public static final boolean EVAL_GREATER = true;\n\n    /** Constants for comparisons : &lt; */\n    public static final boolean EVAL_LESSER = false;\n\n\n    /**\n     * Creates a new SimpleNode object.\n     * \n     * @param attribute the attribute name\n     * @param bytes the data to inject\n     * @param assertionType the type of assertion represented by this ExprNode\n     */\n    protected SimpleNode( String attribute, byte[] bytes, AssertionType assertionType )\n    {\n        super( attribute, assertionType );\n        this.bytes = bytes;\n    }\n\n\n    /**\n     * Creates a new SimpleNode object.\n     * \n     * @param attributeType the attribute name\n     * @param bytes the data to inject\n     * @param assertionType the type of assertion represented by this ExprNode\n     */\n    protected SimpleNode( AttributeType attributeType, byte[] bytes, AssertionType assertionType )\n    {\n        super( attributeType, assertionType );\n        this.bytes = bytes;\n        \n        try\n        {\n            if ( attributeType.isHR() )\n            {\n                value = new Value( attributeType, Strings.utf8ToString( bytes ) );\n            }\n            else\n            {\n                    value = new Value( attributeType, bytes );\n            }\n        }\n        catch ( LdapInvalidAttributeValueException e )\n        {\n            throw new RuntimeException( e.getMessage() );\n        }\n    }\n\n\n    /**\n     * Creates a new SimpleNode object.\n     * \n     * @param attribute the attribute name\n     * @param string the value to inject\n     * @param assertionType the type of assertion represented by this ExprNode\n     */\n    protected SimpleNode( String attribute, String string, AssertionType assertionType )\n    {\n        super( attribute, assertionType );\n        bytes = Strings.getBytesUtf8( string );\n        \n        if ( attributeType != null )\n        {\n            try\n            {\n                if ( attributeType.isHR() )\n                {\n                    value = new Value( attributeType, string );\n                }\n                else\n                {\n                    value = new Value( attributeType, bytes );\n                }\n            }\n            catch ( LdapInvalidAttributeValueException e )\n            {\n                throw new RuntimeException( e.getMessage() );\n            }\n        }\n    }\n\n\n    /**\n     * Creates a new SimpleNode object.\n     * \n     * @param attributeType the attribute name\n     * @param value the value to test for\n     * @param assertionType the type of assertion represented by this ExprNode\n     */\n    protected SimpleNode( AttributeType attributeType, Value value, AssertionType assertionType )\n    {\n        super( attributeType, assertionType );\n        this.value = value;\n    }\n\n\n    /**\n     * Makes a full clone in new memory space of the current node and children\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public ExprNode clone()\n    {\n        ExprNode clone = super.clone();\n\n        // Clone the value, if we have one\n        if ( value != null )\n        {\n            ( ( SimpleNode<T> ) clone ).value = value.clone();\n        }\n        else\n        {\n            // clone the bytes if any\n            if ( bytes != null )\n            {\n                ( ( SimpleNode<T> ) clone ).bytes = new byte[bytes.length];\n                System.arraycopy( bytes, 0, ( ( SimpleNode<T> ) clone ).bytes, 0, bytes.length );\n            }\n        }\n\n        return clone;\n    }\n\n\n    /**\n     * Gets the value.\n     * \n     * @return the value\n     */\n    public final Value getValue()\n    {\n        if ( value == null )\n        {\n            return new Value( bytes );\n        }\n        else\n        {\n            return value;\n        }\n    }\n\n\n    /** \n     * @return representation of value, escaped for use in a filter if required \n     */\n    public String getEscapedValue()\n    {\n        if ( value != null )\n        {\n            return escapeFilterValue( value.getAttributeType(), value.getBytes() );\n        }\n        else\n        {\n            return escapeFilterValue( null, bytes );\n        }\n    }\n\n\n    /**\n     * Sets the value of this node.\n     * \n     * @param value the value for this node\n     */\n    public void setValue( Value value )\n    {\n        this.value = value;\n        this.bytes = value.getBytes();\n    }\n\n\n    /**\n     * Pretty prints this expression node along with annotation information.\n     *\n     * @param buf the buffer to print into\n     * @return the same buf argument returned for call chaining\n     */\n    public StringBuilder printToBuffer( StringBuilder buf )\n    {\n        if ( ( null != getAnnotations() ) && getAnnotations().containsKey( \"count\" ) )\n        {\n            buf.append( \":[\" );\n            buf.append( getAnnotations().get( \"count\" ).toString() );\n            buf.append( \"] \" );\n        }\n\n        buf.append( ')' );\n\n        return buf;\n    }\n\n\n    /**\n     * @see ExprNode#printRefinementToBuffer(StringBuilder)\n     * @return The buffer in which the refinement has been appended\n     * @throws UnsupportedOperationException if this node isn't a part of a refinement.\n     */\n    @Override\n    public StringBuilder printRefinementToBuffer( StringBuilder buf )\n    {\n        if ( isSchemaAware() )\n        {\n            if ( !attributeType.getOid().equals( SchemaConstants.OBJECT_CLASS_AT_OID ) )\n            {\n                throw new UnsupportedOperationException( I18n.err( I18n.ERR_13318_INVALID_ATTR_IN_REFINEMENT, attribute ) );\n            }\n        }\n        else\n        {\n            if ( ( attribute == null )\n                || !( SchemaConstants.OBJECT_CLASS_AT.equalsIgnoreCase( attribute )\n                || SchemaConstants.OBJECT_CLASS_AT_OID.equalsIgnoreCase( attribute ) ) )\n            {\n                throw new UnsupportedOperationException( I18n.err( I18n.ERR_13318_INVALID_ATTR_IN_REFINEMENT, attribute ) );\n            }\n        }\n\n        buf.append( \"item: \" ).append( value );\n\n        return buf;\n    }\n\n\n    /**\n     * @see Object#hashCode()\n     * @return the instance's hash code \n     */\n    @Override\n    public int hashCode()\n    {\n        int h = 37;\n\n        h = h * 17 + super.hashCode();\n        h = h * 17 + ( value == null ? 0 : value.hashCode() );\n\n        return h;\n    }\n\n\n    /**\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals( Object other )\n    {\n        if ( this == other )\n        {\n            return true;\n        }\n\n        if ( !( other instanceof SimpleNode<?> ) )\n        {\n            return false;\n        }\n\n        if ( other.getClass() != this.getClass() )\n        {\n            return false;\n        }\n\n        if ( !super.equals( other ) )\n        {\n            return false;\n        }\n\n        SimpleNode<?> otherNode = ( SimpleNode<?> ) other;\n\n        if ( value == null )\n        {\n            if ( bytes == null )\n            {\n                return otherNode.bytes == null;\n            }\n            else\n            {\n                return Arrays.equals( bytes,  otherNode.bytes );\n            }\n        }\n        else\n        {\n            return value.equals( otherNode.value );\n        }\n    }\n}<fim_middle>// class below has no smell\n"}