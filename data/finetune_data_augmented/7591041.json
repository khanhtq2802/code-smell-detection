{"text": "<fim_prefix>\t * @param pattern the path pattern to match against\n\t * @return a predicate that matches if the request method is PUT and if the given pattern\n\t * matches against the request path\n\t */\n\tpublic static RequestPredicate PUT(String pattern) {\n\t\treturn method(HttpMethod.PUT).and(path(pattern));\n\t}\n\t/**\n\t * Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}\n\t * and the given {@code pattern} matches against the request path.\n\t * @param pattern the path pattern to match against\n\t * @return a predicate that matches if the request method is PATCH and if the given pattern\n\t * matches against the request path\n\t */\n\tpublic static RequestPredicate PATCH(String pattern) {\n\t\treturn method(HttpMethod.PATCH).and(path(pattern));\n\t}\n\t/**\n\t * Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}\n\t * and the given {@code pattern} matches against the request path.\n\t * @param pattern the path pattern to match against\n\t * @return a predicate that matches if the request method is DELETE and if the given pattern\n\t * matches against the request path\n\t */\n\tpublic static RequestPredicate DELETE(String pattern) {\n\t\treturn method(HttpMethod.DELETE).and(path(pattern));\n\t}\n\t/**\n\t * Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}\n\t * and the given {@code pattern} matches against the request path.\n\t * @param pattern the path pattern to match against\n\t * @return a predicate that matches if the request method is OPTIONS and if the given pattern\n\t * matches against the request path\n\t */\n\tpublic static RequestPredicate OPTIONS(String pattern) {\n\t\treturn method(HttpMethod.OPTIONS).and(path(pattern));\n\t}\n\t/**\n\t * Return a {@code RequestPredicate} that matches if the request's path has the given extension.\n\t * @param extension the path extension to match against, ignoring case\n\t * @return a predicate that matches if the request's path has the given file extension\n\t */\n\tpublic static RequestPredicate pathExtension(String extension) {\n\t\tAssert.notNull(extension, \"'extension' must not be null\");\n\t\treturn new PathExtensionPredicate(extension);\n\t}\n\t/**\n\t * Return a {@code RequestPredicate} that matches if the request's path matches the given\n\t * predicate.\n\t * @param extensionPredicate the predicate to test against the request path extension\n\t * @return a predicate that matches if the given predicate matches against the request's path\n\t * file extension\n\t */\n\tpublic static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {\n\t\treturn new PathExtensionPredicate(extensionPredicate);\n\t}\n\t/**\n\t * Return a {@code RequestPredicate} that matches if the request's query parameter of the given name\n\t * has the given value.\n\t * @param name the name of the query parameter to test against\n\t * @param value the value of the query parameter to test against\n\t * @return a predicate that matches if the query parameter has the given value\n\t * @since 5.0.7\n\t * @see ServerRequest#queryParam(String)\n\t */\n\tpublic static RequestPredicate queryParam(String name, String value) {\n\t\treturn new QueryParamPredicate(name, value);\n\t}\n\t/**\n\t * Return a {@code RequestPredicate} that tests the request's query parameter of the given name\n\t * against the given predicate.\n\t * @param name the name of the query parameter to test against\n\t * @param predicate predicate to test against the query parameter value\n\t * @return a predicate that matches the given predicate against the query parameter of the given name\n\t * @see ServerRequest#queryParam(String)\n\t */\n\tpublic static RequestPredicate queryParam(String name, Predicate<String> predicate) {\n\t\treturn new QueryParamPredicate(name, predicate);\n\t}\n\tprivate static void traceMatch(String prefix, Object desired, @Nullable Object actual, boolean match) {\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(String.format(\"%s \\\"%s\\\" %s against value \\\"%s\\\"\",\n\t\t\t\t\tprefix, desired, match ? \"matches\" : \"does not match\", actual));\n\t\t}\n\t}\n\tprivate static void restoreAttributes(ServerRequest request, Map<String, Object> attributes) {\n\t\trequest.attributes().clear();\n\t\trequest.attributes().putAll(attributes);\n\t}\n\tprivate static Map<String, String> mergePathVariables(Map<String, String> oldVariables,\n\t\t\tMap<String, String> newVariables) {\n\t\tif (!newVariables.isEmpty()) {\n\t\t\tMap<String, String> mergedVariables = new LinkedHashMap<>(oldVariables);\n\t\t\tmergedVariables.putAll(newVariables);\n\t\t\treturn mergedVariables;\n\t\t}\n\t\telse {\n\t\t\treturn oldVariables;\n\t\t}\n\t}\n\tprivate static PathPattern mergePatterns(@Nullable PathPattern oldPattern, PathPattern newPattern) {\n\t\tif (oldPattern != null) {\n\t\t\treturn oldPattern.combine(newPattern);\n\t\t}\n\t\telse {\n\t\t\treturn newPattern;\n\t\t}\n\t}\n\t/**\n\t * Receives notifications from the logical structure of request predicates.\n\t */\n<fim_suffix>\tpublic interface Visitor {\n\t\t/**\n\t\t * Receive notification of an HTTP method predicate.\n\t\t * @param methods the HTTP methods that make up the predicate\n\t\t * @see RequestPredicates#method(HttpMethod)\n\t\t */\n\t\tvoid method(Set<HttpMethod> methods);\n\t\t/**\n\t\t * Receive notification of an path predicate.\n\t\t * @param pattern the path pattern that makes up the predicate\n\t\t * @see RequestPredicates#path(String)\n\t\t */\n\t\tvoid path(String pattern);\n\t\t/**\n\t\t * Receive notification of an path extension predicate.\n\t\t * @param extension the path extension that makes up the predicate\n\t\t * @see RequestPredicates#pathExtension(String)\n\t\t */\n\t\tvoid pathExtension(String extension);\n\t\t/**\n\t\t * Receive notification of a HTTP header predicate.\n\t\t * @param name the name of the HTTP header to check\n\t\t * @param value the desired value of the HTTP header\n\t\t * @see RequestPredicates#headers(Predicate)\n\t\t * @see RequestPredicates#contentType(MediaType...)\n\t\t * @see RequestPredicates#accept(MediaType...)\n\t\t */\n\t\tvoid header(String name, String value);\n\t\t/**\n\t\t * Receive notification of a query parameter predicate.\n\t\t * @param name the name of the query parameter\n\t\t * @param value the desired value of the parameter\n\t\t * @see RequestPredicates#queryParam(String, String)\n\t\t */\n\t\tvoid queryParam(String name, String value);\n\t\t/**\n\t\t * Receive first notification of a logical AND predicate.\n\t\t * The first subsequent notification will contain the left-hand side of the AND-predicate;\n\t\t * followed by {@link #and()}, followed by the right-hand side, followed by {@link #endAnd()}.\n\t\t * @see RequestPredicate#and(RequestPredicate)\n\t\t */\n\t\tvoid startAnd();\n\t\t/**\n\t\t * Receive \"middle\" notification of a logical AND predicate.\n\t\t * The following notification contains the right-hand side, followed by {@link #endAnd()}.\n\t\t * @see RequestPredicate#and(RequestPredicate)\n\t\t */\n\t\tvoid and();\n\t\t/**\n\t\t * Receive last notification of a logical AND predicate.\n\t\t * @see RequestPredicate#and(RequestPredicate)\n\t\t */\n\t\tvoid endAnd();\n\t\t/**\n\t\t * Receive first notification of a logical OR predicate.\n\t\t * The first subsequent notification will contain the left-hand side of the OR-predicate;\n\t\t * the second notification contains the right-hand side, followed by {@link #endOr()}.\n\t\t * @see RequestPredicate#or(RequestPredicate)\n\t\t */\n\t\tvoid startOr();\n\t\t/**\n\t\t * Receive \"middle\" notification of a logical OR predicate.\n\t\t * The following notification contains the right-hand side, followed by {@link #endOr()}.\n\t\t * @see RequestPredicate#or(RequestPredicate)\n\t\t */\n\t\tvoid or();\n\t\t/**\n\t\t * Receive last notification of a logical OR predicate.\n\t\t * @see RequestPredicate#or(RequestPredicate)\n\t\t */\n\t\tvoid endOr();\n\t\t/**\n\t\t * Receive first notification of a negated predicate.\n\t\t * The first subsequent notification will contain the negated predicated, followed\n\t\t * by {@link #endNegate()}.\n\t\t * @see RequestPredicate#negate()\n\t\t */\n\t\tvoid startNegate();\n\t\t/**\n\t\t * Receive last notification of a negated predicate.\n\t\t * @see RequestPredicate#negate()\n\t\t */\n\t\tvoid endNegate();\n\t\t/**\n\t\t * Receive first notification of an unknown predicate.\n\t\t */\n\t\tvoid unknown(RequestPredicate predicate);\n\t}<fim_middle>// class below has no smell\n"}