{"text": "<fim_prefix>/*\n *\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.apache.royale.compiler.clients;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Set;\nimport java.util.Comparator;\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.CommandLineParser;\nimport org.apache.commons.cli.HelpFormatter;\nimport org.apache.commons.cli.MissingArgumentException;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.commons.cli.ParseException;\nimport org.apache.commons.cli.PosixParser;\nimport org.apache.commons.cli.UnrecognizedOptionException;\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.commons.io.output.CountingOutputStream;\nimport org.apache.royale.abc.ABCConstants;\nimport org.apache.royale.abc.ABCLinker;\nimport org.apache.royale.compiler.clients.problems.CompilerProblemCategorizer;\nimport org.apache.royale.compiler.clients.problems.ProblemFormatter;\nimport org.apache.royale.compiler.clients.problems.ProblemPrinter;\nimport org.apache.royale.compiler.clients.problems.ProblemQuery;\nimport org.apache.royale.compiler.clients.problems.WorkspaceProblemFormatter;\nimport org.apache.royale.compiler.common.VersionInfo;\nimport org.apache.royale.compiler.config.CompilerDiagnosticsConstants;\nimport org.apache.royale.compiler.config.RSLSettings;\nimport org.apache.royale.compiler.filespecs.FileSpecification;\nimport org.apache.royale.compiler.filespecs.IFileSpecification;\nimport org.apache.royale.compiler.internal.clients.CLIFactory;\nimport org.apache.royale.compiler.internal.config.FrameInfo;\nimport org.apache.royale.compiler.internal.projects.ASCProject;\nimport org.apache.royale.compiler.internal.projects.CompilerProject;\nimport org.apache.royale.compiler.internal.projects.DefinitionPriority.BasePriority;\nimport org.apache.royale.compiler.internal.targets.AppSWFTarget;\nimport org.apache.royale.compiler.internal.tree.as.FileNode;\nimport org.apache.royale.compiler.internal.units.ABCCompilationUnit;\nimport org.apache.royale.compiler.internal.units.ASCompilationUnit;\nimport org.apache.royale.compiler.internal.units.ImportedASCompilationUnit;\nimport org.apache.royale.compiler.internal.units.SWCCompilationUnit;\nimport org.apache.royale.compiler.internal.workspaces.Workspace;\nimport org.apache.royale.compiler.problems.FileWriteProblem;\nimport org.apache.royale.compiler.problems.ICompilerProblem;\nimport org.apache.royale.compiler.problems.InvalidImportFileProblem;\nimport org.apache.royale.compiler.problems.MultipleExternallyVisibleDefinitionsProblem;\nimport org.apache.royale.compiler.problems.UnfoundPropertyProblem;\nimport org.apache.royale.compiler.targets.ISWFTarget;\nimport org.apache.royale.compiler.targets.ITargetSettings;\nimport org.apache.royale.compiler.targets.ITarget.TargetType;\nimport org.apache.royale.compiler.tree.as.IASNode;\nimport org.apache.royale.compiler.units.ICompilationUnit;\nimport org.apache.royale.compiler.units.requests.IABCBytesRequestResult;\nimport org.apache.royale.swc.ISWC;\nimport org.apache.royale.swc.ISWCLibrary;\nimport org.apache.royale.swc.ISWCManager;\nimport org.apache.royale.swc.ISWCScript;\nimport org.apache.royale.swf.Header;\nimport org.apache.royale.swf.ISWF;\nimport org.apache.royale.swf.io.ISWFWriter;\nimport org.apache.royale.swf.io.SWFWriter;\nimport org.apache.royale.utils.FilenameNormalization;\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Strings;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Sets;\nimport com.google.common.collect.Sets.SetView;\n/**\n * ActionScript Compiler command-line interface.\n * <p>\n * Although {@code ASC} can parse most of the command-line options supported by\n * the old ASC, only a few of them are implemented at the moment.\n * \n * @see <a href=\"https://zerowing.corp.adobe.com/display/compiler/ASC+Client\">ASC client spec</a>\n */\npublic class ASC\n{\n    private static final String DOUBLE_QUOTE = \"\\\"\";\n    /**\n     * A target settings class to determine if a compilation unit is external.\n     * \n     */\n    class ASCTargetSettings implements ITargetSettings\n    {\n        ASCTargetSettings(String rootSourceFile)\n        {\n            this.rootSourceFile = rootSourceFile;\n        }\n        Set<String> externalLibrariesSet;\n        final String rootSourceFile;\n        @Override\n        public boolean isAccessible()\n        {\n            return false;\n        }\n        @Override\n        public boolean isDebugEnabled()\n        {\n            return getEmitDebugInfo();\n        }\n        @Override\n        public boolean isTelemetryEnabled()\n        {\n            return false;\n        }\n        @Override\n        public boolean isOptimized()\n        {\n            return getOptimize();\n        }\n        @Override\n        public boolean useCompression()\n        {\n            return false;\n        }\n        @Override\n        public boolean allowSubclassOverrides()\n        {\n            return false;\n        }\n        @Override\n        public boolean areVerboseStacktracesEnabled()\n        {\n            return false;\n        }\n        @Override\n        public Collection<String> getASMetadataNames()\n        {\n            return getEmitMetadata() ? null : Collections.<String>emptyList();\n        }\n        @Override\n        public File getDefaultCSS()\n        {\n            return null;\n        }\n<fim_suffix>        @Override\n        public int getDefaultBackgroundColor()\n        {\n            return 0;\n        }\n        @Override\n        public int getDefaultFrameRate()\n        {\n            return getFrameRate();\n        }\n        @Override\n        public boolean areDefaultScriptLimitsSet()\n        {\n            return false;\n        }\n        @Override\n        public int getDefaultScriptTimeLimit()\n        {\n            return 0;\n        }\n        @Override\n        public int getDefaultScriptRecursionLimit()\n        {\n            return 0;\n        }\n        @Override\n        public int getDefaultWidth()\n        {\n            return getWidth();\n        }\n        @Override\n        public int getDefaultHeight()\n        {\n            return getHeight();\n        }\n        @Override\n        public Collection<String> getExterns()\n        {\n            return Collections.emptyList();\n        }\n        @Override\n        public Collection<String> getIncludes()\n        {\n            return Collections.emptyList();\n        }\n        @Override\n        public List<FrameInfo> getFrameLabels()\n        {\n            return Collections.emptyList();\n        }\n        @Override\n        public String getSWFMetadata()\n        {\n            return null;\n        }\n        @Override\n        public int getSWFVersion()\n        {\n            return DEFAULT_SWF_VERSION;\n        }\n        @Override\n        public String getPreloaderClassName()\n        {\n            return null;\n        }\n        @Override\n        public String getRootSourceFileName()\n        {\n            return rootSourceFile;\n        }\n        @Override<fim_middle>// function below has no smell\n"}