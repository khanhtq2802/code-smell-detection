{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.hive.ql.parse.repl.dump.events;\n\nimport org.apache.hadoop.hive.conf.HiveConf;\nimport org.apache.hadoop.hive.metastore.api.NotificationEvent;\n\nimport org.apache.hadoop.hive.metastore.messaging.DropPartitionMessage;\nimport org.apache.hadoop.hive.ql.parse.repl.DumpType;\n\nimport org.apache.hadoop.hive.ql.parse.repl.load.DumpMetaData;\n\n<fim_suffix>class DropPartitionHandler extends AbstractEventHandler<DropPartitionMessage> {\n\n  DropPartitionHandler(NotificationEvent event) {\n    super(event);\n  }\n\n  @Override\n  DropPartitionMessage eventMessage(String stringRepresentation) {\n    return deserializer.getDropPartitionMessage(stringRepresentation);\n  }\n\n  @Override\n  public void handle(Context withinContext) throws Exception {\n    LOG.info(\"Processing#{} DROP_PARTITION message : {}\", fromEventId(), eventMessageAsJSON);\n\n    // We do not dump partitions during metadata only bootstrap dump (See TableExport\n    // .getPartitions(), for bootstrap dump we pass tableSpec with TABLE_ONLY set.). So don't\n    // dump partition related events for metadata-only dump.\n    if (withinContext.hiveConf.getBoolVar(HiveConf.ConfVars.REPL_DUMP_METADATA_ONLY)) {\n      return;\n    }\n\n    DumpMetaData dmd = withinContext.createDmd(this);\n    dmd.setPayload(eventMessageAsJSON);\n    dmd.write();\n  }\n\n  @Override\n  public DumpType dumpType() {\n    return DumpType.EVENT_DROP_PARTITION;\n  }\n}<fim_middle>// class below has no smell\n"}