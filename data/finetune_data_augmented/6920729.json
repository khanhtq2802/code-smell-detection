{"text": "<fim_prefix>/* Copyright (c) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage com.google.gdata.data.analytics;\n\nimport com.google.gdata.data.ExtensionDescription;\nimport com.google.gdata.data.ExtensionPoint;\nimport com.google.gdata.data.ExtensionProfile;\n\nimport java.util.List;\n\n/**\n * Describes a data source.\n *\n * \n */\n<fim_suffix>@ExtensionDescription.Default(\n    nsAlias = AnalyticsNamespace.DXP_ALIAS,\n    nsUri = AnalyticsNamespace.DXP,\n    localName = DataSource.XML_NAME)\npublic class DataSource extends ExtensionPoint {\n\n  /** XML element name */\n  static final String XML_NAME = \"dataSource\";\n\n  /**\n   * Default mutable constructor.\n   */\n  public DataSource() {\n    super();\n  }\n\n  @Override\n  public void declareExtensions(ExtensionProfile extProfile) {\n    if (extProfile.isDeclared(DataSource.class)) {\n      return;\n    }\n    extProfile.declare(DataSource.class, Property.getDefaultDescription(false,\n        true));\n    extProfile.declare(DataSource.class, TableId.getDefaultDescription(true,\n        false));\n    extProfile.declare(DataSource.class, TableName.getDefaultDescription(true,\n        false));\n  }\n\n  /**\n   * Returns the properties.\n   *\n   * @return properties\n   */\n  public List<Property> getProperties() {\n    return getRepeatingExtension(Property.class);\n  }\n\n  /**\n   * Adds a new property.\n   *\n   * @param property property\n   */\n  public void addProperty(Property property) {\n    getProperties().add(property);\n  }\n\n  /**\n   * Returns whether it has the properties.\n   *\n   * @return whether it has the properties\n   */\n  public boolean hasProperties() {\n    return hasRepeatingExtension(Property.class);\n  }\n\n  /**\n   * Returns the data source ID.\n   *\n   * @return data source ID\n   */\n  public TableId getTableId() {\n    return getExtension(TableId.class);\n  }\n\n  /**\n   * Sets the data source ID.\n   *\n   * @param tableId data source ID or <code>null</code> to reset\n   */\n  public void setTableId(TableId tableId) {\n    if (tableId == null) {\n      removeExtension(TableId.class);\n    } else {\n      setExtension(tableId);\n    }\n  }\n\n  /**\n   * Returns whether it has the data source ID.\n   *\n   * @return whether it has the data source ID\n   */\n  public boolean hasTableId() {\n    return hasExtension(TableId.class);\n  }\n\n  /**\n   * Returns the table name.\n   *\n   * @return table name\n   */\n  public TableName getTableName() {\n    return getExtension(TableName.class);\n  }\n\n  /**\n   * Sets the table name.\n   *\n   * @param tableName table name or <code>null</code> to reset\n   */\n  public void setTableName(TableName tableName) {\n    if (tableName == null) {\n      removeExtension(TableName.class);\n    } else {\n      setExtension(tableName);\n    }\n  }\n\n  /**\n   * Returns whether it has the table name.\n   *\n   * @return whether it has the table name\n   */\n  public boolean hasTableName() {\n    return hasExtension(TableName.class);\n  }\n\n  @Override\n  protected void validate() {\n  }\n\n  /**\n   * Returns the extension description, specifying whether it is required, and\n   * whether it is repeatable.\n   *\n   * @param required   whether it is required\n   * @param repeatable whether it is repeatable\n   * @return extension description\n   */\n  public static ExtensionDescription getDefaultDescription(boolean required,\n      boolean repeatable) {\n    ExtensionDescription desc =\n        ExtensionDescription.getDefaultDescription(DataSource.class);\n    desc.setRequired(required);\n    desc.setRepeatable(repeatable);\n    return desc;\n  }\n\n  @Override\n  public String toString() {\n    return \"{DataSource}\";\n  }\n\n\n  /**\n   * Returns the value of the named property of this entry. More specifically,\n   * it returns the content of the {@code value} attribute of the\n   * {@code dxp:property} whose {@code name} attribute matches the argument.\n   * Returns {@code null} if no such property exists.\n   *\n   * @param name the property to retrieve from this entry\n   * @return string value of the named property or null if it doesn't exist\n   */\n  public String getProperty(String name) {\n    // We assume that each Property object has unique non null name.  This code\n    // will ignore Property\n    // with null name and if there are two Property objects with the same name,\n    // it will return the\n    // first one it found.\n    if (hasProperties()) {\n      for (Property property : getProperties()) {\n        if (property.hasName() && property.getName().equalsIgnoreCase(name)) {\n          return property.getValue();\n        }\n      }\n    }\n    return null;\n  }\n\n}<fim_middle>// class below is data class\n"}