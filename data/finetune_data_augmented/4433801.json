{"text": "<fim_prefix>            Assert.assertTrue(name.contains(entityName));\n            int timeTaken = array.getJSONObject(i).getInt(\"TIMETAKEN\");\n            Assert.assertTrue(timeTaken > 0, \"TIMETAKEN metric should be greater then zero.\");\n            int bytescopied = array.getJSONObject(i).getInt(\"BYTESCOPIED\");\n            Assert.assertTrue(bytescopied >= 0, \"BYTESCOPIED metric should be greater or equal to zero.\");\n            int copy = array.getJSONObject(i).getInt(\"COPY\");\n            if (withData) {\n                Assert.assertTrue(copy > 0, \"COPY metric should be greater then zero.\");\n            } else {\n                Assert.assertEquals(copy, 0, \"COPY metric should be equal to zero as data was absent.\");\n            }\n        }\n    }\n    /**\n     * Checks that any path in list doesn't contains a string.\n     *\n     * @param paths list of paths\n     * @param shouldNotBePresent string that shouldn't be present\n     */\n    public static void failIfStringFoundInPath(\n        List<Path> paths, String... shouldNotBePresent) {\n        for (Path path : paths) {\n            for (String aShouldNotBePresent : shouldNotBePresent) {\n                if (path.toUri().toString().contains(aShouldNotBePresent)) {\n                    Assert.fail(\"String \" + aShouldNotBePresent + \" was not expected in path \"\n                            +\n                            path.toUri().toString());\n                }\n            }\n        }\n    }\n    /**\n     * Checks that two lists have same size.\n     *\n     * @param expected expected list\n     * @param actual   actual list\n     */\n    public static void checkForListSizes(List<?> expected, List<?> actual) {\n        if (expected.size() != actual.size()) {\n            LOGGER.info(\"expected = \" + expected);\n        }\n        checkForListSize(actual, expected.size());\n    }\n    /**\n     * Checks that two lists have same size.\n     *\n     * @param elements list of elements\n     * @param expectedSize expected size of the list\n     */\n    public static void checkForListSize(List<?> elements, int expectedSize) {\n        if (elements.size() != expectedSize) {\n            LOGGER.info(\"expectedSize = \" + expectedSize);\n            LOGGER.info(\"elements.size() = \" + elements.size());\n            LOGGER.info(\"elements = \" + elements);\n        }\n        Assert.assertEquals(elements.size(), expectedSize,\n            \"Size of expected and actual list don't match.\");\n    }\n    /**\n     * Checks that two lists has expected diff element.\n     *\n     * @param initialState first list\n     * @param finalState   second list\n     * @param filename     expected diff element\n     * @param expectedDiff diff count (positive for new elements)\n     */\n    public static void compareDataStoreStates(List<String> initialState,\n                                              List<String> finalState, String filename,\n                                              int expectedDiff) {\n        if (expectedDiff > -1) {\n            finalState.removeAll(initialState);\n            Assert.assertEquals(finalState.size(), expectedDiff);\n            if (expectedDiff != 0) {\n                Assert.assertTrue(finalState.get(0).contains(filename));\n            }\n        } else {\n            expectedDiff = expectedDiff * -1;\n            initialState.removeAll(finalState);\n            Assert.assertEquals(initialState.size(), expectedDiff);\n            if (expectedDiff != 0) {\n                Assert.assertTrue(initialState.get(0).contains(filename));\n            }\n        }\n    }\n    /**\n     * Checks that two lists has expected diff element.\n     *\n     * @param initialState first list\n     * @param finalState   second list\n     * @param expectedDiff diff count (positive for new elements)\n     */\n    public static void compareDataStoreStates(List<String> initialState,\n                                              List<String> finalState, int expectedDiff) {\n        if (expectedDiff > -1) {\n            finalState.removeAll(initialState);\n            Assert.assertEquals(finalState.size(), expectedDiff);\n        } else {\n            expectedDiff = expectedDiff * -1;\n            initialState.removeAll(finalState);\n            Assert.assertEquals(initialState.size(), expectedDiff);\n        }\n    }\n    /**\n     * Checks that ServiceResponse status is SUCCEEDED.\n     *\n     * @param response ServiceResponse\n     * @throws JAXBException\n     */\n    public static void assertSucceeded(ServiceResponse response) throws JAXBException {\n        final APIResult apiResult = Util.parseResponse(response);\n        Assert.assertNotNull(apiResult.getMessage(), \"Status message is null\");\n        Assert.assertEquals(apiResult.getStatus(), APIResult.Status.SUCCEEDED,\n            \"Status should be SUCCEEDED. Message: \" + apiResult.getMessage());\n        Assert.assertEquals(response.getCode(), 200,\n            \"Status code should be 200. Message: \" + apiResult.getMessage());\n    }\n    /**\n     * Checks that ServiceResponse status is SUCCEEDED.\n     *\n     * @param response ServiceResponse\n     * @return if the response was a success or not\n     */\n    public static boolean checkSucceeded(ServiceResponse response) {\n        final APIResult apiResult;\n        try {\n            apiResult = Util.parseResponse(response);\n        } catch (JAXBException e) {\n            return false;\n        }\n        return apiResult.getStatus() == APIResult.Status.SUCCEEDED\n            && response.getCode() == 200\n            && apiResult.getMessage() != null;\n    }\n    /**\n     * Checks that ProcessInstancesResult status is SUCCEEDED.\n     *\n     * @param response ProcessInstancesResult\n     */\n    public static void assertSucceeded(APIResult response) {\n        Assert.assertNotNull(response.getMessage(), \"Status message is null\");\n        Assert.assertEquals(response.getStatus(), APIResult.Status.SUCCEEDED,\n            \"Status should be SUCCEEDED. Message: \" + response.getMessage());\n    }\n    /**\n     * Checks that ServiceResponse status is status FAILED.\n     *\n     * @param response ServiceResponse\n     * @param message  message for exception\n     * @throws JAXBException\n     */\n    public static void assertFailed(final ServiceResponse response, final String message)\n        throws JAXBException {\n        assertFailedWithStatus(response, 400, message);\n    }\n    /**\n     * Assert that command executed unsuccessfully.\n     *\n     * @param execResult ExecResult of the command execution\n     */\n    public static void assertFailed(ExecResult execResult, String expectedMessage) {\n        Assert.assertFalse(execResult.hasSuceeded(),\n            \"Unexpectedly succeeded execResult: \" + execResult);\n        Assert.assertTrue((execResult.getError() + execResult.getOutput()).contains(expectedMessage),\n            \"Expected error: \" + expectedMessage + \" in execResult: \" + execResult);\n    }\n    /**\n     * Checks that ServiceResponse status is status FAILED with some status code.\n     *\n     * @param response   ServiceResponse\n     * @param statusCode expected status code\n     * @param message    message for exception\n     * @throws JAXBException\n     */\n    public static void assertFailedWithStatus(final ServiceResponse response, final int statusCode,\n                                              final String message) throws JAXBException {\n        Assert.assertNotEquals(response.getMessage(), \"null\", \"response message should not be null\");\n        Assert.assertEquals(Util.parseResponse(response).getStatus(),\n            APIResult.Status.FAILED, message);\n        Assert.assertEquals(response.getCode(), statusCode, message);\n        Assert.assertNotNull(Util.parseResponse(response).getRequestId(), \"RequestId is null\");\n    }\n    /**\n     * Checks that ServiceResponse status is status PARTIAL.\n     *\n     * @param response ServiceResponse\n     * @throws JAXBException\n     */\n    public static void assertPartial(ServiceResponse response) throws JAXBException {\n        Assert.assertEquals(Util.parseResponse(response).getStatus(), APIResult.Status.PARTIAL);\n        Assert.assertEquals(response.getCode(), 200);\n        Assert.assertNotNull(Util.parseResponse(response).getMessage());\n    }\n    /**\n     * Checks that ServiceResponse status is status FAILED with status code 400.\n     *\n     * @param response ServiceResponse\n     * @throws JAXBException\n     */\n    public static void assertFailed(ServiceResponse response) throws JAXBException {\n        Assert.assertNotEquals(response.getMessage(), \"null\",\n            \"response message should not be null\");\n        Assert.assertEquals(Util.parseResponse(response).getStatus(), APIResult.Status.FAILED);\n        Assert.assertEquals(response.getCode(), 400);\n    }\n    /**\n     * Checks that ServiceResponse status is status FAILED with expectedMessage.\n     *\n     * @param response ServiceResponse\n     * @param expectedMessage expected message\n     * @throws JAXBException\n     */\n    public static void assertFailedWithMessage(ServiceResponse response, String expectedMessage) throws JAXBException {\n        assertFailed(response);\n        Assert.assertTrue(response.getMessage().contains(expectedMessage), \"Incorrect message in response\");\n    }\n    /**\n     * Checks that Instance/Triage result status is FAILED.\n     *\n     * @param response APIResult response\n     */\n<fim_suffix>    public static void assertFailed(APIResult response) {\n        Assert.assertNotEquals(response.getMessage(), \"null\",\n            \"response message should not be null\");\n        Assert.assertEquals(response.getStatus(), APIResult.Status.FAILED,\n                \"Status should be FAILED. Message: \" + response.getMessage());\n    }<fim_middle>// function below has no smell\n"}