{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *******************************************************************************/\npackage org.eclipse.xtext.formatting.impl;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.eclipse.xtext.AbstractElement;\nimport org.eclipse.xtext.formatting.IElementMatcherProvider.IElementPattern;\nimport org.eclipse.xtext.grammaranalysis.impl.AbstractNFATransition;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\n\n/**\n * @author Moritz Eysholdt - Initial contribution and API\n */\n<fim_suffix>public class MatcherTransition extends AbstractNFATransition<MatcherState, MatcherTransition> {\n\n\tprotected Set<IElementPattern> commonPatterns;\n\n\tprotected Map<MatcherState, Set<IElementPattern>> guardedPatterns;\n\n\tpublic MatcherTransition(MatcherState source, MatcherState target, boolean ruleCall, AbstractElement loopCenter) {\n\t\tsuper(source, target, ruleCall, loopCenter);\n\t}\n\n\tpublic void addPattern(IElementPattern pattern) {\n\t\tif (commonPatterns == null)\n\t\t\tcommonPatterns = Sets.newHashSet();\n\t\tcommonPatterns.add(pattern);\n\t}\n\n\tpublic void addPattern(MatcherState guard, IElementPattern pattern) {\n\t\tif (guardedPatterns == null)\n\t\t\tguardedPatterns = Maps.newHashMap();\n\t\tSet<IElementPattern> patterns = guardedPatterns.get(guard);\n\t\tif (patterns == null)\n\t\t\tguardedPatterns.put(guard, patterns = Sets.<IElementPattern> newHashSet());\n\t\tpatterns.add(pattern);\n\t}\n\n\tpublic Set<IElementPattern> getCommonPatterns() {\n\t\treturn commonPatterns == null ? Collections.<IElementPattern> emptySet() : commonPatterns;\n\t}\n\n\tpublic Map<MatcherState, Set<IElementPattern>> getGuardPatterns() {\n\t\treturn guardedPatterns == null ? Collections.<MatcherState, Set<IElementPattern>> emptyMap() : guardedPatterns;\n\t}\n\n\tpublic List<IElementPattern> getPatterns(Collection<MatcherState> from) {\n\t\tif (guardedPatterns == null && commonPatterns == null)\n\t\t\treturn Collections.<IElementPattern> emptyList();\n\t\tList<IElementPattern> result = Lists.newArrayList();\n\t\tif (commonPatterns != null)\n\t\t\tresult.addAll(commonPatterns);\n\t\tif (guardedPatterns != null)\n\t\t\tfor (MatcherState state : from) {\n\t\t\t\tSet<IElementPattern> guard = guardedPatterns.get(state);\n\t\t\t\tif (guard != null)\n\t\t\t\t\tresult.addAll(guard);\n\t\t\t}\n\t\treturn result;\n\t}\n\n}<fim_middle>// class below has no smell\n"}