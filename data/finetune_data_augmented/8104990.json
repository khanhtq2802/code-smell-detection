{"text": "<fim_prefix>/**\n * generated by Xtext\n */\npackage org.eclipse.xtext.ui.tests.editor.contentassist.backtrackingContentAssistTest.impl;\n\nimport org.eclipse.emf.common.notify.Notification;\nimport org.eclipse.emf.common.notify.NotificationChain;\n\nimport org.eclipse.emf.ecore.EClass;\nimport org.eclipse.emf.ecore.InternalEObject;\n\nimport org.eclipse.emf.ecore.impl.ENotificationImpl;\n\nimport org.eclipse.xtext.ui.tests.editor.contentassist.backtrackingContentAssistTest.BacktrackingContentAssistTestPackage;\nimport org.eclipse.xtext.ui.tests.editor.contentassist.backtrackingContentAssistTest.Expression;\nimport org.eclipse.xtext.ui.tests.editor.contentassist.backtrackingContentAssistTest.PrefixExp;\n\n/**\n * <!-- begin-user-doc -->\n * An implementation of the model object '<em><b>Prefix Exp</b></em>'.\n * <!-- end-user-doc -->\n * <p>\n * The following features are implemented:\n * </p>\n * <ul>\n *   <li>{@link org.eclipse.xtext.ui.tests.editor.contentassist.backtrackingContentAssistTest.impl.PrefixExpImpl#getOp <em>Op</em>}</li>\n *   <li>{@link org.eclipse.xtext.ui.tests.editor.contentassist.backtrackingContentAssistTest.impl.PrefixExpImpl#getSource <em>Source</em>}</li>\n * </ul>\n *\n * @generated\n */\npublic class PrefixExpImpl extends ExpressionImpl implements PrefixExp\n{\n  /**\n   * The default value of the '{@link #getOp() <em>Op</em>}' attribute.\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @see #getOp()\n   * @generated\n   * @ordered\n   */\n  protected static final String OP_EDEFAULT = null;\n\n  /**\n   * The cached value of the '{@link #getOp() <em>Op</em>}' attribute.\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @see #getOp()\n   * @generated\n   * @ordered\n   */\n  protected String op = OP_EDEFAULT;\n\n  /**\n   * The cached value of the '{@link #getSource() <em>Source</em>}' containment reference.\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @see #getSource()\n   * @generated\n   * @ordered\n   */\n  protected Expression source;\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  protected PrefixExpImpl()\n  {\n    super();\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  protected EClass eStaticClass()\n  {\n    return BacktrackingContentAssistTestPackage.Literals.PREFIX_EXP;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public String getOp()\n  {\n    return op;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public void setOp(String newOp)\n  {\n    String oldOp = op;\n    op = newOp;\n    if (eNotificationRequired())\n      eNotify(new ENotificationImpl(this, Notification.SET, BacktrackingContentAssistTestPackage.PREFIX_EXP__OP, oldOp, op));\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public Expression getSource()\n  {\n    return source;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public NotificationChain basicSetSource(Expression newSource, NotificationChain msgs)\n  {\n    Expression oldSource = source;\n    source = newSource;\n    if (eNotificationRequired())\n    {\n      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BacktrackingContentAssistTestPackage.PREFIX_EXP__SOURCE, oldSource, newSource);\n      if (msgs == null) msgs = notification; else msgs.add(notification);\n    }\n    return msgs;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public void setSource(Expression newSource)\n  {\n    if (newSource != source)\n    {\n      NotificationChain msgs = null;\n      if (source != null)\n        msgs = ((InternalEObject)source).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BacktrackingContentAssistTestPackage.PREFIX_EXP__SOURCE, null, msgs);\n      if (newSource != null)\n        msgs = ((InternalEObject)newSource).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BacktrackingContentAssistTestPackage.PREFIX_EXP__SOURCE, null, msgs);\n      msgs = basicSetSource(newSource, msgs);\n      if (msgs != null) msgs.dispatch();\n    }\n    else if (eNotificationRequired())\n      eNotify(new ENotificationImpl(this, Notification.SET, BacktrackingContentAssistTestPackage.PREFIX_EXP__SOURCE, newSource, newSource));\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)\n  {\n    switch (featureID)\n    {\n      case BacktrackingContentAssistTestPackage.PREFIX_EXP__SOURCE:\n        return basicSetSource(null, msgs);\n    }\n    return super.eInverseRemove(otherEnd, featureID, msgs);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public Object eGet(int featureID, boolean resolve, boolean coreType)\n  {\n    switch (featureID)\n    {\n      case BacktrackingContentAssistTestPackage.PREFIX_EXP__OP:\n        return getOp();\n      case BacktrackingContentAssistTestPackage.PREFIX_EXP__SOURCE:\n        return getSource();\n    }\n    return super.eGet(featureID, resolve, coreType);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public void eSet(int featureID, Object newValue)\n  {\n    switch (featureID)\n    {\n      case BacktrackingContentAssistTestPackage.PREFIX_EXP__OP:\n        setOp((String)newValue);\n        return;\n      case BacktrackingContentAssistTestPackage.PREFIX_EXP__SOURCE:\n        setSource((Expression)newValue);\n        return;\n    }\n    super.eSet(featureID, newValue);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n<fim_suffix>  @Override\n  public void eUnset(int featureID)\n  {\n    switch (featureID)\n    {\n      case BacktrackingContentAssistTestPackage.PREFIX_EXP__OP:\n        setOp(OP_EDEFAULT);\n        return;\n      case BacktrackingContentAssistTestPackage.PREFIX_EXP__SOURCE:\n        setSource((Expression)null);\n        return;\n    }\n    super.eUnset(featureID);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public boolean eIsSet(int featureID)\n  {\n    switch (featureID)\n    {\n      case BacktrackingContentAssistTestPackage.PREFIX_EXP__OP:\n        return OP_EDEFAULT == null ? op != null : !OP_EDEFAULT.equals(op);\n      case BacktrackingContentAssistTestPackage.PREFIX_EXP__SOURCE:\n        return source != null;\n    }\n    return super.eIsSet(featureID);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public String toString()\n  {\n    if (eIsProxy()) return super.toString();\n\n    StringBuffer result = new StringBuffer(super.toString());\n    result.append(\" (op: \");\n    result.append(op);\n    result.append(')');\n    return result.toString();\n  }\n\n} //PrefixExpImpl<fim_middle>// function below has no smell\n"}