{"text": "<fim_prefix>package com.epam.wilma.service.configuration;\n\n/*==========================================================================\n Copyright since 2013, EPAM Systems\n\n This file is part of Wilma.\n\n Wilma is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Wilma is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Wilma.  If not, see <http://www.gnu.org/licenses/>.\n ===========================================================================*/\n\nimport com.epam.wilma.service.domain.StubConfigOrder;\nimport com.epam.wilma.service.domain.StubConfigStatus;\nimport com.epam.wilma.service.domain.WilmaServiceConfig;\nimport com.epam.wilma.service.http.WilmaHttpClient;\nimport com.google.common.collect.ImmutableMap;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Collects the stub configuration related commands.\n *\n * @author Tamas_Pinter\n */\n<fim_suffix>public class StubConfiguration extends AbstractConfiguration {\n    private static final Logger LOG = LoggerFactory.getLogger(StubConfiguration.class);\n\n    private static final String STATUS_GETTER_URL_POSTFIX = \"config/public/stubdescriptor\";\n    private static final String STUB_CONFIG_STATUS_CHANGE_SETTER_URL_POSTFIX = \"config/admin/stub/changestatus\";\n    private static final String STUB_CONFIG_ORDER_CHANGE_SETTER_URL_POSTFIX = \"config/admin/stub/changeorder\";\n    private static final String DROP_STUB_CONFIG_URL_POSTFIX = \"config/admin/stub/drop\";\n    private static final String SAVE_STUB_CONFIG_URL_POSTFIX = \"config/admin/stub/save\";\n    private static final String GROUP_NAME = \"groupname\";\n    private static final String DIRECTION = \"direction\";\n    private static final String NEXT_STATUS = \"nextstatus\";\n\n    /**\n     * Constructor.\n     *\n     * @param config the Wilma server configuration\n     */\n    public StubConfiguration(WilmaServiceConfig config) {\n        super(config);\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param config the Wilma server configuration\n     * @param client the Wilma HTTP client\n     */\n    public StubConfiguration(WilmaServiceConfig config, WilmaHttpClient client) {\n        super(config, client);\n    }\n\n    /**\n     * Gets the stub configuration information.\n     *\n     * @return stub configuration information in JSONObject\n     */\n    public JSONObject getStubConfigInformation() {\n        LOG.debug(\"Call stub configuration API.\");\n\n        return getterRequest(STATUS_GETTER_URL_POSTFIX);\n    }\n\n    /**\n     * Sets the status of the given stub group.\n     *\n     * @param groupName the name of the stub group\n     * @param status    the new status\n     * @return <tt>true</tt> if the request is successful, otherwise return <tt>false</tt>\n     */\n    public boolean setStubConfigStatus(String groupName, StubConfigStatus status) {\n        LOG.debug(\"Call stub status setter API with value: {}, for group: {}\", status, groupName);\n\n        return setterRequest(STUB_CONFIG_STATUS_CHANGE_SETTER_URL_POSTFIX,\n                ImmutableMap.of(GROUP_NAME, groupName, NEXT_STATUS, Boolean.toString(status.getNextStatus())));\n    }\n\n    /**\n     * Sets the new order of the given stub group.\n     *\n     * @param groupName the name of the stub group\n     * @param order     the new order\n     * @return <tt>true</tt> if the request is successful, otherwise return <tt>false</tt>\n     */\n    public boolean setStubConfigOrder(String groupName, StubConfigOrder order) {\n        LOG.debug(\"Call stub order setter API with value: {}, for group: {}\", order, groupName);\n\n        return setterRequest(STUB_CONFIG_ORDER_CHANGE_SETTER_URL_POSTFIX,\n                ImmutableMap.of(GROUP_NAME, groupName, DIRECTION, Integer.toString(order.getDirection())));\n    }\n\n    /**\n     * Drops the given stub group configuration.\n     *\n     * @param groupName the name of the stub group\n     * @return <tt>true</tt> if the request is successful, otherwise return <tt>false</tt>\n     */\n    public boolean dropStubConfig(String groupName) {\n        LOG.debug(\"Call drop stub configuration API for group: {}\", groupName);\n\n        return setterRequest(DROP_STUB_CONFIG_URL_POSTFIX, ImmutableMap.of(GROUP_NAME, groupName));\n    }\n\n    /**\n     * Drops the all stub configuration.<br>\n     * Whichever drop try was unsuccessful then return {@code false} but try to\n     * drop the others. The supposed stub configuration information JSON format\n     * is the following:<br>\n     * <pre>\n     * {\n     *   \"configs\": [\n     *     {\n     *       \"sequenceDescriptors\": [ { ... } ],\n     *       \"dialogDescriptors\": [ { ... } ],\n     *       \"groupname\": \"Default\",\n     *       \"active\": \"true\"\n     *     }\n     *   ]\n     * }\n     * </pre>\n     *\n     * @return <tt>true</tt> if all the stub configuration is dropped\n     * successfully (or was empty and nothing to be dropped), otherwise return <tt>false</tt>\n     */\n    public boolean dropAllStubConfig() {\n        LOG.debug(\"Call drop all stub configuration.\");\n        boolean droppedAllStubConfig = true;\n\n        JSONObject stubConfig = getStubConfigInformation();\n        if ((stubConfig != null) && (stubConfig.length() > 0)) {\n            try {\n                LOG.debug(\"Gets stub configs array from all stub configuration JSON.\");\n                JSONArray configs = stubConfig.getJSONArray(\"configs\");\n                for (int i = 0; i < configs.length(); i++) {\n                    LOG.debug(\"Get the stub group name.\");\n                    String groupName = configs.getJSONObject(i).getString(\"groupname\");\n\n                    droppedAllStubConfig &= dropStubConfig(groupName);\n                    LOG.info(\"Dropped stub configuration: {}\", groupName);\n                }\n            } catch (JSONException e) {\n                LOG.error(\"Error occurred while dropping sub configuration. \", e);\n                droppedAllStubConfig = false;\n            }\n        } else {\n            droppedAllStubConfig = false;\n        }\n\n        return droppedAllStubConfig;\n    }\n\n    /**\n     * Save the actual stub configuration.\n     *\n     * @return <tt>true</tt> if the request is successful, otherwise return <tt>false</tt>\n     */\n    public boolean persistActualStubConfig() {\n        LOG.debug(\"Call save stub configuration API.\");\n\n        return setterRequest(SAVE_STUB_CONFIG_URL_POSTFIX);\n    }\n}<fim_middle>// class below has no smell\n"}