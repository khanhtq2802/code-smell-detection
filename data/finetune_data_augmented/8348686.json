{"text": "<fim_prefix>/* ====================================================================\n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2001, 2017 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n *    if any, must include the following acknowledgment:\n *       \"This product includes software developed by the\n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgment may appear in the software itself,\n *    if and wherever such third-party acknowledgments normally appear.\n *\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n *    \"Apache BCEL\" must not be used to endorse or promote products\n *    derived from this software without prior written permission. For\n *    written permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\",\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\n *    prior written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n */\npackage org.aspectj.apache.bcel.util;\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FilenameFilter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.net.URI;\nimport java.nio.file.FileSystems;\nimport java.nio.file.FileVisitResult;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.SimpleFileVisitor;\nimport java.nio.file.attribute.BasicFileAttributeView;\nimport java.nio.file.attribute.BasicFileAttributes;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n/**\n * Responsible for loading (class) files from the CLASSPATH. Inspired by\n * sun.tools.ClassPath.\n *\n * @author M. Dahm\n * @author Mario Ivankovits\n * @author Andy Clement\n */\npublic class ClassPath implements Serializable {\n\tprivate static final String JRT_FS = \"jrt-fs.jar\";\n\tprivate static ClassPath SYSTEM_CLASS_PATH = null;\n\tprivate PathEntry[] paths;\n\tprivate String class_path;\n\tpublic static ClassPath getSystemClassPath() {\n\t\tif (SYSTEM_CLASS_PATH == null) {\n\t\t\tSYSTEM_CLASS_PATH = new ClassPath();\n\t\t}\n\t\treturn SYSTEM_CLASS_PATH;\n\t}\n\t/**\n\t * Search for classes in given path.\n\t */\n\tpublic ClassPath(String class_path) {\n\t\tthis.class_path = class_path;\n\t\tArrayList<PathEntry> vec = new ArrayList<PathEntry>();\n\t\tfor (StringTokenizer tok = new StringTokenizer(class_path, System.getProperty(\"path.separator\")); tok\n\t\t\t\t.hasMoreTokens();) {\n\t\t\tString path = tok.nextToken();\n\t\t\tif (!path.equals(\"\")) {\n\t\t\t\tFile file = new File(path);\n\t\t\t\ttry {\n\t\t\t\t\tif (file.exists()) {\n\t\t\t\t\t\tif (file.isDirectory()) {\n\t\t\t\t\t\t\tvec.add(new Dir(path));\n\t\t\t\t\t\t} else if (file.getName().endsWith(\"jrt-fs.jar\")) { // TODO a bit crude...\n\t\t\t\t\t\t\tvec.add(new JImage());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvec.add(new Zip(new ZipFile(file)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tSystem.err.println(\"CLASSPATH component \" + file + \": \" + e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpaths = new PathEntry[vec.size()];\n\t\tvec.toArray(paths);\n\t}\n\t/**\n\t * Search for classes in CLASSPATH.\n\t * \n\t * @deprecated Use SYSTEM_CLASS_PATH constant\n\t */\n\t@Deprecated\n\tpublic ClassPath() {\n\t\tthis(getClassPath());\n\t}\n\t/**\n\t * @return used class path string\n\t */\n\t@Override\n\tpublic String toString() {\n\t\treturn class_path;\n\t}\n\t@Override\n\tpublic int hashCode() {\n\t\treturn class_path.hashCode();\n\t}\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (o instanceof ClassPath) {\n\t\t\treturn class_path.equals(((ClassPath) o).class_path);\n\t\t}\n\t\treturn false;\n\t}\n<fim_suffix>\tprivate static final void getPathComponents(String path, ArrayList<String> list) {\n\t\tif (path != null) {\n\t\t\tStringTokenizer tok = new StringTokenizer(path, File.pathSeparator);\n\t\t\twhile (tok.hasMoreTokens()) {\n\t\t\t\tString name = tok.nextToken();\n\t\t\t\tFile file = new File(name);\n\t\t\t\tif (file.exists())\n\t\t\t\t\tlist.add(name);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Checks for class path components in the following properties:\n\t * \"java.class.path\", \"sun.boot.class.path\", \"java.ext.dirs\"\n\t *\n\t * @return class path as used by default by BCEL\n\t */\n\tpublic static final String getClassPath() {\n\t\tString class_path = System.getProperty(\"java.class.path\");\n\t\tString boot_path = System.getProperty(\"sun.boot.class.path\");\n\t\tString ext_path = System.getProperty(\"java.ext.dirs\");\n\t\tString vm_version = System.getProperty(\"java.version\");\n\t\tArrayList<String> list = new ArrayList<String>();\n\t\tgetPathComponents(class_path, list);\n\t\tgetPathComponents(boot_path, list);\n\t\tArrayList<String> dirs = new ArrayList<String>();\n\t\tgetPathComponents(ext_path, dirs);\n\t\tfor (Iterator<String> e = dirs.iterator(); e.hasNext();) {\n\t\t\tFile ext_dir = new File(e.next());\n\t\t\tString[] extensions = ext_dir.list(new FilenameFilter() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean accept(File dir, String name) {\n\t\t\t\t\tname = name.toLowerCase();\n\t\t\t\t\treturn name.endsWith(\".zip\") || name.endsWith(\".jar\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (extensions != null)\n\t\t\t\tfor (int i = 0; i < extensions.length; i++)\n\t\t\t\t\tlist.add(ext_dir.toString() + File.separatorChar + extensions[i]);\n\t\t}\n\t\tStringBuffer buf = new StringBuffer();\n\t\tfor (Iterator<String> e = list.iterator(); e.hasNext();) {\n\t\t\tbuf.append(e.next());\n\t\t\tif (e.hasNext())\n\t\t\t\tbuf.append(File.pathSeparatorChar);\n\t\t}\n\t\t// On Java9 the sun.boot.class.path won't be set. System classes accessible through JRT filesystem \n        if (vm_version.startsWith(\"9\") || vm_version.startsWith(\"10\") || vm_version.startsWith(\"11\")) {\n        \t\tbuf.insert(0, File.pathSeparatorChar);<fim_middle>// function below has no smell\n"}