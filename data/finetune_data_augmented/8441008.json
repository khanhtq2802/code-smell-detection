{"text": "<fim_prefix>\n<fim_suffix>@UriParams\npublic class Mina2Configuration implements Cloneable {\n    @UriPath @Metadata(required = true)\n    private String protocol;\n    @UriPath @Metadata(required = true)\n    private String host;\n    @UriPath @Metadata(required = true)\n    private int port;\n    @UriParam(defaultValue = \"true\")\n    private boolean sync = true;\n    @UriParam(label = \"codec\")\n    private boolean textline;\n    @UriParam(label = \"codec\")\n    private Mina2TextLineDelimiter textlineDelimiter;\n    @UriParam(label = \"codec\")\n    private ProtocolCodecFactory codec;\n    @UriParam(label = \"codec\")\n    private String encoding;\n    @UriParam(defaultValue = \"10000\")\n    private long writeTimeout = 10000;\n    @UriParam(defaultValue = \"30000\")\n    private long timeout = 30000;\n    @UriParam(label = \"producer,advanced\", defaultValue = \"true\")\n    private boolean lazySessionCreation = true;\n    @UriParam(label = \"advanced\")\n    private boolean transferExchange;\n    @UriParam\n    private boolean minaLogger;\n    @UriParam(label = \"codec\", defaultValue = \"-1\")\n    private int encoderMaxLineLength = -1;\n    @UriParam(label = \"codec\", defaultValue = \"1024\")\n    private int decoderMaxLineLength = 1024;\n    @UriParam(label = \"codec\")\n    private List<IoFilter> filters;\n    @UriParam(label = \"codec\", defaultValue = \"true\")\n    private boolean allowDefaultCodec = true;\n    @UriParam\n    private boolean disconnect;\n    @UriParam(label = \"consumer,advanced\", defaultValue = \"true\")\n    private boolean disconnectOnNoReply = true;\n    @UriParam(label = \"consumer,advanced\", defaultValue = \"WARN\")\n    private LoggingLevel noReplyLogLevel = LoggingLevel.WARN;\n    @UriParam(label = \"security\")\n    private SSLContextParameters sslContextParameters;\n    @UriParam(label = \"security\", defaultValue = \"true\")\n    private boolean autoStartTls = true;\n    @UriParam(label = \"advanced\", defaultValue = \"16\")\n    private int maximumPoolSize = 16; // 16 is the default mina setting\n    @UriParam(label = \"advanced\", defaultValue = \"true\")\n    private boolean orderedThreadPoolExecutor = true;\n    @UriParam(label = \"producer,advanced\", defaultValue = \"true\")\n    private boolean cachedAddress = true;\n    @UriParam(label = \"consumer\")\n    private boolean clientMode;\n    /**\n     * Returns a copy of this configuration\n     */\n    public Mina2Configuration copy() {\n        try {\n            return (Mina2Configuration) clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeCamelException(e);\n        }\n    }\n    public String getCharsetName() {\n        if (encoding == null) {\n            return null;\n        }\n        if (!Charset.isSupported(encoding)) {\n            throw new IllegalArgumentException(\"The encoding: \" + encoding + \" is not supported\");\n        }\n        return Charset.forName(encoding).name();\n    }\n    public String getProtocol() {\n        return protocol;\n    }\n    /**\n     * Protocol to use\n     */\n    public void setProtocol(String protocol) {\n        this.protocol = protocol;\n    }\n    public String getHost() {\n        return host;\n    }\n    /**\n     * Hostname to use. Use localhost or 0.0.0.0 for local server as consumer. For producer use the hostname or ip address of the remote server.\n     */\n    public void setHost(String host) {\n        this.host = host;\n    }\n    public int getPort() {\n        return port;\n    }\n    /**\n     * Port number\n     */\n    public void setPort(int port) {\n        this.port = port;\n    }\n    public boolean isSync() {\n        return sync;\n    }\n    /**\n     * Setting to set endpoint as one-way or request-response.\n     */\n    public void setSync(boolean sync) {\n        this.sync = sync;\n    }\n    public boolean isTextline() {\n        return textline;\n    }\n    /**\n     * Only used for TCP. If no codec is specified, you can use this flag to indicate a text line based codec;\n     * if not specified or the value is false, then Object Serialization is assumed over TCP.\n     */\n    public void setTextline(boolean textline) {\n        this.textline = textline;\n    }\n    public Mina2TextLineDelimiter getTextlineDelimiter() {\n        return textlineDelimiter;\n    }\n    /**\n     * Only used for TCP and if textline=true. Sets the text line delimiter to use.\n     * If none provided, Camel will use DEFAULT.\n     * This delimiter is used to mark the end of text.\n     */\n    public void setTextlineDelimiter(Mina2TextLineDelimiter textlineDelimiter) {\n        this.textlineDelimiter = textlineDelimiter;\n    }\n    public ProtocolCodecFactory getCodec() {\n        return codec;\n    }\n    /**\n     * To use a custom minda codec implementation.\n     */\n    public void setCodec(ProtocolCodecFactory codec) {\n        this.codec = codec;\n    }\n    public String getEncoding() {\n        return encoding;\n    }\n    /**\n     * You can configure the encoding (a charset name) to use for the TCP textline codec and the UDP protocol.\n     * If not provided, Camel will use the JVM default Charset\n     */\n    public void setEncoding(String encoding) {\n        this.encoding = encoding;\n    }\n    public long getWriteTimeout() {\n        return writeTimeout;\n    }\n    /**\n     * Maximum amount of time it should take to send data to the MINA session. Default is 10000 milliseconds.\n     */\n    public void setWriteTimeout(long writeTimeout) {\n        this.writeTimeout = writeTimeout;\n    }\n    public long getTimeout() {\n        return timeout;\n    }\n    /**\n     * You can configure the timeout that specifies how long to wait for a response from a remote server.\n     * The timeout unit is in milliseconds, so 60000 is 60 seconds.\n     */\n    public void setTimeout(long timeout) {\n        this.timeout = timeout;\n    }\n    public boolean isLazySessionCreation() {\n        return lazySessionCreation;\n    }\n    /**\n     * Sessions can be lazily created to avoid exceptions, if the remote server is not up and running when the Camel producer is started.\n     */\n    public void setLazySessionCreation(boolean lazySessionCreation) {\n        this.lazySessionCreation = lazySessionCreation;\n    }\n    public boolean isTransferExchange() {\n        return transferExchange;\n    }\n    /**\n     * Only used for TCP. You can transfer the exchange over the wire instead of just the body.\n     * The following fields are transferred: In body, Out body, fault body, In headers, Out headers, fault headers, exchange properties, exchange exception.\n     * This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level.\n     */\n    public void setTransferExchange(boolean transferExchange) {\n        this.transferExchange = transferExchange;\n    }\n    /**\n     * To set the textline protocol encoder max line length. By default the default value of Mina itself is used which are Integer.MAX_VALUE.\n     */\n    public void setEncoderMaxLineLength(int encoderMaxLineLength) {\n        this.encoderMaxLineLength = encoderMaxLineLength;\n    }\n    public int getEncoderMaxLineLength() {\n        return encoderMaxLineLength;\n    }\n    /**\n     * To set the textline protocol decoder max line length. By default the default value of Mina itself is used which are 1024.\n     */\n    public void setDecoderMaxLineLength(int decoderMaxLineLength) {\n        this.decoderMaxLineLength = decoderMaxLineLength;\n    }\n    public int getDecoderMaxLineLength() {\n        return decoderMaxLineLength;\n    }\n    public boolean isMinaLogger() {\n        return minaLogger;\n    }\n    /**\n     * You can enable the Apache MINA logging filter. Apache MINA uses slf4j logging at INFO level to log all input and output.\n     */\n    public void setMinaLogger(boolean minaLogger) {\n        this.minaLogger = minaLogger;\n    }\n    public List<IoFilter> getFilters() {\n        return filters;\n    }\n    /**\n     * You can set a list of Mina IoFilters to use.\n     */\n    public void setFilters(List<IoFilter> filters) {\n        this.filters = filters;\n    }\n    public boolean isDatagramProtocol() {\n        return protocol.equals(\"udp\");\n    }\n    /**\n     * The mina component installs a default codec if both, codec is null and textline is false.\n     * Setting allowDefaultCodec to false prevents the mina component from installing a default codec as the first element in the filter chain.\n     * This is useful in scenarios where another filter must be the first in the filter chain, like the SSL filter.\n     */\n    public void setAllowDefaultCodec(boolean allowDefaultCodec) {\n        this.allowDefaultCodec = allowDefaultCodec;\n    }\n    public boolean isAllowDefaultCodec() {\n        return allowDefaultCodec;\n    }<fim_middle>// class below is data class\n"}