{"text": "<fim_prefix>/*\n * Copyright 2012-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.devtools.autoconfigure;\n\nimport java.util.Set;\nimport java.util.concurrent.CountDownLatch;\n\nimport org.springframework.boot.devtools.classpath.ClassPathFolders;\nimport org.springframework.boot.devtools.filewatch.ChangedFiles;\nimport org.springframework.boot.devtools.filewatch.FileChangeListener;\nimport org.springframework.boot.devtools.filewatch.FileSystemWatcher;\nimport org.springframework.boot.devtools.filewatch.FileSystemWatcherFactory;\nimport org.springframework.boot.devtools.restart.FailureHandler;\nimport org.springframework.boot.devtools.restart.Restarter;\n\n/**\n * {@link FailureHandler} that waits for filesystem changes before retrying.\n *\n * @author Phillip Webb\n */\nclass FileWatchingFailureHandler implements FailureHandler {\n\n\tprivate final FileSystemWatcherFactory fileSystemWatcherFactory;\n\n\tFileWatchingFailureHandler(FileSystemWatcherFactory fileSystemWatcherFactory) {\n\t\tthis.fileSystemWatcherFactory = fileSystemWatcherFactory;\n\t}\n\n\t@Override\n\tpublic Outcome handle(Throwable failure) {\n\t\tCountDownLatch latch = new CountDownLatch(1);\n\t\tFileSystemWatcher watcher = this.fileSystemWatcherFactory.getFileSystemWatcher();\n\t\twatcher.addSourceFolders(\n\t\t\t\tnew ClassPathFolders(Restarter.getInstance().getInitialUrls()));\n\t\twatcher.addListener(new Listener(latch));\n\t\twatcher.start();\n\t\ttry {\n\t\t\tlatch.await();\n\t\t}\n\t\tcatch (InterruptedException ex) {\n\t\t\tThread.currentThread().interrupt();\n\t\t}\n\t\treturn Outcome.RETRY;\n\t}\n\n\tprivate static class Listener implements FileChangeListener {\n\n\t\tprivate final CountDownLatch latch;\n\n<fim_suffix>\t\tListener(CountDownLatch latch) {\n\t\t\tthis.latch = latch;\n\t\t}\n\n\t\t@Override\n\t\tpublic void onChange(Set<ChangedFiles> changeSet) {\n\t\t\tthis.latch.countDown();\n\t\t}\n\n\t}\n\n}<fim_middle>// function below has no smell\n"}