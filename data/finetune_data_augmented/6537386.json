{"text": "<fim_prefix>/**\n * Copyright (c) 2014,2019 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\npackage org.eclipse.smarthome.automation.internal.core.provider.i18n;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\n\nimport org.eclipse.smarthome.automation.type.Input;\nimport org.eclipse.smarthome.automation.type.Output;\nimport org.eclipse.smarthome.core.i18n.I18nUtil;\nimport org.eclipse.smarthome.core.i18n.TranslationProvider;\nimport org.osgi.framework.Bundle;\n\n/**\n * This class is used as utility for resolving the localized {@link ModuleTypes}s. It automatically infers the key if\n * the default text is not a constant with the assistance of {@link TranslationProvider}.\n *\n * @author Ana Dimova - Initial Contribution\n * @author Yordan Mihaylov - updates related to api changes\n *\n */\npublic class ModuleTypeI18nUtil {\n\n    public static final String MODULE_TYPE = \"module-type\";\n\n    public static String getLocalizedModuleTypeLabel(TranslationProvider i18nProvider, Bundle bundle,\n            String moduleTypeUID, String defaultLabel, Locale locale) {\n        String key = I18nUtil.stripConstantOr(defaultLabel, () -> inferModuleTypeKey(moduleTypeUID, \"label\"));\n        return i18nProvider.getText(bundle, key, defaultLabel, locale);\n    }\n\n    public static String getLocalizedModuleTypeDescription(TranslationProvider i18nProvider, Bundle bundle,\n            String moduleTypeUID, String defaultDescription, Locale locale) {\n        String key = I18nUtil.stripConstantOr(defaultDescription,\n                () -> inferModuleTypeKey(moduleTypeUID, \"description\"));\n        return i18nProvider.getText(bundle, key, defaultDescription, locale);\n    }\n\n    public static List<Input> getLocalizedInputs(TranslationProvider i18nProvider, List<Input> inputs, Bundle bundle,\n            String uid, Locale locale) {\n        List<Input> linputs = new ArrayList<Input>();\n        if (inputs != null) {\n            for (Input input : inputs) {\n                String inputName = input.getName();\n                String ilabel = ModuleTypeI18nUtil.getInputLabel(i18nProvider, bundle, uid, inputName, input.getLabel(),\n                        locale);\n                String idescription = ModuleTypeI18nUtil.getInputDescription(i18nProvider, bundle, uid, inputName,\n                        input.getDescription(), locale);\n                linputs.add(new Input(inputName, input.getType(), ilabel, idescription, input.getTags(),\n                        input.isRequired(), input.getReference(), input.getDefaultValue()));\n            }\n        }\n        return linputs;\n    }\n\n    public static List<Output> getLocalizedOutputs(TranslationProvider i18nProvider, List<Output> outputs,\n            Bundle bundle, String uid, Locale locale) {\n        List<Output> loutputs = new ArrayList<Output>();\n        if (outputs != null) {\n            for (Output output : outputs) {\n                String outputName = output.getName();\n                String olabel = ModuleTypeI18nUtil.getOutputLabel(i18nProvider, bundle, uid, outputName,\n                        output.getLabel(), locale);\n                String odescription = ModuleTypeI18nUtil.getOutputDescription(i18nProvider, bundle, uid, outputName,\n                        output.getDescription(), locale);\n                loutputs.add(new Output(outputName, output.getType(), olabel, odescription, output.getTags(),\n                        output.getReference(), output.getDefaultValue()));\n            }\n        }\n        return loutputs;\n    }\n\n<fim_suffix>    private static String getInputLabel(TranslationProvider i18nProvider, Bundle bundle, String moduleTypeUID,\n            String inputName, String defaultLabel, Locale locale) {\n        String key = I18nUtil.stripConstantOr(defaultLabel, () -> inferInputKey(moduleTypeUID, inputName, \"label\"));\n        return i18nProvider.getText(bundle, key, defaultLabel, locale);\n    }\n\n    private static String getInputDescription(TranslationProvider i18nProvider, Bundle bundle, String moduleTypeUID,\n            String inputName, String defaultDescription, Locale locale) {\n        String key = I18nUtil.stripConstantOr(defaultDescription,\n                () -> inferInputKey(moduleTypeUID, inputName, \"description\"));\n        return i18nProvider.getText(bundle, key, defaultDescription, locale);\n    }\n\n    private static String getOutputLabel(TranslationProvider i18nProvider, Bundle bundle, String ruleTemplateUID,\n            String outputName, String defaultLabel, Locale locale) {\n        String key = I18nUtil.stripConstantOr(defaultLabel, () -> inferOutputKey(ruleTemplateUID, outputName, \"label\"));\n        return i18nProvider.getText(bundle, key, defaultLabel, locale);\n    }\n\n    public static String getOutputDescription(TranslationProvider i18nProvider, Bundle bundle, String moduleTypeUID,\n            String outputName, String defaultDescription, Locale locale) {\n        String key = I18nUtil.stripConstantOr(defaultDescription,\n                () -> inferOutputKey(moduleTypeUID, outputName, \"description\"));\n        return i18nProvider.getText(bundle, key, defaultDescription, locale);\n    }\n\n    private static String inferModuleTypeKey(String moduleTypeUID, String lastSegment) {\n        return MODULE_TYPE + \".\" + moduleTypeUID + \".\" + lastSegment;\n    }\n\n    private static String inferInputKey(String moduleTypeUID, String inputName, String lastSegment) {\n        return MODULE_TYPE + \".input.\" + moduleTypeUID + \".name.\" + inputName + \".\" + lastSegment;\n    }\n\n    private static String inferOutputKey(String moduleTypeUID, String outputName, String lastSegment) {\n        return MODULE_TYPE + \".output.\" + moduleTypeUID + \".name.\" + outputName + \".\" + lastSegment;\n    }\n}<fim_middle>// function below has no smell\n"}