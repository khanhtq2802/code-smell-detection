{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cocoon.classloader;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.net.URLStreamHandlerFactory;\nimport java.util.List;\n\nimport org.apache.cocoon.util.WildcardMatcherHelper;\n\n\n/**\n * This class loader reverses the search order for classes.  It checks this classloader\n * before it checks its parent. In addition it can be configured with includes and excludes.\n *\n * @version $Id$\n * @since 2.2\n */\n<fim_suffix>public class DefaultClassLoader extends URLClassLoader {\n\n    protected final List includes;\n    protected final List excludes;\n\n    /**\n     * Alternate constructor to define a parent and initial <code>URL</code>\n     * s.\n     */\n    public DefaultClassLoader(URL[] urls, List includePatterns, List excludePatterns, final ClassLoader parent) {\n        this(urls, includePatterns, excludePatterns, parent, null);\n    }\n\n    /**\n     * Alternate constructor to define a parent, initial <code>URL</code>s,\n     * and a default <code>URLStreamHandlerFactory</code>.\n     */\n    public DefaultClassLoader(final URL[] urls, List includePatterns, List excludePatterns, ClassLoader parent, URLStreamHandlerFactory factory) {\n        super(urls, parent, factory);\n        this.includes = includePatterns;\n        this.excludes = excludePatterns;\n    }\n\n    protected boolean tryClassHere(String name) {\n        // don't include classes in the java or javax.servlet package\n        if ( name != null && (name.startsWith(\"java.\") || name.startsWith(\"javax.servlet\") ) ) {\n            return false;\n        }\n        // Scan includes, then excludes\n        boolean tryHere;\n        \n        // If no explicit includes, try here\n        if (this.includes == null || this.includes.size() == 0) {\n            tryHere = true;\n        } else {\n            // See if it matches include patterns\n            tryHere = false;\n            for (int i = 0; i < this.includes.size(); i++) {\n                if (WildcardMatcherHelper.match((String)includes.get(i), name) != null) {\n                    tryHere = true;\n                    break;\n                }\n            }\n        }\n        \n        // Go through the exclusion list\n        if (tryHere && this.excludes != null && this.excludes.size() > 0) {\n            for (int i = 0; i < this.excludes.size(); i++) {\n                if (WildcardMatcherHelper.match((String)excludes.get(i), name) != null) {\n                    tryHere = false;\n                    break;\n                }\n            }\n        }\n        \n        return tryHere;\n    }\n\n    protected Class getClass(String name)\n    throws ClassNotFoundException {\n        return findClass(name);\n    }\n\n    /**\n     * Loads the class from this <code>ClassLoader</class>.  If the\n     * class does not exist in this one, we check the parent.  Please\n     * note that this is the exact opposite of the\n     * <code>ClassLoader</code> spec.  We use it to work around\n     * inconsistent class loaders from third party vendors.\n     *\n     * @param     name the name of the class\n     * @param     resolve if <code>true</code> then resolve the class\n     * @return    the resulting <code>Class</code> object\n     * @exception ClassNotFoundException if the class could not be found\n     */\n    public final Class loadClass(String name, boolean resolve) throws ClassNotFoundException {\n        // First check if it's already loaded\n        Class clazz = findLoadedClass(name);\n\n        if (clazz == null) {\n            \n            final ClassLoader parent = getParent();\n\n            if (tryClassHere(name)) {\n                try {\n                    clazz = this.getClass(name);\n                } catch (ClassNotFoundException cnfe) {\n                    if (parent == null) {\n                        // Propagate exception\n                        throw cnfe;                        \n                    }\n                }\n            }\n            \n            if (clazz == null) {\n                if (parent == null) {\n                    throw new ClassNotFoundException(name);\n                } else {\n                    // Will throw a CFNE if not found in parent\n                    clazz = parent.loadClass(name);\n                }\n            }\n        }\n\n        if (resolve) {\n            resolveClass(clazz);\n        }\n\n        return clazz;\n    }\n\n    /**\n     * Gets a resource from this <code>ClassLoader</class>.  If the\n     * resource does not exist in this one, we check the parent.\n     * Please note that this is the exact opposite of the\n     * <code>ClassLoader</code> spec.  We use it to work around\n     * inconsistent class loaders from third party vendors.\n     *\n     * @param name of resource\n     */\n    public final URL getResource(final String name) {\n        URL resource = findResource(name);\n        ClassLoader parent = this.getParent();\n        if (resource == null && parent != null) {\n            resource = parent.getResource(name);\n        }\n\n        return resource;\n    }\n\n    /**\n     * Adds a new directory of class files.\n     * \n     * @param file\n     *            for jar or directory\n     * @throws IOException\n     */\n    public final void addDirectory(File file) throws IOException {\n        this.addURL(file.getCanonicalFile().toURL());\n    }\n\n    /**\n     * Adds a new URL\n     */\n\n    public void addURL(URL url) {\n        super.addURL(url);\n    }\n}\n<fim_middle>// class below has no smell\n"}