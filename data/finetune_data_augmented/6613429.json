{"text": "<fim_prefix>    Basemap basemap = new Basemap(mVectorTiledLayer);\n    // create a map with the basemap\n    ArcGISMap mMap = new ArcGISMap(basemap);\n    // create a viewpoint from lat, long, scale\n    Viewpoint sanDiegoPoint = new Viewpoint(32.7157, -117.1611, 200000);\n    // set initial map extent\n    mMap.setInitialViewpoint(sanDiegoPoint);\n    // set the map to be displayed in this view\n    mMapView.setMap(mMap);\n    // inflate navigation drawer\n    mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);\n    mDrawerList = (ListView) findViewById(R.id.left_drawer);\n    FloatingActionButton mDirectionFab = (FloatingActionButton) findViewById(R.id.directionFAB);\n    // update UI when attribution view changes\n    final FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) mDirectionFab.getLayoutParams();\n    mMapView.addAttributionViewLayoutChangeListener(new View.OnLayoutChangeListener() {\n      @Override\n      public void onLayoutChange(\n          View view, int left, int top, int right, int bottom,\n          int oldLeft, int oldTop, int oldRight, int oldBottom) {\n        int heightDelta = (bottom - oldBottom);\n        params.bottomMargin += heightDelta;\n      }\n    });\n    setupDrawer();\n    setupSymbols();\n    mProgressDialog = new ProgressDialog(this);\n    mProgressDialog.setTitle(getString(R.string.progress_title));\n    mProgressDialog.setMessage(getString(R.string.progress_message));\n    mDirectionFab.setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        mProgressDialog.show();\n        if (getSupportActionBar() != null) {\n          getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n          getSupportActionBar().setHomeButtonEnabled(true);\n          setTitle(getString(R.string.app_name));\n        }\n        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);\n        // create RouteTask instance\n        mRouteTask = new RouteTask(getApplicationContext(), getString(R.string.routing_service));\n        final ListenableFuture<RouteParameters> listenableFuture = mRouteTask.createDefaultParametersAsync();\n        listenableFuture.addDoneListener(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              if (listenableFuture.isDone()) {\n                int i = 0;\n                mRouteParams = listenableFuture.get();\n                // create stops\n                Stop stop1 = new Stop(new Point(-117.15083257944445, 32.741123367963446, SpatialReferences.getWgs84()));\n                Stop stop2 = new Stop(new Point(-117.15557279683529, 32.703360305883045, SpatialReferences.getWgs84()));\n                List<Stop> routeStops = new ArrayList<>();\n                // add stops\n                routeStops.add(stop1);\n                routeStops.add(stop2);\n                mRouteParams.setStops(routeStops);\n                // set return directions as true to return turn-by-turn directions in the result of\n                  // getDirectionManeuvers().\n                mRouteParams.setReturnDirections(true);\n                // solve\n                RouteResult result = mRouteTask.solveRouteAsync(mRouteParams).get();\n                final List routes = result.getRoutes();\n                mRoute = (Route) routes.get(0);\n                // create a mRouteSymbol graphic\n                Graphic routeGraphic = new Graphic(mRoute.getRouteGeometry(), mRouteSymbol);\n                // add mRouteSymbol graphic to the map\n                mGraphicsOverlay.getGraphics().add(routeGraphic);\n                // get directions\n                // NOTE: to get turn-by-turn directions Route Parameters should set returnDirection flag as true\n                final List<DirectionManeuver> directions = mRoute.getDirectionManeuvers();\n                String[] directionsArray = new String[directions.size()];\n                for (DirectionManeuver dm : directions) {\n                  directionsArray[i++] = dm.getDirectionText();\n                }\n                Log.d(TAG, directions.get(0).getGeometry().getExtent().getXMin() + \"\");\n                Log.d(TAG, directions.get(0).getGeometry().getExtent().getYMin() + \"\");\n                // Set the adapter for the list view\n                mDrawerList.setAdapter(new ArrayAdapter<>(getApplicationContext(),\n                    R.layout.directions_layout, directionsArray));\n                if (mProgressDialog.isShowing()) {\n                  mProgressDialog.dismiss();\n                }\n                mDrawerList.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n                  @Override\n                  public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n                    if (mGraphicsOverlay.getGraphics().size() > 3) {\n                      mGraphicsOverlay.getGraphics().remove(mGraphicsOverlay.getGraphics().size() - 1);\n                    }\n                    mDrawerLayout.closeDrawers();\n                    DirectionManeuver dm = directions.get(position);\n                    Geometry gm = dm.getGeometry();\n                    Viewpoint vp = new Viewpoint(gm.getExtent(), 20);\n                    mMapView.setViewpointAsync(vp, 3);\n                    SimpleLineSymbol selectedRouteSymbol = new SimpleLineSymbol(SimpleLineSymbol.Style.SOLID,\n                        Color.GREEN, 5);\n                    Graphic selectedRouteGraphic = new Graphic(directions.get(position).getGeometry(),\n                        selectedRouteSymbol);\n                    mGraphicsOverlay.getGraphics().add(selectedRouteGraphic);\n                  }\n                });\n              }\n            } catch (Exception e) {\n              Log.e(TAG, e.getMessage());\n            }\n          }\n        });\n      }\n    });\n  }\n  /**\n   * Set up the Source, Destination and mRouteSymbol graphics symbol\n   */\n  private void setupSymbols() {\n    mGraphicsOverlay = new GraphicsOverlay();\n    //add the overlay to the map view\n    mMapView.getGraphicsOverlays().add(mGraphicsOverlay);\n    //[DocRef: Name=Picture Marker Symbol Drawable-android, Category=Fundamentals, Topic=Symbols and Renderers]\n    //Create a picture marker symbol from an app resource\n    BitmapDrawable startDrawable = (BitmapDrawable) ContextCompat.getDrawable(this, R.drawable.ic_source);\n    final PictureMarkerSymbol pinSourceSymbol;\n    try {\n      pinSourceSymbol = PictureMarkerSymbol.createAsync(startDrawable).get();\n      pinSourceSymbol.loadAsync();\n      pinSourceSymbol.addDoneLoadingListener(new Runnable() {\n        @Override\n        public void run() {\n          //add a new graphic as start point\n          mSourcePoint = new Point(-117.15083257944445, 32.741123367963446, SpatialReferences.getWgs84());\n          Graphic pinSourceGraphic = new Graphic(mSourcePoint, pinSourceSymbol);\n          mGraphicsOverlay.getGraphics().add(pinSourceGraphic);\n        }\n      });\n      pinSourceSymbol.setOffsetY(20);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    } catch (ExecutionException e) {\n      e.printStackTrace();\n    }\n    //[DocRef: END]\n    BitmapDrawable endDrawable = (BitmapDrawable) ContextCompat.getDrawable(this, R.drawable.ic_destination);\n    final PictureMarkerSymbol pinDestinationSymbol;\n    try {\n      pinDestinationSymbol = PictureMarkerSymbol.createAsync(endDrawable).get();\n      pinDestinationSymbol.loadAsync();\n      pinDestinationSymbol.addDoneLoadingListener(new Runnable() {\n        @Override\n        public void run() {\n          //add a new graphic as end point\n          mDestinationPoint = new Point(-117.15557279683529, 32.703360305883045, SpatialReferences.getWgs84());\n          Graphic destinationGraphic = new Graphic(mDestinationPoint, pinDestinationSymbol);\n          mGraphicsOverlay.getGraphics().add(destinationGraphic);\n        }\n      });\n      pinDestinationSymbol.setOffsetY(20);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    } catch (ExecutionException e) {\n      e.printStackTrace();\n    }\n    //[DocRef: END]\n    mRouteSymbol = new SimpleLineSymbol(SimpleLineSymbol.Style.SOLID, Color.BLUE, 5);\n  }\n  @Override\n  protected void onPause() {\n    super.onPause();\n    mMapView.pause();\n  }\n  @Override\n  protected void onResume() {\n    super.onResume();\n    mMapView.resume();\n  }\n<fim_suffix>  @Override\n  protected void onDestroy() {\n    super.onDestroy();\n    mMapView.dispose();\n  }<fim_middle>// function below has no smell\n"}