{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.apache.geode.cache;\n\nimport java.io.Serializable;\n\nimport javax.print.attribute.EnumSyntax;\n\nimport org.apache.geode.annotations.Immutable;\n\n/**\n * The action that an {@link org.apache.geode.cache.EvictionAlgorithm} takes.\n *\n * @since GemFire 5.0\n * @see org.apache.geode.cache.EvictionAlgorithm\n * @see org.apache.geode.internal.cache.EvictionAttributesImpl\n */\n@Immutable\npublic final class EvictionAction extends EnumSyntax implements Serializable {\n  private static final long serialVersionUID = -98840597493242980L;\n  /**\n   * Canonical EvictionAction that represents no eviction\n   */\n  @Immutable\n  public static final EvictionAction NONE = new EvictionAction(0);\n\n  /**\n   * Perform a {@link org.apache.geode.cache.Region#localDestroy(Object) localDestory} on the least\n   * recently used region entry.\n   */\n  @Immutable\n  public static final EvictionAction LOCAL_DESTROY = new EvictionAction(1);\n\n  /**\n   * Write the value of the least recently used region entry to disk and <code>null</code>-out its\n   * value in the VM to free up heap space. Note that this action is only available when the region\n   * has been configured to access data on disk.\n   */\n  @Immutable\n  public static final EvictionAction OVERFLOW_TO_DISK = new EvictionAction(2);\n\n  /**\n   * The default eviction action is to {@linkplain #LOCAL_DESTROY locally destroy} an Entry.\n   */\n  @Immutable\n  public static final EvictionAction DEFAULT_EVICTION_ACTION = LOCAL_DESTROY;\n\n  private EvictionAction(int val) {\n    super(val);\n  }\n\n  private static final String[] stringTable = {\"none\", \"local-destroy\", \"overflow-to-disk\",};\n\n  @Override\n  protected String[] getStringTable() {\n    return stringTable;\n  }\n\n  // TODO post Java 1.8.0u45 uncomment final flag, see JDK-8076152\n  @Immutable\n  private static final EvictionAction[] enumValueTable = {NONE, LOCAL_DESTROY, OVERFLOW_TO_DISK};\n\n  @Override\n  protected EnumSyntax[] getEnumValueTable() {\n    return enumValueTable;\n  }\n\n  public boolean isLocalDestroy() {\n    return this == LOCAL_DESTROY;\n  }\n\n  public boolean isOverflowToDisk() {\n    return this == OVERFLOW_TO_DISK;\n  }\n\n  public boolean isNone() {\n    return this == NONE;\n  }\n\n  /**\n   * Returns the eviction action the corresponds to the given parameter. Returns <code>null</code>\n   * if no action corresponds.\n   *\n   * @since GemFire 6.5\n   */\n  public static EvictionAction parseValue(int v) {\n    if (v < 0 || v >= enumValueTable.length) {\n      return null;\n    } else {\n      return enumValueTable[v];\n    }\n  }\n\n  /**\n   *\n   * @return the action parsed from the provided string. If there are problems with parsing NONE is\n   *         returned.\n   */\n<fim_suffix>  public static EvictionAction parseAction(String s) {\n    if (s == null)\n      return NONE;\n    if (s.length() < 1)\n      return NONE;\n    for (int i = 0; i < stringTable.length; ++i) {\n      if (s.equals(stringTable[i])) {\n        return enumValueTable[i];\n      }\n    }\n    return NONE;\n  }\n}<fim_middle>// function below has no smell\n"}