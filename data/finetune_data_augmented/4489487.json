{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.drill.exec.expr.fn.impl.conv;\n\nimport org.apache.drill.exec.expr.DrillSimpleFunc;\nimport org.apache.drill.exec.expr.annotations.FunctionTemplate;\nimport org.apache.drill.exec.expr.annotations.Output;\nimport org.apache.drill.exec.expr.annotations.Param;\nimport org.apache.drill.exec.expr.holders.SmallIntHolder;\nimport org.apache.drill.exec.expr.holders.TinyIntHolder;\nimport org.apache.drill.exec.expr.holders.IntHolder;\nimport org.apache.drill.exec.expr.holders.BigIntHolder;\nimport org.apache.drill.exec.expr.holders.Float4Holder;\nimport org.apache.drill.exec.expr.holders.Float8Holder;\nimport org.apache.drill.exec.expr.holders.UInt1Holder;\nimport org.apache.drill.exec.expr.holders.UInt2Holder;\nimport org.apache.drill.exec.expr.holders.UInt4Holder;\nimport org.apache.drill.exec.expr.holders.UInt8Holder;\nimport org.apache.drill.exec.expr.annotations.FunctionTemplate.FunctionScope;\nimport org.apache.drill.exec.expr.annotations.FunctionTemplate.NullHandling;\n\n\npublic class RoundFunctions {\n\n  /*\n   * Following are round functions with no parameter. Per the SQL standard we simply return the same output\n   * type as the input type for exact inputs (int, bigint etc) and inexact types (float, double).\n   *\n   * TODO: Need to incorporate round function which accepts two parameters here.\n   */\n  @FunctionTemplate(name = \"round\", scope = FunctionScope.SIMPLE, nulls = FunctionTemplate.NullHandling.NULL_IF_NULL)\n  public static class RoundInt implements DrillSimpleFunc {\n\n    @Param  IntHolder in;\n    @Output IntHolder out;\n\n    public void setup() {\n    }\n\n    public void eval() {\n      out.value = in.value;\n    }\n  }\n\n  @FunctionTemplate(name = \"round\", scope = FunctionScope.SIMPLE, nulls = NullHandling.NULL_IF_NULL)\n  public static class RoundBigInt implements DrillSimpleFunc {\n\n    @Param BigIntHolder in;\n    @Output BigIntHolder out;\n\n    public void setup() {\n    }\n\n    public void eval() {\n      out.value = in.value;\n    }\n  }\n\n  @FunctionTemplate(name = \"round\", scope = FunctionScope.SIMPLE, nulls = NullHandling.NULL_IF_NULL)\n  public static class RoundSmallInt implements DrillSimpleFunc {\n\n    @Param SmallIntHolder in;\n    @Output SmallIntHolder out;\n\n    public void setup() {\n    }\n\n    public void eval() {\n      out.value = in.value;\n    }\n  }\n\n\n  @FunctionTemplate(name = \"round\", scope = FunctionScope.SIMPLE, nulls = NullHandling.NULL_IF_NULL)\n  public static class RoundTinyInt implements DrillSimpleFunc {\n\n    @Param TinyIntHolder in;\n    @Output TinyIntHolder out;\n\n    public void setup() {\n    }\n\n    public void eval() {\n      out.value = in.value;\n    }\n  }\n\n\n<fim_suffix>  @FunctionTemplate(name = \"round\", scope = FunctionScope.SIMPLE, nulls = NullHandling.NULL_IF_NULL)\n  public static class RoundUInt1 implements DrillSimpleFunc {\n\n    @Param UInt1Holder in;\n    @Output UInt1Holder out;\n\n    public void setup() {\n    }\n\n    public void eval() {\n      out.value = in.value;\n    }\n  }\n\n\n  @FunctionTemplate(name = \"round\", scope = FunctionScope.SIMPLE, nulls = NullHandling.NULL_IF_NULL)\n  public static class RoundUInt2 implements DrillSimpleFunc {\n\n    @Param UInt2Holder in;\n    @Output UInt2Holder out;\n\n    public void setup() {\n    }\n\n    public void eval() {\n      out.value = in.value;\n    }\n  }\n\n\n  @FunctionTemplate(name = \"round\", scope = FunctionScope.SIMPLE, nulls = NullHandling.NULL_IF_NULL)\n  public static class RoundUInt4 implements DrillSimpleFunc {\n\n    @Param UInt4Holder in;\n    @Output UInt4Holder out;\n\n    public void setup() {\n    }\n\n    public void eval() {\n      out.value = in.value;\n    }\n  }\n\n\n  @FunctionTemplate(name = \"round\", scope = FunctionScope.SIMPLE, nulls = NullHandling.NULL_IF_NULL)\n  public static class RoundUInt8 implements DrillSimpleFunc {\n\n    @Param UInt8Holder in;\n    @Output UInt8Holder out;\n\n    public void setup() {\n    }\n\n    public void eval() {\n      out.value = in.value;\n    }\n  }\n\n  @FunctionTemplate(name = \"round\", scope = FunctionScope.SIMPLE, nulls = NullHandling.NULL_IF_NULL)\n  public static class RoundFloat4 implements DrillSimpleFunc {\n\n    @Param Float4Holder in;\n    @Output Float4Holder out;\n\n    public void setup() {\n    }\n\n    public void eval() {\n      if (Float.isNaN(in.value)) {\n        out.value = 0;\n      } else if(Float.isInfinite(in.value)) {\n        out.value = Math.signum(in.value) > 0 ? Integer.MAX_VALUE : Integer.MIN_VALUE;\n      } else {\n        java.math.BigDecimal input = java.math.BigDecimal.valueOf(in.value);\n        out.value = input.setScale(0, java.math.RoundingMode.HALF_UP).floatValue();\n      }\n    }\n  }\n\n  @FunctionTemplate(name = \"round\", scope = FunctionScope.SIMPLE, nulls = NullHandling.NULL_IF_NULL)\n  public static class RoundFloat8 implements DrillSimpleFunc {\n\n    @Param Float8Holder in;\n    @Output Float8Holder out;\n\n    public void setup() {\n    }\n\n    public void eval() {\n      if (Double.isNaN(in.value)) {\n        out.value = 0;\n      } else if(Double.isInfinite(in.value)) {\n        out.value = Math.signum(in.value) > 0 ? Long.MAX_VALUE : Long.MIN_VALUE;\n      } else {\n        java.math.BigDecimal input = java.math.BigDecimal.valueOf(in.value);\n        out.value = input.setScale(0, java.math.RoundingMode.HALF_UP).doubleValue();\n      }\n    }\n  }\n}<fim_middle>// class below has no smell\n"}