{"text": "<fim_prefix>   * @return original name if it contained the prefix, or the\n   * input name with the prefix prepended.\n   */\n  public static String enforcePrefix(String name) {\n    if (name.startsWith(REGISTRY_NAME_PREFIX)) {\n      return name;\n    } else {\n      return new StringBuilder(REGISTRY_NAME_PREFIX).append(name).toString();\n    }\n  }\n  /**\n   * Helper method to construct a properly prefixed registry name based on the group.\n   * @param group reporting group\n   * @param names optional child elements of the registry name. If exactly one element is provided\n   *              and it already contains the required prefix and group name then this value will be used,\n   *              and the group parameter will be ignored.\n   * @return fully-qualified and prefixed registry name, with overrides applied.\n   */\n  public static String getRegistryName(SolrInfoBean.Group group, String... names) {\n    String fullName;\n    String prefix = new StringBuilder(REGISTRY_NAME_PREFIX).append(group.name()).append('.').toString();\n    // check for existing prefix and group\n    if (names != null && names.length > 0 && names[0] != null && names[0].startsWith(prefix)) {\n      // assume the first segment already was expanded\n      if (names.length > 1) {\n        String[] newNames = new String[names.length - 1];\n        System.arraycopy(names, 1, newNames, 0, newNames.length);\n        fullName = MetricRegistry.name(names[0], newNames);\n      } else {\n        fullName = MetricRegistry.name(names[0]);\n      }\n    } else {\n      fullName = MetricRegistry.name(group.toString(), names);\n    }\n    return enforcePrefix(fullName);\n  }\n  // reporter management\n  /**\n   * Create and register {@link SolrMetricReporter}-s specific to a {@link org.apache.solr.core.SolrInfoBean.Group}.\n   * Note: reporters that specify neither \"group\" nor \"registry\" attributes are treated as universal -\n   * they will always be loaded for any group. These two attributes may also contain multiple comma- or\n   * whitespace-separated values, in which case the reporter will be loaded for any matching value from\n   * the list. If both attributes are present then only \"group\" attribute will be processed.\n   * @param pluginInfos plugin configurations\n   * @param loader resource loader\n   * @param coreContainer core container\n   * @param solrCore optional solr core\n   * @param tag optional tag for the reporters, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @param group selected group, not null\n   * @param registryNames optional child registry name elements\n   */\n  public void loadReporters(PluginInfo[] pluginInfos, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, String tag, SolrInfoBean.Group group, String... registryNames) {\n    if (pluginInfos == null || pluginInfos.length == 0) {\n      return;\n    }\n    String registryName = getRegistryName(group, registryNames);\n    for (PluginInfo info : pluginInfos) {\n      String target = info.attributes.get(\"group\");\n      if (target == null) { // no \"group\"\n        target = info.attributes.get(\"registry\");\n        if (target != null) {\n          String[] targets = target.split(\"[\\\\s,]+\");\n          boolean found = false;\n          for (String t : targets) {\n            t = enforcePrefix(t);\n            if (registryName.equals(t)) {\n              found = true;\n              break;\n            }\n          }\n          if (!found) {\n            continue;\n          }\n        } else {\n          // neither group nor registry specified.\n          // always register this plugin for all groups and registries\n        }\n      } else { // check groups\n        String[] targets = target.split(\"[\\\\s,]+\");\n        boolean found = false;\n        for (String t : targets) {\n          if (group.toString().equals(t)) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          continue;\n        }\n      }\n      try {\n        loadReporter(registryName, loader, coreContainer, solrCore, info, tag);\n      } catch (Exception e) {\n        log.warn(\"Error loading metrics reporter, plugin info: \" + info, e);\n      }\n    }\n  }\n  /**\n   * Convenience wrapper for {@link SolrMetricManager#loadReporter(String, SolrResourceLoader, CoreContainer, SolrCore, PluginInfo, String)}\n   * passing {@link SolrCore#getResourceLoader()} and {@link SolrCore#getCoreContainer()} as the extra parameters.\n   */\n  public void loadReporter(String registry, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    loadReporter(registry,\n        solrCore.getResourceLoader(),\n        solrCore.getCoreContainer(),\n        solrCore,\n        pluginInfo,\n        tag);\n  }\n  /**\n   * Convenience wrapper for {@link SolrMetricManager#loadReporter(String, SolrResourceLoader, CoreContainer, SolrCore, PluginInfo, String)}\n   * passing {@link CoreContainer#getResourceLoader()} and null solrCore and tag.\n   */\n  public void loadReporter(String registry, CoreContainer coreContainer, PluginInfo pluginInfo) throws Exception {\n    loadReporter(registry,\n        coreContainer.getResourceLoader(),\n        coreContainer,\n        null,\n        pluginInfo,\n        null);\n  }\n  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param coreContainer core container\n   * @param solrCore optional solr core\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, CoreContainer coreContainer, SolrCore solrCore, PluginInfo pluginInfo, String tag) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[]{SolrMetricManager.class, String.class},\n        new Object[]{this, registry}\n    );\n    // prepare MDC for plugins that want to use its properties\n    MDCLoggingContext.setNode(coreContainer);\n    if (solrCore != null) {\n      MDCLoggingContext.setCore(solrCore);\n    }\n    if (tag != null) {\n      // add instance tag to MDC\n      MDC.put(\"tag\", \"t:\" + tag);\n    }\n    try {\n      if (reporter instanceof SolrCoreReporter) {\n        ((SolrCoreReporter)reporter).init(pluginInfo, solrCore);\n      } else if (reporter instanceof SolrCoreContainerReporter) {\n        ((SolrCoreContainerReporter)reporter).init(pluginInfo, coreContainer);\n      } else {\n        reporter.init(pluginInfo);\n      }\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    } finally {\n      MDCLoggingContext.clear();\n      MDC.remove(\"tag\");\n    }\n    registerReporter(registry, pluginInfo.name, tag, reporter);\n  }\n<fim_suffix>  private void registerReporter(String registry, String name, String tag, SolrMetricReporter reporter) throws Exception {\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        throw new Exception(\"Could not obtain lock to modify reporters registry: \" + registry);\n      }\n    } catch (InterruptedException e) {\n      throw new Exception(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        perRegistry = new HashMap<>();\n        reporters.put(registry, perRegistry);\n      }\n      if (tag != null && !tag.isEmpty()) {\n        name = name + \"@\" + tag;\n      }\n      SolrMetricReporter oldReporter = perRegistry.get(name);\n      if (oldReporter != null) { // close it\n        log.info(\"Replacing existing reporter '\" + name + \"' in registry '\" + registry + \"': \" + oldReporter.toString());\n        oldReporter.close();\n      }\n      perRegistry.put(name, reporter);\n    } finally {\n      reportersLock.unlock();\n    }\n  }<fim_middle>// function below has no smell\n"}