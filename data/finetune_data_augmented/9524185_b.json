{"text": "<fim_prefix> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.tools.rumen;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.hadoop.mapred.JobPriority;\nimport org.apache.hadoop.mapreduce.Counters;\nimport org.apache.hadoop.mapreduce.JobACL;\nimport org.apache.hadoop.mapreduce.JobID;\nimport org.apache.hadoop.mapreduce.jobhistory.HistoryEvent;\nimport org.apache.hadoop.mapreduce.jobhistory.JobFinishedEvent;\nimport org.apache.hadoop.mapreduce.jobhistory.JobInfoChangeEvent;\nimport org.apache.hadoop.mapreduce.jobhistory.JobInitedEvent;\nimport org.apache.hadoop.mapreduce.jobhistory.JobPriorityChangeEvent;\nimport org.apache.hadoop.mapreduce.jobhistory.JobStatusChangedEvent;\nimport org.apache.hadoop.mapreduce.jobhistory.JobSubmittedEvent;\nimport org.apache.hadoop.mapreduce.jobhistory.JobUnsuccessfulCompletionEvent;\nimport org.apache.hadoop.security.authorize.AccessControlList;\n<fim_suffix>public class Job20LineHistoryEventEmitter extends HistoryEventEmitter {\n  static List<SingleEventEmitter> nonFinals =\n      new LinkedList<SingleEventEmitter>();\n  static List<SingleEventEmitter> finals = new LinkedList<SingleEventEmitter>();\n  Long originalSubmitTime = null;\n  static {\n    nonFinals.add(new JobSubmittedEventEmitter());\n    nonFinals.add(new JobPriorityChangeEventEmitter());\n    nonFinals.add(new JobStatusChangedEventEmitter());\n    nonFinals.add(new JobInitedEventEmitter());\n    nonFinals.add(new JobInfoChangeEventEmitter());\n    finals.add(new JobUnsuccessfulCompletionEventEmitter());\n    finals.add(new JobFinishedEventEmitter());\n  }\n  Job20LineHistoryEventEmitter() {\n    super();\n  }\n  static private class JobSubmittedEventEmitter extends SingleEventEmitter {\n    HistoryEvent maybeEmitEvent(ParsedLine line, String jobIDName,\n        HistoryEventEmitter thatg) {\n      JobID jobID = JobID.forName(jobIDName);\n      if (jobIDName == null) {\n        return null;\n      }\n      String submitTime = line.get(\"SUBMIT_TIME\");\n      String jobConf = line.get(\"JOBCONF\");\n      String user = line.get(\"USER\");\n      if (user == null) {\n        user = \"nulluser\";\n      }\n      String jobName = line.get(\"JOBNAME\");\n      String jobQueueName = line.get(\"JOB_QUEUE\");// could be null\n      String workflowId = line.get(\"WORKFLOW_ID\");\n      if (workflowId == null) {\n        workflowId = \"\";\n      }\n      String workflowName = line.get(\"WORKFLOW_NAME\");\n      if (workflowName == null) {\n        workflowName = \"\";\n      }\n      String workflowNodeName = line.get(\"WORKFLOW_NODE_NAME\");\n      if (workflowNodeName == null) {\n        workflowNodeName = \"\";\n      }\n      String workflowAdjacencies = line.get(\"WORKFLOW_ADJACENCIES\");\n      if (workflowAdjacencies == null) {\n        workflowAdjacencies = \"\";\n      }\n      String workflowTags = line.get(\"WORKFLOW_TAGS\");\n      if (workflowTags == null) {\n        workflowTags = \"\";\n      }\n      if (submitTime != null) {\n        Job20LineHistoryEventEmitter that =\n            (Job20LineHistoryEventEmitter) thatg;\n        that.originalSubmitTime = Long.parseLong(submitTime);\n        Map<JobACL, AccessControlList> jobACLs =\n          new HashMap<JobACL, AccessControlList>();\n        return new JobSubmittedEvent(jobID, jobName, user,\n            that.originalSubmitTime, jobConf, jobACLs, jobQueueName,\n            workflowId, workflowName, workflowNodeName, workflowAdjacencies,\n            workflowTags);\n      }\n      return null;\n    }\n  }\n  static private class JobPriorityChangeEventEmitter extends SingleEventEmitter {\n    HistoryEvent maybeEmitEvent(ParsedLine line, String jobIDName,\n        HistoryEventEmitter thatg) {\n      JobID jobID = JobID.forName(jobIDName);\n      if (jobIDName == null) {\n        return null;\n      }\n      String priority = line.get(\"JOB_PRIORITY\");\n      if (priority != null) {\n        return new JobPriorityChangeEvent(jobID, JobPriority.valueOf(priority));\n      }\n      return null;\n    }\n  }\n  static private class JobInitedEventEmitter extends SingleEventEmitter {\n    HistoryEvent maybeEmitEvent(ParsedLine line, String jobIDName,\n        HistoryEventEmitter thatg) {\n      if (jobIDName == null) {\n        return null;\n      }\n      JobID jobID = JobID.forName(jobIDName);\n      String launchTime = line.get(\"LAUNCH_TIME\");\n      String status = line.get(\"JOB_STATUS\");\n      String totalMaps = line.get(\"TOTAL_MAPS\");\n      String totalReduces = line.get(\"TOTAL_REDUCES\");\n      String uberized = line.get(\"UBERIZED\");\n      if (launchTime != null && totalMaps != null && totalReduces != null) {\n        return new JobInitedEvent(jobID, Long.parseLong(launchTime), Integer\n            .parseInt(totalMaps), Integer.parseInt(totalReduces), status,\n            Boolean.parseBoolean(uberized));\n      }\n      return null;\n    }\n  }\n  static private class JobStatusChangedEventEmitter extends SingleEventEmitter {\n    HistoryEvent maybeEmitEvent(ParsedLine line, String jobIDName,\n        HistoryEventEmitter thatg) {\n      if (jobIDName == null) {\n        return null;\n      }\n      JobID jobID = JobID.forName(jobIDName);\n      String status = line.get(\"JOB_STATUS\");\n      if (status != null) {\n        return new JobStatusChangedEvent(jobID, status);\n      }\n      return null;\n    }\n  }\n  static private class JobInfoChangeEventEmitter extends SingleEventEmitter {\n    HistoryEvent maybeEmitEvent(ParsedLine line, String jobIDName,\n        HistoryEventEmitter thatg) {\n      if (jobIDName == null) {\n        return null;\n      }\n      JobID jobID = JobID.forName(jobIDName);\n      String launchTime = line.get(\"LAUNCH_TIME\");\n      if (launchTime != null) {\n        Job20LineHistoryEventEmitter that =\n            (Job20LineHistoryEventEmitter) thatg;\n        return new JobInfoChangeEvent(jobID, that.originalSubmitTime, Long\n            .parseLong(launchTime));\n      }\n      return null;\n    }\n  }\n  static private class JobUnsuccessfulCompletionEventEmitter extends\n      SingleEventEmitter {\n    HistoryEvent maybeEmitEvent(ParsedLine line, String jobIDName,\n        HistoryEventEmitter thatg) {\n      if (jobIDName == null) {\n        return null;\n      }\n      JobID jobID = JobID.forName(jobIDName);\n      String finishTime = line.get(\"FINISH_TIME\");\n      String status = line.get(\"JOB_STATUS\");\n      String finishedMaps = line.get(\"FINISHED_MAPS\");\n      String finishedReduces = line.get(\"FINISHED_REDUCES\");\n      if (status != null && !status.equalsIgnoreCase(\"success\")\n          && finishTime != null && finishedMaps != null\n          && finishedReduces != null) {\n        return new JobUnsuccessfulCompletionEvent(jobID, Long\n            .parseLong(finishTime), Integer.parseInt(finishedMaps), Integer\n            .parseInt(finishedReduces), -1, -1, -1, -1, status);\n      }\n      return null;\n    }\n  }\n  static private class JobFinishedEventEmitter extends SingleEventEmitter {\n    HistoryEvent maybeEmitEvent(ParsedLine line, String jobIDName,\n        HistoryEventEmitter thatg) {\n      if (jobIDName == null) {\n        return null;\n      }\n      JobID jobID = JobID.forName(jobIDName);\n      String finishTime = line.get(\"FINISH_TIME\");\n      String status = line.get(\"JOB_STATUS\");\n      String finishedMaps = line.get(\"FINISHED_MAPS\");\n      String finishedReduces = line.get(\"FINISHED_REDUCES\");\n      String failedMaps = line.get(\"FAILED_MAPS\");\n      String failedReduces = line.get(\"FAILED_REDUCES\");\n      String counters = line.get(\"COUNTERS\");\n      if (status != null && status.equalsIgnoreCase(\"success\")\n          && finishTime != null && finishedMaps != null\n          && finishedReduces != null) {\n        return new JobFinishedEvent(jobID, Long.parseLong(finishTime), Integer\n            .parseInt(finishedMaps), Integer.parseInt(finishedReduces), Integer\n            .parseInt(failedMaps), Integer.parseInt(failedReduces), -1, -1,\n            null, null, maybeParseCounters(counters));\n      }\n      return null;\n    }\n  }\n  @Override\n  List<SingleEventEmitter> finalSEEs() {\n    return finals;\n  }\n  @Override\n  List<SingleEventEmitter> nonFinalSEEs() {\n    return nonFinals;\n  }\n}<fim_middle>// class below is data class and blob\n"}