{"text": "<fim_prefix>/*\n * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\npackage software.amazon.awssdk.auth.signer.params;\n\nimport java.time.Clock;\nimport java.util.Optional;\nimport software.amazon.awssdk.annotations.SdkPublicApi;\nimport software.amazon.awssdk.auth.credentials.AwsCredentials;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.utils.Validate;\n\n/**\n * Parameters that are used during signing.\n *\n * Required parameters vary based on signer implementations. Signer implementations might only use a\n * subset of params in this class.\n */\n@SdkPublicApi\npublic class Aws4SignerParams {\n    private final Boolean doubleUrlEncode;\n    private final AwsCredentials awsCredentials;\n    private final String signingName;\n    private final Region signingRegion;\n    private final Integer timeOffset;\n    private final Clock signingClockOverride;\n\n    Aws4SignerParams(BuilderImpl<?> builder) {\n        this.doubleUrlEncode = Validate.paramNotNull(builder.doubleUrlEncode, \"Double Url encode\");\n        this.awsCredentials = Validate.paramNotNull(builder.awsCredentials, \"Credentials\");\n        this.signingName = Validate.paramNotNull(builder.signingName, \"service signing name\");\n        this.signingRegion = Validate.paramNotNull(builder.signingRegion, \"signing region\");\n        this.timeOffset = builder.timeOffset;\n        this.signingClockOverride = builder.signingClockOverride;\n    }\n\n    public static Builder builder() {\n        return new BuilderImpl<>();\n    }\n\n    public Boolean doubleUrlEncode() {\n        return doubleUrlEncode;\n    }\n\n    public AwsCredentials awsCredentials() {\n        return awsCredentials;\n    }\n\n    public String signingName() {\n        return signingName;\n    }\n\n<fim_suffix>    public Region signingRegion() {\n        return signingRegion;\n    }\n\n    public Optional<Integer> timeOffset() {\n        return Optional.ofNullable(timeOffset);\n    }\n\n    public Optional<Clock> signingClockOverride() {\n        return Optional.ofNullable(signingClockOverride);\n    }\n\n    public interface Builder<B extends Builder> {\n\n        /**\n         * Set this value to double url-encode the resource path when constructing the\n         * canonical request.\n         *\n         * By default, all services except S3 enable double url-encoding.\n         *\n         * @param doubleUrlEncode Set true to enable double url encoding. Otherwise false.\n         */\n        B doubleUrlEncode(Boolean doubleUrlEncode);\n\n        /**\n         * Sets the aws credentials to use for computing the signature.\n         *\n         * @param awsCredentials Aws Credentials to use for computing the signature.\n         */\n        B awsCredentials(AwsCredentials awsCredentials);\n\n        /**\n         * The name of the AWS service to be used for computing the signature.\n         *\n         * @param signingName Name of the AWS service to be used for computing the signature.\n         */\n        B signingName(String signingName);\n\n        /**\n         * The AWS region to be used for computing the signature.\n         *\n         * @param signingRegion AWS region to be used for computing the signature.\n         */\n        B signingRegion(Region signingRegion);\n\n        /**\n         * The time offset (for clock skew correction) to use when computing the signing date for the request.\n         *\n         * @param timeOffset The time offset (for clock skew correction) to use when computing the signing date for the request.\n         */\n        B timeOffset(Integer timeOffset);\n\n        /**\n         * The clock to use for overriding the signing time when computing signature for a request.\n         *\n         * By default, current time of the system is used for signing. This parameter can be used to set custom signing time.\n         * Useful option for testing.\n         *\n         * @param signingClockOverride The clock to use for overriding the signing time when computing signature for a request.\n         */\n        B signingClockOverride(Clock signingClockOverride);\n\n        Aws4SignerParams build();\n    }\n\n    protected static class BuilderImpl<B extends Builder> implements Builder<B> {\n        private static final Boolean DEFAULT_DOUBLE_URL_ENCODE = Boolean.TRUE;\n\n        private Boolean doubleUrlEncode = DEFAULT_DOUBLE_URL_ENCODE;\n        private AwsCredentials awsCredentials;\n        private String signingName;\n        private Region signingRegion;\n        private Integer timeOffset;\n        private Clock signingClockOverride;\n\n        protected BuilderImpl() {\n\n        }\n\n        @Override\n        public B doubleUrlEncode(Boolean doubleUrlEncode) {\n            this.doubleUrlEncode = doubleUrlEncode;\n            return (B) this;\n        }\n\n        public void setDoubleUrlEncode(Boolean doubleUrlEncode) {\n            doubleUrlEncode(doubleUrlEncode);\n        }\n\n        @Override\n        public B awsCredentials(AwsCredentials awsCredentials) {\n            this.awsCredentials = awsCredentials;\n            return (B) this;\n        }\n\n        public void setAwsCredentials(AwsCredentials awsCredentials) {\n            awsCredentials(awsCredentials);\n        }\n\n        @Override\n        public B signingName(String signingName) {\n            this.signingName = signingName;\n            return (B) this;\n        }\n\n        public void setSigningName(String signingName) {\n            signingName(signingName);\n        }\n\n        @Override\n        public B signingRegion(Region signingRegion) {\n            this.signingRegion = signingRegion;\n            return (B) this;\n        }\n\n        public void setSigningRegion(Region signingRegion) {\n            signingRegion(signingRegion);\n        }\n\n        @Override\n        public B timeOffset(Integer timeOffset) {\n            this.timeOffset = timeOffset;\n            return (B) this;\n        }\n\n        public void setTimeOffset(Integer timeOffset) {\n            timeOffset(timeOffset);\n        }\n\n        @Override\n        public B signingClockOverride(Clock signingClockOverride) {\n            this.signingClockOverride = signingClockOverride;\n            return (B) this;\n        }\n\n        public void setSigningClockOverride(Clock signingClockOverride) {\n            signingClockOverride(signingClockOverride);\n        }\n\n        @Override\n        public Aws4SignerParams build() {\n            return new Aws4SignerParams(this);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}