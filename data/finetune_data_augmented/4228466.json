{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.commons.compress.archivers.jar;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.apache.commons.compress.archivers.ArchiveEntry;\nimport org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\nimport org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n\n/**\n * Implements an input stream that can read entries from jar files.\n *\n * @NotThreadSafe\n */\n<fim_suffix>public class JarArchiveInputStream extends ZipArchiveInputStream {\n\n    /**\n     * Creates an instance from the input stream using the default encoding.\n     *\n     * @param inputStream the input stream to wrap\n     */\n    public JarArchiveInputStream( final InputStream inputStream ) {\n        super(inputStream);\n    }\n\n    /**\n     * Creates an instance from the input stream using the specified encoding.\n     *\n     * @param inputStream the input stream to wrap\n     * @param encoding the encoding to use\n     * @since 1.10\n     */\n    public JarArchiveInputStream( final InputStream inputStream, final String encoding ) {\n        super(inputStream, encoding);\n    }\n\n    public JarArchiveEntry getNextJarEntry() throws IOException {\n        final ZipArchiveEntry entry = getNextZipEntry();\n        return entry == null ? null : new JarArchiveEntry(entry);\n    }\n\n    @Override\n    public ArchiveEntry getNextEntry() throws IOException {\n        return getNextJarEntry();\n    }\n\n    /**\n     * Checks if the signature matches what is expected for a jar file\n     * (in this case it is the same as for a zip file).\n     *\n     * @param signature\n     *            the bytes to check\n     * @param length\n     *            the number of bytes to check\n     * @return true, if this stream is a jar archive stream, false otherwise\n     */\n    public static boolean matches(final byte[] signature, final int length ) {\n        return ZipArchiveInputStream.matches(signature, length);\n    }\n}<fim_middle>// class below has no smell\n"}