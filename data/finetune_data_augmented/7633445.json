{"text": "<fim_prefix>\t\tString mergedClassName = mergedBd.getBeanClassName();\n\t\treturn extractBeanClass(mergedBd, bean, mergedClassName, getParentOfClass(bean, IBeansConfig.class));\n\t}\n\t/**\n\t * Extracts the {@link IType} of a bean definition.\n\t * <p>\n\t * Honors <code>factory-method</code>s and <code>factory-bean</code>.\n\t */\n\tprivate static IType extractBeanClass(BeanDefinition bd, IBean bean, String mergedClassName,\n\t\t\tIBeansConfig beansConfig) {\n\t\tIType type = JdtUtils.getJavaType(BeansModelUtils.getProject(bean).getProject(), mergedClassName);\n\t\t// 1. factory-method on bean\n\t\tif (bd.getFactoryMethodName() != null && bd.getFactoryBeanName() == null) {\n\t\t\ttype = extractTypeFromFactoryMethod(bd, type);\n\t\t}\n\t\t// 2. factory-method on factory-bean\n\t\telse if (bd.getFactoryMethodName() != null && bd.getFactoryBeanName() != null) {\n\t\t\ttry {\n\t\t\t\tIBean factoryB = getBeanWithConfigSets(bd.getFactoryBeanName(), beansConfig);\n\t\t\t\tif (factoryB != null) {\n\t\t\t\t\tBeanDefinition factoryBd = BeansModelUtils.getMergedBeanDefinition(factoryB, null);\n\t\t\t\t\tIType factoryBeanType = extractBeanClass(factoryBd, bean, factoryBd.getBeanClassName(), beansConfig);\n\t\t\t\t\tif (factoryBeanType != null) {\n\t\t\t\t\t\ttype = extractTypeFromFactoryMethod(bd, factoryBeanType);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException e) {\n\t\t\t}\n\t\t}\n\t\treturn type;\n\t}\n\t/**\n\t * Resolves the {@link IBean} bean class by looking at parent, factory-bean and factory-method.\n\t */\n\tpublic static String resolveBeanTypeAsString(IBean bean) {\n\t\tAbstractBeanDefinition mergedBd = (AbstractBeanDefinition) BeansModelUtils.getMergedBeanDefinition(bean, null);\n\t\tString mergedClassName = mergedBd.getBeanClassName();\n\t\treturn extractBeanClassAsString(mergedBd, bean, mergedClassName, getParentOfClass(bean, IBeansConfig.class));\n\t}\n\t/**\n\t * Extracts the {@link IType} of a bean definition.\n\t * <p>\n\t * Honors <code>factory-method</code>s and <code>factory-bean</code>.\n\t */\n\tprivate static String extractBeanClassAsString(BeanDefinition bd, IBean bean, String mergedClassName,\n\t\t\tIBeansConfig beansConfig) {\n\t\tString result = mergedClassName;\n\t\t// 1. factory-method on bean\n\t\tif (bd.getFactoryMethodName() != null && bd.getFactoryBeanName() == null) {\n\t\t\tIType type = JdtUtils.getJavaType(BeansModelUtils.getProject(bean).getProject(), mergedClassName);\n\t\t\tresult = extractTypeFromFactoryMethodAsString(bd, type);\n\t\t\tif (result == null) {\n\t\t\t\tresult = mergedClassName;\n\t\t\t}\n\t\t}\n\t\t// 2. factory-method on factory-bean\n\t\telse if (bd.getFactoryMethodName() != null && bd.getFactoryBeanName() != null) {\n\t\t\ttry {\n\t\t\t\tIBean factoryB = getBeanWithConfigSets(bd.getFactoryBeanName(), beansConfig);\n\t\t\t\tif (factoryB != null) {\n\t\t\t\t\tBeanDefinition factoryBd = BeansModelUtils.getMergedBeanDefinition(factoryB, null);\n\t\t\t\t\tString factoryBeanTypeName = extractBeanClassAsString(factoryBd, bean, factoryBd.getBeanClassName(), beansConfig);\n\t\t\t\t\tif (factoryBeanTypeName != null) {\n\t\t\t\t\t\tIType factoryBeanType = JdtUtils.getJavaType(BeansModelUtils.getProject(bean).getProject(), factoryBeanTypeName);\n\t\t\t\t\t\tresult = extractTypeFromFactoryMethodAsString(bd, factoryBeanType);\n\t\t\t\t\t\tif (result == null) {\n\t\t\t\t\t\t\tresult = factoryBeanTypeName;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException e) {\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t/**\n\t * Extracts the {@link IType} of a {@link BeanDefinition} by only looking at the <code>\n\t * factory-method</code> . The passed in {@link IType} <b>must</b> be the bean class or the resolved type of the\n\t * factory bean in use.\n\t */\n\tprivate static String extractTypeFromFactoryMethodAsString(BeanDefinition bd, IType type) {\n\t\tString factoryMethod = bd.getFactoryMethodName();\n\t\ttry {\n\t\t\tint argCount = (!bd.isAbstract() ? bd.getConstructorArgumentValues().getArgumentCount() : -1);\n\t\t\tSet<IMethod> methods = Introspector.getAllMethods(type);\n\t\t\tfor (IMethod method : methods) {\n\t\t\t\tif (factoryMethod.equals(method.getElementName()) && method.getParameterNames().length == argCount) {\n\t\t\t\t\treturn JdtUtils.resolveClassNameBySignature(method.getReturnType(), type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (JavaModelException e) {\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Extracts the {@link IType} of a {@link BeanDefinition} by only looking at the <code>\n\t * factory-method</code> . The passed in {@link IType} <b>must</b> be the bean class or the resolved type of the\n\t * factory bean in use.\n\t */\n\tprivate static IType extractTypeFromFactoryMethod(BeanDefinition bd, IType type) {\n\t\tString factoryMethod = bd.getFactoryMethodName();\n\t\ttry {\n\t\t\tint argCount = (!bd.isAbstract() ? bd.getConstructorArgumentValues().getArgumentCount() : -1);\n\t\t\tSet<IMethod> methods = Introspector.getAllMethods(type);\n\t\t\tfor (IMethod method : methods) {\n\t\t\t\tif (factoryMethod.equals(method.getElementName()) && method.getParameterNames().length == argCount) {\n\t\t\t\t\ttype = JdtUtils.getJavaTypeFromSignatureClassName(method.getReturnType(), type);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (JavaModelException e) {\n\t\t}\n\t\treturn type;\n\t}\n\t/**\n\t * A {@link IModelElementVisitor} that tries to determine the closest {@link IModelElement} by looking at\n\t * <code>startLine</code> and <code>endLine</code> information.\n\t * @author Christian Dupuis\n\t */\n<fim_suffix>\tprivate static class ModelElementDetermingModelVisitor implements IModelElementVisitor {\n\t\tprivate int startLine;\n\t\tprivate int endLine;\n\t\tprivate final IFile file;\n\t\tprivate IModelElement element;\n\t\tpublic ModelElementDetermingModelVisitor(final int startLine, final int endLine, final IFile file) {\n\t\t\tif (startLine + 1 == endLine) {\n\t\t\t\tthis.startLine = startLine + 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.startLine = startLine;\n\t\t\t}\n\t\t\tthis.endLine = endLine;\n\t\t\tthis.file = file;\n\t\t}\n\t\tpublic IModelElement getElement() {\n\t\t\treturn element;\n\t\t}\n\t\tpublic boolean visit(IModelElement element, IProgressMonitor monitor) {\n\t\t\tif (element instanceof ISourceModelElement) {\n\t\t\t\tISourceModelElement sourceElement = (ISourceModelElement) element;\n\t\t\t\tif (sourceElement.getElementResource().equals(file)\n\t\t\t\t\t\t&& (sourceElement.getElementStartLine() <= startLine || sourceElement.getElementStartLine() - 1 <= startLine)\n\t\t\t\t\t\t&& endLine <= sourceElement.getElementEndLine()) {\n\t\t\t\t\tthis.element = element;\n\t\t\t\t\tif (sourceElement.getElementStartLine() == startLine\n\t\t\t\t\t\t\t&& endLine == sourceElement.getElementEndLine()) {\n\t\t\t\t\t\tstartLine = -1;\n\t\t\t\t\t\tendLine = -1;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (element instanceof IBeansConfig) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}<fim_middle>// class below has no smell\n"}