{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.telegram.service;\nimport java.io.ByteArrayInputStream;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\nimport javax.ws.rs.core.MultivaluedHashMap;\nimport javax.ws.rs.core.MultivaluedMap;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\nimport org.apache.camel.component.telegram.TelegramService;\nimport org.apache.camel.component.telegram.model.EditMessageLiveLocationMessage;\nimport org.apache.camel.component.telegram.model.MessageResult;\nimport org.apache.camel.component.telegram.model.OutgoingAudioMessage;\nimport org.apache.camel.component.telegram.model.OutgoingDocumentMessage;\nimport org.apache.camel.component.telegram.model.OutgoingMessage;\nimport org.apache.camel.component.telegram.model.OutgoingPhotoMessage;\nimport org.apache.camel.component.telegram.model.OutgoingTextMessage;\nimport org.apache.camel.component.telegram.model.OutgoingVideoMessage;\nimport org.apache.camel.component.telegram.model.SendLocationMessage;\nimport org.apache.camel.component.telegram.model.SendVenueMessage;\nimport org.apache.camel.component.telegram.model.StopMessageLiveLocationMessage;\nimport org.apache.camel.component.telegram.model.UpdateResult;\nimport org.apache.cxf.jaxrs.client.JAXRSClientFactory;\nimport org.apache.cxf.jaxrs.client.WebClient;\nimport org.apache.cxf.jaxrs.ext.multipart.Attachment;\nimport org.apache.cxf.jaxrs.ext.multipart.ContentDisposition;\n/**\n * Adapts the {@code RestBotAPI} to the {@code TelegramService} interface.\n */\npublic class TelegramServiceRestBotAPIAdapter implements TelegramService {\n    private RestBotAPI api;\n    public TelegramServiceRestBotAPIAdapter() {\n        this.api = JAXRSClientFactory.create(RestBotAPI.BOT_API_DEFAULT_URL, RestBotAPI.class, Collections.singletonList(providerByCustomObjectMapper()));\n        WebClient.getConfig(this.api).getHttpConduit().getClient().setAllowChunking(false);\n    }\n<fim_suffix>    public TelegramServiceRestBotAPIAdapter(RestBotAPI api) {\n        this.api = api;\n    }\n    @Override\n    public UpdateResult getUpdates(String authorizationToken, Long offset, Integer limit, Integer timeoutSeconds) {\n        return api.getUpdates(authorizationToken, offset, limit, timeoutSeconds);\n    }\n    @Override\n    public Object sendMessage(String authorizationToken, OutgoingMessage message) {\n        Object resultMessage;\n        if (message instanceof OutgoingTextMessage) {\n            resultMessage = this.sendMessage(authorizationToken, (OutgoingTextMessage) message);\n        } else if (message instanceof OutgoingPhotoMessage) {\n            resultMessage = this.sendMessage(authorizationToken, (OutgoingPhotoMessage) message);\n        } else if (message instanceof OutgoingAudioMessage) {\n            resultMessage = this.sendMessage(authorizationToken, (OutgoingAudioMessage) message);\n        } else if (message instanceof OutgoingVideoMessage) {\n            resultMessage = this.sendMessage(authorizationToken, (OutgoingVideoMessage) message);\n        } else if (message instanceof OutgoingDocumentMessage) {\n            resultMessage = this.sendMessage(authorizationToken, (OutgoingDocumentMessage) message);\n        } else if (message instanceof SendLocationMessage) {\n            resultMessage = api.sendLocation(authorizationToken, (SendLocationMessage) message);\n        } else if (message instanceof EditMessageLiveLocationMessage) {\n            resultMessage = api.editMessageLiveLocation(authorizationToken, (EditMessageLiveLocationMessage) message);\n        } else if (message instanceof StopMessageLiveLocationMessage) {\n            resultMessage = api.stopMessageLiveLocation(authorizationToken, (StopMessageLiveLocationMessage) message);\n        } else if (message instanceof SendVenueMessage) {\n            resultMessage = api.sendVenue(authorizationToken, (SendVenueMessage) message);\n        } else {\n            throw new IllegalArgumentException(\"Unsupported message type \" + (message != null ? message.getClass().getName() : null));\n        }\n        return resultMessage;\n    }\n    private MessageResult sendMessage(String authorizationToken, OutgoingTextMessage message) {\n        return api.sendMessage(authorizationToken, message);\n    }\n    private MessageResult sendMessage(String authorizationToken, OutgoingPhotoMessage message) {\n        List<Attachment> parts = new LinkedList<>();\n        fillCommonMediaParts(parts, message);\n        parts.add(buildMediaPart(\"photo\", message.getFilenameWithExtension(), message.getPhoto()));\n        if (message.getCaption() != null) {\n            parts.add(buildTextPart(\"caption\", message.getCaption()));\n        }\n        return api.sendPhoto(authorizationToken, parts);\n    }\n    private MessageResult sendMessage(String authorizationToken, OutgoingAudioMessage message) {\n        List<Attachment> parts = new LinkedList<>();\n        fillCommonMediaParts(parts, message);\n        parts.add(buildMediaPart(\"audio\", message.getFilenameWithExtension(), message.getAudio()));\n        if (message.getTitle() != null) {\n            parts.add(buildTextPart(\"title\", message.getTitle()));\n        }\n        if (message.getDurationSeconds() != null) {\n            parts.add(buildTextPart(\"duration\", String.valueOf(message.getDurationSeconds())));\n        }\n        if (message.getPerformer() != null) {\n            parts.add(buildTextPart(\"performer\", message.getPerformer()));\n        }\n        return api.sendAudio(authorizationToken, parts);\n    }\n    private MessageResult sendMessage(String authorizationToken, OutgoingVideoMessage message) {\n        List<Attachment> parts = new LinkedList<>();\n        fillCommonMediaParts(parts, message);\n        parts.add(buildMediaPart(\"video\", message.getFilenameWithExtension(), message.getVideo()));\n        if (message.getCaption() != null) {\n            parts.add(buildTextPart(\"caption\", message.getCaption()));\n        }\n        if (message.getDurationSeconds() != null) {\n            parts.add(buildTextPart(\"duration\", String.valueOf(message.getDurationSeconds())));\n        }\n        if (message.getWidth() != null) {\n            parts.add(buildTextPart(\"width\", String.valueOf(message.getWidth())));\n        }\n        if (message.getHeight() != null) {\n            parts.add(buildTextPart(\"height\", String.valueOf(message.getHeight())));\n        }\n        return api.sendVideo(authorizationToken, parts);\n    }\n    private MessageResult sendMessage(String authorizationToken, OutgoingDocumentMessage message) {\n        List<Attachment> parts = new LinkedList<>();\n        fillCommonMediaParts(parts, message);\n        parts.add(buildMediaPart(\"document\", message.getFilenameWithExtension(), message.getDocument()));\n        if (message.getCaption() != null) {\n            parts.add(buildTextPart(\"caption\", message.getCaption()));\n        }\n        return api.sendDocument(authorizationToken, parts);\n    }\n    private void fillCommonMediaParts(List<Attachment> parts, OutgoingMessage message) {\n        parts.add(buildTextPart(\"chat_id\", message.getChatId()));\n        if (message.getReplyToMessageId() != null) {\n            parts.add(buildTextPart(\"reply_to_message_id\", String.valueOf(message.getReplyToMessageId())));\n        }\n        if (message.getDisableNotification() != null) {\n            parts.add(buildTextPart(\"disable_notification\", String.valueOf(message.getDisableNotification())));\n        }\n    }\n    private Attachment buildTextPart(String name, String value) {\n        MultivaluedMap m = new MultivaluedHashMap<>();\n        m.putSingle(\"Content-Type\", \"text/plain\");\n        m.putSingle(\"Content-Disposition\", \"form-data; name=\\\"\" + escapeMimeName(name) + \"\\\"\");\n        Attachment a = new Attachment(m, value);\n        return a;\n    }\n    private Attachment buildMediaPart(String name, String fileNameWithExtension, byte[] value) {\n        Attachment a = new Attachment(name, new ByteArrayInputStream(value),<fim_middle>// function below has no smell\n"}