{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.artemis.utils.collections;\n\nimport java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\nimport java.util.function.Consumer;\n\npublic class UpdatableIterator<E> implements ResettableIterator<E>, RepeatableIterator<E> {\n\n   private final AtomicReferenceFieldUpdater<UpdatableIterator, RepeatableIteratorWrapper> changedIteratorFieldUpdater =  AtomicReferenceFieldUpdater.newUpdater(UpdatableIterator.class, RepeatableIteratorWrapper.class, \"changedIterator\");\n   private volatile RepeatableIteratorWrapper<E> changedIterator;\n   private RepeatableIteratorWrapper<E> currentIterator;\n\n   public UpdatableIterator(ResettableIterator<E> iterator) {\n      this.currentIterator = new RepeatableIteratorWrapper<>(iterator);\n   }\n\n   /**\n    * This can be called by another thread.\n    * It sets a new iterator, that will be picked up on the next reset.\n    *\n    * @param iterator the new iterator to update to.\n    */\n   public void update(ResettableIterator<E> iterator) {\n      changedIteratorFieldUpdater.set(this, new RepeatableIteratorWrapper<>(iterator));\n   }\n\n   /*\n    * ---- ResettableIterator Methods -----\n    * All the below ResettableIterator (including reset) methods MUST be called by the same thread,\n    * this is as any other use of Iterator.\n    */\n\n   /**\n    * When reset is called, then if a new iterator has been provided by another thread via update method,\n    * then we switch over to using the new iterator.\n    *\n    * It is important that on nulling off the changedIterator, we atomically compare and set as the\n    * changedIterator could be further updated by another thread whilst we are resetting,\n    * the subsequent update simply would be picked up on the next reset.\n    *\n    * @return this (itself).\n    */\n<fim_suffix>   @Override\n   public void reset() {\n      RepeatableIteratorWrapper<E> changedIterator = this.changedIterator;\n      if (changedIterator != null) {\n         currentIterator = changedIterator;\n         changedIteratorFieldUpdater.compareAndSet(this, changedIterator, null);\n      }\n      currentIterator.reset();\n   }\n\n   @Override\n   public boolean hasNext() {\n      return currentIterator.hasNext();\n   }\n\n   @Override\n   public E next() {\n      return currentIterator.next();\n   }\n\n   @Override\n   public void remove() {\n      currentIterator.remove();\n   }\n\n   @Override\n   public void forEachRemaining(Consumer<? super E> action) {\n      currentIterator.forEachRemaining(action);\n   }\n\n   @Override\n   public void repeat() {\n      currentIterator.repeat();\n   }\n}<fim_middle>// function below has no smell\n"}