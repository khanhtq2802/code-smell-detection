{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.filter;\n\n\n\n/**\n * An expression which performs an operation on two expression values.\n * \n * \n */\n<fim_suffix>public abstract class BinaryExpression implements Expression {\n    protected Expression left;\n    protected Expression right;\n\n    public BinaryExpression(Expression left, Expression right) {\n        this.left = left;\n        this.right = right;\n    }\n\n    public Expression getLeft() {\n        return left;\n    }\n\n    public Expression getRight() {\n        return right;\n    }\n\n\n    /**\n     * @see java.lang.Object#toString()\n     */\n    public String toString() {\n        return \"(\" + left.toString() + \" \" + getExpressionSymbol() + \" \" + right.toString() + \")\";\n    }\n\n    /**\n     * TODO: more efficient hashCode()\n     *\n     * @see java.lang.Object#hashCode()\n     */\n    public int hashCode() {\n        return toString().hashCode();\n    }\n\n    /**\n     * TODO: more efficient hashCode()\n     *\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    public boolean equals(Object o) {\n\n        if (o == null || !this.getClass().equals(o.getClass())) {\n            return false;\n        }\n        return toString().equals(o.toString());\n\n    }\n\n    /**\n     * Returns the symbol that represents this binary expression.  For example, addition is\n     * represented by \"+\"\n     *\n     * @return\n     */\n    public abstract String getExpressionSymbol();\n\n    /**\n     * @param expression\n     */\n    public void setRight(Expression expression) {\n        right = expression;\n    }\n\n    /**\n     * @param expression\n     */\n    public void setLeft(Expression expression) {\n        left = expression;\n    }\n    \n}<fim_middle>// class below is data class\n"}