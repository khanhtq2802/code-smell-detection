{"text": "<fim_prefix>                            final com.oracle.bmc.util.internal.Consumer<Throwable> onError =\n                                    new com.oracle.bmc.http.internal.ErrorConsumer<>(\n                                            this, interceptedRequest);\n                            client.get(ib, interceptedRequest, onSuccess, onError);\n                        }\n                    };\n        }\n        final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response> onSuccess =\n                (handler == null)\n                        ? null\n                        : new com.oracle.bmc.http.internal.SuccessConsumer<>(\n                                handlerToUse, transformer, interceptedRequest);\n        final com.oracle.bmc.util.internal.Consumer<Throwable> onError =\n                (handler == null)\n                        ? null\n                        : new com.oracle.bmc.http.internal.ErrorConsumer<>(\n                                handlerToUse, interceptedRequest);\n        java.util.concurrent.Future<javax.ws.rs.core.Response> responseFuture =\n                client.get(ib, interceptedRequest, onSuccess, onError);\n        if (this.authenticationDetailsProvider\n                instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {\n            return new com.oracle.bmc.util.internal.RefreshAuthTokenTransformingFuture<\n                    javax.ws.rs.core.Response, ListStacksResponse>(\n                    responseFuture,\n                    transformer,\n                    (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)\n                            this.authenticationDetailsProvider,\n                    new com.google.common.base.Supplier<\n                            java.util.concurrent.Future<javax.ws.rs.core.Response>>() {\n                        @Override\n                        public java.util.concurrent.Future<javax.ws.rs.core.Response> get() {\n                            return client.get(ib, interceptedRequest, onSuccess, onError);\n                        }\n                    });\n        } else {\n            return new com.oracle.bmc.util.internal.TransformingFuture<>(\n                    responseFuture, transformer);\n        }\n    }\n    @Override\n    public java.util.concurrent.Future<UpdateJobResponse> updateJob(\n            final UpdateJobRequest request,\n            final com.oracle.bmc.responses.AsyncHandler<UpdateJobRequest, UpdateJobResponse>\n                    handler) {\n        LOG.trace(\"Called async updateJob\");\n        final UpdateJobRequest interceptedRequest = UpdateJobConverter.interceptRequest(request);\n        final com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                UpdateJobConverter.fromRequest(client, interceptedRequest);\n        final com.google.common.base.Function<javax.ws.rs.core.Response, UpdateJobResponse>\n                transformer = UpdateJobConverter.fromResponse();\n        com.oracle.bmc.responses.AsyncHandler<UpdateJobRequest, UpdateJobResponse> handlerToUse =\n                handler;\n        if (handler != null\n                && this.authenticationDetailsProvider\n                        instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {\n            handlerToUse =\n                    new com.oracle.bmc.util.internal.RefreshAuthTokenWrappingAsyncHandler<\n                            UpdateJobRequest, UpdateJobResponse>(\n                            (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)\n                                    this.authenticationDetailsProvider,\n                            handler) {\n                        @Override\n                        public void retryCall() {\n                            final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response>\n                                    onSuccess =\n                                            new com.oracle.bmc.http.internal.SuccessConsumer<>(\n                                                    this, transformer, interceptedRequest);\n                            final com.oracle.bmc.util.internal.Consumer<Throwable> onError =\n                                    new com.oracle.bmc.http.internal.ErrorConsumer<>(\n                                            this, interceptedRequest);\n                            client.put(\n                                    ib,\n                                    interceptedRequest.getUpdateJobDetails(),\n                                    interceptedRequest,\n                                    onSuccess,\n                                    onError);\n                        }\n                    };\n        }\n        final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response> onSuccess =\n                (handler == null)\n                        ? null\n                        : new com.oracle.bmc.http.internal.SuccessConsumer<>(\n                                handlerToUse, transformer, interceptedRequest);\n        final com.oracle.bmc.util.internal.Consumer<Throwable> onError =\n                (handler == null)\n                        ? null\n                        : new com.oracle.bmc.http.internal.ErrorConsumer<>(\n                                handlerToUse, interceptedRequest);\n        java.util.concurrent.Future<javax.ws.rs.core.Response> responseFuture =\n                client.put(\n                        ib,\n                        interceptedRequest.getUpdateJobDetails(),\n                        interceptedRequest,\n                        onSuccess,\n                        onError);\n        if (this.authenticationDetailsProvider\n                instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {\n            return new com.oracle.bmc.util.internal.RefreshAuthTokenTransformingFuture<\n                    javax.ws.rs.core.Response, UpdateJobResponse>(\n                    responseFuture,\n                    transformer,\n                    (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)\n                            this.authenticationDetailsProvider,\n                    new com.google.common.base.Supplier<\n                            java.util.concurrent.Future<javax.ws.rs.core.Response>>() {\n                        @Override\n                        public java.util.concurrent.Future<javax.ws.rs.core.Response> get() {\n                            return client.put(\n                                    ib,\n                                    interceptedRequest.getUpdateJobDetails(),\n                                    interceptedRequest,\n                                    onSuccess,\n                                    onError);\n                        }\n                    });\n        } else {\n            return new com.oracle.bmc.util.internal.TransformingFuture<>(\n                    responseFuture, transformer);\n        }\n    }\n<fim_suffix>    @Override\n    public java.util.concurrent.Future<UpdateStackResponse> updateStack(\n            final UpdateStackRequest request,\n            final com.oracle.bmc.responses.AsyncHandler<UpdateStackRequest, UpdateStackResponse>\n                    handler) {\n        LOG.trace(\"Called async updateStack\");\n        final UpdateStackRequest interceptedRequest =\n                UpdateStackConverter.interceptRequest(request);\n        final com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =\n                UpdateStackConverter.fromRequest(client, interceptedRequest);\n        final com.google.common.base.Function<javax.ws.rs.core.Response, UpdateStackResponse>\n                transformer = UpdateStackConverter.fromResponse();\n        com.oracle.bmc.responses.AsyncHandler<UpdateStackRequest, UpdateStackResponse>\n                handlerToUse = handler;\n        if (handler != null\n                && this.authenticationDetailsProvider\n                        instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {\n            handlerToUse =\n                    new com.oracle.bmc.util.internal.RefreshAuthTokenWrappingAsyncHandler<\n                            UpdateStackRequest, UpdateStackResponse>(\n                            (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)\n                                    this.authenticationDetailsProvider,\n                            handler) {\n                        @Override\n                        public void retryCall() {\n                            final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response>\n                                    onSuccess =\n                                            new com.oracle.bmc.http.internal.SuccessConsumer<>(\n                                                    this, transformer, interceptedRequest);\n                            final com.oracle.bmc.util.internal.Consumer<Throwable> onError =\n                                    new com.oracle.bmc.http.internal.ErrorConsumer<>(\n                                            this, interceptedRequest);\n                            client.put(\n                                    ib,\n                                    interceptedRequest.getUpdateStackDetails(),\n                                    interceptedRequest,\n                                    onSuccess,\n                                    onError);\n                        }\n                    };\n        }\n        final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response> onSuccess =\n                (handler == null)\n                        ? null\n                        : new com.oracle.bmc.http.internal.SuccessConsumer<>(\n                                handlerToUse, transformer, interceptedRequest);\n        final com.oracle.bmc.util.internal.Consumer<Throwable> onError =\n                (handler == null)\n                        ? null\n                        : new com.oracle.bmc.http.internal.ErrorConsumer<>(\n                                handlerToUse, interceptedRequest);\n        java.util.concurrent.Future<javax.ws.rs.core.Response> responseFuture =\n                client.put(\n                        ib,\n                        interceptedRequest.getUpdateStackDetails(),\n                        interceptedRequest,\n                        onSuccess,\n                        onError);\n        if (this.authenticationDetailsProvider\n                instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {\n            return new com.oracle.bmc.util.internal.RefreshAuthTokenTransformingFuture<\n                    javax.ws.rs.core.Response, UpdateStackResponse>(\n                    responseFuture,\n                    transformer,\n                    (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)\n                            this.authenticationDetailsProvider,\n                    new com.google.common.base.Supplier<\n                            java.util.concurrent.Future<javax.ws.rs.core.Response>>() {\n                        @Override\n                        public java.util.concurrent.Future<javax.ws.rs.core.Response> get() {\n                            return client.put(\n                                    ib,\n                                    interceptedRequest.getUpdateStackDetails(),\n                                    interceptedRequest,\n                                    onSuccess,\n                                    onError);\n                        }\n                    });\n        } else {\n            return new com.oracle.bmc.util.internal.TransformingFuture<>(\n                    responseFuture, transformer);\n        }\n    }<fim_middle>// function below is long method\n"}