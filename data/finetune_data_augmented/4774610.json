{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.rya.indexing.mongodb.update;\n\nimport static java.util.Objects.requireNonNull;\n\nimport java.util.Optional;\nimport java.util.function.Function;\n\nimport org.apache.rya.indexing.mongodb.IndexingException;\n\nimport edu.umd.cs.findbugs.annotations.DefaultAnnotation;\nimport edu.umd.cs.findbugs.annotations.NonNull;\n\n/**\n * Performs an update operation on a Document in mongodb.\n * @param <T> - The key to find the object.\n * @param <V> - The type of object to get updated.\n */\n<fim_suffix>@DefaultAnnotation(NonNull.class)\npublic interface MongoDocumentUpdater<T, V> {\n    public default void update(final T key, final DocumentMutator<V> mutator) throws IndexingException {\n        requireNonNull(mutator);\n\n        // Fetch the current state of the Entity.\n        boolean completed = false;\n        while(!completed) {\n            //this cast is safe since the mutator interface is defined below to use Optional<V>\n            final Optional<V> old = getOld(key);\n            final Optional<V> updated = mutator.apply(old);\n\n            final boolean doWork = updated.isPresent();\n            if(doWork) {\n                if(!old.isPresent()) {\n                    create(updated.get());\n                } else {\n                    update(old.get(), updated.get());\n                }\n            }\n            completed = true;\n        }\n    }\n\n    Optional<V> getOld(T key) throws IndexingException;\n\n    void create(final V newObj) throws IndexingException;\n\n    void update(final V old, final V updated) throws IndexingException;\n\n    /**\n     * Implementations of this interface are used to update the state of a\n     * {@link MongoDocumentUpdater#V} in unison with a {@link MongoDocumentUpdater}.\n     * </p>\n     * This table describes what the updater will do depending on if the object\n     * exists and if an updated object is returned.\n     * </p>\n     * <table border=\"1px\">\n     *     <tr><th>Object Provided</th><th>Update Returned</th><th>Effect</th></tr>\n     *     <tr>\n     *         <td>true</td>\n     *         <td>true</td>\n     *         <td>The old Object will be updated using the returned state.</td>\n     *     </tr>\n     *     <tr>\n     *         <td>true</td>\n     *         <td>false</td>\n     *         <td>No work is performed.</td>\n     *     </tr>\n     *     <tr>\n     *         <td>false</td>\n     *         <td>true</td>\n     *         <td>A new Object will be created using the returned state.</td>\n     *     </tr>\n     *     <tr>\n     *         <td>false</td>\n     *         <td>false</td>\n     *         <td>No work is performed.</td>\n     *     </tr>\n     * </table>\n     */\n    public interface DocumentMutator<V> extends Function<Optional<V>, Optional<V>> { }\n}<fim_middle>// class below has no smell\n"}