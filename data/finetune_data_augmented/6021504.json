{"text": "<fim_prefix>/*******************************************************************************\n *     Cloud Foundry\n *     Copyright (c) [2009-2016] Pivotal Software, Inc. All Rights Reserved.\n *\n *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n *     You may not use this product except in compliance with the License.\n *\n *     This product includes a number of subcomponents with\n *     separate copyright notices and license terms. Your use of these\n *     subcomponents is subject to the terms and conditions of the\n *     subcomponent's license, as noted in the LICENSE file.\n *******************************************************************************/\npackage org.cloudfoundry.identity.uaa.provider;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.cloudfoundry.identity.uaa.provider.IdentityProvider;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\n\nimport java.util.Collection;\n\npublic class IdentityProviderValidationRequest {\n\n    private final IdentityProvider provider;\n    private final UsernamePasswordAuthentication credentials;\n\n    @JsonCreator\n    public IdentityProviderValidationRequest(\n        @JsonProperty(\"provider\") IdentityProvider provider,\n        @JsonProperty(\"credentials\") UsernamePasswordAuthentication credentials\n    ) {\n        this.provider = provider;\n        this.credentials = credentials;\n    }\n\n    public UsernamePasswordAuthentication getCredentials() {\n        return credentials;\n    }\n\n    public IdentityProvider getProvider() {\n        return provider;\n    }\n\n    public static class UsernamePasswordAuthentication implements Authentication {\n        private final String username;\n        private final String password;\n\n<fim_suffix>        @JsonCreator\n        public UsernamePasswordAuthentication(\n            @JsonProperty(\"username\") String username,\n            @JsonProperty(\"password\") String password) {\n            this.password = password;\n            this.username = username;\n        }\n\n        public String getPassword() {\n            return password;\n        }\n\n        public String getUsername() {\n            return username;\n        }\n\n        @JsonIgnore\n        @Override\n        public Collection<? extends GrantedAuthority> getAuthorities() {\n            return null;\n        }\n\n        @JsonIgnore\n        @Override\n        public Object getCredentials() {\n            return getPassword();\n        }\n\n        @JsonIgnore\n        @Override\n        public Object getDetails() {\n            return null;\n        }\n\n        @JsonIgnore\n        @Override\n        public Object getPrincipal() {\n            return getUsername();\n        }\n\n        @JsonIgnore\n        @Override\n        public boolean isAuthenticated() {\n            return false;\n        }\n\n        @JsonIgnore\n        @Override\n        public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {\n        }\n\n        @JsonIgnore\n        @Override\n        public String getName() {\n            return getUsername();\n        }\n    }\n}<fim_middle>// function below has no smell\n"}