{"text": "<fim_prefix>/*\n * Copyright (c) 2017 VMware, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License.  You may obtain a copy of\n * the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed\n * under the License is distributed on an \"AS IS\" BASIS, without warranties or\n * conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the License for the\n * specific language governing permissions and limitations under the License.\n */\n\npackage com.vmware.xenon.common.config;\n\nimport java.util.logging.Level;\n\nimport com.vmware.xenon.common.Utils;\n\nclass ConfigurationSource {\n\n    static final String MASK = \"******\";\n\n    String get(Class<?> subsystem, String name, boolean verboseResolution) {\n        return get(subsystemToString(subsystem), name, verboseResolution);\n    }\n\n<fim_suffix>    String get(String subsystem, String name, boolean verboseResolution) {\n        String key = buildKey(subsystem, name);\n        String value = getProperty(key);\n        if (value == null) {\n            key = toSnakeUpperCase(Utils.PROPERTY_NAME_PREFIX + subsystem).replace(\".\", \"\");\n            key = key + '_' + toSnakeUpperCase(name);\n            value = getEnv(key);\n            if (value != null) {\n                logFoundEnvVar(verboseResolution, key, value);\n            }\n        } else {\n            logFoundSystemProperty(verboseResolution, key, value);\n        }\n\n        if (value == null || value.length() == 0) {\n            return null;\n        }\n\n        return value;\n    }\n\n    private void logFoundSystemProperty(boolean verboseResolution, String key, String value) {\n        if (XenonConfiguration.logger.isLoggable(Level.FINE)) {\n            if (!verboseResolution) {\n                value = MASK;\n            }\n            XenonConfiguration.logger.log(Level.FINE, String.format(\"Found system property %s=\\\"%s\\\"\", key, value));\n        }\n    }\n\n    private void logFoundEnvVar(boolean verboseResolution, String varName, String value) {\n        if (XenonConfiguration.logger.isLoggable(Level.FINE)) {\n            if (!verboseResolution) {\n                value = MASK;\n            }\n\n            XenonConfiguration.logger\n                    .log(Level.FINE, String.format(\"Found environment variable %s=\\\"%s\\\"\", varName, value));\n        }\n    }\n\n    static String buildKey(String subsystem, String name) {\n        return Utils.PROPERTY_NAME_PREFIX + subsystem + \".\" + name;\n    }\n\n    static String buildKey(Class<?> subsystem, String name) {\n        return buildKey(subsystem.getSimpleName(), name);\n    }\n\n    static String subsystemToString(Object subsystem) {\n        return subsystem instanceof Class ? ((Class) subsystem).getSimpleName() : subsystem.toString();\n    }\n\n    static String toSnakeUpperCase(String key) {\n        key = key.replace('.', '_');\n        key = key.replace('-', '_');\n        // sorry for that\n        key = key.replaceAll(\"([^\\\\p{Upper}_])(\\\\p{Upper}+)\", \"$1_$2\").toUpperCase();\n        return key;\n    }\n\n    /**\n     * overridable for testing purposed\n     * @param key\n     * @return\n     */\n    String getEnv(String key) {\n        String res = System.getenv(key);\n        if (\"\".equals(res)) {\n            return null;\n        }\n        return res;\n    }\n\n    /**\n     * overridable for testing purposed\n     * @param key\n     * @return\n     */\n    String getProperty(String key) {\n        return System.getProperty(key);\n    }\n}<fim_middle>// function below has no smell\n"}