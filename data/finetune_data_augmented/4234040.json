{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4.iterators;\n\nimport java.util.Iterator;\n\nimport org.apache.commons.collections4.Transformer;\n\n/**\n * Decorates an iterator such that each element returned is transformed.\n *\n * @since 1.0\n */\n<fim_suffix>public class TransformIterator<I, O> implements Iterator<O> {\n\n    /** The iterator being used */\n    private Iterator<? extends I> iterator;\n    /** The transformer being used */\n    private Transformer<? super I, ? extends O> transformer;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a new <code>TransformIterator</code> that will not function\n     * until the {@link #setIterator(Iterator) setIterator} and\n     * {@link #setTransformer(Transformer)} methods are invoked.\n     */\n    public TransformIterator() {\n        super();\n    }\n\n    /**\n     * Constructs a new <code>TransformIterator</code> that won't transform\n     * elements from the given iterator.\n     *\n     * @param iterator  the iterator to use\n     */\n    public TransformIterator(final Iterator<? extends I> iterator) {\n        super();\n        this.iterator = iterator;\n    }\n\n    /**\n     * Constructs a new <code>TransformIterator</code> that will use the\n     * given iterator and transformer.  If the given transformer is null,\n     * then objects will not be transformed.\n     *\n     * @param iterator  the iterator to use\n     * @param transformer  the transformer to use\n     */\n    public TransformIterator(final Iterator<? extends I> iterator,\n                             final Transformer<? super I, ? extends O> transformer) {\n        super();\n        this.iterator = iterator;\n        this.transformer = transformer;\n    }\n\n    //-----------------------------------------------------------------------\n    @Override\n    public boolean hasNext() {\n        return iterator.hasNext();\n    }\n\n    /**\n     * Gets the next object from the iteration, transforming it using the\n     * current transformer. If the transformer is null, no transformation\n     * occurs and the object from the iterator is returned directly.\n     *\n     * @return the next object\n     * @throws java.util.NoSuchElementException if there are no more elements\n     */\n    @Override\n    public O next() {\n        return transform(iterator.next());\n    }\n\n    @Override\n    public void remove() {\n        iterator.remove();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the iterator this iterator is using.\n     *\n     * @return the iterator.\n     */\n    public Iterator<? extends I> getIterator() {\n        return iterator;\n    }\n\n    /**\n     * Sets the iterator for this iterator to use.\n     * If iteration has started, this effectively resets the iterator.\n     *\n     * @param iterator  the iterator to use\n     */\n    public void setIterator(final Iterator<? extends I> iterator) {\n        this.iterator = iterator;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the transformer this iterator is using.\n     *\n     * @return the transformer.\n     */\n    public Transformer<? super I, ? extends O> getTransformer() {\n        return transformer;\n    }\n\n    /**\n     * Sets the transformer this the iterator to use.\n     * A null transformer is a no-op transformer.\n     *\n     * @param transformer  the transformer to use\n     */\n    public void setTransformer(final Transformer<? super I, ? extends O> transformer) {\n        this.transformer = transformer;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Transforms the given object using the transformer.\n     * If the transformer is null, the original object is returned as-is.\n     *\n     * @param source  the object to transform\n     * @return the transformed object\n     */\n    protected O transform(final I source) {\n        return transformer.transform(source);\n    }\n}<fim_middle>// class below is data class\n"}