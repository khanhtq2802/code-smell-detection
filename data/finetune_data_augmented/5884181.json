{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.usergrid.rest.filters;\n\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PushbackInputStream;\nimport java.util.Collections;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletInputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport javax.ws.rs.HttpMethod;\nimport javax.ws.rs.core.HttpHeaders;\nimport javax.ws.rs.core.MediaType;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.util.Assert;\n\n\n/**\n * Filter for setting default accept and Content-Type as application/json when undefined by client\n *\n * @author tnine\n */\npublic class ContentTypeFilter implements Filter {\n\n    private static final Logger logger = LoggerFactory.getLogger( ContentTypeFilter.class );\n\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)\n     */\n    @Override\n    public void init( FilterConfig filterConfig ) throws ServletException {\n        if (logger.isTraceEnabled()) {\n            logger.trace(\"Starting content type filter\");\n        }\n    }\n\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest,\n     * javax.servlet.ServletResponse, javax.servlet.FilterChain)\n     */\n    @Override\n    public void doFilter( ServletRequest request, ServletResponse response, FilterChain chain )\n            throws IOException, ServletException {\n\n        if ( !( request instanceof HttpServletRequest ) ) {\n            chain.doFilter( request, response );\n            return;\n        }\n\n        HttpServletRequest origRequest = ( HttpServletRequest ) request;\n\n        HeaderWrapperRequest newRequest = new HeaderWrapperRequest( origRequest );\n        newRequest.adapt();\n\n        try {\n            chain.doFilter( newRequest, response );\n        } catch ( Exception e ) {\n            logger.error(\"Error in filter\", e);\n        }\n    }\n\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see javax.servlet.Filter#destroy()\n     */\n    @Override\n    public void destroy() {\n    }\n\n\n<fim_suffix>    private class HeaderWrapperRequest extends HttpServletRequestWrapper {\n        private PushbackInputStream inputStream = null;\n        private ServletInputStream servletInputStream = null;\n        private HttpServletRequest origRequest = null;\n        private BufferedReader reader = null;\n\n        private final Map<String, String> newHeaders = new HashMap<String, String>();\n\n\n        /**\n         * @param request\n         * @throws IOException\n         */\n        public HeaderWrapperRequest( HttpServletRequest request ) throws IOException {\n            super( request );\n            origRequest = request;\n            inputStream = new PushbackInputStream( request.getInputStream() );\n            servletInputStream = new DelegatingServletInputStream( inputStream );\n        }\n\n\n        /**\n         * @throws IOException\n         *\n         */\n        private void adapt() throws IOException {\n\n            String path = origRequest.getRequestURI();\n            String method = origRequest.getMethod();\n            if (logger.isTraceEnabled()) {\n                logger.trace(\"Content path is '{}'\", path);\n            }\n\n\n            // first ensure that an Accept header is set\n\n            @SuppressWarnings( \"rawtypes\" ) Enumeration acceptHeaders = origRequest.getHeaders( HttpHeaders.ACCEPT );\n            if ( !acceptHeaders.hasMoreElements() ) {\n                setHeader( HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON );\n            }\n\n            // next, ensure that one and only one content-type is set\n\n            int initial = inputStream.read();\n            if ( initial == -1 ) {\n\n                // request has no body, set type to application/json\n                if ( ( HttpMethod.POST.equals( method ) || HttpMethod.PUT.equals( method ) )\n                    && !MediaType.APPLICATION_FORM_URLENCODED.equals( getContentType() ) ) {\n                    if (logger.isTraceEnabled()) {\n                        logger.trace(\"Setting content type to application/json for POST or PUT with no content at path '{}'\", path);\n                    }\n\n                    setHeader( HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON );\n                    setHeader( HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON );\n                }\n\n                return;\n            }\n\n            char firstChar = ( char ) initial;\n            if ( ( firstChar == '{' || firstChar == '[' )\n                 && !MediaType.APPLICATION_JSON.equals( getContentType() )) {\n\n                // request appears to be JSON so set type to application/json\n                if (logger.isTraceEnabled()) {\n                    logger.trace(\"Setting content type to application/json for POST or PUT with json content at path '{}'\", path);\n                }\n                setHeader( HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON );\n                setHeader( HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON );\n            }\n\n            inputStream.unread( initial );\n        }\n\n\n        public void setHeader( String name, String value ) {\n            newHeaders.put( name.toLowerCase(), value );\n        }\n\n\n        /*\n         * (non-Javadoc)\n         *\n         * @see\n         * javax.servlet.http.HttpServletRequestWrapper#getHeader(java.lang.\n         * String)\n         */\n        @Override\n        public String getHeader( String name ) {\n            String header = newHeaders.get( name );\n\n            if ( header != null ) {\n                return header;\n            }\n\n            return super.getHeader( name );\n        }\n\n\n        /*\n         * (non-Javadoc)\n         *\n         * @see\n         * javax.servlet.http.HttpServletRequestWrapper#getHeaders(java.lang\n         * .String)\n         */\n        @Override\n        public Enumeration getHeaders( String name ) {\n\n            Set<String> headers = new LinkedHashSet<String>();\n            String overridden = newHeaders.get( name );\n\n            if ( overridden != null ) {\n                headers.add( overridden );\n                return Collections.enumeration( headers );\n            }\n\n            return super.getHeaders( name );\n        }\n\n\n        /*\n         * (non-Javadoc)\n         *\n         * @see javax.servlet.http.HttpServletRequestWrapper#getHeaderNames()\n         */\n        @Override\n        public Enumeration getHeaderNames() {\n            Set<String> headers = new LinkedHashSet<String>();\n\n            for ( Enumeration e = super.getHeaderNames(); e.hasMoreElements(); ) {\n                headers.add( e.nextElement().toString() );\n            }\n\n            headers.addAll( newHeaders.keySet() );\n\n            return Collections.enumeration( headers );\n        }\n\n\n        /*\n         * (non-Javadoc)\n         *\n         * @see javax.servlet.ServletRequestWrapper#getInputStream()\n         */\n        @Override\n        public ServletInputStream getInputStream() throws IOException {\n            return servletInputStream;\n        }\n\n\n        /*\n         * (non-Javadoc)\n         *\n         * @see javax.servlet.ServletRequestWrapper#getReader()\n         */\n        @Override\n        public BufferedReader getReader() throws IOException {\n            if ( reader != null ) {\n                return reader;\n            }\n\n            reader = new BufferedReader( new InputStreamReader( servletInputStream ) );\n\n            return reader;\n        }\n\n        // NOTE, for full override we need to implement the other getHeader\n        // methods. We won't use it, so I'm not implementing it here\n    }\n\n\n    /**\n     * Delegating implementation of {@link javax.servlet.ServletInputStream}.\n     *\n     * @author Juergen Hoeller, Todd Nine\n     * @since 1.0.2\n     */\n    private static class DelegatingServletInputStream extends ServletInputStream {\n\n        private final InputStream sourceStream;\n\n\n        /**\n         * Create a DelegatingServletInputStream for the given source stream.\n         *\n         * @param sourceStream the source stream (never <code>null</code>)\n         */\n        public DelegatingServletInputStream( InputStream sourceStream ) {\n            Assert.notNull( sourceStream, \"Source InputStream must not be null\" );\n            this.sourceStream = sourceStream;\n        }\n\n\n        /** Return the underlying source stream (never <code>null</code>). */\n        public final InputStream getSourceStream() {\n            return this.sourceStream;\n        }\n\n\n        public int read() throws IOException {\n            return this.sourceStream.read();\n        }\n\n\n        public void close() throws IOException {\n            super.close();\n            this.sourceStream.close();\n        }\n    }\n}<fim_middle>// class below has no smell\n"}