{"text": "<fim_prefix>/*\n\n Derby - Class org.apache.derbyTesting.system.nstest.NsTestPrintStream\n\n Licensed to the Apache Software Foundation (ASF) under one or more\n contributor license agreements.  See the NOTICE file distributed with\n this work for additional information regarding copyright ownership.\n The ASF licenses this file to You under the Apache License, Version 2.0\n (the \"License\"); you may not use this file except in compliance with\n the License.  You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n */\npackage org.apache.derbyTesting.system.nstest;\n\nimport java.io.PrintStream;\nimport java.util.Locale;\n\n/**\n * <p>\n * A stream whose output can be throttled.\n * </p>\n */\n<fim_suffix>public  class   NsTestPrintStream   extends PrintStream\n{\n    ///////////////////////////////////////////////////////////////////////////////////\n    //\n    // CONSTANTS\n    //\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    //\n    // STATE\n    //\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    private boolean _chatty;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    //\n    // CONSTRUCTOR\n    //\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    /** Construct a quiet or chatty print stream */\n    public  NsTestPrintStream( PrintStream wrappedStream, boolean chatty )\n    {\n        super( wrappedStream );\n        _chatty = chatty;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    //\n    // OVERRIDDEN BEHAVIOR\n    //\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public PrintStream append( char c )\n    {\n        if ( _chatty ) { super.append( c ); }\n        return this;\n    }\n    public PrintStream append( CharSequence csq )\n    {\n        if ( _chatty ) { super.append( csq ); }\n        return this;\n    }\n    public PrintStream append( CharSequence csq, int start, int end )\n    {\n        if ( _chatty ) { super.append( csq, start, end ); }\n        return this;\n    }\n    public boolean checkError() { return super.checkError(); }\n    protected void clearError() { super.clearError(); }\n    public void close() { super.close(); }\n    public void flush() { super.flush(); }\n    public void print( boolean b )   { if ( _chatty ) { super.print( b ); } }\n    public void print( char c )   { if ( _chatty ) { super.print( c ); } }\n    public void print( int i )   { if ( _chatty ) { super.print( i ); } }\n    public void print( long l )   { if ( _chatty ) { super.print( l ); } }\n    public void print( float f )   { if ( _chatty ) { super.print( f ); } }\n    public void print( double d )   { if ( _chatty ) { super.print( d ); } }\n    public void print( char[] s )   { if ( _chatty ) { super.print( s ); } }\n    public void print( String s )   { if ( _chatty ) { super.print( s ); } }\n    public void print( Object obj )   { if ( _chatty ) { super.print( obj ); } }\n    public void println()   { if ( _chatty ) { super.println(); } }\n    public void println( boolean x )   { if ( _chatty ) { super.println( x ); } }\n    public void println( char x )   { if ( _chatty ) { super.println( x ); } }\n    public void println( int x )   { if ( _chatty ) { super.println( x ); } }\n    public void println( long x )   { if ( _chatty ) { super.println( x ); } }\n    public void println( float x )   { if ( _chatty ) { super.println( x ); } }\n    public void println( double x )   { if ( _chatty ) { super.println( x ); } }\n    public void println( char[] x )   { if ( _chatty ) { super.println( x ); } }\n    public void println( String x )   { if ( _chatty ) { super.println( x ); } }\n    public void println( Object x )   { if ( _chatty ) { super.println( x ); } }\n    public PrintStream printf( String format, Object... args )\n    {\n        if ( _chatty ) { super.printf( format, args ); }\n        return this;\n    }\n    public PrintStream printf( Locale l, String format, Object... args )\n    {\n        if ( _chatty ) { super.printf( l, format, args ); }\n        return this;\n    }\n    public PrintStream format( String format, Object... args )\n    {\n        if ( _chatty ) { super.format( format, args ); }\n        return this;\n    }\n    public PrintStream format( Locale l, String format, Object... args )\n    {\n        if ( _chatty ) { super.format( l, format, args ); }\n        return this;\n    }\n    public void write( byte[] buf, int off, int len )   { if ( _chatty ) { super.write( buf, off, len ); } }\n    public void write( int b )  { if ( _chatty ) { super.write( b ); } }\n\n}\n<fim_middle>// class below is blob\n"}