{"text": "<fim_prefix>              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n                struct.lock = iprot.readString();\n                struct.setLockIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 4: // EXTENT\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.extent = new org.apache.accumulo.core.dataImpl.thrift.TKeyExtent();\n                struct.extent.read(iprot);\n                struct.setExtentIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, flushTablet_args struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.tinfo != null) {\n          oprot.writeFieldBegin(TINFO_FIELD_DESC);\n          struct.tinfo.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.credentials != null) {\n          oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);\n          struct.credentials.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.lock != null) {\n          oprot.writeFieldBegin(LOCK_FIELD_DESC);\n          oprot.writeString(struct.lock);\n          oprot.writeFieldEnd();\n        }\n        if (struct.extent != null) {\n          oprot.writeFieldBegin(EXTENT_FIELD_DESC);\n          struct.extent.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class flushTablet_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n      public flushTablet_argsTupleScheme getScheme() {\n        return new flushTablet_argsTupleScheme();\n      }\n    }\n    private static class flushTablet_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<flushTablet_args> {\n      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, flushTablet_args struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n        java.util.BitSet optionals = new java.util.BitSet();\n        if (struct.isSetTinfo()) {\n          optionals.set(0);\n        }\n        if (struct.isSetCredentials()) {\n          optionals.set(1);\n        }\n        if (struct.isSetLock()) {\n          optionals.set(2);\n        }\n        if (struct.isSetExtent()) {\n          optionals.set(3);\n        }\n        oprot.writeBitSet(optionals, 4);\n        if (struct.isSetTinfo()) {\n          struct.tinfo.write(oprot);\n        }\n        if (struct.isSetCredentials()) {\n          struct.credentials.write(oprot);\n        }\n        if (struct.isSetLock()) {\n          oprot.writeString(struct.lock);\n        }\n        if (struct.isSetExtent()) {\n          struct.extent.write(oprot);\n        }\n      }\n      @Override\n      public void read(org.apache.thrift.protocol.TProtocol prot, flushTablet_args struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n        java.util.BitSet incoming = iprot.readBitSet(4);\n        if (incoming.get(0)) {\n          struct.tinfo = new org.apache.accumulo.core.trace.thrift.TInfo();\n          struct.tinfo.read(iprot);\n          struct.setTinfoIsSet(true);\n        }\n        if (incoming.get(1)) {\n          struct.credentials = new org.apache.accumulo.core.securityImpl.thrift.TCredentials();\n          struct.credentials.read(iprot);\n          struct.setCredentialsIsSet(true);\n        }\n        if (incoming.get(2)) {\n          struct.lock = iprot.readString();\n          struct.setLockIsSet(true);\n        }\n        if (incoming.get(3)) {\n          struct.extent = new org.apache.accumulo.core.dataImpl.thrift.TKeyExtent();\n          struct.extent.read(iprot);\n          struct.setExtentIsSet(true);\n        }\n      }\n    }\n    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {\n      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();\n    }\n  }\n  public static class chop_args implements org.apache.thrift.TBase<chop_args, chop_args._Fields>, java.io.Serializable, Cloneable, Comparable<chop_args>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"chop_args\");\n    private static final org.apache.thrift.protocol.TField TINFO_FIELD_DESC = new org.apache.thrift.protocol.TField(\"tinfo\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n    private static final org.apache.thrift.protocol.TField CREDENTIALS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"credentials\", org.apache.thrift.protocol.TType.STRUCT, (short)2);\n    private static final org.apache.thrift.protocol.TField LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField(\"lock\", org.apache.thrift.protocol.TType.STRING, (short)3);\n    private static final org.apache.thrift.protocol.TField EXTENT_FIELD_DESC = new org.apache.thrift.protocol.TField(\"extent\", org.apache.thrift.protocol.TType.STRUCT, (short)4);\n    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new chop_argsStandardSchemeFactory();\n    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new chop_argsTupleSchemeFactory();\n    public @org.apache.thrift.annotation.Nullable org.apache.accumulo.core.trace.thrift.TInfo tinfo; // required\n    public @org.apache.thrift.annotation.Nullable org.apache.accumulo.core.securityImpl.thrift.TCredentials credentials; // required\n    public @org.apache.thrift.annotation.Nullable java.lang.String lock; // required\n    public @org.apache.thrift.annotation.Nullable org.apache.accumulo.core.dataImpl.thrift.TKeyExtent extent; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      TINFO((short)1, \"tinfo\"),\n      CREDENTIALS((short)2, \"credentials\"),\n      LOCK((short)3, \"lock\"),\n      EXTENT((short)4, \"extent\");\n      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n      static {\n        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // TINFO\n            return TINFO;\n          case 2: // CREDENTIALS\n            return CREDENTIALS;\n          case 3: // LOCK\n            return LOCK;\n          case 4: // EXTENT\n            return EXTENT;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n<fim_suffix>      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByName(java.lang.String name) {\n        return byName.get(name);\n      }<fim_middle>// function below has no smell\n"}