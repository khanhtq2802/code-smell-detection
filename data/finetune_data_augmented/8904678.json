{"text": "<fim_prefix>/**\n * Autogenerated by Thrift Compiler (0.9.3)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage org.apache.hadoop.hive.metastore.api;\nimport org.apache.thrift.scheme.IScheme;\nimport org.apache.thrift.scheme.SchemeFactory;\nimport org.apache.thrift.scheme.StandardScheme;\nimport org.apache.thrift.scheme.TupleScheme;\nimport org.apache.thrift.protocol.TTupleProtocol;\nimport org.apache.thrift.protocol.TProtocolException;\nimport org.apache.thrift.EncodingUtils;\nimport org.apache.thrift.TException;\nimport org.apache.thrift.async.AsyncMethodCallback;\nimport org.apache.thrift.server.AbstractNonblockingServer.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.EnumMap;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.EnumSet;\nimport java.util.Collections;\nimport java.util.BitSet;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\nimport javax.annotation.Generated;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})\n@Generated(value = \"Autogenerated by Thrift Compiler (0.9.3)\")\n@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class WMGetAllResourcePlanRequest implements org.apache.thrift.TBase<WMGetAllResourcePlanRequest, WMGetAllResourcePlanRequest._Fields>, java.io.Serializable, Cloneable, Comparable<WMGetAllResourcePlanRequest> {\n  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"WMGetAllResourcePlanRequest\");\n  private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"ns\", org.apache.thrift.protocol.TType.STRING, (short)1);\n  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n  static {\n    schemes.put(StandardScheme.class, new WMGetAllResourcePlanRequestStandardSchemeFactory());\n    schemes.put(TupleScheme.class, new WMGetAllResourcePlanRequestTupleSchemeFactory());\n  }\n  private String ns; // optional\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n    NS((short)1, \"ns\");\n    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n    static {\n      for (_Fields field : EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // NS\n          return NS;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final String _fieldName;\n    _Fields(short thriftId, String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  private static final _Fields optionals[] = {_Fields.NS};\n  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData(\"ns\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    metaDataMap = Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WMGetAllResourcePlanRequest.class, metaDataMap);\n  }\n  public WMGetAllResourcePlanRequest() {\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public WMGetAllResourcePlanRequest(WMGetAllResourcePlanRequest other) {\n    if (other.isSetNs()) {\n      this.ns = other.ns;\n    }\n  }\n  public WMGetAllResourcePlanRequest deepCopy() {\n    return new WMGetAllResourcePlanRequest(this);\n  }\n  @Override\n  public void clear() {\n    this.ns = null;\n  }\n  public String getNs() {\n    return this.ns;\n  }\n  public void setNs(String ns) {\n    this.ns = ns;\n  }\n  public void unsetNs() {\n    this.ns = null;\n  }\n  /** Returns true if field ns is set (has been assigned a value) and false otherwise */\n  public boolean isSetNs() {\n    return this.ns != null;\n  }\n  public void setNsIsSet(boolean value) {\n    if (!value) {\n      this.ns = null;\n    }\n  }\n  public void setFieldValue(_Fields field, Object value) {\n    switch (field) {\n    case NS:\n      if (value == null) {\n        unsetNs();\n      } else {\n        setNs((String)value);\n      }\n      break;\n    }\n  }\n  public Object getFieldValue(_Fields field) {\n    switch (field) {\n    case NS:\n      return getNs();\n    }\n    throw new IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n<fim_suffix>  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new IllegalArgumentException();\n    }\n    switch (field) {\n    case NS:\n      return isSetNs();\n    }\n    throw new IllegalStateException();\n  }\n  @Override\n  public boolean equals(Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof WMGetAllResourcePlanRequest)\n      return this.equals((WMGetAllResourcePlanRequest)that);\n    return false;\n  }\n  public boolean equals(WMGetAllResourcePlanRequest that) {\n    if (that == null)\n      return false;\n    boolean this_present_ns = true && this.isSetNs();\n    boolean that_present_ns = true && that.isSetNs();\n    if (this_present_ns || that_present_ns) {\n      if (!(this_present_ns && that_present_ns))\n        return false;\n      if (!this.ns.equals(that.ns))\n        return false;\n    }\n    return true;\n  }\n  @Override\n  public int hashCode() {\n    List<Object> list = new ArrayList<Object>();\n    boolean present_ns = true && (isSetNs());\n    list.add(present_ns);\n    if (present_ns)\n      list.add(ns);\n    return list.hashCode();\n  }\n  @Override\n  public int compareTo(WMGetAllResourcePlanRequest other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    lastComparison = Boolean.valueOf(isSetNs()).compareTo(other.isSetNs());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetNs()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, other.ns);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n  }\n  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {<fim_middle>// function below has no smell\n"}