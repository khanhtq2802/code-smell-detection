{"text": "<fim_prefix>package org.apache.maven.surefire.booter;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport javax.annotation.Nonnull;\n\n/**\n * Configuration that is used by the SurefireStarter but does not make it into the provider itself.\n *\n * @author Kristian Rosenvold\n */\n<fim_suffix>public class StartupConfiguration\n{\n    private static final String SUREFIRE_TEST_CLASSPATH = \"surefire.test.class.path\";\n\n    private final String providerClassName;\n    private final AbstractPathConfiguration classpathConfiguration;\n    private final ClassLoaderConfiguration classLoaderConfiguration;\n    private final boolean isForkRequested;\n    private final boolean isInForkedVm;\n\n    public StartupConfiguration( @Nonnull String providerClassName,\n                                 @Nonnull AbstractPathConfiguration classpathConfiguration,\n                                 @Nonnull ClassLoaderConfiguration classLoaderConfiguration, boolean isForkRequested,\n                                 boolean inForkedVm )\n    {\n        this.classpathConfiguration = classpathConfiguration;\n        this.classLoaderConfiguration = classLoaderConfiguration;\n        this.isForkRequested = isForkRequested;\n        this.providerClassName = providerClassName;\n        isInForkedVm = inForkedVm;\n    }\n\n    public boolean isProviderMainClass()\n    {\n        return providerClassName.endsWith( \"#main\" );\n    }\n\n    public static StartupConfiguration inForkedVm( String providerClassName,\n                                                   ClasspathConfiguration classpathConfiguration,\n                                                   ClassLoaderConfiguration classLoaderConfiguration )\n    {\n        return new StartupConfiguration( providerClassName, classpathConfiguration, classLoaderConfiguration, true,\n                                         true );\n    }\n\n    public AbstractPathConfiguration getClasspathConfiguration()\n    {\n        return classpathConfiguration;\n    }\n\n    @Deprecated\n    public boolean useSystemClassLoader()\n    {\n        // todo; I am not totally convinced this logic is as simple as it could be\n        return classLoaderConfiguration.isUseSystemClassLoader() && ( isInForkedVm || isForkRequested );\n    }\n\n    public boolean isManifestOnlyJarRequestedAndUsable()\n    {\n        return classLoaderConfiguration.isManifestOnlyJarRequestedAndUsable();\n    }\n\n    public String getProviderClassName()\n    {\n        return providerClassName;\n    }\n\n    public String getActualClassName()\n    {\n        return isProviderMainClass() ? stripEnd( providerClassName, \"#main\" ) : providerClassName;\n    }\n\n    /**\n     * <p>Strip any of a supplied String from the end of a String.</p>\n     * <br>\n     * <p>If the strip String is {@code null}, whitespace is\n     * stripped.</p>\n     *\n     * @param str   the String to remove characters from\n     * @param strip the String to remove\n     * @return the stripped String\n     */\n    private static String stripEnd( String str, String strip )\n    {\n        if ( str == null )\n        {\n            return null;\n        }\n        int end = str.length();\n\n        if ( strip == null )\n        {\n            while ( ( end != 0 ) && Character.isWhitespace( str.charAt( end - 1 ) ) )\n            {\n                end--;\n            }\n        }\n        else\n        {\n            while ( end != 0 && strip.indexOf( str.charAt( end - 1 ) ) != -1 )\n            {\n                end--;\n            }\n        }\n        return str.substring( 0, end );\n    }\n\n    public ClassLoaderConfiguration getClassLoaderConfiguration()\n    {\n        return classLoaderConfiguration;\n    }\n\n    public boolean isShadefire()\n    {\n        return providerClassName.startsWith( \"org.apache.maven.shadefire.surefire\" );\n    }\n\n    public void writeSurefireTestClasspathProperty()\n    {\n        getClasspathConfiguration().getTestClasspath().writeToSystemProperty( SUREFIRE_TEST_CLASSPATH );\n    }\n}<fim_middle>// class below is blob\n"}