{"text": "<fim_prefix>/*\n * reserved comment block\n * DO NOT REMOVE OR ALTER!\n */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage com.sun.org.apache.xml.internal.security.c14n;\n\n// NOTE! This is a duplicate of utils.ClassLoaderUtils with public\n// modifiers changed to package-private. Make sure to integrate any future\n// changes to utils.ClassLoaderUtils to this file.\nfinal class ClassLoaderUtils {\n\n    private static final com.sun.org.slf4j.internal.Logger LOG =\n        com.sun.org.slf4j.internal.LoggerFactory.getLogger(ClassLoaderUtils.class);\n\n    private ClassLoaderUtils() {\n    }\n\n    /**\n     * Load a class with a given name. <p></p> It will try to load the class in the\n     * following order:\n     * <ul>\n     * <li>From Thread.currentThread().getContextClassLoader()\n     * <li>Using the basic Class.forName()\n     * <li>From ClassLoaderUtil.class.getClassLoader()\n     * <li>From the callingClass.getClassLoader()\n     * </ul>\n     *\n     * @param className The name of the class to load\n     * @param callingClass The Class object of the calling object\n     * @throws ClassNotFoundException If the class cannot be found anywhere.\n     */\n    static Class<?> loadClass(String className, Class<?> callingClass)\n        throws ClassNotFoundException {\n        try {\n            ClassLoader cl = Thread.currentThread().getContextClassLoader();\n\n            if (cl != null) {\n                return cl.loadClass(className);\n            }\n        } catch (ClassNotFoundException e) {\n            LOG.debug(e.getMessage(), e);\n            //ignore\n        }\n        return loadClass2(className, callingClass);\n    }\n\n<fim_suffix>    private static Class<?> loadClass2(String className, Class<?> callingClass)\n        throws ClassNotFoundException {\n        try {\n            return Class.forName(className);\n        } catch (ClassNotFoundException ex) {\n            try {\n                if (ClassLoaderUtils.class.getClassLoader() != null) {\n                    return ClassLoaderUtils.class.getClassLoader().loadClass(className);\n                }\n            } catch (ClassNotFoundException exc) {\n                if (callingClass != null && callingClass.getClassLoader() != null) {\n                    return callingClass.getClassLoader().loadClass(className);\n                }\n            }\n            LOG.debug(ex.getMessage(), ex);\n            throw ex;\n        }\n    }\n}<fim_middle>// function below has no smell\n"}