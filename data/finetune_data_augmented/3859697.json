{"text": "<fim_prefix>        }\n        init(resolver);\n        resolversMap.put(resolver.getName(), resolver);\n        if (resolver instanceof ChainResolver) {\n            List<DependencyResolver> subresolvers = ((ChainResolver) resolver).getResolvers();\n            for (DependencyResolver dr : subresolvers) {\n                addResolver(dr);\n            }\n        } else if (resolver instanceof DualResolver) {\n            DependencyResolver ivyResolver = ((DualResolver) resolver).getIvyResolver();\n            if (ivyResolver != null) {\n                addResolver(ivyResolver);\n            }\n            DependencyResolver artifactResolver = ((DualResolver) resolver).getArtifactResolver();\n            if (artifactResolver != null) {\n                addResolver(artifactResolver);\n            }\n        }\n    }\n    public synchronized void setDefaultCache(File cacheDirectory) {\n        setVariable(\"ivy.cache.dir\", cacheDirectory.getAbsolutePath(), false);\n        defaultCache = cacheDirectory;\n        if (defaultRepositoryCacheManager != null) {\n            if (\"default-cache\".equals(defaultRepositoryCacheManager.getName())\n                    && defaultRepositoryCacheManager instanceof DefaultRepositoryCacheManager) {\n                ((DefaultRepositoryCacheManager) defaultRepositoryCacheManager)\n                        .setBasedir(defaultCache);\n            }\n        }\n    }\n    public synchronized void setDefaultResolver(String resolverName) {\n        checkResolverName(resolverName);\n        if (resolverName != null && !resolverName.equals(defaultResolverName)) {\n            defaultResolver = null;\n        }\n        defaultResolverName = resolverName;\n    }\n    private void checkResolverName(String resolverName) {\n        if (resolverName != null && !resolversMap.containsKey(resolverName)) {\n            throw new IllegalArgumentException(\"no resolver found called \" + resolverName\n                    + \": check your settings\");\n        }\n    }\n    /**\n     * regular expressions as explained in Pattern class may be used in attributes\n     *\n     * @param attributes Map\n     * @param matcher PatternMatcher\n     * @param resolverName String\n     * @param branch String\n     * @param conflictManager String\n     * @param resolveMode String\n     */\n    public synchronized void addModuleConfiguration(Map<String, String> attributes,\n            PatternMatcher matcher, String resolverName, String branch, String conflictManager,\n            String resolveMode) {\n        checkResolverName(resolverName);\n        moduleSettings.defineRule(new MapMatcher(attributes, matcher), new ModuleSettings(\n                resolverName, branch, conflictManager, resolveMode));\n    }\n    /**\n     * Return the canonical form of a filename.\n     * <p>\n     * If the specified file name is relative it is resolved with respect to the settings's base\n     * directory.\n     *\n     * @param fileName\n     *            The name of the file to resolve. Must not be <code>null</code>.\n     *\n     * @return the resolved File.\n     *\n     */\n    public synchronized File resolveFile(String fileName) {\n        return FileUtil.resolveFile(baseDir, fileName);\n    }\n    public synchronized void setBaseDir(File baseDir) {\n        this.baseDir = baseDir.getAbsoluteFile();\n        setVariable(\"ivy.basedir\", this.baseDir.getAbsolutePath());\n        setVariable(\"basedir\", this.baseDir.getAbsolutePath(), false);\n    }\n    public synchronized File getBaseDir() {\n        return baseDir;\n    }\n    public synchronized File getDefaultIvyUserDir() {\n        if (defaultUserDir == null) {\n            if (getVariable(\"ivy.home\") != null) {\n                setDefaultIvyUserDir(Checks.checkAbsolute(getVariable(\"ivy.home\"), \"ivy.home\"));\n                Message.verbose(\"using ivy.default.ivy.user.dir variable for default ivy user dir: \"\n                        + defaultUserDir);\n            } else {\n                setDefaultIvyUserDir(new File(System.getProperty(\"user.home\"), \".ivy2\"));\n                Message.verbose(\"no default ivy user dir defined: set to \" + defaultUserDir);\n            }\n        }\n        return defaultUserDir;\n    }\n    public synchronized void setDefaultIvyUserDir(File defaultUserDir) {\n        this.defaultUserDir = defaultUserDir;\n        setVariable(\"ivy.default.ivy.user.dir\", this.defaultUserDir.getAbsolutePath());\n        setVariable(\"ivy.home\", this.defaultUserDir.getAbsolutePath());\n    }\n    public synchronized File getDefaultCache() {\n        if (defaultCache == null) {\n            String cache = getVariable(\"ivy.cache.dir\");\n            if (cache != null) {\n                defaultCache = Checks.checkAbsolute(cache, \"ivy.cache.dir\");\n            } else {\n                setDefaultCache(new File(getDefaultIvyUserDir(), \"cache\"));\n                Message.verbose(\"no default cache defined: set to \" + defaultCache);\n            }\n        }\n        return defaultCache;\n    }\n    public synchronized void setDefaultRepositoryCacheBasedir(String repositoryCacheRoot) {\n        setVariable(\"ivy.cache.repository\", repositoryCacheRoot, true);\n        if (defaultRepositoryCacheManager != null\n                && \"default-cache\".equals(defaultRepositoryCacheManager.getName())\n                && defaultRepositoryCacheManager instanceof DefaultRepositoryCacheManager) {\n            ((DefaultRepositoryCacheManager) defaultRepositoryCacheManager)\n                    .setBasedir(getDefaultRepositoryCacheBasedir());\n        }\n    }\n    public synchronized void setDefaultResolutionCacheBasedir(String resolutionCacheRoot) {\n        setVariable(\"ivy.cache.resolution\", resolutionCacheRoot, true);\n        if (resolutionCacheManager != null\n                && resolutionCacheManager instanceof DefaultResolutionCacheManager) {\n            ((DefaultResolutionCacheManager) resolutionCacheManager)\n                    .setBasedir(getDefaultResolutionCacheBasedir());\n        }\n    }\n    public synchronized File getDefaultRepositoryCacheBasedir() {\n        String repositoryCacheRoot = getVariable(\"ivy.cache.repository\");\n        if (repositoryCacheRoot != null) {\n            return Checks.checkAbsolute(repositoryCacheRoot, \"ivy.cache.repository\");\n        } else {\n            return getDefaultCache();\n        }\n    }\n    public synchronized File getDefaultResolutionCacheBasedir() {\n        String resolutionCacheRoot = getVariable(\"ivy.cache.resolution\");\n        if (resolutionCacheRoot != null) {\n            return Checks.checkAbsolute(resolutionCacheRoot, \"ivy.cache.resolution\");\n        } else {\n            return getDefaultCache();\n        }\n    }\n    public synchronized void setDictatorResolver(DependencyResolver resolver) {\n        dictatorResolver = resolver;\n    }\n    private DependencyResolver getDictatorResolver() {\n        if (dictatorResolver == null) {\n            return null;\n        }\n        if (workspaceResolver != null && !(dictatorResolver instanceof WorkspaceChainResolver)) {\n            dictatorResolver = new WorkspaceChainResolver(this, dictatorResolver, workspaceResolver);\n        }\n        return dictatorResolver;\n    }\n    public synchronized DependencyResolver getResolver(ModuleRevisionId mrid) {\n        DependencyResolver r = getDictatorResolver();\n        if (r != null) {\n            return r;\n        }\n        String resolverName = getResolverName(mrid);\n        return getResolver(resolverName);\n    }\n    public synchronized boolean hasResolver(String resolverName) {\n        return resolversMap.containsKey(resolverName);\n    }\n    public synchronized DependencyResolver getResolver(String resolverName) {\n        DependencyResolver r = getDictatorResolver();\n        if (r != null) {\n            return r;\n        }\n        DependencyResolver resolver = resolversMap.get(resolverName);\n        if (resolver == null) {\n            Message.error(\"unknown resolver \" + resolverName);\n        } else if (workspaceResolver != null && !(resolver instanceof WorkspaceChainResolver)) {\n            resolver = new WorkspaceChainResolver(this, resolver, workspaceResolver);\n            resolversMap.put(resolver.getName(), resolver);\n            resolversMap.put(resolverName, resolver);\n        }\n        return resolver;\n    }\n    public synchronized DependencyResolver getDefaultResolver() {\n        DependencyResolver r = getDictatorResolver();\n        if (r != null) {\n            return r;\n        }\n        if (defaultResolver == null) {\n            defaultResolver = resolversMap.get(defaultResolverName);\n        }\n        if (workspaceResolver != null && !(defaultResolver instanceof WorkspaceChainResolver)) {\n            defaultResolver = new WorkspaceChainResolver(this, defaultResolver, workspaceResolver);\n        }\n        return defaultResolver;\n    }\n    public synchronized String getResolverName(ModuleRevisionId mrid) {\n        ModuleSettings ms = moduleSettings.getRule(mrid, new Filter<ModuleSettings>() {\n            public boolean accept(ModuleSettings o) {\n                return o.getResolverName() != null;\n            }\n        });\n        return ms == null ? defaultResolverName : ms.getResolverName();\n    }\n    public synchronized String getDefaultBranch(ModuleId moduleId) {\n        ModuleSettings ms = moduleSettings.getRule(moduleId, new Filter<ModuleSettings>() {\n            public boolean accept(ModuleSettings o) {\n                return o.getBranch() != null;\n            }\n        });\n        return ms == null ? getDefaultBranch() : ms.getBranch();\n    }\n    public synchronized String getDefaultBranch() {\n        return defaultBranch;\n    }\n<fim_suffix>    public synchronized void setDefaultBranch(String defaultBranch) {\n        this.defaultBranch = defaultBranch;\n    }<fim_middle>// function below has no smell\n"}