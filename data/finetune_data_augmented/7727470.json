{"text": "<fim_prefix>package ru.yandex.market.graphouse.server;\n\nimport com.google.common.base.Splitter;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport ru.yandex.market.graphouse.Metric;\nimport ru.yandex.market.graphouse.MetricUtil;\nimport ru.yandex.market.graphouse.MetricValidator;\nimport ru.yandex.market.graphouse.search.MetricSearch;\nimport ru.yandex.market.graphouse.search.MetricStatus;\nimport ru.yandex.market.graphouse.search.tree.MetricDescription;\n\nimport java.util.List;\n\n/**\n * @author Dmitry Andreev <a href=\"mailto:AndreevDm@yandex-team.ru\"></a>\n * @date 08/05/15\n */\npublic class MetricFactory {\n\n    private static final Logger log = LogManager.getLogger();\n\n    private final MetricSearch metricSearch;\n    private final MetricValidator metricValidator;\n\n    private final boolean redirectHostMetrics;\n    private final String hostMetricDir;\n    private final List<String> hostPostfixes;\n\n<fim_suffix>    public MetricFactory(MetricSearch metricSearch, MetricValidator metricValidator,\n                         boolean redirectHostMetrics, String hostMetricDir, String hostPostfixes) {\n        this.metricSearch = metricSearch;\n        this.metricValidator = metricValidator;\n        this.redirectHostMetrics = redirectHostMetrics;\n        this.hostMetricDir = hostMetricDir;\n        this.hostPostfixes = Splitter.on(',').omitEmptyStrings().splitToList(hostPostfixes);\n        if (redirectHostMetrics) {\n            log.info(\"Host host metrics redirection enabled for postfixes {} to dir {}\", hostPostfixes, hostMetricDir);\n        } else {\n            log.info(\"Host metric redirection disabled\");\n        }\n    }\n\n    /**\n     * Validates the metric and, if successful, creates or updates the current one.\n     *\n     * @param line           contains name of the metric, value, timestamp\n     * @param updatedSeconds\n     * @return Created or updated metric,\n     * <code>null</code> if the metric name or value is not valid, the metric is banned\n     */\n    public Metric createMetric(String line, int updatedSeconds) {\n\n        String[] splits = line.split(\" \");\n        if (splits.length != 3) {\n            return null;\n        }\n        String name = processName(splits[0]);\n        String[] nameSplits = MetricUtil.splitToLevels(name);\n        //Trying to fast find metric in tree. In success we can skip validation;\n        MetricDescription metric = metricSearch.maybeFindMetric(nameSplits);\n        if (metric == null) {\n            if (!metricValidator.validate(name, false)) {\n                return null;\n            }\n            metric = metricSearch.add(name);\n            if (metric == null) {\n                return null;\n            }\n        } else if (metric.getStatus() == MetricStatus.AUTO_HIDDEN || metric.getStatus() == MetricStatus.HIDDEN) {\n            metric = metricSearch.add(name);\n        }\n        if (metric.getStatus() == MetricStatus.BAN) {\n            return null;\n        }\n\n        try {\n            double value = Double.parseDouble(splits[1]);\n            if (!Double.isFinite(value)) {\n                return null;\n            }\n            int timeSeconds = (int) Math.round(Double.parseDouble(splits[2]));\n            if (timeSeconds <= 0) {\n                return null;\n            }\n            return new Metric(metric, timeSeconds, value, updatedSeconds);\n        } catch (NumberFormatException e) {\n            return null;\n        }\n    }\n\n    public String processName(String name) {\n        if (!redirectHostMetrics) {\n            return name;\n        }\n        String[] splits = name.split(\"\\\\.\", 3);\n        for (int i = 0; i < hostPostfixes.size(); i++) {\n            if (splits[1].endsWith(hostPostfixes.get(i))) {\n                return splits[0] + \".\" + hostMetricDir + \".\" + splits[1] + \".\" + splits[2];\n            }\n        }\n        return name;\n    }\n}<fim_middle>// function below has no smell\n"}