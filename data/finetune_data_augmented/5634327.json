{"text": "<fim_prefix>/*\n *\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\npackage flash.swf.tags;\n\nimport flash.swf.Tag;\nimport flash.swf.TagHandler;\nimport flash.swf.types.Rect;\nimport flash.swf.types.ShapeWithStyle;\n\nimport java.util.Iterator;\nimport java.util.LinkedList;\n\n/**\n * Represents a DefineShape SWF tag.\n */\npublic class DefineShape extends DefineTag\n{\n    public DefineShape(int code)\n    {\n        super(code);\n    }\n\n\tpublic void visit(TagHandler h)\n\t{\n        switch(code)\n        {\n        case stagDefineShape:\n            h.defineShape(this);\n            break;\n        case stagDefineShape2:\n            h.defineShape2(this);\n            break;\n        case stagDefineShape3:\n            h.defineShape3(this);\n            break;\n        case stagDefineShape4:\n            h.defineShape4(this);\n            break;\n        default:\n            assert (false);\n            break;\n        }\n\t}\n\n    public Iterator<Tag> getReferences()\n    {\n        LinkedList<Tag> refs = new LinkedList<Tag>();\n\n        shapeWithStyle.getReferenceList( refs );\n\n        return refs.iterator();\n    }\n\n\tpublic Rect bounds;\n\tpublic ShapeWithStyle shapeWithStyle;\n\tpublic boolean usesFillWindingRule;\n\tpublic boolean usesNonScalingStrokes;\n    public boolean usesScalingStrokes;\n    public Rect edgeBounds;\n\n    public DefineScalingGrid scalingGrid;\n<fim_suffix>    public boolean equals(Object object)\n    {\n        boolean isEqual = false;\n\n        if (super.equals(object) && (object instanceof DefineShape))\n        {\n            DefineShape defineShape = (DefineShape) object;\n\n            if ( equals(defineShape.bounds, this.bounds) &&\n                 equals(defineShape.shapeWithStyle, this.shapeWithStyle) &&\n                 equals(defineShape.edgeBounds, this.edgeBounds) &&\n                 (defineShape.usesFillWindingRule == this.usesFillWindingRule) &&\n                 (defineShape.usesNonScalingStrokes == this.usesNonScalingStrokes) &&\n                  (defineShape.usesScalingStrokes == this.usesScalingStrokes))\n            {\n                isEqual = true;\n            }\n        }\n\n        return isEqual;\n    }\n\n    public int hashCode() {\n      int hashCode = super.hashCode();\n      hashCode += DefineTag.PRIME * bounds.hashCode();\n      if (shapeWithStyle.shapeRecords !=null) {\n        hashCode += DefineTag.PRIME * shapeWithStyle.shapeRecords.size();\n      }\n      if (shapeWithStyle.linestyles !=null) {\n        hashCode += DefineTag.PRIME * shapeWithStyle.linestyles.size();\n      }\n      return hashCode;\n    }\n\n}<fim_middle>// function below has no smell\n"}