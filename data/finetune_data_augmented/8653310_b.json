{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.ignite.internal.processors.query.h2.sys.view;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.UUID;\nimport org.apache.ignite.cluster.ClusterMetrics;\nimport org.apache.ignite.cluster.ClusterNode;\nimport org.apache.ignite.internal.GridKernalContext;\nimport org.apache.ignite.internal.util.typedef.F;\nimport org.h2.engine.Session;\nimport org.h2.result.Row;\nimport org.h2.result.SearchRow;\nimport org.h2.value.Value;\n/**\n * System view: node metrics.\n */\npublic class SqlSystemViewNodeMetrics extends SqlAbstractLocalSystemView {\n    /**\n     * @param ctx Grid context.\n     */\n    public SqlSystemViewNodeMetrics(GridKernalContext ctx) {\n        super(\"NODE_METRICS\", \"Node metrics\", ctx, \"NODE_ID\",\n            newColumn(\"NODE_ID\", Value.UUID),\n            newColumn(\"LAST_UPDATE_TIME\", Value.TIMESTAMP),\n            newColumn(\"MAX_ACTIVE_JOBS\", Value.INT),\n            newColumn(\"CUR_ACTIVE_JOBS\", Value.INT),\n            newColumn(\"AVG_ACTIVE_JOBS\", Value.FLOAT),\n            newColumn(\"MAX_WAITING_JOBS\", Value.INT),\n            newColumn(\"CUR_WAITING_JOBS\", Value.INT),\n            newColumn(\"AVG_WAITING_JOBS\", Value.FLOAT),\n            newColumn(\"MAX_REJECTED_JOBS\", Value.INT),\n            newColumn(\"CUR_REJECTED_JOBS\", Value.INT),\n            newColumn(\"AVG_REJECTED_JOBS\", Value.FLOAT),\n            newColumn(\"TOTAL_REJECTED_JOBS\", Value.INT),\n            newColumn(\"MAX_CANCELED_JOBS\", Value.INT),\n            newColumn(\"CUR_CANCELED_JOBS\", Value.INT),\n            newColumn(\"AVG_CANCELED_JOBS\", Value.FLOAT),\n            newColumn(\"TOTAL_CANCELED_JOBS\", Value.INT),\n            newColumn(\"MAX_JOBS_WAIT_TIME\", Value.LONG),\n            newColumn(\"CUR_JOBS_WAIT_TIME\", Value.LONG),\n            newColumn(\"AVG_JOBS_WAIT_TIME\", Value.LONG),\n            newColumn(\"MAX_JOBS_EXECUTE_TIME\", Value.LONG),\n            newColumn(\"CUR_JOBS_EXECUTE_TIME\", Value.LONG),\n            newColumn(\"AVG_JOBS_EXECUTE_TIME\", Value.LONG),\n            newColumn(\"TOTAL_JOBS_EXECUTE_TIME\", Value.LONG),\n            newColumn(\"TOTAL_EXECUTED_JOBS\", Value.INT),\n            newColumn(\"TOTAL_EXECUTED_TASKS\", Value.INT),\n            newColumn(\"TOTAL_BUSY_TIME\", Value.LONG),\n            newColumn(\"TOTAL_IDLE_TIME\", Value.LONG),\n            newColumn(\"CUR_IDLE_TIME\", Value.LONG),\n            newColumn(\"BUSY_TIME_PERCENTAGE\", Value.FLOAT),\n            newColumn(\"IDLE_TIME_PERCENTAGE\", Value.FLOAT),\n            newColumn(\"TOTAL_CPU\", Value.INT),\n            newColumn(\"CUR_CPU_LOAD\", Value.DOUBLE),\n            newColumn(\"AVG_CPU_LOAD\", Value.DOUBLE),\n            newColumn(\"CUR_GC_CPU_LOAD\", Value.DOUBLE),\n            newColumn(\"HEAP_MEMORY_INIT\", Value.LONG),\n            newColumn(\"HEAP_MEMORY_USED\", Value.LONG),\n            newColumn(\"HEAP_MEMORY_COMMITED\", Value.LONG),\n            newColumn(\"HEAP_MEMORY_MAX\", Value.LONG),\n            newColumn(\"HEAP_MEMORY_TOTAL\", Value.LONG),\n            newColumn(\"NONHEAP_MEMORY_INIT\", Value.LONG),\n            newColumn(\"NONHEAP_MEMORY_USED\", Value.LONG),\n            newColumn(\"NONHEAP_MEMORY_COMMITED\", Value.LONG),\n            newColumn(\"NONHEAP_MEMORY_MAX\", Value.LONG),\n            newColumn(\"NONHEAP_MEMORY_TOTAL\", Value.LONG),\n            newColumn(\"UPTIME\", Value.LONG),\n            newColumn(\"JVM_START_TIME\", Value.TIMESTAMP),\n            newColumn(\"NODE_START_TIME\", Value.TIMESTAMP),\n            newColumn(\"LAST_DATA_VERSION\", Value.LONG),\n            newColumn(\"CUR_THREAD_COUNT\", Value.INT),\n            newColumn(\"MAX_THREAD_COUNT\", Value.INT),\n            newColumn(\"TOTAL_THREAD_COUNT\", Value.LONG),\n            newColumn(\"CUR_DAEMON_THREAD_COUNT\", Value.INT),\n            newColumn(\"SENT_MESSAGES_COUNT\", Value.INT),\n            newColumn(\"SENT_BYTES_COUNT\", Value.LONG),\n            newColumn(\"RECEIVED_MESSAGES_COUNT\", Value.INT),\n            newColumn(\"RECEIVED_BYTES_COUNT\", Value.LONG),\n            newColumn(\"OUTBOUND_MESSAGES_QUEUE\", Value.INT)\n        );\n    }\n    /** {@inheritDoc} */\n<fim_suffix>    @Override public Iterator<Row> getRows(Session ses, SearchRow first, SearchRow last) {\n        List<Row> rows = new ArrayList<>();\n        Collection<ClusterNode> nodes;\n        SqlSystemViewColumnCondition idCond = conditionForColumn(\"NODE_ID\", first, last);\n        if (idCond.isEquality()) {\n            try {\n                UUID nodeId = uuidFromValue(idCond.valueForEquality());\n                ClusterNode node = nodeId == null ? null : ctx.discovery().node(nodeId);\n                if (node != null)\n                    nodes = Collections.singleton(node);\n                else\n                    nodes = Collections.emptySet();\n            }\n            catch (Exception e) {\n                nodes = Collections.emptySet();\n            }\n        }\n        else\n            nodes = F.concat(false, ctx.discovery().allNodes(), ctx.discovery().daemonNodes());\n        for (ClusterNode node : nodes) {\n            if (node != null) {\n                ClusterMetrics metrics = node.metrics();\n                rows.add(\n                    createRow(\n                        ses,\n                        node.id(),\n                        valueTimestampFromMillis(metrics.getLastUpdateTime()),\n                        metrics.getMaximumActiveJobs(),\n                        metrics.getCurrentActiveJobs(),\n                        metrics.getAverageActiveJobs(),\n                        metrics.getMaximumWaitingJobs(),\n                        metrics.getCurrentWaitingJobs(),\n                        metrics.getAverageWaitingJobs(),\n                        metrics.getMaximumRejectedJobs(),\n                        metrics.getCurrentRejectedJobs(),\n                        metrics.getAverageRejectedJobs(),\n                        metrics.getTotalRejectedJobs(),\n                        metrics.getMaximumCancelledJobs(),\n                        metrics.getCurrentCancelledJobs(),\n                        metrics.getAverageCancelledJobs(),\n                        metrics.getTotalCancelledJobs(),\n                        metrics.getMaximumJobWaitTime(),\n                        metrics.getCurrentJobWaitTime(),\n                        (long)metrics.getAverageJobWaitTime(),\n                        metrics.getMaximumJobExecuteTime(),\n                        metrics.getCurrentJobExecuteTime(),\n                        (long)metrics.getAverageJobExecuteTime(),\n                        metrics.getTotalJobsExecutionTime(),\n                        metrics.getTotalExecutedJobs(),\n                        metrics.getTotalExecutedTasks(),\n                        metrics.getTotalBusyTime(),\n                        metrics.getTotalIdleTime(),\n                        metrics.getCurrentIdleTime(),\n                        metrics.getBusyTimePercentage(),\n                        metrics.getIdleTimePercentage(),\n                        metrics.getTotalCpus(),\n                        metrics.getCurrentCpuLoad(),\n                        metrics.getAverageCpuLoad(),\n                        metrics.getCurrentGcCpuLoad(),\n                        metrics.getHeapMemoryInitialized(),\n                        metrics.getHeapMemoryUsed(),\n                        metrics.getHeapMemoryCommitted(),\n                        metrics.getHeapMemoryMaximum(),\n                        metrics.getHeapMemoryTotal(),\n                        metrics.getNonHeapMemoryInitialized(),\n                        metrics.getNonHeapMemoryUsed(),\n                        metrics.getNonHeapMemoryCommitted(),\n                        metrics.getNonHeapMemoryMaximum(),\n                        metrics.getNonHeapMemoryTotal(),\n                        metrics.getUpTime(),\n                        valueTimestampFromMillis(metrics.getStartTime()),\n                        valueTimestampFromMillis(metrics.getNodeStartTime()),\n                        metrics.getLastDataVersion(),\n                        metrics.getCurrentThreadCount(),\n                        metrics.getMaximumThreadCount(),\n                        metrics.getTotalStartedThreadCount(),\n                        metrics.getCurrentDaemonThreadCount(),\n                        metrics.getSentMessagesCount(),\n                        metrics.getSentBytesCount(),\n                        metrics.getReceivedMessagesCount(),\n                        metrics.getReceivedBytesCount(),\n                        metrics.getOutboundMessagesQueueSize()\n                    )\n                );\n            }\n        }\n        return rows.iterator();\n    }\n    /** {@inheritDoc} */\n    @Override public boolean canGetRowCount() {\n        return true;\n    }<fim_middle>// function below is long method and feature envy\n"}