{"text": "<fim_prefix>      return this;\n    }\n    /**\n     * Configures the {@code SO_REUSEADDR} socket option\n     * \n     * @param soReuseAddress socket reuse flag\n     * @return this builder\n     */\n    public Builder usingSoReuseAddress(final boolean soReuseAddress) {\n      this.soReuseAddress = soReuseAddress;\n      return this;\n    }\n    /**\n     * Configures {@code SO_LINGER} in <em>seconds</em>. A linger of zero disables linger, and a\n     * linger of {@code -1} uses the system default.\n     * \n     * @param soLinger linger, in seconds\n     * @return this builder\n     */\n    public Builder withSoLinger(final int soLinger) {\n      this.soLinger = soLinger;\n      return this;\n    }\n    /**\n     * Configures the {@code SO_KEEPALIVE} socket option\n     * \n     * @param soKeepAlive keepalive flag\n     * @return this builder\n     */\n    public Builder usingSoKeepAlive(final boolean soKeepAlive) {\n      this.soKeepAlive = soKeepAlive;\n      return this;\n    }\n    /**\n     * Configures the {@code TCP_NODELAY} socket option\n     * \n     * @param tcpNoDelay tcp no delay flag\n     * @return this builder\n     */\n    public Builder usingTcpNoDelay(final boolean tcpNoDelay) {\n      this.tcpNoDelay = tcpNoDelay;\n      return this;\n    }\n    /**\n     * Configures {@code SO_SNDBUF}. A buffer of zero uses the system default.\n     * \n     * @param soSndBuf, a suggested send buffer size for connections\n     * @return this builder\n     */\n    public Builder withSoSndBuf(final int soSndBuf) {\n      this.soSndBuf = soSndBuf;\n      return this;\n    }\n    /**\n     * Configures {@code SO_RCVBUF}. A buffer of zero uses the system default.\n     * \n     * @param soRcvBuf, a suggested receive buffer size for connections\n     * @return this builder\n     */\n    public Builder withSoRcvBuf(final int soRcvBuf) {\n      this.soRcvBuf = soRcvBuf;\n      return this;\n    }\n    /**\n     * Configures the use of persistent tcp connections\n     * \n     * @param persistentConnections persistent connections flag\n     * @return this builder\n     */\n    public Builder usingPersistentConnections(final boolean persistentConnections) {\n      this.persistentConnections = persistentConnections;\n      return this;\n    }\n    /**\n     * Configures the maximum amount of time a connection is allowed to remain idle and subsequently\n     * be leased without first checking if the connection is stale. Stale connection check costs\n     * 20-30ms.\n     * \n     * @param validateAfterInactivity maximum idle time, in milliseconds\n     * @return this builder\n     */\n    public Builder withValidateAfterInactivity(final int validateAfterInactivity) {\n      this.validateAfterInactivity = validateAfterInactivity;\n      return this;\n    }\n    /**\n     * Configures the maximum amount of time a connection is allowed to remain idle and subsequently\n     * be leased. Connections that are idle longer than maxIdleTime will be closed.\n     * \n     * @param maxIdleTime maximum idle time prior to connection closure.\n     * @return this builder\n     */\n    public Builder withMaxIdleTime(final int maxIdleTime) {\n      this.maxIdleTime = maxIdleTime;\n      return this;\n    }\n    /**\n     * Configures the use of http chunked encoding for request bodies\n     * \n     * @param chunkedEncoding chunked encoding flag\n     * @return this builder\n     */\n    public Builder usingChunkedEncoding(final boolean chunkedEncoding) {\n      this.chunkedEncoding = chunkedEncoding;\n      return this;\n    }\n    /**\n     * Configures the use of expect: 100-continue flag for PUT and POST requests\n     * \n     * @param expectContinue expect continue flag\n     * @return this builder\n     */\n    public Builder usingExpectContinue(final boolean expectContinue) {\n      this.expectContinue = expectContinue;\n      return this;\n    }\n    /**\n     * Configure the duration to wait for a continue response from the target host after sending a\n     * 100-continue message prior to continuing with the request. Duration is in milliseconds\n     * \n     * @param waitForContinue wait for continue duration, in milliseconds\n     * @return this builder\n     */\n    public Builder withWaitForContinue(final int waitForContinue) {\n      this.waitForContinue = waitForContinue;\n      return this;\n    }\n    /**\n     * Configures the number of attempts to retry a request if an exception was thrown during its\n     * execution\n     * \n     * @param retryCount the number of retry attempts\n     * @return this builder\n     */\n    public Builder withRetryCount(final int retryCount) {\n      this.retryCount = retryCount;\n      return this;\n    }\n    /**\n     * Configures whether or not to retry a request when it has already been sent to the host\n     * \n     * @param requestSentRetry whether or not to retry a request which has already been sent\n     * @return this builder\n     */\n    public Builder usingRequestSentRetry(final boolean requestSentRetry) {\n      this.requestSentRetry = requestSentRetry;\n      return this;\n    }\n    /**\n     * Configures a list of SSL/TLS protocols to support, in preferred order\n     * \n     * @param protocols a list of protocols, in preferred order\n     * @return this builder\n     */\n    public Builder withProtocols(final List<String> protocols) {\n      this.protocols = protocols;\n      return this;\n    }\n    /**\n     * Configures a list of cipher suites for SSL/TLS requests, in preferred order\n     * \n     * @param cipherSuites a list of cipher suites, in preferred order\n     * @return this builder\n     */\n    public Builder withCipherSuites(final List<String> cipherSuites) {\n      this.cipherSuites = cipherSuites;\n      return this;\n    }\n    /**\n     * Configures a path to a key store to use for storing certificates requests\n     * \n     * @param keyStore path to a certificate key store file\n     * @return this builder\n     */\n    public Builder withKeyStore(final String keyStore) {\n      this.keyStore = keyStore;\n      return this;\n    }\n    /**\n     * Configures a password to use for a configured key store\n     * \n     * @param keyStorePassword password for configured key store\n     * @return this builder\n     */\n    public Builder withKeyStorePassword(final String keyStorePassword) {\n      this.keyStorePassword = keyStorePassword;\n      return this;\n    }\n    /**\n     * Configures a password to use for a certificate in the configured key store\n     * \n     * @param keyPassword password for a certificate in the configured key store\n     * @return this builder\n     */\n    public Builder withKeyPassword(final String keyPassword) {\n      this.keyPassword = keyPassword;\n      return this;\n    }\n    /**\n     * Configures a path to a trust store to use for validating server certificates for SSL/TLS\n     * requests\n     * \n     * @param trustStore path to a certificate trust store file\n     * @return this builder\n     */\n    public Builder withTrustStore(final String trustStore) {\n      this.trustStore = trustStore;\n      return this;\n    }\n    /**\n     * Configures a password to use for a configured trust store\n     * \n     * @param trustStorePassword password for configured trust store\n     * @return this builder\n     */\n    public Builder withTrustStorePassword(final String trustStorePassword) {\n      this.trustStorePassword = trustStorePassword;\n      return this;\n    }\n    /**\n     * Configures whether to trust self signed certificates for SSL/TLS requests\n     * \n     * @param trustSelfSignedCertificates whether to trust self signed certificates\n     * @return this builder\n     */\n    public Builder usingTrustSelfSignedCertificates(final boolean trustSelfSignedCertificates) {\n      this.trustSelfSignedCertificates = trustSelfSignedCertificates;\n      return this;\n    }\n    /**\n     * Configures dns cache ttl, in seconds\n     * \n     * @param dnsCacheTtl, cache ttl, in seconds\n     * @return this builder\n     */\n    public Builder withDnsCacheTtl(final int dnsCacheTtl) {\n      this.dnsCacheTtl = dnsCacheTtl;\n      return this;\n    }\n    /**\n     * Configures dns cache ttl for negative responses, in seconds\n     * \n     * @param dnsCacheNegativeTtl, cache ttl for negative responses, in seconds\n     * @return this builder\n     */\n    public Builder withDnsCacheNegativeTtl(final int dnsCacheNegativeTtl) {\n      this.dnsCacheNegativeTtl = dnsCacheNegativeTtl;\n      return this;\n    }\n    /**\n     * Configures the use of authentication for every request\n     * \n     * @param authentication the authentication type to use\n     * @return this builder\n     */\n<fim_suffix>    public Builder withAuthentication(final HttpAuth authentication) {\n      this.authentication = authentication;\n      return this;\n    }<fim_middle>// function below has no smell\n"}