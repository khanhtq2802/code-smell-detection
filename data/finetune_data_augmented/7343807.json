{"text": "<fim_prefix>                    final String message = MessageFormat.format(messageFormat, targetFile.getAbsolutePath());\n                    if (!MessageBoxHelpers.dialogConfirmPrompt(getShell(), title, message)) {\n                        continue;\n                    }\n                }\n                final DownloadFileAttachmentCommand downloadCommand =\n                    new DownloadFileAttachmentCommand(attachment.getURL(), targetFile, getServer().getConnection());\n                UICommandExecutorFactory.newUICommandExecutor(getShell()).execute(downloadCommand);\n            }\n        }\n    }\n    private void performCopyURLToClipboard() {\n        final Attachment attachment = (Attachment) getSelectedItem();\n        if (attachment.isNewlyCreated()) {\n            UIHelpers.copyToClipboard(attachment.getLocalFile().getAbsolutePath());\n        } else {\n            UIHelpers.copyToClipboard(attachment.getURL().toExternalForm());\n        }\n    }\n    @Override\n    protected void handleSelectionChanged(final Object[] selectedItems) {\n        final boolean oneAttachmentSelected = (selectedItems.length == 1);\n        final boolean oneOrMoreAttachmentsSelected = (selectedItems.length > 0);\n        boolean oneOrMoreSelectedAndAllAreNonNew = oneOrMoreAttachmentsSelected;\n        if (oneOrMoreSelectedAndAllAreNonNew) {\n            for (int i = 0; i < selectedItems.length; i++) {\n                final Attachment fileAttachment = (Attachment) selectedItems[i];\n                if (fileAttachment.isNewlyCreated()) {\n                    oneOrMoreSelectedAndAllAreNonNew = false;\n                    break;\n                }\n            }\n        }\n        openAction.setEnabled(oneAttachmentSelected);\n        openInBrowserAction.setEnabled(oneAttachmentSelected);\n        openLocallyAction.setEnabled(oneAttachmentSelected);\n        downloadToAction.setEnabled(oneOrMoreSelectedAndAllAreNonNew);\n        addAttachmentAction.setEnabled(true);\n        deleteAttachmentAction.setEnabled(oneOrMoreAttachmentsSelected);\n        copyUrlToClipboardAction.setEnabled(oneAttachmentSelected);\n        openButton.setEnabled(oneAttachmentSelected);\n        downloadButton.setEnabled(oneOrMoreSelectedAndAllAreNonNew);\n        addButton.setEnabled(true);\n        deleteButton.setEnabled(oneOrMoreAttachmentsSelected);\n    }\n    @Override\n    protected IToolTipProvider getToolTipProvider() {\n        return new IToolTipProvider() {\n            @Override\n            public String getToolTipText(final Object element) {\n                final Attachment attachment = (Attachment) element;\n                final String attachComment = attachment.getComment() != null ? attachment.getComment() : \"\"; //$NON-NLS-1$\n                final String attachDate = tooltipDateFormatter.format(attachment.getAttachmentAddedDate());\n                final String modifiedDate = tooltipDateFormatter.format(attachment.getLastModifiedDate());\n                final String commentFormat = Messages.getString(\"FileAttachmentsControl.CommentTooltipFormat\"); //$NON-NLS-1$\n                final String comment = MessageFormat.format(commentFormat, attachComment);\n                final String attachDateFormat = Messages.getString(\"FileAttachmentsControl.AttachDateTooltipFormat\"); //$NON-NLS-1$\n                final String attDate = MessageFormat.format(attachDateFormat, attachDate);\n                final String modifiedDateFormat =\n                    Messages.getString(\"FileAttachmentsControl.ModifiedDateTooltipFormat\"); //$NON-NLS-1$\n                final String modDate = MessageFormat.format(modifiedDateFormat, modifiedDate);\n                final StringBuffer buffer = new StringBuffer();\n                buffer.append(comment);\n                buffer.append(NEWLINE);\n                buffer.append(attDate);\n                buffer.append(NEWLINE);\n                buffer.append(modDate);\n                return buffer.toString();\n            }\n        };\n    }\n    @Override\n    protected void createButtons(final Composite parent) {\n        openButton =\n            createButton(parent, Messages.getString(\"FileAttachmentsControl.OpenButtonText\"), new SelectionAdapter() //$NON-NLS-1$\n        {\n                @Override\n                public void widgetSelected(final SelectionEvent e) {\n                    performOpen(DownloadAttachmentOpenType.USE_PREFERENCE);\n                }\n            });\n        downloadButton =\n            createButton(parent, Messages.getString(\"FileAttachmentsControl.DownloadButtonText\"), new SelectionAdapter() //$NON-NLS-1$\n        {\n                @Override\n                public void widgetSelected(final SelectionEvent e) {\n                    performDownloadTo();\n                }\n            });\n        addButton =\n            createButton(parent, Messages.getString(\"FileAttachmentsControl.AddButtonText\"), new SelectionAdapter() //$NON-NLS-1$\n        {\n                @Override\n                public void widgetSelected(final SelectionEvent e) {\n                    performAddAttachment();\n                }\n            });\n        deleteButton =\n            createButton(parent, Messages.getString(\"FileAttachmentsControl.DeleteButtonText\"), new SelectionAdapter() //$NON-NLS-1$\n        {\n                @Override\n                public void widgetSelected(final SelectionEvent e) {\n                    performDeleteAttachments();\n                }\n            });\n    }\n    @Override\n    protected int getNumberOfButtons() {\n        return 4;\n    }\n    private void setupActions() {\n        openAction = new Action() {\n            @Override\n            public void run() {\n                performOpen(DownloadAttachmentOpenType.USE_PREFERENCE);\n            }\n        };\n        openAction.setText(Messages.getString(\"FileAttachmentsControl.OpenActionText\")); //$NON-NLS-1$\n        openInBrowserAction = new Action() {\n            @Override\n            public void run() {\n                performOpen(DownloadAttachmentOpenType.BROWSER);\n            }\n        };\n        openInBrowserAction.setText(Messages.getString(\"FileAttachmentsControl.OpenInBrowserActionText\")); //$NON-NLS-1$\n        openLocallyAction = new Action() {\n            @Override\n            public void run() {\n                performOpen(DownloadAttachmentOpenType.LOCAL);\n            }\n        };\n        openLocallyAction.setText(Messages.getString(\"FileAttachmentsControl.OpenLocallyActionText\")); //$NON-NLS-1$\n        downloadToAction = new Action() {\n            @Override\n            public void run() {\n                performDownloadTo();\n            }\n        };\n        downloadToAction.setText(Messages.getString(\"FileAttachmentsControl.DownloadActionText\")); //$NON-NLS-1$\n        addAttachmentAction = new Action() {\n            @Override\n            public void run() {\n                performAddAttachment();\n            }\n        };\n        addAttachmentAction.setText(Messages.getString(\"FileAttachmentsControl.AddAttachmentButtonText\")); //$NON-NLS-1$\n        deleteAttachmentAction = new Action() {\n            @Override\n            public void run() {\n                performDeleteAttachments();\n            }\n        };\n        deleteAttachmentAction.setText(Messages.getString(\"FileAttachmentsControl.DeleteAttachmentButtonText\")); //$NON-NLS-1$\n        copyUrlToClipboardAction = new Action() {\n            @Override\n            public void run() {\n                performCopyURLToClipboard();\n            }\n        };\n        copyUrlToClipboardAction.setText(Messages.getString(\"FileAttachmentsControl.CopyUrlActionText\")); //$NON-NLS-1$\n    }\n    @Override\n    protected Object[] getItemsFromWorkItem(final WorkItem workItem) {\n        final ArrayList<Attachment> attachments = new ArrayList<Attachment>();\n        for (final Attachment attachment : workItem.getAttachments()) {\n            if (!attachment.isPendingDelete()) {\n                attachments.add(attachment);\n            }\n        }\n        return attachments.toArray();\n    }\n    @Override\n    protected String[] getTableColumnNames() {\n        return new String[] {\n            Messages.getString(\"FileAttachmentsControl.ColumnNameName\"), //$NON-NLS-1$\n            Messages.getString(\"FileAttachmentsControl.ColumnNameSize\"), //$NON-NLS-1$\n            Messages.getString(\"FileAttachmentsControl.ColumnNameComment\") //$NON-NLS-1$\n        };\n    }\n    @Override\n    protected Image getImageForColumn(final Object element, final int columnIndex) {\n        return null;\n    }\n    @Override\n    protected String getTextForColumn(final Object element, final int columnIndex) {\n        final Attachment attachment = (Attachment) element;\n        switch (columnIndex) {\n            case 0:\n                return attachment.getFileName();\n            case 1:\n                return attachment.getFileSizeAsString();\n            case 2:\n                final String s = attachment.getComment();\n                return (s == null ? \"\" : s); //$NON-NLS-1$\n        }\n        return null;\n    }\n    @Override\n    protected void handleItemDoubleClick(final Object selectedItem) {\n        performOpen(DownloadAttachmentOpenType.USE_PREFERENCE);\n    }\n    @Override\n    protected void addSorting(final TableViewer tableViewer) {\n        final TableViewerSorter sorter = new TableViewerSorter(tableViewer);\n        sorter.setComparator(1, new ElementLongComparator() {\n            @Override\n            protected long getLong(final Object element) {\n                return ((Attachment) element).getFileSize();\n            }\n        });\n        tableViewer.setSorter(sorter);\n    }\n<fim_suffix>    @Override\n    protected void fillMenuBeforeShow(final IMenuManager manager) {\n        manager.add(openAction);\n        manager.add(downloadToAction);\n        manager.add(addAttachmentAction);\n        manager.add(deleteAttachmentAction);\n        manager.add(new Separator());\n        final DownloadAttachmentOpenType preferredOpenType = DownloadAttachmentOpenType.getPreferredOpenType();\n        if (DownloadAttachmentOpenType.BROWSER == preferredOpenType) {\n            manager.add(openLocallyAction);\n        } else {\n            manager.add(openInBrowserAction);\n        }\n        manager.add(copyUrlToClipboardAction);\n    }<fim_middle>// function below has no smell\n"}