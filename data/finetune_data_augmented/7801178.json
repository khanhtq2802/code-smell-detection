{"text": "<fim_prefix>    if (bytes > Integer.MAX_VALUE) {\n      if (isPersistenceType) {\n        if (needsLinkedList) {\n          return new PersistenceWithLongOffset();\n        } else {\n          return new PersistenceWithLongOffsetNoLL();\n        }\n      } else {\n        if (needsLinkedList) {\n          return new OverflowOnlyWithLongOffset();\n        } else {\n          return new OverflowOnlyWithLongOffsetNoLL();\n        }\n      }\n    } else {\n      if (isPersistenceType) {\n        if (needsLinkedList) {\n          return new PersistenceWithIntOffset();\n        } else {\n          return new PersistenceWithIntOffsetNoLL();\n        }\n      } else {\n        if (needsLinkedList) {\n          return new OverflowOnlyWithIntOffset();\n        } else {\n          return new OverflowOnlyWithIntOffsetNoLL();\n        }\n      }\n    }\n  }\n  /**\n   * Test method to verify if the passed DiskId is an instance of PersistenceWithIntOffset.\n   *\n   * @param diskId - the DiskId instance\n   * @return true if the given DiskId is an instance of PersistenceWithIntOffset\n   */\n  static boolean isInstanceofPersistIntOplogOffsetDiskId(DiskId diskId) {\n    return diskId instanceof PersistenceWithIntOffset;\n  }\n  /**\n   * Test method to verify if the passed DiskId is an instance of PersistenceWithLongOffset.\n   *\n   * @param diskId - the DiskId instance\n   * @return true if the given DiskId is an instance of PersistenceWithLongOffset\n   */\n  static boolean isInstanceofPersistLongOplogOffsetDiskId(DiskId diskId) {\n    return diskId instanceof PersistenceWithLongOffset;\n  }\n  /**\n   * Test method to verify if the passed DiskId is an instance of OverflowOnlyWithIntOffset.\n   *\n   * @param diskId - the DiskId instance\n   * @return true if the given DiskId is an instance of OverflowOnlyWithIntOffset\n   */\n  static boolean isInstanceofOverflowIntOplogOffsetDiskId(DiskId diskId) {\n    return diskId instanceof OverflowOnlyWithIntOffset;\n  }\n  /**\n   * Test method to verify if the passed DiskId is an instance of PersistenceWithLongOffset.\n   *\n   * @param diskId - the DiskId instance\n   * @return true if the given DiskId is an instance of LongOplogOffsetDiskId\n   */\n  static boolean isInstanceofOverflowOnlyWithLongOffset(DiskId diskId) {\n    return diskId instanceof OverflowOnlyWithLongOffset;\n  }\n  /**\n   * Inner class implementation of DiskId which stores offset in oplog as 'int' field.\n   *\n   *\n   */\n  protected abstract static class IntOplogOffsetDiskId extends DiskId {\n    /**\n     * The position in the oplog (the oplog offset) where this entry's value is stored\n     */\n    private volatile int offsetInOplog;\n    /**\n     * @return the offset in oplog where the entry is stored (returned as long)\n     */\n    @Override\n    public long getOffsetInOplog() {\n      return offsetInOplog;\n    }\n    /**\n     * Setter for oplog offset of an entry\n     *\n     * @param offsetInOplog - offset in oplog where the entry is stored.\n     */\n    @Override\n    public void setOffsetInOplog(long offsetInOplog) {\n      this.offsetInOplog = (int) offsetInOplog;\n    }\n  }\n  /**\n   * Inner class implementation of DiskId which stores offset in oplog as 'long' field.\n   *\n   *\n   */\n  protected abstract static class LongOplogOffsetDiskId extends DiskId {\n    /**\n     * The position in the oplog (the oplog offset) where this entry's value is stored\n     */\n    private volatile long offsetInOplog;\n    /**\n     * @return the offset in oplog where the entry is stored.\n     */\n    @Override\n    public long getOffsetInOplog() {\n      return offsetInOplog;\n    }\n    /**\n     * Setter for oplog offset of an entry\n     *\n     * @param offsetInOplog - offset in oplog where the entry is stored.\n     */\n    @Override\n    public void setOffsetInOplog(long offsetInOplog) {\n      this.offsetInOplog = offsetInOplog;\n    }\n  }\n  protected static class OverflowOnlyWithIntOffsetNoLL extends IntOplogOffsetDiskId {\n    OverflowOnlyWithIntOffsetNoLL() {\n      markForWriting();\n    }\n    @Override\n    public long getKeyId() {\n      throw new UnsupportedOperationException(\n          \"For overflow only mode the keyID should not be queried\");\n    }\n    @Override\n    public void setKeyId(long keyId) {\n      throw new UnsupportedOperationException(\n          \"For overflow only mode the keyID should not be set\");\n    }\n    @Override\n    public void markForWriting() {\n      this.valueLength |= 0x80000000;\n    }\n    @Override\n    public void unmarkForWriting() {\n      this.valueLength &= 0x7fffffff;\n    }\n    @Override\n    public boolean needsToBeWritten() {\n      return (this.valueLength & 0x80000000) != 0;\n    }\n  }\n  protected static final class OverflowOnlyWithIntOffset extends OverflowOnlyWithIntOffsetNoLL {\n    /**\n     * Used by DiskRegion for compaction\n     *\n     * @since GemFire prPersistSprint1\n     */\n    private DiskEntry prev;\n    /**\n     * Used by DiskRegion for compaction\n     *\n     * @since GemFire prPersistSprint1\n     */\n    private DiskEntry next;\n    @Override\n    public DiskEntry getPrev() {\n      return this.prev;\n    }\n    @Override\n    public DiskEntry getNext() {\n      return this.next;\n    }\n    @Override\n    public void setPrev(DiskEntry v) {\n      this.prev = v;\n    }\n    @Override\n    public void setNext(DiskEntry v) {\n      this.next = v;\n    }\n  }\n  protected static class OverflowOnlyWithLongOffsetNoLL extends LongOplogOffsetDiskId {\n    OverflowOnlyWithLongOffsetNoLL() {\n      markForWriting();\n    }\n    @Override\n    public long getKeyId() {\n      throw new UnsupportedOperationException(\n          \"For overflow only mode the keyID should not be queried\");\n    }\n    @Override\n    public void setKeyId(long keyId) {\n      throw new UnsupportedOperationException(\n          \"For overflow only mode the keyID should not be set\");\n    }\n    @Override\n    public void markForWriting() {\n      this.valueLength |= 0x80000000;\n    }\n    @Override\n    public void unmarkForWriting() {\n      this.valueLength &= 0x7fffffff;\n    }\n    @Override\n    public boolean needsToBeWritten() {\n      return (this.valueLength & 0x80000000) != 0;\n    }\n  }\n  protected static final class OverflowOnlyWithLongOffset extends OverflowOnlyWithLongOffsetNoLL {\n    /**\n     * Used by DiskRegion for compaction\n     *\n     * @since GemFire prPersistSprint1\n     */\n    private DiskEntry prev;\n    /**\n     * Used by DiskRegion for compaction\n     *\n     * @since GemFire prPersistSprint1\n     */\n    private DiskEntry next;\n    @Override\n    public DiskEntry getPrev() {\n      return this.prev;\n    }\n    @Override\n    public DiskEntry getNext() {\n      return this.next;\n    }\n    @Override\n    public void setPrev(DiskEntry v) {\n      this.prev = v;\n    }\n    @Override\n    public void setNext(DiskEntry v) {\n      this.next = v;\n    }\n  }\n  protected static class PersistenceWithIntOffsetNoLL extends IntOplogOffsetDiskId {\n    /** unique entry identifier * */\n    private long keyId;\n    @Override\n    public long getKeyId() {\n      return keyId;\n    }\n    @Override\n    public void setKeyId(long keyId) {\n      this.keyId = keyId;\n    }\n    @Override\n    public void markForWriting() {\n      throw new IllegalStateException(\"Should not be used for persistent region\");\n    }\n    @Override\n    public void unmarkForWriting() {\n      // Do nothing\n    }\n    @Override\n    public boolean needsToBeWritten() {\n      return false;\n    }\n    @Override\n    public String toString() {\n      StringBuilder temp = new StringBuilder(\"Oplog Key ID = \");\n      temp.append(this.keyId);\n      temp.append(\"; \");\n      temp.append(super.toString());\n      return temp.toString();\n    }\n  }\n<fim_suffix>  protected static final class PersistenceWithIntOffset extends PersistenceWithIntOffsetNoLL {\n    /**\n     * Used by DiskRegion for compaction\n     *\n     * @since GemFire prPersistSprint1\n     */\n    private DiskEntry prev;\n    /**\n     * Used by DiskRegion for compaction\n     *\n     * @since GemFire prPersistSprint1\n     */\n    private DiskEntry next;\n    @Override\n    public DiskEntry getPrev() {\n      return this.prev;\n    }\n    @Override\n    public DiskEntry getNext() {\n      return this.next;\n    }\n    @Override\n    public void setPrev(DiskEntry v) {\n      this.prev = v;\n    }\n    @Override\n    public void setNext(DiskEntry v) {\n      this.next = v;\n    }\n  }<fim_middle>// class below is data class\n"}