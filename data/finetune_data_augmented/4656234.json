{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.runtime.instance;\n\nimport org.apache.flink.runtime.util.Hardware;\n\nimport org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\nimport org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonProperty;\n\nimport java.io.Serializable;\nimport java.util.Objects;\n\n/**\n * A hardware description describes the resources available to a task manager.\n */\npublic final class HardwareDescription implements Serializable {\n\n\tprivate static final long serialVersionUID = 3380016608300325361L;\n\n\tpublic static final String FIELD_NAME_CPU_CORES = \"cpuCores\";\n\n\tpublic static final String FIELD_NAME_SIZE_PHYSICAL_MEMORY = \"physicalMemory\";\n\n\tpublic static final String FIELD_NAME_SIZE_JVM_HEAP = \"freeMemory\";\n\n\tpublic static final String FIELD_NAME_SIZE_MANAGED_MEMORY = \"managedMemory\";\n\n\t/** The number of CPU cores available to the JVM on the compute node. */\n\t@JsonProperty(FIELD_NAME_CPU_CORES)\n\tprivate final int numberOfCPUCores;\n\n\t/** The size of physical memory in bytes available on the compute node. */\n\t@JsonProperty(FIELD_NAME_SIZE_PHYSICAL_MEMORY)\n\tprivate final long sizeOfPhysicalMemory;\n\n\t/** The size of the JVM heap memory */\n\t@JsonProperty(FIELD_NAME_SIZE_JVM_HEAP)\n\tprivate final long sizeOfJvmHeap;\n\n\t/** The size of the memory managed by the system for caching, hashing, sorting, ... */\n\t@JsonProperty(FIELD_NAME_SIZE_MANAGED_MEMORY)\n\tprivate final long sizeOfManagedMemory;\n\n\t/**\n\t * Constructs a new hardware description object.\n\t * \n\t * @param numberOfCPUCores The number of CPU cores available to the JVM on the compute node. \n\t * @param sizeOfPhysicalMemory The size of physical memory in bytes available on the compute node.\n\t * @param sizeOfJvmHeap The size of the JVM heap memory.\n\t * @param sizeOfManagedMemory The size of the memory managed by the system for caching, hashing, sorting, ...\n\t */\n\t@JsonCreator\n\tpublic HardwareDescription(\n\t\t\t@JsonProperty(FIELD_NAME_CPU_CORES) int numberOfCPUCores,\n\t\t\t@JsonProperty(FIELD_NAME_SIZE_PHYSICAL_MEMORY) long sizeOfPhysicalMemory,\n\t\t\t@JsonProperty(FIELD_NAME_SIZE_JVM_HEAP) long sizeOfJvmHeap,\n\t\t\t@JsonProperty(FIELD_NAME_SIZE_MANAGED_MEMORY) long sizeOfManagedMemory) {\n\t\tthis.numberOfCPUCores = numberOfCPUCores;\n\t\tthis.sizeOfPhysicalMemory = sizeOfPhysicalMemory;\n\t\tthis.sizeOfJvmHeap = sizeOfJvmHeap;\n\t\tthis.sizeOfManagedMemory = sizeOfManagedMemory;\n\t}\n\n\t/**\n\t * Returns the number of CPU cores available to the JVM on the compute node.\n\t * \n\t * @return the number of CPU cores available to the JVM on the compute node\n\t */\n\tpublic int getNumberOfCPUCores() {\n\t\treturn this.numberOfCPUCores;\n\t}\n\n\t/**\n\t * Returns the size of physical memory in bytes available on the compute node.\n\t * \n\t * @return the size of physical memory in bytes available on the compute node\n\t */\n\tpublic long getSizeOfPhysicalMemory() {\n\t\treturn this.sizeOfPhysicalMemory;\n\t}\n\n\t/**\n\t * Returns the size of the JVM heap memory\n\t * \n\t * @return The size of the JVM heap memory\n\t */\n\tpublic long getSizeOfJvmHeap() {\n\t\treturn this.sizeOfJvmHeap;\n\t}\n\n\t/**\n\t * Returns the size of the memory managed by the system for caching, hashing, sorting, ...\n\t * \n\t * @return The size of the memory managed by the system.\n\t */\n\tpublic long getSizeOfManagedMemory() {\n\t\treturn this.sizeOfManagedMemory;\n\t}\n\n\t// --------------------------------------------------------------------------------------------\n\t// Utils\n\t// --------------------------------------------------------------------------------------------\n\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tHardwareDescription that = (HardwareDescription) o;\n\t\treturn numberOfCPUCores == that.numberOfCPUCores &&\n\t\t\tsizeOfPhysicalMemory == that.sizeOfPhysicalMemory &&\n\t\t\tsizeOfJvmHeap == that.sizeOfJvmHeap &&\n\t\t\tsizeOfManagedMemory == that.sizeOfManagedMemory;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(numberOfCPUCores, sizeOfPhysicalMemory, sizeOfJvmHeap, sizeOfManagedMemory);\n\t}\n\n<fim_suffix>\t@Override\n\tpublic String toString() {\n\t\treturn String.format(\"cores=%d, physMem=%d, heap=%d, managed=%d\", \n\t\t\t\tnumberOfCPUCores, sizeOfPhysicalMemory, sizeOfJvmHeap, sizeOfManagedMemory);\n\t}\n\n\t// --------------------------------------------------------------------------------------------\n\t// Factory\n\t// --------------------------------------------------------------------------------------------\n\n\tpublic static HardwareDescription extractFromSystem(long managedMemory) {\n\t\tfinal int numberOfCPUCores = Hardware.getNumberCPUCores();\n\t\tfinal long sizeOfJvmHeap = Runtime.getRuntime().maxMemory();\n\t\tfinal long sizeOfPhysicalMemory = Hardware.getSizeOfPhysicalMemory();\n\n\t\treturn new HardwareDescription(numberOfCPUCores, sizeOfPhysicalMemory, sizeOfJvmHeap, managedMemory);\n\t}\n}<fim_middle>// function below has no smell\n"}