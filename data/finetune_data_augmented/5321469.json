{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.fontbox.cff;\n\nimport java.io.EOFException;\nimport java.io.IOException;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport org.apache.fontbox.util.Charsets;\n\n/**\n * This class contains some functionality to read a byte buffer.\n * \n * @author Villu Ruusmann\n */\npublic class DataInput\n{\n\n    private byte[] inputBuffer = null;\n    private int bufferPosition = 0;\n\n    private static final Log LOG = LogFactory.getLog(DataInput.class);\n\n    /**\n     * Constructor.\n     * @param buffer the buffer to be read\n     */\n    public DataInput(byte[] buffer)\n    {\n        inputBuffer = buffer;\n    }\n\n    /**\n     * Determines if there are any bytes left to read or not. \n     * @return true if there are any bytes left to read\n     */\n    public boolean hasRemaining()\n    {\n        return bufferPosition < inputBuffer.length;\n    }\n\n    /**\n     * Returns the current position.\n     * @return current position\n     */\n    public int getPosition()\n    {\n        return bufferPosition;\n    }\n\n    /**\n     * Sets the current position to the given value.\n     * @param position the given position\n     */\n    public void setPosition(int position)\n    {\n        bufferPosition = position;\n    }\n\n    /** \n     * Returns the buffer as an ISO-8859-1 string.\n     * @return the buffer as string\n     * @throws IOException if an error occurs during reading\n     */\n    public String getString() throws IOException\n    {\n        return new String(inputBuffer, Charsets.ISO_8859_1);\n    }\n\n    /**\n     * Read one single byte from the buffer.\n     * @return the byte\n     * @throws IOException if an error occurs during reading\n     */\n    public byte readByte() throws IOException\n    {\n        try\n        {\n            byte value = inputBuffer[bufferPosition];\n            bufferPosition++;\n            return value;\n        } \n        catch (RuntimeException re)\n        {\n            LOG.debug(\"An error occured reading a byte - returning -1\", re);\n            return -1;\n        }\n    }\n\n    /**\n     * Read one single unsigned byte from the buffer.\n     * @return the unsigned byte as int\n     * @throws IOException if an error occurs during reading\n     */\n    public int readUnsignedByte() throws IOException\n    {\n        int b = read();\n        if (b < 0)\n        {\n            throw new EOFException();\n        }\n        return b;\n    }\n\n    /**\n     * Peeks one single unsigned byte from the buffer.\n     * @return the unsigned byte as int\n     * @throws IOException if an error occurs during reading\n     */\n<fim_suffix>    public int peekUnsignedByte(int offset) throws IOException\n    {\n        int b = peek(offset);\n        if (b < 0)\n        {\n            throw new EOFException();\n        }\n        return b;\n    }\n\n    /**\n     * Read one single short value from the buffer.\n     * @return the short value\n     * @throws IOException if an error occurs during reading\n     */\n    public short readShort() throws IOException\n    {\n        return (short) readUnsignedShort();\n    }\n\n    /**\n     * Read one single unsigned short (2 bytes) value from the buffer.\n     * @return the unsigned short value as int\n     * @throws IOException if an error occurs during reading\n     */\n    public int readUnsignedShort() throws IOException\n    {\n        int b1 = read();\n        int b2 = read();\n        if ((b1 | b2) < 0)\n        {\n            throw new EOFException();\n        }\n        return b1 << 8 | b2;\n    }\n\n    /**\n     * Read one single int (4 bytes) from the buffer.\n     * @return the int value\n     * @throws IOException if an error occurs during reading\n     */\n    public int readInt() throws IOException\n    {\n        int b1 = read();\n        int b2 = read();\n        int b3 = read();\n        int b4 = read();\n        if ((b1 | b2 | b3 | b4) < 0)\n        {\n            throw new EOFException();\n        }\n        return b1 << 24 | b2 << 16 | b3 << 8 | b4;\n    }\n\n    /**\n     * Read a number of single byte values from the buffer.\n     * @param length the number of bytes to be read\n     * @return an array with containing the bytes from the buffer \n     * @throws IOException if an error occurs during reading\n     */\n    public byte[] readBytes(int length) throws IOException\n    {\n        if (inputBuffer.length - bufferPosition < length)\n        {\n            throw new EOFException(); \n        }\n        byte[] bytes = new byte[length];\n        System.arraycopy(inputBuffer, bufferPosition, bytes, 0, length);\n        bufferPosition += length;\n        return bytes;\n    }\n\n    private int read()\n    {\n        try\n        {\n            int value = inputBuffer[bufferPosition] & 0xff;\n            bufferPosition++;\n            return value;\n        } \n        catch (RuntimeException re)\n        {\n            LOG.debug(\"An error occured reading an int - returning -1\", re);\n            return -1;\n        }\n    }\n\n    private int peek(int offset)\n    {\n        try\n        {\n            int value = inputBuffer[bufferPosition + offset] & 0xff;\n            return value;\n        }\n        catch (RuntimeException re)\n        {\n            LOG.debug(\"An error occured peeking at offset \" + offset + \" - returning -1\", re);\n            return -1;\n        }\n    }\n    \n    public int length()\n    {\n        return inputBuffer.length;\n    }\n}<fim_middle>// function below has no smell\n"}