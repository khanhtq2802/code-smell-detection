{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.hive.ql.hooks;\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.commons.collections.SetUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.hadoop.hive.common.StringInternUtils;\nimport org.apache.hadoop.hive.metastore.Warehouse;\nimport org.apache.hadoop.hive.metastore.api.FieldSchema;\nimport org.apache.hadoop.hive.metastore.api.Partition;\nimport org.apache.hadoop.hive.metastore.api.Table;\nimport org.apache.hadoop.hive.ql.stats.StatsUtils;\n/**\n * This class contains the lineage information that is passed\n * to the PreExecution hook.\n */\npublic class LineageInfo implements Serializable {\n  /**\n   * Serial version id.\n   */\n  private static final long serialVersionUID = 1L;\n  /**\n   * Enum to track dependency. This enum has the following values:\n   * 1. SIMPLE - Indicates that the column is derived from another table column\n   *             with no transformations e.g. T2.c1 = T1.c1.\n   * 2. EXPRESSION - Indicates that the column is derived from a UDF, UDAF, UDTF or\n   *                 set operations like union on columns on other tables\n   *                 e.g. T2.c1 = T1.c1 + T3.c1.\n   * 4. SCRIPT - Indicates that the column is derived from the output\n   *             of a user script through a TRANSFORM, MAP or REDUCE syntax\n   *             or from the output of a PTF chain execution.\n   */\n  public static enum DependencyType {\n    SIMPLE, EXPRESSION, SCRIPT\n  }\n  /**\n   * Table or Partition data container. We need this class because the output\n   * of the query can either go to a table or a partition within a table. The\n   * data container class subsumes both of these.\n   */\n  public static class DataContainer implements Serializable {\n    /**\n     * Serial version id.\n     */\n    private static final long serialVersionUID = 1L;\n    /**\n     * The table in case this container is a table.\n     */\n    private final Table tab;\n    /**\n     * The partition in case this container is a partition.\n     */\n    private final Partition part;\n    /**\n     * Constructor for non partitioned tables.\n     *\n     * @param tab The associated table.\n     */\n    public DataContainer(Table tab) {\n      this.tab = tab;\n      this.part = null;\n    }\n    /**\n     * Constructor for a partitioned tables partition.\n     *\n     * @param part The associated partition.\n     */\n    public DataContainer(Table tab, Partition part) {\n      this.tab = tab;\n      this.part = part;\n    }\n    /**\n     * Returns true in case this data container is a partition.\n     *\n     * @return boolean TRUE if the container is a table partition.\n     */\n    public boolean isPartition() {\n      return (part != null);\n    }\n    public Table getTable() {\n      return this.tab;\n    }\n    public Partition getPartition() {\n      return this.part;\n    }\n    @Override\n    public String toString() {\n      return isPartition() ?\n        StatsUtils.getFullyQualifiedTableName(part.getDbName(), part.getTableName()) + \"@\"\n            + part.getValues()\n        : Warehouse.getQualifiedName(tab);\n    }\n  }\n  /**\n   * Class that captures the lookup key for the dependency. The dependency\n   * is from (DataContainer, FieldSchema) to a Dependency structure. This\n   * class captures the (DataContainer, FieldSchema) tuple.\n   */\n  public static class DependencyKey implements Serializable {\n    /**\n     * Serial version id.\n     */\n    private static final long serialVersionUID = 1L;\n    /**\n     * The data container for this key.\n     */\n    private final DataContainer dc;\n    /**\n     * The field schema for this key.\n     */\n    private final FieldSchema fld;\n    /**\n     * Constructor.\n     *\n     * @param dc The associated data container.\n     * @param fld The associated field schema.\n     */\n    public DependencyKey(DataContainer dc, FieldSchema fld) {\n      this.dc = dc;\n      this.fld = fld;\n    }\n    public DataContainer getDataContainer() {\n      return this.dc;\n    }\n    public FieldSchema getFieldSchema() {\n      return this.fld;\n    }\n    /* (non-Javadoc)\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      result = prime * result + ((dc == null) ? 0 : dc.hashCode());\n      result = prime * result + ((fld == null) ? 0 : fld.hashCode());\n      return result;\n    }\n    /* (non-Javadoc)\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals(Object obj) {\n      if (this == obj) {\n        return true;\n      }\n      if (obj == null) {\n        return false;\n      }\n      if (getClass() != obj.getClass()) {\n        return false;\n      }\n      DependencyKey other = (DependencyKey) obj;\n      if (dc != other.dc) {\n        return false;\n      }\n      if (fld != other.fld) {\n        return false;\n      }\n      return true;\n    }\n    @Override\n    public String toString() {\n      return dc + \":\" + fld;\n    }\n  }\n  /**\n   * Base Column information.\n   */\n<fim_suffix>  public static class BaseColumnInfo implements Serializable {\n    /**\n     * Serial version id.\n     */\n    private static final long serialVersionUID = 1L;\n    /**\n     * The table and alias info encapsulated in a different class.\n     */\n    private TableAliasInfo tabAlias;\n    /**\n     * The metastore column information. The column can be null\n     * and that denotes that the expression is dependent on the row\n     * of the table and not particular column. This can happen in case\n     * of count(1).\n     */\n    private FieldSchema column;\n    /**\n     * @return the tabAlias\n     */\n    public TableAliasInfo getTabAlias() {\n      return tabAlias;\n    }\n    /**\n     * @param tabAlias the tabAlias to set\n     */\n    public void setTabAlias(TableAliasInfo tabAlias) {\n      this.tabAlias = tabAlias;\n    }\n    /**\n     * @return the column\n     */\n    public FieldSchema getColumn() {\n      return column;\n    }\n    /**\n     * @param column the column to set\n     */\n    public void setColumn(FieldSchema column) {\n      this.column = column;\n    }\n    @Override\n    public String toString() {\n      return tabAlias + \":\" + column;\n    }\n    @Override\n    public int hashCode() {\n      return (column != null ? column.hashCode() : 7)\n        + (tabAlias != null ? tabAlias.hashCode() : 11);\n    }\n    @Override\n    public boolean equals(Object obj) {\n      if (this == obj) {\n        return true;\n      }\n      if (!(obj instanceof BaseColumnInfo)) {\n        return false;\n      }\n      BaseColumnInfo ci = (BaseColumnInfo) obj;\n      return (column == null ? ci.column == null : column.equals(ci.column))\n        && (tabAlias == null ? ci.tabAlias == null : tabAlias.equals(ci.tabAlias));\n    }\n  }\n  public static class TableAliasInfo implements Serializable {\n    /**\n     * Serail version id.\n     */\n    private static final long serialVersionUID = 1L;\n    /**\n     * The alias for the table.\n     */\n    private String alias;\n    /**\n     * The metastore table information.\n     */\n    private Table table;\n    /**\n     * @return the alias\n     */\n    public String getAlias() {\n      return alias;\n    }\n    /**\n     * @param alias the alias to set\n     */\n    public void setAlias(String alias) {\n      this.alias = alias;\n    }\n    /**\n     * @return the table\n     */\n    public Table getTable() {\n      return table;\n    }\n    /**\n     * @param table the table to set\n     */\n    public void setTable(Table table) {\n      this.table = table;\n    }<fim_middle>// class below is data class\n"}