{"text": "<fim_prefix>/*****************************************************************\n *   Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n ****************************************************************/\n\npackage org.apache.cayenne.modeler.action;\n\nimport org.apache.cayenne.configuration.ConfigurationNode;\nimport org.apache.cayenne.configuration.DataChannelDescriptor;\nimport org.apache.cayenne.configuration.event.ProcedureEvent;\nimport org.apache.cayenne.dbsync.naming.NameBuilder;\nimport org.apache.cayenne.map.DataMap;\nimport org.apache.cayenne.map.Procedure;\nimport org.apache.cayenne.map.event.MapEvent;\nimport org.apache.cayenne.modeler.Application;\nimport org.apache.cayenne.modeler.ProjectController;\nimport org.apache.cayenne.modeler.event.ProcedureDisplayEvent;\nimport org.apache.cayenne.modeler.undo.CreateProcedureUndoableEdit;\nimport org.apache.cayenne.modeler.util.CayenneAction;\n\nimport java.awt.event.ActionEvent;\n\n/**\n * Action class to create a new stored procedure mapping.\n */\n<fim_suffix>public class CreateProcedureAction extends CayenneAction {\n\n    public CreateProcedureAction(Application application) {\n        super(getActionName(), application);\n    }\n\n    public static String getActionName() {\n        return \"Create Stored Procedure\";\n    }\n\n    /**\n     * Fires events when a procedure was added\n     */\n    static void fireProcedureEvent(Object src, ProjectController mediator, DataMap dataMap, Procedure procedure) {\n        mediator.fireProcedureEvent(new ProcedureEvent(src, procedure, MapEvent.ADD));\n        mediator.fireProcedureDisplayEvent(new ProcedureDisplayEvent(src, procedure, mediator.getCurrentDataMap(),\n                (DataChannelDescriptor) mediator.getProject().getRootNode()));\n    }\n\n    public void performAction(ActionEvent e) {\n        ProjectController mediator = getProjectController();\n        DataMap map = mediator.getCurrentDataMap();\n\n        Procedure procedure = new Procedure();\n        procedure.setName(NameBuilder.builder(procedure, map).name());\n        createProcedure(map, procedure);\n\n        application.getUndoManager().addEdit(new CreateProcedureUndoableEdit(map, procedure));\n    }\n\n    public void createProcedure(DataMap map, Procedure procedure) {\n        ProjectController mediator = getProjectController();\n        procedure.setSchema(map.getDefaultSchema());\n        procedure.setCatalog(map.getDefaultCatalog());\n        map.addProcedure(procedure);\n        fireProcedureEvent(this, mediator, map, procedure);\n    }\n\n    /**\n     * Returns <code>true</code> if path contains a DataMap object.\n     */\n    public boolean enableForPath(ConfigurationNode object) {\n        if (object == null) {\n            return false;\n        }\n\n        return ((Procedure) object).getDataMap() != null;\n    }\n\n    public String getIconName() {\n        return \"icon-stored-procedure.png\";\n    }\n}<fim_middle>// class below has no smell\n"}