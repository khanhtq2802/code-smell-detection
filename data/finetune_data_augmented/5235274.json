{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.oodt.cas.resource.system;\nimport org.apache.avro.AvroRemoteException;\nimport org.apache.avro.ipc.NettyServer;\nimport org.apache.avro.ipc.Server;\nimport org.apache.avro.ipc.specific.SpecificResponder;\nimport org.apache.oodt.cas.resource.scheduler.Scheduler;\nimport org.apache.oodt.cas.resource.structs.AvroTypeFactory;\nimport org.apache.oodt.cas.resource.structs.Job;\nimport org.apache.oodt.cas.resource.structs.JobInput;\nimport org.apache.oodt.cas.resource.structs.JobSpec;\nimport org.apache.oodt.cas.resource.structs.ResourceNode;\nimport org.apache.oodt.cas.resource.structs.avrotypes.AvroJob;\nimport org.apache.oodt.cas.resource.structs.avrotypes.AvroJobInput;\nimport org.apache.oodt.cas.resource.structs.avrotypes.AvroResourceNode;\nimport org.apache.oodt.cas.resource.structs.exceptions.JobExecutionException;\nimport org.apache.oodt.cas.resource.structs.exceptions.JobQueueException;\nimport org.apache.oodt.cas.resource.structs.exceptions.JobRepositoryException;\nimport org.apache.oodt.cas.resource.structs.exceptions.MonitorException;\nimport org.apache.oodt.cas.resource.structs.exceptions.QueueManagerException;\nimport org.apache.oodt.cas.resource.structs.exceptions.SchedulerException;\nimport org.apache.oodt.cas.resource.util.GenericResourceManagerObjectFactory;\nimport org.apache.oodt.cas.resource.util.ResourceNodeComparator;\nimport org.apache.oodt.config.Component;\nimport org.apache.oodt.config.ConfigurationManager;\nimport org.apache.oodt.config.ConfigurationManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Vector;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\npublic class AvroRpcResourceManager implements org.apache.oodt.cas.resource.structs.avrotypes.ResourceManager, ResourceManager {\n    private static final Logger logger = LoggerFactory.getLogger(AvroRpcResourceManager.class);\n    private int port = 2000;\n    private Server server;\n    /** our scheduler */\n    private Scheduler scheduler;\n    /** Configuration Manager instance of this instance */\n    private ConfigurationManager configurationManager;\n    private ExecutorService executorService;\n<fim_suffix>    public AvroRpcResourceManager(int port) {\n        this.port = port;\n        List<String> propertiesFiles = new ArrayList<>();\n        // set up the configuration, if there is any\n        if (System.getProperty(\"org.apache.oodt.cas.resource.properties\") != null) {\n            propertiesFiles.add(System.getProperty(\"org.apache.oodt.cas.resource.properties\"));\n        }\n        configurationManager = ConfigurationManagerFactory\n                .getConfigurationManager(Component.RESOURCE_MANAGER, propertiesFiles);\n    }\n    @Override\n    public void startUp() throws Exception {\n        try {\n            configurationManager.loadConfiguration();\n        } catch (Exception e) {\n            logger.error(\"Unable to load configuration\", e);\n            throw new IOException(\"Unable to load configuration\", e);\n        }\n        String schedulerClassStr = System.getProperty(\"resource.scheduler.factory\",\n                \"org.apache.oodt.cas.resource.scheduler.LRUSchedulerFactory\");\n        scheduler = GenericResourceManagerObjectFactory.getSchedulerServiceFromFactory(schedulerClassStr);\n        // start up the scheduler\n        executorService = Executors.newSingleThreadExecutor();\n        executorService.submit(scheduler);\n        // start up the web server\n        server = new NettyServer(new SpecificResponder(org.apache.oodt.cas.resource.structs.avrotypes.ResourceManager.class, this),\n                new InetSocketAddress(this.port));\n        server.start();\n        logger.info(\"Resource Manager started by {}\", System.getProperty(\"user.name\", \"unknown\"));\n    }\n    @Override\n    public boolean isAlive() {\n        return true;\n    }\n    @Override\n    public int getJobQueueSize() throws AvroRemoteException {\n        try {\n            return this.scheduler.getJobQueue().getSize();\n        } catch (Exception e) {\n            throw new AvroRemoteException(new JobRepositoryException(\"Failed to get size of JobQueue : \" + e.getMessage(), e));\n        }\n    }\n    @Override\n    public int getJobQueueCapacity() throws AvroRemoteException {\n        try {\n            return this.scheduler.getJobQueue().getCapacity();\n        } catch (Exception e) {\n            throw new AvroRemoteException(new JobRepositoryException(\"Failed to get capacity of JobQueue : \" + e.getMessage(), e));\n        }\n    }\n    @Override\n    public boolean isJobComplete(String jobId) throws AvroRemoteException {\n        try {\n            JobSpec spec = scheduler.getJobQueue().getJobRepository().getJobById(\n                    jobId);\n            return scheduler.getJobQueue().getJobRepository().jobFinished(spec);\n        } catch (JobRepositoryException e) {\n            throw new AvroRemoteException(e);\n        }\n    }\n    @Override\n    public AvroJob getJobInfo(String jobId) throws AvroRemoteException {\n        JobSpec spec = null;\n        try {\n            spec = scheduler.getJobQueue().getJobRepository()\n                    .getJobById(jobId);\n        } catch (JobRepositoryException e) {\n            logger.warn(\"Exception communicating with job repository for job: [{}]: Message: {}\", jobId, e.getMessage());\n            throw new AvroRemoteException(new JobRepositoryException(\"Unable to get job: [\" + jobId\n                    + \"] from repository!\"));\n        }\n        return AvroTypeFactory.getAvroJob(spec.getJob());\n    }\n    @Override\n    public String handleJob(AvroJob exec, AvroJobInput into) throws AvroRemoteException {\n        try {\n            return genericHandleJob(exec, into);\n        } catch (SchedulerException e) {\n            throw new AvroRemoteException(e);\n        }\n    }\n    @Override\n    public boolean handleJobWithUrl(AvroJob exec, AvroJobInput in, String hostUrl) throws AvroRemoteException {\n        try {\n            return genericHandleJob(exec, in, hostUrl);\n        } catch (JobExecutionException e) {\n            throw new AvroRemoteException(e);\n        }\n    }\n    @Override\n    public List<AvroResourceNode> getNodes() throws AvroRemoteException {\n        List resNodes = null;\n        try {\n            resNodes = scheduler.getMonitor().getNodes();\n        } catch (MonitorException e) {\n            throw new AvroRemoteException(e);\n        }\n        return AvroTypeFactory.getListAvroResourceNode(resNodes);\n    }\n    @Override\n    public AvroResourceNode getNodeById(String nodeId) throws AvroRemoteException {\n        ResourceNode node = null;\n        try {\n            node = scheduler.getMonitor().getNodeById(nodeId);\n        } catch (MonitorException e) {\n            throw new AvroRemoteException(e);\n        }\n        return AvroTypeFactory.getAvroResourceNode(node);\n    }\n    @Override\n    public boolean killJob(String jobId) throws AvroRemoteException {\n        String resNodeId = scheduler.getBatchmgr().getExecutionNode(jobId);\n        if (resNodeId == null) {\n            logger.warn(\"Attempt to kill job: [{}]: cannot find execution node (has the job already finished?)\", jobId);\n            return false;\n        }\n        ResourceNode node = null;\n        try {\n            node = scheduler.getMonitor().getNodeById(resNodeId);\n        } catch (MonitorException e) {\n            throw new AvroRemoteException(e);\n        }\n        return scheduler.getBatchmgr().killJob(jobId, node);\n    }\n    @Override\n    public String getExecutionNode(String jobId) throws AvroRemoteException {\n        String execNode = scheduler.getBatchmgr().getExecutionNode(jobId);\n        if (execNode == null) {<fim_middle>// function below has no smell\n"}