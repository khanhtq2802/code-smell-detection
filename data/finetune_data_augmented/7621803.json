{"text": "<fim_prefix>\t\t\t\t\t\t\t\tremovedProjects.add(project);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (delta.getKind() == IResourceDelta.ADDED && (delta.getFlags() & IResourceDelta.MOVED_FROM) != 0) {\n\t\t\t\t\t\t\trenamedTo.put(project.getFullPath(), project);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/*\n\t\t\t\t * Update CF app cache and collect apps that have local project\n\t\t\t\t * updated\n\t\t\t\t */\n\t\t\t\tList<CloudAppDashElement> appsToRefresh = new ArrayList<>();\n\t\t\t\tfor (IProject project : removedProjects) {\n\t\t\t\t\tCloudAppDashElement app = getApplication(project);\n\t\t\t\t\tif (app!=null && app.setProject(null)) {\n\t\t\t\t\t\tappsToRefresh.add(app);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Map.Entry<IPath, IProject> entry : renamedFrom.entrySet()) {\n\t\t\t\t\tIPath path = entry.getKey();\n\t\t\t\t\tIProject oldProject = entry.getValue();\n\t\t\t\t\tIProject newProject = renamedTo.get(path);\n\t\t\t\t\tif (oldProject != null) {\n\t\t\t\t\t\tCloudAppDashElement app = getApplication(oldProject);\n\t\t\t\t\t\tif (app!=null && app.setProject(newProject)) {\n\t\t\t\t\t\t\tappsToRefresh.add(app);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/*\n\t\t\t\t * Update BDEs\n\t\t\t\t */\n\t\t\t\tfor (CloudAppDashElement app : appsToRefresh) {\n\t\t\t\t\tnotifyElementChanged(app, \"resourceChanged\");\n\t\t\t\t}\n\t\t\t} catch (OperationCanceledException oce) {\n\t\t\t\tLog.log(oce);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLog.log(e);\n\t\t\t}\n\t\t}\n\t};\n\tpublic RefreshState getRefreshState() {\n\t\treturn refreshState.getValue();\n\t}\n\tfinal private ValueListener<ClientRequests> RUN_TARGET_CONNECTION_LISTENER = new ValueListener<ClientRequests>() {\n\t\t@Override\n\t\tpublic void gotValue(LiveExpression<ClientRequests> exp, ClientRequests value) {\n\t\t\tCloudFoundryBootDashModel.this.notifyModelStateChanged();\n\t\t}\n\t};\n\tprivate DisposingFactory<BootDashElement, LiveExpression<URI>> actuatorUrlFactory;\n\tpublic CloudFoundryBootDashModel(CloudFoundryRunTarget target, BootDashModelContext context, BootDashViewModel parent) {\n\t\tsuper(target, parent);\n\t\tRunTargetType type = target.getType();\n\t\tIPropertyStore typeStore = PropertyStores.createForScope(type, context.getRunTargetProperties());\n\t\tthis.modelStore = PropertyStores.createSubStore(target.getId(), typeStore);\n\t\tthis.elementFactory = new CloudDashElementFactory(context, modelStore, this);\n\t\tthis.consoleManager = new CloudAppLogManager(target);\n\t\tthis.unsupportedPushProperties = new UnsupportedPushProperties();\n\t\tthis.debugTargetDisconnector = DevtoolsUtil.createDebugTargetDisconnector(this);\n\t\tgetRunTarget().addConnectionStateListener(RUN_TARGET_CONNECTION_LISTENER);\n\t\tResourcesPlugin.getWorkspace().addResourceChangeListener(resourceChangeListener, IResourceChangeEvent.POST_CHANGE);\n\t\ttry {\n\t\t\tif (getRunTarget().getTargetProperties().get(CloudFoundryTargetProperties.DISCONNECTED) == null\n\t\t\t\t\t&& (getRunTarget().getTargetProperties().isStoreCredentials() || getRunTarget().getTargetProperties().getCredentials() != null)) {\n\t\t\t\t// If CF target was connected previously and either password is stored or not stored but non-null then connect automatically\n\t\t\t\tgetOperationsExecution().runAsynch(new ConnectOperation(this, true));\n\t\t\t}\n\t\t} catch (CannotAccessPropertyException e) {\n\t\t\t// ignore shouldn't happen. Get password is called only if password not stored\n\t\t}\n\t}\n\t@Override\n\tpublic ObservableSet<BootDashElement> getElements() {\n\t\treturn allElements;\n\t}\n\tpublic DisposingFactory<BootDashElement, LiveExpression<URI>> getActuatorUrlFactory() {\n\t\tif (actuatorUrlFactory==null) {\n\t\t\tthis.actuatorUrlFactory = new DisposingFactory<BootDashElement,LiveExpression<URI>>(getElements()) {\n\t\t\t\tprotected LiveExpression<URI> create(final BootDashElement key) {\n\t\t\t\t\tfinal LiveExpression<URI> uriExp = new LiveExpression<URI>() {\n\t\t\t\t\t\tprotected URI compute() {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tRunState runstate = key.getRunState();\n\t\t\t\t\t\t\t\tif (READY_STATES.contains(runstate)) {\n\t\t\t\t\t\t\t\t\tString host = key.getLiveHost();\n\t\t\t\t\t\t\t\t\tif (StringUtil.hasText(host)) {\n\t\t\t\t\t\t\t\t\t\treturn new URI(\"https://\"+host);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (URISyntaxException e) {\n\t\t\t\t\t\t\t\tLog.log(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tfinal ElementStateListener elementListener = new ElementStateListener() {\n\t\t\t\t\t\tpublic void stateChanged(BootDashElement e) {\n\t\t\t\t\t\t\tif (e.equals(key)) {\n\t\t\t\t\t\t\t\turiExp.refresh();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\turiExp.onDispose(new DisposeListener() {\n\t\t\t\t\t\tpublic void disposed(Disposable disposed) {\n\t\t\t\t\t\t\tremoveElementStateListener(elementListener);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\taddElementStateListener(elementListener);\n\t\t\t\t\treturn uriExp;\n\t\t\t\t}\n\t\t\t};\n\t\t\taddDisposableChild(actuatorUrlFactory);\n\t\t}\n\t\treturn actuatorUrlFactory;\n\t}\n\t@Override\n\tpublic void dispose() {\n\t\tgetRunTarget().removeConnectionStateListener(RUN_TARGET_CONNECTION_LISTENER);\n\t\tif (debugTargetDisconnector!=null) {\n\t\t\tdebugTargetDisconnector.dispose();\n\t\t\tdebugTargetDisconnector = null;\n\t\t}\n\t\tapplications.dispose();\n\t\tResourcesPlugin.getWorkspace().removeResourceChangeListener(resourceChangeListener);\n\t\tsuper.dispose();\n\t}\n\t@Override\n\tpublic void refresh(UserInteractions ui) {\n\t\trunAsynch(new TargetApplicationsRefreshOperation(this, ui), ui);\n\t\trunAsynch(new ServicesRefreshOperation(this), ui);\n\t}\n\t@Override\n\tpublic Comparator<BootDashElement> getElementComparator() {\n\t\treturn ELEMENT_COMPARATOR;\n\t}\n\t@Override\n\tpublic CloudFoundryRunTarget getRunTarget() {\n\t\treturn (CloudFoundryRunTarget) super.getRunTarget();\n\t}\n\t@Override\n\tpublic boolean canBeAdded(List<Object> sources) {\n\t\tif (sources != null && !sources.isEmpty() && getRunTarget().isConnected()) {\n\t\t\tfor (Object obj : sources) {\n\t\t\t\t// IMPORTANT: to avoid drag/drop into the SAME target, be\n\t\t\t\t// sure\n\t\t\t\t// all sources are from a different target\n\t\t\t\tif (getProject(obj) == null || !isFromDifferentTarget(obj)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t@Override\n\tpublic void add(List<Object> sources, UserInteractions ui) throws Exception {\n\t\tBuilder<IProject> projects = ImmutableSet.builder();\n\t\tif (sources != null) {\n\t\t\tfor (Object obj : sources) {\n\t\t\t\tIProject project = getProject(obj);\n\t\t\t\tif (project != null) {\n\t\t\t\t\tprojects.add(project);\n\t\t\t\t}\n\t\t\t}\n\t\t\tperformDeployment(projects.build(), ui, RunState.RUNNING);\n\t\t}\n\t}\n<fim_suffix>\tprotected IProject getProject(Object obj) {\n\t\tIProject project = null;\n\t\tif (obj instanceof IProject) {\n\t\t\tproject = (IProject) obj;\n\t\t} else if (obj instanceof IJavaProject) {\n\t\t\tproject = ((IJavaProject) obj).getProject();\n\t\t} else if (obj instanceof IAdaptable) {\n\t\t\tproject = (IProject) ((IAdaptable) obj).getAdapter(IProject.class);\n\t\t} else if (obj instanceof BootDashElement) {\n\t\t\tproject = ((BootDashElement) obj).getProject();\n\t\t}\n\t\treturn project;\n\t}<fim_middle>// function below has no smell\n"}