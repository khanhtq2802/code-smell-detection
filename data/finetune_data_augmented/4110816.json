{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.brooklyn.core.mgmt.entitlement;\n\nimport org.apache.brooklyn.api.entity.Entity;\nimport org.apache.brooklyn.api.mgmt.entitlement.EntitlementClass;\nimport org.apache.brooklyn.api.mgmt.entitlement.EntitlementContext;\nimport org.apache.brooklyn.api.mgmt.entitlement.EntitlementManager;\nimport org.apache.brooklyn.core.mgmt.entitlement.Entitlements.EntitlementClassesHandler;\nimport org.apache.brooklyn.core.mgmt.entitlement.Entitlements.EntityAndItem;\nimport org.apache.brooklyn.core.mgmt.entitlement.Entitlements.StringAndArgument;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.common.annotations.Beta;\n\n/**\n * provides an easy entry point to supplying entitlements, by providing the dispatch and defining the additional methods\n * which have to be supplied.\n * <p>\n * note that this class may change as versions change, deliberately breaking backwards compatibility\n * to ensure all permissions are used.\n * <p>\n * @since 0.7.0 */\n@Beta\npublic abstract class EntitlementManagerAdapter implements EntitlementManager {\n\n    private static final Logger log = LoggerFactory.getLogger(EntitlementManagerAdapter.class);\n    \n    protected class Handler implements EntitlementClassesHandler<Boolean> {\n        final EntitlementContext context;\n        protected Handler(EntitlementContext context) {\n            this.context = context;\n        }\n        \n        @Override\n        public Boolean handleSeeCatalogItem(String catalogItemId) {\n            return isEntitledToSeeCatalogItem(context, catalogItemId);\n        }\n\n<fim_suffix>        @Override\n        public Boolean handleAddCatalogItem(Object catalogItemBeingAdded) {\n            return isEntitledToAddCatalogItem(context, catalogItemBeingAdded);\n        }\n\n        @Override\n        public Boolean handleModifyCatalogItem(StringAndArgument catalogItemIdAndModification) {\n            return isEntitledToModifyCatalogItem(context, catalogItemIdAndModification==null ? null : catalogItemIdAndModification.getString(),\n                catalogItemIdAndModification==null ? null : catalogItemIdAndModification.getArgument());\n        }\n        \n        @Override\n        public Boolean handleSeeEntity(Entity entity) {\n            return isEntitledToSeeEntity(context, entity);\n        }\n\n        @Override\n        public Boolean handleSeeSensor(EntityAndItem<String> sensorInfo) {\n            return isEntitledToSeeSensor(context, sensorInfo.getEntity(), sensorInfo.getItem());\n        }\n        @Override\n        public Boolean handleInvokeEffector(EntityAndItem<StringAndArgument> effectorInfo) {\n            StringAndArgument item = effectorInfo.getItem();\n            return isEntitledToInvokeEffector(context, effectorInfo.getEntity(), item==null ? null : item.getString(), item==null ? null : item.getArgument());\n        }\n\n        @Override\n        public Boolean handleModifyEntity(Entity entity) {\n            return isEntitledToModifyEntity(context, entity);\n        }\n\n        @Override\n        public Boolean handleDeployApplication(Object app) {\n            return isEntitledToDeployApplication(context, app);\n        }\n\n        @Override\n        public Boolean handleSeeAllServerInfo() {\n            return isEntitledToSeeAllServerInfo(context);\n        }\n\n        @Override\n        public Boolean handleSeeServerStatus() {\n            return isEntitledToSeeServerStatus(context);\n        }\n\n        @Override\n        public Boolean handleRoot() {\n            return isEntitledToRoot(context);\n        }\n    }\n    \n    @Override\n    public <T> boolean isEntitled(EntitlementContext context, EntitlementClass<T> entitlementClass, T entitlementClassArgument) {\n        if (log.isTraceEnabled()) {\n            log.trace(\"Checking entitlement of \"+context+\" to \"+entitlementClass+\" \"+entitlementClassArgument);\n        }\n        \n        if (isEntitledToRoot( context )) return true;\n        \n        Handler handler = new Handler(context);\n        return Entitlements.EntitlementClassesEnum.of(entitlementClass).handle(\n            handler, entitlementClassArgument);\n    }\n\n    protected abstract boolean isEntitledToSeeCatalogItem(EntitlementContext context, String catalogItemId);\n    /** passes item to be added, either yaml, or possibly null if any addition allowed (eg when resetting) */\n    protected abstract boolean isEntitledToAddCatalogItem(EntitlementContext context, Object catalogItemBeingAdded);\n    /** passes item being modified, as ID and description of modification, both possibly null if any modification is allowed (eg when resetting) */\n    protected abstract boolean isEntitledToModifyCatalogItem(EntitlementContext context, String catalogItemId, Object catalogItemModification);\n    protected abstract boolean isEntitledToSeeSensor(EntitlementContext context, Entity entity, String sensorName);\n    protected abstract boolean isEntitledToSeeEntity(EntitlementContext context, Entity entity);\n    /** arguments might be null, a map, or a list, depending how/where invoked */\n    protected abstract boolean isEntitledToInvokeEffector(EntitlementContext context, Entity entity, String effectorName, Object arguments);\n    protected abstract boolean isEntitledToModifyEntity(EntitlementContext context, Entity entity);\n    protected abstract boolean isEntitledToDeployApplication(EntitlementContext context, Object app);\n    protected abstract boolean isEntitledToSeeAllServerInfo(EntitlementContext context);\n    protected abstract boolean isEntitledToSeeServerStatus(EntitlementContext context);\n    protected abstract boolean isEntitledToRoot(EntitlementContext context);\n    \n}<fim_middle>// function below has no smell\n"}