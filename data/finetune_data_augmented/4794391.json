{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.shardingsphere.core.util;\n\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport org.apache.shardingsphere.core.exception.ShardingException;\n\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\n/**\n * Number utility class.\n *\n * @author caohao\n * @author zhangliang\n */\n<fim_suffix>@AllArgsConstructor(access = AccessLevel.PRIVATE)\npublic final class NumberUtil {\n    \n    /**\n     * Round half up.\n     *\n     * @param obj object to be converted\n     * @return rounded half up number\n     */\n    public static int roundHalfUp(final Object obj) {\n        if (obj instanceof Short) {\n            return (short) obj;\n        }\n        if (obj instanceof Integer) {\n            return (int) obj;\n        }\n        if (obj instanceof Long) {\n            return ((Long) obj).intValue();\n        }\n        if (obj instanceof Double) {\n            return new BigDecimal((double) obj).setScale(0, BigDecimal.ROUND_HALF_UP).intValue();\n        }\n        if (obj instanceof Float) {\n            return new BigDecimal((float) obj).setScale(0, BigDecimal.ROUND_HALF_UP).intValue();\n        }\n        if (obj instanceof String) {\n            return new BigDecimal((String) obj).setScale(0, BigDecimal.ROUND_HALF_UP).intValue();\n        }\n        throw new ShardingException(\"Invalid value to transfer: %s\", obj);\n    }\n    \n    /**\n     * Get exactly number value and type.\n     * \n     * @param value string to be converted\n     * @param radix radix\n     * @return exactly number value and type\n     */\n    public static Number getExactlyNumber(final String value, final int radix) {\n        BigInteger result = new BigInteger(value, radix);\n        if (result.compareTo(new BigInteger(String.valueOf(Integer.MIN_VALUE))) >= 0 && result.compareTo(new BigInteger(String.valueOf(Integer.MAX_VALUE))) <= 0) {\n            return result.intValue();\n        }\n        if (result.compareTo(new BigInteger(String.valueOf(Long.MIN_VALUE))) >= 0 && result.compareTo(new BigInteger(String.valueOf(Long.MAX_VALUE))) <= 0) {\n            return result.longValue();\n        }\n        return result;\n    }\n}<fim_middle>// class below has no smell\n"}