{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2007, 2013 Spring IDE Developers\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Spring IDE Developers - initial API and implementation\n *******************************************************************************/\npackage org.springframework.ide.eclipse.beans.ui.properties.model;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\nimport org.springframework.ide.eclipse.beans.core.internal.model.BeansConfigSet;\nimport org.springframework.ide.eclipse.beans.core.model.IBeansConfig;\nimport org.springframework.ide.eclipse.beans.core.model.IBeansConfigSet;\nimport org.springframework.ide.eclipse.core.model.ModelChangeEvent;\n\n/**\n * This class defines a Spring beans config set (a list of beans config names).\n * \n * @author Torsten Juergeleit\n * @author Christian Dupuis\n * @author Martin Lippert\n */\npublic class PropertiesConfigSet extends BeansConfigSet {\n\n\tpublic PropertiesConfigSet(PropertiesProject project, String name, Type type) {\n\t\tsuper(project, name, new HashSet<String>(), type);\n\t}\n\n\t/**\n\t * Creates a deep copy of given config set associated with the specified\n\t * project.\n\t */\n\tpublic PropertiesConfigSet(PropertiesProject project,\n\t\t\tIBeansConfigSet configSet, Type type) {\n\t\tsuper(project, configSet.getElementName(), configSet.getConfigNames(), type);\n\t\tsuper.setAllowAliasOverriding(configSet.isAllowAliasOverriding());\n\t\tsuper.setAllowBeanDefinitionOverriding(configSet\n\t\t\t\t.isAllowBeanDefinitionOverriding());\n\t\tsuper.setIncomplete(configSet.isIncomplete());\n\t\tsuper.setProfiles(configSet.getProfiles());\n\t}\n\n\t@Override\n\tpublic void setElementName(String name) {\n\t\tsuper.setElementName(name);\n\t\tnotifyListeners();\n\t}\n\t\n\t@Override\n\tpublic void setProfiles(Set<String> profiles) {\n\t\tsuper.setProfiles(profiles);\n\t\tnotifyListeners();\n\t}\n\n\t@Override\n\tpublic void setAllowBeanDefinitionOverriding(\n\t\t\tboolean allowBeanDefinitionOverriding) {\n\t\tsuper.setAllowBeanDefinitionOverriding(allowBeanDefinitionOverriding);\n\t\tnotifyListeners();\n\t}\n\n\t@Override\n\tpublic void setIncomplete(boolean isIncomplete) {\n\t\tsuper.setIncomplete(isIncomplete);\n\t\tnotifyListeners();\n\t}\n\n\t@Override\n\tpublic void addConfig(String configName) {\n\t\tsuper.addConfig(configName);\n\t\tnotifyListeners();\n\t}\n\n\t@Override\n\tpublic void removeConfig(String configName) {\n\t\tsuper.removeConfig(configName);\n\t\tnotifyListeners();\n\t}\n\n\t@Override\n\tpublic void removeAllConfigs() {\n\t\tsuper.removeAllConfigs();\n\t\tnotifyListeners();\n\t}\n\n\t@Override\n\tpublic Set<IBeansConfig> getConfigs() {\n\t\tSet<IBeansConfig> configs = new LinkedHashSet<IBeansConfig>();\n\t\tfor (String configName : configNames) {\n\t\t\tIBeansConfig config = PropertiesConfigFactory.create(this, configName, IBeansConfig.Type.MANUAL);\n\t\t\tif (config != null) {\n\t\t\t\tconfigs.add(config);\n\t\t\t}\n\t\t}\n\t\treturn configs;\n\t}\n\n\tpublic void moveConfigUp(IBeansConfig config) {\n\t\tString configName = config.getElementName();\n\t\tif (configNames.contains(configName)) {\n\t\t\tArrayList<String> newConfigNames = new ArrayList<String>(\n\t\t\t\t\tconfigNames);\n\t\t\tint index = newConfigNames.indexOf(configName);\n\t\t\tif (index > 0) {\n\t\t\t\tnewConfigNames.remove(configName);\n\t\t\t\tnewConfigNames.add(index - 1, configName);\n\t\t\t\tconfigNames.clear();\n\t\t\t\tconfigNames.addAll(newConfigNames);\n\t\t\t\tnotifyListeners();\n\t\t\t}\n\t\t}\n\t}\n\n<fim_suffix>\tpublic void moveConfigDown(IBeansConfig config) {\n\t\tString configName = config.getElementName();\n\t\tif (configNames.contains(configName)) {\n\t\t\tArrayList<String> newConfigNames = new ArrayList<String>(\n\t\t\t\t\tconfigNames);\n\t\t\tint index = newConfigNames.indexOf(configName);\n\t\t\tif (index < (configNames.size() - 1)) {\n\t\t\t\tnewConfigNames.remove(configName);\n\t\t\t\tnewConfigNames.add(index + 1, configName);\n\t\t\t\tconfigNames.clear();\n\t\t\t\tconfigNames.addAll(newConfigNames);\n\t\t\t\tnotifyListeners();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected final void notifyListeners() {\n\t\tPropertiesModel model = (PropertiesModel) getElementParent()\n\t\t\t\t.getElementParent();\n\t\tmodel.notifyListeners(this, ModelChangeEvent.Type.CHANGED);\n\t}\n}<fim_middle>// function below has no smell\n"}