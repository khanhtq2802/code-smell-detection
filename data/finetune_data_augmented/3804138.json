{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage backtype.storm.utils;\n\nimport java.io.IOException;\nimport java.net.BindException;\nimport java.net.InetSocketAddress;\n\nimport org.apache.zookeeper.server.NIOServerCnxnFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n<fim_suffix>public class ZookeeperServerCnxnFactory {\n    private static final Logger LOG = LoggerFactory.getLogger(ZookeeperServerCnxnFactory.class);\n    int _port;\n    NIOServerCnxnFactory _factory;\n\n    public ZookeeperServerCnxnFactory(int port, int maxClientCnxns) {\n        // port range\n        int max;\n        if (port <= 0) {\n            _port = 2000;\n            max = 65535;\n        } else {\n            _port = port;\n            max = port;\n        }\n\n        try {\n            _factory = new NIOServerCnxnFactory();\n        } catch (IOException e) {\n            _port = 0;\n            _factory = null;\n            e.printStackTrace();\n            throw new RuntimeException(e.getMessage());\n        }\n\n        // look for available port\n        for (; _port <= max; _port++) {\n            try {\n                _factory.configure(new InetSocketAddress(_port), maxClientCnxns);\n                LOG.debug(\"Zookeeper server successfully binded at port \" + _port);\n                break;\n            } catch (BindException e1) {\n            } catch (IOException e2) {\n                _port = 0;\n                _factory = null;\n                e2.printStackTrace();\n                throw new RuntimeException(e2.getMessage());\n            }\n        }\n\n        if (_port > max) {\n            _port = 0;\n            _factory = null;\n            LOG.error(\"Failed to find a port for Zookeeper\");\n            throw new RuntimeException(\"No port is available to launch an inprocess zookeeper.\");\n        }\n    }\n\n    public int port() {\n        return _port;\n    }\n\n    public NIOServerCnxnFactory factory() {\n        return _factory;\n    }\n}<fim_middle>// class below has no smell\n"}