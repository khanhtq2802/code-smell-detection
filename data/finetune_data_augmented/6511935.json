{"text": "<fim_prefix>\n<fim_suffix>public class ActorAddFeature extends AbstractAddShapeFeature {\n  private final static Logger LOGGER = LoggerFactory.getLogger(ActorAddFeature.class);\n  public ActorAddFeature(IFeatureProvider fp) {\n    super(fp);\n  }\n  /**\n   * Extends Graphiti's default linking between a pictogram element and a business object,\n   * by also storing extra properties to facilitate determining changes between business model and graphical model.\n   * \n   * @param pe\n   * @param businessObject\n   * @param categories\n   */\n  protected void link(IContext context, PictogramElement pe, Object businessObject, Category... categories) {\n    super.link(pe, businessObject);\n    // add property on the graphical model element, identifying the associated triq model element\n    // so we can easily distinguish and identify them later on for updates etc\n    for (Category category : categories) {\n      category.storeIn(pe);\n    }\n    if (businessObject instanceof NamedObj) {\n      Graphiti.getPeService().setPropertyValue(pe, FeatureConstants.BO_NAME, ((NamedObj) businessObject).getName());\n      String iconResource = (String) context.getProperty(\"icon\");\n      if(iconResource!=null) {\n        Graphiti.getPeService().setPropertyValue(pe, FeatureConstants.ICON, iconResource);\n      }\n      String iconType = (String) context.getProperty(\"iconType\");\n      if(iconType!=null) {\n        Graphiti.getPeService().setPropertyValue(pe, FeatureConstants.ICON_TYPE, iconType);\n      }\n    }\n    Graphiti.getPeService().setPropertyValue(pe, FeatureConstants.BO_CLASS, businessObject.getClass().getName());\n  }\n  @Override\n  public boolean canAdd(IAddContext context) {\n    // check if user wants to add an actor\n    return (context.getNewObject() instanceof Actor);\n  }\n  @Override\n  public PictogramElement add(IAddContext context) {\n    Entity addedActor = (Entity) context.getNewObject();\n    ContainerShape targetContainer = context.getTargetContainer();\n    // This should be a duplicate from what's in ModelElementCreateFeature,\n    // to link the toplevel CompositeActor to the Diagram.\n    // So let's try to do without this.\n    // Object topLevelForDiagram = getBusinessObjectForPictogramElement(getDiagram());\n    // if (topLevelForDiagram == null) {\n    // link(getDiagram(), addedActor.getContainer());\n    // }\n    int xLocation = context.getX();\n    int yLocation = context.getY();\n    IPeCreateService peCreateService = Graphiti.getPeCreateService();\n    IGaService gaService = Graphiti.getGaService();\n    ContainerShape containerShape = peCreateService.createContainerShape(targetContainer, true);\n    link(context, containerShape, addedActor, BoCategory.Actor);\n    GraphicsAlgorithm invisibleRectangle = null;\n    invisibleRectangle = gaService.createInvisibleRectangle(containerShape);\n    GraphicsAlgorithm actorShapeGA = null;\n    String iconResource = (String) context.getProperty(\"icon\");\n    String iconType = (String) context.getProperty(\"iconType\");\n    switch (iconType) {\n    case TriqFeatureProvider.ICONTYPE_SVG:\n    case TriqFeatureProvider.ICONTYPE_PTOLEMY:\n      actorShapeGA = buildExternallyDefinedShape(context, gaService, invisibleRectangle, containerShape, iconType, iconResource);\n      break;\n    default:\n      actorShapeGA = buildDefaultShape(context, gaService, invisibleRectangle, containerShape, addedActor, iconResource);\n    }\n    int width = actorShapeGA.getWidth();\n    int height = actorShapeGA.getHeight();\n    gaService.setLocationAndSize(invisibleRectangle, xLocation, yLocation, width + 2*ACTOR_X_MARGIN, height + 2*ACTOR_Y_MARGIN);\n    // SHAPES FOR PORTS; added both on default shapes and on custom/externally-defined icons (SVG, ptolemy icons)\n    Map<Direction, List<Port>> categorizedPorts = addedActor.getPorts().stream().collect(groupingBy(Port::getDirection, mapping(Function.identity(), toList())));\n    categorizedPorts.forEach((direction, ports) -> createAnchorsAndPortShapesForDirection(context, containerShape, direction, ports));\n    layoutPictogramElement(containerShape);\n    return containerShape;\n  }\n  /**\n   * Builds the default actor shape, consisting of a rounded rectangle containing a small icon and the actor's name.\n   * <p>\n   * Used when no specific image/icon definition has been set for a given actor.\n   * </p>\n   * @param gaService\n   * @param invisibleRectangle\n   * @param containerShape\n   * @param addedActor\n   * @param iconResource\n   * @return\n   */\n  protected GraphicsAlgorithm buildDefaultShape(IAddContext context, IGaService gaService, GraphicsAlgorithm invisibleRectangle, ContainerShape containerShape, Entity addedActor,\n      String iconResource) {\n    IPeCreateService peCreateService = Graphiti.getPeCreateService();\n    int width = ACTOR_VISIBLE_WIDTH;\n    int height = ACTOR_VISIBLE_HEIGHT;\n    // create and set graphics algorithm\n    RoundedRectangle actorShapeGA = gaService.createRoundedRectangle(invisibleRectangle, 5, 5);\n    actorShapeGA.setForeground(manageColor(ACTOR_FOREGROUND));\n    actorShapeGA.setBackground(manageColor(ACTOR_BACKGROUND));\n    actorShapeGA.setLineWidth(2);\n    gaService.setLocationAndSize(actorShapeGA, ACTOR_X_MARGIN, ACTOR_Y_MARGIN, width, height);\n    // add the actor's icon\n    if (!StringUtils.isBlank(iconResource)) {\n      try {\n        final Shape shape = peCreateService.createShape(containerShape, false);\n        final Image image = gaService.createImage(shape, iconResource);\n        addedActor.setIconId(iconResource);\n        gaService.setLocationAndSize(image, ACTOR_ICON_X_MARGIN, ACTOR_ICON_Y_MARGIN, ACTOR_ICON_SIZE, ACTOR_ICON_SIZE);\n        // create link and wire it\n        link(context, shape, addedActor, BoCategory.Actor);\n      } catch (Exception e) {\n        LOGGER.error(ErrorCode.MODEL_CONFIGURATION_ERROR + \" - Error trying to add actor icon for \" + addedActor, e);\n      }\n    }\n    // SHAPE WITH LINE\n    {\n      // create shape for line\n      Shape shape = peCreateService.createShape(containerShape, false);\n      // create and set graphics algorithm\n      Polyline polyline = gaService.createPolyline(shape, ACTOR_TEXT_UNDERLINE_SHAPE);\n      polyline.setForeground(manageColor(ACTOR_FOREGROUND));\n      polyline.setLineWidth(2);\n      // create link and wire it\n      link(context, shape, addedActor, BoCategory.Actor);\n    }\n    // SHAPE WITH actor name as TEXT\n    {\n      // create shape for text\n      Shape shape = peCreateService.createShape(containerShape, false);\n      // create and set text graphics algorithm\n      Text text = gaService.createText(shape, addedActor.getName());\n      text.setForeground(manageColor(ACTOR_NAME_FOREGROUND));\n      text.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);\n      // vertical alignment has as default value \"center\"\n      text.setFont(gaService.manageDefaultFont(getDiagram(), false, true));\n      gaService.setLocationAndSize(text, ACTOR_TEXT_X_MARGIN, ACTOR_Y_MARGIN, ACTOR_TEXT_WIDTH, ACTOR_TEXT_HEIGHT);\n      // create link and wire it\n      link(context, shape, addedActor, BoCategory.Actor);\n      // provide information to support direct-editing directly\n      // after object creation (must be activated additionally)\n      IDirectEditingInfo directEditingInfo = getFeatureProvider().getDirectEditingInfo();\n      // set container shape for direct editing after object creation\n      directEditingInfo.setMainPictogramElement(containerShape);\n      // set shape and graphics algorithm where the editor for\n      // direct editing shall be opened after object creation\n      directEditingInfo.setPictogramElement(shape);\n      directEditingInfo.setGraphicsAlgorithm(text);\n    }\n    return actorShapeGA;\n  }\n  /**\n   * Builds the actor shape based on an external definition, e.g. in SVG or in Ptolemy icon moml files.\n   * \n   * @param gaService\n   * @param invisibleRectangle\n   * @param containerShape\n   * @param iconType\n   * @param iconResource\n   * @return\n   */\n  protected GraphicsAlgorithm buildExternallyDefinedShape(IAddContext context, IGaService gaService, GraphicsAlgorithm invisibleRectangle, ContainerShape containerShape,\n      String iconType, String iconResource) {\n    GraphicsAlgorithm extFigure = Graphiti.getGaCreateService().createPlatformGraphicsAlgorithm(invisibleRectangle, iconType);\n    {\n      Property property = MmFactory.eINSTANCE.createProperty();\n      property.setKey(\"iconType\");\n      property.setValue(iconType);<fim_middle>// class below is blob\n"}