{"text": "<fim_prefix>/*\n * Copyright (c) 1997, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n/*\n * @author Charlton Innovations, Inc.\n * @author Jim Graham\n */\npackage sun.java2d.loops;\nimport java.awt.Composite;\nimport java.awt.Rectangle;\nimport java.awt.image.ColorModel;\nimport java.awt.image.DataBuffer;\nimport java.awt.image.Raster;\nimport java.awt.image.WritableRaster;\nimport sun.awt.image.IntegerComponentRaster;\nimport sun.java2d.SurfaceData;\nimport sun.java2d.pipe.Region;\nimport sun.java2d.pipe.SpanIterator;\n/**\n *   CustomComponent, collection of GraphicsPrimitive\n *   Basically, this collection of components performs conversion from\n *   ANY to ANY via opaque copy\n */\npublic final class CustomComponent {\n    public static void register() {\n        // REMIND: This does not work for all destinations yet since\n        // the screen SurfaceData objects do not implement getRaster\n        Class<?> owner = CustomComponent.class;\n        GraphicsPrimitive[] primitives = {\n            new GraphicsPrimitiveProxy(owner, \"OpaqueCopyAnyToArgb\",\n                                       Blit.methodSignature,\n                                       Blit.primTypeID,\n                                       SurfaceType.Any,\n                                       CompositeType.SrcNoEa,\n                                       SurfaceType.IntArgb),\n            new GraphicsPrimitiveProxy(owner, \"OpaqueCopyArgbToAny\",\n                                       Blit.methodSignature,\n                                       Blit.primTypeID,\n                                       SurfaceType.IntArgb,\n                                       CompositeType.SrcNoEa,\n                                       SurfaceType.Any),\n            new GraphicsPrimitiveProxy(owner, \"XorCopyArgbToAny\",\n                                       Blit.methodSignature,\n                                       Blit.primTypeID,\n                                       SurfaceType.IntArgb,\n                                       CompositeType.Xor,\n                                       SurfaceType.Any),\n        };\n        GraphicsPrimitiveMgr.register(primitives);\n    }\n    public static Region getRegionOfInterest(SurfaceData src, SurfaceData dst,\n                                             Region clip,\n                                             int srcx, int srcy,\n                                             int dstx, int dsty,\n                                             int w, int h)\n    {\n        /*\n         * Intersect all of:\n         *   - operation area (dstx, dsty, w, h)\n         *   - destination bounds\n         *   - (translated) src bounds\n         *   - supplied clip (may be non-rectangular)\n         * Intersect the rectangular regions first since those are\n         * simpler operations.\n         */\n        Region ret = Region.getInstanceXYWH(dstx, dsty, w, h);\n        ret = ret.getIntersection(dst.getBounds());\n        Rectangle r = src.getBounds();\n        // srcxy in src space maps to dstxy in dst space\n        r.translate(dstx - srcx, dsty - srcy);\n        ret = ret.getIntersection(r);\n        if (clip != null) {\n            // Intersect with clip last since it may be non-rectangular\n            ret = ret.getIntersection(clip);\n        }\n        return ret;\n    }\n}\n/**\n *   ANY format to ARGB format Blit\n */\nclass OpaqueCopyAnyToArgb extends Blit {\n    OpaqueCopyAnyToArgb() {\n        super(SurfaceType.Any,\n              CompositeType.SrcNoEa,\n              SurfaceType.IntArgb);\n    }\n    public void Blit(SurfaceData src, SurfaceData dst,\n                     Composite comp, Region clip,\n                     int srcx, int srcy, int dstx, int dsty, int w, int h)\n    {\n        Raster srcRast = src.getRaster(srcx, srcy, w, h);\n        ColorModel srcCM = src.getColorModel();\n        Raster dstRast = dst.getRaster(dstx, dsty, w, h);\n        IntegerComponentRaster icr = (IntegerComponentRaster) dstRast;\n        int[] dstPix = icr.getDataStorage();\n        Region roi = CustomComponent.getRegionOfInterest(src, dst, clip,\n                                                         srcx, srcy,\n                                                         dstx, dsty, w, h);\n        SpanIterator si = roi.getSpanIterator();\n        Object srcPix = null;\n        int dstScan = icr.getScanlineStride();\n        // assert(icr.getPixelStride() == 1);\n        srcx -= dstx;\n        srcy -= dsty;\n        int[] span = new int[4];\n        while (si.nextSpan(span)) {\n            int rowoff = icr.getDataOffset(0) + span[1] * dstScan + span[0];\n            for (int y = span[1]; y < span[3]; y++) {\n                int off = rowoff;\n                for (int x = span[0]; x < span[2]; x++) {\n                    srcPix = srcRast.getDataElements(x+srcx, y+srcy, srcPix);\n                    dstPix[off++] = srcCM.getRGB(srcPix);\n                }\n                rowoff += dstScan;\n            }\n        }\n        // Pixels in the dest were modified directly, we must\n        // manually notify the raster that it was modified\n        icr.markDirty();\n        // REMIND: We need to do something to make sure that dstRast\n        // is put back to the destination (as in the native Release\n        // function)\n        // src.releaseRaster(srcRast);  // NOP?\n        // dst.releaseRaster(dstRast);\n    }\n}\n/**\n *   ARGB format to ANY format Blit\n */\nclass OpaqueCopyArgbToAny extends Blit {\n    OpaqueCopyArgbToAny() {\n        super(SurfaceType.IntArgb,\n              CompositeType.SrcNoEa,\n              SurfaceType.Any);\n    }\n<fim_suffix>    public void Blit(SurfaceData src, SurfaceData dst,\n                     Composite comp, Region clip,\n                     int srcx, int srcy, int dstx, int dsty, int w, int h)\n    {\n        Raster srcRast = src.getRaster(srcx, srcy, w, h);\n        IntegerComponentRaster icr = (IntegerComponentRaster) srcRast;\n        int[] srcPix = icr.getDataStorage();\n        WritableRaster dstRast =\n            (WritableRaster) dst.getRaster(dstx, dsty, w, h);\n        ColorModel dstCM = dst.getColorModel();\n        Region roi = CustomComponent.getRegionOfInterest(src, dst, clip,\n                                                         srcx, srcy,\n                                                         dstx, dsty, w, h);\n        SpanIterator si = roi.getSpanIterator();\n        Object dstPix = null;\n        int srcScan = icr.getScanlineStride();\n        // assert(icr.getPixelStride() == 1);\n        srcx -= dstx;\n        srcy -= dsty;\n        int[] span = new int[4];\n        while (si.nextSpan(span)) {\n            int rowoff = (icr.getDataOffset(0) +\n                          (srcy + span[1]) * srcScan +\n                          (srcx + span[0]));\n            for (int y = span[1]; y < span[3]; y++) {\n                int off = rowoff;\n                for (int x = span[0]; x < span[2]; x++) {\n                    dstPix = dstCM.getDataElements(srcPix[off++], dstPix);\n                    dstRast.setDataElements(x, y, dstPix);\n                }\n                rowoff += srcScan;\n            }\n        }\n        // REMIND: We need to do something to make sure that dstRast\n        // is put back to the destination (as in the native Release\n        // function)\n        // src.releaseRaster(srcRast);  // NOP?\n        // dst.releaseRaster(dstRast);\n    }\n}\n/**\n *   ARGB format to ANY format Blit (pixels are XORed together with XOR pixel)\n */<fim_middle>// function below is long method\n"}