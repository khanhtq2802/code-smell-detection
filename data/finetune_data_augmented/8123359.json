{"text": "<fim_prefix>/**\n * Copyright (c) 2016 itemis AG (http://www.itemis.eu) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n */\npackage org.eclipse.xtext.xtext.generator.serializer;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport org.eclipse.emf.ecore.EClass;\nimport org.eclipse.xtext.Action;\nimport org.eclipse.xtext.Grammar;\nimport org.eclipse.xtext.GrammarUtil;\nimport org.eclipse.xtext.ParserRule;\nimport org.eclipse.xtext.serializer.ISerializationContext;\nimport org.eclipse.xtext.serializer.analysis.SerializationContextMap;\nimport org.eclipse.xtext.xbase.lib.CollectionLiterals;\nimport org.eclipse.xtext.xbase.lib.Conversions;\nimport org.eclipse.xtext.xbase.lib.Functions.Function1;\nimport org.eclipse.xtext.xbase.lib.IterableExtensions;\nimport org.eclipse.xtext.xbase.lib.Pair;\nimport org.eclipse.xtext.xtext.generator.serializer.NamedSerializationContexts;\n\n/**\n * @author Moritz Eysholdt - Initial contribution and API\n */\n@SuppressWarnings(\"all\")\npublic class NamedSerializationContextProvider {\n  private final Map<ParserRule, Integer> rules;\n  \n  public NamedSerializationContextProvider(final Grammar grammar) {\n    final Function1<Pair<Integer, ParserRule>, Pair<ParserRule, Integer>> _function = (Pair<Integer, ParserRule> it) -> {\n      ParserRule _value = it.getValue();\n      Integer _key = it.getKey();\n      return Pair.<ParserRule, Integer>of(_value, _key);\n    };\n    this.rules = CollectionLiterals.<ParserRule, Integer>newHashMap(((Pair<? extends ParserRule, ? extends Integer>[])Conversions.unwrapArray(IterableExtensions.<Pair<Integer, ParserRule>, Pair<ParserRule, Integer>>map(IterableExtensions.<ParserRule>indexed(GrammarUtil.allParserRules(grammar)), _function), Pair.class)));\n  }\n  \n<fim_suffix>  public <T extends Object> List<NamedSerializationContexts<T>> getNamedContexts(final SerializationContextMap<T> map) {\n    final ArrayList<NamedSerializationContexts<T>> result = CollectionLiterals.<NamedSerializationContexts<T>>newArrayList();\n    final HashMap<String, Integer> names = CollectionLiterals.<String, Integer>newHashMap();\n    List<SerializationContextMap.Entry<T>> _values = map.values();\n    for (final SerializationContextMap.Entry<T> e : _values) {\n      Set<EClass> _types = e.getTypes();\n      for (final EClass t : _types) {\n        {\n          final List<ISerializationContext> ctx = e.getContexts(t);\n          String _xifexpression = null;\n          if ((t == null)) {\n            _xifexpression = \"\";\n          } else {\n            _xifexpression = t.getName();\n          }\n          String _plus = (_xifexpression + \"_\");\n          String _significantGrammarElement = this.getSignificantGrammarElement(ctx);\n          final String name = (_plus + _significantGrammarElement);\n          final Integer dup = names.get(name);\n          String _xifexpression_1 = null;\n          if ((dup == null)) {\n            String _xblockexpression = null;\n            {\n              names.put(name, Integer.valueOf(1));\n              _xblockexpression = name;\n            }\n            _xifexpression_1 = _xblockexpression;\n          } else {\n            String _xblockexpression_1 = null;\n            {\n              names.put(name, Integer.valueOf(((dup).intValue() + 1)));\n              _xblockexpression_1 = ((name + \"_\") + dup);\n            }\n            _xifexpression_1 = _xblockexpression_1;\n          }\n          final String unique = _xifexpression_1;\n          T _value = e.getValue();\n          NamedSerializationContexts<T> _namedSerializationContexts = new NamedSerializationContexts<T>(unique, t, ctx, _value);\n          result.add(_namedSerializationContexts);\n        }\n      }\n    }\n    return result;\n  }\n  \n  public String getSignificantGrammarElement(final Iterable<ISerializationContext> contexts) {\n    ParserRule rule = null;\n    int index = Integer.MAX_VALUE;\n    for (final ISerializationContext ctx : contexts) {\n      {\n        ParserRule pr = ctx.getParserRule();\n        if ((pr == null)) {\n          final Action action = ctx.getAssignedAction();\n          if ((action != null)) {\n            pr = GrammarUtil.containingParserRule(action);\n          }\n        }\n        if ((pr != null)) {\n          final Integer i = this.rules.get(pr);\n          if (((i).intValue() < index)) {\n            index = (i).intValue();\n            rule = pr;\n          }\n        }\n      }\n    }\n    if ((rule != null)) {\n      return rule.getName();\n    }\n    return \"unknown\";\n  }\n}<fim_middle>// function below is long method\n"}