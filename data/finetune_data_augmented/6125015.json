{"text": "<fim_prefix>/*\n * Copyright (c) 2016 Goldman Sachs.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v. 1.0 which accompany this distribution.\n * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n * http://www.eclipse.org/org/documents/edl-v10.php.\n */\npackage org.eclipse.collections.impl.lazy.parallel;\nimport java.util.Comparator;\nimport org.eclipse.collections.api.ParallelIterable;\nimport org.eclipse.collections.api.RichIterable;\nimport org.eclipse.collections.api.bag.MutableBag;\nimport org.eclipse.collections.api.bag.sorted.MutableSortedBag;\nimport org.eclipse.collections.api.block.function.Function;\nimport org.eclipse.collections.api.block.function.Function0;\nimport org.eclipse.collections.api.block.function.Function2;\nimport org.eclipse.collections.api.block.function.primitive.DoubleFunction;\nimport org.eclipse.collections.api.block.function.primitive.FloatFunction;\nimport org.eclipse.collections.api.block.function.primitive.IntFunction;\nimport org.eclipse.collections.api.block.function.primitive.LongFunction;\nimport org.eclipse.collections.api.block.predicate.Predicate;\nimport org.eclipse.collections.api.block.predicate.Predicate2;\nimport org.eclipse.collections.api.block.procedure.Procedure;\nimport org.eclipse.collections.api.block.procedure.Procedure2;\nimport org.eclipse.collections.api.list.MutableList;\nimport org.eclipse.collections.api.map.MapIterable;\nimport org.eclipse.collections.api.map.MutableMap;\nimport org.eclipse.collections.api.map.sorted.MutableSortedMap;\nimport org.eclipse.collections.api.set.MutableSet;\nimport org.eclipse.collections.api.set.sorted.MutableSortedSet;\npublic abstract class NonParallelIterable<T, RI extends RichIterable<T>> implements ParallelIterable<T>\n{\n    protected final RI delegate;\n    protected NonParallelIterable(RI delegate)\n    {\n        this.delegate = delegate;\n    }\n    @Override\n    public void forEach(Procedure<? super T> procedure)\n    {\n        this.delegate.forEach(procedure);\n    }\n    @Override\n    public <P> void forEachWith(Procedure2<? super T, ? super P> procedure, P parameter)\n    {\n        this.delegate.forEachWith(procedure, parameter);\n    }\n    @Override\n    public T detect(Predicate<? super T> predicate)\n    {\n        return this.delegate.detect(predicate);\n    }\n    @Override\n    public <P> T detectWith(Predicate2<? super T, ? super P> predicate, P parameter)\n    {\n        return this.delegate.detectWith(predicate, parameter);\n    }\n    @Override\n    public T detectIfNone(Predicate<? super T> predicate, Function0<? extends T> function)\n    {\n        return this.delegate.detectIfNone(predicate, function);\n    }\n    @Override\n    public <P> T detectWithIfNone(Predicate2<? super T, ? super P> predicate, P parameter, Function0<? extends T> function)\n    {\n        return this.delegate.detectWithIfNone(predicate, parameter, function);\n    }\n    @Override\n    public int count(Predicate<? super T> predicate)\n    {\n        return this.delegate.count(predicate);\n    }\n    @Override\n    public <P> int countWith(Predicate2<? super T, ? super P> predicate, P parameter)\n    {\n        return this.delegate.countWith(predicate, parameter);\n    }\n    @Override\n    public boolean anySatisfy(Predicate<? super T> predicate)\n    {\n        return this.delegate.anySatisfy(predicate);\n    }\n    @Override\n    public <P> boolean anySatisfyWith(Predicate2<? super T, ? super P> predicate, P parameter)\n    {\n        return this.delegate.anySatisfyWith(predicate, parameter);\n    }\n    @Override\n    public boolean allSatisfy(Predicate<? super T> predicate)\n    {\n        return this.delegate.allSatisfy(predicate);\n    }\n    @Override\n    public <P> boolean allSatisfyWith(Predicate2<? super T, ? super P> predicate, P parameter)\n    {\n        return this.delegate.allSatisfyWith(predicate, parameter);\n    }\n    @Override\n    public boolean noneSatisfy(Predicate<? super T> predicate)\n    {\n        return this.delegate.noneSatisfy(predicate);\n    }\n    @Override\n    public <P> boolean noneSatisfyWith(Predicate2<? super T, ? super P> predicate, P parameter)\n    {\n        return this.delegate.noneSatisfyWith(predicate, parameter);\n    }\n    @Override\n    public MutableList<T> toList()\n    {\n        return this.delegate.toList();\n    }\n    @Override\n    public MutableList<T> toSortedList()\n    {\n        return this.delegate.toSortedList();\n    }\n    @Override\n    public MutableList<T> toSortedList(Comparator<? super T> comparator)\n    {\n        return this.delegate.toSortedList(comparator);\n    }\n<fim_suffix>    @Override\n    public <V extends Comparable<? super V>> MutableList<T> toSortedListBy(Function<? super T, ? extends V> function)\n    {\n        return this.delegate.toSortedListBy(function);\n    }\n    @Override\n    public MutableSet<T> toSet()\n    {\n        return this.delegate.toSet();\n    }\n    @Override\n    public MutableSortedSet<T> toSortedSet()\n    {\n        return this.delegate.toSortedSet();\n    }\n    @Override\n    public MutableSortedSet<T> toSortedSet(Comparator<? super T> comparator)\n    {\n        return this.delegate.toSortedSet(comparator);\n    }\n    @Override\n    public <V extends Comparable<? super V>> MutableSortedSet<T> toSortedSetBy(Function<? super T, ? extends V> function)\n    {\n        return this.delegate.toSortedSetBy(function);\n    }\n    @Override\n    public MutableBag<T> toBag()\n    {\n        return this.delegate.toBag();\n    }\n    @Override\n    public MutableSortedBag<T> toSortedBag()\n    {\n        return this.delegate.toSortedBag();\n    }\n    @Override\n    public MutableSortedBag<T> toSortedBag(Comparator<? super T> comparator)\n    {\n        return this.delegate.toSortedBag(comparator);\n    }\n    @Override\n    public <V extends Comparable<? super V>> MutableSortedBag<T> toSortedBagBy(Function<? super T, ? extends V> function)\n    {\n        return this.delegate.toSortedBagBy(function);\n    }\n    @Override\n    public <NK, NV> MutableMap<NK, NV> toMap(Function<? super T, ? extends NK> keyFunction, Function<? super T, ? extends NV> valueFunction)\n    {\n        return this.delegate.toMap(keyFunction, valueFunction);\n    }\n    @Override\n    public <NK, NV> MutableSortedMap<NK, NV> toSortedMap(Function<? super T, ? extends NK> keyFunction, Function<? super T, ? extends NV> valueFunction)\n    {\n        return this.delegate.toSortedMap(keyFunction, valueFunction);\n    }\n    @Override\n    public <NK, NV> MutableSortedMap<NK, NV> toSortedMap(Comparator<? super NK> comparator, Function<? super T, ? extends NK> keyFunction, Function<? super T, ? extends NV> valueFunction)\n    {\n        return this.delegate.toSortedMap(comparator, keyFunction, valueFunction);\n    }\n    @Override\n    public Object[] toArray()\n    {\n        return this.delegate.toArray();\n    }\n    @Override\n    public <T1> T1[] toArray(T1[] target)\n    {\n        return this.delegate.toArray(target);\n    }\n    @Override\n    public T min(Comparator<? super T> comparator)\n    {\n        return this.delegate.min(comparator);\n    }\n    @Override\n    public T max(Comparator<? super T> comparator)\n    {\n        return this.delegate.max(comparator);\n    }\n    @Override\n    public T min()\n    {\n        return this.delegate.min();\n    }\n    @Override\n    public T max()\n    {\n        return this.delegate.max();\n    }\n    @Override\n    public <V extends Comparable<? super V>> T minBy(Function<? super T, ? extends V> function)\n    {\n        return this.delegate.minBy(function);\n    }\n    @Override\n    public <V extends Comparable<? super V>> T maxBy(Function<? super T, ? extends V> function)\n    {\n        return this.delegate.maxBy(function);\n    }\n    @Override\n    public long sumOfInt(IntFunction<? super T> function)\n    {\n        return this.delegate.sumOfInt(function);\n    }\n    @Override<fim_middle>// function below has no smell\n"}