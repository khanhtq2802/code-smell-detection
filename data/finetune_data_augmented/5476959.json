{"text": "<fim_prefix>/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\npackage org.apache.qpid.server.model;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.google.common.util.concurrent.FutureCallback;\nimport com.google.common.util.concurrent.ListenableFuture;\nimport com.google.common.util.concurrent.MoreExecutors;\nimport com.google.common.util.concurrent.SettableFuture;\n\nimport org.apache.qpid.server.plugin.ConfiguredObjectTypeFactory;\nimport org.apache.qpid.server.store.ConfiguredObjectDependency;\nimport org.apache.qpid.server.store.ConfiguredObjectRecord;\nimport org.apache.qpid.server.store.UnresolvedConfiguredObject;\n\nabstract public class AbstractConfiguredObjectTypeFactory<X extends AbstractConfiguredObject<X>> implements ConfiguredObjectTypeFactory<X>\n{\n    private final Class<X> _clazz;\n\n    public AbstractConfiguredObjectTypeFactory(final Class<X> clazz)\n    {\n        _clazz = clazz;\n    }\n\n<fim_suffix>    @Override\n    public final String getType()\n    {\n        return ConfiguredObjectTypeRegistry.getType(_clazz);\n    }\n\n    @Override\n    public final Class<? super X> getCategoryClass()\n    {\n        return (Class<? super X>) ConfiguredObjectTypeRegistry.getCategory(_clazz);\n    }\n\n    @Override\n    public X create(final ConfiguredObjectFactory factory,\n                    final Map<String, Object> attributes,\n                    final ConfiguredObject<?> parent)\n    {\n        X instance = createInstance(attributes, parent);\n        instance.create();\n        return instance;\n    }\n\n\n    @Override\n    public ListenableFuture<X> createAsync(final ConfiguredObjectFactory factory,\n                    final Map<String, Object> attributes,\n                    final ConfiguredObject<?> parent)\n    {\n        final SettableFuture<X> returnVal = SettableFuture.create();\n        final X instance = createInstance(attributes, parent);\n        final ListenableFuture<Void> createFuture = instance.createAsync();\n        AbstractConfiguredObject.addFutureCallback(createFuture, new FutureCallback<Void>()\n        {\n            @Override\n            public void onSuccess(final Void result)\n            {\n                returnVal.set(instance);\n            }\n\n            @Override\n            public void onFailure(final Throwable t)\n            {\n                returnVal.setException(t);\n            }\n        }, MoreExecutors.directExecutor());\n\n        return returnVal;\n    }\n\n    protected abstract X createInstance(Map<String, Object> attributes, ConfiguredObject<?> parent);\n\n    @Override\n    public UnresolvedConfiguredObject<X> recover(final ConfiguredObjectFactory factory,\n                                                 final ConfiguredObjectRecord record,\n                                                 final ConfiguredObject<?> parent)\n    {\n        return new GenericUnresolvedConfiguredObject(record, parent);\n    }\n\n\n    private class GenericUnresolvedConfiguredObject extends AbstractUnresolvedObject<X>\n    {\n        public GenericUnresolvedConfiguredObject(\n                final ConfiguredObjectRecord record, final ConfiguredObject<?> parent)\n        {\n            super(_clazz, record, parent);\n        }\n\n        @Override\n        protected <C extends ConfiguredObject<C>> void resolved(final ConfiguredObjectDependency<C> dependency,\n                                                                 final C value)\n        {\n\n        }\n\n        @Override\n        public X resolve()\n        {\n            Map<String,Object> attributesWithId = new HashMap<String, Object>(getRecord().getAttributes());\n            attributesWithId.put(ConfiguredObject.ID, getRecord().getId());\n            X instance = createInstance(attributesWithId, getParent());\n            instance.registerWithParents();\n            return instance;\n        }\n    }\n}<fim_middle>// function below has no smell\n"}