{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the  \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * $Id$\n */\n\npackage org.apache.xalan.xsltc.compiler.util;\n\nimport org.apache.bcel.generic.ALOAD;\nimport org.apache.bcel.generic.ASTORE;\nimport org.apache.bcel.generic.ConstantPoolGen;\nimport org.apache.bcel.generic.Instruction;\nimport org.apache.bcel.generic.InstructionList;\nimport org.apache.bcel.generic.Type;\n\n/**\n * This class is used for named templates. Named template methods have access\n * to the DOM, the current iterator, the handler and the current node.\n * @author Jacek Ambroziak\n * @author Santiago Pericas-Geertsen\n */\n<fim_suffix>public final class NamedMethodGenerator extends MethodGenerator {\n    protected static final int CURRENT_INDEX  = 4;\n    \n    // The index of the first parameter (after dom/iterator/handler/current)\n    private static final int PARAM_START_INDEX = 5;\n\n    public NamedMethodGenerator(int access_flags, Type return_type,\n\t\t\t\tType[] arg_types, String[] arg_names,\n\t\t\t\tString method_name, String class_name,\n\t\t\t\tInstructionList il, ConstantPoolGen cp) {\n\tsuper(access_flags, return_type, arg_types, arg_names, method_name, \n\t      class_name, il, cp);\n    }\n\n    public int getLocalIndex(String name) {\n\tif (name.equals(\"current\")) {\n\t    return CURRENT_INDEX;\n\t}\n\treturn super.getLocalIndex(name);\n    }\n\n    public Instruction loadParameter(int index) {\n        return new ALOAD(index + PARAM_START_INDEX);\n    }\n    \n    public Instruction storeParameter(int index) {\n        return new ASTORE(index + PARAM_START_INDEX);\n    }\n}<fim_middle>// class below has no smell\n"}