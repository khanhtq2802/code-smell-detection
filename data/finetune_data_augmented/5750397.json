{"text": "<fim_prefix>    }\n    /**\n     * Create a row index entry with the previous location and the current\n     * index statistics. Also merges the index statistics into the file\n     * statistics before they are cleared. Finally, it records the start of the\n     * next index and ensures all of the children columns also create an entry.\n     * @throws IOException\n     */\n    void createRowIndexEntry() throws IOException {\n      stripeColStatistics.merge(indexStatistics);\n      rowIndexEntry.setStatistics(indexStatistics.serialize());\n      indexStatistics.reset();\n      rowIndex.addEntry(rowIndexEntry);\n      rowIndexEntry.clear();\n      addBloomFilterEntry();\n      recordPosition(rowIndexPosition);\n      for(TreeWriter child: childrenWriters) {\n        child.createRowIndexEntry();\n      }\n    }\n    void addBloomFilterEntry() {\n      if (createBloomFilter) {\n        bloomFilterEntry.setNumHashFunctions(bloomFilter.getNumHashFunctions());\n        bloomFilterEntry.addAllBitset(Longs.asList(bloomFilter.getBitSet()));\n        bloomFilterIndex.addBloomFilter(bloomFilterEntry.build());\n        bloomFilter.reset();\n        bloomFilterEntry.clear();\n      }\n    }\n    /**\n     * Record the current position in each of this column's streams.\n     * @param recorder where should the locations be recorded\n     * @throws IOException\n     */\n    void recordPosition(PositionRecorder recorder) throws IOException {\n      if (isPresent != null) {\n        isPresent.getPosition(recorder);\n      }\n    }\n    /**\n     * Estimate how much memory the writer is consuming excluding the streams.\n     * @return the number of bytes.\n     */\n    long estimateMemory() {\n      long result = 0;\n      for (TreeWriter child: childrenWriters) {\n        result += child.estimateMemory();\n      }\n      return result;\n    }\n  }\n  private static class BooleanTreeWriter extends TreeWriter {\n    private final BitFieldWriter writer;\n    BooleanTreeWriter(int columnId,\n                      TypeDescription schema,\n                      StreamFactory writer,\n                      boolean nullable) throws IOException {\n      super(columnId, schema, writer, nullable);\n      PositionedOutputStream out = writer.createStream(id,\n          OrcProto.Stream.Kind.DATA);\n      this.writer = new BitFieldWriter(out, 1);\n      recordPosition(rowIndexPosition);\n    }\n    @Override\n    void write(Datum datum) throws IOException {\n      super.write(datum);\n      if (datum != null && datum.isNotNull()) {\n        boolean val = datum.asBool();\n        indexStatistics.updateBoolean(val, 1);\n        writer.write(val ? 1 : 0);\n      }\n    }\n    @Override\n    void writeStripe(OrcProto.StripeFooter.Builder builder,\n                     int requiredIndexEntries) throws IOException {\n      super.writeStripe(builder, requiredIndexEntries);\n      writer.flush();\n      recordPosition(rowIndexPosition);\n    }\n    @Override\n    void recordPosition(PositionRecorder recorder) throws IOException {\n      super.recordPosition(recorder);\n      writer.getPosition(recorder);\n    }\n  }\n  private static class ByteTreeWriter extends TreeWriter {\n    private final RunLengthByteWriter writer;\n    ByteTreeWriter(int columnId,\n                   TypeDescription schema,\n                   StreamFactory writer,\n                   boolean nullable) throws IOException {\n      super(columnId, schema, writer, nullable);\n      this.writer = new RunLengthByteWriter(writer.createStream(id,\n          OrcProto.Stream.Kind.DATA));\n      recordPosition(rowIndexPosition);\n    }\n    @Override\n    void write(Datum datum) throws IOException {\n      super.write(datum);\n      if (datum != null && datum.isNotNull()) {\n        byte val = datum.asByte();\n        indexStatistics.updateInteger(val, 1);\n        if (createBloomFilter) {\n          bloomFilter.addLong(val);\n        }\n        writer.write(val);\n      }\n    }\n    @Override\n    void writeStripe(OrcProto.StripeFooter.Builder builder,\n                     int requiredIndexEntries) throws IOException {\n      super.writeStripe(builder, requiredIndexEntries);\n      writer.flush();\n      recordPosition(rowIndexPosition);\n    }\n    @Override\n    void recordPosition(PositionRecorder recorder) throws IOException {\n      super.recordPosition(recorder);\n      writer.getPosition(recorder);\n    }\n  }\n  private static class IntegerTreeWriter extends TreeWriter {\n    private final IntegerWriter writer;\n    private boolean isDirectV2 = true;\n    IntegerTreeWriter(int columnId,\n                      TypeDescription schema,\n                      StreamFactory writer,\n                      boolean nullable) throws IOException {\n      super(columnId, schema, writer, nullable);\n      OutStream out = writer.createStream(id,\n          OrcProto.Stream.Kind.DATA);\n      this.isDirectV2 = isNewWriteFormat(writer);\n      this.writer = createIntegerWriter(out, true, isDirectV2, writer);\n      recordPosition(rowIndexPosition);\n    }\n    @Override\n    OrcProto.ColumnEncoding getEncoding() {\n      if (isDirectV2) {\n        return OrcProto.ColumnEncoding.newBuilder()\n            .setKind(OrcProto.ColumnEncoding.Kind.DIRECT_V2).build();\n      }\n      return OrcProto.ColumnEncoding.newBuilder()\n          .setKind(OrcProto.ColumnEncoding.Kind.DIRECT).build();\n    }\n    @Override\n    void write(Datum datum) throws IOException {\n      super.write(datum);\n      if (datum != null && datum.isNotNull()) {\n        long val;\n        if (datum instanceof Int4Datum) {\n          val = datum.asInt4();\n        } else if (datum instanceof Int8Datum) {\n          val = datum.asInt8();\n        } else {\n          val = datum.asInt2();\n        }\n        indexStatistics.updateInteger(val, 1);\n        if (createBloomFilter) {\n          // integers are converted to longs in column statistics and during SARG evaluation\n          bloomFilter.addLong(val);\n        }\n        writer.write(val);\n      }\n    }\n    @Override\n    void writeStripe(OrcProto.StripeFooter.Builder builder,\n                     int requiredIndexEntries) throws IOException {\n      super.writeStripe(builder, requiredIndexEntries);\n      writer.flush();\n      recordPosition(rowIndexPosition);\n    }\n    @Override\n    void recordPosition(PositionRecorder recorder) throws IOException {\n      super.recordPosition(recorder);\n      writer.getPosition(recorder);\n    }\n  }\n  private static class FloatTreeWriter extends TreeWriter {\n    private final PositionedOutputStream stream;\n    private final SerializationUtils utils;\n    FloatTreeWriter(int columnId,\n                    TypeDescription schema,\n                    StreamFactory writer,\n                    boolean nullable) throws IOException {\n      super(columnId, schema, writer, nullable);\n      this.stream = writer.createStream(id,\n          OrcProto.Stream.Kind.DATA);\n      this.utils = new SerializationUtils();\n      recordPosition(rowIndexPosition);\n    }\n    @Override\n    void write(Datum datum) throws IOException {\n      super.write(datum);\n      if (datum != null && datum.isNotNull()) {\n        float val = datum.asFloat4();\n        indexStatistics.updateDouble(val);\n        if (createBloomFilter) {\n          // floats are converted to doubles in column statistics and during SARG evaluation\n          bloomFilter.addDouble(val);\n        }\n        utils.writeFloat(stream, val);\n      }\n    }\n    @Override\n    void writeStripe(OrcProto.StripeFooter.Builder builder,\n                     int requiredIndexEntries) throws IOException {\n      super.writeStripe(builder, requiredIndexEntries);\n      stream.flush();\n      recordPosition(rowIndexPosition);\n    }\n    @Override\n    void recordPosition(PositionRecorder recorder) throws IOException {\n      super.recordPosition(recorder);\n      stream.getPosition(recorder);\n    }\n  }\n<fim_suffix>  private static class DoubleTreeWriter extends TreeWriter {\n    private final PositionedOutputStream stream;\n    private final SerializationUtils utils;\n    DoubleTreeWriter(int columnId,\n                     TypeDescription schema,\n                     StreamFactory writer,\n                     boolean nullable) throws IOException {\n      super(columnId, schema, writer, nullable);\n      this.stream = writer.createStream(id,\n          OrcProto.Stream.Kind.DATA);\n      this.utils = new SerializationUtils();\n      recordPosition(rowIndexPosition);\n    }\n    @Override\n    void write(Datum datum) throws IOException {\n      super.write(datum);\n      if (datum != null && datum.isNotNull()) {\n        double val = datum.asFloat8();\n        indexStatistics.updateDouble(val);\n        if (createBloomFilter) {\n          bloomFilter.addDouble(val);\n        }\n        utils.writeDouble(stream, val);\n      }\n    }\n    @Override\n    void writeStripe(OrcProto.StripeFooter.Builder builder,\n                     int requiredIndexEntries) throws IOException {\n      super.writeStripe(builder, requiredIndexEntries);\n      stream.flush();\n      recordPosition(rowIndexPosition);\n    }\n    @Override\n    void recordPosition(PositionRecorder recorder) throws IOException {\n      super.recordPosition(recorder);\n      stream.getPosition(recorder);\n    }\n  }<fim_middle>// class below has no smell\n"}