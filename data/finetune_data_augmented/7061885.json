{"text": "<fim_prefix>/* -*-mode:java; c-basic-offset:2; indent-tabs-mode:nil -*- */\n/*\nCopyright (c) 2000,2001,2002,2003 ymnk, JCraft,Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  1. Redistributions of source code must retain the above copyright notice,\n     this list of conditions and the following disclaimer.\n\n  2. Redistributions in binary form must reproduce the above copyright \n     notice, this list of conditions and the following disclaimer in \n     the documentation and/or other materials provided with the distribution.\n\n  3. The names of the authors may not be used to endorse or promote products\n     derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\nINC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\nOR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/*\n * This program is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\npackage com.jcraft.jzlib;\n\n<fim_suffix>final public class ZStream{\n\n  static final private int MAX_WBITS=15;        // 32K LZ77 window\n  static final private int DEF_WBITS=MAX_WBITS;\n\n  static final private int Z_NO_FLUSH=0;\n  static final private int Z_PARTIAL_FLUSH=1;\n  static final private int Z_SYNC_FLUSH=2;\n  static final private int Z_FULL_FLUSH=3;\n  static final private int Z_FINISH=4;\n\n  static final private int MAX_MEM_LEVEL=9;\n\n  static final private int Z_OK=0;\n  static final private int Z_STREAM_END=1;\n  static final private int Z_NEED_DICT=2;\n  static final private int Z_ERRNO=-1;\n  static final private int Z_STREAM_ERROR=-2;\n  static final private int Z_DATA_ERROR=-3;\n  static final private int Z_MEM_ERROR=-4;\n  static final private int Z_BUF_ERROR=-5;\n  static final private int Z_VERSION_ERROR=-6;\n\n  public byte[] next_in;     // next input byte\n  public int next_in_index;\n  public int avail_in;       // number of bytes available at next_in\n  public long total_in;      // total nb of input bytes read so far\n\n  public byte[] next_out;    // next output byte should be put there\n  public int next_out_index;\n  public int avail_out;      // remaining free space at next_out\n  public long total_out;     // total nb of bytes output so far\n\n  public String msg;\n\n  Deflate dstate; \n  Inflate istate; \n\n  int data_type; // best guess about the data type: ascii or binary\n\n  public long adler;\n  Adler32 _adler=new Adler32();\n\n  public int inflateInit(){\n    return inflateInit(DEF_WBITS);\n  }\n  public int inflateInit(boolean nowrap){\n    return inflateInit(DEF_WBITS, nowrap);\n  }\n  public int inflateInit(int w){\n    return inflateInit(w, false);\n  }\n\n  public int inflateInit(int w, boolean nowrap){\n    istate=new Inflate();\n    return istate.inflateInit(this, nowrap?-w:w);\n  }\n\n  public int inflate(int f){\n    if(istate==null) return Z_STREAM_ERROR;\n    return istate.inflate(this, f);\n  }\n  public int inflateEnd(){\n    if(istate==null) return Z_STREAM_ERROR;\n    int ret=istate.inflateEnd(this);\n    istate = null;\n    return ret;\n  }\n  public int inflateSync(){\n    if(istate == null)\n      return Z_STREAM_ERROR;\n    return istate.inflateSync(this);\n  }\n  public int inflateSetDictionary(byte[] dictionary, int dictLength){\n    if(istate == null)\n      return Z_STREAM_ERROR;\n    return istate.inflateSetDictionary(this, dictionary, dictLength);\n  }\n\n  public int deflateInit(int level){\n    return deflateInit(level, MAX_WBITS);\n  }\n  public int deflateInit(int level, boolean nowrap){\n    return deflateInit(level, MAX_WBITS, nowrap);\n  }\n  public int deflateInit(int level, int bits){\n    return deflateInit(level, bits, false);\n  }\n  public int deflateInit(int level, int bits, boolean nowrap){\n    dstate=new Deflate();\n    return dstate.deflateInit(this, level, nowrap?-bits:bits);\n  }\n  public int deflate(int flush){\n    if(dstate==null){\n      return Z_STREAM_ERROR;\n    }\n    return dstate.deflate(this, flush);\n  }\n  public int deflateEnd(){\n    if(dstate==null) return Z_STREAM_ERROR;\n    int ret=dstate.deflateEnd();\n    dstate=null;\n    return ret;\n  }\n  public int deflateParams(int level, int strategy){\n    if(dstate==null) return Z_STREAM_ERROR;\n    return dstate.deflateParams(this, level, strategy);\n  }\n  public int deflateSetDictionary (byte[] dictionary, int dictLength){\n    if(dstate == null)\n      return Z_STREAM_ERROR;\n    return dstate.deflateSetDictionary(this, dictionary, dictLength);\n  }\n\n  // Flush as much pending output as possible. All deflate() output goes\n  // through this function so some applications may wish to modify it\n  // to avoid allocating a large strm->next_out buffer and copying into it.\n  // (See also read_buf()).\n  void flush_pending(){\n    int len=dstate.pending;\n\n    if(len>avail_out) len=avail_out;\n    if(len==0) return;\n\n    if(dstate.pending_buf.length<=dstate.pending_out ||\n       next_out.length<=next_out_index ||\n       dstate.pending_buf.length<(dstate.pending_out+len) ||\n       next_out.length<(next_out_index+len)){\n      System.out.println(dstate.pending_buf.length+\", \"+dstate.pending_out+\n\t\t\t \", \"+next_out.length+\", \"+next_out_index+\", \"+len);\n      System.out.println(\"avail_out=\"+avail_out);\n    }\n\n    System.arraycopy(dstate.pending_buf, dstate.pending_out,\n\t\t     next_out, next_out_index, len);\n\n    next_out_index+=len;\n    dstate.pending_out+=len;\n    total_out+=len;\n    avail_out-=len;\n    dstate.pending-=len;\n    if(dstate.pending==0){\n      dstate.pending_out=0;\n    }\n  }\n\n  // Read a new buffer from the current input stream, update the adler32\n  // and total number of bytes read.  All deflate() input goes through\n  // this function so some applications may wish to modify it to avoid\n  // allocating a large strm->next_in buffer and copying from it.\n  // (See also flush_pending()).\n  int read_buf(byte[] buf, int start, int size) {\n    int len=avail_in;\n\n    if(len>size) len=size;\n    if(len==0) return 0;\n\n    avail_in-=len;\n\n    if(dstate.noheader==0) {\n      adler=_adler.adler32(adler, next_in, next_in_index, len);\n    }\n    System.arraycopy(next_in, next_in_index, buf, start, len);\n    next_in_index  += len;\n    total_in += len;\n    return len;\n  }\n\n  public void free(){\n    next_in=null;\n    next_out=null;\n    msg=null;\n    _adler=null;\n  }\n}<fim_middle>// class below has no smell\n"}