{"text": "<fim_prefix>/*\n * Copyright (C) 2010 The Guava Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.common.collect.testing;\n\nimport com.google.common.annotations.GwtIncompatible;\nimport com.google.common.collect.testing.DerivedCollectionGenerators.Bound;\nimport com.google.common.collect.testing.DerivedCollectionGenerators.SortedSetSubsetTestSetGenerator;\nimport com.google.common.collect.testing.features.CollectionFeature;\nimport com.google.common.collect.testing.features.Feature;\nimport com.google.common.collect.testing.testers.SortedSetNavigationTester;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport junit.framework.TestSuite;\n\n/**\n * Creates, based on your criteria, a JUnit test suite that exhaustively tests a SortedSet\n * implementation.\n */\n@GwtIncompatible\npublic class SortedSetTestSuiteBuilder<E> extends SetTestSuiteBuilder<E> {\n  public static <E> SortedSetTestSuiteBuilder<E> using(TestSortedSetGenerator<E> generator) {\n    SortedSetTestSuiteBuilder<E> builder = new SortedSetTestSuiteBuilder<E>();\n    builder.usingGenerator(generator);\n    return builder;\n  }\n\n  @Override\n  protected List<Class<? extends AbstractTester>> getTesters() {\n    List<Class<? extends AbstractTester>> testers = Helpers.copyToList(super.getTesters());\n    testers.add(SortedSetNavigationTester.class);\n    return testers;\n  }\n\n  @Override\n  public TestSuite createTestSuite() {\n    if (!getFeatures().contains(CollectionFeature.KNOWN_ORDER)) {\n      List<Feature<?>> features = Helpers.copyToList(getFeatures());\n      features.add(CollectionFeature.KNOWN_ORDER);\n      withFeatures(features);\n    }\n    return super.createTestSuite();\n  }\n\n  @Override\n  protected List<TestSuite> createDerivedSuites(\n      FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>>\n          parentBuilder) {\n    List<TestSuite> derivedSuites = super.createDerivedSuites(parentBuilder);\n\n    if (!parentBuilder.getFeatures().contains(CollectionFeature.SUBSET_VIEW)) {\n      derivedSuites.add(createSubsetSuite(parentBuilder, Bound.NO_BOUND, Bound.EXCLUSIVE));\n      derivedSuites.add(createSubsetSuite(parentBuilder, Bound.INCLUSIVE, Bound.NO_BOUND));\n      derivedSuites.add(createSubsetSuite(parentBuilder, Bound.INCLUSIVE, Bound.EXCLUSIVE));\n    }\n\n    return derivedSuites;\n  }\n\n  /**\n   * Creates a suite whose set has some elements filtered out of view.\n   *\n   * <p>Because the set may be ascending or descending, this test must derive the relative order of\n   * these extreme values rather than relying on their regular sort ordering.\n   */\n<fim_suffix>  final TestSuite createSubsetSuite(\n      final FeatureSpecificTestSuiteBuilder<\n              ?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>>\n          parentBuilder,\n      final Bound from,\n      final Bound to) {\n    final TestSortedSetGenerator<E> delegate =\n        (TestSortedSetGenerator<E>) parentBuilder.getSubjectGenerator().getInnerGenerator();\n\n    List<Feature<?>> features = new ArrayList<>();\n    features.addAll(parentBuilder.getFeatures());\n    features.remove(CollectionFeature.ALLOWS_NULL_VALUES);\n    features.add(CollectionFeature.SUBSET_VIEW);\n\n    return newBuilderUsing(delegate, to, from)\n        .named(parentBuilder.getName() + \" subSet \" + from + \"-\" + to)\n        .withFeatures(features)\n        .suppressing(parentBuilder.getSuppressedTests())\n        .createTestSuite();\n  }\n\n  /** Like using() but overrideable by NavigableSetTestSuiteBuilder. */\n  SortedSetTestSuiteBuilder<E> newBuilderUsing(\n      TestSortedSetGenerator<E> delegate, Bound to, Bound from) {\n    return using(new SortedSetSubsetTestSetGenerator<E>(delegate, to, from));\n  }\n}<fim_middle>// function below has no smell\n"}