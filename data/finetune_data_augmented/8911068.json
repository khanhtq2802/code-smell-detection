{"text": "<fim_prefix>    list.add(present_type);\n    if (present_type)\n      list.add(type.getValue());\n    return list.hashCode();\n  }\n  @Override\n  public int compareTo(PutFileMetadataRequest other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    lastComparison = Boolean.valueOf(isSetFileIds()).compareTo(other.isSetFileIds());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetFileIds()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileIds, other.fileIds);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetMetadata()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetType()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n  }\n  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n  }\n  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder(\"PutFileMetadataRequest(\");\n    boolean first = true;\n    sb.append(\"fileIds:\");\n    if (this.fileIds == null) {\n      sb.append(\"null\");\n    } else {\n      sb.append(this.fileIds);\n    }\n    first = false;\n    if (!first) sb.append(\", \");\n    sb.append(\"metadata:\");\n    if (this.metadata == null) {\n      sb.append(\"null\");\n    } else {\n      org.apache.thrift.TBaseHelper.toString(this.metadata, sb);\n    }\n    first = false;\n    if (isSetType()) {\n      if (!first) sb.append(\", \");\n      sb.append(\"type:\");\n      if (this.type == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.type);\n      }\n      first = false;\n    }\n    sb.append(\")\");\n    return sb.toString();\n  }\n  public void validate() throws org.apache.thrift.TException {\n    // check for required fields\n    if (!isSetFileIds()) {\n      throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'fileIds' is unset! Struct:\" + toString());\n    }\n    if (!isSetMetadata()) {\n      throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'metadata' is unset! Struct:\" + toString());\n    }\n    // check for sub-struct validity\n  }\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    try {\n      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n    try {\n      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private static class PutFileMetadataRequestStandardSchemeFactory implements SchemeFactory {\n    public PutFileMetadataRequestStandardScheme getScheme() {\n      return new PutFileMetadataRequestStandardScheme();\n    }\n  }\n<fim_suffix>  private static class PutFileMetadataRequestStandardScheme extends StandardScheme<PutFileMetadataRequest> {\n    public void read(org.apache.thrift.protocol.TProtocol iprot, PutFileMetadataRequest struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TField schemeField;\n      iprot.readStructBegin();\n      while (true)\n      {\n        schemeField = iprot.readFieldBegin();\n        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n          break;\n        }\n        switch (schemeField.id) {\n          case 1: // FILE_IDS\n            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {\n              {\n                org.apache.thrift.protocol.TList _list848 = iprot.readListBegin();\n                struct.fileIds = new ArrayList<Long>(_list848.size);\n                long _elem849;\n                for (int _i850 = 0; _i850 < _list848.size; ++_i850)\n                {\n                  _elem849 = iprot.readI64();\n                  struct.fileIds.add(_elem849);\n                }\n                iprot.readListEnd();\n              }\n              struct.setFileIdsIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 2: // METADATA\n            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {\n              {\n                org.apache.thrift.protocol.TList _list851 = iprot.readListBegin();\n                struct.metadata = new ArrayList<ByteBuffer>(_list851.size);\n                ByteBuffer _elem852;\n                for (int _i853 = 0; _i853 < _list851.size; ++_i853)\n                {\n                  _elem852 = iprot.readBinary();\n                  struct.metadata.add(_elem852);\n                }\n                iprot.readListEnd();\n              }\n              struct.setMetadataIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 3: // TYPE\n            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {\n              struct.type = org.apache.hadoop.hive.metastore.api.FileMetadataExprType.findByValue(iprot.readI32());\n              struct.setTypeIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          default:\n            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n        }\n        iprot.readFieldEnd();\n      }\n      iprot.readStructEnd();\n      struct.validate();\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot, PutFileMetadataRequest struct) throws org.apache.thrift.TException {\n      struct.validate();\n      oprot.writeStructBegin(STRUCT_DESC);\n      if (struct.fileIds != null) {\n        oprot.writeFieldBegin(FILE_IDS_FIELD_DESC);\n        {\n          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.fileIds.size()));\n          for (long _iter854 : struct.fileIds)\n          {\n            oprot.writeI64(_iter854);\n          }\n          oprot.writeListEnd();\n        }\n        oprot.writeFieldEnd();\n      }\n      if (struct.metadata != null) {\n        oprot.writeFieldBegin(METADATA_FIELD_DESC);\n        {\n          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.metadata.size()));\n          for (ByteBuffer _iter855 : struct.metadata)\n          {\n            oprot.writeBinary(_iter855);\n          }\n          oprot.writeListEnd();\n        }\n        oprot.writeFieldEnd();\n      }\n      if (struct.type != null) {\n        if (struct.isSetType()) {\n          oprot.writeFieldBegin(TYPE_FIELD_DESC);\n          oprot.writeI32(struct.type.getValue());\n          oprot.writeFieldEnd();\n        }\n      }\n      oprot.writeFieldStop();\n      oprot.writeStructEnd();\n    }\n  }<fim_middle>// class below has no smell\n"}