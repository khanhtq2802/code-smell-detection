{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.sshd.server.shell;\n\nimport java.io.FilterOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.EnumSet;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Set;\n\nimport org.apache.sshd.common.channel.PtyMode;\nimport org.apache.sshd.common.util.GenericUtils;\n\n/**\n * Handles the output stream while taking care of the {@link PtyMode} for CR / LF\n * and ECHO settings\n *\n * @author <a href=\"mailto:dev@mina.apache.org\">Apache MINA SSHD Project</a>\n */\n<fim_suffix>public class TtyFilterOutputStream extends FilterOutputStream {\n    public static final Set<PtyMode> OUTPUT_OPTIONS =\n        Collections.unmodifiableSet(EnumSet.of(PtyMode.ECHO, PtyMode.INLCR, PtyMode.ICRNL, PtyMode.IGNCR));\n\n    private final Set<PtyMode> ttyOptions;\n    private final TtyFilterInputStream echo;\n\n    public TtyFilterOutputStream(OutputStream out, TtyFilterInputStream echo, Map<PtyMode, ?> modes) {\n        this(out, echo, PtyMode.resolveEnabledOptions(modes, OUTPUT_OPTIONS));\n    }\n\n    public TtyFilterOutputStream(OutputStream out, TtyFilterInputStream echo, Collection<PtyMode> ttyOptions) {\n        super(out);\n        // we create a copy of the options so as to avoid concurrent modifications\n        this.ttyOptions = GenericUtils.of(ttyOptions);    // TODO validate non-conflicting options\n        this.echo = this.ttyOptions.contains(PtyMode.ECHO) ? Objects.requireNonNull(echo, \"No echo stream\") : echo;\n    }\n\n    @Override\n    public void write(int c) throws IOException {\n        if (c == '\\r') {\n            handleCR();\n        } else if (c == '\\n') {\n            handleLF();\n        } else {\n            writeRawOutput(c);\n        }\n    }\n\n    protected void handleCR() throws IOException {\n        if (ttyOptions.contains(PtyMode.ICRNL)) {\n            writeRawOutput('\\n');   // Map CR to NL on input\n        } else if (ttyOptions.contains(PtyMode.IGNCR)) {\n            // Ignore CR on input\n            return;\n        } else {\n            writeRawOutput('\\r');\n        }\n    }\n\n    protected void handleLF() throws IOException {\n        if (ttyOptions.contains(PtyMode.INLCR)) {\n            writeRawOutput('\\r');   // Map NL into CR on input\n        } else {\n            writeRawOutput('\\n');\n        }\n    }\n\n    protected void writeRawOutput(int c) throws IOException {\n        this.out.write(c);\n        if (ttyOptions.contains(PtyMode.ECHO)) {\n            echo.write(c);\n        }\n    }\n\n    @Override\n    public void write(byte[] b, int off, int len) throws IOException {\n        if (len == 1) {\n            write(b[off] & 0xFF);\n            return;\n        }\n\n        int lastPos = 0;\n        int maxPos = off + len;\n        for (int curPos = off; curPos < maxPos; curPos++) {\n            int c = b[curPos] & 0xFF;\n            if ((c == '\\r') || (c == '\\n')) {\n                if (lastPos < curPos) { // No CR or LF in this segment\n                    writeRawOutput(b, lastPos, curPos - lastPos);\n                }\n\n                lastPos = curPos + 1;   // prepare for next character\n                write(c);\n            }\n        }\n\n        if (lastPos < maxPos) { // No CR or LF in this segment\n            writeRawOutput(b, lastPos, maxPos - lastPos);\n        }\n    }\n\n    protected void writeRawOutput(byte[] b, int off, int len) throws IOException {\n        this.out.write(b, off, len);\n        if (ttyOptions.contains(PtyMode.ECHO)) {\n            echo.write(b, off, len);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}