{"text": "<fim_prefix>      boolean present_authzToken = true && (isSetAuthzToken());\n      list.add(present_authzToken);\n      if (present_authzToken)\n        list.add(authzToken);\n      boolean present_gatewayId = true && (isSetGatewayId());\n      list.add(present_gatewayId);\n      if (present_gatewayId)\n        list.add(gatewayId);\n      boolean present_applicationModule = true && (isSetApplicationModule());\n      list.add(present_applicationModule);\n      if (present_applicationModule)\n        list.add(applicationModule);\n      return list.hashCode();\n    }\n    @Override\n    public int compareTo(registerApplicationModule_args other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      lastComparison = Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetAuthzToken()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetGatewayId()).compareTo(other.isSetGatewayId());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetGatewayId()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gatewayId, other.gatewayId);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetApplicationModule()).compareTo(other.isSetApplicationModule());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetApplicationModule()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationModule, other.applicationModule);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n    }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"registerApplicationModule_args(\");\n      boolean first = true;\n      sb.append(\"authzToken:\");\n      if (this.authzToken == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.authzToken);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"gatewayId:\");\n      if (this.gatewayId == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.gatewayId);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"applicationModule:\");\n      if (this.applicationModule == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.applicationModule);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      if (authzToken == null) {\n        throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'authzToken' was not present! Struct: \" + toString());\n      }\n      if (gatewayId == null) {\n        throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'gatewayId' was not present! Struct: \" + toString());\n      }\n      if (applicationModule == null) {\n        throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'applicationModule' was not present! Struct: \" + toString());\n      }\n      // check for sub-struct validity\n      if (authzToken != null) {\n        authzToken.validate();\n      }\n      if (applicationModule != null) {\n        applicationModule.validate();\n      }\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class registerApplicationModule_argsStandardSchemeFactory implements SchemeFactory {\n      public registerApplicationModule_argsStandardScheme getScheme() {\n        return new registerApplicationModule_argsStandardScheme();\n      }\n    }\n    private static class registerApplicationModule_argsStandardScheme extends StandardScheme<registerApplicationModule_args> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, registerApplicationModule_args struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 1: // AUTHZ_TOKEN\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();\n                struct.authzToken.read(iprot);\n                struct.setAuthzTokenIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 2: // GATEWAY_ID\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n                struct.gatewayId = iprot.readString();\n                struct.setGatewayIdIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 3: // APPLICATION_MODULE\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();\n                struct.applicationModule.read(iprot);\n                struct.setApplicationModuleIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, registerApplicationModule_args struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.authzToken != null) {\n          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);\n          struct.authzToken.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.gatewayId != null) {\n          oprot.writeFieldBegin(GATEWAY_ID_FIELD_DESC);\n          oprot.writeString(struct.gatewayId);\n          oprot.writeFieldEnd();\n        }\n        if (struct.applicationModule != null) {\n          oprot.writeFieldBegin(APPLICATION_MODULE_FIELD_DESC);\n          struct.applicationModule.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n    private static class registerApplicationModule_argsTupleSchemeFactory implements SchemeFactory {\n      public registerApplicationModule_argsTupleScheme getScheme() {\n        return new registerApplicationModule_argsTupleScheme();\n      }\n    }\n    private static class registerApplicationModule_argsTupleScheme extends TupleScheme<registerApplicationModule_args> {\n<fim_suffix>      @Override\n      public void write(org.apache.thrift.protocol.TProtocol prot, registerApplicationModule_args struct) throws org.apache.thrift.TException {\n        TTupleProtocol oprot = (TTupleProtocol) prot;\n        struct.authzToken.write(oprot);\n        oprot.writeString(struct.gatewayId);\n        struct.applicationModule.write(oprot);\n      }<fim_middle>// function below has no smell\n"}