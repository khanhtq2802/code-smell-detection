{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sis.internal.jaxb.metadata;\n\nimport javax.xml.bind.annotation.XmlElementRef;\nimport org.opengis.metadata.quality.PositionalAccuracy;\nimport org.apache.sis.metadata.iso.quality.AbstractPositionalAccuracy;\nimport org.apache.sis.internal.jaxb.gco.PropertyType;\n\n\n/**\n * JAXB adapter mapping implementing class to the GeoAPI interface. See\n * package documentation for more information about JAXB and interface.\n *\n * @author  Martin Desruisseaux (Geomatys)\n * @version 0.6\n * @since   0.6\n * @module\n */\n<fim_suffix>public final class DQ_PositionalAccuracy extends PropertyType<DQ_PositionalAccuracy, PositionalAccuracy> {\n    /**\n     * Empty constructor for JAXB only.\n     */\n    public DQ_PositionalAccuracy() {\n    }\n\n    /**\n     * Returns the GeoAPI interface which is bound by this adapter.\n     * This method is indirectly invoked by the private constructor\n     * below, so it shall not depend on the state of this object.\n     *\n     * @return {@code PositionalAccuracy.class}\n     */\n    @Override\n    protected Class<PositionalAccuracy> getBoundType() {\n        return PositionalAccuracy.class;\n    }\n\n    /**\n     * Constructor for the {@link #wrap} method only.\n     */\n    private DQ_PositionalAccuracy(final PositionalAccuracy metadata) {\n        super(metadata);\n    }\n\n    /**\n     * Invoked by {@link PropertyType} at marshalling time for wrapping the given metadata value\n     * in a {@code <mdq:DQ_PositionalAccuracy>} XML element.\n     *\n     * @param  metadata  the metadata element to marshall.\n     * @return a {@code PropertyType} wrapping the given the metadata element.\n     */\n    @Override\n    protected DQ_PositionalAccuracy wrap(final PositionalAccuracy metadata) {\n        return new DQ_PositionalAccuracy(metadata);\n    }\n\n    /**\n     * Invoked by JAXB at marshalling time for getting the actual metadata to write\n     * inside the {@code <mdq:DQ_PositionalAccuracy>} XML element.\n     * This is the value or a copy of the value given in argument to the {@code wrap} method.\n     *\n     * @return the metadata to be marshalled.\n     */\n    @XmlElementRef\n    public AbstractPositionalAccuracy getElement() {\n        return AbstractPositionalAccuracy.castOrCopy(metadata);\n    }\n\n    /**\n     * Invoked by JAXB at unmarshalling time for storing the result temporarily.\n     *\n     * @param  metadata  the unmarshalled metadata.\n     */\n    public void setElement(final AbstractPositionalAccuracy metadata) {\n        this.metadata = metadata;\n    }\n}<fim_middle>// class below has no smell\n"}