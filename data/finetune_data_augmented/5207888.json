{"text": "<fim_prefix>        if (currentBucketDir != null && currentBucketDir.isDirectory()) {\n            if (isBucketNameChanged) {\n                logger.debug(\"Detected bucket name change from {} to {}, moving it.\", currentBucketDirName, bucketDirName);\n                if (!currentBucketDir.renameTo(bucketDir)) {\n                    throw new FlowPersistenceException(format(\"Failed to move existing bucket %s to %s.\", currentBucketDir, bucketDir));\n                }\n            }\n        } else {\n            if (!bucketDir.mkdirs()) {\n                throw new FlowPersistenceException(format(\"Failed to create new bucket dir %s.\", bucketDir));\n            }\n        }\n        try {\n            if (currentFlowSnapshotFilename.isPresent() && !flowSnapshotFilename.equals(currentFlowSnapshotFilename.get())) {\n                // Delete old file if flow name has been changed.\n                final File latestFlowSnapshotFile = new File(bucketDir, currentFlowSnapshotFilename.get());\n                logger.debug(\"Detected flow name change from {} to {}, deleting the old snapshot file.\",\n                        currentFlowSnapshotFilename.get(), flowSnapshotFilename);\n                latestFlowSnapshotFile.delete();\n            }\n            // Save the content.\n            try (final OutputStream os = new FileOutputStream(flowSnippetFile)) {\n                os.write(content);\n                os.flush();\n            }\n            // Write a bucket file.\n            flowMetaData.saveBucket(bucket, bucketDir);\n            // Create a Git Commit.\n            flowMetaData.commit(context.getAuthor(), context.getComments(), bucket, flowPointer);\n        } catch (IOException|GitAPIException e) {\n            throw new FlowPersistenceException(\"Failed to persist flow.\", e);\n        }\n        // TODO: What if user rebased commits? Version number to Commit ID mapping will be broken.\n    }\n    @Override\n    public byte[] getFlowContent(String bucketId, String flowId, int version) throws FlowPersistenceException {\n        final Bucket bucket = getBucketOrFail(bucketId);\n        final Flow flow = getFlowOrFail(bucket, flowId);\n        if (!flow.hasVersion(version)) {\n            throw new FlowPersistenceException(format(\"Flow ID %s version %d was not found in bucket %s:%s.\",\n                    flowId, version, bucket.getBucketDirName(), bucketId));\n        }\n        final Flow.FlowPointer flowPointer = flow.getFlowVersion(version);\n        try {\n            return flowMetaData.getContent(flowPointer.getObjectId());\n        } catch (IOException e) {\n            throw new FlowPersistenceException(format(\"Failed to get content of Flow ID %s version %d in bucket %s:%s due to %s.\",\n                    flowId, version, bucket.getBucketDirName(), bucketId, e), e);\n        }\n    }\n    // TODO: Need to add userId argument?\n    @Override\n    public void deleteAllFlowContent(String bucketId, String flowId) throws FlowPersistenceException {\n        final Bucket bucket = getBucketOrFail(bucketId);\n        final Optional<Flow> flowOpt = bucket.getFlow(flowId);\n        if (!flowOpt.isPresent()) {\n            logger.debug(format(\"Tried deleting all versions, but the Flow ID %s was not found in bucket %s:%s.\",\n                    flowId, bucket.getBucketDirName(), bucket.getBucketId()));\n            return;\n        }\n        final Flow flow = flowOpt.get();\n        final Optional<Integer> latestVersionOpt = flow.getLatestVersion();\n        if (!latestVersionOpt.isPresent()) {\n            throw new IllegalStateException(\"Flow version is not added yet, can not be deleted.\");\n        }\n        final Integer latestVersion = latestVersionOpt.get();\n        final Flow.FlowPointer flowPointer = flow.getFlowVersion(latestVersion);\n        // Delete the flow snapshot.\n        final File bucketDir = new File(flowStorageDir, bucket.getBucketDirName());\n        final File flowSnapshotFile = new File(bucketDir, flowPointer.getFileName());\n        if (flowSnapshotFile.exists()) {\n            if (!flowSnapshotFile.delete()) {\n                throw new FlowPersistenceException(format(\"Failed to delete flow content for %s:%s in bucket %s:%s\",\n                        flowPointer.getFileName(), flowId, bucket.getBucketDirName(), bucketId));\n            }\n        }\n        bucket.removeFlow(flowId);\n        try {\n            if (bucket.isEmpty()) {\n                // delete bucket dir if this is the last flow.\n                FileUtils.deleteFile(bucketDir, true);\n            } else {\n                // Write a bucket file.\n                flowMetaData.saveBucket(bucket, bucketDir);\n            }\n            // Create a Git Commit.\n            final String commitMessage = format(\"Deleted flow %s:%s in bucket %s:%s.\",\n                    flowPointer.getFileName(), flowId, bucket.getBucketDirName(), bucketId);\n            flowMetaData.commit(null, commitMessage, bucket, null);\n        } catch (IOException|GitAPIException e) {\n            throw new FlowPersistenceException(format(\"Failed to delete flow %s:%s in bucket %s:%s due to %s\",\n                    flowPointer.getFileName(), flowId, bucket.getBucketDirName(), bucketId, e), e);\n        }\n    }\n    private Bucket getBucketOrFail(String bucketId) throws FlowPersistenceException {\n        final Optional<Bucket> bucketOpt = flowMetaData.getBucket(bucketId);\n        if (!bucketOpt.isPresent()) {\n            throw new FlowPersistenceException(format(\"Bucket ID %s was not found.\", bucketId));\n        }\n        return bucketOpt.get();\n    }\n    private Flow getFlowOrFail(Bucket bucket, String flowId) throws FlowPersistenceException {\n        final Optional<Flow> flowOpt = bucket.getFlow(flowId);\n        if (!flowOpt.isPresent()) {\n            throw new FlowPersistenceException(format(\"Flow ID %s was not found in bucket %s:%s.\",\n                    flowId, bucket.getBucketDirName(), bucket.getBucketId()));\n        }\n        return flowOpt.get();\n    }\n    @Override\n    public void deleteFlowContent(String bucketId, String flowId, int version) throws FlowPersistenceException {\n        // TODO: Do nothing? This signature is not used. Actually there's nothing to do to the old versions as those exist in old commits even if this method is called.\n    }\n    @Override\n    public List<BucketMetadata> getMetadata() {\n        final Map<String, Bucket> gitBuckets = flowMetaData.getBuckets();\n        if (gitBuckets == null || gitBuckets.isEmpty()) {\n            return Collections.emptyList();\n        }\n        final List<BucketMetadata> bucketMetadataList = new ArrayList<>();\n        for (Map.Entry<String,Bucket> bucketEntry : gitBuckets.entrySet()) {\n            final String bucketId = bucketEntry.getKey();\n            final Bucket gitBucket = bucketEntry.getValue();\n            final BucketMetadata bucketMetadata = new BucketMetadata();\n            bucketMetadata.setIdentifier(bucketId);\n            bucketMetadata.setName(gitBucket.getBucketDirName());\n            bucketMetadata.setFlowMetadata(createFlowMetadata(gitBucket));\n            bucketMetadataList.add(bucketMetadata);\n        }\n        return bucketMetadataList;\n    }\n    private List<FlowMetadata> createFlowMetadata(final Bucket bucket) {\n        if (bucket.isEmpty()) {\n            return Collections.emptyList();\n        }\n        final List<FlowMetadata> flowMetadataList = new ArrayList<>();\n        for (Map.Entry<String, Flow> flowEntry : bucket.getFlows().entrySet()) {\n            final String flowId = flowEntry.getKey();\n            final Flow flow = flowEntry.getValue();\n            final Optional<Integer> latestVersion = flow.getLatestVersion();\n            if (latestVersion.isPresent()) {\n                final Flow.FlowPointer latestFlowPointer = flow.getFlowVersion(latestVersion.get());\n                String flowName = latestFlowPointer.getFlowName();\n                if (flowName == null) {\n                    flowName = latestFlowPointer.getFileName();\n                    if (flowName.endsWith(\".snapshot\")) {\n                        flowName = flowName.substring(0, flowName.lastIndexOf(\".\"));\n                    }\n                }\n                final FlowMetadata flowMetadata = new FlowMetadata();\n                flowMetadata.setIdentifier(flowId);\n                flowMetadata.setName(flowName);\n                flowMetadata.setDescription(latestFlowPointer.getFlowDescription());\n                flowMetadata.setFlowSnapshotMetadata(createFlowSnapshotMetdata(flow));\n                flowMetadataList.add(flowMetadata);\n            }\n        }\n        return flowMetadataList;\n    }\n<fim_suffix>    private List<FlowSnapshotMetadata> createFlowSnapshotMetdata(final Flow flow) {\n        final List<FlowSnapshotMetadata> flowSnapshotMetadataList = new ArrayList<>();\n        final Map<Integer, Flow.FlowPointer> versions = flow.getVersions();\n        for (Map.Entry<Integer, Flow.FlowPointer> entry : versions.entrySet()) {\n            final Integer version = entry.getKey();\n            final Flow.FlowPointer flowPointer = entry.getValue();\n            final FlowSnapshotMetadata snapshotMetadata = new FlowSnapshotMetadata();\n            snapshotMetadata.setVersion(version);\n            snapshotMetadata.setAuthor(flowPointer.getAuthor());\n            snapshotMetadata.setComments(flowPointer.getComment());\n            snapshotMetadata.setCreated(flowPointer.getCreated());\n            flowSnapshotMetadataList.add(snapshotMetadata);\n        }\n        return flowSnapshotMetadataList;\n    }<fim_middle>// function below is feature envy\n"}