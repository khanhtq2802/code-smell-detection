{"text": "<fim_prefix>/**\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n *\n */\npackage org.apache.kerby.kerberos.kerb.response;\n\nimport org.apache.kerby.kerberos.kerb.KrbErrorCode;\nimport org.apache.kerby.kerberos.kerb.KrbException;\nimport org.apache.kerby.kerberos.kerb.common.EncryptionUtil;\nimport org.apache.kerby.kerberos.kerb.request.ApRequest;\nimport org.apache.kerby.kerberos.kerb.type.ap.ApRep;\nimport org.apache.kerby.kerberos.kerb.type.ap.ApReq;\nimport org.apache.kerby.kerberos.kerb.type.ap.Authenticator;\nimport org.apache.kerby.kerberos.kerb.type.ap.EncAPRepPart;\nimport org.apache.kerby.kerberos.kerb.type.base.EncryptedData;\nimport org.apache.kerby.kerberos.kerb.type.base.EncryptionKey;\nimport org.apache.kerby.kerberos.kerb.type.base.KeyUsage;\n\n/**\n * A wrapper for ApRep request.\n */\npublic class ApResponse {\n    private ApReq apReq;\n    private ApRep apRep;\n    EncryptionKey encryptionKey;\n\n    public ApResponse(ApReq apReq, EncryptionKey encryptionKey) {\n        this.apReq = apReq;\n        this.encryptionKey = encryptionKey;\n    }\n\n    public ApResponse(ApReq apReq) {\n        this.apReq = apReq;\n    }\n\n    public ApRep getApRep() throws KrbException {\n        if (encryptionKey != null) {\n            ApRequest.validate(encryptionKey, apReq);\n        }\n\n        if (apRep == null) {\n            apRep = makeApRep();\n        }\n        return apRep;\n    }\n\n    public void setApRep(ApRep apRep) {\n        this.apRep = apRep;\n    }\n\n    /*\n     *  The KRB_AP_REP message contains the Kerberos protocol version number,\n     *  the message type, and an encrypted time-stamp.\n     */\n    private ApRep makeApRep() throws KrbException {\n\n        ApRep apRep = new ApRep();\n        EncAPRepPart encAPRepPart = new EncAPRepPart();\n\n        Authenticator auth = apReq.getAuthenticator();\n        // This field contains the current time on the client's host.\n        encAPRepPart.setCtime(auth.getCtime());\n        // This field contains the microsecond part of the client's timestamp.\n        encAPRepPart.setCusec(auth.getCusec());\n        encAPRepPart.setSubkey(auth.getSubKey());\n        encAPRepPart.setSeqNumber(0);\n        apRep.setEncRepPart(encAPRepPart);\n        EncryptedData encPart = EncryptionUtil.seal(encAPRepPart, auth.getSubKey(), KeyUsage.AP_REP_ENCPART);\n        apRep.setEncryptedEncPart(encPart);\n\n        return apRep;\n    }\n\n    /**\n     * Validation for KRB_AP_REP message\n     * @param encKey key used to encrypt encrypted part of KRB_AP_REP message\n     * @param apRep KRB_AP_REP message received\n     * @param apReqSent the KRB_AP_REQ message that caused the KRB_AP_REP message from server\n     * @throws KrbException\n     */\n<fim_suffix>    public static void validate(EncryptionKey encKey, ApRep apRep, ApReq apReqSent) throws KrbException {\n        EncAPRepPart encPart = EncryptionUtil.unseal(apRep.getEncryptedEncPart(),\n                encKey, KeyUsage.AP_REP_ENCPART, EncAPRepPart.class);\n        apRep.setEncRepPart(encPart);\n        if (apReqSent != null) {\n            Authenticator auth = apReqSent.getAuthenticator();\n            if (!encPart.getCtime().equals(auth.getCtime())\n                    || encPart.getCusec() != auth.getCusec()) {\n                throw new KrbException(KrbErrorCode.KRB_AP_ERR_MUT_FAIL);\n            }\n        }\n    }\n}<fim_middle>// function below has no smell\n"}