{"text": "<fim_prefix>               | ((long) (0xff & buf[position + 4]) << 32) | ((long) (buf[position + 5]) << 40);\n    }\n    /**\n     * Return 48-bit signed long from buffer. (big-endian)\n     * \n     * @see mysql-5.6.10/include/myisampack.h - mi_sint6korr\n     */\n    public final long getBeLong48(final int pos) {\n        final int position = origin + pos;\n        if (pos + 5 >= limit || pos < 0) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                            + (pos < 0 ? pos : (pos + 5)));\n        byte[] buf = buffer;\n        return ((long) (0xff & buf[position + 5])) | ((long) (0xff & buf[position + 4]) << 8)\n               | ((long) (0xff & buf[position + 3]) << 16) | ((long) (0xff & buf[position + 2]) << 24)\n               | ((long) (0xff & buf[position + 1]) << 32) | ((long) (buf[position]) << 40);\n    }\n    /**\n     * Return next 48-bit signed long from buffer. (little-endian)\n     * \n     * @see mysql-5.1.60/include/my_global.h - sint6korr\n     */\n    public final long getLong48() {\n        if (position + 5 >= origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                               + (position - origin + 5));\n        byte[] buf = buffer;\n        return ((long) (0xff & buf[position++])) | ((long) (0xff & buf[position++]) << 8)\n               | ((long) (0xff & buf[position++]) << 16) | ((long) (0xff & buf[position++]) << 24)\n               | ((long) (0xff & buf[position++]) << 32) | ((long) (buf[position++]) << 40);\n    }\n    /**\n     * Return next 48-bit signed long from buffer. (Big-endian)\n     * \n     * @see mysql-5.6.10/include/myisampack.h - mi_sint6korr\n     */\n    public final long getBeLong48() {\n        if (position + 5 >= origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                               + (position - origin + 5));\n        byte[] buf = buffer;\n        return ((long) (buf[position++]) << 40) | ((long) (0xff & buf[position++]) << 32)\n               | ((long) (0xff & buf[position++]) << 24) | ((long) (0xff & buf[position++]) << 16)\n               | ((long) (0xff & buf[position++]) << 8) | ((long) (0xff & buf[position++]));\n    }\n    /**\n     * Return 48-bit unsigned long from buffer. (little-endian)\n     * \n     * @see mysql-5.1.60/include/my_global.h - uint6korr\n     */\n    public final long getUlong48(final int pos) {\n        final int position = origin + pos;\n        if (pos + 5 >= limit || pos < 0) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                            + (pos < 0 ? pos : (pos + 5)));\n        byte[] buf = buffer;\n        return ((long) (0xff & buf[position])) | ((long) (0xff & buf[position + 1]) << 8)\n               | ((long) (0xff & buf[position + 2]) << 16) | ((long) (0xff & buf[position + 3]) << 24)\n               | ((long) (0xff & buf[position + 4]) << 32) | ((long) (0xff & buf[position + 5]) << 40);\n    }\n    /**\n     * Return 48-bit unsigned long from buffer. (big-endian)\n     * \n     * @see mysql-5.6.10/include/myisampack.h - mi_uint6korr\n     */\n    public final long getBeUlong48(final int pos) {\n        final int position = origin + pos;\n        if (pos + 5 >= limit || pos < 0) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                            + (pos < 0 ? pos : (pos + 5)));\n        byte[] buf = buffer;\n        return ((long) (0xff & buf[position + 5])) | ((long) (0xff & buf[position + 4]) << 8)\n               | ((long) (0xff & buf[position + 3]) << 16) | ((long) (0xff & buf[position + 2]) << 24)\n               | ((long) (0xff & buf[position + 1]) << 32) | ((long) (0xff & buf[position]) << 40);\n    }\n    /**\n     * Return next 48-bit unsigned long from buffer. (little-endian)\n     * \n     * @see mysql-5.1.60/include/my_global.h - uint6korr\n     */\n    public final long getUlong48() {\n        if (position + 5 >= origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                               + (position - origin + 5));\n        byte[] buf = buffer;\n        return ((long) (0xff & buf[position++])) | ((long) (0xff & buf[position++]) << 8)\n               | ((long) (0xff & buf[position++]) << 16) | ((long) (0xff & buf[position++]) << 24)\n               | ((long) (0xff & buf[position++]) << 32) | ((long) (0xff & buf[position++]) << 40);\n    }\n    /**\n     * Return next 48-bit unsigned long from buffer. (big-endian)\n     * \n     * @see mysql-5.6.10/include/myisampack.h - mi_uint6korr\n     */\n    public final long getBeUlong48() {\n        if (position + 5 >= origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                               + (position - origin + 5));\n        byte[] buf = buffer;\n        return ((long) (0xff & buf[position++]) << 40) | ((long) (0xff & buf[position++]) << 32)\n               | ((long) (0xff & buf[position++]) << 24) | ((long) (0xff & buf[position++]) << 16)\n               | ((long) (0xff & buf[position++]) << 8) | ((long) (0xff & buf[position++]));\n    }\n    /**\n     * Return 56-bit unsigned int from buffer. (little-endian)\n     */\n    public final long getUlong56(final int pos) {\n        final int position = origin + pos;\n        if (pos + 6 >= limit || pos < 0) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                            + (pos < 0 ? pos : (pos + 6)));\n        byte[] buf = buffer;\n        return ((long) (0xff & buf[position])) | ((long) (0xff & buf[position + 1]) << 8)\n               | ((long) (0xff & buf[position + 2]) << 16) | ((long) (0xff & buf[position + 3]) << 24)\n               | ((long) (0xff & buf[position + 4]) << 32) | ((long) (0xff & buf[position + 5]) << 40)\n               | ((long) (0xff & buf[position + 6]) << 48);\n    }\n    /**\n     * Return next 56-bit unsigned int from buffer. (little-endian)\n     */\n<fim_suffix>    public final long getUlong56() {\n        if (position + 6 >= origin + limit) throw new IllegalArgumentException(\"limit excceed: \"\n                                                                               + (position - origin + 6));\n        byte[] buf = buffer;\n        return ((long) (0xff & buf[position++])) | ((long) (0xff & buf[position++]) << 8)\n               | ((long) (0xff & buf[position++]) << 16) | ((long) (0xff & buf[position++]) << 24)\n               | ((long) (0xff & buf[position++]) << 32) | ((long) (0xff & buf[position++]) << 40)\n               | ((long) (0xff & buf[position++]) << 48);\n    }<fim_middle>// function below has no smell\n"}