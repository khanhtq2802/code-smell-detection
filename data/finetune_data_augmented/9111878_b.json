{"text": "<fim_prefix>import org.eclipse.swt.layout.FormLayout;\nimport org.eclipse.swt.widgets.Canvas;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Control;\nimport org.eclipse.swt.widgets.Display;\nimport org.eclipse.swt.widgets.Event;\nimport org.eclipse.swt.widgets.Listener;\nimport org.eclipse.ui.forms.FormColors;\nimport org.eclipse.ui.forms.widgets.FormToolkit;\npublic class TabbedPropertyList extends Canvas implements IPropertyList\n{\n\tprivate static final ListElement[] ELEMENTS_EMPTY = new ListElement[0];\n\tprotected static final int NONE = -1;\n\tprotected static final int INDENT = 7;\n\tprivate boolean focus = false;\n\tprivate ListElement[] elements;\n\tprivate int selectedElementIndex = NONE;\n\tprivate int topVisibleIndex = NONE;\n\tprivate int bottomVisibleIndex = NONE;\n\tprivate TopNavigationElement topNavigationElement;\n\tprivate BottomNavigationElement bottomNavigationElement;\n\tprivate int widestLabelIndex = NONE;\n\tprivate int tabsThatFitInComposite = NONE;\n\tprivate Color widgetForeground;\n\tprivate Color widgetBackground;\n\tprivate Color widgetNormalShadow;\n\tprivate Color widgetDarkShadow;\n\tprivate Color listBackground;\n\tprivate Color hoverGradientStart;\n\tprivate Color hoverGradientEnd;\n\tprivate Color defaultGradientStart;\n\tprivate Color defaultGradientEnd;\n\tprivate Color indentedDefaultBackground;\n\tprivate Color indentedHoverBackground;\n\tprivate Color navigationElementShadowStroke;\n\tprivate Color bottomNavigationElementShadowStroke1;\n\tprivate Color bottomNavigationElementShadowStroke2;\n\tprivate GC textGc;\n\tprivate FormToolkit factory;\n<fim_suffix>\tpublic class ListElement extends Canvas\n\t{\n\t\tprivate Tab tab;\n\t\tprivate int index;\n\t\tprivate boolean selected;\n\t\tprivate boolean hover;\n\t\tpublic ListElement( Composite parent, final Tab tab, int index )\n\t\t{\n\t\t\tsuper( parent, SWT.NO_FOCUS );\n\t\t\tthis.tab = tab;\n\t\t\thover = false;\n\t\t\tselected = false;\n\t\t\tthis.index = index;\n\t\t\taddPaintListener( new PaintListener( ) {\n\t\t\t\tpublic void paintControl( PaintEvent e )\n\t\t\t\t{\n\t\t\t\t\tpaint( e );\n\t\t\t\t}\n\t\t\t} );\n\t\t\taddMouseListener( new MouseAdapter( ) {\n\t\t\t\tpublic void mouseDown( MouseEvent e )\n\t\t\t\t{\n\t\t\t\t\tif ( !selected )\n\t\t\t\t\t{\n\t\t\t\t\t\tselect( getIndex( ListElement.this ), true );\n\t\t\t\t\t}\n\t\t\t\t\tComposite tabbedPropertyComposite = getParent( );\n\t\t\t\t\tControl[] children = tabbedPropertyComposite.getParent( )\n\t\t\t\t\t\t\t.getTabList( );\n\t\t\t\t\tif ( children != null && children.length > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tfor ( int i = 0; i < children.length; i++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( children[i] == TabbedPropertyList.this )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ( children[i].setFocus( ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfocus = false;\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t\taddMouseMoveListener( new MouseMoveListener( ) {\n\t\t\t\tpublic void mouseMove( MouseEvent e )\n\t\t\t\t{\n\t\t\t\t\tif ( !hover )\n\t\t\t\t\t{\n\t\t\t\t\t\thover = true;\n\t\t\t\t\t\tredraw( );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t\taddMouseTrackListener( new MouseTrackAdapter( ) {\n\t\t\t\tpublic void mouseExit( MouseEvent e )\n\t\t\t\t{\n\t\t\t\t\thover = false;\n\t\t\t\t\tredraw( );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t\tpublic void setSelected( boolean selected )\n\t\t{\n\t\t\tthis.selected = selected;\n\t\t\tredraw( );\n\t\t}\n\t\t/**\n\t\t * Draws elements and collects element areas.\n\t\t */\n\t\tprivate void paint( PaintEvent e )\n\t\t{\n\t\t\t/*\n\t\t\t * draw the top two lines of the tab, same for selected, hover and\n\t\t\t * default\n\t\t\t */\n\t\t\tRectangle bounds = getBounds( );\n\t\t\te.gc.setForeground( widgetNormalShadow );\n\t\t\te.gc.drawLine( 0, 0, bounds.width - 1, 0 );\n\t\t\te.gc.setForeground( listBackground );\n\t\t\te.gc.drawLine( 0, 1, bounds.width - 1, 1 );\n\t\t\t/* draw the fill in the tab */\n\t\t\tif ( selected )\n\t\t\t{\n\t\t\t\te.gc.setBackground( listBackground );\n\t\t\t\te.gc.fillRectangle( 0, 2, bounds.width, bounds.height - 1 );\n\t\t\t}\n\t\t\telse if ( hover && tab.isIndented( ) )\n\t\t\t{\n\t\t\t\te.gc.setBackground( indentedHoverBackground );\n\t\t\t\te.gc.fillRectangle( 0, 2, bounds.width - 1, bounds.height - 1 );\n\t\t\t}\n\t\t\telse if ( hover )\n\t\t\t{\n\t\t\t\te.gc.setForeground( hoverGradientStart );\n\t\t\t\te.gc.setBackground( hoverGradientEnd );\n\t\t\t\te.gc.fillGradientRectangle( 0,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tbounds.width - 1,\n\t\t\t\t\t\tbounds.height - 1,\n\t\t\t\t\t\ttrue );\n\t\t\t}\n\t\t\telse if ( tab.isIndented( ) )\n\t\t\t{\n\t\t\t\te.gc.setBackground( indentedDefaultBackground );\n\t\t\t\te.gc.fillRectangle( 0, 2, bounds.width - 1, bounds.height - 1 );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\te.gc.setForeground( defaultGradientStart );\n\t\t\t\te.gc.setBackground( defaultGradientEnd );\n\t\t\t\te.gc.fillGradientRectangle( 0,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tbounds.width - 1,\n\t\t\t\t\t\tbounds.height - 1,\n\t\t\t\t\t\ttrue );\n\t\t\t}\n\t\t\tif ( !selected )\n\t\t\t{\n\t\t\t\te.gc.setForeground( widgetNormalShadow );\n\t\t\t\te.gc.drawLine( bounds.width - 1,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tbounds.width - 1,\n\t\t\t\t\t\tbounds.height + 1 );\n\t\t\t}\n\t\t\tint textIndent = INDENT;\n\t\t\tFontMetrics fm = e.gc.getFontMetrics( );\n\t\t\tint height = fm.getHeight( );\n\t\t\tint textMiddle = ( bounds.height - height ) / 2;\n\t\t\tif ( selected\n\t\t\t\t\t&& tab.getImage( ) != null\n\t\t\t\t\t&& !tab.getImage( ).isDisposed( ) )\n\t\t\t{\n\t\t\t\t/* draw the icon for the selected tab */\n\t\t\t\tif ( tab.isIndented( ) )\n\t\t\t\t{\n\t\t\t\t\ttextIndent = textIndent + INDENT;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttextIndent = textIndent - 3;\n\t\t\t\t}\n\t\t\t\te.gc.drawImage( tab.getImage( ), textIndent, textMiddle - 1 );\n\t\t\t\ttextIndent = textIndent + 16 + 5;\n\t\t\t}\n\t\t\telse if ( tab.isIndented( ) )\n\t\t\t{\n\t\t\t\ttextIndent = textIndent + INDENT;\n\t\t\t}\n\t\t\t/* draw the text */\n\t\t\te.gc.setForeground( widgetForeground );\n\t\t\tif ( selected )\n\t\t\t{\n\t\t\t\t/* selected tab is bold font */\n\t\t\t\te.gc.setFont( JFaceResources.getFontRegistry( )\n\t\t\t\t\t\t.getBold( JFaceResources.DEFAULT_FONT ) );\n\t\t\t}\n\t\t\te.gc.drawText( tab.getText( ), textIndent, textMiddle, true );\n\t\t\tif ( ( (TabbedPropertyList) getParent( ) ).focus\n\t\t\t\t\t&& selected\n\t\t\t\t\t&& focus )\n\t\t\t{\n\t\t\t\t/* draw a line if the tab has focus */\n\t\t\t\tPoint point = e.gc.textExtent( tab.getText( ) );\n\t\t\t\te.gc.drawLine( textIndent, bounds.height - 4, textIndent\n\t\t\t\t\t\t+ point.x, bounds.height - 4 );\n\t\t\t}\n\t\t\t/* draw the bottom line on the tab for selected and default */\n\t\t\tif ( !hover )\n\t\t\t{\n\t\t\t\te.gc.setForeground( listBackground );\n\t\t\t\te.gc.drawLine( 0,\n\t\t\t\t\t\tbounds.height - 1,\n\t\t\t\t\t\tbounds.width - 2,\n\t\t\t\t\t\tbounds.height - 1 );\n\t\t\t}\n\t\t}\n\t\tpublic String getText( )\n\t\t{\n\t\t\treturn tab.getText( );\n\t\t}\n\t\tpublic String toString( )\n\t\t{\n\t\t\treturn tab.getText( );\n\t\t}\n\t}<fim_middle>// class below is data class and blob\n"}