{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sis.internal.shapefile.jdbc.resultset;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.math.BigDecimal;\nimport java.net.URL;\nimport java.sql.*;\nimport java.util.Calendar;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.logging.Level;\nimport org.apache.sis.internal.shapefile.jdbc.SQLConnectionClosedException;\nimport org.apache.sis.internal.shapefile.jdbc.connection.DBFConnection;\nimport org.apache.sis.internal.shapefile.jdbc.statement.DBFStatement;\n/**\n * Common implemented features of all ResultSets : those based on a record, but also those returning results forged in memory.\n * @author Marc LE BIHAN\n */\npublic abstract class DBFResultSet extends AbstractResultSet {\n    /** Indicates if the ResultSet is closed.  */\n    protected boolean isClosed;\n    /** SQL Statement. */\n    protected String sql;\n    /** true, if the last column had the SQL NULL value (for the ResultSet.wasNull() method). */\n    protected boolean wasNull;\n    /** Parent statement. */\n    protected DBFStatement statement;\n    /**\n     * Constructs a result set.\n     * @param stmt Parent statement.\n     * @param sqlQuery SQL Statment that produced this ResultSet.\n     */\n    public DBFResultSet(final DBFStatement stmt, String sqlQuery) {\n        Objects.requireNonNull(stmt, \"the statement referred by the ResultSet cannot be null.\");\n        this.statement = stmt;\n        this.sql = sqlQuery;\n    }\n    /**\n     * Defaults to {@link #last()} followed by {@link #next()}.\n     */\n    @Override\n    public void afterLast() throws SQLException {\n        if (last()) next();\n    }\n    /**\n     * Asserts that the connection, statement and result set are together opened.\n     * @throws SQLConnectionClosedException if one of them is closed.\n     */\n<fim_suffix>    protected void assertNotClosed() throws SQLConnectionClosedException {\n        this.statement.assertNotClosed();\n        if (this.isClosed) {\n            throw new SQLConnectionClosedException(format(Level.WARNING, \"excp.closed_resultset\", this.sql, getFile().getName()), this.sql, getFile());\n        }\n    }\n    /**\n     * Defaults to {@link #absolute(int)}.\n     */\n    @Override\n    public void beforeFirst() throws SQLException {\n        absolute(0);\n    }\n    /**\n     * @see java.sql.ResultSet#close()\n     */\n    @Override\n    public void close() {\n        if (isClosed())\n            return;\n        this.statement.notifyCloseResultSet(this);\n        this.isClosed = true;\n    }\n    /**\n     * Returns the column index for the given column name.\n     * The default implementation of all methods expecting a column label will invoke this method.\n     * @param columnLabel The name of the column.\n     * @return The index of the given column name : first column is 1.\n     * @throws SQLNoSuchFieldException if there is no field with this name in the query.\n     * @throws SQLConnectionClosedException if the connection is closed.\n     */\n    @Override\n    @SuppressWarnings(\"resource\") // The connection is only used to get the column index.\n    public int findColumn(String columnLabel) throws SQLNoSuchFieldException, SQLConnectionClosedException {\n        DBFConnection cnt = (DBFConnection)this.statement.getConnection();\n        return cnt.findColumn(columnLabel, getSQL());\n    }\n    /**\n     * Defaults to {@link #absolute(int)}.\n     */\n    @Override\n    public boolean first() throws SQLException {\n        return absolute(1);\n    }\n    /**\n     * Defaults to the index-based version of this method.\n     * The given column name is mapped to a column index by {@link #findColumn(String)}.\n     */\n    @Override\n    public Array getArray(String columnLabel) throws SQLException {\n        return getArray(findColumn(columnLabel));\n    }\n    /**\n     * Defaults to the index-based version of this method.\n     * The given column name is mapped to a column index by {@link #findColumn(String)}.\n     */\n    @Override\n    public InputStream getAsciiStream(String columnLabel) throws SQLException {\n        return getAsciiStream(findColumn(columnLabel));\n    }\n    /**\n     * @deprecated Replaced by {@link #getBigDecimal(int)}.\n     * Defaults to {@link #getBigDecimal(int)} followed by {@link BigDecimal#setScale(int)}.\n     */\n    @Override\n    @Deprecated\n    public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {\n        final BigDecimal d = getBigDecimal(columnIndex);\n        return (d != null) ? d.setScale(scale) : null;\n    }\n    /**\n     * Defaults to the index-based version of this method.\n     * The given column name is mapped to a column index by {@link #findColumn(String)}.\n     */\n    @Override\n    public InputStream getBinaryStream(String columnLabel) throws SQLException {\n        return getBinaryStream(findColumn(columnLabel));\n    }\n    /**\n     * Defaults to the index-based version of this method.\n     * The given column name is mapped to a column index by {@link #findColumn(String)}.\n     */\n    @Override\n    public Blob getBlob(String columnLabel) throws SQLException {\n        return getBlob(findColumn(columnLabel));\n    }\n    /**\n     * Defaults to the index-based version of this method.\n     * The given column name is mapped to a column index by {@link #findColumn(String)}.\n     */\n    @Override\n    public Reader getCharacterStream(String columnLabel) throws SQLException {\n        return getCharacterStream(findColumn(columnLabel));\n    }\n    /**\n     * Defaults to the index-based version of this method.\n     * The given column name is mapped to a column index by {@link #findColumn(String)}.\n     */\n    @Override\n    public Clob getClob(String columnLabel) throws SQLException {\n        return getClob(findColumn(columnLabel));\n    }\n    /**\n     * Defaults to {@link Statement#getResultSetConcurrency()}.\n     */\n    @Override\n    public int getConcurrency() throws SQLException {\n        return getStatement().getResultSetConcurrency();\n    }\n    /**\n     * Defaults to the index-based version of this method.\n     * The given column name is mapped to a column index by {@link #findColumn(String)}.\n     */\n    @Override\n    public Date getDate(String columnLabel, Calendar cal) throws SQLException {\n        return getDate(findColumn(columnLabel), cal);\n    }\n    /**\n     * Defaults to {@link Statement#getFetchDirection()}.\n     */\n    @Override\n    public int getFetchDirection() throws SQLException {\n        return getStatement().getFetchDirection();\n    }\n    /**\n     * @see java.sql.ResultSet#getFetchSize()\n     */\n    @Override\n    public int getFetchSize() throws SQLException {\n        return getStatement().getFetchSize();\n    }\n    /**\n     * Return a field name.\n     * @param columnIndex Column index.\n     * @param sqlStatement For information, the SQL statement that is attempted.\n     * @return Field Name.\n     * @throws SQLIllegalColumnIndexException if the index is out of bounds.\n     * @throws SQLConnectionClosedException if the connection is closed.\n     */\n    @SuppressWarnings(\"resource\") // Only use the current connection to get the field name.\n    public String getFieldName(int columnIndex, String sqlStatement) throws SQLIllegalColumnIndexException, SQLConnectionClosedException {\n        DBFConnection cnt = (DBFConnection)this.statement.getConnection();\n        return cnt.getFieldName(columnIndex, sqlStatement);\n    }\n    /**\n     * Returns the Database File.\n     * @return Database File.\n     */\n    @Override\n    public File getFile() {\n        return this.statement.getFile();\n    }\n    /**\n     * Defaults to {@link Statement#getResultSetHoldability()}.\n     */\n    @Override\n    public int getHoldability() throws SQLException {\n        return getStatement().getResultSetHoldability();\n    }\n    /**\n     * Returns the JDBC interface implemented by this class.\n     * This is used for formatting error messages.\n     */\n    @Override\n    public Class<?> getInterface() {\n        return ResultSet.class;\n    }\n    /**\n     * Defaults to {@link #getCharacterStream(int)} on the assumption that the fact that Java use UTF-16 internally\n     * makes the two methods identical in behavior.\n     */\n    @Override\n    public Reader getNCharacterStream(int columnIndex) throws SQLException {\n        return getCharacterStream(columnIndex);\n    }\n    /**<fim_middle>// function below has no smell\n"}