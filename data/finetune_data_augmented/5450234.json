{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.pulsar.broker.authentication;\n\nimport java.net.SocketAddress;\nimport java.security.cert.Certificate;\nimport javax.naming.AuthenticationException;\nimport org.apache.pulsar.common.api.AuthData;\n\n/**\n * Interface for accessing data which are used in variety of authentication schemes on server side\n */\npublic interface AuthenticationDataSource {\n    /*\n     * TLS\n     */\n\n    /**\n     * Check if data from TLS are available.\n     *\n     * @return true if this authentication data contain data from TLS\n     */\n    default boolean hasDataFromTls() {\n        return false;\n    }\n\n    /**\n     *\n     * @return a client certificate chain, or null if the data are not available\n     */\n    default Certificate[] getTlsCertificates() {\n        return null;\n    }\n\n    /*\n     * HTTP\n     */\n\n    /**\n     * Check if data from HTTP are available.\n     *\n     * @return true if this authentication data contain data from HTTP\n     */\n<fim_suffix>    default boolean hasDataFromHttp() {\n        return false;\n    }\n\n    /**\n     *\n     * @return a authentication scheme, or <code>null<c/ode> if the request is not be authenticated\n     */\n    default String getHttpAuthType() {\n        return null;\n    }\n\n    /**\n     *\n     * @return a <code>String</code> containing the value of the specified header, or <code>null</code> if the header\n     *         does not exist.\n     */\n    default String getHttpHeader(String name) {\n        return null;\n    }\n\n    /*\n     * Command\n     */\n\n    /**\n     * Check if data from Pulsar protocol are available.\n     *\n     * @return true if this authentication data contain data from Pulsar protocol\n     */\n    default boolean hasDataFromCommand() {\n        return false;\n    }\n\n    /**\n     *\n     * @return authentication data which is stored in a command\n     */\n    default String getCommandData() {\n        return null;\n    }\n\n    /**\n     * Evaluate and challenge the data that passed in, and return processed data back.\n     * It is used for mutual authentication like SASL.\n     */\n    default AuthData authenticate(AuthData data) throws AuthenticationException {\n        throw new AuthenticationException(\"Not supported\");\n    }\n\n    /*\n     * Peer\n     */\n\n    /**\n     * Check if data from peer are available.\n     *\n     * @return true if this authentication data contain data from peer\n     */\n    default boolean hasDataFromPeer() {\n        return false;\n    }\n\n    /**\n     *\n     * @return a <code>String</code> containing the IP address of the client\n     */\n    default SocketAddress getPeerAddress() {\n        return null;\n    }\n}<fim_middle>// function below has no smell\n"}