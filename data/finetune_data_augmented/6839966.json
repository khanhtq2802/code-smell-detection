{"text": "<fim_prefix>// Copyright (C) 2007 Google Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage com.google.caja.lexer;\n\nimport java.net.URI;\n\nimport javax.annotation.Nullable;\n\n/**\n * A reference to an external resource from an input.\n *\n * <p>For example, parsing a file {@code x/y/foo.html} with contents:\n *\n * <pre>\n *   &lt;script src=\"../z/bar.js\"/&gt;\n * </pre>\n *\n * will result in an {@code ExternalReference} with:\n *\n * <ul>\n *\n *   <li>A {@link #getReferencePosition() reference position} which is the span\n *   in {@code foo.html} where the reference occurred. This position contains,\n *   among other things, the URI {@code \"x/y/foo.html\"}.</li>\n *\n *   <li>The target {@link #getUri() URI}, {@code \"../z/bar.js\"}.\n *\n * </ul>\n *\n * <p>Note that, in the case of HTML links (as in the above example), the\n * URI is implicitly relative to the reference position; in other words, the\n * author of {@code x/y/foo.html} meant to retrieve a script at\n * {@code \"x/z/bar.js\"}. The {@code ExternalReference} itself, however, is\n * oblivious to this level of interpretation.\n *\n * @author mikesamuel@gmail.com (Mike Samuel)\n */\npublic final class ExternalReference {\n  private final URI uri;\n  private final URI base;\n  private final URI relUri;\n  private final FilePosition pos;\n\n  public ExternalReference(URI uri, FilePosition pos) {\n    this(uri, uri, uri, pos);\n  }\n\n  /**\n   * @param uri the location of the external resource.\n   * @param base base uri of document in which the external reference appears\n   * @param relUri location of the resource as it appears in the source\n   * @param pos the location, within an already parsed input, of the reference\n   *     to uri.\n   */\n  public ExternalReference(URI uri, URI base, URI relUri, FilePosition pos) {\n    this.uri = uri;\n    this.base = base;\n    this.relUri = relUri;\n    this.pos = pos;\n  }\n\n  /** The external URI. */\n  public URI getUri() { return uri; }\n\n  /** The base URI. */\n  public URI getBase() { return base; }\n\n  public URI getUnresolvedUri() { return relUri; }\n\n  /** The location, within an already parsed input, of the reference. */\n  public FilePosition getReferencePosition() { return pos; }\n\n<fim_suffix>  @Override\n  public int hashCode() {\n    return uri.hashCode();\n  }\n\n  @Override\n  public boolean equals(@Nullable Object o) {\n    if (!(o instanceof ExternalReference)) { return false; }\n    ExternalReference that = (ExternalReference) o;\n    return this.uri.equals(that.uri);\n  }\n\n  @Override\n  public String toString() {\n    return uri.toString() + \" @ \" + pos;\n  }\n}<fim_middle>// function below has no smell\n"}