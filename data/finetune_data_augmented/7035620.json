{"text": "<fim_prefix>/*\n * Copyright 2010-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\npackage com.ibm.cloud.objectstorage.transform;\n\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.util.Date;\n\nimport com.ibm.cloud.objectstorage.SdkClientException;\nimport com.ibm.cloud.objectstorage.util.Base64;\nimport com.ibm.cloud.objectstorage.util.DateUtils;\n\npublic class SimpleTypeJsonUnmarshallers {\n    /**\n     * Unmarshaller for String values.\n     */\n    public static class StringJsonUnmarshaller implements Unmarshaller<String, JsonUnmarshallerContext> {\n        public String unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            return unmarshallerContext.readText();\n        }\n\n        private static final StringJsonUnmarshaller instance = new StringJsonUnmarshaller();\n\n        public static StringJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n\n    /**\n     * Unmarshaller for fields with JSON values. For headers, JSON values are base-64 encoded and are decoded here. For payloads,\n     * JSON values are treated like normal strings.\n     */\n    public static class JsonValueStringUnmarshaller extends StringJsonUnmarshaller {\n        public String unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            String stringValue = super.unmarshall(unmarshallerContext);\n            return !unmarshallerContext.isInsideResponseHeader()\n                   ? stringValue\n                   : new String(Base64.decode(stringValue), Charset.forName(\"utf-8\"));\n        }\n\n        private static final JsonValueStringUnmarshaller INSTANCE = new JsonValueStringUnmarshaller();\n        public static JsonValueStringUnmarshaller getInstance() {\n            return INSTANCE;\n        }\n    }\n\n    /**\n     * Unmarshaller for Double values.\n     */\n    public static class DoubleJsonUnmarshaller implements Unmarshaller<Double, JsonUnmarshallerContext> {\n        public Double unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            String doubleString = unmarshallerContext.readText();\n            return (doubleString == null) ? null : Double.parseDouble(doubleString);\n        }\n\n        private static final DoubleJsonUnmarshaller instance = new DoubleJsonUnmarshaller();\n\n        public static DoubleJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n\n    /**\n     * Unmarshaller for Integer values.\n     */\n    public static class IntegerJsonUnmarshaller implements Unmarshaller<Integer, JsonUnmarshallerContext> {\n        public Integer unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            String intString = unmarshallerContext.readText();\n            return (intString == null) ? null : Integer.parseInt(intString);\n        }\n\n        private static final IntegerJsonUnmarshaller instance = new IntegerJsonUnmarshaller();\n\n        public static IntegerJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n\n    public static class BigIntegerJsonUnmarshaller implements Unmarshaller<BigInteger, JsonUnmarshallerContext> {\n        public BigInteger unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            String intString = unmarshallerContext.readText();\n            return (intString == null) ? null : new BigInteger(intString);\n        }\n\n        private static final BigIntegerJsonUnmarshaller instance = new BigIntegerJsonUnmarshaller();\n\n        public static BigIntegerJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n\n    public static class BigDecimalJsonUnmarshaller implements Unmarshaller<BigDecimal, JsonUnmarshallerContext> {\n        public BigDecimal unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            String s = unmarshallerContext.readText();\n            return (s == null) ? null : new BigDecimal(s);\n        }\n\n        private static final BigDecimalJsonUnmarshaller instance = new BigDecimalJsonUnmarshaller();\n\n        public static BigDecimalJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n\n    /**\n     * Unmarshaller for Boolean values.\n     */\n    public static class BooleanJsonUnmarshaller implements Unmarshaller<Boolean, JsonUnmarshallerContext> {\n        public Boolean unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            String booleanString = unmarshallerContext.readText();\n            return (booleanString == null) ? null : Boolean.parseBoolean(booleanString);\n        }\n\n        private static final BooleanJsonUnmarshaller instance = new BooleanJsonUnmarshaller();\n\n        public static BooleanJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n\n    /**\n     * Unmarshaller for Float values.\n     */\n    public static class FloatJsonUnmarshaller implements Unmarshaller<Float, JsonUnmarshallerContext> {\n        public Float unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            String floatString = unmarshallerContext.readText();\n            return (floatString == null) ? null : Float.valueOf(floatString);\n        }\n\n        private static final FloatJsonUnmarshaller instance = new FloatJsonUnmarshaller();\n\n        public static FloatJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n\n    /**\n     * Unmarshaller for Long values.\n     */\n<fim_suffix>    public static class LongJsonUnmarshaller implements Unmarshaller<Long, JsonUnmarshallerContext> {\n        public Long unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            String longString = unmarshallerContext.readText();\n            return (longString == null) ? null : Long.parseLong(longString);\n        }\n\n        private static final LongJsonUnmarshaller instance = new LongJsonUnmarshaller();\n\n        public static LongJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n\n    /**\n     * Unmarshaller for Byte values.\n     */\n    public static class ByteJsonUnmarshaller implements Unmarshaller<Byte, JsonUnmarshallerContext> {\n        public Byte unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            String byteString = unmarshallerContext.readText();\n            return (byteString == null) ? null : Byte.valueOf(byteString);\n        }\n\n        private static final ByteJsonUnmarshaller instance = new ByteJsonUnmarshaller();\n\n        public static ByteJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n\n    /**\n     * Unmarshaller for Date values - JSON dates come in as epoch seconds.\n     */\n    public static class DateJsonUnmarshaller implements Unmarshaller<Date, JsonUnmarshallerContext> {\n        public Date unmarshall(JsonUnmarshallerContext unmarshallerContext)\n                throws Exception {\n            return DateUtils.parseServiceSpecificDate(unmarshallerContext\n                    .readText());\n        }\n\n        private static final DateJsonUnmarshaller instance = new DateJsonUnmarshaller();\n\n        public static DateJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n\n    /**\n     * Unmarshaller for ByteBuffer values.\n     */\n    public static class ByteBufferJsonUnmarshaller implements Unmarshaller<ByteBuffer, JsonUnmarshallerContext> {\n        public ByteBuffer unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            String base64EncodedString = unmarshallerContext.readText();\n            if (base64EncodedString == null) {\n                return null;\n            }\n            byte[] decodedBytes = Base64.decode(base64EncodedString);\n            return ByteBuffer.wrap(decodedBytes);\n\n        }\n\n        private static final ByteBufferJsonUnmarshaller instance = new ByteBufferJsonUnmarshaller();\n\n        public static ByteBufferJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n\n    /**\n     * Unmarshaller for Character values.\n     */\n    public static class CharacterJsonUnmarshaller implements Unmarshaller<Character, JsonUnmarshallerContext> {\n        public Character unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            String charString = unmarshallerContext.readText();\n\n            if (charString == null) return null;\n\n            charString = charString.trim();\n            if (charString.isEmpty() || charString.length() > 1)\n                throw new SdkClientException(\"'\" + charString\n                        + \"' cannot be converted to Character\");\n            return Character.valueOf(charString.charAt(0));\n        }\n\n        private static final CharacterJsonUnmarshaller instance = new CharacterJsonUnmarshaller();\n\n        public static CharacterJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n\n    /**\n     * Unmarshaller for Short values.\n     */\n    public static class ShortJsonUnmarshaller implements Unmarshaller<Short, JsonUnmarshallerContext> {\n        public Short unmarshall(JsonUnmarshallerContext unmarshallerContext) throws Exception {\n            String shortString = unmarshallerContext.readText();\n            return (shortString == null) ? null : Short.valueOf(shortString);\n        }\n\n        private static final ShortJsonUnmarshaller instance = new ShortJsonUnmarshaller();\n\n        public static ShortJsonUnmarshaller getInstance() {\n            return instance;\n        }\n    }\n}<fim_middle>// class below has no smell\n"}