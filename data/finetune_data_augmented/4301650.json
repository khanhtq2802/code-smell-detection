{"text": "<fim_prefix>/**\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License. \n *  \n */\npackage org.apache.kerby.kerberos.kerb.type.base;\n\nimport java.util.Arrays;\n\nimport org.apache.kerby.asn1.Asn1FieldInfo;\nimport org.apache.kerby.asn1.EnumType;\nimport org.apache.kerby.asn1.ExplicitField;\nimport org.apache.kerby.asn1.type.Asn1Integer;\nimport org.apache.kerby.asn1.type.Asn1OctetString;\nimport org.apache.kerby.kerberos.kerb.type.KrbSequenceType;\n\n/**\n * The EncryptedData structure, as defined in RFC 4120 :\n * <pre>\n *  EncryptedData   ::= SEQUENCE {\n *          etype   [0] Int32 -- EncryptionType --,\n *          kvno    [1] UInt32 OPTIONAL,\n *          cipher  [2] OCTET STRING -- ciphertext\n *  }\n * </pre>\n * \n * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n */\npublic class EncryptedData extends KrbSequenceType {\n    /**\n     * The possible fields\n     */\n    protected enum EncryptedDataField implements EnumType {\n        ETYPE,\n        KVNO,\n        CIPHER;\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public int getValue() {\n            return ordinal();\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n<fim_suffix>        @Override\n        public String getName() {\n            return name();\n        }\n    }\n\n    /** The EncryptedData's fields */\n    static Asn1FieldInfo[] fieldInfos = new Asn1FieldInfo[] {\n            new ExplicitField(EncryptedDataField.ETYPE, Asn1Integer.class),\n            new ExplicitField(EncryptedDataField.KVNO, Asn1Integer.class),\n            new ExplicitField(EncryptedDataField.CIPHER, Asn1OctetString.class)\n    };\n\n    /**\n     * Creates an instance of EncryptedData\n     */\n    public EncryptedData() {\n        super(fieldInfos);\n    }\n\n    /**\n     * @return The {@link EncryptionType} of this instance\n     */\n    public EncryptionType getEType() {\n        Integer value = getFieldAsInteger(EncryptedDataField.ETYPE);\n        \n        return EncryptionType.fromValue(value);\n    }\n\n    /**\n     * Sets the {@link EncryptionType} value\n     * \n     * @param eType the {@link EncryptionType} value to store\n     */\n    public void setEType(EncryptionType eType) {\n        setFieldAsInt(EncryptedDataField.ETYPE, eType.getValue());\n    }\n\n    /**\n     * @return The KVNO for this instance\n     */\n    public int getKvno() {\n        Integer value = getFieldAsInteger(EncryptedDataField.KVNO);\n        \n        if (value != null) {\n            return value.intValue();\n        }\n        \n        return -1;\n    }\n\n    /**\n     * Sets the instance's KVNO\n     * \n     * @param kvno The KVNO for this instance\n     */\n    public void setKvno(int kvno) {\n        setFieldAsInt(EncryptedDataField.KVNO, kvno);\n    }\n\n    /**\n     * @return The Cipher stored in this instance\n     */\n    public byte[] getCipher() {\n        return getFieldAsOctets(EncryptedDataField.CIPHER);\n    }\n\n    /**\n     * Sets the Cipher in this instance\n     * \n     * @param cipher The Cipher to store\n     */\n    public void setCipher(byte[] cipher) {\n        setFieldAsOctets(EncryptedDataField.CIPHER, cipher);\n    }\n\n    /**\n     * @see Object#equals(Object)\n     */\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        \n        if (!(o instanceof EncryptedData)) {\n            return false;\n        }\n        \n        EncryptedData that = (EncryptedData) o;\n\n        return getEType() == that.getEType() && Arrays.equals(getCipher(), that.getCipher());\n    }\n    \n    /**\n     * @see Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        int result = 17;\n        \n        if (getEType() != null) {\n            result = 31 * result + getEType().hashCode();\n        }\n        \n        if (getCipher() != null) {\n            result = 31 * result + Arrays.hashCode(getCipher());\n        }\n        \n        return result;\n    }\n}<fim_middle>// function below has no smell\n"}