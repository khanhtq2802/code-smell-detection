{"text": "<fim_prefix>\n<fim_suffix>public class BrocadeVcsApi {\n    private static final Logger s_logger = Logger.getLogger(BrocadeVcsApi.class);\n    private final String _host;\n    private final String _adminuser;\n    private final String _adminpass;\n    protected DefaultHttpClient _client;\n    protected HttpRequestBase createMethod(String type, String uri) throws BrocadeVcsApiException {\n        String url;\n        try {\n            url = new URL(Constants.PROTOCOL, _host, Constants.PORT, uri).toString();\n        } catch (final MalformedURLException e) {\n            s_logger.error(\"Unable to build Brocade Switch API URL\", e);\n            throw new BrocadeVcsApiException(\"Unable to build Brocade Switch API URL\", e);\n        }\n        if (\"post\".equalsIgnoreCase(type)) {\n            return new HttpPost(url);\n        } else if (\"get\".equalsIgnoreCase(type)) {\n            return new HttpGet(url);\n        } else if (\"delete\".equalsIgnoreCase(type)) {\n            return new HttpDelete(url);\n        } else if (\"patch\".equalsIgnoreCase(type)) {\n            return new HttpPatch(url);\n        } else {\n            throw new BrocadeVcsApiException(\"Requesting unknown method type\");\n        }\n    }\n    public BrocadeVcsApi(String address, String username, String password) {\n        _host = address;\n        _adminuser = username;\n        _adminpass = password;\n        _client = new DefaultHttpClient();\n        _client.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(_adminuser, _adminpass));\n    }\n    /*\n     * Get Operational Status\n     */\n    public Output getSwitchStatus() throws BrocadeVcsApiException {\n        return executeRetreiveStatus(Constants.STATUS_URI);\n    }\n    /*\n     * Creates a new virtual network.\n     */\n    public boolean createNetwork(int vlanId, long networkId) throws BrocadeVcsApiException {\n        if (createInterfaceVlan(vlanId)) {\n            final PortProfile portProfile = createPortProfile(vlanId, networkId);\n            if (portProfile != null) {\n                return activatePortProfile(portProfile);\n            }\n        }\n        return false;\n    }\n    /*\n     * Activates a port-profile.\n     */\n    private boolean activatePortProfile(PortProfile portProfile) throws BrocadeVcsApiException {\n        final PortProfileGlobal portProfileGlobal = new PortProfileGlobal();\n        portProfile.setVlanProfile(null);\n        final Activate activate = new Activate();\n        portProfile.setActivate(activate);\n        portProfileGlobal.setPortProfile(portProfile);\n        //activate port-profile\n        return executeUpdateObject(portProfileGlobal, Constants.URI);\n    }\n    /*\n     *  Creates AMPP port-profile.\n     */\n    private PortProfile createPortProfile(int vlanId, long networkId) throws BrocadeVcsApiException {\n        final PortProfile portProfile = new PortProfile();\n        portProfile.setName(Constants.PORT_PROFILE_NAME_PREFIX + networkId);\n        if (executeCreateObject(portProfile, Constants.URI)) {\n            if (createVlanSubProfile(vlanId, portProfile)) {\n                return portProfile;\n            }\n        }\n        return null;\n    }\n    /*\n     * Create vlan sub-profile for port-profile\n     */\n    private boolean createVlanSubProfile(int vlanId, PortProfile portProfile) throws BrocadeVcsApiException {\n        final VlanProfile vlanProfile = new VlanProfile();\n        portProfile.setVlanProfile(vlanProfile);\n        if (executeUpdateObject(portProfile, Constants.URI)) {\n            return configureVlanSubProfile(vlanId, portProfile);\n        }\n        return false;\n    }\n    /*\n     * Configures vlan sub-profile for port-profile.\n     * - configure L2 mode for vlan sub-profile\n     * - configure trunk mode for vlan sub-profile\n     * - configure allowed VLANs for vlan sub-profile\n     */\n    private boolean configureVlanSubProfile(int vlanId, PortProfile portProfile) throws BrocadeVcsApiException {\n        final SwitchportBasic switchPortBasic = new SwitchportBasic();\n        final Basic basic = new Basic();\n        switchPortBasic.setBasic(basic);\n        portProfile.getVlanProfile().setSwitchportBasic(switchPortBasic);\n        // configure L2 mode for vlan sub-profile\n        if (executeUpdateObject(portProfile, Constants.URI)) {\n            VlanProfile vlanProfile = new VlanProfile();\n            Switchport switchPort = new Switchport();\n            final Mode mode = new Mode();\n            mode.setVlanMode(\"trunk\");\n            switchPort.setMode(mode);\n            vlanProfile.setSwitchport(switchPort);\n            portProfile.setVlanProfile(vlanProfile);\n            // configure trunk mode for vlan sub-profile\n            if (executeUpdateObject(portProfile, Constants.URI)) {\n                vlanProfile = new VlanProfile();\n                switchPort = new Switchport();\n                final Trunk trunk = new Trunk();\n                final Allowed allowed = new Allowed();\n                final Allowed.Vlan allowedVlan = new Allowed.Vlan();\n                allowedVlan.setAdd(vlanId);\n                allowed.setVlan(allowedVlan);\n                trunk.setAllowed(allowed);\n                switchPort.setTrunk(trunk);\n                vlanProfile.setSwitchport(switchPort);\n                portProfile.setVlanProfile(vlanProfile);\n                //configure allowed VLANs for vlan sub-profile\n                return executeUpdateObject(portProfile, Constants.URI);\n            }\n        }\n        return false;\n    }\n    /*\n     * Creates a vlan interface.\n     */\n    private boolean createInterfaceVlan(int vlanId) throws BrocadeVcsApiException {\n        final InterfaceVlan interfaceVlan = new InterfaceVlan();\n        final Interface interfaceObj = new Interface();\n        final Vlan vlan = new Vlan();\n        vlan.setName(vlanId);\n        interfaceObj.setVlan(vlan);\n        interfaceVlan.setInterface(interfaceObj);\n        return executeUpdateObject(interfaceVlan, Constants.URI);\n    }\n    /*\n     * Associates a MAC address to virtual network.\n     */\n    public boolean associateMacToNetwork(long networkId, String macAddress) throws BrocadeVcsApiException {\n        final PortProfileGlobal portProfileGlobal = new PortProfileGlobal();\n        final PortProfile portProfile = new PortProfile();\n        portProfile.setName(Constants.PORT_PROFILE_NAME_PREFIX + networkId);\n        final Static staticObj = new Static();\n        staticObj.setMacAddress(macAddress);\n        portProfile.setStatic(staticObj);\n        portProfileGlobal.setPortProfile(portProfile);\n        //associates a mac address to a port-profile\n        return executeUpdateObject(portProfileGlobal, Constants.URI);\n    }\n    /*\n     * Disassociates a MAC address from virtual network.\n     */\n    public boolean disassociateMacFromNetwork(long networkId, String macAddress) throws BrocadeVcsApiException {\n        final PortProfileGlobal portProfileGlobal = new PortProfileGlobal();\n        final PortProfile portProfile = new PortProfile();\n        portProfile.setName(Constants.PORT_PROFILE_NAME_PREFIX + networkId);\n        final Static staticObj = new Static();\n        staticObj.setOperation(\"delete\");\n        staticObj.setMacAddress(macAddress);\n        portProfile.setStatic(staticObj);\n        portProfileGlobal.setPortProfile(portProfile);\n        //associates a mac address to a port-profile\n        return executeUpdateObject(portProfileGlobal, Constants.URI);\n    }\n    /*\n     * Deletes a new virtual network.\n     */\n    public boolean deleteNetwork(int vlanId, long networkId) throws BrocadeVcsApiException {\n        if (deactivatePortProfile(networkId)) {\n            if (deletePortProfile(networkId)) {\n                return deleteInterfaceVlan(vlanId);\n            }\n        }\n        return false;\n    }\n    /*\n     * Deletes a vlan interface.\n     */\n    private boolean deleteInterfaceVlan(int vlanId) throws BrocadeVcsApiException {\n        final InterfaceVlan interfaceVlan = new InterfaceVlan();\n        final Interface interfaceObj = new Interface();\n        final Vlan vlan = new Vlan();\n        vlan.setOperation(\"delete\");\n        vlan.setName(vlanId);\n        interfaceObj.setVlan(vlan);\n        interfaceVlan.setInterface(interfaceObj);\n        return executeUpdateObject(interfaceVlan, Constants.URI);\n    }\n    /*\n     * Deactivates a port-profile.\n     */\n    private boolean deactivatePortProfile(long networkId) throws BrocadeVcsApiException {\n        final PortProfileGlobal portProfileGlobal = new PortProfileGlobal();\n        final PortProfile portProfile = new PortProfile();\n        portProfile.setName(Constants.PORT_PROFILE_NAME_PREFIX + networkId);\n        final Activate activate = new Activate();\n        activate.setOperation(\"delete\");\n        portProfile.setActivate(activate);\n        portProfileGlobal.setPortProfile(portProfile);\n        //activate port-profile\n        return executeUpdateObject(portProfileGlobal, Constants.URI);\n    }\n    /*\n     *  Deletes AMPP port-profile.\n     */\n    private boolean deletePortProfile(long networkId) throws BrocadeVcsApiException {\n        final PortProfile portProfile = new PortProfile();\n        portProfile.setName(Constants.PORT_PROFILE_NAME_PREFIX + networkId);\n        portProfile.setOperation(\"delete\");<fim_middle>// class below is blob\n"}