{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.ambari.server.view;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.ambari.server.configuration.Configuration;\nimport org.apache.ambari.server.orm.entities.RemoteAmbariClusterEntity;\nimport org.apache.ambari.view.AmbariHttpException;\nimport org.apache.ambari.view.AmbariStreamProvider;\nimport org.apache.ambari.view.cluster.Cluster;\nimport org.apache.commons.io.IOUtils;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParser;\nimport com.google.gson.reflect.TypeToken;\n/**\n * View associated  Remote cluster implementation.\n */\npublic class RemoteAmbariCluster implements Cluster {\n  public static final String AMBARI_OR_CLUSTER_ADMIN = \"/api/v1/users/%s?privileges/PrivilegeInfo/permission_name=AMBARI.ADMINISTRATOR|\" +\n    \"(privileges/PrivilegeInfo/permission_name=CLUSTER.ADMINISTRATOR&privileges/PrivilegeInfo/cluster_name=%s)\";\n  /**\n   * Name of the remote Ambari Cluster\n   */\n  private String name;\n  /**\n   * StreamProvider for the remote cluster\n   * Base path will be http://host:port\n   */\n  private AmbariStreamProvider streamProvider;\n  /**\n   * Path for the cluster.\n   * Value will be like : /api/v1/clusters/clusterName\n   */\n  private String clusterPath;\n  /**\n   * User for the cluster\n   */\n  private String username;\n  private final LoadingCache<String, JsonElement> configurationCache = CacheBuilder.newBuilder()\n    .expireAfterWrite(10, TimeUnit.SECONDS)\n    .build(new CacheLoader<String, JsonElement>() {\n      @Override\n      public JsonElement load(String url) throws Exception {\n        return readFromUrlJSON(url);\n      }\n    });\n  /**\n   * Constructor for Remote Ambari Cluster\n   *\n   * @param remoteAmbariClusterEntity\n   */\n  public RemoteAmbariCluster(RemoteAmbariClusterEntity remoteAmbariClusterEntity, Configuration config) throws MalformedURLException {\n    this.name = getClusterName(remoteAmbariClusterEntity);\n    this.username = remoteAmbariClusterEntity.getUsername();\n    URL url = new URL(remoteAmbariClusterEntity.getUrl());\n    String portString = url.getPort() == -1 ? \"\" : \":\" + url.getPort();\n    String baseUrl = url.getProtocol() + \"://\" + url.getHost() + portString;\n    this.clusterPath = url.getPath();\n    this.streamProvider = new RemoteAmbariStreamProvider(\n      baseUrl, remoteAmbariClusterEntity.getUsername(),\n      remoteAmbariClusterEntity.getPassword(), config.getRequestConnectTimeout(), config.getRequestReadTimeout());\n  }\n  private String getClusterName(RemoteAmbariClusterEntity remoteAmbariClusterEntity) {\n    String[] urlSplit = remoteAmbariClusterEntity.getUrl().split(\"/\");\n    // remoteAmbariClusterEntity.getName() is not the actual name of Remote Cluster\n    // We need to extract the name from cluster url which is like. http://host:port/api/vi/clusters/${clusterName}\n    return urlSplit[urlSplit.length - 1];\n  }\n  /**\n   * Constructor for Remote Ambari Cluster\n   *\n   * @param name\n   * @param streamProvider\n   */\n<fim_suffix>  public RemoteAmbariCluster(String name, String clusterPath, AmbariStreamProvider streamProvider) {\n    this.name = name;\n    this.clusterPath = clusterPath;\n    this.streamProvider = streamProvider;\n  }\n  @Override\n  public String getName() {\n    return this.name;\n  }\n  @Override\n  public String getConfigurationValue(String type, String key) {\n    JsonElement config = null;\n    try {\n      String desiredTag = getDesiredConfig(type);\n      if (desiredTag != null) {\n        config = configurationCache.get(String.format(\"%s/configurations?(type=%s&tag=%s)\",this.clusterPath, type, desiredTag));\n      }\n    } catch (ExecutionException e) {\n      throw new RemoteAmbariConfigurationReadException(\"Can't retrieve configuration from Remote Ambari\", e);\n    }\n    if (config == null || !config.isJsonObject()) return null;\n    JsonElement items = config.getAsJsonObject().get(\"items\");\n    if (items == null || !items.isJsonArray()) return null;\n    JsonElement item = items.getAsJsonArray().get(0);\n    if (item == null || !item.isJsonObject()) return null;\n    JsonElement properties = item.getAsJsonObject().get(\"properties\");\n    if (properties == null || !properties.isJsonObject()) return null;\n    JsonElement property = properties.getAsJsonObject().get(key);\n    if (property == null || !property.isJsonPrimitive()) return null;\n    return property.getAsJsonPrimitive().getAsString();\n  }\n  @Override\n  public Map<String, String> getConfigByType(String type) {\n    JsonElement config = null;\n    try {\n      String desiredTag = getDesiredConfig(type);\n      if (desiredTag != null) {\n        config = configurationCache.get(String.format(\"%s/configurations?(type=%s&tag=%s)\",this.clusterPath, type, desiredTag));\n      }\n    } catch (ExecutionException e) {\n      throw new RemoteAmbariConfigurationReadException(\"Can't retrieve configuration from Remote Ambari\", e);\n    }\n    if (config == null || !config.isJsonObject()) return null;\n    JsonElement items = config.getAsJsonObject().get(\"items\");\n    if (items == null || !items.isJsonArray()) return null;\n    JsonElement item = items.getAsJsonArray().get(0);\n    if (item == null || !item.isJsonObject()) return null;\n    JsonElement properties = item.getAsJsonObject().get(\"properties\");\n    if (properties == null || !properties.isJsonObject()) return null;\n    Map<String, String> retMap = new Gson().fromJson(properties, new TypeToken<HashMap<String, String>>() {}.getType());\n    return retMap;\n  }\n  @Override\n  public List<String> getHostsForServiceComponent(String serviceName, String componentName) {\n    String url = String.format(\"%s/services/%s/components/%s?\" +\n      \"fields=host_components/HostRoles/host_name\", this.clusterPath, serviceName, componentName);\n    List<String> hosts = new ArrayList<>();\n    try {\n      JsonElement response = configurationCache.get(url);\n      if (response == null || !response.isJsonObject()) return hosts;\n      JsonElement hostComponents = response.getAsJsonObject().get(\"host_components\");\n      if (hostComponents == null || !hostComponents.isJsonArray()) return hosts;\n      for (JsonElement element : hostComponents.getAsJsonArray()) {\n        JsonElement hostRoles = element.getAsJsonObject().get(\"HostRoles\");\n        String hostName = hostRoles.getAsJsonObject().get(\"host_name\").getAsString();\n        hosts.add(hostName);\n      }\n    } catch (ExecutionException e) {\n      throw new RemoteAmbariConfigurationReadException(\"Can't retrieve host information from Remote Ambari\", e);\n    }\n    return hosts;\n  }\n  /**\n   * Get list of services installed on the remote cluster\n   *\n   * @return list of services Available on cluster\n   */\n  public Set<String> getServices() throws IOException, AmbariHttpException {\n    Set<String> services = new HashSet<>();\n    String path = this.clusterPath + \"?fields=services/ServiceInfo/service_name\";\n    JsonElement config = configurationCache.getUnchecked(path);\n    if (config != null && config.isJsonObject()) {\n      JsonElement items = config.getAsJsonObject().get(\"services\");\n      if (items != null && items.isJsonArray()) {<fim_middle>// function below has no smell\n"}