{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* $Id$ */\npackage org.apache.fop.svg;\nimport java.awt.Graphics2D;\nimport java.awt.Shape;\nimport java.awt.geom.Rectangle2D;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.svg.SVGDocument;\nimport org.apache.batik.bridge.BridgeContext;\nimport org.apache.batik.bridge.SVGImageElementBridge;\nimport org.apache.batik.gvt.AbstractGraphicsNode;\nimport org.apache.batik.gvt.GraphicsNode;\nimport org.apache.batik.util.ParsedURL;\nimport org.apache.xmlgraphics.image.loader.Image;\nimport org.apache.xmlgraphics.image.loader.ImageException;\nimport org.apache.xmlgraphics.image.loader.ImageFlavor;\nimport org.apache.xmlgraphics.image.loader.ImageInfo;\nimport org.apache.xmlgraphics.image.loader.ImageManager;\nimport org.apache.xmlgraphics.image.loader.ImageSessionContext;\nimport org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D;\nimport org.apache.xmlgraphics.image.loader.impl.ImageRawCCITTFax;\nimport org.apache.xmlgraphics.image.loader.impl.ImageRawJPEG;\nimport org.apache.xmlgraphics.image.loader.impl.ImageXMLDOM;\nimport org.apache.xmlgraphics.java2d.Graphics2DImagePainter;\nimport org.apache.fop.image.loader.batik.BatikUtil;\n/**\n * Bridge class for the &lt;image&gt; element when jpeg images.\n *\n * This work was originally authored by <a href=\"mailto:keiron@aftexsw.com\">Keiron Liddle</a>\n */\npublic abstract class AbstractFOPImageElementBridge extends SVGImageElementBridge {\n    /**\n     * Constructs a new bridge for the &lt;image&gt; element.\n     */\n    public AbstractFOPImageElementBridge() { }\n    /**\n     * Create the raster image node.\n     * THis checks if it is a jpeg file and creates a jpeg node\n     * so the jpeg can be inserted directly into the pdf document.\n     * @param ctx the bridge context\n     * @param imageElement the svg element for the image\n     * @param purl the parsed url for the image resource\n     * @return a new graphics node\n     */\n<fim_suffix>    @Override\n    protected GraphicsNode createImageGraphicsNode(\n                BridgeContext ctx, Element imageElement, ParsedURL purl) {\n        AbstractFOPBridgeContext bridgeCtx = (AbstractFOPBridgeContext)ctx;\n        ImageManager manager = bridgeCtx.getImageManager();\n        ImageSessionContext sessionContext = bridgeCtx.getImageSessionContext();\n        try {\n            ImageInfo info = manager.getImageInfo(purl.toString(), sessionContext);\n            ImageFlavor[] supportedFlavors = getSupportedFlavours();\n            Image image = manager.getImage(info, supportedFlavors, sessionContext);\n            //TODO color profile overrides aren't handled, yet!\n            //ICCColorSpaceExt colorspaceOverride = extractColorSpace(e, ctx);\n            AbstractGraphicsNode specializedNode = null;\n            if (image instanceof ImageXMLDOM) {\n                ImageXMLDOM xmlImage = (ImageXMLDOM)image;\n                if (xmlImage.getDocument() instanceof SVGDocument) {\n                    //Clone DOM because the Batik's CSS Parser attaches to the DOM and is therefore\n                    //not thread-safe.\n                    SVGDocument clonedDoc = (SVGDocument)BatikUtil.cloneSVGDocument(\n                            xmlImage.getDocument());\n                    return createSVGImageNode(ctx, imageElement, clonedDoc);\n                } else {\n                    //Convert image to Graphics2D\n                    image = manager.convertImage(xmlImage,\n                            new ImageFlavor[] {ImageFlavor.GRAPHICS2D});\n                }\n            }\n            if (image instanceof ImageRawJPEG) {\n                specializedNode = createLoaderImageNode(image, ctx, imageElement, purl);\n            } else if (image instanceof ImageRawCCITTFax) {\n                specializedNode = createLoaderImageNode(image, ctx, imageElement, purl);\n            } else if (image instanceof ImageGraphics2D) {\n                ImageGraphics2D g2dImage = (ImageGraphics2D)image;\n                specializedNode = new Graphics2DNode(g2dImage);\n            } else {\n                ctx.getUserAgent().displayError(\n                        new ImageException(\"Cannot convert an image to a usable format: \" + purl));\n            }\n            if (specializedNode != null) {\n                Rectangle2D imgBounds = getImageBounds(ctx, imageElement);\n                Rectangle2D bounds = specializedNode.getPrimitiveBounds();\n                float [] vb = new float[4];\n                vb[0] = 0; // x\n                vb[1] = 0; // y\n                vb[2] = (float) bounds.getWidth(); // width\n                vb[3] = (float) bounds.getHeight(); // height\n                // handles the 'preserveAspectRatio', 'overflow' and 'clip'\n                // and sets the appropriate AffineTransform to the image node\n                initializeViewport(ctx, imageElement, specializedNode, vb, imgBounds);\n                return specializedNode;\n            }\n        } catch (Exception e) {\n            ctx.getUserAgent().displayError(e);\n        }\n        //Fallback\n        return superCreateGraphicsNode(ctx, imageElement, purl);\n    }\n    /**\n     * Calls the superclass' createImageGraphicNode() method to create the normal GraphicsNode.\n     * @param ctx the bridge context\n     * @param imageElement the image element\n     * @param purl the parsed URL\n     * @return the newly created graphics node\n     * @see org.apache.batik.bridge.SVGImageElementBridge#createGraphicsNode(BridgeContext, Element)\n     */\n    protected GraphicsNode superCreateGraphicsNode(\n            BridgeContext ctx, Element imageElement, ParsedURL purl) {\n        return super.createImageGraphicsNode(ctx, imageElement, purl);\n    }\n    /**\n     * Returns an array of supported image flavours\n     *\n     * @return an array of supported image flavours\n     */\n    protected abstract ImageFlavor[] getSupportedFlavours();\n    /**\n     * Creates a loader image node implementation\n     * @param purl the parsed url\n     * @param imageElement the image element\n     * @param ctx the batik bridge context\n     * @param image the image\n     *\n     * @return a loader image node implementation\n     */\n    protected LoaderImageNode createLoaderImageNode(\n            Image image, BridgeContext ctx, Element imageElement, ParsedURL purl) {\n        return new LoaderImageNode(image, ctx, imageElement, purl);\n    }\n    /**\n     * An image node for natively handled Image instance.\n     * This holds a natively handled image so that it can be drawn into\n     * the PDFGraphics2D.\n     */\n    public class LoaderImageNode extends AbstractGraphicsNode {\n        /** image */\n        protected final Image image;\n        /** bridge context */\n        protected final BridgeContext ctx;\n        /** image element */\n        protected final Element imageElement;\n        /** parsed url */\n        protected final ParsedURL purl;\n        /** original graphics mode */\n        protected GraphicsNode origGraphicsNode;\n        /**\n         * Create a new image node for drawing natively handled images\n         * into PDF graphics.\n         * @param image the JPEG image\n         * @param ctx the bridge context\n         * @param imageElement the SVG image element\n         * @param purl the URL to the image\n         */\n        public LoaderImageNode(Image image, BridgeContext ctx,\n                           Element imageElement, ParsedURL purl) {\n            this.image = image;\n            this.ctx  = ctx;\n            this.imageElement = imageElement;\n            this.purl = purl;\n        }\n        /** {@inheritDoc} */\n        public Shape getOutline() {\n            return getPrimitiveBounds();\n        }\n        /** {@inheritDoc} */\n        public void primitivePaint(Graphics2D g2d) {\n            if (g2d instanceof NativeImageHandler) {\n                NativeImageHandler nativeImageHandler = (NativeImageHandler) g2d;\n                float x = 0;\n                float y = 0;\n                try {\n                    float width = image.getSize().getWidthPx();\n                    float height = image.getSize().getHeightPx();\n                    nativeImageHandler.addNativeImage(image, x, y, width, height);\n                } catch (Exception e) {<fim_middle>// function below is feature envy and long method\n"}