{"text": "<fim_prefix>/*\n * Copyright 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.template.soy.passes;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.template.soy.base.internal.IdGenerator;\nimport com.google.template.soy.base.internal.SoyFileKind;\nimport com.google.template.soy.error.ErrorReporter;\nimport com.google.template.soy.error.SoyErrorKind;\nimport com.google.template.soy.error.SoyErrorKind.StyleAllowance;\nimport com.google.template.soy.error.SoyErrors;\nimport com.google.template.soy.soytree.CallBasicNode;\nimport com.google.template.soy.soytree.SoyFileNode;\nimport com.google.template.soy.soytree.SoyTreeUtils;\nimport com.google.template.soy.soytree.TemplateMetadata;\nimport com.google.template.soy.soytree.TemplateRegistry;\n\n/**\n * Visitor to check that there are no external calls. Used by backends that disallow external calls,\n * such as the Tofu (JavaObj) backend.\n */\npublic final class StrictDepsPass extends CompilerFileSetPass {\n\n  private static final SoyErrorKind CALL_TO_UNDEFINED_TEMPLATE =\n      SoyErrorKind.of(\"Undefined template ''{0}''.{1}\", StyleAllowance.NO_PUNCTUATION);\n  private static final SoyErrorKind CALL_TO_INDIRECT_DEPENDENCY =\n      SoyErrorKind.of(\n          \"Call is satisfied only by indirect dependency {0}. Add it as a direct dependency.\"\n          ,\n          StyleAllowance.NO_PUNCTUATION);\n\n  private final ErrorReporter errorReporter;\n\n  public StrictDepsPass(ErrorReporter errorReporter) {\n    this.errorReporter = errorReporter;\n  }\n\n  @Override\n  public Result run(\n      ImmutableList<SoyFileNode> sourceFiles, IdGenerator idGenerator, TemplateRegistry registry) {\n    for (SoyFileNode file : sourceFiles) {\n      for (CallBasicNode node : SoyTreeUtils.getAllNodesOfType(file, CallBasicNode.class)) {\n        checkBasicCall(node, registry);\n      }\n    }\n    return Result.CONTINUE;\n  }\n\n  // TODO(gboyer): Consider some deltemplate checking, but it's hard to make a coherent case for\n  // deltemplates since it's legitimate to have zero implementations, or to have the implementation\n  // in a different part of the dependency graph (if it's late-bound).\n<fim_suffix>  private void checkBasicCall(CallBasicNode node, TemplateRegistry registry) {\n    TemplateMetadata callee = registry.getBasicTemplateOrElement(node.getCalleeName());\n\n    if (callee == null) {\n      String extraErrorMessage =\n          SoyErrors.getDidYouMeanMessage(\n              registry.getBasicTemplateOrElementNames(), node.getCalleeName());\n      errorReporter.report(\n          node.getSourceLocation(),\n          CALL_TO_UNDEFINED_TEMPLATE,\n          node.getCalleeName(),\n          extraErrorMessage);\n    } else {\n      SoyFileKind calleeKind = callee.getSoyFileKind();\n      String callerFilePath = node.getSourceLocation().getFilePath();\n      String calleeFilePath = callee.getSourceLocation().getFilePath();\n      if (calleeKind == SoyFileKind.INDIRECT_DEP) {\n        errorReporter.report(\n            node.getSourceLocation(),\n            CALL_TO_INDIRECT_DEPENDENCY,\n            calleeFilePath);\n      }\n    }\n  }\n}<fim_middle>// function below has no smell\n"}