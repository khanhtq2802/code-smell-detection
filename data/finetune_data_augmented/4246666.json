{"text": "<fim_prefix>package org.apache.commons.jcs.auxiliary.lateral.javagroups;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport org.apache.commons.jcs.auxiliary.lateral.behavior.ILateralCacheAttributes;\nimport org.apache.commons.jcs.auxiliary.lateral.behavior.ILateralCacheListener;\nimport org.apache.commons.jcs.auxiliary.lateral.javagroups.behavior.ILateralCacheJGListener;\nimport org.apache.commons.jcs.engine.control.CompositeCacheManager;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\n/**\n * @version $Id: LateralGroupCacheJGListener.java,v 1.6 2002/02/15 04:33:37\n *          jtaylor Exp $\n */\n<fim_suffix>public class LateralGroupCacheJGListener\n    extends LateralCacheJGListener\n    implements ILateralCacheJGListener\n{\n    private static final Log log = LogFactory.getLog( LateralGroupCacheJGListener.class );\n\n    /**\n     * Constructor for the LateralGroupCacheJGListener object\n     *\n     * @param ilca\n     */\n    protected LateralGroupCacheJGListener( ILateralCacheAttributes ilca )\n    {\n        super( ilca );\n        log.debug( \"creating LateralGroupCacheJGListener\" );\n    }\n\n    /**\n     * Gets the instance attribute of the LateralGroupCacheJGListener class\n     * @param ilca\n     *\n     * @return The instance value\n     */\n    public static ILateralCacheListener getInstance( ILateralCacheAttributes ilca )\n    {\n        //throws IOException, NotBoundException\n        ILateralCacheListener ins = (ILateralCacheListener) instances\n            .get( String.valueOf( ilca.getUdpMulticastAddr() ) );\n        synchronized ( LateralGroupCacheJGListener.class )\n        {\n            if ( ins == null )\n            {\n                ins = new LateralGroupCacheJGListener( ilca );\n                ins.init();\n            }\n            if ( log.isDebugEnabled() )\n            {\n                log.debug( \"created new listener \" + ilca.getUdpMulticastAddr() );\n            }\n            instances.put( String.valueOf( ilca.getUdpMulticastAddr() ), ins );\n        }\n\n        return ins;\n    }\n\n    // override for new funcitonality\n    // lazy init is too slow, find a better way\n    /**\n     * Gets the cacheManager attribute of the LateralGroupCacheJGListener object\n     */\n    protected void ensureCacheManager()\n    {\n        try\n        {\n            if ( cacheMgr == null )\n            {\n                cacheMgr = CompositeCacheManager.getInstance();\n                if ( log.isDebugEnabled() )\n                {\n                    log.debug( \" groupcache cacheMgr = \" + cacheMgr );\n                }\n            }\n            else\n            {\n                if ( log.isDebugEnabled() )\n                {\n                    log.debug( \"already got groupcache cacheMgr = \" + cacheMgr );\n                }\n            }\n        }\n        catch ( Exception e )\n        {\n            log.error( e );\n        }\n    }\n\n}<fim_middle>// class below has no smell\n"}