{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.mongodb.gridfs.springboot;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.annotation.Generated;\nimport org.apache.camel.CamelContext;\nimport org.apache.camel.component.mongodb.gridfs.GridFsComponent;\nimport org.apache.camel.spi.ComponentCustomizer;\nimport org.apache.camel.spi.HasId;\nimport org.apache.camel.spring.boot.CamelAutoConfiguration;\nimport org.apache.camel.spring.boot.ComponentConfigurationProperties;\nimport org.apache.camel.spring.boot.util.CamelPropertiesHelper;\nimport org.apache.camel.spring.boot.util.ConditionalOnCamelContextAndAutoConfigurationBeans;\nimport org.apache.camel.spring.boot.util.GroupCondition;\nimport org.apache.camel.spring.boot.util.HierarchicalPropertiesEvaluator;\nimport org.apache.camel.support.IntrospectionSupport;\nimport org.apache.camel.util.ObjectHelper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Lazy;\n\n/**\n * Generated by camel-package-maven-plugin - do not edit this file!\n */\n<fim_suffix>@Generated(\"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo\")\n@Configuration\n@Conditional({ConditionalOnCamelContextAndAutoConfigurationBeans.class,\n        GridFsComponentAutoConfiguration.GroupConditions.class})\n@AutoConfigureAfter(CamelAutoConfiguration.class)\n@EnableConfigurationProperties({ComponentConfigurationProperties.class,\n        GridFsComponentConfiguration.class})\npublic class GridFsComponentAutoConfiguration {\n\n    private static final Logger LOGGER = LoggerFactory\n            .getLogger(GridFsComponentAutoConfiguration.class);\n    @Autowired\n    private ApplicationContext applicationContext;\n    @Autowired\n    private CamelContext camelContext;\n    @Autowired\n    private GridFsComponentConfiguration configuration;\n    @Autowired(required = false)\n    private List<ComponentCustomizer<GridFsComponent>> customizers;\n\n    static class GroupConditions extends GroupCondition {\n        public GroupConditions() {\n            super(\"camel.component\", \"camel.component.mongodb-gridfs\");\n        }\n    }\n\n    @Lazy\n    @Bean(name = \"mongodb-gridfs-component\")\n    @ConditionalOnMissingBean(GridFsComponent.class)\n    public GridFsComponent configureGridFsComponent() throws Exception {\n        GridFsComponent component = new GridFsComponent();\n        component.setCamelContext(camelContext);\n        Map<String, Object> parameters = new HashMap<>();\n        IntrospectionSupport.getProperties(configuration, parameters, null,\n                false);\n        for (Map.Entry<String, Object> entry : parameters.entrySet()) {\n            Object value = entry.getValue();\n            Class<?> paramClass = value.getClass();\n            if (paramClass.getName().endsWith(\"NestedConfiguration\")) {\n                Class nestedClass = null;\n                try {\n                    nestedClass = (Class) paramClass.getDeclaredField(\n                            \"CAMEL_NESTED_CLASS\").get(null);\n                    HashMap<String, Object> nestedParameters = new HashMap<>();\n                    IntrospectionSupport.getProperties(value, nestedParameters,\n                            null, false);\n                    Object nestedProperty = nestedClass.newInstance();\n                    CamelPropertiesHelper.setCamelProperties(camelContext,\n                            nestedProperty, nestedParameters, false);\n                    entry.setValue(nestedProperty);\n                } catch (NoSuchFieldException e) {\n                }\n            }\n        }\n        CamelPropertiesHelper.setCamelProperties(camelContext, component,\n                parameters, false);\n        if (ObjectHelper.isNotEmpty(customizers)) {\n            for (ComponentCustomizer<GridFsComponent> customizer : customizers) {\n                boolean useCustomizer = (customizer instanceof HasId)\n                        ? HierarchicalPropertiesEvaluator.evaluate(\n                                applicationContext.getEnvironment(),\n                                \"camel.component.customizer\",\n                                \"camel.component.mongodb-gridfs.customizer\",\n                                ((HasId) customizer).getId())\n                        : HierarchicalPropertiesEvaluator.evaluate(\n                                applicationContext.getEnvironment(),\n                                \"camel.component.customizer\",\n                                \"camel.component.mongodb-gridfs.customizer\");\n                if (useCustomizer) {\n                    LOGGER.debug(\"Configure component {}, with customizer {}\",\n                            component, customizer);\n                    customizer.customize(component);\n                }\n            }\n        }\n        return component;\n    }\n}<fim_middle>// class below has no smell\n"}