{"text": "<fim_prefix>     * @see         #getSelectedIndex\n     */\n    public synchronized void select(String str) {\n        int index = pItems.indexOf(str);\n        if (index >= 0) {\n            select(index);\n        }\n    }\n    /**\n     * Adds the specified item listener to receive item events from\n     * this {@code Choice} menu.  Item events are sent in response\n     * to user input, but not in response to calls to {@code select}.\n     * If l is {@code null}, no exception is thrown and no action\n     * is performed.\n     * <p>Refer to <a href=\"doc-files/AWTThreadIssues.html#ListenersThreads\"\n     * >AWT Threading Issues</a> for details on AWT's threading model.\n     * @param         l    the item listener\n     * @see           #removeItemListener\n     * @see           #getItemListeners\n     * @see           #select\n     * @see           java.awt.event.ItemEvent\n     * @see           java.awt.event.ItemListener\n     * @since         1.1\n     */\n    public synchronized void addItemListener(ItemListener l) {\n        if (l == null) {\n           return;\n        }\n        itemListener = AWTEventMulticaster.add(itemListener, l);\n        newEventsOnly = true;\n    }\n    /**\n     * Removes the specified item listener so that it no longer receives\n     * item events from this {@code Choice} menu.\n     * If l is {@code null}, no exception is thrown and no\n     * action is performed.\n     * <p>Refer to <a href=\"doc-files/AWTThreadIssues.html#ListenersThreads\"\n     * >AWT Threading Issues</a> for details on AWT's threading model.\n     * @param         l    the item listener\n     * @see           #addItemListener\n     * @see           #getItemListeners\n     * @see           java.awt.event.ItemEvent\n     * @see           java.awt.event.ItemListener\n     * @since         1.1\n     */\n    public synchronized void removeItemListener(ItemListener l) {\n        if (l == null) {\n            return;\n        }\n        itemListener = AWTEventMulticaster.remove(itemListener, l);\n    }\n    /**\n     * Returns an array of all the item listeners\n     * registered on this choice.\n     *\n     * @return all of this choice's {@code ItemListener}s\n     *         or an empty array if no item\n     *         listeners are currently registered\n     *\n     * @see           #addItemListener\n     * @see           #removeItemListener\n     * @see           java.awt.event.ItemEvent\n     * @see           java.awt.event.ItemListener\n     * @since 1.4\n     */\n    public synchronized ItemListener[] getItemListeners() {\n        return getListeners(ItemListener.class);\n    }\n    /**\n     * Returns an array of all the objects currently registered\n     * as <code><em>Foo</em>Listener</code>s\n     * upon this {@code Choice}.\n     * <code><em>Foo</em>Listener</code>s are registered using the\n     * <code>add<em>Foo</em>Listener</code> method.\n     *\n     * <p>\n     * You can specify the {@code listenerType} argument\n     * with a class literal, such as\n     * <code><em>Foo</em>Listener.class</code>.\n     * For example, you can query a\n     * {@code Choice c}\n     * for its item listeners with the following code:\n     *\n     * <pre>ItemListener[] ils = (ItemListener[])(c.getListeners(ItemListener.class));</pre>\n     *\n     * If no such listeners exist, this method returns an empty array.\n     *\n     * @param listenerType the type of listeners requested; this parameter\n     *          should specify an interface that descends from\n     *          {@code java.util.EventListener}\n     * @return an array of all objects registered as\n     *          <code><em>Foo</em>Listener</code>s on this choice,\n     *          or an empty array if no such\n     *          listeners have been added\n     * @exception ClassCastException if {@code listenerType}\n     *          doesn't specify a class or interface that implements\n     *          {@code java.util.EventListener}\n     *\n     * @see #getItemListeners\n     * @since 1.3\n     */\n    public <T extends EventListener> T[] getListeners(Class<T> listenerType) {\n        EventListener l = null;\n        if  (listenerType == ItemListener.class) {\n            l = itemListener;\n        } else {\n            return super.getListeners(listenerType);\n        }\n        return AWTEventMulticaster.getListeners(l, listenerType);\n    }\n    // REMIND: remove when filtering is done at lower level\n    boolean eventEnabled(AWTEvent e) {\n        if (e.id == ItemEvent.ITEM_STATE_CHANGED) {\n            if ((eventMask & AWTEvent.ITEM_EVENT_MASK) != 0 ||\n                itemListener != null) {\n                return true;\n            }\n            return false;\n        }\n        return super.eventEnabled(e);\n    }\n    /**\n     * Processes events on this choice. If the event is an\n     * instance of {@code ItemEvent}, it invokes the\n     * {@code processItemEvent} method. Otherwise, it calls its\n     * superclass's {@code processEvent} method.\n     * <p>Note that if the event parameter is {@code null}\n     * the behavior is unspecified and may result in an\n     * exception.\n     *\n     * @param      e the event\n     * @see        java.awt.event.ItemEvent\n     * @see        #processItemEvent\n     * @since      1.1\n     */\n    protected void processEvent(AWTEvent e) {\n        if (e instanceof ItemEvent) {\n            processItemEvent((ItemEvent)e);\n            return;\n        }\n        super.processEvent(e);\n    }\n    /**\n     * Processes item events occurring on this {@code Choice}\n     * menu by dispatching them to any registered\n     * {@code ItemListener} objects.\n     * <p>\n     * This method is not called unless item events are\n     * enabled for this component. Item events are enabled\n     * when one of the following occurs:\n     * <ul>\n     * <li>An {@code ItemListener} object is registered\n     * via {@code addItemListener}.\n     * <li>Item events are enabled via {@code enableEvents}.\n     * </ul>\n     * <p>Note that if the event parameter is {@code null}\n     * the behavior is unspecified and may result in an\n     * exception.\n     *\n     * @param       e the item event\n     * @see         java.awt.event.ItemEvent\n     * @see         java.awt.event.ItemListener\n     * @see         #addItemListener(ItemListener)\n     * @see         java.awt.Component#enableEvents\n     * @since       1.1\n     */\n    protected void processItemEvent(ItemEvent e) {\n        ItemListener listener = itemListener;\n        if (listener != null) {\n            listener.itemStateChanged(e);\n        }\n    }\n    /**\n     * Returns a string representing the state of this {@code Choice}\n     * menu. This method is intended to be used only for debugging purposes,\n     * and the content and format of the returned string may vary between\n     * implementations. The returned string may be empty but may not be\n     * {@code null}.\n     *\n     * @return    the parameter string of this {@code Choice} menu\n     */\n    protected String paramString() {\n        return super.paramString() + \",current=\" + getSelectedItem();\n    }\n    /* Serialization support.\n     */\n    /*\n     * Choice Serial Data Version.\n     * @serial\n     */\n    private int choiceSerializedDataVersion = 1;\n    /**\n     * Writes default serializable fields to stream.  Writes\n     * a list of serializable {@code ItemListeners}\n     * as optional data. The non-serializable\n     * {@code ItemListeners} are detected and\n     * no attempt is made to serialize them.\n     *\n     * @param s the {@code ObjectOutputStream} to write\n     * @serialData {@code null} terminated sequence of 0\n     *   or more pairs; the pair consists of a {@code String}\n     *   and an {@code Object}; the {@code String} indicates\n     *   the type of object and is one of the following:\n     *   {@code itemListenerK} indicating an\n     *     {@code ItemListener} object\n     *\n     * @see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)\n     * @see java.awt.Component#itemListenerK\n     * @see #readObject(ObjectInputStream)\n     */\n<fim_suffix>    private void writeObject(ObjectOutputStream s)\n      throws java.io.IOException\n    {\n      s.defaultWriteObject();\n      AWTEventMulticaster.save(s, itemListenerK, itemListener);\n      s.writeObject(null);\n    }<fim_middle>// function below has no smell\n"}