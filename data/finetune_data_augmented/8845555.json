{"text": "<fim_prefix>        return getIre();\n      case ACE:\n        return getAce();\n      case ASE:\n        return getAse();\n      case AE:\n        return getAe();\n      }\n      throw new IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new IllegalArgumentException();\n      }\n      switch (field) {\n      case SUCCESS:\n        return isSetSuccess();\n      case IRE:\n        return isSetIre();\n      case ACE:\n        return isSetAce();\n      case ASE:\n        return isSetAse();\n      case AE:\n        return isSetAe();\n      }\n      throw new IllegalStateException();\n    }\n    @Override\n    public boolean equals(Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof registerDataProduct_result)\n        return this.equals((registerDataProduct_result)that);\n      return false;\n    }\n    public boolean equals(registerDataProduct_result that) {\n      if (that == null)\n        return false;\n      boolean this_present_success = true && this.isSetSuccess();\n      boolean that_present_success = true && that.isSetSuccess();\n      if (this_present_success || that_present_success) {\n        if (!(this_present_success && that_present_success))\n          return false;\n        if (!this.success.equals(that.success))\n          return false;\n      }\n      boolean this_present_ire = true && this.isSetIre();\n      boolean that_present_ire = true && that.isSetIre();\n      if (this_present_ire || that_present_ire) {\n        if (!(this_present_ire && that_present_ire))\n          return false;\n        if (!this.ire.equals(that.ire))\n          return false;\n      }\n      boolean this_present_ace = true && this.isSetAce();\n      boolean that_present_ace = true && that.isSetAce();\n      if (this_present_ace || that_present_ace) {\n        if (!(this_present_ace && that_present_ace))\n          return false;\n        if (!this.ace.equals(that.ace))\n          return false;\n      }\n      boolean this_present_ase = true && this.isSetAse();\n      boolean that_present_ase = true && that.isSetAse();\n      if (this_present_ase || that_present_ase) {\n        if (!(this_present_ase && that_present_ase))\n          return false;\n        if (!this.ase.equals(that.ase))\n          return false;\n      }\n      boolean this_present_ae = true && this.isSetAe();\n      boolean that_present_ae = true && that.isSetAe();\n      if (this_present_ae || that_present_ae) {\n        if (!(this_present_ae && that_present_ae))\n          return false;\n        if (!this.ae.equals(that.ae))\n          return false;\n      }\n      return true;\n    }\n    @Override\n    public int hashCode() {\n      List<Object> list = new ArrayList<Object>();\n      boolean present_success = true && (isSetSuccess());\n      list.add(present_success);\n      if (present_success)\n        list.add(success);\n      boolean present_ire = true && (isSetIre());\n      list.add(present_ire);\n      if (present_ire)\n        list.add(ire);\n      boolean present_ace = true && (isSetAce());\n      list.add(present_ace);\n      if (present_ace)\n        list.add(ace);\n      boolean present_ase = true && (isSetAse());\n      list.add(present_ase);\n      if (present_ase)\n        list.add(ase);\n      boolean present_ae = true && (isSetAe());\n      list.add(present_ae);\n      if (present_ae)\n        list.add(ae);\n      return list.hashCode();\n    }\n    @Override\n    public int compareTo(registerDataProduct_result other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetSuccess()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetIre()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetAce()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetAse()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetAe()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n      }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"registerDataProduct_result(\");\n      boolean first = true;\n      sb.append(\"success:\");\n      if (this.success == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.success);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"ire:\");\n      if (this.ire == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.ire);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"ace:\");\n      if (this.ace == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.ace);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"ase:\");\n      if (this.ase == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.ase);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"ae:\");\n      if (this.ae == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.ae);\n      }\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n      try {\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n<fim_suffix>    private static class registerDataProduct_resultStandardSchemeFactory implements SchemeFactory {\n      public registerDataProduct_resultStandardScheme getScheme() {\n        return new registerDataProduct_resultStandardScheme();\n      }\n    }<fim_middle>// class below has no smell\n"}