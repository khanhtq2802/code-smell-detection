{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.jena.atlas.lib.cache;\n\nimport static java.util.Arrays.asList;\n\nimport java.util.Arrays ;\nimport java.util.Iterator ;\nimport java.util.concurrent.Callable ;\nimport java.util.function.BiConsumer;\n\nimport org.apache.jena.atlas.iterator.Iter ;\nimport org.apache.jena.atlas.lib.Cache ;\n\n\n/**\n * A simple fixed size cache that uses the hash code to address a slot.\n * Clash policy is to overwrite.\n * No object creation during lookup or insert.\n */\n\npublic class CacheSimple<K,V> implements Cache<K,V>\n{\n    private final V[] values ; \n    private final K[] keys ;\n    private final int size ;\n    private int currentSize = 0 ;\n    private BiConsumer<K,V> dropHandler = null ;\n    \n    public CacheSimple(int size)\n    { \n        @SuppressWarnings(\"unchecked\")\n        V[] x =  (V[])new Object[size] ;\n        values = x ;\n        \n        @SuppressWarnings(\"unchecked\")\n        K[]  z =  (K[])new Object[size] ;\n        keys = z ;\n        \n        this.size = size ;\n    }\n    \n\n    @Override\n    public void clear()\n    { \n        Arrays.fill(values, null) ;\n        Arrays.fill(keys, null) ;\n        // drop handler\n        currentSize = 0 ;\n    }\n\n    @Override\n    public boolean containsKey(K key)\n    {\n        return getIfPresent(key) != null ;\n    }\n\n    // Return key index : -(index+1) if the key slot is empty.\n    private final int index(K key)\n    { \n        int x = (key.hashCode()&0x7fffffff) % size ;\n        if ( keys[x] != null )\n            return x ; \n        return -x-1 ;\n    }\n    \n    private final int decode(int x)\n    { \n        if ( x >= 0 ) return x ;\n        return -x-1 ;\n    }\n    \n    @Override\n    public V getIfPresent(K key)\n    {\n        int x = index(key) ;\n        if ( x < 0 )\n            return null ; \n        return values[x] ;\n    }\n\n    @Override\n    public V getOrFill(K key, Callable<V> callable) {\n        return CacheOps.getOrFillSync(this, key, callable) ;\n    }\n\n    @Override\n    public void put(K key, V thing)\n    {\n        int x = index(key) ; \n        x = decode(x) ;\n        V old = values[x] ;\n        // Drop the old K->V\n        if ( old != null ) {\n            if ( old.equals(thing) )\n                // Replace like-with-like.\n                return ;\n            if ( dropHandler != null )\n                dropHandler.accept(keys[x], old) ;\n            currentSize-- ;\n        }\n        \n        // Already decremented if we are overwriting a full slot.\n        values[x] = thing ;\n        if ( thing == null ) {\n            //put(,null) is a remove.\n            keys[x] = null ;\n        } else {\n            currentSize++ ;\n            keys[x] = key ;\n        }\n    }\n\n    @Override\n    public void remove(K key)\n    {\n        put(key, null) ;\n    }\n\n<fim_suffix>    @Override\n    public long size()\n    {\n        return currentSize ;\n//        long x = 0 ;\n//        for ( K key : keys )\n//            if ( key != null )\n//                x++ ;\n//        return x ;\n    }\n\n    @Override\n    public Iterator<K> keys()\n    {\n        Iterator<K> iter = asList(keys).iterator() ;\n        return Iter.removeNulls(iter) ;\n    }\n\n    @Override\n    public boolean isEmpty()\n    {\n        return currentSize == 0 ;\n    }\n\n    /** Callback for entries when dropped from the cache */\n    @Override\n    public void setDropHandler(BiConsumer<K,V> dropHandler)\n    {\n        this.dropHandler = dropHandler ;\n    }\n}<fim_middle>// function below has no smell\n"}