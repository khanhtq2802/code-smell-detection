{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;\n\nimport org.apache.bigtop.datagenerators.samplers.SeedFactory;\nimport org.apache.bigtop.datagenerators.samplers.samplers.ExponentialSampler;\nimport org.apache.bigtop.datagenerators.samplers.samplers.GaussianSampler;\nimport org.apache.bigtop.datagenerators.samplers.samplers.Sampler;\n\npublic class ProductCategoryUsageSimulator\n{\n\tfinal private double amountUsedAverage;\n\tfinal private double amountUsedVariance;\n\n\tfinal private Sampler<Double> timestepSampler;\n\tfinal private Sampler<Double> R;\n\n<fim_suffix>\tpublic ProductCategoryUsageSimulator(double dailyUsageRate, double amountUsedAverage,\n\t\t\tdouble amountUsedVariance, SeedFactory seedFactory)\n\t{\n\t\tthis.amountUsedAverage = amountUsedAverage;\n\t\tthis.amountUsedVariance = amountUsedVariance;\n\n\t\ttimestepSampler = new ExponentialSampler(dailyUsageRate, seedFactory);\n\t\tR = new GaussianSampler(0.0, 1.0, seedFactory);\n\t}\n\n\tprivate void step(ProductCategoryUsageTrajectory trajectory) throws Exception\n\t{\n\t\t// given in days since last usage\n\t\tdouble timestep = timestepSampler.sample();\n\n\t\tdouble r = R.sample();\n\n\t\t// given in units per day\n\t\tdouble usageAmount = this.amountUsedAverage * timestep +\n\t\t\t\tMath.sqrt(this.amountUsedVariance * timestep) * r;\n\n\t\t// can't use a negative amount\n\t\tusageAmount = Math.max(usageAmount, 0.0);\n\n\t\tdouble remainingAmount = Math.max(0.0, trajectory.getLastAmount() - usageAmount);\n\t\tdouble time = trajectory.getLastTime() + timestep;\n\n\t\ttrajectory.append(time, remainingAmount);\n\t}\n\n\tpublic ProductCategoryUsageTrajectory simulate(double initialTime, double initialAmount) throws Exception\n\t{\n\t\tProductCategoryUsageTrajectory trajectory = new ProductCategoryUsageTrajectory(initialTime, initialAmount);\n\n\t\twhile(trajectory.getLastAmount() > 0.0)\n\t\t{\n\t\t\tstep(trajectory);\n\t\t}\n\n\t\treturn trajectory;\n\t}\n}<fim_middle>// function below has no smell\n"}