{"text": "<fim_prefix>\t\t//'}'\n\t\tpublic Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }\n\t\t//'?'\n\t\tpublic Keyword getQuestionMarkKeyword_3() { return cQuestionMarkKeyword_3; }\n\t\t//'=>'\n\t\tpublic Keyword getEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignGreaterThanSignKeyword_4; }\n\t\t//guarded=Parenthesized\n\t\tpublic Assignment getGuardedAssignment_5() { return cGuardedAssignment_5; }\n\t\t//Parenthesized\n\t\tpublic RuleCall getGuardedParenthesizedParserRuleCall_5_0() { return cGuardedParenthesizedParserRuleCall_5_0; }\n\t}\n\tpublic class OrExpressionElements extends AbstractParserRuleElementFinder {\n\t\tprivate final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), \"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.OrExpression\");\n\t\tprivate final Group cGroup = (Group)rule.eContents().get(1);\n\t\tprivate final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);\n\t\tprivate final Group cGroup_1 = (Group)cGroup.eContents().get(1);\n\t\tprivate final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);\n\t\tprivate final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);\n\t\tprivate final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);\n\t\tprivate final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);\n\t\t//OrExpression Expression:\n\t\t//\tAndExpression ({OrExpression.left=current} '||' right=AndExpression)*\n\t\t@Override public ParserRule getRule() { return rule; }\n\t\t//AndExpression ({OrExpression.left=current} '||' right=AndExpression)*\n\t\tpublic Group getGroup() { return cGroup; }\n\t\t//AndExpression\n\t\tpublic RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }\n\t\t//({OrExpression.left=current} '||' right=AndExpression)*\n\t\tpublic Group getGroup_1() { return cGroup_1; }\n\t\t//{OrExpression.left=current}\n\t\tpublic Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }\n\t\t//'||'\n\t\tpublic Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }\n\t\t//right=AndExpression\n\t\tpublic Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }\n\t\t//AndExpression\n\t\tpublic RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }\n\t}\n\tpublic class AndExpressionElements extends AbstractParserRuleElementFinder {\n\t\tprivate final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), \"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.AndExpression\");\n\t\tprivate final Group cGroup = (Group)rule.eContents().get(1);\n\t\tprivate final RuleCall cNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);\n\t\tprivate final Group cGroup_1 = (Group)cGroup.eContents().get(1);\n\t\tprivate final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);\n\t\tprivate final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);\n\t\tprivate final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);\n\t\tprivate final RuleCall cRightNotExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);\n\t\t//AndExpression Expression:\n\t\t//\tNotExpression ({AndExpression.left=current} '&&' right=NotExpression)*\n\t\t@Override public ParserRule getRule() { return rule; }\n\t\t//NotExpression ({AndExpression.left=current} '&&' right=NotExpression)*\n\t\tpublic Group getGroup() { return cGroup; }\n\t\t//NotExpression\n\t\tpublic RuleCall getNotExpressionParserRuleCall_0() { return cNotExpressionParserRuleCall_0; }\n\t\t//({AndExpression.left=current} '&&' right=NotExpression)*\n\t\tpublic Group getGroup_1() { return cGroup_1; }\n\t\t//{AndExpression.left=current}\n\t\tpublic Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }\n\t\t//'&&'\n\t\tpublic Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }\n\t\t//right=NotExpression\n\t\tpublic Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }\n\t\t//NotExpression\n\t\tpublic RuleCall getRightNotExpressionParserRuleCall_1_2_0() { return cRightNotExpressionParserRuleCall_1_2_0; }\n\t}\n<fim_suffix>\tpublic class NotExpressionElements extends AbstractParserRuleElementFinder {\n\t\tprivate final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), \"org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.NotExpression\");\n\t\tprivate final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);\n\t\tprivate final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);\n\t\tprivate final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);\n\t\tprivate final Action cNotExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);\n\t\tprivate final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);\n\t\tprivate final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);\n\t\tprivate final RuleCall cValueNotExpressionParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);\n\t\t//NotExpression Expression:\n\t\t//\tPrimaryExpression | {NotExpression} '!' value=NotExpression\n\t\t@Override public ParserRule getRule() { return rule; }\n\t\t//PrimaryExpression | {NotExpression} '!' value=NotExpression\n\t\tpublic Alternatives getAlternatives() { return cAlternatives; }\n\t\t//PrimaryExpression\n\t\tpublic RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }\n\t\t//{NotExpression} '!' value=NotExpression\n\t\tpublic Group getGroup_1() { return cGroup_1; }\n\t\t//{NotExpression}\n\t\tpublic Action getNotExpressionAction_1_0() { return cNotExpressionAction_1_0; }\n\t\t//'!'\n\t\tpublic Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }\n\t\t//value=NotExpression\n\t\tpublic Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }\n\t\t//NotExpression\n\t\tpublic RuleCall getValueNotExpressionParserRuleCall_1_2_0() { return cValueNotExpressionParserRuleCall_1_2_0; }\n\t}<fim_middle>// class below has no smell\n"}