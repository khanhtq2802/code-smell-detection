{"text": "<fim_prefix>/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.android.exoplayer2.offline;\n\nimport android.net.Uri;\nimport android.support.annotation.Nullable;\nimport com.google.android.exoplayer2.util.Assertions;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/** {@link DownloadAction} for {@link SegmentDownloader}s. */\npublic abstract class SegmentDownloadAction extends DownloadAction {\n\n  /** Base class for {@link SegmentDownloadAction} {@link Deserializer}s. */\n  protected abstract static class SegmentDownloadActionDeserializer extends Deserializer {\n\n    public SegmentDownloadActionDeserializer(String type, int version) {\n      super(type, version);\n    }\n\n    @Override\n    public final DownloadAction readFromStream(int version, DataInputStream input)\n        throws IOException {\n      Uri uri = Uri.parse(input.readUTF());\n      boolean isRemoveAction = input.readBoolean();\n      int dataLength = input.readInt();\n      byte[] data = new byte[dataLength];\n      input.readFully(data);\n      int keyCount = input.readInt();\n      List<StreamKey> keys = new ArrayList<>();\n      for (int i = 0; i < keyCount; i++) {\n        keys.add(readKey(version, input));\n      }\n      return createDownloadAction(uri, isRemoveAction, data, keys);\n    }\n\n    /** Deserializes a key from the {@code input}. */\n    protected StreamKey readKey(int version, DataInputStream input) throws IOException {\n      int periodIndex = input.readInt();\n      int groupIndex = input.readInt();\n      int trackIndex = input.readInt();\n      return new StreamKey(periodIndex, groupIndex, trackIndex);\n    }\n\n    /** Returns a {@link DownloadAction}. */\n    protected abstract DownloadAction createDownloadAction(\n        Uri manifestUri, boolean isRemoveAction, byte[] data, List<StreamKey> keys);\n  }\n\n  public final List<StreamKey> keys;\n\n  /**\n   * @param type The type of the action.\n   * @param version The action version.\n   * @param uri The URI of the media being downloaded.\n   * @param isRemoveAction Whether the data will be removed. If {@code false} it will be downloaded.\n   * @param data Optional custom data for this action. If {@code null} an empty array will be used.\n   * @param keys Keys of tracks to be downloaded. If empty, all tracks will be downloaded. If {@code\n   *     removeAction} is true, {@code keys} must be empty.\n   */\n  protected SegmentDownloadAction(\n      String type,\n      int version,\n      Uri uri,\n      boolean isRemoveAction,\n      @Nullable byte[] data,\n      List<StreamKey> keys) {\n    super(type, version, uri, isRemoveAction, data);\n    if (isRemoveAction) {\n      Assertions.checkArgument(keys.isEmpty());\n      this.keys = Collections.emptyList();\n    } else {\n      ArrayList<StreamKey> mutableKeys = new ArrayList<>(keys);\n      Collections.sort(mutableKeys);\n      this.keys = Collections.unmodifiableList(mutableKeys);\n    }\n  }\n\n  @Override\n  public List<StreamKey> getKeys() {\n    return keys;\n  }\n\n<fim_suffix>  @Override\n  public final void writeToStream(DataOutputStream output) throws IOException {\n    output.writeUTF(uri.toString());\n    output.writeBoolean(isRemoveAction);\n    output.writeInt(data.length);\n    output.write(data);\n    output.writeInt(keys.size());\n    for (int i = 0; i < keys.size(); i++) {\n      writeKey(output, keys.get(i));\n    }\n  }\n\n  @Override\n  public boolean equals(@Nullable Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n    SegmentDownloadAction that = (SegmentDownloadAction) o;\n    return keys.equals(that.keys);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + keys.hashCode();\n    return result;\n  }\n\n  /** Serializes the {@code key} into the {@code output}. */\n  private void writeKey(DataOutputStream output, StreamKey key) throws IOException {\n    output.writeInt(key.periodIndex);\n    output.writeInt(key.groupIndex);\n    output.writeInt(key.trackIndex);\n  }\n}<fim_middle>// function below has no smell\n"}