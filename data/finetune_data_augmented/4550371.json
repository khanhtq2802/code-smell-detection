{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.fineract.portfolio.self.pockets.service;\n\nimport org.apache.fineract.infrastructure.accountnumberformat.domain.EntityAccountType;\nimport org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\nimport org.apache.fineract.portfolio.savings.exception.SavingsAccountNotFoundException;\nimport org.apache.fineract.portfolio.savings.service.SavingsAccountReadPlatformService;\nimport org.apache.fineract.portfolio.self.savings.service.AppuserSavingsMapperReadService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class AccountEntityServiceForSavingsImpl implements AccountEntityService {\n\n\tprivate final String KEY = EntityAccountType.SAVINGS.name();\n\n\tprivate final PlatformSecurityContext context;\n\tprivate final AppuserSavingsMapperReadService appuserSavingsMapperReadService;\n\tprivate final SavingsAccountReadPlatformService savingsAccountReadPlatformService;\n\n\t@Autowired\n\tpublic AccountEntityServiceForSavingsImpl(final PlatformSecurityContext context,\n\t\t\tfinal AppuserSavingsMapperReadService appuserSavingsMapperReadService,\n\t\t\tfinal SavingsAccountReadPlatformService savingsAccountReadPlatformService) {\n\n\t\tthis.context = context;\n\t\tthis.appuserSavingsMapperReadService = appuserSavingsMapperReadService;\n\t\tthis.savingsAccountReadPlatformService = savingsAccountReadPlatformService;\n\n\t}\n\n\t@Override\n\tpublic String getKey() {\n\t\treturn KEY;\n\t}\n\n<fim_suffix>\t@Override\n\tpublic void validateSelfUserAccountMapping(Long accountId) {\n\n\t\tif (!this.appuserSavingsMapperReadService.isSavingsMappedToUser(accountId,\n\t\t\t\tthis.context.getAuthenticatedUserIfPresent().getId())) {\n\t\t\tthrow new SavingsAccountNotFoundException(accountId);\n\n\t\t}\n\t}\n\n\t@Override\n\tpublic String retrieveAccountNumberByAccountId(Long accountId) {\n\t\treturn this.savingsAccountReadPlatformService.retrieveAccountNumberByAccountId(accountId);\n\t}\n\n}<fim_middle>// function below has no smell\n"}