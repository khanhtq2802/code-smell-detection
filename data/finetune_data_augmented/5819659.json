{"text": "<fim_prefix>\n<fim_suffix>public class ExtendedLogger implements Logger {\n  private final UimaContext context;\n  public ExtendedLogger(final UimaContext aContext) {\n    context = aContext;\n  }\n  @Deprecated\n  public void log(String aMessage) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        logger.log(aMessage);\n      }\n    }\n  }\n  @Deprecated\n  public void log(String aResourceBundleName, String aMessageKey, Object[] aArguments) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        logger.log(aResourceBundleName, aMessageKey, aArguments);\n      }\n    }\n  }\n  @Deprecated\n  public void logException(Exception aException) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        logger.logException(aException);\n      }\n    }\n  }\n  @Deprecated\n  public void setOutputStream(PrintStream aStream) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        context.getLogger().setOutputStream(aStream);\n      }\n    }\n  }\n  @Deprecated\n  public void setOutputStream(OutputStream aStream) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        context.getLogger().setOutputStream(aStream);\n      }\n    }\n  }\n  public void log(Level level, String aMessage) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null && logger.isLoggable(level)) {\n        logger.log(getClass().getName(), level, aMessage, null);\n      }\n    }\n  }\n  public void log(Level level, String aMessage, Object param1) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null && logger.isLoggable(level)) {\n        String result = MessageFormat.format(aMessage, new Object[] { param1 });\n        logger.log(getClass().getName(), level, result, null);\n      }\n    }\n  }\n  public void log(Level level, String aMessage, Object[] params) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null && logger.isLoggable(level)) {\n        String result = MessageFormat.format(aMessage, params);\n        logger.log(getClass().getName(), level, result, null);\n      }\n    }\n  }\n  public void log(Level level, String aMessage, Throwable thrown) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null && logger.isLoggable(level)) {\n        logger.log(getClass().getName(), level, aMessage, thrown);\n      }\n    }\n  }\n  public void logrb(Level level, String sourceClass, String sourceMethod, String bundleName,\n          String msgKey) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null && logger.isLoggable(level)) {\n        String result = I18nUtil.localizeMessage(bundleName, msgKey, null,\n                getExtensionClassLoader());\n        logger.log(getClass().getName(), level, result, null);\n      }\n    }\n  }\n  public void logrb(Level level, String sourceClass, String sourceMethod, String bundleName,\n          String msgKey, Object param1) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null && logger.isLoggable(level)) {\n        String result = I18nUtil.localizeMessage(bundleName, msgKey, new Object[] { param1 },\n                getExtensionClassLoader());\n        logger.log(getClass().getName(), level, result, null);\n      }\n    }\n  }\n  public void logrb(Level level, String sourceClass, String sourceMethod, String bundleName,\n          String msgKey, Object[] params) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null && logger.isLoggable(level)) {\n        String result = I18nUtil.localizeMessage(bundleName, msgKey, params,\n                getExtensionClassLoader());\n        logger.log(getClass().getName(), level, result, null);\n      }\n    }\n  }\n  public void logrb(Level level, String sourceClass, String sourceMethod, String bundleName,\n          String msgKey, Throwable thrown) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null && logger.isLoggable(level)) {\n        String result = I18nUtil.localizeMessage(bundleName, msgKey, null,\n                getExtensionClassLoader());\n        logger.log(getClass().getName(), level, result, thrown);\n      }\n    }\n  }\n  public void log(String wrapperFQCN, Level level, String message, Throwable thrown) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        context.getLogger().log(wrapperFQCN, level, message, thrown);\n      }\n    }\n  }\n  public boolean isLoggable(Level level) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        return context.getLogger().isLoggable(level);\n      }\n    }\n    return false;\n  }\n  public void setLevel(Level level) {\n    context.getLogger().setLevel(level);\n  }\n  public void setResourceManager(ResourceManager resourceManager) {\n    context.getLogger().setResourceManager(resourceManager);\n  }\n  /**\n   * Logs a message at {@link Level#FINE}.\n   * \n   * @param paramObject\n   *          a message.\n   */\n  public void debug(Object paramObject) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        context.getLogger()\n                .log(getClass().getName(), Level.FINE, String.valueOf(paramObject), null);\n      }\n    }\n  }\n  /**\n   * Logs a message at {@link Level#FINE}.\n   * \n   * @param paramObject\n   *          a message.\n   * @param paramThrowable\n   *          a cause.\n   */\n  public void debug(Object paramObject, Throwable paramThrowable) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        context.getLogger().log(getClass().getName(), Level.FINE, String.valueOf(paramObject),\n                paramThrowable);\n      }\n    }\n  }\n  /**\n   * Logs a message at {@link Level#SEVERE}.\n   * \n   * @param paramObject\n   *          a message.\n   */\n  public void error(Object paramObject) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        context.getLogger().log(getClass().getName(), Level.SEVERE, String.valueOf(paramObject),\n                null);\n      }\n    }\n  }\n  /**\n   * Logs a message at {@link Level#SEVERE}.\n   * \n   * @param paramObject\n   *          a message.\n   * @param paramThrowable\n   *          a cause.\n   */\n  public void error(Object paramObject, Throwable paramThrowable) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        context.getLogger().log(getClass().getName(), Level.SEVERE, String.valueOf(paramObject),\n                paramThrowable);\n      }\n    }\n  }\n  /**\n   * Logs a message at {@link Level#INFO}.\n   * \n   * @param paramObject\n   *          a message.\n   */\n  public void info(Object paramObject) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        if (context.getLogger() instanceof JSR47Logger_impl) {\n          JSR47Logger_impl impl = (JSR47Logger_impl) context.getLogger();\n        }\n        context.getLogger()\n                .log(getClass().getName(), Level.INFO, String.valueOf(paramObject), null);\n      }\n    }\n  }\n  /**\n   * Logs a message at {@link Level#INFO}.\n   * \n   * @param paramObject\n   *          a message.\n   * @param paramThrowable\n   *          a cause.\n   */\n  public void info(Object paramObject, Throwable paramThrowable) {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        context.getLogger().log(getClass().getName(), Level.INFO, String.valueOf(paramObject),\n                paramThrowable);\n      }\n    }\n  }\n  public boolean isDebugEnabled() {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {\n        return context.getLogger().isLoggable(Level.FINE);\n      }\n    }\n    return false;\n  }\n  public boolean isErrorEnabled() {\n    if (context != null) {\n      Logger logger = context.getLogger();\n      if (logger != null) {<fim_middle>// class below has no smell\n"}