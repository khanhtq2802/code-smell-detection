{"text": "<fim_prefix>/*\n * Copyright 2012-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.retry.stats;\n\nimport java.util.ArrayList;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\nimport org.springframework.retry.RetryStatistics;\n\n/**\n * @author Dave Syer\n *\n */\n<fim_suffix>public class DefaultStatisticsRepository implements StatisticsRepository {\n\n\tprivate ConcurrentMap<String, MutableRetryStatistics> map = new ConcurrentHashMap<String, MutableRetryStatistics>();\n\n\tprivate RetryStatisticsFactory factory = new DefaultRetryStatisticsFactory();\n\n\tpublic void setRetryStatisticsFactory(RetryStatisticsFactory factory) {\n\t\tthis.factory = factory;\n\t}\n\n\t@Override\n\tpublic RetryStatistics findOne(String name) {\n\t\treturn map.get(name);\n\t}\n\n\t@Override\n\tpublic Iterable<RetryStatistics> findAll() {\n\t\treturn new ArrayList<RetryStatistics>(map.values());\n\t}\n\n\t@Override\n\tpublic void addStarted(String name) {\n\t\tgetStatistics(name).incrementStartedCount();\n\t}\n\n\t@Override\n\tpublic void addError(String name) {\n\t\tgetStatistics(name).incrementErrorCount();\n\t}\n\n\t@Override\n\tpublic void addRecovery(String name) {\n\t\tgetStatistics(name).incrementRecoveryCount();\n\t}\n\n\t@Override\n\tpublic void addComplete(String name) {\n\t\tgetStatistics(name).incrementCompleteCount();\n\t}\n\n\t@Override\n\tpublic void addAbort(String name) {\n\t\tgetStatistics(name).incrementAbortCount();\n\t}\n\n\tprivate MutableRetryStatistics getStatistics(String name) {\n\t\tMutableRetryStatistics stats;\n\t\tif (!map.containsKey(name)) {\n\t\t\tmap.putIfAbsent(name, factory.create(name));\n\t\t}\n\t\tstats = map.get(name);\n\t\treturn stats;\n\t}\n\n}<fim_middle>// class below has no smell\n"}