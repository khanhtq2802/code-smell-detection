{"text": "<fim_prefix>\t\tprivate IProject project;\n\t\tpublic GrailsProposalProvider(final IProject project,\n\t\t\t\tText text) {\n\t\t\tthis(project, new SWTTextWidget(text));\n\t\t}\n\t\tpublic GrailsProposalProvider(IProject project, ITextWidget textWidget) {\n\t\t\tthis.text = textWidget;\n\t\t\tthis.setProject(project);\n\t\t}\n\t\t/**\n\t\t * Update content assist when selected project changes.\n\t\t */\n\t\tpublic void setProject(final IProject project) {\n\t\t\tthis.proposals = null; // Shouldn't be used until initialized\n\t\t\tthis.project = project;\n\t\t\tfinal IGrailsInstall install = GrailsCoreActivator.getDefault().getInstallManager().getGrailsInstall(project);\n\t\t\tfinal String baseDir = GrailsBuildSettingsHelper.getBaseDir(project);\n\t\t\tif (gatherProposalsJob!=null) gatherProposalsJob.cancel();\n\t\t\tgatherProposalsJob = new Job(\"Retrieving available scripts\") {\n\t\t\t\t@Override\n\t\t\t\tprotected IStatus run(IProgressMonitor monitor) {\n\t\t\t\t\tList<String> proposals = new ArrayList<String>();\n\t\t\t\t\tString grailsScripts = \"file:\" + install.getHome() + \"scripts/*.groovy\";\n\t\t\t\t\tscanForScripts(grailsScripts, proposals);\n\t\t\t\t\tif (monitor.isCanceled()) return Status.CANCEL_STATUS;\n\t\t\t\t\tString projectScripts = \"file:\" + baseDir + \"/scripts/*.groovy\";\n\t\t\t\t\tscanForScripts(projectScripts, proposals);\n\t\t\t\t\tif (monitor.isCanceled()) return Status.CANCEL_STATUS;\n\t\t\t\t\tString userHome = System.getProperty(\"user.home\");\n\t\t\t\t\tString globalScripts = \"file:\" + userHome + \"/.grails/scripts/*.groovy\";\n\t\t\t\t\tscanForScripts(globalScripts, proposals);\n\t\t\t\t\tif (monitor.isCanceled()) return Status.CANCEL_STATUS;\n\t\t\t\t\tDependencyData data = PerProjectDependencyDataCache.get(project);\n\t\t\t\t\tif (data!=null) {\n\t\t\t\t\t\tString pluginsDir = data.getPluginsDirectory();\n\t\t\t\t\t\tSystem.out.println(\"pluginsDir: \"+pluginsDir);\n\t\t\t\t\t\tif (pluginsDir!=null) {\n\t\t\t\t\t\t\tString pluginScripts = \"file:\" + pluginsDir + \"/**/scripts/*.groovy\";\n\t\t\t\t\t\t\tSystem.out.println(\"looking for plugin scripts: \"+pluginScripts);\n\t\t\t\t\t\t\tscanForScripts(pluginScripts, proposals);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (monitor.isCanceled()) return Status.CANCEL_STATUS;\n\t\t\t\t\t}\n\t\t\t\t\tGrailsProposalProvider.this.proposals = proposals;\n\t\t\t\t\tgatherProposalsJob=null;\n\t\t\t\t\treturn Status.OK_STATUS;\n\t\t\t\t}\n\t\t\t};\n\t\t\tgatherProposalsJob.setSystem(true);\n\t\t\tgatherProposalsJob.setPriority(Job.INTERACTIVE);\n\t\t\tgatherProposalsJob.setRule(jobRule);\n\t\t\tgatherProposalsJob.schedule();\n\t\t}\n\t\tprivate void scanForScripts(String pattern, List<String> proposals) {\n\t\t\ttry {\n\t\t\t\tResource[] scripts = RESOLVER.getResources(pattern);\n\t\t\t\tfor (Resource script : scripts) {\n\t\t\t\t\tString scriptName = getScriptName(script.getFilename());\n\t\t\t\t\tif (!isFiltered(scriptName)) {\n\t\t\t\t\t\tproposals.add(scriptName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t// swallow exception as Spring can't really decide what to throw if dir does not exist\n\t\t\t}\n\t\t}\n\t\tprivate boolean isInitialized() {\n\t\t\treturn proposals!=null;\n\t\t}\n\t\tprotected boolean isFiltered(String scriptName) {\n\t\t\treturn scriptName.startsWith(\"_\") || scriptName.matches(\"create-app|create-plugin\");\n\t\t}\n\t\tpublic IContentProposal[] getProposals(String contents, int position) {\n\t\t\tif (!isInitialized()) {\n\t\t\t\treturn new IContentProposal[] { new GrailsContentProposal(\" -- content assist not ready yet -- \", \"\",\n\t\t\t\t\t\tnull, null) };\n\t\t\t}\n\t\t\tString prefix = contents.substring(0, position);\n\t\t\t// split out environments\n\t\t\tString[] prefixes = StringUtils.split(prefix, \" \");\n\t\t\tString environment = \"\";\n\t\t\tif (prefixes != null && prefixes.length > 1) {\n\t\t\t\tString potentialEnvironment = prefixes[0];\n\t\t\t\tif (ENVIRONMENTS.contains(potentialEnvironment)) {\n\t\t\t\t\tprefix = prefixes[1];\n\t\t\t\t\tenvironment = potentialEnvironment + \" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\tList<IContentProposal> newProposals = new ArrayList<IContentProposal>();\n\t\t\t// do it again to check second parameter for class name\n\t\t\tprefixes = StringUtils.split(prefix, \" \");\n\t\t\tif (prefixes != null && prefixes.length > 1) {\n\t\t\t\tString potentialClassName = prefixes[1];\n\t\t\t\tnew ClassContentAssistCalculator().computeProposals(new GrailsContentAssistContext(project,\n\t\t\t\t\t\tpotentialClassName), new GrailsContentAssistProposalRecorder(environment + prefixes[0],\n\t\t\t\t\t\tnewProposals));\n\t\t\t}\n\t\t\tfor (String proposal : proposals) {\n\t\t\t\tif (proposal.startsWith(prefix)) {\n\t\t\t\t\tnewProposals.add(new GrailsContentProposal(proposal, environment + proposal + \" \", null, null));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!StringUtils.hasLength(environment)) {\n\t\t\t\tfor (String proposal : ENVIRONMENTS) {\n\t\t\t\t\tif (proposal.startsWith(prefix)) {\n\t\t\t\t\t\tnewProposals.add(new GrailsContentProposal(proposal, environment + proposal + \" \", null, null));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if only one proposal is found apply it immediately\n\t\t\tif (newProposals.size() == 1) {\n\t\t\t\ttext.setText(newProposals.get(0).getContent());\n\t\t\t\ttext.setSelection(text.getText().length());\n\t\t\t\treturn new IContentProposal[0];\n\t\t\t}\n\t\t\treturn newProposals.toArray(new IContentProposal[newProposals.size()]);\n\t\t}\n\t}\n\tprivate static class GrailsContentAssistProposalRecorder implements IContentAssistProposalRecorder {\n\t\tprivate final String prefix;\n\t\tprivate final List<IContentProposal> proposals;\n\t\tpublic GrailsContentAssistProposalRecorder(String prefix, List<IContentProposal> proposals) {\n\t\t\tthis.prefix = prefix;\n\t\t\tthis.proposals = proposals;\n\t\t}\n\t\tpublic void recordProposal(Image image, int relevance, String displayText, String replaceText) {\n\t\t\tproposals.add(new GrailsContentProposal(displayText, prefix + \" \" + replaceText, null, image));\n\t\t}\n\t\tpublic void recordProposal(Image image, int relevance, String displayText, String replaceText,\n\t\t\t\tObject proposedObject) {\n\t\t\tproposals.add(new GrailsContentProposal(displayText, prefix + \" \" + replaceText, null, image));\n\t\t}\n\t}\n\tprivate static class GrailsContentAssistContext implements IContentAssistContext {\n\t\tprivate final IProject project;\n\t\tprivate final String prefix;\n\t\tpublic GrailsContentAssistContext(IProject project, String prefix) {\n\t\t\tthis.project = project;\n\t\t\tthis.prefix = prefix;\n\t\t}\n\t\tpublic String getAttributeName() {\n\t\t\t// no op\n\t\t\treturn null;\n\t\t}\n\t\tpublic Document getDocument() {\n\t\t\t// no op\n\t\t\treturn null;\n\t\t}\n\t\tpublic IFile getFile() {\n\t\t\treturn project.getFile(\".project\");\n\t\t}\n\t\tpublic String getMatchString() {\n\t\t\treturn prefix;\n\t\t}\n\t\tpublic Node getNode() {\n\t\t\t// no op\n\t\t\treturn null;\n\t\t}\n\t\tpublic Node getParentNode() {\n\t\t\t// no op\n\t\t\treturn null;\n\t\t}\n\t}\n<fim_suffix>\tprivate static class GrailsContentProposal implements IContentProposal, Comparable<GrailsContentProposal> {\n\t\tprivate String fLabel;\n\t\tprivate String fContent;\n\t\tprivate String fDescription;\n\t\tprivate Image fImage;\n\t\tpublic GrailsContentProposal(String label, String content, String description, Image image) {\n\t\t\tfLabel = label;\n\t\t\tfContent = content;\n\t\t\tfDescription = description;\n\t\t\tfImage = image;\n\t\t}\n\t\tpublic String getContent() {\n\t\t\treturn fContent;\n\t\t}\n\t\tpublic int getCursorPosition() {\n\t\t\tif (fContent != null) {\n\t\t\t\treturn fContent.length();\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\tpublic String getDescription() {\n\t\t\treturn fDescription;\n\t\t}\n\t\tpublic String getLabel() {\n\t\t\treturn fLabel;\n\t\t}\n\t\t@SuppressWarnings(\"unused\")\n\t\tpublic Image getImage() {\n\t\t\treturn fImage;\n\t\t}\n\t\tpublic String toString() {\n\t\t\treturn fLabel;\n\t\t}\n\t\tpublic int compareTo(GrailsContentProposal o) {\n\t\t\treturn this.fContent.compareTo(o.fContent);\n\t\t}\n\t}<fim_middle>// class below is data class\n"}