{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.omid.tso.client;\n\nimport com.google.common.util.concurrent.ListenableFuture;\n\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\n<fim_suffix>public class ForwardingTSOFuture<T> implements TSOFuture<T> {\n    private final ListenableFuture<T> future;\n\n    public ForwardingTSOFuture(ListenableFuture<T> future) {\n        this.future = future;\n    }\n\n    @Override\n    public boolean cancel(boolean mayInterruptIfRunning) {\n        return future.cancel(mayInterruptIfRunning);\n    }\n\n    @Override\n    public boolean isCancelled() {\n        return future.isCancelled();\n    }\n\n    @Override\n    public boolean isDone() {\n        return future.isDone();\n    }\n\n    @Override\n    public T get() throws InterruptedException, ExecutionException {\n        return future.get();\n    }\n\n    @Override\n    public T get(long timeout, TimeUnit unit)\n            throws InterruptedException, ExecutionException, TimeoutException {\n        return future.get(timeout, unit);\n    }\n\n    @Override\n    public void addListener(Runnable listener, Executor executor) {\n        future.addListener(listener, executor);\n    }\n}<fim_middle>// class below has no smell\n"}