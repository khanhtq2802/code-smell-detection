{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.functor.range;\n\nimport org.apache.commons.functor.BinaryFunction;\n\n/**\n * A base class for numeric ranges. The elements within this range must be a\n * <b>Number</b> and <b>Comparable</b>.\n *\n * @param <T> the type of numbers and step that are both a number and comparable\n * @see org.apache.commons.functor.range.IntegerRange\n * @see org.apache.commons.functor.range.LongRange\n * @see org.apache.commons.functor.range.FloatRange\n * @see org.apache.commons.functor.range.DoubleRange\n * @see org.apache.commons.functor.range.CharacterRange\n * @since 0.1\n * @version $Revision$ $Date$\n */\n<fim_suffix>public abstract class NumericRange<T extends Number & Comparable<T>> extends AbstractRange<T, T> {\n\n    /**\n     * Construct a new {@link NumericRange}.\n     * @param leftEndpoint left endpoint\n     * @param rightEndpoint right endpoint\n     * @param step increment step\n     * @param nextValue function to implement the taking of a step\n     */\n    protected NumericRange(Endpoint<T> leftEndpoint, Endpoint<T> rightEndpoint, T step,\n            BinaryFunction<T, T, T> nextValue) {\n        super(leftEndpoint, rightEndpoint, step, nextValue);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public boolean contains(T obj) {\n        if (obj == null) {\n            return false;\n        }\n        double leftValue = this.getLeftEndpoint().getValue().doubleValue();\n        double rightValue = this.getRightEndpoint().getValue().doubleValue();\n        boolean includeLeft = this.getLeftEndpoint().getBoundType() == BoundType.CLOSED;\n        boolean includeRight = this.getRightEndpoint().getBoundType() == BoundType.CLOSED;\n        double step = this.getStep().doubleValue();\n        double value = obj.doubleValue();\n\n        double firstValue = 0;\n        double lastValue = 0;\n\n        if (step < 0.0) {\n            firstValue = includeLeft ? leftValue : leftValue + step;\n            lastValue = includeRight ? rightValue : Math.nextUp(rightValue);\n            if (value > firstValue || value < lastValue) {\n                return false;\n            }\n        } else {\n            firstValue = includeLeft ? leftValue : leftValue + step;\n            lastValue = includeRight ? rightValue : rightValue\n                                                    - (rightValue - Math\n                                                        .nextUp(rightValue));\n            if (value < firstValue || value > lastValue) {\n                return false;\n            }\n        }\n        return ((value - firstValue) / step + 1) % 1.0 == 0.0;\n    }\n\n}<fim_middle>// class below has no smell\n"}