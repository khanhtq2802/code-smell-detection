{"text": "<fim_prefix>//\n//  ========================================================================\n//  Copyright (c) 1995-2019 Mort Bay Consulting Pty. Ltd.\n//  ------------------------------------------------------------------------\n//  All rights reserved. This program and the accompanying materials\n//  are made available under the terms of the Eclipse Public License v1.0\n//  and Apache License v2.0 which accompanies this distribution.\n//\n//      The Eclipse Public License is available at\n//      http://www.eclipse.org/legal/epl-v10.html\n//\n//      The Apache License v2.0 is available at\n//      http://www.opensource.org/licenses/apache2.0.php\n//\n//  You may elect to redistribute this code under either of these licenses.\n//  ========================================================================\n//\n\npackage org.eclipse.jetty.util;\n\n/**\n * <p>ProcessorUtils provides access to runtime info about processors, that may be\n * overridden by system properties or environment variables.</p>\n * <p>This can be useful in virtualized environments where the runtime may miss\n * report the available resources.</p>\n */\n<fim_suffix>public class ProcessorUtils\n{\n    public static final String AVAILABLE_PROCESSORS = \"JETTY_AVAILABLE_PROCESSORS\";\n    private static int __availableProcessors = init();\n\n    static int init()\n    {\n        String processors = System.getProperty(AVAILABLE_PROCESSORS, System.getenv(AVAILABLE_PROCESSORS));\n        if (processors != null)\n        {\n            try\n            {\n                return Integer.parseInt( processors );\n            }\n            catch (NumberFormatException ignored)\n            {\n            }\n        }\n        return Runtime.getRuntime().availableProcessors();\n    }\n\n    /**\n     * Returns the number of available processors, from System Property \"JETTY_AVAILABLE_PROCESSORS\",\n     * or if not set then from environment variable \"JETTY_AVAILABLE_PROCESSORS\" or if not set then\n     * from {@link Runtime#availableProcessors()}.\n     *\n     * @return the number of processors\n     */\n    public static int availableProcessors()\n    {\n        return __availableProcessors;\n    }\n\n    public static void setAvailableProcessors(int processors)\n    {\n        if (processors < 1)\n            throw new IllegalArgumentException(\"Invalid number of processors: \" + processors);\n        __availableProcessors = processors;\n    }\n}<fim_middle>// class below is data class\n"}