{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.chemistry.opencmis.tck.impl;\n\nimport java.io.File;\nimport java.io.PrintWriter;\n\nimport org.apache.chemistry.opencmis.tck.CmisTest;\nimport org.apache.chemistry.opencmis.tck.CmisTestGroup;\nimport org.apache.chemistry.opencmis.tck.CmisTestProgressMonitor;\nimport org.apache.chemistry.opencmis.tck.CmisTestReport;\nimport org.apache.chemistry.opencmis.tck.CmisTestResult;\nimport org.apache.chemistry.opencmis.tck.CmisTestResultStatus;\nimport org.apache.chemistry.opencmis.tck.report.TextReport;\nimport org.apache.chemistry.opencmis.tck.runner.AbstractRunner;\nimport org.junit.Assert;\n\n<fim_suffix>public final class JUnitHelper {\n\n    public static final String JUNIT_PARAMETERS = \"org.apache.chemistry.opencmis.tck.junit.parameters\";\n\n    private JUnitHelper() {\n    }\n\n    public static void run(CmisTest test) throws Exception {\n        run(new WrapperCmisTestGroup(test));\n    }\n\n    public static void run(CmisTestGroup group) throws Exception {\n        JUnitRunner runner = new JUnitRunner();\n\n        String parametersFile = System.getProperty(JUNIT_PARAMETERS);\n        if (parametersFile == null) {\n            runner.setParameters(null);\n        } else {\n            runner.loadParameters(new File(parametersFile));\n        }\n\n        runner.addGroup(group);\n        runner.run(new JUnitProgressMonitor());\n\n        CmisTestReport report = new TextReport();\n        report.createReport(runner.getParameters(), runner.getGroups(), new PrintWriter(System.out));\n\n        checkForFailures(runner);\n    }\n\n    private static void checkForFailures(JUnitRunner runner) {\n        for (CmisTestGroup group : runner.getGroups()) {\n            for (CmisTest test : group.getTests()) {\n                for (CmisTestResult result : test.getResults()) {\n                    if (result.getStatus().getLevel() >= CmisTestResultStatus.FAILURE.getLevel()) {\n                        Assert.fail(result.getMessage());\n                    }\n                }\n            }\n        }\n    }\n\n    private static class JUnitRunner extends AbstractRunner {\n    }\n\n    private static class JUnitProgressMonitor implements CmisTestProgressMonitor {\n\n        @Override\n        @SuppressWarnings(\"PMD.SystemPrintln\")\n        public void startGroup(CmisTestGroup group) {\n            System.out.println(group.getName() + \" (\" + group.getTests().size() + \" tests)\");\n        }\n\n        @Override\n        public void endGroup(CmisTestGroup group) {\n        }\n\n        @Override\n        @SuppressWarnings(\"PMD.SystemPrintln\")\n        public void startTest(CmisTest test) {\n            System.out.println(\"  \" + test.getName());\n        }\n\n        @Override\n        public void endTest(CmisTest test) {\n        }\n\n        @Override\n        @SuppressWarnings(\"PMD.SystemPrintln\")\n        public void message(String msg) {\n            System.out.println(msg);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}