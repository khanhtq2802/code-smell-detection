{"text": "<fim_prefix>/**\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n *\n */\npackage org.apache.kerby.kerberos.kerb.gss;\n\nimport org.apache.kerby.kerberos.kerb.gss.impl.GssAcceptCred;\nimport org.apache.kerby.kerberos.kerb.gss.impl.GssContext;\nimport org.apache.kerby.kerberos.kerb.gss.impl.GssCredElement;\nimport org.apache.kerby.kerberos.kerb.gss.impl.GssInitCred;\nimport org.apache.kerby.kerberos.kerb.gss.impl.GssNameElement;\nimport org.ietf.jgss.GSSCredential;\nimport org.ietf.jgss.GSSException;\nimport org.ietf.jgss.GSSName;\nimport org.ietf.jgss.Oid;\nimport sun.security.jgss.GSSCaller;\nimport sun.security.jgss.spi.GSSContextSpi;\nimport sun.security.jgss.spi.GSSCredentialSpi;\nimport sun.security.jgss.spi.GSSNameSpi;\nimport sun.security.jgss.spi.MechanismFactory;\n\nimport java.security.Provider;\nimport java.util.Arrays;\n\n/**\n * Kerby Kerberos V5 plugin for JGSS\n */\npublic class GssMechFactory implements MechanismFactory {\n    private static final Provider PROVIDER =\n            new KerbyGssProvider();\n\n    private static final String KRB5_OID_STRING = \"1.2.840.113554.1.2.2\";\n    private static final Oid KRB5_OID = createOid(KRB5_OID_STRING);\n\n    private static Oid[] nameTypes =\n            new Oid[] {\n                    GSSName.NT_USER_NAME,\n                    GSSName.NT_EXPORT_NAME,\n                    GSSName.NT_HOSTBASED_SERVICE\n            };\n\n    private final GSSCaller caller;\n\n    public Oid getMechanismOid() {\n        return KRB5_OID;\n    }\n\n    public Provider getProvider() {\n        return PROVIDER;\n    }\n\n    public Oid[] getNameTypes() throws GSSException {\n        return nameTypes;\n    }\n\n    public GssMechFactory(GSSCaller caller) {\n        this.caller = caller;\n    }\n\n    public GSSNameSpi getNameElement(String nameStr, Oid nameType)\n            throws GSSException {\n        return GssNameElement.getInstance(nameStr, nameType);\n    }\n\n    public GSSNameSpi getNameElement(byte[] name, Oid nameType)\n            throws GSSException {\n        return GssNameElement.getInstance(Arrays.toString(name), nameType);\n    }\n\n    // Used by initiator\n    public GSSContextSpi getMechanismContext(GSSNameSpi peer,\n                                             GSSCredentialSpi myInitiatorCred,\n                                             int lifetime) throws GSSException {\n        if (peer != null && !(peer instanceof GssNameElement)) {\n            peer = GssNameElement.getInstance(peer.toString(), peer.getStringNameType());\n        }\n        if (myInitiatorCred == null) {\n            myInitiatorCred = getCredentialElement(null, lifetime, 0, GSSCredential.INITIATE_ONLY);\n        }\n        return new GssContext(caller, (GssNameElement) peer, (GssInitCred) myInitiatorCred, lifetime);\n    }\n\n    public GSSContextSpi getMechanismContext(GSSCredentialSpi myAcceptorCred)\n            throws GSSException {\n        if (myAcceptorCred == null) {\n            myAcceptorCred = getCredentialElement(null, 0,\n                    GSSCredential.INDEFINITE_LIFETIME, GSSCredential.ACCEPT_ONLY);\n        }\n        return new GssContext(caller, (GssAcceptCred) myAcceptorCred);\n    }\n\n    // Reconstruct from previously exported context\n    public GSSContextSpi getMechanismContext(byte[] exportedContext)\n            throws GSSException {\n       return new GssContext(caller, exportedContext);\n    }\n\n<fim_suffix>    public GSSCredentialSpi getCredentialElement(GSSNameSpi name,\n                                                 int initLifetime,\n                                                 int acceptLifetime,\n                                                 int usage)\n            throws GSSException {\n        if (name != null && !(name instanceof GssNameElement)) {\n            name = GssNameElement.getInstance(name.toString(), name.getStringNameType());\n        }\n\n        GssCredElement credElement;\n\n        if (usage == GSSCredential.INITIATE_ONLY) {\n            credElement = GssInitCred.getInstance(caller, (GssNameElement) name, initLifetime);\n        } else if (usage == GSSCredential.ACCEPT_ONLY) {\n            credElement = GssAcceptCred.getInstance(caller, (GssNameElement) name, acceptLifetime);\n        } else if (usage == GSSCredential.INITIATE_AND_ACCEPT) {\n            throw new GSSException(GSSException.FAILURE, -1, \"Unsupported usage mode: INITIATE_AND_ACCEPT\");\n        } else {\n            throw new GSSException(GSSException.FAILURE, -1, \"Unknown usage mode: \" + usage);\n        }\n\n        return credElement;\n    }\n\n    private static Oid createOid(String oidStr) {\n        Oid retVal;\n        try {\n            retVal = new Oid(oidStr);\n        } catch (GSSException e) {\n            retVal = null;\n        }\n        return retVal;\n    }\n\n    public static Oid getOid() {\n        return KRB5_OID;\n    }\n}<fim_middle>// function below has no smell\n"}