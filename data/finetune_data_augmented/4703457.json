{"text": "<fim_prefix>/*\n * ====================================================================\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n *\n */\n\npackage org.apache.hc.core5.http;\n\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.List;\n\nimport org.apache.hc.core5.function.Supplier;\n\n/**\n * An entity that can be sent or received with an HTTP message.\n * <p>\n * There are three distinct types of entities in HttpCore,\n * depending on where their {@link #getContent content} originates:\n * </p>\n * <ul>\n * <li><b>streamed</b>: The content is received from a stream, or\n *     generated on the fly. In particular, this category includes\n *     entities being received from a {@link HttpConnection connection}.\n *     {@link #isStreaming Streamed} entities are generally not\n *      {@link #isRepeatable repeatable}.\n *     </li>\n * <li><b>self-contained</b>: The content is in memory or obtained by\n *     means that are independent from a connection or other entity.\n *     Self-contained entities are generally {@link #isRepeatable repeatable}.\n *     </li>\n * <li><b>wrapping</b>: The content is obtained from another entity.\n *     </li>\n * </ul>\n * <p>\n * This distinction is important for connection management with incoming\n * entities. For entities that are created by an application and only sent\n * using the HTTP components framework, the difference between streamed\n * and self-contained is of little importance. In that case, it is suggested\n * to consider non-repeatable entities as streamed, and those that are\n * repeatable (without a huge effort) as self-contained.\n * </p>\n *\n * @since 4.0\n */\n<fim_suffix>public interface HttpEntity extends EntityDetails, Closeable {\n\n    /**\n     * Tells if the entity is capable of producing its data more than once.\n     * A repeatable entity's getContent() and writeTo(OutputStream) methods\n     * can be called more than once whereas a non-repeatable entity's can not.\n     * @return true if the entity is repeatable, false otherwise.\n     */\n    boolean isRepeatable();\n\n    /**\n     * Returns a content stream of the entity.\n     * {@link #isRepeatable Repeatable} entities are expected\n     * to create a new instance of {@link InputStream} for each invocation\n     * of this method and therefore can be consumed multiple times.\n     * Entities that are not {@link #isRepeatable repeatable} are expected\n     * to return the same {@link InputStream} instance and therefore\n     * may not be consumed more than once.\n     * <p>\n     * IMPORTANT: Please note all entity implementations must ensure that\n     * all allocated resources are properly deallocated after\n     * the {@link InputStream#close()} method is invoked.\n     * </p>\n     * @return content stream of the entity.\n     *\n     * @throws IOException if the stream could not be created\n     * @throws UnsupportedOperationException\n     *  if entity content cannot be represented as {@link java.io.InputStream}.\n     *\n     * @see #isRepeatable()\n     */\n    InputStream getContent() throws IOException, UnsupportedOperationException;\n\n    /**\n     * Writes the entity content out to the output stream.\n     * <p>\n     * IMPORTANT: Please note all entity implementations must ensure that\n     * all allocated resources are properly deallocated when this method\n     * returns.\n     * </p>\n     *\n     * @param outStream the output stream to write entity content to\n     *\n     * @throws IOException if an I/O error occurs\n     */\n    void writeTo(OutputStream outStream) throws IOException;\n\n    /**\n     * Tells whether this entity depends on an underlying stream.\n     * Streamed entities that read data directly from the socket should\n     * return {@code true}. Self-contained entities should return\n     * {@code false}. Wrapping entities should delegate this call\n     * to the wrapped entity.\n     *\n     * @return  {@code true} if the entity content is streamed,\n     *          {@code false} otherwise\n     */\n    boolean isStreaming(); // don't expect an exception here\n\n    /**\n     * Returns supplier of message trailers - headers sent after message body.\n     * May return {@code null} if trailers are not available.\n     *\n     * @since 5.0\n     */\n    Supplier<List<? extends Header>> getTrailers();\n\n}<fim_middle>// class below has no smell\n"}