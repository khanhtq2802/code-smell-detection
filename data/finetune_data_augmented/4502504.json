{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.felix.webconsole.plugins.upnp.internal;\n\nimport java.util.Dictionary;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpSessionBindingEvent;\nimport javax.servlet.http.HttpSessionBindingListener;\n\nimport org.osgi.framework.BundleContext;\nimport org.osgi.framework.InvalidSyntaxException;\nimport org.osgi.framework.ServiceRegistration;\nimport org.osgi.service.upnp.UPnPDevice;\nimport org.osgi.service.upnp.UPnPEventListener;\nimport org.osgi.service.upnp.UPnPService;\n\n/**\n * The reason for having this SessionObject is the strange event delivery in UPnP. It's not possible\n * read a state variable value, but if register a listener, you will get notified when the value has\n * changed.\n */\nfinal class SessionObject implements HttpSessionBindingListener, UPnPEventListener\n{\n\n    static final String LISTENER_CLASS = UPnPEventListener.class.getName();\n\n    private final Map vars = new HashMap();\n    private final String sessionID;\n    private final Map store;\n    private String udn, urn;\n\n    private final BundleContext bc;\n    private final Hashtable regProps = new Hashtable(3);\n    private ServiceRegistration reg;\n\n    SessionObject(BundleContext bc, String sessionID, Map store)\n    {\n        this.bc = bc;\n        this.sessionID = sessionID;\n        this.store = store;\n    }\n\n    /**\n     * @see javax.servlet.http.HttpSessionBindingListener#valueBound(javax.servlet.http.HttpSessionBindingEvent)\n     */\n    public void valueBound(HttpSessionBindingEvent event)\n    {\n        store.put(sessionID, this);\n    }\n\n    /**\n     * @see javax.servlet.http.HttpSessionBindingListener#valueUnbound(javax.servlet.http.HttpSessionBindingEvent)\n     */\n    public final void valueUnbound(HttpSessionBindingEvent event)\n    {\n        unsubscribe();\n        store.remove(sessionID); // remove from list of sessions\n    }\n\n    /**\n     * @see org.osgi.service.upnp.UPnPEventListener#notifyUPnPEvent(java.lang.String,\n     *      java.lang.String, java.util.Dictionary)\n     */\n    public final void notifyUPnPEvent(String deviceId, String serviceId, Dictionary events)\n    {\n        if (sameDevice(deviceId, serviceId))\n        {\n            for (Enumeration e = events.keys(); e.hasMoreElements();)\n            {\n                Object key = e.nextElement();\n                vars.put(key, events.get(key));\n            }\n        }\n    }\n\n<fim_suffix>    private final boolean sameDevice(String udn, String urn)\n    {\n        String _udn = this.udn;\n        String _urn = this.urn;\n        if (_udn == null || _urn == null)\n            return false; // not subscribed\n        return _udn.equals(udn) && _urn.equals(urn);\n    }\n\n    final synchronized SessionObject subscribe(String udn, String urn)\n    {\n        if (!sameDevice(udn, urn))\n        {\n            unsubscribe();\n            this.udn = udn;\n            this.urn = urn;\n\n            try\n            {\n                regProps.put(UPnPEventListener.UPNP_FILTER, bc.createFilter(//\n                \"(&(\" + UPnPDevice.UDN + '=' + udn + \")(\" + //$NON-NLS-1$ //$NON-NLS-2$\n                    UPnPService.ID + '=' + urn + \"))\")); //$NON-NLS-1$\n            }\n            catch (InvalidSyntaxException e)\n            { /* will not happen */\n            }\n            reg = bc.registerService(LISTENER_CLASS, this, regProps);\n        }\n        return this;\n    }\n\n    final synchronized SessionObject unsubscribe()\n    {\n        this.udn = this.urn = null;\n        vars.clear();\n        if (reg != null)\n        {\n            try\n            {\n                reg.unregister();\n            }\n            catch (Throwable t)\n            {\n                // When the bundle is stopped, the session object might remain hanging\n                // in the session, until it expires. After being stopped, the framework\n                // however will automatically destroy the registration. But after session\n                // expires this method will be called once again and will try to \n                // unregister the service. This will throw exception, that should be caught.\n            }\n            reg = null;\n        }\n        return this;\n    }\n\n    final Object getValue(String name)\n    {\n        return vars.get(name);\n    }\n\n    /**\n     * @see java.lang.Object#toString()\n     */\n    public final String toString()\n    {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(\"SessionObject [sessionID=\").append(sessionID) //$NON-NLS-1$\n            .append(\", udn=\").append(udn) //$NON-NLS-1$\n            .append(\", urn=\").append(urn) //$NON-NLS-1$\n            .append(\", vars=\").append(vars) //$NON-NLS-1$\n            .append(']');\n        return buffer.toString();\n    }\n\n}<fim_middle>// function below has no smell\n"}