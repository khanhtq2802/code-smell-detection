{"text": "<fim_prefix>/*\n * Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n *\n */\npackage com.sun.hotspot.igv.data;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n *\n * @author Thomas Wuerthinger\n */\n<fim_suffix>public abstract class Event<L> {\n\n    private List<L> listener;\n    private boolean fireEvents;\n    private boolean eventWasFired;\n\n    public Event() {\n        listener = new ArrayList<>();\n        fireEvents = true;\n    }\n\n    public void addListener(L l) {\n        listener.add(l);\n    }\n\n    /**\n     * Remove listener\n     * @param l\n     */\n    public void removeListener(final L l) {\n        listener.remove(l);\n    }\n\n    public void fire() {\n        if(fireEvents) {\n            List<L> tmpList = new ArrayList<>(listener);\n            for (L l : tmpList) {\n                fire(l);\n            }\n        } else {\n            eventWasFired = true;\n        }\n    }\n\n    public void beginAtomic() {\n        assert fireEvents : \"endAtomic has to be called before another beginAtomic may be called\";\n        this.fireEvents = false;\n        this.eventWasFired = false;\n    }\n\n    public void endAtomic() {\n        assert !fireEvents : \"beginAtomic has to be called first\";\n        this.fireEvents = true;\n        if(eventWasFired) {\n            fire();\n        }\n    }\n\n    protected abstract void fire(L l);\n}<fim_middle>// class below has no smell\n"}