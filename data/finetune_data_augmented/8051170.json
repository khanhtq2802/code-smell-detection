{"text": "<fim_prefix>/*\n* generated by Xtext\n*/\npackage org.eclipse.xtext.xbase.annotations.ui.contentassist;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.jdt.core.search.IJavaSearchConstants;\nimport org.eclipse.xtext.Assignment;\nimport org.eclipse.xtext.CrossReference;\nimport org.eclipse.xtext.common.types.JvmAnnotationType;\nimport org.eclipse.xtext.common.types.JvmOperation;\nimport org.eclipse.xtext.common.types.JvmType;\nimport org.eclipse.xtext.common.types.JvmTypeReference;\nimport org.eclipse.xtext.common.types.TypesPackage;\nimport org.eclipse.xtext.resource.IEObjectDescription;\nimport org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;\nimport org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;\nimport org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation;\nimport org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotationElementValuePair;\nimport org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotationsPackage;\nimport org.eclipse.xtext.xbase.typesystem.IExpressionScope;\n\nimport com.google.common.base.Predicate;\nimport com.google.common.base.Predicates;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Sets;\n/**\n * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist\n * on how to customize the content assistant.\n */\npublic class XbaseWithAnnotationsProposalProvider extends AbstractXbaseWithAnnotationsProposalProvider {\n\n\t@Override\n\tpublic void completeXAnnotation_AnnotationType(EObject model, Assignment assignment, ContentAssistContext context,\n\t\t\tICompletionProposalAcceptor acceptor) {\n\t\tcompleteJavaTypes(context, XAnnotationsPackage.Literals.XANNOTATION__ANNOTATION_TYPE, \n\t\t\t\tcreateVisibilityFilter(context, IJavaSearchConstants.ANNOTATION_TYPE), acceptor);\n\t}\n\t\n\t@Override\n\tpublic void completeXAnnotationElementValuePair_Element(EObject model, Assignment assignment,\n\t\t\tContentAssistContext context, ICompletionProposalAcceptor acceptor) {\n\t\tXAnnotation annotationReference = null;\n\t\tif (model instanceof XAnnotationElementValuePair) {\n\t\t\tannotationReference = (XAnnotation) model.eContainer();\n\t\t} else if (model instanceof XAnnotation) {\n\t\t\tannotationReference = (XAnnotation) model;\n\t\t}\n\t\tif (annotationReference != null) {\n\t\t\tJvmType annotationType = annotationReference.getAnnotationType();\n\t\t\tif (annotationType != null && !annotationType.eIsProxy() && annotationType instanceof JvmAnnotationType) {\n\t\t\t\t// do not propose features like #toString, #hashCode etc\n\t\t\t\tJvmAnnotationType casted = (JvmAnnotationType) annotationType;\n\t\t\t\tfinal Set<JvmOperation> operations = Sets.newHashSet(casted.getDeclaredOperations());\n\t\t\t\tPredicate<IEObjectDescription> predicate = Predicates.and(new Predicate<IEObjectDescription>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean apply(IEObjectDescription in) {\n\t\t\t\t\t\treturn operations.contains(in.getEObjectOrProxy());\n\t\t\t\t\t}\n\t\t\t\t}, getFeatureDescriptionPredicate(context));\n\t\t\t\tlookupCrossReference(((CrossReference)assignment.getTerminal()), context, acceptor, predicate);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void completeXAnnotationElementValuePair_Value(EObject model, Assignment assignment,\n\t\t\tContentAssistContext context, ICompletionProposalAcceptor acceptor) {\n\t\tsuper.completeXAnnotationElementValuePair_Value(model, assignment, context, acceptor);\n\t\tproposeDeclaringTypeForStaticInvocation(model, null, context, acceptor);\n\t}\n\t\n\t@Override\n\tpublic void completeXAnnotation_Value(EObject model, Assignment assignment, ContentAssistContext context,\n\t\t\tICompletionProposalAcceptor acceptor) {\n\t\tif (model instanceof XAnnotation) {\n\t\t\tJvmType annotationType = ((XAnnotation) model).getAnnotationType();\n\t\t\tif (annotationType != null && !annotationType.eIsProxy() && annotationType instanceof JvmAnnotationType) {\n\t\t\t\tJvmAnnotationType casted = (JvmAnnotationType) annotationType;\n\t\t\t\tList<JvmOperation> operations = Lists.newArrayList(casted.getDeclaredOperations());\n\t\t\t\tif (operations.size() == 1) {\n\t\t\t\t\tJvmOperation singleOperation = operations.get(0);\n\t\t\t\t\tif (\"value\".equals(singleOperation.getSimpleName())) {\n\t\t\t\t\t\t// TODO propose qualified enum literals + import\n\t\t\t\t\t\tsuper.completeXAnnotation_Value(model, assignment, context, acceptor);\n\t\t\t\t\t\tif (\"java.lang.Class\".equals(getRawReturnType(singleOperation))) {\n\t\t\t\t\t\t\t// eager proposals for classes if the expected type is a suptype of class\n\t\t\t\t\t\t\t// TODO evaluate the bounds of the class\n\t\t\t\t\t\t\tcompleteJavaTypes(\n\t\t\t\t\t\t\t\t\tcontext, \n\t\t\t\t\t\t\t\t\tTypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE,\n\t\t\t\t\t\t\t\t\ttrue, // force\n\t\t\t\t\t\t\t\t\tgetQualifiedNameValueConverter(),\n\t\t\t\t\t\t\t\t\tcreateVisibilityFilter(context), acceptor);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tproposeDeclaringTypeForStaticInvocation(model, assignment, context, acceptor);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void completeXFeatureCall_Feature(EObject model, Assignment assignment, ContentAssistContext context,\n\t\t\tICompletionProposalAcceptor acceptor) {\n\t\tif (model instanceof XAnnotation) {\n\t\t\tcreateLocalVariableAndImplicitProposals(model, IExpressionScope.Anchor.WITHIN, context, acceptor);\n\t\t\treturn;\n\t\t} else if (model instanceof XAnnotationElementValuePair) {\n\t\t\tXAnnotationElementValuePair pair = (XAnnotationElementValuePair) model;\n\t\t\tXAnnotation annotation = (XAnnotation) pair.eContainer();\n\t\t\tcreateLocalVariableAndImplicitProposals(annotation, IExpressionScope.Anchor.WITHIN, context, acceptor);\n\t\t\treturn;\n\t\t}\n\t\tsuper.completeXFeatureCall_Feature(model, assignment, context, acceptor);\n\t}\n\n<fim_suffix>\tprivate String getRawReturnType(JvmOperation singleOperation) {\n\t\tJvmTypeReference returnType = singleOperation.getReturnType();\n\t\tif (returnType == null)\n\t\t\treturn null;\n\t\tJvmType rawType = returnType.getType();\n\t\tif (rawType == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn rawType.getQualifiedName();\n\t}\n\n}<fim_middle>// function below has no smell\n"}