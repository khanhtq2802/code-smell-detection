{"text": "<fim_prefix>/**\n * Copyright (c) 2017, 2018 Kichwa Coders Ltd. and others.\n * \n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0,\n * or the Eclipse Distribution License v. 1.0 which is available at\n * http://www.eclipse.org/org/documents/edl-v10.php.\n * \n * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause\n */\npackage org.eclipse.lsp4j.debug;\n\nimport java.util.Arrays;\nimport org.eclipse.lsp4j.debug.Breakpoint;\nimport org.eclipse.lsp4j.jsonrpc.validation.NonNull;\nimport org.eclipse.xtext.xbase.lib.Pure;\nimport org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n\n/**\n * Response to 'setFunctionBreakpoints' request.\n * <p>\n * Returned is information about each breakpoint created by this request.\n */\n@SuppressWarnings(\"all\")\npublic class SetFunctionBreakpointsResponse {\n  /**\n   * Information about the breakpoints. The array elements correspond to the elements of the 'breakpoints' array.\n   */\n  @NonNull\n  private Breakpoint[] breakpoints;\n  \n  /**\n   * Information about the breakpoints. The array elements correspond to the elements of the 'breakpoints' array.\n   */\n  @Pure\n  @NonNull\n  public Breakpoint[] getBreakpoints() {\n    return this.breakpoints;\n  }\n  \n  /**\n   * Information about the breakpoints. The array elements correspond to the elements of the 'breakpoints' array.\n   */\n<fim_suffix>  public void setBreakpoints(@NonNull final Breakpoint[] breakpoints) {\n    if (breakpoints == null) {\n      throw new IllegalArgumentException(\"Property must not be null: breakpoints\");\n    }\n    this.breakpoints = breakpoints;\n  }\n  \n  @Override\n  @Pure\n  public String toString() {\n    ToStringBuilder b = new ToStringBuilder(this);\n    b.add(\"breakpoints\", this.breakpoints);\n    return b.toString();\n  }\n  \n  @Override\n  @Pure\n  public boolean equals(final Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SetFunctionBreakpointsResponse other = (SetFunctionBreakpointsResponse) obj;\n    if (this.breakpoints == null) {\n      if (other.breakpoints != null)\n        return false;\n    } else if (!Arrays.deepEquals(this.breakpoints, other.breakpoints))\n      return false;\n    return true;\n  }\n  \n  @Override\n  @Pure\n  public int hashCode() {\n    return 31 * 1 + ((this.breakpoints== null) ? 0 : Arrays.deepHashCode(this.breakpoints));\n  }\n}<fim_middle>// function below has no smell\n"}