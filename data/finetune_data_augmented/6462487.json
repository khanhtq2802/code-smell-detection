{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2016 IBH SYSTEMS GmbH and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     IBH SYSTEMS GmbH - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.packagedrone.utils.rpm.signature;\n\nimport java.nio.ByteBuffer;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nimport org.eclipse.packagedrone.utils.rpm.RpmSignatureTag;\nimport org.eclipse.packagedrone.utils.rpm.Rpms;\nimport org.eclipse.packagedrone.utils.rpm.header.Header;\n\npublic final class SignatureProcessors\n{\n    private SignatureProcessors ()\n    {\n    }\n\n    public static SignatureProcessor size ()\n    {\n        return new SignatureProcessor () {\n\n            private long headerSize;\n\n            private long payloadSize;\n\n            @Override\n            public void feedHeader ( final ByteBuffer header )\n            {\n                this.headerSize = header.remaining ();\n            }\n\n            @Override\n            public void feedPayloadData ( final ByteBuffer data )\n            {\n                this.payloadSize += data.remaining ();\n            }\n\n            @Override\n            public void finish ( final Header<RpmSignatureTag> signature )\n            {\n                signature.putSize ( this.headerSize + this.payloadSize, RpmSignatureTag.SIZE, RpmSignatureTag.LONGSIZE );\n            }\n        };\n    }\n\n<fim_suffix>    public static SignatureProcessor payloadSize ()\n    {\n        return new SignatureProcessor () {\n\n            private long archiveSize;\n\n            @Override\n            public void init ( final long archiveSize )\n            {\n                this.archiveSize = archiveSize;\n            }\n\n            @Override\n            public void feedHeader ( final ByteBuffer header )\n            {\n            }\n\n            @Override\n            public void feedPayloadData ( final ByteBuffer data )\n            {\n            }\n\n            @Override\n            public void finish ( final Header<RpmSignatureTag> signature )\n            {\n                signature.putSize ( this.archiveSize, RpmSignatureTag.PAYLOAD_SIZE, RpmSignatureTag.LONGARCHIVESIZE );\n            }\n        };\n    }\n\n    public static SignatureProcessor sha256Header ()\n    {\n        return new SignatureProcessor () {\n\n            private String value;\n\n            @Override\n            public void feedHeader ( final ByteBuffer header )\n            {\n                try\n                {\n                    final MessageDigest md = MessageDigest.getInstance ( \"SHA-256\" );\n                    md.update ( header.slice () );\n                    this.value = Rpms.toHex ( md.digest () ).toLowerCase ();\n                }\n                catch ( final NoSuchAlgorithmException e )\n                {\n                    throw new RuntimeException ( e );\n                }\n            }\n\n            @Override\n            public void feedPayloadData ( final ByteBuffer data )\n            {\n                // we only work with the header\n            }\n\n            @Override\n            public void finish ( final Header<RpmSignatureTag> signature )\n            {\n                signature.putString ( RpmSignatureTag.SHA256HEADER, this.value );\n            }\n        };\n    }\n\n    public static SignatureProcessor sha1Header ()\n    {\n        return new SignatureProcessor () {\n\n            private String value;\n\n            @Override\n            public void feedHeader ( final ByteBuffer header )\n            {\n                try\n                {\n                    final MessageDigest md = MessageDigest.getInstance ( \"SHA1\" );\n                    md.update ( header.slice () );\n                    this.value = Rpms.toHex ( md.digest () ).toLowerCase ();\n                }\n                catch ( final NoSuchAlgorithmException e )\n                {\n                    throw new RuntimeException ( e );\n                }\n            }\n\n            @Override\n            public void feedPayloadData ( final ByteBuffer data )\n            {\n                // we only work with the header\n            }\n\n            @Override\n            public void finish ( final Header<RpmSignatureTag> signature )\n            {\n                signature.putString ( RpmSignatureTag.SHA1HEADER, this.value );\n            }\n        };\n    }\n\n    public static SignatureProcessor md5 ()\n    {\n        return new SignatureProcessor () {\n\n            private MessageDigest digest;\n\n            @Override\n            public void init ( final long archiveSize )\n            {\n                try\n                {\n                    this.digest = MessageDigest.getInstance ( \"MD5\" );\n                }\n                catch ( final NoSuchAlgorithmException e )\n                {\n                    throw new RuntimeException ( e );\n                }\n            }\n\n            @Override\n            public void feedHeader ( final ByteBuffer header )\n            {\n                this.digest.update ( header );\n            }\n\n            @Override\n            public void feedPayloadData ( final ByteBuffer data )\n            {\n                this.digest.update ( data );\n            }\n\n            @Override\n            public void finish ( final Header<RpmSignatureTag> signature )\n            {\n                signature.putBlob ( RpmSignatureTag.MD5, this.digest.digest () );\n            }\n        };\n    }\n}<fim_middle>// function below has no smell\n"}