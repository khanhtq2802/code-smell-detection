{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n *     \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.jena.hadoop.rdf.io.input.readers;\n\nimport java.io.IOException;\n\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.mapreduce.RecordReader;\nimport org.apache.jena.graph.Node ;\nimport org.apache.jena.hadoop.rdf.io.registry.HadoopRdfIORegistry;\nimport org.apache.jena.hadoop.rdf.types.QuadWritable;\nimport org.apache.jena.riot.Lang;\nimport org.apache.jena.riot.RDFLanguages;\nimport org.apache.jena.sparql.core.Quad ;\n\n/**\n * A record reader that reads RDF from any triples/quads format. Triples are\n * converted into quads in the default graph. This behaviour can be changed by\n * deriving from this class and overriding the {@link #getGraphNode()} method\n * \n * \n * \n */\n<fim_suffix>public class TriplesOrQuadsReader extends AbstractRdfReader<Quad, QuadWritable> {\n\n    @Override\n    protected RecordReader<LongWritable, QuadWritable> selectRecordReader(Lang lang) throws IOException {\n        if (!RDFLanguages.isQuads(lang) && !RDFLanguages.isTriples(lang))\n            throw new IOException(lang.getLabel() + \" is not a RDF triples/quads format\");\n\n        if (HadoopRdfIORegistry.hasQuadReader(lang)) {\n            // Supports quads directly\n            return HadoopRdfIORegistry.createQuadReader(lang);\n        } else {\n            // Try to create a triples reader and wrap upwards into quads\n            // This will throw an error if a triple reader is not available\n            return new TriplesToQuadsReader(HadoopRdfIORegistry.createTripleReader(lang));\n        }\n    }\n\n    /**\n     * Gets the graph node which represents the graph into which triples will be\n     * indicated to belong to when they are converting into quads.\n     * <p>\n     * Defaults to {@link Quad#defaultGraphNodeGenerated} which represents the\n     * default graph\n     * </p>\n     * \n     * @return Graph node\n     */\n    protected Node getGraphNode() {\n        return Quad.defaultGraphNodeGenerated;\n    }\n}<fim_middle>// class below has no smell\n"}