{"text": "<fim_prefix>\n<fim_suffix>public class MemberMBeanBridge {\n  private static final Logger logger = LogService.getLogger();\n  /**\n   * Static reference to the Platform MBean server\n   */\n  @Immutable\n  public static final MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();\n  /**\n   * Factor converting bytes to MB\u00d8\u00d8\n   */\n  private static final long MBFactor = 1024 * 1024;\n  @Immutable\n  private static final TimeUnit nanoSeconds = TimeUnit.NANOSECONDS;\n  /** Cache Instance **/\n  private InternalCache cache;\n  /** Distribution Config **/\n  private DistributionConfig config;\n  /** Composite type **/\n  private GemFireProperties gemFirePropertyData;\n  /**\n   * Internal distributed system\n   */\n  private InternalDistributedSystem system;\n  /**\n   * Distribution manager\n   */\n  private DistributionManager dm;\n  /**\n   * Command Service\n   */\n  private OnlineCommandProcessor commandProcessor;\n  private String commandServiceInitError;\n  /**\n   * Reference to JDK bean MemoryMXBean\n   */\n  private MemoryMXBean memoryMXBean;\n  /**\n   * Reference to JDK bean ThreadMXBean\n   */\n  private ThreadMXBean threadMXBean;\n  /**\n   * Reference to JDK bean RuntimeMXBean\n   */\n  private RuntimeMXBean runtimeMXBean;\n  /**\n   * Reference to JDK bean OperatingSystemMXBean\n   */\n  private OperatingSystemMXBean osBean;\n  /**\n   * Host name of the member\n   */\n  private String hostname;\n  /**\n   * The member's process id (pid)\n   */\n  private int processId;\n  /**\n   * OS MBean Object name\n   */\n  private ObjectName osObjectName;\n  /**\n   * Last CPU usage calculation time\n   */\n  private long lastSystemTime = 0;\n  /**\n   * Last ProcessCPU time\n   */\n  private long lastProcessCpuTime = 0;\n  private MBeanStatsMonitor monitor;\n  private volatile boolean lockStatsAdded = false;\n  private SystemManagementService service;\n  private MemberLevelDiskMonitor diskMonitor;\n  private AggregateRegionStatsMonitor regionMonitor;\n  private StatsRate createsRate;\n  private StatsRate bytesReceivedRate;\n  private StatsRate bytesSentRate;\n  private StatsRate destroysRate;\n  private StatsRate functionExecutionRate;\n  private StatsRate getsRate;\n  private StatsRate putAllRate;\n  private StatsRate putsRate;\n  private StatsRate transactionCommitsRate;\n  private StatsRate diskReadsRate;\n  private StatsRate diskWritesRate;\n  private StatsAverageLatency listenerCallsAvgLatency;\n  private StatsAverageLatency writerCallsAvgLatency;\n  private StatsAverageLatency putsAvgLatency;\n  private StatsAverageLatency getsAvgLatency;\n  private StatsAverageLatency putAllAvgLatency;\n  private StatsAverageLatency loadsAverageLatency;\n  private StatsAverageLatency netLoadsAverageLatency;\n  private StatsAverageLatency netSearchAverageLatency;\n  private StatsAverageLatency transactionCommitsAvgLatency;\n  private StatsAverageLatency diskFlushAvgLatency;\n  private StatsAverageLatency deserializationAvgLatency;\n  private StatsLatency deserializationLatency;\n  private StatsRate deserializationRate;\n  private StatsAverageLatency serializationAvgLatency;\n  private StatsLatency serializationLatency;\n  private StatsRate serializationRate;\n  private StatsAverageLatency pdxDeserializationAvgLatency;\n  private StatsRate pdxDeserializationRate;\n  private StatsRate lruDestroyRate;\n  private StatsRate lruEvictionRate;\n  private String gemFireVersion;\n  private String classPath;\n  private String name;\n  private String id;\n  private String osName = System.getProperty(\"os.name\", \"unknown\");\n  private GCStatsMonitor gcMonitor;\n  private VMStatsMonitor vmStatsMonitor;\n  private MBeanStatsMonitor systemStatsMonitor;\n  private float instCreatesRate = 0;\n  private float instGetsRate = 0;\n  private float instPutsRate = 0;\n  private float instPutAllRate = 0;\n  private GemFireStatSampler sampler;\n  private Statistics systemStat;\n  private static final String MEMBER_LEVEL_DISK_MONITOR = \"MemberLevelDiskMonitor\";\n  private static final String MEMBER_LEVEL_REGION_MONITOR = \"MemberLevelRegionMonitor\";\n  private boolean cacheServer = false;\n  private String redundancyZone = \"\";\n  private ResourceManagerStats resourceManagerStats;\n  public MemberMBeanBridge(InternalCache cache, SystemManagementService service) {\n    this.cache = cache;\n    this.service = service;\n    this.system = (InternalDistributedSystem) cache.getDistributedSystem();\n    this.dm = system.getDistributionManager();\n    if (dm instanceof ClusterDistributionManager) {\n      ClusterDistributionManager distManager =\n          (ClusterDistributionManager) system.getDistributionManager();\n      this.redundancyZone = distManager\n          .getRedundancyZone(cache.getInternalDistributedSystem().getDistributedMember());\n    }\n    this.sampler = system.getStatSampler();\n    this.config = system.getConfig();\n    try {\n      this.commandProcessor =\n          new OnlineCommandProcessor(system.getProperties(), cache.getSecurityService(), cache);\n    } catch (Exception e) {\n      commandServiceInitError = e.getMessage();\n      logger.info(LogMarker.CONFIG_MARKER, \"Command processor could not be initialized. {}\",\n          e.getMessage());\n    }\n    intitGemfireProperties();\n    try {\n      InetAddress addr = SocketCreator.getLocalHost();\n      this.hostname = addr.getHostName();\n    } catch (UnknownHostException ignore) {\n      this.hostname = ManagementConstants.DEFAULT_HOST_NAME;\n    }\n    try {\n      this.osObjectName = new ObjectName(\"java.lang:type=OperatingSystem\");\n    } catch (MalformedObjectNameException ex) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(ex.getMessage(), ex);\n      }\n    } catch (NullPointerException ex) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(ex.getMessage(), ex);\n      }\n    }\n    this.memoryMXBean = ManagementFactory.getMemoryMXBean();\n    this.threadMXBean = ManagementFactory.getThreadMXBean();\n    this.runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n    this.osBean = ManagementFactory.getOperatingSystemMXBean();\n    // Initialize all the Stats Monitors\n    this.monitor =\n        new MBeanStatsMonitor(\"MemberMXBeanMonitor\");\n    this.diskMonitor = new MemberLevelDiskMonitor(MEMBER_LEVEL_DISK_MONITOR);\n    this.regionMonitor = new AggregateRegionStatsMonitor(MEMBER_LEVEL_REGION_MONITOR);\n    this.gcMonitor = new GCStatsMonitor(\"GCStatsMonitor\");\n    this.vmStatsMonitor =\n        new VMStatsMonitor(\"VMStatsMonitor\");\n    this.systemStatsMonitor =\n        new MBeanStatsMonitor(\"SystemStatsManager\");\n    // Initialize Proecess related informations\n    this.gemFireVersion = GemFireVersion.asString();\n    this.classPath = runtimeMXBean.getClassPath();\n    this.name = cache.getDistributedSystem().getDistributedMember().getName();\n    this.id = cache.getDistributedSystem().getDistributedMember().getId();\n    try {\n      this.processId = ProcessUtils.identifyPid();\n    } catch (PidUnavailableException ex) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(ex.getMessage(), ex);\n      }\n    }\n    QueryDataFunction qDataFunction = new QueryDataFunction();\n    FunctionService.registerFunction(qDataFunction);\n    this.resourceManagerStats = cache.getInternalResourceManager().getStats();\n  }\n  public MemberMBeanBridge() {\n    this.monitor =\n        new MBeanStatsMonitor(\"MemberMXBeanMonitor\");\n    this.diskMonitor = new MemberLevelDiskMonitor(MEMBER_LEVEL_DISK_MONITOR);\n    this.regionMonitor = new AggregateRegionStatsMonitor(MEMBER_LEVEL_REGION_MONITOR);\n    this.gcMonitor = new GCStatsMonitor(\"GCStatsMonitor\");\n    this.vmStatsMonitor =\n        new VMStatsMonitor(\"VMStatsMonitor\");\n    this.systemStatsMonitor =\n        new MBeanStatsMonitor(\"SystemStatsManager\");\n    this.system = InternalDistributedSystem.getConnectedInstance();\n    initializeStats();\n  }\n  public MemberMBeanBridge init() {\n    CachePerfStats cachePerfStats = this.cache.getCachePerfStats();\n    addCacheStats(cachePerfStats);\n    addFunctionStats(system.getFunctionServiceStats());\n    if (system.getDistributionManager().getStats() instanceof DistributionStats) {\n      DistributionStats distributionStats =\n          (DistributionStats) system.getDistributionManager().getStats();\n      addDistributionStats(distributionStats);\n    }\n    if (PureJavaMode.osStatsAreAvailable()) {\n      Statistics[] systemStats = null;\n      if (HostStatHelper.isSolaris()) {\n        systemStats = system.findStatisticsByType(SolarisSystemStats.getType());\n      } else if (HostStatHelper.isLinux()) {\n        systemStats = system.findStatisticsByType(LinuxSystemStats.getType());\n      } else if (HostStatHelper.isOSX()) {\n        systemStats = null;// @TODO once OSX stats are implemented\n      } else if (HostStatHelper.isWindows()) {<fim_middle>// class below is data class and blob\n"}