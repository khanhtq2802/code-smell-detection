{"text": "<fim_prefix>\n<fim_suffix>@KapuaProvider\npublic class CredentialServiceImpl extends AbstractKapuaConfigurableService implements CredentialService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(CredentialServiceImpl.class);\n    public CredentialServiceImpl() {\n        super(CredentialService.class.getName(), AuthenticationDomains.CREDENTIAL_DOMAIN, AuthenticationEntityManagerFactory.getInstance());\n    }\n    @Override\n    public Credential create(CredentialCreator credentialCreator)\n            throws KapuaException {\n        //\n        // Argument Validation\n        ArgumentValidator.notNull(credentialCreator, \"credentialCreator\");\n        ArgumentValidator.notNull(credentialCreator.getScopeId(), \"credentialCreator.scopeId\");\n        ArgumentValidator.notNull(credentialCreator.getUserId(), \"credentialCreator.userId\");\n        ArgumentValidator.notNull(credentialCreator.getCredentialType(), \"credentialCreator.credentialType\");\n        ArgumentValidator.notNull(credentialCreator.getCredentialStatus(), \"credentialCreator.credentialStatus\");\n        if (credentialCreator.getCredentialType() != CredentialType.API_KEY) {\n            ArgumentValidator.notEmptyOrNull(credentialCreator.getCredentialPlainKey(), \"credentialCreator.credentialKey\");\n        }\n        if (credentialCreator.getCredentialType() == CredentialType.PASSWORD) {\n            //\n            // Check if a PASSWORD credential already exists for the user\n            CredentialListResult existingCredentials = findByUserId(credentialCreator.getScopeId(), credentialCreator.getUserId());\n            for (Credential credential : existingCredentials.getItems()) {\n                if (credential.getCredentialType().equals(CredentialType.PASSWORD)) {\n                    throw new KapuaExistingCredentialException(CredentialType.PASSWORD);\n                }\n            }\n            //\n            // Validate Password regex\n            ArgumentValidator.match(credentialCreator.getCredentialPlainKey(), CommonsValidationRegex.PASSWORD_REGEXP, \"credentialCreator.credentialKey\");\n        }\n        //\n        // Check access\n        KapuaLocator locator = KapuaLocator.getInstance();\n        AuthorizationService authorizationService = locator.getService(AuthorizationService.class);\n        PermissionFactory permissionFactory = locator.getFactory(PermissionFactory.class);\n        authorizationService.checkPermission(permissionFactory.newPermission(AuthenticationDomains.CREDENTIAL_DOMAIN, Actions.write, credentialCreator.getScopeId()));\n        //\n        // Do create\n        Credential credential = null;\n        EntityManager em = AuthenticationEntityManagerFactory.getEntityManager();\n        try {\n            em.beginTransaction();\n            //\n            // Do pre persist magic on key values\n            String fullKey = null;\n            switch (credentialCreator.getCredentialType()) {\n                case API_KEY: // Generate new api key\n                    SecureRandom random = SecureRandom.getInstance(\"SHA1PRNG\");\n                    KapuaAuthenticationSetting setting = KapuaAuthenticationSetting.getInstance();\n                    int preLength = setting.getInt(KapuaAuthenticationSettingKeys.AUTHENTICATION_CREDENTIAL_APIKEY_PRE_LENGTH);\n                    int keyLength = setting.getInt(KapuaAuthenticationSettingKeys.AUTHENTICATION_CREDENTIAL_APIKEY_KEY_LENGTH);\n                    byte[] bPre = new byte[preLength];\n                    random.nextBytes(bPre);\n                    String pre = Base64.encodeToString(bPre).substring(0, preLength);\n                    byte[] bKey = new byte[keyLength];\n                    random.nextBytes(bKey);\n                    String key = Base64.encodeToString(bKey);\n                    fullKey = pre + key;\n                    credentialCreator = new CredentialCreatorImpl(credentialCreator.getScopeId(),\n                            credentialCreator.getUserId(),\n                            credentialCreator.getCredentialType(),\n                            fullKey,\n                            credentialCreator.getCredentialStatus(),\n                            credentialCreator.getExpirationDate());\n                    break;\n                case PASSWORD:\n                default:\n                    // Don't do nothing special\n                    break;\n            }\n            credential = CredentialDAO.create(em, credentialCreator);\n            credential = CredentialDAO.find(em, credential.getScopeId(), credential.getId());\n            em.commit();\n            //\n            // Do post persist magic on key values\n            switch (credentialCreator.getCredentialType()) {\n                case API_KEY:\n                    credential.setCredentialKey(fullKey);\n                    break;\n                case PASSWORD:\n                default:\n                    credential.setCredentialKey(fullKey);\n            }\n        } catch (Exception pe) {\n            em.rollback();\n            throw KapuaExceptionUtils.convertPersistenceException(pe);\n        } finally {\n            em.close();\n        }\n        return credential;\n    }\n    @Override\n    public Credential update(Credential credential)\n            throws KapuaException {\n        //\n        // Argument Validation\n        ArgumentValidator.notNull(credential, \"credential\");\n        ArgumentValidator.notNull(credential.getId(), \"credential.id\");\n        ArgumentValidator.notNull(credential.getScopeId(), \"credential.scopeId\");\n        ArgumentValidator.notNull(credential.getUserId(), \"credential.userId\");\n        ArgumentValidator.notNull(credential.getCredentialType(), \"credential.credentialType\");\n        ArgumentValidator.notEmptyOrNull(credential.getCredentialKey(), \"credential.credentialKey\");\n        //\n        // Check access\n        KapuaLocator locator = KapuaLocator.getInstance();\n        AuthorizationService authorizationService = locator.getService(AuthorizationService.class);\n        PermissionFactory permissionFactory = locator.getFactory(PermissionFactory.class);\n        authorizationService.checkPermission(permissionFactory.newPermission(AuthenticationDomains.CREDENTIAL_DOMAIN, Actions.write, credential.getScopeId()));\n        return entityManagerSession.onTransactedResult(em -> {\n            Credential currentCredential = CredentialDAO.find(em, credential.getScopeId(), credential.getId());\n            if (currentCredential == null) {\n                throw new KapuaEntityNotFoundException(Credential.TYPE, credential.getId());\n            }\n            if (currentCredential.getCredentialType() != credential.getCredentialType()) {\n                throw new KapuaIllegalArgumentException(\"credentialType\", credential.getCredentialType().toString());\n            }\n            // Passing attributes??\n            return CredentialDAO.update(em, credential);\n        });\n    }\n    @Override\n    public Credential find(KapuaId scopeId, KapuaId credentialId)\n            throws KapuaException {\n        // Validation of the fields\n        ArgumentValidator.notNull(scopeId, \"scopeId\");\n        ArgumentValidator.notNull(credentialId, \"credentialId\");\n        //\n        // Check Access\n        KapuaLocator locator = KapuaLocator.getInstance();\n        AuthorizationService authorizationService = locator.getService(AuthorizationService.class);\n        PermissionFactory permissionFactory = locator.getFactory(PermissionFactory.class);\n        authorizationService.checkPermission(permissionFactory.newPermission(AuthenticationDomains.CREDENTIAL_DOMAIN, Actions.read, scopeId));\n        return entityManagerSession.onResult(em -> CredentialDAO.find(em, scopeId, credentialId));\n    }\n    @Override\n    public CredentialListResult query(KapuaQuery<Credential> query)\n            throws KapuaException {\n        //\n        // Argument Validation\n        ArgumentValidator.notNull(query, \"query\");\n        ArgumentValidator.notNull(query.getScopeId(), \"query.scopeId\");\n        //\n        // Check Access\n        KapuaLocator locator = KapuaLocator.getInstance();\n        AuthorizationService authorizationService = locator.getService(AuthorizationService.class);\n        PermissionFactory permissionFactory = locator.getFactory(PermissionFactory.class);\n        authorizationService.checkPermission(permissionFactory.newPermission(AuthenticationDomains.CREDENTIAL_DOMAIN, Actions.read, query.getScopeId()));\n        return entityManagerSession.onResult(em -> CredentialDAO.query(em, query));\n    }\n    @Override\n    public long count(KapuaQuery<Credential> query)\n            throws KapuaException {\n        //\n        // Argument Validation\n        ArgumentValidator.notNull(query, \"query\");\n        ArgumentValidator.notNull(query.getScopeId(), \"query.scopeId\");\n        //\n        // Check Access\n        KapuaLocator locator = KapuaLocator.getInstance();\n        AuthorizationService authorizationService = locator.getService(AuthorizationService.class);\n        PermissionFactory permissionFactory = locator.getFactory(PermissionFactory.class);\n        authorizationService.checkPermission(permissionFactory.newPermission(AuthenticationDomains.CREDENTIAL_DOMAIN, Actions.read, query.getScopeId()));\n        return entityManagerSession.onResult(em -> CredentialDAO.count(em, query));\n    }\n    @Override\n    public void delete(KapuaId scopeId, KapuaId credentialId)\n            throws KapuaException {\n        //\n        // Argument Validation\n        ArgumentValidator.notNull(credentialId, \"credential.id\");\n        ArgumentValidator.notNull(scopeId, \"credential.scopeId\");\n        //\n        // Check Access\n        KapuaLocator locator = KapuaLocator.getInstance();\n        AuthorizationService authorizationService = locator.getService(AuthorizationService.class);\n        PermissionFactory permissionFactory = locator.getFactory(PermissionFactory.class);\n        authorizationService.checkPermission(permissionFactory.newPermission(AuthenticationDomains.CREDENTIAL_DOMAIN, Actions.delete, scopeId));\n        entityManagerSession.onTransactedAction(em -> {\n            if (CredentialDAO.find(em, scopeId, credentialId) == null) {\n                throw new KapuaEntityNotFoundException(Credential.TYPE, credentialId);\n            }\n            CredentialDAO.delete(em, scopeId, credentialId);\n        });\n    }\n    @Override\n    public CredentialListResult findByUserId(KapuaId scopeId, KapuaId userId)\n            throws KapuaException {\n        //<fim_middle>// class below is blob\n"}