{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache.mvcc.msg;\n\nimport java.nio.ByteBuffer;\nimport org.apache.ignite.internal.processors.cache.GridCacheIdMessage;\nimport org.apache.ignite.lang.IgniteUuid;\nimport org.apache.ignite.plugin.extensions.communication.MessageReader;\nimport org.apache.ignite.plugin.extensions.communication.MessageWriter;\n\n/** */\n<fim_suffix>public class PartitionCountersNeighborcastResponse extends GridCacheIdMessage {\n    /** */\n    private static final long serialVersionUID = -8731050539139260521L;\n\n    /** */\n    private IgniteUuid futId;\n\n    /** */\n    public PartitionCountersNeighborcastResponse() {\n    }\n\n    /** */\n    public PartitionCountersNeighborcastResponse(IgniteUuid futId) {\n        this.futId = futId;\n    }\n\n    /**\n     * @return Sending future id.\n     */\n    public IgniteUuid futId() {\n        return futId;\n    }\n\n    /** {@inheritDoc} */\n    @Override public boolean writeTo(ByteBuffer buf, MessageWriter writer) {\n        writer.setBuffer(buf);\n\n        if (!super.writeTo(buf, writer))\n            return false;\n\n        if (!writer.isHeaderWritten()) {\n            if (!writer.writeHeader(directType(), fieldsCount()))\n                return false;\n\n            writer.onHeaderWritten();\n        }\n\n        switch (writer.state()) {\n            case 4:\n                if (!writer.writeIgniteUuid(\"futId\", futId))\n                    return false;\n\n                writer.incrementState();\n\n        }\n\n        return true;\n    }\n\n    /** {@inheritDoc} */\n    @Override public boolean readFrom(ByteBuffer buf, MessageReader reader) {\n        reader.setBuffer(buf);\n\n        if (!reader.beforeMessageRead())\n            return false;\n\n        if (!super.readFrom(buf, reader))\n            return false;\n\n        switch (reader.state()) {\n            case 4:\n                futId = reader.readIgniteUuid(\"futId\");\n\n                if (!reader.isLastRead())\n                    return false;\n\n                reader.incrementState();\n\n        }\n\n        return reader.afterMessageRead(PartitionCountersNeighborcastResponse.class);\n    }\n\n    /** {@inheritDoc} */\n    @Override public short directType() {\n        return 166;\n    }\n\n    /** {@inheritDoc} */\n    @Override public byte fieldsCount() {\n        return 5;\n    }\n\n    /** {@inheritDoc} */\n    @Override public boolean addDeploymentInfo() {\n        return false;\n    }\n}<fim_middle>// class below has no smell\n"}