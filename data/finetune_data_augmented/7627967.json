{"text": "<fim_prefix>\t\t\t\t\t\tconfigSets.add(cs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Unsupported model element \" + element);\n\t\t}\n\t\treturn configSets;\n\t}\n\t/**\n\t * Returns the {@link IFile} for a given {@link IModelElement}.\n\t */\n\tpublic static IFile getFile(IModelElement element) {\n\t\tif (element instanceof IResourceModelElement) {\n\t\t\tIResource resource = ((IResourceModelElement) element).getElementResource();\n\t\t\tif (resource instanceof IFile) {\n\t\t\t\treturn (IFile) resource;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Returns the first constructor argument defined for given bean.\n\t * @param bean the bean to lookup the first constructor argument\n\t * @return the first constructor argument or <code>null</code> if no constructor argument is defined\n\t */\n\tpublic static IBeanConstructorArgument getFirstConstructorArgument(IBean bean) {\n\t\tIBeanConstructorArgument firstCarg = null;\n\t\tint firstCargStartLine = Integer.MAX_VALUE;\n\t\tfor (IBeanConstructorArgument carg : bean.getConstructorArguments()) {\n\t\t\tif (carg.getElementStartLine() < firstCargStartLine) {\n\t\t\t\tfirstCarg = carg;\n\t\t\t\tfirstCargStartLine = carg.getElementStartLine();\n\t\t\t}\n\t\t}\n\t\treturn firstCarg;\n\t}\n\t/**\n\t * Returns the importing {@link IBeansConfig} from a {@link IImportedBeansConfig}.\n\t * <p>\n\t * <code>null</code> can be returned if the given {@link IBeansConfig} is not imported.\n\t * @since 2.0.4\n\t */\n\tpublic static IBeansConfig getImportingBeansConfig(IBeansConfig beansConfig) {\n\t\tif (beansConfig instanceof IImportedBeansConfig) {\n\t\t\t// navigate up the model tree\n\t\t\treturn (IBeansConfig) beansConfig.getElementParent().getElementParent();\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Returns the inner {@link IBean}s of a given {@link IModelElement}.\n\t * @since 2.1.0\n\t */\n\tpublic static Set<IBean> getInnerBeans(final IModelElement element, final boolean recursive) {\n\t\tfinal Set<IBean> innerBeans = new HashSet<IBean>();\n\t\tIModelElementVisitor visitor = new IModelElementVisitor() {\n\t\t\tpublic boolean visit(IModelElement visitedElement, IProgressMonitor monitor) {\n\t\t\t\tif (!element.equals(visitedElement) && visitedElement instanceof IBean\n\t\t\t\t\t\t&& ((IBean) visitedElement).isInnerBean()) {\n\t\t\t\t\tinnerBeans.add((IBean) visitedElement);\n\t\t\t\t\treturn recursive;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\t\telement.accept(visitor, new NullProgressMonitor());\n\t\treturn innerBeans;\n\t}\n\t/**\n\t * Returns the inner {@link IBean}s of a given {@link IModelElement}.\n\t */\n\tpublic static Set<IBean> getInnerBeans(final IModelElement element) {\n\t\treturn getInnerBeans(element, true);\n\t}\n\t/**\n\t * Returns the merged bean definition for a given bean from specified context ( {@link IBeansConfig} or\n\t * {@link IBeansConfigSet}). Any cyclic-references are ignored.\n\t * @param bean the bean the merged bean definition is requested for\n\t * @param context the context ({@link IBeanConfig} or {@link IBeanConfigSet}) the beans are looked-up\n\t * @return given bean's merged bean definition\n\t * @throws IllegalArgumentException if unsupported context specified\n\t */\n\tpublic static BeanDefinition getMergedBeanDefinition(IBean bean, IModelElement context) {\n\t\tBeanDefinition bd = ((Bean) bean).getBeanDefinition();\n\t\tif (bean.isChildBean()) {\n\t\t\t// If no context specified the use the bean's config instead\n\t\t\tif (context == null) {\n\t\t\t\tcontext = BeansModelUtils.getConfig(bean);\n\t\t\t}\n\t\t\t// Fill a set with all bean definitions belonging to the\n\t\t\t// hierarchy of the requested bean definition\n\t\t\tList<BeanDefinition> beanDefinitions = new ArrayList<BeanDefinition>();\n\t\t\t// used to detect a cycle\n\t\t\tbeanDefinitions.add(bd);\n\t\t\taddBeanDefinition(bean, context, beanDefinitions);\n\t\t\t// Merge the bean definition hierarchy to a single bean\n\t\t\t// definition\n\t\t\tAbstractBeanDefinition rbd = null;\n\t\t\tint bdCount = beanDefinitions.size();\n\t\t\tfor (int i = bdCount - 1; i >= 0; i--) {\n\t\t\t\tBeanDefinition abd = beanDefinitions.get(i);\n\t\t\t\tif (rbd != null) {\n\t\t\t\t\trbd.overrideFrom(abd);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (abd instanceof RootBeanDefinition) {\n\t\t\t\t\t\trbd = new RootBeanDefinition((RootBeanDefinition) abd);\n\t\t\t\t\t}\n\t\t\t\t\telse if (abd instanceof GenericBeanDefinition) {\n\t\t\t\t\t\trbd = new GenericBeanDefinition(abd);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// root of hierarchy is not a root bean definition\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (rbd != null) {\n\t\t\t\treturn rbd;\n\t\t\t}\n\t\t}\n\t\treturn bd;\n\t}\n\tpublic static IModelElement getModelElement(Element element, IModelElement context) {\n\t\tNode parent = element.getParentNode();\n\t\tif (BeansTags.isTag(element, Tag.BEAN) && BeansTags.isTag(parent, Tag.BEANS)) {\n\t\t\tString beanName = getBeanName(element);\n\t\t\tif (beanName != null) {\n\t\t\t\treturn BeansModelUtils.getBean(beanName, context);\n\t\t\t}\n\t\t}\n\t\telse if (BeansTags.isTag(element, Tag.PROPERTY) && BeansTags.isTag(parent, Tag.BEAN)\n\t\t\t\t&& BeansTags.isTag(parent.getParentNode(), Tag.BEANS)) {\n\t\t\tString beanName = getBeanName((Element) parent);\n\t\t\tif (beanName != null) {\n\t\t\t\tIBean bean = BeansModelUtils.getBean(beanName, context);\n\t\t\t\tif (bean != null) {\n\t\t\t\t\tNode nameAttribute = element.getAttributeNode(\"name\");\n\t\t\t\t\tif (nameAttribute != null && nameAttribute.getNodeValue() != null) {\n\t\t\t\t\t\treturn bean.getProperty(nameAttribute.getNodeValue());\n\t\t\t\t\t}\n\t\t\t\t\treturn bean;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Returns the most specific {@link IModelElement} that corresponds to the given <code>startLine</code> and\n\t * <code>endLine</code> line numbers.\n\t * <p>\n\t * Client should be aware of possible <code>null</code> returns in case on {@link IModelElement} can be found at the\n\t * given location.\n\t * @since 2.0.1\n\t */\n\tpublic static IModelElement getMostSpecificModelElement(int startLine, int endLine, IFile resource,\n\t\t\tIProgressMonitor monitor) {\n\t\tif (BeansCoreUtils.isBeansConfig(resource, true)) {\n\t\t\tif (monitor == null) {\n\t\t\t\tmonitor = new NullProgressMonitor();\n\t\t\t}\n\t\t\tIBeansConfig beansConfig = BeansCorePlugin.getModel().getConfig(resource, true);\n\t\t\tModelElementDetermingModelVisitor v = new ModelElementDetermingModelVisitor(startLine, endLine, resource);\n\t\t\tbeansConfig.accept(v, monitor);\n\t\t\treturn v.getElement();\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Iterates up the model tree to find the first parent element that is of the given <code>parentType</code>.\n\t * @since 2.0.4\n\t */\n<fim_suffix>\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T getParentOfClass(IModelElement child, Class<T> parentType) {\n\t\tif (child != null) {\n\t\t\tIModelElement parent = child.getElementParent();\n\t\t\twhile (parent != null) {\n\t\t\t\tif (parentType.isAssignableFrom(parent.getClass())) {\n\t\t\t\t\treturn (T) parent;\n\t\t\t\t}\n\t\t\t\tparent = parent.getElementParent();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}<fim_middle>// function below has no smell\n"}