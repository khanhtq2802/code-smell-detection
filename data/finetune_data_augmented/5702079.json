{"text": "<fim_prefix>\n<fim_suffix>  public static class beginBlobDownload_args implements org.apache.storm.thrift.TBase<beginBlobDownload_args, beginBlobDownload_args._Fields>, java.io.Serializable, Cloneable, Comparable<beginBlobDownload_args>   {\n    private static final org.apache.storm.thrift.protocol.TStruct STRUCT_DESC = new org.apache.storm.thrift.protocol.TStruct(\"beginBlobDownload_args\");\n    private static final org.apache.storm.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(\"key\", org.apache.storm.thrift.protocol.TType.STRING, (short)1);\n    private static final org.apache.storm.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new beginBlobDownload_argsStandardSchemeFactory();\n    private static final org.apache.storm.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new beginBlobDownload_argsTupleSchemeFactory();\n    private @org.apache.storm.thrift.annotation.Nullable java.lang.String key; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.storm.thrift.TFieldIdEnum {\n      KEY((short)1, \"key\");\n      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n      static {\n        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      @org.apache.storm.thrift.annotation.Nullable\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // KEY\n            return KEY;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      @org.apache.storm.thrift.annotation.Nullable\n      public static _Fields findByName(java.lang.String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final java.lang.String _fieldName;\n      _Fields(short thriftId, java.lang.String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public java.lang.String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final java.util.Map<_Fields, org.apache.storm.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      java.util.Map<_Fields, org.apache.storm.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.storm.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.KEY, new org.apache.storm.thrift.meta_data.FieldMetaData(\"key\", org.apache.storm.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.storm.thrift.meta_data.FieldValueMetaData(org.apache.storm.thrift.protocol.TType.STRING)));\n      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n      org.apache.storm.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginBlobDownload_args.class, metaDataMap);\n    }\n    public beginBlobDownload_args() {\n    }\n    public beginBlobDownload_args(\n      java.lang.String key)\n    {\n      this();\n      this.key = key;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public beginBlobDownload_args(beginBlobDownload_args other) {\n      if (other.is_set_key()) {\n        this.key = other.key;\n      }\n    }\n    public beginBlobDownload_args deepCopy() {\n      return new beginBlobDownload_args(this);\n    }\n    @Override\n    public void clear() {\n      this.key = null;\n    }\n    @org.apache.storm.thrift.annotation.Nullable\n    public java.lang.String get_key() {\n      return this.key;\n    }\n    public void set_key(@org.apache.storm.thrift.annotation.Nullable java.lang.String key) {\n      this.key = key;\n    }\n    public void unset_key() {\n      this.key = null;\n    }\n    /** Returns true if field key is set (has been assigned a value) and false otherwise */\n    public boolean is_set_key() {\n      return this.key != null;\n    }\n    public void set_key_isSet(boolean value) {\n      if (!value) {\n        this.key = null;\n      }\n    }\n    public void setFieldValue(_Fields field, @org.apache.storm.thrift.annotation.Nullable java.lang.Object value) {\n      switch (field) {\n      case KEY:\n        if (value == null) {\n          unset_key();\n        } else {\n          set_key((java.lang.String)value);\n        }\n        break;\n      }\n    }\n    @org.apache.storm.thrift.annotation.Nullable\n    public java.lang.Object getFieldValue(_Fields field) {\n      switch (field) {\n      case KEY:\n        return get_key();\n      }\n      throw new java.lang.IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new java.lang.IllegalArgumentException();\n      }\n      switch (field) {\n      case KEY:\n        return is_set_key();\n      }\n      throw new java.lang.IllegalStateException();\n    }\n    @Override\n    public boolean equals(java.lang.Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof beginBlobDownload_args)\n        return this.equals((beginBlobDownload_args)that);\n      return false;\n    }\n    public boolean equals(beginBlobDownload_args that) {\n      if (that == null)\n        return false;\n      if (this == that)\n        return true;\n      boolean this_present_key = true && this.is_set_key();\n      boolean that_present_key = true && that.is_set_key();\n      if (this_present_key || that_present_key) {\n        if (!(this_present_key && that_present_key))\n          return false;\n        if (!this.key.equals(that.key))\n          return false;\n      }\n      return true;\n    }\n    @Override\n    public int hashCode() {\n      int hashCode = 1;\n      hashCode = hashCode * 8191 + ((is_set_key()) ? 131071 : 524287);\n      if (is_set_key())\n        hashCode = hashCode * 8191 + key.hashCode();\n      return hashCode;\n    }\n    @Override\n    public int compareTo(beginBlobDownload_args other) {\n      if (!getClass().equals(other.getClass())) {\n        return getClass().getName().compareTo(other.getClass().getName());\n      }\n      int lastComparison = 0;\n      lastComparison = java.lang.Boolean.valueOf(is_set_key()).compareTo(other.is_set_key());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (is_set_key()) {\n        lastComparison = org.apache.storm.thrift.TBaseHelper.compareTo(this.key, other.key);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    @org.apache.storm.thrift.annotation.Nullable\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.storm.thrift.protocol.TProtocol iprot) throws org.apache.storm.thrift.TException {\n      scheme(iprot).read(iprot, this);\n    }\n    public void write(org.apache.storm.thrift.protocol.TProtocol oprot) throws org.apache.storm.thrift.TException {\n      scheme(oprot).write(oprot, this);\n    }\n    @Override\n    public java.lang.String toString() {\n      java.lang.StringBuilder sb = new java.lang.StringBuilder(\"beginBlobDownload_args(\");\n      boolean first = true;\n      sb.append(\"key:\");\n      if (this.key == null) {\n        sb.append(\"null\");\n      } else {<fim_middle>// class below is blob\n"}