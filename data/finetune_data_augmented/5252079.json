{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.oozie;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\n\nimport com.google.common.base.Charsets;\nimport org.apache.oozie.compression.CodecFactory;\nimport org.apache.oozie.compression.CompressionCodec;\nimport org.apache.oozie.util.ByteArrayUtils;\nimport org.apache.oozie.util.StringUtils;\n\n/**\n * StringBlob to maintain compress and uncompressed data\n */\n<fim_suffix>public class StringBlob {\n\n    private byte[] rawBlob;\n    private String string;\n\n    /**\n     * Construct string blob from compressed byte array\n     *\n     * @param byteArray the byte array\n     */\n    public StringBlob(byte[] byteArray) {\n        this.rawBlob = ByteArrayUtils.weakIntern(byteArray);\n    }\n\n    /**\n     * Construct StringBlob with uncompressed string\n     *\n     * @param inputString the string\n     */\n    public StringBlob(String inputString) {\n        this.string = StringUtils.intern(inputString);\n        this.rawBlob = null;\n    }\n\n    /**\n     * Set string\n     *\n     * @param str the string\n     */\n    public void setString(String str) {\n        this.string = StringUtils.intern(str);\n        this.rawBlob = null;\n    }\n\n    /**\n     * Get uncompressed string\n     *\n     * @return uncompressed string\n     */\n    public String getString() {\n        if (string != null) {\n            return string;\n        }\n        if (rawBlob == null) {\n            return null;\n        }\n        try {\n            DataInputStream dais = new DataInputStream(new ByteArrayInputStream(rawBlob));\n            CompressionCodec codec = CodecFactory.getDeCompressionCodec(dais);\n            if (codec != null) {\n                string = StringUtils.intern(codec.decompressToString(dais));\n            }\n            else {\n                string = StringUtils.intern((new String(rawBlob, CodecFactory.UTF_8_ENCODING)));\n            }\n            dais.close();\n\n        }\n        catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n        rawBlob = null;\n        return string;\n    }\n\n    /**\n     * Get raw blob\n     *\n     * @return raw blob\n     */\n    public byte[] getRawBlob() {\n        if (rawBlob != null) {\n            return rawBlob;\n        }\n        if (string == null) {\n            return null;\n        }\n        if (CodecFactory.isCompressionEnabled()) {\n            byte[] bytes = CodecFactory.getHeaderBytes();\n            try {\n                rawBlob = ByteArrayUtils.weakIntern(CodecFactory.getCompressionCodec().compressString(bytes, string));\n            }\n            catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n        else {\n            rawBlob = ByteArrayUtils.weakIntern(string.getBytes(Charsets.UTF_8));\n        }\n        return rawBlob;\n    }\n\n}<fim_middle>// class below has no smell\n"}