{"text": "<fim_prefix>/*\n * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage org.graalvm.compiler.jtt.micro;\n\nimport org.junit.Test;\n\nimport org.graalvm.compiler.jtt.JTTTest;\n\n/*\n */\n<fim_suffix>public class Matrix01 extends JTTTest {\n\n    public static class Matrix {\n\n        final int id;\n\n        Matrix(int id) {\n            this.id = id;\n        }\n    }\n\n    public static int test(int arg) {\n        if (arg == 0) {\n            return matrix1(3) + matrix1(5);\n        }\n        if (arg == 1) {\n            return matrix2(3) + matrix2(5);\n        }\n        if (arg == 2) {\n            return matrix3(3) + matrix3(5);\n        }\n        if (arg == 3) {\n            return matrix4(3) + matrix4(5);\n        }\n        if (arg == 4) {\n            return matrix5(3) + matrix5(5);\n        }\n        return 42;\n    }\n\n    static int matrix1(int size) {\n        Matrix[] matrix = new Matrix[size];\n        fillMatrix(matrix, size);\n        int count = 0;\n        for (Matrix m : matrix) {\n            if (m != null) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    static int matrix2(int size) {\n        Matrix[][] matrix = new Matrix[size][size];\n        fillMatrix(matrix, size * size);\n        int count = 0;\n        for (Matrix[] n : matrix) {\n            for (Matrix m : n) {\n                if (m != null) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    static int matrix3(int size) {\n        Matrix[][][] matrix = new Matrix[size][5][size];\n        fillMatrix(matrix, size * size * size);\n        int count = 0;\n        for (Matrix[][] o : matrix) {\n            for (Matrix[] n : o) {\n                for (Matrix m : n) {\n                    if (m != null) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    static int matrix4(int size) {\n        Matrix[][][][] matrix = new Matrix[size][2][size][3];\n        fillMatrix(matrix, size * size * size * size);\n        int count = 0;\n        for (Matrix[][][] p : matrix) {\n            for (Matrix[][] o : p) {\n                for (Matrix[] n : o) {\n                    for (Matrix m : n) {\n                        if (m != null) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    static int matrix5(int size) {\n        Matrix[][][][][] matrix = new Matrix[size][size][3][4][size];\n        fillMatrix(matrix, size * size * size * size * size);\n        int count = 0;\n        for (Matrix[][][][] q : matrix) {\n            for (Matrix[][][] p : q) {\n                for (Matrix[][] o : p) {\n                    for (Matrix[] n : o) {\n                        for (Matrix m : n) {\n                            if (m != null) {\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    static void fillMatrix(Object[] matrix, int total) {\n        for (int i = 0; i < 10000; i += 7) {\n            int number = i % total;\n            set(matrix, number);\n        }\n    }\n\n    static void set(Object[] matrix, int number) {\n        int val = number;\n        Object[] array = matrix;\n        while (!(array instanceof Matrix[])) {\n            int index = val % array.length;\n            val = val / array.length;\n            array = (Object[]) array[index];\n        }\n        ((Matrix[]) array)[val % array.length] = new Matrix(number);\n    }\n\n    @Test\n    public void run0() throws Throwable {\n        runTest(\"test\", 0);\n    }\n\n    @Test\n    public void run1() throws Throwable {\n        runTest(\"test\", 1);\n    }\n\n    @Test\n    public void run2() throws Throwable {\n        runTest(\"test\", 2);\n    }\n\n    @Test\n    public void run3() throws Throwable {\n        runTest(\"test\", 3);\n    }\n\n    @Test\n    public void run4() throws Throwable {\n        runTest(\"test\", 4);\n    }\n\n    @Test\n    public void run5() throws Throwable {\n        runTest(\"test\", 5);\n    }\n\n}<fim_middle>// class below has no smell\n"}