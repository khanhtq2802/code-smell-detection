{"text": "<fim_prefix>        private static final BitSpec rs2 = new ContinousBitSpec(4, 0, \"rs2\");\n        private static final BitSpec simm13 = new ContinousBitSpec(12, 0, true, \"simm13\");\n        private static final BitSpec shcnt32 = new ContinousBitSpec(4, 0, \"shcnt32\");\n        private static final BitSpec shcnt64 = new ContinousBitSpec(5, 0, \"shcnt64\");\n        private static final BitSpec imm22 = new ContinousBitSpec(21, 0, \"imm22\");\n        private static final BitSpec immAsi = new ContinousBitSpec(12, 5, \"immASI\");\n        private static final BitSpec i = new ContinousBitSpec(13, 13, \"i\");\n        private static final BitSpec disp19 = new ContinousBitSpec(18, 0, true, \"disp19\");\n        private static final BitSpec disp22 = new ContinousBitSpec(21, 0, true, \"disp22\");\n        private static final BitSpec disp30 = new ContinousBitSpec(29, 0, true, \"disp30\");\n        private static final BitSpec a = new ContinousBitSpec(29, 29, \"a\");\n        private static final BitSpec p = new ContinousBitSpec(19, 19, \"p\");\n        private static final BitSpec x = new ContinousBitSpec(12, 12, \"x\");\n        private static final BitSpec cond = new ContinousBitSpec(28, 25, \"cond\");\n        private static final BitSpec rcond = new ContinousBitSpec(27, 25, \"rcond\");\n        private static final BitSpec cc = new ContinousBitSpec(21, 20, \"cc\");\n        private static final BitSpec fcc = new ContinousBitSpec(26, 25, \"cc\");\n        private static final BitSpec d16lo = new ContinousBitSpec(13, 0, \"d16lo\");\n        private static final BitSpec d16hi = new ContinousBitSpec(21, 20, true, \"d16hi\");\n        private static final BitSpec d16 = new CompositeBitSpec(d16hi, d16lo);\n        // Movcc\n        private static final BitSpec movccLo = new ContinousBitSpec(12, 11, \"cc_lo\");\n        private static final BitSpec movccHi = new ContinousBitSpec(18, 18, \"cc_hi\");\n        private static final BitSpec movccCond = new ContinousBitSpec(17, 14, \"cond\");\n        private static final BitSpec simm11 = new ContinousBitSpec(10, 0, true, \"simm11\");\n        // CBCond\n        private static final BitSpec cLo = new ContinousBitSpec(27, 25, \"cLo\");\n        private static final BitSpec cHi = new ContinousBitSpec(29, 29, \"cHi\");\n        private static final BitSpec c = new CompositeBitSpec(cHi, cLo);\n        private static final BitSpec cbcond = new ContinousBitSpec(28, 28, \"cbcond\");\n        private static final BitSpec cc2 = new ContinousBitSpec(21, 21, \"cc2\");\n        private static final BitSpec d10Lo = new ContinousBitSpec(12, 5, \"d10Lo\");\n        private static final BitSpec d10Hi = new ContinousBitSpec(20, 19, true, \"d10Hi\");\n        private static final BitSpec d10 = new CompositeBitSpec(d10Hi, d10Lo);\n        private static final BitSpec simm5 = new ContinousBitSpec(4, 0, true, \"simm5\");\n        protected final boolean signExtend;\n        public BitSpec(boolean signExtend) {\n            super();\n            this.signExtend = signExtend;\n        }\n        public final boolean isSignExtend() {\n            return signExtend;\n        }\n        public abstract int setBits(int word, int value);\n        public abstract int getBits(int word);\n        public abstract int getWidth();\n        public abstract boolean valueFits(int value);\n    }\n    public static final class ContinousBitSpec extends BitSpec {\n        private final int hiBit;\n        private final int lowBit;\n        private final int width;\n        private final int mask;\n        private final String name;\n        public ContinousBitSpec(int hiBit, int lowBit, String name) {\n            this(hiBit, lowBit, false, name);\n        }\n        public ContinousBitSpec(int hiBit, int lowBit, boolean signExt, String name) {\n            super(signExt);\n            this.hiBit = hiBit;\n            this.lowBit = lowBit;\n            this.width = hiBit - lowBit + 1;\n            mask = ((1 << width) - 1) << lowBit;\n            this.name = name;\n        }\n        @Override\n        public int setBits(int word, int value) {\n            assert valueFits(value) : String.format(\"Value 0x%x for field %s does not fit.\", value, this);\n            return (word & ~mask) | ((value << lowBit) & mask);\n        }\n        @Override\n        public int getBits(int word) {\n            if (signExtend) {\n                return ((word & mask) << (31 - hiBit)) >> (32 - width);\n            } else {\n                return (word & mask) >>> lowBit;\n            }\n        }\n        @Override\n        public int getWidth() {\n            return width;\n        }\n        @Override\n        public String toString() {\n            return String.format(\"%s [%d:%d]\", name, hiBit, lowBit);\n        }\n        @Override\n        public boolean valueFits(int value) {\n            if (signExtend) {\n                return isSimm(value, getWidth());\n            } else {\n                return isImm(value, getWidth());\n            }\n        }\n    }\n<fim_suffix>    public static final class CompositeBitSpec extends BitSpec {\n        private final BitSpec left;\n        private final int leftWidth;\n        private final BitSpec right;\n        private final int rightWidth;\n        private final int width;\n        public CompositeBitSpec(BitSpec left, BitSpec right) {\n            super(left.isSignExtend());\n            assert !right.isSignExtend() : String.format(\"Right field %s must not be sign extended\", right);\n            this.left = left;\n            this.leftWidth = left.getWidth();\n            this.right = right;\n            this.rightWidth = right.getWidth();\n            this.width = leftWidth + rightWidth;\n        }\n        @Override\n        public int getBits(int word) {\n            int l = left.getBits(word);\n            int r = right.getBits(word);\n            return (l << rightWidth) | r;\n        }\n        @Override\n        public int setBits(int word, int value) {\n            int l = leftBits(value);\n            int r = rightBits(value);\n            return left.setBits(right.setBits(word, r), l);\n        }\n        private int leftBits(int value) {\n            return getBits(value, width - 1, rightWidth, signExtend);\n        }\n        private int rightBits(int value) {\n            return getBits(value, rightWidth - 1, 0, false);\n        }\n        @Override\n        public int getWidth() {\n            return width;\n        }\n        @Override\n        public String toString() {\n            return String.format(\"CompositeBitSpec[%s, %s]\", left, right);\n        }\n        @Override\n        public boolean valueFits(int value) {\n            int l = leftBits(value);\n            int r = rightBits(value);\n            return left.valueFits(l) && right.valueFits(r);\n        }\n        private static int getBits(int inst, int hiBit, int lowBit, boolean signExtended) {\n            int shifted = inst >> lowBit;\n            if (signExtended) {\n                return shifted;\n            } else {\n                return shifted & ((1 << (hiBit - lowBit + 1)) - 1);\n            }\n        }\n    }<fim_middle>// class below has no smell\n"}