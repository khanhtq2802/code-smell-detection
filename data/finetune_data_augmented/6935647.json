{"text": "<fim_prefix>/* Copyright (c) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage com.google.gdata.wireformats.input.media;\n\nimport com.google.gdata.util.common.base.Preconditions;\nimport com.google.gdata.data.ParseSource;\nimport com.google.gdata.data.media.MediaSource;\nimport com.google.gdata.data.media.MediaStreamSource;\nimport com.google.gdata.wireformats.AltFormat;\nimport com.google.gdata.wireformats.input.AbstractParser;\nimport com.google.gdata.wireformats.input.InputParser;\nimport com.google.gdata.wireformats.input.InputProperties;\n\nimport java.io.InputStream;\n\n/**\n * The MediaParser class provides an {@link InputParser} implementation for\n * consuming media data and exposing it as an {@link MediaSource} result.\n *\n * \n */\n<fim_suffix>public class MediaParser extends AbstractParser<MediaSource> {\n\n  public MediaParser() {\n    super(AltFormat.MEDIA, MediaSource.class);\n  }\n\n  public <R extends MediaSource> R parse(ParseSource parseSource,\n      InputProperties inProps, Class<R> resultClass) {\n    \n    // Ensure that the expected result type is MediaSource\n    Preconditions.checkArgument(resultClass.isAssignableFrom(MediaSource.class),\n        \"Result class must be \" + MediaSource.class.getName());\n    \n    InputStream inputStream = parseSource.getInputStream();\n    Preconditions.checkNotNull(inputStream,\n        \"Parse source must be stream-based\");   \n    \n    MediaStreamSource mediaSource = \n        new MediaStreamSource(inputStream, inProps.getContentType().toString());\n   \n    return resultClass.cast(mediaSource);\n  }\n}<fim_middle>// class below has no smell\n"}