{"text": "<fim_prefix>\t\t\t\tJvmAnnotationValue annotationValue = createArrayAnnotationValue(defaultValue, returnType);\n\t\t\t\toperation.setDefaultValue(annotationValue);\n\t\t\t\tannotationValue.setOperation(operation);\n\t\t\t} else {\n\t\t\t\tJvmAnnotationValue annotationValue = createAnnotationValue(defaultValue, returnType);\n\t\t\t\toperation.setDefaultValue(annotationValue);\n\t\t\t\tannotationValue.setOperation(operation);\n\t\t\t}\n\t\t}\n\t}\n\tprotected JvmEnumerationType createEnumerationType(Class<?> clazz) {\n\t\tJvmEnumerationType result = TypesFactory.eINSTANCE.createJvmEnumerationType();\n\t\tresult.internalSetIdentifier(clazz.getName());\n\t\tresult.setSimpleName(clazz.getSimpleName());\n\t\tif (clazz.getDeclaringClass() == null && clazz.getPackage() != null)\n\t\t\tresult.setPackageName(clazz.getPackage().getName());\n\t\tsetVisibility(clazz, result);\n\t\tsetTypeModifiers(clazz, result);\n\t\tcreateNestedTypes(clazz, result);\n\t\tcreateMethods(clazz, result);\n\t\tcreateFields(clazz, result);\n\t\tcreateConstructors(clazz, result);\n\t\tsetSuperTypes(clazz, result);\n\t\tcreateAnnotationValues(clazz, result);\n\t\treturn result;\n\t}\n\tprotected void setVisibility(Class<?> clazz, JvmMember result) {\n\t\tif (Modifier.isPrivate(clazz.getModifiers()))\n\t\t\tresult.setVisibility(JvmVisibility.PRIVATE);\n\t\telse if (Modifier.isProtected(clazz.getModifiers()))\n\t\t\tresult.setVisibility(JvmVisibility.PROTECTED);\n\t\telse if (Modifier.isPublic(clazz.getModifiers()))\n\t\t\tresult.setVisibility(JvmVisibility.PUBLIC);\n\t}\n\tprotected JvmTypeParameter createTypeParameter(TypeVariable<?> variable, JvmMember container) {\n\t\tJvmTypeParameter result = TypesFactory.eINSTANCE.createJvmTypeParameter();\n\t\tresult.setName(variable.getName());\n\t\tType[] bounds = variable.getBounds();\n\t\tif (bounds.length != 0) {\n\t\t\tInternalEList<JvmTypeConstraint> constraints = (InternalEList<JvmTypeConstraint>)result.getConstraints();\n\t\t\tfor (Type bound : variable.getBounds()) {\n\t\t\t\tJvmUpperBound upperBound = TypesFactory.eINSTANCE.createJvmUpperBound();\n\t\t\t\t((JvmTypeConstraintImplCustom) upperBound).internalSetTypeReference(createTypeReference(bound));\n\t\t\t\tconstraints.addUnique(upperBound);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tprotected JvmTypeReference createTypeReference(Type type) {\n\t\tif (type instanceof GenericArrayType) {\n\t\t\tGenericArrayType arrayType = (GenericArrayType) type;\n\t\t\tType componentType = arrayType.getGenericComponentType();\n\t\t\treturn createArrayTypeReference(componentType);\n\t\t} else if (type instanceof ParameterizedType) {\n\t\t\tParameterizedType parameterizedType = (ParameterizedType) type;\n\t\t\tType ownerType = parameterizedType.getOwnerType();\n\t\t\tif (ownerType instanceof ParameterizedType) {\n\t\t\t\tJvmTypeReference ownerTypeReference = createTypeReference(ownerType);\n\t\t\t\tif (ownerTypeReference instanceof JvmParameterizedTypeReference) {\n\t\t\t\t\tJvmInnerTypeReference result = TypesFactory.eINSTANCE.createJvmInnerTypeReference();\n\t\t\t\t\tresult.setOuter((JvmParameterizedTypeReference) ownerTypeReference);\n\t\t\t\t\treturn enhanceTypeReference(parameterizedType, result);\n\t\t\t\t} else {\n\t\t\t\t\tJvmParameterizedTypeReference result = TypesFactory.eINSTANCE.createJvmParameterizedTypeReference();\n\t\t\t\t\treturn enhanceTypeReference(parameterizedType, result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tJvmParameterizedTypeReference result = TypesFactory.eINSTANCE.createJvmParameterizedTypeReference();\n\t\t\t\treturn enhanceTypeReference(parameterizedType, result);\n\t\t\t}\n\t\t} else if (type instanceof Class<?> && ((Class<?>) type).isArray()) {\n\t\t\tClass<?> arrayType = (Class<?>) type;\n\t\t\tType componentType = arrayType.getComponentType();\n\t\t\treturn createArrayTypeReference(componentType);\n\t\t} else {\n\t\t\tJvmParameterizedTypeReference result = TypesFactory.eINSTANCE.createJvmParameterizedTypeReference();\n\t\t\tresult.setType(createProxy(type));\n\t\t\treturn result;\n\t\t}\n\t}\n\tprivate JvmTypeReference enhanceTypeReference(ParameterizedType parameterizedType,\n\t\t\tJvmParameterizedTypeReference result) {\n\t\tresult.setType(createProxy(parameterizedType.getRawType()));\n\t\tType[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\t\tif (actualTypeArguments.length != 0) {\n\t\t\tInternalEList<JvmTypeReference> arguments = (InternalEList<JvmTypeReference>)result.getArguments();\n\t\t\tfor (Type actualTypeArgument : actualTypeArguments) {\n\t\t\t\tJvmTypeReference argument = createTypeArgument(actualTypeArgument);\n\t\t\t\targuments.addUnique(argument);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tprotected JvmTypeReference createArrayTypeReference(Type componentType) {\n\t\tJvmTypeReference componentTypeReference = createTypeReference(componentType);\n\t\tJvmGenericArrayTypeReference result = TypesFactory.eINSTANCE.createJvmGenericArrayTypeReference();\n\t\tresult.setComponentType(componentTypeReference);\n\t\treturn result;\n\t}\n\tprotected JvmTypeReference createTypeArgument(Type actualTypeArgument) {\n\t\tif (actualTypeArgument instanceof WildcardType) {\n\t\t\tWildcardType wildcardType = (WildcardType) actualTypeArgument;\n\t\t\tJvmWildcardTypeReference result = TypesFactory.eINSTANCE.createJvmWildcardTypeReference();\n\t\t\tInternalEList<JvmTypeConstraint> constraints = (InternalEList<JvmTypeConstraint>)result.getConstraints();\n\t\t\tType[] upperBounds = wildcardType.getUpperBounds();\n\t\t\tif (upperBounds.length != 0) {\n\t\t\t\tfor (Type boundType : upperBounds) {\n\t\t\t\t\tJvmUpperBound upperBound = TypesFactory.eINSTANCE.createJvmUpperBound();\n\t\t\t\t\tJvmTypeReference upperBoundType = createTypeReference(boundType);\n\t\t\t\t\t((JvmTypeConstraintImplCustom) upperBound).internalSetTypeReference(upperBoundType);\n\t\t\t\t\tconstraints.addUnique(upperBound);\n\t\t\t\t}\n\t\t\t}\n\t\t\tType[] lowerBounds = wildcardType.getLowerBounds();\n\t\t\tif (lowerBounds.length != 0) {\n\t\t\t\tfor (Type boundType : lowerBounds) {\n\t\t\t\t\tJvmLowerBound lowerBound = TypesFactory.eINSTANCE.createJvmLowerBound();\n\t\t\t\t\tJvmTypeReference lowerBoundType = createTypeReference(boundType);\n\t\t\t\t\t((JvmTypeConstraintImplCustom) lowerBound).internalSetTypeReference(lowerBoundType);\n\t\t\t\t\tconstraints.addUnique(lowerBound);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t} else {\n\t\t\tJvmTypeReference result = createTypeReference(actualTypeArgument);\n\t\t\treturn result;\n\t\t}\n\t}\n\tprotected JvmType createProxy(Type type) {\n\t\tJvmType proxy = typeProxies.get(type);\n\t\tif (proxy == null) {\n\t\t\tproxy = TypesFactory.eINSTANCE.createJvmVoid();\n\t\t\tURI uri = uriHelper.getFullURI(type);\n\t\t\t((InternalEObject)proxy).eSetProxyURI(uri);\n\t\t\ttypeProxies.put(type, proxy);\n\t\t}\n\t\treturn proxy;\n\t}\n<fim_suffix>\tprotected JvmField createField(Field field) {\n\t\tJvmField result;\n\t\tint modifiers = field.getModifiers();\n\t\tif (!field.isEnumConstant()) {\n\t\t\tresult = TypesFactory.eINSTANCE.createJvmField();\n\t\t} else\n\t\t\tresult = TypesFactory.eINSTANCE.createJvmEnumerationLiteral();\n\t\tString fieldName = field.getName();\n\t\tresult.internalSetIdentifier(field.getDeclaringClass().getName() + \".\" + fieldName);\n\t\tresult.setSimpleName(fieldName);\n\t\tresult.setFinal(Modifier.isFinal(modifiers));\n\t\tresult.setStatic(Modifier.isStatic(modifiers));\n\t\tresult.setTransient(Modifier.isTransient(modifiers));\n\t\tresult.setVolatile(Modifier.isVolatile(modifiers));\n\t\tsetVisibility(result, modifiers);\n\t\tType fieldType = null;\n\t\ttry {\n\t\t\tfieldType = field.getGenericType();\n\t\t} catch (GenericSignatureFormatError error) {\n\t\t\tlogSignatureFormatError(field.getDeclaringClass());\n\t\t\tfieldType = field.getType();\n\t\t} catch (MalformedParameterizedTypeException error) {\n\t\t\tlogSignatureFormatError(field.getDeclaringClass());\n\t\t\tfieldType = field.getType();\n\t\t}\n\t\tresult.setType(createTypeReference(fieldType));\n\t\tcreateAnnotationValues(field, result);\n\t\treturn result;\n\t}<fim_middle>// function below is feature envy and long method\n"}