{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.broker.region.policy;\n\nimport org.apache.activemq.ActiveMQMessageAudit;\nimport org.apache.activemq.command.Message;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * A strategy for choosing which destination is used for dead letter queue\n * messages.\n *\n */\n<fim_suffix>public abstract class AbstractDeadLetterStrategy implements DeadLetterStrategy {\n    private static final Logger LOG = LoggerFactory.getLogger(AbstractDeadLetterStrategy.class);\n    private boolean processNonPersistent = false;\n    private boolean processExpired = true;\n    private boolean enableAudit = true;\n    private final ActiveMQMessageAudit messageAudit = new ActiveMQMessageAudit();\n    private long expiration;\n\n    @Override\n    public void rollback(Message message) {\n        if (message != null && this.enableAudit) {\n            messageAudit.rollback(message);\n        }\n    }\n\n    @Override\n    public boolean isSendToDeadLetterQueue(Message message) {\n        boolean result = false;\n        if (message != null) {\n            result = true;\n            if (enableAudit && messageAudit.isDuplicate(message)) {\n                result = false;\n                LOG.debug(\"Not adding duplicate to DLQ: {}, dest: {}\", message.getMessageId(), message.getDestination());\n            }\n            if (!message.isPersistent() && !processNonPersistent) {\n                result = false;\n            }\n            if (message.isExpired() && !processExpired) {\n                result = false;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @return the processExpired\n     */\n    @Override\n    public boolean isProcessExpired() {\n        return this.processExpired;\n    }\n\n    /**\n     * @param processExpired the processExpired to set\n     */\n    @Override\n    public void setProcessExpired(boolean processExpired) {\n        this.processExpired = processExpired;\n    }\n\n    /**\n     * @return the processNonPersistent\n     */\n    @Override\n    public boolean isProcessNonPersistent() {\n        return this.processNonPersistent;\n    }\n\n    /**\n     * @param processNonPersistent the processNonPersistent to set\n     */\n    @Override\n    public void setProcessNonPersistent(boolean processNonPersistent) {\n        this.processNonPersistent = processNonPersistent;\n    }\n\n    public boolean isEnableAudit() {\n        return enableAudit;\n    }\n\n    public void setEnableAudit(boolean enableAudit) {\n        this.enableAudit = enableAudit;\n    }\n\n    public long getExpiration() {\n        return expiration;\n    }\n\n    public void setExpiration(long expiration) {\n        this.expiration = expiration;\n    }\n\n    public int getMaxProducersToAudit() {\n        return messageAudit.getMaximumNumberOfProducersToTrack();\n    }\n\n    public void setMaxProducersToAudit(int maxProducersToAudit) {\n        messageAudit.setMaximumNumberOfProducersToTrack(maxProducersToAudit);\n    }\n\n    public void setMaxAuditDepth(int maxAuditDepth) {\n        messageAudit.setAuditDepth(maxAuditDepth);\n    }\n\n    public int getMaxAuditDepth() {\n        return messageAudit.getAuditDepth();\n    }\n\n}<fim_middle>// class below is data class\n"}