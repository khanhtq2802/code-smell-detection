{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.hdfs.protocol;\n\nimport org.apache.hadoop.io.Writable;\nimport org.apache.hadoop.io.Text;\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\nimport java.util.Arrays;\n\n/**\n * Contains a list of paths corresponding to corrupt files and a cookie\n * used for iterative calls to NameNode.listCorruptFileBlocks.\n *\n */\npublic class CorruptFileBlocks implements Writable {\n  // used for hashCode\n  private static final int PRIME = 16777619;\n\n  private String[] files;\n  private String cookie;\n\n  public CorruptFileBlocks() {\n    this(new String[0], \"\");\n  }\n\n  public CorruptFileBlocks(String[] files, String cookie) {\n    this.files = files;\n    this.cookie = cookie;\n  }\n\n  public String[] getFiles() {\n    return files;\n  }\n\n  public String getCookie() {\n    return cookie;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void readFields(DataInput in) throws IOException {\n    int fileCount = in.readInt();\n    files = new String[fileCount];\n    for (int i = 0; i < fileCount; i++) {\n      files[i] = Text.readString(in);\n    }\n    cookie = Text.readString(in);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void write(DataOutput out) throws IOException {\n    out.writeInt(files.length);\n    for (int i = 0; i < files.length; i++) {\n      Text.writeString(out, files[i]);\n    }\n    Text.writeString(out, cookie);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (!(obj instanceof CorruptFileBlocks)) {\n      return false;\n    }\n    CorruptFileBlocks other = (CorruptFileBlocks) obj;\n    return cookie.equals(other.cookie) &&\n      Arrays.equals(files, other.files);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n<fim_suffix>  public int hashCode() {\n    int result = cookie.hashCode();\n\n    for (String file : files) {\n      result = PRIME * result + file.hashCode();\n    }\n\n    return result;\n  }\n}<fim_middle>// function below has no smell\n"}