{"text": "<fim_prefix>    buffer.append(\", autoCompact = \").append(getAutoCompact());\n    buffer.append(\", compactionThreshold = \").append(getCompactionThreshold());\n    buffer.append(\", maxOplogSize = \").append(getMaxOplogSize());\n    buffer.append(\", memberId = \").append(getMemberId());\n    buffer.append(\", memberName = \").append(getMemberName());\n    buffer.append(\", name = \").append(getName());\n    buffer.append(\", offline = \").append(getOffline());\n    buffer.append(\", pdxSerializationMetaDataStored = \")\n        .append(getPdxSerializationMetaDataStored());\n    buffer.append(\", queueSize = \").append(getQueueSize());\n    buffer.append(\", timeInterval = \").append(getTimeInterval());\n    buffer.append(\", writeBufferSize = \").append(getWriteBufferSize());\n    buffer.append(\", diskUsageWarningPercentage = \").append(getDiskUsageWarningPercentage());\n    buffer.append(\", diskUsageCriticalPercentage = \").append(getDiskUsageCriticalPercentage());\n    buffer.append(\", diskDirs = \").append(toString(diskDirDetailsSet));\n    buffer.append(\", asyncEventQueus = \").append(toString(asyncEventQueueDetailsSet));\n    buffer.append(\", cacheServers = \").append(toString(cacheServerDetailsSet));\n    buffer.append(\", gateways = \").append(toString(gatewayDetailsSet));\n    buffer.append(\", regions = \").append(toString(regionDetailsSet));\n    buffer.append(\"}\");\n    return buffer.toString();\n  }\n  protected String toString(final Collection<?> collection) {\n    final StringBuilder buffer = new StringBuilder(\"[\");\n    int count = 0;\n    for (final Object element : collection) {\n      buffer.append(count++ > 0 ? \", \" : \"\");\n      buffer.append(element);\n    }\n    buffer.append(\"]\");\n    return buffer.toString();\n  }\n  public static class AsyncEventQueueDetails\n      implements Comparable<AsyncEventQueueDetails>, Serializable {\n    private final String id;\n    public AsyncEventQueueDetails(final String id) {\n      assertNotNull(id, \"The id of the Asynchronous Event Queue cannot be null!\");\n      this.id = id;\n    }\n    public String getId() {\n      return id;\n    }\n    @Override\n    public int compareTo(final AsyncEventQueueDetails asyncEventQueueDetails) {\n      return getId().compareTo(asyncEventQueueDetails.getId());\n    }\n    @Override\n    public boolean equals(final Object obj) {\n      if (obj == this) {\n        return true;\n      }\n      if (!(obj instanceof AsyncEventQueueDetails)) {\n        return false;\n      }\n      final AsyncEventQueueDetails that = (AsyncEventQueueDetails) obj;\n      return ObjectUtils.equals(getId(), that.getId());\n    }\n    @Override\n    public int hashCode() {\n      int hashValue = 17;\n      hashValue = 37 * hashValue + ObjectUtils.hashCode(getId());\n      return hashValue;\n    }\n    @Override\n    public String toString() {\n      final StringBuilder buffer = new StringBuilder(getClass().getSimpleName());\n      buffer.append(\" {id =\").append(getId());\n      buffer.append(\"}\");\n      return buffer.toString();\n    }\n  }\n  public static class CacheServerDetails implements Comparable<CacheServerDetails>, Serializable {\n    private final int port;\n    private final String bindAddress;\n    private String hostName;\n    public CacheServerDetails(final String bindAddress, final int port) {\n      this.bindAddress = StringUtils.defaultIfBlank(bindAddress, \"*\");\n      this.port = port;\n    }\n    public String getBindAddress() {\n      return bindAddress;\n    }\n    public String getHostName() {\n      return hostName;\n    }\n    public void setHostName(final String hostName) {\n      this.hostName = hostName;\n    }\n    public int getPort() {\n      return port;\n    }\n    @Override\n    public int compareTo(final CacheServerDetails cacheServerDetails) {\n      final int valueOfBindAddressComparison =\n          getBindAddress().compareTo(cacheServerDetails.getBindAddress());\n      return (valueOfBindAddressComparison != 0 ? valueOfBindAddressComparison\n          : (getPort() - cacheServerDetails.getPort()));\n    }\n    @Override\n    public boolean equals(final Object obj) {\n      if (obj == this) {\n        return true;\n      }\n      if (!(obj instanceof CacheServerDetails)) {\n        return false;\n      }\n      final CacheServerDetails that = (CacheServerDetails) obj;\n      return ObjectUtils.equals(getBindAddress(), that.getBindAddress())\n          && ObjectUtils.equals(getPort(), that.getPort());\n    }\n    @Override\n    public int hashCode() {\n      int hashValue = 17;\n      hashValue = 37 * hashValue + ObjectUtils.hashCode(getBindAddress());\n      hashValue = 37 * hashValue + ObjectUtils.hashCode(getPort());\n      return hashValue;\n    }\n    @Override\n    public String toString() {\n      final StringBuilder buffer = new StringBuilder(getClass().getSimpleName());\n      buffer.append(\" {bindAddress = \").append(getBindAddress());\n      buffer.append(\", hostName = \").append(getHostName());\n      buffer.append(\", port = \").append(getPort());\n      buffer.append(\"}\");\n      return buffer.toString();\n    }\n  }\n  public static class DiskDirDetails implements Comparable<DiskDirDetails>, Serializable {\n    private final String absolutePath;\n    private final int size;\n    public DiskDirDetails(final String absolutePath) {\n      this(absolutePath, 0);\n    }\n    public DiskDirDetails(final String absolutePath, final int size) {\n      DiskStoreDetails.assertNotNull(absolutePath,\n          \"The directory location of the disk store cannot be null!\");\n      this.absolutePath = absolutePath;\n      this.size = size;\n    }\n    public String getAbsolutePath() {\n      return absolutePath;\n    }\n    public int getSize() {\n      return size;\n    }\n    @Override\n    public int compareTo(final DiskDirDetails diskDirDetails) {\n      return getAbsolutePath().compareTo(diskDirDetails.getAbsolutePath());\n    }\n    @Override\n    public boolean equals(final Object obj) {\n      if (obj == this) {\n        return true;\n      }\n      if (!(obj instanceof DiskDirDetails)) {\n        return false;\n      }\n      final DiskDirDetails that = (DiskDirDetails) obj;\n      return ObjectUtils.equals(getAbsolutePath(), that.getAbsolutePath());\n    }\n    @Override\n    public int hashCode() {\n      int hashValue = 17;\n      hashValue = 37 * hashValue + ObjectUtils.hashCode(getAbsolutePath());\n      return hashValue;\n    }\n    @Override\n    public String toString() {\n      final StringBuilder buffer = new StringBuilder(getClass().getSimpleName());\n      buffer.append(\" {absolutePath = \").append(getAbsolutePath());\n      buffer.append(\", size = \").append(getSize());\n      buffer.append(\"}\");\n      return buffer.toString();\n    }\n  }\n  public static class GatewayDetails implements Comparable<GatewayDetails>, Serializable {\n    private boolean persistent;\n    private final String id;\n    public GatewayDetails(final String id) {\n      assertNotNull(id, \"The ID of the Gateway cannot be null!\");\n      this.id = id;\n    }\n    public String getId() {\n      return id;\n    }\n    public boolean isOverflowToDisk() {\n      return true;\n    }\n    public boolean isPersistent() {\n      return persistent;\n    }\n    public void setPersistent(final boolean persistent) {\n      this.persistent = persistent;\n    }\n    @Override\n    public int compareTo(final GatewayDetails gatewayDetails) {\n      return getId().compareTo(gatewayDetails.getId());\n    }\n    @Override\n    public boolean equals(final Object obj) {\n      if (obj == this) {\n        return true;\n      }\n      if (!(obj instanceof GatewayDetails)) {\n        return false;\n      }\n      final GatewayDetails that = (GatewayDetails) obj;\n      return ObjectUtils.equals(getId(), that.getId());\n    }\n    @Override\n    public int hashCode() {\n      int hashValue = 17;\n      hashValue = 37 * hashValue + ObjectUtils.hashCode(getId());\n      return hashValue;\n    }\n    @Override\n    public String toString() {\n      final StringBuilder buffer = new StringBuilder(getClass().getSimpleName());\n      buffer.append(\" {id = \").append(getId());\n      buffer.append(\", overflowToDisk = \").append(isOverflowToDisk());\n      buffer.append(\", persistent = \").append(isPersistent());\n      buffer.append(\"}\");\n      return buffer.toString();\n    }\n  }\n  public static class RegionDetails implements Comparable<RegionDetails>, Serializable {\n    private boolean overflowToDisk;\n    private boolean persistent;\n    private final String fullPath;\n    private final String name;\n    public RegionDetails(final String fullPath, final String name) {\n      assertNotNull(fullPath, \"The full path of the Region in the Cache cannot be null!\");\n      assertNotNull(name, \"The name of the Region @ (%1$s) cannot be null!\", fullPath);\n      this.name = name;\n      this.fullPath = fullPath;\n    }\n    public String getFullPath() {\n      return fullPath;\n    }\n    public String getName() {\n      return name;\n    }\n    public boolean isOverflowToDisk() {\n      return overflowToDisk;\n    }\n    public void setOverflowToDisk(final boolean overflowToDisk) {\n      this.overflowToDisk = overflowToDisk;\n    }\n<fim_suffix>    public boolean isPersistent() {\n      return persistent;\n    }<fim_middle>// function below has no smell\n"}