{"text": "<fim_prefix>     */\n    public CSSPrimitiveValue getGreen() {\n        valueProvider.getValue().getGreen();\n        if (greenComponent == null) {\n            greenComponent = new GreenComponent();\n        }\n        return greenComponent;\n    }\n    /**\n     * <b>DOM</b>: Implements {@link org.w3c.dom.css.RGBColor#getBlue()}.\n     */\n    public CSSPrimitiveValue getBlue() {\n        valueProvider.getValue().getBlue();\n        if (blueComponent == null) {\n            blueComponent = new BlueComponent();\n        }\n        return blueComponent;\n    }\n    // SVGICCColor //////////////////////////////////////////////////\n    /**\n     * <b>DOM</b>: Implements {@link org.w3c.dom.svg.SVGICCColor#getColorProfile()}.\n     */\n    public String getColorProfile() {\n        if (getColorType() != SVG_COLORTYPE_RGBCOLOR_ICCCOLOR) {\n            throw new DOMException(DOMException.SYNTAX_ERR, \"\");\n        }\n        Value value = valueProvider.getValue();\n        return ((ICCColor)value.item(1)).getColorProfile();\n    }\n    /**\n     * <b>DOM</b>: Implements {@link SVGICCColor#setColorProfile(String)}.\n     */\n    public void setColorProfile(String colorProfile) throws DOMException {\n        if (handler == null) {\n            throw new DOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR, \"\");\n        } else {\n            handler.colorProfileChanged(colorProfile);\n        }\n    }\n    /**\n     * <b>DOM</b>: Implements {@link SVGICCColor#getColors()}.\n     */\n    public SVGNumberList getColors() {\n        return this;\n    }\n    // SVGNumberList ///////////////////////////////////////////////\n    /**\n     * <b>DOM</b>: Implements {@link SVGNumberList#getNumberOfItems()}.\n     */\n    public int getNumberOfItems() {\n        if (getColorType() != SVG_COLORTYPE_RGBCOLOR_ICCCOLOR) {\n            throw new DOMException(DOMException.SYNTAX_ERR, \"\");\n        }\n        Value value = valueProvider.getValue();\n        return ((ICCColor)value.item(1)).getNumberOfColors();\n    }\n    /**\n     * <b>DOM</b>: Implements {@link SVGNumberList#clear()}.\n     */\n    public void clear() throws DOMException {\n        if (handler == null) {\n            throw new DOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR, \"\");\n        } else {\n            iccColors = null;\n            handler.colorsCleared();\n        }\n    }\n    /**\n     * <b>DOM</b>: Implements {@link SVGNumberList#initialize(SVGNumber)}.\n     */\n    public SVGNumber initialize(SVGNumber newItem) throws DOMException {\n        if (handler == null) {\n            throw new DOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR, \"\");\n        } else {\n            float f = newItem.getValue();\n            iccColors = new ArrayList();\n            SVGNumber result = new ColorNumber(f);\n            iccColors.add(result);\n            handler.colorsInitialized(f);\n            return result;\n        }\n    }\n    /**\n     * <b>DOM</b>: Implements {@link SVGNumberList#getItem(int)}.\n     */\n    public SVGNumber getItem(int index) throws DOMException {\n        if (getColorType() != SVG_COLORTYPE_RGBCOLOR_ICCCOLOR) {\n            throw new DOMException(DOMException.INDEX_SIZE_ERR, \"\");\n        }\n        int n = getNumberOfItems();\n        if (index < 0 || index >= n) {\n            throw new DOMException(DOMException.INDEX_SIZE_ERR, \"\");\n        }\n        if (iccColors == null) {\n            iccColors = new ArrayList(n);\n            for (int i = iccColors.size(); i < n; i++) {\n                iccColors.add(null);\n            }\n        }\n        Value value = valueProvider.getValue().item(1);\n        float f = ((ICCColor)value).getColor(index);\n        SVGNumber result = new ColorNumber(f);\n        iccColors.set(index, result);\n        return result;\n    }\n    /**\n     * <b>DOM</b>: Implements {@link\n     * SVGNumberList#insertItemBefore(SVGNumber,int)}.\n     */\n    public SVGNumber insertItemBefore(SVGNumber newItem, int index)\n        throws DOMException {\n        if (handler == null) {\n            throw new DOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR, \"\");\n        } else {\n            int n = getNumberOfItems();\n            if (index < 0 || index > n) {\n                throw new DOMException(DOMException.INDEX_SIZE_ERR, \"\");\n            }\n            if (iccColors == null) {\n                iccColors = new ArrayList(n);\n                for (int i = iccColors.size(); i < n; i++) {\n                    iccColors.add(null);\n                }\n            }\n            float f = newItem.getValue();\n            SVGNumber result = new ColorNumber(f);\n            iccColors.add(index, result);\n            handler.colorInsertedBefore(f, index);\n            return result;\n        }\n    }\n    /**\n     * <b>DOM</b>: Implements {@link\n     * SVGNumberList#replaceItem(SVGNumber,int)}.\n     */\n    public SVGNumber replaceItem(SVGNumber newItem, int index)\n        throws DOMException {\n        if (handler == null) {\n            throw new DOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR, \"\");\n        } else {\n            int n = getNumberOfItems();\n            if (index < 0 || index >= n) {\n                throw new DOMException(DOMException.INDEX_SIZE_ERR, \"\");\n            }\n            if (iccColors == null) {\n                iccColors = new ArrayList(n);\n                for (int i = iccColors.size(); i < n; i++) {\n                    iccColors.add(null);\n                }\n            }\n            float f = newItem.getValue();\n            SVGNumber result = new ColorNumber(f);\n            iccColors.set(index, result);\n            handler.colorReplaced(f, index);\n            return result;\n        }\n    }\n    /**\n     * <b>DOM</b>: Implements {@link SVGNumberList#removeItem(int)}.\n     */\n    public SVGNumber removeItem(int index) throws DOMException {\n        if (handler == null) {\n            throw new DOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR, \"\");\n        } else {\n            int n = getNumberOfItems();\n            if (index < 0 || index >= n) {\n                throw new DOMException(DOMException.INDEX_SIZE_ERR, \"\");\n            }\n            SVGNumber result = null;\n            if (iccColors != null) {\n                result = (ColorNumber)iccColors.get(index);\n            }\n            if (result == null) {\n                Value value = valueProvider.getValue().item(1);\n                result =\n                    new ColorNumber(((ICCColor)value).getColor(index));\n            }\n            handler.colorRemoved(index);\n            return result;\n        }\n    }\n    /**\n     * <b>DOM</b>: Implements {@link SVGNumberList#appendItem(SVGNumber)}.\n     */\n    public SVGNumber appendItem (SVGNumber newItem) throws DOMException {\n        if (handler == null) {\n            throw new DOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR, \"\");\n        } else {\n            if (iccColors == null) {\n                int n = getNumberOfItems();\n                iccColors = new ArrayList(n);\n                for (int i = 0; i < n; i++) {\n                    iccColors.add(null);\n                }\n            }\n            float f = newItem.getValue();\n            SVGNumber result = new ColorNumber(f);\n            iccColors.add(result);\n            handler.colorAppend(f);\n            return result;\n        }\n    }\n    /**\n     * To represent a SVGNumber which is part of a color list.\n     */\n<fim_suffix>    protected class ColorNumber implements SVGNumber {\n        /**\n         * The value of this number, when detached.\n         */\n        protected float value;\n        /**\n         * Creates a new ColorNumber.\n         */\n        public ColorNumber(float f) {\n            value = f;\n        }\n        /**\n         * Implements {@link SVGNumber#getValue()}.\n         */\n        public float getValue() {\n            if (iccColors == null) {\n                return value;\n            }\n            int idx = iccColors.indexOf(this);\n            if (idx == -1) {\n                return value;\n            }\n            Value value = valueProvider.getValue().item(1);\n            return ((ICCColor)value).getColor(idx);\n        }\n        /**\n         * Implements {@link SVGNumber#setValue(float)}.\n         */\n        public void setValue(float f) {\n            value = f;\n            if (iccColors == null) {\n                return;\n            }\n            int idx = iccColors.indexOf(this);\n            if (idx == -1) {\n                return;\n            }\n            if (handler == null) {\n                throw new DOMException\n                    (DOMException.NO_MODIFICATION_ALLOWED_ERR, \"\");\n            } else {\n                handler.colorReplaced(f, idx);\n            }\n        }\n    }<fim_middle>// class below has no smell\n"}