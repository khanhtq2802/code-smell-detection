{"text": "<fim_prefix> * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport org.apache.commons.jcs.engine.behavior.ICache;\nimport org.apache.commons.jcs.engine.control.CompositeCacheManager;\nimport org.apache.commons.jcs.utils.servlet.BasicHttpAuthenticator;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport javax.servlet.ServletConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.SingleThreadModel;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.StringTokenizer;\n<fim_suffix>public abstract class AbstractDeleteCacheServlet\n     extends HttpServlet implements SingleThreadModel\n{\n    private static final Log log =\n        LogFactory.getLog( AbstractDeleteCacheServlet.class );\n    /** Description of the Field */\n    protected CompositeCacheManager cacheMgr;\n    private BasicHttpAuthenticator authenticator;\n    /** Description of the Method */\n    public void init( ServletConfig config )\n        throws ServletException\n    {\n        // subsclass must initialize the cacheMgr before here.\n        authenticator = new BasicHttpAuthenticator( \"jcs\" );\n        super.init( config );\n    }\n    /** Description of the Method */\n    public void service( HttpServletRequest req, HttpServletResponse res )\n        throws ServletException,\n        IOException\n    {\n        if ( !authenticator.authenticate( req, res ) )\n        {\n            return;\n        }\n        Hashtable params = new Hashtable();\n        res.setContentType( \"text/html\" );\n        PrintWriter out = res.getWriter();\n        try\n        {\n            String paramName;\n            String paramValue;\n            // GET PARAMETERS INTO HASHTABLE\n            for ( Enumeration e = req.getParameterNames(); e.hasMoreElements();  )\n            {\n                paramName = ( String ) e.nextElement();\n                paramValue = req.getParameter( paramName );\n                params.put( paramName, paramValue );\n                if ( log.isDebugEnabled() )\n                {\n                    log.debug( paramName + \"=\" + paramValue );\n                }\n            }\n            String hashtableName = req.getParameter( \"hashtableName\" );\n            String key = req.getParameter( \"key\" );\n            if ( hashtableName == null )\n            {\n                hashtableName = req.getParameter( \"cacheName\" );\n            }\n            out.println( \"<html><body bgcolor=#FFFFFF>\" );\n            if ( hashtableName != null )\n            {\n                if ( log.isDebugEnabled() )\n                {\n                    log.debug( \"hashtableName = \" + hashtableName );\n                }\n                out.println( \"(Last hashtableName = \" + hashtableName + \")\" );\n                if ( hashtableName.equals( \"ALL\" ) )\n                {\n                    // Clear all caches.\n                    String[] list = cacheMgr.getCacheNames();\n                    Arrays.sort( list );\n                    for ( int i = 0; i < list.length; i++ )\n                    {\n                        String name = list[i];\n                        ICache cache = cacheMgr.getCache( name );\n                        cache.removeAll();\n                    }\n                    out.println( \"All caches have been cleared!\" );\n                }\n                else\n                {\n                    ICache cache = cacheMgr.getCache( hashtableName );\n                    String task = ( String ) params.get( \"task\" );\n                    if ( task == null )\n                    {\n                        task = \"delete\";\n                    }\n                    if ( task.equalsIgnoreCase( \"stats\" ) )\n                    {\n//                        out.println( \"<br><br>\" );\n//                        out.println( \"<b>Stats for \" + hashtableName + \":</b><br>\" );\n//                        out.println( cache.getStats() );\n//                        out.println( \"<br>\" );\n                    }\n                    else\n                    {\n                        // Remove the specified cache.\n                        if ( key != null )\n                        {\n                            if ( key.toUpperCase().equals( \"ALL\" ) )\n                            {\n                                cache.removeAll();\n                                if ( log.isDebugEnabled() )\n                                {\n                                    log.debug( \"Removed all elements from \" + hashtableName );\n                                }\n                                out.println( \"key = \" + key );\n                            }\n                            else\n                            {\n                                if ( log.isDebugEnabled() )\n                                {\n                                    log.debug( \"key = \" + key );\n                                }\n                                out.println( \"key = \" + key );\n                                StringTokenizer toke = new StringTokenizer( key, \"_\" );\n                                while ( toke.hasMoreElements() )\n                                {\n                                    String temp = ( String ) toke.nextElement();\n                                    cache.remove( key );\n                                    if ( log.isDebugEnabled() )\n                                    {\n                                        log.debug( \"Removed \" + temp + \" from \" + hashtableName );\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            out.println( \"key is null\" );\n                        }\n                    }\n                    // end is task == delete\n                }\n            }\n            else\n            {\n                out.println( \"(No hashTableName specified.)\" );\n            }\n            // PRINT OUT MENU\n            out.println( \"<br>\" );\n            int antiCacheRandom = ( int ) ( 10000.0 * Math.random() );\n            out.println( \"<a href=?antiCacheRandom=\" + antiCacheRandom\n                 + \">List all caches</a><br>\" );\n            out.println( \"<br>\" );\n            out.println( \"<a href=?hashtableName=ALL&key=ALL&antiCacheRandom=\"\n                 + antiCacheRandom\n                 + \"><font color=RED>Clear All Cache Regions</font></a><br>\" );\n            out.println( \"<br>\" );\n            String[] list = cacheMgr.getCacheNames();\n            Arrays.sort( list );\n            out.println( \"<div align=CENTER>\" );\n            out.println( \"<table border=1 width=80%>\" );\n            out.println( \"<tr bgcolor=#eeeeee><td>Cache Region Name</td><td>Size</td><td>Status</td><td>Stats</td>\" );\n            for ( int i = 0; i < list.length; i++ )\n            {\n                String name = list[i];\n                out.println( \"<tr><td><a href=?hashtableName=\" + name + \"&key=ALL&antiCacheRandom=\"\n                     + antiCacheRandom + \">\" + name + \"</a></td>\" );\n                ICache cache = cacheMgr.getCache( name );\n                out.println( \"<td>\" );\n                out.print( cache.getSize() );\n                out.print( \"</td><td>\" );\n                int status = cache.getStatus();\n                out.print( status == CacheStatus.ALIVE ? \"ALIVE\"\n                     : status == CacheStatus.DISPOSED ? \"DISPOSED\"\n                     : status == CacheStatus.ERROR ? \"ERROR\"\n                     : \"UNKNOWN\" );\n                out.print( \"</td>\" );\n                out.println( \"<td><a href=?task=stats&hashtableName=\" + name + \"&key=NONE&antiCacheRandom=\"\n                     + antiCacheRandom + \">stats</a></td>\" );\n            }\n            out.println( \"</table>\" );\n            out.println( \"</div>\" );\n        }\n        //CATCH EXCEPTIONS\n        catch ( Exception e )\n        {\n            log.error( e );\n            //log.logIt( \"hashtableName = \" + hashtableName );\n            //log.logIt( \"key = \" + key );\n        }\n        // end try{\n        finally\n        {\n            String isRedirect = ( String ) params.get( \"isRedirect\" );\n            if ( isRedirect == null )\n            {\n                isRedirect = \"N\";\n            }\n            if ( log.isDebugEnabled() )\n            {\n                log.debug( \"isRedirect = \" + isRedirect );\n            }\n            String url;\n            if ( isRedirect.equals( \"Y\" ) )\n            {\n                url = ( String ) params.get( \"url\" );\n                if ( log.isDebugEnabled() )\n                {\n                    log.debug( \"url = \" + url );\n                }\n                res.sendRedirect( url );\n                // will not work if there's a previously sent header\n                out.println( \"<br>\\n\" );\n                out.println( \" <script>\" );\n                out.println( \" location.href='\" + url + \"'; \" );\n                out.println( \" </script> \" );\n                out.flush();\n            }\n            else\n            {\n                url = \"\";\n            }\n            out.println( \"</body></html>\" );\n        }\n    }\n    //end service()\n}<fim_middle>// class below has no smell\n"}