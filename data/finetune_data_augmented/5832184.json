{"text": "<fim_prefix>            throws Exception {\n        pooledObject.getObject().getInnermostDelegate().close();\n    }\n    private String getCatalogOrNull() {\n        String catalog = null;\n        try {\n            catalog = getCatalog();\n        } catch (final SQLException e) {\n            // Ignored\n        }\n        return catalog;\n    }\n    private String getSchemaOrNull() {\n        String catalog = null;\n        try {\n            catalog = getSchema();\n        } catch (final SQLException e) {\n            // Ignored\n        }\n        return catalog;\n    }\n    /**\n     * {@link KeyedPooledObjectFactory} method for creating {@link PoolablePreparedStatement}s or\n     * {@link PoolableCallableStatement}s. The <code>stmtType</code> field in the key determines whether a\n     * PoolablePreparedStatement or PoolableCallableStatement is created.\n     *\n     * @param key\n     *            the key for the {@link PreparedStatement} to be created\n     * @see #createKey(String, int, int, StatementType)\n     */\n    @SuppressWarnings(\"resource\")\n    @Override\n    public PooledObject<DelegatingPreparedStatement> makeObject(final PStmtKey key) throws Exception {\n        if (null == key) {\n            throw new IllegalArgumentException(\"Prepared statement key is null or invalid.\");\n        }\n        if (key.getStmtType() == StatementType.PREPARED_STATEMENT) {\n            final PreparedStatement statement = (PreparedStatement) key.createStatement(getDelegate());\n            @SuppressWarnings({\"rawtypes\", \"unchecked\" }) // Unable to find way to avoid this\n            final PoolablePreparedStatement pps = new PoolablePreparedStatement(statement, key, pstmtPool, this);\n            return new DefaultPooledObject<>(pps);\n        }\n        final CallableStatement statement = (CallableStatement) key.createStatement(getDelegate());\n        final PoolableCallableStatement pcs = new PoolableCallableStatement(statement, key, pstmtPool, this);\n        return new DefaultPooledObject<>(pcs);\n    }\n    /**\n     * Normalizes the given SQL statement, producing a canonical form that is semantically equivalent to the original.\n     *\n     * @param sql The statement to be normalized.\n     *\n     * @return The canonical form of the supplied SQL statement.\n     */\n    protected String normalizeSQL(final String sql) {\n        return sql.trim();\n    }\n    /**\n     * {@link KeyedPooledObjectFactory} method for passivating {@link PreparedStatement}s or {@link CallableStatement}s.\n     * Invokes {@link PreparedStatement#clearParameters}.\n     *\n     * @param key\n     *            ignored\n     * @param pooledObject\n     *            a wrapped {@link PreparedStatement}\n     */\n    @Override\n    public void passivateObject(final PStmtKey key, final PooledObject<DelegatingPreparedStatement> pooledObject)\n            throws Exception {\n        @SuppressWarnings(\"resource\")\n        final DelegatingPreparedStatement dps = pooledObject.getObject();\n        dps.clearParameters();\n        dps.passivate();\n    }\n    /**\n     * Creates or obtains a {@link CallableStatement} from the pool.\n     *\n     * @param sql\n     *            the SQL string used to define the CallableStatement\n     * @return a {@link PoolableCallableStatement}\n     * @throws SQLException\n     *             Wraps an underlying exception.\n     */\n    @Override\n    public CallableStatement prepareCall(final String sql) throws SQLException {\n        try {\n            return (CallableStatement) pstmtPool.borrowObject(createKey(sql, StatementType.CALLABLE_STATEMENT));\n        } catch (final NoSuchElementException e) {\n            throw new SQLException(\"MaxOpenCallableStatements limit reached\", e);\n        } catch (final RuntimeException e) {\n            throw e;\n        } catch (final Exception e) {\n            throw new SQLException(\"Borrow callableStatement from pool failed\", e);\n        }\n    }\n    /**\n     * Creates or obtains a {@link CallableStatement} from the pool.\n     *\n     * @param sql\n     *            the SQL string used to define the CallableStatement\n     * @param resultSetType\n     *            result set type\n     * @param resultSetConcurrency\n     *            result set concurrency\n     * @return a {@link PoolableCallableStatement}\n     * @throws SQLException\n     *             Wraps an underlying exception.\n     */\n    @Override\n    public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency)\n            throws SQLException {\n        try {\n            return (CallableStatement) pstmtPool.borrowObject(\n                    createKey(sql, resultSetType, resultSetConcurrency, StatementType.CALLABLE_STATEMENT));\n        } catch (final NoSuchElementException e) {\n            throw new SQLException(\"MaxOpenCallableStatements limit reached\", e);\n        } catch (final RuntimeException e) {\n            throw e;\n        } catch (final Exception e) {\n            throw new SQLException(\"Borrow callableStatement from pool failed\", e);\n        }\n    }\n    /**\n     * Creates or obtains a {@link CallableStatement} from the pool.\n     *\n     * @param sql\n     *            the SQL string used to define the CallableStatement\n     * @param resultSetType\n     *            result set type\n     * @param resultSetConcurrency\n     *            result set concurrency\n     * @param resultSetHoldability\n     *            result set holdability\n     * @return a {@link PoolableCallableStatement}\n     * @throws SQLException\n     *             Wraps an underlying exception.\n     */\n    @Override\n    public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency,\n            final int resultSetHoldability) throws SQLException {\n        try {\n            return (CallableStatement) pstmtPool.borrowObject(createKey(sql, resultSetType, resultSetConcurrency,\n                    resultSetHoldability, StatementType.CALLABLE_STATEMENT));\n        } catch (final NoSuchElementException e) {\n            throw new SQLException(\"MaxOpenCallableStatements limit reached\", e);\n        } catch (final RuntimeException e) {\n            throw e;\n        } catch (final Exception e) {\n            throw new SQLException(\"Borrow callableStatement from pool failed\", e);\n        }\n    }\n    /**\n     * Creates or obtains a {@link PreparedStatement} from the pool.\n     *\n     * @param sql\n     *            the SQL string used to define the PreparedStatement\n     * @return a {@link PoolablePreparedStatement}\n     */\n    @Override\n    public PreparedStatement prepareStatement(final String sql) throws SQLException {\n        if (null == pstmtPool) {\n            throw new SQLException(\"Statement pool is null - closed or invalid PoolingConnection.\");\n        }\n        try {\n            return pstmtPool.borrowObject(createKey(sql));\n        } catch (final NoSuchElementException e) {\n            throw new SQLException(\"MaxOpenPreparedStatements limit reached\", e);\n        } catch (final RuntimeException e) {\n            throw e;\n        } catch (final Exception e) {\n            throw new SQLException(\"Borrow prepareStatement from pool failed\", e);\n        }\n    }\n    @Override\n    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {\n        if (null == pstmtPool) {\n            throw new SQLException(\"Statement pool is null - closed or invalid PoolingConnection.\");\n        }\n        try {\n            return pstmtPool.borrowObject(createKey(sql, autoGeneratedKeys));\n        } catch (final NoSuchElementException e) {\n            throw new SQLException(\"MaxOpenPreparedStatements limit reached\", e);\n        } catch (final RuntimeException e) {\n            throw e;\n        } catch (final Exception e) {\n            throw new SQLException(\"Borrow prepareStatement from pool failed\", e);\n        }\n    }\n    /**\n     * Creates or obtains a {@link PreparedStatement} from the pool.\n     *\n     * @param sql\n     *            the SQL string used to define the PreparedStatement\n     * @param columnIndexes\n     *            column indexes\n     * @return a {@link PoolablePreparedStatement}\n     */\n    @Override\n    public PreparedStatement prepareStatement(final String sql, final int columnIndexes[]) throws SQLException {\n        if (null == pstmtPool) {\n            throw new SQLException(\"Statement pool is null - closed or invalid PoolingConnection.\");\n        }\n        try {\n            return pstmtPool.borrowObject(createKey(sql, columnIndexes));\n        } catch (final NoSuchElementException e) {\n            throw new SQLException(\"MaxOpenPreparedStatements limit reached\", e);\n        } catch (final RuntimeException e) {\n            throw e;\n        } catch (final Exception e) {\n            throw new SQLException(\"Borrow prepareStatement from pool failed\", e);\n        }\n    }\n    /**\n     * Creates or obtains a {@link PreparedStatement} from the pool.\n     *\n     * @param sql\n     *            the SQL string used to define the PreparedStatement\n     * @param resultSetType\n     *            result set type\n     * @param resultSetConcurrency\n     *            result set concurrency\n     * @return a {@link PoolablePreparedStatement}\n     */\n<fim_suffix>    @Override\n    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency)\n            throws SQLException {\n        if (null == pstmtPool) {\n            throw new SQLException(\"Statement pool is null - closed or invalid PoolingConnection.\");\n        }\n        try {\n            return pstmtPool.borrowObject(createKey(sql, resultSetType, resultSetConcurrency));\n        } catch (final NoSuchElementException e) {\n            throw new SQLException(\"MaxOpenPreparedStatements limit reached\", e);\n        } catch (final RuntimeException e) {\n            throw e;\n        } catch (final Exception e) {\n            throw new SQLException(\"Borrow prepareStatement from pool failed\", e);\n        }\n    }<fim_middle>// function below has no smell\n"}