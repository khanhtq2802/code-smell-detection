{"text": "<fim_prefix>/* \n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.felix.upnp.sample.clock;\n\nimport java.awt.BorderLayout;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.net.URL;\n\nimport javax.swing.ImageIcon;\nimport javax.swing.JFrame;\n\nimport org.osgi.framework.BundleContext;\nimport org.osgi.framework.BundleException;\n\n<fim_suffix>public class ClockFrame extends JFrame implements Runnable \n{\n\tprivate final static String TITLE = \"Felix UPnP Clock\";\n\tprivate ClockDevice clockDev;\n\tprivate ClockPane clockPane;\n\t\n\tpublic ClockFrame(final BundleContext context)\n\t{\n\t\tsuper(TITLE);\n\t\ttry {\n\t\t\tclockDev = new ClockDevice( context);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tSystem.out.println(e);\n\t\t}\n\t\t\t\t\n\t\tgetContentPane().setLayout(new BorderLayout());\n\n\t\tclockPane = new ClockPane();\t\t\n\t\tgetContentPane().add(clockPane, BorderLayout.CENTER);\n\n\t\taddWindowListener(new WindowAdapter(){\n\t\t\tpublic void windowClosing(WindowEvent e) \n\t\t\t{\n\t\t\t\ttry {\n\t\t\t\t\tcontext.getBundle().stop();\n\t\t\t\t} catch (BundleException ex) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\t\t\t\n\t       try {\n\t            URL eventIconUrl = ClockFrame.class.getResource(\"images/logo.gif\");           \n\t            ImageIcon icon=  new ImageIcon(eventIconUrl,\"logo\");\n\t            setIconImage(icon.getImage());\n\t       }\n\t        catch (Exception ex){\n\t                System.out.println(\"Resource: IMAGES/logo.gif not found : \" + ex.toString());\n\t        }\n\t\t\n\t\tpack();\n\t\tsetVisible(true);\n\t}\n\n\tpublic ClockPane getClockPanel()\n\t{\n\t\treturn clockPane;\n\t}\n\n\tpublic ClockDevice getClockDevice()\n\t{\n\t\treturn clockDev;\n\t}\n\t\t\n\t////////////////////////////////////////////////\n\t//\trun\t\n\t////////////////////////////////////////////////\n\n\tprivate Thread timerThread = null;\n\t\t\n\tpublic void run()\n\t{\n\t\tThread thisThread = Thread.currentThread();\n\n\t\twhile (timerThread == thisThread) {\n\t\t\tgetClockDevice().update();\n\t\t\tgetClockPanel().repaint();\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t\tcatch(InterruptedException e) {}\n\t\t}\n\t}\n\t\n\tpublic void start()\n\t{\n\t\tclockDev.start();\n\t\t\n\t\ttimerThread = new Thread(this,\"upnp.sample.clock.ClockFrame\");\n\t\ttimerThread.start();\n\t}\n\t\n\tpublic void stop()\n\t{\n\t\tclockDev.stop();\n\t\ttimerThread = null;\n\t\tdispose();\n\t}\n\n}\n<fim_middle>// class below has no smell\n"}