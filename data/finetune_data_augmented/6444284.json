{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2013 IBM Corporation and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n * \n * Contributors:\n *     IBM Corporation - initial API and implementation\n *******************************************************************************/\n\npackage org.eclipse.orion.server.logs.servlets;\n\nimport java.io.File;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.eclipse.core.runtime.IPath;\nimport org.eclipse.core.runtime.IStatus;\nimport org.eclipse.orion.internal.server.servlets.ServletResourceHandler;\nimport org.eclipse.orion.internal.server.servlets.task.TaskJobHandler;\nimport org.eclipse.orion.server.core.LogHelper;\nimport org.eclipse.orion.server.core.ServerStatus;\nimport org.eclipse.orion.server.logs.ILogService;\nimport org.eclipse.orion.server.logs.LogUtils;\nimport org.eclipse.orion.server.logs.jobs.FileAppenderJob;\nimport org.eclipse.orion.server.logs.jobs.ListFileAppendersJob;\nimport org.eclipse.osgi.util.NLS;\n\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport ch.qos.logback.core.FileAppender;\n\npublic class FileAppenderHandler extends AbstractLogHandler {\n\tpublic FileAppenderHandler(ServletResourceHandler<IStatus> statusHandler) {\n\t\tsuper(statusHandler);\n\t}\n\n\t/*\n\t * Handles the download request for a single file appender log file.\n\t */\n<fim_suffix>\tprotected boolean downloadLog(HttpServletRequest request,\n\t\t\tHttpServletResponse response, ILogService logService,\n\t\t\tString appenderName) throws ServletException {\n\n\t\tFileAppender<ILoggingEvent> appender = logService\n\t\t\t\t.getFileAppender(appenderName);\n\t\tif (appender == null) {\n\t\t\tString msg = NLS.bind(\"Appender not found: {0}\", appenderName);\n\t\t\tfinal ServerStatus error = new ServerStatus(IStatus.ERROR,\n\t\t\t\t\tHttpServletResponse.SC_NOT_FOUND, msg, null);\n\t\t\treturn statusHandler.handleRequest(request, response, error);\n\t\t}\n\n\t\tFile logFile = new File(appender.getFile());\n\t\ttry {\n\t\t\tLogUtils.provideLogFile(logFile, response);\n\t\t} catch (Exception ex) {\n\t\t\tString msg = NLS.bind(\"An error occured when looking for log {0}.\",\n\t\t\t\t\tlogFile.getName());\n\t\t\tfinal ServerStatus error = new ServerStatus(IStatus.ERROR,\n\t\t\t\t\tHttpServletResponse.SC_INTERNAL_SERVER_ERROR, msg, ex);\n\n\t\t\tLogHelper.log(error);\n\t\t\treturn statusHandler.handleRequest(request, response, error);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t@Override\n\tprotected boolean handleGet(HttpServletRequest request,\n\t\t\tHttpServletResponse response, ILogService logService)\n\t\t\tthrows ServletException {\n\n\t\ttry {\n\t\t\treturn TaskJobHandler.handleTaskJob(request, response,\n\t\t\t\t\tnew ListFileAppendersJob(TaskJobHandler.getUserId(request),\n\t\t\t\t\t\t\tlogService, getURI(request)), statusHandler);\n\t\t} catch (Exception e) {\n\t\t\tfinal ServerStatus error = new ServerStatus(IStatus.ERROR,\n\t\t\t\t\tHttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n\t\t\t\t\t\"An error occured when looking for file appenders.\", e);\n\n\t\t\tLogHelper.log(error);\n\t\t\treturn statusHandler.handleRequest(request, response, error);\n\t\t}\n\t}\n\n\t@Override\n\tprotected boolean handleGet(HttpServletRequest request,\n\t\t\tHttpServletResponse response, ILogService logService, IPath path)\n\t\t\tthrows ServletException {\n\n\t\tString appenderName = path.segment(0);\n\t\tString parts = request.getParameter(\"parts\"); //$NON-NLS-1$\n\t\tboolean metadata = parts != null && \"meta\".equals(parts); //$NON-NLS-1$\n\n\t\tif (!metadata)\n\t\t\treturn downloadLog(request, response, logService, appenderName);\n\n\t\ttry {\n\t\t\treturn TaskJobHandler.handleTaskJob(request, response,\n\t\t\t\t\tnew FileAppenderJob(TaskJobHandler.getUserId(request),\n\t\t\t\t\t\t\tlogService, getURI(request), appenderName),\n\t\t\t\t\tstatusHandler);\n\t\t} catch (Exception e) {\n\t\t\tfinal ServerStatus error = new ServerStatus(IStatus.ERROR,\n\t\t\t\t\tHttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n\t\t\t\t\t\"An error occured when looking for appenders.\", e);\n\n\t\t\tLogHelper.log(error);\n\t\t\treturn statusHandler.handleRequest(request, response, error);\n\t\t}\n\t}\n}<fim_middle>// function below is long method\n"}