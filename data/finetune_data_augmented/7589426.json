{"text": "<fim_prefix>/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.beans;\n\nimport java.beans.PropertyChangeEvent;\n\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\n\n/**\n * Exception thrown on a type mismatch when trying to set a bean property.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n */\n@SuppressWarnings(\"serial\")\npublic class TypeMismatchException extends PropertyAccessException {\n\n\t/**\n\t * Error code that a type mismatch error will be registered with.\n\t */\n\tpublic static final String ERROR_CODE = \"typeMismatch\";\n\n\n\t@Nullable\n\tprivate String propertyName;\n\n\t@Nullable\n\tprivate transient Object value;\n\n\t@Nullable\n\tprivate Class<?> requiredType;\n\n\n\t/**\n\t * Create a new {@code TypeMismatchException}.\n\t * @param propertyChangeEvent the PropertyChangeEvent that resulted in the problem\n\t * @param requiredType the required target type\n\t */\n\tpublic TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType) {\n\t\tthis(propertyChangeEvent, requiredType, null);\n\t}\n\n\t/**\n\t * Create a new {@code TypeMismatchException}.\n\t * @param propertyChangeEvent the PropertyChangeEvent that resulted in the problem\n\t * @param requiredType the required target type (or {@code null} if not known)\n\t * @param cause the root cause (may be {@code null})\n\t */\n\tpublic TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType,\n\t\t\t@Nullable Throwable cause) {\n\n\t\tsuper(propertyChangeEvent,\n\t\t\t\t\"Failed to convert property value of type '\" +\n\t\t\t\tClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + \"'\" +\n\t\t\t\t(requiredType != null ?\n\t\t\t\t\" to required type '\" + ClassUtils.getQualifiedName(requiredType) + \"'\" : \"\") +\n\t\t\t\t(propertyChangeEvent.getPropertyName() != null ?\n\t\t\t\t\" for property '\" + propertyChangeEvent.getPropertyName() + \"'\" : \"\"),\n\t\t\t\tcause);\n\t\tthis.propertyName = propertyChangeEvent.getPropertyName();\n\t\tthis.value = propertyChangeEvent.getNewValue();\n\t\tthis.requiredType = requiredType;\n\t}\n\n\t/**\n\t * Create a new {@code TypeMismatchException} without a {@code PropertyChangeEvent}.\n\t * @param value the offending value that couldn't be converted (may be {@code null})\n\t * @param requiredType the required target type (or {@code null} if not known)\n\t * @see #initPropertyName\n\t */\n\tpublic TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType) {\n\t\tthis(value, requiredType, null);\n\t}\n\n\t/**\n\t * Create a new {@code TypeMismatchException} without a {@code PropertyChangeEvent}.\n\t * @param value the offending value that couldn't be converted (may be {@code null})\n\t * @param requiredType the required target type (or {@code null} if not known)\n\t * @param cause the root cause (may be {@code null})\n\t * @see #initPropertyName\n\t */\n<fim_suffix>\tpublic TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause) {\n\t\tsuper(\"Failed to convert value of type '\" + ClassUtils.getDescriptiveType(value) + \"'\" +\n\t\t\t\t(requiredType != null ? \" to required type '\" + ClassUtils.getQualifiedName(requiredType) + \"'\" : \"\"),\n\t\t\t\tcause);\n\t\tthis.value = value;\n\t\tthis.requiredType = requiredType;\n\t}\n\n\n\t/**\n\t * Initialize this exception's property name for exposure through {@link #getPropertyName()},\n\t * as an alternative to having it initialized via a {@link PropertyChangeEvent}.\n\t * @param propertyName the property name to expose\n\t * @since 5.0.4\n\t * @see #TypeMismatchException(Object, Class)\n\t * @see #TypeMismatchException(Object, Class, Throwable)\n\t */\n\tpublic void initPropertyName(String propertyName) {\n\t\tAssert.state(this.propertyName == null, \"Property name already initialized\");\n\t\tthis.propertyName = propertyName;\n\t}\n\n\t/**\n\t * Return the name of the affected property, if available.\n\t */\n\t@Override\n\t@Nullable\n\tpublic String getPropertyName() {\n\t\treturn this.propertyName;\n\t}\n\n\t/**\n\t * Return the offending value (may be {@code null}).\n\t */\n\t@Override\n\t@Nullable\n\tpublic Object getValue() {\n\t\treturn this.value;\n\t}\n\n\t/**\n\t * Return the required target type, if any.\n\t */\n\t@Nullable\n\tpublic Class<?> getRequiredType() {\n\t\treturn this.requiredType;\n\t}\n\n\t@Override\n\tpublic String getErrorCode() {\n\t\treturn ERROR_CODE;\n\t}\n\n}<fim_middle>// function below has no smell\n"}