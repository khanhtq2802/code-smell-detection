{"text": "<fim_prefix>//\n//  ========================================================================\n//  Copyright (c) 1995-2019 Mort Bay Consulting Pty. Ltd.\n//  ------------------------------------------------------------------------\n//  All rights reserved. This program and the accompanying materials\n//  are made available under the terms of the Eclipse Public License v1.0\n//  and Apache License v2.0 which accompanies this distribution.\n//\n//      The Eclipse Public License is available at\n//      http://www.eclipse.org/legal/epl-v10.html\n//\n//      The Apache License v2.0 is available at\n//      http://www.opensource.org/licenses/apache2.0.php\n//\n//  You may elect to redistribute this code under either of these licenses.\n//  ========================================================================\n//\n\npackage org.eclipse.jetty.alpn.openjdk8.server;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLException;\n\nimport org.eclipse.jetty.alpn.ALPN;\nimport org.eclipse.jetty.alpn.server.ALPNServerConnection;\nimport org.eclipse.jetty.io.Connection;\nimport org.eclipse.jetty.io.ssl.ALPNProcessor;\nimport org.eclipse.jetty.util.JavaVersion;\nimport org.eclipse.jetty.util.log.Log;\nimport org.eclipse.jetty.util.log.Logger;\n\n<fim_suffix>public class OpenJDK8ServerALPNProcessor implements ALPNProcessor.Server\n{\n    private static final Logger LOG = Log.getLogger(OpenJDK8ServerALPNProcessor.class);\n    \n    @Override\n    public void init()\n    {\n        if (JavaVersion.VERSION.getPlatform()!=8)\n            throw new IllegalStateException(this + \" not applicable for java \"+JavaVersion.VERSION);\n        if (ALPN.class.getClassLoader()!=null)\n            throw new IllegalStateException(ALPN.class.getName() + \" must be on JVM boot classpath\");\n        if (LOG.isDebugEnabled())\n            ALPN.debug = true;\n    }\n\n    @Override\n    public boolean appliesTo(SSLEngine sslEngine)\n    {\n        return sslEngine.getClass().getName().startsWith(\"sun.security.ssl.\");\n    }\n\n    @Override\n    public void configure(SSLEngine sslEngine, Connection connection)\n    {\n        connection.addListener(new ALPNListener((ALPNServerConnection)connection));\n    }\n\n    private final class ALPNListener implements ALPN.ServerProvider, Connection.Listener\n    {\n        private final ALPNServerConnection alpnConnection;\n\n        private ALPNListener(ALPNServerConnection connection)\n        {\n            alpnConnection = connection;\n        }\n\n        @Override\n        public void onOpened(Connection connection)\n        {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"onOpened {}\", alpnConnection);\n            ALPN.put(alpnConnection.getSSLEngine(), this);\n        }\n\n        @Override\n        public void onClosed(Connection connection)\n        {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"onClosed {}\", alpnConnection);\n            ALPN.remove(alpnConnection.getSSLEngine());\n        }\n        \n        @Override\n        public void unsupported()\n        {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"unsupported {}\", alpnConnection);\n            alpnConnection.select(Collections.emptyList());\n        }\n\n        @Override\n        public String select(List<String> protocols) throws SSLException\n        {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"select {} {}\", alpnConnection, protocols);\n            alpnConnection.select(protocols);\n            return alpnConnection.getProtocol();\n        }\n    }\n}<fim_middle>// class below has no smell\n"}