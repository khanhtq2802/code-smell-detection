{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jclouds.glesys.domain;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport java.beans.ConstructorProperties;\n\nimport com.google.common.base.MoreObjects;\nimport com.google.common.base.Objects;\nimport com.google.common.base.MoreObjects.ToStringHelper;\n\n/**\n * Detailed information on an Email Account\n *\n * @see <a href=\"https://customer.glesys.com/api.php?a=doc#email_list\" />\n */\npublic class EmailAlias {\n\n   public static Builder<?> builder() {\n      return new ConcreteBuilder();\n   }\n\n   public Builder<?> toBuilder() {\n      return new ConcreteBuilder().fromEmailAlias(this);\n   }\n\n   public abstract static class Builder<T extends Builder<T>> {\n      protected abstract T self();\n\n      protected String alias;\n      protected String forwardTo;\n\n      /**\n       * @see org.jclouds.glesys.domain.EmailAlias#getAlias()\n       */\n      public T alias(String alias) {\n         this.alias = checkNotNull(alias, \"alias\");\n         return self();\n      }\n\n      /**\n       * @see EmailAlias#getForwardTo()\n       */\n      public T forwardTo(String forwardTo) {\n         this.forwardTo = checkNotNull(forwardTo, \"forwardTo\");\n         return self();\n      }\n\n      public EmailAlias build() {\n         return new EmailAlias(alias, forwardTo);\n      }\n\n      public T fromEmailAlias(EmailAlias in) {\n         return this.alias(in.getAlias()).forwardTo(in.getForwardTo());\n      }\n   }\n\n   private static class ConcreteBuilder extends Builder<ConcreteBuilder> {\n      @Override\n      protected ConcreteBuilder self() {\n         return this;\n      }\n   }\n\n   private final String alias;\n   private final String forwardTo;\n\n   @ConstructorProperties({\n         \"emailalias\", \"goto\"\n   })\n   protected EmailAlias(String alias, String forwardTo) {\n      this.alias = checkNotNull(alias, \"alias\");\n      this.forwardTo = checkNotNull(forwardTo, \"forwardTo\");\n   }\n\n   /**\n    * @return the e-mail address being forwarded\n    */\n   public String getAlias() {\n      return this.alias;\n   }\n\n   /**\n    * @return the e-mail address this address forwards to\n    */\n   public String getForwardTo() {\n      return this.forwardTo;\n   }\n\n   @Override\n   public int hashCode() {\n      return Objects.hashCode(alias);\n   }\n\n<fim_suffix>   @Override\n   public boolean equals(Object obj) {\n      if (this == obj) return true;\n      if (obj == null || getClass() != obj.getClass()) return false;\n      EmailAlias that = EmailAlias.class.cast(obj);\n      return Objects.equal(this.alias, that.alias);\n   }\n\n   protected ToStringHelper string() {\n      return MoreObjects.toStringHelper(\"\")\n            .add(\"alias\", alias).add(\"forwardTo\", forwardTo);\n   }\n\n   @Override\n   public String toString() {\n      return string().toString();\n   }\n\n}<fim_middle>// function below has no smell\n"}