{"text": "<fim_prefix>\t\t\ttransform((XtendFunction) sourceMember, container, allowDispatch);\n\t\t} else if (sourceMember instanceof XtendField) {\n\t\t\ttransform((XtendField) sourceMember, container);\n\t\t} else if (sourceMember instanceof XtendConstructor) {\n\t\t\ttransform((XtendConstructor) sourceMember, container);\n\t\t} else if (sourceMember instanceof XtendEnumLiteral && container instanceof JvmEnumerationType) {\n\t\t\ttransform((XtendEnumLiteral) sourceMember, (JvmEnumerationType) container);\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Cannot transform \" + String.valueOf(sourceMember) + \" to a JvmMember\");\n\t\t}\n\t}\n\tprotected void transform(XtendFunction source, JvmGenericType container, boolean allowDispatch) {\n\t\tJvmOperation operation = typesFactory.createJvmOperation();\n\t\toperation.setAbstract(source.isAbstract());\n\t\toperation.setNative(source.isNative());\n\t\toperation.setSynchronized(source.isSynchonized());\n\t\toperation.setStrictFloatingPoint(source.isStrictFloatingPoint());\n\t\tif (!source.isAbstract())\n\t\t\toperation.setFinal(source.isFinal());\n\t\tcontainer.getMembers().add(operation);\n\t\tassociator.associatePrimary(source, operation);\n\t\tString sourceName = source.getName();\n\t\tJvmVisibility visibility = source.getVisibility();\n\t\tif (allowDispatch && source.isDispatch()) {\n\t\t\tif (source.getDeclaredVisibility() == null)\n\t\t\t\tvisibility = JvmVisibility.PROTECTED;\n\t\t\tsourceName = \"_\" + sourceName;\n\t\t}\n\t\toperation.setSimpleName(sourceName);\n\t\toperation.setVisibility(visibility);\n\t\toperation.setStatic(source.isStatic());\n\t\tif (!operation.isAbstract() && !operation.isStatic() && container.isInterface())\n\t\t\toperation.setDefault(true);\n\t\tfor (XtendParameter parameter : source.getParameters()) {\n\t\t\ttranslateParameter(operation, parameter);\n\t\t}\n\t\tXExpression expression = source.getExpression();\n\t\tCreateExtensionInfo createExtensionInfo = source.getCreateExtensionInfo();\n\t\tJvmTypeReference returnType = null;\n\t\tif (source.getReturnType() != null) {\n\t\t\treturnType = jvmTypesBuilder.cloneWithProxies(source.getReturnType());\n\t\t} else if (createExtensionInfo != null) {\n\t\t\treturnType = jvmTypesBuilder.inferredType(createExtensionInfo.getCreateExpression());\n\t\t} else if (expression != null) {\n\t\t\treturnType = jvmTypesBuilder.inferredType(expression);\n\t\t} else {\n\t\t\treturnType = jvmTypesBuilder.inferredType();\n\t\t}\n\t\toperation.setReturnType(returnType);\n\t\tcopyAndFixTypeParameters(source.getTypeParameters(), operation);\n\t\tfor (JvmTypeReference exception : source.getExceptions()) {\n\t\t\toperation.getExceptions().add(jvmTypesBuilder.cloneWithProxies(exception));\n\t\t}\n\t\ttranslateAnnotationsTo(source.getAnnotations(), operation);\n\t\tif (source.isOverride() && typeReferences.findDeclaredType(Override.class, source) != null)\n\t\t\tsetOverride(operation);\n\t\tif (createExtensionInfo != null) {\n\t\t\ttransformCreateExtension(source, createExtensionInfo, container, operation, returnType);\n\t\t} else {\n\t\t\tsetBody(operation, expression);\n\t\t}\n\t\tjvmTypesBuilder.copyDocumentationTo(source, operation);\n\t}\n\tprotected void setOverride(JvmOperation operation) {\n\t\tif (generatorConfig.getJavaSourceVersion().isAtLeast(JAVA6) && !containsAnnotation(operation, Override.class)) {\n\t\t\toperation.getAnnotations().add(_annotationTypesBuilder.annotationRef(Override.class));\n\t\t}\n\t}\n\tprivate boolean containsAnnotation(JvmAnnotationTarget annotationTarget, Class<? extends Annotation> annotationClass) {\n\t\tfor (JvmAnnotationReference annotationRef : annotationTarget.getAnnotations()) {\n\t\t\tif (annotationClass.getName().equals(annotationRef.getAnnotation().getIdentifier())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tprotected void setBody(JvmExecutable executable, XExpression expression) {\n\t\tassociator.associateLogicalContainer(expression, executable);\n\t\tinitializeLocalTypes(executable, expression);\n\t}\n\tprotected void transformCreateExtension(XtendFunction source, CreateExtensionInfo createExtensionInfo,\n\t\t\tJvmGenericType container, JvmOperation operation, /* @Nullable */ JvmTypeReference returnType) {\n\t\tJvmField cacheVar = jvmTypesBuilder.toField(\n\t\t\t\tsource, CREATE_CHACHE_VARIABLE_PREFIX + source.getName(), jvmTypesBuilder.inferredType());\n\t\tif (cacheVar != null) {\n\t\t\tcacheVar.setFinal(true);\n\t\t\tjvmTypesBuilder.setInitializer(cacheVar, compileStrategies.forCacheVariable(source));\n\t\t\tcontainer.getMembers().add(cacheVar);\n\t\t\tJvmOperation initializer = typesFactory.createJvmOperation();\n\t\t\tcontainer.getMembers().add(initializer);\n\t\t\tinitializer.setSimpleName(CREATE_INITIALIZER_PREFIX + source.getName());\n\t\t\tinitializer.setVisibility(JvmVisibility.PRIVATE);\n\t\t\tinitializer.setReturnType(typeReferences.getTypeForName(Void.TYPE, source));\n\t\t\tfor (JvmTypeReference exception : source.getExceptions()) {\n\t\t\t\tinitializer.getExceptions().add(jvmTypesBuilder.cloneWithProxies(exception));\n\t\t\t}\n\t\t\tjvmTypesBuilder.setBody(operation,\n\t\t\t\t\tcompileStrategies.forCacheMethod(createExtensionInfo, cacheVar, initializer));\n\t\t\t// the first parameter is the created object\n\t\t\tJvmFormalParameter jvmParam = typesFactory.createJvmFormalParameter();\n\t\t\tjvmParam.setName(createExtensionInfo.getName());\n\t\t\t// TODO consider type parameters\n\t\t\tjvmParam.setParameterType(jvmTypesBuilder.inferredType());\n\t\t\tinitializer.getParameters().add(jvmParam);\n\t\t\tassociator.associate(createExtensionInfo, jvmParam);\n\t\t\t// add all others\n\t\t\tfor (XtendParameter parameter : source.getParameters()) {\n\t\t\t\tjvmParam = typesFactory.createJvmFormalParameter();\n\t\t\t\tjvmParam.setName(parameter.getName());\n\t\t\t\tjvmParam.setParameterType(jvmTypesBuilder.cloneWithProxies(parameter.getParameterType()));\n\t\t\t\tinitializer.getParameters().add(jvmParam);\n\t\t\t\tassociator.associate(parameter, jvmParam);\n\t\t\t}\n\t\t\tassociator.associate(source, initializer);\n\t\t\tsetBody(operation, createExtensionInfo.getCreateExpression());\n\t\t\tsetBody(initializer, source.getExpression());\n\t\t}\n\t}\n\tprotected void translateParameter(JvmExecutable executable, XtendParameter parameter) {\n\t\tJvmFormalParameter jvmParam = typesFactory.createJvmFormalParameter();\n\t\tjvmParam.setName(parameter.getName());\n\t\tif (parameter.isVarArg()) {\n\t\t\texecutable.setVarArgs(true);\n\t\t\tJvmGenericArrayTypeReference arrayType = typeReferences.createArrayType(jvmTypesBuilder\n\t\t\t\t\t.cloneWithProxies(parameter.getParameterType()));\n\t\t\tjvmParam.setParameterType(arrayType);\n\t\t} else {\n\t\t\tjvmParam.setParameterType(jvmTypesBuilder.cloneWithProxies(parameter.getParameterType()));\n\t\t}\n\t\tassociator.associate(parameter, jvmParam);\n\t\ttranslateAnnotationsTo(parameter.getAnnotations(), jvmParam);\n\t\tif (parameter.isExtension() && typeReferences.findDeclaredType(Extension.class, parameter) != null) {\n\t\t\tjvmParam.getAnnotations().add(_annotationTypesBuilder.annotationRef(Extension.class));\n\t\t}\n\t\texecutable.getParameters().add(jvmParam);\n\t}\n<fim_suffix>\tprotected void transform(XtendConstructor source, JvmGenericType container) {\n\t\tJvmConstructor constructor = typesFactory.createJvmConstructor();\n\t\tcontainer.getMembers().add(constructor);\n\t\tassociator.associatePrimary(source, constructor);\n\t\tJvmVisibility visibility = source.getVisibility();\n\t\tconstructor.setSimpleName(container.getSimpleName());\n\t\tconstructor.setVisibility(visibility);\n\t\tfor (XtendParameter parameter : source.getParameters()) {\n\t\t\ttranslateParameter(constructor, parameter);\n\t\t}\n\t\tcopyAndFixTypeParameters(source.getTypeParameters(), constructor);\n\t\tfor (JvmTypeReference exception : source.getExceptions()) {\n\t\t\tconstructor.getExceptions().add(jvmTypesBuilder.cloneWithProxies(exception));\n\t\t}\n\t\ttranslateAnnotationsTo(source.getAnnotations(), constructor);\n\t\tsetBody(constructor, source.getExpression());\n\t\tjvmTypesBuilder.copyDocumentationTo(source, constructor);\n\t}<fim_middle>// function below has no smell\n"}