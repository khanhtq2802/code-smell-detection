{"text": "<fim_prefix>                            flowStatusReport.setProcessorStatusList(processorStatusList);\n                        }\n                        handleProcessorRequest(requestItem, rootGroupStatus, flowController, flowStatusReport.getProcessorStatusList(), processorStatusMap, logger);\n                        break;\n                    case \"connection\":\n                        if (flowStatusReport.getConnectionStatusList() == null) {\n                            List<ConnectionStatusBean> connectionStatusList = new LinkedList<>();\n                            flowStatusReport.setConnectionStatusList(connectionStatusList);\n                        }\n                        handleConnectionRequest(requestItem, rootGroupStatus, flowStatusReport.getConnectionStatusList(), connectionStatusMap, logger);\n                        break;\n                    case \"provenancereporting\":\n                        if (flowStatusReport.getRemoteProcessGroupStatusList() == null) {\n                            List<ReportingTaskStatus> reportingTaskStatusList = new LinkedList<>();\n                            flowStatusReport.setReportingTaskStatusList(reportingTaskStatusList);\n                        }\n                        handleReportingTaskRequest(requestItem, flowController, flowStatusReport.getReportingTaskStatusList(), logger);\n                        break;\n                    case \"controllerservices\":\n                        if (flowStatusReport.getControllerServiceStatusList() == null) {\n                            List<ControllerServiceStatus> controllerServiceStatusList = new LinkedList<>();\n                            flowStatusReport.setControllerServiceStatusList(controllerServiceStatusList);\n                        }\n                        handleControllerServices(requestItem, flowController, flowStatusReport.getControllerServiceStatusList(), logger);\n                        break;\n                }\n            } catch (Exception e) {\n                logger.error(\"Hit exception while requesting status for item '\" + item + \"'\", e);\n                errorsGeneratingReport.add(\"Unable to get status for request '\" + item + \"' due to:\" + e);\n            }\n        }\n        return flowStatusReport;\n    }\n    private static void handleControllerServices(RequestItem requestItem, FlowController flowController, List<ControllerServiceStatus> controllerServiceStatusList, Logger logger) {\n        Collection<ControllerServiceNode> controllerServiceNodeSet = flowController.getAllControllerServices();\n        if (!controllerServiceNodeSet.isEmpty()) {\n            for (ControllerServiceNode controllerServiceNode : controllerServiceNodeSet) {\n                controllerServiceStatusList.add(parseControllerServiceStatusRequest(controllerServiceNode, requestItem.options, flowController, logger));\n            }\n        }\n    }\n    private static void handleProcessorRequest(final RequestItem requestItem, ProcessGroupStatus rootGroupStatus, FlowController flowController, List<ProcessorStatusBean> processorStatusBeanList,\n                                               Map<String, ProcessorStatus> processorStatusMap, Logger logger) throws StatusRequestException {\n        if (processorStatusMap == null) {\n            processorStatusMap = transformStatusCollection(rootGroupStatus.getProcessorStatus());\n        }\n        String rootGroupId = flowController.getRootGroupId();\n        if (requestItem.identifier.equalsIgnoreCase(\"all\")) {\n            if (!processorStatusMap.isEmpty()) {\n                for (ProcessorStatus processorStatus : new HashSet<>(processorStatusMap.values())) {\n                    Collection<ValidationResult> validationResults = flowController.getGroup(rootGroupId).getProcessor(processorStatus.getId()).getValidationErrors();\n                    processorStatusBeanList.add(parseProcessorStatusRequest(processorStatus, requestItem.options, flowController, validationResults));\n                }\n            }\n        } else {\n            if (processorStatusMap.containsKey(requestItem.identifier)) {\n                ProcessorStatus processorStatus = processorStatusMap.get(requestItem.identifier);\n                Collection<ValidationResult> validationResults = flowController.getGroup(rootGroupId).getProcessor(processorStatus.getId()).getValidationErrors();\n                processorStatusBeanList.add(parseProcessorStatusRequest(processorStatus, requestItem.options, flowController, validationResults));\n            } else {\n                logger.warn(\"Status for processor with key \" + requestItem.identifier + \" was requested but one does not exist\");\n                throw new StatusRequestException(\"No processor with key \" + requestItem.identifier + \" to report status on\");\n            }\n        }\n    }\n    private static void handleConnectionRequest(RequestItem requestItem, ProcessGroupStatus rootGroupStatus, List<ConnectionStatusBean> connectionStatusList,\n                                                Map<String, ConnectionStatus> connectionStatusMap, Logger logger) throws StatusRequestException {\n        if (connectionStatusMap == null) {\n            connectionStatusMap = transformStatusCollection(rootGroupStatus.getConnectionStatus());\n        }\n        if (requestItem.identifier.equalsIgnoreCase(\"all\")) {\n            if (!connectionStatusMap.isEmpty()) {\n                for (ConnectionStatus connectionStatus : new HashSet<>(connectionStatusMap.values())) {\n                    connectionStatusList.add(parseConnectionStatusRequest(connectionStatus, requestItem.options, logger));\n                }\n            }\n        } else {\n            if (connectionStatusMap.containsKey(requestItem.identifier)) {\n                connectionStatusList.add(parseConnectionStatusRequest(connectionStatusMap.get(requestItem.identifier), requestItem.options, logger));\n            } else {\n                logger.warn(\"Status for connection with key \" + requestItem.identifier + \" was requested but one does not exist\");\n                throw new StatusRequestException(\"No connection with key \" + requestItem.identifier + \" to report status on\");\n            }\n        }\n    }\n    private static void handleRemoteProcessGroupRequest(RequestItem requestItem, ProcessGroupStatus rootGroupStatus, FlowController flowController,\n                                                        List<RemoteProcessGroupStatusBean> remoteProcessGroupStatusList, Map<String, RemoteProcessGroupStatus> remoteProcessGroupStatusMap,\n                                                        Logger logger) throws StatusRequestException {\n        if (remoteProcessGroupStatusMap == null) {\n            remoteProcessGroupStatusMap = transformStatusCollection(rootGroupStatus.getRemoteProcessGroupStatus());\n        }\n        if (requestItem.identifier.equalsIgnoreCase(\"all\")) {\n            if (!remoteProcessGroupStatusMap.isEmpty()) {\n                for (RemoteProcessGroupStatus remoteProcessGroupStatus : new HashSet<>(remoteProcessGroupStatusMap.values())) {\n                    remoteProcessGroupStatusList.add(parseRemoteProcessGroupStatusRequest(remoteProcessGroupStatus, requestItem.options, flowController));\n                }\n            }\n        } else {\n            if (remoteProcessGroupStatusMap.containsKey(requestItem.identifier)) {\n                RemoteProcessGroupStatus remoteProcessGroupStatus = remoteProcessGroupStatusMap.get(requestItem.identifier);\n                remoteProcessGroupStatusList.add(parseRemoteProcessGroupStatusRequest(remoteProcessGroupStatus, requestItem.options, flowController));\n            } else {\n                logger.warn(\"Status for Remote Process Group with key \" + requestItem.identifier + \" was requested but one does not exist\");\n                throw new StatusRequestException(\"No Remote Process Group with key \" + requestItem.identifier + \" to report status on\");\n            }\n        }\n    }\n    private static void handleReportingTaskRequest(RequestItem requestItem, FlowController flowController, List<ReportingTaskStatus> reportingTaskStatusList, Logger logger) {\n        Set<ReportingTaskNode> reportingTaskNodes = flowController.getAllReportingTasks();\n        if (!reportingTaskNodes.isEmpty()) {\n            for (ReportingTaskNode reportingTaskNode : reportingTaskNodes) {\n                reportingTaskStatusList.add(parseReportingTaskStatusRequest(reportingTaskNode.getIdentifier(), reportingTaskNode, requestItem.options, flowController, logger));\n            }\n        }\n    }\n    private static <E> Map<String, E> transformStatusCollection(Collection<E> statusCollection) {\n        Map<String, E> statusMap = new HashMap<>();\n        for (E status : statusCollection) {\n            if (status instanceof ProcessorStatus) {\n                statusMap.put(((ProcessorStatus) status).getId(), status);\n                if (((ProcessorStatus) status).getName() != null) {\n                    statusMap.put(((ProcessorStatus) status).getName(), status);\n                }\n            } else if (status instanceof ConnectionStatus) {\n                statusMap.put(((ConnectionStatus) status).getId(), status);\n                if (((ConnectionStatus) status).getName() != null) {\n                    statusMap.put(((ConnectionStatus) status).getName(), status);\n                }\n            } else if (status instanceof RemoteProcessGroupStatus) {\n                statusMap.put(((RemoteProcessGroupStatus) status).getId(), status);\n                if (((RemoteProcessGroupStatus) status).getName() != null) {\n                    statusMap.put(((RemoteProcessGroupStatus) status).getName(), status);\n                }\n            }\n        }\n        return statusMap;\n    }\n    private static class RequestItem {\n        private final int EXPECTED_REQUEST_COMPONENTS = 2;\n        private String queryType;\n        private String identifier;\n        private String options;\n<fim_suffix>        public RequestItem(final String requestString) {\n            final List<String> reqComponents = Arrays.asList(requestString.split(\":\"));\n            final int numComponents = reqComponents.size();\n            if (numComponents < EXPECTED_REQUEST_COMPONENTS) {\n                throw new IllegalArgumentException(String.format(\"Cannot perform a FlowStatusQuery request for '%s'.  Expected at least %d components but got %d.\",\n                        requestString, EXPECTED_REQUEST_COMPONENTS, numComponents));\n            }\n            this.queryType = reqComponents.get(0).toLowerCase();\n            if (numComponents == 2) {\n                this.options = reqComponents.get(1);\n            } else {\n                this.identifier = reqComponents.get(1);\n                this.options = reqComponents.get(2);\n            }\n            // normalize options\n            this.options = this.options.toLowerCase();\n        }<fim_middle>// function below has no smell\n"}