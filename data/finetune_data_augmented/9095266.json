{"text": "<fim_prefix>/*\n * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 3 only, as\n * published by the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 3 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 3 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.truffle.r.nodes.function;\n\nimport com.oracle.truffle.api.CompilerDirectives;\nimport com.oracle.truffle.api.CompilerDirectives.CompilationFinal;\nimport com.oracle.truffle.api.RootCallTarget;\nimport com.oracle.truffle.api.frame.MaterializedFrame;\nimport com.oracle.truffle.api.frame.VirtualFrame;\nimport com.oracle.truffle.api.source.SourceSection;\nimport com.oracle.truffle.r.nodes.RASTUtils;\nimport com.oracle.truffle.r.nodes.RRootNode;\nimport com.oracle.truffle.r.nodes.function.PromiseHelperNode.PromiseDeoptimizeFrameNode;\nimport com.oracle.truffle.r.nodes.function.opt.EagerEvalHelper;\nimport com.oracle.truffle.r.nodes.function.visibility.SetVisibilityNode;\nimport com.oracle.truffle.r.runtime.ArgumentsSignature;\nimport com.oracle.truffle.r.runtime.RArguments;\nimport com.oracle.truffle.r.runtime.data.RDataFactory;\nimport com.oracle.truffle.r.runtime.data.RFunction;\nimport com.oracle.truffle.r.runtime.env.frame.FrameSlotChangeMonitor;\nimport com.oracle.truffle.r.runtime.nodes.RSourceSectionNode;\nimport com.oracle.truffle.r.runtime.nodes.RSyntaxElement;\nimport com.oracle.truffle.r.runtime.nodes.RSyntaxFunction;\nimport com.oracle.truffle.r.runtime.nodes.RSyntaxNode;\n\n<fim_suffix>public final class FunctionExpressionNode extends RSourceSectionNode implements RSyntaxNode, RSyntaxFunction {\n\n    public static FunctionExpressionNode create(SourceSection src, RootCallTarget callTarget) {\n        return new FunctionExpressionNode(src, callTarget);\n    }\n\n    @Child private SetVisibilityNode visibility = SetVisibilityNode.create();\n\n    @CompilationFinal private RootCallTarget callTarget;\n    private final PromiseDeoptimizeFrameNode deoptFrameNode;\n\n    @CompilationFinal private boolean initialized = false;\n\n    private FunctionExpressionNode(SourceSection src, RootCallTarget callTarget) {\n        super(src);\n        this.callTarget = callTarget;\n        this.deoptFrameNode = EagerEvalHelper.optExprs() || EagerEvalHelper.optVars() || EagerEvalHelper.optDefault() ? new PromiseDeoptimizeFrameNode() : null;\n    }\n\n    @Override\n    public RFunction execute(VirtualFrame frame) {\n        visibility.execute(frame, true);\n        MaterializedFrame matFrame = frame.materialize();\n        if (deoptFrameNode != null) {\n            // Deoptimize every promise which is now in this frame, as it might leave it's stack\n            deoptFrameNode.deoptimizeFrame(RArguments.getArguments(matFrame));\n        }\n        if (!initialized) {\n            CompilerDirectives.transferToInterpreterAndInvalidate();\n            if (!FrameSlotChangeMonitor.isEnclosingFrameDescriptor(callTarget.getRootNode().getFrameDescriptor(), frame)) {\n                if (!FrameSlotChangeMonitor.isEnclosingFrameDescriptor(callTarget.getRootNode().getFrameDescriptor(), null)) {\n                    RRootNode root = (RRootNode) callTarget.getRootNode();\n                    callTarget = root.duplicateWithNewFrameDescriptor();\n                }\n                FrameSlotChangeMonitor.initializeEnclosingFrame(callTarget.getRootNode().getFrameDescriptor(), frame);\n            }\n            initialized = true;\n        }\n        return RDataFactory.createFunction(RFunction.NO_NAME, RFunction.NO_NAME, callTarget, null, matFrame);\n    }\n\n    public RootCallTarget getCallTarget() {\n        return callTarget;\n    }\n\n    @Override\n    public RSyntaxElement[] getSyntaxArgumentDefaults() {\n        return RASTUtils.asSyntaxNodes(((FunctionDefinitionNode) callTarget.getRootNode()).getFormalArguments().getArguments());\n    }\n\n    @Override\n    public RSyntaxElement getSyntaxBody() {\n        return ((FunctionDefinitionNode) callTarget.getRootNode()).getBody();\n    }\n\n    @Override\n    public ArgumentsSignature getSyntaxSignature() {\n        return ((FunctionDefinitionNode) callTarget.getRootNode()).getFormalArguments().getSignature();\n    }\n\n    @Override\n    public String getSyntaxDebugName() {\n        return ((RRootNode) callTarget.getRootNode()).getName();\n    }\n}<fim_middle>// class below is blob\n"}