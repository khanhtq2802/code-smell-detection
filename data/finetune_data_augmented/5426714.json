{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.pivot.collections.immutable;\n\nimport java.util.Comparator;\nimport java.util.Iterator;\n\nimport org.apache.pivot.annotations.UnsupportedOperation;\nimport org.apache.pivot.collections.Map;\nimport org.apache.pivot.collections.MapListener;\nimport org.apache.pivot.util.ImmutableIterator;\nimport org.apache.pivot.util.ListenerList;\nimport org.apache.pivot.util.Utils;\n\n/**\n * Unmodifiable implementation of the {@link Map} interface.\n * @param <K> Key type for the elements of this map.\n * @param <V> Value type for the map elements.\n */\npublic final class ImmutableMap<K, V> implements Map<K, V> {\n    private Map<K, V> map = null;\n\n    private MapListener.Listeners<K, V> mapListeners = new MapListener.Listeners<>();\n\n    private static final String ERROR_MSG = \"An Immutable Map cannot be modified.\";\n\n    public ImmutableMap(final Map<K, V> map) {\n        Utils.checkNull(map, \"map\");\n\n        this.map = map;\n    }\n\n    @Override\n    public V get(final K key) {\n        return map.get(key);\n    }\n\n    @Override\n    @UnsupportedOperation\n    public V put(final K key, final V value) {\n        throw new UnsupportedOperationException(ERROR_MSG);\n    }\n\n    @Override\n    @UnsupportedOperation\n    public V remove(final K key) {\n        throw new UnsupportedOperationException(ERROR_MSG);\n    }\n\n<fim_suffix>    @Override\n    @UnsupportedOperation\n    public void clear() {\n        throw new UnsupportedOperationException(ERROR_MSG);\n    }\n\n    @Override\n    public boolean containsKey(final K key) {\n        return map.containsKey(key);\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return map.isEmpty();\n    }\n\n    @Override\n    public int getCount() {\n        return map.getCount();\n    }\n\n    @Override\n    public Comparator<K> getComparator() {\n        return null;\n    }\n\n    @Override\n    @UnsupportedOperation\n    public void setComparator(final Comparator<K> comparator) {\n        throw new UnsupportedOperationException(ERROR_MSG);\n    }\n\n    @Override\n    public Iterator<K> iterator() {\n        return new ImmutableIterator<>(map.iterator());\n    }\n\n    @Override\n    public String toString() {\n        return map.toString();\n    }\n\n    @Override\n    public ListenerList<MapListener<K, V>> getMapListeners() {\n        return mapListeners;\n    }\n}<fim_middle>// function below has no smell\n"}