{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.ignite.internal.managers.communication;\nimport java.nio.ByteBuffer;\nimport java.util.UUID;\nimport org.apache.ignite.internal.GridDirectTransient;\nimport org.apache.ignite.internal.IgniteCodeGeneratingFail;\nimport org.apache.ignite.internal.util.typedef.internal.S;\nimport org.apache.ignite.plugin.extensions.communication.Message;\nimport org.apache.ignite.plugin.extensions.communication.MessageReader;\nimport org.apache.ignite.plugin.extensions.communication.MessageWriter;\n/**\n *\n */\n@IgniteCodeGeneratingFail\npublic class IgniteIoTestMessage implements Message {\n    /** */\n    private static byte FLAG_PROC_FROM_NIO = 1;\n    /** */\n    private static final long serialVersionUID = 0L;\n    /** */\n    private long id;\n    /** */\n    private byte flags;\n    /** */\n    private boolean req;\n    /** */\n    private byte payload[];\n    /** */\n    private long reqCreateTs;\n    /** */\n    private long reqSndTs;\n    /** */\n    private long reqSndTsMillis;\n    /** */\n    private long reqRcvTs;\n    /** */\n    private long reqRcvTsMillis;\n    /** */\n    private long reqProcTs;\n    /** */\n    private long resSndTs;\n    /** */\n    private long resSndTsMillis;\n    /** */\n    private long resRcvTs;\n    /** */\n    private long resRcvTsMillis;\n    /** */\n    private long resProcTs;\n    /** */\n    @GridDirectTransient\n    private UUID sndNodeId;\n    /**\n     *\n     */\n    public IgniteIoTestMessage() {\n        // No-op.\n    }\n    /**\n     * @param id Message ID.\n     * @param req Request flag.\n     * @param payload Payload.\n     */\n    public IgniteIoTestMessage(long id, boolean req, byte[] payload) {\n        this.id = id;\n        this.req = req;\n        this.payload = payload;\n        reqCreateTs = System.nanoTime();\n    }\n    /**\n     * @return {@code True} if message should be processed from NIO thread\n     * (otherwise message is submitted to system pool).\n     */\n    public boolean processFromNioThread() {\n        return isFlag(FLAG_PROC_FROM_NIO);\n    }\n    /**\n     * @param procFromNioThread {@code True} if message should be processed from NIO thread.\n     */\n    public void processFromNioThread(boolean procFromNioThread) {\n        setFlag(procFromNioThread, FLAG_PROC_FROM_NIO);\n    }\n    /**\n     * @param flags Flags.\n     */\n    public void flags(byte flags) {\n        this.flags = flags;\n    }\n    /**\n     * @return Flags.\n     */\n    public byte flags() {\n        return flags;\n    }\n    /**\n     * Sets flag mask.\n     *\n     * @param flag Set or clear.\n     * @param mask Mask.\n     */\n    private void setFlag(boolean flag, int mask) {\n        flags = flag ? (byte)(flags | mask) : (byte)(flags & ~mask);\n    }\n    /**\n     * Reads flag mask.\n     *\n     * @param mask Mask to read.\n     * @return Flag value.\n     */\n    private boolean isFlag(int mask) {\n        return (flags & mask) != 0;\n    }\n    /**\n     * @return {@code true} if this is request.\n     */\n    public boolean request() {\n        return req;\n    }\n    /**\n     * @return ID.\n     */\n    public long id() {\n        return id;\n    }\n    /**\n     * @return Request create timestamp.\n     */\n    public long requestCreateTs() {\n        return reqCreateTs;\n    }\n    /**\n     * @return Request send timestamp.\n     */\n    public long requestSendTs() {\n        return reqSndTs;\n    }\n    /**\n     * @return Request receive timestamp.\n     */\n    public long requestReceiveTs() {\n        return reqRcvTs;\n    }\n    /**\n     * @return Request process started timestamp.\n     */\n    public long requestProcessTs() {\n        return reqProcTs;\n    }\n    /**\n     * @return Response send timestamp.\n     */\n    public long responseSendTs() {\n        return resSndTs;\n    }\n    /**\n     * @return Response receive timestamp.\n     */\n    public long responseReceiveTs() {\n        return resRcvTs;\n    }\n    /**\n     * @return Response process timestamp.\n     */\n    public long responseProcessTs() {\n        return resProcTs;\n    }\n    /**\n     * @return Request send timestamp (millis).\n     */\n    public long requestSendTsMillis() {\n        return reqSndTsMillis;\n    }\n    /**\n     * @return Request received timestamp (millis).\n     */\n    public long requestReceivedTsMillis() {\n        return reqRcvTsMillis;\n    }\n    /**\n     * @return Response send timestamp (millis).\n     */\n    public long responseSendTsMillis() {\n        return resSndTsMillis;\n    }\n    /**\n     * @return Response received timestamp (millis).\n     */\n    public long responseReceivedTsMillis() {\n        return resRcvTsMillis;\n    }\n    /**\n     * This method is called to initialize tracing variables.\n     * TODO: introduce direct message lifecycle API?\n     */\n    public void onAfterRead() {\n        if (req && reqRcvTs == 0) {\n            reqRcvTs = System.nanoTime();\n            reqRcvTsMillis = System.currentTimeMillis();\n        }\n        if (!req && resRcvTs == 0) {\n            resRcvTs = System.nanoTime();\n            resRcvTsMillis = System.currentTimeMillis();\n        }\n    }\n    /**\n     * This method is called to initialize tracing variables.\n     * TODO: introduce direct message lifecycle API?\n     */\n<fim_suffix>    public void onBeforeWrite() {\n        if (req && reqSndTs == 0) {\n            reqSndTs = System.nanoTime();\n            reqSndTsMillis = System.currentTimeMillis();\n        }\n        if (!req && resSndTs == 0) {\n            resSndTs = System.nanoTime();\n            resSndTsMillis = System.currentTimeMillis();\n        }\n    }\n    /**\n     *\n     */\n    public void copyDataFromRequest(IgniteIoTestMessage req) {\n        reqCreateTs = req.reqCreateTs;\n        reqSndTs = req.reqSndTs;\n        reqSndTsMillis = req.reqSndTsMillis;\n        reqRcvTs = req.reqRcvTs;\n        reqRcvTsMillis = req.reqRcvTsMillis;\n    }\n    /**\n     *\n     */\n    public void onRequestProcessed() {\n        reqProcTs = System.nanoTime();\n    }\n    /**\n     *\n     */\n    public void onResponseProcessed() {\n        resProcTs = System.nanoTime();\n    }\n    /**\n     * @return Response processed timestamp.\n     */\n    public long responseProcessedTs() {\n        return resProcTs;\n    }\n    /**\n     * @return Sender node ID.\n     */\n    public UUID senderNodeId() {\n        return sndNodeId;\n    }\n    /**\n     * @param sndNodeId Sender node ID.\n     */\n    public void senderNodeId(UUID sndNodeId) {\n        this.sndNodeId = sndNodeId;\n    }\n    /** {@inheritDoc} */\n    @Override public boolean writeTo(ByteBuffer buf, MessageWriter writer) {\n        writer.setBuffer(buf);\n        onBeforeWrite();\n        if (!writer.isHeaderWritten()) {\n            if (!writer.writeHeader(directType(), fieldsCount()))\n                return false;\n            writer.onHeaderWritten();\n        }\n        switch (writer.state()) {\n            case 0:\n                if (!writer.writeByte(\"flags\", flags))\n                    return false;\n                writer.incrementState();\n            case 1:\n                if (!writer.writeLong(\"id\", id))\n                    return false;\n                writer.incrementState();\n            case 2:\n                if (!writer.writeByteArray(\"payload\", payload))\n                    return false;\n                writer.incrementState();\n            case 3:\n                if (!writer.writeBoolean(\"req\", req))\n                    return false;\n                writer.incrementState();\n            case 4:\n                if (!writer.writeLong(\"reqCreateTs\", reqCreateTs))\n                    return false;\n                writer.incrementState();\n            case 5:\n                if (!writer.writeLong(\"reqProcTs\", reqProcTs))\n                    return false;\n                writer.incrementState();\n            case 6:\n                if (!writer.writeLong(\"reqRcvTs\", reqRcvTs))<fim_middle>// function below has no smell\n"}