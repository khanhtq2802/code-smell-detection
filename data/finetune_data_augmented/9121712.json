{"text": "<fim_prefix>/***********************************************************************\n * Copyright (c) 2004 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n * Actuate Corporation - initial API and implementation\n ***********************************************************************/\npackage org.eclipse.birt.report.engine.layout.area.impl;\n\nimport org.eclipse.birt.report.engine.content.IStyle;\nimport org.eclipse.birt.report.engine.content.ITextContent;\nimport org.eclipse.birt.report.engine.emitter.EmitterUtil;\nimport org.eclipse.birt.report.engine.layout.PDFConstants;\nimport org.eclipse.birt.report.engine.layout.area.IAreaVisitor;\nimport org.eclipse.birt.report.engine.layout.area.ITextArea;\nimport org.eclipse.birt.report.engine.layout.pdf.font.FontInfo;\n\nimport com.ibm.icu.text.Bidi;\nimport com.lowagie.text.Font;\n\npublic class TextArea extends AbstractArea implements ITextArea\n{\n\tprotected String text;\n\t\n\tprotected FontInfo fi;\n\n\t/**\n\t * the offset relative to the TextContent, which indicates from where the TextArea starts.\n\t */\n\tprivate int offset;\n\t\n\tprivate ITextContent textContent;\n\t\n\tprivate int runLevel;\n\t/** \n\t * checks if line break happens\n\t */\n\tprivate boolean lineBreak;\n\t\n\t/**\n\t * flag to show if the line is blank\n\t */\n\tprivate boolean blankLine = false;\n\t\n\t/**\n\t * the character numbers in the TextArea.\n\t */\n\tprivate int textLength;\n\t\n\t/**\n\t * the max width of the TextArea( in 1/1000 points ) \n\t */\n\tprivate int maxWidth;\n\t\n\t/**\n\t * @deprecated\n\t * @param textContent\n\t * @param text\n\t * @param fi\n\t */\n\tpublic TextArea( ITextContent textContent, String text, FontInfo fi )\n\t{\n\t\tsuper(textContent);\n\t\tthis.textContent = textContent;\n\t\tthis.text = text;\n\t\tthis.offset = 0;\n\t\tthis.textLength = text.length( );\n\t\tthis.fi = fi;\n\t\theight = (int)( fi.getWordHeight( ) * PDFConstants.LAYOUT_TO_PDF_RATIO );\n\t\tbaseLine = this.fi.getBaseline( );\n\t\tremovePadding( );\n\t\tremoveBorder( );\n\t\tremoveMargin( );\n\t\thasBoxProperty = false;\n\t}\n\t\n\tpublic TextArea( ITextContent textContent, FontInfo fi, boolean blankLine )\n\t{\n\t\tsuper(textContent);\n\t\tthis.textContent = textContent;\n\t\tthis.fi = fi;\n\t\theight = (int)( fi.getWordHeight( ) * PDFConstants.LAYOUT_TO_PDF_RATIO );\n\t\tbaseLine = this.fi.getBaseline( );\n\t\tif( blankLine )\n\t\t{\n\t\t\tthis.lineBreak = true;\n\t\t\tthis.blankLine = true;\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.offset = 0;\n\t\t\tthis.textLength = textContent.getText( ).length( );\n\t\t}\n\t\tremovePadding( );\n\t\tremoveBorder( );\n\t\tremoveMargin( );\n\t\thasBoxProperty = false;\n\t}\n\t\n\tpublic TextArea( ITextContent textContent, IStyle areaStyle, int offset, int baseLevel, int runLevel,\n\t\t\tFontInfo fontInfo )\n\t{\n\t\tsuper(textContent, areaStyle);\n\t\tthis.textContent = textContent;\n\t\tthis.fi = fontInfo;\n\t\theight = (int)( fi.getWordHeight( ) * PDFConstants.LAYOUT_TO_PDF_RATIO );\n\t\tbaseLine = this.fi.getBaseline( );\n\t\tthis.offset = offset;\n\t\tthis.runLevel = runLevel;\n\t\tthis.lineBreak = false;\n\t}\n\t\n\t\n<fim_suffix>\tpublic TextArea( ITextContent textContent, int offset, int baseLevel, int runLevel,\n\t\t\tFontInfo fontInfo )\n\t{\n\t\tsuper(textContent);\n\t\tthis.textContent = textContent;\n\t\tthis.fi = fontInfo;\n\t\theight = (int)( fi.getWordHeight( ) * PDFConstants.LAYOUT_TO_PDF_RATIO );\n\t\tbaseLine = this.fi.getBaseline( );\n\t\tthis.offset = offset;\n\t\tthis.runLevel = runLevel;\n\t\tthis.lineBreak = false;\n\t\tremovePadding( );\n\t\tremoveBorder( );\n\t\tremoveMargin( );\n\t}\n\n\tpublic boolean lineBreak( )\n\t{\n\t\treturn lineBreak;\n\t}\n\n\tpublic boolean isEmpty( )\n\t{\n\t\treturn textLength == 0;\n\t}\n\n\tpublic void addWord( int textLength, float wordWidth )\n\t{\n\t\tthis.textLength += textLength;\n\t\tthis.width += wordWidth;\n\t}\n\n\tpublic void addWordSpacing( int wordSpacing )\n\t{\n\t\tthis.width += wordSpacing;\n\t}\n\n\tpublic boolean hasSpace( int width )\n\t{\n\t\treturn maxWidth - this.width > width;\n\t}\n\t\n\tpublic void setStyle(IStyle style)\n\t{\n\t\tthis.style = style;\n\t}\n\t\n\tprivate void calculateText( )\n\t{\n\t\tif( blankLine )\n\t\t{\n\t\t\tthis.text = \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.text = textContent.getText( ).substring( offset,\n\t\t\t\t\toffset + textLength );\t\n\t\t}\n\t}\n\n\tpublic String getLogicalOrderText( )\n\t{\n\t\tcalculateText( );\n\t\treturn text;\n\t}\n\t\n\t/**\n\t * Gets the text in visual order.\n\t * \n\t * @param text\n\t *            the original text.\n\t * @return the text in visual order.\n\t */\n\tpublic String getText( )\n\t{\n\t\tcalculateText( );\n\t\tif ( ( runLevel & 1 ) == 0 )\n\t\t{\n\t\t\treturn text;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn flip( text );\n\t\t}\n\t}\n\n\tprivate String flip( String text )\n\t{\n\t\treturn Bidi\n\t\t\t\t.writeReverse( text, Bidi.OUTPUT_REVERSE | Bidi.DO_MIRRORING );\n\t}\n\t\n\tpublic int getRunLevel( )\n\t{\n\t\treturn runLevel;\n\t}\n\t\n\tpublic FontInfo getFontInfo( )\n\t{\n\t\treturn this.fi;\n\t}\n\t\n\tpublic void accept(IAreaVisitor visitor)\n\t{\n\t\tvisitor.visitText(this);\n\t}\n\n\tpublic int getTextLength( )\n\t{\n\t\treturn textLength;\n\t}\n\t\n\tpublic void setTextLength( int textLength )\n\t{\n\t\tthis.textLength = textLength;\n\t}\n\n\tpublic boolean isLineBreak( )\n\t{\n\t\treturn lineBreak;\n\t}\n\t\n\tpublic void setLineBreak( boolean lineBreak )\n\t{\n\t\tthis.lineBreak = lineBreak;\n\t}\n\n\tpublic int getMaxWidth( )\n\t{\n\t\treturn maxWidth;\n\t}\n\n\tpublic void setMaxWidth( int maxWidth )\n\t{\n\t\tthis.maxWidth = maxWidth;\n\t}\n\t\n\tpublic int getWidth( )\n\t{\n\t\tint fontStyle = fi.getFontStyle( );\n\t\t//get width for text with simulated italic font.\n\t\tif ( fi.getSimulation( )\n\t\t\t\t&& ( Font.ITALIC == fontStyle || Font.BOLDITALIC == fontStyle ) )\n\t\t{\n\t\t\twidth = (int) ( width + height\n\t\t\t\t\t* EmitterUtil.getItalicHorizontalCoefficient( ) );\n\t\t}\n\t\treturn width;\n\t}\n}<fim_middle>// function below has no smell\n"}