{"text": "<fim_prefix>/* *******************************************************************\n * Copyright (c) 1999-2001 Xerox Corporation, \n *               2002 Palo Alto Research Center, Incorporated (PARC).\n * All rights reserved. \n * This program and the accompanying materials are made available \n * under the terms of the Eclipse Public License v1.0 \n * which accompanies this distribution and is available at \n * http://www.eclipse.org/legal/epl-v10.html \n *  \n * Contributors: \n *     Xerox/PARC     initial implementation\n *     Helen Hawkins  Converted to new interface (bug 148190) \n * ******************************************************************/\n\n\npackage org.aspectj.tools.ajbrowser.ui;\n\nimport java.awt.BorderLayout;\nimport java.awt.Font;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\nimport javax.swing.JEditorPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.DefaultHighlighter;\n\nimport org.aspectj.ajde.Ajde;\nimport org.aspectj.ajde.EditorAdapter;\nimport org.aspectj.bridge.ISourceLocation;\nimport org.aspectj.tools.ajbrowser.BrowserManager;\nimport org.aspectj.tools.ajbrowser.core.BrowserErrorHandler;\n\n/**\n * Bare-bones editor implementation used when the framework is being used\n * standalone.\n *\n * @author Mik Kersten\n */\npublic class BasicEditor implements EditorAdapter {\n\n\tprivate String NO_FILE = \"<no file selected>\";\n    private String filePath = NO_FILE;\n    private JPanel editor_panel = new JPanel();\n\n    // @todo    get rid of these\n    private int currHighlightStart = 0;\n    private int currHighlightEnd = 0;\n\n    private BorderLayout borderLayout1 = new BorderLayout();\n    private JScrollPane jScrollPane1 = new JScrollPane();\n    private JEditorPane editorPane = new JEditorPane();\n\n    public BasicEditor() {\n        try {\n            editorPane.setEditable(true);\n            editorPane.setContentType(\"text/plain\");\n            editorPane.setFont(new Font(\"Monospaced\", 0, 11));\n            editor_panel.add(editorPane);\n            jbInit();\n        }\n        catch(Exception e) {\n            BrowserErrorHandler.handleError(\"Could not initialize GUI.\", e);\n        }\n    }\n\n    public String getCurrFile() {\n\t\treturn filePath;\n    }\n\n<fim_suffix>    public void showSourceLine(ISourceLocation sourceLocation, boolean highlight) {\n    \ttry {\n    \t\tshowSourceLine(sourceLocation.getSourceFile().getAbsolutePath(), sourceLocation.getLine(), highlight);\n    \t} catch (NullPointerException npe) {\n    \t\tAjde.getDefault().getIdeUIAdapter().displayStatusInformation(\" no corresponding source line to seek to\");\n    \t}\n    }\n    \t\n    public void showSourceLine(int lineNumber, boolean highlight) {\n        showSourceLine(filePath, lineNumber, highlight);\n    }\n\n    public void pasteToCaretPos(String text) {\n        if (currHighlightEnd < 1) return;\n        String contents = editorPane.getText();\n        String pasted = contents.substring(0, currHighlightEnd) +\n            text + contents.substring(currHighlightEnd, contents.length());\n        editorPane.setText(pasted);\n    }\n\n    public void showSourceLine(String filePath, int lineNumber, boolean highlight) {\n    \t//AjdeUIManager.getDefault().getIdeUIAdapter().resetEditor();\n        \n        this.filePath = filePath;\n//        if (oldPath != filePath && !Ajde.INSTANCE.BROWSER_MANAGER.isGlobalMode()) {\n//            Ajde.INSTANCE.BROWSER_MANAGER.updateView();\n//        }\n\n//        Ajde.IDE_MANAGER.setEditorStatusText(filePath);\n\n        currHighlightStart = 0;\n        currHighlightEnd = 0;\n        editorPane.setText(readFile(filePath, lineNumber));\n        try {\n            editorPane.getHighlighter().addHighlight(currHighlightStart, currHighlightEnd, DefaultHighlighter.DefaultPainter);\n            editorPane.setCaretPosition(currHighlightStart);\n        } catch (BadLocationException ble) {\n        \tBrowserErrorHandler.handleError(\"Could not highlight location.\", ble);\n        }\n        BrowserManager.getDefault().getEditorManager().notifyCurrentFileChanged(filePath);\n    }\n\n    /**\n     * Not implemented.\n     */\n    public void showSourcelineAnnotation(String filePath, int lineNumber, java.util.List items) { }\n\n\tpublic void addEditorViewForSourceLine(String filePath, int lineNumber) {\n\t\t\n\t}\n\n    public void saveContents() throws IOException {\n        if (!filePath.equals(NO_FILE) && !filePath.equals(\"\") && !editorPane.getText().equals(\"\")) {\n            BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));\n            writer.write(editorPane.getText());\n            writer.close();\n        }\n    }\n\n    public JPanel getPanel() {\n        return editor_panel;\n    }\n\n    public void showSourceForFile(String filePath) { }\n\n    public void showSourceForLine(int lineNumber, boolean highlight) { }\n\n    public void showSourceForSourceLine(String filePath, int lineNumber, boolean highlight) { }\n\n    public String getCurrSourceFilePath() { return null; }\n\n    public void setBreakpointRequest(String filePath, int lineNumber, boolean isDeferred) { }\n\n    public void clearBreakpointRequest(String filePath, int lineNumber) { }\n\n    private String readFile(String filePath, int lineNumber) {\n        try {\n//            URL url = ClassLoader.getSystemResource(filePath);\n            File file = new File(filePath);\n            if (!file.exists()) {\n                return \"ERROR: file \\\"\" + filePath + \"\\\" does not exist.\";\n            }\n            BufferedReader reader = new BufferedReader(new FileReader(file));\n            StringBuffer contents = new StringBuffer();\n            String line = reader.readLine();\n            int numLines = 0;\n            while (line != null) {\n                numLines++;\n                if (numLines < lineNumber) {\n                    currHighlightStart += line.length()+1;\n                }\n                if (numLines == lineNumber) {\n                    currHighlightEnd = currHighlightStart + line.length();\n                }\n                contents.append(line);\n                contents.append('\\n');\n                line = reader.readLine();\n            }\n            reader.close();\n            return contents.toString();\n        } catch (IOException ioe) {\n            return \"ERROR: could not read file \\\"\" + filePath + \"\\\", make sure that you have mounted /project/aop on X:\\\\\";\n        }\n    }\n\n    private void jbInit() throws Exception {\n        editor_panel.setFont(new java.awt.Font(\"DialogInput\", 1, 12));\n        editor_panel.setLayout(borderLayout1);\n        editor_panel.add(jScrollPane1, BorderLayout.CENTER);\n        jScrollPane1.getViewport().add(editorPane, null);\n    }\n}<fim_middle>// function below has no smell\n"}