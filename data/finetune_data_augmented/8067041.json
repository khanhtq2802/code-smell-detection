{"text": "<fim_prefix>\n<fim_suffix>@SuppressWarnings(\"all\")\npublic class SingleCodetemplateSyntacticSequencer extends AbstractSyntacticSequencer {\n\tprotected SingleCodetemplateGrammarAccess grammarAccess;\n\tprotected AbstractElementAlias match_Variable_WSTerminalRuleCall_1_a;\n\tprotected AbstractElementAlias match_Variable_WSTerminalRuleCall_2_1_0_1_a;\n\tprotected AbstractElementAlias match_Variable_WSTerminalRuleCall_2_1_2_a;\n\tprotected AbstractElementAlias match_Variable_WSTerminalRuleCall_2_1_4_0_a;\n\tprotected AbstractElementAlias match_Variable_WSTerminalRuleCall_2_1_4_2_a;\n\tprotected AbstractElementAlias match_Variable_WSTerminalRuleCall_2_1_4_3_1_0_a;\n\tprotected AbstractElementAlias match_Variable_WSTerminalRuleCall_2_1_4_3_1_2_a;\n\tprotected AbstractElementAlias match_Variable_WSTerminalRuleCall_2_1_4_3_2_a;\n\tprotected AbstractElementAlias match_Variable_WSTerminalRuleCall_3_a;\n\t@Inject\n\tprotected void init(IGrammarAccess access) {\n\t\tgrammarAccess = (SingleCodetemplateGrammarAccess) access;\n\t\tmatch_Variable_WSTerminalRuleCall_1_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getWSTerminalRuleCall_1());\n\t\tmatch_Variable_WSTerminalRuleCall_2_1_0_1_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_0_1());\n\t\tmatch_Variable_WSTerminalRuleCall_2_1_2_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_2());\n\t\tmatch_Variable_WSTerminalRuleCall_2_1_4_0_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_4_0());\n\t\tmatch_Variable_WSTerminalRuleCall_2_1_4_2_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_4_2());\n\t\tmatch_Variable_WSTerminalRuleCall_2_1_4_3_1_0_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_4_3_1_0());\n\t\tmatch_Variable_WSTerminalRuleCall_2_1_4_3_1_2_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_4_3_1_2());\n\t\tmatch_Variable_WSTerminalRuleCall_2_1_4_3_2_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getWSTerminalRuleCall_2_1_4_3_2());\n\t\tmatch_Variable_WSTerminalRuleCall_3_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getWSTerminalRuleCall_3());\n\t}\n\t@Override\n\tprotected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {\n\t\tif (ruleCall.getRule() == grammarAccess.getWSRule())\n\t\t\treturn getWSToken(semanticObject, ruleCall, node);\n\t\treturn \"\";\n\t}\n\t/**\n\t * terminal WS\t\t\t: (' '|'\\t'|'\\r'|'\\n')+;\n\t */\n\tprotected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {\n\t\tif (node != null)\n\t\t\treturn getTokenText(node);\n\t\treturn \" \";\n\t}\n\t@Override\n\tprotected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {\n\t\tif (transition.getAmbiguousSyntaxes().isEmpty()) return;\n\t\tList<INode> transitionNodes = collectNodes(fromNode, toNode);\n\t\tfor (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {\n\t\t\tList<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);\n\t\t\tif (match_Variable_WSTerminalRuleCall_1_a.equals(syntax))\n\t\t\t\temit_Variable_WSTerminalRuleCall_1_a(semanticObject, getLastNavigableState(), syntaxNodes);\n\t\t\telse if (match_Variable_WSTerminalRuleCall_2_1_0_1_a.equals(syntax))\n\t\t\t\temit_Variable_WSTerminalRuleCall_2_1_0_1_a(semanticObject, getLastNavigableState(), syntaxNodes);\n\t\t\telse if (match_Variable_WSTerminalRuleCall_2_1_2_a.equals(syntax))\n\t\t\t\temit_Variable_WSTerminalRuleCall_2_1_2_a(semanticObject, getLastNavigableState(), syntaxNodes);\n\t\t\telse if (match_Variable_WSTerminalRuleCall_2_1_4_0_a.equals(syntax))\n\t\t\t\temit_Variable_WSTerminalRuleCall_2_1_4_0_a(semanticObject, getLastNavigableState(), syntaxNodes);\n\t\t\telse if (match_Variable_WSTerminalRuleCall_2_1_4_2_a.equals(syntax))\n\t\t\t\temit_Variable_WSTerminalRuleCall_2_1_4_2_a(semanticObject, getLastNavigableState(), syntaxNodes);\n\t\t\telse if (match_Variable_WSTerminalRuleCall_2_1_4_3_1_0_a.equals(syntax))\n\t\t\t\temit_Variable_WSTerminalRuleCall_2_1_4_3_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);\n\t\t\telse if (match_Variable_WSTerminalRuleCall_2_1_4_3_1_2_a.equals(syntax))\n\t\t\t\temit_Variable_WSTerminalRuleCall_2_1_4_3_1_2_a(semanticObject, getLastNavigableState(), syntaxNodes);\n\t\t\telse if (match_Variable_WSTerminalRuleCall_2_1_4_3_2_a.equals(syntax))\n\t\t\t\temit_Variable_WSTerminalRuleCall_2_1_4_3_2_a(semanticObject, getLastNavigableState(), syntaxNodes);\n\t\t\telse if (match_Variable_WSTerminalRuleCall_3_a.equals(syntax))\n\t\t\t\temit_Variable_WSTerminalRuleCall_3_a(semanticObject, getLastNavigableState(), syntaxNodes);\n\t\t\telse acceptNodes(getLastNavigableState(), syntaxNodes);\n\t\t}\n\t}\n\t/**\n\t * Ambiguous syntax:\n\t *     WS*\n\t *\n\t * This ambiguous syntax occurs at:\n\t *     (rule start) '${' (ambiguity) ':' WS* type=ValidID\n\t *     (rule start) '${' (ambiguity) name=ValidID\n\t */\n\tprotected void emit_Variable_WSTerminalRuleCall_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {\n\t\tacceptNodes(transition, nodes);\n\t}\n\t/**\n\t * Ambiguous syntax:\n\t *     WS*\n\t *\n\t * This ambiguous syntax occurs at:\n\t *     name=ValidID (ambiguity) ':' WS* type=ValidID\n\t */\n\tprotected void emit_Variable_WSTerminalRuleCall_2_1_0_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {\n\t\tacceptNodes(transition, nodes);\n\t}\n\t/**\n\t * Ambiguous syntax:\n\t *     WS*\n\t *\n\t * This ambiguous syntax occurs at:\n\t *     (rule start) '${' WS* ':' (ambiguity) type=ValidID\n\t *     name=ValidID WS* ':' (ambiguity) type=ValidID\n\t */\n\tprotected void emit_Variable_WSTerminalRuleCall_2_1_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {\n\t\tacceptNodes(transition, nodes);\n\t}\n\t/**\n\t * Ambiguous syntax:\n\t *     WS*\n\t *\n\t * This ambiguous syntax occurs at:\n\t *     type=ValidID (ambiguity) expectingParameters?='('\n\t */<fim_middle>// class below has no smell\n"}