{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *******************************************************************************/\npackage org.eclipse.xtext.ui.wizard;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.eclipse.jdt.core.JavaCore;\nimport org.eclipse.xtext.ui.XtextProjectHelper;\nimport org.eclipse.xtext.ui.util.PluginProjectFactory;\nimport org.eclipse.xtext.ui.util.ProjectFactory;\n\nimport com.google.common.collect.Lists;\nimport com.google.inject.Inject;\nimport com.google.inject.Provider;\n\n/**\n * @author Sebastian Zarnekow - Initial contribution and API\n */\n<fim_suffix>public abstract class AbstractPluginProjectCreator extends AbstractProjectCreator {\n\n\t@Inject\n\tprivate Provider<PluginProjectFactory> projectFactoryProvider;\n\t\n\t@Override\n\tprotected ProjectFactory configureProjectFactory(ProjectFactory factory) {\n\t\tPluginProjectFactory result = (PluginProjectFactory) super.configureProjectFactory(factory);\n\t\t\n\t\tresult.addRequiredBundles(getRequiredBundles());\n\t\tresult.addExportedPackages(getExportedPackages());\n\t\tresult.addImportedPackages(getImportedPackages());\n\t\tresult.setActivatorClassName(getActivatorClassName());\n\t\t\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tprotected PluginProjectFactory createProjectFactory() {\n\t\treturn projectFactoryProvider.get();\n\t}\n\t\n\t/**\n     * @return the names of the exported packages. May not be <code>null</code>\n     */\n\tprotected List<String> getExportedPackages() {\n        return Collections.emptyList();\n    }\n\n\t/**\n     * @return the names of the imported packages that a new project requires. May not be <code>null</code>\n     */\n    protected List<String> getImportedPackages() {\n        return Lists.newArrayList(\n        \t\t\"org.apache.log4j\", \n        \t\t\"org.apache.commons.logging\");\n    }\n\n    /**\n     * @return the class-name of the bundle-activator or <code>null</code>\n     */\n    protected String getActivatorClassName() {\n        return null;\n    }\n\t\n    /**\n     * @return the names of the bundles that a new project requires. May not be <code>null</code>\n     */\n\tprotected List<String> getRequiredBundles() {\n\t\treturn Lists.newArrayList(\n\t\t\t\"com.ibm.icu\",\n\t\t\t\"org.eclipse.xtext\", \n\t\t\t\"org.eclipse.xtext.generator\",\n\t\t\t\"org.eclipse.xtend\",\n\t\t\t\"org.eclipse.xtend.typesystem.emf\",\n\t\t\t\"org.eclipse.xpand\", \n\t\t\t\"de.itemis.xtext.antlr;resolution:=optional\",\n\t\t\t\"org.eclipse.emf.mwe2.launch;resolution:=optional\");\n\t}\n\n\t@Override\n\tprotected String[] getProjectNatures() {\n\t\treturn new String[] {\n\t\t\tJavaCore.NATURE_ID,\n\t\t\t\"org.eclipse.pde.PluginNature\", //$NON-NLS-1$\n\t\t\tXtextProjectHelper.NATURE_ID\n\t\t};\n\t}\n\n\t@Override\n\tprotected String[] getBuilders() {\n\t\treturn new String[]{\n\t\t\tJavaCore.BUILDER_ID,\n\t\t\t\"org.eclipse.pde.ManifestBuilder\",  //$NON-NLS-1$\n\t\t\t\"org.eclipse.pde.SchemaBuilder\", //$NON-NLS-1$\n\t\t\tXtextProjectHelper.BUILDER_ID\n\t\t};\n\t}\n\n}<fim_middle>// class below has no smell\n"}