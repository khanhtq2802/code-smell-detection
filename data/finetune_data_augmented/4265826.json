{"text": "<fim_prefix>            return appendNull();\n        }\n        if (startIndex < 0 || startIndex > chars.length) {\n            throw new StringIndexOutOfBoundsException(\"Invalid startIndex: \" + length);\n        }\n        if (length < 0 || startIndex + length > chars.length) {\n            throw new StringIndexOutOfBoundsException(\"Invalid length: \" + length);\n        }\n        if (length > 0) {\n            final int len = length();\n            ensureCapacity(len + length);\n            System.arraycopy(chars, startIndex, buffer, len, length);\n            size += length;\n        }\n        return this;\n    }\n    /**\n     * Appends a boolean value to the string builder.\n     *\n     * @param value\n     *            the value to append\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder append(final boolean value) {\n        if (value) {\n            ensureCapacity(size + TRUE_STRING_SIZE);\n            buffer[size++] = 't';\n            buffer[size++] = 'r';\n            buffer[size++] = 'u';\n            buffer[size++] = 'e';\n        } else {\n            ensureCapacity(size + FALSE_STRING_SIZE);\n            buffer[size++] = 'f';\n            buffer[size++] = 'a';\n            buffer[size++] = 'l';\n            buffer[size++] = 's';\n            buffer[size++] = 'e';\n        }\n        return this;\n    }\n    /**\n     * Appends a char value to the string builder.\n     *\n     * @param ch\n     *            the value to append\n     * @return this, to enable chaining\n     */\n    @Override\n    public TextStringBuilder append(final char ch) {\n        final int len = length();\n        ensureCapacity(len + 1);\n        buffer[size++] = ch;\n        return this;\n    }\n    /**\n     * Appends an int value to the string builder using <code>String.valueOf</code>.\n     *\n     * @param value\n     *            the value to append\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder append(final int value) {\n        return append(String.valueOf(value));\n    }\n    /**\n     * Appends a long value to the string builder using <code>String.valueOf</code>.\n     *\n     * @param value\n     *            the value to append\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder append(final long value) {\n        return append(String.valueOf(value));\n    }\n    /**\n     * Appends a float value to the string builder using <code>String.valueOf</code>.\n     *\n     * @param value\n     *            the value to append\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder append(final float value) {\n        return append(String.valueOf(value));\n    }\n    /**\n     * Appends a double value to the string builder using <code>String.valueOf</code>.\n     *\n     * @param value\n     *            the value to append\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder append(final double value) {\n        return append(String.valueOf(value));\n    }\n    // -----------------------------------------------------------------------\n    /**\n     * Appends an object followed by a new line to this string builder. Appending null will call {@link #appendNull()}.\n     *\n     * @param obj\n     *            the object to append\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder appendln(final Object obj) {\n        return append(obj).appendNewLine();\n    }\n    /**\n     * Appends a string followed by a new line to this string builder. Appending null will call {@link #appendNull()}.\n     *\n     * @param str\n     *            the string to append\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder appendln(final String str) {\n        return append(str).appendNewLine();\n    }\n    /**\n     * Appends part of a string followed by a new line to this string builder. Appending null will call\n     * {@link #appendNull()}.\n     *\n     * @param str\n     *            the string to append\n     * @param startIndex\n     *            the start index, inclusive, must be valid\n     * @param length\n     *            the length to append, must be valid\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder appendln(final String str, final int startIndex, final int length) {\n        return append(str, startIndex, length).appendNewLine();\n    }\n    /**\n     * Calls {@link String#format(String, Object...)} and appends the result.\n     *\n     * @param format\n     *            the format string\n     * @param objs\n     *            the objects to use in the format string\n     * @return {@code this} to enable chaining\n     * @see String#format(String, Object...)\n     */\n    public TextStringBuilder appendln(final String format, final Object... objs) {\n        return append(format, objs).appendNewLine();\n    }\n    /**\n     * Appends a string buffer followed by a new line to this string builder. Appending null will call\n     * {@link #appendNull()}.\n     *\n     * @param str\n     *            the string buffer to append\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder appendln(final StringBuffer str) {\n        return append(str).appendNewLine();\n    }\n    /**\n     * Appends a string builder followed by a new line to this string builder. Appending null will call\n     * {@link #appendNull()}.\n     *\n     * @param str\n     *            the string builder to append\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder appendln(final StringBuilder str) {\n        return append(str).appendNewLine();\n    }\n    /**\n     * Appends part of a string builder followed by a new line to this string builder. Appending null will call\n     * {@link #appendNull()}.\n     *\n     * @param str\n     *            the string builder to append\n     * @param startIndex\n     *            the start index, inclusive, must be valid\n     * @param length\n     *            the length to append, must be valid\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder appendln(final StringBuilder str, final int startIndex, final int length) {\n        return append(str, startIndex, length).appendNewLine();\n    }\n    /**\n     * Appends part of a string buffer followed by a new line to this string builder. Appending null will call\n     * {@link #appendNull()}.\n     *\n     * @param str\n     *            the string to append\n     * @param startIndex\n     *            the start index, inclusive, must be valid\n     * @param length\n     *            the length to append, must be valid\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder appendln(final StringBuffer str, final int startIndex, final int length) {\n        return append(str, startIndex, length).appendNewLine();\n    }\n    /**\n     * Appends another string builder followed by a new line to this string builder. Appending null will call\n     * {@link #appendNull()}.\n     *\n     * @param str\n     *            the string builder to append\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder appendln(final TextStringBuilder str) {\n        return append(str).appendNewLine();\n    }\n    /**\n     * Appends part of a string builder followed by a new line to this string builder. Appending null will call\n     * {@link #appendNull()}.\n     *\n     * @param str\n     *            the string to append\n     * @param startIndex\n     *            the start index, inclusive, must be valid\n     * @param length\n     *            the length to append, must be valid\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder appendln(final TextStringBuilder str, final int startIndex, final int length) {\n        return append(str, startIndex, length).appendNewLine();\n    }\n    /**\n     * Appends a char array followed by a new line to the string builder. Appending null will call\n     * {@link #appendNull()}.\n     *\n     * @param chars\n     *            the char array to append\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder appendln(final char[] chars) {\n        return append(chars).appendNewLine();\n    }\n    /**\n     * Appends a char array followed by a new line to the string builder. Appending null will call\n     * {@link #appendNull()}.\n     *\n     * @param chars\n     *            the char array to append\n     * @param startIndex\n     *            the start index, inclusive, must be valid\n     * @param length\n     *            the length to append, must be valid\n     * @return this, to enable chaining\n     */\n    public TextStringBuilder appendln(final char[] chars, final int startIndex, final int length) {\n        return append(chars, startIndex, length).appendNewLine();\n    }\n    /**\n     * Appends a boolean value followed by a new line to the string builder.\n     *\n     * @param value\n     *            the value to append\n     * @return this, to enable chaining\n     */\n<fim_suffix>    public TextStringBuilder appendln(final boolean value) {\n        return append(value).appendNewLine();\n    }<fim_middle>// function below has no smell\n"}