{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.accessors;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.dataflow.data.nontagged.serde.AIntervalSerializerDeserializer;\nimport org.apache.asterix.formats.nontagged.SerializerDeserializerProvider;\nimport org.apache.asterix.om.base.ADateTime;\nimport org.apache.asterix.om.base.AMutableDateTime;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.om.types.BuiltinType;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.asterix.runtime.exceptions.InvalidDataFormatException;\nimport org.apache.asterix.runtime.exceptions.TypeMismatchException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.dataflow.value.ISerializerDeserializer;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.data.std.api.IPointable;\nimport org.apache.hyracks.data.std.primitive.VoidPointable;\nimport org.apache.hyracks.data.std.util.ArrayBackedValueStorage;\nimport org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference;\n\n<fim_suffix>public class TemporalIntervalStartDatetimeAccessor extends AbstractScalarFunctionDynamicDescriptor {\n    private static final long serialVersionUID = 1L;\n    private static final FunctionIdentifier FID = BuiltinFunctions.ACCESSOR_TEMPORAL_INTERVAL_START_DATETIME;\n    public static final IFunctionDescriptorFactory FACTORY = new IFunctionDescriptorFactory() {\n\n        @Override\n        public IFunctionDescriptor createFunctionDescriptor() {\n            return new TemporalIntervalStartDatetimeAccessor();\n        }\n    };\n\n    @Override\n    public IScalarEvaluatorFactory createEvaluatorFactory(final IScalarEvaluatorFactory[] args) {\n        return new IScalarEvaluatorFactory() {\n            private static final long serialVersionUID = 1L;\n\n            @Override\n            public IScalarEvaluator createScalarEvaluator(IHyracksTaskContext ctx) throws HyracksDataException {\n                return new IScalarEvaluator() {\n                    private final ArrayBackedValueStorage resultStorage = new ArrayBackedValueStorage();\n                    private final DataOutput out = resultStorage.getDataOutput();\n                    private final IPointable argPtr = new VoidPointable();\n                    private final IScalarEvaluator eval = args[0].createScalarEvaluator(ctx);\n\n                    // possible output\n                    @SuppressWarnings(\"unchecked\")\n                    private final ISerializerDeserializer<ADateTime> datetimeSerde =\n                            SerializerDeserializerProvider.INSTANCE.getSerializerDeserializer(BuiltinType.ADATETIME);\n                    private final AMutableDateTime aDateTime = new AMutableDateTime(0);\n\n                    @Override\n                    public void evaluate(IFrameTupleReference tuple, IPointable result) throws HyracksDataException {\n                        eval.evaluate(tuple, argPtr);\n                        byte[] bytes = argPtr.getByteArray();\n                        int startOffset = argPtr.getStartOffset();\n\n                        resultStorage.reset();\n                        try {\n                            if (bytes[startOffset] == ATypeTag.SERIALIZED_INTERVAL_TYPE_TAG) {\n                                byte timeType =\n                                        AIntervalSerializerDeserializer.getIntervalTimeType(bytes, startOffset + 1);\n                                long startTime =\n                                        AIntervalSerializerDeserializer.getIntervalStart(bytes, startOffset + 1);\n                                if (timeType == ATypeTag.SERIALIZED_DATETIME_TYPE_TAG) {\n                                    aDateTime.setValue(startTime);\n                                    datetimeSerde.serialize(aDateTime, out);\n                                } else {\n                                    throw new InvalidDataFormatException(sourceLoc, getIdentifier(),\n                                            ATypeTag.SERIALIZED_INTERVAL_TYPE_TAG);\n                                }\n                            } else {\n                                throw new TypeMismatchException(sourceLoc, getIdentifier(), 0, bytes[startOffset],\n                                        ATypeTag.SERIALIZED_INTERVAL_TYPE_TAG);\n                            }\n                        } catch (IOException e) {\n                            throw HyracksDataException.create(e);\n                        }\n                        result.set(resultStorage);\n                    }\n                };\n            }\n        };\n    }\n\n    /* (non-Javadoc)\n     * @see org.apache.asterix.om.functions.AbstractFunctionDescriptor#getIdentifier()\n     */\n    @Override\n    public FunctionIdentifier getIdentifier() {\n        return FID;\n    }\n\n}<fim_middle>// class below has no smell\n"}