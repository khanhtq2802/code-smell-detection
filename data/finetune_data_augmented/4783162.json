{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.rya.accumulo.mr;\nimport org.apache.accumulo.core.client.Instance;\nimport org.apache.accumulo.core.client.mapreduce.InputFormatBase;\nimport org.apache.accumulo.core.client.security.tokens.AuthenticationToken;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.mapreduce.InputSplit;\nimport org.apache.hadoop.mapreduce.JobContext;\nimport org.apache.hadoop.mapreduce.RecordReader;\nimport org.apache.hadoop.mapreduce.TaskAttemptContext;\nimport org.apache.rya.api.RdfCloudTripleStoreConstants.TABLE_LAYOUT;\nimport org.apache.rya.rdftriplestore.utils.RdfFormatUtils;\nimport org.eclipse.rdf4j.model.ValueFactory;\nimport org.eclipse.rdf4j.model.impl.SimpleValueFactory;\nimport org.eclipse.rdf4j.rio.RDFFormat;\n/**\n * Contains constants and static methods for interacting with a\n * {@link Configuration} and handling options likely to be relevant to Rya\n * MapReduce jobs. Defines constant property names associated with Accumulo and\n * Rya options, and some convenience methods to get and set these properties\n * with respect to a given Configuration.\n */\npublic class MRUtils {\n    /**\n     * Property name for the name of a MapReduce job.\n     */\n    public static final String JOB_NAME_PROP = \"mapred.job.name\";\n    /**\n     * Property name for the Accumulo username.\n     */\n    public static final String AC_USERNAME_PROP = \"ac.username\";\n    /**\n     * Property name for the Accumulo password.\n     */\n    public static final String AC_PWD_PROP = \"ac.pwd\";\n    /**\n     * Property name for the list of zookeepers.\n     */\n    public static final String AC_ZK_PROP = \"ac.zk\";\n    /**\n     * Property name for the Accumulo instance name.\n     */\n    public static final String AC_INSTANCE_PROP = \"ac.instance\";\n    /**\n     * Property name for whether to run against a mock Accumulo instance.\n     */\n    public static final String AC_MOCK_PROP = \"ac.mock\";\n    /**\n     * Property name for TTL; allows using an age-off filter on Accumulo input.\n     */\n    public static final String AC_TTL_PROP = \"ac.ttl\";\n    /**\n     * Property name for scan authorizations when reading data from Accumulo.\n     */\n    public static final String AC_AUTH_PROP = \"ac.auth\";\n    /**\n     * Property name for default visibility when writing data to Accumulo.\n     */\n    public static final String AC_CV_PROP = \"ac.cv\";\n    /**\n     * Property name for whether to read Accumulo data directly from HDFS\n     * as opposed to through Accumulo itself.\n     */\n    public static final String AC_HDFS_INPUT_PROP = \"ac.hdfsinput\";\n    /**\n     * Property name for the table layout to use when reading data from Rya.\n     */\n    public static final String TABLE_LAYOUT_PROP = \"rdf.tablelayout\";\n    /**\n     * Property name for the Rya table prefix, identifying the Rya\n     * instance to work with.\n     */\n    public static final String TABLE_PREFIX_PROPERTY = \"rdf.tablePrefix\";\n    /**\n     * Property name for the RDF serialization format to use, when using RDF\n     * files.\n     */\n    public static final String FORMAT_PROP = \"rdf.format\";\n    /**\n     * Property name for a file input path, if using file input.\n     */\n    public static final String INPUT_PATH = \"input\";\n    /**\n     * Property name for specifying a default named graph to use when writing\n     * new statements.\n     */\n    public static final String NAMED_GRAPH_PROP = \"rdf.graph\";\n    public static final String AC_TABLE_PROP = \"ac.table\";\n    public static final String HADOOP_IO_SORT_MB = \"io.sort.mb\";\n    public static final ValueFactory VF = SimpleValueFactory.getInstance();\n    /**\n     * Gets the TTL from a given Configuration.\n     * @param conf  Configuration containing MapReduce tool options.\n     * @return  The TTL that will be applied as an age-off filter for Accumulo\n     *          input data, or null if not set.\n     */\n    public static String getACTtl(Configuration conf) {\n        return conf.get(AC_TTL_PROP);\n    }\n    /**\n     * Gets the username from a given Configuration.\n     * @param conf  Configuration containing MapReduce tool options.\n     * @return  The configured Accumulo username, or null if not set.\n     */\n    public static String getACUserName(Configuration conf) {\n        return conf.get(AC_USERNAME_PROP);\n    }\n    /**\n     * Gets the password from a given Configuration.\n     * @param conf  Configuration containing MapReduce tool options.\n     * @return  The configured Accumulo password, or null if not set.\n     */\n    public static String getACPwd(Configuration conf) {\n        return conf.get(AC_PWD_PROP);\n    }\n    /**\n     * Gets the zookeepers from a given Configuration.\n     * @param conf  Configuration containing MapReduce tool options.\n     * @return  The configured zookeeper list, or null if not set.\n     */\n<fim_suffix>    public static String getACZK(Configuration conf) {\n        return conf.get(AC_ZK_PROP);\n    }\n    /**\n     * Gets the instance name from a given Configuration.\n     * @param conf  Configuration containing MapReduce tool options.\n     * @return  The configured Accumulo instance name, or null if not set.\n     */\n    public static String getACInstance(Configuration conf) {\n        return conf.get(AC_INSTANCE_PROP);\n    }\n    /**\n     * Gets whether to use a mock instance from a given Configuration.\n     * @param conf          Configuration containing MapReduce tool options.\n     * @param defaultValue  Default choice if the mock property hasn't been\n     *                      explicitly set in the Configuration.\n     * @return  True if a mock instance should be used, false to connect to\n     *          a running Accumulo.\n     */\n    public static boolean getACMock(Configuration conf, boolean defaultValue) {\n        return conf.getBoolean(AC_MOCK_PROP, defaultValue);\n    }\n    /**\n     * Gets the table prefix from a given Configuration.\n     * @param conf  Configuration containing MapReduce tool options.\n     * @return  The configured Rya table prefix, or null if not set.\n     */\n    public static String getTablePrefix(Configuration conf) {\n        return conf.get(TABLE_PREFIX_PROPERTY);\n    }\n    /**\n     * Gets the table layout that determines which Rya table to scan for input.\n     * @param   conf            Configuration containing MapReduce tool options.\n     * @param   defaultLayout   The layout to use if the Configuration doesn't\n     *                          specify any layout.\n     * @return  The configured layout to use for reading statements from Rya.\n     */\n    public static TABLE_LAYOUT getTableLayout(Configuration conf, TABLE_LAYOUT defaultLayout) {\n        return TABLE_LAYOUT.valueOf(conf.get(TABLE_LAYOUT_PROP, defaultLayout.toString()));\n    }\n    /**\n     * Gets the RDF serialization format to use for parsing RDF files.\n     * @param   conf    Configuration containing MapReduce tool options.\n     * @return  The configured RDFFormat, or null if not set.\n     */\n    public static RDFFormat getRDFFormat(Configuration conf) {\n        return RdfFormatUtils.getRdfFormatFromName(conf.get(FORMAT_PROP));\n    }\n    /**\n     * Sets the username in the given Configuration.\n     * @param conf  Configuration containing MapReduce tool options.\n     * @param str   Accumulo username, used for input and/or output.\n     */\n    public static void setACUserName(Configuration conf, String str) {\n        conf.set(AC_USERNAME_PROP, str);\n    }\n    /**\n     * Sets the password in the given Configuration.\n     * @param conf  Configuration containing MapReduce tool options.\n     * @param str   Accumulo password string, used for input and/or output.\n     */\n    public static void setACPwd(Configuration conf, String str) {\n        conf.set(AC_PWD_PROP, str);\n    }\n    /**<fim_middle>// function below has no smell\n"}