{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2004 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *  Actuate Corporation  - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.birt.report.model.api;\nimport org.eclipse.birt.report.model.api.activity.SemanticException;\nimport org.eclipse.birt.report.model.api.elements.structures.DateTimeFormatValue;\nimport org.eclipse.birt.report.model.api.elements.structures.NumberFormatValue;\nimport org.eclipse.birt.report.model.api.elements.structures.StringFormatValue;\nimport org.eclipse.birt.report.model.api.elements.structures.TOC;\nimport org.eclipse.birt.report.model.core.MemberRef;\nimport org.eclipse.birt.report.model.core.Structure;\nimport org.eclipse.birt.report.model.core.StructureContext;\nimport org.eclipse.birt.report.model.elements.Style;\nimport org.eclipse.birt.report.model.metadata.ElementRefValue;\nimport org.eclipse.birt.report.model.util.StructureContextUtil;\n/**\n * Represents an \"TOC\" attached to an element.Obtain an instance of this class\n * by calling the <code>getTOCHandle</code> method on the handle of an element\n * that defines an action.\n * \n */\npublic class TOCHandle extends StructureHandle\n{\n\t/**\n\t * Default TOC style's prefix name.\n\t */\n\tpublic static final String defaultTOCPrefixName = \"TOC-level-\"; //$NON-NLS-1$\n\t/**\n\t * Construct an handle to deal with the toc structure.\n\t * \n\t * @param element\n\t *            the element that defined the action.\n\t * @param context\n\t *            context to the toc property.\n\t */\n\tpublic TOCHandle( DesignElementHandle element, StructureContext context )\n\t{\n\t\tsuper( element, context );\n\t}\n\t/**\n\t * Construct an handle to deal with the toc structure.\n\t * \n\t * @param element\n\t *            the element that defined the action.\n\t * @param context\n\t *            context to the toc property\n\t * @deprecated\n\t */\n\tpublic TOCHandle( DesignElementHandle element, MemberRef context )\n\t{\n\t\tsuper( element, context );\n\t}\n\t/**\n\t * Gets expression of TOC.\n\t * \n\t * @return expression of TOC.\n\t */\n\tpublic String getExpression( )\n\t{\n\t\treturn getStringProperty( TOC.TOC_EXPRESSION );\n\t}\n\t/**\n\t * Sets expression of TOC.\n\t * \n\t * @param expression\n\t *            expression of TOC\n\t * @throws SemanticException\n\t *             semantic exception\n\t */\n\tpublic void setExpression( String expression ) throws SemanticException\n\t{\n\t\tsetProperty( TOC.TOC_EXPRESSION, expression );\n\t}\n\t/**\n\t * Gets style of TOC.\n\t * \n\t * @return style name of TOC\n\t */\n\tpublic String getStyleName( )\n\t{\n\t\tStyleHandle handle = getStyle( );\n\t\tif ( handle == null )\n\t\t\treturn null;\n\t\treturn handle.getName( );\n\t}\n\t/**\n\t * Sets style of TOC.\n\t * \n\t * @param styleName\n\t *            style name\n\t * @throws SemanticException\n\t */\n\tpublic void setStyleName( String styleName ) throws SemanticException\n\t{\n\t\tsetProperty( TOC.TOC_STYLE, styleName );\n\t}\n\t/**\n\t * Gets TOC style.\n\t * \n\t * @return style handle.\n\t */\n\tprivate StyleHandle getStyle( )\n\t{\n\t\tObject value = ( (Structure) getStructure( ) ).getLocalProperty(\n\t\t\t\tgetModule( ), TOC.TOC_STYLE );\n\t\tif ( value instanceof ElementRefValue )\n\t\t{\n\t\t\tElementRefValue refValue = (ElementRefValue) value;\n\t\t\tif ( refValue.isResolved( ) )\n\t\t\t{\n\t\t\t\tStyle style = (Style) refValue.getElement( );\n\t\t\t\treturn (SharedStyleHandle) style.getHandle( style.getRoot( ) );\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Returns a handle to work with the style properties of toc element. Use a\n\t * style handle to work with the specific getter/setter methods for each\n\t * style property. The style handle is not necessary to work with style\n\t * properties generically.\n\t * <p>\n\t * Note a key difference between this method and the\n\t * <code>getStyle( )</code> method. This method returns a handle to the\n\t * <em>this</em> element. The <code>getStyle( )</code> method returns a\n\t * handle to the shared style, if any, that this element references.\n\t * \n\t * @return a style handle to work with the style properties of this element.\n\t *         Returns <code>null</code> if this element does not have style\n\t *         properties.\n\t */\n\tpublic PrivateStyleHandle getPrivateStyle( )\n\t{\n\t\treturn new PrivateStyleHandle( getModule( ), getElement( ) );\n\t}\n\t/**\n\t * Gets border-top-style property.\n\t * \n\t * @return border-top-style property\n\t */\n\tpublic String getBorderTopStyle( )\n\t{\n\t\tObject value = getProperty( TOC.BORDER_TOP_STYLE_MEMBER );\n\t\tif ( value == null )\n\t\t{\n\t\t\tStyleHandle style = getStyle( );\n\t\t\tif ( style == null )\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn style.getBorderTopStyle( );\n\t\t}\n\t\treturn (String) value;\n\t}\n\t/**\n\t * Gets border-top-width property.\n\t * \n\t * @return border-top-width property\n\t */\n\tpublic DimensionHandle getBorderTopWidth( )\n\t{\n\t\tObject value = getProperty( TOC.BORDER_TOP_WIDTH_MEMBER );\n\t\tif ( value == null )\n\t\t{\n\t\t\tStyleHandle style = getStyle( );\n\t\t\tif ( style == null )\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn style.getBorderTopWidth( );\n\t\t}\n\t\treturn doGetDimensionHandle( TOC.BORDER_TOP_WIDTH_MEMBER );\n\t}\n\t/**\n\t * Returns a dimension handle for a member.\n\t * \n\t * @param memberName\n\t *            the member name.\n\t * @return A DimensionHandle for the given member.\n\t */\n\tprivate DimensionHandle doGetDimensionHandle( String memberName )\n\t{\n\t\treturn new DimensionHandle( getElementHandle( ), StructureContextUtil\n\t\t\t\t.createStructureContext( this, memberName ) );\n\t}\n\t/**\n\t * Returns a color handle for a given member.\n\t * \n\t * @param memberName\n\t *            the member name\n\t * @return a ColorHandle for the given member\n\t */\n<fim_suffix>\tprivate ColorHandle doGetColorHandle( String memberName )\n\t{\n\t\treturn new ColorHandle( getElementHandle( ), StructureContextUtil\n\t\t\t\t.createStructureContext( this, memberName ) );\n\t}\n\t/**\n\t * Gets border-top-color property.\n\t * \n\t * @return border-top-color property\n\t */\n\tpublic ColorHandle getBorderTopColor( )\n\t{\n\t\tObject value = getProperty( TOC.BORDER_TOP_COLOR_MEMBER );\n\t\tif ( value == null )\n\t\t{\n\t\t\tStyleHandle style = getStyle( );\n\t\t\tif ( style == null )\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn style.getBorderTopColor( );\n\t\t}\n\t\treturn doGetColorHandle( TOC.BORDER_TOP_COLOR_MEMBER );\n\t}\n\t/**\n\t * Gets border-left-style property.\n\t * \n\t * @return border-left-style property\n\t */\n\tpublic String getBorderLeftStyle( )\n\t{\n\t\tObject value = getProperty( TOC.BORDER_LEFT_STYLE_MEMBER );\n\t\tif ( value == null )\n\t\t{\n\t\t\tStyleHandle style = getStyle( );\n\t\t\tif ( style == null )\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn style.getBorderLeftStyle( );\n\t\t}\n\t\treturn (String) value;\n\t}\n\t/**\n\t * Gets border-left-width property.\n\t * \n\t * @return border-left-width property\n\t */<fim_middle>// function below has no smell\n"}