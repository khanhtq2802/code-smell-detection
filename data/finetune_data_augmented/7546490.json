{"text": "<fim_prefix>package org.springframework.samples.mvc.async;\n\nimport java.util.Queue;\nimport java.util.concurrent.ConcurrentLinkedQueue;\n\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.context.request.async.DeferredResult;\nimport org.springframework.web.servlet.ModelAndView;\n\n@Controller\n@RequestMapping(\"/async\")\npublic class DeferredResultController {\n\n\tprivate final Queue<DeferredResult<String>> responseBodyQueue = new ConcurrentLinkedQueue<>();\n\n\tprivate final Queue<DeferredResult<ModelAndView>> mavQueue = new ConcurrentLinkedQueue<>();\n\n\tprivate final Queue<DeferredResult<String>> exceptionQueue = new ConcurrentLinkedQueue<>();\n\n\n\t@GetMapping(\"/deferred-result/response-body\")\n\tpublic @ResponseBody DeferredResult<String> deferredResult() {\n\t\tDeferredResult<String> result = new DeferredResult<>();\n\t\tthis.responseBodyQueue.add(result);\n\t\treturn result;\n\t}\n\n\t@GetMapping(\"/deferred-result/model-and-view\")\n\tpublic DeferredResult<ModelAndView> deferredResultWithView() {\n\t\tDeferredResult<ModelAndView> result = new DeferredResult<>();\n\t\tthis.mavQueue.add(result);\n\t\treturn result;\n\t}\n\n\t@GetMapping(\"/deferred-result/exception\")\n\tpublic @ResponseBody DeferredResult<String> deferredResultWithException() {\n\t\tDeferredResult<String> result = new DeferredResult<>();\n\t\tthis.exceptionQueue.add(result);\n\t\treturn result;\n\t}\n\n\t@GetMapping(\"/deferred-result/timeout-value\")\n\tpublic @ResponseBody DeferredResult<String> deferredResultWithTimeoutValue() {\n\n\t\t// Provide a default result in case of timeout and override the timeout value\n\t\t// set in src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml\n\n\t\treturn new DeferredResult<>(1000L, \"Deferred result after timeout\");\n\t}\n\n<fim_suffix>\t@Scheduled(fixedRate=2000)\n\tpublic void processQueues() {\n\t\tfor (DeferredResult<String> result : this.responseBodyQueue) {\n\t\t\tresult.setResult(\"Deferred result\");\n\t\t\tthis.responseBodyQueue.remove(result);\n\t\t}\n\t\tfor (DeferredResult<String> result : this.exceptionQueue) {\n\t\t\tresult.setErrorResult(new IllegalStateException(\"DeferredResult error\"));\n\t\t\tthis.exceptionQueue.remove(result);\n\t\t}\n\t\tfor (DeferredResult<ModelAndView> result : this.mavQueue) {\n\t\t\tresult.setResult(new ModelAndView(\"views/html\", \"javaBean\", new JavaBean(\"bar\", \"apple\")));\n\t\t\tthis.mavQueue.remove(result);\n\t\t}\n\t}\n\n\t@ExceptionHandler\n\t@ResponseBody\n\tpublic String handleException(IllegalStateException ex) {\n\t\treturn \"Handled exception: \" + ex.getMessage();\n\t}\n\n}<fim_middle>// function below has no smell\n"}