{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.artemis.core.server.impl;\n\nimport java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\nimport java.util.function.Consumer;\n\nimport org.apache.activemq.artemis.api.core.ActiveMQException;\nimport org.apache.activemq.artemis.api.core.Message;\nimport org.apache.activemq.artemis.api.core.SimpleString;\nimport org.apache.activemq.artemis.core.server.MessageReference;\nimport org.apache.activemq.artemis.core.server.Queue;\nimport org.apache.activemq.artemis.core.server.ServerConsumer;\nimport org.apache.activemq.artemis.core.transaction.Transaction;\nimport org.apache.activemq.artemis.utils.collections.LinkedListImpl;\n\n/**\n * Implementation of a MessageReference\n */\npublic class MessageReferenceImpl extends LinkedListImpl.Node<MessageReferenceImpl> implements MessageReference, Runnable {\n\n   private static final AtomicIntegerFieldUpdater<MessageReferenceImpl> DELIVERY_COUNT_UPDATER = AtomicIntegerFieldUpdater\n      .newUpdater(MessageReferenceImpl.class, \"deliveryCount\");\n\n   @SuppressWarnings(\"unused\")\n   private volatile int deliveryCount = 0;\n\n   private volatile int persistedCount;\n\n   private volatile long scheduledDeliveryTime;\n\n   private final Message message;\n\n   private final Queue queue;\n\n   private long consumerID;\n\n   private boolean hasConsumerID = false;\n\n   private boolean alreadyAcked;\n\n   private Object protocolData;\n\n   private Consumer<? super MessageReference> onDelivery;\n\n   // Static --------------------------------------------------------\n\n   private static final int memoryOffset = 64;\n\n   // Constructors --------------------------------------------------\n\n   public MessageReferenceImpl() {\n      queue = null;\n\n      message = null;\n   }\n\n   public MessageReferenceImpl(final MessageReferenceImpl other, final Queue queue) {\n      DELIVERY_COUNT_UPDATER.set(this, other.getDeliveryCount());\n\n      scheduledDeliveryTime = other.scheduledDeliveryTime;\n\n      message = other.message;\n\n      this.queue = queue;\n   }\n\n   public MessageReferenceImpl(final Message message, final Queue queue) {\n      this.message = message;\n\n      this.queue = queue;\n   }\n\n   // MessageReference implementation -------------------------------\n\n   @Override\n   public void onDelivery(Consumer<? super MessageReference> onDelivery) {\n      assert this.onDelivery == null;\n      this.onDelivery = onDelivery;\n   }\n\n   /**\n    * It will call {@link Consumer#accept(Object)} on {@code this} of the {@link Consumer} registered in {@link #onDelivery(Consumer)}, if any.\n    */\n   @Override\n   public void run() {\n      final Consumer<? super MessageReference> onDelivery = this.onDelivery;\n      if (onDelivery != null) {\n         try {\n            onDelivery.accept(this);\n         } finally {\n            this.onDelivery = null;\n         }\n      }\n   }\n\n   @Override\n   public Object getProtocolData() {\n      return protocolData;\n   }\n\n   @Override\n   public void setProtocolData(Object protocolData) {\n      this.protocolData = protocolData;\n   }\n\n   /**\n    * @return the persistedCount\n    */\n   @Override\n   public int getPersistedCount() {\n      return persistedCount;\n   }\n\n   /**\n    * @param persistedCount the persistedCount to set\n    */\n   @Override\n   public void setPersistedCount(int persistedCount) {\n      this.persistedCount = persistedCount;\n   }\n\n<fim_suffix>   @Override\n   public MessageReference copy(final Queue queue) {\n      return new MessageReferenceImpl(this, queue);\n   }\n\n   public static int getMemoryEstimate() {\n      return MessageReferenceImpl.memoryOffset;\n   }\n\n   @Override\n   public int getDeliveryCount() {\n      return DELIVERY_COUNT_UPDATER.get(this);\n   }\n\n   @Override\n   public void setDeliveryCount(final int deliveryCount) {\n      DELIVERY_COUNT_UPDATER.set(this, deliveryCount);\n      this.persistedCount = deliveryCount;\n   }\n\n   @Override\n   public void incrementDeliveryCount() {\n      DELIVERY_COUNT_UPDATER.incrementAndGet(this);\n   }\n\n   @Override\n   public void decrementDeliveryCount() {\n      DELIVERY_COUNT_UPDATER.decrementAndGet(this);\n   }\n\n   @Override\n   public long getScheduledDeliveryTime() {\n      return scheduledDeliveryTime;\n   }\n\n   @Override\n   public void setScheduledDeliveryTime(final long scheduledDeliveryTime) {\n      this.scheduledDeliveryTime = scheduledDeliveryTime;\n   }\n\n   @Override\n   public Message getMessage() {\n      return message;\n   }\n\n   @Override\n   public long getMessageID() {\n      return getMessage().getMessageID();\n   }\n\n   @Override\n   public Queue getQueue() {\n      return queue;\n   }\n\n   @Override\n   public boolean isDurable() {\n      return getMessage().isDurable();\n   }\n\n   @Override\n   public void handled() {\n      queue.referenceHandled(this);\n   }\n\n   @Override\n   public void setAlreadyAcked() {\n      alreadyAcked = true;\n   }\n\n   @Override\n   public boolean isAlreadyAcked() {\n      return alreadyAcked;\n   }\n\n   @Override\n   public boolean isPaged() {\n      return false;\n   }\n\n   @Override\n   public void acknowledge() throws Exception {\n      this.acknowledge(null);\n   }\n\n   @Override\n   public void acknowledge(Transaction tx) throws Exception {\n      acknowledge(tx, null);\n   }\n\n   @Override\n   public void acknowledge(Transaction tx, ServerConsumer consumer) throws Exception {\n      acknowledge(tx, AckReason.NORMAL, consumer);\n   }\n\n   @Override\n   public void acknowledge(Transaction tx, AckReason reason, ServerConsumer consumer) throws Exception {\n      if (tx == null) {\n         getQueue().acknowledge(this, reason, consumer);\n      } else {\n         getQueue().acknowledge(tx, this, reason, consumer);\n      }\n   }\n\n   @Override\n   public void emptyConsumerID() {\n      this.hasConsumerID = false;\n   }\n\n   @Override\n   public void setConsumerId(long consumerID) {\n      this.hasConsumerID = true;\n      this.consumerID = consumerID;\n   }\n\n   @Override\n   public boolean hasConsumerId() {\n      return hasConsumerID;\n   }\n\n   @Override\n   public long getConsumerId() {\n      if (!this.hasConsumerID) {\n         throw new IllegalStateException(\"consumerID isn't specified: please check hasConsumerId first\");\n      }\n      return this.consumerID;\n   }\n\n   @Override\n   public SimpleString getLastValueProperty() {\n      SimpleString lastValue = message.getSimpleStringProperty(queue.getLastValueKey());\n      if (lastValue == null) {\n         lastValue = message.getLastValueProperty();\n      }\n      return lastValue;\n   }\n\n   @Override\n   public int getMessageMemoryEstimate() {\n      return message.getMemoryEstimate();\n   }\n\n   @Override\n   public String toString() {\n      return \"Reference[\" + getMessage().getMessageID() +\n         \"]:\" +\n         (getMessage().isDurable() ? \"RELIABLE\" : \"NON-RELIABLE\") +\n         \":\" +\n         getMessage();\n   }\n\n   @Override\n   public boolean equals(Object other) {\n      if (this == other) {\n         return true;\n      }\n\n      if (other instanceof MessageReferenceImpl) {\n         MessageReferenceImpl reference = (MessageReferenceImpl) other;\n\n         if (this.getMessage().equals(reference.getMessage()))\n            return true;\n      }\n\n      return false;\n   }\n\n   @Override\n   public int hashCode() {\n      return this.getMessage().hashCode();\n   }\n\n   @Override\n   public long getPersistentSize() throws ActiveMQException {\n      return this.getMessage().getPersistentSize();\n   }\n}<fim_middle>// function below has no smell\n"}