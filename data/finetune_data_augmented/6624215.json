{"text": "<fim_prefix>/*\n * Copyright 2017 Esri.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\npackage com.esri.samples.featurelayers.feature_layer_rendering_mode_map;\n\nimport java.util.Arrays;\n\nimport javafx.animation.Animation;\nimport javafx.animation.KeyFrame;\nimport javafx.animation.Timeline;\nimport javafx.application.Application;\nimport javafx.geometry.Orientation;\nimport javafx.scene.Scene;\nimport javafx.scene.control.SplitPane;\nimport javafx.stage.Stage;\nimport javafx.util.Duration;\n\nimport com.esri.arcgisruntime.data.ServiceFeatureTable;\nimport com.esri.arcgisruntime.geometry.Point;\nimport com.esri.arcgisruntime.geometry.SpatialReferences;\nimport com.esri.arcgisruntime.layers.FeatureLayer;\nimport com.esri.arcgisruntime.mapping.ArcGISMap;\nimport com.esri.arcgisruntime.mapping.Viewpoint;\nimport com.esri.arcgisruntime.mapping.view.MapView;\n\npublic class FeatureLayerRenderingModeMapSample extends Application {\n\n  private MapView mapViewTop;\n  private MapView mapViewBottom;\n  private Timeline timeline;\n\n<fim_suffix>  @Override\n  public void start(Stage stage) {\n\n    try {\n\n      // create splitPane pane and JavaFX app scene\n      SplitPane splitPane = new SplitPane();\n      splitPane.setOrientation(Orientation.VERTICAL);\n      Scene fxScene = new Scene(splitPane);\n\n      // set title, size, and add JavaFX scene to stage\n      stage.setTitle(\"Feature Layer Rendering Mode Map Sample\");\n      stage.setWidth(800);\n      stage.setHeight(700);\n      stage.setScene(fxScene);\n      stage.show();\n\n      // create a map (top) and set it to render all features in static rendering mode\n      ArcGISMap mapTop = new ArcGISMap();\n      mapTop.getLoadSettings().setPreferredPointFeatureRenderingMode(FeatureLayer.RenderingMode.STATIC);\n      mapTop.getLoadSettings().setPreferredPolylineFeatureRenderingMode(FeatureLayer.RenderingMode.STATIC);\n      mapTop.getLoadSettings().setPreferredPolygonFeatureRenderingMode(FeatureLayer.RenderingMode.STATIC);\n\n      // create a map (bottom) and set it to render all features in dynamic rendering mode\n      ArcGISMap mapBottom = new ArcGISMap();\n      mapBottom.getLoadSettings().setPreferredPointFeatureRenderingMode(FeatureLayer.RenderingMode.DYNAMIC);\n      mapBottom.getLoadSettings().setPreferredPolylineFeatureRenderingMode(FeatureLayer.RenderingMode.DYNAMIC);\n      mapBottom.getLoadSettings().setPreferredPolygonFeatureRenderingMode(FeatureLayer.RenderingMode.DYNAMIC);\n\n      // creating top map view\n      mapViewTop = new MapView();\n      mapViewTop.setMap(mapTop);\n      splitPane.getItems().add(mapViewTop);\n      // creating bottom map view\n      mapViewBottom = new MapView();\n      mapViewBottom.setMap(mapBottom);\n      splitPane.getItems().add(mapViewBottom);\n\n      // create service feature table using a point, polyline, and polygon service\n      ServiceFeatureTable pointServiceFeatureTable = new ServiceFeatureTable(\"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Energy/Geology/FeatureServer/0\");\n      ServiceFeatureTable polylineServiceFeatureTable = new ServiceFeatureTable(\"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Energy/Geology/FeatureServer/8\");\n      ServiceFeatureTable polygonServiceFeatureTable = new ServiceFeatureTable(\"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Energy/Geology/FeatureServer/9\");\n\n      // create feature layer from service feature tables\n      FeatureLayer pointFeatureLayer = new FeatureLayer(pointServiceFeatureTable);\n      FeatureLayer polylineFeatureLayer = new FeatureLayer(polylineServiceFeatureTable);\n      FeatureLayer polygonFeatureLayer = new FeatureLayer(polygonServiceFeatureTable);\n\n      // add each layer to top and bottom map\n      mapTop.getOperationalLayers().addAll(Arrays.asList(pointFeatureLayer, polylineFeatureLayer, polygonFeatureLayer));\n      mapBottom.getOperationalLayers().addAll(Arrays.asList(pointFeatureLayer.copy(), polylineFeatureLayer.copy(), polygonFeatureLayer.copy()));\n\n      // viewpoint locations for map view to zoom in and out to\n      Viewpoint zoomOutPoint = new Viewpoint(new Point(-118.37, 34.46, SpatialReferences.getWgs84()), 650000, 0);\n      Viewpoint zoomInPoint = new Viewpoint(new Point(-118.45, 34.395, SpatialReferences.getWgs84()), 50000, 90);\n      mapViewTop.setViewpoint(zoomOutPoint);\n      mapViewBottom.setViewpoint(zoomOutPoint);\n\n      //loop an animation into and out from the zoom in point (5 seconds each) with a 2 second gap between zooming\n      timeline = new Timeline();\n      timeline.setCycleCount(Animation.INDEFINITE);\n      timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(7), event -> zoomTo(zoomInPoint)));\n      timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(14), event -> zoomTo(zoomOutPoint)));\n      timeline.play();\n\n    } catch (Exception e) {\n      // on any error, display the stack trace.\n      e.printStackTrace();\n    }\n  }\n\n  /**\n   * Sets both MapViews to a Viewpoint over a number of seconds.\n   *  @param viewpoint to which both MapViews should be set.\n   *\n   */\n  private void zoomTo(Viewpoint viewpoint) {\n    mapViewTop.setViewpointAsync(viewpoint, 5);\n    mapViewBottom.setViewpointAsync(viewpoint, 5);\n  }\n\n  /**\n   * Stops and releases all resources used in application.\n   */\n  @Override\n  public void stop() {\n\n    // stop the timer\n    timeline.stop();\n\n    if (mapViewTop != null) {\n      mapViewTop.dispose();\n    }\n    if (mapViewBottom != null) {\n      mapViewBottom.dispose();\n    }\n  }\n\n  /**\n   * Opens and runs application.\n   *\n   * @param args arguments passed to this application\n   */\n  public static void main(String[] args) {\n\n    Application.launch(args);\n  }\n\n}<fim_middle>// function below is long method\n"}