{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.druid.benchmark;\n\n\nimport org.apache.druid.extendedset.intset.ImmutableConciseSet;\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.OutputTimeUnit;\nimport org.openjdk.jmh.annotations.Param;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.State;\nimport org.openjdk.jmh.infra.Blackhole;\n\nimport java.util.concurrent.TimeUnit;\n\n@State(Scope.Benchmark)\npublic class ConciseComplementBenchmark\n{\n\n  // Number of rows to read, the test will read random rows\n  @Param({\"1000\", \"10000\", \"100000\", \"1000000\", \"1000000\"})\n  int emptyRows;\n\n<fim_suffix>  @Benchmark\n  @BenchmarkMode(Mode.AverageTime)\n  @OutputTimeUnit(TimeUnit.MICROSECONDS)\n  public void uncompressed(Blackhole blackhole)\n  {\n    final ImmutableConciseSet set = ImmutableConciseSet.complement(null, emptyRows);\n    blackhole.consume(set);\n    assert (emptyRows == set.size());\n  }\n}<fim_middle>// function below has no smell\n"}