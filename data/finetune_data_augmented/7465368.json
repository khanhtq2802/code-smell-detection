{"text": "<fim_prefix>/*\n * Copyright 2011-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.data.neo4j.mapping;\n\nimport java.lang.reflect.Field;\nimport java.util.Optional;\n\nimport org.neo4j.ogm.annotation.EndNode;\nimport org.neo4j.ogm.annotation.Id;\nimport org.neo4j.ogm.annotation.Relationship;\nimport org.neo4j.ogm.annotation.StartNode;\nimport org.neo4j.ogm.annotation.Version;\nimport org.neo4j.ogm.metadata.ClassInfo;\nimport org.neo4j.ogm.metadata.FieldInfo;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.annotation.AnnotatedElementUtils;\nimport org.springframework.data.mapping.Association;\nimport org.springframework.data.mapping.PersistentEntity;\nimport org.springframework.data.mapping.model.AnnotationBasedPersistentProperty;\nimport org.springframework.data.mapping.model.Property;\nimport org.springframework.data.mapping.model.SimpleTypeHolder;\nimport org.springframework.data.neo4j.annotation.QueryResult;\n\n/**\n * This class implements Spring Data's PersistentProperty interface, scavenging the required data from the OGM's mapping\n * classes in order to for SDN to play nicely with Spring Data REST. The main thing to note is that this class is\n * effectively a shim for FieldInfo. We don't reload all the mapping information again. We do not yet support\n * getter/setter access to entity properties.\n * <p>\n * These attributes do not appear to be used/needed for SDN 4 to inter-operate correctly with SD-REST:\n * </p>\n * <ul>\n * <li>mapValueType</li>\n * <li>typeInformation</li>\n * <li>isVersionProperty (there is no SDN versioning at this stage)</li>\n * <li>isTransient (we never supply transient classes to the Spring mapping context)</li>\n * <li>isWritable (we don't currently support read-only fields)</li>\n * </ul>\n * Consequently their associated getter methods always return default values of null or [true|false] However, because\n * these method calls are not expected, we also log a warning message if they get invoked\n *\n * @author Vince Bickers\n * @author Adam George\n * @author Luanne Misquitta\n * @author Mark Angrish\n * @author Mark Paluch\n * @author Michael J. Simons\n * @since 4.0.0\n */\n<fim_suffix>public class Neo4jPersistentProperty extends AnnotationBasedPersistentProperty<Neo4jPersistentProperty> {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(Neo4jPersistentProperty.class);\n\n\tenum PropertyType {\n\t\tREGULAR_PROPERTY(false), INTERNAL_ID_PROPERTY(true), ID_PROPERTY(true);\n\n\t\tprivate final boolean idProperty;\n\n\t\tPropertyType(boolean idProperty) {\n\t\t\tthis.idProperty = idProperty;\n\t\t}\n\t}\n\n\tprivate final PropertyType propertyType;\n\n\t/**\n\t * Constructs a new {@link Neo4jPersistentProperty} based on the given arguments.\n\t *\n\t * @param owningClassInfo The {@link ClassInfo} of the object of which the property field is a member\n\t * @param property The property\n\t * @param owner The owning {@link PersistentEntity} that corresponds to the given {@code ClassInfo}\n\t * @param simpleTypeHolder The {@link SimpleTypeHolder} that dictates whether the type of this property is considered\n\t *          simple or not\n\t */\n\tpublic Neo4jPersistentProperty(ClassInfo owningClassInfo, Property property,\n\t\t\tPersistentEntity<?, Neo4jPersistentProperty> owner, SimpleTypeHolder simpleTypeHolder) {\n\t\tsuper(property, owner, simpleTypeHolder);\n\n\t\tif (owningClassInfo == null) {\n\t\t\tlogger.warn(\"Owning ClassInfo is null for property: {}\", property);\n\t\t}\n\n\t\tif (owningClassInfo == null || owningClassIsSimple(owningClassInfo, simpleTypeHolder)\n\t\t\t\t|| owningClassDoesNotSupportIdProperties(owningClassInfo) || owningPropertyIsEnum(owner)) {\n\t\t\tthis.propertyType = PropertyType.REGULAR_PROPERTY;\n\t\t} else if (isInternalIdentityField(owningClassInfo, property)) {\n\t\t\tthis.propertyType = PropertyType.INTERNAL_ID_PROPERTY;\n\t\t} else if (isExplicitIdentityField(owningClassInfo, property)) {\n\t\t\tthis.propertyType = PropertyType.ID_PROPERTY;\n\t\t} else {\n\t\t\tthis.propertyType = PropertyType.REGULAR_PROPERTY;\n\t\t}\n\t}\n\n\tprivate static boolean owningPropertyIsEnum(PersistentEntity<?, Neo4jPersistentProperty> owner) {\n\t\treturn owner.getType().isEnum();\n\t}\n\n\tprivate static boolean owningClassIsSimple(ClassInfo owningClassInfo, SimpleTypeHolder simpleTypeHolder) {\n\n\t\treturn owningClassInfo.getUnderlyingClass() != null\n\t\t\t\t&& simpleTypeHolder.isSimpleType(owningClassInfo.getUnderlyingClass());\n\t}\n\n\tprivate static boolean owningClassDoesNotSupportIdProperties(ClassInfo owningClassInfo) {\n\n\t\treturn owningClassInfo.isInterface() || owningClassInfo.annotationsInfo().get(QueryResult.class.getName()) != null\n\t\t\t\t|| owningClassInfo.isEnum();\n\t}\n\n\tprivate static boolean isInternalIdentityField(ClassInfo owningClassInfo, Property property) {\n\n\t\tOptional<Field> optionalInternalIdentityField = Optional.ofNullable(owningClassInfo.identityFieldOrNull())\n\t\t\t\t.map(FieldInfo::getField);\n\t\treturn property.getField().equals(optionalInternalIdentityField);\n\t}\n\n\tprivate static boolean isExplicitIdentityField(ClassInfo owningClassInfo, Property property) {\n\n\t\t// Cannot use owningClassInfo.propertyField() as those are not initialized yet. They will\n\t\t// be initialized on the call, but that would change behaviour: SDN fails late when there\n\t\t// are invalid properties atm. Even if'ts better to fail early, it means at least changing\n\t\t// a dozen tests in SDN itself.\n\t\treturn property.getField().map(field -> AnnotatedElementUtils.findMergedAnnotation(field, Id.class)).isPresent();\n\t}\n\n\t@Override\n\tpublic boolean isIdProperty() {\n\t\treturn propertyType.idProperty;\n\t}\n\n\tPropertyType getPropertyType() {\n\t\treturn propertyType;\n\t}\n\n\t@Override\n\tpublic boolean isVersionProperty() {\n\t\treturn isAnnotationPresent(Version.class);\n\t}\n\n\t/**\n\t * Overridden to force field access as opposed to getter method access for simplicity.\n\t *\n\t * @see org.springframework.data.mapping.model.AnnotationBasedPersistentProperty#usePropertyAccess()\n\t */\n\t@Override\n\tpublic boolean usePropertyAccess() {\n\t\tlogger.debug(\"[property].usePropertyAccess() returns false\");\n\t\treturn false;\n\t}\n\n\t/**\n\t * Determines whether or not this property should be considered an association to another entity or whether it's just\n\t * a simple property that should be shown as a value.\n\t * <p>\n\t * This implementation works by looking for non-transient members annotated with <code>@Relationship</code>.\n\t * </p>\n\t *\n\t * @return <code>true</code> if this property is an association to another entity, <code>false</code> if not\n\t */\n\t@Override\n\tpublic boolean isAssociation() {\n\t\treturn !isTransient() && (isAnnotationPresent(Relationship.class) || isAnnotationPresent(StartNode.class)\n\t\t\t\t|| isAnnotationPresent(EndNode.class));\n\t}\n\n\t@Override\n\tprotected Association<Neo4jPersistentProperty> createAssociation() {\n\t\treturn new Association<Neo4jPersistentProperty>(this, null);\n\t}\n}<fim_middle>// class below has no smell\n"}