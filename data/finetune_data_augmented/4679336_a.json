{"text": "<fim_prefix>          }\n        } else if (selItem instanceof HadoopJob) {\n          // kill the job\n          HadoopJob job = (HadoopJob) selItem;\n          if (job.isCompleted()) {\n            // Job already finished, remove the entry\n            job.getLocation().purgeJob(job);\n          } else {\n            // Job is running, kill the job?\n            if (MessageDialog.openConfirm(Display.getDefault()\n                .getActiveShell(), \"Confirm kill running Job\",\n                \"Do you really want to kill running Job: \" + job.getJobID())) {\n              job.kill();\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * This object is the root content for this content provider\n   */\n  private static final Object CONTENT_ROOT = new Object();\n  private final IAction deleteAction = new DeleteAction();\n  private final IAction editServerAction = new EditLocationAction(this);\n  private final IAction newLocationAction = new NewLocationAction();\n  private TreeViewer viewer;\n  public ServerView() {\n  }\n  /* @inheritDoc */\n  @Override\n  public void init(IViewSite site) throws PartInitException {\n    super.init(site);\n  }\n  /* @inheritDoc */\n  @Override\n  public void dispose() {\n    ServerRegistry.getInstance().removeListener(this);\n  }\n  /**\n   * Creates the columns for the view\n   */\n  @Override\n  public void createPartControl(Composite parent) {\n    Tree main =\n        new Tree(parent, SWT.SINGLE | SWT.FULL_SELECTION | SWT.H_SCROLL\n            | SWT.V_SCROLL);\n    main.setHeaderVisible(true);\n    main.setLinesVisible(false);\n    main.setLayoutData(new GridData(GridData.FILL_BOTH));\n    TreeColumn serverCol = new TreeColumn(main, SWT.SINGLE);\n    serverCol.setText(\"Location\");\n    serverCol.setWidth(300);\n    serverCol.setResizable(true);\n    TreeColumn locationCol = new TreeColumn(main, SWT.SINGLE);\n    locationCol.setText(\"Master node\");\n    locationCol.setWidth(185);\n    locationCol.setResizable(true);\n    TreeColumn stateCol = new TreeColumn(main, SWT.SINGLE);\n    stateCol.setText(\"State\");\n    stateCol.setWidth(95);\n    stateCol.setResizable(true);\n    TreeColumn statusCol = new TreeColumn(main, SWT.SINGLE);\n    statusCol.setText(\"Status\");\n    statusCol.setWidth(300);\n    statusCol.setResizable(true);\n    viewer = new TreeViewer(main);\n    viewer.setContentProvider(this);\n    viewer.setLabelProvider(this);\n    viewer.setInput(CONTENT_ROOT); // don't care\n    getViewSite().setSelectionProvider(viewer);\n    getViewSite().getActionBars().setGlobalActionHandler(\n        ActionFactory.DELETE.getId(), deleteAction);\n    getViewSite().getActionBars().getToolBarManager().add(editServerAction);\n    getViewSite().getActionBars().getToolBarManager().add(newLocationAction);\n    createActions();\n    createContextMenu();\n  }\n  /**\n   * Actions\n   */\n  private void createActions() {\n    /*\n     * addItemAction = new Action(\"Add...\") { public void run() { addItem(); } };\n     * addItemAction.setImageDescriptor(ImageLibrary\n     * .get(\"server.view.location.new\"));\n     */\n    /*\n     * deleteItemAction = new Action(\"Delete\") { public void run() {\n     * deleteItem(); } };\n     * deleteItemAction.setImageDescriptor(getImageDescriptor(\"delete.gif\"));\n     * \n     * selectAllAction = new Action(\"Select All\") { public void run() {\n     * selectAll(); } };\n     */\n    // Add selection listener.\n    viewer.addSelectionChangedListener(new ISelectionChangedListener() {\n      public void selectionChanged(SelectionChangedEvent event) {\n        updateActionEnablement();\n      }\n    });\n  }\n  private void addItem() {\n    System.out.printf(\"ADD ITEM\\n\");\n  }\n  private void updateActionEnablement() {\n    IStructuredSelection sel = (IStructuredSelection) viewer.getSelection();\n    // deleteItemAction.setEnabled(sel.size() > 0);\n  }\n  /**\n   * Contextual menu\n   */\n  private void createContextMenu() {\n    // Create menu manager.\n    MenuManager menuMgr = new MenuManager();\n    menuMgr.setRemoveAllWhenShown(true);\n    menuMgr.addMenuListener(new IMenuListener() {\n      public void menuAboutToShow(IMenuManager mgr) {\n        fillContextMenu(mgr);\n      }\n    });\n    // Create menu.\n    Menu menu = menuMgr.createContextMenu(viewer.getControl());\n    viewer.getControl().setMenu(menu);\n    // Register menu for extension.\n    getSite().registerContextMenu(menuMgr, viewer);\n  }\n  private void fillContextMenu(IMenuManager mgr) {\n    mgr.add(newLocationAction);\n    mgr.add(editServerAction);\n    mgr.add(deleteAction);\n    /*\n     * mgr.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));\n     * mgr.add(deleteItemAction); mgr.add(new Separator());\n     * mgr.add(selectAllAction);\n     */\n  }\n  /* @inheritDoc */\n  @Override\n  public void setFocus() {\n  }\n  /*\n   * IHadoopServerListener implementation\n   */\n  /* @inheritDoc */\n  public void serverChanged(HadoopServer location, int type) {\n    Display.getDefault().syncExec(new Runnable() {\n      public void run() {\n        ServerView.this.viewer.refresh();\n      }\n    });\n  }\n  /*\n   * IStructuredContentProvider implementation\n   */\n  /* @inheritDoc */\n  public void inputChanged(final Viewer viewer, Object oldInput,\n      Object newInput) {\n    if (oldInput == CONTENT_ROOT)\n      ServerRegistry.getInstance().removeListener(this);\n    if (newInput == CONTENT_ROOT)\n      ServerRegistry.getInstance().addListener(this);\n  }\n  /**\n   * The root elements displayed by this view are the existing Hadoop\n   * locations\n   */\n  /* @inheritDoc */\n  public Object[] getElements(Object inputElement) {\n    return ServerRegistry.getInstance().getServers().toArray();\n  }\n  /*\n   * ITreeStructuredContentProvider implementation\n   */\n  /**\n   * Each location contains a child entry for each job it runs.\n   */\n  /* @inheritDoc */\n  public Object[] getChildren(Object parent) {\n    if (parent instanceof HadoopServer) {\n      HadoopServer location = (HadoopServer) parent;\n      location.addJobListener(this);\n      Collection<HadoopJob> jobs = location.getJobs();\n      return jobs.toArray();\n    }\n    return null;\n  }\n  /* @inheritDoc */\n  public Object getParent(Object element) {\n    if (element instanceof HadoopServer) {\n      return CONTENT_ROOT;\n    } else if (element instanceof HadoopJob) {\n      return ((HadoopJob) element).getLocation();\n    }\n    return null;\n  }\n  /* @inheritDoc */\n  public boolean hasChildren(Object element) {\n    /* Only server entries have children */\n    return (element instanceof HadoopServer);\n  }\n  /*\n   * ITableLabelProvider implementation\n   */\n  /* @inheritDoc */\n  public void addListener(ILabelProviderListener listener) {\n    // no listeners handling\n  }\n  public boolean isLabelProperty(Object element, String property) {\n    return false;\n  }\n  /* @inheritDoc */\n  public void removeListener(ILabelProviderListener listener) {\n    // no listener handling\n  }\n  /* @inheritDoc */\n  public Image getColumnImage(Object element, int columnIndex) {\n    if ((columnIndex == 0) && (element instanceof HadoopServer)) {\n      return ImageLibrary.getImage(\"server.view.location.entry\");\n    } else if ((columnIndex == 0) && (element instanceof HadoopJob)) {\n      return ImageLibrary.getImage(\"server.view.job.entry\");\n    }\n    return null;\n  }\n  /* @inheritDoc */\n<fim_suffix>  public String getColumnText(Object element, int columnIndex) {\n    if (element instanceof HadoopServer) {\n      HadoopServer server = (HadoopServer) element;\n      switch (columnIndex) {\n        case 0:\n          return server.getLocationName();\n        case 1:\n          return server.getMasterHostName().toString();\n        case 2:\n          return server.getState();\n        case 3:\n          return \"\";\n      }\n    } else if (element instanceof HadoopJob) {\n      HadoopJob job = (HadoopJob) element;\n      switch (columnIndex) {\n        case 0:\n          return job.getJobID().toString();\n        case 1:\n          return \"\";\n        case 2:\n          return job.getState().toString();\n        case 3:\n          return job.getStatus();\n      }\n    } else if (element instanceof JarModule) {\n      JarModule jar = (JarModule) element;\n      switch (columnIndex) {\n        case 0:\n          return jar.toString();\n        case 1:\n          return \"Publishing jar to server..\";\n        case 2:\n          return \"\";\n      }\n    }\n    return null;\n  }<fim_middle>// function below is feature envy and long method\n"}