{"text": "<fim_prefix>import static org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode.UnaryOperation.SIN;\nimport static org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode.UnaryOperation.TAN;\nimport static org.graalvm.compiler.serviceprovider.JavaVersionUtil.Java11OrEarlier;\nimport static org.graalvm.compiler.serviceprovider.JavaVersionUtil.Java8OrEarlier;\nimport java.util.Arrays;\nimport org.graalvm.compiler.bytecode.BytecodeProvider;\nimport org.graalvm.compiler.lir.amd64.AMD64ArithmeticLIRGeneratorTool.RoundingMode;\nimport org.graalvm.compiler.nodes.PauseNode;\nimport org.graalvm.compiler.nodes.ValueNode;\nimport org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins;\nimport org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext;\nimport org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin;\nimport org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin.Receiver;\nimport org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins;\nimport org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration;\nimport org.graalvm.compiler.nodes.java.AtomicReadAndAddNode;\nimport org.graalvm.compiler.nodes.java.AtomicReadAndWriteNode;\nimport org.graalvm.compiler.nodes.memory.address.OffsetAddressNode;\nimport org.graalvm.compiler.replacements.ArraysSubstitutions;\nimport org.graalvm.compiler.replacements.IntegerSubstitutions;\nimport org.graalvm.compiler.replacements.LongSubstitutions;\nimport org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnsafeAccessPlugin;\nimport org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnsafeGetPlugin;\nimport org.graalvm.compiler.replacements.StandardGraphBuilderPlugins.UnsafePutPlugin;\nimport org.graalvm.compiler.replacements.nodes.BinaryMathIntrinsicNode;\nimport org.graalvm.compiler.replacements.nodes.BinaryMathIntrinsicNode.BinaryOperation;\nimport org.graalvm.compiler.replacements.nodes.BitCountNode;\nimport org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode;\nimport org.graalvm.compiler.replacements.nodes.UnaryMathIntrinsicNode.UnaryOperation;\nimport jdk.vm.ci.amd64.AMD64;\nimport jdk.vm.ci.amd64.AMD64.CPUFeature;\nimport jdk.vm.ci.meta.JavaKind;\nimport jdk.vm.ci.meta.ResolvedJavaMethod;\nimport sun.misc.Unsafe;\npublic class AMD64GraphBuilderPlugins {\n    public static void register(Plugins plugins, BytecodeProvider replacementsBytecodeProvider, AMD64 arch, boolean explicitUnsafeNullChecks, boolean emitJDK9StringSubstitutions) {\n        InvocationPlugins invocationPlugins = plugins.getInvocationPlugins();\n        invocationPlugins.defer(new Runnable() {\n            @Override\n            public void run() {\n                registerThreadPlugins(invocationPlugins, arch);\n                registerIntegerLongPlugins(invocationPlugins, IntegerSubstitutions.class, JavaKind.Int, arch, replacementsBytecodeProvider);\n                registerIntegerLongPlugins(invocationPlugins, LongSubstitutions.class, JavaKind.Long, arch, replacementsBytecodeProvider);\n                registerPlatformSpecificUnsafePlugins(invocationPlugins, replacementsBytecodeProvider, explicitUnsafeNullChecks,\n                                new JavaKind[]{JavaKind.Int, JavaKind.Long, JavaKind.Object, JavaKind.Boolean, JavaKind.Byte, JavaKind.Short, JavaKind.Char, JavaKind.Float, JavaKind.Double});\n                registerUnsafePlugins(invocationPlugins, replacementsBytecodeProvider, explicitUnsafeNullChecks);\n                registerStringPlugins(invocationPlugins, replacementsBytecodeProvider);\n                if (emitJDK9StringSubstitutions) {\n                    registerStringLatin1Plugins(invocationPlugins, replacementsBytecodeProvider);\n                    registerStringUTF16Plugins(invocationPlugins, replacementsBytecodeProvider);\n                }\n                registerMathPlugins(invocationPlugins, arch, replacementsBytecodeProvider);\n                registerArraysEqualsPlugins(invocationPlugins, replacementsBytecodeProvider);\n            }\n        });\n    }\n    private static void registerThreadPlugins(InvocationPlugins plugins, AMD64 arch) {\n        if (!Java8OrEarlier) {\n            // Pause instruction introduced with SSE2\n            if (arch.getFeatures().contains(AMD64.CPUFeature.SSE2)) {\n                Registration r = new Registration(plugins, Thread.class);\n                r.register0(\"onSpinWait\", new InvocationPlugin() {\n                    @Override\n                    public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver) {\n                        b.append(new PauseNode());\n                        return true;\n                    }\n                });\n            }\n        }\n    }\n    private static void registerIntegerLongPlugins(InvocationPlugins plugins, Class<?> substituteDeclaringClass, JavaKind kind, AMD64 arch, BytecodeProvider bytecodeProvider) {\n        Class<?> declaringClass = kind.toBoxedJavaClass();\n        Class<?> type = kind.toJavaClass();\n        Registration r = new Registration(plugins, declaringClass, bytecodeProvider);\n        if (arch.getFeatures().contains(AMD64.CPUFeature.LZCNT) && arch.getFlags().contains(AMD64.Flag.UseCountLeadingZerosInstruction)) {\n            r.register1(\"numberOfLeadingZeros\", type, new InvocationPlugin() {\n                @Override\n                public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode value) {\n                    ValueNode folded = AMD64CountLeadingZerosNode.tryFold(value);\n                    if (folded != null) {\n                        b.addPush(JavaKind.Int, folded);\n                    } else {\n                        b.addPush(JavaKind.Int, new AMD64CountLeadingZerosNode(value));\n                    }\n                    return true;\n                }\n            });\n        } else {\n            r.registerMethodSubstitution(substituteDeclaringClass, \"numberOfLeadingZeros\", type);\n        }\n        if (arch.getFeatures().contains(AMD64.CPUFeature.BMI1) && arch.getFlags().contains(AMD64.Flag.UseCountTrailingZerosInstruction)) {\n            r.register1(\"numberOfTrailingZeros\", type, new InvocationPlugin() {\n                @Override\n                public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode value) {\n                    ValueNode folded = AMD64CountTrailingZerosNode.tryFold(value);\n                    if (folded != null) {\n                        b.addPush(JavaKind.Int, folded);\n                    } else {\n                        b.addPush(JavaKind.Int, new AMD64CountTrailingZerosNode(value));\n                    }\n                    return true;\n                }\n            });\n        } else {\n            r.registerMethodSubstitution(substituteDeclaringClass, \"numberOfTrailingZeros\", type);\n        }\n        if (arch.getFeatures().contains(AMD64.CPUFeature.POPCNT)) {\n            r.register1(\"bitCount\", type, new InvocationPlugin() {\n                @Override\n                public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode value) {\n                    b.push(JavaKind.Int, b.append(new BitCountNode(value).canonical(null)));\n                    return true;\n                }\n            });\n        }\n    }\n    private static void registerMathPlugins(InvocationPlugins plugins, AMD64 arch, BytecodeProvider bytecodeProvider) {\n        Registration r = new Registration(plugins, Math.class, bytecodeProvider);\n        registerUnaryMath(r, \"log\", LOG);\n        registerUnaryMath(r, \"log10\", LOG10);\n        registerUnaryMath(r, \"exp\", EXP);\n        registerBinaryMath(r, \"pow\", POW);\n        registerUnaryMath(r, \"sin\", SIN);\n        registerUnaryMath(r, \"cos\", COS);\n        registerUnaryMath(r, \"tan\", TAN);\n        if (arch.getFeatures().contains(CPUFeature.SSE4_1)) {\n            registerRound(r, \"rint\", RoundingMode.NEAREST);\n            registerRound(r, \"ceil\", RoundingMode.UP);\n            registerRound(r, \"floor\", RoundingMode.DOWN);\n        }\n    }\n<fim_suffix>    private static void registerUnaryMath(Registration r, String name, UnaryOperation operation) {\n        r.register1(name, Double.TYPE, new InvocationPlugin() {\n            @Override\n            public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode value) {\n                b.push(JavaKind.Double, b.append(UnaryMathIntrinsicNode.create(value, operation)));\n                return true;\n            }\n        });\n    }<fim_middle>// function below has no smell\n"}