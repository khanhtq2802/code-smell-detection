{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.brooklyn.core.sensor;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport org.apache.brooklyn.api.sensor.AttributeSensor;\nimport org.apache.brooklyn.api.sensor.Sensor;\n\nimport com.google.common.reflect.TypeToken;\n\n/**\n * A {@link Sensor} describing an attribute change.\n */\n<fim_suffix>public class BasicAttributeSensor<T> extends BasicSensor<T> implements AttributeSensor<T> {\n    private static final long serialVersionUID = -2493209215974820300L;\n    \n    private final SensorPersistenceMode persistence;\n\n    public BasicAttributeSensor(Class<T> type, String name) {\n        this(type, name, name);\n    }\n    \n    public BasicAttributeSensor(Class<T> type, String name, String description) {\n        this(type, name, description, SensorPersistenceMode.REQUIRED);\n    }\n    \n    public BasicAttributeSensor(TypeToken<T> typeToken, String name) {\n        this(typeToken, name, name);\n    }\n    public BasicAttributeSensor(TypeToken<T> typeToken, String name, String description) {\n        this(typeToken, name, description, SensorPersistenceMode.REQUIRED);\n    }\n    \n    public BasicAttributeSensor(Class<T> type, String name, String description, SensorPersistenceMode persistence) {\n        this(type, null, name, description, persistence);\n    }\n    public BasicAttributeSensor(TypeToken<T> typeToken, String name, String description, SensorPersistenceMode persistence) {\n        this(null, typeToken, name, description, persistence);\n    }\n    public BasicAttributeSensor(Class<T> type, TypeToken<T> typeToken, String name, String description, SensorPersistenceMode persistence) {\n        super(type, typeToken, name, description);\n        this.persistence = checkNotNull(persistence, \"persistence\");\n    }\n\n    @Override\n    public SensorPersistenceMode getPersistenceMode() {\n        // persistence could be null if deserializing state written by an old version; in which case default to 'required'\n        return (persistence != null) ? persistence : SensorPersistenceMode.REQUIRED;\n    }\n}<fim_middle>// class below is data class\n"}