{"text": "<fim_prefix>\n<fim_suffix>public class FormatParser\n{\n  public static final String[][] FORMAT_SUBSTITUTIONS = {\n    { \"mov,mp4,m4a,3gp,3g2,mj2\", MediaFormat.QUICKTIME },\n    { \"mpeg4aac\", MediaFormat.AAC },\n    { \"mp4a / 0x6134706D\", MediaFormat.AAC },\n    // mpeg we do ourself to split it up into MPEG1 and MPEG2-PS; we also do better TS detection as well\n    { \"mpegts\", MediaFormat.MPEG2_TS },\n    { \"mpeg2video\", MediaFormat.MPEG2_VIDEO },\n    { \"mpeg1video\", MediaFormat.MPEG1_VIDEO },\n    { \"mpeg4\", MediaFormat.MPEG4_VIDEO },\n    { \"wmav1\", MediaFormat.WMA7 },\n    { \"wmav2\", MediaFormat.WMA8 }, // this is V8 or V9 lossy\n    { \"0x0163\", MediaFormat.WMA9LOSSLESS }, // can't play it back with FFMPEG, but it can detect it\n    { \"c[1][0][0] / 0x0163\", MediaFormat.WMA9LOSSLESS }, // can't play it back with FFMPEG, but it can detect it\n    { \"WMV3 / 0x33564D57\", MediaFormat.WMV9 },\n    { \"[0][0][0][0] / 0x0000\", \"0X0000\" }, // cleanup\n    { \"wmv3\", MediaFormat.WMV9 },\n    { \"wmv2\", MediaFormat.WMV8 },\n    { \"wmv1\", MediaFormat.WMV7 },\n    { \"flv\", MediaFormat.FLASH_VIDEO },\n    { \"h264\", MediaFormat.H264 },\n    { \"ogg\", MediaFormat.OGG },\n    { \"vorbis\", MediaFormat.VORBIS },\n    { \"0x0162\", MediaFormat.WMA_PRO },\n    { \"libfaad\", MediaFormat.AAC },\n    { \"truehd\", MediaFormat.DOLBY_HD },\n    { \"ac3_truehd\", MediaFormat.DOLBY_HD },\n    { \"dts_hd\", MediaFormat.DTS_HD },\n    { \"dts_ma\", MediaFormat.DTS_MA },\n    { \"ec-3 / 0x332D6365\", MediaFormat.EAC3 },\n    { \"PCM_BLURAY\", \"PCM_BD\" },\n    { \"OG[0][0] / 0X674F\", MediaFormat.VORBIS },\n    { \"dtsh / 0x68737464\", MediaFormat.DTS_HD },\n    { \"dtsl / 0x6c737464\", MediaFormat.DTS_MA },\n    { \"dtsc / 0x63737464\", MediaFormat.DTS },\n    { \"mlpa / 0x61706c6d\", MediaFormat.DOLBY_HD },\n    { \"AC-3 / 0X332D6361\", MediaFormat.AC3 },\n  };\n  private static final long MPEG_PARSER_SEARCH_LENGTH = 30*1024*1024;\n  private static boolean DISABLE_FORMAT_DETECTION = false;\n  private static boolean MINIMIZE_EXIF_MEM_USAGE = false;\n  public static final java.io.File FORMAT_DETECT_MOUNT_DIR = new java.io.File(\"/tmp/formatmount\");\n  private static String substituteName(String s)\n  {\n    if (s == null) return null;\n    for (int i = 0; i < FORMAT_SUBSTITUTIONS.length; i++)\n      if (FORMAT_SUBSTITUTIONS[i][0].equalsIgnoreCase(s))\n        return FORMAT_SUBSTITUTIONS[i][1];\n    return s.toUpperCase();\n  }\n  public static ContainerFormat getFileFormat(java.io.File f)\n  {\n    if (!f.isFile())\n    {\n      // Check for a BluRay folder structure\n      if (f.isDirectory() && (f.getName().equalsIgnoreCase(sage.Seeker.BLURAY_VOLUME_SECRET) ||\n          (new java.io.File(f, \"index.bdmv\").isFile() && new java.io.File(f, \"MovieObject.bdmv\").isFile())))\n      {\n        return parseBluRayFormat(f);\n      }\n      return null;\n    }\n    if (f.length() == 0 && (!sage.MMC.getInstance().isRecording(f) || sage.MMC.getInstance().getRecordedBytes(f) == 0))\n    {\n      if (sage.Sage.DBG) System.out.println(\"Returning null format for zero-length file\");\n      return null;\n    }\n    try\n    {\n      ContainerFormat format = new ContainerFormat();\n      String easyFormat = null;\n      boolean foundEasy = false;\n      ContainerFormat myFormat = null;\n      if (foundEasy = setContainerTypeEasy(f, format))\n      {\n        // If it's an image format, then just stop now.\n        easyFormat = format.getFormatName();\n        if (easyFormat != null && (MediaFormat.BMP.equals(easyFormat) ||\n            MediaFormat.GIF.equals(easyFormat) || MediaFormat.JPEG.equals(easyFormat) ||\n            MediaFormat.PNG.equals(easyFormat) || MediaFormat.TIFF.equals(easyFormat) ||\n            MediaFormat.BMP.equals(easyFormat) ||\n            MediaFormat.SMIL.equals(easyFormat) || MediaFormat.SWF.equals(easyFormat)))\n        {\n          addAdditionalMetadata(f, format);\n          return format;\n        }\n      }\n      // Check for MP3 files since we can parse those fast in Java\n      ContainerFormat mp3Format = MP3Parser.parseMP3File(f);\n      if (mp3Format != null)\n      {\n        // Our MP3 parser figured it out. :)\n        addAdditionalMetadata(f, mp3Format);\n        if (sage.Sage.DBG) System.out.println(\"File Format-MP3 parsed \" + f + \"=\" + mp3Format);\n        return mp3Format;\n      }\n      if (DISABLE_FORMAT_DETECTION)\n        return foundEasy ? format : null;\n      String lcfname = f.toString().toLowerCase();\n      // Don't try to format detect ISO files; except BluRay\n      if (lcfname.endsWith(\".iso\"))\n      {\n        synchronized (FORMAT_DETECT_MOUNT_DIR)\n        {\n          java.io.File mountDir = sage.FSManager.getInstance().requestISOMount(f, (java.io.File)null);\n              if (mountDir != null)\n              {\n                // Check for a BluRay folder structure\n                java.io.File bdDir = null;\n                boolean isBluRay = (bdDir = new java.io.File(mountDir, \"BDMV\")).isDirectory() || (bdDir = new java.io.File(mountDir, \"bdmv\")).isDirectory();\n                boolean isDVD = false;\n                ContainerFormat rv = null;\n                if (!isBluRay)\n                {\n                  // Check for a DVD\n                  if (new java.io.File(mountDir, \"VIDEO_TS\").isDirectory() ||\n                      new java.io.File(mountDir, \"video_ts\").isDirectory())\n                  {\n                    isDVD = true;\n                    format.setFormatName(\"DVD\");\n                    rv = format;\n                  }\n                }\n                else\n                {\n                  rv = parseBluRayFormat(bdDir);\n                }\n                sage.FSManager.getInstance().releaseISOMount(mountDir);\n                return rv;\n              }\n              return null;\n        }\n      }\n      // Only do our MPEG detection if we don't know the type yet; or we know it's MPEG\n      ContainerFormat internalParsedAudioOnlyFormat = null;\n      if (!lcfname.endsWith(\".evo\") && !lcfname.endsWith(\".tivo\") && (!foundEasy || (MediaFormat.MPEG2_PS.equals(easyFormat) || MediaFormat.MPEG2_TS.equals(easyFormat) ||\n          MediaFormat.MPEG1.equals(easyFormat) || MediaFormat.MPEG2_PES_VIDEO.equals(easyFormat) ||\n          MediaFormat.MPEG2_PES_VIDEO.equals(easyFormat)))\n          && !sage.Sage.getBoolean(\"skip_internal_format_parser\",false))\n      {\n        if (sage.Sage.DBG) System.out.println(\"Using internal format detector first for: \" + f);\n        if ((myFormat = extractMyFormat(f)) != null)\n        {\n          if (myFormat.getNumberOfStreams() > 0)\n          {\n            if (sage.Sage.DBG) System.out.println(\"File Format Parsed-2a \" + f + \"=\" + myFormat);\n            addAdditionalMetadata(f, myFormat);<fim_middle>// class below is blob\n"}