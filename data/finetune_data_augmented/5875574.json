{"text": "<fim_prefix>            setUserPasswordPut( ui, json, callback );\n            json.remove( \"oldpassword\" );\n            json.remove( \"newpassword\" );\n        }\n        String email = string( json.remove( \"email\" ) );\n        String username = string( json.remove( \"username\" ) );\n        String name = string( json.remove( \"name\" ) );\n        if ( \"me\".equals( username ) ) {\n            throw new IllegalArgumentException( \"Username 'me' is reserved\" );\n        }\n        management.updateAdminUser( user, username, name, email, json );\n        ApiResponse response = createApiResponse();\n        response.setAction( \"update user info\" );\n        return response;\n    }\n    @PUT\n    @Path( \"password\" )\n    @JSONP\n    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n    public ApiResponse setUserPasswordPut( @Context UriInfo ui, Map<String, Object> json,\n                                               @QueryParam( \"callback\" ) @DefaultValue( \"callback\" ) String callback )\n            throws Exception {\n        if ( tokens.isExternalSSOProviderEnabled() && !isServiceAdmin() ) {\n            throw new IllegalArgumentException( \"External SSO integration is enabled, admin users must reset passwords via\" +\n                \" provider: \"+ properties.getProperty(TokenServiceImpl.USERGRID_EXTERNAL_SSO_PROVIDER) );\n        }\n        if ( json == null ) {\n            return null;\n        }\n        String oldPassword = string( json.get( \"oldpassword\" ) );\n        String newPassword = string( json.get( \"newpassword\" ) );\n        if ( isServiceAdmin() ) {\n            management.setAdminUserPassword( user.getUuid(), newPassword );\n        }\n        else {\n            management.setAdminUserPassword( user.getUuid(), oldPassword, newPassword );\n        }\n        ApiResponse response = createApiResponse();\n        response.setAction( \"set user password\" );\n        return response;\n    }\n    @POST\n    @Path( \"password\" )\n    @JSONP\n    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n    public ApiResponse setUserPasswordPost( @Context UriInfo ui, Map<String, Object> json,\n                                                @QueryParam( \"callback\" ) @DefaultValue( \"callback\" ) String callback )\n            throws Exception {\n        return setUserPasswordPut( ui, json, callback );\n    }\n    @RequireAdminUserAccess\n    @GET\n    @Path( \"feed\" )\n    @JSONP\n    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n    public ApiResponse getFeed( @Context UriInfo ui,\n                                    @QueryParam( \"callback\" ) @DefaultValue( \"callback\" ) String callback )\n            throws Exception {\n        ApiResponse response = createApiResponse();\n        response.setAction( \"get admin user feed\" );\n        ServiceResults results = management.getAdminUserActivity( user );\n        response.setEntities( results.getEntities() );\n        response.setSuccess();\n        return response;\n    }\n    @RequireAdminUserAccess\n    @GET\n    @JSONP\n    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n    public ApiResponse getUserData( @Context UriInfo ui, @QueryParam( \"ttl\" ) long ttl,\n                                        @QueryParam( \"shallow\" ) boolean shallow,\n                                        @QueryParam( \"callback\" ) @DefaultValue( \"callback\" ) String callback )\n            throws Exception {\n        ApiResponse response = createApiResponse();\n        response.setAction( \"get admin user\" );\n        // commenting out creation of token each time and setting the token value to the one sent in the request.\n        // String token = management.getAccessTokenForAdminUser( user.getUuid(), ttl );\n        Map<String, Object> userOrganizationData = management.getAdminUserOrganizationData( user, !shallow, !shallow);\n        //userOrganizationData.put( \"token\", token );\n        response.setData( userOrganizationData );\n        response.setSuccess();\n        return response;\n    }\n    @GET\n    @Path( \"resetpw\" )\n    @Produces( MediaType.TEXT_HTML )\n    public Viewable showPasswordResetForm( @Context UriInfo ui, @QueryParam( \"token\" ) String token ) {\n        if ( tokens.isExternalSSOProviderEnabled() && !isServiceAdmin() ) {\n            throw new IllegalArgumentException( \"External SSO integration is enabled, admin users must reset password via\" +\n                \" provider: \"+ properties.getProperty(TokenServiceImpl.USERGRID_EXTERNAL_SSO_PROVIDER) );\n        }\n        UUID organizationId = null;\n        try {\n            this.token = token;\n            TokenInfo tokenInfo = management.getPasswordResetTokenInfoForAdminUser(token);\n            if (tokenInfo != null) {\n                organizationId = tokenInfo.getWorkflowOrgId();\n            }\n            if ( management.checkPasswordResetTokenForAdminUser( user.getUuid(), tokenInfo ) ) {\n                return handleViewable( \"resetpw_set_form\", this, organizationId );\n            }\n            else {\n                return handleViewable( \"resetpw_email_form\", this, organizationId );\n            }\n        }\n        catch ( RedirectionException e ) {\n            throw e;\n        }\n        catch ( Exception e ) {\n            return handleViewable( \"error\", e, organizationId );\n        }\n    }\n    @POST\n    @Path( \"resetpw\" )\n    @Consumes( \"application/x-www-form-urlencoded\" )\n    @Produces( MediaType.TEXT_HTML )\n    public Viewable handlePasswordResetForm( @Context UriInfo ui, @FormParam( \"token\" ) String token,\n                                             @FormParam( \"password1\" ) String password1,\n                                             @FormParam( \"password2\" ) String password2,\n                                             @FormParam( \"recaptcha_challenge_field\" ) String challenge,\n                                             @FormParam( \"recaptcha_response_field\" ) String uresponse ) {\n        if (logger.isTraceEnabled()) {\n            logger.trace(\"handlePasswordResetForm\");\n        }\n        if ( tokens.isExternalSSOProviderEnabled() && !isServiceAdmin() ) {\n            throw new IllegalArgumentException(  \"External SSO integration is enabled, admin users must reset password via\" +\n                \" provider: \"+ properties.getProperty(TokenServiceImpl.USERGRID_EXTERNAL_SSO_PROVIDER) );\n        }\n        UUID organizationId = null;\n        try {\n            this.token = token;\n            TokenInfo tokenInfo = management.getPasswordResetTokenInfoForAdminUser(token);\n            if (tokenInfo != null) {\n                organizationId = tokenInfo.getWorkflowOrgId();\n            }\n            //      if(user == null) {\n            //        errorMsg = \"Incorrect username entered\";\n            //        return handleViewable(\"resetpw_set_form\",this);\n            //      }\n            if ( ( password1 != null ) || ( password2 != null ) ) {\n                if ( management.checkPasswordResetTokenForAdminUser( user.getUuid(), tokenInfo ) ) {\n                    if ( ( password1 != null ) && password1.equals( password2 ) ) {\n                        // validate password\n                        Collection<String> violations = management.passwordPolicyCheck(password1, true);\n                        if (violations.size() > 0) {\n                            // password not valid\n                            errorMsg = management.getPasswordDescription(true);\n                            return handleViewable( \"resetpw_set_form\", this, organizationId );\n                        }\n                        management.setAdminUserPassword( user.getUuid(), password1 );\n                        management.revokeAccessTokenForAdminUser( user.getUuid(), token );\n                        loginEndpoint = properties.getProperty(\"usergrid.viewable.loginEndpoint\");\n                        return handleViewable( \"resetpw_set_success\", this, organizationId );\n                    }\n                    else {\n                        errorMsg = \"Passwords didn't match, let's try again...\";\n                        return handleViewable( \"resetpw_set_form\", this, organizationId );\n                    }\n                }\n                else {\n                    errorMsg = \"Sorry, you have an invalid token. Let's try again...\";\n                    return handleViewable( \"resetpw_email_form\", this, organizationId );\n                }\n            }\n            if ( !useReCaptcha() ) {\n                management.startAdminUserPasswordResetFlow( null, user );\n                return handleViewable( \"resetpw_email_success\", this, organizationId );\n            }\n            ReCaptchaImpl reCaptcha = new ReCaptchaImpl();\n            reCaptcha.setPrivateKey( properties.getRecaptchaPrivate() );\n            ReCaptchaResponse reCaptchaResponse =\n                    reCaptcha.checkAnswer( httpServletRequest.getRemoteAddr(), challenge, uresponse );\n            if ( reCaptchaResponse.isValid() ) {\n                management.startAdminUserPasswordResetFlow( null, user );\n                return handleViewable( \"resetpw_email_success\", this, organizationId );\n            }\n            else {\n                errorMsg = \"Incorrect Captcha\";\n                return handleViewable( \"resetpw_email_form\", this, organizationId );\n            }\n        }\n        catch ( RedirectionException e ) {\n            throw e;\n        }\n        catch ( Exception e ) {\n            return handleViewable( \"error\", e, organizationId );\n        }\n    }\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n    public String getLoginEndpoint() {\n        return loginEndpoint;\n    }\n<fim_suffix>    public String getToken() {\n        return token;\n    }<fim_middle>// function below has no smell\n"}