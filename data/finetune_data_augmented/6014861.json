{"text": "<fim_prefix>/*\n * Copyright 2013-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.cloudfoundry.reactor.uaa.groups;\n\nimport org.cloudfoundry.reactor.ConnectionContext;\nimport org.cloudfoundry.reactor.TokenProvider;\nimport org.cloudfoundry.reactor.uaa.AbstractUaaOperations;\nimport org.cloudfoundry.uaa.groups.AddMemberRequest;\nimport org.cloudfoundry.uaa.groups.AddMemberResponse;\nimport org.cloudfoundry.uaa.groups.CheckMembershipRequest;\nimport org.cloudfoundry.uaa.groups.CheckMembershipResponse;\nimport org.cloudfoundry.uaa.groups.CreateGroupRequest;\nimport org.cloudfoundry.uaa.groups.CreateGroupResponse;\nimport org.cloudfoundry.uaa.groups.DeleteGroupRequest;\nimport org.cloudfoundry.uaa.groups.DeleteGroupResponse;\nimport org.cloudfoundry.uaa.groups.GetGroupRequest;\nimport org.cloudfoundry.uaa.groups.GetGroupResponse;\nimport org.cloudfoundry.uaa.groups.Groups;\nimport org.cloudfoundry.uaa.groups.ListExternalGroupMappingsRequest;\nimport org.cloudfoundry.uaa.groups.ListExternalGroupMappingsResponse;\nimport org.cloudfoundry.uaa.groups.ListGroupsRequest;\nimport org.cloudfoundry.uaa.groups.ListGroupsResponse;\nimport org.cloudfoundry.uaa.groups.ListMembersRequest;\nimport org.cloudfoundry.uaa.groups.ListMembersResponse;\nimport org.cloudfoundry.uaa.groups.MapExternalGroupRequest;\nimport org.cloudfoundry.uaa.groups.MapExternalGroupResponse;\nimport org.cloudfoundry.uaa.groups.RemoveMemberRequest;\nimport org.cloudfoundry.uaa.groups.RemoveMemberResponse;\nimport org.cloudfoundry.uaa.groups.UnmapExternalGroupByGroupDisplayNameRequest;\nimport org.cloudfoundry.uaa.groups.UnmapExternalGroupByGroupDisplayNameResponse;\nimport org.cloudfoundry.uaa.groups.UnmapExternalGroupByGroupIdRequest;\nimport org.cloudfoundry.uaa.groups.UnmapExternalGroupByGroupIdResponse;\nimport org.cloudfoundry.uaa.groups.UpdateGroupRequest;\nimport org.cloudfoundry.uaa.groups.UpdateGroupResponse;\nimport reactor.core.publisher.Mono;\n\n/**\n * The Reactor-based implementation of {@link Groups}\n */\npublic final class ReactorGroups extends AbstractUaaOperations implements Groups {\n\n    /**\n     * Creates an instance\n     *\n     * @param connectionContext the {@link ConnectionContext} to use when communicating with the server\n     * @param root              the root URI of the server.  Typically something like {@code https://uaa.run.pivotal.io}.\n     * @param tokenProvider     the {@link TokenProvider} to use when communicating with the server\n     */\n    public ReactorGroups(ConnectionContext connectionContext, Mono<String> root, TokenProvider tokenProvider) {\n        super(connectionContext, root, tokenProvider);\n    }\n\n    @Override\n    public Mono<AddMemberResponse> addMember(AddMemberRequest request) {\n        return post(request, AddMemberResponse.class, builder -> builder.pathSegment(\"Groups\", request.getGroupId(), \"members\"))\n            .checkpoint();\n    }\n\n    @Override\n    public Mono<CheckMembershipResponse> checkMembership(CheckMembershipRequest request) {\n        return get(request, CheckMembershipResponse.class, builder -> builder.pathSegment(\"Groups\", request.getGroupId(), \"members\", request.getMemberId()))\n            .checkpoint();\n    }\n\n    @Override\n    public Mono<CreateGroupResponse> create(CreateGroupRequest request) {\n        return post(request, CreateGroupResponse.class, builder -> builder.pathSegment(\"Groups\"))\n            .checkpoint();\n    }\n\n    @Override\n    public Mono<DeleteGroupResponse> delete(DeleteGroupRequest request) {\n        return delete(request, DeleteGroupResponse.class, builder -> builder.pathSegment(\"Groups\", request.getGroupId()))\n            .checkpoint();\n    }\n\n    @Override\n    public Mono<GetGroupResponse> get(GetGroupRequest request) {\n        return get(request, GetGroupResponse.class, builder -> builder.pathSegment(\"Groups\", request.getGroupId()))\n            .checkpoint();\n    }\n\n    @Override\n    public Mono<ListGroupsResponse> list(ListGroupsRequest request) {\n        return get(request, ListGroupsResponse.class, builder -> builder.pathSegment(\"Groups\"))\n            .checkpoint();\n    }\n\n    @Override\n    public Mono<ListExternalGroupMappingsResponse> listExternalGroupMappings(ListExternalGroupMappingsRequest request) {\n        return get(request, ListExternalGroupMappingsResponse.class, builder -> builder.pathSegment(\"Groups\", \"External\"))\n            .checkpoint();\n    }\n\n<fim_suffix>    @Override\n    public Mono<ListMembersResponse> listMembers(ListMembersRequest request) {\n        return get(request, ListMembersResponse.class, builder -> builder.pathSegment(\"Groups\", request.getGroupId(), \"members\"))\n            .checkpoint();\n    }\n\n    @Override\n    public Mono<MapExternalGroupResponse> mapExternalGroup(MapExternalGroupRequest request) {\n        return post(request, MapExternalGroupResponse.class, builder -> builder.pathSegment(\"Groups\", \"External\"))\n            .checkpoint();\n    }\n\n    @Override\n    public Mono<RemoveMemberResponse> removeMember(RemoveMemberRequest request) {\n        return delete(request, RemoveMemberResponse.class, builder -> builder.pathSegment(\"Groups\", request.getGroupId(), \"members\", request.getMemberId()))\n            .checkpoint();\n    }\n\n    @Override\n    public Mono<UnmapExternalGroupByGroupDisplayNameResponse> unmapExternalGroupByGroupDisplayName(UnmapExternalGroupByGroupDisplayNameRequest request) {\n        return delete(\n            request,\n            UnmapExternalGroupByGroupDisplayNameResponse.class,\n            builder -> builder.pathSegment(\"Groups\", \"External\", \"displayName\", request.getGroupDisplayName(), \"externalGroup\", request.getExternalGroup(), \"origin\", request.getOrigin()))\n            .checkpoint();\n    }\n\n    @Override\n    public Mono<UnmapExternalGroupByGroupIdResponse> unmapExternalGroupByGroupId(UnmapExternalGroupByGroupIdRequest request) {\n        return delete(\n            request,\n            UnmapExternalGroupByGroupIdResponse.class,\n            builder -> builder.pathSegment(\"Groups\", \"External\", \"groupId\", request.getGroupId(), \"externalGroup\", request.getExternalGroup(), \"origin\", request.getOrigin()))\n            .checkpoint();\n    }\n\n    @Override\n    public Mono<UpdateGroupResponse> update(UpdateGroupRequest request) {\n        return put(request, UpdateGroupResponse.class, builder -> builder.pathSegment(\"Groups\", request.getGroupId()))\n            .checkpoint();\n    }\n\n}<fim_middle>// function below has no smell\n"}