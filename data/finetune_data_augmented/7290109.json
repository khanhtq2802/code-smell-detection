{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2012 Pivotal Software, Inc.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Pivotal Software, Inc. - initial API and implementation\n *******************************************************************************/\npackage com.vmware.vfabric.ide.eclipse.tcserver.tests.support;\n\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\nimport org.eclipse.core.runtime.Assert;\n\n/**\n * @author Steffen Pingel\n */\n<fim_suffix>public abstract class TestConfiguration {\n\n\tprivate String downloadUrl;\n\n\tprivate final String description;\n\n\tprivate TestSuite suite;\n\n\tpublic TestConfiguration(String description) {\n\t\tthis.description = description;\n\t}\n\n\tpublic String getDownloadUrl() {\n\t\treturn downloadUrl;\n\t}\n\n\tpublic void setDownloadUrl(String downloadUrl) {\n\t\tthis.downloadUrl = downloadUrl;\n\t}\n\n\tpublic String getDescription() {\n\t\treturn description;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn getClass().getSimpleName() + \" [\" + description + \"]\";\n\t}\n\n\tpublic TestSuite createSuite(TestSuite parentSuite) {\n\t\tsuite = new TestSuite(\"Testing on \" + getDescription());\n\t\tparentSuite.addTest(suite);\n\t\tsuite.addTest(new Activation(\"TestSuite: \" + getDescription(), true));\n\t\treturn suite;\n\t}\n\n\tpublic void add(Class<? extends TestCase> clazz) {\n\t\tAssert.isNotNull(suite, \"Invoke createSuite() first\");\n\t\tsuite.addTestSuite(clazz);\n\t}\n\n\tpublic void done() {\n\t\tAssert.isNotNull(suite, \"Invoke createSuite() first\");\n\t\tsuite.addTest(new Activation(\"done\", false));\n\t\tsuite = null;\n\t}\n\n\tprivate final class Activation extends TestCase {\n\n\t\tprivate final boolean activate;\n\n\t\tprivate Activation(String name, boolean activate) {\n\t\t\tsuper(name);\n\t\t\tthis.activate = activate;\n\t\t}\n\n\t\t@Override\n\t\tprotected void runTest() throws Throwable {\n\t\t\tif (activate) {\n\t\t\t\tactivate();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgetDefault().activate();\n\t\t\t}\n\t\t}\n\n\t}\n\n\tprotected abstract TestConfiguration getDefault();\n\n\tpublic abstract void activate();\n\n\tpublic abstract TestHarness createHarness();\n\n}<fim_middle>// class below has no smell\n"}