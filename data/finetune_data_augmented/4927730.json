{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\npackage org.apache.jmeter.visualizers;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Image;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.text.NumberFormat;\nimport java.util.Deque;\nimport java.util.concurrent.ConcurrentLinkedDeque;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.JCheckBox;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.SwingConstants;\nimport javax.swing.Timer;\nimport javax.swing.border.Border;\nimport javax.swing.border.EmptyBorder;\nimport org.apache.jmeter.gui.util.JMeterColor;\nimport org.apache.jmeter.samplers.Clearable;\nimport org.apache.jmeter.samplers.SampleResult;\nimport org.apache.jmeter.util.JMeterUtils;\nimport org.apache.jmeter.visualizers.gui.AbstractVisualizer;\n/**\n * This class implements a statistical analyser that calculates both the average\n * and the standard deviation of the sampling process and outputs them as\n * autoscaling plots.\n *\n */\npublic class GraphVisualizer extends AbstractVisualizer implements ImageVisualizer, ItemListener, Clearable {\n    private static final long serialVersionUID = 240L;\n    private static final String ZERO = \"0\";  //$NON-NLS-1$\n    private final NumberFormat nf = NumberFormat.getInstance(); // OK, because used in synchronised method\n    private final CachingStatCalculator model;\n    private JTextField maxYField = null;\n    private JTextField minYField = null;\n    private JTextField noSamplesField = null;\n    private final String minute = JMeterUtils.getResString(\"minute\"); // $NON-NLS-1$\n    private final int REFRESH_PERIOD = JMeterUtils.getPropDefault(\"jmeter.gui.refresh_period\", 500); // $NON-NLS-1$\n    private final Graph graph;\n    private JCheckBox data;\n    private JCheckBox average;\n    private JCheckBox deviation;\n    private JCheckBox throughput;\n    private JCheckBox median;\n    private JTextField dataField;\n    private JTextField averageField;\n    private JTextField deviationField;\n    private JTextField throughputField;\n    private JTextField medianField;\n    private final Deque<SampleResult> newSamples = new ConcurrentLinkedDeque<>();\n    /**\n     * Constructor for the GraphVisualizer object.\n     */\n<fim_suffix>    public GraphVisualizer() {\n        model = new CachingStatCalculator(\"Graph\");\n        graph = new Graph(model);\n        init();\n    }\n    /**\n     * Gets the Image attribute of the GraphVisualizer object.\n     *\n     * @return the Image value\n     */\n    @Override\n    public Image getImage() {\n        Image result = graph.createImage(graph.getWidth(), graph.getHeight());\n        graph.paintComponent(result.getGraphics());\n        return result;\n    }\n    /**\n     * @param s Sample\n     * @deprecated use {@link GraphVisualizer#add(SampleResult)} instead\n     */\n    @Deprecated\n    public void updateGui(Sample s) {\n        JMeterUtils.runSafe(false, () -> updateGuiInAWTThread(s));\n    }\n    // called inside AWT Thread\n    private void collectSamplesFromQueue() {\n        // We have received one more sample\n        Sample s = null;\n        synchronized (graph) {\n            while (!newSamples.isEmpty()) {\n                s = model.addSample(newSamples.pop());\n            }\n        }\n        updateGuiInAWTThread(s);\n    }\n    // called inside AWT Thread\n    private void updateGuiInAWTThread(Sample s) {\n        if (s == null) {\n            return;\n        }\n        graph.updateGui(s);\n        noSamplesField.setText(Long.toString(s.getCount()));\n        dataField.setText(Long.toString(s.getData()));\n        averageField.setText(Long.toString(s.getAverage()));\n        deviationField.setText(Long.toString(s.getDeviation()));\n        throughputField.setText(nf.format(60 * s.getThroughput()) + \"/\" + minute); // $NON-NLS-1$\n        medianField.setText(Long.toString(s.getMedian()));\n        updateYAxis();\n    }\n    @Override\n    public void add(final SampleResult res) {\n        newSamples.add(res);\n    }\n    @Override\n    public String getLabelResource() {\n        return \"graph_results_title\"; // $NON-NLS-1$\n    }\n    @Override\n    public void itemStateChanged(ItemEvent e) {\n        if (e.getItem() == data) {\n            this.graph.enableData(e.getStateChange() == ItemEvent.SELECTED);\n        } else if (e.getItem() == average) {\n            this.graph.enableAverage(e.getStateChange() == ItemEvent.SELECTED);\n        } else if (e.getItem() == deviation) {\n            this.graph.enableDeviation(e.getStateChange() == ItemEvent.SELECTED);\n        } else if (e.getItem() == throughput) {\n            this.graph.enableThroughput(e.getStateChange() == ItemEvent.SELECTED);\n        } else if (e.getItem() == median) {\n            this.graph.enableMedian(e.getStateChange() == ItemEvent.SELECTED);\n        }\n        this.graph.repaint();\n    }\n    @Override\n    public void clearData() {\n        synchronized (graph) {\n            graph.clearData();\n            model.clear();\n            newSamples.clear();\n        }\n        dataField.setText(ZERO);\n        averageField.setText(ZERO);\n        deviationField.setText(ZERO);\n        throughputField.setText(\"0/\" + minute); //$NON-NLS-1$\n        medianField.setText(ZERO);\n        noSamplesField.setText(ZERO);\n        updateYAxis();\n        repaint();\n    }\n    @Override\n    public String toString() {\n        return \"Show the samples analysis as dot plots\";\n    }\n    /**\n     * Update the max and min value of the Y axis.\n     */\n    private void updateYAxis() {\n        maxYField.setText(Long.toString(graph.getGraphMax()));\n        minYField.setText(ZERO);\n    }\n    /**\n     * Initialize the GUI.\n     */\n    private void init() { // WARNING: called from ctor so must not be overridden (i.e. must be private or final)\n        this.setLayout(new BorderLayout());\n        // MAIN PANEL\n        Border margin = new EmptyBorder(10, 10, 5, 10);\n        this.setBorder(margin);\n        // Set up the graph with header, footer, Y axis and graph display\n        JPanel graphPanel = new JPanel(new BorderLayout());\n        graphPanel.add(createYAxis(), BorderLayout.WEST);\n        graphPanel.add(createChoosePanel(), BorderLayout.NORTH);\n        graphPanel.add(createGraphPanel(), BorderLayout.CENTER);\n        graphPanel.add(createGraphInfoPanel(), BorderLayout.SOUTH);\n        // Add the main panel and the graph\n        this.add(makeTitlePanel(), BorderLayout.NORTH);\n        this.add(graphPanel, BorderLayout.CENTER);\n        new Timer(REFRESH_PERIOD, e -> collectSamplesFromQueue()).start();\n    }\n    // Methods used in creating the GUI\n    /**\n     * Creates the panel containing the graph's Y axis labels.\n     *\n     * @return the Y axis panel\n     */\n    private JPanel createYAxis() {\n        JPanel graphYAxisPanel = new JPanel();\n        graphYAxisPanel.setLayout(new BorderLayout());\n        maxYField = createYAxisField(5);\n        minYField = createYAxisField(3);\n        graphYAxisPanel.add(createYAxisPanel(\"graph_results_ms\", maxYField), BorderLayout.NORTH); // $NON-NLS-1$\n        graphYAxisPanel.add(createYAxisPanel(\"graph_results_ms\", minYField), BorderLayout.SOUTH); // $NON-NLS-1$\n        return graphYAxisPanel;\n    }\n    /**\n     * Creates a text field to be used for the value of a Y axis label. These\n     * fields hold the minimum and maximum values for the graph. The units are\n     * kept in a separate label outside of this field.\n     *\n     * @param length<fim_middle>// function below has no smell\n"}