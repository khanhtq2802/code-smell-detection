{"text": "<fim_prefix>package org.springframework.samples.mvc.convert;\n\nimport java.text.ParseException;\nimport java.util.HashSet;\nimport java.util.Locale;\nimport java.util.Set;\n\nimport org.springframework.format.AnnotationFormatterFactory;\nimport org.springframework.format.Formatter;\nimport org.springframework.format.Parser;\nimport org.springframework.format.Printer;\n\n<fim_suffix>public class MaskFormatAnnotationFormatterFactory implements AnnotationFormatterFactory<MaskFormat> {\n\n\tpublic Set<Class<?>> getFieldTypes() {\n\t\tSet<Class<?>> fieldTypes = new HashSet<Class<?>>(1, 1);\n\t\tfieldTypes.add(String.class);\n\t\treturn fieldTypes;\n\t}\n\n\tpublic Parser<?> getParser(MaskFormat annotation, Class<?> fieldType) {\n\t\treturn new MaskFormatter(annotation.value());\n\t}\n\n\tpublic Printer<?> getPrinter(MaskFormat annotation, Class<?> fieldType) {\n\t\treturn new MaskFormatter(annotation.value());\n\t}\n\t\n\tprivate static class MaskFormatter implements Formatter<String> {\n\n\t\tprivate javax.swing.text.MaskFormatter delegate;\n\n\t\tpublic MaskFormatter(String mask) {\n\t\t\ttry {\n\t\t\t\tthis.delegate = new javax.swing.text.MaskFormatter(mask);\n\t\t\t\tthis.delegate.setValueContainsLiteralCharacters(false);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tthrow new IllegalStateException(\"Mask could not be parsed \" + mask, e);\n\t\t\t}\n\t\t}\n\n\t\tpublic String print(String object, Locale locale) {\n\t\t\ttry {\n\t\t\t\treturn delegate.valueToString(object);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tthrow new IllegalArgumentException(\"Unable to print using mask \" + delegate.getMask(), e);\n\t\t\t}\n\t\t}\n\n\t\tpublic String parse(String text, Locale locale) throws ParseException {\n\t\t\treturn (String) delegate.stringToValue(text);\n\t\t}\n\n\t}\n\n}<fim_middle>// class below has no smell\n"}