{"text": "<fim_prefix>        \"swing.plaf.metal.controlFont\",\n        \"swing.plaf.metal.controlFont\",\n        \"swing.plaf.metal.smallFont\"\n    };\n    /**\n     * Returns the ideal font name for the font identified by key.\n     */\n    static String getDefaultFontName(int key) {\n        return fontNames[key];\n    }\n    /**\n     * Returns the ideal font size for the font identified by key.\n     */\n    static int getDefaultFontSize(int key) {\n        return fontSizes[key];\n    }\n    /**\n     * Returns the ideal font style for the font identified by key.\n     */\n    static int getDefaultFontStyle(int key) {\n        if (key != WINDOW_TITLE_FONT) {\n            Object boldMetal = null;\n            if (AppContext.getAppContext().get(\n                    SwingUtilities2.LAF_STATE_KEY) != null) {\n                // Only access the boldMetal key if a look and feel has\n                // been loaded, otherwise we'll trigger loading the look\n                // and feel.\n                boldMetal = UIManager.get(\"swing.boldMetal\");\n            }\n            if (boldMetal != null) {\n                if (Boolean.FALSE.equals(boldMetal)) {\n                    return Font.PLAIN;\n                }\n            }\n            else if (PLAIN_FONTS) {\n                return Font.PLAIN;\n            }\n        }\n        return fontStyles[key];\n    }\n    /**\n     * Returns the default used to look up the specified font.\n     */\n    static String getDefaultPropertyName(int key) {\n        return defaultNames[key];\n    }\n    static {\n        Object boldProperty = java.security.AccessController.doPrivileged(\n            new GetPropertyAction(\"swing.boldMetal\"));\n        if (boldProperty == null || !\"false\".equals(boldProperty)) {\n            PLAIN_FONTS = false;\n        }\n        else {\n            PLAIN_FONTS = true;\n        }\n    }\n    private static final ColorUIResource primary1 = new ColorUIResource(\n                              102, 102, 153);\n    private static final ColorUIResource primary2 = new ColorUIResource(153,\n                              153, 204);\n    private static final ColorUIResource primary3 = new ColorUIResource(\n                              204, 204, 255);\n    private static final ColorUIResource secondary1 = new ColorUIResource(\n                              102, 102, 102);\n    private static final ColorUIResource secondary2 = new ColorUIResource(\n                              153, 153, 153);\n    private static final ColorUIResource secondary3 = new ColorUIResource(\n                              204, 204, 204);\n    private FontDelegate fontDelegate;\n    /**\n     * Returns the name of this theme. This returns {@code \"Steel\"}.\n     *\n     * @return the name of this theme.\n     */\n    public String getName() { return \"Steel\"; }\n    /**\n     * Creates and returns an instance of {@code DefaultMetalTheme}.\n     */\n    public DefaultMetalTheme() {\n        install();\n    }\n    /**\n     * Returns the primary 1 color. This returns a color with rgb values\n     * of 102, 102, and 153, respectively.\n     *\n     * @return the primary 1 color\n     */\n    protected ColorUIResource getPrimary1() { return primary1; }\n    /**\n     * Returns the primary 2 color. This returns a color with rgb values\n     * of 153, 153, 204, respectively.\n     *\n     * @return the primary 2 color\n     */\n    protected ColorUIResource getPrimary2() { return primary2; }\n    /**\n     * Returns the primary 3 color. This returns a color with rgb values\n     * 204, 204, 255, respectively.\n     *\n     * @return the primary 3 color\n     */\n    protected ColorUIResource getPrimary3() { return primary3; }\n    /**\n     * Returns the secondary 1 color. This returns a color with rgb values\n     * 102, 102, and 102, respectively.\n     *\n     * @return the secondary 1 color\n     */\n    protected ColorUIResource getSecondary1() { return secondary1; }\n    /**\n     * Returns the secondary 2 color. This returns a color with rgb values\n     * 153, 153, and 153, respectively.\n     *\n     * @return the secondary 2 color\n     */\n    protected ColorUIResource getSecondary2() { return secondary2; }\n    /**\n     * Returns the secondary 3 color. This returns a color with rgb values\n     * 204, 204, and 204, respectively.\n     *\n     * @return the secondary 3 color\n     */\n    protected ColorUIResource getSecondary3() { return secondary3; }\n    /**\n     * Returns the control text font. This returns Dialog, 12pt. If\n     * plain fonts have been enabled as described in <a href=\"#fontStyle\">\n     * font style</a>, the font style is plain. Otherwise the font style is\n     * bold.\n     *\n     * @return the control text font\n     */\n    public FontUIResource getControlTextFont() {\n        return getFont(CONTROL_TEXT_FONT);\n    }\n    /**\n     * Returns the system text font. This returns Dialog, 12pt, plain.\n     *\n     * @return the system text font\n     */\n    public FontUIResource getSystemTextFont() {\n        return getFont(SYSTEM_TEXT_FONT);\n    }\n    /**\n     * Returns the user text font. This returns Dialog, 12pt, plain.\n     *\n     * @return the user text font\n     */\n    public FontUIResource getUserTextFont() {\n        return getFont(USER_TEXT_FONT);\n    }\n    /**\n     * Returns the menu text font. This returns Dialog, 12pt. If\n     * plain fonts have been enabled as described in <a href=\"#fontStyle\">\n     * font style</a>, the font style is plain. Otherwise the font style is\n     * bold.\n     *\n     * @return the menu text font\n     */\n    public FontUIResource getMenuTextFont() {\n        return getFont(MENU_TEXT_FONT);\n    }\n    /**\n     * Returns the window title font. This returns Dialog, 12pt, bold.\n     *\n     * @return the window title font\n     */\n    public FontUIResource getWindowTitleFont() {\n        return getFont(WINDOW_TITLE_FONT);\n    }\n    /**\n     * Returns the sub-text font. This returns Dialog, 10pt, plain.\n     *\n     * @return the sub-text font\n     */\n    public FontUIResource getSubTextFont() {\n        return getFont(SUB_TEXT_FONT);\n    }\n    private FontUIResource getFont(int key) {\n        return fontDelegate.getFont(key);\n    }\n    void install() {\n        if (MetalLookAndFeel.isWindows() &&\n                             MetalLookAndFeel.useSystemFonts()) {\n            fontDelegate = new WindowsFontDelegate();\n        }\n        else {\n            fontDelegate = new FontDelegate();\n        }\n    }\n    /**\n     * Returns true if this is a theme provided by the core platform.\n     */\n    boolean isSystemTheme() {\n        return (getClass() == DefaultMetalTheme.class);\n    }\n    /**\n     * FontDelegates add an extra level of indirection to obtaining fonts.\n     */\n<fim_suffix>    private static class FontDelegate {\n        private static int[] defaultMapping = {\n            CONTROL_TEXT_FONT, SYSTEM_TEXT_FONT,\n            USER_TEXT_FONT, CONTROL_TEXT_FONT,\n            CONTROL_TEXT_FONT, SUB_TEXT_FONT\n        };\n        FontUIResource[] fonts;\n        // menu and window are mapped to controlFont\n        public FontDelegate() {\n            fonts = new FontUIResource[6];\n        }\n        public FontUIResource getFont(int type) {\n            int mappedType = defaultMapping[type];\n            if (fonts[type] == null) {\n                Font f = getPrivilegedFont(mappedType);\n                if (f == null) {\n                    f = new Font(getDefaultFontName(type),\n                             getDefaultFontStyle(type),\n                             getDefaultFontSize(type));\n                }\n                fonts[type] = new FontUIResource(f);\n            }\n            return fonts[type];\n        }\n        /**\n         * This is the same as invoking\n         * <code>Font.getFont(key)</code>, with the exception\n         * that it is wrapped inside a <code>doPrivileged</code> call.\n         */\n        protected Font getPrivilegedFont(final int key) {\n            return java.security.AccessController.doPrivileged(\n                new java.security.PrivilegedAction<Font>() {\n                    public Font run() {\n                        return Font.getFont(getDefaultPropertyName(key));\n                    }\n                }\n                );\n        }\n    }<fim_middle>// class below has no smell\n"}