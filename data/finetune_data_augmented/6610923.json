{"text": "<fim_prefix>    public final void mPrivate() throws RecognitionException {\n        try {\n            int _type = Private;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:69:9: ( 'private' )\n            // InternalTypesLexer.g:69:11: 'private'\n            {\n            match(\"private\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Private\"\n    // $ANTLR start \"Project\"\n    public final void mProject() throws RecognitionException {\n        try {\n            int _type = Project;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:71:9: ( 'project' )\n            // InternalTypesLexer.g:71:11: 'project'\n            {\n            match(\"project\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Project\"\n    // $ANTLR start \"Delete\"\n    public final void mDelete() throws RecognitionException {\n        try {\n            int _type = Delete;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:73:8: ( 'delete' )\n            // InternalTypesLexer.g:73:10: 'delete'\n            {\n            match(\"delete\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Delete\"\n    // $ANTLR start \"Export\"\n    public final void mExport() throws RecognitionException {\n        try {\n            int _type = Export;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:75:8: ( 'export' )\n            // InternalTypesLexer.g:75:10: 'export'\n            {\n            match(\"export\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Export\"\n    // $ANTLR start \"Import\"\n    public final void mImport() throws RecognitionException {\n        try {\n            int _type = Import;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:77:8: ( 'import' )\n            // InternalTypesLexer.g:77:10: 'import'\n            {\n            match(\"import\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Import\"\n    // $ANTLR start \"Object\"\n    public final void mObject() throws RecognitionException {\n        try {\n            int _type = Object;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:79:8: ( 'object' )\n            // InternalTypesLexer.g:79:10: 'object'\n            {\n            match(\"object\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Object\"\n    // $ANTLR start \"Public\"\n    public final void mPublic() throws RecognitionException {\n        try {\n            int _type = Public;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:81:8: ( 'public' )\n            // InternalTypesLexer.g:81:10: 'public'\n            {\n            match(\"public\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Public\"\n    // $ANTLR start \"Return\"\n    public final void mReturn() throws RecognitionException {\n        try {\n            int _type = Return;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:83:8: ( 'return' )\n            // InternalTypesLexer.g:83:10: 'return'\n            {\n            match(\"return\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Return\"\n    // $ANTLR start \"Static\"\n    public final void mStatic() throws RecognitionException {\n        try {\n            int _type = Static;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:85:8: ( 'static' )\n            // InternalTypesLexer.g:85:10: 'static'\n            {\n            match(\"static\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Static\"\n    // $ANTLR start \"Switch\"\n    public final void mSwitch() throws RecognitionException {\n        try {\n            int _type = Switch;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:87:8: ( 'switch' )\n            // InternalTypesLexer.g:87:10: 'switch'\n            {\n            match(\"switch\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Switch\"\n    // $ANTLR start \"Target\"\n    public final void mTarget() throws RecognitionException {\n        try {\n            int _type = Target;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:89:8: ( 'target' )\n            // InternalTypesLexer.g:89:10: 'target'\n            {\n            match(\"target\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Target\"\n    // $ANTLR start \"Typeof\"\n    public final void mTypeof() throws RecognitionException {\n        try {\n            int _type = Typeof;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:91:8: ( 'typeof' )\n            // InternalTypesLexer.g:91:10: 'typeof'\n            {\n            match(\"typeof\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Typeof\"\n    // $ANTLR start \"Async\"\n    public final void mAsync() throws RecognitionException {\n        try {\n            int _type = Async;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:93:7: ( 'async' )\n            // InternalTypesLexer.g:93:9: 'async'\n            {\n            match(\"async\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Async\"\n    // $ANTLR start \"Await\"\n    public final void mAwait() throws RecognitionException {\n        try {\n            int _type = Await;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:95:7: ( 'await' )\n            // InternalTypesLexer.g:95:9: 'await'\n            {\n            match(\"await\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Await\"\n    // $ANTLR start \"Break\"\n    public final void mBreak() throws RecognitionException {\n        try {\n            int _type = Break;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:97:7: ( 'break' )\n            // InternalTypesLexer.g:97:9: 'break'\n            {\n            match(\"break\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Break\"\n    // $ANTLR start \"Catch\"\n    public final void mCatch() throws RecognitionException {\n        try {\n            int _type = Catch;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:99:7: ( 'catch' )\n            // InternalTypesLexer.g:99:9: 'catch'\n            {\n            match(\"catch\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    // $ANTLR end \"Catch\"\n    // $ANTLR start \"Class\"\n<fim_suffix>    public final void mClass() throws RecognitionException {\n        try {\n            int _type = Class;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            // InternalTypesLexer.g:101:7: ( 'class' )\n            // InternalTypesLexer.g:101:9: 'class'\n            {\n            match(\"class\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }<fim_middle>// function below has no smell\n"}