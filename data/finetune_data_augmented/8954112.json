{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.hbase;\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.hadoop.hbase.Cell;\nimport org.apache.hadoop.hbase.CellUtil;\nimport org.apache.hadoop.hbase.KeyValue;\nimport org.apache.hadoop.hbase.KeyValueUtil;\nimport org.apache.hadoop.hbase.client.Result;\nimport org.apache.hadoop.hbase.protobuf.ProtobufUtil;\nimport org.apache.hadoop.hbase.protobuf.generated.ClientProtos;\nimport org.apache.hadoop.io.Writable;\n\n<fim_suffix>public class ResultWritable implements Writable {\n\n  private Result result;\n\n  public ResultWritable() {\n\n  }\n  public ResultWritable(Result result) {\n    this.result = result;\n  }\n\n  public Result getResult() {\n    return result;\n  }\n  public void setResult(Result result) {\n    this.result = result;\n  }\n  @Override\n  public void readFields(final DataInput in)\n  throws IOException {\n    ClientProtos.Result protosResult = ClientProtos.Result.parseDelimitedFrom(DataInputInputStream.from(in));\n    int size = in.readInt();\n    if(size < 0) {\n      throw new IOException(\"Invalid size \" + size);\n    }\n    Cell[] kvs = new Cell[size];\n    for (int i = 0; i < kvs.length; i++) {\n      kvs[i] = KeyValue.create(in);\n    }\n    result = ProtobufUtil.toResult(protosResult, CellUtil.createCellScanner(kvs));\n  }\n  @Override\n  public void write(final DataOutput out)\n  throws IOException {\n    ProtobufUtil.toResultNoData(result).writeDelimitedTo(DataOutputOutputStream.from(out));\n    out.writeInt(result.size());\n    for(Cell cell : result.listCells()) {\n      KeyValue kv = KeyValueUtil.ensureKeyValue(cell);\n      KeyValue.write(kv, out);\n    }\n  }\n}<fim_middle>// class below has no smell\n"}