{"text": "<fim_prefix>\n<fim_suffix>public class VizObjectTester {\n\t/**\n\t * This operation checks the VizObject to insure that the id, name and\n\t * description getters and setters function properly.\n\t */\n\t@Test\n\tpublic void checkProperties() {\n\t\t// Local declarations\n\t\tint id = 20110901;\n\t\tString name = \"September 1st 2011\";\n\t\tString description = \"The 1st day of the ninth month in the year of \"\n\t\t\t\t+ \"our Lord 2011\";\n\t\t// Create the VizObject\n\t\tVizObject testNC = new VizObject();\n\t\t// Set up the id, name and description\n\t\ttestNC.setId(id);\n\t\ttestNC.setName(name);\n\t\ttestNC.setDescription(description);\n\t\t// Check the id, name and description\n\t\tassertEquals(testNC.getId(), id);\n\t\tassertEquals(testNC.getName(), name);\n\t\tassertEquals(testNC.getDescription(), description);\n\t}\n\t/**\n\t * This operation checks the VizObject class to ensure that its copy() and\n\t * clone() operations work as specified.\n\t */\n\t@Test\n\tpublic void checkCopying() {\n\t\t// Local declarations\n\t\tint id = 20110901;\n\t\tString name = \"September 1st 2011\";\n\t\tString description = \"The 1st day of the ninth month in the year of \"\n\t\t\t\t+ \"our Lord 2011\";\n\t\tVizObject testNC = new VizObject();\n\t\t// Test to show valid usage of clone\n\t\t// Set up the id, name and description\n\t\ttestNC.setId(id);\n\t\ttestNC.setName(name);\n\t\ttestNC.setDescription(description);\n\t\t// Run clone operation\n\t\tVizObject cloneNC = (VizObject) testNC.clone();\n\t\t// Check the id, name and description with clone\n\t\tassertEquals(testNC.getId(), cloneNC.getId());\n\t\tassertEquals(testNC.getName(), cloneNC.getName());\n\t\tassertEquals(testNC.getDescription(), cloneNC.getDescription());\n\t\t// Test to show valid usage of copy\n\t\t// Local declarations\n\t\tid = 20110901;\n\t\tname = \"September 1st 2011\";\n\t\tdescription = \"The 1st day of the ninth month in the year of \"\n\t\t\t\t+ \"our Lord 2011\";\n\t\ttestNC = new VizObject();\n\t\t// Set up the id, name and description\n\t\ttestNC.setId(id);\n\t\ttestNC.setName(name);\n\t\ttestNC.setDescription(description);\n\t\t// Create a new instance of VizObject and copy contents\n\t\tVizObject testNC2 = new VizObject();\n\t\ttestNC2.copy(testNC);\n\t\t// Check the id, name and description with copy\n\t\tassertEquals(testNC.getId(), testNC2.getId());\n\t\tassertEquals(testNC.getName(), testNC2.getName());\n\t\tassertEquals(testNC.getDescription(), testNC2.getDescription());\n\t\t// Test to show an invalid use of copy - null args\n\t\t// Local declarations\n\t\tid = 20110901;\n\t\tname = \"September 1st 2011\";\n\t\tdescription = \"The 1st day of the ninth month in the year of \"\n\t\t\t\t+ \"our Lord 2011\";\n\t\ttestNC = new VizObject();\n\t\t// Set up the id, name and description\n\t\ttestNC.setId(id);\n\t\ttestNC.setName(name);\n\t\ttestNC.setDescription(description);\n\t\t// Attempt the null copy\n\t\ttestNC.copy(null);\n\t\t// Check the id, name and description - nothing has changed\n\t\tassertEquals(testNC.getId(), id);\n\t\tassertEquals(testNC.getName(), name);\n\t\tassertEquals(testNC.getDescription(), description);\n\t}\n\t/**\n\t * <p>\n\t * This operation checks the ability of the VizObject to persist itself to\n\t * XML and to load itself from an XML input stream.\n\t * </p>\n\t * \n\t * @throws IOException\n\t * @throws JAXBException\n\t * @throws NullPointerException\n\t * \n\t */\n\t@Test\n\tpublic void checkXMLPersistence()\n\t\t\tthrows NullPointerException, JAXBException, IOException {\n\t\t// TODO Auto-generated method stub\n\t\t/*\n\t\t * The following sets of operations will be used to test the\n\t\t * \"read and write\" portion of the VizObject. It will demonstrate the\n\t\t * behavior of reading and writing from an\n\t\t * \"XML (inputStream and outputStream)\" file. It will use an annotated\n\t\t * VizObject to demonstrate basic behavior.\n\t\t */\n\t\t// Local declarations\n\t\tVizObject testNC = null, testNC2 = null;\n\t\tint id = 20110901;\n\t\tString name = \"September 1st 2011\";\n\t\tString description = \"The 1st day of the ninth month in the year of \"\n\t\t\t\t+ \"our Lord 2011\";\n\t\tVizJAXBHandler xmlHandler = new VizJAXBHandler();\n\t\tArrayList<Class> classList = new ArrayList<Class>();\n\t\tclassList.add(VizObject.class);\n\t\t// Demonstrate a basic \"write\" to file. Should not fail\n\t\t// Initialize the object and set values.\n\t\ttestNC = new VizObject();\n\t\ttestNC.setId(id);\n\t\ttestNC.setName(name);\n\t\ttestNC.setDescription(description);\n\t\t// persist to an output stream\n\t\tByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n\t\txmlHandler.write(testNC, classList, outputStream);\n\t\tByteArrayInputStream inputStream = new ByteArrayInputStream(\n\t\t\t\toutputStream.toByteArray());\n\t\t// Convert to inputStream\n\t\ttestNC2 = (VizObject) xmlHandler.read(classList, inputStream);\n\t\t// Check that it equals the persisted object\n\t\tassertTrue(testNC.equals(testNC2));\n\t}\n\t/**\n\t * <p>\n\t * This operation checks the VizObject class to insure that its equals()\n\t * operation works.\n\t * </p>\n\t * \n\t */\n\t@Test\n\tpublic void checkEquality() {\n\t\t// Create an VizObject\n\t\tVizObject testVizObject = new VizObject();\n\t\t// Set its data\n\t\ttestVizObject.setId(12);\n\t\ttestVizObject.setName(\"ICE VizObject\");\n\t\ttestVizObject.setDescription(\"This is an VizObject that will \"\n\t\t\t\t+ \"be used for testing equality with other VizObjects.\");\n\t\t// Create another VizObject to assert Equality with the last\n\t\tVizObject equalObject = new VizObject();\n\t\t// Set its data, equal to testVizObject\n\t\tequalObject.setId(12);\n\t\tequalObject.setName(\"ICE VizObject\");\n\t\tequalObject.setDescription(\"This is an VizObject that will \"\n\t\t\t\t+ \"be used for testing equality with other VizObjects.\");\n\t\t// Create an VizObject that is not equal to testVizObject\n\t\tVizObject unEqualObject = new VizObject();\n\t\t// Set its data, not equal to testVizObject\n\t\tunEqualObject.setId(52);\n\t\tunEqualObject.setName(\"Bill the VizObject\");\n\t\tunEqualObject.setDescription(\"This is an VizObject to verify that \"\n\t\t\t\t+ \"VizObject.equals() returns false for an object that is not \"\n\t\t\t\t+ \"equivalent to testVizObject.\");\n\t\t// Create a third VizObject to test Transitivity\n\t\tVizObject transitiveObject = new VizObject();\n\t\t// Set its data, not equal to testVizObject\n\t\ttransitiveObject.setId(12);\n\t\ttransitiveObject.setName(\"ICE VizObject\");\n\t\ttransitiveObject.setDescription(\"This is an VizObject that will \"\n\t\t\t\t+ \"be used for testing equality with other VizObjects.\");\n\t\t// Assert that these two VizObjects are equal\n\t\tassertTrue(testVizObject.equals(equalObject));\n\t\t// Assert that two unequal objects returns false\n\t\tassertFalse(testVizObject.equals(unEqualObject));\n\t\t// Check that equals() is Reflexive\n\t\t// x.equals(x) = true\n\t\tassertTrue(testVizObject.equals(testVizObject));\n\t\t// Check that equals() is Symmetric\n\t\t// x.equals(y) = true iff y.equals(x) = true\n\t\tassertTrue(testVizObject.equals(equalObject)\n\t\t\t\t&& equalObject.equals(testVizObject));\n\t\t// Check that equals() is Transitive\n\t\t// x.equals(y) = true, y.equals(z) = true => x.equals(z) = true\n\t\tif (testVizObject.equals(equalObject)\n\t\t\t\t&& equalObject.equals(transitiveObject)) {<fim_middle>// class below is blob\n"}