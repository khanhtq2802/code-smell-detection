{"text": "<fim_prefix> *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.fineract.integrationtests.common;\nimport static com.jayway.restassured.RestAssured.given;\nimport static com.jayway.restassured.path.json.JsonPath.from;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.fail;\nimport java.io.File;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.http.conn.HttpHostConnectException;\nimport org.joda.time.DateTimeZone;\nimport org.joda.time.LocalDate;\nimport com.jayway.restassured.RestAssured;\nimport com.jayway.restassured.path.json.JsonPath;\nimport com.jayway.restassured.specification.RequestSpecification;\nimport com.jayway.restassured.specification.ResponseSpecification;\n/**\n * Util for RestAssured tests. This class here in src/integrationTest is\n * copy/pasted to src/test; please keep them in sync.\n */\n<fim_suffix>@SuppressWarnings(\"unchecked\")\npublic class Utils {\n    public static final String TENANT_IDENTIFIER = \"tenantIdentifier=default\";\n    public static final String TENANT_TIME_ZONE = \"Asia/Kolkata\";\n    private static final String LOGIN_URL = \"/fineract-provider/api/v1/authentication?username=mifos&password=password&\" + TENANT_IDENTIFIER;\n    public static void initializeRESTAssured() {\n        RestAssured.baseURI = \"https://localhost\";\n        RestAssured.port = 8443;\n        RestAssured.keystore(\"src/main/resources/keystore.jks\", \"openmf\");\n    }\n    public static String loginIntoServerAndGetBase64EncodedAuthenticationKey() {\n        try {\n            System.out.println(\"-----------------------------------LOGIN-----------------------------------------\");\n            final String json = RestAssured.post(LOGIN_URL).asString();\n            assertThat(\"Failed to login into fineract platform\", StringUtils.isBlank(json), is(false));\n            return JsonPath.with(json).get(\"base64EncodedAuthenticationKey\");\n        } catch (final Exception e) {\n            if (e instanceof HttpHostConnectException) {\n                final HttpHostConnectException hh = (HttpHostConnectException) e;\n                fail(\"Failed to connect to fineract platform:\" + hh.getMessage());\n            }\n            throw new RuntimeException(e);\n        }\n    }\n    public static <T> T performServerGet(final RequestSpecification requestSpec, final ResponseSpecification responseSpec,\n            final String getURL, final String jsonAttributeToGetBack) {\n        final String json = given().spec(requestSpec).expect().spec(responseSpec).log().ifError().when().get(getURL).andReturn().asString();\n        if (jsonAttributeToGetBack == null) { return (T) json; }\n        return (T) from(json).get(jsonAttributeToGetBack);\n    }\n    public static String performGetTextResponse(final RequestSpecification requestSpec, final ResponseSpecification responseSpec,\n                                                final String getURL){\n        return given().spec(requestSpec).expect().spec(responseSpec).log().ifError().when().get(getURL).andReturn().asString();\n    }\n    public static byte[] performGetBinaryResponse(final RequestSpecification requestSpec, final ResponseSpecification responseSpec,\n                                                final String getURL){\n        return given().spec(requestSpec).expect().spec(responseSpec).log().ifError().when().get(getURL).andReturn().asByteArray();\n    }\n    public static <T> T performServerPost(final RequestSpecification requestSpec, final ResponseSpecification responseSpec,\n            final String postURL, final String jsonBodyToSend, final String jsonAttributeToGetBack) {\n        final String json = given().spec(requestSpec).body(jsonBodyToSend).expect().spec(responseSpec).log().ifError().when().post(postURL)\n                .andReturn().asString();\n        if (jsonAttributeToGetBack == null) { return (T) json; }\n        return (T) from(json).get(jsonAttributeToGetBack);\n    }\n    public static <T> T performServerPut(final RequestSpecification requestSpec, final ResponseSpecification responseSpec,\n            final String putURL, final String jsonBodyToSend, final String jsonAttributeToGetBack) {\n        final String json = given().spec(requestSpec).body(jsonBodyToSend).expect().spec(responseSpec).log().ifError().when().put(putURL)\n                .andReturn().asString();\n        return (T) from(json).get(jsonAttributeToGetBack);\n    }\n    public static <T> T performServerDelete(final RequestSpecification requestSpec, final ResponseSpecification responseSpec,\n            final String deleteURL, final String jsonAttributeToGetBack) {\n        final String json = given().spec(requestSpec).expect().spec(responseSpec).log().ifError().when().delete(deleteURL).andReturn()\n                .asString();\n        return (T) from(json).get(jsonAttributeToGetBack);\n    }\n    public static String convertDateToURLFormat(final String dateToBeConvert) {\n        final SimpleDateFormat oldFormat = new SimpleDateFormat(\"dd MMMMMM yyyy\", Locale.US);\n        final SimpleDateFormat newFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        String reformattedStr = \"\";\n        try {\n            reformattedStr = newFormat.format(oldFormat.parse(dateToBeConvert));\n        } catch (final ParseException e) {\n            e.printStackTrace();\n        }\n        return reformattedStr;\n    }\n    public static String randomStringGenerator(final String prefix, final int len, final String sourceSetString) {\n        final int lengthOfSource = sourceSetString.length();\n        final Random rnd = new Random();\n        final StringBuilder sb = new StringBuilder(len);\n        for (int i = 0; i < len; i++) {\n            sb.append((sourceSetString).charAt(rnd.nextInt(lengthOfSource)));\n        }\n        return (prefix + (sb.toString()));\n    }\n    public static String randomStringGenerator(final String prefix, final int len) {\n        return randomStringGenerator(prefix, len, \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n    }\n    public static String randomNameGenerator(final String prefix, final int lenOfRandomSuffix) {\n        return randomStringGenerator(prefix, lenOfRandomSuffix);\n    }\n    public static Long randomNumberGenerator(final int expectedLength){\n       final String source=\"1234567890\";\n       final int lengthofSource=source.length();\n       final Random random=new Random();\n       StringBuilder stringBuilder=new StringBuilder(expectedLength);\n        for (int i = 0; i < expectedLength; i++) {\n            stringBuilder.append(source.charAt(random.nextInt(lengthofSource)));\n        }\n        return Long.parseLong(stringBuilder.toString());\n    }\n    public static String convertDateToURLFormat(final Calendar dateToBeConvert) {\n        DateFormat dateFormat = new SimpleDateFormat(\"dd MMMMMM yyyy\");\n        dateFormat.setTimeZone(Utils.getTimeZoneOfTenant());\n        return dateFormat.format(dateToBeConvert.getTime());\n    }\n    public static LocalDate getLocalDateOfTenant() {\n        LocalDate today = new LocalDate();\n        final DateTimeZone zone = DateTimeZone.forID(TENANT_TIME_ZONE);\n        if (zone != null) {\n            today = new LocalDate(zone);\n        }\n        return today;\n    }\n    public static TimeZone getTimeZoneOfTenant() {\n        return TimeZone.getTimeZone(TENANT_TIME_ZONE);\n    }\n    public static String performServerTemplatePost(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,\n                                                   final String postURL,final String legalFormType,final File file,final String locale,final String dateFormat) {\n        final String importDocumentId=given().spec(requestSpec)\n                .queryParam(\"legalFormType\",legalFormType)\n                .multiPart(\"file\",file)\n                .formParam(\"locale\",locale)\n                .formParam(\"dateFormat\",dateFormat)\n                .expect().spec(responseSpec).\n                log().ifError().when().post(postURL)\n                .andReturn().asString();\n        return importDocumentId;\n    }\n    public static String performServerOutputTemplateLocationGet(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,\n                                                                final String getURL,final String importDocumentId){\n        final String templateLocation=given().spec(requestSpec).\n                queryParam(\"importDocumentId\",importDocumentId)\n                .expect().spec(responseSpec)\n                .log().ifError().when().get(getURL)\n                .andReturn().asString();\n        return templateLocation.substring(1,templateLocation.length()-1);\n    }\n}<fim_middle>// class below is blob\n"}