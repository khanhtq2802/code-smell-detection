{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.sshd.cli.server.helper;\n\nimport java.io.IOException;\nimport java.nio.file.CopyOption;\nimport java.nio.file.Path;\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.sshd.common.subsystem.sftp.SftpConstants;\nimport org.apache.sshd.server.session.ServerSession;\nimport org.apache.sshd.server.subsystem.sftp.SftpEventListener;\n\n/**\n * @author <a href=\"mailto:dev@mina.apache.org\">Apache MINA SSHD Project</a>\n */\n<fim_suffix>public class SftpServerSubSystemEventListener extends ServerEventListenerHelper implements SftpEventListener {\n    public SftpServerSubSystemEventListener(Appendable stdout, Appendable stderr) {\n        super(SftpConstants.SFTP_SUBSYSTEM_NAME,  stdout, stderr);\n    }\n\n    @Override\n    public void initialized(ServerSession session, int version) throws IOException {\n        outputDebugMessage(\"Session %s initialized - version=%d\", session, version);\n    }\n\n    @Override\n    public void destroying(ServerSession session) throws IOException {\n        outputDebugMessage(\"Session destroyed: %s\", session);\n    }\n\n    @Override\n    public void created(\n            ServerSession session, Path path, Map<String, ?> attrs, Throwable thrown)\n                throws IOException {\n        if (thrown == null) {\n            outputDebugMessage(\"Session %s created directory %s with attributes=%s\", session, path, attrs);\n        } else {\n            outputErrorMessage(\"Failed (%s) to create directory %s in session %s: %s\",\n                thrown.getClass().getSimpleName(), path, session, thrown.getMessage());\n        }\n    }\n\n    @Override\n    public void moved(\n            ServerSession session, Path srcPath, Path dstPath, Collection<CopyOption> opts, Throwable thrown)\n                throws IOException {\n        if (thrown == null) {\n            outputDebugMessage(\"Session %s moved %s to %s with options=%s\",\n                session, srcPath, dstPath, opts);\n        } else {\n            outputErrorMessage(\"Failed (%s) to move %s to %s using options=%s in session %s: %s\",\n                thrown.getClass().getSimpleName(), srcPath, dstPath, opts, session, thrown.getMessage());\n        }\n    }\n\n    @Override\n    public void removed(ServerSession session, Path path, Throwable thrown) throws IOException {\n        if (thrown == null) {\n            outputDebugMessage(\"Session %s removed %s\", session, path);\n        } else {\n            outputErrorMessage(\"Failed (%s) to remove %s in session %s: %s\",\n                thrown.getClass().getSimpleName(), path, session, thrown.getMessage());\n        }\n    }\n}<fim_middle>// class below has no smell\n"}