{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.flume.channel;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.flume.Channel;\nimport org.apache.flume.Context;\nimport org.apache.flume.Event;\nimport org.apache.flume.FlumeException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class MultiplexingChannelSelector extends AbstractChannelSelector {\n\n  public static final String CONFIG_MULTIPLEX_HEADER_NAME = \"header\";\n  public static final String DEFAULT_MULTIPLEX_HEADER =\n      \"flume.selector.header\";\n  public static final String CONFIG_PREFIX_MAPPING = \"mapping.\";\n  public static final String CONFIG_DEFAULT_CHANNEL = \"default\";\n  public static final String CONFIG_PREFIX_OPTIONAL = \"optional\";\n\n  @SuppressWarnings(\"unused\")\n  private static final Logger LOG = LoggerFactory.getLogger(MultiplexingChannelSelector.class);\n\n  private static final List<Channel> EMPTY_LIST =\n      Collections.emptyList();\n\n  private String headerName;\n\n  private Map<String, List<Channel>> channelMapping;\n  private Map<String, List<Channel>> optionalChannels;\n  private List<Channel> defaultChannels;\n\n  @Override\n  public List<Channel> getRequiredChannels(Event event) {\n    String headerValue = event.getHeaders().get(headerName);\n    if (headerValue == null || headerValue.trim().length() == 0) {\n      return defaultChannels;\n    }\n\n    List<Channel> channels = channelMapping.get(headerValue);\n\n    //This header value does not point to anything\n    //Return default channel(s) here.\n    if (channels == null) {\n      channels = defaultChannels;\n    }\n\n    return channels;\n  }\n\n  @Override\n  public List<Channel> getOptionalChannels(Event event) {\n    String hdr = event.getHeaders().get(headerName);\n    List<Channel> channels = optionalChannels.get(hdr);\n\n    if (channels == null) {\n      channels = EMPTY_LIST;\n    }\n    return channels;\n  }\n\n<fim_suffix>  @Override\n  public void configure(Context context) {\n    this.headerName = context.getString(CONFIG_MULTIPLEX_HEADER_NAME,\n        DEFAULT_MULTIPLEX_HEADER);\n\n    Map<String, Channel> channelNameMap = getChannelNameMap();\n\n    defaultChannels = getChannelListFromNames(\n        context.getString(CONFIG_DEFAULT_CHANNEL), channelNameMap);\n\n    Map<String, String> mapConfig =\n        context.getSubProperties(CONFIG_PREFIX_MAPPING);\n\n    channelMapping = new HashMap<String, List<Channel>>();\n\n    for (String headerValue : mapConfig.keySet()) {\n      List<Channel> configuredChannels = getChannelListFromNames(\n          mapConfig.get(headerValue),\n          channelNameMap);\n\n      //This should not go to default channel(s)\n      //because this seems to be a bad way to configure.\n      if (configuredChannels.size() == 0) {\n        throw new FlumeException(\"No channel configured for when \"\n            + \"header value is: \" + headerValue);\n      }\n\n      if (channelMapping.put(headerValue, configuredChannels) != null) {\n        throw new FlumeException(\"Selector channel configured twice\");\n      }\n    }\n    //If no mapping is configured, it is ok.\n    //All events will go to the default channel(s).\n    Map<String, String> optionalChannelsMapping =\n        context.getSubProperties(CONFIG_PREFIX_OPTIONAL + \".\");\n\n    optionalChannels = new HashMap<String, List<Channel>>();\n    for (String hdr : optionalChannelsMapping.keySet()) {\n      List<Channel> confChannels = getChannelListFromNames(\n              optionalChannelsMapping.get(hdr), channelNameMap);\n      if (confChannels.isEmpty()) {\n        confChannels = EMPTY_LIST;\n      }\n      //Remove channels from optional channels, which are already\n      //configured to be required channels.\n\n      List<Channel> reqdChannels = channelMapping.get(hdr);\n      //Check if there are required channels, else defaults to default channels\n      if (reqdChannels == null || reqdChannels.isEmpty()) {\n        reqdChannels = defaultChannels;\n      }\n      for (Channel c : reqdChannels) {\n        if (confChannels.contains(c)) {\n          confChannels.remove(c);\n        }\n      }\n\n      if (optionalChannels.put(hdr, confChannels) != null) {\n        throw new FlumeException(\"Selector channel configured twice\");\n      }\n    }\n\n  }\n\n}<fim_middle>// function below is long method\n"}