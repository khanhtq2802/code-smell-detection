{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.record;\n\nimport java.io.IOException;\nimport java.util.TreeMap;\nimport java.util.ArrayList;\nimport java.io.PrintStream;\nimport java.io.OutputStream;\nimport java.io.UnsupportedEncodingException;\n\nimport org.apache.hadoop.classification.InterfaceAudience;\nimport org.apache.hadoop.classification.InterfaceStability;\n\n/**\n * @deprecated Replaced by <a href=\"http://hadoop.apache.org/avro/\">Avro</a>.\n */\n@Deprecated\n@InterfaceAudience.Public\n@InterfaceStability.Stable\npublic class CsvRecordOutput implements RecordOutput {\n\n  private PrintStream stream;\n  private boolean isFirst = true;\n    \n  private void throwExceptionOnError(String tag) throws IOException {\n    if (stream.checkError()) {\n      throw new IOException(\"Error serializing \"+tag);\n    }\n  }\n \n<fim_suffix>  private void printCommaUnlessFirst() {\n    if (!isFirst) {\n      stream.print(\",\");\n    }\n    isFirst = false;\n  }\n    \n  /** Creates a new instance of CsvRecordOutput */\n  public CsvRecordOutput(OutputStream out) {\n    try {\n      stream = new PrintStream(out, true, \"UTF-8\");\n    } catch (UnsupportedEncodingException ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n    \n  @Override\n  public void writeByte(byte b, String tag) throws IOException {\n    writeLong((long)b, tag);\n  }\n    \n  @Override\n  public void writeBool(boolean b, String tag) throws IOException {\n    printCommaUnlessFirst();\n    String val = b ? \"T\" : \"F\";\n    stream.print(val);\n    throwExceptionOnError(tag);\n  }\n    \n  @Override\n  public void writeInt(int i, String tag) throws IOException {\n    writeLong((long)i, tag);\n  }\n    \n  @Override\n  public void writeLong(long l, String tag) throws IOException {\n    printCommaUnlessFirst();\n    stream.print(l);\n    throwExceptionOnError(tag);\n  }\n    \n  @Override\n  public void writeFloat(float f, String tag) throws IOException {\n    writeDouble((double)f, tag);\n  }\n    \n  @Override\n  public void writeDouble(double d, String tag) throws IOException {\n    printCommaUnlessFirst();\n    stream.print(d);\n    throwExceptionOnError(tag);\n  }\n    \n  @Override\n  public void writeString(String s, String tag) throws IOException {\n    printCommaUnlessFirst();\n    stream.print(Utils.toCSVString(s));\n    throwExceptionOnError(tag);\n  }\n    \n  @Override\n  public void writeBuffer(Buffer buf, String tag)\n    throws IOException {\n    printCommaUnlessFirst();\n    stream.print(Utils.toCSVBuffer(buf));\n    throwExceptionOnError(tag);\n  }\n    \n  @Override\n  public void startRecord(Record r, String tag) throws IOException {\n    if (tag != null && ! tag.isEmpty()) {\n      printCommaUnlessFirst();\n      stream.print(\"s{\");\n      isFirst = true;\n    }\n  }\n    \n  @Override\n  public void endRecord(Record r, String tag) throws IOException {\n    if (tag == null || tag.isEmpty()) {\n      stream.print(\"\\n\");\n      isFirst = true;\n    } else {\n      stream.print(\"}\");\n      isFirst = false;\n    }\n  }\n    \n  @Override\n  public void startVector(ArrayList v, String tag) throws IOException {\n    printCommaUnlessFirst();\n    stream.print(\"v{\");\n    isFirst = true;\n  }\n    \n  @Override\n  public void endVector(ArrayList v, String tag) throws IOException {\n    stream.print(\"}\");\n    isFirst = false;\n  }\n    \n  @Override\n  public void startMap(TreeMap v, String tag) throws IOException {\n    printCommaUnlessFirst();\n    stream.print(\"m{\");\n    isFirst = true;\n  }\n    \n  @Override\n  public void endMap(TreeMap v, String tag) throws IOException {\n    stream.print(\"}\");\n    isFirst = false;\n  }\n}<fim_middle>// function below has no smell\n"}