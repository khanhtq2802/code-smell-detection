{"text": "<fim_prefix>/*\n * Copyright 2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.yarn.config.annotation.builders;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.hadoop.conf.Configuration;\nimport org.springframework.data.hadoop.config.common.annotation.AbstractConfiguredAnnotationBuilder;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.yarn.container.AbstractYarnContainer;\nimport org.springframework.yarn.container.YarnContainer;\nimport org.springframework.yarn.container.YarnContainerFactoryBean;\n\npublic class YarnContainerBuilder\n\t\textends AbstractConfiguredAnnotationBuilder<YarnContainer, YarnContainerConfigurer, YarnContainerBuilder>\n\t\timplements YarnContainerConfigurer {\n\n\tprivate final static Log log = LogFactory.getLog(YarnContainerBuilder.class);\n\n\tprivate Class<? extends YarnContainer> clazz;\n\tprivate Configuration configuration;\n\n\tprivate YarnContainer ref;\n\n\tpublic YarnContainerBuilder() {\n\t}\n\n<fim_suffix>\t@Override\n\tprotected YarnContainer performBuild() throws Exception {\n\t\tYarnContainerFactoryBean fb = new YarnContainerFactoryBean();\n\t\tfb.setContainerRef(ref);\n\t\tfb.setContainerClass(clazz);\n\t\tfb.afterPropertiesSet();\n\t\tYarnContainer container = fb.getObject();\n\t\tif (container instanceof AbstractYarnContainer) {\n\t\t\t((AbstractYarnContainer)container).setConfiguration(configuration);\n\t\t}\n\t\treturn container;\n\t}\n\n\t@Override\n\tpublic YarnContainerConfigurer containerClass(Class<? extends YarnContainer> clazz) {\n\t\tlog.info(\"Setting as class reference \" + clazz);\n\t\tthis.clazz = clazz;\n\t\treturn this;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic YarnContainerConfigurer containerClass(String clazz) {\n\t\tlog.info(\"Setting from a class name reference \" + clazz);\n\t\t// let null or empty to pass without errors\n\t\tif (!StringUtils.hasText(clazz)) {\n\t\t\treturn this;\n\t\t}\n\n\t\tClass<?> resolvedClass = ClassUtils.resolveClassName(clazz, getClass().getClassLoader());\n\t\tif (ClassUtils.isAssignable(YarnContainer.class, resolvedClass)) {\n\t\t\tthis.clazz = (Class<? extends YarnContainer>) resolvedClass;\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Class \" + resolvedClass + \" is not an instance of YarnContainer\");\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic void configuration(Configuration configuration) {\n\t\tthis.configuration = configuration;\n\t}\n\n\tpublic YarnContainerConfigurer containerRef(YarnContainer ref) {\n\t\tthis.ref = ref;\n\t\treturn this;\n\t}\n\n}<fim_middle>// function below has no smell\n"}