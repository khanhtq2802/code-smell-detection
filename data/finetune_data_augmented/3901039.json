{"text": "<fim_prefix>      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetCredentials()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentials, other.credentials);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = java.lang.Boolean.valueOf(isSetPrincipal()).compareTo(other.isSetPrincipal());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetPrincipal()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal, other.principal);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = java.lang.Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetTableName()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      lastComparison = java.lang.Boolean.valueOf(isSetPermission()).compareTo(other.isSetPermission());\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n      if (isSetPermission()) {\n        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permission, other.permission);\n        if (lastComparison != 0) {\n          return lastComparison;\n        }\n      }\n      return 0;\n    }\n    @org.apache.thrift.annotation.Nullable\n    public _Fields fieldForId(int fieldId) {\n      return _Fields.findByThriftId(fieldId);\n    }\n    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n      scheme(iprot).read(iprot, this);\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n      scheme(oprot).write(oprot, this);\n    }\n    @Override\n    public java.lang.String toString() {\n      java.lang.StringBuilder sb = new java.lang.StringBuilder(\"revokeTablePermission_args(\");\n      boolean first = true;\n      sb.append(\"tinfo:\");\n      if (this.tinfo == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.tinfo);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"credentials:\");\n      if (this.credentials == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.credentials);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"principal:\");\n      if (this.principal == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.principal);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"tableName:\");\n      if (this.tableName == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.tableName);\n      }\n      first = false;\n      if (!first) sb.append(\", \");\n      sb.append(\"permission:\");\n      sb.append(this.permission);\n      first = false;\n      sb.append(\")\");\n      return sb.toString();\n    }\n    public void validate() throws org.apache.thrift.TException {\n      // check for required fields\n      // check for sub-struct validity\n      if (tinfo != null) {\n        tinfo.validate();\n      }\n      if (credentials != null) {\n        credentials.validate();\n      }\n    }\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n      try {\n        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {\n      try {\n        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.\n        __isset_bitfield = 0;\n        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n      } catch (org.apache.thrift.TException te) {\n        throw new java.io.IOException(te);\n      }\n    }\n    private static class revokeTablePermission_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n      public revokeTablePermission_argsStandardScheme getScheme() {\n        return new revokeTablePermission_argsStandardScheme();\n      }\n    }\n    private static class revokeTablePermission_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<revokeTablePermission_args> {\n      public void read(org.apache.thrift.protocol.TProtocol iprot, revokeTablePermission_args struct) throws org.apache.thrift.TException {\n        org.apache.thrift.protocol.TField schemeField;\n        iprot.readStructBegin();\n        while (true)\n        {\n          schemeField = iprot.readFieldBegin();\n          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n            break;\n          }\n          switch (schemeField.id) {\n            case 5: // TINFO\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.tinfo = new org.apache.accumulo.core.trace.thrift.TInfo();\n                struct.tinfo.read(iprot);\n                struct.setTinfoIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 6: // CREDENTIALS\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                struct.credentials = new org.apache.accumulo.core.securityImpl.thrift.TCredentials();\n                struct.credentials.read(iprot);\n                struct.setCredentialsIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 2: // PRINCIPAL\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n                struct.principal = iprot.readString();\n                struct.setPrincipalIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 3: // TABLE_NAME\n              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n                struct.tableName = iprot.readString();\n                struct.setTableNameIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            case 4: // PERMISSION\n              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {\n                struct.permission = iprot.readByte();\n                struct.setPermissionIsSet(true);\n              } else { \n                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n              }\n              break;\n            default:\n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n          }\n          iprot.readFieldEnd();\n        }\n        iprot.readStructEnd();\n        // check for required fields of primitive type, which can't be checked in the validate method\n        struct.validate();\n      }\n      public void write(org.apache.thrift.protocol.TProtocol oprot, revokeTablePermission_args struct) throws org.apache.thrift.TException {\n        struct.validate();\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.principal != null) {\n          oprot.writeFieldBegin(PRINCIPAL_FIELD_DESC);\n          oprot.writeString(struct.principal);\n          oprot.writeFieldEnd();\n        }\n        if (struct.tableName != null) {\n          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);\n          oprot.writeString(struct.tableName);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldBegin(PERMISSION_FIELD_DESC);\n        oprot.writeByte(struct.permission);\n        oprot.writeFieldEnd();\n        if (struct.tinfo != null) {\n          oprot.writeFieldBegin(TINFO_FIELD_DESC);\n          struct.tinfo.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        if (struct.credentials != null) {\n          oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);\n          struct.credentials.write(oprot);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n    }\n<fim_suffix>    private static class revokeTablePermission_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n      public revokeTablePermission_argsTupleScheme getScheme() {\n        return new revokeTablePermission_argsTupleScheme();\n      }\n    }<fim_middle>// class below has no smell\n"}