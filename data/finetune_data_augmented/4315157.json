{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License. \n *  \n */\npackage org.apache.directory.api.ldap.model.schema.registries;\n\n\nimport java.util.Iterator;\n\nimport org.apache.directory.api.i18n.I18n;\nimport org.apache.directory.api.ldap.model.exception.LdapException;\nimport org.apache.directory.api.ldap.model.exception.LdapUnwillingToPerformException;\nimport org.apache.directory.api.ldap.model.message.ResultCodeEnum;\nimport org.apache.directory.api.ldap.model.schema.MatchingRuleUse;\nimport org.apache.directory.api.ldap.model.schema.SchemaObjectType;\n\n\n/**\n * An immutable wrapper of the MatchingRuleUse registry.\n *\n * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n */\npublic class ImmutableMatchingRuleUseRegistry implements MatchingRuleUseRegistry\n{\n    /** The wrapped MatchingRuleUse registry */\n    MatchingRuleUseRegistry immutableMatchingRuleUseRegistry;\n\n\n    /**\n     * Creates a new instance of ImmutableMatchingRuleUseRegistry.\n     *\n     * @param matchingRuleUseRegistry The wrapped MatchingRuleUse registry\n     */\n    public ImmutableMatchingRuleUseRegistry( MatchingRuleUseRegistry matchingRuleUseRegistry )\n    {\n        immutableMatchingRuleUseRegistry = matchingRuleUseRegistry;\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public ImmutableMatchingRuleUseRegistry copy()\n    {\n        return ( ImmutableMatchingRuleUseRegistry ) immutableMatchingRuleUseRegistry.copy();\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int size()\n    {\n        return immutableMatchingRuleUseRegistry.size();\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean contains( String oid )\n    {\n        return immutableMatchingRuleUseRegistry.contains( oid );\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n<fim_suffix>    @Override\n    public String getOidByName( String name ) throws LdapException\n    {\n        return immutableMatchingRuleUseRegistry.getOidByName( name );\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getSchemaName( String oid ) throws LdapException\n    {\n        return immutableMatchingRuleUseRegistry.getSchemaName( oid );\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public SchemaObjectType getType()\n    {\n        return immutableMatchingRuleUseRegistry.getType();\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Iterator<MatchingRuleUse> iterator()\n    {\n        return immutableMatchingRuleUseRegistry.iterator();\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public MatchingRuleUse lookup( String oid ) throws LdapException\n    {\n        return immutableMatchingRuleUseRegistry.lookup( oid );\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Iterator<String> oidsIterator()\n    {\n        return immutableMatchingRuleUseRegistry.oidsIterator();\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void register( MatchingRuleUse schemaObject ) throws LdapException\n    {\n        throw new LdapUnwillingToPerformException( ResultCodeEnum.NO_SUCH_OPERATION, I18n.err( I18n.ERR_13707_CANNOT_MODIFY_MRU_REGISTRY_COPY ) );\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void renameSchema( String originalSchemaName, String newSchemaName ) throws LdapException\n    {\n        throw new LdapUnwillingToPerformException( ResultCodeEnum.NO_SUCH_OPERATION, I18n.err( I18n.ERR_13707_CANNOT_MODIFY_MRU_REGISTRY_COPY ) );\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public MatchingRuleUse unregister( String numericOid ) throws LdapException\n    {\n        throw new LdapUnwillingToPerformException( ResultCodeEnum.NO_SUCH_OPERATION, I18n.err( I18n.ERR_13707_CANNOT_MODIFY_MRU_REGISTRY_COPY ) );\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void unregisterSchemaElements( String schemaName ) throws LdapException\n    {\n        throw new LdapUnwillingToPerformException( ResultCodeEnum.NO_SUCH_OPERATION, I18n.err( I18n.ERR_13707_CANNOT_MODIFY_MRU_REGISTRY_COPY ) );\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public MatchingRuleUse get( String oid )\n    {\n        return immutableMatchingRuleUseRegistry.get( oid );\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void clear() throws LdapException\n    {\n        throw new LdapUnwillingToPerformException( ResultCodeEnum.NO_SUCH_OPERATION, I18n.err( I18n.ERR_13707_CANNOT_MODIFY_MRU_REGISTRY_COPY ) );\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public MatchingRuleUse unregister( MatchingRuleUse schemaObject ) throws LdapException\n    {\n        throw new LdapUnwillingToPerformException( ResultCodeEnum.NO_SUCH_OPERATION, I18n.err( I18n.ERR_13707_CANNOT_MODIFY_MRU_REGISTRY_COPY ) );\n    }\n}<fim_middle>// function below has no smell\n"}