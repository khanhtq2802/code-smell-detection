{"text": "<fim_prefix>/*\n * Copyright 2004-2016 EPAM Systems\n *\n * This file is part of JDI project.\n *\n * JDI is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * JDI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with JDI. If not, see <http://www.gnu.org/licenses/>.\n */\nimport com.codeborne.selenide.Condition;\nimport com.codeborne.selenide.WebDriverRunner;\nimport com.epam.commons.LinqUtils;\nimport com.epam.commons.Timer;\nimport com.epam.commons.linqinterfaces.JFuncTREx;\nimport com.epam.jdi.uitests.core.annotations.functions.Functions;\nimport com.epam.jdi.uitests.core.interfaces.base.IAvatar;\nimport com.epam.jdi.uitests.core.interfaces.base.IBaseElement;\nimport com.epam.jdi.uitests.core.interfaces.base.IHasValue;\nimport com.epam.jdi.uitests.core.logger.LogLevels;\nimport com.epam.jdi.uitests.web.selenium.elements.WebCascadeInit;\nimport com.epam.jdi.uitests.web.selenium.elements.actions.ActionInvoker;\nimport com.epam.jdi.uitests.web.selenium.elements.actions.ActionScenrios;\nimport com.epam.jdi.uitests.web.selenium.elements.actions.ElementsActions;\nimport com.epam.jdi.uitests.web.selenium.elements.apiInteract.GetElementModule;\nimport com.epam.jdi.uitests.web.selenium.elements.pageobjects.annotations.GetElement;\nimport com.epam.jdi.uitests.web.selenium.elements.pageobjects.annotations.WebAnnotationsUtil;\nimport com.epam.web.matcher.junit.Assert;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport java.lang.reflect.Field;\nimport java.text.MessageFormat;\nimport java.util.Arrays;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport static com.epam.commons.LinqUtils.foreach;\nimport static com.epam.commons.ReflectionUtils.*;\nimport static com.epam.commons.StringUtils.namesEqual;\nimport static com.epam.jdi.uitests.core.logger.LogLevels.INFO;\nimport static com.epam.jdi.uitests.core.settings.JDISettings.*;\nimport static com.epam.jdi.uitests.web.selenium.driver.WebDriverByUtils.getByLocator;\nimport static java.lang.String.format;\nimport static java.util.concurrent.TimeUnit.SECONDS;\n/**\n * Created by Roman_Iovlev on 6/10/2015.\n */\npublic abstract class BaseElement implements IBaseElement {\n    public static ActionScenrios actionScenrios = new ActionScenrios();\n    public static BiConsumer<String, Consumer<String>> doActionRule = (text, action) -> {\n        if (text == null) return;\n        action.accept(text);\n    };\n    public static BiConsumer<String, Consumer<String>> setValueEmptyAction = (text, action) -> {\n        if (text == null || text.equals(\"\")) return;\n        action.accept(text.equals(\"#CLEAR#\") ? \"\" : text);\n    };\n    public Functions function = Functions.NONE;\n    public void setFunction(Functions function) { this.function = function; }\n    public GetElementModule avatar;\n    public void waitFor(JFuncTREx<WebElement, Boolean> localElementSearchCriteria) {\n        avatar.localElementSearchCriteria = localElementSearchCriteria;\n    }\n    public ActionInvoker invoker = new ActionInvoker(this);\n    protected GetElement getElementClass = new GetElement(this);\n    protected ElementsActions actions = new ElementsActions(this);\n    private String name;\n    private String varName;\n    private String typeName;\n    private Object parent;\n    public boolean useCache;\n    public BaseElement() {\n        this(By.id(\"EMPTY\"));\n    }\n    public BaseElement(By byLocator) {\n        avatar = new GetElementModule(byLocator == null || getByLocator(byLocator).equals(\"EMPTY\")\n            ? null\n            : byLocator, this);\n        useCache = USE_CACHE;\n    }\n    public static void setActionScenarios(ActionScenrios actionScenrios) {\n        BaseElement.actionScenrios = actionScenrios;\n    }\n    public BaseElement init(IBaseElement parent) {\n        new WebCascadeInit().initElements(this, ((GetElementModule)parent.getAvatar()).getDriverName());\n        setAvatar(parent.getAvatar());\n        setParent(parent);\n        return this;\n    }\n    public BaseElement init(Object parent, IAvatar avatar) {\n        new WebCascadeInit().initElements(this, ((GetElementModule)avatar).getDriverName());\n        setAvatar(avatar);\n        setParent(parent);\n        return this;\n    }\n    public static void setValueRule(String text, Consumer<String> action) {\n        doActionRule.accept(text, action);\n    }\n    /**\n     * @return Get Element\u2019s name\n     */\n    public String getName() {\n        return name != null ? name : getTypeName();\n    }\n    public void setName(Field field) {\n        name = WebAnnotationsUtil.getElementName(field);\n        varName = field.getName();\n    }\n    protected void initSubElements() {\n        new WebCascadeInit().initElements(this, getAvatar().getDriverName());\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getVarName() {\n        return varName != null ? varName : getName();\n    }\n    protected Timer timer() {\n        return avatar.timer();\n    }\n    protected Timer timer(int sec) {\n        return avatar.timer(sec);\n    }\n    protected JavascriptExecutor jsExecutor() {\n        return (JavascriptExecutor) getDriver();\n    }\n    public boolean hasLocator() {\n        return avatar.hasLocator();\n    }\n    /**\n     * @return Get WebDriver associated with Element\n     */\n    public WebDriver getDriver() {\n        return avatar.getDriver();\n    }\n    /**\n     * @return Get Element\u2019s locator\n     */\n    public By getLocator() {\n        return avatar.getLocator();\n    }\n    public GetElementModule getAvatar() {\n        return avatar;\n    }\n    public BaseElement setAvatar(IAvatar avatar) {\n        this.avatar = (GetElementModule) avatar.copy();\n        return this;\n    }\n    public BaseElement setAvatar(By byLocator) {\n        this.avatar = this.avatar.copy(byLocator);\n        return this;\n    }\n    public void setLocator(By byLocator) {\n        avatar.setLocator(byLocator);\n    }\n    public BaseElement setAvatar(By byLocator, GetElementModule avatar) {\n        this.avatar = avatar.copy(byLocator);\n        return this;\n    }\n    public void setWaitTimeout(int seconds) {\n        logger.debug(\"Set wait timeout to \" + seconds);\n        getDriver().manage().timeouts().implicitlyWait(seconds, SECONDS);\n        timeouts.setCurrentTimeoutSec(seconds);\n    }\n    public void restoreWaitTimeout() {\n        setWaitTimeout(timeouts.getDefaultTimeoutSec());\n    }\n    protected String getTypeName() {\n        return (typeName != null) ? typeName : getClass().getSimpleName();\n    }\n    public void setTypeName(String typeName) {\n        this.typeName = typeName;\n    }\n    protected String getParentName() {\n        return parent == null ? \"\" : parent.getClass().getSimpleName();\n    }\n    public Object getParent() { return parent; }\n    public String printContext() {\n        By locator;\n        BaseElement parent;\n        String parentContext;\n        return getParent() == null || !isClass(getParent().getClass(), BaseElement.class)\n                || (locator = (parent = (BaseElement)getParent()).getLocator()) == null\n            ? \"\"\n            : ((parentContext = parent.printContext()).equals(\"\"))\n                ? locator.toString()\n                : locator + \"; \" + parentContext;\n    }\n    public void setParent(Object parent) { this.parent = parent; }\n<fim_suffix>    public void logAction(String actionName, LogLevels level) {\n        toLog(format(shortLogMessagesFormat\n                ? \"%s for %s\"\n                : \"Perform action '%s' with Element (%s)\", actionName, this.toString()), level);\n    }<fim_middle>// function below has no smell\n"}