{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.hyracks.algebricks.core.algebra.properties;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.hyracks.algebricks.common.utils.ListSet;\nimport org.apache.hyracks.algebricks.core.algebra.base.EquivalenceClass;\nimport org.apache.hyracks.algebricks.core.algebra.base.LogicalVariable;\n\n<fim_suffix>public abstract class AbstractGroupingProperty {\n    protected Set<LogicalVariable> columnSet;\n\n    public AbstractGroupingProperty(Set<LogicalVariable> columnSet) {\n        this.columnSet = columnSet;\n    }\n\n    public Set<LogicalVariable> getColumnSet() {\n        return columnSet;\n    }\n\n    // Returns normalized and concise columns from an input column set, by considering\n    // equivalence classes and functional dependencies.\n    protected Set<LogicalVariable> normalizeAndReduceGroupingColumns(Set<LogicalVariable> columns,\n            Map<LogicalVariable, EquivalenceClass> equivalenceClasses, List<FunctionalDependency> fds) {\n        Set<LogicalVariable> normalizedColumnSet =\n                getNormalizedColumnsAccordingToEqClasses(columns, equivalenceClasses);\n        reduceGroupingColumns(normalizedColumnSet, fds);\n        return normalizedColumnSet;\n    }\n\n    // Gets normalized columns, where each column variable is a representative variable of its equivalence class,\n    // therefore, the matching of properties will can consider equivalence classes.\n    private Set<LogicalVariable> getNormalizedColumnsAccordingToEqClasses(Set<LogicalVariable> columns,\n            Map<LogicalVariable, EquivalenceClass> equivalenceClasses) {\n        Set<LogicalVariable> normalizedColumns = new ListSet<>();\n        if (equivalenceClasses == null || equivalenceClasses.isEmpty()) {\n            normalizedColumns.addAll(columns);\n            return normalizedColumns;\n        }\n        for (LogicalVariable v : columns) {\n            EquivalenceClass ec = equivalenceClasses.get(v);\n            if (ec == null) {\n                normalizedColumns.add(v);\n            } else {\n                if (ec.representativeIsConst()) {\n                    // trivially satisfied, so the var. can be removed\n                } else {\n                    normalizedColumns.add(ec.getVariableRepresentative());\n                }\n            }\n        }\n        return normalizedColumns;\n    }\n\n    // Using functional dependencies to eliminate unnecessary columns.\n    private void reduceGroupingColumns(Set<LogicalVariable> columnSet, List<FunctionalDependency> fds) {\n        // the set of vars. is unordered\n        // so we try all FDs on all variables (incomplete algo?)\n        if (fds == null || fds.isEmpty()) {\n            return;\n        }\n        Set<LogicalVariable> norm = new ListSet<>();\n        for (LogicalVariable v : columnSet) {\n            boolean isImpliedByAnFD = false;\n            for (FunctionalDependency fdep : fds) {\n                if (columnSet.containsAll(fdep.getHead()) && fdep.getTail().contains(v)) {\n                    isImpliedByAnFD = true;\n                    norm.addAll(fdep.getHead());\n                    break;\n                }\n\n            }\n            if (!isImpliedByAnFD) {\n                norm.add(v);\n            }\n        }\n        columnSet.retainAll(norm);\n    }\n\n}<fim_middle>// class below has no smell\n"}