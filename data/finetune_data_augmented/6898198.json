{"text": "<fim_prefix>/*\n * Copyright (c) 2005, 2016, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.sun.source.util;\nimport com.sun.source.doctree.*;\n/**\n * A simple visitor for tree nodes.\n *\n * @param <R> the return type of this visitor's methods.  Use {@link\n *            Void} for visitors that do not need to return results.\n * @param <P> the type of the additional parameter to this visitor's\n *            methods.  Use {@code Void} for visitors that do not need an\n *            additional parameter.\n *\n * @since 1.8\n */\npublic class SimpleDocTreeVisitor<R,P> implements DocTreeVisitor<R, P> {\n    /**\n     * The default value, returned by the {@link #defaultAction default action}.\n     */\n    protected final R DEFAULT_VALUE;\n    /**\n     * Creates a visitor, with a DEFAULT_VALUE of {@code null}.\n     */\n    protected SimpleDocTreeVisitor() {\n        DEFAULT_VALUE = null;\n    }\n    /**\n     * Creates a visitor, with a specified DEFAULT_VALUE.\n     * @param defaultValue the default value to be returned by the default action.\n     */\n    protected SimpleDocTreeVisitor(R defaultValue) {\n        DEFAULT_VALUE = defaultValue;\n    }\n    /**\n     * The default action, used by all visit methods that are not overridden.\n     * @param node the node being visited\n     * @param p the parameter value passed to the visit method\n     * @return the result value to be returned from the visit method\n     */\n    protected R defaultAction(DocTree node, P p) {\n        return DEFAULT_VALUE;\n    }\n    /**\n     * Invokes the appropriate visit method specific to the type of the node.\n     * @param node the node on which to dispatch\n     * @param p a parameter to be passed to the appropriate visit method\n     * @return the value returns from the appropriate visit method\n     */\n    public final R visit(DocTree node, P p) {\n        return (node == null) ? null : node.accept(this, p);\n    }\n    /**\n     * Invokes the appropriate visit method on each of a sequence of nodes.\n     * @param nodes the nodes on which to dispatch\n     * @param p a parameter value to be passed to each appropriate visit method\n     * @return the value return from the last of the visit methods, or null\n     *      if none were called.\n     */\n    public final R visit(Iterable<? extends DocTree> nodes, P p) {\n        R r = null;\n        if (nodes != null) {\n            for (DocTree node : nodes)\n                r = visit(node, p);\n        }\n        return r;\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitAttribute(AttributeTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitAuthor(AuthorTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitComment(CommentTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitDeprecated(DeprecatedTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitDocComment(DocCommentTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitDocRoot(DocRootTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitEndElement(EndElementTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitEntity(EntityTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitErroneous(ErroneousTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return the result of {@code defaultAction}\n     */\n    @Override\n    public R visitHidden(HiddenTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitIdentifier(IdentifierTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitIndex(IndexTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitInheritDoc(InheritDocTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n<fim_suffix>    @Override\n    public R visitLink(LinkTree node, P p) {\n        return defaultAction(node, p);\n    }\n    /**\n     * {@inheritDoc} This implementation calls {@code defaultAction}.\n     *\n     * @param node {@inheritDoc}\n     * @param p {@inheritDoc}\n     * @return  the result of {@code defaultAction}\n     */\n    @Override\n    public R visitLiteral(LiteralTree node, P p) {\n        return defaultAction(node, p);\n    }<fim_middle>// function below has no smell\n"}