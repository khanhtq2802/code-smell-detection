{"text": "<fim_prefix>    throw Extensions.todo();\n  }\n  /**\n   * Correlates the elements of two sequences based on\n   * matching keys. The default equality comparer is used to compare\n   * keys.\n   */\n  public static <TOuter, TInner, TKey, TResult> Queryable<TResult> join(\n      Queryable<TOuter> outer, Enumerable<TInner> inner,\n      FunctionExpression<Function1<TOuter, TKey>> outerKeySelector,\n      FunctionExpression<Function1<TInner, TKey>> innerKeySelector,\n      FunctionExpression<Function2<TOuter, TInner, TResult>> resultSelector) {\n    throw Extensions.todo();\n  }\n  /**\n   * Correlates the elements of two sequences based on\n   * matching keys. A specified {@code EqualityComparer<T>} is used to\n   * compare keys.\n   */\n  public static <TOuter, TInner, TKey, TResult> Queryable<TResult> join(\n      Queryable<TOuter> outer, Enumerable<TInner> inner,\n      FunctionExpression<Function1<TOuter, TKey>> outerKeySelector,\n      FunctionExpression<Function1<TInner, TKey>> innerKeySelector,\n      FunctionExpression<Function2<TOuter, TInner, TResult>> resultSelector,\n      EqualityComparer<TKey> comparer) {\n    throw Extensions.todo();\n  }\n  /**\n   * Returns the last element in a sequence. (Defined\n   * by Queryable.)\n   */\n  public static <T> T last(Queryable<T> queryable) {\n    throw Extensions.todo();\n  }\n  /**\n   * Returns the last element of a sequence that\n   * satisfies a specified condition.\n   */\n  public static <T> T last(Queryable<T> queryable,\n      FunctionExpression<Predicate1<T>> predicate) {\n    throw Extensions.todo();\n  }\n  /**\n   * Returns the last element in a sequence, or a\n   * default value if the sequence contains no elements.\n   */\n  public static <T> T lastOrDefault(Queryable<T> queryable) {\n    throw Extensions.todo();\n  }\n  /**\n   * Returns the last element of a sequence that\n   * satisfies a condition or a default value if no such element is\n   * found.\n   */\n  public static <T> T lastOrDefault(Queryable<T> queryable,\n      FunctionExpression<Predicate1<T>> predicate) {\n    throw Extensions.todo();\n  }\n  /**\n   * Returns an long that represents the total number\n   * of elements in a sequence.\n   */\n  public static <T> long longCount(Queryable<T> xable) {\n    throw Extensions.todo();\n  }\n  /**\n   * Returns an long that represents the number of\n   * elements in a sequence that satisfy a condition.\n   */\n  public static <T> long longCount(Queryable<T> queryable,\n      FunctionExpression<Predicate1<T>> predicate) {\n    throw Extensions.todo();\n  }\n  /**\n   * Returns the maximum value in a generic\n   * {@code IQueryable<T>}.\n   */\n  public static <T> T max(Queryable<T> queryable) {\n    throw Extensions.todo();\n  }\n  /**\n   * Invokes a projection function on each element of a\n   * generic {@code IQueryable<T>} and returns the maximum resulting\n   * value.\n   */\n  public static <T, TResult> TResult max(Queryable<T> queryable,\n      FunctionExpression<Function1<T, TResult>> selector) {\n    throw Extensions.todo();\n  }\n  /**\n   * Returns the minimum value in a generic\n   * {@code IQueryable<T>}.\n   */\n  public static <T> T min(Queryable<T> queryable) {\n    throw Extensions.todo();\n  }\n  /**\n   * Invokes a projection function on each element of a\n   * generic {@code IQueryable<T>} and returns the minimum resulting\n   * value.\n   */\n  public static <T, TResult> TResult min(Queryable<T> queryable,\n      FunctionExpression<Function1<T, TResult>> selector) {\n    throw Extensions.todo();\n  }\n  /**\n   * Filters the elements of an IQueryable based on a\n   * specified type.\n   *\n   * <p>This method generates a\n   * {@link org.apache.calcite.linq4j.tree.MethodCallExpression} that\n   * represents calling {@code ofType} itself as a constructed generic method.\n   * It then passes the {@code MethodCallExpression} to the\n   * {@link org.apache.calcite.linq4j.QueryProvider#createQuery createQuery}\n   * method of the\n   * {@link org.apache.calcite.linq4j.QueryProvider} represented by\n   * the Provider property of the source parameter.</p>\n   *\n   * <p>The query behavior that occurs as a result of executing an expression\n   * tree that represents calling OfType depends on the implementation of the\n   * type of the source parameter. The expected behavior is that it filters\n   * out any elements in source that are not of type TResult.\n   *\n   * <p>NOTE: clazz parameter not present in C# LINQ; necessary because of\n   * Java type erasure.</p>\n   */\n  public static <TResult> Queryable<TResult> ofType(Queryable<?> queryable,\n      Class<TResult> clazz) {\n    throw Extensions.todo();\n  }\n  /**\n   * Sorts the elements of a sequence in ascending\n   * order according to a key.\n   *\n   * @see #thenBy\n   */\n  public static <T, TKey extends Comparable> OrderedQueryable<T> orderBy(\n      Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector) {\n    throw Extensions.todo();\n  }\n  /**\n   * Sorts the elements of a sequence in ascending\n   * order by using a specified comparer.\n   */\n  public static <T, TKey> OrderedQueryable<T> orderBy(Queryable<T> source,\n      FunctionExpression<Function1<T, TKey>> keySelector,\n      Comparator<TKey> comparator) {\n    throw Extensions.todo();\n  }\n  /**\n   * Sorts the elements of a sequence in descending\n   * order according to a key.\n   */\n  public static <T, TKey extends Comparable> OrderedQueryable<T> orderByDescending(\n      Queryable<T> source,\n      FunctionExpression<Function1<T, TKey>> keySelector) {\n    throw Extensions.todo();\n  }\n  /**\n   * Sorts the elements of a sequence in descending\n   * order by using a specified comparer.\n   */\n  public static <T, TKey> OrderedQueryable<T> orderByDescending(\n      Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector,\n      Comparator<TKey> comparator) {\n    throw Extensions.todo();\n  }\n  /**\n   * Inverts the order of the elements in a\n   * sequence.\n   */\n  public static <T> Queryable<T> reverse(Queryable<T> source) {\n    throw Extensions.todo();\n  }\n  /**\n   * Projects each element of a sequence into a new form.\n   */\n  public static <T, TResult> Queryable<TResult> select(Queryable<T> source,\n      FunctionExpression<Function1<T, TResult>> selector) {\n    return source.getProvider().createQuery(\n        Expressions.call(source.getExpression(), \"select\", selector),\n        functionResultType(selector));\n  }\n  private static <P0, R> Type functionResultType(\n      FunctionExpression<Function1<P0, R>> selector) {\n    return selector.body.getType();\n  }\n  /**\n   * Projects each element of a sequence into a new\n   * form by incorporating the element's index.\n   *\n   * <p>NOTE: Renamed from {@code select} because had same erasure as\n   * {@link #select(org.apache.calcite.linq4j.Queryable, org.apache.calcite.linq4j.tree.FunctionExpression)}.\n   */\n  public static <T, TResult> Queryable<TResult> selectN(Queryable<T> source,\n      FunctionExpression<Function2<T, Integer, TResult>> selector) {\n    throw Extensions.todo();\n  }\n  /**\n   * Projects each element of a sequence to an\n   * {@code Enumerable<T>} and combines the resulting sequences into one\n   * sequence.\n   */\n  public static <T, TResult> Queryable<TResult> selectMany(Queryable<T> source,\n      FunctionExpression<Function1<T, Enumerable<TResult>>> selector) {\n    throw Extensions.todo();\n  }\n  /**\n   * Projects each element of a sequence to an\n   * {@code Enumerable<T>} and combines the resulting sequences into one\n   * sequence. The index of each source element is used in the\n   * projected form of that element.\n   *\n   * <p>NOTE: Renamed from {@code selectMany} because had same erasure as\n   * {@link #selectMany(org.apache.calcite.linq4j.Queryable, org.apache.calcite.linq4j.tree.FunctionExpression)}.\n   */\n<fim_suffix>  public static <T, TResult> Queryable<TResult> selectManyN(Queryable<T> source,\n      FunctionExpression<Function2<T, Integer, Enumerable<TResult>>> selector) {\n    throw Extensions.todo();\n  }<fim_middle>// function below has no smell\n"}