{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2009, 2017  Oracle and/or its affiliates and others. All rights reserved.\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v1.0 and Eclipse Distribution License v. 1.0\n * which accompanies this distribution.\n * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n * http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *      Jaro Kuruc  - Initial API and implementation.\n *      Tomas Kraus - EclipseLink 2.7 integration.\n *      Jens Reimann - Improve exception message\n ******************************************************************************/\npackage org.eclipse.persistence.logging.slf4j;\nimport java.security.AccessController;\nimport org.eclipse.persistence.config.PersistenceUnitProperties;\nimport org.eclipse.persistence.internal.security.PrivilegedAccessHelper;\nimport org.eclipse.persistence.internal.security.PrivilegedGetSystemProperty;\nimport org.eclipse.persistence.logging.AbstractSessionLog;\nimport org.eclipse.persistence.logging.SessionLogEntry;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n/**\n * EclipseLink logger bridge over SLF4J.\n */\npublic class SLF4JLogger extends AbstractSessionLog {\n    /** Logger callback interface. */\n    private static interface LoggerCall {\n        void log(final Logger logger, final String msg, final Throwable t);\n        void log(final Logger logger, final String message);\n    }\n    /** {@code TRACE} level log. */\n    private static final class LogTrace implements LoggerCall {\n        @Override\n        public void log(final Logger logger, final String msg, final Throwable t) {\n            logger.trace(msg, t);\n        }\n        @Override\n        public void log(final Logger logger, final String message) {\n            logger.trace(message);\n        }\n    }\n    /** {@code DEBUG} level log. */\n    private static final class LogDebug implements LoggerCall {\n        @Override\n        public void log(final Logger logger, final String msg, final Throwable t) {\n            logger.debug(msg, t);\n        }\n        @Override\n        public void log(final Logger logger, final String message) {\n            logger.debug(message);\n        }\n    }\n    /** {@code INFO} level log. */\n    private static final class LogInfo implements LoggerCall {\n        @Override\n        public void log(final Logger logger, final String msg, final Throwable t) {\n            logger.info(msg, t);\n        }\n        @Override\n        public void log(final Logger logger, final String message) {\n            logger.info(message);\n        }\n    }\n    /** {@code WARN} level log. */\n    private static final class LogWarn implements LoggerCall {\n        @Override\n        public void log(final Logger logger, final String msg, final Throwable t) {\n            logger.warn(msg, t);\n        }\n        @Override\n        public void log(final Logger logger, final String message) {\n            logger.warn(message);\n        }\n    }\n    /** {@code ERROR} level log. */\n<fim_suffix>    private static final class LogError implements LoggerCall {\n        @Override\n        public void log(final Logger logger, final String msg, final Throwable t) {\n            logger.error(msg, t);\n        }\n        @Override\n        public void log(final Logger logger, final String message) {\n            logger.error(message);\n        }\n    }\n    /** Do not log anything. */\n    private static final class LogNop implements LoggerCall {\n        @Override\n        public void log(final Logger logger, final String msg, final Throwable t) {\n        }\n        @Override\n        public void log(final Logger logger, final String message) {\n        }\n    }\n    /** The default session name in case there is session name is missing. */\n    public static final String ECLIPSELINK_NAMESPACE = \"org.eclipse.persistence\";\n    /** SLF4J logger calls mapping for EclipseLink logging levels. */\n    private static final LoggerCall[] loggerCall = new LoggerCall[LogLevel.length];\n    /** Loggers lookup array. */\n    private static final Logger[] categoryLoggers = new Logger[LogCategory.length];\n    static {\n        // Initialize loggers lookup array.\n        for (int i = 0; i < LogCategory.length; i++) {\n            categoryLoggers[i] = null;\n        }\n        // Initialize SLF4J logger calls mapping for EclipseLink logging levels.\n        loggerCall[LogLevel.ALL.getId()]     = loggerCall[LogLevel.FINEST.getId()] = new LogTrace();\n        loggerCall[LogLevel.FINER.getId()]   = loggerCall[LogLevel.FINE.getId()]   = new LogDebug();\n        loggerCall[LogLevel.CONFIG.getId()]  = loggerCall[LogLevel.INFO.getId()]   = new LogInfo();\n        loggerCall[LogLevel.WARNING.getId()] = new LogWarn();\n        loggerCall[LogLevel.SEVERE.getId()]  = new LogError();\n        loggerCall[LogLevel.OFF.getId()]     = new LogNop();\n    }\n    /**\n     * Retrieve Logger for the given category.\n     * @param category EclipseLink logging category\n     * @return Logger for the given logging category.\n     */\n    private static Logger getLogger(final LogCategory category) {\n        final Logger logger = categoryLoggers[category.getId()];\n        if (logger != null) {\n            return logger;\n        }\n        return categoryLoggers[category.getId()] = LoggerFactory.getLogger(category.getNameSpace());\n    }\n    /** Logging levels for individual logging categories. */\n    private final LogLevel[] logLevels;\n    /**\n     * Creates an instance of EclipseLink logger bridge over SLF4J\n     */\n    public SLF4JLogger() {\n        super();\n        // Set default logging levels for all logging categories.\n        final byte defaultLevel = LogLevel.toValue(level).getId();\n        logLevels = new LogLevel[LogCategory.length];\n        for (LogCategory category : LogCategory.values()) {\n            final int i = category.getId();\n            switch(category) {\n            case ALL:\n                logLevels[i] = LogLevel.toValue(defaultLevel);\n                break;\n            default:\n                final String property = PersistenceUnitProperties.CATEGORY_LOGGING_LEVEL_ + category.getName();\n                final String logLevelStr = PrivilegedAccessHelper.shouldUsePrivilegedAccess()\n                        ? AccessController.doPrivileged(new PrivilegedGetSystemProperty(property))\n                        : System.getProperty(property);\n                logLevels[i] = LogLevel.toValue(\n                        logLevelStr != null ? translateStringToLoggingLevel(logLevelStr) : defaultLevel);\n            }\n        }\n    }\n    /**\n     * Get the logging level for the default logging category.\n     * @return level Current logging level for default the default logging category.\n     */\n    @Override\n    public int getLevel() {\n        return logLevels[LogCategory.ALL.getId()].getId();\n    }\n    /**\n     * Get the logging level for the specified logging category.\n     * @param categoryName The {@link String} representation of an EclipseLink logging category.\n     * @return level Current logging level for default the default logging category.\n     */\n    @Override\n    public int getLevel(final String categoryName) {\n        final LogCategory category = LogCategory.toValue(categoryName);\n        if (category == null) {\n            throw new IllegalArgumentException(\"Unknown logging category name.\");\n        }\n        return logLevels[category.getId()].getId();\n    }\n    /**\n     * Set the logging level for the default logging category.\n     * @param level The logging level to be set.\n     */\n    @Override\n    public void setLevel(final int level) {\n        super.setLevel(level);\n        logLevels[LogCategory.ALL.getId()] = LogLevel.toValue(level);\n        // TODO: Handle logging levels on SLF4J side too.\n    }\n    /**\n     * Set the logging level for the specified logging category.\n     * @param level        The logging level to be set.\n     * @param categoryName The {@link String} representation of an EclipseLink logging category.\n     */\n    @Override\n    public void setLevel(final int level, final String categoryName) {\n        final LogCategory category = LogCategory.toValue(categoryName);\n        if (category == null) {\n            throw new IllegalArgumentException(\"Unknown logging category name.\");\n        }\n        logLevels[category.getId()] = LogLevel.toValue(level);\n        // TODO: Handle logging levels on SLF4J side too.\n    }\n    /**\n     * Check if a message of the given level would actually be logged under logging level for the default logging\n     * category.\n     * @param level Message logging level.\n     * @return Value of {@code true} if the given message logging level will be logged or {@code false} otherwise.\n     */\n    @Override\n    public boolean shouldLog(final int level) {\n        return logLevels[LogCategory.ALL.getId()].shouldLog((byte)level);\n    }\n    /**\n     * Check if a message of the given level would actually be logged under logging level for the specified logging\n     * category.\n     * @param level Message logging level.\n     * @param categoryName The {@link String} representation of an EclipseLink logging category.<fim_middle>// class below has no smell\n"}