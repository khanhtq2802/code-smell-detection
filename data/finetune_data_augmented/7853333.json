{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.apache.geode.management.internal;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.management.InstanceNotFoundException;\nimport javax.management.ListenerNotFoundException;\nimport javax.management.MBeanServer;\nimport javax.management.Notification;\nimport javax.management.NotificationListener;\nimport javax.management.ObjectName;\n\nimport org.apache.geode.LogWriter;\nimport org.apache.geode.distributed.internal.InternalDistributedSystem;\nimport org.apache.geode.management.ManagementException;\n\n/**\n * This class acts as a central point hub for collecting all notifications originated from VM and\n * sending across to Managing Node\n *\n *\n */\npublic class NotificationHub {\n\n  /**\n   * logger\n   */\n  private LogWriter logger;\n\n  /**\n   * This is a single window to manipulate region resources for management\n   */\n  protected ManagementResourceRepo repo;\n\n  /**\n   * Platform MBean Server\n   */\n  private MBeanServer mbeanServer = MBeanJMXAdapter.mbeanServer;\n\n  private Map<ObjectName, NotificationHubListener> listenerObjectMap;\n\n\n  /** Member Name **/\n  private String memberSource;\n\n  /**\n   * public constructor\n   *\n   * @param repo Resource repo for this member\n   */\n  public NotificationHub(ManagementResourceRepo repo) {\n    this.repo = repo;\n    logger = InternalDistributedSystem.getLogger();\n    this.listenerObjectMap = new HashMap<ObjectName, NotificationHubListener>();\n    memberSource = MBeanJMXAdapter\n        .getMemberNameOrUniqueId(\n            InternalDistributedSystem.getConnectedInstance().getDistributedMember());\n\n\n  }\n\n  /**\n   * Adds a NotificationHubListener\n   *\n   */\n  public void addHubNotificationListener(String memberName, ObjectName objectName) {\n\n    try {\n      synchronized (listenerObjectMap) {\n        NotificationHubListener listener = listenerObjectMap.get(objectName);\n        if (listener == null) {\n          listener = new NotificationHubListener(objectName);\n          listener.incNumCounter();\n          mbeanServer.addNotificationListener(objectName, listener, null, null);\n          listenerObjectMap.put(objectName, listener);\n        } else {\n          listener.incNumCounter();\n        }\n      }\n\n    } catch (InstanceNotFoundException e) {\n      throw new ManagementException(e);\n    }\n  }\n\n  /**\n   * Removes a NotificationHubListener\n   *\n   */\n  public void removeHubNotificationListener(String memberName, ObjectName objectName) {\n    try {\n      synchronized (listenerObjectMap) {\n        if (listenerObjectMap.get(objectName) != null) {\n          NotificationHubListener listener = listenerObjectMap.get(objectName);\n          if (listener.decNumCounter() == 0) {\n            listenerObjectMap.remove(objectName);\n            // The MBean might have been un registered if the resource is\n            // removed from cache.\n            // The below method is to ensure clean up of user defined MBeans\n            mbeanServer.removeNotificationListener(objectName, listener);\n          }\n        }\n      }\n    } catch (ListenerNotFoundException e) {\n      // No op\n    } catch (InstanceNotFoundException e) {\n      // No op\n    }\n  }\n\n  /**\n   * This method is basically to cleanup resources which might cause leaks if the same VM is used\n   * again for cache creation.\n   */\n  public void cleanUpListeners() {\n    synchronized (listenerObjectMap) {\n      for (ObjectName objectName : listenerObjectMap.keySet()) {\n\n        NotificationHubListener listener = listenerObjectMap.get(objectName);\n\n        if (listener != null) {\n          try {\n            mbeanServer.removeNotificationListener(objectName, listener);\n          } catch (ListenerNotFoundException e) {\n            // Do nothing. Already have been un-registered ( For listeners which\n            // are on other MBeans apart from MemberMXBean)\n          } catch (InstanceNotFoundException e) {\n            // Do nothing. Already have been un-registered ( For listeners which\n            // are on other MBeans apart from MemberMXBean)\n          }\n        }\n      }\n    }\n\n    listenerObjectMap.clear();\n  }\n\n  public Map<ObjectName, NotificationHubListener> getListenerObjectMap() {\n    return this.listenerObjectMap;\n  }\n\n  /**\n   * This class is the managed node counterpart to listen to notifications from MBeans for which it\n   * is resistered\n   *\n   *\n   */\n<fim_suffix>  public class NotificationHubListener implements NotificationListener {\n    /**\n     * MBean for which this listener is added\n     */\n    private ObjectName name;\n\n    /**\n     * Counter to indicate how many listener are attached to this MBean\n     */\n    private int numCounter = 0;\n\n\n    protected NotificationHubListener(ObjectName name) {\n      this.name = name;\n    }\n\n    public int incNumCounter() {\n      return ++numCounter;\n    }\n\n    public int decNumCounter() {\n      return --numCounter;\n    }\n\n    public int getNumCounter() {\n      return this.numCounter;\n    }\n\n    @Override\n    public void handleNotification(Notification notification, Object handback) {\n      NotificationKey key = new NotificationKey(name);\n      notification.setUserData(memberSource);\n      repo.putEntryInLocalNotificationRegion(key, notification);\n    }\n\n  }\n\n}<fim_middle>// class below has no smell\n"}