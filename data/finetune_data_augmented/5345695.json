{"text": "<fim_prefix>                return getDefaultOrb();\n            } else if (scheme.equals(\"queue\")) {\n                return build(uri);\n            } else if (scheme.equals(\"topic\")) {\n                return build(uri);\n            } else {\n                throw new UnsupportedOperationException(\"Unsupported Naming URI scheme '\" + scheme + \"'\");\n            }\n        } catch (URISyntaxException e) {\n            throw (NamingException) new NamingException(\"Unparsable jndi entry '\" + name + \"=\" + value + \"'.  Exception: \" + e.getMessage()).initCause(e);\n        }\n    }\n    private Object build(final URI inputUri) throws URISyntaxException {\n        final URI uri = new URI(inputUri.getSchemeSpecificPart());\n        final String driver = uri.getScheme();\n        final String url = uri.getSchemeSpecificPart();\n        final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        if (classLoader == null)\n            getClass().getClassLoader();\n        if (classLoader == null)\n            ClassLoader.getSystemClassLoader();\n        try {\n            final Class<?> clazz = Class.forName(driver, true, classLoader);\n            final Constructor<?> constructor = clazz.getConstructor(String.class);\n            return constructor.newInstance(url);\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Cannot use \" + driver + \" with parameter \" + url, e);\n        }\n    }\n    private DataSource createDataSource(final DataSourceMetaData dataSourceMetaData) {\n        return new ClientDataSource(dataSourceMetaData);\n    }\n    private Object createWebservice(final WsMetaData webserviceMetaData) throws NamingException {\n        try {\n            return webserviceMetaData.createWebservice();\n        } catch (Exception e) {\n            throw (NamingException) new NamingException(\"Error creating webservice\").initCause(e);\n        }\n    }\n    private ORB getDefaultOrb() {\n        return ORB.init();\n    }\n    @Override\n    public Object lookup(final Name name) throws NamingException {\n        return lookup(name.toString());\n    }\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public NamingEnumeration<NameClassPair> list(String name) throws NamingException {\n        if (name == null)\n            throw new InvalidNameException(\"The name cannot be null\");\n        else if (name.startsWith(\"java:\"))\n            name = name.replaceFirst(\"^java:\", \"\");\n        else if (!name.startsWith(\"/\"))\n            name = tail + name;\n        final JNDIRequest req = new JNDIRequest(RequestMethodCode.JNDI_LIST, name);\n        req.setModuleId(moduleId);\n        final JNDIResponse res;\n        try {\n            res = request(req);\n        } catch (Exception e) {\n            if (e instanceof RemoteException && e.getCause() instanceof ConnectException) {\n                e = (Exception) e.getCause();\n                throw (ServiceUnavailableException) new ServiceUnavailableException(\"Cannot list '\" + name + \"'.\").initCause(e);\n            }\n            throw (NamingException) new NamingException(\"Cannot list '\" + name + \"'.\").initCause(e);\n        }\n        switch (res.getResponseCode()) {\n            case ResponseCodes.JNDI_OK:\n                return null;\n            case ResponseCodes.JNDI_ENUMERATION:\n                return (NamingEnumeration) res.getResult();\n            case ResponseCodes.JNDI_NOT_FOUND:\n                throw new NameNotFoundException(name);\n            case ResponseCodes.JNDI_NAMING_EXCEPTION:\n                final Throwable throwable = ((ThrowableArtifact) res.getResult()).getThrowable();\n                if (throwable instanceof NamingException) {\n                    throw (NamingException) throwable;\n                }\n                throw (NamingException) new NamingException().initCause(throwable);\n            case ResponseCodes.JNDI_ERROR:\n                throw (Error) res.getResult();\n            default:\n                throw new ClientRuntimeException(\"Invalid response from server :\" + res.getResponseCode());\n        }\n    }\n    @Override\n    public NamingEnumeration<NameClassPair> list(final Name name) throws NamingException {\n        return list(name.toString());\n    }\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public NamingEnumeration<Binding> listBindings(final String name) throws NamingException {\n        final Object o = lookup(name);\n        if (o instanceof Context) {\n            final Context context = (Context) o;\n            final NamingEnumeration<NameClassPair> enumeration = context.list(\"\");\n            final List<NameClassPair> bindings = new ArrayList<NameClassPair>();\n            while (enumeration.hasMoreElements()) {\n                final NameClassPair pair = enumeration.nextElement();\n                bindings.add(new LazyBinding(pair.getName(), pair.getClassName(), context));\n            }\n            return new NameClassPairEnumeration(bindings);\n        } else {\n            return null;\n        }\n    }\n    private static class LazyBinding extends Binding {\n        private static final long serialVersionUID = 1L;\n        private RuntimeException failed;\n        private Context context;\n        public LazyBinding(final String name, final String className, final Context context) {\n            super(name, className, null);\n            this.context = context;\n        }\n        @Override\n        public synchronized Object getObject() {\n            if (super.getObject() == null) {\n                if (failed != null)\n                    throw failed;\n                try {\n                    super.setObject(context.lookup(getName()));\n                } catch (NamingException e) {\n                    throw failed = new ClientRuntimeException(\"Failed to lazily fetch the binding '\" + getName() + \"'\", e);\n                }\n            }\n            return super.getObject();\n        }\n    }\n    @Override\n    public NamingEnumeration<Binding> listBindings(final Name name) throws NamingException {\n        return listBindings(name.toString());\n    }\n    @Override\n    public Object lookupLink(final String name) throws NamingException {\n        return lookup(name);\n    }\n    @Override\n    public Object lookupLink(final Name name) throws NamingException {\n        return lookupLink(name.toString());\n    }\n    @Override\n    public NameParser getNameParser(final String name) throws NamingException {\n        return new SimpleNameParser();\n    }\n    @Override\n    public NameParser getNameParser(final Name name) throws NamingException {\n        return new SimpleNameParser();\n    }\n    @Override\n    public String composeName(final String name, final String prefix) throws NamingException {\n        throw new OperationNotSupportedException(\"TODO: Needs to be implemented\");\n    }\n    @Override\n    public Name composeName(final Name name, final Name prefix) throws NamingException {\n        throw new OperationNotSupportedException(\"TODO: Needs to be implemented\");\n    }\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object addToEnvironment(final String key, final Object value) throws NamingException {\n        return env.put(key, value);\n    }\n    @Override\n    public Object removeFromEnvironment(final String key) throws NamingException {\n        return env.remove(key);\n    }\n    @Override\n    public Hashtable getEnvironment() throws NamingException {\n        return (Hashtable) env.clone();\n    }\n    @Override\n    public String getNameInNamespace() throws NamingException {\n        return \"\";\n    }\n    @Override\n    public void close() throws NamingException {\n    }\n    @Override\n    public void bind(final String name, final Object obj) throws NamingException {\n        throw new OperationNotSupportedException();\n    }\n    @Override\n    public void bind(final Name name, final Object obj) throws NamingException {\n        bind(name.toString(), obj);\n    }\n    @Override\n    public void rebind(final String name, final Object obj) throws NamingException {\n        throw new OperationNotSupportedException();\n    }\n    @Override\n    public void rebind(final Name name, final Object obj) throws NamingException {\n        rebind(name.toString(), obj);\n    }\n    @Override\n    public void unbind(final String name) throws NamingException {\n        throw new OperationNotSupportedException();\n    }\n    @Override\n    public void unbind(final Name name) throws NamingException {\n        unbind(name.toString());\n    }\n    @Override\n    public void rename(final String oldname, final String newname) throws NamingException {\n        throw new OperationNotSupportedException();\n    }\n    @Override\n    public void rename(final Name oldname, final Name newname) throws NamingException {\n        rename(oldname.toString(), newname.toString());\n    }\n    @Override\n    public void destroySubcontext(final String name) throws NamingException {\n        throw new OperationNotSupportedException();\n    }\n    @Override\n    public void destroySubcontext(final Name name) throws NamingException {\n        destroySubcontext(name.toString());\n    }\n    @Override\n    public Context createSubcontext(final String name) throws NamingException {\n        throw new OperationNotSupportedException();\n    }\n    @Override\n    public Context createSubcontext(final Name name) throws NamingException {\n        return createSubcontext(name.toString());\n    }\n<fim_suffix>    private static final class SimpleNameParser implements NameParser {\n        private static final Properties PARSER_PROPERTIES = new Properties();\n        static {\n            PARSER_PROPERTIES.put(\"jndi.syntax.direction\", \"left_to_right\");\n            PARSER_PROPERTIES.put(\"jndi.syntax.separator\", \"/\");\n        }\n        private SimpleNameParser() {\n        }\n        @Override\n        public Name parse(final String name) throws NamingException {\n            return new CompoundName(name, PARSER_PROPERTIES);\n        }\n    }<fim_middle>// class below has no smell\n"}