{"text": "<fim_prefix>     * <code>GregorianCalendar</code> instance. The maximum value is\n     * defined as the largest value returned by the {@link\n     * Calendar#get(int) get} method for any possible time value,\n     * taking into consideration the current values of the\n     * {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n     * {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n     * {@link #getGregorianChange() getGregorianChange} and\n     * {@link Calendar#getTimeZone() getTimeZone} methods.\n     *\n     * @param field the calendar field.\n     * @return the maximum value for the given calendar field.\n     * @see #getMinimum(int)\n     * @see #getGreatestMinimum(int)\n     * @see #getLeastMaximum(int)\n     * @see #getActualMinimum(int)\n     * @see #getActualMaximum(int)\n     */\n    @Override\n    public int getMaximum(int field) {\n        switch (field) {\n        case MONTH:\n        case DAY_OF_MONTH:\n        case DAY_OF_YEAR:\n        case WEEK_OF_YEAR:\n        case WEEK_OF_MONTH:\n        case DAY_OF_WEEK_IN_MONTH:\n        case YEAR:\n            {\n                // On or after Gregorian 200-3-1, Julian and Gregorian\n                // calendar dates are the same or Gregorian dates are\n                // larger (i.e., there is a \"gap\") after 300-3-1.\n                if (gregorianCutoverYear > 200) {\n                    break;\n                }\n                // There might be \"overlapping\" dates.\n                GregorianCalendar gc = (GregorianCalendar) clone();\n                gc.setLenient(true);\n                gc.setTimeInMillis(gregorianCutover);\n                int v1 = gc.getActualMaximum(field);\n                gc.setTimeInMillis(gregorianCutover-1);\n                int v2 = gc.getActualMaximum(field);\n                return Math.max(MAX_VALUES[field], Math.max(v1, v2));\n            }\n        }\n        return MAX_VALUES[field];\n    }\n    /**\n     * Returns the highest minimum value for the given calendar field\n     * of this <code>GregorianCalendar</code> instance. The highest\n     * minimum value is defined as the largest value returned by\n     * {@link #getActualMinimum(int)} for any possible time value,\n     * taking into consideration the current values of the\n     * {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n     * {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n     * {@link #getGregorianChange() getGregorianChange} and\n     * {@link Calendar#getTimeZone() getTimeZone} methods.\n     *\n     * @param field the calendar field.\n     * @return the highest minimum value for the given calendar field.\n     * @see #getMinimum(int)\n     * @see #getMaximum(int)\n     * @see #getLeastMaximum(int)\n     * @see #getActualMinimum(int)\n     * @see #getActualMaximum(int)\n     */\n    @Override\n    public int getGreatestMinimum(int field) {\n        if (field == DAY_OF_MONTH) {\n            BaseCalendar.Date d = getGregorianCutoverDate();\n            long mon1 = getFixedDateMonth1(d, gregorianCutoverDate);\n            d = getCalendarDate(mon1);\n            return Math.max(MIN_VALUES[field], d.getDayOfMonth());\n        }\n        return MIN_VALUES[field];\n    }\n    /**\n     * Returns the lowest maximum value for the given calendar field\n     * of this <code>GregorianCalendar</code> instance. The lowest\n     * maximum value is defined as the smallest value returned by\n     * {@link #getActualMaximum(int)} for any possible time value,\n     * taking into consideration the current values of the\n     * {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n     * {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n     * {@link #getGregorianChange() getGregorianChange} and\n     * {@link Calendar#getTimeZone() getTimeZone} methods.\n     *\n     * @param field the calendar field\n     * @return the lowest maximum value for the given calendar field.\n     * @see #getMinimum(int)\n     * @see #getMaximum(int)\n     * @see #getGreatestMinimum(int)\n     * @see #getActualMinimum(int)\n     * @see #getActualMaximum(int)\n     */\n    @Override\n    public int getLeastMaximum(int field) {\n        switch (field) {\n        case MONTH:\n        case DAY_OF_MONTH:\n        case DAY_OF_YEAR:\n        case WEEK_OF_YEAR:\n        case WEEK_OF_MONTH:\n        case DAY_OF_WEEK_IN_MONTH:\n        case YEAR:\n            {\n                GregorianCalendar gc = (GregorianCalendar) clone();\n                gc.setLenient(true);\n                gc.setTimeInMillis(gregorianCutover);\n                int v1 = gc.getActualMaximum(field);\n                gc.setTimeInMillis(gregorianCutover-1);\n                int v2 = gc.getActualMaximum(field);\n                return Math.min(LEAST_MAX_VALUES[field], Math.min(v1, v2));\n            }\n        }\n        return LEAST_MAX_VALUES[field];\n    }\n    /**\n     * Returns the minimum value that this calendar field could have,\n     * taking into consideration the given time value and the current\n     * values of the\n     * {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek},\n     * {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek},\n     * {@link #getGregorianChange() getGregorianChange} and\n     * {@link Calendar#getTimeZone() getTimeZone} methods.\n     *\n     * <p>For example, if the Gregorian change date is January 10,\n     * 1970 and the date of this <code>GregorianCalendar</code> is\n     * January 20, 1970, the actual minimum value of the\n     * <code>DAY_OF_MONTH</code> field is 10 because the previous date\n     * of January 10, 1970 is December 27, 1996 (in the Julian\n     * calendar). Therefore, December 28, 1969 to January 9, 1970\n     * don't exist.\n     *\n     * @param field the calendar field\n     * @return the minimum of the given field for the time value of\n     * this <code>GregorianCalendar</code>\n     * @see #getMinimum(int)\n     * @see #getMaximum(int)\n     * @see #getGreatestMinimum(int)\n     * @see #getLeastMaximum(int)\n     * @see #getActualMaximum(int)\n     * @since 1.2\n     */\n<fim_suffix>    @Override\n    public int getActualMinimum(int field) {\n        if (field == DAY_OF_MONTH) {\n            GregorianCalendar gc = getNormalizedCalendar();\n            int year = gc.cdate.getNormalizedYear();\n            if (year == gregorianCutoverYear || year == gregorianCutoverYearJulian) {\n                long month1 = getFixedDateMonth1(gc.cdate, gc.calsys.getFixedDate(gc.cdate));\n                BaseCalendar.Date d = getCalendarDate(month1);\n                return d.getDayOfMonth();\n            }\n        }\n        return getMinimum(field);\n    }<fim_middle>// function below has no smell\n"}