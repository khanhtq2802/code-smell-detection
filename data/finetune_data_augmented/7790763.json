{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.wicket.markup;\n\nimport org.apache.wicket.Component;\nimport org.apache.wicket.markup.parser.IXmlPullParser.HttpTagType;\nimport org.apache.wicket.markup.parser.XmlTag;\nimport org.apache.wicket.markup.parser.XmlTag.TagType;\nimport org.apache.wicket.request.Response;\n\n\n/**\n * \n * @author Juergen Donnerstag\n */\n<fim_suffix>public class HtmlSpecialTag extends MarkupElement\n{\n\t/** The underlying xml tag */\n\tprotected final XmlTag xmlTag;\n\n\t/** Boolean flags. See above */\n\tprivate int flags = 0;\n\n\tprivate final HttpTagType httpTagType;\n\n\t/**\n\t * Construct.\n\t * \n\t * @param tag\n\t *            The underlying xml tag\n\t * @param httpTagType\n\t */\n\tpublic HtmlSpecialTag(final XmlTag tag, final HttpTagType httpTagType)\n\t{\n\t\txmlTag = tag.makeImmutable();\n\t\tthis.httpTagType = httpTagType;\n\t}\n\n\t/**\n\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!\n\t * \n\t * @param flag\n\t *            The flag to set\n\t * @param set\n\t *            True to turn the flag on, false to turn it off\n\t */\n\tpublic final void setFlag(final int flag, final boolean set)\n\t{\n\t\tif (set)\n\t\t{\n\t\t\tflags |= flag;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflags &= ~flag;\n\t\t}\n\t}\n\n\t/**\n\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT!\n\t * \n\t * @param flag\n\t *            The flag to test\n\t * @return True if the flag is set\n\t */\n\tpublic final boolean getFlag(final int flag)\n\t{\n\t\treturn (flags & flag) != 0;\n\t}\n\n\t/**\n\t * Gets the length of the tag in characters.\n\t * \n\t * @return The tag's length\n\t */\n\tpublic final int getLength()\n\t{\n\t\treturn xmlTag.getLength();\n\t}\n\n\t/**\n\t * @see org.apache.wicket.markup.parser.XmlTag#getPos()\n\t * @return Tag location (index in input string)\n\t */\n\tpublic final int getPos()\n\t{\n\t\treturn xmlTag.getPos();\n\t}\n\n\t/**\n\t * @return the tag type (OPEN, CLOSE or OPEN_CLOSE).\n\t */\n\tpublic final TagType getType()\n\t{\n\t\treturn xmlTag.getType();\n\t}\n\n\t/**\n\t * @see org.apache.wicket.markup.parser.XmlTag#isClose()\n\t * @return True if this tag is a close tag\n\t */\n\tpublic final boolean isClose()\n\t{\n\t\treturn xmlTag.isClose();\n\t}\n\n\t/**\n\t * @see org.apache.wicket.markup.parser.XmlTag#isOpen()\n\t * @return True if this tag is an open tag\n\t */\n\tpublic final boolean isOpen()\n\t{\n\t\treturn xmlTag.isOpen();\n\t}\n\n\t/**\n\t * @see org.apache.wicket.markup.parser.XmlTag#isOpenClose()\n\t * @return True if this tag is an open and a close tag\n\t */\n\tpublic final boolean isOpenClose()\n\t{\n\t\treturn xmlTag.isOpenClose();\n\t}\n\n\t/**\n\t * Copies all internal properties from this tag to <code>dest</code>. This is basically cloning\n\t * without instance creation.\n\t * \n\t * @param dest\n\t *            tag whose properties will be set\n\t */\n\tvoid copyPropertiesTo(final HtmlSpecialTag dest)\n\t{\n\t\tdest.flags = flags;\n\t}\n\n\t@Override\n\tpublic CharSequence toCharSequence()\n\t{\n\t\treturn xmlTag.toCharSequence();\n\t}\n\n\t/**\n\t * Converts this object to a string representation.\n\t * \n\t * @return String version of this object\n\t */\n\t@Override\n\tpublic final String toString()\n\t{\n\t\treturn \"\" + httpTagType + \": '\" + xmlTag.toString() + \"'\";\n\t}\n\n\t/**\n\t * Write the tag to the response\n\t * \n\t * @param response\n\t *            The response to write to\n\t * @param stripWicketAttributes\n\t *            if true, wicket:id are removed from output\n\t * @param namespace\n\t *            Wicket's namespace to use\n\t */\n\tpublic final void writeOutput(final Response response, final boolean stripWicketAttributes,\n\t\tfinal String namespace)\n\t{\n\t\tresponse.write(toString());\n\t}\n\n\t/**\n\t * Converts this object to a string representation including useful information for debugging\n\t * \n\t * @return String version of this object\n\t */\n\t@Override\n\tpublic final String toUserDebugString()\n\t{\n\t\treturn xmlTag.toUserDebugString();\n\t}\n\n\t/**\n\t * @return Returns the underlying xml tag.\n\t */\n\tpublic final XmlTag getXmlTag()\n\t{\n\t\treturn xmlTag;\n\t}\n\n\t@Override\n\tpublic boolean equalTo(final MarkupElement element)\n\t{\n\t\tif (element instanceof HtmlSpecialTag)\n\t\t{\n\t\t\tfinal HtmlSpecialTag that = (HtmlSpecialTag)element;\n\t\t\treturn getXmlTag().equalTo(that.getXmlTag());\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * For subclasses to override. Gets called just before a Component gets rendered. It is\n\t * guaranteed that the markupStream is set on the Component and determineVisibility is not yet\n\t * called.\n\t * \n\t * @param component\n\t *            The component that is about to be rendered\n\t * @param markupStream\n\t *            The current amrkup stream\n\t */\n\tpublic void onBeforeRender(final Component component, final MarkupStream markupStream)\n\t{\n\t}\n\n\t/**\n\t * Gets httpTagType.\n\t * \n\t * @return httpTagType\n\t */\n\tpublic final HttpTagType getHttpTagType()\n\t{\n\t\treturn httpTagType;\n\t}\n}<fim_middle>// class below has no smell\n"}