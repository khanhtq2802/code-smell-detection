{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.pluto.tags;\n\nimport java.util.Map;\nimport java.util.Set;\n\nimport javax.portlet.PortletConfig;\nimport javax.portlet.PortletRequest;\nimport javax.servlet.jsp.JspException;\n\n/**\n * Abstract supporting class for the JSR 286 actionURL \n * and renderURL tag handlers.\n * \n * @version 2.0\n */\n\npublic abstract class PortletURLTag286 extends PortletURLTag168 {\n   private static final long serialVersionUID = -4853187908316856275L;\n\n   protected String copyCurrentRenderParameters = null;\n\t\n\t\n\tpublic PortletURLTag286() {\n\t\tsuper();\n\t\tsetEscapeXml(Boolean.TRUE.toString());\n\t}\n\t\n<fim_suffix>\tprotected void handleDefaultEscapeXML() {\n\n      PortletConfig portletConfig = (PortletConfig) pageContext.getRequest().getAttribute(Constants.PORTLET_CONFIG);\n      Map<String, String[]> containerRuntimeOptions = portletConfig.getContainerRuntimeOptions();\n      if (containerRuntimeOptions != null) {\n         String[] result = containerRuntimeOptions.get(Constants.ESCAPE_XML_RUNTIME_OPTION);\n         if (result != null) {\n            if (result.length > 0) {\n               setEscapeXml(result[0]);\n            }\n         }\n      }\n\n\t}\n\t\n\t\n\t/* (non-Javadoc)\n\t * @see org.apache.pluto.tags.BaseURLTag#doStartTag()\n\t */\n\t@Override\n    public int doStartTag() throws JspException {    \t    \t  \n        handleDefaultEscapeXML();\n        \n        if (copyCurrentRenderParameters != null && \n              !copyCurrentRenderParameters.equalsIgnoreCase(\"true\") && \n              !copyCurrentRenderParameters.equalsIgnoreCase(\"false\")) {\n           StringBuilder txt = new StringBuilder(128);\n           txt.append(\"Invalid cacheability option: \").append(copyCurrentRenderParameters);\n           txt.append(\", valid options: true, false\");\n           throw new JspException(txt.toString());\n        }\n        \n        return super.doStartTag();\n    }\n\t\n    \n\t/* (non-Javadoc)\n\t * @see org.apache.pluto.tags.BaseURLTag#doEndTag()\n\t */\n\t@Override\n\tpublic int doEndTag() throws JspException{\n\t\t\t\t\n\t\tif(Boolean.parseBoolean(copyCurrentRenderParameters)){\n\t\t\t/*prepend current render parameters*/\n\t\t\tdoCopyCurrentRenderParameters();\n\t\t}\n\t    \n        return super.doEndTag();\n\t}\n\t\n        \n    /**\n     * Returns the copyCurrentRenderParameters property.\n     * @return Boolean\n     */\n    public Boolean isCopyCurrentRenderParameters() {\n        return new Boolean(copyCurrentRenderParameters);\n    }\n    \n    \n    /**\n     * Returns the copyCurrentRenderParameters property.\n     * @return Boolean\n     */\n    public String getCopyCurrentRenderParameters() {\n        return copyCurrentRenderParameters;\n    }\n         \n        \n    /**\n     * Sets copyCurrentRenderParameters property.\n     * @param copyCurrentRenderParameters\n     * @return void\n     */\n    public void setCopyCurrentRenderParameters(String copyCurrentRenderParameters) {\n        this.copyCurrentRenderParameters = copyCurrentRenderParameters;\n    }\n        \n    \t\n\t/**\n     * Copies the current render parameters to the parameter map.\n     * @return void\n     */\n    @SuppressWarnings(\"deprecation\")\n   protected void doCopyCurrentRenderParameters(){\n    \tPortletRequest request = \n    \t\t(PortletRequest) pageContext.getRequest().\n    \t\tgetAttribute(Constants.PORTLET_REQUEST);\n\t\t\n    \tif(request != null){    \t\t\n\t\t\tMap<String,String[]> renderParamsMap =\n\t\t\t\trequest.getPrivateParameterMap();\n\t\t\t\n\t\t\tSet<String> keySet = renderParamsMap.keySet();\n\t\t\t\n\t\t\tfor(String key : keySet){\n\t\t\t\t\t\t\t\t\t\n\t\t\t\tif(!removedParametersList.contains(key)){\n\n\t\t\t\t\tString[] values = renderParamsMap.get(key);\n\n\t\t\t\t\tfor(int index = 0; index < values.length; ++index){\n\t\t\t\t\t\taddParameter(key, values[index]);\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n    \n}<fim_middle>// function below has no smell\n"}