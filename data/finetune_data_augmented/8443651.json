{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.gson;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.lang.reflect.Type;\nimport java.util.Arrays;\nimport java.util.List;\nimport com.google.gson.ExclusionStrategy;\nimport com.google.gson.FieldNamingPolicy;\nimport com.google.gson.FieldNamingStrategy;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.LongSerializationPolicy;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.spi.DataFormat;\nimport org.apache.camel.spi.DataFormatName;\nimport org.apache.camel.spi.annotations.Dataformat;\nimport org.apache.camel.support.ExchangeHelper;\nimport org.apache.camel.support.service.ServiceSupport;\nimport org.apache.camel.util.IOHelper;\n/**\n * A <a href=\"http://camel.apache.org/data-format.html\">data format</a> ({@link DataFormat})\n * using <a href=\"http://code.google.com/p/google-gson/\">Gson</a> to marshal to and from JSON.\n */\n@Dataformat(\"json-gson\")\npublic class GsonDataFormat extends ServiceSupport implements DataFormat, DataFormatName {\n    private Gson gson;\n    private Class<?> unmarshalType;\n    private Type unmarshalGenericType;\n    private List<ExclusionStrategy> exclusionStrategies;\n    private LongSerializationPolicy longSerializationPolicy;\n    private FieldNamingPolicy fieldNamingPolicy;\n    private FieldNamingStrategy fieldNamingStrategy;\n    private boolean serializeNulls;\n    private boolean prettyPrint;\n    private String dateFormatPattern;\n    private boolean contentTypeHeader = true;\n    public GsonDataFormat() {\n        this(Object.class);\n    }\n    /**\n     * Use the default Gson {@link Gson} and with a custom\n     * unmarshal type\n     *\n     * @param unmarshalType the custom unmarshal type\n     */\n    public GsonDataFormat(Class<?> unmarshalType) {\n        this(null, unmarshalType);\n    }\n    /**\n     * Use the default Gson {@link Gson} and with a custom\n     * unmarshal type and {@link ExclusionStrategy}\n     *\n     * @param unmarshalType the custom unmarshal type\n     * @param exclusionStrategies one or more custom ExclusionStrategy implementations\n     * @deprecated use the setter instead\n     */\n    @Deprecated\n    public GsonDataFormat(Class<?> unmarshalType, ExclusionStrategy... exclusionStrategies) {\n        this(null, unmarshalType);\n        setExclusionStrategies(Arrays.asList(exclusionStrategies));\n    }\n    /**\n     * Use a custom Gson mapper and and unmarshal type\n     *\n     * @param gson          the custom mapper\n     * @param unmarshalType the custom unmarshal type\n     */\n    public GsonDataFormat(Gson gson, Class<?> unmarshalType) {\n        this.gson = gson;\n        this.unmarshalType = unmarshalType;\n    }\n    /**\n     * Use the default Gson {@link Gson} and with a custom\n     * unmarshal generic type\n     *\n     * @param unmarshalGenericType the custom unmarshal generic type\n     */\n    public GsonDataFormat(Type unmarshalGenericType) {\n        this(null, unmarshalGenericType);\n    }\n    /**\n     * Use a custom Gson mapper and and unmarshal token type\n     *\n     * @param gson          the custom mapper\n     * @param unmarshalGenericType the custom unmarshal generic type\n     */\n    public GsonDataFormat(Gson gson, Type unmarshalGenericType) {\n        this.gson = gson;\n        this.unmarshalGenericType = unmarshalGenericType;\n    }\n    @Override\n    public String getDataFormatName() {\n        return \"json-gson\";\n    }\n    @Override\n    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        try (final OutputStreamWriter osw = new OutputStreamWriter(stream, ExchangeHelper.getCharsetName(exchange));\n             final BufferedWriter writer = IOHelper.buffered(osw)) {\n            gson.toJson(graph, writer);\n        }\n        if (contentTypeHeader) {\n            if (exchange.hasOut()) {\n                exchange.getOut().setHeader(Exchange.CONTENT_TYPE, \"application/json\");\n            } else {\n                exchange.getIn().setHeader(Exchange.CONTENT_TYPE, \"application/json\");\n            }\n        }\n    }\n    @Override\n    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        try (final InputStreamReader isr = new InputStreamReader(stream, ExchangeHelper.getCharsetName(exchange));\n             final BufferedReader reader = IOHelper.buffered(isr)) {\n            if (unmarshalGenericType == null) {\n                return gson.fromJson(reader, unmarshalType);\n            } else {\n                return gson.fromJson(reader, unmarshalGenericType);\n            }\n        }\n    }\n<fim_suffix>    @Override\n    protected void doStart() throws Exception {\n        if (gson == null) {\n            GsonBuilder builder = new GsonBuilder();\n            if (exclusionStrategies != null && !exclusionStrategies.isEmpty()) {\n                ExclusionStrategy[] strategies = exclusionStrategies.toArray(new ExclusionStrategy[exclusionStrategies.size()]);\n                builder.setExclusionStrategies(strategies);\n            }\n            if (longSerializationPolicy != null) {\n                builder.setLongSerializationPolicy(longSerializationPolicy);\n            }\n            if (fieldNamingPolicy != null) {\n                builder.setFieldNamingPolicy(fieldNamingPolicy);\n            }\n            if (fieldNamingStrategy != null) {\n                builder.setFieldNamingStrategy(fieldNamingStrategy);\n            }\n            if (serializeNulls) {\n                builder.serializeNulls();\n            }\n            if (prettyPrint) {\n                builder.setPrettyPrinting();\n            }\n            if (dateFormatPattern != null) {\n                builder.setDateFormat(dateFormatPattern);\n            }\n            gson = builder.create();\n        }\n    }\n    @Override\n    protected void doStop() throws Exception {\n        // noop\n    }\n    // Properties\n    // -------------------------------------------------------------------------\n    public Class<?> getUnmarshalType() {\n        return this.unmarshalType;\n    }\n    public void setUnmarshalType(Class<?> unmarshalType) {\n        this.unmarshalType = unmarshalType;\n    }\n    public Type getUnmarshalGenericType() {\n        return this.unmarshalType;\n    }\n    public void setUnmarshalGenericType(Type unmarshalGenericType) {\n        this.unmarshalGenericType = unmarshalGenericType;\n    }\n    public List<ExclusionStrategy> getExclusionStrategies() {\n        return exclusionStrategies;\n    }\n    public void setExclusionStrategies(List<ExclusionStrategy> exclusionStrategies) {\n        this.exclusionStrategies = exclusionStrategies;\n    }\n    public LongSerializationPolicy getLongSerializationPolicy() {\n        return longSerializationPolicy;\n    }\n    public void setLongSerializationPolicy(LongSerializationPolicy longSerializationPolicy) {\n        this.longSerializationPolicy = longSerializationPolicy;\n    }\n    public FieldNamingPolicy getFieldNamingPolicy() {\n        return fieldNamingPolicy;\n    }\n    public void setFieldNamingPolicy(FieldNamingPolicy fieldNamingPolicy) {\n        this.fieldNamingPolicy = fieldNamingPolicy;\n    }\n    public FieldNamingStrategy getFieldNamingStrategy() {\n        return fieldNamingStrategy;\n    }\n    public void setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy) {\n        this.fieldNamingStrategy = fieldNamingStrategy;\n    }\n    /**\n     * @deprecated use {@link #isSerializeNulls()} instead\n     */\n    @Deprecated\n    public Boolean getSerializeNulls() {\n        return serializeNulls;\n    }\n    public boolean isSerializeNulls() {\n        return serializeNulls;\n    }\n    /**\n     * @deprecated use {@link #setSerializeNulls(boolean)} instead\n     */\n    @Deprecated\n    public void setSerializeNulls(Boolean serializeNulls) {\n        this.serializeNulls = serializeNulls;\n    }\n    public void setSerializeNulls(boolean serializeNulls) {\n        this.serializeNulls = serializeNulls;\n    }\n    /**\n     * @deprecated use {@link #isPrettyPrint()} instead\n     */\n    @Deprecated\n    public Boolean getPrettyPrinting() {\n        return prettyPrint;\n    }\n    public boolean isPrettyPrint() {\n        return prettyPrint;\n    }\n    /**\n     * @deprecated use {@link #setPrettyPrint(boolean)} instead\n     */\n    @Deprecated\n    public void setPrettyPrinting(Boolean prettyPrinting) {\n        this.prettyPrint = prettyPrinting;\n    }\n    public void setPrettyPrint(boolean prettyPrint) {<fim_middle>// function below has no smell\n"}