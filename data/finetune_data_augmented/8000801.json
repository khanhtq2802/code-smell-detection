{"text": "<fim_prefix>/**\n * Copyright (c) 2016 TypeFox GmbH (http://www.typefox.io) and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n */\npackage org.eclipse.xtext.ui.editor.hierarchy;\n\nimport com.google.common.collect.Iterables;\nimport java.util.Collection;\nimport java.util.List;\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.emf.common.util.URI;\nimport org.eclipse.jface.viewers.ISelection;\nimport org.eclipse.jface.viewers.IStructuredSelection;\nimport org.eclipse.ui.part.ViewPart;\nimport org.eclipse.xtend.lib.annotations.AccessorType;\nimport org.eclipse.xtend.lib.annotations.Accessors;\nimport org.eclipse.xtext.ide.editor.hierarchy.DefaultHierarchyRoot;\nimport org.eclipse.xtext.ide.editor.hierarchy.IHierarchyBuilder;\nimport org.eclipse.xtext.ide.editor.hierarchy.IHierarchyNode;\nimport org.eclipse.xtext.ide.editor.hierarchy.IHierarchyRoot;\nimport org.eclipse.xtext.ui.editor.hierarchy.DeferredHierarchyBuilder;\nimport org.eclipse.xtext.xbase.lib.Pure;\n\n/**\n * @author kosyakov - Initial contribution and API\n * @since 2.10\n */\n<fim_suffix>@Accessors({ AccessorType.PUBLIC_SETTER, AccessorType.PROTECTED_GETTER })\n@SuppressWarnings(\"all\")\npublic abstract class AbstractHierarchyViewPart extends ViewPart {\n  private IHierarchyBuilder builder;\n  \n  private URI rootURI;\n  \n  public void refresh(final IProgressMonitor monitor) {\n    this.setRoot(this.createRoot(monitor));\n  }\n  \n  protected IHierarchyRoot createRoot(final IProgressMonitor monitor) {\n    if (((this.builder == null) || (this.rootURI == null))) {\n      return IHierarchyRoot.EMPTY;\n    }\n    final Collection<IHierarchyNode> roots = this.builder.buildRoots(this.rootURI, monitor);\n    boolean _isEmpty = roots.isEmpty();\n    if (_isEmpty) {\n      return IHierarchyRoot.EMPTY;\n    }\n    final DefaultHierarchyRoot root = new DefaultHierarchyRoot();\n    List<IHierarchyNode> _roots = root.getRoots();\n    Iterables.<IHierarchyNode>addAll(_roots, roots);\n    return root;\n  }\n  \n  protected abstract void setRoot(final IHierarchyRoot root);\n  \n  protected IHierarchyNode getSelectedNode(final ISelection selection) {\n    boolean _matched = false;\n    if (selection instanceof IStructuredSelection) {\n      int _size = ((IStructuredSelection)selection).size();\n      boolean _equals = (_size == 1);\n      if (_equals) {\n        _matched=true;\n        final Object selectedElement = ((IStructuredSelection)selection).getFirstElement();\n        if ((selectedElement instanceof IHierarchyNode)) {\n          return ((IHierarchyNode)selectedElement);\n        }\n      }\n    }\n    return null;\n  }\n  \n  protected <T extends IHierarchyBuilder> T getBuilder(final Class<T> clazz) {\n    boolean _isInstance = clazz.isInstance(this.builder);\n    if (_isInstance) {\n      return ((T) this.builder);\n    }\n    if ((this.builder instanceof DeferredHierarchyBuilder)) {\n      final IHierarchyBuilder wrappedBuilder = ((DeferredHierarchyBuilder)this.builder).getHierarchyBuilder();\n      boolean _isInstance_1 = clazz.isInstance(wrappedBuilder);\n      if (_isInstance_1) {\n        return ((T) wrappedBuilder);\n      }\n    }\n    return null;\n  }\n  \n  @Pure\n  protected IHierarchyBuilder getBuilder() {\n    return this.builder;\n  }\n  \n  public void setBuilder(final IHierarchyBuilder builder) {\n    this.builder = builder;\n  }\n  \n  @Pure\n  protected URI getRootURI() {\n    return this.rootURI;\n  }\n  \n  public void setRootURI(final URI rootURI) {\n    this.rootURI = rootURI;\n  }\n}<fim_middle>// class below has no smell\n"}