{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.imaging.formats.jpeg.xmp;\nimport static org.apache.commons.imaging.common.BinaryFunctions.startsWith;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.ByteOrder;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.ImageWriteException;\nimport org.apache.commons.imaging.common.BinaryFileParser;\nimport org.apache.commons.imaging.common.ByteConversions;\nimport org.apache.commons.imaging.common.bytesource.ByteSource;\nimport org.apache.commons.imaging.formats.jpeg.JpegConstants;\nimport org.apache.commons.imaging.formats.jpeg.JpegUtils;\nimport org.apache.commons.imaging.formats.jpeg.iptc.IptcParser;\n/**\n * Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\n */\npublic class JpegRewriter extends BinaryFileParser {\n    private static final ByteOrder JPEG_BYTE_ORDER = ByteOrder.BIG_ENDIAN;\n    private static final SegmentFilter EXIF_SEGMENT_FILTER = new SegmentFilter() {\n        @Override\n        public boolean filter(final JFIFPieceSegment segment) {\n            return segment.isExifSegment();\n        }\n    };\n    private static final SegmentFilter XMP_SEGMENT_FILTER = new SegmentFilter() {\n        @Override\n        public boolean filter(final JFIFPieceSegment segment) {\n            return segment.isXmpSegment();\n        }\n    };\n    private static final SegmentFilter PHOTOSHOP_APP13_SEGMENT_FILTER = new SegmentFilter() {\n        @Override\n        public boolean filter(final JFIFPieceSegment segment) {\n            return segment.isPhotoshopApp13Segment();\n        }\n    };\n    /**\n     * Constructor. to guess whether a file contains an image based on its file\n     * extension.\n     */\n    public JpegRewriter() {\n        setByteOrder(JPEG_BYTE_ORDER);\n    }\n    protected static class JFIFPieces {\n        public final List<JFIFPiece> pieces;\n        public final List<JFIFPiece> segmentPieces;\n        public JFIFPieces(final List<JFIFPiece> pieces,\n                final List<JFIFPiece> segmentPieces) {\n            this.pieces = pieces;\n            this.segmentPieces = segmentPieces;\n        }\n    }\n    protected abstract static class JFIFPiece {\n        protected abstract void write(OutputStream os) throws IOException;\n        @Override\n        public String toString() {\n            return \"[\" + this.getClass().getName() + \"]\";\n        }\n    }\n<fim_suffix>    protected static class JFIFPieceSegment extends JFIFPiece {\n        public final int marker;\n        private final byte[] markerBytes;\n        private final byte[] segmentLengthBytes;\n        private final byte[] segmentData;\n        public JFIFPieceSegment(final int marker, final byte[] segmentData) {\n            this(marker,\n                    ByteConversions.toBytes((short) marker, JPEG_BYTE_ORDER),\n                    ByteConversions.toBytes((short) (segmentData.length + 2), JPEG_BYTE_ORDER),\n                    segmentData);\n        }\n        JFIFPieceSegment(final int marker, final byte[] markerBytes,\n                final byte[] segmentLengthBytes, final byte[] segmentData) {\n            this.marker = marker;\n            this.markerBytes = markerBytes;\n            this.segmentLengthBytes = segmentLengthBytes;\n            this.segmentData = segmentData; // TODO clone?\n        }\n        @Override\n        public String toString() {\n            return \"[\" + this.getClass().getName() + \" (0x\"\n                    + Integer.toHexString(marker) + \")]\";\n        }\n        @Override\n        protected void write(final OutputStream os) throws IOException {\n            os.write(markerBytes);\n            os.write(segmentLengthBytes);\n            os.write(segmentData);\n        }\n        public boolean isApp1Segment() {\n            return marker == JpegConstants.JPEG_APP1_MARKER;\n        }\n        public boolean isAppSegment() {\n            return marker >= JpegConstants.JPEG_APP0_MARKER && marker <= JpegConstants.JPEG_APP15_MARKER;\n        }\n        public boolean isExifSegment() {\n            if (marker != JpegConstants.JPEG_APP1_MARKER) {\n                return false;\n            }\n            if (!startsWith(segmentData, JpegConstants.EXIF_IDENTIFIER_CODE)) {\n                return false;\n            }\n            return true;\n        }\n        public boolean isPhotoshopApp13Segment() {\n            if (marker != JpegConstants.JPEG_APP13_MARKER) {\n                return false;\n            }\n            if (!new IptcParser().isPhotoshopJpegSegment(segmentData)) {\n                return false;\n            }\n            return true;\n        }\n        public boolean isXmpSegment() {\n            if (marker != JpegConstants.JPEG_APP1_MARKER) {\n                return false;\n            }\n            if (!startsWith(segmentData, JpegConstants.XMP_IDENTIFIER)) {\n                return false;\n            }\n            return true;\n        }\n        public byte[] getSegmentData() {\n            return segmentData; // TODO clone?\n        }\n    }\n    static class JFIFPieceImageData extends JFIFPiece {\n        private final byte[] markerBytes;\n        private final byte[] imageData;\n        JFIFPieceImageData(final byte[] markerBytes, final byte[] imageData) {\n            super();\n            this.markerBytes = markerBytes;\n            this.imageData = imageData;\n        }\n        @Override\n        protected void write(final OutputStream os) throws IOException {\n            os.write(markerBytes);\n            os.write(imageData);\n        }\n    }\n    protected JFIFPieces analyzeJFIF(final ByteSource byteSource) throws ImageReadException, IOException {\n        final List<JFIFPiece> pieces = new ArrayList<>();\n        final List<JFIFPiece> segmentPieces = new ArrayList<>();\n        final JpegUtils.Visitor visitor = new JpegUtils.Visitor() {\n            // return false to exit before reading image data.\n            @Override\n            public boolean beginSOS() {\n                return true;\n            }\n            @Override\n            public void visitSOS(final int marker, final byte[] markerBytes, final byte[] imageData) {\n                pieces.add(new JFIFPieceImageData(markerBytes, imageData));\n            }\n            // return false to exit traversal.\n            @Override\n            public boolean visitSegment(final int marker, final byte[] markerBytes,\n                    final int segmentLength, final byte[] segmentLengthBytes,\n                    final byte[] segmentData) throws ImageReadException, IOException {\n                final JFIFPiece piece = new JFIFPieceSegment(marker, markerBytes,\n                        segmentLengthBytes, segmentData);\n                pieces.add(piece);\n                segmentPieces.add(piece);\n                return true;\n            }\n        };\n        new JpegUtils().traverseJFIF(byteSource, visitor);\n        return new JFIFPieces(pieces, segmentPieces);\n    }\n    private interface SegmentFilter {\n        boolean filter(JFIFPieceSegment segment);\n    }\n    protected <T extends JFIFPiece> List<T> removeXmpSegments(final List<T> segments) {\n        return filterSegments(segments, XMP_SEGMENT_FILTER);\n    }\n    protected <T extends JFIFPiece> List<T> removePhotoshopApp13Segments(\n            final List<T> segments) {\n        return filterSegments(segments, PHOTOSHOP_APP13_SEGMENT_FILTER);\n    }\n    protected <T extends JFIFPiece> List<T> findPhotoshopApp13Segments(\n            final List<T> segments) {\n        return filterSegments(segments, PHOTOSHOP_APP13_SEGMENT_FILTER, true);\n    }\n    protected <T extends JFIFPiece> List<T> removeExifSegments(final List<T> segments) {\n        return filterSegments(segments, EXIF_SEGMENT_FILTER);\n    }\n    protected <T extends JFIFPiece> List<T> filterSegments(final List<T> segments,\n            final SegmentFilter filter) {\n        return filterSegments(segments, filter, false);\n    }\n    protected <T extends JFIFPiece> List<T> filterSegments(final List<T> segments,<fim_middle>// class below has no smell\n"}