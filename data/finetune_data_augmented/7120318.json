{"text": "<fim_prefix>\n<fim_suffix>public abstract class AbstractAzureMojo extends AbstractMojo implements TelemetryConfiguration, AuthConfiguration {\n    public static final String PLUGIN_NAME_KEY = \"pluginName\";\n    public static final String PLUGIN_VERSION_KEY = \"pluginVersion\";\n    public static final String INSTALLATION_ID_KEY = \"installationId\";\n    public static final String SESSION_ID_KEY = \"sessionId\";\n    public static final String SUBSCRIPTION_ID_KEY = \"subscriptionId\";\n    public static final String AUTH_TYPE = \"authType\";\n    public static final String TELEMETRY_NOT_ALLOWED = \"TelemetryNotAllowed\";\n    public static final String INIT_FAILURE = \"InitFailure\";\n    public static final String AZURE_INIT_FAIL = \"Failed to authenticate with Azure. Please check your configuration.\";\n    public static final String FAILURE_REASON = \"failureReason\";\n    private static final String CONFIGURATION_PATH = Paths.get(System.getProperty(\"user.home\"),\n        \".azure\", \"mavenplugins.properties\").toString();\n    private static final String FIRST_RUN_KEY = \"first.run\";\n    private static final String PRIVACY_STATEMENT = \"\\nData/Telemetry\\n\" +\n        \"---------\\n\" +\n        \"This project collects usage data and sends it to Microsoft to help improve our products and services.\\n\" +\n        \"Read Microsoft's privacy statement to learn more: https://privacy.microsoft.com/en-us/privacystatement.\" +\n        \"\\n\\nYou can change your telemetry configuration through 'allowTelemetry' property.\\n\" +\n        \"For more information, please go to https://aka.ms/azure-maven-config.\\n\";\n    //region Properties\n    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n    protected MavenProject project;\n    @Parameter(defaultValue = \"${session}\", readonly = true, required = true)\n    protected MavenSession session;\n    @Parameter(defaultValue = \"${project.build.directory}\", readonly = true, required = true)\n    protected File buildDirectory;\n    @Parameter(defaultValue = \"${plugin}\", readonly = true, required = true)\n    protected PluginDescriptor plugin;\n    /**\n     * The system settings for Maven. This is the instance resulting from\n     * merging global and user-level settings files.\n     */\n    @Parameter(defaultValue = \"${settings}\", readonly = true, required = true)\n    protected Settings settings;\n    @Component(role = MavenResourcesFiltering.class, hint = \"default\")\n    protected MavenResourcesFiltering mavenResourcesFiltering;\n    /**\n     * Authentication setting for Azure Management API.<br/>\n     * Below are the supported sub-elements within {@code <authentication>}. You can use one of them to authenticate\n     * with azure<br/>\n     * {@code <serverId>} specifies the credentials of your Azure service principal, by referencing a server definition\n     * in Maven's settings.xml<br/>\n     * {@code <file>} specifies the absolute path of your authentication file for Azure.\n     *\n     * @since 0.1.0\n     */\n    @Parameter\n    protected AuthenticationSetting authentication;\n    /**\n     * Azure subscription Id. You only need to specify it when:\n     * <ul>\n     * <li>you are using authentication file</li>\n     * <li>there are more than one subscription in the authentication file</li>\n     * </ul>\n     *\n     * @since 0.1.0\n     */\n    @Parameter\n    protected String subscriptionId = \"\";\n    /**\n     * Boolean flag to turn on/off telemetry within current Maven plugin.\n     *\n     * @since 0.1.0\n     */\n    @Parameter(property = \"allowTelemetry\", defaultValue = \"true\")\n    protected boolean allowTelemetry;\n    /**\n     * Boolean flag to control whether throwing exception from current Maven plugin when meeting any error.<br/>\n     * If set to true, the exception from current Maven plugin will fail the current Maven run.\n     *\n     * @since 0.1.0\n     */\n    @Parameter(property = \"failsOnError\", defaultValue = \"true\")\n    protected boolean failsOnError;\n    /**\n     * Use a HTTP proxy host for the Azure Auth Client\n     */\n    @Parameter(property = \"httpProxyHost\", readonly = false, required = false)\n    protected String httpProxyHost;\n    /**\n     * Use a HTTP proxy port for the Azure Auth Client\n     */\n    @Parameter(property = \"httpProxyPort\", defaultValue = \"80\")\n    protected int httpProxyPort;\n    private AzureAuthHelper azureAuthHelper = new AzureAuthHelper(this);\n    private Azure azure;\n    private TelemetryProxy telemetryProxy;\n    private String sessionId = UUID.randomUUID().toString();\n    private String installationId = GetHashMac.getHashMac();\n    //endregion\n    //region Getter\n    public MavenProject getProject() {\n        return project;\n    }\n    public MavenSession getSession() {\n        return session;\n    }\n    public String getBuildDirectoryAbsolutePath() {\n        return buildDirectory.getAbsolutePath();\n    }\n    public MavenResourcesFiltering getMavenResourcesFiltering() {\n        return mavenResourcesFiltering;\n    }\n    public Settings getSettings() {\n        return settings;\n    }\n    public AuthenticationSetting getAuthenticationSetting() {\n        return authentication;\n    }\n    public String getSubscriptionId() {\n        return subscriptionId;\n    }\n    public boolean isTelemetryAllowed() {\n        return allowTelemetry;\n    }\n    public boolean isFailingOnError() {\n        return failsOnError;\n    }\n    public String getSessionId() {\n        return sessionId;\n    }\n    public String getInstallationId() {\n        return installationId == null ? \"\" : installationId;\n    }\n    public String getPluginName() {\n        return plugin.getArtifactId();\n    }\n    public String getPluginVersion() {\n        return plugin.getVersion();\n    }\n    public String getUserAgent() {\n        return isTelemetryAllowed() ? String.format(\"%s/%s %s:%s %s:%s\", getPluginName(), getPluginVersion(),\n                        INSTALLATION_ID_KEY, getInstallationId(), SESSION_ID_KEY, getSessionId())\n                : String.format(\"%s/%s\", getPluginName(), getPluginVersion());\n    }\n    public String getHttpProxyHost() {\n        return httpProxyHost;\n    }  \n    public int getHttpProxyPort() {\n        return httpProxyPort;\n    } \n    public Azure getAzureClient() throws AzureAuthFailureException {\n        if (azure == null) {\n            azure = azureAuthHelper.getAzureClient();\n            if (azure == null) {\n                getTelemetryProxy().trackEvent(INIT_FAILURE);\n                throw new AzureAuthFailureException(AZURE_INIT_FAIL);\n            } else {\n                // Repopulate subscriptionId in case it is not configured.\n                getTelemetryProxy().addDefaultProperty(SUBSCRIPTION_ID_KEY, azure.subscriptionId());\n            }\n        }\n        return azure;\n    }\n    public TelemetryProxy getTelemetryProxy() {\n        if (telemetryProxy == null) {\n            initTelemetry();\n        }\n        return telemetryProxy;\n    }\n    protected void initTelemetry() {\n        telemetryProxy = new AppInsightsProxy(this);\n        if (!isTelemetryAllowed()) {\n            telemetryProxy.trackEvent(TELEMETRY_NOT_ALLOWED);\n            telemetryProxy.disable();\n        }\n    }\n    //endregion\n    //region Telemetry Configuration Interface\n    public Map<String, String> getTelemetryProperties() {\n        final Map<String, String> map = new HashMap<>();\n        map.put(INSTALLATION_ID_KEY, getInstallationId());\n        map.put(PLUGIN_NAME_KEY, getPluginName());\n        map.put(PLUGIN_VERSION_KEY, getPluginVersion());\n        map.put(SUBSCRIPTION_ID_KEY, getSubscriptionId());\n        map.put(SESSION_ID_KEY, getSessionId());\n        map.put(AUTH_TYPE, getAuthType());\n        return map;\n    }\n    // TODO:\n    // Add AuthType ENUM and move to AzureAuthHelper.\n    public String getAuthType() {\n        final AuthenticationSetting authSetting = getAuthenticationSetting();\n        if (authSetting == null) {\n            return \"AzureCLI\";\n        }\n        if (StringUtils.isNotEmpty(authSetting.getServerId())) {\n            return \"ServerId\";\n        }\n        if (authSetting.getFile() != null) {\n            return \"AuthFile\";\n        }\n        return \"Unknown\";\n    }\n    //endregion\n    //region Entry Point\n    @Override\n    public void execute() throws MojoExecutionException {\n        try {\n            // Work around for Application Insights Java SDK:\n            // Sometimes, NoClassDefFoundError will be thrown even after Maven build is completed successfully.\n            // An issue has been filed at https://github.com/Microsoft/ApplicationInsights-Java/issues/416\n            // Before this issue is fixed, set default uncaught exception handler for all threads as work around.\n            Thread.setDefaultUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler());\n            final Properties prop = new Properties();\n            if (isFirstRun(prop)) {\n                infoWithMultipleLines(PRIVACY_STATEMENT);\n                updateConfigurationFile(prop);\n            }\n            if (isSkipMojo()) {\n                info(\"Skip execution.\");\n                trackMojoSkip();\n            } else {\n                trackMojoStart();\n                doExecute();\n                trackMojoSuccess();\n            }\n        } catch (Exception e) {\n            handleException(e);\n        } finally {\n            // When maven goal executes too quick, The HTTPClient of AI SDK may not fully initialized and will step<fim_middle>// class below is data class\n"}