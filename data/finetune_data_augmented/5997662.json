{"text": "<fim_prefix>\n<fim_suffix>@KinesisClientInternalApi\npublic class DynamoDBLeaseSerializer implements LeaseSerializer {\n    private static final String LEASE_KEY_KEY = \"leaseKey\";\n    private static final String LEASE_OWNER_KEY = \"leaseOwner\";\n    private static final String LEASE_COUNTER_KEY = \"leaseCounter\";\n    private static final String OWNER_SWITCHES_KEY = \"ownerSwitchesSinceCheckpoint\";\n    private static final String CHECKPOINT_SEQUENCE_NUMBER_KEY = \"checkpoint\";\n    private static final String CHECKPOINT_SUBSEQUENCE_NUMBER_KEY = \"checkpointSubSequenceNumber\";\n    private static final String PENDING_CHECKPOINT_SEQUENCE_KEY = \"pendingCheckpoint\";\n    private static final String PENDING_CHECKPOINT_SUBSEQUENCE_KEY = \"pendingCheckpointSubSequenceNumber\";\n    private static final String PARENT_SHARD_ID_KEY = \"parentShardId\";\n    @Override\n    public Map<String, AttributeValue> toDynamoRecord(final Lease lease) {\n        Map<String, AttributeValue> result = new HashMap<>();\n        result.put(LEASE_KEY_KEY, DynamoUtils.createAttributeValue(lease.leaseKey()));\n        result.put(LEASE_COUNTER_KEY, DynamoUtils.createAttributeValue(lease.leaseCounter()));\n        if (lease.leaseOwner() != null) {\n            result.put(LEASE_OWNER_KEY, DynamoUtils.createAttributeValue(lease.leaseOwner()));\n        }\n        result.put(OWNER_SWITCHES_KEY, DynamoUtils.createAttributeValue(lease.ownerSwitchesSinceCheckpoint()));\n        result.put(CHECKPOINT_SEQUENCE_NUMBER_KEY, DynamoUtils.createAttributeValue(lease.checkpoint().sequenceNumber()));\n        result.put(CHECKPOINT_SUBSEQUENCE_NUMBER_KEY, DynamoUtils.createAttributeValue(lease.checkpoint().subSequenceNumber()));\n        if (lease.parentShardIds() != null && !lease.parentShardIds().isEmpty()) {\n            result.put(PARENT_SHARD_ID_KEY, DynamoUtils.createAttributeValue(lease.parentShardIds()));\n        }\n        if (lease.pendingCheckpoint() != null && !lease.pendingCheckpoint().sequenceNumber().isEmpty()) {\n            result.put(PENDING_CHECKPOINT_SEQUENCE_KEY, DynamoUtils.createAttributeValue(lease.pendingCheckpoint().sequenceNumber()));\n            result.put(PENDING_CHECKPOINT_SUBSEQUENCE_KEY, DynamoUtils.createAttributeValue(lease.pendingCheckpoint().subSequenceNumber()));\n        }\n        return result;\n    }\n    @Override\n    public Lease fromDynamoRecord(final Map<String, AttributeValue> dynamoRecord) {\n        Lease result = new Lease();\n        result.leaseKey(DynamoUtils.safeGetString(dynamoRecord, LEASE_KEY_KEY));\n        result.leaseOwner(DynamoUtils.safeGetString(dynamoRecord, LEASE_OWNER_KEY));\n        result.leaseCounter(DynamoUtils.safeGetLong(dynamoRecord, LEASE_COUNTER_KEY));\n        result.ownerSwitchesSinceCheckpoint(DynamoUtils.safeGetLong(dynamoRecord, OWNER_SWITCHES_KEY));\n        result.checkpoint(\n                new ExtendedSequenceNumber(\n                        DynamoUtils.safeGetString(dynamoRecord, CHECKPOINT_SEQUENCE_NUMBER_KEY),\n                        DynamoUtils.safeGetLong(dynamoRecord, CHECKPOINT_SUBSEQUENCE_NUMBER_KEY))\n        );\n        result.parentShardIds(DynamoUtils.safeGetSS(dynamoRecord, PARENT_SHARD_ID_KEY));\n        if (!Strings.isNullOrEmpty(DynamoUtils.safeGetString(dynamoRecord, PENDING_CHECKPOINT_SEQUENCE_KEY))) {\n            result.pendingCheckpoint(\n                    new ExtendedSequenceNumber(\n                            DynamoUtils.safeGetString(dynamoRecord, PENDING_CHECKPOINT_SEQUENCE_KEY),\n                            DynamoUtils.safeGetLong(dynamoRecord, PENDING_CHECKPOINT_SUBSEQUENCE_KEY))\n            );\n        }\n        return result;\n    }\n    @Override\n    public Map<String, AttributeValue> getDynamoHashKey(final String leaseKey) {\n        Map<String, AttributeValue> result = new HashMap<>();\n        result.put(LEASE_KEY_KEY, DynamoUtils.createAttributeValue(leaseKey));\n        return result;\n    }\n    @Override\n    public Map<String, AttributeValue> getDynamoHashKey(final Lease lease) {\n        return getDynamoHashKey(lease.leaseKey());\n    }\n    @Override\n    public Map<String, ExpectedAttributeValue> getDynamoLeaseCounterExpectation(final Lease lease) {\n        return getDynamoLeaseCounterExpectation(lease.leaseCounter());\n    }\n    public Map<String, ExpectedAttributeValue> getDynamoLeaseCounterExpectation(final Long leaseCounter) {\n        Map<String, ExpectedAttributeValue> result = new HashMap<>();\n        ExpectedAttributeValue eav = ExpectedAttributeValue.builder().value(DynamoUtils.createAttributeValue(leaseCounter)).build();\n        result.put(LEASE_COUNTER_KEY, eav);\n        return result;\n    }\n    @Override\n    public Map<String, ExpectedAttributeValue> getDynamoLeaseOwnerExpectation(final Lease lease) {\n        Map<String, ExpectedAttributeValue> result = new HashMap<>();\n        ExpectedAttributeValue.Builder eavBuilder = ExpectedAttributeValue.builder();\n        if (lease.leaseOwner() == null) {\n            eavBuilder = eavBuilder.exists(false);\n        } else {\n            eavBuilder = eavBuilder.value(DynamoUtils.createAttributeValue(lease.leaseOwner()));\n        }\n        result.put(LEASE_OWNER_KEY, eavBuilder.build());\n        return result;\n    }\n    @Override\n    public Map<String, ExpectedAttributeValue> getDynamoNonexistantExpectation() {\n        Map<String, ExpectedAttributeValue> result = new HashMap<>();\n        ExpectedAttributeValue expectedAV = ExpectedAttributeValue.builder().exists(false).build();\n        result.put(LEASE_KEY_KEY, expectedAV);\n        return result;\n    }\n    @Override\n    public Map<String, AttributeValueUpdate> getDynamoLeaseCounterUpdate(final Lease lease) {\n        return getDynamoLeaseCounterUpdate(lease.leaseCounter());\n    }\n    public Map<String, AttributeValueUpdate> getDynamoLeaseCounterUpdate(Long leaseCounter) {\n        Map<String, AttributeValueUpdate> result = new HashMap<>();\n        AttributeValueUpdate avu =\n                AttributeValueUpdate.builder().value(DynamoUtils.createAttributeValue(leaseCounter + 1)).action(AttributeAction.PUT).build();\n        result.put(LEASE_COUNTER_KEY, avu);\n        return result;\n    }\n    @Override\n    public Map<String, AttributeValueUpdate> getDynamoTakeLeaseUpdate(final Lease lease, String owner) {\n        Map<String, AttributeValueUpdate> result = new HashMap<>();\n        result.put(LEASE_OWNER_KEY, AttributeValueUpdate.builder().value(DynamoUtils.createAttributeValue(owner)).action(AttributeAction.PUT).build());\n        String oldOwner = lease.leaseOwner();\n        if (oldOwner != null && !oldOwner.equals(owner)) {\n            result.put(OWNER_SWITCHES_KEY, AttributeValueUpdate.builder().value(DynamoUtils.createAttributeValue(1L)).action(AttributeAction.ADD).build());\n        }\n        return result;\n    }\n    @Override\n    public Map<String, AttributeValueUpdate> getDynamoEvictLeaseUpdate(final Lease lease) {\n        Map<String, AttributeValueUpdate> result = new HashMap<>();\n        AttributeValue value = null;\n        result.put(LEASE_OWNER_KEY, AttributeValueUpdate.builder().value(value).action(AttributeAction.DELETE).build());\n        return result;\n    }\n    private AttributeValueUpdate putUpdate(AttributeValue attributeValue) {\n        return AttributeValueUpdate.builder().value(attributeValue).action(AttributeAction.PUT).build();\n    }\n    @Override\n    public Map<String, AttributeValueUpdate> getDynamoUpdateLeaseUpdate(final Lease lease) {\n        Map<String, AttributeValueUpdate> result = new HashMap<>();\n        result.put(CHECKPOINT_SEQUENCE_NUMBER_KEY, putUpdate(DynamoUtils.createAttributeValue(lease.checkpoint().sequenceNumber())));\n        result.put(CHECKPOINT_SUBSEQUENCE_NUMBER_KEY, putUpdate(DynamoUtils.createAttributeValue(lease.checkpoint().subSequenceNumber())));\n        result.put(OWNER_SWITCHES_KEY, putUpdate(DynamoUtils.createAttributeValue(lease.ownerSwitchesSinceCheckpoint())));\n        if (lease.pendingCheckpoint() != null && !lease.pendingCheckpoint().sequenceNumber().isEmpty()) {\n            result.put(PENDING_CHECKPOINT_SEQUENCE_KEY, putUpdate(DynamoUtils.createAttributeValue(lease.pendingCheckpoint().sequenceNumber())));\n            result.put(PENDING_CHECKPOINT_SUBSEQUENCE_KEY, putUpdate(DynamoUtils.createAttributeValue(lease.pendingCheckpoint().subSequenceNumber())));\n        } else {\n            result.put(PENDING_CHECKPOINT_SEQUENCE_KEY, AttributeValueUpdate.builder().action(AttributeAction.DELETE).build());\n            result.put(PENDING_CHECKPOINT_SUBSEQUENCE_KEY, AttributeValueUpdate.builder().action(AttributeAction.DELETE).build());\n        }\n        return result;\n    }\n    @Override\n    public Collection<KeySchemaElement> getKeySchema() {<fim_middle>// class below has no smell\n"}