{"text": "<fim_prefix>        return this;\n    }\n    /**\n     * Adds this protocol interceptor to the tail of the protocol processing list.\n     */\n    public final HttpAsyncClientBuilder addResponseInterceptorLast(final HttpResponseInterceptor interceptor) {\n        Args.notNull(interceptor, \"Interceptor\");\n        if (responseInterceptors == null) {\n            responseInterceptors = new LinkedList<>();\n        }\n        responseInterceptors.add(new ResponseInterceptorEntry(ResponseInterceptorEntry.Postion.LAST, interceptor));\n        return this;\n    }\n    /**\n     * Adds this execution interceptor before an existing interceptor.\n     */\n    public final HttpAsyncClientBuilder addExecInterceptorBefore(final String existing, final String name, final AsyncExecChainHandler interceptor) {\n        Args.notBlank(existing, \"Existing\");\n        Args.notBlank(name, \"Name\");\n        Args.notNull(interceptor, \"Interceptor\");\n        if (execInterceptors == null) {\n            execInterceptors = new LinkedList<>();\n        }\n        execInterceptors.add(new ExecInterceptorEntry(ExecInterceptorEntry.Postion.BEFORE, name, interceptor, existing));\n        return this;\n    }\n    /**\n     * Adds this execution interceptor after interceptor with the given name.\n     */\n    public final HttpAsyncClientBuilder addExecInterceptorAfter(final String existing, final String name, final AsyncExecChainHandler interceptor) {\n        Args.notBlank(existing, \"Existing\");\n        Args.notBlank(name, \"Name\");\n        Args.notNull(interceptor, \"Interceptor\");\n        if (execInterceptors == null) {\n            execInterceptors = new LinkedList<>();\n        }\n        execInterceptors.add(new ExecInterceptorEntry(ExecInterceptorEntry.Postion.AFTER, name, interceptor, existing));\n        return this;\n    }\n    /**\n     * Replace an existing interceptor with the given name with new interceptor.\n     */\n    public final HttpAsyncClientBuilder replaceExecInterceptor(final String existing, final AsyncExecChainHandler interceptor) {\n        Args.notBlank(existing, \"Existing\");\n        Args.notNull(interceptor, \"Interceptor\");\n        if (execInterceptors == null) {\n            execInterceptors = new LinkedList<>();\n        }\n        execInterceptors.add(new ExecInterceptorEntry(ExecInterceptorEntry.Postion.REPLACE, existing, interceptor, existing));\n        return this;\n    }\n    /**\n     * Add an interceptor to the head of the processing list.\n     */\n    public final HttpAsyncClientBuilder addExecInterceptorFirst(final String name, final AsyncExecChainHandler interceptor) {\n        Args.notNull(name, \"Name\");\n        Args.notNull(interceptor, \"Interceptor\");\n        execInterceptors.add(new ExecInterceptorEntry(ExecInterceptorEntry.Postion.FIRST, name, interceptor, null));\n        return this;\n    }\n    /**\n     * Add an interceptor to the tail of the processing list.\n     */\n    public final HttpAsyncClientBuilder addExecInterceptorLast(final String name, final AsyncExecChainHandler interceptor) {\n        Args.notNull(name, \"Name\");\n        Args.notNull(interceptor, \"Interceptor\");\n        execInterceptors.add(new ExecInterceptorEntry(ExecInterceptorEntry.Postion.LAST, name, interceptor, null));\n        return this;\n    }\n    /**\n     * Adds this protocol interceptor to the head of the protocol processing list.\n     */\n    public final HttpAsyncClientBuilder addRequestInterceptorFirst(final HttpRequestInterceptor interceptor) {\n        Args.notNull(interceptor, \"Interceptor\");\n        if (requestInterceptors == null) {\n            requestInterceptors = new LinkedList<>();\n        }\n        requestInterceptors.add(new RequestInterceptorEntry(RequestInterceptorEntry.Postion.FIRST, interceptor));\n        return this;\n    }\n    /**\n     * Adds this protocol interceptor to the tail of the protocol processing list.\n     */\n    public final HttpAsyncClientBuilder addRequestInterceptorLast(final HttpRequestInterceptor interceptor) {\n        Args.notNull(interceptor, \"Interceptor\");\n        if (requestInterceptors == null) {\n            requestInterceptors = new LinkedList<>();\n        }\n        requestInterceptors.add(new RequestInterceptorEntry(RequestInterceptorEntry.Postion.LAST, interceptor));\n        return this;\n    }\n    /**\n     * Assigns {@link HttpRequestRetryHandler} instance.\n     * <p>\n     * Please note this value can be overridden by the {@link #disableAutomaticRetries()}\n     * method.\n     */\n    public final HttpAsyncClientBuilder setRetryHandler(final HttpRequestRetryHandler retryHandler) {\n        this.retryHandler = retryHandler;\n        return this;\n    }\n    /**\n     * Assigns {@link RedirectStrategy} instance.\n     * <p>\n     * Please note this value can be overridden by the {@link #disableRedirectHandling()}\n     * method.\n     * </p>\n     */\n    public HttpAsyncClientBuilder setRedirectStrategy(final RedirectStrategy redirectStrategy) {\n        this.redirectStrategy = redirectStrategy;\n        return this;\n    }\n    /**\n     * Assigns {@link SchemePortResolver} instance.\n     */\n    public final HttpAsyncClientBuilder setSchemePortResolver(final SchemePortResolver schemePortResolver) {\n        this.schemePortResolver = schemePortResolver;\n        return this;\n    }\n    /**\n     * Assigns {@link ThreadFactory} instance.\n     */\n    public final HttpAsyncClientBuilder setThreadFactory(final ThreadFactory threadFactory) {\n        this.threadFactory = threadFactory;\n        return this;\n    }\n    /**\n     * Assigns {@code User-Agent} value.\n     */\n    public final HttpAsyncClientBuilder setUserAgent(final String userAgent) {\n        this.userAgent = userAgent;\n        return this;\n    }\n    /**\n     * Assigns default request header values.\n     */\n    public final HttpAsyncClientBuilder setDefaultHeaders(final Collection<? extends Header> defaultHeaders) {\n        this.defaultHeaders = defaultHeaders;\n        return this;\n    }\n    /**\n     * Assigns default proxy value.\n     * <p>\n     * Please note this value can be overridden by the {@link #setRoutePlanner(\n     *   HttpRoutePlanner)} method.\n     */\n    public final HttpAsyncClientBuilder setProxy(final HttpHost proxy) {\n        this.proxy = proxy;\n        return this;\n    }\n    /**\n     * Assigns {@link HttpRoutePlanner} instance.\n     */\n    public final HttpAsyncClientBuilder setRoutePlanner(final HttpRoutePlanner routePlanner) {\n        this.routePlanner = routePlanner;\n        return this;\n    }\n    /**\n     * Assigns default {@link CredentialsProvider} instance which will be used\n     * for request execution if not explicitly set in the client execution\n     * context.\n     */\n    public final HttpAsyncClientBuilder setDefaultCredentialsProvider(final CredentialsProvider credentialsProvider) {\n        this.credentialsProvider = credentialsProvider;\n        return this;\n    }\n    /**\n     * Assigns default {@link org.apache.hc.client5.http.auth.AuthScheme} registry which will\n     * be used for request execution if not explicitly set in the client execution\n     * context.\n     */\n    public final HttpAsyncClientBuilder setDefaultAuthSchemeRegistry(final Lookup<AuthSchemeProvider> authSchemeRegistry) {\n        this.authSchemeRegistry = authSchemeRegistry;\n        return this;\n    }\n    /**\n     * Assigns default {@link org.apache.hc.client5.http.cookie.CookieSpec} registry\n     * which will be used for request execution if not explicitly set in the client\n     * execution context.\n     */\n    public final HttpAsyncClientBuilder setDefaultCookieSpecRegistry(final Lookup<CookieSpecProvider> cookieSpecRegistry) {\n        this.cookieSpecRegistry = cookieSpecRegistry;\n        return this;\n    }\n    /**\n     * Assigns default {@link CookieStore} instance which will be used for\n     * request execution if not explicitly set in the client execution context.\n     */\n    public final HttpAsyncClientBuilder setDefaultCookieStore(final CookieStore cookieStore) {\n        this.cookieStore = cookieStore;\n        return this;\n    }\n    /**\n     * Assigns default {@link RequestConfig} instance which will be used\n     * for request execution if not explicitly set in the client execution\n     * context.\n     */\n    public final HttpAsyncClientBuilder setDefaultRequestConfig(final RequestConfig config) {\n        this.defaultRequestConfig = config;\n        return this;\n    }\n    /**\n     * Use system properties when creating and configuring default\n     * implementations.\n     */\n    public final HttpAsyncClientBuilder useSystemProperties() {\n        this.systemProperties = true;\n        return this;\n    }\n    /**\n     * Disables connection state tracking.\n     */\n    public final HttpAsyncClientBuilder disableConnectionState() {\n        connectionStateDisabled = true;\n        return this;\n    }\n    /**\n     * Disables automatic redirect handling.\n     */\n    public final HttpAsyncClientBuilder disableRedirectHandling() {\n        redirectHandlingDisabled = true;\n        return this;\n    }\n    /**\n     * Disables automatic request recovery and re-execution.\n     */\n<fim_suffix>    public final HttpAsyncClientBuilder disableAutomaticRetries() {\n        automaticRetriesDisabled = true;\n        return this;\n    }<fim_middle>// function below has no smell\n"}