{"text": "<fim_prefix>/*\n * Copyright 2015-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.data.jpa.convert.threetenbp;\n\nimport java.util.Date;\n\nimport javax.persistence.AttributeConverter;\nimport javax.persistence.Converter;\n\nimport org.springframework.data.convert.ThreeTenBackPortConverters.DateToInstantConverter;\nimport org.springframework.data.convert.ThreeTenBackPortConverters.DateToLocalDateConverter;\nimport org.springframework.data.convert.ThreeTenBackPortConverters.DateToLocalDateTimeConverter;\nimport org.springframework.data.convert.ThreeTenBackPortConverters.DateToLocalTimeConverter;\nimport org.springframework.data.convert.ThreeTenBackPortConverters.InstantToDateConverter;\nimport org.springframework.data.convert.ThreeTenBackPortConverters.LocalDateTimeToDateConverter;\nimport org.springframework.data.convert.ThreeTenBackPortConverters.LocalDateToDateConverter;\nimport org.springframework.data.convert.ThreeTenBackPortConverters.LocalTimeToDateConverter;\nimport org.springframework.data.convert.ThreeTenBackPortConverters.StringToZoneIdConverter;\nimport org.springframework.data.convert.ThreeTenBackPortConverters.ZoneIdToStringConverter;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.threeten.bp.Instant;\nimport org.threeten.bp.LocalDate;\nimport org.threeten.bp.LocalDateTime;\nimport org.threeten.bp.LocalTime;\nimport org.threeten.bp.ZoneId;\n\n/**\n * JPA 2.1 converters to turn ThreeTen back port types into legacy {@link Date}s. To activate these converters make sure\n * your persistence provider detects them by including this class in the list of mapped classes. In Spring environments,\n * you can simply register the package of this class (i.e. {@code org.springframework.data.jpa.convert.threetenbp}) as\n * package to be scanned on e.g. the {@link LocalContainerEntityManagerFactoryBean}.\n *\n * @author Oliver Gierke\n * @see <a href=\"https://www.threeten.org/threetenbp\">https://www.threeten.org/threetenbp</a>\n * @since 1.8\n */\npublic class ThreeTenBackPortJpaConverters {\n\n\t@Converter(autoApply = true)\n\tpublic static class LocalDateConverter implements AttributeConverter<LocalDate, Date> {\n\n\t\t@Override\n\t\tpublic Date convertToDatabaseColumn(LocalDate date) {\n\t\t\treturn LocalDateToDateConverter.INSTANCE.convert(date);\n\t\t}\n\n\t\t@Override\n\t\tpublic LocalDate convertToEntityAttribute(Date date) {\n\t\t\treturn DateToLocalDateConverter.INSTANCE.convert(date);\n\t\t}\n\t}\n\n\t@Converter(autoApply = true)\n\tpublic static class LocalTimeConverter implements AttributeConverter<LocalTime, Date> {\n\n\t\t@Override\n\t\tpublic Date convertToDatabaseColumn(LocalTime time) {\n\t\t\treturn LocalTimeToDateConverter.INSTANCE.convert(time);\n\t\t}\n\n\t\t@Override\n\t\tpublic LocalTime convertToEntityAttribute(Date date) {\n\t\t\treturn DateToLocalTimeConverter.INSTANCE.convert(date);\n\t\t}\n\t}\n\n<fim_suffix>\t@Converter(autoApply = true)\n\tpublic static class LocalDateTimeConverter implements AttributeConverter<LocalDateTime, Date> {\n\n\t\t@Override\n\t\tpublic Date convertToDatabaseColumn(LocalDateTime date) {\n\t\t\treturn LocalDateTimeToDateConverter.INSTANCE.convert(date);\n\t\t}\n\n\t\t@Override\n\t\tpublic LocalDateTime convertToEntityAttribute(Date date) {\n\t\t\treturn DateToLocalDateTimeConverter.INSTANCE.convert(date);\n\t\t}\n\t}\n\n\t@Converter(autoApply = true)\n\tpublic static class InstantConverter implements AttributeConverter<Instant, Date> {\n\n\t\t@Override\n\t\tpublic Date convertToDatabaseColumn(Instant instant) {\n\t\t\treturn InstantToDateConverter.INSTANCE.convert(instant);\n\t\t}\n\n\t\t@Override\n\t\tpublic Instant convertToEntityAttribute(Date date) {\n\t\t\treturn DateToInstantConverter.INSTANCE.convert(date);\n\t\t}\n\t}\n\n\t@Converter(autoApply = true)\n\tpublic static class ZoneIdConverter implements AttributeConverter<ZoneId, String> {\n\n\t\t@Override\n\t\tpublic String convertToDatabaseColumn(ZoneId zoneId) {\n\t\t\treturn ZoneIdToStringConverter.INSTANCE.convert(zoneId);\n\t\t}\n\n\t\t@Override\n\t\tpublic ZoneId convertToEntityAttribute(String zoneId) {\n\t\t\treturn StringToZoneIdConverter.INSTANCE.convert(zoneId);\n\t\t}\n\t}\n}<fim_middle>// class below has no smell\n"}