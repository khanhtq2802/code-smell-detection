{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2010 Actuate Corporation. All rights reserved. This program and\n * the accompanying materials are made available under the terms of the Eclipse\n * Public License v1.0 which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n * \n * Contributors: Actuate Corporation - initial API and implementation\n ******************************************************************************/\npackage org.eclipse.birt.report.designer.internal.ui.swt.custom;\nimport org.eclipse.swt.*;\nimport org.eclipse.swt.widgets.*;\nimport org.eclipse.swt.graphics.*;\nimport org.eclipse.swt.events.*;\nimport org.eclipse.swt.accessibility.*;\n/**\n * A Label which supports aligned text and/or an image and different border\n * styles.\n * <p>\n * If there is not enough space a CLabel uses the following strategy to fit the\n * information into the available space:\n * \n * <pre>\n * \t\tignores the indent in left align mode\n * \t\tignores the image and the gap\n * \t\tshortens the text by replacing the center portion of the label with an ellipsis\n * \t\tshortens the text by removing the center portion of the label\n * </pre>\n * <p>\n * <dl>\n * <dt><b>Styles:</b>\n * <dd>LEFT, RIGHT, CENTER, SHADOW_IN, SHADOW_OUT, SHADOW_NONE</dd>\n * <dt><b>Events:</b>\n * <dd></dd>\n * </dl>\n * \n * </p>\n * <p>\n * IMPORTANT: This class is <em>not</em> intended to be subclassed.\n * </p>\n * \n * @see <a href=\"http://www.eclipse.org/swt/examples.php\">SWT Example:\n *      CustomControlExample</a>\n * @see <a href=\"http://www.eclipse.org/swt/\">Sample code and further\n *      information</a>\n * @noextend This class is not intended to be subclassed by clients.\n */\npublic class CLabel extends Canvas\n{\n\t/** Gap between icon and text */\n\tprivate static final int GAP = 5;\n\t/** Left and right margins */\n\tprivate static final int DEFAULT_MARGIN = 3;\n\t/** a string inserted in the middle of text that has been shortened */\n\tprivate static final String ELLIPSIS = \"...\"; //$NON-NLS-1$ // could use the ellipsis glyph on some platforms \"\\u2026\"\n\t/** the alignment. Either CENTER, RIGHT, LEFT. Default is LEFT */\n\tprivate int align = SWT.LEFT;\n\tprivate int leftMargin = DEFAULT_MARGIN;\n\tprivate int topMargin = DEFAULT_MARGIN;\n\tprivate int rightMargin = DEFAULT_MARGIN;\n\tprivate int bottomMargin = DEFAULT_MARGIN;\n\t/** the current text */\n\tprivate String text;\n\t/** the current icon */\n\tprivate Image image;\n\t// The tooltip is used for two purposes - the application can set\n\t// a tooltip or the tooltip can be used to display the full text when the\n\t// the text has been truncated due to the label being too short.\n\t// The appToolTip stores the tooltip set by the application.\n\t// Control.tooltiptext\n\t// contains whatever tooltip is currently being displayed.\n\tprivate String appToolTipText;\n\tprivate boolean ignoreDispose;\n\tprivate Image backgroundImage;\n\tprivate Color[] gradientColors;\n\tprivate int[] gradientPercents;\n\tprivate boolean gradientVertical;\n\tprivate Color background;\n\tprivate static int DRAW_FLAGS = SWT.DRAW_MNEMONIC\n\t\t\t| SWT.DRAW_TAB\n\t\t\t| SWT.DRAW_TRANSPARENT\n\t\t\t| SWT.DRAW_DELIMITER;\n\t/**\n\t * Constructs a new instance of this class given its parent and a style\n\t * value describing its behavior and appearance.\n\t * <p>\n\t * The style value is either one of the style constants defined in class\n\t * <code>SWT</code> which is applicable to instances of this class, or must\n\t * be built by <em>bitwise OR</em>'ing together (that is, using the\n\t * <code>int</code> \"|\" operator) two or more of those <code>SWT</code>\n\t * style constants. The class description lists the style constants that are\n\t * applicable to the class. Style bits are also inherited from superclasses.\n\t * </p>\n\t * \n\t * @param parent\n\t *            a widget which will be the parent of the new instance (cannot\n\t *            be null)\n\t * @param style\n\t *            the style of widget to construct\n\t * \n\t * @exception IllegalArgumentException\n\t *                <ul>\n\t *                <li>ERROR_NULL_ARGUMENT - if the parent is null</li>\n\t *                </ul>\n\t * @exception SWTException\n\t *                <ul>\n\t *                <li>ERROR_THREAD_INVALID_ACCESS - if not called from the\n\t *                thread that created the parent</li>\n\t *                </ul>\n\t * \n\t * @see SWT#LEFT\n\t * @see SWT#RIGHT\n\t * @see SWT#CENTER\n\t * @see SWT#SHADOW_IN\n\t * @see SWT#SHADOW_OUT\n\t * @see SWT#SHADOW_NONE\n\t * @see #getStyle()\n\t */\n\tpublic CLabel( Composite parent, int style )\n\t{\n\t\tsuper( parent, checkStyle( style ) );\n\t\tif ( ( style & ( SWT.CENTER | SWT.RIGHT ) ) == 0 )\n\t\t\tstyle |= SWT.LEFT;\n\t\tif ( ( style & SWT.CENTER ) != 0 )\n\t\t\talign = SWT.CENTER;\n\t\tif ( ( style & SWT.RIGHT ) != 0 )\n\t\t\talign = SWT.RIGHT;\n\t\tif ( ( style & SWT.LEFT ) != 0 )\n\t\t\talign = SWT.LEFT;\n\t\taddPaintListener( new PaintListener( ) {\n\t\t\tpublic void paintControl( PaintEvent event )\n\t\t\t{\n\t\t\t\tonPaint( event );\n\t\t\t}\n\t\t} );\n\t\taddTraverseListener( new TraverseListener( ) {\n\t\t\tpublic void keyTraversed( TraverseEvent event )\n\t\t\t{\n\t\t\t\tif ( event.detail == SWT.TRAVERSE_MNEMONIC )\n\t\t\t\t{\n\t\t\t\t\tonMnemonic( event );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\taddListener( SWT.Dispose, new Listener( ) {\n\t\t\tpublic void handleEvent( Event event )\n\t\t\t{\n\t\t\t\tonDispose( event );\n\t\t\t}\n\t\t} );\n\t\tinitAccessible( );\n\t}\n\t/**\n\t * Check the style bits to ensure that no invalid styles are applied.\n\t */\n\tprivate static int checkStyle( int style )\n\t{\n\t\tif ( ( style & SWT.BORDER ) != 0 )\n\t\t\tstyle |= SWT.SHADOW_IN;\n\t\tint mask = SWT.SHADOW_IN\n\t\t\t\t| SWT.SHADOW_OUT\n\t\t\t\t| SWT.SHADOW_NONE\n\t\t\t\t| SWT.LEFT_TO_RIGHT\n\t\t\t\t| SWT.RIGHT_TO_LEFT;\n\t\tstyle = style & mask;\n\t\treturn style |= SWT.NO_FOCUS | SWT.DOUBLE_BUFFERED;\n\t}\n\t// protected void checkSubclass () {\n\t// String name = getClass().getName ();\n\t// String validName = CLabel.class.getName();\n\t// if (!validName.equals(name)) {\n\t// SWT.error (SWT.ERROR_INVALID_SUBCLASS);\n\t// }\n\t// }\n<fim_suffix>\tpublic Point computeSize( int wHint, int hHint, boolean changed )\n\t{\n\t\tcheckWidget( );\n\t\tPoint e = getTotalSize( image, text );\n\t\tif ( wHint == SWT.DEFAULT )\n\t\t{\n\t\t\te.x += leftMargin + rightMargin;\n\t\t}\n\t\telse\n\t\t{\n\t\t\te.x = wHint;\n\t\t}\n\t\tif ( hHint == SWT.DEFAULT )\n\t\t{\n\t\t\te.y += topMargin + bottomMargin;\n\t\t}\n\t\telse\n\t\t{\n\t\t\te.y = hHint;\n\t\t}\n\t\treturn e;\n\t}\n\t/**\n\t * Draw a rectangle in the given colors.\n\t */\n\tprivate void drawBevelRect( GC gc, int x, int y, int w, int h,\n\t\t\tColor topleft, Color bottomright )\n\t{\n\t\tgc.setForeground( bottomright );\n\t\tgc.drawLine( x + w, y, x + w, y + h );\n\t\tgc.drawLine( x, y + h, x + w, y + h );<fim_middle>// function below has no smell\n"}