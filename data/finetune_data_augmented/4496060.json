{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!\n// Generated from protobuf\n\npackage org.apache.drill.common.types;\n\n\npublic final class SchemaTypeProtos\n{\n\n    public static final class MajorType\n    {\n        public static final org.apache.drill.common.types.SchemaTypeProtos.MajorType.MessageSchema WRITE =\n            new org.apache.drill.common.types.SchemaTypeProtos.MajorType.MessageSchema();\n        public static final org.apache.drill.common.types.SchemaTypeProtos.MajorType.BuilderSchema MERGE =\n            new org.apache.drill.common.types.SchemaTypeProtos.MajorType.BuilderSchema();\n        \n        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.common.types.TypeProtos.MajorType>\n        {\n            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.common.types.TypeProtos.MajorType message) throws java.io.IOException\n            {\n                if(message.hasMinorType())\n                    output.writeEnum(1, message.getMinorType().getNumber(), false);\n                if(message.hasMode())\n                    output.writeEnum(2, message.getMode().getNumber(), false);\n                if(message.hasWidth())\n                    output.writeInt32(3, message.getWidth(), false);\n                if(message.hasPrecision())\n                    output.writeInt32(4, message.getPrecision(), false);\n                if(message.hasScale())\n                    output.writeInt32(5, message.getScale(), false);\n                if(message.hasTimeZone())\n                    output.writeInt32(6, message.getTimeZone(), false);\n                for(org.apache.drill.common.types.TypeProtos.MinorType subType : message.getSubTypeList())\n                    output.writeEnum(7, subType.getNumber(), true);\n            }\n            public boolean isInitialized(org.apache.drill.common.types.TypeProtos.MajorType message)\n            {\n                return message.isInitialized();\n            }\n            public java.lang.String getFieldName(int number)\n            {\n                return org.apache.drill.common.types.SchemaTypeProtos.MajorType.getFieldName(number);\n            }\n            public int getFieldNumber(java.lang.String name)\n            {\n                return org.apache.drill.common.types.SchemaTypeProtos.MajorType.getFieldNumber(name);\n            }\n            public java.lang.Class<org.apache.drill.common.types.TypeProtos.MajorType> typeClass()\n            {\n                return org.apache.drill.common.types.TypeProtos.MajorType.class;\n            }\n            public java.lang.String messageName()\n            {\n                return org.apache.drill.common.types.TypeProtos.MajorType.class.getSimpleName();\n            }\n            public java.lang.String messageFullName()\n            {\n                return org.apache.drill.common.types.TypeProtos.MajorType.class.getName();\n            }\n            //unused\n            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.common.types.TypeProtos.MajorType message) throws java.io.IOException {}\n            public org.apache.drill.common.types.TypeProtos.MajorType newMessage() { return null; }\n        }\n        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.common.types.TypeProtos.MajorType.Builder>\n        {\n            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.common.types.TypeProtos.MajorType.Builder builder) throws java.io.IOException\n            {\n                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))\n                {\n                    switch(number)\n                    {\n                        case 0:\n                            return;\n                        case 1:\n                            builder.setMinorType(org.apache.drill.common.types.TypeProtos.MinorType.valueOf(input.readEnum()));\n                            break;\n                        case 2:\n                            builder.setMode(org.apache.drill.common.types.TypeProtos.DataMode.valueOf(input.readEnum()));\n                            break;\n                        case 3:\n                            builder.setWidth(input.readInt32());\n                            break;\n                        case 4:\n                            builder.setPrecision(input.readInt32());\n                            break;\n                        case 5:\n                            builder.setScale(input.readInt32());\n                            break;\n                        case 6:\n                            builder.setTimeZone(input.readInt32());\n                            break;\n                        case 7:\n                            builder.addSubType(org.apache.drill.common.types.TypeProtos.MinorType.valueOf(input.readEnum()));\n                            break;\n                        default:\n                            input.handleUnknownField(number, this);\n                    }\n                }\n            }\n            public boolean isInitialized(org.apache.drill.common.types.TypeProtos.MajorType.Builder builder)\n            {\n                return builder.isInitialized();\n            }\n            public org.apache.drill.common.types.TypeProtos.MajorType.Builder newMessage()\n            {\n                return org.apache.drill.common.types.TypeProtos.MajorType.newBuilder();\n            }\n            public java.lang.String getFieldName(int number)\n            {\n                return org.apache.drill.common.types.SchemaTypeProtos.MajorType.getFieldName(number);\n            }\n            public int getFieldNumber(java.lang.String name)\n            {\n                return org.apache.drill.common.types.SchemaTypeProtos.MajorType.getFieldNumber(name);\n            }\n            public java.lang.Class<org.apache.drill.common.types.TypeProtos.MajorType.Builder> typeClass()\n            {\n                return org.apache.drill.common.types.TypeProtos.MajorType.Builder.class;\n            }\n            public java.lang.String messageName()\n            {\n                return org.apache.drill.common.types.TypeProtos.MajorType.class.getSimpleName();\n            }\n            public java.lang.String messageFullName()\n            {\n                return org.apache.drill.common.types.TypeProtos.MajorType.class.getName();\n            }\n            //unused\n            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.common.types.TypeProtos.MajorType.Builder builder) throws java.io.IOException {}\n        }\n<fim_suffix>        public static java.lang.String getFieldName(int number)\n        {\n            switch(number)\n            {\n                case 1: return \"minorType\";\n                case 2: return \"mode\";\n                case 3: return \"width\";\n                case 4: return \"precision\";\n                case 5: return \"scale\";\n                case 6: return \"timeZone\";\n                case 7: return \"subType\";\n                default: return null;\n            }\n        }\n        public static int getFieldNumber(java.lang.String name)\n        {\n            java.lang.Integer number = fieldMap.get(name);\n            return number == null ? 0 : number.intValue();\n        }\n        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();\n        static\n        {\n            fieldMap.put(\"minorType\", 1);\n            fieldMap.put(\"mode\", 2);\n            fieldMap.put(\"width\", 3);\n            fieldMap.put(\"precision\", 4);\n            fieldMap.put(\"scale\", 5);\n            fieldMap.put(\"timeZone\", 6);\n            fieldMap.put(\"subType\", 7);\n        }\n    }\n\n}<fim_middle>// function below has no smell\n"}