{"text": "<fim_prefix>\t\t\t\t\t: lineStyels;\n\t\t\tfinal String lineVisibleLabel=this.lineVisibleLabel;\n\t\t\tliacLines = new LineAttributesComposite( cmpLines,\n\t\t\t\t\tSWT.NONE,\n\t\t\t\t\tlineStyels,\n\t\t\t\t\tcontext,\n\t\t\t\t\tgrid.getLineAttributes( ),\n\t\t\t\t\tdefGrid.getLineAttributes( ) ){\n\t\t\t\tprotected void placeComponents( )\n\t\t\t\t{\n\t\t\t\t\tsuper.placeComponents( );\n\t\t\t\t\tif ( btnVisible != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tbtnVisible.setText(lineVisibleLabel);\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\n\t\t\t};\n\t\t\tliacLines.addListener( this );\n\t\t\tliacLines.setAttributesEnabled( ChartUIUtil.is3DWallFloorSet( context.getModel( ) ) );\n\t\t}\n\t\t// Ticks group (unsupported in 3D)\n\t\tif ( bTicksVisible )\n\t\t{\n\t\t\tGroup grpTicks = new Group( cmpContent, SWT.NONE );\n\t\t\t{\n\t\t\t\tGridData gdGRPTicks = new GridData( GridData.FILL_BOTH );\n\t\t\t\tgdGRPTicks.horizontalSpan = 2;\n\t\t\t\tgrpTicks.setLayoutData( gdGRPTicks );\n\t\t\t\tgrpTicks.setLayout( glTicks );\n\t\t\t\tgrpTicks.setText( Messages.getString( \"GridAttributesComposite.Lbl.Ticks\" ) ); //$NON-NLS-1$\n\t\t\t}\n\t\t\t// Line Attributes for Ticks\n\t\t\tint lineStyles = 0;\n\t\t\tif (bEnableVisibility)\n\t\t\t{\n\t\t\t\tlineStyles |= LineAttributesComposite.ENABLE_VISIBILITY;\n\t\t\t}\n\t\t\tif (bEnableColor)\n\t\t\t{\n\t\t\t\tlineStyles |= LineAttributesComposite.ENABLE_COLOR;\n\t\t\t\tlineStyles |= context.getUIFactory( ).supportAutoUI( ) ? LineAttributesComposite.ENABLE_AUTO_COLOR\n\t\t\t\t\t\t: lineStyles;\n\t\t\t}\n\t\t\tfinal String tickVisibleLabel=this.tickVisibleLabel;\n\t\t\tliacTicks = new LineAttributesComposite( grpTicks,\n\t\t\t\t\tSWT.NONE,\n\t\t\t\t\tlineStyles,\n\t\t\t\t\tcontext,\n\t\t\t\t\tgrid.getTickAttributes( ),\n\t\t\t\t\tdefGrid.getTickAttributes( ) ){\n\t\t\t\tprotected void placeComponents( )\n\t\t\t\t{\n\t\t\t\t\tsuper.placeComponents( );\n\t\t\t\t\tif ( btnVisible != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tbtnVisible.setText(tickVisibleLabel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t{\n\t\t\t\tGridData gdLIACTicks = new GridData( GridData.FILL_HORIZONTAL );\n\t\t\t\tgdLIACTicks.horizontalSpan = 2;\n\t\t\t\tliacTicks.setLayoutData( gdLIACTicks );\n\t\t\t\tliacTicks.addListener( this );\n\t\t\t}\n\t\t\tif(bEnableStyles)\n\t\t\t{\n\t\t\t\t// Tick Styles\n\t\t\t\tboolean tickUIEnabled = !context.getUIFactory( )\n\t\t\t\t\t\t.isSetInvisible( grid.getTickAttributes( ) );\n\t\t\t\tlblStyle = new Label( grpTicks, SWT.NONE );\n\t\t\t\t{\n\t\t\t\t\tGridData gdLBLStyle = new GridData( );\n\t\t\t\t\tgdLBLStyle.horizontalIndent = 4;\n\t\t\t\t\tlblStyle.setLayoutData( gdLBLStyle );\n\t\t\t\t\tlblStyle.setText( Messages.getString( \"GridAttributesComposite.Lbl.Style\" ) ); //$NON-NLS-1$\n\t\t\t\t\tlblStyle.setEnabled( tickUIEnabled );\n\t\t\t\t}\n\t\t\t\tcmbTickStyle = context.getUIFactory( ).createChartCombo( grpTicks,\n\t\t\t\t\t\tSWT.DROP_DOWN | SWT.READ_ONLY,\n\t\t\t\t\t\tgrid,\n\t\t\t\t\t\t\"tickStyle\", //$NON-NLS-1$\n\t\t\t\t\t\tdefGrid.getTickStyle( ).getName( ) );\n\t\t\t\t{\n\t\t\t\t\tGridData gdCMBTickStyle = new GridData( GridData.FILL_HORIZONTAL );\n\t\t\t\t\tcmbTickStyle.setLayoutData( gdCMBTickStyle );\n\t\t\t\t\tcmbTickStyle.addSelectionListener( this );\n\t\t\t\t\tcmbTickStyle.setEnabled( tickUIEnabled );\n\t\t\t\t}\n\t\t\t}\n\t\t\tpopulateLists( );\n\t\t\tsetDefaultSelections( );\n\t\t}\n\t}\n\tprivate void populateLists( )\n\t{\n\t\tif (bEnableStyles)\n\t\t{\n\t\t\tif ( orientation == Orientation.HORIZONTAL )\n\t\t\t{\n\t\t\t\tcmbTickStyle.setItems( LiteralHelper.horizontalTickStyleSet.getDisplayNames( ) );\n\t\t\t\tcmbTickStyle.setItemData( LiteralHelper.horizontalTickStyleSet.getNames( ) );\n\t\t\t}\n\t\t\telse if ( orientation == Orientation.VERTICAL )\n\t\t\t{\n\t\t\t\tcmbTickStyle.setItems( LiteralHelper.verticalTickStyleSet.getDisplayNames( ) );\n\t\t\t\tcmbTickStyle.setItemData( LiteralHelper.verticalTickStyleSet.getNames( ) );\n\t\t\t}\n\t\t}\n\t}\n\tprivate void setDefaultSelections( )\n\t{\n\t\tif (bEnableStyles)\n\t\t{\n\t\t\tcmbTickStyle.setSelection( grid.getTickStyle( ).getName( ) );\n\t\t}\n\t}\n\tpublic void addListener( Listener listener )\n\t{\n\t\tvListeners.add( listener );\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)\n\t */\n\tpublic void widgetSelected( SelectionEvent e )\n\t{\n\t\tif ( e.getSource( ).equals( cmbTickStyle ) )\n\t\t{\n\t\t\tString selectedTickStyle = cmbTickStyle.getSelectedItemData( );\n\t\t\tEvent eGrid = new Event( );\n\t\t\teGrid.widget = this;\n\t\t\teGrid.type = TICK_STYLE_CHANGED_EVENT;\n\t\t\teGrid.detail = ( selectedTickStyle == null ) ? ChartUIExtensionUtil.PROPERTY_UNSET\n\t\t\t\t\t: ChartUIExtensionUtil.PROPERTY_UPDATE;\n\t\t\tTickStyle tsGrid = TickStyle.getByName( selectedTickStyle );\n\t\t\teGrid.data = tsGrid;\n\t\t\tfireEvent( eGrid );\n\t\t}\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.swt.events.SelectionListener#widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent)\n\t */\n\tpublic void widgetDefaultSelected( SelectionEvent e )\n\t{\n\t}\n\tpublic Point getPreferredSize( )\n\t{\n\t\treturn new Point( 230, 240 );\n\t}\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)\n\t */\n\tpublic void handleEvent( Event event )\n\t{\n\t\tEvent eGrid = new Event( );\n\t\teGrid.widget = this;\n\t\teGrid.detail = event.detail;\n\t\tif ( event.widget.equals( liacLines ) )\n\t\t{\n\t\t\tif ( event.type == LineAttributesComposite.STYLE_CHANGED_EVENT )\n\t\t\t{\n\t\t\t\teGrid.type = LINE_STYLE_CHANGED_EVENT;\n\t\t\t\teGrid.data = event.data;\n\t\t\t}\n\t\t\telse if ( event.type == LineAttributesComposite.WIDTH_CHANGED_EVENT )\n\t\t\t{\n\t\t\t\teGrid.type = LINE_WIDTH_CHANGED_EVENT;\n\t\t\t\teGrid.data = event.data;\n\t\t\t}\n\t\t\telse if ( event.type == LineAttributesComposite.COLOR_CHANGED_EVENT )\n\t\t\t{\n\t\t\t\teGrid.type = LINE_COLOR_CHANGED_EVENT;\n\t\t\t\teGrid.data = event.data;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\teGrid.type = LINE_VISIBILITY_CHANGED_EVENT;\n\t\t\t\teGrid.data = event.data;\n\t\t\t}\n\t\t}\n\t\telse if ( event.widget.equals( liacTicks ) )\n\t\t{\n\t\t\tif ( event.type == LineAttributesComposite.COLOR_CHANGED_EVENT )\n\t\t\t{\n\t\t\t\teGrid.type = TICK_COLOR_CHANGED_EVENT;\n\t\t\t\teGrid.data = event.data;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\teGrid.type = TICK_VISIBILITY_CHANGED_EVENT;\n\t\t\t\teGrid.data = event.data;\n\t\t\t\tboolean enabledUI = !( ( eGrid.detail != ChartUIExtensionUtil.PROPERTY_UNSET )\n\t\t\t\t\t\t&& !( (Boolean) event.data ).booleanValue( ) );\n\t\t\t\tlblStyle.setEnabled( enabledUI );\n\t\t\t\tcmbTickStyle.setEnabled( enabledUI );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Unknown event\n\t\t\treturn;\n\t\t}\n\t\tfireEvent( eGrid );\n\t}\n<fim_suffix>\tprivate void fireEvent( Event event )\n\t{\n\t\tfor ( int i = 0; i < vListeners.size( ); i++ )\n\t\t{\n\t\t\tvListeners.get( i ).handleEvent( event );\n\t\t}\n\t}<fim_middle>// function below has no smell\n"}