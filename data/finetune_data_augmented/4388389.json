{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *  \n *    http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License. \n *  \n */\npackage org.apache.directory.studio.openldap.config.model;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.directory.api.ldap.model.name.Dn;\n\n\n/**\n * Java bean for the 'olcConfig' object class.\n * \n * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n */\npublic class OlcConfig\n{\n    /** The parent DN of the associated entry */\n    protected Dn parentDn;\n\n    /** The list of auxiliary object classes */\n    protected List<AuxiliaryObjectClass> auxiliaryObjectClasses = new ArrayList<>();\n\n\n    /**\n     * @param auxiliaryObjectClasses\n     */\n<fim_suffix>    public void addAuxiliaryObjectClasses( AuxiliaryObjectClass... auxiliaryObjectClasses )\n    {\n        for ( AuxiliaryObjectClass auxiliaryObjectClass : auxiliaryObjectClasses )\n        {\n            this.auxiliaryObjectClasses.add( auxiliaryObjectClass );\n        }\n    }\n\n\n    /**\n     * Gets the list of objects associated with the auxiliary classes.\n     *\n     * @return the list of objects associated with auxiliary classes.\n     */\n    public List<AuxiliaryObjectClass> getAuxiliaryObjectClasses()\n    {\n        List<AuxiliaryObjectClass> copy = new ArrayList<>( auxiliaryObjectClasses.size() );\n        copy.addAll( auxiliaryObjectClasses );\n\n        return copy;\n    }\n\n\n    /**\n     * Gets the number of auxiliary object classes.\n     *\n     * @return the number of auxiliary object classes\n     */\n    public int getAuxiliaryObjectClassesSize()\n    {\n        return auxiliaryObjectClasses.size();\n    }\n\n\n    /**\n     * Gets the parent DN of the associated entry.\n     *\n     * @return the dn the parent DN of the asssociated entry\n     */\n    public Dn getParentDn()\n    {\n        return parentDn;\n    }\n\n\n    /**\n     * Sets the parent DN of the associated entry.\n     *\n     * @param dn the parent dn to set\n     */\n    public void setParentDn( Dn parentDn )\n    {\n        this.parentDn = parentDn;\n    }\n\n\n    /**\n     * Copy a List of Strings into a new List of strings.\n     * \n     * @param original The list to copy\n     * @return The copied list\n     */\n    protected List<String> copyListString( List<String> original )\n    {\n        if ( original != null )\n        { \n            List<String> copy = new ArrayList<>( original.size() );\n            copy.addAll( original );\n    \n            return copy;\n        }\n        else\n        {\n            return new ArrayList<>();\n        }\n    }\n}<fim_middle>// function below has no smell\n"}