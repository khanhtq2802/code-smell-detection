{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.cxf.databinding.source;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.logging.Logger;\nimport javax.activation.DataSource;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamReader;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.validation.Schema;\nimport javax.xml.validation.Validator;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.DocumentFragment;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.ErrorHandler;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\nimport org.apache.cxf.common.i18n.Message;\nimport org.apache.cxf.common.logging.LogUtils;\nimport org.apache.cxf.databinding.DataWriter;\nimport org.apache.cxf.interceptor.Fault;\nimport org.apache.cxf.message.Attachment;\nimport org.apache.cxf.service.model.MessagePartInfo;\nimport org.apache.cxf.staxutils.StaxUtils;\nimport org.apache.cxf.staxutils.W3CDOMStreamWriter;\npublic class XMLStreamDataWriter implements DataWriter<XMLStreamWriter> {\n    private static final Logger LOG = LogUtils.getL7dLogger(XMLStreamDataWriter.class);\n    private Schema schema;\n    public XMLStreamDataWriter() {\n    }\n    public void write(Object obj, MessagePartInfo part, XMLStreamWriter output) {\n        write(obj, output);\n    }\n    public void write(Object obj, XMLStreamWriter writer) {\n        try {\n            XMLStreamReader reader = null;\n            if (obj instanceof DataSource) {\n                DataSource ds = (DataSource)obj;\n                if (schema != null) {\n                    DOMSource domSource = new DOMSource(StaxUtils.read(ds.getInputStream()));\n                    Validator schemaValidator = schema.newValidator();\n                    schemaValidator.setErrorHandler(\n                        new MtomValidationErrorHandler(schemaValidator.getErrorHandler(), domSource.getNode()));\n                    schemaValidator.validate(domSource);\n                    StaxUtils.copy(domSource, writer);\n                } else {\n                    reader = StaxUtils.createXMLStreamReader(ds.getInputStream());\n                    StaxUtils.copy(reader, writer);\n                    reader.close();\n                }\n            } else if (obj instanceof Node) {\n                if (obj instanceof DocumentFragment) {\n                    obj = org.apache.cxf.helpers.DOMUtils.getDomDocumentFragment((DocumentFragment)obj);\n                }\n                if (schema != null) {\n                    Validator schemaValidator = schema.newValidator();\n                    schemaValidator.setErrorHandler(\n                        new MtomValidationErrorHandler(schemaValidator.getErrorHandler(), (Node)obj));\n                    schemaValidator.validate(new DOMSource((Node)obj));\n                }\n                Node nd = (Node)obj;\n                writeNode(nd, writer);\n            } else {\n                Source s = (Source) obj;\n                if (schema != null) {\n                    if (!(s instanceof DOMSource)) {\n                        //make the source re-readable.\n                        s = new DOMSource(StaxUtils.read(s));\n                    }\n                    Validator schemaValidator = schema.newValidator();\n                    schemaValidator.setErrorHandler(\n                        new MtomValidationErrorHandler(schemaValidator.getErrorHandler(), ((DOMSource)s).getNode()));\n                    schemaValidator.validate(s);\n                }\n                if (s instanceof DOMSource\n                    && ((DOMSource) s).getNode() == null) {\n                    return;\n                }\n                StaxUtils.copy(s, writer);\n            }\n        } catch (XMLStreamException e) {\n            throw new Fault(\"COULD_NOT_WRITE_XML_STREAM_CAUSED_BY\", LOG, e,\n                            e.getClass().getCanonicalName(), e.getMessage());\n        } catch (IOException e) {\n            throw new Fault(new Message(\"COULD_NOT_WRITE_XML_STREAM\", LOG), e);\n        } catch (SAXException e) {\n            throw new Fault(\"COULD_NOT_WRITE_XML_STREAM_CAUSED_BY\", LOG, e,\n                            e.getClass().getCanonicalName(), e.getMessage());\n        }\n    }\n    private void writeNode(Node nd, XMLStreamWriter writer) throws XMLStreamException {\n        if (writer instanceof W3CDOMStreamWriter) {\n            W3CDOMStreamWriter dw = (W3CDOMStreamWriter)writer;\n            if (dw.getCurrentNode() != null) {\n                if (nd instanceof DocumentFragment\n                    && nd.getOwnerDocument() == dw.getCurrentNode().getOwnerDocument()) {\n                    Node ch = nd.getFirstChild();\n                    while (ch != null) {\n                        nd.removeChild(ch);\n                        dw.getCurrentNode().appendChild(org.apache.cxf.helpers.DOMUtils.getDomElement(ch));\n                        ch = nd.getFirstChild();\n                    }\n                } else if (nd.getOwnerDocument() == dw.getCurrentNode().getOwnerDocument()) {\n                    dw.getCurrentNode().appendChild(nd);\n                    return;\n                } else if (nd instanceof DocumentFragment) {\n                    nd = dw.getDocument().importNode(nd, true);\n                    dw.getCurrentNode().appendChild(nd);\n                    return;\n                }\n            } else if (dw.getCurrentFragment() != null) {\n                if (nd.getOwnerDocument() == dw.getCurrentFragment().getOwnerDocument()) {\n                    dw.getCurrentFragment().appendChild(nd);\n                    return;\n                } else if (nd instanceof DocumentFragment) {\n                    nd = dw.getDocument().importNode(nd, true);\n                    dw.getCurrentFragment().appendChild(nd);\n                    return;\n                }\n            }\n        }\n        if (nd instanceof Document) {\n            StaxUtils.writeDocument((Document)nd,\n                                    writer, false, true);\n        } else {\n            StaxUtils.writeNode(nd, writer, true);\n        }\n    }\n    public void setSchema(Schema s) {\n        this.schema = s;\n    }\n    public void setAttachments(Collection<Attachment> attachments) {\n    }\n    public void setProperty(String key, Object value) {\n    }\n    private static class MtomValidationErrorHandler implements ErrorHandler {\n        private ErrorHandler origErrorHandler;\n        private Node node;\n<fim_suffix>        MtomValidationErrorHandler(ErrorHandler origErrorHandler, Node node) {\n            this.origErrorHandler = origErrorHandler;\n            this.node = node;\n        }\n        @Override\n        public void warning(SAXParseException exception) throws SAXException {\n            if (this.origErrorHandler != null) {\n                this.origErrorHandler.warning(exception);\n            } else {\n                // do nothing\n            }\n        }\n        @Override\n        public void error(SAXParseException exception) throws SAXException {\n            if (this.isCVC312Exception(exception)) {\n                String elementName = this.getAttachmentElementName(exception);\n                if (node != null && this.findIncludeNode(node, elementName)) {\n                    return;\n                }\n            }\n            if (this.origErrorHandler != null) {\n                this.origErrorHandler.error(exception);\n            } else {\n                throw exception;\n            }\n        }\n        @Override\n        public void fatalError(SAXParseException exception) throws SAXException {\n            if (this.origErrorHandler != null) {\n                this.origErrorHandler.fatalError(exception);\n            } else {\n                throw exception;\n            }\n        }\n        private boolean isCVC312Exception(SAXParseException exception) {\n            String msg = exception.getMessage();\n            return (msg.startsWith(\"cvc-type.3.1.2\") || msg.startsWith(\"cvc-complex-type.2.2\"))\n                && msg.endsWith(\"is a simple type, so it must have no element information item [children].\");\n        }\n        private String getAttachmentElementName(SAXParseException exception) {\n            String msg = exception.getMessage();\n            String[] str = msg.split(\"'\");\n            return str[1];\n        }\n        private boolean findIncludeNode(Node checkNode, String mtomElement) {\n            boolean ret = false;\n            NodeList nList = checkNode.getChildNodes();\n            for (int i = 0; i < nList.getLength(); i++) {\n                Node nNode = nList.item(i);\n                if (nNode.getLocalName() != null \n                    && nNode.getLocalName().equals(mtomElement)) {<fim_middle>// function below has no smell\n"}