{"text": "<fim_prefix>/*\n * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.\n *\n * This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n * You may not use this product except in compliance with the License.\n *\n * This product may include a number of subcomponents with separate copyright notices\n * and license terms. Your use of these subcomponents is subject to the terms and\n * conditions of the subcomponent's license, as noted in the LICENSE file.\n */\n\npackage com.vmware.admiral.request.notification;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\nimport com.vmware.admiral.common.ManagementUriParts;\nimport com.vmware.admiral.common.util.OperationUtil;\nimport com.vmware.admiral.common.util.QueryUtil;\nimport com.vmware.admiral.common.util.ServiceDocumentQuery;\nimport com.vmware.admiral.log.EventLogService.EventLogState;\nimport com.vmware.admiral.request.RequestStatusService.RequestStatus;\nimport com.vmware.admiral.service.common.AbstractTaskStatefulService.TaskStatusState;\nimport com.vmware.admiral.service.common.MultiTenantDocument;\nimport com.vmware.xenon.common.Operation;\nimport com.vmware.xenon.common.ServiceDocument;\nimport com.vmware.xenon.common.StatelessService;\nimport com.vmware.xenon.common.TaskState;\nimport com.vmware.xenon.common.UriUtils;\nimport com.vmware.xenon.common.Utils;\nimport com.vmware.xenon.services.common.QueryTask;\nimport com.vmware.xenon.services.common.QueryTask.NumericRange;\nimport com.vmware.xenon.services.common.QueryTask.Query.Occurance;\nimport com.vmware.xenon.services.common.QueryTask.QueryTerm.MatchType;\n\n/**\n * Helper service for aggregating notifications displayed in UI for both event logs and\n * request tasks.\n */\npublic class NotificationsService extends StatelessService {\n    public static final String SELF_LINK = ManagementUriParts.NOTIFICATIONS;\n\n    public static final long EVENTS_TIME_INTERVAL_MICROS = TimeUnit.MICROSECONDS\n            .convert(Long.getLong(\n                    \"com.vmware.admiral.log.notificationsaggregator.eventstimeinterval.minutes\",\n                    20),\n                    TimeUnit.MINUTES);\n\n<fim_suffix>    public static class NotificationsAggregatorState {\n        public long recentEventLogsCount;\n        public long activeRequestsCount;\n    }\n\n    @Override\n    public void handleGet(Operation get) {\n        Map<String, String> queryParams = UriUtils.parseUriQueryParams(get.getUri());\n        String tenantLink = queryParams.get(MultiTenantDocument.FIELD_NAME_TENANT_LINKS);\n\n        List<String> tenantLinks = tenantLink == null ?\n                new ArrayList<>(1) :\n                new ArrayList<>(Arrays.asList(tenantLink.split(\"\\\\s*,\\\\s*\")));\n\n        NotificationsAggregatorState state = new NotificationsAggregatorState();\n\n        String projectLink = OperationUtil.extractProjectFromHeader(get);\n        if (projectLink != null && projectLink.length() > 0) {\n            // add project link to filter result\n            tenantLinks.add(projectLink);\n        }\n\n        QueryTask requestStatusQuery = buildRequestStatusQuery(tenantLinks);\n        new ServiceDocumentQuery<RequestStatus>(getHost(), RequestStatus.class)\n                .query(requestStatusQuery, (r) -> {\n                    if (r.hasException()) {\n                        get.fail(r.getException());\n                        return;\n                    } else {\n                        state.activeRequestsCount = r.getCount();\n\n                        QueryTask eventLogQuery = buildEventLogCountQuery(tenantLinks);\n                        new ServiceDocumentQuery<EventLogState>(getHost(), EventLogState.class)\n                                .query(eventLogQuery, (counter) -> {\n                                    if (counter.hasException()) {\n                                        get.fail(counter.getException());\n                                        return;\n                                    }\n\n                                    state.recentEventLogsCount = counter.getCount();\n\n                                    get.setBody(state);\n                                    get.complete();\n                                });\n                    }\n                });\n    }\n\n    private QueryTask buildEventLogCountQuery(List<String> tenantLinks) {\n        QueryTask qt = QueryUtil.buildQuery(EventLogState.class, true);\n\n        if (!tenantLinks.isEmpty()) {\n            qt.querySpec.query.addBooleanClause(QueryUtil.addTenantGroupAndUserClause(tenantLinks));\n        }\n\n        long nMinutesAgo = Utils.fromNowMicrosUtc(-EVENTS_TIME_INTERVAL_MICROS);\n        QueryTask.Query numOfInstancesClause = new QueryTask.Query()\n                .setTermPropertyName(ServiceDocument.FIELD_NAME_UPDATE_TIME_MICROS)\n                .setNumericRange(NumericRange.createLongRange(nMinutesAgo,\n                        Long.MAX_VALUE, true, false))\n                .setTermMatchType(MatchType.TERM);\n        qt.querySpec.query.addBooleanClause(numOfInstancesClause);\n\n        QueryTask.Query eventTypeClause = new QueryTask.Query()\n                .setTermPropertyName(EventLogState.FIELD_NAME_EVENT_LOG_TYPE)\n                .setTermMatchValue(EventLogState.EventLogType.INFO.toString())\n                .setTermMatchType(MatchType.TERM);\n        eventTypeClause.occurance = Occurance.MUST_NOT_OCCUR;\n        qt.querySpec.query.addBooleanClause(eventTypeClause);\n\n        QueryUtil.addCountOption(qt);\n\n        return qt;\n    }\n\n    private QueryTask buildRequestStatusQuery(List<String> tenantLinks) {\n        QueryTask requestStatusQuery = QueryUtil.buildQuery(RequestStatus.class, true);\n        QueryTask.Query runningTasksClause = new QueryTask.Query();\n\n        if (!tenantLinks.isEmpty()) {\n            requestStatusQuery.querySpec.query.addBooleanClause(QueryUtil\n                    .addTenantGroupAndUserClause(tenantLinks));\n        }\n\n        QueryTask.Query taskCreatedClause = new QueryTask.Query()\n                .setTermPropertyName(TaskStatusState.FIELD_NAME_TASK_INFO + \".stage\")\n                .setTermMatchValue(TaskState.TaskStage.CREATED.toString());\n        taskCreatedClause.occurance = Occurance.SHOULD_OCCUR;\n        runningTasksClause.addBooleanClause(taskCreatedClause);\n\n        QueryTask.Query taskStartedClause = new QueryTask.Query()\n                .setTermPropertyName(TaskStatusState.FIELD_NAME_TASK_INFO + \".stage\")\n                .setTermMatchValue(TaskState.TaskStage.STARTED.toString());\n        taskStartedClause.occurance = Occurance.SHOULD_OCCUR;\n        runningTasksClause.addBooleanClause(taskStartedClause);\n\n        requestStatusQuery.querySpec.query.addBooleanClause(runningTasksClause);\n        QueryUtil.addCountOption(requestStatusQuery);\n\n        return requestStatusQuery;\n    }\n\n}<fim_middle>// class below is data class\n"}