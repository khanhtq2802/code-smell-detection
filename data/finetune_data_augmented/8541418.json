{"text": "<fim_prefix>// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage org.apache.cloudstack.api.command.admin.ha;\n\nimport com.cloud.event.EventTypes;\nimport com.cloud.exception.ConcurrentOperationException;\nimport com.cloud.exception.InsufficientCapacityException;\nimport com.cloud.exception.NetworkRuleConflictException;\nimport com.cloud.exception.ResourceAllocationException;\nimport com.cloud.exception.ResourceUnavailableException;\nimport com.cloud.host.Host;\nimport org.apache.cloudstack.acl.RoleType;\nimport org.apache.cloudstack.api.APICommand;\nimport org.apache.cloudstack.api.ApiArgValidator;\nimport org.apache.cloudstack.api.ApiConstants;\nimport org.apache.cloudstack.api.ApiErrorCode;\nimport org.apache.cloudstack.api.BaseAsyncCmd;\nimport org.apache.cloudstack.api.BaseCmd;\nimport org.apache.cloudstack.api.Parameter;\nimport org.apache.cloudstack.api.ServerApiException;\nimport org.apache.cloudstack.api.response.HostHAResponse;\nimport org.apache.cloudstack.api.response.HostResponse;\nimport org.apache.cloudstack.context.CallContext;\nimport org.apache.cloudstack.ha.HAConfigManager;\nimport org.apache.cloudstack.ha.HAResource;\n\nimport javax.inject.Inject;\n\n<fim_suffix>@APICommand(name = EnableHAForHostCmd.APINAME, description = \"Enables HA for a host\",\n        responseObject = HostHAResponse.class,\n        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n        since = \"4.11\", authorized = {RoleType.Admin})\npublic final class EnableHAForHostCmd extends BaseAsyncCmd {\n    public static final String APINAME = \"enableHAForHost\";\n\n    @Inject\n    private HAConfigManager haConfigManager;\n\n    /////////////////////////////////////////////////////\n    //////////////// API parameters /////////////////////\n    /////////////////////////////////////////////////////\n\n    @Parameter(name = ApiConstants.HOST_ID, type = CommandType.UUID, entityType = HostResponse.class,\n            description = \"ID of the host\", required = true, validations = {ApiArgValidator.PositiveNumber})\n    private Long hostId;\n\n    /////////////////////////////////////////////////////\n    /////////////////// Accessors ///////////////////////\n    /////////////////////////////////////////////////////\n\n    public Long getHostId() {\n        return hostId;\n    }\n\n    /////////////////////////////////////////////////////\n    /////////////// API Implementation///////////////////\n    /////////////////////////////////////////////////////\n\n    @Override\n    public String getCommandName() {\n        return APINAME.toLowerCase() + BaseCmd.RESPONSE_SUFFIX;\n    }\n\n    @Override\n    public long getEntityOwnerId() {\n        return CallContext.current().getCallingAccountId();\n    }\n\n    private void setupResponse(final boolean result, final String resourceUuid) {\n        final HostHAResponse response = new HostHAResponse();\n        response.setId(resourceUuid);\n        response.setEnabled(true);\n        response.setStatus(result);\n        response.setResponseName(getCommandName());\n        setResponseObject(response);\n    }\n\n    @Override\n    public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException {\n        final Host host = _resourceService.getHost(getHostId());\n        if (host == null) {\n            throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Unable to find host by ID: \" + getHostId());\n        }\n        final boolean result = haConfigManager.enableHA(host.getId(), HAResource.ResourceType.Host);\n\n        CallContext.current().setEventDetails(\"Host Id:\" + host.getId() + \" HA enabled: true\");\n        CallContext.current().putContextParameter(Host.class, host.getUuid());\n\n        setupResponse(result, host.getUuid());\n    }\n\n    @Override\n    public String getEventType() {\n        return EventTypes.EVENT_HA_RESOURCE_ENABLE;\n    }\n\n    @Override\n    public String getEventDescription() {\n        return \"enable HA for host: \" + getHostId();\n    }\n}<fim_middle>// class below has no smell\n"}