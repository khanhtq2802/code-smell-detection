{"text": "<fim_prefix>// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See License.txt in the repository root.\n\npackage com.microsoft.tfs.jni.internal.ntlm;\n\nimport java.text.MessageFormat;\n\nimport com.microsoft.tfs.jni.FileSystem;\nimport com.microsoft.tfs.jni.Messages;\nimport com.microsoft.tfs.jni.NTLM;\nimport com.microsoft.tfs.jni.internal.auth.NativeAuth;\nimport com.microsoft.tfs.util.Check;\n\n/**\n * An implementation of the {@link FileSystem} interface that uses native\n * methods.\n *\n * @threadsafety thread-safe\n */\npublic class NativeNTLM implements NTLM {\n    /**\n     * @return <code>true</code> if native NTLM is available on this sytem,\n     *         <code>false</code> if not\n     */\n    public static boolean isAvailable() {\n        /*\n         * We can't reliably detect whether a native library is already loaded\n         * into the process (because classloaders may force more than one load\n         * attempt and those mail fail even though the library is loaded and can\n         * be used). So just handle the common exceptions as \"not available.\"\n         */\n        try {\n            return NativeAuth.authAvailable(NativeAuth.MECHANISM_NTLM);\n        } catch (final UnsatisfiedLinkError e) {\n            return false;\n        } catch (final LinkageError e) {\n            return false;\n        }\n    }\n\n    public NativeNTLM() {\n    }\n\n    @Override\n    public boolean supportsCredentialsDefault() {\n        return NativeAuth.authSupportsCredentialsDefault(NativeAuth.MECHANISM_NTLM);\n    }\n\n    @Override\n    public boolean supportsCredentialsSpecified() {\n        return NativeAuth.authSupportsCredentialsSpecified(NativeAuth.MECHANISM_NTLM);\n    }\n\n    @Override\n    public String getCredentialsDefault() {\n        return NativeAuth.authGetCredentialsDefault(NativeAuth.MECHANISM_NTLM);\n    }\n\n    @Override\n    public NTLMState initialize() throws NTLMException {\n        try {\n            final long id = NativeAuth.authInitialize(NativeAuth.MECHANISM_NTLM);\n\n            if (id == 0) {\n                throw new NTLMException(Messages.getString(\"NativeNTLM.CouldNotInitializeNTLMLibraries\")); //$NON-NLS-1$\n            }\n\n            return new NativeNTLMState(id);\n        } catch (final Exception e) {\n            throw new NTLMException(e.getMessage());\n        }\n    }\n\n    @Override\n    public void setCredentialsDefault(final NTLMState state) throws NTLMException {\n        Check.notNull(state, \"state\"); //$NON-NLS-1$\n        Check.isTrue(state instanceof NativeNTLMState, \"state instanceof NativeNTLMState\"); //$NON-NLS-1$\n\n        try {\n            NativeAuth.authSetCredentialsDefault(((NativeNTLMState) state).id);\n        } catch (final Exception e) {\n            throw new NTLMException(e.getMessage());\n        }\n    }\n\n    @Override\n    public void setCredentialsSpecified(\n        final NTLMState state,\n        final String username,\n        final String domain,\n        final String password) throws NTLMException {\n        Check.notNull(state, \"state\"); //$NON-NLS-1$\n        Check.isTrue(state instanceof NativeNTLMState, \"state instanceof NativeNTLMState\"); //$NON-NLS-1$\n\n        try {\n            NativeAuth.authSetCredentialsSpecified(((NativeNTLMState) state).id, username, domain, password);\n        } catch (final Exception e) {\n            throw new NTLMException(e.getMessage());\n        }\n    }\n\n    @Override\n    public void setLocalhost(final NTLMState state, final String localhost) throws NTLMException {\n        Check.notNull(state, \"state\"); //$NON-NLS-1$\n        Check.isTrue(state instanceof NativeNTLMState, \"state instanceof NativeNTLMState\"); //$NON-NLS-1$\n\n        try {\n            NativeAuth.authSetLocalhost(((NativeNTLMState) state).id, (localhost != null ? localhost : \"\")); //$NON-NLS-1$\n        } catch (final Exception e) {\n            throw new NTLMException(e.getMessage());\n        }\n    }\n\n    @Override\n    public void setTarget(final NTLMState state, final String target) throws NTLMException {\n        Check.notNull(state, \"state\"); //$NON-NLS-1$\n        Check.isTrue(state instanceof NativeNTLMState, \"state instanceof NativeNTLMState\"); //$NON-NLS-1$\n\n        try {\n            NativeAuth.authSetTarget(((NativeNTLMState) state).id, (target != null ? target : \"\")); //$NON-NLS-1$\n        } catch (final Exception e) {\n            throw new NTLMException(e.getMessage());\n        }\n    }\n\n    @Override\n    public byte[] getToken(final NTLMState state, final byte[] inputToken) throws NTLMException {\n        Check.notNull(state, \"state\"); //$NON-NLS-1$\n        Check.isTrue(state instanceof NativeNTLMState, \"state instanceof NativeNTLMState\"); //$NON-NLS-1$\n\n        try {\n            return NativeAuth.authGetToken(((NativeNTLMState) state).id, inputToken);\n        } catch (final Exception e) {\n            throw new NTLMException(e.getMessage());\n        }\n    }\n\n    @Override\n    public boolean isComplete(final NTLMState state) throws NTLMException {\n        Check.notNull(state, \"state\"); //$NON-NLS-1$\n        Check.isTrue(state instanceof NativeNTLMState, \"state instanceof NativeNTLMState\"); //$NON-NLS-1$\n\n        try {\n            return NativeAuth.authIsComplete(((NativeNTLMState) state).id);\n        } catch (final Exception e) {\n            throw new NTLMException(e.getMessage());\n        }\n    }\n\n<fim_suffix>    @Override\n    public String getErrorMessage(final NTLMState state) {\n        Check.notNull(state, \"state\"); //$NON-NLS-1$\n        Check.isTrue(state instanceof NativeNTLMState, \"state instanceof NativeNTLMState\"); //$NON-NLS-1$\n\n        try {\n            return NativeAuth.authGetErrorMessage(((NativeNTLMState) state).id);\n        } catch (final Exception e) {\n            return MessageFormat.format(\n                Messages.getString(\"NativeNTLM.CouldNotCallNativeNTLMFormat\"), //$NON-NLS-1$\n                e.getLocalizedMessage());\n        }\n    }\n\n    @Override\n    public void dispose(final NTLMState state) throws NTLMException {\n        Check.notNull(state, \"state\"); //$NON-NLS-1$\n        Check.isTrue(state instanceof NativeNTLMState, \"state instanceof NativeNTLMState\"); //$NON-NLS-1$\n\n        try {\n            NativeAuth.authDispose(((NativeNTLMState) state).id);\n        } catch (final Exception e) {\n            throw new NTLMException(e.getMessage());\n        }\n    }\n\n    private static class NativeNTLMState extends NTLMState {\n        /* The id (a pointer to the native NTLM struct */\n        private long id = 0;\n\n        public NativeNTLMState(final long id) {\n            this.id = id;\n        }\n    }\n}<fim_middle>// function below has no smell\n"}