{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cassandra.io.sstable.format;\n\nimport org.apache.cassandra.db.DecoratedKey;\nimport org.apache.cassandra.db.rows.Unfiltered;\n\n/**\n * Observer for events in the lifecycle of writing out an sstable.\n */\n<fim_suffix>public interface SSTableFlushObserver\n{\n    /**\n     * Called before writing any data to the sstable.\n     */\n    void begin();\n\n    /**\n     * Called when a new partition in being written to the sstable,\n     * but before any cells are processed (see {@link #nextUnfilteredCluster(Unfiltered)}).\n     *\n     * @param key The key being appended to SSTable.\n     * @param indexPosition The position of the key in the SSTable PRIMARY_INDEX file.\n     */\n    void startPartition(DecoratedKey key, long indexPosition);\n\n    /**\n     * Called after the unfiltered cluster is written to the sstable.\n     * Will be preceded by a call to {@code startPartition(DecoratedKey, long)},\n     * and the cluster should be assumed to belong to that partition.\n     *\n     * @param unfilteredCluster The unfiltered cluster being added to SSTable.\n     */\n    void nextUnfilteredCluster(Unfiltered unfilteredCluster);\n\n    /**\n     * Called when all data is written to the file and it's ready to be finished up.\n     */\n    void complete();\n}<fim_middle>// class below has no smell\n"}