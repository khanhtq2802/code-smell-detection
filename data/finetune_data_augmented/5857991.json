{"text": "<fim_prefix>\n<fim_suffix>public class AnnotationViewerMain extends JFrame {\n  private static final long serialVersionUID = -3201723535833938833L;\n  private static final String HELP_MESSAGE = \"Instructions for using Annotation Viewer:\\n\\n\"\n          + \"1) In the \\\"Input Directory\\\" field, either type or use the browse\\n\"\n          + \"button to select a directory containing the analyzed documents\\n \"\n          + \"(in XMI or XCAS format) that you want to view.\\n\\n\"\n          + \"2) In the \\\"TypeSystem or AE Descriptor File\\\" field, either type or use the browse\\n\"\n          + \"button to select the TypeSystem or AE descriptor for the AE that generated the\\n\"\n          + \"XMI or XCAS files.  (This is needed for type system infornation only.\\n\"\n          + \"Analysis will not be redone.)\\n\\n\"\n          + \"3) Click the \\\"View\\\" button at the buttom of the window.\\n\\n\"\n          + \"A list of the analyzed documents will be displayed.\\n\\n\\n\"\n          + \"4) Select the view type -- either the Java annotation viewer, HTML,\\n\"\n          + \"or XML.  The Java annotation viewer is recommended.\\n\\n\"\n          + \"5) Double-click on a document to view it.\\n\";\n  private File uimaHomeDir;\n  private FileSelector inputFileSelector;\n  private FileSelector taeDescriptorFileSelector;\n  private JButton viewButton;\n  private JDialog aboutDialog;\n  /** Stores user preferences */\n  private Preferences prefs = Preferences.userRoot().node(\"org/apache/uima/tools/AnnotationViewer\");\n  /**\n   * Constructor. Sets up the GUI.\n   */\n  public AnnotationViewerMain() {\n    super(\"Annotation Viewer\");\n    // set UIMA home dir\n    uimaHomeDir = new File(System.getProperty(\"uima.home\", \"C:/Program Files/apache-uima\"));\n    try {\n      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n    } catch (Exception e) {\n      // I don't think this should ever happen, but if it does just print error and continue\n      // with defalt look and feel\n      System.err.println(\"Could not set look and feel: \" + e.getMessage());\n    }\n    // UIManager.put(\"Panel.background\",Color.WHITE);\n    // Need to set other colors as well\n    // Set frame icon image\n    try {\n      this.setIconImage(Images.getImage(Images.MICROSCOPE));\n      // new ImageIcon(getClass().getResource(FRAME_ICON_IMAGE)).getImage());\n    } catch (IOException e) {\n      System.err.println(\"Image could not be loaded: \" + e.getMessage());\n    }\n    this.getContentPane().setBackground(Color.WHITE);\n    // create about dialog\n    aboutDialog = new AboutDialog(this, \"About Annotation Viewer\");\n    // Create Menu Bar\n    JMenuBar menuBar = new JMenuBar();\n    setJMenuBar(menuBar);\n    JMenu fileMenu = new JMenu(\"File\");\n    JMenu helpMenu = new JMenu(\"Help\");\n    // Menu Items\n    JMenuItem aboutMenuItem = new JMenuItem(\"About\");\n    JMenuItem helpMenuItem = new JMenuItem(\"Help\");\n    JMenuItem exitMenuItem = new JMenuItem(\"Exit\");\n    fileMenu.add(exitMenuItem);\n    helpMenu.add(aboutMenuItem);\n    helpMenu.add(helpMenuItem);\n    menuBar.add(fileMenu);\n    menuBar.add(helpMenu);\n    // Labels to identify the text fields\n    final Caption labelInputDir = new Caption(\"Input Directory: \");\n    final Caption labelStyleMapFile = new Caption(\"TypeSystem or AE Descriptor File: \");\n    JPanel controlPanel = new JPanel();\n    controlPanel.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));\n    controlPanel.setLayout(new SpringLayout());\n    // Once we add components to controlPanel, we'll\n    // call SpringUtilities::makeCompactGrid on it.\n    // controlPanel.setLayout(new GridLayout(4, 2, 8, 4));\n    // Set default values for input fields\n    File inputDir = new File(uimaHomeDir, \"examples/data/processed\");\n    inputFileSelector = new FileSelector(\"\", \"Input Directory\", JFileChooser.DIRECTORIES_ONLY,\n            inputDir);\n    inputFileSelector.setSelected(inputDir.getAbsolutePath());\n    taeDescriptorFileSelector = new FileSelector(\"\", \"TAE Descriptor File\",\n            JFileChooser.FILES_ONLY, uimaHomeDir);\n    File descriptorFile = new File(uimaHomeDir,\n            \"examples/descriptors/analysis_engine/PersonTitleAnnotator.xml\");\n    taeDescriptorFileSelector.setSelected(descriptorFile.getAbsolutePath());\n    controlPanel.add(labelInputDir);\n    controlPanel.add(inputFileSelector);\n    controlPanel.add(labelStyleMapFile);\n    controlPanel.add(taeDescriptorFileSelector);\n    SpringUtilities.makeCompactGrid(controlPanel, 2, 2, // rows, cols\n            4, 4, // initX, initY\n            4, 4); // xPad, yPad\n    // Event Handlling of \"Exit\" Menu Item\n    exitMenuItem.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent ae) {\n        savePreferences();\n        System.exit(0);\n      }\n    });\n    // Event Handlling of \"About\" Menu Item\n    aboutMenuItem.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent ae) {\n        aboutDialog.setVisible(true);\n      }\n    });\n    // Event Handlling of \"Help\" Menu Item\n    helpMenuItem.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent ae) {\n        JOptionPane.showMessageDialog(AnnotationViewerMain.this, HELP_MESSAGE,\n                \"Annotation Viewer Help\", JOptionPane.PLAIN_MESSAGE);\n      }\n    });\n    // Add the panels to the frame\n    Container contentPanel = getContentPane();\n    contentPanel.add(controlPanel, BorderLayout.CENTER);\n    // add banner\n    JLabel banner = new JLabel(Images.getImageIcon(Images.BANNER));\n    contentPanel.add(banner, BorderLayout.NORTH);\n    // Add the view Button to run TAE\n    viewButton = new JButton(\"View\");\n    // Add the view button to another panel\n    JPanel lowerButtonsPanel = new JPanel();\n    lowerButtonsPanel.add(viewButton);\n    contentPanel.add(lowerButtonsPanel, BorderLayout.SOUTH);\n    setContentPane(contentPanel);\n    // Event Handling of view Button\n    viewButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent ee) {\n        try {\n          viewDocuments();\n        } catch (Exception e) {\n          displayError(e);\n        }\n      }\n    });\n    // load user preferences\n    if (System.getProperty(\"uima.noprefs\") == null) {\n      restorePreferences();\n    }\n  }\n  public void viewDocuments() throws InvalidXMLException, IOException,\n          ResourceInitializationException {\n    File descriptorFile = new File(taeDescriptorFileSelector.getSelected());\n    if (!descriptorFile.exists() || descriptorFile.isDirectory()) {\n      displayError(\"Descriptor File \\\"\" + descriptorFile.getPath() + \"\\\" does not exist.\");\n      return;\n    }\n    File inputDir = new File(inputFileSelector.getSelected());\n    if (!inputDir.exists() || !inputDir.isDirectory()) {\n      displayError(\"Input Directory \\\"\" + inputDir.getPath() + \"\\\" does not exist.\");\n      return;\n    }\n    // parse descriptor. Could be either AE or TypeSystem descriptor\n    Object descriptor = UIMAFramework.getXMLParser().parse(new XMLInputSource(descriptorFile));\n    // instantiate CAS to get type system. Also build style map file if there is none.\n    CAS cas;\n    File styleMapFile;\n    if (descriptor instanceof AnalysisEngineDescription) {\n      cas = CasCreationUtils.createCas((AnalysisEngineDescription) descriptor);\n      styleMapFile = getStyleMapFile((AnalysisEngineDescription) descriptor, descriptorFile\n              .getPath());\n    } else if (descriptor instanceof TypeSystemDescription) {\n      TypeSystemDescription tsDesc = (TypeSystemDescription) descriptor;\n      tsDesc.resolveImports();\n      cas = CasCreationUtils.createCas(tsDesc, null, new FsIndexDescription[0]);\n      styleMapFile = getStyleMapFile((TypeSystemDescription) descriptor, descriptorFile.getPath());\n    } else {\n      displayError(\"Invalid Descriptor File \\\"\" + descriptorFile.getPath() + \"\\\"\"\n              + \"Must be either an AnalysisEngine or TypeSystem descriptor.\");\n      return;\n    }\n    // create Annotation Viewer Main Panel\n    PrefsMediator prefsMed = new PrefsMediator();\n    // set OUTPUT dir in PrefsMediator, not input dir.\n    // PrefsMediator is also used in DocumentAnalyzer, where the\n    // output dir is the directory containing XCAS files.\n    prefsMed.setOutputDir(inputDir.toString());\n    AnnotationViewerDialog viewerDialog = new AnnotationViewerDialog(this,\n            \"Analyzed Documents\", prefsMed, styleMapFile, null, cas.getTypeSystem(), null, false,\n            cas);\n    viewerDialog.pack();<fim_middle>// class below is blob\n"}