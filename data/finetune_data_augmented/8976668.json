{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.solr.handler.admin;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.lang.invoke.MethodHandles;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Collections;\n\nimport org.apache.solr.common.SolrException;\nimport org.apache.solr.common.util.Utils;\nimport org.apache.solr.core.CoreContainer;\nimport org.apache.solr.response.SolrQueryResponse;\nimport org.apache.solr.common.util.CommandOperation;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Security Configuration Handler which works on standalone local files\n */\npublic class SecurityConfHandlerLocal extends SecurityConfHandler {\n  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n  protected Path securityJsonPath;\n  \n  public SecurityConfHandlerLocal(CoreContainer coreContainer) {\n    super(coreContainer);\n    securityJsonPath = Paths.get(coreContainer.getSolrHome()).resolve(\"security.json\");\n  }\n\n  /**\n   * Fetches security props from SOLR_HOME\n   * @param getFresh NOP\n   * @return SecurityConfig whose data property either contains security.json, or an empty map if not found\n   */\n  @Override\n  public SecurityConfig getSecurityConfig(boolean getFresh) {\n    if (Files.exists(securityJsonPath)) {\n      try (InputStream securityJsonIs = Files.newInputStream(securityJsonPath)) {\n        return new SecurityConfig().setData(securityJsonIs);\n      } catch (Exception e) { \n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed opening existing security.json file: \" + securityJsonPath, e);\n      }\n    }\n    return new SecurityConfig();\n  }\n\n  @Override\n  protected void getConf(SolrQueryResponse rsp, String key) {\n    SecurityConfig props = getSecurityConfig(false);\n    Object o = props.getData().get(key);\n    if (o == null) {\n      rsp.add(CommandOperation.ERR_MSGS, Collections.singletonList(\"No \" + key + \" configured\"));\n    } else {\n      rsp.add(key+\".enabled\", getPlugin(key)!=null);\n      rsp.add(key, o);\n    }\n  }\n  \n  @Override\n  protected boolean persistConf(SecurityConfig securityConfig) throws IOException {\n    if (securityConfig == null || securityConfig.getData().isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Failed persisting security.json to SOLR_HOME. Object was empty.\");\n    }\n    try(OutputStream securityJsonOs = Files.newOutputStream(securityJsonPath)) {\n      securityJsonOs.write(Utils.toJSON(securityConfig.getData()));\n      log.debug(\"Persisted security.json to {}\", securityJsonPath);\n      return true;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Failed persisting security.json to \" + securityJsonPath, e);\n    }\n  }\n\n  @Override\n  public String getDescription() {\n    return \"Edit or read security configuration locally in SOLR_HOME\";\n  }\n\n<fim_suffix>  @Override\n  protected void securityConfEdited() {\n    // Need to call explicitly since we will not get notified of changes to local security.json\n    cores.securityNodeChanged();\n  }\n}<fim_middle>// function below has no smell\n"}