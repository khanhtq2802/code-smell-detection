{"text": "<fim_prefix>\tprivate static final String LABEL_SUB_CATEGORY = Messages.getString( \"ExpressionBuilder.Label.SubCategory\" ); //$NON-NLS-1$\n\tprivate static final String LABEL_CATEGORY = Messages.getString( \"ExpressionBuilder.Label.Category\" ); //$NON-NLS-1$\n\tprivate static final String LABEL_OPERATORS = Messages.getString( \"ExpressionBuilder.Label.Operators\" ); //$NON-NLS-1$\n\tprivate static final String TOOL_TIP_TEXT_REDO = Messages.getString( \"TextEditDialog.toolTipText.redo\" ); //$NON-NLS-1$\n\tprivate static final String TOOL_TIP_TEXT_UNDO = Messages.getString( \"TextEditDialog.toolTipText.undo\" ); //$NON-NLS-1$\n\tprivate static final String TOOL_TIP_TEXT_DELETE = Messages.getString( \"TextEditDialog.toolTipText.delete\" ); //$NON-NLS-1$\n\tprivate static final String TOOL_TIP_TEXT_PASTE = Messages.getString( \"TextEditDialog.toolTipText.paste\" ); //$NON-NLS-1$\n\tprivate static final String TOOL_TIP_TEXT_CUT = Messages.getString( \"TextEditDialog.toolTipText.cut\" ); //$NON-NLS-1$\n\tprivate static final String TOOL_TIP_TEXT_COPY = Messages.getString( \"TextEditDialog.toolTipText.copy\" ); //$NON-NLS-1$\n\tprivate static final String TOOL_TIP_TEXT_VALIDATE = Messages.getString( \"ExpressionBuilder.toolTipText.validate\" ); //$NON-NLS-1$\n\tprivate static final String TOOL_TIP_TEXT_CALENDAR = Messages.getString( \"ExpressionBuilder.toolTipText.calendar\" ); //$NON-NLS-1$\n\tprivate static final Object[] EMPTY = new Object[0];\n\tprivate static final String SORTING_PREFERENCE_KEY = \"ExpressionBuilder.preference.enable.sorting\"; //$NON-NLS-1$\n\tprivate TableViewer categoryTable, functionTable;\n\tprivate TreeViewer subCategoryTable;\n\tprivate IExpressionProvider provider;\n\tprivate SourceViewer sourceViewer;\n\tprivate JSSourceViewerConfiguration sourceViewerConfiguration = new JSSourceViewerConfiguration( );\n\tprivate IPreferenceStore preferenceStore;\n\tprivate Color backgroundColor;\n\tprivate Color foregroundColor;\n\tprivate FormText messageLine;\n\tprotected String expression = null;\n\tprotected String title;\n\tprivate boolean useSorting = false;\n\tprivate boolean showLeafOnlyInFunctionTable = false;\n\tprivate Object[] defaultSelection;\n\tprivate Map<ToolItem, Integer> toolItemType = new HashMap<ToolItem, Integer>( );\n\t/**\n\t * Create an expression builder under the given parent shell with the given\n\t * initial expression\n\t * \n\t * @param parentShell\n\t *            the parent shell\n\t * @param initExpression\n\t *            the initial expression\n\t */\n\tpublic ExpressionBuilder( Shell parentShell, String initExpression )\n\t{\n\t\tsuper( parentShell );\n\t\ttitle = DIALOG_TITLE;\n\t\tthis.expression = UIUtil.convertToGUIString( initExpression );\n\t\tthis.preferenceStore = new ScopedPreferenceStore( new InstanceScope( ),\n\t\t\t\t\"org.eclipse.ui.editors\" ); //$NON-NLS-1$\n\t}\n\tprotected void setShellStyle( int newShellStyle )\n\t{\n\t\tnewShellStyle |= SWT.MAX | SWT.RESIZE;\n\t\tsuper.setShellStyle( newShellStyle );\n\t}\n\t/**\n\t * Create an expression builder under the default parent shell with the\n\t * given initial expression\n\t * \n\t * @param initExpression\n\t *            the initial expression\n\t */\n\tpublic ExpressionBuilder( String initExpression )\n\t{\n\t\tthis( UIUtil.getDefaultShell( ), initExpression );\n\t}\n\t/**\n\t * Create an expression builder under the default parent shell without an\n\t * initail expression\n\t * \n\t */\n\tpublic ExpressionBuilder( )\n\t{\n\t\tthis( null );\n\t}\n\t/**\n\t * TableContentProvider\n\t */\n\tprivate class TableContentProvider implements IStructuredContentProvider\n\t{\n\t\tprivate Viewer viewer;\n\t\tprivate boolean leafOnly;\n\t\tpublic TableContentProvider( Viewer viewer, boolean leafOnly )\n\t\t{\n\t\t\tthis.viewer = viewer;\n\t\t\tthis.leafOnly = leafOnly;\n\t\t}\n\t\tpublic Object[] getElements( Object inputElement )\n\t\t{\n\t\t\tif ( viewer == categoryTable )\n\t\t\t{\n\t\t\t\treturn provider.getCategory( );\n\t\t\t}\n\t\t\t// does not show groups/measures in third column.\n\t\t\tif ( inputElement instanceof IAdaptable )\n\t\t\t{\n\t\t\t\tinputElement = DNDUtil.unwrapToModel( inputElement );\n\t\t\t}\n\t\t\tif ( inputElement instanceof PropertyHandle\n\t\t\t\t\t|| inputElement instanceof TabularMeasureGroupHandle\n\t\t\t\t\t|| inputElement instanceof DimensionHandle )\n\t\t\t{\n\t\t\t\treturn EMPTY;\n\t\t\t}\n\t\t\t// ignore items that cannot be inserted as (part of) expression.\n\t\t\telse if ( inputElement instanceof DesignElementHandle\n\t\t\t\t\t&& getAdapter() != null\n\t\t\t\t\t&& getAdapter( ).resolveExtendedData( (DesignElementHandle) inputElement ) != null\n\t\t\t\t\t&& provider.getChildren(inputElement).length > 1\n\t\t\t\t\t&& provider.getChildren(inputElement)[0] instanceof ReportElementHandle\n\t\t\t\t\t&& !getAdapter().isExtendedDataItem( (ReportElementHandle) provider.getChildren(inputElement)[0] ))\n\t\t\t{\n\t\t\t\treturn EMPTY;\n\t\t\t}\n\t\t\telse if (inputElement instanceof ReportElementHandle\n\t\t\t\t\t&& getAdapter( ) != null\n\t\t\t\t\t&& getAdapter( ).isExtendedDataItem( (ReportElementHandle) inputElement ))\n\t\t\t{\n\t\t\t\treturn new Object[]{inputElement};\n\t\t\t}\n\t\t\telse if ( inputElement instanceof LevelHandle )\n\t\t\t{\n\t\t\t\tList<Object> childrenList = new ArrayList<Object>( );\n\t\t\t\tchildrenList.add( inputElement );\n\t\t\t\tList<LevelAttributeHandle> attribs = new ArrayList<LevelAttributeHandle>( );\n\t\t\t\tfor ( Iterator iterator = ( (LevelHandle) inputElement ).attributesIterator( ); iterator.hasNext( ); )\n\t\t\t\t{\n\t\t\t\t\tattribs.add( (LevelAttributeHandle) iterator.next( ) );\n\t\t\t\t}\n\t\t\t\tif ( useSorting )\n\t\t\t\t{\n\t\t\t\t\t// sort attribute list\n\t\t\t\t\tCollections.sort( attribs,\n\t\t\t\t\t\t\tnew Comparator<LevelAttributeHandle>( ) {\n\t\t\t\t\t\t\t\tpublic int compare( LevelAttributeHandle o1,\n\t\t\t\t\t\t\t\t\t\tLevelAttributeHandle o2 )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn Collator.getInstance( )\n\t\t\t\t\t\t\t\t\t\t\t.compare( o1.getName( ),\n\t\t\t\t\t\t\t\t\t\t\t\t\to2.getName( ) );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tchildrenList.addAll( attribs );\n\t\t\t\treturn childrenList.toArray( );\n\t\t\t}\n\t\t\telse if ( inputElement instanceof TabularMeasureHandle )\n\t\t\t{\n\t\t\t\treturn new Object[]{\n\t\t\t\t\tinputElement\n\t\t\t\t};\n\t\t\t}\n\t\t\tif ( useSorting && provider instanceof ISortableExpressionProvider )\n\t\t\t{\n\t\t\t\treturn ( (ISortableExpressionProvider) provider ).getSortedChildren( inputElement );\n\t\t\t}\n\t\t\tObject[] elements = provider.getChildren( inputElement );\n\t\t\tif ( leafOnly && !isLeaf( elements ) )\n\t\t\t{\n\t\t\t\treturn new Object[0];\n\t\t\t}\n\t\t\treturn elements;\n\t\t}\n\t\tprivate boolean isLeaf( Object[] elements )\n\t\t{\n\t\t\tfor ( Object element : elements )\n\t\t\t{\n\t\t\t\tif ( provider.hasChildren( element ) )\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic void dispose( )\n\t\t{\n\t\t}\n<fim_suffix>\t\tpublic void inputChanged( Viewer viewer, Object oldInput,\n\t\t\t\tObject newInput )\n\t\t{\n\t\t\tif ( viewer == subCategoryTable )\n\t\t\t{\n\t\t\t\tfunctionTable.setInput( null );\n\t\t\t}\n\t\t}<fim_middle>// function below has no smell\n"}