{"text": "<fim_prefix>// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See License.txt in the repository root.\n\npackage com.microsoft.tfs.client.eclipse.project;\n\nimport java.text.MessageFormat;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.core.resources.IResourceChangeEvent;\nimport org.eclipse.core.resources.IResourceChangeListener;\nimport org.eclipse.core.runtime.CoreException;\n\nimport com.microsoft.tfs.client.common.repository.TFSRepository;\nimport com.microsoft.tfs.client.eclipse.TFSRepositoryProvider;\nimport com.microsoft.tfs.client.eclipse.util.TeamUtils;\nimport com.microsoft.tfs.util.Check;\n\npublic class ProjectCloseListener implements IResourceChangeListener {\n    private final Log log = LogFactory.getLog(ProjectCloseListener.class);\n\n    private final ProjectRepositoryManager projectManager;\n\n<fim_suffix>    public ProjectCloseListener(final ProjectRepositoryManager projectManager) {\n        Check.notNull(projectManager, \"projectManager\"); //$NON-NLS-1$\n\n        this.projectManager = projectManager;\n    }\n\n    @Override\n    public void resourceChanged(final IResourceChangeEvent event) {\n        if (event.getType() != IResourceChangeEvent.PRE_CLOSE || !(event.getResource() instanceof IProject)) {\n            return;\n        }\n\n        final IProject project = (IProject) event.getResource();\n\n        if (!project.isOpen()) {\n            /* Sanity check */\n            log.error(\n                MessageFormat.format(\n                    \"Project Manager received close notification for project {0} (already closed)\", //$NON-NLS-1$\n                    project.getName()));\n\n            return;\n        }\n\n        /* Exit if we don't manage this project */\n        String providerName;\n        try {\n            providerName = project.getPersistentProperty(TeamUtils.PROVIDER_PROP_KEY);\n        } catch (final CoreException e) {\n            log.warn(\n                MessageFormat.format(\n                    \"Could not query repository manager for project {0} (when handling close notification)\", //$NON-NLS-1$\n                    project.getName()),\n                e);\n            return;\n        }\n\n        if (providerName == null || !providerName.equals(TFSRepositoryProvider.PROVIDER_ID)) {\n            return;\n        }\n\n        /*\n         * If this is the only project for this connection, it will be\n         * disconnected, thus we need to prompt for unsaved WIT changes.\n         */\n        final TFSRepository repository = projectManager.getRepository(project);\n\n        if (repository != null) {\n            final IProject[] allRepositoryProjects = projectManager.getProjectsForRepository(repository);\n\n            if (allRepositoryProjects.length == 1 && allRepositoryProjects[0] == project) {\n                /*\n                 * Note: we have to ignore the cancel button here, there is no\n                 * way to prevent the close from occurring.\n                 */\n                ProjectManagerDataProviderFactory.getDataProvider().promptForDisconnect();\n            }\n        }\n\n        projectManager.close(project);\n    }\n}<fim_middle>// function below has no smell\n"}