{"text": "<fim_prefix>        }\n        return stringBuilder.toString();\n    }\n    /** Removes all whitespace characters from s.\n     *  Member whitespace(see above) defines which characters are considered whitespace. */\n    public static String stripWhitespace(String s) {\n        return stripCharsInBag(s, whitespace);\n    }\n    /** Returns true if single character c(actually a string) is contained within string s. */\n    public static boolean charInString(char c, String s) {\n        return (s.indexOf(c) != -1);\n    }\n    /** Removes initial(leading) whitespace characters from s.\n     *  Member whitespace(see above) defines which characters are considered whitespace. */\n    public static String stripInitialWhitespace(String s) {\n        int i = 0;\n        while ((i < s.length()) && charInString(s.charAt(i), whitespace)) {\n            i++;\n        }\n        return s.substring(i);\n    }\n    /** Returns true if character c is an English letter (A .. Z, a..z).\n     *\n     *  NOTE: Need i18n version to support European characters.\n     *  This could be tricky due to different character\n     *  sets and orderings for various languages and platforms. */\n    public static boolean isLetter(char c) {\n        return Character.isLetter(c);\n    }\n    /** Returns true if character c is a digit (0 .. 9). */\n    public static boolean isDigit(char c) {\n        return Character.isDigit(c);\n    }\n    /** Returns true if character c is a letter or digit. */\n    public static boolean isLetterOrDigit(char c) {\n        return Character.isLetterOrDigit(c);\n    }\n    /** Returns true if character c is a letter or digit. */\n    public static boolean isHexDigit(char c) {\n        return hexDigits.indexOf(c) >= 0;\n    }\n    /** Returns true if all characters in string s are numbers.\n     *\n     *  Accepts non-signed integers only. Does not accept floating\n     *  point, exponential notation, etc.\n     */\n    public static boolean isInteger(String s) {\n        if (isEmpty(s)) {\n            return defaultEmptyOK;\n        }\n        // Search through string's characters one by one\n        // until we find a non-numeric character.\n        // When we do, return false; if we don't, return true.\n        for (int i = 0; i < s.length(); i++) {\n            // Check that current character is number.\n            char c = s.charAt(i);\n            if (!isDigit(c)) {\n                return false;\n            }\n        }\n        // All characters are numbers.\n        return true;\n    }\n    /** Returns true if all characters are numbers;\n     *  first character is allowed to be + or - as well.\n     *\n     *  Does not accept floating point, exponential notation, etc.\n     */\n    public static boolean isSignedInteger(String s) {\n        if (isEmpty(s)) {\n            return defaultEmptyOK;\n        }\n        try {\n            Integer.parseInt(s);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n    /** Returns true if all characters are numbers;\n     *  first character is allowed to be + or - as well.\n     *\n     *  Does not accept floating point, exponential notation, etc.\n     */\n    public static boolean isSignedLong(String s) {\n        if (isEmpty(s)) {\n            return defaultEmptyOK;\n        }\n        try {\n            Long.parseLong(s);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n    /**\n     * Returns true if string s is an integer &gt; 0.\n     * NOTE: using the Java Long object for greatest precision\n     */\n    public static boolean isPositiveInteger(String s) {\n        if (isEmpty(s)) {\n            return defaultEmptyOK;\n        }\n        try {\n            long temp = Long.parseLong(s);\n            return temp > 0;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n    /**\n     * Returns true if string s is an integer &gt;= 0\n     */\n    public static boolean isNonnegativeInteger(String s) {\n        if (isEmpty(s)) {\n            return defaultEmptyOK;\n        }\n        try {\n            int temp = Integer.parseInt(s);\n            return temp >= 0;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n    /**\n     * Returns true if string s is an integer &lt; 0\n     */\n    public static boolean isNegativeInteger(String s) {\n        if (isEmpty(s)) {\n            return defaultEmptyOK;\n        }\n        try {\n            int temp = Integer.parseInt(s);\n            return temp < 0;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n    /**\n     * Returns true if string s is an integer &lt;= 0\n     */\n    public static boolean isNonpositiveInteger(String s) {\n        if (isEmpty(s)) {\n            return defaultEmptyOK;\n        }\n        try {\n            int temp = Integer.parseInt(s);\n            return temp <= 0;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n    /** True if string s is an unsigned floating point(real) number.\n     *\n     *  Also returns true for unsigned integers. If you wish\n     *  to distinguish between integers and floating point numbers,\n     *  first call isInteger, then call isFloat.\n     *\n     *  Does not accept exponential notation.\n     */\n    public static boolean isFloat(String s) {\n        if (isEmpty(s)) {\n            return defaultEmptyOK;\n        }\n        boolean seenDecimalPoint = false;\n        if (s.startsWith(decimalPointDelimiter)) {\n            return false;\n        }\n        // Search through string's characters one by one\n        // until we find a non-numeric character.\n        // When we do, return false; if we don't, return true.\n        for (int i = 0; i < s.length(); i++) {\n            // Check that current character is number.\n            char c = s.charAt(i);\n            if (c == decimalPointDelimiter.charAt(0)) {\n                if (!seenDecimalPoint) {\n                    seenDecimalPoint = true;\n                } else {\n                    return false;\n                }\n            } else {\n                if (!isDigit(c)) {\n                    return false;\n                }\n            }\n        }\n        // All characters are numbers.\n        return true;\n    }\n    /** General routine for testing whether a string is a float.\n     */\n    public static boolean isFloat(String s, boolean allowNegative, boolean allowPositive, int minDecimal, int maxDecimal) {\n        if (isEmpty(s)) {\n            return defaultEmptyOK;\n        }\n        try {\n            float temp = Float.parseFloat(s);\n            if ((!allowNegative && temp < 0) || (!allowPositive && temp > 0)) {\n                return false;\n            }\n            int decimalPoint = s.indexOf(\".\");\n            if (decimalPoint == -1) {\n                return !(minDecimal > 0);\n            }\n            // 1.2345; length=6; point=1; num=4\n            int numDecimals = s.length() - decimalPoint - 1;\n            return !(minDecimal >= 0 && numDecimals < minDecimal) && !(maxDecimal >= 0 && numDecimals > maxDecimal);\n        } catch (Exception e) {\n            return false;\n        }\n    }\n    /** General routine for testing whether a string is a double.\n     */\n    public static boolean isDouble(String s, boolean allowNegative, boolean allowPositive, int minDecimal, int maxDecimal) {\n        if (isEmpty(s)) {\n            return defaultEmptyOK;\n        }\n        try {\n            double temp = Double.parseDouble(s);\n            if ((!allowNegative && temp < 0) || (!allowPositive && temp > 0)) {\n                return false;\n            }\n            int decimalPoint = s.indexOf(\".\");\n            if (decimalPoint == -1) {\n                return !(minDecimal > 0);\n            }\n            // 1.2345; length=6; point=1; num=4\n            int numDecimals = s.length() - decimalPoint - 1;\n            return !(minDecimal >= 0 && numDecimals < minDecimal) && !(maxDecimal >= 0 && numDecimals > maxDecimal);\n        } catch (Exception e) {\n            return false;\n        }\n    }\n    /** True if string s is a signed or unsigned floating point\n     *  (real) number. First character is allowed to be + or -.\n     *\n     *  Also returns true for unsigned integers. If you wish\n     *  to distinguish between integers and floating point numbers,\n     *  first call isSignedInteger, then call isSignedFloat.\n     */\n<fim_suffix>    public static boolean isSignedFloat(String s) {\n        if (isEmpty(s)) {\n            return defaultEmptyOK;\n        }\n        try {\n            Float.parseFloat(s);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }<fim_middle>// function below has no smell\n"}