{"text": "<fim_prefix>                        maximizeAction.setEnabled(true);\n                        restoreAction.setEnabled(false);\n                    }\n                    if (toggleButton.getParent() == null ||\n                        iconifyButton.getParent() == null) {\n                        add(toggleButton);\n                        add(iconifyButton);\n                        revalidate();\n                        repaint();\n                    }\n                    toggleButton.setText(null);\n                }\n                else {\n                    maximizeAction.setEnabled(false);\n                    restoreAction.setEnabled(false);\n                    if (toggleButton.getParent() != null) {\n                        remove(toggleButton);\n                        revalidate();\n                        repaint();\n                    }\n                }\n            }\n            else {\n                // Not contained in a Frame\n                maximizeAction.setEnabled(false);\n                restoreAction.setEnabled(false);\n                iconifyAction.setEnabled(false);\n                remove(toggleButton);\n                remove(iconifyButton);\n                revalidate();\n                repaint();\n            }\n            closeAction.setEnabled(true);\n            this.state = state;\n        }\n    }\n    /**\n     * Updates the toggle button to contain the Icon <code>icon</code>, and\n     * Action <code>action</code>.\n     */\n    private void updateToggleButton(Action action, Icon icon) {\n        toggleButton.setAction(action);\n        toggleButton.setIcon(icon);\n        toggleButton.setText(null);\n    }\n    /**\n     * Returns the Frame rendering in. This will return null if the\n     * <code>JRootPane</code> is not contained in a <code>Frame</code>.\n     */\n    private Frame getFrame() {\n        Window window = getWindow();\n        if (window instanceof Frame) {\n            return (Frame)window;\n        }\n        return null;\n    }\n    /**\n     * Returns the <code>Window</code> the <code>JRootPane</code> is\n     * contained in. This will return null if there is no parent ancestor\n     * of the <code>JRootPane</code>.\n     */\n    private Window getWindow() {\n        return window;\n    }\n    /**\n     * Returns the String to display as the title.\n     */\n    private String getTitle() {\n        Window w = getWindow();\n        if (w instanceof Frame) {\n            return ((Frame)w).getTitle();\n        }\n        else if (w instanceof Dialog) {\n            return ((Dialog)w).getTitle();\n        }\n        return null;\n    }\n    /**\n     * Renders the TitlePane.\n     */\n    public void paintComponent(Graphics g)  {\n        // As state isn't bound, we need a convenience place to check\n        // if it has changed. Changing the state typically changes the\n        if (getFrame() != null) {\n            setState(getFrame().getExtendedState());\n        }\n        JRootPane rootPane = getRootPane();\n        Window window = getWindow();\n        boolean leftToRight = (window == null) ?\n                               rootPane.getComponentOrientation().isLeftToRight() :\n                               window.getComponentOrientation().isLeftToRight();\n        boolean isSelected = (window == null) ? true : window.isActive();\n        int width = getWidth();\n        int height = getHeight();\n        Color background;\n        Color foreground;\n        Color darkShadow;\n        MetalBumps bumps;\n        if (isSelected) {\n            background = activeBackground;\n            foreground = activeForeground;\n            darkShadow = activeShadow;\n            bumps = activeBumps;\n        } else {\n            background = inactiveBackground;\n            foreground = inactiveForeground;\n            darkShadow = inactiveShadow;\n            bumps = inactiveBumps;\n        }\n        g.setColor(background);\n        g.fillRect(0, 0, width, height);\n        g.setColor( darkShadow );\n        g.drawLine ( 0, height - 1, width, height -1);\n        g.drawLine ( 0, 0, 0 ,0);\n        g.drawLine ( width - 1, 0 , width -1, 0);\n        int xOffset = leftToRight ? 5 : width - 5;\n        if (getWindowDecorationStyle() == JRootPane.FRAME) {\n            xOffset += leftToRight ? IMAGE_WIDTH + 5 : - IMAGE_WIDTH - 5;\n        }\n        String theTitle = getTitle();\n        if (theTitle != null) {\n            FontMetrics fm = SwingUtilities2.getFontMetrics(rootPane, g);\n            g.setColor(foreground);\n            int yOffset = ( (height - fm.getHeight() ) / 2 ) + fm.getAscent();\n            Rectangle rect = new Rectangle(0, 0, 0, 0);\n            if (iconifyButton != null && iconifyButton.getParent() != null) {\n                rect = iconifyButton.getBounds();\n            }\n            int titleW;\n            if( leftToRight ) {\n                if (rect.x == 0) {\n                    rect.x = window.getWidth() - window.getInsets().right-2;\n                }\n                titleW = rect.x - xOffset - 4;\n                theTitle = SwingUtilities2.clipStringIfNecessary(\n                                rootPane, fm, theTitle, titleW);\n            } else {\n                titleW = xOffset - rect.x - rect.width - 4;\n                theTitle = SwingUtilities2.clipStringIfNecessary(\n                                rootPane, fm, theTitle, titleW);\n                xOffset -= SwingUtilities2.stringWidth(rootPane, fm,\n                                                       theTitle);\n            }\n            int titleLength = SwingUtilities2.stringWidth(rootPane, fm,\n                                                          theTitle);\n            SwingUtilities2.drawString(rootPane, g, theTitle, xOffset,\n                                       yOffset );\n            xOffset += leftToRight ? titleLength + 5  : -5;\n        }\n        int bumpXOffset;\n        int bumpLength;\n        if( leftToRight ) {\n            bumpLength = width - buttonsWidth - xOffset - 5;\n            bumpXOffset = xOffset;\n        } else {\n            bumpLength = xOffset - buttonsWidth - 5;\n            bumpXOffset = buttonsWidth + 5;\n        }\n        int bumpYOffset = 3;\n        int bumpHeight = getHeight() - (2 * bumpYOffset);\n        bumps.setBumpArea( bumpLength, bumpHeight );\n        bumps.paintIcon(this, g, bumpXOffset, bumpYOffset);\n    }\n    /**\n     * Actions used to <code>close</code> the <code>Window</code>.\n     */\n    @SuppressWarnings(\"serial\") // Superclass is not serializable across versions\n    private class CloseAction extends AbstractAction {\n        public CloseAction() {\n            super(UIManager.getString(\"MetalTitlePane.closeTitle\",\n                                      getLocale()));\n        }\n        public void actionPerformed(ActionEvent e) {\n            close();\n        }\n    }\n    /**\n     * Actions used to <code>iconfiy</code> the <code>Frame</code>.\n     */\n    @SuppressWarnings(\"serial\") // Superclass is not serializable across versions\n    private class IconifyAction extends AbstractAction {\n        public IconifyAction() {\n            super(UIManager.getString(\"MetalTitlePane.iconifyTitle\",\n                                      getLocale()));\n        }\n        public void actionPerformed(ActionEvent e) {\n            iconify();\n        }\n    }\n    /**\n     * Actions used to <code>restore</code> the <code>Frame</code>.\n     */\n    @SuppressWarnings(\"serial\") // Superclass is not serializable across versions\n    private class RestoreAction extends AbstractAction {\n        public RestoreAction() {\n            super(UIManager.getString\n                  (\"MetalTitlePane.restoreTitle\", getLocale()));\n        }\n        public void actionPerformed(ActionEvent e) {\n            restore();\n        }\n    }\n    /**\n     * Actions used to <code>restore</code> the <code>Frame</code>.\n     */\n    @SuppressWarnings(\"serial\") // Superclass is not serializable across versions\n    private class MaximizeAction extends AbstractAction {\n        public MaximizeAction() {\n            super(UIManager.getString(\"MetalTitlePane.maximizeTitle\",\n                                      getLocale()));\n        }\n        public void actionPerformed(ActionEvent e) {\n            maximize();\n        }\n    }\n    /**\n     * Class responsible for drawing the system menu. Looks up the\n     * image to draw from the Frame associated with the\n     * <code>JRootPane</code>.\n     */\n<fim_suffix>    @SuppressWarnings(\"serial\") // Superclass is not serializable across versions\n    private class SystemMenuBar extends JMenuBar {\n        public void paint(Graphics g) {\n            if (isOpaque()) {\n                g.setColor(getBackground());\n                g.fillRect(0, 0, getWidth(), getHeight());\n            }\n            if (systemIcon != null) {\n                g.drawImage(systemIcon, 0, 0, IMAGE_WIDTH, IMAGE_HEIGHT, null);\n            } else {\n                Icon icon = UIManager.getIcon(\"InternalFrame.icon\");\n                if (icon != null) {\n                    icon.paintIcon(this, g, 0, 0);\n                }\n            }\n        }\n        public Dimension getMinimumSize() {\n            return getPreferredSize();\n        }\n        public Dimension getPreferredSize() {\n            Dimension size = super.getPreferredSize();\n            return new Dimension(Math.max(IMAGE_WIDTH, size.width),\n                                 Math.max(size.height, IMAGE_HEIGHT));\n        }\n    }<fim_middle>// class below has no smell\n"}