{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2019 Red Hat, Inc and others.\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *     Red Hat, Inc - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.reddeer.eclipse.jdt.ui.preferences;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.eclipse.reddeer.common.logging.Logger;\nimport org.eclipse.reddeer.common.wait.WaitWhile;\nimport org.eclipse.reddeer.core.condition.WidgetIsFound;\nimport org.eclipse.reddeer.core.matcher.TreeItemTextMatcher;\nimport org.eclipse.reddeer.core.matcher.WithMnemonicTextMatcher;\nimport org.eclipse.reddeer.core.reference.ReferencedComposite;\nimport org.eclipse.reddeer.eclipse.ui.dialogs.PropertyPage;\nimport org.eclipse.reddeer.swt.api.Button;\nimport org.eclipse.reddeer.swt.api.Shell;\nimport org.eclipse.reddeer.swt.api.Tree;\nimport org.eclipse.reddeer.swt.api.TreeItem;\nimport org.eclipse.reddeer.swt.condition.ShellIsAvailable;\nimport org.eclipse.reddeer.swt.impl.button.CancelButton;\nimport org.eclipse.reddeer.swt.impl.button.OkButton;\nimport org.eclipse.reddeer.swt.impl.button.PushButton;\nimport org.eclipse.reddeer.swt.impl.button.YesButton;\nimport org.eclipse.reddeer.swt.impl.shell.DefaultShell;\nimport org.eclipse.reddeer.swt.impl.tab.DefaultTabItem;\nimport org.eclipse.reddeer.swt.impl.table.DefaultTableItem;\nimport org.eclipse.reddeer.swt.impl.tree.DefaultTree;\nimport org.eclipse.reddeer.swt.impl.tree.DefaultTreeItem;\nimport org.eclipse.reddeer.workbench.core.condition.JobIsRunning;\nimport org.eclipse.reddeer.workbench.ui.dialogs.WorkbenchPreferenceDialog;\nimport org.hamcrest.Matcher;\n/**\n * \"Java Build Path\" property page.\n * \n * @author Vlado Pakan\n * @author Josef Kopriva\n *\n */\npublic class BuildPathsPropertyPage extends PropertyPage {\n\tpublic static final String NAME = \"Java Build Path\";\n\tpublic static final String CLASSPATH = \"Classpath\";\n\tpublic static final String MODULEPATH = \"Modulepath\";\n\tprivate static final Logger log = Logger.getLogger(BuildPathsPropertyPage.class);\n\t/**\n\t * Constructs a new Build Path property page.\n\t */\n\tpublic BuildPathsPropertyPage(ReferencedComposite referencedComposite) {\n\t\tsuper(referencedComposite, NAME);\n\t}\n\t/**\n\t * Activates Source tab.\n\t */\n\tpublic BuildPathsPropertyPage activateSourceTab() {\n\t\tnew DefaultTabItem(this, \"Source\").activate();\n\t\tnew WaitWhile(new JobIsRunning());\n\t\treturn this;\n\t}\n\t/**\n\t * Activates Projects tab.\n\t */\n\tpublic BuildPathsPropertyPage activateProjectsTab() {\n\t\tnew DefaultTabItem(this, \"Projects\").activate();\n\t\tnew WaitWhile(new JobIsRunning());\n\t\treturn this;\n\t}\n\t/**\n\t * Activates Libraries tab.\n\t */\n\tpublic BuildPathsPropertyPage activateLibrariesTab() {\n\t\tnew DefaultTabItem(this, \"Libraries\").activate();\n\t\tnew WaitWhile(new JobIsRunning());\n\t\treturn this;\n\t}\n\t/**\n\t * Activates Order and Export tab.\n\t */\n\tpublic BuildPathsPropertyPage activateOrderAndExportTab() {\n\t\tnew DefaultTabItem(this, \"Order and Export\").activate();\n\t\tnew WaitWhile(new JobIsRunning());\n\t\treturn this;\n\t}\n\t/**\n\t * Adds new variable to Build Path Libraries.\n\t * * For Java 1.8 and lower.\n\t *\n\t * @param name              the name\n\t * @param value             the value\n\t * @param overwriteIfExists the overwrite if exists\n\t * @return added variable label\n\t */\n\tpublic String addVariable(String name, String value, boolean overwriteIfExists) {\n\t\tlog.info(\"Adding variable: \" + name + \"=\" + value);\n\t\tactivateLibrariesTab();\n\t\treturn addVariableShared(name, value, overwriteIfExists);\n\t}\n\tprivate String addVariableShared(String name, String value, boolean overwriteIfExists) {\n\t\tnew PushButton(this, \"Add Variable...\").click();\n\t\tShell variableEntryShell = new DefaultShell(\"New Variable Classpath Entry\");\n\t\tnew PushButton(variableEntryShell, \"Configure Variables...\").click();\n\t\tWorkbenchPreferenceDialog preferencesDialog = new WorkbenchPreferenceDialog();\n\t\tpreferencesDialog.open();\n\t\tString result = new ClasspathVariablesPreferencePage(preferencesDialog).addVariable(name, value,\n\t\t\t\toverwriteIfExists);\n\t\tpreferencesDialog.ok();\n\t\tnew OkButton(variableEntryShell).click();\n\t\tnew WaitWhile(new ShellIsAvailable(variableEntryShell));\n\t\tnew WaitWhile(new JobIsRunning());\n\t\tnew PushButton(this, \"Apply\").click();\n\t\tnew WaitWhile(new JobIsRunning());\n\t\treturn result;\n\t}\n\t/**\n\t * Adds new variable to Class Path Libraries.\n\t * * For Java 9 and higher.\n\t *\n\t * @param name              the name\n\t * @param value             the value\n\t * @param overwriteIfExists the overwrite if exists\n\t * @return added variable label\n\t */\n<fim_suffix>\tpublic String addVariableOnClasspath(String name, String value, boolean overwriteIfExists) {\n\t\tlog.info(\"Adding variable on Classpath: \" + name + \"=\" + value);\n\t\tactivateLibrariesTab();\n\t\tgetLibraryTree().getItem(\"Classpath\").select();\n\t\treturn addVariableShared(name, value, overwriteIfExists);\n\t}\n\t/**\n\t * Adds new variable to Module Path Libraries.\n\t * * For Java 9 and higher.\n\t *\n\t * @param name              the name\n\t * @param value             the value\n\t * @param overwriteIfExists the overwrite if exists\n\t * @return added variable label\n\t */\n\tpublic String addVariableOnModulepath(String name, String value, boolean overwriteIfExists) {\n\t\tlog.info(\"Adding variable on Modulepath: \" + name + \"=\" + value);\n\t\tactivateLibrariesTab();\n\t\tgetLibraryTree().getItem(\"Modulepath\").select();\n\t\treturn addVariableShared(name, value, overwriteIfExists);\n\t}\n\t/**\n\t * Removes variable from Build Path Libraries.\n\t * * For Java 1.8 and lower.\n\t *\n\t * @param label          the label\n\t * @param removeGlobally the remove globally\n\t */\n\tpublic BuildPathsPropertyPage removeVariable(String label, boolean removeGlobally) {\n\t\tlog.info(\"Removing variable: \" + label);\n\t\tselectLibrary(new TreeItemTextMatcher(label));\n\t\tnew PushButton(this, \"Remove\").click();\n\t\treturn removeVariableShared(label, removeGlobally);\n\t}\n\tprivate BuildPathsPropertyPage removeVariableShared(String label, boolean removeGlobally) {\n\t\tif (removeGlobally) {\n\t\t\tnew PushButton(this, \"Add Variable...\").click();\n\t\t\tShell variableEntryShell = new DefaultShell(\"New Variable Classpath Entry\");\n\t\t\tnew DefaultTableItem(variableEntryShell, label).select();\n\t\t\tnew PushButton(variableEntryShell, \"Configure Variables...\").click();\n\t\t\tWorkbenchPreferenceDialog workbenchDialog = new WorkbenchPreferenceDialog();\n\t\t\tworkbenchDialog.open();\n\t\t\tnew ClasspathVariablesPreferencePage(workbenchDialog).removeVariable(label);\n\t\t\tWidgetIsFound applyAndCloseButton = new WidgetIsFound(org.eclipse.swt.widgets.Button.class,\n\t\t\t\t\tnew WithMnemonicTextMatcher(\"Apply and Close\"));\n\t\t\tButton button;\n\t\t\tif (applyAndCloseButton.test()) {\n\t\t\t\tbutton = new PushButton(\"Apply and Close\"); // oxygen changed button text\n\t\t\t} else {\n\t\t\t\tbutton = new OkButton();\n\t\t\t}\n\t\t\tbutton.click();\n\t\t\tShell varaiblesChanged = new DefaultShell(\"Classpath Variables Changed\");\n\t\t\tnew YesButton(varaiblesChanged).click();\n\t\t\tnew WaitWhile(new ShellIsAvailable(varaiblesChanged));\n\t\t\tnew CancelButton(variableEntryShell).click();\n\t\t\tnew WaitWhile(new ShellIsAvailable(variableEntryShell));\n\t\t\tnew WaitWhile(new JobIsRunning());\n\t\t}\n\t\tnew PushButton(this, \"Apply\").click();\n\t\tnew WaitWhile(new JobIsRunning());\n\t\treturn this;\n\t}\n\t/**\n\t * Removes variable from Class Path Libraries.<fim_middle>// function below has no smell\n"}