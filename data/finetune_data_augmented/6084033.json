{"text": "<fim_prefix>/*\n * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage org.eclipse.ceylon.langtools.tools.javac.util;\n\nimport org.eclipse.ceylon.langtools.tools.javac.code.Type;\n\n/**\n * Utilities for operating on constant values.\n *\n * <p><b>This is NOT part of any supported API.\n * If you write code that depends on this, you do so at your own risk.\n * This code and its internal interfaces are subject to change or\n * deletion without notice.</b>\n */\n<fim_suffix>public class Constants {\n\n    /**\n     * Converts a constant in internal representation (in which\n     * boolean, char, byte, short, and int are each represented by an\n     * Integer) into standard representation.  Other values (including\n     * null) are returned unchanged.\n     */\n    public static Object decode(Object value, Type type) {\n        if (value instanceof Integer) {\n            int i = (Integer) value;\n            switch (type.getTag()) {\n            case BOOLEAN:  return i != 0;\n            case CHAR:     return (char) i;\n            case BYTE:     return (byte) i;\n            case SHORT:    return (short) i;\n            }\n        }\n        return value;\n    }\n\n    /**\n     * Returns a string representation of a constant value (given in\n     * internal representation), quoted and formatted as in Java source.\n     */\n    public static String format(Object value, Type type) {\n        value = decode(value, type);\n        switch (type.getTag()) {\n        case BYTE:      return formatByte((Byte) value);\n        case LONG:      return formatLong((Long) value);\n        case FLOAT:     return formatFloat((Float) value);\n        case DOUBLE:    return formatDouble((Double) value);\n        case CHAR:      return formatChar((Character) value);\n        }\n        if (value instanceof String)\n            return formatString((String) value);\n        return value + \"\";\n    }\n\n    /**\n     * Returns a string representation of a constant value (given in\n     * standard wrapped representation), quoted and formatted as in\n     * Java source.\n     */\n    public static String format(Object value) {\n        if (value instanceof Byte)      return formatByte((Byte) value);\n        if (value instanceof Short)     return formatShort((Short) value);\n        if (value instanceof Long)      return formatLong((Long) value);\n        if (value instanceof Float)     return formatFloat((Float) value);\n        if (value instanceof Double)    return formatDouble((Double) value);\n        if (value instanceof Character) return formatChar((Character) value);\n        if (value instanceof String)    return formatString((String) value);\n        if (value instanceof Integer ||\n            value instanceof Boolean)   return value.toString();\n        else\n            throw new IllegalArgumentException(\"Argument is not a primitive type or a string; it \" +\n                                               ((value == null) ?\n                                                \"is a null value.\" :\n                                                \"has class \" +\n                                                value.getClass().getName()) + \".\" );\n    }\n\n    private static String formatByte(byte b) {\n        return String.format(\"(byte)0x%02x\", b);\n    }\n\n    private static String formatShort(short s) {\n        return String.format(\"(short)%d\", s);\n    }\n\n    private static String formatLong(long lng) {\n        return lng + \"L\";\n    }\n\n    private static String formatFloat(float f) {\n        if (Float.isNaN(f))\n            return \"0.0f/0.0f\";\n        else if (Float.isInfinite(f))\n            return (f < 0) ? \"-1.0f/0.0f\" : \"1.0f/0.0f\";\n        else\n            return f + \"f\";\n    }\n\n    private static String formatDouble(double d) {\n        if (Double.isNaN(d))\n            return \"0.0/0.0\";\n        else if (Double.isInfinite(d))\n            return (d < 0) ? \"-1.0/0.0\" : \"1.0/0.0\";\n        else\n            return d + \"\";\n    }\n\n    private static String formatChar(char c) {\n        return '\\'' + Convert.quote(c) + '\\'';\n    }\n\n    private static String formatString(String s) {\n        return '\"' + Convert.quote(s) + '\"';\n    }\n}<fim_middle>// class below has no smell\n"}