{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.yarn.server.nodemanager;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileDescriptor;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.net.InetSocketAddress;\nimport java.net.URISyntaxException;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.DelegateToFileSystem;\nimport org.apache.hadoop.fs.FileContext;\nimport org.apache.hadoop.fs.FileUtil;\nimport org.apache.hadoop.fs.FsConstants;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.fs.RawLocalFileSystem;\nimport org.apache.hadoop.fs.permission.FsPermission;\nimport org.apache.hadoop.io.IOUtils;\nimport org.apache.hadoop.io.nativeio.NativeIO.Windows;\nimport org.apache.hadoop.io.nativeio.NativeIOException;\nimport org.apache.hadoop.util.NativeCodeLoader;\nimport org.apache.hadoop.util.Shell;\nimport org.apache.hadoop.util.Shell.CommandExecutor;\nimport org.apache.hadoop.yarn.api.records.Resource;\nimport org.apache.hadoop.yarn.conf.YarnConfiguration;\nimport org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.ContainerLocalizer;\nimport org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.ResourceLocalizationService;\nimport org.apache.hadoop.yarn.server.nodemanager.executor.LocalizerStartContext;\n/**\n * Windows secure container executor (WSCE).\n * This class offers a secure container executor on Windows, similar to the \n * LinuxContainerExecutor. As the NM does not run on a high privileged context, \n * this class delegates elevated operations to the helper hadoopwintuilsvc, \n * implemented by the winutils.exe running as a service.\n * JNI and LRPC is used to communicate with the privileged service.\n */\npublic class WindowsSecureContainerExecutor extends DefaultContainerExecutor {\n  private static final Logger LOG = LoggerFactory\n      .getLogger(WindowsSecureContainerExecutor.class);\n  public static final String LOCALIZER_PID_FORMAT = \"STAR_LOCALIZER_%s\";\n  /**\n   * This class is a container for the JNI Win32 native methods used by WSCE.\n   */\n  private static class Native {\n    private static boolean nativeLoaded = false;\n    static {\n      if (NativeCodeLoader.isNativeCodeLoaded()) {\n        try {\n          initWsceNative();\n          nativeLoaded = true;\n        } catch (Throwable t) {\n          LOG.info(\"Unable to initialize WSCE Native libraries\", t);\n        }\n      }\n    }\n    /** Initialize the JNI method ID and class ID cache */\n    private static native void initWsceNative();\n    /**\n     * This class contains methods used by the WindowsSecureContainerExecutor\n     * file system operations.\n     */\n<fim_suffix>    public static class Elevated {\n      private static final int MOVE_FILE = 1;\n      private static final int COPY_FILE = 2;\n      public static void mkdir(Path dirName) throws IOException {\n        if (!nativeLoaded) {\n          throw new IOException(\"Native WSCE libraries are required for mkdir\");\n        }\n        elevatedMkDirImpl(dirName.toString());\n      }\n      private static native void elevatedMkDirImpl(String dirName) \n          throws IOException;\n      public static void chown(Path fileName, String user, String group) \n          throws IOException {\n        if (!nativeLoaded) {\n          throw new IOException(\"Native WSCE libraries are required for chown\");\n        }\n        elevatedChownImpl(fileName.toString(), user, group);\n      }\n      private static native void elevatedChownImpl(String fileName, String user, \n          String group) throws IOException;\n      public static void move(Path src, Path dst, boolean replaceExisting) \n          throws IOException {\n        if (!nativeLoaded) {\n          throw new IOException(\"Native WSCE libraries are required for move\");\n        }\n        elevatedCopyImpl(MOVE_FILE, src.toString(), dst.toString(), \n            replaceExisting);\n      }\n      public static void copy(Path src, Path dst, boolean replaceExisting) \n          throws IOException {\n        if (!nativeLoaded) {\n          throw new IOException(\"Native WSCE libraries are required for copy\");\n        }\n        elevatedCopyImpl(COPY_FILE, src.toString(), dst.toString(), \n            replaceExisting);\n      }\n      private static native void elevatedCopyImpl(int operation, String src, \n          String dst, boolean replaceExisting) throws IOException;\n      public static void chmod(Path fileName, int mode) throws IOException {\n        if (!nativeLoaded) {\n          throw new IOException(\"Native WSCE libraries are required for chmod\");\n        }\n        elevatedChmodImpl(fileName.toString(), mode);\n      }\n      private static native void elevatedChmodImpl(String path, int mode) \n          throws IOException;\n      public static void killTask(String containerName) throws IOException {\n        if (!nativeLoaded) {\n          throw new IOException(\"Native WSCE libraries are required for killTask\");\n        }\n        elevatedKillTaskImpl(containerName);\n      }\n      private static native void elevatedKillTaskImpl(String containerName) \n          throws IOException;\n      public static OutputStream create(Path f, boolean append)  \n          throws IOException {\n        if (!nativeLoaded) {\n          throw new IOException(\"Native WSCE libraries are required for create\");\n        }\n        long desiredAccess = Windows.GENERIC_WRITE;\n        long shareMode = 0L;\n        long creationDisposition = append ? \n            Windows.OPEN_ALWAYS : Windows.CREATE_ALWAYS;\n        long flags = Windows.FILE_ATTRIBUTE_NORMAL;\n        String fileName = f.toString();\n        fileName = fileName.replace('/', '\\\\');\n        long hFile = elevatedCreateImpl(\n            fileName, desiredAccess, shareMode, creationDisposition, flags);\n        return new FileOutputStream(\n            WinutilsProcessStub.getFileDescriptorFromHandle(hFile));\n      }\n      private static native long elevatedCreateImpl(String path, \n          long desiredAccess, long shareMode,\n          long creationDisposition, long flags) throws IOException;\n      public static boolean deleteFile(Path path) throws IOException {\n        if (!nativeLoaded) {\n          throw new IOException(\"Native WSCE libraries are required for deleteFile\");\n        }\n        return elevatedDeletePathImpl(path.toString(), false);\n      }\n      public static boolean deleteDirectory(Path path) throws IOException {\n        if (!nativeLoaded) {\n          throw new IOException(\"Native WSCE libraries are required for deleteDirectory\");\n        }\n        return elevatedDeletePathImpl(path.toString(), true);\n      }\n      public native static boolean elevatedDeletePathImpl(String path, \n          boolean isDir) throws IOException;\n    }\n    /**\n     * Wraps a process started by the winutils service helper.\n     *\n     */\n    public static class WinutilsProcessStub extends Process {\n      private final long hProcess;\n      private final long hThread;\n      private boolean disposed = false;\n      private final InputStream stdErr;\n      private final InputStream stdOut;\n      private final OutputStream stdIn;\n      public WinutilsProcessStub(long hProcess, long hThread, long hStdIn, \n          long hStdOut, long hStdErr) {\n        this.hProcess = hProcess;\n        this.hThread = hThread;\n        this.stdIn = new FileOutputStream(getFileDescriptorFromHandle(hStdIn));\n        this.stdOut = new FileInputStream(getFileDescriptorFromHandle(hStdOut));\n        this.stdErr = new FileInputStream(getFileDescriptorFromHandle(hStdErr));\n      }\n      public static native FileDescriptor getFileDescriptorFromHandle(long handle);\n      @Override\n      public native void destroy();\n      @Override\n      public native int exitValue();\n      @Override\n      public InputStream getErrorStream() {\n        return stdErr;\n      }\n      @Override\n      public InputStream getInputStream() {\n        return stdOut;\n      }\n      @Override\n      public OutputStream getOutputStream() {\n        return stdIn;\n      }\n      @Override<fim_middle>// class below has no smell\n"}