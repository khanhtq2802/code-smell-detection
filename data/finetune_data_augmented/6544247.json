{"text": "<fim_prefix>\t\tprivate final RuleCall cArrowFunctionTypeExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);\n\t\tprivate final RuleCall cArrayTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);\n\t\tprivate final RuleCall cTypeRefWithModifiersParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);\n\t\tprivate final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);\n\t\tprivate final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);\n\t\tprivate final RuleCall cTypeRefParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);\n\t\tprivate final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);\n\t\t//PrimaryTypeExpression TypeRef:\n\t\t//\tArrowFunctionTypeExpression\n\t\t//\t| ArrayTypeRef\n\t\t//\t| TypeRefWithModifiers\n\t\t//\t| \"(\" TypeRef \")\";\n\t\t@Override public ParserRule getRule() { return rule; }\n\t\t//ArrowFunctionTypeExpression | ArrayTypeRef | TypeRefWithModifiers | \"(\" TypeRef \")\"\n\t\tpublic Alternatives getAlternatives() { return cAlternatives; }\n\t\t//ArrowFunctionTypeExpression\n\t\tpublic RuleCall getArrowFunctionTypeExpressionParserRuleCall_0() { return cArrowFunctionTypeExpressionParserRuleCall_0; }\n\t\t//ArrayTypeRef\n\t\tpublic RuleCall getArrayTypeRefParserRuleCall_1() { return cArrayTypeRefParserRuleCall_1; }\n\t\t//TypeRefWithModifiers\n\t\tpublic RuleCall getTypeRefWithModifiersParserRuleCall_2() { return cTypeRefWithModifiersParserRuleCall_2; }\n\t\t//\"(\" TypeRef \")\"\n\t\tpublic Group getGroup_3() { return cGroup_3; }\n\t\t//\"(\"\n\t\tpublic Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }\n\t\t//TypeRef\n\t\tpublic RuleCall getTypeRefParserRuleCall_3_1() { return cTypeRefParserRuleCall_3_1; }\n\t\t//\")\"\n\t\tpublic Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }\n\t}\n\tpublic class TypeRefWithModifiersElements extends AbstractParserRuleElementFinder {\n\t\tprivate final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), \"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers\");\n\t\tprivate final Group cGroup = (Group)rule.eContents().get(1);\n\t\tprivate final RuleCall cTypeRefWithoutModifiersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);\n\t\tprivate final Assignment cFollowedByQuestionMarkAssignment_1 = (Assignment)cGroup.eContents().get(1);\n\t\tprivate final Keyword cFollowedByQuestionMarkQuestionMarkKeyword_1_0 = (Keyword)cFollowedByQuestionMarkAssignment_1.eContents().get(0);\n\t\t//TypeRefWithModifiers StaticBaseTypeRef:\n\t\t//\tTypeRefWithoutModifiers => followedByQuestionMark?='?'?;\n\t\t@Override public ParserRule getRule() { return rule; }\n\t\t//TypeRefWithoutModifiers => followedByQuestionMark?='?'?\n\t\tpublic Group getGroup() { return cGroup; }\n\t\t//TypeRefWithoutModifiers\n\t\tpublic RuleCall getTypeRefWithoutModifiersParserRuleCall_0() { return cTypeRefWithoutModifiersParserRuleCall_0; }\n\t\t//=> followedByQuestionMark?='?'?\n\t\tpublic Assignment getFollowedByQuestionMarkAssignment_1() { return cFollowedByQuestionMarkAssignment_1; }\n\t\t//'?'\n\t\tpublic Keyword getFollowedByQuestionMarkQuestionMarkKeyword_1_0() { return cFollowedByQuestionMarkQuestionMarkKeyword_1_0; }\n\t}\n<fim_suffix>\tpublic class TypeRefWithoutModifiersElements extends AbstractParserRuleElementFinder {\n\t\tprivate final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), \"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithoutModifiers\");\n\t\tprivate final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);\n\t\tprivate final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);\n\t\tprivate final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);\n\t\tprivate final RuleCall cParameterizedTypeRefParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);\n\t\tprivate final RuleCall cThisTypeRefParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);\n\t\tprivate final Assignment cDynamicAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);\n\t\tprivate final Keyword cDynamicPlusSignKeyword_0_1_0 = (Keyword)cDynamicAssignment_0_1.eContents().get(0);\n\t\tprivate final RuleCall cTypeTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);\n\t\tprivate final RuleCall cFunctionTypeExpressionOLDParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);\n\t\tprivate final RuleCall cUnionTypeExpressionOLDParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);\n\t\tprivate final RuleCall cIntersectionTypeExpressionOLDParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);\n\t\t//TypeRefWithoutModifiers StaticBaseTypeRef:\n\t\t//\t(ParameterizedTypeRef | ThisTypeRef) => dynamic?='+'? | TypeTypeRef\n\t\t//\t| FunctionTypeExpressionOLD\n\t\t//\t| UnionTypeExpressionOLD\n\t\t//\t| IntersectionTypeExpressionOLD;\n\t\t@Override public ParserRule getRule() { return rule; }\n\t\t//(ParameterizedTypeRef | ThisTypeRef) => dynamic?='+'? | TypeTypeRef | FunctionTypeExpressionOLD | UnionTypeExpressionOLD\n\t\t//| IntersectionTypeExpressionOLD\n\t\tpublic Alternatives getAlternatives() { return cAlternatives; }\n\t\t//(ParameterizedTypeRef | ThisTypeRef) => dynamic?='+'?\n\t\tpublic Group getGroup_0() { return cGroup_0; }\n\t\t//ParameterizedTypeRef | ThisTypeRef\n\t\tpublic Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }\n\t\t//ParameterizedTypeRef\n\t\tpublic RuleCall getParameterizedTypeRefParserRuleCall_0_0_0() { return cParameterizedTypeRefParserRuleCall_0_0_0; }\n\t\t//ThisTypeRef\n\t\tpublic RuleCall getThisTypeRefParserRuleCall_0_0_1() { return cThisTypeRefParserRuleCall_0_0_1; }\n\t\t//=> dynamic?='+'?\n\t\tpublic Assignment getDynamicAssignment_0_1() { return cDynamicAssignment_0_1; }\n\t\t//'+'\n\t\tpublic Keyword getDynamicPlusSignKeyword_0_1_0() { return cDynamicPlusSignKeyword_0_1_0; }\n\t\t//TypeTypeRef\n\t\tpublic RuleCall getTypeTypeRefParserRuleCall_1() { return cTypeTypeRefParserRuleCall_1; }\n\t\t//FunctionTypeExpressionOLD\n\t\tpublic RuleCall getFunctionTypeExpressionOLDParserRuleCall_2() { return cFunctionTypeExpressionOLDParserRuleCall_2; }\n\t\t//UnionTypeExpressionOLD\n\t\tpublic RuleCall getUnionTypeExpressionOLDParserRuleCall_3() { return cUnionTypeExpressionOLDParserRuleCall_3; }\n\t\t//IntersectionTypeExpressionOLD\n\t\tpublic RuleCall getIntersectionTypeExpressionOLDParserRuleCall_4() { return cIntersectionTypeExpressionOLDParserRuleCall_4; }\n\t}<fim_middle>// class below is data class\n"}