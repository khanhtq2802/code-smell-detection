{"text": "<fim_prefix>\n<fim_suffix>public class DataSourceLoginService extends AbstractLoginService\n{\n    private static final Logger LOG = Log.getLogger(DataSourceLoginService.class);\n    private String _jndiName = \"javax.sql.DataSource/default\";\n    private DataSource _datasource;\n    private Server _server;\n    private String _userTableName = \"users\";\n    private String _userTableKey = \"id\";\n    private String _userTableUserField = \"username\";\n    private String _userTablePasswordField = \"pwd\";\n    private String _roleTableName = \"roles\";\n    private String _roleTableKey = \"id\";\n    private String _roleTableRoleField = \"role\";\n    private String _userRoleTableName = \"user_roles\";\n    private String _userRoleTableUserKey = \"user_id\";\n    private String _userRoleTableRoleKey = \"role_id\";\n    private String _userSql;\n    private String _roleSql;\n    private boolean _createTables = false;\n    /**\n     * DBUser\n     */\n    public class DBUserPrincipal extends UserPrincipal\n    {\n        private int _key;\n        public DBUserPrincipal(String name, Credential credential, int key)\n        {\n            super(name, credential);\n            _key = key;\n        }\n        public int getKey ()\n        {\n            return _key;\n        }\n    }\n    /* ------------------------------------------------------------ */\n    public DataSourceLoginService()\n    {\n    }\n    /* ------------------------------------------------------------ */\n    public DataSourceLoginService(String name)\n    {\n        setName(name);\n    }\n    /* ------------------------------------------------------------ */\n    public DataSourceLoginService(String name, IdentityService identityService)\n    {\n        setName(name);\n        setIdentityService(identityService);\n    }\n    /* ------------------------------------------------------------ */\n    public void setJndiName (String jndi)\n    {\n        _jndiName = jndi;\n    }\n    /* ------------------------------------------------------------ */\n    public String getJndiName ()\n    {\n        return _jndiName;\n    }\n    /* ------------------------------------------------------------ */\n    public void setServer (Server server)\n    {\n        _server=server;\n    }\n    /* ------------------------------------------------------------ */\n    public Server getServer()\n    {\n        return _server;\n    }\n    /* ------------------------------------------------------------ */\n    public void setCreateTables(boolean createTables)\n    {\n        _createTables = createTables;\n    }\n    /* ------------------------------------------------------------ */\n    public boolean getCreateTables()\n    {\n        return _createTables;\n    }\n    /* ------------------------------------------------------------ */\n    public void setUserTableName (String name)\n    {\n        _userTableName=name;\n    }\n    /* ------------------------------------------------------------ */\n    public String getUserTableName()\n    {\n        return _userTableName;\n    }\n    /* ------------------------------------------------------------ */\n    public String getUserTableKey()\n    {\n        return _userTableKey;\n    }\n    /* ------------------------------------------------------------ */\n    public void setUserTableKey(String tableKey)\n    {\n        _userTableKey = tableKey;\n    }\n    /* ------------------------------------------------------------ */\n    public String getUserTableUserField()\n    {\n        return _userTableUserField;\n    }\n    /* ------------------------------------------------------------ */\n    public void setUserTableUserField(String tableUserField)\n    {\n        _userTableUserField = tableUserField;\n    }\n    /* ------------------------------------------------------------ */\n    public String getUserTablePasswordField()\n    {\n        return _userTablePasswordField;\n    }\n    /* ------------------------------------------------------------ */\n    public void setUserTablePasswordField(String tablePasswordField)\n    {\n        _userTablePasswordField = tablePasswordField;\n    }\n    /* ------------------------------------------------------------ */\n    public String getRoleTableName()\n    {\n        return _roleTableName;\n    }\n    /* ------------------------------------------------------------ */\n    public void setRoleTableName(String tableName)\n    {\n        _roleTableName = tableName;\n    }\n    /* ------------------------------------------------------------ */\n    public String getRoleTableKey()\n    {\n        return _roleTableKey;\n    }\n    /* ------------------------------------------------------------ */\n    public void setRoleTableKey(String tableKey)\n    {\n        _roleTableKey = tableKey;\n    }\n    /* ------------------------------------------------------------ */\n    public String getRoleTableRoleField()\n    {\n        return _roleTableRoleField;\n    }\n    /* ------------------------------------------------------------ */\n    public void setRoleTableRoleField(String tableRoleField)\n    {\n        _roleTableRoleField = tableRoleField;\n    }\n    /* ------------------------------------------------------------ */\n    public String getUserRoleTableName()\n    {\n        return _userRoleTableName;\n    }\n    /* ------------------------------------------------------------ */\n    public void setUserRoleTableName(String roleTableName)\n    {\n        _userRoleTableName = roleTableName;\n    }\n    /* ------------------------------------------------------------ */\n    public String getUserRoleTableUserKey()\n    {\n        return _userRoleTableUserKey;\n    }\n    /* ------------------------------------------------------------ */\n    public void setUserRoleTableUserKey(String roleTableUserKey)\n    {\n        _userRoleTableUserKey = roleTableUserKey;\n    }\n    /* ------------------------------------------------------------ */\n    public String getUserRoleTableRoleKey()\n    {\n        return _userRoleTableRoleKey;\n    }\n    /* ------------------------------------------------------------ */\n    public void setUserRoleTableRoleKey(String roleTableRoleKey)\n    {\n        _userRoleTableRoleKey = roleTableRoleKey;\n    }\n    /* ------------------------------------------------------------ */\n    @Override\n    public UserPrincipal loadUserInfo (String username)\n    {\n        try\n        {\n            try (Connection connection = getConnection();\n                    PreparedStatement statement1 = connection.prepareStatement(_userSql))\n            {\n                statement1.setObject(1, username);\n                try (ResultSet rs1 = statement1.executeQuery())\n                {\n                    if (rs1.next())\n                    {\n                        int key = rs1.getInt(_userTableKey);\n                        String credentials = rs1.getString(_userTablePasswordField);\n                        return new DBUserPrincipal(username, Credential.getCredential(credentials), key);\n                    }\n                }\n            }\n        }\n        catch (NamingException e)\n        {\n            LOG.warn(\"No datasource for \"+_jndiName, e);\n        }\n        catch (SQLException e)\n        {\n            LOG.warn(\"Problem loading user info for \"+username, e);\n        }\n        return null;\n    }\n    /* ------------------------------------------------------------ */\n    @Override\n    public String[] loadRoleInfo (UserPrincipal user)\n    {\n        DBUserPrincipal dbuser = (DBUserPrincipal)user;\n        try\n        {\n            try (Connection connection = getConnection();\n                    PreparedStatement statement2 = connection.prepareStatement(_roleSql))\n            {\n                List<String> roles = new ArrayList<String>();\n                statement2.setInt(1, dbuser.getKey());\n                try (ResultSet rs2 = statement2.executeQuery())\n                {\n                    while (rs2.next())\n                    {\n                        roles.add(rs2.getString(_roleTableRoleField));\n                    }\n                    return roles.toArray(new String[roles.size()]);\n                }\n            }\n        }\n        catch (NamingException e)\n        {\n            LOG.warn(\"No datasource for \"+_jndiName, e);\n        }\n        catch (SQLException e)\n        {\n            LOG.warn(\"Problem loading user info for \"+user.getName(), e);\n        }\n        return null;\n    }\n    /* ------------------------------------------------------------ */\n    /**\n     * Lookup the datasource for the jndiName and formulate the\n     * necessary sql query strings based on the configured table\n     * and column names.\n     *\n     * @throws NamingException if unable to init jndi\n     * @throws SQLException if unable to init database\n     */\n    public void initDb() throws NamingException, SQLException\n    {\n        if (_datasource != null)\n            return;\n        @SuppressWarnings(\"unused\")\n        InitialContext ic = new InitialContext();\n        assert ic!=null;\n        // TODO Should we try webapp scope too?\n        // try finding the datasource in the Server scope\n        if (_server != null)\n        {\n            try\n            {\n                _datasource = (DataSource)NamingEntryUtil.lookup(_server, _jndiName);\n            }\n            catch (NameNotFoundException e)\n            {\n                //next try the jvm scope\n            }\n        }\n        //try finding the datasource in the jvm scope\n        if (_datasource==null)\n        {\n            _datasource = (DataSource)NamingEntryUtil.lookup(null, _jndiName);\n        }\n        // set up the select statements based on the table and column names configured\n        _userSql = \"select \" + _userTableKey + \",\" + _userTablePasswordField\n                  + \" from \" + _userTableName\n                  + \" where \"+ _userTableUserField + \" = ?\";\n        _roleSql = \"select r.\" + _roleTableRoleField\n                  + \" from \" + _roleTableName + \" r, \" + _userRoleTableName\n                  + \" u where u.\"+ _userRoleTableUserKey + \" = ?\"\n                  + \" and r.\" + _roleTableKey + \" = u.\" + _userRoleTableRoleKey;\n        prepareTables();\n    }\n    /* ------------------------------------------------------------ */\n    /**\n     * @throws NamingException\n     * @throws SQLException\n     */\n    private void prepareTables()\n    throws NamingException, SQLException\n    {\n        if (_createTables)\n        {\n            boolean autocommit = true;\n            Connection connection = getConnection();\n            try (Statement stmt = connection.createStatement())\n            {\n                autocommit = connection.getAutoCommit();\n                connection.setAutoCommit(false);\n                DatabaseMetaData metaData = connection.getMetaData();\n                //check if tables exist\n                String tableName = (metaData.storesLowerCaseIdentifiers()? _userTableName.toLowerCase(Locale.ENGLISH): (metaData.storesUpperCaseIdentifiers()?_userTableName.toUpperCase(Locale.ENGLISH): _userTableName));\n                try (ResultSet result = metaData.getTables(null, null, tableName, null))\n                {\n                    if (!result.next())\n                    {\n                        //user table default\n                        /*\n                         * create table _userTableName (_userTableKey integer,<fim_middle>// class below is blob and data class\n"}