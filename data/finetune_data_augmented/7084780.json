{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the  \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * $Id: AttList.java 468655 2006-10-28 07:12:06Z minchau $\n */\npackage org.apache.xml.utils;\n\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\n\nimport org.xml.sax.Attributes;\n\n/**\n * Wraps a DOM attribute list in a SAX Attributes.\n * @xsl.usage internal\n */\n<fim_suffix>public class AttList implements Attributes\n{\n\n  /** List of attribute nodes          */\n  NamedNodeMap m_attrs;\n\n  /** Index of last attribute node          */\n  int m_lastIndex;\n\n  // ARGHH!!  JAXP Uses Xerces without setting the namespace processing to ON!\n  // DOM2Helper m_dh = new DOM2Helper();\n\n  /** Local reference to DOMHelper          */\n  DOMHelper m_dh;\n\n//  /**\n//   * Constructor AttList\n//   *\n//   *\n//   * @param attrs List of attributes this will contain\n//   */\n//  public AttList(NamedNodeMap attrs)\n//  {\n//\n//    m_attrs = attrs;\n//    m_lastIndex = m_attrs.getLength() - 1;\n//    m_dh = new DOM2Helper();\n//  }\n\n  /**\n   * Constructor AttList\n   *\n   *\n   * @param attrs List of attributes this will contain\n   * @param dh DOMHelper \n   */\n  public AttList(NamedNodeMap attrs, DOMHelper dh)\n  {\n\n    m_attrs = attrs;\n    m_lastIndex = m_attrs.getLength() - 1;\n    m_dh = dh;\n  }\n\n  /**\n   * Get the number of attribute nodes in the list \n   *\n   *\n   * @return number of attribute nodes\n   */\n  public int getLength()\n  {\n    return m_attrs.getLength();\n  }\n\n  /**\n   * Look up an attribute's Namespace URI by index.\n   *\n   * @param index The attribute index (zero-based).\n   * @return The Namespace URI, or the empty string if none\n   *         is available, or null if the index is out of\n   *         range.\n   */\n  public String getURI(int index)\n  {\n    String ns = m_dh.getNamespaceOfNode(((Attr) m_attrs.item(index)));\n    if(null == ns)\n      ns = \"\";\n    return ns;\n  }\n\n  /**\n   * Look up an attribute's local name by index.\n   *\n   * @param index The attribute index (zero-based).\n   * @return The local name, or the empty string if Namespace\n   *         processing is not being performed, or null\n   *         if the index is out of range.\n   */\n  public String getLocalName(int index)\n  {\n    return m_dh.getLocalNameOfNode(((Attr) m_attrs.item(index)));\n  }\n\n  /**\n   * Look up an attribute's qualified name by index.\n   *\n   *\n   * @param i The attribute index (zero-based).\n   *\n   * @return The attribute's qualified name\n   */\n  public String getQName(int i)\n  {\n    return ((Attr) m_attrs.item(i)).getName();\n  }\n\n  /**\n   * Get the attribute's node type by index\n   *\n   *\n   * @param i The attribute index (zero-based)\n   *\n   * @return the attribute's node type\n   */\n  public String getType(int i)\n  {\n    return \"CDATA\";  // for the moment\n  }\n\n  /**\n   * Get the attribute's node value by index\n   *\n   *\n   * @param i The attribute index (zero-based)\n   *\n   * @return the attribute's node value\n   */\n  public String getValue(int i)\n  {\n    return ((Attr) m_attrs.item(i)).getValue();\n  }\n\n  /**\n   * Get the attribute's node type by name\n   *\n   *\n   * @param name Attribute name\n   *\n   * @return the attribute's node type\n   */\n  public String getType(String name)\n  {\n    return \"CDATA\";  // for the moment\n  }\n\n  /**\n   * Look up an attribute's type by Namespace name.\n   *\n   * @param uri The Namespace URI, or the empty String if the\n   *        name has no Namespace URI.\n   * @param localName The local name of the attribute.\n   * @return The attribute type as a string, or null if the\n   *         attribute is not in the list or if Namespace\n   *         processing is not being performed.\n   */\n  public String getType(String uri, String localName)\n  {\n    return \"CDATA\";  // for the moment\n  }\n\n  /**\n   * Look up an attribute's value by name.\n   *\n   *\n   * @param name The attribute node's name\n   *\n   * @return The attribute node's value\n   */\n  public String getValue(String name)\n  {\n    Attr attr = ((Attr) m_attrs.getNamedItem(name));\n    return (null != attr) \n          ? attr.getValue() : null;\n  }\n\n  /**\n   * Look up an attribute's value by Namespace name.\n   *\n   * @param uri The Namespace URI, or the empty String if the\n   *        name has no Namespace URI.\n   * @param localName The local name of the attribute.\n   * @return The attribute value as a string, or null if the\n   *         attribute is not in the list.\n   */\n  public String getValue(String uri, String localName)\n  {\n\t\tNode a=m_attrs.getNamedItemNS(uri,localName);\n\t\treturn (a==null) ? null : a.getNodeValue();\n  }\n\n  /**\n   * Look up the index of an attribute by Namespace name.\n   *\n   * @param uri The Namespace URI, or the empty string if\n   *        the name has no Namespace URI.\n   * @param localPart The attribute's local name.\n   * @return The index of the attribute, or -1 if it does not\n   *         appear in the list.\n   */\n  public int getIndex(String uri, String localPart)\n  {\n    for(int i=m_attrs.getLength()-1;i>=0;--i)\n    {\n      Node a=m_attrs.item(i);\n      String u=a.getNamespaceURI();\n      if( (u==null ? uri==null : u.equals(uri))\n\t  &&\n\t  a.getLocalName().equals(localPart) )\n\treturn i;\n    }\n    return -1;\n  }\n\n  /**\n   * Look up the index of an attribute by raw XML 1.0 name.\n   *\n   * @param qName The qualified (prefixed) name.\n   * @return The index of the attribute, or -1 if it does not\n   *         appear in the list.\n   */\n  public int getIndex(String qName)\n  {\n    for(int i=m_attrs.getLength()-1;i>=0;--i)\n    {\n      Node a=m_attrs.item(i);\n      if(a.getNodeName().equals(qName) )\n\treturn i;\n    }\n    return -1;\n  }\n}\n<fim_middle>// class below has no smell\n"}