{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\npackage org.apache.tools.zip;\n\nimport java.io.Serializable;\nimport java.util.zip.ZipException;\n\n/**\n * Exception thrown when attempting to read or write data for a zip\n * entry that uses ZIP features not supported by this library.\n * @since Ant 1.9.0\n */\n<fim_suffix>public class UnsupportedZipFeatureException extends ZipException {\n\n    private final Feature reason;\n    private final transient ZipEntry entry;\n    private static final long serialVersionUID = 20161221L;\n\n    /**\n     * Creates an exception.\n     * @param reason the feature that is not supported\n     * @param entry the entry using the feature\n     */\n    public UnsupportedZipFeatureException(Feature reason,\n                                          ZipEntry entry) {\n        super(\"unsupported feature \" + reason +  \" used in entry \"\n              + entry.getName());\n        this.reason = reason;\n        this.entry = entry;\n    }\n\n    /**\n     * The unsupported feature that has been used.\n     *\n     * @return Feature\n     */\n    public Feature getFeature() {\n        return reason;\n    }\n\n    /**\n     * The entry using the unsupported feature.\n     *\n     * @return ZipEntry\n     */\n    public ZipEntry getEntry() {\n        return entry;\n    }\n\n    /**\n     * ZIP Features that may or may not be supported.\n     */\n    @SuppressWarnings(\"serial\")\n    public static class Feature implements Serializable {\n        /**\n         * The entry is encrypted.\n         */\n        public static final Feature ENCRYPTION = new Feature(\"encryption\");\n        /**\n         * The entry used an unsupported compression method.\n         */\n        public static final Feature METHOD = new Feature(\"compression method\");\n        /**\n         * The entry uses a data descriptor.\n         */\n        public static final Feature DATA_DESCRIPTOR = new Feature(\"data descriptor\");\n\n        private final String name;\n\n        private Feature(String name) {\n            this.name = name;\n        }\n\n        @Override\n        public String toString() {\n            return name;\n        }\n    }\n}<fim_middle>// class below has no smell\n"}