{"text": "<fim_prefix>  /**\n   * Module open. See {@link org.apache.tapestry5.internal.plastic.asm.ModuleVisitor#visitOpen}.\n   *\n   * @param packaze the internal name of the opened package.\n   * @param access the access flag of the opened package, valid values are among {@code\n   *     ACC_SYNTHETIC} and {@code ACC_MANDATED}.\n   * @param modules the fully qualified names (using dots) of the modules that can use deep\n   *     reflection to the classes of the open package, or {@literal null}.\n   */\n  public void visitOpen(final String packaze, final int access, final String... modules) {\n    throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n  }\n  /**\n   * Module use. See {@link org.apache.tapestry5.internal.plastic.asm.ModuleVisitor#visitUse}.\n   *\n   * @param service the internal name of the service.\n   */\n  public void visitUse(final String service) {\n    throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n  }\n  /**\n   * Module provide. See {@link org.apache.tapestry5.internal.plastic.asm.ModuleVisitor#visitProvide}.\n   *\n   * @param service the internal name of the service.\n   * @param providers the internal names of the implementations of the service (there is at least\n   *     one provider).\n   */\n  public void visitProvide(final String service, final String... providers) {\n    throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n  }\n  /** Module end. See {@link org.apache.tapestry5.internal.plastic.asm.ModuleVisitor#visitEnd}. */\n  public void visitModuleEnd() {\n    throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n  }\n  // -----------------------------------------------------------------------------------------------\n  // Annotations\n  // -----------------------------------------------------------------------------------------------\n  /**\n   * Annotation value. See {@link org.apache.tapestry5.internal.plastic.asm.AnnotationVisitor#visit}.\n   *\n   * @param name the value name.\n   * @param value the actual value, whose type must be {@link Byte}, {@link Boolean}, {@link\n   *     Character}, {@link Short}, {@link Integer} , {@link Long}, {@link Float}, {@link Double},\n   *     {@link String} or {@link org.apache.tapestry5.internal.plastic.asm.Type} of {@link org.apache.tapestry5.internal.plastic.asm.Type#OBJECT}\n   *     or {@link org.apache.tapestry5.internal.plastic.asm.Type#ARRAY} sort. This value can also be an array of byte,\n   *     boolean, short, char, int, long, float or double values (this is equivalent to using {@link\n   *     #visitArray} and visiting each array element in turn, but is more convenient).\n   */\n  // DontCheck(OverloadMethodsDeclarationOrder): overloads are semantically different.\n  public abstract void visit(String name, Object value);\n  /**\n   * Annotation enum value. See {@link org.apache.tapestry5.internal.plastic.asm.AnnotationVisitor#visitEnum}.\n   *\n   * @param name the value name.\n   * @param descriptor the class descriptor of the enumeration class.\n   * @param value the actual enumeration value.\n   */\n  public abstract void visitEnum(String name, String descriptor, String value);\n  /**\n   * Nested annotation value. See {@link org.apache.tapestry5.internal.plastic.asm.AnnotationVisitor#visitAnnotation}.\n   *\n   * @param name the value name.\n   * @param descriptor the class descriptor of the nested annotation class.\n   * @return the printer.\n   */\n  public abstract Printer visitAnnotation(String name, String descriptor);\n  /**\n   * Annotation array value. See {@link org.apache.tapestry5.internal.plastic.asm.AnnotationVisitor#visitArray}.\n   *\n   * @param name the value name.\n   * @return the printer.\n   */\n  public abstract Printer visitArray(String name);\n  /** Annotation end. See {@link org.apache.tapestry5.internal.plastic.asm.AnnotationVisitor#visitEnd}. */\n  public abstract void visitAnnotationEnd();\n  // -----------------------------------------------------------------------------------------------\n  // Fields\n  // -----------------------------------------------------------------------------------------------\n  /**\n   * Field annotation. See {@link org.apache.tapestry5.internal.plastic.asm.FieldVisitor#visitAnnotation}.\n   *\n   * @param descriptor the class descriptor of the annotation class.\n   * @param visible {@literal true} if the annotation is visible at runtime.\n   * @return the printer.\n   */\n  public abstract Printer visitFieldAnnotation(String descriptor, boolean visible);\n  /**\n   * Field type annotation. See {@link org.apache.tapestry5.internal.plastic.asm.FieldVisitor#visitTypeAnnotation}.\n   *\n   * @param typeRef a reference to the annotated type. The sort of this type reference must be\n   *     {@link org.apache.tapestry5.internal.plastic.asm.TypeReference#FIELD}. See {@link org.apache.tapestry5.internal.plastic.asm.TypeReference}.\n   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n   *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n   *     'typeRef' as a whole.\n   * @param descriptor the class descriptor of the annotation class.\n   * @param visible {@literal true} if the annotation is visible at runtime.\n   * @return the printer.\n   */\n  public Printer visitFieldTypeAnnotation(\n      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n    throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n  }\n  /**\n   * Field attribute. See {@link org.apache.tapestry5.internal.plastic.asm.FieldVisitor#visitAttribute}.\n   *\n   * @param attribute an attribute.\n   */\n  public abstract void visitFieldAttribute(Attribute attribute);\n  /** Field end. See {@link org.apache.tapestry5.internal.plastic.asm.FieldVisitor#visitEnd}. */\n  public abstract void visitFieldEnd();\n  // -----------------------------------------------------------------------------------------------\n  // Methods\n  // -----------------------------------------------------------------------------------------------\n  /**\n   * Method parameter. See {@link org.apache.tapestry5.internal.plastic.asm.MethodVisitor#visitParameter(String, int)}.\n   *\n   * @param name parameter name or null if none is provided.\n   * @param access the parameter's access flags, only {@code ACC_FINAL}, {@code ACC_SYNTHETIC}\n   *     or/and {@code ACC_MANDATED} are allowed (see {@link Opcodes}).\n   */\n  public void visitParameter(final String name, final int access) {\n    throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n  }\n  /**\n   * Method default annotation. See {@link org.apache.tapestry5.internal.plastic.asm.MethodVisitor#visitAnnotationDefault}.\n   *\n   * @return the printer.\n   */\n  public abstract Printer visitAnnotationDefault();\n  /**\n   * Method annotation. See {@link org.apache.tapestry5.internal.plastic.asm.MethodVisitor#visitAnnotation}.\n   *\n   * @param descriptor the class descriptor of the annotation class.\n   * @param visible {@literal true} if the annotation is visible at runtime.\n   * @return the printer.\n   */\n  public abstract Printer visitMethodAnnotation(String descriptor, boolean visible);\n  /**\n   * Method type annotation. See {@link org.apache.tapestry5.internal.plastic.asm.MethodVisitor#visitTypeAnnotation}.\n   *\n   * @param typeRef a reference to the annotated type. The sort of this type reference must be\n   *     {@link org.apache.tapestry5.internal.plastic.asm.TypeReference#METHOD_TYPE_PARAMETER}, {@link\n   *     org.apache.tapestry5.internal.plastic.asm.TypeReference#METHOD_TYPE_PARAMETER_BOUND}, {@link\n   *     org.apache.tapestry5.internal.plastic.asm.TypeReference#METHOD_RETURN}, {@link\n   *     org.apache.tapestry5.internal.plastic.asm.TypeReference#METHOD_RECEIVER}, {@link\n   *     org.apache.tapestry5.internal.plastic.asm.TypeReference#METHOD_FORMAL_PARAMETER} or {@link\n   *     org.apache.tapestry5.internal.plastic.asm.TypeReference#THROWS}. See {@link org.apache.tapestry5.internal.plastic.asm.TypeReference}.\n   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n   *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n   *     'typeRef' as a whole.\n   * @param descriptor the class descriptor of the annotation class.\n   * @param visible {@literal true} if the annotation is visible at runtime.\n   * @return the printer.\n   */\n<fim_suffix>  public Printer visitMethodTypeAnnotation(\n      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n    throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n  }<fim_middle>// function below has no smell\n"}