{"text": "<fim_prefix>/**\n * This is a parser for the area tree XML (intermediate format) which is used to reread an area\n * tree (or part of it) into memory again for rendering to the final output format.\n */\npublic class AreaTreeParser {\n    /** Logger instance */\n    protected static final Log log = LogFactory.getLog(AreaTreeParser.class);\n    private static SAXTransformerFactory tFactory\n        = (SAXTransformerFactory)SAXTransformerFactory.newInstance();\n    /**\n     * Parses an intermediate file (area tree XML) into an AreaTreeModel instance by adding\n     * pages to it.\n     * @param src the Source instance pointing to the intermediate file\n     * @param treeModel the AreaTreeModel that the parsed pages are added to\n     * @param userAgent the user agent\n     * @throws TransformerException if an error occurs while parsing the area tree XML\n     */\n    public void parse(Source src, AreaTreeModel treeModel, FOUserAgent userAgent)\n            throws TransformerException {\n        Transformer transformer = tFactory.newTransformer();\n        transformer.setErrorListener(new DefaultErrorListener(log));\n        SAXResult res = new SAXResult(getContentHandler(treeModel, userAgent));\n        transformer.transform(src, res);\n    }\n    /**\n     * Creates a new ContentHandler instance that you can send the area tree XML to. The parsed\n     * pages are added to the AreaTreeModel instance you pass in as a parameter.\n     * @param treeModel the AreaTreeModel that the parsed pages are added to\n     * @param userAgent the user agent\n     * @return the ContentHandler instance to receive the SAX stream from the area tree XML\n     */\n    public ContentHandler getContentHandler(AreaTreeModel treeModel, FOUserAgent userAgent) {\n        ElementMappingRegistry elementMappingRegistry\n            = userAgent.getElementMappingRegistry();\n        return new Handler(treeModel, userAgent, elementMappingRegistry);\n    }\n    private static class Handler extends DefaultHandler {\n        private Map<String, AbstractMaker> makers = new java.util.HashMap<String, AbstractMaker>();\n        private AreaTreeModel treeModel;\n        private FOUserAgent userAgent;\n        private ElementMappingRegistry elementMappingRegistry;\n        private Attributes lastAttributes;\n        private CharBuffer content = CharBuffer.allocate(64);\n        private boolean ignoreCharacters = true;\n        private PageViewport currentPageViewport;\n        private Map<String, PageViewport> pageViewportsByKey\n                = new java.util.HashMap<String, PageViewport>();\n        // set of \"ID firsts\" that have already been assigned to a PV:\n        private Set<String> idFirstsAssigned = new java.util.HashSet<String>();\n        private Stack<Object> areaStack = new Stack<Object>();\n        private boolean firstFlow;\n        private Stack<String> delegateStack = new Stack<String>();\n        private ContentHandler delegate;\n        private DOMImplementation domImplementation;\n        private Locator locator;\n        public Handler(AreaTreeModel treeModel, FOUserAgent userAgent,\n                ElementMappingRegistry elementMappingRegistry) {\n            this.treeModel = treeModel;\n            this.userAgent = userAgent;\n            this.elementMappingRegistry = elementMappingRegistry;\n            makers.put(\"areaTree\", new AreaTreeMaker());\n            makers.put(\"page\", new PageMaker());\n            makers.put(\"pageSequence\", new PageSequenceMaker());\n            makers.put(\"title\", new TitleMaker());\n            makers.put(\"pageViewport\", new PageViewportMaker());\n            makers.put(\"regionViewport\", new RegionViewportMaker());\n            makers.put(\"regionBefore\", new RegionBeforeMaker());\n            makers.put(\"regionAfter\", new RegionAfterMaker());\n            makers.put(\"regionStart\", new RegionStartMaker());\n            makers.put(\"regionEnd\", new RegionEndMaker());\n            makers.put(\"regionBody\", new RegionBodyMaker());\n            makers.put(\"flow\", new FlowMaker());\n            makers.put(\"mainReference\", new MainReferenceMaker());\n            makers.put(\"span\", new SpanMaker());\n            makers.put(\"footnote\", new FootnoteMaker());\n            makers.put(\"beforeFloat\", new BeforeFloatMaker());\n            makers.put(\"block\", new BlockMaker());\n            makers.put(\"lineArea\", new LineAreaMaker());\n            makers.put(\"inline\", new InlineMaker());\n            makers.put(\"inlineblock\", new InlineBlockMaker());\n            makers.put(\"inlineparent\", new InlineParentMaker());\n            makers.put(\"inlineblockparent\", new InlineBlockParentMaker());\n            makers.put(\"text\", new TextMaker());\n            makers.put(\"word\", new WordMaker());\n            makers.put(\"space\", new SpaceMaker());\n            makers.put(\"leader\", new LeaderMaker());\n            makers.put(\"viewport\", new InlineViewportMaker());\n            makers.put(\"container\", new ContainerMaker());\n            makers.put(\"image\", new ImageMaker());\n            makers.put(\"foreignObject\", new ForeignObjectMaker());\n            makers.put(\"bookmarkTree\", new BookmarkTreeMaker());\n            makers.put(\"bookmark\", new BookmarkMaker());\n            makers.put(\"destination\", new DestinationMaker());\n        }\n        private Area findAreaType(Class clazz) {\n            if (areaStack.size() > 0) {\n                int pos = areaStack.size() - 1;\n                Object obj = null;\n                while (pos >= 0) {\n                    obj = areaStack.get(pos);\n                    if (clazz.isInstance(obj)) {\n                        break;\n                    } else {\n                        pos--;\n                    }\n                }\n                if (pos >= 0) {\n                    return (Area)obj;\n                }\n            }\n            return null;\n        }\n        private RegionViewport getCurrentRegionViewport() {\n            return (RegionViewport)findAreaType(RegionViewport.class);\n        }\n        private BodyRegion getCurrentBodyRegion() {\n            return (BodyRegion)findAreaType(BodyRegion.class);\n        }\n        private BlockParent getCurrentBlockParent() {\n            return (BlockParent)findAreaType(BlockParent.class);\n        }\n        private AbstractTextArea getCurrentText() {\n            return (AbstractTextArea)findAreaType(AbstractTextArea.class);\n        }\n        private InlineViewport getCurrentViewport() {\n            return (InlineViewport)findAreaType(InlineViewport.class);\n        }\n        /** {@inheritDoc} */\n        public void setDocumentLocator(Locator locator) {\n            this.locator = locator;\n        }\n        private Locator getLocator() {\n            return this.locator;\n        }\n        /** {@inheritDoc} */\n<fim_suffix>        public void startElement(String uri, String localName, String qName, Attributes attributes)\n                    throws SAXException {\n            if (delegate != null) {\n                delegateStack.push(qName);\n                delegate.startElement(uri, localName, qName, attributes);\n            } else if (domImplementation != null) {\n                //domImplementation is set so we need to start a new DOM building sub-process\n                TransformerHandler handler;\n                try {\n                    handler = tFactory.newTransformerHandler();\n                } catch (TransformerConfigurationException e) {\n                    throw new SAXException(\"Error creating a new TransformerHandler\", e);\n                }\n                Document doc = domImplementation.createDocument(uri, qName, null);\n                //It's easier to work with an empty document, so remove the root element\n                doc.removeChild(doc.getDocumentElement());\n                handler.setResult(new DOMResult(doc));\n                Area parent = (Area)areaStack.peek();\n                ((ForeignObject)parent).setDocument(doc);\n                //activate delegate for nested foreign document\n                domImplementation = null; //Not needed anymore now\n                this.delegate = handler;\n                delegateStack.push(qName);\n                delegate.startDocument();\n                delegate.startElement(uri, localName, qName, attributes);\n            } else {\n                boolean handled = true;\n                if (\"\".equals(uri)) {\n                    if (localName.equals(\"structureTree\")) {\n                        /* The area tree parser no longer supports the structure tree. */\n                        delegate = new DefaultHandler();\n                        delegateStack.push(qName);\n                        delegate.startDocument();\n                        delegate.startElement(uri, localName, qName, attributes);\n                    } else {\n                        handled = startAreaTreeElement(localName, attributes);\n                    }\n                } else {\n                    ContentHandlerFactoryRegistry registry\n                            = userAgent.getContentHandlerFactoryRegistry();\n                    ContentHandlerFactory factory = registry.getFactory(uri);\n                    if (factory != null) {\n                        delegate = factory.createContentHandler();\n                        delegateStack.push(qName);\n                        delegate.startDocument();\n                        delegate.startElement(uri, localName, qName, attributes);\n                    } else {\n                        handled = false;\n                    }\n                }\n                if (!handled) {\n                    if (uri == null || uri.length() == 0) {\n                        throw new SAXException(\"Unhandled element \" + localName\n                                + \" in namespace: \" + uri);\n                    } else {\n                        log.warn(\"Unhandled element \" + localName\n                                + \" in namespace: \" + uri);\n                    }\n                }\n            }\n        }<fim_middle>// function below is long method\n"}