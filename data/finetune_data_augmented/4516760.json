{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.felix.resolver.util;\n\nimport java.util.*;\n\n<fim_suffix>public class ArrayMap<K, V> extends AbstractMap<K, V> {\n\n    private Object[] table;\n    private int size;\n    protected transient Collection<V> values;\n\n    public ArrayMap() {\n        this(32);\n    }\n\n    public ArrayMap(int capacity) {\n        table = new Object[capacity * 2];\n        size = 0;\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public V get(Object key) {\n        for (int i = 0, l = size << 1; i < l; i += 2) {\n            if (key.equals(table[i])) {\n                return (V) table[i + 1];\n            }\n        }\n        return null;\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public V put(K key, V value) {\n        for (int i = 0, l = size << 1; i < l; i += 2) {\n            if (key.equals(table[i])) {\n                V old = (V) table[i + 1];\n                table[i + 1] = value;\n                return old;\n            }\n        }\n        if (size * 2 == table.length) {\n            Object[] n = new Object[table.length * 2];\n            System.arraycopy(table, 0, n, 0, table.length);\n            table = n;\n        }\n        int i = size++ << 1;\n        table[i++] = key;\n        table[i] = value;\n        return null;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public V getOrCompute(K key) {\n        for (int i = 0, l = size << 1; i < l; i += 2) {\n            if (key.equals(table[i])) {\n                return (V) table[i + 1];\n            }\n        }\n        V v = compute(key);\n        if (size << 1 == table.length) {\n            Object[] n = new Object[table.length << 1];\n            System.arraycopy(table, 0, n, 0, table.length);\n            table = n;\n        }\n        int i = size++ << 1;\n        table[i++] = key;\n        table[i] = v;\n        return v;\n    }\n\n    protected V compute(K key) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Collection<V> values() {\n        if (values == null) {\n            values = new AbstractCollection<V>() {\n                @Override\n                public Iterator<V> iterator() {\n                    return new Iterator<V>() {\n                        int index = 0;\n\n                        public boolean hasNext() {\n                            return index < size;\n                        }\n\n                        @SuppressWarnings(\"unchecked\")\n                        public V next() {\n                            if (index >= size) {\n                                throw new NoSuchElementException();\n                            }\n                            return (V) table[(index++ << 1) + 1];\n                        }\n                        \n                        public void remove() {\n                            throw new UnsupportedOperationException();\n                        }\n                    };\n                }\n\n                @Override\n                public int size() {\n                    return size;\n                }\n            };\n        }\n        return values;\n    }\n\n    @Override\n    public Set<Entry<K, V>> entrySet() {\n        return new AbstractSet<Entry<K, V>>() {\n            @Override\n            public Iterator<Entry<K, V>> iterator() {\n                return new Iterator<Entry<K, V>>() {\n                    FastEntry<K, V> entry = new FastEntry<K, V>();\n                    int index = 0;\n\n                    public boolean hasNext() {\n                        return index < size;\n                    }\n\n                    @SuppressWarnings(\"unchecked\")\n                    public FastEntry<K, V> next() {\n                        if (index >= size) {\n                            throw new NoSuchElementException();\n                        }\n                        int i = index << 1;\n                        entry.key = (K) table[i];\n                        entry.value = (V) table[i + 1];\n                        index++;\n                        return entry;\n                    }\n\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n\n            @Override\n            public int size() {\n                return size;\n            }\n        };\n    }\n\n    static class FastEntry<K, V> implements Entry<K, V> {\n        K key;\n        V value;\n\n        public K getKey() {\n            return key;\n        }\n\n\n        public V getValue() {\n            return value;\n        }\n\n        public V setValue(V value) {\n            throw new UnsupportedOperationException();\n        }\n    }\n}<fim_middle>// class below has no smell\n"}