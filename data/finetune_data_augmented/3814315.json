{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.artemis.core.protocol.core.impl.wireformat;\n\nimport org.apache.activemq.artemis.api.core.ActiveMQBuffer;\nimport org.apache.activemq.artemis.api.core.TransportConfiguration;\nimport org.apache.activemq.artemis.core.protocol.core.impl.PacketImpl;\n\n<fim_suffix>public class NodeAnnounceMessage extends PacketImpl {\n\n   protected String nodeID;\n\n   protected String backupGroupName;\n\n   protected boolean backup;\n\n   protected long currentEventID;\n\n   protected TransportConfiguration connector;\n\n   protected TransportConfiguration backupConnector;\n\n   private String scaleDownGroupName;\n\n   // Static --------------------------------------------------------\n\n   // Constructors --------------------------------------------------\n\n   public NodeAnnounceMessage(final long currentEventID,\n                              final String nodeID,\n                              final String backupGroupName,\n                              final String scaleDownGroupName,\n                              final boolean backup,\n                              final TransportConfiguration tc,\n                              final TransportConfiguration backupConnector) {\n      super(NODE_ANNOUNCE);\n\n      this.currentEventID = currentEventID;\n\n      this.nodeID = nodeID;\n\n      this.backupGroupName = backupGroupName;\n\n      this.backup = backup;\n\n      this.connector = tc;\n\n      this.backupConnector = backupConnector;\n\n      this.scaleDownGroupName = scaleDownGroupName;\n   }\n\n   public NodeAnnounceMessage() {\n      super(NODE_ANNOUNCE);\n   }\n\n   public NodeAnnounceMessage(byte nodeAnnounceMessage_V2) {\n      super(nodeAnnounceMessage_V2);\n   }\n\n   // Public --------------------------------------------------------\n\n   public String getNodeID() {\n      return nodeID;\n   }\n\n   public String getBackupGroupName() {\n      return backupGroupName;\n   }\n\n   public boolean isBackup() {\n      return backup;\n   }\n\n   public TransportConfiguration getConnector() {\n      return connector;\n   }\n\n   public TransportConfiguration getBackupConnector() {\n      return backupConnector;\n   }\n\n   public String getScaleDownGroupName() {\n      return scaleDownGroupName;\n   }\n\n   /**\n    * @return the currentEventID\n    */\n   public long getCurrentEventID() {\n      return currentEventID;\n   }\n\n   @Override\n   public void encodeRest(final ActiveMQBuffer buffer) {\n      buffer.writeString(nodeID);\n      buffer.writeNullableString(backupGroupName);\n      buffer.writeBoolean(backup);\n      buffer.writeLong(currentEventID);\n      if (connector != null) {\n         buffer.writeBoolean(true);\n         connector.encode(buffer);\n      } else {\n         buffer.writeBoolean(false);\n      }\n      if (backupConnector != null) {\n         buffer.writeBoolean(true);\n         backupConnector.encode(buffer);\n      } else {\n         buffer.writeBoolean(false);\n      }\n      buffer.writeNullableString(scaleDownGroupName);\n   }\n\n   @Override\n   public void decodeRest(final ActiveMQBuffer buffer) {\n      this.nodeID = buffer.readString();\n      this.backupGroupName = buffer.readNullableString();\n      this.backup = buffer.readBoolean();\n      this.currentEventID = buffer.readLong();\n      if (buffer.readBoolean()) {\n         connector = new TransportConfiguration();\n         connector.decode(buffer);\n      }\n      if (buffer.readBoolean()) {\n         backupConnector = new TransportConfiguration();\n         backupConnector.decode(buffer);\n      }\n      scaleDownGroupName = buffer.readNullableString();\n   }\n\n   @Override\n   public String toString() {\n      return \"NodeAnnounceMessage [backup=\" + backup +\n         \", connector=\" +\n         connector +\n         \", nodeID=\" +\n         nodeID +\n         \", toString()=\" +\n         super.toString() +\n         \"]\";\n   }\n\n   @Override\n   public int hashCode() {\n      final int prime = 31;\n      int result = super.hashCode();\n      result = prime * result + (backup ? 1231 : 1237);\n      result = prime * result + ((backupConnector == null) ? 0 : backupConnector.hashCode());\n      result = prime * result + ((connector == null) ? 0 : connector.hashCode());\n      result = prime * result + (int) (currentEventID ^ (currentEventID >>> 32));\n      result = prime * result + ((nodeID == null) ? 0 : nodeID.hashCode());\n      result = prime * result + ((scaleDownGroupName == null) ? 0 : scaleDownGroupName.hashCode());\n      return result;\n   }\n\n   @Override\n   public boolean equals(Object obj) {\n      if (this == obj) {\n         return true;\n      }\n      if (!super.equals(obj)) {\n         return false;\n      }\n      if (!(obj instanceof NodeAnnounceMessage)) {\n         return false;\n      }\n      NodeAnnounceMessage other = (NodeAnnounceMessage) obj;\n      if (backup != other.backup) {\n         return false;\n      }\n      if (backupConnector == null) {\n         if (other.backupConnector != null) {\n            return false;\n         }\n      } else if (!backupConnector.equals(other.backupConnector)) {\n         return false;\n      }\n      if (connector == null) {\n         if (other.connector != null) {\n            return false;\n         }\n      } else if (!connector.equals(other.connector)) {\n         return false;\n      }\n      if (currentEventID != other.currentEventID) {\n         return false;\n      }\n      if (nodeID == null) {\n         if (other.nodeID != null) {\n            return false;\n         }\n      } else if (!nodeID.equals(other.nodeID)) {\n         return false;\n      } else if (!scaleDownGroupName.equals(other.scaleDownGroupName)) {\n         return false;\n      }\n      return true;\n   }\n}<fim_middle>// class below is data class\n"}