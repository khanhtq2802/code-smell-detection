{"text": "<fim_prefix>/*\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n*/\n\npackage org.apache.griffin.core.login.ldap;\n\nimport org.apache.griffin.core.exception.GriffinException;\n\nimport javax.net.SocketFactory;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\n\n/**\n * SocketFactory ignoring insecure (self-signed, expired) certificates.\n *\n * Maintains internal {@code SSLSocketFactory} configured with {@code NoopTrustManager}.\n * All SocketFactory methods are proxied to internal SSLSocketFactory instance.\n * Accepts all client and server certificates, from any issuers.\n */\npublic class SelfSignedSocketFactory extends SocketFactory {\n    private SSLSocketFactory sf;\n\n    private SelfSignedSocketFactory() throws Exception {\n        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n        ctx.init(null, new TrustManager[]{new NoopTrustManager()}, null);\n        sf = ctx.getSocketFactory();\n    }\n\n    /**\n     * Part of SocketFactory contract, used by javax.net internals to create new instance.\n     */\n    public static SocketFactory getDefault() {\n        try {\n            return new SelfSignedSocketFactory();\n        } catch (Exception e) {\n            throw new GriffinException.ServiceException(\"Failed to create socket factory\", e);\n        }\n    }\n\n    /**\n     * Insecure trust manager accepting any client and server certificates.\n     */\n<fim_suffix>    public static class NoopTrustManager implements X509TrustManager {\n        public void checkClientTrusted(X509Certificate[] xcs, String string) throws CertificateException {\n        }\n\n        public void checkServerTrusted(X509Certificate[] xcs, String string) throws CertificateException {\n        }\n\n        public X509Certificate[] getAcceptedIssuers() {\n            return new java.security.cert.X509Certificate[0];\n        }\n    }\n\n    @Override\n    public Socket createSocket() throws IOException {\n        return sf.createSocket();\n    }\n\n    @Override\n    public Socket createSocket(String s, int i) throws IOException, UnknownHostException {\n        return sf.createSocket(s, i);\n    }\n\n    @Override\n    public Socket createSocket(String s, int i, InetAddress inetAddress, int i1) throws IOException, UnknownHostException {\n        return sf.createSocket(s, i, inetAddress, i1);\n    }\n\n    @Override\n    public Socket createSocket(InetAddress inetAddress, int i) throws IOException {\n        return sf.createSocket(inetAddress, i);\n    }\n\n    @Override\n    public Socket createSocket(InetAddress inetAddress, int i, InetAddress inetAddress1, int i1) throws IOException {\n        return sf.createSocket(inetAddress, i, inetAddress1, i1);\n    }\n}<fim_middle>// class below has no smell\n"}