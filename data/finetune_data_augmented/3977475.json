{"text": "<fim_prefix>/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n*/\n\npackage org.apache.polygene.ide.plugin.idea.injections.service.common;\n\nimport com.intellij.psi.PsiAnnotation;\nimport com.intellij.psi.PsiModifierList;\nimport com.intellij.psi.PsiModifierListOwner;\nimport com.intellij.psi.PsiVariable;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport static com.intellij.codeInsight.AnnotationUtil.findAnnotation;\nimport static com.intellij.psi.PsiModifier.STATIC;\nimport static org.apache.polygene.ide.plugin.idea.injections.service.common.PolygeneServiceAnnotationConstants.QUALIFIED_NAME_SERVICE_ANNOTATION;\nimport static org.apache.polygene.ide.plugin.idea.injections.service.common.PolygeneServiceAnnotationUtil.ServiceAnnotationDeclarationValidationResult.*;\nimport static org.apache.polygene.ide.plugin.idea.injections.structure.common.PolygeneStructureAnnotationUtil.isInjecteableByStructureAnnotation;\n\n/**\n * @author edward.yakop@gmail.com\n * @since 0.1\n */\n<fim_suffix>public final class PolygeneServiceAnnotationUtil\n{\n    /**\n     * Returns {@code @Service} annotation if exists.\n     *\n     * @param modifierListOwner modifier list owner to process.\n     * @return {@code @Service} annotation if exists, {@code null} otherwise.\n     * @since 0.1\n     */\n    @Nullable\n    public static PsiAnnotation getServiceAnnotation( @NotNull PsiModifierListOwner modifierListOwner )\n    {\n        return findAnnotation( modifierListOwner, QUALIFIED_NAME_SERVICE_ANNOTATION );\n    }\n\n    /**\n     * Validates whether the variable has {@code @Service} annotation declared correctly.\n     *\n     * @param variable variable to check.\n     * @return Look at {@link ServiceAnnotationDeclarationValidationResult}.\n     * @since 0.1\n     */\n    @NotNull\n    public static ServiceAnnotationDeclarationValidationResult isValidServiceAnnotationDeclaration(\n        @NotNull PsiVariable variable )\n    {\n        PsiAnnotation serviceAnnotation = getServiceAnnotation( variable );\n        if( serviceAnnotation == null )\n        {\n            return invalidServiceAnnotationNotDeclared;\n        }\n\n        PsiModifierList modifierList = variable.getModifierList();\n        if( modifierList != null )\n        {\n            if( modifierList.hasModifierProperty( STATIC ) )\n            {\n                return invalidDeclaredOnStaticVariable;\n            }\n        }\n\n        // Can't be type that is injected by @Structure\n        if( isInjecteableByStructureAnnotation( variable ) )\n        {\n            return invalidTypeIsInjectedViaStructureAnnotation;\n        }\n\n        return valid;\n    }\n\n    public enum ServiceAnnotationDeclarationValidationResult\n    {\n        invalidServiceAnnotationNotDeclared,\n        invalidDeclaredOnStaticVariable,\n        invalidTypeIsInjectedViaStructureAnnotation,\n        valid,\n    }\n\n    private PolygeneServiceAnnotationUtil()\n    {\n    }\n}<fim_middle>// class below has no smell\n"}