{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2011, 2017 Eurotech and/or its affiliates and others\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     Eurotech - initial API and implementation\n *     Red Hat Inc\n *******************************************************************************/\npackage org.eclipse.kapua.locator;\n\nimport java.util.ServiceLoader;\n\nimport org.eclipse.kapua.KapuaRuntimeErrorCodes;\nimport org.eclipse.kapua.KapuaRuntimeException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Interface to load KapuaService instances in a given environment.<br>\n * Implementations of the KapuaServiceLocator can decide whether to return local instances or to acts as a proxy to remote instances.<br>\n * The locator is self initialized, it looks for the proper locator implementation class looking at {@link KapuaLocator#LOCATOR_CLASS_NAME_SYSTEM_PROPERTY} system property or falling back to the\n * {@link KapuaLocator#LOCATOR_CLASS_NAME_ENVIRONMENT_PROPERTY} (if the previous property is not defined).\n *\n * @since 1.0\n */\n<fim_suffix>public abstract class KapuaLocator implements KapuaServiceLoader {\n\n    private static final Logger logger = LoggerFactory.getLogger(KapuaLocator.class);\n\n    private static final KapuaLocator INSTANCE = createInstance();\n\n    /**\n     * {@link KapuaLocator} implementation classname specified via \"System property\" constants\n     */\n    public static final String LOCATOR_CLASS_NAME_SYSTEM_PROPERTY = \"locator.class.impl\";\n\n    /**\n     * {@link KapuaLocator} implementation classname specified via \"Environment property\" constants\n     */\n    public static final String LOCATOR_CLASS_NAME_ENVIRONMENT_PROPERTY = \"LOCATOR_CLASS_IMPL\";\n\n    // TODO do we need synchronization?\n\n    /**\n     * Creates the {@link KapuaLocator} instance,\n     *\n     * @return\n     */\n    private static KapuaLocator createInstance() {\n        try {\n            logger.info(\"initializing Servicelocator instance... \");\n            String locatorImplementation = locatorClassName();\n            if (locatorImplementation != null && !locatorImplementation.trim().isEmpty()) {\n                try {\n                    return (KapuaLocator) Class.forName(locatorImplementation).newInstance();\n                } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\n                    logger.info(\"An error occurred during Servicelocator initialization\", e);\n                }\n            }\n\n            // proceed with the default service locator instantiation if env variable is null or some error occurred during the specific service locator instantiation\n\n            logger.info(\"initialize Servicelocator with the default instance... \");\n            ServiceLoader<KapuaLocator> serviceLocatorLoaders = ServiceLoader.load(KapuaLocator.class);\n            for (KapuaLocator locator : serviceLocatorLoaders) {\n                // simply return the first\n                logger.info(\"initialize Servicelocator with the default instance... DONE\");\n                return locator;\n            }\n        } catch (Exception e) {\n            logger.error(\"Error initializing locator...\", e);\n            throw e;\n        }\n        // none returned\n\n        throw new KapuaRuntimeException(KapuaRuntimeErrorCodes.SERVICE_LOCATOR_UNAVAILABLE);\n    }\n\n    /**\n     * Return the {@link KapuaLocator} instance (singleton).\n     *\n     * @return\n     */\n    public static KapuaLocator getInstance() {\n        return INSTANCE;\n    }\n\n    /**\n     * Get the locator classname implementation looking at the {@link KapuaLocator#LOCATOR_CLASS_NAME_SYSTEM_PROPERTY} system property or falling back to the\n     * {@link KapuaLocator#LOCATOR_CLASS_NAME_ENVIRONMENT_PROPERTY} environment variable.\n     *\n     * @return\n     */\n    static String locatorClassName() {\n        String locatorClass = System.getProperty(LOCATOR_CLASS_NAME_SYSTEM_PROPERTY);\n        if (locatorClass != null && !locatorClass.isEmpty()) {\n            return locatorClass;\n        }\n\n        locatorClass = System.getenv(LOCATOR_CLASS_NAME_ENVIRONMENT_PROPERTY);\n        if (locatorClass != null && !locatorClass.isEmpty()) {\n            return locatorClass;\n        }\n\n        logger.debug(\"No service locator class resolved. Falling back to default.\");\n        return null;\n    }\n}<fim_middle>// class below has no smell\n"}