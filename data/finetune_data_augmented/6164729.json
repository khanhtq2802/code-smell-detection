{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.plugin.typescript.dto.model;\n\nimport static org.eclipse.che.plugin.typescript.dto.DTOHelper.convertType;\nimport static org.eclipse.che.plugin.typescript.dto.DTOHelper.convertTypeForDTS;\n\nimport com.google.gson.internal.Primitives;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\nimport org.eclipse.che.dto.shared.DTO;\n\n/**\n * A field model will used for providing class generation of a DTO\n *\n * @author Florent Benoit\n */\n<fim_suffix>public class FieldAttributeModel {\n\n  /** Typescript value of the type of the field */\n  private final String typeName;\n\n  /** For Map, List object, need to initialize field first. Like new Field<>() */\n  private boolean needInitialize;\n\n  /** Name of the field */\n  private String fieldName;\n\n  /** Java Type of the object (used internally) */\n  private Type type;\n\n  /** This field type is a List of objects ? */\n  private boolean isList;\n\n  /** This field type is a simple primitive */\n  private boolean isPrimitive;\n\n  /** This field type is a map */\n  private boolean isMap;\n\n  /** This list type is in fact a list of DTOs */\n  private boolean isListOfDto;\n\n  /** This map type is a map of DTOs */\n  private boolean isMapOfDto;\n\n  /**\n   * The type is a DTO or a list of DTO and then this value is the name of the DTO implementation\n   */\n  private String dtoImpl;\n\n  /** type is a DTO object. */\n  private boolean isDto;\n\n  /** type is a Enum object. */\n  private boolean isEnum;\n\n  /** Map key type */\n  private String mapKeyType;\n\n  /** Map value type */\n  private String mapValueType;\n\n  /** Dto type for d.ts */\n  private String dtsType;\n\n  /** Dto class where this field declared */\n  private Class declarationClass;\n\n  /**\n   * Build a new field model based on the name and Java type\n   *\n   * @param fieldName the name of the field\n   * @param type the Java raw type that will allow further analyzes\n   * @param declarationClass\n   */\n  public FieldAttributeModel(String fieldName, Type type, Class declarationClass) {\n    this.fieldName = fieldName;\n    this.type = type;\n    this.typeName = convertType(type);\n    this.dtsType = convertTypeForDTS(declarationClass, type);\n    this.declarationClass = declarationClass;\n\n    if (typeName.startsWith(\"Array<\") || typeName.startsWith(\"Map<\")) {\n      this.needInitialize = true;\n    }\n\n    if (this.type instanceof ParameterizedType) {\n      ParameterizedType parameterizedType = (ParameterizedType) this.type;\n      Type rawType = parameterizedType.getRawType();\n      analyzeParametrizedType(parameterizedType, rawType);\n    } else if (Primitives.isPrimitive(this.type)\n        || Primitives.isWrapperType(this.type)\n        || String.class.equals(this.type)) {\n      this.isPrimitive = true;\n    } else if (this.type instanceof Class && ((Class) this.type).isAnnotationPresent(DTO.class)) {\n      this.isDto = true;\n      dtoImpl = this.type.getTypeName() + \"Impl\";\n    } else if (this.type instanceof Class && ((Class) this.type).isEnum()) {\n      this.isEnum = true;\n    }\n  }\n\n  /**\n   * Analyze a complex parametrized type attribute (which can be a list or map for example)\n   *\n   * @param parameterizedType\n   * @param rawType\n   */\n  protected void analyzeParametrizedType(ParameterizedType parameterizedType, Type rawType) {\n    if (List.class.equals(rawType)) {\n      this.isList = true;\n      if (parameterizedType.getActualTypeArguments()[0] instanceof Class\n          && ((Class) parameterizedType.getActualTypeArguments()[0])\n              .isAnnotationPresent(DTO.class)) {\n        isListOfDto = true;\n        dtoImpl = convertType(parameterizedType.getActualTypeArguments()[0]) + \"Impl\";\n      }\n    } else if (Map.class.equals(rawType)) {\n      isMap = true;\n      mapKeyType =\n          convertTypeForDTS(declarationClass, parameterizedType.getActualTypeArguments()[0]);\n      if (parameterizedType.getActualTypeArguments()[1] instanceof Class\n          && ((Class) parameterizedType.getActualTypeArguments()[1])\n              .isAnnotationPresent(DTO.class)) {\n\n        isMapOfDto = true;\n        dtoImpl = convertType(parameterizedType.getActualTypeArguments()[1]) + \"Impl\";\n      }\n\n      mapValueType =\n          convertTypeForDTS(declarationClass, parameterizedType.getActualTypeArguments()[1]);\n    }\n  }\n\n  public String getTypeName() {\n    return typeName;\n  }\n\n  public String getFieldName() {\n    return fieldName;\n  }\n\n  public Type getType() {\n    return type;\n  }\n\n  public boolean isList() {\n    return isList;\n  }\n\n  public boolean isPrimitive() {\n    return isPrimitive;\n  }\n\n  public boolean isMap() {\n    return isMap;\n  }\n\n  public boolean isListOfDto() {\n    return isListOfDto;\n  }\n\n  public boolean isMapOfDto() {\n    return isMapOfDto;\n  }\n\n  public String getDtoImpl() {\n    return dtoImpl;\n  }\n\n  public boolean isDto() {\n    return isDto;\n  }\n\n  public boolean isNeedInitialize() {\n    return needInitialize;\n  }\n\n  public boolean isEnum() {\n    return isEnum;\n  }\n\n  public String getName() {\n    return this.fieldName;\n  }\n\n  public String getSimpleType() {\n    return this.typeName;\n  }\n\n  public String getMapKeyType() {\n    return mapKeyType;\n  }\n\n  public String getMapValueType() {\n    return mapValueType;\n  }\n\n  public String getDtsType() {\n    return dtsType;\n  }\n}<fim_middle>// class below is data class\n"}