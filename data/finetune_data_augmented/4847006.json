{"text": "<fim_prefix>import org.apache.http.message.BasicNameValuePair;\nimport org.apache.jackrabbit.JcrConstants;\nimport org.apache.jackrabbit.commons.json.JsonParser;\nimport org.apache.jackrabbit.commons.json.JsonUtil;\nimport org.apache.jackrabbit.commons.webdav.JcrRemotingConstants;\nimport org.apache.jackrabbit.commons.webdav.ValueUtil;\nimport org.apache.jackrabbit.spi.Batch;\nimport org.apache.jackrabbit.spi.ItemId;\nimport org.apache.jackrabbit.spi.ItemInfo;\nimport org.apache.jackrabbit.spi.Name;\nimport org.apache.jackrabbit.spi.NodeId;\nimport org.apache.jackrabbit.spi.Path;\nimport org.apache.jackrabbit.spi.PropertyId;\nimport org.apache.jackrabbit.spi.PropertyInfo;\nimport org.apache.jackrabbit.spi.QValue;\nimport org.apache.jackrabbit.spi.RepositoryService;\nimport org.apache.jackrabbit.spi.SessionInfo;\nimport org.apache.jackrabbit.spi.Tree;\nimport org.apache.jackrabbit.spi.commons.ItemInfoCacheImpl;\nimport org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;\nimport org.apache.jackrabbit.spi.commons.conversion.PathResolver;\nimport org.apache.jackrabbit.spi.commons.identifier.IdFactoryImpl;\nimport org.apache.jackrabbit.spi.commons.iterator.Iterators;\nimport org.apache.jackrabbit.spi.commons.name.NameConstants;\nimport org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;\nimport org.apache.jackrabbit.spi.commons.name.PathBuilder;\nimport org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;\nimport org.apache.jackrabbit.spi.commons.tree.AbstractTree;\nimport org.apache.jackrabbit.spi.commons.value.ValueFormat;\nimport org.apache.jackrabbit.spi2dav.ExceptionConverter;\nimport org.apache.jackrabbit.spi2dav.ItemResourceConstants;\nimport org.apache.jackrabbit.util.Text;\nimport org.apache.jackrabbit.webdav.DavConstants;\nimport org.apache.jackrabbit.webdav.DavException;\nimport org.apache.jackrabbit.webdav.DavServletResponse;\nimport org.apache.jackrabbit.webdav.MultiStatusResponse;\nimport org.apache.jackrabbit.webdav.client.methods.HttpPropfind;\nimport org.apache.jackrabbit.webdav.header.IfHeader;\nimport org.apache.jackrabbit.webdav.property.DavProperty;\nimport org.apache.jackrabbit.webdav.property.DavPropertyName;\nimport org.apache.jackrabbit.webdav.property.DavPropertyNameSet;\nimport org.apache.jackrabbit.webdav.property.DavPropertySet;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n/**\n * <code>RepositoryServiceImpl</code>...\n */\npublic class RepositoryServiceImpl extends org.apache.jackrabbit.spi2dav.RepositoryServiceImpl {\n    private static Logger log = LoggerFactory.getLogger(RepositoryServiceImpl.class);\n    private static final String PARAM_DIFF = \":diff\";\n    private static final String PARAM_COPY = \":copy\";\n    private static final String PARAM_CLONE = \":clone\";\n    private static final char SYMBOL_ADD_NODE = '+';\n    private static final char SYMBOL_MOVE = '>';\n    private static final char SYMBOL_REMOVE = '-';\n    private static final char SYMBOL_SET_PROPERTY = '^';\n    private static final String ORDER_POSITION_LAST = \"#last\";\n    private static final String ORDER_POSITION_BEFORE = \"#before\";\n    private static final DavPropertyName JCR_TYPE =\n            DavPropertyName.create(ItemResourceConstants.JCR_TYPE_LN, ItemResourceConstants.NAMESPACE);\n    private static final DavPropertyName JCR_LENGTH =\n            DavPropertyName.create(ItemResourceConstants.JCR_LENGTH_LN, ItemResourceConstants.NAMESPACE);\n    private static final DavPropertyName JCR_LENGTHS =\n            DavPropertyName.create(ItemResourceConstants.JCR_LENGTHS_LN, ItemResourceConstants.NAMESPACE);\n    private static final DavPropertyName JCR_GET_STRING =\n            DavPropertyName.create(ItemResourceConstants.JCR_GET_STRING_LN, ItemResourceConstants.NAMESPACE);\n    private static final DavPropertyNameSet LAZY_PROPERTY_NAME_SET = new DavPropertyNameSet(){{\n        add(JCR_TYPE);\n        add(JCR_LENGTH);\n        add(JCR_LENGTHS);\n        add(JCR_GET_STRING);\n    }};\n    /**\n     * base uri to the extended jcr-server that can handle the GET and POST\n     * (or PATCH) requests sent by this service implementation.\n     */\n    private final String jcrServerURI;\n    /**\n     * the name of the default workspace or <code>null</code>.\n     * NOTE: with JCR-1842 the RepositoryConfiguration doesn't provide the\n     * default workspace name any more. In order to provide backwards\n     * compatibility with jcr-server &lt; 1.5.0 the workspace name can be\n     * passed to the RepositoryService implementation.\n     */\n    private final String defaultWorkspaceName;\n    /**\n     * The configuration map used to determine the maximal depth of child\n     * items to be accessed upon a call to {@link #getNodeInfo(SessionInfo, NodeId)}.\n     */\n    private final BatchReadConfig batchReadConfig;\n    private final Map<SessionInfo, QValueFactoryImpl> qvFactories = new HashMap<SessionInfo, QValueFactoryImpl>();\n    /**\n     * Same as {@link #RepositoryServiceImpl(String, String, BatchReadConfig, int, int)}\n     * using <code>null</code> workspace name, {@link ItemInfoCacheImpl#DEFAULT_CACHE_SIZE}\n     * as size for the item cache and {@link #MAX_CONNECTIONS_DEFAULT} for the\n     * maximum number of connections on the client.\n     *\n     * @param jcrServerURI The server uri.\n     * @param batchReadConfig The batch read configuration.\n     * @throws RepositoryException If an exception occurs.\n     */\n    public RepositoryServiceImpl(String jcrServerURI, BatchReadConfig batchReadConfig) throws RepositoryException {\n        this(jcrServerURI, null, batchReadConfig, ItemInfoCacheImpl.DEFAULT_CACHE_SIZE);\n    }\n    /**\n     * Same as {@link #RepositoryServiceImpl(String, String, BatchReadConfig, int, int)}\n     * using {@link #MAX_CONNECTIONS_DEFAULT} for the maximum number of\n     * connections on the client.\n     *\n     * @param jcrServerURI The server uri.\n     * @param defaultWorkspaceName The default workspace name.\n     * @param batchReadConfig The batch read configuration.\n     * @param itemInfoCacheSize The size of the item info cache.\n     * @throws RepositoryException If an exception occurs.\n     */\n    public RepositoryServiceImpl(String jcrServerURI, String defaultWorkspaceName,\n                                 BatchReadConfig batchReadConfig, int itemInfoCacheSize) throws RepositoryException {\n        this(jcrServerURI, defaultWorkspaceName, batchReadConfig, itemInfoCacheSize, MAX_CONNECTIONS_DEFAULT);\n    }\n    /**\n     * Creates a new instance of this repository service.\n     *\n     * @param jcrServerURI The server uri.\n     * @param defaultWorkspaceName The default workspace name.\n     * @param batchReadConfig The batch read configuration.\n     * @param itemInfoCacheSize The size of the item info cache.\n     * @param maximumHttpConnections maximumHttpConnections A int &gt;0 defining\n     * the maximum number of connections per host to be configured on\n     * {@link org.apache.http.impl.conn.PoolingHttpClientConnectionManager#setDefaultMaxPerRoute(int)}.\n     * @throws RepositoryException If an exception occurs.\n     */\n<fim_suffix>    public RepositoryServiceImpl(String jcrServerURI, String defaultWorkspaceName,\n                                 BatchReadConfig batchReadConfig, int itemInfoCacheSize,\n                                 int maximumHttpConnections) throws RepositoryException {\n        super(jcrServerURI, IdFactoryImpl.getInstance(), NameFactoryImpl.getInstance(),\n                PathFactoryImpl.getInstance(), new QValueFactoryImpl(), itemInfoCacheSize, maximumHttpConnections);\n        try {\n            URI repositoryUri = computeRepositoryUri(jcrServerURI);\n            this.jcrServerURI = repositoryUri.toString();\n        } catch (URISyntaxException e) {\n            throw new RepositoryException(e);\n        }\n        this.defaultWorkspaceName = defaultWorkspaceName;\n        if (batchReadConfig == null) {\n            this.batchReadConfig = new BatchReadConfig() {\n                public int getDepth(Path path, PathResolver resolver) {\n                    return 0;\n                }\n            };\n        } else {\n            this.batchReadConfig = batchReadConfig;\n        }\n    }<fim_middle>// function below has no smell\n"}