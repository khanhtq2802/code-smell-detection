{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.ambari.server.actionmanager;\n\nimport java.io.IOException;\n\nimport javax.xml.bind.JAXBException;\n\nimport org.apache.ambari.server.state.ServiceComponentHostEvent;\nimport org.apache.ambari.server.utils.StageUtils;\n\n<fim_suffix>public class ServiceComponentHostEventWrapper {\n\n  private ServiceComponentHostEvent event = null;\n  private String eventJson = null;\n\n  public ServiceComponentHostEventWrapper(ServiceComponentHostEvent event) {\n    this.event  = event;\n  }\n  \n  public ServiceComponentHostEventWrapper(String eventJson) {\n    this.eventJson = eventJson;\n  }\n\n  public ServiceComponentHostEvent getEvent() {\n    if (event != null) {\n      return event;\n    } else if (eventJson != null) {\n      try {\n        event = StageUtils.fromJson(eventJson, ServiceComponentHostEvent.class);\n        return event;\n      } catch (IOException e) {\n        throw new RuntimeException(\"Illegal Json for event\", e);\n      }\n    }\n    return null;\n  }\n  \n  public String getEventJson() { \n    if (eventJson != null) {\n      return eventJson;\n    } else if (event != null) {\n      try {\n        eventJson = StageUtils.jaxbToString(event);\n        return eventJson;\n      } catch (JAXBException | IOException e) {\n        throw new RuntimeException(\"Couldn't get json\", e);\n      }\n    } else {\n      return null;\n    }\n  }\n  \n  public String toString() {\n    if (event != null) {\n      return event.toString();\n    } else if (eventJson != null) {\n      return eventJson;\n    }\n    return \"null\";\n  }\n}<fim_middle>// class below has no smell\n"}