{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.accumulo.iteratortest;\n\nimport java.io.IOException;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.accumulo.iteratortest.testcases.IteratorTestCase;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.reflect.ClassPath;\nimport com.google.common.reflect.ClassPath.ClassInfo;\n\n/**\n * A class to ease finding published test cases.\n */\n<fim_suffix>public class IteratorTestCaseFinder {\n  private static final Logger log = LoggerFactory.getLogger(IteratorTestCaseFinder.class);\n\n  /**\n   * Instantiates all test cases provided.\n   *\n   * @return A list of {@link IteratorTestCase}s.\n   */\n  public static List<IteratorTestCase> findAllTestCases() {\n    log.info(\"Searching {}\", IteratorTestCase.class.getPackage().getName());\n    ClassPath cp;\n    try {\n      cp = ClassPath.from(IteratorTestCaseFinder.class.getClassLoader());\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    ImmutableSet<ClassInfo> classes = cp\n        .getTopLevelClasses(IteratorTestCase.class.getPackage().getName());\n\n    final List<IteratorTestCase> testCases = new ArrayList<>();\n    // final Set<Class<? extends IteratorTestCase>> classes =\n    // reflections.getSubTypesOf(IteratorTestCase.class);\n    for (ClassInfo classInfo : classes) {\n      Class<?> clz;\n      try {\n        clz = Class.forName(classInfo.getName());\n      } catch (Exception e) {\n        log.warn(\"Could not get class for \" + classInfo.getName(), e);\n        continue;\n      }\n\n      if (clz.isInterface() || Modifier.isAbstract(clz.getModifiers())\n          || !IteratorTestCase.class.isAssignableFrom(clz)) {\n        log.debug(\"Skipping \" + clz);\n        continue;\n      }\n\n      try {\n        testCases.add((IteratorTestCase) clz.newInstance());\n      } catch (IllegalAccessException | InstantiationException e) {\n        log.warn(\"Could not instantiate {}\", clz, e);\n      }\n    }\n\n    return testCases;\n  }\n}<fim_middle>// class below is blob\n"}