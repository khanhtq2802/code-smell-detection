{"text": "<fim_prefix>import org.apache.batik.anim.values.AnimatableValue;\nimport org.apache.batik.dom.svg.LiveAttributeException;\nimport org.apache.batik.dom.svg.SVGOMRect;\nimport org.apache.batik.parser.DefaultNumberListHandler;\nimport org.apache.batik.parser.NumberListParser;\nimport org.apache.batik.parser.ParseException;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.svg.SVGAnimatedRect;\nimport org.w3c.dom.svg.SVGRect;\n/**\n * Implementation of {@link SVGAnimatedRect}.\n *\n * @author <a href=\"mailto:cam%40mcc%2eid%2eau\">Cameron McCormack</a>\n * @version $Id$\n */\npublic class SVGOMAnimatedRect\n        extends AbstractSVGAnimatedValue\n        implements SVGAnimatedRect {\n    /**\n     * The base value.\n     */\n    protected BaseSVGRect baseVal;\n    /**\n     * The animated value.\n     */\n    protected AnimSVGRect animVal;\n    /**\n     * Whether the value is changing.\n     */\n    protected boolean changing;\n    /**\n     * Default value.\n     */\n    protected String defaultValue;\n    /**\n     * Creates a new SVGOMAnimatedRect.\n     * @param elt The associated element.\n     * @param ns The attribute's namespace URI.\n     * @param ln The attribute's local name.\n     * @param def The default value for the attribute.\n     */\n    public SVGOMAnimatedRect(AbstractElement elt, String ns, String ln,\n                             String def) {\n        super(elt, ns, ln);\n        defaultValue = def;\n    }\n    /**\n     * <b>DOM</b>: Implements {@link SVGAnimatedRect#getBaseVal()}.\n     */\n    public SVGRect getBaseVal() {\n        if (baseVal == null) {\n            baseVal = new BaseSVGRect();\n        }\n        return baseVal;\n    }\n    /**\n     * <b>DOM</b>: Implements {@link SVGAnimatedRect#getAnimVal()}.\n     */\n    public SVGRect getAnimVal() {\n        if (animVal == null) {\n            animVal = new AnimSVGRect();\n        }\n        return animVal;\n    }\n    /**\n     * Updates the animated value with the given {@link AnimatableValue}.\n     */\n    protected void updateAnimatedValue(AnimatableValue val) {\n        if (val == null) {\n            hasAnimVal = false;\n        } else {\n            hasAnimVal = true;\n            AnimatableRectValue animRect = (AnimatableRectValue) val;\n            if (animVal == null) {\n                animVal = new AnimSVGRect();\n            }\n            animVal.setAnimatedValue(animRect.getX(), animRect.getY(),\n                                     animRect.getWidth(), animRect.getHeight());\n        }\n        fireAnimatedAttributeListeners();\n    }\n    /**\n     * Returns the base value of the attribute as an {@link AnimatableValue}.\n     */\n    public AnimatableValue getUnderlyingValue(AnimationTarget target) {\n        SVGRect r = getBaseVal();\n        return new AnimatableRectValue\n            (target, r.getX(), r.getY(), r.getWidth(), r.getHeight());\n    }\n    /**\n     * Called when an Attr node has been added.\n     */\n    public void attrAdded(Attr node, String newv) {\n        if (!changing && baseVal != null) {\n            baseVal.invalidate();\n        }\n        fireBaseAttributeListeners();\n        if (!hasAnimVal) {\n            fireAnimatedAttributeListeners();\n        }\n    }\n    /**\n     * Called when an Attr node has been modified.\n     */\n    public void attrModified(Attr node, String oldv, String newv) {\n        if (!changing && baseVal != null) {\n            baseVal.invalidate();\n        }\n        fireBaseAttributeListeners();\n        if (!hasAnimVal) {\n            fireAnimatedAttributeListeners();\n        }\n    }\n    /**\n     * Called when an Attr node has been removed.\n     */\n    public void attrRemoved(Attr node, String oldv) {\n        if (!changing && baseVal != null) {\n            baseVal.invalidate();\n        }\n        fireBaseAttributeListeners();\n        if (!hasAnimVal) {\n            fireAnimatedAttributeListeners();\n        }\n    }\n    /**\n     * This class represents the SVGRect returned by getBaseVal().\n     */\n    protected class BaseSVGRect extends SVGOMRect {\n        /**\n         * Whether this rect is valid.\n         */\n        protected boolean valid;\n        /**\n         * Invalidates this length.\n         */\n        public void invalidate() {\n            valid = false;\n        }\n        /**\n         * Resets the value of the associated attribute.\n         */\n        protected void reset() {\n            try {\n                changing = true;\n                element.setAttributeNS\n                    (namespaceURI, localName,\n                     Float.toString(x) + ' ' + y + ' ' + w + ' ' + h);\n            } finally {\n                changing = false;\n            }\n        }\n        /**\n         * Initializes the length, if needed.\n         */\n        protected void revalidate() {\n            if (valid) {\n                return;\n            }\n            Attr attr = element.getAttributeNodeNS(namespaceURI, localName);\n            final String s = attr == null ? defaultValue : attr.getValue();\n            final float[] numbers = new float[4];\n            NumberListParser p = new NumberListParser();\n            p.setNumberListHandler(new DefaultNumberListHandler() {\n                protected int count;\n                public void endNumberList() {\n                    if (count != 4) {\n                        throw new LiveAttributeException\n                            (element, localName,\n                             LiveAttributeException.ERR_ATTRIBUTE_MALFORMED,\n                             s);\n                    }\n                }\n                public void numberValue(float v) throws ParseException {\n                    if (count < 4) {\n                        numbers[count] = v;\n                    }\n                    if (v < 0 && (count == 2 || count == 3)) {\n                        throw new LiveAttributeException\n                            (element, localName,\n                             LiveAttributeException.ERR_ATTRIBUTE_MALFORMED,\n                             s);\n                    }\n                    count++;\n                }\n            });\n            p.parse(s);\n            x = numbers[0];\n            y = numbers[1];\n            w = numbers[2];\n            h = numbers[3];\n            valid = true;\n        }\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#getX()}.\n         */\n        public float getX() {\n            revalidate();\n            return x;\n        }\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#setX(float)}.\n         */\n        public void setX(float x) throws DOMException {\n            this.x = x;\n            reset();\n        }\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#getY()}.\n         */\n        public float getY() {\n            revalidate();\n            return y;\n        }\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#setY(float)}.\n         */\n        public void setY(float y) throws DOMException {\n            this.y = y;\n            reset();\n        }\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#getWidth()}.\n         */\n        public float getWidth() {\n            revalidate();\n            return w;\n        }\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#setWidth(float)}.\n         */\n        public void setWidth(float width) throws DOMException {\n            this.w = width;\n            reset();\n        }\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#getHeight()}.\n         */\n        public float getHeight() {\n            revalidate();\n            return h;\n        }\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#setHeight(float)}.\n         */\n        public void setHeight(float height) throws DOMException {\n            this.h = height;\n            reset();\n        }\n    }\n    /**\n     * This class represents the SVGRect returned by getAnimVal().\n     */\n    protected class AnimSVGRect extends SVGOMRect {\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#getX()}.\n         */\n        public float getX() {\n            if (hasAnimVal) {\n                return super.getX();\n            }\n            return getBaseVal().getX();\n        }\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#getY()}.\n         */\n        public float getY() {\n            if (hasAnimVal) {\n                return super.getY();\n            }\n            return getBaseVal().getY();\n        }\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#getWidth()}.\n         */\n        public float getWidth() {\n            if (hasAnimVal) {\n                return super.getWidth();\n            }\n            return getBaseVal().getWidth();\n        }\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#getHeight()}.\n         */\n        public float getHeight() {\n            if (hasAnimVal) {\n                return super.getHeight();\n            }\n            return getBaseVal().getHeight();\n        }\n        /**\n         * <b>DOM</b>: Implements {@link SVGRect#setX(float)}.\n         */\n<fim_suffix>        public void setX(float value) throws DOMException {\n            throw element.createDOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR, \"readonly.length\",\n                 null);\n        }<fim_middle>// function below has no smell\n"}