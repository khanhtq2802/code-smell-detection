{"text": "<fim_prefix>    }\n    @Override\n    public MutableSetMultimap<V, K> flip()\n    {\n        return this.getMutableMap().flip();\n    }\n    @Override\n    public MutableMap<K, V> clone()\n    {\n        return this;\n    }\n    @Override\n    public MutableMap<K, V> asUnmodifiable()\n    {\n        return this;\n    }\n    @Override\n    public MutableMap<K, V> asSynchronized()\n    {\n        return SynchronizedMutableMap.of(this);\n    }\n    @Override\n    public MutableMap<K, V> tap(Procedure<? super V> procedure)\n    {\n        this.forEach(procedure);\n        return this;\n    }\n    @Override\n    public void forEach(Procedure<? super V> procedure)\n    {\n        this.each(procedure);\n    }\n    @Override\n    public void each(Procedure<? super V> procedure)\n    {\n        this.getMutableMap().forEach(procedure);\n    }\n    @Override\n    public void forEachWithIndex(ObjectIntProcedure<? super V> objectIntProcedure)\n    {\n        this.getMutableMap().forEachWithIndex(objectIntProcedure);\n    }\n    @Override\n    public <P> void forEachWith(Procedure2<? super V, ? super P> procedure, P parameter)\n    {\n        this.getMutableMap().forEachWith(procedure, parameter);\n    }\n    @Override\n    public Iterator<V> iterator()\n    {\n        return new UnmodifiableIteratorAdapter<>(this.getMutableMap().iterator());\n    }\n    @Override\n    public int hashCode()\n    {\n        return this.getMutableMap().hashCode();\n    }\n    @Override\n    public boolean equals(Object obj)\n    {\n        return this.getMutableMap().equals(obj);\n    }\n    protected MutableMap<K, V> getMutableMap()\n    {\n        return (MutableMap<K, V>) this.delegate;\n    }\n    @Override\n    public RichIterable<K> keysView()\n    {\n        return LazyIterate.adapt(this.keySet());\n    }\n    @Override\n    public RichIterable<V> valuesView()\n    {\n        return LazyIterate.adapt(this.values());\n    }\n    @Override\n    public RichIterable<Pair<K, V>> keyValuesView()\n    {\n        return LazyIterate.adapt(this.entrySet()).collect(AbstractImmutableEntry.getPairFunction());\n    }\n    @Override\n    public ImmutableMap<K, V> toImmutable()\n    {\n        return Maps.immutable.withAll(this);\n    }\n    @Override\n    public <R> MutableMap<K, R> collectValues(Function2<? super K, ? super V, ? extends R> function)\n    {\n        return this.getMutableMap().collectValues(function);\n    }\n    @Override\n    public <K2, V2> MutableMap<K2, V2> collect(Function2<? super K, ? super V, Pair<K2, V2>> function)\n    {\n        return this.getMutableMap().collect(function);\n    }\n    @Override\n    public MutableMap<K, V> select(Predicate2<? super K, ? super V> predicate)\n    {\n        return this.getMutableMap().select(predicate);\n    }\n    @Override\n    public MutableMap<K, V> reject(Predicate2<? super K, ? super V> predicate)\n    {\n        return this.getMutableMap().reject(predicate);\n    }\n    @Override\n    public Pair<K, V> detect(Predicate2<? super K, ? super V> predicate)\n    {\n        return this.getMutableMap().detect(predicate);\n    }\n    @Override\n    public Optional<Pair<K, V>> detectOptional(Predicate2<? super K, ? super V> predicate)\n    {\n        return this.getMutableMap().detectOptional(predicate);\n    }\n    @Override\n    public boolean allSatisfy(Predicate<? super V> predicate)\n    {\n        return this.getMutableMap().allSatisfy(predicate);\n    }\n    @Override\n    public <P> boolean allSatisfyWith(Predicate2<? super V, ? super P> predicate, P parameter)\n    {\n        return this.getMutableMap().allSatisfyWith(predicate, parameter);\n    }\n    @Override\n    public boolean noneSatisfy(Predicate<? super V> predicate)\n    {\n        return this.getMutableMap().noneSatisfy(predicate);\n    }\n    @Override\n    public <P> boolean noneSatisfyWith(Predicate2<? super V, ? super P> predicate, P parameter)\n    {\n        return this.getMutableMap().noneSatisfyWith(predicate, parameter);\n    }\n    @Override\n    public boolean anySatisfy(Predicate<? super V> predicate)\n    {\n        return this.getMutableMap().anySatisfy(predicate);\n    }\n    @Override\n    public <P> boolean anySatisfyWith(Predicate2<? super V, ? super P> predicate, P parameter)\n    {\n        return this.getMutableMap().anySatisfyWith(predicate, parameter);\n    }\n    @Override\n    public void appendString(Appendable appendable)\n    {\n        this.getMutableMap().appendString(appendable);\n    }\n    @Override\n    public void appendString(Appendable appendable, String separator)\n    {\n        this.getMutableMap().appendString(appendable, separator);\n    }\n    @Override\n    public void appendString(Appendable appendable, String start, String separator, String end)\n    {\n        this.getMutableMap().appendString(appendable, start, separator, end);\n    }\n    @Override\n    public MutableBag<V> toBag()\n    {\n        return this.getMutableMap().toBag();\n    }\n    @Override\n    public MutableSortedBag<V> toSortedBag()\n    {\n        return this.getMutableMap().toSortedBag();\n    }\n    @Override\n    public MutableSortedBag<V> toSortedBag(Comparator<? super V> comparator)\n    {\n        return this.getMutableMap().toSortedBag(comparator);\n    }\n    @Override\n    public <R extends Comparable<? super R>> MutableSortedBag<V> toSortedBagBy(Function<? super V, ? extends R> function)\n    {\n        return this.getMutableMap().toSortedBagBy(function);\n    }\n    @Override\n    public LazyIterable<V> asLazy()\n    {\n        return this.getMutableMap().asLazy();\n    }\n    @Override\n    public <R extends Collection<V>> R into(R target)\n    {\n        return this.getMutableMap().into(target);\n    }\n    @Override\n    public MutableList<V> toList()\n    {\n        return this.getMutableMap().toList();\n    }\n    @Override\n    public <NK, NV> MutableMap<NK, NV> toMap(\n            Function<? super V, ? extends NK> keyFunction,\n            Function<? super V, ? extends NV> valueFunction)\n    {\n        return this.getMutableMap().toMap(keyFunction, valueFunction);\n    }\n    @Override\n    public <NK, NV, R extends Map<NK, NV>> R toMap(\n            Function<? super V, ? extends NK> keyFunction,\n            Function<? super V, ? extends NV> valueFunction,\n            R target)\n    {\n        return this.getMutableMap().toMap(keyFunction, valueFunction, target);\n    }\n    @Override\n    public <NK, NV> MutableSortedMap<NK, NV> toSortedMap(\n            Function<? super V, ? extends NK> keyFunction,\n            Function<? super V, ? extends NV> valueFunction)\n    {\n        return this.getMutableMap().toSortedMap(keyFunction, valueFunction);\n    }\n    @Override\n    public <NK, NV> MutableSortedMap<NK, NV> toSortedMap(\n            Comparator<? super NK> comparator,\n            Function<? super V, ? extends NK> keyFunction,\n            Function<? super V, ? extends NV> valueFunction)\n    {\n        return this.getMutableMap().toSortedMap(comparator, keyFunction, valueFunction);\n    }\n    @Override\n    public <KK extends Comparable<? super KK>, NK, NV> MutableSortedMap<NK, NV> toSortedMapBy(\n            Function<? super NK, KK> sortBy,\n            Function<? super V, ? extends NK> keyFunction,\n            Function<? super V, ? extends NV> valueFunction)\n    {\n        return this.getMutableMap().toSortedMapBy(sortBy, keyFunction, valueFunction);\n    }\n    @Override\n    public <NK, NV> MutableBiMap<NK, NV> toBiMap(\n            Function<? super V, ? extends NK> keyFunction,\n            Function<? super V, ? extends NV> valueFunction)\n    {\n        return this.getMutableMap().toBiMap(keyFunction, valueFunction);\n    }\n    @Override\n    public MutableSet<V> toSet()\n    {\n        return this.getMutableMap().toSet();\n    }\n<fim_suffix>    @Override\n    public MutableList<V> toSortedList()\n    {\n        return this.getMutableMap().toSortedList();\n    }<fim_middle>// function below has no smell\n"}