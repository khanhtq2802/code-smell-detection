{"text": "<fim_prefix>package org.apache.taverna.ui.perspectives.myexperiment.model;\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport java.text.DateFormat;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.apache.log4j.Logger;\nimport org.jdom.Document;\nimport org.jdom.Element;\n\nimport org.apache.taverna.ui.perspectives.myexperiment.model.Resource;\nimport org.apache.taverna.ui.perspectives.myexperiment.model.User;\n\n/**\n * @author Sergejs Aleksejevs\n */\npublic class Pack extends Resource\n{\n  private int accessType;\n  \n  private User creator;\n  private List<Tag> tags;\n  private List<Comment> comments;\n  private ArrayList<PackItem> items;\n  \n  \n  public Pack()\n  {\n    super();\n    this.setItemType(Resource.PACK);\n  }\n  \n  public int getAccessType()\n  {\n    return this.accessType;\n  }\n  \n  public void setAccessType(int accessType)\n  {\n    this.accessType = accessType;\n  }\n  \n  public User getCreator() {\n    return creator;\n  }\n\n  public void setCreator(User creator) {\n    this.creator = creator;\n  }\n  \n  public List<Tag> getTags()\n  {\n    return (this.tags);\n  }\n  \n  public List<Comment> getComments()\n  {\n    return this.comments;\n  }\n  \n  public int getItemCount()\n  {\n    return this.items.size();\n  }\n  \n  public ArrayList<PackItem> getItems()\n  {\n    return this.items;\n  }\n  \n  \n  /**\n   * A helper method to return a set of API elements that are\n   * needed to satisfy request of a particular type - e.g. creating\n   * a listing of resources or populating full preview, etc.\n   * \n   * @param iRequestType A constant value from Resource class.\n   * @return Comma-separated string containing values of required API elements.\n   */\n<fim_suffix>  public static String getRequiredAPIElements(int iRequestType)\n  {\n    String strElements = \"\";\n    \n    // cases higher up in the list are supersets of those that come below -\n    // hence no \"break\" statements are required, because 'falling through' the\n    // switch statement is the desired behaviour in this case\n    switch (iRequestType) {\n      case Resource.REQUEST_FULL_PREVIEW:\n        strElements += \"created-at,updated-at,internal-pack-items,external-pack-items,tags,comments,\";\n      case Resource.REQUEST_FULL_LISTING:\n        strElements += \"owner,\";\n      case Resource.REQUEST_SHORT_LISTING:\n        strElements += \"id,title,description,privileges\";\n    }\n    \n    return (strElements);\n  }\n  \n  \n  public static Pack buildFromXML(Document doc, MyExperimentClient client, Logger logger)\n  {\n    // if no XML document was supplied, return NULL\n    if(doc == null) return(null);\n    \n    // call main method which parses XML document starting from root element\n    return (Pack.buildFromXML(doc.getRootElement(), client, logger));\n  }\n  \n  \n  // class method to build a pack instance from XML\n  @SuppressWarnings(\"unchecked\")\n  public static Pack buildFromXML(Element docRootElement, MyExperimentClient client, Logger logger)\n  {\n    // return null to indicate an error if XML document contains no root element \n    if(docRootElement == null) return(null);\n    \n    Pack p = new Pack();\n    \n    try {\n      // Access type\n      p.setAccessType(Util.getAccessTypeFromXMLElement(docRootElement.getChild(\"privileges\")));\n      \n      // URI\n      p.setURI(docRootElement.getAttributeValue(\"uri\"));\n      \n      // Resource URI\n      p.setResource(docRootElement.getAttributeValue(\"resource\"));\n      \n      // Id\n      String id = docRootElement.getChildText(\"id\");\n      if (id == null || id.equals(\"\")) {\n        id = \"API Error - No pack ID supplied\";\n        logger.error(\"Error while parsing pack XML data - no ID provided for pack with title: \\\"\" + docRootElement.getChildText(\"title\") + \"\\\"\");\n      }\n      p.setID(Integer.parseInt(id));\n      \n      // Title\n      p.setTitle(docRootElement.getChildText(\"title\"));\n      \n      // Description\n      p.setDescription(docRootElement.getChildText(\"description\"));\n      \n      // Owner\n      Element ownerElement = docRootElement.getChild(\"owner\");\n      p.setCreator(Util.instantiatePrimitiveUserFromElement(ownerElement));\n      \n      // Created at\n      String createdAt = docRootElement.getChildText(\"created-at\");\n      if (createdAt != null && !createdAt.equals(\"\")) {\n        p.setCreatedAt(MyExperimentClient.parseDate(createdAt));\n      }\n      \n      // Updated at\n      String updatedAt = docRootElement.getChildText(\"updated-at\");\n      if (updatedAt != null && !updatedAt.equals(\"\")) {\n        p.setUpdatedAt(MyExperimentClient.parseDate(updatedAt));\n      }\n      \n      // Tags\n      p.tags = new ArrayList<Tag>();\n      p.getTags().addAll(Util.retrieveTags(docRootElement));\n      \n      // Comments\n      p.comments = new ArrayList<Comment>();\n      p.getComments().addAll(Util.retrieveComments(docRootElement, p));\n      \n      \n      // === All items will be stored together in one array ===\n      p.items = new ArrayList<PackItem>();\n      int iCount = 0;\n      \n      // adding internal items first\n      Element itemsElement = docRootElement.getChild(\"internal-pack-items\");\n      if (itemsElement != null) {\n        List<Element> itemsNodes = itemsElement.getChildren();\n        for (Element e : itemsNodes) {\n          Document docCurrentItem = client.getResource(Resource.PACK_INTERNAL_ITEM, e.getAttributeValue(\"uri\"), Resource.REQUEST_DEFAULT_FROM_API);\n          PackItem piCurrentItem = PackItem.buildFromXML(docCurrentItem, logger);\n          \n          p.getItems().add(piCurrentItem);\n          iCount++;\n        }\n      }\n      \n      // now adding external items\n      itemsElement = docRootElement.getChild(\"external-pack-items\");\n      if (itemsElement != null) {\n        List<Element> itemsNodes = itemsElement.getChildren();\n        for (Element e : itemsNodes) {\n          Document docCurrentItem = client.getResource(Resource.PACK_EXTERNAL_ITEM, e.getAttributeValue(\"uri\"), Resource.REQUEST_DEFAULT_FROM_API);\n          PackItem piCurrentItem = PackItem.buildFromXML(docCurrentItem, logger);\n          \n          p.getItems().add(piCurrentItem);\n          iCount++;\n        }\n      }\n      \n      // sort the items after all of those have been added\n      Collections.sort(p.getItems());\n      \n      \n      logger.debug(\"Found information for pack with ID: \" + p.getID() + \", Title: \" + p.getTitle());\n    }\n    catch (Exception e) {\n      logger.error(\"Failed midway through creating pack object from XML\", e);\n   }\n    \n    // return created pack instance\n    return(p);\n  }\n}<fim_middle>// function below has no smell\n"}