{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.artemis.ra;\nimport javax.jms.BytesMessage;\nimport javax.jms.JMSException;\nimport java.util.Arrays;\n/**\n * A wrapper for a message\n */\npublic class ActiveMQRABytesMessage extends ActiveMQRAMessage implements BytesMessage {\n   /**\n    * Create a new wrapper\n    *\n    * @param message the message\n    * @param session the session\n    */\n   public ActiveMQRABytesMessage(final BytesMessage message, final ActiveMQRASession session) {\n      super(message, session);\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"constructor(\" + message + \", \" + session + \")\");\n      }\n   }\n   /**\n    * Get body length\n    *\n    * @return The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public long getBodyLength() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"getBodyLength()\");\n      }\n      return ((BytesMessage) message).getBodyLength();\n   }\n   /**\n    * Read\n    *\n    * @return The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public boolean readBoolean() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readBoolean()\");\n      }\n      return ((BytesMessage) message).readBoolean();\n   }\n   /**\n    * Read\n    *\n    * @return The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public byte readByte() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readByte()\");\n      }\n      return ((BytesMessage) message).readByte();\n   }\n   /**\n    * Read\n    *\n    * @param value  The value\n    * @param length The length\n    * @return The result\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public int readBytes(final byte[] value, final int length) throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readBytes(\" + Arrays.toString(value) + \", \" + length + \")\");\n      }\n      return ((BytesMessage) message).readBytes(value, length);\n   }\n   /**\n    * Read\n    *\n    * @param value The value\n    * @return The result\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public int readBytes(final byte[] value) throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readBytes(\" + Arrays.toString(value) + \")\");\n      }\n      return ((BytesMessage) message).readBytes(value);\n   }\n   /**\n    * Read\n    *\n    * @return The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public char readChar() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readChar()\");\n      }\n      return ((BytesMessage) message).readChar();\n   }\n   /**\n    * Read\n    *\n    * @return The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public double readDouble() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readDouble()\");\n      }\n      return ((BytesMessage) message).readDouble();\n   }\n   /**\n    * Read\n    *\n    * @return The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public float readFloat() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readFloat()\");\n      }\n      return ((BytesMessage) message).readFloat();\n   }\n   /**\n    * Read\n    *\n    * @return The value\n    * @throws JMSException Thrown if an error occurs\n    */\n<fim_suffix>   @Override\n   public int readInt() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readInt()\");\n      }\n      return ((BytesMessage) message).readInt();\n   }\n   /**\n    * Read\n    *\n    * @return The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public long readLong() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readLong()\");\n      }\n      return ((BytesMessage) message).readLong();\n   }\n   /**\n    * Read\n    *\n    * @return The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public short readShort() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readShort()\");\n      }\n      return ((BytesMessage) message).readShort();\n   }\n   /**\n    * Read\n    *\n    * @return The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public int readUnsignedByte() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readUnsignedByte()\");\n      }\n      return ((BytesMessage) message).readUnsignedByte();\n   }\n   /**\n    * Read\n    *\n    * @return The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public int readUnsignedShort() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readUnsignedShort()\");\n      }\n      return ((BytesMessage) message).readUnsignedShort();\n   }\n   /**\n    * Read\n    *\n    * @return The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public String readUTF() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"readUTF()\");\n      }\n      return ((BytesMessage) message).readUTF();\n   }\n   /**\n    * Reset\n    *\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public void reset() throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"reset()\");\n      }\n      ((BytesMessage) message).reset();\n   }\n   /**\n    * Write\n    *\n    * @param value The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public void writeBoolean(final boolean value) throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"writeBoolean(\" + value + \")\");\n      }\n      ((BytesMessage) message).writeBoolean(value);\n   }\n   /**\n    * Write\n    *\n    * @param value The value\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public void writeByte(final byte value) throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {\n         ActiveMQRALogger.LOGGER.trace(\"writeByte(\" + value + \")\");\n      }\n      ((BytesMessage) message).writeByte(value);\n   }\n   /**\n    * Write\n    *\n    * @param value  The value\n    * @param offset The offset\n    * @param length The length\n    * @throws JMSException Thrown if an error occurs\n    */\n   @Override\n   public void writeBytes(final byte[] value, final int offset, final int length) throws JMSException {\n      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {<fim_middle>// function below has no smell\n"}