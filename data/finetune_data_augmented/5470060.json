{"text": "<fim_prefix>\n<fim_suffix>public class MemoryConsumptionTestClient\n{\n    private static final Logger LOGGER = LoggerFactory.getLogger(MemoryConsumptionTestClient.class);\n    private static final String RESULTS_FILE_ARG = \"resultsFile\";\n    private static final String JNDI_PROPERTIES_ARG = \"jndiProperties\";\n    private static final String JNDI_CONNECTION_FACTORY_ARG = \"jndiConnectionFactory\";\n    private static final String JNDI_DESTINATION_ARG = \"jndiDestination\";\n    private static final String CONNECTIONS_ARG = \"connections\";\n    private static final String SESSIONS_ARG = \"sessions\";\n    private static final String PRODUCERS_ARG = \"producers\";\n    private static final String MESSAGE_COUNT_ARG = \"messagecount\";\n    private static final String MESSAGE_SIZE_ARG = \"size\";\n    private static final String PERSISTENT_ARG = \"persistent\";\n    private static final String TIMEOUT_ARG = \"timeout\";\n    private static final String TRANSACTED_ARG = \"transacted\";\n    private static final String JMX_HOST_ARG = \"jmxhost\";\n    private static final String JMX_PORT_ARG = \"jmxport\";\n    private static final String JMX_USER_ARG = \"jmxuser\";\n    private static final String JMX_USER_PASSWORD_ARG = \"jmxpassword\";\n    private static final String RESULTS_FILE_DEFAULT = \"results.csv\";\n    private static final String JNDI_PROPERTIES_DEFAULT = \"stress-test-client-qpid-jms-client-0-x.properties\";\n    private static final String JNDI_CONNECTION_FACTORY_DEFAULT = \"qpidConnectionFactory\";\n    private static final String JNDI_DESTINATION_DEFAULT = \"stressTestQueue\";\n    private static final String CONNECTIONS_DEFAULT = \"1\";\n    private static final String SESSIONS_DEFAULT = \"1\";\n    private static final String PRODUCERS_DEFAULT = \"1\";\n    private static final String MESSAGE_COUNT_DEFAULT = \"1\";\n    private static final String MESSAGE_SIZE_DEFAULT = \"256\";\n    private static final String PERSISTENT_DEFAULT = \"false\";\n    private static final String TIMEOUT_DEFAULT = \"1000\";\n    private static final String TRANSACTED_DEFAULT = \"false\";\n    private static final String JMX_HOST_DEFAULT = \"localhost\";\n    private static final String JMX_PORT_DEFAULT = \"8999\";\n    private static final String JMX_GARBAGE_COLLECTOR_MBEAN = \"gc\";\n    public static void main(String[] args) throws Exception\n    {\n        Map<String,String> options = new HashMap<>();\n        options.put(RESULTS_FILE_ARG, RESULTS_FILE_DEFAULT);\n        options.put(JNDI_PROPERTIES_ARG, JNDI_PROPERTIES_DEFAULT);\n        options.put(JNDI_CONNECTION_FACTORY_ARG, JNDI_CONNECTION_FACTORY_DEFAULT);\n        options.put(JNDI_DESTINATION_ARG, JNDI_DESTINATION_DEFAULT);\n        options.put(CONNECTIONS_ARG, CONNECTIONS_DEFAULT);\n        options.put(SESSIONS_ARG, SESSIONS_DEFAULT);\n        options.put(PRODUCERS_ARG, PRODUCERS_DEFAULT);\n        options.put(MESSAGE_COUNT_ARG, MESSAGE_COUNT_DEFAULT);\n        options.put(MESSAGE_SIZE_ARG, MESSAGE_SIZE_DEFAULT);\n        options.put(PERSISTENT_ARG, PERSISTENT_DEFAULT);\n        options.put(TIMEOUT_ARG, TIMEOUT_DEFAULT);\n        options.put(TRANSACTED_ARG, TRANSACTED_DEFAULT);\n        options.put(JMX_HOST_ARG, JMX_HOST_DEFAULT);\n        options.put(JMX_PORT_ARG, JMX_PORT_DEFAULT);\n        options.put(JMX_USER_ARG, \"\");\n        options.put(JMX_USER_PASSWORD_ARG, \"\");\n        options.put(JMX_GARBAGE_COLLECTOR_MBEAN, \"java.lang:type=GarbageCollector,name=ConcurrentMarkSweep\");\n        if(args.length == 1 &&\n                (args[0].equals(\"-h\") || args[0].equals(\"--help\") || args[0].equals(\"help\")))\n        {\n            System.out.println(\"arg=value options: \\n\" + options.keySet());\n            return;\n        }\n        parseArgumentsIntoConfig(options, args);\n        MemoryConsumptionTestClient testClient = new MemoryConsumptionTestClient();\n        testClient.runTest(options);\n    }\n    private static void parseArgumentsIntoConfig(Map<String, String> initialValues, String[] args)\n    {\n        for(String arg: args)\n        {\n            int equalPos = arg.indexOf('=');\n            if(equalPos == -1)\n            {\n                throw new IllegalArgumentException(\"arguments must have format <name>=<value>: \" + arg);\n            }\n            if(initialValues.put(arg.substring(0, equalPos), arg.substring(equalPos + 1)) == null)\n            {\n                throw new IllegalArgumentException(\"not a valid configuration property: \" + arg);\n            }\n        }\n    }\n    private void runTest(Map<String,String> options) throws Exception\n    {\n        String resultsFile = options.get(RESULTS_FILE_ARG);\n        String jndiProperties = options.get(JNDI_PROPERTIES_ARG);\n        String connectionFactoryString = options.get(JNDI_CONNECTION_FACTORY_ARG);\n        int numConnections = Integer.parseInt(options.get(CONNECTIONS_ARG));\n        int numSessions = Integer.parseInt(options.get(SESSIONS_ARG));\n        int numProducers = Integer.parseInt(options.get(PRODUCERS_ARG));\n        int numMessage = Integer.parseInt(options.get(MESSAGE_COUNT_ARG));\n        int messageSize = Integer.parseInt(options.get(MESSAGE_SIZE_ARG));\n        String queueString = options.get(JNDI_DESTINATION_ARG);\n        int deliveryMode = Boolean.valueOf(options.get(PERSISTENT_ARG)) ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT;\n        long receiveTimeout = Long.parseLong(options.get(TIMEOUT_ARG));\n        boolean transacted = Boolean.valueOf(options.get(TRANSACTED_ARG));\n        LOGGER.info(\"Using options: \" + options);\n        // Load JNDI properties\n        Context ctx = getInitialContext(jndiProperties);\n        final ConnectionFactory conFac = (ConnectionFactory) ctx.lookup(connectionFactoryString);\n        Destination destination = ensureQueueCreated(queueString, conFac);\n        Map<Connection, List<Session>> connectionsAndSessions = openConnectionsAndSessions(numConnections, numSessions, transacted, conFac);\n        publish(numMessage, messageSize, numProducers, deliveryMode, destination, connectionsAndSessions);\n        MemoryStatistic memoryStatistics = collectMemoryStatistics(options);\n        generateCSV(memoryStatistics, numConnections, numSessions, transacted, numMessage, messageSize, numProducers, deliveryMode, resultsFile);\n        purgeQueue(conFac, queueString, receiveTimeout);\n        closeConnections(connectionsAndSessions.keySet());\n        System.exit(0);\n    }\n    private void generateCSV(MemoryStatistic memoryStatistics,\n                             int numConnections,\n                             int numSessions,\n                             boolean transacted,\n                             int numMessage,\n                             int messageSize,\n                             int numProducers,\n                             int deliveryMode,\n                             final String resultsFile) throws IOException\n    {\n        try (FileWriter writer = new FileWriter(resultsFile))\n        {\n            writer.write(memoryStatistics.getHeapUsage()\n                         + \",\"\n                         + memoryStatistics.getDirectMemoryUsage()\n                         + \",\"\n                         + numConnections\n                         + \",\"\n                         + numSessions\n                         + \",\"\n                         + numProducers\n                         + \",\"\n                         + transacted\n                         + \",\"\n                         + numMessage\n                         + \",\"\n                         + messageSize\n                         + \",\"\n                         + deliveryMode\n                         + \",\"\n                         + toUserFriendlyName(memoryStatistics.getHeapUsage())\n                         + \",\"\n                         + toUserFriendlyName(memoryStatistics.getDirectMemoryUsage())\n                         + System.lineSeparator());\n        }\n    }\n    private void publish(int numberOfMessages, int messageSize, int numberOfProducers, int deliveryMode,\n                         Destination destination, Map<Connection, List<Session>> connectionsAndSessions) throws JMSException\n    {\n        byte[] messageBytes = generateMessage(messageSize);\n        for (List<Session> sessions : connectionsAndSessions.values())\n        {\n            for (Session session: sessions)\n            {\n                BytesMessage message = session.createBytesMessage();\n                if (messageSize > 0)\n                {\n                    message.writeBytes(messageBytes);\n                }\n                for(int i = 0; i < numberOfProducers ; i++)\n                {\n                    MessageProducer prod = session.createProducer(destination);\n                    for(int j = 0; j < numberOfMessages ; j++)\n                    {\n                        prod.send(message, deliveryMode, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);\n                        if(session.getTransacted())\n                        {\n                            session.commit();\n                        }\n                    }\n                }<fim_middle>// class below is blob\n"}