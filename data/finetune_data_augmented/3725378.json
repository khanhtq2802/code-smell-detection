{"text": "<fim_prefix>    }\n}\nclass EmptyClassStructure implements ClassStructure {\n    @Override\n    public String getJavaClassName() {\n        return null;\n    }\n    @Override\n    public ClassLoader getClassLoader() {\n        return null;\n    }\n    @Override\n    public ClassStructure getSuperClassStructure() {\n        return null;\n    }\n    @Override\n    public List<ClassStructure> getInterfaceClassStructures() {\n        return Collections.emptyList();\n    }\n    @Override\n    public LinkedHashSet<ClassStructure> getFamilySuperClassStructures() {\n        return new LinkedHashSet<ClassStructure>();\n    }\n    @Override\n    public Set<ClassStructure> getFamilyInterfaceClassStructures() {\n        return Collections.emptySet();\n    }\n    @Override\n    public Set<ClassStructure> getFamilyTypeClassStructures() {\n        return Collections.emptySet();\n    }\n    @Override\n    public List<ClassStructure> getAnnotationTypeClassStructures() {\n        return Collections.emptyList();\n    }\n    @Override\n    public Set<ClassStructure> getFamilyAnnotationTypeClassStructures() {\n        return Collections.emptySet();\n    }\n    @Override\n    public List<BehaviorStructure> getBehaviorStructures() {\n        return Collections.emptyList();\n    }\n    @Override\n    public Access getAccess() {\n        return new AccessImplByAsm(0);\n    }\n}\n/**\n * JDK\u539f\u751f\u7c7b\u578b\u7ed3\u6784\u4f53\n */\nclass PrimitiveClassStructure extends EmptyClassStructure {\n    private final Primitive primitive;\n    PrimitiveClassStructure(Primitive primitive) {\n        this.primitive = primitive;\n    }\n    public enum Primitive {\n        BOOLEAN(\"boolean\", boolean.class),\n        CHAR(\"char\", char.class),\n        BYTE(\"byte\", byte.class),\n        INT(\"int\", int.class),\n        SHORT(\"short\", short.class),\n        LONG(\"long\", long.class),\n        FLOAT(\"float\", float.class),\n        DOUBLE(\"double\", double.class),\n        VOID(\"void\", void.class);\n        private final String type;\n        private final Access access;\n        Primitive(final String type, final Class<?> clazz) {\n            this.type = type;\n            this.access = new AccessImplByJDKClass(clazz);\n        }\n    }\n    @Override\n    public Access getAccess() {\n        return primitive.access;\n    }\n    @Override\n    public String getJavaClassName() {\n        return primitive.type;\n    }\n    static Primitive mappingPrimitiveByJavaClassName(final String javaClassName) {\n        for (final Primitive primitive : Primitive.values()) {\n            if (primitive.type.equals(javaClassName)) {\n                return primitive;\n            }\n        }\n        return null;\n    }\n}\nclass ArrayClassStructure extends EmptyClassStructure {\n    private final ClassStructure elementClassStructure;\n    ArrayClassStructure(ClassStructure elementClassStructure) {\n        this.elementClassStructure = elementClassStructure;\n    }\n    @Override\n    public String getJavaClassName() {\n        return elementClassStructure.getJavaClassName() + \"[]\";\n    }\n}\n/**\n * \u7528ASM\u5b9e\u73b0\u7684\u7c7b\u7ed3\u6784\n *\n * @author luanjia@taobao.com\n */\npublic class ClassStructureImplByAsm extends FamilyClassStructure {\n    private final Logger logger = LoggerFactory.getLogger(getClass());\n    private final ClassReader classReader;\n    private final ClassLoader loader;\n    private final Access access;\n    ClassStructureImplByAsm(final InputStream classInputStream,\n                                   final ClassLoader loader) throws IOException {\n        this(IOUtils.toByteArray(classInputStream), loader);\n    }\n    ClassStructureImplByAsm(final byte[] classByteArray,\n                                   final ClassLoader loader) {\n        this.classReader = new ClassReader(classByteArray);\n        this.loader = loader;\n        this.access = fixAccess();\n    }\n    /**\n     * \u4fee\u6b63\u5185\u90e8\u7c7b\u65f6\u5019Access\u7684\u83b7\u53d6\u7b56\u7565\u5dee\u5f02\n     *\n     * @return \u4fee\u6b63\u540e\u7684Access\n     */\n    private Access fixAccess() {\n        final AtomicInteger accessRef = new AtomicInteger(this.classReader.getAccess());\n        final String internalClassName = this.classReader.getClassName();\n        this.classReader.accept(new ClassVisitor(ASM7) {\n            @Override\n            public void visitInnerClass(String name, String outerName, String innerName, int access) {\n                if (StringUtils.equals(name, internalClassName)) {\n                    accessRef.set(access);\n                }\n            }\n        }, ASM7);\n        return new AccessImplByAsm(accessRef.get());\n    }\n    private boolean isBootstrapClassLoader() {\n        return null == loader;\n    }\n    // \u83b7\u53d6\u8d44\u6e90\u6570\u636e\u6d41\n    // \u4e00\u822c\u800c\u8a00\u53ef\u4ee5\u4eceloader\u76f4\u63a5\u83b7\u53d6\uff0c\u5982\u679c\u83b7\u53d6\u4e0d\u5230\u90a3\u4e48\u8fd9\u4e2a\u7c7b\u4e5f\u4f1a\u80fd\u52a0\u8f7d\u6210\u529f\n    // \u4f46\u5982\u679c\u9047\u5230\u6765\u81eaBootstrapClassLoader\u7684\u7c7b\u5c31\u5fc5\u987b\u4ecejava.lang.Object\u6765\u83b7\u53d6\n    private InputStream getResourceAsStream(final String resourceName) {\n        return isBootstrapClassLoader()\n                ? Object.class.getResourceAsStream(\"/\" + resourceName)\n                : loader.getResourceAsStream(resourceName);\n    }\n    // \u5c06\u5185\u90e8\u7c7b\u540d\u79f0\u8f6c\u6362\u4e3a\u8d44\u6e90\u540d\u79f0\n    private String internalClassNameToResourceName(final String internalClassName) {\n        return internalClassName + \".class\";\n    }\n    private final static GaLRUCache<Pair, ClassStructure> classStructureCache\n            = new GaLRUCache<Pair, ClassStructure>(1024);\n    // \u6784\u9020\u4e00\u4e2a\u7c7b\u7ed3\u6784\u5b9e\u4f8b\n    private ClassStructure newInstance(final String javaClassName) {\n        // \u7a7a\u8f7d\u4fdd\u62a4\n        if (null == javaClassName) {\n            return null;\n        }\n        // \u662f\u4e2a\u6570\u7ec4\u7c7b\u578b\n        if (javaClassName.endsWith(\"[]\")) {\n            return new ArrayClassStructure(newInstance(javaClassName.substring(0, javaClassName.length() - 2)));\n        }\n        // \u662f\u4e2a\u57fa\u672c\u7c7b\u578b\n        final Primitive primitive = mappingPrimitiveByJavaClassName(javaClassName);\n        if (null != primitive) {\n            return new PrimitiveClassStructure(primitive);\n        }\n        final Pair pair = new Pair(loader, javaClassName);\n        if (classStructureCache.containsKey(pair)) {\n            return classStructureCache.get(pair);\n        } else {\n            final InputStream is = getResourceAsStream(internalClassNameToResourceName(toInternalClassName(javaClassName)));\n            if (null != is) {\n                try {\n                    final ClassStructure classStructure = new ClassStructureImplByAsm(is, loader);\n                    classStructureCache.put(pair, classStructure);\n                    return classStructure;\n                } catch (Throwable cause) {\n                    // ignore\n                    logger.warn(\"new instance class structure by using ASM failed, will return null. class={};loader={};\",\n                            javaClassName, loader, cause);\n                    classStructureCache.put(pair, null);\n                } finally {\n                    IOUtils.closeQuietly(is);\n                }\n            }\n        }\n        // \u51fa\u73b0\u5f02\u5e38\u6216\u8005\u627e\u4e0d\u5230\n        return null;\n    }\n    // \u6784\u9020\u4e00\u4e2a\u7c7b\u7ed3\u6784\u5b9e\u4f8b\u6570\u7ec4\n    private List<ClassStructure> newInstances(final String[] javaClassNameArray) {\n        final List<ClassStructure> classStructures = new ArrayList<ClassStructure>();\n        if (null == javaClassNameArray) {\n            return classStructures;\n        }\n        for (final String javaClassName : javaClassNameArray) {\n            final ClassStructure classStructure = newInstance(javaClassName);\n            if (null != classStructure) {\n                classStructures.add(classStructure);\n            }\n        }\n        return classStructures;\n    }\n    // \u904d\u5386\u4e00\u4e2a\u7c7b\u7ed3\u6784\n    private void accept(final ClassVisitor cv) {\n        classReader.accept(cv, SKIP_CODE | SKIP_DEBUG | SKIP_FRAMES);\n    }\n    @Override\n    public String getJavaClassName() {\n        return toJavaClassName(classReader.getClassName());\n    }\n    @Override\n    public ClassLoader getClassLoader() {\n        return loader;\n    }\n    private final LazyGet<ClassStructure> superClassStructureLazyGet\n            = new LazyGet<ClassStructure>() {\n        @Override\n        protected ClassStructure initialValue() {\n            final String superInternalClassName = classReader.getSuperName();\n            if (StringUtils.equals(\"java/lang/Object\", superInternalClassName)) {\n                return null;\n            }\n            return newInstance(toJavaClassName(superInternalClassName));\n        }\n    };\n    @Override\n    public ClassStructure getSuperClassStructure() {\n        return superClassStructureLazyGet.get();\n    }\n    private final LazyGet<List<ClassStructure>> interfaceClassStructuresLazyGet\n            = new LazyGet<List<ClassStructure>>() {\n        @Override\n        protected List<ClassStructure> initialValue() {\n            return newInstances(classReader.getInterfaces());\n        }\n    };\n    @Override\n    public List<ClassStructure> getInterfaceClassStructures() {\n        return interfaceClassStructuresLazyGet.get();\n    }\n    private final LazyGet<List<ClassStructure>> annotationTypeClassStructuresLazyGet\n            = new LazyGet<List<ClassStructure>>() {\n<fim_suffix>        @Override\n        protected List<ClassStructure> initialValue() {\n            final List<ClassStructure> annotationTypeClassStructures = new ArrayList<ClassStructure>();\n            accept(new ClassVisitor(ASM7) {\n                @Override\n                public AnnotationVisitor visitAnnotation(String desc, boolean visible) {\n                    if (visible) {\n                        final ClassStructure annotationTypeClassStructure = newInstance(Type.getType(desc).getClassName());\n                        if (null != annotationTypeClassStructure) {\n                            annotationTypeClassStructures.add(annotationTypeClassStructure);\n                        }\n                    }\n                    return super.visitAnnotation(desc, visible);\n                }\n            });\n            return annotationTypeClassStructures;\n        }<fim_middle>// function below has no smell\n"}