{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.schematron.processor;\n\nimport java.io.StringWriter;\n\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Templates;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.sax.SAXSource;\nimport javax.xml.transform.stream.StreamResult;\n\nimport org.xml.sax.InputSource;\nimport org.xml.sax.XMLReader;\n\nimport org.apache.camel.component.schematron.exception.SchematronValidationException;\nimport org.apache.commons.io.IOUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n\n/**\n * The schematoron Engine. Validates an XML for given scheamtron rules using an XSLT implementation of the Schematron\n * Engine.\n * <p/>\n */\n<fim_suffix>public class SchematronProcessor {\n\n    private Logger logger = LoggerFactory.getLogger(SchematronProcessor.class);\n    private XMLReader reader;\n    private Templates templates;\n\n    /**\n     * Constructor setting the XSLT schematron templates.\n     *\n     * @param reader\n     * @param templates\n     */\n    public SchematronProcessor(XMLReader reader, Templates templates) {\n        this.reader = reader;\n        this.templates = templates;\n    }\n\n    /**\n     * Validates the given XML for given Rules.\n     *\n     * @param xml\n     * @return\n     */\n    public String validate(final String xml) {\n        final Source source = new SAXSource(reader, new InputSource(IOUtils.toInputStream(xml)));\n        return validate(source);\n    }\n\n    /**\n     * Validates the given XML for given Rules.\n     *\n     * @param source\n     * @return\n     */\n    public String validate(Source source) {\n        try {\n            final StringWriter writer = new StringWriter();\n            templates.newTransformer().transform(source, new StreamResult(writer));\n            return writer.toString();\n        } catch (TransformerException e) {\n            logger.error(e.getMessage());\n            throw new SchematronValidationException(\"Failed to apply Schematron validation transform\", e);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}