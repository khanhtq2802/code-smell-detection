{"text": "<fim_prefix>/*\n   Copyright (c) 2012 LinkedIn Corp.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\npackage com.linkedin.d2.balancer.clients;\n\n\nimport com.linkedin.common.callback.Callback;\nimport com.linkedin.common.util.None;\nimport com.linkedin.d2.balancer.LoadBalancerClient;\nimport com.linkedin.d2.balancer.util.D2URIRewriter;\nimport com.linkedin.d2.balancer.util.LoadBalancerUtil;\nimport com.linkedin.r2.message.RequestContext;\nimport com.linkedin.r2.message.rest.RestRequest;\nimport com.linkedin.r2.message.rest.RestResponse;\nimport com.linkedin.r2.message.stream.StreamRequest;\nimport com.linkedin.r2.message.stream.StreamResponse;\nimport com.linkedin.r2.transport.common.bridge.client.TransportClient;\nimport com.linkedin.r2.transport.common.bridge.common.TransportCallback;\n\nimport java.net.URI;\nimport java.util.Map;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport static com.linkedin.d2.discovery.util.LogUtil.debug;\n\n<fim_suffix>public class RewriteLoadBalancerClient implements LoadBalancerClient\n{\n  private static final Logger      _log = LoggerFactory.getLogger(TrackerClient.class);\n\n  private final String          _serviceName;\n  private final URI             _uri;\n  private final RewriteClient _client;\n\n  public RewriteLoadBalancerClient(String serviceName, URI uri, TransportClient client)\n  {\n    _serviceName = serviceName;\n    _uri = uri;\n    _client = new RewriteClient(client, new D2URIRewriter(uri));\n    debug(_log, \"created rewrite client: \", this);\n  }\n\n  @Override\n  public void restRequest(RestRequest request,\n                   RequestContext requestContext,\n                   Map<String, String> wireAttrs,\n                   TransportCallback<RestResponse> callback)\n  {\n    assert _serviceName.equals(LoadBalancerUtil.getServiceNameFromUri(request.getURI()));\n    _client.restRequest(request, requestContext, wireAttrs, callback);\n  }\n\n  @Override\n  public void streamRequest(StreamRequest request,\n                          RequestContext requestContext,\n                          Map<String, String> wireAttrs,\n                          TransportCallback<StreamResponse> callback)\n  {\n    assert _serviceName.equals(LoadBalancerUtil.getServiceNameFromUri(request.getURI()));\n    _client.streamRequest(request, requestContext, wireAttrs, callback);\n  }\n\n  @Override\n  public void shutdown(Callback<None> callback)\n  {\n    _client.shutdown(callback);\n  }\n\n  @Deprecated\n  public TransportClient getWrappedClient()\n  {\n    return _client;\n  }\n\n  public TransportClient getDecoratedClient()\n  {\n    return _client;\n  }\n\n  @Override\n  public URI getUri()\n  {\n    return _uri;\n  }\n\n  public String getServiceName()\n  {\n    return _serviceName;\n  }\n\n  @Override\n  public String toString()\n  {\n    return \"RewriteLoadBalancerClient [_serviceName=\" + _serviceName + \", _uri=\" + _uri\n        + \", _wrappedClient=\" + _client + \"]\";\n  }\n}<fim_middle>// class below has no smell\n"}