{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ambari.server.api.query.render;\n\nimport java.util.Set;\n\nimport org.apache.ambari.server.api.query.QueryInfo;\nimport org.apache.ambari.server.api.services.Request;\nimport org.apache.ambari.server.api.services.Result;\nimport org.apache.ambari.server.api.services.ResultImpl;\nimport org.apache.ambari.server.api.services.ResultPostProcessor;\nimport org.apache.ambari.server.api.services.ResultPostProcessorImpl;\nimport org.apache.ambari.server.api.util.TreeNode;\nimport org.apache.ambari.server.api.util.TreeNodeImpl;\nimport org.apache.ambari.server.controller.internal.AlertResourceProvider;\nimport org.apache.ambari.server.controller.internal.ResourceImpl;\nimport org.apache.ambari.server.controller.spi.Resource;\nimport org.apache.ambari.server.state.AlertState;\nimport org.apache.ambari.server.state.MaintenanceState;\n\n/**\n * The {@link AlertSummaryRenderer} is used to format the results of queries to\n * the alerts endpoint. Each item returned from the query represents an\n * individual current alert which is then aggregated into a summary structure\n * based on the alert state.\n * <p/>\n * The finalized structure is:\n *\n * <pre>\n * {\n *   \"href\" : \"http://localhost:8080/api/v1/clusters/c1/alerts?format=summary\",\n *   \"alerts_summary\" : {\n *     \"CRITICAL\" : {\n *       \"count\" : 3,\n *       \"maintenance_count\" : 1,\n *       \"original_timestamp\" : 1415372828182\n *     },\n *     \"OK\" : {\n *       \"count\" : 37,\n *       \"maintenance_count\" : 0,\n *       \"original_timestamp\" : 1415375364937\n *     },\n *     \"UNKNOWN\" : {\n *       \"count\" : 1,\n *       \"maintenance_count\" : 0,\n *       \"original_timestamp\" : 1415372632261\n *     },\n *     \"WARN\" : {\n *       \"count\" : 0,\n *       \"maintenance_count\" : 0,\n *       \"original_timestamp\" : 0\n *     }\n *   }\n * }\n * </pre>\n * <p/>\n * The nature of a {@link Renderer} is that it manipulates the dataset returned\n * by a query. In the case of alert data, the query could potentially return\n * thousands of results if there are thousands of nodes in the cluster. This\n * could present a performance issue that can only be addressed by altering the\n * incoming query and modifying it to instruct the backend to return a JPA SUM\n * instead of a collection of entities.\n */\npublic class AlertSummaryRenderer extends BaseRenderer implements Renderer {\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public TreeNode<Set<String>> finalizeProperties(\n      TreeNode<QueryInfo> queryTree, boolean isCollection) {\n\n    QueryInfo queryInfo = queryTree.getObject();\n    TreeNode<Set<String>> resultTree = new TreeNodeImpl<>(\n      null, queryInfo.getProperties(), queryTree.getName());\n\n    copyPropertiesToResult(queryTree, resultTree);\n\n    boolean addKeysToEmptyResource = true;\n    if (!isCollection && isRequestWithNoProperties(queryTree)) {\n      addSubResources(queryTree, resultTree);\n      addKeysToEmptyResource = false;\n    }\n\n    ensureRequiredProperties(resultTree, addKeysToEmptyResource);\n\n    // ensure that state and original_timestamp are on the request since these\n    // are required by the finalization process of this renderer\n    Set<String> properties = resultTree.getObject();\n    addRequiredAlertProperties(properties);\n\n    return resultTree;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ResultPostProcessor getResultPostProcessor(Request request) {\n    // simply return the native rendering\n    return new ResultPostProcessorImpl(request);\n  }\n\n  /**\n   * {@inheritDoc}\n   * <p/>\n   * This will iterate over all of the nodes in the result tree and combine\n   * their {@link AlertResourceProvider#ALERT_STATE} into a single summary\n   * structure.\n   */\n  @Override\n  public Result finalizeResult(Result queryResult) {\n    TreeNode<Resource> resultTree = queryResult.getResultTree();\n    AlertStateSummary alertSummary = new AlertStateSummary();\n\n    // iterate over all returned flattened alerts and build the summary info\n    for (TreeNode<Resource> node : resultTree.getChildren()) {\n      Resource resource = node.getObject();\n      AlertState state = (AlertState) resource.getPropertyValue(AlertResourceProvider.ALERT_STATE);\n      Long originalTimestampObject = (Long) resource.getPropertyValue(AlertResourceProvider.ALERT_ORIGINAL_TIMESTAMP);\n      MaintenanceState maintenanceState = (MaintenanceState) resource.getPropertyValue(AlertResourceProvider.ALERT_MAINTENANCE_STATE);\n\n      // NPE sanity\n      if (null == state) {\n        state = AlertState.UNKNOWN;\n      }\n\n      // NPE sanity\n      long originalTimestamp = 0;\n      if (null != originalTimestampObject) {\n        originalTimestamp = originalTimestampObject.longValue();\n      }\n\n      // NPE sanity\n      boolean isMaintenanceModeEnabled = false;\n      if (null != maintenanceState && maintenanceState != MaintenanceState.OFF) {\n        isMaintenanceModeEnabled = true;\n      }\n\n      final AlertStateValues alertStateValues;\n      switch (state) {\n        case CRITICAL: {\n          alertStateValues = alertSummary.Critical;\n          break;\n        }\n        case OK: {\n          alertStateValues = alertSummary.Ok;\n          break;\n        }\n        case WARNING: {\n          alertStateValues = alertSummary.Warning;\n          break;\n        }\n        default:\n        case UNKNOWN: {\n          alertStateValues = alertSummary.Unknown;\n          break;\n        }\n      }\n\n      if (isMaintenanceModeEnabled) {\n        alertStateValues.MaintenanceCount++;\n      } else {\n        alertStateValues.Count++;\n      }\n\n      if (originalTimestamp > alertStateValues.Timestamp) {\n        alertStateValues.Timestamp = originalTimestamp;\n      }\n    }\n\n    Result summary = new ResultImpl(true);\n    Resource resource = new ResourceImpl(Resource.Type.Alert);\n    TreeNode<Resource> summaryTree = summary.getResultTree();\n    summaryTree.addChild(resource, \"alerts_summary\");\n    resource.setProperty(\"alerts_summary\", alertSummary);\n\n    return summary;\n  }\n\n  /**\n   * Adds properties to the backend request that are required by this renderer.\n   * This method currently adds {@link AlertResourceProvider#ALERT_STATE} and\n   * {@link AlertResourceProvider#ALERT_ORIGINAL_TIMESTAMP}.\n   *\n   * @param properties\n   *          the properties collection to add to.\n   */\n<fim_suffix>  protected void addRequiredAlertProperties(Set<String> properties) {\n    properties.add(AlertResourceProvider.ALERT_STATE);\n    properties.add(AlertResourceProvider.ALERT_ORIGINAL_TIMESTAMP);\n    properties.add(AlertResourceProvider.ALERT_MAINTENANCE_STATE);\n  }\n}<fim_middle>// function below is feature envy\n"}