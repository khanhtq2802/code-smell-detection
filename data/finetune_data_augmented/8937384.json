{"text": "<fim_prefix>/**\n * Autogenerated by Thrift Compiler (0.9.3)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage org.apache.hive.service.rpc.thrift;\nimport org.apache.thrift.scheme.IScheme;\nimport org.apache.thrift.scheme.SchemeFactory;\nimport org.apache.thrift.scheme.StandardScheme;\nimport org.apache.thrift.scheme.TupleScheme;\nimport org.apache.thrift.protocol.TTupleProtocol;\nimport org.apache.thrift.protocol.TProtocolException;\nimport org.apache.thrift.EncodingUtils;\nimport org.apache.thrift.TException;\nimport org.apache.thrift.async.AsyncMethodCallback;\nimport org.apache.thrift.server.AbstractNonblockingServer.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.EnumMap;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.EnumSet;\nimport java.util.Collections;\nimport java.util.BitSet;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\nimport javax.annotation.Generated;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})\n@Generated(value = \"Autogenerated by Thrift Compiler (0.9.3)\")\n@org.apache.hadoop.hive.common.classification.InterfaceAudience.Public @org.apache.hadoop.hive.common.classification.InterfaceStability.Stable public class TCloseOperationResp implements org.apache.thrift.TBase<TCloseOperationResp, TCloseOperationResp._Fields>, java.io.Serializable, Cloneable, Comparable<TCloseOperationResp> {\n  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"TCloseOperationResp\");\n  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"status\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n  static {\n    schemes.put(StandardScheme.class, new TCloseOperationRespStandardSchemeFactory());\n    schemes.put(TupleScheme.class, new TCloseOperationRespTupleSchemeFactory());\n  }\n  private TStatus status; // required\n  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n    STATUS((short)1, \"status\");\n    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n    static {\n      for (_Fields field : EnumSet.allOf(_Fields.class)) {\n        byName.put(field.getFieldName(), field);\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\n    public static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // STATUS\n          return STATUS;\n        default:\n          return null;\n      }\n    }\n    /**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\n    public static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final String _fieldName;\n    _Fields(short thriftId, String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n<fim_suffix>    public String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData(\"status\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStatus.class)));\n    metaDataMap = Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCloseOperationResp.class, metaDataMap);\n  }\n  public TCloseOperationResp() {\n  }\n  public TCloseOperationResp(\n    TStatus status)\n  {\n    this();\n    this.status = status;\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public TCloseOperationResp(TCloseOperationResp other) {\n    if (other.isSetStatus()) {\n      this.status = new TStatus(other.status);\n    }\n  }\n  public TCloseOperationResp deepCopy() {\n    return new TCloseOperationResp(this);\n  }\n  @Override\n  public void clear() {\n    this.status = null;\n  }\n  public TStatus getStatus() {\n    return this.status;\n  }\n  public void setStatus(TStatus status) {\n    this.status = status;\n  }\n  public void unsetStatus() {\n    this.status = null;\n  }\n  /** Returns true if field status is set (has been assigned a value) and false otherwise */\n  public boolean isSetStatus() {\n    return this.status != null;\n  }\n  public void setStatusIsSet(boolean value) {\n    if (!value) {\n      this.status = null;\n    }\n  }\n  public void setFieldValue(_Fields field, Object value) {\n    switch (field) {\n    case STATUS:\n      if (value == null) {\n        unsetStatus();\n      } else {\n        setStatus((TStatus)value);\n      }\n      break;\n    }\n  }\n  public Object getFieldValue(_Fields field) {\n    switch (field) {\n    case STATUS:\n      return getStatus();\n    }\n    throw new IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new IllegalArgumentException();\n    }\n    switch (field) {\n    case STATUS:\n      return isSetStatus();\n    }\n    throw new IllegalStateException();\n  }\n  @Override\n  public boolean equals(Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof TCloseOperationResp)\n      return this.equals((TCloseOperationResp)that);\n    return false;\n  }\n  public boolean equals(TCloseOperationResp that) {\n    if (that == null)\n      return false;\n    boolean this_present_status = true && this.isSetStatus();\n    boolean that_present_status = true && that.isSetStatus();\n    if (this_present_status || that_present_status) {\n      if (!(this_present_status && that_present_status))\n        return false;\n      if (!this.status.equals(that.status))\n        return false;\n    }\n    return true;\n  }\n  @Override\n  public int hashCode() {\n    List<Object> list = new ArrayList<Object>();\n    boolean present_status = true && (isSetStatus());\n    list.add(present_status);\n    if (present_status)\n      list.add(status);\n    return list.hashCode();\n  }\n  @Override\n  public int compareTo(TCloseOperationResp other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetStatus()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n  }<fim_middle>// function below has no smell\n"}