{"text": "<fim_prefix>                \"zypper\", \"libopenssl-devel pcre-devel\",\n                \"port\", null);\n        String stickyModuleVersion = entity.getConfig(NginxController.STICKY_VERSION);\n        DownloadResolver stickyModuleResolver = mgmt().getEntityDownloadsManager().newDownloader(\n                this, \"stickymodule\", ImmutableMap.of(\"addonversion\", stickyModuleVersion));\n        List<String> stickyModuleUrls = stickyModuleResolver.getTargets();\n        String stickyModuleSaveAs = stickyModuleResolver.getFilename();\n        String stickyModuleExpandedInstallDir = String.format(\"%s/src/%s\", getExpandedInstallDir(),\n                stickyModuleResolver.getUnpackedDirectoryName(\"nginx-sticky-module-\"+stickyModuleVersion));\n        List<String> cmds = Lists.newArrayList();\n        cmds.add(BashCommands.ifExecutableElse0(\"yum\", BashCommands.sudo(\"yum -y install kernel-headers --disableexcludes=all\")));\n        cmds.add(BashCommands.INSTALL_TAR);\n        cmds.add(BashCommands.alternatives(\n                BashCommands.ifExecutableElse0(\"apt-get\", BashCommands.installPackage(\"build-essential\")),\n                BashCommands.ifExecutableElse0(\"yum\", BashCommands.sudo(\"yum -y --nogpgcheck groupinstall \\\"Development Tools\\\"\"))));\n        cmds.add(BashCommands.installPackage(installGccPackageFlags, \"nginx-prerequisites-gcc\"));\n        cmds.add(BashCommands.installPackage(installMakePackageFlags, \"nginx-prerequisites-make\"));\n        cmds.add(BashCommands.installPackage(installPackageFlags, \"nginx-prerequisites\"));\n        cmds.addAll(BashCommands.commandsToDownloadUrlsAs(nginxUrls, nginxSaveAs));\n        String pcreExpandedInstallDirname = \"\";\n        if (isMac) {\n            String pcreVersion = entity.getConfig(NginxController.PCRE_VERSION);\n            DownloadResolver pcreResolver = mgmt().getEntityDownloadsManager().newDownloader(\n                    this, \"pcre\", ImmutableMap.of(\"addonversion\", pcreVersion));\n            List<String> pcreUrls = pcreResolver.getTargets();\n            String pcreSaveAs = pcreResolver.getFilename();\n            pcreExpandedInstallDirname = pcreResolver.getUnpackedDirectoryName(\"pcre-\"+pcreVersion);\n            // Install PCRE\n            cmds.addAll(BashCommands.commandsToDownloadUrlsAs(pcreUrls, pcreSaveAs));\n            cmds.add(format(\"mkdir -p %s/pcre-dist\", getInstallDir()));\n            cmds.add(format(\"tar xvzf %s\", pcreSaveAs));\n            cmds.add(format(\"cd %s\", pcreExpandedInstallDirname));\n            cmds.add(format(\"./configure --prefix=%s/pcre-dist\", getInstallDir()));\n            cmds.add(\"make\");\n            cmds.add(\"make install\");\n            cmds.add(\"cd ..\");\n        }\n        cmds.add(format(\"tar xvzf %s\", nginxSaveAs));\n        cmds.add(format(\"cd %s\", getExpandedInstallDir()));\n        if (sticky) {\n            // Latest versions of sticky module expand to a different folder than the file name.\n            // Extract to folder set by us so we know where the sources are.\n            cmds.add(format(\"mkdir -p %s\", stickyModuleExpandedInstallDir));\n            cmds.add(format(\"pushd %s\", stickyModuleExpandedInstallDir));\n            cmds.addAll(BashCommands.commandsToDownloadUrlsAs(stickyModuleUrls, stickyModuleSaveAs));\n            cmds.add(format(\"tar --strip-component=1 -xvzf %s\", stickyModuleSaveAs));\n            cmds.add(\"popd\");\n        }\n        // Note that for OS X, not including space after \"-L\" because broken in 10.6.8 (but fixed in 10.7.x)\n        //      see http://trac.nginx.org/nginx/ticket/227\n        String withLdOpt = entity.getConfig(NginxController.WITH_LD_OPT);\n        if (isMac) withLdOpt = format(\"-L%s/pcre-dist/lib\", getInstallDir()) + (Strings.isBlank(withLdOpt) ? \"\" : \" \" + withLdOpt);\n        String withCcOpt = entity.getConfig(NginxController.WITH_CC_OPT);\n        if (isMac) {\n            // TODO Upgrade sticky module as soon as a fix for https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/issue/16/can-not-compile-on-macosx-yosemite\n            // is released and remove this block.\n            withCcOpt = (Strings.isBlank(withCcOpt) ? \"\" : (withCcOpt + \" \")) + \"-Wno-error\";\n        }\n        StringBuilder configureCommand = new StringBuilder(\"./configure\")\n                .append(format(\" --prefix=%s/dist\", getExpandedInstallDir()))\n                .append(\" --with-http_ssl_module\")\n                .append(sticky ? format(\" --add-module=%s \", stickyModuleExpandedInstallDir) : \"\")\n                .append(!Strings.isBlank(withLdOpt) ? format(\" --with-ld-opt=\\\"%s\\\"\", withLdOpt) : \"\")\n                .append(!Strings.isBlank(withCcOpt) ? format(\" --with-cc-opt=\\\"%s\\\"\", withCcOpt) : \"\")\n                ;\n        if (isMac) {\n            configureCommand.append(\" --with-pcre=\")\n                    .append(getInstallDir()).append(\"/\").append(pcreExpandedInstallDirname);\n        }\n        cmds.addAll(ImmutableList.of(\n                \"mkdir -p dist\",\n                configureCommand.toString(),\n                \"make install\"));\n        ScriptHelper script = newScript(INSTALLING)\n                .body.append(cmds)\n                .header.prepend(\"set -x\")\n                .gatherOutput()\n                .failOnNonZeroResultCode(false);\n        int result = script.execute();\n        if (result != 0) {\n            String notes = \"likely an error building nginx. consult the brooklyn log ssh output for further details.\\n\"+\n                    \"note that this Brooklyn nginx driver compiles nginx from source. \" +\n                    \"it attempts to install common prerequisites but this does not always succeed.\\n\";\n            OsDetails os = getMachine().getOsDetails();\n            if (os.isMac()) {\n                notes += \"deploying to Mac OS X, you will require Xcode and Xcode command-line tools, and on \" +\n                        \"some versions the pcre library (e.g. using macports, sudo port install pcre).\\n\";\n            }\n            if (os.isWindows()) {\n                notes += \"this nginx driver is not designed for windows, unless cygwin is installed, and you are patient.\\n\";\n            }\n            if (getEntity().getApplication().getClass().getCanonicalName().startsWith(\"brooklyn.demo.\")) {\n                // this is maybe naughty ... but since we use nginx in the first demo example,\n                // and since it's actually pretty complicated, let's give a little extra hand-holding\n                notes +=\n                        \"if debugging this is all a bit much and you just want to run a demo, \" +\n                        \"you have two fairly friendly options.\\n\" +\n                        \"1. you can use a well known cloud, like AWS or Rackspace, where this should run \" +\n                        \"in a tried-and-tested Ubuntu or CentOS environment, without any problems \" +\n                        \"(and if it does let us know and we'll fix it!).\\n\"+\n                        \"2. or you can just use the demo without nginx, instead access the appserver instances directly.\\n\";\n            }\n            if (!script.getResultStderr().isEmpty()) {\n                notes += \"\\n\" + \"STDERR\\n\" + script.getResultStderr()+\"\\n\";\n                Streams.logStreamTail(log, \"STDERR of problem in \"+Tasks.current(), Streams.byteArrayOfString(script.getResultStderr()), 1024);\n            }\n            if (!script.getResultStdout().isEmpty()) {\n                notes += \"\\n\" + \"STDOUT\\n\" + script.getResultStdout()+\"\\n\";\n                Streams.logStreamTail(log, \"STDOUT of problem in \"+Tasks.current(), Streams.byteArrayOfString(script.getResultStdout()), 1024);\n            }\n            Tasks.setExtraStatusDetails(notes.trim());\n            throw new IllegalStateException(\"Installation of nginx failed (shell returned non-zero result \"+result+\")\");\n        }\n    }\n    private ManagementContext mgmt() {\n        return ((EntityInternal) entity).getManagementContext();\n    }\n<fim_suffix>    @Override\n    public void customize() {\n        newScript(CUSTOMIZING)\n                .body.append(\n                        format(\"mkdir -p %s\", getRunDir()),\n                        format(\"cp -R %s/dist/{conf,html,logs,sbin} %s\", getExpandedInstallDir(), getRunDir()))\n                .execute();\n        // Install static content archive, if specified\n        String archiveUrl = entity.getConfig(NginxController.STATIC_CONTENT_ARCHIVE_URL);\n        if (Strings.isNonBlank(archiveUrl)) {\n            getEntity().deploy(archiveUrl);\n        }\n        customizationCompleted = true;\n    }<fim_middle>// function below has no smell\n"}