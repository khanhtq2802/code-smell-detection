{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.giraph.io.formats;\n\nimport org.apache.giraph.utils.IntPair;\nimport org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.Writable;\nimport org.apache.hadoop.mapreduce.InputSplit;\nimport org.apache.hadoop.mapreduce.TaskAttemptContext;\n\nimport java.io.IOException;\nimport java.util.regex.Pattern;\n\n/**\n * Simple text-based {@link org.apache.giraph.io.VertexValueInputFormat}\n * for integer ids and values.\n *\n * Each line consists of: id, value\n *\n * @param <E> Edge value\n */\npublic class IntIntTextVertexValueInputFormat<E extends Writable> extends\n    TextVertexValueInputFormat<IntWritable, IntWritable, E> {\n  /** Separator for id and value */\n  private static final Pattern SEPARATOR = Pattern.compile(\"[\\t ]\");\n\n  @Override\n  public TextVertexValueReader createVertexValueReader(\n      InputSplit split, TaskAttemptContext context) throws IOException {\n    return new IntIntTextVertexValueReader();\n  }\n\n  /**\n   * {@link org.apache.giraph.io.VertexValueReader} associated with\n   * {@link IntIntTextVertexValueInputFormat}.\n   */\n<fim_suffix>  public class IntIntTextVertexValueReader extends\n      TextVertexValueReaderFromEachLineProcessed<IntPair> {\n\n    @Override\n    protected IntPair preprocessLine(Text line) throws IOException {\n      String[] tokens = SEPARATOR.split(line.toString());\n      return new IntPair(Integer.parseInt(tokens[0]),\n          Integer.parseInt(tokens[1]));\n    }\n\n    @Override\n    protected IntWritable getId(IntPair data) throws IOException {\n      return new IntWritable(data.getFirst());\n    }\n\n    @Override\n    protected IntWritable getValue(IntPair data) throws IOException {\n      return new IntWritable(data.getSecond());\n    }\n  }\n}<fim_middle>// class below has no smell\n"}