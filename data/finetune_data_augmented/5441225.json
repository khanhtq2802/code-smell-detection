{"text": "<fim_prefix>import org.apache.pluto.driver.core.PortalRequestContext;\nimport org.apache.pluto.driver.core.PortletWindowImpl;\nimport org.apache.pluto.driver.services.portal.PortletWindowConfig;\nimport org.apache.pluto.driver.url.PortalURL;\nimport org.apache.taglibs.standard.lang.support.ExpressionEvaluatorManager;\n/**\n * The tag is used to render a portlet mode anchor specified by the portlet ID and mode.\n * This is designed to live inside of a <pluto:portlet/> tag.\n * \n * <pluto:modeDropDown />\n *\n */\n<fim_suffix>public class PortletModeDropDownTag extends BodyTagSupport {\n\tprivate static final long serialVersionUID = 1L;\n\t/** Logger. */\n    private static final Logger LOG = LoggerFactory.getLogger(PortletModeDropDownTag.class);\n    // Private Member Variables ------------------------------------------------\n    private String portletMode = null;\n    /** The portlet ID attribute obtained from parent tag. */\n    private String portletId = null;\n    /** The evaluated value of the portlet ID attribute. */\n    private String evaluatedPortletId = null;       \n    // BodyTagSupport Impl -----------------------------------------------------\n    /**\n     * Method invoked when the start tag is encountered.\n     * @throws JspException  if an error occurs.\n     */\n    @SuppressWarnings(\"deprecation\")\n   public int doStartTag() throws JspException {\n        // Ensure that the modeAnchor tag resides within a portlet tag.\n        PortletTag parentTag = (PortletTag) TagSupport.findAncestorWithClass(\n                this, PortletTag.class);\n        if (parentTag == null) {\n            throw new JspException(\"Portlet window controls may only reside \"\n                    + \"within a pluto:portlet tag.\");\n        }\n        portletId = parentTag.getPortletId();        \n        // Evaluate portlet ID attribute.\n        evaluatePortletId();\n        // Retrieve the portlet window config for the evaluated portlet ID.\n        ServletContext servletContext = pageContext.getServletContext();\n        DriverConfiguration driverConfig = (DriverConfiguration)\n                servletContext.getAttribute(AttributeKeys.DRIVER_CONFIG);\n        // Retrieve the portal environment.\n        PortalRequestContext portalEnv = PortalRequestContext.getContext(\n                (HttpServletRequest) pageContext.getRequest());        \n        //find the current mode for use in 'selected' attrib of select option\n\t\tPortalURL requestedPortalUrl = portalEnv.getRequestedPortalURL();\n        PortletWindowConfig windowConfig =\n            PortletWindowConfig.fromId(evaluatedPortletId);\n        // Retrieve the portlet container from servlet context.\n        PortletContainer container = (PortletContainer)\n                servletContext.getAttribute(AttributeKeys.PORTLET_CONTAINER);\n        // Create the portlet window to render.\n        PortletWindow window = null;\n        try\n        {\n        \t// If this fails it means that the portlet will be not available.\n        \t// Render Tag will take care of it.\n        \twindow = new PortletWindowImpl(container, windowConfig, requestedPortalUrl);\n        }\n        catch(RuntimeException ex) \n        {\n        \t  if (LOG.isDebugEnabled()) {\n                  LOG.debug(\"The portlet \" + windowConfig.getPortletName() + \" is not available. Is already deployed?\");\n              }\n        }\n        //start the markup\n        StringBuffer tag = new StringBuffer();\n        // Do not render if we don't have a window.\n        if(window!=null)\n        {\n        \tPortletMode currentMode = requestedPortalUrl.getPortletMode(window.getId().getStringId());\n        \t//        String strCurrentMode = currentMode.toString();        \n        \t//        tag.append(\"Current mode: \" + currentMode.toString());\n        \ttag.append(\"<form action=\\\"\\\" name=\\\"modeSelectionForm\\\" style=\\\"display:inline\\\"><select onchange=\\\"self.location=this.options[this.selectedIndex].value\\\">\");\n        \tSet<PortletMode> modeSet = null;\n        \ttry {\n        \t\tmodeSet = driverConfig.getSupportedPortletModes(evaluatedPortletId);\n        \t} catch (PortletContainerException e) {\n        \t\tthrow new JspException(e);\n        \t}\n        \tif (modeSet != null) {\n        \t\tIterator<PortletMode> i = modeSet.iterator();\n        \t\twhile (i.hasNext()) {\n        \t\t\tPortletMode mode = i.next();\n        \t\t\tPortalURL portalUrl =  requestedPortalUrl.clone();\n        \t\t\tportalUrl.setPortletMode(evaluatedPortletId, mode);\n        \t\t\t// Build a string buffer containing the anchor tag\n        \t\t\ttag.append(\"<option value=\\\"\" + portalUrl.toString() + \"\\\"\");\n        \t\t\t//Add 'selected' attribute for current mode.\n        \t\t\tif (mode.equals(currentMode)) {\n        \t\t\t\ttag.append(\" selected=\\\"true\\\"\");\n        \t\t\t}\n        \t\t\ttag.append(\">\");\n        \t\t\tif (driverConfig.isPortletManagedMode(evaluatedPortletId, mode.toString())) {\n        \t\t\t\ttag.append(getCustomModeDecorationName(driverConfig, mode));\t            \t\n        \t\t\t} else {\n        \t\t\t\ttag.append(mode.toString().toUpperCase());\n        \t\t\t}\n        \t\t\t//\t            tag.append(mode.toString().toUpperCase());\n        \t\t\ttag.append(\"</option>\");\n        \t\t}\n        \t}\n        \ttag.append(\"</select></form>\");\n        }\n        // Print the mode anchor tag.\n        try {\n            JspWriter out = pageContext.getOut();\n            out.print(tag.toString());\n        } catch (IOException ex) {\n            throw new JspException(ex);\n        }\n        // Continue to evaluate the tag body.\n        return EVAL_BODY_INCLUDE;\n    }\n    // Package Methods ---------------------------------------------------------\n    /**\n     * Returns the evaluated portlet ID.\n     * @return the evaluated portlet ID.\n     */\n    String getEvaluatedPortletId() {\n        return evaluatedPortletId;\n    }\n    // Private Methods ---------------------------------------------------------\n    /**\n     * Evaluates the portlet ID attribute passed into this tag. This method\n     * evaluates the member variable <code>portletId</code> and saves the\n     * evaluated result to <code>evaluatedPortletId</code>\n     * @throws JspException  if an error occurs.\n     */\n    private void evaluatePortletId() throws JspException {\n        Object obj = ExpressionEvaluatorManager.evaluate(\n                \"portletId\", portletId, String.class, this, pageContext);\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Evaluated portletId to: \" + obj);\n        }\n        evaluatedPortletId = (String) obj;\n    }\n    /**\n     * @return the portletMode\n     */\n    public String getPortletMode() {\n        return portletMode;\n    }\n    /**\n     * @param portletMode the portletMode to set\n     */\n    public void setPortletMode(String portletMode) {\n        this.portletMode = portletMode;\n    }\n    /**\n     * Obtains decoration name for a portlet managed mode from the portlet's resource bundle\n     * as defined in PLT.8.4 of the JSR-286 spec using the key \n     * javax.portlet.app.custom-portlet-mode.<custom mode>.decoration-name where\n     * custom mode is the name of the custom mode as defined in portlet.xml\n     * (//portlet-app/custom-portlet-mode/portlet-mode element). If the decoration\n     * name is not found in the resource bundle, this method returns the uppercased\n     * mode name.\n     * \n     * @param driverConfig the driver config object found in the session.\n     * @param mode the portlet managed custom mode that will be searched for decoration name\n     * in the resource bundle.\n     * @return the decoration name for a portlet managed mode in the resource bundle\n     * using the key javax.portlet.app.custom-portlet-mode.<custom mode>.decoration-name \n     * where custom mode is the name of the custom mode as defined in portlet.xml\n     * (//portlet-app/custom-portlet-mode/portlet-mode element). If the decoration\n     * name is not found in the resource bundle, the uppercased\n     * mode name is returned.\n     */\n    private String getCustomModeDecorationName(DriverConfiguration driverConfig, \n    \t\tPortletMode mode) {\n    \t//decoration name is mode name by default\n\t\tString decorationName = mode.toString().toUpperCase();\n\t\tResourceBundle bundle;\n\t\tStringBuffer res;\n\t\ttry {\n\t\t\tPortletConfig config = driverConfig.getPortletConfig(evaluatedPortletId);\n\t\t\tServletRequest request = pageContext.getRequest();\n\t\t\tLocale defaultLocale = request.getLocale();\n\t\t\tbundle = config.getResourceBundle(defaultLocale);\n\t\t\tres = new StringBuffer();\n\t\t\tres.append(\"javax.portlet.app.custom-portlet-mode.\");\n\t\t\tres.append(mode.toString());\n\t\t\tres.append(\".decoration-name\");\n\t\t\tdecorationName = bundle.getString(res.toString());\n\t\t} catch (Exception e) {\n\t\t\tLOG.debug(\"Problem finding decoration-name for custom mode: \" + mode.toString());\n\t\t}\n\t\treturn decorationName;\n    }\n}<fim_middle>// class below has no smell\n"}