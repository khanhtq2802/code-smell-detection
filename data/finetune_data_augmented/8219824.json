{"text": "<fim_prefix>            {\n            match(')'); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_EqualsSignGreaterThanSign() throws RecognitionException {\n        try {\n            int _type = KW_EqualsSignGreaterThanSign;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"=>\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_EqualsSign() throws RecognitionException {\n        try {\n            int _type = KW_EqualsSign;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match('='); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Extension() throws RecognitionException {\n        try {\n            int _type = KW_Extension;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"extension\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Throws() throws RecognitionException {\n        try {\n            int _type = KW_Throws;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"throws\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_New() throws RecognitionException {\n        try {\n            int _type = KW_New;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"new\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_FullStop() throws RecognitionException {\n        try {\n            int _type = KW_FullStop;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match('.'); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Public() throws RecognitionException {\n        try {\n            int _type = KW_Public;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"public\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Private() throws RecognitionException {\n        try {\n            int _type = KW_Private;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"private\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Protected() throws RecognitionException {\n        try {\n            int _type = KW_Protected;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"protected\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Abstract() throws RecognitionException {\n        try {\n            int _type = KW_Abstract;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"abstract\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Static() throws RecognitionException {\n        try {\n            int _type = KW_Static;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"static\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Dispatch() throws RecognitionException {\n        try {\n            int _type = KW_Dispatch;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"dispatch\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Final() throws RecognitionException {\n        try {\n            int _type = KW_Final;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"final\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Strictfp() throws RecognitionException {\n        try {\n            int _type = KW_Strictfp;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"strictfp\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Native() throws RecognitionException {\n        try {\n            int _type = KW_Native;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"native\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Volatile() throws RecognitionException {\n        try {\n            int _type = KW_Volatile;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"volatile\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Synchronized() throws RecognitionException {\n        try {\n            int _type = KW_Synchronized;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"synchronized\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Transient() throws RecognitionException {\n        try {\n            int _type = KW_Transient;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"transient\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Val() throws RecognitionException {\n        try {\n            int _type = KW_Val;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"val\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Var() throws RecognitionException {\n        try {\n            int _type = KW_Var;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"var\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Def() throws RecognitionException {\n        try {\n            int _type = KW_Def;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"def\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Override() throws RecognitionException {\n        try {\n            int _type = KW_Override;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"override\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Create() throws RecognitionException {\n        try {\n            int _type = KW_Create;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"create\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_Colon() throws RecognitionException {\n        try {\n            int _type = KW_Colon;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(':'); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_AFTER() throws RecognitionException {\n        try {\n            int _type = KW_AFTER;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"AFTER\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_BEFORE() throws RecognitionException {\n        try {\n            int _type = KW_BEFORE;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"BEFORE\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n    public final void mKW_SEPARATOR() throws RecognitionException {\n        try {\n            int _type = KW_SEPARATOR;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"SEPARATOR\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }\n<fim_suffix>    public final void mKW_Import() throws RecognitionException {\n        try {\n            int _type = KW_Import;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            {\n            match(\"import\"); \n            }\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }<fim_middle>// function below has no smell\n"}