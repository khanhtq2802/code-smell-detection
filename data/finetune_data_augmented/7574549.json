{"text": "<fim_prefix>/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aop.support.annotation;\n\nimport java.lang.annotation.Annotation;\n\nimport org.springframework.aop.ClassFilter;\nimport org.springframework.core.annotation.AnnotatedElementUtils;\nimport org.springframework.util.Assert;\n\n/**\n * Simple ClassFilter that looks for a specific Java 5 annotation\n * being present on a class.\n *\n * @author Juergen Hoeller\n * @since 2.0\n * @see AnnotationMatchingPointcut\n */\npublic class AnnotationClassFilter implements ClassFilter {\n\n\tprivate final Class<? extends Annotation> annotationType;\n\n\tprivate final boolean checkInherited;\n\n\n\t/**\n\t * Create a new AnnotationClassFilter for the given annotation type.\n\t * @param annotationType the annotation type to look for\n\t */\n\tpublic AnnotationClassFilter(Class<? extends Annotation> annotationType) {\n\t\tthis(annotationType, false);\n\t}\n\n\t/**\n\t * Create a new AnnotationClassFilter for the given annotation type.\n\t * @param annotationType the annotation type to look for\n\t * @param checkInherited whether to also check the superclasses and\n\t * interfaces as well as meta-annotations for the annotation type\n\t * (i.e. whether to use {@link AnnotatedElementUtils#hasAnnotation}\n\t * semantics instead of standard Java {@link Class#isAnnotationPresent})\n\t */\n\tpublic AnnotationClassFilter(Class<? extends Annotation> annotationType, boolean checkInherited) {\n\t\tAssert.notNull(annotationType, \"Annotation type must not be null\");\n\t\tthis.annotationType = annotationType;\n\t\tthis.checkInherited = checkInherited;\n\t}\n\n\n<fim_suffix>\t@Override\n\tpublic boolean matches(Class<?> clazz) {\n\t\treturn (this.checkInherited ? AnnotatedElementUtils.hasAnnotation(clazz, this.annotationType) :\n\t\t\t\tclazz.isAnnotationPresent(this.annotationType));\n\t}\n\n\t@Override\n\tpublic boolean equals(Object other) {\n\t\tif (this == other) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!(other instanceof AnnotationClassFilter)) {\n\t\t\treturn false;\n\t\t}\n\t\tAnnotationClassFilter otherCf = (AnnotationClassFilter) other;\n\t\treturn (this.annotationType.equals(otherCf.annotationType) && this.checkInherited == otherCf.checkInherited);\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.annotationType.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn getClass().getName() + \": \" + this.annotationType;\n\t}\n\n}<fim_middle>// function below has no smell\n"}