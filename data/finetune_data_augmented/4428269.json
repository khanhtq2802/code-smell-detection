{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.eagle.alert.metadata.impl;\n\nimport org.apache.eagle.alert.coordination.model.Kafka2TupleMetadata;\nimport org.apache.eagle.alert.coordination.model.ScheduleState;\nimport org.apache.eagle.alert.coordination.model.internal.PolicyAssignment;\nimport org.apache.eagle.alert.coordination.model.internal.Topology;\nimport org.apache.eagle.alert.engine.coordinator.*;\nimport org.apache.eagle.alert.engine.model.AlertPublishEvent;\nimport org.apache.eagle.alert.metadata.IMetadataDao;\nimport org.apache.eagle.alert.metadata.MetadataUtils;\nimport org.apache.eagle.alert.metadata.resource.Models;\nimport org.apache.eagle.alert.metadata.resource.OpResult;\n\nimport com.google.inject.Inject;\nimport com.typesafe.config.Config;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @since May 26, 2016.\n */\n<fim_suffix>public class JdbcMetadataDaoImpl implements IMetadataDao {\n    private static final Logger LOG = LoggerFactory.getLogger(JdbcMetadataDaoImpl.class);\n    private JdbcMetadataHandler handler;\n\n    @Inject\n    public JdbcMetadataDaoImpl(Config config) {\n        handler = new JdbcMetadataHandler(config.getConfig(MetadataUtils.META_DATA));\n    }\n\n    @Override\n    public List<Topology> listTopologies() {\n        return handler.list(Topology.class);\n    }\n\n    @Override\n    public List<StreamingCluster> listClusters() {\n        return handler.list(StreamingCluster.class);\n    }\n\n    @Override\n    public List<StreamDefinition> listStreams() {\n        return handler.list(StreamDefinition.class);\n    }\n\n    @Override\n    public List<Kafka2TupleMetadata> listDataSources() {\n        return handler.list(Kafka2TupleMetadata.class);\n    }\n\n    @Override\n    public List<PolicyDefinition> listPolicies() {\n        return handler.list(PolicyDefinition.class);\n    }\n\n    @Override\n    public List<Publishment> listPublishment() {\n        return handler.listPublishments();\n    }\n\n    @Override\n    public List<AlertPublishEvent> listAlertPublishEvent(int size) {\n        if (size <= 0) {\n            LOG.info(\"Invalid parameter size <= 0\");\n            return new ArrayList<>();\n        }\n        return handler.listAlertEvents(null, null, size);\n    }\n\n    public PolicyDefinition getPolicyById(String policyId) {\n        return handler.queryById(PolicyDefinition.class, policyId);\n    }\n\n    public List<Publishment> getPublishmentsByPolicyId(String policyId) {\n        return handler.getPublishmentsByPolicyId(policyId);\n    }\n\n    @Override\n    public AlertPublishEvent getAlertPublishEvent(String alertId) {\n        return handler.getAlertEventById(alertId, 1);\n    }\n\n    @Override\n    public List<AlertPublishEvent> getAlertPublishEventsByPolicyId(String policyId, int size) {\n        if (size <= 0) {\n            LOG.info(\"Invalid parameter size <= 0\");\n            return new ArrayList<>();\n        }\n        return handler.getAlertEventByPolicyId(policyId, size);\n    }\n\n    @Override\n    public ScheduleState getScheduleState(String versionId) {\n        return handler.queryById(ScheduleState.class, versionId);\n    }\n\n    @Override\n    public ScheduleState getScheduleState() {\n        List<ScheduleState> scheduleStates =\n                handler.list(ScheduleState.class, JdbcMetadataHandler.SortType.DESC);\n        if (scheduleStates.isEmpty()) {\n            return null;\n        } else {\n            return scheduleStates.get(0);\n        }\n    }\n\n    @Override\n    public List<ScheduleState> listScheduleStates() {\n        return handler.list(ScheduleState.class);\n    }\n\n    @Override\n    public List<PolicyAssignment> listAssignments() {\n        return handler.list(PolicyAssignment.class);\n    }\n\n    @Override\n    public List<PublishmentType> listPublishmentType() {\n        return handler.list(PublishmentType.class);\n    }\n\n    @Override\n    public OpResult addTopology(Topology t) {\n        return handler.addOrReplace(Topology.class.getSimpleName(), t);\n    }\n\n    @Override\n    public OpResult addCluster(StreamingCluster cluster) {\n        return handler.addOrReplace(StreamingCluster.class.getSimpleName(), cluster);\n    }\n\n    @Override\n    public OpResult addAlertPublishEvent(AlertPublishEvent event) {\n        return handler.addAlertEvent(event);\n    }\n\n    @Override\n    public OpResult createStream(StreamDefinition stream) {\n        return handler.addOrReplace(StreamDefinition.class.getSimpleName(), stream);\n    }\n\n    @Override\n    public OpResult addDataSource(Kafka2TupleMetadata dataSource) {\n        return handler.addOrReplace(Kafka2TupleMetadata.class.getSimpleName(), dataSource);\n    }\n\n    @Override\n    public OpResult addPolicy(PolicyDefinition policy) {\n        return handler.addOrReplace(PolicyDefinition.class.getSimpleName(), policy);\n    }\n\n    @Override\n    public OpResult addPublishment(Publishment publishment) {\n        return handler.addOrReplace(Publishment.class.getSimpleName(), publishment);\n    }\n\n    @Override\n    public OpResult addPublishmentsToPolicy(String policyId, List<String> publishmentIds) {\n        return handler.addPublishmentsToPolicy(policyId, publishmentIds);\n    }\n\n    @Override\n    public OpResult addScheduleState(ScheduleState state) {\n        return handler.addOrReplace(ScheduleState.class.getSimpleName(), state);\n    }\n\n    @Override\n    public OpResult clearScheduleState(int maxCapacity) {\n        if (maxCapacity <= 0) {\n            maxCapacity = 10;\n        }\n        OpResult result = handler.removeScheduleStates(maxCapacity);\n        LOG.info(result.message);\n        return result;\n    }\n\n    @Override\n    public OpResult addAssignment(PolicyAssignment assignment) {\n        return handler.addOrReplace(PolicyAssignment.class.getSimpleName(), assignment);\n    }\n\n    @Override\n    public OpResult addPublishmentType(PublishmentType publishmentType) {\n        return handler.addOrReplace(PublishmentType.class.getSimpleName(), publishmentType);\n    }\n\n    @Override\n    public OpResult removeTopology(String topologyName) {\n        return handler.removeById(Topology.class.getSimpleName(), topologyName);\n    }\n\n    @Override\n    public OpResult removeCluster(String clusterId) {\n        return handler.removeById(StreamingCluster.class.getSimpleName(), clusterId);\n    }\n\n    @Override\n    public OpResult removeStream(String streamId) {\n        return handler.removeById(StreamDefinition.class.getSimpleName(), streamId);\n    }\n\n    @Override\n    public OpResult removeDataSource(String datasourceId) {\n        return handler.removeById(Kafka2TupleMetadata.class.getSimpleName(), datasourceId);\n    }\n\n    @Override\n    public OpResult removePolicy(String policyId) {\n        //return handler.removePolicyById(PolicyDefinition.class.getSimpleName(), policyId);\n        return handler.removeById(PolicyDefinition.class.getSimpleName(), policyId);\n    }\n\n    @Override\n    public OpResult removePublishment(String pubId) {\n        return handler.removeById(Publishment.class.getSimpleName(), pubId);\n    }\n\n    @Override\n    public OpResult removePublishmentType(String name) {\n        return handler.removeById(PublishmentType.class.getSimpleName(), name);\n    }\n\n    @Override\n    public OpResult clear() {\n        throw new UnsupportedOperationException(\"clear not support!\");\n    }\n\n    @Override\n    public Models export() {\n        throw new UnsupportedOperationException(\"clear not support!\");\n    }\n\n    @Override\n    public OpResult importModels(Models models) {\n        throw new UnsupportedOperationException(\"clear not support!\");\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (handler != null) {\n            handler.close();\n        }\n    }\n}<fim_middle>// class below has no smell\n"}