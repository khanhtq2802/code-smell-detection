{"text": "<fim_prefix>/*\n * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage sun.lwawt.macosx;\nimport java.awt.*;\nimport java.awt.geom.Dimension2D;\nimport java.awt.image.*;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.awt.image.MultiResolutionImage;\nimport java.util.concurrent.atomic.AtomicReference;\nimport sun.awt.image.MultiResolutionCachedImage;\nimport sun.awt.image.SunWritableRaster;\npublic class CImage extends CFRetainedResource {\n    private static native long nativeCreateNSImageFromArray(int[] buffer, int w, int h);\n    private static native long nativeCreateNSImageFromBytes(byte[] buffer);\n    private static native long nativeCreateNSImageFromArrays(int[][] buffers, int[] w, int[] h);\n    private static native long nativeCreateNSImageFromFileContents(String file);\n    private static native long nativeCreateNSImageOfFileFromLaunchServices(String file);\n    private static native long nativeCreateNSImageFromImageName(String name);\n    private static native long nativeCreateNSImageFromIconSelector(int selector);\n    private static native byte[] nativeGetPlatformImageBytes(int[] buffer, int w, int h);\n    private static native void nativeCopyNSImageIntoArray(long image, int[] buffer, int sw, int sh, int dw, int dh);\n    private static native Dimension2D nativeGetNSImageSize(long image);\n    private static native void nativeSetNSImageSize(long image, double w, double h);\n    private static native void nativeResizeNSImageRepresentations(long image, double w, double h);\n    private static native Dimension2D[] nativeGetNSImageRepresentationSizes(long image, double w, double h);\n    static Creator creator = new Creator();\n    static Creator getCreator() {\n        return creator;\n    }\n    // This is used to create a CImage that represents the icon of the given file.\n    public static Image createImageOfFile(String file, int width, int height) {\n        return getCreator().createImageOfFile(file, width, height);\n    }\n    public static Image createSystemImageFromSelector(String iconSelector,\n            int width, int height) {\n        return getCreator().createSystemImageFromSelector(iconSelector, width, height);\n    }\n    public static Image createImageFromFile(String file, double width, double height) {\n        return getCreator().createImageFromFile(file, width, height);\n    }\n    // This is used to create a CImage from a Image\n    public static CImage createFromImage(final Image image) {\n        return getCreator().createFromImage(image, null);\n    }\n    // This is used to create a CImage from a Image\n    public static CImage createFromImage(final Image image, CTrayIcon.IconObserver observer) {\n        return getCreator().createFromImage(image, observer);\n    }\n    public static class Creator {\n        CTrayIcon.IconObserver observer;\n        Creator() { }\n        // This is used to create a CImage with an NSImage pointer. It MUST be a CFRetained\n        // NSImage, and the CImage takes ownership of the non-GC retain. If callers need the\n        // NSImage themselves, they MUST call retain on the NSImage themselves.\n        public Image createImageUsingNativeSize(final long image) {\n            if (image == 0) return null;\n            final Dimension2D size = nativeGetNSImageSize(image);\n            return createImage(image, size.getWidth(), size.getHeight());\n        }\n        // the width and height passed in as a parameter could differ than the width and the height of the NSImage (image), in that case, the image will be scaled\n        Image createImage(long image, double width, double height) {\n            if (image == 0) throw new Error(\"Unable to instantiate CImage with null native image reference.\");\n            return createImageWithSize(image, width, height);\n        }\n        public Image createImageWithSize(final long image, final double width, final double height) {\n            final CImage img = new CImage(image);\n            img.resize(width, height);\n            return img.toImage();\n        }\n        // This is used to create a CImage that represents the icon of the given file.\n        public Image createImageOfFile(final String file, final int width, final int height) {\n            return createImage(nativeCreateNSImageOfFileFromLaunchServices(file), width, height);\n        }\n<fim_suffix>        public Image createImageFromFile(final String file, final double width, final double height) {\n            final long image = nativeCreateNSImageFromFileContents(file);\n            nativeSetNSImageSize(image, width, height);\n            return createImage(image, width, height);\n        }\n        public Image createSystemImageFromSelector(final String iconSelector, final int width, final int height) {\n            return createImage(nativeCreateNSImageFromIconSelector(getSelectorAsInt(iconSelector)), width, height);\n        }\n        public Image createImageFromName(final String name, final int width, final int height) {\n            return createImage(nativeCreateNSImageFromImageName(name), width, height);\n        }\n        public Image createImageFromName(final String name) {\n            return createImageUsingNativeSize(nativeCreateNSImageFromImageName(name));\n        }\n        private static int[] imageToArray(Image image, boolean prepareImage, CTrayIcon.IconObserver observer) {\n            if (image == null) return null;\n            if (prepareImage && !(image instanceof BufferedImage)) {\n                final MediaTracker mt = new MediaTracker(new Label());\n                final int id = 0;\n                mt.addImage(image, id);\n                try {\n                    mt.waitForID(id);\n                } catch (InterruptedException e) {\n                    return null;\n                }\n                if (mt.isErrorID(id)) {\n                    return null;\n                }\n            }\n            int w = image.getWidth(null);\n            int h = image.getHeight(null);\n            if (w < 0 || h < 0) {\n                return null;\n            }\n            BufferedImage bimg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB_PRE);\n            Graphics2D g2 = bimg.createGraphics();\n            g2.setComposite(AlphaComposite.Src);\n            g2.drawImage(image, 0, 0, observer);\n            g2.dispose();\n            return ((DataBufferInt)bimg.getRaster().getDataBuffer()).getData();\n        }\n        public byte[] getPlatformImageBytes(final Image image) {\n            int[] buffer = imageToArray(image, false, null);\n            if (buffer == null) {\n                return null;\n            }\n            return nativeGetPlatformImageBytes(buffer, image.getWidth(null), image.getHeight(null));\n        }\n        /**\n         * Translates a byte array which contains platform-specific image data in the given format into an Image.\n         */\n        public Image createImageFromPlatformImageBytes(final byte[] buffer) {\n            return createImageUsingNativeSize(nativeCreateNSImageFromBytes(buffer));\n        }\n        // This is used to create a CImage from a Image\n        public CImage createFromImage(final Image image) {\n            return createFromImage(image, true, null);\n        }\n        // This is used to create a CImage from a Image\n        public CImage createFromImage(final Image image, CTrayIcon.IconObserver observer) {\n            return createFromImage(image, true, observer);\n        }\n        public CImage createFromImageImmediately(final Image image) {\n            return createFromImage(image, false, null);\n        }\n        // This is used to create a CImage from a Image\n        private CImage createFromImage(final Image image, final boolean prepareImage, CTrayIcon.IconObserver observer) {\n            if (image instanceof MultiResolutionImage) {\n                List<Image> resolutionVariants\n                        = ((MultiResolutionImage) image).getResolutionVariants();<fim_middle>// function below has no smell\n"}