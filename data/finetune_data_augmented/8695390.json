{"text": "<fim_prefix>\n<fim_suffix>public class ConvertTree{\n    public static final String module = ConvertTree.class.getName();\n/*\nThis program will convert the output of the DOS 'tree' command into a contantAssoc tree.\nthe leaves in the tree will point to filenames on the local disk.\nWith this program and the content navigation a office file server can be replaced with a\ndocument tree in OFBiz. From that point on the documents can be connected to the cutomers,\norders, invoices etc..\nIn order ta make this service active add the following to the service definition file:\n<service name=\"convertTree\"  auth=\"true\" engine=\"java\" invoke=\"convertTree\" transaction-timeout=\"3600\"\n                 location=\"org.apache.ofbiz.content.tree.ConvertTree\">\n    <description>Convert DOS tree output to ContentAssoc tree.</description>\n    <attribute name=\"file\" type=\"String\" mode=\"IN\" optional=\"false\"/>\n</service>\n*/\n    public static  Map<String, Object> convertTree(DispatchContext dctx, Map<String, ? extends Object> context) {\n        Delegator delegator = dctx.getDelegator();\n        LocalDispatcher dispatcher = dctx.getDispatcher();\n        Locale locale = (Locale) context.get(\"locale\");\n        GenericValue userLogin = (GenericValue) context.get(\"userLogin\");\n        String file = (String) context.get(\"file\");\n        String errMsg = \"\", sucMsg= \"\";\n        GenericValue Entity = null;\n        try {\n            BufferedReader input = null;\n            try {\n                if (UtilValidate.isNotEmpty(file)) {\n                    input = new BufferedReader(new FileReader(file));\n                    String line = null;\n                    int size = 0;\n                    if (file != null) {\n                        int counterLine = 0;\n                        //Home Document\n                        Entity = null;\n                        Entity = delegator.makeValue(\"Content\");\n                        Entity.set(\"contentId\", \"ROOT\");\n                        Entity.set(\"contentName\", \"ROOT\");\n                        Entity.set(\"contentTypeId\", \"DOCUMENT\");\n                        Entity.set(\"createdByUserLogin\", userLogin.get(\"userLoginId\"));\n                        Entity.set(\"lastModifiedByUserLogin\", userLogin.get(\"userLoginId\"));\n                        Entity.set(\"createdDate\", UtilDateTime.nowTimestamp());\n                        Entity.set(\"lastUpdatedStamp\", UtilDateTime.nowTimestamp());\n                        Entity.set(\"lastUpdatedTxStamp\", UtilDateTime.nowTimestamp());\n                        Entity.set(\"createdStamp\", UtilDateTime.nowTimestamp());\n                        Entity.set(\"createdTxStamp\", UtilDateTime.nowTimestamp());\n                        delegator.create(Entity);\n                        Entity = null;\n                        Entity = delegator.makeValue(\"Content\");\n                        Entity.set(\"contentId\", \"HOME_DUCUMENT\");\n                        Entity.set(\"contentName\", \"Home\");\n                        Entity.set(\"contentTypeId\", \"DOCUMENT\");\n                        Entity.set(\"createdByUserLogin\", userLogin.get(\"userLoginId\"));\n                        Entity.set(\"lastModifiedByUserLogin\", userLogin.get(\"userLoginId\"));\n                        Entity.set(\"createdDate\", UtilDateTime.nowTimestamp());\n                        Entity.set(\"lastUpdatedStamp\", UtilDateTime.nowTimestamp());\n                        Entity.set(\"lastUpdatedTxStamp\", UtilDateTime.nowTimestamp());\n                        Entity.set(\"createdStamp\", UtilDateTime.nowTimestamp());\n                        Entity.set(\"createdTxStamp\", UtilDateTime.nowTimestamp());\n                        delegator.create(Entity);\n                        Map<String, Object> contentAssoc = new HashMap<String, Object>();\n                        contentAssoc.put(\"contentId\", \"HOME_DUCUMENT\");\n                        contentAssoc.put(\"contentAssocTypeId\", \"TREE_CHILD\");\n                        contentAssoc.put(\"contentIdTo\", \"ROOT\");\n                        contentAssoc.put(\"userLogin\", userLogin);\n                        dispatcher.runSync(\"createContentAssoc\", contentAssoc);\n                        int recordCount = 0;\n                        while ((line = input.readLine()) != null) {//start line\n                             boolean hasFolder = true;\n                             String rootContent = null, contentId = null; counterLine++;\n                             if (counterLine > 1) {\n                                size = line.length();\n                                String check = \"\\\\\", checkSubContent = \",\", contentName = \"\", contentNameInprogress = \"\", data = line.substring(3, size);\n                                size = data.length();\n                                for (int index = 0; index< size; index++) {//start character in line\n                                    boolean contentNameMatch = false;\n                                    int contentAssocSize = 0;\n                                    List<GenericValue> contentAssocs = null;\n                                    if (data.charAt(index) == check.charAt(0) || data.charAt(index) == checkSubContent.charAt(0)) {//store data\n                                        contentName = contentName + contentNameInprogress;\n                                        if (contentName.length() > 100) {\n                                            contentName = contentName.substring(0, 100);\n                                        }\n                                        //check duplicate folder\n                                        GenericValue content = EntityQuery.use(delegator).from(\"Content\").where(\"contentName\", contentName).queryFirst();\n                                        if (content != null) {\n                                            contentId = content.getString(\"contentId\");\n                                        }\n                                        if (content != null && hasFolder==true) {\n                                            if (rootContent != null) {\n                                                contentAssocs = EntityQuery.use(delegator).from(\"ContentAssoc\")\n                                                        .where(\"contentId\", contentId, \"contentIdTo\", rootContent)\n                                                        .queryList();\n                                                List<GenericValue> contentAssocCheck = EntityQuery.use(delegator).from(\"ContentAssoc\").where(\"contentIdTo\", rootContent).queryList();\n                                                Iterator<GenericValue> contentAssChecks = contentAssocCheck.iterator();\n                                                while (contentAssChecks.hasNext() && contentNameMatch == false) {\n                                                    GenericValue contentAss = contentAssChecks.next();\n                                                    GenericValue contentcheck = EntityQuery.use(delegator).from(\"Content\").where(\"contentId\", contentAss.get(\"contentId\")).queryOne();\n                                                    if (contentcheck!=null) {\n                                                        if (contentcheck.get(\"contentName\").equals(contentName) && contentNameMatch == false) {\n                                                            contentNameMatch = true;\n                                                            contentId = contentcheck.get(\"contentId\").toString();\n                                                        }\n                                                    }\n                                                }\n                                            } else {\n                                                rootContent = \"HOME_DUCUMENT\";\n                                                contentAssocs = EntityQuery.use(delegator).from(\"ContentAssoc\")\n                                                        .where(\"contentId\", contentId, \"contentIdTo\", rootContent)\n                                                        .queryList();\n                                            }\n                                            contentAssocSize = contentAssocs.size();\n                                        }\n                                        if (contentAssocSize == 0 && contentNameMatch == false) {//New Root Content\n                                            Entity = null;\n                                            contentId = delegator.getNextSeqId(\"Content\");\n                                            Entity = delegator.makeValue(\"Content\");\n                                            Entity.set(\"contentId\", contentId);\n                                            Entity.set(\"contentName\", contentName);\n                                            Entity.set(\"contentTypeId\", \"DOCUMENT\");\n                                            Entity.set(\"createdByUserLogin\", userLogin.get(\"userLoginId\"));\n                                            Entity.set(\"lastModifiedByUserLogin\", userLogin.get(\"userLoginId\"));\n                                            Entity.set(\"createdDate\", UtilDateTime.nowTimestamp());\n                                            delegator.create(Entity);\n                                            hasFolder = false;\n                                        } else {\n                                            hasFolder = true;\n                                        }\n                                        //Relation Content\n                                        if (rootContent == null) {\n                                            rootContent = \"HOME_DUCUMENT\";\n                                        }\n                                        contentAssocs = EntityQuery.use(delegator).from(\"ContentAssoc\")\n                                                .where(\"contentId\", contentId, \n                                                        \"contentIdTo\", rootContent,\n                                                        \"contentAssocTypeId\", \"TREE_CHILD\")\n                                                .queryList();\n                                        if (contentAssocs.size() == 0) {\n                                            contentAssoc = new HashMap<String, Object>();\n                                            contentAssoc.put(\"contentId\", contentId);\n                                            contentAssoc.put(\"contentAssocTypeId\", \"TREE_CHILD\");\n                                            contentAssoc.put(\"contentIdTo\", rootContent);\n                                            contentAssoc.put(\"userLogin\", userLogin);\n                                            dispatcher.runSync(\"createContentAssoc\", contentAssoc);\n                                            rootContent = contentId;\n                                        } else {\n                                            //Debug.logInfo(\"ContentAssoc [contentId= \" + contentId + \", contentIdTo=\" + rootContent + \"] already exist.\");//ShoW log file\n                                            rootContent=contentId;\n                                        }\n                                        contentName = \"\";\n                                        contentNameInprogress =\"\";\n                                    }\n                                    if (data.charAt(index)== checkSubContent.charAt(0)) {//Have sub content\n                                        createSubContent(index, data, rootContent, context, dctx);\n                                        index = size;\n                                        continue;\n                                    }\n                                    if ((data.charAt(index)) != check.charAt(0)) {\n                                        contentNameInprogress = contentNameInprogress.concat(Character.toString(data.charAt(index)));\n                                        if (contentNameInprogress.length() > 99) {\n                                            contentName = contentName + contentNameInprogress;\n                                            contentNameInprogress =\"\";\n                                        }\n                                    }\n                                }//end character in line\n                                recordCount++;\n                            }\n                        }//end line\n                        sucMsg = UtilProperties.getMessage(\"ContentUiLabels\", \"ContentConvertDocumentsTreeSuccessful\", UtilMisc.toMap(\"counterLine\", counterLine), locale);\n                    }\n                }\n             }\n             finally {<fim_middle>// class below has no smell\n"}