{"text": "<fim_prefix> * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *******************************************************************************/\npackage org.apache.ofbiz.party.contact;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport org.apache.ofbiz.base.util.Assert;\nimport org.apache.ofbiz.base.util.Debug;\nimport org.apache.ofbiz.base.util.UtilMisc;\nimport org.apache.ofbiz.base.util.UtilValidate;\nimport org.apache.ofbiz.entity.Delegator;\nimport org.apache.ofbiz.entity.GenericEntityException;\nimport org.apache.ofbiz.entity.GenericValue;\nimport org.apache.ofbiz.entity.condition.EntityCondition;\nimport org.apache.ofbiz.entity.util.EntityQuery;\nimport org.apache.ofbiz.entity.util.EntityUtil;\nimport org.apache.ofbiz.entity.util.EntityUtilProperties;\n/**\n * Worker methods for Contact Mechanisms\n */\npublic class ContactMechWorker {\n    public static final String module = ContactMechWorker.class.getName();\n    private ContactMechWorker() {}\n    public static List<Map<String, Object>> getPartyContactMechValueMaps(Delegator delegator, String partyId, boolean showOld) {\n       return getPartyContactMechValueMaps(delegator, partyId, showOld, null);\n    }\n    public static List<Map<String, Object>> getPartyContactMechValueMaps(Delegator delegator, String partyId, boolean showOld, String contactMechTypeId) {\n        List<Map<String, Object>> partyContactMechValueMaps = new LinkedList<Map<String,Object>>();\n        List<GenericValue> allPartyContactMechs = null;\n        try {\n            List<GenericValue> tempCol = EntityQuery.use(delegator).from(\"PartyContactMech\").where(\"partyId\", partyId).queryList();\n            if (contactMechTypeId != null) {\n                List<GenericValue> tempColTemp = new LinkedList<GenericValue>();\n                for (GenericValue partyContactMech: tempCol) {\n                    GenericValue contactMech = delegator.getRelatedOne(\"ContactMech\", partyContactMech, false);\n                    if (contactMech != null && contactMechTypeId.equals(contactMech.getString(\"contactMechTypeId\"))) {\n                        tempColTemp.add(partyContactMech);\n                    }\n                }\n                tempCol = tempColTemp;\n            }\n            if (!showOld) tempCol = EntityUtil.filterByDate(tempCol, true);\n            allPartyContactMechs = tempCol;\n        } catch (GenericEntityException e) {\n            Debug.logWarning(e, module);\n        }\n        if (allPartyContactMechs == null) return partyContactMechValueMaps;\n        for (GenericValue partyContactMech: allPartyContactMechs) {\n            GenericValue contactMech = null;\n            try {\n                contactMech = partyContactMech.getRelatedOne(\"ContactMech\", false);\n            } catch (GenericEntityException e) {\n                Debug.logWarning(e, module);\n            }\n            if (contactMech != null) {\n                Map<String, Object> partyContactMechValueMap = new HashMap<String, Object>();\n                partyContactMechValueMaps.add(partyContactMechValueMap);\n                partyContactMechValueMap.put(\"contactMech\", contactMech);\n                partyContactMechValueMap.put(\"partyContactMech\", partyContactMech);\n                try {\n                    partyContactMechValueMap.put(\"contactMechType\", contactMech.getRelatedOne(\"ContactMechType\", true));\n                } catch (GenericEntityException e) {\n                    Debug.logWarning(e, module);\n                }\n                try {\n                    List<GenericValue> partyContactMechPurposes = partyContactMech.getRelated(\"PartyContactMechPurpose\", null, null, false);\n                    if (!showOld) partyContactMechPurposes = EntityUtil.filterByDate(partyContactMechPurposes, true);\n                    partyContactMechValueMap.put(\"partyContactMechPurposes\", partyContactMechPurposes);\n                } catch (GenericEntityException e) {\n                    Debug.logWarning(e, module);\n                }\n                try {\n                    if (\"POSTAL_ADDRESS\".equals(contactMech.getString(\"contactMechTypeId\"))) {\n                        partyContactMechValueMap.put(\"postalAddress\", contactMech.getRelatedOne(\"PostalAddress\", false));\n                    } else if (\"TELECOM_NUMBER\".equals(contactMech.getString(\"contactMechTypeId\"))) {\n                        partyContactMechValueMap.put(\"telecomNumber\", contactMech.getRelatedOne(\"TelecomNumber\", false));\n                    }\n                } catch (GenericEntityException e) {\n                    Debug.logWarning(e, module);\n                }\n            }\n        }\n        return partyContactMechValueMaps;\n    }\n<fim_suffix>    public static List<Map<String, Object>> getFacilityContactMechValueMaps(Delegator delegator, String facilityId, boolean showOld, String contactMechTypeId) {\n        List<Map<String, Object>> facilityContactMechValueMaps = new LinkedList<Map<String,Object>>();\n        List<GenericValue> allFacilityContactMechs = null;\n        try {\n            List<GenericValue> tempCol = EntityQuery.use(delegator).from(\"FacilityContactMech\").where(\"facilityId\", facilityId).queryList();\n            if (contactMechTypeId != null) {\n                List<GenericValue> tempColTemp = new LinkedList<GenericValue>();\n                for (GenericValue partyContactMech: tempCol) {\n                    GenericValue contactMech = delegator.getRelatedOne(\"ContactMech\", partyContactMech, false);\n                    if (contactMech != null && contactMechTypeId.equals(contactMech.getString(\"contactMechTypeId\"))) {\n                        tempColTemp.add(partyContactMech);\n                    }\n                }\n                tempCol = tempColTemp;\n            }\n            if (!showOld) tempCol = EntityUtil.filterByDate(tempCol, true);\n            allFacilityContactMechs = tempCol;\n        } catch (GenericEntityException e) {\n            Debug.logWarning(e, module);\n        }\n        if (allFacilityContactMechs == null) return facilityContactMechValueMaps;\n        for (GenericValue facilityContactMech: allFacilityContactMechs) {\n            GenericValue contactMech = null;\n            try {\n                contactMech = facilityContactMech.getRelatedOne(\"ContactMech\", false);\n            } catch (GenericEntityException e) {\n                Debug.logWarning(e, module);\n            }\n            if (contactMech != null) {\n                Map<String, Object> facilityContactMechValueMap = new HashMap<String, Object>();\n                facilityContactMechValueMaps.add(facilityContactMechValueMap);\n                facilityContactMechValueMap.put(\"contactMech\", contactMech);\n                facilityContactMechValueMap.put(\"facilityContactMech\", facilityContactMech);\n                try {\n                    facilityContactMechValueMap.put(\"contactMechType\", contactMech.getRelatedOne(\"ContactMechType\", true));\n                } catch (GenericEntityException e) {\n                    Debug.logWarning(e, module);\n                }\n                try {\n                    List<GenericValue> facilityContactMechPurposes = facilityContactMech.getRelated(\"FacilityContactMechPurpose\", null, null, false);\n                    if (!showOld) facilityContactMechPurposes = EntityUtil.filterByDate(facilityContactMechPurposes, true);\n                    facilityContactMechValueMap.put(\"facilityContactMechPurposes\", facilityContactMechPurposes);\n                } catch (GenericEntityException e) {\n                    Debug.logWarning(e, module);\n                }\n                try {\n                    if (\"POSTAL_ADDRESS\".equals(contactMech.getString(\"contactMechTypeId\"))) {\n                        facilityContactMechValueMap.put(\"postalAddress\", contactMech.getRelatedOne(\"PostalAddress\", false));\n                    } else if (\"TELECOM_NUMBER\".equals(contactMech.getString(\"contactMechTypeId\"))) {\n                        facilityContactMechValueMap.put(\"telecomNumber\", contactMech.getRelatedOne(\"TelecomNumber\", false));\n                    }\n                } catch (GenericEntityException e) {\n                    Debug.logWarning(e, module);\n                }\n            }\n        }\n        return facilityContactMechValueMaps;\n    }<fim_middle>// function below is long method\n"}