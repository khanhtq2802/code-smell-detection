{"text": "<fim_prefix>        if (\"org.apache.tomee.webservices.CXFJAXRSFilter\".equals(name)\n                || \"org.apache.tomcat.websocket.server.WsFilter\".equals(name)\n                || isSkip(name, skipContainerTags)) {\n            return;\n        }\n        try {\n            if (!isSkip(name, skipPrefixes)) {\n                webContext.inject(o);\n            }\n            postConstruct(o, o.getClass());\n        } catch (final OpenEJBException e) {\n            destroyInstance(o);\n            throw new InjectionFailedException(e);\n        }\n    }\n    private boolean isSkip(final String name, final String[] prefixes) {\n        for (final String prefix : prefixes) {\n            if (name.startsWith(prefix)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    @Override\n    public void destroyInstance(final Object o) throws IllegalAccessException, InvocationTargetException {\n        if (o == null) {\n            return;\n        }\n        final String name = o.getClass().getName();\n        if (\"org.apache.tomcat.websocket.server.WsHttpUpgradeHandler\".equals(name)\n                || \"org.apache.tomee.myfaces.TomEEMyFacesContextListener\".equals(name)\n                || \"org.apache.openejb.server.httpd.EEFilter\".equals(name)\n                || \"org.apache.catalina.servlets.DefaultServlet\".equals(name)\n                || \"org.apache.jasper.servlet.JspServlet\".equals(name)) {\n            return;\n        }\n        final Object unwrapped = unwrap(o);\n        try {\n            if (isJsp(o.getClass())) {\n                defaultInstanceManager.destroyInstance(o);\n            }\n            preDestroy(unwrapped, unwrapped.getClass());\n        } finally {\n            webContext.destroy(unwrapped);\n            if (unwrapped != o) { // PojoEndpointServer, they create and track a cc so release it\n                webContext.destroy(o);\n            }\n        }\n    }\n    private Object unwrap(final Object o) {\n        return \"org.apache.tomcat.websocket.pojo.PojoEndpointServer\".equals(o.getClass().getName()) ?\n                WebSocketTypes.unwrapWebSocketPojo(o) : o;\n    }\n    public void inject(final Object o) {\n        try {\n            webContext.inject(o);\n        } catch (final OpenEJBException e) {\n            throw new InjectionFailedException(e);\n        }\n    }\n    /**\n     * Call postConstruct method on the specified instance recursively from deepest superclass to actual class.\n     *\n     * @param instance object to call postconstruct methods on\n     * @param clazz    (super) class to examine for postConstruct annotation.\n     * @throws IllegalAccessException                      if postConstruct method is inaccessible.\n     * @throws java.lang.reflect.InvocationTargetException if call fails\n     */\n    public void postConstruct(final Object instance, final Class<?> clazz)\n            throws IllegalAccessException, InvocationTargetException {\n        final Class<?> superClass = clazz.getSuperclass();\n        if (superClass != Object.class) {\n            postConstruct(instance, superClass);\n        }\n        final Method[] methods = clazz.getDeclaredMethods();\n        Method postConstruct = null;\n        for (final Method method : methods) {\n            if (method.isAnnotationPresent(PostConstruct.class)) {\n                if ((postConstruct != null)\n                        || (method.getParameterTypes().length != 0)\n                        || (Modifier.isStatic(method.getModifiers()))\n                        || (method.getExceptionTypes().length > 0)\n                        || (!method.getReturnType().getName().equals(\"void\"))) {\n                    throw new IllegalArgumentException(\"Invalid PostConstruct annotation. @PostConstruct methods \"\n                            + \"should respect the following constraints:\\n\"\n                            + \"- no parameter (\" + (method.getParameterTypes().length == 0) + \")\\n\"\n                            + \"- no exception should be declared (\" + (method.getExceptionTypes().length == 0) + \")\\n\"\n                            + \"- should return void (\" + method.getReturnType().getName().equals(\"void\") + \")\\n\"\n                            + \"- should not be static (\" + !Modifier.isStatic(method.getModifiers()) + \")\\n\");\n                }\n                postConstruct = method;\n            }\n        }\n        // At the end the postconstruct annotated\n        // method is invoked\n        if (postConstruct != null) {\n            final boolean accessibility = postConstruct.isAccessible();\n            postConstruct.setAccessible(true);\n            postConstruct.invoke(instance);\n            postConstruct.setAccessible(accessibility);\n        }\n    }\n    /**\n     * Call preDestroy method on the specified instance recursively from deepest superclass to actual class.\n     *\n     * @param instance object to call preDestroy methods on\n     * @param clazz    (super) class to examine for preDestroy annotation.\n     * @throws IllegalAccessException                      if preDestroy method is inaccessible.\n     * @throws java.lang.reflect.InvocationTargetException if call fails\n     */\n    protected void preDestroy(final Object instance, final Class<?> clazz)\n            throws IllegalAccessException, InvocationTargetException {\n        final Class<?> superClass = clazz.getSuperclass();\n        if (superClass != Object.class) {\n            preDestroy(instance, superClass);\n        }\n        final Method[] methods = clazz.getDeclaredMethods();\n        Method preDestroy = null;\n        for (final Method method : methods) {\n            if (method.isAnnotationPresent(PreDestroy.class)) {\n                if ((method.getParameterTypes().length != 0)\n                        || (Modifier.isStatic(method.getModifiers()))\n                        || (method.getExceptionTypes().length > 0)\n                        || (!method.getReturnType().getName().equals(\"void\"))) {\n                    throw new IllegalArgumentException(\"Invalid PreDestroy annotation\");\n                }\n                preDestroy = method;\n                break;\n            }\n        }\n        // At the end the postconstruct annotated\n        // method is invoked\n        if (preDestroy != null) {\n            final boolean accessibility = preDestroy.isAccessible();\n            preDestroy.setAccessible(true);\n            preDestroy.invoke(instance);\n            preDestroy.setAccessible(accessibility);\n        }\n    }\n    private static final class WebSocketTypes { // extracted for lazy loading\n        private static final WebSocketTypes WEB_SOCKET_TYPES = new WebSocketTypes();\n        private final Method getPojo;\n        private WebSocketTypes() {\n            Method tmp;\n            try {\n                tmp = WebSocketTypes.class.getClassLoader()\n                        .loadClass(\"org.apache.tomcat.websocket.pojo.PojoEndpointBase\")\n                        .getDeclaredMethod(\"getPojo\");\n                tmp.setAccessible(true);\n            } catch (final NoSuchMethodException e) {\n                if (\"true\".equals(SystemInstance.get().getProperty(\"tomee.websocket.skip\", \"false\"))) {\n                    tmp = null;\n                } else {\n                    throw new IllegalStateException(e);\n                }\n            } catch (final ClassNotFoundException e) {\n                tmp = null; // no websocket support\n            }\n            getPojo = tmp;\n        }\n        private static Object unwrapWebSocketPojo(final Object o) {\n            try {\n                return WEB_SOCKET_TYPES.getPojo == null ? o : WEB_SOCKET_TYPES.getPojo.invoke(o);\n            } catch (final IllegalAccessException | InvocationTargetException | NullPointerException e) {\n                return o;\n            }\n        }\n    }\n<fim_suffix>    private static final class TomcatInjections { // load when needed\n        private TomcatInjections() {\n            // no-op\n        }\n        private static Map<String, Map<String, String>> buildInjectionMap(final NamingResourcesImpl namingResources) {\n            final Map<String, Map<String, String>> injectionMap = new HashMap<>();\n            for (final Injectable resource : namingResources.findLocalEjbs()) {\n                addInjectionTarget(resource, injectionMap);\n            }\n            for (final Injectable resource : namingResources.findEjbs()) {\n                addInjectionTarget(resource, injectionMap);\n            }\n            for (final Injectable resource : namingResources.findEnvironments()) {\n                addInjectionTarget(resource, injectionMap);\n            }\n            for (final Injectable resource : namingResources.findMessageDestinationRefs()) {\n                addInjectionTarget(resource, injectionMap);\n            }\n            for (final Injectable resource : namingResources.findResourceEnvRefs()) {\n                addInjectionTarget(resource, injectionMap);\n            }\n            for (final Injectable resource : namingResources.findResources()) {\n                addInjectionTarget(resource, injectionMap);\n            }\n            for (final Injectable resource : namingResources.findServices()) {\n                addInjectionTarget(resource, injectionMap);\n            }\n            return injectionMap;\n        }\n        private static void addInjectionTarget(final Injectable resource, final Map<String, Map<String, String>> injectionMap) {\n            final List<InjectionTarget> injectionTargets = resource.getInjectionTargets();\n            if (injectionTargets != null && !injectionTargets.isEmpty()) {\n                final String jndiName = resource.getName();\n                for (final InjectionTarget injectionTarget : injectionTargets) {\n                    final String clazz = injectionTarget.getTargetClass();\n                    Map<String, String> injections = injectionMap.get(clazz);\n                    if (injections == null) {\n                        injections = new HashMap<>();\n                        injectionMap.put(clazz, injections);\n                    }\n                    injections.put(injectionTarget.getTargetName(), jndiName);\n                }\n            }\n        }\n    }<fim_middle>// class below is blob\n"}