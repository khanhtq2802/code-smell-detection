{"text": "<fim_prefix>\t\tcreateNewLabelsForPolicy(newUpdPolicy, policyLabels);\n\t\tRangerPolicy updPolicy = policyService.getPopulatedViewObject(newUpdPolicy);\n\t\thandlePolicyUpdate(service, RangerPolicyDelta.CHANGE_TYPE_POLICY_UPDATE, updPolicy);\n\t\tdataHistService.createObjectDataHistory(updPolicy, RangerDataHistService.ACTION_UPDATE);\n\t\tbizUtil.createTrxLog(trxLogList);\n\t\treturn updPolicy;\n\t}\n\t@Override\n\tpublic void deletePolicy(Long policyId) throws Exception {\n\t\tif(LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> ServiceDBStore.deletePolicy(\" + policyId + \")\");\n\t\t}\n\t\tRangerPolicy policy = getPolicy(policyId);\n\t\tif(policy == null) {\n\t\t\tthrow new Exception(\"no policy exists with ID=\" + policyId);\n\t\t}\n\t\tString policyName = policy.getName();\n\t\tRangerService service = getServiceByName(policy.getService());\n\t\tif(service == null) {\n\t\t\tthrow new Exception(\"service does not exist - name='\" + policy.getService());\n\t\t}\n\t\tLong version = policy.getVersion();\n\t\tif(version == null) {\n\t\t\tversion = Long.valueOf(1);\n\t\t\tLOG.info(\"Found Version Value: `null`, so setting value of version to 1, While updating object, version should not be null.\");\n\t\t} else {\n\t\t\tversion = Long.valueOf(version.longValue() + 1);\n\t\t}\n\t\tpolicy.setVersion(version);\n\t\tList<XXTrxLog> trxLogList = policyService.getTransactionLog(policy, RangerPolicyService.OPERATION_DELETE_CONTEXT);\n\t\tpolicyRefUpdater.cleanupRefTables(policy);\n\t\tdeleteExistingPolicyLabel(policy);\n\t\tpolicyService.delete(policy);\n\t\thandlePolicyUpdate(service, RangerPolicyDelta.CHANGE_TYPE_POLICY_DELETE, policy);\n\t\tdataHistService.createObjectDataHistory(policy, RangerDataHistService.ACTION_DELETE);\n\t\tbizUtil.createTrxLog(trxLogList);\n\t\tLOG.info(\"Policy Deleted Successfully. PolicyName : \" + policyName);\n\t}\n\t@Override\n\tpublic RangerPolicy getPolicy(Long id) throws Exception {\n\t\treturn policyService.read(id);\n\t}\n\t@Override\n\tpublic List<RangerPolicy> getPolicies(SearchFilter filter) throws Exception {\n\t\tif(LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> ServiceDBStore.getPolicies()\");\n\t\t}\n\t\tRangerPolicyList policyList = searchRangerPolicies(filter);\n\t\tList<RangerPolicy> ret = policyList.getPolicies();\n\t\tif(LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"<== ServiceDBStore.getPolicies()\");\n\t\t}\n\t\treturn ret;\n\t}\n\t@Override\n\tpublic Long getPolicyId(final Long serviceId, final String policyName) {\n\t\tif(LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> ServiceDBStore.getPolicyId()\");\n\t\t}\n\t\tLong ret = null;\n\t\tXXPolicy xxPolicy = daoMgr.getXXPolicy().findByNameAndServiceId(policyName, serviceId);\n\t\tif (xxPolicy != null) {\n\t\t\tret = xxPolicy.getId();\n\t\t}\n\t\tif(LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"<== ServiceDBStore.getPolicyId()\");\n\t\t}\n\t\treturn ret;\n\t}\n\tpublic void getPoliciesInExcel(List<RangerPolicy> policies, HttpServletResponse response) throws Exception {\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> ServiceDBStore.getPoliciesInExcel()\");\n\t\t}\n\t\tString timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n\t\tString excelFileName = \"Ranger_Policies_\"+timeStamp+\".xls\";\n\t\twriteExcel(policies, excelFileName, response);\n\t}\n\tpublic void getPoliciesInCSV(List<RangerPolicy> policies,\n\t\t\tHttpServletResponse response) throws Exception {\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> ServiceDBStore.getPoliciesInCSV()\");\n\t\t}\n\t\tServletOutputStream out = null;\n\t\tString CSVFileName = null;\n\t\ttry {\n\t\t\tString timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n\t\t\tCSVFileName = \"Ranger_Policies_\" + timeStamp + \".csv\";\n\t\t\tout = response.getOutputStream();\n\t\t\tStringBuilder sb = writeCSV(policies, CSVFileName, response);\n\t\t\tIOUtils.write(sb.toString(), out, \"UTF-8\");\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Error while generating report file \" + CSVFileName, e);\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (out != null) {\n\t\t\t\t\tout.flush();\n\t\t\t\t\tout.close();\n\t\t\t\t}\n\t\t\t} catch (Exception ex) {\n\t\t\t}\n\t\t}\n\t}\n\tpublic void getPoliciesInJson(List<RangerPolicy> policies,\n\t\t\tHttpServletResponse response) throws Exception {\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> ServiceDBStore.getPoliciesInJson()\");\n\t\t}\n\t\tString timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n\t\tString jsonFileName = \"Ranger_Policies_\" + timeStamp + \".json\";\n\t\twriteJson(policies, jsonFileName, response);\n\t}\n\tpublic PList<RangerPolicy> getPaginatedPolicies(SearchFilter filter) throws Exception {\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> ServiceDBStore.getPaginatedPolicies(+ \" + filter + \")\");\n\t\t}\n\t\tRangerPolicyList policyList = searchRangerPolicies(filter);\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"before filter: count=\" + policyList.getListSize());\n\t\t}\n\t\tpredicateUtil.applyFilter(policyList.getPolicies(), filter);\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"after filter: count=\" + policyList.getListSize());\n\t\t}\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"<== ServiceDBStore.getPaginatedPolicies(\" + filter + \"): count=\" + policyList.getListSize());\n\t\t}\n\t\treturn new PList<RangerPolicy>(policyList.getPolicies(), policyList.getStartIndex(), policyList.getPageSize(), policyList.getTotalCount(),\n\t\t\t\tpolicyList.getResultSize(), policyList.getSortType(), policyList.getSortBy());\n\t}\n<fim_suffix>\t@Override\n\tpublic List<RangerPolicy> getServicePolicies(Long serviceId, SearchFilter filter) throws Exception {\n\t\tif(LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"==> ServiceDBStore.getServicePolicies(\" + serviceId + \")\");\n\t\t}\n\t\tXXService service = daoMgr.getXXService().getById(serviceId);\n\t\tif (service == null) {\n\t\t\tthrow new Exception(\"service does not exist - id='\" + serviceId);\n\t\t}\n\t\tList<RangerPolicy> ret = getServicePolicies(service, filter);\n\t\tif(LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"<== ServiceDBStore.getServicePolicies(\" + serviceId + \") : policy-count=\" + (ret == null ? 0 : ret.size()));\n\t\t}\n\t\treturn ret;\n\t}<fim_middle>// function below has no smell\n"}