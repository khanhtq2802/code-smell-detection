{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.druid.query.filter;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.google.common.base.Preconditions;\nimport com.google.common.collect.RangeSet;\nimport com.google.common.collect.Sets;\nimport org.apache.druid.collections.spatial.search.Bound;\nimport org.apache.druid.java.util.common.StringUtils;\nimport org.apache.druid.segment.filter.SpatialFilter;\n\nimport java.nio.ByteBuffer;\nimport java.util.HashSet;\n\n/**\n */\n<fim_suffix>public class SpatialDimFilter implements DimFilter\n{\n  private final String dimension;\n  private final Bound bound;\n\n  @JsonCreator\n  public SpatialDimFilter(\n      @JsonProperty(\"dimension\") String dimension,\n      @JsonProperty(\"bound\") Bound bound\n  )\n  {\n    Preconditions.checkArgument(dimension != null, \"dimension must not be null\");\n    Preconditions.checkArgument(bound != null, \"bound must not be null\");\n\n    this.dimension = dimension;\n    this.bound = bound;\n  }\n\n  @Override\n  public byte[] getCacheKey()\n  {\n    byte[] dimBytes = StringUtils.toUtf8(dimension);\n    byte[] boundBytes = bound.getCacheKey();\n\n    return ByteBuffer.allocate(2 + dimBytes.length + boundBytes.length)\n                     .put(DimFilterUtils.SPATIAL_CACHE_ID)\n                     .put(dimBytes)\n                     .put(DimFilterUtils.STRING_SEPARATOR)\n                     .put(boundBytes)\n                     .array();\n  }\n\n  @Override\n  public DimFilter optimize()\n  {\n    return this;\n  }\n\n  @JsonProperty\n  public String getDimension()\n  {\n    return dimension;\n  }\n\n  @JsonProperty\n  public Bound getBound()\n  {\n    return bound;\n  }\n\n  @Override\n  public Filter toFilter()\n  {\n    return new SpatialFilter(dimension, bound);\n  }\n\n  @Override\n  public RangeSet<String> getDimensionRangeSet(String dimension)\n  {\n    return null;\n  }\n\n  @Override\n  public HashSet<String> getRequiredColumns()\n  {\n    return Sets.newHashSet(dimension);\n  }\n\n  @Override\n  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    SpatialDimFilter that = (SpatialDimFilter) o;\n\n    if (bound != null ? !bound.equals(that.bound) : that.bound != null) {\n      return false;\n    }\n    if (dimension != null ? !dimension.equals(that.dimension) : that.dimension != null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  @Override\n  public int hashCode()\n  {\n    int result = dimension != null ? dimension.hashCode() : 0;\n    result = 31 * result + (bound != null ? bound.hashCode() : 0);\n    return result;\n  }\n\n  @Override\n  public String toString()\n  {\n    return \"SpatialDimFilter{\" +\n           \"dimension='\" + dimension + '\\'' +\n           \", bound=\" + bound +\n           '}';\n  }\n}<fim_middle>// class below has no smell\n"}