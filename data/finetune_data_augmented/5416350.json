{"text": "<fim_prefix>        conn.createStatement().execute(\"CREATE TABLE \" + tableName + \"(\\n\" + \n                \"  a VARCHAR NOT NULL,\\n\" + \n                \"  b VARCHAR,\\n\" + \n                \"  c INTEGER,\\n\" + \n                \"  d VARCHAR,\\n\" + \n                \"  e VARCHAR ARRAY,\\n\" + \n                \"  f BIGINT,\\n\" + \n                \"  g BIGINT,\\n\" + \n                \"  CONSTRAINT pk PRIMARY KEY(a)\\n\" + \n                \")\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('1', 'val', 100, 'a', ARRAY ['b'], 1, 2)\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('2', 'val', 100, 'a', ARRAY ['b'], 3, 4)\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('3', 'val', 100, 'a', ARRAY ['b','c'], 5, 6)\");\n        conn.commit();\n        QueryBuilder queryBuilder = new QueryBuilder()\n            .setSelectExpression(\"C, SUM(F + G) AS SUMONE, D, E\")\n            .setSelectExpressionColumns(Lists.newArrayList(\"A\", \"B\", \"C\", \"F\", \"G\", \"D\", \"E\"))\n            .setWhereClause(\"B = 'val' AND A IN ('1','2','3')\")\n            .setFullTableName(tableName)\n            .setGroupByClause(\"C, D, E\")\n            .setOrderByClause(\"SUMONE desc\");\n        ResultSet rs = executeQuery(conn, queryBuilder);\n        assertTrue(rs.next());\n        assertEquals(100, rs.getInt(1));\n        assertEquals(11, rs.getLong(2));\n        assertTrue(rs.next());\n        assertEquals(100, rs.getInt(1));\n        assertEquals(10, rs.getLong(2));\n        assertFalse(rs.next());\n        conn.close();\n    }\n    @Test\n    public void testGroupByOrderPreserving() throws Exception {\n        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n        props.put(QueryServices.FORCE_ROW_KEY_ORDER_ATTRIB, Boolean.FALSE.toString());\n        Connection conn = DriverManager.getConnection(getUrl(), props);\n        String tableName = generateUniqueName();\n        conn.createStatement().execute(\"CREATE TABLE \" + tableName + \"(ORGANIZATION_ID char(15) not null, \\n\" + \n                \"JOURNEY_ID char(15) not null, \\n\" + \n                \"DATASOURCE SMALLINT not null, \\n\" + \n                \"MATCH_STATUS TINYINT not null, \\n\" + \n                \"EXTERNAL_DATASOURCE_KEY varchar(30), \\n\" + \n                \"ENTITY_ID char(15) not null, \\n\" + \n                \"CONSTRAINT PK PRIMARY KEY (\\n\" + \n                \"    ORGANIZATION_ID, \\n\" + \n                \"    JOURNEY_ID, \\n\" + \n                \"    DATASOURCE, \\n\" + \n                \"    MATCH_STATUS,\\n\" + \n                \"    EXTERNAL_DATASOURCE_KEY,\\n\" + \n                \"    ENTITY_ID))\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName\n                + \" VALUES('000001111122222', '333334444455555', 0, 0, 'abc', '666667777788888')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName\n                + \" VALUES('000001111122222', '333334444455555', 0, 0, 'abcd', '666667777788889')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName\n                + \" VALUES('000001111122222', '333334444455555', 0, 0, 'abc', '666667777788899')\");\n        conn.commit();\n        QueryBuilder queryBuilder = new QueryBuilder()\n            .setSelectExpression(\"COUNT(1), EXTERNAL_DATASOURCE_KEY As DUP_COUNT\")\n            .setSelectExpressionColumns(Lists.newArrayList(\"EXTERNAL_DATASOURCE_KEY\", \"MATCH_STATUS\",\n                \"JOURNEY_ID\", \"DATASOURCE\", \"ORGANIZATION_ID\"))\n            .setWhereClause(\n            \"JOURNEY_ID='333334444455555' AND DATASOURCE=0 AND MATCH_STATUS <= 1 and ORGANIZATION_ID='000001111122222'\")\n            .setFullTableName(tableName)\n            .setGroupByClause(\"MATCH_STATUS, EXTERNAL_DATASOURCE_KEY\")\n            .setHavingClause(\"COUNT(1) > 1\");\n        ResultSet rs = executeQuery(conn, queryBuilder);\n        assertTrue(rs.next());\n        assertEquals(2,rs.getLong(1));\n        assertEquals(\"abc\", rs.getString(2));\n        assertFalse(rs.next());\n        String expectedPhoenixPlan = \"CLIENT PARALLEL 1-WAY RANGE SCAN OVER \" + tableName\n                + \" ['000001111122222','333334444455555',0,*] - ['000001111122222','333334444455555',0,1]\\n\" +\n                \"    SERVER FILTER BY FIRST KEY ONLY\\n\" +\n                \"    SERVER AGGREGATE INTO ORDERED DISTINCT ROWS BY [MATCH_STATUS, EXTERNAL_DATASOURCE_KEY]\\n\" +\n                \"CLIENT FILTER BY COUNT(1) > 1\";\n        validateQueryPlan(conn, queryBuilder, expectedPhoenixPlan, null);\n    }\n<fim_suffix>    @Test\n    public void testGroupByOrderPreservingDescSort() throws Exception {\n        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n        Connection conn = DriverManager.getConnection(getUrl(), props);\n        String tableName = generateUniqueName();\n        conn.createStatement().execute(\"CREATE TABLE \" + tableName + \" (k1 char(1) not null, k2 char(1) not null,\" +\n                \" constraint pk primary key (k1,k2)) split on ('ac','jc','nc')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('a', 'a')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('a', 'b')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('a', 'c')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('a', 'd')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('j', 'a')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('j', 'b')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('j', 'c')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('j', 'd')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('n', 'a')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('n', 'b')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('n', 'c')\");\n        conn.createStatement().execute(\"UPSERT INTO \" + tableName + \" VALUES('n', 'd')\");\n        conn.commit();\n        QueryBuilder queryBuilder = new QueryBuilder()\n            .setSelectExpression(\"K1,COUNT(*)\")\n            .setSelectColumns(Lists.newArrayList(\"K1\"))\n            .setFullTableName(tableName)\n            .setGroupByClause(\"K1\")\n            .setOrderByClause(\"K1 DESC\");\n        ResultSet rs = executeQuery(conn, queryBuilder);\n        assertTrue(rs.next());\n        assertEquals(\"n\", rs.getString(1));\n        assertEquals(4, rs.getLong(2));\n        assertTrue(rs.next());\n        assertEquals(\"j\", rs.getString(1));\n        assertEquals(4, rs.getLong(2));\n        assertTrue(rs.next());\n        assertEquals(\"a\", rs.getString(1));\n        assertEquals(4, rs.getLong(2));\n        assertFalse(rs.next());\n        String expectedPhoenixPlan = \"CLIENT PARALLEL 1-WAY REVERSE FULL SCAN OVER \" + tableName + \"\\n\" +\n                \"    SERVER FILTER BY FIRST KEY ONLY\\n\" +\n                \"    SERVER AGGREGATE INTO ORDERED DISTINCT ROWS BY [K1]\";\n        validateQueryPlan(conn, queryBuilder, expectedPhoenixPlan, null);\n    }<fim_middle>// function below is long method\n"}