{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.openejb.config;\nimport org.apache.openejb.OpenEJBRuntimeException;\nimport org.apache.openejb.loader.IO;\nimport org.apache.openejb.loader.Options;\nimport org.apache.openejb.util.JavaSecurityManagers;\nimport org.apache.openejb.util.Join;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.lang.reflect.Field;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.Locale;\n/**\n * NOTE: Do not add inner or anonymous classes or a dependency without updating ExecMojo\n *\n * @version $Rev$ $Date$\n */\n@SuppressWarnings(\"UseOfSystemOutOrSystemErr\")\npublic class RemoteServer {\n    private static final Options options = new Options(JavaSecurityManagers.getSystemProperties());\n    public static final String SERVER_DEBUG_PORT = \"server.debug.port\";\n    public static final String SERVER_SHUTDOWN_PORT = \"server.shutdown.port\";\n    public static final String SERVER_SHUTDOWN_HOST = \"server.shutdown.host\";\n    public static final String SERVER_SHUTDOWN_COMMAND = \"server.shutdown.command\";\n    public static final String SOCKET_TIMEOUT = \"server.socket.timeout\";\n    public static final String OPENEJB_SERVER_DEBUG = \"openejb.server.debug\";\n    public static final String START = \"start\";\n    public static final String STOP = \"stop\";\n    private boolean debug = options.get(OPENEJB_SERVER_DEBUG, false);\n    private final boolean profile = options.get(\"openejb.server.profile\", false);\n    private final boolean tomcat;\n    private final String javaOpts = JavaSecurityManagers.getSystemProperty(\"java.opts\");\n    private String additionalClasspath;\n    /**\n     * Has the remote server's instance been already running ?\n     */\n    private boolean serverHasAlreadyBeenStarted = true;\n    private Properties properties;\n    private final AtomicReference<Process> server = new AtomicReference<>();\n    private final int tries;\n    private final boolean verbose;\n    private final int portShutdown;\n    private final String host;\n    private final String command;\n    private File home;\n    private int portStartup;\n    private final int connectTimeout;\n    public RemoteServer() {\n        this(options.get(\"connect.tries\", 60), options.get(\"verbose\", false));\n    }\n    public RemoteServer(final int tries, final boolean verbose) {\n        this.tries = (tries < 1 ? 1 : (tries > 3600 ? 3600 : tries)); //Wait at least 1 second to start or stop, but not more than an hour.\n        this.verbose = verbose;\n        home = getHome();\n        tomcat = (home != null) && (new File(new File(home, \"bin\"), \"catalina.sh\").exists());\n        portShutdown = options.get(SERVER_SHUTDOWN_PORT, tomcat ? 8005 : 4200);\n        portStartup = portShutdown;\n        command = options.get(SERVER_SHUTDOWN_COMMAND, \"SHUTDOWN\");\n        host = options.get(SERVER_SHUTDOWN_HOST, \"localhost\");\n        connectTimeout = options.get(SOCKET_TIMEOUT, 1000);\n    }\n    public void init(final Properties props) {\n        properties = props;\n        props.put(\"java.naming.factory.initial\", \"org.apache.openejb.client.RemoteInitialContextFactory\");\n        final int port = options.get(\"ejbd.port\", 4201);\n        props.put(\"java.naming.provider.url\", options.get(\"java.naming.provider.url\", \"127.0.0.1:\" + port));\n        props.put(\"java.naming.security.principal\", \"testuser\");\n        props.put(\"java.naming.security.credentials\", \"testpassword\");\n    }\n    public static void main(final String[] args) {\n        assert args.length > 0 : \"no arguments supplied: valid arguments are 'start' or 'stop'\";\n        if (args[0].equalsIgnoreCase(START)) {\n            final RemoteServer remoteServer = new RemoteServer();\n            try {\n                remoteServer.start();\n            } catch (final Exception e) {\n                remoteServer.destroy();\n                throw e;\n            }\n        } else if (args[0].equalsIgnoreCase(STOP)) {\n            final RemoteServer remoteServer = new RemoteServer();\n            remoteServer.serverHasAlreadyBeenStarted = false;\n            try {\n                remoteServer.forceStop();\n            } catch (final Exception e) {\n                e.printStackTrace(System.err);\n            }\n        } else {\n            throw new OpenEJBRuntimeException(\"valid arguments are 'start' or 'stop'\");\n        }\n    }\n    public int getPortStartup() {\n        return this.portStartup;\n    }\n<fim_suffix>    public void setPortStartup(final int portStartup) {\n        this.portStartup = portStartup;\n    }\n    public Properties getProperties() {\n        return this.properties;\n    }\n    public void destroy() {\n        try {\n            final boolean stopSent = stop();\n            final Process p = server.get();\n            if (p != null) {\n                if (stopSent) {\n                    waitFor(p);\n                } else {\n                    p.destroy();\n                }\n            }\n        } catch (final Exception e) {\n            Logger.getLogger(RemoteServer.class.getName()).log(Level.WARNING, \"Failed to destroy server\", e);\n        }\n    }\n    public void start() {\n        start(Collections.<String>emptyList(), START, true);\n    }\n    public void start(final List<String> additionalArgs, final String cmd, final boolean checkPortAvailable) {\n        cmd(additionalArgs, cmd, checkPortAvailable);\n    }\n    private void cmd(final List<String> additionalArgs, final String cmd, final boolean checkPortAvailable) {\n        boolean ok = true;\n        final int port = START.equals(cmd) && portStartup > 0 ? portStartup : portShutdown;\n        if (checkPortAvailable) {\n            ok = !connect(port, 1);\n        }\n        if (ok) {\n            try {\n                if (verbose) {\n                    System.out.println(\"[] \" + cmd.toUpperCase(Locale.ENGLISH) + \" SERVER\");\n                }\n                final File home = getHome();\n                final String javaVersion = JavaSecurityManagers.getSystemProperty(\"java.version\");\n                if (verbose) {\n                    System.out.println(\"OPENEJB_HOME = \" + home.getAbsolutePath());\n                    final String systemInfo = \"Java \" + javaVersion + \"; \" +\n                            JavaSecurityManagers.getSystemProperty(\"os.name\") + \"/\" + JavaSecurityManagers.getSystemProperty(\"os.version\");\n                    System.out.println(\"SYSTEM_INFO  = \" + systemInfo);\n                }\n                serverHasAlreadyBeenStarted = false;\n                final File lib = new File(home, \"lib\");\n                final File webapplib = new File(new File(new File(home, \"webapps\"), \"tomee\"), \"lib\");\n                File javaagentJar = null;\n                try {\n                    javaagentJar = lib(\"openejb-javaagent\", lib, webapplib);\n                } catch (final IllegalStateException ise) {\n                    // no-op\n                }\n                final File conf = new File(home, \"conf\");\n                final File loggingProperties = new File(conf, \"logging.properties\");\n                //File openejbJar = new File(lib, \"openejb-core-\" + version + \".jar\");\n                final String java;\n                final boolean isWindows = JavaSecurityManagers.getSystemProperty(\"os.name\", \"unknown\")\n                        .toLowerCase(Locale.ENGLISH).startsWith(\"windows\");\n                if (isWindows && START.equals(cmd) && options.get(\"server.windows.fork\", false)) {\n                    // run and forget<fim_middle>// function below has no smell\n"}