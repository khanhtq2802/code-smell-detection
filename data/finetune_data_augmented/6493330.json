{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2015 Eclipse RDF4J contributors, Aduna, and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Distribution License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/org/documents/edl-v10.php.\n *******************************************************************************/\npackage org.eclipse.rdf4j.repository.contextaware.config;\n\nimport org.eclipse.rdf4j.repository.Repository;\nimport org.eclipse.rdf4j.repository.config.RepositoryConfigException;\nimport org.eclipse.rdf4j.repository.config.RepositoryFactory;\nimport org.eclipse.rdf4j.repository.config.RepositoryImplConfig;\nimport org.eclipse.rdf4j.repository.contextaware.ContextAwareRepository;\n\n/**\n * A {@link RepositoryFactory} that creates {@link ContextAwareRepository}s based on RDF configuration data.\n * \n * @author James Leigh\n */\n<fim_suffix>public class ContextAwareFactory implements RepositoryFactory {\n\n\t/*-----------*\n\t * Constants *\n\t *-----------*/\n\n\t/**\n\t * The type of repositories that are created by this factory.\n\t * \n\t * @see RepositoryFactory#getRepositoryType()\n\t */\n\tpublic static final String REPOSITORY_TYPE = \"openrdf:ContextAwareRepository\";\n\n\t/*---------*\n\t * Methods *\n\t *---------*/\n\n\t/**\n\t * Returns the repository's type: <tt>openrdf:ContextAwareRepository</tt>.\n\t */\n\t@Override\n\tpublic String getRepositoryType() {\n\t\treturn REPOSITORY_TYPE;\n\t}\n\n\t@Override\n\tpublic RepositoryImplConfig getConfig() {\n\t\treturn new ContextAwareConfig();\n\t}\n\n\t@Override\n\tpublic Repository getRepository(RepositoryImplConfig configuration) throws RepositoryConfigException {\n\t\tif (configuration instanceof ContextAwareConfig) {\n\t\t\tContextAwareConfig config = (ContextAwareConfig) configuration;\n\n\t\t\tContextAwareRepository repo = new ContextAwareRepository();\n\n\t\t\trepo.setIncludeInferred(config.isIncludeInferred());\n\t\t\trepo.setMaxQueryTime(config.getMaxQueryTime());\n\t\t\trepo.setQueryLanguage(config.getQueryLanguage());\n\t\t\trepo.setBaseURI(config.getBaseURI());\n\t\t\trepo.setReadContexts(config.getReadContexts());\n\t\t\trepo.setAddContexts(config.getAddContexts());\n\t\t\trepo.setRemoveContexts(config.getRemoveContexts());\n\t\t\trepo.setArchiveContexts(config.getArchiveContexts());\n\t\t\trepo.setInsertContext(config.getInsertContext());\n\n\t\t\treturn repo;\n\t\t}\n\n\t\tthrow new RepositoryConfigException(\"Invalid configuration class: \" + configuration.getClass());\n\t}\n}<fim_middle>// class below has no smell\n"}