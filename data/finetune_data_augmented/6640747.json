{"text": "<fim_prefix>/*\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\npackage com.facebook.common.logging;\nimport android.util.Log;\n/**\n * Logging wrapper with format style support.\n */\npublic class FLog {\n  public static final int VERBOSE = Log.VERBOSE;\n  public static final int DEBUG = Log.DEBUG;\n  public static final int INFO = Log.INFO;\n  public static final int WARN = Log.WARN;\n  public static final int ERROR = Log.ERROR;\n  public static final int ASSERT = Log.ASSERT;\n  private static LoggingDelegate sHandler = FLogDefaultLoggingDelegate.getInstance();\n  /**\n   * Sets the logging delegate that overrides the default delegate.\n   *\n   * @param delegate the delegate to use\n   */\n  public static void setLoggingDelegate(LoggingDelegate delegate) {\n    if (delegate == null) {\n      throw new IllegalArgumentException();\n    }\n    sHandler = delegate;\n  }\n  public static boolean isLoggable(int level) {\n    return sHandler.isLoggable(level);\n  }\n  public static void setMinimumLoggingLevel(int level) {\n    sHandler.setMinimumLoggingLevel(level);\n  }\n  public static int getMinimumLoggingLevel() {\n    return sHandler.getMinimumLoggingLevel();\n  }\n  public static void v(String tag, String msg) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(tag, msg);\n    }\n  }\n  public static void v(String tag, String msg, Object arg1) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(tag, formatString(msg, arg1));\n    }\n  }\n  public static void v(String tag, String msg, Object arg1, Object arg2) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(tag, formatString(msg, arg1, arg2));\n    }\n  }\n  public static void v(String tag, String msg, Object arg1, Object arg2, Object arg3) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(tag, formatString(msg, arg1, arg2, arg3));\n    }\n  }\n  public static void v(String tag, String msg, Object arg1, Object arg2, Object arg3, Object arg4) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(tag, formatString(msg, arg1, arg2, arg3, arg4));\n    }\n  }\n  public static void v(Class<?> cls, String msg) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(getTag(cls), msg);\n    }\n  }\n  public static void v(Class<?> cls, String msg, Object arg1) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(getTag(cls), formatString(msg, arg1));\n    }\n  }\n  public static void v(Class<?> cls, String msg, Object arg1, Object arg2) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(getTag(cls), formatString(msg, arg1, arg2));\n    }\n  }\n  public static void v(Class<?> cls, String msg, Object arg1, Object arg2, Object arg3) {\n    if (isLoggable(VERBOSE)) {\n      v(cls, formatString(msg, arg1, arg2, arg3));\n    }\n  }\n  public static void v(Class<?> cls, String msg, Object arg1, Object arg2, Object arg3,\n      Object arg4) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(getTag(cls), formatString(msg, arg1, arg2, arg3, arg4));\n    }\n  }\n  public static void v(String tag, String msg, Object... args) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(tag, formatString(msg, args));\n    }\n  }\n  public static void v(String tag, Throwable tr, String msg, Object... args) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(tag, formatString(msg, args), tr);\n    }\n  }\n  public static void v(Class<?> cls, String msg, Object... args) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(getTag(cls), formatString(msg, args));\n    }\n  }\n  public static void v(Class<?> cls, Throwable tr, String msg, Object... args) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(getTag(cls), formatString(msg, args), tr);\n    }\n  }\n  public static void v(String tag, String msg, Throwable tr) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(tag, msg, tr);\n    }\n  }\n  public static void v(Class<?> cls, String msg, Throwable tr) {\n    if (sHandler.isLoggable(VERBOSE)) {\n      sHandler.v(getTag(cls), msg, tr);\n    }\n  }\n  public static void d(String tag, String msg) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(tag, msg);\n    }\n  }\n  public static void d(String tag, String msg, Object arg1) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(tag, formatString(msg, arg1));\n    }\n  }\n  public static void d(String tag, String msg, Object arg1, Object arg2) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(tag, formatString(msg, arg1, arg2));\n    }\n  }\n  public static void d(String tag, String msg, Object arg1, Object arg2, Object arg3) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(tag, formatString(msg, arg1, arg2, arg3));\n    }\n  }\n  public static void d(String tag, String msg, Object arg1, Object arg2, Object arg3, Object arg4) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(tag, formatString(msg, arg1, arg2, arg3, arg4));\n    }\n  }\n  public static void d(Class<?> cls, String msg) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(getTag(cls), msg);\n    }\n  }\n  public static void d(Class<?> cls, String msg, Object arg1) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(getTag(cls), formatString(msg, arg1));\n    }\n  }\n  public static void d(Class<?> cls, String msg, Object arg1, Object arg2) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(getTag(cls), formatString(msg, arg1, arg2));\n    }\n  }\n  public static void d(Class<?> cls, String msg, Object arg1, Object arg2, Object arg3) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(getTag(cls), formatString(msg, arg1, arg2, arg3));\n    }\n  }\n  public static void d(Class<?> cls, String msg, Object arg1, Object arg2, Object arg3,\n      Object arg4) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(getTag(cls), formatString(msg, arg1, arg2, arg3, arg4));\n    }\n  }\n  public static void d(String tag, String msg, Object... args) {\n    if (sHandler.isLoggable(DEBUG)) {\n      d(tag, formatString(msg, args));\n    }\n  }\n<fim_suffix>  public static void d(String tag, Throwable tr, String msg, Object... args) {\n    if (sHandler.isLoggable(DEBUG)) {\n      d(tag, formatString(msg, args), tr);\n    }\n  }\n  public static void d(Class<?> cls, String msg, Object... args) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(getTag(cls), formatString(msg, args));\n    }\n  }\n  public static void d(Class<?> cls, Throwable tr, String msg, Object... args) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(getTag(cls), formatString(msg, args), tr);\n    }\n  }\n  public static void d(String tag, String msg, Throwable tr) {\n    if (sHandler.isLoggable(DEBUG)) {\n      sHandler.d(tag, msg, tr);\n    }\n  }\n  public static void d(Class<?> cls, String msg, Throwable tr) {<fim_middle>// function below has no smell\n"}