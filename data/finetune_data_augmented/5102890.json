{"text": "<fim_prefix>/*\n * Copyright 2004 Sun Microsystems, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\npackage com.sun.syndication.io.impl;\n\nimport com.sun.syndication.feed.WireFeed;\nimport com.sun.syndication.feed.rss.*;\nimport org.jdom2.Attribute;\nimport org.jdom2.Document;\nimport org.jdom2.Element;\nimport org.jdom2.Namespace;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n */\npublic class RSS091UserlandParser extends RSS090Parser {\n\n    public RSS091UserlandParser() {\n        this(\"rss_0.91U\");\n    }\n\n    protected RSS091UserlandParser(String type) {\n        super(type, null);\n    }\n\n    public boolean isMyType(Document document) {\n        boolean ok;\n        Element rssRoot = document.getRootElement();\n        ok = rssRoot.getName().equals(\"rss\");\n        if (ok) {\n            ok = false;\n            Attribute version = rssRoot.getAttribute(\"version\");\n            if (version!=null) {\n                ok = version.getValue().equals(getRSSVersion());\n            }\n        }\n        return ok;\n    }\n\n    protected String getRSSVersion() {\n            return \"0.91\";\n    }\n\n    protected Namespace getRSSNamespace() {\n        return Namespace.getNamespace(\"\");\n    }\n\n    /**\n     * To be overriden by RSS 0.91 Netscape and RSS 0.94\n     */\n    protected boolean isHourFormat24(Element rssRoot) {\n        return true;\n    }\n\n    /**\n     * Parses the root element of an RSS document into a Channel bean.\n     * <p/>\n     * It first invokes super.parseChannel and then parses and injects the following\n     * properties if present: language, pubDate, rating and copyright.\n     * <p/>\n     *\n     * @param rssRoot the root element of the RSS document to parse.\n     * @return the parsed Channel bean.\n     */\n    protected WireFeed parseChannel(Element rssRoot)  {\n        Channel channel = (Channel) super.parseChannel(rssRoot);\n\n        Element eChannel = rssRoot.getChild(\"channel\",getRSSNamespace());\n\n        Element e = eChannel.getChild(\"language\",getRSSNamespace());\n        if (e!=null) {\n            channel.setLanguage(e.getText());\n        }\n        e = eChannel.getChild(\"rating\",getRSSNamespace());\n        if (e!=null) {\n            channel.setRating(e.getText());\n        }\n        e = eChannel.getChild(\"copyright\",getRSSNamespace());\n        if (e!=null) {\n            channel.setCopyright(e.getText());\n        }\n        e = eChannel.getChild(\"pubDate\",getRSSNamespace());\n        if (e!=null) {\n            channel.setPubDate(DateParser.parseDate(e.getText()));\n        }\n        e = eChannel.getChild(\"lastBuildDate\",getRSSNamespace());\n        if (e!=null) {\n            channel.setLastBuildDate(DateParser.parseDate(e.getText()));\n        }\n        e = eChannel.getChild(\"docs\",getRSSNamespace());\n        if (e!=null) {\n            channel.setDocs(e.getText());\n        }\n        e = eChannel.getChild(\"docs\",getRSSNamespace());\n        if (e!=null) {\n            channel.setDocs(e.getText());\n        }\n        e = eChannel.getChild(\"managingEditor\",getRSSNamespace());\n        if (e!=null) {\n            channel.setManagingEditor(e.getText());\n        }\n        e = eChannel.getChild(\"webMaster\",getRSSNamespace());\n        if (e!=null) {\n            channel.setWebMaster(e.getText());\n        }\n        e = eChannel.getChild(\"skipHours\");\n        if (e!=null) {\n            List skipHours = new ArrayList();\n            List eHours = e.getChildren(\"hour\",getRSSNamespace());\n            for (Object eHour1 : eHours) {\n                Element eHour = (Element) eHour1;\n                skipHours.add(new Integer(eHour.getText().trim()));\n            }\n            channel.setSkipHours(skipHours);\n        }\n\n        e = eChannel.getChild(\"skipDays\");\n        if (e!=null) {\n            List skipDays = new ArrayList();\n            List eDays = e.getChildren(\"day\",getRSSNamespace());\n            for (Object eDay1 : eDays) {\n                Element eDay = (Element) eDay1;\n                skipDays.add(eDay.getText().trim());\n            }\n            channel.setSkipDays(skipDays);\n        }\n        return channel;\n    }\n\n    /**\n     * Parses the root element of an RSS document looking for  image information.\n     * <p/>\n     * It first invokes super.parseImage and then parses and injects the following\n     * properties if present: url, link, width, height and description.\n     * <p/>\n     *\n     * @param rssRoot the root element of the RSS document to parse for image information.\n     * @return the parsed RSSImage bean.\n     */\n    protected Image parseImage(Element rssRoot) {\n        Image image = super.parseImage(rssRoot);\n        if (image!=null) {\n            Element eImage = getImage(rssRoot);\n            Element e = eImage.getChild(\"width\",getRSSNamespace());\n            if (e!=null) {\n            \tInteger val = NumberParser.parseInt(e.getText());\n            \tif (val != null) {\n            \t\timage.setWidth(val);\n            \t}                \n            }\n            e = eImage.getChild(\"height\",getRSSNamespace());\n            if (e!=null) {\n            \tInteger val = NumberParser.parseInt(e.getText());\n            \tif (val != null) {\n            \t\timage.setHeight(val);\n            \t}\n            }\n            e = eImage.getChild(\"description\",getRSSNamespace());\n            if (e!=null) {\n                image.setDescription(e.getText());\n            }\n        }\n        return image;\n    }\n\n\n    /**\n     * It looks for the 'item' elements under the 'channel' elemment.\n     */\n    protected List getItems(Element rssRoot) {\n        Element eChannel = rssRoot.getChild(\"channel\",getRSSNamespace());\n        return (eChannel!=null) ? eChannel.getChildren(\"item\",getRSSNamespace()) : Collections.EMPTY_LIST;\n    }\n\n    /**\n     * It looks for the 'image' elements under the 'channel' elemment.\n     */\n    protected Element getImage(Element rssRoot) {\n        Element eChannel = rssRoot.getChild(\"channel\",getRSSNamespace());\n        return (eChannel!=null) ? eChannel.getChild(\"image\",getRSSNamespace()) : null;\n    }\n\n    /**\n     * To be overriden by RSS 0.91 Netscape parser\n     */\n    protected String getTextInputLabel() {\n        return \"textInput\";\n    }\n\n    /**\n     * It looks for the 'textinput' elements under the 'channel' elemment.\n     */\n    protected Element getTextInput(Element rssRoot) {\n        String elementName = getTextInputLabel();\n        Element eChannel = rssRoot.getChild(\"channel\",getRSSNamespace());\n        return (eChannel!=null) ? eChannel.getChild(elementName,getRSSNamespace()) : null;\n    }\n\n    /**\n     * Parses an item element of an RSS document looking for item information.\n     * <p/>\n     * It first invokes super.parseItem and then parses and injects the description property if present.\n     * <p/>\n     *\n     * @param rssRoot the root element of the RSS document in case it's needed for context.\n     * @param eItem the item element to parse.\n     * @return the parsed RSSItem bean.\n     */\n<fim_suffix>    protected Item parseItem(Element rssRoot, Element eItem) {\n        Item item = super.parseItem(rssRoot,eItem);\n        Element e = eItem.getChild(\"description\", getRSSNamespace());\n        if (e!=null) {\n            item.setDescription(parseItemDescription(rssRoot,e));\n        }\n        Element ce = eItem.getChild(\"encoded\", getContentNamespace());\n        if (ce != null) {\n            Content content = new Content();\n            content.setType(Content.HTML);\n            content.setValue(ce.getText());\n            item.setContent(content);\n        }\n        return item;\n    }\n\n    protected Description parseItemDescription(Element rssRoot,Element eDesc) {\n        Description desc = new Description();\n        desc.setType(\"text/plain\");\n        desc.setValue(eDesc.getText());\n        return desc;\n    }\n\n}<fim_middle>// function below has no smell\n"}