{"text": "<fim_prefix>\n<fim_suffix>final class REEFScheduler implements Scheduler {\n  private static final Logger LOG = Logger.getLogger(REEFScheduler.class.getName());\n  private static final String REEF_TAR = \"reef.tar.gz\";\n  private static final String RUNTIME_NAME = \"MESOS\";\n  private static final String REEF_JOB_NAME_PREFIX = \"reef-job-\";\n  private final String reefTarUri;\n  private final REEFFileNames fileNames;\n  private final ClasspathProvider classpath;\n  private final REEFEventHandlers reefEventHandlers;\n  private final MesosRemoteManager mesosRemoteManager;\n  private final SchedulerDriver mesosMaster;\n  private int mesosSlavePort;\n  private final String jobSubmissionDirectoryPrefix;\n  private final EStage<SchedulerDriver> schedulerDriverEStage;\n  private final Map<String, Offer> offers = new ConcurrentHashMap<>();\n  private int outstandingRequestCounter = 0;\n  private final ConcurrentLinkedQueue<ResourceRequestEvent> outstandingRequests = new ConcurrentLinkedQueue<>();\n  private final Map<String, ResourceRequestEvent> executorIdToLaunchedRequests = new ConcurrentHashMap<>();\n  private final REEFExecutors executors;\n  @Inject\n  REEFScheduler(final REEFEventHandlers reefEventHandlers,\n                final MesosRemoteManager mesosRemoteManager,\n                final REEFExecutors executors,\n                final REEFFileNames fileNames,\n                final EStage<SchedulerDriver> schedulerDriverEStage,\n                final ClasspathProvider classpath,\n                @Parameter(JobIdentifier.class) final String jobIdentifier,\n                @Parameter(MesosMasterIp.class) final String masterIp,\n                @Parameter(MesosSlavePort.class) final int slavePort,\n                @Parameter(JobSubmissionDirectoryPrefix.class) final String jobSubmissionDirectoryPrefix) {\n    this.mesosRemoteManager = mesosRemoteManager;\n    this.reefEventHandlers = reefEventHandlers;\n    this.executors = executors;\n    this.fileNames = fileNames;\n    this.jobSubmissionDirectoryPrefix = jobSubmissionDirectoryPrefix;\n    this.reefTarUri = getReefTarUri(jobIdentifier);\n    this.classpath = classpath;\n    this.schedulerDriverEStage = schedulerDriverEStage;\n    final Protos.FrameworkInfo frameworkInfo = Protos.FrameworkInfo.newBuilder()\n        .setUser(\"\")\n        .setName(REEF_JOB_NAME_PREFIX + jobIdentifier)\n        .build();\n    this.mesosMaster = new MesosSchedulerDriver(this, frameworkInfo, masterIp);\n    this.mesosSlavePort = slavePort;\n  }\n  @Override\n  public void registered(final SchedulerDriver driver,\n                         final Protos.FrameworkID frameworkId,\n                         final Protos.MasterInfo masterInfo) {\n    LOG.log(Level.INFO, \"Framework ID={0} registration succeeded\", frameworkId);\n  }\n  @Override\n  public void reregistered(final SchedulerDriver driver, final Protos.MasterInfo masterInfo) {\n    LOG.log(Level.INFO, \"Framework reregistered, MasterInfo: {0}\", masterInfo);\n  }\n  /**\n   * All offers in each batch of offers will be either be launched or declined.\n   */\n  @Override\n  @SuppressWarnings(\"checkstyle:hiddenfield\")\n  public void resourceOffers(final SchedulerDriver driver, final List<Protos.Offer> offers) {\n    final Map<String, NodeDescriptorEventImpl.Builder> nodeDescriptorEvents = new HashMap<>();\n    for (final Offer offer : offers) {\n      if (nodeDescriptorEvents.get(offer.getSlaveId().getValue()) == null) {\n        nodeDescriptorEvents.put(offer.getSlaveId().getValue(), NodeDescriptorEventImpl.newBuilder()\n                .setIdentifier(offer.getSlaveId().getValue())\n                .setHostName(offer.getHostname())\n                .setPort(this.mesosSlavePort)\n                .setMemorySize(getMemory(offer)));\n      } else {\n        final NodeDescriptorEventImpl.Builder builder = nodeDescriptorEvents.get(offer.getSlaveId().getValue());\n        builder.setMemorySize(builder.build().getMemorySize() + getMemory(offer));\n      }\n      this.offers.put(offer.getId().getValue(), offer);\n    }\n    for (final NodeDescriptorEventImpl.Builder ndpBuilder : nodeDescriptorEvents.values()) {\n      this.reefEventHandlers.onNodeDescriptor(ndpBuilder.build());\n    }\n    if (outstandingRequests.size() > 0) {\n      doResourceRequest(outstandingRequests.remove());\n    }\n  }\n  @Override\n  public void offerRescinded(final SchedulerDriver driver, final Protos.OfferID offerId) {\n    for (final String executorId : this.executorIdToLaunchedRequests.keySet()) {\n      if (executorId.startsWith(offerId.getValue())) {\n        this.outstandingRequests.add(this.executorIdToLaunchedRequests.remove(executorId));\n      }\n    }\n  }\n  @Override\n  public void statusUpdate(final SchedulerDriver driver, final Protos.TaskStatus taskStatus) {\n    LOG.log(Level.SEVERE, \"Task Status Update:\", taskStatus.toString());\n    final ResourceStatusEventImpl.Builder resourceStatus =\n        ResourceStatusEventImpl.newBuilder().setIdentifier(taskStatus.getTaskId().getValue());\n    switch(taskStatus.getState()) {\n    case TASK_STARTING:\n      handleNewExecutor(taskStatus); // As there is only one Mesos Task per Mesos Executor, this is a new executor.\n      return;\n    case TASK_RUNNING:\n      resourceStatus.setState(State.RUNNING);\n      break;\n    case TASK_FINISHED:\n      if (taskStatus.getData().toStringUtf8().equals(\"eval_not_run\")) {\n        // TODO[JIRA REEF-102]: a hack to pass closeEvaluator test, replace this with a better interface\n        return;\n      }\n      resourceStatus.setState(State.DONE);\n      break;\n    case TASK_KILLED:\n      resourceStatus.setState(State.KILLED);\n      break;\n    case TASK_LOST:\n    case TASK_FAILED:\n      resourceStatus.setState(State.FAILED);\n      break;\n    case TASK_STAGING:\n      throw new RuntimeException(\"TASK_STAGING should not be used for status update\");\n    default:\n      throw new RuntimeException(\"Unknown TaskStatus\");\n    }\n    if (taskStatus.getMessage() != null) {\n      resourceStatus.setDiagnostics(taskStatus.getMessage());\n    }\n    this.reefEventHandlers.onResourceStatus(resourceStatus.build());\n  }\n  @Override\n  public void frameworkMessage(final SchedulerDriver driver,\n                               final Protos.ExecutorID executorId,\n                               final Protos.SlaveID slaveId,\n                               final byte[] data) {\n    LOG.log(Level.INFO, \"Framework Message. driver: {0} executorId: {1} slaveId: {2} data: {3}\",\n        new Object[]{driver, executorId, slaveId, data});\n  }\n  @Override\n  public void disconnected(final SchedulerDriver driver) {\n    this.onRuntimeError(new RuntimeException(\"Scheduler disconnected from MesosMaster\"));\n  }\n  @Override\n  public void slaveLost(final SchedulerDriver driver, final Protos.SlaveID slaveId) {\n    LOG.log(Level.SEVERE, \"Slave Lost. {0}\", slaveId.getValue());\n  }\n  @Override\n  public void executorLost(final SchedulerDriver driver,\n                           final Protos.ExecutorID executorId,\n                           final Protos.SlaveID slaveId,\n                           final int status) {\n    final String diagnostics = \"Executor Lost. executorid: \"+executorId.getValue()+\" slaveid: \"+slaveId.getValue();\n    final ResourceStatusEvent resourceStatus =\n        ResourceStatusEventImpl.newBuilder()\n            .setIdentifier(executorId.getValue())\n            .setState(State.FAILED)\n            .setExitCode(status)\n            .setDiagnostics(diagnostics)\n            .build();\n    this.reefEventHandlers.onResourceStatus(resourceStatus);\n  }\n  @Override\n  public void error(final SchedulerDriver driver, final String message) {\n    this.onRuntimeError(new RuntimeException(message));\n  }\n  /////////////////////////////////////////////////////////////////\n  // HELPER METHODS\n  public void onStart() {\n    this.schedulerDriverEStage.onNext(this.mesosMaster);\n  }\n  public void onStop() {\n    this.mesosMaster.stop();\n    try {\n      this.schedulerDriverEStage.close();\n    } catch (final Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n  public void onResourceRequest(final ResourceRequestEvent resourceRequestEvent) {\n    this.outstandingRequestCounter += resourceRequestEvent.getResourceCount();\n    updateRuntimeStatus();\n    doResourceRequest(resourceRequestEvent);\n  }\n  public void onResourceRelease(final ResourceReleaseEvent resourceReleaseEvent) {\n    this.executors.releaseEvaluator(new EvaluatorRelease(resourceReleaseEvent.getIdentifier()));\n    this.executors.remove(resourceReleaseEvent.getIdentifier());\n    updateRuntimeStatus();\n  }\n  /**<fim_middle>// class below has no smell\n"}