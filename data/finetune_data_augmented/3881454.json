{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ambari.server.audit.request.eventcreator;\n\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.apache.ambari.server.api.services.NamedPropertySet;\nimport org.apache.ambari.server.api.services.Request;\nimport org.apache.ambari.server.api.services.Result;\nimport org.apache.ambari.server.api.services.ResultStatus;\nimport org.apache.ambari.server.audit.event.AuditEvent;\nimport org.apache.ambari.server.audit.event.request.AddComponentToHostRequestAuditEvent;\nimport org.apache.ambari.server.audit.event.request.AddHostRequestAuditEvent;\nimport org.apache.ambari.server.audit.event.request.DeleteHostRequestAuditEvent;\nimport org.apache.ambari.server.controller.internal.HostComponentResourceProvider;\nimport org.apache.ambari.server.controller.internal.HostResourceProvider;\nimport org.apache.ambari.server.controller.spi.Resource;\n\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Iterables;\n\n/**\n * This creator handles host requests (add, delete, add component)\n * For resource type {@link Resource.Type#HostComponent}\n * and request types {@link Request.Type#POST}, {@link Request.Type#DELETE} and {@link Request.Type#QUERY_POST}\n */\n<fim_suffix>public class HostEventCreator implements RequestAuditEventCreator {\n\n  /**\n   * Set of {@link Request.Type}s that are handled by this plugin\n   */\n  private Set<Request.Type> requestTypes = ImmutableSet.<Request.Type>builder().add(Request.Type.QUERY_POST, Request.Type.POST, Request.Type.DELETE).build();\n\n  /**\n   * Set of {@link Resource.Type}s that are handled by this plugin\n   */\n  private Set<Resource.Type> resourceTypes = ImmutableSet.<Resource.Type>builder().add(Resource.Type.Host).build();\n\n  /**\n   * Pattern to retrieve hostname from url\n   */\n  private static final Pattern HOSTNAME_PATTERN = Pattern.compile(\".*\" + HostResourceProvider.HOST_HOST_NAME_PROPERTY_ID + \"\\\\s*=\\\\s*([^&\\\\s]+).*\");\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Set<Request.Type> getRequestTypes() {\n    return requestTypes;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Set<Resource.Type> getResourceTypes() {\n    return resourceTypes;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Set<ResultStatus.STATUS> getResultStatuses() {\n    // null makes this default\n    return null;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public AuditEvent createAuditEvent(Request request, Result result) {\n\n    switch (request.getRequestType()) {\n      case DELETE:\n        return DeleteHostRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withHostName(request.getResource().getKeyValueMap().get(Resource.Type.Host))\n          .build();\n      case POST:\n        return AddHostRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withHostName(RequestAuditEventCreatorHelper.getNamedProperty(request, HostResourceProvider.HOST_HOST_NAME_PROPERTY_ID))\n          .build();\n      case QUERY_POST:\n        return AddComponentToHostRequestAuditEvent.builder()\n          .withTimestamp(System.currentTimeMillis())\n          .withRequestType(request.getRequestType())\n          .withResultStatus(result.getStatus())\n          .withUrl(request.getURI())\n          .withRemoteIp(request.getRemoteAddress())\n          .withHostName(getHostNameFromQuery(request))\n          .withComponents(getHostComponents(request))\n          .build();\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Returns component name from the request\n   * @param request\n   * @return\n   */\n  private Set<String> getHostComponents(Request request) {\n    Set<String> components = new HashSet<>();\n    NamedPropertySet propertySet = Iterables.getFirst(request.getBody().getNamedPropertySets(), null);\n    if (propertySet != null && propertySet.getProperties().get(\"host_components\") instanceof Set) {\n      Set<Map<String, String>> set = (Set<Map<String, String>>) propertySet.getProperties().get(\"host_components\");\n      if (set != null && !set.isEmpty()) {\n        for(Map<String, String> element : set) {\n          components.add(element.get(HostComponentResourceProvider.COMPONENT_NAME));\n        }\n      }\n    }\n    return components;\n  }\n\n  /**\n   * Returns hostname from the query string of the request\n   * @param request\n   * @return\n   */\n  private String getHostNameFromQuery(Request request) {\n    Matcher matcher = HOSTNAME_PATTERN.matcher(request.getURI());\n    if(matcher.find()) {\n      return matcher.group(1);\n    }\n    return null;\n  }\n}<fim_middle>// class below has no smell\n"}