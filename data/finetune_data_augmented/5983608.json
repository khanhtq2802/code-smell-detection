{"text": "<fim_prefix>/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\npackage com.amazonaws.eclipse.explorer.lambda;\n\nimport static com.amazonaws.eclipse.lambda.LambdaConstants.MAX_LAMBDA_TAGS;\nimport static com.amazonaws.eclipse.lambda.LambdaConstants.MAX_LAMBDA_TAG_KEY_LENGTH;\nimport static com.amazonaws.eclipse.lambda.LambdaConstants.MAX_LAMBDA_TAG_VALUE_LENGTH;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.SelectionAdapter;\nimport org.eclipse.swt.events.SelectionEvent;\nimport org.eclipse.swt.layout.GridData;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.ui.forms.widgets.FormToolkit;\n\nimport com.amazonaws.eclipse.core.model.KeyValueSetDataModel;\nimport com.amazonaws.eclipse.core.model.KeyValueSetDataModel.Pair;\nimport com.amazonaws.eclipse.core.ui.KeyValueSetEditingComposite;\nimport com.amazonaws.eclipse.core.ui.KeyValueSetEditingComposite.KeyValueSetEditingCompositeBuilder;\nimport com.amazonaws.eclipse.core.validator.StringLengthValidator;\nimport com.amazonaws.eclipse.lambda.LambdaPlugin;\nimport com.amazonaws.services.lambda.AWSLambda;\nimport com.amazonaws.services.lambda.model.AWSLambdaException;\nimport com.amazonaws.services.lambda.model.ListTagsRequest;\nimport com.amazonaws.services.lambda.model.TagResourceRequest;\nimport com.amazonaws.services.lambda.model.UntagResourceRequest;\n\n<fim_suffix>public class FunctionTagsTable extends Composite {\n\n    private final FunctionEditorInput functionEditorInput;\n    private final KeyValueSetEditingComposite tagsEditingComposite;\n    private final KeyValueSetDataModel tagsDataModel;\n\n    public FunctionTagsTable(Composite parent, FormToolkit toolkit, FunctionEditorInput functionEditorInput) {\n        super(parent, SWT.NONE);\n        this.functionEditorInput = functionEditorInput;\n\n        this.setLayout(new GridLayout());\n        this.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n\n        tagsDataModel = new KeyValueSetDataModel(MAX_LAMBDA_TAGS, new ArrayList<Pair>());\n        tagsEditingComposite = new KeyValueSetEditingCompositeBuilder()\n                .addKeyValidator(new StringLengthValidator(1, MAX_LAMBDA_TAG_KEY_LENGTH,\n                        String.format(\"This field is too long. Maximum length is %d characters.\", MAX_LAMBDA_TAG_KEY_LENGTH)))\n                .addValueValidator(new StringLengthValidator(0, MAX_LAMBDA_TAG_VALUE_LENGTH,\n                        String.format(\"This field is too long. Maximum length is %d characters.\", MAX_LAMBDA_TAG_VALUE_LENGTH)))\n                .addKeyValidator(new LambdaTagNameValidator())\n                .saveListener(new SelectionAdapter() {\n                    @Override\n                    public void widgetSelected(SelectionEvent e) {\n                        onSaveTags();\n                    }\n                })\n                .build(this, tagsDataModel);\n\n        Composite buttonComposite = new Composite(this, SWT.NONE);\n        buttonComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n        buttonComposite.setLayout(new GridLayout(1, false));\n\n        refresh();\n    }\n\n    public void refresh() {\n        Map<String, String> tagMap = functionEditorInput.getLambdaClient()\n                .listTags(new ListTagsRequest()\n                        .withResource(functionEditorInput.getFunctionArn()))\n                .getTags();\n        tagsDataModel.getPairSet().clear();\n        for (Entry<String, String> entry : tagMap.entrySet()) {\n            tagsDataModel.getPairSet().add(new Pair(entry.getKey(), entry.getValue()));\n        }\n        tagsEditingComposite.refresh();\n    }\n\n    private void onSaveTags() {\n        try {\n            AWSLambda lambda = functionEditorInput.getLambdaClient();\n            Map<String, String> oldTagMap = lambda\n                    .listTags(new ListTagsRequest()\n                            .withResource(functionEditorInput.getFunctionArn()))\n                    .getTags();\n            List<String> tagKeysToBeRemoved = new ArrayList<>();\n            for (String key : oldTagMap.keySet()) {\n                if (!tagsDataModel.getPairSet().contains(key)) {\n                    tagKeysToBeRemoved.add(key);\n                }\n            }\n            Map<String, String> tagMap = new HashMap<>();\n            for (Pair pair : tagsDataModel.getPairSet()) {\n                tagMap.put(pair.getKey(), pair.getValue());\n            }\n            if (!tagKeysToBeRemoved.isEmpty()) {\n                lambda.untagResource(new UntagResourceRequest()\n                    .withResource(functionEditorInput.getFunctionArn())\n                    .withTagKeys(tagKeysToBeRemoved));\n            }\n            lambda.tagResource(new TagResourceRequest()\n                    .withResource(functionEditorInput.getFunctionArn())\n                    .withTags(tagMap));\n        } catch (AWSLambdaException e) {\n            LambdaPlugin.getDefault().reportException(e.getMessage(), e);\n        }\n    }\n}<fim_middle>// class below is blob\n"}