{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.reef.wake.remote.impl;\n\nimport com.google.protobuf.ByteString;\nimport org.apache.reef.wake.remote.Encoder;\nimport org.apache.reef.wake.remote.exception.RemoteRuntimeException;\nimport org.apache.reef.wake.remote.proto.WakeRemoteProtos.WakeTuplePBuf;\n\nimport java.util.Map;\n\n/**\n * Encoder using the WakeTuple protocol buffer.\n * (class name and bytes)\n *\n * @param <T> type\n */\npublic class MultiEncoder<T> implements Encoder<T> {\n\n  private final Map<Class<? extends T>, Encoder<? extends T>> clazzToEncoderMap;\n\n  /**\n   * Constructs an encoder that encodes an object to bytes based on the class name.\n   *\n   * @param clazzToEncoderMap a map of encoder for class\n   */\n  public MultiEncoder(final Map<Class<? extends T>, Encoder<? extends T>> clazzToEncoderMap) {\n    this.clazzToEncoderMap = clazzToEncoderMap;\n  }\n\n  /**\n   * Encodes an object to a byte array.\n   *\n   * @param obj an object to be encoded\n   */\n<fim_suffix>  @Override\n  public byte[] encode(final T obj) {\n    final Encoder<T> encoder = (Encoder<T>) clazzToEncoderMap.get(obj.getClass());\n    if (encoder == null) {\n      throw new RemoteRuntimeException(\"Encoder for \" + obj.getClass() + \" not known.\");\n    }\n\n    final WakeTuplePBuf.Builder tupleBuilder = WakeTuplePBuf.newBuilder();\n    tupleBuilder.setClassName(obj.getClass().getName());\n    tupleBuilder.setData(ByteString.copyFrom(encoder.encode(obj)));\n    return tupleBuilder.build().toByteArray();\n  }\n\n}<fim_middle>// function below has no smell\n"}