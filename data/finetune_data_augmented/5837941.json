{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.tomcat.util.descriptor.web;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.servlet.Filter;\n\nimport org.apache.tomcat.util.res.StringManager;\n\n\n/**\n * Representation of a filter definition for a web application, as represented\n * in a <code>&lt;filter&gt;</code> element in the deployment descriptor.\n *\n * @author Craig R. McClanahan\n */\n<fim_suffix>public class FilterDef implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    private static final StringManager sm =\n        StringManager.getManager(Constants.PACKAGE_NAME);\n\n    // ------------------------------------------------------------- Properties\n\n\n    /**\n     * The description of this filter.\n     */\n    private String description = null;\n\n    public String getDescription() {\n        return this.description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n\n    /**\n     * The display name of this filter.\n     */\n    private String displayName = null;\n\n    public String getDisplayName() {\n        return this.displayName;\n    }\n\n    public void setDisplayName(String displayName) {\n        this.displayName = displayName;\n    }\n\n\n    /**\n     * The filter instance associated with this definition\n     */\n    private transient Filter filter = null;\n\n    public Filter getFilter() {\n        return filter;\n    }\n\n    public void setFilter(Filter filter) {\n        this.filter = filter;\n    }\n\n\n    /**\n     * The fully qualified name of the Java class that implements this filter.\n     */\n    private String filterClass = null;\n\n    public String getFilterClass() {\n        return this.filterClass;\n    }\n\n    public void setFilterClass(String filterClass) {\n        this.filterClass = filterClass;\n    }\n\n\n    /**\n     * The name of this filter, which must be unique among the filters\n     * defined for a particular web application.\n     */\n    private String filterName = null;\n\n    public String getFilterName() {\n        return this.filterName;\n    }\n\n    public void setFilterName(String filterName) {\n        if (filterName == null || filterName.equals(\"\")) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"filterDef.invalidFilterName\", filterName));\n        }\n        this.filterName = filterName;\n    }\n\n\n    /**\n     * The large icon associated with this filter.\n     */\n    private String largeIcon = null;\n\n    public String getLargeIcon() {\n        return this.largeIcon;\n    }\n\n    public void setLargeIcon(String largeIcon) {\n        this.largeIcon = largeIcon;\n    }\n\n\n    /**\n     * The set of initialization parameters for this filter, keyed by\n     * parameter name.\n     */\n    private final Map<String, String> parameters = new HashMap<>();\n\n    public Map<String, String> getParameterMap() {\n        return this.parameters;\n    }\n\n\n    /**\n     * The small icon associated with this filter.\n     */\n    private String smallIcon = null;\n\n    public String getSmallIcon() {\n        return this.smallIcon;\n    }\n\n    public void setSmallIcon(String smallIcon) {\n        this.smallIcon = smallIcon;\n    }\n\n    private String asyncSupported = null;\n\n    public String getAsyncSupported() {\n        return asyncSupported;\n    }\n\n    public void setAsyncSupported(String asyncSupported) {\n        this.asyncSupported = asyncSupported;\n    }\n\n\n    // --------------------------------------------------------- Public Methods\n\n\n    /**\n     * Add an initialization parameter to the set of parameters associated\n     * with this filter.\n     *\n     * @param name The initialization parameter name\n     * @param value The initialization parameter value\n     */\n    public void addInitParameter(String name, String value) {\n\n        if (parameters.containsKey(name)) {\n            // The spec does not define this but the TCK expects the first\n            // definition to take precedence\n            return;\n        }\n        parameters.put(name, value);\n\n    }\n\n\n    /**\n     * Render a String representation of this object.\n     */\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder(\"FilterDef[\");\n        sb.append(\"filterName=\");\n        sb.append(this.filterName);\n        sb.append(\", filterClass=\");\n        sb.append(this.filterClass);\n        sb.append(\"]\");\n        return sb.toString();\n    }\n\n\n}<fim_middle>// class below has no smell\n"}