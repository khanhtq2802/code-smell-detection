{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.felix.prefs;\n\nimport org.osgi.service.prefs.BackingStoreException;\n\n/**\n * The BackingStore for the preferences.\n *\n * This interface allows for different implementation strategies.\n */\n<fim_suffix>public interface BackingStore {\n\n    /**\n     * Store the current preferences and its children in the backing\n     * store.\n     * The store should check, if the preferences have changed,\n     * it should also check all children.\n     * @param prefs The preferences.\n     * @throws BackingStoreException\n     */\n    void store(PreferencesImpl prefs) throws BackingStoreException;\n\n    /**\n     * Update the current preferences and its children from the\n     * backing store.\n     */\n    void update(PreferencesImpl prefs) throws BackingStoreException;\n\n    /**\n     * Return all bundle ids for which preferences are stored..\n     * @return Return an array of bundle ids or an empty array.\n     */\n    Long[] availableBundles();\n\n    /**\n     * Remove all preferences stored for this bundle.\n     * @param bundleId The bundle id.\n     * @throws BackingStoreException\n     */\n    void remove(Long bundleId) throws BackingStoreException;\n\n    /**\n     * Load the preferences for the given description.\n     * @param manager The backing store manager which should be passed to new preferences implementations.\n     * @param desc\n     * @return A new preferences object or null if it's not available in the backing store.\n     * @throws BackingStoreException\n     */\n    PreferencesImpl load(BackingStoreManager manager, PreferencesDescription desc) throws BackingStoreException;\n\n    /**\n     * Load all preferences for this bundle.\n     * @param manager The backing store manager which should be passed to new preferences implementations.\n     * @param bundleId The bundle id.\n     * @return An array with the preferences or an empty array.\n     * @throws BackingStoreException\n     */\n    PreferencesImpl[] loadAll(BackingStoreManager manager, Long bundleId) throws BackingStoreException;\n}<fim_middle>// class below has no smell\n"}