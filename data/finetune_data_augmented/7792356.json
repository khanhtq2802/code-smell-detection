{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.wicket.markup.repeater.data;\n\nimport java.util.Iterator;\n\nimport org.apache.wicket.markup.html.navigation.paging.IPageable;\nimport org.apache.wicket.markup.repeater.AbstractPageableView;\nimport org.apache.wicket.markup.repeater.RefreshingView;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.util.lang.Args;\n\n\n/**\n * Base class for data views.\n * \n * Data views aim to make it very simple to populate your repeating view from a database by\n * utilizing {@link IDataProvider} to act as an interface between the database and the dataview.\n * \n * @see IDataProvider\n * @see DataView\n * @see IPageable\n * @see RefreshingView\n * \n * @author Igor Vaynberg (ivaynberg)\n * \n * @param <T>\n *            Model object type\n */\npublic abstract class DataViewBase<T> extends AbstractPageableView<T>\n{\n\tprivate static final long serialVersionUID = 1L;\n\tprivate final IDataProvider<T> dataProvider;\n\n\t/**\n\t * @param id\n\t *            component id\n\t * @param dataProvider\n\t *            data provider\n\t */\n\tpublic DataViewBase(String id, IDataProvider<T> dataProvider)\n\t{\n\t\tsuper(id);\n\n\t\tthis.dataProvider = Args.notNull(dataProvider, \"dataProvider\");\n\t}\n\n\t/**\n\t * @return data provider associated with this view\n\t */\n\tprotected final IDataProvider<T> internalGetDataProvider()\n\t{\n\t\treturn dataProvider;\n\t}\n\n\n<fim_suffix>\t@Override\n\tprotected final Iterator<IModel<T>> getItemModels(long offset, long count)\n\t{\n\t\treturn new ModelIterator<T>(internalGetDataProvider(), offset, count);\n\t}\n\n\t/**\n\t * Helper class that converts input from IDataProvider to an iterator over view items.\n\t * \n\t * @author Igor Vaynberg (ivaynberg)\n\t * \n\t * @param <T>\n\t *            Model object type\n\t */\n\tprivate static final class ModelIterator<T> implements Iterator<IModel<T>>\n\t{\n\t\tprivate final Iterator<? extends T> items;\n\t\tprivate final IDataProvider<T> dataProvider;\n\t\tprivate final long max;\n\t\tprivate long index;\n\n\t\t/**\n\t\t * Constructor\n\t\t * \n\t\t * @param dataProvider\n\t\t *            data provider\n\t\t * @param offset\n\t\t *            index of first item\n\t\t * @param count\n\t\t *            max number of items to return\n\t\t */\n\t\tpublic ModelIterator(IDataProvider<T> dataProvider, long offset, long count)\n\t\t{\n\t\t\tthis.dataProvider = dataProvider;\n\t\t\tmax = count;\n\n\t\t\titems = count > 0 ? dataProvider.iterator(offset, count) : null;\n\t\t}\n\n\t\t/**\n\t\t * @see java.util.Iterator#remove()\n\t\t */\n\t\t@Override\n\t\tpublic void remove()\n\t\t{\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t/**\n\t\t * @see java.util.Iterator#hasNext()\n\t\t */\n\t\t@Override\n\t\tpublic boolean hasNext()\n\t\t{\n\t\t\treturn items != null && items.hasNext() && (index < max);\n\t\t}\n\n\t\t/**\n\t\t * @see java.util.Iterator#next()\n\t\t */\n\t\t@Override\n\t\tpublic IModel<T> next()\n\t\t{\n\t\t\tindex++;\n\t\t\treturn dataProvider.model(items.next());\n\t\t}\n\t}\n\n\t@Override\n\tprotected final long internalGetItemCount()\n\t{\n\t\treturn internalGetDataProvider().size();\n\t}\n\n\t/**\n\t * @see org.apache.wicket.markup.repeater.AbstractPageableView#onDetach()\n\t */\n\t@Override\n\tprotected void onDetach()\n\t{\n\t\tdataProvider.detach();\n\t\tsuper.onDetach();\n\t}\n}<fim_middle>// function below has no smell\n"}