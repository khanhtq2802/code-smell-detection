{"text": "<fim_prefix>/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\npackage org.apache.qpid.server.protocol.v0_8;\n\nimport java.math.BigDecimal;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Map;\n\nimport org.apache.qpid.server.bytebuffer.QpidByteBuffer;\n\n/**\n * AMQTypedValue combines together a native Java Object value, and an {@link AMQType}, as a fully typed AMQP parameter\n * value. It provides the ability to read and write fully typed parameters to and from byte buffers. It also provides\n * the ability to create such parameters from Java native value and a type tag or to extract the native value and type\n * from one.\n */\npublic abstract class AMQTypedValue\n{\n\n    public abstract AMQType getType();\n\n    public abstract Object getValue();\n\n    public abstract void writeToBuffer(QpidByteBuffer buffer);\n\n    public abstract int getEncodingSize();\n\n\n    private static final class GenericTypedValue extends AMQTypedValue\n    {\n        /** The type of the value. */\n        private final AMQType _type;\n\n        /** The Java native representation of the AMQP typed value. */\n        private final Object _value;\n\n        private GenericTypedValue(AMQType type, Object value)\n        {\n            if (type == null)\n            {\n                throw new NullPointerException(\"Cannot create a typed value with null type\");\n            }\n\n            _type = type;\n            _value = type.toNativeValue(value);\n        }\n\n        private GenericTypedValue(AMQType type, QpidByteBuffer buffer)\n        {\n            _type = type;\n            _value = type.readValueFromBuffer(buffer);\n        }\n\n\n        @Override\n        public AMQType getType()\n        {\n            return _type;\n        }\n\n        @Override\n        public Object getValue()\n        {\n            return _value;\n        }\n\n<fim_suffix>        @Override\n        public void writeToBuffer(QpidByteBuffer buffer)\n        {\n            _type.writeToBuffer(_value, buffer);\n        }\n\n        @Override\n        public int getEncodingSize()\n        {\n            return _type.getEncodingSize(_value);\n        }\n\n\n        @Override\n        public String toString()\n        {\n            return \"[\" + getType() + \": \" + getValue() + \"]\";\n        }\n\n\n        @Override\n        public boolean equals(Object o)\n        {\n            if(o instanceof GenericTypedValue)\n            {\n                GenericTypedValue other = (GenericTypedValue) o;\n                return _type == other._type && (_value == null ? other._value == null : _value.equals(other._value));\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n        @Override\n        public int hashCode()\n        {\n            return _type.hashCode() ^ (_value == null ? 0 : _value.hashCode());\n        }\n\n    }\n\n    private static final class LongTypedValue extends AMQTypedValue\n    {\n\n        private final long _value;\n\n        private LongTypedValue(long value)\n        {\n            _value = value;\n        }\n\n        public LongTypedValue(QpidByteBuffer buffer)\n        {\n            _value = buffer.getLong();\n        }\n\n        @Override\n        public AMQType getType()\n        {\n            return AMQType.LONG;\n        }\n\n\n        @Override\n        public Object getValue()\n        {\n            return _value;\n        }\n\n        @Override\n        public void writeToBuffer(QpidByteBuffer buffer)\n        {\n            buffer.put(AMQType.LONG.identifier());\n            buffer.putLong(_value);\n        }\n\n\n        @Override\n        public int getEncodingSize()\n        {\n            return EncodingUtils.encodedLongLength();\n        }\n    }\n\n    private static final class IntTypedValue extends AMQTypedValue\n    {\n        @Override\n        public String toString()\n        {\n            return \"[INT: \" + String.valueOf(_value) + \"]\";\n        }\n\n        private final int _value;\n\n        public IntTypedValue(int value)\n        {\n            _value = value;\n        }\n\n        @Override\n        public AMQType getType()\n        {\n            return AMQType.INT;\n        }\n\n\n        @Override\n        public Object getValue()\n        {\n            return _value;\n        }\n\n        @Override\n        public void writeToBuffer(QpidByteBuffer buffer)\n        {\n            buffer.put(AMQType.INT.identifier());\n            buffer.putInt(_value);\n        }\n\n        @Override\n        public int getEncodingSize()\n        {\n            return EncodingUtils.encodedIntegerLength();\n        }\n    }\n\n\n    public static AMQTypedValue readFromBuffer(QpidByteBuffer buffer)\n    {\n        AMQType type = AMQTypeMap.getType(buffer.get());\n\n        switch(type)\n        {\n            case LONG:\n                return new LongTypedValue(buffer);\n\n            case INT:\n                int value = buffer.getInt();\n                return createAMQTypedValue(value);\n\n            default:\n                return new GenericTypedValue(type, buffer);\n        }\n\n    }\n\n    private static final AMQTypedValue[] INT_VALUES = new AMQTypedValue[16];\n    static\n    {\n        for(int i = 0 ; i < 16; i ++)\n        {\n            INT_VALUES[i] = new IntTypedValue(i);\n        }\n    }\n\n    public static AMQTypedValue createAMQTypedValue(int i)\n    {\n        return (i & 0x0f) == i ? INT_VALUES[i] : new IntTypedValue(i);\n    }\n\n\n    public static AMQTypedValue createAMQTypedValue(long value)\n    {\n        return new LongTypedValue(value);\n    }\n\n    public static AMQTypedValue createAMQTypedValue(AMQType type, Object value)\n    {\n        switch(type)\n        {\n            case LONG:\n                return new LongTypedValue((Long) AMQType.LONG.toNativeValue(value));\n            case INT:\n                return new IntTypedValue((Integer) AMQType.INT.toNativeValue(value));\n\n            default:\n                return new GenericTypedValue(type, value);\n        }\n    }\n\n\n\n    public static AMQTypedValue toTypedValue(Object val)\n    {\n        if(val == null)\n        {\n            return AMQType.VOID.asTypedValue(null);\n        }\n\n        Class klass = val.getClass();\n        if(klass == String.class)\n        {\n            return AMQType.LONG_STRING.asTypedValue(val);\n        }\n        else if(klass == Character.class)\n        {\n            return AMQType.ASCII_CHARACTER.asTypedValue(val);\n        }\n        else if (klass == Short.class)\n        {\n            return AMQType.SHORT.asTypedValue(val);\n        }\n        else if(klass == Integer.class)\n        {\n            return AMQType.INT.asTypedValue(val);\n        }\n        else if(klass == Long.class)\n        {\n            return AMQType.LONG.asTypedValue(val);\n        }\n        else if(klass == Float.class)\n        {\n            return AMQType.FLOAT.asTypedValue(val);\n        }\n        else if(klass == Double.class)\n        {\n            return AMQType.DOUBLE.asTypedValue(val);\n        }\n        else if(klass == Date.class)\n        {\n            return AMQType.TIMESTAMP.asTypedValue(val);\n        }\n        else if(klass == Byte.class)\n        {\n            return AMQType.BYTE.asTypedValue(val);\n        }\n        else if(klass == Boolean.class)\n        {\n            return AMQType.BOOLEAN.asTypedValue(val);\n        }\n        else if(klass == byte[].class)\n        {\n            return AMQType.BINARY.asTypedValue(val);\n        }\n        else if(klass == BigDecimal.class)\n        {\n            return AMQType.DECIMAL.asTypedValue(val);\n        }\n        else if(val instanceof Map)\n        {\n            return AMQType.FIELD_TABLE.asTypedValue(FieldTable.convertToFieldTable((Map<String,Object>)val));\n        }\n        else if(val instanceof FieldTable)\n        {\n            return AMQType.FIELD_TABLE.asTypedValue(val);\n        }\n        else if(val instanceof Collection)\n        {\n            return AMQType.FIELD_ARRAY.asTypedValue(val);\n        }\n        throw new IllegalArgumentException(\"Cannot convert an object of class \" + val.getClass().getName() + \" to an AMQP typed value\");\n    }\n}<fim_middle>// function below has no smell\n"}