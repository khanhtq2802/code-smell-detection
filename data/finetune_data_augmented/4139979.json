{"text": "<fim_prefix>   * appropriate type for this rule's calling convention.\n   */\n  public interface ProjectFactory {\n    /** Creates a project. */\n    RelNode createProject(RelNode input, List<? extends RexNode> childExprs,\n        List<String> fieldNames);\n  }\n  /**\n   * Implementation of {@link ProjectFactory} that returns a vanilla\n   * {@link org.apache.calcite.rel.logical.LogicalProject}.\n   */\n  private static class ProjectFactoryImpl implements ProjectFactory {\n    public RelNode createProject(RelNode input,\n        List<? extends RexNode> childExprs, List<String> fieldNames) {\n      return LogicalProject.create(input, childExprs, fieldNames);\n    }\n  }\n  /**\n   * Can create a {@link Sort} of the appropriate type\n   * for this rule's calling convention.\n   */\n  public interface SortFactory {\n    /** Creates a sort. */\n    RelNode createSort(RelNode input, RelCollation collation, RexNode offset,\n        RexNode fetch);\n    @Deprecated // to be removed before 2.0\n    RelNode createSort(RelTraitSet traits, RelNode input,\n        RelCollation collation, RexNode offset, RexNode fetch);\n  }\n  /**\n   * Implementation of {@link RelFactories.SortFactory} that\n   * returns a vanilla {@link Sort}.\n   */\n  private static class SortFactoryImpl implements SortFactory {\n    public RelNode createSort(RelNode input, RelCollation collation,\n        RexNode offset, RexNode fetch) {\n      return LogicalSort.create(input, collation, offset, fetch);\n    }\n    @Deprecated // to be removed before 2.0\n    public RelNode createSort(RelTraitSet traits, RelNode input,\n        RelCollation collation, RexNode offset, RexNode fetch) {\n      return createSort(input, collation, offset, fetch);\n    }\n  }\n  /**\n   * Can create a {@link org.apache.calcite.rel.core.Exchange}\n   * of the appropriate type for a rule's calling convention.\n   */\n  public interface ExchangeFactory {\n    /** Creates a Exchange. */\n    RelNode createExchange(RelNode input, RelDistribution distribution);\n  }\n  /**\n   * Implementation of\n   * {@link RelFactories.ExchangeFactory}\n   * that returns a {@link Exchange}.\n   */\n  private static class ExchangeFactoryImpl implements ExchangeFactory {\n    @Override public RelNode createExchange(\n        RelNode input, RelDistribution distribution) {\n      return LogicalExchange.create(input, distribution);\n    }\n  }\n  /**\n   * Can create a {@link SortExchange}\n   * of the appropriate type for a rule's calling convention.\n   */\n  public interface SortExchangeFactory {\n    /**\n     * Creates a {@link SortExchange}.\n     */\n    RelNode createSortExchange(\n        RelNode input,\n        RelDistribution distribution,\n        RelCollation collation);\n  }\n  /**\n   * Implementation of\n   * {@link RelFactories.SortExchangeFactory}\n   * that returns a {@link SortExchange}.\n   */\n  private static class SortExchangeFactoryImpl implements SortExchangeFactory {\n    @Override public RelNode createSortExchange(\n        RelNode input,\n        RelDistribution distribution,\n        RelCollation collation) {\n      return LogicalSortExchange.create(input, distribution, collation);\n    }\n  }\n  /**\n   * Can create a {@link SetOp} for a particular kind of\n   * set operation (UNION, EXCEPT, INTERSECT) and of the appropriate type\n   * for this rule's calling convention.\n   */\n  public interface SetOpFactory {\n    /** Creates a set operation. */\n    RelNode createSetOp(SqlKind kind, List<RelNode> inputs, boolean all);\n  }\n  /**\n   * Implementation of {@link RelFactories.SetOpFactory} that\n   * returns a vanilla {@link SetOp} for the particular kind of set\n   * operation (UNION, EXCEPT, INTERSECT).\n   */\n  private static class SetOpFactoryImpl implements SetOpFactory {\n    public RelNode createSetOp(SqlKind kind, List<RelNode> inputs,\n        boolean all) {\n      switch (kind) {\n      case UNION:\n        return LogicalUnion.create(inputs, all);\n      case EXCEPT:\n        return LogicalMinus.create(inputs, all);\n      case INTERSECT:\n        return LogicalIntersect.create(inputs, all);\n      default:\n        throw new AssertionError(\"not a set op: \" + kind);\n      }\n    }\n  }\n  /**\n   * Can create a {@link LogicalAggregate} of the appropriate type\n   * for this rule's calling convention.\n   */\n  public interface AggregateFactory {\n    /** Creates an aggregate. */\n    RelNode createAggregate(RelNode input, boolean indicator,\n        ImmutableBitSet groupSet, ImmutableList<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls);\n  }\n  /**\n   * Implementation of {@link RelFactories.AggregateFactory}\n   * that returns a vanilla {@link LogicalAggregate}.\n   */\n  private static class AggregateFactoryImpl implements AggregateFactory {\n    @SuppressWarnings(\"deprecation\")\n    public RelNode createAggregate(RelNode input, boolean indicator,\n        ImmutableBitSet groupSet, ImmutableList<ImmutableBitSet> groupSets,\n        List<AggregateCall> aggCalls) {\n      return LogicalAggregate.create(input, indicator,\n          groupSet, groupSets, aggCalls);\n    }\n  }\n  /**\n   * Can create a {@link LogicalFilter} of the appropriate type\n   * for this rule's calling convention.\n   */\n  public interface FilterFactory {\n    /** Creates a filter. */\n    RelNode createFilter(RelNode input, RexNode condition);\n  }\n  /**\n   * Implementation of {@link RelFactories.FilterFactory} that\n   * returns a vanilla {@link LogicalFilter}.\n   */\n  private static class FilterFactoryImpl implements FilterFactory {\n    public RelNode createFilter(RelNode input, RexNode condition) {\n      return LogicalFilter.create(input, condition);\n    }\n  }\n  /**\n   * Can create a join of the appropriate type for a rule's calling convention.\n   *\n   * <p>The result is typically a {@link Join}.\n   */\n  public interface JoinFactory {\n    /**\n     * Creates a join.\n     *\n     * @param left             Left input\n     * @param right            Right input\n     * @param condition        Join condition\n     * @param variablesSet     Set of variables that are set by the\n     *                         LHS and used by the RHS and are not available to\n     *                         nodes above this LogicalJoin in the tree\n     * @param joinType         Join type\n     * @param semiJoinDone     Whether this join has been translated to a\n     *                         semi-join\n     */\n    RelNode createJoin(RelNode left, RelNode right, RexNode condition,\n        Set<CorrelationId> variablesSet, JoinRelType joinType,\n        boolean semiJoinDone);\n    @Deprecated // to be removed before 2.0\n    RelNode createJoin(RelNode left, RelNode right, RexNode condition,\n        JoinRelType joinType, Set<String> variablesStopped,\n        boolean semiJoinDone);\n  }\n  /**\n   * Implementation of {@link JoinFactory} that returns a vanilla\n   * {@link org.apache.calcite.rel.logical.LogicalJoin}.\n   */\n  private static class JoinFactoryImpl implements JoinFactory {\n    public RelNode createJoin(RelNode left, RelNode right,\n        RexNode condition, Set<CorrelationId> variablesSet,\n        JoinRelType joinType, boolean semiJoinDone) {\n      return LogicalJoin.create(left, right, condition, variablesSet, joinType,\n          semiJoinDone, ImmutableList.of());\n    }\n    public RelNode createJoin(RelNode left, RelNode right, RexNode condition,\n        JoinRelType joinType, Set<String> variablesStopped,\n        boolean semiJoinDone) {\n      return createJoin(left, right, condition,\n          CorrelationId.setOf(variablesStopped), joinType, semiJoinDone);\n    }\n  }\n  /**\n   * Can create a correlate of the appropriate type for a rule's calling\n   * convention.\n   *\n   * <p>The result is typically a {@link Correlate}.\n   */\n  public interface CorrelateFactory {\n    /**\n     * Creates a correlate.\n     *\n     * @param left             Left input\n     * @param right            Right input\n     * @param correlationId    Variable name for the row of left input\n     * @param requiredColumns  Required columns\n     * @param joinType         Join type\n     */\n    RelNode createCorrelate(RelNode left, RelNode right,\n        CorrelationId correlationId, ImmutableBitSet requiredColumns,\n        SemiJoinType joinType);\n  }\n  /**\n   * Implementation of {@link CorrelateFactory} that returns a vanilla\n   * {@link org.apache.calcite.rel.logical.LogicalCorrelate}.\n   */\n<fim_suffix>  private static class CorrelateFactoryImpl implements CorrelateFactory {\n    public RelNode createCorrelate(RelNode left, RelNode right,\n        CorrelationId correlationId, ImmutableBitSet requiredColumns,\n        SemiJoinType joinType) {\n      return LogicalCorrelate.create(left, right, correlationId,\n          requiredColumns, joinType);\n    }\n  }<fim_middle>// class below has no smell\n"}