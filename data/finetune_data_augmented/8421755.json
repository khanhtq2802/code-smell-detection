{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.impl.cloud;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.stream.Stream;\n\nimport org.apache.camel.cloud.ServiceDefinition;\nimport org.apache.camel.cloud.ServiceHealth;\nimport org.apache.camel.util.CollectionHelper;\nimport org.apache.camel.util.ObjectHelper;\nimport org.apache.camel.util.StringHelper;\n\npublic class DefaultServiceDefinition implements ServiceDefinition {\n    private static final ServiceHealth DEFAULT_SERVICE_HEALTH = new DefaultServiceHealth();\n\n    private final String id;\n    private final String name;\n    private final String host;\n    private final int port;\n    private final Map<String, String> meta;\n    private final ServiceHealth health;\n\n    public DefaultServiceDefinition(String name, String host, int port) {\n        this(null, name, host, port, Collections.emptyMap(), DEFAULT_SERVICE_HEALTH);\n    }\n\n<fim_suffix>    public DefaultServiceDefinition(String id, String name, String host, int port) {\n        this(id, name, host, port, Collections.emptyMap(), DEFAULT_SERVICE_HEALTH);\n    }\n\n    public DefaultServiceDefinition(String name, String host, int port, ServiceHealth health) {\n        this(null, name, host, port, Collections.emptyMap(), health);\n    }\n\n    public DefaultServiceDefinition(String id, String name, String host, int port, ServiceHealth health) {\n        this(id, name, host, port, Collections.emptyMap(), health);\n    }\n\n    public DefaultServiceDefinition(String name, String host, int port, Map<String, String> meta) {\n        this(null, name, host, port, meta, DEFAULT_SERVICE_HEALTH);\n    }\n\n    public DefaultServiceDefinition(String id, String name, String host, int port, Map<String, String> meta) {\n        this(id, name, host, port, meta, DEFAULT_SERVICE_HEALTH);\n    }\n\n    public DefaultServiceDefinition(String name, String host, int port, Map<String, String> meta, ServiceHealth health) {\n        this(null, name, host, port, meta, health);\n    }\n\n    public DefaultServiceDefinition(String id, String name, String host, int port, Map<String, String> meta, ServiceHealth health) {\n        this.id = id;\n        this.name = name;\n        this.host = host;\n        this.port = port;\n        this.meta = CollectionHelper.unmodifiableMap(meta);\n        this.health = ObjectHelper.supplyIfEmpty(health, () -> DEFAULT_SERVICE_HEALTH);\n    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public String getHost() {\n        return host;\n    }\n\n    @Override\n    public int getPort() {\n        return port;\n    }\n\n    @Override\n    public ServiceHealth getHealth() {\n        return health;\n    }\n\n    @Override\n    public Map<String, String> getMetadata() {\n        return this.meta;\n    }\n\n    @Override\n    public String toString() {\n        return \"DefaultServiceDefinition[\" + id + \"]\";\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n\n        DefaultServiceDefinition that = (DefaultServiceDefinition) o;\n        return getPort() == that.getPort()\n            && Objects.equals(getId(), that.getId())\n            && Objects.equals(getName(), that.getName())\n            && Objects.equals(getHost(), that.getHost());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getId(), getName(), getHost(), getPort());\n    }\n\n    // ***************************\n    // Builder\n    // ***************************\n\n    public static Stream<? extends ServiceDefinition> parse(String serverString) {\n        return Stream.of(serverString.split(\",\"))\n            .map(part -> {\n                String serviceId = null;\n                String serviceName = StringHelper.before(part, \"@\");\n\n                if (serviceName != null) {\n                    serviceId = StringHelper.before(serviceName, \"/\");\n                    serviceName = StringHelper.after(serviceName, \"/\");\n\n                    if (serviceName == null) {\n                        serviceName = StringHelper.before(part, \"@\");\n                    }\n\n                    part = StringHelper.after(part, \"@\");\n                }\n\n                String serviceHost = StringHelper.before(part, \":\");\n                String servicePort = StringHelper.after(part, \":\");\n\n                if (ObjectHelper.isNotEmpty(serviceHost) && ObjectHelper.isNotEmpty(servicePort)) {\n                    return new DefaultServiceDefinition(serviceId, serviceName, serviceHost, Integer.valueOf(servicePort));\n                }\n\n                return null;\n            }\n        ).filter(Objects::nonNull);\n    }\n\n    public static Builder builder() {\n        return new Builder();\n    }\n\n    /**\n     * Fluent builder to construct ServiceDefinition.\n     */\n    public static class Builder {\n        private String id;\n        private String name;\n        private String host;\n        private Integer port;\n        private Map<String, String> meta;\n        private ServiceHealth health;\n\n        public Builder from(ServiceDefinition source) {\n            withId(source.getId());\n            withName(source.getName());\n            withHost(source.getHost());\n            withPort(source.getPort());\n            withMeta(source.getMetadata());\n            withHealth(source.getHealth());\n\n            return this;\n        }\n\n        public Builder from(Map<String, String> properties) {\n            ObjectHelper.ifNotEmpty(properties.get(ServiceDefinition.SERVICE_META_ID), this::withId);\n            ObjectHelper.ifNotEmpty(properties.get(ServiceDefinition.SERVICE_META_NAME), this::withName);\n            ObjectHelper.ifNotEmpty(properties.get(ServiceDefinition.SERVICE_META_HOST), this::withHost);\n            ObjectHelper.ifNotEmpty(properties.get(ServiceDefinition.SERVICE_META_PORT), this::withPort);\n\n            for (Map.Entry<String, String> entry : properties.entrySet()) {\n                if (!entry.getKey().startsWith(ServiceDefinition.SERVICE_META_PREFIX)) {\n                    continue;\n                }\n\n                addMeta(entry.getKey(), entry.getValue());\n            }\n\n            return this;\n        }\n\n        public Builder withId(String id) {\n            this.id = id;\n            return this;\n        }\n\n        public String id() {\n            return id;\n        }\n\n        public Builder withName(String name) {\n            this.name = name;\n            return this;\n        }\n\n        public String name() {\n            return name;\n        }\n\n        public Builder withHost(String host) {\n            this.host = host;\n            return this;\n        }\n\n        public String host() {\n            return host;\n        }\n\n        public Builder withPort(Integer port) {\n            this.port = port;\n            return this;\n        }\n\n        public Builder withPort(String port) {\n            if (port != null) {\n                withPort(Integer.parseInt(port));\n            }\n\n            return this;\n        }\n\n        public Integer port() {\n            return port;\n        }\n\n        public Builder withMeta(Map<String, String> meta) {\n            this.meta = new HashMap<>(meta);\n            return this;\n        }\n\n        public Builder addMeta(String key, String val) {\n            if (this.meta == null) {\n                this.meta = new HashMap<>();\n            }\n\n            this.meta.put(key, val);\n\n            return this;\n        }\n\n        public Builder addAllMeta(Map<String, String> meta) {\n            if (this.meta == null) {\n                this.meta = new HashMap<>();\n            }\n\n            this.meta.putAll(meta);\n\n            return this;\n        }\n\n        public Map<String, String> meta() {\n            return meta;\n        }\n\n        public Builder withHealth(ServiceHealth health) {\n            this.health = health;\n\n            return this;\n        }\n\n        public ServiceHealth health() {\n            return health;\n        }\n\n        public ServiceDefinition build() {\n            return new DefaultServiceDefinition(id, name, host, port != null ? port : -1, meta, health);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}