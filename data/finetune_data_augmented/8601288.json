{"text": "<fim_prefix>    }\n  }\n  public static class put_args implements org.apache.thrift.TBase<put_args, put_args._Fields>, java.io.Serializable, Cloneable, Comparable<put_args>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"put_args\");\n    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"table\", org.apache.thrift.protocol.TType.STRING, (short)1);\n    private static final org.apache.thrift.protocol.TField TPUT_FIELD_DESC = new org.apache.thrift.protocol.TField(\"tput\", org.apache.thrift.protocol.TType.STRUCT, (short)2);\n    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new put_argsStandardSchemeFactory();\n    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new put_argsTupleSchemeFactory();\n    /**\n     * the table to put data in\n     */\n    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table; // required\n    /**\n     * the TPut to put\n     */\n    public @org.apache.thrift.annotation.Nullable TPut tput; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      /**\n       * the table to put data in\n       */\n      TABLE((short)1, \"table\"),\n      /**\n       * the TPut to put\n       */\n      TPUT((short)2, \"tput\");\n      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n      static {\n        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // TABLE\n            return TABLE;\n          case 2: // TPUT\n            return TPUT;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByName(java.lang.String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final java.lang.String _fieldName;\n      _Fields(short thriftId, java.lang.String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public java.lang.String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData(\"table\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));\n      tmpMap.put(_Fields.TPUT, new org.apache.thrift.meta_data.FieldMetaData(\"tput\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPut.class)));\n      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_args.class, metaDataMap);\n    }\n    public put_args() {\n    }\n    public put_args(\n      java.nio.ByteBuffer table,\n      TPut tput)\n    {\n      this();\n      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);\n      this.tput = tput;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public put_args(put_args other) {\n      if (other.isSetTable()) {\n        this.table = org.apache.thrift.TBaseHelper.copyBinary(other.table);\n      }\n      if (other.isSetTput()) {\n        this.tput = new TPut(other.tput);\n      }\n    }\n    public put_args deepCopy() {\n      return new put_args(this);\n    }\n    @Override\n    public void clear() {\n      this.table = null;\n      this.tput = null;\n    }\n    /**\n     * the table to put data in\n     */\n    public byte[] getTable() {\n      setTable(org.apache.thrift.TBaseHelper.rightSize(table));\n      return table == null ? null : table.array();\n    }\n    public java.nio.ByteBuffer bufferForTable() {\n      return org.apache.thrift.TBaseHelper.copyBinary(table);\n    }\n    /**\n     * the table to put data in\n     */\n    public put_args setTable(byte[] table) {\n      this.table = table == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(table.clone());\n      return this;\n    }\n    public put_args setTable(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer table) {\n      this.table = org.apache.thrift.TBaseHelper.copyBinary(table);\n      return this;\n    }\n    public void unsetTable() {\n      this.table = null;\n    }\n    /** Returns true if field table is set (has been assigned a value) and false otherwise */\n    public boolean isSetTable() {\n      return this.table != null;\n    }\n    public void setTableIsSet(boolean value) {\n      if (!value) {\n        this.table = null;\n      }\n    }\n    /**\n     * the TPut to put\n     */\n    @org.apache.thrift.annotation.Nullable\n    public TPut getTput() {\n      return this.tput;\n    }\n    /**\n     * the TPut to put\n     */\n    public put_args setTput(@org.apache.thrift.annotation.Nullable TPut tput) {\n      this.tput = tput;\n      return this;\n    }\n    public void unsetTput() {\n      this.tput = null;\n    }\n    /** Returns true if field tput is set (has been assigned a value) and false otherwise */\n    public boolean isSetTput() {\n      return this.tput != null;\n    }\n    public void setTputIsSet(boolean value) {\n      if (!value) {\n        this.tput = null;\n      }\n    }\n    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {\n      switch (field) {\n      case TABLE:\n        if (value == null) {\n          unsetTable();\n        } else {\n          if (value instanceof byte[]) {\n            setTable((byte[])value);\n          } else {\n            setTable((java.nio.ByteBuffer)value);\n          }\n        }\n        break;\n      case TPUT:\n        if (value == null) {\n          unsetTput();\n        } else {\n          setTput((TPut)value);\n        }\n        break;\n      }\n    }\n    @org.apache.thrift.annotation.Nullable\n    public java.lang.Object getFieldValue(_Fields field) {\n      switch (field) {\n      case TABLE:\n        return getTable();\n      case TPUT:\n        return getTput();\n      }\n      throw new java.lang.IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n<fim_suffix>    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new java.lang.IllegalArgumentException();\n      }\n      switch (field) {\n      case TABLE:\n        return isSetTable();\n      case TPUT:\n        return isSetTput();\n      }\n      throw new java.lang.IllegalStateException();\n    }<fim_middle>// function below has no smell\n"}