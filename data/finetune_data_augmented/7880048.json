{"text": "<fim_prefix>    }\n    /**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\n    public static _Fields findByName(java.lang.String name) {\n      return byName.get(name);\n    }\n    private final short _thriftId;\n    private final java.lang.String _fieldName;\n    _Fields(short thriftId, java.lang.String fieldName) {\n      _thriftId = thriftId;\n      _fieldName = fieldName;\n    }\n    public short getThriftFieldId() {\n      return _thriftId;\n    }\n    public java.lang.String getFieldName() {\n      return _fieldName;\n    }\n  }\n  // isset id assignments\n  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n  static {\n    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData(\"name\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BuildTarget.class, metaDataMap);\n  }\n  public BuildTarget() {\n  }\n  public BuildTarget(\n    java.lang.String name)\n  {\n    this();\n    this.name = name;\n  }\n  /**\n   * Performs a deep copy on <i>other</i>.\n   */\n  public BuildTarget(BuildTarget other) {\n    if (other.isSetName()) {\n      this.name = other.name;\n    }\n  }\n  public BuildTarget deepCopy() {\n    return new BuildTarget(this);\n  }\n  @Override\n  public void clear() {\n    this.name = null;\n  }\n  public java.lang.String getName() {\n    return this.name;\n  }\n  public BuildTarget setName(java.lang.String name) {\n    this.name = name;\n    return this;\n  }\n  public void unsetName() {\n    this.name = null;\n  }\n  /** Returns true if field name is set (has been assigned a value) and false otherwise */\n  public boolean isSetName() {\n    return this.name != null;\n  }\n  public void setNameIsSet(boolean value) {\n    if (!value) {\n      this.name = null;\n    }\n  }\n  public void setFieldValue(_Fields field, java.lang.Object value) {\n    switch (field) {\n    case NAME:\n      if (value == null) {\n        unsetName();\n      } else {\n        setName((java.lang.String)value);\n      }\n      break;\n    }\n  }\n  public java.lang.Object getFieldValue(_Fields field) {\n    switch (field) {\n    case NAME:\n      return getName();\n    }\n    throw new java.lang.IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new java.lang.IllegalArgumentException();\n    }\n    switch (field) {\n    case NAME:\n      return isSetName();\n    }\n    throw new java.lang.IllegalStateException();\n  }\n  @Override\n  public boolean equals(java.lang.Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof BuildTarget)\n      return this.equals((BuildTarget)that);\n    return false;\n  }\n  public boolean equals(BuildTarget that) {\n    if (that == null)\n      return false;\n    if (this == that)\n      return true;\n    boolean this_present_name = true && this.isSetName();\n    boolean that_present_name = true && that.isSetName();\n    if (this_present_name || that_present_name) {\n      if (!(this_present_name && that_present_name))\n        return false;\n      if (!this.name.equals(that.name))\n        return false;\n    }\n    return true;\n  }\n  @Override\n  public int hashCode() {\n    int hashCode = 1;\n    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);\n    if (isSetName())\n      hashCode = hashCode * 8191 + name.hashCode();\n    return hashCode;\n  }\n  @Override\n  public int compareTo(BuildTarget other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetName()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    scheme(iprot).read(iprot, this);\n  }\n  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n    scheme(oprot).write(oprot, this);\n  }\n  @Override\n  public java.lang.String toString() {\n    java.lang.StringBuilder sb = new java.lang.StringBuilder(\"BuildTarget(\");\n    boolean first = true;\n    sb.append(\"name:\");\n    if (this.name == null) {\n      sb.append(\"null\");\n    } else {\n      sb.append(this.name);\n    }\n    first = false;\n    sb.append(\")\");\n    return sb.toString();\n  }\n  public void validate() throws org.apache.thrift.TException {\n    // check for required fields\n    // check for sub-struct validity\n  }\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    try {\n      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {\n    try {\n      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private static class BuildTargetStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n    public BuildTargetStandardScheme getScheme() {\n      return new BuildTargetStandardScheme();\n    }\n  }\n  private static class BuildTargetStandardScheme extends org.apache.thrift.scheme.StandardScheme<BuildTarget> {\n    public void read(org.apache.thrift.protocol.TProtocol iprot, BuildTarget struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TField schemeField;\n      iprot.readStructBegin();\n      while (true)\n      {\n        schemeField = iprot.readFieldBegin();\n        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n          break;\n        }\n        switch (schemeField.id) {\n          case 1: // NAME\n            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n              struct.name = iprot.readString();\n              struct.setNameIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          default:\n            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n        }\n        iprot.readFieldEnd();\n      }\n      iprot.readStructEnd();\n      // check for required fields of primitive type, which can't be checked in the validate method\n      struct.validate();\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot, BuildTarget struct) throws org.apache.thrift.TException {\n      struct.validate();\n      oprot.writeStructBegin(STRUCT_DESC);\n      if (struct.name != null) {\n        oprot.writeFieldBegin(NAME_FIELD_DESC);\n        oprot.writeString(struct.name);\n        oprot.writeFieldEnd();\n      }\n      oprot.writeFieldStop();\n      oprot.writeStructEnd();\n    }\n  }\n<fim_suffix>  private static class BuildTargetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {\n    public BuildTargetTupleScheme getScheme() {\n      return new BuildTargetTupleScheme();\n    }\n  }<fim_middle>// class below has no smell\n"}