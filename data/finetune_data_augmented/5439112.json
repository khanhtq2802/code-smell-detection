{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.pivot.wtk;\n\nimport org.apache.pivot.collections.Sequence;\nimport org.apache.pivot.util.ListenerList;\n\n/**\n * Prompt listener interface.\n */\n<fim_suffix>public interface PromptListener {\n    /**\n     * Prompt listeners.\n     */\n    public static class Listeners extends ListenerList<PromptListener> implements PromptListener {\n        @Override\n        public void messageTypeChanged(Prompt prompt, MessageType previousMessageType) {\n            forEach(listener -> listener.messageTypeChanged(prompt, previousMessageType));\n        }\n\n        @Override\n        public void messageChanged(Prompt prompt, String previousMessage) {\n            forEach(listener -> listener.messageChanged(prompt, previousMessage));\n        }\n\n        @Override\n        public void bodyChanged(Prompt prompt, Component previousBody) {\n            forEach(listener -> listener.bodyChanged(prompt, previousBody));\n        }\n\n        @Override\n        public void optionInserted(Prompt prompt, int index) {\n            forEach(listener -> listener.optionInserted(prompt, index));\n        }\n\n        @Override\n        public void optionsRemoved(Prompt prompt, int index, Sequence<?> removed) {\n            forEach(listener -> listener.optionsRemoved(prompt, index, removed));\n        }\n\n        @Override\n        public void selectedOptionChanged(Prompt prompt, int previousSelectedOption) {\n            forEach(listener -> listener.selectedOptionChanged(prompt, previousSelectedOption));\n        }\n    }\n\n    /**\n     * Prompt listener adapter.\n     * @deprecated Since 2.1 and Java 8 the interface itself has default implementations.\n     */\n    @Deprecated\n    public static class Adapter implements PromptListener {\n        @Override\n        public void messageTypeChanged(Prompt prompt, MessageType previousMessageType) {\n            // empty block\n        }\n\n        @Override\n        public void messageChanged(Prompt prompt, String previousMessage) {\n            // empty block\n        }\n\n        @Override\n        public void bodyChanged(Prompt prompt, Component previousBody) {\n            // empty block\n        }\n\n        @Override\n        public void optionInserted(Prompt prompt, int index) {\n            // empty block\n        }\n\n        @Override\n        public void optionsRemoved(Prompt prompt, int index, Sequence<?> removed) {\n            // empty block\n        }\n\n        @Override\n        public void selectedOptionChanged(Prompt prompt, int previousSelectedOption) {\n            // empty block\n        }\n    }\n\n    /**\n     * Called when a prompt's message type has changed.\n     *\n     * @param prompt The prompt object that has been changed.\n     * @param previousMessageType The message type before the change.\n     */\n    default void messageTypeChanged(Prompt prompt, MessageType previousMessageType) {\n    }\n\n    /**\n     * Called when a prompt's message has changed.\n     *\n     * @param prompt The prompt whose message has changed.\n     * @param previousMessage What the message used to be.\n     */\n    default void messageChanged(Prompt prompt, String previousMessage) {\n    }\n\n    /**\n     * Called when a prompt's body has changed.\n     *\n     * @param prompt The prompt that has changed.\n     * @param previousBody What the body of this prompt used to be.\n     */\n    default void bodyChanged(Prompt prompt, Component previousBody) {\n    }\n\n    /**\n     * Called when an option has been inserted into a prompt's option sequence.\n     *\n     * @param prompt The prompt whose options have changed.\n     * @param index The location where the new option was inserted.\n     */\n    default void optionInserted(Prompt prompt, int index) {\n    }\n\n    /**\n     * Called when options have been removed from a prompt's option sequence.\n     *\n     * @param prompt The prompt whose options have changed.\n     * @param index The starting location of the removed options.\n     * @param removed The actual sequence of options removed.\n     */\n    default void optionsRemoved(Prompt prompt, int index, Sequence<?> removed) {\n    }\n\n    /**\n     * Called when a prompt's selected option has changed.\n     *\n     * @param prompt The prompt that changed.\n     * @param previousSelectedOption The option that used to be the selected one.\n     */\n    default void selectedOptionChanged(Prompt prompt, int previousSelectedOption) {\n    }\n}<fim_middle>// class below has no smell\n"}