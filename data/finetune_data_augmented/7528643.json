{"text": "<fim_prefix>/*\n * Copyright 2016-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.integration.aws.outbound;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport org.springframework.cloud.aws.core.env.ResourceIdResolver;\nimport org.springframework.cloud.aws.messaging.support.destination.DynamicQueueUrlDestinationResolver;\nimport org.springframework.expression.Expression;\nimport org.springframework.expression.common.LiteralExpression;\nimport org.springframework.integration.aws.support.AwsHeaders;\nimport org.springframework.integration.aws.support.SqsHeaderMapper;\nimport org.springframework.integration.expression.ValueExpression;\nimport org.springframework.integration.handler.AbstractMessageHandler;\nimport org.springframework.integration.mapping.HeaderMapper;\nimport org.springframework.integration.support.AbstractIntegrationMessageBuilder;\nimport org.springframework.messaging.Message;\nimport org.springframework.messaging.converter.GenericMessageConverter;\nimport org.springframework.messaging.converter.MessageConverter;\nimport org.springframework.messaging.core.DestinationResolver;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\nimport com.amazonaws.AmazonWebServiceRequest;\nimport com.amazonaws.handlers.AsyncHandler;\nimport com.amazonaws.services.sqs.AmazonSQSAsync;\nimport com.amazonaws.services.sqs.model.MessageAttributeValue;\nimport com.amazonaws.services.sqs.model.SendMessageBatchRequest;\nimport com.amazonaws.services.sqs.model.SendMessageBatchResult;\nimport com.amazonaws.services.sqs.model.SendMessageRequest;\nimport com.amazonaws.services.sqs.model.SendMessageResult;\n/**\n * The {@link AbstractMessageHandler} implementation for the Amazon SQS {@code sendMessage}.\n *\n * @author Artem Bilan\n * @author Rahul Pilani\n * @author Taylor Wicksell\n * @author Seth Kelly\n *\n * @see AmazonSQSAsync#sendMessageAsync(SendMessageRequest, AsyncHandler)\n * @see com.amazonaws.handlers.AsyncHandler\n */\npublic class SqsMessageHandler extends AbstractAwsMessageHandler<Map<String, MessageAttributeValue>> {\n\tprivate final AmazonSQSAsync amazonSqs;\n\tprivate final DestinationResolver<?> destinationResolver;\n\tprivate MessageConverter messageConverter;\n\tprivate Expression queueExpression;\n\tprivate Expression delayExpression;\n\tprivate Expression messageGroupIdExpression;\n\tprivate Expression messageDeduplicationIdExpression;\n\tpublic SqsMessageHandler(AmazonSQSAsync amazonSqs) {\n\t\tthis(amazonSqs, (ResourceIdResolver) null);\n\t}\n<fim_suffix>\tpublic SqsMessageHandler(AmazonSQSAsync amazonSqs, ResourceIdResolver resourceIdResolver) {\n\t\tthis(amazonSqs, new DynamicQueueUrlDestinationResolver(amazonSqs, resourceIdResolver));\n\t}\n\tpublic SqsMessageHandler(AmazonSQSAsync amazonSqs, DestinationResolver<?> destinationResolver) {\n\t\tAssert.notNull(amazonSqs, \"'amazonSqs' must not be null\");\n\t\tAssert.notNull(destinationResolver, \"'destinationResolver' must not be null\");\n\t\tthis.amazonSqs = amazonSqs;\n\t\tthis.destinationResolver = destinationResolver;\n\t\tdoSetHeaderMapper(new SqsHeaderMapper());\n\t}\n\tpublic void setQueue(String queue) {\n\t\tAssert.hasText(queue, \"'queue' must not be empty\");\n\t\tsetQueueExpression(new LiteralExpression(queue));\n\t}\n\tpublic void setQueueExpressionString(String queueExpression) {\n\t\tsetQueueExpression(EXPRESSION_PARSER.parseExpression(queueExpression));\n\t}\n\tpublic void setQueueExpression(Expression queueExpression) {\n\t\tAssert.notNull(queueExpression, \"'queueExpression' must not be null\");\n\t\tthis.queueExpression = queueExpression;\n\t}\n\tpublic void setDelay(int delaySeconds) {\n\t\tsetDelayExpression(new ValueExpression<>(delaySeconds));\n\t}\n\tpublic void setDelayExpressionString(String delayExpression) {\n\t\tsetDelayExpression(EXPRESSION_PARSER.parseExpression(delayExpression));\n\t}\n\tpublic void setDelayExpression(Expression delayExpression) {\n\t\tAssert.notNull(delayExpression, \"'delayExpression' must not be null\");\n\t\tthis.delayExpression = delayExpression;\n\t}\n\tpublic void setMessageGroupId(String messageGroupId) {\n\t\tsetMessageGroupIdExpression(new LiteralExpression(messageGroupId));\n\t}\n\tpublic void setMessageGroupIdExpressionString(String groupIdExpression) {\n\t\tsetMessageGroupIdExpression(EXPRESSION_PARSER.parseExpression(groupIdExpression));\n\t}\n\tpublic void setMessageGroupIdExpression(Expression messageGroupIdExpression) {\n\t\tAssert.notNull(messageGroupIdExpression, \"'messageGroupIdExpression' must not be null\");\n\t\tthis.messageGroupIdExpression = messageGroupIdExpression;\n\t}\n\tpublic void setMessageDeduplicationId(String messageDeduplicationId) {\n\t\tsetMessageDeduplicationIdExpression(new LiteralExpression(messageDeduplicationId));\n\t}\n\tpublic void setMessageDeduplicationIdExpressionString(String messageDeduplicationIdExpression) {\n\t\tsetMessageDeduplicationIdExpression(EXPRESSION_PARSER.parseExpression(messageDeduplicationIdExpression));\n\t}\n\tpublic void setMessageDeduplicationIdExpression(Expression messageDeduplicationIdExpression) {\n\t\tAssert.notNull(messageDeduplicationIdExpression, \"'messageDeduplicationIdExpression' must not be null\");\n\t\tthis.messageDeduplicationIdExpression = messageDeduplicationIdExpression;\n\t}\n\tpublic void setMessageConverter(MessageConverter messageConverter) {\n\t\tthis.messageConverter = messageConverter;\n\t}\n\t@Override\n\tprotected void onInit() {\n\t\tsuper.onInit();\n\t\tif (this.messageConverter == null) {\n\t\t\tthis.messageConverter = new GenericMessageConverter(getConversionService());\n\t\t}\n\t}\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tprotected Future<?> handleMessageToAws(Message<?> message) {\n\t\tObject payload = message.getPayload();\n\t\tif (payload instanceof SendMessageBatchRequest) {\n\t\t\tAsyncHandler<SendMessageBatchRequest, SendMessageBatchResult> asyncHandler =\n\t\t\t\t\tobtainAsyncHandler(message, (SendMessageBatchRequest) payload);\n\t\t\treturn this.amazonSqs.sendMessageBatchAsync((SendMessageBatchRequest) payload, asyncHandler);\n\t\t}\n\t\tSendMessageRequest sendMessageRequest;\n\t\tif (payload instanceof SendMessageRequest) {\n\t\t\tsendMessageRequest = (SendMessageRequest) payload;\n\t\t}\n\t\telse {\n\t\t\tString queue = message.getHeaders().get(AwsHeaders.QUEUE, String.class);\n\t\t\tif (!StringUtils.hasText(queue) && this.queueExpression != null) {\n\t\t\t\tqueue = this.queueExpression.getValue(getEvaluationContext(), message, String.class);\n\t\t\t}\n\t\t\tAssert.state(queue != null, \"'queue' must not be null for sending an SQS message. \" +\n\t\t\t\t\t\"Consider configuring this handler with a 'queue'( or 'queueExpression') or supply an \" +\n\t\t\t\t\t\"'aws_queue' message header\");\n\t\t\tString queueUrl = (String) this.destinationResolver.resolveDestination(queue);\n\t\t\tString messageBody = (String) this.messageConverter.fromMessage(message, String.class);\n\t\t\tsendMessageRequest = new SendMessageRequest(queueUrl, messageBody);\n\t\t\tif (this.delayExpression != null) {\n\t\t\t\tInteger delay = this.delayExpression.getValue(getEvaluationContext(), message, Integer.class);\n\t\t\t\tsendMessageRequest.setDelaySeconds(delay);\n\t\t\t}\n\t\t\tif (this.messageGroupIdExpression != null) {\n\t\t\t\tString messageGroupId =\n\t\t\t\t\t\tthis.messageGroupIdExpression.getValue(getEvaluationContext(), message, String.class);\n\t\t\t\tsendMessageRequest.setMessageGroupId(messageGroupId);\n\t\t\t}\n\t\t\tif (this.messageDeduplicationIdExpression != null) {\n\t\t\t\tString messageDeduplicationId =\n\t\t\t\t\t\tthis.messageDeduplicationIdExpression.getValue(getEvaluationContext(), message, String.class);\n\t\t\t\tsendMessageRequest.setMessageDeduplicationId(messageDeduplicationId);\n\t\t\t}\n\t\t\tHeaderMapper<Map<String, MessageAttributeValue>> headerMapper = getHeaderMapper();\n\t\t\tif (headerMapper != null) {\n\t\t\t\tmapHeaders(message, sendMessageRequest, headerMapper);\n\t\t\t}\n\t\t}\n\t\tAsyncHandler<SendMessageRequest, SendMessageResult> asyncHandler =\n\t\t\t\tobtainAsyncHandler(message, sendMessageRequest);<fim_middle>// function below has no smell\n"}