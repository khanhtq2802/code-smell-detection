{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2016 IBH SYSTEMS GmbH and others.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     IBH SYSTEMS GmbH - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.packagedrone.utils.gson;\n\nimport java.lang.reflect.Type;\nimport java.time.Instant;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\n\nimport com.google.gson.JsonDeserializationContext;\nimport com.google.gson.JsonDeserializer;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParseException;\nimport com.google.gson.JsonPrimitive;\nimport com.google.gson.JsonSerializationContext;\nimport com.google.gson.JsonSerializer;\n\npublic class InstantTypeAdapter implements JsonSerializer<Instant>, JsonDeserializer<Instant>\n{\n    public static final InstantTypeAdapter DEFAULT_INSTANCE = new InstantTypeAdapter ();\n\n    private final DateTimeFormatter formatter;\n\n<fim_suffix>    public InstantTypeAdapter ( final DateTimeFormatter formatter )\n    {\n        this.formatter = formatter.withLocale ( Locale.US );\n    }\n\n    public InstantTypeAdapter ()\n    {\n        this ( DateTimeFormatter.ISO_INSTANT.withLocale ( Locale.US ) );\n    }\n\n    @Override\n    public Instant deserialize ( final JsonElement json, final Type typeOfT, final JsonDeserializationContext context ) throws JsonParseException\n    {\n        if ( ! ( json instanceof JsonPrimitive ) )\n        {\n            throw new JsonParseException ( \"Timestamps should be encoded as JSON strings\" );\n        }\n\n        return Instant.from ( this.formatter.parse ( json.getAsString () ) );\n    }\n\n    @Override\n    public JsonElement serialize ( final Instant src, final Type typeOfSrc, final JsonSerializationContext context )\n    {\n        return new JsonPrimitive ( this.formatter.format ( src ) );\n    }\n\n}<fim_middle>// function below has no smell\n"}