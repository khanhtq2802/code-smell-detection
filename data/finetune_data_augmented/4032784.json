{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.beam.runners.spark.coders;\n\nimport static org.apache.beam.vendor.guava.v20_0.com.google.common.base.Preconditions.checkNotNull;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\nimport org.apache.beam.runners.spark.util.ByteArray;\nimport org.apache.beam.sdk.coders.Coder;\nimport org.apache.spark.api.java.function.Function;\nimport org.apache.spark.api.java.function.PairFunction;\nimport scala.Tuple2;\n\n/** Serialization utility class. */\n<fim_suffix>public final class CoderHelpers {\n  private CoderHelpers() {}\n\n  /**\n   * Utility method for serializing an object using the specified coder.\n   *\n   * @param value Value to serialize.\n   * @param coder Coder to serialize with.\n   * @param <T> type of value that is serialized\n   * @return Byte array representing serialized object.\n   */\n  public static <T> byte[] toByteArray(T value, Coder<T> coder) {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try {\n      coder.encode(value, baos, new Coder.Context(true));\n    } catch (IOException e) {\n      throw new IllegalStateException(\"Error encoding value: \" + value, e);\n    }\n    return baos.toByteArray();\n  }\n\n  /**\n   * Utility method for serializing a Iterable of values using the specified coder.\n   *\n   * @param values Values to serialize.\n   * @param coder Coder to serialize with.\n   * @param <T> type of value that is serialized\n   * @return List of bytes representing serialized objects.\n   */\n  public static <T> List<byte[]> toByteArrays(Iterable<T> values, Coder<T> coder) {\n    List<byte[]> res = new ArrayList<>();\n    for (T value : values) {\n      res.add(toByteArray(value, coder));\n    }\n    return res;\n  }\n\n  /**\n   * Utility method for deserializing a byte array using the specified coder.\n   *\n   * @param serialized bytearray to be deserialized.\n   * @param coder Coder to deserialize with.\n   * @param <T> Type of object to be returned.\n   * @return Deserialized object.\n   */\n  public static <T> T fromByteArray(byte[] serialized, Coder<T> coder) {\n    ByteArrayInputStream bais = new ByteArrayInputStream(serialized);\n    try {\n      return coder.decode(bais, new Coder.Context(true));\n    } catch (IOException e) {\n      throw new IllegalStateException(\"Error decoding bytes for coder: \" + coder, e);\n    }\n  }\n\n  /**\n   * Utility method for deserializing a Iterable of byte arrays using the specified coder.\n   *\n   * @param serialized bytearrays to be deserialized.\n   * @param coder Coder to deserialize with.\n   * @param <T> Type of object to be returned.\n   * @return Iterable of deserialized objects.\n   */\n  public static <T> Iterable<T> fromByteArrays(\n      Collection<byte[]> serialized, final Coder<T> coder) {\n    return serialized.stream()\n        .map(bytes -> fromByteArray(checkNotNull(bytes, \"Cannot decode null values.\"), coder))\n        .collect(Collectors.toList());\n  }\n\n  /**\n   * A function wrapper for converting an object to a bytearray.\n   *\n   * @param coder Coder to serialize with.\n   * @param <T> The type of the object being serialized.\n   * @return A function that accepts an object and returns its coder-serialized form.\n   */\n  public static <T> Function<T, byte[]> toByteFunction(final Coder<T> coder) {\n    return t -> toByteArray(t, coder);\n  }\n\n  /**\n   * A function wrapper for converting a byte array to an object.\n   *\n   * @param coder Coder to deserialize with.\n   * @param <T> The type of the object being deserialized.\n   * @return A function that accepts a byte array and returns its corresponding object.\n   */\n  public static <T> Function<byte[], T> fromByteFunction(final Coder<T> coder) {\n    return bytes -> fromByteArray(bytes, coder);\n  }\n\n  /**\n   * A function wrapper for converting a key-value pair to a byte array pair.\n   *\n   * @param keyCoder Coder to serialize keys.\n   * @param valueCoder Coder to serialize values.\n   * @param <K> The type of the key being serialized.\n   * @param <V> The type of the value being serialized.\n   * @return A function that accepts a key-value pair and returns a pair of byte arrays.\n   */\n  public static <K, V> PairFunction<Tuple2<K, V>, ByteArray, byte[]> toByteFunction(\n      final Coder<K> keyCoder, final Coder<V> valueCoder) {\n    return kv ->\n        new Tuple2<>(\n            new ByteArray(toByteArray(kv._1(), keyCoder)), toByteArray(kv._2(), valueCoder));\n  }\n\n  /**\n   * A function wrapper for converting a byte array pair to a key-value pair.\n   *\n   * @param keyCoder Coder to deserialize keys.\n   * @param valueCoder Coder to deserialize values.\n   * @param <K> The type of the key being deserialized.\n   * @param <V> The type of the value being deserialized.\n   * @return A function that accepts a pair of byte arrays and returns a key-value pair.\n   */\n  public static <K, V> PairFunction<Tuple2<ByteArray, byte[]>, K, V> fromByteFunction(\n      final Coder<K> keyCoder, final Coder<V> valueCoder) {\n    return tuple ->\n        new Tuple2<>(\n            fromByteArray(tuple._1().getValue(), keyCoder), fromByteArray(tuple._2(), valueCoder));\n  }\n\n  /**\n   * A function wrapper for converting a byte array pair to a key-value pair, where values are\n   * {@link Iterable}.\n   *\n   * @param keyCoder Coder to deserialize keys.\n   * @param valueCoder Coder to deserialize values.\n   * @param <K> The type of the key being deserialized.\n   * @param <V> The type of the value being deserialized.\n   * @return A function that accepts a pair of byte arrays and returns a key-value pair.\n   */\n  public static <K, V>\n      PairFunction<Tuple2<ByteArray, Iterable<byte[]>>, K, Iterable<V>> fromByteFunctionIterable(\n          final Coder<K> keyCoder, final Coder<V> valueCoder) {\n    return tuple ->\n        new Tuple2<>(\n            fromByteArray(tuple._1().getValue(), keyCoder),\n            StreamSupport.stream(tuple._2().spliterator(), false)\n                .map(bytes -> fromByteArray(bytes, valueCoder))\n                .collect(Collectors.toList()));\n  }\n}<fim_middle>// class below has no smell\n"}