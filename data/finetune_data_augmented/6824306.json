{"text": "<fim_prefix>        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); \n            }\n            pushFollow(FOLLOW_2);\n            norm1_LogicalANDExpression();\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_LogicalORExpression__Group__1() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_2);\n            norm1_LogicalORExpression__Group__1__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_LogicalORExpression__Group__1__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getLogicalORExpressionAccess().getGroup_1()); \n            }\n            loop445:\n            do {\n                int alt445=2;\n                int LA445_0 = input.LA(1);\n                if ( (LA445_0==VerticalLineVerticalLine) ) {\n                    alt445=1;\n                }\n                switch (alt445) {\n            \tcase 1 :\n            \t    {\n            \t    pushFollow(FOLLOW_138);\n            \t    norm1_LogicalORExpression__Group_1__0();\n            \t    state._fsp--;\n            \t    if (state.failed) return ;\n            \t    }\n            \t    break;\n            \tdefault :\n            \t    break loop445;\n                }\n            } while (true);\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getLogicalORExpressionAccess().getGroup_1()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_LogicalORExpression__Group_1__0() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_25);\n            norm1_LogicalORExpression__Group_1__0__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            pushFollow(FOLLOW_2);\n            norm1_LogicalORExpression__Group_1__1();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_LogicalORExpression__Group_1__0__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getLogicalORExpressionAccess().getGroup_1_0()); \n            }\n            {\n            pushFollow(FOLLOW_2);\n            norm1_LogicalORExpression__Group_1_0__0();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getLogicalORExpressionAccess().getGroup_1_0()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_LogicalORExpression__Group_1__1() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_2);\n            norm1_LogicalORExpression__Group_1__1__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_LogicalORExpression__Group_1__1__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); \n            }\n            {\n            pushFollow(FOLLOW_2);\n            norm1_LogicalORExpression__RhsAssignment_1_1();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_LogicalORExpression__Group_1_0__0() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_2);\n            norm1_LogicalORExpression__Group_1_0__0__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_LogicalORExpression__Group_1_0__0__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getLogicalORExpressionAccess().getGroup_1_0_0()); \n            }\n            {\n            pushFollow(FOLLOW_2);\n            norm1_LogicalORExpression__Group_1_0_0__0();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getLogicalORExpressionAccess().getGroup_1_0_0()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_LogicalORExpression__Group_1_0_0__0() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_137);\n            norm1_LogicalORExpression__Group_1_0_0__0__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            pushFollow(FOLLOW_2);\n            norm1_LogicalORExpression__Group_1_0_0__1();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    public final void norm1_LogicalORExpression__Group_1_0_0__0__Impl() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0()); \n            }\n            {\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0()); \n            }\n            }\n            }\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n<fim_suffix>    public final void norm1_LogicalORExpression__Group_1_0_0__1() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            {\n            pushFollow(FOLLOW_2);\n            norm1_LogicalORExpression__Group_1_0_0__1__Impl();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }<fim_middle>// function below has no smell\n"}