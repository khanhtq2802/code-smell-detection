{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.struts2.factory;\n\nimport com.opensymphony.xwork2.ActionContext;\nimport com.opensymphony.xwork2.ActionInvocation;\nimport com.opensymphony.xwork2.DefaultActionProxy;\nimport org.apache.struts2.ServletActionContext;\n\nimport java.util.Locale;\n\n<fim_suffix>public class StrutsActionProxy extends DefaultActionProxy {\n\n    private static final long serialVersionUID = -2434901249671934080L;\n\n    public StrutsActionProxy(ActionInvocation inv, String namespace, String actionName, String methodName,\n                             boolean executeResult, boolean cleanupContext) {\n        super(inv, namespace, actionName, methodName, executeResult, cleanupContext);\n    }\n\n    public String execute() throws Exception {\n        ActionContext previous = ActionContext.getContext();\n        ActionContext.setContext(invocation.getInvocationContext());\n        try {\n// This is for the new API:\n//            return RequestContextImpl.callInContext(invocation, new Callable<String>() {\n//                public String call() throws Exception {\n//                    return invocation.invoke();\n//                }\n//            });\n\n            return invocation.invoke();\n        } finally {\n            if (cleanupContext)\n                ActionContext.setContext(previous);\n        }\n    }\n\n    @Override\n    protected void prepare() {\n        super.prepare();\n    }\n\n    @Override\n    protected String getErrorMessage() {\n        if ((namespace != null) && (namespace.trim().length() > 0)) {\n            String contextPath = ServletActionContext.getRequest().getContextPath();\n            return localizedTextProvider.findDefaultText(\n                    \"struts.exception.missing-package-action.with-context\",\n                    Locale.getDefault(),\n                    new String[]{namespace, actionName, contextPath}\n            );\n        } else {\n            return super.getErrorMessage();\n        }\n    }\n\n}<fim_middle>// class below has no smell\n"}