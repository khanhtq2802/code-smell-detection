{"text": "<fim_prefix>/*\n * Copyright 2014-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.facebook.litho.widget;\n\nimport androidx.annotation.Nullable;\nimport com.facebook.litho.Column;\nimport com.facebook.litho.Component;\nimport com.facebook.litho.ComponentContext;\nimport com.facebook.litho.EventHandler;\nimport com.facebook.litho.RenderCompleteEvent;\n\n/** {@link RenderInfo} that can render components. */\n<fim_suffix>public class ComponentRenderInfo extends BaseRenderInfo {\n\n  public static final String LAYOUT_DIFFING_ENABLED = \"layout_diffing_enabled\";\n  public static final String PERSISTENCE_ENABLED = \"is_persistence_enabled\";\n\n  private final Component mComponent;\n  @Nullable private final EventHandler<RenderCompleteEvent> mRenderCompleteEventHandler;\n\n  public static Builder create() {\n    return new Builder();\n  }\n\n  private ComponentRenderInfo(Builder builder) {\n    super(builder);\n\n    if (builder.mComponent == null) {\n      throw new IllegalStateException(\"Component must be provided.\");\n    }\n\n    mComponent = builder.mComponent;\n    mRenderCompleteEventHandler = builder.mRenderCompleteEventEventHandler;\n  }\n\n  /** Create empty {@link ComponentRenderInfo}. */\n  public static RenderInfo createEmpty() {\n    return create().component(new EmptyComponent()).build();\n  }\n\n  @Override\n  public Component getComponent() {\n    return mComponent;\n  }\n\n  @Override\n  @Nullable\n  public EventHandler<RenderCompleteEvent> getRenderCompleteEventHandler() {\n    return mRenderCompleteEventHandler;\n  }\n\n  @Override\n  public boolean rendersComponent() {\n    return true;\n  }\n\n  @Override\n  public String getName() {\n    return mComponent.getSimpleName();\n  }\n\n  public static class Builder extends BaseRenderInfo.Builder<Builder> {\n    private Component mComponent;\n    private EventHandler<RenderCompleteEvent> mRenderCompleteEventEventHandler;\n\n    /** Specify {@link Component} that will be rendered as an item of the list. */\n    public Builder component(Component component) {\n      this.mComponent = component;\n      return this;\n    }\n\n    public Builder renderCompleteHandler(\n        EventHandler<RenderCompleteEvent> renderCompleteEventHandler) {\n      this.mRenderCompleteEventEventHandler = renderCompleteEventHandler;\n      return this;\n    }\n\n    public Builder component(Component.Builder builder) {\n      return component(builder.build());\n    }\n\n    public ComponentRenderInfo build() {\n      return new ComponentRenderInfo(this);\n    }\n  }\n\n  private static class EmptyComponent extends Component {\n\n    protected EmptyComponent() {\n      super(\"EmptyComponent\");\n    }\n\n    @Override\n    protected Component onCreateLayout(ComponentContext c) {\n      return Column.create(c).build();\n    }\n\n    @Override\n    public boolean isEquivalentTo(Component other) {\n      return EmptyComponent.this == other\n          || (other != null && EmptyComponent.this.getClass() == other.getClass());\n    }\n  }\n}<fim_middle>// class below is data class\n"}