{"text": "<fim_prefix>// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See License.txt in the repository root.\n\npackage com.microsoft.tfs.client.common.commands.helpers;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.eclipse.core.runtime.IStatus;\nimport org.eclipse.core.runtime.MultiStatus;\nimport org.eclipse.core.runtime.Status;\n\nimport com.microsoft.tfs.client.common.TFSCommonClientPlugin;\nimport com.microsoft.tfs.core.clients.versioncontrol.events.NonFatalErrorEvent;\nimport com.microsoft.tfs.core.clients.versioncontrol.events.NonFatalErrorListener;\nimport com.microsoft.tfs.core.clients.versioncontrol.soapextensions.Workspace;\nimport com.microsoft.tfs.util.Check;\n\n/*\n * NonFatalErrorHelper is a simple listener for NonFatalErrors produced by core.\n * It will listen for non-fatals occurring on the calling thread (whichever\n * thread instantiates this) and provides several helpful methods for retrieving\n * them.\n *\n * Clients MUST call destroy() when complete. It is safe to call destroy()\n * multiple times.\n *\n * Note: at some point, it may be beneficial to allow this to listen on multiple\n * workspaces (for example: Plugin may become multi-AWorkspace aware.) This is\n * not covered, but it should be relatively easy to make this happen.\n */\npublic class NonFatalErrorHelper {\n    /*\n     * The workspace we're listening on (strictly speaking, the VCClient)\n     */\n    private final Workspace workspace;\n\n    /*\n     * List of non-fatals received\n     */\n    private final List nonFatalList = new ArrayList();\n\n    /* Remember calling thread away to ensure we get the right events */\n    private final Thread originatingThread = Thread.currentThread();\n\n    /*\n     * Lock for listener configuration\n     */\n    private final Object listenerLock = new Object();\n\n    /*\n     * Our NFE listener\n     */\n    private NonFatalErrorHelperListener listener = new NonFatalErrorHelperListener();\n\n<fim_suffix>    public NonFatalErrorHelper(final Workspace workspace) {\n        Check.notNull(workspace, \"workspace\"); //$NON-NLS-1$\n\n        this.workspace = workspace;\n\n        workspace.getClient().getEventEngine().addNonFatalErrorListener(listener);\n    }\n\n    public boolean hasNonFatalErrors() {\n        return (getNonFatalMessageCount() > 0);\n    }\n\n    public int getNonFatalMessageCount() {\n        synchronized (nonFatalList) {\n            return nonFatalList.size();\n        }\n    }\n\n    public String[] getNonFatalErrorMessages() {\n        synchronized (nonFatalList) {\n            return (String[]) nonFatalList.toArray(new String[nonFatalList.size()]);\n        }\n    }\n\n    public IStatus[] getNonFatalStatus() {\n        return getNonFatalStatus(IStatus.WARNING);\n    }\n\n    public IStatus[] getNonFatalStatus(final int severity) {\n        synchronized (nonFatalList) {\n            final IStatus[] status = new IStatus[nonFatalList.size()];\n\n            for (int i = 0; i < nonFatalList.size(); i++) {\n                status[i] = new Status(severity, getPluginID(), 0, nonFatalList.get(i).toString(), null);\n            }\n\n            return status;\n        }\n    }\n\n    public MultiStatus getNonFatalMultiStatus(final String message) {\n        return getNonFatalMultiStatus(IStatus.WARNING, message);\n    }\n\n    public MultiStatus getNonFatalMultiStatus(final int severity, final String message) {\n        return new MultiStatus(getPluginID(), 0, getNonFatalStatus(severity), message, null);\n    }\n\n    /*\n     * TODO: this should come from a proper source. See also\n     * CommandExceptionHandler.getPluginIdForCommand()\n     */\n    private String getPluginID() {\n        return TFSCommonClientPlugin.PLUGIN_ID;\n    }\n\n    public void destroy() {\n        synchronized (listenerLock) {\n            if (listener == null) {\n                return;\n            }\n\n            workspace.getClient().getEventEngine().removeNonFatalErrorListener(listener);\n            listener = null;\n        }\n    }\n\n    private class NonFatalErrorHelperListener implements NonFatalErrorListener {\n        @Override\n        public void onNonFatalError(final NonFatalErrorEvent e) {\n            /* Only pay attention to non-fatals which occur on our thread */\n            if (!originatingThread.equals(Thread.currentThread())) {\n                return;\n            }\n\n            synchronized (nonFatalList) {\n                nonFatalList.add(e.getMessage());\n            }\n        }\n    }\n}<fim_middle>// function below has no smell\n"}