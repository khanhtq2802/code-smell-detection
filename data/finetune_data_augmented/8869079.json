{"text": "<fim_prefix>      sb.append(\"user:\");\n      if (this.user == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.user);\n      }\n      first = false;\n    }\n    if (isSetGroupNames()) {\n      if (!first) sb.append(\", \");\n      sb.append(\"groupNames:\");\n      if (this.groupNames == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.groupNames);\n      }\n      first = false;\n    }\n    if (!first) sb.append(\", \");\n    sb.append(\"projectionSpec:\");\n    if (this.projectionSpec == null) {\n      sb.append(\"null\");\n    } else {\n      sb.append(this.projectionSpec);\n    }\n    first = false;\n    if (!first) sb.append(\", \");\n    sb.append(\"filterSpec:\");\n    if (this.filterSpec == null) {\n      sb.append(\"null\");\n    } else {\n      sb.append(this.filterSpec);\n    }\n    first = false;\n    sb.append(\")\");\n    return sb.toString();\n  }\n  public void validate() throws org.apache.thrift.TException {\n    // check for required fields\n    // check for sub-struct validity\n    if (projectionSpec != null) {\n      projectionSpec.validate();\n    }\n    if (filterSpec != null) {\n      filterSpec.validate();\n    }\n  }\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    try {\n      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n    try {\n      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.\n      __isset_bitfield = 0;\n      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private static class GetPartitionsRequestStandardSchemeFactory implements SchemeFactory {\n    public GetPartitionsRequestStandardScheme getScheme() {\n      return new GetPartitionsRequestStandardScheme();\n    }\n  }\n<fim_suffix>  private static class GetPartitionsRequestStandardScheme extends StandardScheme<GetPartitionsRequest> {\n    public void read(org.apache.thrift.protocol.TProtocol iprot, GetPartitionsRequest struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TField schemeField;\n      iprot.readStructBegin();\n      while (true)\n      {\n        schemeField = iprot.readFieldBegin();\n        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n          break;\n        }\n        switch (schemeField.id) {\n          case 1: // CAT_NAME\n            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n              struct.catName = iprot.readString();\n              struct.setCatNameIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 2: // DB_NAME\n            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n              struct.dbName = iprot.readString();\n              struct.setDbNameIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 3: // TBL_NAME\n            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n              struct.tblName = iprot.readString();\n              struct.setTblNameIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 4: // WITH_AUTH\n            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {\n              struct.withAuth = iprot.readBool();\n              struct.setWithAuthIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 5: // USER\n            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n              struct.user = iprot.readString();\n              struct.setUserIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 6: // GROUP_NAMES\n            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {\n              {\n                org.apache.thrift.protocol.TList _list1024 = iprot.readListBegin();\n                struct.groupNames = new ArrayList<String>(_list1024.size);\n                String _elem1025;\n                for (int _i1026 = 0; _i1026 < _list1024.size; ++_i1026)\n                {\n                  _elem1025 = iprot.readString();\n                  struct.groupNames.add(_elem1025);\n                }\n                iprot.readListEnd();\n              }\n              struct.setGroupNamesIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 7: // PROJECTION_SPEC\n            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n              struct.projectionSpec = new GetPartitionsProjectionSpec();\n              struct.projectionSpec.read(iprot);\n              struct.setProjectionSpecIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          case 8: // FILTER_SPEC\n            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n              struct.filterSpec = new GetPartitionsFilterSpec();\n              struct.filterSpec.read(iprot);\n              struct.setFilterSpecIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          default:\n            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n        }\n        iprot.readFieldEnd();\n      }\n      iprot.readStructEnd();\n      struct.validate();\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot, GetPartitionsRequest struct) throws org.apache.thrift.TException {\n      struct.validate();\n      oprot.writeStructBegin(STRUCT_DESC);\n      if (struct.catName != null) {\n        if (struct.isSetCatName()) {\n          oprot.writeFieldBegin(CAT_NAME_FIELD_DESC);\n          oprot.writeString(struct.catName);\n          oprot.writeFieldEnd();\n        }\n      }\n      if (struct.dbName != null) {\n        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);\n        oprot.writeString(struct.dbName);\n        oprot.writeFieldEnd();\n      }\n      if (struct.tblName != null) {\n        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);\n        oprot.writeString(struct.tblName);\n        oprot.writeFieldEnd();\n      }\n      if (struct.isSetWithAuth()) {\n        oprot.writeFieldBegin(WITH_AUTH_FIELD_DESC);\n        oprot.writeBool(struct.withAuth);\n        oprot.writeFieldEnd();\n      }\n      if (struct.user != null) {\n        if (struct.isSetUser()) {\n          oprot.writeFieldBegin(USER_FIELD_DESC);\n          oprot.writeString(struct.user);\n          oprot.writeFieldEnd();\n        }\n      }\n      if (struct.groupNames != null) {\n        if (struct.isSetGroupNames()) {\n          oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);\n          {\n            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.groupNames.size()));\n            for (String _iter1027 : struct.groupNames)\n            {\n              oprot.writeString(_iter1027);\n            }\n            oprot.writeListEnd();\n          }\n          oprot.writeFieldEnd();\n        }\n      }\n      if (struct.projectionSpec != null) {\n        oprot.writeFieldBegin(PROJECTION_SPEC_FIELD_DESC);\n        struct.projectionSpec.write(oprot);\n        oprot.writeFieldEnd();\n      }\n      if (struct.filterSpec != null) {\n        oprot.writeFieldBegin(FILTER_SPEC_FIELD_DESC);\n        struct.filterSpec.write(oprot);\n        oprot.writeFieldEnd();\n      }\n      oprot.writeFieldStop();\n      oprot.writeStructEnd();\n    }\n  }<fim_middle>// class below has no smell\n"}