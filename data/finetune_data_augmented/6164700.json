{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.ide.ext.java.client.search;\n\nimport com.google.gwt.dom.client.Element;\nimport com.google.inject.Inject;\nimport com.google.inject.assistedinject.Assisted;\nimport elemental.html.SpanElement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport org.eclipse.che.api.promises.client.Promise;\nimport org.eclipse.che.api.promises.client.PromiseProvider;\nimport org.eclipse.che.ide.ext.java.client.JavaResources;\nimport org.eclipse.che.ide.resource.Path;\nimport org.eclipse.che.ide.rest.UrlBuilder;\nimport org.eclipse.che.ide.ui.smartTree.TreeStyles;\nimport org.eclipse.che.ide.ui.smartTree.data.AbstractTreeNode;\nimport org.eclipse.che.ide.ui.smartTree.data.Node;\nimport org.eclipse.che.ide.ui.smartTree.presentation.HasNewPresentation;\nimport org.eclipse.che.ide.ui.smartTree.presentation.NewNodePresentation;\nimport org.eclipse.che.ide.util.dom.Elements;\nimport org.eclipse.che.jdt.ls.extension.api.dto.SearchResult;\nimport org.eclipse.che.jdt.ls.extension.api.dto.UsagesResponse;\n\npublic class UsagesNode extends AbstractTreeNode implements HasNewPresentation {\n\n  private NodeFactory nodeFactory;\n  private String name;\n  private UsagesResponse response;\n  private PromiseProvider promiseProvider;\n  private JavaResources resources;\n  private TreeStyles styles;\n\n<fim_suffix>  @Inject\n  public UsagesNode(\n      @Assisted UsagesResponse response,\n      NodeFactory nodeFactory,\n      PromiseProvider promiseProvider,\n      TreeStyles styles,\n      JavaResources resources) {\n    this.response = response;\n    this.nodeFactory = nodeFactory;\n    this.promiseProvider = promiseProvider;\n    this.resources = resources;\n    this.styles = styles;\n  }\n\n  @Override\n  public String getName() {\n    return name;\n  }\n\n  @Override\n  public boolean isLeaf() {\n    return response.getSearchResults().isEmpty();\n  }\n\n  @Override\n  public NewNodePresentation getPresentation() {\n    SpanElement spanElement =\n        Elements.createSpanElement(styles.treeStylesCss().presentableTextContainer());\n    spanElement.setInnerHTML(\n        \"Usages of <span class=\\\"\"\n            + resources.css().searchMatch()\n            + \"\\\">\"\n            + response.getSearchedElement()\n            + \"</span> [\"\n            + calculateMatchCount(response)\n            + \" occurrences]\");\n\n    return new NewNodePresentation.Builder().withUserElement((Element) spanElement).build();\n  }\n\n  private int calculateMatchCount(UsagesResponse response) {\n    return calculateMatchCount(response.getSearchResults());\n  }\n\n  private int calculateMatchCount(List<SearchResult> searchResults) {\n    int count = 0;\n    for (SearchResult result : searchResults) {\n      count += calculateMatchCount(result);\n    }\n    return count;\n  }\n\n  private int calculateMatchCount(SearchResult result) {\n    int count = result.getMatches().size();\n    count += calculateMatchCount(result.getChildren());\n    return count;\n  }\n\n  @Override\n  protected Promise<List<Node>> getChildrenImpl() {\n    try {\n      Map<String, List<SearchResult>> children = new HashMap<>();\n      for (SearchResult result : response.getSearchResults()) {\n        Path p = toPath(result.getUri());\n        if (p.isEmpty()) {\n          throw new IllegalArgumentException(\"Path of length 0: \" + result.getUri());\n        }\n        List<SearchResult> results = children.get(p.segment(0));\n        if (results == null) {\n          results = new ArrayList<>();\n          children.put(p.segment(0), results);\n        }\n        results.add(result);\n      }\n\n      return promiseProvider.resolve(\n          children\n              .entrySet()\n              .stream()\n              .map(entry -> nodeFactory.createProject(entry.getKey(), entry.getValue()))\n              .collect(Collectors.toList()));\n    } catch (Exception e) {\n      return promiseProvider.reject(e);\n    }\n  }\n\n  static Path toPath(String uri) {\n    return uri.startsWith(\"/\") ? new Path(uri) : new Path(new UrlBuilder(uri).getPath());\n  }\n}<fim_middle>// function below has no smell\n"}