{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.drill.exec.store.pcapng.schema;\nimport fr.bmartel.pcapdecoder.structure.types.inter.IEnhancedPacketBLock;\nimport org.apache.drill.common.types.TypeProtos;\nimport org.apache.drill.common.types.Types;\nimport org.apache.drill.exec.store.pcapng.decoder.PacketDecoder;\nimport org.apache.drill.exec.vector.ValueVector;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport static org.apache.drill.exec.store.pcap.PcapFormatUtils.parseBytesToASCII;\nimport static org.apache.drill.exec.store.pcapng.schema.Util.setNullableLongColumnValue;\npublic class Schema {\n  private final static Map<String, Column> columns = new HashMap<>();\n  static {\n    columns.put(\"timestamp\", new TimestampImpl());\n    columns.put(\"packet_length\", new PacketLenImpl());\n    columns.put(\"type\", new TypeImpl());\n    columns.put(\"src_ip\", new SrcIpImpl());\n    columns.put(\"dst_ip\", new DstIpImpl());\n    columns.put(\"src_port\", new SrcPortImpl());\n    columns.put(\"dst_port\", new DstPortImpl());\n    columns.put(\"src_mac_address\", new SrcMacImpl());\n    columns.put(\"dst_mac_address\", new DstMacImpl());\n    columns.put(\"tcp_session\", new TcpSessionImpl());\n    columns.put(\"tcp_ack\", new TcpAckImpl());\n    columns.put(\"tcp_flags\", new TcpFlags());\n    columns.put(\"tcp_flags_ns\", new TcpFlagsNsImpl());\n    columns.put(\"tcp_flags_cwr\", new TcpFlagsCwrImpl());\n    columns.put(\"tcp_flags_ece\", new TcpFlagsEceImpl());\n    columns.put(\"tcp_flags_ece_ecn_capable\", new TcpFlagsEceEcnCapableImpl());\n    columns.put(\"tcp_flags_ece_congestion_experienced\", new TcpFlagsEceCongestionExperiencedImpl());\n    columns.put(\"tcp_flags_urg\", new TcpFlagsUrgIml());\n    columns.put(\"tcp_flags_ack\", new TcpFlagsAckImpl());\n    columns.put(\"tcp_flags_psh\", new TcpFlagsPshImpl());\n    columns.put(\"tcp_flags_rst\", new TcpFlagsRstImpl());\n    columns.put(\"tcp_flags_syn\", new TcpFlagsSynImpl());\n    columns.put(\"tcp_flags_fin\", new TcpFlagsFinImpl());\n    columns.put(\"tcp_parsed_flags\", new TcpParsedFlags());\n    columns.put(\"packet_data\", new PacketDataImpl());\n  }\n  public static Map<String, Column> getColumns() {\n    return columns;\n  }\n  public static Set<String> getColumnsNames() {\n    return columns.keySet();\n  }\n  static class TimestampImpl implements Column {\n    @Override\n    public TypeProtos.MajorType getMinorType() {\n      return Types.required(TypeProtos.MinorType.TIMESTAMP);\n    }\n    @Override\n    public void process(IEnhancedPacketBLock block, ValueVector vv, int count) {\n      Util.setTimestampColumnValue(block.getTimeStamp(), vv, count);\n    }\n  }\n  static class PacketLenImpl implements Column {\n    @Override\n    public TypeProtos.MajorType getMinorType() {\n      return Types.required(TypeProtos.MinorType.INT);\n    }\n    @Override\n    public void process(IEnhancedPacketBLock block, ValueVector vv, int count) {\n      Util.setIntegerColumnValue(block.getPacketLength(), vv, count);\n    }\n  }\n  static class TypeImpl implements Column {\n    @Override\n    public TypeProtos.MajorType getMinorType() {\n      return Types.optional(TypeProtos.MinorType.VARCHAR);\n    }\n    @Override\n    public void process(IEnhancedPacketBLock block, ValueVector vv, int count) {\n      PacketDecoder packet = new PacketDecoder();\n      if (packet.readPcapng(block.getPacketData())) {\n        Util.setNullableStringColumnValue(packet.getPacketType(), vv, count);\n      }\n    }\n  }\n  static class SrcIpImpl implements Column {\n    @Override\n    public TypeProtos.MajorType getMinorType() {\n      return Types.optional(TypeProtos.MinorType.VARCHAR);\n    }\n    @Override\n    public void process(IEnhancedPacketBLock block, ValueVector vv, int count) {\n      PacketDecoder packet = new PacketDecoder();\n      if (packet.readPcapng(block.getPacketData())) {\n        Util.setNullableStringColumnValue(packet.getSrc_ip().getHostAddress(), vv, count);\n      }\n    }\n  }\n  static class DstIpImpl implements Column {\n    @Override\n    public TypeProtos.MajorType getMinorType() {\n      return Types.optional(TypeProtos.MinorType.VARCHAR);\n    }\n    @Override\n    public void process(IEnhancedPacketBLock block, ValueVector vv, int count) {\n      PacketDecoder packet = new PacketDecoder();\n      if (packet.readPcapng(block.getPacketData())) {\n        Util.setNullableStringColumnValue(packet.getDst_ip().getHostAddress(), vv, count);\n      }\n    }\n  }\n  static class SrcPortImpl implements Column {\n    @Override\n    public TypeProtos.MajorType getMinorType() {\n      return Types.optional(TypeProtos.MinorType.INT);\n    }\n    @Override\n    public void process(IEnhancedPacketBLock block, ValueVector vv, int count) {\n      PacketDecoder packet = new PacketDecoder();\n      if (packet.readPcapng(block.getPacketData())) {\n        Util.setNullableIntegerColumnValue(packet.getSrc_port(), vv, count);\n      }\n    }\n  }\n  static class DstPortImpl implements Column {\n    @Override\n    public TypeProtos.MajorType getMinorType() {\n      return Types.optional(TypeProtos.MinorType.INT);\n    }\n    @Override\n    public void process(IEnhancedPacketBLock block, ValueVector vv, int count) {\n      PacketDecoder packet = new PacketDecoder();\n      if (packet.readPcapng(block.getPacketData())) {\n        Util.setNullableIntegerColumnValue(packet.getDst_port(), vv, count);\n      }\n    }\n  }\n  static class SrcMacImpl implements Column {\n    @Override\n    public TypeProtos.MajorType getMinorType() {\n      return Types.optional(TypeProtos.MinorType.VARCHAR);\n    }\n    @Override\n    public void process(IEnhancedPacketBLock block, ValueVector vv, int count) {\n      PacketDecoder packet = new PacketDecoder();\n      if (packet.readPcapng(block.getPacketData())) {\n        Util.setNullableStringColumnValue(packet.getEthernetSource(), vv, count);\n      }\n    }\n  }\n  static class DstMacImpl implements Column {\n    @Override\n    public TypeProtos.MajorType getMinorType() {\n      return Types.optional(TypeProtos.MinorType.VARCHAR);\n    }\n    @Override\n    public void process(IEnhancedPacketBLock block, ValueVector vv, int count) {\n      PacketDecoder packet = new PacketDecoder();\n      if (packet.readPcapng(block.getPacketData())) {\n        Util.setNullableStringColumnValue(packet.getEthernetDestination(), vv, count);\n      }\n    }\n  }\n<fim_suffix>  static class TcpSessionImpl implements Column {\n    @Override\n    public TypeProtos.MajorType getMinorType() {\n      return Types.optional(TypeProtos.MinorType.BIGINT);\n    }\n    @Override\n    public void process(IEnhancedPacketBLock block, ValueVector vv, int count) {\n      PacketDecoder packet = new PacketDecoder();\n      if (packet.readPcapng(block.getPacketData())) {\n        setNullableLongColumnValue(packet.getSessionHash(), vv, count);\n      }\n    }\n  }\n  static class TcpAckImpl implements Column {\n    @Override\n    public TypeProtos.MajorType getMinorType() {\n      return Types.optional(TypeProtos.MinorType.INT);\n    }\n    @Override\n    public void process(IEnhancedPacketBLock block, ValueVector vv, int count) {\n      PacketDecoder packet = new PacketDecoder();\n      if (packet.readPcapng(block.getPacketData())) {<fim_middle>// class below has no smell\n"}