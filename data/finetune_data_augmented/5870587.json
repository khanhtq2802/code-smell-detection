{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.uima.caseditor.editor.outline;\nimport java.util.Collection;\nimport org.apache.uima.cas.FeatureStructure;\nimport org.apache.uima.cas.Type;\nimport org.apache.uima.caseditor.CasEditorPlugin;\nimport org.apache.uima.caseditor.Images;\nimport org.apache.uima.caseditor.editor.AnnotationEditor;\nimport org.apache.uima.caseditor.editor.CasEditorError;\nimport org.apache.uima.caseditor.editor.IAnnotationEditorModifyListener;\nimport org.apache.uima.caseditor.editor.action.DeleteFeatureStructureAction;\nimport org.apache.uima.caseditor.editor.action.LowerLeftAnnotationSideAction;\nimport org.apache.uima.caseditor.editor.action.LowerRightAnnotationSideAction;\nimport org.apache.uima.caseditor.editor.action.MergeAnnotationAction;\nimport org.apache.uima.caseditor.editor.action.WideLeftAnnotationSideAction;\nimport org.apache.uima.caseditor.editor.action.WideRightAnnotationSideAction;\nimport org.apache.uima.caseditor.editor.util.AnnotationSelection;\nimport org.apache.uima.caseditor.editor.util.FeatureStructureTransfer;\nimport org.eclipse.core.runtime.IAdaptable;\nimport org.eclipse.jface.action.Action;\nimport org.eclipse.jface.action.IMenuManager;\nimport org.eclipse.jface.action.IToolBarManager;\nimport org.eclipse.jface.viewers.ISelection;\nimport org.eclipse.jface.viewers.StructuredSelection;\nimport org.eclipse.jface.viewers.TreeViewer;\nimport org.eclipse.jface.viewers.Viewer;\nimport org.eclipse.jface.viewers.ViewerFilter;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.dnd.DND;\nimport org.eclipse.swt.dnd.DragSource;\nimport org.eclipse.swt.dnd.DragSourceEvent;\nimport org.eclipse.swt.dnd.DragSourceListener;\nimport org.eclipse.swt.dnd.Transfer;\nimport org.eclipse.swt.layout.FillLayout;\nimport org.eclipse.swt.layout.GridData;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Control;\nimport org.eclipse.swt.widgets.TreeColumn;\nimport org.eclipse.swt.widgets.TreeItem;\nimport org.eclipse.ui.IActionBars;\nimport org.eclipse.ui.ISelectionListener;\nimport org.eclipse.ui.IWorkbenchPart;\nimport org.eclipse.ui.actions.ActionFactory;\nimport org.eclipse.ui.part.IPage;\nimport org.eclipse.ui.views.contentoutline.ContentOutline;\nimport org.eclipse.ui.views.contentoutline.ContentOutlinePage;\n/**\n * This outline view displays all <code>AnnotationFS</code>s of the current\n * mode/type from the binded editor.\n */\npublic final class AnnotationOutline extends ContentOutlinePage\n\t\timplements ISelectionListener {\n  /**\n   * This listener receive events from the bound editor.\n   */\n  protected class EditorListener implements IAnnotationEditorModifyListener {\n    /**\n     * Called if the editor annotation mode was changed.\n     * \n     * @param newMode\n     */\n    public void annotationModeChanged(Type newMode) {\n      changeAnnotationMode();\n      mTableViewer.refresh();\n    }\n    public void showAnnotationsChanged(Collection<Type> shownAnnotationTypes) {\n      mTableViewer.refresh();\n    }\n  }\n  /**\n   * Selects all elements in the tree viewer.\n   */\n  private class SelectAllAction extends Action {\n    /**\n     * Selects all elements in the tree viewer.\n     */\n<fim_suffix>    @Override\n    public void run() {\n      mTableViewer.getTree().selectAll();\n      mTableViewer.setSelection(mTableViewer.getSelection());\n    }\n  }\n  private IAnnotationEditorModifyListener editorChangeListener;\n  private OutlineStyles style = OutlineStyles.TYPE;\n  private Composite mOutlineComposite;\n  private TreeViewer mTableViewer;\n  /**\n   * The <code>AnnotationEditor</code> which is bound to this outline view.\n   */\n  private AnnotationEditor editor;\n  /**\n   * Creates a new <code>AnnotationOutline</code> object.\n   *\n   * @param editor -\n   *          the editor to bind\n   */\n  public AnnotationOutline(AnnotationEditor editor) {\n    this.editor = editor;\n  }\n  /**\n   * Creates the outline table control.\n   *\n   * @param parent\n   */\n  @Override\n  public void createControl(Composite parent) {\n    mOutlineComposite = new Composite(parent, SWT.NONE);\n    mOutlineComposite.setLayout(new FillLayout());\n    createTableViewer(mOutlineComposite);\n    mOutlineComposite.layout(true);\n    getSite().getPage().addSelectionListener(this);\n    getSite().setSelectionProvider(mTableViewer);\n    changeAnnotationMode();\n    editorChangeListener = new EditorListener();\n    editor.addAnnotationListener(editorChangeListener);\n    DragSource source = new DragSource(mTableViewer.getTree(), DND.DROP_COPY);\n    source.setTransfer(new Transfer[] { FeatureStructureTransfer.getInstance() });\n    source.addDragListener(new DragSourceListener() {\n      TreeItem dragSourceItem = null;\n      public void dragStart(DragSourceEvent event) {\n        TreeItem[] selection = mTableViewer.getTree().getSelection();\n        if (selection.length > 0) {\n          event.doit = true;\n          dragSourceItem = selection[0];\n        } else {\n          event.doit = false;\n        }\n      }\n      public void dragSetData(DragSourceEvent event) {\n        IAdaptable adaptable = (IAdaptable) dragSourceItem.getData();\n        event.data = adaptable.getAdapter(FeatureStructure.class);\n      }\n      public void dragFinished(DragSourceEvent event) {\n        // not needed\n      }\n    });\n  }\n  /**\n   * Retrieves the control.\n   *\n   * @return the control\n   */\n  @Override\n  public Control getControl() {\n    return mOutlineComposite;\n  }\n  /**\n   * Adds the these actions to the global action handler: {@link DeleteFeatureStructureAction}\n   * SelectAllAction\n   *\n   * @param actionBars\n   */\n  @Override\n  public void setActionBars(IActionBars actionBars) {\n    DeleteFeatureStructureAction deleteAction = new DeleteFeatureStructureAction(editor);\n    actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(), deleteAction);\n    getSite().getSelectionProvider().addSelectionChangedListener(deleteAction);\n    actionBars.setGlobalActionHandler(ActionFactory.SELECT_ALL.getId(), new SelectAllAction());\n    Action action = new SwitchStyleAction(this);\n    IMenuManager dropDownMenu = actionBars.getMenuManager();\n    dropDownMenu.add(action);\n    IToolBarManager toolBarManager = actionBars.getToolBarManager();\n    // wide left annotation side action\n    WideLeftAnnotationSideAction wideLeftAnnotationSideAction = new WideLeftAnnotationSideAction(\n            editor);\n    wideLeftAnnotationSideAction.setActionDefinitionId(WideLeftAnnotationSideAction.ID);\n    wideLeftAnnotationSideAction.setText(\"Wides the left annotation side\");\n    wideLeftAnnotationSideAction.setImageDescriptor(CasEditorPlugin\n            .getTaeImageDescriptor(Images.WIDE_LEFT_SIDE));\n    getSite().getSelectionProvider().addSelectionChangedListener(wideLeftAnnotationSideAction);\n    actionBars.setGlobalActionHandler(WideLeftAnnotationSideAction.ID, wideLeftAnnotationSideAction);\n    toolBarManager.add(wideLeftAnnotationSideAction);\n    // lower left annotation side action\n    LowerLeftAnnotationSideAction lowerLeftAnnotationSideAction = new LowerLeftAnnotationSideAction(\n            editor);\n    lowerLeftAnnotationSideAction.setActionDefinitionId(LowerLeftAnnotationSideAction.ID);\n    lowerLeftAnnotationSideAction.setText(\"Lowers the left annotation side\");\n    lowerLeftAnnotationSideAction.setImageDescriptor(CasEditorPlugin\n            .getTaeImageDescriptor(Images.LOWER_LEFT_SIDE));\n    getSite().getSelectionProvider().addSelectionChangedListener(lowerLeftAnnotationSideAction);<fim_middle>// function below has no smell\n"}